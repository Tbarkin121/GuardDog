
TorquePoleNet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088b8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000526c  08008aa0  08008aa0  00018aa0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dd0c  0800dd0c  00020cc0  2**0
                  CONTENTS
  4 .ARM          00000008  0800dd0c  0800dd0c  0001dd0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dd14  0800dd14  00020cc0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dd14  0800dd14  0001dd14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dd18  0800dd18  0001dd18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000cc0  20000000  0800dd1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007d8  20000cc0  0800e9dc  00020cc0  2**5
                  ALLOC
 10 ._user_heap_stack 00001000  20001498  0800e9dc  00021498  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020cc0  2**0
                  CONTENTS, READONLY
 12 .comment      00000093  00000000  00000000  00020cf0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001667a  00000000  00000000  00020d83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003504  00000000  00000000  000373fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001278  00000000  00000000  0003a908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e2f  00000000  00000000  0003bb80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000216c7  00000000  00000000  0003c9af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018c4c  00000000  00000000  0005e076  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3c7e  00000000  00000000  00076cc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005510  00000000  00000000  0014a940  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0014fe50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000cc0 	.word	0x20000cc0
 80001fc:	00000000 	.word	0x00000000
 8000200:	08008a80 	.word	0x08008a80

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000cc4 	.word	0x20000cc4
 800021c:	08008a80 	.word	0x08008a80

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80005c0:	4b0d      	ldr	r3, [pc, #52]	; (80005f8 <MX_CRC_Init+0x3c>)
 80005c2:	4a0e      	ldr	r2, [pc, #56]	; (80005fc <MX_CRC_Init+0x40>)
 80005c4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80005c6:	4b0c      	ldr	r3, [pc, #48]	; (80005f8 <MX_CRC_Init+0x3c>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80005cc:	4b0a      	ldr	r3, [pc, #40]	; (80005f8 <MX_CRC_Init+0x3c>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80005d2:	4b09      	ldr	r3, [pc, #36]	; (80005f8 <MX_CRC_Init+0x3c>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80005d8:	4b07      	ldr	r3, [pc, #28]	; (80005f8 <MX_CRC_Init+0x3c>)
 80005da:	2200      	movs	r2, #0
 80005dc:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80005de:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <MX_CRC_Init+0x3c>)
 80005e0:	2201      	movs	r2, #1
 80005e2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80005e4:	4804      	ldr	r0, [pc, #16]	; (80005f8 <MX_CRC_Init+0x3c>)
 80005e6:	f000 fca5 	bl	8000f34 <HAL_CRC_Init>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80005f0:	f000 f938 	bl	8000864 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80005f4:	bf00      	nop
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	20000cdc 	.word	0x20000cdc
 80005fc:	40023000 	.word	0x40023000

08000600 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000600:	b480      	push	{r7}
 8000602:	b085      	sub	sp, #20
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a0a      	ldr	r2, [pc, #40]	; (8000638 <HAL_CRC_MspInit+0x38>)
 800060e:	4293      	cmp	r3, r2
 8000610:	d10b      	bne.n	800062a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000612:	4b0a      	ldr	r3, [pc, #40]	; (800063c <HAL_CRC_MspInit+0x3c>)
 8000614:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000616:	4a09      	ldr	r2, [pc, #36]	; (800063c <HAL_CRC_MspInit+0x3c>)
 8000618:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800061c:	6493      	str	r3, [r2, #72]	; 0x48
 800061e:	4b07      	ldr	r3, [pc, #28]	; (800063c <HAL_CRC_MspInit+0x3c>)
 8000620:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000622:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800062a:	bf00      	nop
 800062c:	3714      	adds	r7, #20
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	40023000 	.word	0x40023000
 800063c:	40021000 	.word	0x40021000

08000640 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b088      	sub	sp, #32
 8000644:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000646:	f107 030c 	add.w	r3, r7, #12
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]
 800064e:	605a      	str	r2, [r3, #4]
 8000650:	609a      	str	r2, [r3, #8]
 8000652:	60da      	str	r2, [r3, #12]
 8000654:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000656:	4b18      	ldr	r3, [pc, #96]	; (80006b8 <MX_GPIO_Init+0x78>)
 8000658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800065a:	4a17      	ldr	r2, [pc, #92]	; (80006b8 <MX_GPIO_Init+0x78>)
 800065c:	f043 0301 	orr.w	r3, r3, #1
 8000660:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000662:	4b15      	ldr	r3, [pc, #84]	; (80006b8 <MX_GPIO_Init+0x78>)
 8000664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800066e:	4b12      	ldr	r3, [pc, #72]	; (80006b8 <MX_GPIO_Init+0x78>)
 8000670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000672:	4a11      	ldr	r2, [pc, #68]	; (80006b8 <MX_GPIO_Init+0x78>)
 8000674:	f043 0302 	orr.w	r3, r3, #2
 8000678:	64d3      	str	r3, [r2, #76]	; 0x4c
 800067a:	4b0f      	ldr	r3, [pc, #60]	; (80006b8 <MX_GPIO_Init+0x78>)
 800067c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800067e:	f003 0302 	and.w	r3, r3, #2
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000686:	2200      	movs	r2, #0
 8000688:	f44f 7180 	mov.w	r1, #256	; 0x100
 800068c:	480b      	ldr	r0, [pc, #44]	; (80006bc <MX_GPIO_Init+0x7c>)
 800068e:	f000 ff85 	bl	800159c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000692:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000696:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000698:	2301      	movs	r3, #1
 800069a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069c:	2300      	movs	r3, #0
 800069e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a0:	2300      	movs	r3, #0
 80006a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006a4:	f107 030c 	add.w	r3, r7, #12
 80006a8:	4619      	mov	r1, r3
 80006aa:	4804      	ldr	r0, [pc, #16]	; (80006bc <MX_GPIO_Init+0x7c>)
 80006ac:	f000 fdf4 	bl	8001298 <HAL_GPIO_Init>

}
 80006b0:	bf00      	nop
 80006b2:	3720      	adds	r7, #32
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40021000 	.word	0x40021000
 80006bc:	48000400 	.word	0x48000400

080006c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  data_flag=0;
 80006c4:	4b2b      	ldr	r3, [pc, #172]	; (8000774 <main+0xb4>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ca:	f000 fab2 	bl	8000c32 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ce:	f000 f863 	bl	8000798 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d2:	f7ff ffb5 	bl	8000640 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006d6:	f000 f9d7 	bl	8000a88 <MX_USART2_UART_Init>
  MX_CRC_Init();
 80006da:	f7ff ff6f 	bl	80005bc <MX_CRC_Init>
  MX_TIM2_Init();
 80006de:	f000 f967 	bl	80009b0 <MX_TIM2_Init>
  MX_X_CUBE_AI_Init();
 80006e2:	f004 fcb3 	bl	800504c <MX_X_CUBE_AI_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, data.bytes, sizeof(data.bytes)); //You need to toggle a breakpoint on this line!
 80006e6:	2210      	movs	r2, #16
 80006e8:	4923      	ldr	r1, [pc, #140]	; (8000778 <main+0xb8>)
 80006ea:	4824      	ldr	r0, [pc, #144]	; (800077c <main+0xbc>)
 80006ec:	f002 fbb4 	bl	8002e58 <HAL_UART_Receive_IT>
//    HAL_UART_Transmit(&huart2, data.bytes, sizeof(data.bytes), 100);

    // Read 16 bytes into data.bytes
//    HAL_UART_Receive(&huart2, data.bytes, sizeof(data.bytes), 1000);

    if(data_flag)
 80006f0:	4b20      	ldr	r3, [pc, #128]	; (8000774 <main+0xb4>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d0fb      	beq.n	80006f0 <main+0x30>
    {

      TIM2->CNT = 0;
 80006f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006fc:	2200      	movs	r2, #0
 80006fe:	625a      	str	r2, [r3, #36]	; 0x24
      HAL_TIM_Base_Start(&htim2);
 8000700:	481f      	ldr	r0, [pc, #124]	; (8000780 <main+0xc0>)
 8000702:	f001 ff8d 	bl	8002620 <HAL_TIM_Base_Start>
      in_data1[0] = data.floatValue[0];
 8000706:	4b1c      	ldr	r3, [pc, #112]	; (8000778 <main+0xb8>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4a1e      	ldr	r2, [pc, #120]	; (8000784 <main+0xc4>)
 800070c:	6013      	str	r3, [r2, #0]
      in_data1[1] = data.floatValue[1];
 800070e:	4b1a      	ldr	r3, [pc, #104]	; (8000778 <main+0xb8>)
 8000710:	685b      	ldr	r3, [r3, #4]
 8000712:	4a1c      	ldr	r2, [pc, #112]	; (8000784 <main+0xc4>)
 8000714:	6053      	str	r3, [r2, #4]
      MX_X_CUBE_AI_Process();
 8000716:	f004 fca7 	bl	8005068 <MX_X_CUBE_AI_Process>
      HAL_TIM_Base_Stop(&htim2);
 800071a:	4819      	ldr	r0, [pc, #100]	; (8000780 <main+0xc0>)
 800071c:	f001 ffe2 	bl	80026e4 <HAL_TIM_Base_Stop>
      data.floatValue[0] = out_data1[0];
 8000720:	4b19      	ldr	r3, [pc, #100]	; (8000788 <main+0xc8>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a14      	ldr	r2, [pc, #80]	; (8000778 <main+0xb8>)
 8000726:	6013      	str	r3, [r2, #0]
      data.floatValue[1] = out_data2[0];
 8000728:	4b18      	ldr	r3, [pc, #96]	; (800078c <main+0xcc>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a12      	ldr	r2, [pc, #72]	; (8000778 <main+0xb8>)
 800072e:	6053      	str	r3, [r2, #4]
      data.floatValue[2] = out_data3[0];
 8000730:	4b17      	ldr	r3, [pc, #92]	; (8000790 <main+0xd0>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a10      	ldr	r2, [pc, #64]	; (8000778 <main+0xb8>)
 8000736:	6093      	str	r3, [r2, #8]
      data.floatValue[3] = (float)TIM2->CNT/(1000000);
 8000738:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800073c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800073e:	ee07 3a90 	vmov	s15, r3
 8000742:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000746:	eddf 6a13 	vldr	s13, [pc, #76]	; 8000794 <main+0xd4>
 800074a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800074e:	4b0a      	ldr	r3, [pc, #40]	; (8000778 <main+0xb8>)
 8000750:	edc3 7a03 	vstr	s15, [r3, #12]
      data_flag = 0;
 8000754:	4b07      	ldr	r3, [pc, #28]	; (8000774 <main+0xb4>)
 8000756:	2200      	movs	r2, #0
 8000758:	701a      	strb	r2, [r3, #0]
      HAL_UART_Transmit(&huart2, data.bytes, sizeof(data.bytes), 100);
 800075a:	2364      	movs	r3, #100	; 0x64
 800075c:	2210      	movs	r2, #16
 800075e:	4906      	ldr	r1, [pc, #24]	; (8000778 <main+0xb8>)
 8000760:	4806      	ldr	r0, [pc, #24]	; (800077c <main+0xbc>)
 8000762:	f002 faeb 	bl	8002d3c <HAL_UART_Transmit>
      HAL_UART_Receive_IT(&huart2, data.bytes, sizeof(data.bytes));
 8000766:	2210      	movs	r2, #16
 8000768:	4903      	ldr	r1, [pc, #12]	; (8000778 <main+0xb8>)
 800076a:	4804      	ldr	r0, [pc, #16]	; (800077c <main+0xbc>)
 800076c:	f002 fb74 	bl	8002e58 <HAL_UART_Receive_IT>
    if(data_flag)
 8000770:	e7be      	b.n	80006f0 <main+0x30>
 8000772:	bf00      	nop
 8000774:	20000d24 	.word	0x20000d24
 8000778:	20000d00 	.word	0x20000d00
 800077c:	20000d78 	.word	0x20000d78
 8000780:	20000d2c 	.word	0x20000d2c
 8000784:	20000d10 	.word	0x20000d10
 8000788:	20000d18 	.word	0x20000d18
 800078c:	20000d1c 	.word	0x20000d1c
 8000790:	20000d20 	.word	0x20000d20
 8000794:	49742400 	.word	0x49742400

08000798 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b094      	sub	sp, #80	; 0x50
 800079c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800079e:	f107 0318 	add.w	r3, r7, #24
 80007a2:	2238      	movs	r2, #56	; 0x38
 80007a4:	2100      	movs	r1, #0
 80007a6:	4618      	mov	r0, r3
 80007a8:	f007 fb1a 	bl	8007de0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ac:	1d3b      	adds	r3, r7, #4
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
 80007b4:	609a      	str	r2, [r3, #8]
 80007b6:	60da      	str	r2, [r3, #12]
 80007b8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80007ba:	2000      	movs	r0, #0
 80007bc:	f000 ff06 	bl	80015cc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007c0:	2302      	movs	r3, #2
 80007c2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007ca:	2340      	movs	r3, #64	; 0x40
 80007cc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ce:	2302      	movs	r3, #2
 80007d0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007d2:	2302      	movs	r3, #2
 80007d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80007d6:	2304      	movs	r3, #4
 80007d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80007da:	2355      	movs	r3, #85	; 0x55
 80007dc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007de:	2302      	movs	r3, #2
 80007e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007e2:	2302      	movs	r3, #2
 80007e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007e6:	2302      	movs	r3, #2
 80007e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ea:	f107 0318 	add.w	r3, r7, #24
 80007ee:	4618      	mov	r0, r3
 80007f0:	f000 ffa0 	bl	8001734 <HAL_RCC_OscConfig>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <SystemClock_Config+0x66>
  {
    Error_Handler();
 80007fa:	f000 f833 	bl	8000864 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007fe:	230f      	movs	r3, #15
 8000800:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000802:	2303      	movs	r3, #3
 8000804:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000806:	2300      	movs	r3, #0
 8000808:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800080a:	2300      	movs	r3, #0
 800080c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800080e:	2300      	movs	r3, #0
 8000810:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000812:	1d3b      	adds	r3, r7, #4
 8000814:	2104      	movs	r1, #4
 8000816:	4618      	mov	r0, r3
 8000818:	f001 fa9e 	bl	8001d58 <HAL_RCC_ClockConfig>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000822:	f000 f81f 	bl	8000864 <Error_Handler>
  }
}
 8000826:	bf00      	nop
 8000828:	3750      	adds	r7, #80	; 0x50
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
	...

08000830 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  // We will set a data flag here and execute in the main loop
  data_flag = 1;
 8000838:	4b04      	ldr	r3, [pc, #16]	; (800084c <HAL_UART_RxCpltCallback+0x1c>)
 800083a:	2201      	movs	r2, #1
 800083c:	701a      	strb	r2, [r3, #0]
}
 800083e:	bf00      	nop
 8000840:	370c      	adds	r7, #12
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	20000d24 	.word	0x20000d24

08000850 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]

}
 8000858:	bf00      	nop
 800085a:	370c      	adds	r7, #12
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr

08000864 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000868:	b672      	cpsid	i
}
 800086a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800086c:	e7fe      	b.n	800086c <Error_Handler+0x8>
	...

08000870 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000876:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <HAL_MspInit+0x44>)
 8000878:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800087a:	4a0e      	ldr	r2, [pc, #56]	; (80008b4 <HAL_MspInit+0x44>)
 800087c:	f043 0301 	orr.w	r3, r3, #1
 8000880:	6613      	str	r3, [r2, #96]	; 0x60
 8000882:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <HAL_MspInit+0x44>)
 8000884:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000886:	f003 0301 	and.w	r3, r3, #1
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800088e:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <HAL_MspInit+0x44>)
 8000890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000892:	4a08      	ldr	r2, [pc, #32]	; (80008b4 <HAL_MspInit+0x44>)
 8000894:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000898:	6593      	str	r3, [r2, #88]	; 0x58
 800089a:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <HAL_MspInit+0x44>)
 800089c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800089e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008a2:	603b      	str	r3, [r7, #0]
 80008a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80008a6:	f000 ff35 	bl	8001714 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40021000 	.word	0x40021000

080008b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008bc:	e7fe      	b.n	80008bc <NMI_Handler+0x4>

080008be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008be:	b480      	push	{r7}
 80008c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008c2:	e7fe      	b.n	80008c2 <HardFault_Handler+0x4>

080008c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008c8:	e7fe      	b.n	80008c8 <MemManage_Handler+0x4>

080008ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ca:	b480      	push	{r7}
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ce:	e7fe      	b.n	80008ce <BusFault_Handler+0x4>

080008d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008d4:	e7fe      	b.n	80008d4 <UsageFault_Handler+0x4>

080008d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008d6:	b480      	push	{r7}
 80008d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008da:	bf00      	nop
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr

080008e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008e8:	bf00      	nop
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr

080008f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008f2:	b480      	push	{r7}
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008f6:	bf00      	nop
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr

08000900 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000904:	f000 f9e8 	bl	8000cd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000908:	bf00      	nop
 800090a:	bd80      	pop	{r7, pc}

0800090c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000910:	4802      	ldr	r0, [pc, #8]	; (800091c <USART2_IRQHandler+0x10>)
 8000912:	f002 faed 	bl	8002ef0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	20000d78 	.word	0x20000d78

08000920 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b086      	sub	sp, #24
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000928:	4a14      	ldr	r2, [pc, #80]	; (800097c <_sbrk+0x5c>)
 800092a:	4b15      	ldr	r3, [pc, #84]	; (8000980 <_sbrk+0x60>)
 800092c:	1ad3      	subs	r3, r2, r3
 800092e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000934:	4b13      	ldr	r3, [pc, #76]	; (8000984 <_sbrk+0x64>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d102      	bne.n	8000942 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800093c:	4b11      	ldr	r3, [pc, #68]	; (8000984 <_sbrk+0x64>)
 800093e:	4a12      	ldr	r2, [pc, #72]	; (8000988 <_sbrk+0x68>)
 8000940:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000942:	4b10      	ldr	r3, [pc, #64]	; (8000984 <_sbrk+0x64>)
 8000944:	681a      	ldr	r2, [r3, #0]
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	4413      	add	r3, r2
 800094a:	693a      	ldr	r2, [r7, #16]
 800094c:	429a      	cmp	r2, r3
 800094e:	d207      	bcs.n	8000960 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000950:	f007 faa4 	bl	8007e9c <__errno>
 8000954:	4603      	mov	r3, r0
 8000956:	220c      	movs	r2, #12
 8000958:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800095a:	f04f 33ff 	mov.w	r3, #4294967295
 800095e:	e009      	b.n	8000974 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000960:	4b08      	ldr	r3, [pc, #32]	; (8000984 <_sbrk+0x64>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000966:	4b07      	ldr	r3, [pc, #28]	; (8000984 <_sbrk+0x64>)
 8000968:	681a      	ldr	r2, [r3, #0]
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	4413      	add	r3, r2
 800096e:	4a05      	ldr	r2, [pc, #20]	; (8000984 <_sbrk+0x64>)
 8000970:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000972:	68fb      	ldr	r3, [r7, #12]
}
 8000974:	4618      	mov	r0, r3
 8000976:	3718      	adds	r7, #24
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	20008000 	.word	0x20008000
 8000980:	00000800 	.word	0x00000800
 8000984:	20000d28 	.word	0x20000d28
 8000988:	20001498 	.word	0x20001498

0800098c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000990:	4b06      	ldr	r3, [pc, #24]	; (80009ac <SystemInit+0x20>)
 8000992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000996:	4a05      	ldr	r2, [pc, #20]	; (80009ac <SystemInit+0x20>)
 8000998:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800099c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	e000ed00 	.word	0xe000ed00

080009b0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b088      	sub	sp, #32
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009b6:	f107 0310 	add.w	r3, r7, #16
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	605a      	str	r2, [r3, #4]
 80009c0:	609a      	str	r2, [r3, #8]
 80009c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009c4:	1d3b      	adds	r3, r7, #4
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	605a      	str	r2, [r3, #4]
 80009cc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009ce:	4b1e      	ldr	r3, [pc, #120]	; (8000a48 <MX_TIM2_Init+0x98>)
 80009d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009d4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 170;
 80009d6:	4b1c      	ldr	r3, [pc, #112]	; (8000a48 <MX_TIM2_Init+0x98>)
 80009d8:	22aa      	movs	r2, #170	; 0xaa
 80009da:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009dc:	4b1a      	ldr	r3, [pc, #104]	; (8000a48 <MX_TIM2_Init+0x98>)
 80009de:	2200      	movs	r2, #0
 80009e0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 80009e2:	4b19      	ldr	r3, [pc, #100]	; (8000a48 <MX_TIM2_Init+0x98>)
 80009e4:	f04f 32ff 	mov.w	r2, #4294967295
 80009e8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ea:	4b17      	ldr	r3, [pc, #92]	; (8000a48 <MX_TIM2_Init+0x98>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009f0:	4b15      	ldr	r3, [pc, #84]	; (8000a48 <MX_TIM2_Init+0x98>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009f6:	4814      	ldr	r0, [pc, #80]	; (8000a48 <MX_TIM2_Init+0x98>)
 80009f8:	f001 fdba 	bl	8002570 <HAL_TIM_Base_Init>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000a02:	f7ff ff2f 	bl	8000864 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a0a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a0c:	f107 0310 	add.w	r3, r7, #16
 8000a10:	4619      	mov	r1, r3
 8000a12:	480d      	ldr	r0, [pc, #52]	; (8000a48 <MX_TIM2_Init+0x98>)
 8000a14:	f001 fe8e 	bl	8002734 <HAL_TIM_ConfigClockSource>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000a1e:	f7ff ff21 	bl	8000864 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a22:	2300      	movs	r3, #0
 8000a24:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a26:	2300      	movs	r3, #0
 8000a28:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a2a:	1d3b      	adds	r3, r7, #4
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4806      	ldr	r0, [pc, #24]	; (8000a48 <MX_TIM2_Init+0x98>)
 8000a30:	f002 f8b2 	bl	8002b98 <HAL_TIMEx_MasterConfigSynchronization>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000a3a:	f7ff ff13 	bl	8000864 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a3e:	bf00      	nop
 8000a40:	3720      	adds	r7, #32
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	20000d2c 	.word	0x20000d2c

08000a4c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b085      	sub	sp, #20
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a5c:	d10b      	bne.n	8000a76 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a5e:	4b09      	ldr	r3, [pc, #36]	; (8000a84 <HAL_TIM_Base_MspInit+0x38>)
 8000a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a62:	4a08      	ldr	r2, [pc, #32]	; (8000a84 <HAL_TIM_Base_MspInit+0x38>)
 8000a64:	f043 0301 	orr.w	r3, r3, #1
 8000a68:	6593      	str	r3, [r2, #88]	; 0x58
 8000a6a:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <HAL_TIM_Base_MspInit+0x38>)
 8000a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000a76:	bf00      	nop
 8000a78:	3714      	adds	r7, #20
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	40021000 	.word	0x40021000

08000a88 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a8c:	4b22      	ldr	r3, [pc, #136]	; (8000b18 <MX_USART2_UART_Init+0x90>)
 8000a8e:	4a23      	ldr	r2, [pc, #140]	; (8000b1c <MX_USART2_UART_Init+0x94>)
 8000a90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a92:	4b21      	ldr	r3, [pc, #132]	; (8000b18 <MX_USART2_UART_Init+0x90>)
 8000a94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a9a:	4b1f      	ldr	r3, [pc, #124]	; (8000b18 <MX_USART2_UART_Init+0x90>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000aa0:	4b1d      	ldr	r3, [pc, #116]	; (8000b18 <MX_USART2_UART_Init+0x90>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000aa6:	4b1c      	ldr	r3, [pc, #112]	; (8000b18 <MX_USART2_UART_Init+0x90>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000aac:	4b1a      	ldr	r3, [pc, #104]	; (8000b18 <MX_USART2_UART_Init+0x90>)
 8000aae:	220c      	movs	r2, #12
 8000ab0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ab2:	4b19      	ldr	r3, [pc, #100]	; (8000b18 <MX_USART2_UART_Init+0x90>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab8:	4b17      	ldr	r3, [pc, #92]	; (8000b18 <MX_USART2_UART_Init+0x90>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000abe:	4b16      	ldr	r3, [pc, #88]	; (8000b18 <MX_USART2_UART_Init+0x90>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ac4:	4b14      	ldr	r3, [pc, #80]	; (8000b18 <MX_USART2_UART_Init+0x90>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aca:	4b13      	ldr	r3, [pc, #76]	; (8000b18 <MX_USART2_UART_Init+0x90>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ad0:	4811      	ldr	r0, [pc, #68]	; (8000b18 <MX_USART2_UART_Init+0x90>)
 8000ad2:	f002 f8e3 	bl	8002c9c <HAL_UART_Init>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000adc:	f7ff fec2 	bl	8000864 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	480d      	ldr	r0, [pc, #52]	; (8000b18 <MX_USART2_UART_Init+0x90>)
 8000ae4:	f004 f901 	bl	8004cea <HAL_UARTEx_SetTxFifoThreshold>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000aee:	f7ff feb9 	bl	8000864 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000af2:	2100      	movs	r1, #0
 8000af4:	4808      	ldr	r0, [pc, #32]	; (8000b18 <MX_USART2_UART_Init+0x90>)
 8000af6:	f004 f936 	bl	8004d66 <HAL_UARTEx_SetRxFifoThreshold>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000b00:	f7ff feb0 	bl	8000864 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000b04:	4804      	ldr	r0, [pc, #16]	; (8000b18 <MX_USART2_UART_Init+0x90>)
 8000b06:	f004 f8b7 	bl	8004c78 <HAL_UARTEx_DisableFifoMode>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000b10:	f7ff fea8 	bl	8000864 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b14:	bf00      	nop
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	20000d78 	.word	0x20000d78
 8000b1c:	40004400 	.word	0x40004400

08000b20 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b09a      	sub	sp, #104	; 0x68
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b28:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
 8000b36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b38:	f107 0310 	add.w	r3, r7, #16
 8000b3c:	2244      	movs	r2, #68	; 0x44
 8000b3e:	2100      	movs	r1, #0
 8000b40:	4618      	mov	r0, r3
 8000b42:	f007 f94d 	bl	8007de0 <memset>
  if(uartHandle->Instance==USART2)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a23      	ldr	r2, [pc, #140]	; (8000bd8 <HAL_UART_MspInit+0xb8>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d13e      	bne.n	8000bce <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b50:	2302      	movs	r3, #2
 8000b52:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b54:	2300      	movs	r3, #0
 8000b56:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b58:	f107 0310 	add.w	r3, r7, #16
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f001 fb17 	bl	8002190 <HAL_RCCEx_PeriphCLKConfig>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b68:	f7ff fe7c 	bl	8000864 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b6c:	4b1b      	ldr	r3, [pc, #108]	; (8000bdc <HAL_UART_MspInit+0xbc>)
 8000b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b70:	4a1a      	ldr	r2, [pc, #104]	; (8000bdc <HAL_UART_MspInit+0xbc>)
 8000b72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b76:	6593      	str	r3, [r2, #88]	; 0x58
 8000b78:	4b18      	ldr	r3, [pc, #96]	; (8000bdc <HAL_UART_MspInit+0xbc>)
 8000b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b80:	60fb      	str	r3, [r7, #12]
 8000b82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b84:	4b15      	ldr	r3, [pc, #84]	; (8000bdc <HAL_UART_MspInit+0xbc>)
 8000b86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b88:	4a14      	ldr	r2, [pc, #80]	; (8000bdc <HAL_UART_MspInit+0xbc>)
 8000b8a:	f043 0301 	orr.w	r3, r3, #1
 8000b8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b90:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <HAL_UART_MspInit+0xbc>)
 8000b92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b94:	f003 0301 	and.w	r3, r3, #1
 8000b98:	60bb      	str	r3, [r7, #8]
 8000b9a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000b9c:	230c      	movs	r3, #12
 8000b9e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bac:	2307      	movs	r3, #7
 8000bae:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bba:	f000 fb6d 	bl	8001298 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	2026      	movs	r0, #38	; 0x26
 8000bc4:	f000 f981 	bl	8000eca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000bc8:	2026      	movs	r0, #38	; 0x26
 8000bca:	f000 f998 	bl	8000efe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000bce:	bf00      	nop
 8000bd0:	3768      	adds	r7, #104	; 0x68
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40004400 	.word	0x40004400
 8000bdc:	40021000 	.word	0x40021000

08000be0 <Reset_Handler>:
 8000be0:	480d      	ldr	r0, [pc, #52]	; (8000c18 <LoopForever+0x2>)
 8000be2:	4685      	mov	sp, r0
 8000be4:	f7ff fed2 	bl	800098c <SystemInit>
 8000be8:	480c      	ldr	r0, [pc, #48]	; (8000c1c <LoopForever+0x6>)
 8000bea:	490d      	ldr	r1, [pc, #52]	; (8000c20 <LoopForever+0xa>)
 8000bec:	4a0d      	ldr	r2, [pc, #52]	; (8000c24 <LoopForever+0xe>)
 8000bee:	2300      	movs	r3, #0
 8000bf0:	e002      	b.n	8000bf8 <LoopCopyDataInit>

08000bf2 <CopyDataInit>:
 8000bf2:	58d4      	ldr	r4, [r2, r3]
 8000bf4:	50c4      	str	r4, [r0, r3]
 8000bf6:	3304      	adds	r3, #4

08000bf8 <LoopCopyDataInit>:
 8000bf8:	18c4      	adds	r4, r0, r3
 8000bfa:	428c      	cmp	r4, r1
 8000bfc:	d3f9      	bcc.n	8000bf2 <CopyDataInit>
 8000bfe:	4a0a      	ldr	r2, [pc, #40]	; (8000c28 <LoopForever+0x12>)
 8000c00:	4c0a      	ldr	r4, [pc, #40]	; (8000c2c <LoopForever+0x16>)
 8000c02:	2300      	movs	r3, #0
 8000c04:	e001      	b.n	8000c0a <LoopFillZerobss>

08000c06 <FillZerobss>:
 8000c06:	6013      	str	r3, [r2, #0]
 8000c08:	3204      	adds	r2, #4

08000c0a <LoopFillZerobss>:
 8000c0a:	42a2      	cmp	r2, r4
 8000c0c:	d3fb      	bcc.n	8000c06 <FillZerobss>
 8000c0e:	f007 f94b 	bl	8007ea8 <__libc_init_array>
 8000c12:	f7ff fd55 	bl	80006c0 <main>

08000c16 <LoopForever>:
 8000c16:	e7fe      	b.n	8000c16 <LoopForever>
 8000c18:	20008000 	.word	0x20008000
 8000c1c:	20000000 	.word	0x20000000
 8000c20:	20000cc0 	.word	0x20000cc0
 8000c24:	0800dd1c 	.word	0x0800dd1c
 8000c28:	20000cc0 	.word	0x20000cc0
 8000c2c:	20001498 	.word	0x20001498

08000c30 <ADC1_2_IRQHandler>:
 8000c30:	e7fe      	b.n	8000c30 <ADC1_2_IRQHandler>

08000c32 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b082      	sub	sp, #8
 8000c36:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c3c:	2003      	movs	r0, #3
 8000c3e:	f000 f939 	bl	8000eb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c42:	2000      	movs	r0, #0
 8000c44:	f000 f80e 	bl	8000c64 <HAL_InitTick>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d002      	beq.n	8000c54 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	71fb      	strb	r3, [r7, #7]
 8000c52:	e001      	b.n	8000c58 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c54:	f7ff fe0c 	bl	8000870 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c58:	79fb      	ldrb	r3, [r7, #7]

}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
	...

08000c64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000c70:	4b16      	ldr	r3, [pc, #88]	; (8000ccc <HAL_InitTick+0x68>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d022      	beq.n	8000cbe <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000c78:	4b15      	ldr	r3, [pc, #84]	; (8000cd0 <HAL_InitTick+0x6c>)
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	4b13      	ldr	r3, [pc, #76]	; (8000ccc <HAL_InitTick+0x68>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c84:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f000 f944 	bl	8000f1a <HAL_SYSTICK_Config>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d10f      	bne.n	8000cb8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2b0f      	cmp	r3, #15
 8000c9c:	d809      	bhi.n	8000cb2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	6879      	ldr	r1, [r7, #4]
 8000ca2:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca6:	f000 f910 	bl	8000eca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000caa:	4a0a      	ldr	r2, [pc, #40]	; (8000cd4 <HAL_InitTick+0x70>)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	6013      	str	r3, [r2, #0]
 8000cb0:	e007      	b.n	8000cc2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	73fb      	strb	r3, [r7, #15]
 8000cb6:	e004      	b.n	8000cc2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	73fb      	strb	r3, [r7, #15]
 8000cbc:	e001      	b.n	8000cc2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	3710      	adds	r7, #16
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	20000008 	.word	0x20000008
 8000cd0:	20000000 	.word	0x20000000
 8000cd4:	20000004 	.word	0x20000004

08000cd8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cdc:	4b05      	ldr	r3, [pc, #20]	; (8000cf4 <HAL_IncTick+0x1c>)
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	4b05      	ldr	r3, [pc, #20]	; (8000cf8 <HAL_IncTick+0x20>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	4a03      	ldr	r2, [pc, #12]	; (8000cf4 <HAL_IncTick+0x1c>)
 8000ce8:	6013      	str	r3, [r2, #0]
}
 8000cea:	bf00      	nop
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr
 8000cf4:	20000e0c 	.word	0x20000e0c
 8000cf8:	20000008 	.word	0x20000008

08000cfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  return uwTick;
 8000d00:	4b03      	ldr	r3, [pc, #12]	; (8000d10 <HAL_GetTick+0x14>)
 8000d02:	681b      	ldr	r3, [r3, #0]
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	20000e0c 	.word	0x20000e0c

08000d14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	f003 0307 	and.w	r3, r3, #7
 8000d22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d24:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <__NVIC_SetPriorityGrouping+0x44>)
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d2a:	68ba      	ldr	r2, [r7, #8]
 8000d2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d30:	4013      	ands	r3, r2
 8000d32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d46:	4a04      	ldr	r2, [pc, #16]	; (8000d58 <__NVIC_SetPriorityGrouping+0x44>)
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	60d3      	str	r3, [r2, #12]
}
 8000d4c:	bf00      	nop
 8000d4e:	3714      	adds	r7, #20
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d60:	4b04      	ldr	r3, [pc, #16]	; (8000d74 <__NVIC_GetPriorityGrouping+0x18>)
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	0a1b      	lsrs	r3, r3, #8
 8000d66:	f003 0307 	and.w	r3, r3, #7
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	db0b      	blt.n	8000da2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	f003 021f 	and.w	r2, r3, #31
 8000d90:	4907      	ldr	r1, [pc, #28]	; (8000db0 <__NVIC_EnableIRQ+0x38>)
 8000d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d96:	095b      	lsrs	r3, r3, #5
 8000d98:	2001      	movs	r0, #1
 8000d9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000da2:	bf00      	nop
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	e000e100 	.word	0xe000e100

08000db4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	6039      	str	r1, [r7, #0]
 8000dbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	db0a      	blt.n	8000dde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	b2da      	uxtb	r2, r3
 8000dcc:	490c      	ldr	r1, [pc, #48]	; (8000e00 <__NVIC_SetPriority+0x4c>)
 8000dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd2:	0112      	lsls	r2, r2, #4
 8000dd4:	b2d2      	uxtb	r2, r2
 8000dd6:	440b      	add	r3, r1
 8000dd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ddc:	e00a      	b.n	8000df4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	b2da      	uxtb	r2, r3
 8000de2:	4908      	ldr	r1, [pc, #32]	; (8000e04 <__NVIC_SetPriority+0x50>)
 8000de4:	79fb      	ldrb	r3, [r7, #7]
 8000de6:	f003 030f 	and.w	r3, r3, #15
 8000dea:	3b04      	subs	r3, #4
 8000dec:	0112      	lsls	r2, r2, #4
 8000dee:	b2d2      	uxtb	r2, r2
 8000df0:	440b      	add	r3, r1
 8000df2:	761a      	strb	r2, [r3, #24]
}
 8000df4:	bf00      	nop
 8000df6:	370c      	adds	r7, #12
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	e000e100 	.word	0xe000e100
 8000e04:	e000ed00 	.word	0xe000ed00

08000e08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b089      	sub	sp, #36	; 0x24
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	60f8      	str	r0, [r7, #12]
 8000e10:	60b9      	str	r1, [r7, #8]
 8000e12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	f003 0307 	and.w	r3, r3, #7
 8000e1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e1c:	69fb      	ldr	r3, [r7, #28]
 8000e1e:	f1c3 0307 	rsb	r3, r3, #7
 8000e22:	2b04      	cmp	r3, #4
 8000e24:	bf28      	it	cs
 8000e26:	2304      	movcs	r3, #4
 8000e28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	3304      	adds	r3, #4
 8000e2e:	2b06      	cmp	r3, #6
 8000e30:	d902      	bls.n	8000e38 <NVIC_EncodePriority+0x30>
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	3b03      	subs	r3, #3
 8000e36:	e000      	b.n	8000e3a <NVIC_EncodePriority+0x32>
 8000e38:	2300      	movs	r3, #0
 8000e3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e40:	69bb      	ldr	r3, [r7, #24]
 8000e42:	fa02 f303 	lsl.w	r3, r2, r3
 8000e46:	43da      	mvns	r2, r3
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	401a      	ands	r2, r3
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e50:	f04f 31ff 	mov.w	r1, #4294967295
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	fa01 f303 	lsl.w	r3, r1, r3
 8000e5a:	43d9      	mvns	r1, r3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e60:	4313      	orrs	r3, r2
         );
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3724      	adds	r7, #36	; 0x24
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
	...

08000e70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	3b01      	subs	r3, #1
 8000e7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e80:	d301      	bcc.n	8000e86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e82:	2301      	movs	r3, #1
 8000e84:	e00f      	b.n	8000ea6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e86:	4a0a      	ldr	r2, [pc, #40]	; (8000eb0 <SysTick_Config+0x40>)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	3b01      	subs	r3, #1
 8000e8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e8e:	210f      	movs	r1, #15
 8000e90:	f04f 30ff 	mov.w	r0, #4294967295
 8000e94:	f7ff ff8e 	bl	8000db4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e98:	4b05      	ldr	r3, [pc, #20]	; (8000eb0 <SysTick_Config+0x40>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e9e:	4b04      	ldr	r3, [pc, #16]	; (8000eb0 <SysTick_Config+0x40>)
 8000ea0:	2207      	movs	r2, #7
 8000ea2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ea4:	2300      	movs	r3, #0
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	e000e010 	.word	0xe000e010

08000eb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	f7ff ff29 	bl	8000d14 <__NVIC_SetPriorityGrouping>
}
 8000ec2:	bf00      	nop
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b086      	sub	sp, #24
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	60b9      	str	r1, [r7, #8]
 8000ed4:	607a      	str	r2, [r7, #4]
 8000ed6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ed8:	f7ff ff40 	bl	8000d5c <__NVIC_GetPriorityGrouping>
 8000edc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ede:	687a      	ldr	r2, [r7, #4]
 8000ee0:	68b9      	ldr	r1, [r7, #8]
 8000ee2:	6978      	ldr	r0, [r7, #20]
 8000ee4:	f7ff ff90 	bl	8000e08 <NVIC_EncodePriority>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eee:	4611      	mov	r1, r2
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff ff5f 	bl	8000db4 <__NVIC_SetPriority>
}
 8000ef6:	bf00      	nop
 8000ef8:	3718      	adds	r7, #24
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b082      	sub	sp, #8
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	4603      	mov	r3, r0
 8000f06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff ff33 	bl	8000d78 <__NVIC_EnableIRQ>
}
 8000f12:	bf00      	nop
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b082      	sub	sp, #8
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f7ff ffa4 	bl	8000e70 <SysTick_Config>
 8000f28:	4603      	mov	r3, r0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
	...

08000f34 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d101      	bne.n	8000f46 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	e054      	b.n	8000ff0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	7f5b      	ldrb	r3, [r3, #29]
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d105      	bne.n	8000f5c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2200      	movs	r2, #0
 8000f54:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f7ff fb52 	bl	8000600 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2202      	movs	r2, #2
 8000f60:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	791b      	ldrb	r3, [r3, #4]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d10c      	bne.n	8000f84 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a22      	ldr	r2, [pc, #136]	; (8000ff8 <HAL_CRC_Init+0xc4>)
 8000f70:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	689a      	ldr	r2, [r3, #8]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f022 0218 	bic.w	r2, r2, #24
 8000f80:	609a      	str	r2, [r3, #8]
 8000f82:	e00c      	b.n	8000f9e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6899      	ldr	r1, [r3, #8]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f000 f834 	bl	8000ffc <HAL_CRCEx_Polynomial_Set>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e028      	b.n	8000ff0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	795b      	ldrb	r3, [r3, #5]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d105      	bne.n	8000fb2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f04f 32ff 	mov.w	r2, #4294967295
 8000fae:	611a      	str	r2, [r3, #16]
 8000fb0:	e004      	b.n	8000fbc <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	687a      	ldr	r2, [r7, #4]
 8000fb8:	6912      	ldr	r2, [r2, #16]
 8000fba:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	695a      	ldr	r2, [r3, #20]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	430a      	orrs	r2, r1
 8000fd0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	689b      	ldr	r3, [r3, #8]
 8000fd8:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	699a      	ldr	r2, [r3, #24]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	430a      	orrs	r2, r1
 8000fe6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2201      	movs	r2, #1
 8000fec:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8000fee:	2300      	movs	r3, #0
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	04c11db7 	.word	0x04c11db7

08000ffc <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b087      	sub	sp, #28
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001008:	2300      	movs	r3, #0
 800100a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800100c:	231f      	movs	r3, #31
 800100e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	f003 0301 	and.w	r3, r3, #1
 8001016:	2b00      	cmp	r3, #0
 8001018:	d102      	bne.n	8001020 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	75fb      	strb	r3, [r7, #23]
 800101e:	e063      	b.n	80010e8 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001020:	bf00      	nop
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	1e5a      	subs	r2, r3, #1
 8001026:	613a      	str	r2, [r7, #16]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d009      	beq.n	8001040 <HAL_CRCEx_Polynomial_Set+0x44>
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	f003 031f 	and.w	r3, r3, #31
 8001032:	68ba      	ldr	r2, [r7, #8]
 8001034:	fa22 f303 	lsr.w	r3, r2, r3
 8001038:	f003 0301 	and.w	r3, r3, #1
 800103c:	2b00      	cmp	r3, #0
 800103e:	d0f0      	beq.n	8001022 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2b18      	cmp	r3, #24
 8001044:	d846      	bhi.n	80010d4 <HAL_CRCEx_Polynomial_Set+0xd8>
 8001046:	a201      	add	r2, pc, #4	; (adr r2, 800104c <HAL_CRCEx_Polynomial_Set+0x50>)
 8001048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800104c:	080010db 	.word	0x080010db
 8001050:	080010d5 	.word	0x080010d5
 8001054:	080010d5 	.word	0x080010d5
 8001058:	080010d5 	.word	0x080010d5
 800105c:	080010d5 	.word	0x080010d5
 8001060:	080010d5 	.word	0x080010d5
 8001064:	080010d5 	.word	0x080010d5
 8001068:	080010d5 	.word	0x080010d5
 800106c:	080010c9 	.word	0x080010c9
 8001070:	080010d5 	.word	0x080010d5
 8001074:	080010d5 	.word	0x080010d5
 8001078:	080010d5 	.word	0x080010d5
 800107c:	080010d5 	.word	0x080010d5
 8001080:	080010d5 	.word	0x080010d5
 8001084:	080010d5 	.word	0x080010d5
 8001088:	080010d5 	.word	0x080010d5
 800108c:	080010bd 	.word	0x080010bd
 8001090:	080010d5 	.word	0x080010d5
 8001094:	080010d5 	.word	0x080010d5
 8001098:	080010d5 	.word	0x080010d5
 800109c:	080010d5 	.word	0x080010d5
 80010a0:	080010d5 	.word	0x080010d5
 80010a4:	080010d5 	.word	0x080010d5
 80010a8:	080010d5 	.word	0x080010d5
 80010ac:	080010b1 	.word	0x080010b1
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	2b06      	cmp	r3, #6
 80010b4:	d913      	bls.n	80010de <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80010ba:	e010      	b.n	80010de <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	2b07      	cmp	r3, #7
 80010c0:	d90f      	bls.n	80010e2 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80010c6:	e00c      	b.n	80010e2 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	2b0f      	cmp	r3, #15
 80010cc:	d90b      	bls.n	80010e6 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80010d2:	e008      	b.n	80010e6 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80010d4:	2301      	movs	r3, #1
 80010d6:	75fb      	strb	r3, [r7, #23]
        break;
 80010d8:	e006      	b.n	80010e8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80010da:	bf00      	nop
 80010dc:	e004      	b.n	80010e8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80010de:	bf00      	nop
 80010e0:	e002      	b.n	80010e8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80010e2:	bf00      	nop
 80010e4:	e000      	b.n	80010e8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80010e6:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80010e8:	7dfb      	ldrb	r3, [r7, #23]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d10d      	bne.n	800110a <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	68ba      	ldr	r2, [r7, #8]
 80010f4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	f023 0118 	bic.w	r1, r3, #24
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	687a      	ldr	r2, [r7, #4]
 8001106:	430a      	orrs	r2, r1
 8001108:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800110a:	7dfb      	ldrb	r3, [r7, #23]
}
 800110c:	4618      	mov	r0, r3
 800110e:	371c      	adds	r7, #28
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001120:	2300      	movs	r3, #0
 8001122:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800112a:	b2db      	uxtb	r3, r3
 800112c:	2b02      	cmp	r3, #2
 800112e:	d005      	beq.n	800113c <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2204      	movs	r2, #4
 8001134:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	73fb      	strb	r3, [r7, #15]
 800113a:	e037      	b.n	80011ac <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f022 020e 	bic.w	r2, r2, #14
 800114a:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001156:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800115a:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f022 0201 	bic.w	r2, r2, #1
 800116a:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001170:	f003 021f 	and.w	r2, r3, #31
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001178:	2101      	movs	r1, #1
 800117a:	fa01 f202 	lsl.w	r2, r1, r2
 800117e:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001188:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800118e:	2b00      	cmp	r3, #0
 8001190:	d00c      	beq.n	80011ac <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800119c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80011a0:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80011aa:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2201      	movs	r2, #1
 80011b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2200      	movs	r2, #0
 80011b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80011bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3714      	adds	r7, #20
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr

080011ca <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b084      	sub	sp, #16
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011d2:	2300      	movs	r3, #0
 80011d4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d00d      	beq.n	80011fe <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2204      	movs	r2, #4
 80011e6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2201      	movs	r2, #1
 80011ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2200      	movs	r2, #0
 80011f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80011f8:	2301      	movs	r3, #1
 80011fa:	73fb      	strb	r3, [r7, #15]
 80011fc:	e047      	b.n	800128e <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f022 020e 	bic.w	r2, r2, #14
 800120c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f022 0201 	bic.w	r2, r2, #1
 800121c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001228:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800122c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001232:	f003 021f 	and.w	r2, r3, #31
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123a:	2101      	movs	r1, #1
 800123c:	fa01 f202 	lsl.w	r2, r1, r2
 8001240:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800124a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001250:	2b00      	cmp	r3, #0
 8001252:	d00c      	beq.n	800126e <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800125e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001262:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001268:	687a      	ldr	r2, [r7, #4]
 800126a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800126c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2201      	movs	r2, #1
 8001272:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2200      	movs	r2, #0
 800127a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001282:	2b00      	cmp	r3, #0
 8001284:	d003      	beq.n	800128e <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	4798      	blx	r3
    }
  }
  return status;
 800128e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001290:	4618      	mov	r0, r3
 8001292:	3710      	adds	r7, #16
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001298:	b480      	push	{r7}
 800129a:	b087      	sub	sp, #28
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80012a2:	2300      	movs	r3, #0
 80012a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80012a6:	e15a      	b.n	800155e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	2101      	movs	r1, #1
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	fa01 f303 	lsl.w	r3, r1, r3
 80012b4:	4013      	ands	r3, r2
 80012b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	f000 814c 	beq.w	8001558 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f003 0303 	and.w	r3, r3, #3
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d005      	beq.n	80012d8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d130      	bne.n	800133a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	2203      	movs	r2, #3
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	43db      	mvns	r3, r3
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	4013      	ands	r3, r2
 80012ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	68da      	ldr	r2, [r3, #12]
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	693a      	ldr	r2, [r7, #16]
 80012fe:	4313      	orrs	r3, r2
 8001300:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	693a      	ldr	r2, [r7, #16]
 8001306:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800130e:	2201      	movs	r2, #1
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	43db      	mvns	r3, r3
 8001318:	693a      	ldr	r2, [r7, #16]
 800131a:	4013      	ands	r3, r2
 800131c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	091b      	lsrs	r3, r3, #4
 8001324:	f003 0201 	and.w	r2, r3, #1
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	4313      	orrs	r3, r2
 8001332:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f003 0303 	and.w	r3, r3, #3
 8001342:	2b03      	cmp	r3, #3
 8001344:	d017      	beq.n	8001376 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	68db      	ldr	r3, [r3, #12]
 800134a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	2203      	movs	r2, #3
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	43db      	mvns	r3, r3
 8001358:	693a      	ldr	r2, [r7, #16]
 800135a:	4013      	ands	r3, r2
 800135c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	689a      	ldr	r2, [r3, #8]
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	fa02 f303 	lsl.w	r3, r2, r3
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	4313      	orrs	r3, r2
 800136e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f003 0303 	and.w	r3, r3, #3
 800137e:	2b02      	cmp	r3, #2
 8001380:	d123      	bne.n	80013ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	08da      	lsrs	r2, r3, #3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	3208      	adds	r2, #8
 800138a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800138e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	f003 0307 	and.w	r3, r3, #7
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	220f      	movs	r2, #15
 800139a:	fa02 f303 	lsl.w	r3, r2, r3
 800139e:	43db      	mvns	r3, r3
 80013a0:	693a      	ldr	r2, [r7, #16]
 80013a2:	4013      	ands	r3, r2
 80013a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	691a      	ldr	r2, [r3, #16]
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	f003 0307 	and.w	r3, r3, #7
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	fa02 f303 	lsl.w	r3, r2, r3
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	08da      	lsrs	r2, r3, #3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	3208      	adds	r2, #8
 80013c4:	6939      	ldr	r1, [r7, #16]
 80013c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	2203      	movs	r2, #3
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	43db      	mvns	r3, r3
 80013dc:	693a      	ldr	r2, [r7, #16]
 80013de:	4013      	ands	r3, r2
 80013e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f003 0203 	and.w	r2, r3, #3
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001406:	2b00      	cmp	r3, #0
 8001408:	f000 80a6 	beq.w	8001558 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800140c:	4b5b      	ldr	r3, [pc, #364]	; (800157c <HAL_GPIO_Init+0x2e4>)
 800140e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001410:	4a5a      	ldr	r2, [pc, #360]	; (800157c <HAL_GPIO_Init+0x2e4>)
 8001412:	f043 0301 	orr.w	r3, r3, #1
 8001416:	6613      	str	r3, [r2, #96]	; 0x60
 8001418:	4b58      	ldr	r3, [pc, #352]	; (800157c <HAL_GPIO_Init+0x2e4>)
 800141a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800141c:	f003 0301 	and.w	r3, r3, #1
 8001420:	60bb      	str	r3, [r7, #8]
 8001422:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001424:	4a56      	ldr	r2, [pc, #344]	; (8001580 <HAL_GPIO_Init+0x2e8>)
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	089b      	lsrs	r3, r3, #2
 800142a:	3302      	adds	r3, #2
 800142c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001430:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	f003 0303 	and.w	r3, r3, #3
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	220f      	movs	r2, #15
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	43db      	mvns	r3, r3
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	4013      	ands	r3, r2
 8001446:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800144e:	d01f      	beq.n	8001490 <HAL_GPIO_Init+0x1f8>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	4a4c      	ldr	r2, [pc, #304]	; (8001584 <HAL_GPIO_Init+0x2ec>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d019      	beq.n	800148c <HAL_GPIO_Init+0x1f4>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	4a4b      	ldr	r2, [pc, #300]	; (8001588 <HAL_GPIO_Init+0x2f0>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d013      	beq.n	8001488 <HAL_GPIO_Init+0x1f0>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	4a4a      	ldr	r2, [pc, #296]	; (800158c <HAL_GPIO_Init+0x2f4>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d00d      	beq.n	8001484 <HAL_GPIO_Init+0x1ec>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	4a49      	ldr	r2, [pc, #292]	; (8001590 <HAL_GPIO_Init+0x2f8>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d007      	beq.n	8001480 <HAL_GPIO_Init+0x1e8>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	4a48      	ldr	r2, [pc, #288]	; (8001594 <HAL_GPIO_Init+0x2fc>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d101      	bne.n	800147c <HAL_GPIO_Init+0x1e4>
 8001478:	2305      	movs	r3, #5
 800147a:	e00a      	b.n	8001492 <HAL_GPIO_Init+0x1fa>
 800147c:	2306      	movs	r3, #6
 800147e:	e008      	b.n	8001492 <HAL_GPIO_Init+0x1fa>
 8001480:	2304      	movs	r3, #4
 8001482:	e006      	b.n	8001492 <HAL_GPIO_Init+0x1fa>
 8001484:	2303      	movs	r3, #3
 8001486:	e004      	b.n	8001492 <HAL_GPIO_Init+0x1fa>
 8001488:	2302      	movs	r3, #2
 800148a:	e002      	b.n	8001492 <HAL_GPIO_Init+0x1fa>
 800148c:	2301      	movs	r3, #1
 800148e:	e000      	b.n	8001492 <HAL_GPIO_Init+0x1fa>
 8001490:	2300      	movs	r3, #0
 8001492:	697a      	ldr	r2, [r7, #20]
 8001494:	f002 0203 	and.w	r2, r2, #3
 8001498:	0092      	lsls	r2, r2, #2
 800149a:	4093      	lsls	r3, r2
 800149c:	693a      	ldr	r2, [r7, #16]
 800149e:	4313      	orrs	r3, r2
 80014a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014a2:	4937      	ldr	r1, [pc, #220]	; (8001580 <HAL_GPIO_Init+0x2e8>)
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	089b      	lsrs	r3, r3, #2
 80014a8:	3302      	adds	r3, #2
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014b0:	4b39      	ldr	r3, [pc, #228]	; (8001598 <HAL_GPIO_Init+0x300>)
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	43db      	mvns	r3, r3
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	4013      	ands	r3, r2
 80014be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d003      	beq.n	80014d4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80014cc:	693a      	ldr	r2, [r7, #16]
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80014d4:	4a30      	ldr	r2, [pc, #192]	; (8001598 <HAL_GPIO_Init+0x300>)
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80014da:	4b2f      	ldr	r3, [pc, #188]	; (8001598 <HAL_GPIO_Init+0x300>)
 80014dc:	68db      	ldr	r3, [r3, #12]
 80014de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	43db      	mvns	r3, r3
 80014e4:	693a      	ldr	r2, [r7, #16]
 80014e6:	4013      	ands	r3, r2
 80014e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d003      	beq.n	80014fe <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80014fe:	4a26      	ldr	r2, [pc, #152]	; (8001598 <HAL_GPIO_Init+0x300>)
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001504:	4b24      	ldr	r3, [pc, #144]	; (8001598 <HAL_GPIO_Init+0x300>)
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	43db      	mvns	r3, r3
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	4013      	ands	r3, r2
 8001512:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800151c:	2b00      	cmp	r3, #0
 800151e:	d003      	beq.n	8001528 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001520:	693a      	ldr	r2, [r7, #16]
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	4313      	orrs	r3, r2
 8001526:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001528:	4a1b      	ldr	r2, [pc, #108]	; (8001598 <HAL_GPIO_Init+0x300>)
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800152e:	4b1a      	ldr	r3, [pc, #104]	; (8001598 <HAL_GPIO_Init+0x300>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	43db      	mvns	r3, r3
 8001538:	693a      	ldr	r2, [r7, #16]
 800153a:	4013      	ands	r3, r2
 800153c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d003      	beq.n	8001552 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	4313      	orrs	r3, r2
 8001550:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001552:	4a11      	ldr	r2, [pc, #68]	; (8001598 <HAL_GPIO_Init+0x300>)
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	3301      	adds	r3, #1
 800155c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	fa22 f303 	lsr.w	r3, r2, r3
 8001568:	2b00      	cmp	r3, #0
 800156a:	f47f ae9d 	bne.w	80012a8 <HAL_GPIO_Init+0x10>
  }
}
 800156e:	bf00      	nop
 8001570:	bf00      	nop
 8001572:	371c      	adds	r7, #28
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	40021000 	.word	0x40021000
 8001580:	40010000 	.word	0x40010000
 8001584:	48000400 	.word	0x48000400
 8001588:	48000800 	.word	0x48000800
 800158c:	48000c00 	.word	0x48000c00
 8001590:	48001000 	.word	0x48001000
 8001594:	48001400 	.word	0x48001400
 8001598:	40010400 	.word	0x40010400

0800159c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	460b      	mov	r3, r1
 80015a6:	807b      	strh	r3, [r7, #2]
 80015a8:	4613      	mov	r3, r2
 80015aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015ac:	787b      	ldrb	r3, [r7, #1]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d003      	beq.n	80015ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015b2:	887a      	ldrh	r2, [r7, #2]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015b8:	e002      	b.n	80015c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015ba:	887a      	ldrh	r2, [r7, #2]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015c0:	bf00      	nop
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b085      	sub	sp, #20
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d141      	bne.n	800165e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80015da:	4b4b      	ldr	r3, [pc, #300]	; (8001708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015e6:	d131      	bne.n	800164c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80015e8:	4b47      	ldr	r3, [pc, #284]	; (8001708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80015ee:	4a46      	ldr	r2, [pc, #280]	; (8001708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015f4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80015f8:	4b43      	ldr	r3, [pc, #268]	; (8001708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001600:	4a41      	ldr	r2, [pc, #260]	; (8001708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001602:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001606:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001608:	4b40      	ldr	r3, [pc, #256]	; (800170c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2232      	movs	r2, #50	; 0x32
 800160e:	fb02 f303 	mul.w	r3, r2, r3
 8001612:	4a3f      	ldr	r2, [pc, #252]	; (8001710 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001614:	fba2 2303 	umull	r2, r3, r2, r3
 8001618:	0c9b      	lsrs	r3, r3, #18
 800161a:	3301      	adds	r3, #1
 800161c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800161e:	e002      	b.n	8001626 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	3b01      	subs	r3, #1
 8001624:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001626:	4b38      	ldr	r3, [pc, #224]	; (8001708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001628:	695b      	ldr	r3, [r3, #20]
 800162a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800162e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001632:	d102      	bne.n	800163a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d1f2      	bne.n	8001620 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800163a:	4b33      	ldr	r3, [pc, #204]	; (8001708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800163c:	695b      	ldr	r3, [r3, #20]
 800163e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001642:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001646:	d158      	bne.n	80016fa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001648:	2303      	movs	r3, #3
 800164a:	e057      	b.n	80016fc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800164c:	4b2e      	ldr	r3, [pc, #184]	; (8001708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800164e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001652:	4a2d      	ldr	r2, [pc, #180]	; (8001708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001654:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001658:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800165c:	e04d      	b.n	80016fa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001664:	d141      	bne.n	80016ea <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001666:	4b28      	ldr	r3, [pc, #160]	; (8001708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800166e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001672:	d131      	bne.n	80016d8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001674:	4b24      	ldr	r3, [pc, #144]	; (8001708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001676:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800167a:	4a23      	ldr	r2, [pc, #140]	; (8001708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800167c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001680:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001684:	4b20      	ldr	r3, [pc, #128]	; (8001708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800168c:	4a1e      	ldr	r2, [pc, #120]	; (8001708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800168e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001692:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001694:	4b1d      	ldr	r3, [pc, #116]	; (800170c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2232      	movs	r2, #50	; 0x32
 800169a:	fb02 f303 	mul.w	r3, r2, r3
 800169e:	4a1c      	ldr	r2, [pc, #112]	; (8001710 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80016a0:	fba2 2303 	umull	r2, r3, r2, r3
 80016a4:	0c9b      	lsrs	r3, r3, #18
 80016a6:	3301      	adds	r3, #1
 80016a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016aa:	e002      	b.n	80016b2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	3b01      	subs	r3, #1
 80016b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016b2:	4b15      	ldr	r3, [pc, #84]	; (8001708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016b4:	695b      	ldr	r3, [r3, #20]
 80016b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016be:	d102      	bne.n	80016c6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d1f2      	bne.n	80016ac <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016c6:	4b10      	ldr	r3, [pc, #64]	; (8001708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016c8:	695b      	ldr	r3, [r3, #20]
 80016ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016d2:	d112      	bne.n	80016fa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80016d4:	2303      	movs	r3, #3
 80016d6:	e011      	b.n	80016fc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80016d8:	4b0b      	ldr	r3, [pc, #44]	; (8001708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016de:	4a0a      	ldr	r2, [pc, #40]	; (8001708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80016e8:	e007      	b.n	80016fa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80016ea:	4b07      	ldr	r3, [pc, #28]	; (8001708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016f2:	4a05      	ldr	r2, [pc, #20]	; (8001708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016f8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80016fa:	2300      	movs	r3, #0
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3714      	adds	r7, #20
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	40007000 	.word	0x40007000
 800170c:	20000000 	.word	0x20000000
 8001710:	431bde83 	.word	0x431bde83

08001714 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001718:	4b05      	ldr	r3, [pc, #20]	; (8001730 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	4a04      	ldr	r2, [pc, #16]	; (8001730 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800171e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001722:	6093      	str	r3, [r2, #8]
}
 8001724:	bf00      	nop
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	40007000 	.word	0x40007000

08001734 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b088      	sub	sp, #32
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d101      	bne.n	8001746 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e2fe      	b.n	8001d44 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	2b00      	cmp	r3, #0
 8001750:	d075      	beq.n	800183e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001752:	4b97      	ldr	r3, [pc, #604]	; (80019b0 <HAL_RCC_OscConfig+0x27c>)
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	f003 030c 	and.w	r3, r3, #12
 800175a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800175c:	4b94      	ldr	r3, [pc, #592]	; (80019b0 <HAL_RCC_OscConfig+0x27c>)
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	f003 0303 	and.w	r3, r3, #3
 8001764:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	2b0c      	cmp	r3, #12
 800176a:	d102      	bne.n	8001772 <HAL_RCC_OscConfig+0x3e>
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	2b03      	cmp	r3, #3
 8001770:	d002      	beq.n	8001778 <HAL_RCC_OscConfig+0x44>
 8001772:	69bb      	ldr	r3, [r7, #24]
 8001774:	2b08      	cmp	r3, #8
 8001776:	d10b      	bne.n	8001790 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001778:	4b8d      	ldr	r3, [pc, #564]	; (80019b0 <HAL_RCC_OscConfig+0x27c>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d05b      	beq.n	800183c <HAL_RCC_OscConfig+0x108>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d157      	bne.n	800183c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e2d9      	b.n	8001d44 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001798:	d106      	bne.n	80017a8 <HAL_RCC_OscConfig+0x74>
 800179a:	4b85      	ldr	r3, [pc, #532]	; (80019b0 <HAL_RCC_OscConfig+0x27c>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a84      	ldr	r2, [pc, #528]	; (80019b0 <HAL_RCC_OscConfig+0x27c>)
 80017a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017a4:	6013      	str	r3, [r2, #0]
 80017a6:	e01d      	b.n	80017e4 <HAL_RCC_OscConfig+0xb0>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017b0:	d10c      	bne.n	80017cc <HAL_RCC_OscConfig+0x98>
 80017b2:	4b7f      	ldr	r3, [pc, #508]	; (80019b0 <HAL_RCC_OscConfig+0x27c>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a7e      	ldr	r2, [pc, #504]	; (80019b0 <HAL_RCC_OscConfig+0x27c>)
 80017b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017bc:	6013      	str	r3, [r2, #0]
 80017be:	4b7c      	ldr	r3, [pc, #496]	; (80019b0 <HAL_RCC_OscConfig+0x27c>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a7b      	ldr	r2, [pc, #492]	; (80019b0 <HAL_RCC_OscConfig+0x27c>)
 80017c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017c8:	6013      	str	r3, [r2, #0]
 80017ca:	e00b      	b.n	80017e4 <HAL_RCC_OscConfig+0xb0>
 80017cc:	4b78      	ldr	r3, [pc, #480]	; (80019b0 <HAL_RCC_OscConfig+0x27c>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a77      	ldr	r2, [pc, #476]	; (80019b0 <HAL_RCC_OscConfig+0x27c>)
 80017d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017d6:	6013      	str	r3, [r2, #0]
 80017d8:	4b75      	ldr	r3, [pc, #468]	; (80019b0 <HAL_RCC_OscConfig+0x27c>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a74      	ldr	r2, [pc, #464]	; (80019b0 <HAL_RCC_OscConfig+0x27c>)
 80017de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d013      	beq.n	8001814 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ec:	f7ff fa86 	bl	8000cfc <HAL_GetTick>
 80017f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017f2:	e008      	b.n	8001806 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017f4:	f7ff fa82 	bl	8000cfc <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b64      	cmp	r3, #100	; 0x64
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e29e      	b.n	8001d44 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001806:	4b6a      	ldr	r3, [pc, #424]	; (80019b0 <HAL_RCC_OscConfig+0x27c>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d0f0      	beq.n	80017f4 <HAL_RCC_OscConfig+0xc0>
 8001812:	e014      	b.n	800183e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001814:	f7ff fa72 	bl	8000cfc <HAL_GetTick>
 8001818:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800181a:	e008      	b.n	800182e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800181c:	f7ff fa6e 	bl	8000cfc <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	2b64      	cmp	r3, #100	; 0x64
 8001828:	d901      	bls.n	800182e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e28a      	b.n	8001d44 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800182e:	4b60      	ldr	r3, [pc, #384]	; (80019b0 <HAL_RCC_OscConfig+0x27c>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d1f0      	bne.n	800181c <HAL_RCC_OscConfig+0xe8>
 800183a:	e000      	b.n	800183e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800183c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	2b00      	cmp	r3, #0
 8001848:	d075      	beq.n	8001936 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800184a:	4b59      	ldr	r3, [pc, #356]	; (80019b0 <HAL_RCC_OscConfig+0x27c>)
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f003 030c 	and.w	r3, r3, #12
 8001852:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001854:	4b56      	ldr	r3, [pc, #344]	; (80019b0 <HAL_RCC_OscConfig+0x27c>)
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	f003 0303 	and.w	r3, r3, #3
 800185c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	2b0c      	cmp	r3, #12
 8001862:	d102      	bne.n	800186a <HAL_RCC_OscConfig+0x136>
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	2b02      	cmp	r3, #2
 8001868:	d002      	beq.n	8001870 <HAL_RCC_OscConfig+0x13c>
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	2b04      	cmp	r3, #4
 800186e:	d11f      	bne.n	80018b0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001870:	4b4f      	ldr	r3, [pc, #316]	; (80019b0 <HAL_RCC_OscConfig+0x27c>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001878:	2b00      	cmp	r3, #0
 800187a:	d005      	beq.n	8001888 <HAL_RCC_OscConfig+0x154>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d101      	bne.n	8001888 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e25d      	b.n	8001d44 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001888:	4b49      	ldr	r3, [pc, #292]	; (80019b0 <HAL_RCC_OscConfig+0x27c>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	691b      	ldr	r3, [r3, #16]
 8001894:	061b      	lsls	r3, r3, #24
 8001896:	4946      	ldr	r1, [pc, #280]	; (80019b0 <HAL_RCC_OscConfig+0x27c>)
 8001898:	4313      	orrs	r3, r2
 800189a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800189c:	4b45      	ldr	r3, [pc, #276]	; (80019b4 <HAL_RCC_OscConfig+0x280>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff f9df 	bl	8000c64 <HAL_InitTick>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d043      	beq.n	8001934 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e249      	b.n	8001d44 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d023      	beq.n	8001900 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018b8:	4b3d      	ldr	r3, [pc, #244]	; (80019b0 <HAL_RCC_OscConfig+0x27c>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a3c      	ldr	r2, [pc, #240]	; (80019b0 <HAL_RCC_OscConfig+0x27c>)
 80018be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c4:	f7ff fa1a 	bl	8000cfc <HAL_GetTick>
 80018c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018ca:	e008      	b.n	80018de <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018cc:	f7ff fa16 	bl	8000cfc <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d901      	bls.n	80018de <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e232      	b.n	8001d44 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018de:	4b34      	ldr	r3, [pc, #208]	; (80019b0 <HAL_RCC_OscConfig+0x27c>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d0f0      	beq.n	80018cc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ea:	4b31      	ldr	r3, [pc, #196]	; (80019b0 <HAL_RCC_OscConfig+0x27c>)
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	691b      	ldr	r3, [r3, #16]
 80018f6:	061b      	lsls	r3, r3, #24
 80018f8:	492d      	ldr	r1, [pc, #180]	; (80019b0 <HAL_RCC_OscConfig+0x27c>)
 80018fa:	4313      	orrs	r3, r2
 80018fc:	604b      	str	r3, [r1, #4]
 80018fe:	e01a      	b.n	8001936 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001900:	4b2b      	ldr	r3, [pc, #172]	; (80019b0 <HAL_RCC_OscConfig+0x27c>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a2a      	ldr	r2, [pc, #168]	; (80019b0 <HAL_RCC_OscConfig+0x27c>)
 8001906:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800190a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800190c:	f7ff f9f6 	bl	8000cfc <HAL_GetTick>
 8001910:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001912:	e008      	b.n	8001926 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001914:	f7ff f9f2 	bl	8000cfc <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b02      	cmp	r3, #2
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e20e      	b.n	8001d44 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001926:	4b22      	ldr	r3, [pc, #136]	; (80019b0 <HAL_RCC_OscConfig+0x27c>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800192e:	2b00      	cmp	r3, #0
 8001930:	d1f0      	bne.n	8001914 <HAL_RCC_OscConfig+0x1e0>
 8001932:	e000      	b.n	8001936 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001934:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0308 	and.w	r3, r3, #8
 800193e:	2b00      	cmp	r3, #0
 8001940:	d041      	beq.n	80019c6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	695b      	ldr	r3, [r3, #20]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d01c      	beq.n	8001984 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800194a:	4b19      	ldr	r3, [pc, #100]	; (80019b0 <HAL_RCC_OscConfig+0x27c>)
 800194c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001950:	4a17      	ldr	r2, [pc, #92]	; (80019b0 <HAL_RCC_OscConfig+0x27c>)
 8001952:	f043 0301 	orr.w	r3, r3, #1
 8001956:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800195a:	f7ff f9cf 	bl	8000cfc <HAL_GetTick>
 800195e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001960:	e008      	b.n	8001974 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001962:	f7ff f9cb 	bl	8000cfc <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	2b02      	cmp	r3, #2
 800196e:	d901      	bls.n	8001974 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001970:	2303      	movs	r3, #3
 8001972:	e1e7      	b.n	8001d44 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001974:	4b0e      	ldr	r3, [pc, #56]	; (80019b0 <HAL_RCC_OscConfig+0x27c>)
 8001976:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800197a:	f003 0302 	and.w	r3, r3, #2
 800197e:	2b00      	cmp	r3, #0
 8001980:	d0ef      	beq.n	8001962 <HAL_RCC_OscConfig+0x22e>
 8001982:	e020      	b.n	80019c6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001984:	4b0a      	ldr	r3, [pc, #40]	; (80019b0 <HAL_RCC_OscConfig+0x27c>)
 8001986:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800198a:	4a09      	ldr	r2, [pc, #36]	; (80019b0 <HAL_RCC_OscConfig+0x27c>)
 800198c:	f023 0301 	bic.w	r3, r3, #1
 8001990:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001994:	f7ff f9b2 	bl	8000cfc <HAL_GetTick>
 8001998:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800199a:	e00d      	b.n	80019b8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800199c:	f7ff f9ae 	bl	8000cfc <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d906      	bls.n	80019b8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e1ca      	b.n	8001d44 <HAL_RCC_OscConfig+0x610>
 80019ae:	bf00      	nop
 80019b0:	40021000 	.word	0x40021000
 80019b4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019b8:	4b8c      	ldr	r3, [pc, #560]	; (8001bec <HAL_RCC_OscConfig+0x4b8>)
 80019ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019be:	f003 0302 	and.w	r3, r3, #2
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d1ea      	bne.n	800199c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0304 	and.w	r3, r3, #4
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	f000 80a6 	beq.w	8001b20 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019d4:	2300      	movs	r3, #0
 80019d6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80019d8:	4b84      	ldr	r3, [pc, #528]	; (8001bec <HAL_RCC_OscConfig+0x4b8>)
 80019da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d101      	bne.n	80019e8 <HAL_RCC_OscConfig+0x2b4>
 80019e4:	2301      	movs	r3, #1
 80019e6:	e000      	b.n	80019ea <HAL_RCC_OscConfig+0x2b6>
 80019e8:	2300      	movs	r3, #0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d00d      	beq.n	8001a0a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019ee:	4b7f      	ldr	r3, [pc, #508]	; (8001bec <HAL_RCC_OscConfig+0x4b8>)
 80019f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f2:	4a7e      	ldr	r2, [pc, #504]	; (8001bec <HAL_RCC_OscConfig+0x4b8>)
 80019f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019f8:	6593      	str	r3, [r2, #88]	; 0x58
 80019fa:	4b7c      	ldr	r3, [pc, #496]	; (8001bec <HAL_RCC_OscConfig+0x4b8>)
 80019fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001a06:	2301      	movs	r3, #1
 8001a08:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a0a:	4b79      	ldr	r3, [pc, #484]	; (8001bf0 <HAL_RCC_OscConfig+0x4bc>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d118      	bne.n	8001a48 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a16:	4b76      	ldr	r3, [pc, #472]	; (8001bf0 <HAL_RCC_OscConfig+0x4bc>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a75      	ldr	r2, [pc, #468]	; (8001bf0 <HAL_RCC_OscConfig+0x4bc>)
 8001a1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a22:	f7ff f96b 	bl	8000cfc <HAL_GetTick>
 8001a26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a28:	e008      	b.n	8001a3c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a2a:	f7ff f967 	bl	8000cfc <HAL_GetTick>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d901      	bls.n	8001a3c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e183      	b.n	8001d44 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a3c:	4b6c      	ldr	r3, [pc, #432]	; (8001bf0 <HAL_RCC_OscConfig+0x4bc>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d0f0      	beq.n	8001a2a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d108      	bne.n	8001a62 <HAL_RCC_OscConfig+0x32e>
 8001a50:	4b66      	ldr	r3, [pc, #408]	; (8001bec <HAL_RCC_OscConfig+0x4b8>)
 8001a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a56:	4a65      	ldr	r2, [pc, #404]	; (8001bec <HAL_RCC_OscConfig+0x4b8>)
 8001a58:	f043 0301 	orr.w	r3, r3, #1
 8001a5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a60:	e024      	b.n	8001aac <HAL_RCC_OscConfig+0x378>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	2b05      	cmp	r3, #5
 8001a68:	d110      	bne.n	8001a8c <HAL_RCC_OscConfig+0x358>
 8001a6a:	4b60      	ldr	r3, [pc, #384]	; (8001bec <HAL_RCC_OscConfig+0x4b8>)
 8001a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a70:	4a5e      	ldr	r2, [pc, #376]	; (8001bec <HAL_RCC_OscConfig+0x4b8>)
 8001a72:	f043 0304 	orr.w	r3, r3, #4
 8001a76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a7a:	4b5c      	ldr	r3, [pc, #368]	; (8001bec <HAL_RCC_OscConfig+0x4b8>)
 8001a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a80:	4a5a      	ldr	r2, [pc, #360]	; (8001bec <HAL_RCC_OscConfig+0x4b8>)
 8001a82:	f043 0301 	orr.w	r3, r3, #1
 8001a86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a8a:	e00f      	b.n	8001aac <HAL_RCC_OscConfig+0x378>
 8001a8c:	4b57      	ldr	r3, [pc, #348]	; (8001bec <HAL_RCC_OscConfig+0x4b8>)
 8001a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a92:	4a56      	ldr	r2, [pc, #344]	; (8001bec <HAL_RCC_OscConfig+0x4b8>)
 8001a94:	f023 0301 	bic.w	r3, r3, #1
 8001a98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a9c:	4b53      	ldr	r3, [pc, #332]	; (8001bec <HAL_RCC_OscConfig+0x4b8>)
 8001a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aa2:	4a52      	ldr	r2, [pc, #328]	; (8001bec <HAL_RCC_OscConfig+0x4b8>)
 8001aa4:	f023 0304 	bic.w	r3, r3, #4
 8001aa8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d016      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ab4:	f7ff f922 	bl	8000cfc <HAL_GetTick>
 8001ab8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001aba:	e00a      	b.n	8001ad2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001abc:	f7ff f91e 	bl	8000cfc <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e138      	b.n	8001d44 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ad2:	4b46      	ldr	r3, [pc, #280]	; (8001bec <HAL_RCC_OscConfig+0x4b8>)
 8001ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ad8:	f003 0302 	and.w	r3, r3, #2
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d0ed      	beq.n	8001abc <HAL_RCC_OscConfig+0x388>
 8001ae0:	e015      	b.n	8001b0e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ae2:	f7ff f90b 	bl	8000cfc <HAL_GetTick>
 8001ae6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ae8:	e00a      	b.n	8001b00 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aea:	f7ff f907 	bl	8000cfc <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d901      	bls.n	8001b00 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	e121      	b.n	8001d44 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b00:	4b3a      	ldr	r3, [pc, #232]	; (8001bec <HAL_RCC_OscConfig+0x4b8>)
 8001b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d1ed      	bne.n	8001aea <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b0e:	7ffb      	ldrb	r3, [r7, #31]
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d105      	bne.n	8001b20 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b14:	4b35      	ldr	r3, [pc, #212]	; (8001bec <HAL_RCC_OscConfig+0x4b8>)
 8001b16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b18:	4a34      	ldr	r2, [pc, #208]	; (8001bec <HAL_RCC_OscConfig+0x4b8>)
 8001b1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b1e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0320 	and.w	r3, r3, #32
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d03c      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	699b      	ldr	r3, [r3, #24]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d01c      	beq.n	8001b6e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001b34:	4b2d      	ldr	r3, [pc, #180]	; (8001bec <HAL_RCC_OscConfig+0x4b8>)
 8001b36:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b3a:	4a2c      	ldr	r2, [pc, #176]	; (8001bec <HAL_RCC_OscConfig+0x4b8>)
 8001b3c:	f043 0301 	orr.w	r3, r3, #1
 8001b40:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b44:	f7ff f8da 	bl	8000cfc <HAL_GetTick>
 8001b48:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b4a:	e008      	b.n	8001b5e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b4c:	f7ff f8d6 	bl	8000cfc <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e0f2      	b.n	8001d44 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b5e:	4b23      	ldr	r3, [pc, #140]	; (8001bec <HAL_RCC_OscConfig+0x4b8>)
 8001b60:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b64:	f003 0302 	and.w	r3, r3, #2
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d0ef      	beq.n	8001b4c <HAL_RCC_OscConfig+0x418>
 8001b6c:	e01b      	b.n	8001ba6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b6e:	4b1f      	ldr	r3, [pc, #124]	; (8001bec <HAL_RCC_OscConfig+0x4b8>)
 8001b70:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b74:	4a1d      	ldr	r2, [pc, #116]	; (8001bec <HAL_RCC_OscConfig+0x4b8>)
 8001b76:	f023 0301 	bic.w	r3, r3, #1
 8001b7a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b7e:	f7ff f8bd 	bl	8000cfc <HAL_GetTick>
 8001b82:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b84:	e008      	b.n	8001b98 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b86:	f7ff f8b9 	bl	8000cfc <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d901      	bls.n	8001b98 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001b94:	2303      	movs	r3, #3
 8001b96:	e0d5      	b.n	8001d44 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b98:	4b14      	ldr	r3, [pc, #80]	; (8001bec <HAL_RCC_OscConfig+0x4b8>)
 8001b9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d1ef      	bne.n	8001b86 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	69db      	ldr	r3, [r3, #28]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	f000 80c9 	beq.w	8001d42 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bb0:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <HAL_RCC_OscConfig+0x4b8>)
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	f003 030c 	and.w	r3, r3, #12
 8001bb8:	2b0c      	cmp	r3, #12
 8001bba:	f000 8083 	beq.w	8001cc4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	69db      	ldr	r3, [r3, #28]
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d15e      	bne.n	8001c84 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bc6:	4b09      	ldr	r3, [pc, #36]	; (8001bec <HAL_RCC_OscConfig+0x4b8>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a08      	ldr	r2, [pc, #32]	; (8001bec <HAL_RCC_OscConfig+0x4b8>)
 8001bcc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd2:	f7ff f893 	bl	8000cfc <HAL_GetTick>
 8001bd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bd8:	e00c      	b.n	8001bf4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bda:	f7ff f88f 	bl	8000cfc <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d905      	bls.n	8001bf4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e0ab      	b.n	8001d44 <HAL_RCC_OscConfig+0x610>
 8001bec:	40021000 	.word	0x40021000
 8001bf0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bf4:	4b55      	ldr	r3, [pc, #340]	; (8001d4c <HAL_RCC_OscConfig+0x618>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d1ec      	bne.n	8001bda <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c00:	4b52      	ldr	r3, [pc, #328]	; (8001d4c <HAL_RCC_OscConfig+0x618>)
 8001c02:	68da      	ldr	r2, [r3, #12]
 8001c04:	4b52      	ldr	r3, [pc, #328]	; (8001d50 <HAL_RCC_OscConfig+0x61c>)
 8001c06:	4013      	ands	r3, r2
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	6a11      	ldr	r1, [r2, #32]
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c10:	3a01      	subs	r2, #1
 8001c12:	0112      	lsls	r2, r2, #4
 8001c14:	4311      	orrs	r1, r2
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001c1a:	0212      	lsls	r2, r2, #8
 8001c1c:	4311      	orrs	r1, r2
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001c22:	0852      	lsrs	r2, r2, #1
 8001c24:	3a01      	subs	r2, #1
 8001c26:	0552      	lsls	r2, r2, #21
 8001c28:	4311      	orrs	r1, r2
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c2e:	0852      	lsrs	r2, r2, #1
 8001c30:	3a01      	subs	r2, #1
 8001c32:	0652      	lsls	r2, r2, #25
 8001c34:	4311      	orrs	r1, r2
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001c3a:	06d2      	lsls	r2, r2, #27
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	4943      	ldr	r1, [pc, #268]	; (8001d4c <HAL_RCC_OscConfig+0x618>)
 8001c40:	4313      	orrs	r3, r2
 8001c42:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c44:	4b41      	ldr	r3, [pc, #260]	; (8001d4c <HAL_RCC_OscConfig+0x618>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a40      	ldr	r2, [pc, #256]	; (8001d4c <HAL_RCC_OscConfig+0x618>)
 8001c4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c4e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c50:	4b3e      	ldr	r3, [pc, #248]	; (8001d4c <HAL_RCC_OscConfig+0x618>)
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	4a3d      	ldr	r2, [pc, #244]	; (8001d4c <HAL_RCC_OscConfig+0x618>)
 8001c56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c5a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c5c:	f7ff f84e 	bl	8000cfc <HAL_GetTick>
 8001c60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c62:	e008      	b.n	8001c76 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c64:	f7ff f84a 	bl	8000cfc <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e066      	b.n	8001d44 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c76:	4b35      	ldr	r3, [pc, #212]	; (8001d4c <HAL_RCC_OscConfig+0x618>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d0f0      	beq.n	8001c64 <HAL_RCC_OscConfig+0x530>
 8001c82:	e05e      	b.n	8001d42 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c84:	4b31      	ldr	r3, [pc, #196]	; (8001d4c <HAL_RCC_OscConfig+0x618>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a30      	ldr	r2, [pc, #192]	; (8001d4c <HAL_RCC_OscConfig+0x618>)
 8001c8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c90:	f7ff f834 	bl	8000cfc <HAL_GetTick>
 8001c94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c96:	e008      	b.n	8001caa <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c98:	f7ff f830 	bl	8000cfc <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e04c      	b.n	8001d44 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001caa:	4b28      	ldr	r3, [pc, #160]	; (8001d4c <HAL_RCC_OscConfig+0x618>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d1f0      	bne.n	8001c98 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001cb6:	4b25      	ldr	r3, [pc, #148]	; (8001d4c <HAL_RCC_OscConfig+0x618>)
 8001cb8:	68da      	ldr	r2, [r3, #12]
 8001cba:	4924      	ldr	r1, [pc, #144]	; (8001d4c <HAL_RCC_OscConfig+0x618>)
 8001cbc:	4b25      	ldr	r3, [pc, #148]	; (8001d54 <HAL_RCC_OscConfig+0x620>)
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	60cb      	str	r3, [r1, #12]
 8001cc2:	e03e      	b.n	8001d42 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	69db      	ldr	r3, [r3, #28]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d101      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e039      	b.n	8001d44 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001cd0:	4b1e      	ldr	r3, [pc, #120]	; (8001d4c <HAL_RCC_OscConfig+0x618>)
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	f003 0203 	and.w	r2, r3, #3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6a1b      	ldr	r3, [r3, #32]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d12c      	bne.n	8001d3e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cee:	3b01      	subs	r3, #1
 8001cf0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d123      	bne.n	8001d3e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d00:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d11b      	bne.n	8001d3e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d10:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d113      	bne.n	8001d3e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d20:	085b      	lsrs	r3, r3, #1
 8001d22:	3b01      	subs	r3, #1
 8001d24:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d109      	bne.n	8001d3e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d34:	085b      	lsrs	r3, r3, #1
 8001d36:	3b01      	subs	r3, #1
 8001d38:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d001      	beq.n	8001d42 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e000      	b.n	8001d44 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001d42:	2300      	movs	r3, #0
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3720      	adds	r7, #32
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	019f800c 	.word	0x019f800c
 8001d54:	feeefffc 	.word	0xfeeefffc

08001d58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001d62:	2300      	movs	r3, #0
 8001d64:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d101      	bne.n	8001d70 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e11e      	b.n	8001fae <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d70:	4b91      	ldr	r3, [pc, #580]	; (8001fb8 <HAL_RCC_ClockConfig+0x260>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 030f 	and.w	r3, r3, #15
 8001d78:	683a      	ldr	r2, [r7, #0]
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d910      	bls.n	8001da0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d7e:	4b8e      	ldr	r3, [pc, #568]	; (8001fb8 <HAL_RCC_ClockConfig+0x260>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f023 020f 	bic.w	r2, r3, #15
 8001d86:	498c      	ldr	r1, [pc, #560]	; (8001fb8 <HAL_RCC_ClockConfig+0x260>)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d8e:	4b8a      	ldr	r3, [pc, #552]	; (8001fb8 <HAL_RCC_ClockConfig+0x260>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 030f 	and.w	r3, r3, #15
 8001d96:	683a      	ldr	r2, [r7, #0]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d001      	beq.n	8001da0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e106      	b.n	8001fae <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0301 	and.w	r3, r3, #1
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d073      	beq.n	8001e94 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	2b03      	cmp	r3, #3
 8001db2:	d129      	bne.n	8001e08 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001db4:	4b81      	ldr	r3, [pc, #516]	; (8001fbc <HAL_RCC_ClockConfig+0x264>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d101      	bne.n	8001dc4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e0f4      	b.n	8001fae <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001dc4:	f000 f99e 	bl	8002104 <RCC_GetSysClockFreqFromPLLSource>
 8001dc8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	4a7c      	ldr	r2, [pc, #496]	; (8001fc0 <HAL_RCC_ClockConfig+0x268>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d93f      	bls.n	8001e52 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001dd2:	4b7a      	ldr	r3, [pc, #488]	; (8001fbc <HAL_RCC_ClockConfig+0x264>)
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d009      	beq.n	8001df2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d033      	beq.n	8001e52 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d12f      	bne.n	8001e52 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001df2:	4b72      	ldr	r3, [pc, #456]	; (8001fbc <HAL_RCC_ClockConfig+0x264>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001dfa:	4a70      	ldr	r2, [pc, #448]	; (8001fbc <HAL_RCC_ClockConfig+0x264>)
 8001dfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e00:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001e02:	2380      	movs	r3, #128	; 0x80
 8001e04:	617b      	str	r3, [r7, #20]
 8001e06:	e024      	b.n	8001e52 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d107      	bne.n	8001e20 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e10:	4b6a      	ldr	r3, [pc, #424]	; (8001fbc <HAL_RCC_ClockConfig+0x264>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d109      	bne.n	8001e30 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e0c6      	b.n	8001fae <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e20:	4b66      	ldr	r3, [pc, #408]	; (8001fbc <HAL_RCC_ClockConfig+0x264>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d101      	bne.n	8001e30 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e0be      	b.n	8001fae <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001e30:	f000 f8ce 	bl	8001fd0 <HAL_RCC_GetSysClockFreq>
 8001e34:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	4a61      	ldr	r2, [pc, #388]	; (8001fc0 <HAL_RCC_ClockConfig+0x268>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d909      	bls.n	8001e52 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001e3e:	4b5f      	ldr	r3, [pc, #380]	; (8001fbc <HAL_RCC_ClockConfig+0x264>)
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e46:	4a5d      	ldr	r2, [pc, #372]	; (8001fbc <HAL_RCC_ClockConfig+0x264>)
 8001e48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e4c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001e4e:	2380      	movs	r3, #128	; 0x80
 8001e50:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e52:	4b5a      	ldr	r3, [pc, #360]	; (8001fbc <HAL_RCC_ClockConfig+0x264>)
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	f023 0203 	bic.w	r2, r3, #3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	4957      	ldr	r1, [pc, #348]	; (8001fbc <HAL_RCC_ClockConfig+0x264>)
 8001e60:	4313      	orrs	r3, r2
 8001e62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e64:	f7fe ff4a 	bl	8000cfc <HAL_GetTick>
 8001e68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e6a:	e00a      	b.n	8001e82 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e6c:	f7fe ff46 	bl	8000cfc <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d901      	bls.n	8001e82 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e095      	b.n	8001fae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e82:	4b4e      	ldr	r3, [pc, #312]	; (8001fbc <HAL_RCC_ClockConfig+0x264>)
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	f003 020c 	and.w	r2, r3, #12
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d1eb      	bne.n	8001e6c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d023      	beq.n	8001ee8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0304 	and.w	r3, r3, #4
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d005      	beq.n	8001eb8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001eac:	4b43      	ldr	r3, [pc, #268]	; (8001fbc <HAL_RCC_ClockConfig+0x264>)
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	4a42      	ldr	r2, [pc, #264]	; (8001fbc <HAL_RCC_ClockConfig+0x264>)
 8001eb2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001eb6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0308 	and.w	r3, r3, #8
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d007      	beq.n	8001ed4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001ec4:	4b3d      	ldr	r3, [pc, #244]	; (8001fbc <HAL_RCC_ClockConfig+0x264>)
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001ecc:	4a3b      	ldr	r2, [pc, #236]	; (8001fbc <HAL_RCC_ClockConfig+0x264>)
 8001ece:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ed2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ed4:	4b39      	ldr	r3, [pc, #228]	; (8001fbc <HAL_RCC_ClockConfig+0x264>)
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	4936      	ldr	r1, [pc, #216]	; (8001fbc <HAL_RCC_ClockConfig+0x264>)
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	608b      	str	r3, [r1, #8]
 8001ee6:	e008      	b.n	8001efa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	2b80      	cmp	r3, #128	; 0x80
 8001eec:	d105      	bne.n	8001efa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001eee:	4b33      	ldr	r3, [pc, #204]	; (8001fbc <HAL_RCC_ClockConfig+0x264>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	4a32      	ldr	r2, [pc, #200]	; (8001fbc <HAL_RCC_ClockConfig+0x264>)
 8001ef4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ef8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001efa:	4b2f      	ldr	r3, [pc, #188]	; (8001fb8 <HAL_RCC_ClockConfig+0x260>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 030f 	and.w	r3, r3, #15
 8001f02:	683a      	ldr	r2, [r7, #0]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d21d      	bcs.n	8001f44 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f08:	4b2b      	ldr	r3, [pc, #172]	; (8001fb8 <HAL_RCC_ClockConfig+0x260>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f023 020f 	bic.w	r2, r3, #15
 8001f10:	4929      	ldr	r1, [pc, #164]	; (8001fb8 <HAL_RCC_ClockConfig+0x260>)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001f18:	f7fe fef0 	bl	8000cfc <HAL_GetTick>
 8001f1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f1e:	e00a      	b.n	8001f36 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f20:	f7fe feec 	bl	8000cfc <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e03b      	b.n	8001fae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f36:	4b20      	ldr	r3, [pc, #128]	; (8001fb8 <HAL_RCC_ClockConfig+0x260>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 030f 	and.w	r3, r3, #15
 8001f3e:	683a      	ldr	r2, [r7, #0]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d1ed      	bne.n	8001f20 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0304 	and.w	r3, r3, #4
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d008      	beq.n	8001f62 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f50:	4b1a      	ldr	r3, [pc, #104]	; (8001fbc <HAL_RCC_ClockConfig+0x264>)
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	4917      	ldr	r1, [pc, #92]	; (8001fbc <HAL_RCC_ClockConfig+0x264>)
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0308 	and.w	r3, r3, #8
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d009      	beq.n	8001f82 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f6e:	4b13      	ldr	r3, [pc, #76]	; (8001fbc <HAL_RCC_ClockConfig+0x264>)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	00db      	lsls	r3, r3, #3
 8001f7c:	490f      	ldr	r1, [pc, #60]	; (8001fbc <HAL_RCC_ClockConfig+0x264>)
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f82:	f000 f825 	bl	8001fd0 <HAL_RCC_GetSysClockFreq>
 8001f86:	4602      	mov	r2, r0
 8001f88:	4b0c      	ldr	r3, [pc, #48]	; (8001fbc <HAL_RCC_ClockConfig+0x264>)
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	091b      	lsrs	r3, r3, #4
 8001f8e:	f003 030f 	and.w	r3, r3, #15
 8001f92:	490c      	ldr	r1, [pc, #48]	; (8001fc4 <HAL_RCC_ClockConfig+0x26c>)
 8001f94:	5ccb      	ldrb	r3, [r1, r3]
 8001f96:	f003 031f 	and.w	r3, r3, #31
 8001f9a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f9e:	4a0a      	ldr	r2, [pc, #40]	; (8001fc8 <HAL_RCC_ClockConfig+0x270>)
 8001fa0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001fa2:	4b0a      	ldr	r3, [pc, #40]	; (8001fcc <HAL_RCC_ClockConfig+0x274>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7fe fe5c 	bl	8000c64 <HAL_InitTick>
 8001fac:	4603      	mov	r3, r0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3718      	adds	r7, #24
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	40022000 	.word	0x40022000
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	04c4b400 	.word	0x04c4b400
 8001fc4:	08008bb0 	.word	0x08008bb0
 8001fc8:	20000000 	.word	0x20000000
 8001fcc:	20000004 	.word	0x20000004

08001fd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b087      	sub	sp, #28
 8001fd4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001fd6:	4b2c      	ldr	r3, [pc, #176]	; (8002088 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	f003 030c 	and.w	r3, r3, #12
 8001fde:	2b04      	cmp	r3, #4
 8001fe0:	d102      	bne.n	8001fe8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001fe2:	4b2a      	ldr	r3, [pc, #168]	; (800208c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001fe4:	613b      	str	r3, [r7, #16]
 8001fe6:	e047      	b.n	8002078 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001fe8:	4b27      	ldr	r3, [pc, #156]	; (8002088 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f003 030c 	and.w	r3, r3, #12
 8001ff0:	2b08      	cmp	r3, #8
 8001ff2:	d102      	bne.n	8001ffa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ff4:	4b26      	ldr	r3, [pc, #152]	; (8002090 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ff6:	613b      	str	r3, [r7, #16]
 8001ff8:	e03e      	b.n	8002078 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001ffa:	4b23      	ldr	r3, [pc, #140]	; (8002088 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	f003 030c 	and.w	r3, r3, #12
 8002002:	2b0c      	cmp	r3, #12
 8002004:	d136      	bne.n	8002074 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002006:	4b20      	ldr	r3, [pc, #128]	; (8002088 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	f003 0303 	and.w	r3, r3, #3
 800200e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002010:	4b1d      	ldr	r3, [pc, #116]	; (8002088 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	091b      	lsrs	r3, r3, #4
 8002016:	f003 030f 	and.w	r3, r3, #15
 800201a:	3301      	adds	r3, #1
 800201c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2b03      	cmp	r3, #3
 8002022:	d10c      	bne.n	800203e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002024:	4a1a      	ldr	r2, [pc, #104]	; (8002090 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	fbb2 f3f3 	udiv	r3, r2, r3
 800202c:	4a16      	ldr	r2, [pc, #88]	; (8002088 <HAL_RCC_GetSysClockFreq+0xb8>)
 800202e:	68d2      	ldr	r2, [r2, #12]
 8002030:	0a12      	lsrs	r2, r2, #8
 8002032:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002036:	fb02 f303 	mul.w	r3, r2, r3
 800203a:	617b      	str	r3, [r7, #20]
      break;
 800203c:	e00c      	b.n	8002058 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800203e:	4a13      	ldr	r2, [pc, #76]	; (800208c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	fbb2 f3f3 	udiv	r3, r2, r3
 8002046:	4a10      	ldr	r2, [pc, #64]	; (8002088 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002048:	68d2      	ldr	r2, [r2, #12]
 800204a:	0a12      	lsrs	r2, r2, #8
 800204c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002050:	fb02 f303 	mul.w	r3, r2, r3
 8002054:	617b      	str	r3, [r7, #20]
      break;
 8002056:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002058:	4b0b      	ldr	r3, [pc, #44]	; (8002088 <HAL_RCC_GetSysClockFreq+0xb8>)
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	0e5b      	lsrs	r3, r3, #25
 800205e:	f003 0303 	and.w	r3, r3, #3
 8002062:	3301      	adds	r3, #1
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002068:	697a      	ldr	r2, [r7, #20]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002070:	613b      	str	r3, [r7, #16]
 8002072:	e001      	b.n	8002078 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002074:	2300      	movs	r3, #0
 8002076:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002078:	693b      	ldr	r3, [r7, #16]
}
 800207a:	4618      	mov	r0, r3
 800207c:	371c      	adds	r7, #28
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	40021000 	.word	0x40021000
 800208c:	00f42400 	.word	0x00f42400
 8002090:	007a1200 	.word	0x007a1200

08002094 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002098:	4b03      	ldr	r3, [pc, #12]	; (80020a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800209a:	681b      	ldr	r3, [r3, #0]
}
 800209c:	4618      	mov	r0, r3
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	20000000 	.word	0x20000000

080020ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80020b0:	f7ff fff0 	bl	8002094 <HAL_RCC_GetHCLKFreq>
 80020b4:	4602      	mov	r2, r0
 80020b6:	4b06      	ldr	r3, [pc, #24]	; (80020d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	0a1b      	lsrs	r3, r3, #8
 80020bc:	f003 0307 	and.w	r3, r3, #7
 80020c0:	4904      	ldr	r1, [pc, #16]	; (80020d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80020c2:	5ccb      	ldrb	r3, [r1, r3]
 80020c4:	f003 031f 	and.w	r3, r3, #31
 80020c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	40021000 	.word	0x40021000
 80020d4:	08008bc0 	.word	0x08008bc0

080020d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80020dc:	f7ff ffda 	bl	8002094 <HAL_RCC_GetHCLKFreq>
 80020e0:	4602      	mov	r2, r0
 80020e2:	4b06      	ldr	r3, [pc, #24]	; (80020fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	0adb      	lsrs	r3, r3, #11
 80020e8:	f003 0307 	and.w	r3, r3, #7
 80020ec:	4904      	ldr	r1, [pc, #16]	; (8002100 <HAL_RCC_GetPCLK2Freq+0x28>)
 80020ee:	5ccb      	ldrb	r3, [r1, r3]
 80020f0:	f003 031f 	and.w	r3, r3, #31
 80020f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	40021000 	.word	0x40021000
 8002100:	08008bc0 	.word	0x08008bc0

08002104 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002104:	b480      	push	{r7}
 8002106:	b087      	sub	sp, #28
 8002108:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800210a:	4b1e      	ldr	r3, [pc, #120]	; (8002184 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	f003 0303 	and.w	r3, r3, #3
 8002112:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002114:	4b1b      	ldr	r3, [pc, #108]	; (8002184 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	091b      	lsrs	r3, r3, #4
 800211a:	f003 030f 	and.w	r3, r3, #15
 800211e:	3301      	adds	r3, #1
 8002120:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	2b03      	cmp	r3, #3
 8002126:	d10c      	bne.n	8002142 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002128:	4a17      	ldr	r2, [pc, #92]	; (8002188 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002130:	4a14      	ldr	r2, [pc, #80]	; (8002184 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002132:	68d2      	ldr	r2, [r2, #12]
 8002134:	0a12      	lsrs	r2, r2, #8
 8002136:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800213a:	fb02 f303 	mul.w	r3, r2, r3
 800213e:	617b      	str	r3, [r7, #20]
    break;
 8002140:	e00c      	b.n	800215c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002142:	4a12      	ldr	r2, [pc, #72]	; (800218c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	fbb2 f3f3 	udiv	r3, r2, r3
 800214a:	4a0e      	ldr	r2, [pc, #56]	; (8002184 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800214c:	68d2      	ldr	r2, [r2, #12]
 800214e:	0a12      	lsrs	r2, r2, #8
 8002150:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002154:	fb02 f303 	mul.w	r3, r2, r3
 8002158:	617b      	str	r3, [r7, #20]
    break;
 800215a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800215c:	4b09      	ldr	r3, [pc, #36]	; (8002184 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	0e5b      	lsrs	r3, r3, #25
 8002162:	f003 0303 	and.w	r3, r3, #3
 8002166:	3301      	adds	r3, #1
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800216c:	697a      	ldr	r2, [r7, #20]
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	fbb2 f3f3 	udiv	r3, r2, r3
 8002174:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002176:	687b      	ldr	r3, [r7, #4]
}
 8002178:	4618      	mov	r0, r3
 800217a:	371c      	adds	r7, #28
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	40021000 	.word	0x40021000
 8002188:	007a1200 	.word	0x007a1200
 800218c:	00f42400 	.word	0x00f42400

08002190 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002198:	2300      	movs	r3, #0
 800219a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800219c:	2300      	movs	r3, #0
 800219e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	f000 8098 	beq.w	80022de <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021ae:	2300      	movs	r3, #0
 80021b0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021b2:	4b43      	ldr	r3, [pc, #268]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d10d      	bne.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021be:	4b40      	ldr	r3, [pc, #256]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c2:	4a3f      	ldr	r2, [pc, #252]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021c8:	6593      	str	r3, [r2, #88]	; 0x58
 80021ca:	4b3d      	ldr	r3, [pc, #244]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021d2:	60bb      	str	r3, [r7, #8]
 80021d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021d6:	2301      	movs	r3, #1
 80021d8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021da:	4b3a      	ldr	r3, [pc, #232]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a39      	ldr	r2, [pc, #228]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80021e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021e4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80021e6:	f7fe fd89 	bl	8000cfc <HAL_GetTick>
 80021ea:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80021ec:	e009      	b.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021ee:	f7fe fd85 	bl	8000cfc <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d902      	bls.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	74fb      	strb	r3, [r7, #19]
        break;
 8002200:	e005      	b.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002202:	4b30      	ldr	r3, [pc, #192]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800220a:	2b00      	cmp	r3, #0
 800220c:	d0ef      	beq.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800220e:	7cfb      	ldrb	r3, [r7, #19]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d159      	bne.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002214:	4b2a      	ldr	r3, [pc, #168]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800221a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800221e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d01e      	beq.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222a:	697a      	ldr	r2, [r7, #20]
 800222c:	429a      	cmp	r2, r3
 800222e:	d019      	beq.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002230:	4b23      	ldr	r3, [pc, #140]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002236:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800223a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800223c:	4b20      	ldr	r3, [pc, #128]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800223e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002242:	4a1f      	ldr	r2, [pc, #124]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002248:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800224c:	4b1c      	ldr	r3, [pc, #112]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800224e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002252:	4a1b      	ldr	r2, [pc, #108]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002254:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002258:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800225c:	4a18      	ldr	r2, [pc, #96]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	f003 0301 	and.w	r3, r3, #1
 800226a:	2b00      	cmp	r3, #0
 800226c:	d016      	beq.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800226e:	f7fe fd45 	bl	8000cfc <HAL_GetTick>
 8002272:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002274:	e00b      	b.n	800228e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002276:	f7fe fd41 	bl	8000cfc <HAL_GetTick>
 800227a:	4602      	mov	r2, r0
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	f241 3288 	movw	r2, #5000	; 0x1388
 8002284:	4293      	cmp	r3, r2
 8002286:	d902      	bls.n	800228e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	74fb      	strb	r3, [r7, #19]
            break;
 800228c:	e006      	b.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800228e:	4b0c      	ldr	r3, [pc, #48]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002294:	f003 0302 	and.w	r3, r3, #2
 8002298:	2b00      	cmp	r3, #0
 800229a:	d0ec      	beq.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800229c:	7cfb      	ldrb	r3, [r7, #19]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d10b      	bne.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022a2:	4b07      	ldr	r3, [pc, #28]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b0:	4903      	ldr	r1, [pc, #12]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80022b8:	e008      	b.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80022ba:	7cfb      	ldrb	r3, [r7, #19]
 80022bc:	74bb      	strb	r3, [r7, #18]
 80022be:	e005      	b.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80022c0:	40021000 	.word	0x40021000
 80022c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022c8:	7cfb      	ldrb	r3, [r7, #19]
 80022ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022cc:	7c7b      	ldrb	r3, [r7, #17]
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d105      	bne.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022d2:	4ba6      	ldr	r3, [pc, #664]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d6:	4aa5      	ldr	r2, [pc, #660]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022dc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d00a      	beq.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022ea:	4ba0      	ldr	r3, [pc, #640]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022f0:	f023 0203 	bic.w	r2, r3, #3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	499c      	ldr	r1, [pc, #624]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0302 	and.w	r3, r3, #2
 8002308:	2b00      	cmp	r3, #0
 800230a:	d00a      	beq.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800230c:	4b97      	ldr	r3, [pc, #604]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800230e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002312:	f023 020c 	bic.w	r2, r3, #12
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	4994      	ldr	r1, [pc, #592]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800231c:	4313      	orrs	r3, r2
 800231e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0304 	and.w	r3, r3, #4
 800232a:	2b00      	cmp	r3, #0
 800232c:	d00a      	beq.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800232e:	4b8f      	ldr	r3, [pc, #572]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002330:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002334:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	498b      	ldr	r1, [pc, #556]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800233e:	4313      	orrs	r3, r2
 8002340:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0308 	and.w	r3, r3, #8
 800234c:	2b00      	cmp	r3, #0
 800234e:	d00a      	beq.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002350:	4b86      	ldr	r3, [pc, #536]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002356:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	4983      	ldr	r1, [pc, #524]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002360:	4313      	orrs	r3, r2
 8002362:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0320 	and.w	r3, r3, #32
 800236e:	2b00      	cmp	r3, #0
 8002370:	d00a      	beq.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002372:	4b7e      	ldr	r3, [pc, #504]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002374:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002378:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	695b      	ldr	r3, [r3, #20]
 8002380:	497a      	ldr	r1, [pc, #488]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002382:	4313      	orrs	r3, r2
 8002384:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002390:	2b00      	cmp	r3, #0
 8002392:	d00a      	beq.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002394:	4b75      	ldr	r3, [pc, #468]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800239a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	699b      	ldr	r3, [r3, #24]
 80023a2:	4972      	ldr	r1, [pc, #456]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023a4:	4313      	orrs	r3, r2
 80023a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d00a      	beq.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80023b6:	4b6d      	ldr	r3, [pc, #436]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023bc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	69db      	ldr	r3, [r3, #28]
 80023c4:	4969      	ldr	r1, [pc, #420]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023c6:	4313      	orrs	r3, r2
 80023c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d00a      	beq.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023d8:	4b64      	ldr	r3, [pc, #400]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023de:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a1b      	ldr	r3, [r3, #32]
 80023e6:	4961      	ldr	r1, [pc, #388]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d00a      	beq.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80023fa:	4b5c      	ldr	r3, [pc, #368]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002400:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002408:	4958      	ldr	r1, [pc, #352]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800240a:	4313      	orrs	r3, r2
 800240c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002418:	2b00      	cmp	r3, #0
 800241a:	d015      	beq.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800241c:	4b53      	ldr	r3, [pc, #332]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800241e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002422:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800242a:	4950      	ldr	r1, [pc, #320]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800242c:	4313      	orrs	r3, r2
 800242e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002436:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800243a:	d105      	bne.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800243c:	4b4b      	ldr	r3, [pc, #300]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	4a4a      	ldr	r2, [pc, #296]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002442:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002446:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002450:	2b00      	cmp	r3, #0
 8002452:	d015      	beq.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002454:	4b45      	ldr	r3, [pc, #276]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800245a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002462:	4942      	ldr	r1, [pc, #264]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002464:	4313      	orrs	r3, r2
 8002466:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800246e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002472:	d105      	bne.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002474:	4b3d      	ldr	r3, [pc, #244]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	4a3c      	ldr	r2, [pc, #240]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800247a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800247e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d015      	beq.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800248c:	4b37      	ldr	r3, [pc, #220]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800248e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002492:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249a:	4934      	ldr	r1, [pc, #208]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800249c:	4313      	orrs	r3, r2
 800249e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024aa:	d105      	bne.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024ac:	4b2f      	ldr	r3, [pc, #188]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	4a2e      	ldr	r2, [pc, #184]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024b6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d015      	beq.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80024c4:	4b29      	ldr	r3, [pc, #164]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024d2:	4926      	ldr	r1, [pc, #152]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024e2:	d105      	bne.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024e4:	4b21      	ldr	r3, [pc, #132]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	4a20      	ldr	r2, [pc, #128]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024ee:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d015      	beq.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80024fc:	4b1b      	ldr	r3, [pc, #108]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002502:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800250a:	4918      	ldr	r1, [pc, #96]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800250c:	4313      	orrs	r3, r2
 800250e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002516:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800251a:	d105      	bne.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800251c:	4b13      	ldr	r3, [pc, #76]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	4a12      	ldr	r2, [pc, #72]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002522:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002526:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d015      	beq.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002534:	4b0d      	ldr	r3, [pc, #52]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800253a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002542:	490a      	ldr	r1, [pc, #40]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002544:	4313      	orrs	r3, r2
 8002546:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800254e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002552:	d105      	bne.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002554:	4b05      	ldr	r3, [pc, #20]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	4a04      	ldr	r2, [pc, #16]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800255a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800255e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002560:	7cbb      	ldrb	r3, [r7, #18]
}
 8002562:	4618      	mov	r0, r3
 8002564:	3718      	adds	r7, #24
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	40021000 	.word	0x40021000

08002570 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d101      	bne.n	8002582 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e049      	b.n	8002616 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b00      	cmp	r3, #0
 800258c:	d106      	bne.n	800259c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f7fe fa58 	bl	8000a4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2202      	movs	r2, #2
 80025a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	3304      	adds	r3, #4
 80025ac:	4619      	mov	r1, r3
 80025ae:	4610      	mov	r0, r2
 80025b0:	f000 f9ba 	bl	8002928 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2201      	movs	r2, #1
 80025c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2201      	movs	r2, #1
 80025e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
	...

08002620 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002620:	b480      	push	{r7}
 8002622:	b085      	sub	sp, #20
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800262e:	b2db      	uxtb	r3, r3
 8002630:	2b01      	cmp	r3, #1
 8002632:	d001      	beq.n	8002638 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e042      	b.n	80026be <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2202      	movs	r2, #2
 800263c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a21      	ldr	r2, [pc, #132]	; (80026cc <HAL_TIM_Base_Start+0xac>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d018      	beq.n	800267c <HAL_TIM_Base_Start+0x5c>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002652:	d013      	beq.n	800267c <HAL_TIM_Base_Start+0x5c>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a1d      	ldr	r2, [pc, #116]	; (80026d0 <HAL_TIM_Base_Start+0xb0>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d00e      	beq.n	800267c <HAL_TIM_Base_Start+0x5c>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a1c      	ldr	r2, [pc, #112]	; (80026d4 <HAL_TIM_Base_Start+0xb4>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d009      	beq.n	800267c <HAL_TIM_Base_Start+0x5c>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a1a      	ldr	r2, [pc, #104]	; (80026d8 <HAL_TIM_Base_Start+0xb8>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d004      	beq.n	800267c <HAL_TIM_Base_Start+0x5c>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a19      	ldr	r2, [pc, #100]	; (80026dc <HAL_TIM_Base_Start+0xbc>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d115      	bne.n	80026a8 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	689a      	ldr	r2, [r3, #8]
 8002682:	4b17      	ldr	r3, [pc, #92]	; (80026e0 <HAL_TIM_Base_Start+0xc0>)
 8002684:	4013      	ands	r3, r2
 8002686:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2b06      	cmp	r3, #6
 800268c:	d015      	beq.n	80026ba <HAL_TIM_Base_Start+0x9a>
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002694:	d011      	beq.n	80026ba <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f042 0201 	orr.w	r2, r2, #1
 80026a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026a6:	e008      	b.n	80026ba <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f042 0201 	orr.w	r2, r2, #1
 80026b6:	601a      	str	r2, [r3, #0]
 80026b8:	e000      	b.n	80026bc <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3714      	adds	r7, #20
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	40012c00 	.word	0x40012c00
 80026d0:	40000400 	.word	0x40000400
 80026d4:	40000800 	.word	0x40000800
 80026d8:	40013400 	.word	0x40013400
 80026dc:	40014000 	.word	0x40014000
 80026e0:	00010007 	.word	0x00010007

080026e4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	6a1a      	ldr	r2, [r3, #32]
 80026f2:	f241 1311 	movw	r3, #4369	; 0x1111
 80026f6:	4013      	ands	r3, r2
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d10f      	bne.n	800271c <HAL_TIM_Base_Stop+0x38>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	6a1a      	ldr	r2, [r3, #32]
 8002702:	f244 4344 	movw	r3, #17476	; 0x4444
 8002706:	4013      	ands	r3, r2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d107      	bne.n	800271c <HAL_TIM_Base_Stop+0x38>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f022 0201 	bic.w	r2, r2, #1
 800271a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
	...

08002734 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800273e:	2300      	movs	r3, #0
 8002740:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002748:	2b01      	cmp	r3, #1
 800274a:	d101      	bne.n	8002750 <HAL_TIM_ConfigClockSource+0x1c>
 800274c:	2302      	movs	r3, #2
 800274e:	e0de      	b.n	800290e <HAL_TIM_ConfigClockSource+0x1da>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2202      	movs	r2, #2
 800275c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800276e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002772:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800277a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	68ba      	ldr	r2, [r7, #8]
 8002782:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a63      	ldr	r2, [pc, #396]	; (8002918 <HAL_TIM_ConfigClockSource+0x1e4>)
 800278a:	4293      	cmp	r3, r2
 800278c:	f000 80a9 	beq.w	80028e2 <HAL_TIM_ConfigClockSource+0x1ae>
 8002790:	4a61      	ldr	r2, [pc, #388]	; (8002918 <HAL_TIM_ConfigClockSource+0x1e4>)
 8002792:	4293      	cmp	r3, r2
 8002794:	f200 80ae 	bhi.w	80028f4 <HAL_TIM_ConfigClockSource+0x1c0>
 8002798:	4a60      	ldr	r2, [pc, #384]	; (800291c <HAL_TIM_ConfigClockSource+0x1e8>)
 800279a:	4293      	cmp	r3, r2
 800279c:	f000 80a1 	beq.w	80028e2 <HAL_TIM_ConfigClockSource+0x1ae>
 80027a0:	4a5e      	ldr	r2, [pc, #376]	; (800291c <HAL_TIM_ConfigClockSource+0x1e8>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	f200 80a6 	bhi.w	80028f4 <HAL_TIM_ConfigClockSource+0x1c0>
 80027a8:	4a5d      	ldr	r2, [pc, #372]	; (8002920 <HAL_TIM_ConfigClockSource+0x1ec>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	f000 8099 	beq.w	80028e2 <HAL_TIM_ConfigClockSource+0x1ae>
 80027b0:	4a5b      	ldr	r2, [pc, #364]	; (8002920 <HAL_TIM_ConfigClockSource+0x1ec>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	f200 809e 	bhi.w	80028f4 <HAL_TIM_ConfigClockSource+0x1c0>
 80027b8:	4a5a      	ldr	r2, [pc, #360]	; (8002924 <HAL_TIM_ConfigClockSource+0x1f0>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	f000 8091 	beq.w	80028e2 <HAL_TIM_ConfigClockSource+0x1ae>
 80027c0:	4a58      	ldr	r2, [pc, #352]	; (8002924 <HAL_TIM_ConfigClockSource+0x1f0>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	f200 8096 	bhi.w	80028f4 <HAL_TIM_ConfigClockSource+0x1c0>
 80027c8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80027cc:	f000 8089 	beq.w	80028e2 <HAL_TIM_ConfigClockSource+0x1ae>
 80027d0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80027d4:	f200 808e 	bhi.w	80028f4 <HAL_TIM_ConfigClockSource+0x1c0>
 80027d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027dc:	d03e      	beq.n	800285c <HAL_TIM_ConfigClockSource+0x128>
 80027de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027e2:	f200 8087 	bhi.w	80028f4 <HAL_TIM_ConfigClockSource+0x1c0>
 80027e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027ea:	f000 8086 	beq.w	80028fa <HAL_TIM_ConfigClockSource+0x1c6>
 80027ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027f2:	d87f      	bhi.n	80028f4 <HAL_TIM_ConfigClockSource+0x1c0>
 80027f4:	2b70      	cmp	r3, #112	; 0x70
 80027f6:	d01a      	beq.n	800282e <HAL_TIM_ConfigClockSource+0xfa>
 80027f8:	2b70      	cmp	r3, #112	; 0x70
 80027fa:	d87b      	bhi.n	80028f4 <HAL_TIM_ConfigClockSource+0x1c0>
 80027fc:	2b60      	cmp	r3, #96	; 0x60
 80027fe:	d050      	beq.n	80028a2 <HAL_TIM_ConfigClockSource+0x16e>
 8002800:	2b60      	cmp	r3, #96	; 0x60
 8002802:	d877      	bhi.n	80028f4 <HAL_TIM_ConfigClockSource+0x1c0>
 8002804:	2b50      	cmp	r3, #80	; 0x50
 8002806:	d03c      	beq.n	8002882 <HAL_TIM_ConfigClockSource+0x14e>
 8002808:	2b50      	cmp	r3, #80	; 0x50
 800280a:	d873      	bhi.n	80028f4 <HAL_TIM_ConfigClockSource+0x1c0>
 800280c:	2b40      	cmp	r3, #64	; 0x40
 800280e:	d058      	beq.n	80028c2 <HAL_TIM_ConfigClockSource+0x18e>
 8002810:	2b40      	cmp	r3, #64	; 0x40
 8002812:	d86f      	bhi.n	80028f4 <HAL_TIM_ConfigClockSource+0x1c0>
 8002814:	2b30      	cmp	r3, #48	; 0x30
 8002816:	d064      	beq.n	80028e2 <HAL_TIM_ConfigClockSource+0x1ae>
 8002818:	2b30      	cmp	r3, #48	; 0x30
 800281a:	d86b      	bhi.n	80028f4 <HAL_TIM_ConfigClockSource+0x1c0>
 800281c:	2b20      	cmp	r3, #32
 800281e:	d060      	beq.n	80028e2 <HAL_TIM_ConfigClockSource+0x1ae>
 8002820:	2b20      	cmp	r3, #32
 8002822:	d867      	bhi.n	80028f4 <HAL_TIM_ConfigClockSource+0x1c0>
 8002824:	2b00      	cmp	r3, #0
 8002826:	d05c      	beq.n	80028e2 <HAL_TIM_ConfigClockSource+0x1ae>
 8002828:	2b10      	cmp	r3, #16
 800282a:	d05a      	beq.n	80028e2 <HAL_TIM_ConfigClockSource+0x1ae>
 800282c:	e062      	b.n	80028f4 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800283e:	f000 f98b 	bl	8002b58 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002850:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68ba      	ldr	r2, [r7, #8]
 8002858:	609a      	str	r2, [r3, #8]
      break;
 800285a:	e04f      	b.n	80028fc <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800286c:	f000 f974 	bl	8002b58 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	689a      	ldr	r2, [r3, #8]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800287e:	609a      	str	r2, [r3, #8]
      break;
 8002880:	e03c      	b.n	80028fc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800288e:	461a      	mov	r2, r3
 8002890:	f000 f8e6 	bl	8002a60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2150      	movs	r1, #80	; 0x50
 800289a:	4618      	mov	r0, r3
 800289c:	f000 f93f 	bl	8002b1e <TIM_ITRx_SetConfig>
      break;
 80028a0:	e02c      	b.n	80028fc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80028ae:	461a      	mov	r2, r3
 80028b0:	f000 f905 	bl	8002abe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2160      	movs	r1, #96	; 0x60
 80028ba:	4618      	mov	r0, r3
 80028bc:	f000 f92f 	bl	8002b1e <TIM_ITRx_SetConfig>
      break;
 80028c0:	e01c      	b.n	80028fc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028ce:	461a      	mov	r2, r3
 80028d0:	f000 f8c6 	bl	8002a60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2140      	movs	r1, #64	; 0x40
 80028da:	4618      	mov	r0, r3
 80028dc:	f000 f91f 	bl	8002b1e <TIM_ITRx_SetConfig>
      break;
 80028e0:	e00c      	b.n	80028fc <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4619      	mov	r1, r3
 80028ec:	4610      	mov	r0, r2
 80028ee:	f000 f916 	bl	8002b1e <TIM_ITRx_SetConfig>
      break;
 80028f2:	e003      	b.n	80028fc <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	73fb      	strb	r3, [r7, #15]
      break;
 80028f8:	e000      	b.n	80028fc <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80028fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800290c:	7bfb      	ldrb	r3, [r7, #15]
}
 800290e:	4618      	mov	r0, r3
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	00100070 	.word	0x00100070
 800291c:	00100040 	.word	0x00100040
 8002920:	00100030 	.word	0x00100030
 8002924:	00100020 	.word	0x00100020

08002928 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002928:	b480      	push	{r7}
 800292a:	b085      	sub	sp, #20
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4a42      	ldr	r2, [pc, #264]	; (8002a44 <TIM_Base_SetConfig+0x11c>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d00f      	beq.n	8002960 <TIM_Base_SetConfig+0x38>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002946:	d00b      	beq.n	8002960 <TIM_Base_SetConfig+0x38>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4a3f      	ldr	r2, [pc, #252]	; (8002a48 <TIM_Base_SetConfig+0x120>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d007      	beq.n	8002960 <TIM_Base_SetConfig+0x38>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4a3e      	ldr	r2, [pc, #248]	; (8002a4c <TIM_Base_SetConfig+0x124>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d003      	beq.n	8002960 <TIM_Base_SetConfig+0x38>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4a3d      	ldr	r2, [pc, #244]	; (8002a50 <TIM_Base_SetConfig+0x128>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d108      	bne.n	8002972 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002966:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	68fa      	ldr	r2, [r7, #12]
 800296e:	4313      	orrs	r3, r2
 8002970:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a33      	ldr	r2, [pc, #204]	; (8002a44 <TIM_Base_SetConfig+0x11c>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d01b      	beq.n	80029b2 <TIM_Base_SetConfig+0x8a>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002980:	d017      	beq.n	80029b2 <TIM_Base_SetConfig+0x8a>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a30      	ldr	r2, [pc, #192]	; (8002a48 <TIM_Base_SetConfig+0x120>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d013      	beq.n	80029b2 <TIM_Base_SetConfig+0x8a>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a2f      	ldr	r2, [pc, #188]	; (8002a4c <TIM_Base_SetConfig+0x124>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d00f      	beq.n	80029b2 <TIM_Base_SetConfig+0x8a>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a2e      	ldr	r2, [pc, #184]	; (8002a50 <TIM_Base_SetConfig+0x128>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d00b      	beq.n	80029b2 <TIM_Base_SetConfig+0x8a>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a2d      	ldr	r2, [pc, #180]	; (8002a54 <TIM_Base_SetConfig+0x12c>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d007      	beq.n	80029b2 <TIM_Base_SetConfig+0x8a>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a2c      	ldr	r2, [pc, #176]	; (8002a58 <TIM_Base_SetConfig+0x130>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d003      	beq.n	80029b2 <TIM_Base_SetConfig+0x8a>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a2b      	ldr	r2, [pc, #172]	; (8002a5c <TIM_Base_SetConfig+0x134>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d108      	bne.n	80029c4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	68fa      	ldr	r2, [r7, #12]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	695b      	ldr	r3, [r3, #20]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	68fa      	ldr	r2, [r7, #12]
 80029d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	689a      	ldr	r2, [r3, #8]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4a16      	ldr	r2, [pc, #88]	; (8002a44 <TIM_Base_SetConfig+0x11c>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d00f      	beq.n	8002a10 <TIM_Base_SetConfig+0xe8>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4a17      	ldr	r2, [pc, #92]	; (8002a50 <TIM_Base_SetConfig+0x128>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d00b      	beq.n	8002a10 <TIM_Base_SetConfig+0xe8>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4a16      	ldr	r2, [pc, #88]	; (8002a54 <TIM_Base_SetConfig+0x12c>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d007      	beq.n	8002a10 <TIM_Base_SetConfig+0xe8>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	4a15      	ldr	r2, [pc, #84]	; (8002a58 <TIM_Base_SetConfig+0x130>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d003      	beq.n	8002a10 <TIM_Base_SetConfig+0xe8>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	4a14      	ldr	r2, [pc, #80]	; (8002a5c <TIM_Base_SetConfig+0x134>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d103      	bne.n	8002a18 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	691a      	ldr	r2, [r3, #16]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	691b      	ldr	r3, [r3, #16]
 8002a22:	f003 0301 	and.w	r3, r3, #1
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d105      	bne.n	8002a36 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	f023 0201 	bic.w	r2, r3, #1
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	611a      	str	r2, [r3, #16]
  }
}
 8002a36:	bf00      	nop
 8002a38:	3714      	adds	r7, #20
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	40012c00 	.word	0x40012c00
 8002a48:	40000400 	.word	0x40000400
 8002a4c:	40000800 	.word	0x40000800
 8002a50:	40013400 	.word	0x40013400
 8002a54:	40014000 	.word	0x40014000
 8002a58:	40014400 	.word	0x40014400
 8002a5c:	40014800 	.word	0x40014800

08002a60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b087      	sub	sp, #28
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6a1b      	ldr	r3, [r3, #32]
 8002a70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6a1b      	ldr	r3, [r3, #32]
 8002a76:	f023 0201 	bic.w	r2, r3, #1
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	011b      	lsls	r3, r3, #4
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	f023 030a 	bic.w	r3, r3, #10
 8002a9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a9e:	697a      	ldr	r2, [r7, #20]
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	693a      	ldr	r2, [r7, #16]
 8002aaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	697a      	ldr	r2, [r7, #20]
 8002ab0:	621a      	str	r2, [r3, #32]
}
 8002ab2:	bf00      	nop
 8002ab4:	371c      	adds	r7, #28
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr

08002abe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002abe:	b480      	push	{r7}
 8002ac0:	b087      	sub	sp, #28
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	60f8      	str	r0, [r7, #12]
 8002ac6:	60b9      	str	r1, [r7, #8]
 8002ac8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6a1b      	ldr	r3, [r3, #32]
 8002ace:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6a1b      	ldr	r3, [r3, #32]
 8002ad4:	f023 0210 	bic.w	r2, r3, #16
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	699b      	ldr	r3, [r3, #24]
 8002ae0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ae8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	031b      	lsls	r3, r3, #12
 8002aee:	693a      	ldr	r2, [r7, #16]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002afa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	011b      	lsls	r3, r3, #4
 8002b00:	697a      	ldr	r2, [r7, #20]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	693a      	ldr	r2, [r7, #16]
 8002b0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	697a      	ldr	r2, [r7, #20]
 8002b10:	621a      	str	r2, [r3, #32]
}
 8002b12:	bf00      	nop
 8002b14:	371c      	adds	r7, #28
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr

08002b1e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b1e:	b480      	push	{r7}
 8002b20:	b085      	sub	sp, #20
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
 8002b26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002b34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b38:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b3a:	683a      	ldr	r2, [r7, #0]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	f043 0307 	orr.w	r3, r3, #7
 8002b44:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	68fa      	ldr	r2, [r7, #12]
 8002b4a:	609a      	str	r2, [r3, #8]
}
 8002b4c:	bf00      	nop
 8002b4e:	3714      	adds	r7, #20
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr

08002b58 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b087      	sub	sp, #28
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	607a      	str	r2, [r7, #4]
 8002b64:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b72:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	021a      	lsls	r2, r3, #8
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	431a      	orrs	r2, r3
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	697a      	ldr	r2, [r7, #20]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	697a      	ldr	r2, [r7, #20]
 8002b8a:	609a      	str	r2, [r3, #8]
}
 8002b8c:	bf00      	nop
 8002b8e:	371c      	adds	r7, #28
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b085      	sub	sp, #20
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d101      	bne.n	8002bb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002bac:	2302      	movs	r3, #2
 8002bae:	e065      	b.n	8002c7c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2202      	movs	r2, #2
 8002bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a2c      	ldr	r2, [pc, #176]	; (8002c88 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d004      	beq.n	8002be4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a2b      	ldr	r2, [pc, #172]	; (8002c8c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d108      	bne.n	8002bf6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002bea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	68fa      	ldr	r2, [r7, #12]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8002bfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c00:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68fa      	ldr	r2, [r7, #12]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	68fa      	ldr	r2, [r7, #12]
 8002c12:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a1b      	ldr	r2, [pc, #108]	; (8002c88 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d018      	beq.n	8002c50 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c26:	d013      	beq.n	8002c50 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a18      	ldr	r2, [pc, #96]	; (8002c90 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d00e      	beq.n	8002c50 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a17      	ldr	r2, [pc, #92]	; (8002c94 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d009      	beq.n	8002c50 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a12      	ldr	r2, [pc, #72]	; (8002c8c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d004      	beq.n	8002c50 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a13      	ldr	r2, [pc, #76]	; (8002c98 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d10c      	bne.n	8002c6a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c56:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	68ba      	ldr	r2, [r7, #8]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	68ba      	ldr	r2, [r7, #8]
 8002c68:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c7a:	2300      	movs	r3, #0
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3714      	adds	r7, #20
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr
 8002c88:	40012c00 	.word	0x40012c00
 8002c8c:	40013400 	.word	0x40013400
 8002c90:	40000400 	.word	0x40000400
 8002c94:	40000800 	.word	0x40000800
 8002c98:	40014000 	.word	0x40014000

08002c9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d101      	bne.n	8002cae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e042      	b.n	8002d34 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d106      	bne.n	8002cc6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f7fd ff2d 	bl	8000b20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2224      	movs	r2, #36	; 0x24
 8002cca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f022 0201 	bic.w	r2, r2, #1
 8002cdc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d002      	beq.n	8002cec <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f000 ff08 	bl	8003afc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f000 fc39 	bl	8003564 <UART_SetConfig>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d101      	bne.n	8002cfc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e01b      	b.n	8002d34 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	685a      	ldr	r2, [r3, #4]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	689a      	ldr	r2, [r3, #8]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d1a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f042 0201 	orr.w	r2, r2, #1
 8002d2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f000 ff87 	bl	8003c40 <UART_CheckIdleState>
 8002d32:	4603      	mov	r3, r0
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3708      	adds	r7, #8
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b08a      	sub	sp, #40	; 0x28
 8002d40:	af02      	add	r7, sp, #8
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	60b9      	str	r1, [r7, #8]
 8002d46:	603b      	str	r3, [r7, #0]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d52:	2b20      	cmp	r3, #32
 8002d54:	d17b      	bne.n	8002e4e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d002      	beq.n	8002d62 <HAL_UART_Transmit+0x26>
 8002d5c:	88fb      	ldrh	r3, [r7, #6]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d101      	bne.n	8002d66 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e074      	b.n	8002e50 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2221      	movs	r2, #33	; 0x21
 8002d72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d76:	f7fd ffc1 	bl	8000cfc <HAL_GetTick>
 8002d7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	88fa      	ldrh	r2, [r7, #6]
 8002d80:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	88fa      	ldrh	r2, [r7, #6]
 8002d88:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d94:	d108      	bne.n	8002da8 <HAL_UART_Transmit+0x6c>
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d104      	bne.n	8002da8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	61bb      	str	r3, [r7, #24]
 8002da6:	e003      	b.n	8002db0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002dac:	2300      	movs	r3, #0
 8002dae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002db0:	e030      	b.n	8002e14 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	9300      	str	r3, [sp, #0]
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	2200      	movs	r2, #0
 8002dba:	2180      	movs	r1, #128	; 0x80
 8002dbc:	68f8      	ldr	r0, [r7, #12]
 8002dbe:	f000 ffe9 	bl	8003d94 <UART_WaitOnFlagUntilTimeout>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d005      	beq.n	8002dd4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2220      	movs	r2, #32
 8002dcc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e03d      	b.n	8002e50 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d10b      	bne.n	8002df2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	881b      	ldrh	r3, [r3, #0]
 8002dde:	461a      	mov	r2, r3
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002de8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	3302      	adds	r3, #2
 8002dee:	61bb      	str	r3, [r7, #24]
 8002df0:	e007      	b.n	8002e02 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	781a      	ldrb	r2, [r3, #0]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	3301      	adds	r3, #1
 8002e00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	b29a      	uxth	r2, r3
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d1c8      	bne.n	8002db2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	9300      	str	r3, [sp, #0]
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	2200      	movs	r2, #0
 8002e28:	2140      	movs	r1, #64	; 0x40
 8002e2a:	68f8      	ldr	r0, [r7, #12]
 8002e2c:	f000 ffb2 	bl	8003d94 <UART_WaitOnFlagUntilTimeout>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d005      	beq.n	8002e42 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2220      	movs	r2, #32
 8002e3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e006      	b.n	8002e50 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2220      	movs	r2, #32
 8002e46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	e000      	b.n	8002e50 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8002e4e:	2302      	movs	r3, #2
  }
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3720      	adds	r7, #32
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b08a      	sub	sp, #40	; 0x28
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	4613      	mov	r3, r2
 8002e64:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e6c:	2b20      	cmp	r3, #32
 8002e6e:	d137      	bne.n	8002ee0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d002      	beq.n	8002e7c <HAL_UART_Receive_IT+0x24>
 8002e76:	88fb      	ldrh	r3, [r7, #6]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d101      	bne.n	8002e80 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e030      	b.n	8002ee2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2200      	movs	r2, #0
 8002e84:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a18      	ldr	r2, [pc, #96]	; (8002eec <HAL_UART_Receive_IT+0x94>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d01f      	beq.n	8002ed0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d018      	beq.n	8002ed0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	e853 3f00 	ldrex	r3, [r3]
 8002eaa:	613b      	str	r3, [r7, #16]
   return(result);
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002eb2:	627b      	str	r3, [r7, #36]	; 0x24
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	461a      	mov	r2, r3
 8002eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebc:	623b      	str	r3, [r7, #32]
 8002ebe:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ec0:	69f9      	ldr	r1, [r7, #28]
 8002ec2:	6a3a      	ldr	r2, [r7, #32]
 8002ec4:	e841 2300 	strex	r3, r2, [r1]
 8002ec8:	61bb      	str	r3, [r7, #24]
   return(result);
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d1e6      	bne.n	8002e9e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002ed0:	88fb      	ldrh	r3, [r7, #6]
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	68b9      	ldr	r1, [r7, #8]
 8002ed6:	68f8      	ldr	r0, [r7, #12]
 8002ed8:	f000 ffca 	bl	8003e70 <UART_Start_Receive_IT>
 8002edc:	4603      	mov	r3, r0
 8002ede:	e000      	b.n	8002ee2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002ee0:	2302      	movs	r3, #2
  }
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3728      	adds	r7, #40	; 0x28
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	40008000 	.word	0x40008000

08002ef0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b0ba      	sub	sp, #232	; 0xe8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	69db      	ldr	r3, [r3, #28]
 8002efe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002f16:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002f1a:	f640 030f 	movw	r3, #2063	; 0x80f
 8002f1e:	4013      	ands	r3, r2
 8002f20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002f24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d11b      	bne.n	8002f64 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002f2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f30:	f003 0320 	and.w	r3, r3, #32
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d015      	beq.n	8002f64 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002f38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f3c:	f003 0320 	and.w	r3, r3, #32
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d105      	bne.n	8002f50 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002f44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d009      	beq.n	8002f64 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	f000 82e3 	beq.w	8003520 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	4798      	blx	r3
      }
      return;
 8002f62:	e2dd      	b.n	8003520 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002f64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	f000 8123 	beq.w	80031b4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002f6e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002f72:	4b8d      	ldr	r3, [pc, #564]	; (80031a8 <HAL_UART_IRQHandler+0x2b8>)
 8002f74:	4013      	ands	r3, r2
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d106      	bne.n	8002f88 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002f7a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002f7e:	4b8b      	ldr	r3, [pc, #556]	; (80031ac <HAL_UART_IRQHandler+0x2bc>)
 8002f80:	4013      	ands	r3, r2
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	f000 8116 	beq.w	80031b4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002f88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f8c:	f003 0301 	and.w	r3, r3, #1
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d011      	beq.n	8002fb8 <HAL_UART_IRQHandler+0xc8>
 8002f94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d00b      	beq.n	8002fb8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fae:	f043 0201 	orr.w	r2, r3, #1
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002fb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fbc:	f003 0302 	and.w	r3, r3, #2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d011      	beq.n	8002fe8 <HAL_UART_IRQHandler+0xf8>
 8002fc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fc8:	f003 0301 	and.w	r3, r3, #1
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d00b      	beq.n	8002fe8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2202      	movs	r2, #2
 8002fd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fde:	f043 0204 	orr.w	r2, r3, #4
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002fe8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fec:	f003 0304 	and.w	r3, r3, #4
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d011      	beq.n	8003018 <HAL_UART_IRQHandler+0x128>
 8002ff4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ff8:	f003 0301 	and.w	r3, r3, #1
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d00b      	beq.n	8003018 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2204      	movs	r2, #4
 8003006:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800300e:	f043 0202 	orr.w	r2, r3, #2
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003018:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800301c:	f003 0308 	and.w	r3, r3, #8
 8003020:	2b00      	cmp	r3, #0
 8003022:	d017      	beq.n	8003054 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003024:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003028:	f003 0320 	and.w	r3, r3, #32
 800302c:	2b00      	cmp	r3, #0
 800302e:	d105      	bne.n	800303c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003030:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003034:	4b5c      	ldr	r3, [pc, #368]	; (80031a8 <HAL_UART_IRQHandler+0x2b8>)
 8003036:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003038:	2b00      	cmp	r3, #0
 800303a:	d00b      	beq.n	8003054 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2208      	movs	r2, #8
 8003042:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800304a:	f043 0208 	orr.w	r2, r3, #8
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003054:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003058:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800305c:	2b00      	cmp	r3, #0
 800305e:	d012      	beq.n	8003086 <HAL_UART_IRQHandler+0x196>
 8003060:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003064:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d00c      	beq.n	8003086 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003074:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800307c:	f043 0220 	orr.w	r2, r3, #32
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800308c:	2b00      	cmp	r3, #0
 800308e:	f000 8249 	beq.w	8003524 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003096:	f003 0320 	and.w	r3, r3, #32
 800309a:	2b00      	cmp	r3, #0
 800309c:	d013      	beq.n	80030c6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800309e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030a2:	f003 0320 	and.w	r3, r3, #32
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d105      	bne.n	80030b6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80030aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d007      	beq.n	80030c6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d003      	beq.n	80030c6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030da:	2b40      	cmp	r3, #64	; 0x40
 80030dc:	d005      	beq.n	80030ea <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80030de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80030e2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d054      	beq.n	8003194 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f000 ffe2 	bl	80040b4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030fa:	2b40      	cmp	r3, #64	; 0x40
 80030fc:	d146      	bne.n	800318c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	3308      	adds	r3, #8
 8003104:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003108:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800310c:	e853 3f00 	ldrex	r3, [r3]
 8003110:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003114:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003118:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800311c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	3308      	adds	r3, #8
 8003126:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800312a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800312e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003132:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003136:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800313a:	e841 2300 	strex	r3, r2, [r1]
 800313e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003142:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d1d9      	bne.n	80030fe <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003150:	2b00      	cmp	r3, #0
 8003152:	d017      	beq.n	8003184 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800315a:	4a15      	ldr	r2, [pc, #84]	; (80031b0 <HAL_UART_IRQHandler+0x2c0>)
 800315c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003164:	4618      	mov	r0, r3
 8003166:	f7fe f830 	bl	80011ca <HAL_DMA_Abort_IT>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d019      	beq.n	80031a4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800317e:	4610      	mov	r0, r2
 8003180:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003182:	e00f      	b.n	80031a4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f000 f9d7 	bl	8003538 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800318a:	e00b      	b.n	80031a4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f000 f9d3 	bl	8003538 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003192:	e007      	b.n	80031a4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f000 f9cf 	bl	8003538 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80031a2:	e1bf      	b.n	8003524 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031a4:	bf00      	nop
    return;
 80031a6:	e1bd      	b.n	8003524 <HAL_UART_IRQHandler+0x634>
 80031a8:	10000001 	.word	0x10000001
 80031ac:	04000120 	.word	0x04000120
 80031b0:	08004181 	.word	0x08004181

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	f040 8153 	bne.w	8003464 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80031be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031c2:	f003 0310 	and.w	r3, r3, #16
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	f000 814c 	beq.w	8003464 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80031cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031d0:	f003 0310 	and.w	r3, r3, #16
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	f000 8145 	beq.w	8003464 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2210      	movs	r2, #16
 80031e0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ec:	2b40      	cmp	r3, #64	; 0x40
 80031ee:	f040 80bb 	bne.w	8003368 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003200:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003204:	2b00      	cmp	r3, #0
 8003206:	f000 818f 	beq.w	8003528 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003210:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003214:	429a      	cmp	r2, r3
 8003216:	f080 8187 	bcs.w	8003528 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003220:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0320 	and.w	r3, r3, #32
 8003232:	2b00      	cmp	r3, #0
 8003234:	f040 8087 	bne.w	8003346 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003240:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003244:	e853 3f00 	ldrex	r3, [r3]
 8003248:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800324c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003250:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003254:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	461a      	mov	r2, r3
 800325e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003262:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003266:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800326a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800326e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003272:	e841 2300 	strex	r3, r2, [r1]
 8003276:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800327a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1da      	bne.n	8003238 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	3308      	adds	r3, #8
 8003288:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800328a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800328c:	e853 3f00 	ldrex	r3, [r3]
 8003290:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003292:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003294:	f023 0301 	bic.w	r3, r3, #1
 8003298:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	3308      	adds	r3, #8
 80032a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80032a6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80032aa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80032ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80032b2:	e841 2300 	strex	r3, r2, [r1]
 80032b6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80032b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d1e1      	bne.n	8003282 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	3308      	adds	r3, #8
 80032c4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032c8:	e853 3f00 	ldrex	r3, [r3]
 80032cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80032ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	3308      	adds	r3, #8
 80032de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80032e2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80032e4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032e6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80032e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80032ea:	e841 2300 	strex	r3, r2, [r1]
 80032ee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80032f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d1e3      	bne.n	80032be <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2220      	movs	r2, #32
 80032fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800330a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800330c:	e853 3f00 	ldrex	r3, [r3]
 8003310:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003312:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003314:	f023 0310 	bic.w	r3, r3, #16
 8003318:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	461a      	mov	r2, r3
 8003322:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003326:	65bb      	str	r3, [r7, #88]	; 0x58
 8003328:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800332a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800332c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800332e:	e841 2300 	strex	r3, r2, [r1]
 8003332:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003334:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1e4      	bne.n	8003304 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003340:	4618      	mov	r0, r3
 8003342:	f7fd fee9 	bl	8001118 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2202      	movs	r2, #2
 800334a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003358:	b29b      	uxth	r3, r3
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	b29b      	uxth	r3, r3
 800335e:	4619      	mov	r1, r3
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f000 f8f3 	bl	800354c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003366:	e0df      	b.n	8003528 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003374:	b29b      	uxth	r3, r3
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003382:	b29b      	uxth	r3, r3
 8003384:	2b00      	cmp	r3, #0
 8003386:	f000 80d1 	beq.w	800352c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800338a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800338e:	2b00      	cmp	r3, #0
 8003390:	f000 80cc 	beq.w	800352c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800339a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800339c:	e853 3f00 	ldrex	r3, [r3]
 80033a0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80033a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80033a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	461a      	mov	r2, r3
 80033b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80033b6:	647b      	str	r3, [r7, #68]	; 0x44
 80033b8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80033bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80033be:	e841 2300 	strex	r3, r2, [r1]
 80033c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80033c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d1e4      	bne.n	8003394 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	3308      	adds	r3, #8
 80033d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d4:	e853 3f00 	ldrex	r3, [r3]
 80033d8:	623b      	str	r3, [r7, #32]
   return(result);
 80033da:	6a3b      	ldr	r3, [r7, #32]
 80033dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033e0:	f023 0301 	bic.w	r3, r3, #1
 80033e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	3308      	adds	r3, #8
 80033ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80033f2:	633a      	str	r2, [r7, #48]	; 0x30
 80033f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80033f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033fa:	e841 2300 	strex	r3, r2, [r1]
 80033fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003402:	2b00      	cmp	r3, #0
 8003404:	d1e1      	bne.n	80033ca <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2220      	movs	r2, #32
 800340a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	e853 3f00 	ldrex	r3, [r3]
 8003426:	60fb      	str	r3, [r7, #12]
   return(result);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f023 0310 	bic.w	r3, r3, #16
 800342e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	461a      	mov	r2, r3
 8003438:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800343c:	61fb      	str	r3, [r7, #28]
 800343e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003440:	69b9      	ldr	r1, [r7, #24]
 8003442:	69fa      	ldr	r2, [r7, #28]
 8003444:	e841 2300 	strex	r3, r2, [r1]
 8003448:	617b      	str	r3, [r7, #20]
   return(result);
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d1e4      	bne.n	800341a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2202      	movs	r2, #2
 8003454:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003456:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800345a:	4619      	mov	r1, r3
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f000 f875 	bl	800354c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003462:	e063      	b.n	800352c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003464:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003468:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d00e      	beq.n	800348e <HAL_UART_IRQHandler+0x59e>
 8003470:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003474:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d008      	beq.n	800348e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003484:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f001 fbd8 	bl	8004c3c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800348c:	e051      	b.n	8003532 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800348e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003496:	2b00      	cmp	r3, #0
 8003498:	d014      	beq.n	80034c4 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800349a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800349e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d105      	bne.n	80034b2 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80034a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d008      	beq.n	80034c4 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d03a      	beq.n	8003530 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	4798      	blx	r3
    }
    return;
 80034c2:	e035      	b.n	8003530 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80034c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d009      	beq.n	80034e4 <HAL_UART_IRQHandler+0x5f4>
 80034d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d003      	beq.n	80034e4 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f000 fe65 	bl	80041ac <UART_EndTransmit_IT>
    return;
 80034e2:	e026      	b.n	8003532 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80034e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d009      	beq.n	8003504 <HAL_UART_IRQHandler+0x614>
 80034f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034f4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d003      	beq.n	8003504 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f001 fbb1 	bl	8004c64 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003502:	e016      	b.n	8003532 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003504:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003508:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d010      	beq.n	8003532 <HAL_UART_IRQHandler+0x642>
 8003510:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003514:	2b00      	cmp	r3, #0
 8003516:	da0c      	bge.n	8003532 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f001 fb99 	bl	8004c50 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800351e:	e008      	b.n	8003532 <HAL_UART_IRQHandler+0x642>
      return;
 8003520:	bf00      	nop
 8003522:	e006      	b.n	8003532 <HAL_UART_IRQHandler+0x642>
    return;
 8003524:	bf00      	nop
 8003526:	e004      	b.n	8003532 <HAL_UART_IRQHandler+0x642>
      return;
 8003528:	bf00      	nop
 800352a:	e002      	b.n	8003532 <HAL_UART_IRQHandler+0x642>
      return;
 800352c:	bf00      	nop
 800352e:	e000      	b.n	8003532 <HAL_UART_IRQHandler+0x642>
    return;
 8003530:	bf00      	nop
  }
}
 8003532:	37e8      	adds	r7, #232	; 0xe8
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003540:	bf00      	nop
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	460b      	mov	r3, r1
 8003556:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003558:	bf00      	nop
 800355a:	370c      	adds	r7, #12
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr

08003564 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003564:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003568:	b08c      	sub	sp, #48	; 0x30
 800356a:	af00      	add	r7, sp, #0
 800356c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800356e:	2300      	movs	r3, #0
 8003570:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	689a      	ldr	r2, [r3, #8]
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	691b      	ldr	r3, [r3, #16]
 800357c:	431a      	orrs	r2, r3
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	695b      	ldr	r3, [r3, #20]
 8003582:	431a      	orrs	r2, r3
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	69db      	ldr	r3, [r3, #28]
 8003588:	4313      	orrs	r3, r2
 800358a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	4bab      	ldr	r3, [pc, #684]	; (8003840 <UART_SetConfig+0x2dc>)
 8003594:	4013      	ands	r3, r2
 8003596:	697a      	ldr	r2, [r7, #20]
 8003598:	6812      	ldr	r2, [r2, #0]
 800359a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800359c:	430b      	orrs	r3, r1
 800359e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	68da      	ldr	r2, [r3, #12]
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	430a      	orrs	r2, r1
 80035b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4aa0      	ldr	r2, [pc, #640]	; (8003844 <UART_SetConfig+0x2e0>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d004      	beq.n	80035d0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	6a1b      	ldr	r3, [r3, #32]
 80035ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035cc:	4313      	orrs	r3, r2
 80035ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80035da:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80035de:	697a      	ldr	r2, [r7, #20]
 80035e0:	6812      	ldr	r2, [r2, #0]
 80035e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80035e4:	430b      	orrs	r3, r1
 80035e6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ee:	f023 010f 	bic.w	r1, r3, #15
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	430a      	orrs	r2, r1
 80035fc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a91      	ldr	r2, [pc, #580]	; (8003848 <UART_SetConfig+0x2e4>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d125      	bne.n	8003654 <UART_SetConfig+0xf0>
 8003608:	4b90      	ldr	r3, [pc, #576]	; (800384c <UART_SetConfig+0x2e8>)
 800360a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800360e:	f003 0303 	and.w	r3, r3, #3
 8003612:	2b03      	cmp	r3, #3
 8003614:	d81a      	bhi.n	800364c <UART_SetConfig+0xe8>
 8003616:	a201      	add	r2, pc, #4	; (adr r2, 800361c <UART_SetConfig+0xb8>)
 8003618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800361c:	0800362d 	.word	0x0800362d
 8003620:	0800363d 	.word	0x0800363d
 8003624:	08003635 	.word	0x08003635
 8003628:	08003645 	.word	0x08003645
 800362c:	2301      	movs	r3, #1
 800362e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003632:	e0d6      	b.n	80037e2 <UART_SetConfig+0x27e>
 8003634:	2302      	movs	r3, #2
 8003636:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800363a:	e0d2      	b.n	80037e2 <UART_SetConfig+0x27e>
 800363c:	2304      	movs	r3, #4
 800363e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003642:	e0ce      	b.n	80037e2 <UART_SetConfig+0x27e>
 8003644:	2308      	movs	r3, #8
 8003646:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800364a:	e0ca      	b.n	80037e2 <UART_SetConfig+0x27e>
 800364c:	2310      	movs	r3, #16
 800364e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003652:	e0c6      	b.n	80037e2 <UART_SetConfig+0x27e>
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a7d      	ldr	r2, [pc, #500]	; (8003850 <UART_SetConfig+0x2ec>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d138      	bne.n	80036d0 <UART_SetConfig+0x16c>
 800365e:	4b7b      	ldr	r3, [pc, #492]	; (800384c <UART_SetConfig+0x2e8>)
 8003660:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003664:	f003 030c 	and.w	r3, r3, #12
 8003668:	2b0c      	cmp	r3, #12
 800366a:	d82d      	bhi.n	80036c8 <UART_SetConfig+0x164>
 800366c:	a201      	add	r2, pc, #4	; (adr r2, 8003674 <UART_SetConfig+0x110>)
 800366e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003672:	bf00      	nop
 8003674:	080036a9 	.word	0x080036a9
 8003678:	080036c9 	.word	0x080036c9
 800367c:	080036c9 	.word	0x080036c9
 8003680:	080036c9 	.word	0x080036c9
 8003684:	080036b9 	.word	0x080036b9
 8003688:	080036c9 	.word	0x080036c9
 800368c:	080036c9 	.word	0x080036c9
 8003690:	080036c9 	.word	0x080036c9
 8003694:	080036b1 	.word	0x080036b1
 8003698:	080036c9 	.word	0x080036c9
 800369c:	080036c9 	.word	0x080036c9
 80036a0:	080036c9 	.word	0x080036c9
 80036a4:	080036c1 	.word	0x080036c1
 80036a8:	2300      	movs	r3, #0
 80036aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036ae:	e098      	b.n	80037e2 <UART_SetConfig+0x27e>
 80036b0:	2302      	movs	r3, #2
 80036b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036b6:	e094      	b.n	80037e2 <UART_SetConfig+0x27e>
 80036b8:	2304      	movs	r3, #4
 80036ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036be:	e090      	b.n	80037e2 <UART_SetConfig+0x27e>
 80036c0:	2308      	movs	r3, #8
 80036c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036c6:	e08c      	b.n	80037e2 <UART_SetConfig+0x27e>
 80036c8:	2310      	movs	r3, #16
 80036ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036ce:	e088      	b.n	80037e2 <UART_SetConfig+0x27e>
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a5f      	ldr	r2, [pc, #380]	; (8003854 <UART_SetConfig+0x2f0>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d125      	bne.n	8003726 <UART_SetConfig+0x1c2>
 80036da:	4b5c      	ldr	r3, [pc, #368]	; (800384c <UART_SetConfig+0x2e8>)
 80036dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036e0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80036e4:	2b30      	cmp	r3, #48	; 0x30
 80036e6:	d016      	beq.n	8003716 <UART_SetConfig+0x1b2>
 80036e8:	2b30      	cmp	r3, #48	; 0x30
 80036ea:	d818      	bhi.n	800371e <UART_SetConfig+0x1ba>
 80036ec:	2b20      	cmp	r3, #32
 80036ee:	d00a      	beq.n	8003706 <UART_SetConfig+0x1a2>
 80036f0:	2b20      	cmp	r3, #32
 80036f2:	d814      	bhi.n	800371e <UART_SetConfig+0x1ba>
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d002      	beq.n	80036fe <UART_SetConfig+0x19a>
 80036f8:	2b10      	cmp	r3, #16
 80036fa:	d008      	beq.n	800370e <UART_SetConfig+0x1aa>
 80036fc:	e00f      	b.n	800371e <UART_SetConfig+0x1ba>
 80036fe:	2300      	movs	r3, #0
 8003700:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003704:	e06d      	b.n	80037e2 <UART_SetConfig+0x27e>
 8003706:	2302      	movs	r3, #2
 8003708:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800370c:	e069      	b.n	80037e2 <UART_SetConfig+0x27e>
 800370e:	2304      	movs	r3, #4
 8003710:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003714:	e065      	b.n	80037e2 <UART_SetConfig+0x27e>
 8003716:	2308      	movs	r3, #8
 8003718:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800371c:	e061      	b.n	80037e2 <UART_SetConfig+0x27e>
 800371e:	2310      	movs	r3, #16
 8003720:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003724:	e05d      	b.n	80037e2 <UART_SetConfig+0x27e>
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a4b      	ldr	r2, [pc, #300]	; (8003858 <UART_SetConfig+0x2f4>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d125      	bne.n	800377c <UART_SetConfig+0x218>
 8003730:	4b46      	ldr	r3, [pc, #280]	; (800384c <UART_SetConfig+0x2e8>)
 8003732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003736:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800373a:	2bc0      	cmp	r3, #192	; 0xc0
 800373c:	d016      	beq.n	800376c <UART_SetConfig+0x208>
 800373e:	2bc0      	cmp	r3, #192	; 0xc0
 8003740:	d818      	bhi.n	8003774 <UART_SetConfig+0x210>
 8003742:	2b80      	cmp	r3, #128	; 0x80
 8003744:	d00a      	beq.n	800375c <UART_SetConfig+0x1f8>
 8003746:	2b80      	cmp	r3, #128	; 0x80
 8003748:	d814      	bhi.n	8003774 <UART_SetConfig+0x210>
 800374a:	2b00      	cmp	r3, #0
 800374c:	d002      	beq.n	8003754 <UART_SetConfig+0x1f0>
 800374e:	2b40      	cmp	r3, #64	; 0x40
 8003750:	d008      	beq.n	8003764 <UART_SetConfig+0x200>
 8003752:	e00f      	b.n	8003774 <UART_SetConfig+0x210>
 8003754:	2300      	movs	r3, #0
 8003756:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800375a:	e042      	b.n	80037e2 <UART_SetConfig+0x27e>
 800375c:	2302      	movs	r3, #2
 800375e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003762:	e03e      	b.n	80037e2 <UART_SetConfig+0x27e>
 8003764:	2304      	movs	r3, #4
 8003766:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800376a:	e03a      	b.n	80037e2 <UART_SetConfig+0x27e>
 800376c:	2308      	movs	r3, #8
 800376e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003772:	e036      	b.n	80037e2 <UART_SetConfig+0x27e>
 8003774:	2310      	movs	r3, #16
 8003776:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800377a:	e032      	b.n	80037e2 <UART_SetConfig+0x27e>
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a30      	ldr	r2, [pc, #192]	; (8003844 <UART_SetConfig+0x2e0>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d12a      	bne.n	80037dc <UART_SetConfig+0x278>
 8003786:	4b31      	ldr	r3, [pc, #196]	; (800384c <UART_SetConfig+0x2e8>)
 8003788:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800378c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003790:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003794:	d01a      	beq.n	80037cc <UART_SetConfig+0x268>
 8003796:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800379a:	d81b      	bhi.n	80037d4 <UART_SetConfig+0x270>
 800379c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037a0:	d00c      	beq.n	80037bc <UART_SetConfig+0x258>
 80037a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037a6:	d815      	bhi.n	80037d4 <UART_SetConfig+0x270>
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d003      	beq.n	80037b4 <UART_SetConfig+0x250>
 80037ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037b0:	d008      	beq.n	80037c4 <UART_SetConfig+0x260>
 80037b2:	e00f      	b.n	80037d4 <UART_SetConfig+0x270>
 80037b4:	2300      	movs	r3, #0
 80037b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037ba:	e012      	b.n	80037e2 <UART_SetConfig+0x27e>
 80037bc:	2302      	movs	r3, #2
 80037be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037c2:	e00e      	b.n	80037e2 <UART_SetConfig+0x27e>
 80037c4:	2304      	movs	r3, #4
 80037c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037ca:	e00a      	b.n	80037e2 <UART_SetConfig+0x27e>
 80037cc:	2308      	movs	r3, #8
 80037ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037d2:	e006      	b.n	80037e2 <UART_SetConfig+0x27e>
 80037d4:	2310      	movs	r3, #16
 80037d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037da:	e002      	b.n	80037e2 <UART_SetConfig+0x27e>
 80037dc:	2310      	movs	r3, #16
 80037de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a17      	ldr	r2, [pc, #92]	; (8003844 <UART_SetConfig+0x2e0>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	f040 80a8 	bne.w	800393e <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80037ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80037f2:	2b08      	cmp	r3, #8
 80037f4:	d834      	bhi.n	8003860 <UART_SetConfig+0x2fc>
 80037f6:	a201      	add	r2, pc, #4	; (adr r2, 80037fc <UART_SetConfig+0x298>)
 80037f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037fc:	08003821 	.word	0x08003821
 8003800:	08003861 	.word	0x08003861
 8003804:	08003829 	.word	0x08003829
 8003808:	08003861 	.word	0x08003861
 800380c:	0800382f 	.word	0x0800382f
 8003810:	08003861 	.word	0x08003861
 8003814:	08003861 	.word	0x08003861
 8003818:	08003861 	.word	0x08003861
 800381c:	08003837 	.word	0x08003837
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003820:	f7fe fc44 	bl	80020ac <HAL_RCC_GetPCLK1Freq>
 8003824:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003826:	e021      	b.n	800386c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003828:	4b0c      	ldr	r3, [pc, #48]	; (800385c <UART_SetConfig+0x2f8>)
 800382a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800382c:	e01e      	b.n	800386c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800382e:	f7fe fbcf 	bl	8001fd0 <HAL_RCC_GetSysClockFreq>
 8003832:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003834:	e01a      	b.n	800386c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003836:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800383a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800383c:	e016      	b.n	800386c <UART_SetConfig+0x308>
 800383e:	bf00      	nop
 8003840:	cfff69f3 	.word	0xcfff69f3
 8003844:	40008000 	.word	0x40008000
 8003848:	40013800 	.word	0x40013800
 800384c:	40021000 	.word	0x40021000
 8003850:	40004400 	.word	0x40004400
 8003854:	40004800 	.word	0x40004800
 8003858:	40004c00 	.word	0x40004c00
 800385c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003860:	2300      	movs	r3, #0
 8003862:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800386a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800386c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386e:	2b00      	cmp	r3, #0
 8003870:	f000 812a 	beq.w	8003ac8 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003878:	4a9e      	ldr	r2, [pc, #632]	; (8003af4 <UART_SetConfig+0x590>)
 800387a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800387e:	461a      	mov	r2, r3
 8003880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003882:	fbb3 f3f2 	udiv	r3, r3, r2
 8003886:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	685a      	ldr	r2, [r3, #4]
 800388c:	4613      	mov	r3, r2
 800388e:	005b      	lsls	r3, r3, #1
 8003890:	4413      	add	r3, r2
 8003892:	69ba      	ldr	r2, [r7, #24]
 8003894:	429a      	cmp	r2, r3
 8003896:	d305      	bcc.n	80038a4 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800389e:	69ba      	ldr	r2, [r7, #24]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d903      	bls.n	80038ac <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80038aa:	e10d      	b.n	8003ac8 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80038ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ae:	2200      	movs	r2, #0
 80038b0:	60bb      	str	r3, [r7, #8]
 80038b2:	60fa      	str	r2, [r7, #12]
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b8:	4a8e      	ldr	r2, [pc, #568]	; (8003af4 <UART_SetConfig+0x590>)
 80038ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80038be:	b29b      	uxth	r3, r3
 80038c0:	2200      	movs	r2, #0
 80038c2:	603b      	str	r3, [r7, #0]
 80038c4:	607a      	str	r2, [r7, #4]
 80038c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80038ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80038ce:	f7fc fcf7 	bl	80002c0 <__aeabi_uldivmod>
 80038d2:	4602      	mov	r2, r0
 80038d4:	460b      	mov	r3, r1
 80038d6:	4610      	mov	r0, r2
 80038d8:	4619      	mov	r1, r3
 80038da:	f04f 0200 	mov.w	r2, #0
 80038de:	f04f 0300 	mov.w	r3, #0
 80038e2:	020b      	lsls	r3, r1, #8
 80038e4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80038e8:	0202      	lsls	r2, r0, #8
 80038ea:	6979      	ldr	r1, [r7, #20]
 80038ec:	6849      	ldr	r1, [r1, #4]
 80038ee:	0849      	lsrs	r1, r1, #1
 80038f0:	2000      	movs	r0, #0
 80038f2:	460c      	mov	r4, r1
 80038f4:	4605      	mov	r5, r0
 80038f6:	eb12 0804 	adds.w	r8, r2, r4
 80038fa:	eb43 0905 	adc.w	r9, r3, r5
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	469a      	mov	sl, r3
 8003906:	4693      	mov	fp, r2
 8003908:	4652      	mov	r2, sl
 800390a:	465b      	mov	r3, fp
 800390c:	4640      	mov	r0, r8
 800390e:	4649      	mov	r1, r9
 8003910:	f7fc fcd6 	bl	80002c0 <__aeabi_uldivmod>
 8003914:	4602      	mov	r2, r0
 8003916:	460b      	mov	r3, r1
 8003918:	4613      	mov	r3, r2
 800391a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800391c:	6a3b      	ldr	r3, [r7, #32]
 800391e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003922:	d308      	bcc.n	8003936 <UART_SetConfig+0x3d2>
 8003924:	6a3b      	ldr	r3, [r7, #32]
 8003926:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800392a:	d204      	bcs.n	8003936 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	6a3a      	ldr	r2, [r7, #32]
 8003932:	60da      	str	r2, [r3, #12]
 8003934:	e0c8      	b.n	8003ac8 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800393c:	e0c4      	b.n	8003ac8 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	69db      	ldr	r3, [r3, #28]
 8003942:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003946:	d167      	bne.n	8003a18 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8003948:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800394c:	2b08      	cmp	r3, #8
 800394e:	d828      	bhi.n	80039a2 <UART_SetConfig+0x43e>
 8003950:	a201      	add	r2, pc, #4	; (adr r2, 8003958 <UART_SetConfig+0x3f4>)
 8003952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003956:	bf00      	nop
 8003958:	0800397d 	.word	0x0800397d
 800395c:	08003985 	.word	0x08003985
 8003960:	0800398d 	.word	0x0800398d
 8003964:	080039a3 	.word	0x080039a3
 8003968:	08003993 	.word	0x08003993
 800396c:	080039a3 	.word	0x080039a3
 8003970:	080039a3 	.word	0x080039a3
 8003974:	080039a3 	.word	0x080039a3
 8003978:	0800399b 	.word	0x0800399b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800397c:	f7fe fb96 	bl	80020ac <HAL_RCC_GetPCLK1Freq>
 8003980:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003982:	e014      	b.n	80039ae <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003984:	f7fe fba8 	bl	80020d8 <HAL_RCC_GetPCLK2Freq>
 8003988:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800398a:	e010      	b.n	80039ae <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800398c:	4b5a      	ldr	r3, [pc, #360]	; (8003af8 <UART_SetConfig+0x594>)
 800398e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003990:	e00d      	b.n	80039ae <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003992:	f7fe fb1d 	bl	8001fd0 <HAL_RCC_GetSysClockFreq>
 8003996:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003998:	e009      	b.n	80039ae <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800399a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800399e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80039a0:	e005      	b.n	80039ae <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80039a2:	2300      	movs	r3, #0
 80039a4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80039ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80039ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	f000 8089 	beq.w	8003ac8 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ba:	4a4e      	ldr	r2, [pc, #312]	; (8003af4 <UART_SetConfig+0x590>)
 80039bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80039c0:	461a      	mov	r2, r3
 80039c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80039c8:	005a      	lsls	r2, r3, #1
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	085b      	lsrs	r3, r3, #1
 80039d0:	441a      	add	r2, r3
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80039da:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039dc:	6a3b      	ldr	r3, [r7, #32]
 80039de:	2b0f      	cmp	r3, #15
 80039e0:	d916      	bls.n	8003a10 <UART_SetConfig+0x4ac>
 80039e2:	6a3b      	ldr	r3, [r7, #32]
 80039e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039e8:	d212      	bcs.n	8003a10 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80039ea:	6a3b      	ldr	r3, [r7, #32]
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	f023 030f 	bic.w	r3, r3, #15
 80039f2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80039f4:	6a3b      	ldr	r3, [r7, #32]
 80039f6:	085b      	lsrs	r3, r3, #1
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	f003 0307 	and.w	r3, r3, #7
 80039fe:	b29a      	uxth	r2, r3
 8003a00:	8bfb      	ldrh	r3, [r7, #30]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	8bfa      	ldrh	r2, [r7, #30]
 8003a0c:	60da      	str	r2, [r3, #12]
 8003a0e:	e05b      	b.n	8003ac8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003a16:	e057      	b.n	8003ac8 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a18:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003a1c:	2b08      	cmp	r3, #8
 8003a1e:	d828      	bhi.n	8003a72 <UART_SetConfig+0x50e>
 8003a20:	a201      	add	r2, pc, #4	; (adr r2, 8003a28 <UART_SetConfig+0x4c4>)
 8003a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a26:	bf00      	nop
 8003a28:	08003a4d 	.word	0x08003a4d
 8003a2c:	08003a55 	.word	0x08003a55
 8003a30:	08003a5d 	.word	0x08003a5d
 8003a34:	08003a73 	.word	0x08003a73
 8003a38:	08003a63 	.word	0x08003a63
 8003a3c:	08003a73 	.word	0x08003a73
 8003a40:	08003a73 	.word	0x08003a73
 8003a44:	08003a73 	.word	0x08003a73
 8003a48:	08003a6b 	.word	0x08003a6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a4c:	f7fe fb2e 	bl	80020ac <HAL_RCC_GetPCLK1Freq>
 8003a50:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003a52:	e014      	b.n	8003a7e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a54:	f7fe fb40 	bl	80020d8 <HAL_RCC_GetPCLK2Freq>
 8003a58:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003a5a:	e010      	b.n	8003a7e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a5c:	4b26      	ldr	r3, [pc, #152]	; (8003af8 <UART_SetConfig+0x594>)
 8003a5e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003a60:	e00d      	b.n	8003a7e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a62:	f7fe fab5 	bl	8001fd0 <HAL_RCC_GetSysClockFreq>
 8003a66:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003a68:	e009      	b.n	8003a7e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a6e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003a70:	e005      	b.n	8003a7e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8003a72:	2300      	movs	r3, #0
 8003a74:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003a7c:	bf00      	nop
    }

    if (pclk != 0U)
 8003a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d021      	beq.n	8003ac8 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a88:	4a1a      	ldr	r2, [pc, #104]	; (8003af4 <UART_SetConfig+0x590>)
 8003a8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a8e:	461a      	mov	r2, r3
 8003a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a92:	fbb3 f2f2 	udiv	r2, r3, r2
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	085b      	lsrs	r3, r3, #1
 8003a9c:	441a      	add	r2, r3
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003aa8:	6a3b      	ldr	r3, [r7, #32]
 8003aaa:	2b0f      	cmp	r3, #15
 8003aac:	d909      	bls.n	8003ac2 <UART_SetConfig+0x55e>
 8003aae:	6a3b      	ldr	r3, [r7, #32]
 8003ab0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ab4:	d205      	bcs.n	8003ac2 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003ab6:	6a3b      	ldr	r3, [r7, #32]
 8003ab8:	b29a      	uxth	r2, r3
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	60da      	str	r2, [r3, #12]
 8003ac0:	e002      	b.n	8003ac8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	2200      	movs	r2, #0
 8003adc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003ae4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3730      	adds	r7, #48	; 0x30
 8003aec:	46bd      	mov	sp, r7
 8003aee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003af2:	bf00      	nop
 8003af4:	08008bc8 	.word	0x08008bc8
 8003af8:	00f42400 	.word	0x00f42400

08003afc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b08:	f003 0308 	and.w	r3, r3, #8
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d00a      	beq.n	8003b26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	430a      	orrs	r2, r1
 8003b24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d00a      	beq.n	8003b48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	430a      	orrs	r2, r1
 8003b46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b4c:	f003 0302 	and.w	r3, r3, #2
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d00a      	beq.n	8003b6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	430a      	orrs	r2, r1
 8003b68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b6e:	f003 0304 	and.w	r3, r3, #4
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d00a      	beq.n	8003b8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	430a      	orrs	r2, r1
 8003b8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b90:	f003 0310 	and.w	r3, r3, #16
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d00a      	beq.n	8003bae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	430a      	orrs	r2, r1
 8003bac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb2:	f003 0320 	and.w	r3, r3, #32
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d00a      	beq.n	8003bd0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	430a      	orrs	r2, r1
 8003bce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d01a      	beq.n	8003c12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	430a      	orrs	r2, r1
 8003bf0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bfa:	d10a      	bne.n	8003c12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	430a      	orrs	r2, r1
 8003c10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d00a      	beq.n	8003c34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	430a      	orrs	r2, r1
 8003c32:	605a      	str	r2, [r3, #4]
  }
}
 8003c34:	bf00      	nop
 8003c36:	370c      	adds	r7, #12
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr

08003c40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b098      	sub	sp, #96	; 0x60
 8003c44:	af02      	add	r7, sp, #8
 8003c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c50:	f7fd f854 	bl	8000cfc <HAL_GetTick>
 8003c54:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0308 	and.w	r3, r3, #8
 8003c60:	2b08      	cmp	r3, #8
 8003c62:	d12f      	bne.n	8003cc4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c68:	9300      	str	r3, [sp, #0]
 8003c6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f000 f88e 	bl	8003d94 <UART_WaitOnFlagUntilTimeout>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d022      	beq.n	8003cc4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c86:	e853 3f00 	ldrex	r3, [r3]
 8003c8a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c92:	653b      	str	r3, [r7, #80]	; 0x50
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	461a      	mov	r2, r3
 8003c9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c9c:	647b      	str	r3, [r7, #68]	; 0x44
 8003c9e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003ca2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ca4:	e841 2300 	strex	r3, r2, [r1]
 8003ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003caa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d1e6      	bne.n	8003c7e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2220      	movs	r2, #32
 8003cb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	e063      	b.n	8003d8c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0304 	and.w	r3, r3, #4
 8003cce:	2b04      	cmp	r3, #4
 8003cd0:	d149      	bne.n	8003d66 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cd2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003cd6:	9300      	str	r3, [sp, #0]
 8003cd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f000 f857 	bl	8003d94 <UART_WaitOnFlagUntilTimeout>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d03c      	beq.n	8003d66 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf4:	e853 3f00 	ldrex	r3, [r3]
 8003cf8:	623b      	str	r3, [r7, #32]
   return(result);
 8003cfa:	6a3b      	ldr	r3, [r7, #32]
 8003cfc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d00:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	461a      	mov	r2, r3
 8003d08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d0a:	633b      	str	r3, [r7, #48]	; 0x30
 8003d0c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d12:	e841 2300 	strex	r3, r2, [r1]
 8003d16:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1e6      	bne.n	8003cec <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	3308      	adds	r3, #8
 8003d24:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	e853 3f00 	ldrex	r3, [r3]
 8003d2c:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	f023 0301 	bic.w	r3, r3, #1
 8003d34:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	3308      	adds	r3, #8
 8003d3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d3e:	61fa      	str	r2, [r7, #28]
 8003d40:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d42:	69b9      	ldr	r1, [r7, #24]
 8003d44:	69fa      	ldr	r2, [r7, #28]
 8003d46:	e841 2300 	strex	r3, r2, [r1]
 8003d4a:	617b      	str	r3, [r7, #20]
   return(result);
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d1e5      	bne.n	8003d1e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2220      	movs	r2, #32
 8003d56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e012      	b.n	8003d8c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2220      	movs	r2, #32
 8003d6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2220      	movs	r2, #32
 8003d72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003d8a:	2300      	movs	r3, #0
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3758      	adds	r7, #88	; 0x58
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	60b9      	str	r1, [r7, #8]
 8003d9e:	603b      	str	r3, [r7, #0]
 8003da0:	4613      	mov	r3, r2
 8003da2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003da4:	e04f      	b.n	8003e46 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003da6:	69bb      	ldr	r3, [r7, #24]
 8003da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dac:	d04b      	beq.n	8003e46 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dae:	f7fc ffa5 	bl	8000cfc <HAL_GetTick>
 8003db2:	4602      	mov	r2, r0
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	69ba      	ldr	r2, [r7, #24]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d302      	bcc.n	8003dc4 <UART_WaitOnFlagUntilTimeout+0x30>
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d101      	bne.n	8003dc8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e04e      	b.n	8003e66 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0304 	and.w	r3, r3, #4
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d037      	beq.n	8003e46 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	2b80      	cmp	r3, #128	; 0x80
 8003dda:	d034      	beq.n	8003e46 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	2b40      	cmp	r3, #64	; 0x40
 8003de0:	d031      	beq.n	8003e46 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	69db      	ldr	r3, [r3, #28]
 8003de8:	f003 0308 	and.w	r3, r3, #8
 8003dec:	2b08      	cmp	r3, #8
 8003dee:	d110      	bne.n	8003e12 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2208      	movs	r2, #8
 8003df6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003df8:	68f8      	ldr	r0, [r7, #12]
 8003dfa:	f000 f95b 	bl	80040b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2208      	movs	r2, #8
 8003e02:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e029      	b.n	8003e66 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	69db      	ldr	r3, [r3, #28]
 8003e18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e20:	d111      	bne.n	8003e46 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e2c:	68f8      	ldr	r0, [r7, #12]
 8003e2e:	f000 f941 	bl	80040b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2220      	movs	r2, #32
 8003e36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e00f      	b.n	8003e66 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	69da      	ldr	r2, [r3, #28]
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	4013      	ands	r3, r2
 8003e50:	68ba      	ldr	r2, [r7, #8]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	bf0c      	ite	eq
 8003e56:	2301      	moveq	r3, #1
 8003e58:	2300      	movne	r3, #0
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	79fb      	ldrb	r3, [r7, #7]
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d0a0      	beq.n	8003da6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e64:	2300      	movs	r3, #0
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3710      	adds	r7, #16
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
	...

08003e70 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b0a3      	sub	sp, #140	; 0x8c
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	68ba      	ldr	r2, [r7, #8]
 8003e82:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	88fa      	ldrh	r2, [r7, #6]
 8003e88:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	88fa      	ldrh	r2, [r7, #6]
 8003e90:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2200      	movs	r2, #0
 8003e98:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ea2:	d10e      	bne.n	8003ec2 <UART_Start_Receive_IT+0x52>
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	691b      	ldr	r3, [r3, #16]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d105      	bne.n	8003eb8 <UART_Start_Receive_IT+0x48>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003eb2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003eb6:	e02d      	b.n	8003f14 <UART_Start_Receive_IT+0xa4>
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	22ff      	movs	r2, #255	; 0xff
 8003ebc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003ec0:	e028      	b.n	8003f14 <UART_Start_Receive_IT+0xa4>
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d10d      	bne.n	8003ee6 <UART_Start_Receive_IT+0x76>
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d104      	bne.n	8003edc <UART_Start_Receive_IT+0x6c>
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	22ff      	movs	r2, #255	; 0xff
 8003ed6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003eda:	e01b      	b.n	8003f14 <UART_Start_Receive_IT+0xa4>
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	227f      	movs	r2, #127	; 0x7f
 8003ee0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003ee4:	e016      	b.n	8003f14 <UART_Start_Receive_IT+0xa4>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003eee:	d10d      	bne.n	8003f0c <UART_Start_Receive_IT+0x9c>
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	691b      	ldr	r3, [r3, #16]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d104      	bne.n	8003f02 <UART_Start_Receive_IT+0x92>
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	227f      	movs	r2, #127	; 0x7f
 8003efc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003f00:	e008      	b.n	8003f14 <UART_Start_Receive_IT+0xa4>
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	223f      	movs	r2, #63	; 0x3f
 8003f06:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003f0a:	e003      	b.n	8003f14 <UART_Start_Receive_IT+0xa4>
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2222      	movs	r2, #34	; 0x22
 8003f20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	3308      	adds	r3, #8
 8003f2a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f2e:	e853 3f00 	ldrex	r3, [r3]
 8003f32:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8003f34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f36:	f043 0301 	orr.w	r3, r3, #1
 8003f3a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	3308      	adds	r3, #8
 8003f44:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003f48:	673a      	str	r2, [r7, #112]	; 0x70
 8003f4a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f4c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8003f4e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003f50:	e841 2300 	strex	r3, r2, [r1]
 8003f54:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8003f56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d1e3      	bne.n	8003f24 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f64:	d14f      	bne.n	8004006 <UART_Start_Receive_IT+0x196>
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8003f6c:	88fa      	ldrh	r2, [r7, #6]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d349      	bcc.n	8004006 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f7a:	d107      	bne.n	8003f8c <UART_Start_Receive_IT+0x11c>
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	691b      	ldr	r3, [r3, #16]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d103      	bne.n	8003f8c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	4a47      	ldr	r2, [pc, #284]	; (80040a4 <UART_Start_Receive_IT+0x234>)
 8003f88:	675a      	str	r2, [r3, #116]	; 0x74
 8003f8a:	e002      	b.n	8003f92 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	4a46      	ldr	r2, [pc, #280]	; (80040a8 <UART_Start_Receive_IT+0x238>)
 8003f90:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	691b      	ldr	r3, [r3, #16]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d01a      	beq.n	8003fd0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fa2:	e853 3f00 	ldrex	r3, [r3]
 8003fa6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003fa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003faa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003fbc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003fbe:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003fc2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003fc4:	e841 2300 	strex	r3, r2, [r1]
 8003fc8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003fca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d1e4      	bne.n	8003f9a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	3308      	adds	r3, #8
 8003fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fda:	e853 3f00 	ldrex	r3, [r3]
 8003fde:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fe2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fe6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	3308      	adds	r3, #8
 8003fee:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003ff0:	64ba      	str	r2, [r7, #72]	; 0x48
 8003ff2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003ff6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ff8:	e841 2300 	strex	r3, r2, [r1]
 8003ffc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003ffe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004000:	2b00      	cmp	r3, #0
 8004002:	d1e5      	bne.n	8003fd0 <UART_Start_Receive_IT+0x160>
 8004004:	e046      	b.n	8004094 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800400e:	d107      	bne.n	8004020 <UART_Start_Receive_IT+0x1b0>
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d103      	bne.n	8004020 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	4a24      	ldr	r2, [pc, #144]	; (80040ac <UART_Start_Receive_IT+0x23c>)
 800401c:	675a      	str	r2, [r3, #116]	; 0x74
 800401e:	e002      	b.n	8004026 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	4a23      	ldr	r2, [pc, #140]	; (80040b0 <UART_Start_Receive_IT+0x240>)
 8004024:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	691b      	ldr	r3, [r3, #16]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d019      	beq.n	8004062 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004036:	e853 3f00 	ldrex	r3, [r3]
 800403a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800403c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004042:	677b      	str	r3, [r7, #116]	; 0x74
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	461a      	mov	r2, r3
 800404a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800404c:	637b      	str	r3, [r7, #52]	; 0x34
 800404e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004050:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004052:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004054:	e841 2300 	strex	r3, r2, [r1]
 8004058:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800405a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800405c:	2b00      	cmp	r3, #0
 800405e:	d1e6      	bne.n	800402e <UART_Start_Receive_IT+0x1be>
 8004060:	e018      	b.n	8004094 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	e853 3f00 	ldrex	r3, [r3]
 800406e:	613b      	str	r3, [r7, #16]
   return(result);
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	f043 0320 	orr.w	r3, r3, #32
 8004076:	67bb      	str	r3, [r7, #120]	; 0x78
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	461a      	mov	r2, r3
 800407e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004080:	623b      	str	r3, [r7, #32]
 8004082:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004084:	69f9      	ldr	r1, [r7, #28]
 8004086:	6a3a      	ldr	r2, [r7, #32]
 8004088:	e841 2300 	strex	r3, r2, [r1]
 800408c:	61bb      	str	r3, [r7, #24]
   return(result);
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d1e6      	bne.n	8004062 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	378c      	adds	r7, #140	; 0x8c
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	080048d5 	.word	0x080048d5
 80040a8:	08004575 	.word	0x08004575
 80040ac:	080043bd 	.word	0x080043bd
 80040b0:	08004205 	.word	0x08004205

080040b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b095      	sub	sp, #84	; 0x54
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040c4:	e853 3f00 	ldrex	r3, [r3]
 80040c8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80040ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80040d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	461a      	mov	r2, r3
 80040d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040da:	643b      	str	r3, [r7, #64]	; 0x40
 80040dc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040de:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80040e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80040e2:	e841 2300 	strex	r3, r2, [r1]
 80040e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80040e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d1e6      	bne.n	80040bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	3308      	adds	r3, #8
 80040f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f6:	6a3b      	ldr	r3, [r7, #32]
 80040f8:	e853 3f00 	ldrex	r3, [r3]
 80040fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004104:	f023 0301 	bic.w	r3, r3, #1
 8004108:	64bb      	str	r3, [r7, #72]	; 0x48
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	3308      	adds	r3, #8
 8004110:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004112:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004114:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004116:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004118:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800411a:	e841 2300 	strex	r3, r2, [r1]
 800411e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004122:	2b00      	cmp	r3, #0
 8004124:	d1e3      	bne.n	80040ee <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800412a:	2b01      	cmp	r3, #1
 800412c:	d118      	bne.n	8004160 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	e853 3f00 	ldrex	r3, [r3]
 800413a:	60bb      	str	r3, [r7, #8]
   return(result);
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	f023 0310 	bic.w	r3, r3, #16
 8004142:	647b      	str	r3, [r7, #68]	; 0x44
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	461a      	mov	r2, r3
 800414a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800414c:	61bb      	str	r3, [r7, #24]
 800414e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004150:	6979      	ldr	r1, [r7, #20]
 8004152:	69ba      	ldr	r2, [r7, #24]
 8004154:	e841 2300 	strex	r3, r2, [r1]
 8004158:	613b      	str	r3, [r7, #16]
   return(result);
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d1e6      	bne.n	800412e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2220      	movs	r2, #32
 8004164:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004174:	bf00      	nop
 8004176:	3754      	adds	r7, #84	; 0x54
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800418c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2200      	movs	r2, #0
 8004192:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2200      	movs	r2, #0
 800419a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800419e:	68f8      	ldr	r0, [r7, #12]
 80041a0:	f7ff f9ca 	bl	8003538 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041a4:	bf00      	nop
 80041a6:	3710      	adds	r7, #16
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}

080041ac <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b088      	sub	sp, #32
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	e853 3f00 	ldrex	r3, [r3]
 80041c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041c8:	61fb      	str	r3, [r7, #28]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	461a      	mov	r2, r3
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	61bb      	str	r3, [r7, #24]
 80041d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d6:	6979      	ldr	r1, [r7, #20]
 80041d8:	69ba      	ldr	r2, [r7, #24]
 80041da:	e841 2300 	strex	r3, r2, [r1]
 80041de:	613b      	str	r3, [r7, #16]
   return(result);
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d1e6      	bne.n	80041b4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2220      	movs	r2, #32
 80041ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f7fc fb2b 	bl	8000850 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041fa:	bf00      	nop
 80041fc:	3720      	adds	r7, #32
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
	...

08004204 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b09c      	sub	sp, #112	; 0x70
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004212:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800421c:	2b22      	cmp	r3, #34	; 0x22
 800421e:	f040 80be 	bne.w	800439e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004228:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800422c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004230:	b2d9      	uxtb	r1, r3
 8004232:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004236:	b2da      	uxtb	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800423c:	400a      	ands	r2, r1
 800423e:	b2d2      	uxtb	r2, r2
 8004240:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004246:	1c5a      	adds	r2, r3, #1
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004252:	b29b      	uxth	r3, r3
 8004254:	3b01      	subs	r3, #1
 8004256:	b29a      	uxth	r2, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004264:	b29b      	uxth	r3, r3
 8004266:	2b00      	cmp	r3, #0
 8004268:	f040 80a1 	bne.w	80043ae <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004272:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004274:	e853 3f00 	ldrex	r3, [r3]
 8004278:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800427a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800427c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004280:	66bb      	str	r3, [r7, #104]	; 0x68
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	461a      	mov	r2, r3
 8004288:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800428a:	65bb      	str	r3, [r7, #88]	; 0x58
 800428c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800428e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004290:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004292:	e841 2300 	strex	r3, r2, [r1]
 8004296:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004298:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800429a:	2b00      	cmp	r3, #0
 800429c:	d1e6      	bne.n	800426c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	3308      	adds	r3, #8
 80042a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042a8:	e853 3f00 	ldrex	r3, [r3]
 80042ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80042ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042b0:	f023 0301 	bic.w	r3, r3, #1
 80042b4:	667b      	str	r3, [r7, #100]	; 0x64
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	3308      	adds	r3, #8
 80042bc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80042be:	647a      	str	r2, [r7, #68]	; 0x44
 80042c0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80042c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042c6:	e841 2300 	strex	r3, r2, [r1]
 80042ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80042cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d1e5      	bne.n	800429e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2220      	movs	r2, #32
 80042d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a33      	ldr	r2, [pc, #204]	; (80043b8 <UART_RxISR_8BIT+0x1b4>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d01f      	beq.n	8004330 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d018      	beq.n	8004330 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004306:	e853 3f00 	ldrex	r3, [r3]
 800430a:	623b      	str	r3, [r7, #32]
   return(result);
 800430c:	6a3b      	ldr	r3, [r7, #32]
 800430e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004312:	663b      	str	r3, [r7, #96]	; 0x60
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	461a      	mov	r2, r3
 800431a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800431c:	633b      	str	r3, [r7, #48]	; 0x30
 800431e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004320:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004322:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004324:	e841 2300 	strex	r3, r2, [r1]
 8004328:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800432a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800432c:	2b00      	cmp	r3, #0
 800432e:	d1e6      	bne.n	80042fe <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004334:	2b01      	cmp	r3, #1
 8004336:	d12e      	bne.n	8004396 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	e853 3f00 	ldrex	r3, [r3]
 800434a:	60fb      	str	r3, [r7, #12]
   return(result);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f023 0310 	bic.w	r3, r3, #16
 8004352:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	461a      	mov	r2, r3
 800435a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800435c:	61fb      	str	r3, [r7, #28]
 800435e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004360:	69b9      	ldr	r1, [r7, #24]
 8004362:	69fa      	ldr	r2, [r7, #28]
 8004364:	e841 2300 	strex	r3, r2, [r1]
 8004368:	617b      	str	r3, [r7, #20]
   return(result);
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d1e6      	bne.n	800433e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	69db      	ldr	r3, [r3, #28]
 8004376:	f003 0310 	and.w	r3, r3, #16
 800437a:	2b10      	cmp	r3, #16
 800437c:	d103      	bne.n	8004386 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	2210      	movs	r2, #16
 8004384:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800438c:	4619      	mov	r1, r3
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f7ff f8dc 	bl	800354c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004394:	e00b      	b.n	80043ae <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f7fc fa4a 	bl	8000830 <HAL_UART_RxCpltCallback>
}
 800439c:	e007      	b.n	80043ae <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	699a      	ldr	r2, [r3, #24]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f042 0208 	orr.w	r2, r2, #8
 80043ac:	619a      	str	r2, [r3, #24]
}
 80043ae:	bf00      	nop
 80043b0:	3770      	adds	r7, #112	; 0x70
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	40008000 	.word	0x40008000

080043bc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b09c      	sub	sp, #112	; 0x70
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80043ca:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043d4:	2b22      	cmp	r3, #34	; 0x22
 80043d6:	f040 80be 	bne.w	8004556 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043e8:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80043ea:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80043ee:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80043f2:	4013      	ands	r3, r2
 80043f4:	b29a      	uxth	r2, r3
 80043f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80043f8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043fe:	1c9a      	adds	r2, r3, #2
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800440a:	b29b      	uxth	r3, r3
 800440c:	3b01      	subs	r3, #1
 800440e:	b29a      	uxth	r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800441c:	b29b      	uxth	r3, r3
 800441e:	2b00      	cmp	r3, #0
 8004420:	f040 80a1 	bne.w	8004566 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800442a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800442c:	e853 3f00 	ldrex	r3, [r3]
 8004430:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004432:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004434:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004438:	667b      	str	r3, [r7, #100]	; 0x64
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	461a      	mov	r2, r3
 8004440:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004442:	657b      	str	r3, [r7, #84]	; 0x54
 8004444:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004446:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004448:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800444a:	e841 2300 	strex	r3, r2, [r1]
 800444e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004450:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1e6      	bne.n	8004424 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	3308      	adds	r3, #8
 800445c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800445e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004460:	e853 3f00 	ldrex	r3, [r3]
 8004464:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004468:	f023 0301 	bic.w	r3, r3, #1
 800446c:	663b      	str	r3, [r7, #96]	; 0x60
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	3308      	adds	r3, #8
 8004474:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004476:	643a      	str	r2, [r7, #64]	; 0x40
 8004478:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800447a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800447c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800447e:	e841 2300 	strex	r3, r2, [r1]
 8004482:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004486:	2b00      	cmp	r3, #0
 8004488:	d1e5      	bne.n	8004456 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2220      	movs	r2, #32
 800448e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a33      	ldr	r2, [pc, #204]	; (8004570 <UART_RxISR_16BIT+0x1b4>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d01f      	beq.n	80044e8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d018      	beq.n	80044e8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044bc:	6a3b      	ldr	r3, [r7, #32]
 80044be:	e853 3f00 	ldrex	r3, [r3]
 80044c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80044ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	461a      	mov	r2, r3
 80044d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044d6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044dc:	e841 2300 	strex	r3, r2, [r1]
 80044e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d1e6      	bne.n	80044b6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d12e      	bne.n	800454e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	e853 3f00 	ldrex	r3, [r3]
 8004502:	60bb      	str	r3, [r7, #8]
   return(result);
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	f023 0310 	bic.w	r3, r3, #16
 800450a:	65bb      	str	r3, [r7, #88]	; 0x58
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	461a      	mov	r2, r3
 8004512:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004514:	61bb      	str	r3, [r7, #24]
 8004516:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004518:	6979      	ldr	r1, [r7, #20]
 800451a:	69ba      	ldr	r2, [r7, #24]
 800451c:	e841 2300 	strex	r3, r2, [r1]
 8004520:	613b      	str	r3, [r7, #16]
   return(result);
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d1e6      	bne.n	80044f6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	69db      	ldr	r3, [r3, #28]
 800452e:	f003 0310 	and.w	r3, r3, #16
 8004532:	2b10      	cmp	r3, #16
 8004534:	d103      	bne.n	800453e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2210      	movs	r2, #16
 800453c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004544:	4619      	mov	r1, r3
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f7ff f800 	bl	800354c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800454c:	e00b      	b.n	8004566 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f7fc f96e 	bl	8000830 <HAL_UART_RxCpltCallback>
}
 8004554:	e007      	b.n	8004566 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	699a      	ldr	r2, [r3, #24]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f042 0208 	orr.w	r2, r2, #8
 8004564:	619a      	str	r2, [r3, #24]
}
 8004566:	bf00      	nop
 8004568:	3770      	adds	r7, #112	; 0x70
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	40008000 	.word	0x40008000

08004574 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b0ac      	sub	sp, #176	; 0xb0
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004582:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	69db      	ldr	r3, [r3, #28]
 800458c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045aa:	2b22      	cmp	r3, #34	; 0x22
 80045ac:	f040 8182 	bne.w	80048b4 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80045b6:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80045ba:	e125      	b.n	8004808 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c2:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80045c6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80045ca:	b2d9      	uxtb	r1, r3
 80045cc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80045d0:	b2da      	uxtb	r2, r3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045d6:	400a      	ands	r2, r1
 80045d8:	b2d2      	uxtb	r2, r2
 80045da:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045e0:	1c5a      	adds	r2, r3, #1
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	3b01      	subs	r3, #1
 80045f0:	b29a      	uxth	r2, r3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	69db      	ldr	r3, [r3, #28]
 80045fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004602:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004606:	f003 0307 	and.w	r3, r3, #7
 800460a:	2b00      	cmp	r3, #0
 800460c:	d053      	beq.n	80046b6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800460e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004612:	f003 0301 	and.w	r3, r3, #1
 8004616:	2b00      	cmp	r3, #0
 8004618:	d011      	beq.n	800463e <UART_RxISR_8BIT_FIFOEN+0xca>
 800461a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800461e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00b      	beq.n	800463e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2201      	movs	r2, #1
 800462c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004634:	f043 0201 	orr.w	r2, r3, #1
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800463e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	2b00      	cmp	r3, #0
 8004648:	d011      	beq.n	800466e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800464a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800464e:	f003 0301 	and.w	r3, r3, #1
 8004652:	2b00      	cmp	r3, #0
 8004654:	d00b      	beq.n	800466e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	2202      	movs	r2, #2
 800465c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004664:	f043 0204 	orr.w	r2, r3, #4
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800466e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004672:	f003 0304 	and.w	r3, r3, #4
 8004676:	2b00      	cmp	r3, #0
 8004678:	d011      	beq.n	800469e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800467a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800467e:	f003 0301 	and.w	r3, r3, #1
 8004682:	2b00      	cmp	r3, #0
 8004684:	d00b      	beq.n	800469e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	2204      	movs	r2, #4
 800468c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004694:	f043 0202 	orr.w	r2, r3, #2
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d006      	beq.n	80046b6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f7fe ff45 	bl	8003538 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80046bc:	b29b      	uxth	r3, r3
 80046be:	2b00      	cmp	r3, #0
 80046c0:	f040 80a2 	bne.w	8004808 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80046cc:	e853 3f00 	ldrex	r3, [r3]
 80046d0:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 80046d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	461a      	mov	r2, r3
 80046e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80046e6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80046e8:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ea:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80046ec:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80046ee:	e841 2300 	strex	r3, r2, [r1]
 80046f2:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 80046f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d1e4      	bne.n	80046c4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	3308      	adds	r3, #8
 8004700:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004702:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004704:	e853 3f00 	ldrex	r3, [r3]
 8004708:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800470a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800470c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004710:	f023 0301 	bic.w	r3, r3, #1
 8004714:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	3308      	adds	r3, #8
 800471e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004722:	66ba      	str	r2, [r7, #104]	; 0x68
 8004724:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004726:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8004728:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800472a:	e841 2300 	strex	r3, r2, [r1]
 800472e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8004730:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004732:	2b00      	cmp	r3, #0
 8004734:	d1e1      	bne.n	80046fa <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2220      	movs	r2, #32
 800473a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a5f      	ldr	r2, [pc, #380]	; (80048cc <UART_RxISR_8BIT_FIFOEN+0x358>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d021      	beq.n	8004798 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d01a      	beq.n	8004798 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004768:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800476a:	e853 3f00 	ldrex	r3, [r3]
 800476e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004770:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004772:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004776:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	461a      	mov	r2, r3
 8004780:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004784:	657b      	str	r3, [r7, #84]	; 0x54
 8004786:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004788:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800478a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800478c:	e841 2300 	strex	r3, r2, [r1]
 8004790:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004792:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004794:	2b00      	cmp	r3, #0
 8004796:	d1e4      	bne.n	8004762 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800479c:	2b01      	cmp	r3, #1
 800479e:	d130      	bne.n	8004802 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047ae:	e853 3f00 	ldrex	r3, [r3]
 80047b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80047b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b6:	f023 0310 	bic.w	r3, r3, #16
 80047ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	461a      	mov	r2, r3
 80047c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80047c8:	643b      	str	r3, [r7, #64]	; 0x40
 80047ca:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80047ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80047d0:	e841 2300 	strex	r3, r2, [r1]
 80047d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80047d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d1e4      	bne.n	80047a6 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	69db      	ldr	r3, [r3, #28]
 80047e2:	f003 0310 	and.w	r3, r3, #16
 80047e6:	2b10      	cmp	r3, #16
 80047e8:	d103      	bne.n	80047f2 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	2210      	movs	r2, #16
 80047f0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80047f8:	4619      	mov	r1, r3
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f7fe fea6 	bl	800354c <HAL_UARTEx_RxEventCallback>
 8004800:	e002      	b.n	8004808 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f7fc f814 	bl	8000830 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004808:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800480c:	2b00      	cmp	r3, #0
 800480e:	d006      	beq.n	800481e <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8004810:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004814:	f003 0320 	and.w	r3, r3, #32
 8004818:	2b00      	cmp	r3, #0
 800481a:	f47f aecf 	bne.w	80045bc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004824:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004828:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800482c:	2b00      	cmp	r3, #0
 800482e:	d049      	beq.n	80048c4 <UART_RxISR_8BIT_FIFOEN+0x350>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004836:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800483a:	429a      	cmp	r2, r3
 800483c:	d242      	bcs.n	80048c4 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	3308      	adds	r3, #8
 8004844:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004846:	6a3b      	ldr	r3, [r7, #32]
 8004848:	e853 3f00 	ldrex	r3, [r3]
 800484c:	61fb      	str	r3, [r7, #28]
   return(result);
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004854:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	3308      	adds	r3, #8
 800485e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004862:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004864:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004866:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004868:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800486a:	e841 2300 	strex	r3, r2, [r1]
 800486e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004872:	2b00      	cmp	r3, #0
 8004874:	d1e3      	bne.n	800483e <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a15      	ldr	r2, [pc, #84]	; (80048d0 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800487a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	e853 3f00 	ldrex	r3, [r3]
 8004888:	60bb      	str	r3, [r7, #8]
   return(result);
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	f043 0320 	orr.w	r3, r3, #32
 8004890:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	461a      	mov	r2, r3
 800489a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800489e:	61bb      	str	r3, [r7, #24]
 80048a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a2:	6979      	ldr	r1, [r7, #20]
 80048a4:	69ba      	ldr	r2, [r7, #24]
 80048a6:	e841 2300 	strex	r3, r2, [r1]
 80048aa:	613b      	str	r3, [r7, #16]
   return(result);
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d1e4      	bne.n	800487c <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80048b2:	e007      	b.n	80048c4 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	699a      	ldr	r2, [r3, #24]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f042 0208 	orr.w	r2, r2, #8
 80048c2:	619a      	str	r2, [r3, #24]
}
 80048c4:	bf00      	nop
 80048c6:	37b0      	adds	r7, #176	; 0xb0
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	40008000 	.word	0x40008000
 80048d0:	08004205 	.word	0x08004205

080048d4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b0ae      	sub	sp, #184	; 0xb8
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80048e2:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	69db      	ldr	r3, [r3, #28]
 80048ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800490a:	2b22      	cmp	r3, #34	; 0x22
 800490c:	f040 8186 	bne.w	8004c1c <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004916:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800491a:	e129      	b.n	8004b70 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004922:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800492a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800492e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8004932:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8004936:	4013      	ands	r3, r2
 8004938:	b29a      	uxth	r2, r3
 800493a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800493e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004944:	1c9a      	adds	r2, r3, #2
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004950:	b29b      	uxth	r3, r3
 8004952:	3b01      	subs	r3, #1
 8004954:	b29a      	uxth	r2, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	69db      	ldr	r3, [r3, #28]
 8004962:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004966:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800496a:	f003 0307 	and.w	r3, r3, #7
 800496e:	2b00      	cmp	r3, #0
 8004970:	d053      	beq.n	8004a1a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004972:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004976:	f003 0301 	and.w	r3, r3, #1
 800497a:	2b00      	cmp	r3, #0
 800497c:	d011      	beq.n	80049a2 <UART_RxISR_16BIT_FIFOEN+0xce>
 800497e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004986:	2b00      	cmp	r3, #0
 8004988:	d00b      	beq.n	80049a2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	2201      	movs	r2, #1
 8004990:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004998:	f043 0201 	orr.w	r2, r3, #1
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80049a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80049a6:	f003 0302 	and.w	r3, r3, #2
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d011      	beq.n	80049d2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80049ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80049b2:	f003 0301 	and.w	r3, r3, #1
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d00b      	beq.n	80049d2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2202      	movs	r2, #2
 80049c0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049c8:	f043 0204 	orr.w	r2, r3, #4
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80049d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80049d6:	f003 0304 	and.w	r3, r3, #4
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d011      	beq.n	8004a02 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80049de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80049e2:	f003 0301 	and.w	r3, r3, #1
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d00b      	beq.n	8004a02 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	2204      	movs	r2, #4
 80049f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049f8:	f043 0202 	orr.w	r2, r3, #2
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d006      	beq.n	8004a1a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f7fe fd93 	bl	8003538 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	f040 80a4 	bne.w	8004b70 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a30:	e853 3f00 	ldrex	r3, [r3]
 8004a34:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004a36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	461a      	mov	r2, r3
 8004a46:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004a4a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a4e:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a50:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004a52:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004a56:	e841 2300 	strex	r3, r2, [r1]
 8004a5a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004a5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d1e2      	bne.n	8004a28 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	3308      	adds	r3, #8
 8004a68:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a6c:	e853 3f00 	ldrex	r3, [r3]
 8004a70:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004a72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a78:	f023 0301 	bic.w	r3, r3, #1
 8004a7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	3308      	adds	r3, #8
 8004a86:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8004a8a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004a8c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a8e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004a90:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004a92:	e841 2300 	strex	r3, r2, [r1]
 8004a96:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004a98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d1e1      	bne.n	8004a62 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2220      	movs	r2, #32
 8004aa2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a5f      	ldr	r2, [pc, #380]	; (8004c34 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d021      	beq.n	8004b00 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d01a      	beq.n	8004b00 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ad2:	e853 3f00 	ldrex	r3, [r3]
 8004ad6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004ad8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ada:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004ade:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004aec:	65bb      	str	r3, [r7, #88]	; 0x58
 8004aee:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004af2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004af4:	e841 2300 	strex	r3, r2, [r1]
 8004af8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004afa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d1e4      	bne.n	8004aca <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d130      	bne.n	8004b6a <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b16:	e853 3f00 	ldrex	r3, [r3]
 8004b1a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b1e:	f023 0310 	bic.w	r3, r3, #16
 8004b22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004b30:	647b      	str	r3, [r7, #68]	; 0x44
 8004b32:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b34:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004b36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b38:	e841 2300 	strex	r3, r2, [r1]
 8004b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d1e4      	bne.n	8004b0e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	69db      	ldr	r3, [r3, #28]
 8004b4a:	f003 0310 	and.w	r3, r3, #16
 8004b4e:	2b10      	cmp	r3, #16
 8004b50:	d103      	bne.n	8004b5a <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	2210      	movs	r2, #16
 8004b58:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004b60:	4619      	mov	r1, r3
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f7fe fcf2 	bl	800354c <HAL_UARTEx_RxEventCallback>
 8004b68:	e002      	b.n	8004b70 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f7fb fe60 	bl	8000830 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004b70:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d006      	beq.n	8004b86 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8004b78:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004b7c:	f003 0320 	and.w	r3, r3, #32
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	f47f aecb 	bne.w	800491c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004b8c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004b90:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d049      	beq.n	8004c2c <UART_RxISR_16BIT_FIFOEN+0x358>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004b9e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d242      	bcs.n	8004c2c <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	3308      	adds	r3, #8
 8004bac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb0:	e853 3f00 	ldrex	r3, [r3]
 8004bb4:	623b      	str	r3, [r7, #32]
   return(result);
 8004bb6:	6a3b      	ldr	r3, [r7, #32]
 8004bb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bbc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	3308      	adds	r3, #8
 8004bc6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004bca:	633a      	str	r2, [r7, #48]	; 0x30
 8004bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004bd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bd2:	e841 2300 	strex	r3, r2, [r1]
 8004bd6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d1e3      	bne.n	8004ba6 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4a15      	ldr	r2, [pc, #84]	; (8004c38 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8004be2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	e853 3f00 	ldrex	r3, [r3]
 8004bf0:	60fb      	str	r3, [r7, #12]
   return(result);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f043 0320 	orr.w	r3, r3, #32
 8004bf8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	461a      	mov	r2, r3
 8004c02:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c06:	61fb      	str	r3, [r7, #28]
 8004c08:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c0a:	69b9      	ldr	r1, [r7, #24]
 8004c0c:	69fa      	ldr	r2, [r7, #28]
 8004c0e:	e841 2300 	strex	r3, r2, [r1]
 8004c12:	617b      	str	r3, [r7, #20]
   return(result);
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d1e4      	bne.n	8004be4 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004c1a:	e007      	b.n	8004c2c <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	699a      	ldr	r2, [r3, #24]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f042 0208 	orr.w	r2, r2, #8
 8004c2a:	619a      	str	r2, [r3, #24]
}
 8004c2c:	bf00      	nop
 8004c2e:	37b8      	adds	r7, #184	; 0xb8
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	40008000 	.word	0x40008000
 8004c38:	080043bd 	.word	0x080043bd

08004c3c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b083      	sub	sp, #12
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004c44:	bf00      	nop
 8004c46:	370c      	adds	r7, #12
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr

08004c50 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004c58:	bf00      	nop
 8004c5a:	370c      	adds	r7, #12
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr

08004c64 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004c6c:	bf00      	nop
 8004c6e:	370c      	adds	r7, #12
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr

08004c78 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b085      	sub	sp, #20
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d101      	bne.n	8004c8e <HAL_UARTEx_DisableFifoMode+0x16>
 8004c8a:	2302      	movs	r3, #2
 8004c8c:	e027      	b.n	8004cde <HAL_UARTEx_DisableFifoMode+0x66>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2201      	movs	r2, #1
 8004c92:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2224      	movs	r2, #36	; 0x24
 8004c9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f022 0201 	bic.w	r2, r2, #1
 8004cb4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004cbc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	68fa      	ldr	r2, [r7, #12]
 8004cca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2220      	movs	r2, #32
 8004cd0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004cdc:	2300      	movs	r3, #0
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3714      	adds	r7, #20
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr

08004cea <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004cea:	b580      	push	{r7, lr}
 8004cec:	b084      	sub	sp, #16
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
 8004cf2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d101      	bne.n	8004d02 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004cfe:	2302      	movs	r3, #2
 8004d00:	e02d      	b.n	8004d5e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2201      	movs	r2, #1
 8004d06:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2224      	movs	r2, #36	; 0x24
 8004d0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f022 0201 	bic.w	r2, r2, #1
 8004d28:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	683a      	ldr	r2, [r7, #0]
 8004d3a:	430a      	orrs	r2, r1
 8004d3c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 f850 	bl	8004de4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	68fa      	ldr	r2, [r7, #12]
 8004d4a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2220      	movs	r2, #32
 8004d50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3710      	adds	r7, #16
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}

08004d66 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004d66:	b580      	push	{r7, lr}
 8004d68:	b084      	sub	sp, #16
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
 8004d6e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d101      	bne.n	8004d7e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004d7a:	2302      	movs	r3, #2
 8004d7c:	e02d      	b.n	8004dda <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2201      	movs	r2, #1
 8004d82:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2224      	movs	r2, #36	; 0x24
 8004d8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f022 0201 	bic.w	r2, r2, #1
 8004da4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	683a      	ldr	r2, [r7, #0]
 8004db6:	430a      	orrs	r2, r1
 8004db8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f000 f812 	bl	8004de4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	68fa      	ldr	r2, [r7, #12]
 8004dc6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2220      	movs	r2, #32
 8004dcc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3710      	adds	r7, #16
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
	...

08004de4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b085      	sub	sp, #20
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d108      	bne.n	8004e06 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004e04:	e031      	b.n	8004e6a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004e06:	2308      	movs	r3, #8
 8004e08:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004e0a:	2308      	movs	r3, #8
 8004e0c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	0e5b      	lsrs	r3, r3, #25
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	f003 0307 	and.w	r3, r3, #7
 8004e1c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	0f5b      	lsrs	r3, r3, #29
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	f003 0307 	and.w	r3, r3, #7
 8004e2c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004e2e:	7bbb      	ldrb	r3, [r7, #14]
 8004e30:	7b3a      	ldrb	r2, [r7, #12]
 8004e32:	4911      	ldr	r1, [pc, #68]	; (8004e78 <UARTEx_SetNbDataToProcess+0x94>)
 8004e34:	5c8a      	ldrb	r2, [r1, r2]
 8004e36:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004e3a:	7b3a      	ldrb	r2, [r7, #12]
 8004e3c:	490f      	ldr	r1, [pc, #60]	; (8004e7c <UARTEx_SetNbDataToProcess+0x98>)
 8004e3e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004e40:	fb93 f3f2 	sdiv	r3, r3, r2
 8004e44:	b29a      	uxth	r2, r3
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004e4c:	7bfb      	ldrb	r3, [r7, #15]
 8004e4e:	7b7a      	ldrb	r2, [r7, #13]
 8004e50:	4909      	ldr	r1, [pc, #36]	; (8004e78 <UARTEx_SetNbDataToProcess+0x94>)
 8004e52:	5c8a      	ldrb	r2, [r1, r2]
 8004e54:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004e58:	7b7a      	ldrb	r2, [r7, #13]
 8004e5a:	4908      	ldr	r1, [pc, #32]	; (8004e7c <UARTEx_SetNbDataToProcess+0x98>)
 8004e5c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004e5e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004e62:	b29a      	uxth	r2, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004e6a:	bf00      	nop
 8004e6c:	3714      	adds	r7, #20
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr
 8004e76:	bf00      	nop
 8004e78:	08008be0 	.word	0x08008be0
 8004e7c:	08008be8 	.word	0x08008be8

08004e80 <ai_log_err>:

static ai_buffer* ai_input;
static ai_buffer* ai_output;

static void ai_log_err(const ai_error err, const char *fct)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b082      	sub	sp, #8
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN log */
  if (fct)
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d009      	beq.n	8004ea4 <ai_log_err+0x24>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
        err.type, err.code);
 8004e90:	793b      	ldrb	r3, [r7, #4]
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8004e92:	461a      	mov	r2, r3
        err.type, err.code);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f3c3 2317 	ubfx	r3, r3, #8, #24
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8004e9a:	6839      	ldr	r1, [r7, #0]
 8004e9c:	4806      	ldr	r0, [pc, #24]	; (8004eb8 <ai_log_err+0x38>)
 8004e9e:	f002 fe59 	bl	8007b54 <iprintf>
 8004ea2:	e008      	b.n	8004eb6 <ai_log_err+0x36>
  else
    printf("TEMPLATE - Error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 8004ea4:	793b      	ldrb	r3, [r7, #4]
 8004ea6:	4619      	mov	r1, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8004eae:	461a      	mov	r2, r3
 8004eb0:	4802      	ldr	r0, [pc, #8]	; (8004ebc <ai_log_err+0x3c>)
 8004eb2:	f002 fe4f 	bl	8007b54 <iprintf>

  do {} while (1);
 8004eb6:	e7fe      	b.n	8004eb6 <ai_log_err+0x36>
 8004eb8:	08008aa0 	.word	0x08008aa0
 8004ebc:	08008ad4 	.word	0x08008ad4

08004ec0 <ai_boostrap>:
  /* USER CODE END log */
}

static int ai_boostrap(ai_handle *act_addr)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b086      	sub	sp, #24
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  ai_error err;

  /* Create and initialize an instance of the model */
  err = ai_network_create_and_init(&network, act_addr, NULL);
 8004ec8:	2200      	movs	r2, #0
 8004eca:	6879      	ldr	r1, [r7, #4]
 8004ecc:	4828      	ldr	r0, [pc, #160]	; (8004f70 <ai_boostrap+0xb0>)
 8004ece:	f000 fae7 	bl	80054a0 <ai_network_create_and_init>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	60fb      	str	r3, [r7, #12]
  if (err.type != AI_ERROR_NONE) {
 8004ed6:	7b3b      	ldrb	r3, [r7, #12]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d006      	beq.n	8004eea <ai_boostrap+0x2a>
    ai_log_err(err, "ai_network_create_and_init");
 8004edc:	4925      	ldr	r1, [pc, #148]	; (8004f74 <ai_boostrap+0xb4>)
 8004ede:	68f8      	ldr	r0, [r7, #12]
 8004ee0:	f7ff ffce 	bl	8004e80 <ai_log_err>
    return -1;
 8004ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8004ee8:	e03e      	b.n	8004f68 <ai_boostrap+0xa8>
  }

  ai_input = ai_network_inputs_get(network, NULL);
 8004eea:	4b21      	ldr	r3, [pc, #132]	; (8004f70 <ai_boostrap+0xb0>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	2100      	movs	r1, #0
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f000 fb49 	bl	8005588 <ai_network_inputs_get>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	4a1f      	ldr	r2, [pc, #124]	; (8004f78 <ai_boostrap+0xb8>)
 8004efa:	6013      	str	r3, [r2, #0]
  ai_output = ai_network_outputs_get(network, NULL);
 8004efc:	4b1c      	ldr	r3, [pc, #112]	; (8004f70 <ai_boostrap+0xb0>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2100      	movs	r1, #0
 8004f02:	4618      	mov	r0, r3
 8004f04:	f000 fb5a 	bl	80055bc <ai_network_outputs_get>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	4a1c      	ldr	r2, [pc, #112]	; (8004f7c <ai_boostrap+0xbc>)
 8004f0c:	6013      	str	r3, [r2, #0]

#if defined(AI_NETWORK_INPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-inputs" option is used, memory buffer can be
   *  used from the activations buffer. This is not mandatory.
   */
  for (int idx=0; idx < AI_NETWORK_IN_NUM; idx++) {
 8004f0e:	2300      	movs	r3, #0
 8004f10:	617b      	str	r3, [r7, #20]
 8004f12:	e00f      	b.n	8004f34 <ai_boostrap+0x74>
	data_ins[idx] = ai_input[idx].data;
 8004f14:	4b18      	ldr	r3, [pc, #96]	; (8004f78 <ai_boostrap+0xb8>)
 8004f16:	6819      	ldr	r1, [r3, #0]
 8004f18:	697a      	ldr	r2, [r7, #20]
 8004f1a:	4613      	mov	r3, r2
 8004f1c:	00db      	lsls	r3, r3, #3
 8004f1e:	1a9b      	subs	r3, r3, r2
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	440b      	add	r3, r1
 8004f24:	685a      	ldr	r2, [r3, #4]
 8004f26:	4916      	ldr	r1, [pc, #88]	; (8004f80 <ai_boostrap+0xc0>)
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_NETWORK_IN_NUM; idx++) {
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	3301      	adds	r3, #1
 8004f32:	617b      	str	r3, [r7, #20]
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	ddec      	ble.n	8004f14 <ai_boostrap+0x54>

#if defined(AI_NETWORK_OUTPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-outputs" option is used, memory buffer can be
   *  used from the activations buffer. This is no mandatory.
   */
  for (int idx=0; idx < AI_NETWORK_OUT_NUM; idx++) {
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	613b      	str	r3, [r7, #16]
 8004f3e:	e00f      	b.n	8004f60 <ai_boostrap+0xa0>
	data_outs[idx] = ai_output[idx].data;
 8004f40:	4b0e      	ldr	r3, [pc, #56]	; (8004f7c <ai_boostrap+0xbc>)
 8004f42:	6819      	ldr	r1, [r3, #0]
 8004f44:	693a      	ldr	r2, [r7, #16]
 8004f46:	4613      	mov	r3, r2
 8004f48:	00db      	lsls	r3, r3, #3
 8004f4a:	1a9b      	subs	r3, r3, r2
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	440b      	add	r3, r1
 8004f50:	685a      	ldr	r2, [r3, #4]
 8004f52:	490c      	ldr	r1, [pc, #48]	; (8004f84 <ai_boostrap+0xc4>)
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_NETWORK_OUT_NUM; idx++) {
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	3301      	adds	r3, #1
 8004f5e:	613b      	str	r3, [r7, #16]
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	2b02      	cmp	r3, #2
 8004f64:	ddec      	ble.n	8004f40 <ai_boostrap+0x80>
  for (int idx=0; idx < AI_NETWORK_OUT_NUM; idx++) {
	ai_output[idx].data = data_outs[idx];
  }
#endif

  return 0;
 8004f66:	2300      	movs	r3, #0
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3718      	adds	r7, #24
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	20001220 	.word	0x20001220
 8004f74:	08008b04 	.word	0x08008b04
 8004f78:	20001224 	.word	0x20001224
 8004f7c:	20001228 	.word	0x20001228
 8004f80:	20000e10 	.word	0x20000e10
 8004f84:	20000e14 	.word	0x20000e14

08004f88 <ai_run>:

static int ai_run(void)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b082      	sub	sp, #8
 8004f8c:	af00      	add	r7, sp, #0
  ai_i32 batch;

  batch = ai_network_run(network, ai_input, ai_output);
 8004f8e:	4b0f      	ldr	r3, [pc, #60]	; (8004fcc <ai_run+0x44>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a0f      	ldr	r2, [pc, #60]	; (8004fd0 <ai_run+0x48>)
 8004f94:	6811      	ldr	r1, [r2, #0]
 8004f96:	4a0f      	ldr	r2, [pc, #60]	; (8004fd4 <ai_run+0x4c>)
 8004f98:	6812      	ldr	r2, [r2, #0]
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f000 fb64 	bl	8005668 <ai_network_run>
 8004fa0:	6078      	str	r0, [r7, #4]
  if (batch != 1) {
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d00c      	beq.n	8004fc2 <ai_run+0x3a>
    ai_log_err(ai_network_get_error(network),
 8004fa8:	4b08      	ldr	r3, [pc, #32]	; (8004fcc <ai_run+0x44>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4618      	mov	r0, r3
 8004fae:	f000 fa55 	bl	800545c <ai_network_get_error>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	4908      	ldr	r1, [pc, #32]	; (8004fd8 <ai_run+0x50>)
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f7ff ff62 	bl	8004e80 <ai_log_err>
        "ai_network_run");
    return -1;
 8004fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8004fc0:	e000      	b.n	8004fc4 <ai_run+0x3c>
  }

  return 0;
 8004fc2:	2300      	movs	r3, #0
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3708      	adds	r7, #8
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	20001220 	.word	0x20001220
 8004fd0:	20001224 	.word	0x20001224
 8004fd4:	20001228 	.word	0x20001228
 8004fd8:	08008b20 	.word	0x08008b20

08004fdc <acquire_and_process_data>:
extern ai_float in_data1[AI_NETWORK_IN_1_SIZE];
extern ai_float out_data1[AI_NETWORK_OUT_1_SIZE];
extern ai_float out_data2[AI_NETWORK_OUT_2_SIZE];
extern ai_float out_data3[AI_NETWORK_OUT_3_SIZE];
int acquire_and_process_data(ai_i8* data[])
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b082      	sub	sp, #8
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
      data[idx] = ....
  }

  */
  // Cast data_ins[0] to a pointer of type ai_float*
  memcpy(data[0], in_data1, AI_NETWORK_IN_1_SIZE * sizeof(ai_float));
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	2208      	movs	r2, #8
 8004fea:	4904      	ldr	r1, [pc, #16]	; (8004ffc <acquire_and_process_data+0x20>)
 8004fec:	4618      	mov	r0, r3
 8004fee:	f002 ff82 	bl	8007ef6 <memcpy>


  return 0;
 8004ff2:	2300      	movs	r3, #0
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3708      	adds	r7, #8
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	20000d10 	.word	0x20000d10

08005000 <post_process>:


int post_process(ai_i8* data[])
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  {
      data[idx] = ....
  }

  */
  memcpy(out_data1, data[0], AI_NETWORK_OUT_1_SIZE * sizeof(ai_float));
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	461a      	mov	r2, r3
 8005010:	4b0b      	ldr	r3, [pc, #44]	; (8005040 <post_process+0x40>)
 8005012:	601a      	str	r2, [r3, #0]
  memcpy(out_data2, data[1], AI_NETWORK_OUT_2_SIZE * sizeof(ai_float));
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	3304      	adds	r3, #4
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	461a      	mov	r2, r3
 800501e:	4b09      	ldr	r3, [pc, #36]	; (8005044 <post_process+0x44>)
 8005020:	601a      	str	r2, [r3, #0]
  memcpy(out_data3, data[2], AI_NETWORK_OUT_3_SIZE * sizeof(ai_float));
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	3308      	adds	r3, #8
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	461a      	mov	r2, r3
 800502c:	4b06      	ldr	r3, [pc, #24]	; (8005048 <post_process+0x48>)
 800502e:	601a      	str	r2, [r3, #0]
  return 0;
 8005030:	2300      	movs	r3, #0
}
 8005032:	4618      	mov	r0, r3
 8005034:	370c      	adds	r7, #12
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr
 800503e:	bf00      	nop
 8005040:	20000d18 	.word	0x20000d18
 8005044:	20000d1c 	.word	0x20000d1c
 8005048:	20000d20 	.word	0x20000d20

0800504c <MX_X_CUBE_AI_Init>:
/* USER CODE END 2 */

/* Entry points --------------------------------------------------------------*/

void MX_X_CUBE_AI_Init(void)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 5 */
  printf("\r\nTEMPLATE - initialization\r\n");
 8005050:	4803      	ldr	r0, [pc, #12]	; (8005060 <MX_X_CUBE_AI_Init+0x14>)
 8005052:	f002 fde5 	bl	8007c20 <puts>

  ai_boostrap(data_activations0);
 8005056:	4803      	ldr	r0, [pc, #12]	; (8005064 <MX_X_CUBE_AI_Init+0x18>)
 8005058:	f7ff ff32 	bl	8004ec0 <ai_boostrap>
    /* USER CODE END 5 */
}
 800505c:	bf00      	nop
 800505e:	bd80      	pop	{r7, pc}
 8005060:	08008b30 	.word	0x08008b30
 8005064:	2000000c 	.word	0x2000000c

08005068 <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(void)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 6 */
  int res = -1;
 800506e:	f04f 33ff 	mov.w	r3, #4294967295
 8005072:	607b      	str	r3, [r7, #4]

  printf("TEMPLATE - run - main loop\r\n");
 8005074:	4814      	ldr	r0, [pc, #80]	; (80050c8 <MX_X_CUBE_AI_Process+0x60>)
 8005076:	f002 fdd3 	bl	8007c20 <puts>

  if (network) {
 800507a:	4b14      	ldr	r3, [pc, #80]	; (80050cc <MX_X_CUBE_AI_Process+0x64>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d010      	beq.n	80050a4 <MX_X_CUBE_AI_Process+0x3c>

//    do {
      /* 1 - acquire and pre-process input data */
      res = acquire_and_process_data(data_ins);
 8005082:	4813      	ldr	r0, [pc, #76]	; (80050d0 <MX_X_CUBE_AI_Process+0x68>)
 8005084:	f7ff ffaa 	bl	8004fdc <acquire_and_process_data>
 8005088:	6078      	str	r0, [r7, #4]
      /* 2 - process the data - call inference engine */
      if (res == 0)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d102      	bne.n	8005096 <MX_X_CUBE_AI_Process+0x2e>
        res = ai_run();
 8005090:	f7ff ff7a 	bl	8004f88 <ai_run>
 8005094:	6078      	str	r0, [r7, #4]
      /* 3- post-process the predictions */
      if (res == 0)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d103      	bne.n	80050a4 <MX_X_CUBE_AI_Process+0x3c>
        res = post_process(data_outs);
 800509c:	480d      	ldr	r0, [pc, #52]	; (80050d4 <MX_X_CUBE_AI_Process+0x6c>)
 800509e:	f7ff ffaf 	bl	8005000 <post_process>
 80050a2:	6078      	str	r0, [r7, #4]
//    } while (res==0);
  }

  if (res) {
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d00a      	beq.n	80050c0 <MX_X_CUBE_AI_Process+0x58>
    ai_error err = {AI_ERROR_INVALID_STATE, AI_ERROR_CODE_NETWORK};
 80050aa:	2311      	movs	r3, #17
 80050ac:	703b      	strb	r3, [r7, #0]
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	2210      	movs	r2, #16
 80050b2:	f362 231f 	bfi	r3, r2, #8, #24
 80050b6:	603b      	str	r3, [r7, #0]
    ai_log_err(err, "Process has FAILED");
 80050b8:	4907      	ldr	r1, [pc, #28]	; (80050d8 <MX_X_CUBE_AI_Process+0x70>)
 80050ba:	6838      	ldr	r0, [r7, #0]
 80050bc:	f7ff fee0 	bl	8004e80 <ai_log_err>
  }
    /* USER CODE END 6 */
}
 80050c0:	bf00      	nop
 80050c2:	3708      	adds	r7, #8
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	08008b50 	.word	0x08008b50
 80050cc:	20001220 	.word	0x20001220
 80050d0:	20000e10 	.word	0x20000e10
 80050d4:	20000e14 	.word	0x20000e14
 80050d8:	08008b6c 	.word	0x08008b6c

080050dc <network_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b082      	sub	sp, #8
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 80050e6:	683a      	ldr	r2, [r7, #0]
 80050e8:	2101      	movs	r1, #1
 80050ea:	484a      	ldr	r0, [pc, #296]	; (8005214 <network_configure_activations+0x138>)
 80050ec:	f000 fb9a 	bl	8005824 <ai_platform_get_activations_map>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	f000 8084 	beq.w	8005200 <network_configure_activations+0x124>
    /* Updating activations (byte) offsets */
    
    obs_output_array.data = AI_PTR(g_network_activations_map[0] + 504);
 80050f8:	4b46      	ldr	r3, [pc, #280]	; (8005214 <network_configure_activations+0x138>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005100:	4a45      	ldr	r2, [pc, #276]	; (8005218 <network_configure_activations+0x13c>)
 8005102:	6093      	str	r3, [r2, #8]
    obs_output_array.data_start = AI_PTR(g_network_activations_map[0] + 504);
 8005104:	4b43      	ldr	r3, [pc, #268]	; (8005214 <network_configure_activations+0x138>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800510c:	4a42      	ldr	r2, [pc, #264]	; (8005218 <network_configure_activations+0x13c>)
 800510e:	60d3      	str	r3, [r2, #12]
    
    _model_running_mean_std_Sub_output_0_output_array.data = AI_PTR(g_network_activations_map[0] + 504);
 8005110:	4b40      	ldr	r3, [pc, #256]	; (8005214 <network_configure_activations+0x138>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005118:	4a40      	ldr	r2, [pc, #256]	; (800521c <network_configure_activations+0x140>)
 800511a:	6093      	str	r3, [r2, #8]
    _model_running_mean_std_Sub_output_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 504);
 800511c:	4b3d      	ldr	r3, [pc, #244]	; (8005214 <network_configure_activations+0x138>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005124:	4a3d      	ldr	r2, [pc, #244]	; (800521c <network_configure_activations+0x140>)
 8005126:	60d3      	str	r3, [r2, #12]
    
    _model_running_mean_std_Div_output_0_output_array.data = AI_PTR(g_network_activations_map[0] + 504);
 8005128:	4b3a      	ldr	r3, [pc, #232]	; (8005214 <network_configure_activations+0x138>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005130:	4a3b      	ldr	r2, [pc, #236]	; (8005220 <network_configure_activations+0x144>)
 8005132:	6093      	str	r3, [r2, #8]
    _model_running_mean_std_Div_output_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 504);
 8005134:	4b37      	ldr	r3, [pc, #220]	; (8005214 <network_configure_activations+0x138>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800513c:	4a38      	ldr	r2, [pc, #224]	; (8005220 <network_configure_activations+0x144>)
 800513e:	60d3      	str	r3, [r2, #12]
    
    _model_running_mean_std_Clip_output_0_output_array.data = AI_PTR(g_network_activations_map[0] + 504);
 8005140:	4b34      	ldr	r3, [pc, #208]	; (8005214 <network_configure_activations+0x138>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005148:	4a36      	ldr	r2, [pc, #216]	; (8005224 <network_configure_activations+0x148>)
 800514a:	6093      	str	r3, [r2, #8]
    _model_running_mean_std_Clip_output_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 504);
 800514c:	4b31      	ldr	r3, [pc, #196]	; (8005214 <network_configure_activations+0x138>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005154:	4a33      	ldr	r2, [pc, #204]	; (8005224 <network_configure_activations+0x148>)
 8005156:	60d3      	str	r3, [r2, #12]
    
    _model_a2c_network_actor_mlp_0_Gemm_output_0_output_array.data = AI_PTR(g_network_activations_map[0] + 512);
 8005158:	4b2e      	ldr	r3, [pc, #184]	; (8005214 <network_configure_activations+0x138>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005160:	4a31      	ldr	r2, [pc, #196]	; (8005228 <network_configure_activations+0x14c>)
 8005162:	6093      	str	r3, [r2, #8]
    _model_a2c_network_actor_mlp_0_Gemm_output_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 512);
 8005164:	4b2b      	ldr	r3, [pc, #172]	; (8005214 <network_configure_activations+0x138>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800516c:	4a2e      	ldr	r2, [pc, #184]	; (8005228 <network_configure_activations+0x14c>)
 800516e:	60d3      	str	r3, [r2, #12]
    
    _model_a2c_network_actor_mlp_1_Elu_output_0_output_array.data = AI_PTR(g_network_activations_map[0] + 512);
 8005170:	4b28      	ldr	r3, [pc, #160]	; (8005214 <network_configure_activations+0x138>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005178:	4a2c      	ldr	r2, [pc, #176]	; (800522c <network_configure_activations+0x150>)
 800517a:	6093      	str	r3, [r2, #8]
    _model_a2c_network_actor_mlp_1_Elu_output_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 512);
 800517c:	4b25      	ldr	r3, [pc, #148]	; (8005214 <network_configure_activations+0x138>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005184:	4a29      	ldr	r2, [pc, #164]	; (800522c <network_configure_activations+0x150>)
 8005186:	60d3      	str	r3, [r2, #12]
    
    _model_a2c_network_actor_mlp_2_Gemm_output_0_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005188:	4b22      	ldr	r3, [pc, #136]	; (8005214 <network_configure_activations+0x138>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a28      	ldr	r2, [pc, #160]	; (8005230 <network_configure_activations+0x154>)
 800518e:	6093      	str	r3, [r2, #8]
    _model_a2c_network_actor_mlp_2_Gemm_output_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005190:	4b20      	ldr	r3, [pc, #128]	; (8005214 <network_configure_activations+0x138>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a26      	ldr	r2, [pc, #152]	; (8005230 <network_configure_activations+0x154>)
 8005196:	60d3      	str	r3, [r2, #12]
    
    _model_a2c_network_actor_mlp_3_Elu_output_0_output_array.data = AI_PTR(g_network_activations_map[0] + 512);
 8005198:	4b1e      	ldr	r3, [pc, #120]	; (8005214 <network_configure_activations+0x138>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80051a0:	4a24      	ldr	r2, [pc, #144]	; (8005234 <network_configure_activations+0x158>)
 80051a2:	6093      	str	r3, [r2, #8]
    _model_a2c_network_actor_mlp_3_Elu_output_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 512);
 80051a4:	4b1b      	ldr	r3, [pc, #108]	; (8005214 <network_configure_activations+0x138>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80051ac:	4a21      	ldr	r2, [pc, #132]	; (8005234 <network_configure_activations+0x158>)
 80051ae:	60d3      	str	r3, [r2, #12]
    
    value_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80051b0:	4b18      	ldr	r3, [pc, #96]	; (8005214 <network_configure_activations+0x138>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a20      	ldr	r2, [pc, #128]	; (8005238 <network_configure_activations+0x15c>)
 80051b6:	6093      	str	r3, [r2, #8]
    value_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 80051b8:	4b16      	ldr	r3, [pc, #88]	; (8005214 <network_configure_activations+0x138>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a1e      	ldr	r2, [pc, #120]	; (8005238 <network_configure_activations+0x15c>)
 80051be:	60d3      	str	r3, [r2, #12]
    
    mu_output_array.data = AI_PTR(g_network_activations_map[0] + 4);
 80051c0:	4b14      	ldr	r3, [pc, #80]	; (8005214 <network_configure_activations+0x138>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	3304      	adds	r3, #4
 80051c6:	4a1d      	ldr	r2, [pc, #116]	; (800523c <network_configure_activations+0x160>)
 80051c8:	6093      	str	r3, [r2, #8]
    mu_output_array.data_start = AI_PTR(g_network_activations_map[0] + 4);
 80051ca:	4b12      	ldr	r3, [pc, #72]	; (8005214 <network_configure_activations+0x138>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	3304      	adds	r3, #4
 80051d0:	4a1a      	ldr	r2, [pc, #104]	; (800523c <network_configure_activations+0x160>)
 80051d2:	60d3      	str	r3, [r2, #12]
    
    _model_a2c_network_Mul_output_0_output_array.data = AI_PTR(g_network_activations_map[0] + 8);
 80051d4:	4b0f      	ldr	r3, [pc, #60]	; (8005214 <network_configure_activations+0x138>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	3308      	adds	r3, #8
 80051da:	4a19      	ldr	r2, [pc, #100]	; (8005240 <network_configure_activations+0x164>)
 80051dc:	6093      	str	r3, [r2, #8]
    _model_a2c_network_Mul_output_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 8);
 80051de:	4b0d      	ldr	r3, [pc, #52]	; (8005214 <network_configure_activations+0x138>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	3308      	adds	r3, #8
 80051e4:	4a16      	ldr	r2, [pc, #88]	; (8005240 <network_configure_activations+0x164>)
 80051e6:	60d3      	str	r3, [r2, #12]
    
    log_std_output_array.data = AI_PTR(g_network_activations_map[0] + 12);
 80051e8:	4b0a      	ldr	r3, [pc, #40]	; (8005214 <network_configure_activations+0x138>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	330c      	adds	r3, #12
 80051ee:	4a15      	ldr	r2, [pc, #84]	; (8005244 <network_configure_activations+0x168>)
 80051f0:	6093      	str	r3, [r2, #8]
    log_std_output_array.data_start = AI_PTR(g_network_activations_map[0] + 12);
 80051f2:	4b08      	ldr	r3, [pc, #32]	; (8005214 <network_configure_activations+0x138>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	330c      	adds	r3, #12
 80051f8:	4a12      	ldr	r2, [pc, #72]	; (8005244 <network_configure_activations+0x168>)
 80051fa:	60d3      	str	r3, [r2, #12]
    
    return true;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e005      	b.n	800520c <network_configure_activations+0x130>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8005200:	2213      	movs	r2, #19
 8005202:	2130      	movs	r1, #48	; 0x30
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f000 fbf1 	bl	80059ec <ai_platform_network_set_error>
  return false;
 800520a:	2300      	movs	r3, #0
}
 800520c:	4618      	mov	r0, r3
 800520e:	3708      	adds	r7, #8
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}
 8005214:	2000122c 	.word	0x2000122c
 8005218:	20000160 	.word	0x20000160
 800521c:	20000170 	.word	0x20000170
 8005220:	20000180 	.word	0x20000180
 8005224:	20000010 	.word	0x20000010
 8005228:	20000020 	.word	0x20000020
 800522c:	20000030 	.word	0x20000030
 8005230:	20000040 	.word	0x20000040
 8005234:	20000050 	.word	0x20000050
 8005238:	20000060 	.word	0x20000060
 800523c:	20000070 	.word	0x20000070
 8005240:	20000080 	.word	0x20000080
 8005244:	20000090 	.word	0x20000090

08005248 <network_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b082      	sub	sp, #8
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 8005252:	683a      	ldr	r2, [r7, #0]
 8005254:	2101      	movs	r1, #1
 8005256:	4874      	ldr	r0, [pc, #464]	; (8005428 <network_configure_weights+0x1e0>)
 8005258:	f000 fa90 	bl	800577c <ai_platform_get_weights_map>
 800525c:	4603      	mov	r3, r0
 800525e:	2b00      	cmp	r3, #0
 8005260:	f000 80d8 	beq.w	8005414 <network_configure_weights+0x1cc>
    /* Updating weights (byte) offsets */
    
    model__model_a2c_network_sigma_array.format |= AI_FMT_FLAG_CONST;
 8005264:	4b71      	ldr	r3, [pc, #452]	; (800542c <network_configure_weights+0x1e4>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800526c:	4a6f      	ldr	r2, [pc, #444]	; (800542c <network_configure_weights+0x1e4>)
 800526e:	6013      	str	r3, [r2, #0]
    model__model_a2c_network_sigma_array.data = AI_PTR(g_network_weights_map[0] + 0);
 8005270:	4b6d      	ldr	r3, [pc, #436]	; (8005428 <network_configure_weights+0x1e0>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a6d      	ldr	r2, [pc, #436]	; (800542c <network_configure_weights+0x1e4>)
 8005276:	6093      	str	r3, [r2, #8]
    model__model_a2c_network_sigma_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 8005278:	4b6b      	ldr	r3, [pc, #428]	; (8005428 <network_configure_weights+0x1e0>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a6b      	ldr	r2, [pc, #428]	; (800542c <network_configure_weights+0x1e4>)
 800527e:	60d3      	str	r3, [r2, #12]
    
    _model_a2c_network_Constant_output_0_array.format |= AI_FMT_FLAG_CONST;
 8005280:	4b6b      	ldr	r3, [pc, #428]	; (8005430 <network_configure_weights+0x1e8>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005288:	4a69      	ldr	r2, [pc, #420]	; (8005430 <network_configure_weights+0x1e8>)
 800528a:	6013      	str	r3, [r2, #0]
    _model_a2c_network_Constant_output_0_array.data = AI_PTR(g_network_weights_map[0] + 4);
 800528c:	4b66      	ldr	r3, [pc, #408]	; (8005428 <network_configure_weights+0x1e0>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	3304      	adds	r3, #4
 8005292:	4a67      	ldr	r2, [pc, #412]	; (8005430 <network_configure_weights+0x1e8>)
 8005294:	6093      	str	r3, [r2, #8]
    _model_a2c_network_Constant_output_0_array.data_start = AI_PTR(g_network_weights_map[0] + 4);
 8005296:	4b64      	ldr	r3, [pc, #400]	; (8005428 <network_configure_weights+0x1e0>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	3304      	adds	r3, #4
 800529c:	4a64      	ldr	r2, [pc, #400]	; (8005430 <network_configure_weights+0x1e8>)
 800529e:	60d3      	str	r3, [r2, #12]
    
    onnxDiv_37_array.format |= AI_FMT_FLAG_CONST;
 80052a0:	4b64      	ldr	r3, [pc, #400]	; (8005434 <network_configure_weights+0x1ec>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052a8:	4a62      	ldr	r2, [pc, #392]	; (8005434 <network_configure_weights+0x1ec>)
 80052aa:	6013      	str	r3, [r2, #0]
    onnxDiv_37_array.data = AI_PTR(g_network_weights_map[0] + 8);
 80052ac:	4b5e      	ldr	r3, [pc, #376]	; (8005428 <network_configure_weights+0x1e0>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	3308      	adds	r3, #8
 80052b2:	4a60      	ldr	r2, [pc, #384]	; (8005434 <network_configure_weights+0x1ec>)
 80052b4:	6093      	str	r3, [r2, #8]
    onnxDiv_37_array.data_start = AI_PTR(g_network_weights_map[0] + 8);
 80052b6:	4b5c      	ldr	r3, [pc, #368]	; (8005428 <network_configure_weights+0x1e0>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	3308      	adds	r3, #8
 80052bc:	4a5d      	ldr	r2, [pc, #372]	; (8005434 <network_configure_weights+0x1ec>)
 80052be:	60d3      	str	r3, [r2, #12]
    
    onnxSub_34_array.format |= AI_FMT_FLAG_CONST;
 80052c0:	4b5d      	ldr	r3, [pc, #372]	; (8005438 <network_configure_weights+0x1f0>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052c8:	4a5b      	ldr	r2, [pc, #364]	; (8005438 <network_configure_weights+0x1f0>)
 80052ca:	6013      	str	r3, [r2, #0]
    onnxSub_34_array.data = AI_PTR(g_network_weights_map[0] + 16);
 80052cc:	4b56      	ldr	r3, [pc, #344]	; (8005428 <network_configure_weights+0x1e0>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	3310      	adds	r3, #16
 80052d2:	4a59      	ldr	r2, [pc, #356]	; (8005438 <network_configure_weights+0x1f0>)
 80052d4:	6093      	str	r3, [r2, #8]
    onnxSub_34_array.data_start = AI_PTR(g_network_weights_map[0] + 16);
 80052d6:	4b54      	ldr	r3, [pc, #336]	; (8005428 <network_configure_weights+0x1e0>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	3310      	adds	r3, #16
 80052dc:	4a56      	ldr	r2, [pc, #344]	; (8005438 <network_configure_weights+0x1f0>)
 80052de:	60d3      	str	r3, [r2, #12]
    
    _model_a2c_network_actor_mlp_0_Gemm_output_0_weights_array.format |= AI_FMT_FLAG_CONST;
 80052e0:	4b56      	ldr	r3, [pc, #344]	; (800543c <network_configure_weights+0x1f4>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052e8:	4a54      	ldr	r2, [pc, #336]	; (800543c <network_configure_weights+0x1f4>)
 80052ea:	6013      	str	r3, [r2, #0]
    _model_a2c_network_actor_mlp_0_Gemm_output_0_weights_array.data = AI_PTR(g_network_weights_map[0] + 24);
 80052ec:	4b4e      	ldr	r3, [pc, #312]	; (8005428 <network_configure_weights+0x1e0>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	3318      	adds	r3, #24
 80052f2:	4a52      	ldr	r2, [pc, #328]	; (800543c <network_configure_weights+0x1f4>)
 80052f4:	6093      	str	r3, [r2, #8]
    _model_a2c_network_actor_mlp_0_Gemm_output_0_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 24);
 80052f6:	4b4c      	ldr	r3, [pc, #304]	; (8005428 <network_configure_weights+0x1e0>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	3318      	adds	r3, #24
 80052fc:	4a4f      	ldr	r2, [pc, #316]	; (800543c <network_configure_weights+0x1f4>)
 80052fe:	60d3      	str	r3, [r2, #12]
    
    _model_a2c_network_actor_mlp_0_Gemm_output_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8005300:	4b4f      	ldr	r3, [pc, #316]	; (8005440 <network_configure_weights+0x1f8>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005308:	4a4d      	ldr	r2, [pc, #308]	; (8005440 <network_configure_weights+0x1f8>)
 800530a:	6013      	str	r3, [r2, #0]
    _model_a2c_network_actor_mlp_0_Gemm_output_0_bias_array.data = AI_PTR(g_network_weights_map[0] + 1048);
 800530c:	4b46      	ldr	r3, [pc, #280]	; (8005428 <network_configure_weights+0x1e0>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8005314:	4a4a      	ldr	r2, [pc, #296]	; (8005440 <network_configure_weights+0x1f8>)
 8005316:	6093      	str	r3, [r2, #8]
    _model_a2c_network_actor_mlp_0_Gemm_output_0_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 1048);
 8005318:	4b43      	ldr	r3, [pc, #268]	; (8005428 <network_configure_weights+0x1e0>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8005320:	4a47      	ldr	r2, [pc, #284]	; (8005440 <network_configure_weights+0x1f8>)
 8005322:	60d3      	str	r3, [r2, #12]
    
    _model_a2c_network_actor_mlp_2_Gemm_output_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8005324:	4b47      	ldr	r3, [pc, #284]	; (8005444 <network_configure_weights+0x1fc>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800532c:	4a45      	ldr	r2, [pc, #276]	; (8005444 <network_configure_weights+0x1fc>)
 800532e:	6013      	str	r3, [r2, #0]
    _model_a2c_network_actor_mlp_2_Gemm_output_0_weights_array.data = AI_PTR(g_network_weights_map[0] + 2584);
 8005330:	4b3d      	ldr	r3, [pc, #244]	; (8005428 <network_configure_weights+0x1e0>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f603 2318 	addw	r3, r3, #2584	; 0xa18
 8005338:	4a42      	ldr	r2, [pc, #264]	; (8005444 <network_configure_weights+0x1fc>)
 800533a:	6093      	str	r3, [r2, #8]
    _model_a2c_network_actor_mlp_2_Gemm_output_0_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 1560);
 800533c:	4b3a      	ldr	r3, [pc, #232]	; (8005428 <network_configure_weights+0x1e0>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f503 63c3 	add.w	r3, r3, #1560	; 0x618
 8005344:	4a3f      	ldr	r2, [pc, #252]	; (8005444 <network_configure_weights+0x1fc>)
 8005346:	60d3      	str	r3, [r2, #12]
    
    _model_a2c_network_actor_mlp_2_Gemm_output_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8005348:	4b3f      	ldr	r3, [pc, #252]	; (8005448 <network_configure_weights+0x200>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005350:	4a3d      	ldr	r2, [pc, #244]	; (8005448 <network_configure_weights+0x200>)
 8005352:	6013      	str	r3, [r2, #0]
    _model_a2c_network_actor_mlp_2_Gemm_output_0_bias_array.data = AI_PTR(g_network_weights_map[0] + 18968);
 8005354:	4b34      	ldr	r3, [pc, #208]	; (8005428 <network_configure_weights+0x1e0>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f503 4394 	add.w	r3, r3, #18944	; 0x4a00
 800535c:	3318      	adds	r3, #24
 800535e:	4a3a      	ldr	r2, [pc, #232]	; (8005448 <network_configure_weights+0x200>)
 8005360:	6093      	str	r3, [r2, #8]
    _model_a2c_network_actor_mlp_2_Gemm_output_0_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 18968);
 8005362:	4b31      	ldr	r3, [pc, #196]	; (8005428 <network_configure_weights+0x1e0>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f503 4394 	add.w	r3, r3, #18944	; 0x4a00
 800536a:	3318      	adds	r3, #24
 800536c:	4a36      	ldr	r2, [pc, #216]	; (8005448 <network_configure_weights+0x200>)
 800536e:	60d3      	str	r3, [r2, #12]
    
    value_weights_array.format |= AI_FMT_FLAG_CONST;
 8005370:	4b36      	ldr	r3, [pc, #216]	; (800544c <network_configure_weights+0x204>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005378:	4a34      	ldr	r2, [pc, #208]	; (800544c <network_configure_weights+0x204>)
 800537a:	6013      	str	r3, [r2, #0]
    value_weights_array.data = AI_PTR(g_network_weights_map[0] + 19480);
 800537c:	4b2a      	ldr	r3, [pc, #168]	; (8005428 <network_configure_weights+0x1e0>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f503 4398 	add.w	r3, r3, #19456	; 0x4c00
 8005384:	3318      	adds	r3, #24
 8005386:	4a31      	ldr	r2, [pc, #196]	; (800544c <network_configure_weights+0x204>)
 8005388:	6093      	str	r3, [r2, #8]
    value_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 19480);
 800538a:	4b27      	ldr	r3, [pc, #156]	; (8005428 <network_configure_weights+0x1e0>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f503 4398 	add.w	r3, r3, #19456	; 0x4c00
 8005392:	3318      	adds	r3, #24
 8005394:	4a2d      	ldr	r2, [pc, #180]	; (800544c <network_configure_weights+0x204>)
 8005396:	60d3      	str	r3, [r2, #12]
    
    value_bias_array.format |= AI_FMT_FLAG_CONST;
 8005398:	4b2d      	ldr	r3, [pc, #180]	; (8005450 <network_configure_weights+0x208>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053a0:	4a2b      	ldr	r2, [pc, #172]	; (8005450 <network_configure_weights+0x208>)
 80053a2:	6013      	str	r3, [r2, #0]
    value_bias_array.data = AI_PTR(g_network_weights_map[0] + 19992);
 80053a4:	4b20      	ldr	r3, [pc, #128]	; (8005428 <network_configure_weights+0x1e0>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 80053ac:	3318      	adds	r3, #24
 80053ae:	4a28      	ldr	r2, [pc, #160]	; (8005450 <network_configure_weights+0x208>)
 80053b0:	6093      	str	r3, [r2, #8]
    value_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 19992);
 80053b2:	4b1d      	ldr	r3, [pc, #116]	; (8005428 <network_configure_weights+0x1e0>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 80053ba:	3318      	adds	r3, #24
 80053bc:	4a24      	ldr	r2, [pc, #144]	; (8005450 <network_configure_weights+0x208>)
 80053be:	60d3      	str	r3, [r2, #12]
    
    mu_weights_array.format |= AI_FMT_FLAG_CONST;
 80053c0:	4b24      	ldr	r3, [pc, #144]	; (8005454 <network_configure_weights+0x20c>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053c8:	4a22      	ldr	r2, [pc, #136]	; (8005454 <network_configure_weights+0x20c>)
 80053ca:	6013      	str	r3, [r2, #0]
    mu_weights_array.data = AI_PTR(g_network_weights_map[0] + 19996);
 80053cc:	4b16      	ldr	r3, [pc, #88]	; (8005428 <network_configure_weights+0x1e0>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 80053d4:	331c      	adds	r3, #28
 80053d6:	4a1f      	ldr	r2, [pc, #124]	; (8005454 <network_configure_weights+0x20c>)
 80053d8:	6093      	str	r3, [r2, #8]
    mu_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 19996);
 80053da:	4b13      	ldr	r3, [pc, #76]	; (8005428 <network_configure_weights+0x1e0>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 80053e2:	331c      	adds	r3, #28
 80053e4:	4a1b      	ldr	r2, [pc, #108]	; (8005454 <network_configure_weights+0x20c>)
 80053e6:	60d3      	str	r3, [r2, #12]
    
    mu_bias_array.format |= AI_FMT_FLAG_CONST;
 80053e8:	4b1b      	ldr	r3, [pc, #108]	; (8005458 <network_configure_weights+0x210>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053f0:	4a19      	ldr	r2, [pc, #100]	; (8005458 <network_configure_weights+0x210>)
 80053f2:	6013      	str	r3, [r2, #0]
    mu_bias_array.data = AI_PTR(g_network_weights_map[0] + 20508);
 80053f4:	4b0c      	ldr	r3, [pc, #48]	; (8005428 <network_configure_weights+0x1e0>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 80053fc:	331c      	adds	r3, #28
 80053fe:	4a16      	ldr	r2, [pc, #88]	; (8005458 <network_configure_weights+0x210>)
 8005400:	6093      	str	r3, [r2, #8]
    mu_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 20508);
 8005402:	4b09      	ldr	r3, [pc, #36]	; (8005428 <network_configure_weights+0x1e0>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 800540a:	331c      	adds	r3, #28
 800540c:	4a12      	ldr	r2, [pc, #72]	; (8005458 <network_configure_weights+0x210>)
 800540e:	60d3      	str	r3, [r2, #12]
    
    return true;
 8005410:	2301      	movs	r3, #1
 8005412:	e005      	b.n	8005420 <network_configure_weights+0x1d8>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8005414:	2212      	movs	r2, #18
 8005416:	2130      	movs	r1, #48	; 0x30
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f000 fae7 	bl	80059ec <ai_platform_network_set_error>
  return false;
 800541e:	2300      	movs	r3, #0
}
 8005420:	4618      	mov	r0, r3
 8005422:	3708      	adds	r7, #8
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}
 8005428:	20001230 	.word	0x20001230
 800542c:	200000a0 	.word	0x200000a0
 8005430:	200000b0 	.word	0x200000b0
 8005434:	200000c0 	.word	0x200000c0
 8005438:	200000d0 	.word	0x200000d0
 800543c:	200000e0 	.word	0x200000e0
 8005440:	200000f0 	.word	0x200000f0
 8005444:	20000100 	.word	0x20000100
 8005448:	20000110 	.word	0x20000110
 800544c:	20000120 	.word	0x20000120
 8005450:	20000130 	.word	0x20000130
 8005454:	20000140 	.word	0x20000140
 8005458:	20000150 	.word	0x20000150

0800545c <ai_network_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b082      	sub	sp, #8
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f000 fa53 	bl	8005910 <ai_platform_network_get_error>
 800546a:	4603      	mov	r3, r0
}
 800546c:	4618      	mov	r0, r3
 800546e:	3708      	adds	r7, #8
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af02      	add	r7, sp, #8
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800547e:	2300      	movs	r3, #0
 8005480:	9301      	str	r3, [sp, #4]
 8005482:	2305      	movs	r3, #5
 8005484:	9300      	str	r3, [sp, #0]
 8005486:	2301      	movs	r3, #1
 8005488:	4a04      	ldr	r2, [pc, #16]	; (800549c <ai_network_create+0x28>)
 800548a:	6839      	ldr	r1, [r7, #0]
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f000 fc59 	bl	8005d44 <ai_platform_network_create>
 8005492:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8005494:	4618      	mov	r0, r3
 8005496:	3708      	adds	r7, #8
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}
 800549c:	20000bc0 	.word	0x20000bc0

080054a0 <ai_network_create_and_init>:

AI_API_ENTRY
ai_error ai_network_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b096      	sub	sp, #88	; 0x58
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	60b9      	str	r1, [r7, #8]
 80054aa:	607a      	str	r2, [r7, #4]
    ai_error err;
    ai_network_params params;

    err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 80054ac:	2100      	movs	r1, #0
 80054ae:	68f8      	ldr	r0, [r7, #12]
 80054b0:	f7ff ffe0 	bl	8005474 <ai_network_create>
 80054b4:	4603      	mov	r3, r0
 80054b6:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (err.type != AI_ERROR_NONE)
 80054b8:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d001      	beq.n	80054c4 <ai_network_create_and_init+0x24>
        return err;
 80054c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054c2:	e05d      	b.n	8005580 <ai_network_create_and_init+0xe0>
    if (ai_network_data_params_get(&params) != true) {
 80054c4:	f107 0314 	add.w	r3, r7, #20
 80054c8:	4618      	mov	r0, r3
 80054ca:	f000 f8dd 	bl	8005688 <ai_network_data_params_get>
 80054ce:	4603      	mov	r3, r0
 80054d0:	f083 0301 	eor.w	r3, r3, #1
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d008      	beq.n	80054ec <ai_network_create_and_init+0x4c>
        err = ai_network_get_error(*network);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4618      	mov	r0, r3
 80054e0:	f7ff ffbc 	bl	800545c <ai_network_get_error>
 80054e4:	4603      	mov	r3, r0
 80054e6:	64fb      	str	r3, [r7, #76]	; 0x4c
        return err;
 80054e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054ea:	e049      	b.n	8005580 <ai_network_create_and_init+0xe0>
    }
#if defined(AI_NETWORK_DATA_ACTIVATIONS_COUNT)
    if (activations) {
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d016      	beq.n	8005520 <ai_network_create_and_init+0x80>
        /* set the addresses of the activations buffers */
        for (int idx=0;idx<params.map_activations.size;idx++)
 80054f2:	2300      	movs	r3, #0
 80054f4:	657b      	str	r3, [r7, #84]	; 0x54
 80054f6:	e00e      	b.n	8005516 <ai_network_create_and_init+0x76>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 80054f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80054fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	68ba      	ldr	r2, [r7, #8]
 8005500:	4413      	add	r3, r2
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	f107 0314 	add.w	r3, r7, #20
 8005508:	330c      	adds	r3, #12
 800550a:	4618      	mov	r0, r3
 800550c:	f000 f922 	bl	8005754 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 8005510:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005512:	3301      	adds	r3, #1
 8005514:	657b      	str	r3, [r7, #84]	; 0x54
 8005516:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005518:	461a      	mov	r2, r3
 800551a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800551c:	4293      	cmp	r3, r2
 800551e:	dbeb      	blt.n	80054f8 <ai_network_create_and_init+0x58>
    }
#endif
#if defined(AI_NETWORK_DATA_WEIGHTS_COUNT)
    if (weights) {
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d016      	beq.n	8005554 <ai_network_create_and_init+0xb4>
        /* set the addresses of the weight buffers */
        for (int idx=0;idx<params.map_weights.size;idx++)
 8005526:	2300      	movs	r3, #0
 8005528:	653b      	str	r3, [r7, #80]	; 0x50
 800552a:	e00e      	b.n	800554a <ai_network_create_and_init+0xaa>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 800552c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800552e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	4413      	add	r3, r2
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	f107 0314 	add.w	r3, r7, #20
 800553c:	3304      	adds	r3, #4
 800553e:	4618      	mov	r0, r3
 8005540:	f000 f908 	bl	8005754 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 8005544:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005546:	3301      	adds	r3, #1
 8005548:	653b      	str	r3, [r7, #80]	; 0x50
 800554a:	8b7b      	ldrh	r3, [r7, #26]
 800554c:	461a      	mov	r2, r3
 800554e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005550:	4293      	cmp	r3, r2
 8005552:	dbeb      	blt.n	800552c <ai_network_create_and_init+0x8c>
    }
#endif
    if (ai_network_init(*network, &params) != true) {
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f107 0214 	add.w	r2, r7, #20
 800555c:	4611      	mov	r1, r2
 800555e:	4618      	mov	r0, r3
 8005560:	f000 f846 	bl	80055f0 <ai_network_init>
 8005564:	4603      	mov	r3, r0
 8005566:	f083 0301 	eor.w	r3, r3, #1
 800556a:	b2db      	uxtb	r3, r3
 800556c:	2b00      	cmp	r3, #0
 800556e:	d006      	beq.n	800557e <ai_network_create_and_init+0xde>
        err = ai_network_get_error(*network);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4618      	mov	r0, r3
 8005576:	f7ff ff71 	bl	800545c <ai_network_get_error>
 800557a:	4603      	mov	r3, r0
 800557c:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    return err;
 800557e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8005580:	4618      	mov	r0, r3
 8005582:	3758      	adds	r7, #88	; 0x58
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}

08005588 <ai_network_inputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b082      	sub	sp, #8
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d104      	bne.n	80055a2 <ai_network_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8005598:	4b06      	ldr	r3, [pc, #24]	; (80055b4 <ai_network_inputs_get+0x2c>)
 800559a:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4a06      	ldr	r2, [pc, #24]	; (80055b8 <ai_network_inputs_get+0x30>)
 80055a0:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 80055a2:	6839      	ldr	r1, [r7, #0]
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f000 fa27 	bl	80059f8 <ai_platform_inputs_get>
 80055aa:	4603      	mov	r3, r0
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3708      	adds	r7, #8
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	20000bc0 	.word	0x20000bc0
 80055b8:	a1c00100 	.word	0xa1c00100

080055bc <ai_network_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b082      	sub	sp, #8
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d104      	bne.n	80055d6 <ai_network_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 80055cc:	4b06      	ldr	r3, [pc, #24]	; (80055e8 <ai_network_outputs_get+0x2c>)
 80055ce:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	4a06      	ldr	r2, [pc, #24]	; (80055ec <ai_network_outputs_get+0x30>)
 80055d4:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 80055d6:	6839      	ldr	r1, [r7, #0]
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f000 fae3 	bl	8005ba4 <ai_platform_outputs_get>
 80055de:	4603      	mov	r3, r0
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3708      	adds	r7, #8
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}
 80055e8:	20000bc0 	.word	0x20000bc0
 80055ec:	a1c00100 	.word	0xa1c00100

080055f0 <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b084      	sub	sp, #16
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 80055fa:	6839      	ldr	r1, [r7, #0]
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f000 fc77 	bl	8005ef0 <ai_platform_network_init>
 8005602:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d101      	bne.n	800560e <ai_network_init+0x1e>
 800560a:	2300      	movs	r3, #0
 800560c:	e028      	b.n	8005660 <ai_network_init+0x70>

  ai_bool ok = true;
 800560e:	2301      	movs	r3, #1
 8005610:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, params);
 8005612:	6839      	ldr	r1, [r7, #0]
 8005614:	68f8      	ldr	r0, [r7, #12]
 8005616:	f7ff fe17 	bl	8005248 <network_configure_weights>
 800561a:	4603      	mov	r3, r0
 800561c:	461a      	mov	r2, r3
 800561e:	7afb      	ldrb	r3, [r7, #11]
 8005620:	4013      	ands	r3, r2
 8005622:	2b00      	cmp	r3, #0
 8005624:	bf14      	ite	ne
 8005626:	2301      	movne	r3, #1
 8005628:	2300      	moveq	r3, #0
 800562a:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, params);
 800562c:	6839      	ldr	r1, [r7, #0]
 800562e:	68f8      	ldr	r0, [r7, #12]
 8005630:	f7ff fd54 	bl	80050dc <network_configure_activations>
 8005634:	4603      	mov	r3, r0
 8005636:	461a      	mov	r2, r3
 8005638:	7afb      	ldrb	r3, [r7, #11]
 800563a:	4013      	ands	r3, r2
 800563c:	2b00      	cmp	r3, #0
 800563e:	bf14      	ite	ne
 8005640:	2301      	movne	r3, #1
 8005642:	2300      	moveq	r3, #0
 8005644:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f000 fd40 	bl	80060cc <ai_platform_network_post_init>
 800564c:	4603      	mov	r3, r0
 800564e:	461a      	mov	r2, r3
 8005650:	7afb      	ldrb	r3, [r7, #11]
 8005652:	4013      	ands	r3, r2
 8005654:	2b00      	cmp	r3, #0
 8005656:	bf14      	ite	ne
 8005658:	2301      	movne	r3, #1
 800565a:	2300      	moveq	r3, #0
 800565c:	72fb      	strb	r3, [r7, #11]

  return ok;
 800565e:	7afb      	ldrb	r3, [r7, #11]
}
 8005660:	4618      	mov	r0, r3
 8005662:	3710      	adds	r7, #16
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}

08005668 <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b084      	sub	sp, #16
 800566c:	af00      	add	r7, sp, #0
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	68b9      	ldr	r1, [r7, #8]
 8005678:	68f8      	ldr	r0, [r7, #12]
 800567a:	f000 fdaf 	bl	80061dc <ai_platform_network_process>
 800567e:	4603      	mov	r3, r0
}
 8005680:	4618      	mov	r0, r3
 8005682:	3710      	adds	r7, #16
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}

08005688 <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b086      	sub	sp, #24
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d101      	bne.n	800569a <ai_network_data_params_get+0x12>
 8005696:	2300      	movs	r3, #0
 8005698:	e016      	b.n	80056c8 <ai_network_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 800569a:	4a0d      	ldr	r2, [pc, #52]	; (80056d0 <ai_network_data_params_get+0x48>)
 800569c:	f107 0310 	add.w	r3, r7, #16
 80056a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80056a4:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 80056a8:	4a0a      	ldr	r2, [pc, #40]	; (80056d4 <ai_network_data_params_get+0x4c>)
 80056aa:	f107 0308 	add.w	r3, r7, #8
 80056ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80056b2:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 80056b6:	f107 0210 	add.w	r2, r7, #16
 80056ba:	f107 0308 	add.w	r3, r7, #8
 80056be:	4619      	mov	r1, r3
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f000 f903 	bl	80058cc <ai_platform_bind_network_params>
 80056c6:	4603      	mov	r3, r0
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3718      	adds	r7, #24
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}
 80056d0:	08008ba0 	.word	0x08008ba0
 80056d4:	08008ba8 	.word	0x08008ba8

080056d8 <ai_buffer_get_size>:
 80056d8:	b378      	cbz	r0, 800573a <ai_buffer_get_size+0x62>
 80056da:	b410      	push	{r4}
 80056dc:	6803      	ldr	r3, [r0, #0]
 80056de:	4a17      	ldr	r2, [pc, #92]	; (800573c <ai_buffer_get_size+0x64>)
 80056e0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80056e4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d01e      	beq.n	800572a <ai_buffer_get_size+0x52>
 80056ec:	6984      	ldr	r4, [r0, #24]
 80056ee:	6862      	ldr	r2, [r4, #4]
 80056f0:	7d03      	ldrb	r3, [r0, #20]
 80056f2:	6941      	ldr	r1, [r0, #20]
 80056f4:	f1a3 0301 	sub.w	r3, r3, #1
 80056f8:	fab3 f383 	clz	r3, r3
 80056fc:	095b      	lsrs	r3, r3, #5
 80056fe:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8005702:	f3c1 2017 	ubfx	r0, r1, #8, #24
 8005706:	da0b      	bge.n	8005720 <ai_buffer_get_size+0x48>
 8005708:	2b01      	cmp	r3, #1
 800570a:	d102      	bne.n	8005712 <ai_buffer_get_size+0x3a>
 800570c:	2802      	cmp	r0, #2
 800570e:	d007      	beq.n	8005720 <ai_buffer_get_size+0x48>
 8005710:	2302      	movs	r3, #2
 8005712:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8005716:	3301      	adds	r3, #1
 8005718:	4298      	cmp	r0, r3
 800571a:	fb01 f202 	mul.w	r2, r1, r2
 800571e:	d1f3      	bne.n	8005708 <ai_buffer_get_size+0x30>
 8005720:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8005724:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005728:	4770      	bx	lr
 800572a:	2900      	cmp	r1, #0
 800572c:	d0de      	beq.n	80056ec <ai_buffer_get_size+0x14>
 800572e:	6984      	ldr	r4, [r0, #24]
 8005730:	6863      	ldr	r3, [r4, #4]
 8005732:	331f      	adds	r3, #31
 8005734:	f023 021f 	bic.w	r2, r3, #31
 8005738:	e7da      	b.n	80056f0 <ai_buffer_get_size+0x18>
 800573a:	4770      	bx	lr
 800573c:	000400c0 	.word	0x000400c0

08005740 <ai_buffer_array_sane>:
 8005740:	b138      	cbz	r0, 8005752 <ai_buffer_array_sane+0x12>
 8005742:	6843      	ldr	r3, [r0, #4]
 8005744:	b123      	cbz	r3, 8005750 <ai_buffer_array_sane+0x10>
 8005746:	8840      	ldrh	r0, [r0, #2]
 8005748:	3800      	subs	r0, #0
 800574a:	bf18      	it	ne
 800574c:	2001      	movne	r0, #1
 800574e:	4770      	bx	lr
 8005750:	4618      	mov	r0, r3
 8005752:	4770      	bx	lr

08005754 <ai_buffer_array_item_set_address>:
 8005754:	b150      	cbz	r0, 800576c <ai_buffer_array_item_set_address+0x18>
 8005756:	6843      	ldr	r3, [r0, #4]
 8005758:	b14b      	cbz	r3, 800576e <ai_buffer_array_item_set_address+0x1a>
 800575a:	8840      	ldrh	r0, [r0, #2]
 800575c:	b900      	cbnz	r0, 8005760 <ai_buffer_array_item_set_address+0xc>
 800575e:	4770      	bx	lr
 8005760:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8005764:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8005768:	2001      	movs	r0, #1
 800576a:	604a      	str	r2, [r1, #4]
 800576c:	4770      	bx	lr
 800576e:	4618      	mov	r0, r3
 8005770:	4770      	bx	lr
 8005772:	bf00      	nop

08005774 <_ai_platform_acquire_crc>:
 8005774:	2001      	movs	r0, #1
 8005776:	4770      	bx	lr

08005778 <_ai_platform_release_crc>:
 8005778:	4770      	bx	lr
 800577a:	bf00      	nop

0800577c <ai_platform_get_weights_map>:
 800577c:	2a00      	cmp	r2, #0
 800577e:	d037      	beq.n	80057f0 <ai_platform_get_weights_map+0x74>
 8005780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005782:	4604      	mov	r4, r0
 8005784:	b1a0      	cbz	r0, 80057b0 <ai_platform_get_weights_map+0x34>
 8005786:	460f      	mov	r7, r1
 8005788:	b191      	cbz	r1, 80057b0 <ai_platform_get_weights_map+0x34>
 800578a:	4b25      	ldr	r3, [pc, #148]	; (8005820 <ai_platform_get_weights_map+0xa4>)
 800578c:	6810      	ldr	r0, [r2, #0]
 800578e:	4298      	cmp	r0, r3
 8005790:	4615      	mov	r5, r2
 8005792:	d00f      	beq.n	80057b4 <ai_platform_get_weights_map+0x38>
 8005794:	6855      	ldr	r5, [r2, #4]
 8005796:	b15d      	cbz	r5, 80057b0 <ai_platform_get_weights_map+0x34>
 8005798:	682e      	ldr	r6, [r5, #0]
 800579a:	429e      	cmp	r6, r3
 800579c:	d02a      	beq.n	80057f4 <ai_platform_get_weights_map+0x78>
 800579e:	f1a1 0001 	sub.w	r0, r1, #1
 80057a2:	6025      	str	r5, [r4, #0]
 80057a4:	fab0 f080 	clz	r0, r0
 80057a8:	0940      	lsrs	r0, r0, #5
 80057aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057ac:	42a7      	cmp	r7, r4
 80057ae:	d034      	beq.n	800581a <ai_platform_get_weights_map+0x9e>
 80057b0:	2000      	movs	r0, #0
 80057b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057b4:	1d10      	adds	r0, r2, #4
 80057b6:	f7ff ffc3 	bl	8005740 <ai_buffer_array_sane>
 80057ba:	2800      	cmp	r0, #0
 80057bc:	d0f8      	beq.n	80057b0 <ai_platform_get_weights_map+0x34>
 80057be:	88eb      	ldrh	r3, [r5, #6]
 80057c0:	429f      	cmp	r7, r3
 80057c2:	d1f5      	bne.n	80057b0 <ai_platform_get_weights_map+0x34>
 80057c4:	f04f 0e00 	mov.w	lr, #0
 80057c8:	1f23      	subs	r3, r4, #4
 80057ca:	4670      	mov	r0, lr
 80057cc:	68aa      	ldr	r2, [r5, #8]
 80057ce:	eb02 0c0e 	add.w	ip, r2, lr
 80057d2:	f10e 0e1c 	add.w	lr, lr, #28
 80057d6:	f8dc 4004 	ldr.w	r4, [ip, #4]
 80057da:	b124      	cbz	r4, 80057e6 <ai_platform_get_weights_map+0x6a>
 80057dc:	3001      	adds	r0, #1
 80057de:	4287      	cmp	r7, r0
 80057e0:	f843 4f04 	str.w	r4, [r3, #4]!
 80057e4:	d1f2      	bne.n	80057cc <ai_platform_get_weights_map+0x50>
 80057e6:	1a38      	subs	r0, r7, r0
 80057e8:	fab0 f080 	clz	r0, r0
 80057ec:	0940      	lsrs	r0, r0, #5
 80057ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057f0:	2000      	movs	r0, #0
 80057f2:	4770      	bx	lr
 80057f4:	1f23      	subs	r3, r4, #4
 80057f6:	4628      	mov	r0, r5
 80057f8:	2400      	movs	r4, #0
 80057fa:	e000      	b.n	80057fe <ai_platform_get_weights_map+0x82>
 80057fc:	4614      	mov	r4, r2
 80057fe:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8005802:	42b2      	cmp	r2, r6
 8005804:	d0d2      	beq.n	80057ac <ai_platform_get_weights_map+0x30>
 8005806:	f843 2f04 	str.w	r2, [r3, #4]!
 800580a:	1c62      	adds	r2, r4, #1
 800580c:	4297      	cmp	r7, r2
 800580e:	d1f5      	bne.n	80057fc <ai_platform_get_weights_map+0x80>
 8005810:	3402      	adds	r4, #2
 8005812:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8005816:	42b3      	cmp	r3, r6
 8005818:	d1ca      	bne.n	80057b0 <ai_platform_get_weights_map+0x34>
 800581a:	2001      	movs	r0, #1
 800581c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800581e:	bf00      	nop
 8005820:	a1facade 	.word	0xa1facade

08005824 <ai_platform_get_activations_map>:
 8005824:	2a00      	cmp	r2, #0
 8005826:	d038      	beq.n	800589a <ai_platform_get_activations_map+0x76>
 8005828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800582a:	4604      	mov	r4, r0
 800582c:	b1a0      	cbz	r0, 8005858 <ai_platform_get_activations_map+0x34>
 800582e:	460f      	mov	r7, r1
 8005830:	b191      	cbz	r1, 8005858 <ai_platform_get_activations_map+0x34>
 8005832:	4b25      	ldr	r3, [pc, #148]	; (80058c8 <ai_platform_get_activations_map+0xa4>)
 8005834:	6810      	ldr	r0, [r2, #0]
 8005836:	4298      	cmp	r0, r3
 8005838:	4615      	mov	r5, r2
 800583a:	d00f      	beq.n	800585c <ai_platform_get_activations_map+0x38>
 800583c:	6a15      	ldr	r5, [r2, #32]
 800583e:	b15d      	cbz	r5, 8005858 <ai_platform_get_activations_map+0x34>
 8005840:	682e      	ldr	r6, [r5, #0]
 8005842:	429e      	cmp	r6, r3
 8005844:	d02b      	beq.n	800589e <ai_platform_get_activations_map+0x7a>
 8005846:	f1a1 0001 	sub.w	r0, r1, #1
 800584a:	6025      	str	r5, [r4, #0]
 800584c:	fab0 f080 	clz	r0, r0
 8005850:	0940      	lsrs	r0, r0, #5
 8005852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005854:	42a7      	cmp	r7, r4
 8005856:	d035      	beq.n	80058c4 <ai_platform_get_activations_map+0xa0>
 8005858:	2000      	movs	r0, #0
 800585a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800585c:	f102 000c 	add.w	r0, r2, #12
 8005860:	f7ff ff6e 	bl	8005740 <ai_buffer_array_sane>
 8005864:	2800      	cmp	r0, #0
 8005866:	d0f7      	beq.n	8005858 <ai_platform_get_activations_map+0x34>
 8005868:	89eb      	ldrh	r3, [r5, #14]
 800586a:	429f      	cmp	r7, r3
 800586c:	d1f4      	bne.n	8005858 <ai_platform_get_activations_map+0x34>
 800586e:	f04f 0e00 	mov.w	lr, #0
 8005872:	1f23      	subs	r3, r4, #4
 8005874:	4670      	mov	r0, lr
 8005876:	692a      	ldr	r2, [r5, #16]
 8005878:	eb02 0c0e 	add.w	ip, r2, lr
 800587c:	f10e 0e1c 	add.w	lr, lr, #28
 8005880:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8005884:	b124      	cbz	r4, 8005890 <ai_platform_get_activations_map+0x6c>
 8005886:	3001      	adds	r0, #1
 8005888:	4287      	cmp	r7, r0
 800588a:	f843 4f04 	str.w	r4, [r3, #4]!
 800588e:	d1f2      	bne.n	8005876 <ai_platform_get_activations_map+0x52>
 8005890:	1a38      	subs	r0, r7, r0
 8005892:	fab0 f080 	clz	r0, r0
 8005896:	0940      	lsrs	r0, r0, #5
 8005898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800589a:	2000      	movs	r0, #0
 800589c:	4770      	bx	lr
 800589e:	1f23      	subs	r3, r4, #4
 80058a0:	4628      	mov	r0, r5
 80058a2:	2400      	movs	r4, #0
 80058a4:	e000      	b.n	80058a8 <ai_platform_get_activations_map+0x84>
 80058a6:	4614      	mov	r4, r2
 80058a8:	f850 2f04 	ldr.w	r2, [r0, #4]!
 80058ac:	42b2      	cmp	r2, r6
 80058ae:	d0d1      	beq.n	8005854 <ai_platform_get_activations_map+0x30>
 80058b0:	f843 2f04 	str.w	r2, [r3, #4]!
 80058b4:	1c62      	adds	r2, r4, #1
 80058b6:	4297      	cmp	r7, r2
 80058b8:	d1f5      	bne.n	80058a6 <ai_platform_get_activations_map+0x82>
 80058ba:	3402      	adds	r4, #2
 80058bc:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80058c0:	42b3      	cmp	r3, r6
 80058c2:	d1c9      	bne.n	8005858 <ai_platform_get_activations_map+0x34>
 80058c4:	2001      	movs	r0, #1
 80058c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058c8:	a1facade 	.word	0xa1facade

080058cc <ai_platform_bind_network_params>:
 80058cc:	b1a0      	cbz	r0, 80058f8 <ai_platform_bind_network_params+0x2c>
 80058ce:	b1b1      	cbz	r1, 80058fe <ai_platform_bind_network_params+0x32>
 80058d0:	b1c2      	cbz	r2, 8005904 <ai_platform_bind_network_params+0x38>
 80058d2:	b410      	push	{r4}
 80058d4:	4603      	mov	r3, r0
 80058d6:	4c0d      	ldr	r4, [pc, #52]	; (800590c <ai_platform_bind_network_params+0x40>)
 80058d8:	f843 4b04 	str.w	r4, [r3], #4
 80058dc:	f100 0c0c 	add.w	ip, r0, #12
 80058e0:	c903      	ldmia	r1, {r0, r1}
 80058e2:	e883 0003 	stmia.w	r3, {r0, r1}
 80058e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80058ea:	e88c 0003 	stmia.w	ip, {r0, r1}
 80058ee:	2301      	movs	r3, #1
 80058f0:	4618      	mov	r0, r3
 80058f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80058f6:	4770      	bx	lr
 80058f8:	4603      	mov	r3, r0
 80058fa:	4618      	mov	r0, r3
 80058fc:	4770      	bx	lr
 80058fe:	460b      	mov	r3, r1
 8005900:	4618      	mov	r0, r3
 8005902:	4770      	bx	lr
 8005904:	4613      	mov	r3, r2
 8005906:	4618      	mov	r0, r3
 8005908:	4770      	bx	lr
 800590a:	bf00      	nop
 800590c:	a1facade 	.word	0xa1facade

08005910 <ai_platform_network_get_error>:
 8005910:	b510      	push	{r4, lr}
 8005912:	b1f0      	cbz	r0, 8005952 <ai_platform_network_get_error+0x42>
 8005914:	4b2f      	ldr	r3, [pc, #188]	; (80059d4 <ai_platform_network_get_error+0xc4>)
 8005916:	6802      	ldr	r2, [r0, #0]
 8005918:	429a      	cmp	r2, r3
 800591a:	4604      	mov	r4, r0
 800591c:	d119      	bne.n	8005952 <ai_platform_network_get_error+0x42>
 800591e:	f7ff ff29 	bl	8005774 <_ai_platform_acquire_crc>
 8005922:	4b2d      	ldr	r3, [pc, #180]	; (80059d8 <ai_platform_network_get_error+0xc8>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800592a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800592e:	d03c      	beq.n	80059aa <ai_platform_network_get_error+0x9a>
 8005930:	4a2a      	ldr	r2, [pc, #168]	; (80059dc <ai_platform_network_get_error+0xcc>)
 8005932:	2301      	movs	r3, #1
 8005934:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005938:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800593c:	2b00      	cmp	r3, #0
 800593e:	d1fb      	bne.n	8005938 <ai_platform_network_get_error+0x28>
 8005940:	4b27      	ldr	r3, [pc, #156]	; (80059e0 <ai_platform_network_get_error+0xd0>)
 8005942:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8005946:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800594a:	4b26      	ldr	r3, [pc, #152]	; (80059e4 <ai_platform_network_get_error+0xd4>)
 800594c:	429a      	cmp	r2, r3
 800594e:	d038      	beq.n	80059c2 <ai_platform_network_get_error+0xb2>
 8005950:	e7fe      	b.n	8005950 <ai_platform_network_get_error+0x40>
 8005952:	f7ff ff0f 	bl	8005774 <_ai_platform_acquire_crc>
 8005956:	4b20      	ldr	r3, [pc, #128]	; (80059d8 <ai_platform_network_get_error+0xc8>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800595e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005962:	d010      	beq.n	8005986 <ai_platform_network_get_error+0x76>
 8005964:	4a1d      	ldr	r2, [pc, #116]	; (80059dc <ai_platform_network_get_error+0xcc>)
 8005966:	2301      	movs	r3, #1
 8005968:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800596c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005970:	2b00      	cmp	r3, #0
 8005972:	d1fb      	bne.n	800596c <ai_platform_network_get_error+0x5c>
 8005974:	4b1a      	ldr	r3, [pc, #104]	; (80059e0 <ai_platform_network_get_error+0xd0>)
 8005976:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800597a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800597e:	4b19      	ldr	r3, [pc, #100]	; (80059e4 <ai_platform_network_get_error+0xd4>)
 8005980:	429a      	cmp	r2, r3
 8005982:	d00d      	beq.n	80059a0 <ai_platform_network_get_error+0x90>
 8005984:	e7fe      	b.n	8005984 <ai_platform_network_get_error+0x74>
 8005986:	4a18      	ldr	r2, [pc, #96]	; (80059e8 <ai_platform_network_get_error+0xd8>)
 8005988:	2301      	movs	r3, #1
 800598a:	6093      	str	r3, [r2, #8]
 800598c:	6893      	ldr	r3, [r2, #8]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d1fc      	bne.n	800598c <ai_platform_network_get_error+0x7c>
 8005992:	4b13      	ldr	r3, [pc, #76]	; (80059e0 <ai_platform_network_get_error+0xd0>)
 8005994:	6013      	str	r3, [r2, #0]
 8005996:	6812      	ldr	r2, [r2, #0]
 8005998:	4b12      	ldr	r3, [pc, #72]	; (80059e4 <ai_platform_network_get_error+0xd4>)
 800599a:	429a      	cmp	r2, r3
 800599c:	d000      	beq.n	80059a0 <ai_platform_network_get_error+0x90>
 800599e:	e7fe      	b.n	800599e <ai_platform_network_get_error+0x8e>
 80059a0:	f7ff feea 	bl	8005778 <_ai_platform_release_crc>
 80059a4:	f241 0010 	movw	r0, #4112	; 0x1010
 80059a8:	bd10      	pop	{r4, pc}
 80059aa:	4a0f      	ldr	r2, [pc, #60]	; (80059e8 <ai_platform_network_get_error+0xd8>)
 80059ac:	2301      	movs	r3, #1
 80059ae:	6093      	str	r3, [r2, #8]
 80059b0:	6893      	ldr	r3, [r2, #8]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d1fc      	bne.n	80059b0 <ai_platform_network_get_error+0xa0>
 80059b6:	4b0a      	ldr	r3, [pc, #40]	; (80059e0 <ai_platform_network_get_error+0xd0>)
 80059b8:	6013      	str	r3, [r2, #0]
 80059ba:	6812      	ldr	r2, [r2, #0]
 80059bc:	4b09      	ldr	r3, [pc, #36]	; (80059e4 <ai_platform_network_get_error+0xd4>)
 80059be:	429a      	cmp	r2, r3
 80059c0:	d107      	bne.n	80059d2 <ai_platform_network_get_error+0xc2>
 80059c2:	f7ff fed9 	bl	8005778 <_ai_platform_release_crc>
 80059c6:	f104 0010 	add.w	r0, r4, #16
 80059ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059ce:	f000 be8b 	b.w	80066e8 <core_get_error>
 80059d2:	e7fe      	b.n	80059d2 <ai_platform_network_get_error+0xc2>
 80059d4:	a1c00100 	.word	0xa1c00100
 80059d8:	e0042000 	.word	0xe0042000
 80059dc:	58024000 	.word	0x58024000
 80059e0:	f407a5c2 	.word	0xf407a5c2
 80059e4:	b5e8b5cd 	.word	0xb5e8b5cd
 80059e8:	40023000 	.word	0x40023000

080059ec <ai_platform_network_set_error>:
 80059ec:	b110      	cbz	r0, 80059f4 <ai_platform_network_set_error+0x8>
 80059ee:	3010      	adds	r0, #16
 80059f0:	f000 be80 	b.w	80066f4 <core_set_error>
 80059f4:	4770      	bx	lr
 80059f6:	bf00      	nop

080059f8 <ai_platform_inputs_get>:
 80059f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059fc:	b085      	sub	sp, #20
 80059fe:	9102      	str	r1, [sp, #8]
 8005a00:	b1f0      	cbz	r0, 8005a40 <ai_platform_inputs_get+0x48>
 8005a02:	4b62      	ldr	r3, [pc, #392]	; (8005b8c <ai_platform_inputs_get+0x194>)
 8005a04:	6802      	ldr	r2, [r0, #0]
 8005a06:	429a      	cmp	r2, r3
 8005a08:	4607      	mov	r7, r0
 8005a0a:	d119      	bne.n	8005a40 <ai_platform_inputs_get+0x48>
 8005a0c:	f7ff feb2 	bl	8005774 <_ai_platform_acquire_crc>
 8005a10:	4b5f      	ldr	r3, [pc, #380]	; (8005b90 <ai_platform_inputs_get+0x198>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005a18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a1c:	d03d      	beq.n	8005a9a <ai_platform_inputs_get+0xa2>
 8005a1e:	4a5d      	ldr	r2, [pc, #372]	; (8005b94 <ai_platform_inputs_get+0x19c>)
 8005a20:	2301      	movs	r3, #1
 8005a22:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005a26:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d1fb      	bne.n	8005a26 <ai_platform_inputs_get+0x2e>
 8005a2e:	4b5a      	ldr	r3, [pc, #360]	; (8005b98 <ai_platform_inputs_get+0x1a0>)
 8005a30:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8005a34:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005a38:	4b58      	ldr	r3, [pc, #352]	; (8005b9c <ai_platform_inputs_get+0x1a4>)
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d039      	beq.n	8005ab2 <ai_platform_inputs_get+0xba>
 8005a3e:	e7fe      	b.n	8005a3e <ai_platform_inputs_get+0x46>
 8005a40:	f7ff fe98 	bl	8005774 <_ai_platform_acquire_crc>
 8005a44:	4b52      	ldr	r3, [pc, #328]	; (8005b90 <ai_platform_inputs_get+0x198>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005a4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a50:	d010      	beq.n	8005a74 <ai_platform_inputs_get+0x7c>
 8005a52:	4a50      	ldr	r2, [pc, #320]	; (8005b94 <ai_platform_inputs_get+0x19c>)
 8005a54:	2301      	movs	r3, #1
 8005a56:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005a5a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d1fb      	bne.n	8005a5a <ai_platform_inputs_get+0x62>
 8005a62:	4b4d      	ldr	r3, [pc, #308]	; (8005b98 <ai_platform_inputs_get+0x1a0>)
 8005a64:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8005a68:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005a6c:	4b4b      	ldr	r3, [pc, #300]	; (8005b9c <ai_platform_inputs_get+0x1a4>)
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d00d      	beq.n	8005a8e <ai_platform_inputs_get+0x96>
 8005a72:	e7fe      	b.n	8005a72 <ai_platform_inputs_get+0x7a>
 8005a74:	4a4a      	ldr	r2, [pc, #296]	; (8005ba0 <ai_platform_inputs_get+0x1a8>)
 8005a76:	2301      	movs	r3, #1
 8005a78:	6093      	str	r3, [r2, #8]
 8005a7a:	6893      	ldr	r3, [r2, #8]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d1fc      	bne.n	8005a7a <ai_platform_inputs_get+0x82>
 8005a80:	4b45      	ldr	r3, [pc, #276]	; (8005b98 <ai_platform_inputs_get+0x1a0>)
 8005a82:	6013      	str	r3, [r2, #0]
 8005a84:	6812      	ldr	r2, [r2, #0]
 8005a86:	4b45      	ldr	r3, [pc, #276]	; (8005b9c <ai_platform_inputs_get+0x1a4>)
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d000      	beq.n	8005a8e <ai_platform_inputs_get+0x96>
 8005a8c:	e7fe      	b.n	8005a8c <ai_platform_inputs_get+0x94>
 8005a8e:	f7ff fe73 	bl	8005778 <_ai_platform_release_crc>
 8005a92:	2000      	movs	r0, #0
 8005a94:	b005      	add	sp, #20
 8005a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a9a:	4a41      	ldr	r2, [pc, #260]	; (8005ba0 <ai_platform_inputs_get+0x1a8>)
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	6093      	str	r3, [r2, #8]
 8005aa0:	6893      	ldr	r3, [r2, #8]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d1fc      	bne.n	8005aa0 <ai_platform_inputs_get+0xa8>
 8005aa6:	4b3c      	ldr	r3, [pc, #240]	; (8005b98 <ai_platform_inputs_get+0x1a0>)
 8005aa8:	6013      	str	r3, [r2, #0]
 8005aaa:	6812      	ldr	r2, [r2, #0]
 8005aac:	4b3b      	ldr	r3, [pc, #236]	; (8005b9c <ai_platform_inputs_get+0x1a4>)
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d155      	bne.n	8005b5e <ai_platform_inputs_get+0x166>
 8005ab2:	f7ff fe61 	bl	8005778 <_ai_platform_release_crc>
 8005ab6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d051      	beq.n	8005b60 <ai_platform_inputs_get+0x168>
 8005abc:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 8005ac0:	f1ba 0f00 	cmp.w	sl, #0
 8005ac4:	d04c      	beq.n	8005b60 <ai_platform_inputs_get+0x168>
 8005ac6:	f04f 0b00 	mov.w	fp, #0
 8005aca:	465d      	mov	r5, fp
 8005acc:	9703      	str	r7, [sp, #12]
 8005ace:	e016      	b.n	8005afe <ai_platform_inputs_get+0x106>
 8005ad0:	9901      	ldr	r1, [sp, #4]
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	507b      	str	r3, [r7, r1]
 8005ad6:	69b1      	ldr	r1, [r6, #24]
 8005ad8:	6849      	ldr	r1, [r1, #4]
 8005ada:	6121      	str	r1, [r4, #16]
 8005adc:	f04f 0301 	mov.w	r3, #1
 8005ae0:	7523      	strb	r3, [r4, #20]
 8005ae2:	e9c4 c200 	strd	ip, r2, [r4]
 8005ae6:	6962      	ldr	r2, [r4, #20]
 8005ae8:	60a0      	str	r0, [r4, #8]
 8005aea:	2300      	movs	r3, #0
 8005aec:	f369 221f 	bfi	r2, r9, #8, #24
 8005af0:	f8c4 8018 	str.w	r8, [r4, #24]
 8005af4:	60e3      	str	r3, [r4, #12]
 8005af6:	3501      	adds	r5, #1
 8005af8:	f10b 0b1c 	add.w	fp, fp, #28
 8005afc:	6162      	str	r2, [r4, #20]
 8005afe:	f8ba 3000 	ldrh.w	r3, [sl]
 8005b02:	42ab      	cmp	r3, r5
 8005b04:	b2aa      	uxth	r2, r5
 8005b06:	d93a      	bls.n	8005b7e <ai_platform_inputs_get+0x186>
 8005b08:	f8da 3004 	ldr.w	r3, [sl, #4]
 8005b0c:	00e9      	lsls	r1, r5, #3
 8005b0e:	9101      	str	r1, [sp, #4]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d034      	beq.n	8005b7e <ai_platform_inputs_get+0x186>
 8005b14:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8005b18:	2e00      	cmp	r6, #0
 8005b1a:	d030      	beq.n	8005b7e <ai_platform_inputs_get+0x186>
 8005b1c:	f8da 3008 	ldr.w	r3, [sl, #8]
 8005b20:	69b2      	ldr	r2, [r6, #24]
 8005b22:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8005b26:	6810      	ldr	r0, [r2, #0]
 8005b28:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8005b2c:	68b3      	ldr	r3, [r6, #8]
 8005b2e:	f3c3 2917 	ubfx	r9, r3, #8, #24
 8005b32:	f001 fd1f 	bl	8007574 <ai_array_to_buffer_fmt>
 8005b36:	69b1      	ldr	r1, [r6, #24]
 8005b38:	4684      	mov	ip, r0
 8005b3a:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 8005b3e:	688a      	ldr	r2, [r1, #8]
 8005b40:	445c      	add	r4, fp
 8005b42:	2800      	cmp	r0, #0
 8005b44:	d0c8      	beq.n	8005ad8 <ai_platform_inputs_get+0xe0>
 8005b46:	2100      	movs	r1, #0
 8005b48:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8005b4c:	6831      	ldr	r1, [r6, #0]
 8005b4e:	6041      	str	r1, [r0, #4]
 8005b50:	b111      	cbz	r1, 8005b58 <ai_platform_inputs_get+0x160>
 8005b52:	8849      	ldrh	r1, [r1, #2]
 8005b54:	2900      	cmp	r1, #0
 8005b56:	d1bb      	bne.n	8005ad0 <ai_platform_inputs_get+0xd8>
 8005b58:	69b1      	ldr	r1, [r6, #24]
 8005b5a:	2000      	movs	r0, #0
 8005b5c:	e7bc      	b.n	8005ad8 <ai_platform_inputs_get+0xe0>
 8005b5e:	e7fe      	b.n	8005b5e <ai_platform_inputs_get+0x166>
 8005b60:	2218      	movs	r2, #24
 8005b62:	2111      	movs	r1, #17
 8005b64:	f107 0010 	add.w	r0, r7, #16
 8005b68:	f000 fdc4 	bl	80066f4 <core_set_error>
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	4610      	mov	r0, r2
 8005b70:	9b02      	ldr	r3, [sp, #8]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d08e      	beq.n	8005a94 <ai_platform_inputs_get+0x9c>
 8005b76:	801a      	strh	r2, [r3, #0]
 8005b78:	b005      	add	sp, #20
 8005b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b7e:	9f03      	ldr	r7, [sp, #12]
 8005b80:	2a00      	cmp	r2, #0
 8005b82:	d0ed      	beq.n	8005b60 <ai_platform_inputs_get+0x168>
 8005b84:	f8da 3008 	ldr.w	r3, [sl, #8]
 8005b88:	6858      	ldr	r0, [r3, #4]
 8005b8a:	e7f1      	b.n	8005b70 <ai_platform_inputs_get+0x178>
 8005b8c:	a1c00100 	.word	0xa1c00100
 8005b90:	e0042000 	.word	0xe0042000
 8005b94:	58024000 	.word	0x58024000
 8005b98:	f407a5c2 	.word	0xf407a5c2
 8005b9c:	b5e8b5cd 	.word	0xb5e8b5cd
 8005ba0:	40023000 	.word	0x40023000

08005ba4 <ai_platform_outputs_get>:
 8005ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ba8:	b085      	sub	sp, #20
 8005baa:	9102      	str	r1, [sp, #8]
 8005bac:	b1f0      	cbz	r0, 8005bec <ai_platform_outputs_get+0x48>
 8005bae:	4b5f      	ldr	r3, [pc, #380]	; (8005d2c <ai_platform_outputs_get+0x188>)
 8005bb0:	6802      	ldr	r2, [r0, #0]
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	4607      	mov	r7, r0
 8005bb6:	d119      	bne.n	8005bec <ai_platform_outputs_get+0x48>
 8005bb8:	f7ff fddc 	bl	8005774 <_ai_platform_acquire_crc>
 8005bbc:	4b5c      	ldr	r3, [pc, #368]	; (8005d30 <ai_platform_outputs_get+0x18c>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005bc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bc8:	d03d      	beq.n	8005c46 <ai_platform_outputs_get+0xa2>
 8005bca:	4a5a      	ldr	r2, [pc, #360]	; (8005d34 <ai_platform_outputs_get+0x190>)
 8005bcc:	2301      	movs	r3, #1
 8005bce:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005bd2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d1fb      	bne.n	8005bd2 <ai_platform_outputs_get+0x2e>
 8005bda:	4b57      	ldr	r3, [pc, #348]	; (8005d38 <ai_platform_outputs_get+0x194>)
 8005bdc:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8005be0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005be4:	4b55      	ldr	r3, [pc, #340]	; (8005d3c <ai_platform_outputs_get+0x198>)
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d039      	beq.n	8005c5e <ai_platform_outputs_get+0xba>
 8005bea:	e7fe      	b.n	8005bea <ai_platform_outputs_get+0x46>
 8005bec:	f7ff fdc2 	bl	8005774 <_ai_platform_acquire_crc>
 8005bf0:	4b4f      	ldr	r3, [pc, #316]	; (8005d30 <ai_platform_outputs_get+0x18c>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005bf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bfc:	d010      	beq.n	8005c20 <ai_platform_outputs_get+0x7c>
 8005bfe:	4a4d      	ldr	r2, [pc, #308]	; (8005d34 <ai_platform_outputs_get+0x190>)
 8005c00:	2301      	movs	r3, #1
 8005c02:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005c06:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d1fb      	bne.n	8005c06 <ai_platform_outputs_get+0x62>
 8005c0e:	4b4a      	ldr	r3, [pc, #296]	; (8005d38 <ai_platform_outputs_get+0x194>)
 8005c10:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8005c14:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005c18:	4b48      	ldr	r3, [pc, #288]	; (8005d3c <ai_platform_outputs_get+0x198>)
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d00d      	beq.n	8005c3a <ai_platform_outputs_get+0x96>
 8005c1e:	e7fe      	b.n	8005c1e <ai_platform_outputs_get+0x7a>
 8005c20:	4a47      	ldr	r2, [pc, #284]	; (8005d40 <ai_platform_outputs_get+0x19c>)
 8005c22:	2301      	movs	r3, #1
 8005c24:	6093      	str	r3, [r2, #8]
 8005c26:	6893      	ldr	r3, [r2, #8]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d1fc      	bne.n	8005c26 <ai_platform_outputs_get+0x82>
 8005c2c:	4b42      	ldr	r3, [pc, #264]	; (8005d38 <ai_platform_outputs_get+0x194>)
 8005c2e:	6013      	str	r3, [r2, #0]
 8005c30:	6812      	ldr	r2, [r2, #0]
 8005c32:	4b42      	ldr	r3, [pc, #264]	; (8005d3c <ai_platform_outputs_get+0x198>)
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d000      	beq.n	8005c3a <ai_platform_outputs_get+0x96>
 8005c38:	e7fe      	b.n	8005c38 <ai_platform_outputs_get+0x94>
 8005c3a:	f7ff fd9d 	bl	8005778 <_ai_platform_release_crc>
 8005c3e:	2000      	movs	r0, #0
 8005c40:	b005      	add	sp, #20
 8005c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c46:	4a3e      	ldr	r2, [pc, #248]	; (8005d40 <ai_platform_outputs_get+0x19c>)
 8005c48:	2301      	movs	r3, #1
 8005c4a:	6093      	str	r3, [r2, #8]
 8005c4c:	6893      	ldr	r3, [r2, #8]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d1fc      	bne.n	8005c4c <ai_platform_outputs_get+0xa8>
 8005c52:	4b39      	ldr	r3, [pc, #228]	; (8005d38 <ai_platform_outputs_get+0x194>)
 8005c54:	6013      	str	r3, [r2, #0]
 8005c56:	6812      	ldr	r2, [r2, #0]
 8005c58:	4b38      	ldr	r3, [pc, #224]	; (8005d3c <ai_platform_outputs_get+0x198>)
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	d150      	bne.n	8005d00 <ai_platform_outputs_get+0x15c>
 8005c5e:	f7ff fd8b 	bl	8005778 <_ai_platform_release_crc>
 8005c62:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d958      	bls.n	8005d1a <ai_platform_outputs_get+0x176>
 8005c68:	f04f 0b00 	mov.w	fp, #0
 8005c6c:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 8005c70:	9703      	str	r7, [sp, #12]
 8005c72:	465d      	mov	r5, fp
 8005c74:	e016      	b.n	8005ca4 <ai_platform_outputs_get+0x100>
 8005c76:	9901      	ldr	r1, [sp, #4]
 8005c78:	2301      	movs	r3, #1
 8005c7a:	507b      	str	r3, [r7, r1]
 8005c7c:	69b1      	ldr	r1, [r6, #24]
 8005c7e:	6849      	ldr	r1, [r1, #4]
 8005c80:	6121      	str	r1, [r4, #16]
 8005c82:	f04f 0301 	mov.w	r3, #1
 8005c86:	7523      	strb	r3, [r4, #20]
 8005c88:	e9c4 c200 	strd	ip, r2, [r4]
 8005c8c:	6962      	ldr	r2, [r4, #20]
 8005c8e:	60a0      	str	r0, [r4, #8]
 8005c90:	2300      	movs	r3, #0
 8005c92:	f369 221f 	bfi	r2, r9, #8, #24
 8005c96:	f8c4 8018 	str.w	r8, [r4, #24]
 8005c9a:	60e3      	str	r3, [r4, #12]
 8005c9c:	3501      	adds	r5, #1
 8005c9e:	f10b 0b1c 	add.w	fp, fp, #28
 8005ca2:	6162      	str	r2, [r4, #20]
 8005ca4:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8005ca8:	42ab      	cmp	r3, r5
 8005caa:	b2aa      	uxth	r2, r5
 8005cac:	d929      	bls.n	8005d02 <ai_platform_outputs_get+0x15e>
 8005cae:	f8da 3010 	ldr.w	r3, [sl, #16]
 8005cb2:	00e9      	lsls	r1, r5, #3
 8005cb4:	9101      	str	r1, [sp, #4]
 8005cb6:	b323      	cbz	r3, 8005d02 <ai_platform_outputs_get+0x15e>
 8005cb8:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8005cbc:	b30e      	cbz	r6, 8005d02 <ai_platform_outputs_get+0x15e>
 8005cbe:	f8da 3014 	ldr.w	r3, [sl, #20]
 8005cc2:	69b2      	ldr	r2, [r6, #24]
 8005cc4:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8005cc8:	6810      	ldr	r0, [r2, #0]
 8005cca:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8005cce:	68b3      	ldr	r3, [r6, #8]
 8005cd0:	f3c3 2917 	ubfx	r9, r3, #8, #24
 8005cd4:	f001 fc4e 	bl	8007574 <ai_array_to_buffer_fmt>
 8005cd8:	69b1      	ldr	r1, [r6, #24]
 8005cda:	4684      	mov	ip, r0
 8005cdc:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 8005ce0:	688a      	ldr	r2, [r1, #8]
 8005ce2:	445c      	add	r4, fp
 8005ce4:	2800      	cmp	r0, #0
 8005ce6:	d0ca      	beq.n	8005c7e <ai_platform_outputs_get+0xda>
 8005ce8:	2100      	movs	r1, #0
 8005cea:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8005cee:	6831      	ldr	r1, [r6, #0]
 8005cf0:	6041      	str	r1, [r0, #4]
 8005cf2:	b111      	cbz	r1, 8005cfa <ai_platform_outputs_get+0x156>
 8005cf4:	8849      	ldrh	r1, [r1, #2]
 8005cf6:	2900      	cmp	r1, #0
 8005cf8:	d1bd      	bne.n	8005c76 <ai_platform_outputs_get+0xd2>
 8005cfa:	69b1      	ldr	r1, [r6, #24]
 8005cfc:	2000      	movs	r0, #0
 8005cfe:	e7be      	b.n	8005c7e <ai_platform_outputs_get+0xda>
 8005d00:	e7fe      	b.n	8005d00 <ai_platform_outputs_get+0x15c>
 8005d02:	9f03      	ldr	r7, [sp, #12]
 8005d04:	b14a      	cbz	r2, 8005d1a <ai_platform_outputs_get+0x176>
 8005d06:	f8da 3014 	ldr.w	r3, [sl, #20]
 8005d0a:	6858      	ldr	r0, [r3, #4]
 8005d0c:	9b02      	ldr	r3, [sp, #8]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d096      	beq.n	8005c40 <ai_platform_outputs_get+0x9c>
 8005d12:	801a      	strh	r2, [r3, #0]
 8005d14:	b005      	add	sp, #20
 8005d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d1a:	2218      	movs	r2, #24
 8005d1c:	2111      	movs	r1, #17
 8005d1e:	f107 0010 	add.w	r0, r7, #16
 8005d22:	f000 fce7 	bl	80066f4 <core_set_error>
 8005d26:	2200      	movs	r2, #0
 8005d28:	4610      	mov	r0, r2
 8005d2a:	e7ef      	b.n	8005d0c <ai_platform_outputs_get+0x168>
 8005d2c:	a1c00100 	.word	0xa1c00100
 8005d30:	e0042000 	.word	0xe0042000
 8005d34:	58024000 	.word	0x58024000
 8005d38:	f407a5c2 	.word	0xf407a5c2
 8005d3c:	b5e8b5cd 	.word	0xb5e8b5cd
 8005d40:	40023000 	.word	0x40023000

08005d44 <ai_platform_network_create>:
 8005d44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005d48:	b083      	sub	sp, #12
 8005d4a:	4606      	mov	r6, r0
 8005d4c:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 8005d50:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8005d54:	4615      	mov	r5, r2
 8005d56:	461f      	mov	r7, r3
 8005d58:	f7ff fd0c 	bl	8005774 <_ai_platform_acquire_crc>
 8005d5c:	b188      	cbz	r0, 8005d82 <ai_platform_network_create+0x3e>
 8005d5e:	4a5d      	ldr	r2, [pc, #372]	; (8005ed4 <ai_platform_network_create+0x190>)
 8005d60:	6812      	ldr	r2, [r2, #0]
 8005d62:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8005d66:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	d00e      	beq.n	8005d8c <ai_platform_network_create+0x48>
 8005d6e:	4a5a      	ldr	r2, [pc, #360]	; (8005ed8 <ai_platform_network_create+0x194>)
 8005d70:	2118      	movs	r1, #24
 8005d72:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 8005d76:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 8005d7a:	2918      	cmp	r1, #24
 8005d7c:	d018      	beq.n	8005db0 <ai_platform_network_create+0x6c>
 8005d7e:	f7ff fcfb 	bl	8005778 <_ai_platform_release_crc>
 8005d82:	f244 1033 	movw	r0, #16691	; 0x4133
 8005d86:	b003      	add	sp, #12
 8005d88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005d8c:	4a53      	ldr	r2, [pc, #332]	; (8005edc <ai_platform_network_create+0x198>)
 8005d8e:	2101      	movs	r1, #1
 8005d90:	6091      	str	r1, [r2, #8]
 8005d92:	2114      	movs	r1, #20
 8005d94:	e001      	b.n	8005d9a <ai_platform_network_create+0x56>
 8005d96:	3901      	subs	r1, #1
 8005d98:	d002      	beq.n	8005da0 <ai_platform_network_create+0x5c>
 8005d9a:	6894      	ldr	r4, [r2, #8]
 8005d9c:	2c00      	cmp	r4, #0
 8005d9e:	d1fa      	bne.n	8005d96 <ai_platform_network_create+0x52>
 8005da0:	4a4e      	ldr	r2, [pc, #312]	; (8005edc <ai_platform_network_create+0x198>)
 8005da2:	6891      	ldr	r1, [r2, #8]
 8005da4:	b911      	cbnz	r1, 8005dac <ai_platform_network_create+0x68>
 8005da6:	6812      	ldr	r2, [r2, #0]
 8005da8:	3201      	adds	r2, #1
 8005daa:	d008      	beq.n	8005dbe <ai_platform_network_create+0x7a>
 8005dac:	4618      	mov	r0, r3
 8005dae:	e7e6      	b.n	8005d7e <ai_platform_network_create+0x3a>
 8005db0:	2101      	movs	r1, #1
 8005db2:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 8005db6:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 8005dba:	2900      	cmp	r1, #0
 8005dbc:	d1fb      	bne.n	8005db6 <ai_platform_network_create+0x72>
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f7ff fcda 	bl	8005778 <_ai_platform_release_crc>
 8005dc4:	f7ff fcd6 	bl	8005774 <_ai_platform_acquire_crc>
 8005dc8:	4b42      	ldr	r3, [pc, #264]	; (8005ed4 <ai_platform_network_create+0x190>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005dd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dd4:	d010      	beq.n	8005df8 <ai_platform_network_create+0xb4>
 8005dd6:	4b40      	ldr	r3, [pc, #256]	; (8005ed8 <ai_platform_network_create+0x194>)
 8005dd8:	2201      	movs	r2, #1
 8005dda:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8005dde:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
 8005de2:	2900      	cmp	r1, #0
 8005de4:	d1fb      	bne.n	8005dde <ai_platform_network_create+0x9a>
 8005de6:	4a3e      	ldr	r2, [pc, #248]	; (8005ee0 <ai_platform_network_create+0x19c>)
 8005de8:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8005dec:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8005df0:	4b3c      	ldr	r3, [pc, #240]	; (8005ee4 <ai_platform_network_create+0x1a0>)
 8005df2:	429a      	cmp	r2, r3
 8005df4:	d00c      	beq.n	8005e10 <ai_platform_network_create+0xcc>
 8005df6:	e7fe      	b.n	8005df6 <ai_platform_network_create+0xb2>
 8005df8:	4a38      	ldr	r2, [pc, #224]	; (8005edc <ai_platform_network_create+0x198>)
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	6093      	str	r3, [r2, #8]
 8005dfe:	6893      	ldr	r3, [r2, #8]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d1fc      	bne.n	8005dfe <ai_platform_network_create+0xba>
 8005e04:	4b36      	ldr	r3, [pc, #216]	; (8005ee0 <ai_platform_network_create+0x19c>)
 8005e06:	6013      	str	r3, [r2, #0]
 8005e08:	6812      	ldr	r2, [r2, #0]
 8005e0a:	4b36      	ldr	r3, [pc, #216]	; (8005ee4 <ai_platform_network_create+0x1a0>)
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d122      	bne.n	8005e56 <ai_platform_network_create+0x112>
 8005e10:	f7ff fcb2 	bl	8005778 <_ai_platform_release_crc>
 8005e14:	b38e      	cbz	r6, 8005e7a <ai_platform_network_create+0x136>
 8005e16:	4b34      	ldr	r3, [pc, #208]	; (8005ee8 <ai_platform_network_create+0x1a4>)
 8005e18:	602b      	str	r3, [r5, #0]
 8005e1a:	6035      	str	r5, [r6, #0]
 8005e1c:	f000 fc62 	bl	80066e4 <core_init>
 8005e20:	b1d0      	cbz	r0, 8005e58 <ai_platform_network_create+0x114>
 8005e22:	f7ff fca7 	bl	8005774 <_ai_platform_acquire_crc>
 8005e26:	4b2b      	ldr	r3, [pc, #172]	; (8005ed4 <ai_platform_network_create+0x190>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005e2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e32:	d025      	beq.n	8005e80 <ai_platform_network_create+0x13c>
 8005e34:	4a28      	ldr	r2, [pc, #160]	; (8005ed8 <ai_platform_network_create+0x194>)
 8005e36:	2301      	movs	r3, #1
 8005e38:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005e3c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d1fb      	bne.n	8005e3c <ai_platform_network_create+0xf8>
 8005e44:	4b26      	ldr	r3, [pc, #152]	; (8005ee0 <ai_platform_network_create+0x19c>)
 8005e46:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8005e4a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005e4e:	4b25      	ldr	r3, [pc, #148]	; (8005ee4 <ai_platform_network_create+0x1a0>)
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d022      	beq.n	8005e9a <ai_platform_network_create+0x156>
 8005e54:	e7fe      	b.n	8005e54 <ai_platform_network_create+0x110>
 8005e56:	e7fe      	b.n	8005e56 <ai_platform_network_create+0x112>
 8005e58:	2430      	movs	r4, #48	; 0x30
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	6033      	str	r3, [r6, #0]
 8005e5e:	2610      	movs	r6, #16
 8005e60:	464a      	mov	r2, r9
 8005e62:	4641      	mov	r1, r8
 8005e64:	4638      	mov	r0, r7
 8005e66:	f001 fc2b 	bl	80076c0 <ai_version_get>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	2000      	movs	r0, #0
 8005e6e:	f364 0007 	bfi	r0, r4, #0, #8
 8005e72:	64ab      	str	r3, [r5, #72]	; 0x48
 8005e74:	f366 201f 	bfi	r0, r6, #8, #24
 8005e78:	e785      	b.n	8005d86 <ai_platform_network_create+0x42>
 8005e7a:	f241 0010 	movw	r0, #4112	; 0x1010
 8005e7e:	e782      	b.n	8005d86 <ai_platform_network_create+0x42>
 8005e80:	4a16      	ldr	r2, [pc, #88]	; (8005edc <ai_platform_network_create+0x198>)
 8005e82:	2301      	movs	r3, #1
 8005e84:	6093      	str	r3, [r2, #8]
 8005e86:	6893      	ldr	r3, [r2, #8]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d1fc      	bne.n	8005e86 <ai_platform_network_create+0x142>
 8005e8c:	4b14      	ldr	r3, [pc, #80]	; (8005ee0 <ai_platform_network_create+0x19c>)
 8005e8e:	6013      	str	r3, [r2, #0]
 8005e90:	6812      	ldr	r2, [r2, #0]
 8005e92:	4b14      	ldr	r3, [pc, #80]	; (8005ee4 <ai_platform_network_create+0x1a0>)
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d000      	beq.n	8005e9a <ai_platform_network_create+0x156>
 8005e98:	e7fe      	b.n	8005e98 <ai_platform_network_create+0x154>
 8005e9a:	f7ff fc6d 	bl	8005778 <_ai_platform_release_crc>
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	4641      	mov	r1, r8
 8005ea2:	4638      	mov	r0, r7
 8005ea4:	f001 fc0c 	bl	80076c0 <ai_version_get>
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	4604      	mov	r4, r0
 8005eac:	2105      	movs	r1, #5
 8005eae:	2001      	movs	r0, #1
 8005eb0:	f001 fc06 	bl	80076c0 <ai_version_get>
 8005eb4:	4284      	cmp	r4, r0
 8005eb6:	d001      	beq.n	8005ebc <ai_platform_network_create+0x178>
 8005eb8:	2401      	movs	r4, #1
 8005eba:	e7ce      	b.n	8005e5a <ai_platform_network_create+0x116>
 8005ebc:	4b0b      	ldr	r3, [pc, #44]	; (8005eec <ai_platform_network_create+0x1a8>)
 8005ebe:	9301      	str	r3, [sp, #4]
 8005ec0:	a801      	add	r0, sp, #4
 8005ec2:	f000 fc23 	bl	800670c <ai_check_custom_types>
 8005ec6:	b110      	cbz	r0, 8005ece <ai_platform_network_create+0x18a>
 8005ec8:	2600      	movs	r6, #0
 8005eca:	4634      	mov	r4, r6
 8005ecc:	e7c8      	b.n	8005e60 <ai_platform_network_create+0x11c>
 8005ece:	2402      	movs	r4, #2
 8005ed0:	e7c3      	b.n	8005e5a <ai_platform_network_create+0x116>
 8005ed2:	bf00      	nop
 8005ed4:	e0042000 	.word	0xe0042000
 8005ed8:	58024000 	.word	0x58024000
 8005edc:	40023000 	.word	0x40023000
 8005ee0:	f407a5c2 	.word	0xf407a5c2
 8005ee4:	b5e8b5cd 	.word	0xb5e8b5cd
 8005ee8:	a1c00100 	.word	0xa1c00100
 8005eec:	84048403 	.word	0x84048403

08005ef0 <ai_platform_network_init>:
 8005ef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ef4:	b1f8      	cbz	r0, 8005f36 <ai_platform_network_init+0x46>
 8005ef6:	4b6e      	ldr	r3, [pc, #440]	; (80060b0 <ai_platform_network_init+0x1c0>)
 8005ef8:	6802      	ldr	r2, [r0, #0]
 8005efa:	429a      	cmp	r2, r3
 8005efc:	4604      	mov	r4, r0
 8005efe:	d11a      	bne.n	8005f36 <ai_platform_network_init+0x46>
 8005f00:	460e      	mov	r6, r1
 8005f02:	f7ff fc37 	bl	8005774 <_ai_platform_acquire_crc>
 8005f06:	4b6b      	ldr	r3, [pc, #428]	; (80060b4 <ai_platform_network_init+0x1c4>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005f0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f12:	d03d      	beq.n	8005f90 <ai_platform_network_init+0xa0>
 8005f14:	4a68      	ldr	r2, [pc, #416]	; (80060b8 <ai_platform_network_init+0x1c8>)
 8005f16:	2301      	movs	r3, #1
 8005f18:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005f1c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d1fb      	bne.n	8005f1c <ai_platform_network_init+0x2c>
 8005f24:	4b65      	ldr	r3, [pc, #404]	; (80060bc <ai_platform_network_init+0x1cc>)
 8005f26:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8005f2a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005f2e:	4b64      	ldr	r3, [pc, #400]	; (80060c0 <ai_platform_network_init+0x1d0>)
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d039      	beq.n	8005fa8 <ai_platform_network_init+0xb8>
 8005f34:	e7fe      	b.n	8005f34 <ai_platform_network_init+0x44>
 8005f36:	f7ff fc1d 	bl	8005774 <_ai_platform_acquire_crc>
 8005f3a:	4b5e      	ldr	r3, [pc, #376]	; (80060b4 <ai_platform_network_init+0x1c4>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005f42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f46:	d010      	beq.n	8005f6a <ai_platform_network_init+0x7a>
 8005f48:	4a5b      	ldr	r2, [pc, #364]	; (80060b8 <ai_platform_network_init+0x1c8>)
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005f50:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d1fb      	bne.n	8005f50 <ai_platform_network_init+0x60>
 8005f58:	4b58      	ldr	r3, [pc, #352]	; (80060bc <ai_platform_network_init+0x1cc>)
 8005f5a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8005f5e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005f62:	4b57      	ldr	r3, [pc, #348]	; (80060c0 <ai_platform_network_init+0x1d0>)
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d00d      	beq.n	8005f84 <ai_platform_network_init+0x94>
 8005f68:	e7fe      	b.n	8005f68 <ai_platform_network_init+0x78>
 8005f6a:	4a56      	ldr	r2, [pc, #344]	; (80060c4 <ai_platform_network_init+0x1d4>)
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	6093      	str	r3, [r2, #8]
 8005f70:	6893      	ldr	r3, [r2, #8]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d1fc      	bne.n	8005f70 <ai_platform_network_init+0x80>
 8005f76:	4b51      	ldr	r3, [pc, #324]	; (80060bc <ai_platform_network_init+0x1cc>)
 8005f78:	6013      	str	r3, [r2, #0]
 8005f7a:	6812      	ldr	r2, [r2, #0]
 8005f7c:	4b50      	ldr	r3, [pc, #320]	; (80060c0 <ai_platform_network_init+0x1d0>)
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d000      	beq.n	8005f84 <ai_platform_network_init+0x94>
 8005f82:	e7fe      	b.n	8005f82 <ai_platform_network_init+0x92>
 8005f84:	f7ff fbf8 	bl	8005778 <_ai_platform_release_crc>
 8005f88:	2600      	movs	r6, #0
 8005f8a:	4630      	mov	r0, r6
 8005f8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f90:	4a4c      	ldr	r2, [pc, #304]	; (80060c4 <ai_platform_network_init+0x1d4>)
 8005f92:	2301      	movs	r3, #1
 8005f94:	6093      	str	r3, [r2, #8]
 8005f96:	6893      	ldr	r3, [r2, #8]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d1fc      	bne.n	8005f96 <ai_platform_network_init+0xa6>
 8005f9c:	4b47      	ldr	r3, [pc, #284]	; (80060bc <ai_platform_network_init+0x1cc>)
 8005f9e:	6013      	str	r3, [r2, #0]
 8005fa0:	6812      	ldr	r2, [r2, #0]
 8005fa2:	4b47      	ldr	r3, [pc, #284]	; (80060c0 <ai_platform_network_init+0x1d0>)
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d11c      	bne.n	8005fe2 <ai_platform_network_init+0xf2>
 8005fa8:	f7ff fbe6 	bl	8005778 <_ai_platform_release_crc>
 8005fac:	2e00      	cmp	r6, #0
 8005fae:	d06f      	beq.n	8006090 <ai_platform_network_init+0x1a0>
 8005fb0:	4b45      	ldr	r3, [pc, #276]	; (80060c8 <ai_platform_network_init+0x1d8>)
 8005fb2:	6832      	ldr	r2, [r6, #0]
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d115      	bne.n	8005fe4 <ai_platform_network_init+0xf4>
 8005fb8:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8005fbc:	6933      	ldr	r3, [r6, #16]
 8005fbe:	f8b6 e00c 	ldrh.w	lr, [r6, #12]
 8005fc2:	89f7      	ldrh	r7, [r6, #14]
 8005fc4:	62a3      	str	r3, [r4, #40]	; 0x28
 8005fc6:	e9c4 2107 	strd	r2, r1, [r4, #28]
 8005fca:	2303      	movs	r3, #3
 8005fcc:	84e7      	strh	r7, [r4, #38]	; 0x26
 8005fce:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
 8005fd2:	60e3      	str	r3, [r4, #12]
 8005fd4:	4620      	mov	r0, r4
 8005fd6:	4626      	mov	r6, r4
 8005fd8:	f000 fbc2 	bl	8006760 <ai_layers_init_all>
 8005fdc:	4630      	mov	r0, r6
 8005fde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fe2:	e7fe      	b.n	8005fe2 <ai_platform_network_init+0xf2>
 8005fe4:	2101      	movs	r1, #1
 8005fe6:	4630      	mov	r0, r6
 8005fe8:	4635      	mov	r5, r6
 8005fea:	6876      	ldr	r6, [r6, #4]
 8005fec:	f7ff fb74 	bl	80056d8 <ai_buffer_get_size>
 8005ff0:	f105 081c 	add.w	r8, r5, #28
 8005ff4:	4681      	mov	r9, r0
 8005ff6:	2101      	movs	r1, #1
 8005ff8:	4640      	mov	r0, r8
 8005ffa:	6a2f      	ldr	r7, [r5, #32]
 8005ffc:	f7ff fb6c 	bl	80056d8 <ai_buffer_get_size>
 8006000:	f1b9 0f00 	cmp.w	r9, #0
 8006004:	d025      	beq.n	8006052 <ai_platform_network_init+0x162>
 8006006:	2201      	movs	r2, #1
 8006008:	4696      	mov	lr, r2
 800600a:	bb30      	cbnz	r0, 800605a <ai_platform_network_init+0x16a>
 800600c:	4680      	mov	r8, r0
 800600e:	4607      	mov	r7, r0
 8006010:	b376      	cbz	r6, 8006070 <ai_platform_network_init+0x180>
 8006012:	8be3      	ldrh	r3, [r4, #30]
 8006014:	4573      	cmp	r3, lr
 8006016:	d323      	bcc.n	8006060 <ai_platform_network_init+0x170>
 8006018:	b142      	cbz	r2, 800602c <ai_platform_network_init+0x13c>
 800601a:	46ac      	mov	ip, r5
 800601c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8006020:	6a25      	ldr	r5, [r4, #32]
 8006022:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006024:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8006028:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800602c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800602e:	f8a4 e01e 	strh.w	lr, [r4, #30]
 8006032:	2600      	movs	r6, #0
 8006034:	42bb      	cmp	r3, r7
 8006036:	83a6      	strh	r6, [r4, #28]
 8006038:	d323      	bcc.n	8006082 <ai_platform_network_init+0x192>
 800603a:	b37f      	cbz	r7, 800609c <ai_platform_network_init+0x1ac>
 800603c:	46c4      	mov	ip, r8
 800603e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8006042:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8006044:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006046:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800604a:	46b6      	mov	lr, r6
 800604c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8006050:	e7bb      	b.n	8005fca <ai_platform_network_init+0xda>
 8006052:	464a      	mov	r2, r9
 8006054:	46ce      	mov	lr, r9
 8006056:	464d      	mov	r5, r9
 8006058:	e7d7      	b.n	800600a <ai_platform_network_init+0x11a>
 800605a:	b30f      	cbz	r7, 80060a0 <ai_platform_network_init+0x1b0>
 800605c:	2701      	movs	r7, #1
 800605e:	e7d7      	b.n	8006010 <ai_platform_network_init+0x120>
 8006060:	2212      	movs	r2, #18
 8006062:	2116      	movs	r1, #22
 8006064:	f104 0010 	add.w	r0, r4, #16
 8006068:	f000 fb44 	bl	80066f4 <core_set_error>
 800606c:	2600      	movs	r6, #0
 800606e:	e78c      	b.n	8005f8a <ai_platform_network_init+0x9a>
 8006070:	f1b9 0f00 	cmp.w	r9, #0
 8006074:	d0cd      	beq.n	8006012 <ai_platform_network_init+0x122>
 8006076:	2110      	movs	r1, #16
 8006078:	2212      	movs	r2, #18
 800607a:	1860      	adds	r0, r4, r1
 800607c:	f000 fb3a 	bl	80066f4 <core_set_error>
 8006080:	e783      	b.n	8005f8a <ai_platform_network_init+0x9a>
 8006082:	2213      	movs	r2, #19
 8006084:	2116      	movs	r1, #22
 8006086:	f104 0010 	add.w	r0, r4, #16
 800608a:	f000 fb33 	bl	80066f4 <core_set_error>
 800608e:	e77c      	b.n	8005f8a <ai_platform_network_init+0x9a>
 8006090:	2110      	movs	r1, #16
 8006092:	2211      	movs	r2, #17
 8006094:	1860      	adds	r0, r4, r1
 8006096:	f000 fb2d 	bl	80066f4 <core_set_error>
 800609a:	e776      	b.n	8005f8a <ai_platform_network_init+0x9a>
 800609c:	46be      	mov	lr, r7
 800609e:	e794      	b.n	8005fca <ai_platform_network_init+0xda>
 80060a0:	2110      	movs	r1, #16
 80060a2:	2213      	movs	r2, #19
 80060a4:	1860      	adds	r0, r4, r1
 80060a6:	f000 fb25 	bl	80066f4 <core_set_error>
 80060aa:	463e      	mov	r6, r7
 80060ac:	e76d      	b.n	8005f8a <ai_platform_network_init+0x9a>
 80060ae:	bf00      	nop
 80060b0:	a1c00100 	.word	0xa1c00100
 80060b4:	e0042000 	.word	0xe0042000
 80060b8:	58024000 	.word	0x58024000
 80060bc:	f407a5c2 	.word	0xf407a5c2
 80060c0:	b5e8b5cd 	.word	0xb5e8b5cd
 80060c4:	40023000 	.word	0x40023000
 80060c8:	a1facade 	.word	0xa1facade

080060cc <ai_platform_network_post_init>:
 80060cc:	b538      	push	{r3, r4, r5, lr}
 80060ce:	b1f0      	cbz	r0, 800610e <ai_platform_network_post_init+0x42>
 80060d0:	4b3c      	ldr	r3, [pc, #240]	; (80061c4 <ai_platform_network_post_init+0xf8>)
 80060d2:	6802      	ldr	r2, [r0, #0]
 80060d4:	429a      	cmp	r2, r3
 80060d6:	4604      	mov	r4, r0
 80060d8:	d119      	bne.n	800610e <ai_platform_network_post_init+0x42>
 80060da:	f7ff fb4b 	bl	8005774 <_ai_platform_acquire_crc>
 80060de:	4b3a      	ldr	r3, [pc, #232]	; (80061c8 <ai_platform_network_post_init+0xfc>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80060e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060ea:	d03b      	beq.n	8006164 <ai_platform_network_post_init+0x98>
 80060ec:	4a37      	ldr	r2, [pc, #220]	; (80061cc <ai_platform_network_post_init+0x100>)
 80060ee:	2301      	movs	r3, #1
 80060f0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80060f4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d1fb      	bne.n	80060f4 <ai_platform_network_post_init+0x28>
 80060fc:	4b34      	ldr	r3, [pc, #208]	; (80061d0 <ai_platform_network_post_init+0x104>)
 80060fe:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006102:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006106:	4b33      	ldr	r3, [pc, #204]	; (80061d4 <ai_platform_network_post_init+0x108>)
 8006108:	429a      	cmp	r2, r3
 800610a:	d037      	beq.n	800617c <ai_platform_network_post_init+0xb0>
 800610c:	e7fe      	b.n	800610c <ai_platform_network_post_init+0x40>
 800610e:	f7ff fb31 	bl	8005774 <_ai_platform_acquire_crc>
 8006112:	4b2d      	ldr	r3, [pc, #180]	; (80061c8 <ai_platform_network_post_init+0xfc>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800611a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800611e:	d010      	beq.n	8006142 <ai_platform_network_post_init+0x76>
 8006120:	4a2a      	ldr	r2, [pc, #168]	; (80061cc <ai_platform_network_post_init+0x100>)
 8006122:	2301      	movs	r3, #1
 8006124:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006128:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800612c:	2b00      	cmp	r3, #0
 800612e:	d1fb      	bne.n	8006128 <ai_platform_network_post_init+0x5c>
 8006130:	4b27      	ldr	r3, [pc, #156]	; (80061d0 <ai_platform_network_post_init+0x104>)
 8006132:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006136:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800613a:	4b26      	ldr	r3, [pc, #152]	; (80061d4 <ai_platform_network_post_init+0x108>)
 800613c:	429a      	cmp	r2, r3
 800613e:	d00d      	beq.n	800615c <ai_platform_network_post_init+0x90>
 8006140:	e7fe      	b.n	8006140 <ai_platform_network_post_init+0x74>
 8006142:	4a25      	ldr	r2, [pc, #148]	; (80061d8 <ai_platform_network_post_init+0x10c>)
 8006144:	2301      	movs	r3, #1
 8006146:	6093      	str	r3, [r2, #8]
 8006148:	6893      	ldr	r3, [r2, #8]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d1fc      	bne.n	8006148 <ai_platform_network_post_init+0x7c>
 800614e:	4b20      	ldr	r3, [pc, #128]	; (80061d0 <ai_platform_network_post_init+0x104>)
 8006150:	6013      	str	r3, [r2, #0]
 8006152:	6812      	ldr	r2, [r2, #0]
 8006154:	4b1f      	ldr	r3, [pc, #124]	; (80061d4 <ai_platform_network_post_init+0x108>)
 8006156:	429a      	cmp	r2, r3
 8006158:	d000      	beq.n	800615c <ai_platform_network_post_init+0x90>
 800615a:	e7fe      	b.n	800615a <ai_platform_network_post_init+0x8e>
 800615c:	f7ff fb0c 	bl	8005778 <_ai_platform_release_crc>
 8006160:	2000      	movs	r0, #0
 8006162:	bd38      	pop	{r3, r4, r5, pc}
 8006164:	4a1c      	ldr	r2, [pc, #112]	; (80061d8 <ai_platform_network_post_init+0x10c>)
 8006166:	2301      	movs	r3, #1
 8006168:	6093      	str	r3, [r2, #8]
 800616a:	6893      	ldr	r3, [r2, #8]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d1fc      	bne.n	800616a <ai_platform_network_post_init+0x9e>
 8006170:	4b17      	ldr	r3, [pc, #92]	; (80061d0 <ai_platform_network_post_init+0x104>)
 8006172:	6013      	str	r3, [r2, #0]
 8006174:	6812      	ldr	r2, [r2, #0]
 8006176:	4b17      	ldr	r3, [pc, #92]	; (80061d4 <ai_platform_network_post_init+0x108>)
 8006178:	429a      	cmp	r2, r3
 800617a:	d11a      	bne.n	80061b2 <ai_platform_network_post_init+0xe6>
 800617c:	f7ff fafc 	bl	8005778 <_ai_platform_release_crc>
 8006180:	68e3      	ldr	r3, [r4, #12]
 8006182:	f013 0502 	ands.w	r5, r3, #2
 8006186:	d015      	beq.n	80061b4 <ai_platform_network_post_init+0xe8>
 8006188:	4620      	mov	r0, r4
 800618a:	f000 faf7 	bl	800677c <ai_layers_post_init_all>
 800618e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006190:	b16b      	cbz	r3, 80061ae <ai_platform_network_post_init+0xe2>
 8006192:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8006194:	e007      	b.n	80061a6 <ai_platform_network_post_init+0xda>
 8006196:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 800619a:	4798      	blx	r3
 800619c:	692b      	ldr	r3, [r5, #16]
 800619e:	42ab      	cmp	r3, r5
 80061a0:	d005      	beq.n	80061ae <ai_platform_network_post_init+0xe2>
 80061a2:	b123      	cbz	r3, 80061ae <ai_platform_network_post_init+0xe2>
 80061a4:	461d      	mov	r5, r3
 80061a6:	4629      	mov	r1, r5
 80061a8:	2000      	movs	r0, #0
 80061aa:	2d00      	cmp	r5, #0
 80061ac:	d1f3      	bne.n	8006196 <ai_platform_network_post_init+0xca>
 80061ae:	2001      	movs	r0, #1
 80061b0:	bd38      	pop	{r3, r4, r5, pc}
 80061b2:	e7fe      	b.n	80061b2 <ai_platform_network_post_init+0xe6>
 80061b4:	2210      	movs	r2, #16
 80061b6:	2111      	movs	r1, #17
 80061b8:	18a0      	adds	r0, r4, r2
 80061ba:	f000 fa9b 	bl	80066f4 <core_set_error>
 80061be:	4628      	mov	r0, r5
 80061c0:	bd38      	pop	{r3, r4, r5, pc}
 80061c2:	bf00      	nop
 80061c4:	a1c00100 	.word	0xa1c00100
 80061c8:	e0042000 	.word	0xe0042000
 80061cc:	58024000 	.word	0x58024000
 80061d0:	f407a5c2 	.word	0xf407a5c2
 80061d4:	b5e8b5cd 	.word	0xb5e8b5cd
 80061d8:	40023000 	.word	0x40023000

080061dc <ai_platform_network_process>:
 80061dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061e0:	460e      	mov	r6, r1
 80061e2:	b085      	sub	sp, #20
 80061e4:	4693      	mov	fp, r2
 80061e6:	4605      	mov	r5, r0
 80061e8:	b120      	cbz	r0, 80061f4 <ai_platform_network_process+0x18>
 80061ea:	4bb8      	ldr	r3, [pc, #736]	; (80064cc <ai_platform_network_process+0x2f0>)
 80061ec:	6802      	ldr	r2, [r0, #0]
 80061ee:	429a      	cmp	r2, r3
 80061f0:	bf18      	it	ne
 80061f2:	2500      	movne	r5, #0
 80061f4:	f7ff fabe 	bl	8005774 <_ai_platform_acquire_crc>
 80061f8:	4bb5      	ldr	r3, [pc, #724]	; (80064d0 <ai_platform_network_process+0x2f4>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006200:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006204:	d010      	beq.n	8006228 <ai_platform_network_process+0x4c>
 8006206:	4ab3      	ldr	r2, [pc, #716]	; (80064d4 <ai_platform_network_process+0x2f8>)
 8006208:	2301      	movs	r3, #1
 800620a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800620e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006212:	2b00      	cmp	r3, #0
 8006214:	d1fb      	bne.n	800620e <ai_platform_network_process+0x32>
 8006216:	4bb0      	ldr	r3, [pc, #704]	; (80064d8 <ai_platform_network_process+0x2fc>)
 8006218:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800621c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006220:	4bae      	ldr	r3, [pc, #696]	; (80064dc <ai_platform_network_process+0x300>)
 8006222:	429a      	cmp	r2, r3
 8006224:	d00d      	beq.n	8006242 <ai_platform_network_process+0x66>
 8006226:	e7fe      	b.n	8006226 <ai_platform_network_process+0x4a>
 8006228:	4aad      	ldr	r2, [pc, #692]	; (80064e0 <ai_platform_network_process+0x304>)
 800622a:	2301      	movs	r3, #1
 800622c:	6093      	str	r3, [r2, #8]
 800622e:	6893      	ldr	r3, [r2, #8]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d1fc      	bne.n	800622e <ai_platform_network_process+0x52>
 8006234:	4ba8      	ldr	r3, [pc, #672]	; (80064d8 <ai_platform_network_process+0x2fc>)
 8006236:	6013      	str	r3, [r2, #0]
 8006238:	6812      	ldr	r2, [r2, #0]
 800623a:	4ba8      	ldr	r3, [pc, #672]	; (80064dc <ai_platform_network_process+0x300>)
 800623c:	429a      	cmp	r2, r3
 800623e:	f040 812c 	bne.w	800649a <ai_platform_network_process+0x2be>
 8006242:	f7ff fa99 	bl	8005778 <_ai_platform_release_crc>
 8006246:	2d00      	cmp	r5, #0
 8006248:	f000 8154 	beq.w	80064f4 <ai_platform_network_process+0x318>
 800624c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 800624e:	2b00      	cmp	r3, #0
 8006250:	f000 8124 	beq.w	800649c <ai_platform_network_process+0x2c0>
 8006254:	68eb      	ldr	r3, [r5, #12]
 8006256:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 800625a:	f003 0303 	and.w	r3, r3, #3
 800625e:	2700      	movs	r7, #0
 8006260:	2b03      	cmp	r3, #3
 8006262:	616f      	str	r7, [r5, #20]
 8006264:	f040 813e 	bne.w	80064e4 <ai_platform_network_process+0x308>
 8006268:	2e00      	cmp	r6, #0
 800626a:	f000 811d 	beq.w	80064a8 <ai_platform_network_process+0x2cc>
 800626e:	f1ba 0f00 	cmp.w	sl, #0
 8006272:	f000 8119 	beq.w	80064a8 <ai_platform_network_process+0x2cc>
 8006276:	f8ba 3000 	ldrh.w	r3, [sl]
 800627a:	2b00      	cmp	r3, #0
 800627c:	f000 8114 	beq.w	80064a8 <ai_platform_network_process+0x2cc>
 8006280:	69b3      	ldr	r3, [r6, #24]
 8006282:	f8cd b00c 	str.w	fp, [sp, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	e9cd 3501 	strd	r3, r5, [sp, #4]
 800628c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d072      	beq.n	800637a <ai_platform_network_process+0x19e>
 8006294:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8006298:	2c00      	cmp	r4, #0
 800629a:	d06e      	beq.n	800637a <ai_platform_network_process+0x19e>
 800629c:	f8da 3008 	ldr.w	r3, [sl, #8]
 80062a0:	f8d3 9000 	ldr.w	r9, [r3]
 80062a4:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 80062a8:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 80062ac:	f000 81de 	beq.w	800666c <ai_platform_network_process+0x490>
 80062b0:	69a3      	ldr	r3, [r4, #24]
 80062b2:	2101      	movs	r1, #1
 80062b4:	4630      	mov	r0, r6
 80062b6:	685d      	ldr	r5, [r3, #4]
 80062b8:	f7ff fa0e 	bl	80056d8 <ai_buffer_get_size>
 80062bc:	4285      	cmp	r5, r0
 80062be:	f0c0 811b 	bcc.w	80064f8 <ai_platform_network_process+0x31c>
 80062c2:	68e0      	ldr	r0, [r4, #12]
 80062c4:	69b1      	ldr	r1, [r6, #24]
 80062c6:	68c2      	ldr	r2, [r0, #12]
 80062c8:	68cb      	ldr	r3, [r1, #12]
 80062ca:	429a      	cmp	r2, r3
 80062cc:	f040 8114 	bne.w	80064f8 <ai_platform_network_process+0x31c>
 80062d0:	6882      	ldr	r2, [r0, #8]
 80062d2:	688b      	ldr	r3, [r1, #8]
 80062d4:	429a      	cmp	r2, r3
 80062d6:	f040 810f 	bne.w	80064f8 <ai_platform_network_process+0x31c>
 80062da:	6842      	ldr	r2, [r0, #4]
 80062dc:	684b      	ldr	r3, [r1, #4]
 80062de:	429a      	cmp	r2, r3
 80062e0:	f040 810a 	bne.w	80064f8 <ai_platform_network_process+0x31c>
 80062e4:	69a3      	ldr	r3, [r4, #24]
 80062e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80062ea:	f001 f9d7 	bl	800769c <ai_array_get_data_byte_size>
 80062ee:	4605      	mov	r5, r0
 80062f0:	4620      	mov	r0, r4
 80062f2:	f001 f9eb 	bl	80076cc <get_tensor_byte_size>
 80062f6:	4285      	cmp	r5, r0
 80062f8:	f0c0 80fe 	bcc.w	80064f8 <ai_platform_network_process+0x31c>
 80062fc:	69a3      	ldr	r3, [r4, #24]
 80062fe:	6818      	ldr	r0, [r3, #0]
 8006300:	f001 f938 	bl	8007574 <ai_array_to_buffer_fmt>
 8006304:	6833      	ldr	r3, [r6, #0]
 8006306:	4058      	eors	r0, r3
 8006308:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 800630c:	f040 81b9 	bne.w	8006682 <ai_platform_network_process+0x4a6>
 8006310:	6873      	ldr	r3, [r6, #4]
 8006312:	2b00      	cmp	r3, #0
 8006314:	f000 81ac 	beq.w	8006670 <ai_platform_network_process+0x494>
 8006318:	69b3      	ldr	r3, [r6, #24]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	2b00      	cmp	r3, #0
 800631e:	f000 819c 	beq.w	800665a <ai_platform_network_process+0x47e>
 8006322:	9a01      	ldr	r2, [sp, #4]
 8006324:	429a      	cmp	r2, r3
 8006326:	bf38      	it	cc
 8006328:	461a      	movcc	r2, r3
 800632a:	4620      	mov	r0, r4
 800632c:	9201      	str	r2, [sp, #4]
 800632e:	f001 f9cd 	bl	80076cc <get_tensor_byte_size>
 8006332:	f8c8 0008 	str.w	r0, [r8, #8]
 8006336:	69b3      	ldr	r3, [r6, #24]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	fb00 f303 	mul.w	r3, r0, r3
 800633e:	f8c8 300c 	str.w	r3, [r8, #12]
 8006342:	6871      	ldr	r1, [r6, #4]
 8006344:	f8c8 1004 	str.w	r1, [r8, #4]
 8006348:	440b      	add	r3, r1
 800634a:	f849 300b 	str.w	r3, [r9, fp]
 800634e:	69a0      	ldr	r0, [r4, #24]
 8006350:	6803      	ldr	r3, [r0, #0]
 8006352:	009a      	lsls	r2, r3, #2
 8006354:	f107 0701 	add.w	r7, r7, #1
 8006358:	f106 061c 	add.w	r6, r6, #28
 800635c:	f100 80af 	bmi.w	80064be <ai_platform_network_process+0x2e2>
 8006360:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8006364:	1a9b      	subs	r3, r3, r2
 8006366:	4419      	add	r1, r3
 8006368:	6081      	str	r1, [r0, #8]
 800636a:	69a3      	ldr	r3, [r4, #24]
 800636c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8006370:	60da      	str	r2, [r3, #12]
 8006372:	f8ba 3000 	ldrh.w	r3, [sl]
 8006376:	42bb      	cmp	r3, r7
 8006378:	d888      	bhi.n	800628c <ai_platform_network_process+0xb0>
 800637a:	e9dd 5b02 	ldrd	r5, fp, [sp, #8]
 800637e:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 8006380:	f1bb 0f00 	cmp.w	fp, #0
 8006384:	f000 8186 	beq.w	8006694 <ai_platform_network_process+0x4b8>
 8006388:	2a01      	cmp	r2, #1
 800638a:	f240 815e 	bls.w	800664a <ai_platform_network_process+0x46e>
 800638e:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 8006392:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8006396:	2b00      	cmp	r3, #0
 8006398:	f000 8157 	beq.w	800664a <ai_platform_network_process+0x46e>
 800639c:	465e      	mov	r6, fp
 800639e:	2700      	movs	r7, #0
 80063a0:	462c      	mov	r4, r5
 80063a2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	f000 80b4 	beq.w	8006514 <ai_platform_network_process+0x338>
 80063ac:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
 80063b0:	2d00      	cmp	r5, #0
 80063b2:	f000 80af 	beq.w	8006514 <ai_platform_network_process+0x338>
 80063b6:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80063ba:	f8d3 8000 	ldr.w	r8, [r3]
 80063be:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 80063c2:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 80063c6:	f000 8171 	beq.w	80066ac <ai_platform_network_process+0x4d0>
 80063ca:	69ab      	ldr	r3, [r5, #24]
 80063cc:	2101      	movs	r1, #1
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	9302      	str	r3, [sp, #8]
 80063d2:	4630      	mov	r0, r6
 80063d4:	f7ff f980 	bl	80056d8 <ai_buffer_get_size>
 80063d8:	9b02      	ldr	r3, [sp, #8]
 80063da:	4283      	cmp	r3, r0
 80063dc:	f0c0 8134 	bcc.w	8006648 <ai_platform_network_process+0x46c>
 80063e0:	68e8      	ldr	r0, [r5, #12]
 80063e2:	69b1      	ldr	r1, [r6, #24]
 80063e4:	68c2      	ldr	r2, [r0, #12]
 80063e6:	68cb      	ldr	r3, [r1, #12]
 80063e8:	429a      	cmp	r2, r3
 80063ea:	f040 812d 	bne.w	8006648 <ai_platform_network_process+0x46c>
 80063ee:	6882      	ldr	r2, [r0, #8]
 80063f0:	688b      	ldr	r3, [r1, #8]
 80063f2:	429a      	cmp	r2, r3
 80063f4:	f040 8128 	bne.w	8006648 <ai_platform_network_process+0x46c>
 80063f8:	6842      	ldr	r2, [r0, #4]
 80063fa:	684b      	ldr	r3, [r1, #4]
 80063fc:	429a      	cmp	r2, r3
 80063fe:	f040 8123 	bne.w	8006648 <ai_platform_network_process+0x46c>
 8006402:	69ab      	ldr	r3, [r5, #24]
 8006404:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006408:	f001 f948 	bl	800769c <ai_array_get_data_byte_size>
 800640c:	9002      	str	r0, [sp, #8]
 800640e:	4628      	mov	r0, r5
 8006410:	f001 f95c 	bl	80076cc <get_tensor_byte_size>
 8006414:	9b02      	ldr	r3, [sp, #8]
 8006416:	4283      	cmp	r3, r0
 8006418:	f0c0 8116 	bcc.w	8006648 <ai_platform_network_process+0x46c>
 800641c:	69ab      	ldr	r3, [r5, #24]
 800641e:	6818      	ldr	r0, [r3, #0]
 8006420:	f001 f8a8 	bl	8007574 <ai_array_to_buffer_fmt>
 8006424:	6833      	ldr	r3, [r6, #0]
 8006426:	4058      	eors	r0, r3
 8006428:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 800642c:	f040 8136 	bne.w	800669c <ai_platform_network_process+0x4c0>
 8006430:	6873      	ldr	r3, [r6, #4]
 8006432:	2b00      	cmp	r3, #0
 8006434:	f000 814d 	beq.w	80066d2 <ai_platform_network_process+0x4f6>
 8006438:	69b3      	ldr	r3, [r6, #24]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	2b00      	cmp	r3, #0
 800643e:	f000 813f 	beq.w	80066c0 <ai_platform_network_process+0x4e4>
 8006442:	9a01      	ldr	r2, [sp, #4]
 8006444:	429a      	cmp	r2, r3
 8006446:	bf38      	it	cc
 8006448:	461a      	movcc	r2, r3
 800644a:	4628      	mov	r0, r5
 800644c:	9201      	str	r2, [sp, #4]
 800644e:	f001 f93d 	bl	80076cc <get_tensor_byte_size>
 8006452:	f8ca 0008 	str.w	r0, [sl, #8]
 8006456:	69b3      	ldr	r3, [r6, #24]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	fb00 f303 	mul.w	r3, r0, r3
 800645e:	f8ca 300c 	str.w	r3, [sl, #12]
 8006462:	6871      	ldr	r1, [r6, #4]
 8006464:	f8ca 1004 	str.w	r1, [sl, #4]
 8006468:	440b      	add	r3, r1
 800646a:	f848 300b 	str.w	r3, [r8, fp]
 800646e:	69a8      	ldr	r0, [r5, #24]
 8006470:	6803      	ldr	r3, [r0, #0]
 8006472:	009b      	lsls	r3, r3, #2
 8006474:	f107 0701 	add.w	r7, r7, #1
 8006478:	f106 061c 	add.w	r6, r6, #28
 800647c:	d445      	bmi.n	800650a <ai_platform_network_process+0x32e>
 800647e:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8006482:	1a9b      	subs	r3, r3, r2
 8006484:	4419      	add	r1, r3
 8006486:	6081      	str	r1, [r0, #8]
 8006488:	69ab      	ldr	r3, [r5, #24]
 800648a:	f8da 2004 	ldr.w	r2, [sl, #4]
 800648e:	60da      	str	r2, [r3, #12]
 8006490:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8006494:	429f      	cmp	r7, r3
 8006496:	d384      	bcc.n	80063a2 <ai_platform_network_process+0x1c6>
 8006498:	e03c      	b.n	8006514 <ai_platform_network_process+0x338>
 800649a:	e7fe      	b.n	800649a <ai_platform_network_process+0x2be>
 800649c:	68ea      	ldr	r2, [r5, #12]
 800649e:	616b      	str	r3, [r5, #20]
 80064a0:	f002 0203 	and.w	r2, r2, #3
 80064a4:	2a03      	cmp	r2, #3
 80064a6:	d11d      	bne.n	80064e4 <ai_platform_network_process+0x308>
 80064a8:	2217      	movs	r2, #23
 80064aa:	2112      	movs	r1, #18
 80064ac:	f105 0010 	add.w	r0, r5, #16
 80064b0:	f000 f920 	bl	80066f4 <core_set_error>
 80064b4:	2400      	movs	r4, #0
 80064b6:	4620      	mov	r0, r4
 80064b8:	b005      	add	sp, #20
 80064ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064be:	f8ba 3000 	ldrh.w	r3, [sl]
 80064c2:	429f      	cmp	r7, r3
 80064c4:	f4ff aee2 	bcc.w	800628c <ai_platform_network_process+0xb0>
 80064c8:	e757      	b.n	800637a <ai_platform_network_process+0x19e>
 80064ca:	bf00      	nop
 80064cc:	a1c00100 	.word	0xa1c00100
 80064d0:	e0042000 	.word	0xe0042000
 80064d4:	58024000 	.word	0x58024000
 80064d8:	f407a5c2 	.word	0xf407a5c2
 80064dc:	b5e8b5cd 	.word	0xb5e8b5cd
 80064e0:	40023000 	.word	0x40023000
 80064e4:	2230      	movs	r2, #48	; 0x30
 80064e6:	2111      	movs	r1, #17
 80064e8:	f105 0010 	add.w	r0, r5, #16
 80064ec:	f000 f902 	bl	80066f4 <core_set_error>
 80064f0:	2400      	movs	r4, #0
 80064f2:	e7e0      	b.n	80064b6 <ai_platform_network_process+0x2da>
 80064f4:	462c      	mov	r4, r5
 80064f6:	e7de      	b.n	80064b6 <ai_platform_network_process+0x2da>
 80064f8:	9d02      	ldr	r5, [sp, #8]
 80064fa:	2218      	movs	r2, #24
 80064fc:	2112      	movs	r1, #18
 80064fe:	f105 0010 	add.w	r0, r5, #16
 8006502:	f000 f8f7 	bl	80066f4 <core_set_error>
 8006506:	2400      	movs	r4, #0
 8006508:	e7d5      	b.n	80064b6 <ai_platform_network_process+0x2da>
 800650a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800650e:	429f      	cmp	r7, r3
 8006510:	f4ff af47 	bcc.w	80063a2 <ai_platform_network_process+0x1c6>
 8006514:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8006518:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 800651a:	82a3      	strh	r3, [r4, #20]
 800651c:	4625      	mov	r5, r4
 800651e:	2a00      	cmp	r2, #0
 8006520:	f040 808c 	bne.w	800663c <ai_platform_network_process+0x460>
 8006524:	4616      	mov	r6, r2
 8006526:	4617      	mov	r7, r2
 8006528:	8aec      	ldrh	r4, [r5, #22]
 800652a:	429c      	cmp	r4, r3
 800652c:	bf38      	it	cc
 800652e:	46ab      	movcc	fp, r5
 8006530:	d2c1      	bcs.n	80064b6 <ai_platform_network_process+0x2da>
 8006532:	2e00      	cmp	r6, #0
 8006534:	d030      	beq.n	8006598 <ai_platform_network_process+0x3bc>
 8006536:	f04f 0800 	mov.w	r8, #0
 800653a:	e014      	b.n	8006566 <ai_platform_network_process+0x38a>
 800653c:	6882      	ldr	r2, [r0, #8]
 800653e:	68c5      	ldr	r5, [r0, #12]
 8006540:	6863      	ldr	r3, [r4, #4]
 8006542:	1b52      	subs	r2, r2, r5
 8006544:	4413      	add	r3, r2
 8006546:	6083      	str	r3, [r0, #8]
 8006548:	698b      	ldr	r3, [r1, #24]
 800654a:	6862      	ldr	r2, [r4, #4]
 800654c:	60da      	str	r2, [r3, #12]
 800654e:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8006552:	f859 200a 	ldr.w	r2, [r9, sl]
 8006556:	440b      	add	r3, r1
 8006558:	4293      	cmp	r3, r2
 800655a:	bf24      	itt	cs
 800655c:	68e3      	ldrcs	r3, [r4, #12]
 800655e:	1ad3      	subcs	r3, r2, r3
 8006560:	6063      	str	r3, [r4, #4]
 8006562:	f108 0801 	add.w	r8, r8, #1
 8006566:	8833      	ldrh	r3, [r6, #0]
 8006568:	4543      	cmp	r3, r8
 800656a:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 800656e:	d913      	bls.n	8006598 <ai_platform_network_process+0x3bc>
 8006570:	6873      	ldr	r3, [r6, #4]
 8006572:	b18b      	cbz	r3, 8006598 <ai_platform_network_process+0x3bc>
 8006574:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8006578:	b171      	cbz	r1, 8006598 <ai_platform_network_process+0x3bc>
 800657a:	6988      	ldr	r0, [r1, #24]
 800657c:	68b2      	ldr	r2, [r6, #8]
 800657e:	6803      	ldr	r3, [r0, #0]
 8006580:	f8d2 9000 	ldr.w	r9, [r2]
 8006584:	009d      	lsls	r5, r3, #2
 8006586:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 800658a:	d5d7      	bpl.n	800653c <ai_platform_network_process+0x360>
 800658c:	6881      	ldr	r1, [r0, #8]
 800658e:	68a2      	ldr	r2, [r4, #8]
 8006590:	6860      	ldr	r0, [r4, #4]
 8006592:	f000 ff01 	bl	8007398 <st_int8_copy>
 8006596:	e7da      	b.n	800654e <ai_platform_network_process+0x372>
 8006598:	4658      	mov	r0, fp
 800659a:	f000 f903 	bl	80067a4 <ai_layers_forward_all>
 800659e:	2f00      	cmp	r7, #0
 80065a0:	d03d      	beq.n	800661e <ai_platform_network_process+0x442>
 80065a2:	2400      	movs	r4, #0
 80065a4:	e016      	b.n	80065d4 <ai_platform_network_process+0x3f8>
 80065a6:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 80065aa:	f859 100a 	ldr.w	r1, [r9, sl]
 80065ae:	4413      	add	r3, r2
 80065b0:	428b      	cmp	r3, r1
 80065b2:	bf24      	itt	cs
 80065b4:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 80065b8:	1acb      	subcs	r3, r1, r3
 80065ba:	f8c8 3004 	str.w	r3, [r8, #4]
 80065be:	6981      	ldr	r1, [r0, #24]
 80065c0:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 80065c4:	1b52      	subs	r2, r2, r5
 80065c6:	4413      	add	r3, r2
 80065c8:	608b      	str	r3, [r1, #8]
 80065ca:	6983      	ldr	r3, [r0, #24]
 80065cc:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80065d0:	60da      	str	r2, [r3, #12]
 80065d2:	3401      	adds	r4, #1
 80065d4:	883b      	ldrh	r3, [r7, #0]
 80065d6:	42a3      	cmp	r3, r4
 80065d8:	d921      	bls.n	800661e <ai_platform_network_process+0x442>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	b1fb      	cbz	r3, 800661e <ai_platform_network_process+0x442>
 80065de:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80065e2:	b1e0      	cbz	r0, 800661e <ai_platform_network_process+0x442>
 80065e4:	68ba      	ldr	r2, [r7, #8]
 80065e6:	6983      	ldr	r3, [r0, #24]
 80065e8:	f8d2 9000 	ldr.w	r9, [r2]
 80065ec:	681a      	ldr	r2, [r3, #0]
 80065ee:	0092      	lsls	r2, r2, #2
 80065f0:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 80065f4:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 80065f8:	d5d5      	bpl.n	80065a6 <ai_platform_network_process+0x3ca>
 80065fa:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 80065fe:	6898      	ldr	r0, [r3, #8]
 8006600:	f000 feca 	bl	8007398 <st_int8_copy>
 8006604:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8006608:	f859 200a 	ldr.w	r2, [r9, sl]
 800660c:	440b      	add	r3, r1
 800660e:	4293      	cmp	r3, r2
 8006610:	bf24      	itt	cs
 8006612:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8006616:	1ad3      	subcs	r3, r2, r3
 8006618:	f8c8 3004 	str.w	r3, [r8, #4]
 800661c:	e7d9      	b.n	80065d2 <ai_platform_network_process+0x3f6>
 800661e:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 8006622:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 8006626:	3401      	adds	r4, #1
 8006628:	b2a4      	uxth	r4, r4
 800662a:	42a3      	cmp	r3, r4
 800662c:	f8ab 4016 	strh.w	r4, [fp, #22]
 8006630:	f63f af7f 	bhi.w	8006532 <ai_platform_network_process+0x356>
 8006634:	4620      	mov	r0, r4
 8006636:	b005      	add	sp, #20
 8006638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800663c:	2a01      	cmp	r2, #1
 800663e:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 8006640:	d03c      	beq.n	80066bc <ai_platform_network_process+0x4e0>
 8006642:	f106 070c 	add.w	r7, r6, #12
 8006646:	e76f      	b.n	8006528 <ai_platform_network_process+0x34c>
 8006648:	4625      	mov	r5, r4
 800664a:	2218      	movs	r2, #24
 800664c:	2113      	movs	r1, #19
 800664e:	f105 0010 	add.w	r0, r5, #16
 8006652:	f000 f84f 	bl	80066f4 <core_set_error>
 8006656:	2400      	movs	r4, #0
 8006658:	e72d      	b.n	80064b6 <ai_platform_network_process+0x2da>
 800665a:	9d02      	ldr	r5, [sp, #8]
 800665c:	4604      	mov	r4, r0
 800665e:	2221      	movs	r2, #33	; 0x21
 8006660:	2112      	movs	r1, #18
 8006662:	f105 0010 	add.w	r0, r5, #16
 8006666:	f000 f845 	bl	80066f4 <core_set_error>
 800666a:	e724      	b.n	80064b6 <ai_platform_network_process+0x2da>
 800666c:	9d02      	ldr	r5, [sp, #8]
 800666e:	e71b      	b.n	80064a8 <ai_platform_network_process+0x2cc>
 8006670:	9d02      	ldr	r5, [sp, #8]
 8006672:	4604      	mov	r4, r0
 8006674:	2217      	movs	r2, #23
 8006676:	2112      	movs	r1, #18
 8006678:	f105 0010 	add.w	r0, r5, #16
 800667c:	f000 f83a 	bl	80066f4 <core_set_error>
 8006680:	e719      	b.n	80064b6 <ai_platform_network_process+0x2da>
 8006682:	9d02      	ldr	r5, [sp, #8]
 8006684:	2219      	movs	r2, #25
 8006686:	2112      	movs	r1, #18
 8006688:	f105 0010 	add.w	r0, r5, #16
 800668c:	f000 f832 	bl	80066f4 <core_set_error>
 8006690:	2400      	movs	r4, #0
 8006692:	e710      	b.n	80064b6 <ai_platform_network_process+0x2da>
 8006694:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8006698:	82ab      	strh	r3, [r5, #20]
 800669a:	e740      	b.n	800651e <ai_platform_network_process+0x342>
 800669c:	f104 0010 	add.w	r0, r4, #16
 80066a0:	2219      	movs	r2, #25
 80066a2:	2113      	movs	r1, #19
 80066a4:	f000 f826 	bl	80066f4 <core_set_error>
 80066a8:	2400      	movs	r4, #0
 80066aa:	e704      	b.n	80064b6 <ai_platform_network_process+0x2da>
 80066ac:	f104 0010 	add.w	r0, r4, #16
 80066b0:	2217      	movs	r2, #23
 80066b2:	2113      	movs	r1, #19
 80066b4:	f000 f81e 	bl	80066f4 <core_set_error>
 80066b8:	4654      	mov	r4, sl
 80066ba:	e6fc      	b.n	80064b6 <ai_platform_network_process+0x2da>
 80066bc:	2700      	movs	r7, #0
 80066be:	e733      	b.n	8006528 <ai_platform_network_process+0x34c>
 80066c0:	4625      	mov	r5, r4
 80066c2:	2221      	movs	r2, #33	; 0x21
 80066c4:	4604      	mov	r4, r0
 80066c6:	2113      	movs	r1, #19
 80066c8:	f105 0010 	add.w	r0, r5, #16
 80066cc:	f000 f812 	bl	80066f4 <core_set_error>
 80066d0:	e6f1      	b.n	80064b6 <ai_platform_network_process+0x2da>
 80066d2:	4625      	mov	r5, r4
 80066d4:	2217      	movs	r2, #23
 80066d6:	4604      	mov	r4, r0
 80066d8:	2113      	movs	r1, #19
 80066da:	f105 0010 	add.w	r0, r5, #16
 80066de:	f000 f809 	bl	80066f4 <core_set_error>
 80066e2:	e6e8      	b.n	80064b6 <ai_platform_network_process+0x2da>

080066e4 <core_init>:
 80066e4:	2001      	movs	r0, #1
 80066e6:	4770      	bx	lr

080066e8 <core_get_error>:
 80066e8:	4603      	mov	r3, r0
 80066ea:	2200      	movs	r2, #0
 80066ec:	6800      	ldr	r0, [r0, #0]
 80066ee:	601a      	str	r2, [r3, #0]
 80066f0:	4770      	bx	lr
 80066f2:	bf00      	nop

080066f4 <core_set_error>:
 80066f4:	4603      	mov	r3, r0
 80066f6:	7800      	ldrb	r0, [r0, #0]
 80066f8:	b108      	cbz	r0, 80066fe <core_set_error+0xa>
 80066fa:	2000      	movs	r0, #0
 80066fc:	4770      	bx	lr
 80066fe:	7019      	strb	r1, [r3, #0]
 8006700:	6819      	ldr	r1, [r3, #0]
 8006702:	f362 211f 	bfi	r1, r2, #8, #24
 8006706:	2001      	movs	r0, #1
 8006708:	6019      	str	r1, [r3, #0]
 800670a:	4770      	bx	lr

0800670c <ai_check_custom_types>:
 800670c:	b082      	sub	sp, #8
 800670e:	4b13      	ldr	r3, [pc, #76]	; (800675c <ai_check_custom_types+0x50>)
 8006710:	9301      	str	r3, [sp, #4]
 8006712:	b118      	cbz	r0, 800671c <ai_check_custom_types+0x10>
 8006714:	7803      	ldrb	r3, [r0, #0]
 8006716:	2b03      	cmp	r3, #3
 8006718:	d002      	beq.n	8006720 <ai_check_custom_types+0x14>
 800671a:	2000      	movs	r0, #0
 800671c:	b002      	add	sp, #8
 800671e:	4770      	bx	lr
 8006720:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8006724:	4293      	cmp	r3, r2
 8006726:	d004      	beq.n	8006732 <ai_check_custom_types+0x26>
 8006728:	2001      	movs	r0, #1
 800672a:	f080 0001 	eor.w	r0, r0, #1
 800672e:	b002      	add	sp, #8
 8006730:	4770      	bx	lr
 8006732:	7842      	ldrb	r2, [r0, #1]
 8006734:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8006738:	429a      	cmp	r2, r3
 800673a:	f100 0001 	add.w	r0, r0, #1
 800673e:	d1f3      	bne.n	8006728 <ai_check_custom_types+0x1c>
 8006740:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8006744:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8006748:	429a      	cmp	r2, r3
 800674a:	d1ed      	bne.n	8006728 <ai_check_custom_types+0x1c>
 800674c:	7842      	ldrb	r2, [r0, #1]
 800674e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006752:	429a      	cmp	r2, r3
 8006754:	d1e8      	bne.n	8006728 <ai_check_custom_types+0x1c>
 8006756:	2000      	movs	r0, #0
 8006758:	e7e7      	b.n	800672a <ai_check_custom_types+0x1e>
 800675a:	bf00      	nop
 800675c:	84048403 	.word	0x84048403

08006760 <ai_layers_init_all>:
 8006760:	4601      	mov	r1, r0
 8006762:	2000      	movs	r0, #0
 8006764:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8006766:	b143      	cbz	r3, 800677a <ai_layers_init_all+0x1a>
 8006768:	691a      	ldr	r2, [r3, #16]
 800676a:	60d9      	str	r1, [r3, #12]
 800676c:	429a      	cmp	r2, r3
 800676e:	f100 0001 	add.w	r0, r0, #1
 8006772:	d002      	beq.n	800677a <ai_layers_init_all+0x1a>
 8006774:	b10a      	cbz	r2, 800677a <ai_layers_init_all+0x1a>
 8006776:	4613      	mov	r3, r2
 8006778:	e7f5      	b.n	8006766 <ai_layers_init_all+0x6>
 800677a:	4770      	bx	lr

0800677c <ai_layers_post_init_all>:
 800677c:	b538      	push	{r3, r4, r5, lr}
 800677e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8006780:	2500      	movs	r5, #0
 8006782:	b16c      	cbz	r4, 80067a0 <ai_layers_post_init_all+0x24>
 8006784:	6863      	ldr	r3, [r4, #4]
 8006786:	07db      	lsls	r3, r3, #31
 8006788:	d504      	bpl.n	8006794 <ai_layers_post_init_all+0x18>
 800678a:	6a23      	ldr	r3, [r4, #32]
 800678c:	4620      	mov	r0, r4
 800678e:	b10b      	cbz	r3, 8006794 <ai_layers_post_init_all+0x18>
 8006790:	4798      	blx	r3
 8006792:	3501      	adds	r5, #1
 8006794:	6923      	ldr	r3, [r4, #16]
 8006796:	42a3      	cmp	r3, r4
 8006798:	d002      	beq.n	80067a0 <ai_layers_post_init_all+0x24>
 800679a:	b10b      	cbz	r3, 80067a0 <ai_layers_post_init_all+0x24>
 800679c:	461c      	mov	r4, r3
 800679e:	e7f0      	b.n	8006782 <ai_layers_post_init_all+0x6>
 80067a0:	4628      	mov	r0, r5
 80067a2:	bd38      	pop	{r3, r4, r5, pc}

080067a4 <ai_layers_forward_all>:
 80067a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067a8:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 80067ac:	4604      	mov	r4, r0
 80067ae:	f1b8 0f00 	cmp.w	r8, #0
 80067b2:	d02b      	beq.n	800680c <ai_layers_forward_all+0x68>
 80067b4:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80067b6:	6381      	str	r1, [r0, #56]	; 0x38
 80067b8:	b321      	cbz	r1, 8006804 <ai_layers_forward_all+0x60>
 80067ba:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80067bc:	2001      	movs	r0, #1
 80067be:	47c0      	blx	r8
 80067c0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80067c2:	b1fe      	cbz	r6, 8006804 <ai_layers_forward_all+0x60>
 80067c4:	2700      	movs	r7, #0
 80067c6:	4631      	mov	r1, r6
 80067c8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80067ca:	2002      	movs	r0, #2
 80067cc:	47c0      	blx	r8
 80067ce:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80067d0:	4628      	mov	r0, r5
 80067d2:	696b      	ldr	r3, [r5, #20]
 80067d4:	4798      	blx	r3
 80067d6:	692e      	ldr	r6, [r5, #16]
 80067d8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80067da:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80067dc:	42b5      	cmp	r5, r6
 80067de:	f04f 0003 	mov.w	r0, #3
 80067e2:	d007      	beq.n	80067f4 <ai_layers_forward_all+0x50>
 80067e4:	47c0      	blx	r8
 80067e6:	3701      	adds	r7, #1
 80067e8:	63a6      	str	r6, [r4, #56]	; 0x38
 80067ea:	2e00      	cmp	r6, #0
 80067ec:	d1eb      	bne.n	80067c6 <ai_layers_forward_all+0x22>
 80067ee:	4638      	mov	r0, r7
 80067f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067f4:	2003      	movs	r0, #3
 80067f6:	47c0      	blx	r8
 80067f8:	2300      	movs	r3, #0
 80067fa:	3701      	adds	r7, #1
 80067fc:	63a3      	str	r3, [r4, #56]	; 0x38
 80067fe:	4638      	mov	r0, r7
 8006800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006804:	2700      	movs	r7, #0
 8006806:	4638      	mov	r0, r7
 8006808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800680c:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800680e:	6385      	str	r5, [r0, #56]	; 0x38
 8006810:	2d00      	cmp	r5, #0
 8006812:	d0f7      	beq.n	8006804 <ai_layers_forward_all+0x60>
 8006814:	4647      	mov	r7, r8
 8006816:	696b      	ldr	r3, [r5, #20]
 8006818:	4628      	mov	r0, r5
 800681a:	4798      	blx	r3
 800681c:	462b      	mov	r3, r5
 800681e:	692d      	ldr	r5, [r5, #16]
 8006820:	429d      	cmp	r5, r3
 8006822:	d004      	beq.n	800682e <ai_layers_forward_all+0x8a>
 8006824:	63a5      	str	r5, [r4, #56]	; 0x38
 8006826:	3701      	adds	r7, #1
 8006828:	2d00      	cmp	r5, #0
 800682a:	d1f4      	bne.n	8006816 <ai_layers_forward_all+0x72>
 800682c:	e7df      	b.n	80067ee <ai_layers_forward_all+0x4a>
 800682e:	2300      	movs	r3, #0
 8006830:	63a3      	str	r3, [r4, #56]	; 0x38
 8006832:	3701      	adds	r7, #1
 8006834:	e7db      	b.n	80067ee <ai_layers_forward_all+0x4a>
 8006836:	bf00      	nop

08006838 <forward_dense>:
 8006838:	6983      	ldr	r3, [r0, #24]
 800683a:	881a      	ldrh	r2, [r3, #0]
 800683c:	2a00      	cmp	r2, #0
 800683e:	f000 8181 	beq.w	8006b44 <forward_dense+0x30c>
 8006842:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006846:	ed2d 8b02 	vpush	{d8}
 800684a:	f8d3 c004 	ldr.w	ip, [r3, #4]
 800684e:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8006852:	b095      	sub	sp, #84	; 0x54
 8006854:	b105      	cbz	r5, 8006858 <forward_dense+0x20>
 8006856:	682d      	ldr	r5, [r5, #0]
 8006858:	2a01      	cmp	r2, #1
 800685a:	f000 828f 	beq.w	8006d7c <forward_dense+0x544>
 800685e:	f8dc 6010 	ldr.w	r6, [ip, #16]
 8006862:	b106      	cbz	r6, 8006866 <forward_dense+0x2e>
 8006864:	6836      	ldr	r6, [r6, #0]
 8006866:	2a02      	cmp	r2, #2
 8006868:	f000 816e 	beq.w	8006b48 <forward_dense+0x310>
 800686c:	f8dc 301c 	ldr.w	r3, [ip, #28]
 8006870:	930b      	str	r3, [sp, #44]	; 0x2c
 8006872:	2b00      	cmp	r3, #0
 8006874:	f000 8274 	beq.w	8006d60 <forward_dense+0x528>
 8006878:	4619      	mov	r1, r3
 800687a:	f8bc 3018 	ldrh.w	r3, [ip, #24]
 800687e:	6809      	ldr	r1, [r1, #0]
 8006880:	910d      	str	r1, [sp, #52]	; 0x34
 8006882:	2b01      	cmp	r3, #1
 8006884:	f240 826e 	bls.w	8006d64 <forward_dense+0x52c>
 8006888:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	930b      	str	r3, [sp, #44]	; 0x2c
 800688e:	460b      	mov	r3, r1
 8006890:	68e8      	ldr	r0, [r5, #12]
 8006892:	68f7      	ldr	r7, [r6, #12]
 8006894:	6840      	ldr	r0, [r0, #4]
 8006896:	6999      	ldr	r1, [r3, #24]
 8006898:	9013      	str	r0, [sp, #76]	; 0x4c
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	680b      	ldr	r3, [r1, #0]
 800689e:	9012      	str	r0, [sp, #72]	; 0x48
 80068a0:	e9d7 4702 	ldrd	r4, r7, [r7, #8]
 80068a4:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 80068a8:	fb00 f404 	mul.w	r4, r0, r4
 80068ac:	f3c3 5041 	ubfx	r0, r3, #21, #2
 80068b0:	fa4e f000 	asr.w	r0, lr, r0
 80068b4:	2a03      	cmp	r2, #3
 80068b6:	9010      	str	r0, [sp, #64]	; 0x40
 80068b8:	f000 825d 	beq.w	8006d76 <forward_dense+0x53e>
 80068bc:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
 80068c0:	f3c3 4343 	ubfx	r3, r3, #17, #4
 80068c4:	2a00      	cmp	r2, #0
 80068c6:	f000 8246 	beq.w	8006d56 <forward_dense+0x51e>
 80068ca:	6812      	ldr	r2, [r2, #0]
 80068cc:	2a00      	cmp	r2, #0
 80068ce:	f000 8242 	beq.w	8006d56 <forward_dense+0x51e>
 80068d2:	2b04      	cmp	r3, #4
 80068d4:	f8d2 9018 	ldr.w	r9, [r2, #24]
 80068d8:	f000 822c 	beq.w	8006d34 <forward_dense+0x4fc>
 80068dc:	2b08      	cmp	r3, #8
 80068de:	f000 8229 	beq.w	8006d34 <forward_dense+0x4fc>
 80068e2:	f04f 0b00 	mov.w	fp, #0
 80068e6:	69b2      	ldr	r2, [r6, #24]
 80068e8:	69ab      	ldr	r3, [r5, #24]
 80068ea:	6891      	ldr	r1, [r2, #8]
 80068ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	6952      	ldr	r2, [r2, #20]
 80068f2:	9106      	str	r1, [sp, #24]
 80068f4:	fb07 f404 	mul.w	r4, r7, r4
 80068f8:	f8d2 9004 	ldr.w	r9, [r2, #4]
 80068fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80068fe:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8006902:	4281      	cmp	r1, r0
 8006904:	ea4f 0482 	mov.w	r4, r2, lsl #2
 8006908:	900e      	str	r0, [sp, #56]	; 0x38
 800690a:	940c      	str	r4, [sp, #48]	; 0x30
 800690c:	eb01 0882 	add.w	r8, r1, r2, lsl #2
 8006910:	f080 8113 	bcs.w	8006b3a <forward_dense+0x302>
 8006914:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006916:	ed9f 8a93 	vldr	s16, [pc, #588]	; 8006b64 <forward_dense+0x32c>
 800691a:	f021 0201 	bic.w	r2, r1, #1
 800691e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8006922:	9204      	str	r2, [sp, #16]
 8006924:	f001 0201 	and.w	r2, r1, #1
 8006928:	08c8      	lsrs	r0, r1, #3
 800692a:	9208      	str	r2, [sp, #32]
 800692c:	008a      	lsls	r2, r1, #2
 800692e:	f001 0a07 	and.w	sl, r1, #7
 8006932:	920f      	str	r2, [sp, #60]	; 0x3c
 8006934:	eb03 1240 	add.w	r2, r3, r0, lsl #5
 8006938:	3320      	adds	r3, #32
 800693a:	465c      	mov	r4, fp
 800693c:	9007      	str	r0, [sp, #28]
 800693e:	46cb      	mov	fp, r9
 8006940:	9205      	str	r2, [sp, #20]
 8006942:	9302      	str	r3, [sp, #8]
 8006944:	46c1      	mov	r9, r8
 8006946:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 800694a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800694c:	699b      	ldr	r3, [r3, #24]
 800694e:	689a      	ldr	r2, [r3, #8]
 8006950:	9b02      	ldr	r3, [sp, #8]
 8006952:	3b20      	subs	r3, #32
 8006954:	930a      	str	r3, [sp, #40]	; 0x28
 8006956:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006958:	b10b      	cbz	r3, 800695e <forward_dense+0x126>
 800695a:	699b      	ldr	r3, [r3, #24]
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	2c00      	cmp	r4, #0
 8006960:	f000 81da 	beq.w	8006d18 <forward_dense+0x4e0>
 8006964:	9910      	ldr	r1, [sp, #64]	; 0x40
 8006966:	2904      	cmp	r1, #4
 8006968:	9906      	ldr	r1, [sp, #24]
 800696a:	f000 80fd 	beq.w	8006b68 <forward_dense+0x330>
 800696e:	4549      	cmp	r1, r9
 8006970:	f080 80d2 	bcs.w	8006b18 <forward_dense+0x2e0>
 8006974:	460f      	mov	r7, r1
 8006976:	9907      	ldr	r1, [sp, #28]
 8006978:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800697c:	f8dd a014 	ldr.w	sl, [sp, #20]
 8006980:	1c4e      	adds	r6, r1, #1
 8006982:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8006986:	4694      	mov	ip, r2
 8006988:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800698a:	468e      	mov	lr, r1
 800698c:	2b00      	cmp	r3, #0
 800698e:	f000 80de 	beq.w	8006b4e <forward_dense+0x316>
 8006992:	ecf3 2a01 	vldmia	r3!, {s5}
 8006996:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8006b64 <forward_dense+0x32c>
 800699a:	f1be 0f00 	cmp.w	lr, #0
 800699e:	f000 80de 	beq.w	8006b5e <forward_dense+0x326>
 80069a2:	f10c 0108 	add.w	r1, ip, #8
 80069a6:	4640      	mov	r0, r8
 80069a8:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 80069ac:	ed10 3a07 	vldr	s6, [r0, #-28]	; 0xffffffe4
 80069b0:	ed50 3a08 	vldr	s7, [r0, #-32]	; 0xffffffe0
 80069b4:	ed10 4a06 	vldr	s8, [r0, #-24]	; 0xffffffe8
 80069b8:	ed50 4a05 	vldr	s9, [r0, #-20]	; 0xffffffec
 80069bc:	ed10 5a04 	vldr	s10, [r0, #-16]
 80069c0:	ed50 5a03 	vldr	s11, [r0, #-12]
 80069c4:	ed10 6a02 	vldr	s12, [r0, #-8]
 80069c8:	ed50 6a01 	vldr	s13, [r0, #-4]
 80069cc:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80069d0:	edd5 7a00 	vldr	s15, [r5]
 80069d4:	f811 5c08 	ldrb.w	r5, [r1, #-8]
 80069d8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80069dc:	ee67 7a83 	vmul.f32	s15, s15, s6
 80069e0:	ed95 3a00 	vldr	s6, [r5]
 80069e4:	f811 5c06 	ldrb.w	r5, [r1, #-6]
 80069e8:	eee3 7a23 	vfma.f32	s15, s6, s7
 80069ec:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80069f0:	3108      	adds	r1, #8
 80069f2:	edd5 3a00 	vldr	s7, [r5]
 80069f6:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 80069fa:	eee3 7a84 	vfma.f32	s15, s7, s8
 80069fe:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006a02:	3020      	adds	r0, #32
 8006a04:	ed95 4a00 	vldr	s8, [r5]
 8006a08:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 8006a0c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8006a10:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006a14:	edd5 4a00 	vldr	s9, [r5]
 8006a18:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 8006a1c:	eee4 7a85 	vfma.f32	s15, s9, s10
 8006a20:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006a24:	ed95 5a00 	vldr	s10, [r5]
 8006a28:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 8006a2c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8006a30:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006a34:	edd5 5a00 	vldr	s11, [r5]
 8006a38:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 8006a3c:	eee5 7a86 	vfma.f32	s15, s11, s12
 8006a40:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006a44:	428e      	cmp	r6, r1
 8006a46:	ed95 6a00 	vldr	s12, [r5]
 8006a4a:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006a4e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006a52:	d1a9      	bne.n	80069a8 <forward_dense+0x170>
 8006a54:	f1a6 0108 	sub.w	r1, r6, #8
 8006a58:	4650      	mov	r0, sl
 8006a5a:	2a00      	cmp	r2, #0
 8006a5c:	d04a      	beq.n	8006af4 <forward_dense+0x2bc>
 8006a5e:	780d      	ldrb	r5, [r1, #0]
 8006a60:	edd0 6a00 	vldr	s13, [r0]
 8006a64:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006a68:	edd5 7a00 	vldr	s15, [r5]
 8006a6c:	2a01      	cmp	r2, #1
 8006a6e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006a72:	d03f      	beq.n	8006af4 <forward_dense+0x2bc>
 8006a74:	784d      	ldrb	r5, [r1, #1]
 8006a76:	edd0 6a01 	vldr	s13, [r0, #4]
 8006a7a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006a7e:	edd5 7a00 	vldr	s15, [r5]
 8006a82:	2a02      	cmp	r2, #2
 8006a84:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006a88:	d034      	beq.n	8006af4 <forward_dense+0x2bc>
 8006a8a:	788d      	ldrb	r5, [r1, #2]
 8006a8c:	edd0 6a02 	vldr	s13, [r0, #8]
 8006a90:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006a94:	edd5 7a00 	vldr	s15, [r5]
 8006a98:	2a03      	cmp	r2, #3
 8006a9a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006a9e:	d029      	beq.n	8006af4 <forward_dense+0x2bc>
 8006aa0:	78cd      	ldrb	r5, [r1, #3]
 8006aa2:	edd0 6a03 	vldr	s13, [r0, #12]
 8006aa6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006aaa:	edd5 7a00 	vldr	s15, [r5]
 8006aae:	2a04      	cmp	r2, #4
 8006ab0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006ab4:	d01e      	beq.n	8006af4 <forward_dense+0x2bc>
 8006ab6:	790d      	ldrb	r5, [r1, #4]
 8006ab8:	edd0 6a04 	vldr	s13, [r0, #16]
 8006abc:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006ac0:	edd5 7a00 	vldr	s15, [r5]
 8006ac4:	2a05      	cmp	r2, #5
 8006ac6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006aca:	d013      	beq.n	8006af4 <forward_dense+0x2bc>
 8006acc:	794d      	ldrb	r5, [r1, #5]
 8006ace:	edd0 6a05 	vldr	s13, [r0, #20]
 8006ad2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006ad6:	edd5 7a00 	vldr	s15, [r5]
 8006ada:	2a06      	cmp	r2, #6
 8006adc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006ae0:	d008      	beq.n	8006af4 <forward_dense+0x2bc>
 8006ae2:	7989      	ldrb	r1, [r1, #6]
 8006ae4:	edd0 7a06 	vldr	s15, [r0, #24]
 8006ae8:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8006aec:	edd1 6a00 	vldr	s13, [r1]
 8006af0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006af4:	44dc      	add	ip, fp
 8006af6:	445e      	add	r6, fp
 8006af8:	ee32 7a87 	vadd.f32	s14, s5, s14
 8006afc:	eca7 7a01 	vstmia	r7!, {s14}
 8006b00:	454f      	cmp	r7, r9
 8006b02:	f4ff af43 	bcc.w	800698c <forward_dense+0x154>
 8006b06:	9a06      	ldr	r2, [sp, #24]
 8006b08:	eba9 0302 	sub.w	r3, r9, r2
 8006b0c:	3b01      	subs	r3, #1
 8006b0e:	f023 0303 	bic.w	r3, r3, #3
 8006b12:	3304      	adds	r3, #4
 8006b14:	18d3      	adds	r3, r2, r3
 8006b16:	9306      	str	r3, [sp, #24]
 8006b18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b1a:	9a05      	ldr	r2, [sp, #20]
 8006b1c:	4499      	add	r9, r3
 8006b1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006b20:	441a      	add	r2, r3
 8006b22:	9205      	str	r2, [sp, #20]
 8006b24:	9a02      	ldr	r2, [sp, #8]
 8006b26:	441a      	add	r2, r3
 8006b28:	9202      	str	r2, [sp, #8]
 8006b2a:	9a04      	ldr	r2, [sp, #16]
 8006b2c:	441a      	add	r2, r3
 8006b2e:	9204      	str	r2, [sp, #16]
 8006b30:	9b06      	ldr	r3, [sp, #24]
 8006b32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006b34:	4293      	cmp	r3, r2
 8006b36:	f4ff af08 	bcc.w	800694a <forward_dense+0x112>
 8006b3a:	b015      	add	sp, #84	; 0x54
 8006b3c:	ecbd 8b02 	vpop	{d8}
 8006b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b44:	6853      	ldr	r3, [r2, #4]
 8006b46:	deff      	udf	#255	; 0xff
 8006b48:	2300      	movs	r3, #0
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	deff      	udf	#255	; 0xff
 8006b4e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8006b64 <forward_dense+0x32c>
 8006b52:	eef0 2a48 	vmov.f32	s5, s16
 8006b56:	f1be 0f00 	cmp.w	lr, #0
 8006b5a:	f47f af22 	bne.w	80069a2 <forward_dense+0x16a>
 8006b5e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006b60:	4661      	mov	r1, ip
 8006b62:	e77a      	b.n	8006a5a <forward_dense+0x222>
 8006b64:	00000000 	.word	0x00000000
 8006b68:	4549      	cmp	r1, r9
 8006b6a:	d2d5      	bcs.n	8006b18 <forward_dense+0x2e0>
 8006b6c:	9807      	ldr	r0, [sp, #28]
 8006b6e:	9103      	str	r1, [sp, #12]
 8006b70:	9904      	ldr	r1, [sp, #16]
 8006b72:	f100 0c01 	add.w	ip, r0, #1
 8006b76:	3901      	subs	r1, #1
 8006b78:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8006b7c:	9109      	str	r1, [sp, #36]	; 0x24
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	f000 80b2 	beq.w	8006ce8 <forward_dense+0x4b0>
 8006b84:	9907      	ldr	r1, [sp, #28]
 8006b86:	ecf3 2a01 	vldmia	r3!, {s5}
 8006b8a:	ed1f 7a0a 	vldr	s14, [pc, #-40]	; 8006b64 <forward_dense+0x32c>
 8006b8e:	2900      	cmp	r1, #0
 8006b90:	f000 80b2 	beq.w	8006cf8 <forward_dense+0x4c0>
 8006b94:	9902      	ldr	r1, [sp, #8]
 8006b96:	1d10      	adds	r0, r2, #4
 8006b98:	f810 6c04 	ldrb.w	r6, [r0, #-4]
 8006b9c:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
 8006ba0:	f810 5c03 	ldrb.w	r5, [r0, #-3]
 8006ba4:	ed51 3a08 	vldr	s7, [r1, #-32]	; 0xffffffe0
 8006ba8:	ed11 4a06 	vldr	s8, [r1, #-24]	; 0xffffffe8
 8006bac:	ed51 4a05 	vldr	s9, [r1, #-20]	; 0xffffffec
 8006bb0:	ed11 5a04 	vldr	s10, [r1, #-16]
 8006bb4:	ed51 5a03 	vldr	s11, [r1, #-12]
 8006bb8:	ed11 6a02 	vldr	s12, [r1, #-8]
 8006bbc:	ed51 6a01 	vldr	s13, [r1, #-4]
 8006bc0:	f006 070f 	and.w	r7, r6, #15
 8006bc4:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8006bc8:	edd7 7a00 	vldr	s15, [r7]
 8006bcc:	0936      	lsrs	r6, r6, #4
 8006bce:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8006bd2:	ed96 3a00 	vldr	s6, [r6]
 8006bd6:	ee67 7a82 	vmul.f32	s15, s15, s4
 8006bda:	092e      	lsrs	r6, r5, #4
 8006bdc:	eee3 7a23 	vfma.f32	s15, s6, s7
 8006be0:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8006be4:	f005 050f 	and.w	r5, r5, #15
 8006be8:	edd6 3a00 	vldr	s7, [r6]
 8006bec:	f810 6c02 	ldrb.w	r6, [r0, #-2]
 8006bf0:	eee3 7a84 	vfma.f32	s15, s7, s8
 8006bf4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006bf8:	0937      	lsrs	r7, r6, #4
 8006bfa:	ed95 4a00 	vldr	s8, [r5]
 8006bfe:	f810 5c01 	ldrb.w	r5, [r0, #-1]
 8006c02:	eee4 7a24 	vfma.f32	s15, s8, s9
 8006c06:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8006c0a:	f006 060f 	and.w	r6, r6, #15
 8006c0e:	edd7 4a00 	vldr	s9, [r7]
 8006c12:	eee4 7a85 	vfma.f32	s15, s9, s10
 8006c16:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8006c1a:	3004      	adds	r0, #4
 8006c1c:	ed96 5a00 	vldr	s10, [r6]
 8006c20:	092e      	lsrs	r6, r5, #4
 8006c22:	eee5 7a25 	vfma.f32	s15, s10, s11
 8006c26:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8006c2a:	f005 050f 	and.w	r5, r5, #15
 8006c2e:	edd6 5a00 	vldr	s11, [r6]
 8006c32:	eee5 7a86 	vfma.f32	s15, s11, s12
 8006c36:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006c3a:	4584      	cmp	ip, r0
 8006c3c:	ed95 6a00 	vldr	s12, [r5]
 8006c40:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006c44:	f101 0120 	add.w	r1, r1, #32
 8006c48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006c4c:	d1a4      	bne.n	8006b98 <forward_dense+0x360>
 8006c4e:	f8dd e014 	ldr.w	lr, [sp, #20]
 8006c52:	f1ac 0804 	sub.w	r8, ip, #4
 8006c56:	9904      	ldr	r1, [sp, #16]
 8006c58:	458e      	cmp	lr, r1
 8006c5a:	d22a      	bcs.n	8006cb2 <forward_dense+0x47a>
 8006c5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c5e:	eba1 070e 	sub.w	r7, r1, lr
 8006c62:	ea4f 0ad7 	mov.w	sl, r7, lsr #3
 8006c66:	f10e 0008 	add.w	r0, lr, #8
 8006c6a:	f108 36ff 	add.w	r6, r8, #4294967295
 8006c6e:	eb08 07d7 	add.w	r7, r8, r7, lsr #3
 8006c72:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006c76:	ed50 5a01 	vldr	s11, [r0, #-4]
 8006c7a:	ed50 6a02 	vldr	s13, [r0, #-8]
 8006c7e:	f001 050f 	and.w	r5, r1, #15
 8006c82:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006c86:	edd5 7a00 	vldr	s15, [r5]
 8006c8a:	0909      	lsrs	r1, r1, #4
 8006c8c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8006c90:	ed91 6a00 	vldr	s12, [r1]
 8006c94:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8006c98:	42b7      	cmp	r7, r6
 8006c9a:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006c9e:	f100 0008 	add.w	r0, r0, #8
 8006ca2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006ca6:	d1e4      	bne.n	8006c72 <forward_dense+0x43a>
 8006ca8:	f10a 0a01 	add.w	sl, sl, #1
 8006cac:	44d0      	add	r8, sl
 8006cae:	eb0e 0eca 	add.w	lr, lr, sl, lsl #3
 8006cb2:	9908      	ldr	r1, [sp, #32]
 8006cb4:	b321      	cbz	r1, 8006d00 <forward_dense+0x4c8>
 8006cb6:	f898 1000 	ldrb.w	r1, [r8]
 8006cba:	edde 7a00 	vldr	s15, [lr]
 8006cbe:	0909      	lsrs	r1, r1, #4
 8006cc0:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8006cc4:	edd1 6a00 	vldr	s13, [r1]
 8006cc8:	9903      	ldr	r1, [sp, #12]
 8006cca:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006cce:	445a      	add	r2, fp
 8006cd0:	44dc      	add	ip, fp
 8006cd2:	ee72 2a87 	vadd.f32	s5, s5, s14
 8006cd6:	ece1 2a01 	vstmia	r1!, {s5}
 8006cda:	4589      	cmp	r9, r1
 8006cdc:	9103      	str	r1, [sp, #12]
 8006cde:	f67f af12 	bls.w	8006b06 <forward_dense+0x2ce>
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	f47f af4e 	bne.w	8006b84 <forward_dense+0x34c>
 8006ce8:	9907      	ldr	r1, [sp, #28]
 8006cea:	ed1f 7a62 	vldr	s14, [pc, #-392]	; 8006b64 <forward_dense+0x32c>
 8006cee:	eef0 2a48 	vmov.f32	s5, s16
 8006cf2:	2900      	cmp	r1, #0
 8006cf4:	f47f af4e 	bne.w	8006b94 <forward_dense+0x35c>
 8006cf8:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 8006cfc:	4690      	mov	r8, r2
 8006cfe:	e7aa      	b.n	8006c56 <forward_dense+0x41e>
 8006d00:	9903      	ldr	r1, [sp, #12]
 8006d02:	ee32 7a87 	vadd.f32	s14, s5, s14
 8006d06:	445a      	add	r2, fp
 8006d08:	eca1 7a01 	vstmia	r1!, {s14}
 8006d0c:	4549      	cmp	r1, r9
 8006d0e:	9103      	str	r1, [sp, #12]
 8006d10:	44dc      	add	ip, fp
 8006d12:	f4ff af34 	bcc.w	8006b7e <forward_dense+0x346>
 8006d16:	e6f6      	b.n	8006b06 <forward_dense+0x2ce>
 8006d18:	9912      	ldr	r1, [sp, #72]	; 0x48
 8006d1a:	9d06      	ldr	r5, [sp, #24]
 8006d1c:	9101      	str	r1, [sp, #4]
 8006d1e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006d20:	9100      	str	r1, [sp, #0]
 8006d22:	4628      	mov	r0, r5
 8006d24:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006d26:	f000 fa13 	bl	8007150 <forward_lite_dense_if32of32wf32>
 8006d2a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006d2c:	462b      	mov	r3, r5
 8006d2e:	4413      	add	r3, r2
 8006d30:	9306      	str	r3, [sp, #24]
 8006d32:	e6f1      	b.n	8006b18 <forward_dense+0x2e0>
 8006d34:	f8d1 800c 	ldr.w	r8, [r1, #12]
 8006d38:	f1b9 0f00 	cmp.w	r9, #0
 8006d3c:	d016      	beq.n	8006d6c <forward_dense+0x534>
 8006d3e:	e9d9 0100 	ldrd	r0, r1, [r9]
 8006d42:	f000 fc83 	bl	800764c <ai_array_get_byte_size>
 8006d46:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	4659      	mov	r1, fp
 8006d4e:	4640      	mov	r0, r8
 8006d50:	f000 fb22 	bl	8007398 <st_int8_copy>
 8006d54:	e5c7      	b.n	80068e6 <forward_dense+0xae>
 8006d56:	2b04      	cmp	r3, #4
 8006d58:	d00a      	beq.n	8006d70 <forward_dense+0x538>
 8006d5a:	f04f 0900 	mov.w	r9, #0
 8006d5e:	e5bd      	b.n	80068dc <forward_dense+0xa4>
 8006d60:	930d      	str	r3, [sp, #52]	; 0x34
 8006d62:	e595      	b.n	8006890 <forward_dense+0x58>
 8006d64:	2300      	movs	r3, #0
 8006d66:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d68:	460b      	mov	r3, r1
 8006d6a:	e591      	b.n	8006890 <forward_dense+0x58>
 8006d6c:	46c3      	mov	fp, r8
 8006d6e:	e5ba      	b.n	80068e6 <forward_dense+0xae>
 8006d70:	f8d1 b00c 	ldr.w	fp, [r1, #12]
 8006d74:	e5b7      	b.n	80068e6 <forward_dense+0xae>
 8006d76:	2300      	movs	r3, #0
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	deff      	udf	#255	; 0xff
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	deff      	udf	#255	; 0xff
 8006d82:	bf00      	nop

08006d84 <forward_eltwise>:
 8006d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d88:	6982      	ldr	r2, [r0, #24]
 8006d8a:	b09d      	sub	sp, #116	; 0x74
 8006d8c:	8811      	ldrh	r1, [r2, #0]
 8006d8e:	9003      	str	r0, [sp, #12]
 8006d90:	2900      	cmp	r1, #0
 8006d92:	f000 80c7 	beq.w	8006f24 <forward_eltwise+0x1a0>
 8006d96:	6853      	ldr	r3, [r2, #4]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	f000 810f 	beq.w	8006fbc <forward_eltwise+0x238>
 8006d9e:	881d      	ldrh	r5, [r3, #0]
 8006da0:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8006da4:	f1b8 0f00 	cmp.w	r8, #0
 8006da8:	d001      	beq.n	8006dae <forward_eltwise+0x2a>
 8006daa:	f8d8 8000 	ldr.w	r8, [r8]
 8006dae:	2901      	cmp	r1, #1
 8006db0:	f000 8108 	beq.w	8006fc4 <forward_eltwise+0x240>
 8006db4:	691b      	ldr	r3, [r3, #16]
 8006db6:	9300      	str	r3, [sp, #0]
 8006db8:	b10b      	cbz	r3, 8006dbe <forward_eltwise+0x3a>
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	9300      	str	r3, [sp, #0]
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 8006dc4:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
 8006dc8:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
 8006dcc:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
 8006dd0:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
 8006dd4:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
 8006dd8:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
 8006ddc:	931b      	str	r3, [sp, #108]	; 0x6c
 8006dde:	f240 5302 	movw	r3, #1282	; 0x502
 8006de2:	9307      	str	r3, [sp, #28]
 8006de4:	9309      	str	r3, [sp, #36]	; 0x24
 8006de6:	f240 5301 	movw	r3, #1281	; 0x501
 8006dea:	930b      	str	r3, [sp, #44]	; 0x2c
 8006dec:	9b03      	ldr	r3, [sp, #12]
 8006dee:	e9d3 7307 	ldrd	r7, r3, [r3, #28]
 8006df2:	ac0d      	add	r4, sp, #52	; 0x34
 8006df4:	a812      	add	r0, sp, #72	; 0x48
 8006df6:	a917      	add	r1, sp, #92	; 0x5c
 8006df8:	2d01      	cmp	r5, #1
 8006dfa:	9408      	str	r4, [sp, #32]
 8006dfc:	900a      	str	r0, [sp, #40]	; 0x28
 8006dfe:	910c      	str	r1, [sp, #48]	; 0x30
 8006e00:	9304      	str	r3, [sp, #16]
 8006e02:	f240 80d8 	bls.w	8006fb6 <forward_eltwise+0x232>
 8006e06:	00ab      	lsls	r3, r5, #2
 8006e08:	9305      	str	r3, [sp, #20]
 8006e0a:	2304      	movs	r3, #4
 8006e0c:	9301      	str	r3, [sp, #4]
 8006e0e:	8813      	ldrh	r3, [r2, #0]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	f000 80da 	beq.w	8006fca <forward_eltwise+0x246>
 8006e16:	6853      	ldr	r3, [r2, #4]
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	f000 80d0 	beq.w	8006fc0 <forward_eltwise+0x23c>
 8006e20:	9a01      	ldr	r2, [sp, #4]
 8006e22:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8006e26:	f853 a002 	ldr.w	sl, [r3, r2]
 8006e2a:	f8da 3008 	ldr.w	r3, [sl, #8]
 8006e2e:	4043      	eors	r3, r0
 8006e30:	f033 03ff 	bics.w	r3, r3, #255	; 0xff
 8006e34:	f108 0108 	add.w	r1, r8, #8
 8006e38:	f10a 0908 	add.w	r9, sl, #8
 8006e3c:	d10f      	bne.n	8006e5e <forward_eltwise+0xda>
 8006e3e:	f3c0 2017 	ubfx	r0, r0, #8, #24
 8006e42:	2800      	cmp	r0, #0
 8006e44:	f000 8095 	beq.w	8006f72 <forward_eltwise+0x1ee>
 8006e48:	3801      	subs	r0, #1
 8006e4a:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8006e4e:	f8da 300c 	ldr.w	r3, [sl, #12]
 8006e52:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8006e56:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	d0f1      	beq.n	8006e42 <forward_eltwise+0xbe>
 8006e5e:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8006e62:	9102      	str	r1, [sp, #8]
 8006e64:	689d      	ldr	r5, [r3, #8]
 8006e66:	f8da 3018 	ldr.w	r3, [sl, #24]
 8006e6a:	689c      	ldr	r4, [r3, #8]
 8006e6c:	9b00      	ldr	r3, [sp, #0]
 8006e6e:	699b      	ldr	r3, [r3, #24]
 8006e70:	464a      	mov	r2, r9
 8006e72:	a80b      	add	r0, sp, #44	; 0x2c
 8006e74:	689e      	ldr	r6, [r3, #8]
 8006e76:	f000 fc41 	bl	80076fc <core_get_broadcasted_shape>
 8006e7a:	f8da 2014 	ldr.w	r2, [sl, #20]
 8006e7e:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8006e82:	f8d2 a004 	ldr.w	sl, [r2, #4]
 8006e86:	9a00      	ldr	r2, [sp, #0]
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	6952      	ldr	r2, [r2, #20]
 8006e8c:	9902      	ldr	r1, [sp, #8]
 8006e8e:	f8d2 8004 	ldr.w	r8, [r2, #4]
 8006e92:	a807      	add	r0, sp, #28
 8006e94:	aa0b      	add	r2, sp, #44	; 0x2c
 8006e96:	f000 fc5d 	bl	8007754 <core_compute_offsets>
 8006e9a:	4653      	mov	r3, sl
 8006e9c:	aa0b      	add	r2, sp, #44	; 0x2c
 8006e9e:	4649      	mov	r1, r9
 8006ea0:	a809      	add	r0, sp, #36	; 0x24
 8006ea2:	f000 fc57 	bl	8007754 <core_compute_offsets>
 8006ea6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006ea8:	68d3      	ldr	r3, [r2, #12]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d056      	beq.n	8006f5c <forward_eltwise+0x1d8>
 8006eae:	2300      	movs	r3, #0
 8006eb0:	6890      	ldr	r0, [r2, #8]
 8006eb2:	9302      	str	r3, [sp, #8]
 8006eb4:	2800      	cmp	r0, #0
 8006eb6:	d051      	beq.n	8006f5c <forward_eltwise+0x1d8>
 8006eb8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006eba:	f04f 0b00 	mov.w	fp, #0
 8006ebe:	f3c1 2117 	ubfx	r1, r1, #8, #24
 8006ec2:	f04f 0a00 	mov.w	sl, #0
 8006ec6:	2904      	cmp	r1, #4
 8006ec8:	bf8c      	ite	hi
 8006eca:	6913      	ldrhi	r3, [r2, #16]
 8006ecc:	2301      	movls	r3, #1
 8006ece:	459a      	cmp	sl, r3
 8006ed0:	d22a      	bcs.n	8006f28 <forward_eltwise+0x1a4>
 8006ed2:	6850      	ldr	r0, [r2, #4]
 8006ed4:	f04f 0900 	mov.w	r9, #0
 8006ed8:	b198      	cbz	r0, 8006f02 <forward_eltwise+0x17e>
 8006eda:	4622      	mov	r2, r4
 8006edc:	4629      	mov	r1, r5
 8006ede:	4630      	mov	r0, r6
 8006ee0:	47b8      	blx	r7
 8006ee2:	9b08      	ldr	r3, [sp, #32]
 8006ee4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	441d      	add	r5, r3
 8006eea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	441c      	add	r4, r3
 8006ef0:	6853      	ldr	r3, [r2, #4]
 8006ef2:	f109 0901 	add.w	r9, r9, #1
 8006ef6:	454b      	cmp	r3, r9
 8006ef8:	4446      	add	r6, r8
 8006efa:	d8ee      	bhi.n	8006eda <forward_eltwise+0x156>
 8006efc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006efe:	f3c3 2117 	ubfx	r1, r3, #8, #24
 8006f02:	9807      	ldr	r0, [sp, #28]
 8006f04:	f5b0 6fa0 	cmp.w	r0, #1280	; 0x500
 8006f08:	d302      	bcc.n	8006f10 <forward_eltwise+0x18c>
 8006f0a:	9808      	ldr	r0, [sp, #32]
 8006f0c:	6903      	ldr	r3, [r0, #16]
 8006f0e:	441d      	add	r5, r3
 8006f10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f12:	f5b0 6fa0 	cmp.w	r0, #1280	; 0x500
 8006f16:	d302      	bcc.n	8006f1e <forward_eltwise+0x19a>
 8006f18:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006f1a:	6903      	ldr	r3, [r0, #16]
 8006f1c:	441c      	add	r4, r3
 8006f1e:	f10a 0a01 	add.w	sl, sl, #1
 8006f22:	e7d0      	b.n	8006ec6 <forward_eltwise+0x142>
 8006f24:	684b      	ldr	r3, [r1, #4]
 8006f26:	deff      	udf	#255	; 0xff
 8006f28:	9b08      	ldr	r3, [sp, #32]
 8006f2a:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 8006f2e:	6898      	ldr	r0, [r3, #8]
 8006f30:	4405      	add	r5, r0
 8006f32:	f8dc 0008 	ldr.w	r0, [ip, #8]
 8006f36:	4404      	add	r4, r0
 8006f38:	6890      	ldr	r0, [r2, #8]
 8006f3a:	f10b 0b01 	add.w	fp, fp, #1
 8006f3e:	4558      	cmp	r0, fp
 8006f40:	d8bf      	bhi.n	8006ec2 <forward_eltwise+0x13e>
 8006f42:	68d9      	ldr	r1, [r3, #12]
 8006f44:	469e      	mov	lr, r3
 8006f46:	f8dc 300c 	ldr.w	r3, [ip, #12]
 8006f4a:	441c      	add	r4, r3
 8006f4c:	9b02      	ldr	r3, [sp, #8]
 8006f4e:	3301      	adds	r3, #1
 8006f50:	440d      	add	r5, r1
 8006f52:	9302      	str	r3, [sp, #8]
 8006f54:	4619      	mov	r1, r3
 8006f56:	68d3      	ldr	r3, [r2, #12]
 8006f58:	428b      	cmp	r3, r1
 8006f5a:	d8ab      	bhi.n	8006eb4 <forward_eltwise+0x130>
 8006f5c:	9b01      	ldr	r3, [sp, #4]
 8006f5e:	9a05      	ldr	r2, [sp, #20]
 8006f60:	3304      	adds	r3, #4
 8006f62:	4293      	cmp	r3, r2
 8006f64:	9301      	str	r3, [sp, #4]
 8006f66:	d026      	beq.n	8006fb6 <forward_eltwise+0x232>
 8006f68:	9b03      	ldr	r3, [sp, #12]
 8006f6a:	f8dd 8000 	ldr.w	r8, [sp]
 8006f6e:	699a      	ldr	r2, [r3, #24]
 8006f70:	e74d      	b.n	8006e0e <forward_eltwise+0x8a>
 8006f72:	9b00      	ldr	r3, [sp, #0]
 8006f74:	f8da 0018 	ldr.w	r0, [sl, #24]
 8006f78:	699b      	ldr	r3, [r3, #24]
 8006f7a:	f8d8 4018 	ldr.w	r4, [r8, #24]
 8006f7e:	6885      	ldr	r5, [r0, #8]
 8006f80:	689e      	ldr	r6, [r3, #8]
 8006f82:	68a4      	ldr	r4, [r4, #8]
 8006f84:	464a      	mov	r2, r9
 8006f86:	a80b      	add	r0, sp, #44	; 0x2c
 8006f88:	f000 fbb8 	bl	80076fc <core_get_broadcasted_shape>
 8006f8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f8e:	0a1b      	lsrs	r3, r3, #8
 8006f90:	bf08      	it	eq
 8006f92:	2301      	moveq	r3, #1
 8006f94:	d009      	beq.n	8006faa <forward_eltwise+0x226>
 8006f96:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006f98:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8006fa2:	4290      	cmp	r0, r2
 8006fa4:	fb01 f303 	mul.w	r3, r1, r3
 8006fa8:	d1f9      	bne.n	8006f9e <forward_eltwise+0x21a>
 8006faa:	4621      	mov	r1, r4
 8006fac:	462a      	mov	r2, r5
 8006fae:	9c04      	ldr	r4, [sp, #16]
 8006fb0:	4630      	mov	r0, r6
 8006fb2:	47a0      	blx	r4
 8006fb4:	e7d2      	b.n	8006f5c <forward_eltwise+0x1d8>
 8006fb6:	b01d      	add	sp, #116	; 0x74
 8006fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fbc:	461d      	mov	r5, r3
 8006fbe:	e6ef      	b.n	8006da0 <forward_eltwise+0x1c>
 8006fc0:	689b      	ldr	r3, [r3, #8]
 8006fc2:	deff      	udf	#255	; 0xff
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	deff      	udf	#255	; 0xff
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	deff      	udf	#255	; 0xff
 8006fce:	bf00      	nop

08006fd0 <forward_elu>:
 8006fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fd2:	ed2d 8b04 	vpush	{d8-d9}
 8006fd6:	6982      	ldr	r2, [r0, #24]
 8006fd8:	8813      	ldrh	r3, [r2, #0]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d051      	beq.n	8007082 <forward_elu+0xb2>
 8006fde:	6851      	ldr	r1, [r2, #4]
 8006fe0:	684a      	ldr	r2, [r1, #4]
 8006fe2:	b102      	cbz	r2, 8006fe6 <forward_elu+0x16>
 8006fe4:	6812      	ldr	r2, [r2, #0]
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	d04a      	beq.n	8007080 <forward_elu+0xb0>
 8006fea:	690b      	ldr	r3, [r1, #16]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d050      	beq.n	8007092 <forward_elu+0xc2>
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	6991      	ldr	r1, [r2, #24]
 8006ff4:	699c      	ldr	r4, [r3, #24]
 8006ff6:	6893      	ldr	r3, [r2, #8]
 8006ff8:	68a7      	ldr	r7, [r4, #8]
 8006ffa:	688e      	ldr	r6, [r1, #8]
 8006ffc:	0a1b      	lsrs	r3, r3, #8
 8006ffe:	d042      	beq.n	8007086 <forward_elu+0xb6>
 8007000:	68d4      	ldr	r4, [r2, #12]
 8007002:	2201      	movs	r2, #1
 8007004:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007008:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800700c:	429c      	cmp	r4, r3
 800700e:	fb01 f202 	mul.w	r2, r1, r2
 8007012:	d1f9      	bne.n	8007008 <forward_elu+0x38>
 8007014:	69c3      	ldr	r3, [r0, #28]
 8007016:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800701a:	3a01      	subs	r2, #1
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	eb06 0582 	add.w	r5, r6, r2, lsl #2
 8007022:	42ae      	cmp	r6, r5
 8007024:	ed93 9a00 	vldr	s18, [r3]
 8007028:	eb07 0782 	add.w	r7, r7, r2, lsl #2
 800702c:	d825      	bhi.n	800707a <forward_elu+0xaa>
 800702e:	eddf 8a1a 	vldr	s17, [pc, #104]	; 8007098 <forward_elu+0xc8>
 8007032:	3504      	adds	r5, #4
 8007034:	3704      	adds	r7, #4
 8007036:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
 800703a:	462c      	mov	r4, r5
 800703c:	ed35 8a01 	vldmdb	r5!, {s16}
 8007040:	eeb0 0a48 	vmov.f32	s0, s16
 8007044:	f001 fbb8 	bl	80087b8 <expf>
 8007048:	ee30 0a69 	vsub.f32	s0, s0, s19
 800704c:	3c08      	subs	r4, #8
 800704e:	ee60 7a09 	vmul.f32	s15, s0, s18
 8007052:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800705a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800705e:	bf88      	it	hi
 8007060:	eef0 7a68 	vmovhi.f32	s15, s17
 8007064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007068:	bfb8      	it	lt
 800706a:	eeb0 8a68 	vmovlt.f32	s16, s17
 800706e:	ee77 7a88 	vadd.f32	s15, s15, s16
 8007072:	42a6      	cmp	r6, r4
 8007074:	ed67 7a01 	vstmdb	r7!, {s15}
 8007078:	d9df      	bls.n	800703a <forward_elu+0x6a>
 800707a:	ecbd 8b04 	vpop	{d8-d9}
 800707e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007080:	2300      	movs	r3, #0
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	deff      	udf	#255	; 0xff
 8007086:	69c3      	ldr	r3, [r0, #28]
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	4635      	mov	r5, r6
 800708c:	ed93 9a00 	vldr	s18, [r3]
 8007090:	e7cd      	b.n	800702e <forward_elu+0x5e>
 8007092:	699b      	ldr	r3, [r3, #24]
 8007094:	deff      	udf	#255	; 0xff
 8007096:	bf00      	nop
 8007098:	00000000 	.word	0x00000000

0800709c <forward_clip>:
 800709c:	6982      	ldr	r2, [r0, #24]
 800709e:	8813      	ldrh	r3, [r2, #0]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d045      	beq.n	8007130 <forward_clip+0x94>
 80070a4:	6851      	ldr	r1, [r2, #4]
 80070a6:	684a      	ldr	r2, [r1, #4]
 80070a8:	b102      	cbz	r2, 80070ac <forward_clip+0x10>
 80070aa:	6812      	ldr	r2, [r2, #0]
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	d049      	beq.n	8007144 <forward_clip+0xa8>
 80070b0:	690b      	ldr	r3, [r1, #16]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d049      	beq.n	800714a <forward_clip+0xae>
 80070b6:	b470      	push	{r4, r5, r6}
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	6994      	ldr	r4, [r2, #24]
 80070bc:	6999      	ldr	r1, [r3, #24]
 80070be:	6893      	ldr	r3, [r2, #8]
 80070c0:	6889      	ldr	r1, [r1, #8]
 80070c2:	68a5      	ldr	r5, [r4, #8]
 80070c4:	0a1b      	lsrs	r3, r3, #8
 80070c6:	d035      	beq.n	8007134 <forward_clip+0x98>
 80070c8:	68d6      	ldr	r6, [r2, #12]
 80070ca:	2201      	movs	r2, #1
 80070cc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80070d0:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 80070d4:	429e      	cmp	r6, r3
 80070d6:	fb04 f202 	mul.w	r2, r4, r2
 80070da:	d1f9      	bne.n	80070d0 <forward_clip+0x34>
 80070dc:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
 80070e0:	69c0      	ldr	r0, [r0, #28]
 80070e2:	3b01      	subs	r3, #1
 80070e4:	6880      	ldr	r0, [r0, #8]
 80070e6:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 80070ea:	4295      	cmp	r5, r2
 80070ec:	edd0 6a00 	vldr	s13, [r0]
 80070f0:	ed90 7a01 	vldr	s14, [r0, #4]
 80070f4:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80070f8:	d818      	bhi.n	800712c <forward_clip+0x90>
 80070fa:	3204      	adds	r2, #4
 80070fc:	3104      	adds	r1, #4
 80070fe:	4613      	mov	r3, r2
 8007100:	ed72 7a01 	vldmdb	r2!, {s15}
 8007104:	eef4 7ae6 	vcmpe.f32	s15, s13
 8007108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800710c:	bfb8      	it	lt
 800710e:	eef0 7a66 	vmovlt.f32	s15, s13
 8007112:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800711a:	f1a3 0308 	sub.w	r3, r3, #8
 800711e:	bf88      	it	hi
 8007120:	eef0 7a47 	vmovhi.f32	s15, s14
 8007124:	429d      	cmp	r5, r3
 8007126:	ed61 7a01 	vstmdb	r1!, {s15}
 800712a:	d9e8      	bls.n	80070fe <forward_clip+0x62>
 800712c:	bc70      	pop	{r4, r5, r6}
 800712e:	4770      	bx	lr
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	deff      	udf	#255	; 0xff
 8007134:	69c3      	ldr	r3, [r0, #28]
 8007136:	689b      	ldr	r3, [r3, #8]
 8007138:	462a      	mov	r2, r5
 800713a:	edd3 6a00 	vldr	s13, [r3]
 800713e:	ed93 7a01 	vldr	s14, [r3, #4]
 8007142:	e7da      	b.n	80070fa <forward_clip+0x5e>
 8007144:	2300      	movs	r3, #0
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	deff      	udf	#255	; 0xff
 800714a:	699b      	ldr	r3, [r3, #24]
 800714c:	deff      	udf	#255	; 0xff
 800714e:	bf00      	nop

08007150 <forward_lite_dense_if32of32wf32>:
 8007150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007154:	e9dd 6409 	ldrd	r6, r4, [sp, #36]	; 0x24
 8007158:	eb00 0784 	add.w	r7, r0, r4, lsl #2
 800715c:	4287      	cmp	r7, r0
 800715e:	f240 8106 	bls.w	800736e <forward_lite_dense_if32of32wf32+0x21e>
 8007162:	f1a6 0810 	sub.w	r8, r6, #16
 8007166:	ea4f 1818 	mov.w	r8, r8, lsr #4
 800716a:	f108 0801 	add.w	r8, r8, #1
 800716e:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 8007172:	ea4f 0986 	mov.w	r9, r6, lsl #2
 8007176:	eb01 1888 	add.w	r8, r1, r8, lsl #6
 800717a:	4605      	mov	r5, r0
 800717c:	f006 0a0f 	and.w	sl, r6, #15
 8007180:	2e0f      	cmp	r6, #15
 8007182:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8007394 <forward_lite_dense_if32of32wf32+0x244>
 8007186:	f240 8101 	bls.w	800738c <forward_lite_dense_if32of32wf32+0x23c>
 800718a:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 800718e:	f102 0440 	add.w	r4, r2, #64	; 0x40
 8007192:	46b6      	mov	lr, r6
 8007194:	ed54 5a0f 	vldr	s11, [r4, #-60]	; 0xffffffc4
 8007198:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 800719c:	ed1c 6a10 	vldr	s12, [ip, #-64]	; 0xffffffc0
 80071a0:	ed54 6a10 	vldr	s13, [r4, #-64]	; 0xffffffc0
 80071a4:	ed5c 4a0d 	vldr	s9, [ip, #-52]	; 0xffffffcc
 80071a8:	ed1c 5a0c 	vldr	s10, [ip, #-48]	; 0xffffffd0
 80071ac:	ed1c 3a0a 	vldr	s6, [ip, #-40]	; 0xffffffd8
 80071b0:	ed54 3a0a 	vldr	s7, [r4, #-40]	; 0xffffffd8
 80071b4:	ed1c 4a09 	vldr	s8, [ip, #-36]	; 0xffffffdc
 80071b8:	ed1c 1a06 	vldr	s2, [ip, #-24]	; 0xffffffe8
 80071bc:	ed54 1a06 	vldr	s3, [r4, #-24]	; 0xffffffe8
 80071c0:	ed1c 2a05 	vldr	s4, [ip, #-20]	; 0xffffffec
 80071c4:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 80071c8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80071cc:	ed5c 5a0e 	vldr	s11, [ip, #-56]	; 0xffffffc8
 80071d0:	eee6 7a26 	vfma.f32	s15, s12, s13
 80071d4:	f1ae 0e10 	sub.w	lr, lr, #16
 80071d8:	f1be 0f0f 	cmp.w	lr, #15
 80071dc:	ed14 6a0e 	vldr	s12, [r4, #-56]	; 0xffffffc8
 80071e0:	ed54 6a0d 	vldr	s13, [r4, #-52]	; 0xffffffcc
 80071e4:	eee5 7a86 	vfma.f32	s15, s11, s12
 80071e8:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 80071ec:	f104 0440 	add.w	r4, r4, #64	; 0x40
 80071f0:	ed54 5a1c 	vldr	s11, [r4, #-112]	; 0xffffff90
 80071f4:	ed1c 6a1b 	vldr	s12, [ip, #-108]	; 0xffffff94
 80071f8:	eee4 7aa6 	vfma.f32	s15, s9, s13
 80071fc:	ed54 6a1b 	vldr	s13, [r4, #-108]	; 0xffffff94
 8007200:	ed54 4a19 	vldr	s9, [r4, #-100]	; 0xffffff9c
 8007204:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007208:	ed1c 5a18 	vldr	s10, [ip, #-96]	; 0xffffffa0
 800720c:	ed54 5a18 	vldr	s11, [r4, #-96]	; 0xffffffa0
 8007210:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007214:	ed1c 6a17 	vldr	s12, [ip, #-92]	; 0xffffffa4
 8007218:	ed54 6a17 	vldr	s13, [r4, #-92]	; 0xffffffa4
 800721c:	eee3 7a23 	vfma.f32	s15, s6, s7
 8007220:	ed1c 3a14 	vldr	s6, [ip, #-80]	; 0xffffffb0
 8007224:	ed54 3a14 	vldr	s7, [r4, #-80]	; 0xffffffb0
 8007228:	eee4 7a24 	vfma.f32	s15, s8, s9
 800722c:	ed1c 4a13 	vldr	s8, [ip, #-76]	; 0xffffffb4
 8007230:	ed54 4a13 	vldr	s9, [r4, #-76]	; 0xffffffb4
 8007234:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007238:	ed1c 5a12 	vldr	s10, [ip, #-72]	; 0xffffffb8
 800723c:	ed54 5a12 	vldr	s11, [r4, #-72]	; 0xffffffb8
 8007240:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007244:	ed1c 6a11 	vldr	s12, [ip, #-68]	; 0xffffffbc
 8007248:	ed54 6a11 	vldr	s13, [r4, #-68]	; 0xffffffbc
 800724c:	eee1 7a21 	vfma.f32	s15, s2, s3
 8007250:	eee2 7a22 	vfma.f32	s15, s4, s5
 8007254:	eee3 7a23 	vfma.f32	s15, s6, s7
 8007258:	eee4 7a24 	vfma.f32	s15, s8, s9
 800725c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007260:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007264:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007268:	d894      	bhi.n	8007194 <forward_lite_dense_if32of32wf32+0x44>
 800726a:	eb02 0e0b 	add.w	lr, r2, fp
 800726e:	4654      	mov	r4, sl
 8007270:	46c4      	mov	ip, r8
 8007272:	2c00      	cmp	r4, #0
 8007274:	d075      	beq.n	8007362 <forward_lite_dense_if32of32wf32+0x212>
 8007276:	eddc 6a00 	vldr	s13, [ip]
 800727a:	edde 7a00 	vldr	s15, [lr]
 800727e:	2c01      	cmp	r4, #1
 8007280:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007284:	d06d      	beq.n	8007362 <forward_lite_dense_if32of32wf32+0x212>
 8007286:	eddc 6a01 	vldr	s13, [ip, #4]
 800728a:	edde 7a01 	vldr	s15, [lr, #4]
 800728e:	2c02      	cmp	r4, #2
 8007290:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007294:	d065      	beq.n	8007362 <forward_lite_dense_if32of32wf32+0x212>
 8007296:	eddc 6a02 	vldr	s13, [ip, #8]
 800729a:	edde 7a02 	vldr	s15, [lr, #8]
 800729e:	2c03      	cmp	r4, #3
 80072a0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80072a4:	d05d      	beq.n	8007362 <forward_lite_dense_if32of32wf32+0x212>
 80072a6:	eddc 6a03 	vldr	s13, [ip, #12]
 80072aa:	edde 7a03 	vldr	s15, [lr, #12]
 80072ae:	2c04      	cmp	r4, #4
 80072b0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80072b4:	d055      	beq.n	8007362 <forward_lite_dense_if32of32wf32+0x212>
 80072b6:	eddc 6a04 	vldr	s13, [ip, #16]
 80072ba:	edde 7a04 	vldr	s15, [lr, #16]
 80072be:	2c05      	cmp	r4, #5
 80072c0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80072c4:	d04d      	beq.n	8007362 <forward_lite_dense_if32of32wf32+0x212>
 80072c6:	eddc 6a05 	vldr	s13, [ip, #20]
 80072ca:	edde 7a05 	vldr	s15, [lr, #20]
 80072ce:	2c06      	cmp	r4, #6
 80072d0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80072d4:	d045      	beq.n	8007362 <forward_lite_dense_if32of32wf32+0x212>
 80072d6:	eddc 6a06 	vldr	s13, [ip, #24]
 80072da:	edde 7a06 	vldr	s15, [lr, #24]
 80072de:	2c07      	cmp	r4, #7
 80072e0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80072e4:	d03d      	beq.n	8007362 <forward_lite_dense_if32of32wf32+0x212>
 80072e6:	eddc 6a07 	vldr	s13, [ip, #28]
 80072ea:	edde 7a07 	vldr	s15, [lr, #28]
 80072ee:	2c08      	cmp	r4, #8
 80072f0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80072f4:	d035      	beq.n	8007362 <forward_lite_dense_if32of32wf32+0x212>
 80072f6:	eddc 6a08 	vldr	s13, [ip, #32]
 80072fa:	edde 7a08 	vldr	s15, [lr, #32]
 80072fe:	2c09      	cmp	r4, #9
 8007300:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007304:	d02d      	beq.n	8007362 <forward_lite_dense_if32of32wf32+0x212>
 8007306:	eddc 6a09 	vldr	s13, [ip, #36]	; 0x24
 800730a:	edde 7a09 	vldr	s15, [lr, #36]	; 0x24
 800730e:	2c0a      	cmp	r4, #10
 8007310:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007314:	d025      	beq.n	8007362 <forward_lite_dense_if32of32wf32+0x212>
 8007316:	eddc 6a0a 	vldr	s13, [ip, #40]	; 0x28
 800731a:	edde 7a0a 	vldr	s15, [lr, #40]	; 0x28
 800731e:	2c0b      	cmp	r4, #11
 8007320:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007324:	d01d      	beq.n	8007362 <forward_lite_dense_if32of32wf32+0x212>
 8007326:	eddc 6a0b 	vldr	s13, [ip, #44]	; 0x2c
 800732a:	edde 7a0b 	vldr	s15, [lr, #44]	; 0x2c
 800732e:	2c0c      	cmp	r4, #12
 8007330:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007334:	d015      	beq.n	8007362 <forward_lite_dense_if32of32wf32+0x212>
 8007336:	eddc 6a0c 	vldr	s13, [ip, #48]	; 0x30
 800733a:	edde 7a0c 	vldr	s15, [lr, #48]	; 0x30
 800733e:	3c0d      	subs	r4, #13
 8007340:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007344:	d00d      	beq.n	8007362 <forward_lite_dense_if32of32wf32+0x212>
 8007346:	eddc 6a0d 	vldr	s13, [ip, #52]	; 0x34
 800734a:	edde 7a0d 	vldr	s15, [lr, #52]	; 0x34
 800734e:	2c01      	cmp	r4, #1
 8007350:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007354:	d005      	beq.n	8007362 <forward_lite_dense_if32of32wf32+0x212>
 8007356:	edde 6a0e 	vldr	s13, [lr, #56]	; 0x38
 800735a:	eddc 7a0e 	vldr	s15, [ip, #56]	; 0x38
 800735e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007362:	444a      	add	r2, r9
 8007364:	eca5 7a01 	vstmia	r5!, {s14}
 8007368:	42af      	cmp	r7, r5
 800736a:	f63f af09 	bhi.w	8007180 <forward_lite_dense_if32of32wf32+0x30>
 800736e:	b15b      	cbz	r3, 8007388 <forward_lite_dense_if32of32wf32+0x238>
 8007370:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007372:	b14a      	cbz	r2, 8007388 <forward_lite_dense_if32of32wf32+0x238>
 8007374:	edd0 7a00 	vldr	s15, [r0]
 8007378:	ecb3 7a01 	vldmia	r3!, {s14}
 800737c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007380:	ece0 7a01 	vstmia	r0!, {s15}
 8007384:	4287      	cmp	r7, r0
 8007386:	d1f5      	bne.n	8007374 <forward_lite_dense_if32of32wf32+0x224>
 8007388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800738c:	4634      	mov	r4, r6
 800738e:	4696      	mov	lr, r2
 8007390:	468c      	mov	ip, r1
 8007392:	e76e      	b.n	8007272 <forward_lite_dense_if32of32wf32+0x122>
 8007394:	00000000 	.word	0x00000000

08007398 <st_int8_copy>:
 8007398:	4288      	cmp	r0, r1
 800739a:	d057      	beq.n	800744c <st_int8_copy+0xb4>
 800739c:	2a00      	cmp	r2, #0
 800739e:	d055      	beq.n	800744c <st_int8_copy+0xb4>
 80073a0:	4288      	cmp	r0, r1
 80073a2:	d354      	bcc.n	800744e <st_int8_copy+0xb6>
 80073a4:	078b      	lsls	r3, r1, #30
 80073a6:	d102      	bne.n	80073ae <st_int8_copy+0x16>
 80073a8:	e009      	b.n	80073be <st_int8_copy+0x26>
 80073aa:	2a00      	cmp	r2, #0
 80073ac:	d05c      	beq.n	8007468 <st_int8_copy+0xd0>
 80073ae:	f910 3b01 	ldrsb.w	r3, [r0], #1
 80073b2:	f801 3b01 	strb.w	r3, [r1], #1
 80073b6:	078b      	lsls	r3, r1, #30
 80073b8:	f102 32ff 	add.w	r2, r2, #4294967295
 80073bc:	d1f5      	bne.n	80073aa <st_int8_copy+0x12>
 80073be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073c2:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 80073c6:	d069      	beq.n	800749c <st_int8_copy+0x104>
 80073c8:	ea41 0300 	orr.w	r3, r1, r0
 80073cc:	075b      	lsls	r3, r3, #29
 80073ce:	d14c      	bne.n	800746a <st_int8_copy+0xd2>
 80073d0:	f10e 33ff 	add.w	r3, lr, #4294967295
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d948      	bls.n	800746a <st_int8_copy+0xd2>
 80073d8:	f100 0310 	add.w	r3, r0, #16
 80073dc:	ea4f 140e 	mov.w	r4, lr, lsl #4
 80073e0:	f101 0c10 	add.w	ip, r1, #16
 80073e4:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 80073e8:	ed13 6b04 	vldr	d6, [r3, #-16]
 80073ec:	ed13 7b02 	vldr	d7, [r3, #-8]
 80073f0:	3310      	adds	r3, #16
 80073f2:	4573      	cmp	r3, lr
 80073f4:	ed0c 6b04 	vstr	d6, [ip, #-16]
 80073f8:	ed0c 7b02 	vstr	d7, [ip, #-8]
 80073fc:	f10c 0c10 	add.w	ip, ip, #16
 8007400:	d1f2      	bne.n	80073e8 <st_int8_copy+0x50>
 8007402:	f3c2 0381 	ubfx	r3, r2, #2, #2
 8007406:	4421      	add	r1, r4
 8007408:	4420      	add	r0, r4
 800740a:	f002 0203 	and.w	r2, r2, #3
 800740e:	b16b      	cbz	r3, 800742c <st_int8_copy+0x94>
 8007410:	6804      	ldr	r4, [r0, #0]
 8007412:	600c      	str	r4, [r1, #0]
 8007414:	1e5c      	subs	r4, r3, #1
 8007416:	d005      	beq.n	8007424 <st_int8_copy+0x8c>
 8007418:	6845      	ldr	r5, [r0, #4]
 800741a:	604d      	str	r5, [r1, #4]
 800741c:	2c01      	cmp	r4, #1
 800741e:	bf1c      	itt	ne
 8007420:	6884      	ldrne	r4, [r0, #8]
 8007422:	608c      	strne	r4, [r1, #8]
 8007424:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8007428:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800742c:	b162      	cbz	r2, 8007448 <st_int8_copy+0xb0>
 800742e:	f990 3000 	ldrsb.w	r3, [r0]
 8007432:	700b      	strb	r3, [r1, #0]
 8007434:	3a01      	subs	r2, #1
 8007436:	d007      	beq.n	8007448 <st_int8_copy+0xb0>
 8007438:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800743c:	704b      	strb	r3, [r1, #1]
 800743e:	2a01      	cmp	r2, #1
 8007440:	bf1c      	itt	ne
 8007442:	f990 3002 	ldrsbne.w	r3, [r0, #2]
 8007446:	708b      	strbne	r3, [r1, #2]
 8007448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800744c:	4770      	bx	lr
 800744e:	1883      	adds	r3, r0, r2
 8007450:	428b      	cmp	r3, r1
 8007452:	d9a7      	bls.n	80073a4 <st_int8_copy+0xc>
 8007454:	4283      	cmp	r3, r0
 8007456:	440a      	add	r2, r1
 8007458:	d9f8      	bls.n	800744c <st_int8_copy+0xb4>
 800745a:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 800745e:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8007462:	4283      	cmp	r3, r0
 8007464:	d1f9      	bne.n	800745a <st_int8_copy+0xc2>
 8007466:	4770      	bx	lr
 8007468:	4770      	bx	lr
 800746a:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800746e:	460b      	mov	r3, r1
 8007470:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 8007474:	4684      	mov	ip, r0
 8007476:	f8dc 7000 	ldr.w	r7, [ip]
 800747a:	f8dc 6004 	ldr.w	r6, [ip, #4]
 800747e:	f8dc 5008 	ldr.w	r5, [ip, #8]
 8007482:	f8dc 800c 	ldr.w	r8, [ip, #12]
 8007486:	f8c3 800c 	str.w	r8, [r3, #12]
 800748a:	601f      	str	r7, [r3, #0]
 800748c:	605e      	str	r6, [r3, #4]
 800748e:	609d      	str	r5, [r3, #8]
 8007490:	3310      	adds	r3, #16
 8007492:	459e      	cmp	lr, r3
 8007494:	f10c 0c10 	add.w	ip, ip, #16
 8007498:	d1ed      	bne.n	8007476 <st_int8_copy+0xde>
 800749a:	e7b2      	b.n	8007402 <st_int8_copy+0x6a>
 800749c:	0893      	lsrs	r3, r2, #2
 800749e:	f002 0203 	and.w	r2, r2, #3
 80074a2:	e7b4      	b.n	800740e <st_int8_copy+0x76>

080074a4 <ai_sum_f32>:
 80074a4:	edd1 7a00 	vldr	s15, [r1]
 80074a8:	ed92 7a00 	vldr	s14, [r2]
 80074ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 80074b0:	edc0 7a00 	vstr	s15, [r0]
 80074b4:	4770      	bx	lr
 80074b6:	bf00      	nop

080074b8 <ai_sum_buffer_f32>:
 80074b8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80074bc:	4298      	cmp	r0, r3
 80074be:	d209      	bcs.n	80074d4 <ai_sum_buffer_f32+0x1c>
 80074c0:	ecf1 7a01 	vldmia	r1!, {s15}
 80074c4:	ecb2 7a01 	vldmia	r2!, {s14}
 80074c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80074cc:	ece0 7a01 	vstmia	r0!, {s15}
 80074d0:	4283      	cmp	r3, r0
 80074d2:	d8f5      	bhi.n	80074c0 <ai_sum_buffer_f32+0x8>
 80074d4:	4770      	bx	lr
 80074d6:	bf00      	nop

080074d8 <ai_sub_f32>:
 80074d8:	edd1 7a00 	vldr	s15, [r1]
 80074dc:	ed92 7a00 	vldr	s14, [r2]
 80074e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80074e4:	edc0 7a00 	vstr	s15, [r0]
 80074e8:	4770      	bx	lr
 80074ea:	bf00      	nop

080074ec <ai_sub_buffer_f32>:
 80074ec:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80074f0:	4298      	cmp	r0, r3
 80074f2:	d209      	bcs.n	8007508 <ai_sub_buffer_f32+0x1c>
 80074f4:	ecf1 7a01 	vldmia	r1!, {s15}
 80074f8:	ecb2 7a01 	vldmia	r2!, {s14}
 80074fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007500:	ece0 7a01 	vstmia	r0!, {s15}
 8007504:	4283      	cmp	r3, r0
 8007506:	d8f5      	bhi.n	80074f4 <ai_sub_buffer_f32+0x8>
 8007508:	4770      	bx	lr
 800750a:	bf00      	nop

0800750c <ai_mul_f32>:
 800750c:	edd1 7a00 	vldr	s15, [r1]
 8007510:	ed92 7a00 	vldr	s14, [r2]
 8007514:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007518:	edc0 7a00 	vstr	s15, [r0]
 800751c:	4770      	bx	lr
 800751e:	bf00      	nop

08007520 <ai_mul_buffer_f32>:
 8007520:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8007524:	4298      	cmp	r0, r3
 8007526:	d209      	bcs.n	800753c <ai_mul_buffer_f32+0x1c>
 8007528:	ecf1 7a01 	vldmia	r1!, {s15}
 800752c:	ecb2 7a01 	vldmia	r2!, {s14}
 8007530:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007534:	ece0 7a01 	vstmia	r0!, {s15}
 8007538:	4283      	cmp	r3, r0
 800753a:	d8f5      	bhi.n	8007528 <ai_mul_buffer_f32+0x8>
 800753c:	4770      	bx	lr
 800753e:	bf00      	nop

08007540 <ai_div_f32>:
 8007540:	edd1 6a00 	vldr	s13, [r1]
 8007544:	ed92 7a00 	vldr	s14, [r2]
 8007548:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800754c:	edc0 7a00 	vstr	s15, [r0]
 8007550:	4770      	bx	lr
 8007552:	bf00      	nop

08007554 <ai_div_buffer_f32>:
 8007554:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8007558:	4298      	cmp	r0, r3
 800755a:	d209      	bcs.n	8007570 <ai_div_buffer_f32+0x1c>
 800755c:	ecf1 6a01 	vldmia	r1!, {s13}
 8007560:	ecb2 7a01 	vldmia	r2!, {s14}
 8007564:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007568:	ece0 7a01 	vstmia	r0!, {s15}
 800756c:	4283      	cmp	r3, r0
 800756e:	d8f5      	bhi.n	800755c <ai_div_buffer_f32+0x8>
 8007570:	4770      	bx	lr
 8007572:	bf00      	nop

08007574 <ai_array_to_buffer_fmt>:
 8007574:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8007578:	2b02      	cmp	r3, #2
 800757a:	d050      	beq.n	800761e <ai_array_to_buffer_fmt+0xaa>
 800757c:	4b2a      	ldr	r3, [pc, #168]	; (8007628 <ai_array_to_buffer_fmt+0xb4>)
 800757e:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 8007582:	429a      	cmp	r2, r3
 8007584:	d00b      	beq.n	800759e <ai_array_to_buffer_fmt+0x2a>
 8007586:	dc1c      	bgt.n	80075c2 <ai_array_to_buffer_fmt+0x4e>
 8007588:	4b28      	ldr	r3, [pc, #160]	; (800762c <ai_array_to_buffer_fmt+0xb8>)
 800758a:	429a      	cmp	r2, r3
 800758c:	d007      	beq.n	800759e <ai_array_to_buffer_fmt+0x2a>
 800758e:	dd0b      	ble.n	80075a8 <ai_array_to_buffer_fmt+0x34>
 8007590:	4b27      	ldr	r3, [pc, #156]	; (8007630 <ai_array_to_buffer_fmt+0xbc>)
 8007592:	429a      	cmp	r2, r3
 8007594:	d003      	beq.n	800759e <ai_array_to_buffer_fmt+0x2a>
 8007596:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 800759a:	429a      	cmp	r2, r3
 800759c:	d131      	bne.n	8007602 <ai_array_to_buffer_fmt+0x8e>
 800759e:	4613      	mov	r3, r2
 80075a0:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80075a4:	4318      	orrs	r0, r3
 80075a6:	4770      	bx	lr
 80075a8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80075ac:	429a      	cmp	r2, r3
 80075ae:	d0f6      	beq.n	800759e <ai_array_to_buffer_fmt+0x2a>
 80075b0:	dd2c      	ble.n	800760c <ai_array_to_buffer_fmt+0x98>
 80075b2:	4b20      	ldr	r3, [pc, #128]	; (8007634 <ai_array_to_buffer_fmt+0xc0>)
 80075b4:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80075b8:	429a      	cmp	r2, r3
 80075ba:	bf18      	it	ne
 80075bc:	2340      	movne	r3, #64	; 0x40
 80075be:	4318      	orrs	r0, r3
 80075c0:	4770      	bx	lr
 80075c2:	4b1d      	ldr	r3, [pc, #116]	; (8007638 <ai_array_to_buffer_fmt+0xc4>)
 80075c4:	429a      	cmp	r2, r3
 80075c6:	d0ea      	beq.n	800759e <ai_array_to_buffer_fmt+0x2a>
 80075c8:	dd0e      	ble.n	80075e8 <ai_array_to_buffer_fmt+0x74>
 80075ca:	4b1c      	ldr	r3, [pc, #112]	; (800763c <ai_array_to_buffer_fmt+0xc8>)
 80075cc:	429a      	cmp	r2, r3
 80075ce:	d0e6      	beq.n	800759e <ai_array_to_buffer_fmt+0x2a>
 80075d0:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d0e2      	beq.n	800759e <ai_array_to_buffer_fmt+0x2a>
 80075d8:	4b19      	ldr	r3, [pc, #100]	; (8007640 <ai_array_to_buffer_fmt+0xcc>)
 80075da:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80075de:	429a      	cmp	r2, r3
 80075e0:	bf18      	it	ne
 80075e2:	2340      	movne	r3, #64	; 0x40
 80075e4:	4318      	orrs	r0, r3
 80075e6:	4770      	bx	lr
 80075e8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80075ec:	429a      	cmp	r2, r3
 80075ee:	d0d6      	beq.n	800759e <ai_array_to_buffer_fmt+0x2a>
 80075f0:	3307      	adds	r3, #7
 80075f2:	429a      	cmp	r2, r3
 80075f4:	d0d3      	beq.n	800759e <ai_array_to_buffer_fmt+0x2a>
 80075f6:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 80075fa:	429a      	cmp	r2, r3
 80075fc:	bf18      	it	ne
 80075fe:	2340      	movne	r3, #64	; 0x40
 8007600:	e7ce      	b.n	80075a0 <ai_array_to_buffer_fmt+0x2c>
 8007602:	4b10      	ldr	r3, [pc, #64]	; (8007644 <ai_array_to_buffer_fmt+0xd0>)
 8007604:	429a      	cmp	r2, r3
 8007606:	bf18      	it	ne
 8007608:	2340      	movne	r3, #64	; 0x40
 800760a:	e7c9      	b.n	80075a0 <ai_array_to_buffer_fmt+0x2c>
 800760c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8007610:	429a      	cmp	r2, r3
 8007612:	d0c4      	beq.n	800759e <ai_array_to_buffer_fmt+0x2a>
 8007614:	3380      	adds	r3, #128	; 0x80
 8007616:	429a      	cmp	r2, r3
 8007618:	bf18      	it	ne
 800761a:	2340      	movne	r3, #64	; 0x40
 800761c:	e7c0      	b.n	80075a0 <ai_array_to_buffer_fmt+0x2c>
 800761e:	4b0a      	ldr	r3, [pc, #40]	; (8007648 <ai_array_to_buffer_fmt+0xd4>)
 8007620:	4003      	ands	r3, r0
 8007622:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007626:	e7bb      	b.n	80075a0 <ai_array_to_buffer_fmt+0x2c>
 8007628:	00840040 	.word	0x00840040
 800762c:	00040840 	.word	0x00040840
 8007630:	00041040 	.word	0x00041040
 8007634:	00040447 	.word	0x00040447
 8007638:	00840840 	.word	0x00840840
 800763c:	00841040 	.word	0x00841040
 8007640:	0084084f 	.word	0x0084084f
 8007644:	0004084f 	.word	0x0004084f
 8007648:	00803fff 	.word	0x00803fff

0800764c <ai_array_get_byte_size>:
 800764c:	b319      	cbz	r1, 8007696 <ai_array_get_byte_size+0x4a>
 800764e:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8007652:	fb03 f101 	mul.w	r1, r3, r1
 8007656:	3107      	adds	r1, #7
 8007658:	f3c0 4243 	ubfx	r2, r0, #17, #4
 800765c:	f021 0307 	bic.w	r3, r1, #7
 8007660:	2a04      	cmp	r2, #4
 8007662:	f3c0 5141 	ubfx	r1, r0, #21, #2
 8007666:	fa23 f101 	lsr.w	r1, r3, r1
 800766a:	ea4f 10e0 	mov.w	r0, r0, asr #7
 800766e:	d00b      	beq.n	8007688 <ai_array_get_byte_size+0x3c>
 8007670:	2a08      	cmp	r2, #8
 8007672:	d002      	beq.n	800767a <ai_array_get_byte_size+0x2e>
 8007674:	3107      	adds	r1, #7
 8007676:	08c8      	lsrs	r0, r1, #3
 8007678:	4770      	bx	lr
 800767a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800767e:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8007682:	3107      	adds	r1, #7
 8007684:	08c8      	lsrs	r0, r1, #3
 8007686:	4770      	bx	lr
 8007688:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800768c:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 8007690:	3107      	adds	r1, #7
 8007692:	08c8      	lsrs	r0, r1, #3
 8007694:	4770      	bx	lr
 8007696:	4608      	mov	r0, r1
 8007698:	4770      	bx	lr
 800769a:	bf00      	nop

0800769c <ai_array_get_data_byte_size>:
 800769c:	b169      	cbz	r1, 80076ba <ai_array_get_data_byte_size+0x1e>
 800769e:	f3c0 12c6 	ubfx	r2, r0, #7, #7
 80076a2:	fb02 f101 	mul.w	r1, r2, r1
 80076a6:	1dcb      	adds	r3, r1, #7
 80076a8:	f023 0307 	bic.w	r3, r3, #7
 80076ac:	f3c0 5041 	ubfx	r0, r0, #21, #2
 80076b0:	fa23 f000 	lsr.w	r0, r3, r0
 80076b4:	3007      	adds	r0, #7
 80076b6:	08c0      	lsrs	r0, r0, #3
 80076b8:	4770      	bx	lr
 80076ba:	4608      	mov	r0, r1
 80076bc:	4770      	bx	lr
 80076be:	bf00      	nop

080076c0 <ai_version_get>:
 80076c0:	0212      	lsls	r2, r2, #8
 80076c2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80076c6:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 80076ca:	4770      	bx	lr

080076cc <get_tensor_byte_size>:
 80076cc:	b410      	push	{r4}
 80076ce:	6983      	ldr	r3, [r0, #24]
 80076d0:	68c4      	ldr	r4, [r0, #12]
 80076d2:	6941      	ldr	r1, [r0, #20]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	68e0      	ldr	r0, [r4, #12]
 80076d8:	4a07      	ldr	r2, [pc, #28]	; (80076f8 <get_tensor_byte_size+0x2c>)
 80076da:	68c9      	ldr	r1, [r1, #12]
 80076dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076e0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80076e4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80076e8:	fb01 f000 	mul.w	r0, r1, r0
 80076ec:	4293      	cmp	r3, r2
 80076ee:	bf04      	itt	eq
 80076f0:	3007      	addeq	r0, #7
 80076f2:	08c0      	lsreq	r0, r0, #3
 80076f4:	4770      	bx	lr
 80076f6:	bf00      	nop
 80076f8:	000400c0 	.word	0x000400c0

080076fc <core_get_broadcasted_shape>:
 80076fc:	b470      	push	{r4, r5, r6}
 80076fe:	6804      	ldr	r4, [r0, #0]
 8007700:	f3c4 2417 	ubfx	r4, r4, #8, #24
 8007704:	b324      	cbz	r4, 8007750 <core_get_broadcasted_shape+0x54>
 8007706:	4623      	mov	r3, r4
 8007708:	3b01      	subs	r3, #1
 800770a:	429c      	cmp	r4, r3
 800770c:	d91b      	bls.n	8007746 <core_get_broadcasted_shape+0x4a>
 800770e:	6814      	ldr	r4, [r2, #0]
 8007710:	680e      	ldr	r6, [r1, #0]
 8007712:	ebb3 2f14 	cmp.w	r3, r4, lsr #8
 8007716:	bf36      	itet	cc
 8007718:	6854      	ldrcc	r4, [r2, #4]
 800771a:	2401      	movcs	r4, #1
 800771c:	f854 4023 	ldrcc.w	r4, [r4, r3, lsl #2]
 8007720:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 8007724:	bf38      	it	cc
 8007726:	ea4f 0c83 	movcc.w	ip, r3, lsl #2
 800772a:	ebb3 2f16 	cmp.w	r3, r6, lsr #8
 800772e:	f04f 0501 	mov.w	r5, #1
 8007732:	bf3c      	itt	cc
 8007734:	684d      	ldrcc	r5, [r1, #4]
 8007736:	f855 500c 	ldrcc.w	r5, [r5, ip]
 800773a:	42ac      	cmp	r4, r5
 800773c:	bf38      	it	cc
 800773e:	462c      	movcc	r4, r5
 8007740:	6845      	ldr	r5, [r0, #4]
 8007742:	f845 400c 	str.w	r4, [r5, ip]
 8007746:	b11b      	cbz	r3, 8007750 <core_get_broadcasted_shape+0x54>
 8007748:	6804      	ldr	r4, [r0, #0]
 800774a:	f3c4 2417 	ubfx	r4, r4, #8, #24
 800774e:	e7db      	b.n	8007708 <core_get_broadcasted_shape+0xc>
 8007750:	bc70      	pop	{r4, r5, r6}
 8007752:	4770      	bx	lr

08007754 <core_compute_offsets>:
 8007754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007758:	e9d1 4600 	ldrd	r4, r6, [r1]
 800775c:	f5b4 6fa0 	cmp.w	r4, #1280	; 0x500
 8007760:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8007764:	6871      	ldr	r1, [r6, #4]
 8007766:	6812      	ldr	r2, [r2, #0]
 8007768:	bf28      	it	cs
 800776a:	6935      	ldrcs	r5, [r6, #16]
 800776c:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8007770:	f8d0 b000 	ldr.w	fp, [r0]
 8007774:	bf2e      	itee	cs
 8007776:	fb05 fe01 	mulcs.w	lr, r5, r1
 800777a:	468e      	movcc	lr, r1
 800777c:	2501      	movcc	r5, #1
 800777e:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 8007782:	bf28      	it	cs
 8007784:	f8d9 2010 	ldrcs.w	r2, [r9, #16]
 8007788:	e9d6 4802 	ldrd	r4, r8, [r6, #8]
 800778c:	e9d9 6902 	ldrd	r6, r9, [r9, #8]
 8007790:	bf38      	it	cc
 8007792:	2201      	movcc	r2, #1
 8007794:	b083      	sub	sp, #12
 8007796:	ebb4 0a06 	subs.w	sl, r4, r6
 800779a:	bf18      	it	ne
 800779c:	f04f 0a01 	movne.w	sl, #1
 80077a0:	f5bb 7f00 	cmp.w	fp, #512	; 0x200
 80077a4:	9201      	str	r2, [sp, #4]
 80077a6:	f3cb 2217 	ubfx	r2, fp, #8, #24
 80077aa:	d308      	bcc.n	80077be <core_compute_offsets+0x6a>
 80077ac:	6847      	ldr	r7, [r0, #4]
 80077ae:	4561      	cmp	r1, ip
 80077b0:	bf0c      	ite	eq
 80077b2:	461a      	moveq	r2, r3
 80077b4:	2200      	movne	r2, #0
 80077b6:	607a      	str	r2, [r7, #4]
 80077b8:	6802      	ldr	r2, [r0, #0]
 80077ba:	f3c2 2217 	ubfx	r2, r2, #8, #24
 80077be:	9f01      	ldr	r7, [sp, #4]
 80077c0:	42bd      	cmp	r5, r7
 80077c2:	d03f      	beq.n	8007844 <core_compute_offsets+0xf0>
 80077c4:	eba1 0b0c 	sub.w	fp, r1, ip
 80077c8:	fabb fb8b 	clz	fp, fp
 80077cc:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 80077d0:	fb01 fb0b 	mul.w	fp, r1, fp
 80077d4:	f1cb 0b00 	rsb	fp, fp, #0
 80077d8:	2a04      	cmp	r2, #4
 80077da:	d906      	bls.n	80077ea <core_compute_offsets+0x96>
 80077dc:	6847      	ldr	r7, [r0, #4]
 80077de:	fb0b f203 	mul.w	r2, fp, r3
 80077e2:	613a      	str	r2, [r7, #16]
 80077e4:	6802      	ldr	r2, [r0, #0]
 80077e6:	f3c2 2217 	ubfx	r2, r2, #8, #24
 80077ea:	42b4      	cmp	r4, r6
 80077ec:	d03a      	beq.n	8007864 <core_compute_offsets+0x110>
 80077ee:	f04f 0b00 	mov.w	fp, #0
 80077f2:	2a02      	cmp	r2, #2
 80077f4:	fb0e fa0a 	mul.w	sl, lr, sl
 80077f8:	d90e      	bls.n	8007818 <core_compute_offsets+0xc4>
 80077fa:	9a01      	ldr	r2, [sp, #4]
 80077fc:	6847      	ldr	r7, [r0, #4]
 80077fe:	1aaa      	subs	r2, r5, r2
 8007800:	bf18      	it	ne
 8007802:	2201      	movne	r2, #1
 8007804:	ebab 0b0a 	sub.w	fp, fp, sl
 8007808:	fb01 bb02 	mla	fp, r1, r2, fp
 800780c:	fb03 f20b 	mul.w	r2, r3, fp
 8007810:	60ba      	str	r2, [r7, #8]
 8007812:	6802      	ldr	r2, [r0, #0]
 8007814:	f3c2 2217 	ubfx	r2, r2, #8, #24
 8007818:	45c8      	cmp	r8, r9
 800781a:	d019      	beq.n	8007850 <core_compute_offsets+0xfc>
 800781c:	2100      	movs	r1, #0
 800781e:	2a03      	cmp	r2, #3
 8007820:	d90d      	bls.n	800783e <core_compute_offsets+0xea>
 8007822:	ebb8 0809 	subs.w	r8, r8, r9
 8007826:	fb0e f404 	mul.w	r4, lr, r4
 800782a:	bf18      	it	ne
 800782c:	f04f 0801 	movne.w	r8, #1
 8007830:	fb08 1114 	mls	r1, r8, r4, r1
 8007834:	6842      	ldr	r2, [r0, #4]
 8007836:	448a      	add	sl, r1
 8007838:	fb03 f30a 	mul.w	r3, r3, sl
 800783c:	60d3      	str	r3, [r2, #12]
 800783e:	b003      	add	sp, #12
 8007840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007844:	ebb1 0b0c 	subs.w	fp, r1, ip
 8007848:	bf18      	it	ne
 800784a:	f04f 0b01 	movne.w	fp, #1
 800784e:	e7c3      	b.n	80077d8 <core_compute_offsets+0x84>
 8007850:	42b4      	cmp	r4, r6
 8007852:	d0e3      	beq.n	800781c <core_compute_offsets+0xc8>
 8007854:	9e01      	ldr	r6, [sp, #4]
 8007856:	42b5      	cmp	r5, r6
 8007858:	d0e0      	beq.n	800781c <core_compute_offsets+0xc8>
 800785a:	ebb1 010c 	subs.w	r1, r1, ip
 800785e:	bf18      	it	ne
 8007860:	2101      	movne	r1, #1
 8007862:	e7dc      	b.n	800781e <core_compute_offsets+0xca>
 8007864:	9f01      	ldr	r7, [sp, #4]
 8007866:	42bd      	cmp	r5, r7
 8007868:	d0c1      	beq.n	80077ee <core_compute_offsets+0x9a>
 800786a:	ebb1 0b0c 	subs.w	fp, r1, ip
 800786e:	bf18      	it	ne
 8007870:	f04f 0b01 	movne.w	fp, #1
 8007874:	e7bd      	b.n	80077f2 <core_compute_offsets+0x9e>
 8007876:	bf00      	nop

08007878 <sbrk_aligned>:
 8007878:	b570      	push	{r4, r5, r6, lr}
 800787a:	4e0e      	ldr	r6, [pc, #56]	; (80078b4 <sbrk_aligned+0x3c>)
 800787c:	460c      	mov	r4, r1
 800787e:	6831      	ldr	r1, [r6, #0]
 8007880:	4605      	mov	r5, r0
 8007882:	b911      	cbnz	r1, 800788a <sbrk_aligned+0x12>
 8007884:	f000 fae8 	bl	8007e58 <_sbrk_r>
 8007888:	6030      	str	r0, [r6, #0]
 800788a:	4621      	mov	r1, r4
 800788c:	4628      	mov	r0, r5
 800788e:	f000 fae3 	bl	8007e58 <_sbrk_r>
 8007892:	1c43      	adds	r3, r0, #1
 8007894:	d00a      	beq.n	80078ac <sbrk_aligned+0x34>
 8007896:	1cc4      	adds	r4, r0, #3
 8007898:	f024 0403 	bic.w	r4, r4, #3
 800789c:	42a0      	cmp	r0, r4
 800789e:	d007      	beq.n	80078b0 <sbrk_aligned+0x38>
 80078a0:	1a21      	subs	r1, r4, r0
 80078a2:	4628      	mov	r0, r5
 80078a4:	f000 fad8 	bl	8007e58 <_sbrk_r>
 80078a8:	3001      	adds	r0, #1
 80078aa:	d101      	bne.n	80078b0 <sbrk_aligned+0x38>
 80078ac:	f04f 34ff 	mov.w	r4, #4294967295
 80078b0:	4620      	mov	r0, r4
 80078b2:	bd70      	pop	{r4, r5, r6, pc}
 80078b4:	20001350 	.word	0x20001350

080078b8 <_malloc_r>:
 80078b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078bc:	1ccd      	adds	r5, r1, #3
 80078be:	f025 0503 	bic.w	r5, r5, #3
 80078c2:	3508      	adds	r5, #8
 80078c4:	2d0c      	cmp	r5, #12
 80078c6:	bf38      	it	cc
 80078c8:	250c      	movcc	r5, #12
 80078ca:	2d00      	cmp	r5, #0
 80078cc:	4607      	mov	r7, r0
 80078ce:	db01      	blt.n	80078d4 <_malloc_r+0x1c>
 80078d0:	42a9      	cmp	r1, r5
 80078d2:	d905      	bls.n	80078e0 <_malloc_r+0x28>
 80078d4:	230c      	movs	r3, #12
 80078d6:	603b      	str	r3, [r7, #0]
 80078d8:	2600      	movs	r6, #0
 80078da:	4630      	mov	r0, r6
 80078dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078e0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80079b4 <_malloc_r+0xfc>
 80078e4:	f000 f868 	bl	80079b8 <__malloc_lock>
 80078e8:	f8d8 3000 	ldr.w	r3, [r8]
 80078ec:	461c      	mov	r4, r3
 80078ee:	bb5c      	cbnz	r4, 8007948 <_malloc_r+0x90>
 80078f0:	4629      	mov	r1, r5
 80078f2:	4638      	mov	r0, r7
 80078f4:	f7ff ffc0 	bl	8007878 <sbrk_aligned>
 80078f8:	1c43      	adds	r3, r0, #1
 80078fa:	4604      	mov	r4, r0
 80078fc:	d155      	bne.n	80079aa <_malloc_r+0xf2>
 80078fe:	f8d8 4000 	ldr.w	r4, [r8]
 8007902:	4626      	mov	r6, r4
 8007904:	2e00      	cmp	r6, #0
 8007906:	d145      	bne.n	8007994 <_malloc_r+0xdc>
 8007908:	2c00      	cmp	r4, #0
 800790a:	d048      	beq.n	800799e <_malloc_r+0xe6>
 800790c:	6823      	ldr	r3, [r4, #0]
 800790e:	4631      	mov	r1, r6
 8007910:	4638      	mov	r0, r7
 8007912:	eb04 0903 	add.w	r9, r4, r3
 8007916:	f000 fa9f 	bl	8007e58 <_sbrk_r>
 800791a:	4581      	cmp	r9, r0
 800791c:	d13f      	bne.n	800799e <_malloc_r+0xe6>
 800791e:	6821      	ldr	r1, [r4, #0]
 8007920:	1a6d      	subs	r5, r5, r1
 8007922:	4629      	mov	r1, r5
 8007924:	4638      	mov	r0, r7
 8007926:	f7ff ffa7 	bl	8007878 <sbrk_aligned>
 800792a:	3001      	adds	r0, #1
 800792c:	d037      	beq.n	800799e <_malloc_r+0xe6>
 800792e:	6823      	ldr	r3, [r4, #0]
 8007930:	442b      	add	r3, r5
 8007932:	6023      	str	r3, [r4, #0]
 8007934:	f8d8 3000 	ldr.w	r3, [r8]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d038      	beq.n	80079ae <_malloc_r+0xf6>
 800793c:	685a      	ldr	r2, [r3, #4]
 800793e:	42a2      	cmp	r2, r4
 8007940:	d12b      	bne.n	800799a <_malloc_r+0xe2>
 8007942:	2200      	movs	r2, #0
 8007944:	605a      	str	r2, [r3, #4]
 8007946:	e00f      	b.n	8007968 <_malloc_r+0xb0>
 8007948:	6822      	ldr	r2, [r4, #0]
 800794a:	1b52      	subs	r2, r2, r5
 800794c:	d41f      	bmi.n	800798e <_malloc_r+0xd6>
 800794e:	2a0b      	cmp	r2, #11
 8007950:	d917      	bls.n	8007982 <_malloc_r+0xca>
 8007952:	1961      	adds	r1, r4, r5
 8007954:	42a3      	cmp	r3, r4
 8007956:	6025      	str	r5, [r4, #0]
 8007958:	bf18      	it	ne
 800795a:	6059      	strne	r1, [r3, #4]
 800795c:	6863      	ldr	r3, [r4, #4]
 800795e:	bf08      	it	eq
 8007960:	f8c8 1000 	streq.w	r1, [r8]
 8007964:	5162      	str	r2, [r4, r5]
 8007966:	604b      	str	r3, [r1, #4]
 8007968:	4638      	mov	r0, r7
 800796a:	f104 060b 	add.w	r6, r4, #11
 800796e:	f000 f829 	bl	80079c4 <__malloc_unlock>
 8007972:	f026 0607 	bic.w	r6, r6, #7
 8007976:	1d23      	adds	r3, r4, #4
 8007978:	1af2      	subs	r2, r6, r3
 800797a:	d0ae      	beq.n	80078da <_malloc_r+0x22>
 800797c:	1b9b      	subs	r3, r3, r6
 800797e:	50a3      	str	r3, [r4, r2]
 8007980:	e7ab      	b.n	80078da <_malloc_r+0x22>
 8007982:	42a3      	cmp	r3, r4
 8007984:	6862      	ldr	r2, [r4, #4]
 8007986:	d1dd      	bne.n	8007944 <_malloc_r+0x8c>
 8007988:	f8c8 2000 	str.w	r2, [r8]
 800798c:	e7ec      	b.n	8007968 <_malloc_r+0xb0>
 800798e:	4623      	mov	r3, r4
 8007990:	6864      	ldr	r4, [r4, #4]
 8007992:	e7ac      	b.n	80078ee <_malloc_r+0x36>
 8007994:	4634      	mov	r4, r6
 8007996:	6876      	ldr	r6, [r6, #4]
 8007998:	e7b4      	b.n	8007904 <_malloc_r+0x4c>
 800799a:	4613      	mov	r3, r2
 800799c:	e7cc      	b.n	8007938 <_malloc_r+0x80>
 800799e:	230c      	movs	r3, #12
 80079a0:	603b      	str	r3, [r7, #0]
 80079a2:	4638      	mov	r0, r7
 80079a4:	f000 f80e 	bl	80079c4 <__malloc_unlock>
 80079a8:	e797      	b.n	80078da <_malloc_r+0x22>
 80079aa:	6025      	str	r5, [r4, #0]
 80079ac:	e7dc      	b.n	8007968 <_malloc_r+0xb0>
 80079ae:	605b      	str	r3, [r3, #4]
 80079b0:	deff      	udf	#255	; 0xff
 80079b2:	bf00      	nop
 80079b4:	2000134c 	.word	0x2000134c

080079b8 <__malloc_lock>:
 80079b8:	4801      	ldr	r0, [pc, #4]	; (80079c0 <__malloc_lock+0x8>)
 80079ba:	f000 ba9a 	b.w	8007ef2 <__retarget_lock_acquire_recursive>
 80079be:	bf00      	nop
 80079c0:	20001494 	.word	0x20001494

080079c4 <__malloc_unlock>:
 80079c4:	4801      	ldr	r0, [pc, #4]	; (80079cc <__malloc_unlock+0x8>)
 80079c6:	f000 ba95 	b.w	8007ef4 <__retarget_lock_release_recursive>
 80079ca:	bf00      	nop
 80079cc:	20001494 	.word	0x20001494

080079d0 <std>:
 80079d0:	2300      	movs	r3, #0
 80079d2:	b510      	push	{r4, lr}
 80079d4:	4604      	mov	r4, r0
 80079d6:	e9c0 3300 	strd	r3, r3, [r0]
 80079da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80079de:	6083      	str	r3, [r0, #8]
 80079e0:	8181      	strh	r1, [r0, #12]
 80079e2:	6643      	str	r3, [r0, #100]	; 0x64
 80079e4:	81c2      	strh	r2, [r0, #14]
 80079e6:	6183      	str	r3, [r0, #24]
 80079e8:	4619      	mov	r1, r3
 80079ea:	2208      	movs	r2, #8
 80079ec:	305c      	adds	r0, #92	; 0x5c
 80079ee:	f000 f9f7 	bl	8007de0 <memset>
 80079f2:	4b0d      	ldr	r3, [pc, #52]	; (8007a28 <std+0x58>)
 80079f4:	6263      	str	r3, [r4, #36]	; 0x24
 80079f6:	4b0d      	ldr	r3, [pc, #52]	; (8007a2c <std+0x5c>)
 80079f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80079fa:	4b0d      	ldr	r3, [pc, #52]	; (8007a30 <std+0x60>)
 80079fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80079fe:	4b0d      	ldr	r3, [pc, #52]	; (8007a34 <std+0x64>)
 8007a00:	6323      	str	r3, [r4, #48]	; 0x30
 8007a02:	4b0d      	ldr	r3, [pc, #52]	; (8007a38 <std+0x68>)
 8007a04:	6224      	str	r4, [r4, #32]
 8007a06:	429c      	cmp	r4, r3
 8007a08:	d006      	beq.n	8007a18 <std+0x48>
 8007a0a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007a0e:	4294      	cmp	r4, r2
 8007a10:	d002      	beq.n	8007a18 <std+0x48>
 8007a12:	33d0      	adds	r3, #208	; 0xd0
 8007a14:	429c      	cmp	r4, r3
 8007a16:	d105      	bne.n	8007a24 <std+0x54>
 8007a18:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007a1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a20:	f000 ba66 	b.w	8007ef0 <__retarget_lock_init_recursive>
 8007a24:	bd10      	pop	{r4, pc}
 8007a26:	bf00      	nop
 8007a28:	08007c31 	.word	0x08007c31
 8007a2c:	08007c53 	.word	0x08007c53
 8007a30:	08007c8b 	.word	0x08007c8b
 8007a34:	08007caf 	.word	0x08007caf
 8007a38:	20001354 	.word	0x20001354

08007a3c <stdio_exit_handler>:
 8007a3c:	4a02      	ldr	r2, [pc, #8]	; (8007a48 <stdio_exit_handler+0xc>)
 8007a3e:	4903      	ldr	r1, [pc, #12]	; (8007a4c <stdio_exit_handler+0x10>)
 8007a40:	4803      	ldr	r0, [pc, #12]	; (8007a50 <stdio_exit_handler+0x14>)
 8007a42:	f000 b869 	b.w	8007b18 <_fwalk_sglue>
 8007a46:	bf00      	nop
 8007a48:	20000c64 	.word	0x20000c64
 8007a4c:	08008661 	.word	0x08008661
 8007a50:	20000c70 	.word	0x20000c70

08007a54 <cleanup_stdio>:
 8007a54:	6841      	ldr	r1, [r0, #4]
 8007a56:	4b0c      	ldr	r3, [pc, #48]	; (8007a88 <cleanup_stdio+0x34>)
 8007a58:	4299      	cmp	r1, r3
 8007a5a:	b510      	push	{r4, lr}
 8007a5c:	4604      	mov	r4, r0
 8007a5e:	d001      	beq.n	8007a64 <cleanup_stdio+0x10>
 8007a60:	f000 fdfe 	bl	8008660 <_fflush_r>
 8007a64:	68a1      	ldr	r1, [r4, #8]
 8007a66:	4b09      	ldr	r3, [pc, #36]	; (8007a8c <cleanup_stdio+0x38>)
 8007a68:	4299      	cmp	r1, r3
 8007a6a:	d002      	beq.n	8007a72 <cleanup_stdio+0x1e>
 8007a6c:	4620      	mov	r0, r4
 8007a6e:	f000 fdf7 	bl	8008660 <_fflush_r>
 8007a72:	68e1      	ldr	r1, [r4, #12]
 8007a74:	4b06      	ldr	r3, [pc, #24]	; (8007a90 <cleanup_stdio+0x3c>)
 8007a76:	4299      	cmp	r1, r3
 8007a78:	d004      	beq.n	8007a84 <cleanup_stdio+0x30>
 8007a7a:	4620      	mov	r0, r4
 8007a7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a80:	f000 bdee 	b.w	8008660 <_fflush_r>
 8007a84:	bd10      	pop	{r4, pc}
 8007a86:	bf00      	nop
 8007a88:	20001354 	.word	0x20001354
 8007a8c:	200013bc 	.word	0x200013bc
 8007a90:	20001424 	.word	0x20001424

08007a94 <global_stdio_init.part.0>:
 8007a94:	b510      	push	{r4, lr}
 8007a96:	4b0b      	ldr	r3, [pc, #44]	; (8007ac4 <global_stdio_init.part.0+0x30>)
 8007a98:	4c0b      	ldr	r4, [pc, #44]	; (8007ac8 <global_stdio_init.part.0+0x34>)
 8007a9a:	4a0c      	ldr	r2, [pc, #48]	; (8007acc <global_stdio_init.part.0+0x38>)
 8007a9c:	601a      	str	r2, [r3, #0]
 8007a9e:	4620      	mov	r0, r4
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	2104      	movs	r1, #4
 8007aa4:	f7ff ff94 	bl	80079d0 <std>
 8007aa8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007aac:	2201      	movs	r2, #1
 8007aae:	2109      	movs	r1, #9
 8007ab0:	f7ff ff8e 	bl	80079d0 <std>
 8007ab4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007ab8:	2202      	movs	r2, #2
 8007aba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007abe:	2112      	movs	r1, #18
 8007ac0:	f7ff bf86 	b.w	80079d0 <std>
 8007ac4:	2000148c 	.word	0x2000148c
 8007ac8:	20001354 	.word	0x20001354
 8007acc:	08007a3d 	.word	0x08007a3d

08007ad0 <__sfp_lock_acquire>:
 8007ad0:	4801      	ldr	r0, [pc, #4]	; (8007ad8 <__sfp_lock_acquire+0x8>)
 8007ad2:	f000 ba0e 	b.w	8007ef2 <__retarget_lock_acquire_recursive>
 8007ad6:	bf00      	nop
 8007ad8:	20001495 	.word	0x20001495

08007adc <__sfp_lock_release>:
 8007adc:	4801      	ldr	r0, [pc, #4]	; (8007ae4 <__sfp_lock_release+0x8>)
 8007ade:	f000 ba09 	b.w	8007ef4 <__retarget_lock_release_recursive>
 8007ae2:	bf00      	nop
 8007ae4:	20001495 	.word	0x20001495

08007ae8 <__sinit>:
 8007ae8:	b510      	push	{r4, lr}
 8007aea:	4604      	mov	r4, r0
 8007aec:	f7ff fff0 	bl	8007ad0 <__sfp_lock_acquire>
 8007af0:	6a23      	ldr	r3, [r4, #32]
 8007af2:	b11b      	cbz	r3, 8007afc <__sinit+0x14>
 8007af4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007af8:	f7ff bff0 	b.w	8007adc <__sfp_lock_release>
 8007afc:	4b04      	ldr	r3, [pc, #16]	; (8007b10 <__sinit+0x28>)
 8007afe:	6223      	str	r3, [r4, #32]
 8007b00:	4b04      	ldr	r3, [pc, #16]	; (8007b14 <__sinit+0x2c>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d1f5      	bne.n	8007af4 <__sinit+0xc>
 8007b08:	f7ff ffc4 	bl	8007a94 <global_stdio_init.part.0>
 8007b0c:	e7f2      	b.n	8007af4 <__sinit+0xc>
 8007b0e:	bf00      	nop
 8007b10:	08007a55 	.word	0x08007a55
 8007b14:	2000148c 	.word	0x2000148c

08007b18 <_fwalk_sglue>:
 8007b18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b1c:	4607      	mov	r7, r0
 8007b1e:	4688      	mov	r8, r1
 8007b20:	4614      	mov	r4, r2
 8007b22:	2600      	movs	r6, #0
 8007b24:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007b28:	f1b9 0901 	subs.w	r9, r9, #1
 8007b2c:	d505      	bpl.n	8007b3a <_fwalk_sglue+0x22>
 8007b2e:	6824      	ldr	r4, [r4, #0]
 8007b30:	2c00      	cmp	r4, #0
 8007b32:	d1f7      	bne.n	8007b24 <_fwalk_sglue+0xc>
 8007b34:	4630      	mov	r0, r6
 8007b36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b3a:	89ab      	ldrh	r3, [r5, #12]
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d907      	bls.n	8007b50 <_fwalk_sglue+0x38>
 8007b40:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007b44:	3301      	adds	r3, #1
 8007b46:	d003      	beq.n	8007b50 <_fwalk_sglue+0x38>
 8007b48:	4629      	mov	r1, r5
 8007b4a:	4638      	mov	r0, r7
 8007b4c:	47c0      	blx	r8
 8007b4e:	4306      	orrs	r6, r0
 8007b50:	3568      	adds	r5, #104	; 0x68
 8007b52:	e7e9      	b.n	8007b28 <_fwalk_sglue+0x10>

08007b54 <iprintf>:
 8007b54:	b40f      	push	{r0, r1, r2, r3}
 8007b56:	b507      	push	{r0, r1, r2, lr}
 8007b58:	4906      	ldr	r1, [pc, #24]	; (8007b74 <iprintf+0x20>)
 8007b5a:	ab04      	add	r3, sp, #16
 8007b5c:	6808      	ldr	r0, [r1, #0]
 8007b5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b62:	6881      	ldr	r1, [r0, #8]
 8007b64:	9301      	str	r3, [sp, #4]
 8007b66:	f000 fa4b 	bl	8008000 <_vfiprintf_r>
 8007b6a:	b003      	add	sp, #12
 8007b6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b70:	b004      	add	sp, #16
 8007b72:	4770      	bx	lr
 8007b74:	20000cbc 	.word	0x20000cbc

08007b78 <_puts_r>:
 8007b78:	6a03      	ldr	r3, [r0, #32]
 8007b7a:	b570      	push	{r4, r5, r6, lr}
 8007b7c:	6884      	ldr	r4, [r0, #8]
 8007b7e:	4605      	mov	r5, r0
 8007b80:	460e      	mov	r6, r1
 8007b82:	b90b      	cbnz	r3, 8007b88 <_puts_r+0x10>
 8007b84:	f7ff ffb0 	bl	8007ae8 <__sinit>
 8007b88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b8a:	07db      	lsls	r3, r3, #31
 8007b8c:	d405      	bmi.n	8007b9a <_puts_r+0x22>
 8007b8e:	89a3      	ldrh	r3, [r4, #12]
 8007b90:	0598      	lsls	r0, r3, #22
 8007b92:	d402      	bmi.n	8007b9a <_puts_r+0x22>
 8007b94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b96:	f000 f9ac 	bl	8007ef2 <__retarget_lock_acquire_recursive>
 8007b9a:	89a3      	ldrh	r3, [r4, #12]
 8007b9c:	0719      	lsls	r1, r3, #28
 8007b9e:	d513      	bpl.n	8007bc8 <_puts_r+0x50>
 8007ba0:	6923      	ldr	r3, [r4, #16]
 8007ba2:	b18b      	cbz	r3, 8007bc8 <_puts_r+0x50>
 8007ba4:	3e01      	subs	r6, #1
 8007ba6:	68a3      	ldr	r3, [r4, #8]
 8007ba8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007bac:	3b01      	subs	r3, #1
 8007bae:	60a3      	str	r3, [r4, #8]
 8007bb0:	b9e9      	cbnz	r1, 8007bee <_puts_r+0x76>
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	da2e      	bge.n	8007c14 <_puts_r+0x9c>
 8007bb6:	4622      	mov	r2, r4
 8007bb8:	210a      	movs	r1, #10
 8007bba:	4628      	mov	r0, r5
 8007bbc:	f000 f87b 	bl	8007cb6 <__swbuf_r>
 8007bc0:	3001      	adds	r0, #1
 8007bc2:	d007      	beq.n	8007bd4 <_puts_r+0x5c>
 8007bc4:	250a      	movs	r5, #10
 8007bc6:	e007      	b.n	8007bd8 <_puts_r+0x60>
 8007bc8:	4621      	mov	r1, r4
 8007bca:	4628      	mov	r0, r5
 8007bcc:	f000 f8b0 	bl	8007d30 <__swsetup_r>
 8007bd0:	2800      	cmp	r0, #0
 8007bd2:	d0e7      	beq.n	8007ba4 <_puts_r+0x2c>
 8007bd4:	f04f 35ff 	mov.w	r5, #4294967295
 8007bd8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007bda:	07da      	lsls	r2, r3, #31
 8007bdc:	d405      	bmi.n	8007bea <_puts_r+0x72>
 8007bde:	89a3      	ldrh	r3, [r4, #12]
 8007be0:	059b      	lsls	r3, r3, #22
 8007be2:	d402      	bmi.n	8007bea <_puts_r+0x72>
 8007be4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007be6:	f000 f985 	bl	8007ef4 <__retarget_lock_release_recursive>
 8007bea:	4628      	mov	r0, r5
 8007bec:	bd70      	pop	{r4, r5, r6, pc}
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	da04      	bge.n	8007bfc <_puts_r+0x84>
 8007bf2:	69a2      	ldr	r2, [r4, #24]
 8007bf4:	429a      	cmp	r2, r3
 8007bf6:	dc06      	bgt.n	8007c06 <_puts_r+0x8e>
 8007bf8:	290a      	cmp	r1, #10
 8007bfa:	d004      	beq.n	8007c06 <_puts_r+0x8e>
 8007bfc:	6823      	ldr	r3, [r4, #0]
 8007bfe:	1c5a      	adds	r2, r3, #1
 8007c00:	6022      	str	r2, [r4, #0]
 8007c02:	7019      	strb	r1, [r3, #0]
 8007c04:	e7cf      	b.n	8007ba6 <_puts_r+0x2e>
 8007c06:	4622      	mov	r2, r4
 8007c08:	4628      	mov	r0, r5
 8007c0a:	f000 f854 	bl	8007cb6 <__swbuf_r>
 8007c0e:	3001      	adds	r0, #1
 8007c10:	d1c9      	bne.n	8007ba6 <_puts_r+0x2e>
 8007c12:	e7df      	b.n	8007bd4 <_puts_r+0x5c>
 8007c14:	6823      	ldr	r3, [r4, #0]
 8007c16:	250a      	movs	r5, #10
 8007c18:	1c5a      	adds	r2, r3, #1
 8007c1a:	6022      	str	r2, [r4, #0]
 8007c1c:	701d      	strb	r5, [r3, #0]
 8007c1e:	e7db      	b.n	8007bd8 <_puts_r+0x60>

08007c20 <puts>:
 8007c20:	4b02      	ldr	r3, [pc, #8]	; (8007c2c <puts+0xc>)
 8007c22:	4601      	mov	r1, r0
 8007c24:	6818      	ldr	r0, [r3, #0]
 8007c26:	f7ff bfa7 	b.w	8007b78 <_puts_r>
 8007c2a:	bf00      	nop
 8007c2c:	20000cbc 	.word	0x20000cbc

08007c30 <__sread>:
 8007c30:	b510      	push	{r4, lr}
 8007c32:	460c      	mov	r4, r1
 8007c34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c38:	f000 f8fc 	bl	8007e34 <_read_r>
 8007c3c:	2800      	cmp	r0, #0
 8007c3e:	bfab      	itete	ge
 8007c40:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007c42:	89a3      	ldrhlt	r3, [r4, #12]
 8007c44:	181b      	addge	r3, r3, r0
 8007c46:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007c4a:	bfac      	ite	ge
 8007c4c:	6563      	strge	r3, [r4, #84]	; 0x54
 8007c4e:	81a3      	strhlt	r3, [r4, #12]
 8007c50:	bd10      	pop	{r4, pc}

08007c52 <__swrite>:
 8007c52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c56:	461f      	mov	r7, r3
 8007c58:	898b      	ldrh	r3, [r1, #12]
 8007c5a:	05db      	lsls	r3, r3, #23
 8007c5c:	4605      	mov	r5, r0
 8007c5e:	460c      	mov	r4, r1
 8007c60:	4616      	mov	r6, r2
 8007c62:	d505      	bpl.n	8007c70 <__swrite+0x1e>
 8007c64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c68:	2302      	movs	r3, #2
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	f000 f8d0 	bl	8007e10 <_lseek_r>
 8007c70:	89a3      	ldrh	r3, [r4, #12]
 8007c72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c7a:	81a3      	strh	r3, [r4, #12]
 8007c7c:	4632      	mov	r2, r6
 8007c7e:	463b      	mov	r3, r7
 8007c80:	4628      	mov	r0, r5
 8007c82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c86:	f000 b8f7 	b.w	8007e78 <_write_r>

08007c8a <__sseek>:
 8007c8a:	b510      	push	{r4, lr}
 8007c8c:	460c      	mov	r4, r1
 8007c8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c92:	f000 f8bd 	bl	8007e10 <_lseek_r>
 8007c96:	1c43      	adds	r3, r0, #1
 8007c98:	89a3      	ldrh	r3, [r4, #12]
 8007c9a:	bf15      	itete	ne
 8007c9c:	6560      	strne	r0, [r4, #84]	; 0x54
 8007c9e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007ca2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007ca6:	81a3      	strheq	r3, [r4, #12]
 8007ca8:	bf18      	it	ne
 8007caa:	81a3      	strhne	r3, [r4, #12]
 8007cac:	bd10      	pop	{r4, pc}

08007cae <__sclose>:
 8007cae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cb2:	f000 b89d 	b.w	8007df0 <_close_r>

08007cb6 <__swbuf_r>:
 8007cb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cb8:	460e      	mov	r6, r1
 8007cba:	4614      	mov	r4, r2
 8007cbc:	4605      	mov	r5, r0
 8007cbe:	b118      	cbz	r0, 8007cc8 <__swbuf_r+0x12>
 8007cc0:	6a03      	ldr	r3, [r0, #32]
 8007cc2:	b90b      	cbnz	r3, 8007cc8 <__swbuf_r+0x12>
 8007cc4:	f7ff ff10 	bl	8007ae8 <__sinit>
 8007cc8:	69a3      	ldr	r3, [r4, #24]
 8007cca:	60a3      	str	r3, [r4, #8]
 8007ccc:	89a3      	ldrh	r3, [r4, #12]
 8007cce:	071a      	lsls	r2, r3, #28
 8007cd0:	d525      	bpl.n	8007d1e <__swbuf_r+0x68>
 8007cd2:	6923      	ldr	r3, [r4, #16]
 8007cd4:	b31b      	cbz	r3, 8007d1e <__swbuf_r+0x68>
 8007cd6:	6823      	ldr	r3, [r4, #0]
 8007cd8:	6922      	ldr	r2, [r4, #16]
 8007cda:	1a98      	subs	r0, r3, r2
 8007cdc:	6963      	ldr	r3, [r4, #20]
 8007cde:	b2f6      	uxtb	r6, r6
 8007ce0:	4283      	cmp	r3, r0
 8007ce2:	4637      	mov	r7, r6
 8007ce4:	dc04      	bgt.n	8007cf0 <__swbuf_r+0x3a>
 8007ce6:	4621      	mov	r1, r4
 8007ce8:	4628      	mov	r0, r5
 8007cea:	f000 fcb9 	bl	8008660 <_fflush_r>
 8007cee:	b9e0      	cbnz	r0, 8007d2a <__swbuf_r+0x74>
 8007cf0:	68a3      	ldr	r3, [r4, #8]
 8007cf2:	3b01      	subs	r3, #1
 8007cf4:	60a3      	str	r3, [r4, #8]
 8007cf6:	6823      	ldr	r3, [r4, #0]
 8007cf8:	1c5a      	adds	r2, r3, #1
 8007cfa:	6022      	str	r2, [r4, #0]
 8007cfc:	701e      	strb	r6, [r3, #0]
 8007cfe:	6962      	ldr	r2, [r4, #20]
 8007d00:	1c43      	adds	r3, r0, #1
 8007d02:	429a      	cmp	r2, r3
 8007d04:	d004      	beq.n	8007d10 <__swbuf_r+0x5a>
 8007d06:	89a3      	ldrh	r3, [r4, #12]
 8007d08:	07db      	lsls	r3, r3, #31
 8007d0a:	d506      	bpl.n	8007d1a <__swbuf_r+0x64>
 8007d0c:	2e0a      	cmp	r6, #10
 8007d0e:	d104      	bne.n	8007d1a <__swbuf_r+0x64>
 8007d10:	4621      	mov	r1, r4
 8007d12:	4628      	mov	r0, r5
 8007d14:	f000 fca4 	bl	8008660 <_fflush_r>
 8007d18:	b938      	cbnz	r0, 8007d2a <__swbuf_r+0x74>
 8007d1a:	4638      	mov	r0, r7
 8007d1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d1e:	4621      	mov	r1, r4
 8007d20:	4628      	mov	r0, r5
 8007d22:	f000 f805 	bl	8007d30 <__swsetup_r>
 8007d26:	2800      	cmp	r0, #0
 8007d28:	d0d5      	beq.n	8007cd6 <__swbuf_r+0x20>
 8007d2a:	f04f 37ff 	mov.w	r7, #4294967295
 8007d2e:	e7f4      	b.n	8007d1a <__swbuf_r+0x64>

08007d30 <__swsetup_r>:
 8007d30:	b538      	push	{r3, r4, r5, lr}
 8007d32:	4b2a      	ldr	r3, [pc, #168]	; (8007ddc <__swsetup_r+0xac>)
 8007d34:	4605      	mov	r5, r0
 8007d36:	6818      	ldr	r0, [r3, #0]
 8007d38:	460c      	mov	r4, r1
 8007d3a:	b118      	cbz	r0, 8007d44 <__swsetup_r+0x14>
 8007d3c:	6a03      	ldr	r3, [r0, #32]
 8007d3e:	b90b      	cbnz	r3, 8007d44 <__swsetup_r+0x14>
 8007d40:	f7ff fed2 	bl	8007ae8 <__sinit>
 8007d44:	89a3      	ldrh	r3, [r4, #12]
 8007d46:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007d4a:	0718      	lsls	r0, r3, #28
 8007d4c:	d422      	bmi.n	8007d94 <__swsetup_r+0x64>
 8007d4e:	06d9      	lsls	r1, r3, #27
 8007d50:	d407      	bmi.n	8007d62 <__swsetup_r+0x32>
 8007d52:	2309      	movs	r3, #9
 8007d54:	602b      	str	r3, [r5, #0]
 8007d56:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007d5a:	81a3      	strh	r3, [r4, #12]
 8007d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d60:	e034      	b.n	8007dcc <__swsetup_r+0x9c>
 8007d62:	0758      	lsls	r0, r3, #29
 8007d64:	d512      	bpl.n	8007d8c <__swsetup_r+0x5c>
 8007d66:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d68:	b141      	cbz	r1, 8007d7c <__swsetup_r+0x4c>
 8007d6a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d6e:	4299      	cmp	r1, r3
 8007d70:	d002      	beq.n	8007d78 <__swsetup_r+0x48>
 8007d72:	4628      	mov	r0, r5
 8007d74:	f000 f8ce 	bl	8007f14 <_free_r>
 8007d78:	2300      	movs	r3, #0
 8007d7a:	6363      	str	r3, [r4, #52]	; 0x34
 8007d7c:	89a3      	ldrh	r3, [r4, #12]
 8007d7e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007d82:	81a3      	strh	r3, [r4, #12]
 8007d84:	2300      	movs	r3, #0
 8007d86:	6063      	str	r3, [r4, #4]
 8007d88:	6923      	ldr	r3, [r4, #16]
 8007d8a:	6023      	str	r3, [r4, #0]
 8007d8c:	89a3      	ldrh	r3, [r4, #12]
 8007d8e:	f043 0308 	orr.w	r3, r3, #8
 8007d92:	81a3      	strh	r3, [r4, #12]
 8007d94:	6923      	ldr	r3, [r4, #16]
 8007d96:	b94b      	cbnz	r3, 8007dac <__swsetup_r+0x7c>
 8007d98:	89a3      	ldrh	r3, [r4, #12]
 8007d9a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007d9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007da2:	d003      	beq.n	8007dac <__swsetup_r+0x7c>
 8007da4:	4621      	mov	r1, r4
 8007da6:	4628      	mov	r0, r5
 8007da8:	f000 fca8 	bl	80086fc <__smakebuf_r>
 8007dac:	89a0      	ldrh	r0, [r4, #12]
 8007dae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007db2:	f010 0301 	ands.w	r3, r0, #1
 8007db6:	d00a      	beq.n	8007dce <__swsetup_r+0x9e>
 8007db8:	2300      	movs	r3, #0
 8007dba:	60a3      	str	r3, [r4, #8]
 8007dbc:	6963      	ldr	r3, [r4, #20]
 8007dbe:	425b      	negs	r3, r3
 8007dc0:	61a3      	str	r3, [r4, #24]
 8007dc2:	6923      	ldr	r3, [r4, #16]
 8007dc4:	b943      	cbnz	r3, 8007dd8 <__swsetup_r+0xa8>
 8007dc6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007dca:	d1c4      	bne.n	8007d56 <__swsetup_r+0x26>
 8007dcc:	bd38      	pop	{r3, r4, r5, pc}
 8007dce:	0781      	lsls	r1, r0, #30
 8007dd0:	bf58      	it	pl
 8007dd2:	6963      	ldrpl	r3, [r4, #20]
 8007dd4:	60a3      	str	r3, [r4, #8]
 8007dd6:	e7f4      	b.n	8007dc2 <__swsetup_r+0x92>
 8007dd8:	2000      	movs	r0, #0
 8007dda:	e7f7      	b.n	8007dcc <__swsetup_r+0x9c>
 8007ddc:	20000cbc 	.word	0x20000cbc

08007de0 <memset>:
 8007de0:	4402      	add	r2, r0
 8007de2:	4603      	mov	r3, r0
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d100      	bne.n	8007dea <memset+0xa>
 8007de8:	4770      	bx	lr
 8007dea:	f803 1b01 	strb.w	r1, [r3], #1
 8007dee:	e7f9      	b.n	8007de4 <memset+0x4>

08007df0 <_close_r>:
 8007df0:	b538      	push	{r3, r4, r5, lr}
 8007df2:	4d06      	ldr	r5, [pc, #24]	; (8007e0c <_close_r+0x1c>)
 8007df4:	2300      	movs	r3, #0
 8007df6:	4604      	mov	r4, r0
 8007df8:	4608      	mov	r0, r1
 8007dfa:	602b      	str	r3, [r5, #0]
 8007dfc:	f000 fe10 	bl	8008a20 <_close>
 8007e00:	1c43      	adds	r3, r0, #1
 8007e02:	d102      	bne.n	8007e0a <_close_r+0x1a>
 8007e04:	682b      	ldr	r3, [r5, #0]
 8007e06:	b103      	cbz	r3, 8007e0a <_close_r+0x1a>
 8007e08:	6023      	str	r3, [r4, #0]
 8007e0a:	bd38      	pop	{r3, r4, r5, pc}
 8007e0c:	20001490 	.word	0x20001490

08007e10 <_lseek_r>:
 8007e10:	b538      	push	{r3, r4, r5, lr}
 8007e12:	4d07      	ldr	r5, [pc, #28]	; (8007e30 <_lseek_r+0x20>)
 8007e14:	4604      	mov	r4, r0
 8007e16:	4608      	mov	r0, r1
 8007e18:	4611      	mov	r1, r2
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	602a      	str	r2, [r5, #0]
 8007e1e:	461a      	mov	r2, r3
 8007e20:	f000 fe16 	bl	8008a50 <_lseek>
 8007e24:	1c43      	adds	r3, r0, #1
 8007e26:	d102      	bne.n	8007e2e <_lseek_r+0x1e>
 8007e28:	682b      	ldr	r3, [r5, #0]
 8007e2a:	b103      	cbz	r3, 8007e2e <_lseek_r+0x1e>
 8007e2c:	6023      	str	r3, [r4, #0]
 8007e2e:	bd38      	pop	{r3, r4, r5, pc}
 8007e30:	20001490 	.word	0x20001490

08007e34 <_read_r>:
 8007e34:	b538      	push	{r3, r4, r5, lr}
 8007e36:	4d07      	ldr	r5, [pc, #28]	; (8007e54 <_read_r+0x20>)
 8007e38:	4604      	mov	r4, r0
 8007e3a:	4608      	mov	r0, r1
 8007e3c:	4611      	mov	r1, r2
 8007e3e:	2200      	movs	r2, #0
 8007e40:	602a      	str	r2, [r5, #0]
 8007e42:	461a      	mov	r2, r3
 8007e44:	f000 fe0c 	bl	8008a60 <_read>
 8007e48:	1c43      	adds	r3, r0, #1
 8007e4a:	d102      	bne.n	8007e52 <_read_r+0x1e>
 8007e4c:	682b      	ldr	r3, [r5, #0]
 8007e4e:	b103      	cbz	r3, 8007e52 <_read_r+0x1e>
 8007e50:	6023      	str	r3, [r4, #0]
 8007e52:	bd38      	pop	{r3, r4, r5, pc}
 8007e54:	20001490 	.word	0x20001490

08007e58 <_sbrk_r>:
 8007e58:	b538      	push	{r3, r4, r5, lr}
 8007e5a:	4d06      	ldr	r5, [pc, #24]	; (8007e74 <_sbrk_r+0x1c>)
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	4604      	mov	r4, r0
 8007e60:	4608      	mov	r0, r1
 8007e62:	602b      	str	r3, [r5, #0]
 8007e64:	f7f8 fd5c 	bl	8000920 <_sbrk>
 8007e68:	1c43      	adds	r3, r0, #1
 8007e6a:	d102      	bne.n	8007e72 <_sbrk_r+0x1a>
 8007e6c:	682b      	ldr	r3, [r5, #0]
 8007e6e:	b103      	cbz	r3, 8007e72 <_sbrk_r+0x1a>
 8007e70:	6023      	str	r3, [r4, #0]
 8007e72:	bd38      	pop	{r3, r4, r5, pc}
 8007e74:	20001490 	.word	0x20001490

08007e78 <_write_r>:
 8007e78:	b538      	push	{r3, r4, r5, lr}
 8007e7a:	4d07      	ldr	r5, [pc, #28]	; (8007e98 <_write_r+0x20>)
 8007e7c:	4604      	mov	r4, r0
 8007e7e:	4608      	mov	r0, r1
 8007e80:	4611      	mov	r1, r2
 8007e82:	2200      	movs	r2, #0
 8007e84:	602a      	str	r2, [r5, #0]
 8007e86:	461a      	mov	r2, r3
 8007e88:	f000 fdf2 	bl	8008a70 <_write>
 8007e8c:	1c43      	adds	r3, r0, #1
 8007e8e:	d102      	bne.n	8007e96 <_write_r+0x1e>
 8007e90:	682b      	ldr	r3, [r5, #0]
 8007e92:	b103      	cbz	r3, 8007e96 <_write_r+0x1e>
 8007e94:	6023      	str	r3, [r4, #0]
 8007e96:	bd38      	pop	{r3, r4, r5, pc}
 8007e98:	20001490 	.word	0x20001490

08007e9c <__errno>:
 8007e9c:	4b01      	ldr	r3, [pc, #4]	; (8007ea4 <__errno+0x8>)
 8007e9e:	6818      	ldr	r0, [r3, #0]
 8007ea0:	4770      	bx	lr
 8007ea2:	bf00      	nop
 8007ea4:	20000cbc 	.word	0x20000cbc

08007ea8 <__libc_init_array>:
 8007ea8:	b570      	push	{r4, r5, r6, lr}
 8007eaa:	4d0d      	ldr	r5, [pc, #52]	; (8007ee0 <__libc_init_array+0x38>)
 8007eac:	4c0d      	ldr	r4, [pc, #52]	; (8007ee4 <__libc_init_array+0x3c>)
 8007eae:	1b64      	subs	r4, r4, r5
 8007eb0:	10a4      	asrs	r4, r4, #2
 8007eb2:	2600      	movs	r6, #0
 8007eb4:	42a6      	cmp	r6, r4
 8007eb6:	d109      	bne.n	8007ecc <__libc_init_array+0x24>
 8007eb8:	4d0b      	ldr	r5, [pc, #44]	; (8007ee8 <__libc_init_array+0x40>)
 8007eba:	4c0c      	ldr	r4, [pc, #48]	; (8007eec <__libc_init_array+0x44>)
 8007ebc:	f000 fde0 	bl	8008a80 <_init>
 8007ec0:	1b64      	subs	r4, r4, r5
 8007ec2:	10a4      	asrs	r4, r4, #2
 8007ec4:	2600      	movs	r6, #0
 8007ec6:	42a6      	cmp	r6, r4
 8007ec8:	d105      	bne.n	8007ed6 <__libc_init_array+0x2e>
 8007eca:	bd70      	pop	{r4, r5, r6, pc}
 8007ecc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ed0:	4798      	blx	r3
 8007ed2:	3601      	adds	r6, #1
 8007ed4:	e7ee      	b.n	8007eb4 <__libc_init_array+0xc>
 8007ed6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007eda:	4798      	blx	r3
 8007edc:	3601      	adds	r6, #1
 8007ede:	e7f2      	b.n	8007ec6 <__libc_init_array+0x1e>
 8007ee0:	0800dd14 	.word	0x0800dd14
 8007ee4:	0800dd14 	.word	0x0800dd14
 8007ee8:	0800dd14 	.word	0x0800dd14
 8007eec:	0800dd18 	.word	0x0800dd18

08007ef0 <__retarget_lock_init_recursive>:
 8007ef0:	4770      	bx	lr

08007ef2 <__retarget_lock_acquire_recursive>:
 8007ef2:	4770      	bx	lr

08007ef4 <__retarget_lock_release_recursive>:
 8007ef4:	4770      	bx	lr

08007ef6 <memcpy>:
 8007ef6:	440a      	add	r2, r1
 8007ef8:	4291      	cmp	r1, r2
 8007efa:	f100 33ff 	add.w	r3, r0, #4294967295
 8007efe:	d100      	bne.n	8007f02 <memcpy+0xc>
 8007f00:	4770      	bx	lr
 8007f02:	b510      	push	{r4, lr}
 8007f04:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f08:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f0c:	4291      	cmp	r1, r2
 8007f0e:	d1f9      	bne.n	8007f04 <memcpy+0xe>
 8007f10:	bd10      	pop	{r4, pc}
	...

08007f14 <_free_r>:
 8007f14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007f16:	2900      	cmp	r1, #0
 8007f18:	d044      	beq.n	8007fa4 <_free_r+0x90>
 8007f1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f1e:	9001      	str	r0, [sp, #4]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	f1a1 0404 	sub.w	r4, r1, #4
 8007f26:	bfb8      	it	lt
 8007f28:	18e4      	addlt	r4, r4, r3
 8007f2a:	f7ff fd45 	bl	80079b8 <__malloc_lock>
 8007f2e:	4a1e      	ldr	r2, [pc, #120]	; (8007fa8 <_free_r+0x94>)
 8007f30:	9801      	ldr	r0, [sp, #4]
 8007f32:	6813      	ldr	r3, [r2, #0]
 8007f34:	b933      	cbnz	r3, 8007f44 <_free_r+0x30>
 8007f36:	6063      	str	r3, [r4, #4]
 8007f38:	6014      	str	r4, [r2, #0]
 8007f3a:	b003      	add	sp, #12
 8007f3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007f40:	f7ff bd40 	b.w	80079c4 <__malloc_unlock>
 8007f44:	42a3      	cmp	r3, r4
 8007f46:	d908      	bls.n	8007f5a <_free_r+0x46>
 8007f48:	6825      	ldr	r5, [r4, #0]
 8007f4a:	1961      	adds	r1, r4, r5
 8007f4c:	428b      	cmp	r3, r1
 8007f4e:	bf01      	itttt	eq
 8007f50:	6819      	ldreq	r1, [r3, #0]
 8007f52:	685b      	ldreq	r3, [r3, #4]
 8007f54:	1949      	addeq	r1, r1, r5
 8007f56:	6021      	streq	r1, [r4, #0]
 8007f58:	e7ed      	b.n	8007f36 <_free_r+0x22>
 8007f5a:	461a      	mov	r2, r3
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	b10b      	cbz	r3, 8007f64 <_free_r+0x50>
 8007f60:	42a3      	cmp	r3, r4
 8007f62:	d9fa      	bls.n	8007f5a <_free_r+0x46>
 8007f64:	6811      	ldr	r1, [r2, #0]
 8007f66:	1855      	adds	r5, r2, r1
 8007f68:	42a5      	cmp	r5, r4
 8007f6a:	d10b      	bne.n	8007f84 <_free_r+0x70>
 8007f6c:	6824      	ldr	r4, [r4, #0]
 8007f6e:	4421      	add	r1, r4
 8007f70:	1854      	adds	r4, r2, r1
 8007f72:	42a3      	cmp	r3, r4
 8007f74:	6011      	str	r1, [r2, #0]
 8007f76:	d1e0      	bne.n	8007f3a <_free_r+0x26>
 8007f78:	681c      	ldr	r4, [r3, #0]
 8007f7a:	685b      	ldr	r3, [r3, #4]
 8007f7c:	6053      	str	r3, [r2, #4]
 8007f7e:	440c      	add	r4, r1
 8007f80:	6014      	str	r4, [r2, #0]
 8007f82:	e7da      	b.n	8007f3a <_free_r+0x26>
 8007f84:	d902      	bls.n	8007f8c <_free_r+0x78>
 8007f86:	230c      	movs	r3, #12
 8007f88:	6003      	str	r3, [r0, #0]
 8007f8a:	e7d6      	b.n	8007f3a <_free_r+0x26>
 8007f8c:	6825      	ldr	r5, [r4, #0]
 8007f8e:	1961      	adds	r1, r4, r5
 8007f90:	428b      	cmp	r3, r1
 8007f92:	bf04      	itt	eq
 8007f94:	6819      	ldreq	r1, [r3, #0]
 8007f96:	685b      	ldreq	r3, [r3, #4]
 8007f98:	6063      	str	r3, [r4, #4]
 8007f9a:	bf04      	itt	eq
 8007f9c:	1949      	addeq	r1, r1, r5
 8007f9e:	6021      	streq	r1, [r4, #0]
 8007fa0:	6054      	str	r4, [r2, #4]
 8007fa2:	e7ca      	b.n	8007f3a <_free_r+0x26>
 8007fa4:	b003      	add	sp, #12
 8007fa6:	bd30      	pop	{r4, r5, pc}
 8007fa8:	2000134c 	.word	0x2000134c

08007fac <__sfputc_r>:
 8007fac:	6893      	ldr	r3, [r2, #8]
 8007fae:	3b01      	subs	r3, #1
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	b410      	push	{r4}
 8007fb4:	6093      	str	r3, [r2, #8]
 8007fb6:	da08      	bge.n	8007fca <__sfputc_r+0x1e>
 8007fb8:	6994      	ldr	r4, [r2, #24]
 8007fba:	42a3      	cmp	r3, r4
 8007fbc:	db01      	blt.n	8007fc2 <__sfputc_r+0x16>
 8007fbe:	290a      	cmp	r1, #10
 8007fc0:	d103      	bne.n	8007fca <__sfputc_r+0x1e>
 8007fc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007fc6:	f7ff be76 	b.w	8007cb6 <__swbuf_r>
 8007fca:	6813      	ldr	r3, [r2, #0]
 8007fcc:	1c58      	adds	r0, r3, #1
 8007fce:	6010      	str	r0, [r2, #0]
 8007fd0:	7019      	strb	r1, [r3, #0]
 8007fd2:	4608      	mov	r0, r1
 8007fd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007fd8:	4770      	bx	lr

08007fda <__sfputs_r>:
 8007fda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fdc:	4606      	mov	r6, r0
 8007fde:	460f      	mov	r7, r1
 8007fe0:	4614      	mov	r4, r2
 8007fe2:	18d5      	adds	r5, r2, r3
 8007fe4:	42ac      	cmp	r4, r5
 8007fe6:	d101      	bne.n	8007fec <__sfputs_r+0x12>
 8007fe8:	2000      	movs	r0, #0
 8007fea:	e007      	b.n	8007ffc <__sfputs_r+0x22>
 8007fec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ff0:	463a      	mov	r2, r7
 8007ff2:	4630      	mov	r0, r6
 8007ff4:	f7ff ffda 	bl	8007fac <__sfputc_r>
 8007ff8:	1c43      	adds	r3, r0, #1
 8007ffa:	d1f3      	bne.n	8007fe4 <__sfputs_r+0xa>
 8007ffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008000 <_vfiprintf_r>:
 8008000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008004:	460d      	mov	r5, r1
 8008006:	b09d      	sub	sp, #116	; 0x74
 8008008:	4614      	mov	r4, r2
 800800a:	4698      	mov	r8, r3
 800800c:	4606      	mov	r6, r0
 800800e:	b118      	cbz	r0, 8008018 <_vfiprintf_r+0x18>
 8008010:	6a03      	ldr	r3, [r0, #32]
 8008012:	b90b      	cbnz	r3, 8008018 <_vfiprintf_r+0x18>
 8008014:	f7ff fd68 	bl	8007ae8 <__sinit>
 8008018:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800801a:	07d9      	lsls	r1, r3, #31
 800801c:	d405      	bmi.n	800802a <_vfiprintf_r+0x2a>
 800801e:	89ab      	ldrh	r3, [r5, #12]
 8008020:	059a      	lsls	r2, r3, #22
 8008022:	d402      	bmi.n	800802a <_vfiprintf_r+0x2a>
 8008024:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008026:	f7ff ff64 	bl	8007ef2 <__retarget_lock_acquire_recursive>
 800802a:	89ab      	ldrh	r3, [r5, #12]
 800802c:	071b      	lsls	r3, r3, #28
 800802e:	d501      	bpl.n	8008034 <_vfiprintf_r+0x34>
 8008030:	692b      	ldr	r3, [r5, #16]
 8008032:	b99b      	cbnz	r3, 800805c <_vfiprintf_r+0x5c>
 8008034:	4629      	mov	r1, r5
 8008036:	4630      	mov	r0, r6
 8008038:	f7ff fe7a 	bl	8007d30 <__swsetup_r>
 800803c:	b170      	cbz	r0, 800805c <_vfiprintf_r+0x5c>
 800803e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008040:	07dc      	lsls	r4, r3, #31
 8008042:	d504      	bpl.n	800804e <_vfiprintf_r+0x4e>
 8008044:	f04f 30ff 	mov.w	r0, #4294967295
 8008048:	b01d      	add	sp, #116	; 0x74
 800804a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800804e:	89ab      	ldrh	r3, [r5, #12]
 8008050:	0598      	lsls	r0, r3, #22
 8008052:	d4f7      	bmi.n	8008044 <_vfiprintf_r+0x44>
 8008054:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008056:	f7ff ff4d 	bl	8007ef4 <__retarget_lock_release_recursive>
 800805a:	e7f3      	b.n	8008044 <_vfiprintf_r+0x44>
 800805c:	2300      	movs	r3, #0
 800805e:	9309      	str	r3, [sp, #36]	; 0x24
 8008060:	2320      	movs	r3, #32
 8008062:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008066:	f8cd 800c 	str.w	r8, [sp, #12]
 800806a:	2330      	movs	r3, #48	; 0x30
 800806c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008220 <_vfiprintf_r+0x220>
 8008070:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008074:	f04f 0901 	mov.w	r9, #1
 8008078:	4623      	mov	r3, r4
 800807a:	469a      	mov	sl, r3
 800807c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008080:	b10a      	cbz	r2, 8008086 <_vfiprintf_r+0x86>
 8008082:	2a25      	cmp	r2, #37	; 0x25
 8008084:	d1f9      	bne.n	800807a <_vfiprintf_r+0x7a>
 8008086:	ebba 0b04 	subs.w	fp, sl, r4
 800808a:	d00b      	beq.n	80080a4 <_vfiprintf_r+0xa4>
 800808c:	465b      	mov	r3, fp
 800808e:	4622      	mov	r2, r4
 8008090:	4629      	mov	r1, r5
 8008092:	4630      	mov	r0, r6
 8008094:	f7ff ffa1 	bl	8007fda <__sfputs_r>
 8008098:	3001      	adds	r0, #1
 800809a:	f000 80a9 	beq.w	80081f0 <_vfiprintf_r+0x1f0>
 800809e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080a0:	445a      	add	r2, fp
 80080a2:	9209      	str	r2, [sp, #36]	; 0x24
 80080a4:	f89a 3000 	ldrb.w	r3, [sl]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	f000 80a1 	beq.w	80081f0 <_vfiprintf_r+0x1f0>
 80080ae:	2300      	movs	r3, #0
 80080b0:	f04f 32ff 	mov.w	r2, #4294967295
 80080b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80080b8:	f10a 0a01 	add.w	sl, sl, #1
 80080bc:	9304      	str	r3, [sp, #16]
 80080be:	9307      	str	r3, [sp, #28]
 80080c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80080c4:	931a      	str	r3, [sp, #104]	; 0x68
 80080c6:	4654      	mov	r4, sl
 80080c8:	2205      	movs	r2, #5
 80080ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080ce:	4854      	ldr	r0, [pc, #336]	; (8008220 <_vfiprintf_r+0x220>)
 80080d0:	f7f8 f8a6 	bl	8000220 <memchr>
 80080d4:	9a04      	ldr	r2, [sp, #16]
 80080d6:	b9d8      	cbnz	r0, 8008110 <_vfiprintf_r+0x110>
 80080d8:	06d1      	lsls	r1, r2, #27
 80080da:	bf44      	itt	mi
 80080dc:	2320      	movmi	r3, #32
 80080de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80080e2:	0713      	lsls	r3, r2, #28
 80080e4:	bf44      	itt	mi
 80080e6:	232b      	movmi	r3, #43	; 0x2b
 80080e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80080ec:	f89a 3000 	ldrb.w	r3, [sl]
 80080f0:	2b2a      	cmp	r3, #42	; 0x2a
 80080f2:	d015      	beq.n	8008120 <_vfiprintf_r+0x120>
 80080f4:	9a07      	ldr	r2, [sp, #28]
 80080f6:	4654      	mov	r4, sl
 80080f8:	2000      	movs	r0, #0
 80080fa:	f04f 0c0a 	mov.w	ip, #10
 80080fe:	4621      	mov	r1, r4
 8008100:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008104:	3b30      	subs	r3, #48	; 0x30
 8008106:	2b09      	cmp	r3, #9
 8008108:	d94d      	bls.n	80081a6 <_vfiprintf_r+0x1a6>
 800810a:	b1b0      	cbz	r0, 800813a <_vfiprintf_r+0x13a>
 800810c:	9207      	str	r2, [sp, #28]
 800810e:	e014      	b.n	800813a <_vfiprintf_r+0x13a>
 8008110:	eba0 0308 	sub.w	r3, r0, r8
 8008114:	fa09 f303 	lsl.w	r3, r9, r3
 8008118:	4313      	orrs	r3, r2
 800811a:	9304      	str	r3, [sp, #16]
 800811c:	46a2      	mov	sl, r4
 800811e:	e7d2      	b.n	80080c6 <_vfiprintf_r+0xc6>
 8008120:	9b03      	ldr	r3, [sp, #12]
 8008122:	1d19      	adds	r1, r3, #4
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	9103      	str	r1, [sp, #12]
 8008128:	2b00      	cmp	r3, #0
 800812a:	bfbb      	ittet	lt
 800812c:	425b      	neglt	r3, r3
 800812e:	f042 0202 	orrlt.w	r2, r2, #2
 8008132:	9307      	strge	r3, [sp, #28]
 8008134:	9307      	strlt	r3, [sp, #28]
 8008136:	bfb8      	it	lt
 8008138:	9204      	strlt	r2, [sp, #16]
 800813a:	7823      	ldrb	r3, [r4, #0]
 800813c:	2b2e      	cmp	r3, #46	; 0x2e
 800813e:	d10c      	bne.n	800815a <_vfiprintf_r+0x15a>
 8008140:	7863      	ldrb	r3, [r4, #1]
 8008142:	2b2a      	cmp	r3, #42	; 0x2a
 8008144:	d134      	bne.n	80081b0 <_vfiprintf_r+0x1b0>
 8008146:	9b03      	ldr	r3, [sp, #12]
 8008148:	1d1a      	adds	r2, r3, #4
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	9203      	str	r2, [sp, #12]
 800814e:	2b00      	cmp	r3, #0
 8008150:	bfb8      	it	lt
 8008152:	f04f 33ff 	movlt.w	r3, #4294967295
 8008156:	3402      	adds	r4, #2
 8008158:	9305      	str	r3, [sp, #20]
 800815a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008230 <_vfiprintf_r+0x230>
 800815e:	7821      	ldrb	r1, [r4, #0]
 8008160:	2203      	movs	r2, #3
 8008162:	4650      	mov	r0, sl
 8008164:	f7f8 f85c 	bl	8000220 <memchr>
 8008168:	b138      	cbz	r0, 800817a <_vfiprintf_r+0x17a>
 800816a:	9b04      	ldr	r3, [sp, #16]
 800816c:	eba0 000a 	sub.w	r0, r0, sl
 8008170:	2240      	movs	r2, #64	; 0x40
 8008172:	4082      	lsls	r2, r0
 8008174:	4313      	orrs	r3, r2
 8008176:	3401      	adds	r4, #1
 8008178:	9304      	str	r3, [sp, #16]
 800817a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800817e:	4829      	ldr	r0, [pc, #164]	; (8008224 <_vfiprintf_r+0x224>)
 8008180:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008184:	2206      	movs	r2, #6
 8008186:	f7f8 f84b 	bl	8000220 <memchr>
 800818a:	2800      	cmp	r0, #0
 800818c:	d03f      	beq.n	800820e <_vfiprintf_r+0x20e>
 800818e:	4b26      	ldr	r3, [pc, #152]	; (8008228 <_vfiprintf_r+0x228>)
 8008190:	bb1b      	cbnz	r3, 80081da <_vfiprintf_r+0x1da>
 8008192:	9b03      	ldr	r3, [sp, #12]
 8008194:	3307      	adds	r3, #7
 8008196:	f023 0307 	bic.w	r3, r3, #7
 800819a:	3308      	adds	r3, #8
 800819c:	9303      	str	r3, [sp, #12]
 800819e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081a0:	443b      	add	r3, r7
 80081a2:	9309      	str	r3, [sp, #36]	; 0x24
 80081a4:	e768      	b.n	8008078 <_vfiprintf_r+0x78>
 80081a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80081aa:	460c      	mov	r4, r1
 80081ac:	2001      	movs	r0, #1
 80081ae:	e7a6      	b.n	80080fe <_vfiprintf_r+0xfe>
 80081b0:	2300      	movs	r3, #0
 80081b2:	3401      	adds	r4, #1
 80081b4:	9305      	str	r3, [sp, #20]
 80081b6:	4619      	mov	r1, r3
 80081b8:	f04f 0c0a 	mov.w	ip, #10
 80081bc:	4620      	mov	r0, r4
 80081be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081c2:	3a30      	subs	r2, #48	; 0x30
 80081c4:	2a09      	cmp	r2, #9
 80081c6:	d903      	bls.n	80081d0 <_vfiprintf_r+0x1d0>
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d0c6      	beq.n	800815a <_vfiprintf_r+0x15a>
 80081cc:	9105      	str	r1, [sp, #20]
 80081ce:	e7c4      	b.n	800815a <_vfiprintf_r+0x15a>
 80081d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80081d4:	4604      	mov	r4, r0
 80081d6:	2301      	movs	r3, #1
 80081d8:	e7f0      	b.n	80081bc <_vfiprintf_r+0x1bc>
 80081da:	ab03      	add	r3, sp, #12
 80081dc:	9300      	str	r3, [sp, #0]
 80081de:	462a      	mov	r2, r5
 80081e0:	4b12      	ldr	r3, [pc, #72]	; (800822c <_vfiprintf_r+0x22c>)
 80081e2:	a904      	add	r1, sp, #16
 80081e4:	4630      	mov	r0, r6
 80081e6:	f3af 8000 	nop.w
 80081ea:	4607      	mov	r7, r0
 80081ec:	1c78      	adds	r0, r7, #1
 80081ee:	d1d6      	bne.n	800819e <_vfiprintf_r+0x19e>
 80081f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80081f2:	07d9      	lsls	r1, r3, #31
 80081f4:	d405      	bmi.n	8008202 <_vfiprintf_r+0x202>
 80081f6:	89ab      	ldrh	r3, [r5, #12]
 80081f8:	059a      	lsls	r2, r3, #22
 80081fa:	d402      	bmi.n	8008202 <_vfiprintf_r+0x202>
 80081fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80081fe:	f7ff fe79 	bl	8007ef4 <__retarget_lock_release_recursive>
 8008202:	89ab      	ldrh	r3, [r5, #12]
 8008204:	065b      	lsls	r3, r3, #25
 8008206:	f53f af1d 	bmi.w	8008044 <_vfiprintf_r+0x44>
 800820a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800820c:	e71c      	b.n	8008048 <_vfiprintf_r+0x48>
 800820e:	ab03      	add	r3, sp, #12
 8008210:	9300      	str	r3, [sp, #0]
 8008212:	462a      	mov	r2, r5
 8008214:	4b05      	ldr	r3, [pc, #20]	; (800822c <_vfiprintf_r+0x22c>)
 8008216:	a904      	add	r1, sp, #16
 8008218:	4630      	mov	r0, r6
 800821a:	f000 f879 	bl	8008310 <_printf_i>
 800821e:	e7e4      	b.n	80081ea <_vfiprintf_r+0x1ea>
 8008220:	0800dcc0 	.word	0x0800dcc0
 8008224:	0800dcca 	.word	0x0800dcca
 8008228:	00000000 	.word	0x00000000
 800822c:	08007fdb 	.word	0x08007fdb
 8008230:	0800dcc6 	.word	0x0800dcc6

08008234 <_printf_common>:
 8008234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008238:	4616      	mov	r6, r2
 800823a:	4699      	mov	r9, r3
 800823c:	688a      	ldr	r2, [r1, #8]
 800823e:	690b      	ldr	r3, [r1, #16]
 8008240:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008244:	4293      	cmp	r3, r2
 8008246:	bfb8      	it	lt
 8008248:	4613      	movlt	r3, r2
 800824a:	6033      	str	r3, [r6, #0]
 800824c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008250:	4607      	mov	r7, r0
 8008252:	460c      	mov	r4, r1
 8008254:	b10a      	cbz	r2, 800825a <_printf_common+0x26>
 8008256:	3301      	adds	r3, #1
 8008258:	6033      	str	r3, [r6, #0]
 800825a:	6823      	ldr	r3, [r4, #0]
 800825c:	0699      	lsls	r1, r3, #26
 800825e:	bf42      	ittt	mi
 8008260:	6833      	ldrmi	r3, [r6, #0]
 8008262:	3302      	addmi	r3, #2
 8008264:	6033      	strmi	r3, [r6, #0]
 8008266:	6825      	ldr	r5, [r4, #0]
 8008268:	f015 0506 	ands.w	r5, r5, #6
 800826c:	d106      	bne.n	800827c <_printf_common+0x48>
 800826e:	f104 0a19 	add.w	sl, r4, #25
 8008272:	68e3      	ldr	r3, [r4, #12]
 8008274:	6832      	ldr	r2, [r6, #0]
 8008276:	1a9b      	subs	r3, r3, r2
 8008278:	42ab      	cmp	r3, r5
 800827a:	dc26      	bgt.n	80082ca <_printf_common+0x96>
 800827c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008280:	1e13      	subs	r3, r2, #0
 8008282:	6822      	ldr	r2, [r4, #0]
 8008284:	bf18      	it	ne
 8008286:	2301      	movne	r3, #1
 8008288:	0692      	lsls	r2, r2, #26
 800828a:	d42b      	bmi.n	80082e4 <_printf_common+0xb0>
 800828c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008290:	4649      	mov	r1, r9
 8008292:	4638      	mov	r0, r7
 8008294:	47c0      	blx	r8
 8008296:	3001      	adds	r0, #1
 8008298:	d01e      	beq.n	80082d8 <_printf_common+0xa4>
 800829a:	6823      	ldr	r3, [r4, #0]
 800829c:	6922      	ldr	r2, [r4, #16]
 800829e:	f003 0306 	and.w	r3, r3, #6
 80082a2:	2b04      	cmp	r3, #4
 80082a4:	bf02      	ittt	eq
 80082a6:	68e5      	ldreq	r5, [r4, #12]
 80082a8:	6833      	ldreq	r3, [r6, #0]
 80082aa:	1aed      	subeq	r5, r5, r3
 80082ac:	68a3      	ldr	r3, [r4, #8]
 80082ae:	bf0c      	ite	eq
 80082b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80082b4:	2500      	movne	r5, #0
 80082b6:	4293      	cmp	r3, r2
 80082b8:	bfc4      	itt	gt
 80082ba:	1a9b      	subgt	r3, r3, r2
 80082bc:	18ed      	addgt	r5, r5, r3
 80082be:	2600      	movs	r6, #0
 80082c0:	341a      	adds	r4, #26
 80082c2:	42b5      	cmp	r5, r6
 80082c4:	d11a      	bne.n	80082fc <_printf_common+0xc8>
 80082c6:	2000      	movs	r0, #0
 80082c8:	e008      	b.n	80082dc <_printf_common+0xa8>
 80082ca:	2301      	movs	r3, #1
 80082cc:	4652      	mov	r2, sl
 80082ce:	4649      	mov	r1, r9
 80082d0:	4638      	mov	r0, r7
 80082d2:	47c0      	blx	r8
 80082d4:	3001      	adds	r0, #1
 80082d6:	d103      	bne.n	80082e0 <_printf_common+0xac>
 80082d8:	f04f 30ff 	mov.w	r0, #4294967295
 80082dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082e0:	3501      	adds	r5, #1
 80082e2:	e7c6      	b.n	8008272 <_printf_common+0x3e>
 80082e4:	18e1      	adds	r1, r4, r3
 80082e6:	1c5a      	adds	r2, r3, #1
 80082e8:	2030      	movs	r0, #48	; 0x30
 80082ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80082ee:	4422      	add	r2, r4
 80082f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80082f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80082f8:	3302      	adds	r3, #2
 80082fa:	e7c7      	b.n	800828c <_printf_common+0x58>
 80082fc:	2301      	movs	r3, #1
 80082fe:	4622      	mov	r2, r4
 8008300:	4649      	mov	r1, r9
 8008302:	4638      	mov	r0, r7
 8008304:	47c0      	blx	r8
 8008306:	3001      	adds	r0, #1
 8008308:	d0e6      	beq.n	80082d8 <_printf_common+0xa4>
 800830a:	3601      	adds	r6, #1
 800830c:	e7d9      	b.n	80082c2 <_printf_common+0x8e>
	...

08008310 <_printf_i>:
 8008310:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008314:	7e0f      	ldrb	r7, [r1, #24]
 8008316:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008318:	2f78      	cmp	r7, #120	; 0x78
 800831a:	4691      	mov	r9, r2
 800831c:	4680      	mov	r8, r0
 800831e:	460c      	mov	r4, r1
 8008320:	469a      	mov	sl, r3
 8008322:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008326:	d807      	bhi.n	8008338 <_printf_i+0x28>
 8008328:	2f62      	cmp	r7, #98	; 0x62
 800832a:	d80a      	bhi.n	8008342 <_printf_i+0x32>
 800832c:	2f00      	cmp	r7, #0
 800832e:	f000 80d4 	beq.w	80084da <_printf_i+0x1ca>
 8008332:	2f58      	cmp	r7, #88	; 0x58
 8008334:	f000 80c0 	beq.w	80084b8 <_printf_i+0x1a8>
 8008338:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800833c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008340:	e03a      	b.n	80083b8 <_printf_i+0xa8>
 8008342:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008346:	2b15      	cmp	r3, #21
 8008348:	d8f6      	bhi.n	8008338 <_printf_i+0x28>
 800834a:	a101      	add	r1, pc, #4	; (adr r1, 8008350 <_printf_i+0x40>)
 800834c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008350:	080083a9 	.word	0x080083a9
 8008354:	080083bd 	.word	0x080083bd
 8008358:	08008339 	.word	0x08008339
 800835c:	08008339 	.word	0x08008339
 8008360:	08008339 	.word	0x08008339
 8008364:	08008339 	.word	0x08008339
 8008368:	080083bd 	.word	0x080083bd
 800836c:	08008339 	.word	0x08008339
 8008370:	08008339 	.word	0x08008339
 8008374:	08008339 	.word	0x08008339
 8008378:	08008339 	.word	0x08008339
 800837c:	080084c1 	.word	0x080084c1
 8008380:	080083e9 	.word	0x080083e9
 8008384:	0800847b 	.word	0x0800847b
 8008388:	08008339 	.word	0x08008339
 800838c:	08008339 	.word	0x08008339
 8008390:	080084e3 	.word	0x080084e3
 8008394:	08008339 	.word	0x08008339
 8008398:	080083e9 	.word	0x080083e9
 800839c:	08008339 	.word	0x08008339
 80083a0:	08008339 	.word	0x08008339
 80083a4:	08008483 	.word	0x08008483
 80083a8:	682b      	ldr	r3, [r5, #0]
 80083aa:	1d1a      	adds	r2, r3, #4
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	602a      	str	r2, [r5, #0]
 80083b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80083b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80083b8:	2301      	movs	r3, #1
 80083ba:	e09f      	b.n	80084fc <_printf_i+0x1ec>
 80083bc:	6820      	ldr	r0, [r4, #0]
 80083be:	682b      	ldr	r3, [r5, #0]
 80083c0:	0607      	lsls	r7, r0, #24
 80083c2:	f103 0104 	add.w	r1, r3, #4
 80083c6:	6029      	str	r1, [r5, #0]
 80083c8:	d501      	bpl.n	80083ce <_printf_i+0xbe>
 80083ca:	681e      	ldr	r6, [r3, #0]
 80083cc:	e003      	b.n	80083d6 <_printf_i+0xc6>
 80083ce:	0646      	lsls	r6, r0, #25
 80083d0:	d5fb      	bpl.n	80083ca <_printf_i+0xba>
 80083d2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80083d6:	2e00      	cmp	r6, #0
 80083d8:	da03      	bge.n	80083e2 <_printf_i+0xd2>
 80083da:	232d      	movs	r3, #45	; 0x2d
 80083dc:	4276      	negs	r6, r6
 80083de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083e2:	485a      	ldr	r0, [pc, #360]	; (800854c <_printf_i+0x23c>)
 80083e4:	230a      	movs	r3, #10
 80083e6:	e012      	b.n	800840e <_printf_i+0xfe>
 80083e8:	682b      	ldr	r3, [r5, #0]
 80083ea:	6820      	ldr	r0, [r4, #0]
 80083ec:	1d19      	adds	r1, r3, #4
 80083ee:	6029      	str	r1, [r5, #0]
 80083f0:	0605      	lsls	r5, r0, #24
 80083f2:	d501      	bpl.n	80083f8 <_printf_i+0xe8>
 80083f4:	681e      	ldr	r6, [r3, #0]
 80083f6:	e002      	b.n	80083fe <_printf_i+0xee>
 80083f8:	0641      	lsls	r1, r0, #25
 80083fa:	d5fb      	bpl.n	80083f4 <_printf_i+0xe4>
 80083fc:	881e      	ldrh	r6, [r3, #0]
 80083fe:	4853      	ldr	r0, [pc, #332]	; (800854c <_printf_i+0x23c>)
 8008400:	2f6f      	cmp	r7, #111	; 0x6f
 8008402:	bf0c      	ite	eq
 8008404:	2308      	moveq	r3, #8
 8008406:	230a      	movne	r3, #10
 8008408:	2100      	movs	r1, #0
 800840a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800840e:	6865      	ldr	r5, [r4, #4]
 8008410:	60a5      	str	r5, [r4, #8]
 8008412:	2d00      	cmp	r5, #0
 8008414:	bfa2      	ittt	ge
 8008416:	6821      	ldrge	r1, [r4, #0]
 8008418:	f021 0104 	bicge.w	r1, r1, #4
 800841c:	6021      	strge	r1, [r4, #0]
 800841e:	b90e      	cbnz	r6, 8008424 <_printf_i+0x114>
 8008420:	2d00      	cmp	r5, #0
 8008422:	d04b      	beq.n	80084bc <_printf_i+0x1ac>
 8008424:	4615      	mov	r5, r2
 8008426:	fbb6 f1f3 	udiv	r1, r6, r3
 800842a:	fb03 6711 	mls	r7, r3, r1, r6
 800842e:	5dc7      	ldrb	r7, [r0, r7]
 8008430:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008434:	4637      	mov	r7, r6
 8008436:	42bb      	cmp	r3, r7
 8008438:	460e      	mov	r6, r1
 800843a:	d9f4      	bls.n	8008426 <_printf_i+0x116>
 800843c:	2b08      	cmp	r3, #8
 800843e:	d10b      	bne.n	8008458 <_printf_i+0x148>
 8008440:	6823      	ldr	r3, [r4, #0]
 8008442:	07de      	lsls	r6, r3, #31
 8008444:	d508      	bpl.n	8008458 <_printf_i+0x148>
 8008446:	6923      	ldr	r3, [r4, #16]
 8008448:	6861      	ldr	r1, [r4, #4]
 800844a:	4299      	cmp	r1, r3
 800844c:	bfde      	ittt	le
 800844e:	2330      	movle	r3, #48	; 0x30
 8008450:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008454:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008458:	1b52      	subs	r2, r2, r5
 800845a:	6122      	str	r2, [r4, #16]
 800845c:	f8cd a000 	str.w	sl, [sp]
 8008460:	464b      	mov	r3, r9
 8008462:	aa03      	add	r2, sp, #12
 8008464:	4621      	mov	r1, r4
 8008466:	4640      	mov	r0, r8
 8008468:	f7ff fee4 	bl	8008234 <_printf_common>
 800846c:	3001      	adds	r0, #1
 800846e:	d14a      	bne.n	8008506 <_printf_i+0x1f6>
 8008470:	f04f 30ff 	mov.w	r0, #4294967295
 8008474:	b004      	add	sp, #16
 8008476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800847a:	6823      	ldr	r3, [r4, #0]
 800847c:	f043 0320 	orr.w	r3, r3, #32
 8008480:	6023      	str	r3, [r4, #0]
 8008482:	4833      	ldr	r0, [pc, #204]	; (8008550 <_printf_i+0x240>)
 8008484:	2778      	movs	r7, #120	; 0x78
 8008486:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800848a:	6823      	ldr	r3, [r4, #0]
 800848c:	6829      	ldr	r1, [r5, #0]
 800848e:	061f      	lsls	r7, r3, #24
 8008490:	f851 6b04 	ldr.w	r6, [r1], #4
 8008494:	d402      	bmi.n	800849c <_printf_i+0x18c>
 8008496:	065f      	lsls	r7, r3, #25
 8008498:	bf48      	it	mi
 800849a:	b2b6      	uxthmi	r6, r6
 800849c:	07df      	lsls	r7, r3, #31
 800849e:	bf48      	it	mi
 80084a0:	f043 0320 	orrmi.w	r3, r3, #32
 80084a4:	6029      	str	r1, [r5, #0]
 80084a6:	bf48      	it	mi
 80084a8:	6023      	strmi	r3, [r4, #0]
 80084aa:	b91e      	cbnz	r6, 80084b4 <_printf_i+0x1a4>
 80084ac:	6823      	ldr	r3, [r4, #0]
 80084ae:	f023 0320 	bic.w	r3, r3, #32
 80084b2:	6023      	str	r3, [r4, #0]
 80084b4:	2310      	movs	r3, #16
 80084b6:	e7a7      	b.n	8008408 <_printf_i+0xf8>
 80084b8:	4824      	ldr	r0, [pc, #144]	; (800854c <_printf_i+0x23c>)
 80084ba:	e7e4      	b.n	8008486 <_printf_i+0x176>
 80084bc:	4615      	mov	r5, r2
 80084be:	e7bd      	b.n	800843c <_printf_i+0x12c>
 80084c0:	682b      	ldr	r3, [r5, #0]
 80084c2:	6826      	ldr	r6, [r4, #0]
 80084c4:	6961      	ldr	r1, [r4, #20]
 80084c6:	1d18      	adds	r0, r3, #4
 80084c8:	6028      	str	r0, [r5, #0]
 80084ca:	0635      	lsls	r5, r6, #24
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	d501      	bpl.n	80084d4 <_printf_i+0x1c4>
 80084d0:	6019      	str	r1, [r3, #0]
 80084d2:	e002      	b.n	80084da <_printf_i+0x1ca>
 80084d4:	0670      	lsls	r0, r6, #25
 80084d6:	d5fb      	bpl.n	80084d0 <_printf_i+0x1c0>
 80084d8:	8019      	strh	r1, [r3, #0]
 80084da:	2300      	movs	r3, #0
 80084dc:	6123      	str	r3, [r4, #16]
 80084de:	4615      	mov	r5, r2
 80084e0:	e7bc      	b.n	800845c <_printf_i+0x14c>
 80084e2:	682b      	ldr	r3, [r5, #0]
 80084e4:	1d1a      	adds	r2, r3, #4
 80084e6:	602a      	str	r2, [r5, #0]
 80084e8:	681d      	ldr	r5, [r3, #0]
 80084ea:	6862      	ldr	r2, [r4, #4]
 80084ec:	2100      	movs	r1, #0
 80084ee:	4628      	mov	r0, r5
 80084f0:	f7f7 fe96 	bl	8000220 <memchr>
 80084f4:	b108      	cbz	r0, 80084fa <_printf_i+0x1ea>
 80084f6:	1b40      	subs	r0, r0, r5
 80084f8:	6060      	str	r0, [r4, #4]
 80084fa:	6863      	ldr	r3, [r4, #4]
 80084fc:	6123      	str	r3, [r4, #16]
 80084fe:	2300      	movs	r3, #0
 8008500:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008504:	e7aa      	b.n	800845c <_printf_i+0x14c>
 8008506:	6923      	ldr	r3, [r4, #16]
 8008508:	462a      	mov	r2, r5
 800850a:	4649      	mov	r1, r9
 800850c:	4640      	mov	r0, r8
 800850e:	47d0      	blx	sl
 8008510:	3001      	adds	r0, #1
 8008512:	d0ad      	beq.n	8008470 <_printf_i+0x160>
 8008514:	6823      	ldr	r3, [r4, #0]
 8008516:	079b      	lsls	r3, r3, #30
 8008518:	d413      	bmi.n	8008542 <_printf_i+0x232>
 800851a:	68e0      	ldr	r0, [r4, #12]
 800851c:	9b03      	ldr	r3, [sp, #12]
 800851e:	4298      	cmp	r0, r3
 8008520:	bfb8      	it	lt
 8008522:	4618      	movlt	r0, r3
 8008524:	e7a6      	b.n	8008474 <_printf_i+0x164>
 8008526:	2301      	movs	r3, #1
 8008528:	4632      	mov	r2, r6
 800852a:	4649      	mov	r1, r9
 800852c:	4640      	mov	r0, r8
 800852e:	47d0      	blx	sl
 8008530:	3001      	adds	r0, #1
 8008532:	d09d      	beq.n	8008470 <_printf_i+0x160>
 8008534:	3501      	adds	r5, #1
 8008536:	68e3      	ldr	r3, [r4, #12]
 8008538:	9903      	ldr	r1, [sp, #12]
 800853a:	1a5b      	subs	r3, r3, r1
 800853c:	42ab      	cmp	r3, r5
 800853e:	dcf2      	bgt.n	8008526 <_printf_i+0x216>
 8008540:	e7eb      	b.n	800851a <_printf_i+0x20a>
 8008542:	2500      	movs	r5, #0
 8008544:	f104 0619 	add.w	r6, r4, #25
 8008548:	e7f5      	b.n	8008536 <_printf_i+0x226>
 800854a:	bf00      	nop
 800854c:	0800dcd1 	.word	0x0800dcd1
 8008550:	0800dce2 	.word	0x0800dce2

08008554 <__sflush_r>:
 8008554:	898a      	ldrh	r2, [r1, #12]
 8008556:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800855a:	4605      	mov	r5, r0
 800855c:	0710      	lsls	r0, r2, #28
 800855e:	460c      	mov	r4, r1
 8008560:	d458      	bmi.n	8008614 <__sflush_r+0xc0>
 8008562:	684b      	ldr	r3, [r1, #4]
 8008564:	2b00      	cmp	r3, #0
 8008566:	dc05      	bgt.n	8008574 <__sflush_r+0x20>
 8008568:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800856a:	2b00      	cmp	r3, #0
 800856c:	dc02      	bgt.n	8008574 <__sflush_r+0x20>
 800856e:	2000      	movs	r0, #0
 8008570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008574:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008576:	2e00      	cmp	r6, #0
 8008578:	d0f9      	beq.n	800856e <__sflush_r+0x1a>
 800857a:	2300      	movs	r3, #0
 800857c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008580:	682f      	ldr	r7, [r5, #0]
 8008582:	6a21      	ldr	r1, [r4, #32]
 8008584:	602b      	str	r3, [r5, #0]
 8008586:	d032      	beq.n	80085ee <__sflush_r+0x9a>
 8008588:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800858a:	89a3      	ldrh	r3, [r4, #12]
 800858c:	075a      	lsls	r2, r3, #29
 800858e:	d505      	bpl.n	800859c <__sflush_r+0x48>
 8008590:	6863      	ldr	r3, [r4, #4]
 8008592:	1ac0      	subs	r0, r0, r3
 8008594:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008596:	b10b      	cbz	r3, 800859c <__sflush_r+0x48>
 8008598:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800859a:	1ac0      	subs	r0, r0, r3
 800859c:	2300      	movs	r3, #0
 800859e:	4602      	mov	r2, r0
 80085a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80085a2:	6a21      	ldr	r1, [r4, #32]
 80085a4:	4628      	mov	r0, r5
 80085a6:	47b0      	blx	r6
 80085a8:	1c43      	adds	r3, r0, #1
 80085aa:	89a3      	ldrh	r3, [r4, #12]
 80085ac:	d106      	bne.n	80085bc <__sflush_r+0x68>
 80085ae:	6829      	ldr	r1, [r5, #0]
 80085b0:	291d      	cmp	r1, #29
 80085b2:	d82b      	bhi.n	800860c <__sflush_r+0xb8>
 80085b4:	4a29      	ldr	r2, [pc, #164]	; (800865c <__sflush_r+0x108>)
 80085b6:	410a      	asrs	r2, r1
 80085b8:	07d6      	lsls	r6, r2, #31
 80085ba:	d427      	bmi.n	800860c <__sflush_r+0xb8>
 80085bc:	2200      	movs	r2, #0
 80085be:	6062      	str	r2, [r4, #4]
 80085c0:	04d9      	lsls	r1, r3, #19
 80085c2:	6922      	ldr	r2, [r4, #16]
 80085c4:	6022      	str	r2, [r4, #0]
 80085c6:	d504      	bpl.n	80085d2 <__sflush_r+0x7e>
 80085c8:	1c42      	adds	r2, r0, #1
 80085ca:	d101      	bne.n	80085d0 <__sflush_r+0x7c>
 80085cc:	682b      	ldr	r3, [r5, #0]
 80085ce:	b903      	cbnz	r3, 80085d2 <__sflush_r+0x7e>
 80085d0:	6560      	str	r0, [r4, #84]	; 0x54
 80085d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80085d4:	602f      	str	r7, [r5, #0]
 80085d6:	2900      	cmp	r1, #0
 80085d8:	d0c9      	beq.n	800856e <__sflush_r+0x1a>
 80085da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80085de:	4299      	cmp	r1, r3
 80085e0:	d002      	beq.n	80085e8 <__sflush_r+0x94>
 80085e2:	4628      	mov	r0, r5
 80085e4:	f7ff fc96 	bl	8007f14 <_free_r>
 80085e8:	2000      	movs	r0, #0
 80085ea:	6360      	str	r0, [r4, #52]	; 0x34
 80085ec:	e7c0      	b.n	8008570 <__sflush_r+0x1c>
 80085ee:	2301      	movs	r3, #1
 80085f0:	4628      	mov	r0, r5
 80085f2:	47b0      	blx	r6
 80085f4:	1c41      	adds	r1, r0, #1
 80085f6:	d1c8      	bne.n	800858a <__sflush_r+0x36>
 80085f8:	682b      	ldr	r3, [r5, #0]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d0c5      	beq.n	800858a <__sflush_r+0x36>
 80085fe:	2b1d      	cmp	r3, #29
 8008600:	d001      	beq.n	8008606 <__sflush_r+0xb2>
 8008602:	2b16      	cmp	r3, #22
 8008604:	d101      	bne.n	800860a <__sflush_r+0xb6>
 8008606:	602f      	str	r7, [r5, #0]
 8008608:	e7b1      	b.n	800856e <__sflush_r+0x1a>
 800860a:	89a3      	ldrh	r3, [r4, #12]
 800860c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008610:	81a3      	strh	r3, [r4, #12]
 8008612:	e7ad      	b.n	8008570 <__sflush_r+0x1c>
 8008614:	690f      	ldr	r7, [r1, #16]
 8008616:	2f00      	cmp	r7, #0
 8008618:	d0a9      	beq.n	800856e <__sflush_r+0x1a>
 800861a:	0793      	lsls	r3, r2, #30
 800861c:	680e      	ldr	r6, [r1, #0]
 800861e:	bf08      	it	eq
 8008620:	694b      	ldreq	r3, [r1, #20]
 8008622:	600f      	str	r7, [r1, #0]
 8008624:	bf18      	it	ne
 8008626:	2300      	movne	r3, #0
 8008628:	eba6 0807 	sub.w	r8, r6, r7
 800862c:	608b      	str	r3, [r1, #8]
 800862e:	f1b8 0f00 	cmp.w	r8, #0
 8008632:	dd9c      	ble.n	800856e <__sflush_r+0x1a>
 8008634:	6a21      	ldr	r1, [r4, #32]
 8008636:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008638:	4643      	mov	r3, r8
 800863a:	463a      	mov	r2, r7
 800863c:	4628      	mov	r0, r5
 800863e:	47b0      	blx	r6
 8008640:	2800      	cmp	r0, #0
 8008642:	dc06      	bgt.n	8008652 <__sflush_r+0xfe>
 8008644:	89a3      	ldrh	r3, [r4, #12]
 8008646:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800864a:	81a3      	strh	r3, [r4, #12]
 800864c:	f04f 30ff 	mov.w	r0, #4294967295
 8008650:	e78e      	b.n	8008570 <__sflush_r+0x1c>
 8008652:	4407      	add	r7, r0
 8008654:	eba8 0800 	sub.w	r8, r8, r0
 8008658:	e7e9      	b.n	800862e <__sflush_r+0xda>
 800865a:	bf00      	nop
 800865c:	dfbffffe 	.word	0xdfbffffe

08008660 <_fflush_r>:
 8008660:	b538      	push	{r3, r4, r5, lr}
 8008662:	690b      	ldr	r3, [r1, #16]
 8008664:	4605      	mov	r5, r0
 8008666:	460c      	mov	r4, r1
 8008668:	b913      	cbnz	r3, 8008670 <_fflush_r+0x10>
 800866a:	2500      	movs	r5, #0
 800866c:	4628      	mov	r0, r5
 800866e:	bd38      	pop	{r3, r4, r5, pc}
 8008670:	b118      	cbz	r0, 800867a <_fflush_r+0x1a>
 8008672:	6a03      	ldr	r3, [r0, #32]
 8008674:	b90b      	cbnz	r3, 800867a <_fflush_r+0x1a>
 8008676:	f7ff fa37 	bl	8007ae8 <__sinit>
 800867a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d0f3      	beq.n	800866a <_fflush_r+0xa>
 8008682:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008684:	07d0      	lsls	r0, r2, #31
 8008686:	d404      	bmi.n	8008692 <_fflush_r+0x32>
 8008688:	0599      	lsls	r1, r3, #22
 800868a:	d402      	bmi.n	8008692 <_fflush_r+0x32>
 800868c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800868e:	f7ff fc30 	bl	8007ef2 <__retarget_lock_acquire_recursive>
 8008692:	4628      	mov	r0, r5
 8008694:	4621      	mov	r1, r4
 8008696:	f7ff ff5d 	bl	8008554 <__sflush_r>
 800869a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800869c:	07da      	lsls	r2, r3, #31
 800869e:	4605      	mov	r5, r0
 80086a0:	d4e4      	bmi.n	800866c <_fflush_r+0xc>
 80086a2:	89a3      	ldrh	r3, [r4, #12]
 80086a4:	059b      	lsls	r3, r3, #22
 80086a6:	d4e1      	bmi.n	800866c <_fflush_r+0xc>
 80086a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80086aa:	f7ff fc23 	bl	8007ef4 <__retarget_lock_release_recursive>
 80086ae:	e7dd      	b.n	800866c <_fflush_r+0xc>

080086b0 <__swhatbuf_r>:
 80086b0:	b570      	push	{r4, r5, r6, lr}
 80086b2:	460c      	mov	r4, r1
 80086b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086b8:	2900      	cmp	r1, #0
 80086ba:	b096      	sub	sp, #88	; 0x58
 80086bc:	4615      	mov	r5, r2
 80086be:	461e      	mov	r6, r3
 80086c0:	da0d      	bge.n	80086de <__swhatbuf_r+0x2e>
 80086c2:	89a3      	ldrh	r3, [r4, #12]
 80086c4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80086c8:	f04f 0100 	mov.w	r1, #0
 80086cc:	bf0c      	ite	eq
 80086ce:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80086d2:	2340      	movne	r3, #64	; 0x40
 80086d4:	2000      	movs	r0, #0
 80086d6:	6031      	str	r1, [r6, #0]
 80086d8:	602b      	str	r3, [r5, #0]
 80086da:	b016      	add	sp, #88	; 0x58
 80086dc:	bd70      	pop	{r4, r5, r6, pc}
 80086de:	466a      	mov	r2, sp
 80086e0:	f000 f848 	bl	8008774 <_fstat_r>
 80086e4:	2800      	cmp	r0, #0
 80086e6:	dbec      	blt.n	80086c2 <__swhatbuf_r+0x12>
 80086e8:	9901      	ldr	r1, [sp, #4]
 80086ea:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80086ee:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80086f2:	4259      	negs	r1, r3
 80086f4:	4159      	adcs	r1, r3
 80086f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086fa:	e7eb      	b.n	80086d4 <__swhatbuf_r+0x24>

080086fc <__smakebuf_r>:
 80086fc:	898b      	ldrh	r3, [r1, #12]
 80086fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008700:	079d      	lsls	r5, r3, #30
 8008702:	4606      	mov	r6, r0
 8008704:	460c      	mov	r4, r1
 8008706:	d507      	bpl.n	8008718 <__smakebuf_r+0x1c>
 8008708:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800870c:	6023      	str	r3, [r4, #0]
 800870e:	6123      	str	r3, [r4, #16]
 8008710:	2301      	movs	r3, #1
 8008712:	6163      	str	r3, [r4, #20]
 8008714:	b002      	add	sp, #8
 8008716:	bd70      	pop	{r4, r5, r6, pc}
 8008718:	ab01      	add	r3, sp, #4
 800871a:	466a      	mov	r2, sp
 800871c:	f7ff ffc8 	bl	80086b0 <__swhatbuf_r>
 8008720:	9900      	ldr	r1, [sp, #0]
 8008722:	4605      	mov	r5, r0
 8008724:	4630      	mov	r0, r6
 8008726:	f7ff f8c7 	bl	80078b8 <_malloc_r>
 800872a:	b948      	cbnz	r0, 8008740 <__smakebuf_r+0x44>
 800872c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008730:	059a      	lsls	r2, r3, #22
 8008732:	d4ef      	bmi.n	8008714 <__smakebuf_r+0x18>
 8008734:	f023 0303 	bic.w	r3, r3, #3
 8008738:	f043 0302 	orr.w	r3, r3, #2
 800873c:	81a3      	strh	r3, [r4, #12]
 800873e:	e7e3      	b.n	8008708 <__smakebuf_r+0xc>
 8008740:	89a3      	ldrh	r3, [r4, #12]
 8008742:	6020      	str	r0, [r4, #0]
 8008744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008748:	81a3      	strh	r3, [r4, #12]
 800874a:	9b00      	ldr	r3, [sp, #0]
 800874c:	6163      	str	r3, [r4, #20]
 800874e:	9b01      	ldr	r3, [sp, #4]
 8008750:	6120      	str	r0, [r4, #16]
 8008752:	b15b      	cbz	r3, 800876c <__smakebuf_r+0x70>
 8008754:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008758:	4630      	mov	r0, r6
 800875a:	f000 f81d 	bl	8008798 <_isatty_r>
 800875e:	b128      	cbz	r0, 800876c <__smakebuf_r+0x70>
 8008760:	89a3      	ldrh	r3, [r4, #12]
 8008762:	f023 0303 	bic.w	r3, r3, #3
 8008766:	f043 0301 	orr.w	r3, r3, #1
 800876a:	81a3      	strh	r3, [r4, #12]
 800876c:	89a3      	ldrh	r3, [r4, #12]
 800876e:	431d      	orrs	r5, r3
 8008770:	81a5      	strh	r5, [r4, #12]
 8008772:	e7cf      	b.n	8008714 <__smakebuf_r+0x18>

08008774 <_fstat_r>:
 8008774:	b538      	push	{r3, r4, r5, lr}
 8008776:	4d07      	ldr	r5, [pc, #28]	; (8008794 <_fstat_r+0x20>)
 8008778:	2300      	movs	r3, #0
 800877a:	4604      	mov	r4, r0
 800877c:	4608      	mov	r0, r1
 800877e:	4611      	mov	r1, r2
 8008780:	602b      	str	r3, [r5, #0]
 8008782:	f000 f955 	bl	8008a30 <_fstat>
 8008786:	1c43      	adds	r3, r0, #1
 8008788:	d102      	bne.n	8008790 <_fstat_r+0x1c>
 800878a:	682b      	ldr	r3, [r5, #0]
 800878c:	b103      	cbz	r3, 8008790 <_fstat_r+0x1c>
 800878e:	6023      	str	r3, [r4, #0]
 8008790:	bd38      	pop	{r3, r4, r5, pc}
 8008792:	bf00      	nop
 8008794:	20001490 	.word	0x20001490

08008798 <_isatty_r>:
 8008798:	b538      	push	{r3, r4, r5, lr}
 800879a:	4d06      	ldr	r5, [pc, #24]	; (80087b4 <_isatty_r+0x1c>)
 800879c:	2300      	movs	r3, #0
 800879e:	4604      	mov	r4, r0
 80087a0:	4608      	mov	r0, r1
 80087a2:	602b      	str	r3, [r5, #0]
 80087a4:	f000 f94c 	bl	8008a40 <_isatty>
 80087a8:	1c43      	adds	r3, r0, #1
 80087aa:	d102      	bne.n	80087b2 <_isatty_r+0x1a>
 80087ac:	682b      	ldr	r3, [r5, #0]
 80087ae:	b103      	cbz	r3, 80087b2 <_isatty_r+0x1a>
 80087b0:	6023      	str	r3, [r4, #0]
 80087b2:	bd38      	pop	{r3, r4, r5, pc}
 80087b4:	20001490 	.word	0x20001490

080087b8 <expf>:
 80087b8:	b508      	push	{r3, lr}
 80087ba:	ed2d 8b02 	vpush	{d8}
 80087be:	eef0 8a40 	vmov.f32	s17, s0
 80087c2:	f000 f85f 	bl	8008884 <__ieee754_expf>
 80087c6:	eeb0 8a40 	vmov.f32	s16, s0
 80087ca:	eeb0 0a68 	vmov.f32	s0, s17
 80087ce:	f000 f829 	bl	8008824 <finitef>
 80087d2:	b160      	cbz	r0, 80087ee <expf+0x36>
 80087d4:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8008814 <expf+0x5c>
 80087d8:	eef4 8ae7 	vcmpe.f32	s17, s15
 80087dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087e0:	dd0a      	ble.n	80087f8 <expf+0x40>
 80087e2:	f7ff fb5b 	bl	8007e9c <__errno>
 80087e6:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8008818 <expf+0x60>
 80087ea:	2322      	movs	r3, #34	; 0x22
 80087ec:	6003      	str	r3, [r0, #0]
 80087ee:	eeb0 0a48 	vmov.f32	s0, s16
 80087f2:	ecbd 8b02 	vpop	{d8}
 80087f6:	bd08      	pop	{r3, pc}
 80087f8:	eddf 7a08 	vldr	s15, [pc, #32]	; 800881c <expf+0x64>
 80087fc:	eef4 8ae7 	vcmpe.f32	s17, s15
 8008800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008804:	d5f3      	bpl.n	80087ee <expf+0x36>
 8008806:	f7ff fb49 	bl	8007e9c <__errno>
 800880a:	2322      	movs	r3, #34	; 0x22
 800880c:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8008820 <expf+0x68>
 8008810:	6003      	str	r3, [r0, #0]
 8008812:	e7ec      	b.n	80087ee <expf+0x36>
 8008814:	42b17217 	.word	0x42b17217
 8008818:	7f800000 	.word	0x7f800000
 800881c:	c2cff1b5 	.word	0xc2cff1b5
 8008820:	00000000 	.word	0x00000000

08008824 <finitef>:
 8008824:	b082      	sub	sp, #8
 8008826:	ed8d 0a01 	vstr	s0, [sp, #4]
 800882a:	9801      	ldr	r0, [sp, #4]
 800882c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8008830:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8008834:	bfac      	ite	ge
 8008836:	2000      	movge	r0, #0
 8008838:	2001      	movlt	r0, #1
 800883a:	b002      	add	sp, #8
 800883c:	4770      	bx	lr

0800883e <with_errnof>:
 800883e:	b513      	push	{r0, r1, r4, lr}
 8008840:	4604      	mov	r4, r0
 8008842:	ed8d 0a01 	vstr	s0, [sp, #4]
 8008846:	f7ff fb29 	bl	8007e9c <__errno>
 800884a:	ed9d 0a01 	vldr	s0, [sp, #4]
 800884e:	6004      	str	r4, [r0, #0]
 8008850:	b002      	add	sp, #8
 8008852:	bd10      	pop	{r4, pc}

08008854 <xflowf>:
 8008854:	b130      	cbz	r0, 8008864 <xflowf+0x10>
 8008856:	eef1 7a40 	vneg.f32	s15, s0
 800885a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800885e:	2022      	movs	r0, #34	; 0x22
 8008860:	f7ff bfed 	b.w	800883e <with_errnof>
 8008864:	eef0 7a40 	vmov.f32	s15, s0
 8008868:	e7f7      	b.n	800885a <xflowf+0x6>
	...

0800886c <__math_uflowf>:
 800886c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008874 <__math_uflowf+0x8>
 8008870:	f7ff bff0 	b.w	8008854 <xflowf>
 8008874:	10000000 	.word	0x10000000

08008878 <__math_oflowf>:
 8008878:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008880 <__math_oflowf+0x8>
 800887c:	f7ff bfea 	b.w	8008854 <xflowf>
 8008880:	70000000 	.word	0x70000000

08008884 <__ieee754_expf>:
 8008884:	ee10 2a10 	vmov	r2, s0
 8008888:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800888c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008890:	d902      	bls.n	8008898 <__ieee754_expf+0x14>
 8008892:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008896:	4770      	bx	lr
 8008898:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 800889c:	d106      	bne.n	80088ac <__ieee754_expf+0x28>
 800889e:	eddf 7a4e 	vldr	s15, [pc, #312]	; 80089d8 <__ieee754_expf+0x154>
 80088a2:	2900      	cmp	r1, #0
 80088a4:	bf18      	it	ne
 80088a6:	eeb0 0a67 	vmovne.f32	s0, s15
 80088aa:	4770      	bx	lr
 80088ac:	484b      	ldr	r0, [pc, #300]	; (80089dc <__ieee754_expf+0x158>)
 80088ae:	4282      	cmp	r2, r0
 80088b0:	dd02      	ble.n	80088b8 <__ieee754_expf+0x34>
 80088b2:	2000      	movs	r0, #0
 80088b4:	f7ff bfe0 	b.w	8008878 <__math_oflowf>
 80088b8:	2a00      	cmp	r2, #0
 80088ba:	da05      	bge.n	80088c8 <__ieee754_expf+0x44>
 80088bc:	4a48      	ldr	r2, [pc, #288]	; (80089e0 <__ieee754_expf+0x15c>)
 80088be:	4293      	cmp	r3, r2
 80088c0:	d902      	bls.n	80088c8 <__ieee754_expf+0x44>
 80088c2:	2000      	movs	r0, #0
 80088c4:	f7ff bfd2 	b.w	800886c <__math_uflowf>
 80088c8:	4a46      	ldr	r2, [pc, #280]	; (80089e4 <__ieee754_expf+0x160>)
 80088ca:	4293      	cmp	r3, r2
 80088cc:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80088d0:	d952      	bls.n	8008978 <__ieee754_expf+0xf4>
 80088d2:	4a45      	ldr	r2, [pc, #276]	; (80089e8 <__ieee754_expf+0x164>)
 80088d4:	4293      	cmp	r3, r2
 80088d6:	ea4f 0281 	mov.w	r2, r1, lsl #2
 80088da:	d834      	bhi.n	8008946 <__ieee754_expf+0xc2>
 80088dc:	4b43      	ldr	r3, [pc, #268]	; (80089ec <__ieee754_expf+0x168>)
 80088de:	4413      	add	r3, r2
 80088e0:	ed93 7a00 	vldr	s14, [r3]
 80088e4:	4b42      	ldr	r3, [pc, #264]	; (80089f0 <__ieee754_expf+0x16c>)
 80088e6:	4413      	add	r3, r2
 80088e8:	ee30 7a47 	vsub.f32	s14, s0, s14
 80088ec:	f1c1 0201 	rsb	r2, r1, #1
 80088f0:	edd3 7a00 	vldr	s15, [r3]
 80088f4:	1a52      	subs	r2, r2, r1
 80088f6:	ee37 0a67 	vsub.f32	s0, s14, s15
 80088fa:	ee20 6a00 	vmul.f32	s12, s0, s0
 80088fe:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 80089f4 <__ieee754_expf+0x170>
 8008902:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80089f8 <__ieee754_expf+0x174>
 8008906:	eee6 6a05 	vfma.f32	s13, s12, s10
 800890a:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 80089fc <__ieee754_expf+0x178>
 800890e:	eea6 5a86 	vfma.f32	s10, s13, s12
 8008912:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8008a00 <__ieee754_expf+0x17c>
 8008916:	eee5 6a06 	vfma.f32	s13, s10, s12
 800891a:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8008a04 <__ieee754_expf+0x180>
 800891e:	eea6 5a86 	vfma.f32	s10, s13, s12
 8008922:	eef0 6a40 	vmov.f32	s13, s0
 8008926:	eee5 6a46 	vfms.f32	s13, s10, s12
 800892a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800892e:	ee20 5a26 	vmul.f32	s10, s0, s13
 8008932:	bb92      	cbnz	r2, 800899a <__ieee754_expf+0x116>
 8008934:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8008938:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800893c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8008940:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8008944:	4770      	bx	lr
 8008946:	4b30      	ldr	r3, [pc, #192]	; (8008a08 <__ieee754_expf+0x184>)
 8008948:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8008a0c <__ieee754_expf+0x188>
 800894c:	eddf 6a30 	vldr	s13, [pc, #192]	; 8008a10 <__ieee754_expf+0x18c>
 8008950:	4413      	add	r3, r2
 8008952:	edd3 7a00 	vldr	s15, [r3]
 8008956:	eee0 7a07 	vfma.f32	s15, s0, s14
 800895a:	eeb0 7a40 	vmov.f32	s14, s0
 800895e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008962:	ee17 2a90 	vmov	r2, s15
 8008966:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800896a:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800896e:	eddf 6a29 	vldr	s13, [pc, #164]	; 8008a14 <__ieee754_expf+0x190>
 8008972:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008976:	e7be      	b.n	80088f6 <__ieee754_expf+0x72>
 8008978:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
 800897c:	d20b      	bcs.n	8008996 <__ieee754_expf+0x112>
 800897e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008a18 <__ieee754_expf+0x194>
 8008982:	ee70 6a26 	vadd.f32	s13, s0, s13
 8008986:	eef4 6ae5 	vcmpe.f32	s13, s11
 800898a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800898e:	dd02      	ble.n	8008996 <__ieee754_expf+0x112>
 8008990:	ee30 0a25 	vadd.f32	s0, s0, s11
 8008994:	4770      	bx	lr
 8008996:	2200      	movs	r2, #0
 8008998:	e7af      	b.n	80088fa <__ieee754_expf+0x76>
 800899a:	ee36 6a66 	vsub.f32	s12, s12, s13
 800899e:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 80089a2:	eec5 6a06 	vdiv.f32	s13, s10, s12
 80089a6:	bfb8      	it	lt
 80089a8:	3264      	addlt	r2, #100	; 0x64
 80089aa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80089ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80089b2:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80089b6:	ee17 3a90 	vmov	r3, s15
 80089ba:	bfab      	itete	ge
 80089bc:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 80089c0:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 80089c4:	ee00 3a10 	vmovge	s0, r3
 80089c8:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 8008a1c <__ieee754_expf+0x198>
 80089cc:	bfbc      	itt	lt
 80089ce:	ee00 3a10 	vmovlt	s0, r3
 80089d2:	ee20 0a27 	vmullt.f32	s0, s0, s15
 80089d6:	4770      	bx	lr
 80089d8:	00000000 	.word	0x00000000
 80089dc:	42b17217 	.word	0x42b17217
 80089e0:	42cff1b5 	.word	0x42cff1b5
 80089e4:	3eb17218 	.word	0x3eb17218
 80089e8:	3f851591 	.word	0x3f851591
 80089ec:	0800dcfc 	.word	0x0800dcfc
 80089f0:	0800dd04 	.word	0x0800dd04
 80089f4:	3331bb4c 	.word	0x3331bb4c
 80089f8:	b5ddea0e 	.word	0xb5ddea0e
 80089fc:	388ab355 	.word	0x388ab355
 8008a00:	bb360b61 	.word	0xbb360b61
 8008a04:	3e2aaaab 	.word	0x3e2aaaab
 8008a08:	0800dcf4 	.word	0x0800dcf4
 8008a0c:	3fb8aa3b 	.word	0x3fb8aa3b
 8008a10:	3f317180 	.word	0x3f317180
 8008a14:	3717f7d1 	.word	0x3717f7d1
 8008a18:	7149f2ca 	.word	0x7149f2ca
 8008a1c:	0d800000 	.word	0x0d800000

08008a20 <_close>:
 8008a20:	4b02      	ldr	r3, [pc, #8]	; (8008a2c <_close+0xc>)
 8008a22:	2258      	movs	r2, #88	; 0x58
 8008a24:	601a      	str	r2, [r3, #0]
 8008a26:	f04f 30ff 	mov.w	r0, #4294967295
 8008a2a:	4770      	bx	lr
 8008a2c:	20001490 	.word	0x20001490

08008a30 <_fstat>:
 8008a30:	4b02      	ldr	r3, [pc, #8]	; (8008a3c <_fstat+0xc>)
 8008a32:	2258      	movs	r2, #88	; 0x58
 8008a34:	601a      	str	r2, [r3, #0]
 8008a36:	f04f 30ff 	mov.w	r0, #4294967295
 8008a3a:	4770      	bx	lr
 8008a3c:	20001490 	.word	0x20001490

08008a40 <_isatty>:
 8008a40:	4b02      	ldr	r3, [pc, #8]	; (8008a4c <_isatty+0xc>)
 8008a42:	2258      	movs	r2, #88	; 0x58
 8008a44:	601a      	str	r2, [r3, #0]
 8008a46:	2000      	movs	r0, #0
 8008a48:	4770      	bx	lr
 8008a4a:	bf00      	nop
 8008a4c:	20001490 	.word	0x20001490

08008a50 <_lseek>:
 8008a50:	4b02      	ldr	r3, [pc, #8]	; (8008a5c <_lseek+0xc>)
 8008a52:	2258      	movs	r2, #88	; 0x58
 8008a54:	601a      	str	r2, [r3, #0]
 8008a56:	f04f 30ff 	mov.w	r0, #4294967295
 8008a5a:	4770      	bx	lr
 8008a5c:	20001490 	.word	0x20001490

08008a60 <_read>:
 8008a60:	4b02      	ldr	r3, [pc, #8]	; (8008a6c <_read+0xc>)
 8008a62:	2258      	movs	r2, #88	; 0x58
 8008a64:	601a      	str	r2, [r3, #0]
 8008a66:	f04f 30ff 	mov.w	r0, #4294967295
 8008a6a:	4770      	bx	lr
 8008a6c:	20001490 	.word	0x20001490

08008a70 <_write>:
 8008a70:	4b02      	ldr	r3, [pc, #8]	; (8008a7c <_write+0xc>)
 8008a72:	2258      	movs	r2, #88	; 0x58
 8008a74:	601a      	str	r2, [r3, #0]
 8008a76:	f04f 30ff 	mov.w	r0, #4294967295
 8008a7a:	4770      	bx	lr
 8008a7c:	20001490 	.word	0x20001490

08008a80 <_init>:
 8008a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a82:	bf00      	nop
 8008a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a86:	bc08      	pop	{r3}
 8008a88:	469e      	mov	lr, r3
 8008a8a:	4770      	bx	lr

08008a8c <_fini>:
 8008a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a8e:	bf00      	nop
 8008a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a92:	bc08      	pop	{r3}
 8008a94:	469e      	mov	lr, r3
 8008a96:	4770      	bx	lr
