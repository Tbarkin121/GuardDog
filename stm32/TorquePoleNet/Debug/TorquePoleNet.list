
TorquePoleNet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e98  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003e34  08009080  08009080  00019080  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ceb4  0800ceb4  00020ff4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ceb4  0800ceb4  0001ceb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cebc  0800cebc  00020ff4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cebc  0800cebc  0001cebc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cec0  0800cec0  0001cec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000ff4  20000000  0800cec4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000082c  20001000  0800deb8  00021000  2**5
                  ALLOC
 10 ._user_heap_stack 00001004  2000182c  0800deb8  0002182c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020ff4  2**0
                  CONTENTS, READONLY
 12 .comment      00000093  00000000  00000000  00021024  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001689a  00000000  00000000  000210b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003504  00000000  00000000  00037951  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001278  00000000  00000000  0003ae58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e2f  00000000  00000000  0003c0d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000216c7  00000000  00000000  0003ceff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017c45  00000000  00000000  0005e5c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d41f6  00000000  00000000  0007620b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005514  00000000  00000000  0014a404  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0014f918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20001000 	.word	0x20001000
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009060 	.word	0x08009060

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20001004 	.word	0x20001004
 800021c:	08009060 	.word	0x08009060

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80005c0:	4b0d      	ldr	r3, [pc, #52]	; (80005f8 <MX_CRC_Init+0x3c>)
 80005c2:	4a0e      	ldr	r2, [pc, #56]	; (80005fc <MX_CRC_Init+0x40>)
 80005c4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80005c6:	4b0c      	ldr	r3, [pc, #48]	; (80005f8 <MX_CRC_Init+0x3c>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80005cc:	4b0a      	ldr	r3, [pc, #40]	; (80005f8 <MX_CRC_Init+0x3c>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80005d2:	4b09      	ldr	r3, [pc, #36]	; (80005f8 <MX_CRC_Init+0x3c>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80005d8:	4b07      	ldr	r3, [pc, #28]	; (80005f8 <MX_CRC_Init+0x3c>)
 80005da:	2200      	movs	r2, #0
 80005dc:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80005de:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <MX_CRC_Init+0x3c>)
 80005e0:	2201      	movs	r2, #1
 80005e2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80005e4:	4804      	ldr	r0, [pc, #16]	; (80005f8 <MX_CRC_Init+0x3c>)
 80005e6:	f000 fcab 	bl	8000f40 <HAL_CRC_Init>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80005f0:	f000 f93e 	bl	8000870 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80005f4:	bf00      	nop
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	2000101c 	.word	0x2000101c
 80005fc:	40023000 	.word	0x40023000

08000600 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000600:	b480      	push	{r7}
 8000602:	b085      	sub	sp, #20
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a0a      	ldr	r2, [pc, #40]	; (8000638 <HAL_CRC_MspInit+0x38>)
 800060e:	4293      	cmp	r3, r2
 8000610:	d10b      	bne.n	800062a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000612:	4b0a      	ldr	r3, [pc, #40]	; (800063c <HAL_CRC_MspInit+0x3c>)
 8000614:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000616:	4a09      	ldr	r2, [pc, #36]	; (800063c <HAL_CRC_MspInit+0x3c>)
 8000618:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800061c:	6493      	str	r3, [r2, #72]	; 0x48
 800061e:	4b07      	ldr	r3, [pc, #28]	; (800063c <HAL_CRC_MspInit+0x3c>)
 8000620:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000622:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800062a:	bf00      	nop
 800062c:	3714      	adds	r7, #20
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	40023000 	.word	0x40023000
 800063c:	40021000 	.word	0x40021000

08000640 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b088      	sub	sp, #32
 8000644:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000646:	f107 030c 	add.w	r3, r7, #12
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]
 800064e:	605a      	str	r2, [r3, #4]
 8000650:	609a      	str	r2, [r3, #8]
 8000652:	60da      	str	r2, [r3, #12]
 8000654:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000656:	4b18      	ldr	r3, [pc, #96]	; (80006b8 <MX_GPIO_Init+0x78>)
 8000658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800065a:	4a17      	ldr	r2, [pc, #92]	; (80006b8 <MX_GPIO_Init+0x78>)
 800065c:	f043 0301 	orr.w	r3, r3, #1
 8000660:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000662:	4b15      	ldr	r3, [pc, #84]	; (80006b8 <MX_GPIO_Init+0x78>)
 8000664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800066e:	4b12      	ldr	r3, [pc, #72]	; (80006b8 <MX_GPIO_Init+0x78>)
 8000670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000672:	4a11      	ldr	r2, [pc, #68]	; (80006b8 <MX_GPIO_Init+0x78>)
 8000674:	f043 0302 	orr.w	r3, r3, #2
 8000678:	64d3      	str	r3, [r2, #76]	; 0x4c
 800067a:	4b0f      	ldr	r3, [pc, #60]	; (80006b8 <MX_GPIO_Init+0x78>)
 800067c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800067e:	f003 0302 	and.w	r3, r3, #2
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000686:	2200      	movs	r2, #0
 8000688:	f44f 7180 	mov.w	r1, #256	; 0x100
 800068c:	480b      	ldr	r0, [pc, #44]	; (80006bc <MX_GPIO_Init+0x7c>)
 800068e:	f000 ff8b 	bl	80015a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000692:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000696:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000698:	2301      	movs	r3, #1
 800069a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069c:	2300      	movs	r3, #0
 800069e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a0:	2300      	movs	r3, #0
 80006a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006a4:	f107 030c 	add.w	r3, r7, #12
 80006a8:	4619      	mov	r1, r3
 80006aa:	4804      	ldr	r0, [pc, #16]	; (80006bc <MX_GPIO_Init+0x7c>)
 80006ac:	f000 fdfa 	bl	80012a4 <HAL_GPIO_Init>

}
 80006b0:	bf00      	nop
 80006b2:	3720      	adds	r7, #32
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40021000 	.word	0x40021000
 80006bc:	48000400 	.word	0x48000400

080006c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  data_flag=0;
 80006c4:	4b2e      	ldr	r3, [pc, #184]	; (8000780 <main+0xc0>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ca:	f000 fab8 	bl	8000c3e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ce:	f000 f869 	bl	80007a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d2:	f7ff ffb5 	bl	8000640 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006d6:	f000 f9dd 	bl	8000a94 <MX_USART2_UART_Init>
  MX_CRC_Init();
 80006da:	f7ff ff6f 	bl	80005bc <MX_CRC_Init>
  MX_TIM2_Init();
 80006de:	f000 f96d 	bl	80009bc <MX_TIM2_Init>
  MX_X_CUBE_AI_Init();
 80006e2:	f004 fcb9 	bl	8005058 <MX_X_CUBE_AI_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, data.bytes, sizeof(data.bytes)); //You need to toggle a breakpoint on this line!
 80006e6:	2210      	movs	r2, #16
 80006e8:	4926      	ldr	r1, [pc, #152]	; (8000784 <main+0xc4>)
 80006ea:	4827      	ldr	r0, [pc, #156]	; (8000788 <main+0xc8>)
 80006ec:	f002 fbba 	bl	8002e64 <HAL_UART_Receive_IT>
//    HAL_UART_Transmit(&huart2, data.bytes, sizeof(data.bytes), 100);

    // Read 16 bytes into data.bytes
//    HAL_UART_Receive(&huart2, data.bytes, sizeof(data.bytes), 1000);

    if(data_flag)
 80006f0:	4b23      	ldr	r3, [pc, #140]	; (8000780 <main+0xc0>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d03f      	beq.n	8000778 <main+0xb8>
    {

      TIM2->CNT = 0;
 80006f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006fc:	2200      	movs	r2, #0
 80006fe:	625a      	str	r2, [r3, #36]	; 0x24
      HAL_TIM_Base_Start(&htim2);
 8000700:	4822      	ldr	r0, [pc, #136]	; (800078c <main+0xcc>)
 8000702:	f001 ff93 	bl	800262c <HAL_TIM_Base_Start>
      in_data1[0] = data.floatValue[0]; // Sin Encoding
 8000706:	4b1f      	ldr	r3, [pc, #124]	; (8000784 <main+0xc4>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4a21      	ldr	r2, [pc, #132]	; (8000790 <main+0xd0>)
 800070c:	6013      	str	r3, [r2, #0]
      in_data1[1] = data.floatValue[1]; // Cosine Encoding
 800070e:	4b1d      	ldr	r3, [pc, #116]	; (8000784 <main+0xc4>)
 8000710:	685b      	ldr	r3, [r3, #4]
 8000712:	4a1f      	ldr	r2, [pc, #124]	; (8000790 <main+0xd0>)
 8000714:	6053      	str	r3, [r2, #4]
      in_data1[2] = data.floatValue[2]; // Velocity
 8000716:	4b1b      	ldr	r3, [pc, #108]	; (8000784 <main+0xc4>)
 8000718:	689b      	ldr	r3, [r3, #8]
 800071a:	4a1d      	ldr	r2, [pc, #116]	; (8000790 <main+0xd0>)
 800071c:	6093      	str	r3, [r2, #8]
      MX_X_CUBE_AI_Process();
 800071e:	f004 fca9 	bl	8005074 <MX_X_CUBE_AI_Process>
      HAL_TIM_Base_Stop(&htim2);
 8000722:	481a      	ldr	r0, [pc, #104]	; (800078c <main+0xcc>)
 8000724:	f001 ffe4 	bl	80026f0 <HAL_TIM_Base_Stop>
      data.floatValue[0] = out_data1[0]; // Value
 8000728:	4b1a      	ldr	r3, [pc, #104]	; (8000794 <main+0xd4>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a15      	ldr	r2, [pc, #84]	; (8000784 <main+0xc4>)
 800072e:	6013      	str	r3, [r2, #0]
      data.floatValue[1] = out_data2[0]; // Mu
 8000730:	4b19      	ldr	r3, [pc, #100]	; (8000798 <main+0xd8>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a13      	ldr	r2, [pc, #76]	; (8000784 <main+0xc4>)
 8000736:	6053      	str	r3, [r2, #4]
      data.floatValue[2] = out_data3[0]; // STD
 8000738:	4b18      	ldr	r3, [pc, #96]	; (800079c <main+0xdc>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a11      	ldr	r2, [pc, #68]	; (8000784 <main+0xc4>)
 800073e:	6093      	str	r3, [r2, #8]
      data.floatValue[3] = (float)TIM2->CNT/(1000000); // Execution Time
 8000740:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000746:	ee07 3a90 	vmov	s15, r3
 800074a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800074e:	eddf 6a14 	vldr	s13, [pc, #80]	; 80007a0 <main+0xe0>
 8000752:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000756:	4b0b      	ldr	r3, [pc, #44]	; (8000784 <main+0xc4>)
 8000758:	edc3 7a03 	vstr	s15, [r3, #12]
      data_flag = 0;
 800075c:	4b08      	ldr	r3, [pc, #32]	; (8000780 <main+0xc0>)
 800075e:	2200      	movs	r2, #0
 8000760:	701a      	strb	r2, [r3, #0]
      HAL_UART_Transmit(&huart2, data.bytes, sizeof(data.bytes), 100);
 8000762:	2364      	movs	r3, #100	; 0x64
 8000764:	2210      	movs	r2, #16
 8000766:	4907      	ldr	r1, [pc, #28]	; (8000784 <main+0xc4>)
 8000768:	4807      	ldr	r0, [pc, #28]	; (8000788 <main+0xc8>)
 800076a:	f002 faed 	bl	8002d48 <HAL_UART_Transmit>
      HAL_UART_Receive_IT(&huart2, data.bytes, sizeof(data.bytes));
 800076e:	2210      	movs	r2, #16
 8000770:	4904      	ldr	r1, [pc, #16]	; (8000784 <main+0xc4>)
 8000772:	4805      	ldr	r0, [pc, #20]	; (8000788 <main+0xc8>)
 8000774:	f002 fb76 	bl	8002e64 <HAL_UART_Receive_IT>
    }
    /* USER CODE END WHILE */

  MX_X_CUBE_AI_Process();
 8000778:	f004 fc7c 	bl	8005074 <MX_X_CUBE_AI_Process>
    if(data_flag)
 800077c:	e7b8      	b.n	80006f0 <main+0x30>
 800077e:	bf00      	nop
 8000780:	20001068 	.word	0x20001068
 8000784:	20001040 	.word	0x20001040
 8000788:	200010bc 	.word	0x200010bc
 800078c:	20001070 	.word	0x20001070
 8000790:	20001050 	.word	0x20001050
 8000794:	2000105c 	.word	0x2000105c
 8000798:	20001060 	.word	0x20001060
 800079c:	20001064 	.word	0x20001064
 80007a0:	49742400 	.word	0x49742400

080007a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b094      	sub	sp, #80	; 0x50
 80007a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007aa:	f107 0318 	add.w	r3, r7, #24
 80007ae:	2238      	movs	r2, #56	; 0x38
 80007b0:	2100      	movs	r1, #0
 80007b2:	4618      	mov	r0, r3
 80007b4:	f007 fe04 	bl	80083c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b8:	1d3b      	adds	r3, r7, #4
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	60da      	str	r2, [r3, #12]
 80007c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80007c6:	2000      	movs	r0, #0
 80007c8:	f000 ff06 	bl	80015d8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007cc:	2302      	movs	r3, #2
 80007ce:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007d6:	2340      	movs	r3, #64	; 0x40
 80007d8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007da:	2302      	movs	r3, #2
 80007dc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007de:	2302      	movs	r3, #2
 80007e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80007e2:	2304      	movs	r3, #4
 80007e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80007e6:	2355      	movs	r3, #85	; 0x55
 80007e8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007ea:	2302      	movs	r3, #2
 80007ec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007ee:	2302      	movs	r3, #2
 80007f0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007f2:	2302      	movs	r3, #2
 80007f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f6:	f107 0318 	add.w	r3, r7, #24
 80007fa:	4618      	mov	r0, r3
 80007fc:	f000 ffa0 	bl	8001740 <HAL_RCC_OscConfig>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000806:	f000 f833 	bl	8000870 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800080a:	230f      	movs	r3, #15
 800080c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800080e:	2303      	movs	r3, #3
 8000810:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000812:	2300      	movs	r3, #0
 8000814:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000816:	2300      	movs	r3, #0
 8000818:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800081a:	2300      	movs	r3, #0
 800081c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800081e:	1d3b      	adds	r3, r7, #4
 8000820:	2104      	movs	r1, #4
 8000822:	4618      	mov	r0, r3
 8000824:	f001 fa9e 	bl	8001d64 <HAL_RCC_ClockConfig>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800082e:	f000 f81f 	bl	8000870 <Error_Handler>
  }
}
 8000832:	bf00      	nop
 8000834:	3750      	adds	r7, #80	; 0x50
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
	...

0800083c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  // We will set a data flag here and execute in the main loop
  data_flag = 1;
 8000844:	4b04      	ldr	r3, [pc, #16]	; (8000858 <HAL_UART_RxCpltCallback+0x1c>)
 8000846:	2201      	movs	r2, #1
 8000848:	701a      	strb	r2, [r3, #0]
}
 800084a:	bf00      	nop
 800084c:	370c      	adds	r7, #12
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	20001068 	.word	0x20001068

0800085c <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]

}
 8000864:	bf00      	nop
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr

08000870 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000874:	b672      	cpsid	i
}
 8000876:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000878:	e7fe      	b.n	8000878 <Error_Handler+0x8>
	...

0800087c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000882:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <HAL_MspInit+0x44>)
 8000884:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000886:	4a0e      	ldr	r2, [pc, #56]	; (80008c0 <HAL_MspInit+0x44>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	6613      	str	r3, [r2, #96]	; 0x60
 800088e:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <HAL_MspInit+0x44>)
 8000890:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800089a:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <HAL_MspInit+0x44>)
 800089c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800089e:	4a08      	ldr	r2, [pc, #32]	; (80008c0 <HAL_MspInit+0x44>)
 80008a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a4:	6593      	str	r3, [r2, #88]	; 0x58
 80008a6:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <HAL_MspInit+0x44>)
 80008a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ae:	603b      	str	r3, [r7, #0]
 80008b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80008b2:	f000 ff35 	bl	8001720 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008b6:	bf00      	nop
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40021000 	.word	0x40021000

080008c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008c8:	e7fe      	b.n	80008c8 <NMI_Handler+0x4>

080008ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ca:	b480      	push	{r7}
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ce:	e7fe      	b.n	80008ce <HardFault_Handler+0x4>

080008d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008d4:	e7fe      	b.n	80008d4 <MemManage_Handler+0x4>

080008d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008d6:	b480      	push	{r7}
 80008d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008da:	e7fe      	b.n	80008da <BusFault_Handler+0x4>

080008dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e0:	e7fe      	b.n	80008e0 <UsageFault_Handler+0x4>

080008e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008e2:	b480      	push	{r7}
 80008e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008e6:	bf00      	nop
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr

080008f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008f4:	bf00      	nop
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr

080008fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008fe:	b480      	push	{r7}
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000902:	bf00      	nop
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr

0800090c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000910:	f000 f9e8 	bl	8000ce4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000914:	bf00      	nop
 8000916:	bd80      	pop	{r7, pc}

08000918 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800091c:	4802      	ldr	r0, [pc, #8]	; (8000928 <USART2_IRQHandler+0x10>)
 800091e:	f002 faed 	bl	8002efc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	200010bc 	.word	0x200010bc

0800092c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b086      	sub	sp, #24
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000934:	4a14      	ldr	r2, [pc, #80]	; (8000988 <_sbrk+0x5c>)
 8000936:	4b15      	ldr	r3, [pc, #84]	; (800098c <_sbrk+0x60>)
 8000938:	1ad3      	subs	r3, r2, r3
 800093a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000940:	4b13      	ldr	r3, [pc, #76]	; (8000990 <_sbrk+0x64>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d102      	bne.n	800094e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000948:	4b11      	ldr	r3, [pc, #68]	; (8000990 <_sbrk+0x64>)
 800094a:	4a12      	ldr	r2, [pc, #72]	; (8000994 <_sbrk+0x68>)
 800094c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800094e:	4b10      	ldr	r3, [pc, #64]	; (8000990 <_sbrk+0x64>)
 8000950:	681a      	ldr	r2, [r3, #0]
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	4413      	add	r3, r2
 8000956:	693a      	ldr	r2, [r7, #16]
 8000958:	429a      	cmp	r2, r3
 800095a:	d207      	bcs.n	800096c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800095c:	f007 fd8e 	bl	800847c <__errno>
 8000960:	4603      	mov	r3, r0
 8000962:	220c      	movs	r2, #12
 8000964:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000966:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800096a:	e009      	b.n	8000980 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800096c:	4b08      	ldr	r3, [pc, #32]	; (8000990 <_sbrk+0x64>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000972:	4b07      	ldr	r3, [pc, #28]	; (8000990 <_sbrk+0x64>)
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	4413      	add	r3, r2
 800097a:	4a05      	ldr	r2, [pc, #20]	; (8000990 <_sbrk+0x64>)
 800097c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800097e:	68fb      	ldr	r3, [r7, #12]
}
 8000980:	4618      	mov	r0, r3
 8000982:	3718      	adds	r7, #24
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	20008000 	.word	0x20008000
 800098c:	00000800 	.word	0x00000800
 8000990:	2000106c 	.word	0x2000106c
 8000994:	20001830 	.word	0x20001830

08000998 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800099c:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <SystemInit+0x20>)
 800099e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009a2:	4a05      	ldr	r2, [pc, #20]	; (80009b8 <SystemInit+0x20>)
 80009a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	e000ed00 	.word	0xe000ed00

080009bc <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b088      	sub	sp, #32
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009c2:	f107 0310 	add.w	r3, r7, #16
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	605a      	str	r2, [r3, #4]
 80009cc:	609a      	str	r2, [r3, #8]
 80009ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009d0:	1d3b      	adds	r3, r7, #4
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009da:	4b1e      	ldr	r3, [pc, #120]	; (8000a54 <MX_TIM2_Init+0x98>)
 80009dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009e0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 170;
 80009e2:	4b1c      	ldr	r3, [pc, #112]	; (8000a54 <MX_TIM2_Init+0x98>)
 80009e4:	22aa      	movs	r2, #170	; 0xaa
 80009e6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e8:	4b1a      	ldr	r3, [pc, #104]	; (8000a54 <MX_TIM2_Init+0x98>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 80009ee:	4b19      	ldr	r3, [pc, #100]	; (8000a54 <MX_TIM2_Init+0x98>)
 80009f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80009f4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009f6:	4b17      	ldr	r3, [pc, #92]	; (8000a54 <MX_TIM2_Init+0x98>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009fc:	4b15      	ldr	r3, [pc, #84]	; (8000a54 <MX_TIM2_Init+0x98>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a02:	4814      	ldr	r0, [pc, #80]	; (8000a54 <MX_TIM2_Init+0x98>)
 8000a04:	f001 fdba 	bl	800257c <HAL_TIM_Base_Init>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000a0e:	f7ff ff2f 	bl	8000870 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a16:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a18:	f107 0310 	add.w	r3, r7, #16
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	480d      	ldr	r0, [pc, #52]	; (8000a54 <MX_TIM2_Init+0x98>)
 8000a20:	f001 fe8e 	bl	8002740 <HAL_TIM_ConfigClockSource>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000a2a:	f7ff ff21 	bl	8000870 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a32:	2300      	movs	r3, #0
 8000a34:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a36:	1d3b      	adds	r3, r7, #4
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4806      	ldr	r0, [pc, #24]	; (8000a54 <MX_TIM2_Init+0x98>)
 8000a3c:	f002 f8b2 	bl	8002ba4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000a46:	f7ff ff13 	bl	8000870 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a4a:	bf00      	nop
 8000a4c:	3720      	adds	r7, #32
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	20001070 	.word	0x20001070

08000a58 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b085      	sub	sp, #20
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a68:	d10b      	bne.n	8000a82 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a6a:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <HAL_TIM_Base_MspInit+0x38>)
 8000a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a6e:	4a08      	ldr	r2, [pc, #32]	; (8000a90 <HAL_TIM_Base_MspInit+0x38>)
 8000a70:	f043 0301 	orr.w	r3, r3, #1
 8000a74:	6593      	str	r3, [r2, #88]	; 0x58
 8000a76:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <HAL_TIM_Base_MspInit+0x38>)
 8000a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000a82:	bf00      	nop
 8000a84:	3714      	adds	r7, #20
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	40021000 	.word	0x40021000

08000a94 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a98:	4b22      	ldr	r3, [pc, #136]	; (8000b24 <MX_USART2_UART_Init+0x90>)
 8000a9a:	4a23      	ldr	r2, [pc, #140]	; (8000b28 <MX_USART2_UART_Init+0x94>)
 8000a9c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a9e:	4b21      	ldr	r3, [pc, #132]	; (8000b24 <MX_USART2_UART_Init+0x90>)
 8000aa0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000aa4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aa6:	4b1f      	ldr	r3, [pc, #124]	; (8000b24 <MX_USART2_UART_Init+0x90>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000aac:	4b1d      	ldr	r3, [pc, #116]	; (8000b24 <MX_USART2_UART_Init+0x90>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ab2:	4b1c      	ldr	r3, [pc, #112]	; (8000b24 <MX_USART2_UART_Init+0x90>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ab8:	4b1a      	ldr	r3, [pc, #104]	; (8000b24 <MX_USART2_UART_Init+0x90>)
 8000aba:	220c      	movs	r2, #12
 8000abc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000abe:	4b19      	ldr	r3, [pc, #100]	; (8000b24 <MX_USART2_UART_Init+0x90>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac4:	4b17      	ldr	r3, [pc, #92]	; (8000b24 <MX_USART2_UART_Init+0x90>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aca:	4b16      	ldr	r3, [pc, #88]	; (8000b24 <MX_USART2_UART_Init+0x90>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ad0:	4b14      	ldr	r3, [pc, #80]	; (8000b24 <MX_USART2_UART_Init+0x90>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ad6:	4b13      	ldr	r3, [pc, #76]	; (8000b24 <MX_USART2_UART_Init+0x90>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000adc:	4811      	ldr	r0, [pc, #68]	; (8000b24 <MX_USART2_UART_Init+0x90>)
 8000ade:	f002 f8e3 	bl	8002ca8 <HAL_UART_Init>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000ae8:	f7ff fec2 	bl	8000870 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aec:	2100      	movs	r1, #0
 8000aee:	480d      	ldr	r0, [pc, #52]	; (8000b24 <MX_USART2_UART_Init+0x90>)
 8000af0:	f004 f901 	bl	8004cf6 <HAL_UARTEx_SetTxFifoThreshold>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000afa:	f7ff feb9 	bl	8000870 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000afe:	2100      	movs	r1, #0
 8000b00:	4808      	ldr	r0, [pc, #32]	; (8000b24 <MX_USART2_UART_Init+0x90>)
 8000b02:	f004 f936 	bl	8004d72 <HAL_UARTEx_SetRxFifoThreshold>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000b0c:	f7ff feb0 	bl	8000870 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000b10:	4804      	ldr	r0, [pc, #16]	; (8000b24 <MX_USART2_UART_Init+0x90>)
 8000b12:	f004 f8b7 	bl	8004c84 <HAL_UARTEx_DisableFifoMode>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000b1c:	f7ff fea8 	bl	8000870 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b20:	bf00      	nop
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	200010bc 	.word	0x200010bc
 8000b28:	40004400 	.word	0x40004400

08000b2c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b09a      	sub	sp, #104	; 0x68
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b34:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
 8000b40:	60da      	str	r2, [r3, #12]
 8000b42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b44:	f107 0310 	add.w	r3, r7, #16
 8000b48:	2244      	movs	r2, #68	; 0x44
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f007 fc37 	bl	80083c0 <memset>
  if(uartHandle->Instance==USART2)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4a23      	ldr	r2, [pc, #140]	; (8000be4 <HAL_UART_MspInit+0xb8>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d13e      	bne.n	8000bda <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b60:	2300      	movs	r3, #0
 8000b62:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b64:	f107 0310 	add.w	r3, r7, #16
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f001 fb17 	bl	800219c <HAL_RCCEx_PeriphCLKConfig>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b74:	f7ff fe7c 	bl	8000870 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b78:	4b1b      	ldr	r3, [pc, #108]	; (8000be8 <HAL_UART_MspInit+0xbc>)
 8000b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b7c:	4a1a      	ldr	r2, [pc, #104]	; (8000be8 <HAL_UART_MspInit+0xbc>)
 8000b7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b82:	6593      	str	r3, [r2, #88]	; 0x58
 8000b84:	4b18      	ldr	r3, [pc, #96]	; (8000be8 <HAL_UART_MspInit+0xbc>)
 8000b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b90:	4b15      	ldr	r3, [pc, #84]	; (8000be8 <HAL_UART_MspInit+0xbc>)
 8000b92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b94:	4a14      	ldr	r2, [pc, #80]	; (8000be8 <HAL_UART_MspInit+0xbc>)
 8000b96:	f043 0301 	orr.w	r3, r3, #1
 8000b9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b9c:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <HAL_UART_MspInit+0xbc>)
 8000b9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba0:	f003 0301 	and.w	r3, r3, #1
 8000ba4:	60bb      	str	r3, [r7, #8]
 8000ba6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000ba8:	230c      	movs	r3, #12
 8000baa:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bac:	2302      	movs	r3, #2
 8000bae:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bb8:	2307      	movs	r3, #7
 8000bba:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bbc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bc6:	f000 fb6d 	bl	80012a4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2100      	movs	r1, #0
 8000bce:	2026      	movs	r0, #38	; 0x26
 8000bd0:	f000 f981 	bl	8000ed6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000bd4:	2026      	movs	r0, #38	; 0x26
 8000bd6:	f000 f998 	bl	8000f0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000bda:	bf00      	nop
 8000bdc:	3768      	adds	r7, #104	; 0x68
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40004400 	.word	0x40004400
 8000be8:	40021000 	.word	0x40021000

08000bec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bec:	480d      	ldr	r0, [pc, #52]	; (8000c24 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bee:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bf0:	f7ff fed2 	bl	8000998 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bf4:	480c      	ldr	r0, [pc, #48]	; (8000c28 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bf6:	490d      	ldr	r1, [pc, #52]	; (8000c2c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bf8:	4a0d      	ldr	r2, [pc, #52]	; (8000c30 <LoopForever+0xe>)
  movs r3, #0
 8000bfa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000bfc:	e002      	b.n	8000c04 <LoopCopyDataInit>

08000bfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c02:	3304      	adds	r3, #4

08000c04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c08:	d3f9      	bcc.n	8000bfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c0a:	4a0a      	ldr	r2, [pc, #40]	; (8000c34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c0c:	4c0a      	ldr	r4, [pc, #40]	; (8000c38 <LoopForever+0x16>)
  movs r3, #0
 8000c0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c10:	e001      	b.n	8000c16 <LoopFillZerobss>

08000c12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c14:	3204      	adds	r2, #4

08000c16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c18:	d3fb      	bcc.n	8000c12 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000c1a:	f007 fc35 	bl	8008488 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c1e:	f7ff fd4f 	bl	80006c0 <main>

08000c22 <LoopForever>:

LoopForever:
    b LoopForever
 8000c22:	e7fe      	b.n	8000c22 <LoopForever>
  ldr   r0, =_estack
 8000c24:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000c28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c2c:	20000ff4 	.word	0x20000ff4
  ldr r2, =_sidata
 8000c30:	0800cec4 	.word	0x0800cec4
  ldr r2, =_sbss
 8000c34:	20001000 	.word	0x20001000
  ldr r4, =_ebss
 8000c38:	2000182c 	.word	0x2000182c

08000c3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c3c:	e7fe      	b.n	8000c3c <ADC1_2_IRQHandler>

08000c3e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b082      	sub	sp, #8
 8000c42:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c44:	2300      	movs	r3, #0
 8000c46:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c48:	2003      	movs	r0, #3
 8000c4a:	f000 f939 	bl	8000ec0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c4e:	2000      	movs	r0, #0
 8000c50:	f000 f80e 	bl	8000c70 <HAL_InitTick>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d002      	beq.n	8000c60 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	71fb      	strb	r3, [r7, #7]
 8000c5e:	e001      	b.n	8000c64 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c60:	f7ff fe0c 	bl	800087c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c64:	79fb      	ldrb	r3, [r7, #7]

}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
	...

08000c70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000c7c:	4b16      	ldr	r3, [pc, #88]	; (8000cd8 <HAL_InitTick+0x68>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d022      	beq.n	8000cca <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000c84:	4b15      	ldr	r3, [pc, #84]	; (8000cdc <HAL_InitTick+0x6c>)
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	4b13      	ldr	r3, [pc, #76]	; (8000cd8 <HAL_InitTick+0x68>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c90:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f000 f944 	bl	8000f26 <HAL_SYSTICK_Config>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d10f      	bne.n	8000cc4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2b0f      	cmp	r3, #15
 8000ca8:	d809      	bhi.n	8000cbe <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000caa:	2200      	movs	r2, #0
 8000cac:	6879      	ldr	r1, [r7, #4]
 8000cae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cb2:	f000 f910 	bl	8000ed6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cb6:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <HAL_InitTick+0x70>)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6013      	str	r3, [r2, #0]
 8000cbc:	e007      	b.n	8000cce <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	73fb      	strb	r3, [r7, #15]
 8000cc2:	e004      	b.n	8000cce <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	73fb      	strb	r3, [r7, #15]
 8000cc8:	e001      	b.n	8000cce <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3710      	adds	r7, #16
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	20000008 	.word	0x20000008
 8000cdc:	20000000 	.word	0x20000000
 8000ce0:	20000004 	.word	0x20000004

08000ce4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ce8:	4b05      	ldr	r3, [pc, #20]	; (8000d00 <HAL_IncTick+0x1c>)
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	4b05      	ldr	r3, [pc, #20]	; (8000d04 <HAL_IncTick+0x20>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4413      	add	r3, r2
 8000cf2:	4a03      	ldr	r2, [pc, #12]	; (8000d00 <HAL_IncTick+0x1c>)
 8000cf4:	6013      	str	r3, [r2, #0]
}
 8000cf6:	bf00      	nop
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	20001150 	.word	0x20001150
 8000d04:	20000008 	.word	0x20000008

08000d08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d0c:	4b03      	ldr	r3, [pc, #12]	; (8000d1c <HAL_GetTick+0x14>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	20001150 	.word	0x20001150

08000d20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b085      	sub	sp, #20
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	f003 0307 	and.w	r3, r3, #7
 8000d2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d30:	4b0c      	ldr	r3, [pc, #48]	; (8000d64 <__NVIC_SetPriorityGrouping+0x44>)
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d36:	68ba      	ldr	r2, [r7, #8]
 8000d38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d52:	4a04      	ldr	r2, [pc, #16]	; (8000d64 <__NVIC_SetPriorityGrouping+0x44>)
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	60d3      	str	r3, [r2, #12]
}
 8000d58:	bf00      	nop
 8000d5a:	3714      	adds	r7, #20
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	e000ed00 	.word	0xe000ed00

08000d68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d6c:	4b04      	ldr	r3, [pc, #16]	; (8000d80 <__NVIC_GetPriorityGrouping+0x18>)
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	0a1b      	lsrs	r3, r3, #8
 8000d72:	f003 0307 	and.w	r3, r3, #7
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	e000ed00 	.word	0xe000ed00

08000d84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	db0b      	blt.n	8000dae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	f003 021f 	and.w	r2, r3, #31
 8000d9c:	4907      	ldr	r1, [pc, #28]	; (8000dbc <__NVIC_EnableIRQ+0x38>)
 8000d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da2:	095b      	lsrs	r3, r3, #5
 8000da4:	2001      	movs	r0, #1
 8000da6:	fa00 f202 	lsl.w	r2, r0, r2
 8000daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dae:	bf00      	nop
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	e000e100 	.word	0xe000e100

08000dc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	6039      	str	r1, [r7, #0]
 8000dca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	db0a      	blt.n	8000dea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	b2da      	uxtb	r2, r3
 8000dd8:	490c      	ldr	r1, [pc, #48]	; (8000e0c <__NVIC_SetPriority+0x4c>)
 8000dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dde:	0112      	lsls	r2, r2, #4
 8000de0:	b2d2      	uxtb	r2, r2
 8000de2:	440b      	add	r3, r1
 8000de4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000de8:	e00a      	b.n	8000e00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	b2da      	uxtb	r2, r3
 8000dee:	4908      	ldr	r1, [pc, #32]	; (8000e10 <__NVIC_SetPriority+0x50>)
 8000df0:	79fb      	ldrb	r3, [r7, #7]
 8000df2:	f003 030f 	and.w	r3, r3, #15
 8000df6:	3b04      	subs	r3, #4
 8000df8:	0112      	lsls	r2, r2, #4
 8000dfa:	b2d2      	uxtb	r2, r2
 8000dfc:	440b      	add	r3, r1
 8000dfe:	761a      	strb	r2, [r3, #24]
}
 8000e00:	bf00      	nop
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	e000e100 	.word	0xe000e100
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b089      	sub	sp, #36	; 0x24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	60f8      	str	r0, [r7, #12]
 8000e1c:	60b9      	str	r1, [r7, #8]
 8000e1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	f003 0307 	and.w	r3, r3, #7
 8000e26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	f1c3 0307 	rsb	r3, r3, #7
 8000e2e:	2b04      	cmp	r3, #4
 8000e30:	bf28      	it	cs
 8000e32:	2304      	movcs	r3, #4
 8000e34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	3304      	adds	r3, #4
 8000e3a:	2b06      	cmp	r3, #6
 8000e3c:	d902      	bls.n	8000e44 <NVIC_EncodePriority+0x30>
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	3b03      	subs	r3, #3
 8000e42:	e000      	b.n	8000e46 <NVIC_EncodePriority+0x32>
 8000e44:	2300      	movs	r3, #0
 8000e46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e4c:	69bb      	ldr	r3, [r7, #24]
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	43da      	mvns	r2, r3
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	401a      	ands	r2, r3
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e5c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	fa01 f303 	lsl.w	r3, r1, r3
 8000e66:	43d9      	mvns	r1, r3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e6c:	4313      	orrs	r3, r2
         );
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3724      	adds	r7, #36	; 0x24
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
	...

08000e7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	3b01      	subs	r3, #1
 8000e88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e8c:	d301      	bcc.n	8000e92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e00f      	b.n	8000eb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e92:	4a0a      	ldr	r2, [pc, #40]	; (8000ebc <SysTick_Config+0x40>)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	3b01      	subs	r3, #1
 8000e98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e9a:	210f      	movs	r1, #15
 8000e9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ea0:	f7ff ff8e 	bl	8000dc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ea4:	4b05      	ldr	r3, [pc, #20]	; (8000ebc <SysTick_Config+0x40>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eaa:	4b04      	ldr	r3, [pc, #16]	; (8000ebc <SysTick_Config+0x40>)
 8000eac:	2207      	movs	r2, #7
 8000eae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eb0:	2300      	movs	r3, #0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	e000e010 	.word	0xe000e010

08000ec0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f7ff ff29 	bl	8000d20 <__NVIC_SetPriorityGrouping>
}
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b086      	sub	sp, #24
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	4603      	mov	r3, r0
 8000ede:	60b9      	str	r1, [r7, #8]
 8000ee0:	607a      	str	r2, [r7, #4]
 8000ee2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ee4:	f7ff ff40 	bl	8000d68 <__NVIC_GetPriorityGrouping>
 8000ee8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eea:	687a      	ldr	r2, [r7, #4]
 8000eec:	68b9      	ldr	r1, [r7, #8]
 8000eee:	6978      	ldr	r0, [r7, #20]
 8000ef0:	f7ff ff90 	bl	8000e14 <NVIC_EncodePriority>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000efa:	4611      	mov	r1, r2
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff ff5f 	bl	8000dc0 <__NVIC_SetPriority>
}
 8000f02:	bf00      	nop
 8000f04:	3718      	adds	r7, #24
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b082      	sub	sp, #8
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	4603      	mov	r3, r0
 8000f12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff ff33 	bl	8000d84 <__NVIC_EnableIRQ>
}
 8000f1e:	bf00      	nop
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b082      	sub	sp, #8
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f7ff ffa4 	bl	8000e7c <SysTick_Config>
 8000f34:	4603      	mov	r3, r0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
	...

08000f40 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d101      	bne.n	8000f52 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e054      	b.n	8000ffc <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	7f5b      	ldrb	r3, [r3, #29]
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d105      	bne.n	8000f68 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2200      	movs	r2, #0
 8000f60:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f7ff fb4c 	bl	8000600 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2202      	movs	r2, #2
 8000f6c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	791b      	ldrb	r3, [r3, #4]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d10c      	bne.n	8000f90 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a22      	ldr	r2, [pc, #136]	; (8001004 <HAL_CRC_Init+0xc4>)
 8000f7c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	689a      	ldr	r2, [r3, #8]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f022 0218 	bic.w	r2, r2, #24
 8000f8c:	609a      	str	r2, [r3, #8]
 8000f8e:	e00c      	b.n	8000faa <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6899      	ldr	r1, [r3, #8]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	461a      	mov	r2, r3
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f000 f834 	bl	8001008 <HAL_CRCEx_Polynomial_Set>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e028      	b.n	8000ffc <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	795b      	ldrb	r3, [r3, #5]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d105      	bne.n	8000fbe <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fba:	611a      	str	r2, [r3, #16]
 8000fbc:	e004      	b.n	8000fc8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	687a      	ldr	r2, [r7, #4]
 8000fc4:	6912      	ldr	r2, [r2, #16]
 8000fc6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	695a      	ldr	r2, [r3, #20]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	430a      	orrs	r2, r1
 8000fdc:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	689b      	ldr	r3, [r3, #8]
 8000fe4:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	699a      	ldr	r2, [r3, #24]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	430a      	orrs	r2, r1
 8000ff2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8000ffa:	2300      	movs	r3, #0
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	04c11db7 	.word	0x04c11db7

08001008 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001008:	b480      	push	{r7}
 800100a:	b087      	sub	sp, #28
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001014:	2300      	movs	r3, #0
 8001016:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001018:	231f      	movs	r3, #31
 800101a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	2b00      	cmp	r3, #0
 8001024:	d102      	bne.n	800102c <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	75fb      	strb	r3, [r7, #23]
 800102a:	e063      	b.n	80010f4 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800102c:	bf00      	nop
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	1e5a      	subs	r2, r3, #1
 8001032:	613a      	str	r2, [r7, #16]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d009      	beq.n	800104c <HAL_CRCEx_Polynomial_Set+0x44>
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	f003 031f 	and.w	r3, r3, #31
 800103e:	68ba      	ldr	r2, [r7, #8]
 8001040:	fa22 f303 	lsr.w	r3, r2, r3
 8001044:	f003 0301 	and.w	r3, r3, #1
 8001048:	2b00      	cmp	r3, #0
 800104a:	d0f0      	beq.n	800102e <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2b18      	cmp	r3, #24
 8001050:	d846      	bhi.n	80010e0 <HAL_CRCEx_Polynomial_Set+0xd8>
 8001052:	a201      	add	r2, pc, #4	; (adr r2, 8001058 <HAL_CRCEx_Polynomial_Set+0x50>)
 8001054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001058:	080010e7 	.word	0x080010e7
 800105c:	080010e1 	.word	0x080010e1
 8001060:	080010e1 	.word	0x080010e1
 8001064:	080010e1 	.word	0x080010e1
 8001068:	080010e1 	.word	0x080010e1
 800106c:	080010e1 	.word	0x080010e1
 8001070:	080010e1 	.word	0x080010e1
 8001074:	080010e1 	.word	0x080010e1
 8001078:	080010d5 	.word	0x080010d5
 800107c:	080010e1 	.word	0x080010e1
 8001080:	080010e1 	.word	0x080010e1
 8001084:	080010e1 	.word	0x080010e1
 8001088:	080010e1 	.word	0x080010e1
 800108c:	080010e1 	.word	0x080010e1
 8001090:	080010e1 	.word	0x080010e1
 8001094:	080010e1 	.word	0x080010e1
 8001098:	080010c9 	.word	0x080010c9
 800109c:	080010e1 	.word	0x080010e1
 80010a0:	080010e1 	.word	0x080010e1
 80010a4:	080010e1 	.word	0x080010e1
 80010a8:	080010e1 	.word	0x080010e1
 80010ac:	080010e1 	.word	0x080010e1
 80010b0:	080010e1 	.word	0x080010e1
 80010b4:	080010e1 	.word	0x080010e1
 80010b8:	080010bd 	.word	0x080010bd
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	2b06      	cmp	r3, #6
 80010c0:	d913      	bls.n	80010ea <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80010c6:	e010      	b.n	80010ea <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	2b07      	cmp	r3, #7
 80010cc:	d90f      	bls.n	80010ee <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80010d2:	e00c      	b.n	80010ee <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	2b0f      	cmp	r3, #15
 80010d8:	d90b      	bls.n	80010f2 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80010de:	e008      	b.n	80010f2 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80010e0:	2301      	movs	r3, #1
 80010e2:	75fb      	strb	r3, [r7, #23]
        break;
 80010e4:	e006      	b.n	80010f4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80010e6:	bf00      	nop
 80010e8:	e004      	b.n	80010f4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80010ea:	bf00      	nop
 80010ec:	e002      	b.n	80010f4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80010ee:	bf00      	nop
 80010f0:	e000      	b.n	80010f4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80010f2:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80010f4:	7dfb      	ldrb	r3, [r7, #23]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d10d      	bne.n	8001116 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	68ba      	ldr	r2, [r7, #8]
 8001100:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	f023 0118 	bic.w	r1, r3, #24
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	687a      	ldr	r2, [r7, #4]
 8001112:	430a      	orrs	r2, r1
 8001114:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001116:	7dfb      	ldrb	r3, [r7, #23]
}
 8001118:	4618      	mov	r0, r3
 800111a:	371c      	adds	r7, #28
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001124:	b480      	push	{r7}
 8001126:	b085      	sub	sp, #20
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800112c:	2300      	movs	r3, #0
 800112e:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001136:	b2db      	uxtb	r3, r3
 8001138:	2b02      	cmp	r3, #2
 800113a:	d005      	beq.n	8001148 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2204      	movs	r2, #4
 8001140:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	73fb      	strb	r3, [r7, #15]
 8001146:	e037      	b.n	80011b8 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f022 020e 	bic.w	r2, r2, #14
 8001156:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001162:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001166:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f022 0201 	bic.w	r2, r2, #1
 8001176:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117c:	f003 021f 	and.w	r2, r3, #31
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001184:	2101      	movs	r1, #1
 8001186:	fa01 f202 	lsl.w	r2, r1, r2
 800118a:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001190:	687a      	ldr	r2, [r7, #4]
 8001192:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001194:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800119a:	2b00      	cmp	r3, #0
 800119c:	d00c      	beq.n	80011b8 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80011ac:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80011b6:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2201      	movs	r2, #1
 80011bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2200      	movs	r2, #0
 80011c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80011c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3714      	adds	r7, #20
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr

080011d6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b084      	sub	sp, #16
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011de:	2300      	movs	r3, #0
 80011e0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d00d      	beq.n	800120a <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2204      	movs	r2, #4
 80011f2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2201      	movs	r2, #1
 80011f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2200      	movs	r2, #0
 8001200:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	73fb      	strb	r3, [r7, #15]
 8001208:	e047      	b.n	800129a <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f022 020e 	bic.w	r2, r2, #14
 8001218:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f022 0201 	bic.w	r2, r2, #1
 8001228:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001234:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001238:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123e:	f003 021f 	and.w	r2, r3, #31
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001246:	2101      	movs	r1, #1
 8001248:	fa01 f202 	lsl.w	r2, r1, r2
 800124c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001256:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800125c:	2b00      	cmp	r3, #0
 800125e:	d00c      	beq.n	800127a <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800126a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800126e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001278:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2201      	movs	r2, #1
 800127e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2200      	movs	r2, #0
 8001286:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800128e:	2b00      	cmp	r3, #0
 8001290:	d003      	beq.n	800129a <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	4798      	blx	r3
    }
  }
  return status;
 800129a:	7bfb      	ldrb	r3, [r7, #15]
}
 800129c:	4618      	mov	r0, r3
 800129e:	3710      	adds	r7, #16
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b087      	sub	sp, #28
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80012ae:	2300      	movs	r3, #0
 80012b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80012b2:	e15a      	b.n	800156a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	2101      	movs	r1, #1
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	fa01 f303 	lsl.w	r3, r1, r3
 80012c0:	4013      	ands	r3, r2
 80012c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	f000 814c 	beq.w	8001564 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f003 0303 	and.w	r3, r3, #3
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d005      	beq.n	80012e4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	d130      	bne.n	8001346 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	2203      	movs	r2, #3
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	43db      	mvns	r3, r3
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	4013      	ands	r3, r2
 80012fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	68da      	ldr	r2, [r3, #12]
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	693a      	ldr	r2, [r7, #16]
 800130a:	4313      	orrs	r3, r2
 800130c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800131a:	2201      	movs	r2, #1
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	43db      	mvns	r3, r3
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	4013      	ands	r3, r2
 8001328:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	091b      	lsrs	r3, r3, #4
 8001330:	f003 0201 	and.w	r2, r3, #1
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	4313      	orrs	r3, r2
 800133e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f003 0303 	and.w	r3, r3, #3
 800134e:	2b03      	cmp	r3, #3
 8001350:	d017      	beq.n	8001382 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	68db      	ldr	r3, [r3, #12]
 8001356:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	2203      	movs	r2, #3
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	43db      	mvns	r3, r3
 8001364:	693a      	ldr	r2, [r7, #16]
 8001366:	4013      	ands	r3, r2
 8001368:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	689a      	ldr	r2, [r3, #8]
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	fa02 f303 	lsl.w	r3, r2, r3
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	4313      	orrs	r3, r2
 800137a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f003 0303 	and.w	r3, r3, #3
 800138a:	2b02      	cmp	r3, #2
 800138c:	d123      	bne.n	80013d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	08da      	lsrs	r2, r3, #3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	3208      	adds	r2, #8
 8001396:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800139a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	f003 0307 	and.w	r3, r3, #7
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	220f      	movs	r2, #15
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	43db      	mvns	r3, r3
 80013ac:	693a      	ldr	r2, [r7, #16]
 80013ae:	4013      	ands	r3, r2
 80013b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	691a      	ldr	r2, [r3, #16]
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	f003 0307 	and.w	r3, r3, #7
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	08da      	lsrs	r2, r3, #3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	3208      	adds	r2, #8
 80013d0:	6939      	ldr	r1, [r7, #16]
 80013d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	2203      	movs	r2, #3
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	43db      	mvns	r3, r3
 80013e8:	693a      	ldr	r2, [r7, #16]
 80013ea:	4013      	ands	r3, r2
 80013ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f003 0203 	and.w	r2, r3, #3
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	4313      	orrs	r3, r2
 8001402:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001412:	2b00      	cmp	r3, #0
 8001414:	f000 80a6 	beq.w	8001564 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001418:	4b5b      	ldr	r3, [pc, #364]	; (8001588 <HAL_GPIO_Init+0x2e4>)
 800141a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800141c:	4a5a      	ldr	r2, [pc, #360]	; (8001588 <HAL_GPIO_Init+0x2e4>)
 800141e:	f043 0301 	orr.w	r3, r3, #1
 8001422:	6613      	str	r3, [r2, #96]	; 0x60
 8001424:	4b58      	ldr	r3, [pc, #352]	; (8001588 <HAL_GPIO_Init+0x2e4>)
 8001426:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001428:	f003 0301 	and.w	r3, r3, #1
 800142c:	60bb      	str	r3, [r7, #8]
 800142e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001430:	4a56      	ldr	r2, [pc, #344]	; (800158c <HAL_GPIO_Init+0x2e8>)
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	089b      	lsrs	r3, r3, #2
 8001436:	3302      	adds	r3, #2
 8001438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800143c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	f003 0303 	and.w	r3, r3, #3
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	220f      	movs	r2, #15
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	43db      	mvns	r3, r3
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	4013      	ands	r3, r2
 8001452:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800145a:	d01f      	beq.n	800149c <HAL_GPIO_Init+0x1f8>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	4a4c      	ldr	r2, [pc, #304]	; (8001590 <HAL_GPIO_Init+0x2ec>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d019      	beq.n	8001498 <HAL_GPIO_Init+0x1f4>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	4a4b      	ldr	r2, [pc, #300]	; (8001594 <HAL_GPIO_Init+0x2f0>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d013      	beq.n	8001494 <HAL_GPIO_Init+0x1f0>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	4a4a      	ldr	r2, [pc, #296]	; (8001598 <HAL_GPIO_Init+0x2f4>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d00d      	beq.n	8001490 <HAL_GPIO_Init+0x1ec>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	4a49      	ldr	r2, [pc, #292]	; (800159c <HAL_GPIO_Init+0x2f8>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d007      	beq.n	800148c <HAL_GPIO_Init+0x1e8>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	4a48      	ldr	r2, [pc, #288]	; (80015a0 <HAL_GPIO_Init+0x2fc>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d101      	bne.n	8001488 <HAL_GPIO_Init+0x1e4>
 8001484:	2305      	movs	r3, #5
 8001486:	e00a      	b.n	800149e <HAL_GPIO_Init+0x1fa>
 8001488:	2306      	movs	r3, #6
 800148a:	e008      	b.n	800149e <HAL_GPIO_Init+0x1fa>
 800148c:	2304      	movs	r3, #4
 800148e:	e006      	b.n	800149e <HAL_GPIO_Init+0x1fa>
 8001490:	2303      	movs	r3, #3
 8001492:	e004      	b.n	800149e <HAL_GPIO_Init+0x1fa>
 8001494:	2302      	movs	r3, #2
 8001496:	e002      	b.n	800149e <HAL_GPIO_Init+0x1fa>
 8001498:	2301      	movs	r3, #1
 800149a:	e000      	b.n	800149e <HAL_GPIO_Init+0x1fa>
 800149c:	2300      	movs	r3, #0
 800149e:	697a      	ldr	r2, [r7, #20]
 80014a0:	f002 0203 	and.w	r2, r2, #3
 80014a4:	0092      	lsls	r2, r2, #2
 80014a6:	4093      	lsls	r3, r2
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	4313      	orrs	r3, r2
 80014ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014ae:	4937      	ldr	r1, [pc, #220]	; (800158c <HAL_GPIO_Init+0x2e8>)
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	089b      	lsrs	r3, r3, #2
 80014b4:	3302      	adds	r3, #2
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014bc:	4b39      	ldr	r3, [pc, #228]	; (80015a4 <HAL_GPIO_Init+0x300>)
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	43db      	mvns	r3, r3
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	4013      	ands	r3, r2
 80014ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d003      	beq.n	80014e0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80014d8:	693a      	ldr	r2, [r7, #16]
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	4313      	orrs	r3, r2
 80014de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80014e0:	4a30      	ldr	r2, [pc, #192]	; (80015a4 <HAL_GPIO_Init+0x300>)
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80014e6:	4b2f      	ldr	r3, [pc, #188]	; (80015a4 <HAL_GPIO_Init+0x300>)
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	43db      	mvns	r3, r3
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	4013      	ands	r3, r2
 80014f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d003      	beq.n	800150a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	4313      	orrs	r3, r2
 8001508:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800150a:	4a26      	ldr	r2, [pc, #152]	; (80015a4 <HAL_GPIO_Init+0x300>)
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001510:	4b24      	ldr	r3, [pc, #144]	; (80015a4 <HAL_GPIO_Init+0x300>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	43db      	mvns	r3, r3
 800151a:	693a      	ldr	r2, [r7, #16]
 800151c:	4013      	ands	r3, r2
 800151e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d003      	beq.n	8001534 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	4313      	orrs	r3, r2
 8001532:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001534:	4a1b      	ldr	r2, [pc, #108]	; (80015a4 <HAL_GPIO_Init+0x300>)
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800153a:	4b1a      	ldr	r3, [pc, #104]	; (80015a4 <HAL_GPIO_Init+0x300>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	43db      	mvns	r3, r3
 8001544:	693a      	ldr	r2, [r7, #16]
 8001546:	4013      	ands	r3, r2
 8001548:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d003      	beq.n	800155e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	4313      	orrs	r3, r2
 800155c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800155e:	4a11      	ldr	r2, [pc, #68]	; (80015a4 <HAL_GPIO_Init+0x300>)
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	3301      	adds	r3, #1
 8001568:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	fa22 f303 	lsr.w	r3, r2, r3
 8001574:	2b00      	cmp	r3, #0
 8001576:	f47f ae9d 	bne.w	80012b4 <HAL_GPIO_Init+0x10>
  }
}
 800157a:	bf00      	nop
 800157c:	bf00      	nop
 800157e:	371c      	adds	r7, #28
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	40021000 	.word	0x40021000
 800158c:	40010000 	.word	0x40010000
 8001590:	48000400 	.word	0x48000400
 8001594:	48000800 	.word	0x48000800
 8001598:	48000c00 	.word	0x48000c00
 800159c:	48001000 	.word	0x48001000
 80015a0:	48001400 	.word	0x48001400
 80015a4:	40010400 	.word	0x40010400

080015a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	460b      	mov	r3, r1
 80015b2:	807b      	strh	r3, [r7, #2]
 80015b4:	4613      	mov	r3, r2
 80015b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015b8:	787b      	ldrb	r3, [r7, #1]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d003      	beq.n	80015c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015be:	887a      	ldrh	r2, [r7, #2]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015c4:	e002      	b.n	80015cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015c6:	887a      	ldrh	r2, [r7, #2]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80015d8:	b480      	push	{r7}
 80015da:	b085      	sub	sp, #20
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d141      	bne.n	800166a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80015e6:	4b4b      	ldr	r3, [pc, #300]	; (8001714 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015f2:	d131      	bne.n	8001658 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80015f4:	4b47      	ldr	r3, [pc, #284]	; (8001714 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80015fa:	4a46      	ldr	r2, [pc, #280]	; (8001714 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001600:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001604:	4b43      	ldr	r3, [pc, #268]	; (8001714 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800160c:	4a41      	ldr	r2, [pc, #260]	; (8001714 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800160e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001612:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001614:	4b40      	ldr	r3, [pc, #256]	; (8001718 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2232      	movs	r2, #50	; 0x32
 800161a:	fb02 f303 	mul.w	r3, r2, r3
 800161e:	4a3f      	ldr	r2, [pc, #252]	; (800171c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001620:	fba2 2303 	umull	r2, r3, r2, r3
 8001624:	0c9b      	lsrs	r3, r3, #18
 8001626:	3301      	adds	r3, #1
 8001628:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800162a:	e002      	b.n	8001632 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	3b01      	subs	r3, #1
 8001630:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001632:	4b38      	ldr	r3, [pc, #224]	; (8001714 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001634:	695b      	ldr	r3, [r3, #20]
 8001636:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800163a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800163e:	d102      	bne.n	8001646 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d1f2      	bne.n	800162c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001646:	4b33      	ldr	r3, [pc, #204]	; (8001714 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001648:	695b      	ldr	r3, [r3, #20]
 800164a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800164e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001652:	d158      	bne.n	8001706 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e057      	b.n	8001708 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001658:	4b2e      	ldr	r3, [pc, #184]	; (8001714 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800165a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800165e:	4a2d      	ldr	r2, [pc, #180]	; (8001714 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001660:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001664:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001668:	e04d      	b.n	8001706 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001670:	d141      	bne.n	80016f6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001672:	4b28      	ldr	r3, [pc, #160]	; (8001714 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800167a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800167e:	d131      	bne.n	80016e4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001680:	4b24      	ldr	r3, [pc, #144]	; (8001714 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001682:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001686:	4a23      	ldr	r2, [pc, #140]	; (8001714 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001688:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800168c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001690:	4b20      	ldr	r3, [pc, #128]	; (8001714 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001698:	4a1e      	ldr	r2, [pc, #120]	; (8001714 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800169a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800169e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80016a0:	4b1d      	ldr	r3, [pc, #116]	; (8001718 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2232      	movs	r2, #50	; 0x32
 80016a6:	fb02 f303 	mul.w	r3, r2, r3
 80016aa:	4a1c      	ldr	r2, [pc, #112]	; (800171c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80016ac:	fba2 2303 	umull	r2, r3, r2, r3
 80016b0:	0c9b      	lsrs	r3, r3, #18
 80016b2:	3301      	adds	r3, #1
 80016b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016b6:	e002      	b.n	80016be <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	3b01      	subs	r3, #1
 80016bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016be:	4b15      	ldr	r3, [pc, #84]	; (8001714 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016c0:	695b      	ldr	r3, [r3, #20]
 80016c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016ca:	d102      	bne.n	80016d2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d1f2      	bne.n	80016b8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016d2:	4b10      	ldr	r3, [pc, #64]	; (8001714 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016d4:	695b      	ldr	r3, [r3, #20]
 80016d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016de:	d112      	bne.n	8001706 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e011      	b.n	8001708 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80016e4:	4b0b      	ldr	r3, [pc, #44]	; (8001714 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016ea:	4a0a      	ldr	r2, [pc, #40]	; (8001714 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80016f4:	e007      	b.n	8001706 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80016f6:	4b07      	ldr	r3, [pc, #28]	; (8001714 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016fe:	4a05      	ldr	r2, [pc, #20]	; (8001714 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001700:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001704:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001706:	2300      	movs	r3, #0
}
 8001708:	4618      	mov	r0, r3
 800170a:	3714      	adds	r7, #20
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	40007000 	.word	0x40007000
 8001718:	20000000 	.word	0x20000000
 800171c:	431bde83 	.word	0x431bde83

08001720 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001724:	4b05      	ldr	r3, [pc, #20]	; (800173c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	4a04      	ldr	r2, [pc, #16]	; (800173c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800172a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800172e:	6093      	str	r3, [r2, #8]
}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	40007000 	.word	0x40007000

08001740 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b088      	sub	sp, #32
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d101      	bne.n	8001752 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e2fe      	b.n	8001d50 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	2b00      	cmp	r3, #0
 800175c:	d075      	beq.n	800184a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800175e:	4b97      	ldr	r3, [pc, #604]	; (80019bc <HAL_RCC_OscConfig+0x27c>)
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	f003 030c 	and.w	r3, r3, #12
 8001766:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001768:	4b94      	ldr	r3, [pc, #592]	; (80019bc <HAL_RCC_OscConfig+0x27c>)
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	f003 0303 	and.w	r3, r3, #3
 8001770:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001772:	69bb      	ldr	r3, [r7, #24]
 8001774:	2b0c      	cmp	r3, #12
 8001776:	d102      	bne.n	800177e <HAL_RCC_OscConfig+0x3e>
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	2b03      	cmp	r3, #3
 800177c:	d002      	beq.n	8001784 <HAL_RCC_OscConfig+0x44>
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	2b08      	cmp	r3, #8
 8001782:	d10b      	bne.n	800179c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001784:	4b8d      	ldr	r3, [pc, #564]	; (80019bc <HAL_RCC_OscConfig+0x27c>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d05b      	beq.n	8001848 <HAL_RCC_OscConfig+0x108>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d157      	bne.n	8001848 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e2d9      	b.n	8001d50 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017a4:	d106      	bne.n	80017b4 <HAL_RCC_OscConfig+0x74>
 80017a6:	4b85      	ldr	r3, [pc, #532]	; (80019bc <HAL_RCC_OscConfig+0x27c>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a84      	ldr	r2, [pc, #528]	; (80019bc <HAL_RCC_OscConfig+0x27c>)
 80017ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017b0:	6013      	str	r3, [r2, #0]
 80017b2:	e01d      	b.n	80017f0 <HAL_RCC_OscConfig+0xb0>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017bc:	d10c      	bne.n	80017d8 <HAL_RCC_OscConfig+0x98>
 80017be:	4b7f      	ldr	r3, [pc, #508]	; (80019bc <HAL_RCC_OscConfig+0x27c>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a7e      	ldr	r2, [pc, #504]	; (80019bc <HAL_RCC_OscConfig+0x27c>)
 80017c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017c8:	6013      	str	r3, [r2, #0]
 80017ca:	4b7c      	ldr	r3, [pc, #496]	; (80019bc <HAL_RCC_OscConfig+0x27c>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a7b      	ldr	r2, [pc, #492]	; (80019bc <HAL_RCC_OscConfig+0x27c>)
 80017d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017d4:	6013      	str	r3, [r2, #0]
 80017d6:	e00b      	b.n	80017f0 <HAL_RCC_OscConfig+0xb0>
 80017d8:	4b78      	ldr	r3, [pc, #480]	; (80019bc <HAL_RCC_OscConfig+0x27c>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a77      	ldr	r2, [pc, #476]	; (80019bc <HAL_RCC_OscConfig+0x27c>)
 80017de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017e2:	6013      	str	r3, [r2, #0]
 80017e4:	4b75      	ldr	r3, [pc, #468]	; (80019bc <HAL_RCC_OscConfig+0x27c>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a74      	ldr	r2, [pc, #464]	; (80019bc <HAL_RCC_OscConfig+0x27c>)
 80017ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d013      	beq.n	8001820 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f8:	f7ff fa86 	bl	8000d08 <HAL_GetTick>
 80017fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017fe:	e008      	b.n	8001812 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001800:	f7ff fa82 	bl	8000d08 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b64      	cmp	r3, #100	; 0x64
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e29e      	b.n	8001d50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001812:	4b6a      	ldr	r3, [pc, #424]	; (80019bc <HAL_RCC_OscConfig+0x27c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d0f0      	beq.n	8001800 <HAL_RCC_OscConfig+0xc0>
 800181e:	e014      	b.n	800184a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001820:	f7ff fa72 	bl	8000d08 <HAL_GetTick>
 8001824:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001826:	e008      	b.n	800183a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001828:	f7ff fa6e 	bl	8000d08 <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	2b64      	cmp	r3, #100	; 0x64
 8001834:	d901      	bls.n	800183a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e28a      	b.n	8001d50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800183a:	4b60      	ldr	r3, [pc, #384]	; (80019bc <HAL_RCC_OscConfig+0x27c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d1f0      	bne.n	8001828 <HAL_RCC_OscConfig+0xe8>
 8001846:	e000      	b.n	800184a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001848:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	2b00      	cmp	r3, #0
 8001854:	d075      	beq.n	8001942 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001856:	4b59      	ldr	r3, [pc, #356]	; (80019bc <HAL_RCC_OscConfig+0x27c>)
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	f003 030c 	and.w	r3, r3, #12
 800185e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001860:	4b56      	ldr	r3, [pc, #344]	; (80019bc <HAL_RCC_OscConfig+0x27c>)
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	f003 0303 	and.w	r3, r3, #3
 8001868:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	2b0c      	cmp	r3, #12
 800186e:	d102      	bne.n	8001876 <HAL_RCC_OscConfig+0x136>
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	2b02      	cmp	r3, #2
 8001874:	d002      	beq.n	800187c <HAL_RCC_OscConfig+0x13c>
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	2b04      	cmp	r3, #4
 800187a:	d11f      	bne.n	80018bc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800187c:	4b4f      	ldr	r3, [pc, #316]	; (80019bc <HAL_RCC_OscConfig+0x27c>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001884:	2b00      	cmp	r3, #0
 8001886:	d005      	beq.n	8001894 <HAL_RCC_OscConfig+0x154>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d101      	bne.n	8001894 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e25d      	b.n	8001d50 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001894:	4b49      	ldr	r3, [pc, #292]	; (80019bc <HAL_RCC_OscConfig+0x27c>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	691b      	ldr	r3, [r3, #16]
 80018a0:	061b      	lsls	r3, r3, #24
 80018a2:	4946      	ldr	r1, [pc, #280]	; (80019bc <HAL_RCC_OscConfig+0x27c>)
 80018a4:	4313      	orrs	r3, r2
 80018a6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80018a8:	4b45      	ldr	r3, [pc, #276]	; (80019c0 <HAL_RCC_OscConfig+0x280>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff f9df 	bl	8000c70 <HAL_InitTick>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d043      	beq.n	8001940 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e249      	b.n	8001d50 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d023      	beq.n	800190c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018c4:	4b3d      	ldr	r3, [pc, #244]	; (80019bc <HAL_RCC_OscConfig+0x27c>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a3c      	ldr	r2, [pc, #240]	; (80019bc <HAL_RCC_OscConfig+0x27c>)
 80018ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d0:	f7ff fa1a 	bl	8000d08 <HAL_GetTick>
 80018d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018d6:	e008      	b.n	80018ea <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018d8:	f7ff fa16 	bl	8000d08 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e232      	b.n	8001d50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018ea:	4b34      	ldr	r3, [pc, #208]	; (80019bc <HAL_RCC_OscConfig+0x27c>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d0f0      	beq.n	80018d8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018f6:	4b31      	ldr	r3, [pc, #196]	; (80019bc <HAL_RCC_OscConfig+0x27c>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	691b      	ldr	r3, [r3, #16]
 8001902:	061b      	lsls	r3, r3, #24
 8001904:	492d      	ldr	r1, [pc, #180]	; (80019bc <HAL_RCC_OscConfig+0x27c>)
 8001906:	4313      	orrs	r3, r2
 8001908:	604b      	str	r3, [r1, #4]
 800190a:	e01a      	b.n	8001942 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800190c:	4b2b      	ldr	r3, [pc, #172]	; (80019bc <HAL_RCC_OscConfig+0x27c>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a2a      	ldr	r2, [pc, #168]	; (80019bc <HAL_RCC_OscConfig+0x27c>)
 8001912:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001916:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001918:	f7ff f9f6 	bl	8000d08 <HAL_GetTick>
 800191c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800191e:	e008      	b.n	8001932 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001920:	f7ff f9f2 	bl	8000d08 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	2b02      	cmp	r3, #2
 800192c:	d901      	bls.n	8001932 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e20e      	b.n	8001d50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001932:	4b22      	ldr	r3, [pc, #136]	; (80019bc <HAL_RCC_OscConfig+0x27c>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800193a:	2b00      	cmp	r3, #0
 800193c:	d1f0      	bne.n	8001920 <HAL_RCC_OscConfig+0x1e0>
 800193e:	e000      	b.n	8001942 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001940:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0308 	and.w	r3, r3, #8
 800194a:	2b00      	cmp	r3, #0
 800194c:	d041      	beq.n	80019d2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	695b      	ldr	r3, [r3, #20]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d01c      	beq.n	8001990 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001956:	4b19      	ldr	r3, [pc, #100]	; (80019bc <HAL_RCC_OscConfig+0x27c>)
 8001958:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800195c:	4a17      	ldr	r2, [pc, #92]	; (80019bc <HAL_RCC_OscConfig+0x27c>)
 800195e:	f043 0301 	orr.w	r3, r3, #1
 8001962:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001966:	f7ff f9cf 	bl	8000d08 <HAL_GetTick>
 800196a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800196c:	e008      	b.n	8001980 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800196e:	f7ff f9cb 	bl	8000d08 <HAL_GetTick>
 8001972:	4602      	mov	r2, r0
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	2b02      	cmp	r3, #2
 800197a:	d901      	bls.n	8001980 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800197c:	2303      	movs	r3, #3
 800197e:	e1e7      	b.n	8001d50 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001980:	4b0e      	ldr	r3, [pc, #56]	; (80019bc <HAL_RCC_OscConfig+0x27c>)
 8001982:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	2b00      	cmp	r3, #0
 800198c:	d0ef      	beq.n	800196e <HAL_RCC_OscConfig+0x22e>
 800198e:	e020      	b.n	80019d2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001990:	4b0a      	ldr	r3, [pc, #40]	; (80019bc <HAL_RCC_OscConfig+0x27c>)
 8001992:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001996:	4a09      	ldr	r2, [pc, #36]	; (80019bc <HAL_RCC_OscConfig+0x27c>)
 8001998:	f023 0301 	bic.w	r3, r3, #1
 800199c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019a0:	f7ff f9b2 	bl	8000d08 <HAL_GetTick>
 80019a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019a6:	e00d      	b.n	80019c4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019a8:	f7ff f9ae 	bl	8000d08 <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d906      	bls.n	80019c4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e1ca      	b.n	8001d50 <HAL_RCC_OscConfig+0x610>
 80019ba:	bf00      	nop
 80019bc:	40021000 	.word	0x40021000
 80019c0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019c4:	4b8c      	ldr	r3, [pc, #560]	; (8001bf8 <HAL_RCC_OscConfig+0x4b8>)
 80019c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d1ea      	bne.n	80019a8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0304 	and.w	r3, r3, #4
 80019da:	2b00      	cmp	r3, #0
 80019dc:	f000 80a6 	beq.w	8001b2c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019e0:	2300      	movs	r3, #0
 80019e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80019e4:	4b84      	ldr	r3, [pc, #528]	; (8001bf8 <HAL_RCC_OscConfig+0x4b8>)
 80019e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d101      	bne.n	80019f4 <HAL_RCC_OscConfig+0x2b4>
 80019f0:	2301      	movs	r3, #1
 80019f2:	e000      	b.n	80019f6 <HAL_RCC_OscConfig+0x2b6>
 80019f4:	2300      	movs	r3, #0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d00d      	beq.n	8001a16 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019fa:	4b7f      	ldr	r3, [pc, #508]	; (8001bf8 <HAL_RCC_OscConfig+0x4b8>)
 80019fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019fe:	4a7e      	ldr	r2, [pc, #504]	; (8001bf8 <HAL_RCC_OscConfig+0x4b8>)
 8001a00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a04:	6593      	str	r3, [r2, #88]	; 0x58
 8001a06:	4b7c      	ldr	r3, [pc, #496]	; (8001bf8 <HAL_RCC_OscConfig+0x4b8>)
 8001a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a0e:	60fb      	str	r3, [r7, #12]
 8001a10:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001a12:	2301      	movs	r3, #1
 8001a14:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a16:	4b79      	ldr	r3, [pc, #484]	; (8001bfc <HAL_RCC_OscConfig+0x4bc>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d118      	bne.n	8001a54 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a22:	4b76      	ldr	r3, [pc, #472]	; (8001bfc <HAL_RCC_OscConfig+0x4bc>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a75      	ldr	r2, [pc, #468]	; (8001bfc <HAL_RCC_OscConfig+0x4bc>)
 8001a28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a2e:	f7ff f96b 	bl	8000d08 <HAL_GetTick>
 8001a32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a34:	e008      	b.n	8001a48 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a36:	f7ff f967 	bl	8000d08 <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d901      	bls.n	8001a48 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001a44:	2303      	movs	r3, #3
 8001a46:	e183      	b.n	8001d50 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a48:	4b6c      	ldr	r3, [pc, #432]	; (8001bfc <HAL_RCC_OscConfig+0x4bc>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d0f0      	beq.n	8001a36 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d108      	bne.n	8001a6e <HAL_RCC_OscConfig+0x32e>
 8001a5c:	4b66      	ldr	r3, [pc, #408]	; (8001bf8 <HAL_RCC_OscConfig+0x4b8>)
 8001a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a62:	4a65      	ldr	r2, [pc, #404]	; (8001bf8 <HAL_RCC_OscConfig+0x4b8>)
 8001a64:	f043 0301 	orr.w	r3, r3, #1
 8001a68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a6c:	e024      	b.n	8001ab8 <HAL_RCC_OscConfig+0x378>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	2b05      	cmp	r3, #5
 8001a74:	d110      	bne.n	8001a98 <HAL_RCC_OscConfig+0x358>
 8001a76:	4b60      	ldr	r3, [pc, #384]	; (8001bf8 <HAL_RCC_OscConfig+0x4b8>)
 8001a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a7c:	4a5e      	ldr	r2, [pc, #376]	; (8001bf8 <HAL_RCC_OscConfig+0x4b8>)
 8001a7e:	f043 0304 	orr.w	r3, r3, #4
 8001a82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a86:	4b5c      	ldr	r3, [pc, #368]	; (8001bf8 <HAL_RCC_OscConfig+0x4b8>)
 8001a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a8c:	4a5a      	ldr	r2, [pc, #360]	; (8001bf8 <HAL_RCC_OscConfig+0x4b8>)
 8001a8e:	f043 0301 	orr.w	r3, r3, #1
 8001a92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a96:	e00f      	b.n	8001ab8 <HAL_RCC_OscConfig+0x378>
 8001a98:	4b57      	ldr	r3, [pc, #348]	; (8001bf8 <HAL_RCC_OscConfig+0x4b8>)
 8001a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a9e:	4a56      	ldr	r2, [pc, #344]	; (8001bf8 <HAL_RCC_OscConfig+0x4b8>)
 8001aa0:	f023 0301 	bic.w	r3, r3, #1
 8001aa4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001aa8:	4b53      	ldr	r3, [pc, #332]	; (8001bf8 <HAL_RCC_OscConfig+0x4b8>)
 8001aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aae:	4a52      	ldr	r2, [pc, #328]	; (8001bf8 <HAL_RCC_OscConfig+0x4b8>)
 8001ab0:	f023 0304 	bic.w	r3, r3, #4
 8001ab4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d016      	beq.n	8001aee <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ac0:	f7ff f922 	bl	8000d08 <HAL_GetTick>
 8001ac4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ac6:	e00a      	b.n	8001ade <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ac8:	f7ff f91e 	bl	8000d08 <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e138      	b.n	8001d50 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ade:	4b46      	ldr	r3, [pc, #280]	; (8001bf8 <HAL_RCC_OscConfig+0x4b8>)
 8001ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ae4:	f003 0302 	and.w	r3, r3, #2
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d0ed      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x388>
 8001aec:	e015      	b.n	8001b1a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aee:	f7ff f90b 	bl	8000d08 <HAL_GetTick>
 8001af2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001af4:	e00a      	b.n	8001b0c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001af6:	f7ff f907 	bl	8000d08 <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d901      	bls.n	8001b0c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e121      	b.n	8001d50 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b0c:	4b3a      	ldr	r3, [pc, #232]	; (8001bf8 <HAL_RCC_OscConfig+0x4b8>)
 8001b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d1ed      	bne.n	8001af6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b1a:	7ffb      	ldrb	r3, [r7, #31]
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d105      	bne.n	8001b2c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b20:	4b35      	ldr	r3, [pc, #212]	; (8001bf8 <HAL_RCC_OscConfig+0x4b8>)
 8001b22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b24:	4a34      	ldr	r2, [pc, #208]	; (8001bf8 <HAL_RCC_OscConfig+0x4b8>)
 8001b26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b2a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0320 	and.w	r3, r3, #32
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d03c      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	699b      	ldr	r3, [r3, #24]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d01c      	beq.n	8001b7a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001b40:	4b2d      	ldr	r3, [pc, #180]	; (8001bf8 <HAL_RCC_OscConfig+0x4b8>)
 8001b42:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b46:	4a2c      	ldr	r2, [pc, #176]	; (8001bf8 <HAL_RCC_OscConfig+0x4b8>)
 8001b48:	f043 0301 	orr.w	r3, r3, #1
 8001b4c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b50:	f7ff f8da 	bl	8000d08 <HAL_GetTick>
 8001b54:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b56:	e008      	b.n	8001b6a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b58:	f7ff f8d6 	bl	8000d08 <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e0f2      	b.n	8001d50 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b6a:	4b23      	ldr	r3, [pc, #140]	; (8001bf8 <HAL_RCC_OscConfig+0x4b8>)
 8001b6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b70:	f003 0302 	and.w	r3, r3, #2
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d0ef      	beq.n	8001b58 <HAL_RCC_OscConfig+0x418>
 8001b78:	e01b      	b.n	8001bb2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b7a:	4b1f      	ldr	r3, [pc, #124]	; (8001bf8 <HAL_RCC_OscConfig+0x4b8>)
 8001b7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b80:	4a1d      	ldr	r2, [pc, #116]	; (8001bf8 <HAL_RCC_OscConfig+0x4b8>)
 8001b82:	f023 0301 	bic.w	r3, r3, #1
 8001b86:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b8a:	f7ff f8bd 	bl	8000d08 <HAL_GetTick>
 8001b8e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b90:	e008      	b.n	8001ba4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b92:	f7ff f8b9 	bl	8000d08 <HAL_GetTick>
 8001b96:	4602      	mov	r2, r0
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d901      	bls.n	8001ba4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e0d5      	b.n	8001d50 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ba4:	4b14      	ldr	r3, [pc, #80]	; (8001bf8 <HAL_RCC_OscConfig+0x4b8>)
 8001ba6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d1ef      	bne.n	8001b92 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	69db      	ldr	r3, [r3, #28]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	f000 80c9 	beq.w	8001d4e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bbc:	4b0e      	ldr	r3, [pc, #56]	; (8001bf8 <HAL_RCC_OscConfig+0x4b8>)
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f003 030c 	and.w	r3, r3, #12
 8001bc4:	2b0c      	cmp	r3, #12
 8001bc6:	f000 8083 	beq.w	8001cd0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	69db      	ldr	r3, [r3, #28]
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d15e      	bne.n	8001c90 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bd2:	4b09      	ldr	r3, [pc, #36]	; (8001bf8 <HAL_RCC_OscConfig+0x4b8>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a08      	ldr	r2, [pc, #32]	; (8001bf8 <HAL_RCC_OscConfig+0x4b8>)
 8001bd8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bde:	f7ff f893 	bl	8000d08 <HAL_GetTick>
 8001be2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001be4:	e00c      	b.n	8001c00 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001be6:	f7ff f88f 	bl	8000d08 <HAL_GetTick>
 8001bea:	4602      	mov	r2, r0
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d905      	bls.n	8001c00 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e0ab      	b.n	8001d50 <HAL_RCC_OscConfig+0x610>
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c00:	4b55      	ldr	r3, [pc, #340]	; (8001d58 <HAL_RCC_OscConfig+0x618>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d1ec      	bne.n	8001be6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c0c:	4b52      	ldr	r3, [pc, #328]	; (8001d58 <HAL_RCC_OscConfig+0x618>)
 8001c0e:	68da      	ldr	r2, [r3, #12]
 8001c10:	4b52      	ldr	r3, [pc, #328]	; (8001d5c <HAL_RCC_OscConfig+0x61c>)
 8001c12:	4013      	ands	r3, r2
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	6a11      	ldr	r1, [r2, #32]
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c1c:	3a01      	subs	r2, #1
 8001c1e:	0112      	lsls	r2, r2, #4
 8001c20:	4311      	orrs	r1, r2
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001c26:	0212      	lsls	r2, r2, #8
 8001c28:	4311      	orrs	r1, r2
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001c2e:	0852      	lsrs	r2, r2, #1
 8001c30:	3a01      	subs	r2, #1
 8001c32:	0552      	lsls	r2, r2, #21
 8001c34:	4311      	orrs	r1, r2
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c3a:	0852      	lsrs	r2, r2, #1
 8001c3c:	3a01      	subs	r2, #1
 8001c3e:	0652      	lsls	r2, r2, #25
 8001c40:	4311      	orrs	r1, r2
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001c46:	06d2      	lsls	r2, r2, #27
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	4943      	ldr	r1, [pc, #268]	; (8001d58 <HAL_RCC_OscConfig+0x618>)
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c50:	4b41      	ldr	r3, [pc, #260]	; (8001d58 <HAL_RCC_OscConfig+0x618>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a40      	ldr	r2, [pc, #256]	; (8001d58 <HAL_RCC_OscConfig+0x618>)
 8001c56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c5a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c5c:	4b3e      	ldr	r3, [pc, #248]	; (8001d58 <HAL_RCC_OscConfig+0x618>)
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	4a3d      	ldr	r2, [pc, #244]	; (8001d58 <HAL_RCC_OscConfig+0x618>)
 8001c62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c66:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c68:	f7ff f84e 	bl	8000d08 <HAL_GetTick>
 8001c6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c6e:	e008      	b.n	8001c82 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c70:	f7ff f84a 	bl	8000d08 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e066      	b.n	8001d50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c82:	4b35      	ldr	r3, [pc, #212]	; (8001d58 <HAL_RCC_OscConfig+0x618>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d0f0      	beq.n	8001c70 <HAL_RCC_OscConfig+0x530>
 8001c8e:	e05e      	b.n	8001d4e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c90:	4b31      	ldr	r3, [pc, #196]	; (8001d58 <HAL_RCC_OscConfig+0x618>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a30      	ldr	r2, [pc, #192]	; (8001d58 <HAL_RCC_OscConfig+0x618>)
 8001c96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c9c:	f7ff f834 	bl	8000d08 <HAL_GetTick>
 8001ca0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ca2:	e008      	b.n	8001cb6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ca4:	f7ff f830 	bl	8000d08 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e04c      	b.n	8001d50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cb6:	4b28      	ldr	r3, [pc, #160]	; (8001d58 <HAL_RCC_OscConfig+0x618>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d1f0      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001cc2:	4b25      	ldr	r3, [pc, #148]	; (8001d58 <HAL_RCC_OscConfig+0x618>)
 8001cc4:	68da      	ldr	r2, [r3, #12]
 8001cc6:	4924      	ldr	r1, [pc, #144]	; (8001d58 <HAL_RCC_OscConfig+0x618>)
 8001cc8:	4b25      	ldr	r3, [pc, #148]	; (8001d60 <HAL_RCC_OscConfig+0x620>)
 8001cca:	4013      	ands	r3, r2
 8001ccc:	60cb      	str	r3, [r1, #12]
 8001cce:	e03e      	b.n	8001d4e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	69db      	ldr	r3, [r3, #28]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d101      	bne.n	8001cdc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e039      	b.n	8001d50 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001cdc:	4b1e      	ldr	r3, [pc, #120]	; (8001d58 <HAL_RCC_OscConfig+0x618>)
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	f003 0203 	and.w	r2, r3, #3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a1b      	ldr	r3, [r3, #32]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d12c      	bne.n	8001d4a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d123      	bne.n	8001d4a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d0c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d11b      	bne.n	8001d4a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d1c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d113      	bne.n	8001d4a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2c:	085b      	lsrs	r3, r3, #1
 8001d2e:	3b01      	subs	r3, #1
 8001d30:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d109      	bne.n	8001d4a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d40:	085b      	lsrs	r3, r3, #1
 8001d42:	3b01      	subs	r3, #1
 8001d44:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d001      	beq.n	8001d4e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e000      	b.n	8001d50 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001d4e:	2300      	movs	r3, #0
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3720      	adds	r7, #32
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	019f800c 	.word	0x019f800c
 8001d60:	feeefffc 	.word	0xfeeefffc

08001d64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b086      	sub	sp, #24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d101      	bne.n	8001d7c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e11e      	b.n	8001fba <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d7c:	4b91      	ldr	r3, [pc, #580]	; (8001fc4 <HAL_RCC_ClockConfig+0x260>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 030f 	and.w	r3, r3, #15
 8001d84:	683a      	ldr	r2, [r7, #0]
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d910      	bls.n	8001dac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d8a:	4b8e      	ldr	r3, [pc, #568]	; (8001fc4 <HAL_RCC_ClockConfig+0x260>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f023 020f 	bic.w	r2, r3, #15
 8001d92:	498c      	ldr	r1, [pc, #560]	; (8001fc4 <HAL_RCC_ClockConfig+0x260>)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d9a:	4b8a      	ldr	r3, [pc, #552]	; (8001fc4 <HAL_RCC_ClockConfig+0x260>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 030f 	and.w	r3, r3, #15
 8001da2:	683a      	ldr	r2, [r7, #0]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d001      	beq.n	8001dac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e106      	b.n	8001fba <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0301 	and.w	r3, r3, #1
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d073      	beq.n	8001ea0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	2b03      	cmp	r3, #3
 8001dbe:	d129      	bne.n	8001e14 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dc0:	4b81      	ldr	r3, [pc, #516]	; (8001fc8 <HAL_RCC_ClockConfig+0x264>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d101      	bne.n	8001dd0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e0f4      	b.n	8001fba <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001dd0:	f000 f99e 	bl	8002110 <RCC_GetSysClockFreqFromPLLSource>
 8001dd4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	4a7c      	ldr	r2, [pc, #496]	; (8001fcc <HAL_RCC_ClockConfig+0x268>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d93f      	bls.n	8001e5e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001dde:	4b7a      	ldr	r3, [pc, #488]	; (8001fc8 <HAL_RCC_ClockConfig+0x264>)
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d009      	beq.n	8001dfe <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d033      	beq.n	8001e5e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d12f      	bne.n	8001e5e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001dfe:	4b72      	ldr	r3, [pc, #456]	; (8001fc8 <HAL_RCC_ClockConfig+0x264>)
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e06:	4a70      	ldr	r2, [pc, #448]	; (8001fc8 <HAL_RCC_ClockConfig+0x264>)
 8001e08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e0c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001e0e:	2380      	movs	r3, #128	; 0x80
 8001e10:	617b      	str	r3, [r7, #20]
 8001e12:	e024      	b.n	8001e5e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d107      	bne.n	8001e2c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e1c:	4b6a      	ldr	r3, [pc, #424]	; (8001fc8 <HAL_RCC_ClockConfig+0x264>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d109      	bne.n	8001e3c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e0c6      	b.n	8001fba <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e2c:	4b66      	ldr	r3, [pc, #408]	; (8001fc8 <HAL_RCC_ClockConfig+0x264>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d101      	bne.n	8001e3c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e0be      	b.n	8001fba <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001e3c:	f000 f8ce 	bl	8001fdc <HAL_RCC_GetSysClockFreq>
 8001e40:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	4a61      	ldr	r2, [pc, #388]	; (8001fcc <HAL_RCC_ClockConfig+0x268>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d909      	bls.n	8001e5e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001e4a:	4b5f      	ldr	r3, [pc, #380]	; (8001fc8 <HAL_RCC_ClockConfig+0x264>)
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e52:	4a5d      	ldr	r2, [pc, #372]	; (8001fc8 <HAL_RCC_ClockConfig+0x264>)
 8001e54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e58:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001e5a:	2380      	movs	r3, #128	; 0x80
 8001e5c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e5e:	4b5a      	ldr	r3, [pc, #360]	; (8001fc8 <HAL_RCC_ClockConfig+0x264>)
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	f023 0203 	bic.w	r2, r3, #3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	4957      	ldr	r1, [pc, #348]	; (8001fc8 <HAL_RCC_ClockConfig+0x264>)
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e70:	f7fe ff4a 	bl	8000d08 <HAL_GetTick>
 8001e74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e76:	e00a      	b.n	8001e8e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e78:	f7fe ff46 	bl	8000d08 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e095      	b.n	8001fba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e8e:	4b4e      	ldr	r3, [pc, #312]	; (8001fc8 <HAL_RCC_ClockConfig+0x264>)
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	f003 020c 	and.w	r2, r3, #12
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d1eb      	bne.n	8001e78 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0302 	and.w	r3, r3, #2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d023      	beq.n	8001ef4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0304 	and.w	r3, r3, #4
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d005      	beq.n	8001ec4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001eb8:	4b43      	ldr	r3, [pc, #268]	; (8001fc8 <HAL_RCC_ClockConfig+0x264>)
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	4a42      	ldr	r2, [pc, #264]	; (8001fc8 <HAL_RCC_ClockConfig+0x264>)
 8001ebe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ec2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0308 	and.w	r3, r3, #8
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d007      	beq.n	8001ee0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001ed0:	4b3d      	ldr	r3, [pc, #244]	; (8001fc8 <HAL_RCC_ClockConfig+0x264>)
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001ed8:	4a3b      	ldr	r2, [pc, #236]	; (8001fc8 <HAL_RCC_ClockConfig+0x264>)
 8001eda:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ede:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ee0:	4b39      	ldr	r3, [pc, #228]	; (8001fc8 <HAL_RCC_ClockConfig+0x264>)
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	4936      	ldr	r1, [pc, #216]	; (8001fc8 <HAL_RCC_ClockConfig+0x264>)
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	608b      	str	r3, [r1, #8]
 8001ef2:	e008      	b.n	8001f06 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	2b80      	cmp	r3, #128	; 0x80
 8001ef8:	d105      	bne.n	8001f06 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001efa:	4b33      	ldr	r3, [pc, #204]	; (8001fc8 <HAL_RCC_ClockConfig+0x264>)
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	4a32      	ldr	r2, [pc, #200]	; (8001fc8 <HAL_RCC_ClockConfig+0x264>)
 8001f00:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f04:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f06:	4b2f      	ldr	r3, [pc, #188]	; (8001fc4 <HAL_RCC_ClockConfig+0x260>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 030f 	and.w	r3, r3, #15
 8001f0e:	683a      	ldr	r2, [r7, #0]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d21d      	bcs.n	8001f50 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f14:	4b2b      	ldr	r3, [pc, #172]	; (8001fc4 <HAL_RCC_ClockConfig+0x260>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f023 020f 	bic.w	r2, r3, #15
 8001f1c:	4929      	ldr	r1, [pc, #164]	; (8001fc4 <HAL_RCC_ClockConfig+0x260>)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001f24:	f7fe fef0 	bl	8000d08 <HAL_GetTick>
 8001f28:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f2a:	e00a      	b.n	8001f42 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f2c:	f7fe feec 	bl	8000d08 <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e03b      	b.n	8001fba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f42:	4b20      	ldr	r3, [pc, #128]	; (8001fc4 <HAL_RCC_ClockConfig+0x260>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 030f 	and.w	r3, r3, #15
 8001f4a:	683a      	ldr	r2, [r7, #0]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d1ed      	bne.n	8001f2c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0304 	and.w	r3, r3, #4
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d008      	beq.n	8001f6e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f5c:	4b1a      	ldr	r3, [pc, #104]	; (8001fc8 <HAL_RCC_ClockConfig+0x264>)
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	4917      	ldr	r1, [pc, #92]	; (8001fc8 <HAL_RCC_ClockConfig+0x264>)
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0308 	and.w	r3, r3, #8
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d009      	beq.n	8001f8e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f7a:	4b13      	ldr	r3, [pc, #76]	; (8001fc8 <HAL_RCC_ClockConfig+0x264>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	490f      	ldr	r1, [pc, #60]	; (8001fc8 <HAL_RCC_ClockConfig+0x264>)
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f8e:	f000 f825 	bl	8001fdc <HAL_RCC_GetSysClockFreq>
 8001f92:	4602      	mov	r2, r0
 8001f94:	4b0c      	ldr	r3, [pc, #48]	; (8001fc8 <HAL_RCC_ClockConfig+0x264>)
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	091b      	lsrs	r3, r3, #4
 8001f9a:	f003 030f 	and.w	r3, r3, #15
 8001f9e:	490c      	ldr	r1, [pc, #48]	; (8001fd0 <HAL_RCC_ClockConfig+0x26c>)
 8001fa0:	5ccb      	ldrb	r3, [r1, r3]
 8001fa2:	f003 031f 	and.w	r3, r3, #31
 8001fa6:	fa22 f303 	lsr.w	r3, r2, r3
 8001faa:	4a0a      	ldr	r2, [pc, #40]	; (8001fd4 <HAL_RCC_ClockConfig+0x270>)
 8001fac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001fae:	4b0a      	ldr	r3, [pc, #40]	; (8001fd8 <HAL_RCC_ClockConfig+0x274>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7fe fe5c 	bl	8000c70 <HAL_InitTick>
 8001fb8:	4603      	mov	r3, r0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3718      	adds	r7, #24
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40022000 	.word	0x40022000
 8001fc8:	40021000 	.word	0x40021000
 8001fcc:	04c4b400 	.word	0x04c4b400
 8001fd0:	08009190 	.word	0x08009190
 8001fd4:	20000000 	.word	0x20000000
 8001fd8:	20000004 	.word	0x20000004

08001fdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b087      	sub	sp, #28
 8001fe0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001fe2:	4b2c      	ldr	r3, [pc, #176]	; (8002094 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f003 030c 	and.w	r3, r3, #12
 8001fea:	2b04      	cmp	r3, #4
 8001fec:	d102      	bne.n	8001ff4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001fee:	4b2a      	ldr	r3, [pc, #168]	; (8002098 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ff0:	613b      	str	r3, [r7, #16]
 8001ff2:	e047      	b.n	8002084 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001ff4:	4b27      	ldr	r3, [pc, #156]	; (8002094 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	f003 030c 	and.w	r3, r3, #12
 8001ffc:	2b08      	cmp	r3, #8
 8001ffe:	d102      	bne.n	8002006 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002000:	4b26      	ldr	r3, [pc, #152]	; (800209c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002002:	613b      	str	r3, [r7, #16]
 8002004:	e03e      	b.n	8002084 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002006:	4b23      	ldr	r3, [pc, #140]	; (8002094 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f003 030c 	and.w	r3, r3, #12
 800200e:	2b0c      	cmp	r3, #12
 8002010:	d136      	bne.n	8002080 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002012:	4b20      	ldr	r3, [pc, #128]	; (8002094 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	f003 0303 	and.w	r3, r3, #3
 800201a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800201c:	4b1d      	ldr	r3, [pc, #116]	; (8002094 <HAL_RCC_GetSysClockFreq+0xb8>)
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	091b      	lsrs	r3, r3, #4
 8002022:	f003 030f 	and.w	r3, r3, #15
 8002026:	3301      	adds	r3, #1
 8002028:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2b03      	cmp	r3, #3
 800202e:	d10c      	bne.n	800204a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002030:	4a1a      	ldr	r2, [pc, #104]	; (800209c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	fbb2 f3f3 	udiv	r3, r2, r3
 8002038:	4a16      	ldr	r2, [pc, #88]	; (8002094 <HAL_RCC_GetSysClockFreq+0xb8>)
 800203a:	68d2      	ldr	r2, [r2, #12]
 800203c:	0a12      	lsrs	r2, r2, #8
 800203e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002042:	fb02 f303 	mul.w	r3, r2, r3
 8002046:	617b      	str	r3, [r7, #20]
      break;
 8002048:	e00c      	b.n	8002064 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800204a:	4a13      	ldr	r2, [pc, #76]	; (8002098 <HAL_RCC_GetSysClockFreq+0xbc>)
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002052:	4a10      	ldr	r2, [pc, #64]	; (8002094 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002054:	68d2      	ldr	r2, [r2, #12]
 8002056:	0a12      	lsrs	r2, r2, #8
 8002058:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800205c:	fb02 f303 	mul.w	r3, r2, r3
 8002060:	617b      	str	r3, [r7, #20]
      break;
 8002062:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002064:	4b0b      	ldr	r3, [pc, #44]	; (8002094 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	0e5b      	lsrs	r3, r3, #25
 800206a:	f003 0303 	and.w	r3, r3, #3
 800206e:	3301      	adds	r3, #1
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002074:	697a      	ldr	r2, [r7, #20]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	fbb2 f3f3 	udiv	r3, r2, r3
 800207c:	613b      	str	r3, [r7, #16]
 800207e:	e001      	b.n	8002084 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002080:	2300      	movs	r3, #0
 8002082:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002084:	693b      	ldr	r3, [r7, #16]
}
 8002086:	4618      	mov	r0, r3
 8002088:	371c      	adds	r7, #28
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	40021000 	.word	0x40021000
 8002098:	00f42400 	.word	0x00f42400
 800209c:	007a1200 	.word	0x007a1200

080020a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020a4:	4b03      	ldr	r3, [pc, #12]	; (80020b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80020a6:	681b      	ldr	r3, [r3, #0]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	20000000 	.word	0x20000000

080020b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80020bc:	f7ff fff0 	bl	80020a0 <HAL_RCC_GetHCLKFreq>
 80020c0:	4602      	mov	r2, r0
 80020c2:	4b06      	ldr	r3, [pc, #24]	; (80020dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	0a1b      	lsrs	r3, r3, #8
 80020c8:	f003 0307 	and.w	r3, r3, #7
 80020cc:	4904      	ldr	r1, [pc, #16]	; (80020e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80020ce:	5ccb      	ldrb	r3, [r1, r3]
 80020d0:	f003 031f 	and.w	r3, r3, #31
 80020d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020d8:	4618      	mov	r0, r3
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	40021000 	.word	0x40021000
 80020e0:	080091a0 	.word	0x080091a0

080020e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80020e8:	f7ff ffda 	bl	80020a0 <HAL_RCC_GetHCLKFreq>
 80020ec:	4602      	mov	r2, r0
 80020ee:	4b06      	ldr	r3, [pc, #24]	; (8002108 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	0adb      	lsrs	r3, r3, #11
 80020f4:	f003 0307 	and.w	r3, r3, #7
 80020f8:	4904      	ldr	r1, [pc, #16]	; (800210c <HAL_RCC_GetPCLK2Freq+0x28>)
 80020fa:	5ccb      	ldrb	r3, [r1, r3]
 80020fc:	f003 031f 	and.w	r3, r3, #31
 8002100:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002104:	4618      	mov	r0, r3
 8002106:	bd80      	pop	{r7, pc}
 8002108:	40021000 	.word	0x40021000
 800210c:	080091a0 	.word	0x080091a0

08002110 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002110:	b480      	push	{r7}
 8002112:	b087      	sub	sp, #28
 8002114:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002116:	4b1e      	ldr	r3, [pc, #120]	; (8002190 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	f003 0303 	and.w	r3, r3, #3
 800211e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002120:	4b1b      	ldr	r3, [pc, #108]	; (8002190 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	091b      	lsrs	r3, r3, #4
 8002126:	f003 030f 	and.w	r3, r3, #15
 800212a:	3301      	adds	r3, #1
 800212c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	2b03      	cmp	r3, #3
 8002132:	d10c      	bne.n	800214e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002134:	4a17      	ldr	r2, [pc, #92]	; (8002194 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	fbb2 f3f3 	udiv	r3, r2, r3
 800213c:	4a14      	ldr	r2, [pc, #80]	; (8002190 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800213e:	68d2      	ldr	r2, [r2, #12]
 8002140:	0a12      	lsrs	r2, r2, #8
 8002142:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002146:	fb02 f303 	mul.w	r3, r2, r3
 800214a:	617b      	str	r3, [r7, #20]
    break;
 800214c:	e00c      	b.n	8002168 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800214e:	4a12      	ldr	r2, [pc, #72]	; (8002198 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	fbb2 f3f3 	udiv	r3, r2, r3
 8002156:	4a0e      	ldr	r2, [pc, #56]	; (8002190 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002158:	68d2      	ldr	r2, [r2, #12]
 800215a:	0a12      	lsrs	r2, r2, #8
 800215c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002160:	fb02 f303 	mul.w	r3, r2, r3
 8002164:	617b      	str	r3, [r7, #20]
    break;
 8002166:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002168:	4b09      	ldr	r3, [pc, #36]	; (8002190 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	0e5b      	lsrs	r3, r3, #25
 800216e:	f003 0303 	and.w	r3, r3, #3
 8002172:	3301      	adds	r3, #1
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002178:	697a      	ldr	r2, [r7, #20]
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002180:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002182:	687b      	ldr	r3, [r7, #4]
}
 8002184:	4618      	mov	r0, r3
 8002186:	371c      	adds	r7, #28
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr
 8002190:	40021000 	.word	0x40021000
 8002194:	007a1200 	.word	0x007a1200
 8002198:	00f42400 	.word	0x00f42400

0800219c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b086      	sub	sp, #24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80021a4:	2300      	movs	r3, #0
 80021a6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80021a8:	2300      	movs	r3, #0
 80021aa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	f000 8098 	beq.w	80022ea <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021ba:	2300      	movs	r3, #0
 80021bc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021be:	4b43      	ldr	r3, [pc, #268]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d10d      	bne.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021ca:	4b40      	ldr	r3, [pc, #256]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ce:	4a3f      	ldr	r2, [pc, #252]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021d4:	6593      	str	r3, [r2, #88]	; 0x58
 80021d6:	4b3d      	ldr	r3, [pc, #244]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021de:	60bb      	str	r3, [r7, #8]
 80021e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021e2:	2301      	movs	r3, #1
 80021e4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021e6:	4b3a      	ldr	r3, [pc, #232]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a39      	ldr	r2, [pc, #228]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80021ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021f0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80021f2:	f7fe fd89 	bl	8000d08 <HAL_GetTick>
 80021f6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80021f8:	e009      	b.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021fa:	f7fe fd85 	bl	8000d08 <HAL_GetTick>
 80021fe:	4602      	mov	r2, r0
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	2b02      	cmp	r3, #2
 8002206:	d902      	bls.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	74fb      	strb	r3, [r7, #19]
        break;
 800220c:	e005      	b.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800220e:	4b30      	ldr	r3, [pc, #192]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002216:	2b00      	cmp	r3, #0
 8002218:	d0ef      	beq.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800221a:	7cfb      	ldrb	r3, [r7, #19]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d159      	bne.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002220:	4b2a      	ldr	r3, [pc, #168]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002226:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800222a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d01e      	beq.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002236:	697a      	ldr	r2, [r7, #20]
 8002238:	429a      	cmp	r2, r3
 800223a:	d019      	beq.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800223c:	4b23      	ldr	r3, [pc, #140]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800223e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002242:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002246:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002248:	4b20      	ldr	r3, [pc, #128]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800224a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800224e:	4a1f      	ldr	r2, [pc, #124]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002250:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002254:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002258:	4b1c      	ldr	r3, [pc, #112]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800225a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800225e:	4a1b      	ldr	r2, [pc, #108]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002260:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002264:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002268:	4a18      	ldr	r2, [pc, #96]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	2b00      	cmp	r3, #0
 8002278:	d016      	beq.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800227a:	f7fe fd45 	bl	8000d08 <HAL_GetTick>
 800227e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002280:	e00b      	b.n	800229a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002282:	f7fe fd41 	bl	8000d08 <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002290:	4293      	cmp	r3, r2
 8002292:	d902      	bls.n	800229a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	74fb      	strb	r3, [r7, #19]
            break;
 8002298:	e006      	b.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800229a:	4b0c      	ldr	r3, [pc, #48]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800229c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d0ec      	beq.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80022a8:	7cfb      	ldrb	r3, [r7, #19]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d10b      	bne.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022ae:	4b07      	ldr	r3, [pc, #28]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022bc:	4903      	ldr	r1, [pc, #12]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022be:	4313      	orrs	r3, r2
 80022c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80022c4:	e008      	b.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80022c6:	7cfb      	ldrb	r3, [r7, #19]
 80022c8:	74bb      	strb	r3, [r7, #18]
 80022ca:	e005      	b.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80022cc:	40021000 	.word	0x40021000
 80022d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022d4:	7cfb      	ldrb	r3, [r7, #19]
 80022d6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022d8:	7c7b      	ldrb	r3, [r7, #17]
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d105      	bne.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022de:	4ba6      	ldr	r3, [pc, #664]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022e2:	4aa5      	ldr	r2, [pc, #660]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022e8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d00a      	beq.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022f6:	4ba0      	ldr	r3, [pc, #640]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022fc:	f023 0203 	bic.w	r2, r3, #3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	499c      	ldr	r1, [pc, #624]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002306:	4313      	orrs	r3, r2
 8002308:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0302 	and.w	r3, r3, #2
 8002314:	2b00      	cmp	r3, #0
 8002316:	d00a      	beq.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002318:	4b97      	ldr	r3, [pc, #604]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800231a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800231e:	f023 020c 	bic.w	r2, r3, #12
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	4994      	ldr	r1, [pc, #592]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002328:	4313      	orrs	r3, r2
 800232a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0304 	and.w	r3, r3, #4
 8002336:	2b00      	cmp	r3, #0
 8002338:	d00a      	beq.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800233a:	4b8f      	ldr	r3, [pc, #572]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800233c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002340:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	498b      	ldr	r1, [pc, #556]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800234a:	4313      	orrs	r3, r2
 800234c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0308 	and.w	r3, r3, #8
 8002358:	2b00      	cmp	r3, #0
 800235a:	d00a      	beq.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800235c:	4b86      	ldr	r3, [pc, #536]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800235e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002362:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	4983      	ldr	r1, [pc, #524]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800236c:	4313      	orrs	r3, r2
 800236e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0320 	and.w	r3, r3, #32
 800237a:	2b00      	cmp	r3, #0
 800237c:	d00a      	beq.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800237e:	4b7e      	ldr	r3, [pc, #504]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002380:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002384:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	695b      	ldr	r3, [r3, #20]
 800238c:	497a      	ldr	r1, [pc, #488]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800238e:	4313      	orrs	r3, r2
 8002390:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800239c:	2b00      	cmp	r3, #0
 800239e:	d00a      	beq.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023a0:	4b75      	ldr	r3, [pc, #468]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023a6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	699b      	ldr	r3, [r3, #24]
 80023ae:	4972      	ldr	r1, [pc, #456]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d00a      	beq.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80023c2:	4b6d      	ldr	r3, [pc, #436]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023c8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	69db      	ldr	r3, [r3, #28]
 80023d0:	4969      	ldr	r1, [pc, #420]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d00a      	beq.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023e4:	4b64      	ldr	r3, [pc, #400]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a1b      	ldr	r3, [r3, #32]
 80023f2:	4961      	ldr	r1, [pc, #388]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002402:	2b00      	cmp	r3, #0
 8002404:	d00a      	beq.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002406:	4b5c      	ldr	r3, [pc, #368]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800240c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002414:	4958      	ldr	r1, [pc, #352]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002416:	4313      	orrs	r3, r2
 8002418:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002424:	2b00      	cmp	r3, #0
 8002426:	d015      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002428:	4b53      	ldr	r3, [pc, #332]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800242a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800242e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002436:	4950      	ldr	r1, [pc, #320]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002438:	4313      	orrs	r3, r2
 800243a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002442:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002446:	d105      	bne.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002448:	4b4b      	ldr	r3, [pc, #300]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	4a4a      	ldr	r2, [pc, #296]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800244e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002452:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800245c:	2b00      	cmp	r3, #0
 800245e:	d015      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002460:	4b45      	ldr	r3, [pc, #276]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002466:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800246e:	4942      	ldr	r1, [pc, #264]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002470:	4313      	orrs	r3, r2
 8002472:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800247a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800247e:	d105      	bne.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002480:	4b3d      	ldr	r3, [pc, #244]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	4a3c      	ldr	r2, [pc, #240]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002486:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800248a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d015      	beq.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002498:	4b37      	ldr	r3, [pc, #220]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800249a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800249e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a6:	4934      	ldr	r1, [pc, #208]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024a8:	4313      	orrs	r3, r2
 80024aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024b6:	d105      	bne.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024b8:	4b2f      	ldr	r3, [pc, #188]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	4a2e      	ldr	r2, [pc, #184]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024c2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d015      	beq.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80024d0:	4b29      	ldr	r3, [pc, #164]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024de:	4926      	ldr	r1, [pc, #152]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024ee:	d105      	bne.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024f0:	4b21      	ldr	r3, [pc, #132]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	4a20      	ldr	r2, [pc, #128]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024fa:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d015      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002508:	4b1b      	ldr	r3, [pc, #108]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800250a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800250e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002516:	4918      	ldr	r1, [pc, #96]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002518:	4313      	orrs	r3, r2
 800251a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002522:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002526:	d105      	bne.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002528:	4b13      	ldr	r3, [pc, #76]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	4a12      	ldr	r2, [pc, #72]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800252e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002532:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d015      	beq.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002540:	4b0d      	ldr	r3, [pc, #52]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002546:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800254e:	490a      	ldr	r1, [pc, #40]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002550:	4313      	orrs	r3, r2
 8002552:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800255a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800255e:	d105      	bne.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002560:	4b05      	ldr	r3, [pc, #20]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	4a04      	ldr	r2, [pc, #16]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002566:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800256a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800256c:	7cbb      	ldrb	r3, [r7, #18]
}
 800256e:	4618      	mov	r0, r3
 8002570:	3718      	adds	r7, #24
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	40021000 	.word	0x40021000

0800257c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d101      	bne.n	800258e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e049      	b.n	8002622 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002594:	b2db      	uxtb	r3, r3
 8002596:	2b00      	cmp	r3, #0
 8002598:	d106      	bne.n	80025a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f7fe fa58 	bl	8000a58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2202      	movs	r2, #2
 80025ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	3304      	adds	r3, #4
 80025b8:	4619      	mov	r1, r3
 80025ba:	4610      	mov	r0, r2
 80025bc:	f000 f9ba 	bl	8002934 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2201      	movs	r2, #1
 80025dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3708      	adds	r7, #8
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
	...

0800262c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800262c:	b480      	push	{r7}
 800262e:	b085      	sub	sp, #20
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800263a:	b2db      	uxtb	r3, r3
 800263c:	2b01      	cmp	r3, #1
 800263e:	d001      	beq.n	8002644 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e042      	b.n	80026ca <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2202      	movs	r2, #2
 8002648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a21      	ldr	r2, [pc, #132]	; (80026d8 <HAL_TIM_Base_Start+0xac>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d018      	beq.n	8002688 <HAL_TIM_Base_Start+0x5c>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800265e:	d013      	beq.n	8002688 <HAL_TIM_Base_Start+0x5c>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a1d      	ldr	r2, [pc, #116]	; (80026dc <HAL_TIM_Base_Start+0xb0>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d00e      	beq.n	8002688 <HAL_TIM_Base_Start+0x5c>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a1c      	ldr	r2, [pc, #112]	; (80026e0 <HAL_TIM_Base_Start+0xb4>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d009      	beq.n	8002688 <HAL_TIM_Base_Start+0x5c>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a1a      	ldr	r2, [pc, #104]	; (80026e4 <HAL_TIM_Base_Start+0xb8>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d004      	beq.n	8002688 <HAL_TIM_Base_Start+0x5c>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a19      	ldr	r2, [pc, #100]	; (80026e8 <HAL_TIM_Base_Start+0xbc>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d115      	bne.n	80026b4 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	689a      	ldr	r2, [r3, #8]
 800268e:	4b17      	ldr	r3, [pc, #92]	; (80026ec <HAL_TIM_Base_Start+0xc0>)
 8002690:	4013      	ands	r3, r2
 8002692:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2b06      	cmp	r3, #6
 8002698:	d015      	beq.n	80026c6 <HAL_TIM_Base_Start+0x9a>
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026a0:	d011      	beq.n	80026c6 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f042 0201 	orr.w	r2, r2, #1
 80026b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026b2:	e008      	b.n	80026c6 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f042 0201 	orr.w	r2, r2, #1
 80026c2:	601a      	str	r2, [r3, #0]
 80026c4:	e000      	b.n	80026c8 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026c6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3714      	adds	r7, #20
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	40012c00 	.word	0x40012c00
 80026dc:	40000400 	.word	0x40000400
 80026e0:	40000800 	.word	0x40000800
 80026e4:	40013400 	.word	0x40013400
 80026e8:	40014000 	.word	0x40014000
 80026ec:	00010007 	.word	0x00010007

080026f0 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6a1a      	ldr	r2, [r3, #32]
 80026fe:	f241 1311 	movw	r3, #4369	; 0x1111
 8002702:	4013      	ands	r3, r2
 8002704:	2b00      	cmp	r3, #0
 8002706:	d10f      	bne.n	8002728 <HAL_TIM_Base_Stop+0x38>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	6a1a      	ldr	r2, [r3, #32]
 800270e:	f244 4344 	movw	r3, #17476	; 0x4444
 8002712:	4013      	ands	r3, r2
 8002714:	2b00      	cmp	r3, #0
 8002716:	d107      	bne.n	8002728 <HAL_TIM_Base_Stop+0x38>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f022 0201 	bic.w	r2, r2, #1
 8002726:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
	...

08002740 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800274a:	2300      	movs	r3, #0
 800274c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002754:	2b01      	cmp	r3, #1
 8002756:	d101      	bne.n	800275c <HAL_TIM_ConfigClockSource+0x1c>
 8002758:	2302      	movs	r3, #2
 800275a:	e0de      	b.n	800291a <HAL_TIM_ConfigClockSource+0x1da>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2202      	movs	r2, #2
 8002768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800277a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800277e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002786:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	68ba      	ldr	r2, [r7, #8]
 800278e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a63      	ldr	r2, [pc, #396]	; (8002924 <HAL_TIM_ConfigClockSource+0x1e4>)
 8002796:	4293      	cmp	r3, r2
 8002798:	f000 80a9 	beq.w	80028ee <HAL_TIM_ConfigClockSource+0x1ae>
 800279c:	4a61      	ldr	r2, [pc, #388]	; (8002924 <HAL_TIM_ConfigClockSource+0x1e4>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	f200 80ae 	bhi.w	8002900 <HAL_TIM_ConfigClockSource+0x1c0>
 80027a4:	4a60      	ldr	r2, [pc, #384]	; (8002928 <HAL_TIM_ConfigClockSource+0x1e8>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	f000 80a1 	beq.w	80028ee <HAL_TIM_ConfigClockSource+0x1ae>
 80027ac:	4a5e      	ldr	r2, [pc, #376]	; (8002928 <HAL_TIM_ConfigClockSource+0x1e8>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	f200 80a6 	bhi.w	8002900 <HAL_TIM_ConfigClockSource+0x1c0>
 80027b4:	4a5d      	ldr	r2, [pc, #372]	; (800292c <HAL_TIM_ConfigClockSource+0x1ec>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	f000 8099 	beq.w	80028ee <HAL_TIM_ConfigClockSource+0x1ae>
 80027bc:	4a5b      	ldr	r2, [pc, #364]	; (800292c <HAL_TIM_ConfigClockSource+0x1ec>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	f200 809e 	bhi.w	8002900 <HAL_TIM_ConfigClockSource+0x1c0>
 80027c4:	4a5a      	ldr	r2, [pc, #360]	; (8002930 <HAL_TIM_ConfigClockSource+0x1f0>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	f000 8091 	beq.w	80028ee <HAL_TIM_ConfigClockSource+0x1ae>
 80027cc:	4a58      	ldr	r2, [pc, #352]	; (8002930 <HAL_TIM_ConfigClockSource+0x1f0>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	f200 8096 	bhi.w	8002900 <HAL_TIM_ConfigClockSource+0x1c0>
 80027d4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80027d8:	f000 8089 	beq.w	80028ee <HAL_TIM_ConfigClockSource+0x1ae>
 80027dc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80027e0:	f200 808e 	bhi.w	8002900 <HAL_TIM_ConfigClockSource+0x1c0>
 80027e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027e8:	d03e      	beq.n	8002868 <HAL_TIM_ConfigClockSource+0x128>
 80027ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027ee:	f200 8087 	bhi.w	8002900 <HAL_TIM_ConfigClockSource+0x1c0>
 80027f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027f6:	f000 8086 	beq.w	8002906 <HAL_TIM_ConfigClockSource+0x1c6>
 80027fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027fe:	d87f      	bhi.n	8002900 <HAL_TIM_ConfigClockSource+0x1c0>
 8002800:	2b70      	cmp	r3, #112	; 0x70
 8002802:	d01a      	beq.n	800283a <HAL_TIM_ConfigClockSource+0xfa>
 8002804:	2b70      	cmp	r3, #112	; 0x70
 8002806:	d87b      	bhi.n	8002900 <HAL_TIM_ConfigClockSource+0x1c0>
 8002808:	2b60      	cmp	r3, #96	; 0x60
 800280a:	d050      	beq.n	80028ae <HAL_TIM_ConfigClockSource+0x16e>
 800280c:	2b60      	cmp	r3, #96	; 0x60
 800280e:	d877      	bhi.n	8002900 <HAL_TIM_ConfigClockSource+0x1c0>
 8002810:	2b50      	cmp	r3, #80	; 0x50
 8002812:	d03c      	beq.n	800288e <HAL_TIM_ConfigClockSource+0x14e>
 8002814:	2b50      	cmp	r3, #80	; 0x50
 8002816:	d873      	bhi.n	8002900 <HAL_TIM_ConfigClockSource+0x1c0>
 8002818:	2b40      	cmp	r3, #64	; 0x40
 800281a:	d058      	beq.n	80028ce <HAL_TIM_ConfigClockSource+0x18e>
 800281c:	2b40      	cmp	r3, #64	; 0x40
 800281e:	d86f      	bhi.n	8002900 <HAL_TIM_ConfigClockSource+0x1c0>
 8002820:	2b30      	cmp	r3, #48	; 0x30
 8002822:	d064      	beq.n	80028ee <HAL_TIM_ConfigClockSource+0x1ae>
 8002824:	2b30      	cmp	r3, #48	; 0x30
 8002826:	d86b      	bhi.n	8002900 <HAL_TIM_ConfigClockSource+0x1c0>
 8002828:	2b20      	cmp	r3, #32
 800282a:	d060      	beq.n	80028ee <HAL_TIM_ConfigClockSource+0x1ae>
 800282c:	2b20      	cmp	r3, #32
 800282e:	d867      	bhi.n	8002900 <HAL_TIM_ConfigClockSource+0x1c0>
 8002830:	2b00      	cmp	r3, #0
 8002832:	d05c      	beq.n	80028ee <HAL_TIM_ConfigClockSource+0x1ae>
 8002834:	2b10      	cmp	r3, #16
 8002836:	d05a      	beq.n	80028ee <HAL_TIM_ConfigClockSource+0x1ae>
 8002838:	e062      	b.n	8002900 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800284a:	f000 f98b 	bl	8002b64 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800285c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	68ba      	ldr	r2, [r7, #8]
 8002864:	609a      	str	r2, [r3, #8]
      break;
 8002866:	e04f      	b.n	8002908 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002878:	f000 f974 	bl	8002b64 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	689a      	ldr	r2, [r3, #8]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800288a:	609a      	str	r2, [r3, #8]
      break;
 800288c:	e03c      	b.n	8002908 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800289a:	461a      	mov	r2, r3
 800289c:	f000 f8e6 	bl	8002a6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2150      	movs	r1, #80	; 0x50
 80028a6:	4618      	mov	r0, r3
 80028a8:	f000 f93f 	bl	8002b2a <TIM_ITRx_SetConfig>
      break;
 80028ac:	e02c      	b.n	8002908 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80028ba:	461a      	mov	r2, r3
 80028bc:	f000 f905 	bl	8002aca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2160      	movs	r1, #96	; 0x60
 80028c6:	4618      	mov	r0, r3
 80028c8:	f000 f92f 	bl	8002b2a <TIM_ITRx_SetConfig>
      break;
 80028cc:	e01c      	b.n	8002908 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028da:	461a      	mov	r2, r3
 80028dc:	f000 f8c6 	bl	8002a6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2140      	movs	r1, #64	; 0x40
 80028e6:	4618      	mov	r0, r3
 80028e8:	f000 f91f 	bl	8002b2a <TIM_ITRx_SetConfig>
      break;
 80028ec:	e00c      	b.n	8002908 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4619      	mov	r1, r3
 80028f8:	4610      	mov	r0, r2
 80028fa:	f000 f916 	bl	8002b2a <TIM_ITRx_SetConfig>
      break;
 80028fe:	e003      	b.n	8002908 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	73fb      	strb	r3, [r7, #15]
      break;
 8002904:	e000      	b.n	8002908 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8002906:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002918:	7bfb      	ldrb	r3, [r7, #15]
}
 800291a:	4618      	mov	r0, r3
 800291c:	3710      	adds	r7, #16
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	00100070 	.word	0x00100070
 8002928:	00100040 	.word	0x00100040
 800292c:	00100030 	.word	0x00100030
 8002930:	00100020 	.word	0x00100020

08002934 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002934:	b480      	push	{r7}
 8002936:	b085      	sub	sp, #20
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	4a42      	ldr	r2, [pc, #264]	; (8002a50 <TIM_Base_SetConfig+0x11c>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d00f      	beq.n	800296c <TIM_Base_SetConfig+0x38>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002952:	d00b      	beq.n	800296c <TIM_Base_SetConfig+0x38>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	4a3f      	ldr	r2, [pc, #252]	; (8002a54 <TIM_Base_SetConfig+0x120>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d007      	beq.n	800296c <TIM_Base_SetConfig+0x38>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	4a3e      	ldr	r2, [pc, #248]	; (8002a58 <TIM_Base_SetConfig+0x124>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d003      	beq.n	800296c <TIM_Base_SetConfig+0x38>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4a3d      	ldr	r2, [pc, #244]	; (8002a5c <TIM_Base_SetConfig+0x128>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d108      	bne.n	800297e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002972:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	68fa      	ldr	r2, [r7, #12]
 800297a:	4313      	orrs	r3, r2
 800297c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a33      	ldr	r2, [pc, #204]	; (8002a50 <TIM_Base_SetConfig+0x11c>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d01b      	beq.n	80029be <TIM_Base_SetConfig+0x8a>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800298c:	d017      	beq.n	80029be <TIM_Base_SetConfig+0x8a>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a30      	ldr	r2, [pc, #192]	; (8002a54 <TIM_Base_SetConfig+0x120>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d013      	beq.n	80029be <TIM_Base_SetConfig+0x8a>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a2f      	ldr	r2, [pc, #188]	; (8002a58 <TIM_Base_SetConfig+0x124>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d00f      	beq.n	80029be <TIM_Base_SetConfig+0x8a>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a2e      	ldr	r2, [pc, #184]	; (8002a5c <TIM_Base_SetConfig+0x128>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d00b      	beq.n	80029be <TIM_Base_SetConfig+0x8a>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a2d      	ldr	r2, [pc, #180]	; (8002a60 <TIM_Base_SetConfig+0x12c>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d007      	beq.n	80029be <TIM_Base_SetConfig+0x8a>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a2c      	ldr	r2, [pc, #176]	; (8002a64 <TIM_Base_SetConfig+0x130>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d003      	beq.n	80029be <TIM_Base_SetConfig+0x8a>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a2b      	ldr	r2, [pc, #172]	; (8002a68 <TIM_Base_SetConfig+0x134>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d108      	bne.n	80029d0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	68fa      	ldr	r2, [r7, #12]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	4313      	orrs	r3, r2
 80029dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	68fa      	ldr	r2, [r7, #12]
 80029e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	689a      	ldr	r2, [r3, #8]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	4a16      	ldr	r2, [pc, #88]	; (8002a50 <TIM_Base_SetConfig+0x11c>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d00f      	beq.n	8002a1c <TIM_Base_SetConfig+0xe8>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	4a17      	ldr	r2, [pc, #92]	; (8002a5c <TIM_Base_SetConfig+0x128>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d00b      	beq.n	8002a1c <TIM_Base_SetConfig+0xe8>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4a16      	ldr	r2, [pc, #88]	; (8002a60 <TIM_Base_SetConfig+0x12c>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d007      	beq.n	8002a1c <TIM_Base_SetConfig+0xe8>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4a15      	ldr	r2, [pc, #84]	; (8002a64 <TIM_Base_SetConfig+0x130>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d003      	beq.n	8002a1c <TIM_Base_SetConfig+0xe8>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4a14      	ldr	r2, [pc, #80]	; (8002a68 <TIM_Base_SetConfig+0x134>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d103      	bne.n	8002a24 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	691a      	ldr	r2, [r3, #16]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	f003 0301 	and.w	r3, r3, #1
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d105      	bne.n	8002a42 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	f023 0201 	bic.w	r2, r3, #1
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	611a      	str	r2, [r3, #16]
  }
}
 8002a42:	bf00      	nop
 8002a44:	3714      	adds	r7, #20
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	40012c00 	.word	0x40012c00
 8002a54:	40000400 	.word	0x40000400
 8002a58:	40000800 	.word	0x40000800
 8002a5c:	40013400 	.word	0x40013400
 8002a60:	40014000 	.word	0x40014000
 8002a64:	40014400 	.word	0x40014400
 8002a68:	40014800 	.word	0x40014800

08002a6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b087      	sub	sp, #28
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6a1b      	ldr	r3, [r3, #32]
 8002a7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6a1b      	ldr	r3, [r3, #32]
 8002a82:	f023 0201 	bic.w	r2, r3, #1
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	011b      	lsls	r3, r3, #4
 8002a9c:	693a      	ldr	r2, [r7, #16]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	f023 030a 	bic.w	r3, r3, #10
 8002aa8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002aaa:	697a      	ldr	r2, [r7, #20]
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	693a      	ldr	r2, [r7, #16]
 8002ab6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	697a      	ldr	r2, [r7, #20]
 8002abc:	621a      	str	r2, [r3, #32]
}
 8002abe:	bf00      	nop
 8002ac0:	371c      	adds	r7, #28
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr

08002aca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002aca:	b480      	push	{r7}
 8002acc:	b087      	sub	sp, #28
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	60f8      	str	r0, [r7, #12]
 8002ad2:	60b9      	str	r1, [r7, #8]
 8002ad4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6a1b      	ldr	r3, [r3, #32]
 8002ada:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6a1b      	ldr	r3, [r3, #32]
 8002ae0:	f023 0210 	bic.w	r2, r3, #16
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	699b      	ldr	r3, [r3, #24]
 8002aec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002af4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	031b      	lsls	r3, r3, #12
 8002afa:	693a      	ldr	r2, [r7, #16]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b06:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	011b      	lsls	r3, r3, #4
 8002b0c:	697a      	ldr	r2, [r7, #20]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	693a      	ldr	r2, [r7, #16]
 8002b16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	697a      	ldr	r2, [r7, #20]
 8002b1c:	621a      	str	r2, [r3, #32]
}
 8002b1e:	bf00      	nop
 8002b20:	371c      	adds	r7, #28
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr

08002b2a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	b085      	sub	sp, #20
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
 8002b32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002b40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b46:	683a      	ldr	r2, [r7, #0]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	f043 0307 	orr.w	r3, r3, #7
 8002b50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	68fa      	ldr	r2, [r7, #12]
 8002b56:	609a      	str	r2, [r3, #8]
}
 8002b58:	bf00      	nop
 8002b5a:	3714      	adds	r7, #20
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b087      	sub	sp, #28
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	607a      	str	r2, [r7, #4]
 8002b70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	021a      	lsls	r2, r3, #8
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	431a      	orrs	r2, r3
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	697a      	ldr	r2, [r7, #20]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	697a      	ldr	r2, [r7, #20]
 8002b96:	609a      	str	r2, [r3, #8]
}
 8002b98:	bf00      	nop
 8002b9a:	371c      	adds	r7, #28
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b085      	sub	sp, #20
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d101      	bne.n	8002bbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002bb8:	2302      	movs	r3, #2
 8002bba:	e065      	b.n	8002c88 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2202      	movs	r2, #2
 8002bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a2c      	ldr	r2, [pc, #176]	; (8002c94 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d004      	beq.n	8002bf0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a2b      	ldr	r2, [pc, #172]	; (8002c98 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d108      	bne.n	8002c02 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002bf6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	68fa      	ldr	r2, [r7, #12]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8002c08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c0c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	68fa      	ldr	r2, [r7, #12]
 8002c1e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a1b      	ldr	r2, [pc, #108]	; (8002c94 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d018      	beq.n	8002c5c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c32:	d013      	beq.n	8002c5c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a18      	ldr	r2, [pc, #96]	; (8002c9c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d00e      	beq.n	8002c5c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a17      	ldr	r2, [pc, #92]	; (8002ca0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d009      	beq.n	8002c5c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a12      	ldr	r2, [pc, #72]	; (8002c98 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d004      	beq.n	8002c5c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a13      	ldr	r2, [pc, #76]	; (8002ca4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d10c      	bne.n	8002c76 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c62:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	68ba      	ldr	r2, [r7, #8]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	68ba      	ldr	r2, [r7, #8]
 8002c74:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3714      	adds	r7, #20
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr
 8002c94:	40012c00 	.word	0x40012c00
 8002c98:	40013400 	.word	0x40013400
 8002c9c:	40000400 	.word	0x40000400
 8002ca0:	40000800 	.word	0x40000800
 8002ca4:	40014000 	.word	0x40014000

08002ca8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d101      	bne.n	8002cba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e042      	b.n	8002d40 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d106      	bne.n	8002cd2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f7fd ff2d 	bl	8000b2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2224      	movs	r2, #36	; 0x24
 8002cd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f022 0201 	bic.w	r2, r2, #1
 8002ce8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d002      	beq.n	8002cf8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 ff08 	bl	8003b08 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f000 fc39 	bl	8003570 <UART_SetConfig>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d101      	bne.n	8002d08 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e01b      	b.n	8002d40 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	685a      	ldr	r2, [r3, #4]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d16:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	689a      	ldr	r2, [r3, #8]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d26:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f042 0201 	orr.w	r2, r2, #1
 8002d36:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f000 ff87 	bl	8003c4c <UART_CheckIdleState>
 8002d3e:	4603      	mov	r3, r0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3708      	adds	r7, #8
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b08a      	sub	sp, #40	; 0x28
 8002d4c:	af02      	add	r7, sp, #8
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	603b      	str	r3, [r7, #0]
 8002d54:	4613      	mov	r3, r2
 8002d56:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d5e:	2b20      	cmp	r3, #32
 8002d60:	d17b      	bne.n	8002e5a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d002      	beq.n	8002d6e <HAL_UART_Transmit+0x26>
 8002d68:	88fb      	ldrh	r3, [r7, #6]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e074      	b.n	8002e5c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2221      	movs	r2, #33	; 0x21
 8002d7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d82:	f7fd ffc1 	bl	8000d08 <HAL_GetTick>
 8002d86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	88fa      	ldrh	r2, [r7, #6]
 8002d8c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	88fa      	ldrh	r2, [r7, #6]
 8002d94:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002da0:	d108      	bne.n	8002db4 <HAL_UART_Transmit+0x6c>
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d104      	bne.n	8002db4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002daa:	2300      	movs	r3, #0
 8002dac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	61bb      	str	r3, [r7, #24]
 8002db2:	e003      	b.n	8002dbc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002db8:	2300      	movs	r3, #0
 8002dba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002dbc:	e030      	b.n	8002e20 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	9300      	str	r3, [sp, #0]
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	2180      	movs	r1, #128	; 0x80
 8002dc8:	68f8      	ldr	r0, [r7, #12]
 8002dca:	f000 ffe9 	bl	8003da0 <UART_WaitOnFlagUntilTimeout>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d005      	beq.n	8002de0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2220      	movs	r2, #32
 8002dd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e03d      	b.n	8002e5c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d10b      	bne.n	8002dfe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	881b      	ldrh	r3, [r3, #0]
 8002dea:	461a      	mov	r2, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002df4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	3302      	adds	r3, #2
 8002dfa:	61bb      	str	r3, [r7, #24]
 8002dfc:	e007      	b.n	8002e0e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	781a      	ldrb	r2, [r3, #0]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	3b01      	subs	r3, #1
 8002e18:	b29a      	uxth	r2, r3
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d1c8      	bne.n	8002dbe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	9300      	str	r3, [sp, #0]
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	2200      	movs	r2, #0
 8002e34:	2140      	movs	r1, #64	; 0x40
 8002e36:	68f8      	ldr	r0, [r7, #12]
 8002e38:	f000 ffb2 	bl	8003da0 <UART_WaitOnFlagUntilTimeout>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d005      	beq.n	8002e4e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2220      	movs	r2, #32
 8002e46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e006      	b.n	8002e5c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2220      	movs	r2, #32
 8002e52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8002e56:	2300      	movs	r3, #0
 8002e58:	e000      	b.n	8002e5c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8002e5a:	2302      	movs	r3, #2
  }
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3720      	adds	r7, #32
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b08a      	sub	sp, #40	; 0x28
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	4613      	mov	r3, r2
 8002e70:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e78:	2b20      	cmp	r3, #32
 8002e7a:	d137      	bne.n	8002eec <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d002      	beq.n	8002e88 <HAL_UART_Receive_IT+0x24>
 8002e82:	88fb      	ldrh	r3, [r7, #6]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d101      	bne.n	8002e8c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e030      	b.n	8002eee <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a18      	ldr	r2, [pc, #96]	; (8002ef8 <HAL_UART_Receive_IT+0x94>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d01f      	beq.n	8002edc <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d018      	beq.n	8002edc <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	e853 3f00 	ldrex	r3, [r3]
 8002eb6:	613b      	str	r3, [r7, #16]
   return(result);
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ebe:	627b      	str	r3, [r7, #36]	; 0x24
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec8:	623b      	str	r3, [r7, #32]
 8002eca:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ecc:	69f9      	ldr	r1, [r7, #28]
 8002ece:	6a3a      	ldr	r2, [r7, #32]
 8002ed0:	e841 2300 	strex	r3, r2, [r1]
 8002ed4:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d1e6      	bne.n	8002eaa <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002edc:	88fb      	ldrh	r3, [r7, #6]
 8002ede:	461a      	mov	r2, r3
 8002ee0:	68b9      	ldr	r1, [r7, #8]
 8002ee2:	68f8      	ldr	r0, [r7, #12]
 8002ee4:	f000 ffca 	bl	8003e7c <UART_Start_Receive_IT>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	e000      	b.n	8002eee <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002eec:	2302      	movs	r3, #2
  }
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3728      	adds	r7, #40	; 0x28
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	40008000 	.word	0x40008000

08002efc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b0ba      	sub	sp, #232	; 0xe8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	69db      	ldr	r3, [r3, #28]
 8002f0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002f22:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002f26:	f640 030f 	movw	r3, #2063	; 0x80f
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002f30:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d11b      	bne.n	8002f70 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002f38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f3c:	f003 0320 	and.w	r3, r3, #32
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d015      	beq.n	8002f70 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002f44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f48:	f003 0320 	and.w	r3, r3, #32
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d105      	bne.n	8002f5c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002f50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d009      	beq.n	8002f70 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	f000 82e3 	beq.w	800352c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	4798      	blx	r3
      }
      return;
 8002f6e:	e2dd      	b.n	800352c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002f70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	f000 8123 	beq.w	80031c0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002f7a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002f7e:	4b8d      	ldr	r3, [pc, #564]	; (80031b4 <HAL_UART_IRQHandler+0x2b8>)
 8002f80:	4013      	ands	r3, r2
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d106      	bne.n	8002f94 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002f86:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002f8a:	4b8b      	ldr	r3, [pc, #556]	; (80031b8 <HAL_UART_IRQHandler+0x2bc>)
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	f000 8116 	beq.w	80031c0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002f94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f98:	f003 0301 	and.w	r3, r3, #1
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d011      	beq.n	8002fc4 <HAL_UART_IRQHandler+0xc8>
 8002fa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d00b      	beq.n	8002fc4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fba:	f043 0201 	orr.w	r2, r3, #1
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002fc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fc8:	f003 0302 	and.w	r3, r3, #2
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d011      	beq.n	8002ff4 <HAL_UART_IRQHandler+0xf8>
 8002fd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fd4:	f003 0301 	and.w	r3, r3, #1
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d00b      	beq.n	8002ff4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2202      	movs	r2, #2
 8002fe2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fea:	f043 0204 	orr.w	r2, r3, #4
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ff4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ff8:	f003 0304 	and.w	r3, r3, #4
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d011      	beq.n	8003024 <HAL_UART_IRQHandler+0x128>
 8003000:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003004:	f003 0301 	and.w	r3, r3, #1
 8003008:	2b00      	cmp	r3, #0
 800300a:	d00b      	beq.n	8003024 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2204      	movs	r2, #4
 8003012:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800301a:	f043 0202 	orr.w	r2, r3, #2
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003024:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003028:	f003 0308 	and.w	r3, r3, #8
 800302c:	2b00      	cmp	r3, #0
 800302e:	d017      	beq.n	8003060 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003030:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003034:	f003 0320 	and.w	r3, r3, #32
 8003038:	2b00      	cmp	r3, #0
 800303a:	d105      	bne.n	8003048 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800303c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003040:	4b5c      	ldr	r3, [pc, #368]	; (80031b4 <HAL_UART_IRQHandler+0x2b8>)
 8003042:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003044:	2b00      	cmp	r3, #0
 8003046:	d00b      	beq.n	8003060 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2208      	movs	r2, #8
 800304e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003056:	f043 0208 	orr.w	r2, r3, #8
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003060:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003064:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003068:	2b00      	cmp	r3, #0
 800306a:	d012      	beq.n	8003092 <HAL_UART_IRQHandler+0x196>
 800306c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003070:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d00c      	beq.n	8003092 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003080:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003088:	f043 0220 	orr.w	r2, r3, #32
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003098:	2b00      	cmp	r3, #0
 800309a:	f000 8249 	beq.w	8003530 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800309e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030a2:	f003 0320 	and.w	r3, r3, #32
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d013      	beq.n	80030d2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80030aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030ae:	f003 0320 	and.w	r3, r3, #32
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d105      	bne.n	80030c2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80030b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d007      	beq.n	80030d2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d003      	beq.n	80030d2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030e6:	2b40      	cmp	r3, #64	; 0x40
 80030e8:	d005      	beq.n	80030f6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80030ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80030ee:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d054      	beq.n	80031a0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 ffe2 	bl	80040c0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003106:	2b40      	cmp	r3, #64	; 0x40
 8003108:	d146      	bne.n	8003198 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	3308      	adds	r3, #8
 8003110:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003114:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003118:	e853 3f00 	ldrex	r3, [r3]
 800311c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003120:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003124:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003128:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	3308      	adds	r3, #8
 8003132:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003136:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800313a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800313e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003142:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003146:	e841 2300 	strex	r3, r2, [r1]
 800314a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800314e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d1d9      	bne.n	800310a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800315c:	2b00      	cmp	r3, #0
 800315e:	d017      	beq.n	8003190 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003166:	4a15      	ldr	r2, [pc, #84]	; (80031bc <HAL_UART_IRQHandler+0x2c0>)
 8003168:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003170:	4618      	mov	r0, r3
 8003172:	f7fe f830 	bl	80011d6 <HAL_DMA_Abort_IT>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d019      	beq.n	80031b0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800318a:	4610      	mov	r0, r2
 800318c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800318e:	e00f      	b.n	80031b0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f000 f9d7 	bl	8003544 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003196:	e00b      	b.n	80031b0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f000 f9d3 	bl	8003544 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800319e:	e007      	b.n	80031b0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f000 f9cf 	bl	8003544 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80031ae:	e1bf      	b.n	8003530 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031b0:	bf00      	nop
    return;
 80031b2:	e1bd      	b.n	8003530 <HAL_UART_IRQHandler+0x634>
 80031b4:	10000001 	.word	0x10000001
 80031b8:	04000120 	.word	0x04000120
 80031bc:	0800418d 	.word	0x0800418d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	f040 8153 	bne.w	8003470 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80031ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031ce:	f003 0310 	and.w	r3, r3, #16
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	f000 814c 	beq.w	8003470 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80031d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031dc:	f003 0310 	and.w	r3, r3, #16
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	f000 8145 	beq.w	8003470 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2210      	movs	r2, #16
 80031ec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031f8:	2b40      	cmp	r3, #64	; 0x40
 80031fa:	f040 80bb 	bne.w	8003374 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800320c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003210:	2b00      	cmp	r3, #0
 8003212:	f000 818f 	beq.w	8003534 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800321c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003220:	429a      	cmp	r2, r3
 8003222:	f080 8187 	bcs.w	8003534 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800322c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0320 	and.w	r3, r3, #32
 800323e:	2b00      	cmp	r3, #0
 8003240:	f040 8087 	bne.w	8003352 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800324c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003250:	e853 3f00 	ldrex	r3, [r3]
 8003254:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003258:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800325c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003260:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	461a      	mov	r2, r3
 800326a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800326e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003272:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003276:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800327a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800327e:	e841 2300 	strex	r3, r2, [r1]
 8003282:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003286:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800328a:	2b00      	cmp	r3, #0
 800328c:	d1da      	bne.n	8003244 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	3308      	adds	r3, #8
 8003294:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003296:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003298:	e853 3f00 	ldrex	r3, [r3]
 800329c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800329e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032a0:	f023 0301 	bic.w	r3, r3, #1
 80032a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	3308      	adds	r3, #8
 80032ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80032b2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80032b6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032b8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80032ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80032be:	e841 2300 	strex	r3, r2, [r1]
 80032c2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80032c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d1e1      	bne.n	800328e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	3308      	adds	r3, #8
 80032d0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032d4:	e853 3f00 	ldrex	r3, [r3]
 80032d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80032da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	3308      	adds	r3, #8
 80032ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80032ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 80032f0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032f2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80032f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80032f6:	e841 2300 	strex	r3, r2, [r1]
 80032fa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80032fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d1e3      	bne.n	80032ca <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2220      	movs	r2, #32
 8003306:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003316:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003318:	e853 3f00 	ldrex	r3, [r3]
 800331c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800331e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003320:	f023 0310 	bic.w	r3, r3, #16
 8003324:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	461a      	mov	r2, r3
 800332e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003332:	65bb      	str	r3, [r7, #88]	; 0x58
 8003334:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003336:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003338:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800333a:	e841 2300 	strex	r3, r2, [r1]
 800333e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003340:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003342:	2b00      	cmp	r3, #0
 8003344:	d1e4      	bne.n	8003310 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800334c:	4618      	mov	r0, r3
 800334e:	f7fd fee9 	bl	8001124 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2202      	movs	r2, #2
 8003356:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003364:	b29b      	uxth	r3, r3
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	b29b      	uxth	r3, r3
 800336a:	4619      	mov	r1, r3
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f000 f8f3 	bl	8003558 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003372:	e0df      	b.n	8003534 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003380:	b29b      	uxth	r3, r3
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800338e:	b29b      	uxth	r3, r3
 8003390:	2b00      	cmp	r3, #0
 8003392:	f000 80d1 	beq.w	8003538 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8003396:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800339a:	2b00      	cmp	r3, #0
 800339c:	f000 80cc 	beq.w	8003538 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033a8:	e853 3f00 	ldrex	r3, [r3]
 80033ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80033ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80033b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	461a      	mov	r2, r3
 80033be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80033c2:	647b      	str	r3, [r7, #68]	; 0x44
 80033c4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80033c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80033ca:	e841 2300 	strex	r3, r2, [r1]
 80033ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80033d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d1e4      	bne.n	80033a0 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	3308      	adds	r3, #8
 80033dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e0:	e853 3f00 	ldrex	r3, [r3]
 80033e4:	623b      	str	r3, [r7, #32]
   return(result);
 80033e6:	6a3b      	ldr	r3, [r7, #32]
 80033e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033ec:	f023 0301 	bic.w	r3, r3, #1
 80033f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	3308      	adds	r3, #8
 80033fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80033fe:	633a      	str	r2, [r7, #48]	; 0x30
 8003400:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003402:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003404:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003406:	e841 2300 	strex	r3, r2, [r1]
 800340a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800340c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1e1      	bne.n	80033d6 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2220      	movs	r2, #32
 8003416:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	e853 3f00 	ldrex	r3, [r3]
 8003432:	60fb      	str	r3, [r7, #12]
   return(result);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f023 0310 	bic.w	r3, r3, #16
 800343a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	461a      	mov	r2, r3
 8003444:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003448:	61fb      	str	r3, [r7, #28]
 800344a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800344c:	69b9      	ldr	r1, [r7, #24]
 800344e:	69fa      	ldr	r2, [r7, #28]
 8003450:	e841 2300 	strex	r3, r2, [r1]
 8003454:	617b      	str	r3, [r7, #20]
   return(result);
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d1e4      	bne.n	8003426 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2202      	movs	r2, #2
 8003460:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003462:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003466:	4619      	mov	r1, r3
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f000 f875 	bl	8003558 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800346e:	e063      	b.n	8003538 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003470:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003474:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d00e      	beq.n	800349a <HAL_UART_IRQHandler+0x59e>
 800347c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003480:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d008      	beq.n	800349a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003490:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f001 fbd8 	bl	8004c48 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003498:	e051      	b.n	800353e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800349a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800349e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d014      	beq.n	80034d0 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80034a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d105      	bne.n	80034be <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80034b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d008      	beq.n	80034d0 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d03a      	beq.n	800353c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	4798      	blx	r3
    }
    return;
 80034ce:	e035      	b.n	800353c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80034d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d009      	beq.n	80034f0 <HAL_UART_IRQHandler+0x5f4>
 80034dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d003      	beq.n	80034f0 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f000 fe65 	bl	80041b8 <UART_EndTransmit_IT>
    return;
 80034ee:	e026      	b.n	800353e <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80034f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d009      	beq.n	8003510 <HAL_UART_IRQHandler+0x614>
 80034fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003500:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d003      	beq.n	8003510 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f001 fbb1 	bl	8004c70 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800350e:	e016      	b.n	800353e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003510:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003514:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003518:	2b00      	cmp	r3, #0
 800351a:	d010      	beq.n	800353e <HAL_UART_IRQHandler+0x642>
 800351c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003520:	2b00      	cmp	r3, #0
 8003522:	da0c      	bge.n	800353e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f001 fb99 	bl	8004c5c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800352a:	e008      	b.n	800353e <HAL_UART_IRQHandler+0x642>
      return;
 800352c:	bf00      	nop
 800352e:	e006      	b.n	800353e <HAL_UART_IRQHandler+0x642>
    return;
 8003530:	bf00      	nop
 8003532:	e004      	b.n	800353e <HAL_UART_IRQHandler+0x642>
      return;
 8003534:	bf00      	nop
 8003536:	e002      	b.n	800353e <HAL_UART_IRQHandler+0x642>
      return;
 8003538:	bf00      	nop
 800353a:	e000      	b.n	800353e <HAL_UART_IRQHandler+0x642>
    return;
 800353c:	bf00      	nop
  }
}
 800353e:	37e8      	adds	r7, #232	; 0xe8
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800354c:	bf00      	nop
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	460b      	mov	r3, r1
 8003562:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003564:	bf00      	nop
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003570:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003574:	b08c      	sub	sp, #48	; 0x30
 8003576:	af00      	add	r7, sp, #0
 8003578:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800357a:	2300      	movs	r3, #0
 800357c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	689a      	ldr	r2, [r3, #8]
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	691b      	ldr	r3, [r3, #16]
 8003588:	431a      	orrs	r2, r3
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	431a      	orrs	r2, r3
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	69db      	ldr	r3, [r3, #28]
 8003594:	4313      	orrs	r3, r2
 8003596:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	4bab      	ldr	r3, [pc, #684]	; (800384c <UART_SetConfig+0x2dc>)
 80035a0:	4013      	ands	r3, r2
 80035a2:	697a      	ldr	r2, [r7, #20]
 80035a4:	6812      	ldr	r2, [r2, #0]
 80035a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80035a8:	430b      	orrs	r3, r1
 80035aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	68da      	ldr	r2, [r3, #12]
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	430a      	orrs	r2, r1
 80035c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4aa0      	ldr	r2, [pc, #640]	; (8003850 <UART_SetConfig+0x2e0>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d004      	beq.n	80035dc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	6a1b      	ldr	r3, [r3, #32]
 80035d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035d8:	4313      	orrs	r3, r2
 80035da:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80035e6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80035ea:	697a      	ldr	r2, [r7, #20]
 80035ec:	6812      	ldr	r2, [r2, #0]
 80035ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80035f0:	430b      	orrs	r3, r1
 80035f2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035fa:	f023 010f 	bic.w	r1, r3, #15
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	430a      	orrs	r2, r1
 8003608:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a91      	ldr	r2, [pc, #580]	; (8003854 <UART_SetConfig+0x2e4>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d125      	bne.n	8003660 <UART_SetConfig+0xf0>
 8003614:	4b90      	ldr	r3, [pc, #576]	; (8003858 <UART_SetConfig+0x2e8>)
 8003616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800361a:	f003 0303 	and.w	r3, r3, #3
 800361e:	2b03      	cmp	r3, #3
 8003620:	d81a      	bhi.n	8003658 <UART_SetConfig+0xe8>
 8003622:	a201      	add	r2, pc, #4	; (adr r2, 8003628 <UART_SetConfig+0xb8>)
 8003624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003628:	08003639 	.word	0x08003639
 800362c:	08003649 	.word	0x08003649
 8003630:	08003641 	.word	0x08003641
 8003634:	08003651 	.word	0x08003651
 8003638:	2301      	movs	r3, #1
 800363a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800363e:	e0d6      	b.n	80037ee <UART_SetConfig+0x27e>
 8003640:	2302      	movs	r3, #2
 8003642:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003646:	e0d2      	b.n	80037ee <UART_SetConfig+0x27e>
 8003648:	2304      	movs	r3, #4
 800364a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800364e:	e0ce      	b.n	80037ee <UART_SetConfig+0x27e>
 8003650:	2308      	movs	r3, #8
 8003652:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003656:	e0ca      	b.n	80037ee <UART_SetConfig+0x27e>
 8003658:	2310      	movs	r3, #16
 800365a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800365e:	e0c6      	b.n	80037ee <UART_SetConfig+0x27e>
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a7d      	ldr	r2, [pc, #500]	; (800385c <UART_SetConfig+0x2ec>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d138      	bne.n	80036dc <UART_SetConfig+0x16c>
 800366a:	4b7b      	ldr	r3, [pc, #492]	; (8003858 <UART_SetConfig+0x2e8>)
 800366c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003670:	f003 030c 	and.w	r3, r3, #12
 8003674:	2b0c      	cmp	r3, #12
 8003676:	d82d      	bhi.n	80036d4 <UART_SetConfig+0x164>
 8003678:	a201      	add	r2, pc, #4	; (adr r2, 8003680 <UART_SetConfig+0x110>)
 800367a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800367e:	bf00      	nop
 8003680:	080036b5 	.word	0x080036b5
 8003684:	080036d5 	.word	0x080036d5
 8003688:	080036d5 	.word	0x080036d5
 800368c:	080036d5 	.word	0x080036d5
 8003690:	080036c5 	.word	0x080036c5
 8003694:	080036d5 	.word	0x080036d5
 8003698:	080036d5 	.word	0x080036d5
 800369c:	080036d5 	.word	0x080036d5
 80036a0:	080036bd 	.word	0x080036bd
 80036a4:	080036d5 	.word	0x080036d5
 80036a8:	080036d5 	.word	0x080036d5
 80036ac:	080036d5 	.word	0x080036d5
 80036b0:	080036cd 	.word	0x080036cd
 80036b4:	2300      	movs	r3, #0
 80036b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036ba:	e098      	b.n	80037ee <UART_SetConfig+0x27e>
 80036bc:	2302      	movs	r3, #2
 80036be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036c2:	e094      	b.n	80037ee <UART_SetConfig+0x27e>
 80036c4:	2304      	movs	r3, #4
 80036c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036ca:	e090      	b.n	80037ee <UART_SetConfig+0x27e>
 80036cc:	2308      	movs	r3, #8
 80036ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036d2:	e08c      	b.n	80037ee <UART_SetConfig+0x27e>
 80036d4:	2310      	movs	r3, #16
 80036d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036da:	e088      	b.n	80037ee <UART_SetConfig+0x27e>
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a5f      	ldr	r2, [pc, #380]	; (8003860 <UART_SetConfig+0x2f0>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d125      	bne.n	8003732 <UART_SetConfig+0x1c2>
 80036e6:	4b5c      	ldr	r3, [pc, #368]	; (8003858 <UART_SetConfig+0x2e8>)
 80036e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ec:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80036f0:	2b30      	cmp	r3, #48	; 0x30
 80036f2:	d016      	beq.n	8003722 <UART_SetConfig+0x1b2>
 80036f4:	2b30      	cmp	r3, #48	; 0x30
 80036f6:	d818      	bhi.n	800372a <UART_SetConfig+0x1ba>
 80036f8:	2b20      	cmp	r3, #32
 80036fa:	d00a      	beq.n	8003712 <UART_SetConfig+0x1a2>
 80036fc:	2b20      	cmp	r3, #32
 80036fe:	d814      	bhi.n	800372a <UART_SetConfig+0x1ba>
 8003700:	2b00      	cmp	r3, #0
 8003702:	d002      	beq.n	800370a <UART_SetConfig+0x19a>
 8003704:	2b10      	cmp	r3, #16
 8003706:	d008      	beq.n	800371a <UART_SetConfig+0x1aa>
 8003708:	e00f      	b.n	800372a <UART_SetConfig+0x1ba>
 800370a:	2300      	movs	r3, #0
 800370c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003710:	e06d      	b.n	80037ee <UART_SetConfig+0x27e>
 8003712:	2302      	movs	r3, #2
 8003714:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003718:	e069      	b.n	80037ee <UART_SetConfig+0x27e>
 800371a:	2304      	movs	r3, #4
 800371c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003720:	e065      	b.n	80037ee <UART_SetConfig+0x27e>
 8003722:	2308      	movs	r3, #8
 8003724:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003728:	e061      	b.n	80037ee <UART_SetConfig+0x27e>
 800372a:	2310      	movs	r3, #16
 800372c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003730:	e05d      	b.n	80037ee <UART_SetConfig+0x27e>
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a4b      	ldr	r2, [pc, #300]	; (8003864 <UART_SetConfig+0x2f4>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d125      	bne.n	8003788 <UART_SetConfig+0x218>
 800373c:	4b46      	ldr	r3, [pc, #280]	; (8003858 <UART_SetConfig+0x2e8>)
 800373e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003742:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003746:	2bc0      	cmp	r3, #192	; 0xc0
 8003748:	d016      	beq.n	8003778 <UART_SetConfig+0x208>
 800374a:	2bc0      	cmp	r3, #192	; 0xc0
 800374c:	d818      	bhi.n	8003780 <UART_SetConfig+0x210>
 800374e:	2b80      	cmp	r3, #128	; 0x80
 8003750:	d00a      	beq.n	8003768 <UART_SetConfig+0x1f8>
 8003752:	2b80      	cmp	r3, #128	; 0x80
 8003754:	d814      	bhi.n	8003780 <UART_SetConfig+0x210>
 8003756:	2b00      	cmp	r3, #0
 8003758:	d002      	beq.n	8003760 <UART_SetConfig+0x1f0>
 800375a:	2b40      	cmp	r3, #64	; 0x40
 800375c:	d008      	beq.n	8003770 <UART_SetConfig+0x200>
 800375e:	e00f      	b.n	8003780 <UART_SetConfig+0x210>
 8003760:	2300      	movs	r3, #0
 8003762:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003766:	e042      	b.n	80037ee <UART_SetConfig+0x27e>
 8003768:	2302      	movs	r3, #2
 800376a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800376e:	e03e      	b.n	80037ee <UART_SetConfig+0x27e>
 8003770:	2304      	movs	r3, #4
 8003772:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003776:	e03a      	b.n	80037ee <UART_SetConfig+0x27e>
 8003778:	2308      	movs	r3, #8
 800377a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800377e:	e036      	b.n	80037ee <UART_SetConfig+0x27e>
 8003780:	2310      	movs	r3, #16
 8003782:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003786:	e032      	b.n	80037ee <UART_SetConfig+0x27e>
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a30      	ldr	r2, [pc, #192]	; (8003850 <UART_SetConfig+0x2e0>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d12a      	bne.n	80037e8 <UART_SetConfig+0x278>
 8003792:	4b31      	ldr	r3, [pc, #196]	; (8003858 <UART_SetConfig+0x2e8>)
 8003794:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003798:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800379c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80037a0:	d01a      	beq.n	80037d8 <UART_SetConfig+0x268>
 80037a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80037a6:	d81b      	bhi.n	80037e0 <UART_SetConfig+0x270>
 80037a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037ac:	d00c      	beq.n	80037c8 <UART_SetConfig+0x258>
 80037ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037b2:	d815      	bhi.n	80037e0 <UART_SetConfig+0x270>
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d003      	beq.n	80037c0 <UART_SetConfig+0x250>
 80037b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037bc:	d008      	beq.n	80037d0 <UART_SetConfig+0x260>
 80037be:	e00f      	b.n	80037e0 <UART_SetConfig+0x270>
 80037c0:	2300      	movs	r3, #0
 80037c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037c6:	e012      	b.n	80037ee <UART_SetConfig+0x27e>
 80037c8:	2302      	movs	r3, #2
 80037ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037ce:	e00e      	b.n	80037ee <UART_SetConfig+0x27e>
 80037d0:	2304      	movs	r3, #4
 80037d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037d6:	e00a      	b.n	80037ee <UART_SetConfig+0x27e>
 80037d8:	2308      	movs	r3, #8
 80037da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037de:	e006      	b.n	80037ee <UART_SetConfig+0x27e>
 80037e0:	2310      	movs	r3, #16
 80037e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037e6:	e002      	b.n	80037ee <UART_SetConfig+0x27e>
 80037e8:	2310      	movs	r3, #16
 80037ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a17      	ldr	r2, [pc, #92]	; (8003850 <UART_SetConfig+0x2e0>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	f040 80a8 	bne.w	800394a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80037fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80037fe:	2b08      	cmp	r3, #8
 8003800:	d834      	bhi.n	800386c <UART_SetConfig+0x2fc>
 8003802:	a201      	add	r2, pc, #4	; (adr r2, 8003808 <UART_SetConfig+0x298>)
 8003804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003808:	0800382d 	.word	0x0800382d
 800380c:	0800386d 	.word	0x0800386d
 8003810:	08003835 	.word	0x08003835
 8003814:	0800386d 	.word	0x0800386d
 8003818:	0800383b 	.word	0x0800383b
 800381c:	0800386d 	.word	0x0800386d
 8003820:	0800386d 	.word	0x0800386d
 8003824:	0800386d 	.word	0x0800386d
 8003828:	08003843 	.word	0x08003843
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800382c:	f7fe fc44 	bl	80020b8 <HAL_RCC_GetPCLK1Freq>
 8003830:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003832:	e021      	b.n	8003878 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003834:	4b0c      	ldr	r3, [pc, #48]	; (8003868 <UART_SetConfig+0x2f8>)
 8003836:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003838:	e01e      	b.n	8003878 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800383a:	f7fe fbcf 	bl	8001fdc <HAL_RCC_GetSysClockFreq>
 800383e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003840:	e01a      	b.n	8003878 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003842:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003846:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003848:	e016      	b.n	8003878 <UART_SetConfig+0x308>
 800384a:	bf00      	nop
 800384c:	cfff69f3 	.word	0xcfff69f3
 8003850:	40008000 	.word	0x40008000
 8003854:	40013800 	.word	0x40013800
 8003858:	40021000 	.word	0x40021000
 800385c:	40004400 	.word	0x40004400
 8003860:	40004800 	.word	0x40004800
 8003864:	40004c00 	.word	0x40004c00
 8003868:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800386c:	2300      	movs	r3, #0
 800386e:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003876:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387a:	2b00      	cmp	r3, #0
 800387c:	f000 812a 	beq.w	8003ad4 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003884:	4a9e      	ldr	r2, [pc, #632]	; (8003b00 <UART_SetConfig+0x590>)
 8003886:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800388a:	461a      	mov	r2, r3
 800388c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003892:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	685a      	ldr	r2, [r3, #4]
 8003898:	4613      	mov	r3, r2
 800389a:	005b      	lsls	r3, r3, #1
 800389c:	4413      	add	r3, r2
 800389e:	69ba      	ldr	r2, [r7, #24]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d305      	bcc.n	80038b0 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80038aa:	69ba      	ldr	r2, [r7, #24]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d903      	bls.n	80038b8 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80038b6:	e10d      	b.n	8003ad4 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80038b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ba:	2200      	movs	r2, #0
 80038bc:	60bb      	str	r3, [r7, #8]
 80038be:	60fa      	str	r2, [r7, #12]
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c4:	4a8e      	ldr	r2, [pc, #568]	; (8003b00 <UART_SetConfig+0x590>)
 80038c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	2200      	movs	r2, #0
 80038ce:	603b      	str	r3, [r7, #0]
 80038d0:	607a      	str	r2, [r7, #4]
 80038d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80038d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80038da:	f7fc fcf1 	bl	80002c0 <__aeabi_uldivmod>
 80038de:	4602      	mov	r2, r0
 80038e0:	460b      	mov	r3, r1
 80038e2:	4610      	mov	r0, r2
 80038e4:	4619      	mov	r1, r3
 80038e6:	f04f 0200 	mov.w	r2, #0
 80038ea:	f04f 0300 	mov.w	r3, #0
 80038ee:	020b      	lsls	r3, r1, #8
 80038f0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80038f4:	0202      	lsls	r2, r0, #8
 80038f6:	6979      	ldr	r1, [r7, #20]
 80038f8:	6849      	ldr	r1, [r1, #4]
 80038fa:	0849      	lsrs	r1, r1, #1
 80038fc:	2000      	movs	r0, #0
 80038fe:	460c      	mov	r4, r1
 8003900:	4605      	mov	r5, r0
 8003902:	eb12 0804 	adds.w	r8, r2, r4
 8003906:	eb43 0905 	adc.w	r9, r3, r5
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	469a      	mov	sl, r3
 8003912:	4693      	mov	fp, r2
 8003914:	4652      	mov	r2, sl
 8003916:	465b      	mov	r3, fp
 8003918:	4640      	mov	r0, r8
 800391a:	4649      	mov	r1, r9
 800391c:	f7fc fcd0 	bl	80002c0 <__aeabi_uldivmod>
 8003920:	4602      	mov	r2, r0
 8003922:	460b      	mov	r3, r1
 8003924:	4613      	mov	r3, r2
 8003926:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003928:	6a3b      	ldr	r3, [r7, #32]
 800392a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800392e:	d308      	bcc.n	8003942 <UART_SetConfig+0x3d2>
 8003930:	6a3b      	ldr	r3, [r7, #32]
 8003932:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003936:	d204      	bcs.n	8003942 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	6a3a      	ldr	r2, [r7, #32]
 800393e:	60da      	str	r2, [r3, #12]
 8003940:	e0c8      	b.n	8003ad4 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003948:	e0c4      	b.n	8003ad4 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	69db      	ldr	r3, [r3, #28]
 800394e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003952:	d167      	bne.n	8003a24 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8003954:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003958:	2b08      	cmp	r3, #8
 800395a:	d828      	bhi.n	80039ae <UART_SetConfig+0x43e>
 800395c:	a201      	add	r2, pc, #4	; (adr r2, 8003964 <UART_SetConfig+0x3f4>)
 800395e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003962:	bf00      	nop
 8003964:	08003989 	.word	0x08003989
 8003968:	08003991 	.word	0x08003991
 800396c:	08003999 	.word	0x08003999
 8003970:	080039af 	.word	0x080039af
 8003974:	0800399f 	.word	0x0800399f
 8003978:	080039af 	.word	0x080039af
 800397c:	080039af 	.word	0x080039af
 8003980:	080039af 	.word	0x080039af
 8003984:	080039a7 	.word	0x080039a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003988:	f7fe fb96 	bl	80020b8 <HAL_RCC_GetPCLK1Freq>
 800398c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800398e:	e014      	b.n	80039ba <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003990:	f7fe fba8 	bl	80020e4 <HAL_RCC_GetPCLK2Freq>
 8003994:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003996:	e010      	b.n	80039ba <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003998:	4b5a      	ldr	r3, [pc, #360]	; (8003b04 <UART_SetConfig+0x594>)
 800399a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800399c:	e00d      	b.n	80039ba <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800399e:	f7fe fb1d 	bl	8001fdc <HAL_RCC_GetSysClockFreq>
 80039a2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80039a4:	e009      	b.n	80039ba <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80039ac:	e005      	b.n	80039ba <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80039ae:	2300      	movs	r3, #0
 80039b0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80039b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80039ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039bc:	2b00      	cmp	r3, #0
 80039be:	f000 8089 	beq.w	8003ad4 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c6:	4a4e      	ldr	r2, [pc, #312]	; (8003b00 <UART_SetConfig+0x590>)
 80039c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80039cc:	461a      	mov	r2, r3
 80039ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80039d4:	005a      	lsls	r2, r3, #1
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	085b      	lsrs	r3, r3, #1
 80039dc:	441a      	add	r2, r3
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039e8:	6a3b      	ldr	r3, [r7, #32]
 80039ea:	2b0f      	cmp	r3, #15
 80039ec:	d916      	bls.n	8003a1c <UART_SetConfig+0x4ac>
 80039ee:	6a3b      	ldr	r3, [r7, #32]
 80039f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039f4:	d212      	bcs.n	8003a1c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80039f6:	6a3b      	ldr	r3, [r7, #32]
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	f023 030f 	bic.w	r3, r3, #15
 80039fe:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a00:	6a3b      	ldr	r3, [r7, #32]
 8003a02:	085b      	lsrs	r3, r3, #1
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	f003 0307 	and.w	r3, r3, #7
 8003a0a:	b29a      	uxth	r2, r3
 8003a0c:	8bfb      	ldrh	r3, [r7, #30]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	8bfa      	ldrh	r2, [r7, #30]
 8003a18:	60da      	str	r2, [r3, #12]
 8003a1a:	e05b      	b.n	8003ad4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003a22:	e057      	b.n	8003ad4 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a24:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003a28:	2b08      	cmp	r3, #8
 8003a2a:	d828      	bhi.n	8003a7e <UART_SetConfig+0x50e>
 8003a2c:	a201      	add	r2, pc, #4	; (adr r2, 8003a34 <UART_SetConfig+0x4c4>)
 8003a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a32:	bf00      	nop
 8003a34:	08003a59 	.word	0x08003a59
 8003a38:	08003a61 	.word	0x08003a61
 8003a3c:	08003a69 	.word	0x08003a69
 8003a40:	08003a7f 	.word	0x08003a7f
 8003a44:	08003a6f 	.word	0x08003a6f
 8003a48:	08003a7f 	.word	0x08003a7f
 8003a4c:	08003a7f 	.word	0x08003a7f
 8003a50:	08003a7f 	.word	0x08003a7f
 8003a54:	08003a77 	.word	0x08003a77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a58:	f7fe fb2e 	bl	80020b8 <HAL_RCC_GetPCLK1Freq>
 8003a5c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003a5e:	e014      	b.n	8003a8a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a60:	f7fe fb40 	bl	80020e4 <HAL_RCC_GetPCLK2Freq>
 8003a64:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003a66:	e010      	b.n	8003a8a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a68:	4b26      	ldr	r3, [pc, #152]	; (8003b04 <UART_SetConfig+0x594>)
 8003a6a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003a6c:	e00d      	b.n	8003a8a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a6e:	f7fe fab5 	bl	8001fdc <HAL_RCC_GetSysClockFreq>
 8003a72:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003a74:	e009      	b.n	8003a8a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a7a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003a7c:	e005      	b.n	8003a8a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003a88:	bf00      	nop
    }

    if (pclk != 0U)
 8003a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d021      	beq.n	8003ad4 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a94:	4a1a      	ldr	r2, [pc, #104]	; (8003b00 <UART_SetConfig+0x590>)
 8003a96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9e:	fbb3 f2f2 	udiv	r2, r3, r2
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	085b      	lsrs	r3, r3, #1
 8003aa8:	441a      	add	r2, r3
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ab2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ab4:	6a3b      	ldr	r3, [r7, #32]
 8003ab6:	2b0f      	cmp	r3, #15
 8003ab8:	d909      	bls.n	8003ace <UART_SetConfig+0x55e>
 8003aba:	6a3b      	ldr	r3, [r7, #32]
 8003abc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ac0:	d205      	bcs.n	8003ace <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003ac2:	6a3b      	ldr	r3, [r7, #32]
 8003ac4:	b29a      	uxth	r2, r3
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	60da      	str	r2, [r3, #12]
 8003acc:	e002      	b.n	8003ad4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	2200      	movs	r2, #0
 8003aee:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003af0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3730      	adds	r7, #48	; 0x30
 8003af8:	46bd      	mov	sp, r7
 8003afa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003afe:	bf00      	nop
 8003b00:	080091a8 	.word	0x080091a8
 8003b04:	00f42400 	.word	0x00f42400

08003b08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b14:	f003 0308 	and.w	r3, r3, #8
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d00a      	beq.n	8003b32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b36:	f003 0301 	and.w	r3, r3, #1
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d00a      	beq.n	8003b54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	430a      	orrs	r2, r1
 8003b52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b58:	f003 0302 	and.w	r3, r3, #2
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d00a      	beq.n	8003b76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	430a      	orrs	r2, r1
 8003b74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b7a:	f003 0304 	and.w	r3, r3, #4
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00a      	beq.n	8003b98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	430a      	orrs	r2, r1
 8003b96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b9c:	f003 0310 	and.w	r3, r3, #16
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d00a      	beq.n	8003bba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	430a      	orrs	r2, r1
 8003bb8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bbe:	f003 0320 	and.w	r3, r3, #32
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00a      	beq.n	8003bdc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	430a      	orrs	r2, r1
 8003bda:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d01a      	beq.n	8003c1e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	430a      	orrs	r2, r1
 8003bfc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c06:	d10a      	bne.n	8003c1e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	430a      	orrs	r2, r1
 8003c1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d00a      	beq.n	8003c40 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	430a      	orrs	r2, r1
 8003c3e:	605a      	str	r2, [r3, #4]
  }
}
 8003c40:	bf00      	nop
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b098      	sub	sp, #96	; 0x60
 8003c50:	af02      	add	r7, sp, #8
 8003c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c5c:	f7fd f854 	bl	8000d08 <HAL_GetTick>
 8003c60:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0308 	and.w	r3, r3, #8
 8003c6c:	2b08      	cmp	r3, #8
 8003c6e:	d12f      	bne.n	8003cd0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c74:	9300      	str	r3, [sp, #0]
 8003c76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 f88e 	bl	8003da0 <UART_WaitOnFlagUntilTimeout>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d022      	beq.n	8003cd0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c92:	e853 3f00 	ldrex	r3, [r3]
 8003c96:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c9e:	653b      	str	r3, [r7, #80]	; 0x50
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ca8:	647b      	str	r3, [r7, #68]	; 0x44
 8003caa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003cae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003cb0:	e841 2300 	strex	r3, r2, [r1]
 8003cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003cb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d1e6      	bne.n	8003c8a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2220      	movs	r2, #32
 8003cc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	e063      	b.n	8003d98 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0304 	and.w	r3, r3, #4
 8003cda:	2b04      	cmp	r3, #4
 8003cdc:	d149      	bne.n	8003d72 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cde:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ce2:	9300      	str	r3, [sp, #0]
 8003ce4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f000 f857 	bl	8003da0 <UART_WaitOnFlagUntilTimeout>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d03c      	beq.n	8003d72 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d00:	e853 3f00 	ldrex	r3, [r3]
 8003d04:	623b      	str	r3, [r7, #32]
   return(result);
 8003d06:	6a3b      	ldr	r3, [r7, #32]
 8003d08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d0c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	461a      	mov	r2, r3
 8003d14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d16:	633b      	str	r3, [r7, #48]	; 0x30
 8003d18:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d1e:	e841 2300 	strex	r3, r2, [r1]
 8003d22:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d1e6      	bne.n	8003cf8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	3308      	adds	r3, #8
 8003d30:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	e853 3f00 	ldrex	r3, [r3]
 8003d38:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f023 0301 	bic.w	r3, r3, #1
 8003d40:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	3308      	adds	r3, #8
 8003d48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d4a:	61fa      	str	r2, [r7, #28]
 8003d4c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d4e:	69b9      	ldr	r1, [r7, #24]
 8003d50:	69fa      	ldr	r2, [r7, #28]
 8003d52:	e841 2300 	strex	r3, r2, [r1]
 8003d56:	617b      	str	r3, [r7, #20]
   return(result);
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d1e5      	bne.n	8003d2a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2220      	movs	r2, #32
 8003d62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e012      	b.n	8003d98 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2220      	movs	r2, #32
 8003d76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2220      	movs	r2, #32
 8003d7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003d96:	2300      	movs	r3, #0
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3758      	adds	r7, #88	; 0x58
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	60f8      	str	r0, [r7, #12]
 8003da8:	60b9      	str	r1, [r7, #8]
 8003daa:	603b      	str	r3, [r7, #0]
 8003dac:	4613      	mov	r3, r2
 8003dae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003db0:	e04f      	b.n	8003e52 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003db2:	69bb      	ldr	r3, [r7, #24]
 8003db4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003db8:	d04b      	beq.n	8003e52 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dba:	f7fc ffa5 	bl	8000d08 <HAL_GetTick>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	69ba      	ldr	r2, [r7, #24]
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d302      	bcc.n	8003dd0 <UART_WaitOnFlagUntilTimeout+0x30>
 8003dca:	69bb      	ldr	r3, [r7, #24]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d101      	bne.n	8003dd4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e04e      	b.n	8003e72 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0304 	and.w	r3, r3, #4
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d037      	beq.n	8003e52 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	2b80      	cmp	r3, #128	; 0x80
 8003de6:	d034      	beq.n	8003e52 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	2b40      	cmp	r3, #64	; 0x40
 8003dec:	d031      	beq.n	8003e52 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	69db      	ldr	r3, [r3, #28]
 8003df4:	f003 0308 	and.w	r3, r3, #8
 8003df8:	2b08      	cmp	r3, #8
 8003dfa:	d110      	bne.n	8003e1e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2208      	movs	r2, #8
 8003e02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e04:	68f8      	ldr	r0, [r7, #12]
 8003e06:	f000 f95b 	bl	80040c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2208      	movs	r2, #8
 8003e0e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e029      	b.n	8003e72 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	69db      	ldr	r3, [r3, #28]
 8003e24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e2c:	d111      	bne.n	8003e52 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e36:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e38:	68f8      	ldr	r0, [r7, #12]
 8003e3a:	f000 f941 	bl	80040c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2220      	movs	r2, #32
 8003e42:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e00f      	b.n	8003e72 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	69da      	ldr	r2, [r3, #28]
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	68ba      	ldr	r2, [r7, #8]
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	bf0c      	ite	eq
 8003e62:	2301      	moveq	r3, #1
 8003e64:	2300      	movne	r3, #0
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	461a      	mov	r2, r3
 8003e6a:	79fb      	ldrb	r3, [r7, #7]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d0a0      	beq.n	8003db2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3710      	adds	r7, #16
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
	...

08003e7c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b0a3      	sub	sp, #140	; 0x8c
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	60b9      	str	r1, [r7, #8]
 8003e86:	4613      	mov	r3, r2
 8003e88:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	68ba      	ldr	r2, [r7, #8]
 8003e8e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	88fa      	ldrh	r2, [r7, #6]
 8003e94:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	88fa      	ldrh	r2, [r7, #6]
 8003e9c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eae:	d10e      	bne.n	8003ece <UART_Start_Receive_IT+0x52>
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	691b      	ldr	r3, [r3, #16]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d105      	bne.n	8003ec4 <UART_Start_Receive_IT+0x48>
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003ebe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003ec2:	e02d      	b.n	8003f20 <UART_Start_Receive_IT+0xa4>
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	22ff      	movs	r2, #255	; 0xff
 8003ec8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003ecc:	e028      	b.n	8003f20 <UART_Start_Receive_IT+0xa4>
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d10d      	bne.n	8003ef2 <UART_Start_Receive_IT+0x76>
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d104      	bne.n	8003ee8 <UART_Start_Receive_IT+0x6c>
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	22ff      	movs	r2, #255	; 0xff
 8003ee2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003ee6:	e01b      	b.n	8003f20 <UART_Start_Receive_IT+0xa4>
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	227f      	movs	r2, #127	; 0x7f
 8003eec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003ef0:	e016      	b.n	8003f20 <UART_Start_Receive_IT+0xa4>
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003efa:	d10d      	bne.n	8003f18 <UART_Start_Receive_IT+0x9c>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	691b      	ldr	r3, [r3, #16]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d104      	bne.n	8003f0e <UART_Start_Receive_IT+0x92>
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	227f      	movs	r2, #127	; 0x7f
 8003f08:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003f0c:	e008      	b.n	8003f20 <UART_Start_Receive_IT+0xa4>
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	223f      	movs	r2, #63	; 0x3f
 8003f12:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003f16:	e003      	b.n	8003f20 <UART_Start_Receive_IT+0xa4>
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2200      	movs	r2, #0
 8003f24:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2222      	movs	r2, #34	; 0x22
 8003f2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	3308      	adds	r3, #8
 8003f36:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f3a:	e853 3f00 	ldrex	r3, [r3]
 8003f3e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8003f40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f42:	f043 0301 	orr.w	r3, r3, #1
 8003f46:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	3308      	adds	r3, #8
 8003f50:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003f54:	673a      	str	r2, [r7, #112]	; 0x70
 8003f56:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f58:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8003f5a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003f5c:	e841 2300 	strex	r3, r2, [r1]
 8003f60:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8003f62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1e3      	bne.n	8003f30 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f70:	d14f      	bne.n	8004012 <UART_Start_Receive_IT+0x196>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8003f78:	88fa      	ldrh	r2, [r7, #6]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d349      	bcc.n	8004012 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f86:	d107      	bne.n	8003f98 <UART_Start_Receive_IT+0x11c>
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	691b      	ldr	r3, [r3, #16]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d103      	bne.n	8003f98 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	4a47      	ldr	r2, [pc, #284]	; (80040b0 <UART_Start_Receive_IT+0x234>)
 8003f94:	675a      	str	r2, [r3, #116]	; 0x74
 8003f96:	e002      	b.n	8003f9e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	4a46      	ldr	r2, [pc, #280]	; (80040b4 <UART_Start_Receive_IT+0x238>)
 8003f9c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d01a      	beq.n	8003fdc <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fae:	e853 3f00 	ldrex	r3, [r3]
 8003fb2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003fb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003fc8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003fca:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fcc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003fce:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003fd0:	e841 2300 	strex	r3, r2, [r1]
 8003fd4:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003fd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d1e4      	bne.n	8003fa6 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	3308      	adds	r3, #8
 8003fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fe6:	e853 3f00 	ldrex	r3, [r3]
 8003fea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ff2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	3308      	adds	r3, #8
 8003ffa:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003ffc:	64ba      	str	r2, [r7, #72]	; 0x48
 8003ffe:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004000:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004002:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004004:	e841 2300 	strex	r3, r2, [r1]
 8004008:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800400a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800400c:	2b00      	cmp	r3, #0
 800400e:	d1e5      	bne.n	8003fdc <UART_Start_Receive_IT+0x160>
 8004010:	e046      	b.n	80040a0 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800401a:	d107      	bne.n	800402c <UART_Start_Receive_IT+0x1b0>
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d103      	bne.n	800402c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	4a24      	ldr	r2, [pc, #144]	; (80040b8 <UART_Start_Receive_IT+0x23c>)
 8004028:	675a      	str	r2, [r3, #116]	; 0x74
 800402a:	e002      	b.n	8004032 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	4a23      	ldr	r2, [pc, #140]	; (80040bc <UART_Start_Receive_IT+0x240>)
 8004030:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d019      	beq.n	800406e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004042:	e853 3f00 	ldrex	r3, [r3]
 8004046:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800404e:	677b      	str	r3, [r7, #116]	; 0x74
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	461a      	mov	r2, r3
 8004056:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004058:	637b      	str	r3, [r7, #52]	; 0x34
 800405a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800405c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800405e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004060:	e841 2300 	strex	r3, r2, [r1]
 8004064:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004068:	2b00      	cmp	r3, #0
 800406a:	d1e6      	bne.n	800403a <UART_Start_Receive_IT+0x1be>
 800406c:	e018      	b.n	80040a0 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	e853 3f00 	ldrex	r3, [r3]
 800407a:	613b      	str	r3, [r7, #16]
   return(result);
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	f043 0320 	orr.w	r3, r3, #32
 8004082:	67bb      	str	r3, [r7, #120]	; 0x78
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	461a      	mov	r2, r3
 800408a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800408c:	623b      	str	r3, [r7, #32]
 800408e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004090:	69f9      	ldr	r1, [r7, #28]
 8004092:	6a3a      	ldr	r2, [r7, #32]
 8004094:	e841 2300 	strex	r3, r2, [r1]
 8004098:	61bb      	str	r3, [r7, #24]
   return(result);
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d1e6      	bne.n	800406e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	378c      	adds	r7, #140	; 0x8c
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	080048e1 	.word	0x080048e1
 80040b4:	08004581 	.word	0x08004581
 80040b8:	080043c9 	.word	0x080043c9
 80040bc:	08004211 	.word	0x08004211

080040c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b095      	sub	sp, #84	; 0x54
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040d0:	e853 3f00 	ldrex	r3, [r3]
 80040d4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80040d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80040dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	461a      	mov	r2, r3
 80040e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040e6:	643b      	str	r3, [r7, #64]	; 0x40
 80040e8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80040ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80040ee:	e841 2300 	strex	r3, r2, [r1]
 80040f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80040f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d1e6      	bne.n	80040c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	3308      	adds	r3, #8
 8004100:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004102:	6a3b      	ldr	r3, [r7, #32]
 8004104:	e853 3f00 	ldrex	r3, [r3]
 8004108:	61fb      	str	r3, [r7, #28]
   return(result);
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004110:	f023 0301 	bic.w	r3, r3, #1
 8004114:	64bb      	str	r3, [r7, #72]	; 0x48
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	3308      	adds	r3, #8
 800411c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800411e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004120:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004122:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004124:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004126:	e841 2300 	strex	r3, r2, [r1]
 800412a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800412c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412e:	2b00      	cmp	r3, #0
 8004130:	d1e3      	bne.n	80040fa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004136:	2b01      	cmp	r3, #1
 8004138:	d118      	bne.n	800416c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	e853 3f00 	ldrex	r3, [r3]
 8004146:	60bb      	str	r3, [r7, #8]
   return(result);
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	f023 0310 	bic.w	r3, r3, #16
 800414e:	647b      	str	r3, [r7, #68]	; 0x44
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	461a      	mov	r2, r3
 8004156:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004158:	61bb      	str	r3, [r7, #24]
 800415a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800415c:	6979      	ldr	r1, [r7, #20]
 800415e:	69ba      	ldr	r2, [r7, #24]
 8004160:	e841 2300 	strex	r3, r2, [r1]
 8004164:	613b      	str	r3, [r7, #16]
   return(result);
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d1e6      	bne.n	800413a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2220      	movs	r2, #32
 8004170:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004180:	bf00      	nop
 8004182:	3754      	adds	r7, #84	; 0x54
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004198:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2200      	movs	r2, #0
 800419e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2200      	movs	r2, #0
 80041a6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80041aa:	68f8      	ldr	r0, [r7, #12]
 80041ac:	f7ff f9ca 	bl	8003544 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041b0:	bf00      	nop
 80041b2:	3710      	adds	r7, #16
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b088      	sub	sp, #32
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	e853 3f00 	ldrex	r3, [r3]
 80041cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041d4:	61fb      	str	r3, [r7, #28]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	461a      	mov	r2, r3
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	61bb      	str	r3, [r7, #24]
 80041e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041e2:	6979      	ldr	r1, [r7, #20]
 80041e4:	69ba      	ldr	r2, [r7, #24]
 80041e6:	e841 2300 	strex	r3, r2, [r1]
 80041ea:	613b      	str	r3, [r7, #16]
   return(result);
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d1e6      	bne.n	80041c0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2220      	movs	r2, #32
 80041f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f7fc fb2b 	bl	800085c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004206:	bf00      	nop
 8004208:	3720      	adds	r7, #32
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
	...

08004210 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b09c      	sub	sp, #112	; 0x70
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800421e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004228:	2b22      	cmp	r3, #34	; 0x22
 800422a:	f040 80be 	bne.w	80043aa <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004234:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004238:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800423c:	b2d9      	uxtb	r1, r3
 800423e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004242:	b2da      	uxtb	r2, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004248:	400a      	ands	r2, r1
 800424a:	b2d2      	uxtb	r2, r2
 800424c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004252:	1c5a      	adds	r2, r3, #1
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800425e:	b29b      	uxth	r3, r3
 8004260:	3b01      	subs	r3, #1
 8004262:	b29a      	uxth	r2, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004270:	b29b      	uxth	r3, r3
 8004272:	2b00      	cmp	r3, #0
 8004274:	f040 80a1 	bne.w	80043ba <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800427e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004280:	e853 3f00 	ldrex	r3, [r3]
 8004284:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004286:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004288:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800428c:	66bb      	str	r3, [r7, #104]	; 0x68
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	461a      	mov	r2, r3
 8004294:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004296:	65bb      	str	r3, [r7, #88]	; 0x58
 8004298:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800429a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800429c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800429e:	e841 2300 	strex	r3, r2, [r1]
 80042a2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80042a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d1e6      	bne.n	8004278 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	3308      	adds	r3, #8
 80042b0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042b4:	e853 3f00 	ldrex	r3, [r3]
 80042b8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80042ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042bc:	f023 0301 	bic.w	r3, r3, #1
 80042c0:	667b      	str	r3, [r7, #100]	; 0x64
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	3308      	adds	r3, #8
 80042c8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80042ca:	647a      	str	r2, [r7, #68]	; 0x44
 80042cc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80042d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042d2:	e841 2300 	strex	r3, r2, [r1]
 80042d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80042d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d1e5      	bne.n	80042aa <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2220      	movs	r2, #32
 80042e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a33      	ldr	r2, [pc, #204]	; (80043c4 <UART_RxISR_8BIT+0x1b4>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d01f      	beq.n	800433c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d018      	beq.n	800433c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004312:	e853 3f00 	ldrex	r3, [r3]
 8004316:	623b      	str	r3, [r7, #32]
   return(result);
 8004318:	6a3b      	ldr	r3, [r7, #32]
 800431a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800431e:	663b      	str	r3, [r7, #96]	; 0x60
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	461a      	mov	r2, r3
 8004326:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004328:	633b      	str	r3, [r7, #48]	; 0x30
 800432a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800432c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800432e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004330:	e841 2300 	strex	r3, r2, [r1]
 8004334:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004338:	2b00      	cmp	r3, #0
 800433a:	d1e6      	bne.n	800430a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004340:	2b01      	cmp	r3, #1
 8004342:	d12e      	bne.n	80043a2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	e853 3f00 	ldrex	r3, [r3]
 8004356:	60fb      	str	r3, [r7, #12]
   return(result);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f023 0310 	bic.w	r3, r3, #16
 800435e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	461a      	mov	r2, r3
 8004366:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004368:	61fb      	str	r3, [r7, #28]
 800436a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800436c:	69b9      	ldr	r1, [r7, #24]
 800436e:	69fa      	ldr	r2, [r7, #28]
 8004370:	e841 2300 	strex	r3, r2, [r1]
 8004374:	617b      	str	r3, [r7, #20]
   return(result);
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d1e6      	bne.n	800434a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	69db      	ldr	r3, [r3, #28]
 8004382:	f003 0310 	and.w	r3, r3, #16
 8004386:	2b10      	cmp	r3, #16
 8004388:	d103      	bne.n	8004392 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2210      	movs	r2, #16
 8004390:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004398:	4619      	mov	r1, r3
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f7ff f8dc 	bl	8003558 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80043a0:	e00b      	b.n	80043ba <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f7fc fa4a 	bl	800083c <HAL_UART_RxCpltCallback>
}
 80043a8:	e007      	b.n	80043ba <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	699a      	ldr	r2, [r3, #24]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f042 0208 	orr.w	r2, r2, #8
 80043b8:	619a      	str	r2, [r3, #24]
}
 80043ba:	bf00      	nop
 80043bc:	3770      	adds	r7, #112	; 0x70
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	40008000 	.word	0x40008000

080043c8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b09c      	sub	sp, #112	; 0x70
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80043d6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043e0:	2b22      	cmp	r3, #34	; 0x22
 80043e2:	f040 80be 	bne.w	8004562 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ec:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043f4:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80043f6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80043fa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80043fe:	4013      	ands	r3, r2
 8004400:	b29a      	uxth	r2, r3
 8004402:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004404:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800440a:	1c9a      	adds	r2, r3, #2
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004416:	b29b      	uxth	r3, r3
 8004418:	3b01      	subs	r3, #1
 800441a:	b29a      	uxth	r2, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004428:	b29b      	uxth	r3, r3
 800442a:	2b00      	cmp	r3, #0
 800442c:	f040 80a1 	bne.w	8004572 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004436:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004438:	e853 3f00 	ldrex	r3, [r3]
 800443c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800443e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004440:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004444:	667b      	str	r3, [r7, #100]	; 0x64
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	461a      	mov	r2, r3
 800444c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800444e:	657b      	str	r3, [r7, #84]	; 0x54
 8004450:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004452:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004454:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004456:	e841 2300 	strex	r3, r2, [r1]
 800445a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800445c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800445e:	2b00      	cmp	r3, #0
 8004460:	d1e6      	bne.n	8004430 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	3308      	adds	r3, #8
 8004468:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800446a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800446c:	e853 3f00 	ldrex	r3, [r3]
 8004470:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004474:	f023 0301 	bic.w	r3, r3, #1
 8004478:	663b      	str	r3, [r7, #96]	; 0x60
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	3308      	adds	r3, #8
 8004480:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004482:	643a      	str	r2, [r7, #64]	; 0x40
 8004484:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004486:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004488:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800448a:	e841 2300 	strex	r3, r2, [r1]
 800448e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004492:	2b00      	cmp	r3, #0
 8004494:	d1e5      	bne.n	8004462 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2220      	movs	r2, #32
 800449a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a33      	ldr	r2, [pc, #204]	; (800457c <UART_RxISR_16BIT+0x1b4>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d01f      	beq.n	80044f4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d018      	beq.n	80044f4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c8:	6a3b      	ldr	r3, [r7, #32]
 80044ca:	e853 3f00 	ldrex	r3, [r3]
 80044ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80044d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	461a      	mov	r2, r3
 80044de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044e2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044e8:	e841 2300 	strex	r3, r2, [r1]
 80044ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d1e6      	bne.n	80044c2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d12e      	bne.n	800455a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	e853 3f00 	ldrex	r3, [r3]
 800450e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	f023 0310 	bic.w	r3, r3, #16
 8004516:	65bb      	str	r3, [r7, #88]	; 0x58
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	461a      	mov	r2, r3
 800451e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004520:	61bb      	str	r3, [r7, #24]
 8004522:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004524:	6979      	ldr	r1, [r7, #20]
 8004526:	69ba      	ldr	r2, [r7, #24]
 8004528:	e841 2300 	strex	r3, r2, [r1]
 800452c:	613b      	str	r3, [r7, #16]
   return(result);
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d1e6      	bne.n	8004502 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	69db      	ldr	r3, [r3, #28]
 800453a:	f003 0310 	and.w	r3, r3, #16
 800453e:	2b10      	cmp	r3, #16
 8004540:	d103      	bne.n	800454a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2210      	movs	r2, #16
 8004548:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004550:	4619      	mov	r1, r3
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f7ff f800 	bl	8003558 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004558:	e00b      	b.n	8004572 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f7fc f96e 	bl	800083c <HAL_UART_RxCpltCallback>
}
 8004560:	e007      	b.n	8004572 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	699a      	ldr	r2, [r3, #24]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f042 0208 	orr.w	r2, r2, #8
 8004570:	619a      	str	r2, [r3, #24]
}
 8004572:	bf00      	nop
 8004574:	3770      	adds	r7, #112	; 0x70
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	40008000 	.word	0x40008000

08004580 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b0ac      	sub	sp, #176	; 0xb0
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800458e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	69db      	ldr	r3, [r3, #28]
 8004598:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045b6:	2b22      	cmp	r3, #34	; 0x22
 80045b8:	f040 8182 	bne.w	80048c0 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80045c2:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80045c6:	e125      	b.n	8004814 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ce:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80045d2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80045d6:	b2d9      	uxtb	r1, r3
 80045d8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80045dc:	b2da      	uxtb	r2, r3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045e2:	400a      	ands	r2, r1
 80045e4:	b2d2      	uxtb	r2, r2
 80045e6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ec:	1c5a      	adds	r2, r3, #1
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	3b01      	subs	r3, #1
 80045fc:	b29a      	uxth	r2, r3
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	69db      	ldr	r3, [r3, #28]
 800460a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800460e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004612:	f003 0307 	and.w	r3, r3, #7
 8004616:	2b00      	cmp	r3, #0
 8004618:	d053      	beq.n	80046c2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800461a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800461e:	f003 0301 	and.w	r3, r3, #1
 8004622:	2b00      	cmp	r3, #0
 8004624:	d011      	beq.n	800464a <UART_RxISR_8BIT_FIFOEN+0xca>
 8004626:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800462a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800462e:	2b00      	cmp	r3, #0
 8004630:	d00b      	beq.n	800464a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	2201      	movs	r2, #1
 8004638:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004640:	f043 0201 	orr.w	r2, r3, #1
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800464a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800464e:	f003 0302 	and.w	r3, r3, #2
 8004652:	2b00      	cmp	r3, #0
 8004654:	d011      	beq.n	800467a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8004656:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800465a:	f003 0301 	and.w	r3, r3, #1
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00b      	beq.n	800467a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2202      	movs	r2, #2
 8004668:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004670:	f043 0204 	orr.w	r2, r3, #4
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800467a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800467e:	f003 0304 	and.w	r3, r3, #4
 8004682:	2b00      	cmp	r3, #0
 8004684:	d011      	beq.n	80046aa <UART_RxISR_8BIT_FIFOEN+0x12a>
 8004686:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800468a:	f003 0301 	and.w	r3, r3, #1
 800468e:	2b00      	cmp	r3, #0
 8004690:	d00b      	beq.n	80046aa <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	2204      	movs	r2, #4
 8004698:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046a0:	f043 0202 	orr.w	r2, r3, #2
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d006      	beq.n	80046c2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f7fe ff45 	bl	8003544 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	f040 80a2 	bne.w	8004814 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80046d8:	e853 3f00 	ldrex	r3, [r3]
 80046dc:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 80046de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	461a      	mov	r2, r3
 80046ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80046f2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80046f4:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80046f8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80046fa:	e841 2300 	strex	r3, r2, [r1]
 80046fe:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8004700:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004702:	2b00      	cmp	r3, #0
 8004704:	d1e4      	bne.n	80046d0 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	3308      	adds	r3, #8
 800470c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800470e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004710:	e853 3f00 	ldrex	r3, [r3]
 8004714:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8004716:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004718:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800471c:	f023 0301 	bic.w	r3, r3, #1
 8004720:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	3308      	adds	r3, #8
 800472a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800472e:	66ba      	str	r2, [r7, #104]	; 0x68
 8004730:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004732:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8004734:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004736:	e841 2300 	strex	r3, r2, [r1]
 800473a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800473c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800473e:	2b00      	cmp	r3, #0
 8004740:	d1e1      	bne.n	8004706 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2220      	movs	r2, #32
 8004746:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a5f      	ldr	r2, [pc, #380]	; (80048d8 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d021      	beq.n	80047a4 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d01a      	beq.n	80047a4 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004774:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004776:	e853 3f00 	ldrex	r3, [r3]
 800477a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800477c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800477e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004782:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	461a      	mov	r2, r3
 800478c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004790:	657b      	str	r3, [r7, #84]	; 0x54
 8004792:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004794:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004796:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004798:	e841 2300 	strex	r3, r2, [r1]
 800479c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800479e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d1e4      	bne.n	800476e <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d130      	bne.n	800480e <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047ba:	e853 3f00 	ldrex	r3, [r3]
 80047be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80047c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c2:	f023 0310 	bic.w	r3, r3, #16
 80047c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	461a      	mov	r2, r3
 80047d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80047d4:	643b      	str	r3, [r7, #64]	; 0x40
 80047d6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80047da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80047dc:	e841 2300 	strex	r3, r2, [r1]
 80047e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80047e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d1e4      	bne.n	80047b2 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	69db      	ldr	r3, [r3, #28]
 80047ee:	f003 0310 	and.w	r3, r3, #16
 80047f2:	2b10      	cmp	r3, #16
 80047f4:	d103      	bne.n	80047fe <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2210      	movs	r2, #16
 80047fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004804:	4619      	mov	r1, r3
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f7fe fea6 	bl	8003558 <HAL_UARTEx_RxEventCallback>
 800480c:	e002      	b.n	8004814 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f7fc f814 	bl	800083c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004814:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8004818:	2b00      	cmp	r3, #0
 800481a:	d006      	beq.n	800482a <UART_RxISR_8BIT_FIFOEN+0x2aa>
 800481c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004820:	f003 0320 	and.w	r3, r3, #32
 8004824:	2b00      	cmp	r3, #0
 8004826:	f47f aecf 	bne.w	80045c8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004830:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004834:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004838:	2b00      	cmp	r3, #0
 800483a:	d049      	beq.n	80048d0 <UART_RxISR_8BIT_FIFOEN+0x350>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004842:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8004846:	429a      	cmp	r2, r3
 8004848:	d242      	bcs.n	80048d0 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	3308      	adds	r3, #8
 8004850:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004852:	6a3b      	ldr	r3, [r7, #32]
 8004854:	e853 3f00 	ldrex	r3, [r3]
 8004858:	61fb      	str	r3, [r7, #28]
   return(result);
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004860:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	3308      	adds	r3, #8
 800486a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800486e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004870:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004872:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004874:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004876:	e841 2300 	strex	r3, r2, [r1]
 800487a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800487c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487e:	2b00      	cmp	r3, #0
 8004880:	d1e3      	bne.n	800484a <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a15      	ldr	r2, [pc, #84]	; (80048dc <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8004886:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	e853 3f00 	ldrex	r3, [r3]
 8004894:	60bb      	str	r3, [r7, #8]
   return(result);
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	f043 0320 	orr.w	r3, r3, #32
 800489c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	461a      	mov	r2, r3
 80048a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80048aa:	61bb      	str	r3, [r7, #24]
 80048ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ae:	6979      	ldr	r1, [r7, #20]
 80048b0:	69ba      	ldr	r2, [r7, #24]
 80048b2:	e841 2300 	strex	r3, r2, [r1]
 80048b6:	613b      	str	r3, [r7, #16]
   return(result);
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d1e4      	bne.n	8004888 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80048be:	e007      	b.n	80048d0 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	699a      	ldr	r2, [r3, #24]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f042 0208 	orr.w	r2, r2, #8
 80048ce:	619a      	str	r2, [r3, #24]
}
 80048d0:	bf00      	nop
 80048d2:	37b0      	adds	r7, #176	; 0xb0
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}
 80048d8:	40008000 	.word	0x40008000
 80048dc:	08004211 	.word	0x08004211

080048e0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b0ae      	sub	sp, #184	; 0xb8
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80048ee:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	69db      	ldr	r3, [r3, #28]
 80048f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004916:	2b22      	cmp	r3, #34	; 0x22
 8004918:	f040 8186 	bne.w	8004c28 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004922:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004926:	e129      	b.n	8004b7c <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492e:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004936:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800493a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800493e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8004942:	4013      	ands	r3, r2
 8004944:	b29a      	uxth	r2, r3
 8004946:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800494a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004950:	1c9a      	adds	r2, r3, #2
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800495c:	b29b      	uxth	r3, r3
 800495e:	3b01      	subs	r3, #1
 8004960:	b29a      	uxth	r2, r3
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	69db      	ldr	r3, [r3, #28]
 800496e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004972:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004976:	f003 0307 	and.w	r3, r3, #7
 800497a:	2b00      	cmp	r3, #0
 800497c:	d053      	beq.n	8004a26 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800497e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004982:	f003 0301 	and.w	r3, r3, #1
 8004986:	2b00      	cmp	r3, #0
 8004988:	d011      	beq.n	80049ae <UART_RxISR_16BIT_FIFOEN+0xce>
 800498a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800498e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004992:	2b00      	cmp	r3, #0
 8004994:	d00b      	beq.n	80049ae <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2201      	movs	r2, #1
 800499c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049a4:	f043 0201 	orr.w	r2, r3, #1
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80049ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80049b2:	f003 0302 	and.w	r3, r3, #2
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d011      	beq.n	80049de <UART_RxISR_16BIT_FIFOEN+0xfe>
 80049ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80049be:	f003 0301 	and.w	r3, r3, #1
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d00b      	beq.n	80049de <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	2202      	movs	r2, #2
 80049cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049d4:	f043 0204 	orr.w	r2, r3, #4
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80049de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80049e2:	f003 0304 	and.w	r3, r3, #4
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d011      	beq.n	8004a0e <UART_RxISR_16BIT_FIFOEN+0x12e>
 80049ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80049ee:	f003 0301 	and.w	r3, r3, #1
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d00b      	beq.n	8004a0e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	2204      	movs	r2, #4
 80049fc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a04:	f043 0202 	orr.w	r2, r3, #2
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d006      	beq.n	8004a26 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f7fe fd93 	bl	8003544 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	f040 80a4 	bne.w	8004b7c <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a3c:	e853 3f00 	ldrex	r3, [r3]
 8004a40:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004a42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a48:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	461a      	mov	r2, r3
 8004a52:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004a56:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a5a:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a5c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004a5e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004a62:	e841 2300 	strex	r3, r2, [r1]
 8004a66:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004a68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d1e2      	bne.n	8004a34 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	3308      	adds	r3, #8
 8004a74:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a78:	e853 3f00 	ldrex	r3, [r3]
 8004a7c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004a7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a84:	f023 0301 	bic.w	r3, r3, #1
 8004a88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	3308      	adds	r3, #8
 8004a92:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8004a96:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004a98:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a9a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004a9c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004a9e:	e841 2300 	strex	r3, r2, [r1]
 8004aa2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004aa4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d1e1      	bne.n	8004a6e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2220      	movs	r2, #32
 8004aae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a5f      	ldr	r2, [pc, #380]	; (8004c40 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d021      	beq.n	8004b0c <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d01a      	beq.n	8004b0c <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004adc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ade:	e853 3f00 	ldrex	r3, [r3]
 8004ae2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004ae4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ae6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004aea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	461a      	mov	r2, r3
 8004af4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004af8:	65bb      	str	r3, [r7, #88]	; 0x58
 8004afa:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004afc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004afe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004b00:	e841 2300 	strex	r3, r2, [r1]
 8004b04:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004b06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d1e4      	bne.n	8004ad6 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d130      	bne.n	8004b76 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b22:	e853 3f00 	ldrex	r3, [r3]
 8004b26:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b2a:	f023 0310 	bic.w	r3, r3, #16
 8004b2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	461a      	mov	r2, r3
 8004b38:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004b3c:	647b      	str	r3, [r7, #68]	; 0x44
 8004b3e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b40:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004b42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b44:	e841 2300 	strex	r3, r2, [r1]
 8004b48:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d1e4      	bne.n	8004b1a <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	69db      	ldr	r3, [r3, #28]
 8004b56:	f003 0310 	and.w	r3, r3, #16
 8004b5a:	2b10      	cmp	r3, #16
 8004b5c:	d103      	bne.n	8004b66 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	2210      	movs	r2, #16
 8004b64:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f7fe fcf2 	bl	8003558 <HAL_UARTEx_RxEventCallback>
 8004b74:	e002      	b.n	8004b7c <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f7fb fe60 	bl	800083c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004b7c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d006      	beq.n	8004b92 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8004b84:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004b88:	f003 0320 	and.w	r3, r3, #32
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	f47f aecb 	bne.w	8004928 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004b98:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004b9c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d049      	beq.n	8004c38 <UART_RxISR_16BIT_FIFOEN+0x358>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004baa:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d242      	bcs.n	8004c38 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	3308      	adds	r3, #8
 8004bb8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bbc:	e853 3f00 	ldrex	r3, [r3]
 8004bc0:	623b      	str	r3, [r7, #32]
   return(result);
 8004bc2:	6a3b      	ldr	r3, [r7, #32]
 8004bc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	3308      	adds	r3, #8
 8004bd2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004bd6:	633a      	str	r2, [r7, #48]	; 0x30
 8004bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004bdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bde:	e841 2300 	strex	r3, r2, [r1]
 8004be2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d1e3      	bne.n	8004bb2 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a15      	ldr	r2, [pc, #84]	; (8004c44 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8004bee:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	e853 3f00 	ldrex	r3, [r3]
 8004bfc:	60fb      	str	r3, [r7, #12]
   return(result);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f043 0320 	orr.w	r3, r3, #32
 8004c04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c12:	61fb      	str	r3, [r7, #28]
 8004c14:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c16:	69b9      	ldr	r1, [r7, #24]
 8004c18:	69fa      	ldr	r2, [r7, #28]
 8004c1a:	e841 2300 	strex	r3, r2, [r1]
 8004c1e:	617b      	str	r3, [r7, #20]
   return(result);
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d1e4      	bne.n	8004bf0 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004c26:	e007      	b.n	8004c38 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	699a      	ldr	r2, [r3, #24]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f042 0208 	orr.w	r2, r2, #8
 8004c36:	619a      	str	r2, [r3, #24]
}
 8004c38:	bf00      	nop
 8004c3a:	37b8      	adds	r7, #184	; 0xb8
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	40008000 	.word	0x40008000
 8004c44:	080043c9 	.word	0x080043c9

08004c48 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b083      	sub	sp, #12
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004c50:	bf00      	nop
 8004c52:	370c      	adds	r7, #12
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr

08004c5c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b083      	sub	sp, #12
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004c64:	bf00      	nop
 8004c66:	370c      	adds	r7, #12
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004c78:	bf00      	nop
 8004c7a:	370c      	adds	r7, #12
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr

08004c84 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b085      	sub	sp, #20
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d101      	bne.n	8004c9a <HAL_UARTEx_DisableFifoMode+0x16>
 8004c96:	2302      	movs	r3, #2
 8004c98:	e027      	b.n	8004cea <HAL_UARTEx_DisableFifoMode+0x66>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2224      	movs	r2, #36	; 0x24
 8004ca6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f022 0201 	bic.w	r2, r2, #1
 8004cc0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004cc8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	68fa      	ldr	r2, [r7, #12]
 8004cd6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2220      	movs	r2, #32
 8004cdc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3714      	adds	r7, #20
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr

08004cf6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004cf6:	b580      	push	{r7, lr}
 8004cf8:	b084      	sub	sp, #16
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
 8004cfe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d101      	bne.n	8004d0e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004d0a:	2302      	movs	r3, #2
 8004d0c:	e02d      	b.n	8004d6a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2201      	movs	r2, #1
 8004d12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2224      	movs	r2, #36	; 0x24
 8004d1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f022 0201 	bic.w	r2, r2, #1
 8004d34:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	683a      	ldr	r2, [r7, #0]
 8004d46:	430a      	orrs	r2, r1
 8004d48:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f000 f850 	bl	8004df0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	68fa      	ldr	r2, [r7, #12]
 8004d56:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2220      	movs	r2, #32
 8004d5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004d68:	2300      	movs	r3, #0
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3710      	adds	r7, #16
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}

08004d72 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004d72:	b580      	push	{r7, lr}
 8004d74:	b084      	sub	sp, #16
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	6078      	str	r0, [r7, #4]
 8004d7a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d101      	bne.n	8004d8a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004d86:	2302      	movs	r3, #2
 8004d88:	e02d      	b.n	8004de6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2224      	movs	r2, #36	; 0x24
 8004d96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f022 0201 	bic.w	r2, r2, #1
 8004db0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	683a      	ldr	r2, [r7, #0]
 8004dc2:	430a      	orrs	r2, r1
 8004dc4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 f812 	bl	8004df0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	68fa      	ldr	r2, [r7, #12]
 8004dd2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2220      	movs	r2, #32
 8004dd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004de4:	2300      	movs	r3, #0
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3710      	adds	r7, #16
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
	...

08004df0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b085      	sub	sp, #20
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d108      	bne.n	8004e12 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004e10:	e031      	b.n	8004e76 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004e12:	2308      	movs	r3, #8
 8004e14:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004e16:	2308      	movs	r3, #8
 8004e18:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	0e5b      	lsrs	r3, r3, #25
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	f003 0307 	and.w	r3, r3, #7
 8004e28:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	0f5b      	lsrs	r3, r3, #29
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	f003 0307 	and.w	r3, r3, #7
 8004e38:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004e3a:	7bbb      	ldrb	r3, [r7, #14]
 8004e3c:	7b3a      	ldrb	r2, [r7, #12]
 8004e3e:	4911      	ldr	r1, [pc, #68]	; (8004e84 <UARTEx_SetNbDataToProcess+0x94>)
 8004e40:	5c8a      	ldrb	r2, [r1, r2]
 8004e42:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004e46:	7b3a      	ldrb	r2, [r7, #12]
 8004e48:	490f      	ldr	r1, [pc, #60]	; (8004e88 <UARTEx_SetNbDataToProcess+0x98>)
 8004e4a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004e4c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004e50:	b29a      	uxth	r2, r3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004e58:	7bfb      	ldrb	r3, [r7, #15]
 8004e5a:	7b7a      	ldrb	r2, [r7, #13]
 8004e5c:	4909      	ldr	r1, [pc, #36]	; (8004e84 <UARTEx_SetNbDataToProcess+0x94>)
 8004e5e:	5c8a      	ldrb	r2, [r1, r2]
 8004e60:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004e64:	7b7a      	ldrb	r2, [r7, #13]
 8004e66:	4908      	ldr	r1, [pc, #32]	; (8004e88 <UARTEx_SetNbDataToProcess+0x98>)
 8004e68:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004e6a:	fb93 f3f2 	sdiv	r3, r3, r2
 8004e6e:	b29a      	uxth	r2, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004e76:	bf00      	nop
 8004e78:	3714      	adds	r7, #20
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr
 8004e82:	bf00      	nop
 8004e84:	080091c0 	.word	0x080091c0
 8004e88:	080091c8 	.word	0x080091c8

08004e8c <ai_log_err>:

static ai_buffer* ai_input;
static ai_buffer* ai_output;

static void ai_log_err(const ai_error err, const char *fct)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b082      	sub	sp, #8
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN log */
  if (fct)
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d009      	beq.n	8004eb0 <ai_log_err+0x24>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
        err.type, err.code);
 8004e9c:	793b      	ldrb	r3, [r7, #4]
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8004e9e:	461a      	mov	r2, r3
        err.type, err.code);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f3c3 2317 	ubfx	r3, r3, #8, #24
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8004ea6:	6839      	ldr	r1, [r7, #0]
 8004ea8:	4806      	ldr	r0, [pc, #24]	; (8004ec4 <ai_log_err+0x38>)
 8004eaa:	f003 f943 	bl	8008134 <iprintf>
 8004eae:	e008      	b.n	8004ec2 <ai_log_err+0x36>
  else
    printf("TEMPLATE - Error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 8004eb0:	793b      	ldrb	r3, [r7, #4]
 8004eb2:	4619      	mov	r1, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8004eba:	461a      	mov	r2, r3
 8004ebc:	4802      	ldr	r0, [pc, #8]	; (8004ec8 <ai_log_err+0x3c>)
 8004ebe:	f003 f939 	bl	8008134 <iprintf>

  do {} while (1);
 8004ec2:	e7fe      	b.n	8004ec2 <ai_log_err+0x36>
 8004ec4:	08009080 	.word	0x08009080
 8004ec8:	080090b4 	.word	0x080090b4

08004ecc <ai_boostrap>:
  /* USER CODE END log */
}

static int ai_boostrap(ai_handle *act_addr)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b086      	sub	sp, #24
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  ai_error err;

  /* Create and initialize an instance of the model */
  err = ai_network_create_and_init(&network, act_addr, NULL);
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	6879      	ldr	r1, [r7, #4]
 8004ed8:	4828      	ldr	r0, [pc, #160]	; (8004f7c <ai_boostrap+0xb0>)
 8004eda:	f000 fb2d 	bl	8005538 <ai_network_create_and_init>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	60fb      	str	r3, [r7, #12]
  if (err.type != AI_ERROR_NONE) {
 8004ee2:	7b3b      	ldrb	r3, [r7, #12]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d006      	beq.n	8004ef6 <ai_boostrap+0x2a>
    ai_log_err(err, "ai_network_create_and_init");
 8004ee8:	4925      	ldr	r1, [pc, #148]	; (8004f80 <ai_boostrap+0xb4>)
 8004eea:	68f8      	ldr	r0, [r7, #12]
 8004eec:	f7ff ffce 	bl	8004e8c <ai_log_err>
    return -1;
 8004ef0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004ef4:	e03e      	b.n	8004f74 <ai_boostrap+0xa8>
  }

  ai_input = ai_network_inputs_get(network, NULL);
 8004ef6:	4b21      	ldr	r3, [pc, #132]	; (8004f7c <ai_boostrap+0xb0>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2100      	movs	r1, #0
 8004efc:	4618      	mov	r0, r3
 8004efe:	f000 fb8f 	bl	8005620 <ai_network_inputs_get>
 8004f02:	4603      	mov	r3, r0
 8004f04:	4a1f      	ldr	r2, [pc, #124]	; (8004f84 <ai_boostrap+0xb8>)
 8004f06:	6013      	str	r3, [r2, #0]
  ai_output = ai_network_outputs_get(network, NULL);
 8004f08:	4b1c      	ldr	r3, [pc, #112]	; (8004f7c <ai_boostrap+0xb0>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2100      	movs	r1, #0
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f000 fba0 	bl	8005654 <ai_network_outputs_get>
 8004f14:	4603      	mov	r3, r0
 8004f16:	4a1c      	ldr	r2, [pc, #112]	; (8004f88 <ai_boostrap+0xbc>)
 8004f18:	6013      	str	r3, [r2, #0]

#if defined(AI_NETWORK_INPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-inputs" option is used, memory buffer can be
   *  used from the activations buffer. This is not mandatory.
   */
  for (int idx=0; idx < AI_NETWORK_IN_NUM; idx++) {
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	617b      	str	r3, [r7, #20]
 8004f1e:	e00f      	b.n	8004f40 <ai_boostrap+0x74>
	data_ins[idx] = ai_input[idx].data;
 8004f20:	4b18      	ldr	r3, [pc, #96]	; (8004f84 <ai_boostrap+0xb8>)
 8004f22:	6819      	ldr	r1, [r3, #0]
 8004f24:	697a      	ldr	r2, [r7, #20]
 8004f26:	4613      	mov	r3, r2
 8004f28:	00db      	lsls	r3, r3, #3
 8004f2a:	1a9b      	subs	r3, r3, r2
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	440b      	add	r3, r1
 8004f30:	685a      	ldr	r2, [r3, #4]
 8004f32:	4916      	ldr	r1, [pc, #88]	; (8004f8c <ai_boostrap+0xc0>)
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_NETWORK_IN_NUM; idx++) {
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	3301      	adds	r3, #1
 8004f3e:	617b      	str	r3, [r7, #20]
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	ddec      	ble.n	8004f20 <ai_boostrap+0x54>

#if defined(AI_NETWORK_OUTPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-outputs" option is used, memory buffer can be
   *  used from the activations buffer. This is no mandatory.
   */
  for (int idx=0; idx < AI_NETWORK_OUT_NUM; idx++) {
 8004f46:	2300      	movs	r3, #0
 8004f48:	613b      	str	r3, [r7, #16]
 8004f4a:	e00f      	b.n	8004f6c <ai_boostrap+0xa0>
	data_outs[idx] = ai_output[idx].data;
 8004f4c:	4b0e      	ldr	r3, [pc, #56]	; (8004f88 <ai_boostrap+0xbc>)
 8004f4e:	6819      	ldr	r1, [r3, #0]
 8004f50:	693a      	ldr	r2, [r7, #16]
 8004f52:	4613      	mov	r3, r2
 8004f54:	00db      	lsls	r3, r3, #3
 8004f56:	1a9b      	subs	r3, r3, r2
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	440b      	add	r3, r1
 8004f5c:	685a      	ldr	r2, [r3, #4]
 8004f5e:	490c      	ldr	r1, [pc, #48]	; (8004f90 <ai_boostrap+0xc4>)
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_NETWORK_OUT_NUM; idx++) {
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	3301      	adds	r3, #1
 8004f6a:	613b      	str	r3, [r7, #16]
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	2b02      	cmp	r3, #2
 8004f70:	ddec      	ble.n	8004f4c <ai_boostrap+0x80>
  for (int idx=0; idx < AI_NETWORK_OUT_NUM; idx++) {
	ai_output[idx].data = data_outs[idx];
  }
#endif

  return 0;
 8004f72:	2300      	movs	r3, #0
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3718      	adds	r7, #24
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}
 8004f7c:	20001598 	.word	0x20001598
 8004f80:	080090e4 	.word	0x080090e4
 8004f84:	2000159c 	.word	0x2000159c
 8004f88:	200015a0 	.word	0x200015a0
 8004f8c:	20001154 	.word	0x20001154
 8004f90:	20001158 	.word	0x20001158

08004f94 <ai_run>:

static int ai_run(void)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b082      	sub	sp, #8
 8004f98:	af00      	add	r7, sp, #0
  ai_i32 batch;

  batch = ai_network_run(network, ai_input, ai_output);
 8004f9a:	4b0f      	ldr	r3, [pc, #60]	; (8004fd8 <ai_run+0x44>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a0f      	ldr	r2, [pc, #60]	; (8004fdc <ai_run+0x48>)
 8004fa0:	6811      	ldr	r1, [r2, #0]
 8004fa2:	4a0f      	ldr	r2, [pc, #60]	; (8004fe0 <ai_run+0x4c>)
 8004fa4:	6812      	ldr	r2, [r2, #0]
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f000 fbaa 	bl	8005700 <ai_network_run>
 8004fac:	6078      	str	r0, [r7, #4]
  if (batch != 1) {
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d00c      	beq.n	8004fce <ai_run+0x3a>
    ai_log_err(ai_network_get_error(network),
 8004fb4:	4b08      	ldr	r3, [pc, #32]	; (8004fd8 <ai_run+0x44>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f000 fa9b 	bl	80054f4 <ai_network_get_error>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	4908      	ldr	r1, [pc, #32]	; (8004fe4 <ai_run+0x50>)
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f7ff ff62 	bl	8004e8c <ai_log_err>
        "ai_network_run");
    return -1;
 8004fc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004fcc:	e000      	b.n	8004fd0 <ai_run+0x3c>
  }

  return 0;
 8004fce:	2300      	movs	r3, #0
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3708      	adds	r7, #8
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}
 8004fd8:	20001598 	.word	0x20001598
 8004fdc:	2000159c 	.word	0x2000159c
 8004fe0:	200015a0 	.word	0x200015a0
 8004fe4:	08009100 	.word	0x08009100

08004fe8 <acquire_and_process_data>:
extern ai_float in_data1[AI_NETWORK_IN_1_SIZE];
extern ai_float out_data1[AI_NETWORK_OUT_1_SIZE];
extern ai_float out_data2[AI_NETWORK_OUT_2_SIZE];
extern ai_float out_data3[AI_NETWORK_OUT_3_SIZE];
int acquire_and_process_data(ai_i8* data[])
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b082      	sub	sp, #8
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
      data[idx] = ....
  }

  */
  // Cast data_ins[0] to a pointer of type ai_float*
  memcpy(data[0], in_data1, AI_NETWORK_IN_1_SIZE * sizeof(ai_float));
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	220c      	movs	r2, #12
 8004ff6:	4904      	ldr	r1, [pc, #16]	; (8005008 <acquire_and_process_data+0x20>)
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f003 fa6c 	bl	80084d6 <memcpy>


  return 0;
 8004ffe:	2300      	movs	r3, #0
}
 8005000:	4618      	mov	r0, r3
 8005002:	3708      	adds	r7, #8
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}
 8005008:	20001050 	.word	0x20001050

0800500c <post_process>:


int post_process(ai_i8* data[])
{
 800500c:	b480      	push	{r7}
 800500e:	b083      	sub	sp, #12
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  {
      data[idx] = ....
  }

  */
  memcpy(out_data1, data[0], AI_NETWORK_OUT_1_SIZE * sizeof(ai_float));
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	461a      	mov	r2, r3
 800501c:	4b0b      	ldr	r3, [pc, #44]	; (800504c <post_process+0x40>)
 800501e:	601a      	str	r2, [r3, #0]
  memcpy(out_data2, data[1], AI_NETWORK_OUT_2_SIZE * sizeof(ai_float));
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	3304      	adds	r3, #4
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	461a      	mov	r2, r3
 800502a:	4b09      	ldr	r3, [pc, #36]	; (8005050 <post_process+0x44>)
 800502c:	601a      	str	r2, [r3, #0]
  memcpy(out_data3, data[2], AI_NETWORK_OUT_3_SIZE * sizeof(ai_float));
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	3308      	adds	r3, #8
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	461a      	mov	r2, r3
 8005038:	4b06      	ldr	r3, [pc, #24]	; (8005054 <post_process+0x48>)
 800503a:	601a      	str	r2, [r3, #0]
  return 0;
 800503c:	2300      	movs	r3, #0
}
 800503e:	4618      	mov	r0, r3
 8005040:	370c      	adds	r7, #12
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr
 800504a:	bf00      	nop
 800504c:	2000105c 	.word	0x2000105c
 8005050:	20001060 	.word	0x20001060
 8005054:	20001064 	.word	0x20001064

08005058 <MX_X_CUBE_AI_Init>:
/* USER CODE END 2 */

/* Entry points --------------------------------------------------------------*/

void MX_X_CUBE_AI_Init(void)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 5 */
  printf("\r\nTEMPLATE - initialization\r\n");
 800505c:	4803      	ldr	r0, [pc, #12]	; (800506c <MX_X_CUBE_AI_Init+0x14>)
 800505e:	f003 f8cf 	bl	8008200 <puts>

  ai_boostrap(data_activations0);
 8005062:	4803      	ldr	r0, [pc, #12]	; (8005070 <MX_X_CUBE_AI_Init+0x18>)
 8005064:	f7ff ff32 	bl	8004ecc <ai_boostrap>
    /* USER CODE END 5 */
}
 8005068:	bf00      	nop
 800506a:	bd80      	pop	{r7, pc}
 800506c:	08009110 	.word	0x08009110
 8005070:	2000000c 	.word	0x2000000c

08005074 <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(void)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b082      	sub	sp, #8
 8005078:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 6 */
  int res = -1;
 800507a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800507e:	607b      	str	r3, [r7, #4]

  printf("TEMPLATE - run - main loop\r\n");
 8005080:	4814      	ldr	r0, [pc, #80]	; (80050d4 <MX_X_CUBE_AI_Process+0x60>)
 8005082:	f003 f8bd 	bl	8008200 <puts>

  if (network) {
 8005086:	4b14      	ldr	r3, [pc, #80]	; (80050d8 <MX_X_CUBE_AI_Process+0x64>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d010      	beq.n	80050b0 <MX_X_CUBE_AI_Process+0x3c>

//    do {
      /* 1 - acquire and pre-process input data */
      res = acquire_and_process_data(data_ins);
 800508e:	4813      	ldr	r0, [pc, #76]	; (80050dc <MX_X_CUBE_AI_Process+0x68>)
 8005090:	f7ff ffaa 	bl	8004fe8 <acquire_and_process_data>
 8005094:	6078      	str	r0, [r7, #4]
      /* 2 - process the data - call inference engine */
      if (res == 0)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d102      	bne.n	80050a2 <MX_X_CUBE_AI_Process+0x2e>
        res = ai_run();
 800509c:	f7ff ff7a 	bl	8004f94 <ai_run>
 80050a0:	6078      	str	r0, [r7, #4]
      /* 3- post-process the predictions */
      if (res == 0)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d103      	bne.n	80050b0 <MX_X_CUBE_AI_Process+0x3c>
        res = post_process(data_outs);
 80050a8:	480d      	ldr	r0, [pc, #52]	; (80050e0 <MX_X_CUBE_AI_Process+0x6c>)
 80050aa:	f7ff ffaf 	bl	800500c <post_process>
 80050ae:	6078      	str	r0, [r7, #4]
//    } while (res==0);
  }

  if (res) {
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d00a      	beq.n	80050cc <MX_X_CUBE_AI_Process+0x58>
    ai_error err = {AI_ERROR_INVALID_STATE, AI_ERROR_CODE_NETWORK};
 80050b6:	2311      	movs	r3, #17
 80050b8:	703b      	strb	r3, [r7, #0]
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	2210      	movs	r2, #16
 80050be:	f362 231f 	bfi	r3, r2, #8, #24
 80050c2:	603b      	str	r3, [r7, #0]
    ai_log_err(err, "Process has FAILED");
 80050c4:	4907      	ldr	r1, [pc, #28]	; (80050e4 <MX_X_CUBE_AI_Process+0x70>)
 80050c6:	6838      	ldr	r0, [r7, #0]
 80050c8:	f7ff fee0 	bl	8004e8c <ai_log_err>
  }
    /* USER CODE END 6 */
}
 80050cc:	bf00      	nop
 80050ce:	3708      	adds	r7, #8
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}
 80050d4:	08009130 	.word	0x08009130
 80050d8:	20001598 	.word	0x20001598
 80050dc:	20001154 	.word	0x20001154
 80050e0:	20001158 	.word	0x20001158
 80050e4:	0800914c 	.word	0x0800914c

080050e8 <network_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b082      	sub	sp, #8
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 80050f2:	683a      	ldr	r2, [r7, #0]
 80050f4:	2101      	movs	r1, #1
 80050f6:	4856      	ldr	r0, [pc, #344]	; (8005250 <network_configure_activations+0x168>)
 80050f8:	f000 fbe0 	bl	80058bc <ai_platform_get_activations_map>
 80050fc:	4603      	mov	r3, r0
 80050fe:	2b00      	cmp	r3, #0
 8005100:	f000 809c 	beq.w	800523c <network_configure_activations+0x154>
    /* Updating activations (byte) offsets */
    
    obs_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005104:	4b52      	ldr	r3, [pc, #328]	; (8005250 <network_configure_activations+0x168>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a52      	ldr	r2, [pc, #328]	; (8005254 <network_configure_activations+0x16c>)
 800510a:	6093      	str	r3, [r2, #8]
    obs_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800510c:	4b50      	ldr	r3, [pc, #320]	; (8005250 <network_configure_activations+0x168>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a50      	ldr	r2, [pc, #320]	; (8005254 <network_configure_activations+0x16c>)
 8005112:	60d3      	str	r3, [r2, #12]
    
    _model_running_mean_std_Sub_output_0_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005114:	4b4e      	ldr	r3, [pc, #312]	; (8005250 <network_configure_activations+0x168>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a4f      	ldr	r2, [pc, #316]	; (8005258 <network_configure_activations+0x170>)
 800511a:	6093      	str	r3, [r2, #8]
    _model_running_mean_std_Sub_output_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800511c:	4b4c      	ldr	r3, [pc, #304]	; (8005250 <network_configure_activations+0x168>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a4d      	ldr	r2, [pc, #308]	; (8005258 <network_configure_activations+0x170>)
 8005122:	60d3      	str	r3, [r2, #12]
    
    _model_running_mean_std_Div_output_0_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005124:	4b4a      	ldr	r3, [pc, #296]	; (8005250 <network_configure_activations+0x168>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a4c      	ldr	r2, [pc, #304]	; (800525c <network_configure_activations+0x174>)
 800512a:	6093      	str	r3, [r2, #8]
    _model_running_mean_std_Div_output_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800512c:	4b48      	ldr	r3, [pc, #288]	; (8005250 <network_configure_activations+0x168>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a4a      	ldr	r2, [pc, #296]	; (800525c <network_configure_activations+0x174>)
 8005132:	60d3      	str	r3, [r2, #12]
    
    _model_running_mean_std_Clip_output_0_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005134:	4b46      	ldr	r3, [pc, #280]	; (8005250 <network_configure_activations+0x168>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a49      	ldr	r2, [pc, #292]	; (8005260 <network_configure_activations+0x178>)
 800513a:	6093      	str	r3, [r2, #8]
    _model_running_mean_std_Clip_output_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800513c:	4b44      	ldr	r3, [pc, #272]	; (8005250 <network_configure_activations+0x168>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a47      	ldr	r2, [pc, #284]	; (8005260 <network_configure_activations+0x178>)
 8005142:	60d3      	str	r3, [r2, #12]
    
    _model_a2c_network_actor_mlp_0_Gemm_output_0_output_array.data = AI_PTR(g_network_activations_map[0] + 12);
 8005144:	4b42      	ldr	r3, [pc, #264]	; (8005250 <network_configure_activations+0x168>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	330c      	adds	r3, #12
 800514a:	4a46      	ldr	r2, [pc, #280]	; (8005264 <network_configure_activations+0x17c>)
 800514c:	6093      	str	r3, [r2, #8]
    _model_a2c_network_actor_mlp_0_Gemm_output_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 12);
 800514e:	4b40      	ldr	r3, [pc, #256]	; (8005250 <network_configure_activations+0x168>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	330c      	adds	r3, #12
 8005154:	4a43      	ldr	r2, [pc, #268]	; (8005264 <network_configure_activations+0x17c>)
 8005156:	60d3      	str	r3, [r2, #12]
    
    _model_a2c_network_actor_mlp_activations_0_Elu_output_0_output_array.data = AI_PTR(g_network_activations_map[0] + 12);
 8005158:	4b3d      	ldr	r3, [pc, #244]	; (8005250 <network_configure_activations+0x168>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	330c      	adds	r3, #12
 800515e:	4a42      	ldr	r2, [pc, #264]	; (8005268 <network_configure_activations+0x180>)
 8005160:	6093      	str	r3, [r2, #8]
    _model_a2c_network_actor_mlp_activations_0_Elu_output_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 12);
 8005162:	4b3b      	ldr	r3, [pc, #236]	; (8005250 <network_configure_activations+0x168>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	330c      	adds	r3, #12
 8005168:	4a3f      	ldr	r2, [pc, #252]	; (8005268 <network_configure_activations+0x180>)
 800516a:	60d3      	str	r3, [r2, #12]
    
    _model_a2c_network_actor_mlp_Concat_output_0_output_array.data = AI_PTR(g_network_activations_map[0] + 524);
 800516c:	4b38      	ldr	r3, [pc, #224]	; (8005250 <network_configure_activations+0x168>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8005174:	4a3d      	ldr	r2, [pc, #244]	; (800526c <network_configure_activations+0x184>)
 8005176:	6093      	str	r3, [r2, #8]
    _model_a2c_network_actor_mlp_Concat_output_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 524);
 8005178:	4b35      	ldr	r3, [pc, #212]	; (8005250 <network_configure_activations+0x168>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8005180:	4a3a      	ldr	r2, [pc, #232]	; (800526c <network_configure_activations+0x184>)
 8005182:	60d3      	str	r3, [r2, #12]
    
    _model_a2c_network_actor_mlp_1_Gemm_output_0_output_array.data = AI_PTR(g_network_activations_map[0] + 12);
 8005184:	4b32      	ldr	r3, [pc, #200]	; (8005250 <network_configure_activations+0x168>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	330c      	adds	r3, #12
 800518a:	4a39      	ldr	r2, [pc, #228]	; (8005270 <network_configure_activations+0x188>)
 800518c:	6093      	str	r3, [r2, #8]
    _model_a2c_network_actor_mlp_1_Gemm_output_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 12);
 800518e:	4b30      	ldr	r3, [pc, #192]	; (8005250 <network_configure_activations+0x168>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	330c      	adds	r3, #12
 8005194:	4a36      	ldr	r2, [pc, #216]	; (8005270 <network_configure_activations+0x188>)
 8005196:	60d3      	str	r3, [r2, #12]
    
    _model_a2c_network_actor_mlp_activations_1_Elu_output_0_output_array.data = AI_PTR(g_network_activations_map[0] + 268);
 8005198:	4b2d      	ldr	r3, [pc, #180]	; (8005250 <network_configure_activations+0x168>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80051a0:	4a34      	ldr	r2, [pc, #208]	; (8005274 <network_configure_activations+0x18c>)
 80051a2:	6093      	str	r3, [r2, #8]
    _model_a2c_network_actor_mlp_activations_1_Elu_output_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 268);
 80051a4:	4b2a      	ldr	r3, [pc, #168]	; (8005250 <network_configure_activations+0x168>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80051ac:	4a31      	ldr	r2, [pc, #196]	; (8005274 <network_configure_activations+0x18c>)
 80051ae:	60d3      	str	r3, [r2, #12]
    
    _model_a2c_network_actor_mlp_Concat_1_output_0_output_array.data = AI_PTR(g_network_activations_map[0] + 524);
 80051b0:	4b27      	ldr	r3, [pc, #156]	; (8005250 <network_configure_activations+0x168>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 80051b8:	4a2f      	ldr	r2, [pc, #188]	; (8005278 <network_configure_activations+0x190>)
 80051ba:	6093      	str	r3, [r2, #8]
    _model_a2c_network_actor_mlp_Concat_1_output_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 524);
 80051bc:	4b24      	ldr	r3, [pc, #144]	; (8005250 <network_configure_activations+0x168>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 80051c4:	4a2c      	ldr	r2, [pc, #176]	; (8005278 <network_configure_activations+0x190>)
 80051c6:	60d3      	str	r3, [r2, #12]
    
    _model_a2c_network_actor_mlp_2_Gemm_output_0_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80051c8:	4b21      	ldr	r3, [pc, #132]	; (8005250 <network_configure_activations+0x168>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a2b      	ldr	r2, [pc, #172]	; (800527c <network_configure_activations+0x194>)
 80051ce:	6093      	str	r3, [r2, #8]
    _model_a2c_network_actor_mlp_2_Gemm_output_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 80051d0:	4b1f      	ldr	r3, [pc, #124]	; (8005250 <network_configure_activations+0x168>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a29      	ldr	r2, [pc, #164]	; (800527c <network_configure_activations+0x194>)
 80051d6:	60d3      	str	r3, [r2, #12]
    
    _model_a2c_network_actor_mlp_activations_2_Elu_output_0_output_array.data = AI_PTR(g_network_activations_map[0] + 128);
 80051d8:	4b1d      	ldr	r3, [pc, #116]	; (8005250 <network_configure_activations+0x168>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	3380      	adds	r3, #128	; 0x80
 80051de:	4a28      	ldr	r2, [pc, #160]	; (8005280 <network_configure_activations+0x198>)
 80051e0:	6093      	str	r3, [r2, #8]
    _model_a2c_network_actor_mlp_activations_2_Elu_output_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 128);
 80051e2:	4b1b      	ldr	r3, [pc, #108]	; (8005250 <network_configure_activations+0x168>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	3380      	adds	r3, #128	; 0x80
 80051e8:	4a25      	ldr	r2, [pc, #148]	; (8005280 <network_configure_activations+0x198>)
 80051ea:	60d3      	str	r3, [r2, #12]
    
    value_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80051ec:	4b18      	ldr	r3, [pc, #96]	; (8005250 <network_configure_activations+0x168>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a24      	ldr	r2, [pc, #144]	; (8005284 <network_configure_activations+0x19c>)
 80051f2:	6093      	str	r3, [r2, #8]
    value_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 80051f4:	4b16      	ldr	r3, [pc, #88]	; (8005250 <network_configure_activations+0x168>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a22      	ldr	r2, [pc, #136]	; (8005284 <network_configure_activations+0x19c>)
 80051fa:	60d3      	str	r3, [r2, #12]
    
    mu_output_array.data = AI_PTR(g_network_activations_map[0] + 4);
 80051fc:	4b14      	ldr	r3, [pc, #80]	; (8005250 <network_configure_activations+0x168>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	3304      	adds	r3, #4
 8005202:	4a21      	ldr	r2, [pc, #132]	; (8005288 <network_configure_activations+0x1a0>)
 8005204:	6093      	str	r3, [r2, #8]
    mu_output_array.data_start = AI_PTR(g_network_activations_map[0] + 4);
 8005206:	4b12      	ldr	r3, [pc, #72]	; (8005250 <network_configure_activations+0x168>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	3304      	adds	r3, #4
 800520c:	4a1e      	ldr	r2, [pc, #120]	; (8005288 <network_configure_activations+0x1a0>)
 800520e:	60d3      	str	r3, [r2, #12]
    
    _model_a2c_network_Mul_output_0_output_array.data = AI_PTR(g_network_activations_map[0] + 8);
 8005210:	4b0f      	ldr	r3, [pc, #60]	; (8005250 <network_configure_activations+0x168>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	3308      	adds	r3, #8
 8005216:	4a1d      	ldr	r2, [pc, #116]	; (800528c <network_configure_activations+0x1a4>)
 8005218:	6093      	str	r3, [r2, #8]
    _model_a2c_network_Mul_output_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 8);
 800521a:	4b0d      	ldr	r3, [pc, #52]	; (8005250 <network_configure_activations+0x168>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	3308      	adds	r3, #8
 8005220:	4a1a      	ldr	r2, [pc, #104]	; (800528c <network_configure_activations+0x1a4>)
 8005222:	60d3      	str	r3, [r2, #12]
    
    log_std_output_array.data = AI_PTR(g_network_activations_map[0] + 12);
 8005224:	4b0a      	ldr	r3, [pc, #40]	; (8005250 <network_configure_activations+0x168>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	330c      	adds	r3, #12
 800522a:	4a19      	ldr	r2, [pc, #100]	; (8005290 <network_configure_activations+0x1a8>)
 800522c:	6093      	str	r3, [r2, #8]
    log_std_output_array.data_start = AI_PTR(g_network_activations_map[0] + 12);
 800522e:	4b08      	ldr	r3, [pc, #32]	; (8005250 <network_configure_activations+0x168>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	330c      	adds	r3, #12
 8005234:	4a16      	ldr	r2, [pc, #88]	; (8005290 <network_configure_activations+0x1a8>)
 8005236:	60d3      	str	r3, [r2, #12]
    
    return true;
 8005238:	2301      	movs	r3, #1
 800523a:	e005      	b.n	8005248 <network_configure_activations+0x160>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 800523c:	2213      	movs	r2, #19
 800523e:	2130      	movs	r1, #48	; 0x30
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f000 fc1f 	bl	8005a84 <ai_platform_network_set_error>
  return false;
 8005246:	2300      	movs	r3, #0
}
 8005248:	4618      	mov	r0, r3
 800524a:	3708      	adds	r7, #8
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}
 8005250:	200015a4 	.word	0x200015a4
 8005254:	20000010 	.word	0x20000010
 8005258:	20000020 	.word	0x20000020
 800525c:	20000030 	.word	0x20000030
 8005260:	20000040 	.word	0x20000040
 8005264:	20000050 	.word	0x20000050
 8005268:	20000060 	.word	0x20000060
 800526c:	20000070 	.word	0x20000070
 8005270:	20000080 	.word	0x20000080
 8005274:	20000090 	.word	0x20000090
 8005278:	200000a0 	.word	0x200000a0
 800527c:	200000b0 	.word	0x200000b0
 8005280:	200000c0 	.word	0x200000c0
 8005284:	200000d0 	.word	0x200000d0
 8005288:	200000e0 	.word	0x200000e0
 800528c:	200000f0 	.word	0x200000f0
 8005290:	20000100 	.word	0x20000100

08005294 <network_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b082      	sub	sp, #8
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 800529e:	683a      	ldr	r2, [r7, #0]
 80052a0:	2101      	movs	r1, #1
 80052a2:	4885      	ldr	r0, [pc, #532]	; (80054b8 <network_configure_weights+0x224>)
 80052a4:	f000 fab6 	bl	8005814 <ai_platform_get_weights_map>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	f000 80fa 	beq.w	80054a4 <network_configure_weights+0x210>
    /* Updating weights (byte) offsets */
    
    model__model_a2c_network_sigma_array.format |= AI_FMT_FLAG_CONST;
 80052b0:	4b82      	ldr	r3, [pc, #520]	; (80054bc <network_configure_weights+0x228>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052b8:	4a80      	ldr	r2, [pc, #512]	; (80054bc <network_configure_weights+0x228>)
 80052ba:	6013      	str	r3, [r2, #0]
    model__model_a2c_network_sigma_array.data = AI_PTR(g_network_weights_map[0] + 0);
 80052bc:	4b7e      	ldr	r3, [pc, #504]	; (80054b8 <network_configure_weights+0x224>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a7e      	ldr	r2, [pc, #504]	; (80054bc <network_configure_weights+0x228>)
 80052c2:	6093      	str	r3, [r2, #8]
    model__model_a2c_network_sigma_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 80052c4:	4b7c      	ldr	r3, [pc, #496]	; (80054b8 <network_configure_weights+0x224>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a7c      	ldr	r2, [pc, #496]	; (80054bc <network_configure_weights+0x228>)
 80052ca:	60d3      	str	r3, [r2, #12]
    
    _model_a2c_network_Constant_output_0_array.format |= AI_FMT_FLAG_CONST;
 80052cc:	4b7c      	ldr	r3, [pc, #496]	; (80054c0 <network_configure_weights+0x22c>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052d4:	4a7a      	ldr	r2, [pc, #488]	; (80054c0 <network_configure_weights+0x22c>)
 80052d6:	6013      	str	r3, [r2, #0]
    _model_a2c_network_Constant_output_0_array.data = AI_PTR(g_network_weights_map[0] + 4);
 80052d8:	4b77      	ldr	r3, [pc, #476]	; (80054b8 <network_configure_weights+0x224>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	3304      	adds	r3, #4
 80052de:	4a78      	ldr	r2, [pc, #480]	; (80054c0 <network_configure_weights+0x22c>)
 80052e0:	6093      	str	r3, [r2, #8]
    _model_a2c_network_Constant_output_0_array.data_start = AI_PTR(g_network_weights_map[0] + 4);
 80052e2:	4b75      	ldr	r3, [pc, #468]	; (80054b8 <network_configure_weights+0x224>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	3304      	adds	r3, #4
 80052e8:	4a75      	ldr	r2, [pc, #468]	; (80054c0 <network_configure_weights+0x22c>)
 80052ea:	60d3      	str	r3, [r2, #12]
    
    onnxDiv_43_array.format |= AI_FMT_FLAG_CONST;
 80052ec:	4b75      	ldr	r3, [pc, #468]	; (80054c4 <network_configure_weights+0x230>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052f4:	4a73      	ldr	r2, [pc, #460]	; (80054c4 <network_configure_weights+0x230>)
 80052f6:	6013      	str	r3, [r2, #0]
    onnxDiv_43_array.data = AI_PTR(g_network_weights_map[0] + 8);
 80052f8:	4b6f      	ldr	r3, [pc, #444]	; (80054b8 <network_configure_weights+0x224>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	3308      	adds	r3, #8
 80052fe:	4a71      	ldr	r2, [pc, #452]	; (80054c4 <network_configure_weights+0x230>)
 8005300:	6093      	str	r3, [r2, #8]
    onnxDiv_43_array.data_start = AI_PTR(g_network_weights_map[0] + 8);
 8005302:	4b6d      	ldr	r3, [pc, #436]	; (80054b8 <network_configure_weights+0x224>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	3308      	adds	r3, #8
 8005308:	4a6e      	ldr	r2, [pc, #440]	; (80054c4 <network_configure_weights+0x230>)
 800530a:	60d3      	str	r3, [r2, #12]
    
    onnxSub_40_array.format |= AI_FMT_FLAG_CONST;
 800530c:	4b6e      	ldr	r3, [pc, #440]	; (80054c8 <network_configure_weights+0x234>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005314:	4a6c      	ldr	r2, [pc, #432]	; (80054c8 <network_configure_weights+0x234>)
 8005316:	6013      	str	r3, [r2, #0]
    onnxSub_40_array.data = AI_PTR(g_network_weights_map[0] + 20);
 8005318:	4b67      	ldr	r3, [pc, #412]	; (80054b8 <network_configure_weights+0x224>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	3314      	adds	r3, #20
 800531e:	4a6a      	ldr	r2, [pc, #424]	; (80054c8 <network_configure_weights+0x234>)
 8005320:	6093      	str	r3, [r2, #8]
    onnxSub_40_array.data_start = AI_PTR(g_network_weights_map[0] + 20);
 8005322:	4b65      	ldr	r3, [pc, #404]	; (80054b8 <network_configure_weights+0x224>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	3314      	adds	r3, #20
 8005328:	4a67      	ldr	r2, [pc, #412]	; (80054c8 <network_configure_weights+0x234>)
 800532a:	60d3      	str	r3, [r2, #12]
    
    _model_a2c_network_actor_mlp_0_Gemm_output_0_weights_array.format |= AI_FMT_FLAG_CONST;
 800532c:	4b67      	ldr	r3, [pc, #412]	; (80054cc <network_configure_weights+0x238>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005334:	4a65      	ldr	r2, [pc, #404]	; (80054cc <network_configure_weights+0x238>)
 8005336:	6013      	str	r3, [r2, #0]
    _model_a2c_network_actor_mlp_0_Gemm_output_0_weights_array.data = AI_PTR(g_network_weights_map[0] + 32);
 8005338:	4b5f      	ldr	r3, [pc, #380]	; (80054b8 <network_configure_weights+0x224>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	3320      	adds	r3, #32
 800533e:	4a63      	ldr	r2, [pc, #396]	; (80054cc <network_configure_weights+0x238>)
 8005340:	6093      	str	r3, [r2, #8]
    _model_a2c_network_actor_mlp_0_Gemm_output_0_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 32);
 8005342:	4b5d      	ldr	r3, [pc, #372]	; (80054b8 <network_configure_weights+0x224>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	3320      	adds	r3, #32
 8005348:	4a60      	ldr	r2, [pc, #384]	; (80054cc <network_configure_weights+0x238>)
 800534a:	60d3      	str	r3, [r2, #12]
    
    _model_a2c_network_actor_mlp_0_Gemm_output_0_bias_array.format |= AI_FMT_FLAG_CONST;
 800534c:	4b60      	ldr	r3, [pc, #384]	; (80054d0 <network_configure_weights+0x23c>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005354:	4a5e      	ldr	r2, [pc, #376]	; (80054d0 <network_configure_weights+0x23c>)
 8005356:	6013      	str	r3, [r2, #0]
    _model_a2c_network_actor_mlp_0_Gemm_output_0_bias_array.data = AI_PTR(g_network_weights_map[0] + 1568);
 8005358:	4b57      	ldr	r3, [pc, #348]	; (80054b8 <network_configure_weights+0x224>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f503 63c4 	add.w	r3, r3, #1568	; 0x620
 8005360:	4a5b      	ldr	r2, [pc, #364]	; (80054d0 <network_configure_weights+0x23c>)
 8005362:	6093      	str	r3, [r2, #8]
    _model_a2c_network_actor_mlp_0_Gemm_output_0_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 1568);
 8005364:	4b54      	ldr	r3, [pc, #336]	; (80054b8 <network_configure_weights+0x224>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f503 63c4 	add.w	r3, r3, #1568	; 0x620
 800536c:	4a58      	ldr	r2, [pc, #352]	; (80054d0 <network_configure_weights+0x23c>)
 800536e:	60d3      	str	r3, [r2, #12]
    
    _model_a2c_network_actor_mlp_1_Gemm_output_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8005370:	4b58      	ldr	r3, [pc, #352]	; (80054d4 <network_configure_weights+0x240>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005378:	4a56      	ldr	r2, [pc, #344]	; (80054d4 <network_configure_weights+0x240>)
 800537a:	6013      	str	r3, [r2, #0]
    _model_a2c_network_actor_mlp_1_Gemm_output_0_weights_array.data = AI_PTR(g_network_weights_map[0] + 3104);
 800537c:	4b4e      	ldr	r3, [pc, #312]	; (80054b8 <network_configure_weights+0x224>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f503 6342 	add.w	r3, r3, #3104	; 0xc20
 8005384:	4a53      	ldr	r2, [pc, #332]	; (80054d4 <network_configure_weights+0x240>)
 8005386:	6093      	str	r3, [r2, #8]
    _model_a2c_network_actor_mlp_1_Gemm_output_0_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 2080);
 8005388:	4b4b      	ldr	r3, [pc, #300]	; (80054b8 <network_configure_weights+0x224>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 8005390:	4a50      	ldr	r2, [pc, #320]	; (80054d4 <network_configure_weights+0x240>)
 8005392:	60d3      	str	r3, [r2, #12]
    
    _model_a2c_network_actor_mlp_1_Gemm_output_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8005394:	4b50      	ldr	r3, [pc, #320]	; (80054d8 <network_configure_weights+0x244>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800539c:	4a4e      	ldr	r2, [pc, #312]	; (80054d8 <network_configure_weights+0x244>)
 800539e:	6013      	str	r3, [r2, #0]
    _model_a2c_network_actor_mlp_1_Gemm_output_0_bias_array.data = AI_PTR(g_network_weights_map[0] + 11488);
 80053a0:	4b45      	ldr	r3, [pc, #276]	; (80054b8 <network_configure_weights+0x224>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f503 5333 	add.w	r3, r3, #11456	; 0x2cc0
 80053a8:	3320      	adds	r3, #32
 80053aa:	4a4b      	ldr	r2, [pc, #300]	; (80054d8 <network_configure_weights+0x244>)
 80053ac:	6093      	str	r3, [r2, #8]
    _model_a2c_network_actor_mlp_1_Gemm_output_0_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 11488);
 80053ae:	4b42      	ldr	r3, [pc, #264]	; (80054b8 <network_configure_weights+0x224>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f503 5333 	add.w	r3, r3, #11456	; 0x2cc0
 80053b6:	3320      	adds	r3, #32
 80053b8:	4a47      	ldr	r2, [pc, #284]	; (80054d8 <network_configure_weights+0x244>)
 80053ba:	60d3      	str	r3, [r2, #12]
    
    _model_a2c_network_actor_mlp_2_Gemm_output_0_weights_array.format |= AI_FMT_FLAG_CONST;
 80053bc:	4b47      	ldr	r3, [pc, #284]	; (80054dc <network_configure_weights+0x248>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053c4:	4a45      	ldr	r2, [pc, #276]	; (80054dc <network_configure_weights+0x248>)
 80053c6:	6013      	str	r3, [r2, #0]
    _model_a2c_network_actor_mlp_2_Gemm_output_0_weights_array.data = AI_PTR(g_network_weights_map[0] + 12768);
 80053c8:	4b3b      	ldr	r3, [pc, #236]	; (80054b8 <network_configure_weights+0x224>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f503 5347 	add.w	r3, r3, #12736	; 0x31c0
 80053d0:	3320      	adds	r3, #32
 80053d2:	4a42      	ldr	r2, [pc, #264]	; (80054dc <network_configure_weights+0x248>)
 80053d4:	6093      	str	r3, [r2, #8]
    _model_a2c_network_actor_mlp_2_Gemm_output_0_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 11744);
 80053d6:	4b38      	ldr	r3, [pc, #224]	; (80054b8 <network_configure_weights+0x224>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f503 5337 	add.w	r3, r3, #11712	; 0x2dc0
 80053de:	3320      	adds	r3, #32
 80053e0:	4a3e      	ldr	r2, [pc, #248]	; (80054dc <network_configure_weights+0x248>)
 80053e2:	60d3      	str	r3, [r2, #12]
    
    _model_a2c_network_actor_mlp_2_Gemm_output_0_bias_array.format |= AI_FMT_FLAG_CONST;
 80053e4:	4b3e      	ldr	r3, [pc, #248]	; (80054e0 <network_configure_weights+0x24c>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053ec:	4a3c      	ldr	r2, [pc, #240]	; (80054e0 <network_configure_weights+0x24c>)
 80053ee:	6013      	str	r3, [r2, #0]
    _model_a2c_network_actor_mlp_2_Gemm_output_0_bias_array.data = AI_PTR(g_network_weights_map[0] + 14912);
 80053f0:	4b31      	ldr	r3, [pc, #196]	; (80054b8 <network_configure_weights+0x224>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f503 5369 	add.w	r3, r3, #14912	; 0x3a40
 80053f8:	4a39      	ldr	r2, [pc, #228]	; (80054e0 <network_configure_weights+0x24c>)
 80053fa:	6093      	str	r3, [r2, #8]
    _model_a2c_network_actor_mlp_2_Gemm_output_0_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 14912);
 80053fc:	4b2e      	ldr	r3, [pc, #184]	; (80054b8 <network_configure_weights+0x224>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f503 5369 	add.w	r3, r3, #14912	; 0x3a40
 8005404:	4a36      	ldr	r2, [pc, #216]	; (80054e0 <network_configure_weights+0x24c>)
 8005406:	60d3      	str	r3, [r2, #12]
    
    value_weights_array.format |= AI_FMT_FLAG_CONST;
 8005408:	4b36      	ldr	r3, [pc, #216]	; (80054e4 <network_configure_weights+0x250>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005410:	4a34      	ldr	r2, [pc, #208]	; (80054e4 <network_configure_weights+0x250>)
 8005412:	6013      	str	r3, [r2, #0]
    value_weights_array.data = AI_PTR(g_network_weights_map[0] + 15040);
 8005414:	4b28      	ldr	r3, [pc, #160]	; (80054b8 <network_configure_weights+0x224>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f503 536b 	add.w	r3, r3, #15040	; 0x3ac0
 800541c:	4a31      	ldr	r2, [pc, #196]	; (80054e4 <network_configure_weights+0x250>)
 800541e:	6093      	str	r3, [r2, #8]
    value_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 15040);
 8005420:	4b25      	ldr	r3, [pc, #148]	; (80054b8 <network_configure_weights+0x224>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f503 536b 	add.w	r3, r3, #15040	; 0x3ac0
 8005428:	4a2e      	ldr	r2, [pc, #184]	; (80054e4 <network_configure_weights+0x250>)
 800542a:	60d3      	str	r3, [r2, #12]
    
    value_bias_array.format |= AI_FMT_FLAG_CONST;
 800542c:	4b2e      	ldr	r3, [pc, #184]	; (80054e8 <network_configure_weights+0x254>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005434:	4a2c      	ldr	r2, [pc, #176]	; (80054e8 <network_configure_weights+0x254>)
 8005436:	6013      	str	r3, [r2, #0]
    value_bias_array.data = AI_PTR(g_network_weights_map[0] + 15168);
 8005438:	4b1f      	ldr	r3, [pc, #124]	; (80054b8 <network_configure_weights+0x224>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f503 536d 	add.w	r3, r3, #15168	; 0x3b40
 8005440:	4a29      	ldr	r2, [pc, #164]	; (80054e8 <network_configure_weights+0x254>)
 8005442:	6093      	str	r3, [r2, #8]
    value_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 15168);
 8005444:	4b1c      	ldr	r3, [pc, #112]	; (80054b8 <network_configure_weights+0x224>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f503 536d 	add.w	r3, r3, #15168	; 0x3b40
 800544c:	4a26      	ldr	r2, [pc, #152]	; (80054e8 <network_configure_weights+0x254>)
 800544e:	60d3      	str	r3, [r2, #12]
    
    mu_weights_array.format |= AI_FMT_FLAG_CONST;
 8005450:	4b26      	ldr	r3, [pc, #152]	; (80054ec <network_configure_weights+0x258>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005458:	4a24      	ldr	r2, [pc, #144]	; (80054ec <network_configure_weights+0x258>)
 800545a:	6013      	str	r3, [r2, #0]
    mu_weights_array.data = AI_PTR(g_network_weights_map[0] + 15172);
 800545c:	4b16      	ldr	r3, [pc, #88]	; (80054b8 <network_configure_weights+0x224>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f503 536d 	add.w	r3, r3, #15168	; 0x3b40
 8005464:	3304      	adds	r3, #4
 8005466:	4a21      	ldr	r2, [pc, #132]	; (80054ec <network_configure_weights+0x258>)
 8005468:	6093      	str	r3, [r2, #8]
    mu_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 15172);
 800546a:	4b13      	ldr	r3, [pc, #76]	; (80054b8 <network_configure_weights+0x224>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f503 536d 	add.w	r3, r3, #15168	; 0x3b40
 8005472:	3304      	adds	r3, #4
 8005474:	4a1d      	ldr	r2, [pc, #116]	; (80054ec <network_configure_weights+0x258>)
 8005476:	60d3      	str	r3, [r2, #12]
    
    mu_bias_array.format |= AI_FMT_FLAG_CONST;
 8005478:	4b1d      	ldr	r3, [pc, #116]	; (80054f0 <network_configure_weights+0x25c>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005480:	4a1b      	ldr	r2, [pc, #108]	; (80054f0 <network_configure_weights+0x25c>)
 8005482:	6013      	str	r3, [r2, #0]
    mu_bias_array.data = AI_PTR(g_network_weights_map[0] + 15300);
 8005484:	4b0c      	ldr	r3, [pc, #48]	; (80054b8 <network_configure_weights+0x224>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f503 536f 	add.w	r3, r3, #15296	; 0x3bc0
 800548c:	3304      	adds	r3, #4
 800548e:	4a18      	ldr	r2, [pc, #96]	; (80054f0 <network_configure_weights+0x25c>)
 8005490:	6093      	str	r3, [r2, #8]
    mu_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 15300);
 8005492:	4b09      	ldr	r3, [pc, #36]	; (80054b8 <network_configure_weights+0x224>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f503 536f 	add.w	r3, r3, #15296	; 0x3bc0
 800549a:	3304      	adds	r3, #4
 800549c:	4a14      	ldr	r2, [pc, #80]	; (80054f0 <network_configure_weights+0x25c>)
 800549e:	60d3      	str	r3, [r2, #12]
    
    return true;
 80054a0:	2301      	movs	r3, #1
 80054a2:	e005      	b.n	80054b0 <network_configure_weights+0x21c>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 80054a4:	2212      	movs	r2, #18
 80054a6:	2130      	movs	r1, #48	; 0x30
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f000 faeb 	bl	8005a84 <ai_platform_network_set_error>
  return false;
 80054ae:	2300      	movs	r3, #0
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3708      	adds	r7, #8
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	200015a8 	.word	0x200015a8
 80054bc:	20000110 	.word	0x20000110
 80054c0:	20000120 	.word	0x20000120
 80054c4:	20000130 	.word	0x20000130
 80054c8:	20000140 	.word	0x20000140
 80054cc:	20000150 	.word	0x20000150
 80054d0:	20000160 	.word	0x20000160
 80054d4:	20000170 	.word	0x20000170
 80054d8:	20000180 	.word	0x20000180
 80054dc:	20000190 	.word	0x20000190
 80054e0:	200001a0 	.word	0x200001a0
 80054e4:	200001b0 	.word	0x200001b0
 80054e8:	200001c0 	.word	0x200001c0
 80054ec:	200001d0 	.word	0x200001d0
 80054f0:	200001e0 	.word	0x200001e0

080054f4 <ai_network_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b082      	sub	sp, #8
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f000 fa53 	bl	80059a8 <ai_platform_network_get_error>
 8005502:	4603      	mov	r3, r0
}
 8005504:	4618      	mov	r0, r3
 8005506:	3708      	adds	r7, #8
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af02      	add	r7, sp, #8
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8005516:	2300      	movs	r3, #0
 8005518:	9301      	str	r3, [sp, #4]
 800551a:	2305      	movs	r3, #5
 800551c:	9300      	str	r3, [sp, #0]
 800551e:	2301      	movs	r3, #1
 8005520:	4a04      	ldr	r2, [pc, #16]	; (8005534 <ai_network_create+0x28>)
 8005522:	6839      	ldr	r1, [r7, #0]
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f000 fc59 	bl	8005ddc <ai_platform_network_create>
 800552a:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800552c:	4618      	mov	r0, r3
 800552e:	3708      	adds	r7, #8
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}
 8005534:	20000ef4 	.word	0x20000ef4

08005538 <ai_network_create_and_init>:

AI_API_ENTRY
ai_error ai_network_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b096      	sub	sp, #88	; 0x58
 800553c:	af00      	add	r7, sp, #0
 800553e:	60f8      	str	r0, [r7, #12]
 8005540:	60b9      	str	r1, [r7, #8]
 8005542:	607a      	str	r2, [r7, #4]
    ai_error err;
    ai_network_params params;

    err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 8005544:	2100      	movs	r1, #0
 8005546:	68f8      	ldr	r0, [r7, #12]
 8005548:	f7ff ffe0 	bl	800550c <ai_network_create>
 800554c:	4603      	mov	r3, r0
 800554e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (err.type != AI_ERROR_NONE)
 8005550:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8005554:	2b00      	cmp	r3, #0
 8005556:	d001      	beq.n	800555c <ai_network_create_and_init+0x24>
        return err;
 8005558:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800555a:	e05d      	b.n	8005618 <ai_network_create_and_init+0xe0>
    if (ai_network_data_params_get(&params) != true) {
 800555c:	f107 0314 	add.w	r3, r7, #20
 8005560:	4618      	mov	r0, r3
 8005562:	f000 f8dd 	bl	8005720 <ai_network_data_params_get>
 8005566:	4603      	mov	r3, r0
 8005568:	f083 0301 	eor.w	r3, r3, #1
 800556c:	b2db      	uxtb	r3, r3
 800556e:	2b00      	cmp	r3, #0
 8005570:	d008      	beq.n	8005584 <ai_network_create_and_init+0x4c>
        err = ai_network_get_error(*network);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4618      	mov	r0, r3
 8005578:	f7ff ffbc 	bl	80054f4 <ai_network_get_error>
 800557c:	4603      	mov	r3, r0
 800557e:	64fb      	str	r3, [r7, #76]	; 0x4c
        return err;
 8005580:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005582:	e049      	b.n	8005618 <ai_network_create_and_init+0xe0>
    }
#if defined(AI_NETWORK_DATA_ACTIVATIONS_COUNT)
    if (activations) {
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d016      	beq.n	80055b8 <ai_network_create_and_init+0x80>
        /* set the addresses of the activations buffers */
        for (int idx=0;idx<params.map_activations.size;idx++)
 800558a:	2300      	movs	r3, #0
 800558c:	657b      	str	r3, [r7, #84]	; 0x54
 800558e:	e00e      	b.n	80055ae <ai_network_create_and_init+0x76>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8005590:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005592:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	68ba      	ldr	r2, [r7, #8]
 8005598:	4413      	add	r3, r2
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	f107 0314 	add.w	r3, r7, #20
 80055a0:	330c      	adds	r3, #12
 80055a2:	4618      	mov	r0, r3
 80055a4:	f000 f922 	bl	80057ec <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 80055a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055aa:	3301      	adds	r3, #1
 80055ac:	657b      	str	r3, [r7, #84]	; 0x54
 80055ae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80055b0:	461a      	mov	r2, r3
 80055b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055b4:	4293      	cmp	r3, r2
 80055b6:	dbeb      	blt.n	8005590 <ai_network_create_and_init+0x58>
    }
#endif
#if defined(AI_NETWORK_DATA_WEIGHTS_COUNT)
    if (weights) {
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d016      	beq.n	80055ec <ai_network_create_and_init+0xb4>
        /* set the addresses of the weight buffers */
        for (int idx=0;idx<params.map_weights.size;idx++)
 80055be:	2300      	movs	r3, #0
 80055c0:	653b      	str	r3, [r7, #80]	; 0x50
 80055c2:	e00e      	b.n	80055e2 <ai_network_create_and_init+0xaa>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 80055c4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80055c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	4413      	add	r3, r2
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	f107 0314 	add.w	r3, r7, #20
 80055d4:	3304      	adds	r3, #4
 80055d6:	4618      	mov	r0, r3
 80055d8:	f000 f908 	bl	80057ec <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 80055dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055de:	3301      	adds	r3, #1
 80055e0:	653b      	str	r3, [r7, #80]	; 0x50
 80055e2:	8b7b      	ldrh	r3, [r7, #26]
 80055e4:	461a      	mov	r2, r3
 80055e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055e8:	4293      	cmp	r3, r2
 80055ea:	dbeb      	blt.n	80055c4 <ai_network_create_and_init+0x8c>
    }
#endif
    if (ai_network_init(*network, &params) != true) {
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f107 0214 	add.w	r2, r7, #20
 80055f4:	4611      	mov	r1, r2
 80055f6:	4618      	mov	r0, r3
 80055f8:	f000 f846 	bl	8005688 <ai_network_init>
 80055fc:	4603      	mov	r3, r0
 80055fe:	f083 0301 	eor.w	r3, r3, #1
 8005602:	b2db      	uxtb	r3, r3
 8005604:	2b00      	cmp	r3, #0
 8005606:	d006      	beq.n	8005616 <ai_network_create_and_init+0xde>
        err = ai_network_get_error(*network);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4618      	mov	r0, r3
 800560e:	f7ff ff71 	bl	80054f4 <ai_network_get_error>
 8005612:	4603      	mov	r3, r0
 8005614:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    return err;
 8005616:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8005618:	4618      	mov	r0, r3
 800561a:	3758      	adds	r7, #88	; 0x58
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}

08005620 <ai_network_inputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b082      	sub	sp, #8
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d104      	bne.n	800563a <ai_network_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8005630:	4b06      	ldr	r3, [pc, #24]	; (800564c <ai_network_inputs_get+0x2c>)
 8005632:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	4a06      	ldr	r2, [pc, #24]	; (8005650 <ai_network_inputs_get+0x30>)
 8005638:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 800563a:	6839      	ldr	r1, [r7, #0]
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f000 fa27 	bl	8005a90 <ai_platform_inputs_get>
 8005642:	4603      	mov	r3, r0
}
 8005644:	4618      	mov	r0, r3
 8005646:	3708      	adds	r7, #8
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}
 800564c:	20000ef4 	.word	0x20000ef4
 8005650:	a1c00100 	.word	0xa1c00100

08005654 <ai_network_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b082      	sub	sp, #8
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d104      	bne.n	800566e <ai_network_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8005664:	4b06      	ldr	r3, [pc, #24]	; (8005680 <ai_network_outputs_get+0x2c>)
 8005666:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	4a06      	ldr	r2, [pc, #24]	; (8005684 <ai_network_outputs_get+0x30>)
 800566c:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 800566e:	6839      	ldr	r1, [r7, #0]
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f000 fae3 	bl	8005c3c <ai_platform_outputs_get>
 8005676:	4603      	mov	r3, r0
}
 8005678:	4618      	mov	r0, r3
 800567a:	3708      	adds	r7, #8
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}
 8005680:	20000ef4 	.word	0x20000ef4
 8005684:	a1c00100 	.word	0xa1c00100

08005688 <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b084      	sub	sp, #16
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8005692:	6839      	ldr	r1, [r7, #0]
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f000 fc77 	bl	8005f88 <ai_platform_network_init>
 800569a:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d101      	bne.n	80056a6 <ai_network_init+0x1e>
 80056a2:	2300      	movs	r3, #0
 80056a4:	e028      	b.n	80056f8 <ai_network_init+0x70>

  ai_bool ok = true;
 80056a6:	2301      	movs	r3, #1
 80056a8:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, params);
 80056aa:	6839      	ldr	r1, [r7, #0]
 80056ac:	68f8      	ldr	r0, [r7, #12]
 80056ae:	f7ff fdf1 	bl	8005294 <network_configure_weights>
 80056b2:	4603      	mov	r3, r0
 80056b4:	461a      	mov	r2, r3
 80056b6:	7afb      	ldrb	r3, [r7, #11]
 80056b8:	4013      	ands	r3, r2
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	bf14      	ite	ne
 80056be:	2301      	movne	r3, #1
 80056c0:	2300      	moveq	r3, #0
 80056c2:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, params);
 80056c4:	6839      	ldr	r1, [r7, #0]
 80056c6:	68f8      	ldr	r0, [r7, #12]
 80056c8:	f7ff fd0e 	bl	80050e8 <network_configure_activations>
 80056cc:	4603      	mov	r3, r0
 80056ce:	461a      	mov	r2, r3
 80056d0:	7afb      	ldrb	r3, [r7, #11]
 80056d2:	4013      	ands	r3, r2
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	bf14      	ite	ne
 80056d8:	2301      	movne	r3, #1
 80056da:	2300      	moveq	r3, #0
 80056dc:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f000 fd40 	bl	8006164 <ai_platform_network_post_init>
 80056e4:	4603      	mov	r3, r0
 80056e6:	461a      	mov	r2, r3
 80056e8:	7afb      	ldrb	r3, [r7, #11]
 80056ea:	4013      	ands	r3, r2
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	bf14      	ite	ne
 80056f0:	2301      	movne	r3, #1
 80056f2:	2300      	moveq	r3, #0
 80056f4:	72fb      	strb	r3, [r7, #11]

  return ok;
 80056f6:	7afb      	ldrb	r3, [r7, #11]
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3710      	adds	r7, #16
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}

08005700 <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b084      	sub	sp, #16
 8005704:	af00      	add	r7, sp, #0
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	68b9      	ldr	r1, [r7, #8]
 8005710:	68f8      	ldr	r0, [r7, #12]
 8005712:	f000 fdaf 	bl	8006274 <ai_platform_network_process>
 8005716:	4603      	mov	r3, r0
}
 8005718:	4618      	mov	r0, r3
 800571a:	3710      	adds	r7, #16
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}

08005720 <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b086      	sub	sp, #24
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d101      	bne.n	8005732 <ai_network_data_params_get+0x12>
 800572e:	2300      	movs	r3, #0
 8005730:	e016      	b.n	8005760 <ai_network_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 8005732:	4a0d      	ldr	r2, [pc, #52]	; (8005768 <ai_network_data_params_get+0x48>)
 8005734:	f107 0310 	add.w	r3, r7, #16
 8005738:	e892 0003 	ldmia.w	r2, {r0, r1}
 800573c:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8005740:	4a0a      	ldr	r2, [pc, #40]	; (800576c <ai_network_data_params_get+0x4c>)
 8005742:	f107 0308 	add.w	r3, r7, #8
 8005746:	e892 0003 	ldmia.w	r2, {r0, r1}
 800574a:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 800574e:	f107 0210 	add.w	r2, r7, #16
 8005752:	f107 0308 	add.w	r3, r7, #8
 8005756:	4619      	mov	r1, r3
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f000 f903 	bl	8005964 <ai_platform_bind_network_params>
 800575e:	4603      	mov	r3, r0
}
 8005760:	4618      	mov	r0, r3
 8005762:	3718      	adds	r7, #24
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}
 8005768:	08009180 	.word	0x08009180
 800576c:	08009188 	.word	0x08009188

08005770 <ai_buffer_get_size>:
 8005770:	b378      	cbz	r0, 80057d2 <ai_buffer_get_size+0x62>
 8005772:	b410      	push	{r4}
 8005774:	6803      	ldr	r3, [r0, #0]
 8005776:	4a17      	ldr	r2, [pc, #92]	; (80057d4 <ai_buffer_get_size+0x64>)
 8005778:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800577c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005780:	4293      	cmp	r3, r2
 8005782:	d01e      	beq.n	80057c2 <ai_buffer_get_size+0x52>
 8005784:	6984      	ldr	r4, [r0, #24]
 8005786:	6862      	ldr	r2, [r4, #4]
 8005788:	7d03      	ldrb	r3, [r0, #20]
 800578a:	6941      	ldr	r1, [r0, #20]
 800578c:	f1a3 0301 	sub.w	r3, r3, #1
 8005790:	fab3 f383 	clz	r3, r3
 8005794:	095b      	lsrs	r3, r3, #5
 8005796:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 800579a:	f3c1 2017 	ubfx	r0, r1, #8, #24
 800579e:	da0b      	bge.n	80057b8 <ai_buffer_get_size+0x48>
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d102      	bne.n	80057aa <ai_buffer_get_size+0x3a>
 80057a4:	2802      	cmp	r0, #2
 80057a6:	d007      	beq.n	80057b8 <ai_buffer_get_size+0x48>
 80057a8:	2302      	movs	r3, #2
 80057aa:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 80057ae:	3301      	adds	r3, #1
 80057b0:	4298      	cmp	r0, r3
 80057b2:	fb01 f202 	mul.w	r2, r1, r2
 80057b6:	d1f3      	bne.n	80057a0 <ai_buffer_get_size+0x30>
 80057b8:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 80057bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80057c0:	4770      	bx	lr
 80057c2:	2900      	cmp	r1, #0
 80057c4:	d0de      	beq.n	8005784 <ai_buffer_get_size+0x14>
 80057c6:	6984      	ldr	r4, [r0, #24]
 80057c8:	6863      	ldr	r3, [r4, #4]
 80057ca:	331f      	adds	r3, #31
 80057cc:	f023 021f 	bic.w	r2, r3, #31
 80057d0:	e7da      	b.n	8005788 <ai_buffer_get_size+0x18>
 80057d2:	4770      	bx	lr
 80057d4:	000400c0 	.word	0x000400c0

080057d8 <ai_buffer_array_sane>:
 80057d8:	b138      	cbz	r0, 80057ea <ai_buffer_array_sane+0x12>
 80057da:	6843      	ldr	r3, [r0, #4]
 80057dc:	b123      	cbz	r3, 80057e8 <ai_buffer_array_sane+0x10>
 80057de:	8840      	ldrh	r0, [r0, #2]
 80057e0:	3800      	subs	r0, #0
 80057e2:	bf18      	it	ne
 80057e4:	2001      	movne	r0, #1
 80057e6:	4770      	bx	lr
 80057e8:	4618      	mov	r0, r3
 80057ea:	4770      	bx	lr

080057ec <ai_buffer_array_item_set_address>:
 80057ec:	b150      	cbz	r0, 8005804 <ai_buffer_array_item_set_address+0x18>
 80057ee:	6843      	ldr	r3, [r0, #4]
 80057f0:	b14b      	cbz	r3, 8005806 <ai_buffer_array_item_set_address+0x1a>
 80057f2:	8840      	ldrh	r0, [r0, #2]
 80057f4:	b900      	cbnz	r0, 80057f8 <ai_buffer_array_item_set_address+0xc>
 80057f6:	4770      	bx	lr
 80057f8:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80057fc:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8005800:	2001      	movs	r0, #1
 8005802:	604a      	str	r2, [r1, #4]
 8005804:	4770      	bx	lr
 8005806:	4618      	mov	r0, r3
 8005808:	4770      	bx	lr
 800580a:	bf00      	nop

0800580c <_ai_platform_acquire_crc>:
 800580c:	2001      	movs	r0, #1
 800580e:	4770      	bx	lr

08005810 <_ai_platform_release_crc>:
 8005810:	4770      	bx	lr
 8005812:	bf00      	nop

08005814 <ai_platform_get_weights_map>:
 8005814:	2a00      	cmp	r2, #0
 8005816:	d037      	beq.n	8005888 <ai_platform_get_weights_map+0x74>
 8005818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800581a:	4604      	mov	r4, r0
 800581c:	b1a0      	cbz	r0, 8005848 <ai_platform_get_weights_map+0x34>
 800581e:	460f      	mov	r7, r1
 8005820:	b191      	cbz	r1, 8005848 <ai_platform_get_weights_map+0x34>
 8005822:	4b25      	ldr	r3, [pc, #148]	; (80058b8 <ai_platform_get_weights_map+0xa4>)
 8005824:	6810      	ldr	r0, [r2, #0]
 8005826:	4298      	cmp	r0, r3
 8005828:	4615      	mov	r5, r2
 800582a:	d00f      	beq.n	800584c <ai_platform_get_weights_map+0x38>
 800582c:	6855      	ldr	r5, [r2, #4]
 800582e:	b15d      	cbz	r5, 8005848 <ai_platform_get_weights_map+0x34>
 8005830:	682e      	ldr	r6, [r5, #0]
 8005832:	429e      	cmp	r6, r3
 8005834:	d02a      	beq.n	800588c <ai_platform_get_weights_map+0x78>
 8005836:	f1a1 0001 	sub.w	r0, r1, #1
 800583a:	6025      	str	r5, [r4, #0]
 800583c:	fab0 f080 	clz	r0, r0
 8005840:	0940      	lsrs	r0, r0, #5
 8005842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005844:	42a7      	cmp	r7, r4
 8005846:	d034      	beq.n	80058b2 <ai_platform_get_weights_map+0x9e>
 8005848:	2000      	movs	r0, #0
 800584a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800584c:	1d10      	adds	r0, r2, #4
 800584e:	f7ff ffc3 	bl	80057d8 <ai_buffer_array_sane>
 8005852:	2800      	cmp	r0, #0
 8005854:	d0f8      	beq.n	8005848 <ai_platform_get_weights_map+0x34>
 8005856:	88eb      	ldrh	r3, [r5, #6]
 8005858:	429f      	cmp	r7, r3
 800585a:	d1f5      	bne.n	8005848 <ai_platform_get_weights_map+0x34>
 800585c:	f04f 0e00 	mov.w	lr, #0
 8005860:	1f23      	subs	r3, r4, #4
 8005862:	4670      	mov	r0, lr
 8005864:	68aa      	ldr	r2, [r5, #8]
 8005866:	eb02 0c0e 	add.w	ip, r2, lr
 800586a:	f10e 0e1c 	add.w	lr, lr, #28
 800586e:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8005872:	b124      	cbz	r4, 800587e <ai_platform_get_weights_map+0x6a>
 8005874:	3001      	adds	r0, #1
 8005876:	4287      	cmp	r7, r0
 8005878:	f843 4f04 	str.w	r4, [r3, #4]!
 800587c:	d1f2      	bne.n	8005864 <ai_platform_get_weights_map+0x50>
 800587e:	1a38      	subs	r0, r7, r0
 8005880:	fab0 f080 	clz	r0, r0
 8005884:	0940      	lsrs	r0, r0, #5
 8005886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005888:	2000      	movs	r0, #0
 800588a:	4770      	bx	lr
 800588c:	1f23      	subs	r3, r4, #4
 800588e:	4628      	mov	r0, r5
 8005890:	2400      	movs	r4, #0
 8005892:	e000      	b.n	8005896 <ai_platform_get_weights_map+0x82>
 8005894:	4614      	mov	r4, r2
 8005896:	f850 2f04 	ldr.w	r2, [r0, #4]!
 800589a:	42b2      	cmp	r2, r6
 800589c:	d0d2      	beq.n	8005844 <ai_platform_get_weights_map+0x30>
 800589e:	f843 2f04 	str.w	r2, [r3, #4]!
 80058a2:	1c62      	adds	r2, r4, #1
 80058a4:	4297      	cmp	r7, r2
 80058a6:	d1f5      	bne.n	8005894 <ai_platform_get_weights_map+0x80>
 80058a8:	3402      	adds	r4, #2
 80058aa:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80058ae:	42b3      	cmp	r3, r6
 80058b0:	d1ca      	bne.n	8005848 <ai_platform_get_weights_map+0x34>
 80058b2:	2001      	movs	r0, #1
 80058b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058b6:	bf00      	nop
 80058b8:	a1facade 	.word	0xa1facade

080058bc <ai_platform_get_activations_map>:
 80058bc:	2a00      	cmp	r2, #0
 80058be:	d038      	beq.n	8005932 <ai_platform_get_activations_map+0x76>
 80058c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058c2:	4604      	mov	r4, r0
 80058c4:	b1a0      	cbz	r0, 80058f0 <ai_platform_get_activations_map+0x34>
 80058c6:	460f      	mov	r7, r1
 80058c8:	b191      	cbz	r1, 80058f0 <ai_platform_get_activations_map+0x34>
 80058ca:	4b25      	ldr	r3, [pc, #148]	; (8005960 <ai_platform_get_activations_map+0xa4>)
 80058cc:	6810      	ldr	r0, [r2, #0]
 80058ce:	4298      	cmp	r0, r3
 80058d0:	4615      	mov	r5, r2
 80058d2:	d00f      	beq.n	80058f4 <ai_platform_get_activations_map+0x38>
 80058d4:	6a15      	ldr	r5, [r2, #32]
 80058d6:	b15d      	cbz	r5, 80058f0 <ai_platform_get_activations_map+0x34>
 80058d8:	682e      	ldr	r6, [r5, #0]
 80058da:	429e      	cmp	r6, r3
 80058dc:	d02b      	beq.n	8005936 <ai_platform_get_activations_map+0x7a>
 80058de:	f1a1 0001 	sub.w	r0, r1, #1
 80058e2:	6025      	str	r5, [r4, #0]
 80058e4:	fab0 f080 	clz	r0, r0
 80058e8:	0940      	lsrs	r0, r0, #5
 80058ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058ec:	42a7      	cmp	r7, r4
 80058ee:	d035      	beq.n	800595c <ai_platform_get_activations_map+0xa0>
 80058f0:	2000      	movs	r0, #0
 80058f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058f4:	f102 000c 	add.w	r0, r2, #12
 80058f8:	f7ff ff6e 	bl	80057d8 <ai_buffer_array_sane>
 80058fc:	2800      	cmp	r0, #0
 80058fe:	d0f7      	beq.n	80058f0 <ai_platform_get_activations_map+0x34>
 8005900:	89eb      	ldrh	r3, [r5, #14]
 8005902:	429f      	cmp	r7, r3
 8005904:	d1f4      	bne.n	80058f0 <ai_platform_get_activations_map+0x34>
 8005906:	f04f 0e00 	mov.w	lr, #0
 800590a:	1f23      	subs	r3, r4, #4
 800590c:	4670      	mov	r0, lr
 800590e:	692a      	ldr	r2, [r5, #16]
 8005910:	eb02 0c0e 	add.w	ip, r2, lr
 8005914:	f10e 0e1c 	add.w	lr, lr, #28
 8005918:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800591c:	b124      	cbz	r4, 8005928 <ai_platform_get_activations_map+0x6c>
 800591e:	3001      	adds	r0, #1
 8005920:	4287      	cmp	r7, r0
 8005922:	f843 4f04 	str.w	r4, [r3, #4]!
 8005926:	d1f2      	bne.n	800590e <ai_platform_get_activations_map+0x52>
 8005928:	1a38      	subs	r0, r7, r0
 800592a:	fab0 f080 	clz	r0, r0
 800592e:	0940      	lsrs	r0, r0, #5
 8005930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005932:	2000      	movs	r0, #0
 8005934:	4770      	bx	lr
 8005936:	1f23      	subs	r3, r4, #4
 8005938:	4628      	mov	r0, r5
 800593a:	2400      	movs	r4, #0
 800593c:	e000      	b.n	8005940 <ai_platform_get_activations_map+0x84>
 800593e:	4614      	mov	r4, r2
 8005940:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8005944:	42b2      	cmp	r2, r6
 8005946:	d0d1      	beq.n	80058ec <ai_platform_get_activations_map+0x30>
 8005948:	f843 2f04 	str.w	r2, [r3, #4]!
 800594c:	1c62      	adds	r2, r4, #1
 800594e:	4297      	cmp	r7, r2
 8005950:	d1f5      	bne.n	800593e <ai_platform_get_activations_map+0x82>
 8005952:	3402      	adds	r4, #2
 8005954:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8005958:	42b3      	cmp	r3, r6
 800595a:	d1c9      	bne.n	80058f0 <ai_platform_get_activations_map+0x34>
 800595c:	2001      	movs	r0, #1
 800595e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005960:	a1facade 	.word	0xa1facade

08005964 <ai_platform_bind_network_params>:
 8005964:	b1a0      	cbz	r0, 8005990 <ai_platform_bind_network_params+0x2c>
 8005966:	b1b1      	cbz	r1, 8005996 <ai_platform_bind_network_params+0x32>
 8005968:	b1c2      	cbz	r2, 800599c <ai_platform_bind_network_params+0x38>
 800596a:	b410      	push	{r4}
 800596c:	4603      	mov	r3, r0
 800596e:	4c0d      	ldr	r4, [pc, #52]	; (80059a4 <ai_platform_bind_network_params+0x40>)
 8005970:	f843 4b04 	str.w	r4, [r3], #4
 8005974:	f100 0c0c 	add.w	ip, r0, #12
 8005978:	c903      	ldmia	r1, {r0, r1}
 800597a:	e883 0003 	stmia.w	r3, {r0, r1}
 800597e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005982:	e88c 0003 	stmia.w	ip, {r0, r1}
 8005986:	2301      	movs	r3, #1
 8005988:	4618      	mov	r0, r3
 800598a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800598e:	4770      	bx	lr
 8005990:	4603      	mov	r3, r0
 8005992:	4618      	mov	r0, r3
 8005994:	4770      	bx	lr
 8005996:	460b      	mov	r3, r1
 8005998:	4618      	mov	r0, r3
 800599a:	4770      	bx	lr
 800599c:	4613      	mov	r3, r2
 800599e:	4618      	mov	r0, r3
 80059a0:	4770      	bx	lr
 80059a2:	bf00      	nop
 80059a4:	a1facade 	.word	0xa1facade

080059a8 <ai_platform_network_get_error>:
 80059a8:	b510      	push	{r4, lr}
 80059aa:	b1f0      	cbz	r0, 80059ea <ai_platform_network_get_error+0x42>
 80059ac:	4b2f      	ldr	r3, [pc, #188]	; (8005a6c <ai_platform_network_get_error+0xc4>)
 80059ae:	6802      	ldr	r2, [r0, #0]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	4604      	mov	r4, r0
 80059b4:	d119      	bne.n	80059ea <ai_platform_network_get_error+0x42>
 80059b6:	f7ff ff29 	bl	800580c <_ai_platform_acquire_crc>
 80059ba:	4b2d      	ldr	r3, [pc, #180]	; (8005a70 <ai_platform_network_get_error+0xc8>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80059c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059c6:	d03c      	beq.n	8005a42 <ai_platform_network_get_error+0x9a>
 80059c8:	4a2a      	ldr	r2, [pc, #168]	; (8005a74 <ai_platform_network_get_error+0xcc>)
 80059ca:	2301      	movs	r3, #1
 80059cc:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80059d0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d1fb      	bne.n	80059d0 <ai_platform_network_get_error+0x28>
 80059d8:	4b27      	ldr	r3, [pc, #156]	; (8005a78 <ai_platform_network_get_error+0xd0>)
 80059da:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80059de:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80059e2:	4b26      	ldr	r3, [pc, #152]	; (8005a7c <ai_platform_network_get_error+0xd4>)
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d038      	beq.n	8005a5a <ai_platform_network_get_error+0xb2>
 80059e8:	e7fe      	b.n	80059e8 <ai_platform_network_get_error+0x40>
 80059ea:	f7ff ff0f 	bl	800580c <_ai_platform_acquire_crc>
 80059ee:	4b20      	ldr	r3, [pc, #128]	; (8005a70 <ai_platform_network_get_error+0xc8>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80059f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059fa:	d010      	beq.n	8005a1e <ai_platform_network_get_error+0x76>
 80059fc:	4a1d      	ldr	r2, [pc, #116]	; (8005a74 <ai_platform_network_get_error+0xcc>)
 80059fe:	2301      	movs	r3, #1
 8005a00:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005a04:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d1fb      	bne.n	8005a04 <ai_platform_network_get_error+0x5c>
 8005a0c:	4b1a      	ldr	r3, [pc, #104]	; (8005a78 <ai_platform_network_get_error+0xd0>)
 8005a0e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8005a12:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005a16:	4b19      	ldr	r3, [pc, #100]	; (8005a7c <ai_platform_network_get_error+0xd4>)
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d00d      	beq.n	8005a38 <ai_platform_network_get_error+0x90>
 8005a1c:	e7fe      	b.n	8005a1c <ai_platform_network_get_error+0x74>
 8005a1e:	4a18      	ldr	r2, [pc, #96]	; (8005a80 <ai_platform_network_get_error+0xd8>)
 8005a20:	2301      	movs	r3, #1
 8005a22:	6093      	str	r3, [r2, #8]
 8005a24:	6893      	ldr	r3, [r2, #8]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d1fc      	bne.n	8005a24 <ai_platform_network_get_error+0x7c>
 8005a2a:	4b13      	ldr	r3, [pc, #76]	; (8005a78 <ai_platform_network_get_error+0xd0>)
 8005a2c:	6013      	str	r3, [r2, #0]
 8005a2e:	6812      	ldr	r2, [r2, #0]
 8005a30:	4b12      	ldr	r3, [pc, #72]	; (8005a7c <ai_platform_network_get_error+0xd4>)
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d000      	beq.n	8005a38 <ai_platform_network_get_error+0x90>
 8005a36:	e7fe      	b.n	8005a36 <ai_platform_network_get_error+0x8e>
 8005a38:	f7ff feea 	bl	8005810 <_ai_platform_release_crc>
 8005a3c:	f241 0010 	movw	r0, #4112	; 0x1010
 8005a40:	bd10      	pop	{r4, pc}
 8005a42:	4a0f      	ldr	r2, [pc, #60]	; (8005a80 <ai_platform_network_get_error+0xd8>)
 8005a44:	2301      	movs	r3, #1
 8005a46:	6093      	str	r3, [r2, #8]
 8005a48:	6893      	ldr	r3, [r2, #8]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d1fc      	bne.n	8005a48 <ai_platform_network_get_error+0xa0>
 8005a4e:	4b0a      	ldr	r3, [pc, #40]	; (8005a78 <ai_platform_network_get_error+0xd0>)
 8005a50:	6013      	str	r3, [r2, #0]
 8005a52:	6812      	ldr	r2, [r2, #0]
 8005a54:	4b09      	ldr	r3, [pc, #36]	; (8005a7c <ai_platform_network_get_error+0xd4>)
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d107      	bne.n	8005a6a <ai_platform_network_get_error+0xc2>
 8005a5a:	f7ff fed9 	bl	8005810 <_ai_platform_release_crc>
 8005a5e:	f104 0010 	add.w	r0, r4, #16
 8005a62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a66:	f000 be8b 	b.w	8006780 <core_get_error>
 8005a6a:	e7fe      	b.n	8005a6a <ai_platform_network_get_error+0xc2>
 8005a6c:	a1c00100 	.word	0xa1c00100
 8005a70:	e0042000 	.word	0xe0042000
 8005a74:	58024000 	.word	0x58024000
 8005a78:	f407a5c2 	.word	0xf407a5c2
 8005a7c:	b5e8b5cd 	.word	0xb5e8b5cd
 8005a80:	40023000 	.word	0x40023000

08005a84 <ai_platform_network_set_error>:
 8005a84:	b110      	cbz	r0, 8005a8c <ai_platform_network_set_error+0x8>
 8005a86:	3010      	adds	r0, #16
 8005a88:	f000 be80 	b.w	800678c <core_set_error>
 8005a8c:	4770      	bx	lr
 8005a8e:	bf00      	nop

08005a90 <ai_platform_inputs_get>:
 8005a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a94:	b085      	sub	sp, #20
 8005a96:	9102      	str	r1, [sp, #8]
 8005a98:	b1f0      	cbz	r0, 8005ad8 <ai_platform_inputs_get+0x48>
 8005a9a:	4b62      	ldr	r3, [pc, #392]	; (8005c24 <ai_platform_inputs_get+0x194>)
 8005a9c:	6802      	ldr	r2, [r0, #0]
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	4607      	mov	r7, r0
 8005aa2:	d119      	bne.n	8005ad8 <ai_platform_inputs_get+0x48>
 8005aa4:	f7ff feb2 	bl	800580c <_ai_platform_acquire_crc>
 8005aa8:	4b5f      	ldr	r3, [pc, #380]	; (8005c28 <ai_platform_inputs_get+0x198>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005ab0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ab4:	d03d      	beq.n	8005b32 <ai_platform_inputs_get+0xa2>
 8005ab6:	4a5d      	ldr	r2, [pc, #372]	; (8005c2c <ai_platform_inputs_get+0x19c>)
 8005ab8:	2301      	movs	r3, #1
 8005aba:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005abe:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d1fb      	bne.n	8005abe <ai_platform_inputs_get+0x2e>
 8005ac6:	4b5a      	ldr	r3, [pc, #360]	; (8005c30 <ai_platform_inputs_get+0x1a0>)
 8005ac8:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8005acc:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005ad0:	4b58      	ldr	r3, [pc, #352]	; (8005c34 <ai_platform_inputs_get+0x1a4>)
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d039      	beq.n	8005b4a <ai_platform_inputs_get+0xba>
 8005ad6:	e7fe      	b.n	8005ad6 <ai_platform_inputs_get+0x46>
 8005ad8:	f7ff fe98 	bl	800580c <_ai_platform_acquire_crc>
 8005adc:	4b52      	ldr	r3, [pc, #328]	; (8005c28 <ai_platform_inputs_get+0x198>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005ae4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ae8:	d010      	beq.n	8005b0c <ai_platform_inputs_get+0x7c>
 8005aea:	4a50      	ldr	r2, [pc, #320]	; (8005c2c <ai_platform_inputs_get+0x19c>)
 8005aec:	2301      	movs	r3, #1
 8005aee:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005af2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d1fb      	bne.n	8005af2 <ai_platform_inputs_get+0x62>
 8005afa:	4b4d      	ldr	r3, [pc, #308]	; (8005c30 <ai_platform_inputs_get+0x1a0>)
 8005afc:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8005b00:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005b04:	4b4b      	ldr	r3, [pc, #300]	; (8005c34 <ai_platform_inputs_get+0x1a4>)
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d00d      	beq.n	8005b26 <ai_platform_inputs_get+0x96>
 8005b0a:	e7fe      	b.n	8005b0a <ai_platform_inputs_get+0x7a>
 8005b0c:	4a4a      	ldr	r2, [pc, #296]	; (8005c38 <ai_platform_inputs_get+0x1a8>)
 8005b0e:	2301      	movs	r3, #1
 8005b10:	6093      	str	r3, [r2, #8]
 8005b12:	6893      	ldr	r3, [r2, #8]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d1fc      	bne.n	8005b12 <ai_platform_inputs_get+0x82>
 8005b18:	4b45      	ldr	r3, [pc, #276]	; (8005c30 <ai_platform_inputs_get+0x1a0>)
 8005b1a:	6013      	str	r3, [r2, #0]
 8005b1c:	6812      	ldr	r2, [r2, #0]
 8005b1e:	4b45      	ldr	r3, [pc, #276]	; (8005c34 <ai_platform_inputs_get+0x1a4>)
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d000      	beq.n	8005b26 <ai_platform_inputs_get+0x96>
 8005b24:	e7fe      	b.n	8005b24 <ai_platform_inputs_get+0x94>
 8005b26:	f7ff fe73 	bl	8005810 <_ai_platform_release_crc>
 8005b2a:	2000      	movs	r0, #0
 8005b2c:	b005      	add	sp, #20
 8005b2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b32:	4a41      	ldr	r2, [pc, #260]	; (8005c38 <ai_platform_inputs_get+0x1a8>)
 8005b34:	2301      	movs	r3, #1
 8005b36:	6093      	str	r3, [r2, #8]
 8005b38:	6893      	ldr	r3, [r2, #8]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d1fc      	bne.n	8005b38 <ai_platform_inputs_get+0xa8>
 8005b3e:	4b3c      	ldr	r3, [pc, #240]	; (8005c30 <ai_platform_inputs_get+0x1a0>)
 8005b40:	6013      	str	r3, [r2, #0]
 8005b42:	6812      	ldr	r2, [r2, #0]
 8005b44:	4b3b      	ldr	r3, [pc, #236]	; (8005c34 <ai_platform_inputs_get+0x1a4>)
 8005b46:	429a      	cmp	r2, r3
 8005b48:	d155      	bne.n	8005bf6 <ai_platform_inputs_get+0x166>
 8005b4a:	f7ff fe61 	bl	8005810 <_ai_platform_release_crc>
 8005b4e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d051      	beq.n	8005bf8 <ai_platform_inputs_get+0x168>
 8005b54:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 8005b58:	f1ba 0f00 	cmp.w	sl, #0
 8005b5c:	d04c      	beq.n	8005bf8 <ai_platform_inputs_get+0x168>
 8005b5e:	f04f 0b00 	mov.w	fp, #0
 8005b62:	465d      	mov	r5, fp
 8005b64:	9703      	str	r7, [sp, #12]
 8005b66:	e016      	b.n	8005b96 <ai_platform_inputs_get+0x106>
 8005b68:	9901      	ldr	r1, [sp, #4]
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	507b      	str	r3, [r7, r1]
 8005b6e:	69b1      	ldr	r1, [r6, #24]
 8005b70:	6849      	ldr	r1, [r1, #4]
 8005b72:	6121      	str	r1, [r4, #16]
 8005b74:	f04f 0301 	mov.w	r3, #1
 8005b78:	7523      	strb	r3, [r4, #20]
 8005b7a:	e9c4 c200 	strd	ip, r2, [r4]
 8005b7e:	6962      	ldr	r2, [r4, #20]
 8005b80:	60a0      	str	r0, [r4, #8]
 8005b82:	2300      	movs	r3, #0
 8005b84:	f369 221f 	bfi	r2, r9, #8, #24
 8005b88:	f8c4 8018 	str.w	r8, [r4, #24]
 8005b8c:	60e3      	str	r3, [r4, #12]
 8005b8e:	3501      	adds	r5, #1
 8005b90:	f10b 0b1c 	add.w	fp, fp, #28
 8005b94:	6162      	str	r2, [r4, #20]
 8005b96:	f8ba 3000 	ldrh.w	r3, [sl]
 8005b9a:	42ab      	cmp	r3, r5
 8005b9c:	b2aa      	uxth	r2, r5
 8005b9e:	d93a      	bls.n	8005c16 <ai_platform_inputs_get+0x186>
 8005ba0:	f8da 3004 	ldr.w	r3, [sl, #4]
 8005ba4:	00e9      	lsls	r1, r5, #3
 8005ba6:	9101      	str	r1, [sp, #4]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d034      	beq.n	8005c16 <ai_platform_inputs_get+0x186>
 8005bac:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8005bb0:	2e00      	cmp	r6, #0
 8005bb2:	d030      	beq.n	8005c16 <ai_platform_inputs_get+0x186>
 8005bb4:	f8da 3008 	ldr.w	r3, [sl, #8]
 8005bb8:	69b2      	ldr	r2, [r6, #24]
 8005bba:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8005bbe:	6810      	ldr	r0, [r2, #0]
 8005bc0:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8005bc4:	68b3      	ldr	r3, [r6, #8]
 8005bc6:	f3c3 2917 	ubfx	r9, r3, #8, #24
 8005bca:	f001 ffc3 	bl	8007b54 <ai_array_to_buffer_fmt>
 8005bce:	69b1      	ldr	r1, [r6, #24]
 8005bd0:	4684      	mov	ip, r0
 8005bd2:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 8005bd6:	688a      	ldr	r2, [r1, #8]
 8005bd8:	445c      	add	r4, fp
 8005bda:	2800      	cmp	r0, #0
 8005bdc:	d0c8      	beq.n	8005b70 <ai_platform_inputs_get+0xe0>
 8005bde:	2100      	movs	r1, #0
 8005be0:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8005be4:	6831      	ldr	r1, [r6, #0]
 8005be6:	6041      	str	r1, [r0, #4]
 8005be8:	b111      	cbz	r1, 8005bf0 <ai_platform_inputs_get+0x160>
 8005bea:	8849      	ldrh	r1, [r1, #2]
 8005bec:	2900      	cmp	r1, #0
 8005bee:	d1bb      	bne.n	8005b68 <ai_platform_inputs_get+0xd8>
 8005bf0:	69b1      	ldr	r1, [r6, #24]
 8005bf2:	2000      	movs	r0, #0
 8005bf4:	e7bc      	b.n	8005b70 <ai_platform_inputs_get+0xe0>
 8005bf6:	e7fe      	b.n	8005bf6 <ai_platform_inputs_get+0x166>
 8005bf8:	2218      	movs	r2, #24
 8005bfa:	2111      	movs	r1, #17
 8005bfc:	f107 0010 	add.w	r0, r7, #16
 8005c00:	f000 fdc4 	bl	800678c <core_set_error>
 8005c04:	2200      	movs	r2, #0
 8005c06:	4610      	mov	r0, r2
 8005c08:	9b02      	ldr	r3, [sp, #8]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d08e      	beq.n	8005b2c <ai_platform_inputs_get+0x9c>
 8005c0e:	801a      	strh	r2, [r3, #0]
 8005c10:	b005      	add	sp, #20
 8005c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c16:	9f03      	ldr	r7, [sp, #12]
 8005c18:	2a00      	cmp	r2, #0
 8005c1a:	d0ed      	beq.n	8005bf8 <ai_platform_inputs_get+0x168>
 8005c1c:	f8da 3008 	ldr.w	r3, [sl, #8]
 8005c20:	6858      	ldr	r0, [r3, #4]
 8005c22:	e7f1      	b.n	8005c08 <ai_platform_inputs_get+0x178>
 8005c24:	a1c00100 	.word	0xa1c00100
 8005c28:	e0042000 	.word	0xe0042000
 8005c2c:	58024000 	.word	0x58024000
 8005c30:	f407a5c2 	.word	0xf407a5c2
 8005c34:	b5e8b5cd 	.word	0xb5e8b5cd
 8005c38:	40023000 	.word	0x40023000

08005c3c <ai_platform_outputs_get>:
 8005c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c40:	b085      	sub	sp, #20
 8005c42:	9102      	str	r1, [sp, #8]
 8005c44:	b1f0      	cbz	r0, 8005c84 <ai_platform_outputs_get+0x48>
 8005c46:	4b5f      	ldr	r3, [pc, #380]	; (8005dc4 <ai_platform_outputs_get+0x188>)
 8005c48:	6802      	ldr	r2, [r0, #0]
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	4607      	mov	r7, r0
 8005c4e:	d119      	bne.n	8005c84 <ai_platform_outputs_get+0x48>
 8005c50:	f7ff fddc 	bl	800580c <_ai_platform_acquire_crc>
 8005c54:	4b5c      	ldr	r3, [pc, #368]	; (8005dc8 <ai_platform_outputs_get+0x18c>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005c5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c60:	d03d      	beq.n	8005cde <ai_platform_outputs_get+0xa2>
 8005c62:	4a5a      	ldr	r2, [pc, #360]	; (8005dcc <ai_platform_outputs_get+0x190>)
 8005c64:	2301      	movs	r3, #1
 8005c66:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005c6a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d1fb      	bne.n	8005c6a <ai_platform_outputs_get+0x2e>
 8005c72:	4b57      	ldr	r3, [pc, #348]	; (8005dd0 <ai_platform_outputs_get+0x194>)
 8005c74:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8005c78:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005c7c:	4b55      	ldr	r3, [pc, #340]	; (8005dd4 <ai_platform_outputs_get+0x198>)
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d039      	beq.n	8005cf6 <ai_platform_outputs_get+0xba>
 8005c82:	e7fe      	b.n	8005c82 <ai_platform_outputs_get+0x46>
 8005c84:	f7ff fdc2 	bl	800580c <_ai_platform_acquire_crc>
 8005c88:	4b4f      	ldr	r3, [pc, #316]	; (8005dc8 <ai_platform_outputs_get+0x18c>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005c90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c94:	d010      	beq.n	8005cb8 <ai_platform_outputs_get+0x7c>
 8005c96:	4a4d      	ldr	r2, [pc, #308]	; (8005dcc <ai_platform_outputs_get+0x190>)
 8005c98:	2301      	movs	r3, #1
 8005c9a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005c9e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d1fb      	bne.n	8005c9e <ai_platform_outputs_get+0x62>
 8005ca6:	4b4a      	ldr	r3, [pc, #296]	; (8005dd0 <ai_platform_outputs_get+0x194>)
 8005ca8:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8005cac:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005cb0:	4b48      	ldr	r3, [pc, #288]	; (8005dd4 <ai_platform_outputs_get+0x198>)
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d00d      	beq.n	8005cd2 <ai_platform_outputs_get+0x96>
 8005cb6:	e7fe      	b.n	8005cb6 <ai_platform_outputs_get+0x7a>
 8005cb8:	4a47      	ldr	r2, [pc, #284]	; (8005dd8 <ai_platform_outputs_get+0x19c>)
 8005cba:	2301      	movs	r3, #1
 8005cbc:	6093      	str	r3, [r2, #8]
 8005cbe:	6893      	ldr	r3, [r2, #8]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d1fc      	bne.n	8005cbe <ai_platform_outputs_get+0x82>
 8005cc4:	4b42      	ldr	r3, [pc, #264]	; (8005dd0 <ai_platform_outputs_get+0x194>)
 8005cc6:	6013      	str	r3, [r2, #0]
 8005cc8:	6812      	ldr	r2, [r2, #0]
 8005cca:	4b42      	ldr	r3, [pc, #264]	; (8005dd4 <ai_platform_outputs_get+0x198>)
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d000      	beq.n	8005cd2 <ai_platform_outputs_get+0x96>
 8005cd0:	e7fe      	b.n	8005cd0 <ai_platform_outputs_get+0x94>
 8005cd2:	f7ff fd9d 	bl	8005810 <_ai_platform_release_crc>
 8005cd6:	2000      	movs	r0, #0
 8005cd8:	b005      	add	sp, #20
 8005cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cde:	4a3e      	ldr	r2, [pc, #248]	; (8005dd8 <ai_platform_outputs_get+0x19c>)
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	6093      	str	r3, [r2, #8]
 8005ce4:	6893      	ldr	r3, [r2, #8]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d1fc      	bne.n	8005ce4 <ai_platform_outputs_get+0xa8>
 8005cea:	4b39      	ldr	r3, [pc, #228]	; (8005dd0 <ai_platform_outputs_get+0x194>)
 8005cec:	6013      	str	r3, [r2, #0]
 8005cee:	6812      	ldr	r2, [r2, #0]
 8005cf0:	4b38      	ldr	r3, [pc, #224]	; (8005dd4 <ai_platform_outputs_get+0x198>)
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	d150      	bne.n	8005d98 <ai_platform_outputs_get+0x15c>
 8005cf6:	f7ff fd8b 	bl	8005810 <_ai_platform_release_crc>
 8005cfa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d958      	bls.n	8005db2 <ai_platform_outputs_get+0x176>
 8005d00:	f04f 0b00 	mov.w	fp, #0
 8005d04:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 8005d08:	9703      	str	r7, [sp, #12]
 8005d0a:	465d      	mov	r5, fp
 8005d0c:	e016      	b.n	8005d3c <ai_platform_outputs_get+0x100>
 8005d0e:	9901      	ldr	r1, [sp, #4]
 8005d10:	2301      	movs	r3, #1
 8005d12:	507b      	str	r3, [r7, r1]
 8005d14:	69b1      	ldr	r1, [r6, #24]
 8005d16:	6849      	ldr	r1, [r1, #4]
 8005d18:	6121      	str	r1, [r4, #16]
 8005d1a:	f04f 0301 	mov.w	r3, #1
 8005d1e:	7523      	strb	r3, [r4, #20]
 8005d20:	e9c4 c200 	strd	ip, r2, [r4]
 8005d24:	6962      	ldr	r2, [r4, #20]
 8005d26:	60a0      	str	r0, [r4, #8]
 8005d28:	2300      	movs	r3, #0
 8005d2a:	f369 221f 	bfi	r2, r9, #8, #24
 8005d2e:	f8c4 8018 	str.w	r8, [r4, #24]
 8005d32:	60e3      	str	r3, [r4, #12]
 8005d34:	3501      	adds	r5, #1
 8005d36:	f10b 0b1c 	add.w	fp, fp, #28
 8005d3a:	6162      	str	r2, [r4, #20]
 8005d3c:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8005d40:	42ab      	cmp	r3, r5
 8005d42:	b2aa      	uxth	r2, r5
 8005d44:	d929      	bls.n	8005d9a <ai_platform_outputs_get+0x15e>
 8005d46:	f8da 3010 	ldr.w	r3, [sl, #16]
 8005d4a:	00e9      	lsls	r1, r5, #3
 8005d4c:	9101      	str	r1, [sp, #4]
 8005d4e:	b323      	cbz	r3, 8005d9a <ai_platform_outputs_get+0x15e>
 8005d50:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8005d54:	b30e      	cbz	r6, 8005d9a <ai_platform_outputs_get+0x15e>
 8005d56:	f8da 3014 	ldr.w	r3, [sl, #20]
 8005d5a:	69b2      	ldr	r2, [r6, #24]
 8005d5c:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8005d60:	6810      	ldr	r0, [r2, #0]
 8005d62:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8005d66:	68b3      	ldr	r3, [r6, #8]
 8005d68:	f3c3 2917 	ubfx	r9, r3, #8, #24
 8005d6c:	f001 fef2 	bl	8007b54 <ai_array_to_buffer_fmt>
 8005d70:	69b1      	ldr	r1, [r6, #24]
 8005d72:	4684      	mov	ip, r0
 8005d74:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 8005d78:	688a      	ldr	r2, [r1, #8]
 8005d7a:	445c      	add	r4, fp
 8005d7c:	2800      	cmp	r0, #0
 8005d7e:	d0ca      	beq.n	8005d16 <ai_platform_outputs_get+0xda>
 8005d80:	2100      	movs	r1, #0
 8005d82:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8005d86:	6831      	ldr	r1, [r6, #0]
 8005d88:	6041      	str	r1, [r0, #4]
 8005d8a:	b111      	cbz	r1, 8005d92 <ai_platform_outputs_get+0x156>
 8005d8c:	8849      	ldrh	r1, [r1, #2]
 8005d8e:	2900      	cmp	r1, #0
 8005d90:	d1bd      	bne.n	8005d0e <ai_platform_outputs_get+0xd2>
 8005d92:	69b1      	ldr	r1, [r6, #24]
 8005d94:	2000      	movs	r0, #0
 8005d96:	e7be      	b.n	8005d16 <ai_platform_outputs_get+0xda>
 8005d98:	e7fe      	b.n	8005d98 <ai_platform_outputs_get+0x15c>
 8005d9a:	9f03      	ldr	r7, [sp, #12]
 8005d9c:	b14a      	cbz	r2, 8005db2 <ai_platform_outputs_get+0x176>
 8005d9e:	f8da 3014 	ldr.w	r3, [sl, #20]
 8005da2:	6858      	ldr	r0, [r3, #4]
 8005da4:	9b02      	ldr	r3, [sp, #8]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d096      	beq.n	8005cd8 <ai_platform_outputs_get+0x9c>
 8005daa:	801a      	strh	r2, [r3, #0]
 8005dac:	b005      	add	sp, #20
 8005dae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005db2:	2218      	movs	r2, #24
 8005db4:	2111      	movs	r1, #17
 8005db6:	f107 0010 	add.w	r0, r7, #16
 8005dba:	f000 fce7 	bl	800678c <core_set_error>
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	4610      	mov	r0, r2
 8005dc2:	e7ef      	b.n	8005da4 <ai_platform_outputs_get+0x168>
 8005dc4:	a1c00100 	.word	0xa1c00100
 8005dc8:	e0042000 	.word	0xe0042000
 8005dcc:	58024000 	.word	0x58024000
 8005dd0:	f407a5c2 	.word	0xf407a5c2
 8005dd4:	b5e8b5cd 	.word	0xb5e8b5cd
 8005dd8:	40023000 	.word	0x40023000

08005ddc <ai_platform_network_create>:
 8005ddc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005de0:	b083      	sub	sp, #12
 8005de2:	4606      	mov	r6, r0
 8005de4:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 8005de8:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8005dec:	4615      	mov	r5, r2
 8005dee:	461f      	mov	r7, r3
 8005df0:	f7ff fd0c 	bl	800580c <_ai_platform_acquire_crc>
 8005df4:	b188      	cbz	r0, 8005e1a <ai_platform_network_create+0x3e>
 8005df6:	4a5d      	ldr	r2, [pc, #372]	; (8005f6c <ai_platform_network_create+0x190>)
 8005df8:	6812      	ldr	r2, [r2, #0]
 8005dfa:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8005dfe:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8005e02:	4603      	mov	r3, r0
 8005e04:	d00e      	beq.n	8005e24 <ai_platform_network_create+0x48>
 8005e06:	4a5a      	ldr	r2, [pc, #360]	; (8005f70 <ai_platform_network_create+0x194>)
 8005e08:	2118      	movs	r1, #24
 8005e0a:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 8005e0e:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 8005e12:	2918      	cmp	r1, #24
 8005e14:	d018      	beq.n	8005e48 <ai_platform_network_create+0x6c>
 8005e16:	f7ff fcfb 	bl	8005810 <_ai_platform_release_crc>
 8005e1a:	f244 1033 	movw	r0, #16691	; 0x4133
 8005e1e:	b003      	add	sp, #12
 8005e20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005e24:	4a53      	ldr	r2, [pc, #332]	; (8005f74 <ai_platform_network_create+0x198>)
 8005e26:	2101      	movs	r1, #1
 8005e28:	6091      	str	r1, [r2, #8]
 8005e2a:	2114      	movs	r1, #20
 8005e2c:	e001      	b.n	8005e32 <ai_platform_network_create+0x56>
 8005e2e:	3901      	subs	r1, #1
 8005e30:	d002      	beq.n	8005e38 <ai_platform_network_create+0x5c>
 8005e32:	6894      	ldr	r4, [r2, #8]
 8005e34:	2c00      	cmp	r4, #0
 8005e36:	d1fa      	bne.n	8005e2e <ai_platform_network_create+0x52>
 8005e38:	4a4e      	ldr	r2, [pc, #312]	; (8005f74 <ai_platform_network_create+0x198>)
 8005e3a:	6891      	ldr	r1, [r2, #8]
 8005e3c:	b911      	cbnz	r1, 8005e44 <ai_platform_network_create+0x68>
 8005e3e:	6812      	ldr	r2, [r2, #0]
 8005e40:	3201      	adds	r2, #1
 8005e42:	d008      	beq.n	8005e56 <ai_platform_network_create+0x7a>
 8005e44:	4618      	mov	r0, r3
 8005e46:	e7e6      	b.n	8005e16 <ai_platform_network_create+0x3a>
 8005e48:	2101      	movs	r1, #1
 8005e4a:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 8005e4e:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 8005e52:	2900      	cmp	r1, #0
 8005e54:	d1fb      	bne.n	8005e4e <ai_platform_network_create+0x72>
 8005e56:	4618      	mov	r0, r3
 8005e58:	f7ff fcda 	bl	8005810 <_ai_platform_release_crc>
 8005e5c:	f7ff fcd6 	bl	800580c <_ai_platform_acquire_crc>
 8005e60:	4b42      	ldr	r3, [pc, #264]	; (8005f6c <ai_platform_network_create+0x190>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005e68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e6c:	d010      	beq.n	8005e90 <ai_platform_network_create+0xb4>
 8005e6e:	4b40      	ldr	r3, [pc, #256]	; (8005f70 <ai_platform_network_create+0x194>)
 8005e70:	2201      	movs	r2, #1
 8005e72:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8005e76:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
 8005e7a:	2900      	cmp	r1, #0
 8005e7c:	d1fb      	bne.n	8005e76 <ai_platform_network_create+0x9a>
 8005e7e:	4a3e      	ldr	r2, [pc, #248]	; (8005f78 <ai_platform_network_create+0x19c>)
 8005e80:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8005e84:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8005e88:	4b3c      	ldr	r3, [pc, #240]	; (8005f7c <ai_platform_network_create+0x1a0>)
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d00c      	beq.n	8005ea8 <ai_platform_network_create+0xcc>
 8005e8e:	e7fe      	b.n	8005e8e <ai_platform_network_create+0xb2>
 8005e90:	4a38      	ldr	r2, [pc, #224]	; (8005f74 <ai_platform_network_create+0x198>)
 8005e92:	2301      	movs	r3, #1
 8005e94:	6093      	str	r3, [r2, #8]
 8005e96:	6893      	ldr	r3, [r2, #8]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d1fc      	bne.n	8005e96 <ai_platform_network_create+0xba>
 8005e9c:	4b36      	ldr	r3, [pc, #216]	; (8005f78 <ai_platform_network_create+0x19c>)
 8005e9e:	6013      	str	r3, [r2, #0]
 8005ea0:	6812      	ldr	r2, [r2, #0]
 8005ea2:	4b36      	ldr	r3, [pc, #216]	; (8005f7c <ai_platform_network_create+0x1a0>)
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d122      	bne.n	8005eee <ai_platform_network_create+0x112>
 8005ea8:	f7ff fcb2 	bl	8005810 <_ai_platform_release_crc>
 8005eac:	b38e      	cbz	r6, 8005f12 <ai_platform_network_create+0x136>
 8005eae:	4b34      	ldr	r3, [pc, #208]	; (8005f80 <ai_platform_network_create+0x1a4>)
 8005eb0:	602b      	str	r3, [r5, #0]
 8005eb2:	6035      	str	r5, [r6, #0]
 8005eb4:	f000 fc62 	bl	800677c <core_init>
 8005eb8:	b1d0      	cbz	r0, 8005ef0 <ai_platform_network_create+0x114>
 8005eba:	f7ff fca7 	bl	800580c <_ai_platform_acquire_crc>
 8005ebe:	4b2b      	ldr	r3, [pc, #172]	; (8005f6c <ai_platform_network_create+0x190>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005ec6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005eca:	d025      	beq.n	8005f18 <ai_platform_network_create+0x13c>
 8005ecc:	4a28      	ldr	r2, [pc, #160]	; (8005f70 <ai_platform_network_create+0x194>)
 8005ece:	2301      	movs	r3, #1
 8005ed0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005ed4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d1fb      	bne.n	8005ed4 <ai_platform_network_create+0xf8>
 8005edc:	4b26      	ldr	r3, [pc, #152]	; (8005f78 <ai_platform_network_create+0x19c>)
 8005ede:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8005ee2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005ee6:	4b25      	ldr	r3, [pc, #148]	; (8005f7c <ai_platform_network_create+0x1a0>)
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d022      	beq.n	8005f32 <ai_platform_network_create+0x156>
 8005eec:	e7fe      	b.n	8005eec <ai_platform_network_create+0x110>
 8005eee:	e7fe      	b.n	8005eee <ai_platform_network_create+0x112>
 8005ef0:	2430      	movs	r4, #48	; 0x30
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	6033      	str	r3, [r6, #0]
 8005ef6:	2610      	movs	r6, #16
 8005ef8:	464a      	mov	r2, r9
 8005efa:	4641      	mov	r1, r8
 8005efc:	4638      	mov	r0, r7
 8005efe:	f001 fecf 	bl	8007ca0 <ai_version_get>
 8005f02:	4603      	mov	r3, r0
 8005f04:	2000      	movs	r0, #0
 8005f06:	f364 0007 	bfi	r0, r4, #0, #8
 8005f0a:	64ab      	str	r3, [r5, #72]	; 0x48
 8005f0c:	f366 201f 	bfi	r0, r6, #8, #24
 8005f10:	e785      	b.n	8005e1e <ai_platform_network_create+0x42>
 8005f12:	f241 0010 	movw	r0, #4112	; 0x1010
 8005f16:	e782      	b.n	8005e1e <ai_platform_network_create+0x42>
 8005f18:	4a16      	ldr	r2, [pc, #88]	; (8005f74 <ai_platform_network_create+0x198>)
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	6093      	str	r3, [r2, #8]
 8005f1e:	6893      	ldr	r3, [r2, #8]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d1fc      	bne.n	8005f1e <ai_platform_network_create+0x142>
 8005f24:	4b14      	ldr	r3, [pc, #80]	; (8005f78 <ai_platform_network_create+0x19c>)
 8005f26:	6013      	str	r3, [r2, #0]
 8005f28:	6812      	ldr	r2, [r2, #0]
 8005f2a:	4b14      	ldr	r3, [pc, #80]	; (8005f7c <ai_platform_network_create+0x1a0>)
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d000      	beq.n	8005f32 <ai_platform_network_create+0x156>
 8005f30:	e7fe      	b.n	8005f30 <ai_platform_network_create+0x154>
 8005f32:	f7ff fc6d 	bl	8005810 <_ai_platform_release_crc>
 8005f36:	2200      	movs	r2, #0
 8005f38:	4641      	mov	r1, r8
 8005f3a:	4638      	mov	r0, r7
 8005f3c:	f001 feb0 	bl	8007ca0 <ai_version_get>
 8005f40:	2200      	movs	r2, #0
 8005f42:	4604      	mov	r4, r0
 8005f44:	2105      	movs	r1, #5
 8005f46:	2001      	movs	r0, #1
 8005f48:	f001 feaa 	bl	8007ca0 <ai_version_get>
 8005f4c:	4284      	cmp	r4, r0
 8005f4e:	d001      	beq.n	8005f54 <ai_platform_network_create+0x178>
 8005f50:	2401      	movs	r4, #1
 8005f52:	e7ce      	b.n	8005ef2 <ai_platform_network_create+0x116>
 8005f54:	4b0b      	ldr	r3, [pc, #44]	; (8005f84 <ai_platform_network_create+0x1a8>)
 8005f56:	9301      	str	r3, [sp, #4]
 8005f58:	a801      	add	r0, sp, #4
 8005f5a:	f000 fc23 	bl	80067a4 <ai_check_custom_types>
 8005f5e:	b110      	cbz	r0, 8005f66 <ai_platform_network_create+0x18a>
 8005f60:	2600      	movs	r6, #0
 8005f62:	4634      	mov	r4, r6
 8005f64:	e7c8      	b.n	8005ef8 <ai_platform_network_create+0x11c>
 8005f66:	2402      	movs	r4, #2
 8005f68:	e7c3      	b.n	8005ef2 <ai_platform_network_create+0x116>
 8005f6a:	bf00      	nop
 8005f6c:	e0042000 	.word	0xe0042000
 8005f70:	58024000 	.word	0x58024000
 8005f74:	40023000 	.word	0x40023000
 8005f78:	f407a5c2 	.word	0xf407a5c2
 8005f7c:	b5e8b5cd 	.word	0xb5e8b5cd
 8005f80:	a1c00100 	.word	0xa1c00100
 8005f84:	84048403 	.word	0x84048403

08005f88 <ai_platform_network_init>:
 8005f88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f8c:	b1f8      	cbz	r0, 8005fce <ai_platform_network_init+0x46>
 8005f8e:	4b6e      	ldr	r3, [pc, #440]	; (8006148 <ai_platform_network_init+0x1c0>)
 8005f90:	6802      	ldr	r2, [r0, #0]
 8005f92:	429a      	cmp	r2, r3
 8005f94:	4604      	mov	r4, r0
 8005f96:	d11a      	bne.n	8005fce <ai_platform_network_init+0x46>
 8005f98:	460e      	mov	r6, r1
 8005f9a:	f7ff fc37 	bl	800580c <_ai_platform_acquire_crc>
 8005f9e:	4b6b      	ldr	r3, [pc, #428]	; (800614c <ai_platform_network_init+0x1c4>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005fa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005faa:	d03d      	beq.n	8006028 <ai_platform_network_init+0xa0>
 8005fac:	4a68      	ldr	r2, [pc, #416]	; (8006150 <ai_platform_network_init+0x1c8>)
 8005fae:	2301      	movs	r3, #1
 8005fb0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005fb4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d1fb      	bne.n	8005fb4 <ai_platform_network_init+0x2c>
 8005fbc:	4b65      	ldr	r3, [pc, #404]	; (8006154 <ai_platform_network_init+0x1cc>)
 8005fbe:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8005fc2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005fc6:	4b64      	ldr	r3, [pc, #400]	; (8006158 <ai_platform_network_init+0x1d0>)
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d039      	beq.n	8006040 <ai_platform_network_init+0xb8>
 8005fcc:	e7fe      	b.n	8005fcc <ai_platform_network_init+0x44>
 8005fce:	f7ff fc1d 	bl	800580c <_ai_platform_acquire_crc>
 8005fd2:	4b5e      	ldr	r3, [pc, #376]	; (800614c <ai_platform_network_init+0x1c4>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005fda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fde:	d010      	beq.n	8006002 <ai_platform_network_init+0x7a>
 8005fe0:	4a5b      	ldr	r2, [pc, #364]	; (8006150 <ai_platform_network_init+0x1c8>)
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005fe8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d1fb      	bne.n	8005fe8 <ai_platform_network_init+0x60>
 8005ff0:	4b58      	ldr	r3, [pc, #352]	; (8006154 <ai_platform_network_init+0x1cc>)
 8005ff2:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8005ff6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005ffa:	4b57      	ldr	r3, [pc, #348]	; (8006158 <ai_platform_network_init+0x1d0>)
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d00d      	beq.n	800601c <ai_platform_network_init+0x94>
 8006000:	e7fe      	b.n	8006000 <ai_platform_network_init+0x78>
 8006002:	4a56      	ldr	r2, [pc, #344]	; (800615c <ai_platform_network_init+0x1d4>)
 8006004:	2301      	movs	r3, #1
 8006006:	6093      	str	r3, [r2, #8]
 8006008:	6893      	ldr	r3, [r2, #8]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d1fc      	bne.n	8006008 <ai_platform_network_init+0x80>
 800600e:	4b51      	ldr	r3, [pc, #324]	; (8006154 <ai_platform_network_init+0x1cc>)
 8006010:	6013      	str	r3, [r2, #0]
 8006012:	6812      	ldr	r2, [r2, #0]
 8006014:	4b50      	ldr	r3, [pc, #320]	; (8006158 <ai_platform_network_init+0x1d0>)
 8006016:	429a      	cmp	r2, r3
 8006018:	d000      	beq.n	800601c <ai_platform_network_init+0x94>
 800601a:	e7fe      	b.n	800601a <ai_platform_network_init+0x92>
 800601c:	f7ff fbf8 	bl	8005810 <_ai_platform_release_crc>
 8006020:	2600      	movs	r6, #0
 8006022:	4630      	mov	r0, r6
 8006024:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006028:	4a4c      	ldr	r2, [pc, #304]	; (800615c <ai_platform_network_init+0x1d4>)
 800602a:	2301      	movs	r3, #1
 800602c:	6093      	str	r3, [r2, #8]
 800602e:	6893      	ldr	r3, [r2, #8]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d1fc      	bne.n	800602e <ai_platform_network_init+0xa6>
 8006034:	4b47      	ldr	r3, [pc, #284]	; (8006154 <ai_platform_network_init+0x1cc>)
 8006036:	6013      	str	r3, [r2, #0]
 8006038:	6812      	ldr	r2, [r2, #0]
 800603a:	4b47      	ldr	r3, [pc, #284]	; (8006158 <ai_platform_network_init+0x1d0>)
 800603c:	429a      	cmp	r2, r3
 800603e:	d11c      	bne.n	800607a <ai_platform_network_init+0xf2>
 8006040:	f7ff fbe6 	bl	8005810 <_ai_platform_release_crc>
 8006044:	2e00      	cmp	r6, #0
 8006046:	d06f      	beq.n	8006128 <ai_platform_network_init+0x1a0>
 8006048:	4b45      	ldr	r3, [pc, #276]	; (8006160 <ai_platform_network_init+0x1d8>)
 800604a:	6832      	ldr	r2, [r6, #0]
 800604c:	429a      	cmp	r2, r3
 800604e:	d115      	bne.n	800607c <ai_platform_network_init+0xf4>
 8006050:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8006054:	6933      	ldr	r3, [r6, #16]
 8006056:	f8b6 e00c 	ldrh.w	lr, [r6, #12]
 800605a:	89f7      	ldrh	r7, [r6, #14]
 800605c:	62a3      	str	r3, [r4, #40]	; 0x28
 800605e:	e9c4 2107 	strd	r2, r1, [r4, #28]
 8006062:	2303      	movs	r3, #3
 8006064:	84e7      	strh	r7, [r4, #38]	; 0x26
 8006066:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
 800606a:	60e3      	str	r3, [r4, #12]
 800606c:	4620      	mov	r0, r4
 800606e:	4626      	mov	r6, r4
 8006070:	f000 fbc2 	bl	80067f8 <ai_layers_init_all>
 8006074:	4630      	mov	r0, r6
 8006076:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800607a:	e7fe      	b.n	800607a <ai_platform_network_init+0xf2>
 800607c:	2101      	movs	r1, #1
 800607e:	4630      	mov	r0, r6
 8006080:	4635      	mov	r5, r6
 8006082:	6876      	ldr	r6, [r6, #4]
 8006084:	f7ff fb74 	bl	8005770 <ai_buffer_get_size>
 8006088:	f105 081c 	add.w	r8, r5, #28
 800608c:	4681      	mov	r9, r0
 800608e:	2101      	movs	r1, #1
 8006090:	4640      	mov	r0, r8
 8006092:	6a2f      	ldr	r7, [r5, #32]
 8006094:	f7ff fb6c 	bl	8005770 <ai_buffer_get_size>
 8006098:	f1b9 0f00 	cmp.w	r9, #0
 800609c:	d025      	beq.n	80060ea <ai_platform_network_init+0x162>
 800609e:	2201      	movs	r2, #1
 80060a0:	4696      	mov	lr, r2
 80060a2:	bb30      	cbnz	r0, 80060f2 <ai_platform_network_init+0x16a>
 80060a4:	4680      	mov	r8, r0
 80060a6:	4607      	mov	r7, r0
 80060a8:	b376      	cbz	r6, 8006108 <ai_platform_network_init+0x180>
 80060aa:	8be3      	ldrh	r3, [r4, #30]
 80060ac:	4573      	cmp	r3, lr
 80060ae:	d323      	bcc.n	80060f8 <ai_platform_network_init+0x170>
 80060b0:	b142      	cbz	r2, 80060c4 <ai_platform_network_init+0x13c>
 80060b2:	46ac      	mov	ip, r5
 80060b4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80060b8:	6a25      	ldr	r5, [r4, #32]
 80060ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80060bc:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80060c0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80060c4:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80060c6:	f8a4 e01e 	strh.w	lr, [r4, #30]
 80060ca:	2600      	movs	r6, #0
 80060cc:	42bb      	cmp	r3, r7
 80060ce:	83a6      	strh	r6, [r4, #28]
 80060d0:	d323      	bcc.n	800611a <ai_platform_network_init+0x192>
 80060d2:	b37f      	cbz	r7, 8006134 <ai_platform_network_init+0x1ac>
 80060d4:	46c4      	mov	ip, r8
 80060d6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80060da:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80060dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80060de:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80060e2:	46b6      	mov	lr, r6
 80060e4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80060e8:	e7bb      	b.n	8006062 <ai_platform_network_init+0xda>
 80060ea:	464a      	mov	r2, r9
 80060ec:	46ce      	mov	lr, r9
 80060ee:	464d      	mov	r5, r9
 80060f0:	e7d7      	b.n	80060a2 <ai_platform_network_init+0x11a>
 80060f2:	b30f      	cbz	r7, 8006138 <ai_platform_network_init+0x1b0>
 80060f4:	2701      	movs	r7, #1
 80060f6:	e7d7      	b.n	80060a8 <ai_platform_network_init+0x120>
 80060f8:	2212      	movs	r2, #18
 80060fa:	2116      	movs	r1, #22
 80060fc:	f104 0010 	add.w	r0, r4, #16
 8006100:	f000 fb44 	bl	800678c <core_set_error>
 8006104:	2600      	movs	r6, #0
 8006106:	e78c      	b.n	8006022 <ai_platform_network_init+0x9a>
 8006108:	f1b9 0f00 	cmp.w	r9, #0
 800610c:	d0cd      	beq.n	80060aa <ai_platform_network_init+0x122>
 800610e:	2110      	movs	r1, #16
 8006110:	2212      	movs	r2, #18
 8006112:	1860      	adds	r0, r4, r1
 8006114:	f000 fb3a 	bl	800678c <core_set_error>
 8006118:	e783      	b.n	8006022 <ai_platform_network_init+0x9a>
 800611a:	2213      	movs	r2, #19
 800611c:	2116      	movs	r1, #22
 800611e:	f104 0010 	add.w	r0, r4, #16
 8006122:	f000 fb33 	bl	800678c <core_set_error>
 8006126:	e77c      	b.n	8006022 <ai_platform_network_init+0x9a>
 8006128:	2110      	movs	r1, #16
 800612a:	2211      	movs	r2, #17
 800612c:	1860      	adds	r0, r4, r1
 800612e:	f000 fb2d 	bl	800678c <core_set_error>
 8006132:	e776      	b.n	8006022 <ai_platform_network_init+0x9a>
 8006134:	46be      	mov	lr, r7
 8006136:	e794      	b.n	8006062 <ai_platform_network_init+0xda>
 8006138:	2110      	movs	r1, #16
 800613a:	2213      	movs	r2, #19
 800613c:	1860      	adds	r0, r4, r1
 800613e:	f000 fb25 	bl	800678c <core_set_error>
 8006142:	463e      	mov	r6, r7
 8006144:	e76d      	b.n	8006022 <ai_platform_network_init+0x9a>
 8006146:	bf00      	nop
 8006148:	a1c00100 	.word	0xa1c00100
 800614c:	e0042000 	.word	0xe0042000
 8006150:	58024000 	.word	0x58024000
 8006154:	f407a5c2 	.word	0xf407a5c2
 8006158:	b5e8b5cd 	.word	0xb5e8b5cd
 800615c:	40023000 	.word	0x40023000
 8006160:	a1facade 	.word	0xa1facade

08006164 <ai_platform_network_post_init>:
 8006164:	b538      	push	{r3, r4, r5, lr}
 8006166:	b1f0      	cbz	r0, 80061a6 <ai_platform_network_post_init+0x42>
 8006168:	4b3c      	ldr	r3, [pc, #240]	; (800625c <ai_platform_network_post_init+0xf8>)
 800616a:	6802      	ldr	r2, [r0, #0]
 800616c:	429a      	cmp	r2, r3
 800616e:	4604      	mov	r4, r0
 8006170:	d119      	bne.n	80061a6 <ai_platform_network_post_init+0x42>
 8006172:	f7ff fb4b 	bl	800580c <_ai_platform_acquire_crc>
 8006176:	4b3a      	ldr	r3, [pc, #232]	; (8006260 <ai_platform_network_post_init+0xfc>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800617e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006182:	d03b      	beq.n	80061fc <ai_platform_network_post_init+0x98>
 8006184:	4a37      	ldr	r2, [pc, #220]	; (8006264 <ai_platform_network_post_init+0x100>)
 8006186:	2301      	movs	r3, #1
 8006188:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800618c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006190:	2b00      	cmp	r3, #0
 8006192:	d1fb      	bne.n	800618c <ai_platform_network_post_init+0x28>
 8006194:	4b34      	ldr	r3, [pc, #208]	; (8006268 <ai_platform_network_post_init+0x104>)
 8006196:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800619a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800619e:	4b33      	ldr	r3, [pc, #204]	; (800626c <ai_platform_network_post_init+0x108>)
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d037      	beq.n	8006214 <ai_platform_network_post_init+0xb0>
 80061a4:	e7fe      	b.n	80061a4 <ai_platform_network_post_init+0x40>
 80061a6:	f7ff fb31 	bl	800580c <_ai_platform_acquire_crc>
 80061aa:	4b2d      	ldr	r3, [pc, #180]	; (8006260 <ai_platform_network_post_init+0xfc>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80061b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061b6:	d010      	beq.n	80061da <ai_platform_network_post_init+0x76>
 80061b8:	4a2a      	ldr	r2, [pc, #168]	; (8006264 <ai_platform_network_post_init+0x100>)
 80061ba:	2301      	movs	r3, #1
 80061bc:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80061c0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d1fb      	bne.n	80061c0 <ai_platform_network_post_init+0x5c>
 80061c8:	4b27      	ldr	r3, [pc, #156]	; (8006268 <ai_platform_network_post_init+0x104>)
 80061ca:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80061ce:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80061d2:	4b26      	ldr	r3, [pc, #152]	; (800626c <ai_platform_network_post_init+0x108>)
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d00d      	beq.n	80061f4 <ai_platform_network_post_init+0x90>
 80061d8:	e7fe      	b.n	80061d8 <ai_platform_network_post_init+0x74>
 80061da:	4a25      	ldr	r2, [pc, #148]	; (8006270 <ai_platform_network_post_init+0x10c>)
 80061dc:	2301      	movs	r3, #1
 80061de:	6093      	str	r3, [r2, #8]
 80061e0:	6893      	ldr	r3, [r2, #8]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d1fc      	bne.n	80061e0 <ai_platform_network_post_init+0x7c>
 80061e6:	4b20      	ldr	r3, [pc, #128]	; (8006268 <ai_platform_network_post_init+0x104>)
 80061e8:	6013      	str	r3, [r2, #0]
 80061ea:	6812      	ldr	r2, [r2, #0]
 80061ec:	4b1f      	ldr	r3, [pc, #124]	; (800626c <ai_platform_network_post_init+0x108>)
 80061ee:	429a      	cmp	r2, r3
 80061f0:	d000      	beq.n	80061f4 <ai_platform_network_post_init+0x90>
 80061f2:	e7fe      	b.n	80061f2 <ai_platform_network_post_init+0x8e>
 80061f4:	f7ff fb0c 	bl	8005810 <_ai_platform_release_crc>
 80061f8:	2000      	movs	r0, #0
 80061fa:	bd38      	pop	{r3, r4, r5, pc}
 80061fc:	4a1c      	ldr	r2, [pc, #112]	; (8006270 <ai_platform_network_post_init+0x10c>)
 80061fe:	2301      	movs	r3, #1
 8006200:	6093      	str	r3, [r2, #8]
 8006202:	6893      	ldr	r3, [r2, #8]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d1fc      	bne.n	8006202 <ai_platform_network_post_init+0x9e>
 8006208:	4b17      	ldr	r3, [pc, #92]	; (8006268 <ai_platform_network_post_init+0x104>)
 800620a:	6013      	str	r3, [r2, #0]
 800620c:	6812      	ldr	r2, [r2, #0]
 800620e:	4b17      	ldr	r3, [pc, #92]	; (800626c <ai_platform_network_post_init+0x108>)
 8006210:	429a      	cmp	r2, r3
 8006212:	d11a      	bne.n	800624a <ai_platform_network_post_init+0xe6>
 8006214:	f7ff fafc 	bl	8005810 <_ai_platform_release_crc>
 8006218:	68e3      	ldr	r3, [r4, #12]
 800621a:	f013 0502 	ands.w	r5, r3, #2
 800621e:	d015      	beq.n	800624c <ai_platform_network_post_init+0xe8>
 8006220:	4620      	mov	r0, r4
 8006222:	f000 faf7 	bl	8006814 <ai_layers_post_init_all>
 8006226:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006228:	b16b      	cbz	r3, 8006246 <ai_platform_network_post_init+0xe2>
 800622a:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800622c:	e007      	b.n	800623e <ai_platform_network_post_init+0xda>
 800622e:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 8006232:	4798      	blx	r3
 8006234:	692b      	ldr	r3, [r5, #16]
 8006236:	42ab      	cmp	r3, r5
 8006238:	d005      	beq.n	8006246 <ai_platform_network_post_init+0xe2>
 800623a:	b123      	cbz	r3, 8006246 <ai_platform_network_post_init+0xe2>
 800623c:	461d      	mov	r5, r3
 800623e:	4629      	mov	r1, r5
 8006240:	2000      	movs	r0, #0
 8006242:	2d00      	cmp	r5, #0
 8006244:	d1f3      	bne.n	800622e <ai_platform_network_post_init+0xca>
 8006246:	2001      	movs	r0, #1
 8006248:	bd38      	pop	{r3, r4, r5, pc}
 800624a:	e7fe      	b.n	800624a <ai_platform_network_post_init+0xe6>
 800624c:	2210      	movs	r2, #16
 800624e:	2111      	movs	r1, #17
 8006250:	18a0      	adds	r0, r4, r2
 8006252:	f000 fa9b 	bl	800678c <core_set_error>
 8006256:	4628      	mov	r0, r5
 8006258:	bd38      	pop	{r3, r4, r5, pc}
 800625a:	bf00      	nop
 800625c:	a1c00100 	.word	0xa1c00100
 8006260:	e0042000 	.word	0xe0042000
 8006264:	58024000 	.word	0x58024000
 8006268:	f407a5c2 	.word	0xf407a5c2
 800626c:	b5e8b5cd 	.word	0xb5e8b5cd
 8006270:	40023000 	.word	0x40023000

08006274 <ai_platform_network_process>:
 8006274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006278:	460e      	mov	r6, r1
 800627a:	b085      	sub	sp, #20
 800627c:	4693      	mov	fp, r2
 800627e:	4605      	mov	r5, r0
 8006280:	b120      	cbz	r0, 800628c <ai_platform_network_process+0x18>
 8006282:	4bb8      	ldr	r3, [pc, #736]	; (8006564 <ai_platform_network_process+0x2f0>)
 8006284:	6802      	ldr	r2, [r0, #0]
 8006286:	429a      	cmp	r2, r3
 8006288:	bf18      	it	ne
 800628a:	2500      	movne	r5, #0
 800628c:	f7ff fabe 	bl	800580c <_ai_platform_acquire_crc>
 8006290:	4bb5      	ldr	r3, [pc, #724]	; (8006568 <ai_platform_network_process+0x2f4>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006298:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800629c:	d010      	beq.n	80062c0 <ai_platform_network_process+0x4c>
 800629e:	4ab3      	ldr	r2, [pc, #716]	; (800656c <ai_platform_network_process+0x2f8>)
 80062a0:	2301      	movs	r3, #1
 80062a2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80062a6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d1fb      	bne.n	80062a6 <ai_platform_network_process+0x32>
 80062ae:	4bb0      	ldr	r3, [pc, #704]	; (8006570 <ai_platform_network_process+0x2fc>)
 80062b0:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80062b4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80062b8:	4bae      	ldr	r3, [pc, #696]	; (8006574 <ai_platform_network_process+0x300>)
 80062ba:	429a      	cmp	r2, r3
 80062bc:	d00d      	beq.n	80062da <ai_platform_network_process+0x66>
 80062be:	e7fe      	b.n	80062be <ai_platform_network_process+0x4a>
 80062c0:	4aad      	ldr	r2, [pc, #692]	; (8006578 <ai_platform_network_process+0x304>)
 80062c2:	2301      	movs	r3, #1
 80062c4:	6093      	str	r3, [r2, #8]
 80062c6:	6893      	ldr	r3, [r2, #8]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d1fc      	bne.n	80062c6 <ai_platform_network_process+0x52>
 80062cc:	4ba8      	ldr	r3, [pc, #672]	; (8006570 <ai_platform_network_process+0x2fc>)
 80062ce:	6013      	str	r3, [r2, #0]
 80062d0:	6812      	ldr	r2, [r2, #0]
 80062d2:	4ba8      	ldr	r3, [pc, #672]	; (8006574 <ai_platform_network_process+0x300>)
 80062d4:	429a      	cmp	r2, r3
 80062d6:	f040 812c 	bne.w	8006532 <ai_platform_network_process+0x2be>
 80062da:	f7ff fa99 	bl	8005810 <_ai_platform_release_crc>
 80062de:	2d00      	cmp	r5, #0
 80062e0:	f000 8154 	beq.w	800658c <ai_platform_network_process+0x318>
 80062e4:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	f000 8124 	beq.w	8006534 <ai_platform_network_process+0x2c0>
 80062ec:	68eb      	ldr	r3, [r5, #12]
 80062ee:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 80062f2:	f003 0303 	and.w	r3, r3, #3
 80062f6:	2700      	movs	r7, #0
 80062f8:	2b03      	cmp	r3, #3
 80062fa:	616f      	str	r7, [r5, #20]
 80062fc:	f040 813e 	bne.w	800657c <ai_platform_network_process+0x308>
 8006300:	2e00      	cmp	r6, #0
 8006302:	f000 811d 	beq.w	8006540 <ai_platform_network_process+0x2cc>
 8006306:	f1ba 0f00 	cmp.w	sl, #0
 800630a:	f000 8119 	beq.w	8006540 <ai_platform_network_process+0x2cc>
 800630e:	f8ba 3000 	ldrh.w	r3, [sl]
 8006312:	2b00      	cmp	r3, #0
 8006314:	f000 8114 	beq.w	8006540 <ai_platform_network_process+0x2cc>
 8006318:	69b3      	ldr	r3, [r6, #24]
 800631a:	f8cd b00c 	str.w	fp, [sp, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	e9cd 3501 	strd	r3, r5, [sp, #4]
 8006324:	f8da 3004 	ldr.w	r3, [sl, #4]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d072      	beq.n	8006412 <ai_platform_network_process+0x19e>
 800632c:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8006330:	2c00      	cmp	r4, #0
 8006332:	d06e      	beq.n	8006412 <ai_platform_network_process+0x19e>
 8006334:	f8da 3008 	ldr.w	r3, [sl, #8]
 8006338:	f8d3 9000 	ldr.w	r9, [r3]
 800633c:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 8006340:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8006344:	f000 81de 	beq.w	8006704 <ai_platform_network_process+0x490>
 8006348:	69a3      	ldr	r3, [r4, #24]
 800634a:	2101      	movs	r1, #1
 800634c:	4630      	mov	r0, r6
 800634e:	685d      	ldr	r5, [r3, #4]
 8006350:	f7ff fa0e 	bl	8005770 <ai_buffer_get_size>
 8006354:	4285      	cmp	r5, r0
 8006356:	f0c0 811b 	bcc.w	8006590 <ai_platform_network_process+0x31c>
 800635a:	68e0      	ldr	r0, [r4, #12]
 800635c:	69b1      	ldr	r1, [r6, #24]
 800635e:	68c2      	ldr	r2, [r0, #12]
 8006360:	68cb      	ldr	r3, [r1, #12]
 8006362:	429a      	cmp	r2, r3
 8006364:	f040 8114 	bne.w	8006590 <ai_platform_network_process+0x31c>
 8006368:	6882      	ldr	r2, [r0, #8]
 800636a:	688b      	ldr	r3, [r1, #8]
 800636c:	429a      	cmp	r2, r3
 800636e:	f040 810f 	bne.w	8006590 <ai_platform_network_process+0x31c>
 8006372:	6842      	ldr	r2, [r0, #4]
 8006374:	684b      	ldr	r3, [r1, #4]
 8006376:	429a      	cmp	r2, r3
 8006378:	f040 810a 	bne.w	8006590 <ai_platform_network_process+0x31c>
 800637c:	69a3      	ldr	r3, [r4, #24]
 800637e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006382:	f001 fc7b 	bl	8007c7c <ai_array_get_data_byte_size>
 8006386:	4605      	mov	r5, r0
 8006388:	4620      	mov	r0, r4
 800638a:	f001 fc8f 	bl	8007cac <get_tensor_byte_size>
 800638e:	4285      	cmp	r5, r0
 8006390:	f0c0 80fe 	bcc.w	8006590 <ai_platform_network_process+0x31c>
 8006394:	69a3      	ldr	r3, [r4, #24]
 8006396:	6818      	ldr	r0, [r3, #0]
 8006398:	f001 fbdc 	bl	8007b54 <ai_array_to_buffer_fmt>
 800639c:	6833      	ldr	r3, [r6, #0]
 800639e:	4058      	eors	r0, r3
 80063a0:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 80063a4:	f040 81b9 	bne.w	800671a <ai_platform_network_process+0x4a6>
 80063a8:	6873      	ldr	r3, [r6, #4]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	f000 81ac 	beq.w	8006708 <ai_platform_network_process+0x494>
 80063b0:	69b3      	ldr	r3, [r6, #24]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	f000 819c 	beq.w	80066f2 <ai_platform_network_process+0x47e>
 80063ba:	9a01      	ldr	r2, [sp, #4]
 80063bc:	429a      	cmp	r2, r3
 80063be:	bf38      	it	cc
 80063c0:	461a      	movcc	r2, r3
 80063c2:	4620      	mov	r0, r4
 80063c4:	9201      	str	r2, [sp, #4]
 80063c6:	f001 fc71 	bl	8007cac <get_tensor_byte_size>
 80063ca:	f8c8 0008 	str.w	r0, [r8, #8]
 80063ce:	69b3      	ldr	r3, [r6, #24]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	fb00 f303 	mul.w	r3, r0, r3
 80063d6:	f8c8 300c 	str.w	r3, [r8, #12]
 80063da:	6871      	ldr	r1, [r6, #4]
 80063dc:	f8c8 1004 	str.w	r1, [r8, #4]
 80063e0:	440b      	add	r3, r1
 80063e2:	f849 300b 	str.w	r3, [r9, fp]
 80063e6:	69a0      	ldr	r0, [r4, #24]
 80063e8:	6803      	ldr	r3, [r0, #0]
 80063ea:	009a      	lsls	r2, r3, #2
 80063ec:	f107 0701 	add.w	r7, r7, #1
 80063f0:	f106 061c 	add.w	r6, r6, #28
 80063f4:	f100 80af 	bmi.w	8006556 <ai_platform_network_process+0x2e2>
 80063f8:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 80063fc:	1a9b      	subs	r3, r3, r2
 80063fe:	4419      	add	r1, r3
 8006400:	6081      	str	r1, [r0, #8]
 8006402:	69a3      	ldr	r3, [r4, #24]
 8006404:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8006408:	60da      	str	r2, [r3, #12]
 800640a:	f8ba 3000 	ldrh.w	r3, [sl]
 800640e:	42bb      	cmp	r3, r7
 8006410:	d888      	bhi.n	8006324 <ai_platform_network_process+0xb0>
 8006412:	e9dd 5b02 	ldrd	r5, fp, [sp, #8]
 8006416:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 8006418:	f1bb 0f00 	cmp.w	fp, #0
 800641c:	f000 8186 	beq.w	800672c <ai_platform_network_process+0x4b8>
 8006420:	2a01      	cmp	r2, #1
 8006422:	f240 815e 	bls.w	80066e2 <ai_platform_network_process+0x46e>
 8006426:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 800642a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800642e:	2b00      	cmp	r3, #0
 8006430:	f000 8157 	beq.w	80066e2 <ai_platform_network_process+0x46e>
 8006434:	465e      	mov	r6, fp
 8006436:	2700      	movs	r7, #0
 8006438:	462c      	mov	r4, r5
 800643a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800643e:	2b00      	cmp	r3, #0
 8006440:	f000 80b4 	beq.w	80065ac <ai_platform_network_process+0x338>
 8006444:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
 8006448:	2d00      	cmp	r5, #0
 800644a:	f000 80af 	beq.w	80065ac <ai_platform_network_process+0x338>
 800644e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8006452:	f8d3 8000 	ldr.w	r8, [r3]
 8006456:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 800645a:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 800645e:	f000 8171 	beq.w	8006744 <ai_platform_network_process+0x4d0>
 8006462:	69ab      	ldr	r3, [r5, #24]
 8006464:	2101      	movs	r1, #1
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	9302      	str	r3, [sp, #8]
 800646a:	4630      	mov	r0, r6
 800646c:	f7ff f980 	bl	8005770 <ai_buffer_get_size>
 8006470:	9b02      	ldr	r3, [sp, #8]
 8006472:	4283      	cmp	r3, r0
 8006474:	f0c0 8134 	bcc.w	80066e0 <ai_platform_network_process+0x46c>
 8006478:	68e8      	ldr	r0, [r5, #12]
 800647a:	69b1      	ldr	r1, [r6, #24]
 800647c:	68c2      	ldr	r2, [r0, #12]
 800647e:	68cb      	ldr	r3, [r1, #12]
 8006480:	429a      	cmp	r2, r3
 8006482:	f040 812d 	bne.w	80066e0 <ai_platform_network_process+0x46c>
 8006486:	6882      	ldr	r2, [r0, #8]
 8006488:	688b      	ldr	r3, [r1, #8]
 800648a:	429a      	cmp	r2, r3
 800648c:	f040 8128 	bne.w	80066e0 <ai_platform_network_process+0x46c>
 8006490:	6842      	ldr	r2, [r0, #4]
 8006492:	684b      	ldr	r3, [r1, #4]
 8006494:	429a      	cmp	r2, r3
 8006496:	f040 8123 	bne.w	80066e0 <ai_platform_network_process+0x46c>
 800649a:	69ab      	ldr	r3, [r5, #24]
 800649c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80064a0:	f001 fbec 	bl	8007c7c <ai_array_get_data_byte_size>
 80064a4:	9002      	str	r0, [sp, #8]
 80064a6:	4628      	mov	r0, r5
 80064a8:	f001 fc00 	bl	8007cac <get_tensor_byte_size>
 80064ac:	9b02      	ldr	r3, [sp, #8]
 80064ae:	4283      	cmp	r3, r0
 80064b0:	f0c0 8116 	bcc.w	80066e0 <ai_platform_network_process+0x46c>
 80064b4:	69ab      	ldr	r3, [r5, #24]
 80064b6:	6818      	ldr	r0, [r3, #0]
 80064b8:	f001 fb4c 	bl	8007b54 <ai_array_to_buffer_fmt>
 80064bc:	6833      	ldr	r3, [r6, #0]
 80064be:	4058      	eors	r0, r3
 80064c0:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 80064c4:	f040 8136 	bne.w	8006734 <ai_platform_network_process+0x4c0>
 80064c8:	6873      	ldr	r3, [r6, #4]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	f000 814d 	beq.w	800676a <ai_platform_network_process+0x4f6>
 80064d0:	69b3      	ldr	r3, [r6, #24]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	f000 813f 	beq.w	8006758 <ai_platform_network_process+0x4e4>
 80064da:	9a01      	ldr	r2, [sp, #4]
 80064dc:	429a      	cmp	r2, r3
 80064de:	bf38      	it	cc
 80064e0:	461a      	movcc	r2, r3
 80064e2:	4628      	mov	r0, r5
 80064e4:	9201      	str	r2, [sp, #4]
 80064e6:	f001 fbe1 	bl	8007cac <get_tensor_byte_size>
 80064ea:	f8ca 0008 	str.w	r0, [sl, #8]
 80064ee:	69b3      	ldr	r3, [r6, #24]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	fb00 f303 	mul.w	r3, r0, r3
 80064f6:	f8ca 300c 	str.w	r3, [sl, #12]
 80064fa:	6871      	ldr	r1, [r6, #4]
 80064fc:	f8ca 1004 	str.w	r1, [sl, #4]
 8006500:	440b      	add	r3, r1
 8006502:	f848 300b 	str.w	r3, [r8, fp]
 8006506:	69a8      	ldr	r0, [r5, #24]
 8006508:	6803      	ldr	r3, [r0, #0]
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	f107 0701 	add.w	r7, r7, #1
 8006510:	f106 061c 	add.w	r6, r6, #28
 8006514:	d445      	bmi.n	80065a2 <ai_platform_network_process+0x32e>
 8006516:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800651a:	1a9b      	subs	r3, r3, r2
 800651c:	4419      	add	r1, r3
 800651e:	6081      	str	r1, [r0, #8]
 8006520:	69ab      	ldr	r3, [r5, #24]
 8006522:	f8da 2004 	ldr.w	r2, [sl, #4]
 8006526:	60da      	str	r2, [r3, #12]
 8006528:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800652c:	429f      	cmp	r7, r3
 800652e:	d384      	bcc.n	800643a <ai_platform_network_process+0x1c6>
 8006530:	e03c      	b.n	80065ac <ai_platform_network_process+0x338>
 8006532:	e7fe      	b.n	8006532 <ai_platform_network_process+0x2be>
 8006534:	68ea      	ldr	r2, [r5, #12]
 8006536:	616b      	str	r3, [r5, #20]
 8006538:	f002 0203 	and.w	r2, r2, #3
 800653c:	2a03      	cmp	r2, #3
 800653e:	d11d      	bne.n	800657c <ai_platform_network_process+0x308>
 8006540:	2217      	movs	r2, #23
 8006542:	2112      	movs	r1, #18
 8006544:	f105 0010 	add.w	r0, r5, #16
 8006548:	f000 f920 	bl	800678c <core_set_error>
 800654c:	2400      	movs	r4, #0
 800654e:	4620      	mov	r0, r4
 8006550:	b005      	add	sp, #20
 8006552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006556:	f8ba 3000 	ldrh.w	r3, [sl]
 800655a:	429f      	cmp	r7, r3
 800655c:	f4ff aee2 	bcc.w	8006324 <ai_platform_network_process+0xb0>
 8006560:	e757      	b.n	8006412 <ai_platform_network_process+0x19e>
 8006562:	bf00      	nop
 8006564:	a1c00100 	.word	0xa1c00100
 8006568:	e0042000 	.word	0xe0042000
 800656c:	58024000 	.word	0x58024000
 8006570:	f407a5c2 	.word	0xf407a5c2
 8006574:	b5e8b5cd 	.word	0xb5e8b5cd
 8006578:	40023000 	.word	0x40023000
 800657c:	2230      	movs	r2, #48	; 0x30
 800657e:	2111      	movs	r1, #17
 8006580:	f105 0010 	add.w	r0, r5, #16
 8006584:	f000 f902 	bl	800678c <core_set_error>
 8006588:	2400      	movs	r4, #0
 800658a:	e7e0      	b.n	800654e <ai_platform_network_process+0x2da>
 800658c:	462c      	mov	r4, r5
 800658e:	e7de      	b.n	800654e <ai_platform_network_process+0x2da>
 8006590:	9d02      	ldr	r5, [sp, #8]
 8006592:	2218      	movs	r2, #24
 8006594:	2112      	movs	r1, #18
 8006596:	f105 0010 	add.w	r0, r5, #16
 800659a:	f000 f8f7 	bl	800678c <core_set_error>
 800659e:	2400      	movs	r4, #0
 80065a0:	e7d5      	b.n	800654e <ai_platform_network_process+0x2da>
 80065a2:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80065a6:	429f      	cmp	r7, r3
 80065a8:	f4ff af47 	bcc.w	800643a <ai_platform_network_process+0x1c6>
 80065ac:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80065b0:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 80065b2:	82a3      	strh	r3, [r4, #20]
 80065b4:	4625      	mov	r5, r4
 80065b6:	2a00      	cmp	r2, #0
 80065b8:	f040 808c 	bne.w	80066d4 <ai_platform_network_process+0x460>
 80065bc:	4616      	mov	r6, r2
 80065be:	4617      	mov	r7, r2
 80065c0:	8aec      	ldrh	r4, [r5, #22]
 80065c2:	429c      	cmp	r4, r3
 80065c4:	bf38      	it	cc
 80065c6:	46ab      	movcc	fp, r5
 80065c8:	d2c1      	bcs.n	800654e <ai_platform_network_process+0x2da>
 80065ca:	2e00      	cmp	r6, #0
 80065cc:	d030      	beq.n	8006630 <ai_platform_network_process+0x3bc>
 80065ce:	f04f 0800 	mov.w	r8, #0
 80065d2:	e014      	b.n	80065fe <ai_platform_network_process+0x38a>
 80065d4:	6882      	ldr	r2, [r0, #8]
 80065d6:	68c5      	ldr	r5, [r0, #12]
 80065d8:	6863      	ldr	r3, [r4, #4]
 80065da:	1b52      	subs	r2, r2, r5
 80065dc:	4413      	add	r3, r2
 80065de:	6083      	str	r3, [r0, #8]
 80065e0:	698b      	ldr	r3, [r1, #24]
 80065e2:	6862      	ldr	r2, [r4, #4]
 80065e4:	60da      	str	r2, [r3, #12]
 80065e6:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80065ea:	f859 200a 	ldr.w	r2, [r9, sl]
 80065ee:	440b      	add	r3, r1
 80065f0:	4293      	cmp	r3, r2
 80065f2:	bf24      	itt	cs
 80065f4:	68e3      	ldrcs	r3, [r4, #12]
 80065f6:	1ad3      	subcs	r3, r2, r3
 80065f8:	6063      	str	r3, [r4, #4]
 80065fa:	f108 0801 	add.w	r8, r8, #1
 80065fe:	8833      	ldrh	r3, [r6, #0]
 8006600:	4543      	cmp	r3, r8
 8006602:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8006606:	d913      	bls.n	8006630 <ai_platform_network_process+0x3bc>
 8006608:	6873      	ldr	r3, [r6, #4]
 800660a:	b18b      	cbz	r3, 8006630 <ai_platform_network_process+0x3bc>
 800660c:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8006610:	b171      	cbz	r1, 8006630 <ai_platform_network_process+0x3bc>
 8006612:	6988      	ldr	r0, [r1, #24]
 8006614:	68b2      	ldr	r2, [r6, #8]
 8006616:	6803      	ldr	r3, [r0, #0]
 8006618:	f8d2 9000 	ldr.w	r9, [r2]
 800661c:	009d      	lsls	r5, r3, #2
 800661e:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8006622:	d5d7      	bpl.n	80065d4 <ai_platform_network_process+0x360>
 8006624:	6881      	ldr	r1, [r0, #8]
 8006626:	68a2      	ldr	r2, [r4, #8]
 8006628:	6860      	ldr	r0, [r4, #4]
 800662a:	f001 f9a5 	bl	8007978 <st_int8_copy>
 800662e:	e7da      	b.n	80065e6 <ai_platform_network_process+0x372>
 8006630:	4658      	mov	r0, fp
 8006632:	f000 f903 	bl	800683c <ai_layers_forward_all>
 8006636:	2f00      	cmp	r7, #0
 8006638:	d03d      	beq.n	80066b6 <ai_platform_network_process+0x442>
 800663a:	2400      	movs	r4, #0
 800663c:	e016      	b.n	800666c <ai_platform_network_process+0x3f8>
 800663e:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8006642:	f859 100a 	ldr.w	r1, [r9, sl]
 8006646:	4413      	add	r3, r2
 8006648:	428b      	cmp	r3, r1
 800664a:	bf24      	itt	cs
 800664c:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8006650:	1acb      	subcs	r3, r1, r3
 8006652:	f8c8 3004 	str.w	r3, [r8, #4]
 8006656:	6981      	ldr	r1, [r0, #24]
 8006658:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 800665c:	1b52      	subs	r2, r2, r5
 800665e:	4413      	add	r3, r2
 8006660:	608b      	str	r3, [r1, #8]
 8006662:	6983      	ldr	r3, [r0, #24]
 8006664:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8006668:	60da      	str	r2, [r3, #12]
 800666a:	3401      	adds	r4, #1
 800666c:	883b      	ldrh	r3, [r7, #0]
 800666e:	42a3      	cmp	r3, r4
 8006670:	d921      	bls.n	80066b6 <ai_platform_network_process+0x442>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	b1fb      	cbz	r3, 80066b6 <ai_platform_network_process+0x442>
 8006676:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800667a:	b1e0      	cbz	r0, 80066b6 <ai_platform_network_process+0x442>
 800667c:	68ba      	ldr	r2, [r7, #8]
 800667e:	6983      	ldr	r3, [r0, #24]
 8006680:	f8d2 9000 	ldr.w	r9, [r2]
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	0092      	lsls	r2, r2, #2
 8006688:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 800668c:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8006690:	d5d5      	bpl.n	800663e <ai_platform_network_process+0x3ca>
 8006692:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 8006696:	6898      	ldr	r0, [r3, #8]
 8006698:	f001 f96e 	bl	8007978 <st_int8_copy>
 800669c:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 80066a0:	f859 200a 	ldr.w	r2, [r9, sl]
 80066a4:	440b      	add	r3, r1
 80066a6:	4293      	cmp	r3, r2
 80066a8:	bf24      	itt	cs
 80066aa:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 80066ae:	1ad3      	subcs	r3, r2, r3
 80066b0:	f8c8 3004 	str.w	r3, [r8, #4]
 80066b4:	e7d9      	b.n	800666a <ai_platform_network_process+0x3f6>
 80066b6:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 80066ba:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 80066be:	3401      	adds	r4, #1
 80066c0:	b2a4      	uxth	r4, r4
 80066c2:	42a3      	cmp	r3, r4
 80066c4:	f8ab 4016 	strh.w	r4, [fp, #22]
 80066c8:	f63f af7f 	bhi.w	80065ca <ai_platform_network_process+0x356>
 80066cc:	4620      	mov	r0, r4
 80066ce:	b005      	add	sp, #20
 80066d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066d4:	2a01      	cmp	r2, #1
 80066d6:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 80066d8:	d03c      	beq.n	8006754 <ai_platform_network_process+0x4e0>
 80066da:	f106 070c 	add.w	r7, r6, #12
 80066de:	e76f      	b.n	80065c0 <ai_platform_network_process+0x34c>
 80066e0:	4625      	mov	r5, r4
 80066e2:	2218      	movs	r2, #24
 80066e4:	2113      	movs	r1, #19
 80066e6:	f105 0010 	add.w	r0, r5, #16
 80066ea:	f000 f84f 	bl	800678c <core_set_error>
 80066ee:	2400      	movs	r4, #0
 80066f0:	e72d      	b.n	800654e <ai_platform_network_process+0x2da>
 80066f2:	9d02      	ldr	r5, [sp, #8]
 80066f4:	4604      	mov	r4, r0
 80066f6:	2221      	movs	r2, #33	; 0x21
 80066f8:	2112      	movs	r1, #18
 80066fa:	f105 0010 	add.w	r0, r5, #16
 80066fe:	f000 f845 	bl	800678c <core_set_error>
 8006702:	e724      	b.n	800654e <ai_platform_network_process+0x2da>
 8006704:	9d02      	ldr	r5, [sp, #8]
 8006706:	e71b      	b.n	8006540 <ai_platform_network_process+0x2cc>
 8006708:	9d02      	ldr	r5, [sp, #8]
 800670a:	4604      	mov	r4, r0
 800670c:	2217      	movs	r2, #23
 800670e:	2112      	movs	r1, #18
 8006710:	f105 0010 	add.w	r0, r5, #16
 8006714:	f000 f83a 	bl	800678c <core_set_error>
 8006718:	e719      	b.n	800654e <ai_platform_network_process+0x2da>
 800671a:	9d02      	ldr	r5, [sp, #8]
 800671c:	2219      	movs	r2, #25
 800671e:	2112      	movs	r1, #18
 8006720:	f105 0010 	add.w	r0, r5, #16
 8006724:	f000 f832 	bl	800678c <core_set_error>
 8006728:	2400      	movs	r4, #0
 800672a:	e710      	b.n	800654e <ai_platform_network_process+0x2da>
 800672c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8006730:	82ab      	strh	r3, [r5, #20]
 8006732:	e740      	b.n	80065b6 <ai_platform_network_process+0x342>
 8006734:	f104 0010 	add.w	r0, r4, #16
 8006738:	2219      	movs	r2, #25
 800673a:	2113      	movs	r1, #19
 800673c:	f000 f826 	bl	800678c <core_set_error>
 8006740:	2400      	movs	r4, #0
 8006742:	e704      	b.n	800654e <ai_platform_network_process+0x2da>
 8006744:	f104 0010 	add.w	r0, r4, #16
 8006748:	2217      	movs	r2, #23
 800674a:	2113      	movs	r1, #19
 800674c:	f000 f81e 	bl	800678c <core_set_error>
 8006750:	4654      	mov	r4, sl
 8006752:	e6fc      	b.n	800654e <ai_platform_network_process+0x2da>
 8006754:	2700      	movs	r7, #0
 8006756:	e733      	b.n	80065c0 <ai_platform_network_process+0x34c>
 8006758:	4625      	mov	r5, r4
 800675a:	2221      	movs	r2, #33	; 0x21
 800675c:	4604      	mov	r4, r0
 800675e:	2113      	movs	r1, #19
 8006760:	f105 0010 	add.w	r0, r5, #16
 8006764:	f000 f812 	bl	800678c <core_set_error>
 8006768:	e6f1      	b.n	800654e <ai_platform_network_process+0x2da>
 800676a:	4625      	mov	r5, r4
 800676c:	2217      	movs	r2, #23
 800676e:	4604      	mov	r4, r0
 8006770:	2113      	movs	r1, #19
 8006772:	f105 0010 	add.w	r0, r5, #16
 8006776:	f000 f809 	bl	800678c <core_set_error>
 800677a:	e6e8      	b.n	800654e <ai_platform_network_process+0x2da>

0800677c <core_init>:
 800677c:	2001      	movs	r0, #1
 800677e:	4770      	bx	lr

08006780 <core_get_error>:
 8006780:	4603      	mov	r3, r0
 8006782:	2200      	movs	r2, #0
 8006784:	6800      	ldr	r0, [r0, #0]
 8006786:	601a      	str	r2, [r3, #0]
 8006788:	4770      	bx	lr
 800678a:	bf00      	nop

0800678c <core_set_error>:
 800678c:	4603      	mov	r3, r0
 800678e:	7800      	ldrb	r0, [r0, #0]
 8006790:	b108      	cbz	r0, 8006796 <core_set_error+0xa>
 8006792:	2000      	movs	r0, #0
 8006794:	4770      	bx	lr
 8006796:	7019      	strb	r1, [r3, #0]
 8006798:	6819      	ldr	r1, [r3, #0]
 800679a:	f362 211f 	bfi	r1, r2, #8, #24
 800679e:	2001      	movs	r0, #1
 80067a0:	6019      	str	r1, [r3, #0]
 80067a2:	4770      	bx	lr

080067a4 <ai_check_custom_types>:
 80067a4:	b082      	sub	sp, #8
 80067a6:	4b13      	ldr	r3, [pc, #76]	; (80067f4 <ai_check_custom_types+0x50>)
 80067a8:	9301      	str	r3, [sp, #4]
 80067aa:	b118      	cbz	r0, 80067b4 <ai_check_custom_types+0x10>
 80067ac:	7803      	ldrb	r3, [r0, #0]
 80067ae:	2b03      	cmp	r3, #3
 80067b0:	d002      	beq.n	80067b8 <ai_check_custom_types+0x14>
 80067b2:	2000      	movs	r0, #0
 80067b4:	b002      	add	sp, #8
 80067b6:	4770      	bx	lr
 80067b8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80067bc:	4293      	cmp	r3, r2
 80067be:	d004      	beq.n	80067ca <ai_check_custom_types+0x26>
 80067c0:	2001      	movs	r0, #1
 80067c2:	f080 0001 	eor.w	r0, r0, #1
 80067c6:	b002      	add	sp, #8
 80067c8:	4770      	bx	lr
 80067ca:	7842      	ldrb	r2, [r0, #1]
 80067cc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80067d0:	429a      	cmp	r2, r3
 80067d2:	f100 0001 	add.w	r0, r0, #1
 80067d6:	d1f3      	bne.n	80067c0 <ai_check_custom_types+0x1c>
 80067d8:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80067dc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d1ed      	bne.n	80067c0 <ai_check_custom_types+0x1c>
 80067e4:	7842      	ldrb	r2, [r0, #1]
 80067e6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d1e8      	bne.n	80067c0 <ai_check_custom_types+0x1c>
 80067ee:	2000      	movs	r0, #0
 80067f0:	e7e7      	b.n	80067c2 <ai_check_custom_types+0x1e>
 80067f2:	bf00      	nop
 80067f4:	84048403 	.word	0x84048403

080067f8 <ai_layers_init_all>:
 80067f8:	4601      	mov	r1, r0
 80067fa:	2000      	movs	r0, #0
 80067fc:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80067fe:	b143      	cbz	r3, 8006812 <ai_layers_init_all+0x1a>
 8006800:	691a      	ldr	r2, [r3, #16]
 8006802:	60d9      	str	r1, [r3, #12]
 8006804:	429a      	cmp	r2, r3
 8006806:	f100 0001 	add.w	r0, r0, #1
 800680a:	d002      	beq.n	8006812 <ai_layers_init_all+0x1a>
 800680c:	b10a      	cbz	r2, 8006812 <ai_layers_init_all+0x1a>
 800680e:	4613      	mov	r3, r2
 8006810:	e7f5      	b.n	80067fe <ai_layers_init_all+0x6>
 8006812:	4770      	bx	lr

08006814 <ai_layers_post_init_all>:
 8006814:	b538      	push	{r3, r4, r5, lr}
 8006816:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8006818:	2500      	movs	r5, #0
 800681a:	b16c      	cbz	r4, 8006838 <ai_layers_post_init_all+0x24>
 800681c:	6863      	ldr	r3, [r4, #4]
 800681e:	07db      	lsls	r3, r3, #31
 8006820:	d504      	bpl.n	800682c <ai_layers_post_init_all+0x18>
 8006822:	6a23      	ldr	r3, [r4, #32]
 8006824:	4620      	mov	r0, r4
 8006826:	b10b      	cbz	r3, 800682c <ai_layers_post_init_all+0x18>
 8006828:	4798      	blx	r3
 800682a:	3501      	adds	r5, #1
 800682c:	6923      	ldr	r3, [r4, #16]
 800682e:	42a3      	cmp	r3, r4
 8006830:	d002      	beq.n	8006838 <ai_layers_post_init_all+0x24>
 8006832:	b10b      	cbz	r3, 8006838 <ai_layers_post_init_all+0x24>
 8006834:	461c      	mov	r4, r3
 8006836:	e7f0      	b.n	800681a <ai_layers_post_init_all+0x6>
 8006838:	4628      	mov	r0, r5
 800683a:	bd38      	pop	{r3, r4, r5, pc}

0800683c <ai_layers_forward_all>:
 800683c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006840:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 8006844:	4604      	mov	r4, r0
 8006846:	f1b8 0f00 	cmp.w	r8, #0
 800684a:	d02b      	beq.n	80068a4 <ai_layers_forward_all+0x68>
 800684c:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800684e:	6381      	str	r1, [r0, #56]	; 0x38
 8006850:	b321      	cbz	r1, 800689c <ai_layers_forward_all+0x60>
 8006852:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8006854:	2001      	movs	r0, #1
 8006856:	47c0      	blx	r8
 8006858:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800685a:	b1fe      	cbz	r6, 800689c <ai_layers_forward_all+0x60>
 800685c:	2700      	movs	r7, #0
 800685e:	4631      	mov	r1, r6
 8006860:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006862:	2002      	movs	r0, #2
 8006864:	47c0      	blx	r8
 8006866:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8006868:	4628      	mov	r0, r5
 800686a:	696b      	ldr	r3, [r5, #20]
 800686c:	4798      	blx	r3
 800686e:	692e      	ldr	r6, [r5, #16]
 8006870:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006872:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006874:	42b5      	cmp	r5, r6
 8006876:	f04f 0003 	mov.w	r0, #3
 800687a:	d007      	beq.n	800688c <ai_layers_forward_all+0x50>
 800687c:	47c0      	blx	r8
 800687e:	3701      	adds	r7, #1
 8006880:	63a6      	str	r6, [r4, #56]	; 0x38
 8006882:	2e00      	cmp	r6, #0
 8006884:	d1eb      	bne.n	800685e <ai_layers_forward_all+0x22>
 8006886:	4638      	mov	r0, r7
 8006888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800688c:	2003      	movs	r0, #3
 800688e:	47c0      	blx	r8
 8006890:	2300      	movs	r3, #0
 8006892:	3701      	adds	r7, #1
 8006894:	63a3      	str	r3, [r4, #56]	; 0x38
 8006896:	4638      	mov	r0, r7
 8006898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800689c:	2700      	movs	r7, #0
 800689e:	4638      	mov	r0, r7
 80068a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068a4:	6b45      	ldr	r5, [r0, #52]	; 0x34
 80068a6:	6385      	str	r5, [r0, #56]	; 0x38
 80068a8:	2d00      	cmp	r5, #0
 80068aa:	d0f7      	beq.n	800689c <ai_layers_forward_all+0x60>
 80068ac:	4647      	mov	r7, r8
 80068ae:	696b      	ldr	r3, [r5, #20]
 80068b0:	4628      	mov	r0, r5
 80068b2:	4798      	blx	r3
 80068b4:	462b      	mov	r3, r5
 80068b6:	692d      	ldr	r5, [r5, #16]
 80068b8:	429d      	cmp	r5, r3
 80068ba:	d004      	beq.n	80068c6 <ai_layers_forward_all+0x8a>
 80068bc:	63a5      	str	r5, [r4, #56]	; 0x38
 80068be:	3701      	adds	r7, #1
 80068c0:	2d00      	cmp	r5, #0
 80068c2:	d1f4      	bne.n	80068ae <ai_layers_forward_all+0x72>
 80068c4:	e7df      	b.n	8006886 <ai_layers_forward_all+0x4a>
 80068c6:	2300      	movs	r3, #0
 80068c8:	63a3      	str	r3, [r4, #56]	; 0x38
 80068ca:	3701      	adds	r7, #1
 80068cc:	e7db      	b.n	8006886 <ai_layers_forward_all+0x4a>
 80068ce:	bf00      	nop

080068d0 <forward_dense>:
 80068d0:	6983      	ldr	r3, [r0, #24]
 80068d2:	881a      	ldrh	r2, [r3, #0]
 80068d4:	2a00      	cmp	r2, #0
 80068d6:	f000 8181 	beq.w	8006bdc <forward_dense+0x30c>
 80068da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068de:	ed2d 8b02 	vpush	{d8}
 80068e2:	f8d3 c004 	ldr.w	ip, [r3, #4]
 80068e6:	f8dc 5004 	ldr.w	r5, [ip, #4]
 80068ea:	b095      	sub	sp, #84	; 0x54
 80068ec:	b105      	cbz	r5, 80068f0 <forward_dense+0x20>
 80068ee:	682d      	ldr	r5, [r5, #0]
 80068f0:	2a01      	cmp	r2, #1
 80068f2:	f000 828f 	beq.w	8006e14 <forward_dense+0x544>
 80068f6:	f8dc 6010 	ldr.w	r6, [ip, #16]
 80068fa:	b106      	cbz	r6, 80068fe <forward_dense+0x2e>
 80068fc:	6836      	ldr	r6, [r6, #0]
 80068fe:	2a02      	cmp	r2, #2
 8006900:	f000 816e 	beq.w	8006be0 <forward_dense+0x310>
 8006904:	f8dc 301c 	ldr.w	r3, [ip, #28]
 8006908:	930b      	str	r3, [sp, #44]	; 0x2c
 800690a:	2b00      	cmp	r3, #0
 800690c:	f000 8274 	beq.w	8006df8 <forward_dense+0x528>
 8006910:	4619      	mov	r1, r3
 8006912:	f8bc 3018 	ldrh.w	r3, [ip, #24]
 8006916:	6809      	ldr	r1, [r1, #0]
 8006918:	910d      	str	r1, [sp, #52]	; 0x34
 800691a:	2b01      	cmp	r3, #1
 800691c:	f240 826e 	bls.w	8006dfc <forward_dense+0x52c>
 8006920:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	930b      	str	r3, [sp, #44]	; 0x2c
 8006926:	460b      	mov	r3, r1
 8006928:	68e8      	ldr	r0, [r5, #12]
 800692a:	68f7      	ldr	r7, [r6, #12]
 800692c:	6840      	ldr	r0, [r0, #4]
 800692e:	6999      	ldr	r1, [r3, #24]
 8006930:	9013      	str	r0, [sp, #76]	; 0x4c
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	680b      	ldr	r3, [r1, #0]
 8006936:	9012      	str	r0, [sp, #72]	; 0x48
 8006938:	e9d7 4702 	ldrd	r4, r7, [r7, #8]
 800693c:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 8006940:	fb00 f404 	mul.w	r4, r0, r4
 8006944:	f3c3 5041 	ubfx	r0, r3, #21, #2
 8006948:	fa4e f000 	asr.w	r0, lr, r0
 800694c:	2a03      	cmp	r2, #3
 800694e:	9010      	str	r0, [sp, #64]	; 0x40
 8006950:	f000 825d 	beq.w	8006e0e <forward_dense+0x53e>
 8006954:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
 8006958:	f3c3 4343 	ubfx	r3, r3, #17, #4
 800695c:	2a00      	cmp	r2, #0
 800695e:	f000 8246 	beq.w	8006dee <forward_dense+0x51e>
 8006962:	6812      	ldr	r2, [r2, #0]
 8006964:	2a00      	cmp	r2, #0
 8006966:	f000 8242 	beq.w	8006dee <forward_dense+0x51e>
 800696a:	2b04      	cmp	r3, #4
 800696c:	f8d2 9018 	ldr.w	r9, [r2, #24]
 8006970:	f000 822c 	beq.w	8006dcc <forward_dense+0x4fc>
 8006974:	2b08      	cmp	r3, #8
 8006976:	f000 8229 	beq.w	8006dcc <forward_dense+0x4fc>
 800697a:	f04f 0b00 	mov.w	fp, #0
 800697e:	69b2      	ldr	r2, [r6, #24]
 8006980:	69ab      	ldr	r3, [r5, #24]
 8006982:	6891      	ldr	r1, [r2, #8]
 8006984:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006986:	689b      	ldr	r3, [r3, #8]
 8006988:	6952      	ldr	r2, [r2, #20]
 800698a:	9106      	str	r1, [sp, #24]
 800698c:	fb07 f404 	mul.w	r4, r7, r4
 8006990:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8006994:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006996:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800699a:	4281      	cmp	r1, r0
 800699c:	ea4f 0482 	mov.w	r4, r2, lsl #2
 80069a0:	900e      	str	r0, [sp, #56]	; 0x38
 80069a2:	940c      	str	r4, [sp, #48]	; 0x30
 80069a4:	eb01 0882 	add.w	r8, r1, r2, lsl #2
 80069a8:	f080 8113 	bcs.w	8006bd2 <forward_dense+0x302>
 80069ac:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80069ae:	ed9f 8a93 	vldr	s16, [pc, #588]	; 8006bfc <forward_dense+0x32c>
 80069b2:	f021 0201 	bic.w	r2, r1, #1
 80069b6:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80069ba:	9204      	str	r2, [sp, #16]
 80069bc:	f001 0201 	and.w	r2, r1, #1
 80069c0:	08c8      	lsrs	r0, r1, #3
 80069c2:	9208      	str	r2, [sp, #32]
 80069c4:	008a      	lsls	r2, r1, #2
 80069c6:	f001 0a07 	and.w	sl, r1, #7
 80069ca:	920f      	str	r2, [sp, #60]	; 0x3c
 80069cc:	eb03 1240 	add.w	r2, r3, r0, lsl #5
 80069d0:	3320      	adds	r3, #32
 80069d2:	465c      	mov	r4, fp
 80069d4:	9007      	str	r0, [sp, #28]
 80069d6:	46cb      	mov	fp, r9
 80069d8:	9205      	str	r2, [sp, #20]
 80069da:	9302      	str	r3, [sp, #8]
 80069dc:	46c1      	mov	r9, r8
 80069de:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 80069e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069e4:	699b      	ldr	r3, [r3, #24]
 80069e6:	689a      	ldr	r2, [r3, #8]
 80069e8:	9b02      	ldr	r3, [sp, #8]
 80069ea:	3b20      	subs	r3, #32
 80069ec:	930a      	str	r3, [sp, #40]	; 0x28
 80069ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069f0:	b10b      	cbz	r3, 80069f6 <forward_dense+0x126>
 80069f2:	699b      	ldr	r3, [r3, #24]
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	2c00      	cmp	r4, #0
 80069f8:	f000 81da 	beq.w	8006db0 <forward_dense+0x4e0>
 80069fc:	9910      	ldr	r1, [sp, #64]	; 0x40
 80069fe:	2904      	cmp	r1, #4
 8006a00:	9906      	ldr	r1, [sp, #24]
 8006a02:	f000 80fd 	beq.w	8006c00 <forward_dense+0x330>
 8006a06:	4549      	cmp	r1, r9
 8006a08:	f080 80d2 	bcs.w	8006bb0 <forward_dense+0x2e0>
 8006a0c:	460f      	mov	r7, r1
 8006a0e:	9907      	ldr	r1, [sp, #28]
 8006a10:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8006a14:	f8dd a014 	ldr.w	sl, [sp, #20]
 8006a18:	1c4e      	adds	r6, r1, #1
 8006a1a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8006a1e:	4694      	mov	ip, r2
 8006a20:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006a22:	468e      	mov	lr, r1
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	f000 80de 	beq.w	8006be6 <forward_dense+0x316>
 8006a2a:	ecf3 2a01 	vldmia	r3!, {s5}
 8006a2e:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8006bfc <forward_dense+0x32c>
 8006a32:	f1be 0f00 	cmp.w	lr, #0
 8006a36:	f000 80de 	beq.w	8006bf6 <forward_dense+0x326>
 8006a3a:	f10c 0108 	add.w	r1, ip, #8
 8006a3e:	4640      	mov	r0, r8
 8006a40:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 8006a44:	ed10 3a07 	vldr	s6, [r0, #-28]	; 0xffffffe4
 8006a48:	ed50 3a08 	vldr	s7, [r0, #-32]	; 0xffffffe0
 8006a4c:	ed10 4a06 	vldr	s8, [r0, #-24]	; 0xffffffe8
 8006a50:	ed50 4a05 	vldr	s9, [r0, #-20]	; 0xffffffec
 8006a54:	ed10 5a04 	vldr	s10, [r0, #-16]
 8006a58:	ed50 5a03 	vldr	s11, [r0, #-12]
 8006a5c:	ed10 6a02 	vldr	s12, [r0, #-8]
 8006a60:	ed50 6a01 	vldr	s13, [r0, #-4]
 8006a64:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006a68:	edd5 7a00 	vldr	s15, [r5]
 8006a6c:	f811 5c08 	ldrb.w	r5, [r1, #-8]
 8006a70:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006a74:	ee67 7a83 	vmul.f32	s15, s15, s6
 8006a78:	ed95 3a00 	vldr	s6, [r5]
 8006a7c:	f811 5c06 	ldrb.w	r5, [r1, #-6]
 8006a80:	eee3 7a23 	vfma.f32	s15, s6, s7
 8006a84:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006a88:	3108      	adds	r1, #8
 8006a8a:	edd5 3a00 	vldr	s7, [r5]
 8006a8e:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 8006a92:	eee3 7a84 	vfma.f32	s15, s7, s8
 8006a96:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006a9a:	3020      	adds	r0, #32
 8006a9c:	ed95 4a00 	vldr	s8, [r5]
 8006aa0:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 8006aa4:	eee4 7a24 	vfma.f32	s15, s8, s9
 8006aa8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006aac:	edd5 4a00 	vldr	s9, [r5]
 8006ab0:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 8006ab4:	eee4 7a85 	vfma.f32	s15, s9, s10
 8006ab8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006abc:	ed95 5a00 	vldr	s10, [r5]
 8006ac0:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 8006ac4:	eee5 7a25 	vfma.f32	s15, s10, s11
 8006ac8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006acc:	edd5 5a00 	vldr	s11, [r5]
 8006ad0:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 8006ad4:	eee5 7a86 	vfma.f32	s15, s11, s12
 8006ad8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006adc:	428e      	cmp	r6, r1
 8006ade:	ed95 6a00 	vldr	s12, [r5]
 8006ae2:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006ae6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006aea:	d1a9      	bne.n	8006a40 <forward_dense+0x170>
 8006aec:	f1a6 0108 	sub.w	r1, r6, #8
 8006af0:	4650      	mov	r0, sl
 8006af2:	2a00      	cmp	r2, #0
 8006af4:	d04a      	beq.n	8006b8c <forward_dense+0x2bc>
 8006af6:	780d      	ldrb	r5, [r1, #0]
 8006af8:	edd0 6a00 	vldr	s13, [r0]
 8006afc:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006b00:	edd5 7a00 	vldr	s15, [r5]
 8006b04:	2a01      	cmp	r2, #1
 8006b06:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006b0a:	d03f      	beq.n	8006b8c <forward_dense+0x2bc>
 8006b0c:	784d      	ldrb	r5, [r1, #1]
 8006b0e:	edd0 6a01 	vldr	s13, [r0, #4]
 8006b12:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006b16:	edd5 7a00 	vldr	s15, [r5]
 8006b1a:	2a02      	cmp	r2, #2
 8006b1c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006b20:	d034      	beq.n	8006b8c <forward_dense+0x2bc>
 8006b22:	788d      	ldrb	r5, [r1, #2]
 8006b24:	edd0 6a02 	vldr	s13, [r0, #8]
 8006b28:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006b2c:	edd5 7a00 	vldr	s15, [r5]
 8006b30:	2a03      	cmp	r2, #3
 8006b32:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006b36:	d029      	beq.n	8006b8c <forward_dense+0x2bc>
 8006b38:	78cd      	ldrb	r5, [r1, #3]
 8006b3a:	edd0 6a03 	vldr	s13, [r0, #12]
 8006b3e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006b42:	edd5 7a00 	vldr	s15, [r5]
 8006b46:	2a04      	cmp	r2, #4
 8006b48:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006b4c:	d01e      	beq.n	8006b8c <forward_dense+0x2bc>
 8006b4e:	790d      	ldrb	r5, [r1, #4]
 8006b50:	edd0 6a04 	vldr	s13, [r0, #16]
 8006b54:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006b58:	edd5 7a00 	vldr	s15, [r5]
 8006b5c:	2a05      	cmp	r2, #5
 8006b5e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006b62:	d013      	beq.n	8006b8c <forward_dense+0x2bc>
 8006b64:	794d      	ldrb	r5, [r1, #5]
 8006b66:	edd0 6a05 	vldr	s13, [r0, #20]
 8006b6a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006b6e:	edd5 7a00 	vldr	s15, [r5]
 8006b72:	2a06      	cmp	r2, #6
 8006b74:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006b78:	d008      	beq.n	8006b8c <forward_dense+0x2bc>
 8006b7a:	7989      	ldrb	r1, [r1, #6]
 8006b7c:	edd0 7a06 	vldr	s15, [r0, #24]
 8006b80:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8006b84:	edd1 6a00 	vldr	s13, [r1]
 8006b88:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006b8c:	44dc      	add	ip, fp
 8006b8e:	445e      	add	r6, fp
 8006b90:	ee32 7a87 	vadd.f32	s14, s5, s14
 8006b94:	eca7 7a01 	vstmia	r7!, {s14}
 8006b98:	454f      	cmp	r7, r9
 8006b9a:	f4ff af43 	bcc.w	8006a24 <forward_dense+0x154>
 8006b9e:	9a06      	ldr	r2, [sp, #24]
 8006ba0:	eba9 0302 	sub.w	r3, r9, r2
 8006ba4:	3b01      	subs	r3, #1
 8006ba6:	f023 0303 	bic.w	r3, r3, #3
 8006baa:	3304      	adds	r3, #4
 8006bac:	18d3      	adds	r3, r2, r3
 8006bae:	9306      	str	r3, [sp, #24]
 8006bb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006bb2:	9a05      	ldr	r2, [sp, #20]
 8006bb4:	4499      	add	r9, r3
 8006bb6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006bb8:	441a      	add	r2, r3
 8006bba:	9205      	str	r2, [sp, #20]
 8006bbc:	9a02      	ldr	r2, [sp, #8]
 8006bbe:	441a      	add	r2, r3
 8006bc0:	9202      	str	r2, [sp, #8]
 8006bc2:	9a04      	ldr	r2, [sp, #16]
 8006bc4:	441a      	add	r2, r3
 8006bc6:	9204      	str	r2, [sp, #16]
 8006bc8:	9b06      	ldr	r3, [sp, #24]
 8006bca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	f4ff af08 	bcc.w	80069e2 <forward_dense+0x112>
 8006bd2:	b015      	add	sp, #84	; 0x54
 8006bd4:	ecbd 8b02 	vpop	{d8}
 8006bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bdc:	6853      	ldr	r3, [r2, #4]
 8006bde:	deff      	udf	#255	; 0xff
 8006be0:	2300      	movs	r3, #0
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	deff      	udf	#255	; 0xff
 8006be6:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8006bfc <forward_dense+0x32c>
 8006bea:	eef0 2a48 	vmov.f32	s5, s16
 8006bee:	f1be 0f00 	cmp.w	lr, #0
 8006bf2:	f47f af22 	bne.w	8006a3a <forward_dense+0x16a>
 8006bf6:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006bf8:	4661      	mov	r1, ip
 8006bfa:	e77a      	b.n	8006af2 <forward_dense+0x222>
 8006bfc:	00000000 	.word	0x00000000
 8006c00:	4549      	cmp	r1, r9
 8006c02:	d2d5      	bcs.n	8006bb0 <forward_dense+0x2e0>
 8006c04:	9807      	ldr	r0, [sp, #28]
 8006c06:	9103      	str	r1, [sp, #12]
 8006c08:	9904      	ldr	r1, [sp, #16]
 8006c0a:	f100 0c01 	add.w	ip, r0, #1
 8006c0e:	3901      	subs	r1, #1
 8006c10:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8006c14:	9109      	str	r1, [sp, #36]	; 0x24
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	f000 80b2 	beq.w	8006d80 <forward_dense+0x4b0>
 8006c1c:	9907      	ldr	r1, [sp, #28]
 8006c1e:	ecf3 2a01 	vldmia	r3!, {s5}
 8006c22:	ed1f 7a0a 	vldr	s14, [pc, #-40]	; 8006bfc <forward_dense+0x32c>
 8006c26:	2900      	cmp	r1, #0
 8006c28:	f000 80b2 	beq.w	8006d90 <forward_dense+0x4c0>
 8006c2c:	9902      	ldr	r1, [sp, #8]
 8006c2e:	1d10      	adds	r0, r2, #4
 8006c30:	f810 6c04 	ldrb.w	r6, [r0, #-4]
 8006c34:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
 8006c38:	f810 5c03 	ldrb.w	r5, [r0, #-3]
 8006c3c:	ed51 3a08 	vldr	s7, [r1, #-32]	; 0xffffffe0
 8006c40:	ed11 4a06 	vldr	s8, [r1, #-24]	; 0xffffffe8
 8006c44:	ed51 4a05 	vldr	s9, [r1, #-20]	; 0xffffffec
 8006c48:	ed11 5a04 	vldr	s10, [r1, #-16]
 8006c4c:	ed51 5a03 	vldr	s11, [r1, #-12]
 8006c50:	ed11 6a02 	vldr	s12, [r1, #-8]
 8006c54:	ed51 6a01 	vldr	s13, [r1, #-4]
 8006c58:	f006 070f 	and.w	r7, r6, #15
 8006c5c:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8006c60:	edd7 7a00 	vldr	s15, [r7]
 8006c64:	0936      	lsrs	r6, r6, #4
 8006c66:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8006c6a:	ed96 3a00 	vldr	s6, [r6]
 8006c6e:	ee67 7a82 	vmul.f32	s15, s15, s4
 8006c72:	092e      	lsrs	r6, r5, #4
 8006c74:	eee3 7a23 	vfma.f32	s15, s6, s7
 8006c78:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8006c7c:	f005 050f 	and.w	r5, r5, #15
 8006c80:	edd6 3a00 	vldr	s7, [r6]
 8006c84:	f810 6c02 	ldrb.w	r6, [r0, #-2]
 8006c88:	eee3 7a84 	vfma.f32	s15, s7, s8
 8006c8c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006c90:	0937      	lsrs	r7, r6, #4
 8006c92:	ed95 4a00 	vldr	s8, [r5]
 8006c96:	f810 5c01 	ldrb.w	r5, [r0, #-1]
 8006c9a:	eee4 7a24 	vfma.f32	s15, s8, s9
 8006c9e:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8006ca2:	f006 060f 	and.w	r6, r6, #15
 8006ca6:	edd7 4a00 	vldr	s9, [r7]
 8006caa:	eee4 7a85 	vfma.f32	s15, s9, s10
 8006cae:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8006cb2:	3004      	adds	r0, #4
 8006cb4:	ed96 5a00 	vldr	s10, [r6]
 8006cb8:	092e      	lsrs	r6, r5, #4
 8006cba:	eee5 7a25 	vfma.f32	s15, s10, s11
 8006cbe:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8006cc2:	f005 050f 	and.w	r5, r5, #15
 8006cc6:	edd6 5a00 	vldr	s11, [r6]
 8006cca:	eee5 7a86 	vfma.f32	s15, s11, s12
 8006cce:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006cd2:	4584      	cmp	ip, r0
 8006cd4:	ed95 6a00 	vldr	s12, [r5]
 8006cd8:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006cdc:	f101 0120 	add.w	r1, r1, #32
 8006ce0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006ce4:	d1a4      	bne.n	8006c30 <forward_dense+0x360>
 8006ce6:	f8dd e014 	ldr.w	lr, [sp, #20]
 8006cea:	f1ac 0804 	sub.w	r8, ip, #4
 8006cee:	9904      	ldr	r1, [sp, #16]
 8006cf0:	458e      	cmp	lr, r1
 8006cf2:	d22a      	bcs.n	8006d4a <forward_dense+0x47a>
 8006cf4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006cf6:	eba1 070e 	sub.w	r7, r1, lr
 8006cfa:	ea4f 0ad7 	mov.w	sl, r7, lsr #3
 8006cfe:	f10e 0008 	add.w	r0, lr, #8
 8006d02:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 8006d06:	eb08 07d7 	add.w	r7, r8, r7, lsr #3
 8006d0a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006d0e:	ed50 5a01 	vldr	s11, [r0, #-4]
 8006d12:	ed50 6a02 	vldr	s13, [r0, #-8]
 8006d16:	f001 050f 	and.w	r5, r1, #15
 8006d1a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006d1e:	edd5 7a00 	vldr	s15, [r5]
 8006d22:	0909      	lsrs	r1, r1, #4
 8006d24:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8006d28:	ed91 6a00 	vldr	s12, [r1]
 8006d2c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8006d30:	42b7      	cmp	r7, r6
 8006d32:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006d36:	f100 0008 	add.w	r0, r0, #8
 8006d3a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006d3e:	d1e4      	bne.n	8006d0a <forward_dense+0x43a>
 8006d40:	f10a 0a01 	add.w	sl, sl, #1
 8006d44:	44d0      	add	r8, sl
 8006d46:	eb0e 0eca 	add.w	lr, lr, sl, lsl #3
 8006d4a:	9908      	ldr	r1, [sp, #32]
 8006d4c:	b321      	cbz	r1, 8006d98 <forward_dense+0x4c8>
 8006d4e:	f898 1000 	ldrb.w	r1, [r8]
 8006d52:	edde 7a00 	vldr	s15, [lr]
 8006d56:	0909      	lsrs	r1, r1, #4
 8006d58:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8006d5c:	edd1 6a00 	vldr	s13, [r1]
 8006d60:	9903      	ldr	r1, [sp, #12]
 8006d62:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006d66:	445a      	add	r2, fp
 8006d68:	44dc      	add	ip, fp
 8006d6a:	ee72 2a87 	vadd.f32	s5, s5, s14
 8006d6e:	ece1 2a01 	vstmia	r1!, {s5}
 8006d72:	4589      	cmp	r9, r1
 8006d74:	9103      	str	r1, [sp, #12]
 8006d76:	f67f af12 	bls.w	8006b9e <forward_dense+0x2ce>
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	f47f af4e 	bne.w	8006c1c <forward_dense+0x34c>
 8006d80:	9907      	ldr	r1, [sp, #28]
 8006d82:	ed1f 7a62 	vldr	s14, [pc, #-392]	; 8006bfc <forward_dense+0x32c>
 8006d86:	eef0 2a48 	vmov.f32	s5, s16
 8006d8a:	2900      	cmp	r1, #0
 8006d8c:	f47f af4e 	bne.w	8006c2c <forward_dense+0x35c>
 8006d90:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 8006d94:	4690      	mov	r8, r2
 8006d96:	e7aa      	b.n	8006cee <forward_dense+0x41e>
 8006d98:	9903      	ldr	r1, [sp, #12]
 8006d9a:	ee32 7a87 	vadd.f32	s14, s5, s14
 8006d9e:	445a      	add	r2, fp
 8006da0:	eca1 7a01 	vstmia	r1!, {s14}
 8006da4:	4549      	cmp	r1, r9
 8006da6:	9103      	str	r1, [sp, #12]
 8006da8:	44dc      	add	ip, fp
 8006daa:	f4ff af34 	bcc.w	8006c16 <forward_dense+0x346>
 8006dae:	e6f6      	b.n	8006b9e <forward_dense+0x2ce>
 8006db0:	9912      	ldr	r1, [sp, #72]	; 0x48
 8006db2:	9d06      	ldr	r5, [sp, #24]
 8006db4:	9101      	str	r1, [sp, #4]
 8006db6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006db8:	9100      	str	r1, [sp, #0]
 8006dba:	4628      	mov	r0, r5
 8006dbc:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006dbe:	f000 fcb7 	bl	8007730 <forward_lite_dense_if32of32wf32>
 8006dc2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006dc4:	462b      	mov	r3, r5
 8006dc6:	4413      	add	r3, r2
 8006dc8:	9306      	str	r3, [sp, #24]
 8006dca:	e6f1      	b.n	8006bb0 <forward_dense+0x2e0>
 8006dcc:	f8d1 800c 	ldr.w	r8, [r1, #12]
 8006dd0:	f1b9 0f00 	cmp.w	r9, #0
 8006dd4:	d016      	beq.n	8006e04 <forward_dense+0x534>
 8006dd6:	e9d9 0100 	ldrd	r0, r1, [r9]
 8006dda:	f000 ff27 	bl	8007c2c <ai_array_get_byte_size>
 8006dde:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 8006de2:	4602      	mov	r2, r0
 8006de4:	4659      	mov	r1, fp
 8006de6:	4640      	mov	r0, r8
 8006de8:	f000 fdc6 	bl	8007978 <st_int8_copy>
 8006dec:	e5c7      	b.n	800697e <forward_dense+0xae>
 8006dee:	2b04      	cmp	r3, #4
 8006df0:	d00a      	beq.n	8006e08 <forward_dense+0x538>
 8006df2:	f04f 0900 	mov.w	r9, #0
 8006df6:	e5bd      	b.n	8006974 <forward_dense+0xa4>
 8006df8:	930d      	str	r3, [sp, #52]	; 0x34
 8006dfa:	e595      	b.n	8006928 <forward_dense+0x58>
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e00:	460b      	mov	r3, r1
 8006e02:	e591      	b.n	8006928 <forward_dense+0x58>
 8006e04:	46c3      	mov	fp, r8
 8006e06:	e5ba      	b.n	800697e <forward_dense+0xae>
 8006e08:	f8d1 b00c 	ldr.w	fp, [r1, #12]
 8006e0c:	e5b7      	b.n	800697e <forward_dense+0xae>
 8006e0e:	2300      	movs	r3, #0
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	deff      	udf	#255	; 0xff
 8006e14:	2300      	movs	r3, #0
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	deff      	udf	#255	; 0xff
 8006e1a:	bf00      	nop

08006e1c <forward_concat>:
 8006e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e20:	ed2d 8b06 	vpush	{d8-d10}
 8006e24:	6982      	ldr	r2, [r0, #24]
 8006e26:	b085      	sub	sp, #20
 8006e28:	8813      	ldrh	r3, [r2, #0]
 8006e2a:	9002      	str	r0, [sp, #8]
 8006e2c:	b90b      	cbnz	r3, 8006e32 <forward_concat+0x16>
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	deff      	udf	#255	; 0xff
 8006e32:	2b01      	cmp	r3, #1
 8006e34:	6856      	ldr	r6, [r2, #4]
 8006e36:	f000 8293 	beq.w	8007360 <forward_concat+0x544>
 8006e3a:	6933      	ldr	r3, [r6, #16]
 8006e3c:	9301      	str	r3, [sp, #4]
 8006e3e:	b10b      	cbz	r3, 8006e44 <forward_concat+0x28>
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	9301      	str	r3, [sp, #4]
 8006e44:	8834      	ldrh	r4, [r6, #0]
 8006e46:	2300      	movs	r3, #0
 8006e48:	4621      	mov	r1, r4
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	e00c      	b.n	8006e68 <forward_concat+0x4c>
 8006e4e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006e52:	b172      	cbz	r2, 8006e72 <forward_concat+0x56>
 8006e54:	6992      	ldr	r2, [r2, #24]
 8006e56:	6812      	ldr	r2, [r2, #0]
 8006e58:	f3c2 4243 	ubfx	r2, r2, #17, #4
 8006e5c:	2a01      	cmp	r2, #1
 8006e5e:	bf0c      	ite	eq
 8006e60:	2201      	moveq	r2, #1
 8006e62:	2202      	movne	r2, #2
 8006e64:	3301      	adds	r3, #1
 8006e66:	4310      	orrs	r0, r2
 8006e68:	429c      	cmp	r4, r3
 8006e6a:	d002      	beq.n	8006e72 <forward_concat+0x56>
 8006e6c:	6872      	ldr	r2, [r6, #4]
 8006e6e:	2a00      	cmp	r2, #0
 8006e70:	d1ed      	bne.n	8006e4e <forward_concat+0x32>
 8006e72:	9b01      	ldr	r3, [sp, #4]
 8006e74:	699a      	ldr	r2, [r3, #24]
 8006e76:	6813      	ldr	r3, [r2, #0]
 8006e78:	f8d2 b008 	ldr.w	fp, [r2, #8]
 8006e7c:	f3c3 4243 	ubfx	r2, r3, #17, #4
 8006e80:	2a01      	cmp	r2, #1
 8006e82:	d006      	beq.n	8006e92 <forward_concat+0x76>
 8006e84:	2801      	cmp	r0, #1
 8006e86:	d146      	bne.n	8006f16 <forward_concat+0xfa>
 8006e88:	b005      	add	sp, #20
 8006e8a:	ecbd 8b06 	vpop	{d8-d10}
 8006e8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e92:	2801      	cmp	r0, #1
 8006e94:	d134      	bne.n	8006f00 <forward_concat+0xe4>
 8006e96:	f04f 0800 	mov.w	r8, #0
 8006e9a:	4541      	cmp	r1, r8
 8006e9c:	d9f4      	bls.n	8006e88 <forward_concat+0x6c>
 8006e9e:	6873      	ldr	r3, [r6, #4]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d0f1      	beq.n	8006e88 <forward_concat+0x6c>
 8006ea4:	f853 5028 	ldr.w	r5, [r3, r8, lsl #2]
 8006ea8:	2d00      	cmp	r5, #0
 8006eaa:	d0ed      	beq.n	8006e88 <forward_concat+0x6c>
 8006eac:	69ab      	ldr	r3, [r5, #24]
 8006eae:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006eb2:	f000 febb 	bl	8007c2c <ai_array_get_byte_size>
 8006eb6:	69ab      	ldr	r3, [r5, #24]
 8006eb8:	6969      	ldr	r1, [r5, #20]
 8006eba:	689c      	ldr	r4, [r3, #8]
 8006ebc:	9b02      	ldr	r3, [sp, #8]
 8006ebe:	68ea      	ldr	r2, [r5, #12]
 8006ec0:	69db      	ldr	r3, [r3, #28]
 8006ec2:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
 8006ec6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006eca:	fb02 f905 	mul.w	r9, r2, r5
 8006ece:	9a01      	ldr	r2, [sp, #4]
 8006ed0:	68d1      	ldr	r1, [r2, #12]
 8006ed2:	1827      	adds	r7, r4, r0
 8006ed4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006ed8:	42bc      	cmp	r4, r7
 8006eda:	fb03 f505 	mul.w	r5, r3, r5
 8006ede:	bf38      	it	cc
 8006ee0:	46da      	movcc	sl, fp
 8006ee2:	d208      	bcs.n	8006ef6 <forward_concat+0xda>
 8006ee4:	4651      	mov	r1, sl
 8006ee6:	4620      	mov	r0, r4
 8006ee8:	464a      	mov	r2, r9
 8006eea:	444c      	add	r4, r9
 8006eec:	f000 fd44 	bl	8007978 <st_int8_copy>
 8006ef0:	42a7      	cmp	r7, r4
 8006ef2:	44aa      	add	sl, r5
 8006ef4:	d8f6      	bhi.n	8006ee4 <forward_concat+0xc8>
 8006ef6:	8831      	ldrh	r1, [r6, #0]
 8006ef8:	44cb      	add	fp, r9
 8006efa:	f108 0801 	add.w	r8, r8, #1
 8006efe:	e7cc      	b.n	8006e9a <forward_concat+0x7e>
 8006f00:	0782      	lsls	r2, r0, #30
 8006f02:	d4c1      	bmi.n	8006e88 <forward_concat+0x6c>
 8006f04:	9a01      	ldr	r2, [sp, #4]
 8006f06:	f8d2 8000 	ldr.w	r8, [r2]
 8006f0a:	f1b8 0f00 	cmp.w	r8, #0
 8006f0e:	d109      	bne.n	8006f24 <forward_concat+0x108>
 8006f10:	ed9f 8aba 	vldr	s16, [pc, #744]	; 80071fc <forward_concat+0x3e0>
 8006f14:	e011      	b.n	8006f3a <forward_concat+0x11e>
 8006f16:	9a01      	ldr	r2, [sp, #4]
 8006f18:	f8d2 8000 	ldr.w	r8, [r2]
 8006f1c:	f1b8 0f00 	cmp.w	r8, #0
 8006f20:	f000 8216 	beq.w	8007350 <forward_concat+0x534>
 8006f24:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8006f28:	2a00      	cmp	r2, #0
 8006f2a:	d0f1      	beq.n	8006f10 <forward_concat+0xf4>
 8006f2c:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 8006f30:	2900      	cmp	r1, #0
 8006f32:	d0ed      	beq.n	8006f10 <forward_concat+0xf4>
 8006f34:	6812      	ldr	r2, [r2, #0]
 8006f36:	ed92 8a00 	vldr	s16, [r2]
 8006f3a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006f3e:	ee87 9a88 	vdiv.f32	s18, s15, s16
 8006f42:	f3c3 53c0 	ubfx	r3, r3, #23, #1
 8006f46:	9303      	str	r3, [sp, #12]
 8006f48:	4621      	mov	r1, r4
 8006f4a:	4633      	mov	r3, r6
 8006f4c:	2700      	movs	r7, #0
 8006f4e:	4646      	mov	r6, r8
 8006f50:	4698      	mov	r8, r3
 8006f52:	ed9f aaa8 	vldr	s20, [pc, #672]	; 80071f4 <forward_concat+0x3d8>
 8006f56:	eddf 8aa9 	vldr	s17, [pc, #676]	; 80071fc <forward_concat+0x3e0>
 8006f5a:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
 8006f5e:	42b9      	cmp	r1, r7
 8006f60:	d992      	bls.n	8006e88 <forward_concat+0x6c>
 8006f62:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d08e      	beq.n	8006e88 <forward_concat+0x6c>
 8006f6a:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d08a      	beq.n	8006e88 <forward_concat+0x6c>
 8006f72:	9a02      	ldr	r2, [sp, #8]
 8006f74:	68d9      	ldr	r1, [r3, #12]
 8006f76:	69d4      	ldr	r4, [r2, #28]
 8006f78:	9a01      	ldr	r2, [sp, #4]
 8006f7a:	f851 5024 	ldr.w	r5, [r1, r4, lsl #2]
 8006f7e:	68d2      	ldr	r2, [r2, #12]
 8006f80:	6958      	ldr	r0, [r3, #20]
 8006f82:	f852 1024 	ldr.w	r1, [r2, r4, lsl #2]
 8006f86:	699a      	ldr	r2, [r3, #24]
 8006f88:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8006f8c:	f8d2 9000 	ldr.w	r9, [r2]
 8006f90:	9300      	str	r3, [sp, #0]
 8006f92:	fb01 fa00 	mul.w	sl, r1, r0
 8006f96:	fb00 f505 	mul.w	r5, r0, r5
 8006f9a:	e9d2 1401 	ldrd	r1, r4, [r2, #4]
 8006f9e:	4648      	mov	r0, r9
 8006fa0:	f000 fe44 	bl	8007c2c <ai_array_get_byte_size>
 8006fa4:	f3c9 4243 	ubfx	r2, r9, #17, #4
 8006fa8:	2a01      	cmp	r2, #1
 8006faa:	9b00      	ldr	r3, [sp, #0]
 8006fac:	eb04 0900 	add.w	r9, r4, r0
 8006fb0:	d079      	beq.n	80070a6 <forward_concat+0x28a>
 8006fb2:	6818      	ldr	r0, [r3, #0]
 8006fb4:	2800      	cmp	r0, #0
 8006fb6:	f000 8118 	beq.w	80071ea <forward_concat+0x3ce>
 8006fba:	6841      	ldr	r1, [r0, #4]
 8006fbc:	2900      	cmp	r1, #0
 8006fbe:	f000 8166 	beq.w	800728e <forward_concat+0x472>
 8006fc2:	8842      	ldrh	r2, [r0, #2]
 8006fc4:	2a00      	cmp	r2, #0
 8006fc6:	f000 815f 	beq.w	8007288 <forward_concat+0x46c>
 8006fca:	680b      	ldr	r3, [r1, #0]
 8006fcc:	edd3 6a00 	vldr	s13, [r3]
 8006fd0:	684b      	ldr	r3, [r1, #4]
 8006fd2:	f993 2000 	ldrsb.w	r2, [r3]
 8006fd6:	2e00      	cmp	r6, #0
 8006fd8:	f000 8105 	beq.w	80071e6 <forward_concat+0x3ca>
 8006fdc:	6871      	ldr	r1, [r6, #4]
 8006fde:	2900      	cmp	r1, #0
 8006fe0:	f000 8159 	beq.w	8007296 <forward_concat+0x47a>
 8006fe4:	8873      	ldrh	r3, [r6, #2]
 8006fe6:	b113      	cbz	r3, 8006fee <forward_concat+0x1d2>
 8006fe8:	684b      	ldr	r3, [r1, #4]
 8006fea:	f993 3000 	ldrsb.w	r3, [r3]
 8006fee:	eeb4 8a66 	vcmp.f32	s16, s13
 8006ff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ff6:	d102      	bne.n	8006ffe <forward_concat+0x1e2>
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	f000 818b 	beq.w	8007314 <forward_concat+0x4f8>
 8006ffe:	9b03      	ldr	r3, [sp, #12]
 8007000:	2b00      	cmp	r3, #0
 8007002:	f040 809a 	bne.w	800713a <forward_concat+0x31e>
 8007006:	2800      	cmp	r0, #0
 8007008:	f000 8150 	beq.w	80072ac <forward_concat+0x490>
 800700c:	6843      	ldr	r3, [r0, #4]
 800700e:	2b00      	cmp	r3, #0
 8007010:	f000 8143 	beq.w	800729a <forward_concat+0x47e>
 8007014:	8842      	ldrh	r2, [r0, #2]
 8007016:	2a00      	cmp	r2, #0
 8007018:	f000 813f 	beq.w	800729a <forward_concat+0x47e>
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	7819      	ldrb	r1, [r3, #0]
 8007020:	2e00      	cmp	r6, #0
 8007022:	f000 813e 	beq.w	80072a2 <forward_concat+0x486>
 8007026:	6872      	ldr	r2, [r6, #4]
 8007028:	2a00      	cmp	r2, #0
 800702a:	f000 816d 	beq.w	8007308 <forward_concat+0x4ec>
 800702e:	8873      	ldrh	r3, [r6, #2]
 8007030:	b10b      	cbz	r3, 8007036 <forward_concat+0x21a>
 8007032:	6853      	ldr	r3, [r2, #4]
 8007034:	781b      	ldrb	r3, [r3, #0]
 8007036:	eeb4 8a66 	vcmp.f32	s16, s13
 800703a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800703e:	d102      	bne.n	8007046 <forward_concat+0x22a>
 8007040:	4299      	cmp	r1, r3
 8007042:	f000 814c 	beq.w	80072de <forward_concat+0x4c2>
 8007046:	454c      	cmp	r4, r9
 8007048:	ee66 6a89 	vmul.f32	s13, s13, s18
 800704c:	f080 80c7 	bcs.w	80071de <forward_concat+0x3c2>
 8007050:	2d00      	cmp	r5, #0
 8007052:	f340 80c4 	ble.w	80071de <forward_concat+0x3c2>
 8007056:	ee07 3a90 	vmov	s15, r3
 800705a:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800705e:	1960      	adds	r0, r4, r5
 8007060:	ee36 6a29 	vadd.f32	s12, s12, s19
 8007064:	4602      	mov	r2, r0
 8007066:	46dc      	mov	ip, fp
 8007068:	46e6      	mov	lr, ip
 800706a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800706e:	1a5b      	subs	r3, r3, r1
 8007070:	ee07 3a90 	vmov	s15, r3
 8007074:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007078:	eeb0 7a46 	vmov.f32	s14, s12
 800707c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8007080:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8007084:	ee17 3a90 	vmov	r3, s15
 8007088:	f383 0308 	usat	r3, #8, r3
 800708c:	4294      	cmp	r4, r2
 800708e:	f80e 3b01 	strb.w	r3, [lr], #1
 8007092:	d1ea      	bne.n	800706a <forward_concat+0x24e>
 8007094:	4548      	cmp	r0, r9
 8007096:	eb04 0205 	add.w	r2, r4, r5
 800709a:	44d4      	add	ip, sl
 800709c:	4604      	mov	r4, r0
 800709e:	f080 809e 	bcs.w	80071de <forward_concat+0x3c2>
 80070a2:	4428      	add	r0, r5
 80070a4:	e7e0      	b.n	8007068 <forward_concat+0x24c>
 80070a6:	2d00      	cmp	r5, #0
 80070a8:	9b03      	ldr	r3, [sp, #12]
 80070aa:	4629      	mov	r1, r5
 80070ac:	bfb8      	it	lt
 80070ae:	1ce9      	addlt	r1, r5, #3
 80070b0:	1089      	asrs	r1, r1, #2
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	f040 80a4 	bne.w	8007200 <forward_concat+0x3e4>
 80070b8:	2e00      	cmp	r6, #0
 80070ba:	f000 80f4 	beq.w	80072a6 <forward_concat+0x48a>
 80070be:	6873      	ldr	r3, [r6, #4]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	f000 80f0 	beq.w	80072a6 <forward_concat+0x48a>
 80070c6:	8872      	ldrh	r2, [r6, #2]
 80070c8:	2a00      	cmp	r2, #0
 80070ca:	f000 80ec 	beq.w	80072a6 <forward_concat+0x48a>
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	781b      	ldrb	r3, [r3, #0]
 80070d2:	ee06 3a90 	vmov	s13, r3
 80070d6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80070da:	ee76 6aa9 	vadd.f32	s13, s13, s19
 80070de:	454c      	cmp	r4, r9
 80070e0:	d226      	bcs.n	8007130 <forward_concat+0x314>
 80070e2:	2d03      	cmp	r5, #3
 80070e4:	ebaa 0a01 	sub.w	sl, sl, r1
 80070e8:	bfc8      	it	gt
 80070ea:	46de      	movgt	lr, fp
 80070ec:	dd20      	ble.n	8007130 <forward_concat+0x314>
 80070ee:	46f4      	mov	ip, lr
 80070f0:	4620      	mov	r0, r4
 80070f2:	2200      	movs	r2, #0
 80070f4:	f810 3b01 	ldrb.w	r3, [r0], #1
 80070f8:	ee07 3a10 	vmov	s14, r3
 80070fc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007100:	eef0 7a66 	vmov.f32	s15, s13
 8007104:	eee7 7a09 	vfma.f32	s15, s14, s18
 8007108:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800710c:	ee17 3a90 	vmov	r3, s15
 8007110:	f383 0308 	usat	r3, #8, r3
 8007114:	3201      	adds	r2, #1
 8007116:	4291      	cmp	r1, r2
 8007118:	f80c 3b01 	strb.w	r3, [ip], #1
 800711c:	dcea      	bgt.n	80070f4 <forward_concat+0x2d8>
 800711e:	2d03      	cmp	r5, #3
 8007120:	bfcc      	ite	gt
 8007122:	460b      	movgt	r3, r1
 8007124:	2301      	movle	r3, #1
 8007126:	441c      	add	r4, r3
 8007128:	45a1      	cmp	r9, r4
 800712a:	4453      	add	r3, sl
 800712c:	449e      	add	lr, r3
 800712e:	d8de      	bhi.n	80070ee <forward_concat+0x2d2>
 8007130:	448b      	add	fp, r1
 8007132:	f8b8 1000 	ldrh.w	r1, [r8]
 8007136:	3701      	adds	r7, #1
 8007138:	e711      	b.n	8006f5e <forward_concat+0x142>
 800713a:	b140      	cbz	r0, 800714e <forward_concat+0x332>
 800713c:	6843      	ldr	r3, [r0, #4]
 800713e:	2b00      	cmp	r3, #0
 8007140:	f000 80e4 	beq.w	800730c <forward_concat+0x4f0>
 8007144:	8840      	ldrh	r0, [r0, #2]
 8007146:	b110      	cbz	r0, 800714e <forward_concat+0x332>
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	f993 0000 	ldrsb.w	r0, [r3]
 800714e:	2e00      	cmp	r6, #0
 8007150:	f000 80ae 	beq.w	80072b0 <forward_concat+0x494>
 8007154:	6872      	ldr	r2, [r6, #4]
 8007156:	2a00      	cmp	r2, #0
 8007158:	f000 80da 	beq.w	8007310 <forward_concat+0x4f4>
 800715c:	8873      	ldrh	r3, [r6, #2]
 800715e:	b113      	cbz	r3, 8007166 <forward_concat+0x34a>
 8007160:	6853      	ldr	r3, [r2, #4]
 8007162:	f993 3000 	ldrsb.w	r3, [r3]
 8007166:	eeb4 8a66 	vcmp.f32	s16, s13
 800716a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800716e:	d102      	bne.n	8007176 <forward_concat+0x35a>
 8007170:	4298      	cmp	r0, r3
 8007172:	f000 809f 	beq.w	80072b4 <forward_concat+0x498>
 8007176:	454c      	cmp	r4, r9
 8007178:	ee66 6a89 	vmul.f32	s13, s13, s18
 800717c:	d22f      	bcs.n	80071de <forward_concat+0x3c2>
 800717e:	2d00      	cmp	r5, #0
 8007180:	dd2d      	ble.n	80071de <forward_concat+0x3c2>
 8007182:	ee07 3a90 	vmov	s15, r3
 8007186:	eb0b 0e05 	add.w	lr, fp, r5
 800718a:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800718e:	46f4      	mov	ip, lr
 8007190:	465a      	mov	r2, fp
 8007192:	4621      	mov	r1, r4
 8007194:	f911 3b01 	ldrsb.w	r3, [r1], #1
 8007198:	1a1b      	subs	r3, r3, r0
 800719a:	ee07 3a90 	vmov	s15, r3
 800719e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80071a2:	eef0 7a46 	vmov.f32	s15, s12
 80071a6:	eee7 7a26 	vfma.f32	s15, s14, s13
 80071aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80071ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071b2:	bf4c      	ite	mi
 80071b4:	ee77 7aca 	vsubmi.f32	s15, s15, s20
 80071b8:	ee77 7aa9 	vaddpl.f32	s15, s15, s19
 80071bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80071c0:	ee17 3a90 	vmov	r3, s15
 80071c4:	f303 0307 	ssat	r3, #8, r3
 80071c8:	f802 3b01 	strb.w	r3, [r2], #1
 80071cc:	4562      	cmp	r2, ip
 80071ce:	d1e1      	bne.n	8007194 <forward_concat+0x378>
 80071d0:	442c      	add	r4, r5
 80071d2:	454c      	cmp	r4, r9
 80071d4:	44d3      	add	fp, sl
 80071d6:	44d4      	add	ip, sl
 80071d8:	d3da      	bcc.n	8007190 <forward_concat+0x374>
 80071da:	46f3      	mov	fp, lr
 80071dc:	e7a9      	b.n	8007132 <forward_concat+0x316>
 80071de:	eb0b 0e05 	add.w	lr, fp, r5
 80071e2:	46f3      	mov	fp, lr
 80071e4:	e7a5      	b.n	8007132 <forward_concat+0x316>
 80071e6:	4633      	mov	r3, r6
 80071e8:	e701      	b.n	8006fee <forward_concat+0x1d2>
 80071ea:	eef0 6a68 	vmov.f32	s13, s17
 80071ee:	4602      	mov	r2, r0
 80071f0:	e6f1      	b.n	8006fd6 <forward_concat+0x1ba>
 80071f2:	bf00      	nop
 80071f4:	3efffffc 	.word	0x3efffffc
 80071f8:	7f800000 	.word	0x7f800000
 80071fc:	00000000 	.word	0x00000000
 8007200:	2e00      	cmp	r6, #0
 8007202:	f000 809c 	beq.w	800733e <forward_concat+0x522>
 8007206:	6873      	ldr	r3, [r6, #4]
 8007208:	2b00      	cmp	r3, #0
 800720a:	f000 809e 	beq.w	800734a <forward_concat+0x52e>
 800720e:	8872      	ldrh	r2, [r6, #2]
 8007210:	2a00      	cmp	r2, #0
 8007212:	f000 8097 	beq.w	8007344 <forward_concat+0x528>
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	f993 3000 	ldrsb.w	r3, [r3]
 800721c:	ee06 3a90 	vmov	s13, r3
 8007220:	454c      	cmp	r4, r9
 8007222:	d285      	bcs.n	8007130 <forward_concat+0x314>
 8007224:	2d03      	cmp	r5, #3
 8007226:	ebaa 0a01 	sub.w	sl, sl, r1
 800722a:	dd81      	ble.n	8007130 <forward_concat+0x314>
 800722c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8007230:	46de      	mov	lr, fp
 8007232:	46f4      	mov	ip, lr
 8007234:	4620      	mov	r0, r4
 8007236:	2200      	movs	r2, #0
 8007238:	f810 3b01 	ldrb.w	r3, [r0], #1
 800723c:	ee07 3a10 	vmov	s14, r3
 8007240:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007244:	eef0 7a66 	vmov.f32	s15, s13
 8007248:	eee7 7a09 	vfma.f32	s15, s14, s18
 800724c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007254:	bf4c      	ite	mi
 8007256:	ee77 7aca 	vsubmi.f32	s15, s15, s20
 800725a:	ee77 7aa9 	vaddpl.f32	s15, s15, s19
 800725e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007262:	ee17 3a90 	vmov	r3, s15
 8007266:	f303 0307 	ssat	r3, #8, r3
 800726a:	3201      	adds	r2, #1
 800726c:	4291      	cmp	r1, r2
 800726e:	f80c 3b01 	strb.w	r3, [ip], #1
 8007272:	dce1      	bgt.n	8007238 <forward_concat+0x41c>
 8007274:	2d03      	cmp	r5, #3
 8007276:	bfcc      	ite	gt
 8007278:	460b      	movgt	r3, r1
 800727a:	2301      	movle	r3, #1
 800727c:	441c      	add	r4, r3
 800727e:	45a1      	cmp	r9, r4
 8007280:	4453      	add	r3, sl
 8007282:	449e      	add	lr, r3
 8007284:	d8d5      	bhi.n	8007232 <forward_concat+0x416>
 8007286:	e753      	b.n	8007130 <forward_concat+0x314>
 8007288:	eef0 6a68 	vmov.f32	s13, s17
 800728c:	e6a3      	b.n	8006fd6 <forward_concat+0x1ba>
 800728e:	eef0 6a68 	vmov.f32	s13, s17
 8007292:	460a      	mov	r2, r1
 8007294:	e69f      	b.n	8006fd6 <forward_concat+0x1ba>
 8007296:	460b      	mov	r3, r1
 8007298:	e6a9      	b.n	8006fee <forward_concat+0x1d2>
 800729a:	9903      	ldr	r1, [sp, #12]
 800729c:	2e00      	cmp	r6, #0
 800729e:	f47f aec2 	bne.w	8007026 <forward_concat+0x20a>
 80072a2:	4633      	mov	r3, r6
 80072a4:	e6c7      	b.n	8007036 <forward_concat+0x21a>
 80072a6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80072aa:	e718      	b.n	80070de <forward_concat+0x2c2>
 80072ac:	4619      	mov	r1, r3
 80072ae:	e6b7      	b.n	8007020 <forward_concat+0x204>
 80072b0:	4633      	mov	r3, r6
 80072b2:	e758      	b.n	8007166 <forward_concat+0x34a>
 80072b4:	454c      	cmp	r4, r9
 80072b6:	d292      	bcs.n	80071de <forward_concat+0x3c2>
 80072b8:	9600      	str	r6, [sp, #0]
 80072ba:	462e      	mov	r6, r5
 80072bc:	464d      	mov	r5, r9
 80072be:	46d9      	mov	r9, fp
 80072c0:	4649      	mov	r1, r9
 80072c2:	4620      	mov	r0, r4
 80072c4:	4632      	mov	r2, r6
 80072c6:	4434      	add	r4, r6
 80072c8:	f000 fb56 	bl	8007978 <st_int8_copy>
 80072cc:	42a5      	cmp	r5, r4
 80072ce:	44d1      	add	r9, sl
 80072d0:	d8f6      	bhi.n	80072c0 <forward_concat+0x4a4>
 80072d2:	4635      	mov	r5, r6
 80072d4:	9e00      	ldr	r6, [sp, #0]
 80072d6:	eb0b 0e05 	add.w	lr, fp, r5
 80072da:	46f3      	mov	fp, lr
 80072dc:	e729      	b.n	8007132 <forward_concat+0x316>
 80072de:	454c      	cmp	r4, r9
 80072e0:	f4bf af7d 	bcs.w	80071de <forward_concat+0x3c2>
 80072e4:	9600      	str	r6, [sp, #0]
 80072e6:	462e      	mov	r6, r5
 80072e8:	464d      	mov	r5, r9
 80072ea:	46d9      	mov	r9, fp
 80072ec:	4649      	mov	r1, r9
 80072ee:	4620      	mov	r0, r4
 80072f0:	4632      	mov	r2, r6
 80072f2:	4434      	add	r4, r6
 80072f4:	f000 fb40 	bl	8007978 <st_int8_copy>
 80072f8:	42a5      	cmp	r5, r4
 80072fa:	44d1      	add	r9, sl
 80072fc:	d8f6      	bhi.n	80072ec <forward_concat+0x4d0>
 80072fe:	4635      	mov	r5, r6
 8007300:	eb0b 0e05 	add.w	lr, fp, r5
 8007304:	9e00      	ldr	r6, [sp, #0]
 8007306:	e7e8      	b.n	80072da <forward_concat+0x4be>
 8007308:	4613      	mov	r3, r2
 800730a:	e694      	b.n	8007036 <forward_concat+0x21a>
 800730c:	4618      	mov	r0, r3
 800730e:	e71e      	b.n	800714e <forward_concat+0x332>
 8007310:	4613      	mov	r3, r2
 8007312:	e728      	b.n	8007166 <forward_concat+0x34a>
 8007314:	454c      	cmp	r4, r9
 8007316:	f4bf af62 	bcs.w	80071de <forward_concat+0x3c2>
 800731a:	9600      	str	r6, [sp, #0]
 800731c:	462e      	mov	r6, r5
 800731e:	464d      	mov	r5, r9
 8007320:	46d9      	mov	r9, fp
 8007322:	4649      	mov	r1, r9
 8007324:	4620      	mov	r0, r4
 8007326:	4632      	mov	r2, r6
 8007328:	4434      	add	r4, r6
 800732a:	f000 fb25 	bl	8007978 <st_int8_copy>
 800732e:	42a5      	cmp	r5, r4
 8007330:	44d1      	add	r9, sl
 8007332:	d8f6      	bhi.n	8007322 <forward_concat+0x506>
 8007334:	4635      	mov	r5, r6
 8007336:	eb0b 0e05 	add.w	lr, fp, r5
 800733a:	9e00      	ldr	r6, [sp, #0]
 800733c:	e7cd      	b.n	80072da <forward_concat+0x4be>
 800733e:	ee06 6a90 	vmov	s13, r6
 8007342:	e76d      	b.n	8007220 <forward_concat+0x404>
 8007344:	ee06 2a90 	vmov	s13, r2
 8007348:	e76a      	b.n	8007220 <forward_concat+0x404>
 800734a:	ee06 3a90 	vmov	s13, r3
 800734e:	e767      	b.n	8007220 <forward_concat+0x404>
 8007350:	f3c3 53c0 	ubfx	r3, r3, #23, #1
 8007354:	ed1f 9a58 	vldr	s18, [pc, #-352]	; 80071f8 <forward_concat+0x3dc>
 8007358:	ed1f 8a58 	vldr	s16, [pc, #-352]	; 80071fc <forward_concat+0x3e0>
 800735c:	9303      	str	r3, [sp, #12]
 800735e:	e5f4      	b.n	8006f4a <forward_concat+0x12e>
 8007360:	2300      	movs	r3, #0
 8007362:	e564      	b.n	8006e2e <forward_concat+0x12>

08007364 <forward_eltwise>:
 8007364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007368:	6982      	ldr	r2, [r0, #24]
 800736a:	b09d      	sub	sp, #116	; 0x74
 800736c:	8811      	ldrh	r1, [r2, #0]
 800736e:	9003      	str	r0, [sp, #12]
 8007370:	2900      	cmp	r1, #0
 8007372:	f000 80c7 	beq.w	8007504 <forward_eltwise+0x1a0>
 8007376:	6853      	ldr	r3, [r2, #4]
 8007378:	2b00      	cmp	r3, #0
 800737a:	f000 810f 	beq.w	800759c <forward_eltwise+0x238>
 800737e:	881d      	ldrh	r5, [r3, #0]
 8007380:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8007384:	f1b8 0f00 	cmp.w	r8, #0
 8007388:	d001      	beq.n	800738e <forward_eltwise+0x2a>
 800738a:	f8d8 8000 	ldr.w	r8, [r8]
 800738e:	2901      	cmp	r1, #1
 8007390:	f000 8108 	beq.w	80075a4 <forward_eltwise+0x240>
 8007394:	691b      	ldr	r3, [r3, #16]
 8007396:	9300      	str	r3, [sp, #0]
 8007398:	b10b      	cbz	r3, 800739e <forward_eltwise+0x3a>
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	9300      	str	r3, [sp, #0]
 800739e:	2300      	movs	r3, #0
 80073a0:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 80073a4:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
 80073a8:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
 80073ac:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
 80073b0:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
 80073b4:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
 80073b8:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
 80073bc:	931b      	str	r3, [sp, #108]	; 0x6c
 80073be:	f240 5302 	movw	r3, #1282	; 0x502
 80073c2:	9307      	str	r3, [sp, #28]
 80073c4:	9309      	str	r3, [sp, #36]	; 0x24
 80073c6:	f240 5301 	movw	r3, #1281	; 0x501
 80073ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80073cc:	9b03      	ldr	r3, [sp, #12]
 80073ce:	e9d3 7307 	ldrd	r7, r3, [r3, #28]
 80073d2:	ac0d      	add	r4, sp, #52	; 0x34
 80073d4:	a812      	add	r0, sp, #72	; 0x48
 80073d6:	a917      	add	r1, sp, #92	; 0x5c
 80073d8:	2d01      	cmp	r5, #1
 80073da:	9408      	str	r4, [sp, #32]
 80073dc:	900a      	str	r0, [sp, #40]	; 0x28
 80073de:	910c      	str	r1, [sp, #48]	; 0x30
 80073e0:	9304      	str	r3, [sp, #16]
 80073e2:	f240 80d8 	bls.w	8007596 <forward_eltwise+0x232>
 80073e6:	00ab      	lsls	r3, r5, #2
 80073e8:	9305      	str	r3, [sp, #20]
 80073ea:	2304      	movs	r3, #4
 80073ec:	9301      	str	r3, [sp, #4]
 80073ee:	8813      	ldrh	r3, [r2, #0]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	f000 80da 	beq.w	80075aa <forward_eltwise+0x246>
 80073f6:	6853      	ldr	r3, [r2, #4]
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	f000 80d0 	beq.w	80075a0 <forward_eltwise+0x23c>
 8007400:	9a01      	ldr	r2, [sp, #4]
 8007402:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8007406:	f853 a002 	ldr.w	sl, [r3, r2]
 800740a:	f8da 3008 	ldr.w	r3, [sl, #8]
 800740e:	4043      	eors	r3, r0
 8007410:	f033 03ff 	bics.w	r3, r3, #255	; 0xff
 8007414:	f108 0108 	add.w	r1, r8, #8
 8007418:	f10a 0908 	add.w	r9, sl, #8
 800741c:	d10f      	bne.n	800743e <forward_eltwise+0xda>
 800741e:	f3c0 2017 	ubfx	r0, r0, #8, #24
 8007422:	2800      	cmp	r0, #0
 8007424:	f000 8095 	beq.w	8007552 <forward_eltwise+0x1ee>
 8007428:	3801      	subs	r0, #1
 800742a:	f8d8 200c 	ldr.w	r2, [r8, #12]
 800742e:	f8da 300c 	ldr.w	r3, [sl, #12]
 8007432:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8007436:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800743a:	429a      	cmp	r2, r3
 800743c:	d0f1      	beq.n	8007422 <forward_eltwise+0xbe>
 800743e:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8007442:	9102      	str	r1, [sp, #8]
 8007444:	689d      	ldr	r5, [r3, #8]
 8007446:	f8da 3018 	ldr.w	r3, [sl, #24]
 800744a:	689c      	ldr	r4, [r3, #8]
 800744c:	9b00      	ldr	r3, [sp, #0]
 800744e:	699b      	ldr	r3, [r3, #24]
 8007450:	464a      	mov	r2, r9
 8007452:	a80b      	add	r0, sp, #44	; 0x2c
 8007454:	689e      	ldr	r6, [r3, #8]
 8007456:	f000 fc41 	bl	8007cdc <core_get_broadcasted_shape>
 800745a:	f8da 2014 	ldr.w	r2, [sl, #20]
 800745e:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8007462:	f8d2 a004 	ldr.w	sl, [r2, #4]
 8007466:	9a00      	ldr	r2, [sp, #0]
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	6952      	ldr	r2, [r2, #20]
 800746c:	9902      	ldr	r1, [sp, #8]
 800746e:	f8d2 8004 	ldr.w	r8, [r2, #4]
 8007472:	a807      	add	r0, sp, #28
 8007474:	aa0b      	add	r2, sp, #44	; 0x2c
 8007476:	f000 fc5d 	bl	8007d34 <core_compute_offsets>
 800747a:	4653      	mov	r3, sl
 800747c:	aa0b      	add	r2, sp, #44	; 0x2c
 800747e:	4649      	mov	r1, r9
 8007480:	a809      	add	r0, sp, #36	; 0x24
 8007482:	f000 fc57 	bl	8007d34 <core_compute_offsets>
 8007486:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007488:	68d3      	ldr	r3, [r2, #12]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d056      	beq.n	800753c <forward_eltwise+0x1d8>
 800748e:	2300      	movs	r3, #0
 8007490:	6890      	ldr	r0, [r2, #8]
 8007492:	9302      	str	r3, [sp, #8]
 8007494:	2800      	cmp	r0, #0
 8007496:	d051      	beq.n	800753c <forward_eltwise+0x1d8>
 8007498:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800749a:	f04f 0b00 	mov.w	fp, #0
 800749e:	f3c1 2117 	ubfx	r1, r1, #8, #24
 80074a2:	f04f 0a00 	mov.w	sl, #0
 80074a6:	2904      	cmp	r1, #4
 80074a8:	bf8c      	ite	hi
 80074aa:	6913      	ldrhi	r3, [r2, #16]
 80074ac:	2301      	movls	r3, #1
 80074ae:	459a      	cmp	sl, r3
 80074b0:	d22a      	bcs.n	8007508 <forward_eltwise+0x1a4>
 80074b2:	6850      	ldr	r0, [r2, #4]
 80074b4:	f04f 0900 	mov.w	r9, #0
 80074b8:	b198      	cbz	r0, 80074e2 <forward_eltwise+0x17e>
 80074ba:	4622      	mov	r2, r4
 80074bc:	4629      	mov	r1, r5
 80074be:	4630      	mov	r0, r6
 80074c0:	47b8      	blx	r7
 80074c2:	9b08      	ldr	r3, [sp, #32]
 80074c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	441d      	add	r5, r3
 80074ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	441c      	add	r4, r3
 80074d0:	6853      	ldr	r3, [r2, #4]
 80074d2:	f109 0901 	add.w	r9, r9, #1
 80074d6:	454b      	cmp	r3, r9
 80074d8:	4446      	add	r6, r8
 80074da:	d8ee      	bhi.n	80074ba <forward_eltwise+0x156>
 80074dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074de:	f3c3 2117 	ubfx	r1, r3, #8, #24
 80074e2:	9807      	ldr	r0, [sp, #28]
 80074e4:	f5b0 6fa0 	cmp.w	r0, #1280	; 0x500
 80074e8:	d302      	bcc.n	80074f0 <forward_eltwise+0x18c>
 80074ea:	9808      	ldr	r0, [sp, #32]
 80074ec:	6903      	ldr	r3, [r0, #16]
 80074ee:	441d      	add	r5, r3
 80074f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80074f2:	f5b0 6fa0 	cmp.w	r0, #1280	; 0x500
 80074f6:	d302      	bcc.n	80074fe <forward_eltwise+0x19a>
 80074f8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80074fa:	6903      	ldr	r3, [r0, #16]
 80074fc:	441c      	add	r4, r3
 80074fe:	f10a 0a01 	add.w	sl, sl, #1
 8007502:	e7d0      	b.n	80074a6 <forward_eltwise+0x142>
 8007504:	684b      	ldr	r3, [r1, #4]
 8007506:	deff      	udf	#255	; 0xff
 8007508:	9b08      	ldr	r3, [sp, #32]
 800750a:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 800750e:	6898      	ldr	r0, [r3, #8]
 8007510:	4405      	add	r5, r0
 8007512:	f8dc 0008 	ldr.w	r0, [ip, #8]
 8007516:	4404      	add	r4, r0
 8007518:	6890      	ldr	r0, [r2, #8]
 800751a:	f10b 0b01 	add.w	fp, fp, #1
 800751e:	4558      	cmp	r0, fp
 8007520:	d8bf      	bhi.n	80074a2 <forward_eltwise+0x13e>
 8007522:	68d9      	ldr	r1, [r3, #12]
 8007524:	469e      	mov	lr, r3
 8007526:	f8dc 300c 	ldr.w	r3, [ip, #12]
 800752a:	441c      	add	r4, r3
 800752c:	9b02      	ldr	r3, [sp, #8]
 800752e:	3301      	adds	r3, #1
 8007530:	440d      	add	r5, r1
 8007532:	9302      	str	r3, [sp, #8]
 8007534:	4619      	mov	r1, r3
 8007536:	68d3      	ldr	r3, [r2, #12]
 8007538:	428b      	cmp	r3, r1
 800753a:	d8ab      	bhi.n	8007494 <forward_eltwise+0x130>
 800753c:	9b01      	ldr	r3, [sp, #4]
 800753e:	9a05      	ldr	r2, [sp, #20]
 8007540:	3304      	adds	r3, #4
 8007542:	4293      	cmp	r3, r2
 8007544:	9301      	str	r3, [sp, #4]
 8007546:	d026      	beq.n	8007596 <forward_eltwise+0x232>
 8007548:	9b03      	ldr	r3, [sp, #12]
 800754a:	f8dd 8000 	ldr.w	r8, [sp]
 800754e:	699a      	ldr	r2, [r3, #24]
 8007550:	e74d      	b.n	80073ee <forward_eltwise+0x8a>
 8007552:	9b00      	ldr	r3, [sp, #0]
 8007554:	f8da 0018 	ldr.w	r0, [sl, #24]
 8007558:	699b      	ldr	r3, [r3, #24]
 800755a:	f8d8 4018 	ldr.w	r4, [r8, #24]
 800755e:	6885      	ldr	r5, [r0, #8]
 8007560:	689e      	ldr	r6, [r3, #8]
 8007562:	68a4      	ldr	r4, [r4, #8]
 8007564:	464a      	mov	r2, r9
 8007566:	a80b      	add	r0, sp, #44	; 0x2c
 8007568:	f000 fbb8 	bl	8007cdc <core_get_broadcasted_shape>
 800756c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800756e:	0a1b      	lsrs	r3, r3, #8
 8007570:	bf08      	it	eq
 8007572:	2301      	moveq	r3, #1
 8007574:	d009      	beq.n	800758a <forward_eltwise+0x226>
 8007576:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007578:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 800757c:	2301      	movs	r3, #1
 800757e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8007582:	4290      	cmp	r0, r2
 8007584:	fb01 f303 	mul.w	r3, r1, r3
 8007588:	d1f9      	bne.n	800757e <forward_eltwise+0x21a>
 800758a:	4621      	mov	r1, r4
 800758c:	462a      	mov	r2, r5
 800758e:	9c04      	ldr	r4, [sp, #16]
 8007590:	4630      	mov	r0, r6
 8007592:	47a0      	blx	r4
 8007594:	e7d2      	b.n	800753c <forward_eltwise+0x1d8>
 8007596:	b01d      	add	sp, #116	; 0x74
 8007598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800759c:	461d      	mov	r5, r3
 800759e:	e6ef      	b.n	8007380 <forward_eltwise+0x1c>
 80075a0:	689b      	ldr	r3, [r3, #8]
 80075a2:	deff      	udf	#255	; 0xff
 80075a4:	2300      	movs	r3, #0
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	deff      	udf	#255	; 0xff
 80075aa:	685b      	ldr	r3, [r3, #4]
 80075ac:	deff      	udf	#255	; 0xff
 80075ae:	bf00      	nop

080075b0 <forward_elu>:
 80075b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075b2:	ed2d 8b04 	vpush	{d8-d9}
 80075b6:	6982      	ldr	r2, [r0, #24]
 80075b8:	8813      	ldrh	r3, [r2, #0]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d051      	beq.n	8007662 <forward_elu+0xb2>
 80075be:	6851      	ldr	r1, [r2, #4]
 80075c0:	684a      	ldr	r2, [r1, #4]
 80075c2:	b102      	cbz	r2, 80075c6 <forward_elu+0x16>
 80075c4:	6812      	ldr	r2, [r2, #0]
 80075c6:	2b01      	cmp	r3, #1
 80075c8:	d04a      	beq.n	8007660 <forward_elu+0xb0>
 80075ca:	690b      	ldr	r3, [r1, #16]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d050      	beq.n	8007672 <forward_elu+0xc2>
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	6991      	ldr	r1, [r2, #24]
 80075d4:	699c      	ldr	r4, [r3, #24]
 80075d6:	6893      	ldr	r3, [r2, #8]
 80075d8:	68a7      	ldr	r7, [r4, #8]
 80075da:	688e      	ldr	r6, [r1, #8]
 80075dc:	0a1b      	lsrs	r3, r3, #8
 80075de:	d042      	beq.n	8007666 <forward_elu+0xb6>
 80075e0:	68d4      	ldr	r4, [r2, #12]
 80075e2:	2201      	movs	r2, #1
 80075e4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80075e8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80075ec:	429c      	cmp	r4, r3
 80075ee:	fb01 f202 	mul.w	r2, r1, r2
 80075f2:	d1f9      	bne.n	80075e8 <forward_elu+0x38>
 80075f4:	69c3      	ldr	r3, [r0, #28]
 80075f6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80075fa:	3a01      	subs	r2, #1
 80075fc:	689b      	ldr	r3, [r3, #8]
 80075fe:	eb06 0582 	add.w	r5, r6, r2, lsl #2
 8007602:	42ae      	cmp	r6, r5
 8007604:	ed93 9a00 	vldr	s18, [r3]
 8007608:	eb07 0782 	add.w	r7, r7, r2, lsl #2
 800760c:	d825      	bhi.n	800765a <forward_elu+0xaa>
 800760e:	eddf 8a1a 	vldr	s17, [pc, #104]	; 8007678 <forward_elu+0xc8>
 8007612:	3504      	adds	r5, #4
 8007614:	3704      	adds	r7, #4
 8007616:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
 800761a:	462c      	mov	r4, r5
 800761c:	ed35 8a01 	vldmdb	r5!, {s16}
 8007620:	eeb0 0a48 	vmov.f32	s0, s16
 8007624:	f001 fbb8 	bl	8008d98 <expf>
 8007628:	ee30 0a69 	vsub.f32	s0, s0, s19
 800762c:	3c08      	subs	r4, #8
 800762e:	ee60 7a09 	vmul.f32	s15, s0, s18
 8007632:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800763a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800763e:	bf88      	it	hi
 8007640:	eef0 7a68 	vmovhi.f32	s15, s17
 8007644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007648:	bfb8      	it	lt
 800764a:	eeb0 8a68 	vmovlt.f32	s16, s17
 800764e:	ee77 7a88 	vadd.f32	s15, s15, s16
 8007652:	42a6      	cmp	r6, r4
 8007654:	ed67 7a01 	vstmdb	r7!, {s15}
 8007658:	d9df      	bls.n	800761a <forward_elu+0x6a>
 800765a:	ecbd 8b04 	vpop	{d8-d9}
 800765e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007660:	2300      	movs	r3, #0
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	deff      	udf	#255	; 0xff
 8007666:	69c3      	ldr	r3, [r0, #28]
 8007668:	689b      	ldr	r3, [r3, #8]
 800766a:	4635      	mov	r5, r6
 800766c:	ed93 9a00 	vldr	s18, [r3]
 8007670:	e7cd      	b.n	800760e <forward_elu+0x5e>
 8007672:	699b      	ldr	r3, [r3, #24]
 8007674:	deff      	udf	#255	; 0xff
 8007676:	bf00      	nop
 8007678:	00000000 	.word	0x00000000

0800767c <forward_clip>:
 800767c:	6982      	ldr	r2, [r0, #24]
 800767e:	8813      	ldrh	r3, [r2, #0]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d045      	beq.n	8007710 <forward_clip+0x94>
 8007684:	6851      	ldr	r1, [r2, #4]
 8007686:	684a      	ldr	r2, [r1, #4]
 8007688:	b102      	cbz	r2, 800768c <forward_clip+0x10>
 800768a:	6812      	ldr	r2, [r2, #0]
 800768c:	2b01      	cmp	r3, #1
 800768e:	d049      	beq.n	8007724 <forward_clip+0xa8>
 8007690:	690b      	ldr	r3, [r1, #16]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d049      	beq.n	800772a <forward_clip+0xae>
 8007696:	b470      	push	{r4, r5, r6}
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	6994      	ldr	r4, [r2, #24]
 800769c:	6999      	ldr	r1, [r3, #24]
 800769e:	6893      	ldr	r3, [r2, #8]
 80076a0:	6889      	ldr	r1, [r1, #8]
 80076a2:	68a5      	ldr	r5, [r4, #8]
 80076a4:	0a1b      	lsrs	r3, r3, #8
 80076a6:	d035      	beq.n	8007714 <forward_clip+0x98>
 80076a8:	68d6      	ldr	r6, [r2, #12]
 80076aa:	2201      	movs	r2, #1
 80076ac:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80076b0:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 80076b4:	429e      	cmp	r6, r3
 80076b6:	fb04 f202 	mul.w	r2, r4, r2
 80076ba:	d1f9      	bne.n	80076b0 <forward_clip+0x34>
 80076bc:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
 80076c0:	69c0      	ldr	r0, [r0, #28]
 80076c2:	3b01      	subs	r3, #1
 80076c4:	6880      	ldr	r0, [r0, #8]
 80076c6:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 80076ca:	4295      	cmp	r5, r2
 80076cc:	edd0 6a00 	vldr	s13, [r0]
 80076d0:	ed90 7a01 	vldr	s14, [r0, #4]
 80076d4:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80076d8:	d818      	bhi.n	800770c <forward_clip+0x90>
 80076da:	3204      	adds	r2, #4
 80076dc:	3104      	adds	r1, #4
 80076de:	4613      	mov	r3, r2
 80076e0:	ed72 7a01 	vldmdb	r2!, {s15}
 80076e4:	eef4 7ae6 	vcmpe.f32	s15, s13
 80076e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076ec:	bfb8      	it	lt
 80076ee:	eef0 7a66 	vmovlt.f32	s15, s13
 80076f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80076f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076fa:	f1a3 0308 	sub.w	r3, r3, #8
 80076fe:	bf88      	it	hi
 8007700:	eef0 7a47 	vmovhi.f32	s15, s14
 8007704:	429d      	cmp	r5, r3
 8007706:	ed61 7a01 	vstmdb	r1!, {s15}
 800770a:	d9e8      	bls.n	80076de <forward_clip+0x62>
 800770c:	bc70      	pop	{r4, r5, r6}
 800770e:	4770      	bx	lr
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	deff      	udf	#255	; 0xff
 8007714:	69c3      	ldr	r3, [r0, #28]
 8007716:	689b      	ldr	r3, [r3, #8]
 8007718:	462a      	mov	r2, r5
 800771a:	edd3 6a00 	vldr	s13, [r3]
 800771e:	ed93 7a01 	vldr	s14, [r3, #4]
 8007722:	e7da      	b.n	80076da <forward_clip+0x5e>
 8007724:	2300      	movs	r3, #0
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	deff      	udf	#255	; 0xff
 800772a:	699b      	ldr	r3, [r3, #24]
 800772c:	deff      	udf	#255	; 0xff
 800772e:	bf00      	nop

08007730 <forward_lite_dense_if32of32wf32>:
 8007730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007734:	e9dd 6409 	ldrd	r6, r4, [sp, #36]	; 0x24
 8007738:	eb00 0784 	add.w	r7, r0, r4, lsl #2
 800773c:	4287      	cmp	r7, r0
 800773e:	f240 8106 	bls.w	800794e <forward_lite_dense_if32of32wf32+0x21e>
 8007742:	f1a6 0810 	sub.w	r8, r6, #16
 8007746:	ea4f 1818 	mov.w	r8, r8, lsr #4
 800774a:	f108 0801 	add.w	r8, r8, #1
 800774e:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 8007752:	ea4f 0986 	mov.w	r9, r6, lsl #2
 8007756:	eb01 1888 	add.w	r8, r1, r8, lsl #6
 800775a:	4605      	mov	r5, r0
 800775c:	f006 0a0f 	and.w	sl, r6, #15
 8007760:	2e0f      	cmp	r6, #15
 8007762:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8007974 <forward_lite_dense_if32of32wf32+0x244>
 8007766:	f240 8101 	bls.w	800796c <forward_lite_dense_if32of32wf32+0x23c>
 800776a:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 800776e:	f102 0440 	add.w	r4, r2, #64	; 0x40
 8007772:	46b6      	mov	lr, r6
 8007774:	ed54 5a0f 	vldr	s11, [r4, #-60]	; 0xffffffc4
 8007778:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 800777c:	ed1c 6a10 	vldr	s12, [ip, #-64]	; 0xffffffc0
 8007780:	ed54 6a10 	vldr	s13, [r4, #-64]	; 0xffffffc0
 8007784:	ed5c 4a0d 	vldr	s9, [ip, #-52]	; 0xffffffcc
 8007788:	ed1c 5a0c 	vldr	s10, [ip, #-48]	; 0xffffffd0
 800778c:	ed1c 3a0a 	vldr	s6, [ip, #-40]	; 0xffffffd8
 8007790:	ed54 3a0a 	vldr	s7, [r4, #-40]	; 0xffffffd8
 8007794:	ed1c 4a09 	vldr	s8, [ip, #-36]	; 0xffffffdc
 8007798:	ed1c 1a06 	vldr	s2, [ip, #-24]	; 0xffffffe8
 800779c:	ed54 1a06 	vldr	s3, [r4, #-24]	; 0xffffffe8
 80077a0:	ed1c 2a05 	vldr	s4, [ip, #-20]	; 0xffffffec
 80077a4:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 80077a8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80077ac:	ed5c 5a0e 	vldr	s11, [ip, #-56]	; 0xffffffc8
 80077b0:	eee6 7a26 	vfma.f32	s15, s12, s13
 80077b4:	f1ae 0e10 	sub.w	lr, lr, #16
 80077b8:	f1be 0f0f 	cmp.w	lr, #15
 80077bc:	ed14 6a0e 	vldr	s12, [r4, #-56]	; 0xffffffc8
 80077c0:	ed54 6a0d 	vldr	s13, [r4, #-52]	; 0xffffffcc
 80077c4:	eee5 7a86 	vfma.f32	s15, s11, s12
 80077c8:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 80077cc:	f104 0440 	add.w	r4, r4, #64	; 0x40
 80077d0:	ed54 5a1c 	vldr	s11, [r4, #-112]	; 0xffffff90
 80077d4:	ed1c 6a1b 	vldr	s12, [ip, #-108]	; 0xffffff94
 80077d8:	eee4 7aa6 	vfma.f32	s15, s9, s13
 80077dc:	ed54 6a1b 	vldr	s13, [r4, #-108]	; 0xffffff94
 80077e0:	ed54 4a19 	vldr	s9, [r4, #-100]	; 0xffffff9c
 80077e4:	eee5 7a25 	vfma.f32	s15, s10, s11
 80077e8:	ed1c 5a18 	vldr	s10, [ip, #-96]	; 0xffffffa0
 80077ec:	ed54 5a18 	vldr	s11, [r4, #-96]	; 0xffffffa0
 80077f0:	eee6 7a26 	vfma.f32	s15, s12, s13
 80077f4:	ed1c 6a17 	vldr	s12, [ip, #-92]	; 0xffffffa4
 80077f8:	ed54 6a17 	vldr	s13, [r4, #-92]	; 0xffffffa4
 80077fc:	eee3 7a23 	vfma.f32	s15, s6, s7
 8007800:	ed1c 3a14 	vldr	s6, [ip, #-80]	; 0xffffffb0
 8007804:	ed54 3a14 	vldr	s7, [r4, #-80]	; 0xffffffb0
 8007808:	eee4 7a24 	vfma.f32	s15, s8, s9
 800780c:	ed1c 4a13 	vldr	s8, [ip, #-76]	; 0xffffffb4
 8007810:	ed54 4a13 	vldr	s9, [r4, #-76]	; 0xffffffb4
 8007814:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007818:	ed1c 5a12 	vldr	s10, [ip, #-72]	; 0xffffffb8
 800781c:	ed54 5a12 	vldr	s11, [r4, #-72]	; 0xffffffb8
 8007820:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007824:	ed1c 6a11 	vldr	s12, [ip, #-68]	; 0xffffffbc
 8007828:	ed54 6a11 	vldr	s13, [r4, #-68]	; 0xffffffbc
 800782c:	eee1 7a21 	vfma.f32	s15, s2, s3
 8007830:	eee2 7a22 	vfma.f32	s15, s4, s5
 8007834:	eee3 7a23 	vfma.f32	s15, s6, s7
 8007838:	eee4 7a24 	vfma.f32	s15, s8, s9
 800783c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007840:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007844:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007848:	d894      	bhi.n	8007774 <forward_lite_dense_if32of32wf32+0x44>
 800784a:	eb02 0e0b 	add.w	lr, r2, fp
 800784e:	4654      	mov	r4, sl
 8007850:	46c4      	mov	ip, r8
 8007852:	2c00      	cmp	r4, #0
 8007854:	d075      	beq.n	8007942 <forward_lite_dense_if32of32wf32+0x212>
 8007856:	eddc 6a00 	vldr	s13, [ip]
 800785a:	edde 7a00 	vldr	s15, [lr]
 800785e:	2c01      	cmp	r4, #1
 8007860:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007864:	d06d      	beq.n	8007942 <forward_lite_dense_if32of32wf32+0x212>
 8007866:	eddc 6a01 	vldr	s13, [ip, #4]
 800786a:	edde 7a01 	vldr	s15, [lr, #4]
 800786e:	2c02      	cmp	r4, #2
 8007870:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007874:	d065      	beq.n	8007942 <forward_lite_dense_if32of32wf32+0x212>
 8007876:	eddc 6a02 	vldr	s13, [ip, #8]
 800787a:	edde 7a02 	vldr	s15, [lr, #8]
 800787e:	2c03      	cmp	r4, #3
 8007880:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007884:	d05d      	beq.n	8007942 <forward_lite_dense_if32of32wf32+0x212>
 8007886:	eddc 6a03 	vldr	s13, [ip, #12]
 800788a:	edde 7a03 	vldr	s15, [lr, #12]
 800788e:	2c04      	cmp	r4, #4
 8007890:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007894:	d055      	beq.n	8007942 <forward_lite_dense_if32of32wf32+0x212>
 8007896:	eddc 6a04 	vldr	s13, [ip, #16]
 800789a:	edde 7a04 	vldr	s15, [lr, #16]
 800789e:	2c05      	cmp	r4, #5
 80078a0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80078a4:	d04d      	beq.n	8007942 <forward_lite_dense_if32of32wf32+0x212>
 80078a6:	eddc 6a05 	vldr	s13, [ip, #20]
 80078aa:	edde 7a05 	vldr	s15, [lr, #20]
 80078ae:	2c06      	cmp	r4, #6
 80078b0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80078b4:	d045      	beq.n	8007942 <forward_lite_dense_if32of32wf32+0x212>
 80078b6:	eddc 6a06 	vldr	s13, [ip, #24]
 80078ba:	edde 7a06 	vldr	s15, [lr, #24]
 80078be:	2c07      	cmp	r4, #7
 80078c0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80078c4:	d03d      	beq.n	8007942 <forward_lite_dense_if32of32wf32+0x212>
 80078c6:	eddc 6a07 	vldr	s13, [ip, #28]
 80078ca:	edde 7a07 	vldr	s15, [lr, #28]
 80078ce:	2c08      	cmp	r4, #8
 80078d0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80078d4:	d035      	beq.n	8007942 <forward_lite_dense_if32of32wf32+0x212>
 80078d6:	eddc 6a08 	vldr	s13, [ip, #32]
 80078da:	edde 7a08 	vldr	s15, [lr, #32]
 80078de:	2c09      	cmp	r4, #9
 80078e0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80078e4:	d02d      	beq.n	8007942 <forward_lite_dense_if32of32wf32+0x212>
 80078e6:	eddc 6a09 	vldr	s13, [ip, #36]	; 0x24
 80078ea:	edde 7a09 	vldr	s15, [lr, #36]	; 0x24
 80078ee:	2c0a      	cmp	r4, #10
 80078f0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80078f4:	d025      	beq.n	8007942 <forward_lite_dense_if32of32wf32+0x212>
 80078f6:	eddc 6a0a 	vldr	s13, [ip, #40]	; 0x28
 80078fa:	edde 7a0a 	vldr	s15, [lr, #40]	; 0x28
 80078fe:	2c0b      	cmp	r4, #11
 8007900:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007904:	d01d      	beq.n	8007942 <forward_lite_dense_if32of32wf32+0x212>
 8007906:	eddc 6a0b 	vldr	s13, [ip, #44]	; 0x2c
 800790a:	edde 7a0b 	vldr	s15, [lr, #44]	; 0x2c
 800790e:	2c0c      	cmp	r4, #12
 8007910:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007914:	d015      	beq.n	8007942 <forward_lite_dense_if32of32wf32+0x212>
 8007916:	eddc 6a0c 	vldr	s13, [ip, #48]	; 0x30
 800791a:	edde 7a0c 	vldr	s15, [lr, #48]	; 0x30
 800791e:	3c0d      	subs	r4, #13
 8007920:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007924:	d00d      	beq.n	8007942 <forward_lite_dense_if32of32wf32+0x212>
 8007926:	eddc 6a0d 	vldr	s13, [ip, #52]	; 0x34
 800792a:	edde 7a0d 	vldr	s15, [lr, #52]	; 0x34
 800792e:	2c01      	cmp	r4, #1
 8007930:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007934:	d005      	beq.n	8007942 <forward_lite_dense_if32of32wf32+0x212>
 8007936:	edde 6a0e 	vldr	s13, [lr, #56]	; 0x38
 800793a:	eddc 7a0e 	vldr	s15, [ip, #56]	; 0x38
 800793e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007942:	444a      	add	r2, r9
 8007944:	eca5 7a01 	vstmia	r5!, {s14}
 8007948:	42af      	cmp	r7, r5
 800794a:	f63f af09 	bhi.w	8007760 <forward_lite_dense_if32of32wf32+0x30>
 800794e:	b15b      	cbz	r3, 8007968 <forward_lite_dense_if32of32wf32+0x238>
 8007950:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007952:	b14a      	cbz	r2, 8007968 <forward_lite_dense_if32of32wf32+0x238>
 8007954:	edd0 7a00 	vldr	s15, [r0]
 8007958:	ecb3 7a01 	vldmia	r3!, {s14}
 800795c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007960:	ece0 7a01 	vstmia	r0!, {s15}
 8007964:	4287      	cmp	r7, r0
 8007966:	d1f5      	bne.n	8007954 <forward_lite_dense_if32of32wf32+0x224>
 8007968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800796c:	4634      	mov	r4, r6
 800796e:	4696      	mov	lr, r2
 8007970:	468c      	mov	ip, r1
 8007972:	e76e      	b.n	8007852 <forward_lite_dense_if32of32wf32+0x122>
 8007974:	00000000 	.word	0x00000000

08007978 <st_int8_copy>:
 8007978:	4288      	cmp	r0, r1
 800797a:	d057      	beq.n	8007a2c <st_int8_copy+0xb4>
 800797c:	2a00      	cmp	r2, #0
 800797e:	d055      	beq.n	8007a2c <st_int8_copy+0xb4>
 8007980:	4288      	cmp	r0, r1
 8007982:	d354      	bcc.n	8007a2e <st_int8_copy+0xb6>
 8007984:	078b      	lsls	r3, r1, #30
 8007986:	d102      	bne.n	800798e <st_int8_copy+0x16>
 8007988:	e009      	b.n	800799e <st_int8_copy+0x26>
 800798a:	2a00      	cmp	r2, #0
 800798c:	d05c      	beq.n	8007a48 <st_int8_copy+0xd0>
 800798e:	f910 3b01 	ldrsb.w	r3, [r0], #1
 8007992:	f801 3b01 	strb.w	r3, [r1], #1
 8007996:	078b      	lsls	r3, r1, #30
 8007998:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800799c:	d1f5      	bne.n	800798a <st_int8_copy+0x12>
 800799e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079a2:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 80079a6:	d069      	beq.n	8007a7c <st_int8_copy+0x104>
 80079a8:	ea41 0300 	orr.w	r3, r1, r0
 80079ac:	075b      	lsls	r3, r3, #29
 80079ae:	d14c      	bne.n	8007a4a <st_int8_copy+0xd2>
 80079b0:	f10e 33ff 	add.w	r3, lr, #4294967295	; 0xffffffff
 80079b4:	2b01      	cmp	r3, #1
 80079b6:	d948      	bls.n	8007a4a <st_int8_copy+0xd2>
 80079b8:	f100 0310 	add.w	r3, r0, #16
 80079bc:	ea4f 140e 	mov.w	r4, lr, lsl #4
 80079c0:	f101 0c10 	add.w	ip, r1, #16
 80079c4:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 80079c8:	ed13 6b04 	vldr	d6, [r3, #-16]
 80079cc:	ed13 7b02 	vldr	d7, [r3, #-8]
 80079d0:	3310      	adds	r3, #16
 80079d2:	4573      	cmp	r3, lr
 80079d4:	ed0c 6b04 	vstr	d6, [ip, #-16]
 80079d8:	ed0c 7b02 	vstr	d7, [ip, #-8]
 80079dc:	f10c 0c10 	add.w	ip, ip, #16
 80079e0:	d1f2      	bne.n	80079c8 <st_int8_copy+0x50>
 80079e2:	f3c2 0381 	ubfx	r3, r2, #2, #2
 80079e6:	4421      	add	r1, r4
 80079e8:	4420      	add	r0, r4
 80079ea:	f002 0203 	and.w	r2, r2, #3
 80079ee:	b16b      	cbz	r3, 8007a0c <st_int8_copy+0x94>
 80079f0:	6804      	ldr	r4, [r0, #0]
 80079f2:	600c      	str	r4, [r1, #0]
 80079f4:	1e5c      	subs	r4, r3, #1
 80079f6:	d005      	beq.n	8007a04 <st_int8_copy+0x8c>
 80079f8:	6845      	ldr	r5, [r0, #4]
 80079fa:	604d      	str	r5, [r1, #4]
 80079fc:	2c01      	cmp	r4, #1
 80079fe:	bf1c      	itt	ne
 8007a00:	6884      	ldrne	r4, [r0, #8]
 8007a02:	608c      	strne	r4, [r1, #8]
 8007a04:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8007a08:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8007a0c:	b162      	cbz	r2, 8007a28 <st_int8_copy+0xb0>
 8007a0e:	f990 3000 	ldrsb.w	r3, [r0]
 8007a12:	700b      	strb	r3, [r1, #0]
 8007a14:	3a01      	subs	r2, #1
 8007a16:	d007      	beq.n	8007a28 <st_int8_copy+0xb0>
 8007a18:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8007a1c:	704b      	strb	r3, [r1, #1]
 8007a1e:	2a01      	cmp	r2, #1
 8007a20:	bf1c      	itt	ne
 8007a22:	f990 3002 	ldrsbne.w	r3, [r0, #2]
 8007a26:	708b      	strbne	r3, [r1, #2]
 8007a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a2c:	4770      	bx	lr
 8007a2e:	1883      	adds	r3, r0, r2
 8007a30:	428b      	cmp	r3, r1
 8007a32:	d9a7      	bls.n	8007984 <st_int8_copy+0xc>
 8007a34:	4283      	cmp	r3, r0
 8007a36:	440a      	add	r2, r1
 8007a38:	d9f8      	bls.n	8007a2c <st_int8_copy+0xb4>
 8007a3a:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 8007a3e:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8007a42:	4283      	cmp	r3, r0
 8007a44:	d1f9      	bne.n	8007a3a <st_int8_copy+0xc2>
 8007a46:	4770      	bx	lr
 8007a48:	4770      	bx	lr
 8007a4a:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8007a4e:	460b      	mov	r3, r1
 8007a50:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 8007a54:	4684      	mov	ip, r0
 8007a56:	f8dc 7000 	ldr.w	r7, [ip]
 8007a5a:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8007a5e:	f8dc 5008 	ldr.w	r5, [ip, #8]
 8007a62:	f8dc 800c 	ldr.w	r8, [ip, #12]
 8007a66:	f8c3 800c 	str.w	r8, [r3, #12]
 8007a6a:	601f      	str	r7, [r3, #0]
 8007a6c:	605e      	str	r6, [r3, #4]
 8007a6e:	609d      	str	r5, [r3, #8]
 8007a70:	3310      	adds	r3, #16
 8007a72:	459e      	cmp	lr, r3
 8007a74:	f10c 0c10 	add.w	ip, ip, #16
 8007a78:	d1ed      	bne.n	8007a56 <st_int8_copy+0xde>
 8007a7a:	e7b2      	b.n	80079e2 <st_int8_copy+0x6a>
 8007a7c:	0893      	lsrs	r3, r2, #2
 8007a7e:	f002 0203 	and.w	r2, r2, #3
 8007a82:	e7b4      	b.n	80079ee <st_int8_copy+0x76>

08007a84 <ai_sum_f32>:
 8007a84:	edd1 7a00 	vldr	s15, [r1]
 8007a88:	ed92 7a00 	vldr	s14, [r2]
 8007a8c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007a90:	edc0 7a00 	vstr	s15, [r0]
 8007a94:	4770      	bx	lr
 8007a96:	bf00      	nop

08007a98 <ai_sum_buffer_f32>:
 8007a98:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8007a9c:	4298      	cmp	r0, r3
 8007a9e:	d209      	bcs.n	8007ab4 <ai_sum_buffer_f32+0x1c>
 8007aa0:	ecf1 7a01 	vldmia	r1!, {s15}
 8007aa4:	ecb2 7a01 	vldmia	r2!, {s14}
 8007aa8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007aac:	ece0 7a01 	vstmia	r0!, {s15}
 8007ab0:	4283      	cmp	r3, r0
 8007ab2:	d8f5      	bhi.n	8007aa0 <ai_sum_buffer_f32+0x8>
 8007ab4:	4770      	bx	lr
 8007ab6:	bf00      	nop

08007ab8 <ai_sub_f32>:
 8007ab8:	edd1 7a00 	vldr	s15, [r1]
 8007abc:	ed92 7a00 	vldr	s14, [r2]
 8007ac0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007ac4:	edc0 7a00 	vstr	s15, [r0]
 8007ac8:	4770      	bx	lr
 8007aca:	bf00      	nop

08007acc <ai_sub_buffer_f32>:
 8007acc:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8007ad0:	4298      	cmp	r0, r3
 8007ad2:	d209      	bcs.n	8007ae8 <ai_sub_buffer_f32+0x1c>
 8007ad4:	ecf1 7a01 	vldmia	r1!, {s15}
 8007ad8:	ecb2 7a01 	vldmia	r2!, {s14}
 8007adc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007ae0:	ece0 7a01 	vstmia	r0!, {s15}
 8007ae4:	4283      	cmp	r3, r0
 8007ae6:	d8f5      	bhi.n	8007ad4 <ai_sub_buffer_f32+0x8>
 8007ae8:	4770      	bx	lr
 8007aea:	bf00      	nop

08007aec <ai_mul_f32>:
 8007aec:	edd1 7a00 	vldr	s15, [r1]
 8007af0:	ed92 7a00 	vldr	s14, [r2]
 8007af4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007af8:	edc0 7a00 	vstr	s15, [r0]
 8007afc:	4770      	bx	lr
 8007afe:	bf00      	nop

08007b00 <ai_mul_buffer_f32>:
 8007b00:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8007b04:	4298      	cmp	r0, r3
 8007b06:	d209      	bcs.n	8007b1c <ai_mul_buffer_f32+0x1c>
 8007b08:	ecf1 7a01 	vldmia	r1!, {s15}
 8007b0c:	ecb2 7a01 	vldmia	r2!, {s14}
 8007b10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007b14:	ece0 7a01 	vstmia	r0!, {s15}
 8007b18:	4283      	cmp	r3, r0
 8007b1a:	d8f5      	bhi.n	8007b08 <ai_mul_buffer_f32+0x8>
 8007b1c:	4770      	bx	lr
 8007b1e:	bf00      	nop

08007b20 <ai_div_f32>:
 8007b20:	edd1 6a00 	vldr	s13, [r1]
 8007b24:	ed92 7a00 	vldr	s14, [r2]
 8007b28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b2c:	edc0 7a00 	vstr	s15, [r0]
 8007b30:	4770      	bx	lr
 8007b32:	bf00      	nop

08007b34 <ai_div_buffer_f32>:
 8007b34:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8007b38:	4298      	cmp	r0, r3
 8007b3a:	d209      	bcs.n	8007b50 <ai_div_buffer_f32+0x1c>
 8007b3c:	ecf1 6a01 	vldmia	r1!, {s13}
 8007b40:	ecb2 7a01 	vldmia	r2!, {s14}
 8007b44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b48:	ece0 7a01 	vstmia	r0!, {s15}
 8007b4c:	4283      	cmp	r3, r0
 8007b4e:	d8f5      	bhi.n	8007b3c <ai_div_buffer_f32+0x8>
 8007b50:	4770      	bx	lr
 8007b52:	bf00      	nop

08007b54 <ai_array_to_buffer_fmt>:
 8007b54:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8007b58:	2b02      	cmp	r3, #2
 8007b5a:	d050      	beq.n	8007bfe <ai_array_to_buffer_fmt+0xaa>
 8007b5c:	4b2a      	ldr	r3, [pc, #168]	; (8007c08 <ai_array_to_buffer_fmt+0xb4>)
 8007b5e:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 8007b62:	429a      	cmp	r2, r3
 8007b64:	d00b      	beq.n	8007b7e <ai_array_to_buffer_fmt+0x2a>
 8007b66:	dc1c      	bgt.n	8007ba2 <ai_array_to_buffer_fmt+0x4e>
 8007b68:	4b28      	ldr	r3, [pc, #160]	; (8007c0c <ai_array_to_buffer_fmt+0xb8>)
 8007b6a:	429a      	cmp	r2, r3
 8007b6c:	d007      	beq.n	8007b7e <ai_array_to_buffer_fmt+0x2a>
 8007b6e:	dd0b      	ble.n	8007b88 <ai_array_to_buffer_fmt+0x34>
 8007b70:	4b27      	ldr	r3, [pc, #156]	; (8007c10 <ai_array_to_buffer_fmt+0xbc>)
 8007b72:	429a      	cmp	r2, r3
 8007b74:	d003      	beq.n	8007b7e <ai_array_to_buffer_fmt+0x2a>
 8007b76:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8007b7a:	429a      	cmp	r2, r3
 8007b7c:	d131      	bne.n	8007be2 <ai_array_to_buffer_fmt+0x8e>
 8007b7e:	4613      	mov	r3, r2
 8007b80:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8007b84:	4318      	orrs	r0, r3
 8007b86:	4770      	bx	lr
 8007b88:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8007b8c:	429a      	cmp	r2, r3
 8007b8e:	d0f6      	beq.n	8007b7e <ai_array_to_buffer_fmt+0x2a>
 8007b90:	dd2c      	ble.n	8007bec <ai_array_to_buffer_fmt+0x98>
 8007b92:	4b20      	ldr	r3, [pc, #128]	; (8007c14 <ai_array_to_buffer_fmt+0xc0>)
 8007b94:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	bf18      	it	ne
 8007b9c:	2340      	movne	r3, #64	; 0x40
 8007b9e:	4318      	orrs	r0, r3
 8007ba0:	4770      	bx	lr
 8007ba2:	4b1d      	ldr	r3, [pc, #116]	; (8007c18 <ai_array_to_buffer_fmt+0xc4>)
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d0ea      	beq.n	8007b7e <ai_array_to_buffer_fmt+0x2a>
 8007ba8:	dd0e      	ble.n	8007bc8 <ai_array_to_buffer_fmt+0x74>
 8007baa:	4b1c      	ldr	r3, [pc, #112]	; (8007c1c <ai_array_to_buffer_fmt+0xc8>)
 8007bac:	429a      	cmp	r2, r3
 8007bae:	d0e6      	beq.n	8007b7e <ai_array_to_buffer_fmt+0x2a>
 8007bb0:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 8007bb4:	429a      	cmp	r2, r3
 8007bb6:	d0e2      	beq.n	8007b7e <ai_array_to_buffer_fmt+0x2a>
 8007bb8:	4b19      	ldr	r3, [pc, #100]	; (8007c20 <ai_array_to_buffer_fmt+0xcc>)
 8007bba:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8007bbe:	429a      	cmp	r2, r3
 8007bc0:	bf18      	it	ne
 8007bc2:	2340      	movne	r3, #64	; 0x40
 8007bc4:	4318      	orrs	r0, r3
 8007bc6:	4770      	bx	lr
 8007bc8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	d0d6      	beq.n	8007b7e <ai_array_to_buffer_fmt+0x2a>
 8007bd0:	3307      	adds	r3, #7
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	d0d3      	beq.n	8007b7e <ai_array_to_buffer_fmt+0x2a>
 8007bd6:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 8007bda:	429a      	cmp	r2, r3
 8007bdc:	bf18      	it	ne
 8007bde:	2340      	movne	r3, #64	; 0x40
 8007be0:	e7ce      	b.n	8007b80 <ai_array_to_buffer_fmt+0x2c>
 8007be2:	4b10      	ldr	r3, [pc, #64]	; (8007c24 <ai_array_to_buffer_fmt+0xd0>)
 8007be4:	429a      	cmp	r2, r3
 8007be6:	bf18      	it	ne
 8007be8:	2340      	movne	r3, #64	; 0x40
 8007bea:	e7c9      	b.n	8007b80 <ai_array_to_buffer_fmt+0x2c>
 8007bec:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8007bf0:	429a      	cmp	r2, r3
 8007bf2:	d0c4      	beq.n	8007b7e <ai_array_to_buffer_fmt+0x2a>
 8007bf4:	3380      	adds	r3, #128	; 0x80
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	bf18      	it	ne
 8007bfa:	2340      	movne	r3, #64	; 0x40
 8007bfc:	e7c0      	b.n	8007b80 <ai_array_to_buffer_fmt+0x2c>
 8007bfe:	4b0a      	ldr	r3, [pc, #40]	; (8007c28 <ai_array_to_buffer_fmt+0xd4>)
 8007c00:	4003      	ands	r3, r0
 8007c02:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007c06:	e7bb      	b.n	8007b80 <ai_array_to_buffer_fmt+0x2c>
 8007c08:	00840040 	.word	0x00840040
 8007c0c:	00040840 	.word	0x00040840
 8007c10:	00041040 	.word	0x00041040
 8007c14:	00040447 	.word	0x00040447
 8007c18:	00840840 	.word	0x00840840
 8007c1c:	00841040 	.word	0x00841040
 8007c20:	0084084f 	.word	0x0084084f
 8007c24:	0004084f 	.word	0x0004084f
 8007c28:	00803fff 	.word	0x00803fff

08007c2c <ai_array_get_byte_size>:
 8007c2c:	b319      	cbz	r1, 8007c76 <ai_array_get_byte_size+0x4a>
 8007c2e:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8007c32:	fb03 f101 	mul.w	r1, r3, r1
 8007c36:	3107      	adds	r1, #7
 8007c38:	f3c0 4243 	ubfx	r2, r0, #17, #4
 8007c3c:	f021 0307 	bic.w	r3, r1, #7
 8007c40:	2a04      	cmp	r2, #4
 8007c42:	f3c0 5141 	ubfx	r1, r0, #21, #2
 8007c46:	fa23 f101 	lsr.w	r1, r3, r1
 8007c4a:	ea4f 10e0 	mov.w	r0, r0, asr #7
 8007c4e:	d00b      	beq.n	8007c68 <ai_array_get_byte_size+0x3c>
 8007c50:	2a08      	cmp	r2, #8
 8007c52:	d002      	beq.n	8007c5a <ai_array_get_byte_size+0x2e>
 8007c54:	3107      	adds	r1, #7
 8007c56:	08c8      	lsrs	r0, r1, #3
 8007c58:	4770      	bx	lr
 8007c5a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8007c5e:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8007c62:	3107      	adds	r1, #7
 8007c64:	08c8      	lsrs	r0, r1, #3
 8007c66:	4770      	bx	lr
 8007c68:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8007c6c:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 8007c70:	3107      	adds	r1, #7
 8007c72:	08c8      	lsrs	r0, r1, #3
 8007c74:	4770      	bx	lr
 8007c76:	4608      	mov	r0, r1
 8007c78:	4770      	bx	lr
 8007c7a:	bf00      	nop

08007c7c <ai_array_get_data_byte_size>:
 8007c7c:	b169      	cbz	r1, 8007c9a <ai_array_get_data_byte_size+0x1e>
 8007c7e:	f3c0 12c6 	ubfx	r2, r0, #7, #7
 8007c82:	fb02 f101 	mul.w	r1, r2, r1
 8007c86:	1dcb      	adds	r3, r1, #7
 8007c88:	f023 0307 	bic.w	r3, r3, #7
 8007c8c:	f3c0 5041 	ubfx	r0, r0, #21, #2
 8007c90:	fa23 f000 	lsr.w	r0, r3, r0
 8007c94:	3007      	adds	r0, #7
 8007c96:	08c0      	lsrs	r0, r0, #3
 8007c98:	4770      	bx	lr
 8007c9a:	4608      	mov	r0, r1
 8007c9c:	4770      	bx	lr
 8007c9e:	bf00      	nop

08007ca0 <ai_version_get>:
 8007ca0:	0212      	lsls	r2, r2, #8
 8007ca2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8007ca6:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8007caa:	4770      	bx	lr

08007cac <get_tensor_byte_size>:
 8007cac:	b410      	push	{r4}
 8007cae:	6983      	ldr	r3, [r0, #24]
 8007cb0:	68c4      	ldr	r4, [r0, #12]
 8007cb2:	6941      	ldr	r1, [r0, #20]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	68e0      	ldr	r0, [r4, #12]
 8007cb8:	4a07      	ldr	r2, [pc, #28]	; (8007cd8 <get_tensor_byte_size+0x2c>)
 8007cba:	68c9      	ldr	r1, [r1, #12]
 8007cbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007cc0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8007cc4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007cc8:	fb01 f000 	mul.w	r0, r1, r0
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	bf04      	itt	eq
 8007cd0:	3007      	addeq	r0, #7
 8007cd2:	08c0      	lsreq	r0, r0, #3
 8007cd4:	4770      	bx	lr
 8007cd6:	bf00      	nop
 8007cd8:	000400c0 	.word	0x000400c0

08007cdc <core_get_broadcasted_shape>:
 8007cdc:	b470      	push	{r4, r5, r6}
 8007cde:	6804      	ldr	r4, [r0, #0]
 8007ce0:	f3c4 2417 	ubfx	r4, r4, #8, #24
 8007ce4:	b324      	cbz	r4, 8007d30 <core_get_broadcasted_shape+0x54>
 8007ce6:	4623      	mov	r3, r4
 8007ce8:	3b01      	subs	r3, #1
 8007cea:	429c      	cmp	r4, r3
 8007cec:	d91b      	bls.n	8007d26 <core_get_broadcasted_shape+0x4a>
 8007cee:	6814      	ldr	r4, [r2, #0]
 8007cf0:	680e      	ldr	r6, [r1, #0]
 8007cf2:	ebb3 2f14 	cmp.w	r3, r4, lsr #8
 8007cf6:	bf36      	itet	cc
 8007cf8:	6854      	ldrcc	r4, [r2, #4]
 8007cfa:	2401      	movcs	r4, #1
 8007cfc:	f854 4023 	ldrcc.w	r4, [r4, r3, lsl #2]
 8007d00:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 8007d04:	bf38      	it	cc
 8007d06:	ea4f 0c83 	movcc.w	ip, r3, lsl #2
 8007d0a:	ebb3 2f16 	cmp.w	r3, r6, lsr #8
 8007d0e:	f04f 0501 	mov.w	r5, #1
 8007d12:	bf3c      	itt	cc
 8007d14:	684d      	ldrcc	r5, [r1, #4]
 8007d16:	f855 500c 	ldrcc.w	r5, [r5, ip]
 8007d1a:	42ac      	cmp	r4, r5
 8007d1c:	bf38      	it	cc
 8007d1e:	462c      	movcc	r4, r5
 8007d20:	6845      	ldr	r5, [r0, #4]
 8007d22:	f845 400c 	str.w	r4, [r5, ip]
 8007d26:	b11b      	cbz	r3, 8007d30 <core_get_broadcasted_shape+0x54>
 8007d28:	6804      	ldr	r4, [r0, #0]
 8007d2a:	f3c4 2417 	ubfx	r4, r4, #8, #24
 8007d2e:	e7db      	b.n	8007ce8 <core_get_broadcasted_shape+0xc>
 8007d30:	bc70      	pop	{r4, r5, r6}
 8007d32:	4770      	bx	lr

08007d34 <core_compute_offsets>:
 8007d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d38:	e9d1 4600 	ldrd	r4, r6, [r1]
 8007d3c:	f5b4 6fa0 	cmp.w	r4, #1280	; 0x500
 8007d40:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8007d44:	6871      	ldr	r1, [r6, #4]
 8007d46:	6812      	ldr	r2, [r2, #0]
 8007d48:	bf28      	it	cs
 8007d4a:	6935      	ldrcs	r5, [r6, #16]
 8007d4c:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8007d50:	f8d0 b000 	ldr.w	fp, [r0]
 8007d54:	bf2e      	itee	cs
 8007d56:	fb05 fe01 	mulcs.w	lr, r5, r1
 8007d5a:	468e      	movcc	lr, r1
 8007d5c:	2501      	movcc	r5, #1
 8007d5e:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 8007d62:	bf28      	it	cs
 8007d64:	f8d9 2010 	ldrcs.w	r2, [r9, #16]
 8007d68:	e9d6 4802 	ldrd	r4, r8, [r6, #8]
 8007d6c:	e9d9 6902 	ldrd	r6, r9, [r9, #8]
 8007d70:	bf38      	it	cc
 8007d72:	2201      	movcc	r2, #1
 8007d74:	b083      	sub	sp, #12
 8007d76:	ebb4 0a06 	subs.w	sl, r4, r6
 8007d7a:	bf18      	it	ne
 8007d7c:	f04f 0a01 	movne.w	sl, #1
 8007d80:	f5bb 7f00 	cmp.w	fp, #512	; 0x200
 8007d84:	9201      	str	r2, [sp, #4]
 8007d86:	f3cb 2217 	ubfx	r2, fp, #8, #24
 8007d8a:	d308      	bcc.n	8007d9e <core_compute_offsets+0x6a>
 8007d8c:	6847      	ldr	r7, [r0, #4]
 8007d8e:	4561      	cmp	r1, ip
 8007d90:	bf0c      	ite	eq
 8007d92:	461a      	moveq	r2, r3
 8007d94:	2200      	movne	r2, #0
 8007d96:	607a      	str	r2, [r7, #4]
 8007d98:	6802      	ldr	r2, [r0, #0]
 8007d9a:	f3c2 2217 	ubfx	r2, r2, #8, #24
 8007d9e:	9f01      	ldr	r7, [sp, #4]
 8007da0:	42bd      	cmp	r5, r7
 8007da2:	d03f      	beq.n	8007e24 <core_compute_offsets+0xf0>
 8007da4:	eba1 0b0c 	sub.w	fp, r1, ip
 8007da8:	fabb fb8b 	clz	fp, fp
 8007dac:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8007db0:	fb01 fb0b 	mul.w	fp, r1, fp
 8007db4:	f1cb 0b00 	rsb	fp, fp, #0
 8007db8:	2a04      	cmp	r2, #4
 8007dba:	d906      	bls.n	8007dca <core_compute_offsets+0x96>
 8007dbc:	6847      	ldr	r7, [r0, #4]
 8007dbe:	fb0b f203 	mul.w	r2, fp, r3
 8007dc2:	613a      	str	r2, [r7, #16]
 8007dc4:	6802      	ldr	r2, [r0, #0]
 8007dc6:	f3c2 2217 	ubfx	r2, r2, #8, #24
 8007dca:	42b4      	cmp	r4, r6
 8007dcc:	d03a      	beq.n	8007e44 <core_compute_offsets+0x110>
 8007dce:	f04f 0b00 	mov.w	fp, #0
 8007dd2:	2a02      	cmp	r2, #2
 8007dd4:	fb0e fa0a 	mul.w	sl, lr, sl
 8007dd8:	d90e      	bls.n	8007df8 <core_compute_offsets+0xc4>
 8007dda:	9a01      	ldr	r2, [sp, #4]
 8007ddc:	6847      	ldr	r7, [r0, #4]
 8007dde:	1aaa      	subs	r2, r5, r2
 8007de0:	bf18      	it	ne
 8007de2:	2201      	movne	r2, #1
 8007de4:	ebab 0b0a 	sub.w	fp, fp, sl
 8007de8:	fb01 bb02 	mla	fp, r1, r2, fp
 8007dec:	fb03 f20b 	mul.w	r2, r3, fp
 8007df0:	60ba      	str	r2, [r7, #8]
 8007df2:	6802      	ldr	r2, [r0, #0]
 8007df4:	f3c2 2217 	ubfx	r2, r2, #8, #24
 8007df8:	45c8      	cmp	r8, r9
 8007dfa:	d019      	beq.n	8007e30 <core_compute_offsets+0xfc>
 8007dfc:	2100      	movs	r1, #0
 8007dfe:	2a03      	cmp	r2, #3
 8007e00:	d90d      	bls.n	8007e1e <core_compute_offsets+0xea>
 8007e02:	ebb8 0809 	subs.w	r8, r8, r9
 8007e06:	fb0e f404 	mul.w	r4, lr, r4
 8007e0a:	bf18      	it	ne
 8007e0c:	f04f 0801 	movne.w	r8, #1
 8007e10:	fb08 1114 	mls	r1, r8, r4, r1
 8007e14:	6842      	ldr	r2, [r0, #4]
 8007e16:	448a      	add	sl, r1
 8007e18:	fb03 f30a 	mul.w	r3, r3, sl
 8007e1c:	60d3      	str	r3, [r2, #12]
 8007e1e:	b003      	add	sp, #12
 8007e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e24:	ebb1 0b0c 	subs.w	fp, r1, ip
 8007e28:	bf18      	it	ne
 8007e2a:	f04f 0b01 	movne.w	fp, #1
 8007e2e:	e7c3      	b.n	8007db8 <core_compute_offsets+0x84>
 8007e30:	42b4      	cmp	r4, r6
 8007e32:	d0e3      	beq.n	8007dfc <core_compute_offsets+0xc8>
 8007e34:	9e01      	ldr	r6, [sp, #4]
 8007e36:	42b5      	cmp	r5, r6
 8007e38:	d0e0      	beq.n	8007dfc <core_compute_offsets+0xc8>
 8007e3a:	ebb1 010c 	subs.w	r1, r1, ip
 8007e3e:	bf18      	it	ne
 8007e40:	2101      	movne	r1, #1
 8007e42:	e7dc      	b.n	8007dfe <core_compute_offsets+0xca>
 8007e44:	9f01      	ldr	r7, [sp, #4]
 8007e46:	42bd      	cmp	r5, r7
 8007e48:	d0c1      	beq.n	8007dce <core_compute_offsets+0x9a>
 8007e4a:	ebb1 0b0c 	subs.w	fp, r1, ip
 8007e4e:	bf18      	it	ne
 8007e50:	f04f 0b01 	movne.w	fp, #1
 8007e54:	e7bd      	b.n	8007dd2 <core_compute_offsets+0x9e>
 8007e56:	bf00      	nop

08007e58 <sbrk_aligned>:
 8007e58:	b570      	push	{r4, r5, r6, lr}
 8007e5a:	4e0e      	ldr	r6, [pc, #56]	; (8007e94 <sbrk_aligned+0x3c>)
 8007e5c:	460c      	mov	r4, r1
 8007e5e:	6831      	ldr	r1, [r6, #0]
 8007e60:	4605      	mov	r5, r0
 8007e62:	b911      	cbnz	r1, 8007e6a <sbrk_aligned+0x12>
 8007e64:	f000 fae8 	bl	8008438 <_sbrk_r>
 8007e68:	6030      	str	r0, [r6, #0]
 8007e6a:	4621      	mov	r1, r4
 8007e6c:	4628      	mov	r0, r5
 8007e6e:	f000 fae3 	bl	8008438 <_sbrk_r>
 8007e72:	1c43      	adds	r3, r0, #1
 8007e74:	d00a      	beq.n	8007e8c <sbrk_aligned+0x34>
 8007e76:	1cc4      	adds	r4, r0, #3
 8007e78:	f024 0403 	bic.w	r4, r4, #3
 8007e7c:	42a0      	cmp	r0, r4
 8007e7e:	d007      	beq.n	8007e90 <sbrk_aligned+0x38>
 8007e80:	1a21      	subs	r1, r4, r0
 8007e82:	4628      	mov	r0, r5
 8007e84:	f000 fad8 	bl	8008438 <_sbrk_r>
 8007e88:	3001      	adds	r0, #1
 8007e8a:	d101      	bne.n	8007e90 <sbrk_aligned+0x38>
 8007e8c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007e90:	4620      	mov	r0, r4
 8007e92:	bd70      	pop	{r4, r5, r6, pc}
 8007e94:	200016e4 	.word	0x200016e4

08007e98 <_malloc_r>:
 8007e98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e9c:	1ccd      	adds	r5, r1, #3
 8007e9e:	f025 0503 	bic.w	r5, r5, #3
 8007ea2:	3508      	adds	r5, #8
 8007ea4:	2d0c      	cmp	r5, #12
 8007ea6:	bf38      	it	cc
 8007ea8:	250c      	movcc	r5, #12
 8007eaa:	2d00      	cmp	r5, #0
 8007eac:	4607      	mov	r7, r0
 8007eae:	db01      	blt.n	8007eb4 <_malloc_r+0x1c>
 8007eb0:	42a9      	cmp	r1, r5
 8007eb2:	d905      	bls.n	8007ec0 <_malloc_r+0x28>
 8007eb4:	230c      	movs	r3, #12
 8007eb6:	603b      	str	r3, [r7, #0]
 8007eb8:	2600      	movs	r6, #0
 8007eba:	4630      	mov	r0, r6
 8007ebc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ec0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007f94 <_malloc_r+0xfc>
 8007ec4:	f000 f868 	bl	8007f98 <__malloc_lock>
 8007ec8:	f8d8 3000 	ldr.w	r3, [r8]
 8007ecc:	461c      	mov	r4, r3
 8007ece:	bb5c      	cbnz	r4, 8007f28 <_malloc_r+0x90>
 8007ed0:	4629      	mov	r1, r5
 8007ed2:	4638      	mov	r0, r7
 8007ed4:	f7ff ffc0 	bl	8007e58 <sbrk_aligned>
 8007ed8:	1c43      	adds	r3, r0, #1
 8007eda:	4604      	mov	r4, r0
 8007edc:	d155      	bne.n	8007f8a <_malloc_r+0xf2>
 8007ede:	f8d8 4000 	ldr.w	r4, [r8]
 8007ee2:	4626      	mov	r6, r4
 8007ee4:	2e00      	cmp	r6, #0
 8007ee6:	d145      	bne.n	8007f74 <_malloc_r+0xdc>
 8007ee8:	2c00      	cmp	r4, #0
 8007eea:	d048      	beq.n	8007f7e <_malloc_r+0xe6>
 8007eec:	6823      	ldr	r3, [r4, #0]
 8007eee:	4631      	mov	r1, r6
 8007ef0:	4638      	mov	r0, r7
 8007ef2:	eb04 0903 	add.w	r9, r4, r3
 8007ef6:	f000 fa9f 	bl	8008438 <_sbrk_r>
 8007efa:	4581      	cmp	r9, r0
 8007efc:	d13f      	bne.n	8007f7e <_malloc_r+0xe6>
 8007efe:	6821      	ldr	r1, [r4, #0]
 8007f00:	1a6d      	subs	r5, r5, r1
 8007f02:	4629      	mov	r1, r5
 8007f04:	4638      	mov	r0, r7
 8007f06:	f7ff ffa7 	bl	8007e58 <sbrk_aligned>
 8007f0a:	3001      	adds	r0, #1
 8007f0c:	d037      	beq.n	8007f7e <_malloc_r+0xe6>
 8007f0e:	6823      	ldr	r3, [r4, #0]
 8007f10:	442b      	add	r3, r5
 8007f12:	6023      	str	r3, [r4, #0]
 8007f14:	f8d8 3000 	ldr.w	r3, [r8]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d038      	beq.n	8007f8e <_malloc_r+0xf6>
 8007f1c:	685a      	ldr	r2, [r3, #4]
 8007f1e:	42a2      	cmp	r2, r4
 8007f20:	d12b      	bne.n	8007f7a <_malloc_r+0xe2>
 8007f22:	2200      	movs	r2, #0
 8007f24:	605a      	str	r2, [r3, #4]
 8007f26:	e00f      	b.n	8007f48 <_malloc_r+0xb0>
 8007f28:	6822      	ldr	r2, [r4, #0]
 8007f2a:	1b52      	subs	r2, r2, r5
 8007f2c:	d41f      	bmi.n	8007f6e <_malloc_r+0xd6>
 8007f2e:	2a0b      	cmp	r2, #11
 8007f30:	d917      	bls.n	8007f62 <_malloc_r+0xca>
 8007f32:	1961      	adds	r1, r4, r5
 8007f34:	42a3      	cmp	r3, r4
 8007f36:	6025      	str	r5, [r4, #0]
 8007f38:	bf18      	it	ne
 8007f3a:	6059      	strne	r1, [r3, #4]
 8007f3c:	6863      	ldr	r3, [r4, #4]
 8007f3e:	bf08      	it	eq
 8007f40:	f8c8 1000 	streq.w	r1, [r8]
 8007f44:	5162      	str	r2, [r4, r5]
 8007f46:	604b      	str	r3, [r1, #4]
 8007f48:	4638      	mov	r0, r7
 8007f4a:	f104 060b 	add.w	r6, r4, #11
 8007f4e:	f000 f829 	bl	8007fa4 <__malloc_unlock>
 8007f52:	f026 0607 	bic.w	r6, r6, #7
 8007f56:	1d23      	adds	r3, r4, #4
 8007f58:	1af2      	subs	r2, r6, r3
 8007f5a:	d0ae      	beq.n	8007eba <_malloc_r+0x22>
 8007f5c:	1b9b      	subs	r3, r3, r6
 8007f5e:	50a3      	str	r3, [r4, r2]
 8007f60:	e7ab      	b.n	8007eba <_malloc_r+0x22>
 8007f62:	42a3      	cmp	r3, r4
 8007f64:	6862      	ldr	r2, [r4, #4]
 8007f66:	d1dd      	bne.n	8007f24 <_malloc_r+0x8c>
 8007f68:	f8c8 2000 	str.w	r2, [r8]
 8007f6c:	e7ec      	b.n	8007f48 <_malloc_r+0xb0>
 8007f6e:	4623      	mov	r3, r4
 8007f70:	6864      	ldr	r4, [r4, #4]
 8007f72:	e7ac      	b.n	8007ece <_malloc_r+0x36>
 8007f74:	4634      	mov	r4, r6
 8007f76:	6876      	ldr	r6, [r6, #4]
 8007f78:	e7b4      	b.n	8007ee4 <_malloc_r+0x4c>
 8007f7a:	4613      	mov	r3, r2
 8007f7c:	e7cc      	b.n	8007f18 <_malloc_r+0x80>
 8007f7e:	230c      	movs	r3, #12
 8007f80:	603b      	str	r3, [r7, #0]
 8007f82:	4638      	mov	r0, r7
 8007f84:	f000 f80e 	bl	8007fa4 <__malloc_unlock>
 8007f88:	e797      	b.n	8007eba <_malloc_r+0x22>
 8007f8a:	6025      	str	r5, [r4, #0]
 8007f8c:	e7dc      	b.n	8007f48 <_malloc_r+0xb0>
 8007f8e:	605b      	str	r3, [r3, #4]
 8007f90:	deff      	udf	#255	; 0xff
 8007f92:	bf00      	nop
 8007f94:	200016e0 	.word	0x200016e0

08007f98 <__malloc_lock>:
 8007f98:	4801      	ldr	r0, [pc, #4]	; (8007fa0 <__malloc_lock+0x8>)
 8007f9a:	f000 ba9a 	b.w	80084d2 <__retarget_lock_acquire_recursive>
 8007f9e:	bf00      	nop
 8007fa0:	20001828 	.word	0x20001828

08007fa4 <__malloc_unlock>:
 8007fa4:	4801      	ldr	r0, [pc, #4]	; (8007fac <__malloc_unlock+0x8>)
 8007fa6:	f000 ba95 	b.w	80084d4 <__retarget_lock_release_recursive>
 8007faa:	bf00      	nop
 8007fac:	20001828 	.word	0x20001828

08007fb0 <std>:
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	b510      	push	{r4, lr}
 8007fb4:	4604      	mov	r4, r0
 8007fb6:	e9c0 3300 	strd	r3, r3, [r0]
 8007fba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007fbe:	6083      	str	r3, [r0, #8]
 8007fc0:	8181      	strh	r1, [r0, #12]
 8007fc2:	6643      	str	r3, [r0, #100]	; 0x64
 8007fc4:	81c2      	strh	r2, [r0, #14]
 8007fc6:	6183      	str	r3, [r0, #24]
 8007fc8:	4619      	mov	r1, r3
 8007fca:	2208      	movs	r2, #8
 8007fcc:	305c      	adds	r0, #92	; 0x5c
 8007fce:	f000 f9f7 	bl	80083c0 <memset>
 8007fd2:	4b0d      	ldr	r3, [pc, #52]	; (8008008 <std+0x58>)
 8007fd4:	6263      	str	r3, [r4, #36]	; 0x24
 8007fd6:	4b0d      	ldr	r3, [pc, #52]	; (800800c <std+0x5c>)
 8007fd8:	62a3      	str	r3, [r4, #40]	; 0x28
 8007fda:	4b0d      	ldr	r3, [pc, #52]	; (8008010 <std+0x60>)
 8007fdc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007fde:	4b0d      	ldr	r3, [pc, #52]	; (8008014 <std+0x64>)
 8007fe0:	6323      	str	r3, [r4, #48]	; 0x30
 8007fe2:	4b0d      	ldr	r3, [pc, #52]	; (8008018 <std+0x68>)
 8007fe4:	6224      	str	r4, [r4, #32]
 8007fe6:	429c      	cmp	r4, r3
 8007fe8:	d006      	beq.n	8007ff8 <std+0x48>
 8007fea:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007fee:	4294      	cmp	r4, r2
 8007ff0:	d002      	beq.n	8007ff8 <std+0x48>
 8007ff2:	33d0      	adds	r3, #208	; 0xd0
 8007ff4:	429c      	cmp	r4, r3
 8007ff6:	d105      	bne.n	8008004 <std+0x54>
 8007ff8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007ffc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008000:	f000 ba66 	b.w	80084d0 <__retarget_lock_init_recursive>
 8008004:	bd10      	pop	{r4, pc}
 8008006:	bf00      	nop
 8008008:	08008211 	.word	0x08008211
 800800c:	08008233 	.word	0x08008233
 8008010:	0800826b 	.word	0x0800826b
 8008014:	0800828f 	.word	0x0800828f
 8008018:	200016e8 	.word	0x200016e8

0800801c <stdio_exit_handler>:
 800801c:	4a02      	ldr	r2, [pc, #8]	; (8008028 <stdio_exit_handler+0xc>)
 800801e:	4903      	ldr	r1, [pc, #12]	; (800802c <stdio_exit_handler+0x10>)
 8008020:	4803      	ldr	r0, [pc, #12]	; (8008030 <stdio_exit_handler+0x14>)
 8008022:	f000 b869 	b.w	80080f8 <_fwalk_sglue>
 8008026:	bf00      	nop
 8008028:	20000f98 	.word	0x20000f98
 800802c:	08008c41 	.word	0x08008c41
 8008030:	20000fa4 	.word	0x20000fa4

08008034 <cleanup_stdio>:
 8008034:	6841      	ldr	r1, [r0, #4]
 8008036:	4b0c      	ldr	r3, [pc, #48]	; (8008068 <cleanup_stdio+0x34>)
 8008038:	4299      	cmp	r1, r3
 800803a:	b510      	push	{r4, lr}
 800803c:	4604      	mov	r4, r0
 800803e:	d001      	beq.n	8008044 <cleanup_stdio+0x10>
 8008040:	f000 fdfe 	bl	8008c40 <_fflush_r>
 8008044:	68a1      	ldr	r1, [r4, #8]
 8008046:	4b09      	ldr	r3, [pc, #36]	; (800806c <cleanup_stdio+0x38>)
 8008048:	4299      	cmp	r1, r3
 800804a:	d002      	beq.n	8008052 <cleanup_stdio+0x1e>
 800804c:	4620      	mov	r0, r4
 800804e:	f000 fdf7 	bl	8008c40 <_fflush_r>
 8008052:	68e1      	ldr	r1, [r4, #12]
 8008054:	4b06      	ldr	r3, [pc, #24]	; (8008070 <cleanup_stdio+0x3c>)
 8008056:	4299      	cmp	r1, r3
 8008058:	d004      	beq.n	8008064 <cleanup_stdio+0x30>
 800805a:	4620      	mov	r0, r4
 800805c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008060:	f000 bdee 	b.w	8008c40 <_fflush_r>
 8008064:	bd10      	pop	{r4, pc}
 8008066:	bf00      	nop
 8008068:	200016e8 	.word	0x200016e8
 800806c:	20001750 	.word	0x20001750
 8008070:	200017b8 	.word	0x200017b8

08008074 <global_stdio_init.part.0>:
 8008074:	b510      	push	{r4, lr}
 8008076:	4b0b      	ldr	r3, [pc, #44]	; (80080a4 <global_stdio_init.part.0+0x30>)
 8008078:	4c0b      	ldr	r4, [pc, #44]	; (80080a8 <global_stdio_init.part.0+0x34>)
 800807a:	4a0c      	ldr	r2, [pc, #48]	; (80080ac <global_stdio_init.part.0+0x38>)
 800807c:	601a      	str	r2, [r3, #0]
 800807e:	4620      	mov	r0, r4
 8008080:	2200      	movs	r2, #0
 8008082:	2104      	movs	r1, #4
 8008084:	f7ff ff94 	bl	8007fb0 <std>
 8008088:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800808c:	2201      	movs	r2, #1
 800808e:	2109      	movs	r1, #9
 8008090:	f7ff ff8e 	bl	8007fb0 <std>
 8008094:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008098:	2202      	movs	r2, #2
 800809a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800809e:	2112      	movs	r1, #18
 80080a0:	f7ff bf86 	b.w	8007fb0 <std>
 80080a4:	20001820 	.word	0x20001820
 80080a8:	200016e8 	.word	0x200016e8
 80080ac:	0800801d 	.word	0x0800801d

080080b0 <__sfp_lock_acquire>:
 80080b0:	4801      	ldr	r0, [pc, #4]	; (80080b8 <__sfp_lock_acquire+0x8>)
 80080b2:	f000 ba0e 	b.w	80084d2 <__retarget_lock_acquire_recursive>
 80080b6:	bf00      	nop
 80080b8:	20001829 	.word	0x20001829

080080bc <__sfp_lock_release>:
 80080bc:	4801      	ldr	r0, [pc, #4]	; (80080c4 <__sfp_lock_release+0x8>)
 80080be:	f000 ba09 	b.w	80084d4 <__retarget_lock_release_recursive>
 80080c2:	bf00      	nop
 80080c4:	20001829 	.word	0x20001829

080080c8 <__sinit>:
 80080c8:	b510      	push	{r4, lr}
 80080ca:	4604      	mov	r4, r0
 80080cc:	f7ff fff0 	bl	80080b0 <__sfp_lock_acquire>
 80080d0:	6a23      	ldr	r3, [r4, #32]
 80080d2:	b11b      	cbz	r3, 80080dc <__sinit+0x14>
 80080d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080d8:	f7ff bff0 	b.w	80080bc <__sfp_lock_release>
 80080dc:	4b04      	ldr	r3, [pc, #16]	; (80080f0 <__sinit+0x28>)
 80080de:	6223      	str	r3, [r4, #32]
 80080e0:	4b04      	ldr	r3, [pc, #16]	; (80080f4 <__sinit+0x2c>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d1f5      	bne.n	80080d4 <__sinit+0xc>
 80080e8:	f7ff ffc4 	bl	8008074 <global_stdio_init.part.0>
 80080ec:	e7f2      	b.n	80080d4 <__sinit+0xc>
 80080ee:	bf00      	nop
 80080f0:	08008035 	.word	0x08008035
 80080f4:	20001820 	.word	0x20001820

080080f8 <_fwalk_sglue>:
 80080f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080fc:	4607      	mov	r7, r0
 80080fe:	4688      	mov	r8, r1
 8008100:	4614      	mov	r4, r2
 8008102:	2600      	movs	r6, #0
 8008104:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008108:	f1b9 0901 	subs.w	r9, r9, #1
 800810c:	d505      	bpl.n	800811a <_fwalk_sglue+0x22>
 800810e:	6824      	ldr	r4, [r4, #0]
 8008110:	2c00      	cmp	r4, #0
 8008112:	d1f7      	bne.n	8008104 <_fwalk_sglue+0xc>
 8008114:	4630      	mov	r0, r6
 8008116:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800811a:	89ab      	ldrh	r3, [r5, #12]
 800811c:	2b01      	cmp	r3, #1
 800811e:	d907      	bls.n	8008130 <_fwalk_sglue+0x38>
 8008120:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008124:	3301      	adds	r3, #1
 8008126:	d003      	beq.n	8008130 <_fwalk_sglue+0x38>
 8008128:	4629      	mov	r1, r5
 800812a:	4638      	mov	r0, r7
 800812c:	47c0      	blx	r8
 800812e:	4306      	orrs	r6, r0
 8008130:	3568      	adds	r5, #104	; 0x68
 8008132:	e7e9      	b.n	8008108 <_fwalk_sglue+0x10>

08008134 <iprintf>:
 8008134:	b40f      	push	{r0, r1, r2, r3}
 8008136:	b507      	push	{r0, r1, r2, lr}
 8008138:	4906      	ldr	r1, [pc, #24]	; (8008154 <iprintf+0x20>)
 800813a:	ab04      	add	r3, sp, #16
 800813c:	6808      	ldr	r0, [r1, #0]
 800813e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008142:	6881      	ldr	r1, [r0, #8]
 8008144:	9301      	str	r3, [sp, #4]
 8008146:	f000 fa4b 	bl	80085e0 <_vfiprintf_r>
 800814a:	b003      	add	sp, #12
 800814c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008150:	b004      	add	sp, #16
 8008152:	4770      	bx	lr
 8008154:	20000ff0 	.word	0x20000ff0

08008158 <_puts_r>:
 8008158:	6a03      	ldr	r3, [r0, #32]
 800815a:	b570      	push	{r4, r5, r6, lr}
 800815c:	6884      	ldr	r4, [r0, #8]
 800815e:	4605      	mov	r5, r0
 8008160:	460e      	mov	r6, r1
 8008162:	b90b      	cbnz	r3, 8008168 <_puts_r+0x10>
 8008164:	f7ff ffb0 	bl	80080c8 <__sinit>
 8008168:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800816a:	07db      	lsls	r3, r3, #31
 800816c:	d405      	bmi.n	800817a <_puts_r+0x22>
 800816e:	89a3      	ldrh	r3, [r4, #12]
 8008170:	0598      	lsls	r0, r3, #22
 8008172:	d402      	bmi.n	800817a <_puts_r+0x22>
 8008174:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008176:	f000 f9ac 	bl	80084d2 <__retarget_lock_acquire_recursive>
 800817a:	89a3      	ldrh	r3, [r4, #12]
 800817c:	0719      	lsls	r1, r3, #28
 800817e:	d513      	bpl.n	80081a8 <_puts_r+0x50>
 8008180:	6923      	ldr	r3, [r4, #16]
 8008182:	b18b      	cbz	r3, 80081a8 <_puts_r+0x50>
 8008184:	3e01      	subs	r6, #1
 8008186:	68a3      	ldr	r3, [r4, #8]
 8008188:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800818c:	3b01      	subs	r3, #1
 800818e:	60a3      	str	r3, [r4, #8]
 8008190:	b9e9      	cbnz	r1, 80081ce <_puts_r+0x76>
 8008192:	2b00      	cmp	r3, #0
 8008194:	da2e      	bge.n	80081f4 <_puts_r+0x9c>
 8008196:	4622      	mov	r2, r4
 8008198:	210a      	movs	r1, #10
 800819a:	4628      	mov	r0, r5
 800819c:	f000 f87b 	bl	8008296 <__swbuf_r>
 80081a0:	3001      	adds	r0, #1
 80081a2:	d007      	beq.n	80081b4 <_puts_r+0x5c>
 80081a4:	250a      	movs	r5, #10
 80081a6:	e007      	b.n	80081b8 <_puts_r+0x60>
 80081a8:	4621      	mov	r1, r4
 80081aa:	4628      	mov	r0, r5
 80081ac:	f000 f8b0 	bl	8008310 <__swsetup_r>
 80081b0:	2800      	cmp	r0, #0
 80081b2:	d0e7      	beq.n	8008184 <_puts_r+0x2c>
 80081b4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80081b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80081ba:	07da      	lsls	r2, r3, #31
 80081bc:	d405      	bmi.n	80081ca <_puts_r+0x72>
 80081be:	89a3      	ldrh	r3, [r4, #12]
 80081c0:	059b      	lsls	r3, r3, #22
 80081c2:	d402      	bmi.n	80081ca <_puts_r+0x72>
 80081c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80081c6:	f000 f985 	bl	80084d4 <__retarget_lock_release_recursive>
 80081ca:	4628      	mov	r0, r5
 80081cc:	bd70      	pop	{r4, r5, r6, pc}
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	da04      	bge.n	80081dc <_puts_r+0x84>
 80081d2:	69a2      	ldr	r2, [r4, #24]
 80081d4:	429a      	cmp	r2, r3
 80081d6:	dc06      	bgt.n	80081e6 <_puts_r+0x8e>
 80081d8:	290a      	cmp	r1, #10
 80081da:	d004      	beq.n	80081e6 <_puts_r+0x8e>
 80081dc:	6823      	ldr	r3, [r4, #0]
 80081de:	1c5a      	adds	r2, r3, #1
 80081e0:	6022      	str	r2, [r4, #0]
 80081e2:	7019      	strb	r1, [r3, #0]
 80081e4:	e7cf      	b.n	8008186 <_puts_r+0x2e>
 80081e6:	4622      	mov	r2, r4
 80081e8:	4628      	mov	r0, r5
 80081ea:	f000 f854 	bl	8008296 <__swbuf_r>
 80081ee:	3001      	adds	r0, #1
 80081f0:	d1c9      	bne.n	8008186 <_puts_r+0x2e>
 80081f2:	e7df      	b.n	80081b4 <_puts_r+0x5c>
 80081f4:	6823      	ldr	r3, [r4, #0]
 80081f6:	250a      	movs	r5, #10
 80081f8:	1c5a      	adds	r2, r3, #1
 80081fa:	6022      	str	r2, [r4, #0]
 80081fc:	701d      	strb	r5, [r3, #0]
 80081fe:	e7db      	b.n	80081b8 <_puts_r+0x60>

08008200 <puts>:
 8008200:	4b02      	ldr	r3, [pc, #8]	; (800820c <puts+0xc>)
 8008202:	4601      	mov	r1, r0
 8008204:	6818      	ldr	r0, [r3, #0]
 8008206:	f7ff bfa7 	b.w	8008158 <_puts_r>
 800820a:	bf00      	nop
 800820c:	20000ff0 	.word	0x20000ff0

08008210 <__sread>:
 8008210:	b510      	push	{r4, lr}
 8008212:	460c      	mov	r4, r1
 8008214:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008218:	f000 f8fc 	bl	8008414 <_read_r>
 800821c:	2800      	cmp	r0, #0
 800821e:	bfab      	itete	ge
 8008220:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008222:	89a3      	ldrhlt	r3, [r4, #12]
 8008224:	181b      	addge	r3, r3, r0
 8008226:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800822a:	bfac      	ite	ge
 800822c:	6563      	strge	r3, [r4, #84]	; 0x54
 800822e:	81a3      	strhlt	r3, [r4, #12]
 8008230:	bd10      	pop	{r4, pc}

08008232 <__swrite>:
 8008232:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008236:	461f      	mov	r7, r3
 8008238:	898b      	ldrh	r3, [r1, #12]
 800823a:	05db      	lsls	r3, r3, #23
 800823c:	4605      	mov	r5, r0
 800823e:	460c      	mov	r4, r1
 8008240:	4616      	mov	r6, r2
 8008242:	d505      	bpl.n	8008250 <__swrite+0x1e>
 8008244:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008248:	2302      	movs	r3, #2
 800824a:	2200      	movs	r2, #0
 800824c:	f000 f8d0 	bl	80083f0 <_lseek_r>
 8008250:	89a3      	ldrh	r3, [r4, #12]
 8008252:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008256:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800825a:	81a3      	strh	r3, [r4, #12]
 800825c:	4632      	mov	r2, r6
 800825e:	463b      	mov	r3, r7
 8008260:	4628      	mov	r0, r5
 8008262:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008266:	f000 b8f7 	b.w	8008458 <_write_r>

0800826a <__sseek>:
 800826a:	b510      	push	{r4, lr}
 800826c:	460c      	mov	r4, r1
 800826e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008272:	f000 f8bd 	bl	80083f0 <_lseek_r>
 8008276:	1c43      	adds	r3, r0, #1
 8008278:	89a3      	ldrh	r3, [r4, #12]
 800827a:	bf15      	itete	ne
 800827c:	6560      	strne	r0, [r4, #84]	; 0x54
 800827e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008282:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008286:	81a3      	strheq	r3, [r4, #12]
 8008288:	bf18      	it	ne
 800828a:	81a3      	strhne	r3, [r4, #12]
 800828c:	bd10      	pop	{r4, pc}

0800828e <__sclose>:
 800828e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008292:	f000 b89d 	b.w	80083d0 <_close_r>

08008296 <__swbuf_r>:
 8008296:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008298:	460e      	mov	r6, r1
 800829a:	4614      	mov	r4, r2
 800829c:	4605      	mov	r5, r0
 800829e:	b118      	cbz	r0, 80082a8 <__swbuf_r+0x12>
 80082a0:	6a03      	ldr	r3, [r0, #32]
 80082a2:	b90b      	cbnz	r3, 80082a8 <__swbuf_r+0x12>
 80082a4:	f7ff ff10 	bl	80080c8 <__sinit>
 80082a8:	69a3      	ldr	r3, [r4, #24]
 80082aa:	60a3      	str	r3, [r4, #8]
 80082ac:	89a3      	ldrh	r3, [r4, #12]
 80082ae:	071a      	lsls	r2, r3, #28
 80082b0:	d525      	bpl.n	80082fe <__swbuf_r+0x68>
 80082b2:	6923      	ldr	r3, [r4, #16]
 80082b4:	b31b      	cbz	r3, 80082fe <__swbuf_r+0x68>
 80082b6:	6823      	ldr	r3, [r4, #0]
 80082b8:	6922      	ldr	r2, [r4, #16]
 80082ba:	1a98      	subs	r0, r3, r2
 80082bc:	6963      	ldr	r3, [r4, #20]
 80082be:	b2f6      	uxtb	r6, r6
 80082c0:	4283      	cmp	r3, r0
 80082c2:	4637      	mov	r7, r6
 80082c4:	dc04      	bgt.n	80082d0 <__swbuf_r+0x3a>
 80082c6:	4621      	mov	r1, r4
 80082c8:	4628      	mov	r0, r5
 80082ca:	f000 fcb9 	bl	8008c40 <_fflush_r>
 80082ce:	b9e0      	cbnz	r0, 800830a <__swbuf_r+0x74>
 80082d0:	68a3      	ldr	r3, [r4, #8]
 80082d2:	3b01      	subs	r3, #1
 80082d4:	60a3      	str	r3, [r4, #8]
 80082d6:	6823      	ldr	r3, [r4, #0]
 80082d8:	1c5a      	adds	r2, r3, #1
 80082da:	6022      	str	r2, [r4, #0]
 80082dc:	701e      	strb	r6, [r3, #0]
 80082de:	6962      	ldr	r2, [r4, #20]
 80082e0:	1c43      	adds	r3, r0, #1
 80082e2:	429a      	cmp	r2, r3
 80082e4:	d004      	beq.n	80082f0 <__swbuf_r+0x5a>
 80082e6:	89a3      	ldrh	r3, [r4, #12]
 80082e8:	07db      	lsls	r3, r3, #31
 80082ea:	d506      	bpl.n	80082fa <__swbuf_r+0x64>
 80082ec:	2e0a      	cmp	r6, #10
 80082ee:	d104      	bne.n	80082fa <__swbuf_r+0x64>
 80082f0:	4621      	mov	r1, r4
 80082f2:	4628      	mov	r0, r5
 80082f4:	f000 fca4 	bl	8008c40 <_fflush_r>
 80082f8:	b938      	cbnz	r0, 800830a <__swbuf_r+0x74>
 80082fa:	4638      	mov	r0, r7
 80082fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082fe:	4621      	mov	r1, r4
 8008300:	4628      	mov	r0, r5
 8008302:	f000 f805 	bl	8008310 <__swsetup_r>
 8008306:	2800      	cmp	r0, #0
 8008308:	d0d5      	beq.n	80082b6 <__swbuf_r+0x20>
 800830a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800830e:	e7f4      	b.n	80082fa <__swbuf_r+0x64>

08008310 <__swsetup_r>:
 8008310:	b538      	push	{r3, r4, r5, lr}
 8008312:	4b2a      	ldr	r3, [pc, #168]	; (80083bc <__swsetup_r+0xac>)
 8008314:	4605      	mov	r5, r0
 8008316:	6818      	ldr	r0, [r3, #0]
 8008318:	460c      	mov	r4, r1
 800831a:	b118      	cbz	r0, 8008324 <__swsetup_r+0x14>
 800831c:	6a03      	ldr	r3, [r0, #32]
 800831e:	b90b      	cbnz	r3, 8008324 <__swsetup_r+0x14>
 8008320:	f7ff fed2 	bl	80080c8 <__sinit>
 8008324:	89a3      	ldrh	r3, [r4, #12]
 8008326:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800832a:	0718      	lsls	r0, r3, #28
 800832c:	d422      	bmi.n	8008374 <__swsetup_r+0x64>
 800832e:	06d9      	lsls	r1, r3, #27
 8008330:	d407      	bmi.n	8008342 <__swsetup_r+0x32>
 8008332:	2309      	movs	r3, #9
 8008334:	602b      	str	r3, [r5, #0]
 8008336:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800833a:	81a3      	strh	r3, [r4, #12]
 800833c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008340:	e034      	b.n	80083ac <__swsetup_r+0x9c>
 8008342:	0758      	lsls	r0, r3, #29
 8008344:	d512      	bpl.n	800836c <__swsetup_r+0x5c>
 8008346:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008348:	b141      	cbz	r1, 800835c <__swsetup_r+0x4c>
 800834a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800834e:	4299      	cmp	r1, r3
 8008350:	d002      	beq.n	8008358 <__swsetup_r+0x48>
 8008352:	4628      	mov	r0, r5
 8008354:	f000 f8ce 	bl	80084f4 <_free_r>
 8008358:	2300      	movs	r3, #0
 800835a:	6363      	str	r3, [r4, #52]	; 0x34
 800835c:	89a3      	ldrh	r3, [r4, #12]
 800835e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008362:	81a3      	strh	r3, [r4, #12]
 8008364:	2300      	movs	r3, #0
 8008366:	6063      	str	r3, [r4, #4]
 8008368:	6923      	ldr	r3, [r4, #16]
 800836a:	6023      	str	r3, [r4, #0]
 800836c:	89a3      	ldrh	r3, [r4, #12]
 800836e:	f043 0308 	orr.w	r3, r3, #8
 8008372:	81a3      	strh	r3, [r4, #12]
 8008374:	6923      	ldr	r3, [r4, #16]
 8008376:	b94b      	cbnz	r3, 800838c <__swsetup_r+0x7c>
 8008378:	89a3      	ldrh	r3, [r4, #12]
 800837a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800837e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008382:	d003      	beq.n	800838c <__swsetup_r+0x7c>
 8008384:	4621      	mov	r1, r4
 8008386:	4628      	mov	r0, r5
 8008388:	f000 fca8 	bl	8008cdc <__smakebuf_r>
 800838c:	89a0      	ldrh	r0, [r4, #12]
 800838e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008392:	f010 0301 	ands.w	r3, r0, #1
 8008396:	d00a      	beq.n	80083ae <__swsetup_r+0x9e>
 8008398:	2300      	movs	r3, #0
 800839a:	60a3      	str	r3, [r4, #8]
 800839c:	6963      	ldr	r3, [r4, #20]
 800839e:	425b      	negs	r3, r3
 80083a0:	61a3      	str	r3, [r4, #24]
 80083a2:	6923      	ldr	r3, [r4, #16]
 80083a4:	b943      	cbnz	r3, 80083b8 <__swsetup_r+0xa8>
 80083a6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80083aa:	d1c4      	bne.n	8008336 <__swsetup_r+0x26>
 80083ac:	bd38      	pop	{r3, r4, r5, pc}
 80083ae:	0781      	lsls	r1, r0, #30
 80083b0:	bf58      	it	pl
 80083b2:	6963      	ldrpl	r3, [r4, #20]
 80083b4:	60a3      	str	r3, [r4, #8]
 80083b6:	e7f4      	b.n	80083a2 <__swsetup_r+0x92>
 80083b8:	2000      	movs	r0, #0
 80083ba:	e7f7      	b.n	80083ac <__swsetup_r+0x9c>
 80083bc:	20000ff0 	.word	0x20000ff0

080083c0 <memset>:
 80083c0:	4402      	add	r2, r0
 80083c2:	4603      	mov	r3, r0
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d100      	bne.n	80083ca <memset+0xa>
 80083c8:	4770      	bx	lr
 80083ca:	f803 1b01 	strb.w	r1, [r3], #1
 80083ce:	e7f9      	b.n	80083c4 <memset+0x4>

080083d0 <_close_r>:
 80083d0:	b538      	push	{r3, r4, r5, lr}
 80083d2:	4d06      	ldr	r5, [pc, #24]	; (80083ec <_close_r+0x1c>)
 80083d4:	2300      	movs	r3, #0
 80083d6:	4604      	mov	r4, r0
 80083d8:	4608      	mov	r0, r1
 80083da:	602b      	str	r3, [r5, #0]
 80083dc:	f000 fe10 	bl	8009000 <_close>
 80083e0:	1c43      	adds	r3, r0, #1
 80083e2:	d102      	bne.n	80083ea <_close_r+0x1a>
 80083e4:	682b      	ldr	r3, [r5, #0]
 80083e6:	b103      	cbz	r3, 80083ea <_close_r+0x1a>
 80083e8:	6023      	str	r3, [r4, #0]
 80083ea:	bd38      	pop	{r3, r4, r5, pc}
 80083ec:	20001824 	.word	0x20001824

080083f0 <_lseek_r>:
 80083f0:	b538      	push	{r3, r4, r5, lr}
 80083f2:	4d07      	ldr	r5, [pc, #28]	; (8008410 <_lseek_r+0x20>)
 80083f4:	4604      	mov	r4, r0
 80083f6:	4608      	mov	r0, r1
 80083f8:	4611      	mov	r1, r2
 80083fa:	2200      	movs	r2, #0
 80083fc:	602a      	str	r2, [r5, #0]
 80083fe:	461a      	mov	r2, r3
 8008400:	f000 fe16 	bl	8009030 <_lseek>
 8008404:	1c43      	adds	r3, r0, #1
 8008406:	d102      	bne.n	800840e <_lseek_r+0x1e>
 8008408:	682b      	ldr	r3, [r5, #0]
 800840a:	b103      	cbz	r3, 800840e <_lseek_r+0x1e>
 800840c:	6023      	str	r3, [r4, #0]
 800840e:	bd38      	pop	{r3, r4, r5, pc}
 8008410:	20001824 	.word	0x20001824

08008414 <_read_r>:
 8008414:	b538      	push	{r3, r4, r5, lr}
 8008416:	4d07      	ldr	r5, [pc, #28]	; (8008434 <_read_r+0x20>)
 8008418:	4604      	mov	r4, r0
 800841a:	4608      	mov	r0, r1
 800841c:	4611      	mov	r1, r2
 800841e:	2200      	movs	r2, #0
 8008420:	602a      	str	r2, [r5, #0]
 8008422:	461a      	mov	r2, r3
 8008424:	f000 fe0c 	bl	8009040 <_read>
 8008428:	1c43      	adds	r3, r0, #1
 800842a:	d102      	bne.n	8008432 <_read_r+0x1e>
 800842c:	682b      	ldr	r3, [r5, #0]
 800842e:	b103      	cbz	r3, 8008432 <_read_r+0x1e>
 8008430:	6023      	str	r3, [r4, #0]
 8008432:	bd38      	pop	{r3, r4, r5, pc}
 8008434:	20001824 	.word	0x20001824

08008438 <_sbrk_r>:
 8008438:	b538      	push	{r3, r4, r5, lr}
 800843a:	4d06      	ldr	r5, [pc, #24]	; (8008454 <_sbrk_r+0x1c>)
 800843c:	2300      	movs	r3, #0
 800843e:	4604      	mov	r4, r0
 8008440:	4608      	mov	r0, r1
 8008442:	602b      	str	r3, [r5, #0]
 8008444:	f7f8 fa72 	bl	800092c <_sbrk>
 8008448:	1c43      	adds	r3, r0, #1
 800844a:	d102      	bne.n	8008452 <_sbrk_r+0x1a>
 800844c:	682b      	ldr	r3, [r5, #0]
 800844e:	b103      	cbz	r3, 8008452 <_sbrk_r+0x1a>
 8008450:	6023      	str	r3, [r4, #0]
 8008452:	bd38      	pop	{r3, r4, r5, pc}
 8008454:	20001824 	.word	0x20001824

08008458 <_write_r>:
 8008458:	b538      	push	{r3, r4, r5, lr}
 800845a:	4d07      	ldr	r5, [pc, #28]	; (8008478 <_write_r+0x20>)
 800845c:	4604      	mov	r4, r0
 800845e:	4608      	mov	r0, r1
 8008460:	4611      	mov	r1, r2
 8008462:	2200      	movs	r2, #0
 8008464:	602a      	str	r2, [r5, #0]
 8008466:	461a      	mov	r2, r3
 8008468:	f000 fdf2 	bl	8009050 <_write>
 800846c:	1c43      	adds	r3, r0, #1
 800846e:	d102      	bne.n	8008476 <_write_r+0x1e>
 8008470:	682b      	ldr	r3, [r5, #0]
 8008472:	b103      	cbz	r3, 8008476 <_write_r+0x1e>
 8008474:	6023      	str	r3, [r4, #0]
 8008476:	bd38      	pop	{r3, r4, r5, pc}
 8008478:	20001824 	.word	0x20001824

0800847c <__errno>:
 800847c:	4b01      	ldr	r3, [pc, #4]	; (8008484 <__errno+0x8>)
 800847e:	6818      	ldr	r0, [r3, #0]
 8008480:	4770      	bx	lr
 8008482:	bf00      	nop
 8008484:	20000ff0 	.word	0x20000ff0

08008488 <__libc_init_array>:
 8008488:	b570      	push	{r4, r5, r6, lr}
 800848a:	4d0d      	ldr	r5, [pc, #52]	; (80084c0 <__libc_init_array+0x38>)
 800848c:	4c0d      	ldr	r4, [pc, #52]	; (80084c4 <__libc_init_array+0x3c>)
 800848e:	1b64      	subs	r4, r4, r5
 8008490:	10a4      	asrs	r4, r4, #2
 8008492:	2600      	movs	r6, #0
 8008494:	42a6      	cmp	r6, r4
 8008496:	d109      	bne.n	80084ac <__libc_init_array+0x24>
 8008498:	4d0b      	ldr	r5, [pc, #44]	; (80084c8 <__libc_init_array+0x40>)
 800849a:	4c0c      	ldr	r4, [pc, #48]	; (80084cc <__libc_init_array+0x44>)
 800849c:	f000 fde0 	bl	8009060 <_init>
 80084a0:	1b64      	subs	r4, r4, r5
 80084a2:	10a4      	asrs	r4, r4, #2
 80084a4:	2600      	movs	r6, #0
 80084a6:	42a6      	cmp	r6, r4
 80084a8:	d105      	bne.n	80084b6 <__libc_init_array+0x2e>
 80084aa:	bd70      	pop	{r4, r5, r6, pc}
 80084ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80084b0:	4798      	blx	r3
 80084b2:	3601      	adds	r6, #1
 80084b4:	e7ee      	b.n	8008494 <__libc_init_array+0xc>
 80084b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80084ba:	4798      	blx	r3
 80084bc:	3601      	adds	r6, #1
 80084be:	e7f2      	b.n	80084a6 <__libc_init_array+0x1e>
 80084c0:	0800cebc 	.word	0x0800cebc
 80084c4:	0800cebc 	.word	0x0800cebc
 80084c8:	0800cebc 	.word	0x0800cebc
 80084cc:	0800cec0 	.word	0x0800cec0

080084d0 <__retarget_lock_init_recursive>:
 80084d0:	4770      	bx	lr

080084d2 <__retarget_lock_acquire_recursive>:
 80084d2:	4770      	bx	lr

080084d4 <__retarget_lock_release_recursive>:
 80084d4:	4770      	bx	lr

080084d6 <memcpy>:
 80084d6:	440a      	add	r2, r1
 80084d8:	4291      	cmp	r1, r2
 80084da:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80084de:	d100      	bne.n	80084e2 <memcpy+0xc>
 80084e0:	4770      	bx	lr
 80084e2:	b510      	push	{r4, lr}
 80084e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084ec:	4291      	cmp	r1, r2
 80084ee:	d1f9      	bne.n	80084e4 <memcpy+0xe>
 80084f0:	bd10      	pop	{r4, pc}
	...

080084f4 <_free_r>:
 80084f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80084f6:	2900      	cmp	r1, #0
 80084f8:	d044      	beq.n	8008584 <_free_r+0x90>
 80084fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084fe:	9001      	str	r0, [sp, #4]
 8008500:	2b00      	cmp	r3, #0
 8008502:	f1a1 0404 	sub.w	r4, r1, #4
 8008506:	bfb8      	it	lt
 8008508:	18e4      	addlt	r4, r4, r3
 800850a:	f7ff fd45 	bl	8007f98 <__malloc_lock>
 800850e:	4a1e      	ldr	r2, [pc, #120]	; (8008588 <_free_r+0x94>)
 8008510:	9801      	ldr	r0, [sp, #4]
 8008512:	6813      	ldr	r3, [r2, #0]
 8008514:	b933      	cbnz	r3, 8008524 <_free_r+0x30>
 8008516:	6063      	str	r3, [r4, #4]
 8008518:	6014      	str	r4, [r2, #0]
 800851a:	b003      	add	sp, #12
 800851c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008520:	f7ff bd40 	b.w	8007fa4 <__malloc_unlock>
 8008524:	42a3      	cmp	r3, r4
 8008526:	d908      	bls.n	800853a <_free_r+0x46>
 8008528:	6825      	ldr	r5, [r4, #0]
 800852a:	1961      	adds	r1, r4, r5
 800852c:	428b      	cmp	r3, r1
 800852e:	bf01      	itttt	eq
 8008530:	6819      	ldreq	r1, [r3, #0]
 8008532:	685b      	ldreq	r3, [r3, #4]
 8008534:	1949      	addeq	r1, r1, r5
 8008536:	6021      	streq	r1, [r4, #0]
 8008538:	e7ed      	b.n	8008516 <_free_r+0x22>
 800853a:	461a      	mov	r2, r3
 800853c:	685b      	ldr	r3, [r3, #4]
 800853e:	b10b      	cbz	r3, 8008544 <_free_r+0x50>
 8008540:	42a3      	cmp	r3, r4
 8008542:	d9fa      	bls.n	800853a <_free_r+0x46>
 8008544:	6811      	ldr	r1, [r2, #0]
 8008546:	1855      	adds	r5, r2, r1
 8008548:	42a5      	cmp	r5, r4
 800854a:	d10b      	bne.n	8008564 <_free_r+0x70>
 800854c:	6824      	ldr	r4, [r4, #0]
 800854e:	4421      	add	r1, r4
 8008550:	1854      	adds	r4, r2, r1
 8008552:	42a3      	cmp	r3, r4
 8008554:	6011      	str	r1, [r2, #0]
 8008556:	d1e0      	bne.n	800851a <_free_r+0x26>
 8008558:	681c      	ldr	r4, [r3, #0]
 800855a:	685b      	ldr	r3, [r3, #4]
 800855c:	6053      	str	r3, [r2, #4]
 800855e:	440c      	add	r4, r1
 8008560:	6014      	str	r4, [r2, #0]
 8008562:	e7da      	b.n	800851a <_free_r+0x26>
 8008564:	d902      	bls.n	800856c <_free_r+0x78>
 8008566:	230c      	movs	r3, #12
 8008568:	6003      	str	r3, [r0, #0]
 800856a:	e7d6      	b.n	800851a <_free_r+0x26>
 800856c:	6825      	ldr	r5, [r4, #0]
 800856e:	1961      	adds	r1, r4, r5
 8008570:	428b      	cmp	r3, r1
 8008572:	bf04      	itt	eq
 8008574:	6819      	ldreq	r1, [r3, #0]
 8008576:	685b      	ldreq	r3, [r3, #4]
 8008578:	6063      	str	r3, [r4, #4]
 800857a:	bf04      	itt	eq
 800857c:	1949      	addeq	r1, r1, r5
 800857e:	6021      	streq	r1, [r4, #0]
 8008580:	6054      	str	r4, [r2, #4]
 8008582:	e7ca      	b.n	800851a <_free_r+0x26>
 8008584:	b003      	add	sp, #12
 8008586:	bd30      	pop	{r4, r5, pc}
 8008588:	200016e0 	.word	0x200016e0

0800858c <__sfputc_r>:
 800858c:	6893      	ldr	r3, [r2, #8]
 800858e:	3b01      	subs	r3, #1
 8008590:	2b00      	cmp	r3, #0
 8008592:	b410      	push	{r4}
 8008594:	6093      	str	r3, [r2, #8]
 8008596:	da08      	bge.n	80085aa <__sfputc_r+0x1e>
 8008598:	6994      	ldr	r4, [r2, #24]
 800859a:	42a3      	cmp	r3, r4
 800859c:	db01      	blt.n	80085a2 <__sfputc_r+0x16>
 800859e:	290a      	cmp	r1, #10
 80085a0:	d103      	bne.n	80085aa <__sfputc_r+0x1e>
 80085a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80085a6:	f7ff be76 	b.w	8008296 <__swbuf_r>
 80085aa:	6813      	ldr	r3, [r2, #0]
 80085ac:	1c58      	adds	r0, r3, #1
 80085ae:	6010      	str	r0, [r2, #0]
 80085b0:	7019      	strb	r1, [r3, #0]
 80085b2:	4608      	mov	r0, r1
 80085b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80085b8:	4770      	bx	lr

080085ba <__sfputs_r>:
 80085ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085bc:	4606      	mov	r6, r0
 80085be:	460f      	mov	r7, r1
 80085c0:	4614      	mov	r4, r2
 80085c2:	18d5      	adds	r5, r2, r3
 80085c4:	42ac      	cmp	r4, r5
 80085c6:	d101      	bne.n	80085cc <__sfputs_r+0x12>
 80085c8:	2000      	movs	r0, #0
 80085ca:	e007      	b.n	80085dc <__sfputs_r+0x22>
 80085cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085d0:	463a      	mov	r2, r7
 80085d2:	4630      	mov	r0, r6
 80085d4:	f7ff ffda 	bl	800858c <__sfputc_r>
 80085d8:	1c43      	adds	r3, r0, #1
 80085da:	d1f3      	bne.n	80085c4 <__sfputs_r+0xa>
 80085dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080085e0 <_vfiprintf_r>:
 80085e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085e4:	460d      	mov	r5, r1
 80085e6:	b09d      	sub	sp, #116	; 0x74
 80085e8:	4614      	mov	r4, r2
 80085ea:	4698      	mov	r8, r3
 80085ec:	4606      	mov	r6, r0
 80085ee:	b118      	cbz	r0, 80085f8 <_vfiprintf_r+0x18>
 80085f0:	6a03      	ldr	r3, [r0, #32]
 80085f2:	b90b      	cbnz	r3, 80085f8 <_vfiprintf_r+0x18>
 80085f4:	f7ff fd68 	bl	80080c8 <__sinit>
 80085f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80085fa:	07d9      	lsls	r1, r3, #31
 80085fc:	d405      	bmi.n	800860a <_vfiprintf_r+0x2a>
 80085fe:	89ab      	ldrh	r3, [r5, #12]
 8008600:	059a      	lsls	r2, r3, #22
 8008602:	d402      	bmi.n	800860a <_vfiprintf_r+0x2a>
 8008604:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008606:	f7ff ff64 	bl	80084d2 <__retarget_lock_acquire_recursive>
 800860a:	89ab      	ldrh	r3, [r5, #12]
 800860c:	071b      	lsls	r3, r3, #28
 800860e:	d501      	bpl.n	8008614 <_vfiprintf_r+0x34>
 8008610:	692b      	ldr	r3, [r5, #16]
 8008612:	b99b      	cbnz	r3, 800863c <_vfiprintf_r+0x5c>
 8008614:	4629      	mov	r1, r5
 8008616:	4630      	mov	r0, r6
 8008618:	f7ff fe7a 	bl	8008310 <__swsetup_r>
 800861c:	b170      	cbz	r0, 800863c <_vfiprintf_r+0x5c>
 800861e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008620:	07dc      	lsls	r4, r3, #31
 8008622:	d504      	bpl.n	800862e <_vfiprintf_r+0x4e>
 8008624:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008628:	b01d      	add	sp, #116	; 0x74
 800862a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800862e:	89ab      	ldrh	r3, [r5, #12]
 8008630:	0598      	lsls	r0, r3, #22
 8008632:	d4f7      	bmi.n	8008624 <_vfiprintf_r+0x44>
 8008634:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008636:	f7ff ff4d 	bl	80084d4 <__retarget_lock_release_recursive>
 800863a:	e7f3      	b.n	8008624 <_vfiprintf_r+0x44>
 800863c:	2300      	movs	r3, #0
 800863e:	9309      	str	r3, [sp, #36]	; 0x24
 8008640:	2320      	movs	r3, #32
 8008642:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008646:	f8cd 800c 	str.w	r8, [sp, #12]
 800864a:	2330      	movs	r3, #48	; 0x30
 800864c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008800 <_vfiprintf_r+0x220>
 8008650:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008654:	f04f 0901 	mov.w	r9, #1
 8008658:	4623      	mov	r3, r4
 800865a:	469a      	mov	sl, r3
 800865c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008660:	b10a      	cbz	r2, 8008666 <_vfiprintf_r+0x86>
 8008662:	2a25      	cmp	r2, #37	; 0x25
 8008664:	d1f9      	bne.n	800865a <_vfiprintf_r+0x7a>
 8008666:	ebba 0b04 	subs.w	fp, sl, r4
 800866a:	d00b      	beq.n	8008684 <_vfiprintf_r+0xa4>
 800866c:	465b      	mov	r3, fp
 800866e:	4622      	mov	r2, r4
 8008670:	4629      	mov	r1, r5
 8008672:	4630      	mov	r0, r6
 8008674:	f7ff ffa1 	bl	80085ba <__sfputs_r>
 8008678:	3001      	adds	r0, #1
 800867a:	f000 80a9 	beq.w	80087d0 <_vfiprintf_r+0x1f0>
 800867e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008680:	445a      	add	r2, fp
 8008682:	9209      	str	r2, [sp, #36]	; 0x24
 8008684:	f89a 3000 	ldrb.w	r3, [sl]
 8008688:	2b00      	cmp	r3, #0
 800868a:	f000 80a1 	beq.w	80087d0 <_vfiprintf_r+0x1f0>
 800868e:	2300      	movs	r3, #0
 8008690:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008694:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008698:	f10a 0a01 	add.w	sl, sl, #1
 800869c:	9304      	str	r3, [sp, #16]
 800869e:	9307      	str	r3, [sp, #28]
 80086a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80086a4:	931a      	str	r3, [sp, #104]	; 0x68
 80086a6:	4654      	mov	r4, sl
 80086a8:	2205      	movs	r2, #5
 80086aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086ae:	4854      	ldr	r0, [pc, #336]	; (8008800 <_vfiprintf_r+0x220>)
 80086b0:	f7f7 fdb6 	bl	8000220 <memchr>
 80086b4:	9a04      	ldr	r2, [sp, #16]
 80086b6:	b9d8      	cbnz	r0, 80086f0 <_vfiprintf_r+0x110>
 80086b8:	06d1      	lsls	r1, r2, #27
 80086ba:	bf44      	itt	mi
 80086bc:	2320      	movmi	r3, #32
 80086be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086c2:	0713      	lsls	r3, r2, #28
 80086c4:	bf44      	itt	mi
 80086c6:	232b      	movmi	r3, #43	; 0x2b
 80086c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086cc:	f89a 3000 	ldrb.w	r3, [sl]
 80086d0:	2b2a      	cmp	r3, #42	; 0x2a
 80086d2:	d015      	beq.n	8008700 <_vfiprintf_r+0x120>
 80086d4:	9a07      	ldr	r2, [sp, #28]
 80086d6:	4654      	mov	r4, sl
 80086d8:	2000      	movs	r0, #0
 80086da:	f04f 0c0a 	mov.w	ip, #10
 80086de:	4621      	mov	r1, r4
 80086e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80086e4:	3b30      	subs	r3, #48	; 0x30
 80086e6:	2b09      	cmp	r3, #9
 80086e8:	d94d      	bls.n	8008786 <_vfiprintf_r+0x1a6>
 80086ea:	b1b0      	cbz	r0, 800871a <_vfiprintf_r+0x13a>
 80086ec:	9207      	str	r2, [sp, #28]
 80086ee:	e014      	b.n	800871a <_vfiprintf_r+0x13a>
 80086f0:	eba0 0308 	sub.w	r3, r0, r8
 80086f4:	fa09 f303 	lsl.w	r3, r9, r3
 80086f8:	4313      	orrs	r3, r2
 80086fa:	9304      	str	r3, [sp, #16]
 80086fc:	46a2      	mov	sl, r4
 80086fe:	e7d2      	b.n	80086a6 <_vfiprintf_r+0xc6>
 8008700:	9b03      	ldr	r3, [sp, #12]
 8008702:	1d19      	adds	r1, r3, #4
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	9103      	str	r1, [sp, #12]
 8008708:	2b00      	cmp	r3, #0
 800870a:	bfbb      	ittet	lt
 800870c:	425b      	neglt	r3, r3
 800870e:	f042 0202 	orrlt.w	r2, r2, #2
 8008712:	9307      	strge	r3, [sp, #28]
 8008714:	9307      	strlt	r3, [sp, #28]
 8008716:	bfb8      	it	lt
 8008718:	9204      	strlt	r2, [sp, #16]
 800871a:	7823      	ldrb	r3, [r4, #0]
 800871c:	2b2e      	cmp	r3, #46	; 0x2e
 800871e:	d10c      	bne.n	800873a <_vfiprintf_r+0x15a>
 8008720:	7863      	ldrb	r3, [r4, #1]
 8008722:	2b2a      	cmp	r3, #42	; 0x2a
 8008724:	d134      	bne.n	8008790 <_vfiprintf_r+0x1b0>
 8008726:	9b03      	ldr	r3, [sp, #12]
 8008728:	1d1a      	adds	r2, r3, #4
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	9203      	str	r2, [sp, #12]
 800872e:	2b00      	cmp	r3, #0
 8008730:	bfb8      	it	lt
 8008732:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008736:	3402      	adds	r4, #2
 8008738:	9305      	str	r3, [sp, #20]
 800873a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008810 <_vfiprintf_r+0x230>
 800873e:	7821      	ldrb	r1, [r4, #0]
 8008740:	2203      	movs	r2, #3
 8008742:	4650      	mov	r0, sl
 8008744:	f7f7 fd6c 	bl	8000220 <memchr>
 8008748:	b138      	cbz	r0, 800875a <_vfiprintf_r+0x17a>
 800874a:	9b04      	ldr	r3, [sp, #16]
 800874c:	eba0 000a 	sub.w	r0, r0, sl
 8008750:	2240      	movs	r2, #64	; 0x40
 8008752:	4082      	lsls	r2, r0
 8008754:	4313      	orrs	r3, r2
 8008756:	3401      	adds	r4, #1
 8008758:	9304      	str	r3, [sp, #16]
 800875a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800875e:	4829      	ldr	r0, [pc, #164]	; (8008804 <_vfiprintf_r+0x224>)
 8008760:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008764:	2206      	movs	r2, #6
 8008766:	f7f7 fd5b 	bl	8000220 <memchr>
 800876a:	2800      	cmp	r0, #0
 800876c:	d03f      	beq.n	80087ee <_vfiprintf_r+0x20e>
 800876e:	4b26      	ldr	r3, [pc, #152]	; (8008808 <_vfiprintf_r+0x228>)
 8008770:	bb1b      	cbnz	r3, 80087ba <_vfiprintf_r+0x1da>
 8008772:	9b03      	ldr	r3, [sp, #12]
 8008774:	3307      	adds	r3, #7
 8008776:	f023 0307 	bic.w	r3, r3, #7
 800877a:	3308      	adds	r3, #8
 800877c:	9303      	str	r3, [sp, #12]
 800877e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008780:	443b      	add	r3, r7
 8008782:	9309      	str	r3, [sp, #36]	; 0x24
 8008784:	e768      	b.n	8008658 <_vfiprintf_r+0x78>
 8008786:	fb0c 3202 	mla	r2, ip, r2, r3
 800878a:	460c      	mov	r4, r1
 800878c:	2001      	movs	r0, #1
 800878e:	e7a6      	b.n	80086de <_vfiprintf_r+0xfe>
 8008790:	2300      	movs	r3, #0
 8008792:	3401      	adds	r4, #1
 8008794:	9305      	str	r3, [sp, #20]
 8008796:	4619      	mov	r1, r3
 8008798:	f04f 0c0a 	mov.w	ip, #10
 800879c:	4620      	mov	r0, r4
 800879e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80087a2:	3a30      	subs	r2, #48	; 0x30
 80087a4:	2a09      	cmp	r2, #9
 80087a6:	d903      	bls.n	80087b0 <_vfiprintf_r+0x1d0>
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d0c6      	beq.n	800873a <_vfiprintf_r+0x15a>
 80087ac:	9105      	str	r1, [sp, #20]
 80087ae:	e7c4      	b.n	800873a <_vfiprintf_r+0x15a>
 80087b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80087b4:	4604      	mov	r4, r0
 80087b6:	2301      	movs	r3, #1
 80087b8:	e7f0      	b.n	800879c <_vfiprintf_r+0x1bc>
 80087ba:	ab03      	add	r3, sp, #12
 80087bc:	9300      	str	r3, [sp, #0]
 80087be:	462a      	mov	r2, r5
 80087c0:	4b12      	ldr	r3, [pc, #72]	; (800880c <_vfiprintf_r+0x22c>)
 80087c2:	a904      	add	r1, sp, #16
 80087c4:	4630      	mov	r0, r6
 80087c6:	f3af 8000 	nop.w
 80087ca:	4607      	mov	r7, r0
 80087cc:	1c78      	adds	r0, r7, #1
 80087ce:	d1d6      	bne.n	800877e <_vfiprintf_r+0x19e>
 80087d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80087d2:	07d9      	lsls	r1, r3, #31
 80087d4:	d405      	bmi.n	80087e2 <_vfiprintf_r+0x202>
 80087d6:	89ab      	ldrh	r3, [r5, #12]
 80087d8:	059a      	lsls	r2, r3, #22
 80087da:	d402      	bmi.n	80087e2 <_vfiprintf_r+0x202>
 80087dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087de:	f7ff fe79 	bl	80084d4 <__retarget_lock_release_recursive>
 80087e2:	89ab      	ldrh	r3, [r5, #12]
 80087e4:	065b      	lsls	r3, r3, #25
 80087e6:	f53f af1d 	bmi.w	8008624 <_vfiprintf_r+0x44>
 80087ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 80087ec:	e71c      	b.n	8008628 <_vfiprintf_r+0x48>
 80087ee:	ab03      	add	r3, sp, #12
 80087f0:	9300      	str	r3, [sp, #0]
 80087f2:	462a      	mov	r2, r5
 80087f4:	4b05      	ldr	r3, [pc, #20]	; (800880c <_vfiprintf_r+0x22c>)
 80087f6:	a904      	add	r1, sp, #16
 80087f8:	4630      	mov	r0, r6
 80087fa:	f000 f879 	bl	80088f0 <_printf_i>
 80087fe:	e7e4      	b.n	80087ca <_vfiprintf_r+0x1ea>
 8008800:	0800ce68 	.word	0x0800ce68
 8008804:	0800ce72 	.word	0x0800ce72
 8008808:	00000000 	.word	0x00000000
 800880c:	080085bb 	.word	0x080085bb
 8008810:	0800ce6e 	.word	0x0800ce6e

08008814 <_printf_common>:
 8008814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008818:	4616      	mov	r6, r2
 800881a:	4699      	mov	r9, r3
 800881c:	688a      	ldr	r2, [r1, #8]
 800881e:	690b      	ldr	r3, [r1, #16]
 8008820:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008824:	4293      	cmp	r3, r2
 8008826:	bfb8      	it	lt
 8008828:	4613      	movlt	r3, r2
 800882a:	6033      	str	r3, [r6, #0]
 800882c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008830:	4607      	mov	r7, r0
 8008832:	460c      	mov	r4, r1
 8008834:	b10a      	cbz	r2, 800883a <_printf_common+0x26>
 8008836:	3301      	adds	r3, #1
 8008838:	6033      	str	r3, [r6, #0]
 800883a:	6823      	ldr	r3, [r4, #0]
 800883c:	0699      	lsls	r1, r3, #26
 800883e:	bf42      	ittt	mi
 8008840:	6833      	ldrmi	r3, [r6, #0]
 8008842:	3302      	addmi	r3, #2
 8008844:	6033      	strmi	r3, [r6, #0]
 8008846:	6825      	ldr	r5, [r4, #0]
 8008848:	f015 0506 	ands.w	r5, r5, #6
 800884c:	d106      	bne.n	800885c <_printf_common+0x48>
 800884e:	f104 0a19 	add.w	sl, r4, #25
 8008852:	68e3      	ldr	r3, [r4, #12]
 8008854:	6832      	ldr	r2, [r6, #0]
 8008856:	1a9b      	subs	r3, r3, r2
 8008858:	42ab      	cmp	r3, r5
 800885a:	dc26      	bgt.n	80088aa <_printf_common+0x96>
 800885c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008860:	1e13      	subs	r3, r2, #0
 8008862:	6822      	ldr	r2, [r4, #0]
 8008864:	bf18      	it	ne
 8008866:	2301      	movne	r3, #1
 8008868:	0692      	lsls	r2, r2, #26
 800886a:	d42b      	bmi.n	80088c4 <_printf_common+0xb0>
 800886c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008870:	4649      	mov	r1, r9
 8008872:	4638      	mov	r0, r7
 8008874:	47c0      	blx	r8
 8008876:	3001      	adds	r0, #1
 8008878:	d01e      	beq.n	80088b8 <_printf_common+0xa4>
 800887a:	6823      	ldr	r3, [r4, #0]
 800887c:	6922      	ldr	r2, [r4, #16]
 800887e:	f003 0306 	and.w	r3, r3, #6
 8008882:	2b04      	cmp	r3, #4
 8008884:	bf02      	ittt	eq
 8008886:	68e5      	ldreq	r5, [r4, #12]
 8008888:	6833      	ldreq	r3, [r6, #0]
 800888a:	1aed      	subeq	r5, r5, r3
 800888c:	68a3      	ldr	r3, [r4, #8]
 800888e:	bf0c      	ite	eq
 8008890:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008894:	2500      	movne	r5, #0
 8008896:	4293      	cmp	r3, r2
 8008898:	bfc4      	itt	gt
 800889a:	1a9b      	subgt	r3, r3, r2
 800889c:	18ed      	addgt	r5, r5, r3
 800889e:	2600      	movs	r6, #0
 80088a0:	341a      	adds	r4, #26
 80088a2:	42b5      	cmp	r5, r6
 80088a4:	d11a      	bne.n	80088dc <_printf_common+0xc8>
 80088a6:	2000      	movs	r0, #0
 80088a8:	e008      	b.n	80088bc <_printf_common+0xa8>
 80088aa:	2301      	movs	r3, #1
 80088ac:	4652      	mov	r2, sl
 80088ae:	4649      	mov	r1, r9
 80088b0:	4638      	mov	r0, r7
 80088b2:	47c0      	blx	r8
 80088b4:	3001      	adds	r0, #1
 80088b6:	d103      	bne.n	80088c0 <_printf_common+0xac>
 80088b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80088bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088c0:	3501      	adds	r5, #1
 80088c2:	e7c6      	b.n	8008852 <_printf_common+0x3e>
 80088c4:	18e1      	adds	r1, r4, r3
 80088c6:	1c5a      	adds	r2, r3, #1
 80088c8:	2030      	movs	r0, #48	; 0x30
 80088ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80088ce:	4422      	add	r2, r4
 80088d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80088d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80088d8:	3302      	adds	r3, #2
 80088da:	e7c7      	b.n	800886c <_printf_common+0x58>
 80088dc:	2301      	movs	r3, #1
 80088de:	4622      	mov	r2, r4
 80088e0:	4649      	mov	r1, r9
 80088e2:	4638      	mov	r0, r7
 80088e4:	47c0      	blx	r8
 80088e6:	3001      	adds	r0, #1
 80088e8:	d0e6      	beq.n	80088b8 <_printf_common+0xa4>
 80088ea:	3601      	adds	r6, #1
 80088ec:	e7d9      	b.n	80088a2 <_printf_common+0x8e>
	...

080088f0 <_printf_i>:
 80088f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80088f4:	7e0f      	ldrb	r7, [r1, #24]
 80088f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80088f8:	2f78      	cmp	r7, #120	; 0x78
 80088fa:	4691      	mov	r9, r2
 80088fc:	4680      	mov	r8, r0
 80088fe:	460c      	mov	r4, r1
 8008900:	469a      	mov	sl, r3
 8008902:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008906:	d807      	bhi.n	8008918 <_printf_i+0x28>
 8008908:	2f62      	cmp	r7, #98	; 0x62
 800890a:	d80a      	bhi.n	8008922 <_printf_i+0x32>
 800890c:	2f00      	cmp	r7, #0
 800890e:	f000 80d4 	beq.w	8008aba <_printf_i+0x1ca>
 8008912:	2f58      	cmp	r7, #88	; 0x58
 8008914:	f000 80c0 	beq.w	8008a98 <_printf_i+0x1a8>
 8008918:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800891c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008920:	e03a      	b.n	8008998 <_printf_i+0xa8>
 8008922:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008926:	2b15      	cmp	r3, #21
 8008928:	d8f6      	bhi.n	8008918 <_printf_i+0x28>
 800892a:	a101      	add	r1, pc, #4	; (adr r1, 8008930 <_printf_i+0x40>)
 800892c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008930:	08008989 	.word	0x08008989
 8008934:	0800899d 	.word	0x0800899d
 8008938:	08008919 	.word	0x08008919
 800893c:	08008919 	.word	0x08008919
 8008940:	08008919 	.word	0x08008919
 8008944:	08008919 	.word	0x08008919
 8008948:	0800899d 	.word	0x0800899d
 800894c:	08008919 	.word	0x08008919
 8008950:	08008919 	.word	0x08008919
 8008954:	08008919 	.word	0x08008919
 8008958:	08008919 	.word	0x08008919
 800895c:	08008aa1 	.word	0x08008aa1
 8008960:	080089c9 	.word	0x080089c9
 8008964:	08008a5b 	.word	0x08008a5b
 8008968:	08008919 	.word	0x08008919
 800896c:	08008919 	.word	0x08008919
 8008970:	08008ac3 	.word	0x08008ac3
 8008974:	08008919 	.word	0x08008919
 8008978:	080089c9 	.word	0x080089c9
 800897c:	08008919 	.word	0x08008919
 8008980:	08008919 	.word	0x08008919
 8008984:	08008a63 	.word	0x08008a63
 8008988:	682b      	ldr	r3, [r5, #0]
 800898a:	1d1a      	adds	r2, r3, #4
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	602a      	str	r2, [r5, #0]
 8008990:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008994:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008998:	2301      	movs	r3, #1
 800899a:	e09f      	b.n	8008adc <_printf_i+0x1ec>
 800899c:	6820      	ldr	r0, [r4, #0]
 800899e:	682b      	ldr	r3, [r5, #0]
 80089a0:	0607      	lsls	r7, r0, #24
 80089a2:	f103 0104 	add.w	r1, r3, #4
 80089a6:	6029      	str	r1, [r5, #0]
 80089a8:	d501      	bpl.n	80089ae <_printf_i+0xbe>
 80089aa:	681e      	ldr	r6, [r3, #0]
 80089ac:	e003      	b.n	80089b6 <_printf_i+0xc6>
 80089ae:	0646      	lsls	r6, r0, #25
 80089b0:	d5fb      	bpl.n	80089aa <_printf_i+0xba>
 80089b2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80089b6:	2e00      	cmp	r6, #0
 80089b8:	da03      	bge.n	80089c2 <_printf_i+0xd2>
 80089ba:	232d      	movs	r3, #45	; 0x2d
 80089bc:	4276      	negs	r6, r6
 80089be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089c2:	485a      	ldr	r0, [pc, #360]	; (8008b2c <_printf_i+0x23c>)
 80089c4:	230a      	movs	r3, #10
 80089c6:	e012      	b.n	80089ee <_printf_i+0xfe>
 80089c8:	682b      	ldr	r3, [r5, #0]
 80089ca:	6820      	ldr	r0, [r4, #0]
 80089cc:	1d19      	adds	r1, r3, #4
 80089ce:	6029      	str	r1, [r5, #0]
 80089d0:	0605      	lsls	r5, r0, #24
 80089d2:	d501      	bpl.n	80089d8 <_printf_i+0xe8>
 80089d4:	681e      	ldr	r6, [r3, #0]
 80089d6:	e002      	b.n	80089de <_printf_i+0xee>
 80089d8:	0641      	lsls	r1, r0, #25
 80089da:	d5fb      	bpl.n	80089d4 <_printf_i+0xe4>
 80089dc:	881e      	ldrh	r6, [r3, #0]
 80089de:	4853      	ldr	r0, [pc, #332]	; (8008b2c <_printf_i+0x23c>)
 80089e0:	2f6f      	cmp	r7, #111	; 0x6f
 80089e2:	bf0c      	ite	eq
 80089e4:	2308      	moveq	r3, #8
 80089e6:	230a      	movne	r3, #10
 80089e8:	2100      	movs	r1, #0
 80089ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80089ee:	6865      	ldr	r5, [r4, #4]
 80089f0:	60a5      	str	r5, [r4, #8]
 80089f2:	2d00      	cmp	r5, #0
 80089f4:	bfa2      	ittt	ge
 80089f6:	6821      	ldrge	r1, [r4, #0]
 80089f8:	f021 0104 	bicge.w	r1, r1, #4
 80089fc:	6021      	strge	r1, [r4, #0]
 80089fe:	b90e      	cbnz	r6, 8008a04 <_printf_i+0x114>
 8008a00:	2d00      	cmp	r5, #0
 8008a02:	d04b      	beq.n	8008a9c <_printf_i+0x1ac>
 8008a04:	4615      	mov	r5, r2
 8008a06:	fbb6 f1f3 	udiv	r1, r6, r3
 8008a0a:	fb03 6711 	mls	r7, r3, r1, r6
 8008a0e:	5dc7      	ldrb	r7, [r0, r7]
 8008a10:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008a14:	4637      	mov	r7, r6
 8008a16:	42bb      	cmp	r3, r7
 8008a18:	460e      	mov	r6, r1
 8008a1a:	d9f4      	bls.n	8008a06 <_printf_i+0x116>
 8008a1c:	2b08      	cmp	r3, #8
 8008a1e:	d10b      	bne.n	8008a38 <_printf_i+0x148>
 8008a20:	6823      	ldr	r3, [r4, #0]
 8008a22:	07de      	lsls	r6, r3, #31
 8008a24:	d508      	bpl.n	8008a38 <_printf_i+0x148>
 8008a26:	6923      	ldr	r3, [r4, #16]
 8008a28:	6861      	ldr	r1, [r4, #4]
 8008a2a:	4299      	cmp	r1, r3
 8008a2c:	bfde      	ittt	le
 8008a2e:	2330      	movle	r3, #48	; 0x30
 8008a30:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008a34:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008a38:	1b52      	subs	r2, r2, r5
 8008a3a:	6122      	str	r2, [r4, #16]
 8008a3c:	f8cd a000 	str.w	sl, [sp]
 8008a40:	464b      	mov	r3, r9
 8008a42:	aa03      	add	r2, sp, #12
 8008a44:	4621      	mov	r1, r4
 8008a46:	4640      	mov	r0, r8
 8008a48:	f7ff fee4 	bl	8008814 <_printf_common>
 8008a4c:	3001      	adds	r0, #1
 8008a4e:	d14a      	bne.n	8008ae6 <_printf_i+0x1f6>
 8008a50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a54:	b004      	add	sp, #16
 8008a56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a5a:	6823      	ldr	r3, [r4, #0]
 8008a5c:	f043 0320 	orr.w	r3, r3, #32
 8008a60:	6023      	str	r3, [r4, #0]
 8008a62:	4833      	ldr	r0, [pc, #204]	; (8008b30 <_printf_i+0x240>)
 8008a64:	2778      	movs	r7, #120	; 0x78
 8008a66:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008a6a:	6823      	ldr	r3, [r4, #0]
 8008a6c:	6829      	ldr	r1, [r5, #0]
 8008a6e:	061f      	lsls	r7, r3, #24
 8008a70:	f851 6b04 	ldr.w	r6, [r1], #4
 8008a74:	d402      	bmi.n	8008a7c <_printf_i+0x18c>
 8008a76:	065f      	lsls	r7, r3, #25
 8008a78:	bf48      	it	mi
 8008a7a:	b2b6      	uxthmi	r6, r6
 8008a7c:	07df      	lsls	r7, r3, #31
 8008a7e:	bf48      	it	mi
 8008a80:	f043 0320 	orrmi.w	r3, r3, #32
 8008a84:	6029      	str	r1, [r5, #0]
 8008a86:	bf48      	it	mi
 8008a88:	6023      	strmi	r3, [r4, #0]
 8008a8a:	b91e      	cbnz	r6, 8008a94 <_printf_i+0x1a4>
 8008a8c:	6823      	ldr	r3, [r4, #0]
 8008a8e:	f023 0320 	bic.w	r3, r3, #32
 8008a92:	6023      	str	r3, [r4, #0]
 8008a94:	2310      	movs	r3, #16
 8008a96:	e7a7      	b.n	80089e8 <_printf_i+0xf8>
 8008a98:	4824      	ldr	r0, [pc, #144]	; (8008b2c <_printf_i+0x23c>)
 8008a9a:	e7e4      	b.n	8008a66 <_printf_i+0x176>
 8008a9c:	4615      	mov	r5, r2
 8008a9e:	e7bd      	b.n	8008a1c <_printf_i+0x12c>
 8008aa0:	682b      	ldr	r3, [r5, #0]
 8008aa2:	6826      	ldr	r6, [r4, #0]
 8008aa4:	6961      	ldr	r1, [r4, #20]
 8008aa6:	1d18      	adds	r0, r3, #4
 8008aa8:	6028      	str	r0, [r5, #0]
 8008aaa:	0635      	lsls	r5, r6, #24
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	d501      	bpl.n	8008ab4 <_printf_i+0x1c4>
 8008ab0:	6019      	str	r1, [r3, #0]
 8008ab2:	e002      	b.n	8008aba <_printf_i+0x1ca>
 8008ab4:	0670      	lsls	r0, r6, #25
 8008ab6:	d5fb      	bpl.n	8008ab0 <_printf_i+0x1c0>
 8008ab8:	8019      	strh	r1, [r3, #0]
 8008aba:	2300      	movs	r3, #0
 8008abc:	6123      	str	r3, [r4, #16]
 8008abe:	4615      	mov	r5, r2
 8008ac0:	e7bc      	b.n	8008a3c <_printf_i+0x14c>
 8008ac2:	682b      	ldr	r3, [r5, #0]
 8008ac4:	1d1a      	adds	r2, r3, #4
 8008ac6:	602a      	str	r2, [r5, #0]
 8008ac8:	681d      	ldr	r5, [r3, #0]
 8008aca:	6862      	ldr	r2, [r4, #4]
 8008acc:	2100      	movs	r1, #0
 8008ace:	4628      	mov	r0, r5
 8008ad0:	f7f7 fba6 	bl	8000220 <memchr>
 8008ad4:	b108      	cbz	r0, 8008ada <_printf_i+0x1ea>
 8008ad6:	1b40      	subs	r0, r0, r5
 8008ad8:	6060      	str	r0, [r4, #4]
 8008ada:	6863      	ldr	r3, [r4, #4]
 8008adc:	6123      	str	r3, [r4, #16]
 8008ade:	2300      	movs	r3, #0
 8008ae0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ae4:	e7aa      	b.n	8008a3c <_printf_i+0x14c>
 8008ae6:	6923      	ldr	r3, [r4, #16]
 8008ae8:	462a      	mov	r2, r5
 8008aea:	4649      	mov	r1, r9
 8008aec:	4640      	mov	r0, r8
 8008aee:	47d0      	blx	sl
 8008af0:	3001      	adds	r0, #1
 8008af2:	d0ad      	beq.n	8008a50 <_printf_i+0x160>
 8008af4:	6823      	ldr	r3, [r4, #0]
 8008af6:	079b      	lsls	r3, r3, #30
 8008af8:	d413      	bmi.n	8008b22 <_printf_i+0x232>
 8008afa:	68e0      	ldr	r0, [r4, #12]
 8008afc:	9b03      	ldr	r3, [sp, #12]
 8008afe:	4298      	cmp	r0, r3
 8008b00:	bfb8      	it	lt
 8008b02:	4618      	movlt	r0, r3
 8008b04:	e7a6      	b.n	8008a54 <_printf_i+0x164>
 8008b06:	2301      	movs	r3, #1
 8008b08:	4632      	mov	r2, r6
 8008b0a:	4649      	mov	r1, r9
 8008b0c:	4640      	mov	r0, r8
 8008b0e:	47d0      	blx	sl
 8008b10:	3001      	adds	r0, #1
 8008b12:	d09d      	beq.n	8008a50 <_printf_i+0x160>
 8008b14:	3501      	adds	r5, #1
 8008b16:	68e3      	ldr	r3, [r4, #12]
 8008b18:	9903      	ldr	r1, [sp, #12]
 8008b1a:	1a5b      	subs	r3, r3, r1
 8008b1c:	42ab      	cmp	r3, r5
 8008b1e:	dcf2      	bgt.n	8008b06 <_printf_i+0x216>
 8008b20:	e7eb      	b.n	8008afa <_printf_i+0x20a>
 8008b22:	2500      	movs	r5, #0
 8008b24:	f104 0619 	add.w	r6, r4, #25
 8008b28:	e7f5      	b.n	8008b16 <_printf_i+0x226>
 8008b2a:	bf00      	nop
 8008b2c:	0800ce79 	.word	0x0800ce79
 8008b30:	0800ce8a 	.word	0x0800ce8a

08008b34 <__sflush_r>:
 8008b34:	898a      	ldrh	r2, [r1, #12]
 8008b36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b3a:	4605      	mov	r5, r0
 8008b3c:	0710      	lsls	r0, r2, #28
 8008b3e:	460c      	mov	r4, r1
 8008b40:	d458      	bmi.n	8008bf4 <__sflush_r+0xc0>
 8008b42:	684b      	ldr	r3, [r1, #4]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	dc05      	bgt.n	8008b54 <__sflush_r+0x20>
 8008b48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	dc02      	bgt.n	8008b54 <__sflush_r+0x20>
 8008b4e:	2000      	movs	r0, #0
 8008b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b56:	2e00      	cmp	r6, #0
 8008b58:	d0f9      	beq.n	8008b4e <__sflush_r+0x1a>
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008b60:	682f      	ldr	r7, [r5, #0]
 8008b62:	6a21      	ldr	r1, [r4, #32]
 8008b64:	602b      	str	r3, [r5, #0]
 8008b66:	d032      	beq.n	8008bce <__sflush_r+0x9a>
 8008b68:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008b6a:	89a3      	ldrh	r3, [r4, #12]
 8008b6c:	075a      	lsls	r2, r3, #29
 8008b6e:	d505      	bpl.n	8008b7c <__sflush_r+0x48>
 8008b70:	6863      	ldr	r3, [r4, #4]
 8008b72:	1ac0      	subs	r0, r0, r3
 8008b74:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008b76:	b10b      	cbz	r3, 8008b7c <__sflush_r+0x48>
 8008b78:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008b7a:	1ac0      	subs	r0, r0, r3
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	4602      	mov	r2, r0
 8008b80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b82:	6a21      	ldr	r1, [r4, #32]
 8008b84:	4628      	mov	r0, r5
 8008b86:	47b0      	blx	r6
 8008b88:	1c43      	adds	r3, r0, #1
 8008b8a:	89a3      	ldrh	r3, [r4, #12]
 8008b8c:	d106      	bne.n	8008b9c <__sflush_r+0x68>
 8008b8e:	6829      	ldr	r1, [r5, #0]
 8008b90:	291d      	cmp	r1, #29
 8008b92:	d82b      	bhi.n	8008bec <__sflush_r+0xb8>
 8008b94:	4a29      	ldr	r2, [pc, #164]	; (8008c3c <__sflush_r+0x108>)
 8008b96:	410a      	asrs	r2, r1
 8008b98:	07d6      	lsls	r6, r2, #31
 8008b9a:	d427      	bmi.n	8008bec <__sflush_r+0xb8>
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	6062      	str	r2, [r4, #4]
 8008ba0:	04d9      	lsls	r1, r3, #19
 8008ba2:	6922      	ldr	r2, [r4, #16]
 8008ba4:	6022      	str	r2, [r4, #0]
 8008ba6:	d504      	bpl.n	8008bb2 <__sflush_r+0x7e>
 8008ba8:	1c42      	adds	r2, r0, #1
 8008baa:	d101      	bne.n	8008bb0 <__sflush_r+0x7c>
 8008bac:	682b      	ldr	r3, [r5, #0]
 8008bae:	b903      	cbnz	r3, 8008bb2 <__sflush_r+0x7e>
 8008bb0:	6560      	str	r0, [r4, #84]	; 0x54
 8008bb2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008bb4:	602f      	str	r7, [r5, #0]
 8008bb6:	2900      	cmp	r1, #0
 8008bb8:	d0c9      	beq.n	8008b4e <__sflush_r+0x1a>
 8008bba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008bbe:	4299      	cmp	r1, r3
 8008bc0:	d002      	beq.n	8008bc8 <__sflush_r+0x94>
 8008bc2:	4628      	mov	r0, r5
 8008bc4:	f7ff fc96 	bl	80084f4 <_free_r>
 8008bc8:	2000      	movs	r0, #0
 8008bca:	6360      	str	r0, [r4, #52]	; 0x34
 8008bcc:	e7c0      	b.n	8008b50 <__sflush_r+0x1c>
 8008bce:	2301      	movs	r3, #1
 8008bd0:	4628      	mov	r0, r5
 8008bd2:	47b0      	blx	r6
 8008bd4:	1c41      	adds	r1, r0, #1
 8008bd6:	d1c8      	bne.n	8008b6a <__sflush_r+0x36>
 8008bd8:	682b      	ldr	r3, [r5, #0]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d0c5      	beq.n	8008b6a <__sflush_r+0x36>
 8008bde:	2b1d      	cmp	r3, #29
 8008be0:	d001      	beq.n	8008be6 <__sflush_r+0xb2>
 8008be2:	2b16      	cmp	r3, #22
 8008be4:	d101      	bne.n	8008bea <__sflush_r+0xb6>
 8008be6:	602f      	str	r7, [r5, #0]
 8008be8:	e7b1      	b.n	8008b4e <__sflush_r+0x1a>
 8008bea:	89a3      	ldrh	r3, [r4, #12]
 8008bec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bf0:	81a3      	strh	r3, [r4, #12]
 8008bf2:	e7ad      	b.n	8008b50 <__sflush_r+0x1c>
 8008bf4:	690f      	ldr	r7, [r1, #16]
 8008bf6:	2f00      	cmp	r7, #0
 8008bf8:	d0a9      	beq.n	8008b4e <__sflush_r+0x1a>
 8008bfa:	0793      	lsls	r3, r2, #30
 8008bfc:	680e      	ldr	r6, [r1, #0]
 8008bfe:	bf08      	it	eq
 8008c00:	694b      	ldreq	r3, [r1, #20]
 8008c02:	600f      	str	r7, [r1, #0]
 8008c04:	bf18      	it	ne
 8008c06:	2300      	movne	r3, #0
 8008c08:	eba6 0807 	sub.w	r8, r6, r7
 8008c0c:	608b      	str	r3, [r1, #8]
 8008c0e:	f1b8 0f00 	cmp.w	r8, #0
 8008c12:	dd9c      	ble.n	8008b4e <__sflush_r+0x1a>
 8008c14:	6a21      	ldr	r1, [r4, #32]
 8008c16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008c18:	4643      	mov	r3, r8
 8008c1a:	463a      	mov	r2, r7
 8008c1c:	4628      	mov	r0, r5
 8008c1e:	47b0      	blx	r6
 8008c20:	2800      	cmp	r0, #0
 8008c22:	dc06      	bgt.n	8008c32 <__sflush_r+0xfe>
 8008c24:	89a3      	ldrh	r3, [r4, #12]
 8008c26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c2a:	81a3      	strh	r3, [r4, #12]
 8008c2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c30:	e78e      	b.n	8008b50 <__sflush_r+0x1c>
 8008c32:	4407      	add	r7, r0
 8008c34:	eba8 0800 	sub.w	r8, r8, r0
 8008c38:	e7e9      	b.n	8008c0e <__sflush_r+0xda>
 8008c3a:	bf00      	nop
 8008c3c:	dfbffffe 	.word	0xdfbffffe

08008c40 <_fflush_r>:
 8008c40:	b538      	push	{r3, r4, r5, lr}
 8008c42:	690b      	ldr	r3, [r1, #16]
 8008c44:	4605      	mov	r5, r0
 8008c46:	460c      	mov	r4, r1
 8008c48:	b913      	cbnz	r3, 8008c50 <_fflush_r+0x10>
 8008c4a:	2500      	movs	r5, #0
 8008c4c:	4628      	mov	r0, r5
 8008c4e:	bd38      	pop	{r3, r4, r5, pc}
 8008c50:	b118      	cbz	r0, 8008c5a <_fflush_r+0x1a>
 8008c52:	6a03      	ldr	r3, [r0, #32]
 8008c54:	b90b      	cbnz	r3, 8008c5a <_fflush_r+0x1a>
 8008c56:	f7ff fa37 	bl	80080c8 <__sinit>
 8008c5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d0f3      	beq.n	8008c4a <_fflush_r+0xa>
 8008c62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008c64:	07d0      	lsls	r0, r2, #31
 8008c66:	d404      	bmi.n	8008c72 <_fflush_r+0x32>
 8008c68:	0599      	lsls	r1, r3, #22
 8008c6a:	d402      	bmi.n	8008c72 <_fflush_r+0x32>
 8008c6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c6e:	f7ff fc30 	bl	80084d2 <__retarget_lock_acquire_recursive>
 8008c72:	4628      	mov	r0, r5
 8008c74:	4621      	mov	r1, r4
 8008c76:	f7ff ff5d 	bl	8008b34 <__sflush_r>
 8008c7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008c7c:	07da      	lsls	r2, r3, #31
 8008c7e:	4605      	mov	r5, r0
 8008c80:	d4e4      	bmi.n	8008c4c <_fflush_r+0xc>
 8008c82:	89a3      	ldrh	r3, [r4, #12]
 8008c84:	059b      	lsls	r3, r3, #22
 8008c86:	d4e1      	bmi.n	8008c4c <_fflush_r+0xc>
 8008c88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c8a:	f7ff fc23 	bl	80084d4 <__retarget_lock_release_recursive>
 8008c8e:	e7dd      	b.n	8008c4c <_fflush_r+0xc>

08008c90 <__swhatbuf_r>:
 8008c90:	b570      	push	{r4, r5, r6, lr}
 8008c92:	460c      	mov	r4, r1
 8008c94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c98:	2900      	cmp	r1, #0
 8008c9a:	b096      	sub	sp, #88	; 0x58
 8008c9c:	4615      	mov	r5, r2
 8008c9e:	461e      	mov	r6, r3
 8008ca0:	da0d      	bge.n	8008cbe <__swhatbuf_r+0x2e>
 8008ca2:	89a3      	ldrh	r3, [r4, #12]
 8008ca4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008ca8:	f04f 0100 	mov.w	r1, #0
 8008cac:	bf0c      	ite	eq
 8008cae:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008cb2:	2340      	movne	r3, #64	; 0x40
 8008cb4:	2000      	movs	r0, #0
 8008cb6:	6031      	str	r1, [r6, #0]
 8008cb8:	602b      	str	r3, [r5, #0]
 8008cba:	b016      	add	sp, #88	; 0x58
 8008cbc:	bd70      	pop	{r4, r5, r6, pc}
 8008cbe:	466a      	mov	r2, sp
 8008cc0:	f000 f848 	bl	8008d54 <_fstat_r>
 8008cc4:	2800      	cmp	r0, #0
 8008cc6:	dbec      	blt.n	8008ca2 <__swhatbuf_r+0x12>
 8008cc8:	9901      	ldr	r1, [sp, #4]
 8008cca:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008cce:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008cd2:	4259      	negs	r1, r3
 8008cd4:	4159      	adcs	r1, r3
 8008cd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008cda:	e7eb      	b.n	8008cb4 <__swhatbuf_r+0x24>

08008cdc <__smakebuf_r>:
 8008cdc:	898b      	ldrh	r3, [r1, #12]
 8008cde:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008ce0:	079d      	lsls	r5, r3, #30
 8008ce2:	4606      	mov	r6, r0
 8008ce4:	460c      	mov	r4, r1
 8008ce6:	d507      	bpl.n	8008cf8 <__smakebuf_r+0x1c>
 8008ce8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008cec:	6023      	str	r3, [r4, #0]
 8008cee:	6123      	str	r3, [r4, #16]
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	6163      	str	r3, [r4, #20]
 8008cf4:	b002      	add	sp, #8
 8008cf6:	bd70      	pop	{r4, r5, r6, pc}
 8008cf8:	ab01      	add	r3, sp, #4
 8008cfa:	466a      	mov	r2, sp
 8008cfc:	f7ff ffc8 	bl	8008c90 <__swhatbuf_r>
 8008d00:	9900      	ldr	r1, [sp, #0]
 8008d02:	4605      	mov	r5, r0
 8008d04:	4630      	mov	r0, r6
 8008d06:	f7ff f8c7 	bl	8007e98 <_malloc_r>
 8008d0a:	b948      	cbnz	r0, 8008d20 <__smakebuf_r+0x44>
 8008d0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d10:	059a      	lsls	r2, r3, #22
 8008d12:	d4ef      	bmi.n	8008cf4 <__smakebuf_r+0x18>
 8008d14:	f023 0303 	bic.w	r3, r3, #3
 8008d18:	f043 0302 	orr.w	r3, r3, #2
 8008d1c:	81a3      	strh	r3, [r4, #12]
 8008d1e:	e7e3      	b.n	8008ce8 <__smakebuf_r+0xc>
 8008d20:	89a3      	ldrh	r3, [r4, #12]
 8008d22:	6020      	str	r0, [r4, #0]
 8008d24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d28:	81a3      	strh	r3, [r4, #12]
 8008d2a:	9b00      	ldr	r3, [sp, #0]
 8008d2c:	6163      	str	r3, [r4, #20]
 8008d2e:	9b01      	ldr	r3, [sp, #4]
 8008d30:	6120      	str	r0, [r4, #16]
 8008d32:	b15b      	cbz	r3, 8008d4c <__smakebuf_r+0x70>
 8008d34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d38:	4630      	mov	r0, r6
 8008d3a:	f000 f81d 	bl	8008d78 <_isatty_r>
 8008d3e:	b128      	cbz	r0, 8008d4c <__smakebuf_r+0x70>
 8008d40:	89a3      	ldrh	r3, [r4, #12]
 8008d42:	f023 0303 	bic.w	r3, r3, #3
 8008d46:	f043 0301 	orr.w	r3, r3, #1
 8008d4a:	81a3      	strh	r3, [r4, #12]
 8008d4c:	89a3      	ldrh	r3, [r4, #12]
 8008d4e:	431d      	orrs	r5, r3
 8008d50:	81a5      	strh	r5, [r4, #12]
 8008d52:	e7cf      	b.n	8008cf4 <__smakebuf_r+0x18>

08008d54 <_fstat_r>:
 8008d54:	b538      	push	{r3, r4, r5, lr}
 8008d56:	4d07      	ldr	r5, [pc, #28]	; (8008d74 <_fstat_r+0x20>)
 8008d58:	2300      	movs	r3, #0
 8008d5a:	4604      	mov	r4, r0
 8008d5c:	4608      	mov	r0, r1
 8008d5e:	4611      	mov	r1, r2
 8008d60:	602b      	str	r3, [r5, #0]
 8008d62:	f000 f955 	bl	8009010 <_fstat>
 8008d66:	1c43      	adds	r3, r0, #1
 8008d68:	d102      	bne.n	8008d70 <_fstat_r+0x1c>
 8008d6a:	682b      	ldr	r3, [r5, #0]
 8008d6c:	b103      	cbz	r3, 8008d70 <_fstat_r+0x1c>
 8008d6e:	6023      	str	r3, [r4, #0]
 8008d70:	bd38      	pop	{r3, r4, r5, pc}
 8008d72:	bf00      	nop
 8008d74:	20001824 	.word	0x20001824

08008d78 <_isatty_r>:
 8008d78:	b538      	push	{r3, r4, r5, lr}
 8008d7a:	4d06      	ldr	r5, [pc, #24]	; (8008d94 <_isatty_r+0x1c>)
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	4604      	mov	r4, r0
 8008d80:	4608      	mov	r0, r1
 8008d82:	602b      	str	r3, [r5, #0]
 8008d84:	f000 f94c 	bl	8009020 <_isatty>
 8008d88:	1c43      	adds	r3, r0, #1
 8008d8a:	d102      	bne.n	8008d92 <_isatty_r+0x1a>
 8008d8c:	682b      	ldr	r3, [r5, #0]
 8008d8e:	b103      	cbz	r3, 8008d92 <_isatty_r+0x1a>
 8008d90:	6023      	str	r3, [r4, #0]
 8008d92:	bd38      	pop	{r3, r4, r5, pc}
 8008d94:	20001824 	.word	0x20001824

08008d98 <expf>:
 8008d98:	b508      	push	{r3, lr}
 8008d9a:	ed2d 8b02 	vpush	{d8}
 8008d9e:	eef0 8a40 	vmov.f32	s17, s0
 8008da2:	f000 f85f 	bl	8008e64 <__ieee754_expf>
 8008da6:	eeb0 8a40 	vmov.f32	s16, s0
 8008daa:	eeb0 0a68 	vmov.f32	s0, s17
 8008dae:	f000 f829 	bl	8008e04 <finitef>
 8008db2:	b160      	cbz	r0, 8008dce <expf+0x36>
 8008db4:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8008df4 <expf+0x5c>
 8008db8:	eef4 8ae7 	vcmpe.f32	s17, s15
 8008dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dc0:	dd0a      	ble.n	8008dd8 <expf+0x40>
 8008dc2:	f7ff fb5b 	bl	800847c <__errno>
 8008dc6:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8008df8 <expf+0x60>
 8008dca:	2322      	movs	r3, #34	; 0x22
 8008dcc:	6003      	str	r3, [r0, #0]
 8008dce:	eeb0 0a48 	vmov.f32	s0, s16
 8008dd2:	ecbd 8b02 	vpop	{d8}
 8008dd6:	bd08      	pop	{r3, pc}
 8008dd8:	eddf 7a08 	vldr	s15, [pc, #32]	; 8008dfc <expf+0x64>
 8008ddc:	eef4 8ae7 	vcmpe.f32	s17, s15
 8008de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008de4:	d5f3      	bpl.n	8008dce <expf+0x36>
 8008de6:	f7ff fb49 	bl	800847c <__errno>
 8008dea:	2322      	movs	r3, #34	; 0x22
 8008dec:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8008e00 <expf+0x68>
 8008df0:	6003      	str	r3, [r0, #0]
 8008df2:	e7ec      	b.n	8008dce <expf+0x36>
 8008df4:	42b17217 	.word	0x42b17217
 8008df8:	7f800000 	.word	0x7f800000
 8008dfc:	c2cff1b5 	.word	0xc2cff1b5
 8008e00:	00000000 	.word	0x00000000

08008e04 <finitef>:
 8008e04:	b082      	sub	sp, #8
 8008e06:	ed8d 0a01 	vstr	s0, [sp, #4]
 8008e0a:	9801      	ldr	r0, [sp, #4]
 8008e0c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8008e10:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8008e14:	bfac      	ite	ge
 8008e16:	2000      	movge	r0, #0
 8008e18:	2001      	movlt	r0, #1
 8008e1a:	b002      	add	sp, #8
 8008e1c:	4770      	bx	lr

08008e1e <with_errnof>:
 8008e1e:	b513      	push	{r0, r1, r4, lr}
 8008e20:	4604      	mov	r4, r0
 8008e22:	ed8d 0a01 	vstr	s0, [sp, #4]
 8008e26:	f7ff fb29 	bl	800847c <__errno>
 8008e2a:	ed9d 0a01 	vldr	s0, [sp, #4]
 8008e2e:	6004      	str	r4, [r0, #0]
 8008e30:	b002      	add	sp, #8
 8008e32:	bd10      	pop	{r4, pc}

08008e34 <xflowf>:
 8008e34:	b130      	cbz	r0, 8008e44 <xflowf+0x10>
 8008e36:	eef1 7a40 	vneg.f32	s15, s0
 8008e3a:	ee27 0a80 	vmul.f32	s0, s15, s0
 8008e3e:	2022      	movs	r0, #34	; 0x22
 8008e40:	f7ff bfed 	b.w	8008e1e <with_errnof>
 8008e44:	eef0 7a40 	vmov.f32	s15, s0
 8008e48:	e7f7      	b.n	8008e3a <xflowf+0x6>
	...

08008e4c <__math_uflowf>:
 8008e4c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008e54 <__math_uflowf+0x8>
 8008e50:	f7ff bff0 	b.w	8008e34 <xflowf>
 8008e54:	10000000 	.word	0x10000000

08008e58 <__math_oflowf>:
 8008e58:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008e60 <__math_oflowf+0x8>
 8008e5c:	f7ff bfea 	b.w	8008e34 <xflowf>
 8008e60:	70000000 	.word	0x70000000

08008e64 <__ieee754_expf>:
 8008e64:	ee10 2a10 	vmov	r2, s0
 8008e68:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8008e6c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008e70:	d902      	bls.n	8008e78 <__ieee754_expf+0x14>
 8008e72:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008e76:	4770      	bx	lr
 8008e78:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 8008e7c:	d106      	bne.n	8008e8c <__ieee754_expf+0x28>
 8008e7e:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8008fb8 <__ieee754_expf+0x154>
 8008e82:	2900      	cmp	r1, #0
 8008e84:	bf18      	it	ne
 8008e86:	eeb0 0a67 	vmovne.f32	s0, s15
 8008e8a:	4770      	bx	lr
 8008e8c:	484b      	ldr	r0, [pc, #300]	; (8008fbc <__ieee754_expf+0x158>)
 8008e8e:	4282      	cmp	r2, r0
 8008e90:	dd02      	ble.n	8008e98 <__ieee754_expf+0x34>
 8008e92:	2000      	movs	r0, #0
 8008e94:	f7ff bfe0 	b.w	8008e58 <__math_oflowf>
 8008e98:	2a00      	cmp	r2, #0
 8008e9a:	da05      	bge.n	8008ea8 <__ieee754_expf+0x44>
 8008e9c:	4a48      	ldr	r2, [pc, #288]	; (8008fc0 <__ieee754_expf+0x15c>)
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d902      	bls.n	8008ea8 <__ieee754_expf+0x44>
 8008ea2:	2000      	movs	r0, #0
 8008ea4:	f7ff bfd2 	b.w	8008e4c <__math_uflowf>
 8008ea8:	4a46      	ldr	r2, [pc, #280]	; (8008fc4 <__ieee754_expf+0x160>)
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8008eb0:	d952      	bls.n	8008f58 <__ieee754_expf+0xf4>
 8008eb2:	4a45      	ldr	r2, [pc, #276]	; (8008fc8 <__ieee754_expf+0x164>)
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	ea4f 0281 	mov.w	r2, r1, lsl #2
 8008eba:	d834      	bhi.n	8008f26 <__ieee754_expf+0xc2>
 8008ebc:	4b43      	ldr	r3, [pc, #268]	; (8008fcc <__ieee754_expf+0x168>)
 8008ebe:	4413      	add	r3, r2
 8008ec0:	ed93 7a00 	vldr	s14, [r3]
 8008ec4:	4b42      	ldr	r3, [pc, #264]	; (8008fd0 <__ieee754_expf+0x16c>)
 8008ec6:	4413      	add	r3, r2
 8008ec8:	ee30 7a47 	vsub.f32	s14, s0, s14
 8008ecc:	f1c1 0201 	rsb	r2, r1, #1
 8008ed0:	edd3 7a00 	vldr	s15, [r3]
 8008ed4:	1a52      	subs	r2, r2, r1
 8008ed6:	ee37 0a67 	vsub.f32	s0, s14, s15
 8008eda:	ee20 6a00 	vmul.f32	s12, s0, s0
 8008ede:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 8008fd4 <__ieee754_expf+0x170>
 8008ee2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008fd8 <__ieee754_expf+0x174>
 8008ee6:	eee6 6a05 	vfma.f32	s13, s12, s10
 8008eea:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8008fdc <__ieee754_expf+0x178>
 8008eee:	eea6 5a86 	vfma.f32	s10, s13, s12
 8008ef2:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8008fe0 <__ieee754_expf+0x17c>
 8008ef6:	eee5 6a06 	vfma.f32	s13, s10, s12
 8008efa:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8008fe4 <__ieee754_expf+0x180>
 8008efe:	eea6 5a86 	vfma.f32	s10, s13, s12
 8008f02:	eef0 6a40 	vmov.f32	s13, s0
 8008f06:	eee5 6a46 	vfms.f32	s13, s10, s12
 8008f0a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8008f0e:	ee20 5a26 	vmul.f32	s10, s0, s13
 8008f12:	bb92      	cbnz	r2, 8008f7a <__ieee754_expf+0x116>
 8008f14:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8008f18:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8008f1c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8008f20:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8008f24:	4770      	bx	lr
 8008f26:	4b30      	ldr	r3, [pc, #192]	; (8008fe8 <__ieee754_expf+0x184>)
 8008f28:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8008fec <__ieee754_expf+0x188>
 8008f2c:	eddf 6a30 	vldr	s13, [pc, #192]	; 8008ff0 <__ieee754_expf+0x18c>
 8008f30:	4413      	add	r3, r2
 8008f32:	edd3 7a00 	vldr	s15, [r3]
 8008f36:	eee0 7a07 	vfma.f32	s15, s0, s14
 8008f3a:	eeb0 7a40 	vmov.f32	s14, s0
 8008f3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008f42:	ee17 2a90 	vmov	r2, s15
 8008f46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008f4a:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8008f4e:	eddf 6a29 	vldr	s13, [pc, #164]	; 8008ff4 <__ieee754_expf+0x190>
 8008f52:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008f56:	e7be      	b.n	8008ed6 <__ieee754_expf+0x72>
 8008f58:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
 8008f5c:	d20b      	bcs.n	8008f76 <__ieee754_expf+0x112>
 8008f5e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008ff8 <__ieee754_expf+0x194>
 8008f62:	ee70 6a26 	vadd.f32	s13, s0, s13
 8008f66:	eef4 6ae5 	vcmpe.f32	s13, s11
 8008f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f6e:	dd02      	ble.n	8008f76 <__ieee754_expf+0x112>
 8008f70:	ee30 0a25 	vadd.f32	s0, s0, s11
 8008f74:	4770      	bx	lr
 8008f76:	2200      	movs	r2, #0
 8008f78:	e7af      	b.n	8008eda <__ieee754_expf+0x76>
 8008f7a:	ee36 6a66 	vsub.f32	s12, s12, s13
 8008f7e:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8008f82:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8008f86:	bfb8      	it	lt
 8008f88:	3264      	addlt	r2, #100	; 0x64
 8008f8a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008f8e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008f92:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8008f96:	ee17 3a90 	vmov	r3, s15
 8008f9a:	bfab      	itete	ge
 8008f9c:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8008fa0:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8008fa4:	ee00 3a10 	vmovge	s0, r3
 8008fa8:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 8008ffc <__ieee754_expf+0x198>
 8008fac:	bfbc      	itt	lt
 8008fae:	ee00 3a10 	vmovlt	s0, r3
 8008fb2:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8008fb6:	4770      	bx	lr
 8008fb8:	00000000 	.word	0x00000000
 8008fbc:	42b17217 	.word	0x42b17217
 8008fc0:	42cff1b5 	.word	0x42cff1b5
 8008fc4:	3eb17218 	.word	0x3eb17218
 8008fc8:	3f851591 	.word	0x3f851591
 8008fcc:	0800cea4 	.word	0x0800cea4
 8008fd0:	0800ceac 	.word	0x0800ceac
 8008fd4:	3331bb4c 	.word	0x3331bb4c
 8008fd8:	b5ddea0e 	.word	0xb5ddea0e
 8008fdc:	388ab355 	.word	0x388ab355
 8008fe0:	bb360b61 	.word	0xbb360b61
 8008fe4:	3e2aaaab 	.word	0x3e2aaaab
 8008fe8:	0800ce9c 	.word	0x0800ce9c
 8008fec:	3fb8aa3b 	.word	0x3fb8aa3b
 8008ff0:	3f317180 	.word	0x3f317180
 8008ff4:	3717f7d1 	.word	0x3717f7d1
 8008ff8:	7149f2ca 	.word	0x7149f2ca
 8008ffc:	0d800000 	.word	0x0d800000

08009000 <_close>:
 8009000:	4b02      	ldr	r3, [pc, #8]	; (800900c <_close+0xc>)
 8009002:	2258      	movs	r2, #88	; 0x58
 8009004:	601a      	str	r2, [r3, #0]
 8009006:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800900a:	4770      	bx	lr
 800900c:	20001824 	.word	0x20001824

08009010 <_fstat>:
 8009010:	4b02      	ldr	r3, [pc, #8]	; (800901c <_fstat+0xc>)
 8009012:	2258      	movs	r2, #88	; 0x58
 8009014:	601a      	str	r2, [r3, #0]
 8009016:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800901a:	4770      	bx	lr
 800901c:	20001824 	.word	0x20001824

08009020 <_isatty>:
 8009020:	4b02      	ldr	r3, [pc, #8]	; (800902c <_isatty+0xc>)
 8009022:	2258      	movs	r2, #88	; 0x58
 8009024:	601a      	str	r2, [r3, #0]
 8009026:	2000      	movs	r0, #0
 8009028:	4770      	bx	lr
 800902a:	bf00      	nop
 800902c:	20001824 	.word	0x20001824

08009030 <_lseek>:
 8009030:	4b02      	ldr	r3, [pc, #8]	; (800903c <_lseek+0xc>)
 8009032:	2258      	movs	r2, #88	; 0x58
 8009034:	601a      	str	r2, [r3, #0]
 8009036:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800903a:	4770      	bx	lr
 800903c:	20001824 	.word	0x20001824

08009040 <_read>:
 8009040:	4b02      	ldr	r3, [pc, #8]	; (800904c <_read+0xc>)
 8009042:	2258      	movs	r2, #88	; 0x58
 8009044:	601a      	str	r2, [r3, #0]
 8009046:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800904a:	4770      	bx	lr
 800904c:	20001824 	.word	0x20001824

08009050 <_write>:
 8009050:	4b02      	ldr	r3, [pc, #8]	; (800905c <_write+0xc>)
 8009052:	2258      	movs	r2, #88	; 0x58
 8009054:	601a      	str	r2, [r3, #0]
 8009056:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800905a:	4770      	bx	lr
 800905c:	20001824 	.word	0x20001824

08009060 <_init>:
 8009060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009062:	bf00      	nop
 8009064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009066:	bc08      	pop	{r3}
 8009068:	469e      	mov	lr, r3
 800906a:	4770      	bx	lr

0800906c <_fini>:
 800906c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800906e:	bf00      	nop
 8009070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009072:	bc08      	pop	{r3}
 8009074:	469e      	mov	lr, r3
 8009076:	4770      	bx	lr
