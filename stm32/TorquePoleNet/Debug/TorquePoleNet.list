
TorquePoleNet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ea0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000b194  08009080  08009080  00019080  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014214  08014214  00030ff4  2**0
                  CONTENTS
  4 .ARM          00000008  08014214  08014214  00024214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801421c  0801421c  00030ff4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801421c  0801421c  0002421c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014220  08014220  00024220  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000ff4  20000000  08014224  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000082c  20001000  08015218  00031000  2**5
                  ALLOC
 10 ._user_heap_stack 00001004  2000182c  08015218  0003182c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030ff4  2**0
                  CONTENTS, READONLY
 12 .comment      00000093  00000000  00000000  00031024  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001689a  00000000  00000000  000310b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003504  00000000  00000000  00047951  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001278  00000000  00000000  0004ae58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e2f  00000000  00000000  0004c0d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000216c7  00000000  00000000  0004ceff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018c9c  00000000  00000000  0006e5c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d422b  00000000  00000000  00087262  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005514  00000000  00000000  0015b490  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  001609a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20001000 	.word	0x20001000
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009068 	.word	0x08009068

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20001004 	.word	0x20001004
 800021c:	08009068 	.word	0x08009068

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80005c0:	4b0d      	ldr	r3, [pc, #52]	; (80005f8 <MX_CRC_Init+0x3c>)
 80005c2:	4a0e      	ldr	r2, [pc, #56]	; (80005fc <MX_CRC_Init+0x40>)
 80005c4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80005c6:	4b0c      	ldr	r3, [pc, #48]	; (80005f8 <MX_CRC_Init+0x3c>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80005cc:	4b0a      	ldr	r3, [pc, #40]	; (80005f8 <MX_CRC_Init+0x3c>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80005d2:	4b09      	ldr	r3, [pc, #36]	; (80005f8 <MX_CRC_Init+0x3c>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80005d8:	4b07      	ldr	r3, [pc, #28]	; (80005f8 <MX_CRC_Init+0x3c>)
 80005da:	2200      	movs	r2, #0
 80005dc:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80005de:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <MX_CRC_Init+0x3c>)
 80005e0:	2201      	movs	r2, #1
 80005e2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80005e4:	4804      	ldr	r0, [pc, #16]	; (80005f8 <MX_CRC_Init+0x3c>)
 80005e6:	f000 fca9 	bl	8000f3c <HAL_CRC_Init>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80005f0:	f000 f93c 	bl	800086c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80005f4:	bf00      	nop
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	2000101c 	.word	0x2000101c
 80005fc:	40023000 	.word	0x40023000

08000600 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000600:	b480      	push	{r7}
 8000602:	b085      	sub	sp, #20
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a0a      	ldr	r2, [pc, #40]	; (8000638 <HAL_CRC_MspInit+0x38>)
 800060e:	4293      	cmp	r3, r2
 8000610:	d10b      	bne.n	800062a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000612:	4b0a      	ldr	r3, [pc, #40]	; (800063c <HAL_CRC_MspInit+0x3c>)
 8000614:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000616:	4a09      	ldr	r2, [pc, #36]	; (800063c <HAL_CRC_MspInit+0x3c>)
 8000618:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800061c:	6493      	str	r3, [r2, #72]	; 0x48
 800061e:	4b07      	ldr	r3, [pc, #28]	; (800063c <HAL_CRC_MspInit+0x3c>)
 8000620:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000622:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800062a:	bf00      	nop
 800062c:	3714      	adds	r7, #20
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	40023000 	.word	0x40023000
 800063c:	40021000 	.word	0x40021000

08000640 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b088      	sub	sp, #32
 8000644:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000646:	f107 030c 	add.w	r3, r7, #12
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]
 800064e:	605a      	str	r2, [r3, #4]
 8000650:	609a      	str	r2, [r3, #8]
 8000652:	60da      	str	r2, [r3, #12]
 8000654:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000656:	4b18      	ldr	r3, [pc, #96]	; (80006b8 <MX_GPIO_Init+0x78>)
 8000658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800065a:	4a17      	ldr	r2, [pc, #92]	; (80006b8 <MX_GPIO_Init+0x78>)
 800065c:	f043 0301 	orr.w	r3, r3, #1
 8000660:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000662:	4b15      	ldr	r3, [pc, #84]	; (80006b8 <MX_GPIO_Init+0x78>)
 8000664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800066e:	4b12      	ldr	r3, [pc, #72]	; (80006b8 <MX_GPIO_Init+0x78>)
 8000670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000672:	4a11      	ldr	r2, [pc, #68]	; (80006b8 <MX_GPIO_Init+0x78>)
 8000674:	f043 0302 	orr.w	r3, r3, #2
 8000678:	64d3      	str	r3, [r2, #76]	; 0x4c
 800067a:	4b0f      	ldr	r3, [pc, #60]	; (80006b8 <MX_GPIO_Init+0x78>)
 800067c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800067e:	f003 0302 	and.w	r3, r3, #2
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000686:	2200      	movs	r2, #0
 8000688:	f44f 7180 	mov.w	r1, #256	; 0x100
 800068c:	480b      	ldr	r0, [pc, #44]	; (80006bc <MX_GPIO_Init+0x7c>)
 800068e:	f000 ff89 	bl	80015a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000692:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000696:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000698:	2301      	movs	r3, #1
 800069a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069c:	2300      	movs	r3, #0
 800069e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a0:	2300      	movs	r3, #0
 80006a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006a4:	f107 030c 	add.w	r3, r7, #12
 80006a8:	4619      	mov	r1, r3
 80006aa:	4804      	ldr	r0, [pc, #16]	; (80006bc <MX_GPIO_Init+0x7c>)
 80006ac:	f000 fdf8 	bl	80012a0 <HAL_GPIO_Init>

}
 80006b0:	bf00      	nop
 80006b2:	3720      	adds	r7, #32
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40021000 	.word	0x40021000
 80006bc:	48000400 	.word	0x48000400

080006c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  data_flag=0;
 80006c4:	4b2d      	ldr	r3, [pc, #180]	; (800077c <main+0xbc>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ca:	f000 fab6 	bl	8000c3a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ce:	f000 f867 	bl	80007a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d2:	f7ff ffb5 	bl	8000640 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006d6:	f000 f9db 	bl	8000a90 <MX_USART2_UART_Init>
  MX_CRC_Init();
 80006da:	f7ff ff6f 	bl	80005bc <MX_CRC_Init>
  MX_TIM2_Init();
 80006de:	f000 f96b 	bl	80009b8 <MX_TIM2_Init>
  MX_X_CUBE_AI_Init();
 80006e2:	f004 fcb7 	bl	8005054 <MX_X_CUBE_AI_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, data.bytes, sizeof(data.bytes));
 80006e6:	2210      	movs	r2, #16
 80006e8:	4925      	ldr	r1, [pc, #148]	; (8000780 <main+0xc0>)
 80006ea:	4826      	ldr	r0, [pc, #152]	; (8000784 <main+0xc4>)
 80006ec:	f002 fbb8 	bl	8002e60 <HAL_UART_Receive_IT>
//    HAL_UART_Transmit(&huart2, data.bytes, sizeof(data.bytes), 100);

    // Read 16 bytes into data.bytes
//    HAL_UART_Receive(&huart2, data.bytes, sizeof(data.bytes), 1000);

    if(data_flag)
 80006f0:	4b22      	ldr	r3, [pc, #136]	; (800077c <main+0xbc>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d0fb      	beq.n	80006f0 <main+0x30>
    {

      TIM2->CNT = 0;
 80006f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006fc:	2200      	movs	r2, #0
 80006fe:	625a      	str	r2, [r3, #36]	; 0x24
      HAL_TIM_Base_Start(&htim2);
 8000700:	4821      	ldr	r0, [pc, #132]	; (8000788 <main+0xc8>)
 8000702:	f001 ff91 	bl	8002628 <HAL_TIM_Base_Start>
      in_data1[0] = data.floatValue[0]; // Sin Encoding
 8000706:	4b1e      	ldr	r3, [pc, #120]	; (8000780 <main+0xc0>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4a20      	ldr	r2, [pc, #128]	; (800078c <main+0xcc>)
 800070c:	6013      	str	r3, [r2, #0]
      in_data1[1] = data.floatValue[1]; // Cosine Encoding
 800070e:	4b1c      	ldr	r3, [pc, #112]	; (8000780 <main+0xc0>)
 8000710:	685b      	ldr	r3, [r3, #4]
 8000712:	4a1e      	ldr	r2, [pc, #120]	; (800078c <main+0xcc>)
 8000714:	6053      	str	r3, [r2, #4]
      in_data1[2] = data.floatValue[2]; // Velocity
 8000716:	4b1a      	ldr	r3, [pc, #104]	; (8000780 <main+0xc0>)
 8000718:	689b      	ldr	r3, [r3, #8]
 800071a:	4a1c      	ldr	r2, [pc, #112]	; (800078c <main+0xcc>)
 800071c:	6093      	str	r3, [r2, #8]
      MX_X_CUBE_AI_Process();
 800071e:	f004 fca7 	bl	8005070 <MX_X_CUBE_AI_Process>
      HAL_TIM_Base_Stop(&htim2);
 8000722:	4819      	ldr	r0, [pc, #100]	; (8000788 <main+0xc8>)
 8000724:	f001 ffe2 	bl	80026ec <HAL_TIM_Base_Stop>
      data.floatValue[0] = out_data1[0]; // Value
 8000728:	4b19      	ldr	r3, [pc, #100]	; (8000790 <main+0xd0>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a14      	ldr	r2, [pc, #80]	; (8000780 <main+0xc0>)
 800072e:	6013      	str	r3, [r2, #0]
      data.floatValue[1] = out_data2[0]; // Mu
 8000730:	4b18      	ldr	r3, [pc, #96]	; (8000794 <main+0xd4>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a12      	ldr	r2, [pc, #72]	; (8000780 <main+0xc0>)
 8000736:	6053      	str	r3, [r2, #4]
      data.floatValue[2] = out_data3[0]; // STD
 8000738:	4b17      	ldr	r3, [pc, #92]	; (8000798 <main+0xd8>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a10      	ldr	r2, [pc, #64]	; (8000780 <main+0xc0>)
 800073e:	6093      	str	r3, [r2, #8]
      data.floatValue[3] = (float)TIM2->CNT/(1000000); // Execution Time
 8000740:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000746:	ee07 3a90 	vmov	s15, r3
 800074a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800074e:	eddf 6a13 	vldr	s13, [pc, #76]	; 800079c <main+0xdc>
 8000752:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000756:	4b0a      	ldr	r3, [pc, #40]	; (8000780 <main+0xc0>)
 8000758:	edc3 7a03 	vstr	s15, [r3, #12]
      data_flag = 0;
 800075c:	4b07      	ldr	r3, [pc, #28]	; (800077c <main+0xbc>)
 800075e:	2200      	movs	r2, #0
 8000760:	701a      	strb	r2, [r3, #0]
      HAL_UART_Transmit(&huart2, data.bytes, sizeof(data.bytes), 100);
 8000762:	2364      	movs	r3, #100	; 0x64
 8000764:	2210      	movs	r2, #16
 8000766:	4906      	ldr	r1, [pc, #24]	; (8000780 <main+0xc0>)
 8000768:	4806      	ldr	r0, [pc, #24]	; (8000784 <main+0xc4>)
 800076a:	f002 faeb 	bl	8002d44 <HAL_UART_Transmit>
      HAL_UART_Receive_IT(&huart2, data.bytes, sizeof(data.bytes));
 800076e:	2210      	movs	r2, #16
 8000770:	4903      	ldr	r1, [pc, #12]	; (8000780 <main+0xc0>)
 8000772:	4804      	ldr	r0, [pc, #16]	; (8000784 <main+0xc4>)
 8000774:	f002 fb74 	bl	8002e60 <HAL_UART_Receive_IT>
    if(data_flag)
 8000778:	e7ba      	b.n	80006f0 <main+0x30>
 800077a:	bf00      	nop
 800077c:	20001068 	.word	0x20001068
 8000780:	20001040 	.word	0x20001040
 8000784:	200010bc 	.word	0x200010bc
 8000788:	20001070 	.word	0x20001070
 800078c:	20001050 	.word	0x20001050
 8000790:	2000105c 	.word	0x2000105c
 8000794:	20001060 	.word	0x20001060
 8000798:	20001064 	.word	0x20001064
 800079c:	49742400 	.word	0x49742400

080007a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b094      	sub	sp, #80	; 0x50
 80007a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a6:	f107 0318 	add.w	r3, r7, #24
 80007aa:	2238      	movs	r2, #56	; 0x38
 80007ac:	2100      	movs	r1, #0
 80007ae:	4618      	mov	r0, r3
 80007b0:	f007 fe0a 	bl	80083c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b4:	1d3b      	adds	r3, r7, #4
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
 80007c0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80007c2:	2000      	movs	r0, #0
 80007c4:	f000 ff06 	bl	80015d4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007c8:	2302      	movs	r3, #2
 80007ca:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007d2:	2340      	movs	r3, #64	; 0x40
 80007d4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d6:	2302      	movs	r3, #2
 80007d8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007da:	2302      	movs	r3, #2
 80007dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80007de:	2304      	movs	r3, #4
 80007e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80007e2:	2355      	movs	r3, #85	; 0x55
 80007e4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007e6:	2302      	movs	r3, #2
 80007e8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007ea:	2302      	movs	r3, #2
 80007ec:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007ee:	2302      	movs	r3, #2
 80007f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f2:	f107 0318 	add.w	r3, r7, #24
 80007f6:	4618      	mov	r0, r3
 80007f8:	f000 ffa0 	bl	800173c <HAL_RCC_OscConfig>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000802:	f000 f833 	bl	800086c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000806:	230f      	movs	r3, #15
 8000808:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800080a:	2303      	movs	r3, #3
 800080c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800080e:	2300      	movs	r3, #0
 8000810:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000812:	2300      	movs	r3, #0
 8000814:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000816:	2300      	movs	r3, #0
 8000818:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800081a:	1d3b      	adds	r3, r7, #4
 800081c:	2104      	movs	r1, #4
 800081e:	4618      	mov	r0, r3
 8000820:	f001 fa9e 	bl	8001d60 <HAL_RCC_ClockConfig>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800082a:	f000 f81f 	bl	800086c <Error_Handler>
  }
}
 800082e:	bf00      	nop
 8000830:	3750      	adds	r7, #80	; 0x50
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
	...

08000838 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  // We will set a data flag here and execute in the main loop
  data_flag = 1;
 8000840:	4b04      	ldr	r3, [pc, #16]	; (8000854 <HAL_UART_RxCpltCallback+0x1c>)
 8000842:	2201      	movs	r2, #1
 8000844:	701a      	strb	r2, [r3, #0]
}
 8000846:	bf00      	nop
 8000848:	370c      	adds	r7, #12
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	20001068 	.word	0x20001068

08000858 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]

}
 8000860:	bf00      	nop
 8000862:	370c      	adds	r7, #12
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr

0800086c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000870:	b672      	cpsid	i
}
 8000872:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000874:	e7fe      	b.n	8000874 <Error_Handler+0x8>
	...

08000878 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800087e:	4b0f      	ldr	r3, [pc, #60]	; (80008bc <HAL_MspInit+0x44>)
 8000880:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000882:	4a0e      	ldr	r2, [pc, #56]	; (80008bc <HAL_MspInit+0x44>)
 8000884:	f043 0301 	orr.w	r3, r3, #1
 8000888:	6613      	str	r3, [r2, #96]	; 0x60
 800088a:	4b0c      	ldr	r3, [pc, #48]	; (80008bc <HAL_MspInit+0x44>)
 800088c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800088e:	f003 0301 	and.w	r3, r3, #1
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000896:	4b09      	ldr	r3, [pc, #36]	; (80008bc <HAL_MspInit+0x44>)
 8000898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800089a:	4a08      	ldr	r2, [pc, #32]	; (80008bc <HAL_MspInit+0x44>)
 800089c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a0:	6593      	str	r3, [r2, #88]	; 0x58
 80008a2:	4b06      	ldr	r3, [pc, #24]	; (80008bc <HAL_MspInit+0x44>)
 80008a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008aa:	603b      	str	r3, [r7, #0]
 80008ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80008ae:	f000 ff35 	bl	800171c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008b2:	bf00      	nop
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40021000 	.word	0x40021000

080008c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008c4:	e7fe      	b.n	80008c4 <NMI_Handler+0x4>

080008c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008c6:	b480      	push	{r7}
 80008c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ca:	e7fe      	b.n	80008ca <HardFault_Handler+0x4>

080008cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008d0:	e7fe      	b.n	80008d0 <MemManage_Handler+0x4>

080008d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008d6:	e7fe      	b.n	80008d6 <BusFault_Handler+0x4>

080008d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008dc:	e7fe      	b.n	80008dc <UsageFault_Handler+0x4>

080008de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008de:	b480      	push	{r7}
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008e2:	bf00      	nop
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr

080008ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008f0:	bf00      	nop
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr

080008fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008fa:	b480      	push	{r7}
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr

08000908 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800090c:	f000 f9e8 	bl	8000ce0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000910:	bf00      	nop
 8000912:	bd80      	pop	{r7, pc}

08000914 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000918:	4802      	ldr	r0, [pc, #8]	; (8000924 <USART2_IRQHandler+0x10>)
 800091a:	f002 faed 	bl	8002ef8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	200010bc 	.word	0x200010bc

08000928 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b086      	sub	sp, #24
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000930:	4a14      	ldr	r2, [pc, #80]	; (8000984 <_sbrk+0x5c>)
 8000932:	4b15      	ldr	r3, [pc, #84]	; (8000988 <_sbrk+0x60>)
 8000934:	1ad3      	subs	r3, r2, r3
 8000936:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800093c:	4b13      	ldr	r3, [pc, #76]	; (800098c <_sbrk+0x64>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d102      	bne.n	800094a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000944:	4b11      	ldr	r3, [pc, #68]	; (800098c <_sbrk+0x64>)
 8000946:	4a12      	ldr	r2, [pc, #72]	; (8000990 <_sbrk+0x68>)
 8000948:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800094a:	4b10      	ldr	r3, [pc, #64]	; (800098c <_sbrk+0x64>)
 800094c:	681a      	ldr	r2, [r3, #0]
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	4413      	add	r3, r2
 8000952:	693a      	ldr	r2, [r7, #16]
 8000954:	429a      	cmp	r2, r3
 8000956:	d207      	bcs.n	8000968 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000958:	f007 fd94 	bl	8008484 <__errno>
 800095c:	4603      	mov	r3, r0
 800095e:	220c      	movs	r2, #12
 8000960:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000962:	f04f 33ff 	mov.w	r3, #4294967295
 8000966:	e009      	b.n	800097c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000968:	4b08      	ldr	r3, [pc, #32]	; (800098c <_sbrk+0x64>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800096e:	4b07      	ldr	r3, [pc, #28]	; (800098c <_sbrk+0x64>)
 8000970:	681a      	ldr	r2, [r3, #0]
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4413      	add	r3, r2
 8000976:	4a05      	ldr	r2, [pc, #20]	; (800098c <_sbrk+0x64>)
 8000978:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800097a:	68fb      	ldr	r3, [r7, #12]
}
 800097c:	4618      	mov	r0, r3
 800097e:	3718      	adds	r7, #24
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	20008000 	.word	0x20008000
 8000988:	00000800 	.word	0x00000800
 800098c:	2000106c 	.word	0x2000106c
 8000990:	20001830 	.word	0x20001830

08000994 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000998:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <SystemInit+0x20>)
 800099a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800099e:	4a05      	ldr	r2, [pc, #20]	; (80009b4 <SystemInit+0x20>)
 80009a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	e000ed00 	.word	0xe000ed00

080009b8 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b088      	sub	sp, #32
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009be:	f107 0310 	add.w	r3, r7, #16
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]
 80009c8:	609a      	str	r2, [r3, #8]
 80009ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009cc:	1d3b      	adds	r3, r7, #4
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
 80009d2:	605a      	str	r2, [r3, #4]
 80009d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009d6:	4b1e      	ldr	r3, [pc, #120]	; (8000a50 <MX_TIM2_Init+0x98>)
 80009d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009dc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 170;
 80009de:	4b1c      	ldr	r3, [pc, #112]	; (8000a50 <MX_TIM2_Init+0x98>)
 80009e0:	22aa      	movs	r2, #170	; 0xaa
 80009e2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e4:	4b1a      	ldr	r3, [pc, #104]	; (8000a50 <MX_TIM2_Init+0x98>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 80009ea:	4b19      	ldr	r3, [pc, #100]	; (8000a50 <MX_TIM2_Init+0x98>)
 80009ec:	f04f 32ff 	mov.w	r2, #4294967295
 80009f0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009f2:	4b17      	ldr	r3, [pc, #92]	; (8000a50 <MX_TIM2_Init+0x98>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009f8:	4b15      	ldr	r3, [pc, #84]	; (8000a50 <MX_TIM2_Init+0x98>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009fe:	4814      	ldr	r0, [pc, #80]	; (8000a50 <MX_TIM2_Init+0x98>)
 8000a00:	f001 fdba 	bl	8002578 <HAL_TIM_Base_Init>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000a0a:	f7ff ff2f 	bl	800086c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a12:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a14:	f107 0310 	add.w	r3, r7, #16
 8000a18:	4619      	mov	r1, r3
 8000a1a:	480d      	ldr	r0, [pc, #52]	; (8000a50 <MX_TIM2_Init+0x98>)
 8000a1c:	f001 fe8e 	bl	800273c <HAL_TIM_ConfigClockSource>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000a26:	f7ff ff21 	bl	800086c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a32:	1d3b      	adds	r3, r7, #4
 8000a34:	4619      	mov	r1, r3
 8000a36:	4806      	ldr	r0, [pc, #24]	; (8000a50 <MX_TIM2_Init+0x98>)
 8000a38:	f002 f8b2 	bl	8002ba0 <HAL_TIMEx_MasterConfigSynchronization>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000a42:	f7ff ff13 	bl	800086c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a46:	bf00      	nop
 8000a48:	3720      	adds	r7, #32
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	20001070 	.word	0x20001070

08000a54 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b085      	sub	sp, #20
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a64:	d10b      	bne.n	8000a7e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a66:	4b09      	ldr	r3, [pc, #36]	; (8000a8c <HAL_TIM_Base_MspInit+0x38>)
 8000a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a6a:	4a08      	ldr	r2, [pc, #32]	; (8000a8c <HAL_TIM_Base_MspInit+0x38>)
 8000a6c:	f043 0301 	orr.w	r3, r3, #1
 8000a70:	6593      	str	r3, [r2, #88]	; 0x58
 8000a72:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <HAL_TIM_Base_MspInit+0x38>)
 8000a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a76:	f003 0301 	and.w	r3, r3, #1
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000a7e:	bf00      	nop
 8000a80:	3714      	adds	r7, #20
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	40021000 	.word	0x40021000

08000a90 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a94:	4b22      	ldr	r3, [pc, #136]	; (8000b20 <MX_USART2_UART_Init+0x90>)
 8000a96:	4a23      	ldr	r2, [pc, #140]	; (8000b24 <MX_USART2_UART_Init+0x94>)
 8000a98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a9a:	4b21      	ldr	r3, [pc, #132]	; (8000b20 <MX_USART2_UART_Init+0x90>)
 8000a9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000aa0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aa2:	4b1f      	ldr	r3, [pc, #124]	; (8000b20 <MX_USART2_UART_Init+0x90>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000aa8:	4b1d      	ldr	r3, [pc, #116]	; (8000b20 <MX_USART2_UART_Init+0x90>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000aae:	4b1c      	ldr	r3, [pc, #112]	; (8000b20 <MX_USART2_UART_Init+0x90>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ab4:	4b1a      	ldr	r3, [pc, #104]	; (8000b20 <MX_USART2_UART_Init+0x90>)
 8000ab6:	220c      	movs	r2, #12
 8000ab8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aba:	4b19      	ldr	r3, [pc, #100]	; (8000b20 <MX_USART2_UART_Init+0x90>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac0:	4b17      	ldr	r3, [pc, #92]	; (8000b20 <MX_USART2_UART_Init+0x90>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ac6:	4b16      	ldr	r3, [pc, #88]	; (8000b20 <MX_USART2_UART_Init+0x90>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000acc:	4b14      	ldr	r3, [pc, #80]	; (8000b20 <MX_USART2_UART_Init+0x90>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ad2:	4b13      	ldr	r3, [pc, #76]	; (8000b20 <MX_USART2_UART_Init+0x90>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ad8:	4811      	ldr	r0, [pc, #68]	; (8000b20 <MX_USART2_UART_Init+0x90>)
 8000ada:	f002 f8e3 	bl	8002ca4 <HAL_UART_Init>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000ae4:	f7ff fec2 	bl	800086c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ae8:	2100      	movs	r1, #0
 8000aea:	480d      	ldr	r0, [pc, #52]	; (8000b20 <MX_USART2_UART_Init+0x90>)
 8000aec:	f004 f901 	bl	8004cf2 <HAL_UARTEx_SetTxFifoThreshold>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000af6:	f7ff feb9 	bl	800086c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000afa:	2100      	movs	r1, #0
 8000afc:	4808      	ldr	r0, [pc, #32]	; (8000b20 <MX_USART2_UART_Init+0x90>)
 8000afe:	f004 f936 	bl	8004d6e <HAL_UARTEx_SetRxFifoThreshold>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000b08:	f7ff feb0 	bl	800086c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000b0c:	4804      	ldr	r0, [pc, #16]	; (8000b20 <MX_USART2_UART_Init+0x90>)
 8000b0e:	f004 f8b7 	bl	8004c80 <HAL_UARTEx_DisableFifoMode>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000b18:	f7ff fea8 	bl	800086c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b1c:	bf00      	nop
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	200010bc 	.word	0x200010bc
 8000b24:	40004400 	.word	0x40004400

08000b28 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b09a      	sub	sp, #104	; 0x68
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b30:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b40:	f107 0310 	add.w	r3, r7, #16
 8000b44:	2244      	movs	r2, #68	; 0x44
 8000b46:	2100      	movs	r1, #0
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f007 fc3d 	bl	80083c8 <memset>
  if(uartHandle->Instance==USART2)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4a23      	ldr	r2, [pc, #140]	; (8000be0 <HAL_UART_MspInit+0xb8>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d13e      	bne.n	8000bd6 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b60:	f107 0310 	add.w	r3, r7, #16
 8000b64:	4618      	mov	r0, r3
 8000b66:	f001 fb17 	bl	8002198 <HAL_RCCEx_PeriphCLKConfig>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b70:	f7ff fe7c 	bl	800086c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b74:	4b1b      	ldr	r3, [pc, #108]	; (8000be4 <HAL_UART_MspInit+0xbc>)
 8000b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b78:	4a1a      	ldr	r2, [pc, #104]	; (8000be4 <HAL_UART_MspInit+0xbc>)
 8000b7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b7e:	6593      	str	r3, [r2, #88]	; 0x58
 8000b80:	4b18      	ldr	r3, [pc, #96]	; (8000be4 <HAL_UART_MspInit+0xbc>)
 8000b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8c:	4b15      	ldr	r3, [pc, #84]	; (8000be4 <HAL_UART_MspInit+0xbc>)
 8000b8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b90:	4a14      	ldr	r2, [pc, #80]	; (8000be4 <HAL_UART_MspInit+0xbc>)
 8000b92:	f043 0301 	orr.w	r3, r3, #1
 8000b96:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b98:	4b12      	ldr	r3, [pc, #72]	; (8000be4 <HAL_UART_MspInit+0xbc>)
 8000b9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b9c:	f003 0301 	and.w	r3, r3, #1
 8000ba0:	60bb      	str	r3, [r7, #8]
 8000ba2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000ba4:	230c      	movs	r3, #12
 8000ba6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bb4:	2307      	movs	r3, #7
 8000bb6:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bc2:	f000 fb6d 	bl	80012a0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	2100      	movs	r1, #0
 8000bca:	2026      	movs	r0, #38	; 0x26
 8000bcc:	f000 f981 	bl	8000ed2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000bd0:	2026      	movs	r0, #38	; 0x26
 8000bd2:	f000 f998 	bl	8000f06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000bd6:	bf00      	nop
 8000bd8:	3768      	adds	r7, #104	; 0x68
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40004400 	.word	0x40004400
 8000be4:	40021000 	.word	0x40021000

08000be8 <Reset_Handler>:
 8000be8:	480d      	ldr	r0, [pc, #52]	; (8000c20 <LoopForever+0x2>)
 8000bea:	4685      	mov	sp, r0
 8000bec:	f7ff fed2 	bl	8000994 <SystemInit>
 8000bf0:	480c      	ldr	r0, [pc, #48]	; (8000c24 <LoopForever+0x6>)
 8000bf2:	490d      	ldr	r1, [pc, #52]	; (8000c28 <LoopForever+0xa>)
 8000bf4:	4a0d      	ldr	r2, [pc, #52]	; (8000c2c <LoopForever+0xe>)
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	e002      	b.n	8000c00 <LoopCopyDataInit>

08000bfa <CopyDataInit>:
 8000bfa:	58d4      	ldr	r4, [r2, r3]
 8000bfc:	50c4      	str	r4, [r0, r3]
 8000bfe:	3304      	adds	r3, #4

08000c00 <LoopCopyDataInit>:
 8000c00:	18c4      	adds	r4, r0, r3
 8000c02:	428c      	cmp	r4, r1
 8000c04:	d3f9      	bcc.n	8000bfa <CopyDataInit>
 8000c06:	4a0a      	ldr	r2, [pc, #40]	; (8000c30 <LoopForever+0x12>)
 8000c08:	4c0a      	ldr	r4, [pc, #40]	; (8000c34 <LoopForever+0x16>)
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	e001      	b.n	8000c12 <LoopFillZerobss>

08000c0e <FillZerobss>:
 8000c0e:	6013      	str	r3, [r2, #0]
 8000c10:	3204      	adds	r2, #4

08000c12 <LoopFillZerobss>:
 8000c12:	42a2      	cmp	r2, r4
 8000c14:	d3fb      	bcc.n	8000c0e <FillZerobss>
 8000c16:	f007 fc3b 	bl	8008490 <__libc_init_array>
 8000c1a:	f7ff fd51 	bl	80006c0 <main>

08000c1e <LoopForever>:
 8000c1e:	e7fe      	b.n	8000c1e <LoopForever>
 8000c20:	20008000 	.word	0x20008000
 8000c24:	20000000 	.word	0x20000000
 8000c28:	20000ff4 	.word	0x20000ff4
 8000c2c:	08014224 	.word	0x08014224
 8000c30:	20001000 	.word	0x20001000
 8000c34:	2000182c 	.word	0x2000182c

08000c38 <ADC1_2_IRQHandler>:
 8000c38:	e7fe      	b.n	8000c38 <ADC1_2_IRQHandler>

08000c3a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b082      	sub	sp, #8
 8000c3e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c40:	2300      	movs	r3, #0
 8000c42:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c44:	2003      	movs	r0, #3
 8000c46:	f000 f939 	bl	8000ebc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c4a:	2000      	movs	r0, #0
 8000c4c:	f000 f80e 	bl	8000c6c <HAL_InitTick>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d002      	beq.n	8000c5c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c56:	2301      	movs	r3, #1
 8000c58:	71fb      	strb	r3, [r7, #7]
 8000c5a:	e001      	b.n	8000c60 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c5c:	f7ff fe0c 	bl	8000878 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c60:	79fb      	ldrb	r3, [r7, #7]

}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
	...

08000c6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c74:	2300      	movs	r3, #0
 8000c76:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000c78:	4b16      	ldr	r3, [pc, #88]	; (8000cd4 <HAL_InitTick+0x68>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d022      	beq.n	8000cc6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000c80:	4b15      	ldr	r3, [pc, #84]	; (8000cd8 <HAL_InitTick+0x6c>)
 8000c82:	681a      	ldr	r2, [r3, #0]
 8000c84:	4b13      	ldr	r3, [pc, #76]	; (8000cd4 <HAL_InitTick+0x68>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c94:	4618      	mov	r0, r3
 8000c96:	f000 f944 	bl	8000f22 <HAL_SYSTICK_Config>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d10f      	bne.n	8000cc0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2b0f      	cmp	r3, #15
 8000ca4:	d809      	bhi.n	8000cba <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	6879      	ldr	r1, [r7, #4]
 8000caa:	f04f 30ff 	mov.w	r0, #4294967295
 8000cae:	f000 f910 	bl	8000ed2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cb2:	4a0a      	ldr	r2, [pc, #40]	; (8000cdc <HAL_InitTick+0x70>)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	6013      	str	r3, [r2, #0]
 8000cb8:	e007      	b.n	8000cca <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	73fb      	strb	r3, [r7, #15]
 8000cbe:	e004      	b.n	8000cca <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	73fb      	strb	r3, [r7, #15]
 8000cc4:	e001      	b.n	8000cca <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cca:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3710      	adds	r7, #16
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	20000008 	.word	0x20000008
 8000cd8:	20000000 	.word	0x20000000
 8000cdc:	20000004 	.word	0x20000004

08000ce0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ce4:	4b05      	ldr	r3, [pc, #20]	; (8000cfc <HAL_IncTick+0x1c>)
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	4b05      	ldr	r3, [pc, #20]	; (8000d00 <HAL_IncTick+0x20>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4413      	add	r3, r2
 8000cee:	4a03      	ldr	r2, [pc, #12]	; (8000cfc <HAL_IncTick+0x1c>)
 8000cf0:	6013      	str	r3, [r2, #0]
}
 8000cf2:	bf00      	nop
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	20001150 	.word	0x20001150
 8000d00:	20000008 	.word	0x20000008

08000d04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  return uwTick;
 8000d08:	4b03      	ldr	r3, [pc, #12]	; (8000d18 <HAL_GetTick+0x14>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	20001150 	.word	0x20001150

08000d1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b085      	sub	sp, #20
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	f003 0307 	and.w	r3, r3, #7
 8000d2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d2c:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <__NVIC_SetPriorityGrouping+0x44>)
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d32:	68ba      	ldr	r2, [r7, #8]
 8000d34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d38:	4013      	ands	r3, r2
 8000d3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d4e:	4a04      	ldr	r2, [pc, #16]	; (8000d60 <__NVIC_SetPriorityGrouping+0x44>)
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	60d3      	str	r3, [r2, #12]
}
 8000d54:	bf00      	nop
 8000d56:	3714      	adds	r7, #20
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d68:	4b04      	ldr	r3, [pc, #16]	; (8000d7c <__NVIC_GetPriorityGrouping+0x18>)
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	0a1b      	lsrs	r3, r3, #8
 8000d6e:	f003 0307 	and.w	r3, r3, #7
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	db0b      	blt.n	8000daa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	f003 021f 	and.w	r2, r3, #31
 8000d98:	4907      	ldr	r1, [pc, #28]	; (8000db8 <__NVIC_EnableIRQ+0x38>)
 8000d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9e:	095b      	lsrs	r3, r3, #5
 8000da0:	2001      	movs	r0, #1
 8000da2:	fa00 f202 	lsl.w	r2, r0, r2
 8000da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000daa:	bf00      	nop
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	e000e100 	.word	0xe000e100

08000dbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	6039      	str	r1, [r7, #0]
 8000dc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	db0a      	blt.n	8000de6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	b2da      	uxtb	r2, r3
 8000dd4:	490c      	ldr	r1, [pc, #48]	; (8000e08 <__NVIC_SetPriority+0x4c>)
 8000dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dda:	0112      	lsls	r2, r2, #4
 8000ddc:	b2d2      	uxtb	r2, r2
 8000dde:	440b      	add	r3, r1
 8000de0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000de4:	e00a      	b.n	8000dfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	b2da      	uxtb	r2, r3
 8000dea:	4908      	ldr	r1, [pc, #32]	; (8000e0c <__NVIC_SetPriority+0x50>)
 8000dec:	79fb      	ldrb	r3, [r7, #7]
 8000dee:	f003 030f 	and.w	r3, r3, #15
 8000df2:	3b04      	subs	r3, #4
 8000df4:	0112      	lsls	r2, r2, #4
 8000df6:	b2d2      	uxtb	r2, r2
 8000df8:	440b      	add	r3, r1
 8000dfa:	761a      	strb	r2, [r3, #24]
}
 8000dfc:	bf00      	nop
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	e000e100 	.word	0xe000e100
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b089      	sub	sp, #36	; 0x24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	f003 0307 	and.w	r3, r3, #7
 8000e22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	f1c3 0307 	rsb	r3, r3, #7
 8000e2a:	2b04      	cmp	r3, #4
 8000e2c:	bf28      	it	cs
 8000e2e:	2304      	movcs	r3, #4
 8000e30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	3304      	adds	r3, #4
 8000e36:	2b06      	cmp	r3, #6
 8000e38:	d902      	bls.n	8000e40 <NVIC_EncodePriority+0x30>
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	3b03      	subs	r3, #3
 8000e3e:	e000      	b.n	8000e42 <NVIC_EncodePriority+0x32>
 8000e40:	2300      	movs	r3, #0
 8000e42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e44:	f04f 32ff 	mov.w	r2, #4294967295
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	43da      	mvns	r2, r3
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	401a      	ands	r2, r3
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e58:	f04f 31ff 	mov.w	r1, #4294967295
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e62:	43d9      	mvns	r1, r3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e68:	4313      	orrs	r3, r2
         );
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3724      	adds	r7, #36	; 0x24
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
	...

08000e78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	3b01      	subs	r3, #1
 8000e84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e88:	d301      	bcc.n	8000e8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e00f      	b.n	8000eae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e8e:	4a0a      	ldr	r2, [pc, #40]	; (8000eb8 <SysTick_Config+0x40>)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	3b01      	subs	r3, #1
 8000e94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e96:	210f      	movs	r1, #15
 8000e98:	f04f 30ff 	mov.w	r0, #4294967295
 8000e9c:	f7ff ff8e 	bl	8000dbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ea0:	4b05      	ldr	r3, [pc, #20]	; (8000eb8 <SysTick_Config+0x40>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ea6:	4b04      	ldr	r3, [pc, #16]	; (8000eb8 <SysTick_Config+0x40>)
 8000ea8:	2207      	movs	r2, #7
 8000eaa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eac:	2300      	movs	r3, #0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	e000e010 	.word	0xe000e010

08000ebc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	f7ff ff29 	bl	8000d1c <__NVIC_SetPriorityGrouping>
}
 8000eca:	bf00      	nop
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b086      	sub	sp, #24
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	4603      	mov	r3, r0
 8000eda:	60b9      	str	r1, [r7, #8]
 8000edc:	607a      	str	r2, [r7, #4]
 8000ede:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ee0:	f7ff ff40 	bl	8000d64 <__NVIC_GetPriorityGrouping>
 8000ee4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ee6:	687a      	ldr	r2, [r7, #4]
 8000ee8:	68b9      	ldr	r1, [r7, #8]
 8000eea:	6978      	ldr	r0, [r7, #20]
 8000eec:	f7ff ff90 	bl	8000e10 <NVIC_EncodePriority>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ef6:	4611      	mov	r1, r2
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff ff5f 	bl	8000dbc <__NVIC_SetPriority>
}
 8000efe:	bf00      	nop
 8000f00:	3718      	adds	r7, #24
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b082      	sub	sp, #8
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff ff33 	bl	8000d80 <__NVIC_EnableIRQ>
}
 8000f1a:	bf00      	nop
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b082      	sub	sp, #8
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f7ff ffa4 	bl	8000e78 <SysTick_Config>
 8000f30:	4603      	mov	r3, r0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
	...

08000f3c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d101      	bne.n	8000f4e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e054      	b.n	8000ff8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	7f5b      	ldrb	r3, [r3, #29]
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d105      	bne.n	8000f64 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f7ff fb4e 	bl	8000600 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2202      	movs	r2, #2
 8000f68:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	791b      	ldrb	r3, [r3, #4]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d10c      	bne.n	8000f8c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a22      	ldr	r2, [pc, #136]	; (8001000 <HAL_CRC_Init+0xc4>)
 8000f78:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	689a      	ldr	r2, [r3, #8]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f022 0218 	bic.w	r2, r2, #24
 8000f88:	609a      	str	r2, [r3, #8]
 8000f8a:	e00c      	b.n	8000fa6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6899      	ldr	r1, [r3, #8]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	461a      	mov	r2, r3
 8000f96:	6878      	ldr	r0, [r7, #4]
 8000f98:	f000 f834 	bl	8001004 <HAL_CRCEx_Polynomial_Set>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e028      	b.n	8000ff8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	795b      	ldrb	r3, [r3, #5]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d105      	bne.n	8000fba <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f04f 32ff 	mov.w	r2, #4294967295
 8000fb6:	611a      	str	r2, [r3, #16]
 8000fb8:	e004      	b.n	8000fc4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	6912      	ldr	r2, [r2, #16]
 8000fc2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	695a      	ldr	r2, [r3, #20]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	430a      	orrs	r2, r1
 8000fd8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	699a      	ldr	r2, [r3, #24]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	430a      	orrs	r2, r1
 8000fee:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8000ff6:	2300      	movs	r3, #0
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	04c11db7 	.word	0x04c11db7

08001004 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001004:	b480      	push	{r7}
 8001006:	b087      	sub	sp, #28
 8001008:	af00      	add	r7, sp, #0
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001010:	2300      	movs	r3, #0
 8001012:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001014:	231f      	movs	r3, #31
 8001016:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	2b00      	cmp	r3, #0
 8001020:	d102      	bne.n	8001028 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	75fb      	strb	r3, [r7, #23]
 8001026:	e063      	b.n	80010f0 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001028:	bf00      	nop
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	1e5a      	subs	r2, r3, #1
 800102e:	613a      	str	r2, [r7, #16]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d009      	beq.n	8001048 <HAL_CRCEx_Polynomial_Set+0x44>
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	f003 031f 	and.w	r3, r3, #31
 800103a:	68ba      	ldr	r2, [r7, #8]
 800103c:	fa22 f303 	lsr.w	r3, r2, r3
 8001040:	f003 0301 	and.w	r3, r3, #1
 8001044:	2b00      	cmp	r3, #0
 8001046:	d0f0      	beq.n	800102a <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2b18      	cmp	r3, #24
 800104c:	d846      	bhi.n	80010dc <HAL_CRCEx_Polynomial_Set+0xd8>
 800104e:	a201      	add	r2, pc, #4	; (adr r2, 8001054 <HAL_CRCEx_Polynomial_Set+0x50>)
 8001050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001054:	080010e3 	.word	0x080010e3
 8001058:	080010dd 	.word	0x080010dd
 800105c:	080010dd 	.word	0x080010dd
 8001060:	080010dd 	.word	0x080010dd
 8001064:	080010dd 	.word	0x080010dd
 8001068:	080010dd 	.word	0x080010dd
 800106c:	080010dd 	.word	0x080010dd
 8001070:	080010dd 	.word	0x080010dd
 8001074:	080010d1 	.word	0x080010d1
 8001078:	080010dd 	.word	0x080010dd
 800107c:	080010dd 	.word	0x080010dd
 8001080:	080010dd 	.word	0x080010dd
 8001084:	080010dd 	.word	0x080010dd
 8001088:	080010dd 	.word	0x080010dd
 800108c:	080010dd 	.word	0x080010dd
 8001090:	080010dd 	.word	0x080010dd
 8001094:	080010c5 	.word	0x080010c5
 8001098:	080010dd 	.word	0x080010dd
 800109c:	080010dd 	.word	0x080010dd
 80010a0:	080010dd 	.word	0x080010dd
 80010a4:	080010dd 	.word	0x080010dd
 80010a8:	080010dd 	.word	0x080010dd
 80010ac:	080010dd 	.word	0x080010dd
 80010b0:	080010dd 	.word	0x080010dd
 80010b4:	080010b9 	.word	0x080010b9
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	2b06      	cmp	r3, #6
 80010bc:	d913      	bls.n	80010e6 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80010c2:	e010      	b.n	80010e6 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	2b07      	cmp	r3, #7
 80010c8:	d90f      	bls.n	80010ea <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80010ce:	e00c      	b.n	80010ea <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	2b0f      	cmp	r3, #15
 80010d4:	d90b      	bls.n	80010ee <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80010da:	e008      	b.n	80010ee <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80010dc:	2301      	movs	r3, #1
 80010de:	75fb      	strb	r3, [r7, #23]
        break;
 80010e0:	e006      	b.n	80010f0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80010e2:	bf00      	nop
 80010e4:	e004      	b.n	80010f0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80010e6:	bf00      	nop
 80010e8:	e002      	b.n	80010f0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80010ea:	bf00      	nop
 80010ec:	e000      	b.n	80010f0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80010ee:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80010f0:	7dfb      	ldrb	r3, [r7, #23]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d10d      	bne.n	8001112 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	68ba      	ldr	r2, [r7, #8]
 80010fc:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	f023 0118 	bic.w	r1, r3, #24
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	687a      	ldr	r2, [r7, #4]
 800110e:	430a      	orrs	r2, r1
 8001110:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001112:	7dfb      	ldrb	r3, [r7, #23]
}
 8001114:	4618      	mov	r0, r3
 8001116:	371c      	adds	r7, #28
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001120:	b480      	push	{r7}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001128:	2300      	movs	r3, #0
 800112a:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001132:	b2db      	uxtb	r3, r3
 8001134:	2b02      	cmp	r3, #2
 8001136:	d005      	beq.n	8001144 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2204      	movs	r2, #4
 800113c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	73fb      	strb	r3, [r7, #15]
 8001142:	e037      	b.n	80011b4 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f022 020e 	bic.w	r2, r2, #14
 8001152:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800115e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001162:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f022 0201 	bic.w	r2, r2, #1
 8001172:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001178:	f003 021f 	and.w	r2, r3, #31
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001180:	2101      	movs	r1, #1
 8001182:	fa01 f202 	lsl.w	r2, r1, r2
 8001186:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001190:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001196:	2b00      	cmp	r3, #0
 8001198:	d00c      	beq.n	80011b4 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80011a8:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ae:	687a      	ldr	r2, [r7, #4]
 80011b0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80011b2:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2201      	movs	r2, #1
 80011b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2200      	movs	r2, #0
 80011c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80011c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3714      	adds	r7, #20
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr

080011d2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b084      	sub	sp, #16
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011da:	2300      	movs	r3, #0
 80011dc:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	2b02      	cmp	r3, #2
 80011e8:	d00d      	beq.n	8001206 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2204      	movs	r2, #4
 80011ee:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2201      	movs	r2, #1
 80011f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2200      	movs	r2, #0
 80011fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001200:	2301      	movs	r3, #1
 8001202:	73fb      	strb	r3, [r7, #15]
 8001204:	e047      	b.n	8001296 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f022 020e 	bic.w	r2, r2, #14
 8001214:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f022 0201 	bic.w	r2, r2, #1
 8001224:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001230:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001234:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123a:	f003 021f 	and.w	r2, r3, #31
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001242:	2101      	movs	r1, #1
 8001244:	fa01 f202 	lsl.w	r2, r1, r2
 8001248:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001252:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001258:	2b00      	cmp	r3, #0
 800125a:	d00c      	beq.n	8001276 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001266:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800126a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001274:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2201      	movs	r2, #1
 800127a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2200      	movs	r2, #0
 8001282:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800128a:	2b00      	cmp	r3, #0
 800128c:	d003      	beq.n	8001296 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	4798      	blx	r3
    }
  }
  return status;
 8001296:	7bfb      	ldrb	r3, [r7, #15]
}
 8001298:	4618      	mov	r0, r3
 800129a:	3710      	adds	r7, #16
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b087      	sub	sp, #28
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80012aa:	2300      	movs	r3, #0
 80012ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80012ae:	e15a      	b.n	8001566 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	2101      	movs	r1, #1
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	fa01 f303 	lsl.w	r3, r1, r3
 80012bc:	4013      	ands	r3, r2
 80012be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	f000 814c 	beq.w	8001560 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f003 0303 	and.w	r3, r3, #3
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d005      	beq.n	80012e0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d130      	bne.n	8001342 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	2203      	movs	r2, #3
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	43db      	mvns	r3, r3
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	4013      	ands	r3, r2
 80012f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	68da      	ldr	r2, [r3, #12]
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	693a      	ldr	r2, [r7, #16]
 8001306:	4313      	orrs	r3, r2
 8001308:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001316:	2201      	movs	r2, #1
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
 800131e:	43db      	mvns	r3, r3
 8001320:	693a      	ldr	r2, [r7, #16]
 8001322:	4013      	ands	r3, r2
 8001324:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	091b      	lsrs	r3, r3, #4
 800132c:	f003 0201 	and.w	r2, r3, #1
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	fa02 f303 	lsl.w	r3, r2, r3
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	4313      	orrs	r3, r2
 800133a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	693a      	ldr	r2, [r7, #16]
 8001340:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f003 0303 	and.w	r3, r3, #3
 800134a:	2b03      	cmp	r3, #3
 800134c:	d017      	beq.n	800137e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	68db      	ldr	r3, [r3, #12]
 8001352:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	2203      	movs	r2, #3
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	43db      	mvns	r3, r3
 8001360:	693a      	ldr	r2, [r7, #16]
 8001362:	4013      	ands	r3, r2
 8001364:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	689a      	ldr	r2, [r3, #8]
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	fa02 f303 	lsl.w	r3, r2, r3
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	4313      	orrs	r3, r2
 8001376:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f003 0303 	and.w	r3, r3, #3
 8001386:	2b02      	cmp	r3, #2
 8001388:	d123      	bne.n	80013d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	08da      	lsrs	r2, r3, #3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	3208      	adds	r2, #8
 8001392:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001396:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	f003 0307 	and.w	r3, r3, #7
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	220f      	movs	r2, #15
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	43db      	mvns	r3, r3
 80013a8:	693a      	ldr	r2, [r7, #16]
 80013aa:	4013      	ands	r3, r2
 80013ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	691a      	ldr	r2, [r3, #16]
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	f003 0307 	and.w	r3, r3, #7
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	fa02 f303 	lsl.w	r3, r2, r3
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	08da      	lsrs	r2, r3, #3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	3208      	adds	r2, #8
 80013cc:	6939      	ldr	r1, [r7, #16]
 80013ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	2203      	movs	r2, #3
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	43db      	mvns	r3, r3
 80013e4:	693a      	ldr	r2, [r7, #16]
 80013e6:	4013      	ands	r3, r2
 80013e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f003 0203 	and.w	r2, r3, #3
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800140e:	2b00      	cmp	r3, #0
 8001410:	f000 80a6 	beq.w	8001560 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001414:	4b5b      	ldr	r3, [pc, #364]	; (8001584 <HAL_GPIO_Init+0x2e4>)
 8001416:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001418:	4a5a      	ldr	r2, [pc, #360]	; (8001584 <HAL_GPIO_Init+0x2e4>)
 800141a:	f043 0301 	orr.w	r3, r3, #1
 800141e:	6613      	str	r3, [r2, #96]	; 0x60
 8001420:	4b58      	ldr	r3, [pc, #352]	; (8001584 <HAL_GPIO_Init+0x2e4>)
 8001422:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001424:	f003 0301 	and.w	r3, r3, #1
 8001428:	60bb      	str	r3, [r7, #8]
 800142a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800142c:	4a56      	ldr	r2, [pc, #344]	; (8001588 <HAL_GPIO_Init+0x2e8>)
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	089b      	lsrs	r3, r3, #2
 8001432:	3302      	adds	r3, #2
 8001434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001438:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	f003 0303 	and.w	r3, r3, #3
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	220f      	movs	r2, #15
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	43db      	mvns	r3, r3
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	4013      	ands	r3, r2
 800144e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001456:	d01f      	beq.n	8001498 <HAL_GPIO_Init+0x1f8>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	4a4c      	ldr	r2, [pc, #304]	; (800158c <HAL_GPIO_Init+0x2ec>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d019      	beq.n	8001494 <HAL_GPIO_Init+0x1f4>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	4a4b      	ldr	r2, [pc, #300]	; (8001590 <HAL_GPIO_Init+0x2f0>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d013      	beq.n	8001490 <HAL_GPIO_Init+0x1f0>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	4a4a      	ldr	r2, [pc, #296]	; (8001594 <HAL_GPIO_Init+0x2f4>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d00d      	beq.n	800148c <HAL_GPIO_Init+0x1ec>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	4a49      	ldr	r2, [pc, #292]	; (8001598 <HAL_GPIO_Init+0x2f8>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d007      	beq.n	8001488 <HAL_GPIO_Init+0x1e8>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	4a48      	ldr	r2, [pc, #288]	; (800159c <HAL_GPIO_Init+0x2fc>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d101      	bne.n	8001484 <HAL_GPIO_Init+0x1e4>
 8001480:	2305      	movs	r3, #5
 8001482:	e00a      	b.n	800149a <HAL_GPIO_Init+0x1fa>
 8001484:	2306      	movs	r3, #6
 8001486:	e008      	b.n	800149a <HAL_GPIO_Init+0x1fa>
 8001488:	2304      	movs	r3, #4
 800148a:	e006      	b.n	800149a <HAL_GPIO_Init+0x1fa>
 800148c:	2303      	movs	r3, #3
 800148e:	e004      	b.n	800149a <HAL_GPIO_Init+0x1fa>
 8001490:	2302      	movs	r3, #2
 8001492:	e002      	b.n	800149a <HAL_GPIO_Init+0x1fa>
 8001494:	2301      	movs	r3, #1
 8001496:	e000      	b.n	800149a <HAL_GPIO_Init+0x1fa>
 8001498:	2300      	movs	r3, #0
 800149a:	697a      	ldr	r2, [r7, #20]
 800149c:	f002 0203 	and.w	r2, r2, #3
 80014a0:	0092      	lsls	r2, r2, #2
 80014a2:	4093      	lsls	r3, r2
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014aa:	4937      	ldr	r1, [pc, #220]	; (8001588 <HAL_GPIO_Init+0x2e8>)
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	089b      	lsrs	r3, r3, #2
 80014b0:	3302      	adds	r3, #2
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014b8:	4b39      	ldr	r3, [pc, #228]	; (80015a0 <HAL_GPIO_Init+0x300>)
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	43db      	mvns	r3, r3
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	4013      	ands	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d003      	beq.n	80014dc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	4313      	orrs	r3, r2
 80014da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80014dc:	4a30      	ldr	r2, [pc, #192]	; (80015a0 <HAL_GPIO_Init+0x300>)
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80014e2:	4b2f      	ldr	r3, [pc, #188]	; (80015a0 <HAL_GPIO_Init+0x300>)
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	43db      	mvns	r3, r3
 80014ec:	693a      	ldr	r2, [r7, #16]
 80014ee:	4013      	ands	r3, r2
 80014f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d003      	beq.n	8001506 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	4313      	orrs	r3, r2
 8001504:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001506:	4a26      	ldr	r2, [pc, #152]	; (80015a0 <HAL_GPIO_Init+0x300>)
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800150c:	4b24      	ldr	r3, [pc, #144]	; (80015a0 <HAL_GPIO_Init+0x300>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	43db      	mvns	r3, r3
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	4013      	ands	r3, r2
 800151a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001524:	2b00      	cmp	r3, #0
 8001526:	d003      	beq.n	8001530 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001528:	693a      	ldr	r2, [r7, #16]
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	4313      	orrs	r3, r2
 800152e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001530:	4a1b      	ldr	r2, [pc, #108]	; (80015a0 <HAL_GPIO_Init+0x300>)
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001536:	4b1a      	ldr	r3, [pc, #104]	; (80015a0 <HAL_GPIO_Init+0x300>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	43db      	mvns	r3, r3
 8001540:	693a      	ldr	r2, [r7, #16]
 8001542:	4013      	ands	r3, r2
 8001544:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d003      	beq.n	800155a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	4313      	orrs	r3, r2
 8001558:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800155a:	4a11      	ldr	r2, [pc, #68]	; (80015a0 <HAL_GPIO_Init+0x300>)
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	3301      	adds	r3, #1
 8001564:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	fa22 f303 	lsr.w	r3, r2, r3
 8001570:	2b00      	cmp	r3, #0
 8001572:	f47f ae9d 	bne.w	80012b0 <HAL_GPIO_Init+0x10>
  }
}
 8001576:	bf00      	nop
 8001578:	bf00      	nop
 800157a:	371c      	adds	r7, #28
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr
 8001584:	40021000 	.word	0x40021000
 8001588:	40010000 	.word	0x40010000
 800158c:	48000400 	.word	0x48000400
 8001590:	48000800 	.word	0x48000800
 8001594:	48000c00 	.word	0x48000c00
 8001598:	48001000 	.word	0x48001000
 800159c:	48001400 	.word	0x48001400
 80015a0:	40010400 	.word	0x40010400

080015a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	460b      	mov	r3, r1
 80015ae:	807b      	strh	r3, [r7, #2]
 80015b0:	4613      	mov	r3, r2
 80015b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015b4:	787b      	ldrb	r3, [r7, #1]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d003      	beq.n	80015c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015ba:	887a      	ldrh	r2, [r7, #2]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015c0:	e002      	b.n	80015c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015c2:	887a      	ldrh	r2, [r7, #2]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015c8:	bf00      	nop
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d141      	bne.n	8001666 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80015e2:	4b4b      	ldr	r3, [pc, #300]	; (8001710 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015ee:	d131      	bne.n	8001654 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80015f0:	4b47      	ldr	r3, [pc, #284]	; (8001710 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80015f6:	4a46      	ldr	r2, [pc, #280]	; (8001710 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001600:	4b43      	ldr	r3, [pc, #268]	; (8001710 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001608:	4a41      	ldr	r2, [pc, #260]	; (8001710 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800160a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800160e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001610:	4b40      	ldr	r3, [pc, #256]	; (8001714 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2232      	movs	r2, #50	; 0x32
 8001616:	fb02 f303 	mul.w	r3, r2, r3
 800161a:	4a3f      	ldr	r2, [pc, #252]	; (8001718 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800161c:	fba2 2303 	umull	r2, r3, r2, r3
 8001620:	0c9b      	lsrs	r3, r3, #18
 8001622:	3301      	adds	r3, #1
 8001624:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001626:	e002      	b.n	800162e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	3b01      	subs	r3, #1
 800162c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800162e:	4b38      	ldr	r3, [pc, #224]	; (8001710 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001630:	695b      	ldr	r3, [r3, #20]
 8001632:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001636:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800163a:	d102      	bne.n	8001642 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d1f2      	bne.n	8001628 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001642:	4b33      	ldr	r3, [pc, #204]	; (8001710 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001644:	695b      	ldr	r3, [r3, #20]
 8001646:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800164a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800164e:	d158      	bne.n	8001702 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001650:	2303      	movs	r3, #3
 8001652:	e057      	b.n	8001704 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001654:	4b2e      	ldr	r3, [pc, #184]	; (8001710 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001656:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800165a:	4a2d      	ldr	r2, [pc, #180]	; (8001710 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800165c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001660:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001664:	e04d      	b.n	8001702 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800166c:	d141      	bne.n	80016f2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800166e:	4b28      	ldr	r3, [pc, #160]	; (8001710 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001676:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800167a:	d131      	bne.n	80016e0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800167c:	4b24      	ldr	r3, [pc, #144]	; (8001710 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800167e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001682:	4a23      	ldr	r2, [pc, #140]	; (8001710 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001684:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001688:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800168c:	4b20      	ldr	r3, [pc, #128]	; (8001710 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001694:	4a1e      	ldr	r2, [pc, #120]	; (8001710 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001696:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800169a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800169c:	4b1d      	ldr	r3, [pc, #116]	; (8001714 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2232      	movs	r2, #50	; 0x32
 80016a2:	fb02 f303 	mul.w	r3, r2, r3
 80016a6:	4a1c      	ldr	r2, [pc, #112]	; (8001718 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80016a8:	fba2 2303 	umull	r2, r3, r2, r3
 80016ac:	0c9b      	lsrs	r3, r3, #18
 80016ae:	3301      	adds	r3, #1
 80016b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016b2:	e002      	b.n	80016ba <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	3b01      	subs	r3, #1
 80016b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016ba:	4b15      	ldr	r3, [pc, #84]	; (8001710 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016bc:	695b      	ldr	r3, [r3, #20]
 80016be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016c6:	d102      	bne.n	80016ce <HAL_PWREx_ControlVoltageScaling+0xfa>
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d1f2      	bne.n	80016b4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016ce:	4b10      	ldr	r3, [pc, #64]	; (8001710 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016d0:	695b      	ldr	r3, [r3, #20]
 80016d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016da:	d112      	bne.n	8001702 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e011      	b.n	8001704 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80016e0:	4b0b      	ldr	r3, [pc, #44]	; (8001710 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016e6:	4a0a      	ldr	r2, [pc, #40]	; (8001710 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80016f0:	e007      	b.n	8001702 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80016f2:	4b07      	ldr	r3, [pc, #28]	; (8001710 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016fa:	4a05      	ldr	r2, [pc, #20]	; (8001710 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001700:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001702:	2300      	movs	r3, #0
}
 8001704:	4618      	mov	r0, r3
 8001706:	3714      	adds	r7, #20
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr
 8001710:	40007000 	.word	0x40007000
 8001714:	20000000 	.word	0x20000000
 8001718:	431bde83 	.word	0x431bde83

0800171c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001720:	4b05      	ldr	r3, [pc, #20]	; (8001738 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	4a04      	ldr	r2, [pc, #16]	; (8001738 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001726:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800172a:	6093      	str	r3, [r2, #8]
}
 800172c:	bf00      	nop
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	40007000 	.word	0x40007000

0800173c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b088      	sub	sp, #32
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d101      	bne.n	800174e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e2fe      	b.n	8001d4c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	2b00      	cmp	r3, #0
 8001758:	d075      	beq.n	8001846 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800175a:	4b97      	ldr	r3, [pc, #604]	; (80019b8 <HAL_RCC_OscConfig+0x27c>)
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	f003 030c 	and.w	r3, r3, #12
 8001762:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001764:	4b94      	ldr	r3, [pc, #592]	; (80019b8 <HAL_RCC_OscConfig+0x27c>)
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	f003 0303 	and.w	r3, r3, #3
 800176c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	2b0c      	cmp	r3, #12
 8001772:	d102      	bne.n	800177a <HAL_RCC_OscConfig+0x3e>
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	2b03      	cmp	r3, #3
 8001778:	d002      	beq.n	8001780 <HAL_RCC_OscConfig+0x44>
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	2b08      	cmp	r3, #8
 800177e:	d10b      	bne.n	8001798 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001780:	4b8d      	ldr	r3, [pc, #564]	; (80019b8 <HAL_RCC_OscConfig+0x27c>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001788:	2b00      	cmp	r3, #0
 800178a:	d05b      	beq.n	8001844 <HAL_RCC_OscConfig+0x108>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d157      	bne.n	8001844 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e2d9      	b.n	8001d4c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017a0:	d106      	bne.n	80017b0 <HAL_RCC_OscConfig+0x74>
 80017a2:	4b85      	ldr	r3, [pc, #532]	; (80019b8 <HAL_RCC_OscConfig+0x27c>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a84      	ldr	r2, [pc, #528]	; (80019b8 <HAL_RCC_OscConfig+0x27c>)
 80017a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017ac:	6013      	str	r3, [r2, #0]
 80017ae:	e01d      	b.n	80017ec <HAL_RCC_OscConfig+0xb0>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017b8:	d10c      	bne.n	80017d4 <HAL_RCC_OscConfig+0x98>
 80017ba:	4b7f      	ldr	r3, [pc, #508]	; (80019b8 <HAL_RCC_OscConfig+0x27c>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a7e      	ldr	r2, [pc, #504]	; (80019b8 <HAL_RCC_OscConfig+0x27c>)
 80017c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017c4:	6013      	str	r3, [r2, #0]
 80017c6:	4b7c      	ldr	r3, [pc, #496]	; (80019b8 <HAL_RCC_OscConfig+0x27c>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a7b      	ldr	r2, [pc, #492]	; (80019b8 <HAL_RCC_OscConfig+0x27c>)
 80017cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017d0:	6013      	str	r3, [r2, #0]
 80017d2:	e00b      	b.n	80017ec <HAL_RCC_OscConfig+0xb0>
 80017d4:	4b78      	ldr	r3, [pc, #480]	; (80019b8 <HAL_RCC_OscConfig+0x27c>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a77      	ldr	r2, [pc, #476]	; (80019b8 <HAL_RCC_OscConfig+0x27c>)
 80017da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017de:	6013      	str	r3, [r2, #0]
 80017e0:	4b75      	ldr	r3, [pc, #468]	; (80019b8 <HAL_RCC_OscConfig+0x27c>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a74      	ldr	r2, [pc, #464]	; (80019b8 <HAL_RCC_OscConfig+0x27c>)
 80017e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d013      	beq.n	800181c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f4:	f7ff fa86 	bl	8000d04 <HAL_GetTick>
 80017f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017fa:	e008      	b.n	800180e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017fc:	f7ff fa82 	bl	8000d04 <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b64      	cmp	r3, #100	; 0x64
 8001808:	d901      	bls.n	800180e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e29e      	b.n	8001d4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800180e:	4b6a      	ldr	r3, [pc, #424]	; (80019b8 <HAL_RCC_OscConfig+0x27c>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d0f0      	beq.n	80017fc <HAL_RCC_OscConfig+0xc0>
 800181a:	e014      	b.n	8001846 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800181c:	f7ff fa72 	bl	8000d04 <HAL_GetTick>
 8001820:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001822:	e008      	b.n	8001836 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001824:	f7ff fa6e 	bl	8000d04 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	2b64      	cmp	r3, #100	; 0x64
 8001830:	d901      	bls.n	8001836 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e28a      	b.n	8001d4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001836:	4b60      	ldr	r3, [pc, #384]	; (80019b8 <HAL_RCC_OscConfig+0x27c>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d1f0      	bne.n	8001824 <HAL_RCC_OscConfig+0xe8>
 8001842:	e000      	b.n	8001846 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001844:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	2b00      	cmp	r3, #0
 8001850:	d075      	beq.n	800193e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001852:	4b59      	ldr	r3, [pc, #356]	; (80019b8 <HAL_RCC_OscConfig+0x27c>)
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	f003 030c 	and.w	r3, r3, #12
 800185a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800185c:	4b56      	ldr	r3, [pc, #344]	; (80019b8 <HAL_RCC_OscConfig+0x27c>)
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	f003 0303 	and.w	r3, r3, #3
 8001864:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	2b0c      	cmp	r3, #12
 800186a:	d102      	bne.n	8001872 <HAL_RCC_OscConfig+0x136>
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	2b02      	cmp	r3, #2
 8001870:	d002      	beq.n	8001878 <HAL_RCC_OscConfig+0x13c>
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	2b04      	cmp	r3, #4
 8001876:	d11f      	bne.n	80018b8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001878:	4b4f      	ldr	r3, [pc, #316]	; (80019b8 <HAL_RCC_OscConfig+0x27c>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001880:	2b00      	cmp	r3, #0
 8001882:	d005      	beq.n	8001890 <HAL_RCC_OscConfig+0x154>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d101      	bne.n	8001890 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e25d      	b.n	8001d4c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001890:	4b49      	ldr	r3, [pc, #292]	; (80019b8 <HAL_RCC_OscConfig+0x27c>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	691b      	ldr	r3, [r3, #16]
 800189c:	061b      	lsls	r3, r3, #24
 800189e:	4946      	ldr	r1, [pc, #280]	; (80019b8 <HAL_RCC_OscConfig+0x27c>)
 80018a0:	4313      	orrs	r3, r2
 80018a2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80018a4:	4b45      	ldr	r3, [pc, #276]	; (80019bc <HAL_RCC_OscConfig+0x280>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff f9df 	bl	8000c6c <HAL_InitTick>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d043      	beq.n	800193c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e249      	b.n	8001d4c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d023      	beq.n	8001908 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018c0:	4b3d      	ldr	r3, [pc, #244]	; (80019b8 <HAL_RCC_OscConfig+0x27c>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a3c      	ldr	r2, [pc, #240]	; (80019b8 <HAL_RCC_OscConfig+0x27c>)
 80018c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018cc:	f7ff fa1a 	bl	8000d04 <HAL_GetTick>
 80018d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018d2:	e008      	b.n	80018e6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018d4:	f7ff fa16 	bl	8000d04 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e232      	b.n	8001d4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018e6:	4b34      	ldr	r3, [pc, #208]	; (80019b8 <HAL_RCC_OscConfig+0x27c>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d0f0      	beq.n	80018d4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018f2:	4b31      	ldr	r3, [pc, #196]	; (80019b8 <HAL_RCC_OscConfig+0x27c>)
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	691b      	ldr	r3, [r3, #16]
 80018fe:	061b      	lsls	r3, r3, #24
 8001900:	492d      	ldr	r1, [pc, #180]	; (80019b8 <HAL_RCC_OscConfig+0x27c>)
 8001902:	4313      	orrs	r3, r2
 8001904:	604b      	str	r3, [r1, #4]
 8001906:	e01a      	b.n	800193e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001908:	4b2b      	ldr	r3, [pc, #172]	; (80019b8 <HAL_RCC_OscConfig+0x27c>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a2a      	ldr	r2, [pc, #168]	; (80019b8 <HAL_RCC_OscConfig+0x27c>)
 800190e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001912:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001914:	f7ff f9f6 	bl	8000d04 <HAL_GetTick>
 8001918:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800191a:	e008      	b.n	800192e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800191c:	f7ff f9f2 	bl	8000d04 <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	2b02      	cmp	r3, #2
 8001928:	d901      	bls.n	800192e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e20e      	b.n	8001d4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800192e:	4b22      	ldr	r3, [pc, #136]	; (80019b8 <HAL_RCC_OscConfig+0x27c>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001936:	2b00      	cmp	r3, #0
 8001938:	d1f0      	bne.n	800191c <HAL_RCC_OscConfig+0x1e0>
 800193a:	e000      	b.n	800193e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800193c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0308 	and.w	r3, r3, #8
 8001946:	2b00      	cmp	r3, #0
 8001948:	d041      	beq.n	80019ce <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	695b      	ldr	r3, [r3, #20]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d01c      	beq.n	800198c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001952:	4b19      	ldr	r3, [pc, #100]	; (80019b8 <HAL_RCC_OscConfig+0x27c>)
 8001954:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001958:	4a17      	ldr	r2, [pc, #92]	; (80019b8 <HAL_RCC_OscConfig+0x27c>)
 800195a:	f043 0301 	orr.w	r3, r3, #1
 800195e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001962:	f7ff f9cf 	bl	8000d04 <HAL_GetTick>
 8001966:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001968:	e008      	b.n	800197c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800196a:	f7ff f9cb 	bl	8000d04 <HAL_GetTick>
 800196e:	4602      	mov	r2, r0
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	2b02      	cmp	r3, #2
 8001976:	d901      	bls.n	800197c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001978:	2303      	movs	r3, #3
 800197a:	e1e7      	b.n	8001d4c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800197c:	4b0e      	ldr	r3, [pc, #56]	; (80019b8 <HAL_RCC_OscConfig+0x27c>)
 800197e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	2b00      	cmp	r3, #0
 8001988:	d0ef      	beq.n	800196a <HAL_RCC_OscConfig+0x22e>
 800198a:	e020      	b.n	80019ce <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800198c:	4b0a      	ldr	r3, [pc, #40]	; (80019b8 <HAL_RCC_OscConfig+0x27c>)
 800198e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001992:	4a09      	ldr	r2, [pc, #36]	; (80019b8 <HAL_RCC_OscConfig+0x27c>)
 8001994:	f023 0301 	bic.w	r3, r3, #1
 8001998:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800199c:	f7ff f9b2 	bl	8000d04 <HAL_GetTick>
 80019a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019a2:	e00d      	b.n	80019c0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019a4:	f7ff f9ae 	bl	8000d04 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d906      	bls.n	80019c0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e1ca      	b.n	8001d4c <HAL_RCC_OscConfig+0x610>
 80019b6:	bf00      	nop
 80019b8:	40021000 	.word	0x40021000
 80019bc:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019c0:	4b8c      	ldr	r3, [pc, #560]	; (8001bf4 <HAL_RCC_OscConfig+0x4b8>)
 80019c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d1ea      	bne.n	80019a4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0304 	and.w	r3, r3, #4
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	f000 80a6 	beq.w	8001b28 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019dc:	2300      	movs	r3, #0
 80019de:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80019e0:	4b84      	ldr	r3, [pc, #528]	; (8001bf4 <HAL_RCC_OscConfig+0x4b8>)
 80019e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d101      	bne.n	80019f0 <HAL_RCC_OscConfig+0x2b4>
 80019ec:	2301      	movs	r3, #1
 80019ee:	e000      	b.n	80019f2 <HAL_RCC_OscConfig+0x2b6>
 80019f0:	2300      	movs	r3, #0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d00d      	beq.n	8001a12 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019f6:	4b7f      	ldr	r3, [pc, #508]	; (8001bf4 <HAL_RCC_OscConfig+0x4b8>)
 80019f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019fa:	4a7e      	ldr	r2, [pc, #504]	; (8001bf4 <HAL_RCC_OscConfig+0x4b8>)
 80019fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a00:	6593      	str	r3, [r2, #88]	; 0x58
 8001a02:	4b7c      	ldr	r3, [pc, #496]	; (8001bf4 <HAL_RCC_OscConfig+0x4b8>)
 8001a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a12:	4b79      	ldr	r3, [pc, #484]	; (8001bf8 <HAL_RCC_OscConfig+0x4bc>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d118      	bne.n	8001a50 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a1e:	4b76      	ldr	r3, [pc, #472]	; (8001bf8 <HAL_RCC_OscConfig+0x4bc>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a75      	ldr	r2, [pc, #468]	; (8001bf8 <HAL_RCC_OscConfig+0x4bc>)
 8001a24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a2a:	f7ff f96b 	bl	8000d04 <HAL_GetTick>
 8001a2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a30:	e008      	b.n	8001a44 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a32:	f7ff f967 	bl	8000d04 <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e183      	b.n	8001d4c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a44:	4b6c      	ldr	r3, [pc, #432]	; (8001bf8 <HAL_RCC_OscConfig+0x4bc>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d0f0      	beq.n	8001a32 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d108      	bne.n	8001a6a <HAL_RCC_OscConfig+0x32e>
 8001a58:	4b66      	ldr	r3, [pc, #408]	; (8001bf4 <HAL_RCC_OscConfig+0x4b8>)
 8001a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a5e:	4a65      	ldr	r2, [pc, #404]	; (8001bf4 <HAL_RCC_OscConfig+0x4b8>)
 8001a60:	f043 0301 	orr.w	r3, r3, #1
 8001a64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a68:	e024      	b.n	8001ab4 <HAL_RCC_OscConfig+0x378>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	2b05      	cmp	r3, #5
 8001a70:	d110      	bne.n	8001a94 <HAL_RCC_OscConfig+0x358>
 8001a72:	4b60      	ldr	r3, [pc, #384]	; (8001bf4 <HAL_RCC_OscConfig+0x4b8>)
 8001a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a78:	4a5e      	ldr	r2, [pc, #376]	; (8001bf4 <HAL_RCC_OscConfig+0x4b8>)
 8001a7a:	f043 0304 	orr.w	r3, r3, #4
 8001a7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a82:	4b5c      	ldr	r3, [pc, #368]	; (8001bf4 <HAL_RCC_OscConfig+0x4b8>)
 8001a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a88:	4a5a      	ldr	r2, [pc, #360]	; (8001bf4 <HAL_RCC_OscConfig+0x4b8>)
 8001a8a:	f043 0301 	orr.w	r3, r3, #1
 8001a8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a92:	e00f      	b.n	8001ab4 <HAL_RCC_OscConfig+0x378>
 8001a94:	4b57      	ldr	r3, [pc, #348]	; (8001bf4 <HAL_RCC_OscConfig+0x4b8>)
 8001a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a9a:	4a56      	ldr	r2, [pc, #344]	; (8001bf4 <HAL_RCC_OscConfig+0x4b8>)
 8001a9c:	f023 0301 	bic.w	r3, r3, #1
 8001aa0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001aa4:	4b53      	ldr	r3, [pc, #332]	; (8001bf4 <HAL_RCC_OscConfig+0x4b8>)
 8001aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aaa:	4a52      	ldr	r2, [pc, #328]	; (8001bf4 <HAL_RCC_OscConfig+0x4b8>)
 8001aac:	f023 0304 	bic.w	r3, r3, #4
 8001ab0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d016      	beq.n	8001aea <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001abc:	f7ff f922 	bl	8000d04 <HAL_GetTick>
 8001ac0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ac2:	e00a      	b.n	8001ada <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ac4:	f7ff f91e 	bl	8000d04 <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d901      	bls.n	8001ada <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e138      	b.n	8001d4c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ada:	4b46      	ldr	r3, [pc, #280]	; (8001bf4 <HAL_RCC_OscConfig+0x4b8>)
 8001adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ae0:	f003 0302 	and.w	r3, r3, #2
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d0ed      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x388>
 8001ae8:	e015      	b.n	8001b16 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aea:	f7ff f90b 	bl	8000d04 <HAL_GetTick>
 8001aee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001af0:	e00a      	b.n	8001b08 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001af2:	f7ff f907 	bl	8000d04 <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d901      	bls.n	8001b08 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e121      	b.n	8001d4c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b08:	4b3a      	ldr	r3, [pc, #232]	; (8001bf4 <HAL_RCC_OscConfig+0x4b8>)
 8001b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d1ed      	bne.n	8001af2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b16:	7ffb      	ldrb	r3, [r7, #31]
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d105      	bne.n	8001b28 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b1c:	4b35      	ldr	r3, [pc, #212]	; (8001bf4 <HAL_RCC_OscConfig+0x4b8>)
 8001b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b20:	4a34      	ldr	r2, [pc, #208]	; (8001bf4 <HAL_RCC_OscConfig+0x4b8>)
 8001b22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b26:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0320 	and.w	r3, r3, #32
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d03c      	beq.n	8001bae <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	699b      	ldr	r3, [r3, #24]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d01c      	beq.n	8001b76 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001b3c:	4b2d      	ldr	r3, [pc, #180]	; (8001bf4 <HAL_RCC_OscConfig+0x4b8>)
 8001b3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b42:	4a2c      	ldr	r2, [pc, #176]	; (8001bf4 <HAL_RCC_OscConfig+0x4b8>)
 8001b44:	f043 0301 	orr.w	r3, r3, #1
 8001b48:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b4c:	f7ff f8da 	bl	8000d04 <HAL_GetTick>
 8001b50:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b52:	e008      	b.n	8001b66 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b54:	f7ff f8d6 	bl	8000d04 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e0f2      	b.n	8001d4c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b66:	4b23      	ldr	r3, [pc, #140]	; (8001bf4 <HAL_RCC_OscConfig+0x4b8>)
 8001b68:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b6c:	f003 0302 	and.w	r3, r3, #2
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d0ef      	beq.n	8001b54 <HAL_RCC_OscConfig+0x418>
 8001b74:	e01b      	b.n	8001bae <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b76:	4b1f      	ldr	r3, [pc, #124]	; (8001bf4 <HAL_RCC_OscConfig+0x4b8>)
 8001b78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b7c:	4a1d      	ldr	r2, [pc, #116]	; (8001bf4 <HAL_RCC_OscConfig+0x4b8>)
 8001b7e:	f023 0301 	bic.w	r3, r3, #1
 8001b82:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b86:	f7ff f8bd 	bl	8000d04 <HAL_GetTick>
 8001b8a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b8c:	e008      	b.n	8001ba0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b8e:	f7ff f8b9 	bl	8000d04 <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d901      	bls.n	8001ba0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e0d5      	b.n	8001d4c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ba0:	4b14      	ldr	r3, [pc, #80]	; (8001bf4 <HAL_RCC_OscConfig+0x4b8>)
 8001ba2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d1ef      	bne.n	8001b8e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	69db      	ldr	r3, [r3, #28]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	f000 80c9 	beq.w	8001d4a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bb8:	4b0e      	ldr	r3, [pc, #56]	; (8001bf4 <HAL_RCC_OscConfig+0x4b8>)
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	f003 030c 	and.w	r3, r3, #12
 8001bc0:	2b0c      	cmp	r3, #12
 8001bc2:	f000 8083 	beq.w	8001ccc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	69db      	ldr	r3, [r3, #28]
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d15e      	bne.n	8001c8c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bce:	4b09      	ldr	r3, [pc, #36]	; (8001bf4 <HAL_RCC_OscConfig+0x4b8>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a08      	ldr	r2, [pc, #32]	; (8001bf4 <HAL_RCC_OscConfig+0x4b8>)
 8001bd4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bda:	f7ff f893 	bl	8000d04 <HAL_GetTick>
 8001bde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001be0:	e00c      	b.n	8001bfc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001be2:	f7ff f88f 	bl	8000d04 <HAL_GetTick>
 8001be6:	4602      	mov	r2, r0
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d905      	bls.n	8001bfc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e0ab      	b.n	8001d4c <HAL_RCC_OscConfig+0x610>
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bfc:	4b55      	ldr	r3, [pc, #340]	; (8001d54 <HAL_RCC_OscConfig+0x618>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d1ec      	bne.n	8001be2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c08:	4b52      	ldr	r3, [pc, #328]	; (8001d54 <HAL_RCC_OscConfig+0x618>)
 8001c0a:	68da      	ldr	r2, [r3, #12]
 8001c0c:	4b52      	ldr	r3, [pc, #328]	; (8001d58 <HAL_RCC_OscConfig+0x61c>)
 8001c0e:	4013      	ands	r3, r2
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	6a11      	ldr	r1, [r2, #32]
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c18:	3a01      	subs	r2, #1
 8001c1a:	0112      	lsls	r2, r2, #4
 8001c1c:	4311      	orrs	r1, r2
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001c22:	0212      	lsls	r2, r2, #8
 8001c24:	4311      	orrs	r1, r2
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001c2a:	0852      	lsrs	r2, r2, #1
 8001c2c:	3a01      	subs	r2, #1
 8001c2e:	0552      	lsls	r2, r2, #21
 8001c30:	4311      	orrs	r1, r2
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c36:	0852      	lsrs	r2, r2, #1
 8001c38:	3a01      	subs	r2, #1
 8001c3a:	0652      	lsls	r2, r2, #25
 8001c3c:	4311      	orrs	r1, r2
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001c42:	06d2      	lsls	r2, r2, #27
 8001c44:	430a      	orrs	r2, r1
 8001c46:	4943      	ldr	r1, [pc, #268]	; (8001d54 <HAL_RCC_OscConfig+0x618>)
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c4c:	4b41      	ldr	r3, [pc, #260]	; (8001d54 <HAL_RCC_OscConfig+0x618>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a40      	ldr	r2, [pc, #256]	; (8001d54 <HAL_RCC_OscConfig+0x618>)
 8001c52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c56:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c58:	4b3e      	ldr	r3, [pc, #248]	; (8001d54 <HAL_RCC_OscConfig+0x618>)
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	4a3d      	ldr	r2, [pc, #244]	; (8001d54 <HAL_RCC_OscConfig+0x618>)
 8001c5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c62:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c64:	f7ff f84e 	bl	8000d04 <HAL_GetTick>
 8001c68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c6a:	e008      	b.n	8001c7e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c6c:	f7ff f84a 	bl	8000d04 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e066      	b.n	8001d4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c7e:	4b35      	ldr	r3, [pc, #212]	; (8001d54 <HAL_RCC_OscConfig+0x618>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d0f0      	beq.n	8001c6c <HAL_RCC_OscConfig+0x530>
 8001c8a:	e05e      	b.n	8001d4a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c8c:	4b31      	ldr	r3, [pc, #196]	; (8001d54 <HAL_RCC_OscConfig+0x618>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a30      	ldr	r2, [pc, #192]	; (8001d54 <HAL_RCC_OscConfig+0x618>)
 8001c92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c98:	f7ff f834 	bl	8000d04 <HAL_GetTick>
 8001c9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ca0:	f7ff f830 	bl	8000d04 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e04c      	b.n	8001d4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cb2:	4b28      	ldr	r3, [pc, #160]	; (8001d54 <HAL_RCC_OscConfig+0x618>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d1f0      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001cbe:	4b25      	ldr	r3, [pc, #148]	; (8001d54 <HAL_RCC_OscConfig+0x618>)
 8001cc0:	68da      	ldr	r2, [r3, #12]
 8001cc2:	4924      	ldr	r1, [pc, #144]	; (8001d54 <HAL_RCC_OscConfig+0x618>)
 8001cc4:	4b25      	ldr	r3, [pc, #148]	; (8001d5c <HAL_RCC_OscConfig+0x620>)
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	60cb      	str	r3, [r1, #12]
 8001cca:	e03e      	b.n	8001d4a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	69db      	ldr	r3, [r3, #28]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d101      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e039      	b.n	8001d4c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001cd8:	4b1e      	ldr	r3, [pc, #120]	; (8001d54 <HAL_RCC_OscConfig+0x618>)
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	f003 0203 	and.w	r2, r3, #3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6a1b      	ldr	r3, [r3, #32]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d12c      	bne.n	8001d46 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d123      	bne.n	8001d46 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d08:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d11b      	bne.n	8001d46 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d18:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d113      	bne.n	8001d46 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d28:	085b      	lsrs	r3, r3, #1
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d109      	bne.n	8001d46 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d3c:	085b      	lsrs	r3, r3, #1
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d001      	beq.n	8001d4a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e000      	b.n	8001d4c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001d4a:	2300      	movs	r3, #0
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3720      	adds	r7, #32
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40021000 	.word	0x40021000
 8001d58:	019f800c 	.word	0x019f800c
 8001d5c:	feeefffc 	.word	0xfeeefffc

08001d60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b086      	sub	sp, #24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d101      	bne.n	8001d78 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e11e      	b.n	8001fb6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d78:	4b91      	ldr	r3, [pc, #580]	; (8001fc0 <HAL_RCC_ClockConfig+0x260>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 030f 	and.w	r3, r3, #15
 8001d80:	683a      	ldr	r2, [r7, #0]
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d910      	bls.n	8001da8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d86:	4b8e      	ldr	r3, [pc, #568]	; (8001fc0 <HAL_RCC_ClockConfig+0x260>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f023 020f 	bic.w	r2, r3, #15
 8001d8e:	498c      	ldr	r1, [pc, #560]	; (8001fc0 <HAL_RCC_ClockConfig+0x260>)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d96:	4b8a      	ldr	r3, [pc, #552]	; (8001fc0 <HAL_RCC_ClockConfig+0x260>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 030f 	and.w	r3, r3, #15
 8001d9e:	683a      	ldr	r2, [r7, #0]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d001      	beq.n	8001da8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e106      	b.n	8001fb6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0301 	and.w	r3, r3, #1
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d073      	beq.n	8001e9c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	2b03      	cmp	r3, #3
 8001dba:	d129      	bne.n	8001e10 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dbc:	4b81      	ldr	r3, [pc, #516]	; (8001fc4 <HAL_RCC_ClockConfig+0x264>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d101      	bne.n	8001dcc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e0f4      	b.n	8001fb6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001dcc:	f000 f99e 	bl	800210c <RCC_GetSysClockFreqFromPLLSource>
 8001dd0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	4a7c      	ldr	r2, [pc, #496]	; (8001fc8 <HAL_RCC_ClockConfig+0x268>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d93f      	bls.n	8001e5a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001dda:	4b7a      	ldr	r3, [pc, #488]	; (8001fc4 <HAL_RCC_ClockConfig+0x264>)
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d009      	beq.n	8001dfa <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d033      	beq.n	8001e5a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d12f      	bne.n	8001e5a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001dfa:	4b72      	ldr	r3, [pc, #456]	; (8001fc4 <HAL_RCC_ClockConfig+0x264>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e02:	4a70      	ldr	r2, [pc, #448]	; (8001fc4 <HAL_RCC_ClockConfig+0x264>)
 8001e04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e08:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001e0a:	2380      	movs	r3, #128	; 0x80
 8001e0c:	617b      	str	r3, [r7, #20]
 8001e0e:	e024      	b.n	8001e5a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d107      	bne.n	8001e28 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e18:	4b6a      	ldr	r3, [pc, #424]	; (8001fc4 <HAL_RCC_ClockConfig+0x264>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d109      	bne.n	8001e38 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e0c6      	b.n	8001fb6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e28:	4b66      	ldr	r3, [pc, #408]	; (8001fc4 <HAL_RCC_ClockConfig+0x264>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d101      	bne.n	8001e38 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e0be      	b.n	8001fb6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001e38:	f000 f8ce 	bl	8001fd8 <HAL_RCC_GetSysClockFreq>
 8001e3c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	4a61      	ldr	r2, [pc, #388]	; (8001fc8 <HAL_RCC_ClockConfig+0x268>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d909      	bls.n	8001e5a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001e46:	4b5f      	ldr	r3, [pc, #380]	; (8001fc4 <HAL_RCC_ClockConfig+0x264>)
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e4e:	4a5d      	ldr	r2, [pc, #372]	; (8001fc4 <HAL_RCC_ClockConfig+0x264>)
 8001e50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e54:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001e56:	2380      	movs	r3, #128	; 0x80
 8001e58:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e5a:	4b5a      	ldr	r3, [pc, #360]	; (8001fc4 <HAL_RCC_ClockConfig+0x264>)
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	f023 0203 	bic.w	r2, r3, #3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	4957      	ldr	r1, [pc, #348]	; (8001fc4 <HAL_RCC_ClockConfig+0x264>)
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e6c:	f7fe ff4a 	bl	8000d04 <HAL_GetTick>
 8001e70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e72:	e00a      	b.n	8001e8a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e74:	f7fe ff46 	bl	8000d04 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d901      	bls.n	8001e8a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e095      	b.n	8001fb6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e8a:	4b4e      	ldr	r3, [pc, #312]	; (8001fc4 <HAL_RCC_ClockConfig+0x264>)
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f003 020c 	and.w	r2, r3, #12
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d1eb      	bne.n	8001e74 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0302 	and.w	r3, r3, #2
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d023      	beq.n	8001ef0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0304 	and.w	r3, r3, #4
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d005      	beq.n	8001ec0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001eb4:	4b43      	ldr	r3, [pc, #268]	; (8001fc4 <HAL_RCC_ClockConfig+0x264>)
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	4a42      	ldr	r2, [pc, #264]	; (8001fc4 <HAL_RCC_ClockConfig+0x264>)
 8001eba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ebe:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0308 	and.w	r3, r3, #8
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d007      	beq.n	8001edc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001ecc:	4b3d      	ldr	r3, [pc, #244]	; (8001fc4 <HAL_RCC_ClockConfig+0x264>)
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001ed4:	4a3b      	ldr	r2, [pc, #236]	; (8001fc4 <HAL_RCC_ClockConfig+0x264>)
 8001ed6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001eda:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001edc:	4b39      	ldr	r3, [pc, #228]	; (8001fc4 <HAL_RCC_ClockConfig+0x264>)
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	4936      	ldr	r1, [pc, #216]	; (8001fc4 <HAL_RCC_ClockConfig+0x264>)
 8001eea:	4313      	orrs	r3, r2
 8001eec:	608b      	str	r3, [r1, #8]
 8001eee:	e008      	b.n	8001f02 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	2b80      	cmp	r3, #128	; 0x80
 8001ef4:	d105      	bne.n	8001f02 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001ef6:	4b33      	ldr	r3, [pc, #204]	; (8001fc4 <HAL_RCC_ClockConfig+0x264>)
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	4a32      	ldr	r2, [pc, #200]	; (8001fc4 <HAL_RCC_ClockConfig+0x264>)
 8001efc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f00:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f02:	4b2f      	ldr	r3, [pc, #188]	; (8001fc0 <HAL_RCC_ClockConfig+0x260>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 030f 	and.w	r3, r3, #15
 8001f0a:	683a      	ldr	r2, [r7, #0]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d21d      	bcs.n	8001f4c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f10:	4b2b      	ldr	r3, [pc, #172]	; (8001fc0 <HAL_RCC_ClockConfig+0x260>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f023 020f 	bic.w	r2, r3, #15
 8001f18:	4929      	ldr	r1, [pc, #164]	; (8001fc0 <HAL_RCC_ClockConfig+0x260>)
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001f20:	f7fe fef0 	bl	8000d04 <HAL_GetTick>
 8001f24:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f26:	e00a      	b.n	8001f3e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f28:	f7fe feec 	bl	8000d04 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e03b      	b.n	8001fb6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f3e:	4b20      	ldr	r3, [pc, #128]	; (8001fc0 <HAL_RCC_ClockConfig+0x260>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 030f 	and.w	r3, r3, #15
 8001f46:	683a      	ldr	r2, [r7, #0]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d1ed      	bne.n	8001f28 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0304 	and.w	r3, r3, #4
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d008      	beq.n	8001f6a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f58:	4b1a      	ldr	r3, [pc, #104]	; (8001fc4 <HAL_RCC_ClockConfig+0x264>)
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	4917      	ldr	r1, [pc, #92]	; (8001fc4 <HAL_RCC_ClockConfig+0x264>)
 8001f66:	4313      	orrs	r3, r2
 8001f68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0308 	and.w	r3, r3, #8
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d009      	beq.n	8001f8a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f76:	4b13      	ldr	r3, [pc, #76]	; (8001fc4 <HAL_RCC_ClockConfig+0x264>)
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	691b      	ldr	r3, [r3, #16]
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	490f      	ldr	r1, [pc, #60]	; (8001fc4 <HAL_RCC_ClockConfig+0x264>)
 8001f86:	4313      	orrs	r3, r2
 8001f88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f8a:	f000 f825 	bl	8001fd8 <HAL_RCC_GetSysClockFreq>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	4b0c      	ldr	r3, [pc, #48]	; (8001fc4 <HAL_RCC_ClockConfig+0x264>)
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	091b      	lsrs	r3, r3, #4
 8001f96:	f003 030f 	and.w	r3, r3, #15
 8001f9a:	490c      	ldr	r1, [pc, #48]	; (8001fcc <HAL_RCC_ClockConfig+0x26c>)
 8001f9c:	5ccb      	ldrb	r3, [r1, r3]
 8001f9e:	f003 031f 	and.w	r3, r3, #31
 8001fa2:	fa22 f303 	lsr.w	r3, r2, r3
 8001fa6:	4a0a      	ldr	r2, [pc, #40]	; (8001fd0 <HAL_RCC_ClockConfig+0x270>)
 8001fa8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001faa:	4b0a      	ldr	r3, [pc, #40]	; (8001fd4 <HAL_RCC_ClockConfig+0x274>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7fe fe5c 	bl	8000c6c <HAL_InitTick>
 8001fb4:	4603      	mov	r3, r0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3718      	adds	r7, #24
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	40022000 	.word	0x40022000
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	04c4b400 	.word	0x04c4b400
 8001fcc:	08009190 	.word	0x08009190
 8001fd0:	20000000 	.word	0x20000000
 8001fd4:	20000004 	.word	0x20000004

08001fd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b087      	sub	sp, #28
 8001fdc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001fde:	4b2c      	ldr	r3, [pc, #176]	; (8002090 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f003 030c 	and.w	r3, r3, #12
 8001fe6:	2b04      	cmp	r3, #4
 8001fe8:	d102      	bne.n	8001ff0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001fea:	4b2a      	ldr	r3, [pc, #168]	; (8002094 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001fec:	613b      	str	r3, [r7, #16]
 8001fee:	e047      	b.n	8002080 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001ff0:	4b27      	ldr	r3, [pc, #156]	; (8002090 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f003 030c 	and.w	r3, r3, #12
 8001ff8:	2b08      	cmp	r3, #8
 8001ffa:	d102      	bne.n	8002002 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ffc:	4b26      	ldr	r3, [pc, #152]	; (8002098 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ffe:	613b      	str	r3, [r7, #16]
 8002000:	e03e      	b.n	8002080 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002002:	4b23      	ldr	r3, [pc, #140]	; (8002090 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	f003 030c 	and.w	r3, r3, #12
 800200a:	2b0c      	cmp	r3, #12
 800200c:	d136      	bne.n	800207c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800200e:	4b20      	ldr	r3, [pc, #128]	; (8002090 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	f003 0303 	and.w	r3, r3, #3
 8002016:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002018:	4b1d      	ldr	r3, [pc, #116]	; (8002090 <HAL_RCC_GetSysClockFreq+0xb8>)
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	091b      	lsrs	r3, r3, #4
 800201e:	f003 030f 	and.w	r3, r3, #15
 8002022:	3301      	adds	r3, #1
 8002024:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2b03      	cmp	r3, #3
 800202a:	d10c      	bne.n	8002046 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800202c:	4a1a      	ldr	r2, [pc, #104]	; (8002098 <HAL_RCC_GetSysClockFreq+0xc0>)
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	fbb2 f3f3 	udiv	r3, r2, r3
 8002034:	4a16      	ldr	r2, [pc, #88]	; (8002090 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002036:	68d2      	ldr	r2, [r2, #12]
 8002038:	0a12      	lsrs	r2, r2, #8
 800203a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800203e:	fb02 f303 	mul.w	r3, r2, r3
 8002042:	617b      	str	r3, [r7, #20]
      break;
 8002044:	e00c      	b.n	8002060 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002046:	4a13      	ldr	r2, [pc, #76]	; (8002094 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	fbb2 f3f3 	udiv	r3, r2, r3
 800204e:	4a10      	ldr	r2, [pc, #64]	; (8002090 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002050:	68d2      	ldr	r2, [r2, #12]
 8002052:	0a12      	lsrs	r2, r2, #8
 8002054:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002058:	fb02 f303 	mul.w	r3, r2, r3
 800205c:	617b      	str	r3, [r7, #20]
      break;
 800205e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002060:	4b0b      	ldr	r3, [pc, #44]	; (8002090 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	0e5b      	lsrs	r3, r3, #25
 8002066:	f003 0303 	and.w	r3, r3, #3
 800206a:	3301      	adds	r3, #1
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002070:	697a      	ldr	r2, [r7, #20]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	fbb2 f3f3 	udiv	r3, r2, r3
 8002078:	613b      	str	r3, [r7, #16]
 800207a:	e001      	b.n	8002080 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800207c:	2300      	movs	r3, #0
 800207e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002080:	693b      	ldr	r3, [r7, #16]
}
 8002082:	4618      	mov	r0, r3
 8002084:	371c      	adds	r7, #28
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	40021000 	.word	0x40021000
 8002094:	00f42400 	.word	0x00f42400
 8002098:	007a1200 	.word	0x007a1200

0800209c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020a0:	4b03      	ldr	r3, [pc, #12]	; (80020b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80020a2:	681b      	ldr	r3, [r3, #0]
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	20000000 	.word	0x20000000

080020b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80020b8:	f7ff fff0 	bl	800209c <HAL_RCC_GetHCLKFreq>
 80020bc:	4602      	mov	r2, r0
 80020be:	4b06      	ldr	r3, [pc, #24]	; (80020d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	0a1b      	lsrs	r3, r3, #8
 80020c4:	f003 0307 	and.w	r3, r3, #7
 80020c8:	4904      	ldr	r1, [pc, #16]	; (80020dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80020ca:	5ccb      	ldrb	r3, [r1, r3]
 80020cc:	f003 031f 	and.w	r3, r3, #31
 80020d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	40021000 	.word	0x40021000
 80020dc:	080091a0 	.word	0x080091a0

080020e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80020e4:	f7ff ffda 	bl	800209c <HAL_RCC_GetHCLKFreq>
 80020e8:	4602      	mov	r2, r0
 80020ea:	4b06      	ldr	r3, [pc, #24]	; (8002104 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	0adb      	lsrs	r3, r3, #11
 80020f0:	f003 0307 	and.w	r3, r3, #7
 80020f4:	4904      	ldr	r1, [pc, #16]	; (8002108 <HAL_RCC_GetPCLK2Freq+0x28>)
 80020f6:	5ccb      	ldrb	r3, [r1, r3]
 80020f8:	f003 031f 	and.w	r3, r3, #31
 80020fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002100:	4618      	mov	r0, r3
 8002102:	bd80      	pop	{r7, pc}
 8002104:	40021000 	.word	0x40021000
 8002108:	080091a0 	.word	0x080091a0

0800210c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800210c:	b480      	push	{r7}
 800210e:	b087      	sub	sp, #28
 8002110:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002112:	4b1e      	ldr	r3, [pc, #120]	; (800218c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	f003 0303 	and.w	r3, r3, #3
 800211a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800211c:	4b1b      	ldr	r3, [pc, #108]	; (800218c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	091b      	lsrs	r3, r3, #4
 8002122:	f003 030f 	and.w	r3, r3, #15
 8002126:	3301      	adds	r3, #1
 8002128:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	2b03      	cmp	r3, #3
 800212e:	d10c      	bne.n	800214a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002130:	4a17      	ldr	r2, [pc, #92]	; (8002190 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	fbb2 f3f3 	udiv	r3, r2, r3
 8002138:	4a14      	ldr	r2, [pc, #80]	; (800218c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800213a:	68d2      	ldr	r2, [r2, #12]
 800213c:	0a12      	lsrs	r2, r2, #8
 800213e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002142:	fb02 f303 	mul.w	r3, r2, r3
 8002146:	617b      	str	r3, [r7, #20]
    break;
 8002148:	e00c      	b.n	8002164 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800214a:	4a12      	ldr	r2, [pc, #72]	; (8002194 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002152:	4a0e      	ldr	r2, [pc, #56]	; (800218c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002154:	68d2      	ldr	r2, [r2, #12]
 8002156:	0a12      	lsrs	r2, r2, #8
 8002158:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800215c:	fb02 f303 	mul.w	r3, r2, r3
 8002160:	617b      	str	r3, [r7, #20]
    break;
 8002162:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002164:	4b09      	ldr	r3, [pc, #36]	; (800218c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	0e5b      	lsrs	r3, r3, #25
 800216a:	f003 0303 	and.w	r3, r3, #3
 800216e:	3301      	adds	r3, #1
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002174:	697a      	ldr	r2, [r7, #20]
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	fbb2 f3f3 	udiv	r3, r2, r3
 800217c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800217e:	687b      	ldr	r3, [r7, #4]
}
 8002180:	4618      	mov	r0, r3
 8002182:	371c      	adds	r7, #28
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr
 800218c:	40021000 	.word	0x40021000
 8002190:	007a1200 	.word	0x007a1200
 8002194:	00f42400 	.word	0x00f42400

08002198 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80021a0:	2300      	movs	r3, #0
 80021a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80021a4:	2300      	movs	r3, #0
 80021a6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	f000 8098 	beq.w	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021b6:	2300      	movs	r3, #0
 80021b8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021ba:	4b43      	ldr	r3, [pc, #268]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d10d      	bne.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021c6:	4b40      	ldr	r3, [pc, #256]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ca:	4a3f      	ldr	r2, [pc, #252]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021d0:	6593      	str	r3, [r2, #88]	; 0x58
 80021d2:	4b3d      	ldr	r3, [pc, #244]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021da:	60bb      	str	r3, [r7, #8]
 80021dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021de:	2301      	movs	r3, #1
 80021e0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021e2:	4b3a      	ldr	r3, [pc, #232]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a39      	ldr	r2, [pc, #228]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80021e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80021ee:	f7fe fd89 	bl	8000d04 <HAL_GetTick>
 80021f2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80021f4:	e009      	b.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021f6:	f7fe fd85 	bl	8000d04 <HAL_GetTick>
 80021fa:	4602      	mov	r2, r0
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	2b02      	cmp	r3, #2
 8002202:	d902      	bls.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	74fb      	strb	r3, [r7, #19]
        break;
 8002208:	e005      	b.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800220a:	4b30      	ldr	r3, [pc, #192]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002212:	2b00      	cmp	r3, #0
 8002214:	d0ef      	beq.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002216:	7cfb      	ldrb	r3, [r7, #19]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d159      	bne.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800221c:	4b2a      	ldr	r3, [pc, #168]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800221e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002222:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002226:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d01e      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002232:	697a      	ldr	r2, [r7, #20]
 8002234:	429a      	cmp	r2, r3
 8002236:	d019      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002238:	4b23      	ldr	r3, [pc, #140]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800223a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800223e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002242:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002244:	4b20      	ldr	r3, [pc, #128]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800224a:	4a1f      	ldr	r2, [pc, #124]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800224c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002250:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002254:	4b1c      	ldr	r3, [pc, #112]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800225a:	4a1b      	ldr	r2, [pc, #108]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800225c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002260:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002264:	4a18      	ldr	r2, [pc, #96]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	2b00      	cmp	r3, #0
 8002274:	d016      	beq.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002276:	f7fe fd45 	bl	8000d04 <HAL_GetTick>
 800227a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800227c:	e00b      	b.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800227e:	f7fe fd41 	bl	8000d04 <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	f241 3288 	movw	r2, #5000	; 0x1388
 800228c:	4293      	cmp	r3, r2
 800228e:	d902      	bls.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002290:	2303      	movs	r3, #3
 8002292:	74fb      	strb	r3, [r7, #19]
            break;
 8002294:	e006      	b.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002296:	4b0c      	ldr	r3, [pc, #48]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002298:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800229c:	f003 0302 	and.w	r3, r3, #2
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d0ec      	beq.n	800227e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80022a4:	7cfb      	ldrb	r3, [r7, #19]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d10b      	bne.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022aa:	4b07      	ldr	r3, [pc, #28]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b8:	4903      	ldr	r1, [pc, #12]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80022c0:	e008      	b.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80022c2:	7cfb      	ldrb	r3, [r7, #19]
 80022c4:	74bb      	strb	r3, [r7, #18]
 80022c6:	e005      	b.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80022c8:	40021000 	.word	0x40021000
 80022cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022d0:	7cfb      	ldrb	r3, [r7, #19]
 80022d2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022d4:	7c7b      	ldrb	r3, [r7, #17]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d105      	bne.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022da:	4ba6      	ldr	r3, [pc, #664]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022de:	4aa5      	ldr	r2, [pc, #660]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022e4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d00a      	beq.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022f2:	4ba0      	ldr	r3, [pc, #640]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022f8:	f023 0203 	bic.w	r2, r3, #3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	499c      	ldr	r1, [pc, #624]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002302:	4313      	orrs	r3, r2
 8002304:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0302 	and.w	r3, r3, #2
 8002310:	2b00      	cmp	r3, #0
 8002312:	d00a      	beq.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002314:	4b97      	ldr	r3, [pc, #604]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800231a:	f023 020c 	bic.w	r2, r3, #12
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	4994      	ldr	r1, [pc, #592]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002324:	4313      	orrs	r3, r2
 8002326:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0304 	and.w	r3, r3, #4
 8002332:	2b00      	cmp	r3, #0
 8002334:	d00a      	beq.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002336:	4b8f      	ldr	r3, [pc, #572]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002338:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800233c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	498b      	ldr	r1, [pc, #556]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002346:	4313      	orrs	r3, r2
 8002348:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0308 	and.w	r3, r3, #8
 8002354:	2b00      	cmp	r3, #0
 8002356:	d00a      	beq.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002358:	4b86      	ldr	r3, [pc, #536]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800235a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800235e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	4983      	ldr	r1, [pc, #524]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002368:	4313      	orrs	r3, r2
 800236a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0320 	and.w	r3, r3, #32
 8002376:	2b00      	cmp	r3, #0
 8002378:	d00a      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800237a:	4b7e      	ldr	r3, [pc, #504]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800237c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002380:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	695b      	ldr	r3, [r3, #20]
 8002388:	497a      	ldr	r1, [pc, #488]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800238a:	4313      	orrs	r3, r2
 800238c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002398:	2b00      	cmp	r3, #0
 800239a:	d00a      	beq.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800239c:	4b75      	ldr	r3, [pc, #468]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800239e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023a2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	699b      	ldr	r3, [r3, #24]
 80023aa:	4972      	ldr	r1, [pc, #456]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d00a      	beq.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80023be:	4b6d      	ldr	r3, [pc, #436]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023c4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	69db      	ldr	r3, [r3, #28]
 80023cc:	4969      	ldr	r1, [pc, #420]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023ce:	4313      	orrs	r3, r2
 80023d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d00a      	beq.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023e0:	4b64      	ldr	r3, [pc, #400]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023e6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6a1b      	ldr	r3, [r3, #32]
 80023ee:	4961      	ldr	r1, [pc, #388]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d00a      	beq.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002402:	4b5c      	ldr	r3, [pc, #368]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002408:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002410:	4958      	ldr	r1, [pc, #352]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002412:	4313      	orrs	r3, r2
 8002414:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002420:	2b00      	cmp	r3, #0
 8002422:	d015      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002424:	4b53      	ldr	r3, [pc, #332]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800242a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002432:	4950      	ldr	r1, [pc, #320]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002434:	4313      	orrs	r3, r2
 8002436:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800243e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002442:	d105      	bne.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002444:	4b4b      	ldr	r3, [pc, #300]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	4a4a      	ldr	r2, [pc, #296]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800244a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800244e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002458:	2b00      	cmp	r3, #0
 800245a:	d015      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800245c:	4b45      	ldr	r3, [pc, #276]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800245e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002462:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800246a:	4942      	ldr	r1, [pc, #264]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800246c:	4313      	orrs	r3, r2
 800246e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002476:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800247a:	d105      	bne.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800247c:	4b3d      	ldr	r3, [pc, #244]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	4a3c      	ldr	r2, [pc, #240]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002482:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002486:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d015      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002494:	4b37      	ldr	r3, [pc, #220]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800249a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a2:	4934      	ldr	r1, [pc, #208]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024a4:	4313      	orrs	r3, r2
 80024a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024b2:	d105      	bne.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024b4:	4b2f      	ldr	r3, [pc, #188]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	4a2e      	ldr	r2, [pc, #184]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024be:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d015      	beq.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80024cc:	4b29      	ldr	r3, [pc, #164]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024da:	4926      	ldr	r1, [pc, #152]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024ea:	d105      	bne.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024ec:	4b21      	ldr	r3, [pc, #132]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	4a20      	ldr	r2, [pc, #128]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024f6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d015      	beq.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002504:	4b1b      	ldr	r3, [pc, #108]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800250a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002512:	4918      	ldr	r1, [pc, #96]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002514:	4313      	orrs	r3, r2
 8002516:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800251e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002522:	d105      	bne.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002524:	4b13      	ldr	r3, [pc, #76]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	4a12      	ldr	r2, [pc, #72]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800252a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800252e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d015      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800253c:	4b0d      	ldr	r3, [pc, #52]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800253e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002542:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800254a:	490a      	ldr	r1, [pc, #40]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800254c:	4313      	orrs	r3, r2
 800254e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002556:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800255a:	d105      	bne.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800255c:	4b05      	ldr	r3, [pc, #20]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	4a04      	ldr	r2, [pc, #16]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002562:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002566:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002568:	7cbb      	ldrb	r3, [r7, #18]
}
 800256a:	4618      	mov	r0, r3
 800256c:	3718      	adds	r7, #24
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	40021000 	.word	0x40021000

08002578 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d101      	bne.n	800258a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e049      	b.n	800261e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d106      	bne.n	80025a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f7fe fa58 	bl	8000a54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2202      	movs	r2, #2
 80025a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	3304      	adds	r3, #4
 80025b4:	4619      	mov	r1, r3
 80025b6:	4610      	mov	r0, r2
 80025b8:	f000 f9ba 	bl	8002930 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2201      	movs	r2, #1
 80025c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2201      	movs	r2, #1
 80025e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3708      	adds	r7, #8
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
	...

08002628 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002628:	b480      	push	{r7}
 800262a:	b085      	sub	sp, #20
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002636:	b2db      	uxtb	r3, r3
 8002638:	2b01      	cmp	r3, #1
 800263a:	d001      	beq.n	8002640 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e042      	b.n	80026c6 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2202      	movs	r2, #2
 8002644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a21      	ldr	r2, [pc, #132]	; (80026d4 <HAL_TIM_Base_Start+0xac>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d018      	beq.n	8002684 <HAL_TIM_Base_Start+0x5c>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800265a:	d013      	beq.n	8002684 <HAL_TIM_Base_Start+0x5c>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a1d      	ldr	r2, [pc, #116]	; (80026d8 <HAL_TIM_Base_Start+0xb0>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d00e      	beq.n	8002684 <HAL_TIM_Base_Start+0x5c>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a1c      	ldr	r2, [pc, #112]	; (80026dc <HAL_TIM_Base_Start+0xb4>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d009      	beq.n	8002684 <HAL_TIM_Base_Start+0x5c>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a1a      	ldr	r2, [pc, #104]	; (80026e0 <HAL_TIM_Base_Start+0xb8>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d004      	beq.n	8002684 <HAL_TIM_Base_Start+0x5c>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a19      	ldr	r2, [pc, #100]	; (80026e4 <HAL_TIM_Base_Start+0xbc>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d115      	bne.n	80026b0 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	689a      	ldr	r2, [r3, #8]
 800268a:	4b17      	ldr	r3, [pc, #92]	; (80026e8 <HAL_TIM_Base_Start+0xc0>)
 800268c:	4013      	ands	r3, r2
 800268e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2b06      	cmp	r3, #6
 8002694:	d015      	beq.n	80026c2 <HAL_TIM_Base_Start+0x9a>
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800269c:	d011      	beq.n	80026c2 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f042 0201 	orr.w	r2, r2, #1
 80026ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026ae:	e008      	b.n	80026c2 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f042 0201 	orr.w	r2, r2, #1
 80026be:	601a      	str	r2, [r3, #0]
 80026c0:	e000      	b.n	80026c4 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3714      	adds	r7, #20
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	40012c00 	.word	0x40012c00
 80026d8:	40000400 	.word	0x40000400
 80026dc:	40000800 	.word	0x40000800
 80026e0:	40013400 	.word	0x40013400
 80026e4:	40014000 	.word	0x40014000
 80026e8:	00010007 	.word	0x00010007

080026ec <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	6a1a      	ldr	r2, [r3, #32]
 80026fa:	f241 1311 	movw	r3, #4369	; 0x1111
 80026fe:	4013      	ands	r3, r2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d10f      	bne.n	8002724 <HAL_TIM_Base_Stop+0x38>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	6a1a      	ldr	r2, [r3, #32]
 800270a:	f244 4344 	movw	r3, #17476	; 0x4444
 800270e:	4013      	ands	r3, r2
 8002710:	2b00      	cmp	r3, #0
 8002712:	d107      	bne.n	8002724 <HAL_TIM_Base_Stop+0x38>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f022 0201 	bic.w	r2, r2, #1
 8002722:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	370c      	adds	r7, #12
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
	...

0800273c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002746:	2300      	movs	r3, #0
 8002748:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002750:	2b01      	cmp	r3, #1
 8002752:	d101      	bne.n	8002758 <HAL_TIM_ConfigClockSource+0x1c>
 8002754:	2302      	movs	r3, #2
 8002756:	e0de      	b.n	8002916 <HAL_TIM_ConfigClockSource+0x1da>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2202      	movs	r2, #2
 8002764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8002776:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800277a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002782:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	68ba      	ldr	r2, [r7, #8]
 800278a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a63      	ldr	r2, [pc, #396]	; (8002920 <HAL_TIM_ConfigClockSource+0x1e4>)
 8002792:	4293      	cmp	r3, r2
 8002794:	f000 80a9 	beq.w	80028ea <HAL_TIM_ConfigClockSource+0x1ae>
 8002798:	4a61      	ldr	r2, [pc, #388]	; (8002920 <HAL_TIM_ConfigClockSource+0x1e4>)
 800279a:	4293      	cmp	r3, r2
 800279c:	f200 80ae 	bhi.w	80028fc <HAL_TIM_ConfigClockSource+0x1c0>
 80027a0:	4a60      	ldr	r2, [pc, #384]	; (8002924 <HAL_TIM_ConfigClockSource+0x1e8>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	f000 80a1 	beq.w	80028ea <HAL_TIM_ConfigClockSource+0x1ae>
 80027a8:	4a5e      	ldr	r2, [pc, #376]	; (8002924 <HAL_TIM_ConfigClockSource+0x1e8>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	f200 80a6 	bhi.w	80028fc <HAL_TIM_ConfigClockSource+0x1c0>
 80027b0:	4a5d      	ldr	r2, [pc, #372]	; (8002928 <HAL_TIM_ConfigClockSource+0x1ec>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	f000 8099 	beq.w	80028ea <HAL_TIM_ConfigClockSource+0x1ae>
 80027b8:	4a5b      	ldr	r2, [pc, #364]	; (8002928 <HAL_TIM_ConfigClockSource+0x1ec>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	f200 809e 	bhi.w	80028fc <HAL_TIM_ConfigClockSource+0x1c0>
 80027c0:	4a5a      	ldr	r2, [pc, #360]	; (800292c <HAL_TIM_ConfigClockSource+0x1f0>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	f000 8091 	beq.w	80028ea <HAL_TIM_ConfigClockSource+0x1ae>
 80027c8:	4a58      	ldr	r2, [pc, #352]	; (800292c <HAL_TIM_ConfigClockSource+0x1f0>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	f200 8096 	bhi.w	80028fc <HAL_TIM_ConfigClockSource+0x1c0>
 80027d0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80027d4:	f000 8089 	beq.w	80028ea <HAL_TIM_ConfigClockSource+0x1ae>
 80027d8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80027dc:	f200 808e 	bhi.w	80028fc <HAL_TIM_ConfigClockSource+0x1c0>
 80027e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027e4:	d03e      	beq.n	8002864 <HAL_TIM_ConfigClockSource+0x128>
 80027e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027ea:	f200 8087 	bhi.w	80028fc <HAL_TIM_ConfigClockSource+0x1c0>
 80027ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027f2:	f000 8086 	beq.w	8002902 <HAL_TIM_ConfigClockSource+0x1c6>
 80027f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027fa:	d87f      	bhi.n	80028fc <HAL_TIM_ConfigClockSource+0x1c0>
 80027fc:	2b70      	cmp	r3, #112	; 0x70
 80027fe:	d01a      	beq.n	8002836 <HAL_TIM_ConfigClockSource+0xfa>
 8002800:	2b70      	cmp	r3, #112	; 0x70
 8002802:	d87b      	bhi.n	80028fc <HAL_TIM_ConfigClockSource+0x1c0>
 8002804:	2b60      	cmp	r3, #96	; 0x60
 8002806:	d050      	beq.n	80028aa <HAL_TIM_ConfigClockSource+0x16e>
 8002808:	2b60      	cmp	r3, #96	; 0x60
 800280a:	d877      	bhi.n	80028fc <HAL_TIM_ConfigClockSource+0x1c0>
 800280c:	2b50      	cmp	r3, #80	; 0x50
 800280e:	d03c      	beq.n	800288a <HAL_TIM_ConfigClockSource+0x14e>
 8002810:	2b50      	cmp	r3, #80	; 0x50
 8002812:	d873      	bhi.n	80028fc <HAL_TIM_ConfigClockSource+0x1c0>
 8002814:	2b40      	cmp	r3, #64	; 0x40
 8002816:	d058      	beq.n	80028ca <HAL_TIM_ConfigClockSource+0x18e>
 8002818:	2b40      	cmp	r3, #64	; 0x40
 800281a:	d86f      	bhi.n	80028fc <HAL_TIM_ConfigClockSource+0x1c0>
 800281c:	2b30      	cmp	r3, #48	; 0x30
 800281e:	d064      	beq.n	80028ea <HAL_TIM_ConfigClockSource+0x1ae>
 8002820:	2b30      	cmp	r3, #48	; 0x30
 8002822:	d86b      	bhi.n	80028fc <HAL_TIM_ConfigClockSource+0x1c0>
 8002824:	2b20      	cmp	r3, #32
 8002826:	d060      	beq.n	80028ea <HAL_TIM_ConfigClockSource+0x1ae>
 8002828:	2b20      	cmp	r3, #32
 800282a:	d867      	bhi.n	80028fc <HAL_TIM_ConfigClockSource+0x1c0>
 800282c:	2b00      	cmp	r3, #0
 800282e:	d05c      	beq.n	80028ea <HAL_TIM_ConfigClockSource+0x1ae>
 8002830:	2b10      	cmp	r3, #16
 8002832:	d05a      	beq.n	80028ea <HAL_TIM_ConfigClockSource+0x1ae>
 8002834:	e062      	b.n	80028fc <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002846:	f000 f98b 	bl	8002b60 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002858:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	68ba      	ldr	r2, [r7, #8]
 8002860:	609a      	str	r2, [r3, #8]
      break;
 8002862:	e04f      	b.n	8002904 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002874:	f000 f974 	bl	8002b60 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	689a      	ldr	r2, [r3, #8]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002886:	609a      	str	r2, [r3, #8]
      break;
 8002888:	e03c      	b.n	8002904 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002896:	461a      	mov	r2, r3
 8002898:	f000 f8e6 	bl	8002a68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2150      	movs	r1, #80	; 0x50
 80028a2:	4618      	mov	r0, r3
 80028a4:	f000 f93f 	bl	8002b26 <TIM_ITRx_SetConfig>
      break;
 80028a8:	e02c      	b.n	8002904 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80028b6:	461a      	mov	r2, r3
 80028b8:	f000 f905 	bl	8002ac6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2160      	movs	r1, #96	; 0x60
 80028c2:	4618      	mov	r0, r3
 80028c4:	f000 f92f 	bl	8002b26 <TIM_ITRx_SetConfig>
      break;
 80028c8:	e01c      	b.n	8002904 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028d6:	461a      	mov	r2, r3
 80028d8:	f000 f8c6 	bl	8002a68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2140      	movs	r1, #64	; 0x40
 80028e2:	4618      	mov	r0, r3
 80028e4:	f000 f91f 	bl	8002b26 <TIM_ITRx_SetConfig>
      break;
 80028e8:	e00c      	b.n	8002904 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4619      	mov	r1, r3
 80028f4:	4610      	mov	r0, r2
 80028f6:	f000 f916 	bl	8002b26 <TIM_ITRx_SetConfig>
      break;
 80028fa:	e003      	b.n	8002904 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	73fb      	strb	r3, [r7, #15]
      break;
 8002900:	e000      	b.n	8002904 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8002902:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002914:	7bfb      	ldrb	r3, [r7, #15]
}
 8002916:	4618      	mov	r0, r3
 8002918:	3710      	adds	r7, #16
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	00100070 	.word	0x00100070
 8002924:	00100040 	.word	0x00100040
 8002928:	00100030 	.word	0x00100030
 800292c:	00100020 	.word	0x00100020

08002930 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002930:	b480      	push	{r7}
 8002932:	b085      	sub	sp, #20
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4a42      	ldr	r2, [pc, #264]	; (8002a4c <TIM_Base_SetConfig+0x11c>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d00f      	beq.n	8002968 <TIM_Base_SetConfig+0x38>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800294e:	d00b      	beq.n	8002968 <TIM_Base_SetConfig+0x38>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4a3f      	ldr	r2, [pc, #252]	; (8002a50 <TIM_Base_SetConfig+0x120>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d007      	beq.n	8002968 <TIM_Base_SetConfig+0x38>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4a3e      	ldr	r2, [pc, #248]	; (8002a54 <TIM_Base_SetConfig+0x124>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d003      	beq.n	8002968 <TIM_Base_SetConfig+0x38>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4a3d      	ldr	r2, [pc, #244]	; (8002a58 <TIM_Base_SetConfig+0x128>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d108      	bne.n	800297a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800296e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	68fa      	ldr	r2, [r7, #12]
 8002976:	4313      	orrs	r3, r2
 8002978:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a33      	ldr	r2, [pc, #204]	; (8002a4c <TIM_Base_SetConfig+0x11c>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d01b      	beq.n	80029ba <TIM_Base_SetConfig+0x8a>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002988:	d017      	beq.n	80029ba <TIM_Base_SetConfig+0x8a>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a30      	ldr	r2, [pc, #192]	; (8002a50 <TIM_Base_SetConfig+0x120>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d013      	beq.n	80029ba <TIM_Base_SetConfig+0x8a>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a2f      	ldr	r2, [pc, #188]	; (8002a54 <TIM_Base_SetConfig+0x124>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d00f      	beq.n	80029ba <TIM_Base_SetConfig+0x8a>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a2e      	ldr	r2, [pc, #184]	; (8002a58 <TIM_Base_SetConfig+0x128>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d00b      	beq.n	80029ba <TIM_Base_SetConfig+0x8a>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a2d      	ldr	r2, [pc, #180]	; (8002a5c <TIM_Base_SetConfig+0x12c>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d007      	beq.n	80029ba <TIM_Base_SetConfig+0x8a>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a2c      	ldr	r2, [pc, #176]	; (8002a60 <TIM_Base_SetConfig+0x130>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d003      	beq.n	80029ba <TIM_Base_SetConfig+0x8a>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a2b      	ldr	r2, [pc, #172]	; (8002a64 <TIM_Base_SetConfig+0x134>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d108      	bne.n	80029cc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	68fa      	ldr	r2, [r7, #12]
 80029de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	689a      	ldr	r2, [r3, #8]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4a16      	ldr	r2, [pc, #88]	; (8002a4c <TIM_Base_SetConfig+0x11c>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d00f      	beq.n	8002a18 <TIM_Base_SetConfig+0xe8>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4a17      	ldr	r2, [pc, #92]	; (8002a58 <TIM_Base_SetConfig+0x128>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d00b      	beq.n	8002a18 <TIM_Base_SetConfig+0xe8>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	4a16      	ldr	r2, [pc, #88]	; (8002a5c <TIM_Base_SetConfig+0x12c>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d007      	beq.n	8002a18 <TIM_Base_SetConfig+0xe8>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	4a15      	ldr	r2, [pc, #84]	; (8002a60 <TIM_Base_SetConfig+0x130>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d003      	beq.n	8002a18 <TIM_Base_SetConfig+0xe8>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	4a14      	ldr	r2, [pc, #80]	; (8002a64 <TIM_Base_SetConfig+0x134>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d103      	bne.n	8002a20 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	691a      	ldr	r2, [r3, #16]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	691b      	ldr	r3, [r3, #16]
 8002a2a:	f003 0301 	and.w	r3, r3, #1
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d105      	bne.n	8002a3e <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	f023 0201 	bic.w	r2, r3, #1
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	611a      	str	r2, [r3, #16]
  }
}
 8002a3e:	bf00      	nop
 8002a40:	3714      	adds	r7, #20
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	40012c00 	.word	0x40012c00
 8002a50:	40000400 	.word	0x40000400
 8002a54:	40000800 	.word	0x40000800
 8002a58:	40013400 	.word	0x40013400
 8002a5c:	40014000 	.word	0x40014000
 8002a60:	40014400 	.word	0x40014400
 8002a64:	40014800 	.word	0x40014800

08002a68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b087      	sub	sp, #28
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6a1b      	ldr	r3, [r3, #32]
 8002a78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6a1b      	ldr	r3, [r3, #32]
 8002a7e:	f023 0201 	bic.w	r2, r3, #1
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	699b      	ldr	r3, [r3, #24]
 8002a8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	011b      	lsls	r3, r3, #4
 8002a98:	693a      	ldr	r2, [r7, #16]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	f023 030a 	bic.w	r3, r3, #10
 8002aa4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002aa6:	697a      	ldr	r2, [r7, #20]
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	693a      	ldr	r2, [r7, #16]
 8002ab2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	697a      	ldr	r2, [r7, #20]
 8002ab8:	621a      	str	r2, [r3, #32]
}
 8002aba:	bf00      	nop
 8002abc:	371c      	adds	r7, #28
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr

08002ac6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ac6:	b480      	push	{r7}
 8002ac8:	b087      	sub	sp, #28
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	60f8      	str	r0, [r7, #12]
 8002ace:	60b9      	str	r1, [r7, #8]
 8002ad0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6a1b      	ldr	r3, [r3, #32]
 8002ad6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6a1b      	ldr	r3, [r3, #32]
 8002adc:	f023 0210 	bic.w	r2, r3, #16
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	699b      	ldr	r3, [r3, #24]
 8002ae8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002af0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	031b      	lsls	r3, r3, #12
 8002af6:	693a      	ldr	r2, [r7, #16]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b02:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	011b      	lsls	r3, r3, #4
 8002b08:	697a      	ldr	r2, [r7, #20]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	693a      	ldr	r2, [r7, #16]
 8002b12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	697a      	ldr	r2, [r7, #20]
 8002b18:	621a      	str	r2, [r3, #32]
}
 8002b1a:	bf00      	nop
 8002b1c:	371c      	adds	r7, #28
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr

08002b26 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b26:	b480      	push	{r7}
 8002b28:	b085      	sub	sp, #20
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
 8002b2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002b3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b42:	683a      	ldr	r2, [r7, #0]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	f043 0307 	orr.w	r3, r3, #7
 8002b4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	68fa      	ldr	r2, [r7, #12]
 8002b52:	609a      	str	r2, [r3, #8]
}
 8002b54:	bf00      	nop
 8002b56:	3714      	adds	r7, #20
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b087      	sub	sp, #28
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	607a      	str	r2, [r7, #4]
 8002b6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	021a      	lsls	r2, r3, #8
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	431a      	orrs	r2, r3
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	697a      	ldr	r2, [r7, #20]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	697a      	ldr	r2, [r7, #20]
 8002b92:	609a      	str	r2, [r3, #8]
}
 8002b94:	bf00      	nop
 8002b96:	371c      	adds	r7, #28
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b085      	sub	sp, #20
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d101      	bne.n	8002bb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002bb4:	2302      	movs	r3, #2
 8002bb6:	e065      	b.n	8002c84 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2202      	movs	r2, #2
 8002bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a2c      	ldr	r2, [pc, #176]	; (8002c90 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d004      	beq.n	8002bec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a2b      	ldr	r2, [pc, #172]	; (8002c94 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d108      	bne.n	8002bfe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002bf2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	68fa      	ldr	r2, [r7, #12]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8002c04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c08:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	68fa      	ldr	r2, [r7, #12]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	68fa      	ldr	r2, [r7, #12]
 8002c1a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a1b      	ldr	r2, [pc, #108]	; (8002c90 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d018      	beq.n	8002c58 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c2e:	d013      	beq.n	8002c58 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a18      	ldr	r2, [pc, #96]	; (8002c98 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d00e      	beq.n	8002c58 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a17      	ldr	r2, [pc, #92]	; (8002c9c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d009      	beq.n	8002c58 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a12      	ldr	r2, [pc, #72]	; (8002c94 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d004      	beq.n	8002c58 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a13      	ldr	r2, [pc, #76]	; (8002ca0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d10c      	bne.n	8002c72 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c5e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	68ba      	ldr	r2, [r7, #8]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68ba      	ldr	r2, [r7, #8]
 8002c70:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2201      	movs	r2, #1
 8002c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3714      	adds	r7, #20
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr
 8002c90:	40012c00 	.word	0x40012c00
 8002c94:	40013400 	.word	0x40013400
 8002c98:	40000400 	.word	0x40000400
 8002c9c:	40000800 	.word	0x40000800
 8002ca0:	40014000 	.word	0x40014000

08002ca4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d101      	bne.n	8002cb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e042      	b.n	8002d3c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d106      	bne.n	8002cce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f7fd ff2d 	bl	8000b28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2224      	movs	r2, #36	; 0x24
 8002cd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f022 0201 	bic.w	r2, r2, #1
 8002ce4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d002      	beq.n	8002cf4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f000 ff08 	bl	8003b04 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f000 fc39 	bl	800356c <UART_SetConfig>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d101      	bne.n	8002d04 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e01b      	b.n	8002d3c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	685a      	ldr	r2, [r3, #4]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	689a      	ldr	r2, [r3, #8]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d22:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f042 0201 	orr.w	r2, r2, #1
 8002d32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f000 ff87 	bl	8003c48 <UART_CheckIdleState>
 8002d3a:	4603      	mov	r3, r0
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3708      	adds	r7, #8
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b08a      	sub	sp, #40	; 0x28
 8002d48:	af02      	add	r7, sp, #8
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	603b      	str	r3, [r7, #0]
 8002d50:	4613      	mov	r3, r2
 8002d52:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d5a:	2b20      	cmp	r3, #32
 8002d5c:	d17b      	bne.n	8002e56 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d002      	beq.n	8002d6a <HAL_UART_Transmit+0x26>
 8002d64:	88fb      	ldrh	r3, [r7, #6]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d101      	bne.n	8002d6e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e074      	b.n	8002e58 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2200      	movs	r2, #0
 8002d72:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2221      	movs	r2, #33	; 0x21
 8002d7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d7e:	f7fd ffc1 	bl	8000d04 <HAL_GetTick>
 8002d82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	88fa      	ldrh	r2, [r7, #6]
 8002d88:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	88fa      	ldrh	r2, [r7, #6]
 8002d90:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d9c:	d108      	bne.n	8002db0 <HAL_UART_Transmit+0x6c>
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	691b      	ldr	r3, [r3, #16]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d104      	bne.n	8002db0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002da6:	2300      	movs	r3, #0
 8002da8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	61bb      	str	r3, [r7, #24]
 8002dae:	e003      	b.n	8002db8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002db4:	2300      	movs	r3, #0
 8002db6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002db8:	e030      	b.n	8002e1c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	9300      	str	r3, [sp, #0]
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	2180      	movs	r1, #128	; 0x80
 8002dc4:	68f8      	ldr	r0, [r7, #12]
 8002dc6:	f000 ffe9 	bl	8003d9c <UART_WaitOnFlagUntilTimeout>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d005      	beq.n	8002ddc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2220      	movs	r2, #32
 8002dd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e03d      	b.n	8002e58 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d10b      	bne.n	8002dfa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	881b      	ldrh	r3, [r3, #0]
 8002de6:	461a      	mov	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002df0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	3302      	adds	r3, #2
 8002df6:	61bb      	str	r3, [r7, #24]
 8002df8:	e007      	b.n	8002e0a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	781a      	ldrb	r2, [r3, #0]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	3301      	adds	r3, #1
 8002e08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	3b01      	subs	r3, #1
 8002e14:	b29a      	uxth	r2, r3
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d1c8      	bne.n	8002dba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	9300      	str	r3, [sp, #0]
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	2140      	movs	r1, #64	; 0x40
 8002e32:	68f8      	ldr	r0, [r7, #12]
 8002e34:	f000 ffb2 	bl	8003d9c <UART_WaitOnFlagUntilTimeout>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d005      	beq.n	8002e4a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2220      	movs	r2, #32
 8002e42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e006      	b.n	8002e58 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2220      	movs	r2, #32
 8002e4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8002e52:	2300      	movs	r3, #0
 8002e54:	e000      	b.n	8002e58 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8002e56:	2302      	movs	r3, #2
  }
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3720      	adds	r7, #32
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b08a      	sub	sp, #40	; 0x28
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e74:	2b20      	cmp	r3, #32
 8002e76:	d137      	bne.n	8002ee8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d002      	beq.n	8002e84 <HAL_UART_Receive_IT+0x24>
 8002e7e:	88fb      	ldrh	r3, [r7, #6]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d101      	bne.n	8002e88 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e030      	b.n	8002eea <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a18      	ldr	r2, [pc, #96]	; (8002ef4 <HAL_UART_Receive_IT+0x94>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d01f      	beq.n	8002ed8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d018      	beq.n	8002ed8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	e853 3f00 	ldrex	r3, [r3]
 8002eb2:	613b      	str	r3, [r7, #16]
   return(result);
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002eba:	627b      	str	r3, [r7, #36]	; 0x24
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec4:	623b      	str	r3, [r7, #32]
 8002ec6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ec8:	69f9      	ldr	r1, [r7, #28]
 8002eca:	6a3a      	ldr	r2, [r7, #32]
 8002ecc:	e841 2300 	strex	r3, r2, [r1]
 8002ed0:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d1e6      	bne.n	8002ea6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002ed8:	88fb      	ldrh	r3, [r7, #6]
 8002eda:	461a      	mov	r2, r3
 8002edc:	68b9      	ldr	r1, [r7, #8]
 8002ede:	68f8      	ldr	r0, [r7, #12]
 8002ee0:	f000 ffca 	bl	8003e78 <UART_Start_Receive_IT>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	e000      	b.n	8002eea <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002ee8:	2302      	movs	r3, #2
  }
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3728      	adds	r7, #40	; 0x28
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	40008000 	.word	0x40008000

08002ef8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b0ba      	sub	sp, #232	; 0xe8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	69db      	ldr	r3, [r3, #28]
 8002f06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002f1e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002f22:	f640 030f 	movw	r3, #2063	; 0x80f
 8002f26:	4013      	ands	r3, r2
 8002f28:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002f2c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d11b      	bne.n	8002f6c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002f34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f38:	f003 0320 	and.w	r3, r3, #32
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d015      	beq.n	8002f6c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002f40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f44:	f003 0320 	and.w	r3, r3, #32
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d105      	bne.n	8002f58 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002f4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d009      	beq.n	8002f6c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	f000 82e3 	beq.w	8003528 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	4798      	blx	r3
      }
      return;
 8002f6a:	e2dd      	b.n	8003528 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002f6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	f000 8123 	beq.w	80031bc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002f76:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002f7a:	4b8d      	ldr	r3, [pc, #564]	; (80031b0 <HAL_UART_IRQHandler+0x2b8>)
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d106      	bne.n	8002f90 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002f82:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002f86:	4b8b      	ldr	r3, [pc, #556]	; (80031b4 <HAL_UART_IRQHandler+0x2bc>)
 8002f88:	4013      	ands	r3, r2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	f000 8116 	beq.w	80031bc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002f90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f94:	f003 0301 	and.w	r3, r3, #1
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d011      	beq.n	8002fc0 <HAL_UART_IRQHandler+0xc8>
 8002f9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d00b      	beq.n	8002fc0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2201      	movs	r2, #1
 8002fae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fb6:	f043 0201 	orr.w	r2, r3, #1
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002fc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fc4:	f003 0302 	and.w	r3, r3, #2
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d011      	beq.n	8002ff0 <HAL_UART_IRQHandler+0xf8>
 8002fcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fd0:	f003 0301 	and.w	r3, r3, #1
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d00b      	beq.n	8002ff0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2202      	movs	r2, #2
 8002fde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fe6:	f043 0204 	orr.w	r2, r3, #4
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ff0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ff4:	f003 0304 	and.w	r3, r3, #4
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d011      	beq.n	8003020 <HAL_UART_IRQHandler+0x128>
 8002ffc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003000:	f003 0301 	and.w	r3, r3, #1
 8003004:	2b00      	cmp	r3, #0
 8003006:	d00b      	beq.n	8003020 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2204      	movs	r2, #4
 800300e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003016:	f043 0202 	orr.w	r2, r3, #2
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003020:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003024:	f003 0308 	and.w	r3, r3, #8
 8003028:	2b00      	cmp	r3, #0
 800302a:	d017      	beq.n	800305c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800302c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003030:	f003 0320 	and.w	r3, r3, #32
 8003034:	2b00      	cmp	r3, #0
 8003036:	d105      	bne.n	8003044 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003038:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800303c:	4b5c      	ldr	r3, [pc, #368]	; (80031b0 <HAL_UART_IRQHandler+0x2b8>)
 800303e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003040:	2b00      	cmp	r3, #0
 8003042:	d00b      	beq.n	800305c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2208      	movs	r2, #8
 800304a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003052:	f043 0208 	orr.w	r2, r3, #8
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800305c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003060:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003064:	2b00      	cmp	r3, #0
 8003066:	d012      	beq.n	800308e <HAL_UART_IRQHandler+0x196>
 8003068:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800306c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d00c      	beq.n	800308e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800307c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003084:	f043 0220 	orr.w	r2, r3, #32
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003094:	2b00      	cmp	r3, #0
 8003096:	f000 8249 	beq.w	800352c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800309a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800309e:	f003 0320 	and.w	r3, r3, #32
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d013      	beq.n	80030ce <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80030a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030aa:	f003 0320 	and.w	r3, r3, #32
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d105      	bne.n	80030be <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80030b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d007      	beq.n	80030ce <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d003      	beq.n	80030ce <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030e2:	2b40      	cmp	r3, #64	; 0x40
 80030e4:	d005      	beq.n	80030f2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80030e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80030ea:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d054      	beq.n	800319c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f000 ffe2 	bl	80040bc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003102:	2b40      	cmp	r3, #64	; 0x40
 8003104:	d146      	bne.n	8003194 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	3308      	adds	r3, #8
 800310c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003110:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003114:	e853 3f00 	ldrex	r3, [r3]
 8003118:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800311c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003120:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003124:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	3308      	adds	r3, #8
 800312e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003132:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003136:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800313a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800313e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003142:	e841 2300 	strex	r3, r2, [r1]
 8003146:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800314a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d1d9      	bne.n	8003106 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003158:	2b00      	cmp	r3, #0
 800315a:	d017      	beq.n	800318c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003162:	4a15      	ldr	r2, [pc, #84]	; (80031b8 <HAL_UART_IRQHandler+0x2c0>)
 8003164:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800316c:	4618      	mov	r0, r3
 800316e:	f7fe f830 	bl	80011d2 <HAL_DMA_Abort_IT>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d019      	beq.n	80031ac <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800317e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8003186:	4610      	mov	r0, r2
 8003188:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800318a:	e00f      	b.n	80031ac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f000 f9d7 	bl	8003540 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003192:	e00b      	b.n	80031ac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f000 f9d3 	bl	8003540 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800319a:	e007      	b.n	80031ac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f000 f9cf 	bl	8003540 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80031aa:	e1bf      	b.n	800352c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031ac:	bf00      	nop
    return;
 80031ae:	e1bd      	b.n	800352c <HAL_UART_IRQHandler+0x634>
 80031b0:	10000001 	.word	0x10000001
 80031b4:	04000120 	.word	0x04000120
 80031b8:	08004189 	.word	0x08004189

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	f040 8153 	bne.w	800346c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80031c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031ca:	f003 0310 	and.w	r3, r3, #16
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	f000 814c 	beq.w	800346c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80031d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031d8:	f003 0310 	and.w	r3, r3, #16
 80031dc:	2b00      	cmp	r3, #0
 80031de:	f000 8145 	beq.w	800346c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2210      	movs	r2, #16
 80031e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031f4:	2b40      	cmp	r3, #64	; 0x40
 80031f6:	f040 80bb 	bne.w	8003370 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003208:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800320c:	2b00      	cmp	r3, #0
 800320e:	f000 818f 	beq.w	8003530 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003218:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800321c:	429a      	cmp	r2, r3
 800321e:	f080 8187 	bcs.w	8003530 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003228:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0320 	and.w	r3, r3, #32
 800323a:	2b00      	cmp	r3, #0
 800323c:	f040 8087 	bne.w	800334e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003248:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800324c:	e853 3f00 	ldrex	r3, [r3]
 8003250:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003254:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003258:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800325c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	461a      	mov	r2, r3
 8003266:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800326a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800326e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003272:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003276:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800327a:	e841 2300 	strex	r3, r2, [r1]
 800327e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003282:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003286:	2b00      	cmp	r3, #0
 8003288:	d1da      	bne.n	8003240 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	3308      	adds	r3, #8
 8003290:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003292:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003294:	e853 3f00 	ldrex	r3, [r3]
 8003298:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800329a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800329c:	f023 0301 	bic.w	r3, r3, #1
 80032a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	3308      	adds	r3, #8
 80032aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80032ae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80032b2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032b4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80032b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80032ba:	e841 2300 	strex	r3, r2, [r1]
 80032be:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80032c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d1e1      	bne.n	800328a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	3308      	adds	r3, #8
 80032cc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032d0:	e853 3f00 	ldrex	r3, [r3]
 80032d4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80032d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	3308      	adds	r3, #8
 80032e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80032ea:	66fa      	str	r2, [r7, #108]	; 0x6c
 80032ec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80032f0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80032f2:	e841 2300 	strex	r3, r2, [r1]
 80032f6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80032f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d1e3      	bne.n	80032c6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2220      	movs	r2, #32
 8003302:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003312:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003314:	e853 3f00 	ldrex	r3, [r3]
 8003318:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800331a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800331c:	f023 0310 	bic.w	r3, r3, #16
 8003320:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	461a      	mov	r2, r3
 800332a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800332e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003330:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003332:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003334:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003336:	e841 2300 	strex	r3, r2, [r1]
 800333a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800333c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800333e:	2b00      	cmp	r3, #0
 8003340:	d1e4      	bne.n	800330c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003348:	4618      	mov	r0, r3
 800334a:	f7fd fee9 	bl	8001120 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2202      	movs	r2, #2
 8003352:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003360:	b29b      	uxth	r3, r3
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	b29b      	uxth	r3, r3
 8003366:	4619      	mov	r1, r3
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f000 f8f3 	bl	8003554 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800336e:	e0df      	b.n	8003530 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800337c:	b29b      	uxth	r3, r3
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800338a:	b29b      	uxth	r3, r3
 800338c:	2b00      	cmp	r3, #0
 800338e:	f000 80d1 	beq.w	8003534 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8003392:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003396:	2b00      	cmp	r3, #0
 8003398:	f000 80cc 	beq.w	8003534 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033a4:	e853 3f00 	ldrex	r3, [r3]
 80033a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80033aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80033b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	461a      	mov	r2, r3
 80033ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80033be:	647b      	str	r3, [r7, #68]	; 0x44
 80033c0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80033c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80033c6:	e841 2300 	strex	r3, r2, [r1]
 80033ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80033cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d1e4      	bne.n	800339c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	3308      	adds	r3, #8
 80033d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033dc:	e853 3f00 	ldrex	r3, [r3]
 80033e0:	623b      	str	r3, [r7, #32]
   return(result);
 80033e2:	6a3b      	ldr	r3, [r7, #32]
 80033e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033e8:	f023 0301 	bic.w	r3, r3, #1
 80033ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	3308      	adds	r3, #8
 80033f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80033fa:	633a      	str	r2, [r7, #48]	; 0x30
 80033fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003400:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003402:	e841 2300 	strex	r3, r2, [r1]
 8003406:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1e1      	bne.n	80033d2 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2220      	movs	r2, #32
 8003412:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	e853 3f00 	ldrex	r3, [r3]
 800342e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f023 0310 	bic.w	r3, r3, #16
 8003436:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	461a      	mov	r2, r3
 8003440:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003444:	61fb      	str	r3, [r7, #28]
 8003446:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003448:	69b9      	ldr	r1, [r7, #24]
 800344a:	69fa      	ldr	r2, [r7, #28]
 800344c:	e841 2300 	strex	r3, r2, [r1]
 8003450:	617b      	str	r3, [r7, #20]
   return(result);
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d1e4      	bne.n	8003422 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2202      	movs	r2, #2
 800345c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800345e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003462:	4619      	mov	r1, r3
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f000 f875 	bl	8003554 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800346a:	e063      	b.n	8003534 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800346c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003470:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d00e      	beq.n	8003496 <HAL_UART_IRQHandler+0x59e>
 8003478:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800347c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d008      	beq.n	8003496 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800348c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f001 fbd8 	bl	8004c44 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003494:	e051      	b.n	800353a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003496:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800349a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d014      	beq.n	80034cc <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80034a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d105      	bne.n	80034ba <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80034ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d008      	beq.n	80034cc <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d03a      	beq.n	8003538 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	4798      	blx	r3
    }
    return;
 80034ca:	e035      	b.n	8003538 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80034cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d009      	beq.n	80034ec <HAL_UART_IRQHandler+0x5f4>
 80034d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d003      	beq.n	80034ec <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 fe65 	bl	80041b4 <UART_EndTransmit_IT>
    return;
 80034ea:	e026      	b.n	800353a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80034ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d009      	beq.n	800350c <HAL_UART_IRQHandler+0x614>
 80034f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034fc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d003      	beq.n	800350c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f001 fbb1 	bl	8004c6c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800350a:	e016      	b.n	800353a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800350c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003510:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d010      	beq.n	800353a <HAL_UART_IRQHandler+0x642>
 8003518:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800351c:	2b00      	cmp	r3, #0
 800351e:	da0c      	bge.n	800353a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f001 fb99 	bl	8004c58 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003526:	e008      	b.n	800353a <HAL_UART_IRQHandler+0x642>
      return;
 8003528:	bf00      	nop
 800352a:	e006      	b.n	800353a <HAL_UART_IRQHandler+0x642>
    return;
 800352c:	bf00      	nop
 800352e:	e004      	b.n	800353a <HAL_UART_IRQHandler+0x642>
      return;
 8003530:	bf00      	nop
 8003532:	e002      	b.n	800353a <HAL_UART_IRQHandler+0x642>
      return;
 8003534:	bf00      	nop
 8003536:	e000      	b.n	800353a <HAL_UART_IRQHandler+0x642>
    return;
 8003538:	bf00      	nop
  }
}
 800353a:	37e8      	adds	r7, #232	; 0xe8
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003548:	bf00      	nop
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	460b      	mov	r3, r1
 800355e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003560:	bf00      	nop
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800356c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003570:	b08c      	sub	sp, #48	; 0x30
 8003572:	af00      	add	r7, sp, #0
 8003574:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003576:	2300      	movs	r3, #0
 8003578:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	689a      	ldr	r2, [r3, #8]
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	431a      	orrs	r2, r3
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	431a      	orrs	r2, r3
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	69db      	ldr	r3, [r3, #28]
 8003590:	4313      	orrs	r3, r2
 8003592:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	4bab      	ldr	r3, [pc, #684]	; (8003848 <UART_SetConfig+0x2dc>)
 800359c:	4013      	ands	r3, r2
 800359e:	697a      	ldr	r2, [r7, #20]
 80035a0:	6812      	ldr	r2, [r2, #0]
 80035a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80035a4:	430b      	orrs	r3, r1
 80035a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	68da      	ldr	r2, [r3, #12]
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	430a      	orrs	r2, r1
 80035bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4aa0      	ldr	r2, [pc, #640]	; (800384c <UART_SetConfig+0x2e0>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d004      	beq.n	80035d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	6a1b      	ldr	r3, [r3, #32]
 80035d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035d4:	4313      	orrs	r3, r2
 80035d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80035e2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80035e6:	697a      	ldr	r2, [r7, #20]
 80035e8:	6812      	ldr	r2, [r2, #0]
 80035ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80035ec:	430b      	orrs	r3, r1
 80035ee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f6:	f023 010f 	bic.w	r1, r3, #15
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	430a      	orrs	r2, r1
 8003604:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a91      	ldr	r2, [pc, #580]	; (8003850 <UART_SetConfig+0x2e4>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d125      	bne.n	800365c <UART_SetConfig+0xf0>
 8003610:	4b90      	ldr	r3, [pc, #576]	; (8003854 <UART_SetConfig+0x2e8>)
 8003612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003616:	f003 0303 	and.w	r3, r3, #3
 800361a:	2b03      	cmp	r3, #3
 800361c:	d81a      	bhi.n	8003654 <UART_SetConfig+0xe8>
 800361e:	a201      	add	r2, pc, #4	; (adr r2, 8003624 <UART_SetConfig+0xb8>)
 8003620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003624:	08003635 	.word	0x08003635
 8003628:	08003645 	.word	0x08003645
 800362c:	0800363d 	.word	0x0800363d
 8003630:	0800364d 	.word	0x0800364d
 8003634:	2301      	movs	r3, #1
 8003636:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800363a:	e0d6      	b.n	80037ea <UART_SetConfig+0x27e>
 800363c:	2302      	movs	r3, #2
 800363e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003642:	e0d2      	b.n	80037ea <UART_SetConfig+0x27e>
 8003644:	2304      	movs	r3, #4
 8003646:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800364a:	e0ce      	b.n	80037ea <UART_SetConfig+0x27e>
 800364c:	2308      	movs	r3, #8
 800364e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003652:	e0ca      	b.n	80037ea <UART_SetConfig+0x27e>
 8003654:	2310      	movs	r3, #16
 8003656:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800365a:	e0c6      	b.n	80037ea <UART_SetConfig+0x27e>
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a7d      	ldr	r2, [pc, #500]	; (8003858 <UART_SetConfig+0x2ec>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d138      	bne.n	80036d8 <UART_SetConfig+0x16c>
 8003666:	4b7b      	ldr	r3, [pc, #492]	; (8003854 <UART_SetConfig+0x2e8>)
 8003668:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800366c:	f003 030c 	and.w	r3, r3, #12
 8003670:	2b0c      	cmp	r3, #12
 8003672:	d82d      	bhi.n	80036d0 <UART_SetConfig+0x164>
 8003674:	a201      	add	r2, pc, #4	; (adr r2, 800367c <UART_SetConfig+0x110>)
 8003676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800367a:	bf00      	nop
 800367c:	080036b1 	.word	0x080036b1
 8003680:	080036d1 	.word	0x080036d1
 8003684:	080036d1 	.word	0x080036d1
 8003688:	080036d1 	.word	0x080036d1
 800368c:	080036c1 	.word	0x080036c1
 8003690:	080036d1 	.word	0x080036d1
 8003694:	080036d1 	.word	0x080036d1
 8003698:	080036d1 	.word	0x080036d1
 800369c:	080036b9 	.word	0x080036b9
 80036a0:	080036d1 	.word	0x080036d1
 80036a4:	080036d1 	.word	0x080036d1
 80036a8:	080036d1 	.word	0x080036d1
 80036ac:	080036c9 	.word	0x080036c9
 80036b0:	2300      	movs	r3, #0
 80036b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036b6:	e098      	b.n	80037ea <UART_SetConfig+0x27e>
 80036b8:	2302      	movs	r3, #2
 80036ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036be:	e094      	b.n	80037ea <UART_SetConfig+0x27e>
 80036c0:	2304      	movs	r3, #4
 80036c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036c6:	e090      	b.n	80037ea <UART_SetConfig+0x27e>
 80036c8:	2308      	movs	r3, #8
 80036ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036ce:	e08c      	b.n	80037ea <UART_SetConfig+0x27e>
 80036d0:	2310      	movs	r3, #16
 80036d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036d6:	e088      	b.n	80037ea <UART_SetConfig+0x27e>
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a5f      	ldr	r2, [pc, #380]	; (800385c <UART_SetConfig+0x2f0>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d125      	bne.n	800372e <UART_SetConfig+0x1c2>
 80036e2:	4b5c      	ldr	r3, [pc, #368]	; (8003854 <UART_SetConfig+0x2e8>)
 80036e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036e8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80036ec:	2b30      	cmp	r3, #48	; 0x30
 80036ee:	d016      	beq.n	800371e <UART_SetConfig+0x1b2>
 80036f0:	2b30      	cmp	r3, #48	; 0x30
 80036f2:	d818      	bhi.n	8003726 <UART_SetConfig+0x1ba>
 80036f4:	2b20      	cmp	r3, #32
 80036f6:	d00a      	beq.n	800370e <UART_SetConfig+0x1a2>
 80036f8:	2b20      	cmp	r3, #32
 80036fa:	d814      	bhi.n	8003726 <UART_SetConfig+0x1ba>
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d002      	beq.n	8003706 <UART_SetConfig+0x19a>
 8003700:	2b10      	cmp	r3, #16
 8003702:	d008      	beq.n	8003716 <UART_SetConfig+0x1aa>
 8003704:	e00f      	b.n	8003726 <UART_SetConfig+0x1ba>
 8003706:	2300      	movs	r3, #0
 8003708:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800370c:	e06d      	b.n	80037ea <UART_SetConfig+0x27e>
 800370e:	2302      	movs	r3, #2
 8003710:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003714:	e069      	b.n	80037ea <UART_SetConfig+0x27e>
 8003716:	2304      	movs	r3, #4
 8003718:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800371c:	e065      	b.n	80037ea <UART_SetConfig+0x27e>
 800371e:	2308      	movs	r3, #8
 8003720:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003724:	e061      	b.n	80037ea <UART_SetConfig+0x27e>
 8003726:	2310      	movs	r3, #16
 8003728:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800372c:	e05d      	b.n	80037ea <UART_SetConfig+0x27e>
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a4b      	ldr	r2, [pc, #300]	; (8003860 <UART_SetConfig+0x2f4>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d125      	bne.n	8003784 <UART_SetConfig+0x218>
 8003738:	4b46      	ldr	r3, [pc, #280]	; (8003854 <UART_SetConfig+0x2e8>)
 800373a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800373e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003742:	2bc0      	cmp	r3, #192	; 0xc0
 8003744:	d016      	beq.n	8003774 <UART_SetConfig+0x208>
 8003746:	2bc0      	cmp	r3, #192	; 0xc0
 8003748:	d818      	bhi.n	800377c <UART_SetConfig+0x210>
 800374a:	2b80      	cmp	r3, #128	; 0x80
 800374c:	d00a      	beq.n	8003764 <UART_SetConfig+0x1f8>
 800374e:	2b80      	cmp	r3, #128	; 0x80
 8003750:	d814      	bhi.n	800377c <UART_SetConfig+0x210>
 8003752:	2b00      	cmp	r3, #0
 8003754:	d002      	beq.n	800375c <UART_SetConfig+0x1f0>
 8003756:	2b40      	cmp	r3, #64	; 0x40
 8003758:	d008      	beq.n	800376c <UART_SetConfig+0x200>
 800375a:	e00f      	b.n	800377c <UART_SetConfig+0x210>
 800375c:	2300      	movs	r3, #0
 800375e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003762:	e042      	b.n	80037ea <UART_SetConfig+0x27e>
 8003764:	2302      	movs	r3, #2
 8003766:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800376a:	e03e      	b.n	80037ea <UART_SetConfig+0x27e>
 800376c:	2304      	movs	r3, #4
 800376e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003772:	e03a      	b.n	80037ea <UART_SetConfig+0x27e>
 8003774:	2308      	movs	r3, #8
 8003776:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800377a:	e036      	b.n	80037ea <UART_SetConfig+0x27e>
 800377c:	2310      	movs	r3, #16
 800377e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003782:	e032      	b.n	80037ea <UART_SetConfig+0x27e>
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a30      	ldr	r2, [pc, #192]	; (800384c <UART_SetConfig+0x2e0>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d12a      	bne.n	80037e4 <UART_SetConfig+0x278>
 800378e:	4b31      	ldr	r3, [pc, #196]	; (8003854 <UART_SetConfig+0x2e8>)
 8003790:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003794:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003798:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800379c:	d01a      	beq.n	80037d4 <UART_SetConfig+0x268>
 800379e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80037a2:	d81b      	bhi.n	80037dc <UART_SetConfig+0x270>
 80037a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037a8:	d00c      	beq.n	80037c4 <UART_SetConfig+0x258>
 80037aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037ae:	d815      	bhi.n	80037dc <UART_SetConfig+0x270>
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d003      	beq.n	80037bc <UART_SetConfig+0x250>
 80037b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037b8:	d008      	beq.n	80037cc <UART_SetConfig+0x260>
 80037ba:	e00f      	b.n	80037dc <UART_SetConfig+0x270>
 80037bc:	2300      	movs	r3, #0
 80037be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037c2:	e012      	b.n	80037ea <UART_SetConfig+0x27e>
 80037c4:	2302      	movs	r3, #2
 80037c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037ca:	e00e      	b.n	80037ea <UART_SetConfig+0x27e>
 80037cc:	2304      	movs	r3, #4
 80037ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037d2:	e00a      	b.n	80037ea <UART_SetConfig+0x27e>
 80037d4:	2308      	movs	r3, #8
 80037d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037da:	e006      	b.n	80037ea <UART_SetConfig+0x27e>
 80037dc:	2310      	movs	r3, #16
 80037de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037e2:	e002      	b.n	80037ea <UART_SetConfig+0x27e>
 80037e4:	2310      	movs	r3, #16
 80037e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a17      	ldr	r2, [pc, #92]	; (800384c <UART_SetConfig+0x2e0>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	f040 80a8 	bne.w	8003946 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80037f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80037fa:	2b08      	cmp	r3, #8
 80037fc:	d834      	bhi.n	8003868 <UART_SetConfig+0x2fc>
 80037fe:	a201      	add	r2, pc, #4	; (adr r2, 8003804 <UART_SetConfig+0x298>)
 8003800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003804:	08003829 	.word	0x08003829
 8003808:	08003869 	.word	0x08003869
 800380c:	08003831 	.word	0x08003831
 8003810:	08003869 	.word	0x08003869
 8003814:	08003837 	.word	0x08003837
 8003818:	08003869 	.word	0x08003869
 800381c:	08003869 	.word	0x08003869
 8003820:	08003869 	.word	0x08003869
 8003824:	0800383f 	.word	0x0800383f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003828:	f7fe fc44 	bl	80020b4 <HAL_RCC_GetPCLK1Freq>
 800382c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800382e:	e021      	b.n	8003874 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003830:	4b0c      	ldr	r3, [pc, #48]	; (8003864 <UART_SetConfig+0x2f8>)
 8003832:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003834:	e01e      	b.n	8003874 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003836:	f7fe fbcf 	bl	8001fd8 <HAL_RCC_GetSysClockFreq>
 800383a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800383c:	e01a      	b.n	8003874 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800383e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003842:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003844:	e016      	b.n	8003874 <UART_SetConfig+0x308>
 8003846:	bf00      	nop
 8003848:	cfff69f3 	.word	0xcfff69f3
 800384c:	40008000 	.word	0x40008000
 8003850:	40013800 	.word	0x40013800
 8003854:	40021000 	.word	0x40021000
 8003858:	40004400 	.word	0x40004400
 800385c:	40004800 	.word	0x40004800
 8003860:	40004c00 	.word	0x40004c00
 8003864:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003868:	2300      	movs	r3, #0
 800386a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003872:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003876:	2b00      	cmp	r3, #0
 8003878:	f000 812a 	beq.w	8003ad0 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003880:	4a9e      	ldr	r2, [pc, #632]	; (8003afc <UART_SetConfig+0x590>)
 8003882:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003886:	461a      	mov	r2, r3
 8003888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388a:	fbb3 f3f2 	udiv	r3, r3, r2
 800388e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	685a      	ldr	r2, [r3, #4]
 8003894:	4613      	mov	r3, r2
 8003896:	005b      	lsls	r3, r3, #1
 8003898:	4413      	add	r3, r2
 800389a:	69ba      	ldr	r2, [r7, #24]
 800389c:	429a      	cmp	r2, r3
 800389e:	d305      	bcc.n	80038ac <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80038a6:	69ba      	ldr	r2, [r7, #24]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d903      	bls.n	80038b4 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80038b2:	e10d      	b.n	8003ad0 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80038b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b6:	2200      	movs	r2, #0
 80038b8:	60bb      	str	r3, [r7, #8]
 80038ba:	60fa      	str	r2, [r7, #12]
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c0:	4a8e      	ldr	r2, [pc, #568]	; (8003afc <UART_SetConfig+0x590>)
 80038c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	2200      	movs	r2, #0
 80038ca:	603b      	str	r3, [r7, #0]
 80038cc:	607a      	str	r2, [r7, #4]
 80038ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80038d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80038d6:	f7fc fcf3 	bl	80002c0 <__aeabi_uldivmod>
 80038da:	4602      	mov	r2, r0
 80038dc:	460b      	mov	r3, r1
 80038de:	4610      	mov	r0, r2
 80038e0:	4619      	mov	r1, r3
 80038e2:	f04f 0200 	mov.w	r2, #0
 80038e6:	f04f 0300 	mov.w	r3, #0
 80038ea:	020b      	lsls	r3, r1, #8
 80038ec:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80038f0:	0202      	lsls	r2, r0, #8
 80038f2:	6979      	ldr	r1, [r7, #20]
 80038f4:	6849      	ldr	r1, [r1, #4]
 80038f6:	0849      	lsrs	r1, r1, #1
 80038f8:	2000      	movs	r0, #0
 80038fa:	460c      	mov	r4, r1
 80038fc:	4605      	mov	r5, r0
 80038fe:	eb12 0804 	adds.w	r8, r2, r4
 8003902:	eb43 0905 	adc.w	r9, r3, r5
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	469a      	mov	sl, r3
 800390e:	4693      	mov	fp, r2
 8003910:	4652      	mov	r2, sl
 8003912:	465b      	mov	r3, fp
 8003914:	4640      	mov	r0, r8
 8003916:	4649      	mov	r1, r9
 8003918:	f7fc fcd2 	bl	80002c0 <__aeabi_uldivmod>
 800391c:	4602      	mov	r2, r0
 800391e:	460b      	mov	r3, r1
 8003920:	4613      	mov	r3, r2
 8003922:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003924:	6a3b      	ldr	r3, [r7, #32]
 8003926:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800392a:	d308      	bcc.n	800393e <UART_SetConfig+0x3d2>
 800392c:	6a3b      	ldr	r3, [r7, #32]
 800392e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003932:	d204      	bcs.n	800393e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	6a3a      	ldr	r2, [r7, #32]
 800393a:	60da      	str	r2, [r3, #12]
 800393c:	e0c8      	b.n	8003ad0 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003944:	e0c4      	b.n	8003ad0 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	69db      	ldr	r3, [r3, #28]
 800394a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800394e:	d167      	bne.n	8003a20 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8003950:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003954:	2b08      	cmp	r3, #8
 8003956:	d828      	bhi.n	80039aa <UART_SetConfig+0x43e>
 8003958:	a201      	add	r2, pc, #4	; (adr r2, 8003960 <UART_SetConfig+0x3f4>)
 800395a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800395e:	bf00      	nop
 8003960:	08003985 	.word	0x08003985
 8003964:	0800398d 	.word	0x0800398d
 8003968:	08003995 	.word	0x08003995
 800396c:	080039ab 	.word	0x080039ab
 8003970:	0800399b 	.word	0x0800399b
 8003974:	080039ab 	.word	0x080039ab
 8003978:	080039ab 	.word	0x080039ab
 800397c:	080039ab 	.word	0x080039ab
 8003980:	080039a3 	.word	0x080039a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003984:	f7fe fb96 	bl	80020b4 <HAL_RCC_GetPCLK1Freq>
 8003988:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800398a:	e014      	b.n	80039b6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800398c:	f7fe fba8 	bl	80020e0 <HAL_RCC_GetPCLK2Freq>
 8003990:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003992:	e010      	b.n	80039b6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003994:	4b5a      	ldr	r3, [pc, #360]	; (8003b00 <UART_SetConfig+0x594>)
 8003996:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003998:	e00d      	b.n	80039b6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800399a:	f7fe fb1d 	bl	8001fd8 <HAL_RCC_GetSysClockFreq>
 800399e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80039a0:	e009      	b.n	80039b6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80039a8:	e005      	b.n	80039b6 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80039aa:	2300      	movs	r3, #0
 80039ac:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80039b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80039b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	f000 8089 	beq.w	8003ad0 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c2:	4a4e      	ldr	r2, [pc, #312]	; (8003afc <UART_SetConfig+0x590>)
 80039c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80039c8:	461a      	mov	r2, r3
 80039ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80039d0:	005a      	lsls	r2, r3, #1
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	085b      	lsrs	r3, r3, #1
 80039d8:	441a      	add	r2, r3
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039e4:	6a3b      	ldr	r3, [r7, #32]
 80039e6:	2b0f      	cmp	r3, #15
 80039e8:	d916      	bls.n	8003a18 <UART_SetConfig+0x4ac>
 80039ea:	6a3b      	ldr	r3, [r7, #32]
 80039ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039f0:	d212      	bcs.n	8003a18 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80039f2:	6a3b      	ldr	r3, [r7, #32]
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	f023 030f 	bic.w	r3, r3, #15
 80039fa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80039fc:	6a3b      	ldr	r3, [r7, #32]
 80039fe:	085b      	lsrs	r3, r3, #1
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	f003 0307 	and.w	r3, r3, #7
 8003a06:	b29a      	uxth	r2, r3
 8003a08:	8bfb      	ldrh	r3, [r7, #30]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	8bfa      	ldrh	r2, [r7, #30]
 8003a14:	60da      	str	r2, [r3, #12]
 8003a16:	e05b      	b.n	8003ad0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003a1e:	e057      	b.n	8003ad0 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a20:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003a24:	2b08      	cmp	r3, #8
 8003a26:	d828      	bhi.n	8003a7a <UART_SetConfig+0x50e>
 8003a28:	a201      	add	r2, pc, #4	; (adr r2, 8003a30 <UART_SetConfig+0x4c4>)
 8003a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a2e:	bf00      	nop
 8003a30:	08003a55 	.word	0x08003a55
 8003a34:	08003a5d 	.word	0x08003a5d
 8003a38:	08003a65 	.word	0x08003a65
 8003a3c:	08003a7b 	.word	0x08003a7b
 8003a40:	08003a6b 	.word	0x08003a6b
 8003a44:	08003a7b 	.word	0x08003a7b
 8003a48:	08003a7b 	.word	0x08003a7b
 8003a4c:	08003a7b 	.word	0x08003a7b
 8003a50:	08003a73 	.word	0x08003a73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a54:	f7fe fb2e 	bl	80020b4 <HAL_RCC_GetPCLK1Freq>
 8003a58:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003a5a:	e014      	b.n	8003a86 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a5c:	f7fe fb40 	bl	80020e0 <HAL_RCC_GetPCLK2Freq>
 8003a60:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003a62:	e010      	b.n	8003a86 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a64:	4b26      	ldr	r3, [pc, #152]	; (8003b00 <UART_SetConfig+0x594>)
 8003a66:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003a68:	e00d      	b.n	8003a86 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a6a:	f7fe fab5 	bl	8001fd8 <HAL_RCC_GetSysClockFreq>
 8003a6e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003a70:	e009      	b.n	8003a86 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a76:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003a78:	e005      	b.n	8003a86 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003a84:	bf00      	nop
    }

    if (pclk != 0U)
 8003a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d021      	beq.n	8003ad0 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a90:	4a1a      	ldr	r2, [pc, #104]	; (8003afc <UART_SetConfig+0x590>)
 8003a92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a96:	461a      	mov	r2, r3
 8003a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9a:	fbb3 f2f2 	udiv	r2, r3, r2
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	085b      	lsrs	r3, r3, #1
 8003aa4:	441a      	add	r2, r3
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ab0:	6a3b      	ldr	r3, [r7, #32]
 8003ab2:	2b0f      	cmp	r3, #15
 8003ab4:	d909      	bls.n	8003aca <UART_SetConfig+0x55e>
 8003ab6:	6a3b      	ldr	r3, [r7, #32]
 8003ab8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003abc:	d205      	bcs.n	8003aca <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003abe:	6a3b      	ldr	r3, [r7, #32]
 8003ac0:	b29a      	uxth	r2, r3
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	60da      	str	r2, [r3, #12]
 8003ac8:	e002      	b.n	8003ad0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003aec:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3730      	adds	r7, #48	; 0x30
 8003af4:	46bd      	mov	sp, r7
 8003af6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003afa:	bf00      	nop
 8003afc:	080091a8 	.word	0x080091a8
 8003b00:	00f42400 	.word	0x00f42400

08003b04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b10:	f003 0308 	and.w	r3, r3, #8
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d00a      	beq.n	8003b2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	430a      	orrs	r2, r1
 8003b2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b32:	f003 0301 	and.w	r3, r3, #1
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d00a      	beq.n	8003b50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	430a      	orrs	r2, r1
 8003b4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b54:	f003 0302 	and.w	r3, r3, #2
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d00a      	beq.n	8003b72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	430a      	orrs	r2, r1
 8003b70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b76:	f003 0304 	and.w	r3, r3, #4
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00a      	beq.n	8003b94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	430a      	orrs	r2, r1
 8003b92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b98:	f003 0310 	and.w	r3, r3, #16
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d00a      	beq.n	8003bb6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bba:	f003 0320 	and.w	r3, r3, #32
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d00a      	beq.n	8003bd8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	430a      	orrs	r2, r1
 8003bd6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d01a      	beq.n	8003c1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	430a      	orrs	r2, r1
 8003bf8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c02:	d10a      	bne.n	8003c1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	430a      	orrs	r2, r1
 8003c18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d00a      	beq.n	8003c3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	430a      	orrs	r2, r1
 8003c3a:	605a      	str	r2, [r3, #4]
  }
}
 8003c3c:	bf00      	nop
 8003c3e:	370c      	adds	r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b098      	sub	sp, #96	; 0x60
 8003c4c:	af02      	add	r7, sp, #8
 8003c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c58:	f7fd f854 	bl	8000d04 <HAL_GetTick>
 8003c5c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0308 	and.w	r3, r3, #8
 8003c68:	2b08      	cmp	r3, #8
 8003c6a:	d12f      	bne.n	8003ccc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c70:	9300      	str	r3, [sp, #0]
 8003c72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c74:	2200      	movs	r2, #0
 8003c76:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f000 f88e 	bl	8003d9c <UART_WaitOnFlagUntilTimeout>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d022      	beq.n	8003ccc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c8e:	e853 3f00 	ldrex	r3, [r3]
 8003c92:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003c94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c9a:	653b      	str	r3, [r7, #80]	; 0x50
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ca4:	647b      	str	r3, [r7, #68]	; 0x44
 8003ca6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003caa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003cac:	e841 2300 	strex	r3, r2, [r1]
 8003cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003cb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d1e6      	bne.n	8003c86 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2220      	movs	r2, #32
 8003cbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	e063      	b.n	8003d94 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0304 	and.w	r3, r3, #4
 8003cd6:	2b04      	cmp	r3, #4
 8003cd8:	d149      	bne.n	8003d6e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cda:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003cde:	9300      	str	r3, [sp, #0]
 8003ce0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f000 f857 	bl	8003d9c <UART_WaitOnFlagUntilTimeout>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d03c      	beq.n	8003d6e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfc:	e853 3f00 	ldrex	r3, [r3]
 8003d00:	623b      	str	r3, [r7, #32]
   return(result);
 8003d02:	6a3b      	ldr	r3, [r7, #32]
 8003d04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d08:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	461a      	mov	r2, r3
 8003d10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d12:	633b      	str	r3, [r7, #48]	; 0x30
 8003d14:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d1a:	e841 2300 	strex	r3, r2, [r1]
 8003d1e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d1e6      	bne.n	8003cf4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	3308      	adds	r3, #8
 8003d2c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	e853 3f00 	ldrex	r3, [r3]
 8003d34:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	f023 0301 	bic.w	r3, r3, #1
 8003d3c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	3308      	adds	r3, #8
 8003d44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d46:	61fa      	str	r2, [r7, #28]
 8003d48:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d4a:	69b9      	ldr	r1, [r7, #24]
 8003d4c:	69fa      	ldr	r2, [r7, #28]
 8003d4e:	e841 2300 	strex	r3, r2, [r1]
 8003d52:	617b      	str	r3, [r7, #20]
   return(result);
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d1e5      	bne.n	8003d26 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2220      	movs	r2, #32
 8003d5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e012      	b.n	8003d94 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2220      	movs	r2, #32
 8003d72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2220      	movs	r2, #32
 8003d7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003d92:	2300      	movs	r3, #0
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3758      	adds	r7, #88	; 0x58
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	60b9      	str	r1, [r7, #8]
 8003da6:	603b      	str	r3, [r7, #0]
 8003da8:	4613      	mov	r3, r2
 8003daa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dac:	e04f      	b.n	8003e4e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dae:	69bb      	ldr	r3, [r7, #24]
 8003db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003db4:	d04b      	beq.n	8003e4e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003db6:	f7fc ffa5 	bl	8000d04 <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	69ba      	ldr	r2, [r7, #24]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d302      	bcc.n	8003dcc <UART_WaitOnFlagUntilTimeout+0x30>
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d101      	bne.n	8003dd0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	e04e      	b.n	8003e6e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0304 	and.w	r3, r3, #4
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d037      	beq.n	8003e4e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	2b80      	cmp	r3, #128	; 0x80
 8003de2:	d034      	beq.n	8003e4e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	2b40      	cmp	r3, #64	; 0x40
 8003de8:	d031      	beq.n	8003e4e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	69db      	ldr	r3, [r3, #28]
 8003df0:	f003 0308 	and.w	r3, r3, #8
 8003df4:	2b08      	cmp	r3, #8
 8003df6:	d110      	bne.n	8003e1a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2208      	movs	r2, #8
 8003dfe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e00:	68f8      	ldr	r0, [r7, #12]
 8003e02:	f000 f95b 	bl	80040bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2208      	movs	r2, #8
 8003e0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e029      	b.n	8003e6e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	69db      	ldr	r3, [r3, #28]
 8003e20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e28:	d111      	bne.n	8003e4e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e34:	68f8      	ldr	r0, [r7, #12]
 8003e36:	f000 f941 	bl	80040bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2220      	movs	r2, #32
 8003e3e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2200      	movs	r2, #0
 8003e46:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e00f      	b.n	8003e6e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	69da      	ldr	r2, [r3, #28]
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	4013      	ands	r3, r2
 8003e58:	68ba      	ldr	r2, [r7, #8]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	bf0c      	ite	eq
 8003e5e:	2301      	moveq	r3, #1
 8003e60:	2300      	movne	r3, #0
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	461a      	mov	r2, r3
 8003e66:	79fb      	ldrb	r3, [r7, #7]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d0a0      	beq.n	8003dae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3710      	adds	r7, #16
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
	...

08003e78 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b0a3      	sub	sp, #140	; 0x8c
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	60b9      	str	r1, [r7, #8]
 8003e82:	4613      	mov	r3, r2
 8003e84:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	68ba      	ldr	r2, [r7, #8]
 8003e8a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	88fa      	ldrh	r2, [r7, #6]
 8003e90:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	88fa      	ldrh	r2, [r7, #6]
 8003e98:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eaa:	d10e      	bne.n	8003eca <UART_Start_Receive_IT+0x52>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	691b      	ldr	r3, [r3, #16]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d105      	bne.n	8003ec0 <UART_Start_Receive_IT+0x48>
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003eba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003ebe:	e02d      	b.n	8003f1c <UART_Start_Receive_IT+0xa4>
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	22ff      	movs	r2, #255	; 0xff
 8003ec4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003ec8:	e028      	b.n	8003f1c <UART_Start_Receive_IT+0xa4>
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d10d      	bne.n	8003eee <UART_Start_Receive_IT+0x76>
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d104      	bne.n	8003ee4 <UART_Start_Receive_IT+0x6c>
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	22ff      	movs	r2, #255	; 0xff
 8003ede:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003ee2:	e01b      	b.n	8003f1c <UART_Start_Receive_IT+0xa4>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	227f      	movs	r2, #127	; 0x7f
 8003ee8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003eec:	e016      	b.n	8003f1c <UART_Start_Receive_IT+0xa4>
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ef6:	d10d      	bne.n	8003f14 <UART_Start_Receive_IT+0x9c>
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	691b      	ldr	r3, [r3, #16]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d104      	bne.n	8003f0a <UART_Start_Receive_IT+0x92>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	227f      	movs	r2, #127	; 0x7f
 8003f04:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003f08:	e008      	b.n	8003f1c <UART_Start_Receive_IT+0xa4>
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	223f      	movs	r2, #63	; 0x3f
 8003f0e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003f12:	e003      	b.n	8003f1c <UART_Start_Receive_IT+0xa4>
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2222      	movs	r2, #34	; 0x22
 8003f28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	3308      	adds	r3, #8
 8003f32:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f36:	e853 3f00 	ldrex	r3, [r3]
 8003f3a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8003f3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f3e:	f043 0301 	orr.w	r3, r3, #1
 8003f42:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	3308      	adds	r3, #8
 8003f4c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003f50:	673a      	str	r2, [r7, #112]	; 0x70
 8003f52:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f54:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8003f56:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003f58:	e841 2300 	strex	r3, r2, [r1]
 8003f5c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8003f5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d1e3      	bne.n	8003f2c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f6c:	d14f      	bne.n	800400e <UART_Start_Receive_IT+0x196>
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8003f74:	88fa      	ldrh	r2, [r7, #6]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d349      	bcc.n	800400e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f82:	d107      	bne.n	8003f94 <UART_Start_Receive_IT+0x11c>
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	691b      	ldr	r3, [r3, #16]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d103      	bne.n	8003f94 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	4a47      	ldr	r2, [pc, #284]	; (80040ac <UART_Start_Receive_IT+0x234>)
 8003f90:	675a      	str	r2, [r3, #116]	; 0x74
 8003f92:	e002      	b.n	8003f9a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	4a46      	ldr	r2, [pc, #280]	; (80040b0 <UART_Start_Receive_IT+0x238>)
 8003f98:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d01a      	beq.n	8003fd8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003faa:	e853 3f00 	ldrex	r3, [r3]
 8003fae:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003fb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fb6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003fc4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003fc6:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003fca:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003fcc:	e841 2300 	strex	r3, r2, [r1]
 8003fd0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003fd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d1e4      	bne.n	8003fa2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	3308      	adds	r3, #8
 8003fde:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fe2:	e853 3f00 	ldrex	r3, [r3]
 8003fe6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fee:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	3308      	adds	r3, #8
 8003ff6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003ff8:	64ba      	str	r2, [r7, #72]	; 0x48
 8003ffa:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ffc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003ffe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004000:	e841 2300 	strex	r3, r2, [r1]
 8004004:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004006:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004008:	2b00      	cmp	r3, #0
 800400a:	d1e5      	bne.n	8003fd8 <UART_Start_Receive_IT+0x160>
 800400c:	e046      	b.n	800409c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004016:	d107      	bne.n	8004028 <UART_Start_Receive_IT+0x1b0>
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	691b      	ldr	r3, [r3, #16]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d103      	bne.n	8004028 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	4a24      	ldr	r2, [pc, #144]	; (80040b4 <UART_Start_Receive_IT+0x23c>)
 8004024:	675a      	str	r2, [r3, #116]	; 0x74
 8004026:	e002      	b.n	800402e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	4a23      	ldr	r2, [pc, #140]	; (80040b8 <UART_Start_Receive_IT+0x240>)
 800402c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d019      	beq.n	800406a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800403c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800403e:	e853 3f00 	ldrex	r3, [r3]
 8004042:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004046:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800404a:	677b      	str	r3, [r7, #116]	; 0x74
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	461a      	mov	r2, r3
 8004052:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004054:	637b      	str	r3, [r7, #52]	; 0x34
 8004056:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004058:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800405a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800405c:	e841 2300 	strex	r3, r2, [r1]
 8004060:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004064:	2b00      	cmp	r3, #0
 8004066:	d1e6      	bne.n	8004036 <UART_Start_Receive_IT+0x1be>
 8004068:	e018      	b.n	800409c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	e853 3f00 	ldrex	r3, [r3]
 8004076:	613b      	str	r3, [r7, #16]
   return(result);
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	f043 0320 	orr.w	r3, r3, #32
 800407e:	67bb      	str	r3, [r7, #120]	; 0x78
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	461a      	mov	r2, r3
 8004086:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004088:	623b      	str	r3, [r7, #32]
 800408a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800408c:	69f9      	ldr	r1, [r7, #28]
 800408e:	6a3a      	ldr	r2, [r7, #32]
 8004090:	e841 2300 	strex	r3, r2, [r1]
 8004094:	61bb      	str	r3, [r7, #24]
   return(result);
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d1e6      	bne.n	800406a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800409c:	2300      	movs	r3, #0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	378c      	adds	r7, #140	; 0x8c
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop
 80040ac:	080048dd 	.word	0x080048dd
 80040b0:	0800457d 	.word	0x0800457d
 80040b4:	080043c5 	.word	0x080043c5
 80040b8:	0800420d 	.word	0x0800420d

080040bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040bc:	b480      	push	{r7}
 80040be:	b095      	sub	sp, #84	; 0x54
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040cc:	e853 3f00 	ldrex	r3, [r3]
 80040d0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80040d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80040d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	461a      	mov	r2, r3
 80040e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040e2:	643b      	str	r3, [r7, #64]	; 0x40
 80040e4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80040e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80040ea:	e841 2300 	strex	r3, r2, [r1]
 80040ee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80040f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d1e6      	bne.n	80040c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	3308      	adds	r3, #8
 80040fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040fe:	6a3b      	ldr	r3, [r7, #32]
 8004100:	e853 3f00 	ldrex	r3, [r3]
 8004104:	61fb      	str	r3, [r7, #28]
   return(result);
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800410c:	f023 0301 	bic.w	r3, r3, #1
 8004110:	64bb      	str	r3, [r7, #72]	; 0x48
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	3308      	adds	r3, #8
 8004118:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800411a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800411c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800411e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004120:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004122:	e841 2300 	strex	r3, r2, [r1]
 8004126:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412a:	2b00      	cmp	r3, #0
 800412c:	d1e3      	bne.n	80040f6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004132:	2b01      	cmp	r3, #1
 8004134:	d118      	bne.n	8004168 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	e853 3f00 	ldrex	r3, [r3]
 8004142:	60bb      	str	r3, [r7, #8]
   return(result);
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	f023 0310 	bic.w	r3, r3, #16
 800414a:	647b      	str	r3, [r7, #68]	; 0x44
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	461a      	mov	r2, r3
 8004152:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004154:	61bb      	str	r3, [r7, #24]
 8004156:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004158:	6979      	ldr	r1, [r7, #20]
 800415a:	69ba      	ldr	r2, [r7, #24]
 800415c:	e841 2300 	strex	r3, r2, [r1]
 8004160:	613b      	str	r3, [r7, #16]
   return(result);
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d1e6      	bne.n	8004136 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2220      	movs	r2, #32
 800416c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800417c:	bf00      	nop
 800417e:	3754      	adds	r7, #84	; 0x54
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr

08004188 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004194:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2200      	movs	r2, #0
 800419a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80041a6:	68f8      	ldr	r0, [r7, #12]
 80041a8:	f7ff f9ca 	bl	8003540 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041ac:	bf00      	nop
 80041ae:	3710      	adds	r7, #16
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b088      	sub	sp, #32
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	e853 3f00 	ldrex	r3, [r3]
 80041c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041d0:	61fb      	str	r3, [r7, #28]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	461a      	mov	r2, r3
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	61bb      	str	r3, [r7, #24]
 80041dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041de:	6979      	ldr	r1, [r7, #20]
 80041e0:	69ba      	ldr	r2, [r7, #24]
 80041e2:	e841 2300 	strex	r3, r2, [r1]
 80041e6:	613b      	str	r3, [r7, #16]
   return(result);
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d1e6      	bne.n	80041bc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2220      	movs	r2, #32
 80041f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f7fc fb2b 	bl	8000858 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004202:	bf00      	nop
 8004204:	3720      	adds	r7, #32
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
	...

0800420c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b09c      	sub	sp, #112	; 0x70
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800421a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004224:	2b22      	cmp	r3, #34	; 0x22
 8004226:	f040 80be 	bne.w	80043a6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004230:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004234:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004238:	b2d9      	uxtb	r1, r3
 800423a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800423e:	b2da      	uxtb	r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004244:	400a      	ands	r2, r1
 8004246:	b2d2      	uxtb	r2, r2
 8004248:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800424e:	1c5a      	adds	r2, r3, #1
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800425a:	b29b      	uxth	r3, r3
 800425c:	3b01      	subs	r3, #1
 800425e:	b29a      	uxth	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800426c:	b29b      	uxth	r3, r3
 800426e:	2b00      	cmp	r3, #0
 8004270:	f040 80a1 	bne.w	80043b6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800427a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800427c:	e853 3f00 	ldrex	r3, [r3]
 8004280:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004282:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004284:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004288:	66bb      	str	r3, [r7, #104]	; 0x68
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	461a      	mov	r2, r3
 8004290:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004292:	65bb      	str	r3, [r7, #88]	; 0x58
 8004294:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004296:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004298:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800429a:	e841 2300 	strex	r3, r2, [r1]
 800429e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80042a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1e6      	bne.n	8004274 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	3308      	adds	r3, #8
 80042ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042b0:	e853 3f00 	ldrex	r3, [r3]
 80042b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80042b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042b8:	f023 0301 	bic.w	r3, r3, #1
 80042bc:	667b      	str	r3, [r7, #100]	; 0x64
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	3308      	adds	r3, #8
 80042c4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80042c6:	647a      	str	r2, [r7, #68]	; 0x44
 80042c8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80042cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042ce:	e841 2300 	strex	r3, r2, [r1]
 80042d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80042d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d1e5      	bne.n	80042a6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2220      	movs	r2, #32
 80042de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a33      	ldr	r2, [pc, #204]	; (80043c0 <UART_RxISR_8BIT+0x1b4>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d01f      	beq.n	8004338 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d018      	beq.n	8004338 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800430c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430e:	e853 3f00 	ldrex	r3, [r3]
 8004312:	623b      	str	r3, [r7, #32]
   return(result);
 8004314:	6a3b      	ldr	r3, [r7, #32]
 8004316:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800431a:	663b      	str	r3, [r7, #96]	; 0x60
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	461a      	mov	r2, r3
 8004322:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004324:	633b      	str	r3, [r7, #48]	; 0x30
 8004326:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004328:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800432a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800432c:	e841 2300 	strex	r3, r2, [r1]
 8004330:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004334:	2b00      	cmp	r3, #0
 8004336:	d1e6      	bne.n	8004306 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800433c:	2b01      	cmp	r3, #1
 800433e:	d12e      	bne.n	800439e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	e853 3f00 	ldrex	r3, [r3]
 8004352:	60fb      	str	r3, [r7, #12]
   return(result);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f023 0310 	bic.w	r3, r3, #16
 800435a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	461a      	mov	r2, r3
 8004362:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004364:	61fb      	str	r3, [r7, #28]
 8004366:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004368:	69b9      	ldr	r1, [r7, #24]
 800436a:	69fa      	ldr	r2, [r7, #28]
 800436c:	e841 2300 	strex	r3, r2, [r1]
 8004370:	617b      	str	r3, [r7, #20]
   return(result);
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d1e6      	bne.n	8004346 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	69db      	ldr	r3, [r3, #28]
 800437e:	f003 0310 	and.w	r3, r3, #16
 8004382:	2b10      	cmp	r3, #16
 8004384:	d103      	bne.n	800438e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	2210      	movs	r2, #16
 800438c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004394:	4619      	mov	r1, r3
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f7ff f8dc 	bl	8003554 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800439c:	e00b      	b.n	80043b6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f7fc fa4a 	bl	8000838 <HAL_UART_RxCpltCallback>
}
 80043a4:	e007      	b.n	80043b6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	699a      	ldr	r2, [r3, #24]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f042 0208 	orr.w	r2, r2, #8
 80043b4:	619a      	str	r2, [r3, #24]
}
 80043b6:	bf00      	nop
 80043b8:	3770      	adds	r7, #112	; 0x70
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	40008000 	.word	0x40008000

080043c4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b09c      	sub	sp, #112	; 0x70
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80043d2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043dc:	2b22      	cmp	r3, #34	; 0x22
 80043de:	f040 80be 	bne.w	800455e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043f0:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80043f2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80043f6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80043fa:	4013      	ands	r3, r2
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004400:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004406:	1c9a      	adds	r2, r3, #2
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004412:	b29b      	uxth	r3, r3
 8004414:	3b01      	subs	r3, #1
 8004416:	b29a      	uxth	r2, r3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004424:	b29b      	uxth	r3, r3
 8004426:	2b00      	cmp	r3, #0
 8004428:	f040 80a1 	bne.w	800456e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004432:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004434:	e853 3f00 	ldrex	r3, [r3]
 8004438:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800443a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800443c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004440:	667b      	str	r3, [r7, #100]	; 0x64
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	461a      	mov	r2, r3
 8004448:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800444a:	657b      	str	r3, [r7, #84]	; 0x54
 800444c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800444e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004450:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004452:	e841 2300 	strex	r3, r2, [r1]
 8004456:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004458:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800445a:	2b00      	cmp	r3, #0
 800445c:	d1e6      	bne.n	800442c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	3308      	adds	r3, #8
 8004464:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004468:	e853 3f00 	ldrex	r3, [r3]
 800446c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800446e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004470:	f023 0301 	bic.w	r3, r3, #1
 8004474:	663b      	str	r3, [r7, #96]	; 0x60
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	3308      	adds	r3, #8
 800447c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800447e:	643a      	str	r2, [r7, #64]	; 0x40
 8004480:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004482:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004484:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004486:	e841 2300 	strex	r3, r2, [r1]
 800448a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800448c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800448e:	2b00      	cmp	r3, #0
 8004490:	d1e5      	bne.n	800445e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2220      	movs	r2, #32
 8004496:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a33      	ldr	r2, [pc, #204]	; (8004578 <UART_RxISR_16BIT+0x1b4>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d01f      	beq.n	80044f0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d018      	beq.n	80044f0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c4:	6a3b      	ldr	r3, [r7, #32]
 80044c6:	e853 3f00 	ldrex	r3, [r3]
 80044ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80044d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	461a      	mov	r2, r3
 80044da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044de:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044e4:	e841 2300 	strex	r3, r2, [r1]
 80044e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d1e6      	bne.n	80044be <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d12e      	bne.n	8004556 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	e853 3f00 	ldrex	r3, [r3]
 800450a:	60bb      	str	r3, [r7, #8]
   return(result);
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	f023 0310 	bic.w	r3, r3, #16
 8004512:	65bb      	str	r3, [r7, #88]	; 0x58
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	461a      	mov	r2, r3
 800451a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800451c:	61bb      	str	r3, [r7, #24]
 800451e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004520:	6979      	ldr	r1, [r7, #20]
 8004522:	69ba      	ldr	r2, [r7, #24]
 8004524:	e841 2300 	strex	r3, r2, [r1]
 8004528:	613b      	str	r3, [r7, #16]
   return(result);
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d1e6      	bne.n	80044fe <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	69db      	ldr	r3, [r3, #28]
 8004536:	f003 0310 	and.w	r3, r3, #16
 800453a:	2b10      	cmp	r3, #16
 800453c:	d103      	bne.n	8004546 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2210      	movs	r2, #16
 8004544:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800454c:	4619      	mov	r1, r3
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f7ff f800 	bl	8003554 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004554:	e00b      	b.n	800456e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f7fc f96e 	bl	8000838 <HAL_UART_RxCpltCallback>
}
 800455c:	e007      	b.n	800456e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	699a      	ldr	r2, [r3, #24]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f042 0208 	orr.w	r2, r2, #8
 800456c:	619a      	str	r2, [r3, #24]
}
 800456e:	bf00      	nop
 8004570:	3770      	adds	r7, #112	; 0x70
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	40008000 	.word	0x40008000

0800457c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b0ac      	sub	sp, #176	; 0xb0
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800458a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	69db      	ldr	r3, [r3, #28]
 8004594:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045b2:	2b22      	cmp	r3, #34	; 0x22
 80045b4:	f040 8182 	bne.w	80048bc <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80045be:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80045c2:	e125      	b.n	8004810 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ca:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80045ce:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80045d2:	b2d9      	uxtb	r1, r3
 80045d4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80045d8:	b2da      	uxtb	r2, r3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045de:	400a      	ands	r2, r1
 80045e0:	b2d2      	uxtb	r2, r2
 80045e2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045e8:	1c5a      	adds	r2, r3, #1
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	3b01      	subs	r3, #1
 80045f8:	b29a      	uxth	r2, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	69db      	ldr	r3, [r3, #28]
 8004606:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800460a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800460e:	f003 0307 	and.w	r3, r3, #7
 8004612:	2b00      	cmp	r3, #0
 8004614:	d053      	beq.n	80046be <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004616:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800461a:	f003 0301 	and.w	r3, r3, #1
 800461e:	2b00      	cmp	r3, #0
 8004620:	d011      	beq.n	8004646 <UART_RxISR_8BIT_FIFOEN+0xca>
 8004622:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00b      	beq.n	8004646 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	2201      	movs	r2, #1
 8004634:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800463c:	f043 0201 	orr.w	r2, r3, #1
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004646:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800464a:	f003 0302 	and.w	r3, r3, #2
 800464e:	2b00      	cmp	r3, #0
 8004650:	d011      	beq.n	8004676 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8004652:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004656:	f003 0301 	and.w	r3, r3, #1
 800465a:	2b00      	cmp	r3, #0
 800465c:	d00b      	beq.n	8004676 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2202      	movs	r2, #2
 8004664:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800466c:	f043 0204 	orr.w	r2, r3, #4
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004676:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800467a:	f003 0304 	and.w	r3, r3, #4
 800467e:	2b00      	cmp	r3, #0
 8004680:	d011      	beq.n	80046a6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8004682:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004686:	f003 0301 	and.w	r3, r3, #1
 800468a:	2b00      	cmp	r3, #0
 800468c:	d00b      	beq.n	80046a6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	2204      	movs	r2, #4
 8004694:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800469c:	f043 0202 	orr.w	r2, r3, #2
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d006      	beq.n	80046be <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f7fe ff45 	bl	8003540 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	f040 80a2 	bne.w	8004810 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80046d4:	e853 3f00 	ldrex	r3, [r3]
 80046d8:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 80046da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	461a      	mov	r2, r3
 80046ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80046ee:	67fb      	str	r3, [r7, #124]	; 0x7c
 80046f0:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80046f4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80046f6:	e841 2300 	strex	r3, r2, [r1]
 80046fa:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 80046fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d1e4      	bne.n	80046cc <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	3308      	adds	r3, #8
 8004708:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800470a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800470c:	e853 3f00 	ldrex	r3, [r3]
 8004710:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8004712:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004714:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004718:	f023 0301 	bic.w	r3, r3, #1
 800471c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	3308      	adds	r3, #8
 8004726:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800472a:	66ba      	str	r2, [r7, #104]	; 0x68
 800472c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800472e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8004730:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004732:	e841 2300 	strex	r3, r2, [r1]
 8004736:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8004738:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800473a:	2b00      	cmp	r3, #0
 800473c:	d1e1      	bne.n	8004702 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2220      	movs	r2, #32
 8004742:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a5f      	ldr	r2, [pc, #380]	; (80048d4 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d021      	beq.n	80047a0 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d01a      	beq.n	80047a0 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004770:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004772:	e853 3f00 	ldrex	r3, [r3]
 8004776:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004778:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800477a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800477e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	461a      	mov	r2, r3
 8004788:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800478c:	657b      	str	r3, [r7, #84]	; 0x54
 800478e:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004790:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004792:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004794:	e841 2300 	strex	r3, r2, [r1]
 8004798:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800479a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800479c:	2b00      	cmp	r3, #0
 800479e:	d1e4      	bne.n	800476a <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d130      	bne.n	800480a <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047b6:	e853 3f00 	ldrex	r3, [r3]
 80047ba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80047bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047be:	f023 0310 	bic.w	r3, r3, #16
 80047c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	461a      	mov	r2, r3
 80047cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80047d0:	643b      	str	r3, [r7, #64]	; 0x40
 80047d2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80047d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80047d8:	e841 2300 	strex	r3, r2, [r1]
 80047dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80047de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d1e4      	bne.n	80047ae <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	69db      	ldr	r3, [r3, #28]
 80047ea:	f003 0310 	and.w	r3, r3, #16
 80047ee:	2b10      	cmp	r3, #16
 80047f0:	d103      	bne.n	80047fa <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2210      	movs	r2, #16
 80047f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004800:	4619      	mov	r1, r3
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f7fe fea6 	bl	8003554 <HAL_UARTEx_RxEventCallback>
 8004808:	e002      	b.n	8004810 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f7fc f814 	bl	8000838 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004810:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8004814:	2b00      	cmp	r3, #0
 8004816:	d006      	beq.n	8004826 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8004818:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800481c:	f003 0320 	and.w	r3, r3, #32
 8004820:	2b00      	cmp	r3, #0
 8004822:	f47f aecf 	bne.w	80045c4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800482c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004830:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004834:	2b00      	cmp	r3, #0
 8004836:	d049      	beq.n	80048cc <UART_RxISR_8BIT_FIFOEN+0x350>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800483e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8004842:	429a      	cmp	r2, r3
 8004844:	d242      	bcs.n	80048cc <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	3308      	adds	r3, #8
 800484c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800484e:	6a3b      	ldr	r3, [r7, #32]
 8004850:	e853 3f00 	ldrex	r3, [r3]
 8004854:	61fb      	str	r3, [r7, #28]
   return(result);
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800485c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	3308      	adds	r3, #8
 8004866:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800486a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800486c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800486e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004870:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004872:	e841 2300 	strex	r3, r2, [r1]
 8004876:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487a:	2b00      	cmp	r3, #0
 800487c:	d1e3      	bne.n	8004846 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a15      	ldr	r2, [pc, #84]	; (80048d8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8004882:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	e853 3f00 	ldrex	r3, [r3]
 8004890:	60bb      	str	r3, [r7, #8]
   return(result);
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	f043 0320 	orr.w	r3, r3, #32
 8004898:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	461a      	mov	r2, r3
 80048a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80048a6:	61bb      	str	r3, [r7, #24]
 80048a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048aa:	6979      	ldr	r1, [r7, #20]
 80048ac:	69ba      	ldr	r2, [r7, #24]
 80048ae:	e841 2300 	strex	r3, r2, [r1]
 80048b2:	613b      	str	r3, [r7, #16]
   return(result);
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d1e4      	bne.n	8004884 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80048ba:	e007      	b.n	80048cc <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	699a      	ldr	r2, [r3, #24]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f042 0208 	orr.w	r2, r2, #8
 80048ca:	619a      	str	r2, [r3, #24]
}
 80048cc:	bf00      	nop
 80048ce:	37b0      	adds	r7, #176	; 0xb0
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	40008000 	.word	0x40008000
 80048d8:	0800420d 	.word	0x0800420d

080048dc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b0ae      	sub	sp, #184	; 0xb8
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80048ea:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	69db      	ldr	r3, [r3, #28]
 80048f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004912:	2b22      	cmp	r3, #34	; 0x22
 8004914:	f040 8186 	bne.w	8004c24 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800491e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004922:	e129      	b.n	8004b78 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004932:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8004936:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800493a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800493e:	4013      	ands	r3, r2
 8004940:	b29a      	uxth	r2, r3
 8004942:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004946:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800494c:	1c9a      	adds	r2, r3, #2
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004958:	b29b      	uxth	r3, r3
 800495a:	3b01      	subs	r3, #1
 800495c:	b29a      	uxth	r2, r3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	69db      	ldr	r3, [r3, #28]
 800496a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800496e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004972:	f003 0307 	and.w	r3, r3, #7
 8004976:	2b00      	cmp	r3, #0
 8004978:	d053      	beq.n	8004a22 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800497a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800497e:	f003 0301 	and.w	r3, r3, #1
 8004982:	2b00      	cmp	r3, #0
 8004984:	d011      	beq.n	80049aa <UART_RxISR_16BIT_FIFOEN+0xce>
 8004986:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800498a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800498e:	2b00      	cmp	r3, #0
 8004990:	d00b      	beq.n	80049aa <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	2201      	movs	r2, #1
 8004998:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049a0:	f043 0201 	orr.w	r2, r3, #1
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80049aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80049ae:	f003 0302 	and.w	r3, r3, #2
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d011      	beq.n	80049da <UART_RxISR_16BIT_FIFOEN+0xfe>
 80049b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80049ba:	f003 0301 	and.w	r3, r3, #1
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d00b      	beq.n	80049da <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	2202      	movs	r2, #2
 80049c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049d0:	f043 0204 	orr.w	r2, r3, #4
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80049da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80049de:	f003 0304 	and.w	r3, r3, #4
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d011      	beq.n	8004a0a <UART_RxISR_16BIT_FIFOEN+0x12e>
 80049e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80049ea:	f003 0301 	and.w	r3, r3, #1
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d00b      	beq.n	8004a0a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2204      	movs	r2, #4
 80049f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a00:	f043 0202 	orr.w	r2, r3, #2
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d006      	beq.n	8004a22 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f7fe fd93 	bl	8003540 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	f040 80a4 	bne.w	8004b78 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a38:	e853 3f00 	ldrex	r3, [r3]
 8004a3c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004a3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004a52:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a56:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a58:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004a5a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004a5e:	e841 2300 	strex	r3, r2, [r1]
 8004a62:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004a64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d1e2      	bne.n	8004a30 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	3308      	adds	r3, #8
 8004a70:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a74:	e853 3f00 	ldrex	r3, [r3]
 8004a78:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004a7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a80:	f023 0301 	bic.w	r3, r3, #1
 8004a84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	3308      	adds	r3, #8
 8004a8e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8004a92:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004a94:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a96:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004a98:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004a9a:	e841 2300 	strex	r3, r2, [r1]
 8004a9e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004aa0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d1e1      	bne.n	8004a6a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2220      	movs	r2, #32
 8004aaa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a5f      	ldr	r2, [pc, #380]	; (8004c3c <UART_RxISR_16BIT_FIFOEN+0x360>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d021      	beq.n	8004b08 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d01a      	beq.n	8004b08 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ada:	e853 3f00 	ldrex	r3, [r3]
 8004ade:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004ae0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ae2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004ae6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	461a      	mov	r2, r3
 8004af0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004af4:	65bb      	str	r3, [r7, #88]	; 0x58
 8004af6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004afa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004afc:	e841 2300 	strex	r3, r2, [r1]
 8004b00:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004b02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d1e4      	bne.n	8004ad2 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d130      	bne.n	8004b72 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b1e:	e853 3f00 	ldrex	r3, [r3]
 8004b22:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b26:	f023 0310 	bic.w	r3, r3, #16
 8004b2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	461a      	mov	r2, r3
 8004b34:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004b38:	647b      	str	r3, [r7, #68]	; 0x44
 8004b3a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b3c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004b3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b40:	e841 2300 	strex	r3, r2, [r1]
 8004b44:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d1e4      	bne.n	8004b16 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	69db      	ldr	r3, [r3, #28]
 8004b52:	f003 0310 	and.w	r3, r3, #16
 8004b56:	2b10      	cmp	r3, #16
 8004b58:	d103      	bne.n	8004b62 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	2210      	movs	r2, #16
 8004b60:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004b68:	4619      	mov	r1, r3
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f7fe fcf2 	bl	8003554 <HAL_UARTEx_RxEventCallback>
 8004b70:	e002      	b.n	8004b78 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f7fb fe60 	bl	8000838 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004b78:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d006      	beq.n	8004b8e <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8004b80:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004b84:	f003 0320 	and.w	r3, r3, #32
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	f47f aecb 	bne.w	8004924 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004b94:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004b98:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d049      	beq.n	8004c34 <UART_RxISR_16BIT_FIFOEN+0x358>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004ba6:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d242      	bcs.n	8004c34 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	3308      	adds	r3, #8
 8004bb4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb8:	e853 3f00 	ldrex	r3, [r3]
 8004bbc:	623b      	str	r3, [r7, #32]
   return(result);
 8004bbe:	6a3b      	ldr	r3, [r7, #32]
 8004bc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bc4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	3308      	adds	r3, #8
 8004bce:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004bd2:	633a      	str	r2, [r7, #48]	; 0x30
 8004bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004bd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bda:	e841 2300 	strex	r3, r2, [r1]
 8004bde:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d1e3      	bne.n	8004bae <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a15      	ldr	r2, [pc, #84]	; (8004c40 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8004bea:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	e853 3f00 	ldrex	r3, [r3]
 8004bf8:	60fb      	str	r3, [r7, #12]
   return(result);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f043 0320 	orr.w	r3, r3, #32
 8004c00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	461a      	mov	r2, r3
 8004c0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c0e:	61fb      	str	r3, [r7, #28]
 8004c10:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c12:	69b9      	ldr	r1, [r7, #24]
 8004c14:	69fa      	ldr	r2, [r7, #28]
 8004c16:	e841 2300 	strex	r3, r2, [r1]
 8004c1a:	617b      	str	r3, [r7, #20]
   return(result);
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d1e4      	bne.n	8004bec <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004c22:	e007      	b.n	8004c34 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	699a      	ldr	r2, [r3, #24]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f042 0208 	orr.w	r2, r2, #8
 8004c32:	619a      	str	r2, [r3, #24]
}
 8004c34:	bf00      	nop
 8004c36:	37b8      	adds	r7, #184	; 0xb8
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	40008000 	.word	0x40008000
 8004c40:	080043c5 	.word	0x080043c5

08004c44 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004c4c:	bf00      	nop
 8004c4e:	370c      	adds	r7, #12
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr

08004c58 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b083      	sub	sp, #12
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004c60:	bf00      	nop
 8004c62:	370c      	adds	r7, #12
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr

08004c6c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004c74:	bf00      	nop
 8004c76:	370c      	adds	r7, #12
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr

08004c80 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b085      	sub	sp, #20
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d101      	bne.n	8004c96 <HAL_UARTEx_DisableFifoMode+0x16>
 8004c92:	2302      	movs	r3, #2
 8004c94:	e027      	b.n	8004ce6 <HAL_UARTEx_DisableFifoMode+0x66>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2224      	movs	r2, #36	; 0x24
 8004ca2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f022 0201 	bic.w	r2, r2, #1
 8004cbc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004cc4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	68fa      	ldr	r2, [r7, #12]
 8004cd2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2220      	movs	r2, #32
 8004cd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004ce4:	2300      	movs	r3, #0
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3714      	adds	r7, #20
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr

08004cf2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004cf2:	b580      	push	{r7, lr}
 8004cf4:	b084      	sub	sp, #16
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
 8004cfa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d101      	bne.n	8004d0a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004d06:	2302      	movs	r3, #2
 8004d08:	e02d      	b.n	8004d66 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2224      	movs	r2, #36	; 0x24
 8004d16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f022 0201 	bic.w	r2, r2, #1
 8004d30:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	683a      	ldr	r2, [r7, #0]
 8004d42:	430a      	orrs	r2, r1
 8004d44:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 f850 	bl	8004dec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	68fa      	ldr	r2, [r7, #12]
 8004d52:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2220      	movs	r2, #32
 8004d58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004d64:	2300      	movs	r3, #0
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3710      	adds	r7, #16
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}

08004d6e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004d6e:	b580      	push	{r7, lr}
 8004d70:	b084      	sub	sp, #16
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
 8004d76:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d101      	bne.n	8004d86 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004d82:	2302      	movs	r3, #2
 8004d84:	e02d      	b.n	8004de2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2224      	movs	r2, #36	; 0x24
 8004d92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f022 0201 	bic.w	r2, r2, #1
 8004dac:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	683a      	ldr	r2, [r7, #0]
 8004dbe:	430a      	orrs	r2, r1
 8004dc0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 f812 	bl	8004dec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	68fa      	ldr	r2, [r7, #12]
 8004dce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2220      	movs	r2, #32
 8004dd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004de0:	2300      	movs	r3, #0
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3710      	adds	r7, #16
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}
	...

08004dec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b085      	sub	sp, #20
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d108      	bne.n	8004e0e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004e0c:	e031      	b.n	8004e72 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004e0e:	2308      	movs	r3, #8
 8004e10:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004e12:	2308      	movs	r3, #8
 8004e14:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	0e5b      	lsrs	r3, r3, #25
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	f003 0307 	and.w	r3, r3, #7
 8004e24:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	0f5b      	lsrs	r3, r3, #29
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	f003 0307 	and.w	r3, r3, #7
 8004e34:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004e36:	7bbb      	ldrb	r3, [r7, #14]
 8004e38:	7b3a      	ldrb	r2, [r7, #12]
 8004e3a:	4911      	ldr	r1, [pc, #68]	; (8004e80 <UARTEx_SetNbDataToProcess+0x94>)
 8004e3c:	5c8a      	ldrb	r2, [r1, r2]
 8004e3e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004e42:	7b3a      	ldrb	r2, [r7, #12]
 8004e44:	490f      	ldr	r1, [pc, #60]	; (8004e84 <UARTEx_SetNbDataToProcess+0x98>)
 8004e46:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004e48:	fb93 f3f2 	sdiv	r3, r3, r2
 8004e4c:	b29a      	uxth	r2, r3
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004e54:	7bfb      	ldrb	r3, [r7, #15]
 8004e56:	7b7a      	ldrb	r2, [r7, #13]
 8004e58:	4909      	ldr	r1, [pc, #36]	; (8004e80 <UARTEx_SetNbDataToProcess+0x94>)
 8004e5a:	5c8a      	ldrb	r2, [r1, r2]
 8004e5c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004e60:	7b7a      	ldrb	r2, [r7, #13]
 8004e62:	4908      	ldr	r1, [pc, #32]	; (8004e84 <UARTEx_SetNbDataToProcess+0x98>)
 8004e64:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004e66:	fb93 f3f2 	sdiv	r3, r3, r2
 8004e6a:	b29a      	uxth	r2, r3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004e72:	bf00      	nop
 8004e74:	3714      	adds	r7, #20
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr
 8004e7e:	bf00      	nop
 8004e80:	080091c0 	.word	0x080091c0
 8004e84:	080091c8 	.word	0x080091c8

08004e88 <ai_log_err>:

static ai_buffer* ai_input;
static ai_buffer* ai_output;

static void ai_log_err(const ai_error err, const char *fct)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b082      	sub	sp, #8
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN log */
  if (fct)
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d009      	beq.n	8004eac <ai_log_err+0x24>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
        err.type, err.code);
 8004e98:	793b      	ldrb	r3, [r7, #4]
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8004e9a:	461a      	mov	r2, r3
        err.type, err.code);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f3c3 2317 	ubfx	r3, r3, #8, #24
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8004ea2:	6839      	ldr	r1, [r7, #0]
 8004ea4:	4806      	ldr	r0, [pc, #24]	; (8004ec0 <ai_log_err+0x38>)
 8004ea6:	f003 f949 	bl	800813c <iprintf>
 8004eaa:	e008      	b.n	8004ebe <ai_log_err+0x36>
  else
    printf("TEMPLATE - Error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 8004eac:	793b      	ldrb	r3, [r7, #4]
 8004eae:	4619      	mov	r1, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	4802      	ldr	r0, [pc, #8]	; (8004ec4 <ai_log_err+0x3c>)
 8004eba:	f003 f93f 	bl	800813c <iprintf>

  do {} while (1);
 8004ebe:	e7fe      	b.n	8004ebe <ai_log_err+0x36>
 8004ec0:	08009080 	.word	0x08009080
 8004ec4:	080090b4 	.word	0x080090b4

08004ec8 <ai_boostrap>:
  /* USER CODE END log */
}

static int ai_boostrap(ai_handle *act_addr)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b086      	sub	sp, #24
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  ai_error err;

  /* Create and initialize an instance of the model */
  err = ai_network_create_and_init(&network, act_addr, NULL);
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	6879      	ldr	r1, [r7, #4]
 8004ed4:	4828      	ldr	r0, [pc, #160]	; (8004f78 <ai_boostrap+0xb0>)
 8004ed6:	f000 fb33 	bl	8005540 <ai_network_create_and_init>
 8004eda:	4603      	mov	r3, r0
 8004edc:	60fb      	str	r3, [r7, #12]
  if (err.type != AI_ERROR_NONE) {
 8004ede:	7b3b      	ldrb	r3, [r7, #12]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d006      	beq.n	8004ef2 <ai_boostrap+0x2a>
    ai_log_err(err, "ai_network_create_and_init");
 8004ee4:	4925      	ldr	r1, [pc, #148]	; (8004f7c <ai_boostrap+0xb4>)
 8004ee6:	68f8      	ldr	r0, [r7, #12]
 8004ee8:	f7ff ffce 	bl	8004e88 <ai_log_err>
    return -1;
 8004eec:	f04f 33ff 	mov.w	r3, #4294967295
 8004ef0:	e03e      	b.n	8004f70 <ai_boostrap+0xa8>
  }

  ai_input = ai_network_inputs_get(network, NULL);
 8004ef2:	4b21      	ldr	r3, [pc, #132]	; (8004f78 <ai_boostrap+0xb0>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2100      	movs	r1, #0
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f000 fb95 	bl	8005628 <ai_network_inputs_get>
 8004efe:	4603      	mov	r3, r0
 8004f00:	4a1f      	ldr	r2, [pc, #124]	; (8004f80 <ai_boostrap+0xb8>)
 8004f02:	6013      	str	r3, [r2, #0]
  ai_output = ai_network_outputs_get(network, NULL);
 8004f04:	4b1c      	ldr	r3, [pc, #112]	; (8004f78 <ai_boostrap+0xb0>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	2100      	movs	r1, #0
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f000 fba6 	bl	800565c <ai_network_outputs_get>
 8004f10:	4603      	mov	r3, r0
 8004f12:	4a1c      	ldr	r2, [pc, #112]	; (8004f84 <ai_boostrap+0xbc>)
 8004f14:	6013      	str	r3, [r2, #0]

#if defined(AI_NETWORK_INPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-inputs" option is used, memory buffer can be
   *  used from the activations buffer. This is not mandatory.
   */
  for (int idx=0; idx < AI_NETWORK_IN_NUM; idx++) {
 8004f16:	2300      	movs	r3, #0
 8004f18:	617b      	str	r3, [r7, #20]
 8004f1a:	e00f      	b.n	8004f3c <ai_boostrap+0x74>
	data_ins[idx] = ai_input[idx].data;
 8004f1c:	4b18      	ldr	r3, [pc, #96]	; (8004f80 <ai_boostrap+0xb8>)
 8004f1e:	6819      	ldr	r1, [r3, #0]
 8004f20:	697a      	ldr	r2, [r7, #20]
 8004f22:	4613      	mov	r3, r2
 8004f24:	00db      	lsls	r3, r3, #3
 8004f26:	1a9b      	subs	r3, r3, r2
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	440b      	add	r3, r1
 8004f2c:	685a      	ldr	r2, [r3, #4]
 8004f2e:	4916      	ldr	r1, [pc, #88]	; (8004f88 <ai_boostrap+0xc0>)
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_NETWORK_IN_NUM; idx++) {
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	3301      	adds	r3, #1
 8004f3a:	617b      	str	r3, [r7, #20]
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	ddec      	ble.n	8004f1c <ai_boostrap+0x54>

#if defined(AI_NETWORK_OUTPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-outputs" option is used, memory buffer can be
   *  used from the activations buffer. This is no mandatory.
   */
  for (int idx=0; idx < AI_NETWORK_OUT_NUM; idx++) {
 8004f42:	2300      	movs	r3, #0
 8004f44:	613b      	str	r3, [r7, #16]
 8004f46:	e00f      	b.n	8004f68 <ai_boostrap+0xa0>
	data_outs[idx] = ai_output[idx].data;
 8004f48:	4b0e      	ldr	r3, [pc, #56]	; (8004f84 <ai_boostrap+0xbc>)
 8004f4a:	6819      	ldr	r1, [r3, #0]
 8004f4c:	693a      	ldr	r2, [r7, #16]
 8004f4e:	4613      	mov	r3, r2
 8004f50:	00db      	lsls	r3, r3, #3
 8004f52:	1a9b      	subs	r3, r3, r2
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	440b      	add	r3, r1
 8004f58:	685a      	ldr	r2, [r3, #4]
 8004f5a:	490c      	ldr	r1, [pc, #48]	; (8004f8c <ai_boostrap+0xc4>)
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_NETWORK_OUT_NUM; idx++) {
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	3301      	adds	r3, #1
 8004f66:	613b      	str	r3, [r7, #16]
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	ddec      	ble.n	8004f48 <ai_boostrap+0x80>
  for (int idx=0; idx < AI_NETWORK_OUT_NUM; idx++) {
	ai_output[idx].data = data_outs[idx];
  }
#endif

  return 0;
 8004f6e:	2300      	movs	r3, #0
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3718      	adds	r7, #24
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	20001598 	.word	0x20001598
 8004f7c:	080090e4 	.word	0x080090e4
 8004f80:	2000159c 	.word	0x2000159c
 8004f84:	200015a0 	.word	0x200015a0
 8004f88:	20001154 	.word	0x20001154
 8004f8c:	20001158 	.word	0x20001158

08004f90 <ai_run>:

static int ai_run(void)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b082      	sub	sp, #8
 8004f94:	af00      	add	r7, sp, #0
  ai_i32 batch;

  batch = ai_network_run(network, ai_input, ai_output);
 8004f96:	4b0f      	ldr	r3, [pc, #60]	; (8004fd4 <ai_run+0x44>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a0f      	ldr	r2, [pc, #60]	; (8004fd8 <ai_run+0x48>)
 8004f9c:	6811      	ldr	r1, [r2, #0]
 8004f9e:	4a0f      	ldr	r2, [pc, #60]	; (8004fdc <ai_run+0x4c>)
 8004fa0:	6812      	ldr	r2, [r2, #0]
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f000 fbb0 	bl	8005708 <ai_network_run>
 8004fa8:	6078      	str	r0, [r7, #4]
  if (batch != 1) {
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d00c      	beq.n	8004fca <ai_run+0x3a>
    ai_log_err(ai_network_get_error(network),
 8004fb0:	4b08      	ldr	r3, [pc, #32]	; (8004fd4 <ai_run+0x44>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f000 faa1 	bl	80054fc <ai_network_get_error>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	4908      	ldr	r1, [pc, #32]	; (8004fe0 <ai_run+0x50>)
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f7ff ff62 	bl	8004e88 <ai_log_err>
        "ai_network_run");
    return -1;
 8004fc4:	f04f 33ff 	mov.w	r3, #4294967295
 8004fc8:	e000      	b.n	8004fcc <ai_run+0x3c>
  }

  return 0;
 8004fca:	2300      	movs	r3, #0
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3708      	adds	r7, #8
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}
 8004fd4:	20001598 	.word	0x20001598
 8004fd8:	2000159c 	.word	0x2000159c
 8004fdc:	200015a0 	.word	0x200015a0
 8004fe0:	08009100 	.word	0x08009100

08004fe4 <acquire_and_process_data>:
extern ai_float in_data1[AI_NETWORK_IN_1_SIZE];
extern ai_float out_data1[AI_NETWORK_OUT_1_SIZE];
extern ai_float out_data2[AI_NETWORK_OUT_2_SIZE];
extern ai_float out_data3[AI_NETWORK_OUT_3_SIZE];
int acquire_and_process_data(ai_i8* data[])
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b082      	sub	sp, #8
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
      data[idx] = ....
  }

  */
  // Cast data_ins[0] to a pointer of type ai_float*
  memcpy(data[0], in_data1, AI_NETWORK_IN_1_SIZE * sizeof(ai_float));
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	220c      	movs	r2, #12
 8004ff2:	4904      	ldr	r1, [pc, #16]	; (8005004 <acquire_and_process_data+0x20>)
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f003 fa72 	bl	80084de <memcpy>


  return 0;
 8004ffa:	2300      	movs	r3, #0
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3708      	adds	r7, #8
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}
 8005004:	20001050 	.word	0x20001050

08005008 <post_process>:


int post_process(ai_i8* data[])
{
 8005008:	b480      	push	{r7}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  {
      data[idx] = ....
  }

  */
  memcpy(out_data1, data[0], AI_NETWORK_OUT_1_SIZE * sizeof(ai_float));
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	461a      	mov	r2, r3
 8005018:	4b0b      	ldr	r3, [pc, #44]	; (8005048 <post_process+0x40>)
 800501a:	601a      	str	r2, [r3, #0]
  memcpy(out_data2, data[1], AI_NETWORK_OUT_2_SIZE * sizeof(ai_float));
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	3304      	adds	r3, #4
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	461a      	mov	r2, r3
 8005026:	4b09      	ldr	r3, [pc, #36]	; (800504c <post_process+0x44>)
 8005028:	601a      	str	r2, [r3, #0]
  memcpy(out_data3, data[2], AI_NETWORK_OUT_3_SIZE * sizeof(ai_float));
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	3308      	adds	r3, #8
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	461a      	mov	r2, r3
 8005034:	4b06      	ldr	r3, [pc, #24]	; (8005050 <post_process+0x48>)
 8005036:	601a      	str	r2, [r3, #0]
  return 0;
 8005038:	2300      	movs	r3, #0
}
 800503a:	4618      	mov	r0, r3
 800503c:	370c      	adds	r7, #12
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr
 8005046:	bf00      	nop
 8005048:	2000105c 	.word	0x2000105c
 800504c:	20001060 	.word	0x20001060
 8005050:	20001064 	.word	0x20001064

08005054 <MX_X_CUBE_AI_Init>:
/* USER CODE END 2 */

/* Entry points --------------------------------------------------------------*/

void MX_X_CUBE_AI_Init(void)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 5 */
  printf("\r\nTEMPLATE - initialization\r\n");
 8005058:	4803      	ldr	r0, [pc, #12]	; (8005068 <MX_X_CUBE_AI_Init+0x14>)
 800505a:	f003 f8d5 	bl	8008208 <puts>

  ai_boostrap(data_activations0);
 800505e:	4803      	ldr	r0, [pc, #12]	; (800506c <MX_X_CUBE_AI_Init+0x18>)
 8005060:	f7ff ff32 	bl	8004ec8 <ai_boostrap>
    /* USER CODE END 5 */
}
 8005064:	bf00      	nop
 8005066:	bd80      	pop	{r7, pc}
 8005068:	08009110 	.word	0x08009110
 800506c:	2000000c 	.word	0x2000000c

08005070 <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(void)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b082      	sub	sp, #8
 8005074:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 6 */
  int res = -1;
 8005076:	f04f 33ff 	mov.w	r3, #4294967295
 800507a:	607b      	str	r3, [r7, #4]

  printf("TEMPLATE - run - main loop\r\n");
 800507c:	4814      	ldr	r0, [pc, #80]	; (80050d0 <MX_X_CUBE_AI_Process+0x60>)
 800507e:	f003 f8c3 	bl	8008208 <puts>

  if (network) {
 8005082:	4b14      	ldr	r3, [pc, #80]	; (80050d4 <MX_X_CUBE_AI_Process+0x64>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d010      	beq.n	80050ac <MX_X_CUBE_AI_Process+0x3c>

//    do {
      /* 1 - acquire and pre-process input data */
      res = acquire_and_process_data(data_ins);
 800508a:	4813      	ldr	r0, [pc, #76]	; (80050d8 <MX_X_CUBE_AI_Process+0x68>)
 800508c:	f7ff ffaa 	bl	8004fe4 <acquire_and_process_data>
 8005090:	6078      	str	r0, [r7, #4]
      /* 2 - process the data - call inference engine */
      if (res == 0)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d102      	bne.n	800509e <MX_X_CUBE_AI_Process+0x2e>
        res = ai_run();
 8005098:	f7ff ff7a 	bl	8004f90 <ai_run>
 800509c:	6078      	str	r0, [r7, #4]
      /* 3- post-process the predictions */
      if (res == 0)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d103      	bne.n	80050ac <MX_X_CUBE_AI_Process+0x3c>
        res = post_process(data_outs);
 80050a4:	480d      	ldr	r0, [pc, #52]	; (80050dc <MX_X_CUBE_AI_Process+0x6c>)
 80050a6:	f7ff ffaf 	bl	8005008 <post_process>
 80050aa:	6078      	str	r0, [r7, #4]
//    } while (res==0);
  }

  if (res) {
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d00a      	beq.n	80050c8 <MX_X_CUBE_AI_Process+0x58>
    ai_error err = {AI_ERROR_INVALID_STATE, AI_ERROR_CODE_NETWORK};
 80050b2:	2311      	movs	r3, #17
 80050b4:	703b      	strb	r3, [r7, #0]
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	2210      	movs	r2, #16
 80050ba:	f362 231f 	bfi	r3, r2, #8, #24
 80050be:	603b      	str	r3, [r7, #0]
    ai_log_err(err, "Process has FAILED");
 80050c0:	4907      	ldr	r1, [pc, #28]	; (80050e0 <MX_X_CUBE_AI_Process+0x70>)
 80050c2:	6838      	ldr	r0, [r7, #0]
 80050c4:	f7ff fee0 	bl	8004e88 <ai_log_err>
  }
    /* USER CODE END 6 */
}
 80050c8:	bf00      	nop
 80050ca:	3708      	adds	r7, #8
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	08009130 	.word	0x08009130
 80050d4:	20001598 	.word	0x20001598
 80050d8:	20001154 	.word	0x20001154
 80050dc:	20001158 	.word	0x20001158
 80050e0:	0800914c 	.word	0x0800914c

080050e4 <network_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b082      	sub	sp, #8
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 80050ee:	683a      	ldr	r2, [r7, #0]
 80050f0:	2101      	movs	r1, #1
 80050f2:	4856      	ldr	r0, [pc, #344]	; (800524c <network_configure_activations+0x168>)
 80050f4:	f000 fbe6 	bl	80058c4 <ai_platform_get_activations_map>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	f000 809c 	beq.w	8005238 <network_configure_activations+0x154>
    /* Updating activations (byte) offsets */
    
    obs_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005100:	4b52      	ldr	r3, [pc, #328]	; (800524c <network_configure_activations+0x168>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a52      	ldr	r2, [pc, #328]	; (8005250 <network_configure_activations+0x16c>)
 8005106:	6093      	str	r3, [r2, #8]
    obs_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005108:	4b50      	ldr	r3, [pc, #320]	; (800524c <network_configure_activations+0x168>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a50      	ldr	r2, [pc, #320]	; (8005250 <network_configure_activations+0x16c>)
 800510e:	60d3      	str	r3, [r2, #12]
    
    _model_running_mean_std_Sub_output_0_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005110:	4b4e      	ldr	r3, [pc, #312]	; (800524c <network_configure_activations+0x168>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a4f      	ldr	r2, [pc, #316]	; (8005254 <network_configure_activations+0x170>)
 8005116:	6093      	str	r3, [r2, #8]
    _model_running_mean_std_Sub_output_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005118:	4b4c      	ldr	r3, [pc, #304]	; (800524c <network_configure_activations+0x168>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a4d      	ldr	r2, [pc, #308]	; (8005254 <network_configure_activations+0x170>)
 800511e:	60d3      	str	r3, [r2, #12]
    
    _model_running_mean_std_Div_output_0_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005120:	4b4a      	ldr	r3, [pc, #296]	; (800524c <network_configure_activations+0x168>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a4c      	ldr	r2, [pc, #304]	; (8005258 <network_configure_activations+0x174>)
 8005126:	6093      	str	r3, [r2, #8]
    _model_running_mean_std_Div_output_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005128:	4b48      	ldr	r3, [pc, #288]	; (800524c <network_configure_activations+0x168>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a4a      	ldr	r2, [pc, #296]	; (8005258 <network_configure_activations+0x174>)
 800512e:	60d3      	str	r3, [r2, #12]
    
    _model_running_mean_std_Clip_output_0_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005130:	4b46      	ldr	r3, [pc, #280]	; (800524c <network_configure_activations+0x168>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a49      	ldr	r2, [pc, #292]	; (800525c <network_configure_activations+0x178>)
 8005136:	6093      	str	r3, [r2, #8]
    _model_running_mean_std_Clip_output_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005138:	4b44      	ldr	r3, [pc, #272]	; (800524c <network_configure_activations+0x168>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a47      	ldr	r2, [pc, #284]	; (800525c <network_configure_activations+0x178>)
 800513e:	60d3      	str	r3, [r2, #12]
    
    _model_a2c_network_actor_mlp_0_Gemm_output_0_output_array.data = AI_PTR(g_network_activations_map[0] + 12);
 8005140:	4b42      	ldr	r3, [pc, #264]	; (800524c <network_configure_activations+0x168>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	330c      	adds	r3, #12
 8005146:	4a46      	ldr	r2, [pc, #280]	; (8005260 <network_configure_activations+0x17c>)
 8005148:	6093      	str	r3, [r2, #8]
    _model_a2c_network_actor_mlp_0_Gemm_output_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 12);
 800514a:	4b40      	ldr	r3, [pc, #256]	; (800524c <network_configure_activations+0x168>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	330c      	adds	r3, #12
 8005150:	4a43      	ldr	r2, [pc, #268]	; (8005260 <network_configure_activations+0x17c>)
 8005152:	60d3      	str	r3, [r2, #12]
    
    _model_a2c_network_actor_mlp_activations_0_Elu_output_0_output_array.data = AI_PTR(g_network_activations_map[0] + 12);
 8005154:	4b3d      	ldr	r3, [pc, #244]	; (800524c <network_configure_activations+0x168>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	330c      	adds	r3, #12
 800515a:	4a42      	ldr	r2, [pc, #264]	; (8005264 <network_configure_activations+0x180>)
 800515c:	6093      	str	r3, [r2, #8]
    _model_a2c_network_actor_mlp_activations_0_Elu_output_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 12);
 800515e:	4b3b      	ldr	r3, [pc, #236]	; (800524c <network_configure_activations+0x168>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	330c      	adds	r3, #12
 8005164:	4a3f      	ldr	r2, [pc, #252]	; (8005264 <network_configure_activations+0x180>)
 8005166:	60d3      	str	r3, [r2, #12]
    
    _model_a2c_network_actor_mlp_Concat_output_0_output_array.data = AI_PTR(g_network_activations_map[0] + 524);
 8005168:	4b38      	ldr	r3, [pc, #224]	; (800524c <network_configure_activations+0x168>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8005170:	4a3d      	ldr	r2, [pc, #244]	; (8005268 <network_configure_activations+0x184>)
 8005172:	6093      	str	r3, [r2, #8]
    _model_a2c_network_actor_mlp_Concat_output_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 524);
 8005174:	4b35      	ldr	r3, [pc, #212]	; (800524c <network_configure_activations+0x168>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 800517c:	4a3a      	ldr	r2, [pc, #232]	; (8005268 <network_configure_activations+0x184>)
 800517e:	60d3      	str	r3, [r2, #12]
    
    _model_a2c_network_actor_mlp_1_Gemm_output_0_output_array.data = AI_PTR(g_network_activations_map[0] + 12);
 8005180:	4b32      	ldr	r3, [pc, #200]	; (800524c <network_configure_activations+0x168>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	330c      	adds	r3, #12
 8005186:	4a39      	ldr	r2, [pc, #228]	; (800526c <network_configure_activations+0x188>)
 8005188:	6093      	str	r3, [r2, #8]
    _model_a2c_network_actor_mlp_1_Gemm_output_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 12);
 800518a:	4b30      	ldr	r3, [pc, #192]	; (800524c <network_configure_activations+0x168>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	330c      	adds	r3, #12
 8005190:	4a36      	ldr	r2, [pc, #216]	; (800526c <network_configure_activations+0x188>)
 8005192:	60d3      	str	r3, [r2, #12]
    
    _model_a2c_network_actor_mlp_activations_1_Elu_output_0_output_array.data = AI_PTR(g_network_activations_map[0] + 268);
 8005194:	4b2d      	ldr	r3, [pc, #180]	; (800524c <network_configure_activations+0x168>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800519c:	4a34      	ldr	r2, [pc, #208]	; (8005270 <network_configure_activations+0x18c>)
 800519e:	6093      	str	r3, [r2, #8]
    _model_a2c_network_actor_mlp_activations_1_Elu_output_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 268);
 80051a0:	4b2a      	ldr	r3, [pc, #168]	; (800524c <network_configure_activations+0x168>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80051a8:	4a31      	ldr	r2, [pc, #196]	; (8005270 <network_configure_activations+0x18c>)
 80051aa:	60d3      	str	r3, [r2, #12]
    
    _model_a2c_network_actor_mlp_Concat_1_output_0_output_array.data = AI_PTR(g_network_activations_map[0] + 524);
 80051ac:	4b27      	ldr	r3, [pc, #156]	; (800524c <network_configure_activations+0x168>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 80051b4:	4a2f      	ldr	r2, [pc, #188]	; (8005274 <network_configure_activations+0x190>)
 80051b6:	6093      	str	r3, [r2, #8]
    _model_a2c_network_actor_mlp_Concat_1_output_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 524);
 80051b8:	4b24      	ldr	r3, [pc, #144]	; (800524c <network_configure_activations+0x168>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 80051c0:	4a2c      	ldr	r2, [pc, #176]	; (8005274 <network_configure_activations+0x190>)
 80051c2:	60d3      	str	r3, [r2, #12]
    
    _model_a2c_network_actor_mlp_2_Gemm_output_0_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80051c4:	4b21      	ldr	r3, [pc, #132]	; (800524c <network_configure_activations+0x168>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a2b      	ldr	r2, [pc, #172]	; (8005278 <network_configure_activations+0x194>)
 80051ca:	6093      	str	r3, [r2, #8]
    _model_a2c_network_actor_mlp_2_Gemm_output_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 80051cc:	4b1f      	ldr	r3, [pc, #124]	; (800524c <network_configure_activations+0x168>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a29      	ldr	r2, [pc, #164]	; (8005278 <network_configure_activations+0x194>)
 80051d2:	60d3      	str	r3, [r2, #12]
    
    _model_a2c_network_actor_mlp_activations_2_Elu_output_0_output_array.data = AI_PTR(g_network_activations_map[0] + 128);
 80051d4:	4b1d      	ldr	r3, [pc, #116]	; (800524c <network_configure_activations+0x168>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	3380      	adds	r3, #128	; 0x80
 80051da:	4a28      	ldr	r2, [pc, #160]	; (800527c <network_configure_activations+0x198>)
 80051dc:	6093      	str	r3, [r2, #8]
    _model_a2c_network_actor_mlp_activations_2_Elu_output_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 128);
 80051de:	4b1b      	ldr	r3, [pc, #108]	; (800524c <network_configure_activations+0x168>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	3380      	adds	r3, #128	; 0x80
 80051e4:	4a25      	ldr	r2, [pc, #148]	; (800527c <network_configure_activations+0x198>)
 80051e6:	60d3      	str	r3, [r2, #12]
    
    value_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80051e8:	4b18      	ldr	r3, [pc, #96]	; (800524c <network_configure_activations+0x168>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a24      	ldr	r2, [pc, #144]	; (8005280 <network_configure_activations+0x19c>)
 80051ee:	6093      	str	r3, [r2, #8]
    value_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 80051f0:	4b16      	ldr	r3, [pc, #88]	; (800524c <network_configure_activations+0x168>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a22      	ldr	r2, [pc, #136]	; (8005280 <network_configure_activations+0x19c>)
 80051f6:	60d3      	str	r3, [r2, #12]
    
    mu_output_array.data = AI_PTR(g_network_activations_map[0] + 4);
 80051f8:	4b14      	ldr	r3, [pc, #80]	; (800524c <network_configure_activations+0x168>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	3304      	adds	r3, #4
 80051fe:	4a21      	ldr	r2, [pc, #132]	; (8005284 <network_configure_activations+0x1a0>)
 8005200:	6093      	str	r3, [r2, #8]
    mu_output_array.data_start = AI_PTR(g_network_activations_map[0] + 4);
 8005202:	4b12      	ldr	r3, [pc, #72]	; (800524c <network_configure_activations+0x168>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	3304      	adds	r3, #4
 8005208:	4a1e      	ldr	r2, [pc, #120]	; (8005284 <network_configure_activations+0x1a0>)
 800520a:	60d3      	str	r3, [r2, #12]
    
    _model_a2c_network_Mul_output_0_output_array.data = AI_PTR(g_network_activations_map[0] + 8);
 800520c:	4b0f      	ldr	r3, [pc, #60]	; (800524c <network_configure_activations+0x168>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	3308      	adds	r3, #8
 8005212:	4a1d      	ldr	r2, [pc, #116]	; (8005288 <network_configure_activations+0x1a4>)
 8005214:	6093      	str	r3, [r2, #8]
    _model_a2c_network_Mul_output_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 8);
 8005216:	4b0d      	ldr	r3, [pc, #52]	; (800524c <network_configure_activations+0x168>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	3308      	adds	r3, #8
 800521c:	4a1a      	ldr	r2, [pc, #104]	; (8005288 <network_configure_activations+0x1a4>)
 800521e:	60d3      	str	r3, [r2, #12]
    
    log_std_output_array.data = AI_PTR(g_network_activations_map[0] + 12);
 8005220:	4b0a      	ldr	r3, [pc, #40]	; (800524c <network_configure_activations+0x168>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	330c      	adds	r3, #12
 8005226:	4a19      	ldr	r2, [pc, #100]	; (800528c <network_configure_activations+0x1a8>)
 8005228:	6093      	str	r3, [r2, #8]
    log_std_output_array.data_start = AI_PTR(g_network_activations_map[0] + 12);
 800522a:	4b08      	ldr	r3, [pc, #32]	; (800524c <network_configure_activations+0x168>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	330c      	adds	r3, #12
 8005230:	4a16      	ldr	r2, [pc, #88]	; (800528c <network_configure_activations+0x1a8>)
 8005232:	60d3      	str	r3, [r2, #12]
    
    return true;
 8005234:	2301      	movs	r3, #1
 8005236:	e005      	b.n	8005244 <network_configure_activations+0x160>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8005238:	2213      	movs	r2, #19
 800523a:	2130      	movs	r1, #48	; 0x30
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f000 fc25 	bl	8005a8c <ai_platform_network_set_error>
  return false;
 8005242:	2300      	movs	r3, #0
}
 8005244:	4618      	mov	r0, r3
 8005246:	3708      	adds	r7, #8
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}
 800524c:	200015a4 	.word	0x200015a4
 8005250:	20000010 	.word	0x20000010
 8005254:	20000020 	.word	0x20000020
 8005258:	20000030 	.word	0x20000030
 800525c:	20000040 	.word	0x20000040
 8005260:	20000050 	.word	0x20000050
 8005264:	20000060 	.word	0x20000060
 8005268:	20000070 	.word	0x20000070
 800526c:	20000080 	.word	0x20000080
 8005270:	20000090 	.word	0x20000090
 8005274:	200000a0 	.word	0x200000a0
 8005278:	200000b0 	.word	0x200000b0
 800527c:	200000c0 	.word	0x200000c0
 8005280:	200000d0 	.word	0x200000d0
 8005284:	200000e0 	.word	0x200000e0
 8005288:	200000f0 	.word	0x200000f0
 800528c:	20000100 	.word	0x20000100

08005290 <network_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b082      	sub	sp, #8
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 800529a:	683a      	ldr	r2, [r7, #0]
 800529c:	2101      	movs	r1, #1
 800529e:	4888      	ldr	r0, [pc, #544]	; (80054c0 <network_configure_weights+0x230>)
 80052a0:	f000 fabc 	bl	800581c <ai_platform_get_weights_map>
 80052a4:	4603      	mov	r3, r0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	f000 8100 	beq.w	80054ac <network_configure_weights+0x21c>
    /* Updating weights (byte) offsets */
    
    model__model_a2c_network_sigma_array.format |= AI_FMT_FLAG_CONST;
 80052ac:	4b85      	ldr	r3, [pc, #532]	; (80054c4 <network_configure_weights+0x234>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052b4:	4a83      	ldr	r2, [pc, #524]	; (80054c4 <network_configure_weights+0x234>)
 80052b6:	6013      	str	r3, [r2, #0]
    model__model_a2c_network_sigma_array.data = AI_PTR(g_network_weights_map[0] + 0);
 80052b8:	4b81      	ldr	r3, [pc, #516]	; (80054c0 <network_configure_weights+0x230>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a81      	ldr	r2, [pc, #516]	; (80054c4 <network_configure_weights+0x234>)
 80052be:	6093      	str	r3, [r2, #8]
    model__model_a2c_network_sigma_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 80052c0:	4b7f      	ldr	r3, [pc, #508]	; (80054c0 <network_configure_weights+0x230>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a7f      	ldr	r2, [pc, #508]	; (80054c4 <network_configure_weights+0x234>)
 80052c6:	60d3      	str	r3, [r2, #12]
    
    _model_a2c_network_Constant_output_0_array.format |= AI_FMT_FLAG_CONST;
 80052c8:	4b7f      	ldr	r3, [pc, #508]	; (80054c8 <network_configure_weights+0x238>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052d0:	4a7d      	ldr	r2, [pc, #500]	; (80054c8 <network_configure_weights+0x238>)
 80052d2:	6013      	str	r3, [r2, #0]
    _model_a2c_network_Constant_output_0_array.data = AI_PTR(g_network_weights_map[0] + 4);
 80052d4:	4b7a      	ldr	r3, [pc, #488]	; (80054c0 <network_configure_weights+0x230>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	3304      	adds	r3, #4
 80052da:	4a7b      	ldr	r2, [pc, #492]	; (80054c8 <network_configure_weights+0x238>)
 80052dc:	6093      	str	r3, [r2, #8]
    _model_a2c_network_Constant_output_0_array.data_start = AI_PTR(g_network_weights_map[0] + 4);
 80052de:	4b78      	ldr	r3, [pc, #480]	; (80054c0 <network_configure_weights+0x230>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	3304      	adds	r3, #4
 80052e4:	4a78      	ldr	r2, [pc, #480]	; (80054c8 <network_configure_weights+0x238>)
 80052e6:	60d3      	str	r3, [r2, #12]
    
    onnxDiv_43_array.format |= AI_FMT_FLAG_CONST;
 80052e8:	4b78      	ldr	r3, [pc, #480]	; (80054cc <network_configure_weights+0x23c>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052f0:	4a76      	ldr	r2, [pc, #472]	; (80054cc <network_configure_weights+0x23c>)
 80052f2:	6013      	str	r3, [r2, #0]
    onnxDiv_43_array.data = AI_PTR(g_network_weights_map[0] + 8);
 80052f4:	4b72      	ldr	r3, [pc, #456]	; (80054c0 <network_configure_weights+0x230>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	3308      	adds	r3, #8
 80052fa:	4a74      	ldr	r2, [pc, #464]	; (80054cc <network_configure_weights+0x23c>)
 80052fc:	6093      	str	r3, [r2, #8]
    onnxDiv_43_array.data_start = AI_PTR(g_network_weights_map[0] + 8);
 80052fe:	4b70      	ldr	r3, [pc, #448]	; (80054c0 <network_configure_weights+0x230>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	3308      	adds	r3, #8
 8005304:	4a71      	ldr	r2, [pc, #452]	; (80054cc <network_configure_weights+0x23c>)
 8005306:	60d3      	str	r3, [r2, #12]
    
    onnxSub_40_array.format |= AI_FMT_FLAG_CONST;
 8005308:	4b71      	ldr	r3, [pc, #452]	; (80054d0 <network_configure_weights+0x240>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005310:	4a6f      	ldr	r2, [pc, #444]	; (80054d0 <network_configure_weights+0x240>)
 8005312:	6013      	str	r3, [r2, #0]
    onnxSub_40_array.data = AI_PTR(g_network_weights_map[0] + 20);
 8005314:	4b6a      	ldr	r3, [pc, #424]	; (80054c0 <network_configure_weights+0x230>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	3314      	adds	r3, #20
 800531a:	4a6d      	ldr	r2, [pc, #436]	; (80054d0 <network_configure_weights+0x240>)
 800531c:	6093      	str	r3, [r2, #8]
    onnxSub_40_array.data_start = AI_PTR(g_network_weights_map[0] + 20);
 800531e:	4b68      	ldr	r3, [pc, #416]	; (80054c0 <network_configure_weights+0x230>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	3314      	adds	r3, #20
 8005324:	4a6a      	ldr	r2, [pc, #424]	; (80054d0 <network_configure_weights+0x240>)
 8005326:	60d3      	str	r3, [r2, #12]
    
    _model_a2c_network_actor_mlp_0_Gemm_output_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8005328:	4b6a      	ldr	r3, [pc, #424]	; (80054d4 <network_configure_weights+0x244>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005330:	4a68      	ldr	r2, [pc, #416]	; (80054d4 <network_configure_weights+0x244>)
 8005332:	6013      	str	r3, [r2, #0]
    _model_a2c_network_actor_mlp_0_Gemm_output_0_weights_array.data = AI_PTR(g_network_weights_map[0] + 32);
 8005334:	4b62      	ldr	r3, [pc, #392]	; (80054c0 <network_configure_weights+0x230>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	3320      	adds	r3, #32
 800533a:	4a66      	ldr	r2, [pc, #408]	; (80054d4 <network_configure_weights+0x244>)
 800533c:	6093      	str	r3, [r2, #8]
    _model_a2c_network_actor_mlp_0_Gemm_output_0_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 32);
 800533e:	4b60      	ldr	r3, [pc, #384]	; (80054c0 <network_configure_weights+0x230>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	3320      	adds	r3, #32
 8005344:	4a63      	ldr	r2, [pc, #396]	; (80054d4 <network_configure_weights+0x244>)
 8005346:	60d3      	str	r3, [r2, #12]
    
    _model_a2c_network_actor_mlp_0_Gemm_output_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8005348:	4b63      	ldr	r3, [pc, #396]	; (80054d8 <network_configure_weights+0x248>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005350:	4a61      	ldr	r2, [pc, #388]	; (80054d8 <network_configure_weights+0x248>)
 8005352:	6013      	str	r3, [r2, #0]
    _model_a2c_network_actor_mlp_0_Gemm_output_0_bias_array.data = AI_PTR(g_network_weights_map[0] + 1568);
 8005354:	4b5a      	ldr	r3, [pc, #360]	; (80054c0 <network_configure_weights+0x230>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f503 63c4 	add.w	r3, r3, #1568	; 0x620
 800535c:	4a5e      	ldr	r2, [pc, #376]	; (80054d8 <network_configure_weights+0x248>)
 800535e:	6093      	str	r3, [r2, #8]
    _model_a2c_network_actor_mlp_0_Gemm_output_0_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 1568);
 8005360:	4b57      	ldr	r3, [pc, #348]	; (80054c0 <network_configure_weights+0x230>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f503 63c4 	add.w	r3, r3, #1568	; 0x620
 8005368:	4a5b      	ldr	r2, [pc, #364]	; (80054d8 <network_configure_weights+0x248>)
 800536a:	60d3      	str	r3, [r2, #12]
    
    _model_a2c_network_actor_mlp_1_Gemm_output_0_weights_array.format |= AI_FMT_FLAG_CONST;
 800536c:	4b5b      	ldr	r3, [pc, #364]	; (80054dc <network_configure_weights+0x24c>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005374:	4a59      	ldr	r2, [pc, #356]	; (80054dc <network_configure_weights+0x24c>)
 8005376:	6013      	str	r3, [r2, #0]
    _model_a2c_network_actor_mlp_1_Gemm_output_0_weights_array.data = AI_PTR(g_network_weights_map[0] + 2080);
 8005378:	4b51      	ldr	r3, [pc, #324]	; (80054c0 <network_configure_weights+0x230>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 8005380:	4a56      	ldr	r2, [pc, #344]	; (80054dc <network_configure_weights+0x24c>)
 8005382:	6093      	str	r3, [r2, #8]
    _model_a2c_network_actor_mlp_1_Gemm_output_0_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 2080);
 8005384:	4b4e      	ldr	r3, [pc, #312]	; (80054c0 <network_configure_weights+0x230>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 800538c:	4a53      	ldr	r2, [pc, #332]	; (80054dc <network_configure_weights+0x24c>)
 800538e:	60d3      	str	r3, [r2, #12]
    
    _model_a2c_network_actor_mlp_1_Gemm_output_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8005390:	4b53      	ldr	r3, [pc, #332]	; (80054e0 <network_configure_weights+0x250>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005398:	4a51      	ldr	r2, [pc, #324]	; (80054e0 <network_configure_weights+0x250>)
 800539a:	6013      	str	r3, [r2, #0]
    _model_a2c_network_actor_mlp_1_Gemm_output_0_bias_array.data = AI_PTR(g_network_weights_map[0] + 35616);
 800539c:	4b48      	ldr	r3, [pc, #288]	; (80054c0 <network_configure_weights+0x230>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f503 430b 	add.w	r3, r3, #35584	; 0x8b00
 80053a4:	3320      	adds	r3, #32
 80053a6:	4a4e      	ldr	r2, [pc, #312]	; (80054e0 <network_configure_weights+0x250>)
 80053a8:	6093      	str	r3, [r2, #8]
    _model_a2c_network_actor_mlp_1_Gemm_output_0_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 35616);
 80053aa:	4b45      	ldr	r3, [pc, #276]	; (80054c0 <network_configure_weights+0x230>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f503 430b 	add.w	r3, r3, #35584	; 0x8b00
 80053b2:	3320      	adds	r3, #32
 80053b4:	4a4a      	ldr	r2, [pc, #296]	; (80054e0 <network_configure_weights+0x250>)
 80053b6:	60d3      	str	r3, [r2, #12]
    
    _model_a2c_network_actor_mlp_2_Gemm_output_0_weights_array.format |= AI_FMT_FLAG_CONST;
 80053b8:	4b4a      	ldr	r3, [pc, #296]	; (80054e4 <network_configure_weights+0x254>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053c0:	4a48      	ldr	r2, [pc, #288]	; (80054e4 <network_configure_weights+0x254>)
 80053c2:	6013      	str	r3, [r2, #0]
    _model_a2c_network_actor_mlp_2_Gemm_output_0_weights_array.data = AI_PTR(g_network_weights_map[0] + 35872);
 80053c4:	4b3e      	ldr	r3, [pc, #248]	; (80054c0 <network_configure_weights+0x230>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f503 430c 	add.w	r3, r3, #35840	; 0x8c00
 80053cc:	3320      	adds	r3, #32
 80053ce:	4a45      	ldr	r2, [pc, #276]	; (80054e4 <network_configure_weights+0x254>)
 80053d0:	6093      	str	r3, [r2, #8]
    _model_a2c_network_actor_mlp_2_Gemm_output_0_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 35872);
 80053d2:	4b3b      	ldr	r3, [pc, #236]	; (80054c0 <network_configure_weights+0x230>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f503 430c 	add.w	r3, r3, #35840	; 0x8c00
 80053da:	3320      	adds	r3, #32
 80053dc:	4a41      	ldr	r2, [pc, #260]	; (80054e4 <network_configure_weights+0x254>)
 80053de:	60d3      	str	r3, [r2, #12]
    
    _model_a2c_network_actor_mlp_2_Gemm_output_0_bias_array.format |= AI_FMT_FLAG_CONST;
 80053e0:	4b41      	ldr	r3, [pc, #260]	; (80054e8 <network_configure_weights+0x258>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053e8:	4a3f      	ldr	r2, [pc, #252]	; (80054e8 <network_configure_weights+0x258>)
 80053ea:	6013      	str	r3, [r2, #0]
    _model_a2c_network_actor_mlp_2_Gemm_output_0_bias_array.data = AI_PTR(g_network_weights_map[0] + 44448);
 80053ec:	4b34      	ldr	r3, [pc, #208]	; (80054c0 <network_configure_weights+0x230>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f503 432d 	add.w	r3, r3, #44288	; 0xad00
 80053f4:	33a0      	adds	r3, #160	; 0xa0
 80053f6:	4a3c      	ldr	r2, [pc, #240]	; (80054e8 <network_configure_weights+0x258>)
 80053f8:	6093      	str	r3, [r2, #8]
    _model_a2c_network_actor_mlp_2_Gemm_output_0_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 44448);
 80053fa:	4b31      	ldr	r3, [pc, #196]	; (80054c0 <network_configure_weights+0x230>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f503 432d 	add.w	r3, r3, #44288	; 0xad00
 8005402:	33a0      	adds	r3, #160	; 0xa0
 8005404:	4a38      	ldr	r2, [pc, #224]	; (80054e8 <network_configure_weights+0x258>)
 8005406:	60d3      	str	r3, [r2, #12]
    
    value_weights_array.format |= AI_FMT_FLAG_CONST;
 8005408:	4b38      	ldr	r3, [pc, #224]	; (80054ec <network_configure_weights+0x25c>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005410:	4a36      	ldr	r2, [pc, #216]	; (80054ec <network_configure_weights+0x25c>)
 8005412:	6013      	str	r3, [r2, #0]
    value_weights_array.data = AI_PTR(g_network_weights_map[0] + 44576);
 8005414:	4b2a      	ldr	r3, [pc, #168]	; (80054c0 <network_configure_weights+0x230>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f503 432e 	add.w	r3, r3, #44544	; 0xae00
 800541c:	3320      	adds	r3, #32
 800541e:	4a33      	ldr	r2, [pc, #204]	; (80054ec <network_configure_weights+0x25c>)
 8005420:	6093      	str	r3, [r2, #8]
    value_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 44576);
 8005422:	4b27      	ldr	r3, [pc, #156]	; (80054c0 <network_configure_weights+0x230>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f503 432e 	add.w	r3, r3, #44544	; 0xae00
 800542a:	3320      	adds	r3, #32
 800542c:	4a2f      	ldr	r2, [pc, #188]	; (80054ec <network_configure_weights+0x25c>)
 800542e:	60d3      	str	r3, [r2, #12]
    
    value_bias_array.format |= AI_FMT_FLAG_CONST;
 8005430:	4b2f      	ldr	r3, [pc, #188]	; (80054f0 <network_configure_weights+0x260>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005438:	4a2d      	ldr	r2, [pc, #180]	; (80054f0 <network_configure_weights+0x260>)
 800543a:	6013      	str	r3, [r2, #0]
    value_bias_array.data = AI_PTR(g_network_weights_map[0] + 44704);
 800543c:	4b20      	ldr	r3, [pc, #128]	; (80054c0 <network_configure_weights+0x230>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f503 432e 	add.w	r3, r3, #44544	; 0xae00
 8005444:	33a0      	adds	r3, #160	; 0xa0
 8005446:	4a2a      	ldr	r2, [pc, #168]	; (80054f0 <network_configure_weights+0x260>)
 8005448:	6093      	str	r3, [r2, #8]
    value_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 44704);
 800544a:	4b1d      	ldr	r3, [pc, #116]	; (80054c0 <network_configure_weights+0x230>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f503 432e 	add.w	r3, r3, #44544	; 0xae00
 8005452:	33a0      	adds	r3, #160	; 0xa0
 8005454:	4a26      	ldr	r2, [pc, #152]	; (80054f0 <network_configure_weights+0x260>)
 8005456:	60d3      	str	r3, [r2, #12]
    
    mu_weights_array.format |= AI_FMT_FLAG_CONST;
 8005458:	4b26      	ldr	r3, [pc, #152]	; (80054f4 <network_configure_weights+0x264>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005460:	4a24      	ldr	r2, [pc, #144]	; (80054f4 <network_configure_weights+0x264>)
 8005462:	6013      	str	r3, [r2, #0]
    mu_weights_array.data = AI_PTR(g_network_weights_map[0] + 44708);
 8005464:	4b16      	ldr	r3, [pc, #88]	; (80054c0 <network_configure_weights+0x230>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f503 432e 	add.w	r3, r3, #44544	; 0xae00
 800546c:	33a4      	adds	r3, #164	; 0xa4
 800546e:	4a21      	ldr	r2, [pc, #132]	; (80054f4 <network_configure_weights+0x264>)
 8005470:	6093      	str	r3, [r2, #8]
    mu_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 44708);
 8005472:	4b13      	ldr	r3, [pc, #76]	; (80054c0 <network_configure_weights+0x230>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f503 432e 	add.w	r3, r3, #44544	; 0xae00
 800547a:	33a4      	adds	r3, #164	; 0xa4
 800547c:	4a1d      	ldr	r2, [pc, #116]	; (80054f4 <network_configure_weights+0x264>)
 800547e:	60d3      	str	r3, [r2, #12]
    
    mu_bias_array.format |= AI_FMT_FLAG_CONST;
 8005480:	4b1d      	ldr	r3, [pc, #116]	; (80054f8 <network_configure_weights+0x268>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005488:	4a1b      	ldr	r2, [pc, #108]	; (80054f8 <network_configure_weights+0x268>)
 800548a:	6013      	str	r3, [r2, #0]
    mu_bias_array.data = AI_PTR(g_network_weights_map[0] + 44836);
 800548c:	4b0c      	ldr	r3, [pc, #48]	; (80054c0 <network_configure_weights+0x230>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f503 432f 	add.w	r3, r3, #44800	; 0xaf00
 8005494:	3324      	adds	r3, #36	; 0x24
 8005496:	4a18      	ldr	r2, [pc, #96]	; (80054f8 <network_configure_weights+0x268>)
 8005498:	6093      	str	r3, [r2, #8]
    mu_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 44836);
 800549a:	4b09      	ldr	r3, [pc, #36]	; (80054c0 <network_configure_weights+0x230>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f503 432f 	add.w	r3, r3, #44800	; 0xaf00
 80054a2:	3324      	adds	r3, #36	; 0x24
 80054a4:	4a14      	ldr	r2, [pc, #80]	; (80054f8 <network_configure_weights+0x268>)
 80054a6:	60d3      	str	r3, [r2, #12]
    
    return true;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e005      	b.n	80054b8 <network_configure_weights+0x228>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 80054ac:	2212      	movs	r2, #18
 80054ae:	2130      	movs	r1, #48	; 0x30
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f000 faeb 	bl	8005a8c <ai_platform_network_set_error>
  return false;
 80054b6:	2300      	movs	r3, #0
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3708      	adds	r7, #8
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}
 80054c0:	200015a8 	.word	0x200015a8
 80054c4:	20000110 	.word	0x20000110
 80054c8:	20000120 	.word	0x20000120
 80054cc:	20000130 	.word	0x20000130
 80054d0:	20000140 	.word	0x20000140
 80054d4:	20000150 	.word	0x20000150
 80054d8:	20000160 	.word	0x20000160
 80054dc:	20000170 	.word	0x20000170
 80054e0:	20000180 	.word	0x20000180
 80054e4:	20000190 	.word	0x20000190
 80054e8:	200001a0 	.word	0x200001a0
 80054ec:	200001b0 	.word	0x200001b0
 80054f0:	200001c0 	.word	0x200001c0
 80054f4:	200001d0 	.word	0x200001d0
 80054f8:	200001e0 	.word	0x200001e0

080054fc <ai_network_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b082      	sub	sp, #8
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f000 fa53 	bl	80059b0 <ai_platform_network_get_error>
 800550a:	4603      	mov	r3, r0
}
 800550c:	4618      	mov	r0, r3
 800550e:	3708      	adds	r7, #8
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}

08005514 <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b084      	sub	sp, #16
 8005518:	af02      	add	r7, sp, #8
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800551e:	2300      	movs	r3, #0
 8005520:	9301      	str	r3, [sp, #4]
 8005522:	2305      	movs	r3, #5
 8005524:	9300      	str	r3, [sp, #0]
 8005526:	2301      	movs	r3, #1
 8005528:	4a04      	ldr	r2, [pc, #16]	; (800553c <ai_network_create+0x28>)
 800552a:	6839      	ldr	r1, [r7, #0]
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f000 fc59 	bl	8005de4 <ai_platform_network_create>
 8005532:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8005534:	4618      	mov	r0, r3
 8005536:	3708      	adds	r7, #8
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}
 800553c:	20000ef4 	.word	0x20000ef4

08005540 <ai_network_create_and_init>:

AI_API_ENTRY
ai_error ai_network_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b096      	sub	sp, #88	; 0x58
 8005544:	af00      	add	r7, sp, #0
 8005546:	60f8      	str	r0, [r7, #12]
 8005548:	60b9      	str	r1, [r7, #8]
 800554a:	607a      	str	r2, [r7, #4]
    ai_error err;
    ai_network_params params;

    err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 800554c:	2100      	movs	r1, #0
 800554e:	68f8      	ldr	r0, [r7, #12]
 8005550:	f7ff ffe0 	bl	8005514 <ai_network_create>
 8005554:	4603      	mov	r3, r0
 8005556:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (err.type != AI_ERROR_NONE)
 8005558:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800555c:	2b00      	cmp	r3, #0
 800555e:	d001      	beq.n	8005564 <ai_network_create_and_init+0x24>
        return err;
 8005560:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005562:	e05d      	b.n	8005620 <ai_network_create_and_init+0xe0>
    if (ai_network_data_params_get(&params) != true) {
 8005564:	f107 0314 	add.w	r3, r7, #20
 8005568:	4618      	mov	r0, r3
 800556a:	f000 f8dd 	bl	8005728 <ai_network_data_params_get>
 800556e:	4603      	mov	r3, r0
 8005570:	f083 0301 	eor.w	r3, r3, #1
 8005574:	b2db      	uxtb	r3, r3
 8005576:	2b00      	cmp	r3, #0
 8005578:	d008      	beq.n	800558c <ai_network_create_and_init+0x4c>
        err = ai_network_get_error(*network);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4618      	mov	r0, r3
 8005580:	f7ff ffbc 	bl	80054fc <ai_network_get_error>
 8005584:	4603      	mov	r3, r0
 8005586:	64fb      	str	r3, [r7, #76]	; 0x4c
        return err;
 8005588:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800558a:	e049      	b.n	8005620 <ai_network_create_and_init+0xe0>
    }
#if defined(AI_NETWORK_DATA_ACTIVATIONS_COUNT)
    if (activations) {
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d016      	beq.n	80055c0 <ai_network_create_and_init+0x80>
        /* set the addresses of the activations buffers */
        for (int idx=0;idx<params.map_activations.size;idx++)
 8005592:	2300      	movs	r3, #0
 8005594:	657b      	str	r3, [r7, #84]	; 0x54
 8005596:	e00e      	b.n	80055b6 <ai_network_create_and_init+0x76>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8005598:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800559a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800559c:	009b      	lsls	r3, r3, #2
 800559e:	68ba      	ldr	r2, [r7, #8]
 80055a0:	4413      	add	r3, r2
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	f107 0314 	add.w	r3, r7, #20
 80055a8:	330c      	adds	r3, #12
 80055aa:	4618      	mov	r0, r3
 80055ac:	f000 f922 	bl	80057f4 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 80055b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055b2:	3301      	adds	r3, #1
 80055b4:	657b      	str	r3, [r7, #84]	; 0x54
 80055b6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80055b8:	461a      	mov	r2, r3
 80055ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055bc:	4293      	cmp	r3, r2
 80055be:	dbeb      	blt.n	8005598 <ai_network_create_and_init+0x58>
    }
#endif
#if defined(AI_NETWORK_DATA_WEIGHTS_COUNT)
    if (weights) {
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d016      	beq.n	80055f4 <ai_network_create_and_init+0xb4>
        /* set the addresses of the weight buffers */
        for (int idx=0;idx<params.map_weights.size;idx++)
 80055c6:	2300      	movs	r3, #0
 80055c8:	653b      	str	r3, [r7, #80]	; 0x50
 80055ca:	e00e      	b.n	80055ea <ai_network_create_and_init+0xaa>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 80055cc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80055ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	4413      	add	r3, r2
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	f107 0314 	add.w	r3, r7, #20
 80055dc:	3304      	adds	r3, #4
 80055de:	4618      	mov	r0, r3
 80055e0:	f000 f908 	bl	80057f4 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 80055e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055e6:	3301      	adds	r3, #1
 80055e8:	653b      	str	r3, [r7, #80]	; 0x50
 80055ea:	8b7b      	ldrh	r3, [r7, #26]
 80055ec:	461a      	mov	r2, r3
 80055ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055f0:	4293      	cmp	r3, r2
 80055f2:	dbeb      	blt.n	80055cc <ai_network_create_and_init+0x8c>
    }
#endif
    if (ai_network_init(*network, &params) != true) {
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f107 0214 	add.w	r2, r7, #20
 80055fc:	4611      	mov	r1, r2
 80055fe:	4618      	mov	r0, r3
 8005600:	f000 f846 	bl	8005690 <ai_network_init>
 8005604:	4603      	mov	r3, r0
 8005606:	f083 0301 	eor.w	r3, r3, #1
 800560a:	b2db      	uxtb	r3, r3
 800560c:	2b00      	cmp	r3, #0
 800560e:	d006      	beq.n	800561e <ai_network_create_and_init+0xde>
        err = ai_network_get_error(*network);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4618      	mov	r0, r3
 8005616:	f7ff ff71 	bl	80054fc <ai_network_get_error>
 800561a:	4603      	mov	r3, r0
 800561c:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    return err;
 800561e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8005620:	4618      	mov	r0, r3
 8005622:	3758      	adds	r7, #88	; 0x58
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}

08005628 <ai_network_inputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d104      	bne.n	8005642 <ai_network_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8005638:	4b06      	ldr	r3, [pc, #24]	; (8005654 <ai_network_inputs_get+0x2c>)
 800563a:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	4a06      	ldr	r2, [pc, #24]	; (8005658 <ai_network_inputs_get+0x30>)
 8005640:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 8005642:	6839      	ldr	r1, [r7, #0]
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f000 fa27 	bl	8005a98 <ai_platform_inputs_get>
 800564a:	4603      	mov	r3, r0
}
 800564c:	4618      	mov	r0, r3
 800564e:	3708      	adds	r7, #8
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}
 8005654:	20000ef4 	.word	0x20000ef4
 8005658:	a1c00100 	.word	0xa1c00100

0800565c <ai_network_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b082      	sub	sp, #8
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d104      	bne.n	8005676 <ai_network_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800566c:	4b06      	ldr	r3, [pc, #24]	; (8005688 <ai_network_outputs_get+0x2c>)
 800566e:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	4a06      	ldr	r2, [pc, #24]	; (800568c <ai_network_outputs_get+0x30>)
 8005674:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 8005676:	6839      	ldr	r1, [r7, #0]
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f000 fae3 	bl	8005c44 <ai_platform_outputs_get>
 800567e:	4603      	mov	r3, r0
}
 8005680:	4618      	mov	r0, r3
 8005682:	3708      	adds	r7, #8
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}
 8005688:	20000ef4 	.word	0x20000ef4
 800568c:	a1c00100 	.word	0xa1c00100

08005690 <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b084      	sub	sp, #16
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 800569a:	6839      	ldr	r1, [r7, #0]
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f000 fc77 	bl	8005f90 <ai_platform_network_init>
 80056a2:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d101      	bne.n	80056ae <ai_network_init+0x1e>
 80056aa:	2300      	movs	r3, #0
 80056ac:	e028      	b.n	8005700 <ai_network_init+0x70>

  ai_bool ok = true;
 80056ae:	2301      	movs	r3, #1
 80056b0:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, params);
 80056b2:	6839      	ldr	r1, [r7, #0]
 80056b4:	68f8      	ldr	r0, [r7, #12]
 80056b6:	f7ff fdeb 	bl	8005290 <network_configure_weights>
 80056ba:	4603      	mov	r3, r0
 80056bc:	461a      	mov	r2, r3
 80056be:	7afb      	ldrb	r3, [r7, #11]
 80056c0:	4013      	ands	r3, r2
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	bf14      	ite	ne
 80056c6:	2301      	movne	r3, #1
 80056c8:	2300      	moveq	r3, #0
 80056ca:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, params);
 80056cc:	6839      	ldr	r1, [r7, #0]
 80056ce:	68f8      	ldr	r0, [r7, #12]
 80056d0:	f7ff fd08 	bl	80050e4 <network_configure_activations>
 80056d4:	4603      	mov	r3, r0
 80056d6:	461a      	mov	r2, r3
 80056d8:	7afb      	ldrb	r3, [r7, #11]
 80056da:	4013      	ands	r3, r2
 80056dc:	2b00      	cmp	r3, #0
 80056de:	bf14      	ite	ne
 80056e0:	2301      	movne	r3, #1
 80056e2:	2300      	moveq	r3, #0
 80056e4:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f000 fd40 	bl	800616c <ai_platform_network_post_init>
 80056ec:	4603      	mov	r3, r0
 80056ee:	461a      	mov	r2, r3
 80056f0:	7afb      	ldrb	r3, [r7, #11]
 80056f2:	4013      	ands	r3, r2
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	bf14      	ite	ne
 80056f8:	2301      	movne	r3, #1
 80056fa:	2300      	moveq	r3, #0
 80056fc:	72fb      	strb	r3, [r7, #11]

  return ok;
 80056fe:	7afb      	ldrb	r3, [r7, #11]
}
 8005700:	4618      	mov	r0, r3
 8005702:	3710      	adds	r7, #16
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}

08005708 <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b084      	sub	sp, #16
 800570c:	af00      	add	r7, sp, #0
 800570e:	60f8      	str	r0, [r7, #12]
 8005710:	60b9      	str	r1, [r7, #8]
 8005712:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	68b9      	ldr	r1, [r7, #8]
 8005718:	68f8      	ldr	r0, [r7, #12]
 800571a:	f000 fdaf 	bl	800627c <ai_platform_network_process>
 800571e:	4603      	mov	r3, r0
}
 8005720:	4618      	mov	r0, r3
 8005722:	3710      	adds	r7, #16
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}

08005728 <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b086      	sub	sp, #24
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d101      	bne.n	800573a <ai_network_data_params_get+0x12>
 8005736:	2300      	movs	r3, #0
 8005738:	e016      	b.n	8005768 <ai_network_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 800573a:	4a0d      	ldr	r2, [pc, #52]	; (8005770 <ai_network_data_params_get+0x48>)
 800573c:	f107 0310 	add.w	r3, r7, #16
 8005740:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005744:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8005748:	4a0a      	ldr	r2, [pc, #40]	; (8005774 <ai_network_data_params_get+0x4c>)
 800574a:	f107 0308 	add.w	r3, r7, #8
 800574e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005752:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 8005756:	f107 0210 	add.w	r2, r7, #16
 800575a:	f107 0308 	add.w	r3, r7, #8
 800575e:	4619      	mov	r1, r3
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f000 f903 	bl	800596c <ai_platform_bind_network_params>
 8005766:	4603      	mov	r3, r0
}
 8005768:	4618      	mov	r0, r3
 800576a:	3718      	adds	r7, #24
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}
 8005770:	08009180 	.word	0x08009180
 8005774:	08009188 	.word	0x08009188

08005778 <ai_buffer_get_size>:
 8005778:	b378      	cbz	r0, 80057da <ai_buffer_get_size+0x62>
 800577a:	b410      	push	{r4}
 800577c:	6803      	ldr	r3, [r0, #0]
 800577e:	4a17      	ldr	r2, [pc, #92]	; (80057dc <ai_buffer_get_size+0x64>)
 8005780:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8005784:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005788:	4293      	cmp	r3, r2
 800578a:	d01e      	beq.n	80057ca <ai_buffer_get_size+0x52>
 800578c:	6984      	ldr	r4, [r0, #24]
 800578e:	6862      	ldr	r2, [r4, #4]
 8005790:	7d03      	ldrb	r3, [r0, #20]
 8005792:	6941      	ldr	r1, [r0, #20]
 8005794:	f1a3 0301 	sub.w	r3, r3, #1
 8005798:	fab3 f383 	clz	r3, r3
 800579c:	095b      	lsrs	r3, r3, #5
 800579e:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 80057a2:	f3c1 2017 	ubfx	r0, r1, #8, #24
 80057a6:	da0b      	bge.n	80057c0 <ai_buffer_get_size+0x48>
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d102      	bne.n	80057b2 <ai_buffer_get_size+0x3a>
 80057ac:	2802      	cmp	r0, #2
 80057ae:	d007      	beq.n	80057c0 <ai_buffer_get_size+0x48>
 80057b0:	2302      	movs	r3, #2
 80057b2:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 80057b6:	3301      	adds	r3, #1
 80057b8:	4298      	cmp	r0, r3
 80057ba:	fb01 f202 	mul.w	r2, r1, r2
 80057be:	d1f3      	bne.n	80057a8 <ai_buffer_get_size+0x30>
 80057c0:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 80057c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80057c8:	4770      	bx	lr
 80057ca:	2900      	cmp	r1, #0
 80057cc:	d0de      	beq.n	800578c <ai_buffer_get_size+0x14>
 80057ce:	6984      	ldr	r4, [r0, #24]
 80057d0:	6863      	ldr	r3, [r4, #4]
 80057d2:	331f      	adds	r3, #31
 80057d4:	f023 021f 	bic.w	r2, r3, #31
 80057d8:	e7da      	b.n	8005790 <ai_buffer_get_size+0x18>
 80057da:	4770      	bx	lr
 80057dc:	000400c0 	.word	0x000400c0

080057e0 <ai_buffer_array_sane>:
 80057e0:	b138      	cbz	r0, 80057f2 <ai_buffer_array_sane+0x12>
 80057e2:	6843      	ldr	r3, [r0, #4]
 80057e4:	b123      	cbz	r3, 80057f0 <ai_buffer_array_sane+0x10>
 80057e6:	8840      	ldrh	r0, [r0, #2]
 80057e8:	3800      	subs	r0, #0
 80057ea:	bf18      	it	ne
 80057ec:	2001      	movne	r0, #1
 80057ee:	4770      	bx	lr
 80057f0:	4618      	mov	r0, r3
 80057f2:	4770      	bx	lr

080057f4 <ai_buffer_array_item_set_address>:
 80057f4:	b150      	cbz	r0, 800580c <ai_buffer_array_item_set_address+0x18>
 80057f6:	6843      	ldr	r3, [r0, #4]
 80057f8:	b14b      	cbz	r3, 800580e <ai_buffer_array_item_set_address+0x1a>
 80057fa:	8840      	ldrh	r0, [r0, #2]
 80057fc:	b900      	cbnz	r0, 8005800 <ai_buffer_array_item_set_address+0xc>
 80057fe:	4770      	bx	lr
 8005800:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8005804:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8005808:	2001      	movs	r0, #1
 800580a:	604a      	str	r2, [r1, #4]
 800580c:	4770      	bx	lr
 800580e:	4618      	mov	r0, r3
 8005810:	4770      	bx	lr
 8005812:	bf00      	nop

08005814 <_ai_platform_acquire_crc>:
 8005814:	2001      	movs	r0, #1
 8005816:	4770      	bx	lr

08005818 <_ai_platform_release_crc>:
 8005818:	4770      	bx	lr
 800581a:	bf00      	nop

0800581c <ai_platform_get_weights_map>:
 800581c:	2a00      	cmp	r2, #0
 800581e:	d037      	beq.n	8005890 <ai_platform_get_weights_map+0x74>
 8005820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005822:	4604      	mov	r4, r0
 8005824:	b1a0      	cbz	r0, 8005850 <ai_platform_get_weights_map+0x34>
 8005826:	460f      	mov	r7, r1
 8005828:	b191      	cbz	r1, 8005850 <ai_platform_get_weights_map+0x34>
 800582a:	4b25      	ldr	r3, [pc, #148]	; (80058c0 <ai_platform_get_weights_map+0xa4>)
 800582c:	6810      	ldr	r0, [r2, #0]
 800582e:	4298      	cmp	r0, r3
 8005830:	4615      	mov	r5, r2
 8005832:	d00f      	beq.n	8005854 <ai_platform_get_weights_map+0x38>
 8005834:	6855      	ldr	r5, [r2, #4]
 8005836:	b15d      	cbz	r5, 8005850 <ai_platform_get_weights_map+0x34>
 8005838:	682e      	ldr	r6, [r5, #0]
 800583a:	429e      	cmp	r6, r3
 800583c:	d02a      	beq.n	8005894 <ai_platform_get_weights_map+0x78>
 800583e:	f1a1 0001 	sub.w	r0, r1, #1
 8005842:	6025      	str	r5, [r4, #0]
 8005844:	fab0 f080 	clz	r0, r0
 8005848:	0940      	lsrs	r0, r0, #5
 800584a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800584c:	42a7      	cmp	r7, r4
 800584e:	d034      	beq.n	80058ba <ai_platform_get_weights_map+0x9e>
 8005850:	2000      	movs	r0, #0
 8005852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005854:	1d10      	adds	r0, r2, #4
 8005856:	f7ff ffc3 	bl	80057e0 <ai_buffer_array_sane>
 800585a:	2800      	cmp	r0, #0
 800585c:	d0f8      	beq.n	8005850 <ai_platform_get_weights_map+0x34>
 800585e:	88eb      	ldrh	r3, [r5, #6]
 8005860:	429f      	cmp	r7, r3
 8005862:	d1f5      	bne.n	8005850 <ai_platform_get_weights_map+0x34>
 8005864:	f04f 0e00 	mov.w	lr, #0
 8005868:	1f23      	subs	r3, r4, #4
 800586a:	4670      	mov	r0, lr
 800586c:	68aa      	ldr	r2, [r5, #8]
 800586e:	eb02 0c0e 	add.w	ip, r2, lr
 8005872:	f10e 0e1c 	add.w	lr, lr, #28
 8005876:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800587a:	b124      	cbz	r4, 8005886 <ai_platform_get_weights_map+0x6a>
 800587c:	3001      	adds	r0, #1
 800587e:	4287      	cmp	r7, r0
 8005880:	f843 4f04 	str.w	r4, [r3, #4]!
 8005884:	d1f2      	bne.n	800586c <ai_platform_get_weights_map+0x50>
 8005886:	1a38      	subs	r0, r7, r0
 8005888:	fab0 f080 	clz	r0, r0
 800588c:	0940      	lsrs	r0, r0, #5
 800588e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005890:	2000      	movs	r0, #0
 8005892:	4770      	bx	lr
 8005894:	1f23      	subs	r3, r4, #4
 8005896:	4628      	mov	r0, r5
 8005898:	2400      	movs	r4, #0
 800589a:	e000      	b.n	800589e <ai_platform_get_weights_map+0x82>
 800589c:	4614      	mov	r4, r2
 800589e:	f850 2f04 	ldr.w	r2, [r0, #4]!
 80058a2:	42b2      	cmp	r2, r6
 80058a4:	d0d2      	beq.n	800584c <ai_platform_get_weights_map+0x30>
 80058a6:	f843 2f04 	str.w	r2, [r3, #4]!
 80058aa:	1c62      	adds	r2, r4, #1
 80058ac:	4297      	cmp	r7, r2
 80058ae:	d1f5      	bne.n	800589c <ai_platform_get_weights_map+0x80>
 80058b0:	3402      	adds	r4, #2
 80058b2:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80058b6:	42b3      	cmp	r3, r6
 80058b8:	d1ca      	bne.n	8005850 <ai_platform_get_weights_map+0x34>
 80058ba:	2001      	movs	r0, #1
 80058bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058be:	bf00      	nop
 80058c0:	a1facade 	.word	0xa1facade

080058c4 <ai_platform_get_activations_map>:
 80058c4:	2a00      	cmp	r2, #0
 80058c6:	d038      	beq.n	800593a <ai_platform_get_activations_map+0x76>
 80058c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ca:	4604      	mov	r4, r0
 80058cc:	b1a0      	cbz	r0, 80058f8 <ai_platform_get_activations_map+0x34>
 80058ce:	460f      	mov	r7, r1
 80058d0:	b191      	cbz	r1, 80058f8 <ai_platform_get_activations_map+0x34>
 80058d2:	4b25      	ldr	r3, [pc, #148]	; (8005968 <ai_platform_get_activations_map+0xa4>)
 80058d4:	6810      	ldr	r0, [r2, #0]
 80058d6:	4298      	cmp	r0, r3
 80058d8:	4615      	mov	r5, r2
 80058da:	d00f      	beq.n	80058fc <ai_platform_get_activations_map+0x38>
 80058dc:	6a15      	ldr	r5, [r2, #32]
 80058de:	b15d      	cbz	r5, 80058f8 <ai_platform_get_activations_map+0x34>
 80058e0:	682e      	ldr	r6, [r5, #0]
 80058e2:	429e      	cmp	r6, r3
 80058e4:	d02b      	beq.n	800593e <ai_platform_get_activations_map+0x7a>
 80058e6:	f1a1 0001 	sub.w	r0, r1, #1
 80058ea:	6025      	str	r5, [r4, #0]
 80058ec:	fab0 f080 	clz	r0, r0
 80058f0:	0940      	lsrs	r0, r0, #5
 80058f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058f4:	42a7      	cmp	r7, r4
 80058f6:	d035      	beq.n	8005964 <ai_platform_get_activations_map+0xa0>
 80058f8:	2000      	movs	r0, #0
 80058fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058fc:	f102 000c 	add.w	r0, r2, #12
 8005900:	f7ff ff6e 	bl	80057e0 <ai_buffer_array_sane>
 8005904:	2800      	cmp	r0, #0
 8005906:	d0f7      	beq.n	80058f8 <ai_platform_get_activations_map+0x34>
 8005908:	89eb      	ldrh	r3, [r5, #14]
 800590a:	429f      	cmp	r7, r3
 800590c:	d1f4      	bne.n	80058f8 <ai_platform_get_activations_map+0x34>
 800590e:	f04f 0e00 	mov.w	lr, #0
 8005912:	1f23      	subs	r3, r4, #4
 8005914:	4670      	mov	r0, lr
 8005916:	692a      	ldr	r2, [r5, #16]
 8005918:	eb02 0c0e 	add.w	ip, r2, lr
 800591c:	f10e 0e1c 	add.w	lr, lr, #28
 8005920:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8005924:	b124      	cbz	r4, 8005930 <ai_platform_get_activations_map+0x6c>
 8005926:	3001      	adds	r0, #1
 8005928:	4287      	cmp	r7, r0
 800592a:	f843 4f04 	str.w	r4, [r3, #4]!
 800592e:	d1f2      	bne.n	8005916 <ai_platform_get_activations_map+0x52>
 8005930:	1a38      	subs	r0, r7, r0
 8005932:	fab0 f080 	clz	r0, r0
 8005936:	0940      	lsrs	r0, r0, #5
 8005938:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800593a:	2000      	movs	r0, #0
 800593c:	4770      	bx	lr
 800593e:	1f23      	subs	r3, r4, #4
 8005940:	4628      	mov	r0, r5
 8005942:	2400      	movs	r4, #0
 8005944:	e000      	b.n	8005948 <ai_platform_get_activations_map+0x84>
 8005946:	4614      	mov	r4, r2
 8005948:	f850 2f04 	ldr.w	r2, [r0, #4]!
 800594c:	42b2      	cmp	r2, r6
 800594e:	d0d1      	beq.n	80058f4 <ai_platform_get_activations_map+0x30>
 8005950:	f843 2f04 	str.w	r2, [r3, #4]!
 8005954:	1c62      	adds	r2, r4, #1
 8005956:	4297      	cmp	r7, r2
 8005958:	d1f5      	bne.n	8005946 <ai_platform_get_activations_map+0x82>
 800595a:	3402      	adds	r4, #2
 800595c:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8005960:	42b3      	cmp	r3, r6
 8005962:	d1c9      	bne.n	80058f8 <ai_platform_get_activations_map+0x34>
 8005964:	2001      	movs	r0, #1
 8005966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005968:	a1facade 	.word	0xa1facade

0800596c <ai_platform_bind_network_params>:
 800596c:	b1a0      	cbz	r0, 8005998 <ai_platform_bind_network_params+0x2c>
 800596e:	b1b1      	cbz	r1, 800599e <ai_platform_bind_network_params+0x32>
 8005970:	b1c2      	cbz	r2, 80059a4 <ai_platform_bind_network_params+0x38>
 8005972:	b410      	push	{r4}
 8005974:	4603      	mov	r3, r0
 8005976:	4c0d      	ldr	r4, [pc, #52]	; (80059ac <ai_platform_bind_network_params+0x40>)
 8005978:	f843 4b04 	str.w	r4, [r3], #4
 800597c:	f100 0c0c 	add.w	ip, r0, #12
 8005980:	c903      	ldmia	r1, {r0, r1}
 8005982:	e883 0003 	stmia.w	r3, {r0, r1}
 8005986:	e892 0003 	ldmia.w	r2, {r0, r1}
 800598a:	e88c 0003 	stmia.w	ip, {r0, r1}
 800598e:	2301      	movs	r3, #1
 8005990:	4618      	mov	r0, r3
 8005992:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005996:	4770      	bx	lr
 8005998:	4603      	mov	r3, r0
 800599a:	4618      	mov	r0, r3
 800599c:	4770      	bx	lr
 800599e:	460b      	mov	r3, r1
 80059a0:	4618      	mov	r0, r3
 80059a2:	4770      	bx	lr
 80059a4:	4613      	mov	r3, r2
 80059a6:	4618      	mov	r0, r3
 80059a8:	4770      	bx	lr
 80059aa:	bf00      	nop
 80059ac:	a1facade 	.word	0xa1facade

080059b0 <ai_platform_network_get_error>:
 80059b0:	b510      	push	{r4, lr}
 80059b2:	b1f0      	cbz	r0, 80059f2 <ai_platform_network_get_error+0x42>
 80059b4:	4b2f      	ldr	r3, [pc, #188]	; (8005a74 <ai_platform_network_get_error+0xc4>)
 80059b6:	6802      	ldr	r2, [r0, #0]
 80059b8:	429a      	cmp	r2, r3
 80059ba:	4604      	mov	r4, r0
 80059bc:	d119      	bne.n	80059f2 <ai_platform_network_get_error+0x42>
 80059be:	f7ff ff29 	bl	8005814 <_ai_platform_acquire_crc>
 80059c2:	4b2d      	ldr	r3, [pc, #180]	; (8005a78 <ai_platform_network_get_error+0xc8>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80059ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059ce:	d03c      	beq.n	8005a4a <ai_platform_network_get_error+0x9a>
 80059d0:	4a2a      	ldr	r2, [pc, #168]	; (8005a7c <ai_platform_network_get_error+0xcc>)
 80059d2:	2301      	movs	r3, #1
 80059d4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80059d8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d1fb      	bne.n	80059d8 <ai_platform_network_get_error+0x28>
 80059e0:	4b27      	ldr	r3, [pc, #156]	; (8005a80 <ai_platform_network_get_error+0xd0>)
 80059e2:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80059e6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80059ea:	4b26      	ldr	r3, [pc, #152]	; (8005a84 <ai_platform_network_get_error+0xd4>)
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d038      	beq.n	8005a62 <ai_platform_network_get_error+0xb2>
 80059f0:	e7fe      	b.n	80059f0 <ai_platform_network_get_error+0x40>
 80059f2:	f7ff ff0f 	bl	8005814 <_ai_platform_acquire_crc>
 80059f6:	4b20      	ldr	r3, [pc, #128]	; (8005a78 <ai_platform_network_get_error+0xc8>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80059fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a02:	d010      	beq.n	8005a26 <ai_platform_network_get_error+0x76>
 8005a04:	4a1d      	ldr	r2, [pc, #116]	; (8005a7c <ai_platform_network_get_error+0xcc>)
 8005a06:	2301      	movs	r3, #1
 8005a08:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005a0c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d1fb      	bne.n	8005a0c <ai_platform_network_get_error+0x5c>
 8005a14:	4b1a      	ldr	r3, [pc, #104]	; (8005a80 <ai_platform_network_get_error+0xd0>)
 8005a16:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8005a1a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005a1e:	4b19      	ldr	r3, [pc, #100]	; (8005a84 <ai_platform_network_get_error+0xd4>)
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d00d      	beq.n	8005a40 <ai_platform_network_get_error+0x90>
 8005a24:	e7fe      	b.n	8005a24 <ai_platform_network_get_error+0x74>
 8005a26:	4a18      	ldr	r2, [pc, #96]	; (8005a88 <ai_platform_network_get_error+0xd8>)
 8005a28:	2301      	movs	r3, #1
 8005a2a:	6093      	str	r3, [r2, #8]
 8005a2c:	6893      	ldr	r3, [r2, #8]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d1fc      	bne.n	8005a2c <ai_platform_network_get_error+0x7c>
 8005a32:	4b13      	ldr	r3, [pc, #76]	; (8005a80 <ai_platform_network_get_error+0xd0>)
 8005a34:	6013      	str	r3, [r2, #0]
 8005a36:	6812      	ldr	r2, [r2, #0]
 8005a38:	4b12      	ldr	r3, [pc, #72]	; (8005a84 <ai_platform_network_get_error+0xd4>)
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d000      	beq.n	8005a40 <ai_platform_network_get_error+0x90>
 8005a3e:	e7fe      	b.n	8005a3e <ai_platform_network_get_error+0x8e>
 8005a40:	f7ff feea 	bl	8005818 <_ai_platform_release_crc>
 8005a44:	f241 0010 	movw	r0, #4112	; 0x1010
 8005a48:	bd10      	pop	{r4, pc}
 8005a4a:	4a0f      	ldr	r2, [pc, #60]	; (8005a88 <ai_platform_network_get_error+0xd8>)
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	6093      	str	r3, [r2, #8]
 8005a50:	6893      	ldr	r3, [r2, #8]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d1fc      	bne.n	8005a50 <ai_platform_network_get_error+0xa0>
 8005a56:	4b0a      	ldr	r3, [pc, #40]	; (8005a80 <ai_platform_network_get_error+0xd0>)
 8005a58:	6013      	str	r3, [r2, #0]
 8005a5a:	6812      	ldr	r2, [r2, #0]
 8005a5c:	4b09      	ldr	r3, [pc, #36]	; (8005a84 <ai_platform_network_get_error+0xd4>)
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d107      	bne.n	8005a72 <ai_platform_network_get_error+0xc2>
 8005a62:	f7ff fed9 	bl	8005818 <_ai_platform_release_crc>
 8005a66:	f104 0010 	add.w	r0, r4, #16
 8005a6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a6e:	f000 be8b 	b.w	8006788 <core_get_error>
 8005a72:	e7fe      	b.n	8005a72 <ai_platform_network_get_error+0xc2>
 8005a74:	a1c00100 	.word	0xa1c00100
 8005a78:	e0042000 	.word	0xe0042000
 8005a7c:	58024000 	.word	0x58024000
 8005a80:	f407a5c2 	.word	0xf407a5c2
 8005a84:	b5e8b5cd 	.word	0xb5e8b5cd
 8005a88:	40023000 	.word	0x40023000

08005a8c <ai_platform_network_set_error>:
 8005a8c:	b110      	cbz	r0, 8005a94 <ai_platform_network_set_error+0x8>
 8005a8e:	3010      	adds	r0, #16
 8005a90:	f000 be80 	b.w	8006794 <core_set_error>
 8005a94:	4770      	bx	lr
 8005a96:	bf00      	nop

08005a98 <ai_platform_inputs_get>:
 8005a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a9c:	b085      	sub	sp, #20
 8005a9e:	9102      	str	r1, [sp, #8]
 8005aa0:	b1f0      	cbz	r0, 8005ae0 <ai_platform_inputs_get+0x48>
 8005aa2:	4b62      	ldr	r3, [pc, #392]	; (8005c2c <ai_platform_inputs_get+0x194>)
 8005aa4:	6802      	ldr	r2, [r0, #0]
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	4607      	mov	r7, r0
 8005aaa:	d119      	bne.n	8005ae0 <ai_platform_inputs_get+0x48>
 8005aac:	f7ff feb2 	bl	8005814 <_ai_platform_acquire_crc>
 8005ab0:	4b5f      	ldr	r3, [pc, #380]	; (8005c30 <ai_platform_inputs_get+0x198>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005ab8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005abc:	d03d      	beq.n	8005b3a <ai_platform_inputs_get+0xa2>
 8005abe:	4a5d      	ldr	r2, [pc, #372]	; (8005c34 <ai_platform_inputs_get+0x19c>)
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005ac6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d1fb      	bne.n	8005ac6 <ai_platform_inputs_get+0x2e>
 8005ace:	4b5a      	ldr	r3, [pc, #360]	; (8005c38 <ai_platform_inputs_get+0x1a0>)
 8005ad0:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8005ad4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005ad8:	4b58      	ldr	r3, [pc, #352]	; (8005c3c <ai_platform_inputs_get+0x1a4>)
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d039      	beq.n	8005b52 <ai_platform_inputs_get+0xba>
 8005ade:	e7fe      	b.n	8005ade <ai_platform_inputs_get+0x46>
 8005ae0:	f7ff fe98 	bl	8005814 <_ai_platform_acquire_crc>
 8005ae4:	4b52      	ldr	r3, [pc, #328]	; (8005c30 <ai_platform_inputs_get+0x198>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005aec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005af0:	d010      	beq.n	8005b14 <ai_platform_inputs_get+0x7c>
 8005af2:	4a50      	ldr	r2, [pc, #320]	; (8005c34 <ai_platform_inputs_get+0x19c>)
 8005af4:	2301      	movs	r3, #1
 8005af6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005afa:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d1fb      	bne.n	8005afa <ai_platform_inputs_get+0x62>
 8005b02:	4b4d      	ldr	r3, [pc, #308]	; (8005c38 <ai_platform_inputs_get+0x1a0>)
 8005b04:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8005b08:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005b0c:	4b4b      	ldr	r3, [pc, #300]	; (8005c3c <ai_platform_inputs_get+0x1a4>)
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d00d      	beq.n	8005b2e <ai_platform_inputs_get+0x96>
 8005b12:	e7fe      	b.n	8005b12 <ai_platform_inputs_get+0x7a>
 8005b14:	4a4a      	ldr	r2, [pc, #296]	; (8005c40 <ai_platform_inputs_get+0x1a8>)
 8005b16:	2301      	movs	r3, #1
 8005b18:	6093      	str	r3, [r2, #8]
 8005b1a:	6893      	ldr	r3, [r2, #8]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d1fc      	bne.n	8005b1a <ai_platform_inputs_get+0x82>
 8005b20:	4b45      	ldr	r3, [pc, #276]	; (8005c38 <ai_platform_inputs_get+0x1a0>)
 8005b22:	6013      	str	r3, [r2, #0]
 8005b24:	6812      	ldr	r2, [r2, #0]
 8005b26:	4b45      	ldr	r3, [pc, #276]	; (8005c3c <ai_platform_inputs_get+0x1a4>)
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d000      	beq.n	8005b2e <ai_platform_inputs_get+0x96>
 8005b2c:	e7fe      	b.n	8005b2c <ai_platform_inputs_get+0x94>
 8005b2e:	f7ff fe73 	bl	8005818 <_ai_platform_release_crc>
 8005b32:	2000      	movs	r0, #0
 8005b34:	b005      	add	sp, #20
 8005b36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b3a:	4a41      	ldr	r2, [pc, #260]	; (8005c40 <ai_platform_inputs_get+0x1a8>)
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	6093      	str	r3, [r2, #8]
 8005b40:	6893      	ldr	r3, [r2, #8]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d1fc      	bne.n	8005b40 <ai_platform_inputs_get+0xa8>
 8005b46:	4b3c      	ldr	r3, [pc, #240]	; (8005c38 <ai_platform_inputs_get+0x1a0>)
 8005b48:	6013      	str	r3, [r2, #0]
 8005b4a:	6812      	ldr	r2, [r2, #0]
 8005b4c:	4b3b      	ldr	r3, [pc, #236]	; (8005c3c <ai_platform_inputs_get+0x1a4>)
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d155      	bne.n	8005bfe <ai_platform_inputs_get+0x166>
 8005b52:	f7ff fe61 	bl	8005818 <_ai_platform_release_crc>
 8005b56:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d051      	beq.n	8005c00 <ai_platform_inputs_get+0x168>
 8005b5c:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 8005b60:	f1ba 0f00 	cmp.w	sl, #0
 8005b64:	d04c      	beq.n	8005c00 <ai_platform_inputs_get+0x168>
 8005b66:	f04f 0b00 	mov.w	fp, #0
 8005b6a:	465d      	mov	r5, fp
 8005b6c:	9703      	str	r7, [sp, #12]
 8005b6e:	e016      	b.n	8005b9e <ai_platform_inputs_get+0x106>
 8005b70:	9901      	ldr	r1, [sp, #4]
 8005b72:	2301      	movs	r3, #1
 8005b74:	507b      	str	r3, [r7, r1]
 8005b76:	69b1      	ldr	r1, [r6, #24]
 8005b78:	6849      	ldr	r1, [r1, #4]
 8005b7a:	6121      	str	r1, [r4, #16]
 8005b7c:	f04f 0301 	mov.w	r3, #1
 8005b80:	7523      	strb	r3, [r4, #20]
 8005b82:	e9c4 c200 	strd	ip, r2, [r4]
 8005b86:	6962      	ldr	r2, [r4, #20]
 8005b88:	60a0      	str	r0, [r4, #8]
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	f369 221f 	bfi	r2, r9, #8, #24
 8005b90:	f8c4 8018 	str.w	r8, [r4, #24]
 8005b94:	60e3      	str	r3, [r4, #12]
 8005b96:	3501      	adds	r5, #1
 8005b98:	f10b 0b1c 	add.w	fp, fp, #28
 8005b9c:	6162      	str	r2, [r4, #20]
 8005b9e:	f8ba 3000 	ldrh.w	r3, [sl]
 8005ba2:	42ab      	cmp	r3, r5
 8005ba4:	b2aa      	uxth	r2, r5
 8005ba6:	d93a      	bls.n	8005c1e <ai_platform_inputs_get+0x186>
 8005ba8:	f8da 3004 	ldr.w	r3, [sl, #4]
 8005bac:	00e9      	lsls	r1, r5, #3
 8005bae:	9101      	str	r1, [sp, #4]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d034      	beq.n	8005c1e <ai_platform_inputs_get+0x186>
 8005bb4:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8005bb8:	2e00      	cmp	r6, #0
 8005bba:	d030      	beq.n	8005c1e <ai_platform_inputs_get+0x186>
 8005bbc:	f8da 3008 	ldr.w	r3, [sl, #8]
 8005bc0:	69b2      	ldr	r2, [r6, #24]
 8005bc2:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8005bc6:	6810      	ldr	r0, [r2, #0]
 8005bc8:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8005bcc:	68b3      	ldr	r3, [r6, #8]
 8005bce:	f3c3 2917 	ubfx	r9, r3, #8, #24
 8005bd2:	f001 ffc3 	bl	8007b5c <ai_array_to_buffer_fmt>
 8005bd6:	69b1      	ldr	r1, [r6, #24]
 8005bd8:	4684      	mov	ip, r0
 8005bda:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 8005bde:	688a      	ldr	r2, [r1, #8]
 8005be0:	445c      	add	r4, fp
 8005be2:	2800      	cmp	r0, #0
 8005be4:	d0c8      	beq.n	8005b78 <ai_platform_inputs_get+0xe0>
 8005be6:	2100      	movs	r1, #0
 8005be8:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8005bec:	6831      	ldr	r1, [r6, #0]
 8005bee:	6041      	str	r1, [r0, #4]
 8005bf0:	b111      	cbz	r1, 8005bf8 <ai_platform_inputs_get+0x160>
 8005bf2:	8849      	ldrh	r1, [r1, #2]
 8005bf4:	2900      	cmp	r1, #0
 8005bf6:	d1bb      	bne.n	8005b70 <ai_platform_inputs_get+0xd8>
 8005bf8:	69b1      	ldr	r1, [r6, #24]
 8005bfa:	2000      	movs	r0, #0
 8005bfc:	e7bc      	b.n	8005b78 <ai_platform_inputs_get+0xe0>
 8005bfe:	e7fe      	b.n	8005bfe <ai_platform_inputs_get+0x166>
 8005c00:	2218      	movs	r2, #24
 8005c02:	2111      	movs	r1, #17
 8005c04:	f107 0010 	add.w	r0, r7, #16
 8005c08:	f000 fdc4 	bl	8006794 <core_set_error>
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	4610      	mov	r0, r2
 8005c10:	9b02      	ldr	r3, [sp, #8]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d08e      	beq.n	8005b34 <ai_platform_inputs_get+0x9c>
 8005c16:	801a      	strh	r2, [r3, #0]
 8005c18:	b005      	add	sp, #20
 8005c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c1e:	9f03      	ldr	r7, [sp, #12]
 8005c20:	2a00      	cmp	r2, #0
 8005c22:	d0ed      	beq.n	8005c00 <ai_platform_inputs_get+0x168>
 8005c24:	f8da 3008 	ldr.w	r3, [sl, #8]
 8005c28:	6858      	ldr	r0, [r3, #4]
 8005c2a:	e7f1      	b.n	8005c10 <ai_platform_inputs_get+0x178>
 8005c2c:	a1c00100 	.word	0xa1c00100
 8005c30:	e0042000 	.word	0xe0042000
 8005c34:	58024000 	.word	0x58024000
 8005c38:	f407a5c2 	.word	0xf407a5c2
 8005c3c:	b5e8b5cd 	.word	0xb5e8b5cd
 8005c40:	40023000 	.word	0x40023000

08005c44 <ai_platform_outputs_get>:
 8005c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c48:	b085      	sub	sp, #20
 8005c4a:	9102      	str	r1, [sp, #8]
 8005c4c:	b1f0      	cbz	r0, 8005c8c <ai_platform_outputs_get+0x48>
 8005c4e:	4b5f      	ldr	r3, [pc, #380]	; (8005dcc <ai_platform_outputs_get+0x188>)
 8005c50:	6802      	ldr	r2, [r0, #0]
 8005c52:	429a      	cmp	r2, r3
 8005c54:	4607      	mov	r7, r0
 8005c56:	d119      	bne.n	8005c8c <ai_platform_outputs_get+0x48>
 8005c58:	f7ff fddc 	bl	8005814 <_ai_platform_acquire_crc>
 8005c5c:	4b5c      	ldr	r3, [pc, #368]	; (8005dd0 <ai_platform_outputs_get+0x18c>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005c64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c68:	d03d      	beq.n	8005ce6 <ai_platform_outputs_get+0xa2>
 8005c6a:	4a5a      	ldr	r2, [pc, #360]	; (8005dd4 <ai_platform_outputs_get+0x190>)
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005c72:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d1fb      	bne.n	8005c72 <ai_platform_outputs_get+0x2e>
 8005c7a:	4b57      	ldr	r3, [pc, #348]	; (8005dd8 <ai_platform_outputs_get+0x194>)
 8005c7c:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8005c80:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005c84:	4b55      	ldr	r3, [pc, #340]	; (8005ddc <ai_platform_outputs_get+0x198>)
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d039      	beq.n	8005cfe <ai_platform_outputs_get+0xba>
 8005c8a:	e7fe      	b.n	8005c8a <ai_platform_outputs_get+0x46>
 8005c8c:	f7ff fdc2 	bl	8005814 <_ai_platform_acquire_crc>
 8005c90:	4b4f      	ldr	r3, [pc, #316]	; (8005dd0 <ai_platform_outputs_get+0x18c>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005c98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c9c:	d010      	beq.n	8005cc0 <ai_platform_outputs_get+0x7c>
 8005c9e:	4a4d      	ldr	r2, [pc, #308]	; (8005dd4 <ai_platform_outputs_get+0x190>)
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005ca6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d1fb      	bne.n	8005ca6 <ai_platform_outputs_get+0x62>
 8005cae:	4b4a      	ldr	r3, [pc, #296]	; (8005dd8 <ai_platform_outputs_get+0x194>)
 8005cb0:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8005cb4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005cb8:	4b48      	ldr	r3, [pc, #288]	; (8005ddc <ai_platform_outputs_get+0x198>)
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d00d      	beq.n	8005cda <ai_platform_outputs_get+0x96>
 8005cbe:	e7fe      	b.n	8005cbe <ai_platform_outputs_get+0x7a>
 8005cc0:	4a47      	ldr	r2, [pc, #284]	; (8005de0 <ai_platform_outputs_get+0x19c>)
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	6093      	str	r3, [r2, #8]
 8005cc6:	6893      	ldr	r3, [r2, #8]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d1fc      	bne.n	8005cc6 <ai_platform_outputs_get+0x82>
 8005ccc:	4b42      	ldr	r3, [pc, #264]	; (8005dd8 <ai_platform_outputs_get+0x194>)
 8005cce:	6013      	str	r3, [r2, #0]
 8005cd0:	6812      	ldr	r2, [r2, #0]
 8005cd2:	4b42      	ldr	r3, [pc, #264]	; (8005ddc <ai_platform_outputs_get+0x198>)
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d000      	beq.n	8005cda <ai_platform_outputs_get+0x96>
 8005cd8:	e7fe      	b.n	8005cd8 <ai_platform_outputs_get+0x94>
 8005cda:	f7ff fd9d 	bl	8005818 <_ai_platform_release_crc>
 8005cde:	2000      	movs	r0, #0
 8005ce0:	b005      	add	sp, #20
 8005ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ce6:	4a3e      	ldr	r2, [pc, #248]	; (8005de0 <ai_platform_outputs_get+0x19c>)
 8005ce8:	2301      	movs	r3, #1
 8005cea:	6093      	str	r3, [r2, #8]
 8005cec:	6893      	ldr	r3, [r2, #8]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d1fc      	bne.n	8005cec <ai_platform_outputs_get+0xa8>
 8005cf2:	4b39      	ldr	r3, [pc, #228]	; (8005dd8 <ai_platform_outputs_get+0x194>)
 8005cf4:	6013      	str	r3, [r2, #0]
 8005cf6:	6812      	ldr	r2, [r2, #0]
 8005cf8:	4b38      	ldr	r3, [pc, #224]	; (8005ddc <ai_platform_outputs_get+0x198>)
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d150      	bne.n	8005da0 <ai_platform_outputs_get+0x15c>
 8005cfe:	f7ff fd8b 	bl	8005818 <_ai_platform_release_crc>
 8005d02:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d958      	bls.n	8005dba <ai_platform_outputs_get+0x176>
 8005d08:	f04f 0b00 	mov.w	fp, #0
 8005d0c:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 8005d10:	9703      	str	r7, [sp, #12]
 8005d12:	465d      	mov	r5, fp
 8005d14:	e016      	b.n	8005d44 <ai_platform_outputs_get+0x100>
 8005d16:	9901      	ldr	r1, [sp, #4]
 8005d18:	2301      	movs	r3, #1
 8005d1a:	507b      	str	r3, [r7, r1]
 8005d1c:	69b1      	ldr	r1, [r6, #24]
 8005d1e:	6849      	ldr	r1, [r1, #4]
 8005d20:	6121      	str	r1, [r4, #16]
 8005d22:	f04f 0301 	mov.w	r3, #1
 8005d26:	7523      	strb	r3, [r4, #20]
 8005d28:	e9c4 c200 	strd	ip, r2, [r4]
 8005d2c:	6962      	ldr	r2, [r4, #20]
 8005d2e:	60a0      	str	r0, [r4, #8]
 8005d30:	2300      	movs	r3, #0
 8005d32:	f369 221f 	bfi	r2, r9, #8, #24
 8005d36:	f8c4 8018 	str.w	r8, [r4, #24]
 8005d3a:	60e3      	str	r3, [r4, #12]
 8005d3c:	3501      	adds	r5, #1
 8005d3e:	f10b 0b1c 	add.w	fp, fp, #28
 8005d42:	6162      	str	r2, [r4, #20]
 8005d44:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8005d48:	42ab      	cmp	r3, r5
 8005d4a:	b2aa      	uxth	r2, r5
 8005d4c:	d929      	bls.n	8005da2 <ai_platform_outputs_get+0x15e>
 8005d4e:	f8da 3010 	ldr.w	r3, [sl, #16]
 8005d52:	00e9      	lsls	r1, r5, #3
 8005d54:	9101      	str	r1, [sp, #4]
 8005d56:	b323      	cbz	r3, 8005da2 <ai_platform_outputs_get+0x15e>
 8005d58:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8005d5c:	b30e      	cbz	r6, 8005da2 <ai_platform_outputs_get+0x15e>
 8005d5e:	f8da 3014 	ldr.w	r3, [sl, #20]
 8005d62:	69b2      	ldr	r2, [r6, #24]
 8005d64:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8005d68:	6810      	ldr	r0, [r2, #0]
 8005d6a:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8005d6e:	68b3      	ldr	r3, [r6, #8]
 8005d70:	f3c3 2917 	ubfx	r9, r3, #8, #24
 8005d74:	f001 fef2 	bl	8007b5c <ai_array_to_buffer_fmt>
 8005d78:	69b1      	ldr	r1, [r6, #24]
 8005d7a:	4684      	mov	ip, r0
 8005d7c:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 8005d80:	688a      	ldr	r2, [r1, #8]
 8005d82:	445c      	add	r4, fp
 8005d84:	2800      	cmp	r0, #0
 8005d86:	d0ca      	beq.n	8005d1e <ai_platform_outputs_get+0xda>
 8005d88:	2100      	movs	r1, #0
 8005d8a:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8005d8e:	6831      	ldr	r1, [r6, #0]
 8005d90:	6041      	str	r1, [r0, #4]
 8005d92:	b111      	cbz	r1, 8005d9a <ai_platform_outputs_get+0x156>
 8005d94:	8849      	ldrh	r1, [r1, #2]
 8005d96:	2900      	cmp	r1, #0
 8005d98:	d1bd      	bne.n	8005d16 <ai_platform_outputs_get+0xd2>
 8005d9a:	69b1      	ldr	r1, [r6, #24]
 8005d9c:	2000      	movs	r0, #0
 8005d9e:	e7be      	b.n	8005d1e <ai_platform_outputs_get+0xda>
 8005da0:	e7fe      	b.n	8005da0 <ai_platform_outputs_get+0x15c>
 8005da2:	9f03      	ldr	r7, [sp, #12]
 8005da4:	b14a      	cbz	r2, 8005dba <ai_platform_outputs_get+0x176>
 8005da6:	f8da 3014 	ldr.w	r3, [sl, #20]
 8005daa:	6858      	ldr	r0, [r3, #4]
 8005dac:	9b02      	ldr	r3, [sp, #8]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d096      	beq.n	8005ce0 <ai_platform_outputs_get+0x9c>
 8005db2:	801a      	strh	r2, [r3, #0]
 8005db4:	b005      	add	sp, #20
 8005db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dba:	2218      	movs	r2, #24
 8005dbc:	2111      	movs	r1, #17
 8005dbe:	f107 0010 	add.w	r0, r7, #16
 8005dc2:	f000 fce7 	bl	8006794 <core_set_error>
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	4610      	mov	r0, r2
 8005dca:	e7ef      	b.n	8005dac <ai_platform_outputs_get+0x168>
 8005dcc:	a1c00100 	.word	0xa1c00100
 8005dd0:	e0042000 	.word	0xe0042000
 8005dd4:	58024000 	.word	0x58024000
 8005dd8:	f407a5c2 	.word	0xf407a5c2
 8005ddc:	b5e8b5cd 	.word	0xb5e8b5cd
 8005de0:	40023000 	.word	0x40023000

08005de4 <ai_platform_network_create>:
 8005de4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005de8:	b083      	sub	sp, #12
 8005dea:	4606      	mov	r6, r0
 8005dec:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 8005df0:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8005df4:	4615      	mov	r5, r2
 8005df6:	461f      	mov	r7, r3
 8005df8:	f7ff fd0c 	bl	8005814 <_ai_platform_acquire_crc>
 8005dfc:	b188      	cbz	r0, 8005e22 <ai_platform_network_create+0x3e>
 8005dfe:	4a5d      	ldr	r2, [pc, #372]	; (8005f74 <ai_platform_network_create+0x190>)
 8005e00:	6812      	ldr	r2, [r2, #0]
 8005e02:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8005e06:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	d00e      	beq.n	8005e2c <ai_platform_network_create+0x48>
 8005e0e:	4a5a      	ldr	r2, [pc, #360]	; (8005f78 <ai_platform_network_create+0x194>)
 8005e10:	2118      	movs	r1, #24
 8005e12:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 8005e16:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 8005e1a:	2918      	cmp	r1, #24
 8005e1c:	d018      	beq.n	8005e50 <ai_platform_network_create+0x6c>
 8005e1e:	f7ff fcfb 	bl	8005818 <_ai_platform_release_crc>
 8005e22:	f244 1033 	movw	r0, #16691	; 0x4133
 8005e26:	b003      	add	sp, #12
 8005e28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005e2c:	4a53      	ldr	r2, [pc, #332]	; (8005f7c <ai_platform_network_create+0x198>)
 8005e2e:	2101      	movs	r1, #1
 8005e30:	6091      	str	r1, [r2, #8]
 8005e32:	2114      	movs	r1, #20
 8005e34:	e001      	b.n	8005e3a <ai_platform_network_create+0x56>
 8005e36:	3901      	subs	r1, #1
 8005e38:	d002      	beq.n	8005e40 <ai_platform_network_create+0x5c>
 8005e3a:	6894      	ldr	r4, [r2, #8]
 8005e3c:	2c00      	cmp	r4, #0
 8005e3e:	d1fa      	bne.n	8005e36 <ai_platform_network_create+0x52>
 8005e40:	4a4e      	ldr	r2, [pc, #312]	; (8005f7c <ai_platform_network_create+0x198>)
 8005e42:	6891      	ldr	r1, [r2, #8]
 8005e44:	b911      	cbnz	r1, 8005e4c <ai_platform_network_create+0x68>
 8005e46:	6812      	ldr	r2, [r2, #0]
 8005e48:	3201      	adds	r2, #1
 8005e4a:	d008      	beq.n	8005e5e <ai_platform_network_create+0x7a>
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	e7e6      	b.n	8005e1e <ai_platform_network_create+0x3a>
 8005e50:	2101      	movs	r1, #1
 8005e52:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 8005e56:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 8005e5a:	2900      	cmp	r1, #0
 8005e5c:	d1fb      	bne.n	8005e56 <ai_platform_network_create+0x72>
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f7ff fcda 	bl	8005818 <_ai_platform_release_crc>
 8005e64:	f7ff fcd6 	bl	8005814 <_ai_platform_acquire_crc>
 8005e68:	4b42      	ldr	r3, [pc, #264]	; (8005f74 <ai_platform_network_create+0x190>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005e70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e74:	d010      	beq.n	8005e98 <ai_platform_network_create+0xb4>
 8005e76:	4b40      	ldr	r3, [pc, #256]	; (8005f78 <ai_platform_network_create+0x194>)
 8005e78:	2201      	movs	r2, #1
 8005e7a:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8005e7e:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
 8005e82:	2900      	cmp	r1, #0
 8005e84:	d1fb      	bne.n	8005e7e <ai_platform_network_create+0x9a>
 8005e86:	4a3e      	ldr	r2, [pc, #248]	; (8005f80 <ai_platform_network_create+0x19c>)
 8005e88:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8005e8c:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8005e90:	4b3c      	ldr	r3, [pc, #240]	; (8005f84 <ai_platform_network_create+0x1a0>)
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d00c      	beq.n	8005eb0 <ai_platform_network_create+0xcc>
 8005e96:	e7fe      	b.n	8005e96 <ai_platform_network_create+0xb2>
 8005e98:	4a38      	ldr	r2, [pc, #224]	; (8005f7c <ai_platform_network_create+0x198>)
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	6093      	str	r3, [r2, #8]
 8005e9e:	6893      	ldr	r3, [r2, #8]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d1fc      	bne.n	8005e9e <ai_platform_network_create+0xba>
 8005ea4:	4b36      	ldr	r3, [pc, #216]	; (8005f80 <ai_platform_network_create+0x19c>)
 8005ea6:	6013      	str	r3, [r2, #0]
 8005ea8:	6812      	ldr	r2, [r2, #0]
 8005eaa:	4b36      	ldr	r3, [pc, #216]	; (8005f84 <ai_platform_network_create+0x1a0>)
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d122      	bne.n	8005ef6 <ai_platform_network_create+0x112>
 8005eb0:	f7ff fcb2 	bl	8005818 <_ai_platform_release_crc>
 8005eb4:	b38e      	cbz	r6, 8005f1a <ai_platform_network_create+0x136>
 8005eb6:	4b34      	ldr	r3, [pc, #208]	; (8005f88 <ai_platform_network_create+0x1a4>)
 8005eb8:	602b      	str	r3, [r5, #0]
 8005eba:	6035      	str	r5, [r6, #0]
 8005ebc:	f000 fc62 	bl	8006784 <core_init>
 8005ec0:	b1d0      	cbz	r0, 8005ef8 <ai_platform_network_create+0x114>
 8005ec2:	f7ff fca7 	bl	8005814 <_ai_platform_acquire_crc>
 8005ec6:	4b2b      	ldr	r3, [pc, #172]	; (8005f74 <ai_platform_network_create+0x190>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005ece:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ed2:	d025      	beq.n	8005f20 <ai_platform_network_create+0x13c>
 8005ed4:	4a28      	ldr	r2, [pc, #160]	; (8005f78 <ai_platform_network_create+0x194>)
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005edc:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d1fb      	bne.n	8005edc <ai_platform_network_create+0xf8>
 8005ee4:	4b26      	ldr	r3, [pc, #152]	; (8005f80 <ai_platform_network_create+0x19c>)
 8005ee6:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8005eea:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005eee:	4b25      	ldr	r3, [pc, #148]	; (8005f84 <ai_platform_network_create+0x1a0>)
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d022      	beq.n	8005f3a <ai_platform_network_create+0x156>
 8005ef4:	e7fe      	b.n	8005ef4 <ai_platform_network_create+0x110>
 8005ef6:	e7fe      	b.n	8005ef6 <ai_platform_network_create+0x112>
 8005ef8:	2430      	movs	r4, #48	; 0x30
 8005efa:	2300      	movs	r3, #0
 8005efc:	6033      	str	r3, [r6, #0]
 8005efe:	2610      	movs	r6, #16
 8005f00:	464a      	mov	r2, r9
 8005f02:	4641      	mov	r1, r8
 8005f04:	4638      	mov	r0, r7
 8005f06:	f001 fecf 	bl	8007ca8 <ai_version_get>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2000      	movs	r0, #0
 8005f0e:	f364 0007 	bfi	r0, r4, #0, #8
 8005f12:	64ab      	str	r3, [r5, #72]	; 0x48
 8005f14:	f366 201f 	bfi	r0, r6, #8, #24
 8005f18:	e785      	b.n	8005e26 <ai_platform_network_create+0x42>
 8005f1a:	f241 0010 	movw	r0, #4112	; 0x1010
 8005f1e:	e782      	b.n	8005e26 <ai_platform_network_create+0x42>
 8005f20:	4a16      	ldr	r2, [pc, #88]	; (8005f7c <ai_platform_network_create+0x198>)
 8005f22:	2301      	movs	r3, #1
 8005f24:	6093      	str	r3, [r2, #8]
 8005f26:	6893      	ldr	r3, [r2, #8]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d1fc      	bne.n	8005f26 <ai_platform_network_create+0x142>
 8005f2c:	4b14      	ldr	r3, [pc, #80]	; (8005f80 <ai_platform_network_create+0x19c>)
 8005f2e:	6013      	str	r3, [r2, #0]
 8005f30:	6812      	ldr	r2, [r2, #0]
 8005f32:	4b14      	ldr	r3, [pc, #80]	; (8005f84 <ai_platform_network_create+0x1a0>)
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d000      	beq.n	8005f3a <ai_platform_network_create+0x156>
 8005f38:	e7fe      	b.n	8005f38 <ai_platform_network_create+0x154>
 8005f3a:	f7ff fc6d 	bl	8005818 <_ai_platform_release_crc>
 8005f3e:	2200      	movs	r2, #0
 8005f40:	4641      	mov	r1, r8
 8005f42:	4638      	mov	r0, r7
 8005f44:	f001 feb0 	bl	8007ca8 <ai_version_get>
 8005f48:	2200      	movs	r2, #0
 8005f4a:	4604      	mov	r4, r0
 8005f4c:	2105      	movs	r1, #5
 8005f4e:	2001      	movs	r0, #1
 8005f50:	f001 feaa 	bl	8007ca8 <ai_version_get>
 8005f54:	4284      	cmp	r4, r0
 8005f56:	d001      	beq.n	8005f5c <ai_platform_network_create+0x178>
 8005f58:	2401      	movs	r4, #1
 8005f5a:	e7ce      	b.n	8005efa <ai_platform_network_create+0x116>
 8005f5c:	4b0b      	ldr	r3, [pc, #44]	; (8005f8c <ai_platform_network_create+0x1a8>)
 8005f5e:	9301      	str	r3, [sp, #4]
 8005f60:	a801      	add	r0, sp, #4
 8005f62:	f000 fc23 	bl	80067ac <ai_check_custom_types>
 8005f66:	b110      	cbz	r0, 8005f6e <ai_platform_network_create+0x18a>
 8005f68:	2600      	movs	r6, #0
 8005f6a:	4634      	mov	r4, r6
 8005f6c:	e7c8      	b.n	8005f00 <ai_platform_network_create+0x11c>
 8005f6e:	2402      	movs	r4, #2
 8005f70:	e7c3      	b.n	8005efa <ai_platform_network_create+0x116>
 8005f72:	bf00      	nop
 8005f74:	e0042000 	.word	0xe0042000
 8005f78:	58024000 	.word	0x58024000
 8005f7c:	40023000 	.word	0x40023000
 8005f80:	f407a5c2 	.word	0xf407a5c2
 8005f84:	b5e8b5cd 	.word	0xb5e8b5cd
 8005f88:	a1c00100 	.word	0xa1c00100
 8005f8c:	84048403 	.word	0x84048403

08005f90 <ai_platform_network_init>:
 8005f90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f94:	b1f8      	cbz	r0, 8005fd6 <ai_platform_network_init+0x46>
 8005f96:	4b6e      	ldr	r3, [pc, #440]	; (8006150 <ai_platform_network_init+0x1c0>)
 8005f98:	6802      	ldr	r2, [r0, #0]
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	4604      	mov	r4, r0
 8005f9e:	d11a      	bne.n	8005fd6 <ai_platform_network_init+0x46>
 8005fa0:	460e      	mov	r6, r1
 8005fa2:	f7ff fc37 	bl	8005814 <_ai_platform_acquire_crc>
 8005fa6:	4b6b      	ldr	r3, [pc, #428]	; (8006154 <ai_platform_network_init+0x1c4>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005fae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fb2:	d03d      	beq.n	8006030 <ai_platform_network_init+0xa0>
 8005fb4:	4a68      	ldr	r2, [pc, #416]	; (8006158 <ai_platform_network_init+0x1c8>)
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005fbc:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d1fb      	bne.n	8005fbc <ai_platform_network_init+0x2c>
 8005fc4:	4b65      	ldr	r3, [pc, #404]	; (800615c <ai_platform_network_init+0x1cc>)
 8005fc6:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8005fca:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005fce:	4b64      	ldr	r3, [pc, #400]	; (8006160 <ai_platform_network_init+0x1d0>)
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d039      	beq.n	8006048 <ai_platform_network_init+0xb8>
 8005fd4:	e7fe      	b.n	8005fd4 <ai_platform_network_init+0x44>
 8005fd6:	f7ff fc1d 	bl	8005814 <_ai_platform_acquire_crc>
 8005fda:	4b5e      	ldr	r3, [pc, #376]	; (8006154 <ai_platform_network_init+0x1c4>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005fe2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fe6:	d010      	beq.n	800600a <ai_platform_network_init+0x7a>
 8005fe8:	4a5b      	ldr	r2, [pc, #364]	; (8006158 <ai_platform_network_init+0x1c8>)
 8005fea:	2301      	movs	r3, #1
 8005fec:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005ff0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d1fb      	bne.n	8005ff0 <ai_platform_network_init+0x60>
 8005ff8:	4b58      	ldr	r3, [pc, #352]	; (800615c <ai_platform_network_init+0x1cc>)
 8005ffa:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8005ffe:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006002:	4b57      	ldr	r3, [pc, #348]	; (8006160 <ai_platform_network_init+0x1d0>)
 8006004:	429a      	cmp	r2, r3
 8006006:	d00d      	beq.n	8006024 <ai_platform_network_init+0x94>
 8006008:	e7fe      	b.n	8006008 <ai_platform_network_init+0x78>
 800600a:	4a56      	ldr	r2, [pc, #344]	; (8006164 <ai_platform_network_init+0x1d4>)
 800600c:	2301      	movs	r3, #1
 800600e:	6093      	str	r3, [r2, #8]
 8006010:	6893      	ldr	r3, [r2, #8]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d1fc      	bne.n	8006010 <ai_platform_network_init+0x80>
 8006016:	4b51      	ldr	r3, [pc, #324]	; (800615c <ai_platform_network_init+0x1cc>)
 8006018:	6013      	str	r3, [r2, #0]
 800601a:	6812      	ldr	r2, [r2, #0]
 800601c:	4b50      	ldr	r3, [pc, #320]	; (8006160 <ai_platform_network_init+0x1d0>)
 800601e:	429a      	cmp	r2, r3
 8006020:	d000      	beq.n	8006024 <ai_platform_network_init+0x94>
 8006022:	e7fe      	b.n	8006022 <ai_platform_network_init+0x92>
 8006024:	f7ff fbf8 	bl	8005818 <_ai_platform_release_crc>
 8006028:	2600      	movs	r6, #0
 800602a:	4630      	mov	r0, r6
 800602c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006030:	4a4c      	ldr	r2, [pc, #304]	; (8006164 <ai_platform_network_init+0x1d4>)
 8006032:	2301      	movs	r3, #1
 8006034:	6093      	str	r3, [r2, #8]
 8006036:	6893      	ldr	r3, [r2, #8]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d1fc      	bne.n	8006036 <ai_platform_network_init+0xa6>
 800603c:	4b47      	ldr	r3, [pc, #284]	; (800615c <ai_platform_network_init+0x1cc>)
 800603e:	6013      	str	r3, [r2, #0]
 8006040:	6812      	ldr	r2, [r2, #0]
 8006042:	4b47      	ldr	r3, [pc, #284]	; (8006160 <ai_platform_network_init+0x1d0>)
 8006044:	429a      	cmp	r2, r3
 8006046:	d11c      	bne.n	8006082 <ai_platform_network_init+0xf2>
 8006048:	f7ff fbe6 	bl	8005818 <_ai_platform_release_crc>
 800604c:	2e00      	cmp	r6, #0
 800604e:	d06f      	beq.n	8006130 <ai_platform_network_init+0x1a0>
 8006050:	4b45      	ldr	r3, [pc, #276]	; (8006168 <ai_platform_network_init+0x1d8>)
 8006052:	6832      	ldr	r2, [r6, #0]
 8006054:	429a      	cmp	r2, r3
 8006056:	d115      	bne.n	8006084 <ai_platform_network_init+0xf4>
 8006058:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 800605c:	6933      	ldr	r3, [r6, #16]
 800605e:	f8b6 e00c 	ldrh.w	lr, [r6, #12]
 8006062:	89f7      	ldrh	r7, [r6, #14]
 8006064:	62a3      	str	r3, [r4, #40]	; 0x28
 8006066:	e9c4 2107 	strd	r2, r1, [r4, #28]
 800606a:	2303      	movs	r3, #3
 800606c:	84e7      	strh	r7, [r4, #38]	; 0x26
 800606e:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
 8006072:	60e3      	str	r3, [r4, #12]
 8006074:	4620      	mov	r0, r4
 8006076:	4626      	mov	r6, r4
 8006078:	f000 fbc2 	bl	8006800 <ai_layers_init_all>
 800607c:	4630      	mov	r0, r6
 800607e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006082:	e7fe      	b.n	8006082 <ai_platform_network_init+0xf2>
 8006084:	2101      	movs	r1, #1
 8006086:	4630      	mov	r0, r6
 8006088:	4635      	mov	r5, r6
 800608a:	6876      	ldr	r6, [r6, #4]
 800608c:	f7ff fb74 	bl	8005778 <ai_buffer_get_size>
 8006090:	f105 081c 	add.w	r8, r5, #28
 8006094:	4681      	mov	r9, r0
 8006096:	2101      	movs	r1, #1
 8006098:	4640      	mov	r0, r8
 800609a:	6a2f      	ldr	r7, [r5, #32]
 800609c:	f7ff fb6c 	bl	8005778 <ai_buffer_get_size>
 80060a0:	f1b9 0f00 	cmp.w	r9, #0
 80060a4:	d025      	beq.n	80060f2 <ai_platform_network_init+0x162>
 80060a6:	2201      	movs	r2, #1
 80060a8:	4696      	mov	lr, r2
 80060aa:	bb30      	cbnz	r0, 80060fa <ai_platform_network_init+0x16a>
 80060ac:	4680      	mov	r8, r0
 80060ae:	4607      	mov	r7, r0
 80060b0:	b376      	cbz	r6, 8006110 <ai_platform_network_init+0x180>
 80060b2:	8be3      	ldrh	r3, [r4, #30]
 80060b4:	4573      	cmp	r3, lr
 80060b6:	d323      	bcc.n	8006100 <ai_platform_network_init+0x170>
 80060b8:	b142      	cbz	r2, 80060cc <ai_platform_network_init+0x13c>
 80060ba:	46ac      	mov	ip, r5
 80060bc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80060c0:	6a25      	ldr	r5, [r4, #32]
 80060c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80060c4:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80060c8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80060cc:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80060ce:	f8a4 e01e 	strh.w	lr, [r4, #30]
 80060d2:	2600      	movs	r6, #0
 80060d4:	42bb      	cmp	r3, r7
 80060d6:	83a6      	strh	r6, [r4, #28]
 80060d8:	d323      	bcc.n	8006122 <ai_platform_network_init+0x192>
 80060da:	b37f      	cbz	r7, 800613c <ai_platform_network_init+0x1ac>
 80060dc:	46c4      	mov	ip, r8
 80060de:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80060e2:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80060e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80060e6:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80060ea:	46b6      	mov	lr, r6
 80060ec:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80060f0:	e7bb      	b.n	800606a <ai_platform_network_init+0xda>
 80060f2:	464a      	mov	r2, r9
 80060f4:	46ce      	mov	lr, r9
 80060f6:	464d      	mov	r5, r9
 80060f8:	e7d7      	b.n	80060aa <ai_platform_network_init+0x11a>
 80060fa:	b30f      	cbz	r7, 8006140 <ai_platform_network_init+0x1b0>
 80060fc:	2701      	movs	r7, #1
 80060fe:	e7d7      	b.n	80060b0 <ai_platform_network_init+0x120>
 8006100:	2212      	movs	r2, #18
 8006102:	2116      	movs	r1, #22
 8006104:	f104 0010 	add.w	r0, r4, #16
 8006108:	f000 fb44 	bl	8006794 <core_set_error>
 800610c:	2600      	movs	r6, #0
 800610e:	e78c      	b.n	800602a <ai_platform_network_init+0x9a>
 8006110:	f1b9 0f00 	cmp.w	r9, #0
 8006114:	d0cd      	beq.n	80060b2 <ai_platform_network_init+0x122>
 8006116:	2110      	movs	r1, #16
 8006118:	2212      	movs	r2, #18
 800611a:	1860      	adds	r0, r4, r1
 800611c:	f000 fb3a 	bl	8006794 <core_set_error>
 8006120:	e783      	b.n	800602a <ai_platform_network_init+0x9a>
 8006122:	2213      	movs	r2, #19
 8006124:	2116      	movs	r1, #22
 8006126:	f104 0010 	add.w	r0, r4, #16
 800612a:	f000 fb33 	bl	8006794 <core_set_error>
 800612e:	e77c      	b.n	800602a <ai_platform_network_init+0x9a>
 8006130:	2110      	movs	r1, #16
 8006132:	2211      	movs	r2, #17
 8006134:	1860      	adds	r0, r4, r1
 8006136:	f000 fb2d 	bl	8006794 <core_set_error>
 800613a:	e776      	b.n	800602a <ai_platform_network_init+0x9a>
 800613c:	46be      	mov	lr, r7
 800613e:	e794      	b.n	800606a <ai_platform_network_init+0xda>
 8006140:	2110      	movs	r1, #16
 8006142:	2213      	movs	r2, #19
 8006144:	1860      	adds	r0, r4, r1
 8006146:	f000 fb25 	bl	8006794 <core_set_error>
 800614a:	463e      	mov	r6, r7
 800614c:	e76d      	b.n	800602a <ai_platform_network_init+0x9a>
 800614e:	bf00      	nop
 8006150:	a1c00100 	.word	0xa1c00100
 8006154:	e0042000 	.word	0xe0042000
 8006158:	58024000 	.word	0x58024000
 800615c:	f407a5c2 	.word	0xf407a5c2
 8006160:	b5e8b5cd 	.word	0xb5e8b5cd
 8006164:	40023000 	.word	0x40023000
 8006168:	a1facade 	.word	0xa1facade

0800616c <ai_platform_network_post_init>:
 800616c:	b538      	push	{r3, r4, r5, lr}
 800616e:	b1f0      	cbz	r0, 80061ae <ai_platform_network_post_init+0x42>
 8006170:	4b3c      	ldr	r3, [pc, #240]	; (8006264 <ai_platform_network_post_init+0xf8>)
 8006172:	6802      	ldr	r2, [r0, #0]
 8006174:	429a      	cmp	r2, r3
 8006176:	4604      	mov	r4, r0
 8006178:	d119      	bne.n	80061ae <ai_platform_network_post_init+0x42>
 800617a:	f7ff fb4b 	bl	8005814 <_ai_platform_acquire_crc>
 800617e:	4b3a      	ldr	r3, [pc, #232]	; (8006268 <ai_platform_network_post_init+0xfc>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006186:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800618a:	d03b      	beq.n	8006204 <ai_platform_network_post_init+0x98>
 800618c:	4a37      	ldr	r2, [pc, #220]	; (800626c <ai_platform_network_post_init+0x100>)
 800618e:	2301      	movs	r3, #1
 8006190:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006194:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006198:	2b00      	cmp	r3, #0
 800619a:	d1fb      	bne.n	8006194 <ai_platform_network_post_init+0x28>
 800619c:	4b34      	ldr	r3, [pc, #208]	; (8006270 <ai_platform_network_post_init+0x104>)
 800619e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80061a2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80061a6:	4b33      	ldr	r3, [pc, #204]	; (8006274 <ai_platform_network_post_init+0x108>)
 80061a8:	429a      	cmp	r2, r3
 80061aa:	d037      	beq.n	800621c <ai_platform_network_post_init+0xb0>
 80061ac:	e7fe      	b.n	80061ac <ai_platform_network_post_init+0x40>
 80061ae:	f7ff fb31 	bl	8005814 <_ai_platform_acquire_crc>
 80061b2:	4b2d      	ldr	r3, [pc, #180]	; (8006268 <ai_platform_network_post_init+0xfc>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80061ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061be:	d010      	beq.n	80061e2 <ai_platform_network_post_init+0x76>
 80061c0:	4a2a      	ldr	r2, [pc, #168]	; (800626c <ai_platform_network_post_init+0x100>)
 80061c2:	2301      	movs	r3, #1
 80061c4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80061c8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d1fb      	bne.n	80061c8 <ai_platform_network_post_init+0x5c>
 80061d0:	4b27      	ldr	r3, [pc, #156]	; (8006270 <ai_platform_network_post_init+0x104>)
 80061d2:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80061d6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80061da:	4b26      	ldr	r3, [pc, #152]	; (8006274 <ai_platform_network_post_init+0x108>)
 80061dc:	429a      	cmp	r2, r3
 80061de:	d00d      	beq.n	80061fc <ai_platform_network_post_init+0x90>
 80061e0:	e7fe      	b.n	80061e0 <ai_platform_network_post_init+0x74>
 80061e2:	4a25      	ldr	r2, [pc, #148]	; (8006278 <ai_platform_network_post_init+0x10c>)
 80061e4:	2301      	movs	r3, #1
 80061e6:	6093      	str	r3, [r2, #8]
 80061e8:	6893      	ldr	r3, [r2, #8]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d1fc      	bne.n	80061e8 <ai_platform_network_post_init+0x7c>
 80061ee:	4b20      	ldr	r3, [pc, #128]	; (8006270 <ai_platform_network_post_init+0x104>)
 80061f0:	6013      	str	r3, [r2, #0]
 80061f2:	6812      	ldr	r2, [r2, #0]
 80061f4:	4b1f      	ldr	r3, [pc, #124]	; (8006274 <ai_platform_network_post_init+0x108>)
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d000      	beq.n	80061fc <ai_platform_network_post_init+0x90>
 80061fa:	e7fe      	b.n	80061fa <ai_platform_network_post_init+0x8e>
 80061fc:	f7ff fb0c 	bl	8005818 <_ai_platform_release_crc>
 8006200:	2000      	movs	r0, #0
 8006202:	bd38      	pop	{r3, r4, r5, pc}
 8006204:	4a1c      	ldr	r2, [pc, #112]	; (8006278 <ai_platform_network_post_init+0x10c>)
 8006206:	2301      	movs	r3, #1
 8006208:	6093      	str	r3, [r2, #8]
 800620a:	6893      	ldr	r3, [r2, #8]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d1fc      	bne.n	800620a <ai_platform_network_post_init+0x9e>
 8006210:	4b17      	ldr	r3, [pc, #92]	; (8006270 <ai_platform_network_post_init+0x104>)
 8006212:	6013      	str	r3, [r2, #0]
 8006214:	6812      	ldr	r2, [r2, #0]
 8006216:	4b17      	ldr	r3, [pc, #92]	; (8006274 <ai_platform_network_post_init+0x108>)
 8006218:	429a      	cmp	r2, r3
 800621a:	d11a      	bne.n	8006252 <ai_platform_network_post_init+0xe6>
 800621c:	f7ff fafc 	bl	8005818 <_ai_platform_release_crc>
 8006220:	68e3      	ldr	r3, [r4, #12]
 8006222:	f013 0502 	ands.w	r5, r3, #2
 8006226:	d015      	beq.n	8006254 <ai_platform_network_post_init+0xe8>
 8006228:	4620      	mov	r0, r4
 800622a:	f000 faf7 	bl	800681c <ai_layers_post_init_all>
 800622e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006230:	b16b      	cbz	r3, 800624e <ai_platform_network_post_init+0xe2>
 8006232:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8006234:	e007      	b.n	8006246 <ai_platform_network_post_init+0xda>
 8006236:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 800623a:	4798      	blx	r3
 800623c:	692b      	ldr	r3, [r5, #16]
 800623e:	42ab      	cmp	r3, r5
 8006240:	d005      	beq.n	800624e <ai_platform_network_post_init+0xe2>
 8006242:	b123      	cbz	r3, 800624e <ai_platform_network_post_init+0xe2>
 8006244:	461d      	mov	r5, r3
 8006246:	4629      	mov	r1, r5
 8006248:	2000      	movs	r0, #0
 800624a:	2d00      	cmp	r5, #0
 800624c:	d1f3      	bne.n	8006236 <ai_platform_network_post_init+0xca>
 800624e:	2001      	movs	r0, #1
 8006250:	bd38      	pop	{r3, r4, r5, pc}
 8006252:	e7fe      	b.n	8006252 <ai_platform_network_post_init+0xe6>
 8006254:	2210      	movs	r2, #16
 8006256:	2111      	movs	r1, #17
 8006258:	18a0      	adds	r0, r4, r2
 800625a:	f000 fa9b 	bl	8006794 <core_set_error>
 800625e:	4628      	mov	r0, r5
 8006260:	bd38      	pop	{r3, r4, r5, pc}
 8006262:	bf00      	nop
 8006264:	a1c00100 	.word	0xa1c00100
 8006268:	e0042000 	.word	0xe0042000
 800626c:	58024000 	.word	0x58024000
 8006270:	f407a5c2 	.word	0xf407a5c2
 8006274:	b5e8b5cd 	.word	0xb5e8b5cd
 8006278:	40023000 	.word	0x40023000

0800627c <ai_platform_network_process>:
 800627c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006280:	460e      	mov	r6, r1
 8006282:	b085      	sub	sp, #20
 8006284:	4693      	mov	fp, r2
 8006286:	4605      	mov	r5, r0
 8006288:	b120      	cbz	r0, 8006294 <ai_platform_network_process+0x18>
 800628a:	4bb8      	ldr	r3, [pc, #736]	; (800656c <ai_platform_network_process+0x2f0>)
 800628c:	6802      	ldr	r2, [r0, #0]
 800628e:	429a      	cmp	r2, r3
 8006290:	bf18      	it	ne
 8006292:	2500      	movne	r5, #0
 8006294:	f7ff fabe 	bl	8005814 <_ai_platform_acquire_crc>
 8006298:	4bb5      	ldr	r3, [pc, #724]	; (8006570 <ai_platform_network_process+0x2f4>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80062a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062a4:	d010      	beq.n	80062c8 <ai_platform_network_process+0x4c>
 80062a6:	4ab3      	ldr	r2, [pc, #716]	; (8006574 <ai_platform_network_process+0x2f8>)
 80062a8:	2301      	movs	r3, #1
 80062aa:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80062ae:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d1fb      	bne.n	80062ae <ai_platform_network_process+0x32>
 80062b6:	4bb0      	ldr	r3, [pc, #704]	; (8006578 <ai_platform_network_process+0x2fc>)
 80062b8:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80062bc:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80062c0:	4bae      	ldr	r3, [pc, #696]	; (800657c <ai_platform_network_process+0x300>)
 80062c2:	429a      	cmp	r2, r3
 80062c4:	d00d      	beq.n	80062e2 <ai_platform_network_process+0x66>
 80062c6:	e7fe      	b.n	80062c6 <ai_platform_network_process+0x4a>
 80062c8:	4aad      	ldr	r2, [pc, #692]	; (8006580 <ai_platform_network_process+0x304>)
 80062ca:	2301      	movs	r3, #1
 80062cc:	6093      	str	r3, [r2, #8]
 80062ce:	6893      	ldr	r3, [r2, #8]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d1fc      	bne.n	80062ce <ai_platform_network_process+0x52>
 80062d4:	4ba8      	ldr	r3, [pc, #672]	; (8006578 <ai_platform_network_process+0x2fc>)
 80062d6:	6013      	str	r3, [r2, #0]
 80062d8:	6812      	ldr	r2, [r2, #0]
 80062da:	4ba8      	ldr	r3, [pc, #672]	; (800657c <ai_platform_network_process+0x300>)
 80062dc:	429a      	cmp	r2, r3
 80062de:	f040 812c 	bne.w	800653a <ai_platform_network_process+0x2be>
 80062e2:	f7ff fa99 	bl	8005818 <_ai_platform_release_crc>
 80062e6:	2d00      	cmp	r5, #0
 80062e8:	f000 8154 	beq.w	8006594 <ai_platform_network_process+0x318>
 80062ec:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	f000 8124 	beq.w	800653c <ai_platform_network_process+0x2c0>
 80062f4:	68eb      	ldr	r3, [r5, #12]
 80062f6:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 80062fa:	f003 0303 	and.w	r3, r3, #3
 80062fe:	2700      	movs	r7, #0
 8006300:	2b03      	cmp	r3, #3
 8006302:	616f      	str	r7, [r5, #20]
 8006304:	f040 813e 	bne.w	8006584 <ai_platform_network_process+0x308>
 8006308:	2e00      	cmp	r6, #0
 800630a:	f000 811d 	beq.w	8006548 <ai_platform_network_process+0x2cc>
 800630e:	f1ba 0f00 	cmp.w	sl, #0
 8006312:	f000 8119 	beq.w	8006548 <ai_platform_network_process+0x2cc>
 8006316:	f8ba 3000 	ldrh.w	r3, [sl]
 800631a:	2b00      	cmp	r3, #0
 800631c:	f000 8114 	beq.w	8006548 <ai_platform_network_process+0x2cc>
 8006320:	69b3      	ldr	r3, [r6, #24]
 8006322:	f8cd b00c 	str.w	fp, [sp, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	e9cd 3501 	strd	r3, r5, [sp, #4]
 800632c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d072      	beq.n	800641a <ai_platform_network_process+0x19e>
 8006334:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8006338:	2c00      	cmp	r4, #0
 800633a:	d06e      	beq.n	800641a <ai_platform_network_process+0x19e>
 800633c:	f8da 3008 	ldr.w	r3, [sl, #8]
 8006340:	f8d3 9000 	ldr.w	r9, [r3]
 8006344:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 8006348:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 800634c:	f000 81de 	beq.w	800670c <ai_platform_network_process+0x490>
 8006350:	69a3      	ldr	r3, [r4, #24]
 8006352:	2101      	movs	r1, #1
 8006354:	4630      	mov	r0, r6
 8006356:	685d      	ldr	r5, [r3, #4]
 8006358:	f7ff fa0e 	bl	8005778 <ai_buffer_get_size>
 800635c:	4285      	cmp	r5, r0
 800635e:	f0c0 811b 	bcc.w	8006598 <ai_platform_network_process+0x31c>
 8006362:	68e0      	ldr	r0, [r4, #12]
 8006364:	69b1      	ldr	r1, [r6, #24]
 8006366:	68c2      	ldr	r2, [r0, #12]
 8006368:	68cb      	ldr	r3, [r1, #12]
 800636a:	429a      	cmp	r2, r3
 800636c:	f040 8114 	bne.w	8006598 <ai_platform_network_process+0x31c>
 8006370:	6882      	ldr	r2, [r0, #8]
 8006372:	688b      	ldr	r3, [r1, #8]
 8006374:	429a      	cmp	r2, r3
 8006376:	f040 810f 	bne.w	8006598 <ai_platform_network_process+0x31c>
 800637a:	6842      	ldr	r2, [r0, #4]
 800637c:	684b      	ldr	r3, [r1, #4]
 800637e:	429a      	cmp	r2, r3
 8006380:	f040 810a 	bne.w	8006598 <ai_platform_network_process+0x31c>
 8006384:	69a3      	ldr	r3, [r4, #24]
 8006386:	e9d3 0100 	ldrd	r0, r1, [r3]
 800638a:	f001 fc7b 	bl	8007c84 <ai_array_get_data_byte_size>
 800638e:	4605      	mov	r5, r0
 8006390:	4620      	mov	r0, r4
 8006392:	f001 fc8f 	bl	8007cb4 <get_tensor_byte_size>
 8006396:	4285      	cmp	r5, r0
 8006398:	f0c0 80fe 	bcc.w	8006598 <ai_platform_network_process+0x31c>
 800639c:	69a3      	ldr	r3, [r4, #24]
 800639e:	6818      	ldr	r0, [r3, #0]
 80063a0:	f001 fbdc 	bl	8007b5c <ai_array_to_buffer_fmt>
 80063a4:	6833      	ldr	r3, [r6, #0]
 80063a6:	4058      	eors	r0, r3
 80063a8:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 80063ac:	f040 81b9 	bne.w	8006722 <ai_platform_network_process+0x4a6>
 80063b0:	6873      	ldr	r3, [r6, #4]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	f000 81ac 	beq.w	8006710 <ai_platform_network_process+0x494>
 80063b8:	69b3      	ldr	r3, [r6, #24]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	f000 819c 	beq.w	80066fa <ai_platform_network_process+0x47e>
 80063c2:	9a01      	ldr	r2, [sp, #4]
 80063c4:	429a      	cmp	r2, r3
 80063c6:	bf38      	it	cc
 80063c8:	461a      	movcc	r2, r3
 80063ca:	4620      	mov	r0, r4
 80063cc:	9201      	str	r2, [sp, #4]
 80063ce:	f001 fc71 	bl	8007cb4 <get_tensor_byte_size>
 80063d2:	f8c8 0008 	str.w	r0, [r8, #8]
 80063d6:	69b3      	ldr	r3, [r6, #24]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	fb00 f303 	mul.w	r3, r0, r3
 80063de:	f8c8 300c 	str.w	r3, [r8, #12]
 80063e2:	6871      	ldr	r1, [r6, #4]
 80063e4:	f8c8 1004 	str.w	r1, [r8, #4]
 80063e8:	440b      	add	r3, r1
 80063ea:	f849 300b 	str.w	r3, [r9, fp]
 80063ee:	69a0      	ldr	r0, [r4, #24]
 80063f0:	6803      	ldr	r3, [r0, #0]
 80063f2:	009a      	lsls	r2, r3, #2
 80063f4:	f107 0701 	add.w	r7, r7, #1
 80063f8:	f106 061c 	add.w	r6, r6, #28
 80063fc:	f100 80af 	bmi.w	800655e <ai_platform_network_process+0x2e2>
 8006400:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8006404:	1a9b      	subs	r3, r3, r2
 8006406:	4419      	add	r1, r3
 8006408:	6081      	str	r1, [r0, #8]
 800640a:	69a3      	ldr	r3, [r4, #24]
 800640c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8006410:	60da      	str	r2, [r3, #12]
 8006412:	f8ba 3000 	ldrh.w	r3, [sl]
 8006416:	42bb      	cmp	r3, r7
 8006418:	d888      	bhi.n	800632c <ai_platform_network_process+0xb0>
 800641a:	e9dd 5b02 	ldrd	r5, fp, [sp, #8]
 800641e:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 8006420:	f1bb 0f00 	cmp.w	fp, #0
 8006424:	f000 8186 	beq.w	8006734 <ai_platform_network_process+0x4b8>
 8006428:	2a01      	cmp	r2, #1
 800642a:	f240 815e 	bls.w	80066ea <ai_platform_network_process+0x46e>
 800642e:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 8006432:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8006436:	2b00      	cmp	r3, #0
 8006438:	f000 8157 	beq.w	80066ea <ai_platform_network_process+0x46e>
 800643c:	465e      	mov	r6, fp
 800643e:	2700      	movs	r7, #0
 8006440:	462c      	mov	r4, r5
 8006442:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006446:	2b00      	cmp	r3, #0
 8006448:	f000 80b4 	beq.w	80065b4 <ai_platform_network_process+0x338>
 800644c:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
 8006450:	2d00      	cmp	r5, #0
 8006452:	f000 80af 	beq.w	80065b4 <ai_platform_network_process+0x338>
 8006456:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800645a:	f8d3 8000 	ldr.w	r8, [r3]
 800645e:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 8006462:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8006466:	f000 8171 	beq.w	800674c <ai_platform_network_process+0x4d0>
 800646a:	69ab      	ldr	r3, [r5, #24]
 800646c:	2101      	movs	r1, #1
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	9302      	str	r3, [sp, #8]
 8006472:	4630      	mov	r0, r6
 8006474:	f7ff f980 	bl	8005778 <ai_buffer_get_size>
 8006478:	9b02      	ldr	r3, [sp, #8]
 800647a:	4283      	cmp	r3, r0
 800647c:	f0c0 8134 	bcc.w	80066e8 <ai_platform_network_process+0x46c>
 8006480:	68e8      	ldr	r0, [r5, #12]
 8006482:	69b1      	ldr	r1, [r6, #24]
 8006484:	68c2      	ldr	r2, [r0, #12]
 8006486:	68cb      	ldr	r3, [r1, #12]
 8006488:	429a      	cmp	r2, r3
 800648a:	f040 812d 	bne.w	80066e8 <ai_platform_network_process+0x46c>
 800648e:	6882      	ldr	r2, [r0, #8]
 8006490:	688b      	ldr	r3, [r1, #8]
 8006492:	429a      	cmp	r2, r3
 8006494:	f040 8128 	bne.w	80066e8 <ai_platform_network_process+0x46c>
 8006498:	6842      	ldr	r2, [r0, #4]
 800649a:	684b      	ldr	r3, [r1, #4]
 800649c:	429a      	cmp	r2, r3
 800649e:	f040 8123 	bne.w	80066e8 <ai_platform_network_process+0x46c>
 80064a2:	69ab      	ldr	r3, [r5, #24]
 80064a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80064a8:	f001 fbec 	bl	8007c84 <ai_array_get_data_byte_size>
 80064ac:	9002      	str	r0, [sp, #8]
 80064ae:	4628      	mov	r0, r5
 80064b0:	f001 fc00 	bl	8007cb4 <get_tensor_byte_size>
 80064b4:	9b02      	ldr	r3, [sp, #8]
 80064b6:	4283      	cmp	r3, r0
 80064b8:	f0c0 8116 	bcc.w	80066e8 <ai_platform_network_process+0x46c>
 80064bc:	69ab      	ldr	r3, [r5, #24]
 80064be:	6818      	ldr	r0, [r3, #0]
 80064c0:	f001 fb4c 	bl	8007b5c <ai_array_to_buffer_fmt>
 80064c4:	6833      	ldr	r3, [r6, #0]
 80064c6:	4058      	eors	r0, r3
 80064c8:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 80064cc:	f040 8136 	bne.w	800673c <ai_platform_network_process+0x4c0>
 80064d0:	6873      	ldr	r3, [r6, #4]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	f000 814d 	beq.w	8006772 <ai_platform_network_process+0x4f6>
 80064d8:	69b3      	ldr	r3, [r6, #24]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	f000 813f 	beq.w	8006760 <ai_platform_network_process+0x4e4>
 80064e2:	9a01      	ldr	r2, [sp, #4]
 80064e4:	429a      	cmp	r2, r3
 80064e6:	bf38      	it	cc
 80064e8:	461a      	movcc	r2, r3
 80064ea:	4628      	mov	r0, r5
 80064ec:	9201      	str	r2, [sp, #4]
 80064ee:	f001 fbe1 	bl	8007cb4 <get_tensor_byte_size>
 80064f2:	f8ca 0008 	str.w	r0, [sl, #8]
 80064f6:	69b3      	ldr	r3, [r6, #24]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	fb00 f303 	mul.w	r3, r0, r3
 80064fe:	f8ca 300c 	str.w	r3, [sl, #12]
 8006502:	6871      	ldr	r1, [r6, #4]
 8006504:	f8ca 1004 	str.w	r1, [sl, #4]
 8006508:	440b      	add	r3, r1
 800650a:	f848 300b 	str.w	r3, [r8, fp]
 800650e:	69a8      	ldr	r0, [r5, #24]
 8006510:	6803      	ldr	r3, [r0, #0]
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	f107 0701 	add.w	r7, r7, #1
 8006518:	f106 061c 	add.w	r6, r6, #28
 800651c:	d445      	bmi.n	80065aa <ai_platform_network_process+0x32e>
 800651e:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8006522:	1a9b      	subs	r3, r3, r2
 8006524:	4419      	add	r1, r3
 8006526:	6081      	str	r1, [r0, #8]
 8006528:	69ab      	ldr	r3, [r5, #24]
 800652a:	f8da 2004 	ldr.w	r2, [sl, #4]
 800652e:	60da      	str	r2, [r3, #12]
 8006530:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8006534:	429f      	cmp	r7, r3
 8006536:	d384      	bcc.n	8006442 <ai_platform_network_process+0x1c6>
 8006538:	e03c      	b.n	80065b4 <ai_platform_network_process+0x338>
 800653a:	e7fe      	b.n	800653a <ai_platform_network_process+0x2be>
 800653c:	68ea      	ldr	r2, [r5, #12]
 800653e:	616b      	str	r3, [r5, #20]
 8006540:	f002 0203 	and.w	r2, r2, #3
 8006544:	2a03      	cmp	r2, #3
 8006546:	d11d      	bne.n	8006584 <ai_platform_network_process+0x308>
 8006548:	2217      	movs	r2, #23
 800654a:	2112      	movs	r1, #18
 800654c:	f105 0010 	add.w	r0, r5, #16
 8006550:	f000 f920 	bl	8006794 <core_set_error>
 8006554:	2400      	movs	r4, #0
 8006556:	4620      	mov	r0, r4
 8006558:	b005      	add	sp, #20
 800655a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800655e:	f8ba 3000 	ldrh.w	r3, [sl]
 8006562:	429f      	cmp	r7, r3
 8006564:	f4ff aee2 	bcc.w	800632c <ai_platform_network_process+0xb0>
 8006568:	e757      	b.n	800641a <ai_platform_network_process+0x19e>
 800656a:	bf00      	nop
 800656c:	a1c00100 	.word	0xa1c00100
 8006570:	e0042000 	.word	0xe0042000
 8006574:	58024000 	.word	0x58024000
 8006578:	f407a5c2 	.word	0xf407a5c2
 800657c:	b5e8b5cd 	.word	0xb5e8b5cd
 8006580:	40023000 	.word	0x40023000
 8006584:	2230      	movs	r2, #48	; 0x30
 8006586:	2111      	movs	r1, #17
 8006588:	f105 0010 	add.w	r0, r5, #16
 800658c:	f000 f902 	bl	8006794 <core_set_error>
 8006590:	2400      	movs	r4, #0
 8006592:	e7e0      	b.n	8006556 <ai_platform_network_process+0x2da>
 8006594:	462c      	mov	r4, r5
 8006596:	e7de      	b.n	8006556 <ai_platform_network_process+0x2da>
 8006598:	9d02      	ldr	r5, [sp, #8]
 800659a:	2218      	movs	r2, #24
 800659c:	2112      	movs	r1, #18
 800659e:	f105 0010 	add.w	r0, r5, #16
 80065a2:	f000 f8f7 	bl	8006794 <core_set_error>
 80065a6:	2400      	movs	r4, #0
 80065a8:	e7d5      	b.n	8006556 <ai_platform_network_process+0x2da>
 80065aa:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80065ae:	429f      	cmp	r7, r3
 80065b0:	f4ff af47 	bcc.w	8006442 <ai_platform_network_process+0x1c6>
 80065b4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80065b8:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 80065ba:	82a3      	strh	r3, [r4, #20]
 80065bc:	4625      	mov	r5, r4
 80065be:	2a00      	cmp	r2, #0
 80065c0:	f040 808c 	bne.w	80066dc <ai_platform_network_process+0x460>
 80065c4:	4616      	mov	r6, r2
 80065c6:	4617      	mov	r7, r2
 80065c8:	8aec      	ldrh	r4, [r5, #22]
 80065ca:	429c      	cmp	r4, r3
 80065cc:	bf38      	it	cc
 80065ce:	46ab      	movcc	fp, r5
 80065d0:	d2c1      	bcs.n	8006556 <ai_platform_network_process+0x2da>
 80065d2:	2e00      	cmp	r6, #0
 80065d4:	d030      	beq.n	8006638 <ai_platform_network_process+0x3bc>
 80065d6:	f04f 0800 	mov.w	r8, #0
 80065da:	e014      	b.n	8006606 <ai_platform_network_process+0x38a>
 80065dc:	6882      	ldr	r2, [r0, #8]
 80065de:	68c5      	ldr	r5, [r0, #12]
 80065e0:	6863      	ldr	r3, [r4, #4]
 80065e2:	1b52      	subs	r2, r2, r5
 80065e4:	4413      	add	r3, r2
 80065e6:	6083      	str	r3, [r0, #8]
 80065e8:	698b      	ldr	r3, [r1, #24]
 80065ea:	6862      	ldr	r2, [r4, #4]
 80065ec:	60da      	str	r2, [r3, #12]
 80065ee:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80065f2:	f859 200a 	ldr.w	r2, [r9, sl]
 80065f6:	440b      	add	r3, r1
 80065f8:	4293      	cmp	r3, r2
 80065fa:	bf24      	itt	cs
 80065fc:	68e3      	ldrcs	r3, [r4, #12]
 80065fe:	1ad3      	subcs	r3, r2, r3
 8006600:	6063      	str	r3, [r4, #4]
 8006602:	f108 0801 	add.w	r8, r8, #1
 8006606:	8833      	ldrh	r3, [r6, #0]
 8006608:	4543      	cmp	r3, r8
 800660a:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 800660e:	d913      	bls.n	8006638 <ai_platform_network_process+0x3bc>
 8006610:	6873      	ldr	r3, [r6, #4]
 8006612:	b18b      	cbz	r3, 8006638 <ai_platform_network_process+0x3bc>
 8006614:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8006618:	b171      	cbz	r1, 8006638 <ai_platform_network_process+0x3bc>
 800661a:	6988      	ldr	r0, [r1, #24]
 800661c:	68b2      	ldr	r2, [r6, #8]
 800661e:	6803      	ldr	r3, [r0, #0]
 8006620:	f8d2 9000 	ldr.w	r9, [r2]
 8006624:	009d      	lsls	r5, r3, #2
 8006626:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 800662a:	d5d7      	bpl.n	80065dc <ai_platform_network_process+0x360>
 800662c:	6881      	ldr	r1, [r0, #8]
 800662e:	68a2      	ldr	r2, [r4, #8]
 8006630:	6860      	ldr	r0, [r4, #4]
 8006632:	f001 f9a5 	bl	8007980 <st_int8_copy>
 8006636:	e7da      	b.n	80065ee <ai_platform_network_process+0x372>
 8006638:	4658      	mov	r0, fp
 800663a:	f000 f903 	bl	8006844 <ai_layers_forward_all>
 800663e:	2f00      	cmp	r7, #0
 8006640:	d03d      	beq.n	80066be <ai_platform_network_process+0x442>
 8006642:	2400      	movs	r4, #0
 8006644:	e016      	b.n	8006674 <ai_platform_network_process+0x3f8>
 8006646:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 800664a:	f859 100a 	ldr.w	r1, [r9, sl]
 800664e:	4413      	add	r3, r2
 8006650:	428b      	cmp	r3, r1
 8006652:	bf24      	itt	cs
 8006654:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8006658:	1acb      	subcs	r3, r1, r3
 800665a:	f8c8 3004 	str.w	r3, [r8, #4]
 800665e:	6981      	ldr	r1, [r0, #24]
 8006660:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8006664:	1b52      	subs	r2, r2, r5
 8006666:	4413      	add	r3, r2
 8006668:	608b      	str	r3, [r1, #8]
 800666a:	6983      	ldr	r3, [r0, #24]
 800666c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8006670:	60da      	str	r2, [r3, #12]
 8006672:	3401      	adds	r4, #1
 8006674:	883b      	ldrh	r3, [r7, #0]
 8006676:	42a3      	cmp	r3, r4
 8006678:	d921      	bls.n	80066be <ai_platform_network_process+0x442>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	b1fb      	cbz	r3, 80066be <ai_platform_network_process+0x442>
 800667e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8006682:	b1e0      	cbz	r0, 80066be <ai_platform_network_process+0x442>
 8006684:	68ba      	ldr	r2, [r7, #8]
 8006686:	6983      	ldr	r3, [r0, #24]
 8006688:	f8d2 9000 	ldr.w	r9, [r2]
 800668c:	681a      	ldr	r2, [r3, #0]
 800668e:	0092      	lsls	r2, r2, #2
 8006690:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8006694:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8006698:	d5d5      	bpl.n	8006646 <ai_platform_network_process+0x3ca>
 800669a:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 800669e:	6898      	ldr	r0, [r3, #8]
 80066a0:	f001 f96e 	bl	8007980 <st_int8_copy>
 80066a4:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 80066a8:	f859 200a 	ldr.w	r2, [r9, sl]
 80066ac:	440b      	add	r3, r1
 80066ae:	4293      	cmp	r3, r2
 80066b0:	bf24      	itt	cs
 80066b2:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 80066b6:	1ad3      	subcs	r3, r2, r3
 80066b8:	f8c8 3004 	str.w	r3, [r8, #4]
 80066bc:	e7d9      	b.n	8006672 <ai_platform_network_process+0x3f6>
 80066be:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 80066c2:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 80066c6:	3401      	adds	r4, #1
 80066c8:	b2a4      	uxth	r4, r4
 80066ca:	42a3      	cmp	r3, r4
 80066cc:	f8ab 4016 	strh.w	r4, [fp, #22]
 80066d0:	f63f af7f 	bhi.w	80065d2 <ai_platform_network_process+0x356>
 80066d4:	4620      	mov	r0, r4
 80066d6:	b005      	add	sp, #20
 80066d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066dc:	2a01      	cmp	r2, #1
 80066de:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 80066e0:	d03c      	beq.n	800675c <ai_platform_network_process+0x4e0>
 80066e2:	f106 070c 	add.w	r7, r6, #12
 80066e6:	e76f      	b.n	80065c8 <ai_platform_network_process+0x34c>
 80066e8:	4625      	mov	r5, r4
 80066ea:	2218      	movs	r2, #24
 80066ec:	2113      	movs	r1, #19
 80066ee:	f105 0010 	add.w	r0, r5, #16
 80066f2:	f000 f84f 	bl	8006794 <core_set_error>
 80066f6:	2400      	movs	r4, #0
 80066f8:	e72d      	b.n	8006556 <ai_platform_network_process+0x2da>
 80066fa:	9d02      	ldr	r5, [sp, #8]
 80066fc:	4604      	mov	r4, r0
 80066fe:	2221      	movs	r2, #33	; 0x21
 8006700:	2112      	movs	r1, #18
 8006702:	f105 0010 	add.w	r0, r5, #16
 8006706:	f000 f845 	bl	8006794 <core_set_error>
 800670a:	e724      	b.n	8006556 <ai_platform_network_process+0x2da>
 800670c:	9d02      	ldr	r5, [sp, #8]
 800670e:	e71b      	b.n	8006548 <ai_platform_network_process+0x2cc>
 8006710:	9d02      	ldr	r5, [sp, #8]
 8006712:	4604      	mov	r4, r0
 8006714:	2217      	movs	r2, #23
 8006716:	2112      	movs	r1, #18
 8006718:	f105 0010 	add.w	r0, r5, #16
 800671c:	f000 f83a 	bl	8006794 <core_set_error>
 8006720:	e719      	b.n	8006556 <ai_platform_network_process+0x2da>
 8006722:	9d02      	ldr	r5, [sp, #8]
 8006724:	2219      	movs	r2, #25
 8006726:	2112      	movs	r1, #18
 8006728:	f105 0010 	add.w	r0, r5, #16
 800672c:	f000 f832 	bl	8006794 <core_set_error>
 8006730:	2400      	movs	r4, #0
 8006732:	e710      	b.n	8006556 <ai_platform_network_process+0x2da>
 8006734:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8006738:	82ab      	strh	r3, [r5, #20]
 800673a:	e740      	b.n	80065be <ai_platform_network_process+0x342>
 800673c:	f104 0010 	add.w	r0, r4, #16
 8006740:	2219      	movs	r2, #25
 8006742:	2113      	movs	r1, #19
 8006744:	f000 f826 	bl	8006794 <core_set_error>
 8006748:	2400      	movs	r4, #0
 800674a:	e704      	b.n	8006556 <ai_platform_network_process+0x2da>
 800674c:	f104 0010 	add.w	r0, r4, #16
 8006750:	2217      	movs	r2, #23
 8006752:	2113      	movs	r1, #19
 8006754:	f000 f81e 	bl	8006794 <core_set_error>
 8006758:	4654      	mov	r4, sl
 800675a:	e6fc      	b.n	8006556 <ai_platform_network_process+0x2da>
 800675c:	2700      	movs	r7, #0
 800675e:	e733      	b.n	80065c8 <ai_platform_network_process+0x34c>
 8006760:	4625      	mov	r5, r4
 8006762:	2221      	movs	r2, #33	; 0x21
 8006764:	4604      	mov	r4, r0
 8006766:	2113      	movs	r1, #19
 8006768:	f105 0010 	add.w	r0, r5, #16
 800676c:	f000 f812 	bl	8006794 <core_set_error>
 8006770:	e6f1      	b.n	8006556 <ai_platform_network_process+0x2da>
 8006772:	4625      	mov	r5, r4
 8006774:	2217      	movs	r2, #23
 8006776:	4604      	mov	r4, r0
 8006778:	2113      	movs	r1, #19
 800677a:	f105 0010 	add.w	r0, r5, #16
 800677e:	f000 f809 	bl	8006794 <core_set_error>
 8006782:	e6e8      	b.n	8006556 <ai_platform_network_process+0x2da>

08006784 <core_init>:
 8006784:	2001      	movs	r0, #1
 8006786:	4770      	bx	lr

08006788 <core_get_error>:
 8006788:	4603      	mov	r3, r0
 800678a:	2200      	movs	r2, #0
 800678c:	6800      	ldr	r0, [r0, #0]
 800678e:	601a      	str	r2, [r3, #0]
 8006790:	4770      	bx	lr
 8006792:	bf00      	nop

08006794 <core_set_error>:
 8006794:	4603      	mov	r3, r0
 8006796:	7800      	ldrb	r0, [r0, #0]
 8006798:	b108      	cbz	r0, 800679e <core_set_error+0xa>
 800679a:	2000      	movs	r0, #0
 800679c:	4770      	bx	lr
 800679e:	7019      	strb	r1, [r3, #0]
 80067a0:	6819      	ldr	r1, [r3, #0]
 80067a2:	f362 211f 	bfi	r1, r2, #8, #24
 80067a6:	2001      	movs	r0, #1
 80067a8:	6019      	str	r1, [r3, #0]
 80067aa:	4770      	bx	lr

080067ac <ai_check_custom_types>:
 80067ac:	b082      	sub	sp, #8
 80067ae:	4b13      	ldr	r3, [pc, #76]	; (80067fc <ai_check_custom_types+0x50>)
 80067b0:	9301      	str	r3, [sp, #4]
 80067b2:	b118      	cbz	r0, 80067bc <ai_check_custom_types+0x10>
 80067b4:	7803      	ldrb	r3, [r0, #0]
 80067b6:	2b03      	cmp	r3, #3
 80067b8:	d002      	beq.n	80067c0 <ai_check_custom_types+0x14>
 80067ba:	2000      	movs	r0, #0
 80067bc:	b002      	add	sp, #8
 80067be:	4770      	bx	lr
 80067c0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d004      	beq.n	80067d2 <ai_check_custom_types+0x26>
 80067c8:	2001      	movs	r0, #1
 80067ca:	f080 0001 	eor.w	r0, r0, #1
 80067ce:	b002      	add	sp, #8
 80067d0:	4770      	bx	lr
 80067d2:	7842      	ldrb	r2, [r0, #1]
 80067d4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80067d8:	429a      	cmp	r2, r3
 80067da:	f100 0001 	add.w	r0, r0, #1
 80067de:	d1f3      	bne.n	80067c8 <ai_check_custom_types+0x1c>
 80067e0:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80067e4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d1ed      	bne.n	80067c8 <ai_check_custom_types+0x1c>
 80067ec:	7842      	ldrb	r2, [r0, #1]
 80067ee:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80067f2:	429a      	cmp	r2, r3
 80067f4:	d1e8      	bne.n	80067c8 <ai_check_custom_types+0x1c>
 80067f6:	2000      	movs	r0, #0
 80067f8:	e7e7      	b.n	80067ca <ai_check_custom_types+0x1e>
 80067fa:	bf00      	nop
 80067fc:	84048403 	.word	0x84048403

08006800 <ai_layers_init_all>:
 8006800:	4601      	mov	r1, r0
 8006802:	2000      	movs	r0, #0
 8006804:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8006806:	b143      	cbz	r3, 800681a <ai_layers_init_all+0x1a>
 8006808:	691a      	ldr	r2, [r3, #16]
 800680a:	60d9      	str	r1, [r3, #12]
 800680c:	429a      	cmp	r2, r3
 800680e:	f100 0001 	add.w	r0, r0, #1
 8006812:	d002      	beq.n	800681a <ai_layers_init_all+0x1a>
 8006814:	b10a      	cbz	r2, 800681a <ai_layers_init_all+0x1a>
 8006816:	4613      	mov	r3, r2
 8006818:	e7f5      	b.n	8006806 <ai_layers_init_all+0x6>
 800681a:	4770      	bx	lr

0800681c <ai_layers_post_init_all>:
 800681c:	b538      	push	{r3, r4, r5, lr}
 800681e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8006820:	2500      	movs	r5, #0
 8006822:	b16c      	cbz	r4, 8006840 <ai_layers_post_init_all+0x24>
 8006824:	6863      	ldr	r3, [r4, #4]
 8006826:	07db      	lsls	r3, r3, #31
 8006828:	d504      	bpl.n	8006834 <ai_layers_post_init_all+0x18>
 800682a:	6a23      	ldr	r3, [r4, #32]
 800682c:	4620      	mov	r0, r4
 800682e:	b10b      	cbz	r3, 8006834 <ai_layers_post_init_all+0x18>
 8006830:	4798      	blx	r3
 8006832:	3501      	adds	r5, #1
 8006834:	6923      	ldr	r3, [r4, #16]
 8006836:	42a3      	cmp	r3, r4
 8006838:	d002      	beq.n	8006840 <ai_layers_post_init_all+0x24>
 800683a:	b10b      	cbz	r3, 8006840 <ai_layers_post_init_all+0x24>
 800683c:	461c      	mov	r4, r3
 800683e:	e7f0      	b.n	8006822 <ai_layers_post_init_all+0x6>
 8006840:	4628      	mov	r0, r5
 8006842:	bd38      	pop	{r3, r4, r5, pc}

08006844 <ai_layers_forward_all>:
 8006844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006848:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 800684c:	4604      	mov	r4, r0
 800684e:	f1b8 0f00 	cmp.w	r8, #0
 8006852:	d02b      	beq.n	80068ac <ai_layers_forward_all+0x68>
 8006854:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8006856:	6381      	str	r1, [r0, #56]	; 0x38
 8006858:	b321      	cbz	r1, 80068a4 <ai_layers_forward_all+0x60>
 800685a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800685c:	2001      	movs	r0, #1
 800685e:	47c0      	blx	r8
 8006860:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8006862:	b1fe      	cbz	r6, 80068a4 <ai_layers_forward_all+0x60>
 8006864:	2700      	movs	r7, #0
 8006866:	4631      	mov	r1, r6
 8006868:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800686a:	2002      	movs	r0, #2
 800686c:	47c0      	blx	r8
 800686e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8006870:	4628      	mov	r0, r5
 8006872:	696b      	ldr	r3, [r5, #20]
 8006874:	4798      	blx	r3
 8006876:	692e      	ldr	r6, [r5, #16]
 8006878:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800687a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800687c:	42b5      	cmp	r5, r6
 800687e:	f04f 0003 	mov.w	r0, #3
 8006882:	d007      	beq.n	8006894 <ai_layers_forward_all+0x50>
 8006884:	47c0      	blx	r8
 8006886:	3701      	adds	r7, #1
 8006888:	63a6      	str	r6, [r4, #56]	; 0x38
 800688a:	2e00      	cmp	r6, #0
 800688c:	d1eb      	bne.n	8006866 <ai_layers_forward_all+0x22>
 800688e:	4638      	mov	r0, r7
 8006890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006894:	2003      	movs	r0, #3
 8006896:	47c0      	blx	r8
 8006898:	2300      	movs	r3, #0
 800689a:	3701      	adds	r7, #1
 800689c:	63a3      	str	r3, [r4, #56]	; 0x38
 800689e:	4638      	mov	r0, r7
 80068a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068a4:	2700      	movs	r7, #0
 80068a6:	4638      	mov	r0, r7
 80068a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068ac:	6b45      	ldr	r5, [r0, #52]	; 0x34
 80068ae:	6385      	str	r5, [r0, #56]	; 0x38
 80068b0:	2d00      	cmp	r5, #0
 80068b2:	d0f7      	beq.n	80068a4 <ai_layers_forward_all+0x60>
 80068b4:	4647      	mov	r7, r8
 80068b6:	696b      	ldr	r3, [r5, #20]
 80068b8:	4628      	mov	r0, r5
 80068ba:	4798      	blx	r3
 80068bc:	462b      	mov	r3, r5
 80068be:	692d      	ldr	r5, [r5, #16]
 80068c0:	429d      	cmp	r5, r3
 80068c2:	d004      	beq.n	80068ce <ai_layers_forward_all+0x8a>
 80068c4:	63a5      	str	r5, [r4, #56]	; 0x38
 80068c6:	3701      	adds	r7, #1
 80068c8:	2d00      	cmp	r5, #0
 80068ca:	d1f4      	bne.n	80068b6 <ai_layers_forward_all+0x72>
 80068cc:	e7df      	b.n	800688e <ai_layers_forward_all+0x4a>
 80068ce:	2300      	movs	r3, #0
 80068d0:	63a3      	str	r3, [r4, #56]	; 0x38
 80068d2:	3701      	adds	r7, #1
 80068d4:	e7db      	b.n	800688e <ai_layers_forward_all+0x4a>
 80068d6:	bf00      	nop

080068d8 <forward_dense>:
 80068d8:	6983      	ldr	r3, [r0, #24]
 80068da:	881a      	ldrh	r2, [r3, #0]
 80068dc:	2a00      	cmp	r2, #0
 80068de:	f000 8181 	beq.w	8006be4 <forward_dense+0x30c>
 80068e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068e6:	ed2d 8b02 	vpush	{d8}
 80068ea:	f8d3 c004 	ldr.w	ip, [r3, #4]
 80068ee:	f8dc 5004 	ldr.w	r5, [ip, #4]
 80068f2:	b095      	sub	sp, #84	; 0x54
 80068f4:	b105      	cbz	r5, 80068f8 <forward_dense+0x20>
 80068f6:	682d      	ldr	r5, [r5, #0]
 80068f8:	2a01      	cmp	r2, #1
 80068fa:	f000 828f 	beq.w	8006e1c <forward_dense+0x544>
 80068fe:	f8dc 6010 	ldr.w	r6, [ip, #16]
 8006902:	b106      	cbz	r6, 8006906 <forward_dense+0x2e>
 8006904:	6836      	ldr	r6, [r6, #0]
 8006906:	2a02      	cmp	r2, #2
 8006908:	f000 816e 	beq.w	8006be8 <forward_dense+0x310>
 800690c:	f8dc 301c 	ldr.w	r3, [ip, #28]
 8006910:	930b      	str	r3, [sp, #44]	; 0x2c
 8006912:	2b00      	cmp	r3, #0
 8006914:	f000 8274 	beq.w	8006e00 <forward_dense+0x528>
 8006918:	4619      	mov	r1, r3
 800691a:	f8bc 3018 	ldrh.w	r3, [ip, #24]
 800691e:	6809      	ldr	r1, [r1, #0]
 8006920:	910d      	str	r1, [sp, #52]	; 0x34
 8006922:	2b01      	cmp	r3, #1
 8006924:	f240 826e 	bls.w	8006e04 <forward_dense+0x52c>
 8006928:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	930b      	str	r3, [sp, #44]	; 0x2c
 800692e:	460b      	mov	r3, r1
 8006930:	68e8      	ldr	r0, [r5, #12]
 8006932:	68f7      	ldr	r7, [r6, #12]
 8006934:	6840      	ldr	r0, [r0, #4]
 8006936:	6999      	ldr	r1, [r3, #24]
 8006938:	9013      	str	r0, [sp, #76]	; 0x4c
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	680b      	ldr	r3, [r1, #0]
 800693e:	9012      	str	r0, [sp, #72]	; 0x48
 8006940:	e9d7 4702 	ldrd	r4, r7, [r7, #8]
 8006944:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 8006948:	fb00 f404 	mul.w	r4, r0, r4
 800694c:	f3c3 5041 	ubfx	r0, r3, #21, #2
 8006950:	fa4e f000 	asr.w	r0, lr, r0
 8006954:	2a03      	cmp	r2, #3
 8006956:	9010      	str	r0, [sp, #64]	; 0x40
 8006958:	f000 825d 	beq.w	8006e16 <forward_dense+0x53e>
 800695c:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
 8006960:	f3c3 4343 	ubfx	r3, r3, #17, #4
 8006964:	2a00      	cmp	r2, #0
 8006966:	f000 8246 	beq.w	8006df6 <forward_dense+0x51e>
 800696a:	6812      	ldr	r2, [r2, #0]
 800696c:	2a00      	cmp	r2, #0
 800696e:	f000 8242 	beq.w	8006df6 <forward_dense+0x51e>
 8006972:	2b04      	cmp	r3, #4
 8006974:	f8d2 9018 	ldr.w	r9, [r2, #24]
 8006978:	f000 822c 	beq.w	8006dd4 <forward_dense+0x4fc>
 800697c:	2b08      	cmp	r3, #8
 800697e:	f000 8229 	beq.w	8006dd4 <forward_dense+0x4fc>
 8006982:	f04f 0b00 	mov.w	fp, #0
 8006986:	69b2      	ldr	r2, [r6, #24]
 8006988:	69ab      	ldr	r3, [r5, #24]
 800698a:	6891      	ldr	r1, [r2, #8]
 800698c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	6952      	ldr	r2, [r2, #20]
 8006992:	9106      	str	r1, [sp, #24]
 8006994:	fb07 f404 	mul.w	r4, r7, r4
 8006998:	f8d2 9004 	ldr.w	r9, [r2, #4]
 800699c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800699e:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 80069a2:	4281      	cmp	r1, r0
 80069a4:	ea4f 0482 	mov.w	r4, r2, lsl #2
 80069a8:	900e      	str	r0, [sp, #56]	; 0x38
 80069aa:	940c      	str	r4, [sp, #48]	; 0x30
 80069ac:	eb01 0882 	add.w	r8, r1, r2, lsl #2
 80069b0:	f080 8113 	bcs.w	8006bda <forward_dense+0x302>
 80069b4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80069b6:	ed9f 8a93 	vldr	s16, [pc, #588]	; 8006c04 <forward_dense+0x32c>
 80069ba:	f021 0201 	bic.w	r2, r1, #1
 80069be:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80069c2:	9204      	str	r2, [sp, #16]
 80069c4:	f001 0201 	and.w	r2, r1, #1
 80069c8:	08c8      	lsrs	r0, r1, #3
 80069ca:	9208      	str	r2, [sp, #32]
 80069cc:	008a      	lsls	r2, r1, #2
 80069ce:	f001 0a07 	and.w	sl, r1, #7
 80069d2:	920f      	str	r2, [sp, #60]	; 0x3c
 80069d4:	eb03 1240 	add.w	r2, r3, r0, lsl #5
 80069d8:	3320      	adds	r3, #32
 80069da:	465c      	mov	r4, fp
 80069dc:	9007      	str	r0, [sp, #28]
 80069de:	46cb      	mov	fp, r9
 80069e0:	9205      	str	r2, [sp, #20]
 80069e2:	9302      	str	r3, [sp, #8]
 80069e4:	46c1      	mov	r9, r8
 80069e6:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 80069ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069ec:	699b      	ldr	r3, [r3, #24]
 80069ee:	689a      	ldr	r2, [r3, #8]
 80069f0:	9b02      	ldr	r3, [sp, #8]
 80069f2:	3b20      	subs	r3, #32
 80069f4:	930a      	str	r3, [sp, #40]	; 0x28
 80069f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069f8:	b10b      	cbz	r3, 80069fe <forward_dense+0x126>
 80069fa:	699b      	ldr	r3, [r3, #24]
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	2c00      	cmp	r4, #0
 8006a00:	f000 81da 	beq.w	8006db8 <forward_dense+0x4e0>
 8006a04:	9910      	ldr	r1, [sp, #64]	; 0x40
 8006a06:	2904      	cmp	r1, #4
 8006a08:	9906      	ldr	r1, [sp, #24]
 8006a0a:	f000 80fd 	beq.w	8006c08 <forward_dense+0x330>
 8006a0e:	4549      	cmp	r1, r9
 8006a10:	f080 80d2 	bcs.w	8006bb8 <forward_dense+0x2e0>
 8006a14:	460f      	mov	r7, r1
 8006a16:	9907      	ldr	r1, [sp, #28]
 8006a18:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8006a1c:	f8dd a014 	ldr.w	sl, [sp, #20]
 8006a20:	1c4e      	adds	r6, r1, #1
 8006a22:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8006a26:	4694      	mov	ip, r2
 8006a28:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006a2a:	468e      	mov	lr, r1
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	f000 80de 	beq.w	8006bee <forward_dense+0x316>
 8006a32:	ecf3 2a01 	vldmia	r3!, {s5}
 8006a36:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8006c04 <forward_dense+0x32c>
 8006a3a:	f1be 0f00 	cmp.w	lr, #0
 8006a3e:	f000 80de 	beq.w	8006bfe <forward_dense+0x326>
 8006a42:	f10c 0108 	add.w	r1, ip, #8
 8006a46:	4640      	mov	r0, r8
 8006a48:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 8006a4c:	ed10 3a07 	vldr	s6, [r0, #-28]	; 0xffffffe4
 8006a50:	ed50 3a08 	vldr	s7, [r0, #-32]	; 0xffffffe0
 8006a54:	ed10 4a06 	vldr	s8, [r0, #-24]	; 0xffffffe8
 8006a58:	ed50 4a05 	vldr	s9, [r0, #-20]	; 0xffffffec
 8006a5c:	ed10 5a04 	vldr	s10, [r0, #-16]
 8006a60:	ed50 5a03 	vldr	s11, [r0, #-12]
 8006a64:	ed10 6a02 	vldr	s12, [r0, #-8]
 8006a68:	ed50 6a01 	vldr	s13, [r0, #-4]
 8006a6c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006a70:	edd5 7a00 	vldr	s15, [r5]
 8006a74:	f811 5c08 	ldrb.w	r5, [r1, #-8]
 8006a78:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006a7c:	ee67 7a83 	vmul.f32	s15, s15, s6
 8006a80:	ed95 3a00 	vldr	s6, [r5]
 8006a84:	f811 5c06 	ldrb.w	r5, [r1, #-6]
 8006a88:	eee3 7a23 	vfma.f32	s15, s6, s7
 8006a8c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006a90:	3108      	adds	r1, #8
 8006a92:	edd5 3a00 	vldr	s7, [r5]
 8006a96:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 8006a9a:	eee3 7a84 	vfma.f32	s15, s7, s8
 8006a9e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006aa2:	3020      	adds	r0, #32
 8006aa4:	ed95 4a00 	vldr	s8, [r5]
 8006aa8:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 8006aac:	eee4 7a24 	vfma.f32	s15, s8, s9
 8006ab0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006ab4:	edd5 4a00 	vldr	s9, [r5]
 8006ab8:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 8006abc:	eee4 7a85 	vfma.f32	s15, s9, s10
 8006ac0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006ac4:	ed95 5a00 	vldr	s10, [r5]
 8006ac8:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 8006acc:	eee5 7a25 	vfma.f32	s15, s10, s11
 8006ad0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006ad4:	edd5 5a00 	vldr	s11, [r5]
 8006ad8:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 8006adc:	eee5 7a86 	vfma.f32	s15, s11, s12
 8006ae0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006ae4:	428e      	cmp	r6, r1
 8006ae6:	ed95 6a00 	vldr	s12, [r5]
 8006aea:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006aee:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006af2:	d1a9      	bne.n	8006a48 <forward_dense+0x170>
 8006af4:	f1a6 0108 	sub.w	r1, r6, #8
 8006af8:	4650      	mov	r0, sl
 8006afa:	2a00      	cmp	r2, #0
 8006afc:	d04a      	beq.n	8006b94 <forward_dense+0x2bc>
 8006afe:	780d      	ldrb	r5, [r1, #0]
 8006b00:	edd0 6a00 	vldr	s13, [r0]
 8006b04:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006b08:	edd5 7a00 	vldr	s15, [r5]
 8006b0c:	2a01      	cmp	r2, #1
 8006b0e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006b12:	d03f      	beq.n	8006b94 <forward_dense+0x2bc>
 8006b14:	784d      	ldrb	r5, [r1, #1]
 8006b16:	edd0 6a01 	vldr	s13, [r0, #4]
 8006b1a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006b1e:	edd5 7a00 	vldr	s15, [r5]
 8006b22:	2a02      	cmp	r2, #2
 8006b24:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006b28:	d034      	beq.n	8006b94 <forward_dense+0x2bc>
 8006b2a:	788d      	ldrb	r5, [r1, #2]
 8006b2c:	edd0 6a02 	vldr	s13, [r0, #8]
 8006b30:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006b34:	edd5 7a00 	vldr	s15, [r5]
 8006b38:	2a03      	cmp	r2, #3
 8006b3a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006b3e:	d029      	beq.n	8006b94 <forward_dense+0x2bc>
 8006b40:	78cd      	ldrb	r5, [r1, #3]
 8006b42:	edd0 6a03 	vldr	s13, [r0, #12]
 8006b46:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006b4a:	edd5 7a00 	vldr	s15, [r5]
 8006b4e:	2a04      	cmp	r2, #4
 8006b50:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006b54:	d01e      	beq.n	8006b94 <forward_dense+0x2bc>
 8006b56:	790d      	ldrb	r5, [r1, #4]
 8006b58:	edd0 6a04 	vldr	s13, [r0, #16]
 8006b5c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006b60:	edd5 7a00 	vldr	s15, [r5]
 8006b64:	2a05      	cmp	r2, #5
 8006b66:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006b6a:	d013      	beq.n	8006b94 <forward_dense+0x2bc>
 8006b6c:	794d      	ldrb	r5, [r1, #5]
 8006b6e:	edd0 6a05 	vldr	s13, [r0, #20]
 8006b72:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006b76:	edd5 7a00 	vldr	s15, [r5]
 8006b7a:	2a06      	cmp	r2, #6
 8006b7c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006b80:	d008      	beq.n	8006b94 <forward_dense+0x2bc>
 8006b82:	7989      	ldrb	r1, [r1, #6]
 8006b84:	edd0 7a06 	vldr	s15, [r0, #24]
 8006b88:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8006b8c:	edd1 6a00 	vldr	s13, [r1]
 8006b90:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006b94:	44dc      	add	ip, fp
 8006b96:	445e      	add	r6, fp
 8006b98:	ee32 7a87 	vadd.f32	s14, s5, s14
 8006b9c:	eca7 7a01 	vstmia	r7!, {s14}
 8006ba0:	454f      	cmp	r7, r9
 8006ba2:	f4ff af43 	bcc.w	8006a2c <forward_dense+0x154>
 8006ba6:	9a06      	ldr	r2, [sp, #24]
 8006ba8:	eba9 0302 	sub.w	r3, r9, r2
 8006bac:	3b01      	subs	r3, #1
 8006bae:	f023 0303 	bic.w	r3, r3, #3
 8006bb2:	3304      	adds	r3, #4
 8006bb4:	18d3      	adds	r3, r2, r3
 8006bb6:	9306      	str	r3, [sp, #24]
 8006bb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006bba:	9a05      	ldr	r2, [sp, #20]
 8006bbc:	4499      	add	r9, r3
 8006bbe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006bc0:	441a      	add	r2, r3
 8006bc2:	9205      	str	r2, [sp, #20]
 8006bc4:	9a02      	ldr	r2, [sp, #8]
 8006bc6:	441a      	add	r2, r3
 8006bc8:	9202      	str	r2, [sp, #8]
 8006bca:	9a04      	ldr	r2, [sp, #16]
 8006bcc:	441a      	add	r2, r3
 8006bce:	9204      	str	r2, [sp, #16]
 8006bd0:	9b06      	ldr	r3, [sp, #24]
 8006bd2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	f4ff af08 	bcc.w	80069ea <forward_dense+0x112>
 8006bda:	b015      	add	sp, #84	; 0x54
 8006bdc:	ecbd 8b02 	vpop	{d8}
 8006be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006be4:	6853      	ldr	r3, [r2, #4]
 8006be6:	deff      	udf	#255	; 0xff
 8006be8:	2300      	movs	r3, #0
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	deff      	udf	#255	; 0xff
 8006bee:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8006c04 <forward_dense+0x32c>
 8006bf2:	eef0 2a48 	vmov.f32	s5, s16
 8006bf6:	f1be 0f00 	cmp.w	lr, #0
 8006bfa:	f47f af22 	bne.w	8006a42 <forward_dense+0x16a>
 8006bfe:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006c00:	4661      	mov	r1, ip
 8006c02:	e77a      	b.n	8006afa <forward_dense+0x222>
 8006c04:	00000000 	.word	0x00000000
 8006c08:	4549      	cmp	r1, r9
 8006c0a:	d2d5      	bcs.n	8006bb8 <forward_dense+0x2e0>
 8006c0c:	9807      	ldr	r0, [sp, #28]
 8006c0e:	9103      	str	r1, [sp, #12]
 8006c10:	9904      	ldr	r1, [sp, #16]
 8006c12:	f100 0c01 	add.w	ip, r0, #1
 8006c16:	3901      	subs	r1, #1
 8006c18:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8006c1c:	9109      	str	r1, [sp, #36]	; 0x24
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	f000 80b2 	beq.w	8006d88 <forward_dense+0x4b0>
 8006c24:	9907      	ldr	r1, [sp, #28]
 8006c26:	ecf3 2a01 	vldmia	r3!, {s5}
 8006c2a:	ed1f 7a0a 	vldr	s14, [pc, #-40]	; 8006c04 <forward_dense+0x32c>
 8006c2e:	2900      	cmp	r1, #0
 8006c30:	f000 80b2 	beq.w	8006d98 <forward_dense+0x4c0>
 8006c34:	9902      	ldr	r1, [sp, #8]
 8006c36:	1d10      	adds	r0, r2, #4
 8006c38:	f810 6c04 	ldrb.w	r6, [r0, #-4]
 8006c3c:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
 8006c40:	f810 5c03 	ldrb.w	r5, [r0, #-3]
 8006c44:	ed51 3a08 	vldr	s7, [r1, #-32]	; 0xffffffe0
 8006c48:	ed11 4a06 	vldr	s8, [r1, #-24]	; 0xffffffe8
 8006c4c:	ed51 4a05 	vldr	s9, [r1, #-20]	; 0xffffffec
 8006c50:	ed11 5a04 	vldr	s10, [r1, #-16]
 8006c54:	ed51 5a03 	vldr	s11, [r1, #-12]
 8006c58:	ed11 6a02 	vldr	s12, [r1, #-8]
 8006c5c:	ed51 6a01 	vldr	s13, [r1, #-4]
 8006c60:	f006 070f 	and.w	r7, r6, #15
 8006c64:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8006c68:	edd7 7a00 	vldr	s15, [r7]
 8006c6c:	0936      	lsrs	r6, r6, #4
 8006c6e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8006c72:	ed96 3a00 	vldr	s6, [r6]
 8006c76:	ee67 7a82 	vmul.f32	s15, s15, s4
 8006c7a:	092e      	lsrs	r6, r5, #4
 8006c7c:	eee3 7a23 	vfma.f32	s15, s6, s7
 8006c80:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8006c84:	f005 050f 	and.w	r5, r5, #15
 8006c88:	edd6 3a00 	vldr	s7, [r6]
 8006c8c:	f810 6c02 	ldrb.w	r6, [r0, #-2]
 8006c90:	eee3 7a84 	vfma.f32	s15, s7, s8
 8006c94:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006c98:	0937      	lsrs	r7, r6, #4
 8006c9a:	ed95 4a00 	vldr	s8, [r5]
 8006c9e:	f810 5c01 	ldrb.w	r5, [r0, #-1]
 8006ca2:	eee4 7a24 	vfma.f32	s15, s8, s9
 8006ca6:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8006caa:	f006 060f 	and.w	r6, r6, #15
 8006cae:	edd7 4a00 	vldr	s9, [r7]
 8006cb2:	eee4 7a85 	vfma.f32	s15, s9, s10
 8006cb6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8006cba:	3004      	adds	r0, #4
 8006cbc:	ed96 5a00 	vldr	s10, [r6]
 8006cc0:	092e      	lsrs	r6, r5, #4
 8006cc2:	eee5 7a25 	vfma.f32	s15, s10, s11
 8006cc6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8006cca:	f005 050f 	and.w	r5, r5, #15
 8006cce:	edd6 5a00 	vldr	s11, [r6]
 8006cd2:	eee5 7a86 	vfma.f32	s15, s11, s12
 8006cd6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006cda:	4584      	cmp	ip, r0
 8006cdc:	ed95 6a00 	vldr	s12, [r5]
 8006ce0:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006ce4:	f101 0120 	add.w	r1, r1, #32
 8006ce8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006cec:	d1a4      	bne.n	8006c38 <forward_dense+0x360>
 8006cee:	f8dd e014 	ldr.w	lr, [sp, #20]
 8006cf2:	f1ac 0804 	sub.w	r8, ip, #4
 8006cf6:	9904      	ldr	r1, [sp, #16]
 8006cf8:	458e      	cmp	lr, r1
 8006cfa:	d22a      	bcs.n	8006d52 <forward_dense+0x47a>
 8006cfc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006cfe:	eba1 070e 	sub.w	r7, r1, lr
 8006d02:	ea4f 0ad7 	mov.w	sl, r7, lsr #3
 8006d06:	f10e 0008 	add.w	r0, lr, #8
 8006d0a:	f108 36ff 	add.w	r6, r8, #4294967295
 8006d0e:	eb08 07d7 	add.w	r7, r8, r7, lsr #3
 8006d12:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006d16:	ed50 5a01 	vldr	s11, [r0, #-4]
 8006d1a:	ed50 6a02 	vldr	s13, [r0, #-8]
 8006d1e:	f001 050f 	and.w	r5, r1, #15
 8006d22:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006d26:	edd5 7a00 	vldr	s15, [r5]
 8006d2a:	0909      	lsrs	r1, r1, #4
 8006d2c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8006d30:	ed91 6a00 	vldr	s12, [r1]
 8006d34:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8006d38:	42b7      	cmp	r7, r6
 8006d3a:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006d3e:	f100 0008 	add.w	r0, r0, #8
 8006d42:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006d46:	d1e4      	bne.n	8006d12 <forward_dense+0x43a>
 8006d48:	f10a 0a01 	add.w	sl, sl, #1
 8006d4c:	44d0      	add	r8, sl
 8006d4e:	eb0e 0eca 	add.w	lr, lr, sl, lsl #3
 8006d52:	9908      	ldr	r1, [sp, #32]
 8006d54:	b321      	cbz	r1, 8006da0 <forward_dense+0x4c8>
 8006d56:	f898 1000 	ldrb.w	r1, [r8]
 8006d5a:	edde 7a00 	vldr	s15, [lr]
 8006d5e:	0909      	lsrs	r1, r1, #4
 8006d60:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8006d64:	edd1 6a00 	vldr	s13, [r1]
 8006d68:	9903      	ldr	r1, [sp, #12]
 8006d6a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006d6e:	445a      	add	r2, fp
 8006d70:	44dc      	add	ip, fp
 8006d72:	ee72 2a87 	vadd.f32	s5, s5, s14
 8006d76:	ece1 2a01 	vstmia	r1!, {s5}
 8006d7a:	4589      	cmp	r9, r1
 8006d7c:	9103      	str	r1, [sp, #12]
 8006d7e:	f67f af12 	bls.w	8006ba6 <forward_dense+0x2ce>
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	f47f af4e 	bne.w	8006c24 <forward_dense+0x34c>
 8006d88:	9907      	ldr	r1, [sp, #28]
 8006d8a:	ed1f 7a62 	vldr	s14, [pc, #-392]	; 8006c04 <forward_dense+0x32c>
 8006d8e:	eef0 2a48 	vmov.f32	s5, s16
 8006d92:	2900      	cmp	r1, #0
 8006d94:	f47f af4e 	bne.w	8006c34 <forward_dense+0x35c>
 8006d98:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 8006d9c:	4690      	mov	r8, r2
 8006d9e:	e7aa      	b.n	8006cf6 <forward_dense+0x41e>
 8006da0:	9903      	ldr	r1, [sp, #12]
 8006da2:	ee32 7a87 	vadd.f32	s14, s5, s14
 8006da6:	445a      	add	r2, fp
 8006da8:	eca1 7a01 	vstmia	r1!, {s14}
 8006dac:	4549      	cmp	r1, r9
 8006dae:	9103      	str	r1, [sp, #12]
 8006db0:	44dc      	add	ip, fp
 8006db2:	f4ff af34 	bcc.w	8006c1e <forward_dense+0x346>
 8006db6:	e6f6      	b.n	8006ba6 <forward_dense+0x2ce>
 8006db8:	9912      	ldr	r1, [sp, #72]	; 0x48
 8006dba:	9d06      	ldr	r5, [sp, #24]
 8006dbc:	9101      	str	r1, [sp, #4]
 8006dbe:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006dc0:	9100      	str	r1, [sp, #0]
 8006dc2:	4628      	mov	r0, r5
 8006dc4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006dc6:	f000 fcb7 	bl	8007738 <forward_lite_dense_if32of32wf32>
 8006dca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006dcc:	462b      	mov	r3, r5
 8006dce:	4413      	add	r3, r2
 8006dd0:	9306      	str	r3, [sp, #24]
 8006dd2:	e6f1      	b.n	8006bb8 <forward_dense+0x2e0>
 8006dd4:	f8d1 800c 	ldr.w	r8, [r1, #12]
 8006dd8:	f1b9 0f00 	cmp.w	r9, #0
 8006ddc:	d016      	beq.n	8006e0c <forward_dense+0x534>
 8006dde:	e9d9 0100 	ldrd	r0, r1, [r9]
 8006de2:	f000 ff27 	bl	8007c34 <ai_array_get_byte_size>
 8006de6:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 8006dea:	4602      	mov	r2, r0
 8006dec:	4659      	mov	r1, fp
 8006dee:	4640      	mov	r0, r8
 8006df0:	f000 fdc6 	bl	8007980 <st_int8_copy>
 8006df4:	e5c7      	b.n	8006986 <forward_dense+0xae>
 8006df6:	2b04      	cmp	r3, #4
 8006df8:	d00a      	beq.n	8006e10 <forward_dense+0x538>
 8006dfa:	f04f 0900 	mov.w	r9, #0
 8006dfe:	e5bd      	b.n	800697c <forward_dense+0xa4>
 8006e00:	930d      	str	r3, [sp, #52]	; 0x34
 8006e02:	e595      	b.n	8006930 <forward_dense+0x58>
 8006e04:	2300      	movs	r3, #0
 8006e06:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e08:	460b      	mov	r3, r1
 8006e0a:	e591      	b.n	8006930 <forward_dense+0x58>
 8006e0c:	46c3      	mov	fp, r8
 8006e0e:	e5ba      	b.n	8006986 <forward_dense+0xae>
 8006e10:	f8d1 b00c 	ldr.w	fp, [r1, #12]
 8006e14:	e5b7      	b.n	8006986 <forward_dense+0xae>
 8006e16:	2300      	movs	r3, #0
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	deff      	udf	#255	; 0xff
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	deff      	udf	#255	; 0xff
 8006e22:	bf00      	nop

08006e24 <forward_concat>:
 8006e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e28:	ed2d 8b06 	vpush	{d8-d10}
 8006e2c:	6982      	ldr	r2, [r0, #24]
 8006e2e:	b085      	sub	sp, #20
 8006e30:	8813      	ldrh	r3, [r2, #0]
 8006e32:	9002      	str	r0, [sp, #8]
 8006e34:	b90b      	cbnz	r3, 8006e3a <forward_concat+0x16>
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	deff      	udf	#255	; 0xff
 8006e3a:	2b01      	cmp	r3, #1
 8006e3c:	6856      	ldr	r6, [r2, #4]
 8006e3e:	f000 8293 	beq.w	8007368 <forward_concat+0x544>
 8006e42:	6933      	ldr	r3, [r6, #16]
 8006e44:	9301      	str	r3, [sp, #4]
 8006e46:	b10b      	cbz	r3, 8006e4c <forward_concat+0x28>
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	9301      	str	r3, [sp, #4]
 8006e4c:	8834      	ldrh	r4, [r6, #0]
 8006e4e:	2300      	movs	r3, #0
 8006e50:	4621      	mov	r1, r4
 8006e52:	4618      	mov	r0, r3
 8006e54:	e00c      	b.n	8006e70 <forward_concat+0x4c>
 8006e56:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006e5a:	b172      	cbz	r2, 8006e7a <forward_concat+0x56>
 8006e5c:	6992      	ldr	r2, [r2, #24]
 8006e5e:	6812      	ldr	r2, [r2, #0]
 8006e60:	f3c2 4243 	ubfx	r2, r2, #17, #4
 8006e64:	2a01      	cmp	r2, #1
 8006e66:	bf0c      	ite	eq
 8006e68:	2201      	moveq	r2, #1
 8006e6a:	2202      	movne	r2, #2
 8006e6c:	3301      	adds	r3, #1
 8006e6e:	4310      	orrs	r0, r2
 8006e70:	429c      	cmp	r4, r3
 8006e72:	d002      	beq.n	8006e7a <forward_concat+0x56>
 8006e74:	6872      	ldr	r2, [r6, #4]
 8006e76:	2a00      	cmp	r2, #0
 8006e78:	d1ed      	bne.n	8006e56 <forward_concat+0x32>
 8006e7a:	9b01      	ldr	r3, [sp, #4]
 8006e7c:	699a      	ldr	r2, [r3, #24]
 8006e7e:	6813      	ldr	r3, [r2, #0]
 8006e80:	f8d2 b008 	ldr.w	fp, [r2, #8]
 8006e84:	f3c3 4243 	ubfx	r2, r3, #17, #4
 8006e88:	2a01      	cmp	r2, #1
 8006e8a:	d006      	beq.n	8006e9a <forward_concat+0x76>
 8006e8c:	2801      	cmp	r0, #1
 8006e8e:	d146      	bne.n	8006f1e <forward_concat+0xfa>
 8006e90:	b005      	add	sp, #20
 8006e92:	ecbd 8b06 	vpop	{d8-d10}
 8006e96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e9a:	2801      	cmp	r0, #1
 8006e9c:	d134      	bne.n	8006f08 <forward_concat+0xe4>
 8006e9e:	f04f 0800 	mov.w	r8, #0
 8006ea2:	4541      	cmp	r1, r8
 8006ea4:	d9f4      	bls.n	8006e90 <forward_concat+0x6c>
 8006ea6:	6873      	ldr	r3, [r6, #4]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d0f1      	beq.n	8006e90 <forward_concat+0x6c>
 8006eac:	f853 5028 	ldr.w	r5, [r3, r8, lsl #2]
 8006eb0:	2d00      	cmp	r5, #0
 8006eb2:	d0ed      	beq.n	8006e90 <forward_concat+0x6c>
 8006eb4:	69ab      	ldr	r3, [r5, #24]
 8006eb6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006eba:	f000 febb 	bl	8007c34 <ai_array_get_byte_size>
 8006ebe:	69ab      	ldr	r3, [r5, #24]
 8006ec0:	6969      	ldr	r1, [r5, #20]
 8006ec2:	689c      	ldr	r4, [r3, #8]
 8006ec4:	9b02      	ldr	r3, [sp, #8]
 8006ec6:	68ea      	ldr	r2, [r5, #12]
 8006ec8:	69db      	ldr	r3, [r3, #28]
 8006eca:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
 8006ece:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006ed2:	fb02 f905 	mul.w	r9, r2, r5
 8006ed6:	9a01      	ldr	r2, [sp, #4]
 8006ed8:	68d1      	ldr	r1, [r2, #12]
 8006eda:	1827      	adds	r7, r4, r0
 8006edc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006ee0:	42bc      	cmp	r4, r7
 8006ee2:	fb03 f505 	mul.w	r5, r3, r5
 8006ee6:	bf38      	it	cc
 8006ee8:	46da      	movcc	sl, fp
 8006eea:	d208      	bcs.n	8006efe <forward_concat+0xda>
 8006eec:	4651      	mov	r1, sl
 8006eee:	4620      	mov	r0, r4
 8006ef0:	464a      	mov	r2, r9
 8006ef2:	444c      	add	r4, r9
 8006ef4:	f000 fd44 	bl	8007980 <st_int8_copy>
 8006ef8:	42a7      	cmp	r7, r4
 8006efa:	44aa      	add	sl, r5
 8006efc:	d8f6      	bhi.n	8006eec <forward_concat+0xc8>
 8006efe:	8831      	ldrh	r1, [r6, #0]
 8006f00:	44cb      	add	fp, r9
 8006f02:	f108 0801 	add.w	r8, r8, #1
 8006f06:	e7cc      	b.n	8006ea2 <forward_concat+0x7e>
 8006f08:	0782      	lsls	r2, r0, #30
 8006f0a:	d4c1      	bmi.n	8006e90 <forward_concat+0x6c>
 8006f0c:	9a01      	ldr	r2, [sp, #4]
 8006f0e:	f8d2 8000 	ldr.w	r8, [r2]
 8006f12:	f1b8 0f00 	cmp.w	r8, #0
 8006f16:	d109      	bne.n	8006f2c <forward_concat+0x108>
 8006f18:	ed9f 8aba 	vldr	s16, [pc, #744]	; 8007204 <forward_concat+0x3e0>
 8006f1c:	e011      	b.n	8006f42 <forward_concat+0x11e>
 8006f1e:	9a01      	ldr	r2, [sp, #4]
 8006f20:	f8d2 8000 	ldr.w	r8, [r2]
 8006f24:	f1b8 0f00 	cmp.w	r8, #0
 8006f28:	f000 8216 	beq.w	8007358 <forward_concat+0x534>
 8006f2c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8006f30:	2a00      	cmp	r2, #0
 8006f32:	d0f1      	beq.n	8006f18 <forward_concat+0xf4>
 8006f34:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 8006f38:	2900      	cmp	r1, #0
 8006f3a:	d0ed      	beq.n	8006f18 <forward_concat+0xf4>
 8006f3c:	6812      	ldr	r2, [r2, #0]
 8006f3e:	ed92 8a00 	vldr	s16, [r2]
 8006f42:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006f46:	ee87 9a88 	vdiv.f32	s18, s15, s16
 8006f4a:	f3c3 53c0 	ubfx	r3, r3, #23, #1
 8006f4e:	9303      	str	r3, [sp, #12]
 8006f50:	4621      	mov	r1, r4
 8006f52:	4633      	mov	r3, r6
 8006f54:	2700      	movs	r7, #0
 8006f56:	4646      	mov	r6, r8
 8006f58:	4698      	mov	r8, r3
 8006f5a:	ed9f aaa8 	vldr	s20, [pc, #672]	; 80071fc <forward_concat+0x3d8>
 8006f5e:	eddf 8aa9 	vldr	s17, [pc, #676]	; 8007204 <forward_concat+0x3e0>
 8006f62:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
 8006f66:	42b9      	cmp	r1, r7
 8006f68:	d992      	bls.n	8006e90 <forward_concat+0x6c>
 8006f6a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d08e      	beq.n	8006e90 <forward_concat+0x6c>
 8006f72:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d08a      	beq.n	8006e90 <forward_concat+0x6c>
 8006f7a:	9a02      	ldr	r2, [sp, #8]
 8006f7c:	68d9      	ldr	r1, [r3, #12]
 8006f7e:	69d4      	ldr	r4, [r2, #28]
 8006f80:	9a01      	ldr	r2, [sp, #4]
 8006f82:	f851 5024 	ldr.w	r5, [r1, r4, lsl #2]
 8006f86:	68d2      	ldr	r2, [r2, #12]
 8006f88:	6958      	ldr	r0, [r3, #20]
 8006f8a:	f852 1024 	ldr.w	r1, [r2, r4, lsl #2]
 8006f8e:	699a      	ldr	r2, [r3, #24]
 8006f90:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8006f94:	f8d2 9000 	ldr.w	r9, [r2]
 8006f98:	9300      	str	r3, [sp, #0]
 8006f9a:	fb01 fa00 	mul.w	sl, r1, r0
 8006f9e:	fb00 f505 	mul.w	r5, r0, r5
 8006fa2:	e9d2 1401 	ldrd	r1, r4, [r2, #4]
 8006fa6:	4648      	mov	r0, r9
 8006fa8:	f000 fe44 	bl	8007c34 <ai_array_get_byte_size>
 8006fac:	f3c9 4243 	ubfx	r2, r9, #17, #4
 8006fb0:	2a01      	cmp	r2, #1
 8006fb2:	9b00      	ldr	r3, [sp, #0]
 8006fb4:	eb04 0900 	add.w	r9, r4, r0
 8006fb8:	d079      	beq.n	80070ae <forward_concat+0x28a>
 8006fba:	6818      	ldr	r0, [r3, #0]
 8006fbc:	2800      	cmp	r0, #0
 8006fbe:	f000 8118 	beq.w	80071f2 <forward_concat+0x3ce>
 8006fc2:	6841      	ldr	r1, [r0, #4]
 8006fc4:	2900      	cmp	r1, #0
 8006fc6:	f000 8166 	beq.w	8007296 <forward_concat+0x472>
 8006fca:	8842      	ldrh	r2, [r0, #2]
 8006fcc:	2a00      	cmp	r2, #0
 8006fce:	f000 815f 	beq.w	8007290 <forward_concat+0x46c>
 8006fd2:	680b      	ldr	r3, [r1, #0]
 8006fd4:	edd3 6a00 	vldr	s13, [r3]
 8006fd8:	684b      	ldr	r3, [r1, #4]
 8006fda:	f993 2000 	ldrsb.w	r2, [r3]
 8006fde:	2e00      	cmp	r6, #0
 8006fe0:	f000 8105 	beq.w	80071ee <forward_concat+0x3ca>
 8006fe4:	6871      	ldr	r1, [r6, #4]
 8006fe6:	2900      	cmp	r1, #0
 8006fe8:	f000 8159 	beq.w	800729e <forward_concat+0x47a>
 8006fec:	8873      	ldrh	r3, [r6, #2]
 8006fee:	b113      	cbz	r3, 8006ff6 <forward_concat+0x1d2>
 8006ff0:	684b      	ldr	r3, [r1, #4]
 8006ff2:	f993 3000 	ldrsb.w	r3, [r3]
 8006ff6:	eeb4 8a66 	vcmp.f32	s16, s13
 8006ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ffe:	d102      	bne.n	8007006 <forward_concat+0x1e2>
 8007000:	429a      	cmp	r2, r3
 8007002:	f000 818b 	beq.w	800731c <forward_concat+0x4f8>
 8007006:	9b03      	ldr	r3, [sp, #12]
 8007008:	2b00      	cmp	r3, #0
 800700a:	f040 809a 	bne.w	8007142 <forward_concat+0x31e>
 800700e:	2800      	cmp	r0, #0
 8007010:	f000 8150 	beq.w	80072b4 <forward_concat+0x490>
 8007014:	6843      	ldr	r3, [r0, #4]
 8007016:	2b00      	cmp	r3, #0
 8007018:	f000 8143 	beq.w	80072a2 <forward_concat+0x47e>
 800701c:	8842      	ldrh	r2, [r0, #2]
 800701e:	2a00      	cmp	r2, #0
 8007020:	f000 813f 	beq.w	80072a2 <forward_concat+0x47e>
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	7819      	ldrb	r1, [r3, #0]
 8007028:	2e00      	cmp	r6, #0
 800702a:	f000 813e 	beq.w	80072aa <forward_concat+0x486>
 800702e:	6872      	ldr	r2, [r6, #4]
 8007030:	2a00      	cmp	r2, #0
 8007032:	f000 816d 	beq.w	8007310 <forward_concat+0x4ec>
 8007036:	8873      	ldrh	r3, [r6, #2]
 8007038:	b10b      	cbz	r3, 800703e <forward_concat+0x21a>
 800703a:	6853      	ldr	r3, [r2, #4]
 800703c:	781b      	ldrb	r3, [r3, #0]
 800703e:	eeb4 8a66 	vcmp.f32	s16, s13
 8007042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007046:	d102      	bne.n	800704e <forward_concat+0x22a>
 8007048:	4299      	cmp	r1, r3
 800704a:	f000 814c 	beq.w	80072e6 <forward_concat+0x4c2>
 800704e:	454c      	cmp	r4, r9
 8007050:	ee66 6a89 	vmul.f32	s13, s13, s18
 8007054:	f080 80c7 	bcs.w	80071e6 <forward_concat+0x3c2>
 8007058:	2d00      	cmp	r5, #0
 800705a:	f340 80c4 	ble.w	80071e6 <forward_concat+0x3c2>
 800705e:	ee07 3a90 	vmov	s15, r3
 8007062:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8007066:	1960      	adds	r0, r4, r5
 8007068:	ee36 6a29 	vadd.f32	s12, s12, s19
 800706c:	4602      	mov	r2, r0
 800706e:	46dc      	mov	ip, fp
 8007070:	46e6      	mov	lr, ip
 8007072:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007076:	1a5b      	subs	r3, r3, r1
 8007078:	ee07 3a90 	vmov	s15, r3
 800707c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007080:	eeb0 7a46 	vmov.f32	s14, s12
 8007084:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8007088:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 800708c:	ee17 3a90 	vmov	r3, s15
 8007090:	f383 0308 	usat	r3, #8, r3
 8007094:	4294      	cmp	r4, r2
 8007096:	f80e 3b01 	strb.w	r3, [lr], #1
 800709a:	d1ea      	bne.n	8007072 <forward_concat+0x24e>
 800709c:	4548      	cmp	r0, r9
 800709e:	eb04 0205 	add.w	r2, r4, r5
 80070a2:	44d4      	add	ip, sl
 80070a4:	4604      	mov	r4, r0
 80070a6:	f080 809e 	bcs.w	80071e6 <forward_concat+0x3c2>
 80070aa:	4428      	add	r0, r5
 80070ac:	e7e0      	b.n	8007070 <forward_concat+0x24c>
 80070ae:	2d00      	cmp	r5, #0
 80070b0:	9b03      	ldr	r3, [sp, #12]
 80070b2:	4629      	mov	r1, r5
 80070b4:	bfb8      	it	lt
 80070b6:	1ce9      	addlt	r1, r5, #3
 80070b8:	1089      	asrs	r1, r1, #2
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	f040 80a4 	bne.w	8007208 <forward_concat+0x3e4>
 80070c0:	2e00      	cmp	r6, #0
 80070c2:	f000 80f4 	beq.w	80072ae <forward_concat+0x48a>
 80070c6:	6873      	ldr	r3, [r6, #4]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	f000 80f0 	beq.w	80072ae <forward_concat+0x48a>
 80070ce:	8872      	ldrh	r2, [r6, #2]
 80070d0:	2a00      	cmp	r2, #0
 80070d2:	f000 80ec 	beq.w	80072ae <forward_concat+0x48a>
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	ee06 3a90 	vmov	s13, r3
 80070de:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80070e2:	ee76 6aa9 	vadd.f32	s13, s13, s19
 80070e6:	454c      	cmp	r4, r9
 80070e8:	d226      	bcs.n	8007138 <forward_concat+0x314>
 80070ea:	2d03      	cmp	r5, #3
 80070ec:	ebaa 0a01 	sub.w	sl, sl, r1
 80070f0:	bfc8      	it	gt
 80070f2:	46de      	movgt	lr, fp
 80070f4:	dd20      	ble.n	8007138 <forward_concat+0x314>
 80070f6:	46f4      	mov	ip, lr
 80070f8:	4620      	mov	r0, r4
 80070fa:	2200      	movs	r2, #0
 80070fc:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007100:	ee07 3a10 	vmov	s14, r3
 8007104:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007108:	eef0 7a66 	vmov.f32	s15, s13
 800710c:	eee7 7a09 	vfma.f32	s15, s14, s18
 8007110:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007114:	ee17 3a90 	vmov	r3, s15
 8007118:	f383 0308 	usat	r3, #8, r3
 800711c:	3201      	adds	r2, #1
 800711e:	4291      	cmp	r1, r2
 8007120:	f80c 3b01 	strb.w	r3, [ip], #1
 8007124:	dcea      	bgt.n	80070fc <forward_concat+0x2d8>
 8007126:	2d03      	cmp	r5, #3
 8007128:	bfcc      	ite	gt
 800712a:	460b      	movgt	r3, r1
 800712c:	2301      	movle	r3, #1
 800712e:	441c      	add	r4, r3
 8007130:	45a1      	cmp	r9, r4
 8007132:	4453      	add	r3, sl
 8007134:	449e      	add	lr, r3
 8007136:	d8de      	bhi.n	80070f6 <forward_concat+0x2d2>
 8007138:	448b      	add	fp, r1
 800713a:	f8b8 1000 	ldrh.w	r1, [r8]
 800713e:	3701      	adds	r7, #1
 8007140:	e711      	b.n	8006f66 <forward_concat+0x142>
 8007142:	b140      	cbz	r0, 8007156 <forward_concat+0x332>
 8007144:	6843      	ldr	r3, [r0, #4]
 8007146:	2b00      	cmp	r3, #0
 8007148:	f000 80e4 	beq.w	8007314 <forward_concat+0x4f0>
 800714c:	8840      	ldrh	r0, [r0, #2]
 800714e:	b110      	cbz	r0, 8007156 <forward_concat+0x332>
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	f993 0000 	ldrsb.w	r0, [r3]
 8007156:	2e00      	cmp	r6, #0
 8007158:	f000 80ae 	beq.w	80072b8 <forward_concat+0x494>
 800715c:	6872      	ldr	r2, [r6, #4]
 800715e:	2a00      	cmp	r2, #0
 8007160:	f000 80da 	beq.w	8007318 <forward_concat+0x4f4>
 8007164:	8873      	ldrh	r3, [r6, #2]
 8007166:	b113      	cbz	r3, 800716e <forward_concat+0x34a>
 8007168:	6853      	ldr	r3, [r2, #4]
 800716a:	f993 3000 	ldrsb.w	r3, [r3]
 800716e:	eeb4 8a66 	vcmp.f32	s16, s13
 8007172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007176:	d102      	bne.n	800717e <forward_concat+0x35a>
 8007178:	4298      	cmp	r0, r3
 800717a:	f000 809f 	beq.w	80072bc <forward_concat+0x498>
 800717e:	454c      	cmp	r4, r9
 8007180:	ee66 6a89 	vmul.f32	s13, s13, s18
 8007184:	d22f      	bcs.n	80071e6 <forward_concat+0x3c2>
 8007186:	2d00      	cmp	r5, #0
 8007188:	dd2d      	ble.n	80071e6 <forward_concat+0x3c2>
 800718a:	ee07 3a90 	vmov	s15, r3
 800718e:	eb0b 0e05 	add.w	lr, fp, r5
 8007192:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8007196:	46f4      	mov	ip, lr
 8007198:	465a      	mov	r2, fp
 800719a:	4621      	mov	r1, r4
 800719c:	f911 3b01 	ldrsb.w	r3, [r1], #1
 80071a0:	1a1b      	subs	r3, r3, r0
 80071a2:	ee07 3a90 	vmov	s15, r3
 80071a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80071aa:	eef0 7a46 	vmov.f32	s15, s12
 80071ae:	eee7 7a26 	vfma.f32	s15, s14, s13
 80071b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80071b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071ba:	bf4c      	ite	mi
 80071bc:	ee77 7aca 	vsubmi.f32	s15, s15, s20
 80071c0:	ee77 7aa9 	vaddpl.f32	s15, s15, s19
 80071c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80071c8:	ee17 3a90 	vmov	r3, s15
 80071cc:	f303 0307 	ssat	r3, #8, r3
 80071d0:	f802 3b01 	strb.w	r3, [r2], #1
 80071d4:	4562      	cmp	r2, ip
 80071d6:	d1e1      	bne.n	800719c <forward_concat+0x378>
 80071d8:	442c      	add	r4, r5
 80071da:	454c      	cmp	r4, r9
 80071dc:	44d3      	add	fp, sl
 80071de:	44d4      	add	ip, sl
 80071e0:	d3da      	bcc.n	8007198 <forward_concat+0x374>
 80071e2:	46f3      	mov	fp, lr
 80071e4:	e7a9      	b.n	800713a <forward_concat+0x316>
 80071e6:	eb0b 0e05 	add.w	lr, fp, r5
 80071ea:	46f3      	mov	fp, lr
 80071ec:	e7a5      	b.n	800713a <forward_concat+0x316>
 80071ee:	4633      	mov	r3, r6
 80071f0:	e701      	b.n	8006ff6 <forward_concat+0x1d2>
 80071f2:	eef0 6a68 	vmov.f32	s13, s17
 80071f6:	4602      	mov	r2, r0
 80071f8:	e6f1      	b.n	8006fde <forward_concat+0x1ba>
 80071fa:	bf00      	nop
 80071fc:	3efffffc 	.word	0x3efffffc
 8007200:	7f800000 	.word	0x7f800000
 8007204:	00000000 	.word	0x00000000
 8007208:	2e00      	cmp	r6, #0
 800720a:	f000 809c 	beq.w	8007346 <forward_concat+0x522>
 800720e:	6873      	ldr	r3, [r6, #4]
 8007210:	2b00      	cmp	r3, #0
 8007212:	f000 809e 	beq.w	8007352 <forward_concat+0x52e>
 8007216:	8872      	ldrh	r2, [r6, #2]
 8007218:	2a00      	cmp	r2, #0
 800721a:	f000 8097 	beq.w	800734c <forward_concat+0x528>
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	f993 3000 	ldrsb.w	r3, [r3]
 8007224:	ee06 3a90 	vmov	s13, r3
 8007228:	454c      	cmp	r4, r9
 800722a:	d285      	bcs.n	8007138 <forward_concat+0x314>
 800722c:	2d03      	cmp	r5, #3
 800722e:	ebaa 0a01 	sub.w	sl, sl, r1
 8007232:	dd81      	ble.n	8007138 <forward_concat+0x314>
 8007234:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8007238:	46de      	mov	lr, fp
 800723a:	46f4      	mov	ip, lr
 800723c:	4620      	mov	r0, r4
 800723e:	2200      	movs	r2, #0
 8007240:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007244:	ee07 3a10 	vmov	s14, r3
 8007248:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800724c:	eef0 7a66 	vmov.f32	s15, s13
 8007250:	eee7 7a09 	vfma.f32	s15, s14, s18
 8007254:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800725c:	bf4c      	ite	mi
 800725e:	ee77 7aca 	vsubmi.f32	s15, s15, s20
 8007262:	ee77 7aa9 	vaddpl.f32	s15, s15, s19
 8007266:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800726a:	ee17 3a90 	vmov	r3, s15
 800726e:	f303 0307 	ssat	r3, #8, r3
 8007272:	3201      	adds	r2, #1
 8007274:	4291      	cmp	r1, r2
 8007276:	f80c 3b01 	strb.w	r3, [ip], #1
 800727a:	dce1      	bgt.n	8007240 <forward_concat+0x41c>
 800727c:	2d03      	cmp	r5, #3
 800727e:	bfcc      	ite	gt
 8007280:	460b      	movgt	r3, r1
 8007282:	2301      	movle	r3, #1
 8007284:	441c      	add	r4, r3
 8007286:	45a1      	cmp	r9, r4
 8007288:	4453      	add	r3, sl
 800728a:	449e      	add	lr, r3
 800728c:	d8d5      	bhi.n	800723a <forward_concat+0x416>
 800728e:	e753      	b.n	8007138 <forward_concat+0x314>
 8007290:	eef0 6a68 	vmov.f32	s13, s17
 8007294:	e6a3      	b.n	8006fde <forward_concat+0x1ba>
 8007296:	eef0 6a68 	vmov.f32	s13, s17
 800729a:	460a      	mov	r2, r1
 800729c:	e69f      	b.n	8006fde <forward_concat+0x1ba>
 800729e:	460b      	mov	r3, r1
 80072a0:	e6a9      	b.n	8006ff6 <forward_concat+0x1d2>
 80072a2:	9903      	ldr	r1, [sp, #12]
 80072a4:	2e00      	cmp	r6, #0
 80072a6:	f47f aec2 	bne.w	800702e <forward_concat+0x20a>
 80072aa:	4633      	mov	r3, r6
 80072ac:	e6c7      	b.n	800703e <forward_concat+0x21a>
 80072ae:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80072b2:	e718      	b.n	80070e6 <forward_concat+0x2c2>
 80072b4:	4619      	mov	r1, r3
 80072b6:	e6b7      	b.n	8007028 <forward_concat+0x204>
 80072b8:	4633      	mov	r3, r6
 80072ba:	e758      	b.n	800716e <forward_concat+0x34a>
 80072bc:	454c      	cmp	r4, r9
 80072be:	d292      	bcs.n	80071e6 <forward_concat+0x3c2>
 80072c0:	9600      	str	r6, [sp, #0]
 80072c2:	462e      	mov	r6, r5
 80072c4:	464d      	mov	r5, r9
 80072c6:	46d9      	mov	r9, fp
 80072c8:	4649      	mov	r1, r9
 80072ca:	4620      	mov	r0, r4
 80072cc:	4632      	mov	r2, r6
 80072ce:	4434      	add	r4, r6
 80072d0:	f000 fb56 	bl	8007980 <st_int8_copy>
 80072d4:	42a5      	cmp	r5, r4
 80072d6:	44d1      	add	r9, sl
 80072d8:	d8f6      	bhi.n	80072c8 <forward_concat+0x4a4>
 80072da:	4635      	mov	r5, r6
 80072dc:	9e00      	ldr	r6, [sp, #0]
 80072de:	eb0b 0e05 	add.w	lr, fp, r5
 80072e2:	46f3      	mov	fp, lr
 80072e4:	e729      	b.n	800713a <forward_concat+0x316>
 80072e6:	454c      	cmp	r4, r9
 80072e8:	f4bf af7d 	bcs.w	80071e6 <forward_concat+0x3c2>
 80072ec:	9600      	str	r6, [sp, #0]
 80072ee:	462e      	mov	r6, r5
 80072f0:	464d      	mov	r5, r9
 80072f2:	46d9      	mov	r9, fp
 80072f4:	4649      	mov	r1, r9
 80072f6:	4620      	mov	r0, r4
 80072f8:	4632      	mov	r2, r6
 80072fa:	4434      	add	r4, r6
 80072fc:	f000 fb40 	bl	8007980 <st_int8_copy>
 8007300:	42a5      	cmp	r5, r4
 8007302:	44d1      	add	r9, sl
 8007304:	d8f6      	bhi.n	80072f4 <forward_concat+0x4d0>
 8007306:	4635      	mov	r5, r6
 8007308:	eb0b 0e05 	add.w	lr, fp, r5
 800730c:	9e00      	ldr	r6, [sp, #0]
 800730e:	e7e8      	b.n	80072e2 <forward_concat+0x4be>
 8007310:	4613      	mov	r3, r2
 8007312:	e694      	b.n	800703e <forward_concat+0x21a>
 8007314:	4618      	mov	r0, r3
 8007316:	e71e      	b.n	8007156 <forward_concat+0x332>
 8007318:	4613      	mov	r3, r2
 800731a:	e728      	b.n	800716e <forward_concat+0x34a>
 800731c:	454c      	cmp	r4, r9
 800731e:	f4bf af62 	bcs.w	80071e6 <forward_concat+0x3c2>
 8007322:	9600      	str	r6, [sp, #0]
 8007324:	462e      	mov	r6, r5
 8007326:	464d      	mov	r5, r9
 8007328:	46d9      	mov	r9, fp
 800732a:	4649      	mov	r1, r9
 800732c:	4620      	mov	r0, r4
 800732e:	4632      	mov	r2, r6
 8007330:	4434      	add	r4, r6
 8007332:	f000 fb25 	bl	8007980 <st_int8_copy>
 8007336:	42a5      	cmp	r5, r4
 8007338:	44d1      	add	r9, sl
 800733a:	d8f6      	bhi.n	800732a <forward_concat+0x506>
 800733c:	4635      	mov	r5, r6
 800733e:	eb0b 0e05 	add.w	lr, fp, r5
 8007342:	9e00      	ldr	r6, [sp, #0]
 8007344:	e7cd      	b.n	80072e2 <forward_concat+0x4be>
 8007346:	ee06 6a90 	vmov	s13, r6
 800734a:	e76d      	b.n	8007228 <forward_concat+0x404>
 800734c:	ee06 2a90 	vmov	s13, r2
 8007350:	e76a      	b.n	8007228 <forward_concat+0x404>
 8007352:	ee06 3a90 	vmov	s13, r3
 8007356:	e767      	b.n	8007228 <forward_concat+0x404>
 8007358:	f3c3 53c0 	ubfx	r3, r3, #23, #1
 800735c:	ed1f 9a58 	vldr	s18, [pc, #-352]	; 8007200 <forward_concat+0x3dc>
 8007360:	ed1f 8a58 	vldr	s16, [pc, #-352]	; 8007204 <forward_concat+0x3e0>
 8007364:	9303      	str	r3, [sp, #12]
 8007366:	e5f4      	b.n	8006f52 <forward_concat+0x12e>
 8007368:	2300      	movs	r3, #0
 800736a:	e564      	b.n	8006e36 <forward_concat+0x12>

0800736c <forward_eltwise>:
 800736c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007370:	6982      	ldr	r2, [r0, #24]
 8007372:	b09d      	sub	sp, #116	; 0x74
 8007374:	8811      	ldrh	r1, [r2, #0]
 8007376:	9003      	str	r0, [sp, #12]
 8007378:	2900      	cmp	r1, #0
 800737a:	f000 80c7 	beq.w	800750c <forward_eltwise+0x1a0>
 800737e:	6853      	ldr	r3, [r2, #4]
 8007380:	2b00      	cmp	r3, #0
 8007382:	f000 810f 	beq.w	80075a4 <forward_eltwise+0x238>
 8007386:	881d      	ldrh	r5, [r3, #0]
 8007388:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800738c:	f1b8 0f00 	cmp.w	r8, #0
 8007390:	d001      	beq.n	8007396 <forward_eltwise+0x2a>
 8007392:	f8d8 8000 	ldr.w	r8, [r8]
 8007396:	2901      	cmp	r1, #1
 8007398:	f000 8108 	beq.w	80075ac <forward_eltwise+0x240>
 800739c:	691b      	ldr	r3, [r3, #16]
 800739e:	9300      	str	r3, [sp, #0]
 80073a0:	b10b      	cbz	r3, 80073a6 <forward_eltwise+0x3a>
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	9300      	str	r3, [sp, #0]
 80073a6:	2300      	movs	r3, #0
 80073a8:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 80073ac:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
 80073b0:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
 80073b4:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
 80073b8:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
 80073bc:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
 80073c0:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
 80073c4:	931b      	str	r3, [sp, #108]	; 0x6c
 80073c6:	f240 5302 	movw	r3, #1282	; 0x502
 80073ca:	9307      	str	r3, [sp, #28]
 80073cc:	9309      	str	r3, [sp, #36]	; 0x24
 80073ce:	f240 5301 	movw	r3, #1281	; 0x501
 80073d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80073d4:	9b03      	ldr	r3, [sp, #12]
 80073d6:	e9d3 7307 	ldrd	r7, r3, [r3, #28]
 80073da:	ac0d      	add	r4, sp, #52	; 0x34
 80073dc:	a812      	add	r0, sp, #72	; 0x48
 80073de:	a917      	add	r1, sp, #92	; 0x5c
 80073e0:	2d01      	cmp	r5, #1
 80073e2:	9408      	str	r4, [sp, #32]
 80073e4:	900a      	str	r0, [sp, #40]	; 0x28
 80073e6:	910c      	str	r1, [sp, #48]	; 0x30
 80073e8:	9304      	str	r3, [sp, #16]
 80073ea:	f240 80d8 	bls.w	800759e <forward_eltwise+0x232>
 80073ee:	00ab      	lsls	r3, r5, #2
 80073f0:	9305      	str	r3, [sp, #20]
 80073f2:	2304      	movs	r3, #4
 80073f4:	9301      	str	r3, [sp, #4]
 80073f6:	8813      	ldrh	r3, [r2, #0]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	f000 80da 	beq.w	80075b2 <forward_eltwise+0x246>
 80073fe:	6853      	ldr	r3, [r2, #4]
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	2b00      	cmp	r3, #0
 8007404:	f000 80d0 	beq.w	80075a8 <forward_eltwise+0x23c>
 8007408:	9a01      	ldr	r2, [sp, #4]
 800740a:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800740e:	f853 a002 	ldr.w	sl, [r3, r2]
 8007412:	f8da 3008 	ldr.w	r3, [sl, #8]
 8007416:	4043      	eors	r3, r0
 8007418:	f033 03ff 	bics.w	r3, r3, #255	; 0xff
 800741c:	f108 0108 	add.w	r1, r8, #8
 8007420:	f10a 0908 	add.w	r9, sl, #8
 8007424:	d10f      	bne.n	8007446 <forward_eltwise+0xda>
 8007426:	f3c0 2017 	ubfx	r0, r0, #8, #24
 800742a:	2800      	cmp	r0, #0
 800742c:	f000 8095 	beq.w	800755a <forward_eltwise+0x1ee>
 8007430:	3801      	subs	r0, #1
 8007432:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8007436:	f8da 300c 	ldr.w	r3, [sl, #12]
 800743a:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 800743e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007442:	429a      	cmp	r2, r3
 8007444:	d0f1      	beq.n	800742a <forward_eltwise+0xbe>
 8007446:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800744a:	9102      	str	r1, [sp, #8]
 800744c:	689d      	ldr	r5, [r3, #8]
 800744e:	f8da 3018 	ldr.w	r3, [sl, #24]
 8007452:	689c      	ldr	r4, [r3, #8]
 8007454:	9b00      	ldr	r3, [sp, #0]
 8007456:	699b      	ldr	r3, [r3, #24]
 8007458:	464a      	mov	r2, r9
 800745a:	a80b      	add	r0, sp, #44	; 0x2c
 800745c:	689e      	ldr	r6, [r3, #8]
 800745e:	f000 fc41 	bl	8007ce4 <core_get_broadcasted_shape>
 8007462:	f8da 2014 	ldr.w	r2, [sl, #20]
 8007466:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800746a:	f8d2 a004 	ldr.w	sl, [r2, #4]
 800746e:	9a00      	ldr	r2, [sp, #0]
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	6952      	ldr	r2, [r2, #20]
 8007474:	9902      	ldr	r1, [sp, #8]
 8007476:	f8d2 8004 	ldr.w	r8, [r2, #4]
 800747a:	a807      	add	r0, sp, #28
 800747c:	aa0b      	add	r2, sp, #44	; 0x2c
 800747e:	f000 fc5d 	bl	8007d3c <core_compute_offsets>
 8007482:	4653      	mov	r3, sl
 8007484:	aa0b      	add	r2, sp, #44	; 0x2c
 8007486:	4649      	mov	r1, r9
 8007488:	a809      	add	r0, sp, #36	; 0x24
 800748a:	f000 fc57 	bl	8007d3c <core_compute_offsets>
 800748e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007490:	68d3      	ldr	r3, [r2, #12]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d056      	beq.n	8007544 <forward_eltwise+0x1d8>
 8007496:	2300      	movs	r3, #0
 8007498:	6890      	ldr	r0, [r2, #8]
 800749a:	9302      	str	r3, [sp, #8]
 800749c:	2800      	cmp	r0, #0
 800749e:	d051      	beq.n	8007544 <forward_eltwise+0x1d8>
 80074a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80074a2:	f04f 0b00 	mov.w	fp, #0
 80074a6:	f3c1 2117 	ubfx	r1, r1, #8, #24
 80074aa:	f04f 0a00 	mov.w	sl, #0
 80074ae:	2904      	cmp	r1, #4
 80074b0:	bf8c      	ite	hi
 80074b2:	6913      	ldrhi	r3, [r2, #16]
 80074b4:	2301      	movls	r3, #1
 80074b6:	459a      	cmp	sl, r3
 80074b8:	d22a      	bcs.n	8007510 <forward_eltwise+0x1a4>
 80074ba:	6850      	ldr	r0, [r2, #4]
 80074bc:	f04f 0900 	mov.w	r9, #0
 80074c0:	b198      	cbz	r0, 80074ea <forward_eltwise+0x17e>
 80074c2:	4622      	mov	r2, r4
 80074c4:	4629      	mov	r1, r5
 80074c6:	4630      	mov	r0, r6
 80074c8:	47b8      	blx	r7
 80074ca:	9b08      	ldr	r3, [sp, #32]
 80074cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80074ce:	685b      	ldr	r3, [r3, #4]
 80074d0:	441d      	add	r5, r3
 80074d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	441c      	add	r4, r3
 80074d8:	6853      	ldr	r3, [r2, #4]
 80074da:	f109 0901 	add.w	r9, r9, #1
 80074de:	454b      	cmp	r3, r9
 80074e0:	4446      	add	r6, r8
 80074e2:	d8ee      	bhi.n	80074c2 <forward_eltwise+0x156>
 80074e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074e6:	f3c3 2117 	ubfx	r1, r3, #8, #24
 80074ea:	9807      	ldr	r0, [sp, #28]
 80074ec:	f5b0 6fa0 	cmp.w	r0, #1280	; 0x500
 80074f0:	d302      	bcc.n	80074f8 <forward_eltwise+0x18c>
 80074f2:	9808      	ldr	r0, [sp, #32]
 80074f4:	6903      	ldr	r3, [r0, #16]
 80074f6:	441d      	add	r5, r3
 80074f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80074fa:	f5b0 6fa0 	cmp.w	r0, #1280	; 0x500
 80074fe:	d302      	bcc.n	8007506 <forward_eltwise+0x19a>
 8007500:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007502:	6903      	ldr	r3, [r0, #16]
 8007504:	441c      	add	r4, r3
 8007506:	f10a 0a01 	add.w	sl, sl, #1
 800750a:	e7d0      	b.n	80074ae <forward_eltwise+0x142>
 800750c:	684b      	ldr	r3, [r1, #4]
 800750e:	deff      	udf	#255	; 0xff
 8007510:	9b08      	ldr	r3, [sp, #32]
 8007512:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 8007516:	6898      	ldr	r0, [r3, #8]
 8007518:	4405      	add	r5, r0
 800751a:	f8dc 0008 	ldr.w	r0, [ip, #8]
 800751e:	4404      	add	r4, r0
 8007520:	6890      	ldr	r0, [r2, #8]
 8007522:	f10b 0b01 	add.w	fp, fp, #1
 8007526:	4558      	cmp	r0, fp
 8007528:	d8bf      	bhi.n	80074aa <forward_eltwise+0x13e>
 800752a:	68d9      	ldr	r1, [r3, #12]
 800752c:	469e      	mov	lr, r3
 800752e:	f8dc 300c 	ldr.w	r3, [ip, #12]
 8007532:	441c      	add	r4, r3
 8007534:	9b02      	ldr	r3, [sp, #8]
 8007536:	3301      	adds	r3, #1
 8007538:	440d      	add	r5, r1
 800753a:	9302      	str	r3, [sp, #8]
 800753c:	4619      	mov	r1, r3
 800753e:	68d3      	ldr	r3, [r2, #12]
 8007540:	428b      	cmp	r3, r1
 8007542:	d8ab      	bhi.n	800749c <forward_eltwise+0x130>
 8007544:	9b01      	ldr	r3, [sp, #4]
 8007546:	9a05      	ldr	r2, [sp, #20]
 8007548:	3304      	adds	r3, #4
 800754a:	4293      	cmp	r3, r2
 800754c:	9301      	str	r3, [sp, #4]
 800754e:	d026      	beq.n	800759e <forward_eltwise+0x232>
 8007550:	9b03      	ldr	r3, [sp, #12]
 8007552:	f8dd 8000 	ldr.w	r8, [sp]
 8007556:	699a      	ldr	r2, [r3, #24]
 8007558:	e74d      	b.n	80073f6 <forward_eltwise+0x8a>
 800755a:	9b00      	ldr	r3, [sp, #0]
 800755c:	f8da 0018 	ldr.w	r0, [sl, #24]
 8007560:	699b      	ldr	r3, [r3, #24]
 8007562:	f8d8 4018 	ldr.w	r4, [r8, #24]
 8007566:	6885      	ldr	r5, [r0, #8]
 8007568:	689e      	ldr	r6, [r3, #8]
 800756a:	68a4      	ldr	r4, [r4, #8]
 800756c:	464a      	mov	r2, r9
 800756e:	a80b      	add	r0, sp, #44	; 0x2c
 8007570:	f000 fbb8 	bl	8007ce4 <core_get_broadcasted_shape>
 8007574:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007576:	0a1b      	lsrs	r3, r3, #8
 8007578:	bf08      	it	eq
 800757a:	2301      	moveq	r3, #1
 800757c:	d009      	beq.n	8007592 <forward_eltwise+0x226>
 800757e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007580:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 8007584:	2301      	movs	r3, #1
 8007586:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800758a:	4290      	cmp	r0, r2
 800758c:	fb01 f303 	mul.w	r3, r1, r3
 8007590:	d1f9      	bne.n	8007586 <forward_eltwise+0x21a>
 8007592:	4621      	mov	r1, r4
 8007594:	462a      	mov	r2, r5
 8007596:	9c04      	ldr	r4, [sp, #16]
 8007598:	4630      	mov	r0, r6
 800759a:	47a0      	blx	r4
 800759c:	e7d2      	b.n	8007544 <forward_eltwise+0x1d8>
 800759e:	b01d      	add	sp, #116	; 0x74
 80075a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075a4:	461d      	mov	r5, r3
 80075a6:	e6ef      	b.n	8007388 <forward_eltwise+0x1c>
 80075a8:	689b      	ldr	r3, [r3, #8]
 80075aa:	deff      	udf	#255	; 0xff
 80075ac:	2300      	movs	r3, #0
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	deff      	udf	#255	; 0xff
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	deff      	udf	#255	; 0xff
 80075b6:	bf00      	nop

080075b8 <forward_elu>:
 80075b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075ba:	ed2d 8b04 	vpush	{d8-d9}
 80075be:	6982      	ldr	r2, [r0, #24]
 80075c0:	8813      	ldrh	r3, [r2, #0]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d051      	beq.n	800766a <forward_elu+0xb2>
 80075c6:	6851      	ldr	r1, [r2, #4]
 80075c8:	684a      	ldr	r2, [r1, #4]
 80075ca:	b102      	cbz	r2, 80075ce <forward_elu+0x16>
 80075cc:	6812      	ldr	r2, [r2, #0]
 80075ce:	2b01      	cmp	r3, #1
 80075d0:	d04a      	beq.n	8007668 <forward_elu+0xb0>
 80075d2:	690b      	ldr	r3, [r1, #16]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d050      	beq.n	800767a <forward_elu+0xc2>
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	6991      	ldr	r1, [r2, #24]
 80075dc:	699c      	ldr	r4, [r3, #24]
 80075de:	6893      	ldr	r3, [r2, #8]
 80075e0:	68a7      	ldr	r7, [r4, #8]
 80075e2:	688e      	ldr	r6, [r1, #8]
 80075e4:	0a1b      	lsrs	r3, r3, #8
 80075e6:	d042      	beq.n	800766e <forward_elu+0xb6>
 80075e8:	68d4      	ldr	r4, [r2, #12]
 80075ea:	2201      	movs	r2, #1
 80075ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80075f0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80075f4:	429c      	cmp	r4, r3
 80075f6:	fb01 f202 	mul.w	r2, r1, r2
 80075fa:	d1f9      	bne.n	80075f0 <forward_elu+0x38>
 80075fc:	69c3      	ldr	r3, [r0, #28]
 80075fe:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8007602:	3a01      	subs	r2, #1
 8007604:	689b      	ldr	r3, [r3, #8]
 8007606:	eb06 0582 	add.w	r5, r6, r2, lsl #2
 800760a:	42ae      	cmp	r6, r5
 800760c:	ed93 9a00 	vldr	s18, [r3]
 8007610:	eb07 0782 	add.w	r7, r7, r2, lsl #2
 8007614:	d825      	bhi.n	8007662 <forward_elu+0xaa>
 8007616:	eddf 8a1a 	vldr	s17, [pc, #104]	; 8007680 <forward_elu+0xc8>
 800761a:	3504      	adds	r5, #4
 800761c:	3704      	adds	r7, #4
 800761e:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
 8007622:	462c      	mov	r4, r5
 8007624:	ed35 8a01 	vldmdb	r5!, {s16}
 8007628:	eeb0 0a48 	vmov.f32	s0, s16
 800762c:	f001 fbb8 	bl	8008da0 <expf>
 8007630:	ee30 0a69 	vsub.f32	s0, s0, s19
 8007634:	3c08      	subs	r4, #8
 8007636:	ee60 7a09 	vmul.f32	s15, s0, s18
 800763a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800763e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007642:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8007646:	bf88      	it	hi
 8007648:	eef0 7a68 	vmovhi.f32	s15, s17
 800764c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007650:	bfb8      	it	lt
 8007652:	eeb0 8a68 	vmovlt.f32	s16, s17
 8007656:	ee77 7a88 	vadd.f32	s15, s15, s16
 800765a:	42a6      	cmp	r6, r4
 800765c:	ed67 7a01 	vstmdb	r7!, {s15}
 8007660:	d9df      	bls.n	8007622 <forward_elu+0x6a>
 8007662:	ecbd 8b04 	vpop	{d8-d9}
 8007666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007668:	2300      	movs	r3, #0
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	deff      	udf	#255	; 0xff
 800766e:	69c3      	ldr	r3, [r0, #28]
 8007670:	689b      	ldr	r3, [r3, #8]
 8007672:	4635      	mov	r5, r6
 8007674:	ed93 9a00 	vldr	s18, [r3]
 8007678:	e7cd      	b.n	8007616 <forward_elu+0x5e>
 800767a:	699b      	ldr	r3, [r3, #24]
 800767c:	deff      	udf	#255	; 0xff
 800767e:	bf00      	nop
 8007680:	00000000 	.word	0x00000000

08007684 <forward_clip>:
 8007684:	6982      	ldr	r2, [r0, #24]
 8007686:	8813      	ldrh	r3, [r2, #0]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d045      	beq.n	8007718 <forward_clip+0x94>
 800768c:	6851      	ldr	r1, [r2, #4]
 800768e:	684a      	ldr	r2, [r1, #4]
 8007690:	b102      	cbz	r2, 8007694 <forward_clip+0x10>
 8007692:	6812      	ldr	r2, [r2, #0]
 8007694:	2b01      	cmp	r3, #1
 8007696:	d049      	beq.n	800772c <forward_clip+0xa8>
 8007698:	690b      	ldr	r3, [r1, #16]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d049      	beq.n	8007732 <forward_clip+0xae>
 800769e:	b470      	push	{r4, r5, r6}
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	6994      	ldr	r4, [r2, #24]
 80076a4:	6999      	ldr	r1, [r3, #24]
 80076a6:	6893      	ldr	r3, [r2, #8]
 80076a8:	6889      	ldr	r1, [r1, #8]
 80076aa:	68a5      	ldr	r5, [r4, #8]
 80076ac:	0a1b      	lsrs	r3, r3, #8
 80076ae:	d035      	beq.n	800771c <forward_clip+0x98>
 80076b0:	68d6      	ldr	r6, [r2, #12]
 80076b2:	2201      	movs	r2, #1
 80076b4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80076b8:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 80076bc:	429e      	cmp	r6, r3
 80076be:	fb04 f202 	mul.w	r2, r4, r2
 80076c2:	d1f9      	bne.n	80076b8 <forward_clip+0x34>
 80076c4:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
 80076c8:	69c0      	ldr	r0, [r0, #28]
 80076ca:	3b01      	subs	r3, #1
 80076cc:	6880      	ldr	r0, [r0, #8]
 80076ce:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 80076d2:	4295      	cmp	r5, r2
 80076d4:	edd0 6a00 	vldr	s13, [r0]
 80076d8:	ed90 7a01 	vldr	s14, [r0, #4]
 80076dc:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80076e0:	d818      	bhi.n	8007714 <forward_clip+0x90>
 80076e2:	3204      	adds	r2, #4
 80076e4:	3104      	adds	r1, #4
 80076e6:	4613      	mov	r3, r2
 80076e8:	ed72 7a01 	vldmdb	r2!, {s15}
 80076ec:	eef4 7ae6 	vcmpe.f32	s15, s13
 80076f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076f4:	bfb8      	it	lt
 80076f6:	eef0 7a66 	vmovlt.f32	s15, s13
 80076fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80076fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007702:	f1a3 0308 	sub.w	r3, r3, #8
 8007706:	bf88      	it	hi
 8007708:	eef0 7a47 	vmovhi.f32	s15, s14
 800770c:	429d      	cmp	r5, r3
 800770e:	ed61 7a01 	vstmdb	r1!, {s15}
 8007712:	d9e8      	bls.n	80076e6 <forward_clip+0x62>
 8007714:	bc70      	pop	{r4, r5, r6}
 8007716:	4770      	bx	lr
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	deff      	udf	#255	; 0xff
 800771c:	69c3      	ldr	r3, [r0, #28]
 800771e:	689b      	ldr	r3, [r3, #8]
 8007720:	462a      	mov	r2, r5
 8007722:	edd3 6a00 	vldr	s13, [r3]
 8007726:	ed93 7a01 	vldr	s14, [r3, #4]
 800772a:	e7da      	b.n	80076e2 <forward_clip+0x5e>
 800772c:	2300      	movs	r3, #0
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	deff      	udf	#255	; 0xff
 8007732:	699b      	ldr	r3, [r3, #24]
 8007734:	deff      	udf	#255	; 0xff
 8007736:	bf00      	nop

08007738 <forward_lite_dense_if32of32wf32>:
 8007738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800773c:	e9dd 6409 	ldrd	r6, r4, [sp, #36]	; 0x24
 8007740:	eb00 0784 	add.w	r7, r0, r4, lsl #2
 8007744:	4287      	cmp	r7, r0
 8007746:	f240 8106 	bls.w	8007956 <forward_lite_dense_if32of32wf32+0x21e>
 800774a:	f1a6 0810 	sub.w	r8, r6, #16
 800774e:	ea4f 1818 	mov.w	r8, r8, lsr #4
 8007752:	f108 0801 	add.w	r8, r8, #1
 8007756:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800775a:	ea4f 0986 	mov.w	r9, r6, lsl #2
 800775e:	eb01 1888 	add.w	r8, r1, r8, lsl #6
 8007762:	4605      	mov	r5, r0
 8007764:	f006 0a0f 	and.w	sl, r6, #15
 8007768:	2e0f      	cmp	r6, #15
 800776a:	ed9f 7a84 	vldr	s14, [pc, #528]	; 800797c <forward_lite_dense_if32of32wf32+0x244>
 800776e:	f240 8101 	bls.w	8007974 <forward_lite_dense_if32of32wf32+0x23c>
 8007772:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 8007776:	f102 0440 	add.w	r4, r2, #64	; 0x40
 800777a:	46b6      	mov	lr, r6
 800777c:	ed54 5a0f 	vldr	s11, [r4, #-60]	; 0xffffffc4
 8007780:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 8007784:	ed1c 6a10 	vldr	s12, [ip, #-64]	; 0xffffffc0
 8007788:	ed54 6a10 	vldr	s13, [r4, #-64]	; 0xffffffc0
 800778c:	ed5c 4a0d 	vldr	s9, [ip, #-52]	; 0xffffffcc
 8007790:	ed1c 5a0c 	vldr	s10, [ip, #-48]	; 0xffffffd0
 8007794:	ed1c 3a0a 	vldr	s6, [ip, #-40]	; 0xffffffd8
 8007798:	ed54 3a0a 	vldr	s7, [r4, #-40]	; 0xffffffd8
 800779c:	ed1c 4a09 	vldr	s8, [ip, #-36]	; 0xffffffdc
 80077a0:	ed1c 1a06 	vldr	s2, [ip, #-24]	; 0xffffffe8
 80077a4:	ed54 1a06 	vldr	s3, [r4, #-24]	; 0xffffffe8
 80077a8:	ed1c 2a05 	vldr	s4, [ip, #-20]	; 0xffffffec
 80077ac:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 80077b0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80077b4:	ed5c 5a0e 	vldr	s11, [ip, #-56]	; 0xffffffc8
 80077b8:	eee6 7a26 	vfma.f32	s15, s12, s13
 80077bc:	f1ae 0e10 	sub.w	lr, lr, #16
 80077c0:	f1be 0f0f 	cmp.w	lr, #15
 80077c4:	ed14 6a0e 	vldr	s12, [r4, #-56]	; 0xffffffc8
 80077c8:	ed54 6a0d 	vldr	s13, [r4, #-52]	; 0xffffffcc
 80077cc:	eee5 7a86 	vfma.f32	s15, s11, s12
 80077d0:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 80077d4:	f104 0440 	add.w	r4, r4, #64	; 0x40
 80077d8:	ed54 5a1c 	vldr	s11, [r4, #-112]	; 0xffffff90
 80077dc:	ed1c 6a1b 	vldr	s12, [ip, #-108]	; 0xffffff94
 80077e0:	eee4 7aa6 	vfma.f32	s15, s9, s13
 80077e4:	ed54 6a1b 	vldr	s13, [r4, #-108]	; 0xffffff94
 80077e8:	ed54 4a19 	vldr	s9, [r4, #-100]	; 0xffffff9c
 80077ec:	eee5 7a25 	vfma.f32	s15, s10, s11
 80077f0:	ed1c 5a18 	vldr	s10, [ip, #-96]	; 0xffffffa0
 80077f4:	ed54 5a18 	vldr	s11, [r4, #-96]	; 0xffffffa0
 80077f8:	eee6 7a26 	vfma.f32	s15, s12, s13
 80077fc:	ed1c 6a17 	vldr	s12, [ip, #-92]	; 0xffffffa4
 8007800:	ed54 6a17 	vldr	s13, [r4, #-92]	; 0xffffffa4
 8007804:	eee3 7a23 	vfma.f32	s15, s6, s7
 8007808:	ed1c 3a14 	vldr	s6, [ip, #-80]	; 0xffffffb0
 800780c:	ed54 3a14 	vldr	s7, [r4, #-80]	; 0xffffffb0
 8007810:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007814:	ed1c 4a13 	vldr	s8, [ip, #-76]	; 0xffffffb4
 8007818:	ed54 4a13 	vldr	s9, [r4, #-76]	; 0xffffffb4
 800781c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007820:	ed1c 5a12 	vldr	s10, [ip, #-72]	; 0xffffffb8
 8007824:	ed54 5a12 	vldr	s11, [r4, #-72]	; 0xffffffb8
 8007828:	eee6 7a26 	vfma.f32	s15, s12, s13
 800782c:	ed1c 6a11 	vldr	s12, [ip, #-68]	; 0xffffffbc
 8007830:	ed54 6a11 	vldr	s13, [r4, #-68]	; 0xffffffbc
 8007834:	eee1 7a21 	vfma.f32	s15, s2, s3
 8007838:	eee2 7a22 	vfma.f32	s15, s4, s5
 800783c:	eee3 7a23 	vfma.f32	s15, s6, s7
 8007840:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007844:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007848:	eee6 7a26 	vfma.f32	s15, s12, s13
 800784c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007850:	d894      	bhi.n	800777c <forward_lite_dense_if32of32wf32+0x44>
 8007852:	eb02 0e0b 	add.w	lr, r2, fp
 8007856:	4654      	mov	r4, sl
 8007858:	46c4      	mov	ip, r8
 800785a:	2c00      	cmp	r4, #0
 800785c:	d075      	beq.n	800794a <forward_lite_dense_if32of32wf32+0x212>
 800785e:	eddc 6a00 	vldr	s13, [ip]
 8007862:	edde 7a00 	vldr	s15, [lr]
 8007866:	2c01      	cmp	r4, #1
 8007868:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800786c:	d06d      	beq.n	800794a <forward_lite_dense_if32of32wf32+0x212>
 800786e:	eddc 6a01 	vldr	s13, [ip, #4]
 8007872:	edde 7a01 	vldr	s15, [lr, #4]
 8007876:	2c02      	cmp	r4, #2
 8007878:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800787c:	d065      	beq.n	800794a <forward_lite_dense_if32of32wf32+0x212>
 800787e:	eddc 6a02 	vldr	s13, [ip, #8]
 8007882:	edde 7a02 	vldr	s15, [lr, #8]
 8007886:	2c03      	cmp	r4, #3
 8007888:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800788c:	d05d      	beq.n	800794a <forward_lite_dense_if32of32wf32+0x212>
 800788e:	eddc 6a03 	vldr	s13, [ip, #12]
 8007892:	edde 7a03 	vldr	s15, [lr, #12]
 8007896:	2c04      	cmp	r4, #4
 8007898:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800789c:	d055      	beq.n	800794a <forward_lite_dense_if32of32wf32+0x212>
 800789e:	eddc 6a04 	vldr	s13, [ip, #16]
 80078a2:	edde 7a04 	vldr	s15, [lr, #16]
 80078a6:	2c05      	cmp	r4, #5
 80078a8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80078ac:	d04d      	beq.n	800794a <forward_lite_dense_if32of32wf32+0x212>
 80078ae:	eddc 6a05 	vldr	s13, [ip, #20]
 80078b2:	edde 7a05 	vldr	s15, [lr, #20]
 80078b6:	2c06      	cmp	r4, #6
 80078b8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80078bc:	d045      	beq.n	800794a <forward_lite_dense_if32of32wf32+0x212>
 80078be:	eddc 6a06 	vldr	s13, [ip, #24]
 80078c2:	edde 7a06 	vldr	s15, [lr, #24]
 80078c6:	2c07      	cmp	r4, #7
 80078c8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80078cc:	d03d      	beq.n	800794a <forward_lite_dense_if32of32wf32+0x212>
 80078ce:	eddc 6a07 	vldr	s13, [ip, #28]
 80078d2:	edde 7a07 	vldr	s15, [lr, #28]
 80078d6:	2c08      	cmp	r4, #8
 80078d8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80078dc:	d035      	beq.n	800794a <forward_lite_dense_if32of32wf32+0x212>
 80078de:	eddc 6a08 	vldr	s13, [ip, #32]
 80078e2:	edde 7a08 	vldr	s15, [lr, #32]
 80078e6:	2c09      	cmp	r4, #9
 80078e8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80078ec:	d02d      	beq.n	800794a <forward_lite_dense_if32of32wf32+0x212>
 80078ee:	eddc 6a09 	vldr	s13, [ip, #36]	; 0x24
 80078f2:	edde 7a09 	vldr	s15, [lr, #36]	; 0x24
 80078f6:	2c0a      	cmp	r4, #10
 80078f8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80078fc:	d025      	beq.n	800794a <forward_lite_dense_if32of32wf32+0x212>
 80078fe:	eddc 6a0a 	vldr	s13, [ip, #40]	; 0x28
 8007902:	edde 7a0a 	vldr	s15, [lr, #40]	; 0x28
 8007906:	2c0b      	cmp	r4, #11
 8007908:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800790c:	d01d      	beq.n	800794a <forward_lite_dense_if32of32wf32+0x212>
 800790e:	eddc 6a0b 	vldr	s13, [ip, #44]	; 0x2c
 8007912:	edde 7a0b 	vldr	s15, [lr, #44]	; 0x2c
 8007916:	2c0c      	cmp	r4, #12
 8007918:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800791c:	d015      	beq.n	800794a <forward_lite_dense_if32of32wf32+0x212>
 800791e:	eddc 6a0c 	vldr	s13, [ip, #48]	; 0x30
 8007922:	edde 7a0c 	vldr	s15, [lr, #48]	; 0x30
 8007926:	3c0d      	subs	r4, #13
 8007928:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800792c:	d00d      	beq.n	800794a <forward_lite_dense_if32of32wf32+0x212>
 800792e:	eddc 6a0d 	vldr	s13, [ip, #52]	; 0x34
 8007932:	edde 7a0d 	vldr	s15, [lr, #52]	; 0x34
 8007936:	2c01      	cmp	r4, #1
 8007938:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800793c:	d005      	beq.n	800794a <forward_lite_dense_if32of32wf32+0x212>
 800793e:	edde 6a0e 	vldr	s13, [lr, #56]	; 0x38
 8007942:	eddc 7a0e 	vldr	s15, [ip, #56]	; 0x38
 8007946:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800794a:	444a      	add	r2, r9
 800794c:	eca5 7a01 	vstmia	r5!, {s14}
 8007950:	42af      	cmp	r7, r5
 8007952:	f63f af09 	bhi.w	8007768 <forward_lite_dense_if32of32wf32+0x30>
 8007956:	b15b      	cbz	r3, 8007970 <forward_lite_dense_if32of32wf32+0x238>
 8007958:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800795a:	b14a      	cbz	r2, 8007970 <forward_lite_dense_if32of32wf32+0x238>
 800795c:	edd0 7a00 	vldr	s15, [r0]
 8007960:	ecb3 7a01 	vldmia	r3!, {s14}
 8007964:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007968:	ece0 7a01 	vstmia	r0!, {s15}
 800796c:	4287      	cmp	r7, r0
 800796e:	d1f5      	bne.n	800795c <forward_lite_dense_if32of32wf32+0x224>
 8007970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007974:	4634      	mov	r4, r6
 8007976:	4696      	mov	lr, r2
 8007978:	468c      	mov	ip, r1
 800797a:	e76e      	b.n	800785a <forward_lite_dense_if32of32wf32+0x122>
 800797c:	00000000 	.word	0x00000000

08007980 <st_int8_copy>:
 8007980:	4288      	cmp	r0, r1
 8007982:	d057      	beq.n	8007a34 <st_int8_copy+0xb4>
 8007984:	2a00      	cmp	r2, #0
 8007986:	d055      	beq.n	8007a34 <st_int8_copy+0xb4>
 8007988:	4288      	cmp	r0, r1
 800798a:	d354      	bcc.n	8007a36 <st_int8_copy+0xb6>
 800798c:	078b      	lsls	r3, r1, #30
 800798e:	d102      	bne.n	8007996 <st_int8_copy+0x16>
 8007990:	e009      	b.n	80079a6 <st_int8_copy+0x26>
 8007992:	2a00      	cmp	r2, #0
 8007994:	d05c      	beq.n	8007a50 <st_int8_copy+0xd0>
 8007996:	f910 3b01 	ldrsb.w	r3, [r0], #1
 800799a:	f801 3b01 	strb.w	r3, [r1], #1
 800799e:	078b      	lsls	r3, r1, #30
 80079a0:	f102 32ff 	add.w	r2, r2, #4294967295
 80079a4:	d1f5      	bne.n	8007992 <st_int8_copy+0x12>
 80079a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079aa:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 80079ae:	d069      	beq.n	8007a84 <st_int8_copy+0x104>
 80079b0:	ea41 0300 	orr.w	r3, r1, r0
 80079b4:	075b      	lsls	r3, r3, #29
 80079b6:	d14c      	bne.n	8007a52 <st_int8_copy+0xd2>
 80079b8:	f10e 33ff 	add.w	r3, lr, #4294967295
 80079bc:	2b01      	cmp	r3, #1
 80079be:	d948      	bls.n	8007a52 <st_int8_copy+0xd2>
 80079c0:	f100 0310 	add.w	r3, r0, #16
 80079c4:	ea4f 140e 	mov.w	r4, lr, lsl #4
 80079c8:	f101 0c10 	add.w	ip, r1, #16
 80079cc:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 80079d0:	ed13 6b04 	vldr	d6, [r3, #-16]
 80079d4:	ed13 7b02 	vldr	d7, [r3, #-8]
 80079d8:	3310      	adds	r3, #16
 80079da:	4573      	cmp	r3, lr
 80079dc:	ed0c 6b04 	vstr	d6, [ip, #-16]
 80079e0:	ed0c 7b02 	vstr	d7, [ip, #-8]
 80079e4:	f10c 0c10 	add.w	ip, ip, #16
 80079e8:	d1f2      	bne.n	80079d0 <st_int8_copy+0x50>
 80079ea:	f3c2 0381 	ubfx	r3, r2, #2, #2
 80079ee:	4421      	add	r1, r4
 80079f0:	4420      	add	r0, r4
 80079f2:	f002 0203 	and.w	r2, r2, #3
 80079f6:	b16b      	cbz	r3, 8007a14 <st_int8_copy+0x94>
 80079f8:	6804      	ldr	r4, [r0, #0]
 80079fa:	600c      	str	r4, [r1, #0]
 80079fc:	1e5c      	subs	r4, r3, #1
 80079fe:	d005      	beq.n	8007a0c <st_int8_copy+0x8c>
 8007a00:	6845      	ldr	r5, [r0, #4]
 8007a02:	604d      	str	r5, [r1, #4]
 8007a04:	2c01      	cmp	r4, #1
 8007a06:	bf1c      	itt	ne
 8007a08:	6884      	ldrne	r4, [r0, #8]
 8007a0a:	608c      	strne	r4, [r1, #8]
 8007a0c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8007a10:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8007a14:	b162      	cbz	r2, 8007a30 <st_int8_copy+0xb0>
 8007a16:	f990 3000 	ldrsb.w	r3, [r0]
 8007a1a:	700b      	strb	r3, [r1, #0]
 8007a1c:	3a01      	subs	r2, #1
 8007a1e:	d007      	beq.n	8007a30 <st_int8_copy+0xb0>
 8007a20:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8007a24:	704b      	strb	r3, [r1, #1]
 8007a26:	2a01      	cmp	r2, #1
 8007a28:	bf1c      	itt	ne
 8007a2a:	f990 3002 	ldrsbne.w	r3, [r0, #2]
 8007a2e:	708b      	strbne	r3, [r1, #2]
 8007a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a34:	4770      	bx	lr
 8007a36:	1883      	adds	r3, r0, r2
 8007a38:	428b      	cmp	r3, r1
 8007a3a:	d9a7      	bls.n	800798c <st_int8_copy+0xc>
 8007a3c:	4283      	cmp	r3, r0
 8007a3e:	440a      	add	r2, r1
 8007a40:	d9f8      	bls.n	8007a34 <st_int8_copy+0xb4>
 8007a42:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 8007a46:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8007a4a:	4283      	cmp	r3, r0
 8007a4c:	d1f9      	bne.n	8007a42 <st_int8_copy+0xc2>
 8007a4e:	4770      	bx	lr
 8007a50:	4770      	bx	lr
 8007a52:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8007a56:	460b      	mov	r3, r1
 8007a58:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 8007a5c:	4684      	mov	ip, r0
 8007a5e:	f8dc 7000 	ldr.w	r7, [ip]
 8007a62:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8007a66:	f8dc 5008 	ldr.w	r5, [ip, #8]
 8007a6a:	f8dc 800c 	ldr.w	r8, [ip, #12]
 8007a6e:	f8c3 800c 	str.w	r8, [r3, #12]
 8007a72:	601f      	str	r7, [r3, #0]
 8007a74:	605e      	str	r6, [r3, #4]
 8007a76:	609d      	str	r5, [r3, #8]
 8007a78:	3310      	adds	r3, #16
 8007a7a:	459e      	cmp	lr, r3
 8007a7c:	f10c 0c10 	add.w	ip, ip, #16
 8007a80:	d1ed      	bne.n	8007a5e <st_int8_copy+0xde>
 8007a82:	e7b2      	b.n	80079ea <st_int8_copy+0x6a>
 8007a84:	0893      	lsrs	r3, r2, #2
 8007a86:	f002 0203 	and.w	r2, r2, #3
 8007a8a:	e7b4      	b.n	80079f6 <st_int8_copy+0x76>

08007a8c <ai_sum_f32>:
 8007a8c:	edd1 7a00 	vldr	s15, [r1]
 8007a90:	ed92 7a00 	vldr	s14, [r2]
 8007a94:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007a98:	edc0 7a00 	vstr	s15, [r0]
 8007a9c:	4770      	bx	lr
 8007a9e:	bf00      	nop

08007aa0 <ai_sum_buffer_f32>:
 8007aa0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8007aa4:	4298      	cmp	r0, r3
 8007aa6:	d209      	bcs.n	8007abc <ai_sum_buffer_f32+0x1c>
 8007aa8:	ecf1 7a01 	vldmia	r1!, {s15}
 8007aac:	ecb2 7a01 	vldmia	r2!, {s14}
 8007ab0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007ab4:	ece0 7a01 	vstmia	r0!, {s15}
 8007ab8:	4283      	cmp	r3, r0
 8007aba:	d8f5      	bhi.n	8007aa8 <ai_sum_buffer_f32+0x8>
 8007abc:	4770      	bx	lr
 8007abe:	bf00      	nop

08007ac0 <ai_sub_f32>:
 8007ac0:	edd1 7a00 	vldr	s15, [r1]
 8007ac4:	ed92 7a00 	vldr	s14, [r2]
 8007ac8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007acc:	edc0 7a00 	vstr	s15, [r0]
 8007ad0:	4770      	bx	lr
 8007ad2:	bf00      	nop

08007ad4 <ai_sub_buffer_f32>:
 8007ad4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8007ad8:	4298      	cmp	r0, r3
 8007ada:	d209      	bcs.n	8007af0 <ai_sub_buffer_f32+0x1c>
 8007adc:	ecf1 7a01 	vldmia	r1!, {s15}
 8007ae0:	ecb2 7a01 	vldmia	r2!, {s14}
 8007ae4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007ae8:	ece0 7a01 	vstmia	r0!, {s15}
 8007aec:	4283      	cmp	r3, r0
 8007aee:	d8f5      	bhi.n	8007adc <ai_sub_buffer_f32+0x8>
 8007af0:	4770      	bx	lr
 8007af2:	bf00      	nop

08007af4 <ai_mul_f32>:
 8007af4:	edd1 7a00 	vldr	s15, [r1]
 8007af8:	ed92 7a00 	vldr	s14, [r2]
 8007afc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007b00:	edc0 7a00 	vstr	s15, [r0]
 8007b04:	4770      	bx	lr
 8007b06:	bf00      	nop

08007b08 <ai_mul_buffer_f32>:
 8007b08:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8007b0c:	4298      	cmp	r0, r3
 8007b0e:	d209      	bcs.n	8007b24 <ai_mul_buffer_f32+0x1c>
 8007b10:	ecf1 7a01 	vldmia	r1!, {s15}
 8007b14:	ecb2 7a01 	vldmia	r2!, {s14}
 8007b18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007b1c:	ece0 7a01 	vstmia	r0!, {s15}
 8007b20:	4283      	cmp	r3, r0
 8007b22:	d8f5      	bhi.n	8007b10 <ai_mul_buffer_f32+0x8>
 8007b24:	4770      	bx	lr
 8007b26:	bf00      	nop

08007b28 <ai_div_f32>:
 8007b28:	edd1 6a00 	vldr	s13, [r1]
 8007b2c:	ed92 7a00 	vldr	s14, [r2]
 8007b30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b34:	edc0 7a00 	vstr	s15, [r0]
 8007b38:	4770      	bx	lr
 8007b3a:	bf00      	nop

08007b3c <ai_div_buffer_f32>:
 8007b3c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8007b40:	4298      	cmp	r0, r3
 8007b42:	d209      	bcs.n	8007b58 <ai_div_buffer_f32+0x1c>
 8007b44:	ecf1 6a01 	vldmia	r1!, {s13}
 8007b48:	ecb2 7a01 	vldmia	r2!, {s14}
 8007b4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b50:	ece0 7a01 	vstmia	r0!, {s15}
 8007b54:	4283      	cmp	r3, r0
 8007b56:	d8f5      	bhi.n	8007b44 <ai_div_buffer_f32+0x8>
 8007b58:	4770      	bx	lr
 8007b5a:	bf00      	nop

08007b5c <ai_array_to_buffer_fmt>:
 8007b5c:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8007b60:	2b02      	cmp	r3, #2
 8007b62:	d050      	beq.n	8007c06 <ai_array_to_buffer_fmt+0xaa>
 8007b64:	4b2a      	ldr	r3, [pc, #168]	; (8007c10 <ai_array_to_buffer_fmt+0xb4>)
 8007b66:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 8007b6a:	429a      	cmp	r2, r3
 8007b6c:	d00b      	beq.n	8007b86 <ai_array_to_buffer_fmt+0x2a>
 8007b6e:	dc1c      	bgt.n	8007baa <ai_array_to_buffer_fmt+0x4e>
 8007b70:	4b28      	ldr	r3, [pc, #160]	; (8007c14 <ai_array_to_buffer_fmt+0xb8>)
 8007b72:	429a      	cmp	r2, r3
 8007b74:	d007      	beq.n	8007b86 <ai_array_to_buffer_fmt+0x2a>
 8007b76:	dd0b      	ble.n	8007b90 <ai_array_to_buffer_fmt+0x34>
 8007b78:	4b27      	ldr	r3, [pc, #156]	; (8007c18 <ai_array_to_buffer_fmt+0xbc>)
 8007b7a:	429a      	cmp	r2, r3
 8007b7c:	d003      	beq.n	8007b86 <ai_array_to_buffer_fmt+0x2a>
 8007b7e:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8007b82:	429a      	cmp	r2, r3
 8007b84:	d131      	bne.n	8007bea <ai_array_to_buffer_fmt+0x8e>
 8007b86:	4613      	mov	r3, r2
 8007b88:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8007b8c:	4318      	orrs	r0, r3
 8007b8e:	4770      	bx	lr
 8007b90:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d0f6      	beq.n	8007b86 <ai_array_to_buffer_fmt+0x2a>
 8007b98:	dd2c      	ble.n	8007bf4 <ai_array_to_buffer_fmt+0x98>
 8007b9a:	4b20      	ldr	r3, [pc, #128]	; (8007c1c <ai_array_to_buffer_fmt+0xc0>)
 8007b9c:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8007ba0:	429a      	cmp	r2, r3
 8007ba2:	bf18      	it	ne
 8007ba4:	2340      	movne	r3, #64	; 0x40
 8007ba6:	4318      	orrs	r0, r3
 8007ba8:	4770      	bx	lr
 8007baa:	4b1d      	ldr	r3, [pc, #116]	; (8007c20 <ai_array_to_buffer_fmt+0xc4>)
 8007bac:	429a      	cmp	r2, r3
 8007bae:	d0ea      	beq.n	8007b86 <ai_array_to_buffer_fmt+0x2a>
 8007bb0:	dd0e      	ble.n	8007bd0 <ai_array_to_buffer_fmt+0x74>
 8007bb2:	4b1c      	ldr	r3, [pc, #112]	; (8007c24 <ai_array_to_buffer_fmt+0xc8>)
 8007bb4:	429a      	cmp	r2, r3
 8007bb6:	d0e6      	beq.n	8007b86 <ai_array_to_buffer_fmt+0x2a>
 8007bb8:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 8007bbc:	429a      	cmp	r2, r3
 8007bbe:	d0e2      	beq.n	8007b86 <ai_array_to_buffer_fmt+0x2a>
 8007bc0:	4b19      	ldr	r3, [pc, #100]	; (8007c28 <ai_array_to_buffer_fmt+0xcc>)
 8007bc2:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8007bc6:	429a      	cmp	r2, r3
 8007bc8:	bf18      	it	ne
 8007bca:	2340      	movne	r3, #64	; 0x40
 8007bcc:	4318      	orrs	r0, r3
 8007bce:	4770      	bx	lr
 8007bd0:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8007bd4:	429a      	cmp	r2, r3
 8007bd6:	d0d6      	beq.n	8007b86 <ai_array_to_buffer_fmt+0x2a>
 8007bd8:	3307      	adds	r3, #7
 8007bda:	429a      	cmp	r2, r3
 8007bdc:	d0d3      	beq.n	8007b86 <ai_array_to_buffer_fmt+0x2a>
 8007bde:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 8007be2:	429a      	cmp	r2, r3
 8007be4:	bf18      	it	ne
 8007be6:	2340      	movne	r3, #64	; 0x40
 8007be8:	e7ce      	b.n	8007b88 <ai_array_to_buffer_fmt+0x2c>
 8007bea:	4b10      	ldr	r3, [pc, #64]	; (8007c2c <ai_array_to_buffer_fmt+0xd0>)
 8007bec:	429a      	cmp	r2, r3
 8007bee:	bf18      	it	ne
 8007bf0:	2340      	movne	r3, #64	; 0x40
 8007bf2:	e7c9      	b.n	8007b88 <ai_array_to_buffer_fmt+0x2c>
 8007bf4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	d0c4      	beq.n	8007b86 <ai_array_to_buffer_fmt+0x2a>
 8007bfc:	3380      	adds	r3, #128	; 0x80
 8007bfe:	429a      	cmp	r2, r3
 8007c00:	bf18      	it	ne
 8007c02:	2340      	movne	r3, #64	; 0x40
 8007c04:	e7c0      	b.n	8007b88 <ai_array_to_buffer_fmt+0x2c>
 8007c06:	4b0a      	ldr	r3, [pc, #40]	; (8007c30 <ai_array_to_buffer_fmt+0xd4>)
 8007c08:	4003      	ands	r3, r0
 8007c0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007c0e:	e7bb      	b.n	8007b88 <ai_array_to_buffer_fmt+0x2c>
 8007c10:	00840040 	.word	0x00840040
 8007c14:	00040840 	.word	0x00040840
 8007c18:	00041040 	.word	0x00041040
 8007c1c:	00040447 	.word	0x00040447
 8007c20:	00840840 	.word	0x00840840
 8007c24:	00841040 	.word	0x00841040
 8007c28:	0084084f 	.word	0x0084084f
 8007c2c:	0004084f 	.word	0x0004084f
 8007c30:	00803fff 	.word	0x00803fff

08007c34 <ai_array_get_byte_size>:
 8007c34:	b319      	cbz	r1, 8007c7e <ai_array_get_byte_size+0x4a>
 8007c36:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8007c3a:	fb03 f101 	mul.w	r1, r3, r1
 8007c3e:	3107      	adds	r1, #7
 8007c40:	f3c0 4243 	ubfx	r2, r0, #17, #4
 8007c44:	f021 0307 	bic.w	r3, r1, #7
 8007c48:	2a04      	cmp	r2, #4
 8007c4a:	f3c0 5141 	ubfx	r1, r0, #21, #2
 8007c4e:	fa23 f101 	lsr.w	r1, r3, r1
 8007c52:	ea4f 10e0 	mov.w	r0, r0, asr #7
 8007c56:	d00b      	beq.n	8007c70 <ai_array_get_byte_size+0x3c>
 8007c58:	2a08      	cmp	r2, #8
 8007c5a:	d002      	beq.n	8007c62 <ai_array_get_byte_size+0x2e>
 8007c5c:	3107      	adds	r1, #7
 8007c5e:	08c8      	lsrs	r0, r1, #3
 8007c60:	4770      	bx	lr
 8007c62:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8007c66:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8007c6a:	3107      	adds	r1, #7
 8007c6c:	08c8      	lsrs	r0, r1, #3
 8007c6e:	4770      	bx	lr
 8007c70:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8007c74:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 8007c78:	3107      	adds	r1, #7
 8007c7a:	08c8      	lsrs	r0, r1, #3
 8007c7c:	4770      	bx	lr
 8007c7e:	4608      	mov	r0, r1
 8007c80:	4770      	bx	lr
 8007c82:	bf00      	nop

08007c84 <ai_array_get_data_byte_size>:
 8007c84:	b169      	cbz	r1, 8007ca2 <ai_array_get_data_byte_size+0x1e>
 8007c86:	f3c0 12c6 	ubfx	r2, r0, #7, #7
 8007c8a:	fb02 f101 	mul.w	r1, r2, r1
 8007c8e:	1dcb      	adds	r3, r1, #7
 8007c90:	f023 0307 	bic.w	r3, r3, #7
 8007c94:	f3c0 5041 	ubfx	r0, r0, #21, #2
 8007c98:	fa23 f000 	lsr.w	r0, r3, r0
 8007c9c:	3007      	adds	r0, #7
 8007c9e:	08c0      	lsrs	r0, r0, #3
 8007ca0:	4770      	bx	lr
 8007ca2:	4608      	mov	r0, r1
 8007ca4:	4770      	bx	lr
 8007ca6:	bf00      	nop

08007ca8 <ai_version_get>:
 8007ca8:	0212      	lsls	r2, r2, #8
 8007caa:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8007cae:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8007cb2:	4770      	bx	lr

08007cb4 <get_tensor_byte_size>:
 8007cb4:	b410      	push	{r4}
 8007cb6:	6983      	ldr	r3, [r0, #24]
 8007cb8:	68c4      	ldr	r4, [r0, #12]
 8007cba:	6941      	ldr	r1, [r0, #20]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	68e0      	ldr	r0, [r4, #12]
 8007cc0:	4a07      	ldr	r2, [pc, #28]	; (8007ce0 <get_tensor_byte_size+0x2c>)
 8007cc2:	68c9      	ldr	r1, [r1, #12]
 8007cc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007cc8:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8007ccc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007cd0:	fb01 f000 	mul.w	r0, r1, r0
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	bf04      	itt	eq
 8007cd8:	3007      	addeq	r0, #7
 8007cda:	08c0      	lsreq	r0, r0, #3
 8007cdc:	4770      	bx	lr
 8007cde:	bf00      	nop
 8007ce0:	000400c0 	.word	0x000400c0

08007ce4 <core_get_broadcasted_shape>:
 8007ce4:	b470      	push	{r4, r5, r6}
 8007ce6:	6804      	ldr	r4, [r0, #0]
 8007ce8:	f3c4 2417 	ubfx	r4, r4, #8, #24
 8007cec:	b324      	cbz	r4, 8007d38 <core_get_broadcasted_shape+0x54>
 8007cee:	4623      	mov	r3, r4
 8007cf0:	3b01      	subs	r3, #1
 8007cf2:	429c      	cmp	r4, r3
 8007cf4:	d91b      	bls.n	8007d2e <core_get_broadcasted_shape+0x4a>
 8007cf6:	6814      	ldr	r4, [r2, #0]
 8007cf8:	680e      	ldr	r6, [r1, #0]
 8007cfa:	ebb3 2f14 	cmp.w	r3, r4, lsr #8
 8007cfe:	bf36      	itet	cc
 8007d00:	6854      	ldrcc	r4, [r2, #4]
 8007d02:	2401      	movcs	r4, #1
 8007d04:	f854 4023 	ldrcc.w	r4, [r4, r3, lsl #2]
 8007d08:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 8007d0c:	bf38      	it	cc
 8007d0e:	ea4f 0c83 	movcc.w	ip, r3, lsl #2
 8007d12:	ebb3 2f16 	cmp.w	r3, r6, lsr #8
 8007d16:	f04f 0501 	mov.w	r5, #1
 8007d1a:	bf3c      	itt	cc
 8007d1c:	684d      	ldrcc	r5, [r1, #4]
 8007d1e:	f855 500c 	ldrcc.w	r5, [r5, ip]
 8007d22:	42ac      	cmp	r4, r5
 8007d24:	bf38      	it	cc
 8007d26:	462c      	movcc	r4, r5
 8007d28:	6845      	ldr	r5, [r0, #4]
 8007d2a:	f845 400c 	str.w	r4, [r5, ip]
 8007d2e:	b11b      	cbz	r3, 8007d38 <core_get_broadcasted_shape+0x54>
 8007d30:	6804      	ldr	r4, [r0, #0]
 8007d32:	f3c4 2417 	ubfx	r4, r4, #8, #24
 8007d36:	e7db      	b.n	8007cf0 <core_get_broadcasted_shape+0xc>
 8007d38:	bc70      	pop	{r4, r5, r6}
 8007d3a:	4770      	bx	lr

08007d3c <core_compute_offsets>:
 8007d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d40:	e9d1 4600 	ldrd	r4, r6, [r1]
 8007d44:	f5b4 6fa0 	cmp.w	r4, #1280	; 0x500
 8007d48:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8007d4c:	6871      	ldr	r1, [r6, #4]
 8007d4e:	6812      	ldr	r2, [r2, #0]
 8007d50:	bf28      	it	cs
 8007d52:	6935      	ldrcs	r5, [r6, #16]
 8007d54:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8007d58:	f8d0 b000 	ldr.w	fp, [r0]
 8007d5c:	bf2e      	itee	cs
 8007d5e:	fb05 fe01 	mulcs.w	lr, r5, r1
 8007d62:	468e      	movcc	lr, r1
 8007d64:	2501      	movcc	r5, #1
 8007d66:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 8007d6a:	bf28      	it	cs
 8007d6c:	f8d9 2010 	ldrcs.w	r2, [r9, #16]
 8007d70:	e9d6 4802 	ldrd	r4, r8, [r6, #8]
 8007d74:	e9d9 6902 	ldrd	r6, r9, [r9, #8]
 8007d78:	bf38      	it	cc
 8007d7a:	2201      	movcc	r2, #1
 8007d7c:	b083      	sub	sp, #12
 8007d7e:	ebb4 0a06 	subs.w	sl, r4, r6
 8007d82:	bf18      	it	ne
 8007d84:	f04f 0a01 	movne.w	sl, #1
 8007d88:	f5bb 7f00 	cmp.w	fp, #512	; 0x200
 8007d8c:	9201      	str	r2, [sp, #4]
 8007d8e:	f3cb 2217 	ubfx	r2, fp, #8, #24
 8007d92:	d308      	bcc.n	8007da6 <core_compute_offsets+0x6a>
 8007d94:	6847      	ldr	r7, [r0, #4]
 8007d96:	4561      	cmp	r1, ip
 8007d98:	bf0c      	ite	eq
 8007d9a:	461a      	moveq	r2, r3
 8007d9c:	2200      	movne	r2, #0
 8007d9e:	607a      	str	r2, [r7, #4]
 8007da0:	6802      	ldr	r2, [r0, #0]
 8007da2:	f3c2 2217 	ubfx	r2, r2, #8, #24
 8007da6:	9f01      	ldr	r7, [sp, #4]
 8007da8:	42bd      	cmp	r5, r7
 8007daa:	d03f      	beq.n	8007e2c <core_compute_offsets+0xf0>
 8007dac:	eba1 0b0c 	sub.w	fp, r1, ip
 8007db0:	fabb fb8b 	clz	fp, fp
 8007db4:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8007db8:	fb01 fb0b 	mul.w	fp, r1, fp
 8007dbc:	f1cb 0b00 	rsb	fp, fp, #0
 8007dc0:	2a04      	cmp	r2, #4
 8007dc2:	d906      	bls.n	8007dd2 <core_compute_offsets+0x96>
 8007dc4:	6847      	ldr	r7, [r0, #4]
 8007dc6:	fb0b f203 	mul.w	r2, fp, r3
 8007dca:	613a      	str	r2, [r7, #16]
 8007dcc:	6802      	ldr	r2, [r0, #0]
 8007dce:	f3c2 2217 	ubfx	r2, r2, #8, #24
 8007dd2:	42b4      	cmp	r4, r6
 8007dd4:	d03a      	beq.n	8007e4c <core_compute_offsets+0x110>
 8007dd6:	f04f 0b00 	mov.w	fp, #0
 8007dda:	2a02      	cmp	r2, #2
 8007ddc:	fb0e fa0a 	mul.w	sl, lr, sl
 8007de0:	d90e      	bls.n	8007e00 <core_compute_offsets+0xc4>
 8007de2:	9a01      	ldr	r2, [sp, #4]
 8007de4:	6847      	ldr	r7, [r0, #4]
 8007de6:	1aaa      	subs	r2, r5, r2
 8007de8:	bf18      	it	ne
 8007dea:	2201      	movne	r2, #1
 8007dec:	ebab 0b0a 	sub.w	fp, fp, sl
 8007df0:	fb01 bb02 	mla	fp, r1, r2, fp
 8007df4:	fb03 f20b 	mul.w	r2, r3, fp
 8007df8:	60ba      	str	r2, [r7, #8]
 8007dfa:	6802      	ldr	r2, [r0, #0]
 8007dfc:	f3c2 2217 	ubfx	r2, r2, #8, #24
 8007e00:	45c8      	cmp	r8, r9
 8007e02:	d019      	beq.n	8007e38 <core_compute_offsets+0xfc>
 8007e04:	2100      	movs	r1, #0
 8007e06:	2a03      	cmp	r2, #3
 8007e08:	d90d      	bls.n	8007e26 <core_compute_offsets+0xea>
 8007e0a:	ebb8 0809 	subs.w	r8, r8, r9
 8007e0e:	fb0e f404 	mul.w	r4, lr, r4
 8007e12:	bf18      	it	ne
 8007e14:	f04f 0801 	movne.w	r8, #1
 8007e18:	fb08 1114 	mls	r1, r8, r4, r1
 8007e1c:	6842      	ldr	r2, [r0, #4]
 8007e1e:	448a      	add	sl, r1
 8007e20:	fb03 f30a 	mul.w	r3, r3, sl
 8007e24:	60d3      	str	r3, [r2, #12]
 8007e26:	b003      	add	sp, #12
 8007e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e2c:	ebb1 0b0c 	subs.w	fp, r1, ip
 8007e30:	bf18      	it	ne
 8007e32:	f04f 0b01 	movne.w	fp, #1
 8007e36:	e7c3      	b.n	8007dc0 <core_compute_offsets+0x84>
 8007e38:	42b4      	cmp	r4, r6
 8007e3a:	d0e3      	beq.n	8007e04 <core_compute_offsets+0xc8>
 8007e3c:	9e01      	ldr	r6, [sp, #4]
 8007e3e:	42b5      	cmp	r5, r6
 8007e40:	d0e0      	beq.n	8007e04 <core_compute_offsets+0xc8>
 8007e42:	ebb1 010c 	subs.w	r1, r1, ip
 8007e46:	bf18      	it	ne
 8007e48:	2101      	movne	r1, #1
 8007e4a:	e7dc      	b.n	8007e06 <core_compute_offsets+0xca>
 8007e4c:	9f01      	ldr	r7, [sp, #4]
 8007e4e:	42bd      	cmp	r5, r7
 8007e50:	d0c1      	beq.n	8007dd6 <core_compute_offsets+0x9a>
 8007e52:	ebb1 0b0c 	subs.w	fp, r1, ip
 8007e56:	bf18      	it	ne
 8007e58:	f04f 0b01 	movne.w	fp, #1
 8007e5c:	e7bd      	b.n	8007dda <core_compute_offsets+0x9e>
 8007e5e:	bf00      	nop

08007e60 <sbrk_aligned>:
 8007e60:	b570      	push	{r4, r5, r6, lr}
 8007e62:	4e0e      	ldr	r6, [pc, #56]	; (8007e9c <sbrk_aligned+0x3c>)
 8007e64:	460c      	mov	r4, r1
 8007e66:	6831      	ldr	r1, [r6, #0]
 8007e68:	4605      	mov	r5, r0
 8007e6a:	b911      	cbnz	r1, 8007e72 <sbrk_aligned+0x12>
 8007e6c:	f000 fae8 	bl	8008440 <_sbrk_r>
 8007e70:	6030      	str	r0, [r6, #0]
 8007e72:	4621      	mov	r1, r4
 8007e74:	4628      	mov	r0, r5
 8007e76:	f000 fae3 	bl	8008440 <_sbrk_r>
 8007e7a:	1c43      	adds	r3, r0, #1
 8007e7c:	d00a      	beq.n	8007e94 <sbrk_aligned+0x34>
 8007e7e:	1cc4      	adds	r4, r0, #3
 8007e80:	f024 0403 	bic.w	r4, r4, #3
 8007e84:	42a0      	cmp	r0, r4
 8007e86:	d007      	beq.n	8007e98 <sbrk_aligned+0x38>
 8007e88:	1a21      	subs	r1, r4, r0
 8007e8a:	4628      	mov	r0, r5
 8007e8c:	f000 fad8 	bl	8008440 <_sbrk_r>
 8007e90:	3001      	adds	r0, #1
 8007e92:	d101      	bne.n	8007e98 <sbrk_aligned+0x38>
 8007e94:	f04f 34ff 	mov.w	r4, #4294967295
 8007e98:	4620      	mov	r0, r4
 8007e9a:	bd70      	pop	{r4, r5, r6, pc}
 8007e9c:	200016e4 	.word	0x200016e4

08007ea0 <_malloc_r>:
 8007ea0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ea4:	1ccd      	adds	r5, r1, #3
 8007ea6:	f025 0503 	bic.w	r5, r5, #3
 8007eaa:	3508      	adds	r5, #8
 8007eac:	2d0c      	cmp	r5, #12
 8007eae:	bf38      	it	cc
 8007eb0:	250c      	movcc	r5, #12
 8007eb2:	2d00      	cmp	r5, #0
 8007eb4:	4607      	mov	r7, r0
 8007eb6:	db01      	blt.n	8007ebc <_malloc_r+0x1c>
 8007eb8:	42a9      	cmp	r1, r5
 8007eba:	d905      	bls.n	8007ec8 <_malloc_r+0x28>
 8007ebc:	230c      	movs	r3, #12
 8007ebe:	603b      	str	r3, [r7, #0]
 8007ec0:	2600      	movs	r6, #0
 8007ec2:	4630      	mov	r0, r6
 8007ec4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ec8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007f9c <_malloc_r+0xfc>
 8007ecc:	f000 f868 	bl	8007fa0 <__malloc_lock>
 8007ed0:	f8d8 3000 	ldr.w	r3, [r8]
 8007ed4:	461c      	mov	r4, r3
 8007ed6:	bb5c      	cbnz	r4, 8007f30 <_malloc_r+0x90>
 8007ed8:	4629      	mov	r1, r5
 8007eda:	4638      	mov	r0, r7
 8007edc:	f7ff ffc0 	bl	8007e60 <sbrk_aligned>
 8007ee0:	1c43      	adds	r3, r0, #1
 8007ee2:	4604      	mov	r4, r0
 8007ee4:	d155      	bne.n	8007f92 <_malloc_r+0xf2>
 8007ee6:	f8d8 4000 	ldr.w	r4, [r8]
 8007eea:	4626      	mov	r6, r4
 8007eec:	2e00      	cmp	r6, #0
 8007eee:	d145      	bne.n	8007f7c <_malloc_r+0xdc>
 8007ef0:	2c00      	cmp	r4, #0
 8007ef2:	d048      	beq.n	8007f86 <_malloc_r+0xe6>
 8007ef4:	6823      	ldr	r3, [r4, #0]
 8007ef6:	4631      	mov	r1, r6
 8007ef8:	4638      	mov	r0, r7
 8007efa:	eb04 0903 	add.w	r9, r4, r3
 8007efe:	f000 fa9f 	bl	8008440 <_sbrk_r>
 8007f02:	4581      	cmp	r9, r0
 8007f04:	d13f      	bne.n	8007f86 <_malloc_r+0xe6>
 8007f06:	6821      	ldr	r1, [r4, #0]
 8007f08:	1a6d      	subs	r5, r5, r1
 8007f0a:	4629      	mov	r1, r5
 8007f0c:	4638      	mov	r0, r7
 8007f0e:	f7ff ffa7 	bl	8007e60 <sbrk_aligned>
 8007f12:	3001      	adds	r0, #1
 8007f14:	d037      	beq.n	8007f86 <_malloc_r+0xe6>
 8007f16:	6823      	ldr	r3, [r4, #0]
 8007f18:	442b      	add	r3, r5
 8007f1a:	6023      	str	r3, [r4, #0]
 8007f1c:	f8d8 3000 	ldr.w	r3, [r8]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d038      	beq.n	8007f96 <_malloc_r+0xf6>
 8007f24:	685a      	ldr	r2, [r3, #4]
 8007f26:	42a2      	cmp	r2, r4
 8007f28:	d12b      	bne.n	8007f82 <_malloc_r+0xe2>
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	605a      	str	r2, [r3, #4]
 8007f2e:	e00f      	b.n	8007f50 <_malloc_r+0xb0>
 8007f30:	6822      	ldr	r2, [r4, #0]
 8007f32:	1b52      	subs	r2, r2, r5
 8007f34:	d41f      	bmi.n	8007f76 <_malloc_r+0xd6>
 8007f36:	2a0b      	cmp	r2, #11
 8007f38:	d917      	bls.n	8007f6a <_malloc_r+0xca>
 8007f3a:	1961      	adds	r1, r4, r5
 8007f3c:	42a3      	cmp	r3, r4
 8007f3e:	6025      	str	r5, [r4, #0]
 8007f40:	bf18      	it	ne
 8007f42:	6059      	strne	r1, [r3, #4]
 8007f44:	6863      	ldr	r3, [r4, #4]
 8007f46:	bf08      	it	eq
 8007f48:	f8c8 1000 	streq.w	r1, [r8]
 8007f4c:	5162      	str	r2, [r4, r5]
 8007f4e:	604b      	str	r3, [r1, #4]
 8007f50:	4638      	mov	r0, r7
 8007f52:	f104 060b 	add.w	r6, r4, #11
 8007f56:	f000 f829 	bl	8007fac <__malloc_unlock>
 8007f5a:	f026 0607 	bic.w	r6, r6, #7
 8007f5e:	1d23      	adds	r3, r4, #4
 8007f60:	1af2      	subs	r2, r6, r3
 8007f62:	d0ae      	beq.n	8007ec2 <_malloc_r+0x22>
 8007f64:	1b9b      	subs	r3, r3, r6
 8007f66:	50a3      	str	r3, [r4, r2]
 8007f68:	e7ab      	b.n	8007ec2 <_malloc_r+0x22>
 8007f6a:	42a3      	cmp	r3, r4
 8007f6c:	6862      	ldr	r2, [r4, #4]
 8007f6e:	d1dd      	bne.n	8007f2c <_malloc_r+0x8c>
 8007f70:	f8c8 2000 	str.w	r2, [r8]
 8007f74:	e7ec      	b.n	8007f50 <_malloc_r+0xb0>
 8007f76:	4623      	mov	r3, r4
 8007f78:	6864      	ldr	r4, [r4, #4]
 8007f7a:	e7ac      	b.n	8007ed6 <_malloc_r+0x36>
 8007f7c:	4634      	mov	r4, r6
 8007f7e:	6876      	ldr	r6, [r6, #4]
 8007f80:	e7b4      	b.n	8007eec <_malloc_r+0x4c>
 8007f82:	4613      	mov	r3, r2
 8007f84:	e7cc      	b.n	8007f20 <_malloc_r+0x80>
 8007f86:	230c      	movs	r3, #12
 8007f88:	603b      	str	r3, [r7, #0]
 8007f8a:	4638      	mov	r0, r7
 8007f8c:	f000 f80e 	bl	8007fac <__malloc_unlock>
 8007f90:	e797      	b.n	8007ec2 <_malloc_r+0x22>
 8007f92:	6025      	str	r5, [r4, #0]
 8007f94:	e7dc      	b.n	8007f50 <_malloc_r+0xb0>
 8007f96:	605b      	str	r3, [r3, #4]
 8007f98:	deff      	udf	#255	; 0xff
 8007f9a:	bf00      	nop
 8007f9c:	200016e0 	.word	0x200016e0

08007fa0 <__malloc_lock>:
 8007fa0:	4801      	ldr	r0, [pc, #4]	; (8007fa8 <__malloc_lock+0x8>)
 8007fa2:	f000 ba9a 	b.w	80084da <__retarget_lock_acquire_recursive>
 8007fa6:	bf00      	nop
 8007fa8:	20001828 	.word	0x20001828

08007fac <__malloc_unlock>:
 8007fac:	4801      	ldr	r0, [pc, #4]	; (8007fb4 <__malloc_unlock+0x8>)
 8007fae:	f000 ba95 	b.w	80084dc <__retarget_lock_release_recursive>
 8007fb2:	bf00      	nop
 8007fb4:	20001828 	.word	0x20001828

08007fb8 <std>:
 8007fb8:	2300      	movs	r3, #0
 8007fba:	b510      	push	{r4, lr}
 8007fbc:	4604      	mov	r4, r0
 8007fbe:	e9c0 3300 	strd	r3, r3, [r0]
 8007fc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007fc6:	6083      	str	r3, [r0, #8]
 8007fc8:	8181      	strh	r1, [r0, #12]
 8007fca:	6643      	str	r3, [r0, #100]	; 0x64
 8007fcc:	81c2      	strh	r2, [r0, #14]
 8007fce:	6183      	str	r3, [r0, #24]
 8007fd0:	4619      	mov	r1, r3
 8007fd2:	2208      	movs	r2, #8
 8007fd4:	305c      	adds	r0, #92	; 0x5c
 8007fd6:	f000 f9f7 	bl	80083c8 <memset>
 8007fda:	4b0d      	ldr	r3, [pc, #52]	; (8008010 <std+0x58>)
 8007fdc:	6263      	str	r3, [r4, #36]	; 0x24
 8007fde:	4b0d      	ldr	r3, [pc, #52]	; (8008014 <std+0x5c>)
 8007fe0:	62a3      	str	r3, [r4, #40]	; 0x28
 8007fe2:	4b0d      	ldr	r3, [pc, #52]	; (8008018 <std+0x60>)
 8007fe4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007fe6:	4b0d      	ldr	r3, [pc, #52]	; (800801c <std+0x64>)
 8007fe8:	6323      	str	r3, [r4, #48]	; 0x30
 8007fea:	4b0d      	ldr	r3, [pc, #52]	; (8008020 <std+0x68>)
 8007fec:	6224      	str	r4, [r4, #32]
 8007fee:	429c      	cmp	r4, r3
 8007ff0:	d006      	beq.n	8008000 <std+0x48>
 8007ff2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007ff6:	4294      	cmp	r4, r2
 8007ff8:	d002      	beq.n	8008000 <std+0x48>
 8007ffa:	33d0      	adds	r3, #208	; 0xd0
 8007ffc:	429c      	cmp	r4, r3
 8007ffe:	d105      	bne.n	800800c <std+0x54>
 8008000:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008004:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008008:	f000 ba66 	b.w	80084d8 <__retarget_lock_init_recursive>
 800800c:	bd10      	pop	{r4, pc}
 800800e:	bf00      	nop
 8008010:	08008219 	.word	0x08008219
 8008014:	0800823b 	.word	0x0800823b
 8008018:	08008273 	.word	0x08008273
 800801c:	08008297 	.word	0x08008297
 8008020:	200016e8 	.word	0x200016e8

08008024 <stdio_exit_handler>:
 8008024:	4a02      	ldr	r2, [pc, #8]	; (8008030 <stdio_exit_handler+0xc>)
 8008026:	4903      	ldr	r1, [pc, #12]	; (8008034 <stdio_exit_handler+0x10>)
 8008028:	4803      	ldr	r0, [pc, #12]	; (8008038 <stdio_exit_handler+0x14>)
 800802a:	f000 b869 	b.w	8008100 <_fwalk_sglue>
 800802e:	bf00      	nop
 8008030:	20000f98 	.word	0x20000f98
 8008034:	08008c49 	.word	0x08008c49
 8008038:	20000fa4 	.word	0x20000fa4

0800803c <cleanup_stdio>:
 800803c:	6841      	ldr	r1, [r0, #4]
 800803e:	4b0c      	ldr	r3, [pc, #48]	; (8008070 <cleanup_stdio+0x34>)
 8008040:	4299      	cmp	r1, r3
 8008042:	b510      	push	{r4, lr}
 8008044:	4604      	mov	r4, r0
 8008046:	d001      	beq.n	800804c <cleanup_stdio+0x10>
 8008048:	f000 fdfe 	bl	8008c48 <_fflush_r>
 800804c:	68a1      	ldr	r1, [r4, #8]
 800804e:	4b09      	ldr	r3, [pc, #36]	; (8008074 <cleanup_stdio+0x38>)
 8008050:	4299      	cmp	r1, r3
 8008052:	d002      	beq.n	800805a <cleanup_stdio+0x1e>
 8008054:	4620      	mov	r0, r4
 8008056:	f000 fdf7 	bl	8008c48 <_fflush_r>
 800805a:	68e1      	ldr	r1, [r4, #12]
 800805c:	4b06      	ldr	r3, [pc, #24]	; (8008078 <cleanup_stdio+0x3c>)
 800805e:	4299      	cmp	r1, r3
 8008060:	d004      	beq.n	800806c <cleanup_stdio+0x30>
 8008062:	4620      	mov	r0, r4
 8008064:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008068:	f000 bdee 	b.w	8008c48 <_fflush_r>
 800806c:	bd10      	pop	{r4, pc}
 800806e:	bf00      	nop
 8008070:	200016e8 	.word	0x200016e8
 8008074:	20001750 	.word	0x20001750
 8008078:	200017b8 	.word	0x200017b8

0800807c <global_stdio_init.part.0>:
 800807c:	b510      	push	{r4, lr}
 800807e:	4b0b      	ldr	r3, [pc, #44]	; (80080ac <global_stdio_init.part.0+0x30>)
 8008080:	4c0b      	ldr	r4, [pc, #44]	; (80080b0 <global_stdio_init.part.0+0x34>)
 8008082:	4a0c      	ldr	r2, [pc, #48]	; (80080b4 <global_stdio_init.part.0+0x38>)
 8008084:	601a      	str	r2, [r3, #0]
 8008086:	4620      	mov	r0, r4
 8008088:	2200      	movs	r2, #0
 800808a:	2104      	movs	r1, #4
 800808c:	f7ff ff94 	bl	8007fb8 <std>
 8008090:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008094:	2201      	movs	r2, #1
 8008096:	2109      	movs	r1, #9
 8008098:	f7ff ff8e 	bl	8007fb8 <std>
 800809c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80080a0:	2202      	movs	r2, #2
 80080a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080a6:	2112      	movs	r1, #18
 80080a8:	f7ff bf86 	b.w	8007fb8 <std>
 80080ac:	20001820 	.word	0x20001820
 80080b0:	200016e8 	.word	0x200016e8
 80080b4:	08008025 	.word	0x08008025

080080b8 <__sfp_lock_acquire>:
 80080b8:	4801      	ldr	r0, [pc, #4]	; (80080c0 <__sfp_lock_acquire+0x8>)
 80080ba:	f000 ba0e 	b.w	80084da <__retarget_lock_acquire_recursive>
 80080be:	bf00      	nop
 80080c0:	20001829 	.word	0x20001829

080080c4 <__sfp_lock_release>:
 80080c4:	4801      	ldr	r0, [pc, #4]	; (80080cc <__sfp_lock_release+0x8>)
 80080c6:	f000 ba09 	b.w	80084dc <__retarget_lock_release_recursive>
 80080ca:	bf00      	nop
 80080cc:	20001829 	.word	0x20001829

080080d0 <__sinit>:
 80080d0:	b510      	push	{r4, lr}
 80080d2:	4604      	mov	r4, r0
 80080d4:	f7ff fff0 	bl	80080b8 <__sfp_lock_acquire>
 80080d8:	6a23      	ldr	r3, [r4, #32]
 80080da:	b11b      	cbz	r3, 80080e4 <__sinit+0x14>
 80080dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080e0:	f7ff bff0 	b.w	80080c4 <__sfp_lock_release>
 80080e4:	4b04      	ldr	r3, [pc, #16]	; (80080f8 <__sinit+0x28>)
 80080e6:	6223      	str	r3, [r4, #32]
 80080e8:	4b04      	ldr	r3, [pc, #16]	; (80080fc <__sinit+0x2c>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d1f5      	bne.n	80080dc <__sinit+0xc>
 80080f0:	f7ff ffc4 	bl	800807c <global_stdio_init.part.0>
 80080f4:	e7f2      	b.n	80080dc <__sinit+0xc>
 80080f6:	bf00      	nop
 80080f8:	0800803d 	.word	0x0800803d
 80080fc:	20001820 	.word	0x20001820

08008100 <_fwalk_sglue>:
 8008100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008104:	4607      	mov	r7, r0
 8008106:	4688      	mov	r8, r1
 8008108:	4614      	mov	r4, r2
 800810a:	2600      	movs	r6, #0
 800810c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008110:	f1b9 0901 	subs.w	r9, r9, #1
 8008114:	d505      	bpl.n	8008122 <_fwalk_sglue+0x22>
 8008116:	6824      	ldr	r4, [r4, #0]
 8008118:	2c00      	cmp	r4, #0
 800811a:	d1f7      	bne.n	800810c <_fwalk_sglue+0xc>
 800811c:	4630      	mov	r0, r6
 800811e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008122:	89ab      	ldrh	r3, [r5, #12]
 8008124:	2b01      	cmp	r3, #1
 8008126:	d907      	bls.n	8008138 <_fwalk_sglue+0x38>
 8008128:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800812c:	3301      	adds	r3, #1
 800812e:	d003      	beq.n	8008138 <_fwalk_sglue+0x38>
 8008130:	4629      	mov	r1, r5
 8008132:	4638      	mov	r0, r7
 8008134:	47c0      	blx	r8
 8008136:	4306      	orrs	r6, r0
 8008138:	3568      	adds	r5, #104	; 0x68
 800813a:	e7e9      	b.n	8008110 <_fwalk_sglue+0x10>

0800813c <iprintf>:
 800813c:	b40f      	push	{r0, r1, r2, r3}
 800813e:	b507      	push	{r0, r1, r2, lr}
 8008140:	4906      	ldr	r1, [pc, #24]	; (800815c <iprintf+0x20>)
 8008142:	ab04      	add	r3, sp, #16
 8008144:	6808      	ldr	r0, [r1, #0]
 8008146:	f853 2b04 	ldr.w	r2, [r3], #4
 800814a:	6881      	ldr	r1, [r0, #8]
 800814c:	9301      	str	r3, [sp, #4]
 800814e:	f000 fa4b 	bl	80085e8 <_vfiprintf_r>
 8008152:	b003      	add	sp, #12
 8008154:	f85d eb04 	ldr.w	lr, [sp], #4
 8008158:	b004      	add	sp, #16
 800815a:	4770      	bx	lr
 800815c:	20000ff0 	.word	0x20000ff0

08008160 <_puts_r>:
 8008160:	6a03      	ldr	r3, [r0, #32]
 8008162:	b570      	push	{r4, r5, r6, lr}
 8008164:	6884      	ldr	r4, [r0, #8]
 8008166:	4605      	mov	r5, r0
 8008168:	460e      	mov	r6, r1
 800816a:	b90b      	cbnz	r3, 8008170 <_puts_r+0x10>
 800816c:	f7ff ffb0 	bl	80080d0 <__sinit>
 8008170:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008172:	07db      	lsls	r3, r3, #31
 8008174:	d405      	bmi.n	8008182 <_puts_r+0x22>
 8008176:	89a3      	ldrh	r3, [r4, #12]
 8008178:	0598      	lsls	r0, r3, #22
 800817a:	d402      	bmi.n	8008182 <_puts_r+0x22>
 800817c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800817e:	f000 f9ac 	bl	80084da <__retarget_lock_acquire_recursive>
 8008182:	89a3      	ldrh	r3, [r4, #12]
 8008184:	0719      	lsls	r1, r3, #28
 8008186:	d513      	bpl.n	80081b0 <_puts_r+0x50>
 8008188:	6923      	ldr	r3, [r4, #16]
 800818a:	b18b      	cbz	r3, 80081b0 <_puts_r+0x50>
 800818c:	3e01      	subs	r6, #1
 800818e:	68a3      	ldr	r3, [r4, #8]
 8008190:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008194:	3b01      	subs	r3, #1
 8008196:	60a3      	str	r3, [r4, #8]
 8008198:	b9e9      	cbnz	r1, 80081d6 <_puts_r+0x76>
 800819a:	2b00      	cmp	r3, #0
 800819c:	da2e      	bge.n	80081fc <_puts_r+0x9c>
 800819e:	4622      	mov	r2, r4
 80081a0:	210a      	movs	r1, #10
 80081a2:	4628      	mov	r0, r5
 80081a4:	f000 f87b 	bl	800829e <__swbuf_r>
 80081a8:	3001      	adds	r0, #1
 80081aa:	d007      	beq.n	80081bc <_puts_r+0x5c>
 80081ac:	250a      	movs	r5, #10
 80081ae:	e007      	b.n	80081c0 <_puts_r+0x60>
 80081b0:	4621      	mov	r1, r4
 80081b2:	4628      	mov	r0, r5
 80081b4:	f000 f8b0 	bl	8008318 <__swsetup_r>
 80081b8:	2800      	cmp	r0, #0
 80081ba:	d0e7      	beq.n	800818c <_puts_r+0x2c>
 80081bc:	f04f 35ff 	mov.w	r5, #4294967295
 80081c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80081c2:	07da      	lsls	r2, r3, #31
 80081c4:	d405      	bmi.n	80081d2 <_puts_r+0x72>
 80081c6:	89a3      	ldrh	r3, [r4, #12]
 80081c8:	059b      	lsls	r3, r3, #22
 80081ca:	d402      	bmi.n	80081d2 <_puts_r+0x72>
 80081cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80081ce:	f000 f985 	bl	80084dc <__retarget_lock_release_recursive>
 80081d2:	4628      	mov	r0, r5
 80081d4:	bd70      	pop	{r4, r5, r6, pc}
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	da04      	bge.n	80081e4 <_puts_r+0x84>
 80081da:	69a2      	ldr	r2, [r4, #24]
 80081dc:	429a      	cmp	r2, r3
 80081de:	dc06      	bgt.n	80081ee <_puts_r+0x8e>
 80081e0:	290a      	cmp	r1, #10
 80081e2:	d004      	beq.n	80081ee <_puts_r+0x8e>
 80081e4:	6823      	ldr	r3, [r4, #0]
 80081e6:	1c5a      	adds	r2, r3, #1
 80081e8:	6022      	str	r2, [r4, #0]
 80081ea:	7019      	strb	r1, [r3, #0]
 80081ec:	e7cf      	b.n	800818e <_puts_r+0x2e>
 80081ee:	4622      	mov	r2, r4
 80081f0:	4628      	mov	r0, r5
 80081f2:	f000 f854 	bl	800829e <__swbuf_r>
 80081f6:	3001      	adds	r0, #1
 80081f8:	d1c9      	bne.n	800818e <_puts_r+0x2e>
 80081fa:	e7df      	b.n	80081bc <_puts_r+0x5c>
 80081fc:	6823      	ldr	r3, [r4, #0]
 80081fe:	250a      	movs	r5, #10
 8008200:	1c5a      	adds	r2, r3, #1
 8008202:	6022      	str	r2, [r4, #0]
 8008204:	701d      	strb	r5, [r3, #0]
 8008206:	e7db      	b.n	80081c0 <_puts_r+0x60>

08008208 <puts>:
 8008208:	4b02      	ldr	r3, [pc, #8]	; (8008214 <puts+0xc>)
 800820a:	4601      	mov	r1, r0
 800820c:	6818      	ldr	r0, [r3, #0]
 800820e:	f7ff bfa7 	b.w	8008160 <_puts_r>
 8008212:	bf00      	nop
 8008214:	20000ff0 	.word	0x20000ff0

08008218 <__sread>:
 8008218:	b510      	push	{r4, lr}
 800821a:	460c      	mov	r4, r1
 800821c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008220:	f000 f8fc 	bl	800841c <_read_r>
 8008224:	2800      	cmp	r0, #0
 8008226:	bfab      	itete	ge
 8008228:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800822a:	89a3      	ldrhlt	r3, [r4, #12]
 800822c:	181b      	addge	r3, r3, r0
 800822e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008232:	bfac      	ite	ge
 8008234:	6563      	strge	r3, [r4, #84]	; 0x54
 8008236:	81a3      	strhlt	r3, [r4, #12]
 8008238:	bd10      	pop	{r4, pc}

0800823a <__swrite>:
 800823a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800823e:	461f      	mov	r7, r3
 8008240:	898b      	ldrh	r3, [r1, #12]
 8008242:	05db      	lsls	r3, r3, #23
 8008244:	4605      	mov	r5, r0
 8008246:	460c      	mov	r4, r1
 8008248:	4616      	mov	r6, r2
 800824a:	d505      	bpl.n	8008258 <__swrite+0x1e>
 800824c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008250:	2302      	movs	r3, #2
 8008252:	2200      	movs	r2, #0
 8008254:	f000 f8d0 	bl	80083f8 <_lseek_r>
 8008258:	89a3      	ldrh	r3, [r4, #12]
 800825a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800825e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008262:	81a3      	strh	r3, [r4, #12]
 8008264:	4632      	mov	r2, r6
 8008266:	463b      	mov	r3, r7
 8008268:	4628      	mov	r0, r5
 800826a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800826e:	f000 b8f7 	b.w	8008460 <_write_r>

08008272 <__sseek>:
 8008272:	b510      	push	{r4, lr}
 8008274:	460c      	mov	r4, r1
 8008276:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800827a:	f000 f8bd 	bl	80083f8 <_lseek_r>
 800827e:	1c43      	adds	r3, r0, #1
 8008280:	89a3      	ldrh	r3, [r4, #12]
 8008282:	bf15      	itete	ne
 8008284:	6560      	strne	r0, [r4, #84]	; 0x54
 8008286:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800828a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800828e:	81a3      	strheq	r3, [r4, #12]
 8008290:	bf18      	it	ne
 8008292:	81a3      	strhne	r3, [r4, #12]
 8008294:	bd10      	pop	{r4, pc}

08008296 <__sclose>:
 8008296:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800829a:	f000 b89d 	b.w	80083d8 <_close_r>

0800829e <__swbuf_r>:
 800829e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082a0:	460e      	mov	r6, r1
 80082a2:	4614      	mov	r4, r2
 80082a4:	4605      	mov	r5, r0
 80082a6:	b118      	cbz	r0, 80082b0 <__swbuf_r+0x12>
 80082a8:	6a03      	ldr	r3, [r0, #32]
 80082aa:	b90b      	cbnz	r3, 80082b0 <__swbuf_r+0x12>
 80082ac:	f7ff ff10 	bl	80080d0 <__sinit>
 80082b0:	69a3      	ldr	r3, [r4, #24]
 80082b2:	60a3      	str	r3, [r4, #8]
 80082b4:	89a3      	ldrh	r3, [r4, #12]
 80082b6:	071a      	lsls	r2, r3, #28
 80082b8:	d525      	bpl.n	8008306 <__swbuf_r+0x68>
 80082ba:	6923      	ldr	r3, [r4, #16]
 80082bc:	b31b      	cbz	r3, 8008306 <__swbuf_r+0x68>
 80082be:	6823      	ldr	r3, [r4, #0]
 80082c0:	6922      	ldr	r2, [r4, #16]
 80082c2:	1a98      	subs	r0, r3, r2
 80082c4:	6963      	ldr	r3, [r4, #20]
 80082c6:	b2f6      	uxtb	r6, r6
 80082c8:	4283      	cmp	r3, r0
 80082ca:	4637      	mov	r7, r6
 80082cc:	dc04      	bgt.n	80082d8 <__swbuf_r+0x3a>
 80082ce:	4621      	mov	r1, r4
 80082d0:	4628      	mov	r0, r5
 80082d2:	f000 fcb9 	bl	8008c48 <_fflush_r>
 80082d6:	b9e0      	cbnz	r0, 8008312 <__swbuf_r+0x74>
 80082d8:	68a3      	ldr	r3, [r4, #8]
 80082da:	3b01      	subs	r3, #1
 80082dc:	60a3      	str	r3, [r4, #8]
 80082de:	6823      	ldr	r3, [r4, #0]
 80082e0:	1c5a      	adds	r2, r3, #1
 80082e2:	6022      	str	r2, [r4, #0]
 80082e4:	701e      	strb	r6, [r3, #0]
 80082e6:	6962      	ldr	r2, [r4, #20]
 80082e8:	1c43      	adds	r3, r0, #1
 80082ea:	429a      	cmp	r2, r3
 80082ec:	d004      	beq.n	80082f8 <__swbuf_r+0x5a>
 80082ee:	89a3      	ldrh	r3, [r4, #12]
 80082f0:	07db      	lsls	r3, r3, #31
 80082f2:	d506      	bpl.n	8008302 <__swbuf_r+0x64>
 80082f4:	2e0a      	cmp	r6, #10
 80082f6:	d104      	bne.n	8008302 <__swbuf_r+0x64>
 80082f8:	4621      	mov	r1, r4
 80082fa:	4628      	mov	r0, r5
 80082fc:	f000 fca4 	bl	8008c48 <_fflush_r>
 8008300:	b938      	cbnz	r0, 8008312 <__swbuf_r+0x74>
 8008302:	4638      	mov	r0, r7
 8008304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008306:	4621      	mov	r1, r4
 8008308:	4628      	mov	r0, r5
 800830a:	f000 f805 	bl	8008318 <__swsetup_r>
 800830e:	2800      	cmp	r0, #0
 8008310:	d0d5      	beq.n	80082be <__swbuf_r+0x20>
 8008312:	f04f 37ff 	mov.w	r7, #4294967295
 8008316:	e7f4      	b.n	8008302 <__swbuf_r+0x64>

08008318 <__swsetup_r>:
 8008318:	b538      	push	{r3, r4, r5, lr}
 800831a:	4b2a      	ldr	r3, [pc, #168]	; (80083c4 <__swsetup_r+0xac>)
 800831c:	4605      	mov	r5, r0
 800831e:	6818      	ldr	r0, [r3, #0]
 8008320:	460c      	mov	r4, r1
 8008322:	b118      	cbz	r0, 800832c <__swsetup_r+0x14>
 8008324:	6a03      	ldr	r3, [r0, #32]
 8008326:	b90b      	cbnz	r3, 800832c <__swsetup_r+0x14>
 8008328:	f7ff fed2 	bl	80080d0 <__sinit>
 800832c:	89a3      	ldrh	r3, [r4, #12]
 800832e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008332:	0718      	lsls	r0, r3, #28
 8008334:	d422      	bmi.n	800837c <__swsetup_r+0x64>
 8008336:	06d9      	lsls	r1, r3, #27
 8008338:	d407      	bmi.n	800834a <__swsetup_r+0x32>
 800833a:	2309      	movs	r3, #9
 800833c:	602b      	str	r3, [r5, #0]
 800833e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008342:	81a3      	strh	r3, [r4, #12]
 8008344:	f04f 30ff 	mov.w	r0, #4294967295
 8008348:	e034      	b.n	80083b4 <__swsetup_r+0x9c>
 800834a:	0758      	lsls	r0, r3, #29
 800834c:	d512      	bpl.n	8008374 <__swsetup_r+0x5c>
 800834e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008350:	b141      	cbz	r1, 8008364 <__swsetup_r+0x4c>
 8008352:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008356:	4299      	cmp	r1, r3
 8008358:	d002      	beq.n	8008360 <__swsetup_r+0x48>
 800835a:	4628      	mov	r0, r5
 800835c:	f000 f8ce 	bl	80084fc <_free_r>
 8008360:	2300      	movs	r3, #0
 8008362:	6363      	str	r3, [r4, #52]	; 0x34
 8008364:	89a3      	ldrh	r3, [r4, #12]
 8008366:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800836a:	81a3      	strh	r3, [r4, #12]
 800836c:	2300      	movs	r3, #0
 800836e:	6063      	str	r3, [r4, #4]
 8008370:	6923      	ldr	r3, [r4, #16]
 8008372:	6023      	str	r3, [r4, #0]
 8008374:	89a3      	ldrh	r3, [r4, #12]
 8008376:	f043 0308 	orr.w	r3, r3, #8
 800837a:	81a3      	strh	r3, [r4, #12]
 800837c:	6923      	ldr	r3, [r4, #16]
 800837e:	b94b      	cbnz	r3, 8008394 <__swsetup_r+0x7c>
 8008380:	89a3      	ldrh	r3, [r4, #12]
 8008382:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008386:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800838a:	d003      	beq.n	8008394 <__swsetup_r+0x7c>
 800838c:	4621      	mov	r1, r4
 800838e:	4628      	mov	r0, r5
 8008390:	f000 fca8 	bl	8008ce4 <__smakebuf_r>
 8008394:	89a0      	ldrh	r0, [r4, #12]
 8008396:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800839a:	f010 0301 	ands.w	r3, r0, #1
 800839e:	d00a      	beq.n	80083b6 <__swsetup_r+0x9e>
 80083a0:	2300      	movs	r3, #0
 80083a2:	60a3      	str	r3, [r4, #8]
 80083a4:	6963      	ldr	r3, [r4, #20]
 80083a6:	425b      	negs	r3, r3
 80083a8:	61a3      	str	r3, [r4, #24]
 80083aa:	6923      	ldr	r3, [r4, #16]
 80083ac:	b943      	cbnz	r3, 80083c0 <__swsetup_r+0xa8>
 80083ae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80083b2:	d1c4      	bne.n	800833e <__swsetup_r+0x26>
 80083b4:	bd38      	pop	{r3, r4, r5, pc}
 80083b6:	0781      	lsls	r1, r0, #30
 80083b8:	bf58      	it	pl
 80083ba:	6963      	ldrpl	r3, [r4, #20]
 80083bc:	60a3      	str	r3, [r4, #8]
 80083be:	e7f4      	b.n	80083aa <__swsetup_r+0x92>
 80083c0:	2000      	movs	r0, #0
 80083c2:	e7f7      	b.n	80083b4 <__swsetup_r+0x9c>
 80083c4:	20000ff0 	.word	0x20000ff0

080083c8 <memset>:
 80083c8:	4402      	add	r2, r0
 80083ca:	4603      	mov	r3, r0
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d100      	bne.n	80083d2 <memset+0xa>
 80083d0:	4770      	bx	lr
 80083d2:	f803 1b01 	strb.w	r1, [r3], #1
 80083d6:	e7f9      	b.n	80083cc <memset+0x4>

080083d8 <_close_r>:
 80083d8:	b538      	push	{r3, r4, r5, lr}
 80083da:	4d06      	ldr	r5, [pc, #24]	; (80083f4 <_close_r+0x1c>)
 80083dc:	2300      	movs	r3, #0
 80083de:	4604      	mov	r4, r0
 80083e0:	4608      	mov	r0, r1
 80083e2:	602b      	str	r3, [r5, #0]
 80083e4:	f000 fe10 	bl	8009008 <_close>
 80083e8:	1c43      	adds	r3, r0, #1
 80083ea:	d102      	bne.n	80083f2 <_close_r+0x1a>
 80083ec:	682b      	ldr	r3, [r5, #0]
 80083ee:	b103      	cbz	r3, 80083f2 <_close_r+0x1a>
 80083f0:	6023      	str	r3, [r4, #0]
 80083f2:	bd38      	pop	{r3, r4, r5, pc}
 80083f4:	20001824 	.word	0x20001824

080083f8 <_lseek_r>:
 80083f8:	b538      	push	{r3, r4, r5, lr}
 80083fa:	4d07      	ldr	r5, [pc, #28]	; (8008418 <_lseek_r+0x20>)
 80083fc:	4604      	mov	r4, r0
 80083fe:	4608      	mov	r0, r1
 8008400:	4611      	mov	r1, r2
 8008402:	2200      	movs	r2, #0
 8008404:	602a      	str	r2, [r5, #0]
 8008406:	461a      	mov	r2, r3
 8008408:	f000 fe16 	bl	8009038 <_lseek>
 800840c:	1c43      	adds	r3, r0, #1
 800840e:	d102      	bne.n	8008416 <_lseek_r+0x1e>
 8008410:	682b      	ldr	r3, [r5, #0]
 8008412:	b103      	cbz	r3, 8008416 <_lseek_r+0x1e>
 8008414:	6023      	str	r3, [r4, #0]
 8008416:	bd38      	pop	{r3, r4, r5, pc}
 8008418:	20001824 	.word	0x20001824

0800841c <_read_r>:
 800841c:	b538      	push	{r3, r4, r5, lr}
 800841e:	4d07      	ldr	r5, [pc, #28]	; (800843c <_read_r+0x20>)
 8008420:	4604      	mov	r4, r0
 8008422:	4608      	mov	r0, r1
 8008424:	4611      	mov	r1, r2
 8008426:	2200      	movs	r2, #0
 8008428:	602a      	str	r2, [r5, #0]
 800842a:	461a      	mov	r2, r3
 800842c:	f000 fe0c 	bl	8009048 <_read>
 8008430:	1c43      	adds	r3, r0, #1
 8008432:	d102      	bne.n	800843a <_read_r+0x1e>
 8008434:	682b      	ldr	r3, [r5, #0]
 8008436:	b103      	cbz	r3, 800843a <_read_r+0x1e>
 8008438:	6023      	str	r3, [r4, #0]
 800843a:	bd38      	pop	{r3, r4, r5, pc}
 800843c:	20001824 	.word	0x20001824

08008440 <_sbrk_r>:
 8008440:	b538      	push	{r3, r4, r5, lr}
 8008442:	4d06      	ldr	r5, [pc, #24]	; (800845c <_sbrk_r+0x1c>)
 8008444:	2300      	movs	r3, #0
 8008446:	4604      	mov	r4, r0
 8008448:	4608      	mov	r0, r1
 800844a:	602b      	str	r3, [r5, #0]
 800844c:	f7f8 fa6c 	bl	8000928 <_sbrk>
 8008450:	1c43      	adds	r3, r0, #1
 8008452:	d102      	bne.n	800845a <_sbrk_r+0x1a>
 8008454:	682b      	ldr	r3, [r5, #0]
 8008456:	b103      	cbz	r3, 800845a <_sbrk_r+0x1a>
 8008458:	6023      	str	r3, [r4, #0]
 800845a:	bd38      	pop	{r3, r4, r5, pc}
 800845c:	20001824 	.word	0x20001824

08008460 <_write_r>:
 8008460:	b538      	push	{r3, r4, r5, lr}
 8008462:	4d07      	ldr	r5, [pc, #28]	; (8008480 <_write_r+0x20>)
 8008464:	4604      	mov	r4, r0
 8008466:	4608      	mov	r0, r1
 8008468:	4611      	mov	r1, r2
 800846a:	2200      	movs	r2, #0
 800846c:	602a      	str	r2, [r5, #0]
 800846e:	461a      	mov	r2, r3
 8008470:	f000 fdf2 	bl	8009058 <_write>
 8008474:	1c43      	adds	r3, r0, #1
 8008476:	d102      	bne.n	800847e <_write_r+0x1e>
 8008478:	682b      	ldr	r3, [r5, #0]
 800847a:	b103      	cbz	r3, 800847e <_write_r+0x1e>
 800847c:	6023      	str	r3, [r4, #0]
 800847e:	bd38      	pop	{r3, r4, r5, pc}
 8008480:	20001824 	.word	0x20001824

08008484 <__errno>:
 8008484:	4b01      	ldr	r3, [pc, #4]	; (800848c <__errno+0x8>)
 8008486:	6818      	ldr	r0, [r3, #0]
 8008488:	4770      	bx	lr
 800848a:	bf00      	nop
 800848c:	20000ff0 	.word	0x20000ff0

08008490 <__libc_init_array>:
 8008490:	b570      	push	{r4, r5, r6, lr}
 8008492:	4d0d      	ldr	r5, [pc, #52]	; (80084c8 <__libc_init_array+0x38>)
 8008494:	4c0d      	ldr	r4, [pc, #52]	; (80084cc <__libc_init_array+0x3c>)
 8008496:	1b64      	subs	r4, r4, r5
 8008498:	10a4      	asrs	r4, r4, #2
 800849a:	2600      	movs	r6, #0
 800849c:	42a6      	cmp	r6, r4
 800849e:	d109      	bne.n	80084b4 <__libc_init_array+0x24>
 80084a0:	4d0b      	ldr	r5, [pc, #44]	; (80084d0 <__libc_init_array+0x40>)
 80084a2:	4c0c      	ldr	r4, [pc, #48]	; (80084d4 <__libc_init_array+0x44>)
 80084a4:	f000 fde0 	bl	8009068 <_init>
 80084a8:	1b64      	subs	r4, r4, r5
 80084aa:	10a4      	asrs	r4, r4, #2
 80084ac:	2600      	movs	r6, #0
 80084ae:	42a6      	cmp	r6, r4
 80084b0:	d105      	bne.n	80084be <__libc_init_array+0x2e>
 80084b2:	bd70      	pop	{r4, r5, r6, pc}
 80084b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80084b8:	4798      	blx	r3
 80084ba:	3601      	adds	r6, #1
 80084bc:	e7ee      	b.n	800849c <__libc_init_array+0xc>
 80084be:	f855 3b04 	ldr.w	r3, [r5], #4
 80084c2:	4798      	blx	r3
 80084c4:	3601      	adds	r6, #1
 80084c6:	e7f2      	b.n	80084ae <__libc_init_array+0x1e>
 80084c8:	0801421c 	.word	0x0801421c
 80084cc:	0801421c 	.word	0x0801421c
 80084d0:	0801421c 	.word	0x0801421c
 80084d4:	08014220 	.word	0x08014220

080084d8 <__retarget_lock_init_recursive>:
 80084d8:	4770      	bx	lr

080084da <__retarget_lock_acquire_recursive>:
 80084da:	4770      	bx	lr

080084dc <__retarget_lock_release_recursive>:
 80084dc:	4770      	bx	lr

080084de <memcpy>:
 80084de:	440a      	add	r2, r1
 80084e0:	4291      	cmp	r1, r2
 80084e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80084e6:	d100      	bne.n	80084ea <memcpy+0xc>
 80084e8:	4770      	bx	lr
 80084ea:	b510      	push	{r4, lr}
 80084ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084f4:	4291      	cmp	r1, r2
 80084f6:	d1f9      	bne.n	80084ec <memcpy+0xe>
 80084f8:	bd10      	pop	{r4, pc}
	...

080084fc <_free_r>:
 80084fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80084fe:	2900      	cmp	r1, #0
 8008500:	d044      	beq.n	800858c <_free_r+0x90>
 8008502:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008506:	9001      	str	r0, [sp, #4]
 8008508:	2b00      	cmp	r3, #0
 800850a:	f1a1 0404 	sub.w	r4, r1, #4
 800850e:	bfb8      	it	lt
 8008510:	18e4      	addlt	r4, r4, r3
 8008512:	f7ff fd45 	bl	8007fa0 <__malloc_lock>
 8008516:	4a1e      	ldr	r2, [pc, #120]	; (8008590 <_free_r+0x94>)
 8008518:	9801      	ldr	r0, [sp, #4]
 800851a:	6813      	ldr	r3, [r2, #0]
 800851c:	b933      	cbnz	r3, 800852c <_free_r+0x30>
 800851e:	6063      	str	r3, [r4, #4]
 8008520:	6014      	str	r4, [r2, #0]
 8008522:	b003      	add	sp, #12
 8008524:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008528:	f7ff bd40 	b.w	8007fac <__malloc_unlock>
 800852c:	42a3      	cmp	r3, r4
 800852e:	d908      	bls.n	8008542 <_free_r+0x46>
 8008530:	6825      	ldr	r5, [r4, #0]
 8008532:	1961      	adds	r1, r4, r5
 8008534:	428b      	cmp	r3, r1
 8008536:	bf01      	itttt	eq
 8008538:	6819      	ldreq	r1, [r3, #0]
 800853a:	685b      	ldreq	r3, [r3, #4]
 800853c:	1949      	addeq	r1, r1, r5
 800853e:	6021      	streq	r1, [r4, #0]
 8008540:	e7ed      	b.n	800851e <_free_r+0x22>
 8008542:	461a      	mov	r2, r3
 8008544:	685b      	ldr	r3, [r3, #4]
 8008546:	b10b      	cbz	r3, 800854c <_free_r+0x50>
 8008548:	42a3      	cmp	r3, r4
 800854a:	d9fa      	bls.n	8008542 <_free_r+0x46>
 800854c:	6811      	ldr	r1, [r2, #0]
 800854e:	1855      	adds	r5, r2, r1
 8008550:	42a5      	cmp	r5, r4
 8008552:	d10b      	bne.n	800856c <_free_r+0x70>
 8008554:	6824      	ldr	r4, [r4, #0]
 8008556:	4421      	add	r1, r4
 8008558:	1854      	adds	r4, r2, r1
 800855a:	42a3      	cmp	r3, r4
 800855c:	6011      	str	r1, [r2, #0]
 800855e:	d1e0      	bne.n	8008522 <_free_r+0x26>
 8008560:	681c      	ldr	r4, [r3, #0]
 8008562:	685b      	ldr	r3, [r3, #4]
 8008564:	6053      	str	r3, [r2, #4]
 8008566:	440c      	add	r4, r1
 8008568:	6014      	str	r4, [r2, #0]
 800856a:	e7da      	b.n	8008522 <_free_r+0x26>
 800856c:	d902      	bls.n	8008574 <_free_r+0x78>
 800856e:	230c      	movs	r3, #12
 8008570:	6003      	str	r3, [r0, #0]
 8008572:	e7d6      	b.n	8008522 <_free_r+0x26>
 8008574:	6825      	ldr	r5, [r4, #0]
 8008576:	1961      	adds	r1, r4, r5
 8008578:	428b      	cmp	r3, r1
 800857a:	bf04      	itt	eq
 800857c:	6819      	ldreq	r1, [r3, #0]
 800857e:	685b      	ldreq	r3, [r3, #4]
 8008580:	6063      	str	r3, [r4, #4]
 8008582:	bf04      	itt	eq
 8008584:	1949      	addeq	r1, r1, r5
 8008586:	6021      	streq	r1, [r4, #0]
 8008588:	6054      	str	r4, [r2, #4]
 800858a:	e7ca      	b.n	8008522 <_free_r+0x26>
 800858c:	b003      	add	sp, #12
 800858e:	bd30      	pop	{r4, r5, pc}
 8008590:	200016e0 	.word	0x200016e0

08008594 <__sfputc_r>:
 8008594:	6893      	ldr	r3, [r2, #8]
 8008596:	3b01      	subs	r3, #1
 8008598:	2b00      	cmp	r3, #0
 800859a:	b410      	push	{r4}
 800859c:	6093      	str	r3, [r2, #8]
 800859e:	da08      	bge.n	80085b2 <__sfputc_r+0x1e>
 80085a0:	6994      	ldr	r4, [r2, #24]
 80085a2:	42a3      	cmp	r3, r4
 80085a4:	db01      	blt.n	80085aa <__sfputc_r+0x16>
 80085a6:	290a      	cmp	r1, #10
 80085a8:	d103      	bne.n	80085b2 <__sfputc_r+0x1e>
 80085aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80085ae:	f7ff be76 	b.w	800829e <__swbuf_r>
 80085b2:	6813      	ldr	r3, [r2, #0]
 80085b4:	1c58      	adds	r0, r3, #1
 80085b6:	6010      	str	r0, [r2, #0]
 80085b8:	7019      	strb	r1, [r3, #0]
 80085ba:	4608      	mov	r0, r1
 80085bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80085c0:	4770      	bx	lr

080085c2 <__sfputs_r>:
 80085c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085c4:	4606      	mov	r6, r0
 80085c6:	460f      	mov	r7, r1
 80085c8:	4614      	mov	r4, r2
 80085ca:	18d5      	adds	r5, r2, r3
 80085cc:	42ac      	cmp	r4, r5
 80085ce:	d101      	bne.n	80085d4 <__sfputs_r+0x12>
 80085d0:	2000      	movs	r0, #0
 80085d2:	e007      	b.n	80085e4 <__sfputs_r+0x22>
 80085d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085d8:	463a      	mov	r2, r7
 80085da:	4630      	mov	r0, r6
 80085dc:	f7ff ffda 	bl	8008594 <__sfputc_r>
 80085e0:	1c43      	adds	r3, r0, #1
 80085e2:	d1f3      	bne.n	80085cc <__sfputs_r+0xa>
 80085e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080085e8 <_vfiprintf_r>:
 80085e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085ec:	460d      	mov	r5, r1
 80085ee:	b09d      	sub	sp, #116	; 0x74
 80085f0:	4614      	mov	r4, r2
 80085f2:	4698      	mov	r8, r3
 80085f4:	4606      	mov	r6, r0
 80085f6:	b118      	cbz	r0, 8008600 <_vfiprintf_r+0x18>
 80085f8:	6a03      	ldr	r3, [r0, #32]
 80085fa:	b90b      	cbnz	r3, 8008600 <_vfiprintf_r+0x18>
 80085fc:	f7ff fd68 	bl	80080d0 <__sinit>
 8008600:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008602:	07d9      	lsls	r1, r3, #31
 8008604:	d405      	bmi.n	8008612 <_vfiprintf_r+0x2a>
 8008606:	89ab      	ldrh	r3, [r5, #12]
 8008608:	059a      	lsls	r2, r3, #22
 800860a:	d402      	bmi.n	8008612 <_vfiprintf_r+0x2a>
 800860c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800860e:	f7ff ff64 	bl	80084da <__retarget_lock_acquire_recursive>
 8008612:	89ab      	ldrh	r3, [r5, #12]
 8008614:	071b      	lsls	r3, r3, #28
 8008616:	d501      	bpl.n	800861c <_vfiprintf_r+0x34>
 8008618:	692b      	ldr	r3, [r5, #16]
 800861a:	b99b      	cbnz	r3, 8008644 <_vfiprintf_r+0x5c>
 800861c:	4629      	mov	r1, r5
 800861e:	4630      	mov	r0, r6
 8008620:	f7ff fe7a 	bl	8008318 <__swsetup_r>
 8008624:	b170      	cbz	r0, 8008644 <_vfiprintf_r+0x5c>
 8008626:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008628:	07dc      	lsls	r4, r3, #31
 800862a:	d504      	bpl.n	8008636 <_vfiprintf_r+0x4e>
 800862c:	f04f 30ff 	mov.w	r0, #4294967295
 8008630:	b01d      	add	sp, #116	; 0x74
 8008632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008636:	89ab      	ldrh	r3, [r5, #12]
 8008638:	0598      	lsls	r0, r3, #22
 800863a:	d4f7      	bmi.n	800862c <_vfiprintf_r+0x44>
 800863c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800863e:	f7ff ff4d 	bl	80084dc <__retarget_lock_release_recursive>
 8008642:	e7f3      	b.n	800862c <_vfiprintf_r+0x44>
 8008644:	2300      	movs	r3, #0
 8008646:	9309      	str	r3, [sp, #36]	; 0x24
 8008648:	2320      	movs	r3, #32
 800864a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800864e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008652:	2330      	movs	r3, #48	; 0x30
 8008654:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008808 <_vfiprintf_r+0x220>
 8008658:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800865c:	f04f 0901 	mov.w	r9, #1
 8008660:	4623      	mov	r3, r4
 8008662:	469a      	mov	sl, r3
 8008664:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008668:	b10a      	cbz	r2, 800866e <_vfiprintf_r+0x86>
 800866a:	2a25      	cmp	r2, #37	; 0x25
 800866c:	d1f9      	bne.n	8008662 <_vfiprintf_r+0x7a>
 800866e:	ebba 0b04 	subs.w	fp, sl, r4
 8008672:	d00b      	beq.n	800868c <_vfiprintf_r+0xa4>
 8008674:	465b      	mov	r3, fp
 8008676:	4622      	mov	r2, r4
 8008678:	4629      	mov	r1, r5
 800867a:	4630      	mov	r0, r6
 800867c:	f7ff ffa1 	bl	80085c2 <__sfputs_r>
 8008680:	3001      	adds	r0, #1
 8008682:	f000 80a9 	beq.w	80087d8 <_vfiprintf_r+0x1f0>
 8008686:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008688:	445a      	add	r2, fp
 800868a:	9209      	str	r2, [sp, #36]	; 0x24
 800868c:	f89a 3000 	ldrb.w	r3, [sl]
 8008690:	2b00      	cmp	r3, #0
 8008692:	f000 80a1 	beq.w	80087d8 <_vfiprintf_r+0x1f0>
 8008696:	2300      	movs	r3, #0
 8008698:	f04f 32ff 	mov.w	r2, #4294967295
 800869c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80086a0:	f10a 0a01 	add.w	sl, sl, #1
 80086a4:	9304      	str	r3, [sp, #16]
 80086a6:	9307      	str	r3, [sp, #28]
 80086a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80086ac:	931a      	str	r3, [sp, #104]	; 0x68
 80086ae:	4654      	mov	r4, sl
 80086b0:	2205      	movs	r2, #5
 80086b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086b6:	4854      	ldr	r0, [pc, #336]	; (8008808 <_vfiprintf_r+0x220>)
 80086b8:	f7f7 fdb2 	bl	8000220 <memchr>
 80086bc:	9a04      	ldr	r2, [sp, #16]
 80086be:	b9d8      	cbnz	r0, 80086f8 <_vfiprintf_r+0x110>
 80086c0:	06d1      	lsls	r1, r2, #27
 80086c2:	bf44      	itt	mi
 80086c4:	2320      	movmi	r3, #32
 80086c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086ca:	0713      	lsls	r3, r2, #28
 80086cc:	bf44      	itt	mi
 80086ce:	232b      	movmi	r3, #43	; 0x2b
 80086d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086d4:	f89a 3000 	ldrb.w	r3, [sl]
 80086d8:	2b2a      	cmp	r3, #42	; 0x2a
 80086da:	d015      	beq.n	8008708 <_vfiprintf_r+0x120>
 80086dc:	9a07      	ldr	r2, [sp, #28]
 80086de:	4654      	mov	r4, sl
 80086e0:	2000      	movs	r0, #0
 80086e2:	f04f 0c0a 	mov.w	ip, #10
 80086e6:	4621      	mov	r1, r4
 80086e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80086ec:	3b30      	subs	r3, #48	; 0x30
 80086ee:	2b09      	cmp	r3, #9
 80086f0:	d94d      	bls.n	800878e <_vfiprintf_r+0x1a6>
 80086f2:	b1b0      	cbz	r0, 8008722 <_vfiprintf_r+0x13a>
 80086f4:	9207      	str	r2, [sp, #28]
 80086f6:	e014      	b.n	8008722 <_vfiprintf_r+0x13a>
 80086f8:	eba0 0308 	sub.w	r3, r0, r8
 80086fc:	fa09 f303 	lsl.w	r3, r9, r3
 8008700:	4313      	orrs	r3, r2
 8008702:	9304      	str	r3, [sp, #16]
 8008704:	46a2      	mov	sl, r4
 8008706:	e7d2      	b.n	80086ae <_vfiprintf_r+0xc6>
 8008708:	9b03      	ldr	r3, [sp, #12]
 800870a:	1d19      	adds	r1, r3, #4
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	9103      	str	r1, [sp, #12]
 8008710:	2b00      	cmp	r3, #0
 8008712:	bfbb      	ittet	lt
 8008714:	425b      	neglt	r3, r3
 8008716:	f042 0202 	orrlt.w	r2, r2, #2
 800871a:	9307      	strge	r3, [sp, #28]
 800871c:	9307      	strlt	r3, [sp, #28]
 800871e:	bfb8      	it	lt
 8008720:	9204      	strlt	r2, [sp, #16]
 8008722:	7823      	ldrb	r3, [r4, #0]
 8008724:	2b2e      	cmp	r3, #46	; 0x2e
 8008726:	d10c      	bne.n	8008742 <_vfiprintf_r+0x15a>
 8008728:	7863      	ldrb	r3, [r4, #1]
 800872a:	2b2a      	cmp	r3, #42	; 0x2a
 800872c:	d134      	bne.n	8008798 <_vfiprintf_r+0x1b0>
 800872e:	9b03      	ldr	r3, [sp, #12]
 8008730:	1d1a      	adds	r2, r3, #4
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	9203      	str	r2, [sp, #12]
 8008736:	2b00      	cmp	r3, #0
 8008738:	bfb8      	it	lt
 800873a:	f04f 33ff 	movlt.w	r3, #4294967295
 800873e:	3402      	adds	r4, #2
 8008740:	9305      	str	r3, [sp, #20]
 8008742:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008818 <_vfiprintf_r+0x230>
 8008746:	7821      	ldrb	r1, [r4, #0]
 8008748:	2203      	movs	r2, #3
 800874a:	4650      	mov	r0, sl
 800874c:	f7f7 fd68 	bl	8000220 <memchr>
 8008750:	b138      	cbz	r0, 8008762 <_vfiprintf_r+0x17a>
 8008752:	9b04      	ldr	r3, [sp, #16]
 8008754:	eba0 000a 	sub.w	r0, r0, sl
 8008758:	2240      	movs	r2, #64	; 0x40
 800875a:	4082      	lsls	r2, r0
 800875c:	4313      	orrs	r3, r2
 800875e:	3401      	adds	r4, #1
 8008760:	9304      	str	r3, [sp, #16]
 8008762:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008766:	4829      	ldr	r0, [pc, #164]	; (800880c <_vfiprintf_r+0x224>)
 8008768:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800876c:	2206      	movs	r2, #6
 800876e:	f7f7 fd57 	bl	8000220 <memchr>
 8008772:	2800      	cmp	r0, #0
 8008774:	d03f      	beq.n	80087f6 <_vfiprintf_r+0x20e>
 8008776:	4b26      	ldr	r3, [pc, #152]	; (8008810 <_vfiprintf_r+0x228>)
 8008778:	bb1b      	cbnz	r3, 80087c2 <_vfiprintf_r+0x1da>
 800877a:	9b03      	ldr	r3, [sp, #12]
 800877c:	3307      	adds	r3, #7
 800877e:	f023 0307 	bic.w	r3, r3, #7
 8008782:	3308      	adds	r3, #8
 8008784:	9303      	str	r3, [sp, #12]
 8008786:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008788:	443b      	add	r3, r7
 800878a:	9309      	str	r3, [sp, #36]	; 0x24
 800878c:	e768      	b.n	8008660 <_vfiprintf_r+0x78>
 800878e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008792:	460c      	mov	r4, r1
 8008794:	2001      	movs	r0, #1
 8008796:	e7a6      	b.n	80086e6 <_vfiprintf_r+0xfe>
 8008798:	2300      	movs	r3, #0
 800879a:	3401      	adds	r4, #1
 800879c:	9305      	str	r3, [sp, #20]
 800879e:	4619      	mov	r1, r3
 80087a0:	f04f 0c0a 	mov.w	ip, #10
 80087a4:	4620      	mov	r0, r4
 80087a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80087aa:	3a30      	subs	r2, #48	; 0x30
 80087ac:	2a09      	cmp	r2, #9
 80087ae:	d903      	bls.n	80087b8 <_vfiprintf_r+0x1d0>
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d0c6      	beq.n	8008742 <_vfiprintf_r+0x15a>
 80087b4:	9105      	str	r1, [sp, #20]
 80087b6:	e7c4      	b.n	8008742 <_vfiprintf_r+0x15a>
 80087b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80087bc:	4604      	mov	r4, r0
 80087be:	2301      	movs	r3, #1
 80087c0:	e7f0      	b.n	80087a4 <_vfiprintf_r+0x1bc>
 80087c2:	ab03      	add	r3, sp, #12
 80087c4:	9300      	str	r3, [sp, #0]
 80087c6:	462a      	mov	r2, r5
 80087c8:	4b12      	ldr	r3, [pc, #72]	; (8008814 <_vfiprintf_r+0x22c>)
 80087ca:	a904      	add	r1, sp, #16
 80087cc:	4630      	mov	r0, r6
 80087ce:	f3af 8000 	nop.w
 80087d2:	4607      	mov	r7, r0
 80087d4:	1c78      	adds	r0, r7, #1
 80087d6:	d1d6      	bne.n	8008786 <_vfiprintf_r+0x19e>
 80087d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80087da:	07d9      	lsls	r1, r3, #31
 80087dc:	d405      	bmi.n	80087ea <_vfiprintf_r+0x202>
 80087de:	89ab      	ldrh	r3, [r5, #12]
 80087e0:	059a      	lsls	r2, r3, #22
 80087e2:	d402      	bmi.n	80087ea <_vfiprintf_r+0x202>
 80087e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087e6:	f7ff fe79 	bl	80084dc <__retarget_lock_release_recursive>
 80087ea:	89ab      	ldrh	r3, [r5, #12]
 80087ec:	065b      	lsls	r3, r3, #25
 80087ee:	f53f af1d 	bmi.w	800862c <_vfiprintf_r+0x44>
 80087f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80087f4:	e71c      	b.n	8008630 <_vfiprintf_r+0x48>
 80087f6:	ab03      	add	r3, sp, #12
 80087f8:	9300      	str	r3, [sp, #0]
 80087fa:	462a      	mov	r2, r5
 80087fc:	4b05      	ldr	r3, [pc, #20]	; (8008814 <_vfiprintf_r+0x22c>)
 80087fe:	a904      	add	r1, sp, #16
 8008800:	4630      	mov	r0, r6
 8008802:	f000 f879 	bl	80088f8 <_printf_i>
 8008806:	e7e4      	b.n	80087d2 <_vfiprintf_r+0x1ea>
 8008808:	080141c8 	.word	0x080141c8
 800880c:	080141d2 	.word	0x080141d2
 8008810:	00000000 	.word	0x00000000
 8008814:	080085c3 	.word	0x080085c3
 8008818:	080141ce 	.word	0x080141ce

0800881c <_printf_common>:
 800881c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008820:	4616      	mov	r6, r2
 8008822:	4699      	mov	r9, r3
 8008824:	688a      	ldr	r2, [r1, #8]
 8008826:	690b      	ldr	r3, [r1, #16]
 8008828:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800882c:	4293      	cmp	r3, r2
 800882e:	bfb8      	it	lt
 8008830:	4613      	movlt	r3, r2
 8008832:	6033      	str	r3, [r6, #0]
 8008834:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008838:	4607      	mov	r7, r0
 800883a:	460c      	mov	r4, r1
 800883c:	b10a      	cbz	r2, 8008842 <_printf_common+0x26>
 800883e:	3301      	adds	r3, #1
 8008840:	6033      	str	r3, [r6, #0]
 8008842:	6823      	ldr	r3, [r4, #0]
 8008844:	0699      	lsls	r1, r3, #26
 8008846:	bf42      	ittt	mi
 8008848:	6833      	ldrmi	r3, [r6, #0]
 800884a:	3302      	addmi	r3, #2
 800884c:	6033      	strmi	r3, [r6, #0]
 800884e:	6825      	ldr	r5, [r4, #0]
 8008850:	f015 0506 	ands.w	r5, r5, #6
 8008854:	d106      	bne.n	8008864 <_printf_common+0x48>
 8008856:	f104 0a19 	add.w	sl, r4, #25
 800885a:	68e3      	ldr	r3, [r4, #12]
 800885c:	6832      	ldr	r2, [r6, #0]
 800885e:	1a9b      	subs	r3, r3, r2
 8008860:	42ab      	cmp	r3, r5
 8008862:	dc26      	bgt.n	80088b2 <_printf_common+0x96>
 8008864:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008868:	1e13      	subs	r3, r2, #0
 800886a:	6822      	ldr	r2, [r4, #0]
 800886c:	bf18      	it	ne
 800886e:	2301      	movne	r3, #1
 8008870:	0692      	lsls	r2, r2, #26
 8008872:	d42b      	bmi.n	80088cc <_printf_common+0xb0>
 8008874:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008878:	4649      	mov	r1, r9
 800887a:	4638      	mov	r0, r7
 800887c:	47c0      	blx	r8
 800887e:	3001      	adds	r0, #1
 8008880:	d01e      	beq.n	80088c0 <_printf_common+0xa4>
 8008882:	6823      	ldr	r3, [r4, #0]
 8008884:	6922      	ldr	r2, [r4, #16]
 8008886:	f003 0306 	and.w	r3, r3, #6
 800888a:	2b04      	cmp	r3, #4
 800888c:	bf02      	ittt	eq
 800888e:	68e5      	ldreq	r5, [r4, #12]
 8008890:	6833      	ldreq	r3, [r6, #0]
 8008892:	1aed      	subeq	r5, r5, r3
 8008894:	68a3      	ldr	r3, [r4, #8]
 8008896:	bf0c      	ite	eq
 8008898:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800889c:	2500      	movne	r5, #0
 800889e:	4293      	cmp	r3, r2
 80088a0:	bfc4      	itt	gt
 80088a2:	1a9b      	subgt	r3, r3, r2
 80088a4:	18ed      	addgt	r5, r5, r3
 80088a6:	2600      	movs	r6, #0
 80088a8:	341a      	adds	r4, #26
 80088aa:	42b5      	cmp	r5, r6
 80088ac:	d11a      	bne.n	80088e4 <_printf_common+0xc8>
 80088ae:	2000      	movs	r0, #0
 80088b0:	e008      	b.n	80088c4 <_printf_common+0xa8>
 80088b2:	2301      	movs	r3, #1
 80088b4:	4652      	mov	r2, sl
 80088b6:	4649      	mov	r1, r9
 80088b8:	4638      	mov	r0, r7
 80088ba:	47c0      	blx	r8
 80088bc:	3001      	adds	r0, #1
 80088be:	d103      	bne.n	80088c8 <_printf_common+0xac>
 80088c0:	f04f 30ff 	mov.w	r0, #4294967295
 80088c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088c8:	3501      	adds	r5, #1
 80088ca:	e7c6      	b.n	800885a <_printf_common+0x3e>
 80088cc:	18e1      	adds	r1, r4, r3
 80088ce:	1c5a      	adds	r2, r3, #1
 80088d0:	2030      	movs	r0, #48	; 0x30
 80088d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80088d6:	4422      	add	r2, r4
 80088d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80088dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80088e0:	3302      	adds	r3, #2
 80088e2:	e7c7      	b.n	8008874 <_printf_common+0x58>
 80088e4:	2301      	movs	r3, #1
 80088e6:	4622      	mov	r2, r4
 80088e8:	4649      	mov	r1, r9
 80088ea:	4638      	mov	r0, r7
 80088ec:	47c0      	blx	r8
 80088ee:	3001      	adds	r0, #1
 80088f0:	d0e6      	beq.n	80088c0 <_printf_common+0xa4>
 80088f2:	3601      	adds	r6, #1
 80088f4:	e7d9      	b.n	80088aa <_printf_common+0x8e>
	...

080088f8 <_printf_i>:
 80088f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80088fc:	7e0f      	ldrb	r7, [r1, #24]
 80088fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008900:	2f78      	cmp	r7, #120	; 0x78
 8008902:	4691      	mov	r9, r2
 8008904:	4680      	mov	r8, r0
 8008906:	460c      	mov	r4, r1
 8008908:	469a      	mov	sl, r3
 800890a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800890e:	d807      	bhi.n	8008920 <_printf_i+0x28>
 8008910:	2f62      	cmp	r7, #98	; 0x62
 8008912:	d80a      	bhi.n	800892a <_printf_i+0x32>
 8008914:	2f00      	cmp	r7, #0
 8008916:	f000 80d4 	beq.w	8008ac2 <_printf_i+0x1ca>
 800891a:	2f58      	cmp	r7, #88	; 0x58
 800891c:	f000 80c0 	beq.w	8008aa0 <_printf_i+0x1a8>
 8008920:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008924:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008928:	e03a      	b.n	80089a0 <_printf_i+0xa8>
 800892a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800892e:	2b15      	cmp	r3, #21
 8008930:	d8f6      	bhi.n	8008920 <_printf_i+0x28>
 8008932:	a101      	add	r1, pc, #4	; (adr r1, 8008938 <_printf_i+0x40>)
 8008934:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008938:	08008991 	.word	0x08008991
 800893c:	080089a5 	.word	0x080089a5
 8008940:	08008921 	.word	0x08008921
 8008944:	08008921 	.word	0x08008921
 8008948:	08008921 	.word	0x08008921
 800894c:	08008921 	.word	0x08008921
 8008950:	080089a5 	.word	0x080089a5
 8008954:	08008921 	.word	0x08008921
 8008958:	08008921 	.word	0x08008921
 800895c:	08008921 	.word	0x08008921
 8008960:	08008921 	.word	0x08008921
 8008964:	08008aa9 	.word	0x08008aa9
 8008968:	080089d1 	.word	0x080089d1
 800896c:	08008a63 	.word	0x08008a63
 8008970:	08008921 	.word	0x08008921
 8008974:	08008921 	.word	0x08008921
 8008978:	08008acb 	.word	0x08008acb
 800897c:	08008921 	.word	0x08008921
 8008980:	080089d1 	.word	0x080089d1
 8008984:	08008921 	.word	0x08008921
 8008988:	08008921 	.word	0x08008921
 800898c:	08008a6b 	.word	0x08008a6b
 8008990:	682b      	ldr	r3, [r5, #0]
 8008992:	1d1a      	adds	r2, r3, #4
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	602a      	str	r2, [r5, #0]
 8008998:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800899c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80089a0:	2301      	movs	r3, #1
 80089a2:	e09f      	b.n	8008ae4 <_printf_i+0x1ec>
 80089a4:	6820      	ldr	r0, [r4, #0]
 80089a6:	682b      	ldr	r3, [r5, #0]
 80089a8:	0607      	lsls	r7, r0, #24
 80089aa:	f103 0104 	add.w	r1, r3, #4
 80089ae:	6029      	str	r1, [r5, #0]
 80089b0:	d501      	bpl.n	80089b6 <_printf_i+0xbe>
 80089b2:	681e      	ldr	r6, [r3, #0]
 80089b4:	e003      	b.n	80089be <_printf_i+0xc6>
 80089b6:	0646      	lsls	r6, r0, #25
 80089b8:	d5fb      	bpl.n	80089b2 <_printf_i+0xba>
 80089ba:	f9b3 6000 	ldrsh.w	r6, [r3]
 80089be:	2e00      	cmp	r6, #0
 80089c0:	da03      	bge.n	80089ca <_printf_i+0xd2>
 80089c2:	232d      	movs	r3, #45	; 0x2d
 80089c4:	4276      	negs	r6, r6
 80089c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089ca:	485a      	ldr	r0, [pc, #360]	; (8008b34 <_printf_i+0x23c>)
 80089cc:	230a      	movs	r3, #10
 80089ce:	e012      	b.n	80089f6 <_printf_i+0xfe>
 80089d0:	682b      	ldr	r3, [r5, #0]
 80089d2:	6820      	ldr	r0, [r4, #0]
 80089d4:	1d19      	adds	r1, r3, #4
 80089d6:	6029      	str	r1, [r5, #0]
 80089d8:	0605      	lsls	r5, r0, #24
 80089da:	d501      	bpl.n	80089e0 <_printf_i+0xe8>
 80089dc:	681e      	ldr	r6, [r3, #0]
 80089de:	e002      	b.n	80089e6 <_printf_i+0xee>
 80089e0:	0641      	lsls	r1, r0, #25
 80089e2:	d5fb      	bpl.n	80089dc <_printf_i+0xe4>
 80089e4:	881e      	ldrh	r6, [r3, #0]
 80089e6:	4853      	ldr	r0, [pc, #332]	; (8008b34 <_printf_i+0x23c>)
 80089e8:	2f6f      	cmp	r7, #111	; 0x6f
 80089ea:	bf0c      	ite	eq
 80089ec:	2308      	moveq	r3, #8
 80089ee:	230a      	movne	r3, #10
 80089f0:	2100      	movs	r1, #0
 80089f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80089f6:	6865      	ldr	r5, [r4, #4]
 80089f8:	60a5      	str	r5, [r4, #8]
 80089fa:	2d00      	cmp	r5, #0
 80089fc:	bfa2      	ittt	ge
 80089fe:	6821      	ldrge	r1, [r4, #0]
 8008a00:	f021 0104 	bicge.w	r1, r1, #4
 8008a04:	6021      	strge	r1, [r4, #0]
 8008a06:	b90e      	cbnz	r6, 8008a0c <_printf_i+0x114>
 8008a08:	2d00      	cmp	r5, #0
 8008a0a:	d04b      	beq.n	8008aa4 <_printf_i+0x1ac>
 8008a0c:	4615      	mov	r5, r2
 8008a0e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008a12:	fb03 6711 	mls	r7, r3, r1, r6
 8008a16:	5dc7      	ldrb	r7, [r0, r7]
 8008a18:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008a1c:	4637      	mov	r7, r6
 8008a1e:	42bb      	cmp	r3, r7
 8008a20:	460e      	mov	r6, r1
 8008a22:	d9f4      	bls.n	8008a0e <_printf_i+0x116>
 8008a24:	2b08      	cmp	r3, #8
 8008a26:	d10b      	bne.n	8008a40 <_printf_i+0x148>
 8008a28:	6823      	ldr	r3, [r4, #0]
 8008a2a:	07de      	lsls	r6, r3, #31
 8008a2c:	d508      	bpl.n	8008a40 <_printf_i+0x148>
 8008a2e:	6923      	ldr	r3, [r4, #16]
 8008a30:	6861      	ldr	r1, [r4, #4]
 8008a32:	4299      	cmp	r1, r3
 8008a34:	bfde      	ittt	le
 8008a36:	2330      	movle	r3, #48	; 0x30
 8008a38:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008a3c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008a40:	1b52      	subs	r2, r2, r5
 8008a42:	6122      	str	r2, [r4, #16]
 8008a44:	f8cd a000 	str.w	sl, [sp]
 8008a48:	464b      	mov	r3, r9
 8008a4a:	aa03      	add	r2, sp, #12
 8008a4c:	4621      	mov	r1, r4
 8008a4e:	4640      	mov	r0, r8
 8008a50:	f7ff fee4 	bl	800881c <_printf_common>
 8008a54:	3001      	adds	r0, #1
 8008a56:	d14a      	bne.n	8008aee <_printf_i+0x1f6>
 8008a58:	f04f 30ff 	mov.w	r0, #4294967295
 8008a5c:	b004      	add	sp, #16
 8008a5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a62:	6823      	ldr	r3, [r4, #0]
 8008a64:	f043 0320 	orr.w	r3, r3, #32
 8008a68:	6023      	str	r3, [r4, #0]
 8008a6a:	4833      	ldr	r0, [pc, #204]	; (8008b38 <_printf_i+0x240>)
 8008a6c:	2778      	movs	r7, #120	; 0x78
 8008a6e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008a72:	6823      	ldr	r3, [r4, #0]
 8008a74:	6829      	ldr	r1, [r5, #0]
 8008a76:	061f      	lsls	r7, r3, #24
 8008a78:	f851 6b04 	ldr.w	r6, [r1], #4
 8008a7c:	d402      	bmi.n	8008a84 <_printf_i+0x18c>
 8008a7e:	065f      	lsls	r7, r3, #25
 8008a80:	bf48      	it	mi
 8008a82:	b2b6      	uxthmi	r6, r6
 8008a84:	07df      	lsls	r7, r3, #31
 8008a86:	bf48      	it	mi
 8008a88:	f043 0320 	orrmi.w	r3, r3, #32
 8008a8c:	6029      	str	r1, [r5, #0]
 8008a8e:	bf48      	it	mi
 8008a90:	6023      	strmi	r3, [r4, #0]
 8008a92:	b91e      	cbnz	r6, 8008a9c <_printf_i+0x1a4>
 8008a94:	6823      	ldr	r3, [r4, #0]
 8008a96:	f023 0320 	bic.w	r3, r3, #32
 8008a9a:	6023      	str	r3, [r4, #0]
 8008a9c:	2310      	movs	r3, #16
 8008a9e:	e7a7      	b.n	80089f0 <_printf_i+0xf8>
 8008aa0:	4824      	ldr	r0, [pc, #144]	; (8008b34 <_printf_i+0x23c>)
 8008aa2:	e7e4      	b.n	8008a6e <_printf_i+0x176>
 8008aa4:	4615      	mov	r5, r2
 8008aa6:	e7bd      	b.n	8008a24 <_printf_i+0x12c>
 8008aa8:	682b      	ldr	r3, [r5, #0]
 8008aaa:	6826      	ldr	r6, [r4, #0]
 8008aac:	6961      	ldr	r1, [r4, #20]
 8008aae:	1d18      	adds	r0, r3, #4
 8008ab0:	6028      	str	r0, [r5, #0]
 8008ab2:	0635      	lsls	r5, r6, #24
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	d501      	bpl.n	8008abc <_printf_i+0x1c4>
 8008ab8:	6019      	str	r1, [r3, #0]
 8008aba:	e002      	b.n	8008ac2 <_printf_i+0x1ca>
 8008abc:	0670      	lsls	r0, r6, #25
 8008abe:	d5fb      	bpl.n	8008ab8 <_printf_i+0x1c0>
 8008ac0:	8019      	strh	r1, [r3, #0]
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	6123      	str	r3, [r4, #16]
 8008ac6:	4615      	mov	r5, r2
 8008ac8:	e7bc      	b.n	8008a44 <_printf_i+0x14c>
 8008aca:	682b      	ldr	r3, [r5, #0]
 8008acc:	1d1a      	adds	r2, r3, #4
 8008ace:	602a      	str	r2, [r5, #0]
 8008ad0:	681d      	ldr	r5, [r3, #0]
 8008ad2:	6862      	ldr	r2, [r4, #4]
 8008ad4:	2100      	movs	r1, #0
 8008ad6:	4628      	mov	r0, r5
 8008ad8:	f7f7 fba2 	bl	8000220 <memchr>
 8008adc:	b108      	cbz	r0, 8008ae2 <_printf_i+0x1ea>
 8008ade:	1b40      	subs	r0, r0, r5
 8008ae0:	6060      	str	r0, [r4, #4]
 8008ae2:	6863      	ldr	r3, [r4, #4]
 8008ae4:	6123      	str	r3, [r4, #16]
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008aec:	e7aa      	b.n	8008a44 <_printf_i+0x14c>
 8008aee:	6923      	ldr	r3, [r4, #16]
 8008af0:	462a      	mov	r2, r5
 8008af2:	4649      	mov	r1, r9
 8008af4:	4640      	mov	r0, r8
 8008af6:	47d0      	blx	sl
 8008af8:	3001      	adds	r0, #1
 8008afa:	d0ad      	beq.n	8008a58 <_printf_i+0x160>
 8008afc:	6823      	ldr	r3, [r4, #0]
 8008afe:	079b      	lsls	r3, r3, #30
 8008b00:	d413      	bmi.n	8008b2a <_printf_i+0x232>
 8008b02:	68e0      	ldr	r0, [r4, #12]
 8008b04:	9b03      	ldr	r3, [sp, #12]
 8008b06:	4298      	cmp	r0, r3
 8008b08:	bfb8      	it	lt
 8008b0a:	4618      	movlt	r0, r3
 8008b0c:	e7a6      	b.n	8008a5c <_printf_i+0x164>
 8008b0e:	2301      	movs	r3, #1
 8008b10:	4632      	mov	r2, r6
 8008b12:	4649      	mov	r1, r9
 8008b14:	4640      	mov	r0, r8
 8008b16:	47d0      	blx	sl
 8008b18:	3001      	adds	r0, #1
 8008b1a:	d09d      	beq.n	8008a58 <_printf_i+0x160>
 8008b1c:	3501      	adds	r5, #1
 8008b1e:	68e3      	ldr	r3, [r4, #12]
 8008b20:	9903      	ldr	r1, [sp, #12]
 8008b22:	1a5b      	subs	r3, r3, r1
 8008b24:	42ab      	cmp	r3, r5
 8008b26:	dcf2      	bgt.n	8008b0e <_printf_i+0x216>
 8008b28:	e7eb      	b.n	8008b02 <_printf_i+0x20a>
 8008b2a:	2500      	movs	r5, #0
 8008b2c:	f104 0619 	add.w	r6, r4, #25
 8008b30:	e7f5      	b.n	8008b1e <_printf_i+0x226>
 8008b32:	bf00      	nop
 8008b34:	080141d9 	.word	0x080141d9
 8008b38:	080141ea 	.word	0x080141ea

08008b3c <__sflush_r>:
 8008b3c:	898a      	ldrh	r2, [r1, #12]
 8008b3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b42:	4605      	mov	r5, r0
 8008b44:	0710      	lsls	r0, r2, #28
 8008b46:	460c      	mov	r4, r1
 8008b48:	d458      	bmi.n	8008bfc <__sflush_r+0xc0>
 8008b4a:	684b      	ldr	r3, [r1, #4]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	dc05      	bgt.n	8008b5c <__sflush_r+0x20>
 8008b50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	dc02      	bgt.n	8008b5c <__sflush_r+0x20>
 8008b56:	2000      	movs	r0, #0
 8008b58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b5e:	2e00      	cmp	r6, #0
 8008b60:	d0f9      	beq.n	8008b56 <__sflush_r+0x1a>
 8008b62:	2300      	movs	r3, #0
 8008b64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008b68:	682f      	ldr	r7, [r5, #0]
 8008b6a:	6a21      	ldr	r1, [r4, #32]
 8008b6c:	602b      	str	r3, [r5, #0]
 8008b6e:	d032      	beq.n	8008bd6 <__sflush_r+0x9a>
 8008b70:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008b72:	89a3      	ldrh	r3, [r4, #12]
 8008b74:	075a      	lsls	r2, r3, #29
 8008b76:	d505      	bpl.n	8008b84 <__sflush_r+0x48>
 8008b78:	6863      	ldr	r3, [r4, #4]
 8008b7a:	1ac0      	subs	r0, r0, r3
 8008b7c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008b7e:	b10b      	cbz	r3, 8008b84 <__sflush_r+0x48>
 8008b80:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008b82:	1ac0      	subs	r0, r0, r3
 8008b84:	2300      	movs	r3, #0
 8008b86:	4602      	mov	r2, r0
 8008b88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b8a:	6a21      	ldr	r1, [r4, #32]
 8008b8c:	4628      	mov	r0, r5
 8008b8e:	47b0      	blx	r6
 8008b90:	1c43      	adds	r3, r0, #1
 8008b92:	89a3      	ldrh	r3, [r4, #12]
 8008b94:	d106      	bne.n	8008ba4 <__sflush_r+0x68>
 8008b96:	6829      	ldr	r1, [r5, #0]
 8008b98:	291d      	cmp	r1, #29
 8008b9a:	d82b      	bhi.n	8008bf4 <__sflush_r+0xb8>
 8008b9c:	4a29      	ldr	r2, [pc, #164]	; (8008c44 <__sflush_r+0x108>)
 8008b9e:	410a      	asrs	r2, r1
 8008ba0:	07d6      	lsls	r6, r2, #31
 8008ba2:	d427      	bmi.n	8008bf4 <__sflush_r+0xb8>
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	6062      	str	r2, [r4, #4]
 8008ba8:	04d9      	lsls	r1, r3, #19
 8008baa:	6922      	ldr	r2, [r4, #16]
 8008bac:	6022      	str	r2, [r4, #0]
 8008bae:	d504      	bpl.n	8008bba <__sflush_r+0x7e>
 8008bb0:	1c42      	adds	r2, r0, #1
 8008bb2:	d101      	bne.n	8008bb8 <__sflush_r+0x7c>
 8008bb4:	682b      	ldr	r3, [r5, #0]
 8008bb6:	b903      	cbnz	r3, 8008bba <__sflush_r+0x7e>
 8008bb8:	6560      	str	r0, [r4, #84]	; 0x54
 8008bba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008bbc:	602f      	str	r7, [r5, #0]
 8008bbe:	2900      	cmp	r1, #0
 8008bc0:	d0c9      	beq.n	8008b56 <__sflush_r+0x1a>
 8008bc2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008bc6:	4299      	cmp	r1, r3
 8008bc8:	d002      	beq.n	8008bd0 <__sflush_r+0x94>
 8008bca:	4628      	mov	r0, r5
 8008bcc:	f7ff fc96 	bl	80084fc <_free_r>
 8008bd0:	2000      	movs	r0, #0
 8008bd2:	6360      	str	r0, [r4, #52]	; 0x34
 8008bd4:	e7c0      	b.n	8008b58 <__sflush_r+0x1c>
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	4628      	mov	r0, r5
 8008bda:	47b0      	blx	r6
 8008bdc:	1c41      	adds	r1, r0, #1
 8008bde:	d1c8      	bne.n	8008b72 <__sflush_r+0x36>
 8008be0:	682b      	ldr	r3, [r5, #0]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d0c5      	beq.n	8008b72 <__sflush_r+0x36>
 8008be6:	2b1d      	cmp	r3, #29
 8008be8:	d001      	beq.n	8008bee <__sflush_r+0xb2>
 8008bea:	2b16      	cmp	r3, #22
 8008bec:	d101      	bne.n	8008bf2 <__sflush_r+0xb6>
 8008bee:	602f      	str	r7, [r5, #0]
 8008bf0:	e7b1      	b.n	8008b56 <__sflush_r+0x1a>
 8008bf2:	89a3      	ldrh	r3, [r4, #12]
 8008bf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bf8:	81a3      	strh	r3, [r4, #12]
 8008bfa:	e7ad      	b.n	8008b58 <__sflush_r+0x1c>
 8008bfc:	690f      	ldr	r7, [r1, #16]
 8008bfe:	2f00      	cmp	r7, #0
 8008c00:	d0a9      	beq.n	8008b56 <__sflush_r+0x1a>
 8008c02:	0793      	lsls	r3, r2, #30
 8008c04:	680e      	ldr	r6, [r1, #0]
 8008c06:	bf08      	it	eq
 8008c08:	694b      	ldreq	r3, [r1, #20]
 8008c0a:	600f      	str	r7, [r1, #0]
 8008c0c:	bf18      	it	ne
 8008c0e:	2300      	movne	r3, #0
 8008c10:	eba6 0807 	sub.w	r8, r6, r7
 8008c14:	608b      	str	r3, [r1, #8]
 8008c16:	f1b8 0f00 	cmp.w	r8, #0
 8008c1a:	dd9c      	ble.n	8008b56 <__sflush_r+0x1a>
 8008c1c:	6a21      	ldr	r1, [r4, #32]
 8008c1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008c20:	4643      	mov	r3, r8
 8008c22:	463a      	mov	r2, r7
 8008c24:	4628      	mov	r0, r5
 8008c26:	47b0      	blx	r6
 8008c28:	2800      	cmp	r0, #0
 8008c2a:	dc06      	bgt.n	8008c3a <__sflush_r+0xfe>
 8008c2c:	89a3      	ldrh	r3, [r4, #12]
 8008c2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c32:	81a3      	strh	r3, [r4, #12]
 8008c34:	f04f 30ff 	mov.w	r0, #4294967295
 8008c38:	e78e      	b.n	8008b58 <__sflush_r+0x1c>
 8008c3a:	4407      	add	r7, r0
 8008c3c:	eba8 0800 	sub.w	r8, r8, r0
 8008c40:	e7e9      	b.n	8008c16 <__sflush_r+0xda>
 8008c42:	bf00      	nop
 8008c44:	dfbffffe 	.word	0xdfbffffe

08008c48 <_fflush_r>:
 8008c48:	b538      	push	{r3, r4, r5, lr}
 8008c4a:	690b      	ldr	r3, [r1, #16]
 8008c4c:	4605      	mov	r5, r0
 8008c4e:	460c      	mov	r4, r1
 8008c50:	b913      	cbnz	r3, 8008c58 <_fflush_r+0x10>
 8008c52:	2500      	movs	r5, #0
 8008c54:	4628      	mov	r0, r5
 8008c56:	bd38      	pop	{r3, r4, r5, pc}
 8008c58:	b118      	cbz	r0, 8008c62 <_fflush_r+0x1a>
 8008c5a:	6a03      	ldr	r3, [r0, #32]
 8008c5c:	b90b      	cbnz	r3, 8008c62 <_fflush_r+0x1a>
 8008c5e:	f7ff fa37 	bl	80080d0 <__sinit>
 8008c62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d0f3      	beq.n	8008c52 <_fflush_r+0xa>
 8008c6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008c6c:	07d0      	lsls	r0, r2, #31
 8008c6e:	d404      	bmi.n	8008c7a <_fflush_r+0x32>
 8008c70:	0599      	lsls	r1, r3, #22
 8008c72:	d402      	bmi.n	8008c7a <_fflush_r+0x32>
 8008c74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c76:	f7ff fc30 	bl	80084da <__retarget_lock_acquire_recursive>
 8008c7a:	4628      	mov	r0, r5
 8008c7c:	4621      	mov	r1, r4
 8008c7e:	f7ff ff5d 	bl	8008b3c <__sflush_r>
 8008c82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008c84:	07da      	lsls	r2, r3, #31
 8008c86:	4605      	mov	r5, r0
 8008c88:	d4e4      	bmi.n	8008c54 <_fflush_r+0xc>
 8008c8a:	89a3      	ldrh	r3, [r4, #12]
 8008c8c:	059b      	lsls	r3, r3, #22
 8008c8e:	d4e1      	bmi.n	8008c54 <_fflush_r+0xc>
 8008c90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c92:	f7ff fc23 	bl	80084dc <__retarget_lock_release_recursive>
 8008c96:	e7dd      	b.n	8008c54 <_fflush_r+0xc>

08008c98 <__swhatbuf_r>:
 8008c98:	b570      	push	{r4, r5, r6, lr}
 8008c9a:	460c      	mov	r4, r1
 8008c9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ca0:	2900      	cmp	r1, #0
 8008ca2:	b096      	sub	sp, #88	; 0x58
 8008ca4:	4615      	mov	r5, r2
 8008ca6:	461e      	mov	r6, r3
 8008ca8:	da0d      	bge.n	8008cc6 <__swhatbuf_r+0x2e>
 8008caa:	89a3      	ldrh	r3, [r4, #12]
 8008cac:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008cb0:	f04f 0100 	mov.w	r1, #0
 8008cb4:	bf0c      	ite	eq
 8008cb6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008cba:	2340      	movne	r3, #64	; 0x40
 8008cbc:	2000      	movs	r0, #0
 8008cbe:	6031      	str	r1, [r6, #0]
 8008cc0:	602b      	str	r3, [r5, #0]
 8008cc2:	b016      	add	sp, #88	; 0x58
 8008cc4:	bd70      	pop	{r4, r5, r6, pc}
 8008cc6:	466a      	mov	r2, sp
 8008cc8:	f000 f848 	bl	8008d5c <_fstat_r>
 8008ccc:	2800      	cmp	r0, #0
 8008cce:	dbec      	blt.n	8008caa <__swhatbuf_r+0x12>
 8008cd0:	9901      	ldr	r1, [sp, #4]
 8008cd2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008cd6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008cda:	4259      	negs	r1, r3
 8008cdc:	4159      	adcs	r1, r3
 8008cde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ce2:	e7eb      	b.n	8008cbc <__swhatbuf_r+0x24>

08008ce4 <__smakebuf_r>:
 8008ce4:	898b      	ldrh	r3, [r1, #12]
 8008ce6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008ce8:	079d      	lsls	r5, r3, #30
 8008cea:	4606      	mov	r6, r0
 8008cec:	460c      	mov	r4, r1
 8008cee:	d507      	bpl.n	8008d00 <__smakebuf_r+0x1c>
 8008cf0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008cf4:	6023      	str	r3, [r4, #0]
 8008cf6:	6123      	str	r3, [r4, #16]
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	6163      	str	r3, [r4, #20]
 8008cfc:	b002      	add	sp, #8
 8008cfe:	bd70      	pop	{r4, r5, r6, pc}
 8008d00:	ab01      	add	r3, sp, #4
 8008d02:	466a      	mov	r2, sp
 8008d04:	f7ff ffc8 	bl	8008c98 <__swhatbuf_r>
 8008d08:	9900      	ldr	r1, [sp, #0]
 8008d0a:	4605      	mov	r5, r0
 8008d0c:	4630      	mov	r0, r6
 8008d0e:	f7ff f8c7 	bl	8007ea0 <_malloc_r>
 8008d12:	b948      	cbnz	r0, 8008d28 <__smakebuf_r+0x44>
 8008d14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d18:	059a      	lsls	r2, r3, #22
 8008d1a:	d4ef      	bmi.n	8008cfc <__smakebuf_r+0x18>
 8008d1c:	f023 0303 	bic.w	r3, r3, #3
 8008d20:	f043 0302 	orr.w	r3, r3, #2
 8008d24:	81a3      	strh	r3, [r4, #12]
 8008d26:	e7e3      	b.n	8008cf0 <__smakebuf_r+0xc>
 8008d28:	89a3      	ldrh	r3, [r4, #12]
 8008d2a:	6020      	str	r0, [r4, #0]
 8008d2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d30:	81a3      	strh	r3, [r4, #12]
 8008d32:	9b00      	ldr	r3, [sp, #0]
 8008d34:	6163      	str	r3, [r4, #20]
 8008d36:	9b01      	ldr	r3, [sp, #4]
 8008d38:	6120      	str	r0, [r4, #16]
 8008d3a:	b15b      	cbz	r3, 8008d54 <__smakebuf_r+0x70>
 8008d3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d40:	4630      	mov	r0, r6
 8008d42:	f000 f81d 	bl	8008d80 <_isatty_r>
 8008d46:	b128      	cbz	r0, 8008d54 <__smakebuf_r+0x70>
 8008d48:	89a3      	ldrh	r3, [r4, #12]
 8008d4a:	f023 0303 	bic.w	r3, r3, #3
 8008d4e:	f043 0301 	orr.w	r3, r3, #1
 8008d52:	81a3      	strh	r3, [r4, #12]
 8008d54:	89a3      	ldrh	r3, [r4, #12]
 8008d56:	431d      	orrs	r5, r3
 8008d58:	81a5      	strh	r5, [r4, #12]
 8008d5a:	e7cf      	b.n	8008cfc <__smakebuf_r+0x18>

08008d5c <_fstat_r>:
 8008d5c:	b538      	push	{r3, r4, r5, lr}
 8008d5e:	4d07      	ldr	r5, [pc, #28]	; (8008d7c <_fstat_r+0x20>)
 8008d60:	2300      	movs	r3, #0
 8008d62:	4604      	mov	r4, r0
 8008d64:	4608      	mov	r0, r1
 8008d66:	4611      	mov	r1, r2
 8008d68:	602b      	str	r3, [r5, #0]
 8008d6a:	f000 f955 	bl	8009018 <_fstat>
 8008d6e:	1c43      	adds	r3, r0, #1
 8008d70:	d102      	bne.n	8008d78 <_fstat_r+0x1c>
 8008d72:	682b      	ldr	r3, [r5, #0]
 8008d74:	b103      	cbz	r3, 8008d78 <_fstat_r+0x1c>
 8008d76:	6023      	str	r3, [r4, #0]
 8008d78:	bd38      	pop	{r3, r4, r5, pc}
 8008d7a:	bf00      	nop
 8008d7c:	20001824 	.word	0x20001824

08008d80 <_isatty_r>:
 8008d80:	b538      	push	{r3, r4, r5, lr}
 8008d82:	4d06      	ldr	r5, [pc, #24]	; (8008d9c <_isatty_r+0x1c>)
 8008d84:	2300      	movs	r3, #0
 8008d86:	4604      	mov	r4, r0
 8008d88:	4608      	mov	r0, r1
 8008d8a:	602b      	str	r3, [r5, #0]
 8008d8c:	f000 f94c 	bl	8009028 <_isatty>
 8008d90:	1c43      	adds	r3, r0, #1
 8008d92:	d102      	bne.n	8008d9a <_isatty_r+0x1a>
 8008d94:	682b      	ldr	r3, [r5, #0]
 8008d96:	b103      	cbz	r3, 8008d9a <_isatty_r+0x1a>
 8008d98:	6023      	str	r3, [r4, #0]
 8008d9a:	bd38      	pop	{r3, r4, r5, pc}
 8008d9c:	20001824 	.word	0x20001824

08008da0 <expf>:
 8008da0:	b508      	push	{r3, lr}
 8008da2:	ed2d 8b02 	vpush	{d8}
 8008da6:	eef0 8a40 	vmov.f32	s17, s0
 8008daa:	f000 f85f 	bl	8008e6c <__ieee754_expf>
 8008dae:	eeb0 8a40 	vmov.f32	s16, s0
 8008db2:	eeb0 0a68 	vmov.f32	s0, s17
 8008db6:	f000 f829 	bl	8008e0c <finitef>
 8008dba:	b160      	cbz	r0, 8008dd6 <expf+0x36>
 8008dbc:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8008dfc <expf+0x5c>
 8008dc0:	eef4 8ae7 	vcmpe.f32	s17, s15
 8008dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dc8:	dd0a      	ble.n	8008de0 <expf+0x40>
 8008dca:	f7ff fb5b 	bl	8008484 <__errno>
 8008dce:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8008e00 <expf+0x60>
 8008dd2:	2322      	movs	r3, #34	; 0x22
 8008dd4:	6003      	str	r3, [r0, #0]
 8008dd6:	eeb0 0a48 	vmov.f32	s0, s16
 8008dda:	ecbd 8b02 	vpop	{d8}
 8008dde:	bd08      	pop	{r3, pc}
 8008de0:	eddf 7a08 	vldr	s15, [pc, #32]	; 8008e04 <expf+0x64>
 8008de4:	eef4 8ae7 	vcmpe.f32	s17, s15
 8008de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dec:	d5f3      	bpl.n	8008dd6 <expf+0x36>
 8008dee:	f7ff fb49 	bl	8008484 <__errno>
 8008df2:	2322      	movs	r3, #34	; 0x22
 8008df4:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8008e08 <expf+0x68>
 8008df8:	6003      	str	r3, [r0, #0]
 8008dfa:	e7ec      	b.n	8008dd6 <expf+0x36>
 8008dfc:	42b17217 	.word	0x42b17217
 8008e00:	7f800000 	.word	0x7f800000
 8008e04:	c2cff1b5 	.word	0xc2cff1b5
 8008e08:	00000000 	.word	0x00000000

08008e0c <finitef>:
 8008e0c:	b082      	sub	sp, #8
 8008e0e:	ed8d 0a01 	vstr	s0, [sp, #4]
 8008e12:	9801      	ldr	r0, [sp, #4]
 8008e14:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8008e18:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8008e1c:	bfac      	ite	ge
 8008e1e:	2000      	movge	r0, #0
 8008e20:	2001      	movlt	r0, #1
 8008e22:	b002      	add	sp, #8
 8008e24:	4770      	bx	lr

08008e26 <with_errnof>:
 8008e26:	b513      	push	{r0, r1, r4, lr}
 8008e28:	4604      	mov	r4, r0
 8008e2a:	ed8d 0a01 	vstr	s0, [sp, #4]
 8008e2e:	f7ff fb29 	bl	8008484 <__errno>
 8008e32:	ed9d 0a01 	vldr	s0, [sp, #4]
 8008e36:	6004      	str	r4, [r0, #0]
 8008e38:	b002      	add	sp, #8
 8008e3a:	bd10      	pop	{r4, pc}

08008e3c <xflowf>:
 8008e3c:	b130      	cbz	r0, 8008e4c <xflowf+0x10>
 8008e3e:	eef1 7a40 	vneg.f32	s15, s0
 8008e42:	ee27 0a80 	vmul.f32	s0, s15, s0
 8008e46:	2022      	movs	r0, #34	; 0x22
 8008e48:	f7ff bfed 	b.w	8008e26 <with_errnof>
 8008e4c:	eef0 7a40 	vmov.f32	s15, s0
 8008e50:	e7f7      	b.n	8008e42 <xflowf+0x6>
	...

08008e54 <__math_uflowf>:
 8008e54:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008e5c <__math_uflowf+0x8>
 8008e58:	f7ff bff0 	b.w	8008e3c <xflowf>
 8008e5c:	10000000 	.word	0x10000000

08008e60 <__math_oflowf>:
 8008e60:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008e68 <__math_oflowf+0x8>
 8008e64:	f7ff bfea 	b.w	8008e3c <xflowf>
 8008e68:	70000000 	.word	0x70000000

08008e6c <__ieee754_expf>:
 8008e6c:	ee10 2a10 	vmov	r2, s0
 8008e70:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8008e74:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008e78:	d902      	bls.n	8008e80 <__ieee754_expf+0x14>
 8008e7a:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008e7e:	4770      	bx	lr
 8008e80:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 8008e84:	d106      	bne.n	8008e94 <__ieee754_expf+0x28>
 8008e86:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8008fc0 <__ieee754_expf+0x154>
 8008e8a:	2900      	cmp	r1, #0
 8008e8c:	bf18      	it	ne
 8008e8e:	eeb0 0a67 	vmovne.f32	s0, s15
 8008e92:	4770      	bx	lr
 8008e94:	484b      	ldr	r0, [pc, #300]	; (8008fc4 <__ieee754_expf+0x158>)
 8008e96:	4282      	cmp	r2, r0
 8008e98:	dd02      	ble.n	8008ea0 <__ieee754_expf+0x34>
 8008e9a:	2000      	movs	r0, #0
 8008e9c:	f7ff bfe0 	b.w	8008e60 <__math_oflowf>
 8008ea0:	2a00      	cmp	r2, #0
 8008ea2:	da05      	bge.n	8008eb0 <__ieee754_expf+0x44>
 8008ea4:	4a48      	ldr	r2, [pc, #288]	; (8008fc8 <__ieee754_expf+0x15c>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d902      	bls.n	8008eb0 <__ieee754_expf+0x44>
 8008eaa:	2000      	movs	r0, #0
 8008eac:	f7ff bfd2 	b.w	8008e54 <__math_uflowf>
 8008eb0:	4a46      	ldr	r2, [pc, #280]	; (8008fcc <__ieee754_expf+0x160>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8008eb8:	d952      	bls.n	8008f60 <__ieee754_expf+0xf4>
 8008eba:	4a45      	ldr	r2, [pc, #276]	; (8008fd0 <__ieee754_expf+0x164>)
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	ea4f 0281 	mov.w	r2, r1, lsl #2
 8008ec2:	d834      	bhi.n	8008f2e <__ieee754_expf+0xc2>
 8008ec4:	4b43      	ldr	r3, [pc, #268]	; (8008fd4 <__ieee754_expf+0x168>)
 8008ec6:	4413      	add	r3, r2
 8008ec8:	ed93 7a00 	vldr	s14, [r3]
 8008ecc:	4b42      	ldr	r3, [pc, #264]	; (8008fd8 <__ieee754_expf+0x16c>)
 8008ece:	4413      	add	r3, r2
 8008ed0:	ee30 7a47 	vsub.f32	s14, s0, s14
 8008ed4:	f1c1 0201 	rsb	r2, r1, #1
 8008ed8:	edd3 7a00 	vldr	s15, [r3]
 8008edc:	1a52      	subs	r2, r2, r1
 8008ede:	ee37 0a67 	vsub.f32	s0, s14, s15
 8008ee2:	ee20 6a00 	vmul.f32	s12, s0, s0
 8008ee6:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 8008fdc <__ieee754_expf+0x170>
 8008eea:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008fe0 <__ieee754_expf+0x174>
 8008eee:	eee6 6a05 	vfma.f32	s13, s12, s10
 8008ef2:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8008fe4 <__ieee754_expf+0x178>
 8008ef6:	eea6 5a86 	vfma.f32	s10, s13, s12
 8008efa:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8008fe8 <__ieee754_expf+0x17c>
 8008efe:	eee5 6a06 	vfma.f32	s13, s10, s12
 8008f02:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8008fec <__ieee754_expf+0x180>
 8008f06:	eea6 5a86 	vfma.f32	s10, s13, s12
 8008f0a:	eef0 6a40 	vmov.f32	s13, s0
 8008f0e:	eee5 6a46 	vfms.f32	s13, s10, s12
 8008f12:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8008f16:	ee20 5a26 	vmul.f32	s10, s0, s13
 8008f1a:	bb92      	cbnz	r2, 8008f82 <__ieee754_expf+0x116>
 8008f1c:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8008f20:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8008f24:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8008f28:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8008f2c:	4770      	bx	lr
 8008f2e:	4b30      	ldr	r3, [pc, #192]	; (8008ff0 <__ieee754_expf+0x184>)
 8008f30:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8008ff4 <__ieee754_expf+0x188>
 8008f34:	eddf 6a30 	vldr	s13, [pc, #192]	; 8008ff8 <__ieee754_expf+0x18c>
 8008f38:	4413      	add	r3, r2
 8008f3a:	edd3 7a00 	vldr	s15, [r3]
 8008f3e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8008f42:	eeb0 7a40 	vmov.f32	s14, s0
 8008f46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008f4a:	ee17 2a90 	vmov	r2, s15
 8008f4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008f52:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8008f56:	eddf 6a29 	vldr	s13, [pc, #164]	; 8008ffc <__ieee754_expf+0x190>
 8008f5a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008f5e:	e7be      	b.n	8008ede <__ieee754_expf+0x72>
 8008f60:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
 8008f64:	d20b      	bcs.n	8008f7e <__ieee754_expf+0x112>
 8008f66:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009000 <__ieee754_expf+0x194>
 8008f6a:	ee70 6a26 	vadd.f32	s13, s0, s13
 8008f6e:	eef4 6ae5 	vcmpe.f32	s13, s11
 8008f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f76:	dd02      	ble.n	8008f7e <__ieee754_expf+0x112>
 8008f78:	ee30 0a25 	vadd.f32	s0, s0, s11
 8008f7c:	4770      	bx	lr
 8008f7e:	2200      	movs	r2, #0
 8008f80:	e7af      	b.n	8008ee2 <__ieee754_expf+0x76>
 8008f82:	ee36 6a66 	vsub.f32	s12, s12, s13
 8008f86:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8008f8a:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8008f8e:	bfb8      	it	lt
 8008f90:	3264      	addlt	r2, #100	; 0x64
 8008f92:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008f96:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008f9a:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8008f9e:	ee17 3a90 	vmov	r3, s15
 8008fa2:	bfab      	itete	ge
 8008fa4:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8008fa8:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8008fac:	ee00 3a10 	vmovge	s0, r3
 8008fb0:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 8009004 <__ieee754_expf+0x198>
 8008fb4:	bfbc      	itt	lt
 8008fb6:	ee00 3a10 	vmovlt	s0, r3
 8008fba:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8008fbe:	4770      	bx	lr
 8008fc0:	00000000 	.word	0x00000000
 8008fc4:	42b17217 	.word	0x42b17217
 8008fc8:	42cff1b5 	.word	0x42cff1b5
 8008fcc:	3eb17218 	.word	0x3eb17218
 8008fd0:	3f851591 	.word	0x3f851591
 8008fd4:	08014204 	.word	0x08014204
 8008fd8:	0801420c 	.word	0x0801420c
 8008fdc:	3331bb4c 	.word	0x3331bb4c
 8008fe0:	b5ddea0e 	.word	0xb5ddea0e
 8008fe4:	388ab355 	.word	0x388ab355
 8008fe8:	bb360b61 	.word	0xbb360b61
 8008fec:	3e2aaaab 	.word	0x3e2aaaab
 8008ff0:	080141fc 	.word	0x080141fc
 8008ff4:	3fb8aa3b 	.word	0x3fb8aa3b
 8008ff8:	3f317180 	.word	0x3f317180
 8008ffc:	3717f7d1 	.word	0x3717f7d1
 8009000:	7149f2ca 	.word	0x7149f2ca
 8009004:	0d800000 	.word	0x0d800000

08009008 <_close>:
 8009008:	4b02      	ldr	r3, [pc, #8]	; (8009014 <_close+0xc>)
 800900a:	2258      	movs	r2, #88	; 0x58
 800900c:	601a      	str	r2, [r3, #0]
 800900e:	f04f 30ff 	mov.w	r0, #4294967295
 8009012:	4770      	bx	lr
 8009014:	20001824 	.word	0x20001824

08009018 <_fstat>:
 8009018:	4b02      	ldr	r3, [pc, #8]	; (8009024 <_fstat+0xc>)
 800901a:	2258      	movs	r2, #88	; 0x58
 800901c:	601a      	str	r2, [r3, #0]
 800901e:	f04f 30ff 	mov.w	r0, #4294967295
 8009022:	4770      	bx	lr
 8009024:	20001824 	.word	0x20001824

08009028 <_isatty>:
 8009028:	4b02      	ldr	r3, [pc, #8]	; (8009034 <_isatty+0xc>)
 800902a:	2258      	movs	r2, #88	; 0x58
 800902c:	601a      	str	r2, [r3, #0]
 800902e:	2000      	movs	r0, #0
 8009030:	4770      	bx	lr
 8009032:	bf00      	nop
 8009034:	20001824 	.word	0x20001824

08009038 <_lseek>:
 8009038:	4b02      	ldr	r3, [pc, #8]	; (8009044 <_lseek+0xc>)
 800903a:	2258      	movs	r2, #88	; 0x58
 800903c:	601a      	str	r2, [r3, #0]
 800903e:	f04f 30ff 	mov.w	r0, #4294967295
 8009042:	4770      	bx	lr
 8009044:	20001824 	.word	0x20001824

08009048 <_read>:
 8009048:	4b02      	ldr	r3, [pc, #8]	; (8009054 <_read+0xc>)
 800904a:	2258      	movs	r2, #88	; 0x58
 800904c:	601a      	str	r2, [r3, #0]
 800904e:	f04f 30ff 	mov.w	r0, #4294967295
 8009052:	4770      	bx	lr
 8009054:	20001824 	.word	0x20001824

08009058 <_write>:
 8009058:	4b02      	ldr	r3, [pc, #8]	; (8009064 <_write+0xc>)
 800905a:	2258      	movs	r2, #88	; 0x58
 800905c:	601a      	str	r2, [r3, #0]
 800905e:	f04f 30ff 	mov.w	r0, #4294967295
 8009062:	4770      	bx	lr
 8009064:	20001824 	.word	0x20001824

08009068 <_init>:
 8009068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800906a:	bf00      	nop
 800906c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800906e:	bc08      	pop	{r3}
 8009070:	469e      	mov	lr, r3
 8009072:	4770      	bx	lr

08009074 <_fini>:
 8009074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009076:	bf00      	nop
 8009078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800907a:	bc08      	pop	{r3}
 800907c:	469e      	mov	lr, r3
 800907e:	4770      	bx	lr
