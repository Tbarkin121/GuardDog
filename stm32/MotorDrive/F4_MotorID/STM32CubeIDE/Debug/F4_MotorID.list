
F4_MotorID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b188  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000046c  0800b350  0800b350  0000c350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b7bc  0800b7bc  0000db6c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b7bc  0800b7bc  0000c7bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b7c4  0800b7c4  0000db6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b7c4  0800b7c4  0000c7c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b7c8  0800b7c8  0000c7c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000b6c  20000000  0800b7cc  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001408  20000b6c  0800c338  0000db6c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001f74  0800c338  0000df74  2**0
                  ALLOC
 11 .ARM.attributes 0000003a  00000000  00000000  0000db6c  2**0
                  CONTENTS, READONLY
 12 .debug_line   00042377  00000000  00000000  0000dba6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 00000085  00000000  00000000  0004ff1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   0004bb32  00000000  00000000  0004ffa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000080b2  00000000  00000000  0009bad4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002578  00000000  00000000  000a3b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000f7340  00000000  00000000  000a6100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000026a5  00000000  00000000  0019d440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loclists 000177ea  00000000  00000000  0019fae5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002c58f  00000000  00000000  001b72cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00001960  00000000  00000000  001e385e  2**0
                  CONTENTS, READONLY
 22 .iar.rtmodel  000000a2  00000000  00000000  001e51be  2**0
                  CONTENTS, READONLY
 23 .iar_vfe_header 0000000c  00000000  00000000  001e5260  2**2
                  CONTENTS, READONLY
 24 .debug_frame  000052ec  00000000  00000000  001e526c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_types  00000820  00000000  00000000  001ea558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_macinfo 000004e7  00000000  00000000  001ead78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_loc    00002b73  00000000  00000000  001eb25f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_ranges 000004a0  00000000  00000000  001eddd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 29 .debug_pubnames 00000c8c  00000000  00000000  001ee272  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000b6c 	.word	0x20000b6c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800b338 	.word	0x0800b338

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000b70 	.word	0x20000b70
 8000204:	0800b338 	.word	0x0800b338

08000208 <OTT_Init>:
 8000208:	b510      	push	{r4, lr}
 800020a:	4604      	mov	r4, r0
 800020c:	f8df 0934 	ldr.w	r0, [pc, #2356]	@ 8000b44 <??DataTable4_2>
 8000210:	6120      	str	r0, [r4, #16]
 8000212:	f00a f961 	bl	800a4d8 <REMNG_Init>
 8000216:	2100      	movs	r1, #0
 8000218:	f8d4 009c 	ldr.w	r0, [r4, #156]	@ 0x9c
 800021c:	f8a4 1058 	strh.w	r1, [r4, #88]	@ 0x58
 8000220:	f8a4 105a 	strh.w	r1, [r4, #90]	@ 0x5a
 8000224:	6221      	str	r1, [r4, #32]
 8000226:	6261      	str	r1, [r4, #36]	@ 0x24
 8000228:	62a1      	str	r1, [r4, #40]	@ 0x28
 800022a:	62e1      	str	r1, [r4, #44]	@ 0x2c
 800022c:	6521      	str	r1, [r4, #80]	@ 0x50
 800022e:	2200      	movs	r2, #0
 8000230:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 8000232:	f8c4 1080 	str.w	r1, [r4, #128]	@ 0x80
 8000236:	2300      	movs	r3, #0
 8000238:	6981      	ldr	r1, [r0, #24]
 800023a:	6321      	str	r1, [r4, #48]	@ 0x30
 800023c:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
 8000240:	63a3      	str	r3, [r4, #56]	@ 0x38
 8000242:	63e2      	str	r2, [r4, #60]	@ 0x3c
 8000244:	f8a4 2040 	strh.w	r2, [r4, #64]	@ 0x40
 8000248:	f8a4 204c 	strh.w	r2, [r4, #76]	@ 0x4c
 800024c:	f8a4 204e 	strh.w	r2, [r4, #78]	@ 0x4e
 8000250:	ed90 0a00 	vldr	s0, [r0]
 8000254:	edd0 0a07 	vldr	s1, [r0, #28]
 8000258:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 800025c:	ee60 0a20 	vmul.f32	s1, s0, s1
 8000260:	eefd 0ae0 	vcvt.s32.f32	s1, s1
 8000264:	ee10 1a90 	vmov	r1, s1
 8000268:	f8a4 105c 	strh.w	r1, [r4, #92]	@ 0x5c
 800026c:	ed90 0a09 	vldr	s0, [r0, #36]	@ 0x24
 8000270:	edd0 0a07 	vldr	s1, [r0, #28]
 8000274:	eec0 0a20 	vdiv.f32	s1, s0, s1
 8000278:	eefd 0ae0 	vcvt.s32.f32	s1, s1
 800027c:	ee10 1a90 	vmov	r1, s1
 8000280:	f8a4 105e 	strh.w	r1, [r4, #94]	@ 0x5e
 8000284:	ed90 0a00 	vldr	s0, [r0]
 8000288:	edd0 0a0c 	vldr	s1, [r0, #48]	@ 0x30
 800028c:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8000290:	ee60 0a20 	vmul.f32	s1, s0, s1
 8000294:	eefd 0ae0 	vcvt.s32.f32	s1, s1
 8000298:	ee10 1a90 	vmov	r1, s1
 800029c:	f8a4 1060 	strh.w	r1, [r4, #96]	@ 0x60
 80002a0:	ed90 0a00 	vldr	s0, [r0]
 80002a4:	edd0 0a0d 	vldr	s1, [r0, #52]	@ 0x34
 80002a8:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
 80002ac:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80002b0:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 80002b4:	ee60 0a20 	vmul.f32	s1, s0, s1
 80002b8:	eefd 0ae0 	vcvt.s32.f32	s1, s1
 80002bc:	ee10 0a90 	vmov	r0, s1
 80002c0:	f8a4 0074 	strh.w	r0, [r4, #116]	@ 0x74
 80002c4:	6662      	str	r2, [r4, #100]	@ 0x64
 80002c6:	66a2      	str	r2, [r4, #104]	@ 0x68
 80002c8:	f884 206c 	strb.w	r2, [r4, #108]	@ 0x6c
 80002cc:	6722      	str	r2, [r4, #112]	@ 0x70
 80002ce:	f891 0020 	ldrb.w	r0, [r1, #32]
 80002d2:	f884 0076 	strb.w	r0, [r4, #118]	@ 0x76
 80002d6:	f8d4 009c 	ldr.w	r0, [r4, #156]	@ 0x9c
 80002da:	8c41      	ldrh	r1, [r0, #34]	@ 0x22
 80002dc:	f8a4 1078 	strh.w	r1, [r4, #120]	@ 0x78
 80002e0:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 80002e2:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
 80002e6:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 80002e8:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
 80002ec:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 80002ee:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c
 80002f2:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
 80002f6:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
 80002fa:	bd10      	pop	{r4, pc}

080002fc <OTT_Clear>:
 80002fc:	f890 1062 	ldrb.w	r1, [r0, #98]	@ 0x62
 8000300:	b979      	cbnz	r1, 8000322 <??OTT_Clear_0>
 8000302:	2200      	movs	r2, #0
 8000304:	f880 2034 	strb.w	r2, [r0, #52]	@ 0x34
 8000308:	6381      	str	r1, [r0, #56]	@ 0x38
 800030a:	63c2      	str	r2, [r0, #60]	@ 0x3c
 800030c:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
 8000310:	f8a0 204c 	strh.w	r2, [r0, #76]	@ 0x4c
 8000314:	f8a0 104e 	strh.w	r1, [r0, #78]	@ 0x4e
 8000318:	f8c0 2090 	str.w	r2, [r0, #144]	@ 0x90
 800031c:	f8c0 1094 	str.w	r1, [r0, #148]	@ 0x94
 8000320:	4770      	bx	lr

08000322 <??OTT_Clear_0>:
 8000322:	220a      	movs	r2, #10
 8000324:	f880 2034 	strb.w	r2, [r0, #52]	@ 0x34
 8000328:	4770      	bx	lr

0800032a <OTT_Stop>:
 800032a:	2100      	movs	r1, #0
 800032c:	f880 1034 	strb.w	r1, [r0, #52]	@ 0x34
 8000330:	4770      	bx	lr
	...

08000334 <OTT_MF>:
 8000334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000338:	4605      	mov	r5, r0
 800033a:	f895 0034 	ldrb.w	r0, [r5, #52]	@ 0x34
 800033e:	692c      	ldr	r4, [r5, #16]
 8000340:	2809      	cmp	r0, #9
 8000342:	f200 80cb 	bhi.w	80004dc <??OTT_MF_2>
 8000346:	e8df f010 	tbh	[pc, r0, lsl #1]

0800034a <??OTT_MF_0>:
 800034a:	000a 0049 00c9 00c9 00c9 00a2 00cb 0146     ..I...........F.
 800035a:	0170 0213                                   p...

0800035e <??OTT_MF_3>:
 800035e:	6868      	ldr	r0, [r5, #4]
 8000360:	2100      	movs	r1, #0
 8000362:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 8000366:	2104      	movs	r1, #4
 8000368:	68e8      	ldr	r0, [r5, #12]
 800036a:	f00a fad1 	bl	800a910 <STC_SetControlMode>
 800036e:	2100      	movs	r1, #0
 8000370:	63a9      	str	r1, [r5, #56]	@ 0x38
 8000372:	f8a5 1040 	strh.w	r1, [r5, #64]	@ 0x40
 8000376:	f8a5 104c 	strh.w	r1, [r5, #76]	@ 0x4c
 800037a:	2000      	movs	r0, #0
 800037c:	63e8      	str	r0, [r5, #60]	@ 0x3c
 800037e:	f8a5 0048 	strh.w	r0, [r5, #72]	@ 0x48
 8000382:	f8a5 004e 	strh.w	r0, [r5, #78]	@ 0x4e
 8000386:	2101      	movs	r1, #1
 8000388:	f885 006c 	strb.w	r0, [r5, #108]	@ 0x6c
 800038c:	f8a5 104a 	strh.w	r1, [r5, #74]	@ 0x4a
 8000390:	6828      	ldr	r0, [r5, #0]
 8000392:	f00a fa47 	bl	800a824 <SPD_GetAvrgMecSpeedUnit>
 8000396:	ebc0 1100 	rsb	r1, r0, r0, lsl #4
 800039a:	0088      	lsls	r0, r1, #2
 800039c:	f8df 37a8 	ldr.w	r3, [pc, #1960]	@ 8000b48 <??DataTable4_3>
 80003a0:	fb80 6303 	smull	r6, r3, r0, r3
 80003a4:	1099      	asrs	r1, r3, #2
 80003a6:	2200      	movs	r2, #0
 80003a8:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 80003ac:	4620      	mov	r0, r4
 80003ae:	f00a f8e3 	bl	800a578 <REMNG_ExecRamp>
 80003b2:	f8d5 1080 	ldr.w	r1, [r5, #128]	@ 0x80
 80003b6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80003ba:	4620      	mov	r0, r4
 80003bc:	f00a f8dc 	bl	800a578 <REMNG_ExecRamp>
 80003c0:	2001      	movs	r0, #1
 80003c2:	6869      	ldr	r1, [r5, #4]
 80003c4:	f885 0034 	strb.w	r0, [r5, #52]	@ 0x34
 80003c8:	f9b1 0010 	ldrsh.w	r0, [r1, #16]
 80003cc:	ee00 0a10 	vmov	s0, r0
 80003d0:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80003d4:	ed85 0a24 	vstr	s0, [r5, #144]	@ 0x90
 80003d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080003dc <??OTT_MF_4>:
 80003dc:	4620      	mov	r0, r4
 80003de:	f00a f883 	bl	800a4e8 <REMNG_Calc>
 80003e2:	ee00 0a10 	vmov	s0, r0
 80003e6:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80003ea:	ed85 0a1c 	vstr	s0, [r5, #112]	@ 0x70
 80003ee:	4628      	mov	r0, r5
 80003f0:	f000 fad6 	bl	80009a0 <OTT_SpeedCtrl>
 80003f4:	4606      	mov	r6, r0
 80003f6:	4620      	mov	r0, r4
 80003f8:	f00a f898 	bl	800a52c <REMNG_RampCompleted>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d06d      	beq.n	80004dc <??OTT_MF_2>
 8000400:	f8b5 004e 	ldrh.w	r0, [r5, #78]	@ 0x4e
 8000404:	1c40      	adds	r0, r0, #1
 8000406:	2e01      	cmp	r6, #1
 8000408:	f8a5 004e 	strh.w	r0, [r5, #78]	@ 0x4e
 800040c:	d004      	beq.n	8000418 <??OTT_MF_5>
 800040e:	f8b5 1074 	ldrh.w	r1, [r5, #116]	@ 0x74
 8000412:	b280      	uxth	r0, r0
 8000414:	4281      	cmp	r1, r0
 8000416:	d261      	bcs.n	80004dc <??OTT_MF_2>

08000418 <??OTT_MF_5>:
 8000418:	6828      	ldr	r0, [r5, #0]
 800041a:	f00a fa03 	bl	800a824 <SPD_GetAvrgMecSpeedUnit>
 800041e:	ebc0 1100 	rsb	r1, r0, r0, lsl #4
 8000422:	0088      	lsls	r0, r1, #2
 8000424:	f8df 2720 	ldr.w	r2, [pc, #1824]	@ 8000b48 <??DataTable4_3>
 8000428:	fb80 3202 	smull	r3, r2, r0, r2
 800042c:	1092      	asrs	r2, r2, #2
 800042e:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8000432:	ee00 2a10 	vmov	s0, r2
 8000436:	f8d5 009c 	ldr.w	r0, [r5, #156]	@ 0x9c
 800043a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800043e:	ed85 0a14 	vstr	s0, [r5, #80]	@ 0x50
 8000442:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000446:	edd0 0a0a 	vldr	s1, [r0, #40]	@ 0x28
 800044a:	ee60 0a20 	vmul.f32	s1, s0, s1
 800044e:	eefd 0ae0 	vcvt.s32.f32	s1, s1
 8000452:	ee10 1a90 	vmov	r1, s1
 8000456:	f8a5 1058 	strh.w	r1, [r5, #88]	@ 0x58
 800045a:	ed90 1a0b 	vldr	s2, [r0, #44]	@ 0x2c
 800045e:	ee20 0a01 	vmul.f32	s0, s0, s2
 8000462:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8000466:	ee10 1a10 	vmov	r1, s0
 800046a:	2000      	movs	r0, #0
 800046c:	63e8      	str	r0, [r5, #60]	@ 0x3c
 800046e:	f8a5 0040 	strh.w	r0, [r5, #64]	@ 0x40
 8000472:	6468      	str	r0, [r5, #68]	@ 0x44
 8000474:	f8a5 004e 	strh.w	r0, [r5, #78]	@ 0x4e
 8000478:	f8a5 105a 	strh.w	r1, [r5, #90]	@ 0x5a
 800047c:	4620      	mov	r0, r4
 800047e:	b209      	sxth	r1, r1
 8000480:	f00a f87a 	bl	800a578 <REMNG_ExecRamp>
 8000484:	2005      	movs	r0, #5
 8000486:	f885 0034 	strb.w	r0, [r5, #52]	@ 0x34
 800048a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800048e <??OTT_MF_6>:
 800048e:	4620      	mov	r0, r4
 8000490:	f00a f82a 	bl	800a4e8 <REMNG_Calc>
 8000494:	ee00 0a10 	vmov	s0, r0
 8000498:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800049c:	ed85 0a1c 	vstr	s0, [r5, #112]	@ 0x70
 80004a0:	4628      	mov	r0, r5
 80004a2:	f000 fa7d 	bl	80009a0 <OTT_SpeedCtrl>
 80004a6:	4606      	mov	r6, r0
 80004a8:	4620      	mov	r0, r4
 80004aa:	f00a f83f 	bl	800a52c <REMNG_RampCompleted>
 80004ae:	b1a8      	cbz	r0, 80004dc <??OTT_MF_2>
 80004b0:	f8b5 004e 	ldrh.w	r0, [r5, #78]	@ 0x4e
 80004b4:	1c40      	adds	r0, r0, #1
 80004b6:	2e01      	cmp	r6, #1
 80004b8:	d004      	beq.n	80004c4 <??OTT_MF_7>
 80004ba:	f8b5 1074 	ldrh.w	r1, [r5, #116]	@ 0x74
 80004be:	b282      	uxth	r2, r0
 80004c0:	4291      	cmp	r1, r2
 80004c2:	d209      	bcs.n	80004d8 <??OTT_MF_8>

080004c4 <??OTT_MF_7>:
 80004c4:	2000      	movs	r0, #0
 80004c6:	2206      	movs	r2, #6
 80004c8:	63e8      	str	r0, [r5, #60]	@ 0x3c
 80004ca:	f8a5 0040 	strh.w	r0, [r5, #64]	@ 0x40
 80004ce:	6468      	str	r0, [r5, #68]	@ 0x44
 80004d0:	f8a5 0048 	strh.w	r0, [r5, #72]	@ 0x48
 80004d4:	f885 2034 	strb.w	r2, [r5, #52]	@ 0x34

080004d8 <??OTT_MF_8>:
 80004d8:	f8a5 004e 	strh.w	r0, [r5, #78]	@ 0x4e

080004dc <??OTT_MF_2>:
 80004dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080004e0 <??OTT_MF_9>:
 80004e0:	4628      	mov	r0, r5
 80004e2:	ed95 0a1c 	vldr	s0, [r5, #112]	@ 0x70
 80004e6:	f000 fa5b 	bl	80009a0 <OTT_SpeedCtrl>
 80004ea:	6828      	ldr	r0, [r5, #0]
 80004ec:	f00a f99a 	bl	800a824 <SPD_GetAvrgMecSpeedUnit>
 80004f0:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 80004f4:	0050      	lsls	r0, r2, #1
 80004f6:	f8df 3650 	ldr.w	r3, [pc, #1616]	@ 8000b48 <??DataTable4_3>
 80004fa:	6be9      	ldr	r1, [r5, #60]	@ 0x3c
 80004fc:	686a      	ldr	r2, [r5, #4]
 80004fe:	fb80 6303 	smull	r6, r3, r0, r3
 8000502:	1098      	asrs	r0, r3, #2
 8000504:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8000508:	1840      	adds	r0, r0, r1
 800050a:	63e8      	str	r0, [r5, #60]	@ 0x3c
 800050c:	6ba9      	ldr	r1, [r5, #56]	@ 0x38
 800050e:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 8000512:	f8b5 2040 	ldrh.w	r2, [r5, #64]	@ 0x40
 8000516:	f8b5 605c 	ldrh.w	r6, [r5, #92]	@ 0x5c
 800051a:	18c9      	adds	r1, r1, r3
 800051c:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 800051e:	1c52      	adds	r2, r2, #1
 8000520:	b297      	uxth	r7, r2
 8000522:	1c5b      	adds	r3, r3, #1
 8000524:	42be      	cmp	r6, r7
 8000526:	63a9      	str	r1, [r5, #56]	@ 0x38
 8000528:	f8a5 2040 	strh.w	r2, [r5, #64]	@ 0x40
 800052c:	646b      	str	r3, [r5, #68]	@ 0x44
 800052e:	d2d5      	bcs.n	80004dc <??OTT_MF_2>
 8000530:	b292      	uxth	r2, r2
 8000532:	fb90 f0f2 	sdiv	r0, r0, r2
 8000536:	f8b5 2048 	ldrh.w	r2, [r5, #72]	@ 0x48
 800053a:	1a12      	subs	r2, r2, r0
 800053c:	b216      	sxth	r6, r2
 800053e:	f8a5 204a 	strh.w	r2, [r5, #74]	@ 0x4a
 8000542:	2e00      	cmp	r6, #0
 8000544:	bf44      	itt	mi
 8000546:	4632      	movmi	r2, r6
 8000548:	4252      	negmi	r2, r2
 800054a:	f8a5 0048 	strh.w	r0, [r5, #72]	@ 0x48
 800054e:	2600      	movs	r6, #0
 8000550:	2000      	movs	r0, #0
 8000552:	63e8      	str	r0, [r5, #60]	@ 0x3c
 8000554:	f8a5 6040 	strh.w	r6, [r5, #64]	@ 0x40
 8000558:	f8b5 0060 	ldrh.w	r0, [r5, #96]	@ 0x60
 800055c:	4298      	cmp	r0, r3
 800055e:	db02      	blt.n	8000566 <??OTT_MF_10>
 8000560:	b212      	sxth	r2, r2
 8000562:	2a04      	cmp	r2, #4
 8000564:	dcba      	bgt.n	80004dc <??OTT_MF_2>

08000566 <??OTT_MF_10>:
 8000566:	fb91 f0f3 	sdiv	r0, r1, r3
 800056a:	82a8      	strh	r0, [r5, #20]
 800056c:	eddf 0a7f 	vldr	s1, [pc, #508]	@ 800076c <??OTT_MF_1>
 8000570:	f9b5 0048 	ldrsh.w	r0, [r5, #72]	@ 0x48
 8000574:	f895 1076 	ldrb.w	r1, [r5, #118]	@ 0x76
 8000578:	ee00 0a10 	vmov	s0, r0
 800057c:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8000580:	ee01 1a10 	vmov	s2, r1
 8000584:	ee60 0a20 	vmul.f32	s1, s0, s1
 8000588:	eeb8 1a41 	vcvt.f32.u32	s2, s2
 800058c:	ee20 1a81 	vmul.f32	s2, s1, s2
 8000590:	ed85 1a06 	vstr	s2, [r5, #24]
 8000594:	6828      	ldr	r0, [r5, #0]
 8000596:	f00a f945 	bl	800a824 <SPD_GetAvrgMecSpeedUnit>
 800059a:	ebc0 1100 	rsb	r1, r0, r0, lsl #4
 800059e:	0088      	lsls	r0, r1, #2
 80005a0:	f8df 25a4 	ldr.w	r2, [pc, #1444]	@ 8000b48 <??DataTable4_3>
 80005a4:	f9b5 1058 	ldrsh.w	r1, [r5, #88]	@ 0x58
 80005a8:	f8a5 604e 	strh.w	r6, [r5, #78]	@ 0x4e
 80005ac:	fb80 3202 	smull	r3, r2, r0, r2
 80005b0:	1092      	asrs	r2, r2, #2
 80005b2:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 80005b6:	ee00 2a10 	vmov	s0, r2
 80005ba:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80005be:	ed85 0a1c 	vstr	s0, [r5, #112]	@ 0x70
 80005c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80005c6:	4620      	mov	r0, r4
 80005c8:	f009 ffd6 	bl	800a578 <REMNG_ExecRamp>
 80005cc:	2007      	movs	r0, #7
 80005ce:	f885 0034 	strb.w	r0, [r5, #52]	@ 0x34
 80005d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080005d6 <??OTT_MF_11>:
 80005d6:	4620      	mov	r0, r4
 80005d8:	f009 ff86 	bl	800a4e8 <REMNG_Calc>
 80005dc:	ee00 0a10 	vmov	s0, r0
 80005e0:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80005e4:	ed85 0a1c 	vstr	s0, [r5, #112]	@ 0x70
 80005e8:	4628      	mov	r0, r5
 80005ea:	f000 f9d9 	bl	80009a0 <OTT_SpeedCtrl>
 80005ee:	4606      	mov	r6, r0
 80005f0:	4620      	mov	r0, r4
 80005f2:	f009 ff9b 	bl	800a52c <REMNG_RampCompleted>
 80005f6:	2800      	cmp	r0, #0
 80005f8:	f43f af70 	beq.w	80004dc <??OTT_MF_2>
 80005fc:	f8b5 004e 	ldrh.w	r0, [r5, #78]	@ 0x4e
 8000600:	1c40      	adds	r0, r0, #1
 8000602:	2e01      	cmp	r6, #1
 8000604:	d005      	beq.n	8000612 <??OTT_MF_12>
 8000606:	f8b5 1074 	ldrh.w	r1, [r5, #116]	@ 0x74
 800060a:	b282      	uxth	r2, r0
 800060c:	4291      	cmp	r1, r2
 800060e:	f4bf af63 	bcs.w	80004d8 <??OTT_MF_8>

08000612 <??OTT_MF_12>:
 8000612:	2000      	movs	r0, #0
 8000614:	2108      	movs	r1, #8
 8000616:	63a8      	str	r0, [r5, #56]	@ 0x38
 8000618:	63e8      	str	r0, [r5, #60]	@ 0x3c
 800061a:	f8a5 0040 	strh.w	r0, [r5, #64]	@ 0x40
 800061e:	6468      	str	r0, [r5, #68]	@ 0x44
 8000620:	f8a5 0048 	strh.w	r0, [r5, #72]	@ 0x48
 8000624:	f885 1034 	strb.w	r1, [r5, #52]	@ 0x34
 8000628:	e756      	b.n	80004d8 <??OTT_MF_8>

0800062a <??OTT_MF_13>:
 800062a:	ed95 0a1c 	vldr	s0, [r5, #112]	@ 0x70
 800062e:	4628      	mov	r0, r5
 8000630:	f000 f9b6 	bl	80009a0 <OTT_SpeedCtrl>
 8000634:	6828      	ldr	r0, [r5, #0]
 8000636:	f00a f8f5 	bl	800a824 <SPD_GetAvrgMecSpeedUnit>
 800063a:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 800063e:	0050      	lsls	r0, r2, #1
 8000640:	f8df 3504 	ldr.w	r3, [pc, #1284]	@ 8000b48 <??DataTable4_3>
 8000644:	6be9      	ldr	r1, [r5, #60]	@ 0x3c
 8000646:	686a      	ldr	r2, [r5, #4]
 8000648:	fb80 4303 	smull	r4, r3, r0, r3
 800064c:	1098      	asrs	r0, r3, #2
 800064e:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8000652:	1840      	adds	r0, r0, r1
 8000654:	63e8      	str	r0, [r5, #60]	@ 0x3c
 8000656:	6ba9      	ldr	r1, [r5, #56]	@ 0x38
 8000658:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 800065c:	f8b5 2040 	ldrh.w	r2, [r5, #64]	@ 0x40
 8000660:	f8b5 405c 	ldrh.w	r4, [r5, #92]	@ 0x5c
 8000664:	18c9      	adds	r1, r1, r3
 8000666:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8000668:	1c52      	adds	r2, r2, #1
 800066a:	b296      	uxth	r6, r2
 800066c:	1c5b      	adds	r3, r3, #1
 800066e:	42b4      	cmp	r4, r6
 8000670:	63a9      	str	r1, [r5, #56]	@ 0x38
 8000672:	f8a5 2040 	strh.w	r2, [r5, #64]	@ 0x40
 8000676:	646b      	str	r3, [r5, #68]	@ 0x44
 8000678:	f4bf af30 	bcs.w	80004dc <??OTT_MF_2>
 800067c:	b292      	uxth	r2, r2
 800067e:	fb90 f0f2 	sdiv	r0, r0, r2
 8000682:	f8b5 2048 	ldrh.w	r2, [r5, #72]	@ 0x48
 8000686:	1a12      	subs	r2, r2, r0
 8000688:	b214      	sxth	r4, r2
 800068a:	f8a5 204a 	strh.w	r2, [r5, #74]	@ 0x4a
 800068e:	2c00      	cmp	r4, #0
 8000690:	bf44      	itt	mi
 8000692:	4622      	movmi	r2, r4
 8000694:	4252      	negmi	r2, r2
 8000696:	f8a5 0048 	strh.w	r0, [r5, #72]	@ 0x48
 800069a:	2400      	movs	r4, #0
 800069c:	2000      	movs	r0, #0
 800069e:	63e8      	str	r0, [r5, #60]	@ 0x3c
 80006a0:	f8a5 4040 	strh.w	r4, [r5, #64]	@ 0x40
 80006a4:	f8b5 0060 	ldrh.w	r0, [r5, #96]	@ 0x60
 80006a8:	4298      	cmp	r0, r3
 80006aa:	db03      	blt.n	80006b4 <??OTT_MF_14>
 80006ac:	b212      	sxth	r2, r2
 80006ae:	2a04      	cmp	r2, #4
 80006b0:	f73f af14 	bgt.w	80004dc <??OTT_MF_2>

080006b4 <??OTT_MF_14>:
 80006b4:	fb91 f0f3 	sdiv	r0, r1, r3
 80006b8:	82e8      	strh	r0, [r5, #22]
 80006ba:	eddf 0a2c 	vldr	s1, [pc, #176]	@ 800076c <??OTT_MF_1>
 80006be:	f9b5 0048 	ldrsh.w	r0, [r5, #72]	@ 0x48
 80006c2:	f895 1076 	ldrb.w	r1, [r5, #118]	@ 0x76
 80006c6:	ee00 0a10 	vmov	s0, r0
 80006ca:	f9b5 0014 	ldrsh.w	r0, [r5, #20]
 80006ce:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80006d2:	ee01 1a10 	vmov	s2, r1
 80006d6:	f9b5 1016 	ldrsh.w	r1, [r5, #22]
 80006da:	ee60 0a20 	vmul.f32	s1, s0, s1
 80006de:	eeb8 1a41 	vcvt.f32.u32	s2, s2
 80006e2:	ee20 0a81 	vmul.f32	s0, s1, s2
 80006e6:	ee00 0a90 	vmov	s1, r0
 80006ea:	ee01 1a10 	vmov	s2, r1
 80006ee:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 80006f2:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 80006f6:	ee30 1ac1 	vsub.f32	s2, s1, s2
 80006fa:	ed85 0a07 	vstr	s0, [r5, #28]
 80006fe:	edd5 0a06 	vldr	s1, [r5, #24]
 8000702:	ee30 0ac0 	vsub.f32	s0, s1, s0
 8000706:	ee81 0a00 	vdiv.f32	s0, s2, s0
 800070a:	eddf 0a88 	vldr	s1, [pc, #544]	@ 800092c <??DataTable1>
 800070e:	eeb4 0a60 	vcmp.f32	s0, s1
 8000712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000716:	bf48      	it	mi
 8000718:	eeb0 0a60 	vmovmi.f32	s0, s1
 800071c:	ed85 0a08 	vstr	s0, [r5, #32]
 8000720:	ed95 0a06 	vldr	s0, [r5, #24]
 8000724:	edd5 0a07 	vldr	s1, [r5, #28]
 8000728:	ee70 0a60 	vsub.f32	s1, s0, s1
 800072c:	ed9f 1a80 	vldr	s2, [pc, #512]	@ 8000930 <??DataTable1_1>
 8000730:	ee20 0a81 	vmul.f32	s0, s1, s2
 8000734:	f9b5 1014 	ldrsh.w	r1, [r5, #20]
 8000738:	f9b5 2016 	ldrsh.w	r2, [r5, #22]
 800073c:	edd5 0a07 	vldr	s1, [r5, #28]
 8000740:	68e8      	ldr	r0, [r5, #12]
 8000742:	ed85 0a09 	vstr	s0, [r5, #36]	@ 0x24
 8000746:	ee30 0a20 	vadd.f32	s0, s0, s1
 800074a:	428a      	cmp	r2, r1
 800074c:	ed85 0a09 	vstr	s0, [r5, #36]	@ 0x24
 8000750:	4622      	mov	r2, r4
 8000752:	bfa8      	it	ge
 8000754:	f9b5 1078 	ldrshge.w	r1, [r5, #120]	@ 0x78
 8000758:	f00a f8de 	bl	800a918 <STC_ExecRamp>
 800075c:	f8a5 404e 	strh.w	r4, [r5, #78]	@ 0x4e
 8000760:	2109      	movs	r1, #9
 8000762:	f885 1034 	strb.w	r1, [r5, #52]	@ 0x34
 8000766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800076a:	bf00      	nop

0800076c <??OTT_MF_1>:
 800076c:	c49c 3f20                                   .. ?

08000770 <??OTT_MF_15>:
 8000770:	f8b5 004e 	ldrh.w	r0, [r5, #78]	@ 0x4e
 8000774:	1c40      	adds	r0, r0, #1
 8000776:	f8a5 004e 	strh.w	r0, [r5, #78]	@ 0x4e
 800077a:	6828      	ldr	r0, [r5, #0]
 800077c:	f00a f852 	bl	800a824 <SPD_GetAvrgMecSpeedUnit>
 8000780:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8000784:	0050      	lsls	r0, r2, #1
 8000786:	f8df 33c0 	ldr.w	r3, [pc, #960]	@ 8000b48 <??DataTable4_3>
 800078a:	f895 1076 	ldrb.w	r1, [r5, #118]	@ 0x76
 800078e:	edd5 1a09 	vldr	s3, [r5, #36]	@ 0x24
 8000792:	fb80 4303 	smull	r4, r3, r0, r3
 8000796:	109b      	asrs	r3, r3, #2
 8000798:	ee00 1a10 	vmov	s0, r1
 800079c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80007a0:	eef8 0a40 	vcvt.f32.u32	s1, s0
 80007a4:	ee01 3a10 	vmov	s2, r3
 80007a8:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 8000b0c <??DataTable3>
 80007ac:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 80007b0:	ee21 1a00 	vmul.f32	s2, s2, s0
 80007b4:	ee21 1a20 	vmul.f32	s2, s2, s1
 80007b8:	eeb4 1a61 	vcmp.f32	s2, s3
 80007bc:	f8b5 104e 	ldrh.w	r1, [r5, #78]	@ 0x4e
 80007c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007c4:	da06      	bge.n	80007d4 <??OTT_MF_16>
 80007c6:	f8b5 0074 	ldrh.w	r0, [r5, #116]	@ 0x74
 80007ca:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80007ce:	4288      	cmp	r0, r1
 80007d0:	f6bf ae84 	bge.w	80004dc <??OTT_MF_2>

080007d4 <??OTT_MF_16>:
 80007d4:	eeb6 2a00 	vmov.f32	s4, #96	@ 0x3f000000  0.5
 80007d8:	f8d5 009c 	ldr.w	r0, [r5, #156]	@ 0x9c
 80007dc:	68ae      	ldr	r6, [r5, #8]
 80007de:	edd0 1a00 	vldr	s3, [r0]
 80007e2:	eef3 2a0e 	vmov.f32	s5, #62	@ 0x41f00000  30.0
 80007e6:	ee01 1a10 	vmov	s2, r1
 80007ea:	eeb8 1a41 	vcvt.f32.u32	s2, s2
 80007ee:	eef8 1a61 	vcvt.f32.u32	s3, s3
 80007f2:	ee81 1a21 	vdiv.f32	s2, s2, s3
 80007f6:	ee82 2a01 	vdiv.f32	s4, s4, s2
 80007fa:	ee62 1a22 	vmul.f32	s3, s4, s5
 80007fe:	edc5 1a0c 	vstr	s3, [r5, #48]	@ 0x30
 8000802:	ed85 1a0a 	vstr	s2, [r5, #40]	@ 0x28
 8000806:	2110      	movs	r1, #16
 8000808:	ed95 2a08 	vldr	s4, [r5, #32]
 800080c:	ee21 2a02 	vmul.f32	s4, s2, s4
 8000810:	ee62 1a21 	vmul.f32	s3, s4, s3
 8000814:	ee21 0a80 	vmul.f32	s0, s3, s0
 8000818:	ee20 0a20 	vmul.f32	s0, s0, s1
 800081c:	ed85 2a0b 	vstr	s4, [r5, #44]	@ 0x2c
 8000820:	ed85 0a19 	vstr	s0, [r5, #100]	@ 0x64
 8000824:	eec0 0a01 	vdiv.f32	s1, s0, s2
 8000828:	ed90 1a00 	vldr	s2, [r0]
 800082c:	eeb8 1a41 	vcvt.f32.u32	s2, s2
 8000830:	eec0 0a81 	vdiv.f32	s1, s1, s2
 8000834:	edc5 0a1a 	vstr	s1, [r5, #104]	@ 0x68
 8000838:	2710      	movs	r7, #16
 800083a:	f04f 0800 	mov.w	r8, #0
 800083e:	200f      	movs	r0, #15
 8000840:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8000844:	f05f 0301 	movs.w	r3, #1

08000848 <??OTT_MF_17>:
 8000848:	fa03 f400 	lsl.w	r4, r3, r0
 800084c:	ee01 4a10 	vmov	s2, r4
 8000850:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8000854:	ee21 1a00 	vmul.f32	s2, s2, s0
 8000858:	eebd 1ac1 	vcvt.s32.f32	s2, s2
 800085c:	ee11 4a10 	vmov	r4, s2
 8000860:	4294      	cmp	r4, r2
 8000862:	da06      	bge.n	8000872 <??OTT_MF_18>
 8000864:	4601      	mov	r1, r0
 8000866:	e004      	b.n	8000872 <??OTT_MF_18>

08000868 <??OTT_MF_19>:
 8000868:	fa1f fc81 	uxth.w	ip, r1
 800086c:	f1bc 0f10 	cmp.w	ip, #16
 8000870:	d0ea      	beq.n	8000848 <??OTT_MF_17>

08000872 <??OTT_MF_18>:
 8000872:	fa1f fc87 	uxth.w	ip, r7
 8000876:	f1bc 0f10 	cmp.w	ip, #16
 800087a:	d10e      	bne.n	800089a <??OTT_MF_20>
 800087c:	fa03 fc00 	lsl.w	ip, r3, r0
 8000880:	ee01 ca10 	vmov	s2, ip
 8000884:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8000888:	ee21 1a20 	vmul.f32	s2, s2, s1
 800088c:	eebd 1ac1 	vcvt.s32.f32	s2, s2
 8000890:	ee11 8a10 	vmov	r8, s2
 8000894:	4590      	cmp	r8, r2
 8000896:	bfb8      	it	lt
 8000898:	4607      	movlt	r7, r0

0800089a <??OTT_MF_20>:
 800089a:	1e40      	subs	r0, r0, #1
 800089c:	d5e4      	bpl.n	8000868 <??OTT_MF_19>
 800089e:	b288      	uxth	r0, r1
 80008a0:	2810      	cmp	r0, #16
 80008a2:	d007      	beq.n	80008b4 <??OTT_MF_21>
 80008a4:	b289      	uxth	r1, r1
 80008a6:	4630      	mov	r0, r6
 80008a8:	f008 ff7e 	bl	80097a8 <PID_SetKPDivisorPOW2>
 80008ac:	b221      	sxth	r1, r4
 80008ae:	4630      	mov	r0, r6
 80008b0:	f008 ff6a 	bl	8009788 <PID_SetKP>

080008b4 <??OTT_MF_21>:
 80008b4:	b2b8      	uxth	r0, r7
 80008b6:	2810      	cmp	r0, #16
 80008b8:	d008      	beq.n	80008cc <??OTT_MF_22>
 80008ba:	b2b9      	uxth	r1, r7
 80008bc:	4630      	mov	r0, r6
 80008be:	f008 ff81 	bl	80097c4 <PID_SetKIDivisorPOW2>
 80008c2:	fa0f f188 	sxth.w	r1, r8
 80008c6:	4630      	mov	r0, r6
 80008c8:	f008 ff60 	bl	800978c <PID_SetKI>

080008cc <??OTT_MF_22>:
 80008cc:	f9b5 1078 	ldrsh.w	r1, [r5, #120]	@ 0x78
 80008d0:	4630      	mov	r0, r6
 80008d2:	f008 ff8d 	bl	80097f0 <PID_SetUpperOutputLimit>
 80008d6:	f8b5 1078 	ldrh.w	r1, [r5, #120]	@ 0x78
 80008da:	4249      	negs	r1, r1
 80008dc:	b209      	sxth	r1, r1
 80008de:	4630      	mov	r0, r6
 80008e0:	f008 ff84 	bl	80097ec <PID_SetLowerOutputLimit>
 80008e4:	4630      	mov	r0, r6
 80008e6:	f008 ff65 	bl	80097b4 <PID_GetKIDivisor>
 80008ea:	4604      	mov	r4, r0
 80008ec:	f8b5 0078 	ldrh.w	r0, [r5, #120]	@ 0x78
 80008f0:	4344      	muls	r4, r0
 80008f2:	4621      	mov	r1, r4
 80008f4:	4630      	mov	r0, r6
 80008f6:	f008 ff63 	bl	80097c0 <PID_SetUpperIntegralTermLimit>
 80008fa:	4264      	negs	r4, r4
 80008fc:	4621      	mov	r1, r4
 80008fe:	4630      	mov	r0, r6
 8000900:	f008 ff5c 	bl	80097bc <PID_SetLowerIntegralTermLimit>
 8000904:	2001      	movs	r0, #1
 8000906:	f885 0062 	strb.w	r0, [r5, #98]	@ 0x62
 800090a:	2103      	movs	r1, #3
 800090c:	68e8      	ldr	r0, [r5, #12]
 800090e:	f009 ffff 	bl	800a910 <STC_SetControlMode>
 8000912:	6828      	ldr	r0, [r5, #0]
 8000914:	f009 ff86 	bl	800a824 <SPD_GetAvrgMecSpeedUnit>
 8000918:	4601      	mov	r1, r0
 800091a:	68e8      	ldr	r0, [r5, #12]
 800091c:	2200      	movs	r2, #0
 800091e:	f009 fffb 	bl	800a918 <STC_ExecRamp>
 8000922:	200a      	movs	r0, #10
 8000924:	f885 0034 	strb.w	r0, [r5, #52]	@ 0x34
 8000928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800092c <??DataTable1>:
 800092c:	d70a 3c23                                   ..#<

08000930 <??DataTable1_1>:
 8000930:	47ae 3f21                                   .G!?

08000934 <OTT_SR>:
 8000934:	b510      	push	{r4, lr}
 8000936:	4604      	mov	r4, r0
 8000938:	f894 0062 	ldrb.w	r0, [r4, #98]	@ 0x62
 800093c:	b9b0      	cbnz	r0, 800096c <??OTT_SR_0>
 800093e:	6860      	ldr	r0, [r4, #4]
 8000940:	2100      	movs	r1, #0
 8000942:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 8000946:	2104      	movs	r1, #4
 8000948:	68e0      	ldr	r0, [r4, #12]
 800094a:	f009 ffe1 	bl	800a910 <STC_SetControlMode>
 800094e:	6860      	ldr	r0, [r4, #4]
 8000950:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
 8000954:	68e0      	ldr	r0, [r4, #12]
 8000956:	2200      	movs	r2, #0
 8000958:	f009 ffde 	bl	800a918 <STC_ExecRamp>
 800095c:	68e0      	ldr	r0, [r4, #12]
 800095e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000962:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8000966:	2100      	movs	r1, #0
 8000968:	f009 bfd6 	b.w	800a918 <STC_ExecRamp>

0800096c <??OTT_SR_0>:
 800096c:	bd10      	pop	{r4, pc}

0800096e <OTT_ForceTuning>:
 800096e:	2100      	movs	r1, #0
 8000970:	f880 1062 	strb.w	r1, [r0, #98]	@ 0x62
 8000974:	4770      	bx	lr

08000976 <OTT_GetNominalSpeed>:
 8000976:	ed90 0a14 	vldr	s0, [r0, #80]	@ 0x50
 800097a:	f004 ba6b 	b.w	8004e54 <MCM_floatToIntBit>

0800097e <OTT_GetSteps>:
 800097e:	200b      	movs	r0, #11
 8000980:	4770      	bx	lr

08000982 <OTT_GetState>:
 8000982:	f890 0034 	ldrb.w	r0, [r0, #52]	@ 0x34
 8000986:	4770      	bx	lr

08000988 <OTT_IsSpeedPITuned>:
 8000988:	4601      	mov	r1, r0
 800098a:	2000      	movs	r0, #0
 800098c:	f891 1034 	ldrb.w	r1, [r1, #52]	@ 0x34
 8000990:	290a      	cmp	r1, #10
 8000992:	bf08      	it	eq
 8000994:	2001      	moveq	r0, #1
 8000996:	4770      	bx	lr

08000998 <OTT_fGetNominalSpeedRPM>:
 8000998:	ed90 0a14 	vldr	s0, [r0, #80]	@ 0x50
 800099c:	4770      	bx	lr
	...

080009a0 <OTT_SpeedCtrl>:
 80009a0:	b530      	push	{r4, r5, lr}
 80009a2:	4604      	mov	r4, r0
 80009a4:	b081      	sub	sp, #4
 80009a6:	2500      	movs	r5, #0
 80009a8:	ed2d 8b04 	vpush	{d8-d9}
 80009ac:	f8d4 009c 	ldr.w	r0, [r4, #156]	@ 0x9c
 80009b0:	edd0 8a0e 	vldr	s17, [r0, #56]	@ 0x38
 80009b4:	6820      	ldr	r0, [r4, #0]
 80009b6:	eeb0 8a40 	vmov.f32	s16, s0
 80009ba:	f009 ff33 	bl	800a824 <SPD_GetAvrgMecSpeedUnit>
 80009be:	ebc0 1100 	rsb	r1, r0, r0, lsl #4
 80009c2:	0089      	lsls	r1, r1, #2
 80009c4:	4860      	ldr	r0, [pc, #384]	@ (8000b48 <??DataTable4_3>)
 80009c6:	ed94 1a22 	vldr	s2, [r4, #136]	@ 0x88
 80009ca:	edd4 0a21 	vldr	s1, [r4, #132]	@ 0x84
 80009ce:	fb81 2000 	smull	r2, r0, r1, r0
 80009d2:	1080      	asrs	r0, r0, #2
 80009d4:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80009d8:	ee00 0a10 	vmov	s0, r0
 80009dc:	eeb8 9ac0 	vcvt.f32.s32	s18, s0
 80009e0:	ee38 0a49 	vsub.f32	s0, s16, s18
 80009e4:	eeb5 1a40 	vcmp.f32	s2, #0.0
 80009e8:	ee60 0a80 	vmul.f32	s1, s1, s0
 80009ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009f0:	bf08      	it	eq
 80009f2:	ed9f 0a52 	vldreq	s0, [pc, #328]	@ 8000b3c <??DataTable4>
 80009f6:	d009      	beq.n	8000a0c <??OTT_SpeedCtrl_0>
 80009f8:	edd4 1a25 	vldr	s3, [r4, #148]	@ 0x94
 80009fc:	ee70 1a61 	vsub.f32	s3, s0, s3
 8000a00:	ed94 0a24 	vldr	s0, [r4, #144]	@ 0x90
 8000a04:	ee01 0a81 	vmla.f32	s0, s3, s2
 8000a08:	ee70 0a80 	vadd.f32	s1, s1, s0

08000a0c <??OTT_SpeedCtrl_0>:
 8000a0c:	f8b4 0078 	ldrh.w	r0, [r4, #120]	@ 0x78
 8000a10:	ed84 0a24 	vstr	s0, [r4, #144]	@ 0x90
 8000a14:	4601      	mov	r1, r0
 8000a16:	ee01 1a10 	vmov	s2, r1
 8000a1a:	eeb8 1a41 	vcvt.f32.u32	s2, s2
 8000a1e:	eeb4 1a60 	vcmp.f32	s2, s1
 8000a22:	eeb0 0a60 	vmov.f32	s0, s1
 8000a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a2a:	bf48      	it	mi
 8000a2c:	eeb0 0a41 	vmovmi.f32	s0, s2
 8000a30:	4240      	negs	r0, r0
 8000a32:	ee01 0a10 	vmov	s2, r0
 8000a36:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8000a3a:	eef4 0a41 	vcmp.f32	s1, s2
 8000a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a42:	bf48      	it	mi
 8000a44:	eeb0 0a41 	vmovmi.f32	s0, s2
 8000a48:	ee70 0ac0 	vsub.f32	s1, s1, s0
 8000a4c:	edd4 1a23 	vldr	s3, [r4, #140]	@ 0x8c
 8000a50:	68e0      	ldr	r0, [r4, #12]
 8000a52:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8000a56:	ee60 0aa1 	vmul.f32	s1, s1, s3
 8000a5a:	ee10 1a10 	vmov	r1, s0
 8000a5e:	edc4 0a25 	vstr	s1, [r4, #148]	@ 0x94
 8000a62:	2200      	movs	r2, #0
 8000a64:	b209      	sxth	r1, r1
 8000a66:	f009 ff57 	bl	800a918 <STC_ExecRamp>
 8000a6a:	ee28 0a28 	vmul.f32	s0, s16, s17
 8000a6e:	eeb4 9a40 	vcmp.f32	s18, s0
 8000a72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a76:	d41e      	bmi.n	8000ab6 <??OTT_SpeedCtrl_1>
 8000a78:	eeb4 9a48 	vcmp.f32	s18, s16
 8000a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a80:	d40a      	bmi.n	8000a98 <??OTT_SpeedCtrl_2>
 8000a82:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8000a86:	ee30 0a68 	vsub.f32	s0, s0, s17
 8000a8a:	ee20 0a08 	vmul.f32	s0, s0, s16
 8000a8e:	eeb4 9a40 	vcmp.f32	s18, s0
 8000a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a96:	d50e      	bpl.n	8000ab6 <??OTT_SpeedCtrl_1>

08000a98 <??OTT_SpeedCtrl_2>:
 8000a98:	f894 006c 	ldrb.w	r0, [r4, #108]	@ 0x6c
 8000a9c:	1c40      	adds	r0, r0, #1
 8000a9e:	b241      	sxtb	r1, r0
 8000aa0:	2914      	cmp	r1, #20
 8000aa2:	bfa4      	itt	ge
 8000aa4:	2014      	movge	r0, #20
 8000aa6:	2501      	movge	r5, #1
 8000aa8:	f884 006c 	strb.w	r0, [r4, #108]	@ 0x6c
 8000aac:	4628      	mov	r0, r5
 8000aae:	ecbd 8b04 	vpop	{d8-d9}
 8000ab2:	b001      	add	sp, #4
 8000ab4:	bd30      	pop	{r4, r5, pc}

08000ab6 <??OTT_SpeedCtrl_1>:
 8000ab6:	2000      	movs	r0, #0
 8000ab8:	f884 006c 	strb.w	r0, [r4, #108]	@ 0x6c
 8000abc:	4628      	mov	r0, r5
 8000abe:	ecbd 8b04 	vpop	{d8-d9}
 8000ac2:	b001      	add	sp, #4
 8000ac4:	bd30      	pop	{r4, r5, pc}

08000ac6 <OTT_SetPolesPairs>:
 8000ac6:	f880 1076 	strb.w	r1, [r0, #118]	@ 0x76
 8000aca:	4770      	bx	lr

08000acc <OTT_SetNominalCurrent>:
 8000acc:	f8a0 1078 	strh.w	r1, [r0, #120]	@ 0x78
 8000ad0:	4770      	bx	lr

08000ad2 <OTT_SetSpeedRegulatorBandwidth>:
 8000ad2:	ed80 0a0c 	vstr	s0, [r0, #48]	@ 0x30
 8000ad6:	4770      	bx	lr

08000ad8 <OTT_GetSpeedRegulatorBandwidth>:
 8000ad8:	ed90 0a0c 	vldr	s0, [r0, #48]	@ 0x30
 8000adc:	4770      	bx	lr
	...

08000ae0 <OTT_GetJ>:
 8000ae0:	f8d0 109c 	ldr.w	r1, [r0, #156]	@ 0x9c
 8000ae4:	ed90 0a0b 	vldr	s0, [r0, #44]	@ 0x2c
 8000ae8:	ed90 1a26 	vldr	s2, [r0, #152]	@ 0x98
 8000aec:	eddf 0a14 	vldr	s1, [pc, #80]	@ 8000b40 <??DataTable4_1>
 8000af0:	ee60 0a20 	vmul.f32	s1, s0, s1
 8000af4:	ee20 1a81 	vmul.f32	s2, s1, s2
 8000af8:	ed91 0a13 	vldr	s0, [r1, #76]	@ 0x4c
 8000afc:	edd1 0a14 	vldr	s1, [r1, #80]	@ 0x50
 8000b00:	ee60 0a20 	vmul.f32	s1, s0, s1
 8000b04:	ee81 0a20 	vdiv.f32	s0, s2, s1
 8000b08:	4770      	bx	lr
	...

08000b0c <??DataTable3>:
 8000b0c:	c49c 3f20                                   .. ?

08000b10 <OTT_GetF>:
 8000b10:	f8d0 109c 	ldr.w	r1, [r0, #156]	@ 0x9c
 8000b14:	ed90 0a08 	vldr	s0, [r0, #32]
 8000b18:	ed90 1a26 	vldr	s2, [r0, #152]	@ 0x98
 8000b1c:	eddf 0a08 	vldr	s1, [pc, #32]	@ 8000b40 <??DataTable4_1>
 8000b20:	ee60 0a20 	vmul.f32	s1, s0, s1
 8000b24:	ee20 1a81 	vmul.f32	s2, s1, s2
 8000b28:	ed91 0a13 	vldr	s0, [r1, #76]	@ 0x4c
 8000b2c:	edd1 0a14 	vldr	s1, [r1, #80]	@ 0x50
 8000b30:	ee60 0a20 	vmul.f32	s1, s0, s1
 8000b34:	ee81 0a20 	vdiv.f32	s0, s2, s1
 8000b38:	4770      	bx	lr
	...

08000b3c <??DataTable4>:
 8000b3c:	0000 0000                                   ....

08000b40 <??DataTable4_1>:
 8000b40:	15cb 351e                                   ...5

08000b44 <??DataTable4_2>:
 8000b44:	00b4 2000                                   ... 

08000b48 <??DataTable4_3>:
 8000b48:	6667 6666                                   gfff

08000b4c <OTT_SetNominalSpeed>:
 8000b4c:	f8c0 1080 	str.w	r1, [r0, #128]	@ 0x80
 8000b50:	4770      	bx	lr

08000b52 <OTT_SetKe>:
 8000b52:	ed80 0a26 	vstr	s0, [r0, #152]	@ 0x98
 8000b56:	4770      	bx	lr

08000b58 <OTT_IsMotorAlreadyProfiled>:
 8000b58:	f890 0062 	ldrb.w	r0, [r0, #98]	@ 0x62
 8000b5c:	4770      	bx	lr
	...

08000b60 <SCC_Init>:
 8000b60:	b530      	push	{r4, r5, lr}
 8000b62:	4604      	mov	r4, r0
 8000b64:	b081      	sub	sp, #4
 8000b66:	f8df 0438 	ldr.w	r0, [pc, #1080]	@ 8000fa0 <??DataTable4_3>
 8000b6a:	63a0      	str	r0, [r4, #56]	@ 0x38
 8000b6c:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 8000b70:	f009 fcb2 	bl	800a4d8 <REMNG_Init>
 8000b74:	2100      	movs	r1, #0
 8000b76:	f884 1034 	strb.w	r1, [r4, #52]	@ 0x34
 8000b7a:	f884 103e 	strb.w	r1, [r4, #62]	@ 0x3e
 8000b7e:	4620      	mov	r0, r4
 8000b80:	f000 f8f0 	bl	8000d64 <SCC_InitKeDetRevup>
 8000b84:	f8d4 1548 	ldr.w	r1, [r4, #1352]	@ 0x548
 8000b88:	2000      	movs	r0, #0
 8000b8a:	f884 0128 	strb.w	r0, [r4, #296]	@ 0x128
 8000b8e:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8000b92:	ed91 0a00 	vldr	s0, [r1]
 8000b96:	6920      	ldr	r0, [r4, #16]
 8000b98:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8000b9c:	eec0 0a80 	vdiv.f32	s1, s1, s0
 8000ba0:	ed84 0a11 	vstr	s0, [r4, #68]	@ 0x44
 8000ba4:	edc4 0a10 	vstr	s1, [r4, #64]	@ 0x40
 8000ba8:	f009 fe84 	bl	800a8b4 <SPD_GetElToMecRatio>
 8000bac:	ee00 0a10 	vmov	s0, r0
 8000bb0:	f8d4 0548 	ldr.w	r0, [r4, #1352]	@ 0x548
 8000bb4:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8000bb8:	ed84 0a12 	vstr	s0, [r4, #72]	@ 0x48
 8000bbc:	eef6 0a00 	vmov.f32	s1, #96	@ 0x3f000000  0.5
 8000bc0:	ed90 0a13 	vldr	s0, [r0, #76]	@ 0x4c
 8000bc4:	ed90 1a09 	vldr	s2, [r0, #36]	@ 0x24
 8000bc8:	ee60 0a20 	vmul.f32	s1, s0, s1
 8000bcc:	ee80 1a81 	vdiv.f32	s2, s1, s2
 8000bd0:	eebd 1ac1 	vcvt.s32.f32	s2, s2
 8000bd4:	ee11 1a10 	vmov	r1, s2
 8000bd8:	f8a4 104c 	strh.w	r1, [r4, #76]	@ 0x4c
 8000bdc:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8000be0:	ed90 0a06 	vldr	s0, [r0, #24]
 8000be4:	ed90 1a07 	vldr	s2, [r0, #28]
 8000be8:	ee60 0a20 	vmul.f32	s1, s0, s1
 8000bec:	ee20 1a81 	vmul.f32	s2, s1, s2
 8000bf0:	ed90 0a13 	vldr	s0, [r0, #76]	@ 0x4c
 8000bf4:	ee80 0a01 	vdiv.f32	s0, s0, s2
 8000bf8:	ed84 0a14 	vstr	s0, [r4, #80]	@ 0x50
 8000bfc:	eef5 0a00 	vmov.f32	s1, #80	@ 0x3e800000  0.250
 8000c00:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8000c02:	6561      	str	r1, [r4, #84]	@ 0x54
 8000c04:	2100      	movs	r1, #0
 8000c06:	ed90 0a0b 	vldr	s0, [r0, #44]	@ 0x2c
 8000c0a:	ee60 0a20 	vmul.f32	s1, s0, s1
 8000c0e:	edc4 0a17 	vstr	s1, [r4, #92]	@ 0x5c
 8000c12:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 8000c14:	65a0      	str	r0, [r4, #88]	@ 0x58
 8000c16:	6621      	str	r1, [r4, #96]	@ 0x60
 8000c18:	6661      	str	r1, [r4, #100]	@ 0x64
 8000c1a:	66a1      	str	r1, [r4, #104]	@ 0x68
 8000c1c:	66e1      	str	r1, [r4, #108]	@ 0x6c
 8000c1e:	f884 1090 	strb.w	r1, [r4, #144]	@ 0x90
 8000c22:	f8c4 1094 	str.w	r1, [r4, #148]	@ 0x94
 8000c26:	f8c4 1098 	str.w	r1, [r4, #152]	@ 0x98
 8000c2a:	f884 109c 	strb.w	r1, [r4, #156]	@ 0x9c
 8000c2e:	f8c4 10a0 	str.w	r1, [r4, #160]	@ 0xa0
 8000c32:	f8c4 10a4 	str.w	r1, [r4, #164]	@ 0xa4
 8000c36:	f8c4 10a8 	str.w	r1, [r4, #168]	@ 0xa8
 8000c3a:	f8c4 10ac 	str.w	r1, [r4, #172]	@ 0xac
 8000c3e:	f8c4 10b0 	str.w	r1, [r4, #176]	@ 0xb0
 8000c42:	f8c4 10b4 	str.w	r1, [r4, #180]	@ 0xb4
 8000c46:	f8c4 10b8 	str.w	r1, [r4, #184]	@ 0xb8
 8000c4a:	f884 1540 	strb.w	r1, [r4, #1344]	@ 0x540
 8000c4e:	4620      	mov	r0, r4
 8000c50:	f001 fb10 	bl	8002274 <SCC_KeDetectionInit>
 8000c54:	2000      	movs	r0, #0
 8000c56:	f8c4 00d0 	str.w	r0, [r4, #208]	@ 0xd0
 8000c5a:	f8c4 00d4 	str.w	r0, [r4, #212]	@ 0xd4
 8000c5e:	f8c4 00d8 	str.w	r0, [r4, #216]	@ 0xd8
 8000c62:	f884 00dc 	strb.w	r0, [r4, #220]	@ 0xdc
 8000c66:	eddf 0a3e 	vldr	s1, [pc, #248]	@ 8000d60 <??DataTable3>
 8000c6a:	f8d4 0548 	ldr.w	r0, [r4, #1352]	@ 0x548
 8000c6e:	4acd      	ldr	r2, [pc, #820]	@ (8000fa4 <??DataTable4_4>)
 8000c70:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8000c72:	f8c4 10e0 	str.w	r1, [r4, #224]	@ 0xe0
 8000c76:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 8000c78:	fb81 3202 	smull	r3, r2, r1, r2
 8000c7c:	ee00 1a10 	vmov	s0, r1
 8000c80:	1092      	asrs	r2, r2, #2
 8000c82:	f8c4 10e4 	str.w	r1, [r4, #228]	@ 0xe4
 8000c86:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8000c8a:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8000c8e:	ee60 0a20 	vmul.f32	s1, s0, s1
 8000c92:	f8c4 20ec 	str.w	r2, [r4, #236]	@ 0xec
 8000c96:	eefd 0ae0 	vcvt.s32.f32	s1, s1
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	f8c4 50ec 	str.w	r5, [r4, #236]	@ 0xec
 8000ca0:	edc4 0a3a 	vstr	s1, [r4, #232]	@ 0xe8
 8000ca4:	f8a4 1130 	strh.w	r1, [r4, #304]	@ 0x130
 8000ca8:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 8000caa:	f8c4 0134 	str.w	r0, [r4, #308]	@ 0x134
 8000cae:	f884 1138 	strb.w	r1, [r4, #312]	@ 0x138
 8000cb2:	f884 1541 	strb.w	r1, [r4, #1345]	@ 0x541
 8000cb6:	b001      	add	sp, #4
 8000cb8:	bd30      	pop	{r4, r5, pc}
	...

08000cbc <SCC_CMD>:
 8000cbc:	b530      	push	{r4, r5, lr}
 8000cbe:	b081      	sub	sp, #4
 8000cc0:	4605      	mov	r5, r0
 8000cc2:	7810      	ldrb	r0, [r2, #0]
 8000cc4:	2400      	movs	r4, #0
 8000cc6:	2806      	cmp	r0, #6
 8000cc8:	d834      	bhi.n	8000d34 <??SCC_CMD_1>
 8000cca:	e8df f000 	tbb	[pc, r0]

08000cce <??SCC_CMD_0>:
 8000cce:	0419 231f 2d28 000b                         ...#(-..

08000cd6 <??SCC_CMD_2>:
 8000cd6:	49b4      	ldr	r1, [pc, #720]	@ (8000fa8 <??DataTable4_5>)
 8000cd8:	f891 0034 	ldrb.w	r0, [r1, #52]	@ 0x34
 8000cdc:	b128      	cbz	r0, 8000cea <??SCC_CMD_3>
 8000cde:	280a      	cmp	r0, #10
 8000ce0:	d128      	bne.n	8000d34 <??SCC_CMD_1>
 8000ce2:	e002      	b.n	8000cea <??SCC_CMD_3>

08000ce4 <??SCC_CMD_4>:
 8000ce4:	2001      	movs	r0, #1
 8000ce6:	f885 0541 	strb.w	r0, [r5, #1345]	@ 0x541

08000cea <??SCC_CMD_3>:
 8000cea:	4628      	mov	r0, r5
 8000cec:	f001 fa15 	bl	800211a <SCC_ForceProfile>
 8000cf0:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8000cf2:	f7ff fe3c 	bl	800096e <OTT_ForceTuning>
 8000cf6:	f003 fdf3 	bl	80048e0 <MC_AcknowledgeFaultMotor1>
 8000cfa:	f003 fdcd 	bl	8004898 <MC_StartMotor1>
 8000cfe:	e01a      	b.n	8000d36 <??SCC_CMD_5>

08000d00 <??SCC_CMD_6>:
 8000d00:	4628      	mov	r0, r5
 8000d02:	f000 f86d 	bl	8000de0 <SCC_Stop>
 8000d06:	f003 fdcd 	bl	80048a4 <MC_StopMotor1>
 8000d0a:	e014      	b.n	8000d36 <??SCC_CMD_5>

08000d0c <??SCC_CMD_7>:
 8000d0c:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8000d0e:	b188      	cbz	r0, 8000d34 <??SCC_CMD_1>
 8000d10:	2101      	movs	r1, #1
 8000d12:	e00c      	b.n	8000d2e <??SCC_CMD_8>

08000d14 <??SCC_CMD_9>:
 8000d14:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8000d16:	b168      	cbz	r0, 8000d34 <??SCC_CMD_1>
 8000d18:	f002 fbae 	bl	8003478 <HT_SetRestart>
 8000d1c:	e00b      	b.n	8000d36 <??SCC_CMD_5>

08000d1e <??SCC_CMD_10>:
 8000d1e:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8000d20:	b140      	cbz	r0, 8000d34 <??SCC_CMD_1>
 8000d22:	f002 fbac 	bl	800347e <HT_SetAbort>
 8000d26:	e006      	b.n	8000d36 <??SCC_CMD_5>

08000d28 <??SCC_CMD_11>:
 8000d28:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8000d2a:	b118      	cbz	r0, 8000d34 <??SCC_CMD_1>
 8000d2c:	2100      	movs	r1, #0

08000d2e <??SCC_CMD_8>:
 8000d2e:	f002 fba1 	bl	8003474 <HT_SetStart>
 8000d32:	e000      	b.n	8000d36 <??SCC_CMD_5>

08000d34 <??SCC_CMD_1>:
 8000d34:	2402      	movs	r4, #2

08000d36 <??SCC_CMD_5>:
 8000d36:	9804      	ldr	r0, [sp, #16]
 8000d38:	2100      	movs	r1, #0
 8000d3a:	8001      	strh	r1, [r0, #0]
 8000d3c:	4620      	mov	r0, r4
 8000d3e:	b001      	add	sp, #4
 8000d40:	bd30      	pop	{r4, r5, pc}

08000d42 <SCC_SetAcc>:
 8000d42:	f8d0 10e4 	ldr.w	r1, [r0, #228]	@ 0xe4
 8000d46:	4a97      	ldr	r2, [pc, #604]	@ (8000fa4 <??DataTable4_4>)
 8000d48:	fb81 3202 	smull	r3, r2, r1, r2
 8000d4c:	1092      	asrs	r2, r2, #2
 8000d4e:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8000d52:	f8c0 20ec 	str.w	r2, [r0, #236]	@ 0xec
 8000d56:	f44f 7cfa 	mov.w	ip, #500	@ 0x1f4
 8000d5a:	f8c0 c0ec 	str.w	ip, [r0, #236]	@ 0xec
 8000d5e:	4770      	bx	lr

08000d60 <??DataTable3>:
 8000d60:	cccd 3ecc                                   ...>

08000d64 <SCC_InitKeDetRevup>:
 8000d64:	2100      	movs	r1, #0
 8000d66:	f880 103f 	strb.w	r1, [r0, #63]	@ 0x3f
 8000d6a:	f880 10f0 	strb.w	r1, [r0, #240]	@ 0xf0
 8000d6e:	f8a0 111c 	strh.w	r1, [r0, #284]	@ 0x11c
 8000d72:	f880 111e 	strb.w	r1, [r0, #286]	@ 0x11e
 8000d76:	f8a0 1120 	strh.w	r1, [r0, #288]	@ 0x120
 8000d7a:	f8c0 1124 	str.w	r1, [r0, #292]	@ 0x124
 8000d7e:	f8c0 113c 	str.w	r1, [r0, #316]	@ 0x13c
 8000d82:	4770      	bx	lr

08000d84 <SCC_Start>:
 8000d84:	b510      	push	{r4, lr}
 8000d86:	4604      	mov	r4, r0
 8000d88:	2100      	movs	r1, #0
 8000d8a:	f894 003f 	ldrb.w	r0, [r4, #63]	@ 0x3f
 8000d8e:	2804      	cmp	r0, #4
 8000d90:	d108      	bne.n	8000da4 <??SCC_Start_0>
 8000d92:	2108      	movs	r1, #8
 8000d94:	f884 1034 	strb.w	r1, [r4, #52]	@ 0x34
 8000d98:	2000      	movs	r0, #0
 8000d9a:	f884 00f0 	strb.w	r0, [r4, #240]	@ 0xf0
 8000d9e:	2101      	movs	r1, #1
 8000da0:	4608      	mov	r0, r1
 8000da2:	bd10      	pop	{r4, pc}

08000da4 <??SCC_Start_0>:
 8000da4:	f894 0034 	ldrb.w	r0, [r4, #52]	@ 0x34
 8000da8:	b9c0      	cbnz	r0, 8000ddc <??SCC_Start_1>
 8000daa:	6820      	ldr	r0, [r4, #0]
 8000dac:	f005 f852 	bl	8005e54 <PWMC_RLDetectionModeEnable>
 8000db0:	2000      	movs	r0, #0
 8000db2:	2101      	movs	r1, #1
 8000db4:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
 8000db8:	f884 1034 	strb.w	r1, [r4, #52]	@ 0x34
 8000dbc:	4620      	mov	r0, r4
 8000dbe:	f7ff ffd1 	bl	8000d64 <SCC_InitKeDetRevup>
 8000dc2:	2000      	movs	r0, #0
 8000dc4:	f884 0128 	strb.w	r0, [r4, #296]	@ 0x128
 8000dc8:	2100      	movs	r1, #0
 8000dca:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000dcc:	6560      	str	r0, [r4, #84]	@ 0x54
 8000dce:	f884 1090 	strb.w	r1, [r4, #144]	@ 0x90
 8000dd2:	f884 109c 	strb.w	r1, [r4, #156]	@ 0x9c
 8000dd6:	2001      	movs	r0, #1
 8000dd8:	87a0      	strh	r0, [r4, #60]	@ 0x3c
 8000dda:	2101      	movs	r1, #1

08000ddc <??SCC_Start_1>:
 8000ddc:	4608      	mov	r0, r1
 8000dde:	bd10      	pop	{r4, pc}

08000de0 <SCC_Stop>:
 8000de0:	b510      	push	{r4, lr}
 8000de2:	4604      	mov	r4, r0
 8000de4:	6820      	ldr	r0, [r4, #0]
 8000de6:	f005 f837 	bl	8005e58 <PWMC_RLDetectionModeDisable>
 8000dea:	f894 0034 	ldrb.w	r0, [r4, #52]	@ 0x34
 8000dee:	2806      	cmp	r0, #6
 8000df0:	bf18      	it	ne
 8000df2:	2807      	cmpne	r0, #7
 8000df4:	d004      	beq.n	8000e00 <??SCC_Stop_0>
 8000df6:	280a      	cmp	r0, #10
 8000df8:	bf1c      	itt	ne
 8000dfa:	2000      	movne	r0, #0
 8000dfc:	f884 0034 	strbne.w	r0, [r4, #52]	@ 0x34

08000e00 <??SCC_Stop_0>:
 8000e00:	bd10      	pop	{r4, pc}
	...

08000e04 <SCC_CheckOC_RL>:
 8000e04:	b570      	push	{r4, r5, r6, lr}
 8000e06:	4604      	mov	r4, r0
 8000e08:	f894 1034 	ldrb.w	r1, [r4, #52]	@ 0x34
 8000e0c:	1e49      	subs	r1, r1, #1
 8000e0e:	2907      	cmp	r1, #7
 8000e10:	f200 80bf 	bhi.w	8000f92 <??SCC_CheckOC_RL_1>
 8000e14:	e8df f001 	tbb	[pc, r1]

08000e18 <??SCC_CheckOC_RL_0>:
 8000e18:	0404 0404 bd26 46bd                         ....&..F

08000e20 <??SCC_CheckOC_RL_2>:
 8000e20:	6820      	ldr	r0, [r4, #0]
 8000e22:	f004 fffb 	bl	8005e1c <PWMC_IsFaultOccurred>
 8000e26:	0005      	movs	r5, r0
 8000e28:	d016      	beq.n	8000e58 <??SCC_CheckOC_RL_3>
 8000e2a:	2007      	movs	r0, #7
 8000e2c:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
 8000e30:	6820      	ldr	r0, [r4, #0]
 8000e32:	f004 ffc7 	bl	8005dc4 <PWMC_SwitchOffPWM>
 8000e36:	43e8      	mvns	r0, r5
 8000e38:	b282      	uxth	r2, r0
 8000e3a:	4629      	mov	r1, r5
 8000e3c:	f8df 0d90 	ldr.w	r0, [pc, #3472]	@ 8001bd0 <??DataTable5_1>
 8000e40:	f003 fd98 	bl	8004974 <MCI_FaultProcessing>
 8000e44:	ed94 0a4b 	vldr	s0, [r4, #300]	@ 0x12c
 8000e48:	eddf 0a52 	vldr	s1, [pc, #328]	@ 8000f94 <??DataTable4>
 8000e4c:	ee20 0a20 	vmul.f32	s0, s0, s1
 8000e50:	4620      	mov	r0, r4
 8000e52:	f001 fd49 	bl	80028e8 <SCC_SetNominalCurrent>
 8000e56:	e097      	b.n	8000f88 <??SCC_CheckOC_RL_4>

08000e58 <??SCC_CheckOC_RL_3>:
 8000e58:	4620      	mov	r0, r4
 8000e5a:	f001 f8bd 	bl	8001fd8 <SCC_GetCurrent>
 8000e5e:	ed84 0a4b 	vstr	s0, [r4, #300]	@ 0x12c
 8000e62:	bd70      	pop	{r4, r5, r6, pc}

08000e64 <??SCC_CheckOC_RL_5>:
 8000e64:	6820      	ldr	r0, [r4, #0]
 8000e66:	f004 ffd9 	bl	8005e1c <PWMC_IsFaultOccurred>
 8000e6a:	0005      	movs	r5, r0
 8000e6c:	f000 8091 	beq.w	8000f92 <??SCC_CheckOC_RL_1>
 8000e70:	2007      	movs	r0, #7
 8000e72:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
 8000e76:	6820      	ldr	r0, [r4, #0]
 8000e78:	f004 ffa4 	bl	8005dc4 <PWMC_SwitchOffPWM>
 8000e7c:	43e8      	mvns	r0, r5
 8000e7e:	b282      	uxth	r2, r0
 8000e80:	4629      	mov	r1, r5
 8000e82:	f8df 0d4c 	ldr.w	r0, [pc, #3404]	@ 8001bd0 <??DataTable5_1>
 8000e86:	f003 fd75 	bl	8004974 <MCI_FaultProcessing>
 8000e8a:	ed94 0a4b 	vldr	s0, [r4, #300]	@ 0x12c
 8000e8e:	eddf 0a41 	vldr	s1, [pc, #260]	@ 8000f94 <??DataTable4>
 8000e92:	ee20 0a20 	vmul.f32	s0, s0, s1
 8000e96:	4620      	mov	r0, r4
 8000e98:	f001 fd26 	bl	80028e8 <SCC_SetNominalCurrent>
 8000e9c:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8000e9e:	f8c4 012c 	str.w	r0, [r4, #300]	@ 0x12c
 8000ea2:	e071      	b.n	8000f88 <??SCC_CheckOC_RL_4>

08000ea4 <??SCC_CheckOC_RL_6>:
 8000ea4:	f894 003f 	ldrb.w	r0, [r4, #63]	@ 0x3f
 8000ea8:	2804      	cmp	r0, #4
 8000eaa:	d072      	beq.n	8000f92 <??SCC_CheckOC_RL_1>
 8000eac:	6820      	ldr	r0, [r4, #0]
 8000eae:	f004 ffb5 	bl	8005e1c <PWMC_IsFaultOccurred>
 8000eb2:	0005      	movs	r5, r0
 8000eb4:	d06d      	beq.n	8000f92 <??SCC_CheckOC_RL_1>
 8000eb6:	ed94 0a4b 	vldr	s0, [r4, #300]	@ 0x12c
 8000eba:	eddf 0a36 	vldr	s1, [pc, #216]	@ 8000f94 <??DataTable4>
 8000ebe:	ee20 0a20 	vmul.f32	s0, s0, s1
 8000ec2:	4620      	mov	r0, r4
 8000ec4:	f001 fd10 	bl	80028e8 <SCC_SetNominalCurrent>
 8000ec8:	f8d4 0548 	ldr.w	r0, [r4, #1352]	@ 0x548
 8000ecc:	ed94 0a15 	vldr	s0, [r4, #84]	@ 0x54
 8000ed0:	ed84 0a4b 	vstr	s0, [r4, #300]	@ 0x12c
 8000ed4:	ed9f 1a30 	vldr	s2, [pc, #192]	@ 8000f98 <??DataTable4_1>
 8000ed8:	edd0 0a06 	vldr	s1, [r0, #24]
 8000edc:	edd0 1a07 	vldr	s3, [r0, #28]
 8000ee0:	ee20 1a81 	vmul.f32	s2, s1, s2
 8000ee4:	ee61 1a21 	vmul.f32	s3, s2, s3
 8000ee8:	edd0 0a13 	vldr	s1, [r0, #76]	@ 0x4c
 8000eec:	eec1 0aa0 	vdiv.f32	s1, s3, s1
 8000ef0:	ee20 0a80 	vmul.f32	s0, s1, s0
 8000ef4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8000ef8:	ee10 0a10 	vmov	r0, s0
 8000efc:	1e46      	subs	r6, r0, #1
 8000efe:	6a20      	ldr	r0, [r4, #32]
 8000f00:	b232      	sxth	r2, r6
 8000f02:	2100      	movs	r1, #0
 8000f04:	f009 fc62 	bl	800a7cc <RUC_SetPhaseFinalTorque>
 8000f08:	6a20      	ldr	r0, [r4, #32]
 8000f0a:	b232      	sxth	r2, r6
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	f009 fc5d 	bl	800a7cc <RUC_SetPhaseFinalTorque>
 8000f12:	6a20      	ldr	r0, [r4, #32]
 8000f14:	b232      	sxth	r2, r6
 8000f16:	2102      	movs	r1, #2
 8000f18:	f009 fc58 	bl	800a7cc <RUC_SetPhaseFinalTorque>
 8000f1c:	6a20      	ldr	r0, [r4, #32]
 8000f1e:	b232      	sxth	r2, r6
 8000f20:	2103      	movs	r1, #3
 8000f22:	f009 fc53 	bl	800a7cc <RUC_SetPhaseFinalTorque>
 8000f26:	6a20      	ldr	r0, [r4, #32]
 8000f28:	b232      	sxth	r2, r6
 8000f2a:	2104      	movs	r1, #4
 8000f2c:	f009 fc4e 	bl	800a7cc <RUC_SetPhaseFinalTorque>
 8000f30:	f894 00f0 	ldrb.w	r0, [r4, #240]	@ 0xf0
 8000f34:	2801      	cmp	r0, #1
 8000f36:	d11a      	bne.n	8000f6e <??SCC_CheckOC_RL_7>
 8000f38:	6920      	ldr	r0, [r4, #16]
 8000f3a:	f009 fc73 	bl	800a824 <SPD_GetAvrgMecSpeedUnit>
 8000f3e:	ebc0 1100 	rsb	r1, r0, r0, lsl #4
 8000f42:	0088      	lsls	r0, r1, #2
 8000f44:	4a17      	ldr	r2, [pc, #92]	@ (8000fa4 <??DataTable4_4>)
 8000f46:	fb80 3202 	smull	r3, r2, r0, r2
 8000f4a:	1092      	asrs	r2, r2, #2
 8000f4c:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8000f50:	ee00 2a10 	vmov	s0, r2
 8000f54:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8000f58:	eddf 0a10 	vldr	s1, [pc, #64]	@ 8000f9c <??DataTable4_2>
 8000f5c:	ee60 0a20 	vmul.f32	s1, s0, s1
 8000f60:	eefd 0ae0 	vcvt.s32.f32	s1, s1
 8000f64:	edc4 0a3a 	vstr	s1, [r4, #232]	@ 0xe8
 8000f68:	4620      	mov	r0, r4
 8000f6a:	f001 fc45 	bl	80027f8 <SCC_UpdateRevup>

08000f6e <??SCC_CheckOC_RL_7>:
 8000f6e:	2006      	movs	r0, #6
 8000f70:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
 8000f74:	6820      	ldr	r0, [r4, #0]
 8000f76:	f004 ff25 	bl	8005dc4 <PWMC_SwitchOffPWM>
 8000f7a:	43e8      	mvns	r0, r5
 8000f7c:	b282      	uxth	r2, r0
 8000f7e:	4629      	mov	r1, r5
 8000f80:	f8df 0c4c 	ldr.w	r0, [pc, #3148]	@ 8001bd0 <??DataTable5_1>
 8000f84:	f003 fcf6 	bl	8004974 <MCI_FaultProcessing>

08000f88 <??SCC_CheckOC_RL_4>:
 8000f88:	f8df 0c5c 	ldr.w	r0, [pc, #3164]	@ 8001be8 <??DataTable5_7>
 8000f8c:	8801      	ldrh	r1, [r0, #0]
 8000f8e:	1c49      	adds	r1, r1, #1
 8000f90:	8001      	strh	r1, [r0, #0]

08000f92 <??SCC_CheckOC_RL_1>:
 8000f92:	bd70      	pop	{r4, r5, r6, pc}

08000f94 <??DataTable4>:
 8000f94:	6666 3f66                                   fff?

08000f98 <??DataTable4_1>:
 8000f98:	0000 4780                                   ...G

08000f9c <??DataTable4_2>:
 8000f9c:	cccd 3f4c                                   ..L?

08000fa0 <??DataTable4_3>:
 8000fa0:	0618 2000                                   ... 

08000fa4 <??DataTable4_4>:
 8000fa4:	6667 6666                                   gfff

08000fa8 <??DataTable4_5>:
 8000fa8:	00cc 2000                                   ... 

08000fac <SCC_SetPhaseVoltage>:
 8000fac:	b5f1      	push	{r0, r4, r5, r6, r7, lr}
 8000fae:	ed2d 8b04 	vpush	{d8-d9}
 8000fb2:	b088      	sub	sp, #32
 8000fb4:	2000      	movs	r0, #0
 8000fb6:	f8ad 0004 	strh.w	r0, [sp, #4]
 8000fba:	2100      	movs	r1, #0
 8000fbc:	a804      	add	r0, sp, #16
 8000fbe:	2400      	movs	r4, #0
 8000fc0:	6001      	str	r1, [r0, #0]
 8000fc2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8000fc4:	6b88      	ldr	r0, [r1, #56]	@ 0x38
 8000fc6:	9000      	str	r0, [sp, #0]
 8000fc8:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8000fca:	f890 1034 	ldrb.w	r1, [r0, #52]	@ 0x34
 8000fce:	290d      	cmp	r1, #13
 8000fd0:	f200 85ef 	bhi.w	8001bb2 <??SCC_SetPhaseVoltage_4>
 8000fd4:	e8df f011 	tbh	[pc, r1, lsl #1]

08000fd8 <??SCC_SetPhaseVoltage_0>:
 8000fd8:	05c5 000e 00b3 000e 00e9 01ee 05ca 05ed     ................
 8000fe8:	0397 05b8 05ed 000e 007b 0092               ........{...

08000ff4 <??SCC_SetPhaseVoltage_5>:
 8000ff4:	ed90 0a15 	vldr	s0, [r0, #84]	@ 0x54
 8000ff8:	f001 f8d6 	bl	80021a8 <SCC_CurrCtrl>
 8000ffc:	2801      	cmp	r0, #1
 8000ffe:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001000:	d140      	bne.n	8001084 <??SCC_SetPhaseVoltage_6>
 8001002:	f890 1034 	ldrb.w	r1, [r0, #52]	@ 0x34
 8001006:	2901      	cmp	r1, #1
 8001008:	d10f      	bne.n	800102a <??SCC_SetPhaseVoltage_7>
 800100a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800100c:	2002      	movs	r0, #2
 800100e:	f881 0034 	strb.w	r0, [r1, #52]	@ 0x34
 8001012:	9800      	ldr	r0, [sp, #0]
 8001014:	f009 fa60 	bl	800a4d8 <REMNG_Init>
 8001018:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800101a:	f8d0 1548 	ldr.w	r1, [r0, #1352]	@ 0x548
 800101e:	8e4a      	ldrh	r2, [r1, #50]	@ 0x32
 8001020:	9800      	ldr	r0, [sp, #0]
 8001022:	f64e 2160 	movw	r1, #60000	@ 0xea60
 8001026:	f009 faa7 	bl	800a578 <REMNG_ExecRamp>

0800102a <??SCC_SetPhaseVoltage_7>:
 800102a:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800102c:	f890 1034 	ldrb.w	r1, [r0, #52]	@ 0x34
 8001030:	2903      	cmp	r1, #3
 8001032:	d10e      	bne.n	8001052 <??SCC_SetPhaseVoltage_8>
 8001034:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8001036:	2004      	movs	r0, #4
 8001038:	f881 0034 	strb.w	r0, [r1, #52]	@ 0x34
 800103c:	9800      	ldr	r0, [sp, #0]
 800103e:	f009 fa4b 	bl	800a4d8 <REMNG_Init>
 8001042:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001044:	f8d0 1548 	ldr.w	r1, [r0, #1352]	@ 0x548
 8001048:	8e8a      	ldrh	r2, [r1, #52]	@ 0x34
 800104a:	8f81      	ldrh	r1, [r0, #60]	@ 0x3c
 800104c:	9800      	ldr	r0, [sp, #0]
 800104e:	f009 fa93 	bl	800a578 <REMNG_ExecRamp>

08001052 <??SCC_SetPhaseVoltage_8>:
 8001052:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001054:	f890 1034 	ldrb.w	r1, [r0, #52]	@ 0x34
 8001058:	290b      	cmp	r1, #11
 800105a:	f040 809f 	bne.w	800119c <??SCC_SetPhaseVoltage_9>
 800105e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8001060:	200c      	movs	r0, #12
 8001062:	f881 0034 	strb.w	r0, [r1, #52]	@ 0x34
 8001066:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8001068:	f8c1 4544 	str.w	r4, [r1, #1348]	@ 0x544
 800106c:	9800      	ldr	r0, [sp, #0]
 800106e:	f009 fa33 	bl	800a4d8 <REMNG_Init>
 8001072:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001074:	f8d0 1548 	ldr.w	r1, [r0, #1352]	@ 0x548
 8001078:	8e8a      	ldrh	r2, [r1, #52]	@ 0x34
 800107a:	8f81      	ldrh	r1, [r0, #60]	@ 0x3c
 800107c:	9800      	ldr	r0, [sp, #0]
 800107e:	f009 fa7b 	bl	800a578 <REMNG_ExecRamp>
 8001082:	e08b      	b.n	800119c <??SCC_SetPhaseVoltage_9>

08001084 <??SCC_SetPhaseVoltage_6>:
 8001084:	8f81      	ldrh	r1, [r0, #60]	@ 0x3c
 8001086:	f64e 2260 	movw	r2, #60000	@ 0xea60
 800108a:	4291      	cmp	r1, r2
 800108c:	f040 8086 	bne.w	800119c <??SCC_SetPhaseVoltage_9>
 8001090:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8001092:	878c      	strh	r4, [r1, #60]	@ 0x3c
 8001094:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001096:	f000 ff9f 	bl	8001fd8 <SCC_GetCurrent>
 800109a:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800109c:	eef6 0a00 	vmov.f32	s1, #96	@ 0x3f000000  0.5
 80010a0:	ee20 0a20 	vmul.f32	s0, s0, s1
 80010a4:	ed80 0a15 	vstr	s0, [r0, #84]	@ 0x54
 80010a8:	f06f 0113 	mvn.w	r1, #19
 80010ac:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80010ae:	f880 10dc 	strb.w	r1, [r0, #220]	@ 0xdc
 80010b2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80010b4:	f891 009c 	ldrb.w	r0, [r1, #156]	@ 0x9c
 80010b8:	1c40      	adds	r0, r0, #1
 80010ba:	f881 009c 	strb.w	r0, [r1, #156]	@ 0x9c
 80010be:	b2c0      	uxtb	r0, r0
 80010c0:	2803      	cmp	r0, #3
 80010c2:	d36b      	bcc.n	800119c <??SCC_SetPhaseVoltage_9>
 80010c4:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80010c6:	2009      	movs	r0, #9
 80010c8:	f881 0034 	strb.w	r0, [r1, #52]	@ 0x34
 80010cc:	e066      	b.n	800119c <??SCC_SetPhaseVoltage_9>

080010ce <??SCC_SetPhaseVoltage_10>:
 80010ce:	ed90 0a15 	vldr	s0, [r0, #84]	@ 0x54
 80010d2:	f001 f869 	bl	80021a8 <SCC_CurrCtrl>
 80010d6:	9800      	ldr	r0, [sp, #0]
 80010d8:	f009 fa06 	bl	800a4e8 <REMNG_Calc>
 80010dc:	9800      	ldr	r0, [sp, #0]
 80010de:	f009 fa25 	bl	800a52c <REMNG_RampCompleted>
 80010e2:	2800      	cmp	r0, #0
 80010e4:	f000 856b 	beq.w	8001bbe <??SCC_SetPhaseVoltage_11>
 80010e8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80010ea:	200d      	movs	r0, #13
 80010ec:	f881 0034 	strb.w	r0, [r1, #52]	@ 0x34
 80010f0:	b008      	add	sp, #32
 80010f2:	4620      	mov	r0, r4
 80010f4:	ecbd 8b04 	vpop	{d8-d9}
 80010f8:	b001      	add	sp, #4
 80010fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080010fc <??SCC_SetPhaseVoltage_12>:
 80010fc:	f8d0 0544 	ldr.w	r0, [r0, #1348]	@ 0x544
 8001100:	f8df 1af8 	ldr.w	r1, [pc, #2808]	@ 8001bfc <??DataTable5_12>
 8001104:	4288      	cmp	r0, r1
 8001106:	d209      	bcs.n	800111c <??SCC_SetPhaseVoltage_13>
 8001108:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800110a:	1c40      	adds	r0, r0, #1
 800110c:	f8c1 0544 	str.w	r0, [r1, #1348]	@ 0x544
 8001110:	b008      	add	sp, #32
 8001112:	4620      	mov	r0, r4
 8001114:	ecbd 8b04 	vpop	{d8-d9}
 8001118:	b001      	add	sp, #4
 800111a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800111c <??SCC_SetPhaseVoltage_13>:
 800111c:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800111e:	f7ff fe5f 	bl	8000de0 <SCC_Stop>
 8001122:	f003 fbbf 	bl	80048a4 <MC_StopMotor1>
 8001126:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8001128:	f8c1 4544 	str.w	r4, [r1, #1348]	@ 0x544
 800112c:	4620      	mov	r0, r4
 800112e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8001130:	f881 4541 	strb.w	r4, [r1, #1345]	@ 0x541
 8001134:	b008      	add	sp, #32
 8001136:	ecbd 8b04 	vpop	{d8-d9}
 800113a:	b001      	add	sp, #4
 800113c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800113e <??SCC_SetPhaseVoltage_14>:
 800113e:	ed90 0a15 	vldr	s0, [r0, #84]	@ 0x54
 8001142:	f001 f831 	bl	80021a8 <SCC_CurrCtrl>
 8001146:	9800      	ldr	r0, [sp, #0]
 8001148:	f009 f9ce 	bl	800a4e8 <REMNG_Calc>
 800114c:	9800      	ldr	r0, [sp, #0]
 800114e:	f009 f9ed 	bl	800a52c <REMNG_RampCompleted>
 8001152:	b318      	cbz	r0, 800119c <??SCC_SetPhaseVoltage_9>
 8001154:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001156:	f890 1541 	ldrb.w	r1, [r0, #1345]	@ 0x541
 800115a:	2901      	cmp	r1, #1
 800115c:	bf0c      	ite	eq
 800115e:	200b      	moveq	r0, #11
 8001160:	2003      	movne	r0, #3
 8001162:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8001164:	f881 0034 	strb.w	r0, [r1, #52]	@ 0x34
 8001168:	eef5 0a00 	vmov.f32	s1, #80	@ 0x3e800000  0.250
 800116c:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800116e:	f8c0 40ac 	str.w	r4, [r0, #172]	@ 0xac
 8001172:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001174:	f8c0 40b0 	str.w	r4, [r0, #176]	@ 0xb0
 8001178:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800117a:	f8c0 40b4 	str.w	r4, [r0, #180]	@ 0xb4
 800117e:	f06f 0013 	mvn.w	r0, #19
 8001182:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8001184:	ed91 0a15 	vldr	s0, [r1, #84]	@ 0x54
 8001188:	ee20 0a20 	vmul.f32	s0, s0, s1
 800118c:	ed81 0a15 	vstr	s0, [r1, #84]	@ 0x54
 8001190:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8001192:	ed81 0a17 	vstr	s0, [r1, #92]	@ 0x5c
 8001196:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8001198:	f881 00dc 	strb.w	r0, [r1, #220]	@ 0xdc

0800119c <??SCC_SetPhaseVoltage_9>:
 800119c:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800119e:	8f81      	ldrh	r1, [r0, #60]	@ 0x3c
 80011a0:	6800      	ldr	r0, [r0, #0]
 80011a2:	f004 fe5b 	bl	8005e5c <PWMC_RLDetectionModeSetDuty>
 80011a6:	f000 bd09 	b.w	8001bbc <??SCC_SetPhaseVoltage_15>

080011aa <??SCC_SetPhaseVoltage_16>:
 80011aa:	ed90 0a15 	vldr	s0, [r0, #84]	@ 0x54
 80011ae:	f000 fffb 	bl	80021a8 <SCC_CurrCtrl>
 80011b2:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80011b4:	8f81      	ldrh	r1, [r0, #60]	@ 0x3c
 80011b6:	9800      	ldr	r0, [sp, #0]
 80011b8:	f8ad 1004 	strh.w	r1, [sp, #4]
 80011bc:	f009 f994 	bl	800a4e8 <REMNG_Calc>
 80011c0:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80011c2:	f000 ff09 	bl	8001fd8 <SCC_GetCurrent>
 80011c6:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80011c8:	edd0 0a2b 	vldr	s1, [r0, #172]	@ 0xac
 80011cc:	ee30 0a80 	vadd.f32	s0, s1, s0
 80011d0:	ed80 0a2b 	vstr	s0, [r0, #172]	@ 0xac
 80011d4:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80011d6:	f8d1 00b4 	ldr.w	r0, [r1, #180]	@ 0xb4
 80011da:	1c40      	adds	r0, r0, #1
 80011dc:	f8c1 00b4 	str.w	r0, [r1, #180]	@ 0xb4
 80011e0:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80011e2:	6840      	ldr	r0, [r0, #4]
 80011e4:	f008 f938 	bl	8009458 <VBS_GetAvBusVoltage_d>
 80011e8:	ee00 0a90 	vmov	s1, r0
 80011ec:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80011ee:	6841      	ldr	r1, [r0, #4]
 80011f0:	8848      	ldrh	r0, [r1, #2]
 80011f2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80011f4:	ee01 0a10 	vmov	s2, r0
 80011f8:	eef8 0a60 	vcvt.f32.u32	s1, s1
 80011fc:	eeb8 1a41 	vcvt.f32.u32	s2, s2
 8001200:	ed9f 0ad9 	vldr	s0, [pc, #868]	@ 8001568 <??SCC_SetPhaseVoltage_2>
 8001204:	ee60 0a81 	vmul.f32	s1, s1, s2
 8001208:	ee60 0a80 	vmul.f32	s1, s1, s0
 800120c:	edc1 0a18 	vstr	s1, [r1, #96]	@ 0x60
 8001210:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8001214:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8001216:	ee01 0a10 	vmov	s2, r0
 800121a:	eeb8 1a41 	vcvt.f32.u32	s2, s2
 800121e:	ee21 0a00 	vmul.f32	s0, s2, s0
 8001222:	ed91 1a2c 	vldr	s2, [r1, #176]	@ 0xb0
 8001226:	ee00 1a20 	vmla.f32	s2, s0, s1
 800122a:	ed81 1a2c 	vstr	s2, [r1, #176]	@ 0xb0
 800122e:	9800      	ldr	r0, [sp, #0]
 8001230:	f009 f97c 	bl	800a52c <REMNG_RampCompleted>
 8001234:	2800      	cmp	r0, #0
 8001236:	f000 825f 	beq.w	80016f8 <??SCC_SetPhaseVoltage_17>
 800123a:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800123c:	ed90 0a2d 	vldr	s0, [r0, #180]	@ 0xb4
 8001240:	edd0 0a2b 	vldr	s1, [r0, #172]	@ 0xac
 8001244:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8001248:	ee80 0a80 	vdiv.f32	s0, s1, s0
 800124c:	ed80 0a25 	vstr	s0, [r0, #148]	@ 0x94
 8001250:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8001252:	f891 2090 	ldrb.w	r2, [r1, #144]	@ 0x90
 8001256:	edd1 0a2d 	vldr	s1, [r1, #180]	@ 0xb4
 800125a:	ed91 1a2c 	vldr	s2, [r1, #176]	@ 0xb0
 800125e:	eb01 0082 	add.w	r0, r1, r2, lsl #2
 8001262:	eef8 0a60 	vcvt.f32.u32	s1, s1
 8001266:	ed80 0a1c 	vstr	s0, [r0, #112]	@ 0x70
 800126a:	eec1 0a20 	vdiv.f32	s1, s2, s1
 800126e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8001270:	f891 2090 	ldrb.w	r2, [r1, #144]	@ 0x90
 8001274:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8001278:	edc1 0a20 	vstr	s1, [r1, #128]	@ 0x80
 800127c:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800127e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8001280:	f890 0090 	ldrb.w	r0, [r0, #144]	@ 0x90
 8001284:	1c40      	adds	r0, r0, #1
 8001286:	f881 0090 	strb.w	r0, [r1, #144]	@ 0x90
 800128a:	b2c0      	uxtb	r0, r0
 800128c:	2804      	cmp	r0, #4
 800128e:	d21b      	bcs.n	80012c8 <??SCC_SetPhaseVoltage_18>
 8001290:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001292:	ed90 0a15 	vldr	s0, [r0, #84]	@ 0x54
 8001296:	edd0 0a17 	vldr	s1, [r0, #92]	@ 0x5c
 800129a:	ee30 0a20 	vadd.f32	s0, s0, s1
 800129e:	ed80 0a15 	vstr	s0, [r0, #84]	@ 0x54
 80012a2:	f06f 0113 	mvn.w	r1, #19
 80012a6:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80012a8:	f880 10dc 	strb.w	r1, [r0, #220]	@ 0xdc
 80012ac:	2003      	movs	r0, #3
 80012ae:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80012b0:	f8c1 40ac 	str.w	r4, [r1, #172]	@ 0xac
 80012b4:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80012b6:	f8c1 40b0 	str.w	r4, [r1, #176]	@ 0xb0
 80012ba:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80012bc:	f8c1 40b4 	str.w	r4, [r1, #180]	@ 0xb4
 80012c0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80012c2:	f881 0034 	strb.w	r0, [r1, #52]	@ 0x34
 80012c6:	e217      	b.n	80016f8 <??SCC_SetPhaseVoltage_17>

080012c8 <??SCC_SetPhaseVoltage_18>:
 80012c8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80012ca:	2005      	movs	r0, #5
 80012cc:	f881 0034 	strb.w	r0, [r1, #52]	@ 0x34
 80012d0:	ed9f 8aa6 	vldr	s16, [pc, #664]	@ 800156c <??SCC_SetPhaseVoltage_2+0x4>
 80012d4:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80012d6:	f881 403e 	strb.w	r4, [r1, #62]	@ 0x3e
 80012da:	9800      	ldr	r0, [sp, #0]
 80012dc:	f009 f8fc 	bl	800a4d8 <REMNG_Init>
 80012e0:	9800      	ldr	r0, [sp, #0]
 80012e2:	2264      	movs	r2, #100	@ 0x64
 80012e4:	f64e 2160 	movw	r1, #60000	@ 0xea60
 80012e8:	f009 f946 	bl	800a578 <REMNG_ExecRamp>
 80012ec:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80012ee:	a905      	add	r1, sp, #20
 80012f0:	f05f 0003 	movs.w	r0, #3

080012f4 <??SCC_SetPhaseVoltage_19>:
 80012f4:	ed92 0a21 	vldr	s0, [r2, #132]	@ 0x84
 80012f8:	edd2 0a20 	vldr	s1, [r2, #128]	@ 0x80
 80012fc:	ed92 1a1c 	vldr	s2, [r2, #112]	@ 0x70
 8001300:	ee70 0a60 	vsub.f32	s1, s0, s1
 8001304:	ed92 0a1d 	vldr	s0, [r2, #116]	@ 0x74
 8001308:	ee30 1a41 	vsub.f32	s2, s0, s2
 800130c:	1d12      	adds	r2, r2, #4
 800130e:	ee80 0a81 	vdiv.f32	s0, s1, s2
 8001312:	ed81 0a00 	vstr	s0, [r1]
 8001316:	1d09      	adds	r1, r1, #4
 8001318:	1e40      	subs	r0, r0, #1
 800131a:	ee38 8a00 	vadd.f32	s16, s16, s0
 800131e:	d1e9      	bne.n	80012f4 <??SCC_SetPhaseVoltage_19>
 8001320:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001322:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 8001326:	ee88 0a00 	vdiv.f32	s0, s16, s0
 800132a:	ed80 0a19 	vstr	s0, [r0, #100]	@ 0x64
 800132e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8001330:	f8d1 1548 	ldr.w	r1, [r1, #1352]	@ 0x548
 8001334:	f891 0040 	ldrb.w	r0, [r1, #64]	@ 0x40
 8001338:	bb48      	cbnz	r0, 800138e <??SCC_SetPhaseVoltage_20>
 800133a:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800133c:	edd1 0a0a 	vldr	s1, [r1, #40]	@ 0x28
 8001340:	ee30 0a60 	vsub.f32	s0, s0, s1
 8001344:	eddf 0a8a 	vldr	s1, [pc, #552]	@ 8001570 <??SCC_SetPhaseVoltage_2+0x8>
 8001348:	eeb4 0a60 	vcmp.f32	s0, s1
 800134c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001350:	ed80 0a19 	vstr	s0, [r0, #100]	@ 0x64
 8001354:	d504      	bpl.n	8001360 <??SCC_SetPhaseVoltage_21>
 8001356:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001358:	f8df 1d10 	ldr.w	r1, [pc, #3344]	@ 800206c <??DataTable9_3>
 800135c:	6641      	str	r1, [r0, #100]	@ 0x64
 800135e:	e006      	b.n	800136e <??SCC_SetPhaseVoltage_22>

08001360 <??SCC_SetPhaseVoltage_21>:
 8001360:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001362:	eef6 0a00 	vmov.f32	s1, #96	@ 0x3f000000  0.5
 8001366:	ee20 0a20 	vmul.f32	s0, s0, s1
 800136a:	ed80 0a19 	vstr	s0, [r0, #100]	@ 0x64

0800136e <??SCC_SetPhaseVoltage_22>:
 800136e:	eddf 0a81 	vldr	s1, [pc, #516]	@ 8001574 <??SCC_SetPhaseVoltage_2+0xc>
 8001372:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001374:	ed90 0a25 	vldr	s0, [r0, #148]	@ 0x94
 8001378:	ee60 0a20 	vmul.f32	s1, s0, s1
 800137c:	edc0 0a26 	vstr	s1, [r0, #152]	@ 0x98
 8001380:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8001382:	f8c1 40a8 	str.w	r4, [r1, #168]	@ 0xa8
 8001386:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8001388:	f8c1 40a4 	str.w	r4, [r1, #164]	@ 0xa4
 800138c:	e1b4      	b.n	80016f8 <??SCC_SetPhaseVoltage_17>

0800138e <??SCC_SetPhaseVoltage_20>:
 800138e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8001390:	200a      	movs	r0, #10
 8001392:	f881 0034 	strb.w	r0, [r1, #52]	@ 0x34
 8001396:	2008      	movs	r0, #8
 8001398:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800139a:	68ca      	ldr	r2, [r1, #12]
 800139c:	77d0      	strb	r0, [r2, #31]
 800139e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80013a0:	6800      	ldr	r0, [r0, #0]
 80013a2:	f004 fd0f 	bl	8005dc4 <PWMC_SwitchOffPWM>
 80013a6:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80013a8:	6800      	ldr	r0, [r0, #0]
 80013aa:	f004 fd55 	bl	8005e58 <PWMC_RLDetectionModeDisable>
 80013ae:	f8ad 4004 	strh.w	r4, [sp, #4]
 80013b2:	e1a1      	b.n	80016f8 <??SCC_SetPhaseVoltage_17>

080013b4 <??SCC_SetPhaseVoltage_23>:
 80013b4:	f000 fe10 	bl	8001fd8 <SCC_GetCurrent>
 80013b8:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80013ba:	f890 103e 	ldrb.w	r1, [r0, #62]	@ 0x3e
 80013be:	b111      	cbz	r1, 80013c6 <??SCC_SetPhaseVoltage_24>
 80013c0:	2902      	cmp	r1, #2
 80013c2:	d008      	beq.n	80013d6 <??SCC_SetPhaseVoltage_25>
 80013c4:	e01c      	b.n	8001400 <??SCC_SetPhaseVoltage_26>

080013c6 <??SCC_SetPhaseVoltage_24>:
 80013c6:	eddf 0a6c 	vldr	s1, [pc, #432]	@ 8001578 <??SCC_SetPhaseVoltage_2+0x10>
 80013ca:	eeb4 0a60 	vcmp.f32	s0, s1
 80013ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013d2:	d515      	bpl.n	8001400 <??SCC_SetPhaseVoltage_26>
 80013d4:	e011      	b.n	80013fa <??SCC_SetPhaseVoltage_27>

080013d6 <??SCC_SetPhaseVoltage_25>:
 80013d6:	8f81      	ldrh	r1, [r0, #60]	@ 0x3c
 80013d8:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80013da:	f8ad 1004 	strh.w	r1, [sp, #4]
 80013de:	edd0 0a26 	vldr	s1, [r0, #152]	@ 0x98
 80013e2:	eeb4 0a60 	vcmp.f32	s0, s1
 80013e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ea:	d506      	bpl.n	80013fa <??SCC_SetPhaseVoltage_27>
 80013ec:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80013ee:	f8d0 10a0 	ldr.w	r1, [r0, #160]	@ 0xa0
 80013f2:	1c49      	adds	r1, r1, #1
 80013f4:	f8c0 10a0 	str.w	r1, [r0, #160]	@ 0xa0
 80013f8:	e002      	b.n	8001400 <??SCC_SetPhaseVoltage_26>

080013fa <??SCC_SetPhaseVoltage_27>:
 80013fa:	9800      	ldr	r0, [sp, #0]
 80013fc:	f009 f89c 	bl	800a538 <REMNG_StopRamp>

08001400 <??SCC_SetPhaseVoltage_26>:
 8001400:	9800      	ldr	r0, [sp, #0]
 8001402:	f009 f871 	bl	800a4e8 <REMNG_Calc>
 8001406:	9800      	ldr	r0, [sp, #0]
 8001408:	f009 f890 	bl	800a52c <REMNG_RampCompleted>
 800140c:	2800      	cmp	r0, #0
 800140e:	f000 8173 	beq.w	80016f8 <??SCC_SetPhaseVoltage_17>
 8001412:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001414:	f890 103e 	ldrb.w	r1, [r0, #62]	@ 0x3e
 8001418:	b119      	cbz	r1, 8001422 <??SCC_SetPhaseVoltage_28>
 800141a:	2902      	cmp	r1, #2
 800141c:	d012      	beq.n	8001444 <??SCC_SetPhaseVoltage_29>
 800141e:	d309      	bcc.n	8001434 <??SCC_SetPhaseVoltage_30>
 8001420:	e16a      	b.n	80016f8 <??SCC_SetPhaseVoltage_17>

08001422 <??SCC_SetPhaseVoltage_28>:
 8001422:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8001424:	2001      	movs	r0, #1
 8001426:	f881 003e 	strb.w	r0, [r1, #62]	@ 0x3e
 800142a:	9800      	ldr	r0, [sp, #0]
 800142c:	f009 f854 	bl	800a4d8 <REMNG_Init>
 8001430:	220a      	movs	r2, #10
 8001432:	e15c      	b.n	80016ee <??SCC_SetPhaseVoltage_31>

08001434 <??SCC_SetPhaseVoltage_30>:
 8001434:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8001436:	2002      	movs	r0, #2
 8001438:	f881 003e 	strb.w	r0, [r1, #62]	@ 0x3e
 800143c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800143e:	f8c1 40a0 	str.w	r4, [r1, #160]	@ 0xa0
 8001442:	e150      	b.n	80016e6 <??SCC_SetPhaseVoltage_32>

08001444 <??SCC_SetPhaseVoltage_29>:
 8001444:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8001446:	f881 403e 	strb.w	r4, [r1, #62]	@ 0x3e
 800144a:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800144c:	ed90 0a28 	vldr	s0, [r0, #160]	@ 0xa0
 8001450:	edd0 0a10 	vldr	s1, [r0, #64]	@ 0x40
 8001454:	ed90 1a2a 	vldr	s2, [r0, #168]	@ 0xa8
 8001458:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 800145c:	ee20 0a20 	vmul.f32	s0, s0, s1
 8001460:	edd0 0a19 	vldr	s1, [r0, #100]	@ 0x64
 8001464:	ee00 1a20 	vmla.f32	s2, s0, s1
 8001468:	ed80 1a2a 	vstr	s2, [r0, #168]	@ 0xa8
 800146c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800146e:	f8d1 00a4 	ldr.w	r0, [r1, #164]	@ 0xa4
 8001472:	1c40      	adds	r0, r0, #1
 8001474:	2814      	cmp	r0, #20
 8001476:	f8c1 00a4 	str.w	r0, [r1, #164]	@ 0xa4
 800147a:	f040 8134 	bne.w	80016e6 <??SCC_SetPhaseVoltage_32>
 800147e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8001480:	2006      	movs	r0, #6
 8001482:	f881 0034 	strb.w	r0, [r1, #52]	@ 0x34
 8001486:	2008      	movs	r0, #8
 8001488:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800148a:	68ca      	ldr	r2, [r1, #12]
 800148c:	77d0      	strb	r0, [r2, #31]
 800148e:	2710      	movs	r7, #16
 8001490:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001492:	6800      	ldr	r0, [r0, #0]
 8001494:	f004 fc96 	bl	8005dc4 <PWMC_SwitchOffPWM>
 8001498:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800149a:	6800      	ldr	r0, [r0, #0]
 800149c:	f004 fcdc 	bl	8005e58 <PWMC_RLDetectionModeDisable>
 80014a0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80014a2:	f8ad 4004 	strh.w	r4, [sp, #4]
 80014a6:	2610      	movs	r6, #16
 80014a8:	ed91 0a29 	vldr	s0, [r1, #164]	@ 0xa4
 80014ac:	edd1 0a2a 	vldr	s1, [r1, #168]	@ 0xa8
 80014b0:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 80014b4:	ee80 0a80 	vdiv.f32	s0, s1, s0
 80014b8:	ed81 0a1a 	vstr	s0, [r1, #104]	@ 0x68
 80014bc:	2500      	movs	r5, #0
 80014be:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80014c0:	6848      	ldr	r0, [r1, #4]
 80014c2:	f007 ffc9 	bl	8009458 <VBS_GetAvBusVoltage_d>
 80014c6:	ee00 0a10 	vmov	s0, r0
 80014ca:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80014cc:	6841      	ldr	r1, [r0, #4]
 80014ce:	8848      	ldrh	r0, [r1, #2]
 80014d0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80014d2:	ee00 0a90 	vmov	s1, r0
 80014d6:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 80014da:	eef8 0a60 	vcvt.f32.u32	s1, s1
 80014de:	ee20 0a20 	vmul.f32	s0, s0, s1
 80014e2:	ed9f 1a21 	vldr	s2, [pc, #132]	@ 8001568 <??SCC_SetPhaseVoltage_2>
 80014e6:	ee20 0a01 	vmul.f32	s0, s0, s2
 80014ea:	ed81 0a18 	vstr	s0, [r1, #96]	@ 0x60
 80014ee:	2110      	movs	r1, #16
 80014f0:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80014f2:	f8d0 0548 	ldr.w	r0, [r0, #1352]	@ 0x548
 80014f6:	edd0 0a06 	vldr	s1, [r0, #24]
 80014fa:	ed90 1a07 	vldr	s2, [r0, #28]
 80014fe:	ee20 0a20 	vmul.f32	s0, s0, s1
 8001502:	ee20 1a01 	vmul.f32	s2, s0, s2
 8001506:	ed90 0a13 	vldr	s0, [r0, #76]	@ 0x4c
 800150a:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800150c:	ed90 2a19 	vldr	s4, [r0, #100]	@ 0x64
 8001510:	edd0 1a4d 	vldr	s3, [r0, #308]	@ 0x134
 8001514:	edd0 0a38 	vldr	s1, [r0, #224]	@ 0xe0
 8001518:	ee81 1a00 	vdiv.f32	s2, s2, s0
 800151c:	ed90 0a1a 	vldr	s0, [r0, #104]	@ 0x68
 8001520:	ee20 0a21 	vmul.f32	s0, s0, s3
 8001524:	ee62 1a21 	vmul.f32	s3, s4, s3
 8001528:	ed90 2a10 	vldr	s4, [r0, #64]	@ 0x40
 800152c:	ee80 0a01 	vdiv.f32	s0, s0, s2
 8001530:	ee61 1a82 	vmul.f32	s3, s3, s4
 8001534:	ee60 0a20 	vmul.f32	s1, s0, s1
 8001538:	ee81 1a81 	vdiv.f32	s2, s3, s2
 800153c:	2200      	movs	r2, #0
 800153e:	200f      	movs	r0, #15
 8001540:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8001544:	f04f 0c01 	mov.w	ip, #1

08001548 <??SCC_SetPhaseVoltage_33>:
 8001548:	fa0c f400 	lsl.w	r4, ip, r0
 800154c:	ee01 4a90 	vmov	s3, r4
 8001550:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8001554:	ee61 1a80 	vmul.f32	s3, s3, s0
 8001558:	eefd 1ae1 	vcvt.s32.f32	s3, s3
 800155c:	ee11 4a90 	vmov	r4, s3
 8001560:	429c      	cmp	r4, r3
 8001562:	da12      	bge.n	800158a <??SCC_SetPhaseVoltage_34>
 8001564:	4601      	mov	r1, r0
 8001566:	e010      	b.n	800158a <??SCC_SetPhaseVoltage_34>

08001568 <??SCC_SetPhaseVoltage_2>:
 8001568:	0000 3780 0000 0000 cccd 3e4c d29e 3f21     ...7......L>..!?
 8001578:	d70a 3c23                                   ..#<

0800157c <??SCC_SetPhaseVoltage_35>:
 800157c:	4607      	mov	r7, r0
 800157e:	e017      	b.n	80015b0 <??SCC_SetPhaseVoltage_36>

08001580 <??SCC_SetPhaseVoltage_37>:
 8001580:	fa1f fe81 	uxth.w	lr, r1
 8001584:	f1be 0f10 	cmp.w	lr, #16
 8001588:	d0de      	beq.n	8001548 <??SCC_SetPhaseVoltage_33>

0800158a <??SCC_SetPhaseVoltage_34>:
 800158a:	fa1f fe87 	uxth.w	lr, r7
 800158e:	f1be 0f10 	cmp.w	lr, #16
 8001592:	d10d      	bne.n	80015b0 <??SCC_SetPhaseVoltage_36>
 8001594:	fa0c f200 	lsl.w	r2, ip, r0
 8001598:	ee01 2a90 	vmov	s3, r2
 800159c:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 80015a0:	ee61 1aa0 	vmul.f32	s3, s3, s1
 80015a4:	eefd 1ae1 	vcvt.s32.f32	s3, s3
 80015a8:	ee11 2a90 	vmov	r2, s3
 80015ac:	429a      	cmp	r2, r3
 80015ae:	dbe5      	blt.n	800157c <??SCC_SetPhaseVoltage_35>

080015b0 <??SCC_SetPhaseVoltage_36>:
 80015b0:	fa1f fe86 	uxth.w	lr, r6
 80015b4:	f1be 0f10 	cmp.w	lr, #16
 80015b8:	d10e      	bne.n	80015d8 <??SCC_SetPhaseVoltage_38>
 80015ba:	fa0c f500 	lsl.w	r5, ip, r0
 80015be:	ee01 5a90 	vmov	s3, r5
 80015c2:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 80015c6:	ee61 1a81 	vmul.f32	s3, s3, s2
 80015ca:	eefd 1ae1 	vcvt.s32.f32	s3, s3
 80015ce:	ee11 5a90 	vmov	r5, s3
 80015d2:	429d      	cmp	r5, r3
 80015d4:	bfb8      	it	lt
 80015d6:	4606      	movlt	r6, r0

080015d8 <??SCC_SetPhaseVoltage_38>:
 80015d8:	1e40      	subs	r0, r0, #1
 80015da:	d5d1      	bpl.n	8001580 <??SCC_SetPhaseVoltage_37>
 80015dc:	b288      	uxth	r0, r1
 80015de:	2810      	cmp	r0, #16
 80015e0:	9202      	str	r2, [sp, #8]
 80015e2:	d00a      	beq.n	80015fa <??SCC_SetPhaseVoltage_39>
 80015e4:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80015e6:	6980      	ldr	r0, [r0, #24]
 80015e8:	b289      	uxth	r1, r1
 80015ea:	f008 f8dd 	bl	80097a8 <PID_SetKPDivisorPOW2>
 80015ee:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80015f0:	6980      	ldr	r0, [r0, #24]
 80015f2:	b221      	sxth	r1, r4
 80015f4:	f008 f8c8 	bl	8009788 <PID_SetKP>
 80015f8:	e003      	b.n	8001602 <??SCC_SetPhaseVoltage_40>

080015fa <??SCC_SetPhaseVoltage_39>:
 80015fa:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80015fc:	2009      	movs	r0, #9
 80015fe:	f881 0034 	strb.w	r0, [r1, #52]	@ 0x34

08001602 <??SCC_SetPhaseVoltage_40>:
 8001602:	b2b8      	uxth	r0, r7
 8001604:	2810      	cmp	r0, #16
 8001606:	d00b      	beq.n	8001620 <??SCC_SetPhaseVoltage_41>
 8001608:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800160a:	69c0      	ldr	r0, [r0, #28]
 800160c:	b2b9      	uxth	r1, r7
 800160e:	f008 f8cb 	bl	80097a8 <PID_SetKPDivisorPOW2>
 8001612:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001614:	9902      	ldr	r1, [sp, #8]
 8001616:	69c0      	ldr	r0, [r0, #28]
 8001618:	b209      	sxth	r1, r1
 800161a:	f008 f8b5 	bl	8009788 <PID_SetKP>
 800161e:	e003      	b.n	8001628 <??SCC_SetPhaseVoltage_42>

08001620 <??SCC_SetPhaseVoltage_41>:
 8001620:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8001622:	2009      	movs	r0, #9
 8001624:	f881 0034 	strb.w	r0, [r1, #52]	@ 0x34

08001628 <??SCC_SetPhaseVoltage_42>:
 8001628:	b2b0      	uxth	r0, r6
 800162a:	2810      	cmp	r0, #16
 800162c:	d014      	beq.n	8001658 <??SCC_SetPhaseVoltage_43>
 800162e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001630:	6980      	ldr	r0, [r0, #24]
 8001632:	b2b1      	uxth	r1, r6
 8001634:	f008 f8c6 	bl	80097c4 <PID_SetKIDivisorPOW2>
 8001638:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800163a:	69c0      	ldr	r0, [r0, #28]
 800163c:	b2b1      	uxth	r1, r6
 800163e:	f008 f8c1 	bl	80097c4 <PID_SetKIDivisorPOW2>
 8001642:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001644:	6980      	ldr	r0, [r0, #24]
 8001646:	b229      	sxth	r1, r5
 8001648:	f008 f8a0 	bl	800978c <PID_SetKI>
 800164c:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800164e:	69c0      	ldr	r0, [r0, #28]
 8001650:	b229      	sxth	r1, r5
 8001652:	f008 f89b 	bl	800978c <PID_SetKI>
 8001656:	e003      	b.n	8001660 <??SCC_SetPhaseVoltage_44>

08001658 <??SCC_SetPhaseVoltage_43>:
 8001658:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800165a:	2009      	movs	r0, #9
 800165c:	f881 0034 	strb.w	r0, [r1, #52]	@ 0x34

08001660 <??SCC_SetPhaseVoltage_44>:
 8001660:	eddf 0aab 	vldr	s1, [pc, #684]	@ 8001910 <??SCC_SetPhaseVoltage_3>
 8001664:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001666:	f8d0 0548 	ldr.w	r0, [r0, #1352]	@ 0x548
 800166a:	ed90 0a06 	vldr	s0, [r0, #24]
 800166e:	ed90 1a07 	vldr	s2, [r0, #28]
 8001672:	ee60 0a20 	vmul.f32	s1, s0, s1
 8001676:	ee20 1a81 	vmul.f32	s2, s1, s2
 800167a:	ed90 0a13 	vldr	s0, [r0, #76]	@ 0x4c
 800167e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001680:	edd0 0a15 	vldr	s1, [r0, #84]	@ 0x54
 8001684:	6a00      	ldr	r0, [r0, #32]
 8001686:	ee81 0a00 	vdiv.f32	s0, s2, s0
 800168a:	ee20 0a20 	vmul.f32	s0, s0, s1
 800168e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8001692:	ee10 1a10 	vmov	r1, s0
 8001696:	1e4c      	subs	r4, r1, #1
 8001698:	b222      	sxth	r2, r4
 800169a:	2100      	movs	r1, #0
 800169c:	f009 f896 	bl	800a7cc <RUC_SetPhaseFinalTorque>
 80016a0:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80016a2:	6a00      	ldr	r0, [r0, #32]
 80016a4:	b222      	sxth	r2, r4
 80016a6:	2101      	movs	r1, #1
 80016a8:	f009 f890 	bl	800a7cc <RUC_SetPhaseFinalTorque>
 80016ac:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80016ae:	6a00      	ldr	r0, [r0, #32]
 80016b0:	b222      	sxth	r2, r4
 80016b2:	2102      	movs	r1, #2
 80016b4:	f009 f88a 	bl	800a7cc <RUC_SetPhaseFinalTorque>
 80016b8:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80016ba:	6a00      	ldr	r0, [r0, #32]
 80016bc:	b222      	sxth	r2, r4
 80016be:	2103      	movs	r1, #3
 80016c0:	f009 f884 	bl	800a7cc <RUC_SetPhaseFinalTorque>
 80016c4:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80016c6:	6a00      	ldr	r0, [r0, #32]
 80016c8:	b222      	sxth	r2, r4
 80016ca:	2104      	movs	r1, #4
 80016cc:	f009 f87e 	bl	800a7cc <RUC_SetPhaseFinalTorque>
 80016d0:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80016d2:	f8d0 1548 	ldr.w	r1, [r0, #1352]	@ 0x548
 80016d6:	8e4a      	ldrh	r2, [r1, #50]	@ 0x32
 80016d8:	6a00      	ldr	r0, [r0, #32]
 80016da:	2100      	movs	r1, #0
 80016dc:	f009 f86a 	bl	800a7b4 <RUC_SetPhaseDurationms>
 80016e0:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80016e2:	f001 f889 	bl	80027f8 <SCC_UpdateRevup>

080016e6 <??SCC_SetPhaseVoltage_32>:
 80016e6:	9800      	ldr	r0, [sp, #0]
 80016e8:	f008 fef6 	bl	800a4d8 <REMNG_Init>
 80016ec:	2264      	movs	r2, #100	@ 0x64

080016ee <??SCC_SetPhaseVoltage_31>:
 80016ee:	9800      	ldr	r0, [sp, #0]
 80016f0:	f64e 2160 	movw	r1, #60000	@ 0xea60
 80016f4:	f008 ff40 	bl	800a578 <REMNG_ExecRamp>

080016f8 <??SCC_SetPhaseVoltage_17>:
 80016f8:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80016fa:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 80016fe:	6800      	ldr	r0, [r0, #0]
 8001700:	f004 fbac 	bl	8005e5c <PWMC_RLDetectionModeSetDuty>
 8001704:	e25a      	b.n	8001bbc <??SCC_SetPhaseVoltage_15>

08001706 <??SCC_SetPhaseVoltage_45>:
 8001706:	68c0      	ldr	r0, [r0, #12]
 8001708:	f003 f97c 	bl	8004a04 <MCI_GetSTMState>
 800170c:	2804      	cmp	r0, #4
 800170e:	bf18      	it	ne
 8001710:	2806      	cmpne	r0, #6
 8001712:	d005      	beq.n	8001720 <??SCC_SetPhaseVoltage_46>
 8001714:	2808      	cmp	r0, #8
 8001716:	f000 820a 	beq.w	8001b2e <??SCC_SetPhaseVoltage_47>
 800171a:	2813      	cmp	r0, #19
 800171c:	f040 8249 	bne.w	8001bb2 <??SCC_SetPhaseVoltage_4>

08001720 <??SCC_SetPhaseVoltage_46>:
 8001720:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001722:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8001724:	f009 f8e2 	bl	800a8ec <STC_GetSpeedSensor>
 8001728:	f009 f878 	bl	800a81c <SPD_GetElAngle>
 800172c:	4605      	mov	r5, r0
 800172e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001730:	6881      	ldr	r1, [r0, #8]
 8001732:	6808      	ldr	r0, [r1, #0]
 8001734:	f003 fa80 	bl	8004c38 <MCM_Clarke>
 8001738:	4606      	mov	r6, r0
 800173a:	4629      	mov	r1, r5
 800173c:	f003 faf2 	bl	8004d24 <MCM_Park>
 8001740:	9003      	str	r0, [sp, #12]
 8001742:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001744:	6881      	ldr	r1, [r0, #8]
 8001746:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 800174a:	f9b1 1010 	ldrsh.w	r1, [r1, #16]
 800174e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8001750:	1a09      	subs	r1, r1, r0
 8001752:	6990      	ldr	r0, [r2, #24]
 8001754:	f008 f85c 	bl	8009810 <PI_Controller>
 8001758:	f8ad 0004 	strh.w	r0, [sp, #4]
 800175c:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800175e:	6881      	ldr	r1, [r0, #8]
 8001760:	f9bd 000e 	ldrsh.w	r0, [sp, #14]
 8001764:	f9b1 1012 	ldrsh.w	r1, [r1, #18]
 8001768:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800176a:	1a09      	subs	r1, r1, r0
 800176c:	69d0      	ldr	r0, [r2, #28]
 800176e:	f008 f84f 	bl	8009810 <PI_Controller>
 8001772:	f8ad 0006 	strh.w	r0, [sp, #6]
 8001776:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001778:	9901      	ldr	r1, [sp, #4]
 800177a:	6940      	ldr	r0, [r0, #20]
 800177c:	f007 fe74 	bl	8009468 <Circle_Limitation>
 8001780:	9001      	str	r0, [sp, #4]
 8001782:	4629      	mov	r1, r5
 8001784:	f003 fb10 	bl	8004da8 <MCM_Rev_Park>
 8001788:	4607      	mov	r7, r0
 800178a:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800178c:	6800      	ldr	r0, [r0, #0]
 800178e:	4639      	mov	r1, r7
 8001790:	f004 f99e 	bl	8005ad0 <PWMC_SetPhaseVoltage>
 8001794:	4604      	mov	r4, r0
 8001796:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001798:	6881      	ldr	r1, [r0, #8]
 800179a:	604e      	str	r6, [r1, #4]
 800179c:	9606      	str	r6, [sp, #24]
 800179e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80017a0:	688a      	ldr	r2, [r1, #8]
 80017a2:	9803      	ldr	r0, [sp, #12]
 80017a4:	60d0      	str	r0, [r2, #12]
 80017a6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80017a8:	688a      	ldr	r2, [r1, #8]
 80017aa:	9801      	ldr	r0, [sp, #4]
 80017ac:	f8c2 0016 	str.w	r0, [r2, #22]
 80017b0:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80017b2:	6881      	ldr	r1, [r0, #8]
 80017b4:	f8d1 001a 	ldr.w	r0, [r1, #26]
 80017b8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80017ba:	9005      	str	r0, [sp, #20]
 80017bc:	6888      	ldr	r0, [r1, #8]
 80017be:	f8c0 701a 	str.w	r7, [r0, #26]
 80017c2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80017c4:	6888      	ldr	r0, [r1, #8]
 80017c6:	8405      	strh	r5, [r0, #32]
 80017c8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80017ca:	6848      	ldr	r0, [r1, #4]
 80017cc:	f007 fe44 	bl	8009458 <VBS_GetAvBusVoltage_d>
 80017d0:	f8ad 001c 	strh.w	r0, [sp, #28]
 80017d4:	a905      	add	r1, sp, #20
 80017d6:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80017d8:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 80017da:	f009 f93b 	bl	800aa54 <STO_PLL_CalcElAngle>
 80017de:	f8ad 0008 	strh.w	r0, [sp, #8]
 80017e2:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80017e4:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 80017e6:	f009 fac9 	bl	800ad7c <STO_PLL_CalcAvrgElSpeedDpp>
 80017ea:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80017ec:	6900      	ldr	r0, [r0, #16]
 80017ee:	a902      	add	r1, sp, #8
 80017f0:	f009 fc36 	bl	800b060 <VSS_CalcElAngle>
 80017f4:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80017f6:	f890 103f 	ldrb.w	r1, [r0, #63]	@ 0x3f
 80017fa:	2905      	cmp	r1, #5
 80017fc:	f200 81df 	bhi.w	8001bbe <??SCC_SetPhaseVoltage_11>
 8001800:	e8df f011 	tbh	[pc, r1, lsl #1]

08001804 <??SCC_SetPhaseVoltage_1>:
 8001804:	0006 0088 01dd 015b 01dd 017d               ......[...}.

08001810 <??SCC_SetPhaseVoltage_48>:
 8001810:	f000 fd3c 	bl	800228c <SCC_KeDetection>
 8001814:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8001816:	f881 0128 	strb.w	r0, [r1, #296]	@ 0x128
 800181a:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800181c:	f890 0128 	ldrb.w	r0, [r0, #296]	@ 0x128
 8001820:	2802      	cmp	r0, #2
 8001822:	d125      	bne.n	8001870 <??SCC_SetPhaseVoltage_49>
 8001824:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001826:	6900      	ldr	r0, [r0, #16]
 8001828:	f008 fffc 	bl	800a824 <SPD_GetAvrgMecSpeedUnit>
 800182c:	ebc0 1100 	rsb	r1, r0, r0, lsl #4
 8001830:	0088      	lsls	r0, r1, #2
 8001832:	f8df 23cc 	ldr.w	r2, [pc, #972]	@ 8001c00 <??DataTable5_13>
 8001836:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8001838:	fb80 3202 	smull	r3, r2, r0, r2
 800183c:	1092      	asrs	r2, r2, #2
 800183e:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8001842:	f8c5 20e8 	str.w	r2, [r5, #232]	@ 0xe8
 8001846:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001848:	6900      	ldr	r0, [r0, #16]
 800184a:	f008 ffeb 	bl	800a824 <SPD_GetAvrgMecSpeedUnit>
 800184e:	4601      	mov	r1, r0
 8001850:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001852:	f001 f829 	bl	80028a8 <SCC_SetMinStarupSpeedSTO>
 8001856:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8001858:	2001      	movs	r0, #1
 800185a:	f881 003f 	strb.w	r0, [r1, #63]	@ 0x3f
 800185e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001860:	f000 fd08 	bl	8002274 <SCC_KeDetectionInit>
 8001864:	b008      	add	sp, #32
 8001866:	4620      	mov	r0, r4
 8001868:	ecbd 8b04 	vpop	{d8-d9}
 800186c:	b001      	add	sp, #4
 800186e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001870 <??SCC_SetPhaseVoltage_49>:
 8001870:	2801      	cmp	r0, #1
 8001872:	f000 81a4 	beq.w	8001bbe <??SCC_SetPhaseVoltage_11>
 8001876:	2803      	cmp	r0, #3
 8001878:	d121      	bne.n	80018be <??SCC_SetPhaseVoltage_50>
 800187a:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800187c:	ed90 0a3b 	vldr	s0, [r0, #236]	@ 0xec
 8001880:	eebb 0aef 	vcvt.f32.u32	s0, s0, #1
 8001884:	eefc 0ac0 	vcvt.u32.f32	s1, s0
 8001888:	edc0 0a3b 	vstr	s1, [r0, #236]	@ 0xec
 800188c:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800188e:	f000 ffb3 	bl	80027f8 <SCC_UpdateRevup>
 8001892:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8001894:	2006      	movs	r0, #6
 8001896:	f881 0034 	strb.w	r0, [r1, #52]	@ 0x34
 800189a:	2008      	movs	r0, #8
 800189c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800189e:	68ca      	ldr	r2, [r1, #12]
 80018a0:	77d0      	strb	r0, [r2, #31]
 80018a2:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80018a4:	6800      	ldr	r0, [r0, #0]
 80018a6:	f004 fa8d 	bl	8005dc4 <PWMC_SwitchOffPWM>
 80018aa:	48cf      	ldr	r0, [pc, #828]	@ (8001be8 <??DataTable5_7>)
 80018ac:	8841      	ldrh	r1, [r0, #2]
 80018ae:	1c49      	adds	r1, r1, #1
 80018b0:	8041      	strh	r1, [r0, #2]
 80018b2:	b008      	add	sp, #32
 80018b4:	4620      	mov	r0, r4
 80018b6:	ecbd 8b04 	vpop	{d8-d9}
 80018ba:	b001      	add	sp, #4
 80018bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080018be <??SCC_SetPhaseVoltage_50>:
 80018be:	2804      	cmp	r0, #4
 80018c0:	f040 817d 	bne.w	8001bbe <??SCC_SetPhaseVoltage_11>
 80018c4:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80018c6:	ed90 0a49 	vldr	s0, [r0, #292]	@ 0x124
 80018ca:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 80018ce:	eddf 0abf 	vldr	s1, [pc, #764]	@ 8001bcc <??DataTable5>
 80018d2:	ee60 0a20 	vmul.f32	s1, s0, s1
 80018d6:	eefd 0ae0 	vcvt.s32.f32	s1, s1
 80018da:	edc0 0a3a 	vstr	s1, [r0, #232]	@ 0xe8
 80018de:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80018e0:	f000 ff8a 	bl	80027f8 <SCC_UpdateRevup>
 80018e4:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80018e6:	2006      	movs	r0, #6
 80018e8:	f881 0034 	strb.w	r0, [r1, #52]	@ 0x34
 80018ec:	2008      	movs	r0, #8
 80018ee:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80018f0:	68ca      	ldr	r2, [r1, #12]
 80018f2:	77d0      	strb	r0, [r2, #31]
 80018f4:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80018f6:	6800      	ldr	r0, [r0, #0]
 80018f8:	f004 fa64 	bl	8005dc4 <PWMC_SwitchOffPWM>
 80018fc:	48ba      	ldr	r0, [pc, #744]	@ (8001be8 <??DataTable5_7>)
 80018fe:	8881      	ldrh	r1, [r0, #4]
 8001900:	1c49      	adds	r1, r1, #1
 8001902:	8081      	strh	r1, [r0, #4]
 8001904:	b008      	add	sp, #32
 8001906:	4620      	mov	r0, r4
 8001908:	ecbd 8b04 	vpop	{d8-d9}
 800190c:	b001      	add	sp, #4
 800190e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001910 <??SCC_SetPhaseVoltage_3>:
 8001910:	0000 4780                                   ...G

08001914 <??SCC_SetPhaseVoltage_51>:
 8001914:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8001916:	f8d0 0548 	ldr.w	r0, [r0, #1352]	@ 0x548
 800191a:	688a      	ldr	r2, [r1, #8]
 800191c:	edd0 0a06 	vldr	s1, [r0, #24]
 8001920:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
 8001924:	edd0 1a07 	vldr	s3, [r0, #28]
 8001928:	ed9f 1aaa 	vldr	s2, [pc, #680]	@ 8001bd4 <??DataTable5_2>
 800192c:	ee20 1a81 	vmul.f32	s2, s1, s2
 8001930:	ee00 1a10 	vmov	s0, r1
 8001934:	ee61 1a21 	vmul.f32	s3, s2, s3
 8001938:	edd0 0a13 	vldr	s1, [r0, #76]	@ 0x4c
 800193c:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800193e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8001942:	eec0 0aa1 	vdiv.f32	s1, s1, s3
 8001946:	ed90 1a2f 	vldr	s2, [r0, #188]	@ 0xbc
 800194a:	ee00 1a20 	vmla.f32	s2, s0, s1
 800194e:	ed80 1a2f 	vstr	s2, [r0, #188]	@ 0xbc
 8001952:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8001954:	6848      	ldr	r0, [r1, #4]
 8001956:	f007 fd7f 	bl	8009458 <VBS_GetAvBusVoltage_d>
 800195a:	ee00 0a10 	vmov	s0, r0
 800195e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001960:	6841      	ldr	r1, [r0, #4]
 8001962:	8848      	ldrh	r0, [r1, #2]
 8001964:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8001966:	ee00 0a90 	vmov	s1, r0
 800196a:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 800196e:	eef8 0a60 	vcvt.f32.u32	s1, s1
 8001972:	ee20 0a20 	vmul.f32	s0, s0, s1
 8001976:	ed9f 1a98 	vldr	s2, [pc, #608]	@ 8001bd8 <??DataTable5_3>
 800197a:	ee20 0a01 	vmul.f32	s0, s0, s2
 800197e:	ed81 0a18 	vstr	s0, [r1, #96]	@ 0x60
 8001982:	eddf 0a96 	vldr	s1, [pc, #600]	@ 8001bdc <??DataTable5_4>
 8001986:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001988:	6881      	ldr	r1, [r0, #8]
 800198a:	f9b1 0016 	ldrsh.w	r0, [r1, #22]
 800198e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8001990:	ee01 0a10 	vmov	s2, r0
 8001994:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8001998:	ee21 0a00 	vmul.f32	s0, s2, s0
 800199c:	ed91 1a30 	vldr	s2, [r1, #192]	@ 0xc0
 80019a0:	ee00 1a20 	vmla.f32	s2, s0, s1
 80019a4:	ed81 1a30 	vstr	s2, [r1, #192]	@ 0xc0
 80019a8:	f242 7210 	movw	r2, #10000	@ 0x2710
 80019ac:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80019ae:	6888      	ldr	r0, [r1, #8]
 80019b0:	f9b0 1018 	ldrsh.w	r1, [r0, #24]
 80019b4:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80019b6:	ed90 1a18 	vldr	s2, [r0, #96]	@ 0x60
 80019ba:	ee00 1a10 	vmov	s0, r1
 80019be:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80019c2:	ee20 0a01 	vmul.f32	s0, s0, s2
 80019c6:	ed90 1a31 	vldr	s2, [r0, #196]	@ 0xc4
 80019ca:	ee00 1a20 	vmla.f32	s2, s0, s1
 80019ce:	ed80 1a31 	vstr	s2, [r0, #196]	@ 0xc4
 80019d2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80019d4:	f8d1 00cc 	ldr.w	r0, [r1, #204]	@ 0xcc
 80019d8:	1c40      	adds	r0, r0, #1
 80019da:	4290      	cmp	r0, r2
 80019dc:	f8c1 00cc 	str.w	r0, [r1, #204]	@ 0xcc
 80019e0:	f0c0 80ed 	bcc.w	8001bbe <??SCC_SetPhaseVoltage_11>
 80019e4:	ee00 0a10 	vmov	s0, r0
 80019e8:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80019ea:	edd0 0a2f 	vldr	s1, [r0, #188]	@ 0xbc
 80019ee:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 80019f2:	ee80 8a80 	vdiv.f32	s16, s1, s0
 80019f6:	edd0 0a30 	vldr	s1, [r0, #192]	@ 0xc0
 80019fa:	eec0 8a80 	vdiv.f32	s17, s1, s0
 80019fe:	edd0 0a31 	vldr	s1, [r0, #196]	@ 0xc4
 8001a02:	ee80 9a80 	vdiv.f32	s18, s1, s0
 8001a06:	f000 fc35 	bl	8002274 <SCC_KeDetectionInit>
 8001a0a:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001a0c:	6900      	ldr	r0, [r0, #16]
 8001a0e:	f008 ff09 	bl	800a824 <SPD_GetAvrgMecSpeedUnit>
 8001a12:	ee00 0a10 	vmov	s0, r0
 8001a16:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001a18:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8001a1c:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 8001a20:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8001a24:	edd0 0a19 	vldr	s1, [r0, #100]	@ 0x64
 8001a28:	ed9f 1a6d 	vldr	s2, [pc, #436]	@ 8001be0 <??DataTable5_5>
 8001a2c:	ee40 8ac8 	vmls.f32	s17, s1, s16
 8001a30:	ee60 9a01 	vmul.f32	s19, s0, s2
 8001a34:	edd0 0a12 	vldr	s1, [r0, #72]	@ 0x48
 8001a38:	ee20 0a20 	vmul.f32	s0, s0, s1
 8001a3c:	ed9f 1a69 	vldr	s2, [pc, #420]	@ 8001be4 <??DataTable5_6>
 8001a40:	ee20 1a01 	vmul.f32	s2, s0, s2
 8001a44:	ed90 0a1a 	vldr	s0, [r0, #104]	@ 0x68
 8001a48:	ee21 0a00 	vmul.f32	s0, s2, s0
 8001a4c:	ee00 9a08 	vmla.f32	s18, s0, s16
 8001a50:	ee28 0aa8 	vmul.f32	s0, s17, s17
 8001a54:	ee09 0a09 	vmla.f32	s0, s18, s18
 8001a58:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8001a5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a60:	db02      	blt.n	8001a68 <??SCC_SetPhaseVoltage_52>
 8001a62:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8001a66:	e001      	b.n	8001a6c <??SCC_SetPhaseVoltage_53>

08001a68 <??SCC_SetPhaseVoltage_52>:
 8001a68:	ed9f 8a60 	vldr	s16, [pc, #384]	@ 8001bec <??DataTable5_8>

08001a6c <??SCC_SetPhaseVoltage_53>:
 8001a6c:	ed9f 0a60 	vldr	s0, [pc, #384]	@ 8001bf0 <??DataTable5_9>
 8001a70:	ee28 0a00 	vmul.f32	s0, s16, s0
 8001a74:	eddf 0a5f 	vldr	s1, [pc, #380]	@ 8001bf4 <??DataTable5_10>
 8001a78:	ee60 0a20 	vmul.f32	s1, s0, s1
 8001a7c:	ee80 0aa9 	vdiv.f32	s0, s1, s19
 8001a80:	ed80 0a1b 	vstr	s0, [r0, #108]	@ 0x6c
 8001a84:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8001a86:	6ac8      	ldr	r0, [r1, #44]	@ 0x2c
 8001a88:	f7ff f863 	bl	8000b52 <OTT_SetKe>
 8001a8c:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001a8e:	edd0 0a18 	vldr	s1, [r0, #96]	@ 0x60
 8001a92:	ed9f 1a59 	vldr	s2, [pc, #356]	@ 8001bf8 <??DataTable5_11>
 8001a96:	ee89 0a88 	vdiv.f32	s0, s19, s16
 8001a9a:	ee80 1a81 	vdiv.f32	s2, s1, s2
 8001a9e:	ee20 0a01 	vmul.f32	s0, s0, s2
 8001aa2:	ed80 0a34 	vstr	s0, [r0, #208]	@ 0xd0
 8001aa6:	2102      	movs	r1, #2
 8001aa8:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001aaa:	f880 103f 	strb.w	r1, [r0, #63]	@ 0x3f
 8001aae:	b008      	add	sp, #32
 8001ab0:	4620      	mov	r0, r4
 8001ab2:	ecbd 8b04 	vpop	{d8-d9}
 8001ab6:	b001      	add	sp, #4
 8001ab8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001aba <??SCC_SetPhaseVoltage_54>:
 8001aba:	9800      	ldr	r0, [sp, #0]
 8001abc:	f008 fd14 	bl	800a4e8 <REMNG_Calc>
 8001ac0:	9800      	ldr	r0, [sp, #0]
 8001ac2:	f008 fd33 	bl	800a52c <REMNG_RampCompleted>
 8001ac6:	2800      	cmp	r0, #0
 8001ac8:	d079      	beq.n	8001bbe <??SCC_SetPhaseVoltage_11>
 8001aca:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001acc:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8001ace:	f008 fea9 	bl	800a824 <SPD_GetAvrgMecSpeedUnit>
 8001ad2:	ee00 0a10 	vmov	s0, r0
 8001ad6:	eeba 0a67 	vcvt.f32.s16	s0, s0, #1
 8001ada:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8001ade:	ee10 1a10 	vmov	r1, s0
 8001ae2:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001ae4:	b209      	sxth	r1, r1
 8001ae6:	f000 fedf 	bl	80028a8 <SCC_SetMinStarupSpeedSTO>
 8001aea:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8001aec:	2004      	movs	r0, #4
 8001aee:	f881 003f 	strb.w	r0, [r1, #63]	@ 0x3f
 8001af2:	b008      	add	sp, #32
 8001af4:	4620      	mov	r0, r4
 8001af6:	ecbd 8b04 	vpop	{d8-d9}
 8001afa:	b001      	add	sp, #4
 8001afc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001afe <??SCC_SetPhaseVoltage_55>:
 8001afe:	6a00      	ldr	r0, [r0, #32]
 8001b00:	f008 fe38 	bl	800a774 <RUC_Completed>
 8001b04:	b118      	cbz	r0, 8001b0e <??SCC_SetPhaseVoltage_56>
 8001b06:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8001b08:	2003      	movs	r0, #3
 8001b0a:	f881 003f 	strb.w	r0, [r1, #63]	@ 0x3f

08001b0e <??SCC_SetPhaseVoltage_56>:
 8001b0e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001b10:	68c0      	ldr	r0, [r0, #12]
 8001b12:	f002 ff77 	bl	8004a04 <MCI_GetSTMState>
 8001b16:	2806      	cmp	r0, #6
 8001b18:	d151      	bne.n	8001bbe <??SCC_SetPhaseVoltage_11>
 8001b1a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8001b1c:	2004      	movs	r0, #4
 8001b1e:	f881 003f 	strb.w	r0, [r1, #63]	@ 0x3f
 8001b22:	b008      	add	sp, #32
 8001b24:	4620      	mov	r0, r4
 8001b26:	ecbd 8b04 	vpop	{d8-d9}
 8001b2a:	b001      	add	sp, #4
 8001b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b2e <??SCC_SetPhaseVoltage_47>:
 8001b2e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001b30:	6800      	ldr	r0, [r0, #0]
 8001b32:	f004 f947 	bl	8005dc4 <PWMC_SwitchOffPWM>
 8001b36:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8001b38:	f881 4034 	strb.w	r4, [r1, #52]	@ 0x34
 8001b3c:	b008      	add	sp, #32
 8001b3e:	4620      	mov	r0, r4
 8001b40:	ecbd 8b04 	vpop	{d8-d9}
 8001b44:	b001      	add	sp, #4
 8001b46:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b48 <??SCC_SetPhaseVoltage_57>:
 8001b48:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8001b4a:	68ca      	ldr	r2, [r1, #12]
 8001b4c:	2008      	movs	r0, #8
 8001b4e:	77d0      	strb	r0, [r2, #31]
 8001b50:	4620      	mov	r0, r4
 8001b52:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8001b54:	f881 4034 	strb.w	r4, [r1, #52]	@ 0x34
 8001b58:	b008      	add	sp, #32
 8001b5a:	ecbd 8b04 	vpop	{d8-d9}
 8001b5e:	b001      	add	sp, #4
 8001b60:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b62 <??SCC_SetPhaseVoltage_58>:
 8001b62:	68c1      	ldr	r1, [r0, #12]
 8001b64:	7fc8      	ldrb	r0, [r1, #31]
 8001b66:	2814      	cmp	r0, #20
 8001b68:	d123      	bne.n	8001bb2 <??SCC_SetPhaseVoltage_4>
 8001b6a:	980c      	ldr	r0, [sp, #48]	@ 0x30

08001b6c <??SCC_SetPhaseVoltage_59>:
 8001b6c:	f8d0 10b8 	ldr.w	r1, [r0, #184]	@ 0xb8
 8001b70:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8001b74:	bf04      	itt	eq
 8001b76:	990c      	ldreq	r1, [sp, #48]	@ 0x30
 8001b78:	f8c1 40b8 	streq.w	r4, [r1, #184]	@ 0xb8
 8001b7c:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001b7e:	f000 fa55 	bl	800202c <SCC_GetIaCurrent>
 8001b82:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8001b84:	680a      	ldr	r2, [r1, #0]
 8001b86:	2003      	movs	r0, #3
 8001b88:	f882 007c 	strb.w	r0, [r2, #124]	@ 0x7c
 8001b8c:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001b8e:	f8d0 20b8 	ldr.w	r2, [r0, #184]	@ 0xb8
 8001b92:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8001b96:	ed80 0a50 	vstr	s0, [r0, #320]	@ 0x140
 8001b9a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8001b9c:	f8d1 00b8 	ldr.w	r0, [r1, #184]	@ 0xb8
 8001ba0:	1c40      	adds	r0, r0, #1
 8001ba2:	f8c1 00b8 	str.w	r0, [r1, #184]	@ 0xb8
 8001ba6:	b008      	add	sp, #32
 8001ba8:	4620      	mov	r0, r4
 8001baa:	ecbd 8b04 	vpop	{d8-d9}
 8001bae:	b001      	add	sp, #4
 8001bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001bb2 <??SCC_SetPhaseVoltage_4>:
 8001bb2:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001bb4:	9904      	ldr	r1, [sp, #16]
 8001bb6:	6800      	ldr	r0, [r0, #0]
 8001bb8:	f003 ff8a 	bl	8005ad0 <PWMC_SetPhaseVoltage>

08001bbc <??SCC_SetPhaseVoltage_15>:
 8001bbc:	4604      	mov	r4, r0

08001bbe <??SCC_SetPhaseVoltage_11>:
 8001bbe:	b008      	add	sp, #32
 8001bc0:	4620      	mov	r0, r4
 8001bc2:	ecbd 8b04 	vpop	{d8-d9}
 8001bc6:	b001      	add	sp, #4
 8001bc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001bcc <??DataTable5>:
 8001bcc:	cccd 3f4c                                   ..L?

08001bd0 <??DataTable5_1>:
 8001bd0:	0d30 2000                                   0.. 

08001bd4 <??DataTable5_2>:
 8001bd4:	0000 4780                                   ...G

08001bd8 <??DataTable5_3>:
 8001bd8:	0000 3780                                   ...7

08001bdc <??DataTable5_4>:
 8001bdc:	cd46 3793                                   F..7

08001be0 <??DataTable5_5>:
 8001be0:	0000 4270                                   ..pB

08001be4 <??DataTable5_6>:
 8001be4:	0fdb 40c9                                   ...@

08001be8 <??DataTable5_7>:
 8001be8:	0b88 2000                                   ... 

08001bec <??DataTable5_8>:
 8001bec:	0000 0000                                   ....

08001bf0 <??DataTable5_9>:
 8001bf0:	c471 3f9c                                   q..?

08001bf4 <??DataTable5_10>:
 8001bf4:	0000 447a                                   ..zD

08001bf8 <??DataTable5_11>:
 8001bf8:	b3d7 3fdd                                   ...?

08001bfc <??DataTable5_12>:
 8001bfc:	d090 0003                                   ....

08001c00 <??DataTable5_13>:
 8001c00:	6667 6666                                   gfff

08001c04 <SCC_MF>:
 8001c04:	b570      	push	{r4, r5, r6, lr}
 8001c06:	4604      	mov	r4, r0
 8001c08:	b086      	sub	sp, #24
 8001c0a:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 8001c0c:	68e0      	ldr	r0, [r4, #12]
 8001c0e:	f002 fef9 	bl	8004a04 <MCI_GetSTMState>
 8001c12:	f894 1034 	ldrb.w	r1, [r4, #52]	@ 0x34
 8001c16:	2906      	cmp	r1, #6
 8001c18:	d007      	beq.n	8001c2a <??SCC_MF_1>
 8001c1a:	f0c0 8188 	bcc.w	8001f2e <??SCC_MF_2>
 8001c1e:	2908      	cmp	r1, #8
 8001c20:	d062      	beq.n	8001ce8 <??SCC_MF_3>
 8001c22:	f0c0 8176 	bcc.w	8001f12 <??SCC_MF_4>
 8001c26:	b006      	add	sp, #24
 8001c28:	bd70      	pop	{r4, r5, r6, pc}

08001c2a <??SCC_MF_1>:
 8001c2a:	280b      	cmp	r0, #11
 8001c2c:	f200 817f 	bhi.w	8001f2e <??SCC_MF_2>
 8001c30:	e8df f010 	tbh	[pc, r0, lsl #1]

08001c34 <??SCC_MF_0>:
 8001c34:	000c 017d 017d 017d 004c 017d 017d 017d     ..}.}.}.L.}.}.}.
 8001c44:	017d 017d 017d 017a                         }.}.}.z.

08001c4c <??SCC_MF_5>:
 8001c4c:	4620      	mov	r0, r4
 8001c4e:	f000 fca5 	bl	800259c <SCC_DetectBemf>
 8001c52:	2800      	cmp	r0, #0
 8001c54:	f040 816b 	bne.w	8001f2e <??SCC_MF_2>
 8001c58:	ed94 0a11 	vldr	s0, [r4, #68]	@ 0x44
 8001c5c:	edd4 0a1a 	vldr	s1, [r4, #104]	@ 0x68
 8001c60:	ed94 1a19 	vldr	s2, [r4, #100]	@ 0x64
 8001c64:	68e0      	ldr	r0, [r4, #12]
 8001c66:	ee20 2a80 	vmul.f32	s4, s1, s0
 8001c6a:	ee81 2a02 	vdiv.f32	s4, s2, s4
 8001c6e:	eef7 2a00 	vmov.f32	s5, #112	@ 0x3f800000  1.0
 8001c72:	eef5 1a00 	vmov.f32	s3, #80	@ 0x3e800000  0.250
 8001c76:	ee72 2ac2 	vsub.f32	s5, s5, s4
 8001c7a:	ee22 2aa1 	vmul.f32	s4, s5, s3
 8001c7e:	eef7 2a00 	vmov.f32	s5, #112	@ 0x3f800000  1.0
 8001c82:	ee72 2ac2 	vsub.f32	s5, s5, s4
 8001c86:	eeb5 3a00 	vmov.f32	s6, #80	@ 0x3e800000  0.250
 8001c8a:	ee32 3a03 	vadd.f32	s6, s4, s6
 8001c8e:	eef8 3a00 	vmov.f32	s7, #128	@ 0xc0000000 -2.0
 8001c92:	ee73 3a23 	vadd.f32	s7, s6, s7
 8001c96:	eebd 3a00 	vmov.f32	s6, #208	@ 0xbe800000 -0.250
 8001c9a:	ee32 3a83 	vadd.f32	s6, s5, s6
 8001c9e:	ee02 3a21 	vmla.f32	s6, s4, s3
 8001ca2:	ee63 1a00 	vmul.f32	s3, s6, s0
 8001ca6:	ee81 1a20 	vdiv.f32	s2, s2, s1
 8001caa:	ee03 1a80 	vmla.f32	s2, s7, s0
 8001cae:	ee21 0a80 	vmul.f32	s0, s3, s0
 8001cb2:	ee20 0a20 	vmul.f32	s0, s0, s1
 8001cb6:	ed84 1a35 	vstr	s2, [r4, #212]	@ 0xd4
 8001cba:	ed84 0a36 	vstr	s0, [r4, #216]	@ 0xd8
 8001cbe:	f002 fea7 	bl	8004a10 <MCI_StartMotor>
 8001cc2:	6820      	ldr	r0, [r4, #0]
 8001cc4:	f004 f87e 	bl	8005dc4 <PWMC_SwitchOffPWM>
 8001cc8:	b006      	add	sp, #24
 8001cca:	bd70      	pop	{r4, r5, r6, pc}

08001ccc <??SCC_MF_6>:
 8001ccc:	2008      	movs	r0, #8
 8001cce:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
 8001cd2:	4620      	mov	r0, r4
 8001cd4:	f7ff f846 	bl	8000d64 <SCC_InitKeDetRevup>
 8001cd8:	2001      	movs	r0, #1
 8001cda:	f884 0128 	strb.w	r0, [r4, #296]	@ 0x128
 8001cde:	4620      	mov	r0, r4
 8001ce0:	f000 fac8 	bl	8002274 <SCC_KeDetectionInit>
 8001ce4:	b006      	add	sp, #24
 8001ce6:	bd70      	pop	{r4, r5, r6, pc}

08001ce8 <??SCC_MF_3>:
 8001ce8:	f894 003f 	ldrb.w	r0, [r4, #63]	@ 0x3f
 8001cec:	2802      	cmp	r0, #2
 8001cee:	f040 811e 	bne.w	8001f2e <??SCC_MF_2>
 8001cf2:	edd4 1a34 	vldr	s3, [r4, #208]	@ 0xd0
 8001cf6:	ed94 2a1b 	vldr	s4, [r4, #108]	@ 0x6c
 8001cfa:	ee21 2a82 	vmul.f32	s4, s3, s4
 8001cfe:	eddf 2ac9 	vldr	s5, [pc, #804]	@ 8002024 <??DataTable8>
 8001d02:	ee62 2a22 	vmul.f32	s5, s4, s5
 8001d06:	eddf 1ac8 	vldr	s3, [pc, #800]	@ 8002028 <??DataTable8_1>
 8001d0a:	f9b4 304c 	ldrsh.w	r3, [r4, #76]	@ 0x4c
 8001d0e:	ed94 2a14 	vldr	s4, [r4, #80]	@ 0x50
 8001d12:	ed94 3a1a 	vldr	s6, [r4, #104]	@ 0x68
 8001d16:	edd4 4a19 	vldr	s9, [r4, #100]	@ 0x64
 8001d1a:	ed94 5a35 	vldr	s10, [r4, #212]	@ 0xd4
 8001d1e:	eec2 1aa1 	vdiv.f32	s3, s5, s3
 8001d22:	edd4 2a11 	vldr	s5, [r4, #68]	@ 0x44
 8001d26:	ee63 3a02 	vmul.f32	s7, s6, s4
 8001d2a:	ee04 3a10 	vmov	s8, r3
 8001d2e:	ee23 3a22 	vmul.f32	s6, s6, s5
 8001d32:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8001d36:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 8001d3a:	ee84 3a83 	vdiv.f32	s6, s9, s6
 8001d3e:	ee84 4a23 	vdiv.f32	s8, s8, s7
 8001d42:	eec5 4a22 	vdiv.f32	s9, s10, s5
 8001d46:	ed9f 0ac6 	vldr	s0, [pc, #792]	@ 8002060 <??DataTable9>
 8001d4a:	eddf 0ac5 	vldr	s1, [pc, #788]	@ 8002060 <??DataTable9>
 8001d4e:	ed9f 1ac4 	vldr	s2, [pc, #784]	@ 8002060 <??DataTable9>
 8001d52:	2200      	movs	r2, #0
 8001d54:	2100      	movs	r1, #0
 8001d56:	200e      	movs	r0, #14
 8001d58:	eec1 3aa3 	vdiv.f32	s7, s3, s7
 8001d5c:	ed9f 5ac1 	vldr	s10, [pc, #772]	@ 8002064 <??DataTable9_1>
 8001d60:	eddf 5ac1 	vldr	s11, [pc, #772]	@ 8002068 <??DataTable9_2>
 8001d64:	f05f 0301 	movs.w	r3, #1

08001d68 <??SCC_MF_7>:
 8001d68:	fa03 f600 	lsl.w	r6, r3, r0
 8001d6c:	ee06 6a10 	vmov	s12, r6
 8001d70:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8001d74:	ee63 6a06 	vmul.f32	s13, s6, s12
 8001d78:	eef4 6a65 	vcmp.f32	s13, s11
 8001d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d80:	da06      	bge.n	8001d90 <??SCC_MF_8>
 8001d82:	ee24 1a86 	vmul.f32	s2, s9, s12
 8001d86:	eeb4 1a65 	vcmp.f32	s2, s11
 8001d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d8e:	d405      	bmi.n	8001d9c <??SCC_MF_9>

08001d90 <??SCC_MF_8>:
 8001d90:	1e40      	subs	r0, r0, #1
 8001d92:	b246      	sxtb	r6, r0
 8001d94:	2e00      	cmp	r6, #0
 8001d96:	dce7      	bgt.n	8001d68 <??SCC_MF_7>
 8001d98:	e01c      	b.n	8001dd4 <??SCC_MF_10>
 8001d9a:	bf00      	nop

08001d9c <??SCC_MF_9>:
 8001d9c:	eeb4 1a45 	vcmp.f32	s2, s10
 8001da0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001da4:	d4f4      	bmi.n	8001d90 <??SCC_MF_8>
 8001da6:	ee23 0a86 	vmul.f32	s0, s7, s12
 8001daa:	eeb4 0a65 	vcmp.f32	s0, s11
 8001dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001db2:	bfbe      	ittt	lt
 8001db4:	ee64 0a06 	vmullt.f32	s1, s8, s12
 8001db8:	eef4 0a65 	vcmplt.f32	s1, s11
 8001dbc:	eef1 fa10 	vmrslt	APSR_nzcv, fpscr
 8001dc0:	dae6      	bge.n	8001d90 <??SCC_MF_8>
 8001dc2:	b240      	sxtb	r0, r0
 8001dc4:	ee03 0a10 	vmov	s6, r0
 8001dc8:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8001dcc:	eebd 3ac3 	vcvt.s32.f32	s6, s6
 8001dd0:	ee13 2a10 	vmov	r2, s6

08001dd4 <??SCC_MF_10>:
 8001dd4:	ed94 3a36 	vldr	s6, [r4, #216]	@ 0xd8
 8001dd8:	ee23 2a02 	vmul.f32	s4, s6, s4
 8001ddc:	eec2 1a21 	vdiv.f32	s3, s4, s3
 8001de0:	f05f 000e 	movs.w	r0, #14
 8001de4:	eec1 1aa2 	vdiv.f32	s3, s3, s5

08001de8 <??SCC_MF_11>:
 8001de8:	fa03 f600 	lsl.w	r6, r3, r0
 8001dec:	ee02 6a10 	vmov	s4, r6
 8001df0:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 8001df4:	ee61 2a82 	vmul.f32	s5, s3, s4
 8001df8:	eef4 2a65 	vcmp.f32	s5, s11
 8001dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e00:	d404      	bmi.n	8001e0c <??SCC_MF_12>

08001e02 <??SCC_MF_13>:
 8001e02:	1e40      	subs	r0, r0, #1
 8001e04:	b246      	sxtb	r6, r0
 8001e06:	2e00      	cmp	r6, #0
 8001e08:	dcee      	bgt.n	8001de8 <??SCC_MF_11>
 8001e0a:	e00d      	b.n	8001e28 <??SCC_MF_14>

08001e0c <??SCC_MF_12>:
 8001e0c:	eef4 2a45 	vcmp.f32	s5, s10
 8001e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e14:	d4f5      	bmi.n	8001e02 <??SCC_MF_13>
 8001e16:	b240      	sxtb	r0, r0
 8001e18:	ee01 0a90 	vmov	s3, r0
 8001e1c:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8001e20:	eefd 1ae1 	vcvt.s32.f32	s3, s3
 8001e24:	ee11 1a90 	vmov	r1, s3

08001e28 <??SCC_MF_14>:
 8001e28:	eefd 1ae6 	vcvt.s32.f32	s3, s13
 8001e2c:	ee11 0a90 	vmov	r0, s3
 8001e30:	f8ad 0000 	strh.w	r0, [sp]
 8001e34:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8001e38:	eebd 1ac1 	vcvt.s32.f32	s2, s2
 8001e3c:	ee10 0a10 	vmov	r0, s0
 8001e40:	ee11 3a10 	vmov	r3, s2
 8001e44:	f8ad 0004 	strh.w	r0, [sp, #4]
 8001e48:	f8ad 3002 	strh.w	r3, [sp, #2]
 8001e4c:	eebd 0ae0 	vcvt.s32.f32	s0, s1
 8001e50:	eebd 1ae2 	vcvt.s32.f32	s2, s5
 8001e54:	ee10 0a10 	vmov	r0, s0
 8001e58:	ee11 3a10 	vmov	r3, s2
 8001e5c:	f8ad 0008 	strh.w	r0, [sp, #8]
 8001e60:	f8ad 3006 	strh.w	r3, [sp, #6]
 8001e64:	eebd 0ac2 	vcvt.s32.f32	s0, s4
 8001e68:	eefd 0ac6 	vcvt.s32.f32	s1, s12
 8001e6c:	ee10 0a10 	vmov	r0, s0
 8001e70:	ee10 3a90 	vmov	r3, s1
 8001e74:	f8ad 000c 	strh.w	r0, [sp, #12]
 8001e78:	f8ad 300a 	strh.w	r3, [sp, #10]
 8001e7c:	f8ad 200e 	strh.w	r2, [sp, #14]
 8001e80:	f8ad 1010 	strh.w	r1, [sp, #16]
 8001e84:	4669      	mov	r1, sp
 8001e86:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8001e88:	f000 f854 	bl	8001f34 <STO_ReInit>
 8001e8c:	ed94 1a34 	vldr	s2, [r4, #208]	@ 0xd0
 8001e90:	ed94 0a11 	vldr	s0, [r4, #68]	@ 0x44
 8001e94:	edd4 0a12 	vldr	s1, [r4, #72]	@ 0x48
 8001e98:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8001e9a:	eddf 1abb 	vldr	s3, [pc, #748]	@ 8002188 <??DataTable10>
 8001e9e:	ee61 1a21 	vmul.f32	s3, s2, s3
 8001ea2:	ed9f 3aba 	vldr	s6, [pc, #744]	@ 800218c <??DataTable10_1>
 8001ea6:	ee61 1aa0 	vmul.f32	s3, s3, s1
 8001eaa:	ee20 2a00 	vmul.f32	s4, s0, s0
 8001eae:	ee21 1a03 	vmul.f32	s2, s2, s6
 8001eb2:	eec1 1a82 	vdiv.f32	s3, s3, s4
 8001eb6:	eef5 2a00 	vmov.f32	s5, #80	@ 0x3e800000  0.250
 8001eba:	ee61 0a20 	vmul.f32	s1, s2, s1
 8001ebe:	ee61 2aa2 	vmul.f32	s5, s3, s5
 8001ec2:	ee80 0a80 	vdiv.f32	s0, s1, s0
 8001ec6:	eefd 2ae2 	vcvt.s32.f32	s5, s5
 8001eca:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8001ece:	ee12 2a90 	vmov	r2, s5
 8001ed2:	ee10 1a10 	vmov	r1, s0
 8001ed6:	b212      	sxth	r2, r2
 8001ed8:	b209      	sxth	r1, r1
 8001eda:	f009 f86b 	bl	800afb4 <STO_SetPLLGains>
 8001ede:	6920      	ldr	r0, [r4, #16]
 8001ee0:	f008 fc9c 	bl	800a81c <SPD_GetElAngle>
 8001ee4:	4606      	mov	r6, r0
 8001ee6:	6920      	ldr	r0, [r4, #16]
 8001ee8:	f008 fca0 	bl	800a82c <SPD_GetElSpeedDpp>
 8001eec:	4601      	mov	r1, r0
 8001eee:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8001ef0:	4632      	mov	r2, r6
 8001ef2:	f009 f873 	bl	800afdc <STO_SetPLL>
 8001ef6:	4628      	mov	r0, r5
 8001ef8:	f008 faee 	bl	800a4d8 <REMNG_Init>
 8001efc:	22fa      	movs	r2, #250	@ 0xfa
 8001efe:	f64e 2160 	movw	r1, #60000	@ 0xea60
 8001f02:	4628      	mov	r0, r5
 8001f04:	f008 fb38 	bl	800a578 <REMNG_ExecRamp>
 8001f08:	2003      	movs	r0, #3
 8001f0a:	f884 003f 	strb.w	r0, [r4, #63]	@ 0x3f
 8001f0e:	b006      	add	sp, #24
 8001f10:	bd70      	pop	{r4, r5, r6, pc}

08001f12 <??SCC_MF_4>:
 8001f12:	b938      	cbnz	r0, 8001f24 <??SCC_MF_15>
 8001f14:	68e0      	ldr	r0, [r4, #12]
 8001f16:	f002 fd7b 	bl	8004a10 <MCI_StartMotor>
 8001f1a:	2000      	movs	r0, #0
 8001f1c:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
 8001f20:	b006      	add	sp, #24
 8001f22:	bd70      	pop	{r4, r5, r6, pc}

08001f24 <??SCC_MF_15>:
 8001f24:	280b      	cmp	r0, #11
 8001f26:	d102      	bne.n	8001f2e <??SCC_MF_2>

08001f28 <??SCC_MF_16>:
 8001f28:	68e0      	ldr	r0, [r4, #12]
 8001f2a:	f002 fdbd 	bl	8004aa8 <MCI_FaultAcknowledged>

08001f2e <??SCC_MF_2>:
 8001f2e:	b006      	add	sp, #24
 8001f30:	bd70      	pop	{r4, r5, r6, pc}
	...

08001f34 <STO_ReInit>:
 8001f34:	b430      	push	{r4, r5}
 8001f36:	4602      	mov	r2, r0
 8001f38:	8808      	ldrh	r0, [r1, #0]
 8001f3a:	f8df 5b74 	ldr.w	r5, [pc, #2932]	@ 8002ab0 <??DataTable22_7>
 8001f3e:	8410      	strh	r0, [r2, #32]
 8001f40:	2400      	movs	r4, #0
 8001f42:	884b      	ldrh	r3, [r1, #2]
 8001f44:	8453      	strh	r3, [r2, #34]	@ 0x22
 8001f46:	8888      	ldrh	r0, [r1, #4]
 8001f48:	8490      	strh	r0, [r2, #36]	@ 0x24
 8001f4a:	88cb      	ldrh	r3, [r1, #6]
 8001f4c:	84d3      	strh	r3, [r2, #38]	@ 0x26
 8001f4e:	8908      	ldrh	r0, [r1, #8]
 8001f50:	8510      	strh	r0, [r2, #40]	@ 0x28
 8001f52:	894b      	ldrh	r3, [r1, #10]
 8001f54:	8593      	strh	r3, [r2, #44]	@ 0x2c
 8001f56:	8988      	ldrh	r0, [r1, #12]
 8001f58:	85d0      	strh	r0, [r2, #46]	@ 0x2e
 8001f5a:	89cb      	ldrh	r3, [r1, #14]
 8001f5c:	f8a2 311c 	strh.w	r3, [r2, #284]	@ 0x11c
 8001f60:	2301      	movs	r3, #1
 8001f62:	8a08      	ldrh	r0, [r1, #16]
 8001f64:	f8a2 011e 	strh.w	r0, [r2, #286]	@ 0x11e
 8001f68:	f8a2 4032 	strh.w	r4, [r2, #50]	@ 0x32
 8001f6c:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 8001f70:	fb95 f0f0 	sdiv	r0, r5, r0
 8001f74:	b200      	sxth	r0, r0
 8001f76:	b1e8      	cbz	r0, 8001fb4 <??STO_ReInit_0>

08001f78 <??STO_ReInit_1>:
 8001f78:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8001f7c:	03c0      	lsls	r0, r0, #15
 8001f7e:	1400      	asrs	r0, r0, #16
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	1c64      	adds	r4, r4, #1
 8001f84:	b1b0      	cbz	r0, 8001fb4 <??STO_ReInit_0>
 8001f86:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8001f8a:	03c0      	lsls	r0, r0, #15
 8001f8c:	1400      	asrs	r0, r0, #16
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	1c64      	adds	r4, r4, #1
 8001f92:	b178      	cbz	r0, 8001fb4 <??STO_ReInit_0>
 8001f94:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8001f98:	03c0      	lsls	r0, r0, #15
 8001f9a:	1400      	asrs	r0, r0, #16
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	1c64      	adds	r4, r4, #1
 8001fa0:	2800      	cmp	r0, #0
 8001fa2:	d007      	beq.n	8001fb4 <??STO_ReInit_0>
 8001fa4:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8001fa8:	03c0      	lsls	r0, r0, #15
 8001faa:	1400      	asrs	r0, r0, #16
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	1c64      	adds	r4, r4, #1
 8001fb0:	2800      	cmp	r0, #0
 8001fb2:	d1e1      	bne.n	8001f78 <??STO_ReInit_1>

08001fb4 <??STO_ReInit_0>:
 8001fb4:	8654      	strh	r4, [r2, #50]	@ 0x32
 8001fb6:	8613      	strh	r3, [r2, #48]	@ 0x30
 8001fb8:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 8001fbc:	f9b2 1030 	ldrsh.w	r1, [r2, #48]	@ 0x30
 8001fc0:	f8df 3af0 	ldr.w	r3, [pc, #2800]	@ 8002ab4 <??DataTable22_8>
 8001fc4:	fb10 f101 	smulbb	r1, r0, r1
 8001fc8:	fb81 4303 	smull	r4, r3, r1, r3
 8001fcc:	121b      	asrs	r3, r3, #8
 8001fce:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8001fd2:	8553      	strh	r3, [r2, #42]	@ 0x2a
 8001fd4:	bc30      	pop	{r4, r5}
 8001fd6:	4770      	bx	lr

08001fd8 <SCC_GetCurrent>:
 8001fd8:	f8d0 1548 	ldr.w	r1, [r0, #1352]	@ 0x548
 8001fdc:	6880      	ldr	r0, [r0, #8]
 8001fde:	ed91 0a06 	vldr	s0, [r1, #24]
 8001fe2:	ed91 1a07 	vldr	s2, [r1, #28]
 8001fe6:	eddf 0aa2 	vldr	s1, [pc, #648]	@ 8002270 <??DataTable11>
 8001fea:	ee60 0a20 	vmul.f32	s1, s0, s1
 8001fee:	ee20 1a81 	vmul.f32	s2, s1, s2
 8001ff2:	ed91 0a13 	vldr	s0, [r1, #76]	@ 0x4c
 8001ff6:	f9b0 1000 	ldrsh.w	r1, [r0]
 8001ffa:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 8001ffe:	ee00 1a90 	vmov	s1, r1
 8002002:	ee80 0a01 	vdiv.f32	s0, s0, s2
 8002006:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 800200a:	ee01 0a10 	vmov	s2, r0
 800200e:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 8002012:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8002016:	ee41 0a40 	vmls.f32	s1, s2, s0
 800201a:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 800201e:	ee20 0a80 	vmul.f32	s0, s1, s0
 8002022:	4770      	bx	lr

08002024 <??DataTable8>:
 8002024:	0481 3fb5                                   ...?

08002028 <??DataTable8_1>:
 8002028:	8000 44d8                                   ...D

0800202c <SCC_GetIaCurrent>:
 800202c:	f8d0 1548 	ldr.w	r1, [r0, #1352]	@ 0x548
 8002030:	6880      	ldr	r0, [r0, #8]
 8002032:	edd1 0a06 	vldr	s1, [r1, #24]
 8002036:	f9b0 2000 	ldrsh.w	r2, [r0]
 800203a:	edd1 1a07 	vldr	s3, [r1, #28]
 800203e:	ed9f 1a8c 	vldr	s2, [pc, #560]	@ 8002270 <??DataTable11>
 8002042:	ee20 1a81 	vmul.f32	s2, s1, s2
 8002046:	ee00 2a10 	vmov	s0, r2
 800204a:	ee61 1a21 	vmul.f32	s3, s2, s3
 800204e:	edd1 0a13 	vldr	s1, [r1, #76]	@ 0x4c
 8002052:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8002056:	eec0 0aa1 	vdiv.f32	s1, s1, s3
 800205a:	ee20 0a60 	vnmul.f32	s0, s0, s1
 800205e:	4770      	bx	lr

08002060 <??DataTable9>:
 8002060:	0000 0000                                   ....

08002064 <??DataTable9_1>:
 8002064:	fe00 c6ff                                   ....

08002068 <??DataTable9_2>:
 8002068:	fe01 46ff                                   ...F

0800206c <??DataTable9_3>:
 800206c:	cccd 3dcc                                   ...=

08002070 <SCC_GetSteps>:
 8002070:	2005      	movs	r0, #5
 8002072:	4770      	bx	lr

08002074 <SCC_GetState>:
 8002074:	b530      	push	{r4, r5, lr}
 8002076:	4604      	mov	r4, r0
 8002078:	b081      	sub	sp, #4
 800207a:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800207c:	f7fe fc84 	bl	8000988 <OTT_IsSpeedPITuned>
 8002080:	2500      	movs	r5, #0
 8002082:	2801      	cmp	r0, #1
 8002084:	bf08      	it	eq
 8002086:	f884 5138 	strbeq.w	r5, [r4, #312]	@ 0x138
 800208a:	68e0      	ldr	r0, [r4, #12]
 800208c:	f002 fcba 	bl	8004a04 <MCI_GetSTMState>
 8002090:	280a      	cmp	r0, #10
 8002092:	d106      	bne.n	80020a2 <??SCC_GetState_1>
 8002094:	f884 5138 	strb.w	r5, [r4, #312]	@ 0x138
 8002098:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
 800209c:	4628      	mov	r0, r5
 800209e:	b001      	add	sp, #4
 80020a0:	bd30      	pop	{r4, r5, pc}

080020a2 <??SCC_GetState_1>:
 80020a2:	f894 1034 	ldrb.w	r1, [r4, #52]	@ 0x34
 80020a6:	290d      	cmp	r1, #13
 80020a8:	d820      	bhi.n	80020ec <??SCC_GetState_2>
 80020aa:	e8df f001 	tbb	[pc, r1]

080020ae <??SCC_GetState_0>:
 80020ae:	0a07 120e 1212 1616 0716 1f1a 1e1f          ..............

080020bc <??SCC_GetState_3>:
 80020bc:	f894 0138 	ldrb.w	r0, [r4, #312]	@ 0x138
 80020c0:	b1a0      	cbz	r0, 80020ec <??SCC_GetState_2>

080020c2 <??SCC_GetState_4>:
 80020c2:	2501      	movs	r5, #1
 80020c4:	4628      	mov	r0, r5
 80020c6:	b001      	add	sp, #4
 80020c8:	bd30      	pop	{r4, r5, pc}

080020ca <??SCC_GetState_5>:
 80020ca:	2502      	movs	r5, #2
 80020cc:	4628      	mov	r0, r5
 80020ce:	b001      	add	sp, #4
 80020d0:	bd30      	pop	{r4, r5, pc}

080020d2 <??SCC_GetState_6>:
 80020d2:	2503      	movs	r5, #3
 80020d4:	4628      	mov	r0, r5
 80020d6:	b001      	add	sp, #4
 80020d8:	bd30      	pop	{r4, r5, pc}

080020da <??SCC_GetState_7>:
 80020da:	2504      	movs	r5, #4
 80020dc:	4628      	mov	r0, r5
 80020de:	b001      	add	sp, #4
 80020e0:	bd30      	pop	{r4, r5, pc}

080020e2 <??SCC_GetState_8>:
 80020e2:	250e      	movs	r5, #14
 80020e4:	4628      	mov	r0, r5
 80020e6:	b001      	add	sp, #4
 80020e8:	bd30      	pop	{r4, r5, pc}

080020ea <??SCC_GetState_9>:
 80020ea:	250f      	movs	r5, #15

080020ec <??SCC_GetState_2>:
 80020ec:	4628      	mov	r0, r5
 80020ee:	b001      	add	sp, #4
 80020f0:	bd30      	pop	{r4, r5, pc}

080020f2 <SCC_GetRs>:
 80020f2:	ed90 0a19 	vldr	s0, [r0, #100]	@ 0x64
 80020f6:	f002 bead 	b.w	8004e54 <MCM_floatToIntBit>

080020fa <SCC_GetLs>:
 80020fa:	ed90 0a1a 	vldr	s0, [r0, #104]	@ 0x68
 80020fe:	f002 bea9 	b.w	8004e54 <MCM_floatToIntBit>

08002102 <SCC_GetKe>:
 8002102:	ed90 0a1b 	vldr	s0, [r0, #108]	@ 0x6c
 8002106:	f002 bea5 	b.w	8004e54 <MCM_floatToIntBit>

0800210a <SCC_GetVbus>:
 800210a:	ed90 0a18 	vldr	s0, [r0, #96]	@ 0x60
 800210e:	f002 bea1 	b.w	8004e54 <MCM_floatToIntBit>

08002112 <SCC_GetEstNominalSpeed>:
 8002112:	ed90 0a34 	vldr	s0, [r0, #208]	@ 0xd0
 8002116:	f002 be9d 	b.w	8004e54 <MCM_floatToIntBit>

0800211a <SCC_ForceProfile>:
 800211a:	f890 103f 	ldrb.w	r1, [r0, #63]	@ 0x3f
 800211e:	2904      	cmp	r1, #4
 8002120:	bf1c      	itt	ne
 8002122:	f890 1034 	ldrbne.w	r1, [r0, #52]	@ 0x34
 8002126:	290a      	cmpne	r1, #10
 8002128:	d122      	bne.n	8002170 <??SCC_ForceProfile_0>
 800212a:	2200      	movs	r2, #0
 800212c:	f880 203f 	strb.w	r2, [r0, #63]	@ 0x3f
 8002130:	f880 20f0 	strb.w	r2, [r0, #240]	@ 0xf0
 8002134:	f8a0 211c 	strh.w	r2, [r0, #284]	@ 0x11c
 8002138:	f880 211e 	strb.w	r2, [r0, #286]	@ 0x11e
 800213c:	f8a0 2120 	strh.w	r2, [r0, #288]	@ 0x120
 8002140:	f8c0 2124 	str.w	r2, [r0, #292]	@ 0x124
 8002144:	f8c0 213c 	str.w	r2, [r0, #316]	@ 0x13c
 8002148:	f880 2128 	strb.w	r2, [r0, #296]	@ 0x128
 800214c:	f44f 7cfa 	mov.w	ip, #500	@ 0x1f4
 8002150:	f8d0 20e4 	ldr.w	r2, [r0, #228]	@ 0xe4
 8002154:	f8df 1960 	ldr.w	r1, [pc, #2400]	@ 8002ab8 <??DataTable22_9>
 8002158:	fb82 3101 	smull	r3, r1, r2, r1
 800215c:	1089      	asrs	r1, r1, #2
 800215e:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8002162:	f8c0 10ec 	str.w	r1, [r0, #236]	@ 0xec
 8002166:	f8c0 c0ec 	str.w	ip, [r0, #236]	@ 0xec
 800216a:	2100      	movs	r1, #0
 800216c:	f880 1034 	strb.w	r1, [r0, #52]	@ 0x34

08002170 <??SCC_ForceProfile_0>:
 8002170:	2201      	movs	r2, #1
 8002172:	f880 2138 	strb.w	r2, [r0, #312]	@ 0x138
 8002176:	2100      	movs	r1, #0
 8002178:	f8df 041c 	ldr.w	r0, [pc, #1052]	@ 8002598 <??DataTable13_3>
 800217c:	8001      	strh	r1, [r0, #0]
 800217e:	2200      	movs	r2, #0
 8002180:	8042      	strh	r2, [r0, #2]
 8002182:	2300      	movs	r3, #0
 8002184:	8083      	strh	r3, [r0, #4]
 8002186:	4770      	bx	lr

08002188 <??DataTable10>:
 8002188:	edb0 49b7                                   ...I

0800218c <??DataTable10_1>:
 800218c:	0000 4405                                   ...D

08002190 <SCC_StopProfile>:
 8002190:	b510      	push	{r4, lr}
 8002192:	4604      	mov	r4, r0
 8002194:	6820      	ldr	r0, [r4, #0]
 8002196:	f003 fe15 	bl	8005dc4 <PWMC_SwitchOffPWM>
 800219a:	2100      	movs	r1, #0
 800219c:	f884 1034 	strb.w	r1, [r4, #52]	@ 0x34
 80021a0:	f884 1138 	strb.w	r1, [r4, #312]	@ 0x138
 80021a4:	bd10      	pop	{r4, pc}
	...

080021a8 <SCC_CurrCtrl>:
 80021a8:	f8d0 2548 	ldr.w	r2, [r0, #1352]	@ 0x548
 80021ac:	edd2 0a06 	vldr	s1, [r2, #24]
 80021b0:	edd2 1a07 	vldr	s3, [r2, #28]
 80021b4:	2100      	movs	r1, #0
 80021b6:	ed9f 1a2e 	vldr	s2, [pc, #184]	@ 8002270 <??DataTable11>
 80021ba:	ee20 1a81 	vmul.f32	s2, s1, s2
 80021be:	ee61 1a21 	vmul.f32	s3, s2, s3
 80021c2:	edd2 0a13 	vldr	s1, [r2, #76]	@ 0x4c
 80021c6:	6882      	ldr	r2, [r0, #8]
 80021c8:	5e53      	ldrsh	r3, [r2, r1]
 80021ca:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80021ce:	ee01 3a10 	vmov	s2, r3
 80021d2:	eec0 0aa1 	vdiv.f32	s1, s1, s3
 80021d6:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 80021da:	ee01 2a90 	vmov	s3, r2
 80021de:	ee21 1a60 	vnmul.f32	s2, s2, s1
 80021e2:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 80021e6:	ee01 1ae0 	vmls.f32	s2, s3, s1
 80021ea:	eef6 0a00 	vmov.f32	s1, #96	@ 0x3f000000  0.5
 80021ee:	ee61 0a20 	vmul.f32	s1, s2, s1
 80021f2:	eef4 0a40 	vcmp.f32	s1, s0
 80021f6:	8f82      	ldrh	r2, [r0, #60]	@ 0x3c
 80021f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021fc:	db18      	blt.n	8002230 <??SCC_CurrCtrl_0>
 80021fe:	b10a      	cbz	r2, 8002204 <??SCC_CurrCtrl_1>
 8002200:	1e52      	subs	r2, r2, #1
 8002202:	8782      	strh	r2, [r0, #60]	@ 0x3c

08002204 <??SCC_CurrCtrl_1>:
 8002204:	ee30 0ac0 	vsub.f32	s0, s1, s0
 8002208:	eddf 0aca 	vldr	s1, [pc, #808]	@ 8002534 <??DataTable12>
 800220c:	eeb4 0a60 	vcmp.f32	s0, s1
 8002210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002214:	d41b      	bmi.n	800224e <??SCC_CurrCtrl_2>

08002216 <??SCC_CurrCtrl_3>:
 8002216:	f890 20dc 	ldrb.w	r2, [r0, #220]	@ 0xdc
 800221a:	1e52      	subs	r2, r2, #1
 800221c:	b253      	sxtb	r3, r2
 800221e:	f113 0f13 	cmn.w	r3, #19
 8002222:	da1c      	bge.n	800225e <??SCC_CurrCtrl_4>
 8002224:	f06f 0213 	mvn.w	r2, #19
 8002228:	f880 20dc 	strb.w	r2, [r0, #220]	@ 0xdc
 800222c:	4608      	mov	r0, r1
 800222e:	4770      	bx	lr

08002230 <??SCC_CurrCtrl_0>:
 8002230:	f64e 2c60 	movw	ip, #60000	@ 0xea60
 8002234:	4562      	cmp	r2, ip
 8002236:	bfbc      	itt	lt
 8002238:	1c52      	addlt	r2, r2, #1
 800223a:	8782      	strhlt	r2, [r0, #60]	@ 0x3c
 800223c:	ee30 0a60 	vsub.f32	s0, s0, s1
 8002240:	eddf 0abc 	vldr	s1, [pc, #752]	@ 8002534 <??DataTable12>
 8002244:	eeb4 0a60 	vcmp.f32	s0, s1
 8002248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800224c:	d5e3      	bpl.n	8002216 <??SCC_CurrCtrl_3>

0800224e <??SCC_CurrCtrl_2>:
 800224e:	f890 20dc 	ldrb.w	r2, [r0, #220]	@ 0xdc
 8002252:	1c52      	adds	r2, r2, #1
 8002254:	b253      	sxtb	r3, r2
 8002256:	2b14      	cmp	r3, #20
 8002258:	bfa8      	it	ge
 800225a:	2214      	movge	r2, #20
 800225c:	da02      	bge.n	8002264 <??SCC_CurrCtrl_5>

0800225e <??SCC_CurrCtrl_4>:
 800225e:	b253      	sxtb	r3, r2
 8002260:	2b00      	cmp	r3, #0
 8002262:	d400      	bmi.n	8002266 <??SCC_CurrCtrl_6>

08002264 <??SCC_CurrCtrl_5>:
 8002264:	2101      	movs	r1, #1

08002266 <??SCC_CurrCtrl_6>:
 8002266:	f880 20dc 	strb.w	r2, [r0, #220]	@ 0xdc
 800226a:	4608      	mov	r0, r1
 800226c:	4770      	bx	lr
	...

08002270 <??DataTable11>:
 8002270:	0000 4780                                   ...G

08002274 <SCC_KeDetectionInit>:
 8002274:	2100      	movs	r1, #0
 8002276:	f8c0 10bc 	str.w	r1, [r0, #188]	@ 0xbc
 800227a:	f8c0 10c0 	str.w	r1, [r0, #192]	@ 0xc0
 800227e:	f8c0 10c4 	str.w	r1, [r0, #196]	@ 0xc4
 8002282:	f8c0 10c8 	str.w	r1, [r0, #200]	@ 0xc8
 8002286:	f8c0 10cc 	str.w	r1, [r0, #204]	@ 0xcc
 800228a:	4770      	bx	lr

0800228c <SCC_KeDetection>:
 800228c:	ed9f 1aaa 	vldr	s2, [pc, #680]	@ 8002538 <??DataTable12_1>
 8002290:	b570      	push	{r4, r5, r6, lr}
 8002292:	4604      	mov	r4, r0
 8002294:	2501      	movs	r5, #1
 8002296:	ed2d 8b06 	vpush	{d8-d10}
 800229a:	f8d4 0548 	ldr.w	r0, [r4, #1352]	@ 0x548
 800229e:	68a1      	ldr	r1, [r4, #8]
 80022a0:	edd0 0a06 	vldr	s1, [r0, #24]
 80022a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80022a8:	edd0 1a07 	vldr	s3, [r0, #28]
 80022ac:	ee20 1a81 	vmul.f32	s2, s1, s2
 80022b0:	ee00 2a10 	vmov	s0, r2
 80022b4:	ee61 1a21 	vmul.f32	s3, s2, s3
 80022b8:	edd0 0a13 	vldr	s1, [r0, #76]	@ 0x4c
 80022bc:	ed94 1a2f 	vldr	s2, [r4, #188]	@ 0xbc
 80022c0:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80022c4:	eec0 0aa1 	vdiv.f32	s1, s1, s3
 80022c8:	ee00 1a20 	vmla.f32	s2, s0, s1
 80022cc:	6860      	ldr	r0, [r4, #4]
 80022ce:	ed84 1a2f 	vstr	s2, [r4, #188]	@ 0xbc
 80022d2:	f007 f8c1 	bl	8009458 <VBS_GetAvBusVoltage_d>
 80022d6:	ee00 0a10 	vmov	s0, r0
 80022da:	6860      	ldr	r0, [r4, #4]
 80022dc:	edd4 1a30 	vldr	s3, [r4, #192]	@ 0xc0
 80022e0:	8841      	ldrh	r1, [r0, #2]
 80022e2:	68a0      	ldr	r0, [r4, #8]
 80022e4:	ee00 1a90 	vmov	s1, r1
 80022e8:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 80022ec:	eef8 0a60 	vcvt.f32.u32	s1, s1
 80022f0:	ee20 0a20 	vmul.f32	s0, s0, s1
 80022f4:	ed9f 1aa5 	vldr	s2, [pc, #660]	@ 800258c <??DataTable13>
 80022f8:	ee20 0a01 	vmul.f32	s0, s0, s2
 80022fc:	ed84 0a18 	vstr	s0, [r4, #96]	@ 0x60
 8002300:	eddf 0aa3 	vldr	s1, [pc, #652]	@ 8002590 <??DataTable13_1>
 8002304:	f9b0 1016 	ldrsh.w	r1, [r0, #22]
 8002308:	68a0      	ldr	r0, [r4, #8]
 800230a:	ee01 1a10 	vmov	s2, r1
 800230e:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8002312:	ee21 0a00 	vmul.f32	s0, s2, s0
 8002316:	ee40 1a20 	vmla.f32	s3, s0, s1
 800231a:	edc4 1a30 	vstr	s3, [r4, #192]	@ 0xc0
 800231e:	eddf 8a9d 	vldr	s17, [pc, #628]	@ 8002594 <??DataTable13_2>
 8002322:	f9b0 1018 	ldrsh.w	r1, [r0, #24]
 8002326:	ed94 1a18 	vldr	s2, [r4, #96]	@ 0x60
 800232a:	6920      	ldr	r0, [r4, #16]
 800232c:	ee00 1a10 	vmov	s0, r1
 8002330:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8002334:	ee20 1a01 	vmul.f32	s2, s0, s2
 8002338:	ed94 0a31 	vldr	s0, [r4, #196]	@ 0xc4
 800233c:	ee01 0a20 	vmla.f32	s0, s2, s1
 8002340:	ed84 0a31 	vstr	s0, [r4, #196]	@ 0xc4
 8002344:	f008 fa6e 	bl	800a824 <SPD_GetAvrgMecSpeedUnit>
 8002348:	f246 6167 	movw	r1, #26215	@ 0x6667
 800234c:	fb10 f101 	smulbb	r1, r0, r1
 8002350:	1488      	asrs	r0, r1, #18
 8002352:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8002356:	b200      	sxth	r0, r0
 8002358:	ee00 0a10 	vmov	s0, r0
 800235c:	f8d4 00cc 	ldr.w	r0, [r4, #204]	@ 0xcc
 8002360:	edd4 0a12 	vldr	s1, [r4, #72]	@ 0x48
 8002364:	ed94 1a32 	vldr	s2, [r4, #200]	@ 0xc8
 8002368:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800236c:	f242 7110 	movw	r1, #10000	@ 0x2710
 8002370:	ee00 1a20 	vmla.f32	s2, s0, s1
 8002374:	1c40      	adds	r0, r0, #1
 8002376:	4288      	cmp	r0, r1
 8002378:	ed84 1a32 	vstr	s2, [r4, #200]	@ 0xc8
 800237c:	f8c4 00cc 	str.w	r0, [r4, #204]	@ 0xcc
 8002380:	f0c0 80d3 	bcc.w	800252a <??SCC_KeDetection_0>
 8002384:	ee00 0a10 	vmov	s0, r0
 8002388:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 800238c:	edd4 0a2f 	vldr	s1, [r4, #188]	@ 0xbc
 8002390:	ed94 1a30 	vldr	s2, [r4, #192]	@ 0xc0
 8002394:	eec0 9a80 	vdiv.f32	s19, s1, s0
 8002398:	ee81 aa00 	vdiv.f32	s20, s2, s0
 800239c:	edd4 0a31 	vldr	s1, [r4, #196]	@ 0xc4
 80023a0:	ed94 1a32 	vldr	s2, [r4, #200]	@ 0xc8
 80023a4:	eec0 aa80 	vdiv.f32	s21, s1, s0
 80023a8:	ee81 9a00 	vdiv.f32	s18, s2, s0
 80023ac:	4620      	mov	r0, r4
 80023ae:	f7ff ff61 	bl	8002274 <SCC_KeDetectionInit>
 80023b2:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80023b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ba:	f000 80b6 	beq.w	800252a <??SCC_KeDetection_0>
 80023be:	6920      	ldr	r0, [r4, #16]
 80023c0:	f008 fa30 	bl	800a824 <SPD_GetAvrgMecSpeedUnit>
 80023c4:	ebc0 1100 	rsb	r1, r0, r0, lsl #4
 80023c8:	0088      	lsls	r0, r1, #2
 80023ca:	f8df 26ec 	ldr.w	r2, [pc, #1772]	@ 8002ab8 <??DataTable22_9>
 80023ce:	ed94 1a19 	vldr	s2, [r4, #100]	@ 0x64
 80023d2:	fb80 3202 	smull	r3, r2, r0, r2
 80023d6:	1092      	asrs	r2, r2, #2
 80023d8:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 80023dc:	ee00 2a10 	vmov	s0, r2
 80023e0:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80023e4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80023e8:	ee10 6a10 	vmov	r6, s0
 80023ec:	eddf 0a98 	vldr	s1, [pc, #608]	@ 8002650 <??DataTable14>
 80023f0:	ee29 8a20 	vmul.f32	s16, s18, s1
 80023f4:	ed94 0a1a 	vldr	s0, [r4, #104]	@ 0x68
 80023f8:	ee28 0a00 	vmul.f32	s0, s16, s0
 80023fc:	ee01 aa69 	vmls.f32	s20, s2, s19
 8002400:	ee40 aa29 	vmla.f32	s21, s0, s19
 8002404:	ee2a 0a0a 	vmul.f32	s0, s20, s20
 8002408:	ee0a 0aaa 	vmla.f32	s0, s21, s21
 800240c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8002410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002414:	db01      	blt.n	800241a <??SCC_KeDetection_1>
 8002416:	eef1 8ac0 	vsqrt.f32	s17, s0

0800241a <??SCC_KeDetection_1>:
 800241a:	f8b4 111c 	ldrh.w	r1, [r4, #284]	@ 0x11c
 800241e:	f104 00f4 	add.w	r0, r4, #244	@ 0xf4
 8002422:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 8002426:	f504 7084 	add.w	r0, r4, #264	@ 0x108
 800242a:	edc2 8a00 	vstr	s17, [r2]
 800242e:	f8b4 111c 	ldrh.w	r1, [r4, #284]	@ 0x11c
 8002432:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 8002436:	ed82 8a00 	vstr	s16, [r2]
 800243a:	f8b4 011c 	ldrh.w	r0, [r4, #284]	@ 0x11c
 800243e:	1c40      	adds	r0, r0, #1
 8002440:	f8a4 011c 	strh.w	r0, [r4, #284]	@ 0x11c
 8002444:	b280      	uxth	r0, r0
 8002446:	2805      	cmp	r0, #5
 8002448:	d304      	bcc.n	8002454 <??SCC_KeDetection_2>
 800244a:	2000      	movs	r0, #0
 800244c:	f8a4 011c 	strh.w	r0, [r4, #284]	@ 0x11c
 8002450:	f884 511e 	strb.w	r5, [r4, #286]	@ 0x11e

08002454 <??SCC_KeDetection_2>:
 8002454:	f894 011e 	ldrb.w	r0, [r4, #286]	@ 0x11e
 8002458:	2800      	cmp	r0, #0
 800245a:	d050      	beq.n	80024fe <??SCC_KeDetection_3>
 800245c:	f8d4 00e4 	ldr.w	r0, [r4, #228]	@ 0xe4
 8002460:	f001 fa8c 	bl	800397c <__aeabi_i2d>
 8002464:	f8df 2654 	ldr.w	r2, [pc, #1620]	@ 8002abc <??DataTable22_10>
 8002468:	f8df 3654 	ldr.w	r3, [pc, #1620]	@ 8002ac0 <??DataTable22_11>
 800246c:	f001 f80a 	bl	8003484 <__aeabi_dmul>
 8002470:	f001 faee 	bl	8003a50 <__aeabi_d2iz>
 8002474:	42b0      	cmp	r0, r6
 8002476:	da42      	bge.n	80024fe <??SCC_KeDetection_3>
 8002478:	2205      	movs	r2, #5
 800247a:	f104 01f4 	add.w	r1, r4, #244	@ 0xf4
 800247e:	f504 7084 	add.w	r0, r4, #264	@ 0x108
 8002482:	f000 f8e9 	bl	8002658 <Fitab>
 8002486:	ed9f 2a73 	vldr	s4, [pc, #460]	@ 8002654 <??DataTable14_1>
 800248a:	eef0 1a68 	vmov.f32	s3, s17
 800248e:	eeb0 1a48 	vmov.f32	s2, s16
 8002492:	4620      	mov	r0, r4
 8002494:	f000 f852 	bl	800253c <SCC_CheckBemf>
 8002498:	2800      	cmp	r0, #0
 800249a:	f894 00f0 	ldrb.w	r0, [r4, #240]	@ 0xf0
 800249e:	d00e      	beq.n	80024be <??SCC_KeDetection_4>
 80024a0:	b950      	cbnz	r0, 80024b8 <??SCC_KeDetection_5>
 80024a2:	f8d4 00e8 	ldr.w	r0, [r4, #232]	@ 0xe8
 80024a6:	f8df 161c 	ldr.w	r1, [pc, #1564]	@ 8002ac4 <??DataTable22_12>
 80024aa:	1830      	adds	r0, r6, r0
 80024ac:	fb80 2101 	smull	r2, r1, r0, r1
 80024b0:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 80024b4:	f8c4 113c 	str.w	r1, [r4, #316]	@ 0x13c

080024b8 <??SCC_KeDetection_5>:
 80024b8:	f884 50f0 	strb.w	r5, [r4, #240]	@ 0xf0
 80024bc:	e01f      	b.n	80024fe <??SCC_KeDetection_3>

080024be <??SCC_KeDetection_4>:
 80024be:	2801      	cmp	r0, #1
 80024c0:	d115      	bne.n	80024ee <??SCC_KeDetection_6>
 80024c2:	ed9f 0acc 	vldr	s0, [pc, #816]	@ 80027f4 <??DataTable15>
 80024c6:	ee29 0a00 	vmul.f32	s0, s18, s0
 80024ca:	edd4 0a12 	vldr	s1, [r4, #72]	@ 0x48
 80024ce:	eec0 0a20 	vdiv.f32	s1, s0, s1
 80024d2:	2100      	movs	r1, #0
 80024d4:	eefc 0ae0 	vcvt.u32.f32	s1, s1
 80024d8:	f884 10f0 	strb.w	r1, [r4, #240]	@ 0xf0
 80024dc:	edc4 0a49 	vstr	s1, [r4, #292]	@ 0x124
 80024e0:	f8a4 1120 	strh.w	r1, [r4, #288]	@ 0x120
 80024e4:	2504      	movs	r5, #4
 80024e6:	ecbd 8b06 	vpop	{d8-d10}
 80024ea:	4628      	mov	r0, r5
 80024ec:	bd70      	pop	{r4, r5, r6, pc}

080024ee <??SCC_KeDetection_6>:
 80024ee:	f8b4 0120 	ldrh.w	r0, [r4, #288]	@ 0x120
 80024f2:	1c40      	adds	r0, r0, #1
 80024f4:	f8a4 0120 	strh.w	r0, [r4, #288]	@ 0x120
 80024f8:	b280      	uxth	r0, r0
 80024fa:	2804      	cmp	r0, #4
 80024fc:	da07      	bge.n	800250e <??SCC_KeDetection_7>

080024fe <??SCC_KeDetection_3>:
 80024fe:	6a20      	ldr	r0, [r4, #32]
 8002500:	f008 f94e 	bl	800a7a0 <RUC_FirstAccelerationStageReached>
 8002504:	2800      	cmp	r0, #0
 8002506:	f894 00f0 	ldrb.w	r0, [r4, #240]	@ 0xf0
 800250a:	d002      	beq.n	8002512 <??SCC_KeDetection_8>
 800250c:	b948      	cbnz	r0, 8002522 <??SCC_KeDetection_9>

0800250e <??SCC_KeDetection_7>:
 800250e:	2503      	movs	r5, #3
 8002510:	e008      	b.n	8002524 <??SCC_KeDetection_10>

08002512 <??SCC_KeDetection_8>:
 8002512:	b150      	cbz	r0, 800252a <??SCC_KeDetection_0>
 8002514:	f8d4 013c 	ldr.w	r0, [r4, #316]	@ 0x13c
 8002518:	42b0      	cmp	r0, r6
 800251a:	d206      	bcs.n	800252a <??SCC_KeDetection_0>
 800251c:	6a20      	ldr	r0, [r4, #32]
 800251e:	f008 f92f 	bl	800a780 <RUC_Stop>

08002522 <??SCC_KeDetection_9>:
 8002522:	2502      	movs	r5, #2

08002524 <??SCC_KeDetection_10>:
 8002524:	2000      	movs	r0, #0
 8002526:	f8a4 0120 	strh.w	r0, [r4, #288]	@ 0x120

0800252a <??SCC_KeDetection_0>:
 800252a:	4628      	mov	r0, r5
 800252c:	ecbd 8b06 	vpop	{d8-d10}
 8002530:	bd70      	pop	{r4, r5, r6, pc}
	...

08002534 <??DataTable12>:
 8002534:	cccd 3e4c                                   ..L>

08002538 <??DataTable12_1>:
 8002538:	0000 4780                                   ...G

0800253c <SCC_CheckBemf>:
 800253c:	ee01 0a20 	vmla.f32	s0, s2, s1
 8002540:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8002544:	ee32 1a01 	vadd.f32	s2, s4, s2
 8002548:	eef7 2a00 	vmov.f32	s5, #112	@ 0x3f800000  1.0
 800254c:	ee21 1a00 	vmul.f32	s2, s2, s0
 8002550:	ee32 2ac2 	vsub.f32	s4, s5, s4
 8002554:	4601      	mov	r1, r0
 8002556:	ee22 0a00 	vmul.f32	s0, s4, s0
 800255a:	2000      	movs	r0, #0
 800255c:	eeb4 0a61 	vcmp.f32	s0, s3
 8002560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002564:	bf44      	itt	mi
 8002566:	eef4 1a41 	vcmpmi.f32	s3, s2
 800256a:	eef1 fa10 	vmrsmi	APSR_nzcv, fpscr
 800256e:	d50b      	bpl.n	8002588 <??SCC_CheckBemf_0>
 8002570:	eddf 1ad6 	vldr	s3, [pc, #856]	@ 80028cc <??DataTable17>
 8002574:	ed91 0a12 	vldr	s0, [r1, #72]	@ 0x48
 8002578:	ee81 0a80 	vdiv.f32	s0, s3, s0
 800257c:	eeb4 0a60 	vcmp.f32	s0, s1
 8002580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002584:	bf48      	it	mi
 8002586:	2001      	movmi	r0, #1

08002588 <??SCC_CheckBemf_0>:
 8002588:	4770      	bx	lr
	...

0800258c <??DataTable13>:
 800258c:	0000 3780                                   ...7

08002590 <??DataTable13_1>:
 8002590:	cd46 3793                                   F..7

08002594 <??DataTable13_2>:
 8002594:	0000 0000                                   ....

08002598 <??DataTable13_3>:
 8002598:	0b88 2000                                   ... 

0800259c <SCC_DetectBemf>:
 800259c:	b530      	push	{r4, r5, lr}
 800259e:	4605      	mov	r5, r0
 80025a0:	b081      	sub	sp, #4
 80025a2:	f895 0540 	ldrb.w	r0, [r5, #1344]	@ 0x540
 80025a6:	2401      	movs	r4, #1
 80025a8:	b990      	cbnz	r0, 80025d0 <??SCC_DetectBemf_0>
 80025aa:	6828      	ldr	r0, [r5, #0]
 80025ac:	f003 fc58 	bl	8005e60 <PWMC_RLTurnOnLowSidesAndStart>
 80025b0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80025b4:	f8a5 1130 	strh.w	r1, [r5, #304]	@ 0x130
 80025b8:	f241 3088 	movw	r0, #5000	@ 0x1388
 80025bc:	f8a5 0132 	strh.w	r0, [r5, #306]	@ 0x132
 80025c0:	2100      	movs	r1, #0
 80025c2:	f8c5 10b8 	str.w	r1, [r5, #184]	@ 0xb8
 80025c6:	f885 4540 	strb.w	r4, [r5, #1344]	@ 0x540
 80025ca:	4620      	mov	r0, r4
 80025cc:	b001      	add	sp, #4
 80025ce:	bd30      	pop	{r4, r5, pc}

080025d0 <??SCC_DetectBemf_0>:
 80025d0:	f8b5 0132 	ldrh.w	r0, [r5, #306]	@ 0x132
 80025d4:	b3a0      	cbz	r0, 8002640 <??SCC_DetectBemf_1>
 80025d6:	1e40      	subs	r0, r0, #1
 80025d8:	f8a5 0132 	strh.w	r0, [r5, #306]	@ 0x132
 80025dc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80025e0:	ed9f 0abb 	vldr	s0, [pc, #748]	@ 80028d0 <??DataTable17_1>
 80025e4:	462a      	mov	r2, r5
 80025e6:	4608      	mov	r0, r1

080025e8 <??SCC_DetectBemf_2>:
 80025e8:	edd2 0a50 	vldr	s1, [r2, #320]	@ 0x140
 80025ec:	1d12      	adds	r2, r2, #4
 80025ee:	1e40      	subs	r0, r0, #1
 80025f0:	ee30 0a20 	vadd.f32	s0, s0, s1
 80025f4:	d1f8      	bne.n	80025e8 <??SCC_DetectBemf_2>
 80025f6:	eddf 0ab7 	vldr	s1, [pc, #732]	@ 80028d4 <??DataTable17_2>
 80025fa:	ee20 0a20 	vmul.f32	s0, s0, s1
 80025fe:	ed9f 1ab4 	vldr	s2, [pc, #720]	@ 80028d0 <??DataTable17_1>
 8002602:	4628      	mov	r0, r5

08002604 <??SCC_DetectBemf_3>:
 8002604:	edd0 1a50 	vldr	s3, [r0, #320]	@ 0x140
 8002608:	1d00      	adds	r0, r0, #4
 800260a:	ee71 1ac0 	vsub.f32	s3, s3, s0
 800260e:	1e49      	subs	r1, r1, #1
 8002610:	ee01 1aa1 	vmla.f32	s2, s3, s3
 8002614:	d1f6      	bne.n	8002604 <??SCC_DetectBemf_3>
 8002616:	ee21 0a20 	vmul.f32	s0, s2, s1
 800261a:	eddf 0acc 	vldr	s1, [pc, #816]	@ 800294c <??DataTable18>
 800261e:	eeb4 0a60 	vcmp.f32	s0, s1
 8002622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002626:	bfa8      	it	ge
 8002628:	f44f 707a 	movge.w	r0, #1000	@ 0x3e8
 800262c:	da03      	bge.n	8002636 <??SCC_DetectBemf_4>
 800262e:	f8b5 0130 	ldrh.w	r0, [r5, #304]	@ 0x130
 8002632:	b128      	cbz	r0, 8002640 <??SCC_DetectBemf_1>
 8002634:	1e40      	subs	r0, r0, #1

08002636 <??SCC_DetectBemf_4>:
 8002636:	f8a5 0130 	strh.w	r0, [r5, #304]	@ 0x130
 800263a:	b001      	add	sp, #4
 800263c:	4620      	mov	r0, r4
 800263e:	bd30      	pop	{r4, r5, pc}

08002640 <??SCC_DetectBemf_1>:
 8002640:	2100      	movs	r1, #0
 8002642:	f885 1540 	strb.w	r1, [r5, #1344]	@ 0x540
 8002646:	2400      	movs	r4, #0
 8002648:	4620      	mov	r0, r4
 800264a:	b001      	add	sp, #4
 800264c:	bd30      	pop	{r4, r5, pc}
	...

08002650 <??DataTable14>:
 8002650:	0fdb 40c9                                   ...@

08002654 <??DataTable14_1>:
 8002654:	cccd 3dcc                                   ...=

08002658 <Fitab>:
 8002658:	b4f0      	push	{r4, r5, r6, r7}
 800265a:	4603      	mov	r3, r0
 800265c:	f20f 40a0 	addw	r0, pc, #1184	@ 0x4a0
 8002660:	460c      	mov	r4, r1
 8002662:	ec90 1a02 	vldmia	r0, {s2-s3}
 8002666:	b291      	uxth	r1, r2
 8002668:	2500      	movs	r5, #0
 800266a:	b290      	uxth	r0, r2
 800266c:	ee00 1a10 	vmov	s0, r1
 8002670:	2800      	cmp	r0, #0
 8002672:	ed9f 2a97 	vldr	s4, [pc, #604]	@ 80028d0 <??DataTable17_1>
 8002676:	eddf 2a96 	vldr	s5, [pc, #600]	@ 80028d0 <??DataTable17_1>
 800267a:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 800267e:	eddf 0a94 	vldr	s1, [pc, #592]	@ 80028d0 <??DataTable17_1>
 8002682:	d04b      	beq.n	800271c <??Fitab_0>
 8002684:	f010 0103 	ands.w	r1, r0, #3
 8002688:	f000 800f 	beq.w	80026aa <??Fitab_1>

0800268c <??Fitab_2>:
 800268c:	eb03 0685 	add.w	r6, r3, r5, lsl #2
 8002690:	eb04 0785 	add.w	r7, r4, r5, lsl #2
 8002694:	1c6d      	adds	r5, r5, #1
 8002696:	ed96 3a00 	vldr	s6, [r6]
 800269a:	edd7 3a00 	vldr	s7, [r7]
 800269e:	1e49      	subs	r1, r1, #1
 80026a0:	ee32 2a03 	vadd.f32	s4, s4, s6
 80026a4:	ee72 2aa3 	vadd.f32	s5, s5, s7
 80026a8:	d1f0      	bne.n	800268c <??Fitab_2>

080026aa <??Fitab_1>:
 80026aa:	0880      	lsrs	r0, r0, #2
 80026ac:	f000 8036 	beq.w	800271c <??Fitab_0>

080026b0 <??Fitab_3>:
 80026b0:	eb03 0185 	add.w	r1, r3, r5, lsl #2
 80026b4:	eb04 0685 	add.w	r6, r4, r5, lsl #2
 80026b8:	1c6d      	adds	r5, r5, #1
 80026ba:	ed91 3a00 	vldr	s6, [r1]
 80026be:	edd6 3a00 	vldr	s7, [r6]
 80026c2:	eb03 0185 	add.w	r1, r3, r5, lsl #2
 80026c6:	eb04 0685 	add.w	r6, r4, r5, lsl #2
 80026ca:	ee32 2a03 	vadd.f32	s4, s4, s6
 80026ce:	ee72 2aa3 	vadd.f32	s5, s5, s7
 80026d2:	1c6d      	adds	r5, r5, #1
 80026d4:	ed91 3a00 	vldr	s6, [r1]
 80026d8:	edd6 3a00 	vldr	s7, [r6]
 80026dc:	eb03 0185 	add.w	r1, r3, r5, lsl #2
 80026e0:	eb04 0685 	add.w	r6, r4, r5, lsl #2
 80026e4:	ee32 2a03 	vadd.f32	s4, s4, s6
 80026e8:	ee72 2aa3 	vadd.f32	s5, s5, s7
 80026ec:	1c6d      	adds	r5, r5, #1
 80026ee:	ed91 3a00 	vldr	s6, [r1]
 80026f2:	edd6 3a00 	vldr	s7, [r6]
 80026f6:	eb03 0185 	add.w	r1, r3, r5, lsl #2
 80026fa:	eb04 0685 	add.w	r6, r4, r5, lsl #2
 80026fe:	ee32 2a03 	vadd.f32	s4, s4, s6
 8002702:	ee72 2aa3 	vadd.f32	s5, s5, s7
 8002706:	1c6d      	adds	r5, r5, #1
 8002708:	ed91 3a00 	vldr	s6, [r1]
 800270c:	edd6 3a00 	vldr	s7, [r6]
 8002710:	1e40      	subs	r0, r0, #1
 8002712:	ee32 2a03 	vadd.f32	s4, s4, s6
 8002716:	ee72 2aa3 	vadd.f32	s5, s5, s7
 800271a:	d1c9      	bne.n	80026b0 <??Fitab_3>

0800271c <??Fitab_0>:
 800271c:	2100      	movs	r1, #0
 800271e:	b290      	uxth	r0, r2
 8002720:	2800      	cmp	r0, #0
 8002722:	ee82 3a00 	vdiv.f32	s6, s4, s0
 8002726:	d05d      	beq.n	80027e4 <??Fitab_4>
 8002728:	b292      	uxth	r2, r2
 800272a:	f012 0003 	ands.w	r0, r2, #3
 800272e:	d014      	beq.n	800275a <??Fitab_5>

08002730 <??Fitab_6>:
 8002730:	eb03 0581 	add.w	r5, r3, r1, lsl #2
 8002734:	eb04 0681 	add.w	r6, r4, r1, lsl #2
 8002738:	edd5 3a00 	vldr	s7, [r5]
 800273c:	ed96 4a00 	vldr	s8, [r6]
 8002740:	eef0 4a61 	vmov.f32	s9, s3
 8002744:	1c49      	adds	r1, r1, #1
 8002746:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800274a:	ee43 4a84 	vmla.f32	s9, s7, s8
 800274e:	1e40      	subs	r0, r0, #1
 8002750:	ee43 0aa3 	vmla.f32	s1, s7, s7
 8002754:	eef0 1a64 	vmov.f32	s3, s9
 8002758:	d1ea      	bne.n	8002730 <??Fitab_6>

0800275a <??Fitab_5>:
 800275a:	0892      	lsrs	r2, r2, #2
 800275c:	f000 8042 	beq.w	80027e4 <??Fitab_4>

08002760 <??Fitab_7>:
 8002760:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 8002764:	eb04 0581 	add.w	r5, r4, r1, lsl #2
 8002768:	edd0 3a00 	vldr	s7, [r0]
 800276c:	edd5 4a00 	vldr	s9, [r5]
 8002770:	1c49      	adds	r1, r1, #1
 8002772:	ee33 4ac3 	vsub.f32	s8, s7, s6
 8002776:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 800277a:	eef0 3a61 	vmov.f32	s7, s3
 800277e:	eb04 0581 	add.w	r5, r4, r1, lsl #2
 8002782:	1c49      	adds	r1, r1, #1
 8002784:	ee44 3a24 	vmla.f32	s7, s8, s9
 8002788:	ed90 5a00 	vldr	s10, [r0]
 800278c:	edd5 5a00 	vldr	s11, [r5]
 8002790:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 8002794:	ee75 4a43 	vsub.f32	s9, s10, s6
 8002798:	eb04 0581 	add.w	r5, r4, r1, lsl #2
 800279c:	1c49      	adds	r1, r1, #1
 800279e:	ee44 3aa5 	vmla.f32	s7, s9, s11
 80027a2:	ed90 5a00 	vldr	s10, [r0]
 80027a6:	edd5 5a00 	vldr	s11, [r5]
 80027aa:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 80027ae:	eb04 0581 	add.w	r5, r4, r1, lsl #2
 80027b2:	ee35 5a43 	vsub.f32	s10, s10, s6
 80027b6:	ee44 0a04 	vmla.f32	s1, s8, s8
 80027ba:	ee45 3a25 	vmla.f32	s7, s10, s11
 80027be:	ed90 6a00 	vldr	s12, [r0]
 80027c2:	ed95 4a00 	vldr	s8, [r5]
 80027c6:	ee44 0aa4 	vmla.f32	s1, s9, s9
 80027ca:	1c49      	adds	r1, r1, #1
 80027cc:	ee76 5a43 	vsub.f32	s11, s12, s6
 80027d0:	ee45 0a05 	vmla.f32	s1, s10, s10
 80027d4:	ee45 3a84 	vmla.f32	s7, s11, s8
 80027d8:	1e52      	subs	r2, r2, #1
 80027da:	ee45 0aa5 	vmla.f32	s1, s11, s11
 80027de:	eef0 1a63 	vmov.f32	s3, s7
 80027e2:	d1bd      	bne.n	8002760 <??Fitab_7>

080027e4 <??Fitab_4>:
 80027e4:	bcf0      	pop	{r4, r5, r6, r7}
 80027e6:	eec1 0aa0 	vdiv.f32	s1, s3, s1
 80027ea:	ee42 2a60 	vmls.f32	s5, s4, s1
 80027ee:	ee82 0a80 	vdiv.f32	s0, s5, s0
 80027f2:	4770      	bx	lr

080027f4 <??DataTable15>:
 80027f4:	0000 4270                                   ..pB

080027f8 <SCC_UpdateRevup>:
 80027f8:	b530      	push	{r4, r5, lr}
 80027fa:	b081      	sub	sp, #4
 80027fc:	4604      	mov	r4, r0
 80027fe:	ed2d 8b02 	vpush	{d8}
 8002802:	f8d4 00ec 	ldr.w	r0, [r4, #236]	@ 0xec
 8002806:	ed94 0a3a 	vldr	s0, [r4, #232]	@ 0xe8
 800280a:	ee00 0a90 	vmov	s1, r0
 800280e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8002812:	eef8 0a60 	vcvt.f32.u32	s1, s1
 8002816:	eec0 0a20 	vdiv.f32	s1, s0, s1
 800281a:	ed9f 1a9e 	vldr	s2, [pc, #632]	@ 8002a94 <??DataTable22>
 800281e:	ee20 8a81 	vmul.f32	s16, s1, s2
 8002822:	eddf 1a9d 	vldr	s3, [pc, #628]	@ 8002a98 <??DataTable22_1>
 8002826:	eeb4 8a61 	vcmp.f32	s16, s3
 800282a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800282e:	db09      	blt.n	8002844 <??SCC_UpdateRevup_0>
 8002830:	eb00 1080 	add.w	r0, r0, r0, lsl #6
 8002834:	ee00 0a10 	vmov	s0, r0
 8002838:	ed84 0a3a 	vstr	s0, [r4, #232]	@ 0xe8
 800283c:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8002840:	ed9f 8a96 	vldr	s16, [pc, #600]	@ 8002a9c <??DataTable22_2>

08002844 <??SCC_UpdateRevup_0>:
 8002844:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 8002848:	ee20 0a20 	vmul.f32	s0, s0, s1
 800284c:	ed9f 1a94 	vldr	s2, [pc, #592]	@ 8002aa0 <??DataTable22_3>
 8002850:	ee80 0a01 	vdiv.f32	s0, s0, s2
 8002854:	eebd 1ac0 	vcvt.s32.f32	s2, s0
 8002858:	ee11 5a10 	vmov	r5, s2
 800285c:	b229      	sxth	r1, r5
 800285e:	4620      	mov	r0, r4
 8002860:	f000 f822 	bl	80028a8 <SCC_SetMinStarupSpeedSTO>
 8002864:	6a20      	ldr	r0, [r4, #32]
 8002866:	b22a      	sxth	r2, r5
 8002868:	2101      	movs	r1, #1
 800286a:	f007 ffa9 	bl	800a7c0 <RUC_SetPhaseFinalMecSpeedUnit>
 800286e:	6a20      	ldr	r0, [r4, #32]
 8002870:	b22a      	sxth	r2, r5
 8002872:	2102      	movs	r1, #2
 8002874:	f007 ffa4 	bl	800a7c0 <RUC_SetPhaseFinalMecSpeedUnit>
 8002878:	6a20      	ldr	r0, [r4, #32]
 800287a:	b22a      	sxth	r2, r5
 800287c:	2103      	movs	r1, #3
 800287e:	f007 ff9f 	bl	800a7c0 <RUC_SetPhaseFinalMecSpeedUnit>
 8002882:	6a20      	ldr	r0, [r4, #32]
 8002884:	b22a      	sxth	r2, r5
 8002886:	2104      	movs	r1, #4
 8002888:	f007 ff9a 	bl	800a7c0 <RUC_SetPhaseFinalMecSpeedUnit>
 800288c:	eebd 0ac8 	vcvt.s32.f32	s0, s16
 8002890:	ee10 0a10 	vmov	r0, s0
 8002894:	b282      	uxth	r2, r0
 8002896:	6a20      	ldr	r0, [r4, #32]
 8002898:	ecbd 8b02 	vpop	{d8}
 800289c:	2101      	movs	r1, #1
 800289e:	b001      	add	sp, #4
 80028a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80028a4:	f007 bf86 	b.w	800a7b4 <RUC_SetPhaseDurationms>

080028a8 <SCC_SetMinStarupSpeedSTO>:
 80028a8:	ee00 1a10 	vmov	s0, r1
 80028ac:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80028b0:	eddf 0a7c 	vldr	s1, [pc, #496]	@ 8002aa4 <??DataTable22_4>
 80028b4:	ee20 0a20 	vmul.f32	s0, s0, s1
 80028b8:	eeb0 0ac0 	vabs.f32	s0, s0
 80028bc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80028c0:	ee10 1a10 	vmov	r1, s0
 80028c4:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 80028c6:	b289      	uxth	r1, r1
 80028c8:	f008 bbb0 	b.w	800b02c <STO_SetMinStartUpValidSpeedUnit>

080028cc <??DataTable17>:
 80028cc:	b717 3ad1                                   ...:

080028d0 <??DataTable17_1>:
 80028d0:	0000 0000                                   ....

080028d4 <??DataTable17_2>:
 80028d4:	0000 3b80                                   ...;

080028d8 <SCC_SetPolesPairs>:
 80028d8:	ee00 1a10 	vmov	s0, r1
 80028dc:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 80028e0:	ed80 0a12 	vstr	s0, [r0, #72]	@ 0x48
 80028e4:	4770      	bx	lr
	...

080028e8 <SCC_SetNominalCurrent>:
 80028e8:	b530      	push	{r4, r5, lr}
 80028ea:	eef5 0a00 	vmov.f32	s1, #80	@ 0x3e800000  0.250
 80028ee:	4604      	mov	r4, r0
 80028f0:	ee60 0a20 	vmul.f32	s1, s0, s1
 80028f4:	b081      	sub	sp, #4
 80028f6:	f8d4 0548 	ldr.w	r0, [r4, #1352]	@ 0x548
 80028fa:	edc4 0a17 	vstr	s1, [r4, #92]	@ 0x5c
 80028fe:	ed84 0a15 	vstr	s0, [r4, #84]	@ 0x54
 8002902:	ed84 0a16 	vstr	s0, [r4, #88]	@ 0x58
 8002906:	eddf 0a68 	vldr	s1, [pc, #416]	@ 8002aa8 <??DataTable22_5>
 800290a:	ee20 0a20 	vmul.f32	s0, s0, s1
 800290e:	ed90 1a06 	vldr	s2, [r0, #24]
 8002912:	edd0 0a13 	vldr	s1, [r0, #76]	@ 0x4c
 8002916:	ee20 1a01 	vmul.f32	s2, s0, s2
 800291a:	ed90 0a07 	vldr	s0, [r0, #28]
 800291e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8002920:	ee21 0a00 	vmul.f32	s0, s2, s0
 8002924:	eec0 0a20 	vdiv.f32	s1, s0, s1
 8002928:	eefd 0ae0 	vcvt.s32.f32	s1, s1
 800292c:	ee10 5a90 	vmov	r5, s1
 8002930:	b110      	cbz	r0, 8002938 <??SCC_SetNominalCurrent_0>
 8002932:	b2a9      	uxth	r1, r5
 8002934:	f008 f882 	bl	800aa3c <STC_SetNominalCurrent>

08002938 <??SCC_SetNominalCurrent_0>:
 8002938:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800293a:	b128      	cbz	r0, 8002948 <??SCC_SetNominalCurrent_1>
 800293c:	b2a9      	uxth	r1, r5
 800293e:	b001      	add	sp, #4
 8002940:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002944:	f7fe b8c2 	b.w	8000acc <OTT_SetNominalCurrent>

08002948 <??SCC_SetNominalCurrent_1>:
 8002948:	b001      	add	sp, #4
 800294a:	bd30      	pop	{r4, r5, pc}

0800294c <??DataTable18>:
 800294c:	d70b 3c23                                   ..#<

08002950 <SCC_GetNominalCurrent>:
 8002950:	ed90 0a16 	vldr	s0, [r0, #88]	@ 0x58
 8002954:	4770      	bx	lr

08002956 <SCC_SetLdLqRatio>:
 8002956:	ed80 0a38 	vstr	s0, [r0, #224]	@ 0xe0
 800295a:	4770      	bx	lr

0800295c <SCC_GetLdLqRatio>:
 800295c:	ed90 0a38 	vldr	s0, [r0, #224]	@ 0xe0
 8002960:	4770      	bx	lr
	...

08002964 <SCC_SetNominalSpeed>:
 8002964:	b410      	push	{r4}
 8002966:	b081      	sub	sp, #4
 8002968:	b911      	cbnz	r1, 8002970 <??SCC_SetNominalSpeed_0>
 800296a:	f8d0 1548 	ldr.w	r1, [r0, #1352]	@ 0x548
 800296e:	6c49      	ldr	r1, [r1, #68]	@ 0x44

08002970 <??SCC_SetNominalSpeed_0>:
 8002970:	4a51      	ldr	r2, [pc, #324]	@ (8002ab8 <??DataTable22_9>)
 8002972:	fb81 3202 	smull	r3, r2, r1, r2
 8002976:	ee00 1a10 	vmov	s0, r1
 800297a:	1092      	asrs	r2, r2, #2
 800297c:	f8c0 10e4 	str.w	r1, [r0, #228]	@ 0xe4
 8002980:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8002984:	eddf 0a49 	vldr	s1, [pc, #292]	@ 8002aac <??DataTable22_6>
 8002988:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 800298c:	ee60 0a20 	vmul.f32	s1, s0, s1
 8002990:	f8c0 20ec 	str.w	r2, [r0, #236]	@ 0xec
 8002994:	f44f 74fa 	mov.w	r4, #500	@ 0x1f4
 8002998:	eefd 0ae0 	vcvt.s32.f32	s1, s1
 800299c:	f8d0 10e4 	ldr.w	r1, [r0, #228]	@ 0xe4
 80029a0:	f8c0 40ec 	str.w	r4, [r0, #236]	@ 0xec
 80029a4:	edc0 0a3a 	vstr	s1, [r0, #232]	@ 0xe8
 80029a8:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 80029aa:	b001      	add	sp, #4
 80029ac:	bc10      	pop	{r4}
 80029ae:	f7fe b8cd 	b.w	8000b4c <OTT_SetNominalSpeed>

080029b2 <SCC_GetNominalSpeed>:
 80029b2:	f8d0 00e4 	ldr.w	r0, [r0, #228]	@ 0xe4
 80029b6:	4770      	bx	lr

080029b8 <SCC_GetEstMaxOLSpeed>:
 80029b8:	f8d0 00e8 	ldr.w	r0, [r0, #232]	@ 0xe8
 80029bc:	4770      	bx	lr

080029be <SCC_GetEstMaxAcceleration>:
 80029be:	f8d0 00ec 	ldr.w	r0, [r0, #236]	@ 0xec
 80029c2:	4770      	bx	lr

080029c4 <SCC_GetResistorOffset>:
 80029c4:	f8d0 0548 	ldr.w	r0, [r0, #1352]	@ 0x548
 80029c8:	ed90 0a0a 	vldr	s0, [r0, #40]	@ 0x28
 80029cc:	4770      	bx	lr
	...

080029d0 <SCC_GetStartupCurrentS16>:
 80029d0:	f8d0 1548 	ldr.w	r1, [r0, #1352]	@ 0x548
 80029d4:	ed91 0a06 	vldr	s0, [r1, #24]
 80029d8:	ed91 1a07 	vldr	s2, [r1, #28]
 80029dc:	eddf 0a32 	vldr	s1, [pc, #200]	@ 8002aa8 <??DataTable22_5>
 80029e0:	ee60 0a20 	vmul.f32	s1, s0, s1
 80029e4:	ee20 1a81 	vmul.f32	s2, s1, s2
 80029e8:	ed91 0a13 	vldr	s0, [r1, #76]	@ 0x4c
 80029ec:	edd0 0a15 	vldr	s1, [r0, #84]	@ 0x54
 80029f0:	ee81 0a00 	vdiv.f32	s0, s2, s0
 80029f4:	ee60 0a20 	vmul.f32	s1, s0, s1
 80029f8:	eefd 0ae0 	vcvt.s32.f32	s1, s1
 80029fc:	ee10 0a90 	vmov	r0, s1
 8002a00:	1e40      	subs	r0, r0, #1
 8002a02:	b200      	sxth	r0, r0
 8002a04:	4770      	bx	lr

08002a06 <SCC_GetStartupCurrentAmp>:
 8002a06:	ed90 0a16 	vldr	s0, [r0, #88]	@ 0x58
 8002a0a:	4770      	bx	lr

08002a0c <SCC_SetCurrentBandwidth>:
 8002a0c:	ed80 0a4d 	vstr	s0, [r0, #308]	@ 0x134
 8002a10:	4770      	bx	lr

08002a12 <SCC_GetCurrentBandwidth>:
 8002a12:	ed90 0a4d 	vldr	s0, [r0, #308]	@ 0x134
 8002a16:	4770      	bx	lr

08002a18 <SCC_GetPWMFrequencyHz>:
 8002a18:	f8d0 0548 	ldr.w	r0, [r0, #1352]	@ 0x548
 8002a1c:	f8b0 0048 	ldrh.w	r0, [r0, #72]	@ 0x48
 8002a20:	4770      	bx	lr

08002a22 <SCC_GetFOCRepRate>:
 8002a22:	f8d0 0548 	ldr.w	r0, [r0, #1352]	@ 0x548
 8002a26:	f890 004a 	ldrb.w	r0, [r0, #74]	@ 0x4a
 8002a2a:	4770      	bx	lr

08002a2c <SCC_GetOverVoltageThreshold>:
 8002a2c:	b500      	push	{lr}
 8002a2e:	b081      	sub	sp, #4
 8002a30:	6840      	ldr	r0, [r0, #4]
 8002a32:	4a25      	ldr	r2, [pc, #148]	@ (8002ac8 <??DataTable22_13>)
 8002a34:	8981      	ldrh	r1, [r0, #12]
 8002a36:	8840      	ldrh	r0, [r0, #2]
 8002a38:	4341      	muls	r1, r0
 8002a3a:	fb81 3202 	smull	r3, r2, r1, r2
 8002a3e:	440a      	add	r2, r1
 8002a40:	13d0      	asrs	r0, r2, #15
 8002a42:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8002a46:	f000 ff99 	bl	800397c <__aeabi_i2d>
 8002a4a:	ec41 0b10 	vmov	d0, r0, r1
 8002a4e:	f008 fc2d 	bl	800b2ac <round>
 8002a52:	ec51 0b10 	vmov	r0, r1, d0
 8002a56:	f000 fffb 	bl	8003a50 <__aeabi_d2iz>
 8002a5a:	b280      	uxth	r0, r0
 8002a5c:	b001      	add	sp, #4
 8002a5e:	bd00      	pop	{pc}

08002a60 <SCC_GetUnderVoltageThreshold>:
 8002a60:	b500      	push	{lr}
 8002a62:	b081      	sub	sp, #4
 8002a64:	6840      	ldr	r0, [r0, #4]
 8002a66:	4a18      	ldr	r2, [pc, #96]	@ (8002ac8 <??DataTable22_13>)
 8002a68:	8a41      	ldrh	r1, [r0, #18]
 8002a6a:	8840      	ldrh	r0, [r0, #2]
 8002a6c:	4341      	muls	r1, r0
 8002a6e:	fb81 3202 	smull	r3, r2, r1, r2
 8002a72:	440a      	add	r2, r1
 8002a74:	13d0      	asrs	r0, r2, #15
 8002a76:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8002a7a:	f000 ff7f 	bl	800397c <__aeabi_i2d>
 8002a7e:	ec41 0b10 	vmov	d0, r0, r1
 8002a82:	f008 fc13 	bl	800b2ac <round>
 8002a86:	ec51 0b10 	vmov	r0, r1, d0
 8002a8a:	f000 ffe1 	bl	8003a50 <__aeabi_d2iz>
 8002a8e:	b280      	uxth	r0, r0
 8002a90:	b001      	add	sp, #4
 8002a92:	bd00      	pop	{pc}

08002a94 <??DataTable22>:
 8002a94:	0000 447a                                   ..zD

08002a98 <??DataTable22_1>:
 8002a98:	ff01 477f                                   ...G

08002a9c <??DataTable22_2>:
 8002a9c:	e800 477d                                   ..}G

08002aa0 <??DataTable22_3>:
 8002aa0:	0000 4270                                   ..pB

08002aa4 <??DataTable22_4>:
 8002aa4:	cccd 3f8c                                   ...?

08002aa8 <??DataTable22_5>:
 8002aa8:	0000 4780                                   ...G

08002aac <??DataTable22_6>:
 8002aac:	cccd 3ecc                                   ...>

08002ab0 <??DataTable22_7>:
 8002ab0:	ea5e 000f                                   ^...

08002ab4 <??DataTable22_8>:
 8002ab4:	8dc5 0648                                   ..H.

08002ab8 <??DataTable22_9>:
 8002ab8:	6667 6666                                   gfff

08002abc <??DataTable22_10>:
 8002abc:	999a 9999                                   ....

08002ac0 <??DataTable22_11>:
 8002ac0:	9999 3fb9                                   ...?

08002ac4 <??DataTable22_12>:
 8002ac4:	5556 5555                                   VUUU

08002ac8 <??DataTable22_13>:
 8002ac8:	8001 8000                                   ....

08002acc <SCC_SetOverVoltageThreshold>:
 8002acc:	6840      	ldr	r0, [r0, #4]
 8002ace:	8842      	ldrh	r2, [r0, #2]
 8002ad0:	ebc1 4101 	rsb	r1, r1, r1, lsl #16
 8002ad4:	fb91 f1f2 	sdiv	r1, r1, r2
 8002ad8:	8181      	strh	r1, [r0, #12]
 8002ada:	4770      	bx	lr

08002adc <SCC_SetUnderVoltageThreshold>:
 8002adc:	6840      	ldr	r0, [r0, #4]
 8002ade:	8842      	ldrh	r2, [r0, #2]
 8002ae0:	ebc1 4101 	rsb	r1, r1, r1, lsl #16
 8002ae4:	fb91 f1f2 	sdiv	r1, r1, r2
 8002ae8:	8241      	strh	r1, [r0, #18]
 8002aea:	4770      	bx	lr

08002aec <SCC_SetPBCharacterization>:
 8002aec:	f8d0 0548 	ldr.w	r0, [r0, #1352]	@ 0x548
 8002af0:	f880 1040 	strb.w	r1, [r0, #64]	@ 0x40
 8002af4:	4770      	bx	lr

08002af6 <SCC_SetResistorOffset>:
 8002af6:	f8d0 0548 	ldr.w	r0, [r0, #1352]	@ 0x548
 8002afa:	ed80 0a0a 	vstr	s0, [r0, #40]	@ 0x28
 8002afe:	4770      	bx	lr

08002b00 <?_0>:
	...

08002b08 <HT_Init>:
 8002b08:	b530      	push	{r4, r5, lr}
 8002b0a:	4604      	mov	r4, r0
 8002b0c:	b081      	sub	sp, #4
 8002b0e:	6820      	ldr	r0, [r4, #0]
 8002b10:	460d      	mov	r5, r1
 8002b12:	f001 ff77 	bl	8004a04 <MCI_GetSTMState>
 8002b16:	f8df 1928 	ldr.w	r1, [pc, #2344]	@ 8003440 <??DataTable1>
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	710a      	strb	r2, [r1, #4]
 8002b20:	80cb      	strh	r3, [r1, #6]
 8002b22:	2100      	movs	r1, #0
 8002b24:	68a2      	ldr	r2, [r4, #8]
 8002b26:	f882 10cc 	strb.w	r1, [r2, #204]	@ 0xcc
 8002b2a:	2d00      	cmp	r5, #0
 8002b2c:	68a1      	ldr	r1, [r4, #8]
 8002b2e:	844b      	strh	r3, [r1, #34]	@ 0x22
 8002b30:	f8a1 30a8 	strh.w	r3, [r1, #168]	@ 0xa8
 8002b34:	7523      	strb	r3, [r4, #20]
 8002b36:	7563      	strb	r3, [r4, #21]
 8002b38:	75a3      	strb	r3, [r4, #22]
 8002b3a:	75e3      	strb	r3, [r4, #23]
 8002b3c:	7623      	strb	r3, [r4, #24]
 8002b3e:	7663      	strb	r3, [r4, #25]
 8002b40:	76a3      	strb	r3, [r4, #26]
 8002b42:	76e3      	strb	r3, [r4, #27]
 8002b44:	7723      	strb	r3, [r4, #28]
 8002b46:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 8002b4a:	f884 3020 	strb.w	r3, [r4, #32]
 8002b4e:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
 8002b52:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
 8002b56:	63a3      	str	r3, [r4, #56]	@ 0x38
 8002b58:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8002b5a:	6423      	str	r3, [r4, #64]	@ 0x40
 8002b5c:	77e3      	strb	r3, [r4, #31]
 8002b5e:	85a3      	strh	r3, [r4, #44]	@ 0x2c
 8002b60:	8523      	strh	r3, [r4, #40]	@ 0x28
 8002b62:	84e3      	strh	r3, [r4, #38]	@ 0x26
 8002b64:	f884 3023 	strb.w	r3, [r4, #35]	@ 0x23
 8002b68:	6463      	str	r3, [r4, #68]	@ 0x44
 8002b6a:	64a3      	str	r3, [r4, #72]	@ 0x48
 8002b6c:	6523      	str	r3, [r4, #80]	@ 0x50
 8002b6e:	6563      	str	r3, [r4, #84]	@ 0x54
 8002b70:	65a3      	str	r3, [r4, #88]	@ 0x58
 8002b72:	65e3      	str	r3, [r4, #92]	@ 0x5c
 8002b74:	6623      	str	r3, [r4, #96]	@ 0x60
 8002b76:	6663      	str	r3, [r4, #100]	@ 0x64
 8002b78:	66a3      	str	r3, [r4, #104]	@ 0x68
 8002b7a:	66e3      	str	r3, [r4, #108]	@ 0x6c
 8002b7c:	6723      	str	r3, [r4, #112]	@ 0x70
 8002b7e:	6763      	str	r3, [r4, #116]	@ 0x74
 8002b80:	67a3      	str	r3, [r4, #120]	@ 0x78
 8002b82:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8002b84:	d14a      	bne.n	8002c1c <??HT_Init_0>
 8002b86:	2101      	movs	r1, #1
 8002b88:	77a3      	strb	r3, [r4, #30]
 8002b8a:	7761      	strb	r1, [r4, #29]
 8002b8c:	85e3      	strh	r3, [r4, #46]	@ 0x2e
 8002b8e:	8623      	strh	r3, [r4, #48]	@ 0x30
 8002b90:	8663      	strh	r3, [r4, #50]	@ 0x32
 8002b92:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8002b94:	f8a4 3080 	strh.w	r3, [r4, #128]	@ 0x80
 8002b98:	f8a4 3082 	strh.w	r3, [r4, #130]	@ 0x82
 8002b9c:	f8a4 3084 	strh.w	r3, [r4, #132]	@ 0x84
 8002ba0:	f8a4 3086 	strh.w	r3, [r4, #134]	@ 0x86
 8002ba4:	f8a4 3088 	strh.w	r3, [r4, #136]	@ 0x88
 8002ba8:	f8a4 308a 	strh.w	r3, [r4, #138]	@ 0x8a
 8002bac:	f8a4 308c 	strh.w	r3, [r4, #140]	@ 0x8c
 8002bb0:	f8a4 308e 	strh.w	r3, [r4, #142]	@ 0x8e
 8002bb4:	f8a4 3090 	strh.w	r3, [r4, #144]	@ 0x90
 8002bb8:	f8a4 3092 	strh.w	r3, [r4, #146]	@ 0x92
 8002bbc:	f8a4 3094 	strh.w	r3, [r4, #148]	@ 0x94
 8002bc0:	f8a4 3096 	strh.w	r3, [r4, #150]	@ 0x96
 8002bc4:	f8a4 3098 	strh.w	r3, [r4, #152]	@ 0x98
 8002bc8:	f8a4 309a 	strh.w	r3, [r4, #154]	@ 0x9a
 8002bcc:	f8a4 309c 	strh.w	r3, [r4, #156]	@ 0x9c
 8002bd0:	f8a4 309e 	strh.w	r3, [r4, #158]	@ 0x9e
 8002bd4:	f8a4 30a0 	strh.w	r3, [r4, #160]	@ 0xa0
 8002bd8:	f8a4 30a2 	strh.w	r3, [r4, #162]	@ 0xa2
 8002bdc:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 8002be0:	f8a4 30a6 	strh.w	r3, [r4, #166]	@ 0xa6
 8002be4:	f8a4 30a8 	strh.w	r3, [r4, #168]	@ 0xa8
 8002be8:	f8a4 30aa 	strh.w	r3, [r4, #170]	@ 0xaa
 8002bec:	f8a4 30ac 	strh.w	r3, [r4, #172]	@ 0xac
 8002bf0:	f8a4 30ae 	strh.w	r3, [r4, #174]	@ 0xae
 8002bf4:	7463      	strb	r3, [r4, #17]
 8002bf6:	74a3      	strb	r3, [r4, #18]
 8002bf8:	74e3      	strb	r3, [r4, #19]
 8002bfa:	7423      	strb	r3, [r4, #16]
 8002bfc:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
 8002c00:	f001 fe68 	bl	80048d4 <MC_GetMecSpeedReferenceMotor1>
 8002c04:	2800      	cmp	r0, #0
 8002c06:	d516      	bpl.n	8002c36 <??HT_Init_1>
 8002c08:	f001 fe64 	bl	80048d4 <MC_GetMecSpeedReferenceMotor1>
 8002c0c:	b001      	add	sp, #4
 8002c0e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002c12:	4240      	negs	r0, r0
 8002c14:	2100      	movs	r1, #0
 8002c16:	b200      	sxth	r0, r0
 8002c18:	f001 be4a 	b.w	80048b0 <MC_ProgramSpeedRampMotor1>

08002c1c <??HT_Init_0>:
 8002c1c:	6861      	ldr	r1, [r4, #4]
 8002c1e:	f891 2062 	ldrb.w	r2, [r1, #98]	@ 0x62
 8002c22:	2a01      	cmp	r2, #1
 8002c24:	bf01      	itttt	eq
 8002c26:	2108      	moveq	r1, #8
 8002c28:	6822      	ldreq	r2, [r4, #0]
 8002c2a:	77d1      	strbeq	r1, [r2, #31]
 8002c2c:	2800      	cmpeq	r0, #0
 8002c2e:	d102      	bne.n	8002c36 <??HT_Init_1>
 8002c30:	2102      	movs	r1, #2
 8002c32:	74e0      	strb	r0, [r4, #19]
 8002c34:	7421      	strb	r1, [r4, #16]

08002c36 <??HT_Init_1>:
 8002c36:	b001      	add	sp, #4
 8002c38:	bd30      	pop	{r4, r5, pc}
	...

08002c3c <HT_MF>:
 8002c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c3e:	4604      	mov	r4, r0
 8002c40:	b081      	sub	sp, #4
 8002c42:	6820      	ldr	r0, [r4, #0]
 8002c44:	f001 fede 	bl	8004a04 <MCI_GetSTMState>
 8002c48:	7c21      	ldrb	r1, [r4, #16]
 8002c4a:	2913      	cmp	r1, #19
 8002c4c:	f200 830d 	bhi.w	800326a <??HT_MF_2>
 8002c50:	e8df f011 	tbh	[pc, r1, lsl #1]

08002c54 <??HT_MF_0>:
 8002c54:	0014 030b 0026 004b 030b 0058 0090 00a3     ....&.K...X.....
 8002c64:	00a3 00a3 00ae 00e2 010a 016c 030b 030b     ..........l.....
 8002c74:	018a 01f1 03e1 03ec                         ........

08002c7c <??HT_MF_3>:
 8002c7c:	6862      	ldr	r2, [r4, #4]
 8002c7e:	f892 1062 	ldrb.w	r1, [r2, #98]	@ 0x62
 8002c82:	2901      	cmp	r1, #1
 8002c84:	bf02      	ittt	eq
 8002c86:	2800      	cmpeq	r0, #0
 8002c88:	7c60      	ldrbeq	r0, [r4, #17]
 8002c8a:	2801      	cmpeq	r0, #1
 8002c8c:	f040 82ed 	bne.w	800326a <??HT_MF_2>
 8002c90:	68a0      	ldr	r0, [r4, #8]
 8002c92:	7841      	ldrb	r1, [r0, #1]
 8002c94:	ebc1 1201 	rsb	r2, r1, r1, lsl #4
 8002c98:	0092      	lsls	r2, r2, #2
 8002c9a:	8562      	strh	r2, [r4, #42]	@ 0x2a
 8002c9c:	2002      	movs	r0, #2
 8002c9e:	e2e3      	b.n	8003268 <??HT_MF_4>

08002ca0 <??HT_MF_5>:
 8002ca0:	68a1      	ldr	r1, [r4, #8]
 8002ca2:	f9b1 00a8 	ldrsh.w	r0, [r1, #168]	@ 0xa8
 8002ca6:	2800      	cmp	r0, #0
 8002ca8:	f040 82df 	bne.w	800326a <??HT_MF_2>
 8002cac:	7f60      	ldrb	r0, [r4, #29]
 8002cae:	b148      	cbz	r0, 8002cc4 <??HT_MF_6>
 8002cb0:	f001 fe10 	bl	80048d4 <MC_GetMecSpeedReferenceMotor1>
 8002cb4:	2800      	cmp	r0, #0
 8002cb6:	dc0f      	bgt.n	8002cd8 <??HT_MF_7>
 8002cb8:	f001 fe0c 	bl	80048d4 <MC_GetMecSpeedReferenceMotor1>
 8002cbc:	4240      	negs	r0, r0
 8002cbe:	2100      	movs	r1, #0
 8002cc0:	b200      	sxth	r0, r0
 8002cc2:	e00c      	b.n	8002cde <??HT_MF_8>

08002cc4 <??HT_MF_6>:
 8002cc4:	f001 fe06 	bl	80048d4 <MC_GetMecSpeedReferenceMotor1>
 8002cc8:	2800      	cmp	r0, #0
 8002cca:	dd05      	ble.n	8002cd8 <??HT_MF_7>
 8002ccc:	f001 fe02 	bl	80048d4 <MC_GetMecSpeedReferenceMotor1>
 8002cd0:	4240      	negs	r0, r0
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	b200      	sxth	r0, r0
 8002cd6:	e002      	b.n	8002cde <??HT_MF_8>

08002cd8 <??HT_MF_7>:
 8002cd8:	f001 fdfc 	bl	80048d4 <MC_GetMecSpeedReferenceMotor1>
 8002cdc:	2100      	movs	r1, #0

08002cde <??HT_MF_8>:
 8002cde:	f001 fde7 	bl	80048b0 <MC_ProgramSpeedRampMotor1>
 8002ce2:	f001 fdd9 	bl	8004898 <MC_StartMotor1>
 8002ce6:	2003      	movs	r0, #3
 8002ce8:	e2be      	b.n	8003268 <??HT_MF_4>

08002cea <??HT_MF_9>:
 8002cea:	f001 fded 	bl	80048c8 <MC_HasRampCompletedMotor1>
 8002cee:	2800      	cmp	r0, #0
 8002cf0:	f000 82bb 	beq.w	800326a <??HT_MF_2>
 8002cf4:	7f60      	ldrb	r0, [r4, #29]
 8002cf6:	2100      	movs	r1, #0
 8002cf8:	84e1      	strh	r1, [r4, #38]	@ 0x26
 8002cfa:	2800      	cmp	r0, #0
 8002cfc:	bf0c      	ite	eq
 8002cfe:	200d      	moveq	r0, #13
 8002d00:	2005      	movne	r0, #5
 8002d02:	e2b1      	b.n	8003268 <??HT_MF_4>

08002d04 <??HT_MF_10>:
 8002d04:	2806      	cmp	r0, #6
 8002d06:	f040 82b0 	bne.w	800326a <??HT_MF_2>
 8002d0a:	7ee0      	ldrb	r0, [r4, #27]
 8002d0c:	2801      	cmp	r0, #1
 8002d0e:	d123      	bne.n	8002d58 <??HT_MF_11>
 8002d10:	7de0      	ldrb	r0, [r4, #23]
 8002d12:	2800      	cmp	r0, #0
 8002d14:	bf1c      	itt	ne
 8002d16:	7e20      	ldrbne	r0, [r4, #24]
 8002d18:	2800      	cmpne	r0, #0
 8002d1a:	d001      	beq.n	8002d20 <??HT_MF_12>
 8002d1c:	7e60      	ldrb	r0, [r4, #25]
 8002d1e:	b968      	cbnz	r0, 8002d3c <??HT_MF_13>

08002d20 <??HT_MF_12>:
 8002d20:	6820      	ldr	r0, [r4, #0]
 8002d22:	2108      	movs	r1, #8
 8002d24:	77c1      	strb	r1, [r0, #31]
 8002d26:	2207      	movs	r2, #7
 8002d28:	68a1      	ldr	r1, [r4, #8]
 8002d2a:	7422      	strb	r2, [r4, #16]
 8002d2c:	2000      	movs	r0, #0
 8002d2e:	f8a1 00a8 	strh.w	r0, [r1, #168]	@ 0xa8
 8002d32:	2100      	movs	r1, #0
 8002d34:	84e0      	strh	r0, [r4, #38]	@ 0x26
 8002d36:	7721      	strb	r1, [r4, #28]
 8002d38:	b001      	add	sp, #4
 8002d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d3c <??HT_MF_13>:
 8002d3c:	7ca0      	ldrb	r0, [r4, #18]
 8002d3e:	2101      	movs	r1, #1
 8002d40:	2800      	cmp	r0, #0
 8002d42:	bf1d      	ittte	ne
 8002d44:	2000      	movne	r0, #0
 8002d46:	84e0      	strhne	r0, [r4, #38]	@ 0x26
 8002d48:	200a      	movne	r0, #10
 8002d4a:	2006      	moveq	r0, #6
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	76e2      	strb	r2, [r4, #27]
 8002d50:	7420      	strb	r0, [r4, #16]
 8002d52:	7721      	strb	r1, [r4, #28]
 8002d54:	b001      	add	sp, #4
 8002d56:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d58 <??HT_MF_11>:
 8002d58:	8ce0      	ldrh	r0, [r4, #38]	@ 0x26
 8002d5a:	2800      	cmp	r0, #0
 8002d5c:	d152      	bne.n	8002e04 <??HT_MF_14>
 8002d5e:	7660      	strb	r0, [r4, #25]
 8002d60:	75e0      	strb	r0, [r4, #23]
 8002d62:	75a0      	strb	r0, [r4, #22]
 8002d64:	2100      	movs	r1, #0
 8002d66:	8ce0      	ldrh	r0, [r4, #38]	@ 0x26
 8002d68:	7621      	strb	r1, [r4, #24]
 8002d6a:	1c40      	adds	r0, r0, #1
 8002d6c:	7561      	strb	r1, [r4, #21]
 8002d6e:	84e0      	strh	r0, [r4, #38]	@ 0x26
 8002d70:	b001      	add	sp, #4
 8002d72:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d74 <??HT_MF_15>:
 8002d74:	7fe0      	ldrb	r0, [r4, #31]
 8002d76:	2801      	cmp	r0, #1
 8002d78:	d105      	bne.n	8002d86 <??HT_MF_16>
 8002d7a:	2000      	movs	r0, #0
 8002d7c:	84e0      	strh	r0, [r4, #38]	@ 0x26
 8002d7e:	2101      	movs	r1, #1
 8002d80:	74a1      	strb	r1, [r4, #18]
 8002d82:	200a      	movs	r0, #10
 8002d84:	e270      	b.n	8003268 <??HT_MF_4>

08002d86 <??HT_MF_16>:
 8002d86:	2802      	cmp	r0, #2
 8002d88:	f040 826f 	bne.w	800326a <??HT_MF_2>
 8002d8c:	2001      	movs	r0, #1
 8002d8e:	74a0      	strb	r0, [r4, #18]
 8002d90:	2108      	movs	r1, #8
 8002d92:	6822      	ldr	r2, [r4, #0]
 8002d94:	77d1      	strb	r1, [r2, #31]
 8002d96:	2009      	movs	r0, #9
 8002d98:	e266      	b.n	8003268 <??HT_MF_4>

08002d9a <??HT_MF_17>:
 8002d9a:	7ce0      	ldrb	r0, [r4, #19]
 8002d9c:	2801      	cmp	r0, #1
 8002d9e:	bf1c      	itt	ne
 8002da0:	7d20      	ldrbne	r0, [r4, #20]
 8002da2:	2801      	cmpne	r0, #1
 8002da4:	f040 8261 	bne.w	800326a <??HT_MF_2>
 8002da8:	2112      	movs	r1, #18
 8002daa:	7421      	strb	r1, [r4, #16]
 8002dac:	b001      	add	sp, #4
 8002dae:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002db0 <??HT_MF_18>:
 8002db0:	2806      	cmp	r0, #6
 8002db2:	f040 825a 	bne.w	800326a <??HT_MF_2>
 8002db6:	7ee0      	ldrb	r0, [r4, #27]
 8002db8:	2801      	cmp	r0, #1
 8002dba:	d119      	bne.n	8002df0 <??HT_MF_19>
 8002dbc:	7d60      	ldrb	r0, [r4, #21]
 8002dbe:	2801      	cmp	r0, #1
 8002dc0:	bf04      	itt	eq
 8002dc2:	7da0      	ldrbeq	r0, [r4, #22]
 8002dc4:	2801      	cmpeq	r0, #1
 8002dc6:	d103      	bne.n	8002dd0 <??HT_MF_20>
 8002dc8:	213c      	movs	r1, #60	@ 0x3c
 8002dca:	77a1      	strb	r1, [r4, #30]
 8002dcc:	200b      	movs	r0, #11
 8002dce:	e24b      	b.n	8003268 <??HT_MF_4>

08002dd0 <??HT_MF_20>:
 8002dd0:	7fa0      	ldrb	r0, [r4, #30]
 8002dd2:	b928      	cbnz	r0, 8002de0 <??HT_MF_21>
 8002dd4:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
 8002dd8:	2178      	movs	r1, #120	@ 0x78
 8002dda:	77a1      	strb	r1, [r4, #30]
 8002ddc:	200c      	movs	r0, #12
 8002dde:	e243      	b.n	8003268 <??HT_MF_4>

08002de0 <??HT_MF_21>:
 8002de0:	f994 0024 	ldrsb.w	r0, [r4, #36]	@ 0x24
 8002de4:	2802      	cmp	r0, #2
 8002de6:	bf04      	itt	eq
 8002de8:	2101      	moveq	r1, #1
 8002dea:	76a1      	strbeq	r1, [r4, #26]
 8002dec:	200c      	movs	r0, #12
 8002dee:	e23b      	b.n	8003268 <??HT_MF_4>

08002df0 <??HT_MF_19>:
 8002df0:	8ce0      	ldrh	r0, [r4, #38]	@ 0x26
 8002df2:	b938      	cbnz	r0, 8002e04 <??HT_MF_14>
 8002df4:	7560      	strb	r0, [r4, #21]
 8002df6:	2100      	movs	r1, #0
 8002df8:	8ce0      	ldrh	r0, [r4, #38]	@ 0x26
 8002dfa:	75a1      	strb	r1, [r4, #22]
 8002dfc:	1c40      	adds	r0, r0, #1
 8002dfe:	84e0      	strh	r0, [r4, #38]	@ 0x26
 8002e00:	b001      	add	sp, #4
 8002e02:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e04 <??HT_MF_14>:
 8002e04:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8002e08:	bfa4      	itt	ge
 8002e0a:	2001      	movge	r0, #1
 8002e0c:	76e0      	strbge	r0, [r4, #27]
 8002e0e:	8ce0      	ldrh	r0, [r4, #38]	@ 0x26
 8002e10:	1c40      	adds	r0, r0, #1
 8002e12:	84e0      	strh	r0, [r4, #38]	@ 0x26
 8002e14:	b001      	add	sp, #4
 8002e16:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e18 <??HT_MF_22>:
 8002e18:	2806      	cmp	r0, #6
 8002e1a:	f040 8226 	bne.w	800326a <??HT_MF_2>
 8002e1e:	f8df 3620 	ldr.w	r3, [pc, #1568]	@ 8003440 <??DataTable1>
 8002e22:	7ee1      	ldrb	r1, [r4, #27]
 8002e24:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8002e26:	791d      	ldrb	r5, [r3, #4]
 8002e28:	200b      	movs	r0, #11
 8002e2a:	b12d      	cbz	r5, 8002e38 <??HT_MF_23>
 8002e2c:	2d02      	cmp	r5, #2
 8002e2e:	d014      	beq.n	8002e5a <??HT_MF_24>
 8002e30:	d311      	bcc.n	8002e56 <??HT_MF_25>
 8002e32:	76e1      	strb	r1, [r4, #27]
 8002e34:	84e2      	strh	r2, [r4, #38]	@ 0x26
 8002e36:	e217      	b.n	8003268 <??HT_MF_4>

08002e38 <??HT_MF_23>:
 8002e38:	2001      	movs	r0, #1

08002e3a <??HT_MF_26>:
 8002e3a:	68a1      	ldr	r1, [r4, #8]
 8002e3c:	f881 00cc 	strb.w	r0, [r1, #204]	@ 0xcc
 8002e40:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
 8002e44:	7919      	ldrb	r1, [r3, #4]
 8002e46:	1c49      	adds	r1, r1, #1
 8002e48:	7119      	strb	r1, [r3, #4]

08002e4a <??HT_MF_27>:
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	2100      	movs	r1, #0
 8002e4e:	200a      	movs	r0, #10
 8002e50:	76e1      	strb	r1, [r4, #27]
 8002e52:	84e2      	strh	r2, [r4, #38]	@ 0x26
 8002e54:	e208      	b.n	8003268 <??HT_MF_4>

08002e56 <??HT_MF_25>:
 8002e56:	2002      	movs	r0, #2
 8002e58:	e7ef      	b.n	8002e3a <??HT_MF_26>

08002e5a <??HT_MF_24>:
 8002e5a:	68a1      	ldr	r1, [r4, #8]
 8002e5c:	2004      	movs	r0, #4
 8002e5e:	f881 00cc 	strb.w	r0, [r1, #204]	@ 0xcc
 8002e62:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
 8002e66:	e7f0      	b.n	8002e4a <??HT_MF_27>

08002e68 <??HT_MF_28>:
 8002e68:	2806      	cmp	r0, #6
 8002e6a:	f040 81fe 	bne.w	800326a <??HT_MF_2>
 8002e6e:	7fa2      	ldrb	r2, [r4, #30]
 8002e70:	210c      	movs	r1, #12
 8002e72:	2a3c      	cmp	r2, #60	@ 0x3c
 8002e74:	bf04      	itt	eq
 8002e76:	7ea0      	ldrbeq	r0, [r4, #26]
 8002e78:	2800      	cmpeq	r0, #0
 8002e7a:	d124      	bne.n	8002ec6 <??HT_MF_29>
 8002e7c:	68a0      	ldr	r0, [r4, #8]
 8002e7e:	f994 1024 	ldrsb.w	r1, [r4, #36]	@ 0x24
 8002e82:	f9b0 00a8 	ldrsh.w	r0, [r0, #168]	@ 0xa8
 8002e86:	2901      	cmp	r1, #1
 8002e88:	d107      	bne.n	8002e9a <??HT_MF_30>
 8002e8a:	2800      	cmp	r0, #0
 8002e8c:	d502      	bpl.n	8002e94 <??HT_MF_31>
 8002e8e:	2002      	movs	r0, #2
 8002e90:	2203      	movs	r2, #3
 8002e92:	e00b      	b.n	8002eac <??HT_MF_32>

08002e94 <??HT_MF_31>:
 8002e94:	2003      	movs	r0, #3
 8002e96:	2202      	movs	r2, #2
 8002e98:	e008      	b.n	8002eac <??HT_MF_32>

08002e9a <??HT_MF_30>:
 8002e9a:	2800      	cmp	r0, #0
 8002e9c:	d503      	bpl.n	8002ea6 <??HT_MF_33>
 8002e9e:	2001      	movs	r0, #1
 8002ea0:	2103      	movs	r1, #3
 8002ea2:	2202      	movs	r2, #2
 8002ea4:	e002      	b.n	8002eac <??HT_MF_32>

08002ea6 <??HT_MF_33>:
 8002ea6:	2002      	movs	r0, #2
 8002ea8:	2103      	movs	r1, #3
 8002eaa:	2201      	movs	r2, #1

08002eac <??HT_MF_32>:
 8002eac:	f884 1021 	strb.w	r1, [r4, #33]	@ 0x21
 8002eb0:	f884 2022 	strb.w	r2, [r4, #34]	@ 0x22
 8002eb4:	f884 0020 	strb.w	r0, [r4, #32]
 8002eb8:	2008      	movs	r0, #8
 8002eba:	6821      	ldr	r1, [r4, #0]
 8002ebc:	77c8      	strb	r0, [r1, #31]
 8002ebe:	2108      	movs	r1, #8
 8002ec0:	7421      	strb	r1, [r4, #16]
 8002ec2:	b001      	add	sp, #4
 8002ec4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ec6 <??HT_MF_29>:
 8002ec6:	f894 0020 	ldrb.w	r0, [r4, #32]
 8002eca:	f894 3021 	ldrb.w	r3, [r4, #33]	@ 0x21
 8002ece:	f894 5022 	ldrb.w	r5, [r4, #34]	@ 0x22
 8002ed2:	2a3c      	cmp	r2, #60	@ 0x3c
 8002ed4:	d117      	bne.n	8002f06 <??HT_MF_34>
 8002ed6:	7ea2      	ldrb	r2, [r4, #26]
 8002ed8:	2a01      	cmp	r2, #1
 8002eda:	d10b      	bne.n	8002ef4 <??HT_MF_35>
 8002edc:	68a0      	ldr	r0, [r4, #8]
 8002ede:	f9b0 10a8 	ldrsh.w	r1, [r0, #168]	@ 0xa8
 8002ee2:	2900      	cmp	r1, #0
 8002ee4:	d51d      	bpl.n	8002f22 <??HT_MF_36>
 8002ee6:	6821      	ldr	r1, [r4, #0]
 8002ee8:	2008      	movs	r0, #8
 8002eea:	77c8      	strb	r0, [r1, #31]
 8002eec:	2302      	movs	r3, #2
 8002eee:	2003      	movs	r0, #3
 8002ef0:	2501      	movs	r5, #1

08002ef2 <??HT_MF_37>:
 8002ef2:	2108      	movs	r1, #8

08002ef4 <??HT_MF_35>:
 8002ef4:	f884 0020 	strb.w	r0, [r4, #32]
 8002ef8:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
 8002efc:	f884 5022 	strb.w	r5, [r4, #34]	@ 0x22
 8002f00:	7421      	strb	r1, [r4, #16]
 8002f02:	b001      	add	sp, #4
 8002f04:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002f06 <??HT_MF_34>:
 8002f06:	2a78      	cmp	r2, #120	@ 0x78
 8002f08:	d1f4      	bne.n	8002ef4 <??HT_MF_35>
 8002f0a:	68a0      	ldr	r0, [r4, #8]
 8002f0c:	f9b0 10a8 	ldrsh.w	r1, [r0, #168]	@ 0xa8
 8002f10:	2900      	cmp	r1, #0
 8002f12:	d506      	bpl.n	8002f22 <??HT_MF_36>
 8002f14:	6821      	ldr	r1, [r4, #0]
 8002f16:	2008      	movs	r0, #8
 8002f18:	77c8      	strb	r0, [r1, #31]
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	2002      	movs	r0, #2
 8002f1e:	2503      	movs	r5, #3
 8002f20:	e7e7      	b.n	8002ef2 <??HT_MF_37>

08002f22 <??HT_MF_36>:
 8002f22:	2001      	movs	r0, #1
 8002f24:	2302      	movs	r3, #2
 8002f26:	2503      	movs	r5, #3
 8002f28:	210d      	movs	r1, #13
 8002f2a:	e7e3      	b.n	8002ef4 <??HT_MF_35>

08002f2c <??HT_MF_38>:
 8002f2c:	2806      	cmp	r0, #6
 8002f2e:	f040 819c 	bne.w	800326a <??HT_MF_2>
 8002f32:	68a1      	ldr	r1, [r4, #8]
 8002f34:	f9b1 00a8 	ldrsh.w	r0, [r1, #168]	@ 0xa8
 8002f38:	2800      	cmp	r0, #0
 8002f3a:	f000 8196 	beq.w	800326a <??HT_MF_2>
 8002f3e:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
 8002f40:	f242 7310 	movw	r3, #10000	@ 0x2710
 8002f44:	4299      	cmp	r1, r3
 8002f46:	da0d      	bge.n	8002f64 <??HT_MF_39>
 8002f48:	2064      	movs	r0, #100	@ 0x64
 8002f4a:	fb00 f201 	mul.w	r2, r0, r1
 8002f4e:	f8df 54f4 	ldr.w	r5, [pc, #1268]	@ 8003444 <??DataTable1_1>
 8002f52:	fb82 6505 	smull	r6, r5, r2, r5
 8002f56:	0b2a      	lsrs	r2, r5, #12
 8002f58:	1c49      	adds	r1, r1, #1
 8002f5a:	f884 2023 	strb.w	r2, [r4, #35]	@ 0x23
 8002f5e:	8521      	strh	r1, [r4, #40]	@ 0x28
 8002f60:	b001      	add	sp, #4
 8002f62:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002f64 <??HT_MF_39>:
 8002f64:	200e      	movs	r0, #14
 8002f66:	e17f      	b.n	8003268 <??HT_MF_4>

08002f68 <??HT_MF_40>:
 8002f68:	f9b4 002c 	ldrsh.w	r0, [r4, #44]	@ 0x2c
 8002f6c:	f001 fe8e 	bl	8004c8c <MCM_Trig_Functions>
 8002f70:	f8df 14cc 	ldr.w	r1, [pc, #1228]	@ 8003440 <??DataTable1>
 8002f74:	6008      	str	r0, [r1, #0]
 8002f76:	f894 004c 	ldrb.w	r0, [r4, #76]	@ 0x4c
 8002f7a:	1e40      	subs	r0, r0, #1
 8002f7c:	2805      	cmp	r0, #5
 8002f7e:	d845      	bhi.n	800300c <??HT_MF_41>
 8002f80:	e8df f000 	tbb	[pc, r0]

08002f84 <??HT_MF_1>:
 8002f84:	0e03 2419 3a2f                              ...$/:

08002f8a <??HT_MF_42>:
 8002f8a:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8002f8c:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
 8002f90:	1810      	adds	r0, r2, r0
 8002f92:	6520      	str	r0, [r4, #80]	@ 0x50
 8002f94:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002f96:	f9b1 0000 	ldrsh.w	r0, [r1]
 8002f9a:	1810      	adds	r0, r2, r0
 8002f9c:	6560      	str	r0, [r4, #84]	@ 0x54
 8002f9e:	e035      	b.n	800300c <??HT_MF_41>

08002fa0 <??HT_MF_43>:
 8002fa0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002fa2:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 8002fa6:	1882      	adds	r2, r0, r2
 8002fa8:	65a2      	str	r2, [r4, #88]	@ 0x58
 8002faa:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8002fac:	f9b1 2000 	ldrsh.w	r2, [r1]
 8002fb0:	1882      	adds	r2, r0, r2
 8002fb2:	65e2      	str	r2, [r4, #92]	@ 0x5c
 8002fb4:	e02a      	b.n	800300c <??HT_MF_41>

08002fb6 <??HT_MF_44>:
 8002fb6:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8002fb8:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 8002fbc:	1882      	adds	r2, r0, r2
 8002fbe:	6622      	str	r2, [r4, #96]	@ 0x60
 8002fc0:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 8002fc2:	f9b1 2000 	ldrsh.w	r2, [r1]
 8002fc6:	1882      	adds	r2, r0, r2
 8002fc8:	6662      	str	r2, [r4, #100]	@ 0x64
 8002fca:	e01f      	b.n	800300c <??HT_MF_41>

08002fcc <??HT_MF_45>:
 8002fcc:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 8002fce:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 8002fd2:	1882      	adds	r2, r0, r2
 8002fd4:	66a2      	str	r2, [r4, #104]	@ 0x68
 8002fd6:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 8002fd8:	f9b1 2000 	ldrsh.w	r2, [r1]
 8002fdc:	1882      	adds	r2, r0, r2
 8002fde:	66e2      	str	r2, [r4, #108]	@ 0x6c
 8002fe0:	e014      	b.n	800300c <??HT_MF_41>

08002fe2 <??HT_MF_46>:
 8002fe2:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8002fe4:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 8002fe8:	1882      	adds	r2, r0, r2
 8002fea:	6722      	str	r2, [r4, #112]	@ 0x70
 8002fec:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8002fee:	f9b1 2000 	ldrsh.w	r2, [r1]
 8002ff2:	1882      	adds	r2, r0, r2
 8002ff4:	6762      	str	r2, [r4, #116]	@ 0x74
 8002ff6:	e009      	b.n	800300c <??HT_MF_41>

08002ff8 <??HT_MF_47>:
 8002ff8:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 8002ffa:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 8002ffe:	1882      	adds	r2, r0, r2
 8003000:	67a2      	str	r2, [r4, #120]	@ 0x78
 8003002:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 8003004:	f9b1 2000 	ldrsh.w	r2, [r1]
 8003008:	1882      	adds	r2, r0, r2
 800300a:	67e2      	str	r2, [r4, #124]	@ 0x7c

0800300c <??HT_MF_41>:
 800300c:	2064      	movs	r0, #100	@ 0x64
 800300e:	88ca      	ldrh	r2, [r1, #6]
 8003010:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003012:	4342      	muls	r2, r0
 8003014:	fb92 f3f3 	sdiv	r3, r2, r3
 8003018:	f884 3023 	strb.w	r3, [r4, #35]	@ 0x23
 800301c:	88c8      	ldrh	r0, [r1, #6]
 800301e:	1c40      	adds	r0, r0, #1
 8003020:	80c8      	strh	r0, [r1, #6]
 8003022:	b280      	uxth	r0, r0
 8003024:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
 8003026:	4288      	cmp	r0, r1
 8003028:	bf23      	ittte	cs
 800302a:	2007      	movcs	r0, #7
 800302c:	f884 004c 	strbcs.w	r0, [r4, #76]	@ 0x4c
 8003030:	2011      	movcs	r0, #17
 8003032:	200e      	movcc	r0, #14
 8003034:	e118      	b.n	8003268 <??HT_MF_4>

08003036 <??HT_MF_48>:
 8003036:	8d60      	ldrh	r0, [r4, #42]	@ 0x2a
 8003038:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800303a:	f8df 340c 	ldr.w	r3, [pc, #1036]	@ 8003448 <??DataTable1_2>
 800303e:	f64a 21ab 	movw	r1, #43691	@ 0xaaab
 8003042:	4341      	muls	r1, r0
 8003044:	0c88      	lsrs	r0, r1, #18
 8003046:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8003048:	fb92 f2f0 	sdiv	r2, r2, r0
 800304c:	fb91 f1f0 	sdiv	r1, r1, r0
 8003050:	6562      	str	r2, [r4, #84]	@ 0x54
 8003052:	6521      	str	r1, [r4, #80]	@ 0x50
 8003054:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8003056:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8003058:	fb92 f2f0 	sdiv	r2, r2, r0
 800305c:	fb91 f1f0 	sdiv	r1, r1, r0
 8003060:	65e2      	str	r2, [r4, #92]	@ 0x5c
 8003062:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003064:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003066:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 8003068:	fb92 f2f0 	sdiv	r2, r2, r0
 800306c:	fb91 f1f0 	sdiv	r1, r1, r0
 8003070:	6662      	str	r2, [r4, #100]	@ 0x64
 8003072:	6621      	str	r1, [r4, #96]	@ 0x60
 8003074:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8003076:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8003078:	fb92 f5f0 	sdiv	r5, r2, r0
 800307c:	6f62      	ldr	r2, [r4, #116]	@ 0x74
 800307e:	fb91 f6f0 	sdiv	r6, r1, r0
 8003082:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8003084:	fb92 f7f0 	sdiv	r7, r2, r0
 8003088:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800308a:	66e5      	str	r5, [r4, #108]	@ 0x6c
 800308c:	fb92 f2f0 	sdiv	r2, r2, r0
 8003090:	67e2      	str	r2, [r4, #124]	@ 0x7c
 8003092:	fb91 fcf0 	sdiv	ip, r1, r0
 8003096:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 8003098:	4aec      	ldr	r2, [pc, #944]	@ (800344c <??DataTable1_3>)
 800309a:	66a6      	str	r6, [r4, #104]	@ 0x68
 800309c:	fb91 f0f0 	sdiv	r0, r1, r0
 80030a0:	67a0      	str	r0, [r4, #120]	@ 0x78
 80030a2:	21b4      	movs	r1, #180	@ 0xb4
 80030a4:	7f60      	ldrb	r0, [r4, #29]
 80030a6:	6767      	str	r7, [r4, #116]	@ 0x74
 80030a8:	f8c4 c070 	str.w	ip, [r4, #112]	@ 0x70
 80030ac:	2800      	cmp	r0, #0
 80030ae:	6013      	str	r3, [r2, #0]
 80030b0:	f000 80dd 	beq.w	800326e <??HT_MF_49>
 80030b4:	6057      	str	r7, [r2, #4]
 80030b6:	f8c2 c004 	str.w	ip, [r2, #4]
 80030ba:	6890      	ldr	r0, [r2, #8]
 80030bc:	0c00      	lsrs	r0, r0, #16
 80030be:	fb10 f501 	smulbb	r5, r0, r1
 80030c2:	13ae      	asrs	r6, r5, #14
 80030c4:	eb05 4556 	add.w	r5, r5, r6, lsr #17
 80030c8:	13ed      	asrs	r5, r5, #15
 80030ca:	b22f      	sxth	r7, r5
 80030cc:	2f00      	cmp	r7, #0
 80030ce:	bf48      	it	mi
 80030d0:	f505 75b4 	addmi.w	r5, r5, #360	@ 0x168
 80030d4:	8625      	strh	r5, [r4, #48]	@ 0x30
 80030d6:	6d26      	ldr	r6, [r4, #80]	@ 0x50
 80030d8:	6f25      	ldr	r5, [r4, #112]	@ 0x70
 80030da:	6f67      	ldr	r7, [r4, #116]	@ 0x74
 80030dc:	f8d4 c054 	ldr.w	ip, [r4, #84]	@ 0x54
 80030e0:	fb05 fe06 	mul.w	lr, r5, r6
 80030e4:	437e      	muls	r6, r7
 80030e6:	fb07 ee0c 	mla	lr, r7, ip, lr
 80030ea:	fb0c 6515 	mls	r5, ip, r5, r6
 80030ee:	f8c4 e048 	str.w	lr, [r4, #72]	@ 0x48
 80030f2:	6465      	str	r5, [r4, #68]	@ 0x44
 80030f4:	6013      	str	r3, [r2, #0]
 80030f6:	f8c2 e004 	str.w	lr, [r2, #4]
 80030fa:	6055      	str	r5, [r2, #4]
 80030fc:	6895      	ldr	r5, [r2, #8]
 80030fe:	85e0      	strh	r0, [r4, #46]	@ 0x2e
 8003100:	0c2d      	lsrs	r5, r5, #16
 8003102:	f8a4 5080 	strh.w	r5, [r4, #128]	@ 0x80
 8003106:	f9b4 0080 	ldrsh.w	r0, [r4, #128]	@ 0x80
 800310a:	6d66      	ldr	r6, [r4, #84]	@ 0x54
 800310c:	6e67      	ldr	r7, [r4, #100]	@ 0x64
 800310e:	fb10 f001 	smulbb	r0, r0, r1
 8003112:	1385      	asrs	r5, r0, #14
 8003114:	eb00 4055 	add.w	r0, r0, r5, lsr #17
 8003118:	13c0      	asrs	r0, r0, #15
 800311a:	f8a4 0082 	strh.w	r0, [r4, #130]	@ 0x82
 800311e:	6e25      	ldr	r5, [r4, #96]	@ 0x60
 8003120:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8003122:	fb00 fc05 	mul.w	ip, r0, r5
 8003126:	4375      	muls	r5, r6
 8003128:	fb06 cc07 	mla	ip, r6, r7, ip
 800312c:	fb07 5010 	mls	r0, r7, r0, r5
 8003130:	f8c4 c048 	str.w	ip, [r4, #72]	@ 0x48
 8003134:	6460      	str	r0, [r4, #68]	@ 0x44
 8003136:	6013      	str	r3, [r2, #0]
 8003138:	f8c2 c004 	str.w	ip, [r2, #4]
 800313c:	6050      	str	r0, [r2, #4]
 800313e:	6890      	ldr	r0, [r2, #8]
 8003140:	6e66      	ldr	r6, [r4, #100]	@ 0x64
 8003142:	6de7      	ldr	r7, [r4, #92]	@ 0x5c
 8003144:	0c00      	lsrs	r0, r0, #16
 8003146:	f8a4 0084 	strh.w	r0, [r4, #132]	@ 0x84
 800314a:	f9b4 0084 	ldrsh.w	r0, [r4, #132]	@ 0x84
 800314e:	fb10 f001 	smulbb	r0, r0, r1
 8003152:	1385      	asrs	r5, r0, #14
 8003154:	eb00 4055 	add.w	r0, r0, r5, lsr #17
 8003158:	13c0      	asrs	r0, r0, #15
 800315a:	f8a4 0086 	strh.w	r0, [r4, #134]	@ 0x86
 800315e:	6da5      	ldr	r5, [r4, #88]	@ 0x58
 8003160:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8003162:	fb00 fc05 	mul.w	ip, r0, r5
 8003166:	4375      	muls	r5, r6
 8003168:	fb06 cc07 	mla	ip, r6, r7, ip
 800316c:	fb07 5010 	mls	r0, r7, r0, r5
 8003170:	f8c4 c048 	str.w	ip, [r4, #72]	@ 0x48
 8003174:	6460      	str	r0, [r4, #68]	@ 0x44
 8003176:	6013      	str	r3, [r2, #0]
 8003178:	f8c2 c004 	str.w	ip, [r2, #4]
 800317c:	6050      	str	r0, [r2, #4]
 800317e:	6890      	ldr	r0, [r2, #8]
 8003180:	6de6      	ldr	r6, [r4, #92]	@ 0x5c
 8003182:	6fe7      	ldr	r7, [r4, #124]	@ 0x7c
 8003184:	0c00      	lsrs	r0, r0, #16
 8003186:	f8a4 0088 	strh.w	r0, [r4, #136]	@ 0x88
 800318a:	f9b4 0088 	ldrsh.w	r0, [r4, #136]	@ 0x88
 800318e:	fb10 f001 	smulbb	r0, r0, r1
 8003192:	1385      	asrs	r5, r0, #14
 8003194:	eb00 4055 	add.w	r0, r0, r5, lsr #17
 8003198:	13c0      	asrs	r0, r0, #15
 800319a:	f8a4 008a 	strh.w	r0, [r4, #138]	@ 0x8a
 800319e:	6fa5      	ldr	r5, [r4, #120]	@ 0x78
 80031a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80031a2:	fb00 fc05 	mul.w	ip, r0, r5
 80031a6:	4375      	muls	r5, r6
 80031a8:	fb06 cc07 	mla	ip, r6, r7, ip
 80031ac:	fb07 5010 	mls	r0, r7, r0, r5
 80031b0:	f8c4 c048 	str.w	ip, [r4, #72]	@ 0x48
 80031b4:	6460      	str	r0, [r4, #68]	@ 0x44
 80031b6:	6013      	str	r3, [r2, #0]
 80031b8:	f8c2 c004 	str.w	ip, [r2, #4]
 80031bc:	6050      	str	r0, [r2, #4]
 80031be:	6890      	ldr	r0, [r2, #8]
 80031c0:	6fe6      	ldr	r6, [r4, #124]	@ 0x7c
 80031c2:	6ee7      	ldr	r7, [r4, #108]	@ 0x6c
 80031c4:	0c00      	lsrs	r0, r0, #16
 80031c6:	f8a4 008c 	strh.w	r0, [r4, #140]	@ 0x8c
 80031ca:	f9b4 008c 	ldrsh.w	r0, [r4, #140]	@ 0x8c
 80031ce:	fb10 f001 	smulbb	r0, r0, r1
 80031d2:	1385      	asrs	r5, r0, #14
 80031d4:	eb00 4055 	add.w	r0, r0, r5, lsr #17
 80031d8:	13c0      	asrs	r0, r0, #15
 80031da:	f8a4 008e 	strh.w	r0, [r4, #142]	@ 0x8e
 80031de:	6ea5      	ldr	r5, [r4, #104]	@ 0x68
 80031e0:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 80031e2:	fb00 fc05 	mul.w	ip, r0, r5
 80031e6:	4375      	muls	r5, r6
 80031e8:	fb06 cc07 	mla	ip, r6, r7, ip
 80031ec:	fb07 5010 	mls	r0, r7, r0, r5
 80031f0:	f8c4 c048 	str.w	ip, [r4, #72]	@ 0x48
 80031f4:	6460      	str	r0, [r4, #68]	@ 0x44
 80031f6:	6013      	str	r3, [r2, #0]
 80031f8:	f8c2 c004 	str.w	ip, [r2, #4]
 80031fc:	6050      	str	r0, [r2, #4]
 80031fe:	6890      	ldr	r0, [r2, #8]
 8003200:	6ee6      	ldr	r6, [r4, #108]	@ 0x6c
 8003202:	6f67      	ldr	r7, [r4, #116]	@ 0x74
 8003204:	0c00      	lsrs	r0, r0, #16
 8003206:	f8a4 0090 	strh.w	r0, [r4, #144]	@ 0x90
 800320a:	f9b4 0090 	ldrsh.w	r0, [r4, #144]	@ 0x90
 800320e:	fb10 f001 	smulbb	r0, r0, r1
 8003212:	1385      	asrs	r5, r0, #14
 8003214:	eb00 4055 	add.w	r0, r0, r5, lsr #17
 8003218:	13c0      	asrs	r0, r0, #15
 800321a:	f8a4 0092 	strh.w	r0, [r4, #146]	@ 0x92
 800321e:	6f25      	ldr	r5, [r4, #112]	@ 0x70
 8003220:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 8003222:	fb00 fc05 	mul.w	ip, r0, r5
 8003226:	4375      	muls	r5, r6
 8003228:	fb06 cc07 	mla	ip, r6, r7, ip
 800322c:	fb07 5010 	mls	r0, r7, r0, r5
 8003230:	f8c4 c048 	str.w	ip, [r4, #72]	@ 0x48
 8003234:	6460      	str	r0, [r4, #68]	@ 0x44
 8003236:	6013      	str	r3, [r2, #0]
 8003238:	f8c2 c004 	str.w	ip, [r2, #4]
 800323c:	6050      	str	r0, [r2, #4]
 800323e:	6890      	ldr	r0, [r2, #8]
 8003240:	0c00      	lsrs	r0, r0, #16
 8003242:	f8a4 0094 	strh.w	r0, [r4, #148]	@ 0x94
 8003246:	f9b4 0094 	ldrsh.w	r0, [r4, #148]	@ 0x94
 800324a:	fb10 f001 	smulbb	r0, r0, r1
 800324e:	1381      	asrs	r1, r0, #14
 8003250:	eb00 4051 	add.w	r0, r0, r1, lsr #17
 8003254:	13c0      	asrs	r0, r0, #15
 8003256:	f8a4 0096 	strh.w	r0, [r4, #150]	@ 0x96
 800325a:	2000      	movs	r0, #0
 800325c:	4978      	ldr	r1, [pc, #480]	@ (8003440 <??DataTable1>)
 800325e:	80c8      	strh	r0, [r1, #6]
 8003260:	7760      	strb	r0, [r4, #29]
 8003262:	2001      	movs	r0, #1
 8003264:	74e0      	strb	r0, [r4, #19]
 8003266:	2012      	movs	r0, #18

08003268 <??HT_MF_4>:
 8003268:	7420      	strb	r0, [r4, #16]

0800326a <??HT_MF_2>:
 800326a:	b001      	add	sp, #4
 800326c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800326e <??HT_MF_49>:
 800326e:	6055      	str	r5, [r2, #4]
 8003270:	6056      	str	r6, [r2, #4]
 8003272:	6890      	ldr	r0, [r2, #8]
 8003274:	0c00      	lsrs	r0, r0, #16
 8003276:	fb10 f501 	smulbb	r5, r0, r1
 800327a:	13ae      	asrs	r6, r5, #14
 800327c:	eb05 4556 	add.w	r5, r5, r6, lsr #17
 8003280:	13ed      	asrs	r5, r5, #15
 8003282:	b22f      	sxth	r7, r5
 8003284:	2f00      	cmp	r7, #0
 8003286:	bf48      	it	mi
 8003288:	f505 75b4 	addmi.w	r5, r5, #360	@ 0x168
 800328c:	86a5      	strh	r5, [r4, #52]	@ 0x34
 800328e:	6ea6      	ldr	r6, [r4, #104]	@ 0x68
 8003290:	6f25      	ldr	r5, [r4, #112]	@ 0x70
 8003292:	6f67      	ldr	r7, [r4, #116]	@ 0x74
 8003294:	f8d4 c06c 	ldr.w	ip, [r4, #108]	@ 0x6c
 8003298:	fb05 fe06 	mul.w	lr, r5, r6
 800329c:	437e      	muls	r6, r7
 800329e:	fb07 ee0c 	mla	lr, r7, ip, lr
 80032a2:	fb0c 6515 	mls	r5, ip, r5, r6
 80032a6:	f8c4 e048 	str.w	lr, [r4, #72]	@ 0x48
 80032aa:	6465      	str	r5, [r4, #68]	@ 0x44
 80032ac:	6013      	str	r3, [r2, #0]
 80032ae:	f8c2 e004 	str.w	lr, [r2, #4]
 80032b2:	6055      	str	r5, [r2, #4]
 80032b4:	6895      	ldr	r5, [r2, #8]
 80032b6:	8660      	strh	r0, [r4, #50]	@ 0x32
 80032b8:	0c2d      	lsrs	r5, r5, #16
 80032ba:	f8a4 5098 	strh.w	r5, [r4, #152]	@ 0x98
 80032be:	f9b4 0098 	ldrsh.w	r0, [r4, #152]	@ 0x98
 80032c2:	6ee6      	ldr	r6, [r4, #108]	@ 0x6c
 80032c4:	6fe7      	ldr	r7, [r4, #124]	@ 0x7c
 80032c6:	fb10 f001 	smulbb	r0, r0, r1
 80032ca:	1385      	asrs	r5, r0, #14
 80032cc:	eb00 4055 	add.w	r0, r0, r5, lsr #17
 80032d0:	13c0      	asrs	r0, r0, #15
 80032d2:	f8a4 009a 	strh.w	r0, [r4, #154]	@ 0x9a
 80032d6:	6fa5      	ldr	r5, [r4, #120]	@ 0x78
 80032d8:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 80032da:	fb00 fc05 	mul.w	ip, r0, r5
 80032de:	4375      	muls	r5, r6
 80032e0:	fb06 cc07 	mla	ip, r6, r7, ip
 80032e4:	fb07 5010 	mls	r0, r7, r0, r5
 80032e8:	f8c4 c048 	str.w	ip, [r4, #72]	@ 0x48
 80032ec:	6460      	str	r0, [r4, #68]	@ 0x44
 80032ee:	6013      	str	r3, [r2, #0]
 80032f0:	f8c2 c004 	str.w	ip, [r2, #4]
 80032f4:	6050      	str	r0, [r2, #4]
 80032f6:	6890      	ldr	r0, [r2, #8]
 80032f8:	6fe6      	ldr	r6, [r4, #124]	@ 0x7c
 80032fa:	6de7      	ldr	r7, [r4, #92]	@ 0x5c
 80032fc:	0c00      	lsrs	r0, r0, #16
 80032fe:	f8a4 009c 	strh.w	r0, [r4, #156]	@ 0x9c
 8003302:	f9b4 009c 	ldrsh.w	r0, [r4, #156]	@ 0x9c
 8003306:	fb10 f001 	smulbb	r0, r0, r1
 800330a:	1385      	asrs	r5, r0, #14
 800330c:	eb00 4055 	add.w	r0, r0, r5, lsr #17
 8003310:	13c0      	asrs	r0, r0, #15
 8003312:	f8a4 009e 	strh.w	r0, [r4, #158]	@ 0x9e
 8003316:	6da5      	ldr	r5, [r4, #88]	@ 0x58
 8003318:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 800331a:	fb00 fc05 	mul.w	ip, r0, r5
 800331e:	4375      	muls	r5, r6
 8003320:	fb06 cc07 	mla	ip, r6, r7, ip
 8003324:	fb07 5010 	mls	r0, r7, r0, r5
 8003328:	f8c4 c048 	str.w	ip, [r4, #72]	@ 0x48
 800332c:	6460      	str	r0, [r4, #68]	@ 0x44
 800332e:	6013      	str	r3, [r2, #0]
 8003330:	f8c2 c004 	str.w	ip, [r2, #4]
 8003334:	6050      	str	r0, [r2, #4]
 8003336:	6890      	ldr	r0, [r2, #8]
 8003338:	6de6      	ldr	r6, [r4, #92]	@ 0x5c
 800333a:	6e67      	ldr	r7, [r4, #100]	@ 0x64
 800333c:	0c00      	lsrs	r0, r0, #16
 800333e:	f8a4 00a0 	strh.w	r0, [r4, #160]	@ 0xa0
 8003342:	f9b4 00a0 	ldrsh.w	r0, [r4, #160]	@ 0xa0
 8003346:	fb10 f001 	smulbb	r0, r0, r1
 800334a:	1385      	asrs	r5, r0, #14
 800334c:	eb00 4055 	add.w	r0, r0, r5, lsr #17
 8003350:	13c0      	asrs	r0, r0, #15
 8003352:	f8a4 00a2 	strh.w	r0, [r4, #162]	@ 0xa2
 8003356:	6e25      	ldr	r5, [r4, #96]	@ 0x60
 8003358:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800335a:	fb00 fc05 	mul.w	ip, r0, r5
 800335e:	4375      	muls	r5, r6
 8003360:	fb06 cc07 	mla	ip, r6, r7, ip
 8003364:	fb07 5010 	mls	r0, r7, r0, r5
 8003368:	f8c4 c048 	str.w	ip, [r4, #72]	@ 0x48
 800336c:	6460      	str	r0, [r4, #68]	@ 0x44
 800336e:	6013      	str	r3, [r2, #0]
 8003370:	f8c2 c004 	str.w	ip, [r2, #4]
 8003374:	6050      	str	r0, [r2, #4]
 8003376:	6890      	ldr	r0, [r2, #8]
 8003378:	6e66      	ldr	r6, [r4, #100]	@ 0x64
 800337a:	6d67      	ldr	r7, [r4, #84]	@ 0x54
 800337c:	0c00      	lsrs	r0, r0, #16
 800337e:	f8a4 00a4 	strh.w	r0, [r4, #164]	@ 0xa4
 8003382:	f9b4 00a4 	ldrsh.w	r0, [r4, #164]	@ 0xa4
 8003386:	fb10 f001 	smulbb	r0, r0, r1
 800338a:	1385      	asrs	r5, r0, #14
 800338c:	eb00 4055 	add.w	r0, r0, r5, lsr #17
 8003390:	13c0      	asrs	r0, r0, #15
 8003392:	f8a4 00a6 	strh.w	r0, [r4, #166]	@ 0xa6
 8003396:	6d25      	ldr	r5, [r4, #80]	@ 0x50
 8003398:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 800339a:	fb00 fc05 	mul.w	ip, r0, r5
 800339e:	4375      	muls	r5, r6
 80033a0:	fb06 cc07 	mla	ip, r6, r7, ip
 80033a4:	fb07 5010 	mls	r0, r7, r0, r5
 80033a8:	f8c4 c048 	str.w	ip, [r4, #72]	@ 0x48
 80033ac:	6460      	str	r0, [r4, #68]	@ 0x44
 80033ae:	6013      	str	r3, [r2, #0]
 80033b0:	f8c2 c004 	str.w	ip, [r2, #4]
 80033b4:	6050      	str	r0, [r2, #4]
 80033b6:	6890      	ldr	r0, [r2, #8]
 80033b8:	6d66      	ldr	r6, [r4, #84]	@ 0x54
 80033ba:	6f67      	ldr	r7, [r4, #116]	@ 0x74
 80033bc:	0c00      	lsrs	r0, r0, #16
 80033be:	f8a4 00a8 	strh.w	r0, [r4, #168]	@ 0xa8
 80033c2:	f9b4 00a8 	ldrsh.w	r0, [r4, #168]	@ 0xa8
 80033c6:	fb10 f001 	smulbb	r0, r0, r1
 80033ca:	1385      	asrs	r5, r0, #14
 80033cc:	eb00 4055 	add.w	r0, r0, r5, lsr #17
 80033d0:	13c0      	asrs	r0, r0, #15
 80033d2:	f8a4 00aa 	strh.w	r0, [r4, #170]	@ 0xaa
 80033d6:	6f25      	ldr	r5, [r4, #112]	@ 0x70
 80033d8:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 80033da:	fb00 fc05 	mul.w	ip, r0, r5
 80033de:	4375      	muls	r5, r6
 80033e0:	fb06 cc07 	mla	ip, r6, r7, ip
 80033e4:	fb07 5010 	mls	r0, r7, r0, r5
 80033e8:	f8c4 c048 	str.w	ip, [r4, #72]	@ 0x48
 80033ec:	6460      	str	r0, [r4, #68]	@ 0x44
 80033ee:	6013      	str	r3, [r2, #0]
 80033f0:	f8c2 c004 	str.w	ip, [r2, #4]
 80033f4:	6050      	str	r0, [r2, #4]
 80033f6:	6890      	ldr	r0, [r2, #8]
 80033f8:	0c00      	lsrs	r0, r0, #16
 80033fa:	f8a4 00ac 	strh.w	r0, [r4, #172]	@ 0xac
 80033fe:	f9b4 00ac 	ldrsh.w	r0, [r4, #172]	@ 0xac
 8003402:	fb10 f001 	smulbb	r0, r0, r1
 8003406:	1381      	asrs	r1, r0, #14
 8003408:	eb00 4051 	add.w	r0, r0, r1, lsr #17
 800340c:	13c0      	asrs	r0, r0, #15
 800340e:	f8a4 00ae 	strh.w	r0, [r4, #174]	@ 0xae
 8003412:	2013      	movs	r0, #19
 8003414:	e728      	b.n	8003268 <??HT_MF_4>

08003416 <??HT_MF_50>:
 8003416:	7ce0      	ldrb	r0, [r4, #19]
 8003418:	2801      	cmp	r0, #1
 800341a:	bf14      	ite	ne
 800341c:	2100      	movne	r1, #0
 800341e:	2101      	moveq	r1, #1

08003420 <??HT_MF_51>:
 8003420:	4620      	mov	r0, r4
 8003422:	b001      	add	sp, #4
 8003424:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8003428:	f7ff bb6e 	b.w	8002b08 <HT_Init>

0800342c <??HT_MF_52>:
 800342c:	7c60      	ldrb	r0, [r4, #17]
 800342e:	2800      	cmp	r0, #0
 8003430:	f47f af1b 	bne.w	800326a <??HT_MF_2>
 8003434:	6820      	ldr	r0, [r4, #0]
 8003436:	2108      	movs	r1, #8
 8003438:	77c1      	strb	r1, [r0, #31]
 800343a:	2100      	movs	r1, #0
 800343c:	e7f0      	b.n	8003420 <??HT_MF_51>
	...

08003440 <??DataTable1>:
 8003440:	0b90 2000                                   ... 

08003444 <??DataTable1_1>:
 8003444:	8bad 68db                                   ...h

08003448 <??DataTable1_2>:
 8003448:	0062 0010                                   b...

0800344c <??DataTable1_3>:
 800344c:	0c00 4002                                   ...@

08003450 <HT_GetPhaseShift>:
 8003450:	b510      	push	{r4, lr}
 8003452:	4604      	mov	r4, r0
 8003454:	6820      	ldr	r0, [r4, #0]
 8003456:	f001 fad5 	bl	8004a04 <MCI_GetSTMState>
 800345a:	7c21      	ldrb	r1, [r4, #16]
 800345c:	290f      	cmp	r1, #15
 800345e:	bf08      	it	eq
 8003460:	2806      	cmpeq	r0, #6
 8003462:	d104      	bne.n	800346e <??HT_GetPhaseShift_0>
 8003464:	68e0      	ldr	r0, [r4, #12]
 8003466:	8881      	ldrh	r1, [r0, #4]
 8003468:	85a1      	strh	r1, [r4, #44]	@ 0x2c
 800346a:	2010      	movs	r0, #16
 800346c:	7420      	strb	r0, [r4, #16]

0800346e <??HT_GetPhaseShift_0>:
 800346e:	bd10      	pop	{r4, pc}

08003470 <HT_SetMechanicalWantedDirection>:
 8003470:	77c1      	strb	r1, [r0, #31]
 8003472:	4770      	bx	lr

08003474 <HT_SetStart>:
 8003474:	7441      	strb	r1, [r0, #17]
 8003476:	4770      	bx	lr

08003478 <HT_SetRestart>:
 8003478:	2101      	movs	r1, #1
 800347a:	74c1      	strb	r1, [r0, #19]
 800347c:	4770      	bx	lr

0800347e <HT_SetAbort>:
 800347e:	2101      	movs	r1, #1
 8003480:	7501      	strb	r1, [r0, #20]
 8003482:	4770      	bx	lr

08003484 <__aeabi_dmul>:
 8003484:	b570      	push	{r4, r5, r6, lr}
 8003486:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800348a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800348e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8003492:	bf1d      	ittte	ne
 8003494:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8003498:	ea94 0f0c 	teqne	r4, ip
 800349c:	ea95 0f0c 	teqne	r5, ip
 80034a0:	f000 f8de 	bleq	8003660 <__aeabi_dmul+0x1dc>
 80034a4:	442c      	add	r4, r5
 80034a6:	ea81 0603 	eor.w	r6, r1, r3
 80034aa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80034ae:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80034b2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80034b6:	bf18      	it	ne
 80034b8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80034bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80034c0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80034c4:	d038      	beq.n	8003538 <__aeabi_dmul+0xb4>
 80034c6:	fba0 ce02 	umull	ip, lr, r0, r2
 80034ca:	f04f 0500 	mov.w	r5, #0
 80034ce:	fbe1 e502 	umlal	lr, r5, r1, r2
 80034d2:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80034d6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80034da:	f04f 0600 	mov.w	r6, #0
 80034de:	fbe1 5603 	umlal	r5, r6, r1, r3
 80034e2:	f09c 0f00 	teq	ip, #0
 80034e6:	bf18      	it	ne
 80034e8:	f04e 0e01 	orrne.w	lr, lr, #1
 80034ec:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80034f0:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80034f4:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80034f8:	d204      	bcs.n	8003504 <__aeabi_dmul+0x80>
 80034fa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80034fe:	416d      	adcs	r5, r5
 8003500:	eb46 0606 	adc.w	r6, r6, r6
 8003504:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8003508:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800350c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8003510:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8003514:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8003518:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800351c:	bf88      	it	hi
 800351e:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8003522:	d81e      	bhi.n	8003562 <__aeabi_dmul+0xde>
 8003524:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8003528:	bf08      	it	eq
 800352a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800352e:	f150 0000 	adcs.w	r0, r0, #0
 8003532:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8003536:	bd70      	pop	{r4, r5, r6, pc}
 8003538:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800353c:	ea46 0101 	orr.w	r1, r6, r1
 8003540:	ea40 0002 	orr.w	r0, r0, r2
 8003544:	ea81 0103 	eor.w	r1, r1, r3
 8003548:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800354c:	bfc2      	ittt	gt
 800354e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8003552:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8003556:	bd70      	popgt	{r4, r5, r6, pc}
 8003558:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800355c:	f04f 0e00 	mov.w	lr, #0
 8003560:	3c01      	subs	r4, #1
 8003562:	f300 80ab 	bgt.w	80036bc <__aeabi_dmul+0x238>
 8003566:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800356a:	bfde      	ittt	le
 800356c:	2000      	movle	r0, #0
 800356e:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8003572:	bd70      	pople	{r4, r5, r6, pc}
 8003574:	f1c4 0400 	rsb	r4, r4, #0
 8003578:	3c20      	subs	r4, #32
 800357a:	da35      	bge.n	80035e8 <__aeabi_dmul+0x164>
 800357c:	340c      	adds	r4, #12
 800357e:	dc1b      	bgt.n	80035b8 <__aeabi_dmul+0x134>
 8003580:	f104 0414 	add.w	r4, r4, #20
 8003584:	f1c4 0520 	rsb	r5, r4, #32
 8003588:	fa00 f305 	lsl.w	r3, r0, r5
 800358c:	fa20 f004 	lsr.w	r0, r0, r4
 8003590:	fa01 f205 	lsl.w	r2, r1, r5
 8003594:	ea40 0002 	orr.w	r0, r0, r2
 8003598:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 800359c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80035a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80035a4:	fa21 f604 	lsr.w	r6, r1, r4
 80035a8:	eb42 0106 	adc.w	r1, r2, r6
 80035ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80035b0:	bf08      	it	eq
 80035b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80035b6:	bd70      	pop	{r4, r5, r6, pc}
 80035b8:	f1c4 040c 	rsb	r4, r4, #12
 80035bc:	f1c4 0520 	rsb	r5, r4, #32
 80035c0:	fa00 f304 	lsl.w	r3, r0, r4
 80035c4:	fa20 f005 	lsr.w	r0, r0, r5
 80035c8:	fa01 f204 	lsl.w	r2, r1, r4
 80035cc:	ea40 0002 	orr.w	r0, r0, r2
 80035d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80035d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80035d8:	f141 0100 	adc.w	r1, r1, #0
 80035dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80035e0:	bf08      	it	eq
 80035e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80035e6:	bd70      	pop	{r4, r5, r6, pc}
 80035e8:	f1c4 0520 	rsb	r5, r4, #32
 80035ec:	fa00 f205 	lsl.w	r2, r0, r5
 80035f0:	ea4e 0e02 	orr.w	lr, lr, r2
 80035f4:	fa20 f304 	lsr.w	r3, r0, r4
 80035f8:	fa01 f205 	lsl.w	r2, r1, r5
 80035fc:	ea43 0302 	orr.w	r3, r3, r2
 8003600:	fa21 f004 	lsr.w	r0, r1, r4
 8003604:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8003608:	fa21 f204 	lsr.w	r2, r1, r4
 800360c:	ea20 0002 	bic.w	r0, r0, r2
 8003610:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8003614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8003618:	bf08      	it	eq
 800361a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800361e:	bd70      	pop	{r4, r5, r6, pc}
 8003620:	f094 0f00 	teq	r4, #0
 8003624:	d10f      	bne.n	8003646 <__aeabi_dmul+0x1c2>
 8003626:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800362a:	0040      	lsls	r0, r0, #1
 800362c:	eb41 0101 	adc.w	r1, r1, r1
 8003630:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8003634:	bf08      	it	eq
 8003636:	3c01      	subeq	r4, #1
 8003638:	d0f7      	beq.n	800362a <__aeabi_dmul+0x1a6>
 800363a:	ea41 0106 	orr.w	r1, r1, r6
 800363e:	f095 0f00 	teq	r5, #0
 8003642:	bf18      	it	ne
 8003644:	4770      	bxne	lr
 8003646:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800364a:	0052      	lsls	r2, r2, #1
 800364c:	eb43 0303 	adc.w	r3, r3, r3
 8003650:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8003654:	bf08      	it	eq
 8003656:	3d01      	subeq	r5, #1
 8003658:	d0f7      	beq.n	800364a <__aeabi_dmul+0x1c6>
 800365a:	ea43 0306 	orr.w	r3, r3, r6
 800365e:	4770      	bx	lr
 8003660:	ea94 0f0c 	teq	r4, ip
 8003664:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8003668:	bf18      	it	ne
 800366a:	ea95 0f0c 	teqne	r5, ip
 800366e:	d00c      	beq.n	800368a <__aeabi_dmul+0x206>
 8003670:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8003674:	bf18      	it	ne
 8003676:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800367a:	d1d1      	bne.n	8003620 <__aeabi_dmul+0x19c>
 800367c:	ea81 0103 	eor.w	r1, r1, r3
 8003680:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8003684:	f04f 0000 	mov.w	r0, #0
 8003688:	bd70      	pop	{r4, r5, r6, pc}
 800368a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800368e:	bf06      	itte	eq
 8003690:	4610      	moveq	r0, r2
 8003692:	4619      	moveq	r1, r3
 8003694:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8003698:	d019      	beq.n	80036ce <__aeabi_dmul+0x24a>
 800369a:	ea94 0f0c 	teq	r4, ip
 800369e:	d102      	bne.n	80036a6 <__aeabi_dmul+0x222>
 80036a0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80036a4:	d113      	bne.n	80036ce <__aeabi_dmul+0x24a>
 80036a6:	ea95 0f0c 	teq	r5, ip
 80036aa:	d105      	bne.n	80036b8 <__aeabi_dmul+0x234>
 80036ac:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80036b0:	bf1c      	itt	ne
 80036b2:	4610      	movne	r0, r2
 80036b4:	4619      	movne	r1, r3
 80036b6:	d10a      	bne.n	80036ce <__aeabi_dmul+0x24a>
 80036b8:	ea81 0103 	eor.w	r1, r1, r3
 80036bc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80036c0:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80036c4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80036c8:	f04f 0000 	mov.w	r0, #0
 80036cc:	bd70      	pop	{r4, r5, r6, pc}
 80036ce:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80036d2:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80036d6:	bd70      	pop	{r4, r5, r6, pc}

080036d8 <__aeabi_drsub>:
 80036d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80036dc:	e002      	b.n	80036e4 <__adddf3>
 80036de:	bf00      	nop

080036e0 <__aeabi_dsub>:
 80036e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080036e4 <__adddf3>:
 80036e4:	b530      	push	{r4, r5, lr}
 80036e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80036ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80036ee:	ea94 0f05 	teq	r4, r5
 80036f2:	bf08      	it	eq
 80036f4:	ea90 0f02 	teqeq	r0, r2
 80036f8:	bf1f      	itttt	ne
 80036fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80036fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8003702:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8003706:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800370a:	f000 80e2 	beq.w	80038d2 <__adddf3+0x1ee>
 800370e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8003712:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8003716:	bfb8      	it	lt
 8003718:	426d      	neglt	r5, r5
 800371a:	dd0c      	ble.n	8003736 <__adddf3+0x52>
 800371c:	442c      	add	r4, r5
 800371e:	ea80 0202 	eor.w	r2, r0, r2
 8003722:	ea81 0303 	eor.w	r3, r1, r3
 8003726:	ea82 0000 	eor.w	r0, r2, r0
 800372a:	ea83 0101 	eor.w	r1, r3, r1
 800372e:	ea80 0202 	eor.w	r2, r0, r2
 8003732:	ea81 0303 	eor.w	r3, r1, r3
 8003736:	2d36      	cmp	r5, #54	@ 0x36
 8003738:	bf88      	it	hi
 800373a:	bd30      	pophi	{r4, r5, pc}
 800373c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8003740:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8003744:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8003748:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800374c:	d002      	beq.n	8003754 <__adddf3+0x70>
 800374e:	4240      	negs	r0, r0
 8003750:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8003754:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8003758:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800375c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8003760:	d002      	beq.n	8003768 <__adddf3+0x84>
 8003762:	4252      	negs	r2, r2
 8003764:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8003768:	ea94 0f05 	teq	r4, r5
 800376c:	f000 80a7 	beq.w	80038be <__adddf3+0x1da>
 8003770:	f1a4 0401 	sub.w	r4, r4, #1
 8003774:	f1d5 0e20 	rsbs	lr, r5, #32
 8003778:	db0d      	blt.n	8003796 <__adddf3+0xb2>
 800377a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800377e:	fa22 f205 	lsr.w	r2, r2, r5
 8003782:	1880      	adds	r0, r0, r2
 8003784:	f141 0100 	adc.w	r1, r1, #0
 8003788:	fa03 f20e 	lsl.w	r2, r3, lr
 800378c:	1880      	adds	r0, r0, r2
 800378e:	fa43 f305 	asr.w	r3, r3, r5
 8003792:	4159      	adcs	r1, r3
 8003794:	e00e      	b.n	80037b4 <__adddf3+0xd0>
 8003796:	f1a5 0520 	sub.w	r5, r5, #32
 800379a:	f10e 0e20 	add.w	lr, lr, #32
 800379e:	2a01      	cmp	r2, #1
 80037a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80037a4:	bf28      	it	cs
 80037a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80037aa:	fa43 f305 	asr.w	r3, r3, r5
 80037ae:	18c0      	adds	r0, r0, r3
 80037b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80037b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80037b8:	d507      	bpl.n	80037ca <__adddf3+0xe6>
 80037ba:	f04f 0e00 	mov.w	lr, #0
 80037be:	f1dc 0c00 	rsbs	ip, ip, #0
 80037c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80037c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80037ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80037ce:	d31b      	bcc.n	8003808 <__adddf3+0x124>
 80037d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80037d4:	d30c      	bcc.n	80037f0 <__adddf3+0x10c>
 80037d6:	0849      	lsrs	r1, r1, #1
 80037d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80037dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80037e0:	f104 0401 	add.w	r4, r4, #1
 80037e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80037e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80037ec:	f080 809a 	bcs.w	8003924 <__adddf3+0x240>
 80037f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80037f4:	bf08      	it	eq
 80037f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80037fa:	f150 0000 	adcs.w	r0, r0, #0
 80037fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8003802:	ea41 0105 	orr.w	r1, r1, r5
 8003806:	bd30      	pop	{r4, r5, pc}
 8003808:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800380c:	4140      	adcs	r0, r0
 800380e:	eb41 0101 	adc.w	r1, r1, r1
 8003812:	3c01      	subs	r4, #1
 8003814:	bf28      	it	cs
 8003816:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800381a:	d2e9      	bcs.n	80037f0 <__adddf3+0x10c>
 800381c:	f091 0f00 	teq	r1, #0
 8003820:	bf04      	itt	eq
 8003822:	4601      	moveq	r1, r0
 8003824:	2000      	moveq	r0, #0
 8003826:	fab1 f381 	clz	r3, r1
 800382a:	bf08      	it	eq
 800382c:	3320      	addeq	r3, #32
 800382e:	f1a3 030b 	sub.w	r3, r3, #11
 8003832:	f1b3 0220 	subs.w	r2, r3, #32
 8003836:	da0c      	bge.n	8003852 <__adddf3+0x16e>
 8003838:	320c      	adds	r2, #12
 800383a:	dd08      	ble.n	800384e <__adddf3+0x16a>
 800383c:	f102 0c14 	add.w	ip, r2, #20
 8003840:	f1c2 020c 	rsb	r2, r2, #12
 8003844:	fa01 f00c 	lsl.w	r0, r1, ip
 8003848:	fa21 f102 	lsr.w	r1, r1, r2
 800384c:	e00c      	b.n	8003868 <__adddf3+0x184>
 800384e:	f102 0214 	add.w	r2, r2, #20
 8003852:	bfd8      	it	le
 8003854:	f1c2 0c20 	rsble	ip, r2, #32
 8003858:	fa01 f102 	lsl.w	r1, r1, r2
 800385c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8003860:	bfdc      	itt	le
 8003862:	ea41 010c 	orrle.w	r1, r1, ip
 8003866:	4090      	lslle	r0, r2
 8003868:	1ae4      	subs	r4, r4, r3
 800386a:	bfa2      	ittt	ge
 800386c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8003870:	4329      	orrge	r1, r5
 8003872:	bd30      	popge	{r4, r5, pc}
 8003874:	ea6f 0404 	mvn.w	r4, r4
 8003878:	3c1f      	subs	r4, #31
 800387a:	da1c      	bge.n	80038b6 <__adddf3+0x1d2>
 800387c:	340c      	adds	r4, #12
 800387e:	dc0e      	bgt.n	800389e <__adddf3+0x1ba>
 8003880:	f104 0414 	add.w	r4, r4, #20
 8003884:	f1c4 0220 	rsb	r2, r4, #32
 8003888:	fa20 f004 	lsr.w	r0, r0, r4
 800388c:	fa01 f302 	lsl.w	r3, r1, r2
 8003890:	ea40 0003 	orr.w	r0, r0, r3
 8003894:	fa21 f304 	lsr.w	r3, r1, r4
 8003898:	ea45 0103 	orr.w	r1, r5, r3
 800389c:	bd30      	pop	{r4, r5, pc}
 800389e:	f1c4 040c 	rsb	r4, r4, #12
 80038a2:	f1c4 0220 	rsb	r2, r4, #32
 80038a6:	fa20 f002 	lsr.w	r0, r0, r2
 80038aa:	fa01 f304 	lsl.w	r3, r1, r4
 80038ae:	ea40 0003 	orr.w	r0, r0, r3
 80038b2:	4629      	mov	r1, r5
 80038b4:	bd30      	pop	{r4, r5, pc}
 80038b6:	fa21 f004 	lsr.w	r0, r1, r4
 80038ba:	4629      	mov	r1, r5
 80038bc:	bd30      	pop	{r4, r5, pc}
 80038be:	f094 0f00 	teq	r4, #0
 80038c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80038c6:	bf06      	itte	eq
 80038c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80038cc:	3401      	addeq	r4, #1
 80038ce:	3d01      	subne	r5, #1
 80038d0:	e74e      	b.n	8003770 <__adddf3+0x8c>
 80038d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80038d6:	bf18      	it	ne
 80038d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80038dc:	d029      	beq.n	8003932 <__adddf3+0x24e>
 80038de:	ea94 0f05 	teq	r4, r5
 80038e2:	bf08      	it	eq
 80038e4:	ea90 0f02 	teqeq	r0, r2
 80038e8:	d005      	beq.n	80038f6 <__adddf3+0x212>
 80038ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80038ee:	bf04      	itt	eq
 80038f0:	4619      	moveq	r1, r3
 80038f2:	4610      	moveq	r0, r2
 80038f4:	bd30      	pop	{r4, r5, pc}
 80038f6:	ea91 0f03 	teq	r1, r3
 80038fa:	bf1e      	ittt	ne
 80038fc:	2100      	movne	r1, #0
 80038fe:	2000      	movne	r0, #0
 8003900:	bd30      	popne	{r4, r5, pc}
 8003902:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8003906:	d105      	bne.n	8003914 <__adddf3+0x230>
 8003908:	0040      	lsls	r0, r0, #1
 800390a:	4149      	adcs	r1, r1
 800390c:	bf28      	it	cs
 800390e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8003912:	bd30      	pop	{r4, r5, pc}
 8003914:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8003918:	bf3c      	itt	cc
 800391a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800391e:	bd30      	popcc	{r4, r5, pc}
 8003920:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8003924:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8003928:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800392c:	f04f 0000 	mov.w	r0, #0
 8003930:	bd30      	pop	{r4, r5, pc}
 8003932:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8003936:	bf1a      	itte	ne
 8003938:	4619      	movne	r1, r3
 800393a:	4610      	movne	r0, r2
 800393c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8003940:	bf1c      	itt	ne
 8003942:	460b      	movne	r3, r1
 8003944:	4602      	movne	r2, r0
 8003946:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800394a:	bf06      	itte	eq
 800394c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8003950:	ea91 0f03 	teqeq	r1, r3
 8003954:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8003958:	bd30      	pop	{r4, r5, pc}
 800395a:	bf00      	nop

0800395c <__aeabi_ui2d>:
 800395c:	f090 0f00 	teq	r0, #0
 8003960:	bf04      	itt	eq
 8003962:	2100      	moveq	r1, #0
 8003964:	4770      	bxeq	lr
 8003966:	b530      	push	{r4, r5, lr}
 8003968:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800396c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8003970:	f04f 0500 	mov.w	r5, #0
 8003974:	f04f 0100 	mov.w	r1, #0
 8003978:	e750      	b.n	800381c <__adddf3+0x138>
 800397a:	bf00      	nop

0800397c <__aeabi_i2d>:
 800397c:	f090 0f00 	teq	r0, #0
 8003980:	bf04      	itt	eq
 8003982:	2100      	moveq	r1, #0
 8003984:	4770      	bxeq	lr
 8003986:	b530      	push	{r4, r5, lr}
 8003988:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800398c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8003990:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8003994:	bf48      	it	mi
 8003996:	4240      	negmi	r0, r0
 8003998:	f04f 0100 	mov.w	r1, #0
 800399c:	e73e      	b.n	800381c <__adddf3+0x138>
 800399e:	bf00      	nop

080039a0 <__aeabi_f2d>:
 80039a0:	0042      	lsls	r2, r0, #1
 80039a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80039a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80039aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80039ae:	bf1f      	itttt	ne
 80039b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80039b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80039b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80039bc:	4770      	bxne	lr
 80039be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80039c2:	bf08      	it	eq
 80039c4:	4770      	bxeq	lr
 80039c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80039ca:	bf04      	itt	eq
 80039cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80039d0:	4770      	bxeq	lr
 80039d2:	b530      	push	{r4, r5, lr}
 80039d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80039d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80039dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80039e0:	e71c      	b.n	800381c <__adddf3+0x138>
 80039e2:	bf00      	nop

080039e4 <__aeabi_ul2d>:
 80039e4:	ea50 0201 	orrs.w	r2, r0, r1
 80039e8:	bf08      	it	eq
 80039ea:	4770      	bxeq	lr
 80039ec:	b530      	push	{r4, r5, lr}
 80039ee:	f04f 0500 	mov.w	r5, #0
 80039f2:	e00a      	b.n	8003a0a <__aeabi_l2d+0x16>

080039f4 <__aeabi_l2d>:
 80039f4:	ea50 0201 	orrs.w	r2, r0, r1
 80039f8:	bf08      	it	eq
 80039fa:	4770      	bxeq	lr
 80039fc:	b530      	push	{r4, r5, lr}
 80039fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8003a02:	d502      	bpl.n	8003a0a <__aeabi_l2d+0x16>
 8003a04:	4240      	negs	r0, r0
 8003a06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8003a0a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8003a0e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8003a12:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8003a16:	f43f aed8 	beq.w	80037ca <__adddf3+0xe6>
 8003a1a:	f04f 0203 	mov.w	r2, #3
 8003a1e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8003a22:	bf18      	it	ne
 8003a24:	3203      	addne	r2, #3
 8003a26:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8003a2a:	bf18      	it	ne
 8003a2c:	3203      	addne	r2, #3
 8003a2e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8003a32:	f1c2 0320 	rsb	r3, r2, #32
 8003a36:	fa00 fc03 	lsl.w	ip, r0, r3
 8003a3a:	fa20 f002 	lsr.w	r0, r0, r2
 8003a3e:	fa01 fe03 	lsl.w	lr, r1, r3
 8003a42:	ea40 000e 	orr.w	r0, r0, lr
 8003a46:	fa21 f102 	lsr.w	r1, r1, r2
 8003a4a:	4414      	add	r4, r2
 8003a4c:	e6bd      	b.n	80037ca <__adddf3+0xe6>
 8003a4e:	bf00      	nop

08003a50 <__aeabi_d2iz>:
 8003a50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8003a54:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8003a58:	d215      	bcs.n	8003a86 <__aeabi_d2iz+0x36>
 8003a5a:	d511      	bpl.n	8003a80 <__aeabi_d2iz+0x30>
 8003a5c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8003a60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8003a64:	d912      	bls.n	8003a8c <__aeabi_d2iz+0x3c>
 8003a66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8003a6a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003a6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8003a72:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8003a76:	fa23 f002 	lsr.w	r0, r3, r2
 8003a7a:	bf18      	it	ne
 8003a7c:	4240      	negne	r0, r0
 8003a7e:	4770      	bx	lr
 8003a80:	f04f 0000 	mov.w	r0, #0
 8003a84:	4770      	bx	lr
 8003a86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8003a8a:	d105      	bne.n	8003a98 <__aeabi_d2iz+0x48>
 8003a8c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8003a90:	bf08      	it	eq
 8003a92:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8003a96:	4770      	bx	lr
 8003a98:	f04f 0000 	mov.w	r0, #0
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop

08003aa0 <__aeabi_uldivmod>:
 8003aa0:	b953      	cbnz	r3, 8003ab8 <__aeabi_uldivmod+0x18>
 8003aa2:	b94a      	cbnz	r2, 8003ab8 <__aeabi_uldivmod+0x18>
 8003aa4:	2900      	cmp	r1, #0
 8003aa6:	bf08      	it	eq
 8003aa8:	2800      	cmpeq	r0, #0
 8003aaa:	bf1c      	itt	ne
 8003aac:	f04f 31ff 	movne.w	r1, #4294967295
 8003ab0:	f04f 30ff 	movne.w	r0, #4294967295
 8003ab4:	f000 b96a 	b.w	8003d8c <__aeabi_idiv0>
 8003ab8:	f1ad 0c08 	sub.w	ip, sp, #8
 8003abc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8003ac0:	f000 f806 	bl	8003ad0 <__udivmoddi4>
 8003ac4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8003ac8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003acc:	b004      	add	sp, #16
 8003ace:	4770      	bx	lr

08003ad0 <__udivmoddi4>:
 8003ad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ad4:	9d08      	ldr	r5, [sp, #32]
 8003ad6:	460c      	mov	r4, r1
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d14e      	bne.n	8003b7a <__udivmoddi4+0xaa>
 8003adc:	4694      	mov	ip, r2
 8003ade:	458c      	cmp	ip, r1
 8003ae0:	4686      	mov	lr, r0
 8003ae2:	fab2 f282 	clz	r2, r2
 8003ae6:	d962      	bls.n	8003bae <__udivmoddi4+0xde>
 8003ae8:	b14a      	cbz	r2, 8003afe <__udivmoddi4+0x2e>
 8003aea:	f1c2 0320 	rsb	r3, r2, #32
 8003aee:	4091      	lsls	r1, r2
 8003af0:	fa20 f303 	lsr.w	r3, r0, r3
 8003af4:	fa0c fc02 	lsl.w	ip, ip, r2
 8003af8:	4319      	orrs	r1, r3
 8003afa:	fa00 fe02 	lsl.w	lr, r0, r2
 8003afe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8003b02:	fa1f f68c 	uxth.w	r6, ip
 8003b06:	fbb1 f4f7 	udiv	r4, r1, r7
 8003b0a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8003b0e:	fb07 1114 	mls	r1, r7, r4, r1
 8003b12:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8003b16:	fb04 f106 	mul.w	r1, r4, r6
 8003b1a:	4299      	cmp	r1, r3
 8003b1c:	d90a      	bls.n	8003b34 <__udivmoddi4+0x64>
 8003b1e:	eb1c 0303 	adds.w	r3, ip, r3
 8003b22:	f104 30ff 	add.w	r0, r4, #4294967295
 8003b26:	f080 8112 	bcs.w	8003d4e <__udivmoddi4+0x27e>
 8003b2a:	4299      	cmp	r1, r3
 8003b2c:	f240 810f 	bls.w	8003d4e <__udivmoddi4+0x27e>
 8003b30:	3c02      	subs	r4, #2
 8003b32:	4463      	add	r3, ip
 8003b34:	1a59      	subs	r1, r3, r1
 8003b36:	fa1f f38e 	uxth.w	r3, lr
 8003b3a:	fbb1 f0f7 	udiv	r0, r1, r7
 8003b3e:	fb07 1110 	mls	r1, r7, r0, r1
 8003b42:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8003b46:	fb00 f606 	mul.w	r6, r0, r6
 8003b4a:	429e      	cmp	r6, r3
 8003b4c:	d90a      	bls.n	8003b64 <__udivmoddi4+0x94>
 8003b4e:	eb1c 0303 	adds.w	r3, ip, r3
 8003b52:	f100 31ff 	add.w	r1, r0, #4294967295
 8003b56:	f080 80fc 	bcs.w	8003d52 <__udivmoddi4+0x282>
 8003b5a:	429e      	cmp	r6, r3
 8003b5c:	f240 80f9 	bls.w	8003d52 <__udivmoddi4+0x282>
 8003b60:	4463      	add	r3, ip
 8003b62:	3802      	subs	r0, #2
 8003b64:	1b9b      	subs	r3, r3, r6
 8003b66:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8003b6a:	2100      	movs	r1, #0
 8003b6c:	b11d      	cbz	r5, 8003b76 <__udivmoddi4+0xa6>
 8003b6e:	40d3      	lsrs	r3, r2
 8003b70:	2200      	movs	r2, #0
 8003b72:	e9c5 3200 	strd	r3, r2, [r5]
 8003b76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b7a:	428b      	cmp	r3, r1
 8003b7c:	d905      	bls.n	8003b8a <__udivmoddi4+0xba>
 8003b7e:	b10d      	cbz	r5, 8003b84 <__udivmoddi4+0xb4>
 8003b80:	e9c5 0100 	strd	r0, r1, [r5]
 8003b84:	2100      	movs	r1, #0
 8003b86:	4608      	mov	r0, r1
 8003b88:	e7f5      	b.n	8003b76 <__udivmoddi4+0xa6>
 8003b8a:	fab3 f183 	clz	r1, r3
 8003b8e:	2900      	cmp	r1, #0
 8003b90:	d146      	bne.n	8003c20 <__udivmoddi4+0x150>
 8003b92:	42a3      	cmp	r3, r4
 8003b94:	d302      	bcc.n	8003b9c <__udivmoddi4+0xcc>
 8003b96:	4290      	cmp	r0, r2
 8003b98:	f0c0 80f0 	bcc.w	8003d7c <__udivmoddi4+0x2ac>
 8003b9c:	1a86      	subs	r6, r0, r2
 8003b9e:	eb64 0303 	sbc.w	r3, r4, r3
 8003ba2:	2001      	movs	r0, #1
 8003ba4:	2d00      	cmp	r5, #0
 8003ba6:	d0e6      	beq.n	8003b76 <__udivmoddi4+0xa6>
 8003ba8:	e9c5 6300 	strd	r6, r3, [r5]
 8003bac:	e7e3      	b.n	8003b76 <__udivmoddi4+0xa6>
 8003bae:	2a00      	cmp	r2, #0
 8003bb0:	f040 8090 	bne.w	8003cd4 <__udivmoddi4+0x204>
 8003bb4:	eba1 040c 	sub.w	r4, r1, ip
 8003bb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8003bbc:	fa1f f78c 	uxth.w	r7, ip
 8003bc0:	2101      	movs	r1, #1
 8003bc2:	fbb4 f6f8 	udiv	r6, r4, r8
 8003bc6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8003bca:	fb08 4416 	mls	r4, r8, r6, r4
 8003bce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8003bd2:	fb07 f006 	mul.w	r0, r7, r6
 8003bd6:	4298      	cmp	r0, r3
 8003bd8:	d908      	bls.n	8003bec <__udivmoddi4+0x11c>
 8003bda:	eb1c 0303 	adds.w	r3, ip, r3
 8003bde:	f106 34ff 	add.w	r4, r6, #4294967295
 8003be2:	d202      	bcs.n	8003bea <__udivmoddi4+0x11a>
 8003be4:	4298      	cmp	r0, r3
 8003be6:	f200 80cd 	bhi.w	8003d84 <__udivmoddi4+0x2b4>
 8003bea:	4626      	mov	r6, r4
 8003bec:	1a1c      	subs	r4, r3, r0
 8003bee:	fa1f f38e 	uxth.w	r3, lr
 8003bf2:	fbb4 f0f8 	udiv	r0, r4, r8
 8003bf6:	fb08 4410 	mls	r4, r8, r0, r4
 8003bfa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8003bfe:	fb00 f707 	mul.w	r7, r0, r7
 8003c02:	429f      	cmp	r7, r3
 8003c04:	d908      	bls.n	8003c18 <__udivmoddi4+0x148>
 8003c06:	eb1c 0303 	adds.w	r3, ip, r3
 8003c0a:	f100 34ff 	add.w	r4, r0, #4294967295
 8003c0e:	d202      	bcs.n	8003c16 <__udivmoddi4+0x146>
 8003c10:	429f      	cmp	r7, r3
 8003c12:	f200 80b0 	bhi.w	8003d76 <__udivmoddi4+0x2a6>
 8003c16:	4620      	mov	r0, r4
 8003c18:	1bdb      	subs	r3, r3, r7
 8003c1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8003c1e:	e7a5      	b.n	8003b6c <__udivmoddi4+0x9c>
 8003c20:	f1c1 0620 	rsb	r6, r1, #32
 8003c24:	408b      	lsls	r3, r1
 8003c26:	fa22 f706 	lsr.w	r7, r2, r6
 8003c2a:	431f      	orrs	r7, r3
 8003c2c:	fa20 fc06 	lsr.w	ip, r0, r6
 8003c30:	fa04 f301 	lsl.w	r3, r4, r1
 8003c34:	ea43 030c 	orr.w	r3, r3, ip
 8003c38:	40f4      	lsrs	r4, r6
 8003c3a:	fa00 f801 	lsl.w	r8, r0, r1
 8003c3e:	0c38      	lsrs	r0, r7, #16
 8003c40:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8003c44:	fbb4 fef0 	udiv	lr, r4, r0
 8003c48:	fa1f fc87 	uxth.w	ip, r7
 8003c4c:	fb00 441e 	mls	r4, r0, lr, r4
 8003c50:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8003c54:	fb0e f90c 	mul.w	r9, lr, ip
 8003c58:	45a1      	cmp	r9, r4
 8003c5a:	fa02 f201 	lsl.w	r2, r2, r1
 8003c5e:	d90a      	bls.n	8003c76 <__udivmoddi4+0x1a6>
 8003c60:	193c      	adds	r4, r7, r4
 8003c62:	f10e 3aff 	add.w	sl, lr, #4294967295
 8003c66:	f080 8084 	bcs.w	8003d72 <__udivmoddi4+0x2a2>
 8003c6a:	45a1      	cmp	r9, r4
 8003c6c:	f240 8081 	bls.w	8003d72 <__udivmoddi4+0x2a2>
 8003c70:	f1ae 0e02 	sub.w	lr, lr, #2
 8003c74:	443c      	add	r4, r7
 8003c76:	eba4 0409 	sub.w	r4, r4, r9
 8003c7a:	fa1f f983 	uxth.w	r9, r3
 8003c7e:	fbb4 f3f0 	udiv	r3, r4, r0
 8003c82:	fb00 4413 	mls	r4, r0, r3, r4
 8003c86:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8003c8a:	fb03 fc0c 	mul.w	ip, r3, ip
 8003c8e:	45a4      	cmp	ip, r4
 8003c90:	d907      	bls.n	8003ca2 <__udivmoddi4+0x1d2>
 8003c92:	193c      	adds	r4, r7, r4
 8003c94:	f103 30ff 	add.w	r0, r3, #4294967295
 8003c98:	d267      	bcs.n	8003d6a <__udivmoddi4+0x29a>
 8003c9a:	45a4      	cmp	ip, r4
 8003c9c:	d965      	bls.n	8003d6a <__udivmoddi4+0x29a>
 8003c9e:	3b02      	subs	r3, #2
 8003ca0:	443c      	add	r4, r7
 8003ca2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8003ca6:	fba0 9302 	umull	r9, r3, r0, r2
 8003caa:	eba4 040c 	sub.w	r4, r4, ip
 8003cae:	429c      	cmp	r4, r3
 8003cb0:	46ce      	mov	lr, r9
 8003cb2:	469c      	mov	ip, r3
 8003cb4:	d351      	bcc.n	8003d5a <__udivmoddi4+0x28a>
 8003cb6:	d04e      	beq.n	8003d56 <__udivmoddi4+0x286>
 8003cb8:	b155      	cbz	r5, 8003cd0 <__udivmoddi4+0x200>
 8003cba:	ebb8 030e 	subs.w	r3, r8, lr
 8003cbe:	eb64 040c 	sbc.w	r4, r4, ip
 8003cc2:	fa04 f606 	lsl.w	r6, r4, r6
 8003cc6:	40cb      	lsrs	r3, r1
 8003cc8:	431e      	orrs	r6, r3
 8003cca:	40cc      	lsrs	r4, r1
 8003ccc:	e9c5 6400 	strd	r6, r4, [r5]
 8003cd0:	2100      	movs	r1, #0
 8003cd2:	e750      	b.n	8003b76 <__udivmoddi4+0xa6>
 8003cd4:	f1c2 0320 	rsb	r3, r2, #32
 8003cd8:	fa20 f103 	lsr.w	r1, r0, r3
 8003cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8003ce0:	fa24 f303 	lsr.w	r3, r4, r3
 8003ce4:	4094      	lsls	r4, r2
 8003ce6:	430c      	orrs	r4, r1
 8003ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8003cec:	fa00 fe02 	lsl.w	lr, r0, r2
 8003cf0:	fa1f f78c 	uxth.w	r7, ip
 8003cf4:	fbb3 f0f8 	udiv	r0, r3, r8
 8003cf8:	fb08 3110 	mls	r1, r8, r0, r3
 8003cfc:	0c23      	lsrs	r3, r4, #16
 8003cfe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8003d02:	fb00 f107 	mul.w	r1, r0, r7
 8003d06:	4299      	cmp	r1, r3
 8003d08:	d908      	bls.n	8003d1c <__udivmoddi4+0x24c>
 8003d0a:	eb1c 0303 	adds.w	r3, ip, r3
 8003d0e:	f100 36ff 	add.w	r6, r0, #4294967295
 8003d12:	d22c      	bcs.n	8003d6e <__udivmoddi4+0x29e>
 8003d14:	4299      	cmp	r1, r3
 8003d16:	d92a      	bls.n	8003d6e <__udivmoddi4+0x29e>
 8003d18:	3802      	subs	r0, #2
 8003d1a:	4463      	add	r3, ip
 8003d1c:	1a5b      	subs	r3, r3, r1
 8003d1e:	b2a4      	uxth	r4, r4
 8003d20:	fbb3 f1f8 	udiv	r1, r3, r8
 8003d24:	fb08 3311 	mls	r3, r8, r1, r3
 8003d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8003d2c:	fb01 f307 	mul.w	r3, r1, r7
 8003d30:	42a3      	cmp	r3, r4
 8003d32:	d908      	bls.n	8003d46 <__udivmoddi4+0x276>
 8003d34:	eb1c 0404 	adds.w	r4, ip, r4
 8003d38:	f101 36ff 	add.w	r6, r1, #4294967295
 8003d3c:	d213      	bcs.n	8003d66 <__udivmoddi4+0x296>
 8003d3e:	42a3      	cmp	r3, r4
 8003d40:	d911      	bls.n	8003d66 <__udivmoddi4+0x296>
 8003d42:	3902      	subs	r1, #2
 8003d44:	4464      	add	r4, ip
 8003d46:	1ae4      	subs	r4, r4, r3
 8003d48:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8003d4c:	e739      	b.n	8003bc2 <__udivmoddi4+0xf2>
 8003d4e:	4604      	mov	r4, r0
 8003d50:	e6f0      	b.n	8003b34 <__udivmoddi4+0x64>
 8003d52:	4608      	mov	r0, r1
 8003d54:	e706      	b.n	8003b64 <__udivmoddi4+0x94>
 8003d56:	45c8      	cmp	r8, r9
 8003d58:	d2ae      	bcs.n	8003cb8 <__udivmoddi4+0x1e8>
 8003d5a:	ebb9 0e02 	subs.w	lr, r9, r2
 8003d5e:	eb63 0c07 	sbc.w	ip, r3, r7
 8003d62:	3801      	subs	r0, #1
 8003d64:	e7a8      	b.n	8003cb8 <__udivmoddi4+0x1e8>
 8003d66:	4631      	mov	r1, r6
 8003d68:	e7ed      	b.n	8003d46 <__udivmoddi4+0x276>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	e799      	b.n	8003ca2 <__udivmoddi4+0x1d2>
 8003d6e:	4630      	mov	r0, r6
 8003d70:	e7d4      	b.n	8003d1c <__udivmoddi4+0x24c>
 8003d72:	46d6      	mov	lr, sl
 8003d74:	e77f      	b.n	8003c76 <__udivmoddi4+0x1a6>
 8003d76:	4463      	add	r3, ip
 8003d78:	3802      	subs	r0, #2
 8003d7a:	e74d      	b.n	8003c18 <__udivmoddi4+0x148>
 8003d7c:	4606      	mov	r6, r0
 8003d7e:	4623      	mov	r3, r4
 8003d80:	4608      	mov	r0, r1
 8003d82:	e70f      	b.n	8003ba4 <__udivmoddi4+0xd4>
 8003d84:	3e02      	subs	r6, #2
 8003d86:	4463      	add	r3, ip
 8003d88:	e730      	b.n	8003bec <__udivmoddi4+0x11c>
 8003d8a:	bf00      	nop

08003d8c <__aeabi_idiv0>:
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop

08003d90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003d90:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003dc8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003d94:	480d      	ldr	r0, [pc, #52]	@ (8003dcc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003d96:	490e      	ldr	r1, [pc, #56]	@ (8003dd0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003d98:	4a0e      	ldr	r2, [pc, #56]	@ (8003dd4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003d9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d9c:	e002      	b.n	8003da4 <LoopCopyDataInit>

08003d9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003da0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003da2:	3304      	adds	r3, #4

08003da4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003da4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003da6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003da8:	d3f9      	bcc.n	8003d9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003daa:	4a0b      	ldr	r2, [pc, #44]	@ (8003dd8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003dac:	4c0b      	ldr	r4, [pc, #44]	@ (8003ddc <LoopFillZerobss+0x26>)
  movs r3, #0
 8003dae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003db0:	e001      	b.n	8003db6 <LoopFillZerobss>

08003db2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003db2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003db4:	3204      	adds	r2, #4

08003db6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003db6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003db8:	d3fb      	bcc.n	8003db2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003dba:	f003 ff7f 	bl	8007cbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003dbe:	f007 fa51 	bl	800b264 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003dc2:	f000 fbcd 	bl	8004560 <main>
  bx  lr    
 8003dc6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003dc8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003dcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003dd0:	20000b6c 	.word	0x20000b6c
  ldr r2, =_sidata
 8003dd4:	0800b7cc 	.word	0x0800b7cc
  ldr r2, =_sbss
 8003dd8:	20000b6c 	.word	0x20000b6c
  ldr r4, =_ebss
 8003ddc:	20001f74 	.word	0x20001f74

08003de0 <BusFault_Handler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003de0:	e7fe      	b.n	8003de0 <BusFault_Handler>
	...

08003de4 <ASPEP_start>:
  * @brief  Starts ASPEP communication by configuring UART.
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_start(ASPEP_Handle_t *pHandle)
{
 8003de4:	b570      	push	{r4, r5, r6, lr}
 8003de6:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->fASPEP_HWInit(pHandle->HWIp);
 8003de8:	6940      	ldr	r0, [r0, #20]
 8003dea:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8003dec:	4798      	blx	r3
    pHandle->ASPEP_State = ASPEP_IDLE;
 8003dee:	2300      	movs	r3, #0
    pHandle->ASPEP_TL_State = WAITING_PACKET;
    pHandle->syncPacketCount = 0; /* Sync packet counter is reset only at startup*/

    /* Configure UART to receive first packet*/
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8003df0:	6d65      	ldr	r5, [r4, #84]	@ 0x54
    pHandle->ASPEP_State = ASPEP_IDLE;
 8003df2:	f8a4 3064 	strh.w	r3, [r4, #100]	@ 0x64
    pHandle->syncPacketCount = 0; /* Sync packet counter is reset only at startup*/
 8003df6:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8003dfa:	6960      	ldr	r0, [r4, #20]
 8003dfc:	f104 011c 	add.w	r1, r4, #28
 8003e00:	462b      	mov	r3, r5
 8003e02:	2204      	movs	r2, #4
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 8003e04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8003e08:	4718      	bx	r3
 8003e0a:	bf00      	nop

08003e0c <ASPEP_sendBeacon>:
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  * @param  *capabilities Matched capabilities between controller and performer
  */
void ASPEP_sendBeacon(ASPEP_Handle_t *pHandle, ASPEP_Capabilities_def *capabilities)
{
 8003e0c:	b410      	push	{r4}
  {
#endif
    uint32_t *packet = (uint32_t *)pHandle->ctrlBuffer.buffer; //cstat !MISRAC2012-Rule-11.3
    *packet = (BEACON
             | (((uint32_t)capabilities->version) << 4U)
             | (((uint32_t)capabilities->DATA_CRC) << 7U)
 8003e0e:	780b      	ldrb	r3, [r1, #0]
             | (((uint32_t)capabilities->version) << 4U)
 8003e10:	790a      	ldrb	r2, [r1, #4]
             | (((uint32_t)capabilities->RX_maxSize) << 8U)
             | (((uint32_t)capabilities->TXS_maxSize) << 14U)
 8003e12:	f891 c002 	ldrb.w	ip, [r1, #2]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8003e16:	4c1e      	ldr	r4, [pc, #120]	@ (8003e90 <ASPEP_sendBeacon+0x84>)
             | (((uint32_t)capabilities->DATA_CRC) << 7U)
 8003e18:	01db      	lsls	r3, r3, #7
 8003e1a:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
             | (((uint32_t)capabilities->RX_maxSize) << 8U)
 8003e1e:	784a      	ldrb	r2, [r1, #1]
 8003e20:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
             | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 8003e24:	78ca      	ldrb	r2, [r1, #3]
             | (((uint32_t)capabilities->TXS_maxSize) << 14U)
 8003e26:	ea43 338c 	orr.w	r3, r3, ip, lsl #14
             | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 8003e2a:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8003e2e:	b2da      	uxtb	r2, r3
 8003e30:	f042 0205 	orr.w	r2, r2, #5
  header &= 0x0fffffffU;
 8003e34:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8003e38:	5ca2      	ldrb	r2, [r4, r2]
 8003e3a:	ea82 2211 	eor.w	r2, r2, r1, lsr #8
 8003e3e:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8003e40:	5ca2      	ldrb	r2, [r4, r2]
 8003e42:	ea82 4211 	eor.w	r2, r2, r1, lsr #16
 8003e46:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8003e48:	5ca2      	ldrb	r2, [r4, r2]
 8003e4a:	4c12      	ldr	r4, [pc, #72]	@ (8003e94 <ASPEP_sendBeacon+0x88>)
 8003e4c:	ea82 6211 	eor.w	r2, r2, r1, lsr #24
  *headerPtr |= (uint32_t)crc << 28;
 8003e50:	5ca2      	ldrb	r2, [r4, r2]
 8003e52:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8003e56:	f043 0305 	orr.w	r3, r3, #5
 8003e5a:	6203      	str	r3, [r0, #32]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003e5c:	b672      	cpsid	i
  {
#endif
    /* Insert CRC header in the packet to send */
    ASPEP_ComputeHeaderCRC((uint32_t *)txBuffer); //cstat !MISRAC2012-Rule-11.5
    __disable_irq(); /*TODO: Disable High frequency task is enough */
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8003e5e:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8003e60:	b14b      	cbz	r3, 8003e76 <ASPEP_sendBeacon+0x6a>
  __ASM volatile ("cpsie i" : : : "memory");
 8003e62:	b662      	cpsie	i
          pHandle->syncBuffer.length = bufferLength;
        }
      }
      else if(ASPEP_CTRL == dataType)
      {
        if (pHandle->ctrlBuffer.state != available)
 8003e64:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8003e68:	b913      	cbnz	r3, 8003e70 <ASPEP_sendBeacon+0x64>
        {
          result = ASPEP_BUFFER_ERROR;
        }
        else
        {
          pHandle->ctrlBuffer.state = pending;
 8003e6a:	2302      	movs	r3, #2
 8003e6c:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
}
 8003e70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e74:	4770      	bx	lr
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8003e76:	f100 0120 	add.w	r1, r0, #32
        pHandle->ctrlBuffer.state = readLock;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8003e80:	6481      	str	r1, [r0, #72]	@ 0x48
 8003e82:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8003e84:	2204      	movs	r2, #4
 8003e86:	6d83      	ldr	r3, [r0, #88]	@ 0x58
}
 8003e88:	f85d 4b04 	ldr.w	r4, [sp], #4
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8003e8c:	6940      	ldr	r0, [r0, #20]
 8003e8e:	4718      	bx	r3
 8003e90:	0800b360 	.word	0x0800b360
 8003e94:	0800b350 	.word	0x0800b350

08003e98 <ASPEP_sendPing>:
{
 8003e98:	b430      	push	{r4, r5}
                   | (uint32_t)((uint32_t)cBit << 5U)
 8003e9a:	014b      	lsls	r3, r1, #5
    uint8_t Nbit = pHandle->syncPacketCount & 0x1U; /* Keep only LSB */
 8003e9c:	f890 c060 	ldrb.w	ip, [r0, #96]	@ 0x60
    uint8_t ipID = pHandle->liid & 0xFU;
 8003ea0:	f890 4063 	ldrb.w	r4, [r0, #99]	@ 0x63
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8003ea4:	4d1d      	ldr	r5, [pc, #116]	@ (8003f1c <ASPEP_sendPing+0x84>)
                   | (uint32_t)((uint32_t)cBit << 5U)
 8003ea6:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8003eaa:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
                   | (uint32_t)((uint32_t)Nbit << 6U)
 8003eae:	f00c 0101 	and.w	r1, ip, #1
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8003eb2:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8003eb6:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
                   | (uint32_t)((uint32_t)ipID << 8U)
 8003eba:	f004 040f 	and.w	r4, r4, #15
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8003ebe:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8003ec2:	b2da      	uxtb	r2, r3
 8003ec4:	4c16      	ldr	r4, [pc, #88]	@ (8003f20 <ASPEP_sendPing+0x88>)
 8003ec6:	f042 0206 	orr.w	r2, r2, #6
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8003eca:	f043 0106 	orr.w	r1, r3, #6
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8003ece:	5ca2      	ldrb	r2, [r4, r2]
 8003ed0:	ea82 2213 	eor.w	r2, r2, r3, lsr #8
 8003ed4:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8003ed6:	5ca2      	ldrb	r2, [r4, r2]
 8003ed8:	ea82 4213 	eor.w	r2, r2, r3, lsr #16
 8003edc:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8003ede:	5ca2      	ldrb	r2, [r4, r2]
 8003ee0:	ea82 6313 	eor.w	r3, r2, r3, lsr #24
  *headerPtr |= (uint32_t)crc << 28;
 8003ee4:	5ceb      	ldrb	r3, [r5, r3]
 8003ee6:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
 8003eea:	6203      	str	r3, [r0, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8003eec:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8003eee:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8003ef0:	b143      	cbz	r3, 8003f04 <ASPEP_sendPing+0x6c>
  __ASM volatile ("cpsie i" : : : "memory");
 8003ef2:	b662      	cpsie	i
        if (pHandle->ctrlBuffer.state != available)
 8003ef4:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8003ef8:	b913      	cbnz	r3, 8003f00 <ASPEP_sendPing+0x68>
          pHandle->ctrlBuffer.state = pending;
 8003efa:	2302      	movs	r3, #2
 8003efc:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
}
 8003f00:	bc30      	pop	{r4, r5}
 8003f02:	4770      	bx	lr
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8003f04:	f100 0120 	add.w	r1, r0, #32
        pHandle->ctrlBuffer.state = readLock;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8003f0e:	6481      	str	r1, [r0, #72]	@ 0x48
 8003f10:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8003f12:	2204      	movs	r2, #4
 8003f14:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8003f16:	6940      	ldr	r0, [r0, #20]
}
 8003f18:	bc30      	pop	{r4, r5}
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8003f1a:	4718      	bx	r3
 8003f1c:	0800b350 	.word	0x0800b350
 8003f20:	0800b360 	.word	0x0800b360

08003f24 <ASPEP_getBuffer>:
    if (MCTL_SYNC == syncAsync)
 8003f24:	2a0a      	cmp	r2, #10
 8003f26:	d009      	beq.n	8003f3c <ASPEP_getBuffer+0x18>
      if ((pHandle->asyncBufferA.state > writeLock) && (pHandle->asyncBufferB.state > writeLock))
 8003f28:	f890 3036 	ldrb.w	r3, [r0, #54]	@ 0x36
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d91d      	bls.n	8003f6c <ASPEP_getBuffer+0x48>
 8003f30:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d90d      	bls.n	8003f54 <ASPEP_getBuffer+0x30>
        result = false;
 8003f38:	2000      	movs	r0, #0
}
 8003f3a:	4770      	bx	lr
      if (pHandle->syncBuffer.state <= writeLock) /* Possible values are free or writeLock*/
 8003f3c:	f890 302e 	ldrb.w	r3, [r0, #46]	@ 0x2e
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d8f9      	bhi.n	8003f38 <ASPEP_getBuffer+0x14>
        *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 8003f44:	6a83      	ldr	r3, [r0, #40]	@ 0x28
        pHandle->syncBuffer.state = writeLock;
 8003f46:	2201      	movs	r2, #1
        *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 8003f48:	3304      	adds	r3, #4
 8003f4a:	600b      	str	r3, [r1, #0]
        pHandle->syncBuffer.state = writeLock;
 8003f4c:	f880 202e 	strb.w	r2, [r0, #46]	@ 0x2e
  bool result = true;
 8003f50:	2001      	movs	r0, #1
 8003f52:	4770      	bx	lr
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 8003f54:	6b83      	ldr	r3, [r0, #56]	@ 0x38
          pHandle->asyncBufferB.state = writeLock;
 8003f56:	f04f 0c01 	mov.w	ip, #1
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferB;
 8003f5a:	f100 0238 	add.w	r2, r0, #56	@ 0x38
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 8003f5e:	3304      	adds	r3, #4
          pHandle->asyncBufferB.state = writeLock;
 8003f60:	f880 c03e 	strb.w	ip, [r0, #62]	@ 0x3e
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferB;
 8003f64:	6402      	str	r2, [r0, #64]	@ 0x40
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 8003f66:	600b      	str	r3, [r1, #0]
  bool result = true;
 8003f68:	2001      	movs	r0, #1
 8003f6a:	4770      	bx	lr
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 8003f6c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
          pHandle->asyncBufferA.state = writeLock;
 8003f6e:	f04f 0c01 	mov.w	ip, #1
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferA;
 8003f72:	f100 0230 	add.w	r2, r0, #48	@ 0x30
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 8003f76:	3304      	adds	r3, #4
          pHandle->asyncBufferA.state = writeLock;
 8003f78:	f880 c036 	strb.w	ip, [r0, #54]	@ 0x36
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferA;
 8003f7c:	6402      	str	r2, [r0, #64]	@ 0x40
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 8003f7e:	600b      	str	r3, [r1, #0]
 8003f80:	e7f2      	b.n	8003f68 <ASPEP_getBuffer+0x44>
 8003f82:	bf00      	nop

08003f84 <ASPEP_sendPacket>:
{
 8003f84:	4684      	mov	ip, r0
    if (ASPEP_CONNECTED == pHandle-> ASPEP_State)
 8003f86:	f890 0064 	ldrb.w	r0, [r0, #100]	@ 0x64
 8003f8a:	2802      	cmp	r0, #2
 8003f8c:	d001      	beq.n	8003f92 <ASPEP_sendPacket+0xe>
      result = ASPEP_NOT_CONNECTED;
 8003f8e:	2002      	movs	r0, #2
 8003f90:	4770      	bx	lr
      tmpHeader = ((uint32_t)((uint32_t)txDataLengthTemp << (uint32_t)4) | (uint32_t)syncAsync);
 8003f92:	ea43 1002 	orr.w	r0, r3, r2, lsl #4
      *header = tmpHeader;
 8003f96:	f841 0c04 	str.w	r0, [r1, #-4]
      if (1U == pHandle->Capabilities.DATA_CRC)
 8003f9a:	f89c 006c 	ldrb.w	r0, [ip, #108]	@ 0x6c
 8003f9e:	2801      	cmp	r0, #1
 8003fa0:	d104      	bne.n	8003fac <ASPEP_sendPacket+0x28>
        packet[txDataLengthTemp] = (uint8_t)0xCA; /* Dummy CRC */
 8003fa2:	f64f 60ca 	movw	r0, #65226	@ 0xfeca
 8003fa6:	5288      	strh	r0, [r1, r2]
        txDataLengthTemp += (uint16_t)ASPEP_DATACRC_SIZE;
 8003fa8:	3202      	adds	r2, #2
 8003faa:	b292      	uxth	r2, r2
      if (MCTL_SYNC == syncAsync)
 8003fac:	2b0a      	cmp	r3, #10
 8003fae:	d105      	bne.n	8003fbc <ASPEP_sendPacket+0x38>
        if (pSupHandle->MCP_PacketAvailable)
 8003fb0:	f89c 0010 	ldrb.w	r0, [ip, #16]
 8003fb4:	b348      	cbz	r0, 800400a <ASPEP_sendPacket+0x86>
          pSupHandle->MCP_PacketAvailable = false; /* CMD from controller is processed*/
 8003fb6:	2000      	movs	r0, #0
 8003fb8:	f88c 0010 	strb.w	r0, [ip, #16]
  uint32_t header = *headerPtr;
 8003fbc:	f851 0c04 	ldr.w	r0, [r1, #-4]
{
 8003fc0:	b570      	push	{r4, r5, r6, lr}
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8003fc2:	4d34      	ldr	r5, [pc, #208]	@ (8004094 <ASPEP_sendPacket+0x110>)
 8003fc4:	b2c4      	uxtb	r4, r0
        result = ASPEP_TXframeProcess(pHandle, syncAsync, header, txDataLengthTemp + (uint16_t)ASPEP_HEADER_SIZE);
 8003fc6:	3204      	adds	r2, #4
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8003fc8:	5d2e      	ldrb	r6, [r5, r4]
 8003fca:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8003fce:	4074      	eors	r4, r6
      header--; /* Header ues 4*8 bits on top of txBuffer*/
 8003fd0:	f1a1 0e04 	sub.w	lr, r1, #4
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8003fd4:	5d2e      	ldrb	r6, [r5, r4]
 8003fd6:	f3c0 4407 	ubfx	r4, r0, #16, #8
 8003fda:	4074      	eors	r4, r6
        result = ASPEP_TXframeProcess(pHandle, syncAsync, header, txDataLengthTemp + (uint16_t)ASPEP_HEADER_SIZE);
 8003fdc:	b292      	uxth	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8003fde:	5d2c      	ldrb	r4, [r5, r4]
 8003fe0:	f3c0 6503 	ubfx	r5, r0, #24, #4
 8003fe4:	406c      	eors	r4, r5
 8003fe6:	4d2c      	ldr	r5, [pc, #176]	@ (8004098 <ASPEP_sendPacket+0x114>)
  *headerPtr |= (uint32_t)crc << 28;
 8003fe8:	5d2c      	ldrb	r4, [r5, r4]
 8003fea:	ea40 7004 	orr.w	r0, r0, r4, lsl #28
 8003fee:	f841 0c04 	str.w	r0, [r1, #-4]
  __ASM volatile ("cpsid i" : : : "memory");
 8003ff2:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8003ff4:	f8dc 1048 	ldr.w	r1, [ip, #72]	@ 0x48
 8003ff8:	b1b9      	cbz	r1, 800402a <ASPEP_sendPacket+0xa6>
  __ASM volatile ("cpsie i" : : : "memory");
 8003ffa:	b662      	cpsie	i
      if (MCTL_ASYNC == dataType)
 8003ffc:	2b09      	cmp	r3, #9
 8003ffe:	d006      	beq.n	800400e <ASPEP_sendPacket+0x8a>
      else if (MCTL_SYNC == dataType)
 8004000:	2b0a      	cmp	r3, #10
 8004002:	d02a      	beq.n	800405a <ASPEP_sendPacket+0xd6>
      else if(ASPEP_CTRL == dataType)
 8004004:	b37b      	cbz	r3, 8004066 <ASPEP_sendPacket+0xe2>
  uint8_t result = ASPEP_OK;
 8004006:	2000      	movs	r0, #0
}
 8004008:	bd70      	pop	{r4, r5, r6, pc}
          result = MCTL_SYNC_NOT_EXPECTED;
 800400a:	2001      	movs	r0, #1
}
 800400c:	4770      	bx	lr
        if (txBuffer != (uint8_t *)pHandle->lastRequestedAsyncBuff->buffer)
 800400e:	f8dc 3040 	ldr.w	r3, [ip, #64]	@ 0x40
 8004012:	6819      	ldr	r1, [r3, #0]
  uint8_t result = ASPEP_OK;
 8004014:	458e      	cmp	lr, r1
 8004016:	bf14      	ite	ne
 8004018:	2003      	movne	r0, #3
 800401a:	2000      	moveq	r0, #0
        if (NULL == pHandle->asyncNextBuffer)
 800401c:	f8dc 1044 	ldr.w	r1, [ip, #68]	@ 0x44
 8004020:	b3a1      	cbz	r1, 800408c <ASPEP_sendPacket+0x108>
        pHandle->lastRequestedAsyncBuff->state = pending;
 8004022:	2102      	movs	r1, #2
 8004024:	7199      	strb	r1, [r3, #6]
        pHandle->lastRequestedAsyncBuff->length = bufferLength;
 8004026:	809a      	strh	r2, [r3, #4]
}
 8004028:	bd70      	pop	{r4, r5, r6, pc}
      if (MCTL_ASYNC == dataType)
 800402a:	2b09      	cmp	r3, #9
 800402c:	d029      	beq.n	8004082 <ASPEP_sendPacket+0xfe>
      else if (MCTL_SYNC == dataType)
 800402e:	2b0a      	cmp	r3, #10
        pHandle->syncBuffer.state = readLock;
 8004030:	f04f 0303 	mov.w	r3, #3
 8004034:	bf0b      	itete	eq
 8004036:	f88c 302e 	strbeq.w	r3, [ip, #46]	@ 0x2e
        pHandle->ctrlBuffer.state = readLock;
 800403a:	f88c 3024 	strbne.w	r3, [ip, #36]	@ 0x24
        pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 800403e:	f10c 0328 	addeq.w	r3, ip, #40	@ 0x28
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8004042:	f10c 0320 	addne.w	r3, ip, #32
        pHandle->lockBuffer = (void *)pHandle->lastRequestedAsyncBuff;
 8004046:	f8cc 3048 	str.w	r3, [ip, #72]	@ 0x48
 800404a:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 800404c:	f8dc 3058 	ldr.w	r3, [ip, #88]	@ 0x58
 8004050:	f8dc 0014 	ldr.w	r0, [ip, #20]
 8004054:	4671      	mov	r1, lr
 8004056:	4798      	blx	r3
 8004058:	e7d5      	b.n	8004006 <ASPEP_sendPacket+0x82>
        if (pHandle -> syncBuffer.state != writeLock)
 800405a:	f89c 302e 	ldrb.w	r3, [ip, #46]	@ 0x2e
 800405e:	2b01      	cmp	r3, #1
 8004060:	d009      	beq.n	8004076 <ASPEP_sendPacket+0xf2>
          result = ASPEP_BUFFER_ERROR;
 8004062:	2003      	movs	r0, #3
}
 8004064:	bd70      	pop	{r4, r5, r6, pc}
        if (pHandle->ctrlBuffer.state != available)
 8004066:	f89c 3024 	ldrb.w	r3, [ip, #36]	@ 0x24
 800406a:	2b00      	cmp	r3, #0
 800406c:	d1f9      	bne.n	8004062 <ASPEP_sendPacket+0xde>
          pHandle->ctrlBuffer.state = pending;
 800406e:	2302      	movs	r3, #2
 8004070:	f88c 3024 	strb.w	r3, [ip, #36]	@ 0x24
 8004074:	e7c7      	b.n	8004006 <ASPEP_sendPacket+0x82>
          pHandle->syncBuffer.state = pending;
 8004076:	2302      	movs	r3, #2
 8004078:	f88c 302e 	strb.w	r3, [ip, #46]	@ 0x2e
          pHandle->syncBuffer.length = bufferLength;
 800407c:	f8ac 202c 	strh.w	r2, [ip, #44]	@ 0x2c
 8004080:	e7c1      	b.n	8004006 <ASPEP_sendPacket+0x82>
        pHandle->lastRequestedAsyncBuff->state = readLock;
 8004082:	f8dc 3040 	ldr.w	r3, [ip, #64]	@ 0x40
 8004086:	2103      	movs	r1, #3
 8004088:	7199      	strb	r1, [r3, #6]
        pHandle->lockBuffer = (void *)pHandle->lastRequestedAsyncBuff;
 800408a:	e7dc      	b.n	8004046 <ASPEP_sendPacket+0xc2>
          pHandle->asyncNextBuffer = pHandle->lastRequestedAsyncBuff;
 800408c:	f8cc 3044 	str.w	r3, [ip, #68]	@ 0x44
 8004090:	e7c7      	b.n	8004022 <ASPEP_sendPacket+0x9e>
 8004092:	bf00      	nop
 8004094:	0800b360 	.word	0x0800b360
 8004098:	0800b350 	.word	0x0800b350

0800409c <ASPEP_HWDataTransmittedIT>:
  * Therefore, there is no need to protect this ISR against another higher priority ISR (HF Task).
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_HWDataTransmittedIT(ASPEP_Handle_t *pHandle)
{
 800409c:	b510      	push	{r4, lr}
  }
  else
  {
#endif
    /* First free previous readLock buffer */
    if (pHandle->ctrlBuffer.state == readLock)
 800409e:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 80040a2:	2b03      	cmp	r3, #3
{
 80040a4:	4604      	mov	r4, r0
    if (pHandle->ctrlBuffer.state == readLock)
 80040a6:	d013      	beq.n	80040d0 <ASPEP_HWDataTransmittedIT+0x34>
      pHandle->ctrlBuffer.state = available;
    }
    else /* if previous buffer was not ASPEP_CTRL, then the buffer locked is a MCTL_Buff_t */
    {
      MCTL_Buff_t *tempBuff = (MCTL_Buff_t *)pHandle->lockBuffer; //cstat !MISRAC2012-Rule-11.5
      tempBuff->state = available;
 80040a8:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 80040aa:	2100      	movs	r1, #0
 80040ac:	7191      	strb	r1, [r2, #6]
    }
    if (pHandle->syncBuffer.state == pending)
 80040ae:	f890 202e 	ldrb.w	r2, [r0, #46]	@ 0x2e
 80040b2:	2a02      	cmp	r2, #2
 80040b4:	d013      	beq.n	80040de <ASPEP_HWDataTransmittedIT+0x42>
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
      pHandle->fASPEP_send(pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
      pHandle->syncBuffer.state = readLock;
    }
    /* Second prepare transfer of pending buffer */
    else if (pHandle->ctrlBuffer.state == pending)
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d11d      	bne.n	80040f6 <ASPEP_HWDataTransmittedIT+0x5a>
    {
      pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 80040ba:	f100 0120 	add.w	r1, r0, #32
      pHandle->fASPEP_send(pHandle ->HWIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 80040be:	6d83      	ldr	r3, [r0, #88]	@ 0x58
      pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 80040c0:	6481      	str	r1, [r0, #72]	@ 0x48
      pHandle->fASPEP_send(pHandle ->HWIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 80040c2:	2204      	movs	r2, #4
 80040c4:	6940      	ldr	r0, [r0, #20]
 80040c6:	4798      	blx	r3
      pHandle->ctrlBuffer.state = readLock;
 80040c8:	2303      	movs	r3, #3
 80040ca:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
      __enable_irq();
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 80040ce:	bd10      	pop	{r4, pc}
    if (pHandle->syncBuffer.state == pending)
 80040d0:	f890 302e 	ldrb.w	r3, [r0, #46]	@ 0x2e
      pHandle->ctrlBuffer.state = available;
 80040d4:	2200      	movs	r2, #0
    if (pHandle->syncBuffer.state == pending)
 80040d6:	2b02      	cmp	r3, #2
      pHandle->ctrlBuffer.state = available;
 80040d8:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
    if (pHandle->syncBuffer.state == pending)
 80040dc:	d10b      	bne.n	80040f6 <ASPEP_HWDataTransmittedIT+0x5a>
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 80040de:	f104 0028 	add.w	r0, r4, #40	@ 0x28
      pHandle->fASPEP_send(pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 80040e2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 80040e4:	64a0      	str	r0, [r4, #72]	@ 0x48
      pHandle->fASPEP_send(pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 80040e6:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 80040e8:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80040ea:	6960      	ldr	r0, [r4, #20]
 80040ec:	4798      	blx	r3
      pHandle->syncBuffer.state = readLock;
 80040ee:	2303      	movs	r3, #3
 80040f0:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
}
 80040f4:	bd10      	pop	{r4, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 80040f6:	b672      	cpsid	i
      if (pHandle->asyncNextBuffer != NULL)
 80040f8:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80040fa:	b1cb      	cbz	r3, 8004130 <ASPEP_HWDataTransmittedIT+0x94>
        pHandle->asyncNextBuffer->state = readLock;
 80040fc:	2203      	movs	r2, #3
        pHandle->lockBuffer = (void *)pHandle->asyncNextBuffer;
 80040fe:	64a3      	str	r3, [r4, #72]	@ 0x48
        pHandle->asyncNextBuffer->state = readLock;
 8004100:	719a      	strb	r2, [r3, #6]
        pHandle->fASPEP_send(pHandle ->HWIp, pHandle->asyncNextBuffer->buffer, pHandle->asyncNextBuffer->length);
 8004102:	6819      	ldr	r1, [r3, #0]
 8004104:	889a      	ldrh	r2, [r3, #4]
 8004106:	6960      	ldr	r0, [r4, #20]
 8004108:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800410a:	4798      	blx	r3
        if ((pHandle->asyncBufferA.state == pending) || (pHandle->asyncBufferB.state == pending))
 800410c:	f894 3036 	ldrb.w	r3, [r4, #54]	@ 0x36
 8004110:	2b02      	cmp	r3, #2
 8004112:	d007      	beq.n	8004124 <ASPEP_HWDataTransmittedIT+0x88>
 8004114:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8004118:	2b02      	cmp	r3, #2
 800411a:	d003      	beq.n	8004124 <ASPEP_HWDataTransmittedIT+0x88>
          pHandle->asyncNextBuffer = NULL;
 800411c:	2300      	movs	r3, #0
 800411e:	6463      	str	r3, [r4, #68]	@ 0x44
  __ASM volatile ("cpsie i" : : : "memory");
 8004120:	b662      	cpsie	i
}
 8004122:	bd10      	pop	{r4, pc}
          uint32_t temp = (uint32_t)&pHandle->asyncBufferA + (uint32_t)&pHandle->asyncBufferB
 8004124:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8004126:	0063      	lsls	r3, r4, #1
 8004128:	3368      	adds	r3, #104	@ 0x68
 800412a:	1a9b      	subs	r3, r3, r2
          pHandle->asyncNextBuffer = (MCTL_Buff_t *) temp; //cstat !MISRAC2012-Rule-11.4
 800412c:	6463      	str	r3, [r4, #68]	@ 0x44
        {
 800412e:	e7f7      	b.n	8004120 <ASPEP_HWDataTransmittedIT+0x84>
        pHandle->lockBuffer = NULL;
 8004130:	64a3      	str	r3, [r4, #72]	@ 0x48
 8004132:	e7f5      	b.n	8004120 <ASPEP_HWDataTransmittedIT+0x84>

08004134 <ASPEP_RXframeProcess>:
    uint16_t packetNumber;
#if VALID_CRC_DATA
    bool validCRCData = true;
#endif
    *packetLength = 0;
    if (pHandle->NewPacketAvailable)
 8004134:	f890 3061 	ldrb.w	r3, [r0, #97]	@ 0x61
    uint32_t packetHeader = *((uint32_t *)pHandle->rxHeader); //cstat !MISRAC2012-Rule-11.3
 8004138:	69c2      	ldr	r2, [r0, #28]
    *packetLength = 0;
 800413a:	f04f 0c00 	mov.w	ip, #0
{
 800413e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004142:	4604      	mov	r4, r0
    *packetLength = 0;
 8004144:	f8a1 c000 	strh.w	ip, [r1]
    if (pHandle->NewPacketAvailable)
 8004148:	b1cb      	cbz	r3, 800417e <ASPEP_RXframeProcess+0x4a>
    {
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
      switch (pHandle->ASPEP_State)
 800414a:	f890 3064 	ldrb.w	r3, [r0, #100]	@ 0x64
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
 800414e:	f880 c061 	strb.w	ip, [r0, #97]	@ 0x61
      switch (pHandle->ASPEP_State)
 8004152:	2b01      	cmp	r3, #1
 8004154:	d055      	beq.n	8004202 <ASPEP_RXframeProcess+0xce>
 8004156:	2b02      	cmp	r3, #2
 8004158:	d018      	beq.n	800418c <ASPEP_RXframeProcess+0x58>
 800415a:	b933      	cbnz	r3, 800416a <ASPEP_RXframeProcess+0x36>
      {
        case ASPEP_IDLE:
        {
          if (BEACON == pHandle->rxPacketType)
 800415c:	6e81      	ldr	r1, [r0, #104]	@ 0x68
 800415e:	2905      	cmp	r1, #5
 8004160:	f000 80e3 	beq.w	800432a <ASPEP_RXframeProcess+0x1f6>
              /* Nothing to do, controller has to send back new beacon with matching capabilities */
            }
            /* Beacon Packet must be answered*/
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
          }
          else if (PING == pHandle->rxPacketType)
 8004164:	2906      	cmp	r1, #6
 8004166:	f000 8129 	beq.w	80043bc <ASPEP_RXframeProcess+0x288>
  uint8_t *result = NULL; //cstat !MISRAC2012-Rule-8.13
 800416a:	2500      	movs	r5, #0

        default:
          break;
      }
      /* The valid received packet is now safely consumes, we are ready to receive a new packet */
      pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 800416c:	6960      	ldr	r0, [r4, #20]
 800416e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004170:	2204      	movs	r2, #4
 8004172:	f104 011c 	add.w	r1, r4, #28
 8004176:	4798      	blx	r3
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
  return (result);
}
 8004178:	4628      	mov	r0, r5
 800417a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if (pHandle->badPacketFlag > ASPEP_OK)
 800417e:	f890 3062 	ldrb.w	r3, [r0, #98]	@ 0x62
 8004182:	b9bb      	cbnz	r3, 80041b4 <ASPEP_RXframeProcess+0x80>
  uint8_t *result = NULL; //cstat !MISRAC2012-Rule-8.13
 8004184:	2500      	movs	r5, #0
}
 8004186:	4628      	mov	r0, r5
 8004188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if (BEACON == pHandle->rxPacketType)
 800418c:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 800418e:	2b05      	cmp	r3, #5
 8004190:	d045      	beq.n	800421e <ASPEP_RXframeProcess+0xea>
          else if (PING == pHandle->rxPacketType)
 8004192:	2b06      	cmp	r3, #6
 8004194:	f000 8118 	beq.w	80043c8 <ASPEP_RXframeProcess+0x294>
          else if (DATA_PACKET == pHandle->rxPacketType)
 8004198:	2b09      	cmp	r3, #9
 800419a:	d1e6      	bne.n	800416a <ASPEP_RXframeProcess+0x36>
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from controller */
 800419c:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
              *packetLength = pHandle->rxLength;
 80041a0:	f8b0 205c 	ldrh.w	r2, [r0, #92]	@ 0x5c
              result = pHandle->rxBuffer;
 80041a4:	69a5      	ldr	r5, [r4, #24]
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from controller */
 80041a6:	3301      	adds	r3, #1
              pSupHandle->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 80041a8:	2001      	movs	r0, #1
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from controller */
 80041aa:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
              pSupHandle->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 80041ae:	7420      	strb	r0, [r4, #16]
              *packetLength = pHandle->rxLength;
 80041b0:	800a      	strh	r2, [r1, #0]
              result = pHandle->rxBuffer;
 80041b2:	e7db      	b.n	800416c <ASPEP_RXframeProcess+0x38>
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 80041b4:	eb03 2303 	add.w	r3, r3, r3, lsl #8
 80041b8:	021b      	lsls	r3, r3, #8
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 80041ba:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80041be:	488b      	ldr	r0, [pc, #556]	@ (80043ec <ASPEP_RXframeProcess+0x2b8>)
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 80041c0:	4d8b      	ldr	r5, [pc, #556]	@ (80043f0 <ASPEP_RXframeProcess+0x2bc>)
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 80041c2:	f082 0209 	eor.w	r2, r2, #9
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 80041c6:	f043 010f 	orr.w	r1, r3, #15
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 80041ca:	5c82      	ldrb	r2, [r0, r2]
 80041cc:	ea82 4313 	eor.w	r3, r2, r3, lsr #16
 80041d0:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 80041d2:	5cc3      	ldrb	r3, [r0, r3]
  *headerPtr |= (uint32_t)crc << 28;
 80041d4:	5ceb      	ldrb	r3, [r5, r3]
 80041d6:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
 80041da:	6223      	str	r3, [r4, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80041dc:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 80041de:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	f000 80f6 	beq.w	80043d2 <ASPEP_RXframeProcess+0x29e>
  __ASM volatile ("cpsie i" : : : "memory");
 80041e6:	b662      	cpsie	i
        if (pHandle->ctrlBuffer.state != available)
 80041e8:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 80041ec:	b913      	cbnz	r3, 80041f4 <ASPEP_RXframeProcess+0xc0>
          pHandle->ctrlBuffer.state = pending;
 80041ee:	2302      	movs	r3, #2
 80041f0:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
      pHandle->badPacketFlag = ASPEP_OK;
 80041f4:	2200      	movs	r2, #0
      pHandle->fASPEP_HWSync(pHandle->HWIp);
 80041f6:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80041f8:	6960      	ldr	r0, [r4, #20]
      pHandle->badPacketFlag = ASPEP_OK;
 80041fa:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
      pHandle->fASPEP_HWSync(pHandle->HWIp);
 80041fe:	4798      	blx	r3
 8004200:	e7c0      	b.n	8004184 <ASPEP_RXframeProcess+0x50>
          if (BEACON == pHandle->rxPacketType)
 8004202:	6e81      	ldr	r1, [r0, #104]	@ 0x68
 8004204:	2905      	cmp	r1, #5
 8004206:	d04f      	beq.n	80042a8 <ASPEP_RXframeProcess+0x174>
          else if (PING == pHandle->rxPacketType)
 8004208:	2906      	cmp	r1, #6
 800420a:	d1ae      	bne.n	800416a <ASPEP_RXframeProcess+0x36>
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 800420c:	4619      	mov	r1, r3
 800420e:	f3c2 320f 	ubfx	r2, r2, #12, #16
 8004212:	f7ff fe41 	bl	8003e98 <ASPEP_sendPing>
            pHandle->ASPEP_State = ASPEP_CONNECTED;
 8004216:	2302      	movs	r3, #2
 8004218:	f884 3064 	strb.w	r3, [r4, #100]	@ 0x64
 800421c:	e7a5      	b.n	800416a <ASPEP_RXframeProcess+0x36>
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 800421e:	f894 e01d 	ldrb.w	lr, [r4, #29]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8004222:	f894 506d 	ldrb.w	r5, [r4, #109]	@ 0x6d
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8004226:	7f00      	ldrb	r0, [r0, #28]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8004228:	f894 606c 	ldrb.w	r6, [r4, #108]	@ 0x6c
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 800422c:	f894 706e 	ldrb.w	r7, [r4, #110]	@ 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8004230:	f894 906f 	ldrb.w	r9, [r4, #111]	@ 0x6f
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8004234:	f00e 0e3f 	and.w	lr, lr, #63	@ 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8004238:	09c0      	lsrs	r0, r0, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 800423a:	4575      	cmp	r5, lr
 800423c:	bf28      	it	cs
 800423e:	4675      	movcs	r5, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8004240:	42b0      	cmp	r0, r6
 8004242:	4601      	mov	r1, r0
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8004244:	f3c2 3886 	ubfx	r8, r2, #14, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8004248:	bf28      	it	cs
 800424a:	4631      	movcs	r1, r6
 800424c:	4663      	mov	r3, ip
 800424e:	f361 0307 	bfi	r3, r1, #0, #8
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 8004252:	f3c2 5a46 	ubfx	sl, r2, #21, #7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8004256:	45b8      	cmp	r8, r7
 8004258:	4641      	mov	r1, r8
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 800425a:	f365 230f 	bfi	r3, r5, #8, #8
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 800425e:	bf28      	it	cs
 8004260:	4639      	movcs	r1, r7
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8004262:	45ca      	cmp	sl, r9
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8004264:	f361 4317 	bfi	r3, r1, #16, #8
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8004268:	4651      	mov	r1, sl
 800426a:	bf28      	it	cs
 800426c:	4649      	movcs	r1, r9
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 800426e:	f361 631f 	bfi	r3, r1, #24, #8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8004272:	42b0      	cmp	r0, r6
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8004274:	66e3      	str	r3, [r4, #108]	@ 0x6c
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8004276:	f104 016c 	add.w	r1, r4, #108	@ 0x6c
 800427a:	d80f      	bhi.n	800429c <ASPEP_RXframeProcess+0x168>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 800427c:	45ae      	cmp	lr, r5
 800427e:	d80d      	bhi.n	800429c <ASPEP_RXframeProcess+0x168>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8004280:	45b8      	cmp	r8, r7
 8004282:	d80b      	bhi.n	800429c <ASPEP_RXframeProcess+0x168>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8004284:	45ca      	cmp	sl, r9
 8004286:	d809      	bhi.n	800429c <ASPEP_RXframeProcess+0x168>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8004288:	f894 c070 	ldrb.w	ip, [r4, #112]	@ 0x70
 800428c:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8004290:	ebac 0c02 	sub.w	ip, ip, r2
 8004294:	fabc fc8c 	clz	ip, ip
 8004298:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800429c:	f884 c064 	strb.w	ip, [r4, #100]	@ 0x64
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
 80042a0:	4620      	mov	r0, r4
 80042a2:	f7ff fdb3 	bl	8003e0c <ASPEP_sendBeacon>
 80042a6:	e760      	b.n	800416a <ASPEP_RXframeProcess+0x36>
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 80042a8:	7f45      	ldrb	r5, [r0, #29]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80042aa:	f890 606c 	ldrb.w	r6, [r0, #108]	@ 0x6c
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 80042ae:	7f01      	ldrb	r1, [r0, #28]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 80042b0:	f890 006d 	ldrb.w	r0, [r0, #109]	@ 0x6d
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80042b4:	f894 706e 	ldrb.w	r7, [r4, #110]	@ 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80042b8:	f894 e06f 	ldrb.w	lr, [r4, #111]	@ 0x6f
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 80042bc:	f005 053f 	and.w	r5, r5, #63	@ 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 80042c0:	09c9      	lsrs	r1, r1, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 80042c2:	42a8      	cmp	r0, r5
 80042c4:	bf28      	it	cs
 80042c6:	4628      	movcs	r0, r5
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80042c8:	42b1      	cmp	r1, r6
 80042ca:	4663      	mov	r3, ip
 80042cc:	468c      	mov	ip, r1
 80042ce:	bf28      	it	cs
 80042d0:	46b4      	movcs	ip, r6
 80042d2:	f36c 0307 	bfi	r3, ip, #0, #8
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 80042d6:	f3c2 3c86 	ubfx	ip, r2, #14, #7
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 80042da:	f3c2 5846 	ubfx	r8, r2, #21, #7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80042de:	45bc      	cmp	ip, r7
 80042e0:	46e1      	mov	r9, ip
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80042e2:	f360 230f 	bfi	r3, r0, #8, #8
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80042e6:	bf28      	it	cs
 80042e8:	46b9      	movcs	r9, r7
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80042ea:	45f0      	cmp	r8, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80042ec:	f369 4317 	bfi	r3, r9, #16, #8
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80042f0:	46c1      	mov	r9, r8
 80042f2:	bf28      	it	cs
 80042f4:	46f1      	movcs	r9, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80042f6:	f369 631f 	bfi	r3, r9, #24, #8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 80042fa:	42b1      	cmp	r1, r6
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80042fc:	66e3      	str	r3, [r4, #108]	@ 0x6c
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 80042fe:	d80b      	bhi.n	8004318 <ASPEP_RXframeProcess+0x1e4>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8004300:	4285      	cmp	r5, r0
 8004302:	d809      	bhi.n	8004318 <ASPEP_RXframeProcess+0x1e4>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8004304:	45bc      	cmp	ip, r7
 8004306:	d807      	bhi.n	8004318 <ASPEP_RXframeProcess+0x1e4>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8004308:	45f0      	cmp	r8, lr
 800430a:	d805      	bhi.n	8004318 <ASPEP_RXframeProcess+0x1e4>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 800430c:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 8004310:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8004314:	4293      	cmp	r3, r2
 8004316:	d002      	beq.n	800431e <ASPEP_RXframeProcess+0x1ea>
              pHandle->ASPEP_State = ASPEP_IDLE;
 8004318:	2300      	movs	r3, #0
 800431a:	f884 3064 	strb.w	r3, [r4, #100]	@ 0x64
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
 800431e:	f104 016c 	add.w	r1, r4, #108	@ 0x6c
 8004322:	4620      	mov	r0, r4
 8004324:	f7ff fd72 	bl	8003e0c <ASPEP_sendBeacon>
 8004328:	e71f      	b.n	800416a <ASPEP_RXframeProcess+0x36>
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 800432a:	f890 c01d 	ldrb.w	ip, [r0, #29]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 800432e:	f890 106d 	ldrb.w	r1, [r0, #109]	@ 0x6d
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8004332:	7f05      	ldrb	r5, [r0, #28]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8004334:	f890 606c 	ldrb.w	r6, [r0, #108]	@ 0x6c
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8004338:	f890 706e 	ldrb.w	r7, [r0, #110]	@ 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 800433c:	f894 906f 	ldrb.w	r9, [r4, #111]	@ 0x6f
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8004340:	f00c 0c3f 	and.w	ip, ip, #63	@ 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8004344:	09ed      	lsrs	r5, r5, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8004346:	4561      	cmp	r1, ip
 8004348:	bf28      	it	cs
 800434a:	4661      	movcs	r1, ip
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 800434c:	42b5      	cmp	r5, r6
 800434e:	4628      	mov	r0, r5
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8004350:	f3c2 3886 	ubfx	r8, r2, #14, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8004354:	bf28      	it	cs
 8004356:	4630      	movcs	r0, r6
 8004358:	f360 0307 	bfi	r3, r0, #0, #8
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 800435c:	f3c2 5a46 	ubfx	sl, r2, #21, #7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8004360:	45b8      	cmp	r8, r7
 8004362:	4640      	mov	r0, r8
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8004364:	f361 230f 	bfi	r3, r1, #8, #8
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8004368:	bf28      	it	cs
 800436a:	4638      	movcs	r0, r7
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 800436c:	45ca      	cmp	sl, r9
 800436e:	46d6      	mov	lr, sl
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8004370:	f360 4317 	bfi	r3, r0, #16, #8
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8004374:	bf28      	it	cs
 8004376:	46ce      	movcs	lr, r9
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8004378:	f36e 631f 	bfi	r3, lr, #24, #8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 800437c:	42b5      	cmp	r5, r6
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 800437e:	66e3      	str	r3, [r4, #108]	@ 0x6c
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8004380:	d8cd      	bhi.n	800431e <ASPEP_RXframeProcess+0x1ea>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8004382:	458c      	cmp	ip, r1
 8004384:	d8cb      	bhi.n	800431e <ASPEP_RXframeProcess+0x1ea>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8004386:	45b8      	cmp	r8, r7
 8004388:	d8c9      	bhi.n	800431e <ASPEP_RXframeProcess+0x1ea>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 800438a:	45ca      	cmp	sl, r9
 800438c:	d8c7      	bhi.n	800431e <ASPEP_RXframeProcess+0x1ea>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 800438e:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 8004392:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8004396:	4293      	cmp	r3, r2
 8004398:	d1c1      	bne.n	800431e <ASPEP_RXframeProcess+0x1ea>
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 800439a:	1c4b      	adds	r3, r1, #1
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 800439c:	1c42      	adds	r2, r0, #1
 800439e:	b2d2      	uxtb	r2, r2
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 80043a0:	b2db      	uxtb	r3, r3
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 80043a2:	0152      	lsls	r2, r2, #5
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
 80043a4:	ea4f 1e8e 	mov.w	lr, lr, lsl #6
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 80043a8:	015b      	lsls	r3, r3, #5
              pHandle->ASPEP_State = ASPEP_CONFIGURED;
 80043aa:	2101      	movs	r1, #1
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 80043ac:	81a2      	strh	r2, [r4, #12]
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
 80043ae:	f8a4 e00e 	strh.w	lr, [r4, #14]
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 80043b2:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
              pHandle->ASPEP_State = ASPEP_CONFIGURED;
 80043b6:	f884 1064 	strb.w	r1, [r4, #100]	@ 0x64
 80043ba:	e7b0      	b.n	800431e <ASPEP_RXframeProcess+0x1ea>
            ASPEP_sendPing(pHandle, ASPEP_PING_RESET, packetNumber);
 80043bc:	f3c2 320f 	ubfx	r2, r2, #12, #16
 80043c0:	4619      	mov	r1, r3
 80043c2:	f7ff fd69 	bl	8003e98 <ASPEP_sendPing>
 80043c6:	e6d0      	b.n	800416a <ASPEP_RXframeProcess+0x36>
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 80043c8:	7f42      	ldrb	r2, [r0, #29]
 80043ca:	2101      	movs	r1, #1
 80043cc:	f7ff fd64 	bl	8003e98 <ASPEP_sendPing>
 80043d0:	e6cb      	b.n	800416a <ASPEP_RXframeProcess+0x36>
  (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 80043d2:	f104 0120 	add.w	r1, r4, #32
        pHandle->ctrlBuffer.state = readLock;
 80043d6:	2303      	movs	r3, #3
 80043d8:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 80043dc:	64a1      	str	r1, [r4, #72]	@ 0x48
 80043de:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 80043e0:	2204      	movs	r2, #4
 80043e2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80043e4:	6960      	ldr	r0, [r4, #20]
 80043e6:	4798      	blx	r3
 80043e8:	e704      	b.n	80041f4 <ASPEP_RXframeProcess+0xc0>
 80043ea:	bf00      	nop
 80043ec:	0800b360 	.word	0x0800b360
 80043f0:	0800b350 	.word	0x0800b350

080043f4 <ASPEP_HWDataReceivedIT>:
  * If the packet received contains an error in the header, the HW IP will be re-synchronised first, and DMA will be configured after.
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_HWDataReceivedIT(ASPEP_Handle_t *pHandle)
{
 80043f4:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    switch (pHandle->ASPEP_TL_State)
 80043f6:	f890 3065 	ldrb.w	r3, [r0, #101]	@ 0x65
{
 80043fa:	4604      	mov	r4, r0
    switch (pHandle->ASPEP_TL_State)
 80043fc:	b13b      	cbz	r3, 800440e <ASPEP_HWDataReceivedIT+0x1a>
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d104      	bne.n	800440c <ASPEP_HWDataReceivedIT+0x18>
        break;
      }

      case WAITING_PAYLOAD:
      {
        pHandle->ASPEP_TL_State = WAITING_PACKET;
 8004402:	2200      	movs	r2, #0
 8004404:	f880 2065 	strb.w	r2, [r0, #101]	@ 0x65
        /* Payload received, */
        pHandle->NewPacketAvailable = true;
 8004408:	f880 3061 	strb.w	r3, [r0, #97]	@ 0x61
        break;
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 800440c:	bd10      	pop	{r4, pc}
        if (ASPEP_CheckHeaderCRC(*(uint32_t *)pHandle->rxHeader) == true) //cstat !MISRAC2012-Rule-11.3
 800440e:	69c1      	ldr	r1, [r0, #28]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8004410:	4a1e      	ldr	r2, [pc, #120]	@ (800448c <ASPEP_HWDataReceivedIT+0x98>)
 8004412:	b2cb      	uxtb	r3, r1
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8004414:	5cd3      	ldrb	r3, [r2, r3]
 8004416:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 800441a:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 800441c:	5cd3      	ldrb	r3, [r2, r3]
 800441e:	ea83 4311 	eor.w	r3, r3, r1, lsr #16
 8004422:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 24U) & 0xffU)];
 8004424:	5cd3      	ldrb	r3, [r2, r3]
 8004426:	ea83 6311 	eor.w	r3, r3, r1, lsr #24
        if (ASPEP_CheckHeaderCRC(*(uint32_t *)pHandle->rxHeader) == true) //cstat !MISRAC2012-Rule-11.3
 800442a:	5cd3      	ldrb	r3, [r2, r3]
 800442c:	b95b      	cbnz	r3, 8004446 <ASPEP_HWDataReceivedIT+0x52>
          pHandle->rxPacketType = (ASPEP_packetType)(((uint32_t)pHandle->rxHeader[0]) & ID_MASK);
 800442e:	7f03      	ldrb	r3, [r0, #28]
 8004430:	f003 030f 	and.w	r3, r3, #15
 8004434:	2b06      	cmp	r3, #6
 8004436:	6683      	str	r3, [r0, #104]	@ 0x68
          switch (pHandle->rxPacketType)
 8004438:	d809      	bhi.n	800444e <ASPEP_HWDataReceivedIT+0x5a>
 800443a:	2b04      	cmp	r3, #4
 800443c:	d81e      	bhi.n	800447c <ASPEP_HWDataReceivedIT+0x88>
              pHandle->badPacketFlag = ASPEP_BAD_PACKET_TYPE;
 800443e:	2301      	movs	r3, #1
 8004440:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
}
 8004444:	bd10      	pop	{r4, pc}
          pHandle->badPacketFlag = ASPEP_BAD_CRC_HEADER;
 8004446:	2304      	movs	r3, #4
 8004448:	f880 3062 	strb.w	r3, [r0, #98]	@ 0x62
}
 800444c:	bd10      	pop	{r4, pc}
 800444e:	2b09      	cmp	r3, #9
 8004450:	d1f5      	bne.n	800443e <ASPEP_HWDataReceivedIT+0x4a>
              pHandle->rxLength = (uint16_t)((*((uint16_t *)pHandle->rxHeader) & 0x1FFF0U) >> (uint16_t)4);
 8004452:	8b83      	ldrh	r3, [r0, #28]
 8004454:	091b      	lsrs	r3, r3, #4
 8004456:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
              if (0U == pHandle->rxLength) /* data packet with length 0 is a valid packet */
 800445a:	b17b      	cbz	r3, 800447c <ASPEP_HWDataReceivedIT+0x88>
              else if (pHandle->rxLength <= pHandle->maxRXPayload)
 800445c:	f8b0 205e 	ldrh.w	r2, [r0, #94]	@ 0x5e
 8004460:	429a      	cmp	r2, r3
 8004462:	d30f      	bcc.n	8004484 <ASPEP_HWDataReceivedIT+0x90>
                pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxBuffer,  /* need to read + 2 bytes CRC*/
 8004464:	f890 206c 	ldrb.w	r2, [r0, #108]	@ 0x6c
 8004468:	6981      	ldr	r1, [r0, #24]
 800446a:	6940      	ldr	r0, [r0, #20]
 800446c:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8004470:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004472:	4798      	blx	r3
                pHandle->ASPEP_TL_State = WAITING_PAYLOAD;
 8004474:	2301      	movs	r3, #1
 8004476:	f884 3065 	strb.w	r3, [r4, #101]	@ 0x65
}
 800447a:	bd10      	pop	{r4, pc}
              pHandle->NewPacketAvailable = true;
 800447c:	2301      	movs	r3, #1
 800447e:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
}
 8004482:	bd10      	pop	{r4, pc}
                pHandle->badPacketFlag = ASPEP_BAD_PACKET_SIZE;
 8004484:	2302      	movs	r3, #2
 8004486:	f880 3062 	strb.w	r3, [r0, #98]	@ 0x62
}
 800448a:	bd10      	pop	{r4, pc}
 800448c:	0800b360 	.word	0x0800b360

08004490 <ASPEP_HWDMAReset>:
  * @brief  Resets DMA after debugger has stopped the MCU.
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_HWDMAReset(ASPEP_Handle_t *pHandle)
{
 8004490:	4601      	mov	r1, r0
  {
#endif
    /* We must reset the RX state machine to be sure to not be in Waiting packet state */
    /* Otherwise the arrival of a new packet will trigger a NewPacketAvailable despite */
    /* the fact that bytes have been lost because of overrun (debugger paused for instance) */
    pHandle->ASPEP_TL_State = WAITING_PACKET;
 8004492:	2200      	movs	r2, #0
 8004494:	f880 2065 	strb.w	r2, [r0, #101]	@ 0x65
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8004498:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800449a:	6940      	ldr	r0, [r0, #20]
 800449c:	2204      	movs	r2, #4
 800449e:	311c      	adds	r1, #28
 80044a0:	4718      	bx	r3
 80044a2:	bf00      	nop
 80044a4:	0000      	movs	r0, r0
	...

080044a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80044a8:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80044aa:	2300      	movs	r3, #0
{
 80044ac:	b097      	sub	sp, #92	@ 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80044ae:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
 80044b2:	e9cd 330c 	strd	r3, r3, [sp, #48]	@ 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80044b6:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80044ba:	e9cd 3305 	strd	r3, r3, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80044be:	4926      	ldr	r1, [pc, #152]	@ (8004558 <SystemClock_Config+0xb0>)
 80044c0:	9301      	str	r3, [sp, #4]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80044c2:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 80044c4:	6c08      	ldr	r0, [r1, #64]	@ 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80044c6:	4a25      	ldr	r2, [pc, #148]	@ (800455c <SystemClock_Config+0xb4>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80044c8:	f040 5080 	orr.w	r0, r0, #268435456	@ 0x10000000
 80044cc:	6408      	str	r0, [r1, #64]	@ 0x40
 80044ce:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80044d0:	f001 5180 	and.w	r1, r1, #268435456	@ 0x10000000
 80044d4:	9101      	str	r1, [sp, #4]
 80044d6:	9901      	ldr	r1, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80044d8:	9302      	str	r3, [sp, #8]
 80044da:	6813      	ldr	r3, [r2, #0]
 80044dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80044e0:	6013      	str	r3, [r2, #0]
 80044e2:	6813      	ldr	r3, [r2, #0]
 80044e4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80044e8:	2402      	movs	r4, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80044ea:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80044ec:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80044f0:	ed9f 7b17 	vldr	d7, [pc, #92]	@ 8004550 <SystemClock_Config+0xa8>
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80044f4:	e9cd 410e 	strd	r4, r1, [sp, #56]	@ 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80044f8:	9802      	ldr	r0, [sp, #8]
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 180;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
 80044fa:	9414      	str	r4, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80044fc:	2002      	movs	r0, #2
 80044fe:	2102      	movs	r1, #2
 8004500:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004504:	2204      	movs	r2, #4
  RCC_OscInitStruct.PLL.PLLN = 180;
 8004506:	23b4      	movs	r3, #180	@ 0xb4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004508:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800450a:	ed8d 7b08 	vstr	d7, [sp, #32]
  RCC_OscInitStruct.PLL.PLLM = 4;
 800450e:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8004510:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004512:	f004 f9df 	bl	80088d4 <HAL_RCC_OscConfig>
 8004516:	b108      	cbz	r0, 800451c <SystemClock_Config+0x74>
  __ASM volatile ("cpsid i" : : : "memory");
 8004518:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800451a:	e7fe      	b.n	800451a <SystemClock_Config+0x72>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800451c:	f004 f884 	bl	8008628 <HAL_PWREx_EnableOverDrive>
 8004520:	4603      	mov	r3, r0
 8004522:	b108      	cbz	r0, 8004528 <SystemClock_Config+0x80>
 8004524:	b672      	cpsid	i
  while (1)
 8004526:	e7fe      	b.n	8004526 <SystemClock_Config+0x7e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004528:	220f      	movs	r2, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800452a:	e9cd 2403 	strd	r2, r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800452e:	f44f 55a0 	mov.w	r5, #5120	@ 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004532:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004536:	a803      	add	r0, sp, #12
 8004538:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800453a:	e9cd 3505 	strd	r3, r5, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800453e:	9207      	str	r2, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004540:	f004 f8ae 	bl	80086a0 <HAL_RCC_ClockConfig>
 8004544:	b108      	cbz	r0, 800454a <SystemClock_Config+0xa2>
 8004546:	b672      	cpsid	i
  while (1)
 8004548:	e7fe      	b.n	8004548 <SystemClock_Config+0xa0>
}
 800454a:	b017      	add	sp, #92	@ 0x5c
 800454c:	bd30      	pop	{r4, r5, pc}
 800454e:	bf00      	nop
 8004550:	00000001 	.word	0x00000001
 8004554:	00010000 	.word	0x00010000
 8004558:	40023800 	.word	0x40023800
 800455c:	40007000 	.word	0x40007000

08004560 <main>:
{
 8004560:	b580      	push	{r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004562:	2400      	movs	r4, #0
{
 8004564:	b09c      	sub	sp, #112	@ 0x70
  HAL_Init();
 8004566:	f003 fbd7 	bl	8007d18 <HAL_Init>
  SystemClock_Config();
 800456a:	f7ff ff9d 	bl	80044a8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800456e:	e9cd 4414 	strd	r4, r4, [sp, #80]	@ 0x50
 8004572:	e9cd 4416 	strd	r4, r4, [sp, #88]	@ 0x58
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004576:	4d9c      	ldr	r5, [pc, #624]	@ (80047e8 <main+0x288>)
 8004578:	9402      	str	r4, [sp, #8]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800457a:	9418      	str	r4, [sp, #96]	@ 0x60
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800457c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 800457e:	489b      	ldr	r0, [pc, #620]	@ (80047ec <main+0x28c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004580:	f043 0304 	orr.w	r3, r3, #4
 8004584:	632b      	str	r3, [r5, #48]	@ 0x30
 8004586:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004588:	f003 0304 	and.w	r3, r3, #4
 800458c:	9302      	str	r3, [sp, #8]
 800458e:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004590:	9403      	str	r4, [sp, #12]
 8004592:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004594:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004598:	632b      	str	r3, [r5, #48]	@ 0x30
 800459a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800459c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045a0:	9303      	str	r3, [sp, #12]
 80045a2:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80045a4:	9404      	str	r4, [sp, #16]
 80045a6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80045a8:	f043 0301 	orr.w	r3, r3, #1
 80045ac:	632b      	str	r3, [r5, #48]	@ 0x30
 80045ae:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80045b0:	f003 0301 	and.w	r3, r3, #1
 80045b4:	9304      	str	r3, [sp, #16]
 80045b6:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80045b8:	9405      	str	r4, [sp, #20]
 80045ba:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80045bc:	f043 0302 	orr.w	r3, r3, #2
 80045c0:	632b      	str	r3, [r5, #48]	@ 0x30
 80045c2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80045c4:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 80045c8:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80045ca:	9305      	str	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 80045cc:	f244 11c0 	movw	r1, #16832	@ 0x41c0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80045d0:	2601      	movs	r6, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80045d2:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 80045d4:	f004 f824 	bl	8008620 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 80045d8:	f244 13c0 	movw	r3, #16832	@ 0x41c0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80045dc:	4883      	ldr	r0, [pc, #524]	@ (80047ec <main+0x28c>)
 80045de:	a914      	add	r1, sp, #80	@ 0x50
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80045e0:	e9cd 3614 	strd	r3, r6, [sp, #80]	@ 0x50
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045e4:	e9cd 4416 	strd	r4, r4, [sp, #88]	@ 0x58
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80045e8:	f003 ff0a 	bl	8008400 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80045ec:	9401      	str	r4, [sp, #4]
 80045ee:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80045f0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80045f4:	632b      	str	r3, [r5, #48]	@ 0x30
 80045f6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
  hadc1.Instance = ADC1;
 80045f8:	4d7d      	ldr	r5, [pc, #500]	@ (80047f0 <main+0x290>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 80045fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80045fe:	2720      	movs	r7, #32
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004600:	9301      	str	r3, [sp, #4]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8004602:	463a      	mov	r2, r7
 8004604:	4621      	mov	r1, r4
 8004606:	a814      	add	r0, sp, #80	@ 0x50
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004608:	9b01      	ldr	r3, [sp, #4]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800460a:	f006 fe23 	bl	800b254 <memset>
  hadc1.Instance = ADC1;
 800460e:	4b79      	ldr	r3, [pc, #484]	@ (80047f4 <main+0x294>)
 8004610:	602b      	str	r3, [r5, #0]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004612:	4b79      	ldr	r3, [pc, #484]	@ (80047f8 <main+0x298>)
 8004614:	62ab      	str	r3, [r5, #40]	@ 0x28
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004616:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800461a:	606b      	str	r3, [r5, #4]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800461c:	4628      	mov	r0, r5
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 800461e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  ADC_ChannelConfTypeDef sConfig = {0};
 8004622:	e9cd 440d 	strd	r4, r4, [sp, #52]	@ 0x34
 8004626:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800462a:	60ac      	str	r4, [r5, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800462c:	612e      	str	r6, [r5, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800462e:	762c      	strb	r4, [r5, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004630:	f885 4020 	strb.w	r4, [r5, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004634:	62ec      	str	r4, [r5, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8004636:	f885 4030 	strb.w	r4, [r5, #48]	@ 0x30
  hadc1.Init.NbrOfConversion = 1;
 800463a:	61ee      	str	r6, [r5, #28]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800463c:	616e      	str	r6, [r5, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 800463e:	60eb      	str	r3, [r5, #12]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004640:	f003 fb96 	bl	8007d70 <HAL_ADC_Init>
 8004644:	b108      	cbz	r0, 800464a <main+0xea>
 8004646:	b672      	cpsid	i
  while (1)
 8004648:	e7fe      	b.n	8004648 <main+0xe8>
  sConfigInjected.InjectedRank = 1;
 800464a:	e9cd 0614 	strd	r0, r6, [sp, #80]	@ 0x50
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 800464e:	901a      	str	r0, [sp, #104]	@ 0x68
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8004650:	f8ad 0064 	strh.w	r0, [sp, #100]	@ 0x64
  sConfigInjected.InjectedOffset = 0;
 8004654:	9017      	str	r0, [sp, #92]	@ 0x5c
  sConfigInjected.InjectedNbrOfConversion = 3;
 8004656:	2403      	movs	r4, #3
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_RISING;
 8004658:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800465c:	a914      	add	r1, sp, #80	@ 0x50
 800465e:	4628      	mov	r0, r5
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_15CYCLES;
 8004660:	9616      	str	r6, [sp, #88]	@ 0x58
  sConfigInjected.InjectedNbrOfConversion = 3;
 8004662:	9418      	str	r4, [sp, #96]	@ 0x60
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_RISING;
 8004664:	931b      	str	r3, [sp, #108]	@ 0x6c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8004666:	f003 fce5 	bl	8008034 <HAL_ADCEx_InjectedConfigChannel>
 800466a:	b108      	cbz	r0, 8004670 <main+0x110>
 800466c:	b672      	cpsid	i
  while (1)
 800466e:	e7fe      	b.n	800466e <main+0x10e>
  sConfigInjected.InjectedRank = 2;
 8004670:	230b      	movs	r3, #11
 8004672:	f04f 0802 	mov.w	r8, #2
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8004676:	a914      	add	r1, sp, #80	@ 0x50
 8004678:	4628      	mov	r0, r5
  sConfigInjected.InjectedRank = 2;
 800467a:	e9cd 3814 	strd	r3, r8, [sp, #80]	@ 0x50
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800467e:	f003 fcd9 	bl	8008034 <HAL_ADCEx_InjectedConfigChannel>
 8004682:	b108      	cbz	r0, 8004688 <main+0x128>
 8004684:	b672      	cpsid	i
  while (1)
 8004686:	e7fe      	b.n	8004686 <main+0x126>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_10;
 8004688:	230a      	movs	r3, #10
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800468a:	a914      	add	r1, sp, #80	@ 0x50
 800468c:	4628      	mov	r0, r5
  sConfigInjected.InjectedRank = 3;
 800468e:	9415      	str	r4, [sp, #84]	@ 0x54
  sConfigInjected.InjectedChannel = ADC_CHANNEL_10;
 8004690:	9314      	str	r3, [sp, #80]	@ 0x50
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8004692:	f003 fccf 	bl	8008034 <HAL_ADCEx_InjectedConfigChannel>
 8004696:	b108      	cbz	r0, 800469c <main+0x13c>
 8004698:	b672      	cpsid	i
  while (1)
 800469a:	e7fe      	b.n	800469a <main+0x13a>
  sConfig.Offset = 0;
 800469c:	e9cd 800f 	strd	r8, r0, [sp, #60]	@ 0x3c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80046a0:	a90d      	add	r1, sp, #52	@ 0x34
 80046a2:	4628      	mov	r0, r5
  sConfig.Rank = 1;
 80046a4:	e9cd 660d 	strd	r6, r6, [sp, #52]	@ 0x34
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80046a8:	f003 fc0e 	bl	8007ec8 <HAL_ADC_ConfigChannel>
 80046ac:	4604      	mov	r4, r0
 80046ae:	b108      	cbz	r0, 80046b4 <main+0x154>
 80046b0:	b672      	cpsid	i
  while (1)
 80046b2:	e7fe      	b.n	80046b2 <main+0x152>
  htim1.Instance = TIM1;
 80046b4:	4d51      	ldr	r5, [pc, #324]	@ (80047fc <main+0x29c>)
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80046b6:	9008      	str	r0, [sp, #32]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80046b8:	e9cd 000d 	strd	r0, r0, [sp, #52]	@ 0x34
 80046bc:	e9cd 000f 	strd	r0, r0, [sp, #60]	@ 0x3c
 80046c0:	e9cd 0011 	strd	r0, r0, [sp, #68]	@ 0x44
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80046c4:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 80046c8:	e9cd 000b 	strd	r0, r0, [sp, #44]	@ 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80046cc:	9006      	str	r0, [sp, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80046ce:	9013      	str	r0, [sp, #76]	@ 0x4c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80046d0:	9007      	str	r0, [sp, #28]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80046d2:	4601      	mov	r1, r0
 80046d4:	463a      	mov	r2, r7
 80046d6:	a814      	add	r0, sp, #80	@ 0x50
 80046d8:	f006 fdbc 	bl	800b254 <memset>
  htim1.Instance = TIM1;
 80046dc:	4b48      	ldr	r3, [pc, #288]	@ (8004800 <main+0x2a0>)
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 80046de:	606c      	str	r4, [r5, #4]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80046e0:	61ac      	str	r4, [r5, #24]
  htim1.Instance = TIM1;
 80046e2:	602b      	str	r3, [r5, #0]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80046e4:	f640 04ca 	movw	r4, #2250	@ 0x8ca
 80046e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80046ec:	4628      	mov	r0, r5
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80046ee:	e9c5 4303 	strd	r4, r3, [r5, #12]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80046f2:	60af      	str	r7, [r5, #8]
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 80046f4:	616e      	str	r6, [r5, #20]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80046f6:	f004 faf1 	bl	8008cdc <HAL_TIM_Base_Init>
 80046fa:	b108      	cbz	r0, 8004700 <main+0x1a0>
 80046fc:	b672      	cpsid	i
  while (1)
 80046fe:	e7fe      	b.n	80046fe <main+0x19e>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004700:	4628      	mov	r0, r5
 8004702:	f004 fb85 	bl	8008e10 <HAL_TIM_PWM_Init>
 8004706:	b108      	cbz	r0, 800470c <main+0x1ac>
 8004708:	b672      	cpsid	i
  while (1)
 800470a:	e7fe      	b.n	800470a <main+0x1aa>
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 800470c:	2206      	movs	r2, #6
 800470e:	2310      	movs	r3, #16
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8004710:	a908      	add	r1, sp, #32
 8004712:	4628      	mov	r0, r5
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8004714:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8004718:	f004 fd16 	bl	8009148 <HAL_TIM_SlaveConfigSynchro>
 800471c:	b108      	cbz	r0, 8004722 <main+0x1c2>
 800471e:	b672      	cpsid	i
  while (1)
 8004720:	e7fe      	b.n	8004720 <main+0x1c0>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004722:	e9cd 0006 	strd	r0, r0, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004726:	a906      	add	r1, sp, #24
 8004728:	4628      	mov	r0, r5
 800472a:	f004 fd99 	bl	8009260 <HAL_TIMEx_MasterConfigSynchronization>
 800472e:	4602      	mov	r2, r0
 8004730:	b108      	cbz	r0, 8004736 <main+0x1d6>
 8004732:	b672      	cpsid	i
  while (1)
 8004734:	e7fe      	b.n	8004734 <main+0x1d4>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004736:	2360      	movs	r3, #96	@ 0x60
 8004738:	930d      	str	r3, [sp, #52]	@ 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800473a:	4628      	mov	r0, r5
  sConfigOC.Pulse = ((PWM_PERIOD_CYCLES) / 4);
 800473c:	f240 4365 	movw	r3, #1125	@ 0x465
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004740:	a90d      	add	r1, sp, #52	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004742:	e9cd 320e 	strd	r3, r2, [sp, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004746:	e9cd 2210 	strd	r2, r2, [sp, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800474a:	e9cd 2212 	strd	r2, r2, [sp, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800474e:	f004 fbf7 	bl	8008f40 <HAL_TIM_PWM_ConfigChannel>
 8004752:	b108      	cbz	r0, 8004758 <main+0x1f8>
 8004754:	b672      	cpsid	i
  while (1)
 8004756:	e7fe      	b.n	8004756 <main+0x1f6>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004758:	4828      	ldr	r0, [pc, #160]	@ (80047fc <main+0x29c>)
 800475a:	2204      	movs	r2, #4
 800475c:	a90d      	add	r1, sp, #52	@ 0x34
 800475e:	f004 fbef 	bl	8008f40 <HAL_TIM_PWM_ConfigChannel>
 8004762:	b108      	cbz	r0, 8004768 <main+0x208>
 8004764:	b672      	cpsid	i
  while (1)
 8004766:	e7fe      	b.n	8004766 <main+0x206>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004768:	4824      	ldr	r0, [pc, #144]	@ (80047fc <main+0x29c>)
 800476a:	2208      	movs	r2, #8
 800476c:	a90d      	add	r1, sp, #52	@ 0x34
 800476e:	f004 fbe7 	bl	8008f40 <HAL_TIM_PWM_ConfigChannel>
 8004772:	b108      	cbz	r0, 8004778 <main+0x218>
 8004774:	b672      	cpsid	i
  while (1)
 8004776:	e7fe      	b.n	8004776 <main+0x216>
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 8004778:	f640 03c9 	movw	r3, #2249	@ 0x8c9
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800477c:	2270      	movs	r2, #112	@ 0x70
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 800477e:	e9cd 230d 	strd	r2, r3, [sp, #52]	@ 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004782:	481e      	ldr	r0, [pc, #120]	@ (80047fc <main+0x29c>)
 8004784:	a90d      	add	r1, sp, #52	@ 0x34
 8004786:	220c      	movs	r2, #12
 8004788:	f004 fbda 	bl	8008f40 <HAL_TIM_PWM_ConfigChannel>
 800478c:	4603      	mov	r3, r0
 800478e:	b108      	cbz	r0, 8004794 <main+0x234>
 8004790:	b672      	cpsid	i
  while (1)
 8004792:	e7fe      	b.n	8004792 <main+0x232>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8004794:	f44f 6400 	mov.w	r4, #2048	@ 0x800
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8004798:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800479c:	e9cd 4214 	strd	r4, r2, [sp, #80]	@ 0x50
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80047a0:	4816      	ldr	r0, [pc, #88]	@ (80047fc <main+0x29c>)
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80047a2:	931b      	str	r3, [sp, #108]	@ 0x6c
  sBreakDeadTimeConfig.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 80047a4:	224c      	movs	r2, #76	@ 0x4c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80047a6:	a914      	add	r1, sp, #80	@ 0x50
  sBreakDeadTimeConfig.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 80047a8:	e9cd 3216 	strd	r3, r2, [sp, #88]	@ 0x58
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW;
 80047ac:	e9cd 3318 	strd	r3, r3, [sp, #96]	@ 0x60
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80047b0:	f004 fd96 	bl	80092e0 <HAL_TIMEx_ConfigBreakDeadTime>
 80047b4:	4604      	mov	r4, r0
 80047b6:	b108      	cbz	r0, 80047bc <main+0x25c>
 80047b8:	b672      	cpsid	i
  while (1)
 80047ba:	e7fe      	b.n	80047ba <main+0x25a>
  HAL_TIM_MspPostInit(&htim1);
 80047bc:	480f      	ldr	r0, [pc, #60]	@ (80047fc <main+0x29c>)
 80047be:	f003 f80f 	bl	80077e0 <HAL_TIM_MspPostInit>
  huart2.Instance = USART2;
 80047c2:	4810      	ldr	r0, [pc, #64]	@ (8004804 <main+0x2a4>)
 80047c4:	4910      	ldr	r1, [pc, #64]	@ (8004808 <main+0x2a8>)
  huart2.Init.BaudRate = 921600;
 80047c6:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
  huart2.Init.Mode = UART_MODE_TX_RX;
 80047ca:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 80047cc:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80047d0:	e9c0 4304 	strd	r4, r3, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80047d4:	e9c0 4406 	strd	r4, r4, [r0, #24]
  huart2.Init.BaudRate = 921600;
 80047d8:	e9c0 1200 	strd	r1, r2, [r0]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80047dc:	f004 fdaa 	bl	8009334 <HAL_UART_Init>
 80047e0:	4604      	mov	r4, r0
 80047e2:	b198      	cbz	r0, 800480c <main+0x2ac>
 80047e4:	b672      	cpsid	i
  while (1)
 80047e6:	e7fe      	b.n	80047e6 <main+0x286>
 80047e8:	40023800 	.word	0x40023800
 80047ec:	40020800 	.word	0x40020800
 80047f0:	20000ce8 	.word	0x20000ce8
 80047f4:	40012000 	.word	0x40012000
 80047f8:	0f000001 	.word	0x0f000001
 80047fc:	20000ca0 	.word	0x20000ca0
 8004800:	40010000 	.word	0x40010000
 8004804:	20000c58 	.word	0x20000c58
 8004808:	40004400 	.word	0x40004400
  MX_MotorControl_Init();
 800480c:	f001 f940 	bl	8005a90 <MX_MotorControl_Init>
  HAL_NVIC_SetPriority(USART2_IRQn, 3, 1);
 8004810:	2103      	movs	r1, #3
 8004812:	2201      	movs	r2, #1
 8004814:	2026      	movs	r0, #38	@ 0x26
 8004816:	f003 fcf3 	bl	8008200 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 800481a:	2026      	movs	r0, #38	@ 0x26
 800481c:	f003 fd2c 	bl	8008278 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 3, 0);
 8004820:	4622      	mov	r2, r4
 8004822:	2103      	movs	r1, #3
 8004824:	2010      	movs	r0, #16
 8004826:	f003 fceb 	bl	8008200 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800482a:	2010      	movs	r0, #16
 800482c:	f003 fd24 	bl	8008278 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(ADC_IRQn, 2, 0);
 8004830:	4622      	mov	r2, r4
 8004832:	2102      	movs	r1, #2
 8004834:	2012      	movs	r0, #18
 8004836:	f003 fce3 	bl	8008200 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 800483a:	2012      	movs	r0, #18
 800483c:	f003 fd1c 	bl	8008278 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8004840:	4622      	mov	r2, r4
 8004842:	4621      	mov	r1, r4
 8004844:	2019      	movs	r0, #25
 8004846:	f003 fcdb 	bl	8008200 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800484a:	2019      	movs	r0, #25
 800484c:	f003 fd14 	bl	8008278 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 4, 1);
 8004850:	2104      	movs	r1, #4
 8004852:	2201      	movs	r2, #1
 8004854:	2018      	movs	r0, #24
 8004856:	f003 fcd3 	bl	8008200 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800485a:	2018      	movs	r0, #24
 800485c:	f003 fd0c 	bl	8008278 <HAL_NVIC_EnableIRQ>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);   //B
 8004860:	480b      	ldr	r0, [pc, #44]	@ (8004890 <main+0x330>)
 8004862:	4622      	mov	r2, r4
 8004864:	2140      	movs	r1, #64	@ 0x40
 8004866:	f003 fedb 	bl	8008620 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET); //G
 800486a:	4809      	ldr	r0, [pc, #36]	@ (8004890 <main+0x330>)
 800486c:	2180      	movs	r1, #128	@ 0x80
 800486e:	2201      	movs	r2, #1
 8004870:	f003 fed6 	bl	8008620 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);   //R
 8004874:	4806      	ldr	r0, [pc, #24]	@ (8004890 <main+0x330>)
 8004876:	4622      	mov	r2, r4
 8004878:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800487c:	f003 fed0 	bl	8008620 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);   // DRV Enable
 8004880:	4803      	ldr	r0, [pc, #12]	@ (8004890 <main+0x330>)
 8004882:	2201      	movs	r2, #1
 8004884:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004888:	f003 feca 	bl	8008620 <HAL_GPIO_WritePin>
  while (1)
 800488c:	e7fe      	b.n	800488c <main+0x32c>
 800488e:	bf00      	nop
 8004890:	40020800 	.word	0x40020800

08004894 <Error_Handler>:
 8004894:	b672      	cpsid	i
  while (1)
 8004896:	e7fe      	b.n	8004896 <Error_Handler+0x2>

08004898 <MC_StartMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StartMotor1(void)
{
  return (MCI_StartMotor(pMCI[M1]));
 8004898:	4b01      	ldr	r3, [pc, #4]	@ (80048a0 <MC_StartMotor1+0x8>)
 800489a:	6818      	ldr	r0, [r3, #0]
 800489c:	f000 b8b8 	b.w	8004a10 <MCI_StartMotor>
 80048a0:	20001f30 	.word	0x20001f30

080048a4 <MC_StopMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StopMotor1(void)
{
  return (MCI_StopMotor(pMCI[M1]));
 80048a4:	4b01      	ldr	r3, [pc, #4]	@ (80048ac <MC_StopMotor1+0x8>)
 80048a6:	6818      	ldr	r0, [r3, #0]
 80048a8:	f000 b8e2 	b.w	8004a70 <MCI_StopMotor>
 80048ac:	20001f30 	.word	0x20001f30

080048b0 <MC_ProgramSpeedRampMotor1>:
  * @param  hDurationms Duration of the ramp expressed in milliseconds. It
  *         is possible to set 0 to perform an instantaneous change in the speed
  *         value.
  */
__weak void MC_ProgramSpeedRampMotor1(int16_t hFinalSpeed, uint16_t hDurationms)
{
 80048b0:	b410      	push	{r4}
  MCI_ExecSpeedRamp(pMCI[M1], hFinalSpeed, hDurationms);
 80048b2:	4c04      	ldr	r4, [pc, #16]	@ (80048c4 <MC_ProgramSpeedRampMotor1+0x14>)
{
 80048b4:	4603      	mov	r3, r0
 80048b6:	460a      	mov	r2, r1
  MCI_ExecSpeedRamp(pMCI[M1], hFinalSpeed, hDurationms);
 80048b8:	6820      	ldr	r0, [r4, #0]
}
 80048ba:	f85d 4b04 	ldr.w	r4, [sp], #4
  MCI_ExecSpeedRamp(pMCI[M1], hFinalSpeed, hDurationms);
 80048be:	4619      	mov	r1, r3
 80048c0:	f000 b83a 	b.w	8004938 <MCI_ExecSpeedRamp>
 80048c4:	20001f30 	.word	0x20001f30

080048c8 <MC_HasRampCompletedMotor1>:
/**
 * @brief Returns true if the last ramp submited for Motor 1 has completed, false otherwise
 */
__weak bool MC_HasRampCompletedMotor1(void)
{
  return (MCI_RampCompleted(pMCI[M1]));
 80048c8:	4b01      	ldr	r3, [pc, #4]	@ (80048d0 <MC_HasRampCompletedMotor1+0x8>)
 80048ca:	6818      	ldr	r0, [r3, #0]
 80048cc:	f000 b934 	b.w	8004b38 <MCI_RampCompleted>
 80048d0:	20001f30 	.word	0x20001f30

080048d4 <MC_GetMecSpeedReferenceMotor1>:
/**
 *  @brief Returns the current mechanical rotor speed reference set for Motor 1, expressed in the unit defined by #SPEED_UNIT
 */
__weak int16_t MC_GetMecSpeedReferenceMotor1(void)
{
  return (MCI_GetMecSpeedRefUnit(pMCI[M1]));
 80048d4:	4b01      	ldr	r3, [pc, #4]	@ (80048dc <MC_GetMecSpeedReferenceMotor1+0x8>)
 80048d6:	6818      	ldr	r0, [r3, #0]
 80048d8:	f000 b948 	b.w	8004b6c <MCI_GetMecSpeedRefUnit>
 80048dc:	20001f30 	.word	0x20001f30

080048e0 <MC_AcknowledgeFaultMotor1>:
 * the function is called, nothing is done and false is returned. Otherwise, true is
 * returned.
 */
__weak bool MC_AcknowledgeFaultMotor1(void)
{
  return (MCI_FaultAcknowledged(pMCI[M1]));
 80048e0:	4b01      	ldr	r3, [pc, #4]	@ (80048e8 <MC_AcknowledgeFaultMotor1+0x8>)
 80048e2:	6818      	ldr	r0, [r3, #0]
 80048e4:	f000 b8e0 	b.w	8004aa8 <MCI_FaultAcknowledged>
 80048e8:	20001f30 	.word	0x20001f30

080048ec <MC_ProfilerCommand>:
 * - txLength : Amount of space actually used for the answer - Set in the command itself
 * - txBuffer : Pointer to the buffer containing the answer
 * @retval returns MCP_CMD_OK or MCP_CMD_NOK if profiler is started correctly or not.
 *  */
__weak uint8_t MC_ProfilerCommand(uint16_t rxLength, uint8_t *rxBuffer, int16_t txSyncFreeSpace, uint16_t *txLength, uint8_t *txBuffer)
{
 80048ec:	b500      	push	{lr}
 80048ee:	b083      	sub	sp, #12
 80048f0:	4684      	mov	ip, r0
 80048f2:	9804      	ldr	r0, [sp, #16]
  return (SCC_CMD(&SCC, rxLength, rxBuffer, txSyncFreeSpace, txLength, txBuffer));
 80048f4:	9001      	str	r0, [sp, #4]
 80048f6:	9300      	str	r3, [sp, #0]
 80048f8:	4804      	ldr	r0, [pc, #16]	@ (800490c <MC_ProfilerCommand+0x20>)
 80048fa:	4613      	mov	r3, r2
 80048fc:	460a      	mov	r2, r1
 80048fe:	4661      	mov	r1, ip
 8004900:	f7fc f9dc 	bl	8000cbc <SCC_CMD>
}
 8004904:	b003      	add	sp, #12
 8004906:	f85d fb04 	ldr.w	pc, [sp], #4
 800490a:	bf00      	nop
 800490c:	200000cc 	.word	0x200000cc

08004910 <MC_APP_BootHook>:
   */

/* USER CODE BEGIN BootHook */

/* USER CODE END BootHook */
}
 8004910:	4770      	bx	lr
 8004912:	bf00      	nop

08004914 <MC_APP_PostMediumFrequencyHook_M1>:
 * @brief Hook function called right after the Medium Frequency Task for Motor 1.
 *
 *
 *
 */
__weak void MC_APP_PostMediumFrequencyHook_M1(void)
 8004914:	4770      	bx	lr
 8004916:	bf00      	nop

08004918 <MCI_Init>:
  *         (only present if position control is enabled)
  * @param  pPWMHandle pointer to the PWM & current feedback component to be used by the MCI.
  */
__weak void MCI_Init(MCI_Handle_t *pHandle, SpeednTorqCtrl_Handle_t *pSTC, pFOCVars_t pFOCVars,
                     PWMC_Handle_t *pPWMHandle )
{
 8004918:	b410      	push	{r4}
    pHandle->pSTC = pSTC;
    pHandle->pFOCVars = pFOCVars;
    pHandle->pPWM = pPWMHandle;

    /* Buffer related initialization */
    pHandle->lastCommand = MCI_NOCOMMANDSYET;
 800491a:	2400      	movs	r4, #0
    pHandle->hFinalTorque = 0;
    pHandle->hDurationms = 0;
    pHandle->CommandState = MCI_BUFFER_EMPTY;
    pHandle->DirectCommand = MCI_NO_COMMAND;
    pHandle->State = IDLE;
    pHandle->CurrentFaults = MC_NO_FAULTS;
 800491c:	e9c0 4407 	strd	r4, r4, [r0, #28]
    pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8004920:	7304      	strb	r4, [r0, #12]
    pHandle->hFinalSpeed = 0;
 8004922:	f8c0 400e 	str.w	r4, [r0, #14]
    pHandle->CommandState = MCI_BUFFER_EMPTY;
 8004926:	f880 4024 	strb.w	r4, [r0, #36]	@ 0x24
    pHandle->pFOCVars = pFOCVars;
 800492a:	e9c0 1200 	strd	r1, r2, [r0]
    pHandle->PastFaults = MC_NO_FAULTS;
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 800492e:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->pPWM = pPWMHandle;
 8004932:	6083      	str	r3, [r0, #8]
}
 8004934:	4770      	bx	lr
 8004936:	bf00      	nop

08004938 <MCI_ExecSpeedRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
 8004938:	f04f 0c01 	mov.w	ip, #1
    pHandle->hFinalSpeed = hFinalSpeed;
    pHandle->hDurationms = hDurationms;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800493c:	f240 3301 	movw	r3, #769	@ 0x301
    pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
 8004940:	f880 c00c 	strb.w	ip, [r0, #12]
    pHandle->hFinalSpeed = hFinalSpeed;
 8004944:	81c1      	strh	r1, [r0, #14]
    pHandle->hDurationms = hDurationms;
 8004946:	8382      	strh	r2, [r0, #28]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8004948:	8483      	strh	r3, [r0, #36]	@ 0x24
    pHandle->LastModalitySetByUser = MCM_SPEED_MODE;

#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 800494a:	4770      	bx	lr

0800494c <MCI_ExecTorqueRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->lastCommand = MCI_CMD_EXECTORQUERAMP;
 800494c:	f04f 0c02 	mov.w	ip, #2
    pHandle->hFinalTorque = hFinalTorque;
    pHandle->hDurationms = hDurationms;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8004950:	f240 4301 	movw	r3, #1025	@ 0x401
    pHandle->lastCommand = MCI_CMD_EXECTORQUERAMP;
 8004954:	f880 c00c 	strb.w	ip, [r0, #12]
    pHandle->hFinalTorque = hFinalTorque;
 8004958:	8201      	strh	r1, [r0, #16]
    pHandle->hDurationms = hDurationms;
 800495a:	8382      	strh	r2, [r0, #28]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800495c:	8483      	strh	r3, [r0, #36]	@ 0x24
    pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 800495e:	4770      	bx	lr

08004960 <MCI_SetCurrentReferences>:
  * function.

  @sa MCI_SetCurrentReferences_F
  */
__weak void MCI_SetCurrentReferences(MCI_Handle_t *pHandle, qd_t Iqdref)
{
 8004960:	b082      	sub	sp, #8
  }
  else
  {
#endif

    pHandle->lastCommand = MCI_CMD_SETCURRENTREFERENCES;
 8004962:	2203      	movs	r2, #3
    pHandle->Iqdref.q = Iqdref.q;
    pHandle->Iqdref.d = Iqdref.d;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8004964:	f240 4301 	movw	r3, #1025	@ 0x401
    pHandle->lastCommand = MCI_CMD_SETCURRENTREFERENCES;
 8004968:	7302      	strb	r2, [r0, #12]
    pHandle->Iqdref.q = Iqdref.q;
 800496a:	f8c0 1012 	str.w	r1, [r0, #18]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800496e:	8483      	strh	r3, [r0, #36]	@ 0x24
    pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8004970:	b002      	add	sp, #8
 8004972:	4770      	bx	lr

08004974 <MCI_FaultProcessing>:
  }
  else
  {
#endif
    /* Set current errors */
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 8004974:	8c03      	ldrh	r3, [r0, #32]
    pHandle->PastFaults |= hSetErrors;
 8004976:	f8b0 c022 	ldrh.w	ip, [r0, #34]	@ 0x22
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 800497a:	430b      	orrs	r3, r1
 800497c:	ea23 0302 	bic.w	r3, r3, r2
    pHandle->PastFaults |= hSetErrors;
 8004980:	ea41 010c 	orr.w	r1, r1, ip
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 8004984:	8403      	strh	r3, [r0, #32]
    pHandle->PastFaults |= hSetErrors;
 8004986:	8441      	strh	r1, [r0, #34]	@ 0x22
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8004988:	4770      	bx	lr
 800498a:	bf00      	nop

0800498c <MCI_ExecBufferedCommands>:
    /* Nothing to do */
  }
  else
  {
#endif
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 800498c:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8004990:	2b01      	cmp	r3, #1
 8004992:	d000      	beq.n	8004996 <MCI_ExecBufferedCommands+0xa>
 8004994:	4770      	bx	lr
{
 8004996:	b510      	push	{r4, lr}
    {
      bool commandHasBeenExecuted = false;
      switch (pHandle->lastCommand)
 8004998:	7b02      	ldrb	r2, [r0, #12]
 800499a:	2a02      	cmp	r2, #2
 800499c:	4604      	mov	r4, r0
 800499e:	d007      	beq.n	80049b0 <MCI_ExecBufferedCommands+0x24>
 80049a0:	2a03      	cmp	r2, #3
 80049a2:	d028      	beq.n	80049f6 <MCI_ExecBufferedCommands+0x6a>
 80049a4:	2a01      	cmp	r2, #1
 80049a6:	d017      	beq.n	80049d8 <MCI_ExecBufferedCommands+0x4c>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESSFULLY;
      }
      else
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESSFULLY;
 80049a8:	2303      	movs	r3, #3
 80049aa:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
      }
    }
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 80049ae:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 80049b0:	6843      	ldr	r3, [r0, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 80049b8:	6800      	ldr	r0, [r0, #0]
 80049ba:	2104      	movs	r1, #4
 80049bc:	f005 ffa8 	bl	800a910 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms);
 80049c0:	8ba2      	ldrh	r2, [r4, #28]
 80049c2:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 80049c6:	6820      	ldr	r0, [r4, #0]
 80049c8:	f005 ffa6 	bl	800a918 <STC_ExecRamp>
      if (commandHasBeenExecuted)
 80049cc:	2800      	cmp	r0, #0
 80049ce:	d0eb      	beq.n	80049a8 <MCI_ExecBufferedCommands+0x1c>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESSFULLY;
 80049d0:	2302      	movs	r3, #2
 80049d2:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
}
 80049d6:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 80049d8:	6843      	ldr	r3, [r0, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          STC_SetControlMode(pHandle->pSTC, MCM_SPEED_MODE);
 80049e0:	6800      	ldr	r0, [r0, #0]
 80049e2:	2103      	movs	r1, #3
 80049e4:	f005 ff94 	bl	800a910 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms);
 80049e8:	8ba2      	ldrh	r2, [r4, #28]
 80049ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049ee:	6820      	ldr	r0, [r4, #0]
 80049f0:	f005 ff92 	bl	800a918 <STC_ExecRamp>
          break;
 80049f4:	e7ea      	b.n	80049cc <MCI_ExecBufferedCommands+0x40>
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 80049f6:	6842      	ldr	r2, [r0, #4]
 80049f8:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 80049fc:	f8d0 3012 	ldr.w	r3, [r0, #18]
 8004a00:	6113      	str	r3, [r2, #16]
      if (commandHasBeenExecuted)
 8004a02:	e7e5      	b.n	80049d0 <MCI_ExecBufferedCommands+0x44>

08004a04 <MCI_GetSTMState>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? FAULT_NOW : pHandle->State);
#else
  return (pHandle->State);
#endif
}
 8004a04:	7fc0      	ldrb	r0, [r0, #31]
 8004a06:	4770      	bx	lr

08004a08 <MCI_GetOccurredFaults>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MC_SW_ERROR : (uint16_t)pHandle->PastFaults);
#else
  return ((uint16_t)pHandle->PastFaults);
#endif
}
 8004a08:	8c40      	ldrh	r0, [r0, #34]	@ 0x22
 8004a0a:	4770      	bx	lr

08004a0c <MCI_GetCurrentFaults>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MC_SW_ERROR : (uint16_t)pHandle->CurrentFaults);
#else
  return ((uint16_t)pHandle->CurrentFaults);
#endif
}
 8004a0c:	8c00      	ldrh	r0, [r0, #32]
 8004a0e:	4770      	bx	lr

08004a10 <MCI_StartMotor>:
{
 8004a10:	b510      	push	{r4, lr}
 8004a12:	4604      	mov	r4, r0
    if ((IDLE == MCI_GetSTMState(pHandle)) &&
 8004a14:	f7ff fff6 	bl	8004a04 <MCI_GetSTMState>
 8004a18:	b108      	cbz	r0, 8004a1e <MCI_StartMotor+0xe>
  bool retVal = false;
 8004a1a:	2000      	movs	r0, #0
}
 8004a1c:	bd10      	pop	{r4, pc}
        (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8004a1e:	4620      	mov	r0, r4
 8004a20:	f7ff fff2 	bl	8004a08 <MCI_GetOccurredFaults>
    if ((IDLE == MCI_GetSTMState(pHandle)) &&
 8004a24:	2800      	cmp	r0, #0
 8004a26:	d1f8      	bne.n	8004a1a <MCI_StartMotor+0xa>
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8004a28:	4620      	mov	r0, r4
 8004a2a:	f7ff ffef 	bl	8004a0c <MCI_GetCurrentFaults>
        (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8004a2e:	2800      	cmp	r0, #0
 8004a30:	d1f3      	bne.n	8004a1a <MCI_StartMotor+0xa>
      pHandle->DirectCommand = MCI_START;
 8004a32:	2001      	movs	r0, #1
 8004a34:	77a0      	strb	r0, [r4, #30]
      pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8004a36:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
}
 8004a3a:	bd10      	pop	{r4, pc}

08004a3c <MCI_StartWithPolarizationMotor>:
{
 8004a3c:	b510      	push	{r4, lr}
 8004a3e:	4604      	mov	r4, r0
    if ((IDLE == MCI_GetSTMState(pHandle)) &&
 8004a40:	f7ff ffe0 	bl	8004a04 <MCI_GetSTMState>
 8004a44:	b108      	cbz	r0, 8004a4a <MCI_StartWithPolarizationMotor+0xe>
  bool retVal = true;
 8004a46:	2001      	movs	r0, #1
}
 8004a48:	bd10      	pop	{r4, pc}
        (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8004a4a:	4620      	mov	r0, r4
 8004a4c:	f7ff ffdc 	bl	8004a08 <MCI_GetOccurredFaults>
    if ((IDLE == MCI_GetSTMState(pHandle)) &&
 8004a50:	2800      	cmp	r0, #0
 8004a52:	d1f8      	bne.n	8004a46 <MCI_StartWithPolarizationMotor+0xa>
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8004a54:	4620      	mov	r0, r4
 8004a56:	f7ff ffd9 	bl	8004a0c <MCI_GetCurrentFaults>
        (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8004a5a:	2800      	cmp	r0, #0
 8004a5c:	d1f3      	bne.n	8004a46 <MCI_StartWithPolarizationMotor+0xa>
      pHandle->DirectCommand = MCI_START;
 8004a5e:	2201      	movs	r2, #1
      pHandle->pPWM->offsetCalibStatus = false;
 8004a60:	68a1      	ldr	r1, [r4, #8]
      pHandle->DirectCommand = MCI_START;
 8004a62:	77a2      	strb	r2, [r4, #30]
      pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8004a64:	f884 2024 	strb.w	r2, [r4, #36]	@ 0x24
      pHandle->pPWM->offsetCalibStatus = false;
 8004a68:	f881 0081 	strb.w	r0, [r1, #129]	@ 0x81
}
 8004a6c:	bd10      	pop	{r4, pc}
 8004a6e:	bf00      	nop

08004a70 <MCI_StopMotor>:
{
 8004a70:	b538      	push	{r3, r4, r5, lr}
 8004a72:	4605      	mov	r5, r0
    State = MCI_GetSTMState(pHandle);
 8004a74:	f7ff ffc6 	bl	8004a04 <MCI_GetSTMState>
    if ((IDLE == State) || (ICLWAIT == State))
 8004a78:	4604      	mov	r4, r0
 8004a7a:	b118      	cbz	r0, 8004a84 <MCI_StopMotor+0x14>
 8004a7c:	f1b0 040c 	subs.w	r4, r0, #12
 8004a80:	bf18      	it	ne
 8004a82:	2401      	movne	r4, #1
    if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8004a84:	4628      	mov	r0, r5
 8004a86:	f7ff ffbf 	bl	8004a08 <MCI_GetOccurredFaults>
 8004a8a:	b110      	cbz	r0, 8004a92 <MCI_StopMotor+0x22>
  bool retVal = false;
 8004a8c:	2400      	movs	r4, #0
}
 8004a8e:	4620      	mov	r0, r4
 8004a90:	bd38      	pop	{r3, r4, r5, pc}
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 8004a92:	4628      	mov	r0, r5
 8004a94:	f7ff ffba 	bl	8004a0c <MCI_GetCurrentFaults>
    if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8004a98:	2800      	cmp	r0, #0
 8004a9a:	d1f7      	bne.n	8004a8c <MCI_StopMotor+0x1c>
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 8004a9c:	2c00      	cmp	r4, #0
 8004a9e:	d0f5      	beq.n	8004a8c <MCI_StopMotor+0x1c>
      pHandle->DirectCommand = MCI_STOP;
 8004aa0:	2305      	movs	r3, #5
 8004aa2:	77ab      	strb	r3, [r5, #30]
      retVal = true;
 8004aa4:	e7f3      	b.n	8004a8e <MCI_StopMotor+0x1e>
 8004aa6:	bf00      	nop

08004aa8 <MCI_FaultAcknowledged>:
{
 8004aa8:	b510      	push	{r4, lr}
 8004aaa:	4604      	mov	r4, r0
    if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8004aac:	f7ff ffaa 	bl	8004a04 <MCI_GetSTMState>
 8004ab0:	280b      	cmp	r0, #11
 8004ab2:	d001      	beq.n	8004ab8 <MCI_FaultAcknowledged+0x10>
  bool reVal = false;
 8004ab4:	2000      	movs	r0, #0
}
 8004ab6:	bd10      	pop	{r4, pc}
    if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8004ab8:	4620      	mov	r0, r4
 8004aba:	f7ff ffa7 	bl	8004a0c <MCI_GetCurrentFaults>
 8004abe:	2800      	cmp	r0, #0
 8004ac0:	d1f8      	bne.n	8004ab4 <MCI_FaultAcknowledged+0xc>
      pHandle->DirectCommand = MCI_ACK_FAULTS;
 8004ac2:	2302      	movs	r3, #2
 8004ac4:	77a3      	strb	r3, [r4, #30]
      pHandle->PastFaults = MC_NO_FAULTS;
 8004ac6:	8460      	strh	r0, [r4, #34]	@ 0x22
      reVal = true;
 8004ac8:	2001      	movs	r0, #1
}
 8004aca:	bd10      	pop	{r4, pc}

08004acc <MCI_GetFaultState>:
    LocalFaultState = MC_SW_ERROR | (MC_SW_ERROR << 16);
  }
  else
  {
#endif
    LocalFaultState = (uint32_t)(pHandle->PastFaults);
 8004acc:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
    LocalFaultState |= (uint32_t)(pHandle->CurrentFaults) << 16;
 8004ace:	8c00      	ldrh	r0, [r0, #32]
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
  return (LocalFaultState);
}
 8004ad0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8004ad4:	4770      	bx	lr
 8004ad6:	bf00      	nop

08004ad8 <MCI_GetControlMode>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MCM_TORQUE_MODE : pHandle->LastModalitySetByUser);
#else
  return (pHandle->LastModalitySetByUser);
#endif
}
 8004ad8:	f890 0025 	ldrb.w	r0, [r0, #37]	@ 0x25
 8004adc:	4770      	bx	lr
 8004ade:	bf00      	nop

08004ae0 <MCI_GetImposedMotorDirection>:
    /* Nothing to do */
  }
  else
  {
#endif
    switch (pHandle->lastCommand)
 8004ae0:	7b03      	ldrb	r3, [r0, #12]
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d005      	beq.n	8004af2 <MCI_GetImposedMotorDirection+0x12>
 8004ae6:	2b03      	cmp	r3, #3
 8004ae8:	d013      	beq.n	8004b12 <MCI_GetImposedMotorDirection+0x32>
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d009      	beq.n	8004b02 <MCI_GetImposedMotorDirection+0x22>
  int16_t retVal = 1;
 8004aee:	2001      	movs	r0, #1
    }
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
  return (retVal);
}
 8004af0:	4770      	bx	lr
        if (pHandle->hFinalTorque < 0)
 8004af2:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
          retVal = -1;
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	bfac      	ite	ge
 8004afa:	2001      	movge	r0, #1
 8004afc:	f04f 30ff 	movlt.w	r0, #4294967295
 8004b00:	4770      	bx	lr
        if (pHandle->hFinalSpeed < 0)
 8004b02:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
          retVal = -1;
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	bfac      	ite	ge
 8004b0a:	2001      	movge	r0, #1
 8004b0c:	f04f 30ff 	movlt.w	r0, #4294967295
 8004b10:	4770      	bx	lr
        if (pHandle->Iqdref.q < 0)
 8004b12:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
          retVal = -1;
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	bfac      	ite	ge
 8004b1a:	2001      	movge	r0, #1
 8004b1c:	f04f 30ff 	movlt.w	r0, #4294967295
 8004b20:	4770      	bx	lr
 8004b22:	bf00      	nop

08004b24 <MCI_GetLastRampFinalSpeed>:
  }
  return (retVal);
#else
  return (pHandle->hFinalSpeed);
#endif
}
 8004b24:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
 8004b28:	4770      	bx	lr
 8004b2a:	bf00      	nop

08004b2c <MCI_GetLastRampFinalTorque>:
  }
  return (retVal);
#else
  return (pHandle->hFinalTorque);
#endif
}
 8004b2c:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 8004b30:	4770      	bx	lr
 8004b32:	bf00      	nop

08004b34 <MCI_GetLastRampFinalDuration>:
  }
  return (retVal);
#else
  return (pHandle->hDurationms);
#endif
}
 8004b34:	8b80      	ldrh	r0, [r0, #28]
 8004b36:	4770      	bx	lr

08004b38 <MCI_RampCompleted>:
  * @brief  Check if the settled speed or torque ramp has been completed.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the ramp is completed, false otherwise.
  */
__weak bool MCI_RampCompleted(MCI_Handle_t *pHandle)
{
 8004b38:	b510      	push	{r4, lr}
 8004b3a:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    if (RUN == MCI_GetSTMState(pHandle))
 8004b3c:	f7ff ff62 	bl	8004a04 <MCI_GetSTMState>
 8004b40:	2806      	cmp	r0, #6
 8004b42:	d001      	beq.n	8004b48 <MCI_RampCompleted+0x10>
    }
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
  return (retVal);
}
 8004b44:	2000      	movs	r0, #0
 8004b46:	bd10      	pop	{r4, pc}
      retVal = STC_RampCompleted(pHandle->pSTC);
 8004b48:	6820      	ldr	r0, [r4, #0]
}
 8004b4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      retVal = STC_RampCompleted(pHandle->pSTC);
 8004b4e:	f005 bf61 	b.w	800aa14 <STC_RampCompleted>
 8004b52:	bf00      	nop

08004b54 <MCI_StopRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    STC_StopRamp(pHandle->pSTC);
 8004b54:	6800      	ldr	r0, [r0, #0]
 8004b56:	f005 bf1f 	b.w	800a998 <STC_StopRamp>
 8004b5a:	bf00      	nop

08004b5c <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit(MCI_Handle_t *pHandle)
{
 8004b5c:	b508      	push	{r3, lr}
    temp_speed = 0;
  }
  else
  {
#endif
    SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor(pHandle->pSTC);
 8004b5e:	6800      	ldr	r0, [r0, #0]
 8004b60:	f005 fec4 	bl	800a8ec <STC_GetSpeedSensor>
    temp_speed = SPD_GetAvrgMecSpeedUnit(SpeedSensor);
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
  return (temp_speed);
}
 8004b64:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    temp_speed = SPD_GetAvrgMecSpeedUnit(SpeedSensor);
 8004b68:	f005 be5c 	b.w	800a824 <SPD_GetAvrgMecSpeedUnit>

08004b6c <MCI_GetMecSpeedRefUnit>:
__weak int16_t MCI_GetMecSpeedRefUnit(MCI_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? 0 : STC_GetMecSpeedRefUnit(pHandle->pSTC));
#else
  return (STC_GetMecSpeedRefUnit(pHandle->pSTC));
 8004b6c:	6800      	ldr	r0, [r0, #0]
 8004b6e:	f005 bec7 	b.w	800a900 <STC_GetMecSpeedRefUnit>
 8004b72:	bf00      	nop

08004b74 <MCI_GetIab>:
  {
    tempVal = pHandle->pFOCVars->Iab;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iab);
 8004b74:	6842      	ldr	r2, [r0, #4]
 8004b76:	6810      	ldr	r0, [r2, #0]
 8004b78:	2300      	movs	r3, #0
 8004b7a:	b282      	uxth	r2, r0
 8004b7c:	f362 030f 	bfi	r3, r2, #0, #16
 8004b80:	0c00      	lsrs	r0, r0, #16
 8004b82:	f360 431f 	bfi	r3, r0, #16, #16
{
 8004b86:	b082      	sub	sp, #8
#endif
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	b002      	add	sp, #8
 8004b8c:	4770      	bx	lr
 8004b8e:	bf00      	nop

08004b90 <MCI_GetIalphabeta>:
  {
    tempVal = pHandle->pFOCVars->Ialphabeta;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Ialphabeta);
 8004b90:	6842      	ldr	r2, [r0, #4]
 8004b92:	6850      	ldr	r0, [r2, #4]
 8004b94:	2300      	movs	r3, #0
 8004b96:	b282      	uxth	r2, r0
 8004b98:	f362 030f 	bfi	r3, r2, #0, #16
 8004b9c:	0c00      	lsrs	r0, r0, #16
 8004b9e:	f360 431f 	bfi	r3, r0, #16, #16
{
 8004ba2:	b082      	sub	sp, #8
#endif
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	b002      	add	sp, #8
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop

08004bac <MCI_GetIqd>:
  {
    tempVal = pHandle->pFOCVars->Iqd;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iqd);
 8004bac:	6842      	ldr	r2, [r0, #4]
 8004bae:	68d0      	ldr	r0, [r2, #12]
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	b282      	uxth	r2, r0
 8004bb4:	f362 030f 	bfi	r3, r2, #0, #16
 8004bb8:	0c00      	lsrs	r0, r0, #16
 8004bba:	f360 431f 	bfi	r3, r0, #16, #16
{
 8004bbe:	b082      	sub	sp, #8
#endif
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	b002      	add	sp, #8
 8004bc4:	4770      	bx	lr
 8004bc6:	bf00      	nop

08004bc8 <MCI_GetIqdref>:
  {
    tempVal = pHandle->pFOCVars->Iqdref;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iqdref);
 8004bc8:	6842      	ldr	r2, [r0, #4]
 8004bca:	6910      	ldr	r0, [r2, #16]
 8004bcc:	2300      	movs	r3, #0
 8004bce:	b282      	uxth	r2, r0
 8004bd0:	f362 030f 	bfi	r3, r2, #0, #16
 8004bd4:	0c00      	lsrs	r0, r0, #16
 8004bd6:	f360 431f 	bfi	r3, r0, #16, #16
{
 8004bda:	b082      	sub	sp, #8
#endif
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	b002      	add	sp, #8
 8004be0:	4770      	bx	lr
 8004be2:	bf00      	nop

08004be4 <MCI_GetVqd>:
  {
    tempVal = pHandle->pFOCVars->Vqd;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Vqd);
 8004be4:	6842      	ldr	r2, [r0, #4]
 8004be6:	f8d2 0016 	ldr.w	r0, [r2, #22]
 8004bea:	2300      	movs	r3, #0
 8004bec:	b282      	uxth	r2, r0
 8004bee:	f362 030f 	bfi	r3, r2, #0, #16
 8004bf2:	0c00      	lsrs	r0, r0, #16
 8004bf4:	f360 431f 	bfi	r3, r0, #16, #16
{
 8004bf8:	b082      	sub	sp, #8
#endif
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	b002      	add	sp, #8
 8004bfe:	4770      	bx	lr

08004c00 <MCI_GetValphabeta>:
  {
    tempVal = pHandle->pFOCVars->Valphabeta;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Valphabeta);
 8004c00:	6842      	ldr	r2, [r0, #4]
 8004c02:	f8d2 001a 	ldr.w	r0, [r2, #26]
 8004c06:	2300      	movs	r3, #0
 8004c08:	b282      	uxth	r2, r0
 8004c0a:	f362 030f 	bfi	r3, r2, #0, #16
 8004c0e:	0c00      	lsrs	r0, r0, #16
 8004c10:	f360 431f 	bfi	r3, r0, #16, #16
{
 8004c14:	b082      	sub	sp, #8
#endif
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	b002      	add	sp, #8
 8004c1a:	4770      	bx	lr

08004c1c <MCI_GetTeref>:
__weak int16_t MCI_GetTeref(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? 0 : pHandle->pFOCVars->hTeref);
#else
  return (pHandle->pFOCVars->hTeref);
 8004c1c:	6843      	ldr	r3, [r0, #4]
#endif
}
 8004c1e:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 8004c22:	4770      	bx	lr

08004c24 <MCI_Clear_Iqdref>:
/**
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_Clear_Iqdref(MCI_Handle_t *pHandle)
{
 8004c24:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref(pHandle->pSTC);
 8004c26:	e9d0 0400 	ldrd	r0, r4, [r0]
 8004c2a:	f005 fef9 	bl	800aa20 <STC_GetDefaultIqdref>
 8004c2e:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8004c32:	8220      	strh	r0, [r4, #16]
 8004c34:	8263      	strh	r3, [r4, #18]
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8004c36:	bd10      	pop	{r4, pc}

08004c38 <MCM_Clarke>:
  *                       beta = -(2*b+a)/sqrt(3)
  * @param  Input: stator values a and b in ab_t format.
  * @retval Stator values alpha and beta in alphabeta_t format.
  */
__weak alphabeta_t MCM_Clarke(ab_t Input)
{
 8004c38:	f3c0 430f 	ubfx	r3, r0, #16, #16
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.a);

  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 8004c3c:	f644 11e6 	movw	r1, #18918	@ 0x49e6
#ifndef FULL_MISRA_C_COMPLIANCY_MC_MATH
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 8004c40:	f24b 621a 	movw	r2, #46618	@ 0xb61a
  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 8004c44:	fb13 f301 	smulbb	r3, r3, r1
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 8004c48:	fb10 f202 	smulbb	r2, r0, r2
 8004c4c:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
#else
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) / 32768;
#endif

  /* Check saturation of Ibeta */
  if (wbeta_tmp > INT16_MAX)
 8004c50:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
{
 8004c54:	b084      	sub	sp, #16
 8004c56:	b203      	sxth	r3, r0
  if (wbeta_tmp > INT16_MAX)
 8004c58:	da05      	bge.n	8004c66 <MCM_Clarke+0x2e>
 8004c5a:	13d1      	asrs	r1, r2, #15
  {
    hbeta_tmp = INT16_MAX;
  }
  else if (wbeta_tmp < (-32768))
 8004c5c:	f511 4f00 	cmn.w	r1, #32768	@ 0x8000
 8004c60:	da0c      	bge.n	8004c7c <MCM_Clarke+0x44>
 8004c62:	4a09      	ldr	r2, [pc, #36]	@ (8004c88 <MCM_Clarke+0x50>)
 8004c64:	e001      	b.n	8004c6a <MCM_Clarke+0x32>
 8004c66:	f647 72ff 	movw	r2, #32767	@ 0x7fff
  else
  {
    /* Nothing to do */
  }

  return (Output);
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	2000      	movs	r0, #0
 8004c6e:	f363 000f 	bfi	r0, r3, #0, #16
 8004c72:	b293      	uxth	r3, r2
 8004c74:	f363 401f 	bfi	r0, r3, #16, #16
}
 8004c78:	b004      	add	sp, #16
 8004c7a:	4770      	bx	lr
    hbeta_tmp = ((int16_t)wbeta_tmp);
 8004c7c:	4802      	ldr	r0, [pc, #8]	@ (8004c88 <MCM_Clarke+0x50>)
 8004c7e:	b20a      	sxth	r2, r1
 8004c80:	4282      	cmp	r2, r0
 8004c82:	bfb8      	it	lt
 8004c84:	4602      	movlt	r2, r0
 8004c86:	e7f0      	b.n	8004c6a <MCM_Clarke+0x32>
 8004c88:	ffff8001 	.word	0xffff8001

08004c8c <MCM_Trig_Functions>:
  uint16_t uhindex;

  Trig_Components Local_Components;

  /* 10 bit index computation  */
  shindex = (((int32_t)32768) + ((int32_t)hAngle));
 8004c8c:	f500 4000 	add.w	r0, r0, #32768	@ 0x8000
  uhindex = (uint16_t)shindex;
  uhindex /= ((uint16_t)64);
 8004c90:	f3c0 1089 	ubfx	r0, r0, #6, #10

  switch (((uint16_t)uhindex) & SIN_MASK)
 8004c94:	f400 7140 	and.w	r1, r0, #768	@ 0x300
 8004c98:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
{
 8004c9c:	b082      	sub	sp, #8
  switch (((uint16_t)uhindex) & SIN_MASK)
 8004c9e:	d028      	beq.n	8004cf2 <MCM_Trig_Functions+0x66>
 8004ca0:	f04f 0300 	mov.w	r3, #0
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	d816      	bhi.n	8004cd6 <MCM_Trig_Functions+0x4a>
 8004ca8:	b361      	cbz	r1, 8004d04 <MCM_Trig_Functions+0x78>
 8004caa:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8004cae:	d109      	bne.n	8004cc4 <MCM_Trig_Functions+0x38>
      break;
    }

    case U270_360:
    {
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8004cb0:	b2c0      	uxtb	r0, r0
 8004cb2:	43c2      	mvns	r2, r0
 8004cb4:	491a      	ldr	r1, [pc, #104]	@ (8004d20 <MCM_Trig_Functions+0x94>)
 8004cb6:	b2d2      	uxtb	r2, r2
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
 8004cb8:	f931 3010 	ldrsh.w	r3, [r1, r0, lsl #1]
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8004cbc:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8004cc0:	4252      	negs	r2, r2
 8004cc2:	b212      	sxth	r2, r2
    }

    default:
      break;
  }
  return (Local_Components);
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	2000      	movs	r0, #0
 8004cc8:	f363 000f 	bfi	r0, r3, #0, #16
 8004ccc:	b292      	uxth	r2, r2
 8004cce:	f362 401f 	bfi	r0, r2, #16, #16
}
 8004cd2:	b002      	add	sp, #8
 8004cd4:	4770      	bx	lr
  switch (((uint16_t)uhindex) & SIN_MASK)
 8004cd6:	f5b1 7f40 	cmp.w	r1, #768	@ 0x300
 8004cda:	d1f3      	bne.n	8004cc4 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8004cdc:	4910      	ldr	r1, [pc, #64]	@ (8004d20 <MCM_Trig_Functions+0x94>)
 8004cde:	b2c0      	uxtb	r0, r0
 8004ce0:	43c2      	mvns	r2, r0
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8004ce2:	f831 3010 	ldrh.w	r3, [r1, r0, lsl #1]
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8004ce6:	b2d2      	uxtb	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8004ce8:	425b      	negs	r3, r3
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8004cea:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8004cee:	b21b      	sxth	r3, r3
      break;
 8004cf0:	e7e8      	b.n	8004cc4 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8004cf2:	b2c0      	uxtb	r0, r0
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8004cf4:	43c3      	mvns	r3, r0
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8004cf6:	490a      	ldr	r1, [pc, #40]	@ (8004d20 <MCM_Trig_Functions+0x94>)
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8004cf8:	b2db      	uxtb	r3, r3
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8004cfa:	f931 2010 	ldrsh.w	r2, [r1, r0, lsl #1]
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8004cfe:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
      break;
 8004d02:	e7df      	b.n	8004cc4 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8004d04:	b2c0      	uxtb	r0, r0
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8004d06:	43c3      	mvns	r3, r0
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8004d08:	4905      	ldr	r1, [pc, #20]	@ (8004d20 <MCM_Trig_Functions+0x94>)
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8004d0a:	b2db      	uxtb	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8004d0c:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8004d10:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8004d14:	4252      	negs	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8004d16:	425b      	negs	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8004d18:	b212      	sxth	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8004d1a:	b21b      	sxth	r3, r3
      break;
 8004d1c:	e7d2      	b.n	8004cc4 <MCM_Trig_Functions+0x38>
 8004d1e:	bf00      	nop
 8004d20:	0800b500 	.word	0x0800b500

08004d24 <MCM_Park>:
{
 8004d24:	b530      	push	{r4, r5, lr}
 8004d26:	4605      	mov	r5, r0
 8004d28:	4604      	mov	r4, r0
 8004d2a:	b085      	sub	sp, #20
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 8004d2c:	4608      	mov	r0, r1
 8004d2e:	f7ff ffad 	bl	8004c8c <MCM_Trig_Functions>
 8004d32:	b22d      	sxth	r5, r5
 8004d34:	b201      	sxth	r1, r0
 8004d36:	1424      	asrs	r4, r4, #16
 8004d38:	1400      	asrs	r0, r0, #16
  q_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hCos);
 8004d3a:	fb05 f301 	mul.w	r3, r5, r1
  wqd_tmp = (q_tmp_1 - q_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8004d3e:	fb04 3310 	mls	r3, r4, r0, r3
  if (wqd_tmp > INT16_MAX)
 8004d42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d46:	da05      	bge.n	8004d54 <MCM_Park+0x30>
 8004d48:	13da      	asrs	r2, r3, #15
  else if (wqd_tmp < (-32768))
 8004d4a:	f512 4f00 	cmn.w	r2, #32768	@ 0x8000
 8004d4e:	da22      	bge.n	8004d96 <MCM_Park+0x72>
 8004d50:	4a14      	ldr	r2, [pc, #80]	@ (8004da4 <MCM_Park+0x80>)
 8004d52:	e001      	b.n	8004d58 <MCM_Park+0x34>
 8004d54:	f647 72ff 	movw	r2, #32767	@ 0x7fff
  d_tmp_2 = Input.beta * ((int32_t )Local_Vector_Components.hCos);
 8004d58:	fb01 f404 	mul.w	r4, r1, r4
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8004d5c:	fb05 4400 	mla	r4, r5, r0, r4
  if (wqd_tmp > INT16_MAX)
 8004d60:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8004d64:	ea4f 33e4 	mov.w	r3, r4, asr #15
  if (wqd_tmp > INT16_MAX)
 8004d68:	da04      	bge.n	8004d74 <MCM_Park+0x50>
  else if (wqd_tmp < (-32768))
 8004d6a:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8004d6e:	da0c      	bge.n	8004d8a <MCM_Park+0x66>
 8004d70:	4b0c      	ldr	r3, [pc, #48]	@ (8004da4 <MCM_Park+0x80>)
 8004d72:	e001      	b.n	8004d78 <MCM_Park+0x54>
 8004d74:	f647 73ff 	movw	r3, #32767	@ 0x7fff
  return (Output);
 8004d78:	b292      	uxth	r2, r2
 8004d7a:	2000      	movs	r0, #0
 8004d7c:	f362 000f 	bfi	r0, r2, #0, #16
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	f363 401f 	bfi	r0, r3, #16, #16
}
 8004d86:	b005      	add	sp, #20
 8004d88:	bd30      	pop	{r4, r5, pc}
    hqd_tmp = ((int16_t)wqd_tmp);
 8004d8a:	4906      	ldr	r1, [pc, #24]	@ (8004da4 <MCM_Park+0x80>)
 8004d8c:	b21b      	sxth	r3, r3
 8004d8e:	428b      	cmp	r3, r1
 8004d90:	bfb8      	it	lt
 8004d92:	460b      	movlt	r3, r1
 8004d94:	e7f0      	b.n	8004d78 <MCM_Park+0x54>
    hqd_tmp = ((int16_t)wqd_tmp);
 8004d96:	4b03      	ldr	r3, [pc, #12]	@ (8004da4 <MCM_Park+0x80>)
 8004d98:	b212      	sxth	r2, r2
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	bfb8      	it	lt
 8004d9e:	461a      	movlt	r2, r3
 8004da0:	e7da      	b.n	8004d58 <MCM_Park+0x34>
 8004da2:	bf00      	nop
 8004da4:	ffff8001 	.word	0xffff8001

08004da8 <MCM_Rev_Park>:
{
 8004da8:	b530      	push	{r4, r5, lr}
 8004daa:	4605      	mov	r5, r0
 8004dac:	b085      	sub	sp, #20
 8004dae:	4604      	mov	r4, r0
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 8004db0:	4608      	mov	r0, r1
 8004db2:	f7ff ff6b 	bl	8004c8c <MCM_Trig_Functions>
 8004db6:	1424      	asrs	r4, r4, #16
 8004db8:	1402      	asrs	r2, r0, #16
 8004dba:	b22d      	sxth	r5, r5
 8004dbc:	b200      	sxth	r0, r0
  alpha_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hSin);
 8004dbe:	fb04 f302 	mul.w	r3, r4, r2
  Output.alpha = (int16_t)(((alpha_tmp1) + (alpha_tmp2)) >> 15);
 8004dc2:	fb05 3300 	mla	r3, r5, r0, r3
  beta_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hCos);
 8004dc6:	fb00 f404 	mul.w	r4, r0, r4
  Output.beta = (int16_t)((beta_tmp2 - beta_tmp1) >> 15);
 8004dca:	fb05 4412 	mls	r4, r5, r2, r4
  return (Output);
 8004dce:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 8004dd2:	2000      	movs	r0, #0
 8004dd4:	f363 000f 	bfi	r0, r3, #0, #16
 8004dd8:	f3c4 34cf 	ubfx	r4, r4, #15, #16
 8004ddc:	f364 401f 	bfi	r0, r4, #16, #16
}
 8004de0:	b005      	add	sp, #20
 8004de2:	bd30      	pop	{r4, r5, pc}

08004de4 <MCM_Sqrt>:
  */
__weak int32_t MCM_Sqrt(int32_t wInput)
{
  int32_t wtemprootnew;

  if (wInput > 0)
 8004de4:	1e03      	subs	r3, r0, #0
 8004de6:	dd32      	ble.n	8004e4e <MCM_Sqrt+0x6a>
    {
      wtemproot = ((int32_t)128);
    }
    else
    {
      wtemproot = ((int32_t)8192);
 8004de8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004dec:	bfd4      	ite	le
 8004dee:	2180      	movle	r1, #128	@ 0x80
 8004df0:	f44f 5100 	movgt.w	r1, #8192	@ 0x2000
    }

    do
    {
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 8004df4:	fb93 f2f1 	sdiv	r2, r3, r1
 8004df8:	440a      	add	r2, r1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 8004dfa:	ebb1 0f62 	cmp.w	r1, r2, asr #1
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 8004dfe:	ea4f 0062 	mov.w	r0, r2, asr #1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 8004e02:	d025      	beq.n	8004e50 <MCM_Sqrt+0x6c>
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 8004e04:	fb93 f2f0 	sdiv	r2, r3, r0
 8004e08:	4402      	add	r2, r0
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 8004e0a:	ebb0 0f62 	cmp.w	r0, r2, asr #1
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 8004e0e:	ea4f 0162 	mov.w	r1, r2, asr #1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 8004e12:	d01d      	beq.n	8004e50 <MCM_Sqrt+0x6c>
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 8004e14:	fb93 f2f1 	sdiv	r2, r3, r1
 8004e18:	440a      	add	r2, r1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 8004e1a:	ebb1 0f62 	cmp.w	r1, r2, asr #1
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 8004e1e:	ea4f 0062 	mov.w	r0, r2, asr #1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 8004e22:	d015      	beq.n	8004e50 <MCM_Sqrt+0x6c>
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 8004e24:	fb93 f2f0 	sdiv	r2, r3, r0
 8004e28:	4402      	add	r2, r0
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 8004e2a:	ebb0 0f62 	cmp.w	r0, r2, asr #1
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 8004e2e:	ea4f 0162 	mov.w	r1, r2, asr #1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 8004e32:	d00d      	beq.n	8004e50 <MCM_Sqrt+0x6c>
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 8004e34:	fb93 f2f1 	sdiv	r2, r3, r1
 8004e38:	440a      	add	r2, r1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 8004e3a:	ebb1 0f62 	cmp.w	r1, r2, asr #1
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 8004e3e:	ea4f 0062 	mov.w	r0, r2, asr #1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 8004e42:	d005      	beq.n	8004e50 <MCM_Sqrt+0x6c>
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 8004e44:	fb93 f3f0 	sdiv	r3, r3, r0
 8004e48:	4418      	add	r0, r3
 8004e4a:	1040      	asrs	r0, r0, #1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 8004e4c:	4770      	bx	lr
    while (biter < 6U);

  }
  else
  {
    wtemprootnew = (int32_t)0;
 8004e4e:	2000      	movs	r0, #0
  }

  return (wtemprootnew);
}
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop

08004e54 <MCM_floatToIntBit>:
  * @brief  This function codify a floating point number into the relative 32bit integer.
  * @param  float Floating point number to be coded.
  * @retval uint32_t Coded 32bit integer.
  */
__weak uint32_t MCM_floatToIntBit( float_t x ) //cstat !MISRAC2012-Dir-4.6_a
{
 8004e54:	b082      	sub	sp, #8
 8004e56:	ed8d 0a01 	vstr	s0, [sp, #4]
  const uint32_t *pInt;
  pInt = (uint32_t *)(&x); //cstat !MISRAC2012-Rule-11.3
  return (*pInt);
 8004e5a:	9801      	ldr	r0, [sp, #4]
}
 8004e5c:	b002      	add	sp, #8
 8004e5e:	4770      	bx	lr

08004e60 <FOC_Clear>:
  *         controller. It must be called before each motor restart.
  *         It does not clear speed sensor.
  * @param  bMotor related motor it can be M1 or M2.
  */
__weak void FOC_Clear(uint8_t bMotor)
{
 8004e60:	b538      	push	{r3, r4, r5, lr}
 8004e62:	2326      	movs	r3, #38	@ 0x26
 8004e64:	4919      	ldr	r1, [pc, #100]	@ (8004ecc <FOC_Clear+0x6c>)
 8004e66:	fb00 f303 	mul.w	r3, r0, r3

  ab_t NULL_ab = {((int16_t)0), ((int16_t)0)};
  qd_t NULL_qd = {((int16_t)0), ((int16_t)0)};
  alphabeta_t NULL_alphabeta = {((int16_t)0), ((int16_t)0)};

  FOCVars[bMotor].Iab = NULL_ab;
 8004e6a:	2400      	movs	r4, #0
 8004e6c:	50cc      	str	r4, [r1, r3]
{
 8004e6e:	4605      	mov	r5, r0
 8004e70:	f103 0208 	add.w	r2, r3, #8
 8004e74:	1858      	adds	r0, r3, r1
 8004e76:	3310      	adds	r3, #16
 8004e78:	440a      	add	r2, r1
 8004e7a:	440b      	add	r3, r1
  FOCVars[bMotor].hTeref = (int16_t)0;
  FOCVars[bMotor].Vqd = NULL_qd;
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8004e7c:	4914      	ldr	r1, [pc, #80]	@ (8004ed0 <FOC_Clear+0x70>)
  FOCVars[bMotor].Iab = NULL_ab;
 8004e7e:	6044      	str	r4, [r0, #4]
  FOCVars[bMotor].Iqd = NULL_qd;
 8004e80:	6054      	str	r4, [r2, #4]
 8004e82:	6094      	str	r4, [r2, #8]
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8004e84:	f851 0025 	ldr.w	r0, [r1, r5, lsl #2]
  FOCVars[bMotor].Vqd = NULL_qd;
 8004e88:	f8c3 4006 	str.w	r4, [r3, #6]
 8004e8c:	f8c3 400a 	str.w	r4, [r3, #10]
 8004e90:	f8c3 400e 	str.w	r4, [r3, #14]
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8004e94:	4621      	mov	r1, r4
 8004e96:	f004 fc83 	bl	80097a0 <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], ((int32_t)0));
 8004e9a:	4b0e      	ldr	r3, [pc, #56]	@ (8004ed4 <FOC_Clear+0x74>)
 8004e9c:	4621      	mov	r1, r4
 8004e9e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004ea2:	f004 fc7d 	bl	80097a0 <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 8004ea6:	4b0c      	ldr	r3, [pc, #48]	@ (8004ed8 <FOC_Clear+0x78>)
 8004ea8:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004eac:	f005 fd20 	bl	800a8f0 <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8004eb0:	4b0a      	ldr	r3, [pc, #40]	@ (8004edc <FOC_Clear+0x7c>)
 8004eb2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004eb6:	f000 ff85 	bl	8005dc4 <PWMC_SwitchOffPWM>

  if (NULL == pFF[bMotor])
 8004eba:	4b09      	ldr	r3, [pc, #36]	@ (8004ee0 <FOC_Clear+0x80>)
 8004ebc:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004ec0:	b118      	cbz	r0, 8004eca <FOC_Clear+0x6a>
  }

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 8004ec2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    FF_Clear(pFF[bMotor]);
 8004ec6:	f004 bb0b 	b.w	80094e0 <FF_Clear>
}
 8004eca:	bd38      	pop	{r3, r4, r5, pc}
 8004ecc:	20000d7c 	.word	0x20000d7c
 8004ed0:	2000000c 	.word	0x2000000c
 8004ed4:	20000008 	.word	0x20000008
 8004ed8:	20000010 	.word	0x20000010
 8004edc:	20000d78 	.word	0x20000d78
 8004ee0:	20000000 	.word	0x20000000

08004ee4 <MCboot>:
  if (MC_NULL == pMCIList)
 8004ee4:	2800      	cmp	r0, #0
 8004ee6:	f000 80b0 	beq.w	800504a <MCboot+0x166>
{
 8004eea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bMCBootCompleted = (uint8_t )0;
 8004eee:	4b57      	ldr	r3, [pc, #348]	@ (800504c <MCboot+0x168>)
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8004ef0:	f8df 81b0 	ldr.w	r8, [pc, #432]	@ 80050a4 <MCboot+0x1c0>
    STO_PLL_Init (&STO_PLL_M1);
 8004ef4:	f8df 91b0 	ldr.w	r9, [pc, #432]	@ 80050a8 <MCboot+0x1c4>
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &STO_PLL_M1._Super);
 8004ef8:	4e55      	ldr	r6, [pc, #340]	@ (8005050 <MCboot+0x16c>)
    VSS_Init(&VirtualSpeedSensorM1);
 8004efa:	f8df b1b0 	ldr.w	fp, [pc, #432]	@ 80050ac <MCboot+0x1c8>
    RVBS_Init(&BusVoltageSensor_M1);
 8004efe:	f8df a1b0 	ldr.w	sl, [pc, #432]	@ 80050b0 <MCboot+0x1cc>
    pMPM[M1]->pFOCVars = &FOCVars[M1];
 8004f02:	4d54      	ldr	r5, [pc, #336]	@ (8005054 <MCboot+0x170>)
{
 8004f04:	b085      	sub	sp, #20
    bMCBootCompleted = (uint8_t )0;
 8004f06:	2700      	movs	r7, #0
 8004f08:	4604      	mov	r4, r0
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8004f0a:	4853      	ldr	r0, [pc, #332]	@ (8005058 <MCboot+0x174>)
    bMCBootCompleted = (uint8_t )0;
 8004f0c:	701f      	strb	r7, [r3, #0]
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8004f0e:	f8c8 0000 	str.w	r0, [r8]
    R3_1_Init(&PWM_Handle_M1);
 8004f12:	f004 ff91 	bl	8009e38 <R3_1_Init>
    ASPEP_start(&aspepOverUartA);
 8004f16:	4851      	ldr	r0, [pc, #324]	@ (800505c <MCboot+0x178>)
 8004f18:	f7fe ff64 	bl	8003de4 <ASPEP_start>
    startTimers();
 8004f1c:	f004 fcf2 	bl	8009904 <startTimers>
    PID_HandleInit(&PIDSpeedHandle_M1);
 8004f20:	484f      	ldr	r0, [pc, #316]	@ (8005060 <MCboot+0x17c>)
 8004f22:	f004 fc29 	bl	8009778 <PID_HandleInit>
    STO_PLL_Init (&STO_PLL_M1);
 8004f26:	4648      	mov	r0, r9
 8004f28:	f005 ff7a 	bl	800ae20 <STO_PLL_Init>
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &STO_PLL_M1._Super);
 8004f2c:	464a      	mov	r2, r9
 8004f2e:	494c      	ldr	r1, [pc, #304]	@ (8005060 <MCboot+0x17c>)
 8004f30:	6830      	ldr	r0, [r6, #0]
 8004f32:	f005 fcc3 	bl	800a8bc <STC_Init>
    VSS_Init(&VirtualSpeedSensorM1);
 8004f36:	4658      	mov	r0, fp
 8004f38:	f006 f88e 	bl	800b058 <VSS_Init>
    RUC_Init(&RevUpControlM1, pSTC[M1], &VirtualSpeedSensorM1, &STO_M1, pwmcHandle[M1]);
 8004f3c:	f8d8 3000 	ldr.w	r3, [r8]
 8004f40:	9300      	str	r3, [sp, #0]
 8004f42:	6831      	ldr	r1, [r6, #0]
 8004f44:	4b47      	ldr	r3, [pc, #284]	@ (8005064 <MCboot+0x180>)
 8004f46:	4848      	ldr	r0, [pc, #288]	@ (8005068 <MCboot+0x184>)
 8004f48:	465a      	mov	r2, fp
 8004f4a:	f005 fb5b 	bl	800a604 <RUC_Init>
    PID_HandleInit(&PIDIqHandle_M1);
 8004f4e:	4847      	ldr	r0, [pc, #284]	@ (800506c <MCboot+0x188>)
 8004f50:	f004 fc12 	bl	8009778 <PID_HandleInit>
    PID_HandleInit(&PIDIdHandle_M1);
 8004f54:	4846      	ldr	r0, [pc, #280]	@ (8005070 <MCboot+0x18c>)
 8004f56:	f004 fc0f 	bl	8009778 <PID_HandleInit>
    (void)RCM_RegisterRegConv(&VbusRegConv_M1);
 8004f5a:	4846      	ldr	r0, [pc, #280]	@ (8005074 <MCboot+0x190>)
 8004f5c:	f002 fa82 	bl	8007464 <RCM_RegisterRegConv>
    RVBS_Init(&BusVoltageSensor_M1);
 8004f60:	4650      	mov	r0, sl
 8004f62:	f005 fa5f 	bl	800a424 <RVBS_Init>
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 8004f66:	4b44      	ldr	r3, [pc, #272]	@ (8005078 <MCboot+0x194>)
    NTC_Init(&TempSensor_M1);
 8004f68:	4844      	ldr	r0, [pc, #272]	@ (800507c <MCboot+0x198>)
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f8c3 a00c 	str.w	sl, [r3, #12]
    pMPM[M1]->pFOCVars = &FOCVars[M1];
 8004f70:	609d      	str	r5, [r3, #8]
    NTC_Init(&TempSensor_M1);
 8004f72:	f004 fbe3 	bl	800973c <NTC_Init>
    FF_Init(pFF[M1],&(BusVoltageSensor_M1._Super),pPIDId[M1],pPIDIq[M1]);
 8004f76:	4b42      	ldr	r3, [pc, #264]	@ (8005080 <MCboot+0x19c>)
 8004f78:	4a42      	ldr	r2, [pc, #264]	@ (8005084 <MCboot+0x1a0>)
 8004f7a:	4943      	ldr	r1, [pc, #268]	@ (8005088 <MCboot+0x1a4>)
 8004f7c:	6818      	ldr	r0, [r3, #0]
 8004f7e:	6813      	ldr	r3, [r2, #0]
 8004f80:	680a      	ldr	r2, [r1, #0]
 8004f82:	4651      	mov	r1, sl
 8004f84:	f004 fa9e 	bl	80094c4 <FF_Init>
    pREMNG[M1] = &RampExtMngrHFParamsM1;
 8004f88:	4b40      	ldr	r3, [pc, #256]	@ (800508c <MCboot+0x1a8>)
 8004f8a:	4841      	ldr	r0, [pc, #260]	@ (8005090 <MCboot+0x1ac>)
 8004f8c:	6018      	str	r0, [r3, #0]
    REMNG_Init(pREMNG[M1]);
 8004f8e:	f005 faa3 	bl	800a4d8 <REMNG_Init>
    SCC.pPIDId = pPIDId[M1];
 8004f92:	493d      	ldr	r1, [pc, #244]	@ (8005088 <MCboot+0x1a4>)
    SCC.pPIDIq = pPIDIq[M1];
 8004f94:	4a3b      	ldr	r2, [pc, #236]	@ (8005084 <MCboot+0x1a0>)
    SCC.pPWMC = pwmcHandle[M1];
 8004f96:	483f      	ldr	r0, [pc, #252]	@ (8005094 <MCboot+0x1b0>)
    SCC.pPIDId = pPIDId[M1];
 8004f98:	680b      	ldr	r3, [r1, #0]
    SCC.pPIDIq = pPIDIq[M1];
 8004f9a:	6812      	ldr	r2, [r2, #0]
    SCC.pVSS = &VirtualSpeedSensorM1;
 8004f9c:	f8c0 b010 	str.w	fp, [r0, #16]
    SCC.pPIDId = pPIDId[M1];
 8004fa0:	e9c0 2306 	strd	r2, r3, [r0, #24]
    SCC.pOTT = &OTT;
 8004fa4:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80050b4 <MCboot+0x1d0>
    SCC.pPWMC = pwmcHandle[M1];
 8004fa8:	f8d8 3000 	ldr.w	r3, [r8]
    SCC.pRevupCtrl = &RevUpControlM1;
 8004fac:	4a2e      	ldr	r2, [pc, #184]	@ (8005068 <MCboot+0x184>)
    SCC.pVBS = &BusVoltageSensor_M1;
 8004fae:	f8c0 a004 	str.w	sl, [r0, #4]
    SCC.pRevupCtrl = &RevUpControlM1;
 8004fb2:	6202      	str	r2, [r0, #32]
    SCC.pMCI = &Mci[M1];
 8004fb4:	f8df a100 	ldr.w	sl, [pc, #256]	@ 80050b8 <MCboot+0x1d4>
    SCC.pCLM = &CircleLimitationM1;
 8004fb8:	4a37      	ldr	r2, [pc, #220]	@ (8005098 <MCboot+0x1b4>)
    SCC.pPWMC = pwmcHandle[M1];
 8004fba:	6003      	str	r3, [r0, #0]
    SCC.pSTC = &SpeednTorqCtrlM1;
 8004fbc:	4b37      	ldr	r3, [pc, #220]	@ (800509c <MCboot+0x1b8>)
    SCC.pFOCVars = &FOCVars[M1];
 8004fbe:	6085      	str	r5, [r0, #8]
    SCC.pSTO = &STO_PLL_M1;
 8004fc0:	f8c0 9024 	str.w	r9, [r0, #36]	@ 0x24
    SCC.pHT = MC_NULL;
 8004fc4:	6307      	str	r7, [r0, #48]	@ 0x30
    SCC.pOTT = &OTT;
 8004fc6:	f8c0 b02c 	str.w	fp, [r0, #44]	@ 0x2c
    SCC.pMCI = &Mci[M1];
 8004fca:	f8c0 a00c 	str.w	sl, [r0, #12]
    SCC.pSTC = &SpeednTorqCtrlM1;
 8004fce:	6283      	str	r3, [r0, #40]	@ 0x28
    SCC.pCLM = &CircleLimitationM1;
 8004fd0:	6142      	str	r2, [r0, #20]
    SCC_Init(&SCC);
 8004fd2:	f7fb fdc5 	bl	8000b60 <SCC_Init>
    OTT.pPIDSpeed = &PIDSpeedHandle_M1;
 8004fd6:	4a22      	ldr	r2, [pc, #136]	@ (8005060 <MCboot+0x17c>)
    OTT.pSTC = &SpeednTorqCtrlM1;
 8004fd8:	4b30      	ldr	r3, [pc, #192]	@ (800509c <MCboot+0x1b8>)
    OTT.pPIDSpeed = &PIDSpeedHandle_M1;
 8004fda:	f8cb 2008 	str.w	r2, [fp, #8]
    OTT_Init(&OTT);
 8004fde:	4658      	mov	r0, fp
    OTT.pSTC = &SpeednTorqCtrlM1;
 8004fe0:	f8cb 300c 	str.w	r3, [fp, #12]
    OTT.pSpeedSensor = &STO_PLL_M1._Super;
 8004fe4:	f8cb 9000 	str.w	r9, [fp]
    OTT.pFOCVars = &FOCVars[M1];
 8004fe8:	f8cb 5004 	str.w	r5, [fp, #4]
    OTT_Init(&OTT);
 8004fec:	f7fb f90c 	bl	8000208 <OTT_Init>
    FOC_Clear(M1);
 8004ff0:	4638      	mov	r0, r7
 8004ff2:	f7ff ff35 	bl	8004e60 <FOC_Clear>
    FOCVars[M1].bDriveInput = EXTERNAL;
 8004ff6:	f04f 0901 	mov.w	r9, #1
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8004ffa:	6830      	ldr	r0, [r6, #0]
    FOCVars[M1].bDriveInput = EXTERNAL;
 8004ffc:	f885 9024 	strb.w	r9, [r5, #36]	@ 0x24
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8005000:	f005 fd0e 	bl	800aa20 <STC_GetDefaultIqdref>
 8005004:	6128      	str	r0, [r5, #16]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8005006:	6830      	ldr	r0, [r6, #0]
 8005008:	f005 fd0a 	bl	800aa20 <STC_GetDefaultIqdref>
 800500c:	f3c0 400f 	ubfx	r0, r0, #16, #16
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 8005010:	6831      	ldr	r1, [r6, #0]
 8005012:	f8d8 3000 	ldr.w	r3, [r8]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8005016:	82a8      	strh	r0, [r5, #20]
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 8005018:	462a      	mov	r2, r5
 800501a:	4650      	mov	r0, sl
 800501c:	f7ff fc7c 	bl	8004918 <MCI_Init>
   Mci[M1].pScale = &scaleParams_M1;
 8005020:	4b1f      	ldr	r3, [pc, #124]	@ (80050a0 <MCboot+0x1bc>)
    MCI_ExecSpeedRamp(&Mci[M1],
 8005022:	6830      	ldr	r0, [r6, #0]
   Mci[M1].pScale = &scaleParams_M1;
 8005024:	f8ca 3018 	str.w	r3, [sl, #24]
    MCI_ExecSpeedRamp(&Mci[M1],
 8005028:	f005 fcf0 	bl	800aa0c <STC_GetMecSpeedRefUnitDefault>
 800502c:	463a      	mov	r2, r7
 800502e:	4601      	mov	r1, r0
 8005030:	4650      	mov	r0, sl
 8005032:	f7ff fc81 	bl	8004938 <MCI_ExecSpeedRamp>
    pMCIList[M1] = &Mci[M1];
 8005036:	f8c4 a000 	str.w	sl, [r4]
    MC_APP_BootHook();
 800503a:	f7ff fc69 	bl	8004910 <MC_APP_BootHook>
    bMCBootCompleted = 1U;
 800503e:	4b03      	ldr	r3, [pc, #12]	@ (800504c <MCboot+0x168>)
 8005040:	f883 9000 	strb.w	r9, [r3]
}
 8005044:	b005      	add	sp, #20
 8005046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800504a:	4770      	bx	lr
 800504c:	20000d6c 	.word	0x20000d6c
 8005050:	20000010 	.word	0x20000010
 8005054:	20000d7c 	.word	0x20000d7c
 8005058:	20000808 	.word	0x20000808
 800505c:	20000ad4 	.word	0x20000ad4
 8005060:	200009e8 	.word	0x200009e8
 8005064:	20000694 	.word	0x20000694
 8005068:	200008ac 	.word	0x200008ac
 800506c:	200009bc 	.word	0x200009bc
 8005070:	20000990 	.word	0x20000990
 8005074:	20000668 	.word	0x20000668
 8005078:	20000004 	.word	0x20000004
 800507c:	20000678 	.word	0x20000678
 8005080:	20000000 	.word	0x20000000
 8005084:	2000000c 	.word	0x2000000c
 8005088:	20000008 	.word	0x20000008
 800508c:	20000d74 	.word	0x20000d74
 8005090:	20000634 	.word	0x20000634
 8005094:	200000cc 	.word	0x200000cc
 8005098:	20000630 	.word	0x20000630
 800509c:	20000924 	.word	0x20000924
 80050a0:	20000a34 	.word	0x20000a34
 80050a4:	20000d78 	.word	0x20000d78
 80050a8:	200006a8 	.word	0x200006a8
 80050ac:	200007d0 	.word	0x200007d0
 80050b0:	2000064c 	.word	0x2000064c
 80050b4:	20000014 	.word	0x20000014
 80050b8:	20000d30 	.word	0x20000d30

080050bc <FOC_InitAdditionalMethods>:
  *         START_TO_RUN state.
  * @param  bMotor related motor it can be M1 or M2.
  */
__weak void FOC_InitAdditionalMethods(uint8_t bMotor) //cstat !RED-func-no-effect
{
    if (M_NONE == bMotor)
 80050bc:	28ff      	cmp	r0, #255	@ 0xff
 80050be:	d005      	beq.n	80050cc <FOC_InitAdditionalMethods+0x10>
    {
      /* Nothing to do */
    }
    else
    {
      if (NULL == pFF[bMotor])
 80050c0:	4b03      	ldr	r3, [pc, #12]	@ (80050d0 <FOC_InitAdditionalMethods+0x14>)
 80050c2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80050c6:	b108      	cbz	r0, 80050cc <FOC_InitAdditionalMethods+0x10>
      {
        /* Nothing to do */
      }
      else
      {
        FF_InitFOCAdditionalMethods(pFF[bMotor]);
 80050c8:	f004 ba66 	b.w	8009598 <FF_InitFOCAdditionalMethods>
      }
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
    }
}
 80050cc:	4770      	bx	lr
 80050ce:	bf00      	nop
 80050d0:	20000000 	.word	0x20000000

080050d4 <FOC_CalcCurrRef>:
  *         MTPA algorithm(s). It must be called with the periodicity specified
  *         in oTSC parameters.
  * @param  bMotor related motor it can be M1 or M2.
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 80050d4:	b570      	push	{r4, r5, r6, lr}

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if (INTERNAL == FOCVars[bMotor].bDriveInput)
 80050d6:	4c0e      	ldr	r4, [pc, #56]	@ (8005110 <FOC_CalcCurrRef+0x3c>)
 80050d8:	2326      	movs	r3, #38	@ 0x26
 80050da:	fb03 4400 	mla	r4, r3, r0, r4
 80050de:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 80050e2:	b103      	cbz	r3, 80050e6 <FOC_CalcCurrRef+0x12>
    /* Nothing to do */
  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 80050e4:	bd70      	pop	{r4, r5, r6, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 80050e6:	4e0b      	ldr	r6, [pc, #44]	@ (8005114 <FOC_CalcCurrRef+0x40>)
 80050e8:	4605      	mov	r5, r0
 80050ea:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80050ee:	f005 fc57 	bl	800a9a0 <STC_CalcTorqueReference>
    if (NULL == pFF[bMotor])
 80050f2:	4a09      	ldr	r2, [pc, #36]	@ (8005118 <FOC_CalcCurrRef+0x44>)
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 80050f4:	4603      	mov	r3, r0
    if (NULL == pFF[bMotor])
 80050f6:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 80050fa:	83e3      	strh	r3, [r4, #30]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 80050fc:	8223      	strh	r3, [r4, #16]
    if (NULL == pFF[bMotor])
 80050fe:	2800      	cmp	r0, #0
 8005100:	d0f0      	beq.n	80050e4 <FOC_CalcCurrRef+0x10>
      FF_VqdffComputation(pFF[bMotor], FOCVars[bMotor].Iqdref, pSTC[bMotor]);
 8005102:	f856 2025 	ldr.w	r2, [r6, r5, lsl #2]
 8005106:	6921      	ldr	r1, [r4, #16]
}
 8005108:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      FF_VqdffComputation(pFF[bMotor], FOCVars[bMotor].Iqdref, pSTC[bMotor]);
 800510c:	f004 b9ec 	b.w	80094e8 <FF_VqdffComputation>
 8005110:	20000d7c 	.word	0x20000d7c
 8005114:	20000010 	.word	0x20000010
 8005118:	20000000 	.word	0x20000000

0800511c <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted.
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 800511c:	4b01      	ldr	r3, [pc, #4]	@ (8005124 <TSK_SetChargeBootCapDelayM1+0x8>)
 800511e:	8018      	strh	r0, [r3, #0]
}
 8005120:	4770      	bx	lr
 8005122:	bf00      	nop
 8005124:	20000d70 	.word	0x20000d70

08005128 <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise.
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hBootCapDelayCounterM1)
 8005128:	4b03      	ldr	r3, [pc, #12]	@ (8005138 <TSK_ChargeBootCapDelayHasElapsedM1+0x10>)
 800512a:	8818      	ldrh	r0, [r3, #0]
 800512c:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 800512e:	fab0 f080 	clz	r0, r0
 8005132:	0940      	lsrs	r0, r0, #5
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop
 8005138:	20000d70 	.word	0x20000d70

0800513c <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted.
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 800513c:	4b01      	ldr	r3, [pc, #4]	@ (8005144 <TSK_SetStopPermanencyTimeM1+0x8>)
 800513e:	8018      	strh	r0, [r3, #0]
}
 8005140:	4770      	bx	lr
 8005142:	bf00      	nop
 8005144:	20000d6e 	.word	0x20000d6e

08005148 <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise.
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hStopPermanencyCounterM1)
 8005148:	4b03      	ldr	r3, [pc, #12]	@ (8005158 <TSK_StopPermanencyTimeHasElapsedM1+0x10>)
 800514a:	8818      	ldrh	r0, [r3, #0]
 800514c:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 800514e:	fab0 f080 	clz	r0, r0
 8005152:	0940      	lsrs	r0, r0, #5
 8005154:	4770      	bx	lr
 8005156:	bf00      	nop
 8005158:	20000d6e 	.word	0x20000d6e

0800515c <TSK_MediumFrequencyTaskM1>:
{
 800515c:	b570      	push	{r4, r5, r6, lr}
 800515e:	b082      	sub	sp, #8
  int16_t wAux = 0;
 8005160:	2300      	movs	r3, #0
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit(&STO_PLL_M1, &wAux);
 8005162:	4669      	mov	r1, sp
 8005164:	48bb      	ldr	r0, [pc, #748]	@ (8005454 <TSK_MediumFrequencyTaskM1+0x2f8>)
  int16_t wAux = 0;
 8005166:	f8ad 3000 	strh.w	r3, [sp]
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit(&STO_PLL_M1, &wAux);
 800516a:	f005 fd65 	bl	800ac38 <STO_PLL_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower(pMPM[M1]);
 800516e:	4eba      	ldr	r6, [pc, #744]	@ (8005458 <TSK_MediumFrequencyTaskM1+0x2fc>)
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 8005170:	4cba      	ldr	r4, [pc, #744]	@ (800545c <TSK_MediumFrequencyTaskM1+0x300>)
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit(&STO_PLL_M1, &wAux);
 8005172:	4605      	mov	r5, r0
  PQD_CalcElMotorPower(pMPM[M1]);
 8005174:	6830      	ldr	r0, [r6, #0]
 8005176:	f004 fb8b 	bl	8009890 <PQD_CalcElMotorPower>
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 800517a:	4620      	mov	r0, r4
 800517c:	f7ff fc46 	bl	8004a0c <MCI_GetCurrentFaults>
 8005180:	b130      	cbz	r0, 8005190 <TSK_MediumFrequencyTaskM1+0x34>
    Mci[M1].State = FAULT_NOW;
 8005182:	230a      	movs	r3, #10
 8005184:	77e3      	strb	r3, [r4, #31]
  SCC_MF(&SCC);
 8005186:	48b6      	ldr	r0, [pc, #728]	@ (8005460 <TSK_MediumFrequencyTaskM1+0x304>)
 8005188:	f7fc fd3c 	bl	8001c04 <SCC_MF>
}
 800518c:	b002      	add	sp, #8
 800518e:	bd70      	pop	{r4, r5, r6, pc}
    if (MCI_GetOccurredFaults(&Mci[M1]) == MC_NO_FAULTS)
 8005190:	4620      	mov	r0, r4
 8005192:	f7ff fc39 	bl	8004a08 <MCI_GetOccurredFaults>
 8005196:	bb78      	cbnz	r0, 80051f8 <TSK_MediumFrequencyTaskM1+0x9c>
      switch (Mci[M1].State)
 8005198:	7fe3      	ldrb	r3, [r4, #31]
 800519a:	2b14      	cmp	r3, #20
 800519c:	d8f3      	bhi.n	8005186 <TSK_MediumFrequencyTaskM1+0x2a>
 800519e:	a201      	add	r2, pc, #4	@ (adr r2, 80051a4 <TSK_MediumFrequencyTaskM1+0x48>)
 80051a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051a4:	08005373 	.word	0x08005373
 80051a8:	08005187 	.word	0x08005187
 80051ac:	08005187 	.word	0x08005187
 80051b0:	08005187 	.word	0x08005187
 80051b4:	080052f3 	.word	0x080052f3
 80051b8:	08005187 	.word	0x08005187
 80051bc:	080052d1 	.word	0x080052d1
 80051c0:	08005187 	.word	0x08005187
 80051c4:	080052b1 	.word	0x080052b1
 80051c8:	08005187 	.word	0x08005187
 80051cc:	080051f9 	.word	0x080051f9
 80051d0:	08005419 	.word	0x08005419
 80051d4:	08005187 	.word	0x08005187
 80051d8:	08005187 	.word	0x08005187
 80051dc:	08005187 	.word	0x08005187
 80051e0:	08005187 	.word	0x08005187
 80051e4:	080053a9 	.word	0x080053a9
 80051e8:	080053f7 	.word	0x080053f7
 80051ec:	08005187 	.word	0x08005187
 80051f0:	0800524d 	.word	0x0800524d
 80051f4:	08005207 	.word	0x08005207
      Mci[M1].State = FAULT_OVER;
 80051f8:	230b      	movs	r3, #11
  SCC_MF(&SCC);
 80051fa:	4899      	ldr	r0, [pc, #612]	@ (8005460 <TSK_MediumFrequencyTaskM1+0x304>)
      Mci[M1].State = FAULT_OVER;
 80051fc:	77e3      	strb	r3, [r4, #31]
  SCC_MF(&SCC);
 80051fe:	f7fc fd01 	bl	8001c04 <SCC_MF>
}
 8005202:	b002      	add	sp, #8
 8005204:	bd70      	pop	{r4, r5, r6, pc}
          if (MCI_STOP == Mci[M1].DirectCommand)
 8005206:	7fa3      	ldrb	r3, [r4, #30]
 8005208:	2b05      	cmp	r3, #5
 800520a:	f000 810c 	beq.w	8005426 <TSK_MediumFrequencyTaskM1+0x2ca>
            if (0 == SCC_DetectBemf(&SCC))
 800520e:	4894      	ldr	r0, [pc, #592]	@ (8005460 <TSK_MediumFrequencyTaskM1+0x304>)
 8005210:	f7fd f9c4 	bl	800259c <SCC_DetectBemf>
 8005214:	4605      	mov	r5, r0
 8005216:	2800      	cmp	r0, #0
 8005218:	d1b5      	bne.n	8005186 <TSK_MediumFrequencyTaskM1+0x2a>
              STC_SetSpeedSensor(pSTC[M1], &VirtualSpeedSensorM1._Super);
 800521a:	4a92      	ldr	r2, [pc, #584]	@ (8005464 <TSK_MediumFrequencyTaskM1+0x308>)
              FOCVars[M1].bDriveInput = EXTERNAL;
 800521c:	4b92      	ldr	r3, [pc, #584]	@ (8005468 <TSK_MediumFrequencyTaskM1+0x30c>)
              STC_SetSpeedSensor(pSTC[M1], &VirtualSpeedSensorM1._Super);
 800521e:	4993      	ldr	r1, [pc, #588]	@ (800546c <TSK_MediumFrequencyTaskM1+0x310>)
 8005220:	6810      	ldr	r0, [r2, #0]
              FOCVars[M1].bDriveInput = EXTERNAL;
 8005222:	2201      	movs	r2, #1
 8005224:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
              STC_SetSpeedSensor(pSTC[M1], &VirtualSpeedSensorM1._Super);
 8005228:	f005 fb5e 	bl	800a8e8 <STC_SetSpeedSensor>
               STO_PLL_Clear(&STO_PLL_M1);
 800522c:	4889      	ldr	r0, [pc, #548]	@ (8005454 <TSK_MediumFrequencyTaskM1+0x2f8>)
 800522e:	f005 fdd1 	bl	800add4 <STO_PLL_Clear>
              FOC_Clear(M1);
 8005232:	4628      	mov	r0, r5
 8005234:	f7ff fe14 	bl	8004e60 <FOC_Clear>
              SCC_Start(&SCC);
 8005238:	4889      	ldr	r0, [pc, #548]	@ (8005460 <TSK_MediumFrequencyTaskM1+0x304>)
 800523a:	f7fb fda3 	bl	8000d84 <SCC_Start>
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 800523e:	4b8c      	ldr	r3, [pc, #560]	@ (8005470 <TSK_MediumFrequencyTaskM1+0x314>)
 8005240:	6818      	ldr	r0, [r3, #0]
 8005242:	f000 fdc1 	bl	8005dc8 <PWMC_SwitchOnPWM>
              Mci[M1].State = START;
 8005246:	2304      	movs	r3, #4
 8005248:	77e3      	strb	r3, [r4, #31]
 800524a:	e79c      	b.n	8005186 <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_STOP == Mci[M1].DirectCommand)
 800524c:	7fa3      	ldrb	r3, [r4, #30]
 800524e:	2b05      	cmp	r3, #5
 8005250:	f000 80e9 	beq.w	8005426 <TSK_MediumFrequencyTaskM1+0x2ca>
              LoopClosed = VSS_CalcAvrgMecSpeedUnit(&VirtualSpeedSensorM1, &hForcedMecSpeedUnit);
 8005254:	4885      	ldr	r0, [pc, #532]	@ (800546c <TSK_MediumFrequencyTaskM1+0x310>)
 8005256:	a901      	add	r1, sp, #4
 8005258:	f005 ff54 	bl	800b104 <VSS_CalcAvrgMecSpeedUnit>
 800525c:	4605      	mov	r5, r0
              tempBool = VSS_TransitionEnded(&VirtualSpeedSensorM1);
 800525e:	4883      	ldr	r0, [pc, #524]	@ (800546c <TSK_MediumFrequencyTaskM1+0x310>)
 8005260:	f005 fff4 	bl	800b24c <VSS_TransitionEnded>
              LoopClosed = LoopClosed || tempBool;
 8005264:	b90d      	cbnz	r5, 800526a <TSK_MediumFrequencyTaskM1+0x10e>
 8005266:	2800      	cmp	r0, #0
 8005268:	d08d      	beq.n	8005186 <TSK_MediumFrequencyTaskM1+0x2a>
                                    (((int32_t)FOCVars[M1].Iqdref.q * (int16_t)PID_GetKIDivisor(&PIDSpeedHandle_M1))
 800526a:	4b7f      	ldr	r3, [pc, #508]	@ (8005468 <TSK_MediumFrequencyTaskM1+0x30c>)
 800526c:	4881      	ldr	r0, [pc, #516]	@ (8005474 <TSK_MediumFrequencyTaskM1+0x318>)
 800526e:	f9b3 5010 	ldrsh.w	r5, [r3, #16]
 8005272:	f004 fa9f 	bl	80097b4 <PID_GetKIDivisor>
                PID_SetIntegralTerm(&PIDSpeedHandle_M1,
 8005276:	b201      	sxth	r1, r0
 8005278:	fb05 f101 	mul.w	r1, r5, r1
 800527c:	487d      	ldr	r0, [pc, #500]	@ (8005474 <TSK_MediumFrequencyTaskM1+0x318>)
                STC_SetSpeedSensor(pSTC[M1], &STO_PLL_M1._Super); /* Observer has converged */
 800527e:	4d79      	ldr	r5, [pc, #484]	@ (8005464 <TSK_MediumFrequencyTaskM1+0x308>)
                PID_SetIntegralTerm(&PIDSpeedHandle_M1,
 8005280:	f004 fa8e 	bl	80097a0 <PID_SetIntegralTerm>
                OTT_SR(&OTT);
 8005284:	487c      	ldr	r0, [pc, #496]	@ (8005478 <TSK_MediumFrequencyTaskM1+0x31c>)
 8005286:	f7fb fb55 	bl	8000934 <OTT_SR>
                STC_SetSpeedSensor(pSTC[M1], &STO_PLL_M1._Super); /* Observer has converged */
 800528a:	4972      	ldr	r1, [pc, #456]	@ (8005454 <TSK_MediumFrequencyTaskM1+0x2f8>)
 800528c:	6828      	ldr	r0, [r5, #0]
 800528e:	f005 fb2b 	bl	800a8e8 <STC_SetSpeedSensor>
                FOC_InitAdditionalMethods(M1);
 8005292:	2000      	movs	r0, #0
 8005294:	f7ff ff12 	bl	80050bc <FOC_InitAdditionalMethods>
                FOC_CalcCurrRef(M1);
 8005298:	2000      	movs	r0, #0
 800529a:	f7ff ff1b 	bl	80050d4 <FOC_CalcCurrRef>
                STC_ForceSpeedReferenceToCurrentSpeed(pSTC[M1]); /* Init the reference speed to current speed */
 800529e:	6828      	ldr	r0, [r5, #0]
 80052a0:	f005 fbd0 	bl	800aa44 <STC_ForceSpeedReferenceToCurrentSpeed>
                MCI_ExecBufferedCommands(&Mci[M1]); /* Exec the speed ramp after changing of the speed sensor */
 80052a4:	486d      	ldr	r0, [pc, #436]	@ (800545c <TSK_MediumFrequencyTaskM1+0x300>)
 80052a6:	f7ff fb71 	bl	800498c <MCI_ExecBufferedCommands>
                Mci[M1].State = RUN;
 80052aa:	2306      	movs	r3, #6
 80052ac:	77e3      	strb	r3, [r4, #31]
 80052ae:	e76a      	b.n	8005186 <TSK_MediumFrequencyTaskM1+0x2a>
          if (TSK_StopPermanencyTimeHasElapsedM1())
 80052b0:	f7ff ff4a 	bl	8005148 <TSK_StopPermanencyTimeHasElapsedM1>
 80052b4:	2800      	cmp	r0, #0
 80052b6:	f43f af66 	beq.w	8005186 <TSK_MediumFrequencyTaskM1+0x2a>
            STC_SetSpeedSensor(pSTC[M1], &VirtualSpeedSensorM1._Super);    /* Sensor-less */
 80052ba:	4b6a      	ldr	r3, [pc, #424]	@ (8005464 <TSK_MediumFrequencyTaskM1+0x308>)
 80052bc:	496b      	ldr	r1, [pc, #428]	@ (800546c <TSK_MediumFrequencyTaskM1+0x310>)
 80052be:	6818      	ldr	r0, [r3, #0]
 80052c0:	f005 fb12 	bl	800a8e8 <STC_SetSpeedSensor>
            VSS_Clear(&VirtualSpeedSensorM1); /* Reset measured speed in IDLE */
 80052c4:	4869      	ldr	r0, [pc, #420]	@ (800546c <TSK_MediumFrequencyTaskM1+0x310>)
 80052c6:	f005 feb9 	bl	800b03c <VSS_Clear>
            Mci[M1].DirectCommand = MCI_NO_COMMAND;
 80052ca:	2300      	movs	r3, #0
 80052cc:	83e3      	strh	r3, [r4, #30]
 80052ce:	e75a      	b.n	8005186 <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_STOP == Mci[M1].DirectCommand)
 80052d0:	7fa3      	ldrb	r3, [r4, #30]
 80052d2:	2b05      	cmp	r3, #5
 80052d4:	f000 80a7 	beq.w	8005426 <TSK_MediumFrequencyTaskM1+0x2ca>
            MCI_ExecBufferedCommands(&Mci[M1]);
 80052d8:	4860      	ldr	r0, [pc, #384]	@ (800545c <TSK_MediumFrequencyTaskM1+0x300>)
 80052da:	f7ff fb57 	bl	800498c <MCI_ExecBufferedCommands>
              FOC_CalcCurrRef(M1);
 80052de:	2000      	movs	r0, #0
 80052e0:	f7ff fef8 	bl	80050d4 <FOC_CalcCurrRef>
              if(!IsSpeedReliable)
 80052e4:	2d00      	cmp	r5, #0
 80052e6:	f000 80db 	beq.w	80054a0 <TSK_MediumFrequencyTaskM1+0x344>
            OTT_MF(&OTT);
 80052ea:	4863      	ldr	r0, [pc, #396]	@ (8005478 <TSK_MediumFrequencyTaskM1+0x31c>)
 80052ec:	f7fb f822 	bl	8000334 <OTT_MF>
 80052f0:	e749      	b.n	8005186 <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_STOP == Mci[M1].DirectCommand)
 80052f2:	7fa3      	ldrb	r3, [r4, #30]
 80052f4:	2b05      	cmp	r3, #5
 80052f6:	f000 8096 	beq.w	8005426 <TSK_MediumFrequencyTaskM1+0x2ca>
            if(! RUC_Exec(&RevUpControlM1))
 80052fa:	4860      	ldr	r0, [pc, #384]	@ (800547c <TSK_MediumFrequencyTaskM1+0x320>)
 80052fc:	f005 fa04 	bl	800a708 <RUC_Exec>
 8005300:	2800      	cmp	r0, #0
 8005302:	f040 80d3 	bne.w	80054ac <TSK_MediumFrequencyTaskM1+0x350>
            (void)VSS_CalcAvrgMecSpeedUnit(&VirtualSpeedSensorM1, &hForcedMecSpeedUnit);
 8005306:	f10d 0102 	add.w	r1, sp, #2
 800530a:	4858      	ldr	r0, [pc, #352]	@ (800546c <TSK_MediumFrequencyTaskM1+0x310>)
 800530c:	f005 fefa 	bl	800b104 <VSS_CalcAvrgMecSpeedUnit>
              ObserverConverged = STO_PLL_IsObserverConverged(&STO_PLL_M1, &hForcedMecSpeedUnit);
 8005310:	f10d 0102 	add.w	r1, sp, #2
 8005314:	484f      	ldr	r0, [pc, #316]	@ (8005454 <TSK_MediumFrequencyTaskM1+0x2f8>)
 8005316:	f005 fdbd 	bl	800ae94 <STO_PLL_IsObserverConverged>
 800531a:	4605      	mov	r5, r0
              STO_SetDirection(&STO_PLL_M1, (int8_t)MCI_GetImposedMotorDirection(&Mci[M1]));
 800531c:	484f      	ldr	r0, [pc, #316]	@ (800545c <TSK_MediumFrequencyTaskM1+0x300>)
 800531e:	f7ff fbdf 	bl	8004ae0 <MCI_GetImposedMotorDirection>
 8005322:	b241      	sxtb	r1, r0
 8005324:	484b      	ldr	r0, [pc, #300]	@ (8005454 <TSK_MediumFrequencyTaskM1+0x2f8>)
 8005326:	f005 fe85 	bl	800b034 <STO_SetDirection>
              (void)VSS_SetStartTransition(&VirtualSpeedSensorM1, ObserverConverged);
 800532a:	4850      	ldr	r0, [pc, #320]	@ (800546c <TSK_MediumFrequencyTaskM1+0x310>)
 800532c:	4629      	mov	r1, r5
 800532e:	f005 ff7f 	bl	800b230 <VSS_SetStartTransition>
            if (ObserverConverged)
 8005332:	2d00      	cmp	r5, #0
 8005334:	f43f af27 	beq.w	8005186 <TSK_MediumFrequencyTaskM1+0x2a>
              qd_t StatorCurrent = MCM_Park(FOCVars[M1].Ialphabeta, SPD_GetElAngle(&STO_PLL_M1._Super));
 8005338:	4846      	ldr	r0, [pc, #280]	@ (8005454 <TSK_MediumFrequencyTaskM1+0x2f8>)
 800533a:	4e4b      	ldr	r6, [pc, #300]	@ (8005468 <TSK_MediumFrequencyTaskM1+0x30c>)
              REMNG_Init(pREMNG[M1]);
 800533c:	4d50      	ldr	r5, [pc, #320]	@ (8005480 <TSK_MediumFrequencyTaskM1+0x324>)
              qd_t StatorCurrent = MCM_Park(FOCVars[M1].Ialphabeta, SPD_GetElAngle(&STO_PLL_M1._Super));
 800533e:	f005 fa6d 	bl	800a81c <SPD_GetElAngle>
 8005342:	4601      	mov	r1, r0
 8005344:	6870      	ldr	r0, [r6, #4]
 8005346:	f7ff fced 	bl	8004d24 <MCM_Park>
 800534a:	4603      	mov	r3, r0
              REMNG_Init(pREMNG[M1]);
 800534c:	6828      	ldr	r0, [r5, #0]
              qd_t StatorCurrent = MCM_Park(FOCVars[M1].Ialphabeta, SPD_GetElAngle(&STO_PLL_M1._Super));
 800534e:	9301      	str	r3, [sp, #4]
              REMNG_Init(pREMNG[M1]);
 8005350:	f005 f8c2 	bl	800a4d8 <REMNG_Init>
              (void)REMNG_ExecRamp(pREMNG[M1], FOCVars[M1].Iqdref.q, 0);
 8005354:	f9b6 1010 	ldrsh.w	r1, [r6, #16]
 8005358:	6828      	ldr	r0, [r5, #0]
 800535a:	2200      	movs	r2, #0
 800535c:	f005 f90c 	bl	800a578 <REMNG_ExecRamp>
              (void)REMNG_ExecRamp(pREMNG[M1], StatorCurrent.q, TRANSITION_DURATION);
 8005360:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 8005364:	6828      	ldr	r0, [r5, #0]
 8005366:	2219      	movs	r2, #25
 8005368:	f005 f906 	bl	800a578 <REMNG_ExecRamp>
              Mci[M1].State = SWITCH_OVER;
 800536c:	2313      	movs	r3, #19
 800536e:	77e3      	strb	r3, [r4, #31]
 8005370:	e709      	b.n	8005186 <TSK_MediumFrequencyTaskM1+0x2a>
          if ((MCI_START == Mci[M1].DirectCommand) || (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand))
 8005372:	7fa5      	ldrb	r5, [r4, #30]
 8005374:	f005 05fd 	and.w	r5, r5, #253	@ 0xfd
 8005378:	2d01      	cmp	r5, #1
 800537a:	f47f af04 	bne.w	8005186 <TSK_MediumFrequencyTaskM1+0x2a>
              RUC_Clear(&RevUpControlM1, MCI_GetImposedMotorDirection(&Mci[M1]));
 800537e:	4837      	ldr	r0, [pc, #220]	@ (800545c <TSK_MediumFrequencyTaskM1+0x300>)
            if (pwmcHandle[M1]->offsetCalibStatus == false)
 8005380:	4e3b      	ldr	r6, [pc, #236]	@ (8005470 <TSK_MediumFrequencyTaskM1+0x314>)
              RUC_Clear(&RevUpControlM1, MCI_GetImposedMotorDirection(&Mci[M1]));
 8005382:	f7ff fbad 	bl	8004ae0 <MCI_GetImposedMotorDirection>
 8005386:	4601      	mov	r1, r0
 8005388:	483c      	ldr	r0, [pc, #240]	@ (800547c <TSK_MediumFrequencyTaskM1+0x320>)
 800538a:	f005 f979 	bl	800a680 <RUC_Clear>
            if (pwmcHandle[M1]->offsetCalibStatus == false)
 800538e:	6830      	ldr	r0, [r6, #0]
 8005390:	f890 1081 	ldrb.w	r1, [r0, #129]	@ 0x81
 8005394:	2900      	cmp	r1, #0
 8005396:	d175      	bne.n	8005484 <TSK_MediumFrequencyTaskM1+0x328>
              (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_START);
 8005398:	f000 fd18 	bl	8005dcc <PWMC_CurrentReadingCalibr>
              Mci[M1].State = OFFSET_CALIB;
 800539c:	2311      	movs	r3, #17
            OTT_Clear(&OTT);
 800539e:	4836      	ldr	r0, [pc, #216]	@ (8005478 <TSK_MediumFrequencyTaskM1+0x31c>)
              Mci[M1].State = OFFSET_CALIB;
 80053a0:	77e3      	strb	r3, [r4, #31]
            OTT_Clear(&OTT);
 80053a2:	f7fa ffab 	bl	80002fc <OTT_Clear>
 80053a6:	e6ee      	b.n	8005186 <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_STOP == Mci[M1].DirectCommand)
 80053a8:	7fa3      	ldrb	r3, [r4, #30]
 80053aa:	2b05      	cmp	r3, #5
 80053ac:	d03b      	beq.n	8005426 <TSK_MediumFrequencyTaskM1+0x2ca>
            if (TSK_ChargeBootCapDelayHasElapsedM1())
 80053ae:	f7ff febb 	bl	8005128 <TSK_ChargeBootCapDelayHasElapsedM1>
 80053b2:	2800      	cmp	r0, #0
 80053b4:	f43f aee7 	beq.w	8005186 <TSK_MediumFrequencyTaskM1+0x2a>
              R3_1_SwitchOffPWM(pwmcHandle[M1]);
 80053b8:	4d2d      	ldr	r5, [pc, #180]	@ (8005470 <TSK_MediumFrequencyTaskM1+0x314>)
 80053ba:	6828      	ldr	r0, [r5, #0]
 80053bc:	f004 fc36 	bl	8009c2c <R3_1_SwitchOffPWM>
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 80053c0:	4a28      	ldr	r2, [pc, #160]	@ (8005464 <TSK_MediumFrequencyTaskM1+0x308>)
              FOCVars[M1].bDriveInput = EXTERNAL;
 80053c2:	4b29      	ldr	r3, [pc, #164]	@ (8005468 <TSK_MediumFrequencyTaskM1+0x30c>)
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 80053c4:	4929      	ldr	r1, [pc, #164]	@ (800546c <TSK_MediumFrequencyTaskM1+0x310>)
 80053c6:	6810      	ldr	r0, [r2, #0]
              FOCVars[M1].bDriveInput = EXTERNAL;
 80053c8:	2201      	movs	r2, #1
 80053ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 80053ce:	f005 fa8b 	bl	800a8e8 <STC_SetSpeedSensor>
              STO_PLL_Clear(&STO_PLL_M1);
 80053d2:	4820      	ldr	r0, [pc, #128]	@ (8005454 <TSK_MediumFrequencyTaskM1+0x2f8>)
 80053d4:	f005 fcfe 	bl	800add4 <STO_PLL_Clear>
              FOC_Clear( M1 );
 80053d8:	2000      	movs	r0, #0
 80053da:	f7ff fd41 	bl	8004e60 <FOC_Clear>
        SCC_Start(&SCC);
 80053de:	4820      	ldr	r0, [pc, #128]	@ (8005460 <TSK_MediumFrequencyTaskM1+0x304>)
 80053e0:	f7fb fcd0 	bl	8000d84 <SCC_Start>
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 80053e4:	6828      	ldr	r0, [r5, #0]
 80053e6:	f000 fcef 	bl	8005dc8 <PWMC_SwitchOnPWM>
              Mci[M1].State = START;
 80053ea:	2304      	movs	r3, #4
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 80053ec:	6828      	ldr	r0, [r5, #0]
              Mci[M1].State = START;
 80053ee:	77e3      	strb	r3, [r4, #31]
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 80053f0:	f000 fcea 	bl	8005dc8 <PWMC_SwitchOnPWM>
 80053f4:	e6c7      	b.n	8005186 <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_STOP == Mci[M1].DirectCommand)
 80053f6:	7fa3      	ldrb	r3, [r4, #30]
    R3_1_SwitchOffPWM(pwmcHandle[motor]);
 80053f8:	4a1d      	ldr	r2, [pc, #116]	@ (8005470 <TSK_MediumFrequencyTaskM1+0x314>)
          if (MCI_STOP == Mci[M1].DirectCommand)
 80053fa:	2b05      	cmp	r3, #5
    R3_1_SwitchOffPWM(pwmcHandle[motor]);
 80053fc:	6810      	ldr	r0, [r2, #0]
          if (MCI_STOP == Mci[M1].DirectCommand)
 80053fe:	d014      	beq.n	800542a <TSK_MediumFrequencyTaskM1+0x2ce>
            if (PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC))
 8005400:	2101      	movs	r1, #1
 8005402:	f000 fce3 	bl	8005dcc <PWMC_CurrentReadingCalibr>
 8005406:	2800      	cmp	r0, #0
 8005408:	f43f aebd 	beq.w	8005186 <TSK_MediumFrequencyTaskM1+0x2a>
              if (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand)
 800540c:	7fa3      	ldrb	r3, [r4, #30]
 800540e:	2b03      	cmp	r3, #3
 8005410:	d056      	beq.n	80054c0 <TSK_MediumFrequencyTaskM1+0x364>
                Mci[M1].State = WAIT_STOP_MOTOR;
 8005412:	2314      	movs	r3, #20
 8005414:	77e3      	strb	r3, [r4, #31]
 8005416:	e6b6      	b.n	8005186 <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_ACK_FAULTS == Mci[M1].DirectCommand)
 8005418:	7fa3      	ldrb	r3, [r4, #30]
 800541a:	2b02      	cmp	r3, #2
 800541c:	f47f aeb3 	bne.w	8005186 <TSK_MediumFrequencyTaskM1+0x2a>
            Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8005420:	2300      	movs	r3, #0
 8005422:	83e3      	strh	r3, [r4, #30]
 8005424:	e6af      	b.n	8005186 <TSK_MediumFrequencyTaskM1+0x2a>
    R3_1_SwitchOffPWM(pwmcHandle[motor]);
 8005426:	4b12      	ldr	r3, [pc, #72]	@ (8005470 <TSK_MediumFrequencyTaskM1+0x314>)
 8005428:	6818      	ldr	r0, [r3, #0]
 800542a:	f004 fbff 	bl	8009c2c <R3_1_SwitchOffPWM>
  SCC_Stop(&SCC);
 800542e:	480c      	ldr	r0, [pc, #48]	@ (8005460 <TSK_MediumFrequencyTaskM1+0x304>)
 8005430:	f7fb fcd6 	bl	8000de0 <SCC_Stop>
  OTT_Stop(&OTT);
 8005434:	4810      	ldr	r0, [pc, #64]	@ (8005478 <TSK_MediumFrequencyTaskM1+0x31c>)
 8005436:	f7fa ff78 	bl	800032a <OTT_Stop>
  FOC_Clear(motor);
 800543a:	2000      	movs	r0, #0
 800543c:	f7ff fd10 	bl	8004e60 <FOC_Clear>
  PQD_Clear(pMPM[motor]);
 8005440:	6830      	ldr	r0, [r6, #0]
 8005442:	f004 fa41 	bl	80098c8 <PQD_Clear>
  TSK_SetStopPermanencyTimeM1(STOPPERMANENCY_TICKS);
 8005446:	f44f 7048 	mov.w	r0, #800	@ 0x320
 800544a:	f7ff fe77 	bl	800513c <TSK_SetStopPermanencyTimeM1>
  Mci[motor].State = STOP;
 800544e:	2308      	movs	r3, #8
 8005450:	77e3      	strb	r3, [r4, #31]
}
 8005452:	e698      	b.n	8005186 <TSK_MediumFrequencyTaskM1+0x2a>
 8005454:	200006a8 	.word	0x200006a8
 8005458:	20000004 	.word	0x20000004
 800545c:	20000d30 	.word	0x20000d30
 8005460:	200000cc 	.word	0x200000cc
 8005464:	20000010 	.word	0x20000010
 8005468:	20000d7c 	.word	0x20000d7c
 800546c:	200007d0 	.word	0x200007d0
 8005470:	20000d78 	.word	0x20000d78
 8005474:	200009e8 	.word	0x200009e8
 8005478:	20000014 	.word	0x20000014
 800547c:	200008ac 	.word	0x200008ac
 8005480:	20000d74 	.word	0x20000d74
              (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 8005484:	4629      	mov	r1, r5
              pwmcHandle[M1]->OffCalibrWaitTimeCounter = 1u;
 8005486:	f8a0 5060 	strh.w	r5, [r0, #96]	@ 0x60
              (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 800548a:	f000 fc9f 	bl	8005dcc <PWMC_CurrentReadingCalibr>
              R3_1_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 800548e:	6830      	ldr	r0, [r6, #0]
 8005490:	2100      	movs	r1, #0
 8005492:	f004 fc79 	bl	8009d88 <R3_1_TurnOnLowSides>
              TSK_SetChargeBootCapDelayM1(M1_CHARGE_BOOT_CAP_TICKS);
 8005496:	2014      	movs	r0, #20
 8005498:	f7ff fe40 	bl	800511c <TSK_SetChargeBootCapDelayM1>
 800549c:	2310      	movs	r3, #16
 800549e:	e77e      	b.n	800539e <TSK_MediumFrequencyTaskM1+0x242>
                MCI_FaultProcessing(&Mci[M1], MC_SPEED_FDBK, 0);
 80054a0:	480c      	ldr	r0, [pc, #48]	@ (80054d4 <TSK_MediumFrequencyTaskM1+0x378>)
 80054a2:	462a      	mov	r2, r5
 80054a4:	2120      	movs	r1, #32
 80054a6:	f7ff fa65 	bl	8004974 <MCI_FaultProcessing>
 80054aa:	e71e      	b.n	80052ea <TSK_MediumFrequencyTaskM1+0x18e>
              IqdRef.q = STC_CalcTorqueReference(pSTC[M1]);
 80054ac:	4b0a      	ldr	r3, [pc, #40]	@ (80054d8 <TSK_MediumFrequencyTaskM1+0x37c>)
 80054ae:	6818      	ldr	r0, [r3, #0]
 80054b0:	f005 fa76 	bl	800a9a0 <STC_CalcTorqueReference>
              IqdRef.d = FOCVars[M1].UserIdref;
 80054b4:	4b09      	ldr	r3, [pc, #36]	@ (80054dc <TSK_MediumFrequencyTaskM1+0x380>)
 80054b6:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
              FOCVars[M1].Iqdref = IqdRef;
 80054ba:	8218      	strh	r0, [r3, #16]
 80054bc:	825a      	strh	r2, [r3, #18]
 80054be:	e722      	b.n	8005306 <TSK_MediumFrequencyTaskM1+0x1aa>
                FOC_Clear(M1);
 80054c0:	2000      	movs	r0, #0
 80054c2:	f7ff fccd 	bl	8004e60 <FOC_Clear>
                PQD_Clear(pMPM[M1]);
 80054c6:	6830      	ldr	r0, [r6, #0]
 80054c8:	f004 f9fe 	bl	80098c8 <PQD_Clear>
                Mci[M1].DirectCommand = MCI_NO_COMMAND;
 80054cc:	2300      	movs	r3, #0
 80054ce:	83e3      	strh	r3, [r4, #30]
 80054d0:	e659      	b.n	8005186 <TSK_MediumFrequencyTaskM1+0x2a>
 80054d2:	bf00      	nop
 80054d4:	20000d30 	.word	0x20000d30
 80054d8:	20000010 	.word	0x20000010
 80054dc:	20000d7c 	.word	0x20000d7c

080054e0 <MC_Scheduler>:
  if (((uint8_t)1) == bMCBootCompleted)
 80054e0:	4b1d      	ldr	r3, [pc, #116]	@ (8005558 <MC_Scheduler+0x78>)
 80054e2:	781b      	ldrb	r3, [r3, #0]
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d000      	beq.n	80054ea <MC_Scheduler+0xa>
 80054e8:	4770      	bx	lr
{
 80054ea:	b570      	push	{r4, r5, r6, lr}
    if(hMFTaskCounterM1 > 0u)
 80054ec:	4c1b      	ldr	r4, [pc, #108]	@ (800555c <MC_Scheduler+0x7c>)
 80054ee:	8823      	ldrh	r3, [r4, #0]
 80054f0:	b19b      	cbz	r3, 800551a <MC_Scheduler+0x3a>
      hMFTaskCounterM1--;
 80054f2:	3b01      	subs	r3, #1
 80054f4:	b29b      	uxth	r3, r3
    if(hBootCapDelayCounterM1 > 0U)
 80054f6:	4a1a      	ldr	r2, [pc, #104]	@ (8005560 <MC_Scheduler+0x80>)
      hMFTaskCounterM1--;
 80054f8:	8023      	strh	r3, [r4, #0]
    if(hBootCapDelayCounterM1 > 0U)
 80054fa:	8813      	ldrh	r3, [r2, #0]
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	b11b      	cbz	r3, 8005508 <MC_Scheduler+0x28>
      hBootCapDelayCounterM1--;
 8005500:	8813      	ldrh	r3, [r2, #0]
 8005502:	3b01      	subs	r3, #1
 8005504:	b29b      	uxth	r3, r3
 8005506:	8013      	strh	r3, [r2, #0]
    if(hStopPermanencyCounterM1 > 0U)
 8005508:	4a16      	ldr	r2, [pc, #88]	@ (8005564 <MC_Scheduler+0x84>)
 800550a:	8813      	ldrh	r3, [r2, #0]
 800550c:	b29b      	uxth	r3, r3
 800550e:	b11b      	cbz	r3, 8005518 <MC_Scheduler+0x38>
      hStopPermanencyCounterM1--;
 8005510:	8813      	ldrh	r3, [r2, #0]
 8005512:	3b01      	subs	r3, #1
 8005514:	b29b      	uxth	r3, r3
 8005516:	8013      	strh	r3, [r2, #0]
}
 8005518:	bd70      	pop	{r4, r5, r6, pc}
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess(MCP_Over_UartA.pTransportLayer,
 800551a:	4d13      	ldr	r5, [pc, #76]	@ (8005568 <MC_Scheduler+0x88>)
      TSK_MediumFrequencyTaskM1();
 800551c:	f7ff fe1e 	bl	800515c <TSK_MediumFrequencyTaskM1>
      MC_APP_PostMediumFrequencyHook_M1();
 8005520:	f7ff f9f8 	bl	8004914 <MC_APP_PostMediumFrequencyHook_M1>
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess(MCP_Over_UartA.pTransportLayer,
 8005524:	4629      	mov	r1, r5
 8005526:	f851 0b0c 	ldr.w	r0, [r1], #12
 800552a:	6883      	ldr	r3, [r0, #8]
 800552c:	4798      	blx	r3
 800552e:	6068      	str	r0, [r5, #4]
      if ( 0U == MCP_Over_UartA.rxBuffer)
 8005530:	b130      	cbz	r0, 8005540 <MC_Scheduler+0x60>
        if (0U == MCP_Over_UartA.pTransportLayer->fGetBuffer(MCP_Over_UartA.pTransportLayer,
 8005532:	4629      	mov	r1, r5
 8005534:	220a      	movs	r2, #10
 8005536:	f851 0b08 	ldr.w	r0, [r1], #8
 800553a:	6803      	ldr	r3, [r0, #0]
 800553c:	4798      	blx	r3
 800553e:	b908      	cbnz	r0, 8005544 <MC_Scheduler+0x64>
{
 8005540:	2301      	movs	r3, #1
 8005542:	e7d8      	b.n	80054f6 <MC_Scheduler+0x16>
          MCP_ReceivedPacket(&MCP_Over_UartA);
 8005544:	4628      	mov	r0, r5
 8005546:	f000 f9e5 	bl	8005914 <MCP_ReceivedPacket>
          MCP_Over_UartA.pTransportLayer->fSendPacket(MCP_Over_UartA.pTransportLayer, MCP_Over_UartA.txBuffer,
 800554a:	6828      	ldr	r0, [r5, #0]
 800554c:	89ea      	ldrh	r2, [r5, #14]
 800554e:	6846      	ldr	r6, [r0, #4]
 8005550:	68a9      	ldr	r1, [r5, #8]
 8005552:	230a      	movs	r3, #10
 8005554:	47b0      	blx	r6
 8005556:	e7f3      	b.n	8005540 <MC_Scheduler+0x60>
 8005558:	20000d6c 	.word	0x20000d6c
 800555c:	20000d72 	.word	0x20000d72
 8005560:	20000d70 	.word	0x20000d70
 8005564:	20000d6e 	.word	0x20000d6e
 8005568:	20000ac4 	.word	0x20000ac4

0800556c <TSK_HighFrequencyTask>:
  * @brief  Motor control profiler HF task
  * @param  None
  * @retval uint8_t It return always 0.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 800556c:	b510      	push	{r4, lr}
  ab_t Iab;

  if (SWITCH_OVER == Mci[M1].State)
 800556e:	4b0f      	ldr	r3, [pc, #60]	@ (80055ac <TSK_HighFrequencyTask+0x40>)
 8005570:	7fdb      	ldrb	r3, [r3, #31]
 8005572:	2b13      	cmp	r3, #19
{
 8005574:	b082      	sub	sp, #8
  if (SWITCH_OVER == Mci[M1].State)
 8005576:	d00d      	beq.n	8005594 <TSK_HighFrequencyTask+0x28>
 8005578:	4c0d      	ldr	r4, [pc, #52]	@ (80055b0 <TSK_HighFrequencyTask+0x44>)
  }
  /* The generic function needs to be called here as the undelying
   * implementation changes in time depending on the Profiler's state
   * machine. Calling the generic function ensures that the correct
   * implementation is invoked */
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 800557a:	4b0e      	ldr	r3, [pc, #56]	@ (80055b4 <TSK_HighFrequencyTask+0x48>)
 800557c:	a901      	add	r1, sp, #4
 800557e:	6818      	ldr	r0, [r3, #0]
 8005580:	f000 faa4 	bl	8005acc <PWMC_GetPhaseCurrents>
  FOCVars[M1].Iab = Iab;
 8005584:	9b01      	ldr	r3, [sp, #4]
  SCC_SetPhaseVoltage(&SCC);
 8005586:	480c      	ldr	r0, [pc, #48]	@ (80055b8 <TSK_HighFrequencyTask+0x4c>)
  FOCVars[M1].Iab = Iab;
 8005588:	6023      	str	r3, [r4, #0]
  SCC_SetPhaseVoltage(&SCC);
 800558a:	f7fb fd0f 	bl	8000fac <SCC_SetPhaseVoltage>

  return (0); /* Single motor only */
}
 800558e:	2000      	movs	r0, #0
 8005590:	b002      	add	sp, #8
 8005592:	bd10      	pop	{r4, pc}
    if (!REMNG_RampCompleted(pREMNG[M1]))
 8005594:	4c09      	ldr	r4, [pc, #36]	@ (80055bc <TSK_HighFrequencyTask+0x50>)
 8005596:	6820      	ldr	r0, [r4, #0]
 8005598:	f004 ffc8 	bl	800a52c <REMNG_RampCompleted>
 800559c:	2800      	cmp	r0, #0
 800559e:	d1eb      	bne.n	8005578 <TSK_HighFrequencyTask+0xc>
      FOCVars[M1].Iqdref.q = (int16_t)REMNG_Calc(pREMNG[M1]);
 80055a0:	6820      	ldr	r0, [r4, #0]
 80055a2:	4c03      	ldr	r4, [pc, #12]	@ (80055b0 <TSK_HighFrequencyTask+0x44>)
 80055a4:	f004 ffa0 	bl	800a4e8 <REMNG_Calc>
 80055a8:	8220      	strh	r0, [r4, #16]
 80055aa:	e7e6      	b.n	800557a <TSK_HighFrequencyTask+0xe>
 80055ac:	20000d30 	.word	0x20000d30
 80055b0:	20000d7c 	.word	0x20000d7c
 80055b4:	20000d78 	.word	0x20000d78
 80055b8:	200000cc 	.word	0x200000cc
 80055bc:	20000d74 	.word	0x20000d74

080055c0 <TSK_SafetyTask_PWMOFF>:
  * @brief  Safety task implementation if  MC.M1_ON_OVER_VOLTAGE == TURN_OFF_PWM.
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink.
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 80055c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */
  uint16_t CodeReturn = MC_NO_ERROR;
  const uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};
  /* Check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
  CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[bMotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 80055c2:	4f1f      	ldr	r7, [pc, #124]	@ (8005640 <TSK_SafetyTask_PWMOFF+0x80>)
{
 80055c4:	4604      	mov	r4, r0
  CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[bMotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 80055c6:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 80055ca:	f000 fc27 	bl	8005e1c <PWMC_IsFaultOccurred>
 80055ce:	4605      	mov	r5, r0
                                                    (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  if (M1 == bMotor)
 80055d0:	b17c      	cbz	r4, 80055f2 <TSK_SafetyTask_PWMOFF+0x32>
  }
  else
  {
    /* Nothing to do */
  }
  MCI_FaultProcessing(&Mci[bMotor], CodeReturn, ~CodeReturn); /* Process faults */
 80055d2:	4e1c      	ldr	r6, [pc, #112]	@ (8005644 <TSK_SafetyTask_PWMOFF+0x84>)
 80055d4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80055d8:	eb06 06c3 	add.w	r6, r6, r3, lsl #3
 80055dc:	43ea      	mvns	r2, r5
 80055de:	4630      	mov	r0, r6
 80055e0:	b292      	uxth	r2, r2
 80055e2:	4629      	mov	r1, r5
 80055e4:	f7ff f9c6 	bl	8004974 <MCI_FaultProcessing>

  if (MCI_GetFaultState(&Mci[bMotor]) != (uint32_t)MC_NO_FAULTS)
 80055e8:	4630      	mov	r0, r6
 80055ea:	f7ff fa6f 	bl	8004acc <MCI_GetFaultState>
 80055ee:	b960      	cbnz	r0, 800560a <TSK_SafetyTask_PWMOFF+0x4a>
    /* No errors */
  }
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 80055f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    uint16_t rawValueM1 =  RCM_ExecRegularConv(&VbusRegConv_M1);
 80055f2:	4815      	ldr	r0, [pc, #84]	@ (8005648 <TSK_SafetyTask_PWMOFF+0x88>)
 80055f4:	f002 f814 	bl	8007620 <RCM_ExecRegularConv>
 80055f8:	4601      	mov	r1, r0
    CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(&BusVoltageSensor_M1, rawValueM1);
 80055fa:	4814      	ldr	r0, [pc, #80]	@ (800564c <TSK_SafetyTask_PWMOFF+0x8c>)
 80055fc:	f004 ff3e 	bl	800a47c <RVBS_CalcAvVbus>
 8005600:	f020 0008 	bic.w	r0, r0, #8
 8005604:	4328      	orrs	r0, r5
 8005606:	b285      	uxth	r5, r0
 8005608:	e7e3      	b.n	80055d2 <TSK_SafetyTask_PWMOFF+0x12>
      SCC_Stop(&SCC);
 800560a:	4811      	ldr	r0, [pc, #68]	@ (8005650 <TSK_SafetyTask_PWMOFF+0x90>)
 800560c:	f7fb fbe8 	bl	8000de0 <SCC_Stop>
      OTT_Stop(&OTT);
 8005610:	4810      	ldr	r0, [pc, #64]	@ (8005654 <TSK_SafetyTask_PWMOFF+0x94>)
 8005612:	f7fa fe8a 	bl	800032a <OTT_Stop>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8005616:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
 800561a:	f000 fbd3 	bl	8005dc4 <PWMC_SwitchOffPWM>
    if (MCPA_UART_A.Mark != 0U)
 800561e:	480e      	ldr	r0, [pc, #56]	@ (8005658 <TSK_SafetyTask_PWMOFF+0x98>)
 8005620:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
 8005624:	b94b      	cbnz	r3, 800563a <TSK_SafetyTask_PWMOFF+0x7a>
    FOC_Clear(bMotor);
 8005626:	4620      	mov	r0, r4
 8005628:	f7ff fc1a 	bl	8004e60 <FOC_Clear>
    PQD_Clear(pMPM[bMotor]); //cstat !MISRAC2012-Rule-11.3
 800562c:	4b0b      	ldr	r3, [pc, #44]	@ (800565c <TSK_SafetyTask_PWMOFF+0x9c>)
 800562e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
 8005632:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    PQD_Clear(pMPM[bMotor]); //cstat !MISRAC2012-Rule-11.3
 8005636:	f004 b947 	b.w	80098c8 <PQD_Clear>
      MCPA_flushDataLog (&MCPA_UART_A);
 800563a:	f003 ffd3 	bl	80095e4 <MCPA_flushDataLog>
 800563e:	e7f2      	b.n	8005626 <TSK_SafetyTask_PWMOFF+0x66>
 8005640:	20000d78 	.word	0x20000d78
 8005644:	20000d30 	.word	0x20000d30
 8005648:	20000668 	.word	0x20000668
 800564c:	2000064c 	.word	0x2000064c
 8005650:	200000cc 	.word	0x200000cc
 8005654:	20000014 	.word	0x20000014
 8005658:	20000a98 	.word	0x20000a98
 800565c:	20000004 	.word	0x20000004

08005660 <TSK_SafetyTask>:
{
 8005660:	b508      	push	{r3, lr}
  if (1U == bMCBootCompleted)
 8005662:	4b07      	ldr	r3, [pc, #28]	@ (8005680 <TSK_SafetyTask+0x20>)
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	2b01      	cmp	r3, #1
 8005668:	d000      	beq.n	800566c <TSK_SafetyTask+0xc>
}
 800566a:	bd08      	pop	{r3, pc}
    SCC_CheckOC_RL(&SCC);
 800566c:	4805      	ldr	r0, [pc, #20]	@ (8005684 <TSK_SafetyTask+0x24>)
 800566e:	f7fb fbc9 	bl	8000e04 <SCC_CheckOC_RL>
    TSK_SafetyTask_PWMOFF(M1);
 8005672:	2000      	movs	r0, #0
 8005674:	f7ff ffa4 	bl	80055c0 <TSK_SafetyTask_PWMOFF>
}
 8005678:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCM_ExecUserConv();
 800567c:	f002 b808 	b.w	8007690 <RCM_ExecUserConv>
 8005680:	20000d6c 	.word	0x20000d6c
 8005684:	200000cc 	.word	0x200000cc

08005688 <MC_RunMotorControlTasks>:
{
 8005688:	b508      	push	{r3, lr}
  if (0U == bMCBootCompleted)
 800568a:	4b04      	ldr	r3, [pc, #16]	@ (800569c <MC_RunMotorControlTasks+0x14>)
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	b903      	cbnz	r3, 8005692 <MC_RunMotorControlTasks+0xa>
}
 8005690:	bd08      	pop	{r3, pc}
    MC_Scheduler();
 8005692:	f7ff ff25 	bl	80054e0 <MC_Scheduler>
    TSK_SafetyTask();
 8005696:	f7ff ffe3 	bl	8005660 <TSK_SafetyTask>
}
 800569a:	bd08      	pop	{r3, pc}
 800569c:	20000d6c 	.word	0x20000d6c

080056a0 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 80056a0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */
  SCC_Stop(&SCC);
 80056a2:	4808      	ldr	r0, [pc, #32]	@ (80056c4 <TSK_HardwareFaultTask+0x24>)
 80056a4:	f7fb fb9c 	bl	8000de0 <SCC_Stop>
  OTT_Stop(&OTT);
 80056a8:	4807      	ldr	r0, [pc, #28]	@ (80056c8 <TSK_HardwareFaultTask+0x28>)
 80056aa:	f7fa fe3e 	bl	800032a <OTT_Stop>
  R3_1_SwitchOffPWM(pwmcHandle[M1]);
 80056ae:	4b07      	ldr	r3, [pc, #28]	@ (80056cc <TSK_HardwareFaultTask+0x2c>)
 80056b0:	6818      	ldr	r0, [r3, #0]
 80056b2:	f004 fabb 	bl	8009c2c <R3_1_SwitchOffPWM>
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);

  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 80056b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);
 80056ba:	4805      	ldr	r0, [pc, #20]	@ (80056d0 <TSK_HardwareFaultTask+0x30>)
 80056bc:	2200      	movs	r2, #0
 80056be:	2180      	movs	r1, #128	@ 0x80
 80056c0:	f7ff b958 	b.w	8004974 <MCI_FaultProcessing>
 80056c4:	200000cc 	.word	0x200000cc
 80056c8:	20000014 	.word	0x20000014
 80056cc:	20000d78 	.word	0x20000d78
 80056d0:	20000d30 	.word	0x20000d30

080056d4 <mc_lock_pins>:

 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration.
  */
__weak void mc_lock_pins (void)
{
 80056d4:	b430      	push	{r4, r5}
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80056d6:	4b31      	ldr	r3, [pc, #196]	@ (800579c <mc_lock_pins+0xc8>)
 80056d8:	4a31      	ldr	r2, [pc, #196]	@ (80057a0 <mc_lock_pins+0xcc>)
 80056da:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80056dc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80056e0:	61d9      	str	r1, [r3, #28]
 80056e2:	b08a      	sub	sp, #40	@ 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80056e4:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80056e6:	69da      	ldr	r2, [r3, #28]
 80056e8:	9209      	str	r2, [sp, #36]	@ 0x24
  WRITE_REG(GPIOx->LCKR, PinMask);
 80056ea:	f44f 7100 	mov.w	r1, #512	@ 0x200
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80056ee:	f44f 3281 	mov.w	r2, #66048	@ 0x10200
  (void) temp;
 80056f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80056f4:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80056f6:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80056f8:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80056fa:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
  temp = READ_REG(GPIOx->LCKR);
 80056fe:	69d9      	ldr	r1, [r3, #28]
 8005700:	9108      	str	r1, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8005702:	f502 3281 	add.w	r2, r2, #66048	@ 0x10200
 8005706:	f44f 31a0 	mov.w	r1, #81920	@ 0x14000
  WRITE_REG(GPIOx->LCKR, PinMask);
 800570a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
  (void) temp;
 800570e:	9c08      	ldr	r4, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8005710:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8005712:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8005714:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8005716:	69d1      	ldr	r1, [r2, #28]
 8005718:	9107      	str	r1, [sp, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800571a:	f44f 6080 	mov.w	r0, #1024	@ 0x400
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800571e:	f44f 3182 	mov.w	r1, #66560	@ 0x10400
  (void) temp;
 8005722:	9c07      	ldr	r4, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8005724:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8005726:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8005728:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800572a:	69d9      	ldr	r1, [r3, #28]
 800572c:	9106      	str	r1, [sp, #24]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800572e:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8005732:	f44f 31c0 	mov.w	r1, #98304	@ 0x18000
  (void) temp;
 8005736:	9c06      	ldr	r4, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8005738:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800573a:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800573c:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 800573e:	69d1      	ldr	r1, [r2, #28]
 8005740:	9105      	str	r1, [sp, #20]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8005742:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8005746:	f44f 3190 	mov.w	r1, #73728	@ 0x12000
  (void) temp;
 800574a:	9c05      	ldr	r4, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800574c:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800574e:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8005750:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8005752:	69d2      	ldr	r2, [r2, #28]
 8005754:	9204      	str	r2, [sp, #16]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8005756:	2001      	movs	r0, #1
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8005758:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
  (void) temp;
 800575c:	9904      	ldr	r1, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800575e:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8005760:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8005762:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8005764:	69d9      	ldr	r1, [r3, #28]
 8005766:	9103      	str	r1, [sp, #12]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8005768:	2402      	movs	r4, #2
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800576a:	490e      	ldr	r1, [pc, #56]	@ (80057a4 <mc_lock_pins+0xd0>)
  (void) temp;
 800576c:	9d03      	ldr	r5, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800576e:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8005770:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8005772:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8005774:	69db      	ldr	r3, [r3, #28]
 8005776:	9302      	str	r3, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8005778:	4b0b      	ldr	r3, [pc, #44]	@ (80057a8 <mc_lock_pins+0xd4>)
  (void) temp;
 800577a:	9d02      	ldr	r5, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800577c:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800577e:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8005780:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8005782:	69d9      	ldr	r1, [r3, #28]
 8005784:	9101      	str	r1, [sp, #4]
  (void) temp;
 8005786:	9901      	ldr	r1, [sp, #4]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8005788:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800578a:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800578c:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800578e:	69db      	ldr	r3, [r3, #28]
 8005790:	9300      	str	r3, [sp, #0]
  (void) temp;
 8005792:	9b00      	ldr	r3, [sp, #0]
LL_GPIO_LockPin(M1_PWM_UL_GPIO_Port, M1_PWM_UL_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_U_GPIO_Port, M1_CURR_AMPL_U_Pin);
LL_GPIO_LockPin(M1_BUS_VOLTAGE_GPIO_Port, M1_BUS_VOLTAGE_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_V_GPIO_Port, M1_CURR_AMPL_V_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_W_GPIO_Port, M1_CURR_AMPL_W_Pin);
}
 8005794:	b00a      	add	sp, #40	@ 0x28
 8005796:	bc30      	pop	{r4, r5}
 8005798:	4770      	bx	lr
 800579a:	bf00      	nop
 800579c:	40020000 	.word	0x40020000
 80057a0:	00010100 	.word	0x00010100
 80057a4:	00010002 	.word	0x00010002
 80057a8:	40020800 	.word	0x40020800

080057ac <RI_SetRegCommandParser>:
  * @param  txSyncFreeSpace Space available for synchronous transmission
  *
  * @retval Returns #MCP_CMD_OK if the command is acknowledged and #MCP_CMD_NOK if not.
  */
uint8_t RI_SetRegCommandParser (MCP_Handle_t * pHandle, uint16_t txSyncFreeSpace)
{
 80057ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  {
#endif
    uint16_t * dataElementID;
    uint8_t * rxData = pHandle->rxBuffer;
    uint8_t * txData = pHandle->txBuffer;
    int16_t rxLength = pHandle->rxLength;
 80057b0:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
    uint8_t accessResult;

    uint16_t regID;
    uint8_t typeID;
    uint8_t motorID;
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 80057b4:	4b31      	ldr	r3, [pc, #196]	@ (800587c <RI_SetRegCommandParser+0xd0>)
{
 80057b6:	b089      	sub	sp, #36	@ 0x24
    uint16_t size = 0U;
 80057b8:	f04f 0900 	mov.w	r9, #0
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 80057bc:	9306      	str	r3, [sp, #24]
    uint8_t number_of_item =0;
    pHandle->txLength = 0;

    while (rxLength > 0)
 80057be:	454c      	cmp	r4, r9
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 80057c0:	4b2f      	ldr	r3, [pc, #188]	@ (8005880 <RI_SetRegCommandParser+0xd4>)
    uint16_t size = 0U;
 80057c2:	f8ad 9016 	strh.w	r9, [sp, #22]
    uint8_t * txData = pHandle->txBuffer;
 80057c6:	e9d0 c601 	ldrd	ip, r6, [r0, #4]
{
 80057ca:	4607      	mov	r7, r0
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 80057cc:	9307      	str	r3, [sp, #28]
    pHandle->txLength = 0;
 80057ce:	f8a0 900e 	strh.w	r9, [r0, #14]
    while (rxLength > 0)
 80057d2:	dd47      	ble.n	8005864 <RI_SetRegCommandParser+0xb8>
 80057d4:	eb06 0801 	add.w	r8, r6, r1
  uint8_t retVal = MCP_CMD_OK;
 80057d8:	f8cd 900c 	str.w	r9, [sp, #12]
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
        /* Prepare next data*/
        rxLength = (int16_t) (rxLength - size);
        rxData = rxData+size;
        /* If there is only one CMD in the buffer, we do not store the result */
        if ((1U == number_of_item) && (0 == rxLength))
 80057dc:	f1c6 0a01 	rsb	sl, r6, #1
      rxData = rxData+MCP_ID_SIZE; // Shift buffer to the next data
 80057e0:	f10c 0502 	add.w	r5, ip, #2
      regID = *dataElementID & REG_MASK;
 80057e4:	f8bc c000 	ldrh.w	ip, [ip]
      typeID = (uint8_t)*dataElementID & TYPE_MASK;
 80057e8:	fa5f f18c 	uxtb.w	r1, ip
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 80057ec:	3c02      	subs	r4, #2
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 80057ee:	f001 0b07 	and.w	fp, r1, #7
 80057f2:	f10d 0920 	add.w	r9, sp, #32
      if (motorID > NBR_OF_MOTORS)
 80057f6:	f01c 0f06 	tst.w	ip, #6
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 80057fa:	fa0f fe84 	sxth.w	lr, r4
 80057fe:	f10d 0316 	add.w	r3, sp, #22
 8005802:	462a      	mov	r2, r5
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8005804:	b2a4      	uxth	r4, r4
      regID = *dataElementID & REG_MASK;
 8005806:	f02c 0007 	bic.w	r0, ip, #7
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 800580a:	eb09 0b8b 	add.w	fp, r9, fp, lsl #2
 800580e:	f001 0138 	and.w	r1, r1, #56	@ 0x38
      if (motorID > NBR_OF_MOTORS)
 8005812:	d11b      	bne.n	800584c <RI_SetRegCommandParser+0xa0>
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 8005814:	f8cd e000 	str.w	lr, [sp]
 8005818:	f85b bc08 	ldr.w	fp, [fp, #-8]
 800581c:	47d8      	blx	fp
        rxLength = (int16_t) (rxLength - size);
 800581e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
        if ((1U == number_of_item) && (0 == rxLength))
 8005822:	eb06 030a 	add.w	r3, r6, sl
 8005826:	b2db      	uxtb	r3, r3
        rxLength = (int16_t) (rxLength - size);
 8005828:	1aa4      	subs	r4, r4, r2
        if ((1U == number_of_item) && (0 == rxLength))
 800582a:	2b01      	cmp	r3, #1
        rxLength = (int16_t) (rxLength - size);
 800582c:	b224      	sxth	r4, r4
        rxData = rxData+size;
 800582e:	eb05 0c02 	add.w	ip, r5, r2
        if ((1U == number_of_item) && (0 == rxLength))
 8005832:	d013      	beq.n	800585c <RI_SetRegCommandParser+0xb0>
        {
          retVal = accessResult;
        }
        else
        {/* Store the result for each access to be able to report failing access */
          if (txSyncFreeSpace !=0 )
 8005834:	4546      	cmp	r6, r8
 8005836:	d00d      	beq.n	8005854 <RI_SetRegCommandParser+0xa8>
          {
            *txData = accessResult;
 8005838:	f806 0b01 	strb.w	r0, [r6], #1
            txData = txData+1;
            pHandle->txLength++;
 800583c:	89fb      	ldrh	r3, [r7, #14]
 800583e:	3301      	adds	r3, #1
 8005840:	81fb      	strh	r3, [r7, #14]
            txSyncFreeSpace--; /* decrement one by one no wraparound possible */
            retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 8005842:	b1a0      	cbz	r0, 800586e <RI_SetRegCommandParser+0xc2>
            if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FORMAT))
 8005844:	2807      	cmp	r0, #7
 8005846:	d001      	beq.n	800584c <RI_SetRegCommandParser+0xa0>
 8005848:	280a      	cmp	r0, #10
 800584a:	d10e      	bne.n	800586a <RI_SetRegCommandParser+0xbe>
        retVal = MCP_CMD_NOK;
 800584c:	2001      	movs	r0, #1
    }
  #ifdef NULL_PTR_CHECK_REG_INT
  }
#endif
  return (retVal);
}
 800584e:	b009      	add	sp, #36	@ 0x24
 8005850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8005854:	2008      	movs	r0, #8
}
 8005856:	b009      	add	sp, #36	@ 0x24
 8005858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((1U == number_of_item) && (0 == rxLength))
 800585c:	2c00      	cmp	r4, #0
 800585e:	d1e9      	bne.n	8005834 <RI_SetRegCommandParser+0x88>
    if (MCP_CMD_OK == retVal)
 8005860:	2800      	cmp	r0, #0
 8005862:	d1f4      	bne.n	800584e <RI_SetRegCommandParser+0xa2>
      pHandle->txLength = 0;
 8005864:	2000      	movs	r0, #0
 8005866:	81f8      	strh	r0, [r7, #14]
 8005868:	e7f1      	b.n	800584e <RI_SetRegCommandParser+0xa2>
            retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 800586a:	2301      	movs	r3, #1
 800586c:	9303      	str	r3, [sp, #12]
    while (rxLength > 0)
 800586e:	2c00      	cmp	r4, #0
 8005870:	dcb6      	bgt.n	80057e0 <RI_SetRegCommandParser+0x34>
 8005872:	9803      	ldr	r0, [sp, #12]
    if (MCP_CMD_OK == retVal)
 8005874:	2800      	cmp	r0, #0
 8005876:	d0f5      	beq.n	8005864 <RI_SetRegCommandParser+0xb8>
 8005878:	e7e9      	b.n	800584e <RI_SetRegCommandParser+0xa2>
 800587a:	bf00      	nop
 800587c:	08005e65 	.word	0x08005e65
 8005880:	08005f69 	.word	0x08005f69

08005884 <RI_GetRegCommandParser>:
  * @param  txSyncFreeSpace Space available for synchronous transmission
  *
  * @retval Returns #MCP_CMD_OK if the command is acknowledged and #MCP_CMD_NOK if not.
  */
uint8_t RI_GetRegCommandParser (MCP_Handle_t * pHandle, uint16_t txSyncFreeSpace)
{
 8005884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005888:	b086      	sub	sp, #24
  {
#endif
    uint16_t * dataElementID;
    uint8_t * rxData = pHandle->rxBuffer;
    uint8_t * txData = pHandle->txBuffer;
    uint16_t size = 0U;
 800588a:	2300      	movs	r3, #0
 800588c:	f8ad 300e 	strh.w	r3, [sp, #14]

    uint16_t regID;
    uint8_t typeID;
    uint8_t motorID;
    uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_GetRegisterGlobal, &RI_GetRegisterMotor1};
    pHandle->txLength = 0;
 8005890:	81c3      	strh	r3, [r0, #14]
    uint16_t rxLength = pHandle->rxLength;
 8005892:	f8b0 800c 	ldrh.w	r8, [r0, #12]
    uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_GetRegisterGlobal, &RI_GetRegisterMotor1};
 8005896:	4b1d      	ldr	r3, [pc, #116]	@ (800590c <RI_GetRegCommandParser+0x88>)
 8005898:	9304      	str	r3, [sp, #16]
 800589a:	4b1d      	ldr	r3, [pc, #116]	@ (8005910 <RI_GetRegCommandParser+0x8c>)
    uint8_t * rxData = pHandle->rxBuffer;
 800589c:	f8d0 9004 	ldr.w	r9, [r0, #4]
    uint8_t * txData = pHandle->txBuffer;
 80058a0:	6886      	ldr	r6, [r0, #8]
    uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_GetRegisterGlobal, &RI_GetRegisterMotor1};
 80058a2:	9305      	str	r3, [sp, #20]
    while (rxLength > 0U)
 80058a4:	f1b8 0f00 	cmp.w	r8, #0
 80058a8:	d016      	beq.n	80058d8 <RI_GetRegCommandParser+0x54>
 80058aa:	4607      	mov	r7, r0
 80058ac:	b20d      	sxth	r5, r1
    uint8_t * rxData = pHandle->rxBuffer;
 80058ae:	464c      	mov	r4, r9
    {
      dataElementID = (uint16_t *) rxData;
      rxLength = rxLength - MCP_ID_SIZE;
      rxData = rxData + MCP_ID_SIZE; // Shift buffer to the next MCP_ID

      regID = *dataElementID & REG_MASK;
 80058b0:	f834 cb02 	ldrh.w	ip, [r4], #2
      typeID = (uint8_t)*dataElementID & TYPE_MASK;
 80058b4:	fa5f f18c 	uxtb.w	r1, ip
        retVal = MCP_CMD_NOK;
        rxLength = 0;
      }
      else
      {
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 80058b8:	f001 0e07 	and.w	lr, r1, #7
 80058bc:	f10d 0a18 	add.w	sl, sp, #24
      if (motorID > NBR_OF_MOTORS)
 80058c0:	f01c 0f06 	tst.w	ip, #6
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 80058c4:	4632      	mov	r2, r6
      regID = *dataElementID & REG_MASK;
 80058c6:	f02c 0007 	bic.w	r0, ip, #7
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 80058ca:	f10d 030e 	add.w	r3, sp, #14
 80058ce:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 80058d2:	f001 0138 	and.w	r1, r1, #56	@ 0x38
      if (motorID > NBR_OF_MOTORS)
 80058d6:	d003      	beq.n	80058e0 <RI_GetRegCommandParser+0x5c>
        retVal = MCP_CMD_NOK;
 80058d8:	2001      	movs	r0, #1
    }
#ifdef NULL_PTR_CHECK_REG_INT
  }
#endif
  return (retVal);
}
 80058da:	b006      	add	sp, #24
 80058dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 80058e0:	9500      	str	r5, [sp, #0]
 80058e2:	f85e ac08 	ldr.w	sl, [lr, #-8]
 80058e6:	47d0      	blx	sl
        if (retVal == MCP_CMD_OK )
 80058e8:	eba8 0304 	sub.w	r3, r8, r4
    while (rxLength > 0U)
 80058ec:	fa19 f383 	uxtah	r3, r9, r3
 80058f0:	b29b      	uxth	r3, r3
        if (retVal == MCP_CMD_OK )
 80058f2:	2800      	cmp	r0, #0
 80058f4:	d1f1      	bne.n	80058da <RI_GetRegCommandParser+0x56>
          txData = txData+size;
 80058f6:	f8bd 100e 	ldrh.w	r1, [sp, #14]
          pHandle->txLength += size;
 80058fa:	89fa      	ldrh	r2, [r7, #14]
          freeSpaceS16 = freeSpaceS16-size;
 80058fc:	1a6d      	subs	r5, r5, r1
          pHandle->txLength += size;
 80058fe:	440a      	add	r2, r1
          txData = txData+size;
 8005900:	440e      	add	r6, r1
          pHandle->txLength += size;
 8005902:	81fa      	strh	r2, [r7, #14]
          freeSpaceS16 = freeSpaceS16-size;
 8005904:	b22d      	sxth	r5, r5
    while (rxLength > 0U)
 8005906:	2b00      	cmp	r3, #0
 8005908:	d1d2      	bne.n	80058b0 <RI_GetRegCommandParser+0x2c>
 800590a:	e7e6      	b.n	80058da <RI_GetRegCommandParser+0x56>
 800590c:	0800675d 	.word	0x0800675d
 8005910:	08006891 	.word	0x08006891

08005914 <MCP_ReceivedPacket>:
  * @brief  Parses the header from the received packet and call the required function depending on the command sent by the controller device.
  *
  * @param  pHandle Handler of the current instance of the MCP component
  */
void MCP_ReceivedPacket(MCP_Handle_t *pHandle)
{
 8005914:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005916:	4604      	mov	r4, r0
  }
  else /* Length is 0, this is a request to send back the last packet */
  {
#endif
    packetHeader = (uint16_t *)pHandle->rxBuffer; //cstat !MISRAC2012-Rule-11.3
    command = (uint16_t)(*packetHeader & CMD_MASK);
 8005918:	6846      	ldr	r6, [r0, #4]
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;

    /* Commands requiering payload response must be aware of space available for the payload */
    /* Last byte is reserved for MCP response*/
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 800591a:	6822      	ldr	r2, [r4, #0]
    command = (uint16_t)(*packetHeader & CMD_MASK);
 800591c:	f836 3b02 	ldrh.w	r3, [r6], #2
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8005920:	8980      	ldrh	r0, [r0, #12]
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8005922:	8992      	ldrh	r2, [r2, #12]
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 8005924:	f403 457f 	and.w	r5, r3, #65280	@ 0xff00
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8005928:	3a01      	subs	r2, #1
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 800592a:	3802      	subs	r0, #2
    command = (uint16_t)(*packetHeader & CMD_MASK);
 800592c:	f023 0c07 	bic.w	ip, r3, #7
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 8005930:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8005934:	b291      	uxth	r1, r2
{
 8005936:	b083      	sub	sp, #12
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8005938:	b280      	uxth	r0, r0
    command = (uint16_t)(*packetHeader & CMD_MASK);
 800593a:	fa1f fc8c 	uxth.w	ip, ip
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 800593e:	b212      	sxth	r2, r2
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 8005940:	d045      	beq.n	80059ce <MCP_ReceivedPacket+0xba>
    motorID = (uint8_t)((*packetHeader - 1U) & MOTOR_MASK);
 8005942:	3b01      	subs	r3, #1
    MCI_Handle_t *pMCI = &Mci[motorID];
 8005944:	4f50      	ldr	r7, [pc, #320]	@ (8005a88 <MCP_ReceivedPacket+0x174>)
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8005946:	81a0      	strh	r0, [r4, #12]
    MCI_Handle_t *pMCI = &Mci[motorID];
 8005948:	f003 0307 	and.w	r3, r3, #7
 800594c:	eb03 0383 	add.w	r3, r3, r3, lsl #2

    /* Initialization of the tx length, command which send back data has to increment the txLength
     * (case of Read register) */
    pHandle->txLength = 0U;
 8005950:	2500      	movs	r5, #0

    switch (command)
 8005952:	f1bc 0f38 	cmp.w	ip, #56	@ 0x38
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 8005956:	6066      	str	r6, [r4, #4]
    MCI_Handle_t *pMCI = &Mci[motorID];
 8005958:	eb07 07c3 	add.w	r7, r7, r3, lsl #3
    pHandle->txLength = 0U;
 800595c:	81e5      	strh	r5, [r4, #14]
    switch (command)
 800595e:	d82a      	bhi.n	80059b6 <MCP_ReceivedPacket+0xa2>
 8005960:	f1bc 0f38 	cmp.w	ip, #56	@ 0x38
 8005964:	d81e      	bhi.n	80059a4 <MCP_ReceivedPacket+0x90>
 8005966:	e8df f00c 	tbb	[pc, ip]
 800596a:	1d55      	.short	0x1d55
 800596c:	1d1d1d1d 	.word	0x1d1d1d1d
 8005970:	1d5d1d1d 	.word	0x1d5d1d1d
 8005974:	1d1d1d1d 	.word	0x1d1d1d1d
 8005978:	1d621d1d 	.word	0x1d621d1d
 800597c:	1d1d1d1d 	.word	0x1d1d1d1d
 8005980:	1d671d1d 	.word	0x1d671d1d
 8005984:	1d1d1d1d 	.word	0x1d1d1d1d
 8005988:	1d411d1d 	.word	0x1d411d1d
 800598c:	1d1d1d1d 	.word	0x1d1d1d1d
 8005990:	1d471d1d 	.word	0x1d471d1d
 8005994:	1d1d1d1d 	.word	0x1d1d1d1d
 8005998:	1d3d1d1d 	.word	0x1d3d1d1d
 800599c:	1d1d1d1d 	.word	0x1d1d1d1d
 80059a0:	1d1d      	.short	0x1d1d
 80059a2:	4f          	.byte	0x4f
 80059a3:	00          	.byte	0x00
 80059a4:	2300      	movs	r3, #0
 80059a6:	2002      	movs	r0, #2
      {
        MCPResponse = MCP_CMD_UNKNOWN;
        break;
      }
    }
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80059a8:	68a2      	ldr	r2, [r4, #8]
 80059aa:	54d0      	strb	r0, [r2, r3]
    pHandle->txLength++;
 80059ac:	89e3      	ldrh	r3, [r4, #14]
 80059ae:	3301      	adds	r3, #1
 80059b0:	81e3      	strh	r3, [r4, #14]
#ifdef NULL_PTR_CHECK_MCP
  }
#endif
}
 80059b2:	b003      	add	sp, #12
 80059b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch (command)
 80059b6:	f1bc 0f68 	cmp.w	ip, #104	@ 0x68
 80059ba:	d042      	beq.n	8005a42 <MCP_ReceivedPacket+0x12e>
 80059bc:	f1bc 0f48 	cmp.w	ip, #72	@ 0x48
 80059c0:	d1f0      	bne.n	80059a4 <MCP_ReceivedPacket+0x90>
        MCI_Clear_Iqdref(pMCI);
 80059c2:	4638      	mov	r0, r7
 80059c4:	f7ff f92e 	bl	8004c24 <MCI_Clear_Iqdref>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80059c8:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 80059ca:	4628      	mov	r0, r5
        break;
 80059cc:	e7ec      	b.n	80059a8 <MCP_ReceivedPacket+0x94>
      userCommand = ((uint8_t)(command & 0xF8U) >> 3U);
 80059ce:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
    pHandle->txLength = 0U;
 80059d2:	2300      	movs	r3, #0
        if ((userCommand < MCP_USER_CALLBACK_MAX) && (MCP_UserCallBack[userCommand] != NULL))
 80059d4:	f1bc 0f01 	cmp.w	ip, #1
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 80059d8:	81a0      	strh	r0, [r4, #12]
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 80059da:	6066      	str	r6, [r4, #4]
    pHandle->txLength = 0U;
 80059dc:	81e3      	strh	r3, [r4, #14]
        if ((userCommand < MCP_USER_CALLBACK_MAX) && (MCP_UserCallBack[userCommand] != NULL))
 80059de:	d941      	bls.n	8005a64 <MCP_ReceivedPacket+0x150>
          MCPResponse = MCP_ERROR_CALLBACK_NOT_REGISTRED;
 80059e0:	200d      	movs	r0, #13
 80059e2:	e7e1      	b.n	80059a8 <MCP_ReceivedPacket+0x94>
        if (IDLE == MCI_GetSTMState(pMCI))
 80059e4:	4638      	mov	r0, r7
 80059e6:	f7ff f80d 	bl	8004a04 <MCI_GetSTMState>
 80059ea:	b398      	cbz	r0, 8005a54 <MCP_ReceivedPacket+0x140>
          (void)MCI_StopMotor(pMCI);
 80059ec:	4638      	mov	r0, r7
 80059ee:	f7ff f83f 	bl	8004a70 <MCI_StopMotor>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80059f2:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 80059f4:	2000      	movs	r0, #0
 80059f6:	e7d7      	b.n	80059a8 <MCP_ReceivedPacket+0x94>
        if (RUN == MCI_GetSTMState(pMCI))
 80059f8:	4638      	mov	r0, r7
 80059fa:	f7ff f803 	bl	8004a04 <MCI_GetSTMState>
 80059fe:	2806      	cmp	r0, #6
 8005a00:	d03c      	beq.n	8005a7c <MCP_ReceivedPacket+0x168>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8005a02:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8005a04:	2000      	movs	r0, #0
 8005a06:	e7cf      	b.n	80059a8 <MCP_ReceivedPacket+0x94>
        (void)MCI_FaultAcknowledged(pMCI);
 8005a08:	4638      	mov	r0, r7
 8005a0a:	f7ff f84d 	bl	8004aa8 <MCI_FaultAcknowledged>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8005a0e:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8005a10:	2000      	movs	r0, #0
        break;
 8005a12:	e7c9      	b.n	80059a8 <MCP_ReceivedPacket+0x94>
        *pHandle->txBuffer = MCP_VERSION;
 8005a14:	68a3      	ldr	r3, [r4, #8]
        pHandle->txLength = 4U;
 8005a16:	2104      	movs	r1, #4
        *pHandle->txBuffer = MCP_VERSION;
 8005a18:	2201      	movs	r2, #1
        pHandle->txLength = 4U;
 8005a1a:	81e1      	strh	r1, [r4, #14]
        *pHandle->txBuffer = MCP_VERSION;
 8005a1c:	701a      	strb	r2, [r3, #0]
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8005a1e:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8005a20:	2000      	movs	r0, #0
        break;
 8005a22:	e7c1      	b.n	80059a8 <MCP_ReceivedPacket+0x94>
        MCPResponse = RI_SetRegCommandParser(pHandle, (uint16_t)txSyncFreeSpace);
 8005a24:	4620      	mov	r0, r4
 8005a26:	f7ff fec1 	bl	80057ac <RI_SetRegCommandParser>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8005a2a:	89e3      	ldrh	r3, [r4, #14]
        break;
 8005a2c:	e7bc      	b.n	80059a8 <MCP_ReceivedPacket+0x94>
        MCPResponse = RI_GetRegCommandParser(pHandle, (uint16_t)txSyncFreeSpace);
 8005a2e:	4620      	mov	r0, r4
 8005a30:	f7ff ff28 	bl	8005884 <RI_GetRegCommandParser>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8005a34:	89e3      	ldrh	r3, [r4, #14]
        break;
 8005a36:	e7b7      	b.n	80059a8 <MCP_ReceivedPacket+0x94>
        MCPResponse = (MCI_StartWithPolarizationMotor(pMCI) == false) ? MCP_CMD_OK : MCP_CMD_NOK;
 8005a38:	4638      	mov	r0, r7
 8005a3a:	f7fe ffff 	bl	8004a3c <MCI_StartWithPolarizationMotor>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8005a3e:	89e3      	ldrh	r3, [r4, #14]
 8005a40:	e7b2      	b.n	80059a8 <MCP_ReceivedPacket+0x94>
        MCPResponse = MC_ProfilerCommand(pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace, &pHandle->txLength,
 8005a42:	68a3      	ldr	r3, [r4, #8]
 8005a44:	9300      	str	r3, [sp, #0]
 8005a46:	4631      	mov	r1, r6
 8005a48:	f104 030e 	add.w	r3, r4, #14
 8005a4c:	f7fe ff4e 	bl	80048ec <MC_ProfilerCommand>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8005a50:	89e3      	ldrh	r3, [r4, #14]
        break;
 8005a52:	e7a9      	b.n	80059a8 <MCP_ReceivedPacket+0x94>
          MCPResponse = (MCI_StartWithPolarizationMotor(pMCI) == true) ? MCP_CMD_OK : MCP_CMD_NOK;
 8005a54:	4638      	mov	r0, r7
 8005a56:	f7fe fff1 	bl	8004a3c <MCI_StartWithPolarizationMotor>
 8005a5a:	f080 0001 	eor.w	r0, r0, #1
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8005a5e:	89e3      	ldrh	r3, [r4, #14]
          MCPResponse = (MCI_StartWithPolarizationMotor(pMCI) == true) ? MCP_CMD_OK : MCP_CMD_NOK;
 8005a60:	b2c0      	uxtb	r0, r0
 8005a62:	e7a1      	b.n	80059a8 <MCP_ReceivedPacket+0x94>
        if ((userCommand < MCP_USER_CALLBACK_MAX) && (MCP_UserCallBack[userCommand] != NULL))
 8005a64:	4b09      	ldr	r3, [pc, #36]	@ (8005a8c <MCP_ReceivedPacket+0x178>)
 8005a66:	f853 502c 	ldr.w	r5, [r3, ip, lsl #2]
 8005a6a:	b15d      	cbz	r5, 8005a84 <MCP_ReceivedPacket+0x170>
          MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace,
 8005a6c:	68a3      	ldr	r3, [r4, #8]
 8005a6e:	9300      	str	r3, [sp, #0]
 8005a70:	4631      	mov	r1, r6
 8005a72:	f104 030e 	add.w	r3, r4, #14
 8005a76:	47a8      	blx	r5
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8005a78:	89e3      	ldrh	r3, [r4, #14]
          MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace,
 8005a7a:	e795      	b.n	80059a8 <MCP_ReceivedPacket+0x94>
          MCI_StopRamp(pMCI);
 8005a7c:	4638      	mov	r0, r7
 8005a7e:	f7ff f869 	bl	8004b54 <MCI_StopRamp>
 8005a82:	e7be      	b.n	8005a02 <MCP_ReceivedPacket+0xee>
 8005a84:	462b      	mov	r3, r5
 8005a86:	e7ab      	b.n	80059e0 <MCP_ReceivedPacket+0xcc>
 8005a88:	20000d30 	.word	0x20000d30
 8005a8c:	20000da4 	.word	0x20000da4

08005a90 <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 8005a90:	b508      	push	{r3, lr}
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  (void)HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / SYS_TICK_FREQUENCY);
 8005a92:	f002 fea3 	bl	80087dc <HAL_RCC_GetHCLKFreq>
 8005a96:	4b0a      	ldr	r3, [pc, #40]	@ (8005ac0 <MX_MotorControl_Init+0x30>)
 8005a98:	fba3 3000 	umull	r3, r0, r3, r0
 8005a9c:	09c0      	lsrs	r0, r0, #7
 8005a9e:	f002 fbf9 	bl	8008294 <HAL_SYSTICK_Config>
  HAL_NVIC_SetPriority(SysTick_IRQn, uwTickPrio, 0U);
 8005aa2:	4b08      	ldr	r3, [pc, #32]	@ (8005ac4 <MX_MotorControl_Init+0x34>)
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	6819      	ldr	r1, [r3, #0]
 8005aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8005aac:	f002 fba8 	bl	8008200 <HAL_NVIC_SetPriority>

  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI);
 8005ab0:	4805      	ldr	r0, [pc, #20]	@ (8005ac8 <MX_MotorControl_Init+0x38>)
 8005ab2:	f7ff fa17 	bl	8004ee4 <MCboot>
  mc_lock_pins();
}
 8005ab6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  mc_lock_pins();
 8005aba:	f7ff be0b 	b.w	80056d4 <mc_lock_pins>
 8005abe:	bf00      	nop
 8005ac0:	10624dd3 	.word	0x10624dd3
 8005ac4:	20000b68 	.word	0x20000b68
 8005ac8:	20001f30 	.word	0x20001f30

08005acc <PWMC_GetPhaseCurrents>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctGetPhaseCurrents(pHandle, Iab);
 8005acc:	6803      	ldr	r3, [r0, #0]
 8005ace:	4718      	bx	r3

08005ad0 <PWMC_SetPhaseVoltage>:
  * @param  Valfa_beta: Voltage Components expressed in the @f$(\alpha, \beta)@f$ reference frame.
  * @retval #MC_NO_ERROR if no error occurred or #MC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage(PWMC_Handle_t *pHandle, alphabeta_t Valfa_beta)
{
 8005ad0:	b530      	push	{r4, r5, lr}
    int32_t wTimePhA;
    int32_t wTimePhB;
    int32_t wTimePhC;

    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8005ad2:	f8b0 4072 	ldrh.w	r4, [r0, #114]	@ 0x72
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 8005ad6:	f8b0 204e 	ldrh.w	r2, [r0, #78]	@ 0x4e
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8005ada:	ea4f 4c21 	mov.w	ip, r1, asr #16
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 8005ade:	b20b      	sxth	r3, r1
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8005ae0:	fb04 fc0c 	mul.w	ip, r4, ip
 8005ae4:	ebcc 7ccc 	rsb	ip, ip, ip, lsl #31
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 8005ae8:	fb02 f303 	mul.w	r3, r2, r3

    wX = wUBeta;
    wY = (wUBeta + wUAlpha) / 2;
 8005aec:	eb03 024c 	add.w	r2, r3, ip, lsl #1
    wZ = (wUBeta - wUAlpha) / 2;
 8005af0:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
    wY = (wUBeta + wUAlpha) / 2;
 8005af4:	eb02 71d2 	add.w	r1, r2, r2, lsr #31
    wZ = (wUBeta - wUAlpha) / 2;
 8005af8:	eb03 7ed3 	add.w	lr, r3, r3, lsr #31

    /* Sector calculation from wX, wY, wZ */
    if (wY < 0)
 8005afc:	1c55      	adds	r5, r2, #1
{
 8005afe:	b083      	sub	sp, #12
    {
      if (wZ < 0)
      {
        pHandle->Sector = SECTOR_5;
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8005b00:	ea4f 0494 	mov.w	r4, r4, lsr #2
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8005b04:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    wY = (wUBeta + wUAlpha) / 2;
 8005b08:	ea4f 0161 	mov.w	r1, r1, asr #1
    wZ = (wUBeta - wUAlpha) / 2;
 8005b0c:	ea4f 0e6e 	mov.w	lr, lr, asr #1
    if (wY < 0)
 8005b10:	f2c0 8094 	blt.w	8005c3c <PWMC_SetPhaseVoltage+0x16c>
        }
        }
    }
    else /* wY > 0 */
    {
      if (wZ >= 0)
 8005b14:	1c5d      	adds	r5, r3, #1
 8005b16:	db64      	blt.n	8005be2 <PWMC_SetPhaseVoltage+0x112>
      {
        pHandle->Sector = SECTOR_2;
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8005b18:	ebb1 010e 	subs.w	r1, r1, lr
 8005b1c:	bf44      	itt	mi
 8005b1e:	f501 317f 	addmi.w	r1, r1, #261120	@ 0x3fc00
 8005b22:	f201 31ff 	addwmi	r1, r1, #1023	@ 0x3ff
        wTimePhB = wTimePhA + (wZ / 131072);
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	bfbc      	itt	lt
 8005b2a:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
 8005b2e:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
        wTimePhC = wTimePhA - (wY / 131072);
 8005b32:	2a00      	cmp	r2, #0
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8005b34:	eb04 41a1 	add.w	r1, r4, r1, asr #18
        wTimePhC = wTimePhA - (wY / 131072);
 8005b38:	bfb8      	it	lt
 8005b3a:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00

        if(true == pHandle->SingleShuntTopology)
 8005b3e:	f890 4087 	ldrb.w	r4, [r0, #135]	@ 0x87
        pHandle->Sector = SECTOR_2;
 8005b42:	f04f 0501 	mov.w	r5, #1
        wTimePhC = wTimePhA - (wY / 131072);
 8005b46:	bfb8      	it	lt
 8005b48:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
        pHandle->Sector = SECTOR_2;
 8005b4c:	f880 507c 	strb.w	r5, [r0, #124]	@ 0x7c
        wTimePhB = wTimePhA + (wZ / 131072);
 8005b50:	eb01 43a3 	add.w	r3, r1, r3, asr #18
        wTimePhC = wTimePhA - (wY / 131072);
 8005b54:	eba1 42a2 	sub.w	r2, r1, r2, asr #18
        if(true == pHandle->SingleShuntTopology)
 8005b58:	2c00      	cmp	r4, #0
 8005b5a:	f040 8097 	bne.w	8005c8c <PWMC_SetPhaseVoltage+0x1bc>
          pHandle->midDuty = 0U;
          pHandle->highDuty = 1U;
        }
        else
        {
        pHandle->lowDuty = (uint16_t)wTimePhB;
 8005b5e:	fa1f fe83 	uxth.w	lr, r3
        pHandle->midDuty = (uint16_t)wTimePhA;
 8005b62:	fa1f fc81 	uxth.w	ip, r1
        pHandle->highDuty = (uint16_t)wTimePhC;
 8005b66:	b294      	uxth	r4, r2
            pHandle->highDuty = 2U;
 8005b68:	f8a0 405c 	strh.w	r4, [r0, #92]	@ 0x5c

    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));

    if (1U == pHandle->DTTest)
 8005b6c:	f8b0 4070 	ldrh.w	r4, [r0, #112]	@ 0x70
            pHandle->lowDuty = 0U;
 8005b70:	f8a0 e058 	strh.w	lr, [r0, #88]	@ 0x58
    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
 8005b74:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 8005b78:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));
 8005b7c:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8005b80:	b289      	uxth	r1, r1
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	b292      	uxth	r2, r2
    if (1U == pHandle->DTTest)
 8005b86:	2c01      	cmp	r4, #1
            pHandle->midDuty = 1U;
 8005b88:	f8a0 c05a 	strh.w	ip, [r0, #90]	@ 0x5a
    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
 8005b8c:	f8a0 1050 	strh.w	r1, [r0, #80]	@ 0x50
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 8005b90:	f8a0 3052 	strh.w	r3, [r0, #82]	@ 0x52
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));
 8005b94:	f8a0 2054 	strh.w	r2, [r0, #84]	@ 0x54
    if (1U == pHandle->DTTest)
 8005b98:	d11e      	bne.n	8005bd8 <PWMC_SetPhaseVoltage+0x108>
    {
      /* Dead time compensation */
      if (pHandle->Ia > 0)
 8005b9a:	f9b0 5062 	ldrsh.w	r5, [r0, #98]	@ 0x62
      {
        pHandle->CntPhA += pHandle->DTCompCnt;
 8005b9e:	f8b0 4074 	ldrh.w	r4, [r0, #116]	@ 0x74
      if (pHandle->Ia > 0)
 8005ba2:	2d00      	cmp	r5, #0
        pHandle->CntPhA += pHandle->DTCompCnt;
 8005ba4:	bfcc      	ite	gt
 8005ba6:	1909      	addgt	r1, r1, r4
      }
      else
      {
        pHandle->CntPhA -= pHandle->DTCompCnt;
 8005ba8:	1b09      	suble	r1, r1, r4
 8005baa:	b289      	uxth	r1, r1
 8005bac:	f8a0 1050 	strh.w	r1, [r0, #80]	@ 0x50
      }

      if (pHandle->Ib > 0)
 8005bb0:	f9b0 1064 	ldrsh.w	r1, [r0, #100]	@ 0x64
 8005bb4:	2900      	cmp	r1, #0
      else
      {
        pHandle->CntPhB -= pHandle->DTCompCnt;
      }

      if (pHandle->Ic > 0)
 8005bb6:	f9b0 1066 	ldrsh.w	r1, [r0, #102]	@ 0x66
        pHandle->CntPhB += pHandle->DTCompCnt;
 8005bba:	bfcc      	ite	gt
 8005bbc:	191b      	addgt	r3, r3, r4
        pHandle->CntPhB -= pHandle->DTCompCnt;
 8005bbe:	1b1b      	suble	r3, r3, r4
      if (pHandle->Ic > 0)
 8005bc0:	2900      	cmp	r1, #0
        pHandle->CntPhB -= pHandle->DTCompCnt;
 8005bc2:	b29b      	uxth	r3, r3
      {
        pHandle->CntPhC += pHandle->DTCompCnt;
 8005bc4:	bfcc      	ite	gt
 8005bc6:	18a4      	addgt	r4, r4, r2
      }
      else
      {
        pHandle->CntPhC -= pHandle->DTCompCnt;
 8005bc8:	1b12      	suble	r2, r2, r4
 8005bca:	f8a0 3052 	strh.w	r3, [r0, #82]	@ 0x52
        pHandle->CntPhC += pHandle->DTCompCnt;
 8005bce:	bfcc      	ite	gt
 8005bd0:	f8a0 4054 	strhgt.w	r4, [r0, #84]	@ 0x54
        pHandle->CntPhC -= pHandle->DTCompCnt;
 8005bd4:	f8a0 2054 	strhle.w	r2, [r0, #84]	@ 0x54
      }
    }
    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 8005bd8:	6943      	ldr	r3, [r0, #20]
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (returnValue);
}
 8005bda:	b003      	add	sp, #12
 8005bdc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 8005be0:	4718      	bx	r3
        if ( wX <= 0 )
 8005be2:	f1bc 0f00 	cmp.w	ip, #0
 8005be6:	dd7f      	ble.n	8005ce8 <PWMC_SetPhaseVoltage+0x218>
          wTimePhB = wTimePhA + (wZ / 131072);
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	bfb8      	it	lt
 8005bec:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 8005bf0:	ebac 0e0e 	sub.w	lr, ip, lr
          wTimePhB = wTimePhA + (wZ / 131072);
 8005bf4:	bfb8      	it	lt
 8005bf6:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
          wTimePhC = wTimePhB - (wX / 131072);
 8005bfa:	f1bc 0f00 	cmp.w	ip, #0
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 8005bfe:	eb04 41ae 	add.w	r1, r4, lr, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 8005c02:	bfb8      	it	lt
 8005c04:	f50c 3cff 	addlt.w	ip, ip, #130560	@ 0x1fe00
          if((pHandle->DPWM_Mode == true) || (pHandle->SingleShuntTopology == true))
 8005c08:	f890 407f 	ldrb.w	r4, [r0, #127]	@ 0x7f
          pHandle->Sector = SECTOR_1;
 8005c0c:	f04f 0200 	mov.w	r2, #0
          wTimePhB = wTimePhA + (wZ / 131072);
 8005c10:	eb01 43a3 	add.w	r3, r1, r3, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 8005c14:	bfb8      	it	lt
 8005c16:	f20c 1cff 	addwlt	ip, ip, #511	@ 0x1ff
          pHandle->Sector = SECTOR_1;
 8005c1a:	f880 207c 	strb.w	r2, [r0, #124]	@ 0x7c
          wTimePhC = wTimePhB - (wX / 131072);
 8005c1e:	eba3 426c 	sub.w	r2, r3, ip, asr #17
          if((pHandle->DPWM_Mode == true) || (pHandle->SingleShuntTopology == true))
 8005c22:	2c00      	cmp	r4, #0
 8005c24:	f040 80b5 	bne.w	8005d92 <PWMC_SetPhaseVoltage+0x2c2>
 8005c28:	f890 5087 	ldrb.w	r5, [r0, #135]	@ 0x87
 8005c2c:	2d00      	cmp	r5, #0
 8005c2e:	f000 80c2 	beq.w	8005db6 <PWMC_SetPhaseVoltage+0x2e6>
 8005c32:	f04f 0e02 	mov.w	lr, #2
 8005c36:	f04f 0c01 	mov.w	ip, #1
 8005c3a:	e795      	b.n	8005b68 <PWMC_SetPhaseVoltage+0x98>
      if (wZ < 0)
 8005c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
        if(true == pHandle->SingleShuntTopology)
 8005c40:	f890 5087 	ldrb.w	r5, [r0, #135]	@ 0x87
      if (wZ < 0)
 8005c44:	db74      	blt.n	8005d30 <PWMC_SetPhaseVoltage+0x260>
        if (wX <= 0)
 8005c46:	f1bc 0f00 	cmp.w	ip, #0
 8005c4a:	dd25      	ble.n	8005c98 <PWMC_SetPhaseVoltage+0x1c8>
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 8005c4c:	ebb1 010c 	subs.w	r1, r1, ip
 8005c50:	bf44      	itt	mi
 8005c52:	f501 317f 	addmi.w	r1, r1, #261120	@ 0x3fc00
 8005c56:	f201 31ff 	addwmi	r1, r1, #1023	@ 0x3ff
          wTimePhC = wTimePhA - (wY / 131072);
 8005c5a:	2a00      	cmp	r2, #0
 8005c5c:	bfb8      	it	lt
 8005c5e:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 8005c62:	eb04 41a1 	add.w	r1, r4, r1, asr #18
          wTimePhC = wTimePhA - (wY / 131072);
 8005c66:	bfb8      	it	lt
 8005c68:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
          pHandle->Sector = SECTOR_3;
 8005c6c:	2302      	movs	r3, #2
          wTimePhC = wTimePhA - (wY / 131072);
 8005c6e:	eba1 42a2 	sub.w	r2, r1, r2, asr #18
          pHandle->Sector = SECTOR_3;
 8005c72:	f880 307c 	strb.w	r3, [r0, #124]	@ 0x7c
          wTimePhB = wTimePhC + (wX / 131072);
 8005c76:	eb02 436c 	add.w	r3, r2, ip, asr #17
          if(true == pHandle->SingleShuntTopology)
 8005c7a:	2d00      	cmp	r5, #0
 8005c7c:	f040 8083 	bne.w	8005d86 <PWMC_SetPhaseVoltage+0x2b6>
          pHandle->lowDuty = (uint16_t)wTimePhB;
 8005c80:	fa1f fe83 	uxth.w	lr, r3
          pHandle->midDuty = (uint16_t)wTimePhC;
 8005c84:	fa1f fc82 	uxth.w	ip, r2
          pHandle->highDuty = (uint16_t)wTimePhA;
 8005c88:	b28c      	uxth	r4, r1
 8005c8a:	e76d      	b.n	8005b68 <PWMC_SetPhaseVoltage+0x98>
 8005c8c:	f04f 0e02 	mov.w	lr, #2
 8005c90:	f04f 0c00 	mov.w	ip, #0
 8005c94:	2401      	movs	r4, #1
 8005c96:	e767      	b.n	8005b68 <PWMC_SetPhaseVoltage+0x98>
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 8005c98:	ebbc 0e0e 	subs.w	lr, ip, lr
 8005c9c:	bf44      	itt	mi
 8005c9e:	f50e 3e7f 	addmi.w	lr, lr, #261120	@ 0x3fc00
 8005ca2:	f20e 3eff 	addwmi	lr, lr, #1023	@ 0x3ff
          wTimePhB = wTimePhA + (wZ / 131072);
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	bfb8      	it	lt
 8005caa:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
          pHandle->Sector = SECTOR_4;
 8005cae:	f04f 0203 	mov.w	r2, #3
          wTimePhB = wTimePhA + (wZ / 131072);
 8005cb2:	bfb8      	it	lt
 8005cb4:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
          pHandle->Sector = SECTOR_4;
 8005cb8:	f880 207c 	strb.w	r2, [r0, #124]	@ 0x7c
          wTimePhC = wTimePhB - (wX / 131072);
 8005cbc:	f1bc 0200 	subs.w	r2, ip, #0
 8005cc0:	bfb8      	it	lt
 8005cc2:	f502 32ff 	addlt.w	r2, r2, #130560	@ 0x1fe00
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 8005cc6:	eb04 41ae 	add.w	r1, r4, lr, asr #18
          wTimePhB = wTimePhA + (wZ / 131072);
 8005cca:	eb01 43a3 	add.w	r3, r1, r3, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 8005cce:	bfb8      	it	lt
 8005cd0:	f202 12ff 	addwlt	r2, r2, #511	@ 0x1ff
 8005cd4:	eba3 4262 	sub.w	r2, r3, r2, asr #17
          if(true == pHandle->SingleShuntTopology)
 8005cd8:	2d00      	cmp	r5, #0
 8005cda:	d066      	beq.n	8005daa <PWMC_SetPhaseVoltage+0x2da>
 8005cdc:	f04f 0e00 	mov.w	lr, #0
 8005ce0:	f04f 0c01 	mov.w	ip, #1
 8005ce4:	2402      	movs	r4, #2
 8005ce6:	e73f      	b.n	8005b68 <PWMC_SetPhaseVoltage+0x98>
          wTimePhC = wTimePhA - (wY / 131072);
 8005ce8:	2a00      	cmp	r2, #0
 8005cea:	bfb8      	it	lt
 8005cec:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00
          pHandle->Sector = SECTOR_6;
 8005cf0:	f04f 0305 	mov.w	r3, #5
          wTimePhC = wTimePhA - (wY / 131072);
 8005cf4:	bfb8      	it	lt
 8005cf6:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 8005cfa:	eba1 010c 	sub.w	r1, r1, ip
          pHandle->Sector = SECTOR_6;
 8005cfe:	f880 307c 	strb.w	r3, [r0, #124]	@ 0x7c
          wTimePhB = wTimePhC + (wX / 131072);
 8005d02:	f1bc 0300 	subs.w	r3, ip, #0
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 8005d06:	eb04 41a1 	add.w	r1, r4, r1, asr #18
          wTimePhB = wTimePhC + (wX / 131072);
 8005d0a:	bfb8      	it	lt
 8005d0c:	f503 33ff 	addlt.w	r3, r3, #130560	@ 0x1fe00
          if(true == pHandle->SingleShuntTopology)
 8005d10:	f890 4087 	ldrb.w	r4, [r0, #135]	@ 0x87
          wTimePhC = wTimePhA - (wY / 131072);
 8005d14:	eba1 42a2 	sub.w	r2, r1, r2, asr #18
          wTimePhB = wTimePhC + (wX / 131072);
 8005d18:	bfb8      	it	lt
 8005d1a:	f203 13ff 	addwlt	r3, r3, #511	@ 0x1ff
 8005d1e:	eb02 4363 	add.w	r3, r2, r3, asr #17
          if(true == pHandle->SingleShuntTopology)
 8005d22:	b3e4      	cbz	r4, 8005d9e <PWMC_SetPhaseVoltage+0x2ce>
 8005d24:	f04f 0e01 	mov.w	lr, #1
 8005d28:	f04f 0c02 	mov.w	ip, #2
 8005d2c:	2400      	movs	r4, #0
 8005d2e:	e71b      	b.n	8005b68 <PWMC_SetPhaseVoltage+0x98>
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8005d30:	ebb1 010e 	subs.w	r1, r1, lr
 8005d34:	bf44      	itt	mi
 8005d36:	f501 317f 	addmi.w	r1, r1, #261120	@ 0x3fc00
 8005d3a:	f201 31ff 	addwmi	r1, r1, #1023	@ 0x3ff
        wTimePhB = wTimePhA + (wZ / 131072);
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	bfbc      	itt	lt
 8005d42:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
 8005d46:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
        wTimePhC = wTimePhA - (wY / 131072) ;
 8005d4a:	2a00      	cmp	r2, #0
 8005d4c:	bfb8      	it	lt
 8005d4e:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8005d52:	eb04 41a1 	add.w	r1, r4, r1, asr #18
        pHandle->Sector = SECTOR_5;
 8005d56:	f04f 0c04 	mov.w	ip, #4
        wTimePhC = wTimePhA - (wY / 131072) ;
 8005d5a:	bfb8      	it	lt
 8005d5c:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
        pHandle->Sector = SECTOR_5;
 8005d60:	f880 c07c 	strb.w	ip, [r0, #124]	@ 0x7c
        wTimePhB = wTimePhA + (wZ / 131072);
 8005d64:	eb01 43a3 	add.w	r3, r1, r3, asr #18
        wTimePhC = wTimePhA - (wY / 131072) ;
 8005d68:	eba1 42a2 	sub.w	r2, r1, r2, asr #18
        if(true == pHandle->SingleShuntTopology)
 8005d6c:	b92d      	cbnz	r5, 8005d7a <PWMC_SetPhaseVoltage+0x2aa>
          pHandle->lowDuty = (uint16_t)wTimePhC;
 8005d6e:	fa1f fe82 	uxth.w	lr, r2
          pHandle->midDuty = (uint16_t)wTimePhA;
 8005d72:	fa1f fc81 	uxth.w	ip, r1
          pHandle->highDuty = (uint16_t)wTimePhB;
 8005d76:	b29c      	uxth	r4, r3
 8005d78:	e6f6      	b.n	8005b68 <PWMC_SetPhaseVoltage+0x98>
 8005d7a:	f04f 0e01 	mov.w	lr, #1
 8005d7e:	f04f 0c00 	mov.w	ip, #0
 8005d82:	2402      	movs	r4, #2
 8005d84:	e6f0      	b.n	8005b68 <PWMC_SetPhaseVoltage+0x98>
 8005d86:	f04f 0e00 	mov.w	lr, #0
 8005d8a:	f04f 0c02 	mov.w	ip, #2
 8005d8e:	2401      	movs	r4, #1
 8005d90:	e6ea      	b.n	8005b68 <PWMC_SetPhaseVoltage+0x98>
 8005d92:	f04f 0e02 	mov.w	lr, #2
 8005d96:	f04f 0c01 	mov.w	ip, #1
 8005d9a:	2400      	movs	r4, #0
 8005d9c:	e6e4      	b.n	8005b68 <PWMC_SetPhaseVoltage+0x98>
            pHandle->lowDuty = (uint16_t)wTimePhA;
 8005d9e:	fa1f fe81 	uxth.w	lr, r1
            pHandle->midDuty = (uint16_t)wTimePhC;
 8005da2:	fa1f fc82 	uxth.w	ip, r2
            pHandle->highDuty = (uint16_t)wTimePhB;
 8005da6:	b29c      	uxth	r4, r3
 8005da8:	e6de      	b.n	8005b68 <PWMC_SetPhaseVoltage+0x98>
          pHandle->lowDuty = (uint16_t)wTimePhC;
 8005daa:	fa1f fe82 	uxth.w	lr, r2
          pHandle->midDuty = (uint16_t)wTimePhB;
 8005dae:	fa1f fc83 	uxth.w	ip, r3
          pHandle->highDuty = (uint16_t)wTimePhA;
 8005db2:	b28c      	uxth	r4, r1
 8005db4:	e6d8      	b.n	8005b68 <PWMC_SetPhaseVoltage+0x98>
            pHandle->lowDuty = (uint16_t)wTimePhA;
 8005db6:	fa1f fe81 	uxth.w	lr, r1
            pHandle->midDuty = (uint16_t)wTimePhB;
 8005dba:	fa1f fc83 	uxth.w	ip, r3
            pHandle->highDuty = (uint16_t)wTimePhC;
 8005dbe:	b294      	uxth	r4, r2
 8005dc0:	e6d2      	b.n	8005b68 <PWMC_SetPhaseVoltage+0x98>
 8005dc2:	bf00      	nop

08005dc4 <PWMC_SwitchOffPWM>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOffPwm(pHandle);
 8005dc4:	6843      	ldr	r3, [r0, #4]
 8005dc6:	4718      	bx	r3

08005dc8 <PWMC_SwitchOnPWM>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOnPwm(pHandle);
 8005dc8:	6883      	ldr	r3, [r0, #8]
 8005dca:	4718      	bx	r3

08005dcc <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, **false** if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr(PWMC_Handle_t *pHandle, CRCAction_t action)
{
 8005dcc:	b510      	push	{r4, lr}
 8005dce:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    if (CRC_START == action)
 8005dd0:	b179      	cbz	r1, 8005df2 <PWMC_CurrentReadingCalibr+0x26>
    {
      PWMC_SwitchOffPWM(pHandle);
      pHandle->pFctCurrReadingCalib(pHandle);
      retVal = true;
    }
    else if (CRC_EXEC == action)
 8005dd2:	2901      	cmp	r1, #1
 8005dd4:	d001      	beq.n	8005dda <PWMC_CurrentReadingCalibr+0xe>
  bool retVal = false;
 8005dd6:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (retVal);
}
 8005dd8:	bd10      	pop	{r4, pc}
      if (pHandle->OffCalibrWaitTimeCounter > 0u)
 8005dda:	f8b0 3060 	ldrh.w	r3, [r0, #96]	@ 0x60
 8005dde:	b16b      	cbz	r3, 8005dfc <PWMC_CurrentReadingCalibr+0x30>
        pHandle->OffCalibrWaitTimeCounter--;
 8005de0:	3b01      	subs	r3, #1
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
        if (0U == pHandle->OffCalibrWaitTimeCounter)
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d1f4      	bne.n	8005dd6 <PWMC_CurrentReadingCalibr+0xa>
          pHandle->pFctCurrReadingCalib(pHandle);
 8005dec:	68c3      	ldr	r3, [r0, #12]
 8005dee:	4798      	blx	r3
          retVal = true;
 8005df0:	e004      	b.n	8005dfc <PWMC_CurrentReadingCalibr+0x30>
      PWMC_SwitchOffPWM(pHandle);
 8005df2:	f7ff ffe7 	bl	8005dc4 <PWMC_SwitchOffPWM>
      pHandle->pFctCurrReadingCalib(pHandle);
 8005df6:	68e3      	ldr	r3, [r4, #12]
 8005df8:	4620      	mov	r0, r4
 8005dfa:	4798      	blx	r3
      retVal = true;
 8005dfc:	2001      	movs	r0, #1
}
 8005dfe:	bd10      	pop	{r4, pc}

08005e00 <PWMC_OVP_Handler>:
    tempPointer = MC_NULL;
  }
  else
  {
#endif
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8005e00:	6c4a      	ldr	r2, [r1, #68]	@ 0x44
{
 8005e02:	4603      	mov	r3, r0
    pHandle->OverVoltageFlag = true;
 8005e04:	f04f 0c01 	mov.w	ip, #1
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8005e08:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005e0c:	644a      	str	r2, [r1, #68]	@ 0x44
    tempPointer = &(pHandle->Motor);
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (tempPointer);
}
 8005e0e:	307a      	adds	r0, #122	@ 0x7a
    pHandle->OverVoltageFlag = true;
 8005e10:	f883 c083 	strb.w	ip, [r3, #131]	@ 0x83
    pHandle->BrakeActionLock = true;
 8005e14:	f883 c085 	strb.w	ip, [r3, #133]	@ 0x85
}
 8005e18:	4770      	bx	lr
 8005e1a:	bf00      	nop

08005e1c <PWMC_IsFaultOccurred>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  * @retval uint16_t Returns #MC_OVER_CURR if an overcurrent has been
  *                  detected since last method call, #MC_NO_FAULTS otherwise.
  */
__weak uint16_t PWMC_IsFaultOccurred(PWMC_Handle_t *pHandle)
{
 8005e1c:	4603      	mov	r3, r0
  uint16_t retVal = MC_NO_FAULTS;

  if (true == pHandle->OverVoltageFlag)
 8005e1e:	f890 0083 	ldrb.w	r0, [r0, #131]	@ 0x83
 8005e22:	b1a8      	cbz	r0, 8005e50 <PWMC_IsFaultOccurred+0x34>
  {
    retVal = MC_OVER_VOLT;
    pHandle->OverVoltageFlag = false;
 8005e24:	2200      	movs	r2, #0
 8005e26:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
 8005e2a:	2142      	movs	r1, #66	@ 0x42
    retVal = MC_OVER_VOLT;
 8005e2c:	2002      	movs	r0, #2
  else
  {
    /* Nothing to do */
  }

  if (true == pHandle->OverCurrentFlag)
 8005e2e:	f893 2082 	ldrb.w	r2, [r3, #130]	@ 0x82
 8005e32:	b11a      	cbz	r2, 8005e3c <PWMC_IsFaultOccurred+0x20>
  {
    retVal |= MC_OVER_CURR;
    pHandle->OverCurrentFlag = false;
 8005e34:	2200      	movs	r2, #0
 8005e36:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
    retVal |= MC_OVER_CURR;
 8005e3a:	4608      	mov	r0, r1
  else
  {
    /* Nothing to do */
  }

  if (true == pHandle->driverProtectionFlag)
 8005e3c:	f893 2084 	ldrb.w	r2, [r3, #132]	@ 0x84
 8005e40:	b12a      	cbz	r2, 8005e4e <PWMC_IsFaultOccurred+0x32>
  {
    retVal |= MC_DP_FAULT;
 8005e42:	f440 6080 	orr.w	r0, r0, #1024	@ 0x400
    pHandle->driverProtectionFlag = false;
 8005e46:	2200      	movs	r2, #0
    retVal |= MC_DP_FAULT;
 8005e48:	b280      	uxth	r0, r0
    pHandle->driverProtectionFlag = false;
 8005e4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
  {
    /* Nothing to do */
  }

  return (retVal);
}
 8005e4e:	4770      	bx	lr
 8005e50:	2140      	movs	r1, #64	@ 0x40
 8005e52:	e7ec      	b.n	8005e2e <PWMC_IsFaultOccurred+0x12>

08005e54 <PWMC_RLDetectionModeEnable>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctRLDetectionModeEnable(pHandle);
 8005e54:	69c3      	ldr	r3, [r0, #28]
 8005e56:	4718      	bx	r3

08005e58 <PWMC_RLDetectionModeDisable>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctRLDetectionModeDisable(pHandle);
 8005e58:	6a03      	ldr	r3, [r0, #32]
 8005e5a:	4718      	bx	r3

08005e5c <PWMC_RLDetectionModeSetDuty>:
 {
   retVal = pHandle->pFctRLDetectionModeSetDuty(pHandle, hDuty);
 }
 return (retVal);
#else
  return (pHandle->pFctRLDetectionModeSetDuty(pHandle, hDuty));
 8005e5c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8005e5e:	4718      	bx	r3

08005e60 <PWMC_RLTurnOnLowSidesAndStart>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctRLTurnOnLowSidesAndStart(pHandle);
 8005e60:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8005e62:	4718      	bx	r3

08005e64 <RI_SetRegisterGlobal>:
#include "mp_one_touch_tuning.h"
#include "mp_self_com_ctrl.h"
#include "mc_configuration_registers.h"

uint8_t RI_SetRegisterGlobal(uint16_t regID, uint8_t typeID, uint8_t *data, uint16_t *size, int16_t dataAvailable)
{
 8005e64:	b410      	push	{r4}
  uint8_t retVal = MCP_CMD_OK;
  switch(typeID)
 8005e66:	3908      	subs	r1, #8
{
 8005e68:	f9bd c004 	ldrsh.w	ip, [sp, #4]
  switch(typeID)
 8005e6c:	2920      	cmp	r1, #32
 8005e6e:	d812      	bhi.n	8005e96 <RI_SetRegisterGlobal+0x32>
 8005e70:	e8df f001 	tbb	[pc, r1]
 8005e74:	11111117 	.word	0x11111117
 8005e78:	11111111 	.word	0x11111111
 8005e7c:	11111121 	.word	0x11111121
 8005e80:	11111111 	.word	0x11111111
 8005e84:	11111133 	.word	0x11111133
 8005e88:	11111111 	.word	0x11111111
 8005e8c:	1111113d 	.word	0x1111113d
 8005e90:	11111111 	.word	0x11111111
 8005e94:	51          	.byte	0x51
 8005e95:	00          	.byte	0x00
    }

    default:
    {
      retVal = MCP_ERROR_BAD_DATA_TYPE;
      *size =0; /* From this point we are not able anymore to decode the RX buffer */
 8005e96:	2200      	movs	r2, #0
 8005e98:	801a      	strh	r2, [r3, #0]
      retVal = MCP_ERROR_BAD_DATA_TYPE;
 8005e9a:	2007      	movs	r0, #7
      break;
    }
  }
  return (retVal);
}
 8005e9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ea0:	4770      	bx	lr
          retVal = MCP_ERROR_RO_REG;
 8005ea2:	2848      	cmp	r0, #72	@ 0x48
      *size = 1;
 8005ea4:	f04f 0201 	mov.w	r2, #1
          retVal = MCP_ERROR_RO_REG;
 8005ea8:	bf14      	ite	ne
 8005eaa:	2005      	movne	r0, #5
 8005eac:	2004      	moveq	r0, #4
}
 8005eae:	f85d 4b04 	ldr.w	r4, [sp], #4
      *size = 1;
 8005eb2:	801a      	strh	r2, [r3, #0]
}
 8005eb4:	4770      	bx	lr
      switch (regID)
 8005eb6:	f5b0 6f65 	cmp.w	r0, #3664	@ 0xe50
 8005eba:	d04e      	beq.n	8005f5a <RI_SetRegisterGlobal+0xf6>
 8005ebc:	d93e      	bls.n	8005f3c <RI_SetRegisterGlobal+0xd8>
 8005ebe:	f5b0 6f69 	cmp.w	r0, #3728	@ 0xe90
 8005ec2:	d04a      	beq.n	8005f5a <RI_SetRegisterGlobal+0xf6>
 8005ec4:	f641 3258 	movw	r2, #7000	@ 0x1b58
          retVal = MCP_ERROR_UNKNOWN_REG;
 8005ec8:	4290      	cmp	r0, r2
 8005eca:	bf0c      	ite	eq
 8005ecc:	2004      	moveq	r0, #4
 8005ece:	2005      	movne	r0, #5
      *size = 2;
 8005ed0:	2202      	movs	r2, #2
}
 8005ed2:	f85d 4b04 	ldr.w	r4, [sp], #4
      *size = 2;
 8005ed6:	801a      	strh	r2, [r3, #0]
}
 8005ed8:	4770      	bx	lr
          retVal = MCP_ERROR_RO_REG;
 8005eda:	2818      	cmp	r0, #24
      *size = 4;
 8005edc:	f04f 0204 	mov.w	r2, #4
          retVal = MCP_ERROR_RO_REG;
 8005ee0:	bf14      	ite	ne
 8005ee2:	2005      	movne	r0, #5
 8005ee4:	4610      	moveq	r0, r2
}
 8005ee6:	f85d 4b04 	ldr.w	r4, [sp], #4
      *size = 4;
 8005eea:	801a      	strh	r2, [r3, #0]
}
 8005eec:	4770      	bx	lr
uint8_t RI_MovString(const char_t *srcString, char_t *destString, uint16_t *size, int16_t maxSize)
{
  uint8_t retVal = MCP_CMD_OK;
  const char_t *tempsrcString = srcString;
  char_t *tempdestString = destString;
  *size= 1U ; /* /0 is the min String size */
 8005eee:	2101      	movs	r1, #1
 8005ef0:	8019      	strh	r1, [r3, #0]

  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8005ef2:	f992 0000 	ldrsb.w	r0, [r2]
 8005ef6:	b348      	cbz	r0, 8005f4c <RI_SetRegisterGlobal+0xe8>
 8005ef8:	fa1f f08c 	uxth.w	r0, ip
 8005efc:	e003      	b.n	8005f06 <RI_SetRegisterGlobal+0xa2>
  {
    *tempdestString = *tempsrcString;
    tempdestString++;
    tempsrcString++;
    *size = *size + 1U;
 8005efe:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8005f00:	f912 4f01 	ldrsb.w	r4, [r2, #1]!
 8005f04:	b314      	cbz	r4, 8005f4c <RI_SetRegisterGlobal+0xe8>
    *size = *size + 1U;
 8005f06:	f101 0c01 	add.w	ip, r1, #1
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8005f0a:	4281      	cmp	r1, r0
    *size = *size + 1U;
 8005f0c:	fa1f f18c 	uxth.w	r1, ip
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8005f10:	d3f5      	bcc.n	8005efe <RI_SetRegisterGlobal+0x9a>
      retVal = MCP_ERROR_RO_REG;
 8005f12:	2004      	movs	r0, #4
 8005f14:	e7c2      	b.n	8005e9c <RI_SetRegisterGlobal+0x38>
      *size = rawSize + 2U;
 8005f16:	8812      	ldrh	r2, [r2, #0]
 8005f18:	3202      	adds	r2, #2
 8005f1a:	b292      	uxth	r2, r2
      if (*size > (uint16_t)dataAvailable)
 8005f1c:	fa1f fc8c 	uxth.w	ip, ip
 8005f20:	4562      	cmp	r2, ip
      *size = rawSize + 2U;
 8005f22:	801a      	strh	r2, [r3, #0]
      if (*size > (uint16_t)dataAvailable)
 8005f24:	d81b      	bhi.n	8005f5e <RI_SetRegisterGlobal+0xfa>
        switch (regID)
 8005f26:	28a8      	cmp	r0, #168	@ 0xa8
 8005f28:	d0f3      	beq.n	8005f12 <RI_SetRegisterGlobal+0xae>
 8005f2a:	d813      	bhi.n	8005f54 <RI_SetRegisterGlobal+0xf0>
 8005f2c:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 8005f30:	2828      	cmp	r0, #40	@ 0x28
 8005f32:	d0ee      	beq.n	8005f12 <RI_SetRegisterGlobal+0xae>
 8005f34:	2005      	movs	r0, #5
}
 8005f36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f3a:	4770      	bx	lr
 8005f3c:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
          retVal = MCP_ERROR_UNKNOWN_REG;
 8005f40:	f5b0 6fb2 	cmp.w	r0, #1424	@ 0x590
 8005f44:	bf0c      	ite	eq
 8005f46:	2004      	moveq	r0, #4
 8005f48:	2005      	movne	r0, #5
 8005f4a:	e7c1      	b.n	8005ed0 <RI_SetRegisterGlobal+0x6c>
  { /* Last string char must be 0 */
    retVal = MCP_ERROR_STRING_FORMAT;
  }
  else
  {
    *tempdestString = (int8_t)0;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	7013      	strb	r3, [r2, #0]
      retVal = MCP_ERROR_RO_REG;
 8005f50:	2004      	movs	r0, #4
 8005f52:	e7a3      	b.n	8005e9c <RI_SetRegisterGlobal+0x38>
 8005f54:	28e8      	cmp	r0, #232	@ 0xe8
 8005f56:	d1ed      	bne.n	8005f34 <RI_SetRegisterGlobal+0xd0>
 8005f58:	e7db      	b.n	8005f12 <RI_SetRegisterGlobal+0xae>
  uint8_t retVal = MCP_CMD_OK;
 8005f5a:	2000      	movs	r0, #0
 8005f5c:	e7b8      	b.n	8005ed0 <RI_SetRegisterGlobal+0x6c>
        *size = 0;
 8005f5e:	2200      	movs	r2, #0
 8005f60:	801a      	strh	r2, [r3, #0]
        retVal = MCP_ERROR_BAD_RAW_FORMAT; /* This error stop the parsing of the CMD buffer */
 8005f62:	200a      	movs	r0, #10
 8005f64:	e79a      	b.n	8005e9c <RI_SetRegisterGlobal+0x38>
 8005f66:	bf00      	nop

08005f68 <RI_SetRegisterMotor1>:
{
 8005f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f6c:	b084      	sub	sp, #16
  switch(typeID)
 8005f6e:	3908      	subs	r1, #8
{
 8005f70:	f9bd c028 	ldrsh.w	ip, [sp, #40]	@ 0x28
 8005f74:	4615      	mov	r5, r2
 8005f76:	461c      	mov	r4, r3
  switch(typeID)
 8005f78:	2920      	cmp	r1, #32
 8005f7a:	d812      	bhi.n	8005fa2 <RI_SetRegisterMotor1+0x3a>
 8005f7c:	e8df f001 	tbb	[pc, r1]
 8005f80:	11111117 	.word	0x11111117
 8005f84:	11111111 	.word	0x11111111
 8005f88:	11111132 	.word	0x11111132
 8005f8c:	11111111 	.word	0x11111111
 8005f90:	1111118f 	.word	0x1111118f
 8005f94:	11111111 	.word	0x11111111
 8005f98:	11111157 	.word	0x11111157
 8005f9c:	11111111 	.word	0x11111111
 8005fa0:	6e          	.byte	0x6e
 8005fa1:	00          	.byte	0x00
      *size =0; /* From this point we are not able anymore to decode the RX buffer */
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	8023      	strh	r3, [r4, #0]
      retVal = MCP_ERROR_BAD_DATA_TYPE;
 8005fa6:	2007      	movs	r0, #7
}
 8005fa8:	b004      	add	sp, #16
 8005faa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      switch (regID)
 8005fae:	f5b0 6f91 	cmp.w	r0, #1160	@ 0x488
 8005fb2:	f000 82da 	beq.w	800656a <RI_SetRegisterMotor1+0x602>
 8005fb6:	f200 8292 	bhi.w	80064de <RI_SetRegisterMotor1+0x576>
 8005fba:	2888      	cmp	r0, #136	@ 0x88
 8005fbc:	f000 82fa 	beq.w	80065b4 <RI_SetRegisterMotor1+0x64c>
 8005fc0:	f240 8266 	bls.w	8006490 <RI_SetRegisterMotor1+0x528>
 8005fc4:	f5b0 6f81 	cmp.w	r0, #1032	@ 0x408
 8005fc8:	f000 82aa 	beq.w	8006520 <RI_SetRegisterMotor1+0x5b8>
 8005fcc:	f240 826d 	bls.w	80064aa <RI_SetRegisterMotor1+0x542>
 8005fd0:	f5b0 6f89 	cmp.w	r0, #1096	@ 0x448
 8005fd4:	bf0c      	ite	eq
 8005fd6:	2004      	moveq	r0, #4
 8005fd8:	2005      	movne	r0, #5
      *size = 1;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	8023      	strh	r3, [r4, #0]
}
 8005fde:	b004      	add	sp, #16
 8005fe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      uint16_t regdata16 = *(uint16_t *)data; //cstat !MISRAC2012-Rule-11.3
 8005fe4:	f5b0 6f19 	cmp.w	r0, #2448	@ 0x990
 8005fe8:	8815      	ldrh	r5, [r2, #0]
      switch (regID)
 8005fea:	f000 838b 	beq.w	8006704 <RI_SetRegisterMotor1+0x79c>
 8005fee:	f200 812f 	bhi.w	8006250 <RI_SetRegisterMotor1+0x2e8>
 8005ff2:	f5b0 7f34 	cmp.w	r0, #720	@ 0x2d0
 8005ff6:	f000 8380 	beq.w	80066fa <RI_SetRegisterMotor1+0x792>
 8005ffa:	f200 80f9 	bhi.w	80061f0 <RI_SetRegisterMotor1+0x288>
 8005ffe:	f5b0 7fc8 	cmp.w	r0, #400	@ 0x190
 8006002:	f000 8345 	beq.w	8006690 <RI_SetRegisterMotor1+0x728>
 8006006:	f240 80e7 	bls.w	80061d8 <RI_SetRegisterMotor1+0x270>
 800600a:	f5b0 7f04 	cmp.w	r0, #528	@ 0x210
 800600e:	f000 8360 	beq.w	80066d2 <RI_SetRegisterMotor1+0x76a>
 8006012:	f5b0 7f24 	cmp.w	r0, #656	@ 0x290
 8006016:	f040 8250 	bne.w	80064ba <RI_SetRegisterMotor1+0x552>
          PID_SetKP(&PIDIdHandle_M1, (int16_t)regdata16);
 800601a:	48ad      	ldr	r0, [pc, #692]	@ (80062d0 <RI_SetRegisterMotor1+0x368>)
 800601c:	b229      	sxth	r1, r5
 800601e:	f003 fbb3 	bl	8009788 <PID_SetKP>
  uint8_t retVal = MCP_CMD_OK;
 8006022:	2000      	movs	r0, #0
      *size = 2;
 8006024:	2302      	movs	r3, #2
 8006026:	8023      	strh	r3, [r4, #0]
}
 8006028:	b004      	add	sp, #16
 800602a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  *size= 1U ; /* /0 is the min String size */
 800602e:	2001      	movs	r0, #1
 8006030:	8020      	strh	r0, [r4, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8006032:	f992 3000 	ldrsb.w	r3, [r2]
 8006036:	2b00      	cmp	r3, #0
 8006038:	f000 8290 	beq.w	800655c <RI_SetRegisterMotor1+0x5f4>
 800603c:	fa1f f38c 	uxth.w	r3, ip
 8006040:	e005      	b.n	800604e <RI_SetRegisterMotor1+0xe6>
    *size = *size + 1U;
 8006042:	8020      	strh	r0, [r4, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8006044:	f915 1f01 	ldrsb.w	r1, [r5, #1]!
 8006048:	2900      	cmp	r1, #0
 800604a:	f000 8287 	beq.w	800655c <RI_SetRegisterMotor1+0x5f4>
    *size = *size + 1U;
 800604e:	f100 0c01 	add.w	ip, r0, #1
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8006052:	4283      	cmp	r3, r0
    *size = *size + 1U;
 8006054:	fa1f f08c 	uxth.w	r0, ip
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8006058:	d8f3      	bhi.n	8006042 <RI_SetRegisterMotor1+0xda>
 800605a:	e270      	b.n	800653e <RI_SetRegisterMotor1+0x5d6>
      uint16_t rawSize = *(uint16_t *)data; //cstat !MISRAC2012-Rule-11.3
 800605c:	8811      	ldrh	r1, [r2, #0]
      *size = rawSize + 2U;
 800605e:	1c8a      	adds	r2, r1, #2
 8006060:	b292      	uxth	r2, r2
      if (*size > (uint16_t)dataAvailable)
 8006062:	fa1f f38c 	uxth.w	r3, ip
 8006066:	429a      	cmp	r2, r3
      *size = rawSize + 2U;
 8006068:	8022      	strh	r2, [r4, #0]
      if (*size > (uint16_t)dataAvailable)
 800606a:	f200 827a 	bhi.w	8006562 <RI_SetRegisterMotor1+0x5fa>
        switch (regID)
 800606e:	f5b0 7f0a 	cmp.w	r0, #552	@ 0x228
 8006072:	f000 82c1 	beq.w	80065f8 <RI_SetRegisterMotor1+0x690>
 8006076:	f200 8264 	bhi.w	8006542 <RI_SetRegisterMotor1+0x5da>
 800607a:	f5b0 7fd4 	cmp.w	r0, #424	@ 0x1a8
 800607e:	f000 82ae 	beq.w	80065de <RI_SetRegisterMotor1+0x676>
 8006082:	f240 8257 	bls.w	8006534 <RI_SetRegisterMotor1+0x5cc>
 8006086:	f5b0 7ff4 	cmp.w	r0, #488	@ 0x1e8
 800608a:	f040 824f 	bne.w	800652c <RI_SetRegisterMotor1+0x5c4>
            MCI_ExecTorqueRamp(pMCIN, (int16_t)torque, duration);
 800608e:	88ea      	ldrh	r2, [r5, #6]
 8006090:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8006094:	488f      	ldr	r0, [pc, #572]	@ (80062d4 <RI_SetRegisterMotor1+0x36c>)
 8006096:	f7fe fc59 	bl	800494c <MCI_ExecTorqueRamp>
  uint8_t retVal = MCP_CMD_OK;
 800609a:	2000      	movs	r0, #0
 800609c:	e784      	b.n	8005fa8 <RI_SetRegisterMotor1+0x40>
      uint32_t regdata32 = *(uint32_t *)data; //cstat !MISRAC2012-Rule-11.3
 800609e:	f641 0318 	movw	r3, #6168	@ 0x1818
 80060a2:	4298      	cmp	r0, r3
 80060a4:	6811      	ldr	r1, [r2, #0]
      switch (regID)
 80060a6:	f000 82d2 	beq.w	800664e <RI_SetRegisterMotor1+0x6e6>
 80060aa:	d937      	bls.n	800611c <RI_SetRegisterMotor1+0x1b4>
 80060ac:	f641 03d8 	movw	r3, #6360	@ 0x18d8
 80060b0:	4298      	cmp	r0, r3
 80060b2:	f000 82c8 	beq.w	8006646 <RI_SetRegisterMotor1+0x6de>
 80060b6:	d91e      	bls.n	80060f6 <RI_SetRegisterMotor1+0x18e>
 80060b8:	f641 13d8 	movw	r3, #6616	@ 0x19d8
 80060bc:	4298      	cmp	r0, r3
 80060be:	f000 822d 	beq.w	800651c <RI_SetRegisterMotor1+0x5b4>
 80060c2:	d90e      	bls.n	80060e2 <RI_SetRegisterMotor1+0x17a>
 80060c4:	f641 5318 	movw	r3, #7448	@ 0x1d18
 80060c8:	4298      	cmp	r0, r3
 80060ca:	d17b      	bne.n	80061c4 <RI_SetRegisterMotor1+0x25c>
          SCC_SetResistorOffset(&SCC,fregdata);
 80060cc:	ee00 1a10 	vmov	s0, r1
 80060d0:	4881      	ldr	r0, [pc, #516]	@ (80062d8 <RI_SetRegisterMotor1+0x370>)
 80060d2:	f7fc fd10 	bl	8002af6 <SCC_SetResistorOffset>
  uint8_t retVal = MCP_CMD_OK;
 80060d6:	2000      	movs	r0, #0
      *size = 4;
 80060d8:	2304      	movs	r3, #4
 80060da:	8023      	strh	r3, [r4, #0]
}
 80060dc:	b004      	add	sp, #16
 80060de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060e2:	f641 1318 	movw	r3, #6424	@ 0x1918
 80060e6:	4298      	cmp	r0, r3
 80060e8:	d123      	bne.n	8006132 <RI_SetRegisterMotor1+0x1ca>
          SCC_SetCurrentBandwidth(&SCC, fregdata);
 80060ea:	ee00 1a10 	vmov	s0, r1
 80060ee:	487a      	ldr	r0, [pc, #488]	@ (80062d8 <RI_SetRegisterMotor1+0x370>)
 80060f0:	f7fc fc8c 	bl	8002a0c <SCC_SetCurrentBandwidth>
          break;
 80060f4:	e7ef      	b.n	80060d6 <RI_SetRegisterMotor1+0x16e>
 80060f6:	f641 0358 	movw	r3, #6232	@ 0x1858
 80060fa:	4298      	cmp	r0, r3
 80060fc:	f000 82b7 	beq.w	800666e <RI_SetRegisterMotor1+0x706>
 8006100:	f641 0398 	movw	r3, #6296	@ 0x1898
 8006104:	4298      	cmp	r0, r3
 8006106:	d105      	bne.n	8006114 <RI_SetRegisterMotor1+0x1ac>
          SCC_SetLdLqRatio(&SCC, fregdata);
 8006108:	ee00 1a10 	vmov	s0, r1
 800610c:	4872      	ldr	r0, [pc, #456]	@ (80062d8 <RI_SetRegisterMotor1+0x370>)
 800610e:	f7fc fc22 	bl	8002956 <SCC_SetLdLqRatio>
          break;
 8006112:	e7e0      	b.n	80060d6 <RI_SetRegisterMotor1+0x16e>
      *size = 4;
 8006114:	2304      	movs	r3, #4
 8006116:	2005      	movs	r0, #5
 8006118:	8023      	strh	r3, [r4, #0]
      break;
 800611a:	e7df      	b.n	80060dc <RI_SetRegisterMotor1+0x174>
 800611c:	f5b0 7f06 	cmp.w	r0, #536	@ 0x218
 8006120:	f000 82a2 	beq.w	8006668 <RI_SetRegisterMotor1+0x700>
 8006124:	d925      	bls.n	8006172 <RI_SetRegisterMotor1+0x20a>
 8006126:	f5b0 7f16 	cmp.w	r0, #600	@ 0x258
 800612a:	d112      	bne.n	8006152 <RI_SetRegisterMotor1+0x1ea>
          FF_M1.wConstant_2 = (int32_t)regdata32;
 800612c:	4b6b      	ldr	r3, [pc, #428]	@ (80062dc <RI_SetRegisterMotor1+0x374>)
 800612e:	6159      	str	r1, [r3, #20]
          break;
 8006130:	e7d1      	b.n	80060d6 <RI_SetRegisterMotor1+0x16e>
 8006132:	f641 1317 	movw	r3, #6423	@ 0x1917
 8006136:	4298      	cmp	r0, r3
 8006138:	d9ec      	bls.n	8006114 <RI_SetRegisterMotor1+0x1ac>
 800613a:	f641 1358 	movw	r3, #6488	@ 0x1958
 800613e:	4298      	cmp	r0, r3
 8006140:	f000 81ec 	beq.w	800651c <RI_SetRegisterMotor1+0x5b4>
 8006144:	f641 1398 	movw	r3, #6552	@ 0x1998
 8006148:	4298      	cmp	r0, r3
 800614a:	bf0c      	ite	eq
 800614c:	2004      	moveq	r0, #4
 800614e:	2005      	movne	r0, #5
 8006150:	e7c2      	b.n	80060d8 <RI_SetRegisterMotor1+0x170>
 8006152:	d3df      	bcc.n	8006114 <RI_SetRegisterMotor1+0x1ac>
 8006154:	f241 7358 	movw	r3, #5976	@ 0x1758
 8006158:	4298      	cmp	r0, r3
 800615a:	f000 81df 	beq.w	800651c <RI_SetRegisterMotor1+0x5b4>
 800615e:	d916      	bls.n	800618e <RI_SetRegisterMotor1+0x226>
 8006160:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 8006164:	f241 7398 	movw	r3, #6040	@ 0x1798
 8006168:	4298      	cmp	r0, r3
 800616a:	bf0c      	ite	eq
 800616c:	2004      	moveq	r0, #4
 800616e:	2005      	movne	r0, #5
 8006170:	e7b2      	b.n	80060d8 <RI_SetRegisterMotor1+0x170>
 8006172:	28d8      	cmp	r0, #216	@ 0xd8
 8006174:	f000 81d2 	beq.w	800651c <RI_SetRegisterMotor1+0x5b4>
 8006178:	d915      	bls.n	80061a6 <RI_SetRegisterMotor1+0x23e>
 800617a:	f5b0 7f8c 	cmp.w	r0, #280	@ 0x118
 800617e:	f000 81cd 	beq.w	800651c <RI_SetRegisterMotor1+0x5b4>
 8006182:	f5b0 7fec 	cmp.w	r0, #472	@ 0x1d8
 8006186:	d1c5      	bne.n	8006114 <RI_SetRegisterMotor1+0x1ac>
          FF_M1.wConstant_1Q = (int32_t)regdata32;
 8006188:	4b54      	ldr	r3, [pc, #336]	@ (80062dc <RI_SetRegisterMotor1+0x374>)
 800618a:	6119      	str	r1, [r3, #16]
          break;
 800618c:	e7a3      	b.n	80060d6 <RI_SetRegisterMotor1+0x16e>
 800618e:	f241 63d8 	movw	r3, #5848	@ 0x16d8
 8006192:	4298      	cmp	r0, r3
 8006194:	f000 81c2 	beq.w	800651c <RI_SetRegisterMotor1+0x5b4>
 8006198:	f241 7318 	movw	r3, #5912	@ 0x1718
 800619c:	4298      	cmp	r0, r3
 800619e:	bf0c      	ite	eq
 80061a0:	2004      	moveq	r0, #4
 80061a2:	2005      	movne	r0, #5
 80061a4:	e798      	b.n	80060d8 <RI_SetRegisterMotor1+0x170>
 80061a6:	2898      	cmp	r0, #152	@ 0x98
 80061a8:	f040 8190 	bne.w	80064cc <RI_SetRegisterMotor1+0x564>
          MCI_ExecSpeedRamp(pMCIN,((((int16_t)regdata32) * ((int16_t)SPEED_UNIT)) / (int16_t)U_RPM), 0);
 80061ac:	4b4c      	ldr	r3, [pc, #304]	@ (80062e0 <RI_SetRegisterMotor1+0x378>)
 80061ae:	4849      	ldr	r0, [pc, #292]	@ (80062d4 <RI_SetRegisterMotor1+0x36c>)
 80061b0:	b209      	sxth	r1, r1
 80061b2:	fb83 2301 	smull	r2, r3, r3, r1
 80061b6:	eba3 71e1 	sub.w	r1, r3, r1, asr #31
 80061ba:	2200      	movs	r2, #0
 80061bc:	b209      	sxth	r1, r1
 80061be:	f7fe fbbb 	bl	8004938 <MCI_ExecSpeedRamp>
          break;
 80061c2:	e788      	b.n	80060d6 <RI_SetRegisterMotor1+0x16e>
 80061c4:	d8a6      	bhi.n	8006114 <RI_SetRegisterMotor1+0x1ac>
 80061c6:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 80061ca:	f641 2318 	movw	r3, #6680	@ 0x1a18
 80061ce:	4298      	cmp	r0, r3
 80061d0:	bf0c      	ite	eq
 80061d2:	2004      	moveq	r0, #4
 80061d4:	2005      	movne	r0, #5
 80061d6:	e77f      	b.n	80060d8 <RI_SetRegisterMotor1+0x170>
 80061d8:	28d0      	cmp	r0, #208	@ 0xd0
 80061da:	f000 8275 	beq.w	80066c8 <RI_SetRegisterMotor1+0x760>
 80061de:	f5b0 7f88 	cmp.w	r0, #272	@ 0x110
 80061e2:	f040 815a 	bne.w	800649a <RI_SetRegisterMotor1+0x532>
          PID_SetKD(&PIDSpeedHandle_M1, (int16_t)regdata16);
 80061e6:	483f      	ldr	r0, [pc, #252]	@ (80062e4 <RI_SetRegisterMotor1+0x37c>)
 80061e8:	b229      	sxth	r1, r5
 80061ea:	f003 fb03 	bl	80097f4 <PID_SetKD>
          break;
 80061ee:	e718      	b.n	8006022 <RI_SetRegisterMotor1+0xba>
 80061f0:	f5b0 6f8a 	cmp.w	r0, #1104	@ 0x450
 80061f4:	f000 8272 	beq.w	80066dc <RI_SetRegisterMotor1+0x774>
 80061f8:	d915      	bls.n	8006226 <RI_SetRegisterMotor1+0x2be>
 80061fa:	f5b0 6f01 	cmp.w	r0, #2064	@ 0x810
 80061fe:	d00e      	beq.n	800621e <RI_SetRegisterMotor1+0x2b6>
 8006200:	d978      	bls.n	80062f4 <RI_SetRegisterMotor1+0x38c>
 8006202:	f5b0 6f15 	cmp.w	r0, #2384	@ 0x950
 8006206:	d157      	bne.n	80062b8 <RI_SetRegisterMotor1+0x350>
          currComp = MCI_GetIqdref(pMCIN);
 8006208:	4832      	ldr	r0, [pc, #200]	@ (80062d4 <RI_SetRegisterMotor1+0x36c>)
 800620a:	f7fe fcdd 	bl	8004bc8 <MCI_GetIqdref>
 800620e:	9001      	str	r0, [sp, #4]
          currComp.q = (int16_t)regdata16;
 8006210:	f8ad 5004 	strh.w	r5, [sp, #4]
          MCI_SetCurrentReferences(pMCIN,currComp);
 8006214:	9901      	ldr	r1, [sp, #4]
 8006216:	482f      	ldr	r0, [pc, #188]	@ (80062d4 <RI_SetRegisterMotor1+0x36c>)
 8006218:	f7fe fba2 	bl	8004960 <MCI_SetCurrentReferences>
          break;
 800621c:	e701      	b.n	8006022 <RI_SetRegisterMotor1+0xba>
      *size = 2;
 800621e:	2302      	movs	r3, #2
 8006220:	2004      	movs	r0, #4
 8006222:	8023      	strh	r3, [r4, #0]
      break;
 8006224:	e700      	b.n	8006028 <RI_SetRegisterMotor1+0xc0>
 8006226:	f5b0 7f54 	cmp.w	r0, #848	@ 0x350
 800622a:	f000 8240 	beq.w	80066ae <RI_SetRegisterMotor1+0x746>
 800622e:	f5b0 7f64 	cmp.w	r0, #912	@ 0x390
 8006232:	f040 8090 	bne.w	8006356 <RI_SetRegisterMotor1+0x3ee>
          STO_PLL_GetObserverGains(&STO_PLL_M1, &hC1, &hC2);
 8006236:	aa01      	add	r2, sp, #4
 8006238:	f10d 0102 	add.w	r1, sp, #2
 800623c:	482a      	ldr	r0, [pc, #168]	@ (80062e8 <RI_SetRegisterMotor1+0x380>)
 800623e:	f004 fead 	bl	800af9c <STO_PLL_GetObserverGains>
          STO_PLL_SetObserverGains(&STO_PLL_M1, hC1, (int16_t)regdata16);
 8006242:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 8006246:	4828      	ldr	r0, [pc, #160]	@ (80062e8 <RI_SetRegisterMotor1+0x380>)
 8006248:	b22a      	sxth	r2, r5
 800624a:	f004 feaf 	bl	800afac <STO_PLL_SetObserverGains>
          break;
 800624e:	e6e8      	b.n	8006022 <RI_SetRegisterMotor1+0xba>
 8006250:	f241 5390 	movw	r3, #5520	@ 0x1590
 8006254:	4298      	cmp	r0, r3
 8006256:	f000 824b 	beq.w	80066f0 <RI_SetRegisterMotor1+0x788>
 800625a:	d968      	bls.n	800632e <RI_SetRegisterMotor1+0x3c6>
 800625c:	f641 03d0 	movw	r3, #6352	@ 0x18d0
 8006260:	4298      	cmp	r0, r3
 8006262:	f000 8240 	beq.w	80066e6 <RI_SetRegisterMotor1+0x77e>
 8006266:	d919      	bls.n	800629c <RI_SetRegisterMotor1+0x334>
 8006268:	f641 4310 	movw	r3, #7184	@ 0x1c10
 800626c:	4298      	cmp	r0, r3
 800626e:	f000 8259 	beq.w	8006724 <RI_SetRegisterMotor1+0x7bc>
 8006272:	d90a      	bls.n	800628a <RI_SetRegisterMotor1+0x322>
 8006274:	f641 4350 	movw	r3, #7248	@ 0x1c50
 8006278:	4298      	cmp	r0, r3
 800627a:	d104      	bne.n	8006286 <RI_SetRegisterMotor1+0x31e>
          SCC_SetUnderVoltageThreshold(&SCC,regdata16);
 800627c:	4816      	ldr	r0, [pc, #88]	@ (80062d8 <RI_SetRegisterMotor1+0x370>)
 800627e:	4629      	mov	r1, r5
 8006280:	f7fc fc2c 	bl	8002adc <SCC_SetUnderVoltageThreshold>
          break;
 8006284:	e6cd      	b.n	8006022 <RI_SetRegisterMotor1+0xba>
          retVal = MCP_ERROR_UNKNOWN_REG;
 8006286:	2005      	movs	r0, #5
 8006288:	e6cc      	b.n	8006024 <RI_SetRegisterMotor1+0xbc>
 800628a:	f641 1310 	movw	r3, #6416	@ 0x1910
 800628e:	4298      	cmp	r0, r3
 8006290:	d172      	bne.n	8006378 <RI_SetRegisterMotor1+0x410>
          PID_SetKPDivisorPOW2 (&(&STO_PLL_M1)->PIRegulator,regdata16);
 8006292:	4816      	ldr	r0, [pc, #88]	@ (80062ec <RI_SetRegisterMotor1+0x384>)
 8006294:	4629      	mov	r1, r5
 8006296:	f003 fa87 	bl	80097a8 <PID_SetKPDivisorPOW2>
          break;
 800629a:	e6c2      	b.n	8006022 <RI_SetRegisterMotor1+0xba>
 800629c:	f241 6310 	movw	r3, #5648	@ 0x1610
 80062a0:	4298      	cmp	r0, r3
 80062a2:	f000 81fa 	beq.w	800669a <RI_SetRegisterMotor1+0x732>
 80062a6:	f241 6350 	movw	r3, #5712	@ 0x1650
 80062aa:	4298      	cmp	r0, r3
 80062ac:	d15b      	bne.n	8006366 <RI_SetRegisterMotor1+0x3fe>
          PID_SetKDDivisorPOW2(&PIDIqHandle_M1, regdata16);
 80062ae:	4810      	ldr	r0, [pc, #64]	@ (80062f0 <RI_SetRegisterMotor1+0x388>)
 80062b0:	4629      	mov	r1, r5
 80062b2:	f003 faa7 	bl	8009804 <PID_SetKDDivisorPOW2>
          break;
 80062b6:	e6b4      	b.n	8006022 <RI_SetRegisterMotor1+0xba>
 80062b8:	d8e5      	bhi.n	8006286 <RI_SetRegisterMotor1+0x31e>
 80062ba:	f5b0 6f0d 	cmp.w	r0, #2256	@ 0x8d0
 80062be:	d0ae      	beq.n	800621e <RI_SetRegisterMotor1+0x2b6>
 80062c0:	d920      	bls.n	8006304 <RI_SetRegisterMotor1+0x39c>
          retVal = MCP_ERROR_UNKNOWN_REG;
 80062c2:	f5b0 6f11 	cmp.w	r0, #2320	@ 0x910
 80062c6:	bf0c      	ite	eq
 80062c8:	2004      	moveq	r0, #4
 80062ca:	2005      	movne	r0, #5
 80062cc:	e6aa      	b.n	8006024 <RI_SetRegisterMotor1+0xbc>
 80062ce:	bf00      	nop
 80062d0:	20000990 	.word	0x20000990
 80062d4:	20000d30 	.word	0x20000d30
 80062d8:	200000cc 	.word	0x200000cc
 80062dc:	20000958 	.word	0x20000958
 80062e0:	2aaaaaab 	.word	0x2aaaaaab
 80062e4:	200009e8 	.word	0x200009e8
 80062e8:	200006a8 	.word	0x200006a8
 80062ec:	200006dc 	.word	0x200006dc
 80062f0:	200009bc 	.word	0x200009bc
 80062f4:	f5b0 6f92 	cmp.w	r0, #1168	@ 0x490
 80062f8:	d10d      	bne.n	8006316 <RI_SetRegisterMotor1+0x3ae>
          PID_SetKP (&(&STO_PLL_M1)->PIRegulator, (int16_t)regdata16);
 80062fa:	48a5      	ldr	r0, [pc, #660]	@ (8006590 <RI_SetRegisterMotor1+0x628>)
 80062fc:	b229      	sxth	r1, r5
 80062fe:	f003 fa43 	bl	8009788 <PID_SetKP>
          break;
 8006302:	e68e      	b.n	8006022 <RI_SetRegisterMotor1+0xba>
 8006304:	f5b0 6f05 	cmp.w	r0, #2128	@ 0x850
 8006308:	d089      	beq.n	800621e <RI_SetRegisterMotor1+0x2b6>
          retVal = MCP_ERROR_UNKNOWN_REG;
 800630a:	f5b0 6f09 	cmp.w	r0, #2192	@ 0x890
 800630e:	bf0c      	ite	eq
 8006310:	2004      	moveq	r0, #4
 8006312:	2005      	movne	r0, #5
 8006314:	e686      	b.n	8006024 <RI_SetRegisterMotor1+0xbc>
 8006316:	d3b6      	bcc.n	8006286 <RI_SetRegisterMotor1+0x31e>
 8006318:	f5b0 6ff2 	cmp.w	r0, #1936	@ 0x790
 800631c:	f43f af7f 	beq.w	800621e <RI_SetRegisterMotor1+0x2b6>
 8006320:	d93d      	bls.n	800639e <RI_SetRegisterMotor1+0x436>
 8006322:	f5b0 6ffa 	cmp.w	r0, #2000	@ 0x7d0
 8006326:	bf0c      	ite	eq
 8006328:	2004      	moveq	r0, #4
 800632a:	2005      	movne	r0, #5
 800632c:	e67a      	b.n	8006024 <RI_SetRegisterMotor1+0xbc>
 800632e:	f241 4390 	movw	r3, #5264	@ 0x1490
 8006332:	4298      	cmp	r0, r3
 8006334:	f000 81f1 	beq.w	800671a <RI_SetRegisterMotor1+0x7b2>
 8006338:	d943      	bls.n	80063c2 <RI_SetRegisterMotor1+0x45a>
 800633a:	f241 5310 	movw	r3, #5392	@ 0x1510
 800633e:	4298      	cmp	r0, r3
 8006340:	f000 81b0 	beq.w	80066a4 <RI_SetRegisterMotor1+0x73c>
 8006344:	f241 5350 	movw	r3, #5456	@ 0x1550
 8006348:	4298      	cmp	r0, r3
 800634a:	d130      	bne.n	80063ae <RI_SetRegisterMotor1+0x446>
          PID_SetKIDivisorPOW2(&PIDIdHandle_M1, regdata16);
 800634c:	4891      	ldr	r0, [pc, #580]	@ (8006594 <RI_SetRegisterMotor1+0x62c>)
 800634e:	4629      	mov	r1, r5
 8006350:	f003 fa38 	bl	80097c4 <PID_SetKIDivisorPOW2>
          break;
 8006354:	e665      	b.n	8006022 <RI_SetRegisterMotor1+0xba>
 8006356:	f5b0 7f44 	cmp.w	r0, #784	@ 0x310
 800635a:	d194      	bne.n	8006286 <RI_SetRegisterMotor1+0x31e>
          PID_SetKD(&PIDIdHandle_M1, (int16_t)regdata16);
 800635c:	488d      	ldr	r0, [pc, #564]	@ (8006594 <RI_SetRegisterMotor1+0x62c>)
 800635e:	b229      	sxth	r1, r5
 8006360:	f003 fa48 	bl	80097f4 <PID_SetKD>
          break;
 8006364:	e65d      	b.n	8006022 <RI_SetRegisterMotor1+0xba>
 8006366:	f241 53d0 	movw	r3, #5584	@ 0x15d0
 800636a:	4298      	cmp	r0, r3
 800636c:	d18b      	bne.n	8006286 <RI_SetRegisterMotor1+0x31e>
          PID_SetKPDivisorPOW2(&PIDIqHandle_M1, regdata16);
 800636e:	488a      	ldr	r0, [pc, #552]	@ (8006598 <RI_SetRegisterMotor1+0x630>)
 8006370:	4629      	mov	r1, r5
 8006372:	f003 fa19 	bl	80097a8 <PID_SetKPDivisorPOW2>
          break;
 8006376:	e654      	b.n	8006022 <RI_SetRegisterMotor1+0xba>
 8006378:	f641 130f 	movw	r3, #6415	@ 0x190f
 800637c:	4298      	cmp	r0, r3
 800637e:	d982      	bls.n	8006286 <RI_SetRegisterMotor1+0x31e>
 8006380:	f641 3358 	movw	r3, #7000	@ 0x1b58
 8006384:	4298      	cmp	r0, r3
 8006386:	f43f af4a 	beq.w	800621e <RI_SetRegisterMotor1+0x2b6>
 800638a:	d928      	bls.n	80063de <RI_SetRegisterMotor1+0x476>
 800638c:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 8006390:	f641 3390 	movw	r3, #7056	@ 0x1b90
          retVal = MCP_ERROR_UNKNOWN_REG;
 8006394:	4298      	cmp	r0, r3
 8006396:	bf0c      	ite	eq
 8006398:	2004      	moveq	r0, #4
 800639a:	2005      	movne	r0, #5
 800639c:	e642      	b.n	8006024 <RI_SetRegisterMotor1+0xbc>
 800639e:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 80063a2:	f5b0 6fb2 	cmp.w	r0, #1424	@ 0x590
 80063a6:	bf0c      	ite	eq
 80063a8:	2004      	moveq	r0, #4
 80063aa:	2005      	movne	r0, #5
 80063ac:	e63a      	b.n	8006024 <RI_SetRegisterMotor1+0xbc>
 80063ae:	f241 43d0 	movw	r3, #5328	@ 0x14d0
 80063b2:	4298      	cmp	r0, r3
 80063b4:	f47f af67 	bne.w	8006286 <RI_SetRegisterMotor1+0x31e>
          PID_SetKDDivisorPOW2(&PIDSpeedHandle_M1, regdata16);
 80063b8:	4878      	ldr	r0, [pc, #480]	@ (800659c <RI_SetRegisterMotor1+0x634>)
 80063ba:	4629      	mov	r1, r5
 80063bc:	f003 fa22 	bl	8009804 <PID_SetKDDivisorPOW2>
          break;
 80063c0:	e62f      	b.n	8006022 <RI_SetRegisterMotor1+0xba>
 80063c2:	f5b0 6f69 	cmp.w	r0, #3728	@ 0xe90
 80063c6:	f43f ae2c 	beq.w	8006022 <RI_SetRegisterMotor1+0xba>
 80063ca:	d92a      	bls.n	8006422 <RI_SetRegisterMotor1+0x4ba>
 80063cc:	f241 4350 	movw	r3, #5200	@ 0x1450
 80063d0:	4298      	cmp	r0, r3
 80063d2:	d112      	bne.n	80063fa <RI_SetRegisterMotor1+0x492>
          PID_SetKPDivisorPOW2(&PIDSpeedHandle_M1, regdata16);
 80063d4:	4871      	ldr	r0, [pc, #452]	@ (800659c <RI_SetRegisterMotor1+0x634>)
 80063d6:	4629      	mov	r1, r5
 80063d8:	f003 f9e6 	bl	80097a8 <PID_SetKPDivisorPOW2>
          break;
 80063dc:	e621      	b.n	8006022 <RI_SetRegisterMotor1+0xba>
 80063de:	f020 0340 	bic.w	r3, r0, #64	@ 0x40
 80063e2:	f641 3210 	movw	r2, #6928	@ 0x1b10
 80063e6:	4293      	cmp	r3, r2
 80063e8:	f43f af19 	beq.w	800621e <RI_SetRegisterMotor1+0x2b6>
 80063ec:	f641 2390 	movw	r3, #6800	@ 0x1a90
          retVal = MCP_ERROR_UNKNOWN_REG;
 80063f0:	4298      	cmp	r0, r3
 80063f2:	bf0c      	ite	eq
 80063f4:	2004      	moveq	r0, #4
 80063f6:	2005      	movne	r0, #5
 80063f8:	e614      	b.n	8006024 <RI_SetRegisterMotor1+0xbc>
 80063fa:	f63f af44 	bhi.w	8006286 <RI_SetRegisterMotor1+0x31e>
 80063fe:	f241 0310 	movw	r3, #4112	@ 0x1010
 8006402:	4298      	cmp	r0, r3
 8006404:	f43f af0b 	beq.w	800621e <RI_SetRegisterMotor1+0x2b6>
 8006408:	d921      	bls.n	800644e <RI_SetRegisterMotor1+0x4e6>
 800640a:	f241 0350 	movw	r3, #4176	@ 0x1050
 800640e:	4298      	cmp	r0, r3
 8006410:	f43f af05 	beq.w	800621e <RI_SetRegisterMotor1+0x2b6>
 8006414:	f241 3350 	movw	r3, #4944	@ 0x1350
 8006418:	4298      	cmp	r0, r3
 800641a:	bf0c      	ite	eq
 800641c:	2004      	moveq	r0, #4
 800641e:	2005      	movne	r0, #5
 8006420:	e600      	b.n	8006024 <RI_SetRegisterMotor1+0xbc>
 8006422:	f5b0 6f65 	cmp.w	r0, #3664	@ 0xe50
 8006426:	f43f adfc 	beq.w	8006022 <RI_SetRegisterMotor1+0xba>
 800642a:	f63f af2c 	bhi.w	8006286 <RI_SetRegisterMotor1+0x31e>
 800642e:	f5b0 6f39 	cmp.w	r0, #2960	@ 0xb90
 8006432:	f43f aef4 	beq.w	800621e <RI_SetRegisterMotor1+0x2b6>
 8006436:	d91c      	bls.n	8006472 <RI_SetRegisterMotor1+0x50a>
 8006438:	f5b0 6f45 	cmp.w	r0, #3152	@ 0xc50
 800643c:	f43f aeef 	beq.w	800621e <RI_SetRegisterMotor1+0x2b6>
 8006440:	d90d      	bls.n	800645e <RI_SetRegisterMotor1+0x4f6>
 8006442:	f5b0 6f49 	cmp.w	r0, #3216	@ 0xc90
 8006446:	bf0c      	ite	eq
 8006448:	2004      	moveq	r0, #4
 800644a:	2005      	movne	r0, #5
 800644c:	e5ea      	b.n	8006024 <RI_SetRegisterMotor1+0xbc>
 800644e:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 8006452:	f5b0 6f79 	cmp.w	r0, #3984	@ 0xf90
 8006456:	bf0c      	ite	eq
 8006458:	2004      	moveq	r0, #4
 800645a:	2005      	movne	r0, #5
 800645c:	e5e2      	b.n	8006024 <RI_SetRegisterMotor1+0xbc>
 800645e:	f5b0 6f3d 	cmp.w	r0, #3024	@ 0xbd0
 8006462:	f43f aedc 	beq.w	800621e <RI_SetRegisterMotor1+0x2b6>
 8006466:	f5b0 6f41 	cmp.w	r0, #3088	@ 0xc10
 800646a:	bf0c      	ite	eq
 800646c:	2004      	moveq	r0, #4
 800646e:	2005      	movne	r0, #5
 8006470:	e5d8      	b.n	8006024 <RI_SetRegisterMotor1+0xbc>
 8006472:	f5b0 6f25 	cmp.w	r0, #2640	@ 0xa50
 8006476:	f43f aed2 	beq.w	800621e <RI_SetRegisterMotor1+0x2b6>
 800647a:	d939      	bls.n	80064f0 <RI_SetRegisterMotor1+0x588>
 800647c:	f5b0 6f29 	cmp.w	r0, #2704	@ 0xa90
 8006480:	f43f aecd 	beq.w	800621e <RI_SetRegisterMotor1+0x2b6>
 8006484:	f5b0 6f35 	cmp.w	r0, #2896	@ 0xb50
 8006488:	bf0c      	ite	eq
 800648a:	2004      	moveq	r0, #4
 800648c:	2005      	movne	r0, #5
 800648e:	e5c9      	b.n	8006024 <RI_SetRegisterMotor1+0xbc>
 8006490:	2848      	cmp	r0, #72	@ 0x48
 8006492:	bf0c      	ite	eq
 8006494:	2004      	moveq	r0, #4
 8006496:	2005      	movne	r0, #5
 8006498:	e59f      	b.n	8005fda <RI_SetRegisterMotor1+0x72>
 800649a:	2890      	cmp	r0, #144	@ 0x90
 800649c:	f47f aef3 	bne.w	8006286 <RI_SetRegisterMotor1+0x31e>
          PID_SetKP(&PIDSpeedHandle_M1, (int16_t)regdata16);
 80064a0:	483e      	ldr	r0, [pc, #248]	@ (800659c <RI_SetRegisterMotor1+0x634>)
 80064a2:	b229      	sxth	r1, r5
 80064a4:	f003 f970 	bl	8009788 <PID_SetKP>
          break;
 80064a8:	e5bb      	b.n	8006022 <RI_SetRegisterMotor1+0xba>
 80064aa:	28c8      	cmp	r0, #200	@ 0xc8
 80064ac:	d038      	beq.n	8006520 <RI_SetRegisterMotor1+0x5b8>
 80064ae:	f5b0 7f72 	cmp.w	r0, #968	@ 0x3c8
 80064b2:	bf0c      	ite	eq
 80064b4:	2004      	moveq	r0, #4
 80064b6:	2005      	movne	r0, #5
 80064b8:	e58f      	b.n	8005fda <RI_SetRegisterMotor1+0x72>
 80064ba:	f5b0 7fe8 	cmp.w	r0, #464	@ 0x1d0
 80064be:	f47f aee2 	bne.w	8006286 <RI_SetRegisterMotor1+0x31e>
          PID_SetKI(&PIDIqHandle_M1, (int16_t)regdata16);
 80064c2:	4835      	ldr	r0, [pc, #212]	@ (8006598 <RI_SetRegisterMotor1+0x630>)
 80064c4:	b229      	sxth	r1, r5
 80064c6:	f003 f961 	bl	800978c <PID_SetKI>
          break;
 80064ca:	e5aa      	b.n	8006022 <RI_SetRegisterMotor1+0xba>
 80064cc:	f63f ae22 	bhi.w	8006114 <RI_SetRegisterMotor1+0x1ac>
 80064d0:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 80064d4:	2818      	cmp	r0, #24
 80064d6:	bf0c      	ite	eq
 80064d8:	2004      	moveq	r0, #4
 80064da:	2005      	movne	r0, #5
 80064dc:	e5fc      	b.n	80060d8 <RI_SetRegisterMotor1+0x170>
 80064de:	f5b0 6fe9 	cmp.w	r0, #1864	@ 0x748
 80064e2:	d10f      	bne.n	8006504 <RI_SetRegisterMotor1+0x59c>
          SCC_SetPBCharacterization(&SCC,regdataU8);
 80064e4:	7811      	ldrb	r1, [r2, #0]
 80064e6:	482e      	ldr	r0, [pc, #184]	@ (80065a0 <RI_SetRegisterMotor1+0x638>)
 80064e8:	f7fc fb00 	bl	8002aec <SCC_SetPBCharacterization>
  uint8_t retVal = MCP_CMD_OK;
 80064ec:	2000      	movs	r0, #0
 80064ee:	e574      	b.n	8005fda <RI_SetRegisterMotor1+0x72>
 80064f0:	f5b0 6f1d 	cmp.w	r0, #2512	@ 0x9d0
 80064f4:	f43f ae93 	beq.w	800621e <RI_SetRegisterMotor1+0x2b6>
          retVal = MCP_ERROR_UNKNOWN_REG;
 80064f8:	f5b0 6f21 	cmp.w	r0, #2576	@ 0xa10
 80064fc:	bf0c      	ite	eq
 80064fe:	2004      	moveq	r0, #4
 8006500:	2005      	movne	r0, #5
 8006502:	e58f      	b.n	8006024 <RI_SetRegisterMotor1+0xbc>
 8006504:	d901      	bls.n	800650a <RI_SetRegisterMotor1+0x5a2>
 8006506:	2005      	movs	r0, #5
 8006508:	e567      	b.n	8005fda <RI_SetRegisterMotor1+0x72>
 800650a:	f5b0 6f99 	cmp.w	r0, #1224	@ 0x4c8
 800650e:	d007      	beq.n	8006520 <RI_SetRegisterMotor1+0x5b8>
 8006510:	f5b0 6fa1 	cmp.w	r0, #1288	@ 0x508
 8006514:	bf0c      	ite	eq
 8006516:	2004      	moveq	r0, #4
 8006518:	2005      	movne	r0, #5
 800651a:	e55e      	b.n	8005fda <RI_SetRegisterMotor1+0x72>
          retVal = MCP_ERROR_RO_REG;
 800651c:	2004      	movs	r0, #4
 800651e:	e5db      	b.n	80060d8 <RI_SetRegisterMotor1+0x170>
            retVal = MCP_ERROR_RO_REG;
 8006520:	2004      	movs	r0, #4
 8006522:	e55a      	b.n	8005fda <RI_SetRegisterMotor1+0x72>
 8006524:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 8006528:	2828      	cmp	r0, #40	@ 0x28
 800652a:	d008      	beq.n	800653e <RI_SetRegisterMotor1+0x5d6>
 800652c:	2005      	movs	r0, #5
}
 800652e:	b004      	add	sp, #16
 8006530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006534:	28a8      	cmp	r0, #168	@ 0xa8
 8006536:	d002      	beq.n	800653e <RI_SetRegisterMotor1+0x5d6>
 8006538:	d9f4      	bls.n	8006524 <RI_SetRegisterMotor1+0x5bc>
 800653a:	28e8      	cmp	r0, #232	@ 0xe8
 800653c:	d1f6      	bne.n	800652c <RI_SetRegisterMotor1+0x5c4>
      retVal = MCP_ERROR_RO_REG;
 800653e:	2004      	movs	r0, #4
 8006540:	e532      	b.n	8005fa8 <RI_SetRegisterMotor1+0x40>
 8006542:	f5b0 7f5a 	cmp.w	r0, #872	@ 0x368
 8006546:	d043      	beq.n	80065d0 <RI_SetRegisterMotor1+0x668>
 8006548:	f5b0 6fa5 	cmp.w	r0, #1320	@ 0x528
 800654c:	d1ee      	bne.n	800652c <RI_SetRegisterMotor1+0x5c4>
            retVal =  MCPA_cfgLog (&MCPA_UART_A, rawData);
 800654e:	4815      	ldr	r0, [pc, #84]	@ (80065a4 <RI_SetRegisterMotor1+0x63c>)
 8006550:	1ca9      	adds	r1, r5, #2
}
 8006552:	b004      	add	sp, #16
 8006554:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            retVal =  MCPA_cfgLog (&MCPA_UART_A, rawData);
 8006558:	f003 b872 	b.w	8009640 <MCPA_cfgLog>
    *tempdestString = (int8_t)0;
 800655c:	2300      	movs	r3, #0
 800655e:	702b      	strb	r3, [r5, #0]
 8006560:	e7ed      	b.n	800653e <RI_SetRegisterMotor1+0x5d6>
        *size = 0;
 8006562:	2300      	movs	r3, #0
 8006564:	8023      	strh	r3, [r4, #0]
        retVal = MCP_ERROR_BAD_RAW_FORMAT; /* This error stop the parsing of the CMD buffer */
 8006566:	200a      	movs	r0, #10
 8006568:	e51e      	b.n	8005fa8 <RI_SetRegisterMotor1+0x40>
          uint8_t regdataU8 = *(uint8_t *)data;
 800656a:	7815      	ldrb	r5, [r2, #0]
          SPD_SetElToMecRatio(&STO_PLL_M1._Super, regdataU8);
 800656c:	480e      	ldr	r0, [pc, #56]	@ (80065a8 <RI_SetRegisterMotor1+0x640>)
 800656e:	4629      	mov	r1, r5
 8006570:	f004 f9a2 	bl	800a8b8 <SPD_SetElToMecRatio>
          SPD_SetElToMecRatio(&VirtualSpeedSensorM1._Super, regdataU8);
 8006574:	4629      	mov	r1, r5
 8006576:	480d      	ldr	r0, [pc, #52]	@ (80065ac <RI_SetRegisterMotor1+0x644>)
 8006578:	f004 f99e 	bl	800a8b8 <SPD_SetElToMecRatio>
          SCC_SetPolesPairs(&SCC, regdataU8);
 800657c:	4629      	mov	r1, r5
 800657e:	4808      	ldr	r0, [pc, #32]	@ (80065a0 <RI_SetRegisterMotor1+0x638>)
 8006580:	f7fc f9aa 	bl	80028d8 <SCC_SetPolesPairs>
          OTT_SetPolesPairs(&OTT, regdataU8);
 8006584:	480a      	ldr	r0, [pc, #40]	@ (80065b0 <RI_SetRegisterMotor1+0x648>)
 8006586:	4629      	mov	r1, r5
 8006588:	f7fa fa9d 	bl	8000ac6 <OTT_SetPolesPairs>
          break;
 800658c:	e7ae      	b.n	80064ec <RI_SetRegisterMotor1+0x584>
 800658e:	bf00      	nop
 8006590:	200006dc 	.word	0x200006dc
 8006594:	20000990 	.word	0x20000990
 8006598:	200009bc 	.word	0x200009bc
 800659c:	200009e8 	.word	0x200009e8
 80065a0:	200000cc 	.word	0x200000cc
 80065a4:	20000a98 	.word	0x20000a98
 80065a8:	200006a8 	.word	0x200006a8
 80065ac:	200007d0 	.word	0x200007d0
 80065b0:	20000014 	.word	0x20000014
          uint8_t regdata8 = *data;
 80065b4:	7813      	ldrb	r3, [r2, #0]
          if ((uint8_t)MCM_TORQUE_MODE == regdata8)
 80065b6:	2b04      	cmp	r3, #4
 80065b8:	d061      	beq.n	800667e <RI_SetRegisterMotor1+0x716>
          if ((uint8_t)MCM_SPEED_MODE == regdata8)
 80065ba:	2b03      	cmp	r3, #3
 80065bc:	d196      	bne.n	80064ec <RI_SetRegisterMotor1+0x584>
            MCI_ExecSpeedRamp(pMCIN, MCI_GetMecSpeedRefUnit(pMCIN), 0);
 80065be:	485c      	ldr	r0, [pc, #368]	@ (8006730 <RI_SetRegisterMotor1+0x7c8>)
 80065c0:	f7fe fad4 	bl	8004b6c <MCI_GetMecSpeedRefUnit>
 80065c4:	2200      	movs	r2, #0
 80065c6:	4601      	mov	r1, r0
 80065c8:	4859      	ldr	r0, [pc, #356]	@ (8006730 <RI_SetRegisterMotor1+0x7c8>)
 80065ca:	f7fe f9b5 	bl	8004938 <MCI_ExecSpeedRamp>
 80065ce:	e78d      	b.n	80064ec <RI_SetRegisterMotor1+0x584>
            currComp.q = *((int16_t *) rawData); //cstat !MISRAC2012-Rule-11.3
 80065d0:	f8d5 1002 	ldr.w	r1, [r5, #2]
            MCI_SetCurrentReferences(pMCIN, currComp);
 80065d4:	4856      	ldr	r0, [pc, #344]	@ (8006730 <RI_SetRegisterMotor1+0x7c8>)
            currComp.q = *((int16_t *) rawData); //cstat !MISRAC2012-Rule-11.3
 80065d6:	9101      	str	r1, [sp, #4]
            MCI_SetCurrentReferences(pMCIN, currComp);
 80065d8:	f7fe f9c2 	bl	8004960 <MCI_SetCurrentReferences>
            break;
 80065dc:	e55d      	b.n	800609a <RI_SetRegisterMotor1+0x132>
            MCI_ExecSpeedRamp(pMCIN, (int16_t)((rpm * SPEED_UNIT) / U_RPM), duration);
 80065de:	f8d5 1002 	ldr.w	r1, [r5, #2]
 80065e2:	4b54      	ldr	r3, [pc, #336]	@ (8006734 <RI_SetRegisterMotor1+0x7cc>)
 80065e4:	88ea      	ldrh	r2, [r5, #6]
 80065e6:	fb83 0301 	smull	r0, r3, r3, r1
 80065ea:	eba3 71e1 	sub.w	r1, r3, r1, asr #31
 80065ee:	4850      	ldr	r0, [pc, #320]	@ (8006730 <RI_SetRegisterMotor1+0x7c8>)
 80065f0:	b209      	sxth	r1, r1
 80065f2:	f7fe f9a1 	bl	8004938 <MCI_ExecSpeedRamp>
            break;
 80065f6:	e550      	b.n	800609a <RI_SetRegisterMotor1+0x132>
            if (((0U != ((rawSize) % 8U))) || ((nbrOfPhase > RUC_MAX_PHASE_NUMBER) != 0))
 80065f8:	f011 0607 	ands.w	r6, r1, #7
 80065fc:	d13d      	bne.n	800667a <RI_SetRegisterMotor1+0x712>
            uint8_t nbrOfPhase = (((uint8_t)rawSize) / 8U);
 80065fe:	b2c9      	uxtb	r1, r1
            if (((0U != ((rawSize) % 8U))) || ((nbrOfPhase > RUC_MAX_PHASE_NUMBER) != 0))
 8006600:	292f      	cmp	r1, #47	@ 0x2f
 8006602:	d83a      	bhi.n	800667a <RI_SetRegisterMotor1+0x712>
              for (i = 0; i <nbrOfPhase; i++)
 8006604:	08c9      	lsrs	r1, r1, #3
 8006606:	f43f ad48 	beq.w	800609a <RI_SetRegisterMotor1+0x132>
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 800660a:	f8df 8128 	ldr.w	r8, [pc, #296]	@ 8006734 <RI_SetRegisterMotor1+0x7cc>
              (void)RUC_SetPhase(&RevUpControlM1, i, &revUpPhase);
 800660e:	4f4a      	ldr	r7, [pc, #296]	@ (8006738 <RI_SetRegisterMotor1+0x7d0>)
 8006610:	eb05 04c1 	add.w	r4, r5, r1, lsl #3
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8006614:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
              revUpPhase.hFinalTorque = *((int16_t *) &rawData[4U + (i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 8006618:	88eb      	ldrh	r3, [r5, #6]
 800661a:	f8ad 3008 	strh.w	r3, [sp, #8]
              revUpPhase.hDurationms  = *((uint16_t *) &rawData[6U +(i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 800661e:	f835 3f08 	ldrh.w	r3, [r5, #8]!
 8006622:	f8ad 3004 	strh.w	r3, [sp, #4]
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8006626:	fb88 1302 	smull	r1, r3, r8, r2
 800662a:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
              (void)RUC_SetPhase(&RevUpControlM1, i, &revUpPhase);
 800662e:	b2f1      	uxtb	r1, r6
 8006630:	aa01      	add	r2, sp, #4
 8006632:	4638      	mov	r0, r7
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8006634:	f8ad 3006 	strh.w	r3, [sp, #6]
              (void)RUC_SetPhase(&RevUpControlM1, i, &revUpPhase);
 8006638:	f004 f8ce 	bl	800a7d8 <RUC_SetPhase>
              for (i = 0; i <nbrOfPhase; i++)
 800663c:	42a5      	cmp	r5, r4
 800663e:	f106 0601 	add.w	r6, r6, #1
 8006642:	d1e7      	bne.n	8006614 <RI_SetRegisterMotor1+0x6ac>
 8006644:	e529      	b.n	800609a <RI_SetRegisterMotor1+0x132>
          SCC_SetNominalSpeed (&SCC, (int32_t) regdata32);
 8006646:	483d      	ldr	r0, [pc, #244]	@ (800673c <RI_SetRegisterMotor1+0x7d4>)
 8006648:	f7fc f98c 	bl	8002964 <SCC_SetNominalSpeed>
          break;
 800664c:	e543      	b.n	80060d6 <RI_SetRegisterMotor1+0x16e>
          if(SCC.sm_state==SCC_IDLE || SCC_CALIBRATION_END==SCC.sm_state)
 800664e:	4b3b      	ldr	r3, [pc, #236]	@ (800673c <RI_SetRegisterMotor1+0x7d4>)
 8006650:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006654:	b113      	cbz	r3, 800665c <RI_SetRegisterMotor1+0x6f4>
 8006656:	2b0a      	cmp	r3, #10
 8006658:	f47f af60 	bne.w	800651c <RI_SetRegisterMotor1+0x5b4>
            SCC_SetNominalCurrent(&SCC, fregdata);
 800665c:	ee00 1a10 	vmov	s0, r1
 8006660:	4836      	ldr	r0, [pc, #216]	@ (800673c <RI_SetRegisterMotor1+0x7d4>)
 8006662:	f7fc f941 	bl	80028e8 <SCC_SetNominalCurrent>
          {
 8006666:	e536      	b.n	80060d6 <RI_SetRegisterMotor1+0x16e>
          FF_M1.wConstant_1D = (int32_t)regdata32;
 8006668:	4b35      	ldr	r3, [pc, #212]	@ (8006740 <RI_SetRegisterMotor1+0x7d8>)
 800666a:	60d9      	str	r1, [r3, #12]
          break;
 800666c:	e533      	b.n	80060d6 <RI_SetRegisterMotor1+0x16e>
          OTT_SetSpeedRegulatorBandwidth(&OTT, fregdata);
 800666e:	ee00 1a10 	vmov	s0, r1
 8006672:	4834      	ldr	r0, [pc, #208]	@ (8006744 <RI_SetRegisterMotor1+0x7dc>)
 8006674:	f7fa fa2d 	bl	8000ad2 <OTT_SetSpeedRegulatorBandwidth>
          break;
 8006678:	e52d      	b.n	80060d6 <RI_SetRegisterMotor1+0x16e>
              retVal = MCP_ERROR_BAD_RAW_FORMAT;
 800667a:	200a      	movs	r0, #10
            break;
 800667c:	e494      	b.n	8005fa8 <RI_SetRegisterMotor1+0x40>
            MCI_ExecTorqueRamp(pMCIN, MCI_GetTeref(pMCIN), 0);
 800667e:	482c      	ldr	r0, [pc, #176]	@ (8006730 <RI_SetRegisterMotor1+0x7c8>)
 8006680:	f7fe facc 	bl	8004c1c <MCI_GetTeref>
 8006684:	2200      	movs	r2, #0
 8006686:	4601      	mov	r1, r0
 8006688:	4829      	ldr	r0, [pc, #164]	@ (8006730 <RI_SetRegisterMotor1+0x7c8>)
 800668a:	f7fe f95f 	bl	800494c <MCI_ExecTorqueRamp>
          if ((uint8_t)MCM_SPEED_MODE == regdata8)
 800668e:	e72d      	b.n	80064ec <RI_SetRegisterMotor1+0x584>
          PID_SetKP(&PIDIqHandle_M1, (int16_t)regdata16);
 8006690:	482d      	ldr	r0, [pc, #180]	@ (8006748 <RI_SetRegisterMotor1+0x7e0>)
 8006692:	b229      	sxth	r1, r5
 8006694:	f003 f878 	bl	8009788 <PID_SetKP>
          break;
 8006698:	e4c3      	b.n	8006022 <RI_SetRegisterMotor1+0xba>
          PID_SetKIDivisorPOW2(&PIDIqHandle_M1, regdata16);
 800669a:	482b      	ldr	r0, [pc, #172]	@ (8006748 <RI_SetRegisterMotor1+0x7e0>)
 800669c:	4629      	mov	r1, r5
 800669e:	f003 f891 	bl	80097c4 <PID_SetKIDivisorPOW2>
          break;
 80066a2:	e4be      	b.n	8006022 <RI_SetRegisterMotor1+0xba>
          PID_SetKPDivisorPOW2(&PIDIdHandle_M1, regdata16);
 80066a4:	4829      	ldr	r0, [pc, #164]	@ (800674c <RI_SetRegisterMotor1+0x7e4>)
 80066a6:	4629      	mov	r1, r5
 80066a8:	f003 f87e 	bl	80097a8 <PID_SetKPDivisorPOW2>
          break;
 80066ac:	e4b9      	b.n	8006022 <RI_SetRegisterMotor1+0xba>
          STO_PLL_GetObserverGains(&STO_PLL_M1, &hC1, &hC2);
 80066ae:	aa01      	add	r2, sp, #4
 80066b0:	f10d 0102 	add.w	r1, sp, #2
 80066b4:	4826      	ldr	r0, [pc, #152]	@ (8006750 <RI_SetRegisterMotor1+0x7e8>)
 80066b6:	f004 fc71 	bl	800af9c <STO_PLL_GetObserverGains>
          STO_PLL_SetObserverGains(&STO_PLL_M1, (int16_t)regdata16, hC2);
 80066ba:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 80066be:	4824      	ldr	r0, [pc, #144]	@ (8006750 <RI_SetRegisterMotor1+0x7e8>)
 80066c0:	b229      	sxth	r1, r5
 80066c2:	f004 fc73 	bl	800afac <STO_PLL_SetObserverGains>
          break;
 80066c6:	e4ac      	b.n	8006022 <RI_SetRegisterMotor1+0xba>
          PID_SetKI(&PIDSpeedHandle_M1, (int16_t)regdata16);
 80066c8:	4822      	ldr	r0, [pc, #136]	@ (8006754 <RI_SetRegisterMotor1+0x7ec>)
 80066ca:	b229      	sxth	r1, r5
 80066cc:	f003 f85e 	bl	800978c <PID_SetKI>
          break;
 80066d0:	e4a7      	b.n	8006022 <RI_SetRegisterMotor1+0xba>
          PID_SetKD(&PIDIqHandle_M1, (int16_t)regdata16);
 80066d2:	481d      	ldr	r0, [pc, #116]	@ (8006748 <RI_SetRegisterMotor1+0x7e0>)
 80066d4:	b229      	sxth	r1, r5
 80066d6:	f003 f88d 	bl	80097f4 <PID_SetKD>
          break;
 80066da:	e4a2      	b.n	8006022 <RI_SetRegisterMotor1+0xba>
          PID_SetKI (&(&STO_PLL_M1)->PIRegulator, (int16_t)regdata16);
 80066dc:	481e      	ldr	r0, [pc, #120]	@ (8006758 <RI_SetRegisterMotor1+0x7f0>)
 80066de:	b229      	sxth	r1, r5
 80066e0:	f003 f854 	bl	800978c <PID_SetKI>
          break;
 80066e4:	e49d      	b.n	8006022 <RI_SetRegisterMotor1+0xba>
          PID_SetKIDivisorPOW2 (&(&STO_PLL_M1)->PIRegulator,regdata16);
 80066e6:	481c      	ldr	r0, [pc, #112]	@ (8006758 <RI_SetRegisterMotor1+0x7f0>)
 80066e8:	4629      	mov	r1, r5
 80066ea:	f003 f86b 	bl	80097c4 <PID_SetKIDivisorPOW2>
          break;
 80066ee:	e498      	b.n	8006022 <RI_SetRegisterMotor1+0xba>
          PID_SetKDDivisorPOW2(&PIDIdHandle_M1, regdata16);
 80066f0:	4816      	ldr	r0, [pc, #88]	@ (800674c <RI_SetRegisterMotor1+0x7e4>)
 80066f2:	4629      	mov	r1, r5
 80066f4:	f003 f886 	bl	8009804 <PID_SetKDDivisorPOW2>
          break;
 80066f8:	e493      	b.n	8006022 <RI_SetRegisterMotor1+0xba>
          PID_SetKI(&PIDIdHandle_M1, (int16_t)regdata16);
 80066fa:	4814      	ldr	r0, [pc, #80]	@ (800674c <RI_SetRegisterMotor1+0x7e4>)
 80066fc:	b229      	sxth	r1, r5
 80066fe:	f003 f845 	bl	800978c <PID_SetKI>
          break;
 8006702:	e48e      	b.n	8006022 <RI_SetRegisterMotor1+0xba>
          currComp = MCI_GetIqdref(pMCIN);
 8006704:	480a      	ldr	r0, [pc, #40]	@ (8006730 <RI_SetRegisterMotor1+0x7c8>)
 8006706:	f7fe fa5f 	bl	8004bc8 <MCI_GetIqdref>
 800670a:	9001      	str	r0, [sp, #4]
          currComp.d = (int16_t)regdata16;
 800670c:	f8ad 5006 	strh.w	r5, [sp, #6]
          MCI_SetCurrentReferences(pMCIN,currComp);
 8006710:	9901      	ldr	r1, [sp, #4]
 8006712:	4807      	ldr	r0, [pc, #28]	@ (8006730 <RI_SetRegisterMotor1+0x7c8>)
 8006714:	f7fe f924 	bl	8004960 <MCI_SetCurrentReferences>
          break;
 8006718:	e483      	b.n	8006022 <RI_SetRegisterMotor1+0xba>
          PID_SetKIDivisorPOW2(&PIDSpeedHandle_M1, regdata16);
 800671a:	480e      	ldr	r0, [pc, #56]	@ (8006754 <RI_SetRegisterMotor1+0x7ec>)
 800671c:	4629      	mov	r1, r5
 800671e:	f003 f851 	bl	80097c4 <PID_SetKIDivisorPOW2>
          break;
 8006722:	e47e      	b.n	8006022 <RI_SetRegisterMotor1+0xba>
          SCC_SetOverVoltageThreshold(&SCC,regdata16);
 8006724:	4805      	ldr	r0, [pc, #20]	@ (800673c <RI_SetRegisterMotor1+0x7d4>)
 8006726:	4629      	mov	r1, r5
 8006728:	f7fc f9d0 	bl	8002acc <SCC_SetOverVoltageThreshold>
          break;
 800672c:	e479      	b.n	8006022 <RI_SetRegisterMotor1+0xba>
 800672e:	bf00      	nop
 8006730:	20000d30 	.word	0x20000d30
 8006734:	2aaaaaab 	.word	0x2aaaaaab
 8006738:	200008ac 	.word	0x200008ac
 800673c:	200000cc 	.word	0x200000cc
 8006740:	20000958 	.word	0x20000958
 8006744:	20000014 	.word	0x20000014
 8006748:	200009bc 	.word	0x200009bc
 800674c:	20000990 	.word	0x20000990
 8006750:	200006a8 	.word	0x200006a8
 8006754:	200009e8 	.word	0x200009e8
 8006758:	200006dc 	.word	0x200006dc

0800675c <RI_GetRegisterGlobal>:
uint8_t RI_GetRegisterGlobal(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace){
 800675c:	b510      	push	{r4, lr}
    switch (typeID)
 800675e:	f1a1 0c08 	sub.w	ip, r1, #8
uint8_t RI_GetRegisterGlobal(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace){
 8006762:	f9bd e008 	ldrsh.w	lr, [sp, #8]
    switch (typeID)
 8006766:	f1bc 0f20 	cmp.w	ip, #32
 800676a:	d812      	bhi.n	8006792 <RI_GetRegisterGlobal+0x36>
 800676c:	e8df f00c 	tbb	[pc, ip]
 8006770:	1111111b 	.word	0x1111111b
 8006774:	11111111 	.word	0x11111111
 8006778:	11111127 	.word	0x11111127
 800677c:	11111111 	.word	0x11111111
 8006780:	11111122 	.word	0x11111122
 8006784:	11111111 	.word	0x11111111
 8006788:	11111135 	.word	0x11111135
 800678c:	11111111 	.word	0x11111111
 8006790:	13          	.byte	0x13
 8006791:	00          	.byte	0x00
 8006792:	2007      	movs	r0, #7
}
 8006794:	bd10      	pop	{r4, pc}
        switch (regID)
 8006796:	2828      	cmp	r0, #40	@ 0x28
 8006798:	d044      	beq.n	8006824 <RI_GetRegisterGlobal+0xc8>
        *size = (*rawSize) + 2U;
 800679a:	8812      	ldrh	r2, [r2, #0]
 800679c:	3202      	adds	r2, #2
            retVal = MCP_ERROR_UNKNOWN_REG;
 800679e:	2005      	movs	r0, #5
        *size = (*rawSize) + 2U;
 80067a0:	b292      	uxth	r2, r2
 80067a2:	801a      	strh	r2, [r3, #0]
}
 80067a4:	bd10      	pop	{r4, pc}
        if (freeSpace > 0)
 80067a6:	f1be 0f00 	cmp.w	lr, #0
 80067aa:	dd39      	ble.n	8006820 <RI_GetRegisterGlobal+0xc4>
 80067ac:	2201      	movs	r2, #1
            *size= 0 ; /* */
 80067ae:	801a      	strh	r2, [r3, #0]
              retVal = MCP_ERROR_UNKNOWN_REG;
 80067b0:	2005      	movs	r0, #5
}
 80067b2:	bd10      	pop	{r4, pc}
        if (freeSpace >= 4)
 80067b4:	f1be 0f03 	cmp.w	lr, #3
 80067b8:	dd2a      	ble.n	8006810 <RI_GetRegisterGlobal+0xb4>
 80067ba:	2204      	movs	r2, #4
 80067bc:	e7f7      	b.n	80067ae <RI_GetRegisterGlobal+0x52>
        if (freeSpace >= 2)
 80067be:	f1be 0f01 	cmp.w	lr, #1
 80067c2:	dd25      	ble.n	8006810 <RI_GetRegisterGlobal+0xb4>
          switch (regID)
 80067c4:	f5b0 6f65 	cmp.w	r0, #3664	@ 0xe50
 80067c8:	d05a      	beq.n	8006880 <RI_GetRegisterGlobal+0x124>
 80067ca:	f5b0 6f69 	cmp.w	r0, #3728	@ 0xe90
 80067ce:	bf0c      	ite	eq
 80067d0:	2000      	moveq	r0, #0
 80067d2:	2005      	movne	r0, #5
          *size = 2;
 80067d4:	2202      	movs	r2, #2
 80067d6:	801a      	strh	r2, [r3, #0]
}
 80067d8:	bd10      	pop	{r4, pc}
        switch (regID)
 80067da:	2820      	cmp	r0, #32
 80067dc:	d02c      	beq.n	8006838 <RI_GetRegisterGlobal+0xdc>
 80067de:	2860      	cmp	r0, #96	@ 0x60
 80067e0:	d118      	bne.n	8006814 <RI_GetRegisterGlobal+0xb8>
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80067e2:	4c28      	ldr	r4, [pc, #160]	@ (8006884 <RI_GetRegisterGlobal+0x128>)
 80067e4:	f994 0000 	ldrsb.w	r0, [r4]
  *size= 1U ; /* /0 is the min String size */
 80067e8:	2101      	movs	r1, #1
 80067ea:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80067ec:	b1a0      	cbz	r0, 8006818 <RI_GetRegisterGlobal+0xbc>
 80067ee:	fa1f fe8e 	uxth.w	lr, lr
  const char_t *tempsrcString = srcString;
 80067f2:	46a4      	mov	ip, r4
 80067f4:	e008      	b.n	8006808 <RI_GetRegisterGlobal+0xac>
    *tempdestString = *tempsrcString;
 80067f6:	f802 0b01 	strb.w	r0, [r2], #1
    *size = *size + 1U;
 80067fa:	8819      	ldrh	r1, [r3, #0]
 80067fc:	3101      	adds	r1, #1
 80067fe:	b289      	uxth	r1, r1
 8006800:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8006802:	f91c 0f01 	ldrsb.w	r0, [ip, #1]!
 8006806:	b138      	cbz	r0, 8006818 <RI_GetRegisterGlobal+0xbc>
 8006808:	4571      	cmp	r1, lr
 800680a:	d3f4      	bcc.n	80067f6 <RI_GetRegisterGlobal+0x9a>
    retVal = MCP_ERROR_STRING_FORMAT;
 800680c:	2006      	movs	r0, #6
}
 800680e:	bd10      	pop	{r4, pc}
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8006810:	2008      	movs	r0, #8
}
 8006812:	bd10      	pop	{r4, pc}
 8006814:	2200      	movs	r2, #0
 8006816:	e7ca      	b.n	80067ae <RI_GetRegisterGlobal+0x52>
    *tempdestString = (int8_t)0;
 8006818:	2300      	movs	r3, #0
 800681a:	7013      	strb	r3, [r2, #0]
  uint8_t retVal = MCP_CMD_OK;
 800681c:	2000      	movs	r0, #0
}
 800681e:	bd10      	pop	{r4, pc}
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8006820:	4608      	mov	r0, r1
}
 8006822:	bd10      	pop	{r4, pc}
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8006824:	fa1f fe8e 	uxth.w	lr, lr
            *rawSize = (uint16_t)sizeof(GlobalConfig_reg_t);
 8006828:	210a      	movs	r1, #10
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 800682a:	f1be 0f0b 	cmp.w	lr, #11
            *rawSize = (uint16_t)sizeof(GlobalConfig_reg_t);
 800682e:	8011      	strh	r1, [r2, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8006830:	d81a      	bhi.n	8006868 <RI_GetRegisterGlobal+0x10c>
 8006832:	220c      	movs	r2, #12
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8006834:	2008      	movs	r0, #8
 8006836:	e7b4      	b.n	80067a2 <RI_GetRegisterGlobal+0x46>
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8006838:	4c13      	ldr	r4, [pc, #76]	@ (8006888 <RI_GetRegisterGlobal+0x12c>)
 800683a:	f994 0000 	ldrsb.w	r0, [r4]
  *size= 1U ; /* /0 is the min String size */
 800683e:	2101      	movs	r1, #1
 8006840:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8006842:	2800      	cmp	r0, #0
 8006844:	d0e8      	beq.n	8006818 <RI_GetRegisterGlobal+0xbc>
 8006846:	fa1f fe8e 	uxth.w	lr, lr
  const char_t *tempsrcString = srcString;
 800684a:	46a4      	mov	ip, r4
 800684c:	e009      	b.n	8006862 <RI_GetRegisterGlobal+0x106>
    *tempdestString = *tempsrcString;
 800684e:	f802 0b01 	strb.w	r0, [r2], #1
    *size = *size + 1U;
 8006852:	8819      	ldrh	r1, [r3, #0]
 8006854:	3101      	adds	r1, #1
 8006856:	b289      	uxth	r1, r1
 8006858:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 800685a:	f91c 0f01 	ldrsb.w	r0, [ip, #1]!
 800685e:	2800      	cmp	r0, #0
 8006860:	d0da      	beq.n	8006818 <RI_GetRegisterGlobal+0xbc>
 8006862:	458e      	cmp	lr, r1
 8006864:	d8f3      	bhi.n	800684e <RI_GetRegisterGlobal+0xf2>
 8006866:	e7d1      	b.n	800680c <RI_GetRegisterGlobal+0xb0>
              (void)memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t));
 8006868:	4908      	ldr	r1, [pc, #32]	@ (800688c <RI_GetRegisterGlobal+0x130>)
 800686a:	6848      	ldr	r0, [r1, #4]
 800686c:	680c      	ldr	r4, [r1, #0]
 800686e:	8909      	ldrh	r1, [r1, #8]
 8006870:	f8c2 0006 	str.w	r0, [r2, #6]
 8006874:	f8c2 4002 	str.w	r4, [r2, #2]
 8006878:	8151      	strh	r1, [r2, #10]
    uint8_t retVal = MCP_CMD_OK;
 800687a:	2000      	movs	r0, #0
              (void)memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t));
 800687c:	220c      	movs	r2, #12
 800687e:	e790      	b.n	80067a2 <RI_GetRegisterGlobal+0x46>
    uint8_t retVal = MCP_CMD_OK;
 8006880:	2000      	movs	r0, #0
 8006882:	e7a7      	b.n	80067d4 <RI_GetRegisterGlobal+0x78>
 8006884:	0800b4f0 	.word	0x0800b4f0
 8006888:	0800b4c8 	.word	0x0800b4c8
 800688c:	0800b4bc 	.word	0x0800b4bc

08006890 <RI_GetRegisterMotor1>:
  uint8_t RI_GetRegisterMotor1(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace) {
 8006890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006894:	b09a      	sub	sp, #104	@ 0x68
 8006896:	461d      	mov	r5, r3
    switch (typeID)
 8006898:	f1a1 0308 	sub.w	r3, r1, #8
  uint8_t RI_GetRegisterMotor1(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace) {
 800689c:	f9bd c080 	ldrsh.w	ip, [sp, #128]	@ 0x80
 80068a0:	4614      	mov	r4, r2
    switch (typeID)
 80068a2:	2b20      	cmp	r3, #32
 80068a4:	d812      	bhi.n	80068cc <RI_GetRegisterMotor1+0x3c>
 80068a6:	e8df f003 	tbb	[pc, r3]
 80068aa:	1136      	.short	0x1136
 80068ac:	11111111 	.word	0x11111111
 80068b0:	11821111 	.word	0x11821111
 80068b4:	11111111 	.word	0x11111111
 80068b8:	11511111 	.word	0x11511111
 80068bc:	11111111 	.word	0x11111111
 80068c0:	11781111 	.word	0x11781111
 80068c4:	11111111 	.word	0x11111111
 80068c8:	1111      	.short	0x1111
 80068ca:	15          	.byte	0x15
 80068cb:	00          	.byte	0x00
 80068cc:	2007      	movs	r0, #7
  }
 80068ce:	b01a      	add	sp, #104	@ 0x68
 80068d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rawData++;
 80068d4:	f5b0 7fd4 	cmp.w	r0, #424	@ 0x1a8
 80068d8:	f104 0302 	add.w	r3, r4, #2
        switch (regID)
 80068dc:	f000 8391 	beq.w	8007002 <RI_GetRegisterMotor1+0x772>
 80068e0:	f200 8097 	bhi.w	8006a12 <RI_GetRegisterMotor1+0x182>
 80068e4:	28e8      	cmp	r0, #232	@ 0xe8
 80068e6:	f000 8381 	beq.w	8006fec <RI_GetRegisterMotor1+0x75c>
 80068ea:	f200 8083 	bhi.w	80069f4 <RI_GetRegisterMotor1+0x164>
 80068ee:	2868      	cmp	r0, #104	@ 0x68
 80068f0:	f000 83be 	beq.w	8007070 <RI_GetRegisterMotor1+0x7e0>
 80068f4:	28a8      	cmp	r0, #168	@ 0xa8
 80068f6:	f040 8374 	bne.w	8006fe2 <RI_GetRegisterMotor1+0x752>
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 80068fa:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = (uint16_t)sizeof(ApplicationConfig_reg_t);
 80068fe:	2210      	movs	r2, #16
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8006900:	f1bc 0f11 	cmp.w	ip, #17
            *rawSize = (uint16_t)sizeof(ApplicationConfig_reg_t);
 8006904:	8022      	strh	r2, [r4, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8006906:	f200 835b 	bhi.w	8006fc0 <RI_GetRegisterMotor1+0x730>
 800690a:	2312      	movs	r3, #18
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 800690c:	2008      	movs	r0, #8
        *size = (*rawSize) + 2U;
 800690e:	802b      	strh	r3, [r5, #0]
  }
 8006910:	b01a      	add	sp, #104	@ 0x68
 8006912:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (freeSpace > 0)
 8006916:	f1bc 0f00 	cmp.w	ip, #0
 800691a:	f340 8360 	ble.w	8006fde <RI_GetRegisterMotor1+0x74e>
          switch (regID)
 800691e:	f5b0 6f81 	cmp.w	r0, #1032	@ 0x408
 8006922:	f000 83b3 	beq.w	800708c <RI_GetRegisterMotor1+0x7fc>
 8006926:	f200 80ab 	bhi.w	8006a80 <RI_GetRegisterMotor1+0x1f0>
 800692a:	28c8      	cmp	r0, #200	@ 0xc8
 800692c:	f000 83aa 	beq.w	8007084 <RI_GetRegisterMotor1+0x7f4>
 8006930:	f240 809c 	bls.w	8006a6c <RI_GetRegisterMotor1+0x1dc>
 8006934:	f5b0 7f72 	cmp.w	r0, #968	@ 0x3c8
 8006938:	f040 834f 	bne.w	8006fda <RI_GetRegisterMotor1+0x74a>
 800693c:	2001      	movs	r0, #1
              *data = (uint8_t)MCI_GetControlMode(pMCIN);
 800693e:	7020      	strb	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8006940:	2000      	movs	r0, #0
          *size = 1;
 8006942:	2301      	movs	r3, #1
 8006944:	802b      	strh	r3, [r5, #0]
  }
 8006946:	b01a      	add	sp, #104	@ 0x68
 8006948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (freeSpace >= 4)
 800694c:	f1bc 0f03 	cmp.w	ip, #3
 8006950:	f340 82dd 	ble.w	8006f0e <RI_GetRegisterMotor1+0x67e>
          switch (regID)
 8006954:	f241 73d8 	movw	r3, #6104	@ 0x17d8
 8006958:	4298      	cmp	r0, r3
 800695a:	f000 840b 	beq.w	8007174 <RI_GetRegisterMotor1+0x8e4>
 800695e:	f200 8273 	bhi.w	8006e48 <RI_GetRegisterMotor1+0x5b8>
 8006962:	f5b0 7f06 	cmp.w	r0, #536	@ 0x218
 8006966:	f000 840f 	beq.w	8007188 <RI_GetRegisterMotor1+0x8f8>
 800696a:	f200 8242 	bhi.w	8006df2 <RI_GetRegisterMotor1+0x562>
 800696e:	28d8      	cmp	r0, #216	@ 0xd8
 8006970:	f000 8405 	beq.w	800717e <RI_GetRegisterMotor1+0x8ee>
 8006974:	f240 8230 	bls.w	8006dd8 <RI_GetRegisterMotor1+0x548>
 8006978:	f5b0 7f8c 	cmp.w	r0, #280	@ 0x118
 800697c:	f000 83e8 	beq.w	8007150 <RI_GetRegisterMotor1+0x8c0>
 8006980:	f5b0 7fec 	cmp.w	r0, #472	@ 0x1d8
 8006984:	f040 84b9 	bne.w	80072fa <RI_GetRegisterMotor1+0xa6a>
              *regdata32 = FF_M1.wConstant_1Q;
 8006988:	4bad      	ldr	r3, [pc, #692]	@ (8006c40 <RI_GetRegisterMotor1+0x3b0>)
 800698a:	691b      	ldr	r3, [r3, #16]
 800698c:	6023      	str	r3, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 800698e:	2000      	movs	r0, #0
          *size = 4;
 8006990:	2304      	movs	r3, #4
 8006992:	802b      	strh	r3, [r5, #0]
  }
 8006994:	b01a      	add	sp, #104	@ 0x68
 8006996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        switch (regID)
 800699a:	28a0      	cmp	r0, #160	@ 0xa0
 800699c:	f000 82ec 	beq.w	8006f78 <RI_GetRegisterMotor1+0x6e8>
 80069a0:	28e0      	cmp	r0, #224	@ 0xe0
 80069a2:	f000 82b8 	beq.w	8006f16 <RI_GetRegisterMotor1+0x686>
            *size= 0 ; /* */
 80069a6:	2300      	movs	r3, #0
 80069a8:	802b      	strh	r3, [r5, #0]
            retVal = MCP_ERROR_UNKNOWN_REG;
 80069aa:	2005      	movs	r0, #5
            break;
 80069ac:	e78f      	b.n	80068ce <RI_GetRegisterMotor1+0x3e>
        if (freeSpace >= 2)
 80069ae:	f1bc 0f01 	cmp.w	ip, #1
 80069b2:	f340 82ac 	ble.w	8006f0e <RI_GetRegisterMotor1+0x67e>
          switch (regID)
 80069b6:	f5b0 6f29 	cmp.w	r0, #2704	@ 0xa90
 80069ba:	f000 8416 	beq.w	80071ea <RI_GetRegisterMotor1+0x95a>
 80069be:	f200 809d 	bhi.w	8006afc <RI_GetRegisterMotor1+0x26c>
 80069c2:	f5b0 6fb2 	cmp.w	r0, #1424	@ 0x590
 80069c6:	f000 840b 	beq.w	80071e0 <RI_GetRegisterMotor1+0x950>
 80069ca:	f200 8081 	bhi.w	8006ad0 <RI_GetRegisterMotor1+0x240>
 80069ce:	f5b0 7f24 	cmp.w	r0, #656	@ 0x290
 80069d2:	f000 8430 	beq.w	8007236 <RI_GetRegisterMotor1+0x9a6>
 80069d6:	f240 80de 	bls.w	8006b96 <RI_GetRegisterMotor1+0x306>
 80069da:	f5b0 7f64 	cmp.w	r0, #912	@ 0x390
 80069de:	f000 8421 	beq.w	8007224 <RI_GetRegisterMotor1+0x994>
 80069e2:	d95b      	bls.n	8006a9c <RI_GetRegisterMotor1+0x20c>
 80069e4:	f5b0 6f8a 	cmp.w	r0, #1104	@ 0x450
 80069e8:	d169      	bne.n	8006abe <RI_GetRegisterMotor1+0x22e>
              *regdata16 = PID_GetKI (&(&STO_PLL_M1)->PIRegulator);
 80069ea:	4896      	ldr	r0, [pc, #600]	@ (8006c44 <RI_GetRegisterMotor1+0x3b4>)
 80069ec:	f002 fed4 	bl	8009798 <PID_GetKI>
 80069f0:	8020      	strh	r0, [r4, #0]
              break;
 80069f2:	e13b      	b.n	8006c6c <RI_GetRegisterMotor1+0x3dc>
 80069f4:	f5b0 7f94 	cmp.w	r0, #296	@ 0x128
 80069f8:	f040 82f3 	bne.w	8006fe2 <RI_GetRegisterMotor1+0x752>
            if ((*rawSize) +2U > (uint16_t)freeSpace)
 80069fc:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = 12;
 8006a00:	220c      	movs	r2, #12
            if ((*rawSize) +2U > (uint16_t)freeSpace)
 8006a02:	f1bc 0f0d 	cmp.w	ip, #13
            *rawSize = 12;
 8006a06:	8022      	strh	r2, [r4, #0]
            if ((*rawSize) +2U > (uint16_t)freeSpace)
 8006a08:	f200 82ce 	bhi.w	8006fa8 <RI_GetRegisterMotor1+0x718>
 8006a0c:	230e      	movs	r3, #14
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8006a0e:	2008      	movs	r0, #8
 8006a10:	e77d      	b.n	800690e <RI_GetRegisterMotor1+0x7e>
 8006a12:	f5b0 7f0a 	cmp.w	r0, #552	@ 0x228
 8006a16:	f000 8305 	beq.w	8007024 <RI_GetRegisterMotor1+0x794>
 8006a1a:	f5b0 7f5a 	cmp.w	r0, #872	@ 0x368
 8006a1e:	d112      	bne.n	8006a46 <RI_GetRegisterMotor1+0x1b6>
            *rawSize = 4;
 8006a20:	2304      	movs	r3, #4
 8006a22:	8023      	strh	r3, [r4, #0]
            *iqref = (uint16_t)MCI_GetIqdref(pMCIN).q;
 8006a24:	4888      	ldr	r0, [pc, #544]	@ (8006c48 <RI_GetRegisterMotor1+0x3b8>)
 8006a26:	f7fe f8cf 	bl	8004bc8 <MCI_GetIqdref>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	8063      	strh	r3, [r4, #2]
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 8006a2e:	4886      	ldr	r0, [pc, #536]	@ (8006c48 <RI_GetRegisterMotor1+0x3b8>)
            *iqref = (uint16_t)MCI_GetIqdref(pMCIN).q;
 8006a30:	9316      	str	r3, [sp, #88]	@ 0x58
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 8006a32:	f7fe f8c9 	bl	8004bc8 <MCI_GetIqdref>
        *size = (*rawSize) + 2U;
 8006a36:	8823      	ldrh	r3, [r4, #0]
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 8006a38:	f3c0 400f 	ubfx	r0, r0, #16, #16
        *size = (*rawSize) + 2U;
 8006a3c:	3302      	adds	r3, #2
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 8006a3e:	80a0      	strh	r0, [r4, #4]
        *size = (*rawSize) + 2U;
 8006a40:	b29b      	uxth	r3, r3
    uint8_t retVal = MCP_CMD_OK;
 8006a42:	2000      	movs	r0, #0
            break;
 8006a44:	e763      	b.n	800690e <RI_GetRegisterMotor1+0x7e>
 8006a46:	f5b0 7ff4 	cmp.w	r0, #488	@ 0x1e8
 8006a4a:	f040 82ca 	bne.w	8006fe2 <RI_GetRegisterMotor1+0x752>
            *rawSize = 4;
 8006a4e:	2304      	movs	r3, #4
 8006a50:	8023      	strh	r3, [r4, #0]
            *torque = MCI_GetLastRampFinalTorque(pMCIN);
 8006a52:	487d      	ldr	r0, [pc, #500]	@ (8006c48 <RI_GetRegisterMotor1+0x3b8>)
 8006a54:	f7fe f86a 	bl	8004b2c <MCI_GetLastRampFinalTorque>
 8006a58:	8060      	strh	r0, [r4, #2]
            *duration = MCI_GetLastRampFinalDuration(pMCIN) ;
 8006a5a:	487b      	ldr	r0, [pc, #492]	@ (8006c48 <RI_GetRegisterMotor1+0x3b8>)
 8006a5c:	f7fe f86a 	bl	8004b34 <MCI_GetLastRampFinalDuration>
        *size = (*rawSize) + 2U;
 8006a60:	8823      	ldrh	r3, [r4, #0]
            *duration = MCI_GetLastRampFinalDuration(pMCIN) ;
 8006a62:	80a0      	strh	r0, [r4, #4]
        *size = (*rawSize) + 2U;
 8006a64:	3302      	adds	r3, #2
 8006a66:	b29b      	uxth	r3, r3
    uint8_t retVal = MCP_CMD_OK;
 8006a68:	2000      	movs	r0, #0
            break;
 8006a6a:	e750      	b.n	800690e <RI_GetRegisterMotor1+0x7e>
 8006a6c:	2848      	cmp	r0, #72	@ 0x48
 8006a6e:	f000 831b 	beq.w	80070a8 <RI_GetRegisterMotor1+0x818>
 8006a72:	2888      	cmp	r0, #136	@ 0x88
 8006a74:	f040 82b1 	bne.w	8006fda <RI_GetRegisterMotor1+0x74a>
              *data = (uint8_t)MCI_GetControlMode(pMCIN);
 8006a78:	4873      	ldr	r0, [pc, #460]	@ (8006c48 <RI_GetRegisterMotor1+0x3b8>)
 8006a7a:	f7fe f82d 	bl	8004ad8 <MCI_GetControlMode>
              break;
 8006a7e:	e75e      	b.n	800693e <RI_GetRegisterMotor1+0xae>
 8006a80:	f5b0 6f99 	cmp.w	r0, #1224	@ 0x4c8
 8006a84:	f000 830c 	beq.w	80070a0 <RI_GetRegisterMotor1+0x810>
 8006a88:	f240 8092 	bls.w	8006bb0 <RI_GetRegisterMotor1+0x320>
 8006a8c:	f5b0 6fa1 	cmp.w	r0, #1288	@ 0x508
 8006a90:	f040 82a3 	bne.w	8006fda <RI_GetRegisterMotor1+0x74a>
              *data = OTT_IsMotorAlreadyProfiled(&OTT);
 8006a94:	486d      	ldr	r0, [pc, #436]	@ (8006c4c <RI_GetRegisterMotor1+0x3bc>)
 8006a96:	f7fa f85f 	bl	8000b58 <OTT_IsMotorAlreadyProfiled>
              break;
 8006a9a:	e750      	b.n	800693e <RI_GetRegisterMotor1+0xae>
 8006a9c:	f5b0 7f44 	cmp.w	r0, #784	@ 0x310
 8006aa0:	f000 83b6 	beq.w	8007210 <RI_GetRegisterMotor1+0x980>
 8006aa4:	f5b0 7f54 	cmp.w	r0, #848	@ 0x350
 8006aa8:	f040 80ab 	bne.w	8006c02 <RI_GetRegisterMotor1+0x372>
              STO_PLL_GetObserverGains(&STO_PLL_M1, &hC1, &hC2);
 8006aac:	4868      	ldr	r0, [pc, #416]	@ (8006c50 <RI_GetRegisterMotor1+0x3c0>)
 8006aae:	aa17      	add	r2, sp, #92	@ 0x5c
 8006ab0:	a916      	add	r1, sp, #88	@ 0x58
 8006ab2:	f004 fa73 	bl	800af9c <STO_PLL_GetObserverGains>
              *regdata16 = hC1;
 8006ab6:	f8bd 3058 	ldrh.w	r3, [sp, #88]	@ 0x58
 8006aba:	8023      	strh	r3, [r4, #0]
              break;
 8006abc:	e0d6      	b.n	8006c6c <RI_GetRegisterMotor1+0x3dc>
 8006abe:	f5b0 6f92 	cmp.w	r0, #1168	@ 0x490
 8006ac2:	f040 8418 	bne.w	80072f6 <RI_GetRegisterMotor1+0xa66>
              *regdata16 = PID_GetKP (&(&STO_PLL_M1)->PIRegulator);
 8006ac6:	485f      	ldr	r0, [pc, #380]	@ (8006c44 <RI_GetRegisterMotor1+0x3b4>)
 8006ac8:	f002 fe62 	bl	8009790 <PID_GetKP>
 8006acc:	8020      	strh	r0, [r4, #0]
              break;
 8006ace:	e0cd      	b.n	8006c6c <RI_GetRegisterMotor1+0x3dc>
 8006ad0:	f5b0 6f11 	cmp.w	r0, #2320	@ 0x910
 8006ad4:	f000 8395 	beq.w	8007202 <RI_GetRegisterMotor1+0x972>
 8006ad8:	f240 80ce 	bls.w	8006c78 <RI_GetRegisterMotor1+0x3e8>
 8006adc:	f5b0 6f1d 	cmp.w	r0, #2512	@ 0x9d0
 8006ae0:	f000 838a 	beq.w	80071f8 <RI_GetRegisterMotor1+0x968>
 8006ae4:	f240 8084 	bls.w	8006bf0 <RI_GetRegisterMotor1+0x360>
 8006ae8:	f5b0 6f21 	cmp.w	r0, #2576	@ 0xa10
 8006aec:	d123      	bne.n	8006b36 <RI_GetRegisterMotor1+0x2a6>
              *regdata16 = MCI_GetVqd(pMCIN).d;
 8006aee:	4856      	ldr	r0, [pc, #344]	@ (8006c48 <RI_GetRegisterMotor1+0x3b8>)
 8006af0:	f7fe f878 	bl	8004be4 <MCI_GetVqd>
 8006af4:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8006af8:	8023      	strh	r3, [r4, #0]
              break;
 8006afa:	e0b7      	b.n	8006c6c <RI_GetRegisterMotor1+0x3dc>
 8006afc:	f241 4350 	movw	r3, #5200	@ 0x1450
 8006b00:	4298      	cmp	r0, r3
 8006b02:	f000 83f3 	beq.w	80072ec <RI_GetRegisterMotor1+0xa5c>
 8006b06:	f200 8085 	bhi.w	8006c14 <RI_GetRegisterMotor1+0x384>
 8006b0a:	f5b0 6f65 	cmp.w	r0, #3664	@ 0xe50
 8006b0e:	f000 80ad 	beq.w	8006c6c <RI_GetRegisterMotor1+0x3dc>
 8006b12:	d931      	bls.n	8006b78 <RI_GetRegisterMotor1+0x2e8>
 8006b14:	f241 0310 	movw	r3, #4112	@ 0x1010
 8006b18:	4298      	cmp	r0, r3
 8006b1a:	f000 83e2 	beq.w	80072e2 <RI_GetRegisterMotor1+0xa52>
 8006b1e:	d91d      	bls.n	8006b5c <RI_GetRegisterMotor1+0x2cc>
 8006b20:	f241 0350 	movw	r3, #4176	@ 0x1050
 8006b24:	4298      	cmp	r0, r3
 8006b26:	d10f      	bne.n	8006b48 <RI_GetRegisterMotor1+0x2b8>
              *regdata16 = FF_GetVqdAvPIout(&FF_M1).d;
 8006b28:	4845      	ldr	r0, [pc, #276]	@ (8006c40 <RI_GetRegisterMotor1+0x3b0>)
 8006b2a:	f002 fd4f 	bl	80095cc <FF_GetVqdAvPIout>
 8006b2e:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8006b32:	8023      	strh	r3, [r4, #0]
              break;
 8006b34:	e09a      	b.n	8006c6c <RI_GetRegisterMotor1+0x3dc>
 8006b36:	f5b0 6f25 	cmp.w	r0, #2640	@ 0xa50
 8006b3a:	f040 83dc 	bne.w	80072f6 <RI_GetRegisterMotor1+0xa66>
              *regdata16 = MCI_GetValphabeta(pMCIN).alpha;
 8006b3e:	4842      	ldr	r0, [pc, #264]	@ (8006c48 <RI_GetRegisterMotor1+0x3b8>)
 8006b40:	f7fe f85e 	bl	8004c00 <MCI_GetValphabeta>
 8006b44:	8020      	strh	r0, [r4, #0]
              break;
 8006b46:	e091      	b.n	8006c6c <RI_GetRegisterMotor1+0x3dc>
 8006b48:	f241 3350 	movw	r3, #4944	@ 0x1350
 8006b4c:	4298      	cmp	r0, r3
 8006b4e:	f040 83d2 	bne.w	80072f6 <RI_GetRegisterMotor1+0xa66>
              *regdataU16 = SCC_GetPWMFrequencyHz(&SCC);
 8006b52:	4840      	ldr	r0, [pc, #256]	@ (8006c54 <RI_GetRegisterMotor1+0x3c4>)
 8006b54:	f7fb ff60 	bl	8002a18 <SCC_GetPWMFrequencyHz>
 8006b58:	8020      	strh	r0, [r4, #0]
              break;
 8006b5a:	e087      	b.n	8006c6c <RI_GetRegisterMotor1+0x3dc>
 8006b5c:	f5b0 6f79 	cmp.w	r0, #3984	@ 0xf90
 8006b60:	f000 83ba 	beq.w	80072d8 <RI_GetRegisterMotor1+0xa48>
 8006b64:	f5b0 6f7d 	cmp.w	r0, #4048	@ 0xfd0
 8006b68:	d17c      	bne.n	8006c64 <RI_GetRegisterMotor1+0x3d4>
              *regdata16 = FF_GetVqdff(&FF_M1).d;
 8006b6a:	4835      	ldr	r0, [pc, #212]	@ (8006c40 <RI_GetRegisterMotor1+0x3b0>)
 8006b6c:	f002 fd22 	bl	80095b4 <FF_GetVqdff>
 8006b70:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8006b74:	8023      	strh	r3, [r4, #0]
              break;
 8006b76:	e079      	b.n	8006c6c <RI_GetRegisterMotor1+0x3dc>
 8006b78:	f5b0 6f41 	cmp.w	r0, #3088	@ 0xc10
 8006b7c:	f000 83a5 	beq.w	80072ca <RI_GetRegisterMotor1+0xa3a>
 8006b80:	f240 8102 	bls.w	8006d88 <RI_GetRegisterMotor1+0x4f8>
 8006b84:	f5b0 6f45 	cmp.w	r0, #3152	@ 0xc50
 8006b88:	f040 80a4 	bne.w	8006cd4 <RI_GetRegisterMotor1+0x444>
              *regdata16 = STO_PLL_GetEstimatedBemf(&STO_PLL_M1).alpha;
 8006b8c:	4830      	ldr	r0, [pc, #192]	@ (8006c50 <RI_GetRegisterMotor1+0x3c0>)
 8006b8e:	f004 f9e7 	bl	800af60 <STO_PLL_GetEstimatedBemf>
 8006b92:	8020      	strh	r0, [r4, #0]
              break;
 8006b94:	e06a      	b.n	8006c6c <RI_GetRegisterMotor1+0x3dc>
 8006b96:	f5b0 7fc8 	cmp.w	r0, #400	@ 0x190
 8006b9a:	f000 8391 	beq.w	80072c0 <RI_GetRegisterMotor1+0xa30>
 8006b9e:	d91c      	bls.n	8006bda <RI_GetRegisterMotor1+0x34a>
 8006ba0:	f5b0 7fe8 	cmp.w	r0, #464	@ 0x1d0
 8006ba4:	d110      	bne.n	8006bc8 <RI_GetRegisterMotor1+0x338>
              *regdata16 = PID_GetKI(&PIDIqHandle_M1);
 8006ba6:	482c      	ldr	r0, [pc, #176]	@ (8006c58 <RI_GetRegisterMotor1+0x3c8>)
 8006ba8:	f002 fdf6 	bl	8009798 <PID_GetKI>
 8006bac:	8020      	strh	r0, [r4, #0]
              break;
 8006bae:	e05d      	b.n	8006c6c <RI_GetRegisterMotor1+0x3dc>
 8006bb0:	f5b0 6f89 	cmp.w	r0, #1096	@ 0x448
 8006bb4:	f000 827c 	beq.w	80070b0 <RI_GetRegisterMotor1+0x820>
 8006bb8:	f5b0 6f91 	cmp.w	r0, #1160	@ 0x488
 8006bbc:	f040 820d 	bne.w	8006fda <RI_GetRegisterMotor1+0x74a>
              *data = SPD_GetElToMecRatio(&STO_PLL_M1._Super);
 8006bc0:	4823      	ldr	r0, [pc, #140]	@ (8006c50 <RI_GetRegisterMotor1+0x3c0>)
 8006bc2:	f003 fe77 	bl	800a8b4 <SPD_GetElToMecRatio>
              break;
 8006bc6:	e6ba      	b.n	800693e <RI_GetRegisterMotor1+0xae>
 8006bc8:	f5b0 7f04 	cmp.w	r0, #528	@ 0x210
 8006bcc:	f040 8393 	bne.w	80072f6 <RI_GetRegisterMotor1+0xa66>
              *regdata16 = PID_GetKD(&PIDIqHandle_M1);
 8006bd0:	4821      	ldr	r0, [pc, #132]	@ (8006c58 <RI_GetRegisterMotor1+0x3c8>)
 8006bd2:	f002 fe11 	bl	80097f8 <PID_GetKD>
 8006bd6:	8020      	strh	r0, [r4, #0]
              break;
 8006bd8:	e048      	b.n	8006c6c <RI_GetRegisterMotor1+0x3dc>
 8006bda:	28d0      	cmp	r0, #208	@ 0xd0
 8006bdc:	f000 836b 	beq.w	80072b6 <RI_GetRegisterMotor1+0xa26>
 8006be0:	f5b0 7f88 	cmp.w	r0, #272	@ 0x110
 8006be4:	d157      	bne.n	8006c96 <RI_GetRegisterMotor1+0x406>
              *regdata16 = PID_GetKD(&PIDSpeedHandle_M1);
 8006be6:	481d      	ldr	r0, [pc, #116]	@ (8006c5c <RI_GetRegisterMotor1+0x3cc>)
 8006be8:	f002 fe06 	bl	80097f8 <PID_GetKD>
 8006bec:	8020      	strh	r0, [r4, #0]
              break;
 8006bee:	e03d      	b.n	8006c6c <RI_GetRegisterMotor1+0x3dc>
 8006bf0:	f5b0 6f15 	cmp.w	r0, #2384	@ 0x950
 8006bf4:	f040 80bd 	bne.w	8006d72 <RI_GetRegisterMotor1+0x4e2>
              *regdata16 = MCI_GetIqdref(pMCIN).q;
 8006bf8:	4813      	ldr	r0, [pc, #76]	@ (8006c48 <RI_GetRegisterMotor1+0x3b8>)
 8006bfa:	f7fd ffe5 	bl	8004bc8 <MCI_GetIqdref>
 8006bfe:	8020      	strh	r0, [r4, #0]
              break;
 8006c00:	e034      	b.n	8006c6c <RI_GetRegisterMotor1+0x3dc>
 8006c02:	f5b0 7f34 	cmp.w	r0, #720	@ 0x2d0
 8006c06:	f040 8376 	bne.w	80072f6 <RI_GetRegisterMotor1+0xa66>
              *regdata16 = PID_GetKI(&PIDIdHandle_M1);
 8006c0a:	4815      	ldr	r0, [pc, #84]	@ (8006c60 <RI_GetRegisterMotor1+0x3d0>)
 8006c0c:	f002 fdc4 	bl	8009798 <PID_GetKI>
 8006c10:	8020      	strh	r0, [r4, #0]
              break;
 8006c12:	e02b      	b.n	8006c6c <RI_GetRegisterMotor1+0x3dc>
 8006c14:	f241 6310 	movw	r3, #5648	@ 0x1610
 8006c18:	4298      	cmp	r0, r3
 8006c1a:	f000 8347 	beq.w	80072ac <RI_GetRegisterMotor1+0xa1c>
 8006c1e:	d977      	bls.n	8006d10 <RI_GetRegisterMotor1+0x480>
 8006c20:	f641 1310 	movw	r3, #6416	@ 0x1910
 8006c24:	4298      	cmp	r0, r3
 8006c26:	f000 833c 	beq.w	80072a2 <RI_GetRegisterMotor1+0xa12>
 8006c2a:	d968      	bls.n	8006cfe <RI_GetRegisterMotor1+0x46e>
 8006c2c:	f641 4310 	movw	r3, #7184	@ 0x1c10
 8006c30:	4298      	cmp	r0, r3
 8006c32:	d15a      	bne.n	8006cea <RI_GetRegisterMotor1+0x45a>
              *regdataU16 = SCC_GetOverVoltageThreshold(&SCC);
 8006c34:	4807      	ldr	r0, [pc, #28]	@ (8006c54 <RI_GetRegisterMotor1+0x3c4>)
 8006c36:	f7fb fef9 	bl	8002a2c <SCC_GetOverVoltageThreshold>
 8006c3a:	8020      	strh	r0, [r4, #0]
              break;
 8006c3c:	e016      	b.n	8006c6c <RI_GetRegisterMotor1+0x3dc>
 8006c3e:	bf00      	nop
 8006c40:	20000958 	.word	0x20000958
 8006c44:	200006dc 	.word	0x200006dc
 8006c48:	20000d30 	.word	0x20000d30
 8006c4c:	20000014 	.word	0x20000014
 8006c50:	200006a8 	.word	0x200006a8
 8006c54:	200000cc 	.word	0x200000cc
 8006c58:	200009bc 	.word	0x200009bc
 8006c5c:	200009e8 	.word	0x200009e8
 8006c60:	20000990 	.word	0x20000990
 8006c64:	f5b0 6f69 	cmp.w	r0, #3728	@ 0xe90
 8006c68:	f040 8345 	bne.w	80072f6 <RI_GetRegisterMotor1+0xa66>
    uint8_t retVal = MCP_CMD_OK;
 8006c6c:	2000      	movs	r0, #0
          *size = 2;
 8006c6e:	2302      	movs	r3, #2
 8006c70:	802b      	strh	r3, [r5, #0]
  }
 8006c72:	b01a      	add	sp, #104	@ 0x68
 8006c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c78:	f5b0 6f05 	cmp.w	r0, #2128	@ 0x850
 8006c7c:	f000 82cd 	beq.w	800721a <RI_GetRegisterMotor1+0x98a>
 8006c80:	d91a      	bls.n	8006cb8 <RI_GetRegisterMotor1+0x428>
 8006c82:	f5b0 6f09 	cmp.w	r0, #2192	@ 0x890
 8006c86:	d10e      	bne.n	8006ca6 <RI_GetRegisterMotor1+0x416>
              *regdata16 = MCI_GetIalphabeta(pMCIN).beta;
 8006c88:	48af      	ldr	r0, [pc, #700]	@ (8006f48 <RI_GetRegisterMotor1+0x6b8>)
 8006c8a:	f7fd ff81 	bl	8004b90 <MCI_GetIalphabeta>
 8006c8e:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8006c92:	8023      	strh	r3, [r4, #0]
              break;
 8006c94:	e7ea      	b.n	8006c6c <RI_GetRegisterMotor1+0x3dc>
 8006c96:	2890      	cmp	r0, #144	@ 0x90
 8006c98:	f040 832d 	bne.w	80072f6 <RI_GetRegisterMotor1+0xa66>
              *regdata16 = PID_GetKP(&PIDSpeedHandle_M1);
 8006c9c:	48ab      	ldr	r0, [pc, #684]	@ (8006f4c <RI_GetRegisterMotor1+0x6bc>)
 8006c9e:	f002 fd77 	bl	8009790 <PID_GetKP>
 8006ca2:	8020      	strh	r0, [r4, #0]
              break;
 8006ca4:	e7e2      	b.n	8006c6c <RI_GetRegisterMotor1+0x3dc>
 8006ca6:	f5b0 6f0d 	cmp.w	r0, #2256	@ 0x8d0
 8006caa:	f040 8324 	bne.w	80072f6 <RI_GetRegisterMotor1+0xa66>
              *regdata16 = MCI_GetIqd(pMCIN).q;
 8006cae:	48a6      	ldr	r0, [pc, #664]	@ (8006f48 <RI_GetRegisterMotor1+0x6b8>)
 8006cb0:	f7fd ff7c 	bl	8004bac <MCI_GetIqd>
 8006cb4:	8020      	strh	r0, [r4, #0]
              break;
 8006cb6:	e7d9      	b.n	8006c6c <RI_GetRegisterMotor1+0x3dc>
 8006cb8:	f5b0 6ffa 	cmp.w	r0, #2000	@ 0x7d0
 8006cbc:	f000 82ec 	beq.w	8007298 <RI_GetRegisterMotor1+0xa08>
 8006cc0:	f5b0 6f01 	cmp.w	r0, #2064	@ 0x810
 8006cc4:	d16c      	bne.n	8006da0 <RI_GetRegisterMotor1+0x510>
              *regdata16 = MCI_GetIab(pMCIN).b;
 8006cc6:	48a0      	ldr	r0, [pc, #640]	@ (8006f48 <RI_GetRegisterMotor1+0x6b8>)
 8006cc8:	f7fd ff54 	bl	8004b74 <MCI_GetIab>
 8006ccc:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8006cd0:	8023      	strh	r3, [r4, #0]
              break;
 8006cd2:	e7cb      	b.n	8006c6c <RI_GetRegisterMotor1+0x3dc>
 8006cd4:	f5b0 6f49 	cmp.w	r0, #3216	@ 0xc90
 8006cd8:	f040 830d 	bne.w	80072f6 <RI_GetRegisterMotor1+0xa66>
              *regdata16 = STO_PLL_GetEstimatedBemf(&STO_PLL_M1).beta;
 8006cdc:	489c      	ldr	r0, [pc, #624]	@ (8006f50 <RI_GetRegisterMotor1+0x6c0>)
 8006cde:	f004 f93f 	bl	800af60 <STO_PLL_GetEstimatedBemf>
 8006ce2:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8006ce6:	8023      	strh	r3, [r4, #0]
              break;
 8006ce8:	e7c0      	b.n	8006c6c <RI_GetRegisterMotor1+0x3dc>
 8006cea:	f641 4350 	movw	r3, #7248	@ 0x1c50
 8006cee:	4298      	cmp	r0, r3
 8006cf0:	f040 8301 	bne.w	80072f6 <RI_GetRegisterMotor1+0xa66>
                *regdata16 = SCC_GetUnderVoltageThreshold(&SCC);
 8006cf4:	4897      	ldr	r0, [pc, #604]	@ (8006f54 <RI_GetRegisterMotor1+0x6c4>)
 8006cf6:	f7fb feb3 	bl	8002a60 <SCC_GetUnderVoltageThreshold>
 8006cfa:	8020      	strh	r0, [r4, #0]
              break;
 8006cfc:	e7b6      	b.n	8006c6c <RI_GetRegisterMotor1+0x3dc>
 8006cfe:	f241 6350 	movw	r3, #5712	@ 0x1650
 8006d02:	4298      	cmp	r0, r3
 8006d04:	d113      	bne.n	8006d2e <RI_GetRegisterMotor1+0x49e>
              *regdataU16 = PID_GetKDDivisorPOW2(&PIDIqHandle_M1);
 8006d06:	4894      	ldr	r0, [pc, #592]	@ (8006f58 <RI_GetRegisterMotor1+0x6c8>)
 8006d08:	f002 fd7a 	bl	8009800 <PID_GetKDDivisorPOW2>
 8006d0c:	8020      	strh	r0, [r4, #0]
              break;
 8006d0e:	e7ad      	b.n	8006c6c <RI_GetRegisterMotor1+0x3dc>
 8006d10:	f241 5350 	movw	r3, #5456	@ 0x1550
 8006d14:	4298      	cmp	r0, r3
 8006d16:	f000 82ba 	beq.w	800728e <RI_GetRegisterMotor1+0x9fe>
 8006d1a:	d91c      	bls.n	8006d56 <RI_GetRegisterMotor1+0x4c6>
 8006d1c:	f241 5390 	movw	r3, #5520	@ 0x1590
 8006d20:	4298      	cmp	r0, r3
 8006d22:	d10e      	bne.n	8006d42 <RI_GetRegisterMotor1+0x4b2>
              *regdataU16 = PID_GetKDDivisorPOW2(&PIDIdHandle_M1);
 8006d24:	488d      	ldr	r0, [pc, #564]	@ (8006f5c <RI_GetRegisterMotor1+0x6cc>)
 8006d26:	f002 fd6b 	bl	8009800 <PID_GetKDDivisorPOW2>
 8006d2a:	8020      	strh	r0, [r4, #0]
              break;
 8006d2c:	e79e      	b.n	8006c6c <RI_GetRegisterMotor1+0x3dc>
 8006d2e:	f641 03d0 	movw	r3, #6352	@ 0x18d0
 8006d32:	4298      	cmp	r0, r3
 8006d34:	f040 82df 	bne.w	80072f6 <RI_GetRegisterMotor1+0xa66>
              *regdataU16 = PID_GetKIDivisorPOW2(&(&STO_PLL_M1)->PIRegulator);
 8006d38:	4889      	ldr	r0, [pc, #548]	@ (8006f60 <RI_GetRegisterMotor1+0x6d0>)
 8006d3a:	f002 fd3d 	bl	80097b8 <PID_GetKIDivisorPOW2>
 8006d3e:	8020      	strh	r0, [r4, #0]
              break;
 8006d40:	e794      	b.n	8006c6c <RI_GetRegisterMotor1+0x3dc>
 8006d42:	f241 53d0 	movw	r3, #5584	@ 0x15d0
 8006d46:	4298      	cmp	r0, r3
 8006d48:	f040 82d5 	bne.w	80072f6 <RI_GetRegisterMotor1+0xa66>
              *regdataU16 = PID_GetKPDivisorPOW2(&PIDIqHandle_M1);
 8006d4c:	4882      	ldr	r0, [pc, #520]	@ (8006f58 <RI_GetRegisterMotor1+0x6c8>)
 8006d4e:	f002 fd29 	bl	80097a4 <PID_GetKPDivisorPOW2>
 8006d52:	8020      	strh	r0, [r4, #0]
              break;
 8006d54:	e78a      	b.n	8006c6c <RI_GetRegisterMotor1+0x3dc>
 8006d56:	f241 43d0 	movw	r3, #5328	@ 0x14d0
 8006d5a:	4298      	cmp	r0, r3
 8006d5c:	f000 8292 	beq.w	8007284 <RI_GetRegisterMotor1+0x9f4>
 8006d60:	f241 5310 	movw	r3, #5392	@ 0x1510
 8006d64:	4298      	cmp	r0, r3
 8006d66:	d124      	bne.n	8006db2 <RI_GetRegisterMotor1+0x522>
              *regdataU16 = PID_GetKPDivisorPOW2(&PIDIdHandle_M1);
 8006d68:	487c      	ldr	r0, [pc, #496]	@ (8006f5c <RI_GetRegisterMotor1+0x6cc>)
 8006d6a:	f002 fd1b 	bl	80097a4 <PID_GetKPDivisorPOW2>
 8006d6e:	8020      	strh	r0, [r4, #0]
              break;
 8006d70:	e77c      	b.n	8006c6c <RI_GetRegisterMotor1+0x3dc>
 8006d72:	f5b0 6f19 	cmp.w	r0, #2448	@ 0x990
 8006d76:	f040 82be 	bne.w	80072f6 <RI_GetRegisterMotor1+0xa66>
              *regdata16 = MCI_GetIqdref(pMCIN).d;
 8006d7a:	4873      	ldr	r0, [pc, #460]	@ (8006f48 <RI_GetRegisterMotor1+0x6b8>)
 8006d7c:	f7fd ff24 	bl	8004bc8 <MCI_GetIqdref>
 8006d80:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8006d84:	8023      	strh	r3, [r4, #0]
              break;
 8006d86:	e771      	b.n	8006c6c <RI_GetRegisterMotor1+0x3dc>
 8006d88:	f5b0 6f39 	cmp.w	r0, #2960	@ 0xb90
 8006d8c:	f000 8258 	beq.w	8007240 <RI_GetRegisterMotor1+0x9b0>
 8006d90:	f5b0 6f3d 	cmp.w	r0, #3024	@ 0xbd0
 8006d94:	d117      	bne.n	8006dc6 <RI_GetRegisterMotor1+0x536>
              *regdata16 = STO_PLL_GetEstimatedCurrent(&STO_PLL_M1).alpha;
 8006d96:	486e      	ldr	r0, [pc, #440]	@ (8006f50 <RI_GetRegisterMotor1+0x6c0>)
 8006d98:	f004 f8ee 	bl	800af78 <STO_PLL_GetEstimatedCurrent>
 8006d9c:	8020      	strh	r0, [r4, #0]
              break;
 8006d9e:	e765      	b.n	8006c6c <RI_GetRegisterMotor1+0x3dc>
 8006da0:	f5b0 6fba 	cmp.w	r0, #1488	@ 0x5d0
 8006da4:	f040 82a7 	bne.w	80072f6 <RI_GetRegisterMotor1+0xa66>
              *regdata16 = NTC_GetAvTemp_C(&TempSensor_M1);
 8006da8:	486e      	ldr	r0, [pc, #440]	@ (8006f64 <RI_GetRegisterMotor1+0x6d4>)
 8006daa:	f002 fcd3 	bl	8009754 <NTC_GetAvTemp_C>
 8006dae:	8020      	strh	r0, [r4, #0]
              break;
 8006db0:	e75c      	b.n	8006c6c <RI_GetRegisterMotor1+0x3dc>
 8006db2:	f241 4390 	movw	r3, #5264	@ 0x1490
 8006db6:	4298      	cmp	r0, r3
 8006db8:	f040 829d 	bne.w	80072f6 <RI_GetRegisterMotor1+0xa66>
              *regdataU16 = (uint16_t)PID_GetKIDivisorPOW2(&PIDSpeedHandle_M1);
 8006dbc:	4863      	ldr	r0, [pc, #396]	@ (8006f4c <RI_GetRegisterMotor1+0x6bc>)
 8006dbe:	f002 fcfb 	bl	80097b8 <PID_GetKIDivisorPOW2>
 8006dc2:	8020      	strh	r0, [r4, #0]
              break;
 8006dc4:	e752      	b.n	8006c6c <RI_GetRegisterMotor1+0x3dc>
 8006dc6:	f5b0 6f35 	cmp.w	r0, #2896	@ 0xb50
 8006dca:	f040 8294 	bne.w	80072f6 <RI_GetRegisterMotor1+0xa66>
              *regdata16 = SPD_GetElAngle((SpeednPosFdbk_Handle_t *)&STO_PLL_M1);
 8006dce:	4860      	ldr	r0, [pc, #384]	@ (8006f50 <RI_GetRegisterMotor1+0x6c0>)
 8006dd0:	f003 fd24 	bl	800a81c <SPD_GetElAngle>
 8006dd4:	8020      	strh	r0, [r4, #0]
              break;
 8006dd6:	e749      	b.n	8006c6c <RI_GetRegisterMotor1+0x3dc>
 8006dd8:	2858      	cmp	r0, #88	@ 0x58
 8006dda:	f000 81f8 	beq.w	80071ce <RI_GetRegisterMotor1+0x93e>
 8006dde:	2898      	cmp	r0, #152	@ 0x98
 8006de0:	d11c      	bne.n	8006e1c <RI_GetRegisterMotor1+0x58c>
              *regdata32 = (((int32_t)MCI_GetMecSpeedRefUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 8006de2:	4859      	ldr	r0, [pc, #356]	@ (8006f48 <RI_GetRegisterMotor1+0x6b8>)
 8006de4:	f7fd fec2 	bl	8004b6c <MCI_GetMecSpeedRefUnit>
 8006de8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8006dec:	0040      	lsls	r0, r0, #1
 8006dee:	6020      	str	r0, [r4, #0]
              break;
 8006df0:	e5cd      	b.n	800698e <RI_GetRegisterMotor1+0xfe>
 8006df2:	f241 7318 	movw	r3, #5912	@ 0x1718
 8006df6:	4298      	cmp	r0, r3
 8006df8:	f000 81e3 	beq.w	80071c2 <RI_GetRegisterMotor1+0x932>
 8006dfc:	d916      	bls.n	8006e2c <RI_GetRegisterMotor1+0x59c>
 8006dfe:	f241 7358 	movw	r3, #5976	@ 0x1758
 8006e02:	4298      	cmp	r0, r3
 8006e04:	f000 819f 	beq.w	8007146 <RI_GetRegisterMotor1+0x8b6>
 8006e08:	f241 7398 	movw	r3, #6040	@ 0x1798
 8006e0c:	4298      	cmp	r0, r3
 8006e0e:	f040 8274 	bne.w	80072fa <RI_GetRegisterMotor1+0xa6a>
              *regdataU32 = SCC_GetVbus(&SCC);
 8006e12:	4850      	ldr	r0, [pc, #320]	@ (8006f54 <RI_GetRegisterMotor1+0x6c4>)
 8006e14:	f7fb f979 	bl	800210a <SCC_GetVbus>
 8006e18:	6020      	str	r0, [r4, #0]
              break;
 8006e1a:	e5b8      	b.n	800698e <RI_GetRegisterMotor1+0xfe>
 8006e1c:	2818      	cmp	r0, #24
 8006e1e:	f040 826c 	bne.w	80072fa <RI_GetRegisterMotor1+0xa6a>
              *regdataU32 = MCI_GetFaultState(pMCIN);
 8006e22:	4849      	ldr	r0, [pc, #292]	@ (8006f48 <RI_GetRegisterMotor1+0x6b8>)
 8006e24:	f7fd fe52 	bl	8004acc <MCI_GetFaultState>
 8006e28:	6020      	str	r0, [r4, #0]
              break;
 8006e2a:	e5b0      	b.n	800698e <RI_GetRegisterMotor1+0xfe>
 8006e2c:	f5b0 7f16 	cmp.w	r0, #600	@ 0x258
 8006e30:	f000 8174 	beq.w	800711c <RI_GetRegisterMotor1+0x88c>
 8006e34:	f241 63d8 	movw	r3, #5848	@ 0x16d8
 8006e38:	4298      	cmp	r0, r3
 8006e3a:	f040 825e 	bne.w	80072fa <RI_GetRegisterMotor1+0xa6a>
              *regdataU32 = SCC_GetRs(&SCC);
 8006e3e:	4845      	ldr	r0, [pc, #276]	@ (8006f54 <RI_GetRegisterMotor1+0x6c4>)
 8006e40:	f7fb f957 	bl	80020f2 <SCC_GetRs>
 8006e44:	6020      	str	r0, [r4, #0]
              break;
 8006e46:	e5a2      	b.n	800698e <RI_GetRegisterMotor1+0xfe>
 8006e48:	f641 1398 	movw	r3, #6552	@ 0x1998
 8006e4c:	4298      	cmp	r0, r3
 8006e4e:	f000 81af 	beq.w	80071b0 <RI_GetRegisterMotor1+0x920>
 8006e52:	d817      	bhi.n	8006e84 <RI_GetRegisterMotor1+0x5f4>
 8006e54:	f641 03d8 	movw	r3, #6360	@ 0x18d8
 8006e58:	4298      	cmp	r0, r3
 8006e5a:	f000 81a3 	beq.w	80071a4 <RI_GetRegisterMotor1+0x914>
 8006e5e:	d929      	bls.n	8006eb4 <RI_GetRegisterMotor1+0x624>
 8006e60:	f641 1318 	movw	r3, #6424	@ 0x1918
 8006e64:	4298      	cmp	r0, r3
 8006e66:	f000 8166 	beq.w	8007136 <RI_GetRegisterMotor1+0x8a6>
 8006e6a:	f641 1358 	movw	r3, #6488	@ 0x1958
 8006e6e:	4298      	cmp	r0, r3
 8006e70:	f040 8243 	bne.w	80072fa <RI_GetRegisterMotor1+0xa6a>
              ReadVal.Float_Val = OTT_GetJ(&OTT);
 8006e74:	483c      	ldr	r0, [pc, #240]	@ (8006f68 <RI_GetRegisterMotor1+0x6d8>)
 8006e76:	f7f9 fe33 	bl	8000ae0 <OTT_GetJ>
 8006e7a:	ed8d 0a01 	vstr	s0, [sp, #4]
              *regdataU32 = ReadVal.U32_Val;
 8006e7e:	9b01      	ldr	r3, [sp, #4]
 8006e80:	6023      	str	r3, [r4, #0]
              break;
 8006e82:	e584      	b.n	800698e <RI_GetRegisterMotor1+0xfe>
 8006e84:	f641 2358 	movw	r3, #6744	@ 0x1a58
 8006e88:	4298      	cmp	r0, r3
 8006e8a:	f000 816e 	beq.w	800716a <RI_GetRegisterMotor1+0x8da>
 8006e8e:	d922      	bls.n	8006ed6 <RI_GetRegisterMotor1+0x646>
 8006e90:	f641 3358 	movw	r3, #7000	@ 0x1b58
 8006e94:	4298      	cmp	r0, r3
 8006e96:	f000 8145 	beq.w	8007124 <RI_GetRegisterMotor1+0x894>
 8006e9a:	f641 5318 	movw	r3, #7448	@ 0x1d18
 8006e9e:	4298      	cmp	r0, r3
 8006ea0:	f040 822b 	bne.w	80072fa <RI_GetRegisterMotor1+0xa6a>
              ReadVal.Float_Val=SCC_GetResistorOffset(&SCC);
 8006ea4:	482b      	ldr	r0, [pc, #172]	@ (8006f54 <RI_GetRegisterMotor1+0x6c4>)
 8006ea6:	f7fb fd8d 	bl	80029c4 <SCC_GetResistorOffset>
 8006eaa:	ed8d 0a01 	vstr	s0, [sp, #4]
              *regdata32 =ReadVal.U32_Val;
 8006eae:	9b01      	ldr	r3, [sp, #4]
 8006eb0:	6023      	str	r3, [r4, #0]
              break;
 8006eb2:	e56c      	b.n	800698e <RI_GetRegisterMotor1+0xfe>
 8006eb4:	f641 0358 	movw	r3, #6232	@ 0x1858
 8006eb8:	4298      	cmp	r0, r3
 8006eba:	f000 814e 	beq.w	800715a <RI_GetRegisterMotor1+0x8ca>
 8006ebe:	f641 0398 	movw	r3, #6296	@ 0x1898
 8006ec2:	4298      	cmp	r0, r3
 8006ec4:	d116      	bne.n	8006ef4 <RI_GetRegisterMotor1+0x664>
              ReadVal.Float_Val = SCC_GetLdLqRatio(&SCC);
 8006ec6:	4823      	ldr	r0, [pc, #140]	@ (8006f54 <RI_GetRegisterMotor1+0x6c4>)
 8006ec8:	f7fb fd48 	bl	800295c <SCC_GetLdLqRatio>
 8006ecc:	ed8d 0a01 	vstr	s0, [sp, #4]
              *regdataU32 = ReadVal.U32_Val;
 8006ed0:	9b01      	ldr	r3, [sp, #4]
 8006ed2:	6023      	str	r3, [r4, #0]
              break;
 8006ed4:	e55b      	b.n	800698e <RI_GetRegisterMotor1+0xfe>
 8006ed6:	f641 13d8 	movw	r3, #6616	@ 0x19d8
 8006eda:	4298      	cmp	r0, r3
 8006edc:	f000 8159 	beq.w	8007192 <RI_GetRegisterMotor1+0x902>
 8006ee0:	f641 2318 	movw	r3, #6680	@ 0x1a18
 8006ee4:	4298      	cmp	r0, r3
 8006ee6:	f040 8208 	bne.w	80072fa <RI_GetRegisterMotor1+0xa6a>
              *regdata32 = SCC_GetEstMaxOLSpeed(&SCC);
 8006eea:	481a      	ldr	r0, [pc, #104]	@ (8006f54 <RI_GetRegisterMotor1+0x6c4>)
 8006eec:	f7fb fd64 	bl	80029b8 <SCC_GetEstMaxOLSpeed>
 8006ef0:	6020      	str	r0, [r4, #0]
              break;
 8006ef2:	e54c      	b.n	800698e <RI_GetRegisterMotor1+0xfe>
 8006ef4:	f641 0318 	movw	r3, #6168	@ 0x1818
 8006ef8:	4298      	cmp	r0, r3
 8006efa:	f040 81fe 	bne.w	80072fa <RI_GetRegisterMotor1+0xa6a>
              ReadVal.Float_Val = SCC_GetNominalCurrent(&SCC);
 8006efe:	4815      	ldr	r0, [pc, #84]	@ (8006f54 <RI_GetRegisterMotor1+0x6c4>)
 8006f00:	f7fb fd26 	bl	8002950 <SCC_GetNominalCurrent>
 8006f04:	ed8d 0a01 	vstr	s0, [sp, #4]
              *regdataU32 = ReadVal.U32_Val;
 8006f08:	9b01      	ldr	r3, [sp, #4]
 8006f0a:	6023      	str	r3, [r4, #0]
              break;
 8006f0c:	e53f      	b.n	800698e <RI_GetRegisterMotor1+0xfe>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8006f0e:	2008      	movs	r0, #8
  }
 8006f10:	b01a      	add	sp, #104	@ 0x68
 8006f12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            retVal = RI_MovString (MotorConfig_reg[motorID]->name ,charData, size, freeSpace);
 8006f16:	4b15      	ldr	r3, [pc, #84]	@ (8006f6c <RI_GetRegisterMotor1+0x6dc>)
 8006f18:	681a      	ldr	r2, [r3, #0]
  *size= 1U ; /* /0 is the min String size */
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	802b      	strh	r3, [r5, #0]
            retVal = RI_MovString (MotorConfig_reg[motorID]->name ,charData, size, freeSpace);
 8006f1e:	f102 0124 	add.w	r1, r2, #36	@ 0x24
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8006f22:	f992 2024 	ldrsb.w	r2, [r2, #36]	@ 0x24
 8006f26:	b31a      	cbz	r2, 8006f70 <RI_GetRegisterMotor1+0x6e0>
 8006f28:	fa1f fc8c 	uxth.w	ip, ip
 8006f2c:	e008      	b.n	8006f40 <RI_GetRegisterMotor1+0x6b0>
    *tempdestString = *tempsrcString;
 8006f2e:	f804 2b01 	strb.w	r2, [r4], #1
    *size = *size + 1U;
 8006f32:	882b      	ldrh	r3, [r5, #0]
 8006f34:	3301      	adds	r3, #1
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	802b      	strh	r3, [r5, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8006f3a:	f911 2f01 	ldrsb.w	r2, [r1, #1]!
 8006f3e:	b1ba      	cbz	r2, 8006f70 <RI_GetRegisterMotor1+0x6e0>
 8006f40:	459c      	cmp	ip, r3
 8006f42:	d8f4      	bhi.n	8006f2e <RI_GetRegisterMotor1+0x69e>
    retVal = MCP_ERROR_STRING_FORMAT;
 8006f44:	2006      	movs	r0, #6
 8006f46:	e4c2      	b.n	80068ce <RI_GetRegisterMotor1+0x3e>
 8006f48:	20000d30 	.word	0x20000d30
 8006f4c:	200009e8 	.word	0x200009e8
 8006f50:	200006a8 	.word	0x200006a8
 8006f54:	200000cc 	.word	0x200000cc
 8006f58:	200009bc 	.word	0x200009bc
 8006f5c:	20000990 	.word	0x20000990
 8006f60:	200006dc 	.word	0x200006dc
 8006f64:	20000678 	.word	0x20000678
 8006f68:	20000014 	.word	0x20000014
 8006f6c:	20000a28 	.word	0x20000a28
    *tempdestString = (int8_t)0;
 8006f70:	2300      	movs	r3, #0
 8006f72:	7023      	strb	r3, [r4, #0]
  uint8_t retVal = MCP_CMD_OK;
 8006f74:	2000      	movs	r0, #0
 8006f76:	e4aa      	b.n	80068ce <RI_GetRegisterMotor1+0x3e>
            retVal = RI_MovString (PWR_BOARD_NAME[motorID], charData, size, freeSpace);
 8006f78:	4ab4      	ldr	r2, [pc, #720]	@ (800724c <RI_GetRegisterMotor1+0x9bc>)
  *size= 1U ; /* /0 is the min String size */
 8006f7a:	2301      	movs	r3, #1
            retVal = RI_MovString (PWR_BOARD_NAME[motorID], charData, size, freeSpace);
 8006f7c:	6811      	ldr	r1, [r2, #0]
  *size= 1U ; /* /0 is the min String size */
 8006f7e:	802b      	strh	r3, [r5, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8006f80:	f991 2000 	ldrsb.w	r2, [r1]
 8006f84:	2a00      	cmp	r2, #0
 8006f86:	d0f3      	beq.n	8006f70 <RI_GetRegisterMotor1+0x6e0>
 8006f88:	fa1f fc8c 	uxth.w	ip, ip
 8006f8c:	e009      	b.n	8006fa2 <RI_GetRegisterMotor1+0x712>
    *tempdestString = *tempsrcString;
 8006f8e:	f804 2b01 	strb.w	r2, [r4], #1
    *size = *size + 1U;
 8006f92:	882b      	ldrh	r3, [r5, #0]
 8006f94:	3301      	adds	r3, #1
 8006f96:	b29b      	uxth	r3, r3
 8006f98:	802b      	strh	r3, [r5, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8006f9a:	f911 2f01 	ldrsb.w	r2, [r1, #1]!
 8006f9e:	2a00      	cmp	r2, #0
 8006fa0:	d0e6      	beq.n	8006f70 <RI_GetRegisterMotor1+0x6e0>
 8006fa2:	459c      	cmp	ip, r3
 8006fa4:	d8f3      	bhi.n	8006f8e <RI_GetRegisterMotor1+0x6fe>
 8006fa6:	e7cd      	b.n	8006f44 <RI_GetRegisterMotor1+0x6b4>
              memcpy(rawData, &scaleParams_M1, sizeof(ScaleParams_t) );
 8006fa8:	4aa9      	ldr	r2, [pc, #676]	@ (8007250 <RI_GetRegisterMotor1+0x9c0>)
 8006faa:	6850      	ldr	r0, [r2, #4]
 8006fac:	6814      	ldr	r4, [r2, #0]
 8006fae:	6891      	ldr	r1, [r2, #8]
 8006fb0:	68d2      	ldr	r2, [r2, #12]
 8006fb2:	60da      	str	r2, [r3, #12]
 8006fb4:	6058      	str	r0, [r3, #4]
 8006fb6:	601c      	str	r4, [r3, #0]
 8006fb8:	6099      	str	r1, [r3, #8]
    uint8_t retVal = MCP_CMD_OK;
 8006fba:	2000      	movs	r0, #0
              memcpy(rawData, &scaleParams_M1, sizeof(ScaleParams_t) );
 8006fbc:	230e      	movs	r3, #14
 8006fbe:	e4a6      	b.n	800690e <RI_GetRegisterMotor1+0x7e>
              ApplicationConfig_reg_t const *pApplicationConfig_reg = ApplicationConfig_reg[motorID];
 8006fc0:	4aa4      	ldr	r2, [pc, #656]	@ (8007254 <RI_GetRegisterMotor1+0x9c4>)
              (void)memcpy(rawData, (const uint8_t *)pApplicationConfig_reg, sizeof(ApplicationConfig_reg_t));
 8006fc2:	6812      	ldr	r2, [r2, #0]
 8006fc4:	6850      	ldr	r0, [r2, #4]
 8006fc6:	6814      	ldr	r4, [r2, #0]
 8006fc8:	6891      	ldr	r1, [r2, #8]
 8006fca:	68d2      	ldr	r2, [r2, #12]
 8006fcc:	60da      	str	r2, [r3, #12]
 8006fce:	6058      	str	r0, [r3, #4]
 8006fd0:	601c      	str	r4, [r3, #0]
 8006fd2:	6099      	str	r1, [r3, #8]
    uint8_t retVal = MCP_CMD_OK;
 8006fd4:	2000      	movs	r0, #0
              (void)memcpy(rawData, (const uint8_t *)pApplicationConfig_reg, sizeof(ApplicationConfig_reg_t));
 8006fd6:	2312      	movs	r3, #18
 8006fd8:	e499      	b.n	800690e <RI_GetRegisterMotor1+0x7e>
 8006fda:	2005      	movs	r0, #5
 8006fdc:	e4b1      	b.n	8006942 <RI_GetRegisterMotor1+0xb2>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8006fde:	4608      	mov	r0, r1
 8006fe0:	e475      	b.n	80068ce <RI_GetRegisterMotor1+0x3e>
        *size = (*rawSize) + 2U;
 8006fe2:	8823      	ldrh	r3, [r4, #0]
 8006fe4:	3302      	adds	r3, #2
            retVal = MCP_ERROR_UNKNOWN_REG;
 8006fe6:	2005      	movs	r0, #5
        *size = (*rawSize) + 2U;
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	e490      	b.n	800690e <RI_GetRegisterMotor1+0x7e>
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8006fec:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = (uint16_t)sizeof(FOCFwConfig_reg_t);
 8006ff0:	220e      	movs	r2, #14
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8006ff2:	f1bc 0f0f 	cmp.w	ip, #15
            *rawSize = (uint16_t)sizeof(FOCFwConfig_reg_t);
 8006ff6:	8022      	strh	r2, [r4, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8006ff8:	f200 8082 	bhi.w	8007100 <RI_GetRegisterMotor1+0x870>
 8006ffc:	2310      	movs	r3, #16
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8006ffe:	2008      	movs	r0, #8
 8007000:	e485      	b.n	800690e <RI_GetRegisterMotor1+0x7e>
            *rpm = (((int32_t)MCI_GetLastRampFinalSpeed(pMCIN) * U_RPM) / (int32_t)SPEED_UNIT);
 8007002:	4895      	ldr	r0, [pc, #596]	@ (8007258 <RI_GetRegisterMotor1+0x9c8>)
 8007004:	f7fd fd8e 	bl	8004b24 <MCI_GetLastRampFinalSpeed>
 8007008:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800700c:	0043      	lsls	r3, r0, #1
 800700e:	f8c4 3002 	str.w	r3, [r4, #2]
            *duration = MCI_GetLastRampFinalDuration(pMCIN);
 8007012:	4891      	ldr	r0, [pc, #580]	@ (8007258 <RI_GetRegisterMotor1+0x9c8>)
 8007014:	f7fd fd8e 	bl	8004b34 <MCI_GetLastRampFinalDuration>
            *rawSize = 6;
 8007018:	2306      	movs	r3, #6
            *duration = MCI_GetLastRampFinalDuration(pMCIN);
 800701a:	80e0      	strh	r0, [r4, #6]
            *rawSize = 6;
 800701c:	8023      	strh	r3, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 800701e:	2000      	movs	r0, #0
            break;
 8007020:	2308      	movs	r3, #8
 8007022:	e474      	b.n	800690e <RI_GetRegisterMotor1+0x7e>
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8007024:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = (uint16_t)RUC_MAX_PHASE_NUMBER*8U;
 8007028:	2328      	movs	r3, #40	@ 0x28
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 800702a:	f1bc 0f29 	cmp.w	ip, #41	@ 0x29
            *rawSize = (uint16_t)RUC_MAX_PHASE_NUMBER*8U;
 800702e:	8023      	strh	r3, [r4, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8007030:	d949      	bls.n	80070c6 <RI_GetRegisterMotor1+0x836>
                (void)RUC_GetPhase( &RevUpControlM1 ,i, &revUpPhase);
 8007032:	f8df 8228 	ldr.w	r8, [pc, #552]	@ 800725c <RI_GetRegisterMotor1+0x9cc>
 8007036:	4627      	mov	r7, r4
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8007038:	2600      	movs	r6, #0
                (void)RUC_GetPhase( &RevUpControlM1 ,i, &revUpPhase);
 800703a:	b2f1      	uxtb	r1, r6
 800703c:	aa17      	add	r2, sp, #92	@ 0x5c
 800703e:	4640      	mov	r0, r8
 8007040:	f003 fbdc 	bl	800a7fc <RUC_GetPhase>
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 8007044:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	@ 0x5e
 8007048:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800704c:	005b      	lsls	r3, r3, #1
 800704e:	f8c7 3002 	str.w	r3, [r7, #2]
              for (i = 0; i <RUC_MAX_PHASE_NUMBER; i++)
 8007052:	3601      	adds	r6, #1
                *finalTorque = (uint16_t)revUpPhase.hFinalTorque; //cstat !MISRAC2012-Rule-11.3
 8007054:	f8bd 3060 	ldrh.w	r3, [sp, #96]	@ 0x60
 8007058:	80fb      	strh	r3, [r7, #6]
              for (i = 0; i <RUC_MAX_PHASE_NUMBER; i++)
 800705a:	2e05      	cmp	r6, #5
                *durationms  = revUpPhase.hDurationms;
 800705c:	f8bd 305c 	ldrh.w	r3, [sp, #92]	@ 0x5c
 8007060:	f827 3f08 	strh.w	r3, [r7, #8]!
              for (i = 0; i <RUC_MAX_PHASE_NUMBER; i++)
 8007064:	d1e9      	bne.n	800703a <RI_GetRegisterMotor1+0x7aa>
        *size = (*rawSize) + 2U;
 8007066:	8823      	ldrh	r3, [r4, #0]
 8007068:	3302      	adds	r3, #2
    uint8_t retVal = MCP_CMD_OK;
 800706a:	2000      	movs	r0, #0
        *size = (*rawSize) + 2U;
 800706c:	b29b      	uxth	r3, r3
 800706e:	e44e      	b.n	800690e <RI_GetRegisterMotor1+0x7e>
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8007070:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = (uint16_t)sizeof(MotorConfig_reg_t);
 8007074:	223c      	movs	r2, #60	@ 0x3c
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8007076:	f1bc 0f3d 	cmp.w	ip, #61	@ 0x3d
            *rawSize = (uint16_t)sizeof(MotorConfig_reg_t);
 800707a:	8022      	strh	r2, [r4, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 800707c:	d826      	bhi.n	80070cc <RI_GetRegisterMotor1+0x83c>
 800707e:	233e      	movs	r3, #62	@ 0x3e
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8007080:	2008      	movs	r0, #8
 8007082:	e444      	b.n	800690e <RI_GetRegisterMotor1+0x7e>
              *data = (uint8_t)RUC_GetNumberOfPhases(&RevUpControlM1);
 8007084:	4875      	ldr	r0, [pc, #468]	@ (800725c <RI_GetRegisterMotor1+0x9cc>)
 8007086:	f003 fbb5 	bl	800a7f4 <RUC_GetNumberOfPhases>
              break;
 800708a:	e458      	b.n	800693e <RI_GetRegisterMotor1+0xae>
              state = SCC_GetState(&SCC);
 800708c:	4874      	ldr	r0, [pc, #464]	@ (8007260 <RI_GetRegisterMotor1+0x9d0>)
 800708e:	f7fa fff1 	bl	8002074 <SCC_GetState>
 8007092:	4606      	mov	r6, r0
              state += OTT_GetState (&OTT);
 8007094:	4873      	ldr	r0, [pc, #460]	@ (8007264 <RI_GetRegisterMotor1+0x9d4>)
 8007096:	f7f9 fc74 	bl	8000982 <OTT_GetState>
 800709a:	4430      	add	r0, r6
 800709c:	b2c0      	uxtb	r0, r0
              break;
 800709e:	e44e      	b.n	800693e <RI_GetRegisterMotor1+0xae>
              *data = SCC_GetFOCRepRate(&SCC);
 80070a0:	486f      	ldr	r0, [pc, #444]	@ (8007260 <RI_GetRegisterMotor1+0x9d0>)
 80070a2:	f7fb fcbe 	bl	8002a22 <SCC_GetFOCRepRate>
              break;
 80070a6:	e44a      	b.n	800693e <RI_GetRegisterMotor1+0xae>
              *data = (uint8_t)MCI_GetSTMState(pMCIN);
 80070a8:	486b      	ldr	r0, [pc, #428]	@ (8007258 <RI_GetRegisterMotor1+0x9c8>)
 80070aa:	f7fd fcab 	bl	8004a04 <MCI_GetSTMState>
              break;
 80070ae:	e446      	b.n	800693e <RI_GetRegisterMotor1+0xae>
              steps = SCC_GetSteps(&SCC);
 80070b0:	486b      	ldr	r0, [pc, #428]	@ (8007260 <RI_GetRegisterMotor1+0x9d0>)
 80070b2:	f7fa ffdd 	bl	8002070 <SCC_GetSteps>
 80070b6:	4606      	mov	r6, r0
              steps += OTT_GetSteps (&OTT);
 80070b8:	486a      	ldr	r0, [pc, #424]	@ (8007264 <RI_GetRegisterMotor1+0x9d4>)
 80070ba:	f7f9 fc60 	bl	800097e <OTT_GetSteps>
 80070be:	4430      	add	r0, r6
              *data = steps-1u;
 80070c0:	3801      	subs	r0, #1
 80070c2:	b2c0      	uxtb	r0, r0
              break;
 80070c4:	e43b      	b.n	800693e <RI_GetRegisterMotor1+0xae>
 80070c6:	232a      	movs	r3, #42	@ 0x2a
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 80070c8:	2008      	movs	r0, #8
            break;
 80070ca:	e420      	b.n	800690e <RI_GetRegisterMotor1+0x7e>
              MotorConfig_reg_t const *pMotorConfig_reg = MotorConfig_reg[motorID];
 80070cc:	4a66      	ldr	r2, [pc, #408]	@ (8007268 <RI_GetRegisterMotor1+0x9d8>)
              (void)memcpy(rawData, (const uint8_t *)pMotorConfig_reg, sizeof(MotorConfig_reg_t));
 80070ce:	6812      	ldr	r2, [r2, #0]
 80070d0:	f102 0730 	add.w	r7, r2, #48	@ 0x30
 80070d4:	6814      	ldr	r4, [r2, #0]
 80070d6:	6850      	ldr	r0, [r2, #4]
 80070d8:	6891      	ldr	r1, [r2, #8]
 80070da:	68d6      	ldr	r6, [r2, #12]
 80070dc:	60de      	str	r6, [r3, #12]
 80070de:	3210      	adds	r2, #16
 80070e0:	42ba      	cmp	r2, r7
 80070e2:	601c      	str	r4, [r3, #0]
 80070e4:	6058      	str	r0, [r3, #4]
 80070e6:	6099      	str	r1, [r3, #8]
 80070e8:	f103 0310 	add.w	r3, r3, #16
 80070ec:	d1f2      	bne.n	80070d4 <RI_GetRegisterMotor1+0x844>
 80070ee:	6810      	ldr	r0, [r2, #0]
 80070f0:	6851      	ldr	r1, [r2, #4]
 80070f2:	6892      	ldr	r2, [r2, #8]
 80070f4:	609a      	str	r2, [r3, #8]
 80070f6:	6018      	str	r0, [r3, #0]
 80070f8:	6059      	str	r1, [r3, #4]
    uint8_t retVal = MCP_CMD_OK;
 80070fa:	2000      	movs	r0, #0
              (void)memcpy(rawData, (const uint8_t *)pMotorConfig_reg, sizeof(MotorConfig_reg_t));
 80070fc:	233e      	movs	r3, #62	@ 0x3e
 80070fe:	e406      	b.n	800690e <RI_GetRegisterMotor1+0x7e>
              FOCFwConfig_reg_t const *pFOCConfig_reg = FOCConfig_reg[motorID];
 8007100:	4a5a      	ldr	r2, [pc, #360]	@ (800726c <RI_GetRegisterMotor1+0x9dc>)
              (void)memcpy(rawData, (const uint8_t *)pFOCConfig_reg, sizeof(FOCFwConfig_reg_t));
 8007102:	6812      	ldr	r2, [r2, #0]
 8007104:	6810      	ldr	r0, [r2, #0]
 8007106:	6851      	ldr	r1, [r2, #4]
 8007108:	6894      	ldr	r4, [r2, #8]
 800710a:	609c      	str	r4, [r3, #8]
 800710c:	6018      	str	r0, [r3, #0]
 800710e:	6059      	str	r1, [r3, #4]
 8007110:	8992      	ldrh	r2, [r2, #12]
 8007112:	819a      	strh	r2, [r3, #12]
    uint8_t retVal = MCP_CMD_OK;
 8007114:	2000      	movs	r0, #0
              (void)memcpy(rawData, (const uint8_t *)pFOCConfig_reg, sizeof(FOCFwConfig_reg_t));
 8007116:	2310      	movs	r3, #16
 8007118:	f7ff bbf9 	b.w	800690e <RI_GetRegisterMotor1+0x7e>
              *regdata32 = FF_M1.wConstant_2;
 800711c:	4b54      	ldr	r3, [pc, #336]	@ (8007270 <RI_GetRegisterMotor1+0x9e0>)
 800711e:	695b      	ldr	r3, [r3, #20]
 8007120:	6023      	str	r3, [r4, #0]
              break;
 8007122:	e434      	b.n	800698e <RI_GetRegisterMotor1+0xfe>
              ReadVal.Float_Val = PQD_GetAvrgElMotorPowerW(pMPM[M1]);
 8007124:	4b53      	ldr	r3, [pc, #332]	@ (8007274 <RI_GetRegisterMotor1+0x9e4>)
 8007126:	6818      	ldr	r0, [r3, #0]
 8007128:	f002 fbd2 	bl	80098d0 <PQD_GetAvrgElMotorPowerW>
 800712c:	ed8d 0a01 	vstr	s0, [sp, #4]
              *regdataU32 = ReadVal.U32_Val; //cstat !UNION-type-punning
 8007130:	9b01      	ldr	r3, [sp, #4]
 8007132:	6023      	str	r3, [r4, #0]
              break;
 8007134:	e42b      	b.n	800698e <RI_GetRegisterMotor1+0xfe>
              ReadVal.Float_Val = SCC_GetCurrentBandwidth(&SCC);
 8007136:	484a      	ldr	r0, [pc, #296]	@ (8007260 <RI_GetRegisterMotor1+0x9d0>)
 8007138:	f7fb fc6b 	bl	8002a12 <SCC_GetCurrentBandwidth>
 800713c:	ed8d 0a01 	vstr	s0, [sp, #4]
              *regdataU32 = ReadVal.U32_Val;
 8007140:	9b01      	ldr	r3, [sp, #4]
 8007142:	6023      	str	r3, [r4, #0]
              break;
 8007144:	e423      	b.n	800698e <RI_GetRegisterMotor1+0xfe>
              *regdataU32 = SCC_GetKe(&SCC);
 8007146:	4846      	ldr	r0, [pc, #280]	@ (8007260 <RI_GetRegisterMotor1+0x9d0>)
 8007148:	f7fa ffdb 	bl	8002102 <SCC_GetKe>
 800714c:	6020      	str	r0, [r4, #0]
              break;
 800714e:	e41e      	b.n	800698e <RI_GetRegisterMotor1+0xfe>
              *regdata32 = STO_PLL_GetObservedBemfLevel(&STO_PLL_M1);
 8007150:	4849      	ldr	r0, [pc, #292]	@ (8007278 <RI_GetRegisterMotor1+0x9e8>)
 8007152:	f003 ff57 	bl	800b004 <STO_PLL_GetObservedBemfLevel>
 8007156:	6020      	str	r0, [r4, #0]
              break;
 8007158:	e419      	b.n	800698e <RI_GetRegisterMotor1+0xfe>
              ReadVal.Float_Val = OTT_GetSpeedRegulatorBandwidth(&OTT);
 800715a:	4842      	ldr	r0, [pc, #264]	@ (8007264 <RI_GetRegisterMotor1+0x9d4>)
 800715c:	f7f9 fcbc 	bl	8000ad8 <OTT_GetSpeedRegulatorBandwidth>
 8007160:	ed8d 0a01 	vstr	s0, [sp, #4]
              *regdataU32 = ReadVal.U32_Val;
 8007164:	9b01      	ldr	r3, [sp, #4]
 8007166:	6023      	str	r3, [r4, #0]
              break;
 8007168:	e411      	b.n	800698e <RI_GetRegisterMotor1+0xfe>
              *regdata32 = SCC_GetEstMaxAcceleration(&SCC);
 800716a:	483d      	ldr	r0, [pc, #244]	@ (8007260 <RI_GetRegisterMotor1+0x9d0>)
 800716c:	f7fb fc27 	bl	80029be <SCC_GetEstMaxAcceleration>
 8007170:	6020      	str	r0, [r4, #0]
              break;
 8007172:	e40c      	b.n	800698e <RI_GetRegisterMotor1+0xfe>
              *regdataU32 = OTT_GetNominalSpeed(&OTT);
 8007174:	483b      	ldr	r0, [pc, #236]	@ (8007264 <RI_GetRegisterMotor1+0x9d4>)
 8007176:	f7f9 fbfe 	bl	8000976 <OTT_GetNominalSpeed>
 800717a:	6020      	str	r0, [r4, #0]
              break;
 800717c:	e407      	b.n	800698e <RI_GetRegisterMotor1+0xfe>
              *regdata32 = STO_PLL_GetEstimatedBemfLevel(&STO_PLL_M1);
 800717e:	483e      	ldr	r0, [pc, #248]	@ (8007278 <RI_GetRegisterMotor1+0x9e8>)
 8007180:	f003 ff3c 	bl	800affc <STO_PLL_GetEstimatedBemfLevel>
 8007184:	6020      	str	r0, [r4, #0]
              break;
 8007186:	e402      	b.n	800698e <RI_GetRegisterMotor1+0xfe>
              *regdata32 = FF_M1.wConstant_1D;
 8007188:	4b39      	ldr	r3, [pc, #228]	@ (8007270 <RI_GetRegisterMotor1+0x9e0>)
 800718a:	68db      	ldr	r3, [r3, #12]
 800718c:	6023      	str	r3, [r4, #0]
              break;
 800718e:	f7ff bbfe 	b.w	800698e <RI_GetRegisterMotor1+0xfe>
              ReadVal.Float_Val = SCC_GetStartupCurrentAmp(&SCC);
 8007192:	4833      	ldr	r0, [pc, #204]	@ (8007260 <RI_GetRegisterMotor1+0x9d0>)
 8007194:	f7fb fc37 	bl	8002a06 <SCC_GetStartupCurrentAmp>
 8007198:	ed8d 0a01 	vstr	s0, [sp, #4]
              *regdataU32 = ReadVal.U32_Val;
 800719c:	9b01      	ldr	r3, [sp, #4]
 800719e:	6023      	str	r3, [r4, #0]
              break;
 80071a0:	f7ff bbf5 	b.w	800698e <RI_GetRegisterMotor1+0xfe>
              *regdata32 = SCC_GetNominalSpeed(&SCC);
 80071a4:	482e      	ldr	r0, [pc, #184]	@ (8007260 <RI_GetRegisterMotor1+0x9d0>)
 80071a6:	f7fb fc04 	bl	80029b2 <SCC_GetNominalSpeed>
 80071aa:	6020      	str	r0, [r4, #0]
              break;
 80071ac:	f7ff bbef 	b.w	800698e <RI_GetRegisterMotor1+0xfe>
              ReadVal.Float_Val = OTT_GetF(&OTT);
 80071b0:	482c      	ldr	r0, [pc, #176]	@ (8007264 <RI_GetRegisterMotor1+0x9d4>)
 80071b2:	f7f9 fcad 	bl	8000b10 <OTT_GetF>
 80071b6:	ed8d 0a01 	vstr	s0, [sp, #4]
              *regdataU32 = ReadVal.U32_Val;
 80071ba:	9b01      	ldr	r3, [sp, #4]
 80071bc:	6023      	str	r3, [r4, #0]
              break;
 80071be:	f7ff bbe6 	b.w	800698e <RI_GetRegisterMotor1+0xfe>
              *regdataU32 = SCC_GetLs(&SCC);
 80071c2:	4827      	ldr	r0, [pc, #156]	@ (8007260 <RI_GetRegisterMotor1+0x9d0>)
 80071c4:	f7fa ff99 	bl	80020fa <SCC_GetLs>
 80071c8:	6020      	str	r0, [r4, #0]
              break;
 80071ca:	f7ff bbe0 	b.w	800698e <RI_GetRegisterMotor1+0xfe>
              *regdata32 = (((int32_t)MCI_GetAvrgMecSpeedUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 80071ce:	4822      	ldr	r0, [pc, #136]	@ (8007258 <RI_GetRegisterMotor1+0x9c8>)
 80071d0:	f7fd fcc4 	bl	8004b5c <MCI_GetAvrgMecSpeedUnit>
 80071d4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80071d8:	0040      	lsls	r0, r0, #1
 80071da:	6020      	str	r0, [r4, #0]
              break;
 80071dc:	f7ff bbd7 	b.w	800698e <RI_GetRegisterMotor1+0xfe>
              *regdataU16 = VBS_GetAvBusVoltage_V(BusVoltageSensor);
 80071e0:	4826      	ldr	r0, [pc, #152]	@ (800727c <RI_GetRegisterMotor1+0x9ec>)
 80071e2:	f002 f93b 	bl	800945c <VBS_GetAvBusVoltage_V>
 80071e6:	8020      	strh	r0, [r4, #0]
              break;
 80071e8:	e540      	b.n	8006c6c <RI_GetRegisterMotor1+0x3dc>
              *regdata16 = MCI_GetValphabeta(pMCIN).beta;
 80071ea:	481b      	ldr	r0, [pc, #108]	@ (8007258 <RI_GetRegisterMotor1+0x9c8>)
 80071ec:	f7fd fd08 	bl	8004c00 <MCI_GetValphabeta>
 80071f0:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80071f4:	8023      	strh	r3, [r4, #0]
              break;
 80071f6:	e539      	b.n	8006c6c <RI_GetRegisterMotor1+0x3dc>
              *regdata16 = MCI_GetVqd(pMCIN).q;
 80071f8:	4817      	ldr	r0, [pc, #92]	@ (8007258 <RI_GetRegisterMotor1+0x9c8>)
 80071fa:	f7fd fcf3 	bl	8004be4 <MCI_GetVqd>
 80071fe:	8020      	strh	r0, [r4, #0]
              break;
 8007200:	e534      	b.n	8006c6c <RI_GetRegisterMotor1+0x3dc>
              *regdata16 = MCI_GetIqd(pMCIN).d;
 8007202:	4815      	ldr	r0, [pc, #84]	@ (8007258 <RI_GetRegisterMotor1+0x9c8>)
 8007204:	f7fd fcd2 	bl	8004bac <MCI_GetIqd>
 8007208:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800720c:	8023      	strh	r3, [r4, #0]
              break;
 800720e:	e52d      	b.n	8006c6c <RI_GetRegisterMotor1+0x3dc>
              *regdata16 = PID_GetKD(&PIDIdHandle_M1);
 8007210:	481b      	ldr	r0, [pc, #108]	@ (8007280 <RI_GetRegisterMotor1+0x9f0>)
 8007212:	f002 faf1 	bl	80097f8 <PID_GetKD>
 8007216:	8020      	strh	r0, [r4, #0]
              break;
 8007218:	e528      	b.n	8006c6c <RI_GetRegisterMotor1+0x3dc>
              *regdata16 = MCI_GetIalphabeta(pMCIN).alpha;
 800721a:	480f      	ldr	r0, [pc, #60]	@ (8007258 <RI_GetRegisterMotor1+0x9c8>)
 800721c:	f7fd fcb8 	bl	8004b90 <MCI_GetIalphabeta>
 8007220:	8020      	strh	r0, [r4, #0]
              break;
 8007222:	e523      	b.n	8006c6c <RI_GetRegisterMotor1+0x3dc>
              STO_PLL_GetObserverGains(&STO_PLL_M1, &hC1, &hC2);
 8007224:	4814      	ldr	r0, [pc, #80]	@ (8007278 <RI_GetRegisterMotor1+0x9e8>)
 8007226:	aa17      	add	r2, sp, #92	@ 0x5c
 8007228:	a916      	add	r1, sp, #88	@ 0x58
 800722a:	f003 feb7 	bl	800af9c <STO_PLL_GetObserverGains>
              *regdata16 = hC2;
 800722e:	f8bd 305c 	ldrh.w	r3, [sp, #92]	@ 0x5c
 8007232:	8023      	strh	r3, [r4, #0]
              break;
 8007234:	e51a      	b.n	8006c6c <RI_GetRegisterMotor1+0x3dc>
              *regdata16 = PID_GetKP(&PIDIdHandle_M1);
 8007236:	4812      	ldr	r0, [pc, #72]	@ (8007280 <RI_GetRegisterMotor1+0x9f0>)
 8007238:	f002 faaa 	bl	8009790 <PID_GetKP>
 800723c:	8020      	strh	r0, [r4, #0]
              break;
 800723e:	e515      	b.n	8006c6c <RI_GetRegisterMotor1+0x3dc>
              *regdata16 = SPD_GetS16Speed((SpeednPosFdbk_Handle_t *)&STO_PLL_M1);
 8007240:	480d      	ldr	r0, [pc, #52]	@ (8007278 <RI_GetRegisterMotor1+0x9e8>)
 8007242:	f003 fb2d 	bl	800a8a0 <SPD_GetS16Speed>
 8007246:	8020      	strh	r0, [r4, #0]
              break;
 8007248:	e510      	b.n	8006c6c <RI_GetRegisterMotor1+0x3dc>
 800724a:	bf00      	nop
 800724c:	20000a30 	.word	0x20000a30
 8007250:	20000a34 	.word	0x20000a34
 8007254:	20000a24 	.word	0x20000a24
 8007258:	20000d30 	.word	0x20000d30
 800725c:	200008ac 	.word	0x200008ac
 8007260:	200000cc 	.word	0x200000cc
 8007264:	20000014 	.word	0x20000014
 8007268:	20000a28 	.word	0x20000a28
 800726c:	20000a2c 	.word	0x20000a2c
 8007270:	20000958 	.word	0x20000958
 8007274:	20000004 	.word	0x20000004
 8007278:	200006a8 	.word	0x200006a8
 800727c:	2000064c 	.word	0x2000064c
 8007280:	20000990 	.word	0x20000990
              *regdataU16 = PID_GetKDDivisorPOW2(&PIDSpeedHandle_M1);
 8007284:	481e      	ldr	r0, [pc, #120]	@ (8007300 <RI_GetRegisterMotor1+0xa70>)
 8007286:	f002 fabb 	bl	8009800 <PID_GetKDDivisorPOW2>
 800728a:	8020      	strh	r0, [r4, #0]
              break;
 800728c:	e4ee      	b.n	8006c6c <RI_GetRegisterMotor1+0x3dc>
              *regdataU16 = PID_GetKIDivisorPOW2(&PIDIdHandle_M1);
 800728e:	481d      	ldr	r0, [pc, #116]	@ (8007304 <RI_GetRegisterMotor1+0xa74>)
 8007290:	f002 fa92 	bl	80097b8 <PID_GetKIDivisorPOW2>
 8007294:	8020      	strh	r0, [r4, #0]
              break;
 8007296:	e4e9      	b.n	8006c6c <RI_GetRegisterMotor1+0x3dc>
              *regdata16 = MCI_GetIab(pMCIN).a;
 8007298:	481b      	ldr	r0, [pc, #108]	@ (8007308 <RI_GetRegisterMotor1+0xa78>)
 800729a:	f7fd fc6b 	bl	8004b74 <MCI_GetIab>
 800729e:	8020      	strh	r0, [r4, #0]
              break;
 80072a0:	e4e4      	b.n	8006c6c <RI_GetRegisterMotor1+0x3dc>
              *regdataU16 = PID_GetKPDivisorPOW2(&(&STO_PLL_M1)->PIRegulator);
 80072a2:	481a      	ldr	r0, [pc, #104]	@ (800730c <RI_GetRegisterMotor1+0xa7c>)
 80072a4:	f002 fa7e 	bl	80097a4 <PID_GetKPDivisorPOW2>
 80072a8:	8020      	strh	r0, [r4, #0]
              break;
 80072aa:	e4df      	b.n	8006c6c <RI_GetRegisterMotor1+0x3dc>
              *regdataU16 = PID_GetKIDivisorPOW2(&PIDIqHandle_M1);
 80072ac:	4818      	ldr	r0, [pc, #96]	@ (8007310 <RI_GetRegisterMotor1+0xa80>)
 80072ae:	f002 fa83 	bl	80097b8 <PID_GetKIDivisorPOW2>
 80072b2:	8020      	strh	r0, [r4, #0]
              break;
 80072b4:	e4da      	b.n	8006c6c <RI_GetRegisterMotor1+0x3dc>
              *regdata16 = PID_GetKI(&PIDSpeedHandle_M1);
 80072b6:	4812      	ldr	r0, [pc, #72]	@ (8007300 <RI_GetRegisterMotor1+0xa70>)
 80072b8:	f002 fa6e 	bl	8009798 <PID_GetKI>
 80072bc:	8020      	strh	r0, [r4, #0]
              break;
 80072be:	e4d5      	b.n	8006c6c <RI_GetRegisterMotor1+0x3dc>
              *regdata16 = PID_GetKP(&PIDIqHandle_M1);
 80072c0:	4813      	ldr	r0, [pc, #76]	@ (8007310 <RI_GetRegisterMotor1+0xa80>)
 80072c2:	f002 fa65 	bl	8009790 <PID_GetKP>
 80072c6:	8020      	strh	r0, [r4, #0]
              break;
 80072c8:	e4d0      	b.n	8006c6c <RI_GetRegisterMotor1+0x3dc>
              *regdata16 = STO_PLL_GetEstimatedCurrent(&STO_PLL_M1).beta;
 80072ca:	4812      	ldr	r0, [pc, #72]	@ (8007314 <RI_GetRegisterMotor1+0xa84>)
 80072cc:	f003 fe54 	bl	800af78 <STO_PLL_GetEstimatedCurrent>
 80072d0:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80072d4:	8023      	strh	r3, [r4, #0]
              break;
 80072d6:	e4c9      	b.n	8006c6c <RI_GetRegisterMotor1+0x3dc>
              *regdata16 = FF_GetVqdff(&FF_M1).q;
 80072d8:	480f      	ldr	r0, [pc, #60]	@ (8007318 <RI_GetRegisterMotor1+0xa88>)
 80072da:	f002 f96b 	bl	80095b4 <FF_GetVqdff>
 80072de:	8020      	strh	r0, [r4, #0]
              break;
 80072e0:	e4c4      	b.n	8006c6c <RI_GetRegisterMotor1+0x3dc>
              *regdata16 = FF_GetVqdAvPIout(&FF_M1).q;
 80072e2:	480d      	ldr	r0, [pc, #52]	@ (8007318 <RI_GetRegisterMotor1+0xa88>)
 80072e4:	f002 f972 	bl	80095cc <FF_GetVqdAvPIout>
 80072e8:	8020      	strh	r0, [r4, #0]
              break;
 80072ea:	e4bf      	b.n	8006c6c <RI_GetRegisterMotor1+0x3dc>
              *regdataU16 = (uint16_t)PID_GetKPDivisorPOW2(&PIDSpeedHandle_M1);
 80072ec:	4804      	ldr	r0, [pc, #16]	@ (8007300 <RI_GetRegisterMotor1+0xa70>)
 80072ee:	f002 fa59 	bl	80097a4 <PID_GetKPDivisorPOW2>
 80072f2:	8020      	strh	r0, [r4, #0]
              break;
 80072f4:	e4ba      	b.n	8006c6c <RI_GetRegisterMotor1+0x3dc>
 80072f6:	2005      	movs	r0, #5
 80072f8:	e4b9      	b.n	8006c6e <RI_GetRegisterMotor1+0x3de>
 80072fa:	2005      	movs	r0, #5
 80072fc:	f7ff bb48 	b.w	8006990 <RI_GetRegisterMotor1+0x100>
 8007300:	200009e8 	.word	0x200009e8
 8007304:	20000990 	.word	0x20000990
 8007308:	20000d30 	.word	0x20000d30
 800730c:	200006dc 	.word	0x200006dc
 8007310:	200009bc 	.word	0x200009bc
 8007314:	200006a8 	.word	0x200006a8
 8007318:	20000958 	.word	0x20000958

0800731c <RI_GetIDSize>:
  return (retVal);
}

uint8_t RI_GetIDSize(uint16_t dataID)
{
  uint8_t typeID = ((uint8_t)dataID) & TYPE_MASK;
 800731c:	f000 0038 	and.w	r0, r0, #56	@ 0x38
 8007320:	3808      	subs	r0, #8
 8007322:	b2c0      	uxtb	r0, r0
 8007324:	2810      	cmp	r0, #16
 8007326:	bf9a      	itte	ls
 8007328:	4b01      	ldrls	r3, [pc, #4]	@ (8007330 <RI_GetIDSize+0x14>)
 800732a:	5c18      	ldrbls	r0, [r3, r0]
 800732c:	2000      	movhi	r0, #0
      break;
    }
  }

  return (result);
}
 800732e:	4770      	bx	lr
 8007330:	0800b780 	.word	0x0800b780

08007334 <RI_GetPtrReg>:

    MCI_Handle_t *pMCIN = &Mci[0];
    uint16_t regID = dataID & REG_MASK;
    uint8_t typeID = ((uint8_t)dataID) & TYPE_MASK;

    switch (typeID)
 8007334:	f000 0338 	and.w	r3, r0, #56	@ 0x38
 8007338:	2b10      	cmp	r3, #16
 800733a:	d003      	beq.n	8007344 <RI_GetPtrReg+0x10>
 800733c:	4a43      	ldr	r2, [pc, #268]	@ (800744c <RI_GetPtrReg+0x118>)
      }

      default:
      {
        *dataPtr = &nullData16;
        retVal = MCP_ERROR_UNKNOWN_REG;
 800733e:	2005      	movs	r0, #5
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 8007340:	600a      	str	r2, [r1, #0]
    }
#ifdef NULL_PTR_CHECK_REG_INT
  }
#endif
  return (retVal);
}
 8007342:	4770      	bx	lr
    uint16_t regID = dataID & REG_MASK;
 8007344:	f020 0007 	bic.w	r0, r0, #7
 8007348:	f5b0 6f1d 	cmp.w	r0, #2512	@ 0x9d0
 800734c:	b283      	uxth	r3, r0
 800734e:	d073      	beq.n	8007438 <RI_GetPtrReg+0x104>
 8007350:	d80f      	bhi.n	8007372 <RI_GetPtrReg+0x3e>
 8007352:	f5b3 6f0d 	cmp.w	r3, #2256	@ 0x8d0
 8007356:	d074      	beq.n	8007442 <RI_GetPtrReg+0x10e>
 8007358:	d824      	bhi.n	80073a4 <RI_GetPtrReg+0x70>
 800735a:	f5b3 6f05 	cmp.w	r3, #2128	@ 0x850
 800735e:	d058      	beq.n	8007412 <RI_GetPtrReg+0xde>
 8007360:	d915      	bls.n	800738e <RI_GetPtrReg+0x5a>
 8007362:	f5b3 6f09 	cmp.w	r3, #2192	@ 0x890
 8007366:	d1e9      	bne.n	800733c <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.beta);
 8007368:	4b39      	ldr	r3, [pc, #228]	@ (8007450 <RI_GetPtrReg+0x11c>)
 800736a:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 800736c:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.beta);
 800736e:	3206      	adds	r2, #6
            break;
 8007370:	e7e6      	b.n	8007340 <RI_GetPtrReg+0xc>
 8007372:	f5b3 6f35 	cmp.w	r3, #2896	@ 0xb50
 8007376:	d049      	beq.n	800740c <RI_GetPtrReg+0xd8>
 8007378:	d929      	bls.n	80073ce <RI_GetPtrReg+0x9a>
 800737a:	f5b3 6f45 	cmp.w	r3, #3152	@ 0xc50
 800737e:	d041      	beq.n	8007404 <RI_GetPtrReg+0xd0>
 8007380:	f5b3 6f49 	cmp.w	r3, #3216	@ 0xc90
 8007384:	d119      	bne.n	80073ba <RI_GetPtrReg+0x86>
 8007386:	4a33      	ldr	r2, [pc, #204]	@ (8007454 <RI_GetPtrReg+0x120>)
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 8007388:	600a      	str	r2, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 800738a:	2000      	movs	r0, #0
}
 800738c:	4770      	bx	lr
 800738e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8007392:	d04d      	beq.n	8007430 <RI_GetPtrReg+0xfc>
 8007394:	f5b3 6f01 	cmp.w	r3, #2064	@ 0x810
 8007398:	d1d0      	bne.n	800733c <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Iab.b);
 800739a:	4b2d      	ldr	r3, [pc, #180]	@ (8007450 <RI_GetPtrReg+0x11c>)
 800739c:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 800739e:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iab.b);
 80073a0:	3202      	adds	r2, #2
            break;
 80073a2:	e7cd      	b.n	8007340 <RI_GetPtrReg+0xc>
 80073a4:	f5b3 6f15 	cmp.w	r3, #2384	@ 0x950
 80073a8:	d038      	beq.n	800741c <RI_GetPtrReg+0xe8>
 80073aa:	f5b3 6f19 	cmp.w	r3, #2448	@ 0x990
 80073ae:	d119      	bne.n	80073e4 <RI_GetPtrReg+0xb0>
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.d);
 80073b0:	4b27      	ldr	r3, [pc, #156]	@ (8007450 <RI_GetPtrReg+0x11c>)
 80073b2:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 80073b4:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.d);
 80073b6:	3212      	adds	r2, #18
            break;
 80073b8:	e7c2      	b.n	8007340 <RI_GetPtrReg+0xc>
 80073ba:	4824      	ldr	r0, [pc, #144]	@ (800744c <RI_GetPtrReg+0x118>)
 80073bc:	4a26      	ldr	r2, [pc, #152]	@ (8007458 <RI_GetPtrReg+0x124>)
 80073be:	f5b3 6f39 	cmp.w	r3, #2960	@ 0xb90
 80073c2:	bf16      	itet	ne
 80073c4:	4602      	movne	r2, r0
 80073c6:	2000      	moveq	r0, #0
 80073c8:	2005      	movne	r0, #5
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 80073ca:	600a      	str	r2, [r1, #0]
}
 80073cc:	4770      	bx	lr
 80073ce:	f5b3 6f25 	cmp.w	r3, #2640	@ 0xa50
 80073d2:	d028      	beq.n	8007426 <RI_GetPtrReg+0xf2>
 80073d4:	f5b3 6f29 	cmp.w	r3, #2704	@ 0xa90
 80073d8:	d10c      	bne.n	80073f4 <RI_GetPtrReg+0xc0>
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.beta);
 80073da:	4b1d      	ldr	r3, [pc, #116]	@ (8007450 <RI_GetPtrReg+0x11c>)
 80073dc:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 80073de:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.beta);
 80073e0:	321c      	adds	r2, #28
            break;
 80073e2:	e7ad      	b.n	8007340 <RI_GetPtrReg+0xc>
 80073e4:	f5b3 6f11 	cmp.w	r3, #2320	@ 0x910
 80073e8:	d1a8      	bne.n	800733c <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Iqd.d);
 80073ea:	4b19      	ldr	r3, [pc, #100]	@ (8007450 <RI_GetPtrReg+0x11c>)
 80073ec:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 80073ee:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqd.d);
 80073f0:	320e      	adds	r2, #14
            break;
 80073f2:	e7a5      	b.n	8007340 <RI_GetPtrReg+0xc>
 80073f4:	f5b3 6f21 	cmp.w	r3, #2576	@ 0xa10
 80073f8:	d1a0      	bne.n	800733c <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Vqd.d);
 80073fa:	4b15      	ldr	r3, [pc, #84]	@ (8007450 <RI_GetPtrReg+0x11c>)
 80073fc:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 80073fe:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Vqd.d);
 8007400:	3218      	adds	r2, #24
            break;
 8007402:	e79d      	b.n	8007340 <RI_GetPtrReg+0xc>
 8007404:	4a15      	ldr	r2, [pc, #84]	@ (800745c <RI_GetPtrReg+0x128>)
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 8007406:	600a      	str	r2, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 8007408:	2000      	movs	r0, #0
}
 800740a:	4770      	bx	lr
 800740c:	4a14      	ldr	r2, [pc, #80]	@ (8007460 <RI_GetPtrReg+0x12c>)
  uint8_t retVal = MCP_CMD_OK;
 800740e:	2000      	movs	r0, #0
 8007410:	e796      	b.n	8007340 <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.alpha);
 8007412:	4b0f      	ldr	r3, [pc, #60]	@ (8007450 <RI_GetPtrReg+0x11c>)
 8007414:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8007416:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.alpha);
 8007418:	3204      	adds	r2, #4
            break;
 800741a:	e791      	b.n	8007340 <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.q);
 800741c:	4b0c      	ldr	r3, [pc, #48]	@ (8007450 <RI_GetPtrReg+0x11c>)
 800741e:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8007420:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.q);
 8007422:	3210      	adds	r2, #16
            break;
 8007424:	e78c      	b.n	8007340 <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.alpha);
 8007426:	4b0a      	ldr	r3, [pc, #40]	@ (8007450 <RI_GetPtrReg+0x11c>)
 8007428:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 800742a:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.alpha);
 800742c:	321a      	adds	r2, #26
            break;
 800742e:	e787      	b.n	8007340 <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 8007430:	4b07      	ldr	r3, [pc, #28]	@ (8007450 <RI_GetPtrReg+0x11c>)
  uint8_t retVal = MCP_CMD_OK;
 8007432:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 8007434:	685a      	ldr	r2, [r3, #4]
             break;
 8007436:	e783      	b.n	8007340 <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Vqd.q);
 8007438:	4b05      	ldr	r3, [pc, #20]	@ (8007450 <RI_GetPtrReg+0x11c>)
 800743a:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 800743c:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Vqd.q);
 800743e:	3216      	adds	r2, #22
            break;
 8007440:	e77e      	b.n	8007340 <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Iqd.q);
 8007442:	4b03      	ldr	r3, [pc, #12]	@ (8007450 <RI_GetPtrReg+0x11c>)
 8007444:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8007446:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqd.q);
 8007448:	320c      	adds	r2, #12
            break;
 800744a:	e779      	b.n	8007340 <RI_GetPtrReg+0xc>
 800744c:	20001f34 	.word	0x20001f34
 8007450:	20000d30 	.word	0x20000d30
 8007454:	2000071a 	.word	0x2000071a
 8007458:	200006b4 	.word	0x200006b4
 800745c:	20000718 	.word	0x20000718
 8007460:	200006ac 	.word	0x200006ac

08007464 <RCM_RegisterRegConv>:

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8007464:	4a6c      	ldr	r2, [pc, #432]	@ (8007618 <RCM_RegisterRegConv+0x1b4>)
 8007466:	6813      	ldr	r3, [r2, #0]
{
 8007468:	b530      	push	{r4, r5, lr}
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800746a:	2b00      	cmp	r3, #0
 800746c:	d036      	beq.n	80074dc <RCM_RegisterRegConv+0x78>
        /* Nothing to do */
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault */
      if (RCM_handle_array [i] != 0)
      {
        if ((RCM_handle_array [i]->channel == regConv->channel)
 800746e:	f890 c004 	ldrb.w	ip, [r0, #4]
 8007472:	7919      	ldrb	r1, [r3, #4]
 8007474:	458c      	cmp	ip, r1
 8007476:	d01e      	beq.n	80074b6 <RCM_RegisterRegConv+0x52>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8007478:	6854      	ldr	r4, [r2, #4]
 800747a:	2c00      	cmp	r4, #0
 800747c:	f000 80ab 	beq.w	80075d6 <RCM_RegisterRegConv+0x172>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8007480:	7921      	ldrb	r1, [r4, #4]
 8007482:	458c      	cmp	ip, r1
  uint8_t handle = 255U;
 8007484:	f04f 03ff 	mov.w	r3, #255	@ 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8007488:	d031      	beq.n	80074ee <RCM_RegisterRegConv+0x8a>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800748a:	6895      	ldr	r5, [r2, #8]
 800748c:	2d00      	cmp	r5, #0
 800748e:	f000 808f 	beq.w	80075b0 <RCM_RegisterRegConv+0x14c>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8007492:	7929      	ldrb	r1, [r5, #4]
 8007494:	4561      	cmp	r1, ip
 8007496:	d030      	beq.n	80074fa <RCM_RegisterRegConv+0x96>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8007498:	68d4      	ldr	r4, [r2, #12]
 800749a:	2c00      	cmp	r4, #0
 800749c:	f000 8096 	beq.w	80075cc <RCM_RegisterRegConv+0x168>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80074a0:	7921      	ldrb	r1, [r4, #4]
 80074a2:	4561      	cmp	r1, ip
 80074a4:	f000 80a3 	beq.w	80075ee <RCM_RegisterRegConv+0x18a>
      {
        /* Nothing to do */
      }
      i++;
    }
    if (handle < RCM_MAX_CONV)
 80074a8:	2b03      	cmp	r3, #3
 80074aa:	bf88      	it	hi
 80074ac:	23ff      	movhi	r3, #255	@ 0xff
 80074ae:	f240 80aa 	bls.w	8007606 <RCM_RegisterRegConv+0x1a2>
      /* Nothing to do handle is already set to error value : 255 */
    }
#ifdef NULL_PTR_CHECK_REG_CON_MNG
  }
#endif
  regConv->convHandle = handle;
 80074b2:	7303      	strb	r3, [r0, #12]
}
 80074b4:	bd30      	pop	{r4, r5, pc}
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 80074b6:	6801      	ldr	r1, [r0, #0]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4299      	cmp	r1, r3
 80074bc:	d023      	beq.n	8007506 <RCM_RegisterRegConv+0xa2>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80074be:	6854      	ldr	r4, [r2, #4]
 80074c0:	2c00      	cmp	r4, #0
 80074c2:	d1dd      	bne.n	8007480 <RCM_RegisterRegConv+0x1c>
 80074c4:	6895      	ldr	r5, [r2, #8]
      i++;
 80074c6:	2301      	movs	r3, #1
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80074c8:	2d00      	cmp	r5, #0
 80074ca:	d1e2      	bne.n	8007492 <RCM_RegisterRegConv+0x2e>
 80074cc:	68d4      	ldr	r4, [r2, #12]
 80074ce:	b1dc      	cbz	r4, 8007508 <RCM_RegisterRegConv+0xa4>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80074d0:	f894 c004 	ldrb.w	ip, [r4, #4]
 80074d4:	7905      	ldrb	r5, [r0, #4]
 80074d6:	45ac      	cmp	ip, r5
 80074d8:	d116      	bne.n	8007508 <RCM_RegisterRegConv+0xa4>
 80074da:	e089      	b.n	80075f0 <RCM_RegisterRegConv+0x18c>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80074dc:	6854      	ldr	r4, [r2, #4]
 80074de:	2c00      	cmp	r4, #0
 80074e0:	f000 808b 	beq.w	80075fa <RCM_RegisterRegConv+0x196>
 80074e4:	f890 c004 	ldrb.w	ip, [r0, #4]
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80074e8:	7921      	ldrb	r1, [r4, #4]
 80074ea:	458c      	cmp	ip, r1
 80074ec:	d1cd      	bne.n	800748a <RCM_RegisterRegConv+0x26>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 80074ee:	6824      	ldr	r4, [r4, #0]
 80074f0:	6801      	ldr	r1, [r0, #0]
 80074f2:	42a1      	cmp	r1, r4
 80074f4:	d1c9      	bne.n	800748a <RCM_RegisterRegConv+0x26>
      i++;
 80074f6:	2301      	movs	r3, #1
 80074f8:	e006      	b.n	8007508 <RCM_RegisterRegConv+0xa4>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 80074fa:	682c      	ldr	r4, [r5, #0]
 80074fc:	6801      	ldr	r1, [r0, #0]
 80074fe:	428c      	cmp	r4, r1
 8007500:	d1ca      	bne.n	8007498 <RCM_RegisterRegConv+0x34>
      i++;
 8007502:	2302      	movs	r3, #2
 8007504:	e000      	b.n	8007508 <RCM_RegisterRegConv+0xa4>
    uint8_t i = 0;
 8007506:	2300      	movs	r3, #0
      RCM_handle_array [handle] = regConv;
 8007508:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 800750c:	688a      	ldr	r2, [r1, #8]
      RCM_CB_array [handle].cb = NULL; /* If a previous callback was attached, it is cleared */
 800750e:	4c43      	ldr	r4, [pc, #268]	@ (800761c <RCM_RegisterRegConv+0x1b8>)
 8007510:	2500      	movs	r5, #0
      if (0U == LL_ADC_IsEnabled(regConv->regADC))
 8007512:	07d2      	lsls	r2, r2, #31
      RCM_CB_array [handle].cb = NULL; /* If a previous callback was attached, it is cleared */
 8007514:	f844 5033 	str.w	r5, [r4, r3, lsl #3]
      if (0U == LL_ADC_IsEnabled(regConv->regADC))
 8007518:	d411      	bmi.n	800753e <RCM_RegisterRegConv+0xda>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOCS(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 800751a:	684a      	ldr	r2, [r1, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 800751c:	f06f 0402 	mvn.w	r4, #2
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 8007520:	f022 0220 	bic.w	r2, r2, #32
 8007524:	604a      	str	r2, [r1, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 8007526:	600c      	str	r4, [r1, #0]
{
  /* Note: on this STM32 series, there is no flag ADC group injected          */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "JEOC" is corresponding to flag "JEOS"               */
  /*       in other STM32 families).                                          */
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8007528:	684a      	ldr	r2, [r1, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 800752a:	f06f 0404 	mvn.w	r4, #4
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 800752e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007532:	604a      	str	r2, [r1, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8007534:	600c      	str	r4, [r1, #0]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8007536:	688a      	ldr	r2, [r1, #8]
 8007538:	f042 0201 	orr.w	r2, r2, #1
 800753c:	608a      	str	r2, [r1, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 800753e:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8007540:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8007544:	62ca      	str	r2, [r1, #44]	@ 0x2c
      LL_ADC_SetChannelSamplingTime (regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 8007546:	7902      	ldrb	r2, [r0, #4]
 8007548:	2a09      	cmp	r2, #9
 800754a:	eb02 0442 	add.w	r4, r2, r2, lsl #1
 800754e:	d829      	bhi.n	80075a4 <RCM_RegisterRegConv+0x140>
 8007550:	ea42 5204 	orr.w	r2, r2, r4, lsl #20
 8007554:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8007558:	f04f 7400 	mov.w	r4, #33554432	@ 0x2000000
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800755c:	f04f 7c00 	mov.w	ip, #33554432	@ 0x2000000
 8007560:	fa9c fcac 	rbit	ip, ip
 8007564:	fabc fc8c 	clz	ip, ip
  MODIFY_REG(*preg,
 8007568:	6885      	ldr	r5, [r0, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 800756a:	fa24 f40c 	lsr.w	r4, r4, ip
 800756e:	310c      	adds	r1, #12
  MODIFY_REG(*preg,
 8007570:	f002 72f8 	and.w	r2, r2, #32505856	@ 0x1f00000
 8007574:	f04f 7cf8 	mov.w	ip, #32505856	@ 0x1f00000
 8007578:	fa9c fcac 	rbit	ip, ip
  return result;
 800757c:	fabc fc8c 	clz	ip, ip
 8007580:	fa22 f20c 	lsr.w	r2, r2, ip
 8007584:	fa05 fc02 	lsl.w	ip, r5, r2
 8007588:	f04f 0e07 	mov.w	lr, #7
 800758c:	f851 5024 	ldr.w	r5, [r1, r4, lsl #2]
 8007590:	fa0e f202 	lsl.w	r2, lr, r2
 8007594:	ea25 0202 	bic.w	r2, r5, r2
 8007598:	ea4c 0202 	orr.w	r2, ip, r2
 800759c:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
  regConv->convHandle = handle;
 80075a0:	7303      	strb	r3, [r0, #12]
}
 80075a2:	bd30      	pop	{r4, r5, pc}
      LL_ADC_SetChannelSamplingTime (regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 80075a4:	3c1e      	subs	r4, #30
 80075a6:	ea42 5204 	orr.w	r2, r2, r4, lsl #20
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 80075aa:	f002 7400 	and.w	r4, r2, #33554432	@ 0x2000000
 80075ae:	e7d5      	b.n	800755c <RCM_RegisterRegConv+0xf8>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80075b0:	2b04      	cmp	r3, #4
 80075b2:	d92a      	bls.n	800760a <RCM_RegisterRegConv+0x1a6>
 80075b4:	68d3      	ldr	r3, [r2, #12]
 80075b6:	b353      	cbz	r3, 800760e <RCM_RegisterRegConv+0x1aa>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80075b8:	7919      	ldrb	r1, [r3, #4]
 80075ba:	4561      	cmp	r1, ip
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 80075bc:	6801      	ldr	r1, [r0, #0]
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80075be:	d1a0      	bne.n	8007502 <RCM_RegisterRegConv+0x9e>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 80075c0:	681b      	ldr	r3, [r3, #0]
      i++;
 80075c2:	4299      	cmp	r1, r3
 80075c4:	bf0c      	ite	eq
 80075c6:	2303      	moveq	r3, #3
 80075c8:	2302      	movne	r3, #2
 80075ca:	e79d      	b.n	8007508 <RCM_RegisterRegConv+0xa4>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80075cc:	2b04      	cmp	r3, #4
 80075ce:	6801      	ldr	r1, [r0, #0]
 80075d0:	d99a      	bls.n	8007508 <RCM_RegisterRegConv+0xa4>
 80075d2:	2303      	movs	r3, #3
 80075d4:	e798      	b.n	8007508 <RCM_RegisterRegConv+0xa4>
 80075d6:	6895      	ldr	r5, [r2, #8]
      i++;
 80075d8:	2301      	movs	r3, #1
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80075da:	2d00      	cmp	r5, #0
 80075dc:	f47f af59 	bne.w	8007492 <RCM_RegisterRegConv+0x2e>
 80075e0:	68d4      	ldr	r4, [r2, #12]
 80075e2:	b184      	cbz	r4, 8007606 <RCM_RegisterRegConv+0x1a2>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80075e4:	7921      	ldrb	r1, [r4, #4]
 80075e6:	4561      	cmp	r1, ip
 80075e8:	6801      	ldr	r1, [r0, #0]
 80075ea:	d18d      	bne.n	8007508 <RCM_RegisterRegConv+0xa4>
 80075ec:	e000      	b.n	80075f0 <RCM_RegisterRegConv+0x18c>
 80075ee:	6801      	ldr	r1, [r0, #0]
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 80075f0:	6824      	ldr	r4, [r4, #0]
 80075f2:	428c      	cmp	r4, r1
 80075f4:	f47f af58 	bne.w	80074a8 <RCM_RegisterRegConv+0x44>
 80075f8:	e7eb      	b.n	80075d2 <RCM_RegisterRegConv+0x16e>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80075fa:	6895      	ldr	r5, [r2, #8]
 80075fc:	b14d      	cbz	r5, 8007612 <RCM_RegisterRegConv+0x1ae>
 80075fe:	f890 c004 	ldrb.w	ip, [r0, #4]
    uint8_t i = 0;
 8007602:	4623      	mov	r3, r4
 8007604:	e745      	b.n	8007492 <RCM_RegisterRegConv+0x2e>
 8007606:	6801      	ldr	r1, [r0, #0]
 8007608:	e77e      	b.n	8007508 <RCM_RegisterRegConv+0xa4>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800760a:	462b      	mov	r3, r5
 800760c:	e7e8      	b.n	80075e0 <RCM_RegisterRegConv+0x17c>
 800760e:	6801      	ldr	r1, [r0, #0]
 8007610:	e777      	b.n	8007502 <RCM_RegisterRegConv+0x9e>
 8007612:	6801      	ldr	r1, [r0, #0]
    uint8_t i = 0;
 8007614:	462b      	mov	r3, r5
 8007616:	e759      	b.n	80074cc <RCM_RegisterRegConv+0x68>
 8007618:	20001f60 	.word	0x20001f60
 800761c:	20001f40 	.word	0x20001f40

08007620 <RCM_ExecRegularConv>:
 */
uint16_t RCM_ExecRegularConv (RegConv_t *regConv)
{
  uint16_t retVal;
  uint8_t handle = regConv->convHandle;
  LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8007620:	4b1a      	ldr	r3, [pc, #104]	@ (800768c <RCM_ExecRegularConv+0x6c>)
 8007622:	7b02      	ldrb	r2, [r0, #12]
 8007624:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
                               LL_ADC_REG_RANK_1,
                               __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 8007628:	7913      	ldrb	r3, [r2, #4]
  LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 800762a:	6812      	ldr	r2, [r2, #0]
                               __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 800762c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8007630:	2b09      	cmp	r3, #9
                               __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 8007632:	bf93      	iteet	ls
 8007634:	ea43 5301 	orrls.w	r3, r3, r1, lsl #20
 8007638:	391e      	subhi	r1, #30
  LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 800763a:	ea43 5301 	orrhi.w	r3, r3, r1, lsl #20
 800763e:	f043 7300 	orrls.w	r3, r3, #33554432	@ 0x2000000
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007642:	f44f 7140 	mov.w	r1, #768	@ 0x300
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8007646:	f102 0c2c 	add.w	ip, r2, #44	@ 0x2c
 800764a:	fa91 f1a1 	rbit	r1, r1
  if (value == 0U)
 800764e:	b139      	cbz	r1, 8007660 <RCM_ExecRegularConv+0x40>
  return __builtin_clz(value);
 8007650:	fab1 f181 	clz	r1, r1
 8007654:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8007658:	fa20 f101 	lsr.w	r1, r0, r1
 800765c:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
  MODIFY_REG(*preg,
 8007660:	f8dc 0000 	ldr.w	r0, [ip]

  (void)LL_ADC_REG_ReadConversionData12(RCM_handle_array[handle]->regADC);

  /* Bit banding access equivalent to LL_ADC_REG_StartConversionSWStart */
  BB_REG_BIT_SET(&RCM_handle_array[handle]->regADC->CR2, ADC_CR2_SWSTART_Pos);
 8007664:	0151      	lsls	r1, r2, #5
 8007666:	f020 001f 	bic.w	r0, r0, #31
 800766a:	f003 031f 	and.w	r3, r3, #31
 800766e:	4303      	orrs	r3, r0
 8007670:	f101 4184 	add.w	r1, r1, #1107296256	@ 0x42000000
 8007674:	f8cc 3000 	str.w	r3, [ip]
 8007678:	2301      	movs	r3, #1
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 800767a:	6cd0      	ldr	r0, [r2, #76]	@ 0x4c
 800767c:	f8c1 3178 	str.w	r3, [r1, #376]	@ 0x178
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_EOCS) == (LL_ADC_FLAG_EOCS));
 8007680:	6813      	ldr	r3, [r2, #0]
  /* Wait until end of regular conversion */
  while (LL_ADC_IsActiveFlag_EOCS(RCM_handle_array[handle]->regADC) == 0u)
 8007682:	079b      	lsls	r3, r3, #30
 8007684:	d5fc      	bpl.n	8007680 <RCM_ExecRegularConv+0x60>
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8007686:	6cd0      	ldr	r0, [r2, #76]	@ 0x4c
  {
    /* Nothing to do */
  }
  retVal = LL_ADC_REG_ReadConversionData12(RCM_handle_array[handle]->regADC);
  return (retVal);
}
 8007688:	b280      	uxth	r0, r0
 800768a:	4770      	bx	lr
 800768c:	20001f60 	.word	0x20001f60

08007690 <RCM_ExecUserConv>:
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv()
{
  uint8_t handle;
  if (RCM_UserConvHandle != NULL)
 8007690:	4b11      	ldr	r3, [pc, #68]	@ (80076d8 <RCM_ExecUserConv+0x48>)
{
 8007692:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (RCM_UserConvHandle != NULL)
 8007696:	681c      	ldr	r4, [r3, #0]
 8007698:	b124      	cbz	r4, 80076a4 <RCM_ExecUserConv+0x14>
  {
    handle = RCM_UserConvHandle->convHandle;
    if (RCM_USERCONV_REQUESTED == RCM_UserConvState)
 800769a:	4d10      	ldr	r5, [pc, #64]	@ (80076dc <RCM_ExecUserConv+0x4c>)
    handle = RCM_UserConvHandle->convHandle;
 800769c:	7b26      	ldrb	r6, [r4, #12]
    if (RCM_USERCONV_REQUESTED == RCM_UserConvState)
 800769e:	782b      	ldrb	r3, [r5, #0]
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	d001      	beq.n	80076a8 <RCM_ExecUserConv+0x18>
  }
  else
  {
     /* Nothing to do */
  }
}
 80076a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 80076a8:	4620      	mov	r0, r4
 80076aa:	f7ff ffb9 	bl	8007620 <RCM_ExecRegularConv>
 80076ae:	4b0c      	ldr	r3, [pc, #48]	@ (80076e0 <RCM_ExecUserConv+0x50>)
 80076b0:	8018      	strh	r0, [r3, #0]
      RCM_UserConvState = RCM_USERCONV_EOC;
 80076b2:	2302      	movs	r3, #2
 80076b4:	702b      	strb	r3, [r5, #0]
      if (RCM_CB_array[handle].cb != NULL)
 80076b6:	4b0b      	ldr	r3, [pc, #44]	@ (80076e4 <RCM_ExecUserConv+0x54>)
 80076b8:	f853 7036 	ldr.w	r7, [r3, r6, lsl #3]
      RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 80076bc:	4601      	mov	r1, r0
      if (RCM_CB_array[handle].cb != NULL)
 80076be:	2f00      	cmp	r7, #0
 80076c0:	d0f0      	beq.n	80076a4 <RCM_ExecUserConv+0x14>
        RCM_CB_array[handle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 80076c2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80076c6:	4620      	mov	r0, r4
 80076c8:	685a      	ldr	r2, [r3, #4]
        RCM_UserConvState = RCM_USERCONV_IDLE;
 80076ca:	2300      	movs	r3, #0
 80076cc:	702b      	strb	r3, [r5, #0]
        RCM_CB_array[handle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 80076ce:	463b      	mov	r3, r7
}
 80076d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        RCM_CB_array[handle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 80076d4:	4718      	bx	r3
 80076d6:	bf00      	nop
 80076d8:	20001f38 	.word	0x20001f38
 80076dc:	20001f3c 	.word	0x20001f3c
 80076e0:	20001f3e 	.word	0x20001f3e
 80076e4:	20001f40 	.word	0x20001f40

080076e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80076e8:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80076ea:	4b0d      	ldr	r3, [pc, #52]	@ (8007720 <HAL_MspInit+0x38>)
 80076ec:	2100      	movs	r1, #0
 80076ee:	9100      	str	r1, [sp, #0]
 80076f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80076f2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80076f6:	645a      	str	r2, [r3, #68]	@ 0x44
 80076f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80076fa:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80076fe:	9200      	str	r2, [sp, #0]
 8007700:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007702:	9101      	str	r1, [sp, #4]
 8007704:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007706:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800770a:	641a      	str	r2, [r3, #64]	@ 0x40
 800770c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800770e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007712:	9301      	str	r3, [sp, #4]
 8007714:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8007716:	2004      	movs	r0, #4
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007718:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 800771a:	f000 bd5f 	b.w	80081dc <HAL_NVIC_SetPriorityGrouping>
 800771e:	bf00      	nop
 8007720:	40023800 	.word	0x40023800

08007724 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8007724:	b5d0      	push	{r4, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8007726:	4b1f      	ldr	r3, [pc, #124]	@ (80077a4 <HAL_ADC_MspInit+0x80>)
 8007728:	6802      	ldr	r2, [r0, #0]
{
 800772a:	b08a      	sub	sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800772c:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 800772e:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007730:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8007734:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8007738:	9408      	str	r4, [sp, #32]
  if(hadc->Instance==ADC1)
 800773a:	d001      	beq.n	8007740 <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800773c:	b00a      	add	sp, #40	@ 0x28
 800773e:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8007740:	f503 338c 	add.w	r3, r3, #71680	@ 0x11800
 8007744:	9401      	str	r4, [sp, #4]
 8007746:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007748:	4817      	ldr	r0, [pc, #92]	@ (80077a8 <HAL_ADC_MspInit+0x84>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 800774a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800774e:	645a      	str	r2, [r3, #68]	@ 0x44
 8007750:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007752:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8007756:	9201      	str	r2, [sp, #4]
 8007758:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800775a:	9402      	str	r4, [sp, #8]
 800775c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800775e:	f042 0204 	orr.w	r2, r2, #4
 8007762:	631a      	str	r2, [r3, #48]	@ 0x30
 8007764:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007766:	f002 0204 	and.w	r2, r2, #4
 800776a:	9202      	str	r2, [sp, #8]
 800776c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800776e:	9403      	str	r4, [sp, #12]
 8007770:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007772:	f042 0201 	orr.w	r2, r2, #1
 8007776:	631a      	str	r2, [r3, #48]	@ 0x30
 8007778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800777a:	f003 0301 	and.w	r3, r3, #1
 800777e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin|M1_CURR_AMPL_V_Pin;
 8007780:	2603      	movs	r6, #3
 8007782:	2703      	movs	r7, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007784:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007786:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin|M1_CURR_AMPL_V_Pin;
 8007788:	e9cd 6704 	strd	r6, r7, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800778c:	f000 fe38 	bl	8008400 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007790:	4806      	ldr	r0, [pc, #24]	@ (80077ac <HAL_ADC_MspInit+0x88>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007792:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007794:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin|M1_BUS_VOLTAGE_Pin;
 8007796:	e9cd 6704 	strd	r6, r7, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800779a:	f000 fe31 	bl	8008400 <HAL_GPIO_Init>
}
 800779e:	b00a      	add	sp, #40	@ 0x28
 80077a0:	bdd0      	pop	{r4, r6, r7, pc}
 80077a2:	bf00      	nop
 80077a4:	40012000 	.word	0x40012000
 80077a8:	40020800 	.word	0x40020800
 80077ac:	40020000 	.word	0x40020000

080077b0 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 80077b0:	4b0a      	ldr	r3, [pc, #40]	@ (80077dc <HAL_TIM_Base_MspInit+0x2c>)
 80077b2:	6802      	ldr	r2, [r0, #0]
 80077b4:	429a      	cmp	r2, r3
 80077b6:	d000      	beq.n	80077ba <HAL_TIM_Base_MspInit+0xa>
 80077b8:	4770      	bx	lr
{
 80077ba:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80077bc:	f503 339c 	add.w	r3, r3, #79872	@ 0x13800
 80077c0:	2200      	movs	r2, #0
 80077c2:	9201      	str	r2, [sp, #4]
 80077c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80077c6:	f042 0201 	orr.w	r2, r2, #1
 80077ca:	645a      	str	r2, [r3, #68]	@ 0x44
 80077cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077ce:	f003 0301 	and.w	r3, r3, #1
 80077d2:	9301      	str	r3, [sp, #4]
 80077d4:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80077d6:	b002      	add	sp, #8
 80077d8:	4770      	bx	lr
 80077da:	bf00      	nop
 80077dc:	40010000 	.word	0x40010000

080077e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80077e0:	b5d0      	push	{r4, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 80077e2:	4a1f      	ldr	r2, [pc, #124]	@ (8007860 <HAL_TIM_MspPostInit+0x80>)
 80077e4:	6801      	ldr	r1, [r0, #0]
{
 80077e6:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80077e8:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 80077ea:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80077ec:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80077f0:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80077f4:	9306      	str	r3, [sp, #24]
  if(htim->Instance==TIM1)
 80077f6:	d001      	beq.n	80077fc <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80077f8:	b008      	add	sp, #32
 80077fa:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80077fc:	f502 329c 	add.w	r2, r2, #79872	@ 0x13800
 8007800:	9300      	str	r3, [sp, #0]
 8007802:	6b11      	ldr	r1, [r2, #48]	@ 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007804:	4817      	ldr	r0, [pc, #92]	@ (8007864 <HAL_TIM_MspPostInit+0x84>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007806:	f041 0102 	orr.w	r1, r1, #2
 800780a:	6311      	str	r1, [r2, #48]	@ 0x30
 800780c:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800780e:	f001 0102 	and.w	r1, r1, #2
 8007812:	9100      	str	r1, [sp, #0]
 8007814:	9900      	ldr	r1, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007816:	9301      	str	r3, [sp, #4]
 8007818:	6b13      	ldr	r3, [r2, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800781a:	2401      	movs	r4, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800781c:	4323      	orrs	r3, r4
 800781e:	6313      	str	r3, [r2, #48]	@ 0x30
 8007820:	6b13      	ldr	r3, [r2, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8007822:	9406      	str	r4, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007824:	4023      	ands	r3, r4
 8007826:	9301      	str	r3, [sp, #4]
 8007828:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800782a:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 800782c:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 8007830:	2302      	movs	r3, #2
 8007832:	2602      	movs	r6, #2
 8007834:	2702      	movs	r7, #2
 8007836:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800783a:	e9cd 6704 	strd	r6, r7, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800783e:	f000 fddf 	bl	8008400 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8007842:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8007846:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007848:	4807      	ldr	r0, [pc, #28]	@ (8007868 <HAL_TIM_MspPostInit+0x88>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800784a:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800784c:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 800784e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007852:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007856:	f000 fdd3 	bl	8008400 <HAL_GPIO_Init>
}
 800785a:	b008      	add	sp, #32
 800785c:	bdd0      	pop	{r4, r6, r7, pc}
 800785e:	bf00      	nop
 8007860:	40010000 	.word	0x40010000
 8007864:	40020400 	.word	0x40020400
 8007868:	40020000 	.word	0x40020000

0800786c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800786c:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART2)
 800786e:	4b32      	ldr	r3, [pc, #200]	@ (8007938 <HAL_UART_MspInit+0xcc>)
 8007870:	6802      	ldr	r2, [r0, #0]
{
 8007872:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007874:	2400      	movs	r4, #0
  if(huart->Instance==USART2)
 8007876:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007878:	e9cd 4402 	strd	r4, r4, [sp, #8]
 800787c:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8007880:	9406      	str	r4, [sp, #24]
  if(huart->Instance==USART2)
 8007882:	d001      	beq.n	8007888 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8007884:	b008      	add	sp, #32
 8007886:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8007888:	f503 33fa 	add.w	r3, r3, #128000	@ 0x1f400
 800788c:	9400      	str	r4, [sp, #0]
 800788e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8007890:	4e2a      	ldr	r6, [pc, #168]	@ (800793c <HAL_UART_MspInit+0xd0>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8007892:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8007896:	641a      	str	r2, [r3, #64]	@ 0x40
 8007898:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800789a:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 800789e:	9200      	str	r2, [sp, #0]
 80078a0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80078a2:	9401      	str	r4, [sp, #4]
 80078a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80078a6:	f042 0201 	orr.w	r2, r2, #1
 80078aa:	631a      	str	r2, [r3, #48]	@ 0x30
 80078ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078ae:	f003 0301 	and.w	r3, r3, #1
 80078b2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 80078b4:	220c      	movs	r2, #12
 80078b6:	2302      	movs	r3, #2
 80078b8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80078bc:	4605      	mov	r5, r0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80078be:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80078c0:	481f      	ldr	r0, [pc, #124]	@ (8007940 <HAL_UART_MspInit+0xd4>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80078c2:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80078c4:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80078c6:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80078c8:	f000 fd9a 	bl	8008400 <HAL_GPIO_Init>
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80078cc:	4a1d      	ldr	r2, [pc, #116]	@ (8007944 <HAL_UART_MspInit+0xd8>)
 80078ce:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80078d2:	e9c6 2300 	strd	r2, r3, [r6]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80078d6:	4630      	mov	r0, r6
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80078d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80078dc:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80078e0:	e9c6 3404 	strd	r3, r4, [r6, #16]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80078e4:	e9c6 4406 	strd	r4, r4, [r6, #24]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80078e8:	e9c6 4408 	strd	r4, r4, [r6, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80078ec:	f000 fcf2 	bl	80082d4 <HAL_DMA_Init>
 80078f0:	b9d8      	cbnz	r0, 800792a <HAL_UART_MspInit+0xbe>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80078f2:	4c15      	ldr	r4, [pc, #84]	@ (8007948 <HAL_UART_MspInit+0xdc>)
 80078f4:	4915      	ldr	r1, [pc, #84]	@ (800794c <HAL_UART_MspInit+0xe0>)
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80078f6:	63ee      	str	r6, [r5, #60]	@ 0x3c
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80078f8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80078fc:	2300      	movs	r3, #0
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80078fe:	e9c4 1200 	strd	r1, r2, [r4]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8007902:	4620      	mov	r0, r4
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007904:	2140      	movs	r1, #64	@ 0x40
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007906:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800790a:	e9c4 1302 	strd	r1, r3, [r4, #8]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800790e:	e9c4 3305 	strd	r3, r3, [r4, #20]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007912:	e9c4 3307 	strd	r3, r3, [r4, #28]
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8007916:	63b5      	str	r5, [r6, #56]	@ 0x38
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007918:	6122      	str	r2, [r4, #16]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800791a:	6263      	str	r3, [r4, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800791c:	f000 fcda 	bl	80082d4 <HAL_DMA_Init>
 8007920:	b930      	cbnz	r0, 8007930 <HAL_UART_MspInit+0xc4>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8007922:	63ac      	str	r4, [r5, #56]	@ 0x38
 8007924:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 8007926:	b008      	add	sp, #32
 8007928:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 800792a:	f7fc ffb3 	bl	8004894 <Error_Handler>
 800792e:	e7e0      	b.n	80078f2 <HAL_UART_MspInit+0x86>
      Error_Handler();
 8007930:	f7fc ffb0 	bl	8004894 <Error_Handler>
 8007934:	e7f5      	b.n	8007922 <HAL_UART_MspInit+0xb6>
 8007936:	bf00      	nop
 8007938:	40004400 	.word	0x40004400
 800793c:	20000bf8 	.word	0x20000bf8
 8007940:	40020000 	.word	0x40020000
 8007944:	40026088 	.word	0x40026088
 8007948:	20000b98 	.word	0x20000b98
 800794c:	400260a0 	.word	0x400260a0

08007950 <ADC_IRQHandler>:
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_JEOS) == (LL_ADC_FLAG_JEOS));
 8007950:	4b05      	ldr	r3, [pc, #20]	@ (8007968 <ADC_IRQHandler+0x18>)
 8007952:	681a      	ldr	r2, [r3, #0]
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  if(LL_ADC_IsActiveFlag_JEOS(ADC1))
 8007954:	0752      	lsls	r2, r2, #29
 8007956:	d400      	bmi.n	800795a <ADC_IRQHandler+0xa>
    TSK_HighFrequencyTask();          /*GUI, this section is present only if DAC is disabled*/
  }
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8007958:	4770      	bx	lr
    ADC1->SR &= ~(uint32_t)(LL_ADC_FLAG_JEOS | LL_ADC_FLAG_JSTRT);
 800795a:	681a      	ldr	r2, [r3, #0]
 800795c:	f022 020c 	bic.w	r2, r2, #12
 8007960:	601a      	str	r2, [r3, #0]
    TSK_HighFrequencyTask();          /*GUI, this section is present only if DAC is disabled*/
 8007962:	f7fd be03 	b.w	800556c <TSK_HighFrequencyTask>
 8007966:	bf00      	nop
 8007968:	40012000 	.word	0x40012000

0800796c <TIM1_UP_TIM10_IRQHandler>:
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800796c:	4b03      	ldr	r3, [pc, #12]	@ (800797c <TIM1_UP_TIM10_IRQHandler+0x10>)
  /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

  /* USER CODE END TIMx_UP_M1_IRQn 0 */

  LL_TIM_ClearFlag_UPDATE(TIM1);
  R3_1_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 800796e:	4804      	ldr	r0, [pc, #16]	@ (8007980 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8007970:	f06f 0201 	mvn.w	r2, #1
 8007974:	611a      	str	r2, [r3, #16]
 8007976:	f002 bbc1 	b.w	800a0fc <R3_1_TIMx_UP_IRQHandler>
 800797a:	bf00      	nop
 800797c:	40010000 	.word	0x40010000
 8007980:	20000808 	.word	0x20000808

08007984 <TIM1_BRK_TIM9_IRQHandler>:
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK(const TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 8007984:	4907      	ldr	r1, [pc, #28]	@ (80079a4 <TIM1_BRK_TIM9_IRQHandler+0x20>)
/**
  * @brief  This function handles first motor BRK interrupt.
  * @param  None
  */
void TIMx_BRK_M1_IRQHandler(void)
{
 8007986:	b508      	push	{r3, lr}
 8007988:	690b      	ldr	r3, [r1, #16]
 800798a:	061b      	lsls	r3, r3, #24
 800798c:	d505      	bpl.n	800799a <TIM1_BRK_TIM9_IRQHandler+0x16>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 800798e:	f06f 0380 	mvn.w	r3, #128	@ 0x80

  /* USER CODE END TIMx_BRK_M1_IRQn 0 */
  if (LL_TIM_IsActiveFlag_BRK(TIM1))
  {
    LL_TIM_ClearFlag_BRK(TIM1);
    PWMC_OVP_Handler(&PWM_Handle_M1._Super, TIM1);
 8007992:	4805      	ldr	r0, [pc, #20]	@ (80079a8 <TIM1_BRK_TIM9_IRQHandler+0x24>)
 8007994:	610b      	str	r3, [r1, #16]
 8007996:	f7fe fa33 	bl	8005e00 <PWMC_OVP_Handler>
  MC_Scheduler();

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 800799a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_Scheduler();
 800799e:	f7fd bd9f 	b.w	80054e0 <MC_Scheduler>
 80079a2:	bf00      	nop
 80079a4:	40010000 	.word	0x40010000
 80079a8:	20000808 	.word	0x20000808

080079ac <DMA1_Stream5_IRQHandler>:
    retVal = 0;
  }
  else
  {
    register __IO uint32_t *preg = __DMA_PTR_REG_OFFSET(DMAx->LISR,(Stream<=3)?0:1);
    retVal = ((READ_BIT(*preg, 1 << __LL_DMA_IT_TC_BIT(Stream)) == (1 << __LL_DMA_IT_TC_BIT(Stream))) ? 1UL : 0UL);
 80079ac:	4b05      	ldr	r3, [pc, #20]	@ (80079c4 <DMA1_Stream5_IRQHandler+0x18>)
 80079ae:	685a      	ldr	r2, [r3, #4]
 80079b0:	0512      	lsls	r2, r2, #20
 80079b2:	d400      	bmi.n	80079b6 <DMA1_Stream5_IRQHandler+0xa>
  }
  /* USER CODE BEGIN DMA1_Stream5_IRQHandler 1 */

  /* USER CODE BEGIN DMA1_Stream5_IRQHandler 1 */

}
 80079b4:	4770      	bx	lr
    WRITE_REG (*preg, 1 << __LL_DMA_IT_TC_BIT(Stream));
 80079b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
    ASPEP_HWDataReceivedIT (&aspepOverUartA);
 80079ba:	4803      	ldr	r0, [pc, #12]	@ (80079c8 <DMA1_Stream5_IRQHandler+0x1c>)
 80079bc:	60da      	str	r2, [r3, #12]
 80079be:	f7fc bd19 	b.w	80043f4 <ASPEP_HWDataReceivedIT>
 80079c2:	bf00      	nop
 80079c4:	40026000 	.word	0x40026000
 80079c8:	20000ad4 	.word	0x20000ad4

080079cc <USART2_IRQHandler>:
/**
  * @brief  This function handles USART interrupt request.
  * @param  None
  */
void USART2_IRQHandler(void)
{
 80079cc:	b510      	push	{r4, lr}
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 80079ce:	4b51      	ldr	r3, [pc, #324]	@ (8007b14 <USART2_IRQHandler+0x148>)
 80079d0:	681a      	ldr	r2, [r3, #0]
  /* USER CODE BEGIN USART2_IRQHandler 0 */

  /* USER CODE END UUSART2_IRQHandler 0 */

  if ( LL_USART_IsActiveFlag_TC (USARTA) )
 80079d2:	0651      	lsls	r1, r2, #25
{
 80079d4:	b084      	sub	sp, #16
  if ( LL_USART_IsActiveFlag_TC (USARTA) )
 80079d6:	f100 808e 	bmi.w	8007af6 <USART2_IRQHandler+0x12a>
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 80079da:	4b4e      	ldr	r3, [pc, #312]	@ (8007b14 <USART2_IRQHandler+0x148>)
 80079dc:	681a      	ldr	r2, [r3, #0]
    LL_USART_ClearFlag_TC (USARTA);
    /* Data Sent by UART*/
    /* Need to free the buffer, and to check pending transfer*/
    ASPEP_HWDataTransmittedIT (&aspepOverUartA);
  }
  if ( (LL_USART_IsActiveFlag_ORE (USARTA) || LL_USART_IsActiveFlag_FE (USARTA) || LL_USART_IsActiveFlag_NE (USARTA))
 80079de:	0712      	lsls	r2, r2, #28
 80079e0:	d402      	bmi.n	80079e8 <USART2_IRQHandler+0x1c>
  return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
 80079e2:	681a      	ldr	r2, [r3, #0]
 80079e4:	0794      	lsls	r4, r2, #30
 80079e6:	d57e      	bpl.n	8007ae6 <USART2_IRQHandler+0x11a>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_ERROR(const USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE));
 80079e8:	4b4a      	ldr	r3, [pc, #296]	@ (8007b14 <USART2_IRQHandler+0x148>)
 80079ea:	695a      	ldr	r2, [r3, #20]
        && LL_USART_IsEnabledIT_ERROR (USARTA) )
 80079ec:	07d1      	lsls	r1, r2, #31
 80079ee:	d52d      	bpl.n	8007a4c <USART2_IRQHandler+0x80>
  tmpreg = USARTx->SR;
 80079f0:	681a      	ldr	r2, [r3, #0]
 80079f2:	9203      	str	r2, [sp, #12]
  (void) tmpreg;
 80079f4:	9a03      	ldr	r2, [sp, #12]
  tmpreg = USARTx->DR;
 80079f6:	685a      	ldr	r2, [r3, #4]
 80079f8:	9203      	str	r2, [sp, #12]
  (void) tmpreg;
 80079fa:	9a03      	ldr	r2, [sp, #12]
  tmpreg = USARTx->SR;
 80079fc:	681a      	ldr	r2, [r3, #0]
 80079fe:	9202      	str	r2, [sp, #8]
  (void) tmpreg;
 8007a00:	9a02      	ldr	r2, [sp, #8]
  tmpreg = USARTx->DR;
 8007a02:	685a      	ldr	r2, [r3, #4]
 8007a04:	9202      	str	r2, [sp, #8]
  (void) tmpreg;
 8007a06:	9a02      	ldr	r2, [sp, #8]
  tmpreg = USARTx->SR;
 8007a08:	681a      	ldr	r2, [r3, #0]
 8007a0a:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 8007a0c:	9a01      	ldr	r2, [sp, #4]
  tmpreg = USARTx->DR;
 8007a0e:	685b      	ldr	r3, [r3, #4]
 8007a10:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8007a12:	9b01      	ldr	r3, [sp, #4]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a14:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8007a18:	f202 4314 	addw	r3, r2, #1044	@ 0x414
 8007a1c:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
 8007a20:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a24:	f202 4014 	addw	r0, r2, #1044	@ 0x414
 8007a28:	e840 3100 	strex	r1, r3, [r0]
 8007a2c:	2900      	cmp	r1, #0
 8007a2e:	d1f3      	bne.n	8007a18 <USART2_IRQHandler+0x4c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a30:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8007a34:	f202 430c 	addw	r3, r2, #1036	@ 0x40c
 8007a38:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8007a3c:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a40:	f202 400c 	addw	r0, r2, #1036	@ 0x40c
 8007a44:	e840 3100 	strex	r1, r3, [r0]
 8007a48:	2900      	cmp	r1, #0
 8007a4a:	d1f3      	bne.n	8007a34 <USART2_IRQHandler+0x68>
  return (READ_BIT(USARTx->SR, USART_SR_IDLE) == (USART_SR_IDLE));
 8007a4c:	4b31      	ldr	r3, [pc, #196]	@ (8007b14 <USART2_IRQHandler+0x148>)
 8007a4e:	681a      	ldr	r2, [r3, #0]
    LL_USART_ClearFlag_NE(USARTA);
    /* We disable ERROR interrupt to avoid to trig one Overrun IT per additional byte recevied*/
    LL_USART_DisableIT_ERROR (USARTA);
    LL_USART_EnableIT_IDLE (USARTA);
  }
  if ( LL_USART_IsActiveFlag_IDLE (USARTA) && LL_USART_IsEnabledIT_IDLE (USARTA) )
 8007a50:	06d2      	lsls	r2, r2, #27
 8007a52:	d546      	bpl.n	8007ae2 <USART2_IRQHandler+0x116>
  return (READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE));
 8007a54:	68db      	ldr	r3, [r3, #12]
 8007a56:	06db      	lsls	r3, r3, #27
 8007a58:	d543      	bpl.n	8007ae2 <USART2_IRQHandler+0x116>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a5a:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8007a5e:	f202 430c 	addw	r3, r2, #1036	@ 0x40c
 8007a62:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8007a66:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a6a:	f202 400c 	addw	r0, r2, #1036	@ 0x40c
 8007a6e:	e840 3100 	strex	r1, r3, [r0]
 8007a72:	2900      	cmp	r1, #0
 8007a74:	d1f3      	bne.n	8007a5e <USART2_IRQHandler+0x92>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a76:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8007a7a:	f202 4314 	addw	r3, r2, #1044	@ 0x414
 8007a7e:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8007a82:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a86:	f202 4014 	addw	r0, r2, #1044	@ 0x414
 8007a8a:	e840 3100 	strex	r1, r3, [r0]
 8007a8e:	2900      	cmp	r1, #0
 8007a90:	d1f3      	bne.n	8007a7a <USART2_IRQHandler+0xae>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a92:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8007a96:	f202 4314 	addw	r3, r2, #1044	@ 0x414
 8007a9a:	e853 3f00 	ldrex	r3, [r3]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableDMAReq_RX(USART_TypeDef *USARTx)
{
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_DMAR);
 8007a9e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa2:	f202 4014 	addw	r0, r2, #1044	@ 0x414
 8007aa6:	e840 3100 	strex	r1, r3, [r0]
 8007aaa:	2900      	cmp	r1, #0
 8007aac:	d1f3      	bne.n	8007a96 <USART2_IRQHandler+0xca>
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8007aae:	4b19      	ldr	r3, [pc, #100]	@ (8007b14 <USART2_IRQHandler+0x148>)
 8007ab0:	685b      	ldr	r3, [r3, #4]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ab2:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8007ab6:	f202 4314 	addw	r3, r2, #1044	@ 0x414
 8007aba:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8007abe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ac2:	f202 4014 	addw	r0, r2, #1044	@ 0x414
 8007ac6:	e840 3100 	strex	r1, r3, [r0]
 8007aca:	2900      	cmp	r1, #0
 8007acc:	d1f3      	bne.n	8007ab6 <USART2_IRQHandler+0xea>
    WRITE_REG (*preg, 1 << __LL_DMA_IT_TE_BIT(Stream));
 8007ace:	4b12      	ldr	r3, [pc, #72]	@ (8007b18 <USART2_IRQHandler+0x14c>)
    /* We disable the DMA request, Read the dummy data, endable back the DMA request */
    LL_USART_DisableDMAReq_RX (USARTA);
    LL_USART_ReceiveData8(USARTA);
    LL_USART_EnableDMAReq_RX (USARTA);
    LL_DMA_ClearFlag_TE (DMA_RX_A, DMACH_RX_A );
    ASPEP_HWDMAReset (&aspepOverUartA);
 8007ad0:	4812      	ldr	r0, [pc, #72]	@ (8007b1c <USART2_IRQHandler+0x150>)
 8007ad2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007ad6:	60da      	str	r2, [r3, #12]
  }

  /* USER CODE BEGIN USART2_IRQHandler 1 */

  /* USER CODE END USART2_IRQHandler 1 */
}
 8007ad8:	b004      	add	sp, #16
 8007ada:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ASPEP_HWDMAReset (&aspepOverUartA);
 8007ade:	f7fc bcd7 	b.w	8004490 <ASPEP_HWDMAReset>
}
 8007ae2:	b004      	add	sp, #16
 8007ae4:	bd10      	pop	{r4, pc}
  return (READ_BIT(USARTx->SR, USART_SR_NE) == (USART_SR_NE));
 8007ae6:	681b      	ldr	r3, [r3, #0]
  if ( (LL_USART_IsActiveFlag_ORE (USARTA) || LL_USART_IsActiveFlag_FE (USARTA) || LL_USART_IsActiveFlag_NE (USARTA))
 8007ae8:	0758      	lsls	r0, r3, #29
 8007aea:	d5af      	bpl.n	8007a4c <USART2_IRQHandler+0x80>
  return (READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE));
 8007aec:	4b09      	ldr	r3, [pc, #36]	@ (8007b14 <USART2_IRQHandler+0x148>)
 8007aee:	695a      	ldr	r2, [r3, #20]
        && LL_USART_IsEnabledIT_ERROR (USARTA) )
 8007af0:	07d1      	lsls	r1, r2, #31
 8007af2:	d5ab      	bpl.n	8007a4c <USART2_IRQHandler+0x80>
 8007af4:	e77c      	b.n	80079f0 <USART2_IRQHandler+0x24>
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8007af6:	4908      	ldr	r1, [pc, #32]	@ (8007b18 <USART2_IRQHandler+0x14c>)
    ASPEP_HWDataTransmittedIT (&aspepOverUartA);
 8007af8:	4808      	ldr	r0, [pc, #32]	@ (8007b1c <USART2_IRQHandler+0x150>)
 8007afa:	f8d1 20a0 	ldr.w	r2, [r1, #160]	@ 0xa0
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 8007afe:	f06f 0440 	mvn.w	r4, #64	@ 0x40
 8007b02:	f022 0201 	bic.w	r2, r2, #1
 8007b06:	f8c1 20a0 	str.w	r2, [r1, #160]	@ 0xa0
 8007b0a:	601c      	str	r4, [r3, #0]
 8007b0c:	f7fc fac6 	bl	800409c <ASPEP_HWDataTransmittedIT>
 8007b10:	e763      	b.n	80079da <USART2_IRQHandler+0xe>
 8007b12:	bf00      	nop
 8007b14:	40004400 	.word	0x40004400
 8007b18:	40026000 	.word	0x40026000
 8007b1c:	20000ad4 	.word	0x20000ad4

08007b20 <HardFault_Handler>:
/**
  * @brief  This function handles Hard Fault exception.
  * @param  None
  */
void HardFault_Handler(void)
{
 8007b20:	b508      	push	{r3, lr}
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 8007b22:	f7fd fdbd 	bl	80056a0 <TSK_HardwareFaultTask>

  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8007b26:	e7fe      	b.n	8007b26 <HardFault_Handler+0x6>

08007b28 <SysTick_Handler>:
 /* USER CODE END HardFault_IRQn 1 */

}

void SysTick_Handler(void)
{
 8007b28:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 8007b2a:	4c0a      	ldr	r4, [pc, #40]	@ (8007b54 <SysTick_Handler+0x2c>)
 8007b2c:	7823      	ldrb	r3, [r4, #0]
 8007b2e:	2b02      	cmp	r3, #2
 8007b30:	d006      	beq.n	8007b40 <SysTick_Handler+0x18>
  {
    HAL_IncTick();
    HAL_SYSTICK_IRQHandler();
    SystickDividerCounter = 0;
  }
  SystickDividerCounter ++;
 8007b32:	3301      	adds	r3, #1
 8007b34:	b2db      	uxtb	r3, r3
 8007b36:	7023      	strb	r3, [r4, #0]
  /* USER CODE END SysTick_IRQn 1 */
    MC_RunMotorControlTasks();

  /* USER CODE BEGIN SysTick_IRQn 2 */
  /* USER CODE END SysTick_IRQn 2 */
}
 8007b38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 8007b3c:	f7fd bda4 	b.w	8005688 <MC_RunMotorControlTasks>
    HAL_IncTick();
 8007b40:	f000 f904 	bl	8007d4c <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 8007b44:	f000 fbc2 	bl	80082cc <HAL_SYSTICK_IRQHandler>
 8007b48:	2301      	movs	r3, #1
  SystickDividerCounter ++;
 8007b4a:	7023      	strb	r3, [r4, #0]
}
 8007b4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 8007b50:	f7fd bd9a 	b.w	8005688 <MC_RunMotorControlTasks>
 8007b54:	20000b5c 	.word	0x20000b5c

08007b58 <UASPEP_INIT>:
  }
  else
  {
#endif
    /* Enable DMA UART */
    LL_USART_ClearFlag_TC(pHandle->USARTx);
 8007b58:	6802      	ldr	r2, [r0, #0]
 8007b5a:	4611      	mov	r1, r2
 8007b5c:	f06f 0340 	mvn.w	r3, #64	@ 0x40
{
 8007b60:	b470      	push	{r4, r5, r6}
 8007b62:	f841 3b0c 	str.w	r3, [r1], #12
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b66:	e851 3f00 	ldrex	r3, [r1]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 8007b6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b6e:	e841 3400 	strex	r4, r3, [r1]
 8007b72:	2c00      	cmp	r4, #0
 8007b74:	d1f7      	bne.n	8007b66 <UASPEP_INIT+0xe>
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8007b76:	f102 0114 	add.w	r1, r2, #20
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b7a:	e851 3f00 	ldrex	r3, [r1]
 8007b7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b82:	e841 3400 	strex	r4, r3, [r1]
 8007b86:	2c00      	cmp	r4, #0
 8007b88:	d1f7      	bne.n	8007b7a <UASPEP_INIT+0x22>
  * @param  PeriphAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t PeriphAddress)
{
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 8007b8a:	6901      	ldr	r1, [r0, #16]
 8007b8c:	4e16      	ldr	r6, [pc, #88]	@ (8007be8 <UASPEP_INIT+0x90>)
 8007b8e:	6883      	ldr	r3, [r0, #8]
 8007b90:	5c74      	ldrb	r4, [r6, r1]
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 8007b92:	6845      	ldr	r5, [r0, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 8007b94:	4423      	add	r3, r4
    LL_USART_EnableDMAReq_TX(pHandle->USARTx);

    /* Write the USART_TDR register address in the DMA control register to configure it as
     * the destination of the transfer */
    //cstat !MISRAC2012-Rule-11.4
    LL_DMA_SetPeriphAddress(pHandle->txDMA, pHandle->txChannel, (uint32_t)&pHandle->USARTx->DR);
 8007b96:	1d11      	adds	r1, r2, #4
 8007b98:	6099      	str	r1, [r3, #8]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 8007b9a:	68c3      	ldr	r3, [r0, #12]
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 8007b9c:	4611      	mov	r1, r2
 8007b9e:	f06f 0440 	mvn.w	r4, #64	@ 0x40
 8007ba2:	f841 4b14 	str.w	r4, [r1], #20
 8007ba6:	5cf4      	ldrb	r4, [r6, r3]
 8007ba8:	592b      	ldr	r3, [r5, r4]
 8007baa:	f043 0310 	orr.w	r3, r3, #16
 8007bae:	512b      	str	r3, [r5, r4]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bb0:	e851 3f00 	ldrex	r3, [r1]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8007bb4:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bb8:	e841 3400 	strex	r4, r3, [r1]
 8007bbc:	2c00      	cmp	r4, #0
 8007bbe:	d1f7      	bne.n	8007bb0 <UASPEP_INIT+0x58>
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 8007bc0:	68c3      	ldr	r3, [r0, #12]
 8007bc2:	5cf3      	ldrb	r3, [r6, r3]
 8007bc4:	441d      	add	r5, r3
    LL_USART_EnableIT_ERROR(pHandle->USARTx);

    /* Write the USART_RDR register address in the DMA control register to configure it as
     * the source of the transfer */
    //cstat !MISRAC2012-Rule-11.4
    LL_DMA_SetPeriphAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)&pHandle->USARTx->DR);
 8007bc6:	1d11      	adds	r1, r2, #4
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 8007bc8:	f06f 0340 	mvn.w	r3, #64	@ 0x40
 8007bcc:	60a9      	str	r1, [r5, #8]
 8007bce:	f842 3b14 	str.w	r3, [r2], #20
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bd2:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8007bd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bda:	e842 3100 	strex	r1, r3, [r2]
 8007bde:	2900      	cmp	r1, #0
 8007be0:	d1f7      	bne.n	8007bd2 <UASPEP_INIT+0x7a>
}
 8007be2:	bc70      	pop	{r4, r5, r6}
 8007be4:	4770      	bx	lr
 8007be6:	bf00      	nop
 8007be8:	0800b794 	.word	0x0800b794

08007bec <UASPEP_SEND_PACKET>:
  * @param  pHWHandle Hardware components chosen for communication
  * @param  data Data to be transmitted to controller
  * @param  length Length of the data to be transmitted
  */
bool UASPEP_SEND_PACKET(void *pHWHandle, void *data, uint16_t length)
{
 8007bec:	b4f0      	push	{r4, r5, r6, r7}
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *)pHWHandle; //cstat !MISRAC2012-Rule-11.5
  bool result;
  if (0U == LL_DMA_IsEnabledStream(pHandle->txDMA, pHandle->txChannel))
 8007bee:	6905      	ldr	r5, [r0, #16]
  return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN) == (DMA_SxCR_EN));
 8007bf0:	4e1b      	ldr	r6, [pc, #108]	@ (8007c60 <UASPEP_SEND_PACKET+0x74>)
 8007bf2:	6884      	ldr	r4, [r0, #8]
 8007bf4:	5d73      	ldrb	r3, [r6, r5]
 8007bf6:	58e7      	ldr	r7, [r4, r3]
 8007bf8:	07ff      	lsls	r7, r7, #31
 8007bfa:	4423      	add	r3, r4
 8007bfc:	d422      	bmi.n	8007c44 <UASPEP_SEND_PACKET+0x58>
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 8007bfe:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 8007c00:	6859      	ldr	r1, [r3, #4]
 8007c02:	0c09      	lsrs	r1, r1, #16
 8007c04:	0409      	lsls	r1, r1, #16
 8007c06:	430a      	orrs	r2, r1
 8007c08:	605a      	str	r2, [r3, #4]
  if (NULL == DMAx)
 8007c0a:	b1ac      	cbz	r4, 8007c38 <UASPEP_SEND_PACKET+0x4c>
    register __IO uint32_t *preg = __DMA_PTR_REG_OFFSET(DMAx->LIFCR,(Stream<=3)?0:1);
 8007c0c:	2d03      	cmp	r5, #3
 8007c0e:	bf94      	ite	ls
 8007c10:	2200      	movls	r2, #0
 8007c12:	2201      	movhi	r2, #1
    WRITE_REG (*preg, 1 << __LL_DMA_IT_TC_BIT(Stream));
 8007c14:	f015 0503 	ands.w	r5, r5, #3
    register __IO uint32_t *preg = __DMA_PTR_REG_OFFSET(DMAx->LIFCR,(Stream<=3)?0:1);
 8007c18:	f104 0308 	add.w	r3, r4, #8
    WRITE_REG (*preg, 1 << __LL_DMA_IT_TC_BIT(Stream));
 8007c1c:	d015      	beq.n	8007c4a <UASPEP_SEND_PACKET+0x5e>
 8007c1e:	2d01      	cmp	r5, #1
 8007c20:	d01a      	beq.n	8007c58 <UASPEP_SEND_PACKET+0x6c>
 8007c22:	2d02      	cmp	r5, #2
 8007c24:	bf14      	ite	ne
 8007c26:	f04f 6100 	movne.w	r1, #134217728	@ 0x8000000
 8007c2a:	f44f 1100 	moveq.w	r1, #2097152	@ 0x200000
 8007c2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8007c32:	6903      	ldr	r3, [r0, #16]
 8007c34:	5cf3      	ldrb	r3, [r6, r3]
 8007c36:	4423      	add	r3, r4
 8007c38:	681a      	ldr	r2, [r3, #0]
    //cstat !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6
    LL_DMA_SetMemoryAddress(pHandle->txDMA, pHandle->txChannel, (uint32_t)data);
    LL_DMA_SetDataLength(pHandle->txDMA, pHandle->txChannel, length);
    LL_DMA_ClearFlag_TC(pHandle->txDMA, pHandle->txChannel);
    LL_DMA_EnableStream(pHandle->txDMA, pHandle->txChannel);
    result = true;
 8007c3a:	2001      	movs	r0, #1
 8007c3c:	4302      	orrs	r2, r0
  else
  {
    result = false;
  }
  return (result);
}
 8007c3e:	bcf0      	pop	{r4, r5, r6, r7}
 8007c40:	601a      	str	r2, [r3, #0]
 8007c42:	4770      	bx	lr
    result = false;
 8007c44:	2000      	movs	r0, #0
}
 8007c46:	bcf0      	pop	{r4, r5, r6, r7}
 8007c48:	4770      	bx	lr
 8007c4a:	2120      	movs	r1, #32
 8007c4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007c50:	6903      	ldr	r3, [r0, #16]
 8007c52:	5cf3      	ldrb	r3, [r6, r3]
 8007c54:	4423      	add	r3, r4
 8007c56:	e7ef      	b.n	8007c38 <UASPEP_SEND_PACKET+0x4c>
 8007c58:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8007c5c:	e7f6      	b.n	8007c4c <UASPEP_SEND_PACKET+0x60>
 8007c5e:	bf00      	nop
 8007c60:	0800b794 	.word	0x0800b794

08007c64 <UASPEP_RECEIVE_BUFFER>:
  * @param  pHWHandle Hardware components chosen for communication
  * @param  buffer Buffer which will receive the communicated data
  * @param  length Length of the received data
  */
void UASPEP_RECEIVE_BUFFER(void *pHWHandle, void* buffer, uint16_t length)
{
 8007c64:	b430      	push	{r4, r5}
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 8007c66:	68c3      	ldr	r3, [r0, #12]
 8007c68:	4d09      	ldr	r5, [pc, #36]	@ (8007c90 <UASPEP_RECEIVE_BUFFER+0x2c>)
 8007c6a:	6844      	ldr	r4, [r0, #4]
 8007c6c:	5ce8      	ldrb	r0, [r5, r3]
 8007c6e:	eb04 0c00 	add.w	ip, r4, r0
 8007c72:	f8cc 100c 	str.w	r1, [ip, #12]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 8007c76:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8007c7a:	0c1b      	lsrs	r3, r3, #16
 8007c7c:	041b      	lsls	r3, r3, #16
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	f8cc 3004 	str.w	r3, [ip, #4]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8007c84:	5823      	ldr	r3, [r4, r0]
 8007c86:	f043 0301 	orr.w	r3, r3, #1
 8007c8a:	5023      	str	r3, [r4, r0]
  //cstat !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6
  LL_DMA_SetMemoryAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)buffer);
  LL_DMA_SetDataLength(pHandle->rxDMA, pHandle->rxChannel, length);

  LL_DMA_EnableStream(pHandle->rxDMA, pHandle->rxChannel);
}
 8007c8c:	bc30      	pop	{r4, r5}
 8007c8e:	4770      	bx	lr
 8007c90:	0800b794 	.word	0x0800b794

08007c94 <UASPEP_IDLE_ENABLE>:
  * @param  pHandle Handler of the current instance of the UASPEP component
  */
void UASPEP_IDLE_ENABLE(void *pHWHandle)
{
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *)pHWHandle; //cstat !MISRAC2012-Rule-11.5
  LL_USART_ClearFlag_IDLE(pHandle->USARTx);
 8007c94:	6802      	ldr	r2, [r0, #0]
{
 8007c96:	b082      	sub	sp, #8
  tmpreg = USARTx->SR;
 8007c98:	6813      	ldr	r3, [r2, #0]
 8007c9a:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8007c9c:	9b01      	ldr	r3, [sp, #4]
  tmpreg = USARTx->DR;
 8007c9e:	6853      	ldr	r3, [r2, #4]
 8007ca0:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8007ca2:	9b01      	ldr	r3, [sp, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8007ca4:	320c      	adds	r2, #12
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca6:	e852 3f00 	ldrex	r3, [r2]
 8007caa:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cae:	e842 3100 	strex	r1, r3, [r2]
 8007cb2:	2900      	cmp	r1, #0
 8007cb4:	d1f7      	bne.n	8007ca6 <UASPEP_IDLE_ENABLE+0x12>
  LL_USART_EnableIT_IDLE(pHandle->USARTx);
}
 8007cb6:	b002      	add	sp, #8
 8007cb8:	4770      	bx	lr
 8007cba:	bf00      	nop

08007cbc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007cbc:	4a03      	ldr	r2, [pc, #12]	@ (8007ccc <SystemInit+0x10>)
 8007cbe:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8007cc2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007cc6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007cca:	4770      	bx	lr
 8007ccc:	e000ed00 	.word	0xe000ed00

08007cd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007cd0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007cd2:	4a0e      	ldr	r2, [pc, #56]	@ (8007d0c <HAL_InitTick+0x3c>)
 8007cd4:	4b0e      	ldr	r3, [pc, #56]	@ (8007d10 <HAL_InitTick+0x40>)
 8007cd6:	7812      	ldrb	r2, [r2, #0]
 8007cd8:	681b      	ldr	r3, [r3, #0]
{
 8007cda:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007cdc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8007ce0:	fbb0 f0f2 	udiv	r0, r0, r2
 8007ce4:	fbb3 f0f0 	udiv	r0, r3, r0
 8007ce8:	f000 fad4 	bl	8008294 <HAL_SYSTICK_Config>
 8007cec:	b908      	cbnz	r0, 8007cf2 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007cee:	2d0f      	cmp	r5, #15
 8007cf0:	d901      	bls.n	8007cf6 <HAL_InitTick+0x26>
    return HAL_ERROR;
 8007cf2:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8007cf4:	bd38      	pop	{r3, r4, r5, pc}
 8007cf6:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007cf8:	4602      	mov	r2, r0
 8007cfa:	4629      	mov	r1, r5
 8007cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8007d00:	f000 fa7e 	bl	8008200 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007d04:	4b03      	ldr	r3, [pc, #12]	@ (8007d14 <HAL_InitTick+0x44>)
 8007d06:	4620      	mov	r0, r4
 8007d08:	601d      	str	r5, [r3, #0]
}
 8007d0a:	bd38      	pop	{r3, r4, r5, pc}
 8007d0c:	20000b64 	.word	0x20000b64
 8007d10:	20000b60 	.word	0x20000b60
 8007d14:	20000b68 	.word	0x20000b68

08007d18 <HAL_Init>:
{
 8007d18:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007d1a:	4b0b      	ldr	r3, [pc, #44]	@ (8007d48 <HAL_Init+0x30>)
 8007d1c:	681a      	ldr	r2, [r3, #0]
 8007d1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007d22:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007d24:	681a      	ldr	r2, [r3, #0]
 8007d26:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007d2a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007d2c:	681a      	ldr	r2, [r3, #0]
 8007d2e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007d32:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007d34:	2003      	movs	r0, #3
 8007d36:	f000 fa51 	bl	80081dc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8007d3a:	2004      	movs	r0, #4
 8007d3c:	f7ff ffc8 	bl	8007cd0 <HAL_InitTick>
  HAL_MspInit();
 8007d40:	f7ff fcd2 	bl	80076e8 <HAL_MspInit>
}
 8007d44:	2000      	movs	r0, #0
 8007d46:	bd08      	pop	{r3, pc}
 8007d48:	40023c00 	.word	0x40023c00

08007d4c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8007d4c:	4a03      	ldr	r2, [pc, #12]	@ (8007d5c <HAL_IncTick+0x10>)
 8007d4e:	4b04      	ldr	r3, [pc, #16]	@ (8007d60 <HAL_IncTick+0x14>)
 8007d50:	6811      	ldr	r1, [r2, #0]
 8007d52:	781b      	ldrb	r3, [r3, #0]
 8007d54:	440b      	add	r3, r1
 8007d56:	6013      	str	r3, [r2, #0]
}
 8007d58:	4770      	bx	lr
 8007d5a:	bf00      	nop
 8007d5c:	20001f70 	.word	0x20001f70
 8007d60:	20000b64 	.word	0x20000b64

08007d64 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8007d64:	4b01      	ldr	r3, [pc, #4]	@ (8007d6c <HAL_GetTick+0x8>)
 8007d66:	6818      	ldr	r0, [r3, #0]
}
 8007d68:	4770      	bx	lr
 8007d6a:	bf00      	nop
 8007d6c:	20001f70 	.word	0x20001f70

08007d70 <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;

  /* Check ADC handle */
  if (hadc == NULL)
 8007d70:	2800      	cmp	r0, #0
 8007d72:	f000 809e 	beq.w	8007eb2 <HAL_ADC_Init+0x142>
{
 8007d76:	b538      	push	{r3, r4, r5, lr}
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8007d78:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 8007d7a:	4604      	mov	r4, r0
 8007d7c:	b13d      	cbz	r5, 8007d8e <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007d7e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007d80:	06db      	lsls	r3, r3, #27
 8007d82:	d50c      	bpl.n	8007d9e <HAL_ADC_Init+0x2e>
  {
    tmp_hal_status = HAL_ERROR;
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8007d84:	2300      	movs	r3, #0
 8007d86:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    tmp_hal_status = HAL_ERROR;
 8007d8a:	2001      	movs	r0, #1

  /* Return function status */
  return tmp_hal_status;
}
 8007d8c:	bd38      	pop	{r3, r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 8007d8e:	f7ff fcc9 	bl	8007724 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8007d92:	6465      	str	r5, [r4, #68]	@ 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007d94:	6c23      	ldr	r3, [r4, #64]	@ 0x40
    hadc->Lock = HAL_UNLOCKED;
 8007d96:	f884 503c 	strb.w	r5, [r4, #60]	@ 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007d9a:	06db      	lsls	r3, r3, #27
 8007d9c:	d4f2      	bmi.n	8007d84 <HAL_ADC_Init+0x14>
    ADC_STATE_CLR_SET(hadc->State,
 8007d9e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8007da0:	4a47      	ldr	r2, [pc, #284]	@ (8007ec0 <HAL_ADC_Init+0x150>)
    ADC_STATE_CLR_SET(hadc->State,
 8007da2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8007da6:	f023 0302 	bic.w	r3, r3, #2
 8007daa:	f043 0302 	orr.w	r3, r3, #2
 8007dae:	6423      	str	r3, [r4, #64]	@ 0x40
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8007db0:	6851      	ldr	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007db2:	6823      	ldr	r3, [r4, #0]
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8007db4:	f421 3140 	bic.w	r1, r1, #196608	@ 0x30000
 8007db8:	6051      	str	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8007dba:	6851      	ldr	r1, [r2, #4]
 8007dbc:	6860      	ldr	r0, [r4, #4]
 8007dbe:	4301      	orrs	r1, r0
 8007dc0:	6051      	str	r1, [r2, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007dc2:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007dc4:	6920      	ldr	r0, [r4, #16]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007dc6:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007dc8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007dcc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007dce:	685a      	ldr	r2, [r3, #4]
 8007dd0:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8007dd4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007dd6:	685a      	ldr	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007dd8:	68e0      	ldr	r0, [r4, #12]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007dda:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8007dde:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007de0:	685a      	ldr	r2, [r3, #4]
 8007de2:	430a      	orrs	r2, r1
 8007de4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007de6:	689a      	ldr	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007de8:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007dea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007dee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007df0:	689a      	ldr	r2, [r3, #8]
 8007df2:	4302      	orrs	r2, r0
 8007df4:	609a      	str	r2, [r3, #8]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007df6:	4a33      	ldr	r2, [pc, #204]	@ (8007ec4 <HAL_ADC_Init+0x154>)
 8007df8:	4291      	cmp	r1, r2
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007dfa:	689a      	ldr	r2, [r3, #8]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007dfc:	d051      	beq.n	8007ea2 <HAL_ADC_Init+0x132>
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007dfe:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007e02:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007e04:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007e06:	689a      	ldr	r2, [r3, #8]
 8007e08:	4311      	orrs	r1, r2
 8007e0a:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007e0c:	689a      	ldr	r2, [r3, #8]
 8007e0e:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8007e12:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007e14:	689a      	ldr	r2, [r3, #8]
 8007e16:	4302      	orrs	r2, r0
 8007e18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007e1a:	689a      	ldr	r2, [r3, #8]
 8007e1c:	f022 0202 	bic.w	r2, r2, #2
 8007e20:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007e22:	689a      	ldr	r2, [r3, #8]
 8007e24:	7e21      	ldrb	r1, [r4, #24]
 8007e26:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8007e2a:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8007e2c:	f894 2020 	ldrb.w	r2, [r4, #32]
 8007e30:	2a00      	cmp	r2, #0
 8007e32:	d040      	beq.n	8007eb6 <HAL_ADC_Init+0x146>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007e34:	685a      	ldr	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007e36:	6a61      	ldr	r1, [r4, #36]	@ 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007e38:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007e3c:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007e3e:	685a      	ldr	r2, [r3, #4]
 8007e40:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8007e44:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007e46:	685a      	ldr	r2, [r3, #4]
 8007e48:	3901      	subs	r1, #1
 8007e4a:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8007e4e:	605a      	str	r2, [r3, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007e50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007e52:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007e54:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8007e58:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007e5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e5c:	3901      	subs	r1, #1
 8007e5e:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8007e62:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8007e64:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007e66:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8007e68:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8007e6c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007e6e:	689a      	ldr	r2, [r3, #8]
 8007e70:	f894 0030 	ldrb.w	r0, [r4, #48]	@ 0x30
 8007e74:	ea42 2240 	orr.w	r2, r2, r0, lsl #9
 8007e78:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007e7a:	689a      	ldr	r2, [r3, #8]
 8007e7c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007e80:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007e82:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8007e84:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007e86:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8007e8a:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8007e8c:	6460      	str	r0, [r4, #68]	@ 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8007e8e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007e90:	f023 0303 	bic.w	r3, r3, #3
 8007e94:	f043 0301 	orr.w	r3, r3, #1
 8007e98:	6423      	str	r3, [r4, #64]	@ 0x40
  __HAL_UNLOCK(hadc);
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8007ea0:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007ea2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007ea6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007ea8:	689a      	ldr	r2, [r3, #8]
 8007eaa:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8007eae:	609a      	str	r2, [r3, #8]
 8007eb0:	e7b3      	b.n	8007e1a <HAL_ADC_Init+0xaa>
    return HAL_ERROR;
 8007eb2:	2001      	movs	r0, #1
}
 8007eb4:	4770      	bx	lr
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007eb6:	685a      	ldr	r2, [r3, #4]
 8007eb8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007ebc:	605a      	str	r2, [r3, #4]
 8007ebe:	e7c7      	b.n	8007e50 <HAL_ADC_Init+0xe0>
 8007ec0:	40012300 	.word	0x40012300
 8007ec4:	0f000001 	.word	0x0f000001

08007ec8 <HAL_ADC_ConfigChannel>:
{
 8007ec8:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 8007eca:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 8007ece:	b082      	sub	sp, #8
 8007ed0:	4602      	mov	r2, r0
  __HAL_LOCK(hadc);
 8007ed2:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 8007ed4:	f04f 0000 	mov.w	r0, #0
 8007ed8:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8007eda:	f000 809e 	beq.w	800801a <HAL_ADC_ConfigChannel+0x152>
 8007ede:	2301      	movs	r3, #1
 8007ee0:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8007ee4:	680d      	ldr	r5, [r1, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007ee6:	6813      	ldr	r3, [r2, #0]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8007ee8:	688c      	ldr	r4, [r1, #8]
  if (sConfig->Channel > ADC_CHANNEL_9)
 8007eea:	2d09      	cmp	r5, #9
 8007eec:	b2a8      	uxth	r0, r5
 8007eee:	d828      	bhi.n	8007f42 <HAL_ADC_ConfigChannel+0x7a>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8007ef0:	691e      	ldr	r6, [r3, #16]
 8007ef2:	eb05 0e45 	add.w	lr, r5, r5, lsl #1
 8007ef6:	f04f 0c07 	mov.w	ip, #7
 8007efa:	fa0c fc0e 	lsl.w	ip, ip, lr
 8007efe:	ea26 060c 	bic.w	r6, r6, ip
 8007f02:	611e      	str	r6, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007f04:	691e      	ldr	r6, [r3, #16]
 8007f06:	fa04 f40e 	lsl.w	r4, r4, lr
 8007f0a:	4334      	orrs	r4, r6
 8007f0c:	611c      	str	r4, [r3, #16]
  if (sConfig->Rank < 7U)
 8007f0e:	684c      	ldr	r4, [r1, #4]
 8007f10:	2c06      	cmp	r4, #6
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8007f12:	eb04 0184 	add.w	r1, r4, r4, lsl #2
  if (sConfig->Rank < 7U)
 8007f16:	d82a      	bhi.n	8007f6e <HAL_ADC_ConfigChannel+0xa6>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8007f18:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 8007f1a:	3905      	subs	r1, #5
 8007f1c:	f04f 0c1f 	mov.w	ip, #31
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007f20:	4088      	lsls	r0, r1
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8007f22:	fa0c f101 	lsl.w	r1, ip, r1
 8007f26:	ea24 0101 	bic.w	r1, r4, r1
 8007f2a:	6359      	str	r1, [r3, #52]	@ 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007f2c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8007f2e:	4308      	orrs	r0, r1
 8007f30:	6358      	str	r0, [r3, #52]	@ 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8007f32:	493b      	ldr	r1, [pc, #236]	@ (8008020 <HAL_ADC_ConfigChannel+0x158>)
 8007f34:	428b      	cmp	r3, r1
 8007f36:	d02b      	beq.n	8007f90 <HAL_ADC_ConfigChannel+0xc8>
  __HAL_UNLOCK(hadc);
 8007f38:	2000      	movs	r0, #0
 8007f3a:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c
}
 8007f3e:	b002      	add	sp, #8
 8007f40:	bd70      	pop	{r4, r5, r6, pc}
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007f42:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
 8007f46:	68de      	ldr	r6, [r3, #12]
 8007f48:	f1ac 0c1e 	sub.w	ip, ip, #30
 8007f4c:	f04f 0e07 	mov.w	lr, #7
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8007f50:	fa04 f40c 	lsl.w	r4, r4, ip
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007f54:	fa0e fc0c 	lsl.w	ip, lr, ip
 8007f58:	ea26 060c 	bic.w	r6, r6, ip
 8007f5c:	60de      	str	r6, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8007f5e:	68de      	ldr	r6, [r3, #12]
 8007f60:	4334      	orrs	r4, r6
 8007f62:	60dc      	str	r4, [r3, #12]
  if (sConfig->Rank < 7U)
 8007f64:	684c      	ldr	r4, [r1, #4]
 8007f66:	2c06      	cmp	r4, #6
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8007f68:	eb04 0184 	add.w	r1, r4, r4, lsl #2
  if (sConfig->Rank < 7U)
 8007f6c:	d9d4      	bls.n	8007f18 <HAL_ADC_ConfigChannel+0x50>
  else if (sConfig->Rank < 13U)
 8007f6e:	2c0c      	cmp	r4, #12
 8007f70:	d81f      	bhi.n	8007fb2 <HAL_ADC_ConfigChannel+0xea>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007f72:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 8007f74:	3923      	subs	r1, #35	@ 0x23
 8007f76:	261f      	movs	r6, #31
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8007f78:	4088      	lsls	r0, r1
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007f7a:	fa06 f101 	lsl.w	r1, r6, r1
 8007f7e:	ea24 0101 	bic.w	r1, r4, r1
 8007f82:	6319      	str	r1, [r3, #48]	@ 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8007f84:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8007f86:	4308      	orrs	r0, r1
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8007f88:	4925      	ldr	r1, [pc, #148]	@ (8008020 <HAL_ADC_ConfigChannel+0x158>)
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8007f8a:	6318      	str	r0, [r3, #48]	@ 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8007f8c:	428b      	cmp	r3, r1
 8007f8e:	d1d3      	bne.n	8007f38 <HAL_ADC_ConfigChannel+0x70>
 8007f90:	2d12      	cmp	r5, #18
 8007f92:	d01b      	beq.n	8007fcc <HAL_ADC_ConfigChannel+0x104>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007f94:	4b23      	ldr	r3, [pc, #140]	@ (8008024 <HAL_ADC_ConfigChannel+0x15c>)
 8007f96:	429d      	cmp	r5, r3
 8007f98:	d022      	beq.n	8007fe0 <HAL_ADC_ConfigChannel+0x118>
 8007f9a:	2d11      	cmp	r5, #17
 8007f9c:	d1cc      	bne.n	8007f38 <HAL_ADC_ConfigChannel+0x70>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8007f9e:	4b22      	ldr	r3, [pc, #136]	@ (8008028 <HAL_ADC_ConfigChannel+0x160>)
 8007fa0:	6859      	ldr	r1, [r3, #4]
 8007fa2:	f421 0180 	bic.w	r1, r1, #4194304	@ 0x400000
 8007fa6:	6059      	str	r1, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8007fa8:	6859      	ldr	r1, [r3, #4]
 8007faa:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8007fae:	6059      	str	r1, [r3, #4]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007fb0:	e7c2      	b.n	8007f38 <HAL_ADC_ConfigChannel+0x70>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8007fb2:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8007fb4:	3941      	subs	r1, #65	@ 0x41
 8007fb6:	261f      	movs	r6, #31
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007fb8:	4088      	lsls	r0, r1
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8007fba:	fa06 f101 	lsl.w	r1, r6, r1
 8007fbe:	ea24 0101 	bic.w	r1, r4, r1
 8007fc2:	62d9      	str	r1, [r3, #44]	@ 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007fc4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8007fc6:	4308      	orrs	r0, r1
 8007fc8:	62d8      	str	r0, [r3, #44]	@ 0x2c
 8007fca:	e7b2      	b.n	8007f32 <HAL_ADC_ConfigChannel+0x6a>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8007fcc:	4b16      	ldr	r3, [pc, #88]	@ (8008028 <HAL_ADC_ConfigChannel+0x160>)
 8007fce:	6859      	ldr	r1, [r3, #4]
 8007fd0:	f421 0100 	bic.w	r1, r1, #8388608	@ 0x800000
 8007fd4:	6059      	str	r1, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8007fd6:	6859      	ldr	r1, [r3, #4]
 8007fd8:	f441 0180 	orr.w	r1, r1, #4194304	@ 0x400000
 8007fdc:	6059      	str	r1, [r3, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007fde:	e7ab      	b.n	8007f38 <HAL_ADC_ConfigChannel+0x70>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8007fe0:	4b11      	ldr	r3, [pc, #68]	@ (8008028 <HAL_ADC_ConfigChannel+0x160>)
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007fe2:	4c12      	ldr	r4, [pc, #72]	@ (800802c <HAL_ADC_ConfigChannel+0x164>)
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8007fe4:	6859      	ldr	r1, [r3, #4]
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007fe6:	4812      	ldr	r0, [pc, #72]	@ (8008030 <HAL_ADC_ConfigChannel+0x168>)
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8007fe8:	f421 0180 	bic.w	r1, r1, #4194304	@ 0x400000
 8007fec:	6059      	str	r1, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8007fee:	6859      	ldr	r1, [r3, #4]
 8007ff0:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8007ff4:	6059      	str	r1, [r3, #4]
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007ff6:	6823      	ldr	r3, [r4, #0]
 8007ff8:	fba0 0303 	umull	r0, r3, r0, r3
 8007ffc:	0c9b      	lsrs	r3, r3, #18
 8007ffe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008002:	005b      	lsls	r3, r3, #1
 8008004:	9301      	str	r3, [sp, #4]
      while (counter != 0U)
 8008006:	9b01      	ldr	r3, [sp, #4]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d095      	beq.n	8007f38 <HAL_ADC_ConfigChannel+0x70>
        counter--;
 800800c:	9b01      	ldr	r3, [sp, #4]
 800800e:	3b01      	subs	r3, #1
 8008010:	9301      	str	r3, [sp, #4]
      while (counter != 0U)
 8008012:	9b01      	ldr	r3, [sp, #4]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d1f9      	bne.n	800800c <HAL_ADC_ConfigChannel+0x144>
 8008018:	e78e      	b.n	8007f38 <HAL_ADC_ConfigChannel+0x70>
  __HAL_LOCK(hadc);
 800801a:	2002      	movs	r0, #2
}
 800801c:	b002      	add	sp, #8
 800801e:	bd70      	pop	{r4, r5, r6, pc}
 8008020:	40012000 	.word	0x40012000
 8008024:	10000012 	.word	0x10000012
 8008028:	40012300 	.word	0x40012300
 800802c:	20000b60 	.word	0x20000b60
 8008030:	431bde83 	.word	0x431bde83

08008034 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8008034:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008036:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
  if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800803a:	698d      	ldr	r5, [r1, #24]
  __HAL_LOCK(hadc);
 800803c:	2b01      	cmp	r3, #1
 800803e:	f000 80c2 	beq.w	80081c6 <HAL_ADCEx_InjectedConfigChannel+0x192>
 8008042:	2301      	movs	r3, #1
 8008044:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8008048:	680c      	ldr	r4, [r1, #0]
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 800804a:	6803      	ldr	r3, [r0, #0]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 800804c:	688a      	ldr	r2, [r1, #8]
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 800804e:	2c09      	cmp	r4, #9
 8008050:	4684      	mov	ip, r0
 8008052:	b2a0      	uxth	r0, r4
 8008054:	d861      	bhi.n	800811a <HAL_ADCEx_InjectedConfigChannel+0xe6>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8008056:	691e      	ldr	r6, [r3, #16]
 8008058:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 800805c:	2707      	movs	r7, #7
 800805e:	fa07 f70e 	lsl.w	r7, r7, lr
 8008062:	ea26 0607 	bic.w	r6, r6, r7
 8008066:	611e      	str	r6, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8008068:	691e      	ldr	r6, [r3, #16]
 800806a:	fa02 f20e 	lsl.w	r2, r2, lr
 800806e:	4332      	orrs	r2, r6
 8008070:	611a      	str	r2, [r3, #16]
  }

  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8008072:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8008074:	690f      	ldr	r7, [r1, #16]

  /* Rank configuration */

  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 8008076:	684e      	ldr	r6, [r1, #4]
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8008078:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 800807c:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 800807e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008080:	f107 3eff 	add.w	lr, r7, #4294967295
 8008084:	ea42 520e 	orr.w	r2, r2, lr, lsl #20
 8008088:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 800808a:	1cf2      	adds	r2, r6, #3
 800808c:	1bd2      	subs	r2, r2, r7
 800808e:	b2d2      	uxtb	r2, r2
 8008090:	6b9f      	ldr	r7, [r3, #56]	@ 0x38
 8008092:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8008096:	f04f 0e1f 	mov.w	lr, #31

  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 800809a:	4090      	lsls	r0, r2
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 800809c:	fa0e f202 	lsl.w	r2, lr, r2
 80080a0:	ea27 0202 	bic.w	r2, r7, r2
 80080a4:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 80080a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80080a8:	4310      	orrs	r0, r2
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80080aa:	4a48      	ldr	r2, [pc, #288]	@ (80081cc <HAL_ADCEx_InjectedConfigChannel+0x198>)
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 80080ac:	6398      	str	r0, [r3, #56]	@ 0x38
  if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80080ae:	4295      	cmp	r5, r2
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 80080b0:	689a      	ldr	r2, [r3, #8]
 80080b2:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
 80080b6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 80080b8:	689a      	ldr	r2, [r3, #8]
  if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80080ba:	d065      	beq.n	8008188 <HAL_ADCEx_InjectedConfigChannel+0x154>
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 80080bc:	4315      	orrs	r5, r2
 80080be:	609d      	str	r5, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 80080c0:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 80080c2:	69c8      	ldr	r0, [r1, #28]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 80080c4:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 80080c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 80080ca:	689a      	ldr	r2, [r3, #8]
 80080cc:	4302      	orrs	r2, r0
 80080ce:	609a      	str	r2, [r3, #8]
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
  }

  if (sConfigInjected->AutoInjectedConv != DISABLE)
 80080d0:	7d4a      	ldrb	r2, [r1, #21]
 80080d2:	2a00      	cmp	r2, #0
 80080d4:	d031      	beq.n	800813a <HAL_ADCEx_InjectedConfigChannel+0x106>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 80080d6:	685a      	ldr	r2, [r3, #4]
 80080d8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80080dc:	605a      	str	r2, [r3, #4]
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
  }

  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 80080de:	7d0a      	ldrb	r2, [r1, #20]
 80080e0:	2a00      	cmp	r2, #0
 80080e2:	d031      	beq.n	8008148 <HAL_ADCEx_InjectedConfigChannel+0x114>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 80080e4:	685a      	ldr	r2, [r3, #4]
 80080e6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80080ea:	605a      	str	r2, [r3, #4]
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
  }

  switch (sConfigInjected->InjectedRank)
 80080ec:	2e02      	cmp	r6, #2
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 80080ee:	68ca      	ldr	r2, [r1, #12]
  switch (sConfigInjected->InjectedRank)
 80080f0:	d031      	beq.n	8008156 <HAL_ADCEx_InjectedConfigChannel+0x122>
 80080f2:	2e03      	cmp	r6, #3
 80080f4:	d056      	beq.n	80081a4 <HAL_ADCEx_InjectedConfigChannel+0x170>
 80080f6:	2e01      	cmp	r6, #1
 80080f8:	d04a      	beq.n	8008190 <HAL_ADCEx_InjectedConfigChannel+0x15c>
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
      break;
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 80080fa:	6a19      	ldr	r1, [r3, #32]
 80080fc:	f421 617f 	bic.w	r1, r1, #4080	@ 0xff0
 8008100:	f021 010f 	bic.w	r1, r1, #15
 8008104:	6219      	str	r1, [r3, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8008106:	6a19      	ldr	r1, [r3, #32]
 8008108:	430a      	orrs	r2, r1
 800810a:	621a      	str	r2, [r3, #32]
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 800810c:	4a30      	ldr	r2, [pc, #192]	@ (80081d0 <HAL_ADCEx_InjectedConfigChannel+0x19c>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d02d      	beq.n	800816e <HAL_ADCEx_InjectedConfigChannel+0x13a>
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008112:	2000      	movs	r0, #0
 8008114:	f88c 003c 	strb.w	r0, [ip, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
}
 8008118:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 800811a:	eb00 0640 	add.w	r6, r0, r0, lsl #1
 800811e:	68df      	ldr	r7, [r3, #12]
 8008120:	3e1e      	subs	r6, #30
 8008122:	f04f 0e07 	mov.w	lr, #7
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8008126:	40b2      	lsls	r2, r6
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8008128:	fa0e f606 	lsl.w	r6, lr, r6
 800812c:	ea27 0606 	bic.w	r6, r7, r6
 8008130:	60de      	str	r6, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8008132:	68de      	ldr	r6, [r3, #12]
 8008134:	4332      	orrs	r2, r6
 8008136:	60da      	str	r2, [r3, #12]
 8008138:	e79b      	b.n	8008072 <HAL_ADCEx_InjectedConfigChannel+0x3e>
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 800813a:	685a      	ldr	r2, [r3, #4]
 800813c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008140:	605a      	str	r2, [r3, #4]
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8008142:	7d0a      	ldrb	r2, [r1, #20]
 8008144:	2a00      	cmp	r2, #0
 8008146:	d1cd      	bne.n	80080e4 <HAL_ADCEx_InjectedConfigChannel+0xb0>
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8008148:	685a      	ldr	r2, [r3, #4]
 800814a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800814e:	605a      	str	r2, [r3, #4]
  switch (sConfigInjected->InjectedRank)
 8008150:	2e02      	cmp	r6, #2
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8008152:	68ca      	ldr	r2, [r1, #12]
  switch (sConfigInjected->InjectedRank)
 8008154:	d1cd      	bne.n	80080f2 <HAL_ADCEx_InjectedConfigChannel+0xbe>
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8008156:	6999      	ldr	r1, [r3, #24]
 8008158:	f421 617f 	bic.w	r1, r1, #4080	@ 0xff0
 800815c:	f021 010f 	bic.w	r1, r1, #15
 8008160:	6199      	str	r1, [r3, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8008162:	6999      	ldr	r1, [r3, #24]
 8008164:	430a      	orrs	r2, r1
 8008166:	619a      	str	r2, [r3, #24]
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8008168:	4a19      	ldr	r2, [pc, #100]	@ (80081d0 <HAL_ADCEx_InjectedConfigChannel+0x19c>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d1d1      	bne.n	8008112 <HAL_ADCEx_InjectedConfigChannel+0xde>
 800816e:	2c12      	cmp	r4, #18
 8008170:	d022      	beq.n	80081b8 <HAL_ADCEx_InjectedConfigChannel+0x184>
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8008172:	4b18      	ldr	r3, [pc, #96]	@ (80081d4 <HAL_ADCEx_InjectedConfigChannel+0x1a0>)
 8008174:	429c      	cmp	r4, r3
 8008176:	d001      	beq.n	800817c <HAL_ADCEx_InjectedConfigChannel+0x148>
 8008178:	2c11      	cmp	r4, #17
 800817a:	d1ca      	bne.n	8008112 <HAL_ADCEx_InjectedConfigChannel+0xde>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800817c:	4a16      	ldr	r2, [pc, #88]	@ (80081d8 <HAL_ADCEx_InjectedConfigChannel+0x1a4>)
 800817e:	6853      	ldr	r3, [r2, #4]
 8008180:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008184:	6053      	str	r3, [r2, #4]
 8008186:	e7c4      	b.n	8008112 <HAL_ADCEx_InjectedConfigChannel+0xde>
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8008188:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 800818c:	609a      	str	r2, [r3, #8]
 800818e:	e79f      	b.n	80080d0 <HAL_ADCEx_InjectedConfigChannel+0x9c>
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8008190:	6959      	ldr	r1, [r3, #20]
 8008192:	f421 617f 	bic.w	r1, r1, #4080	@ 0xff0
 8008196:	f021 010f 	bic.w	r1, r1, #15
 800819a:	6159      	str	r1, [r3, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 800819c:	6959      	ldr	r1, [r3, #20]
 800819e:	430a      	orrs	r2, r1
 80081a0:	615a      	str	r2, [r3, #20]
      break;
 80081a2:	e7b3      	b.n	800810c <HAL_ADCEx_InjectedConfigChannel+0xd8>
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 80081a4:	69d9      	ldr	r1, [r3, #28]
 80081a6:	f421 617f 	bic.w	r1, r1, #4080	@ 0xff0
 80081aa:	f021 010f 	bic.w	r1, r1, #15
 80081ae:	61d9      	str	r1, [r3, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 80081b0:	69d9      	ldr	r1, [r3, #28]
 80081b2:	430a      	orrs	r2, r1
 80081b4:	61da      	str	r2, [r3, #28]
      break;
 80081b6:	e7a9      	b.n	800810c <HAL_ADCEx_InjectedConfigChannel+0xd8>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80081b8:	f8d2 3304 	ldr.w	r3, [r2, #772]	@ 0x304
 80081bc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80081c0:	f8c2 3304 	str.w	r3, [r2, #772]	@ 0x304
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 80081c4:	e7a5      	b.n	8008112 <HAL_ADCEx_InjectedConfigChannel+0xde>
  __HAL_LOCK(hadc);
 80081c6:	2002      	movs	r0, #2
}
 80081c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081ca:	bf00      	nop
 80081cc:	000f0001 	.word	0x000f0001
 80081d0:	40012000 	.word	0x40012000
 80081d4:	10000012 	.word	0x10000012
 80081d8:	40012300 	.word	0x40012300

080081dc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80081dc:	4907      	ldr	r1, [pc, #28]	@ (80081fc <HAL_NVIC_SetPriorityGrouping+0x20>)
 80081de:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80081e0:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80081e2:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80081e6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80081ea:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80081ec:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80081ee:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80081f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80081f6:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80081f8:	4770      	bx	lr
 80081fa:	bf00      	nop
 80081fc:	e000ed00 	.word	0xe000ed00

08008200 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008200:	4b1b      	ldr	r3, [pc, #108]	@ (8008270 <HAL_NVIC_SetPriority+0x70>)
 8008202:	68db      	ldr	r3, [r3, #12]
 8008204:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008208:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800820a:	f1c3 0e07 	rsb	lr, r3, #7
 800820e:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008212:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008216:	bf28      	it	cs
 8008218:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800821c:	f1bc 0f06 	cmp.w	ip, #6
 8008220:	d91c      	bls.n	800825c <HAL_NVIC_SetPriority+0x5c>
 8008222:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008226:	f04f 33ff 	mov.w	r3, #4294967295
 800822a:	fa03 f30c 	lsl.w	r3, r3, ip
 800822e:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008232:	f04f 33ff 	mov.w	r3, #4294967295
 8008236:	fa03 f30e 	lsl.w	r3, r3, lr
 800823a:	ea21 0303 	bic.w	r3, r1, r3
 800823e:	fa03 f30c 	lsl.w	r3, r3, ip
 8008242:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008244:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 8008246:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008248:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 800824a:	db0a      	blt.n	8008262 <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800824c:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8008250:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8008254:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8008258:	f85d fb04 	ldr.w	pc, [sp], #4
 800825c:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800825e:	4694      	mov	ip, r2
 8008260:	e7e7      	b.n	8008232 <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008262:	4a04      	ldr	r2, [pc, #16]	@ (8008274 <HAL_NVIC_SetPriority+0x74>)
 8008264:	f000 000f 	and.w	r0, r0, #15
 8008268:	4402      	add	r2, r0
 800826a:	7613      	strb	r3, [r2, #24]
 800826c:	f85d fb04 	ldr.w	pc, [sp], #4
 8008270:	e000ed00 	.word	0xe000ed00
 8008274:	e000ecfc 	.word	0xe000ecfc

08008278 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8008278:	2800      	cmp	r0, #0
 800827a:	db07      	blt.n	800828c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800827c:	4a04      	ldr	r2, [pc, #16]	@ (8008290 <HAL_NVIC_EnableIRQ+0x18>)
 800827e:	0941      	lsrs	r1, r0, #5
 8008280:	2301      	movs	r3, #1
 8008282:	f000 001f 	and.w	r0, r0, #31
 8008286:	4083      	lsls	r3, r0
 8008288:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800828c:	4770      	bx	lr
 800828e:	bf00      	nop
 8008290:	e000e100 	.word	0xe000e100

08008294 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008294:	3801      	subs	r0, #1
 8008296:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800829a:	d301      	bcc.n	80082a0 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 800829c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800829e:	4770      	bx	lr
{
 80082a0:	b410      	push	{r4}
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80082a2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80082a6:	4c07      	ldr	r4, [pc, #28]	@ (80082c4 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80082a8:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80082aa:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 80082ae:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80082b2:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80082b4:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80082b6:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80082b8:	619a      	str	r2, [r3, #24]
}
 80082ba:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80082be:	6119      	str	r1, [r3, #16]
 80082c0:	4770      	bx	lr
 80082c2:	bf00      	nop
 80082c4:	e000ed00 	.word	0xe000ed00

080082c8 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80082c8:	4770      	bx	lr
 80082ca:	bf00      	nop

080082cc <HAL_SYSTICK_IRQHandler>:
{
 80082cc:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80082ce:	f7ff fffb 	bl	80082c8 <HAL_SYSTICK_Callback>
}
 80082d2:	bd08      	pop	{r3, pc}

080082d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80082d4:	b538      	push	{r3, r4, r5, lr}
 80082d6:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 80082d8:	f7ff fd44 	bl	8007d64 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80082dc:	2c00      	cmp	r4, #0
 80082de:	d06f      	beq.n	80083c0 <HAL_DMA_Init+0xec>

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80082e0:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 80082e2:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_BUSY;
 80082e4:	2102      	movs	r1, #2
 80082e6:	f884 1035 	strb.w	r1, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 80082ea:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 80082ee:	681a      	ldr	r2, [r3, #0]
 80082f0:	f022 0201 	bic.w	r2, r2, #1
 80082f4:	4605      	mov	r5, r0
 80082f6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80082f8:	e005      	b.n	8008306 <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80082fa:	f7ff fd33 	bl	8007d64 <HAL_GetTick>
 80082fe:	1b43      	subs	r3, r0, r5
 8008300:	2b05      	cmp	r3, #5
 8008302:	d839      	bhi.n	8008378 <HAL_DMA_Init+0xa4>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008304:	6823      	ldr	r3, [r4, #0]
 8008306:	681a      	ldr	r2, [r3, #0]
 8008308:	07d1      	lsls	r1, r2, #31
 800830a:	d4f6      	bmi.n	80082fa <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800830c:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8008310:	68e1      	ldr	r1, [r4, #12]
 8008312:	4302      	orrs	r2, r0
 8008314:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008316:	e9d4 5104 	ldrd	r5, r1, [r4, #16]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800831a:	69a0      	ldr	r0, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800831c:	432a      	orrs	r2, r5
 800831e:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008320:	69e1      	ldr	r1, [r4, #28]
  tmp = hdma->Instance->CR;
 8008322:	681d      	ldr	r5, [r3, #0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008324:	4302      	orrs	r2, r0
 8008326:	430a      	orrs	r2, r1
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008328:	4932      	ldr	r1, [pc, #200]	@ (80083f4 <HAL_DMA_Init+0x120>)
 800832a:	4029      	ands	r1, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 800832c:	6a25      	ldr	r5, [r4, #32]
 800832e:	432a      	orrs	r2, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008330:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008332:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8008334:	2904      	cmp	r1, #4
 8008336:	d026      	beq.n	8008386 <HAL_DMA_Init+0xb2>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008338:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800833a:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800833c:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008340:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008342:	b2d8      	uxtb	r0, r3
 8008344:	4a2c      	ldr	r2, [pc, #176]	@ (80083f8 <HAL_DMA_Init+0x124>)
  hdma->Instance->FCR = tmp;
 8008346:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008348:	3810      	subs	r0, #16
 800834a:	fba2 5200 	umull	r5, r2, r2, r0
 800834e:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008350:	492a      	ldr	r1, [pc, #168]	@ (80083fc <HAL_DMA_Init+0x128>)
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008352:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008356:	5c89      	ldrb	r1, [r1, r2]
 8008358:	65e1      	str	r1, [r4, #92]	@ 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800835a:	f023 0303 	bic.w	r3, r3, #3
  if (stream_number > 3U)
 800835e:	285f      	cmp	r0, #95	@ 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008360:	bf88      	it	hi
 8008362:	3304      	addhi	r3, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008364:	223f      	movs	r2, #63	@ 0x3f
 8008366:	408a      	lsls	r2, r1
 8008368:	65a3      	str	r3, [r4, #88]	@ 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800836a:	2000      	movs	r0, #0
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800836c:	609a      	str	r2, [r3, #8]
  hdma->State = HAL_DMA_STATE_READY;
 800836e:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008370:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8008372:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
}
 8008376:	bd38      	pop	{r3, r4, r5, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008378:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800837a:	2220      	movs	r2, #32
 800837c:	6562      	str	r2, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800837e:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      return HAL_TIMEOUT;
 8008382:	4618      	mov	r0, r3
}
 8008384:	bd38      	pop	{r3, r4, r5, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008386:	e9d4 510b 	ldrd	r5, r1, [r4, #44]	@ 0x2c
 800838a:	4329      	orrs	r1, r5
 800838c:	4311      	orrs	r1, r2
  hdma->Instance->CR = tmp;  
 800838e:	6019      	str	r1, [r3, #0]
  tmp = hdma->Instance->FCR;
 8008390:	6959      	ldr	r1, [r3, #20]
    tmp |= hdma->Init.FIFOThreshold;
 8008392:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008394:	f021 0107 	bic.w	r1, r1, #7
 8008398:	4311      	orrs	r1, r2
    tmp |= hdma->Init.FIFOThreshold;
 800839a:	f041 0104 	orr.w	r1, r1, #4
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800839e:	2d00      	cmp	r5, #0
 80083a0:	d0cf      	beq.n	8008342 <HAL_DMA_Init+0x6e>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80083a2:	b178      	cbz	r0, 80083c4 <HAL_DMA_Init+0xf0>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80083a4:	f5b0 5f00 	cmp.w	r0, #8192	@ 0x2000
 80083a8:	d016      	beq.n	80083d8 <HAL_DMA_Init+0x104>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80083aa:	2a02      	cmp	r2, #2
 80083ac:	d903      	bls.n	80083b6 <HAL_DMA_Init+0xe2>
 80083ae:	2a03      	cmp	r2, #3
 80083b0:	d1c7      	bne.n	8008342 <HAL_DMA_Init+0x6e>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80083b2:	01ea      	lsls	r2, r5, #7
 80083b4:	d5c5      	bpl.n	8008342 <HAL_DMA_Init+0x6e>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80083b6:	2240      	movs	r2, #64	@ 0x40
        hdma->State = HAL_DMA_STATE_READY;
 80083b8:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80083ba:	6562      	str	r2, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80083bc:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    return HAL_ERROR;
 80083c0:	2001      	movs	r0, #1
}
 80083c2:	bd38      	pop	{r3, r4, r5, pc}
    switch (tmp)
 80083c4:	2a01      	cmp	r2, #1
 80083c6:	d003      	beq.n	80083d0 <HAL_DMA_Init+0xfc>
 80083c8:	f032 0202 	bics.w	r2, r2, #2
 80083cc:	d1b9      	bne.n	8008342 <HAL_DMA_Init+0x6e>
 80083ce:	e7f0      	b.n	80083b2 <HAL_DMA_Init+0xde>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80083d0:	f1b5 7fc0 	cmp.w	r5, #25165824	@ 0x1800000
 80083d4:	d1b5      	bne.n	8008342 <HAL_DMA_Init+0x6e>
 80083d6:	e7ee      	b.n	80083b6 <HAL_DMA_Init+0xe2>
    switch (tmp)
 80083d8:	2a03      	cmp	r2, #3
 80083da:	d8b2      	bhi.n	8008342 <HAL_DMA_Init+0x6e>
 80083dc:	a001      	add	r0, pc, #4	@ (adr r0, 80083e4 <HAL_DMA_Init+0x110>)
 80083de:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 80083e2:	bf00      	nop
 80083e4:	080083b7 	.word	0x080083b7
 80083e8:	080083b3 	.word	0x080083b3
 80083ec:	080083b7 	.word	0x080083b7
 80083f0:	080083d1 	.word	0x080083d1
 80083f4:	f010803f 	.word	0xf010803f
 80083f8:	aaaaaaab 	.word	0xaaaaaaab
 80083fc:	0800b7b4 	.word	0x0800b7b4

08008400 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008404:	2300      	movs	r3, #0
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008406:	680c      	ldr	r4, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008408:	f8df a200 	ldr.w	sl, [pc, #512]	@ 800860c <HAL_GPIO_Init+0x20c>
{
 800840c:	b085      	sub	sp, #20
    ioposition = 0x01U << position;
 800840e:	f04f 0b01 	mov.w	fp, #1

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008412:	4689      	mov	r9, r1
 8008414:	e003      	b.n	800841e <HAL_GPIO_Init+0x1e>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008416:	3301      	adds	r3, #1
 8008418:	2b10      	cmp	r3, #16
 800841a:	f000 808c 	beq.w	8008536 <HAL_GPIO_Init+0x136>
    ioposition = 0x01U << position;
 800841e:	fa0b f203 	lsl.w	r2, fp, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008422:	ea02 0804 	and.w	r8, r2, r4
    if(iocurrent == ioposition)
 8008426:	43a2      	bics	r2, r4
 8008428:	d1f5      	bne.n	8008416 <HAL_GPIO_Init+0x16>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800842a:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800842e:	f001 0203 	and.w	r2, r1, #3
 8008432:	ea4f 0c43 	mov.w	ip, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008436:	2503      	movs	r5, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008438:	1e57      	subs	r7, r2, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800843a:	fa05 f50c 	lsl.w	r5, r5, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800843e:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008440:	ea6f 0505 	mvn.w	r5, r5
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008444:	d97a      	bls.n	800853c <HAL_GPIO_Init+0x13c>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008446:	2a03      	cmp	r2, #3
 8008448:	f040 80b1 	bne.w	80085ae <HAL_GPIO_Init+0x1ae>
      temp = GPIOx->MODER;
 800844c:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800844e:	fa02 f20c 	lsl.w	r2, r2, ip
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008452:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008454:	432a      	orrs	r2, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008456:	f411 3f40 	tst.w	r1, #196608	@ 0x30000
      GPIOx->MODER = temp;
 800845a:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800845c:	d0db      	beq.n	8008416 <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800845e:	2200      	movs	r2, #0
 8008460:	9203      	str	r2, [sp, #12]
 8008462:	f8da 2044 	ldr.w	r2, [sl, #68]	@ 0x44
 8008466:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800846a:	f8ca 2044 	str.w	r2, [sl, #68]	@ 0x44
 800846e:	f8da 2044 	ldr.w	r2, [sl, #68]	@ 0x44
 8008472:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8008476:	9203      	str	r2, [sp, #12]
 8008478:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 800847a:	f023 0203 	bic.w	r2, r3, #3
 800847e:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008482:	f003 0703 	and.w	r7, r3, #3
 8008486:	260f      	movs	r6, #15
 8008488:	f502 329c 	add.w	r2, r2, #79872	@ 0x13800
 800848c:	00bf      	lsls	r7, r7, #2
 800848e:	fa06 fc07 	lsl.w	ip, r6, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008492:	4e5b      	ldr	r6, [pc, #364]	@ (8008600 <HAL_GPIO_Init+0x200>)
        temp = SYSCFG->EXTICR[position >> 2U];
 8008494:	6895      	ldr	r5, [r2, #8]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008496:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008498:	ea25 050c 	bic.w	r5, r5, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800849c:	d022      	beq.n	80084e4 <HAL_GPIO_Init+0xe4>
 800849e:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 80084a2:	42b0      	cmp	r0, r6
 80084a4:	f000 808e 	beq.w	80085c4 <HAL_GPIO_Init+0x1c4>
 80084a8:	4e56      	ldr	r6, [pc, #344]	@ (8008604 <HAL_GPIO_Init+0x204>)
 80084aa:	42b0      	cmp	r0, r6
 80084ac:	f000 8090 	beq.w	80085d0 <HAL_GPIO_Init+0x1d0>
 80084b0:	f8df c15c 	ldr.w	ip, [pc, #348]	@ 8008610 <HAL_GPIO_Init+0x210>
 80084b4:	4560      	cmp	r0, ip
 80084b6:	f000 8091 	beq.w	80085dc <HAL_GPIO_Init+0x1dc>
 80084ba:	f8df c158 	ldr.w	ip, [pc, #344]	@ 8008614 <HAL_GPIO_Init+0x214>
 80084be:	4560      	cmp	r0, ip
 80084c0:	f000 8092 	beq.w	80085e8 <HAL_GPIO_Init+0x1e8>
 80084c4:	f8df c150 	ldr.w	ip, [pc, #336]	@ 8008618 <HAL_GPIO_Init+0x218>
 80084c8:	4560      	cmp	r0, ip
 80084ca:	f000 8093 	beq.w	80085f4 <HAL_GPIO_Init+0x1f4>
 80084ce:	f8df c14c 	ldr.w	ip, [pc, #332]	@ 800861c <HAL_GPIO_Init+0x21c>
 80084d2:	4560      	cmp	r0, ip
 80084d4:	bf0c      	ite	eq
 80084d6:	f04f 0c06 	moveq.w	ip, #6
 80084da:	f04f 0c07 	movne.w	ip, #7
 80084de:	fa0c f707 	lsl.w	r7, ip, r7
 80084e2:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80084e4:	6095      	str	r5, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80084e6:	4a48      	ldr	r2, [pc, #288]	@ (8008608 <HAL_GPIO_Init+0x208>)
 80084e8:	6892      	ldr	r2, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80084ea:	02ce      	lsls	r6, r1, #11
        temp &= ~((uint32_t)iocurrent);
 80084ec:	ea6f 0508 	mvn.w	r5, r8
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 80084f0:	4e45      	ldr	r6, [pc, #276]	@ (8008608 <HAL_GPIO_Init+0x208>)
        temp &= ~((uint32_t)iocurrent);
 80084f2:	bf54      	ite	pl
 80084f4:	402a      	andpl	r2, r5
          temp |= iocurrent;
 80084f6:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->RTSR = temp;
 80084fa:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR;
 80084fc:	68f2      	ldr	r2, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 80084fe:	4e42      	ldr	r6, [pc, #264]	@ (8008608 <HAL_GPIO_Init+0x208>)
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008500:	028f      	lsls	r7, r1, #10
        temp &= ~((uint32_t)iocurrent);
 8008502:	bf54      	ite	pl
 8008504:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8008506:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->FTSR = temp;
 800850a:	60f2      	str	r2, [r6, #12]

        temp = EXTI->EMR;
 800850c:	6872      	ldr	r2, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800850e:	038e      	lsls	r6, r1, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8008510:	4e3d      	ldr	r6, [pc, #244]	@ (8008608 <HAL_GPIO_Init+0x208>)
        temp &= ~((uint32_t)iocurrent);
 8008512:	bf54      	ite	pl
 8008514:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8008516:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->EMR = temp;
 800851a:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800851c:	6832      	ldr	r2, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800851e:	03c9      	lsls	r1, r1, #15
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008520:	f103 0301 	add.w	r3, r3, #1
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8008524:	4938      	ldr	r1, [pc, #224]	@ (8008608 <HAL_GPIO_Init+0x208>)
        temp &= ~((uint32_t)iocurrent);
 8008526:	bf54      	ite	pl
 8008528:	402a      	andpl	r2, r5
          temp |= iocurrent;
 800852a:	ea48 0202 	orrmi.w	r2, r8, r2
  for(position = 0U; position < GPIO_NUMBER; position++)
 800852e:	2b10      	cmp	r3, #16
        EXTI->IMR = temp;
 8008530:	600a      	str	r2, [r1, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008532:	f47f af74 	bne.w	800841e <HAL_GPIO_Init+0x1e>
      }
    }
  }
}
 8008536:	b005      	add	sp, #20
 8008538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 800853c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800853e:	ea07 0e05 	and.w	lr, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008542:	f8d9 700c 	ldr.w	r7, [r9, #12]
 8008546:	fa07 f70c 	lsl.w	r7, r7, ip
 800854a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 800854e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8008550:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008552:	ea27 0e08 	bic.w	lr, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008556:	f3c1 1700 	ubfx	r7, r1, #4, #1
 800855a:	409f      	lsls	r7, r3
 800855c:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8008560:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8008562:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008564:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008568:	f8d9 7008 	ldr.w	r7, [r9, #8]
 800856c:	fa07 f70c 	lsl.w	r7, r7, ip
 8008570:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008574:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8008576:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008578:	f47f af68 	bne.w	800844c <HAL_GPIO_Init+0x4c>
        temp = GPIOx->AFR[position >> 3U];
 800857c:	08df      	lsrs	r7, r3, #3
 800857e:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8008582:	9701      	str	r7, [sp, #4]
 8008584:	6a3e      	ldr	r6, [r7, #32]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008586:	f8d9 7010 	ldr.w	r7, [r9, #16]
        temp = GPIOx->AFR[position >> 3U];
 800858a:	9600      	str	r6, [sp, #0]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800858c:	f003 0e07 	and.w	lr, r3, #7
 8008590:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8008594:	260f      	movs	r6, #15
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008596:	fa07 f70e 	lsl.w	r7, r7, lr
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800859a:	fa06 fe0e 	lsl.w	lr, r6, lr
 800859e:	9e00      	ldr	r6, [sp, #0]
 80085a0:	ea26 0e0e 	bic.w	lr, r6, lr
        GPIOx->AFR[position >> 3U] = temp;
 80085a4:	9e01      	ldr	r6, [sp, #4]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80085a6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 80085aa:	6237      	str	r7, [r6, #32]
 80085ac:	e74e      	b.n	800844c <HAL_GPIO_Init+0x4c>
        temp = GPIOx->PUPDR;
 80085ae:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80085b0:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80085b4:	f8d9 7008 	ldr.w	r7, [r9, #8]
 80085b8:	fa07 f70c 	lsl.w	r7, r7, ip
 80085bc:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 80085c0:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80085c2:	e743      	b.n	800844c <HAL_GPIO_Init+0x4c>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80085c4:	f04f 0c01 	mov.w	ip, #1
 80085c8:	fa0c f707 	lsl.w	r7, ip, r7
 80085cc:	433d      	orrs	r5, r7
 80085ce:	e789      	b.n	80084e4 <HAL_GPIO_Init+0xe4>
 80085d0:	f04f 0c02 	mov.w	ip, #2
 80085d4:	fa0c f707 	lsl.w	r7, ip, r7
 80085d8:	433d      	orrs	r5, r7
 80085da:	e783      	b.n	80084e4 <HAL_GPIO_Init+0xe4>
 80085dc:	f04f 0c03 	mov.w	ip, #3
 80085e0:	fa0c f707 	lsl.w	r7, ip, r7
 80085e4:	433d      	orrs	r5, r7
 80085e6:	e77d      	b.n	80084e4 <HAL_GPIO_Init+0xe4>
 80085e8:	f04f 0c04 	mov.w	ip, #4
 80085ec:	fa0c f707 	lsl.w	r7, ip, r7
 80085f0:	433d      	orrs	r5, r7
 80085f2:	e777      	b.n	80084e4 <HAL_GPIO_Init+0xe4>
 80085f4:	f04f 0c05 	mov.w	ip, #5
 80085f8:	fa0c f707 	lsl.w	r7, ip, r7
 80085fc:	433d      	orrs	r5, r7
 80085fe:	e771      	b.n	80084e4 <HAL_GPIO_Init+0xe4>
 8008600:	40020000 	.word	0x40020000
 8008604:	40020800 	.word	0x40020800
 8008608:	40013c00 	.word	0x40013c00
 800860c:	40023800 	.word	0x40023800
 8008610:	40020c00 	.word	0x40020c00
 8008614:	40021000 	.word	0x40021000
 8008618:	40021400 	.word	0x40021400
 800861c:	40021800 	.word	0x40021800

08008620 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008620:	b902      	cbnz	r2, 8008624 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008622:	0409      	lsls	r1, r1, #16
 8008624:	6181      	str	r1, [r0, #24]
  }
}
 8008626:	4770      	bx	lr

08008628 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8008628:	b530      	push	{r4, r5, lr}
 800862a:	b083      	sub	sp, #12
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 800862c:	4b19      	ldr	r3, [pc, #100]	@ (8008694 <HAL_PWREx_EnableOverDrive+0x6c>)
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800862e:	491a      	ldr	r1, [pc, #104]	@ (8008698 <HAL_PWREx_EnableOverDrive+0x70>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008630:	4d1a      	ldr	r5, [pc, #104]	@ (800869c <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8008632:	2200      	movs	r2, #0
 8008634:	9201      	str	r2, [sp, #4]
 8008636:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008638:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800863c:	641a      	str	r2, [r3, #64]	@ 0x40
 800863e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008640:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008644:	9301      	str	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8008646:	2201      	movs	r2, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8008648:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 800864a:	640a      	str	r2, [r1, #64]	@ 0x40
  tickstart = HAL_GetTick();
 800864c:	f7ff fb8a 	bl	8007d64 <HAL_GetTick>
 8008650:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008652:	e005      	b.n	8008660 <HAL_PWREx_EnableOverDrive+0x38>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008654:	f7ff fb86 	bl	8007d64 <HAL_GetTick>
 8008658:	1b00      	subs	r0, r0, r4
 800865a:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800865e:	d816      	bhi.n	800868e <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008660:	686b      	ldr	r3, [r5, #4]
 8008662:	03da      	lsls	r2, r3, #15
 8008664:	d5f6      	bpl.n	8008654 <HAL_PWREx_EnableOverDrive+0x2c>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008666:	4b0c      	ldr	r3, [pc, #48]	@ (8008698 <HAL_PWREx_EnableOverDrive+0x70>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008668:	4d0c      	ldr	r5, [pc, #48]	@ (800869c <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800866a:	2201      	movs	r2, #1
 800866c:	645a      	str	r2, [r3, #68]	@ 0x44
  tickstart = HAL_GetTick();
 800866e:	f7ff fb79 	bl	8007d64 <HAL_GetTick>
 8008672:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008674:	e005      	b.n	8008682 <HAL_PWREx_EnableOverDrive+0x5a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008676:	f7ff fb75 	bl	8007d64 <HAL_GetTick>
 800867a:	1b00      	subs	r0, r0, r4
 800867c:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8008680:	d805      	bhi.n	800868e <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008682:	686b      	ldr	r3, [r5, #4]
 8008684:	039b      	lsls	r3, r3, #14
 8008686:	d5f6      	bpl.n	8008676 <HAL_PWREx_EnableOverDrive+0x4e>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8008688:	2000      	movs	r0, #0
}
 800868a:	b003      	add	sp, #12
 800868c:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 800868e:	2003      	movs	r0, #3
}
 8008690:	b003      	add	sp, #12
 8008692:	bd30      	pop	{r4, r5, pc}
 8008694:	40023800 	.word	0x40023800
 8008698:	420e0000 	.word	0x420e0000
 800869c:	40007000 	.word	0x40007000

080086a0 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80086a0:	2800      	cmp	r0, #0
 80086a2:	f000 8087 	beq.w	80087b4 <HAL_RCC_ClockConfig+0x114>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80086a6:	4a48      	ldr	r2, [pc, #288]	@ (80087c8 <HAL_RCC_ClockConfig+0x128>)
 80086a8:	6813      	ldr	r3, [r2, #0]
 80086aa:	f003 030f 	and.w	r3, r3, #15
 80086ae:	428b      	cmp	r3, r1
{
 80086b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086b4:	460d      	mov	r5, r1
 80086b6:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80086b8:	d209      	bcs.n	80086ce <HAL_RCC_ClockConfig+0x2e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80086ba:	b2cb      	uxtb	r3, r1
 80086bc:	7013      	strb	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80086be:	6813      	ldr	r3, [r2, #0]
 80086c0:	f003 030f 	and.w	r3, r3, #15
 80086c4:	428b      	cmp	r3, r1
 80086c6:	d002      	beq.n	80086ce <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80086c8:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);

  return HAL_OK;
}
 80086ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80086ce:	6823      	ldr	r3, [r4, #0]
 80086d0:	0798      	lsls	r0, r3, #30
 80086d2:	d514      	bpl.n	80086fe <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80086d4:	0759      	lsls	r1, r3, #29
 80086d6:	d504      	bpl.n	80086e2 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80086d8:	493c      	ldr	r1, [pc, #240]	@ (80087cc <HAL_RCC_ClockConfig+0x12c>)
 80086da:	688a      	ldr	r2, [r1, #8]
 80086dc:	f442 52e0 	orr.w	r2, r2, #7168	@ 0x1c00
 80086e0:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80086e2:	071a      	lsls	r2, r3, #28
 80086e4:	d504      	bpl.n	80086f0 <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80086e6:	4939      	ldr	r1, [pc, #228]	@ (80087cc <HAL_RCC_ClockConfig+0x12c>)
 80086e8:	688a      	ldr	r2, [r1, #8]
 80086ea:	f442 4260 	orr.w	r2, r2, #57344	@ 0xe000
 80086ee:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80086f0:	4936      	ldr	r1, [pc, #216]	@ (80087cc <HAL_RCC_ClockConfig+0x12c>)
 80086f2:	68a0      	ldr	r0, [r4, #8]
 80086f4:	688a      	ldr	r2, [r1, #8]
 80086f6:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80086fa:	4302      	orrs	r2, r0
 80086fc:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80086fe:	07df      	lsls	r7, r3, #31
 8008700:	d521      	bpl.n	8008746 <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008702:	6862      	ldr	r2, [r4, #4]
 8008704:	2a01      	cmp	r2, #1
 8008706:	d057      	beq.n	80087b8 <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008708:	1e93      	subs	r3, r2, #2
 800870a:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800870c:	4b2f      	ldr	r3, [pc, #188]	@ (80087cc <HAL_RCC_ClockConfig+0x12c>)
 800870e:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008710:	d94d      	bls.n	80087ae <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008712:	0799      	lsls	r1, r3, #30
 8008714:	d5d8      	bpl.n	80086c8 <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008716:	4e2d      	ldr	r6, [pc, #180]	@ (80087cc <HAL_RCC_ClockConfig+0x12c>)
 8008718:	68b3      	ldr	r3, [r6, #8]
 800871a:	f023 0303 	bic.w	r3, r3, #3
 800871e:	4313      	orrs	r3, r2
 8008720:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8008722:	f7ff fb1f 	bl	8007d64 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008726:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 800872a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800872c:	e004      	b.n	8008738 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800872e:	f7ff fb19 	bl	8007d64 <HAL_GetTick>
 8008732:	1bc0      	subs	r0, r0, r7
 8008734:	4540      	cmp	r0, r8
 8008736:	d844      	bhi.n	80087c2 <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008738:	68b3      	ldr	r3, [r6, #8]
 800873a:	6862      	ldr	r2, [r4, #4]
 800873c:	f003 030c 	and.w	r3, r3, #12
 8008740:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8008744:	d1f3      	bne.n	800872e <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008746:	4a20      	ldr	r2, [pc, #128]	@ (80087c8 <HAL_RCC_ClockConfig+0x128>)
 8008748:	6813      	ldr	r3, [r2, #0]
 800874a:	f003 030f 	and.w	r3, r3, #15
 800874e:	42ab      	cmp	r3, r5
 8008750:	d906      	bls.n	8008760 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008752:	b2eb      	uxtb	r3, r5
 8008754:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008756:	6813      	ldr	r3, [r2, #0]
 8008758:	f003 030f 	and.w	r3, r3, #15
 800875c:	42ab      	cmp	r3, r5
 800875e:	d1b3      	bne.n	80086c8 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008760:	6823      	ldr	r3, [r4, #0]
 8008762:	075a      	lsls	r2, r3, #29
 8008764:	d506      	bpl.n	8008774 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008766:	4919      	ldr	r1, [pc, #100]	@ (80087cc <HAL_RCC_ClockConfig+0x12c>)
 8008768:	68e0      	ldr	r0, [r4, #12]
 800876a:	688a      	ldr	r2, [r1, #8]
 800876c:	f422 52e0 	bic.w	r2, r2, #7168	@ 0x1c00
 8008770:	4302      	orrs	r2, r0
 8008772:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008774:	071b      	lsls	r3, r3, #28
 8008776:	d507      	bpl.n	8008788 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008778:	4a14      	ldr	r2, [pc, #80]	@ (80087cc <HAL_RCC_ClockConfig+0x12c>)
 800877a:	6921      	ldr	r1, [r4, #16]
 800877c:	6893      	ldr	r3, [r2, #8]
 800877e:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8008782:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8008786:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008788:	f000 f84e 	bl	8008828 <HAL_RCC_GetSysClockFreq>
 800878c:	4a0f      	ldr	r2, [pc, #60]	@ (80087cc <HAL_RCC_ClockConfig+0x12c>)
 800878e:	4c10      	ldr	r4, [pc, #64]	@ (80087d0 <HAL_RCC_ClockConfig+0x130>)
 8008790:	6892      	ldr	r2, [r2, #8]
 8008792:	4910      	ldr	r1, [pc, #64]	@ (80087d4 <HAL_RCC_ClockConfig+0x134>)
 8008794:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8008798:	4603      	mov	r3, r0
 800879a:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 800879c:	480e      	ldr	r0, [pc, #56]	@ (80087d8 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800879e:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 80087a0:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80087a2:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 80087a4:	f7ff fa94 	bl	8007cd0 <HAL_InitTick>
  return HAL_OK;
 80087a8:	2000      	movs	r0, #0
}
 80087aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80087ae:	0198      	lsls	r0, r3, #6
 80087b0:	d4b1      	bmi.n	8008716 <HAL_RCC_ClockConfig+0x76>
 80087b2:	e789      	b.n	80086c8 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 80087b4:	2001      	movs	r0, #1
}
 80087b6:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80087b8:	4b04      	ldr	r3, [pc, #16]	@ (80087cc <HAL_RCC_ClockConfig+0x12c>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	039e      	lsls	r6, r3, #14
 80087be:	d4aa      	bmi.n	8008716 <HAL_RCC_ClockConfig+0x76>
 80087c0:	e782      	b.n	80086c8 <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 80087c2:	2003      	movs	r0, #3
 80087c4:	e781      	b.n	80086ca <HAL_RCC_ClockConfig+0x2a>
 80087c6:	bf00      	nop
 80087c8:	40023c00 	.word	0x40023c00
 80087cc:	40023800 	.word	0x40023800
 80087d0:	0800b7a4 	.word	0x0800b7a4
 80087d4:	20000b60 	.word	0x20000b60
 80087d8:	20000b68 	.word	0x20000b68

080087dc <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 80087dc:	4b01      	ldr	r3, [pc, #4]	@ (80087e4 <HAL_RCC_GetHCLKFreq+0x8>)
}
 80087de:	6818      	ldr	r0, [r3, #0]
 80087e0:	4770      	bx	lr
 80087e2:	bf00      	nop
 80087e4:	20000b60 	.word	0x20000b60

080087e8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80087e8:	4b04      	ldr	r3, [pc, #16]	@ (80087fc <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 80087ea:	4905      	ldr	r1, [pc, #20]	@ (8008800 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80087ec:	689b      	ldr	r3, [r3, #8]
 80087ee:	4a05      	ldr	r2, [pc, #20]	@ (8008804 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80087f0:	6808      	ldr	r0, [r1, #0]
 80087f2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80087f6:	5cd3      	ldrb	r3, [r2, r3]
}
 80087f8:	40d8      	lsrs	r0, r3
 80087fa:	4770      	bx	lr
 80087fc:	40023800 	.word	0x40023800
 8008800:	20000b60 	.word	0x20000b60
 8008804:	0800b79c 	.word	0x0800b79c

08008808 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008808:	4b04      	ldr	r3, [pc, #16]	@ (800881c <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 800880a:	4905      	ldr	r1, [pc, #20]	@ (8008820 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800880c:	689b      	ldr	r3, [r3, #8]
 800880e:	4a05      	ldr	r2, [pc, #20]	@ (8008824 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8008810:	6808      	ldr	r0, [r1, #0]
 8008812:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8008816:	5cd3      	ldrb	r3, [r2, r3]
}
 8008818:	40d8      	lsrs	r0, r3
 800881a:	4770      	bx	lr
 800881c:	40023800 	.word	0x40023800
 8008820:	20000b60 	.word	0x20000b60
 8008824:	0800b79c 	.word	0x0800b79c

08008828 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008828:	4927      	ldr	r1, [pc, #156]	@ (80088c8 <HAL_RCC_GetSysClockFreq+0xa0>)
{
 800882a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800882c:	688b      	ldr	r3, [r1, #8]
 800882e:	f003 030c 	and.w	r3, r3, #12
 8008832:	2b08      	cmp	r3, #8
 8008834:	d007      	beq.n	8008846 <HAL_RCC_GetSysClockFreq+0x1e>
 8008836:	2b0c      	cmp	r3, #12
 8008838:	d01d      	beq.n	8008876 <HAL_RCC_GetSysClockFreq+0x4e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800883a:	4a24      	ldr	r2, [pc, #144]	@ (80088cc <HAL_RCC_GetSysClockFreq+0xa4>)
 800883c:	4824      	ldr	r0, [pc, #144]	@ (80088d0 <HAL_RCC_GetSysClockFreq+0xa8>)
 800883e:	2b04      	cmp	r3, #4
 8008840:	bf18      	it	ne
 8008842:	4610      	movne	r0, r2
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8008844:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008846:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008848:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800884a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800884c:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008850:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008854:	d12e      	bne.n	80088b4 <HAL_RCC_GetSysClockFreq+0x8c>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008856:	481d      	ldr	r0, [pc, #116]	@ (80088cc <HAL_RCC_GetSysClockFreq+0xa4>)
 8008858:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800885c:	fba1 0100 	umull	r0, r1, r1, r0
 8008860:	f7fb f91e 	bl	8003aa0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008864:	4b18      	ldr	r3, [pc, #96]	@ (80088c8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8008866:	685b      	ldr	r3, [r3, #4]
 8008868:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800886c:	3301      	adds	r3, #1
 800886e:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8008870:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8008874:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008876:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008878:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800887a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800887c:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008880:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008884:	d10d      	bne.n	80088a2 <HAL_RCC_GetSysClockFreq+0x7a>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008886:	4811      	ldr	r0, [pc, #68]	@ (80088cc <HAL_RCC_GetSysClockFreq+0xa4>)
 8008888:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800888c:	fba1 0100 	umull	r0, r1, r1, r0
 8008890:	f7fb f906 	bl	8003aa0 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8008894:	4b0c      	ldr	r3, [pc, #48]	@ (80088c8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8008896:	685b      	ldr	r3, [r3, #4]
 8008898:	f3c3 7302 	ubfx	r3, r3, #28, #3
      sysclockfreq = pllvco/pllr;
 800889c:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80088a0:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80088a2:	480b      	ldr	r0, [pc, #44]	@ (80088d0 <HAL_RCC_GetSysClockFreq+0xa8>)
 80088a4:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80088a8:	2300      	movs	r3, #0
 80088aa:	fba1 0100 	umull	r0, r1, r1, r0
 80088ae:	f7fb f8f7 	bl	8003aa0 <__aeabi_uldivmod>
 80088b2:	e7ef      	b.n	8008894 <HAL_RCC_GetSysClockFreq+0x6c>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80088b4:	4806      	ldr	r0, [pc, #24]	@ (80088d0 <HAL_RCC_GetSysClockFreq+0xa8>)
 80088b6:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80088ba:	2300      	movs	r3, #0
 80088bc:	fba1 0100 	umull	r0, r1, r1, r0
 80088c0:	f7fb f8ee 	bl	8003aa0 <__aeabi_uldivmod>
 80088c4:	e7ce      	b.n	8008864 <HAL_RCC_GetSysClockFreq+0x3c>
 80088c6:	bf00      	nop
 80088c8:	40023800 	.word	0x40023800
 80088cc:	00f42400 	.word	0x00f42400
 80088d0:	007a1200 	.word	0x007a1200

080088d4 <HAL_RCC_OscConfig>:
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80088d4:	2800      	cmp	r0, #0
 80088d6:	f000 81fb 	beq.w	8008cd0 <HAL_RCC_OscConfig+0x3fc>
{
 80088da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80088de:	6803      	ldr	r3, [r0, #0]
 80088e0:	07de      	lsls	r6, r3, #31
{
 80088e2:	b082      	sub	sp, #8
 80088e4:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80088e6:	d536      	bpl.n	8008956 <HAL_RCC_OscConfig+0x82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80088e8:	49a1      	ldr	r1, [pc, #644]	@ (8008b70 <HAL_RCC_OscConfig+0x29c>)
 80088ea:	688a      	ldr	r2, [r1, #8]
 80088ec:	f002 020c 	and.w	r2, r2, #12
 80088f0:	2a04      	cmp	r2, #4
 80088f2:	f000 80de 	beq.w	8008ab2 <HAL_RCC_OscConfig+0x1de>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80088f6:	688a      	ldr	r2, [r1, #8]
 80088f8:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80088fc:	2a08      	cmp	r2, #8
 80088fe:	f000 80d4 	beq.w	8008aaa <HAL_RCC_OscConfig+0x1d6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008902:	499b      	ldr	r1, [pc, #620]	@ (8008b70 <HAL_RCC_OscConfig+0x29c>)
 8008904:	688a      	ldr	r2, [r1, #8]
 8008906:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800890a:	2a0c      	cmp	r2, #12
 800890c:	f000 8104 	beq.w	8008b18 <HAL_RCC_OscConfig+0x244>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008910:	6863      	ldr	r3, [r4, #4]
 8008912:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008916:	f000 8118 	beq.w	8008b4a <HAL_RCC_OscConfig+0x276>
 800891a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800891e:	f000 8192 	beq.w	8008c46 <HAL_RCC_OscConfig+0x372>
 8008922:	4d93      	ldr	r5, [pc, #588]	@ (8008b70 <HAL_RCC_OscConfig+0x29c>)
 8008924:	682a      	ldr	r2, [r5, #0]
 8008926:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800892a:	602a      	str	r2, [r5, #0]
 800892c:	682a      	ldr	r2, [r5, #0]
 800892e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008932:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008934:	2b00      	cmp	r3, #0
 8008936:	f040 810d 	bne.w	8008b54 <HAL_RCC_OscConfig+0x280>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800893a:	f7ff fa13 	bl	8007d64 <HAL_GetTick>
 800893e:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008940:	e005      	b.n	800894e <HAL_RCC_OscConfig+0x7a>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008942:	f7ff fa0f 	bl	8007d64 <HAL_GetTick>
 8008946:	1b80      	subs	r0, r0, r6
 8008948:	2864      	cmp	r0, #100	@ 0x64
 800894a:	f200 80fa 	bhi.w	8008b42 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800894e:	682b      	ldr	r3, [r5, #0]
 8008950:	039f      	lsls	r7, r3, #14
 8008952:	d4f6      	bmi.n	8008942 <HAL_RCC_OscConfig+0x6e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008954:	6823      	ldr	r3, [r4, #0]
 8008956:	079d      	lsls	r5, r3, #30
 8008958:	d52f      	bpl.n	80089ba <HAL_RCC_OscConfig+0xe6>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800895a:	4a85      	ldr	r2, [pc, #532]	@ (8008b70 <HAL_RCC_OscConfig+0x29c>)
 800895c:	6891      	ldr	r1, [r2, #8]
 800895e:	f011 0f0c 	tst.w	r1, #12
 8008962:	f000 8099 	beq.w	8008a98 <HAL_RCC_OscConfig+0x1c4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008966:	6891      	ldr	r1, [r2, #8]
 8008968:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800896c:	2908      	cmp	r1, #8
 800896e:	f000 808f 	beq.w	8008a90 <HAL_RCC_OscConfig+0x1bc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008972:	497f      	ldr	r1, [pc, #508]	@ (8008b70 <HAL_RCC_OscConfig+0x29c>)
 8008974:	688a      	ldr	r2, [r1, #8]
 8008976:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800897a:	2a0c      	cmp	r2, #12
 800897c:	f000 815e 	beq.w	8008c3c <HAL_RCC_OscConfig+0x368>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008980:	68e3      	ldr	r3, [r4, #12]
 8008982:	2b00      	cmp	r3, #0
 8008984:	f000 8112 	beq.w	8008bac <HAL_RCC_OscConfig+0x2d8>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008988:	4b7a      	ldr	r3, [pc, #488]	@ (8008b74 <HAL_RCC_OscConfig+0x2a0>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800898a:	4e79      	ldr	r6, [pc, #484]	@ (8008b70 <HAL_RCC_OscConfig+0x29c>)
        __HAL_RCC_HSI_ENABLE();
 800898c:	2201      	movs	r2, #1
 800898e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008990:	f7ff f9e8 	bl	8007d64 <HAL_GetTick>
 8008994:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008996:	e005      	b.n	80089a4 <HAL_RCC_OscConfig+0xd0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008998:	f7ff f9e4 	bl	8007d64 <HAL_GetTick>
 800899c:	1b40      	subs	r0, r0, r5
 800899e:	2802      	cmp	r0, #2
 80089a0:	f200 80cf 	bhi.w	8008b42 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80089a4:	6833      	ldr	r3, [r6, #0]
 80089a6:	079f      	lsls	r7, r3, #30
 80089a8:	d5f6      	bpl.n	8008998 <HAL_RCC_OscConfig+0xc4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80089aa:	6833      	ldr	r3, [r6, #0]
 80089ac:	6922      	ldr	r2, [r4, #16]
 80089ae:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80089b2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80089b6:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80089b8:	6823      	ldr	r3, [r4, #0]
 80089ba:	071a      	lsls	r2, r3, #28
 80089bc:	d452      	bmi.n	8008a64 <HAL_RCC_OscConfig+0x190>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80089be:	075d      	lsls	r5, r3, #29
 80089c0:	d530      	bpl.n	8008a24 <HAL_RCC_OscConfig+0x150>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80089c2:	4a6b      	ldr	r2, [pc, #428]	@ (8008b70 <HAL_RCC_OscConfig+0x29c>)
 80089c4:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80089c6:	f013 5380 	ands.w	r3, r3, #268435456	@ 0x10000000
 80089ca:	f000 8099 	beq.w	8008b00 <HAL_RCC_OscConfig+0x22c>
    FlagStatus       pwrclkchanged = RESET;
 80089ce:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80089d0:	4e69      	ldr	r6, [pc, #420]	@ (8008b78 <HAL_RCC_OscConfig+0x2a4>)
 80089d2:	6833      	ldr	r3, [r6, #0]
 80089d4:	05d8      	lsls	r0, r3, #23
 80089d6:	f140 80a4 	bpl.w	8008b22 <HAL_RCC_OscConfig+0x24e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80089da:	68a3      	ldr	r3, [r4, #8]
 80089dc:	2b01      	cmp	r3, #1
 80089de:	f000 80cd 	beq.w	8008b7c <HAL_RCC_OscConfig+0x2a8>
 80089e2:	2b05      	cmp	r3, #5
 80089e4:	f000 8139 	beq.w	8008c5a <HAL_RCC_OscConfig+0x386>
 80089e8:	4e61      	ldr	r6, [pc, #388]	@ (8008b70 <HAL_RCC_OscConfig+0x29c>)
 80089ea:	6f32      	ldr	r2, [r6, #112]	@ 0x70
 80089ec:	f022 0201 	bic.w	r2, r2, #1
 80089f0:	6732      	str	r2, [r6, #112]	@ 0x70
 80089f2:	6f32      	ldr	r2, [r6, #112]	@ 0x70
 80089f4:	f022 0204 	bic.w	r2, r2, #4
 80089f8:	6732      	str	r2, [r6, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	f040 80c3 	bne.w	8008b86 <HAL_RCC_OscConfig+0x2b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a00:	f7ff f9b0 	bl	8007d64 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008a04:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8008a08:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008a0a:	e005      	b.n	8008a18 <HAL_RCC_OscConfig+0x144>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008a0c:	f7ff f9aa 	bl	8007d64 <HAL_GetTick>
 8008a10:	1bc0      	subs	r0, r0, r7
 8008a12:	4540      	cmp	r0, r8
 8008a14:	f200 8095 	bhi.w	8008b42 <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008a18:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8008a1a:	079b      	lsls	r3, r3, #30
 8008a1c:	d4f6      	bmi.n	8008a0c <HAL_RCC_OscConfig+0x138>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008a1e:	2d00      	cmp	r5, #0
 8008a20:	f040 8106 	bne.w	8008c30 <HAL_RCC_OscConfig+0x35c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008a24:	69a3      	ldr	r3, [r4, #24]
 8008a26:	b1cb      	cbz	r3, 8008a5c <HAL_RCC_OscConfig+0x188>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008a28:	4d51      	ldr	r5, [pc, #324]	@ (8008b70 <HAL_RCC_OscConfig+0x29c>)
 8008a2a:	68aa      	ldr	r2, [r5, #8]
 8008a2c:	f002 020c 	and.w	r2, r2, #12
 8008a30:	2a08      	cmp	r2, #8
 8008a32:	f000 80cc 	beq.w	8008bce <HAL_RCC_OscConfig+0x2fa>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008a36:	2b02      	cmp	r3, #2
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a38:	4b4e      	ldr	r3, [pc, #312]	@ (8008b74 <HAL_RCC_OscConfig+0x2a0>)
 8008a3a:	f04f 0200 	mov.w	r2, #0
 8008a3e:	661a      	str	r2, [r3, #96]	@ 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008a40:	f000 8115 	beq.w	8008c6e <HAL_RCC_OscConfig+0x39a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a44:	f7ff f98e 	bl	8007d64 <HAL_GetTick>
 8008a48:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a4a:	e004      	b.n	8008a56 <HAL_RCC_OscConfig+0x182>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a4c:	f7ff f98a 	bl	8007d64 <HAL_GetTick>
 8008a50:	1b00      	subs	r0, r0, r4
 8008a52:	2802      	cmp	r0, #2
 8008a54:	d875      	bhi.n	8008b42 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a56:	682b      	ldr	r3, [r5, #0]
 8008a58:	019b      	lsls	r3, r3, #6
 8008a5a:	d4f7      	bmi.n	8008a4c <HAL_RCC_OscConfig+0x178>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8008a5c:	2000      	movs	r0, #0
}
 8008a5e:	b002      	add	sp, #8
 8008a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008a64:	6963      	ldr	r3, [r4, #20]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d02d      	beq.n	8008ac6 <HAL_RCC_OscConfig+0x1f2>
      __HAL_RCC_LSI_ENABLE();
 8008a6a:	4b42      	ldr	r3, [pc, #264]	@ (8008b74 <HAL_RCC_OscConfig+0x2a0>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008a6c:	4e40      	ldr	r6, [pc, #256]	@ (8008b70 <HAL_RCC_OscConfig+0x29c>)
      __HAL_RCC_LSI_ENABLE();
 8008a6e:	2201      	movs	r2, #1
 8008a70:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 8008a74:	f7ff f976 	bl	8007d64 <HAL_GetTick>
 8008a78:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008a7a:	e004      	b.n	8008a86 <HAL_RCC_OscConfig+0x1b2>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008a7c:	f7ff f972 	bl	8007d64 <HAL_GetTick>
 8008a80:	1b40      	subs	r0, r0, r5
 8008a82:	2802      	cmp	r0, #2
 8008a84:	d85d      	bhi.n	8008b42 <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008a86:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8008a88:	079b      	lsls	r3, r3, #30
 8008a8a:	d5f7      	bpl.n	8008a7c <HAL_RCC_OscConfig+0x1a8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008a8c:	6823      	ldr	r3, [r4, #0]
 8008a8e:	e796      	b.n	80089be <HAL_RCC_OscConfig+0xea>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008a90:	6852      	ldr	r2, [r2, #4]
 8008a92:	0250      	lsls	r0, r2, #9
 8008a94:	f53f af6d 	bmi.w	8008972 <HAL_RCC_OscConfig+0x9e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008a98:	4a35      	ldr	r2, [pc, #212]	@ (8008b70 <HAL_RCC_OscConfig+0x29c>)
 8008a9a:	6812      	ldr	r2, [r2, #0]
 8008a9c:	0792      	lsls	r2, r2, #30
 8008a9e:	d523      	bpl.n	8008ae8 <HAL_RCC_OscConfig+0x214>
 8008aa0:	68e2      	ldr	r2, [r4, #12]
 8008aa2:	2a01      	cmp	r2, #1
 8008aa4:	d020      	beq.n	8008ae8 <HAL_RCC_OscConfig+0x214>
    return HAL_ERROR;
 8008aa6:	2001      	movs	r0, #1
 8008aa8:	e7d9      	b.n	8008a5e <HAL_RCC_OscConfig+0x18a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008aaa:	684a      	ldr	r2, [r1, #4]
 8008aac:	0255      	lsls	r5, r2, #9
 8008aae:	f57f af28 	bpl.w	8008902 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008ab2:	4a2f      	ldr	r2, [pc, #188]	@ (8008b70 <HAL_RCC_OscConfig+0x29c>)
 8008ab4:	6812      	ldr	r2, [r2, #0]
 8008ab6:	0392      	lsls	r2, r2, #14
 8008ab8:	f57f af4d 	bpl.w	8008956 <HAL_RCC_OscConfig+0x82>
 8008abc:	6862      	ldr	r2, [r4, #4]
 8008abe:	2a00      	cmp	r2, #0
 8008ac0:	f47f af49 	bne.w	8008956 <HAL_RCC_OscConfig+0x82>
 8008ac4:	e7ef      	b.n	8008aa6 <HAL_RCC_OscConfig+0x1d2>
      __HAL_RCC_LSI_DISABLE();
 8008ac6:	4a2b      	ldr	r2, [pc, #172]	@ (8008b74 <HAL_RCC_OscConfig+0x2a0>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008ac8:	4e29      	ldr	r6, [pc, #164]	@ (8008b70 <HAL_RCC_OscConfig+0x29c>)
      __HAL_RCC_LSI_DISABLE();
 8008aca:	f8c2 3e80 	str.w	r3, [r2, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 8008ace:	f7ff f949 	bl	8007d64 <HAL_GetTick>
 8008ad2:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008ad4:	e004      	b.n	8008ae0 <HAL_RCC_OscConfig+0x20c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008ad6:	f7ff f945 	bl	8007d64 <HAL_GetTick>
 8008ada:	1b40      	subs	r0, r0, r5
 8008adc:	2802      	cmp	r0, #2
 8008ade:	d830      	bhi.n	8008b42 <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008ae0:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8008ae2:	079f      	lsls	r7, r3, #30
 8008ae4:	d4f7      	bmi.n	8008ad6 <HAL_RCC_OscConfig+0x202>
 8008ae6:	e7d1      	b.n	8008a8c <HAL_RCC_OscConfig+0x1b8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008ae8:	4921      	ldr	r1, [pc, #132]	@ (8008b70 <HAL_RCC_OscConfig+0x29c>)
 8008aea:	6920      	ldr	r0, [r4, #16]
 8008aec:	680a      	ldr	r2, [r1, #0]
 8008aee:	f022 02f8 	bic.w	r2, r2, #248	@ 0xf8
 8008af2:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8008af6:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008af8:	071a      	lsls	r2, r3, #28
 8008afa:	f57f af60 	bpl.w	80089be <HAL_RCC_OscConfig+0xea>
 8008afe:	e7b1      	b.n	8008a64 <HAL_RCC_OscConfig+0x190>
      __HAL_RCC_PWR_CLK_ENABLE();
 8008b00:	9301      	str	r3, [sp, #4]
 8008b02:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8008b04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008b08:	6413      	str	r3, [r2, #64]	@ 0x40
 8008b0a:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8008b0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008b10:	9301      	str	r3, [sp, #4]
 8008b12:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8008b14:	2501      	movs	r5, #1
 8008b16:	e75b      	b.n	80089d0 <HAL_RCC_OscConfig+0xfc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008b18:	684a      	ldr	r2, [r1, #4]
 8008b1a:	0251      	lsls	r1, r2, #9
 8008b1c:	f57f aef8 	bpl.w	8008910 <HAL_RCC_OscConfig+0x3c>
 8008b20:	e7c7      	b.n	8008ab2 <HAL_RCC_OscConfig+0x1de>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008b22:	6833      	ldr	r3, [r6, #0]
 8008b24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008b28:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8008b2a:	f7ff f91b 	bl	8007d64 <HAL_GetTick>
 8008b2e:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008b30:	6833      	ldr	r3, [r6, #0]
 8008b32:	05d9      	lsls	r1, r3, #23
 8008b34:	f53f af51 	bmi.w	80089da <HAL_RCC_OscConfig+0x106>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008b38:	f7ff f914 	bl	8007d64 <HAL_GetTick>
 8008b3c:	1bc0      	subs	r0, r0, r7
 8008b3e:	2802      	cmp	r0, #2
 8008b40:	d9f6      	bls.n	8008b30 <HAL_RCC_OscConfig+0x25c>
            return HAL_TIMEOUT;
 8008b42:	2003      	movs	r0, #3
}
 8008b44:	b002      	add	sp, #8
 8008b46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008b4a:	4a09      	ldr	r2, [pc, #36]	@ (8008b70 <HAL_RCC_OscConfig+0x29c>)
 8008b4c:	6813      	ldr	r3, [r2, #0]
 8008b4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008b52:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8008b54:	f7ff f906 	bl	8007d64 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008b58:	4e05      	ldr	r6, [pc, #20]	@ (8008b70 <HAL_RCC_OscConfig+0x29c>)
        tickstart = HAL_GetTick();
 8008b5a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008b5c:	e004      	b.n	8008b68 <HAL_RCC_OscConfig+0x294>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008b5e:	f7ff f901 	bl	8007d64 <HAL_GetTick>
 8008b62:	1b40      	subs	r0, r0, r5
 8008b64:	2864      	cmp	r0, #100	@ 0x64
 8008b66:	d8ec      	bhi.n	8008b42 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008b68:	6833      	ldr	r3, [r6, #0]
 8008b6a:	039b      	lsls	r3, r3, #14
 8008b6c:	d5f7      	bpl.n	8008b5e <HAL_RCC_OscConfig+0x28a>
 8008b6e:	e6f1      	b.n	8008954 <HAL_RCC_OscConfig+0x80>
 8008b70:	40023800 	.word	0x40023800
 8008b74:	42470000 	.word	0x42470000
 8008b78:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008b7c:	4a55      	ldr	r2, [pc, #340]	@ (8008cd4 <HAL_RCC_OscConfig+0x400>)
 8008b7e:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8008b80:	f043 0301 	orr.w	r3, r3, #1
 8008b84:	6713      	str	r3, [r2, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8008b86:	f7ff f8ed 	bl	8007d64 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b8a:	4f52      	ldr	r7, [pc, #328]	@ (8008cd4 <HAL_RCC_OscConfig+0x400>)
      tickstart = HAL_GetTick();
 8008b8c:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008b8e:	f241 3888 	movw	r8, #5000	@ 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b92:	e004      	b.n	8008b9e <HAL_RCC_OscConfig+0x2ca>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008b94:	f7ff f8e6 	bl	8007d64 <HAL_GetTick>
 8008b98:	1b80      	subs	r0, r0, r6
 8008b9a:	4540      	cmp	r0, r8
 8008b9c:	d8d1      	bhi.n	8008b42 <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b9e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008ba0:	079a      	lsls	r2, r3, #30
 8008ba2:	d5f7      	bpl.n	8008b94 <HAL_RCC_OscConfig+0x2c0>
    if(pwrclkchanged == SET)
 8008ba4:	2d00      	cmp	r5, #0
 8008ba6:	f43f af3d 	beq.w	8008a24 <HAL_RCC_OscConfig+0x150>
 8008baa:	e041      	b.n	8008c30 <HAL_RCC_OscConfig+0x35c>
        __HAL_RCC_HSI_DISABLE();
 8008bac:	4a4a      	ldr	r2, [pc, #296]	@ (8008cd8 <HAL_RCC_OscConfig+0x404>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008bae:	4e49      	ldr	r6, [pc, #292]	@ (8008cd4 <HAL_RCC_OscConfig+0x400>)
        __HAL_RCC_HSI_DISABLE();
 8008bb0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8008bb2:	f7ff f8d7 	bl	8007d64 <HAL_GetTick>
 8008bb6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008bb8:	e004      	b.n	8008bc4 <HAL_RCC_OscConfig+0x2f0>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008bba:	f7ff f8d3 	bl	8007d64 <HAL_GetTick>
 8008bbe:	1b40      	subs	r0, r0, r5
 8008bc0:	2802      	cmp	r0, #2
 8008bc2:	d8be      	bhi.n	8008b42 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008bc4:	6833      	ldr	r3, [r6, #0]
 8008bc6:	0799      	lsls	r1, r3, #30
 8008bc8:	d4f7      	bmi.n	8008bba <HAL_RCC_OscConfig+0x2e6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008bca:	6823      	ldr	r3, [r4, #0]
 8008bcc:	e6f5      	b.n	80089ba <HAL_RCC_OscConfig+0xe6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008bce:	2b01      	cmp	r3, #1
 8008bd0:	f43f af69 	beq.w	8008aa6 <HAL_RCC_OscConfig+0x1d2>
        pll_config = RCC->PLLCFGR;
 8008bd4:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008bd6:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008bd8:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008bdc:	4291      	cmp	r1, r2
 8008bde:	f47f af62 	bne.w	8008aa6 <HAL_RCC_OscConfig+0x1d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008be2:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008be4:	f003 013f 	and.w	r1, r3, #63	@ 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008be8:	4291      	cmp	r1, r2
 8008bea:	f47f af5c 	bne.w	8008aa6 <HAL_RCC_OscConfig+0x1d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008bee:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8008bf0:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8008bf4:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008bf6:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8008bfa:	f47f af54 	bne.w	8008aa6 <HAL_RCC_OscConfig+0x1d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008bfe:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8008c00:	0852      	lsrs	r2, r2, #1
 8008c02:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8008c06:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008c08:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8008c0c:	f47f af4b 	bne.w	8008aa6 <HAL_RCC_OscConfig+0x1d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008c10:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008c12:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008c16:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 8008c1a:	f47f af44 	bne.w	8008aa6 <HAL_RCC_OscConfig+0x1d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8008c1e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8008c20:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008c24:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 8008c28:	bf14      	ite	ne
 8008c2a:	2001      	movne	r0, #1
 8008c2c:	2000      	moveq	r0, #0
 8008c2e:	e716      	b.n	8008a5e <HAL_RCC_OscConfig+0x18a>
      __HAL_RCC_PWR_CLK_DISABLE();
 8008c30:	4a28      	ldr	r2, [pc, #160]	@ (8008cd4 <HAL_RCC_OscConfig+0x400>)
 8008c32:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8008c34:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008c38:	6413      	str	r3, [r2, #64]	@ 0x40
 8008c3a:	e6f3      	b.n	8008a24 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008c3c:	684a      	ldr	r2, [r1, #4]
 8008c3e:	0251      	lsls	r1, r2, #9
 8008c40:	f53f ae9e 	bmi.w	8008980 <HAL_RCC_OscConfig+0xac>
 8008c44:	e728      	b.n	8008a98 <HAL_RCC_OscConfig+0x1c4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008c46:	4b23      	ldr	r3, [pc, #140]	@ (8008cd4 <HAL_RCC_OscConfig+0x400>)
 8008c48:	681a      	ldr	r2, [r3, #0]
 8008c4a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8008c4e:	601a      	str	r2, [r3, #0]
 8008c50:	681a      	ldr	r2, [r3, #0]
 8008c52:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8008c56:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008c58:	e77c      	b.n	8008b54 <HAL_RCC_OscConfig+0x280>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008c5a:	4b1e      	ldr	r3, [pc, #120]	@ (8008cd4 <HAL_RCC_OscConfig+0x400>)
 8008c5c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008c5e:	f042 0204 	orr.w	r2, r2, #4
 8008c62:	671a      	str	r2, [r3, #112]	@ 0x70
 8008c64:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008c66:	f042 0201 	orr.w	r2, r2, #1
 8008c6a:	671a      	str	r2, [r3, #112]	@ 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008c6c:	e78b      	b.n	8008b86 <HAL_RCC_OscConfig+0x2b2>
        tickstart = HAL_GetTick();
 8008c6e:	f7ff f879 	bl	8007d64 <HAL_GetTick>
 8008c72:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008c74:	e005      	b.n	8008c82 <HAL_RCC_OscConfig+0x3ae>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008c76:	f7ff f875 	bl	8007d64 <HAL_GetTick>
 8008c7a:	1b80      	subs	r0, r0, r6
 8008c7c:	2802      	cmp	r0, #2
 8008c7e:	f63f af60 	bhi.w	8008b42 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008c82:	682b      	ldr	r3, [r5, #0]
 8008c84:	0199      	lsls	r1, r3, #6
 8008c86:	d4f6      	bmi.n	8008c76 <HAL_RCC_OscConfig+0x3a2>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008c88:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8008c8c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008c8e:	430b      	orrs	r3, r1
 8008c90:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8008c94:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	@ 0x28
 8008c98:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008c9a:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8008c9e:	0852      	lsrs	r2, r2, #1
 8008ca0:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8008ca4:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8008ca6:	490c      	ldr	r1, [pc, #48]	@ (8008cd8 <HAL_RCC_OscConfig+0x404>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008ca8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8008cac:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008cae:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8008cb0:	660a      	str	r2, [r1, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8008cb2:	f7ff f857 	bl	8007d64 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008cb6:	4d07      	ldr	r5, [pc, #28]	@ (8008cd4 <HAL_RCC_OscConfig+0x400>)
        tickstart = HAL_GetTick();
 8008cb8:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008cba:	e005      	b.n	8008cc8 <HAL_RCC_OscConfig+0x3f4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008cbc:	f7ff f852 	bl	8007d64 <HAL_GetTick>
 8008cc0:	1b00      	subs	r0, r0, r4
 8008cc2:	2802      	cmp	r0, #2
 8008cc4:	f63f af3d 	bhi.w	8008b42 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008cc8:	682b      	ldr	r3, [r5, #0]
 8008cca:	019a      	lsls	r2, r3, #6
 8008ccc:	d5f6      	bpl.n	8008cbc <HAL_RCC_OscConfig+0x3e8>
 8008cce:	e6c5      	b.n	8008a5c <HAL_RCC_OscConfig+0x188>
    return HAL_ERROR;
 8008cd0:	2001      	movs	r0, #1
}
 8008cd2:	4770      	bx	lr
 8008cd4:	40023800 	.word	0x40023800
 8008cd8:	42470000 	.word	0x42470000

08008cdc <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008cdc:	2800      	cmp	r0, #0
 8008cde:	f000 808f 	beq.w	8008e00 <HAL_TIM_Base_Init+0x124>
{
 8008ce2:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ce4:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8008ce8:	4604      	mov	r4, r0
 8008cea:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	f000 8081 	beq.w	8008df6 <HAL_TIM_Base_Init+0x11a>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008cf4:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008cf6:	4943      	ldr	r1, [pc, #268]	@ (8008e04 <HAL_TIM_Base_Init+0x128>)
  htim->State = HAL_TIM_STATE_BUSY;
 8008cf8:	2302      	movs	r3, #2
 8008cfa:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008cfe:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8008d00:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008d02:	d064      	beq.n	8008dce <HAL_TIM_Base_Init+0xf2>
 8008d04:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8008d08:	d030      	beq.n	8008d6c <HAL_TIM_Base_Init+0x90>
 8008d0a:	f5a1 417c 	sub.w	r1, r1, #64512	@ 0xfc00
 8008d0e:	428a      	cmp	r2, r1
 8008d10:	d02c      	beq.n	8008d6c <HAL_TIM_Base_Init+0x90>
 8008d12:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8008d16:	428a      	cmp	r2, r1
 8008d18:	d028      	beq.n	8008d6c <HAL_TIM_Base_Init+0x90>
 8008d1a:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8008d1e:	428a      	cmp	r2, r1
 8008d20:	d024      	beq.n	8008d6c <HAL_TIM_Base_Init+0x90>
 8008d22:	f501 4178 	add.w	r1, r1, #63488	@ 0xf800
 8008d26:	428a      	cmp	r2, r1
 8008d28:	d051      	beq.n	8008dce <HAL_TIM_Base_Init+0xf2>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008d2a:	f501 5170 	add.w	r1, r1, #15360	@ 0x3c00
 8008d2e:	428a      	cmp	r2, r1
 8008d30:	d020      	beq.n	8008d74 <HAL_TIM_Base_Init+0x98>
 8008d32:	4935      	ldr	r1, [pc, #212]	@ (8008e08 <HAL_TIM_Base_Init+0x12c>)
 8008d34:	428a      	cmp	r2, r1
 8008d36:	d01d      	beq.n	8008d74 <HAL_TIM_Base_Init+0x98>
 8008d38:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8008d3c:	428a      	cmp	r2, r1
 8008d3e:	d019      	beq.n	8008d74 <HAL_TIM_Base_Init+0x98>
 8008d40:	f5a1 3198 	sub.w	r1, r1, #77824	@ 0x13000
 8008d44:	428a      	cmp	r2, r1
 8008d46:	d015      	beq.n	8008d74 <HAL_TIM_Base_Init+0x98>
 8008d48:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8008d4c:	428a      	cmp	r2, r1
 8008d4e:	d011      	beq.n	8008d74 <HAL_TIM_Base_Init+0x98>
 8008d50:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8008d54:	428a      	cmp	r2, r1
 8008d56:	d00d      	beq.n	8008d74 <HAL_TIM_Base_Init+0x98>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008d58:	69a5      	ldr	r5, [r4, #24]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008d5a:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008d5c:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008d5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008d62:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8008d64:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008d66:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008d68:	6291      	str	r1, [r2, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008d6a:	e010      	b.n	8008d8e <HAL_TIM_Base_Init+0xb2>
    tmpcr1 |= Structure->CounterMode;
 8008d6c:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008d6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8008d72:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008d74:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008d76:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8008d78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008d7c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008d7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008d82:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008d84:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8008d86:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8008d88:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008d8a:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008d8c:	6291      	str	r1, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008d8e:	2301      	movs	r3, #1
 8008d90:	6153      	str	r3, [r2, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008d92:	6913      	ldr	r3, [r2, #16]
 8008d94:	07db      	lsls	r3, r3, #31
 8008d96:	d503      	bpl.n	8008da0 <HAL_TIM_Base_Init+0xc4>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008d98:	6913      	ldr	r3, [r2, #16]
 8008d9a:	f023 0301 	bic.w	r3, r3, #1
 8008d9e:	6113      	str	r3, [r2, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008da0:	2301      	movs	r3, #1
 8008da2:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008da6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8008daa:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8008dae:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8008db2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008db6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008dba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008dbe:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8008dc2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8008dc6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8008dca:	2000      	movs	r0, #0
}
 8008dcc:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8008dce:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008dd0:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008dd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8008dd6:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8008dd8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008ddc:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008dde:	69a1      	ldr	r1, [r4, #24]
 8008de0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008de4:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8008de6:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008de8:	68e3      	ldr	r3, [r4, #12]
 8008dea:	62d3      	str	r3, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008dec:	6863      	ldr	r3, [r4, #4]
 8008dee:	6293      	str	r3, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8008df0:	6963      	ldr	r3, [r4, #20]
 8008df2:	6313      	str	r3, [r2, #48]	@ 0x30
 8008df4:	e7cb      	b.n	8008d8e <HAL_TIM_Base_Init+0xb2>
    htim->Lock = HAL_UNLOCKED;
 8008df6:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8008dfa:	f7fe fcd9 	bl	80077b0 <HAL_TIM_Base_MspInit>
 8008dfe:	e779      	b.n	8008cf4 <HAL_TIM_Base_Init+0x18>
    return HAL_ERROR;
 8008e00:	2001      	movs	r0, #1
}
 8008e02:	4770      	bx	lr
 8008e04:	40010000 	.word	0x40010000
 8008e08:	40014400 	.word	0x40014400

08008e0c <HAL_TIM_PWM_MspInit>:
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
 8008e0c:	4770      	bx	lr
 8008e0e:	bf00      	nop

08008e10 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8008e10:	2800      	cmp	r0, #0
 8008e12:	f000 808f 	beq.w	8008f34 <HAL_TIM_PWM_Init+0x124>
{
 8008e16:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8008e18:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8008e1c:	4604      	mov	r4, r0
 8008e1e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	f000 8081 	beq.w	8008f2a <HAL_TIM_PWM_Init+0x11a>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e28:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008e2a:	4943      	ldr	r1, [pc, #268]	@ (8008f38 <HAL_TIM_PWM_Init+0x128>)
  htim->State = HAL_TIM_STATE_BUSY;
 8008e2c:	2302      	movs	r3, #2
 8008e2e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008e32:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8008e34:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008e36:	d064      	beq.n	8008f02 <HAL_TIM_PWM_Init+0xf2>
 8008e38:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8008e3c:	d030      	beq.n	8008ea0 <HAL_TIM_PWM_Init+0x90>
 8008e3e:	f5a1 417c 	sub.w	r1, r1, #64512	@ 0xfc00
 8008e42:	428a      	cmp	r2, r1
 8008e44:	d02c      	beq.n	8008ea0 <HAL_TIM_PWM_Init+0x90>
 8008e46:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8008e4a:	428a      	cmp	r2, r1
 8008e4c:	d028      	beq.n	8008ea0 <HAL_TIM_PWM_Init+0x90>
 8008e4e:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8008e52:	428a      	cmp	r2, r1
 8008e54:	d024      	beq.n	8008ea0 <HAL_TIM_PWM_Init+0x90>
 8008e56:	f501 4178 	add.w	r1, r1, #63488	@ 0xf800
 8008e5a:	428a      	cmp	r2, r1
 8008e5c:	d051      	beq.n	8008f02 <HAL_TIM_PWM_Init+0xf2>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008e5e:	f501 5170 	add.w	r1, r1, #15360	@ 0x3c00
 8008e62:	428a      	cmp	r2, r1
 8008e64:	d020      	beq.n	8008ea8 <HAL_TIM_PWM_Init+0x98>
 8008e66:	4935      	ldr	r1, [pc, #212]	@ (8008f3c <HAL_TIM_PWM_Init+0x12c>)
 8008e68:	428a      	cmp	r2, r1
 8008e6a:	d01d      	beq.n	8008ea8 <HAL_TIM_PWM_Init+0x98>
 8008e6c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8008e70:	428a      	cmp	r2, r1
 8008e72:	d019      	beq.n	8008ea8 <HAL_TIM_PWM_Init+0x98>
 8008e74:	f5a1 3198 	sub.w	r1, r1, #77824	@ 0x13000
 8008e78:	428a      	cmp	r2, r1
 8008e7a:	d015      	beq.n	8008ea8 <HAL_TIM_PWM_Init+0x98>
 8008e7c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8008e80:	428a      	cmp	r2, r1
 8008e82:	d011      	beq.n	8008ea8 <HAL_TIM_PWM_Init+0x98>
 8008e84:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8008e88:	428a      	cmp	r2, r1
 8008e8a:	d00d      	beq.n	8008ea8 <HAL_TIM_PWM_Init+0x98>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008e8c:	69a5      	ldr	r5, [r4, #24]
  TIMx->PSC = Structure->Prescaler;
 8008e8e:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008e90:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008e92:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008e96:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8008e98:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008e9a:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008e9c:	6291      	str	r1, [r2, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008e9e:	e010      	b.n	8008ec2 <HAL_TIM_PWM_Init+0xb2>
    tmpcr1 |= Structure->CounterMode;
 8008ea0:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008ea2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8008ea6:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008ea8:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008eaa:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8008eac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008eb0:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008eb2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008eb6:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008eb8:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8008eba:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8008ebc:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008ebe:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008ec0:	6291      	str	r1, [r2, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	6153      	str	r3, [r2, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008ec6:	6913      	ldr	r3, [r2, #16]
 8008ec8:	07db      	lsls	r3, r3, #31
 8008eca:	d503      	bpl.n	8008ed4 <HAL_TIM_PWM_Init+0xc4>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008ecc:	6913      	ldr	r3, [r2, #16]
 8008ece:	f023 0301 	bic.w	r3, r3, #1
 8008ed2:	6113      	str	r3, [r2, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008eda:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8008ede:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8008ee2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8008ee6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008eea:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008eee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008ef2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8008ef6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8008efa:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8008efe:	2000      	movs	r0, #0
}
 8008f00:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8008f02:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008f04:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008f06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8008f0a:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8008f0c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008f10:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008f12:	69a1      	ldr	r1, [r4, #24]
 8008f14:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008f18:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8008f1a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008f1c:	68e3      	ldr	r3, [r4, #12]
 8008f1e:	62d3      	str	r3, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008f20:	6863      	ldr	r3, [r4, #4]
 8008f22:	6293      	str	r3, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8008f24:	6963      	ldr	r3, [r4, #20]
 8008f26:	6313      	str	r3, [r2, #48]	@ 0x30
 8008f28:	e7cb      	b.n	8008ec2 <HAL_TIM_PWM_Init+0xb2>
    htim->Lock = HAL_UNLOCKED;
 8008f2a:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8008f2e:	f7ff ff6d 	bl	8008e0c <HAL_TIM_PWM_MspInit>
 8008f32:	e779      	b.n	8008e28 <HAL_TIM_PWM_Init+0x18>
    return HAL_ERROR;
 8008f34:	2001      	movs	r0, #1
}
 8008f36:	4770      	bx	lr
 8008f38:	40010000 	.word	0x40010000
 8008f3c:	40014400 	.word	0x40014400

08008f40 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8008f40:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8008f44:	2b01      	cmp	r3, #1
 8008f46:	f000 80c6 	beq.w	80090d6 <HAL_TIM_PWM_ConfigChannel+0x196>
 8008f4a:	2301      	movs	r3, #1
{
 8008f4c:	b570      	push	{r4, r5, r6, lr}
 8008f4e:	4684      	mov	ip, r0
  __HAL_LOCK(htim);
 8008f50:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 8008f54:	2a0c      	cmp	r2, #12
 8008f56:	d808      	bhi.n	8008f6a <HAL_TIM_PWM_ConfigChannel+0x2a>
 8008f58:	e8df f002 	tbb	[pc, r2]
 8008f5c:	0707073e 	.word	0x0707073e
 8008f60:	07070767 	.word	0x07070767
 8008f64:	07070793 	.word	0x07070793
 8008f68:	0c          	.byte	0x0c
 8008f69:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	f88c 303c 	strb.w	r3, [ip, #60]	@ 0x3c
  switch (Channel)
 8008f70:	2001      	movs	r0, #1
}
 8008f72:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008f74:	6803      	ldr	r3, [r0, #0]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008f76:	680d      	ldr	r5, [r1, #0]
  tmpccer = TIMx->CCER;
 8008f78:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008f7a:	6a18      	ldr	r0, [r3, #32]
 8008f7c:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 8008f80:	6218      	str	r0, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8008f82:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8008f84:	69d8      	ldr	r0, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008f86:	f420 40e6 	bic.w	r0, r0, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008f8a:	ea40 2005 	orr.w	r0, r0, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008f8e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8008f90:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008f94:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f98:	4d6a      	ldr	r5, [pc, #424]	@ (8009144 <HAL_TIM_PWM_ConfigChannel+0x204>)
 8008f9a:	42ab      	cmp	r3, r5
 8008f9c:	f000 80bc 	beq.w	8009118 <HAL_TIM_PWM_ConfigChannel+0x1d8>
 8008fa0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8008fa4:	42ab      	cmp	r3, r5
 8008fa6:	f000 80b7 	beq.w	8009118 <HAL_TIM_PWM_ConfigChannel+0x1d8>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008faa:	605c      	str	r4, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008fac:	61d8      	str	r0, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008fae:	6848      	ldr	r0, [r1, #4]
 8008fb0:	6418      	str	r0, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fb2:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008fb4:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008fb6:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008fb8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008fbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008fbe:	69da      	ldr	r2, [r3, #28]
 8008fc0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008fc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008fc6:	69da      	ldr	r2, [r3, #28]
 8008fc8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8008fcc:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8008fce:	2300      	movs	r3, #0
 8008fd0:	f88c 303c 	strb.w	r3, [ip, #60]	@ 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8008fd4:	2000      	movs	r0, #0
}
 8008fd6:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008fd8:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8008fda:	680d      	ldr	r5, [r1, #0]
  tmpccer = TIMx->CCER;
 8008fdc:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008fde:	6a18      	ldr	r0, [r3, #32]
 8008fe0:	f020 0001 	bic.w	r0, r0, #1
 8008fe4:	6218      	str	r0, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8008fe6:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8008fe8:	6998      	ldr	r0, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008fea:	f020 0073 	bic.w	r0, r0, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 8008fee:	4328      	orrs	r0, r5
  tmpccer |= OC_Config->OCPolarity;
 8008ff0:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8008ff2:	f022 0202 	bic.w	r2, r2, #2
  tmpccer |= OC_Config->OCPolarity;
 8008ff6:	432a      	orrs	r2, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008ff8:	4d52      	ldr	r5, [pc, #328]	@ (8009144 <HAL_TIM_PWM_ConfigChannel+0x204>)
 8008ffa:	42ab      	cmp	r3, r5
 8008ffc:	d06d      	beq.n	80090da <HAL_TIM_PWM_ConfigChannel+0x19a>
 8008ffe:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8009002:	42ab      	cmp	r3, r5
 8009004:	d069      	beq.n	80090da <HAL_TIM_PWM_ConfigChannel+0x19a>
  TIMx->CR2 = tmpcr2;
 8009006:	605c      	str	r4, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8009008:	6198      	str	r0, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 800900a:	6848      	ldr	r0, [r1, #4]
 800900c:	6358      	str	r0, [r3, #52]	@ 0x34
  TIMx->CCER = tmpccer;
 800900e:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009010:	699a      	ldr	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009012:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009014:	f042 0208 	orr.w	r2, r2, #8
 8009018:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800901a:	699a      	ldr	r2, [r3, #24]
 800901c:	f022 0204 	bic.w	r2, r2, #4
 8009020:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009022:	699a      	ldr	r2, [r3, #24]
 8009024:	430a      	orrs	r2, r1
 8009026:	619a      	str	r2, [r3, #24]
      break;
 8009028:	e7d1      	b.n	8008fce <HAL_TIM_PWM_ConfigChannel+0x8e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800902a:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800902c:	680d      	ldr	r5, [r1, #0]
  tmpccer = TIMx->CCER;
 800902e:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009030:	6a18      	ldr	r0, [r3, #32]
 8009032:	f020 0010 	bic.w	r0, r0, #16
 8009036:	6218      	str	r0, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8009038:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 800903a:	6998      	ldr	r0, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800903c:	f420 40e6 	bic.w	r0, r0, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009040:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009044:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8009046:	f022 0220 	bic.w	r2, r2, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800904a:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800904e:	4d3d      	ldr	r5, [pc, #244]	@ (8009144 <HAL_TIM_PWM_ConfigChannel+0x204>)
 8009050:	42ab      	cmp	r3, r5
 8009052:	d051      	beq.n	80090f8 <HAL_TIM_PWM_ConfigChannel+0x1b8>
 8009054:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8009058:	42ab      	cmp	r3, r5
 800905a:	d04d      	beq.n	80090f8 <HAL_TIM_PWM_ConfigChannel+0x1b8>
  TIMx->CR2 = tmpcr2;
 800905c:	605c      	str	r4, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 800905e:	6198      	str	r0, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8009060:	6848      	ldr	r0, [r1, #4]
 8009062:	6398      	str	r0, [r3, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8009064:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009066:	699a      	ldr	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009068:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800906a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800906e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009070:	699a      	ldr	r2, [r3, #24]
 8009072:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009076:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009078:	699a      	ldr	r2, [r3, #24]
 800907a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800907e:	619a      	str	r2, [r3, #24]
      break;
 8009080:	e7a5      	b.n	8008fce <HAL_TIM_PWM_ConfigChannel+0x8e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009082:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8009084:	680d      	ldr	r5, [r1, #0]
  tmpccer = TIMx->CCER;
 8009086:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009088:	6a18      	ldr	r0, [r3, #32]
 800908a:	f420 7080 	bic.w	r0, r0, #256	@ 0x100
 800908e:	6218      	str	r0, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8009090:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8009092:	69d8      	ldr	r0, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009094:	f020 0073 	bic.w	r0, r0, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 8009098:	4328      	orrs	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800909a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 800909c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80090a0:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80090a4:	4d27      	ldr	r5, [pc, #156]	@ (8009144 <HAL_TIM_PWM_ConfigChannel+0x204>)
 80090a6:	42ab      	cmp	r3, r5
 80090a8:	d03c      	beq.n	8009124 <HAL_TIM_PWM_ConfigChannel+0x1e4>
 80090aa:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80090ae:	42ab      	cmp	r3, r5
 80090b0:	d038      	beq.n	8009124 <HAL_TIM_PWM_ConfigChannel+0x1e4>
  TIMx->CR2 = tmpcr2;
 80090b2:	605c      	str	r4, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 80090b4:	61d8      	str	r0, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80090b6:	6848      	ldr	r0, [r1, #4]
 80090b8:	63d8      	str	r0, [r3, #60]	@ 0x3c
  TIMx->CCER = tmpccer;
 80090ba:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80090bc:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80090be:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80090c0:	f042 0208 	orr.w	r2, r2, #8
 80090c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80090c6:	69da      	ldr	r2, [r3, #28]
 80090c8:	f022 0204 	bic.w	r2, r2, #4
 80090cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80090ce:	69da      	ldr	r2, [r3, #28]
 80090d0:	430a      	orrs	r2, r1
 80090d2:	61da      	str	r2, [r3, #28]
      break;
 80090d4:	e77b      	b.n	8008fce <HAL_TIM_PWM_ConfigChannel+0x8e>
  __HAL_LOCK(htim);
 80090d6:	2002      	movs	r0, #2
}
 80090d8:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 80090da:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80090dc:	f022 0208 	bic.w	r2, r2, #8
    tmpccer |= OC_Config->OCNPolarity;
 80090e0:	432a      	orrs	r2, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 80090e2:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80090e6:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80090ea:	ea46 0e05 	orr.w	lr, r6, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80090ee:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80090f2:	ea4e 0404 	orr.w	r4, lr, r4
 80090f6:	e786      	b.n	8009006 <HAL_TIM_PWM_ConfigChannel+0xc6>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80090f8:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80090fa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80090fe:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009102:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009106:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800910a:	ea46 0e05 	orr.w	lr, r6, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 800910e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009112:	ea44 048e 	orr.w	r4, r4, lr, lsl #2
 8009116:	e7a1      	b.n	800905c <HAL_TIM_PWM_ConfigChannel+0x11c>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009118:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 800911a:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800911e:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8009122:	e742      	b.n	8008faa <HAL_TIM_PWM_ConfigChannel+0x6a>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009124:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8009126:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800912a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800912e:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009132:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009136:	ea46 0e05 	orr.w	lr, r6, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 800913a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800913e:	ea44 140e 	orr.w	r4, r4, lr, lsl #4
 8009142:	e7b6      	b.n	80090b2 <HAL_TIM_PWM_ConfigChannel+0x172>
 8009144:	40010000 	.word	0x40010000

08009148 <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 8009148:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 800914c:	2a01      	cmp	r2, #1
 800914e:	d050      	beq.n	80091f2 <HAL_TIM_SlaveConfigSynchro+0xaa>
 8009150:	4603      	mov	r3, r0
{
 8009152:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8009154:	2202      	movs	r2, #2
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009156:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8009158:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  __HAL_LOCK(htim);
 800915c:	2001      	movs	r0, #1
 800915e:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8009162:	68a2      	ldr	r2, [r4, #8]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8009164:	6848      	ldr	r0, [r1, #4]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8009166:	680d      	ldr	r5, [r1, #0]
  tmpsmcr &= ~TIM_SMCR_TS;
 8009168:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800916c:	4302      	orrs	r2, r0
  tmpsmcr &= ~TIM_SMCR_SMS;
 800916e:	f022 0207 	bic.w	r2, r2, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8009172:	432a      	orrs	r2, r5

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8009174:	2850      	cmp	r0, #80	@ 0x50
  htim->Instance->SMCR = tmpsmcr;
 8009176:	60a2      	str	r2, [r4, #8]
  switch (sSlaveConfig->InputTrigger)
 8009178:	d060      	beq.n	800923c <HAL_TIM_SlaveConfigSynchro+0xf4>
 800917a:	d90f      	bls.n	800919c <HAL_TIM_SlaveConfigSynchro+0x54>
 800917c:	2860      	cmp	r0, #96	@ 0x60
 800917e:	d03a      	beq.n	80091f6 <HAL_TIM_SlaveConfigSynchro+0xae>
 8009180:	2870      	cmp	r0, #112	@ 0x70
 8009182:	d10e      	bne.n	80091a2 <HAL_TIM_SlaveConfigSynchro+0x5a>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009184:	e9d1 5202 	ldrd	r5, r2, [r1, #8]
  tmpsmcr = TIMx->SMCR;
 8009188:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800918a:	432a      	orrs	r2, r5
 800918c:	690d      	ldr	r5, [r1, #16]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800918e:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009192:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8009196:	430a      	orrs	r2, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009198:	60a2      	str	r2, [r4, #8]
 800919a:	e00f      	b.n	80091bc <HAL_TIM_SlaveConfigSynchro+0x74>
  switch (sSlaveConfig->InputTrigger)
 800919c:	2840      	cmp	r0, #64	@ 0x40
 800919e:	d03d      	beq.n	800921c <HAL_TIM_SlaveConfigSynchro+0xd4>
 80091a0:	d907      	bls.n	80091b2 <HAL_TIM_SlaveConfigSynchro+0x6a>
    htim->State = HAL_TIM_STATE_READY;
 80091a2:	2001      	movs	r0, #1
    __HAL_UNLOCK(htim);
 80091a4:	2200      	movs	r2, #0
    htim->State = HAL_TIM_STATE_READY;
 80091a6:	f883 003d 	strb.w	r0, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80091aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80091ae:	bc30      	pop	{r4, r5}
 80091b0:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 80091b2:	2820      	cmp	r0, #32
 80091b4:	d002      	beq.n	80091bc <HAL_TIM_SlaveConfigSynchro+0x74>
 80091b6:	d912      	bls.n	80091de <HAL_TIM_SlaveConfigSynchro+0x96>
 80091b8:	2830      	cmp	r0, #48	@ 0x30
 80091ba:	d1f2      	bne.n	80091a2 <HAL_TIM_SlaveConfigSynchro+0x5a>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80091bc:	68e2      	ldr	r2, [r4, #12]
 80091be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80091c2:	60e2      	str	r2, [r4, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80091c4:	68e2      	ldr	r2, [r4, #12]
  __HAL_UNLOCK(htim);
 80091c6:	2100      	movs	r1, #0
  htim->State = HAL_TIM_STATE_READY;
 80091c8:	2501      	movs	r5, #1
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80091ca:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80091ce:	60e2      	str	r2, [r4, #12]
  htim->State = HAL_TIM_STATE_READY;
 80091d0:	f883 503d 	strb.w	r5, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80091d4:	f883 103c 	strb.w	r1, [r3, #60]	@ 0x3c
  return HAL_OK;
 80091d8:	4608      	mov	r0, r1
}
 80091da:	bc30      	pop	{r4, r5}
 80091dc:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 80091de:	f030 0210 	bics.w	r2, r0, #16
 80091e2:	d0eb      	beq.n	80091bc <HAL_TIM_SlaveConfigSynchro+0x74>
    htim->State = HAL_TIM_STATE_READY;
 80091e4:	2001      	movs	r0, #1
    __HAL_UNLOCK(htim);
 80091e6:	2200      	movs	r2, #0
    htim->State = HAL_TIM_STATE_READY;
 80091e8:	f883 003d 	strb.w	r0, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80091ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 80091f0:	e7dd      	b.n	80091ae <HAL_TIM_SlaveConfigSynchro+0x66>
  __HAL_LOCK(htim);
 80091f2:	2002      	movs	r0, #2
}
 80091f4:	4770      	bx	lr
  tmpccer = TIMx->CCER;
 80091f6:	6a22      	ldr	r2, [r4, #32]
                               sSlaveConfig->TriggerPolarity,
 80091f8:	688d      	ldr	r5, [r1, #8]
                               sSlaveConfig->TriggerFilter);
 80091fa:	6908      	ldr	r0, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80091fc:	6a21      	ldr	r1, [r4, #32]
 80091fe:	f021 0110 	bic.w	r1, r1, #16
 8009202:	6221      	str	r1, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009204:	69a1      	ldr	r1, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009206:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800920a:	f421 4170 	bic.w	r1, r1, #61440	@ 0xf000
  tmpccer |= (TIM_ICPolarity << 4U);
 800920e:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009212:	ea41 3100 	orr.w	r1, r1, r0, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8009216:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 8009218:	6222      	str	r2, [r4, #32]
 800921a:	e7cf      	b.n	80091bc <HAL_TIM_SlaveConfigSynchro+0x74>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800921c:	2d05      	cmp	r5, #5
 800921e:	d0c0      	beq.n	80091a2 <HAL_TIM_SlaveConfigSynchro+0x5a>
      tmpccer = htim->Instance->CCER;
 8009220:	6a20      	ldr	r0, [r4, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8009222:	6a22      	ldr	r2, [r4, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8009224:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8009226:	f022 0201 	bic.w	r2, r2, #1
 800922a:	6222      	str	r2, [r4, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800922c:	69a2      	ldr	r2, [r4, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800922e:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8009232:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 8009236:	61a2      	str	r2, [r4, #24]
      htim->Instance->CCER = tmpccer;
 8009238:	6220      	str	r0, [r4, #32]
      break;
 800923a:	e7bf      	b.n	80091bc <HAL_TIM_SlaveConfigSynchro+0x74>
                               sSlaveConfig->TriggerPolarity,
 800923c:	688a      	ldr	r2, [r1, #8]
                               sSlaveConfig->TriggerFilter);
 800923e:	6908      	ldr	r0, [r1, #16]
  tmpccer = TIMx->CCER;
 8009240:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009242:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8009246:	4311      	orrs	r1, r2
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009248:	6a22      	ldr	r2, [r4, #32]
 800924a:	f022 0201 	bic.w	r2, r2, #1
 800924e:	6222      	str	r2, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009250:	69a2      	ldr	r2, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009252:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009256:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800925a:	61a2      	str	r2, [r4, #24]
  TIMx->CCER = tmpccer;
 800925c:	6221      	str	r1, [r4, #32]
 800925e:	e7ad      	b.n	80091bc <HAL_TIM_SlaveConfigSynchro+0x74>

08009260 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009260:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8009264:	2a01      	cmp	r2, #1
 8009266:	d037      	beq.n	80092d8 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8009268:	4603      	mov	r3, r0

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800926a:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800926c:	2002      	movs	r0, #2
{
 800926e:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8009270:	f883 003d 	strb.w	r0, [r3, #61]	@ 0x3d
  tmpcr2 = htim->Instance->CR2;
 8009274:	6850      	ldr	r0, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009276:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 8009278:	6894      	ldr	r4, [r2, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 800927a:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800927e:	4328      	orrs	r0, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009280:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009282:	4816      	ldr	r0, [pc, #88]	@ (80092dc <HAL_TIMEx_MasterConfigSynchronization+0x7c>)
 8009284:	4282      	cmp	r2, r0
 8009286:	d01a      	beq.n	80092be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8009288:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800928c:	d017      	beq.n	80092be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 800928e:	f5a0 407c 	sub.w	r0, r0, #64512	@ 0xfc00
 8009292:	4282      	cmp	r2, r0
 8009294:	d013      	beq.n	80092be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8009296:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 800929a:	4282      	cmp	r2, r0
 800929c:	d00f      	beq.n	80092be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 800929e:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 80092a2:	4282      	cmp	r2, r0
 80092a4:	d00b      	beq.n	80092be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 80092a6:	f500 4078 	add.w	r0, r0, #63488	@ 0xf800
 80092aa:	4282      	cmp	r2, r0
 80092ac:	d007      	beq.n	80092be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 80092ae:	f500 5070 	add.w	r0, r0, #15360	@ 0x3c00
 80092b2:	4282      	cmp	r2, r0
 80092b4:	d003      	beq.n	80092be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 80092b6:	f5a0 3094 	sub.w	r0, r0, #75776	@ 0x12800
 80092ba:	4282      	cmp	r2, r0
 80092bc:	d104      	bne.n	80092c8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80092be:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80092c0:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80092c4:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80092c6:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80092c8:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80092ca:	2201      	movs	r2, #1
 80092cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80092d0:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 80092d4:	bc30      	pop	{r4, r5}
 80092d6:	4770      	bx	lr
  __HAL_LOCK(htim);
 80092d8:	2002      	movs	r0, #2
}
 80092da:	4770      	bx	lr
 80092dc:	40010000 	.word	0x40010000

080092e0 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80092e0:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80092e4:	2b01      	cmp	r3, #1
 80092e6:	d023      	beq.n	8009330 <HAL_TIMEx_ConfigBreakDeadTime+0x50>
{
 80092e8:	b410      	push	{r4}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80092ea:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 80092ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80092f2:	4602      	mov	r2, r0
 80092f4:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80092f6:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80092f8:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80092fa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80092fe:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009300:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009304:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009306:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009308:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800930c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800930e:	6948      	ldr	r0, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009310:	69cc      	ldr	r4, [r1, #28]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009312:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009316:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009318:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800931c:	6810      	ldr	r0, [r2, #0]

  __HAL_UNLOCK(htim);
 800931e:	2100      	movs	r1, #0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009320:	4323      	orrs	r3, r4
  htim->Instance->BDTR = tmpbdtr;
 8009322:	6443      	str	r3, [r0, #68]	@ 0x44
  __HAL_UNLOCK(htim);
 8009324:	f882 103c 	strb.w	r1, [r2, #60]	@ 0x3c

  return HAL_OK;
 8009328:	4608      	mov	r0, r1
}
 800932a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800932e:	4770      	bx	lr
  __HAL_LOCK(htim);
 8009330:	2002      	movs	r0, #2
}
 8009332:	4770      	bx	lr

08009334 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009334:	2800      	cmp	r0, #0
 8009336:	f000 8087 	beq.w	8009448 <HAL_UART_Init+0x114>
{
 800933a:	b538      	push	{r3, r4, r5, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800933c:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8009340:	4604      	mov	r4, r0
 8009342:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8009346:	2b00      	cmp	r3, #0
 8009348:	d079      	beq.n	800943e <HAL_UART_Init+0x10a>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800934a:	6823      	ldr	r3, [r4, #0]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800934c:	68e0      	ldr	r0, [r4, #12]
  huart->gState = HAL_UART_STATE_BUSY;
 800934e:	2224      	movs	r2, #36	@ 0x24
 8009350:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8009354:	68da      	ldr	r2, [r3, #12]
 8009356:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800935a:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800935c:	6919      	ldr	r1, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800935e:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009360:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 8009364:	4301      	orrs	r1, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009366:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009368:	6119      	str	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800936a:	4302      	orrs	r2, r0
 800936c:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 800936e:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009370:	4302      	orrs	r2, r0
 8009372:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 8009374:	f421 4116 	bic.w	r1, r1, #38400	@ 0x9600
 8009378:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800937c:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 800937e:	430a      	orrs	r2, r1
 8009380:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009382:	695a      	ldr	r2, [r3, #20]
 8009384:	69a0      	ldr	r0, [r4, #24]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009386:	4931      	ldr	r1, [pc, #196]	@ (800944c <HAL_UART_Init+0x118>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009388:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800938c:	4302      	orrs	r2, r0
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800938e:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009390:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009392:	d036      	beq.n	8009402 <HAL_UART_Init+0xce>
 8009394:	4a2e      	ldr	r2, [pc, #184]	@ (8009450 <HAL_UART_Init+0x11c>)
 8009396:	4293      	cmp	r3, r2
 8009398:	d033      	beq.n	8009402 <HAL_UART_Init+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800939a:	f7ff fa25 	bl	80087e8 <HAL_RCC_GetPCLK1Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800939e:	69e2      	ldr	r2, [r4, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80093a0:	2119      	movs	r1, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80093a2:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80093a6:	e9d4 5300 	ldrd	r5, r3, [r4]
 80093aa:	fba0 0101 	umull	r0, r1, r0, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80093ae:	d02b      	beq.n	8009408 <HAL_UART_Init+0xd4>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80093b0:	009a      	lsls	r2, r3, #2
 80093b2:	0f9b      	lsrs	r3, r3, #30
 80093b4:	f7fa fb74 	bl	8003aa0 <__aeabi_uldivmod>
 80093b8:	4a26      	ldr	r2, [pc, #152]	@ (8009454 <HAL_UART_Init+0x120>)
 80093ba:	fba2 1300 	umull	r1, r3, r2, r0
 80093be:	095b      	lsrs	r3, r3, #5
 80093c0:	2164      	movs	r1, #100	@ 0x64
 80093c2:	fb01 0013 	mls	r0, r1, r3, r0
 80093c6:	0100      	lsls	r0, r0, #4
 80093c8:	3032      	adds	r0, #50	@ 0x32
 80093ca:	fba2 2000 	umull	r2, r0, r2, r0
 80093ce:	011b      	lsls	r3, r3, #4
 80093d0:	eb03 1350 	add.w	r3, r3, r0, lsr #5
 80093d4:	60ab      	str	r3, [r5, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80093d6:	692a      	ldr	r2, [r5, #16]
 80093d8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80093dc:	612a      	str	r2, [r5, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80093de:	696a      	ldr	r2, [r5, #20]
 80093e0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80093e4:	616a      	str	r2, [r5, #20]
  __HAL_UART_ENABLE(huart);
 80093e6:	68ea      	ldr	r2, [r5, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093e8:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 80093ea:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 80093ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80093f0:	60ea      	str	r2, [r5, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093f2:	6463      	str	r3, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80093f4:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80093f8:	f884 1042 	strb.w	r1, [r4, #66]	@ 0x42
  return HAL_OK;
 80093fc:	4618      	mov	r0, r3
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80093fe:	6363      	str	r3, [r4, #52]	@ 0x34
}
 8009400:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 8009402:	f7ff fa01 	bl	8008808 <HAL_RCC_GetPCLK2Freq>
 8009406:	e7ca      	b.n	800939e <HAL_UART_Init+0x6a>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009408:	18da      	adds	r2, r3, r3
 800940a:	f04f 0300 	mov.w	r3, #0
 800940e:	415b      	adcs	r3, r3
 8009410:	f7fa fb46 	bl	8003aa0 <__aeabi_uldivmod>
 8009414:	4a0f      	ldr	r2, [pc, #60]	@ (8009454 <HAL_UART_Init+0x120>)
 8009416:	fba2 3100 	umull	r3, r1, r2, r0
 800941a:	0949      	lsrs	r1, r1, #5
 800941c:	2364      	movs	r3, #100	@ 0x64
 800941e:	fb03 0311 	mls	r3, r3, r1, r0
 8009422:	00db      	lsls	r3, r3, #3
 8009424:	3332      	adds	r3, #50	@ 0x32
 8009426:	fba2 2303 	umull	r2, r3, r2, r3
 800942a:	f3c3 1242 	ubfx	r2, r3, #5, #3
 800942e:	091b      	lsrs	r3, r3, #4
 8009430:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8009434:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009438:	4413      	add	r3, r2
 800943a:	60ab      	str	r3, [r5, #8]
 800943c:	e7cb      	b.n	80093d6 <HAL_UART_Init+0xa2>
    huart->Lock = HAL_UNLOCKED;
 800943e:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8009442:	f7fe fa13 	bl	800786c <HAL_UART_MspInit>
 8009446:	e780      	b.n	800934a <HAL_UART_Init+0x16>
    return HAL_ERROR;
 8009448:	2001      	movs	r0, #1
}
 800944a:	4770      	bx	lr
 800944c:	40011000 	.word	0x40011000
 8009450:	40011400 	.word	0x40011400
 8009454:	51eb851f 	.word	0x51eb851f

08009458 <VBS_GetAvBusVoltage_d>:
  }
  return (temp_avBusVoltage_d);
#else
  return (pHandle->AvBusVoltage_d);
#endif
}
 8009458:	88c0      	ldrh	r0, [r0, #6]
 800945a:	4770      	bx	lr

0800945c <VBS_GetAvBusVoltage_V>:
    temp = 0U;
  }
  else
  {
#endif
    temp = (uint32_t)(pHandle->AvBusVoltage_d);
 800945c:	88c3      	ldrh	r3, [r0, #6]
    temp *= pHandle->ConversionFactor;
 800945e:	8840      	ldrh	r0, [r0, #2]
 8009460:	fb03 f000 	mul.w	r0, r3, r0
    temp /= 65536U;
#ifdef NULL_PTR_CHECK_BUS_VOLT
  }
#endif
  return ((uint16_t)temp);
}
 8009464:	0c00      	lsrs	r0, r0, #16
 8009466:	4770      	bx	lr

08009468 <Circle_Limitation>:
  *  @f$v_q = \sqrt(MaxModule^2-v_d^2\ ) @f$

  *
  */
__weak qd_t Circle_Limitation(const CircleLimitation_Handle_t *pHandle, qd_t Vqd)
{
 8009468:	b570      	push	{r4, r5, r6, lr}
    int32_t square_limit;
    int32_t vd_square_limit;
    int32_t new_q;
    int32_t new_d;

    maxModule = (int32_t)pHandle->MaxModule;
 800946a:	8803      	ldrh	r3, [r0, #0]
 800946c:	140d      	asrs	r5, r1, #16
 800946e:	b20c      	sxth	r4, r1

    square_q = ((int32_t)(Vqd.q)) * Vqd.q;
    square_d = ((int32_t)(Vqd.d)) * Vqd.d;
 8009470:	fb05 f205 	mul.w	r2, r5, r5
    square_limit = maxModule * maxModule;
 8009474:	fb03 f303 	mul.w	r3, r3, r3
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
    square_sum = square_q + square_d;
 8009478:	fb04 2104 	mla	r1, r4, r4, r2

    if (square_sum > square_limit)
 800947c:	428b      	cmp	r3, r1
{
 800947e:	b084      	sub	sp, #16
    if (square_sum > square_limit)
 8009480:	da0f      	bge.n	80094a2 <Circle_Limitation+0x3a>
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
 8009482:	8846      	ldrh	r6, [r0, #2]
 8009484:	fb06 f006 	mul.w	r0, r6, r6
    {
      if (square_d <= vd_square_limit)
 8009488:	4282      	cmp	r2, r0
 800948a:	dd13      	ble.n	80094b4 <Circle_Limitation+0x4c>
        new_d = Vqd.d;
      }
      else
      {
        new_d = (int32_t)pHandle->MaxVd;
        if (Vqd.d < 0)
 800948c:	2d00      	cmp	r5, #0
#if defined CIRCLE_LIMITATION_SQRT_M0
        square_temp = (square_limit - vd_square_limit) / 1048576;
        new_q = SqrtTable[square_temp];
#else
        square_temp = square_limit - vd_square_limit;
        new_q = MCM_Sqrt(square_temp);
 800948e:	eba3 0000 	sub.w	r0, r3, r0
          new_d = -new_d;
 8009492:	bfb8      	it	lt
 8009494:	4276      	neglt	r6, r6
        new_q = MCM_Sqrt(square_temp);
 8009496:	f7fb fca5 	bl	8004de4 <MCM_Sqrt>
#endif
        if (Vqd.q < 0)
 800949a:	2c00      	cmp	r4, #0
        {
          /* Nothing to do */
        }
      }
      local_vqd.q = (int16_t)new_q;
      local_vqd.d = (int16_t)new_d;
 800949c:	b235      	sxth	r5, r6
        if (Vqd.q < 0)
 800949e:	db0e      	blt.n	80094be <Circle_Limitation+0x56>
      local_vqd.q = (int16_t)new_q;
 80094a0:	b204      	sxth	r4, r0
    }
#ifdef NULL_PTR_CHECK_CRC_LIM
  }
#endif
  return (local_vqd);
 80094a2:	b2a4      	uxth	r4, r4
 80094a4:	2000      	movs	r0, #0
 80094a6:	f364 000f 	bfi	r0, r4, #0, #16
 80094aa:	b2ad      	uxth	r5, r5
 80094ac:	f365 401f 	bfi	r0, r5, #16, #16
}
 80094b0:	b004      	add	sp, #16
 80094b2:	bd70      	pop	{r4, r5, r6, pc}
        new_q = MCM_Sqrt(square_temp);
 80094b4:	1a98      	subs	r0, r3, r2
 80094b6:	f7fb fc95 	bl	8004de4 <MCM_Sqrt>
        if (Vqd.q < 0)
 80094ba:	2c00      	cmp	r4, #0
 80094bc:	daf0      	bge.n	80094a0 <Circle_Limitation+0x38>
          new_q = - new_q;
 80094be:	4240      	negs	r0, r0
      local_vqd.q = (int16_t)new_q;
 80094c0:	b204      	sxth	r4, r0
      local_vqd.d = (int16_t)new_d;
 80094c2:	e7ee      	b.n	80094a2 <Circle_Limitation+0x3a>

080094c4 <FF_Init>:
#endif
    pHandle->wConstant_1D = pHandle->wDefConstant_1D;
    pHandle->wConstant_1Q = pHandle->wDefConstant_1Q;
    pHandle->wConstant_2  = pHandle->wDefConstant_2;

    pHandle->pBus_Sensor = pBusSensor;
 80094c4:	6181      	str	r1, [r0, #24]
    pHandle->wConstant_1D = pHandle->wDefConstant_1D;
 80094c6:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80094c8:	6101      	str	r1, [r0, #16]
{
 80094ca:	b410      	push	{r4}
    pHandle->wConstant_1D = pHandle->wDefConstant_1D;
 80094cc:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 80094ce:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 80094d0:	60c4      	str	r4, [r0, #12]

    pHandle->pPID_d = pPIDId;

    pHandle->pPID_q = pPIDIq;
 80094d2:	e9c0 3207 	strd	r3, r2, [r0, #28]
#ifdef NULL_PTR_CHECK_FEED_FWD_CTRL
  }
#endif
}
 80094d6:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->wConstant_1D = pHandle->wDefConstant_1D;
 80094da:	6141      	str	r1, [r0, #20]
}
 80094dc:	4770      	bx	lr
 80094de:	bf00      	nop

080094e0 <FF_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->Vqdff.q = (int16_t)0;
 80094e0:	2300      	movs	r3, #0
 80094e2:	6003      	str	r3, [r0, #0]
    pHandle->Vqdff.d = (int16_t)0;
#ifdef NULL_PTR_CHECK_FEED_FWD_CTRL
  }
#endif
}
 80094e4:	4770      	bx	lr
 80094e6:	bf00      	nop

080094e8 <FF_VqdffComputation>:
  * @param  Iqdref Iqd reference components used to calculate the Feed-forward
  *         action.
  * @param  pSTC Pointer on speed and torque controller structure.
  */
__weak void FF_VqdffComputation(FF_Handle_t *pHandle, qd_t Iqdref, SpeednTorqCtrl_Handle_t *pSTC)
{
 80094e8:	b530      	push	{r4, r5, lr}
 80094ea:	b083      	sub	sp, #12
 80094ec:	4604      	mov	r4, r0
    int32_t wtemp1, wtemp2;
    int16_t hSpeed_dpp;
    uint16_t hAvBusVoltage_d;
    SpeednPosFdbk_Handle_t *SpeedSensor;

    SpeedSensor = STC_GetSpeedSensor(pSTC);
 80094ee:	4610      	mov	r0, r2
{
 80094f0:	9101      	str	r1, [sp, #4]
    SpeedSensor = STC_GetSpeedSensor(pSTC);
 80094f2:	f001 f9fb 	bl	800a8ec <STC_GetSpeedSensor>
    hSpeed_dpp = SPD_GetElSpeedDpp(SpeedSensor);
 80094f6:	f001 f999 	bl	800a82c <SPD_GetElSpeedDpp>
 80094fa:	4605      	mov	r5, r0
    hAvBusVoltage_d = VBS_GetAvBusVoltage_d(pHandle->pBus_Sensor) / 2U;
 80094fc:	69a0      	ldr	r0, [r4, #24]
 80094fe:	f7ff ffab 	bl	8009458 <VBS_GetAvBusVoltage_d>

    if (hAvBusVoltage_d != (uint16_t)0)
 8009502:	2801      	cmp	r0, #1
 8009504:	d940      	bls.n	8009588 <FF_VqdffComputation+0xa0>
    {
      /*q-axes ff voltage calculation */
      wtemp1 = (((int32_t)(hSpeed_dpp) * Iqdref.d) / (int32_t)32768);
 8009506:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800950a:	fb13 f305 	smulbb	r3, r3, r5
 800950e:	2b00      	cmp	r3, #0
 8009510:	bfbc      	itt	lt
 8009512:	f503 43ff 	addlt.w	r3, r3, #32640	@ 0x7f80
 8009516:	337f      	addlt	r3, #127	@ 0x7f
 8009518:	13da      	asrs	r2, r3, #15
      wtemp2 = (wtemp1 * pHandle->wConstant_1D) / (int32_t)(hAvBusVoltage_d);
      wtemp2 *= (int32_t)2;

      wtemp1 = ((pHandle->wConstant_2 * hSpeed_dpp) / (int32_t)hAvBusVoltage_d) * (int32_t)16;
 800951a:	6963      	ldr	r3, [r4, #20]
      wtemp2 = (wtemp1 * pHandle->wConstant_1D) / (int32_t)(hAvBusVoltage_d);
 800951c:	f3c0 014f 	ubfx	r1, r0, #1, #16
 8009520:	68e0      	ldr	r0, [r4, #12]
      wtemp1 = ((pHandle->wConstant_2 * hSpeed_dpp) / (int32_t)hAvBusVoltage_d) * (int32_t)16;
 8009522:	fb05 f303 	mul.w	r3, r5, r3
 8009526:	fb93 f3f1 	sdiv	r3, r3, r1
 800952a:	011b      	lsls	r3, r3, #4
      wtemp2 = (wtemp1 * pHandle->wConstant_1D) / (int32_t)(hAvBusVoltage_d);
 800952c:	fb00 f202 	mul.w	r2, r0, r2
 8009530:	fb92 f2f1 	sdiv	r2, r2, r1

      wtemp2 = wtemp1 + wtemp2;
 8009534:	eb03 0342 	add.w	r3, r3, r2, lsl #1

      SATURATION_TO_S16(wtemp2)
 8009538:	4a16      	ldr	r2, [pc, #88]	@ (8009594 <FF_VqdffComputation+0xac>)
 800953a:	4293      	cmp	r3, r2

      pHandle->Vqdff.q = (int16_t)(wtemp2);
 800953c:	f647 70ff 	movw	r0, #32767	@ 0x7fff
      SATURATION_TO_S16(wtemp2)
 8009540:	bfb8      	it	lt
 8009542:	4613      	movlt	r3, r2
      pHandle->Vqdff.q = (int16_t)(wtemp2);
 8009544:	4283      	cmp	r3, r0
 8009546:	bfa8      	it	ge
 8009548:	4603      	movge	r3, r0
 800954a:	b21a      	sxth	r2, r3

      /* d-axes ff voltage calculation */
      wtemp1 = (((int32_t)(hSpeed_dpp) * Iqdref.q) / (int32_t)32768);
 800954c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8009550:	8022      	strh	r2, [r4, #0]
 8009552:	fb13 f305 	smulbb	r3, r3, r5
 8009556:	2b00      	cmp	r3, #0
 8009558:	bfb8      	it	lt
 800955a:	181b      	addlt	r3, r3, r0
      wtemp2 = (wtemp1 * pHandle->wConstant_1Q) / (int32_t)(hAvBusVoltage_d);
 800955c:	6920      	ldr	r0, [r4, #16]
      wtemp1 = (((int32_t)(hSpeed_dpp) * Iqdref.q) / (int32_t)32768);
 800955e:	13db      	asrs	r3, r3, #15
      wtemp2 = (wtemp1 * pHandle->wConstant_1Q) / (int32_t)(hAvBusVoltage_d);
 8009560:	fb00 f303 	mul.w	r3, r0, r3
      wtemp2 *= (int32_t)(-2);

      SATURATION_TO_S16(wtemp2)
 8009564:	480b      	ldr	r0, [pc, #44]	@ (8009594 <FF_VqdffComputation+0xac>)
      wtemp2 = (wtemp1 * pHandle->wConstant_1Q) / (int32_t)(hAvBusVoltage_d);
 8009566:	fb93 f3f1 	sdiv	r3, r3, r1
      wtemp2 *= (int32_t)(-2);
 800956a:	ebc3 73c3 	rsb	r3, r3, r3, lsl #31
 800956e:	005b      	lsls	r3, r3, #1
      SATURATION_TO_S16(wtemp2)
 8009570:	4283      	cmp	r3, r0
 8009572:	bfb8      	it	lt
 8009574:	4603      	movlt	r3, r0

      pHandle->Vqdff.d = (int16_t)(wtemp2);
 8009576:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800957a:	428b      	cmp	r3, r1
 800957c:	bfa8      	it	ge
 800957e:	460b      	movge	r3, r1
 8009580:	b21b      	sxth	r3, r3
 8009582:	8063      	strh	r3, [r4, #2]
      pHandle->Vqdff.d = (int16_t)0;
    }
#ifdef NULL_PTR_CHECK_FEED_FWD_CTRL
  }
#endif
}
 8009584:	b003      	add	sp, #12
 8009586:	bd30      	pop	{r4, r5, pc}
      pHandle->Vqdff.d = (int16_t)0;
 8009588:	2300      	movs	r3, #0
      pHandle->Vqdff.q = (int16_t)0;
 800958a:	461a      	mov	r2, r3
 800958c:	8063      	strh	r3, [r4, #2]
 800958e:	8022      	strh	r2, [r4, #0]
}
 8009590:	b003      	add	sp, #12
 8009592:	bd30      	pop	{r4, r5, pc}
 8009594:	ffff8001 	.word	0xffff8001

08009598 <FF_InitFOCAdditionalMethods>:
/**
  * @brief  Use this method to initialize FF variables in START_TO_RUN state.
  * @param  pHandle Feed-forward structure.
  */
__weak void FF_InitFOCAdditionalMethods(FF_Handle_t *pHandle)
{
 8009598:	b538      	push	{r3, r4, r5, lr}
 800959a:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->VqdAvPIout.q = 0;
 800959c:	2500      	movs	r5, #0
    pHandle->VqdAvPIout.d = 0;
    PID_SetIntegralTerm(pHandle->pPID_q, 0);
 800959e:	69c0      	ldr	r0, [r0, #28]
    pHandle->VqdAvPIout.q = 0;
 80095a0:	60a5      	str	r5, [r4, #8]
    PID_SetIntegralTerm(pHandle->pPID_q, 0);
 80095a2:	4629      	mov	r1, r5
 80095a4:	f000 f8fc 	bl	80097a0 <PID_SetIntegralTerm>
    PID_SetIntegralTerm(pHandle->pPID_d, 0);
 80095a8:	6a20      	ldr	r0, [r4, #32]
 80095aa:	4629      	mov	r1, r5
#ifdef NULL_PTR_CHECK_FEED_FWD_CTRL
  }
#endif
}
 80095ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    PID_SetIntegralTerm(pHandle->pPID_d, 0);
 80095b0:	f000 b8f6 	b.w	80097a0 <PID_SetIntegralTerm>

080095b4 <FF_GetVqdff>:
  {
    retqt = pHandle->Vqdff;
  }
  return (retqt);
#else
  return (pHandle->Vqdff);
 80095b4:	6803      	ldr	r3, [r0, #0]
 80095b6:	2200      	movs	r2, #0
 80095b8:	b299      	uxth	r1, r3
 80095ba:	f361 020f 	bfi	r2, r1, #0, #16
 80095be:	0c1b      	lsrs	r3, r3, #16
 80095c0:	f363 421f 	bfi	r2, r3, #16, #16
{
 80095c4:	b082      	sub	sp, #8
#endif
}
 80095c6:	4610      	mov	r0, r2
 80095c8:	b002      	add	sp, #8
 80095ca:	4770      	bx	lr

080095cc <FF_GetVqdAvPIout>:
  {
    retqt = pHandle->VqdAvPIout;
  }
  return (retqt);
#else
  return (pHandle->VqdAvPIout);
 80095cc:	6883      	ldr	r3, [r0, #8]
 80095ce:	2200      	movs	r2, #0
 80095d0:	b299      	uxth	r1, r3
 80095d2:	f361 020f 	bfi	r2, r1, #0, #16
 80095d6:	0c1b      	lsrs	r3, r3, #16
 80095d8:	f363 421f 	bfi	r2, r3, #16, #16
{
 80095dc:	b082      	sub	sp, #8
#endif
}
 80095de:	4610      	mov	r0, r2
 80095e0:	b002      	add	sp, #8
 80095e2:	4770      	bx	lr

080095e4 <MCPA_flushDataLog>:
#endif
    uint32_t *logValue;
    uint16_t *logValue16;
    uint8_t i;

    if (pHandle->bufferIndex > 0U)
 80095e4:	8b03      	ldrh	r3, [r0, #24]
 80095e6:	b19b      	cbz	r3, 8009610 <MCPA_flushDataLog+0x2c>
{
 80095e8:	b570      	push	{r4, r5, r6, lr}
    {  /* If buffer is allocated, we must send it */
      if (pHandle->MFRateBuff == 254U) /* In case of flush, we must respect the packet format to allow
 80095ea:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
                                          proper decoding */
      {
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
        {
         logValue = (uint32_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 80095ee:	6941      	ldr	r1, [r0, #20]
      if (pHandle->MFRateBuff == 254U) /* In case of flush, we must respect the packet format to allow
 80095f0:	2afe      	cmp	r2, #254	@ 0xfe
 80095f2:	4604      	mov	r4, r0
 80095f4:	d00d      	beq.n	8009612 <MCPA_flushDataLog+0x2e>
      else
      {
        /* Nothing to do */
      }
      logValue16 = (uint16_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
      *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after
 80095f6:	f894 202a 	ldrb.w	r2, [r4, #42]	@ 0x2a
 80095fa:	52ca      	strh	r2, [r1, r3]
                                          the MARK */
      pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer,
 80095fc:	8b22      	ldrh	r2, [r4, #24]
 80095fe:	6820      	ldr	r0, [r4, #0]
 8009600:	3202      	adds	r2, #2
 8009602:	2309      	movs	r3, #9
 8009604:	6845      	ldr	r5, [r0, #4]
 8009606:	b292      	uxth	r2, r2
 8009608:	47a8      	blx	r5
                                             pHandle->bufferIndex + 2U, MCTL_ASYNC);
      pHandle->bufferIndex = 0U;
 800960a:	2300      	movs	r3, #0
 800960c:	8323      	strh	r3, [r4, #24]
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
}
 800960e:	bd70      	pop	{r4, r5, r6, pc}
 8009610:	4770      	bx	lr
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8009612:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 8009616:	f890 c028 	ldrb.w	ip, [r0, #40]	@ 0x28
 800961a:	4494      	add	ip, r2
 800961c:	4562      	cmp	r2, ip
 800961e:	daea      	bge.n	80095f6 <MCPA_flushDataLog+0x12>
         *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8009620:	6886      	ldr	r6, [r0, #8]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8009622:	6905      	ldr	r5, [r0, #16]
         *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8009624:	f856 0022 	ldr.w	r0, [r6, r2, lsl #2]
 8009628:	6800      	ldr	r0, [r0, #0]
 800962a:	50c8      	str	r0, [r1, r3]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 800962c:	5ca8      	ldrb	r0, [r5, r2]
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 800962e:	3201      	adds	r2, #1
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8009630:	4403      	add	r3, r0
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8009632:	b2d2      	uxtb	r2, r2
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8009634:	b29b      	uxth	r3, r3
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8009636:	4562      	cmp	r2, ip
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8009638:	8323      	strh	r3, [r4, #24]
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 800963a:	dbf3      	blt.n	8009624 <MCPA_flushDataLog+0x40>
 800963c:	e7db      	b.n	80095f6 <MCPA_flushDataLog+0x12>
 800963e:	bf00      	nop

08009640 <MCPA_cfgLog>:
  *
  * @param  *pHandle Pointer to the MCPA Handle
  * @param  *cfgdata Configuration of the Async communication
  */
uint8_t MCPA_cfgLog(MCPA_Handle_t *pHandle, uint8_t *cfgdata)
{
 8009640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint8_t i;
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF) */
    uint16_t newID, buffSize;
    uint8_t *pCfgData = cfgdata;

    buffSize = *((uint16_t *)pCfgData); //cstat !MISRAC2012-Rule-11.3
 8009644:	880f      	ldrh	r7, [r1, #0]
{
 8009646:	4604      	mov	r4, r0

    if (buffSize == 0U)
 8009648:	2f00      	cmp	r7, #0
 800964a:	d046      	beq.n	80096da <MCPA_cfgLog+0x9a>
    { 
      /* Switch Off condition */
      MCPA_stopDataLog(pHandle);
    }
    else if (buffSize > pHandle->pTransportLayer->txAsyncMaxPayload)
 800964c:	6803      	ldr	r3, [r0, #0]
 800964e:	89db      	ldrh	r3, [r3, #14]
 8009650:	42bb      	cmp	r3, r7
 8009652:	d33f      	bcc.n	80096d4 <MCPA_cfgLog+0x94>
    {
      result = MCP_ERROR_NO_TXASYNC_SPACE;
    }
    else
    {
      pHandle->HFRate = *((uint8_t *)&pCfgData[2]);
 8009654:	788b      	ldrb	r3, [r1, #2]
 8009656:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
      pHandle->HFNum  = *((uint8_t *)&pCfgData[3]);
 800965a:	f891 8003 	ldrb.w	r8, [r1, #3]
 800965e:	f880 8023 	strb.w	r8, [r0, #35]	@ 0x23
      pHandle->MFRate = *((uint8_t *)&pCfgData[4]);
 8009662:	790b      	ldrb	r3, [r1, #4]
 8009664:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
      pHandle->MFNum  = *((uint8_t *)&pCfgData[5]);
 8009668:	794b      	ldrb	r3, [r1, #5]
      pCfgData = &pCfgData[6]; /* Start of the HF IDs */

      if ((pHandle->HFNum + pHandle->MFNum) <= pHandle->nbrOfDataLog)
 800966a:	7f82      	ldrb	r2, [r0, #30]
      pHandle->MFNum  = *((uint8_t *)&pCfgData[5]);
 800966c:	f880 3027 	strb.w	r3, [r0, #39]	@ 0x27
      if ((pHandle->HFNum + pHandle->MFNum) <= pHandle->nbrOfDataLog)
 8009670:	4443      	add	r3, r8
 8009672:	4293      	cmp	r3, r2
 8009674:	dc57      	bgt.n	8009726 <MCPA_cfgLog+0xe6>
      pCfgData = &pCfgData[6]; /* Start of the HF IDs */
 8009676:	1d8e      	adds	r6, r1, #6
      {
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8009678:	2b00      	cmp	r3, #0
 800967a:	d057      	beq.n	800972c <MCPA_cfgLog+0xec>
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF) */
 800967c:	f04f 0800 	mov.w	r8, #0
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8009680:	4645      	mov	r5, r8
 8009682:	e011      	b.n	80096a8 <MCPA_cfgLog+0x68>
        {
          newID = *((uint16_t *)pCfgData); //cstat !MISRAC2012-Rule-11.3
          (void)RI_GetPtrReg(newID, &pHandle->dataPtrTable[i]);
          /* HF Data are fixed to 2 bytes */
          pHandle->dataSizeTable[i] = (i < pHandle->HFNum ) ? 2U : RI_GetIDSize(newID);
 8009684:	68e3      	ldr	r3, [r4, #12]
 8009686:	5558      	strb	r0, [r3, r5]
          pCfgData++; /* Point to the next UID */
          pCfgData++;
          logSize = logSize+pHandle->dataSizeTable[i];
 8009688:	68e2      	ldr	r2, [r4, #12]
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 800968a:	f894 3023 	ldrb.w	r3, [r4, #35]	@ 0x23
 800968e:	f894 1027 	ldrb.w	r1, [r4, #39]	@ 0x27
          logSize = logSize+pHandle->dataSizeTable[i];
 8009692:	5d52      	ldrb	r2, [r2, r5]
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8009694:	f105 0c01 	add.w	ip, r5, #1
 8009698:	fa5f f58c 	uxtb.w	r5, ip
 800969c:	440b      	add	r3, r1
          logSize = logSize+pHandle->dataSizeTable[i];
 800969e:	4442      	add	r2, r8
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 80096a0:	429d      	cmp	r5, r3
          logSize = logSize+pHandle->dataSizeTable[i];
 80096a2:	fa1f f882 	uxth.w	r8, r2
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 80096a6:	da11      	bge.n	80096cc <MCPA_cfgLog+0x8c>
          newID = *((uint16_t *)pCfgData); //cstat !MISRAC2012-Rule-11.3
 80096a8:	f836 9b02 	ldrh.w	r9, [r6], #2
          (void)RI_GetPtrReg(newID, &pHandle->dataPtrTable[i]);
 80096ac:	6861      	ldr	r1, [r4, #4]
 80096ae:	4648      	mov	r0, r9
 80096b0:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 80096b4:	f7fd fe3e 	bl	8007334 <RI_GetPtrReg>
          pHandle->dataSizeTable[i] = (i < pHandle->HFNum ) ? 2U : RI_GetIDSize(newID);
 80096b8:	f894 3023 	ldrb.w	r3, [r4, #35]	@ 0x23
 80096bc:	42ab      	cmp	r3, r5
 80096be:	f04f 0002 	mov.w	r0, #2
 80096c2:	d8df      	bhi.n	8009684 <MCPA_cfgLog+0x44>
 80096c4:	4648      	mov	r0, r9
 80096c6:	f7fd fe29 	bl	800731c <RI_GetIDSize>
 80096ca:	e7db      	b.n	8009684 <MCPA_cfgLog+0x44>
        }

        /* Smallest packet must be able to contain logSize Markbyte AsyncID and TimeStamp */
        if (buffSize < (logSize + 2U + 4U))
 80096cc:	f108 0206 	add.w	r2, r8, #6
 80096d0:	4297      	cmp	r7, r2
 80096d2:	d210      	bcs.n	80096f6 <MCPA_cfgLog+0xb6>
      result = MCP_ERROR_NO_TXASYNC_SPACE;
 80096d4:	2009      	movs	r0, #9
    }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
  return (result);
}
 80096d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (pHandle->bufferIndex > 0U)
 80096da:	8b03      	ldrh	r3, [r0, #24]
  pHandle->Mark = 0U;
 80096dc:	f880 7029 	strb.w	r7, [r0, #41]	@ 0x29
  if (pHandle->bufferIndex > 0U)
 80096e0:	b9ab      	cbnz	r3, 800970e <MCPA_cfgLog+0xce>
  pHandle->bufferIndex = 0U;
 80096e2:	2300      	movs	r3, #0
 80096e4:	8323      	strh	r3, [r4, #24]
  pHandle->MarkBuff    = 0U;
 80096e6:	f884 302a 	strb.w	r3, [r4, #42]	@ 0x2a
  pHandle->HFIndex     = 0U;
 80096ea:	77e3      	strb	r3, [r4, #31]
  pHandle->HFRateBuff  = 0U; /* We do not want to miss any sample at the restart */
 80096ec:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
  uint8_t result = MCP_CMD_OK;
 80096f0:	2000      	movs	r0, #0
}
 80096f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          pHandle->bufferTxTrigger = buffSize-logSize - 2U; /* 2 is required to add the last Mark byte and NUL
 80096f6:	3f02      	subs	r7, #2
 80096f8:	eba7 0708 	sub.w	r7, r7, r8
 80096fc:	8367      	strh	r7, [r4, #26]
          pHandle->Mark = *((uint8_t *)pCfgData);
 80096fe:	7833      	ldrb	r3, [r6, #0]
 8009700:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
          if (0U == pHandle->Mark)
 8009704:	2b00      	cmp	r3, #0
 8009706:	d1f3      	bne.n	80096f0 <MCPA_cfgLog+0xb0>
  if (pHandle->bufferIndex > 0U)
 8009708:	8b23      	ldrh	r3, [r4, #24]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d0e9      	beq.n	80096e2 <MCPA_cfgLog+0xa2>
    logValue16 = (uint16_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 800970e:	6961      	ldr	r1, [r4, #20]
    *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after
 8009710:	f894 202a 	ldrb.w	r2, [r4, #42]	@ 0x2a
 8009714:	52ca      	strh	r2, [r1, r3]
    pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer,
 8009716:	8b22      	ldrh	r2, [r4, #24]
 8009718:	6820      	ldr	r0, [r4, #0]
 800971a:	3202      	adds	r2, #2
 800971c:	6845      	ldr	r5, [r0, #4]
 800971e:	b292      	uxth	r2, r2
 8009720:	2309      	movs	r3, #9
 8009722:	47a8      	blx	r5
 8009724:	e7dd      	b.n	80096e2 <MCPA_cfgLog+0xa2>
        result = MCP_ERROR_BAD_RAW_FORMAT;
 8009726:	200a      	movs	r0, #10
}
 8009728:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 800972c:	2206      	movs	r2, #6
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF) */
 800972e:	4698      	mov	r8, r3
 8009730:	e7ce      	b.n	80096d0 <MCPA_cfgLog+0x90>
 8009732:	bf00      	nop

08009734 <NTC_Clear>:
    /* nothing to do */
  }
  else
  {
#endif
    pHandle->hAvTemp_d = 0U;
 8009734:	2300      	movs	r3, #0
 8009736:	8043      	strh	r3, [r0, #2]
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
}
 8009738:	4770      	bx	lr
 800973a:	bf00      	nop

0800973c <NTC_Init>:
    if (REAL_SENSOR == pHandle->bSensorType)
 800973c:	7802      	ldrb	r2, [r0, #0]
{
 800973e:	b508      	push	{r3, lr}
    if (REAL_SENSOR == pHandle->bSensorType)
 8009740:	b122      	cbz	r2, 800974c <NTC_Init+0x10>
      pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 8009742:	8882      	ldrh	r2, [r0, #4]
 8009744:	8042      	strh	r2, [r0, #2]
      pHandle->hFaultState = MC_NO_ERROR;
 8009746:	2100      	movs	r1, #0
 8009748:	8101      	strh	r1, [r0, #8]
}
 800974a:	bd08      	pop	{r3, pc}
      NTC_Clear(pHandle);
 800974c:	f7ff fff2 	bl	8009734 <NTC_Clear>
}
 8009750:	bd08      	pop	{r3, pc}
 8009752:	bf00      	nop

08009754 <NTC_GetAvTemp_C>:
  else
  {
#endif
    int32_t wTemp;

    if (REAL_SENSOR == pHandle->bSensorType)
 8009754:	7803      	ldrb	r3, [r0, #0]
 8009756:	b95b      	cbnz	r3, 8009770 <NTC_GetAvTemp_C+0x1c>
    {
      wTemp = (int32_t)pHandle->hAvTemp_d;
 8009758:	8842      	ldrh	r2, [r0, #2]
      wTemp -= ((int32_t)pHandle->wV0);
 800975a:	6941      	ldr	r1, [r0, #20]
      wTemp *= pHandle->hSensitivity;
 800975c:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
#ifndef FULL_MISRA_C_COMPLIANCY_NTC_TEMP
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      wTemp = (wTemp >> 16) + (int32_t)pHandle->hT0;
 8009760:	8b00      	ldrh	r0, [r0, #24]
      wTemp -= ((int32_t)pHandle->wV0);
 8009762:	1a52      	subs	r2, r2, r1
      wTemp *= pHandle->hSensitivity;
 8009764:	fb02 f303 	mul.w	r3, r2, r3
      wTemp = (wTemp >> 16) + (int32_t)pHandle->hT0;
 8009768:	eb00 4023 	add.w	r0, r0, r3, asr #16
    returnValue = (int16_t)wTemp;
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (returnValue);
}
 800976c:	b200      	sxth	r0, r0
 800976e:	4770      	bx	lr
      wTemp = (int32_t)pHandle->hExpectedTemp_C;
 8009770:	88c0      	ldrh	r0, [r0, #6]
}
 8009772:	b200      	sxth	r0, r0
 8009774:	4770      	bx	lr
 8009776:	bf00      	nop

08009778 <PID_HandleInit>:
  {
#endif
    pHandle->hKpGain =  pHandle->hDefKpGain;
    pHandle->hKiGain =  pHandle->hDefKiGain;
    pHandle->hKdGain =  pHandle->hDefKdGain;
    pHandle->wIntegralTerm = 0;
 8009778:	2300      	movs	r3, #0
    pHandle->hKpGain =  pHandle->hDefKpGain;
 800977a:	6801      	ldr	r1, [r0, #0]
    pHandle->hKdGain =  pHandle->hDefKdGain;
 800977c:	8c02      	ldrh	r2, [r0, #32]
    pHandle->hKpGain =  pHandle->hDefKpGain;
 800977e:	6041      	str	r1, [r0, #4]
    pHandle->hKdGain =  pHandle->hDefKdGain;
 8009780:	8442      	strh	r2, [r0, #34]	@ 0x22
    pHandle->wIntegralTerm = 0;
 8009782:	6083      	str	r3, [r0, #8]
    pHandle->wPrevProcessVarError = 0;
 8009784:	6283      	str	r3, [r0, #40]	@ 0x28
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8009786:	4770      	bx	lr

08009788 <PID_SetKP>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKpGain = hKpGain;
 8009788:	8081      	strh	r1, [r0, #4]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 800978a:	4770      	bx	lr

0800978c <PID_SetKI>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKiGain = hKiGain;
 800978c:	80c1      	strh	r1, [r0, #6]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 800978e:	4770      	bx	lr

08009790 <PID_GetKP>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKpGain);
#else
  return (pHandle->hKpGain);
#endif
}
 8009790:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8009794:	4770      	bx	lr
 8009796:	bf00      	nop

08009798 <PID_GetKI>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKiGain);
#else
  return (pHandle->hKiGain);
#endif
}
 8009798:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800979c:	4770      	bx	lr
 800979e:	bf00      	nop

080097a0 <PID_SetIntegralTerm>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wIntegralTerm = wIntegralTermValue;
 80097a0:	6081      	str	r1, [r0, #8]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return;
}
 80097a2:	4770      	bx	lr

080097a4 <PID_GetKPDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKpDivisorPOW2);
#else
  return (pHandle->hKpDivisorPOW2);
#endif
}
 80097a4:	8b80      	ldrh	r0, [r0, #28]
 80097a6:	4770      	bx	lr

080097a8 <PID_SetKPDivisorPOW2>:
  }
  else
  {
#endif
    pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
    pHandle->hKpDivisor = (((uint16_t)1) << hKpDivisorPOW2);
 80097a8:	2301      	movs	r3, #1
 80097aa:	408b      	lsls	r3, r1
    pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
 80097ac:	8381      	strh	r1, [r0, #28]
    pHandle->hKpDivisor = (((uint16_t)1) << hKpDivisorPOW2);
 80097ae:	8303      	strh	r3, [r0, #24]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 80097b0:	4770      	bx	lr
 80097b2:	bf00      	nop

080097b4 <PID_GetKIDivisor>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKiDivisor);
#else
  return (pHandle->hKiDivisor);
#endif
}
 80097b4:	8b40      	ldrh	r0, [r0, #26]
 80097b6:	4770      	bx	lr

080097b8 <PID_GetKIDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKiDivisorPOW2);
#else
  return (pHandle->hKiDivisorPOW2);
#endif
}
 80097b8:	8bc0      	ldrh	r0, [r0, #30]
 80097ba:	4770      	bx	lr

080097bc <PID_SetLowerIntegralTermLimit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wLowerIntegralLimit = wLowerLimit;
 80097bc:	6101      	str	r1, [r0, #16]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 80097be:	4770      	bx	lr

080097c0 <PID_SetUpperIntegralTermLimit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wUpperIntegralLimit = wUpperLimit;
 80097c0:	60c1      	str	r1, [r0, #12]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 80097c2:	4770      	bx	lr

080097c4 <PID_SetKIDivisorPOW2>:
{
 80097c4:	b538      	push	{r3, r4, r5, lr}
    uint32_t wKiDiv = (((uint32_t)1) << hKiDivisorPOW2);
 80097c6:	2301      	movs	r3, #1
{
 80097c8:	460c      	mov	r4, r1
    uint32_t wKiDiv = (((uint32_t)1) << hKiDivisorPOW2);
 80097ca:	408b      	lsls	r3, r1
    PID_SetUpperIntegralTermLimit(pHandle, (int32_t)INT16_MAX * (int32_t)wKiDiv);
 80097cc:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80097d0:	40a1      	lsls	r1, r4
    pHandle->hKiDivisorPOW2 = hKiDivisorPOW2;
 80097d2:	83c4      	strh	r4, [r0, #30]
    pHandle->hKiDivisor = (uint16_t)wKiDiv;
 80097d4:	8343      	strh	r3, [r0, #26]
{
 80097d6:	4605      	mov	r5, r0
    PID_SetUpperIntegralTermLimit(pHandle, (int32_t)INT16_MAX * (int32_t)wKiDiv);
 80097d8:	f7ff fff2 	bl	80097c0 <PID_SetUpperIntegralTermLimit>
    PID_SetLowerIntegralTermLimit(pHandle, (int32_t)(-INT16_MAX) * (int32_t)wKiDiv);
 80097dc:	4902      	ldr	r1, [pc, #8]	@ (80097e8 <PID_SetKIDivisorPOW2+0x24>)
 80097de:	4628      	mov	r0, r5
 80097e0:	40a1      	lsls	r1, r4
 80097e2:	f7ff ffeb 	bl	80097bc <PID_SetLowerIntegralTermLimit>
}
 80097e6:	bd38      	pop	{r3, r4, r5, pc}
 80097e8:	ffff8001 	.word	0xffff8001

080097ec <PID_SetLowerOutputLimit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hLowerOutputLimit = hLowerLimit;
 80097ec:	82c1      	strh	r1, [r0, #22]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 80097ee:	4770      	bx	lr

080097f0 <PID_SetUpperOutputLimit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hUpperOutputLimit = hUpperLimit;
 80097f0:	8281      	strh	r1, [r0, #20]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 80097f2:	4770      	bx	lr

080097f4 <PID_SetKD>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKdGain = hKdGain;
 80097f4:	8441      	strh	r1, [r0, #34]	@ 0x22
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 80097f6:	4770      	bx	lr

080097f8 <PID_GetKD>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKdGain);
#else
  return (pHandle->hKdGain);
#endif
}
 80097f8:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	@ 0x22
 80097fc:	4770      	bx	lr
 80097fe:	bf00      	nop

08009800 <PID_GetKDDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKdDivisorPOW2);
#else
  return (pHandle->hKdDivisorPOW2);
#endif
}
 8009800:	8cc0      	ldrh	r0, [r0, #38]	@ 0x26
 8009802:	4770      	bx	lr

08009804 <PID_SetKDDivisorPOW2>:
  }
  else
  {
#endif
    pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
    pHandle->hKdDivisor = (((uint16_t)1) << hKdDivisorPOW2);
 8009804:	2301      	movs	r3, #1
 8009806:	408b      	lsls	r3, r1
    pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
 8009808:	84c1      	strh	r1, [r0, #38]	@ 0x26
    pHandle->hKdDivisor = (((uint16_t)1) << hKdDivisorPOW2);
 800980a:	8483      	strh	r3, [r0, #36]	@ 0x24
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 800980c:	4770      	bx	lr
 800980e:	bf00      	nop

08009810 <PI_Controller>:
    int32_t wDischarge = 0;
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

    /* Proportional term computation*/
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8009810:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
{
 8009814:	4603      	mov	r3, r0
 8009816:	b530      	push	{r4, r5, lr}

    /* Integral term computation */
    if (0 == pHandle->hKiGain)
 8009818:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 800981c:	f9b3 c016 	ldrsh.w	ip, [r3, #22]
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 8009820:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8009824:	fb01 f202 	mul.w	r2, r1, r2
    if (0 == pHandle->hKiGain)
 8009828:	b17c      	cbz	r4, 800984a <PI_Controller+0x3a>
    {
      pHandle->wIntegralTerm = 0;
    }
    else
    {
      wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 800982a:	fb04 f101 	mul.w	r1, r4, r1
        {
          /* Nothing to do */
        }
      }

      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 800982e:	e9d3 5402 	ldrd	r5, r4, [r3, #8]
      if (wIntegral_sum_temp < 0)
 8009832:	eb15 0e01 	adds.w	lr, r5, r1
 8009836:	d41d      	bmi.n	8009874 <PI_Controller+0x64>
            wIntegral_sum_temp = -INT32_MAX;
 8009838:	420d      	tst	r5, r1
 800983a:	4914      	ldr	r1, [pc, #80]	@ (800988c <PI_Controller+0x7c>)
 800983c:	bf48      	it	mi
 800983e:	468e      	movmi	lr, r1
      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 8009840:	45a6      	cmp	lr, r4
 8009842:	dc02      	bgt.n	800984a <PI_Controller+0x3a>
      {
        pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
      }
      else if (wIntegral_sum_temp < pHandle->wLowerIntegralLimit)
 8009844:	691c      	ldr	r4, [r3, #16]
 8009846:	4574      	cmp	r4, lr
 8009848:	dd1d      	ble.n	8009886 <PI_Controller+0x76>
    /* WARNING: the below instruction is not MISRA compliant, user should verify
               that Cortex-M3 assembly instruction ASR (arithmetic shift right)
               is used by the compiler to perform the shifts (instead of LSR
               logical shift right)*/
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    wOutput_32 = (wProportional_Term >> pHandle->hKpDivisorPOW2) + (pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2);
 800984a:	8b99      	ldrh	r1, [r3, #28]
 800984c:	410a      	asrs	r2, r1
 800984e:	8bd9      	ldrh	r1, [r3, #30]
 8009850:	fa44 f101 	asr.w	r1, r4, r1
 8009854:	440a      	add	r2, r1
#else
    wOutput_32 = (wProportional_Term / (int32_t)pHandle->hKpDivisor)
              + (pHandle->wIntegralTerm / (int32_t)pHandle->hKiDivisor);
#endif

    if (wOutput_32 > hUpperOutputLimit)
 8009856:	4290      	cmp	r0, r2
 8009858:	da03      	bge.n	8009862 <PI_Controller+0x52>
    {
      wDischarge = hUpperOutputLimit - wOutput_32;
 800985a:	1a82      	subs	r2, r0, r2
    else
    {
      /* Nothing to do here */
    }

    pHandle->wIntegralTerm += wDischarge;
 800985c:	4414      	add	r4, r2
 800985e:	609c      	str	r4, [r3, #8]
    returnValue = (int16_t)wOutput_32;
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return (returnValue);
}
 8009860:	bd30      	pop	{r4, r5, pc}
    else if (wOutput_32 < hLowerOutputLimit)
 8009862:	4594      	cmp	ip, r2
      wDischarge = hLowerOutputLimit - wOutput_32;
 8009864:	bfc5      	ittet	gt
 8009866:	ebac 0202 	subgt.w	r2, ip, r2
    pHandle->wIntegralTerm += wDischarge;
 800986a:	18a4      	addgt	r4, r4, r2
    returnValue = (int16_t)wOutput_32;
 800986c:	b210      	sxthle	r0, r2
      wOutput_32 = hLowerOutputLimit;
 800986e:	4660      	movgt	r0, ip
    pHandle->wIntegralTerm += wDischarge;
 8009870:	609c      	str	r4, [r3, #8]
}
 8009872:	bd30      	pop	{r4, r5, pc}
        if (pHandle->wIntegralTerm > 0)
 8009874:	2d00      	cmp	r5, #0
 8009876:	dde3      	ble.n	8009840 <PI_Controller+0x30>
          if (wIntegral_Term > 0)
 8009878:	2900      	cmp	r1, #0
 800987a:	dde1      	ble.n	8009840 <PI_Controller+0x30>
      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 800987c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009880:	428c      	cmp	r4, r1
 8009882:	d1e2      	bne.n	800984a <PI_Controller+0x3a>
 8009884:	46a6      	mov	lr, r4
        pHandle->wIntegralTerm = wIntegral_sum_temp;
 8009886:	4674      	mov	r4, lr
 8009888:	e7df      	b.n	800984a <PI_Controller+0x3a>
 800988a:	bf00      	nop
 800988c:	80000001 	.word	0x80000001

08009890 <PQD_CalcElMotorPower>:
  }
  else
  {
#endif
    int32_t wAux;
    qd_t Iqd = pHandle->pFOCVars->Iqd;
 8009890:	6882      	ldr	r2, [r0, #8]
{
 8009892:	b500      	push	{lr}
    qd_t Vqd = pHandle->pFOCVars->Vqd;

    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 8009894:	89d1      	ldrh	r1, [r2, #14]
 8009896:	f8b2 e018 	ldrh.w	lr, [r2, #24]
    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
 800989a:	8993      	ldrh	r3, [r2, #12]
 800989c:	f8b2 c016 	ldrh.w	ip, [r2, #22]
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 80098a0:	fb11 f20e 	smulbb	r2, r1, lr
    wAux /= 65536;
 80098a4:	fb13 230c 	smlabb	r3, r3, ip, r2
 80098a8:	2b00      	cmp	r3, #0

    /* pHandle->hAvrgElMotorPower += (wAux - pHandle->hAvrgElMotorPower) >> 4 */
    pHandle->hAvrgElMotorPower += (int16_t)((wAux - (int32_t)pHandle->hAvrgElMotorPower) / 16);
 80098aa:	f9b0 2000 	ldrsh.w	r2, [r0]
    wAux /= 65536;
 80098ae:	bfbc      	itt	lt
 80098b0:	f503 437f 	addlt.w	r3, r3, #65280	@ 0xff00
 80098b4:	33ff      	addlt	r3, #255	@ 0xff
    pHandle->hAvrgElMotorPower += (int16_t)((wAux - (int32_t)pHandle->hAvrgElMotorPower) / 16);
 80098b6:	ebd2 4323 	rsbs	r3, r2, r3, asr #16
 80098ba:	bf48      	it	mi
 80098bc:	330f      	addmi	r3, #15
 80098be:	eb02 1223 	add.w	r2, r2, r3, asr #4
 80098c2:	8002      	strh	r2, [r0, #0]

#ifdef NULL_PTR_CHECK_PQD_MOT_POW_MEAS
  }
#endif
}
 80098c4:	f85d fb04 	ldr.w	pc, [sp], #4

080098c8 <PQD_Clear>:
    /* nothing to do */
  }
  else
  {
#endif
    pHandle->hAvrgElMotorPower = 0;
 80098c8:	2300      	movs	r3, #0
 80098ca:	8003      	strh	r3, [r0, #0]
#ifdef NULL_PTR_CHECK_MOT_POW_MES
  }
#endif
}
 80098cc:	4770      	bx	lr
 80098ce:	bf00      	nop

080098d0 <PQD_GetAvrgElMotorPowerW>:
  * 
  * @param pHandle pointer on the related component instance.
  * @retval float_t The average measured motor power expressed in Watts.
  */
__weak float_t PQD_GetAvrgElMotorPowerW(const PQD_MotorPowMeas_Handle_t *pHandle)
{
 80098d0:	b510      	push	{r4, lr}
  else
  {
#endif

  /* First perform an integer multiplication, then a float one. */
  PowerW = ((float_t)pHandle->hAvrgElMotorPower * (float_t)VBS_GetAvBusVoltage_V(pHandle->pVBS)) * pHandle->ConvFact;
 80098d2:	f9b0 3000 	ldrsh.w	r3, [r0]
 80098d6:	ee07 3a90 	vmov	s15, r3
{
 80098da:	ed2d 8b02 	vpush	{d8}
 80098de:	4604      	mov	r4, r0
  PowerW = ((float_t)pHandle->hAvrgElMotorPower * (float_t)VBS_GetAvBusVoltage_V(pHandle->pVBS)) * pHandle->ConvFact;
 80098e0:	68c0      	ldr	r0, [r0, #12]
 80098e2:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80098e6:	f7ff fdb9 	bl	800945c <VBS_GetAvBusVoltage_V>
 80098ea:	edd4 7a01 	vldr	s15, [r4, #4]
 80098ee:	ee68 7a27 	vmul.f32	s15, s16, s15

#ifdef NULL_PTR_CHECK_PQD_MOT_POW_MEAS
  }
#endif
  return (PowerW);
}
 80098f2:	ecbd 8b02 	vpop	{d8}
  PowerW = ((float_t)pHandle->hAvrgElMotorPower * (float_t)VBS_GetAvBusVoltage_V(pHandle->pVBS)) * pHandle->ConvFact;
 80098f6:	ee00 0a10 	vmov	s0, r0
 80098fa:	eeb8 0a40 	vcvt.f32.u32	s0, s0
}
 80098fe:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009902:	bd10      	pop	{r4, pc}

08009904 <startTimers>:
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
*/
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return (READ_BIT(RCC->APB1ENR, Periphs) == Periphs);
 8009904:	4b17      	ldr	r3, [pc, #92]	@ (8009964 <startTimers+0x60>)
 8009906:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
  uint32_t isTIM2ClockOn;
  uint32_t trigOut;

  isTIM2ClockOn = LL_APB1_GRP1_IsEnabledClock(LL_APB1_GRP1_PERIPH_TIM2);
  if ((uint32_t)0 == isTIM2ClockOn)
 8009908:	07d2      	lsls	r2, r2, #31
 800990a:	d415      	bmi.n	8009938 <startTimers+0x34>
  SET_BIT(RCC->APB1ENR, Periphs);
 800990c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800990e:	f042 0201 	orr.w	r2, r2, #1
 8009912:	641a      	str	r2, [r3, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8009914:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 8009916:	b082      	sub	sp, #8
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8009918:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800991c:	f002 0201 	and.w	r2, r2, #1
 8009920:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8009922:	9a01      	ldr	r2, [sp, #4]
 8009924:	694a      	ldr	r2, [r1, #20]
 8009926:	f042 0201 	orr.w	r2, r2, #1
 800992a:	614a      	str	r2, [r1, #20]
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 800992c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800992e:	f022 0201 	bic.w	r2, r2, #1
 8009932:	641a      	str	r2, [r3, #64]	@ 0x40
    trigOut = LL_TIM_ReadReg(TIM2, CR2) & TIM_CR2_MMS;
    LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_UPDATE);
    LL_TIM_GenerateEvent_UPDATE(TIM2);
    LL_TIM_SetTriggerOutput(TIM2, trigOut);
  }
}
 8009934:	b002      	add	sp, #8
 8009936:	4770      	bx	lr
    trigOut = LL_TIM_ReadReg(TIM2, CR2) & TIM_CR2_MMS;
 8009938:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800993c:	685a      	ldr	r2, [r3, #4]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800993e:	6859      	ldr	r1, [r3, #4]
 8009940:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8009944:	f041 0120 	orr.w	r1, r1, #32
 8009948:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800994a:	6959      	ldr	r1, [r3, #20]
 800994c:	f041 0101 	orr.w	r1, r1, #1
 8009950:	6159      	str	r1, [r3, #20]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8009952:	6859      	ldr	r1, [r3, #4]
 8009954:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8009958:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 800995c:	430a      	orrs	r2, r1
 800995e:	605a      	str	r2, [r3, #4]
 8009960:	4770      	bx	lr
 8009962:	bf00      	nop
 8009964:	40023800 	.word	0x40023800

08009968 <waitForPolarizationEnd>:
  {
#endif
    uint16_t hCalibrationPeriodCounter;
    uint16_t hMaxPeriodsNumber;

    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 8009968:	3201      	adds	r2, #1
{
 800996a:	b570      	push	{r4, r5, r6, lr}
    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 800996c:	0852      	lsrs	r2, r2, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 800996e:	f06f 0602 	mvn.w	r6, #2
 8009972:	0155      	lsls	r5, r2, #5
 8009974:	6106      	str	r6, [r0, #16]

    /* Wait for NB_CONVERSIONS to be executed */
    LL_TIM_ClearFlag_CC1(TIMx);
    hCalibrationPeriodCounter = 0u;
 8009976:	2200      	movs	r2, #0
    while (*cnt < NB_CONVERSIONS)
 8009978:	f893 c000 	ldrb.w	ip, [r3]
 800997c:	f1bc 0f0f 	cmp.w	ip, #15
    {
      if ((uint32_t)ERROR == LL_TIM_IsActiveFlag_CC1(TIMx))
      {
        LL_TIM_ClearFlag_CC1(TIMx);
        hCalibrationPeriodCounter++;
 8009980:	f102 0e01 	add.w	lr, r2, #1
    while (*cnt < NB_CONVERSIONS)
 8009984:	d80c      	bhi.n	80099a0 <waitForPolarizationEnd+0x38>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8009986:	6904      	ldr	r4, [r0, #16]
 8009988:	07a4      	lsls	r4, r4, #30
 800998a:	d5f5      	bpl.n	8009978 <waitForPolarizationEnd+0x10>
        hCalibrationPeriodCounter++;
 800998c:	fa1f f28e 	uxth.w	r2, lr
        if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 8009990:	4295      	cmp	r5, r2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8009992:	6106      	str	r6, [r0, #16]
 8009994:	d8f0      	bhi.n	8009978 <waitForPolarizationEnd+0x10>
        {
          if (*cnt < NB_CONVERSIONS)
 8009996:	781c      	ldrb	r4, [r3, #0]
 8009998:	2c0f      	cmp	r4, #15
 800999a:	d8ed      	bhi.n	8009978 <waitForPolarizationEnd+0x10>
          {
            *SWerror = 1u;
 800999c:	2301      	movs	r3, #1
 800999e:	800b      	strh	r3, [r1, #0]
      }
    }
#ifdef NULL_PTR_CHECK_POW_COM
  }
#endif
  }
 80099a0:	bd70      	pop	{r4, r5, r6, pc}
 80099a2:	bf00      	nop

080099a4 <R3_1_GetPhaseCurrents>:
  *
  */
__weak void R3_1_GetPhaseCurrents(PWMC_Handle_t *pHdl, ab_t* pStator_Currents)
{
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80099a4:	f8d0 30a0 	ldr.w	r3, [r0, #160]	@ 0xa0
{
 80099a8:	b470      	push	{r4, r5, r6}
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 80099aa:	e9d3 2400 	ldrd	r2, r4, [r3]
  CLEAR_BIT(TIMx->CCER, Channels);
 80099ae:	6a23      	ldr	r3, [r4, #32]
 80099b0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80099b4:	6223      	str	r3, [r4, #32]
  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);

  bSector = ( uint8_t )( pHandle->_Super.Sector );

  hReg1 =  (ADCx->JDR1)*2;
 80099b6:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
  hReg2 =  (ADCx->JDR2)*2;
 80099b8:	6c12      	ldr	r2, [r2, #64]	@ 0x40

  switch ( bSector )
 80099ba:	f890 407c 	ldrb.w	r4, [r0, #124]	@ 0x7c
  hReg1 =  (ADCx->JDR1)*2;
 80099be:	005b      	lsls	r3, r3, #1
  hReg2 =  (ADCx->JDR2)*2;
 80099c0:	0052      	lsls	r2, r2, #1
  hReg1 =  (ADCx->JDR1)*2;
 80099c2:	b29b      	uxth	r3, r3
  hReg2 =  (ADCx->JDR2)*2;
 80099c4:	b292      	uxth	r2, r2
  switch ( bSector )
 80099c6:	2c05      	cmp	r4, #5
 80099c8:	f200 809b 	bhi.w	8009b02 <R3_1_GetPhaseCurrents+0x15e>
 80099cc:	e8df f004 	tbb	[pc, r4]
 80099d0:	0323233f 	.word	0x0323233f
 80099d4:	3f03      	.short	0x3f03
    case SECTOR_4:
    case SECTOR_5:
    {
      /* Current on Phase C is not accessible     */
      /* Ia = PhaseAOffset - ADC converted value) */
      wAux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( hReg1 );
 80099d6:	f8d0 4088 	ldr.w	r4, [r0, #136]	@ 0x88
 80099da:	1ae4      	subs	r4, r4, r3
      /* Saturation of Ia */
      if ( wAux < -INT16_MAX )
 80099dc:	4b4d      	ldr	r3, [pc, #308]	@ (8009b14 <R3_1_GetPhaseCurrents+0x170>)
 80099de:	429c      	cmp	r4, r3
 80099e0:	da64      	bge.n	8009aac <R3_1_GetPhaseCurrents+0x108>
      {
        pStator_Currents->a = ( int16_t )wAux;
      }

      /* Ib = PhaseBOffset - ADC converted value) */
        wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg2 );
 80099e2:	f8d0 408c 	ldr.w	r4, [r0, #140]	@ 0x8c
 80099e6:	eba4 0c02 	sub.w	ip, r4, r2

      /* Saturation of Ib */
      if ( wAux < -INT16_MAX )
 80099ea:	4c4a      	ldr	r4, [pc, #296]	@ (8009b14 <R3_1_GetPhaseCurrents+0x170>)
 80099ec:	45a4      	cmp	ip, r4
    default:
    {
    }
    break;
  }
  pStator_Currents->a = -pStator_Currents->a;
 80099ee:	b29b      	uxth	r3, r3
      if ( wAux < -INT16_MAX )
 80099f0:	db49      	blt.n	8009a86 <R3_1_GetPhaseCurrents+0xe2>
      else  if ( wAux > INT16_MAX )
 80099f2:	f5bc 4f00 	cmp.w	ip, #32768	@ 0x8000
 80099f6:	db77      	blt.n	8009ae8 <R3_1_GetPhaseCurrents+0x144>
  pStator_Currents->a = -pStator_Currents->a;
 80099f8:	425d      	negs	r5, r3
 80099fa:	b22d      	sxth	r5, r5
 80099fc:	f647 7cff 	movw	ip, #32767	@ 0x7fff
  pStator_Currents->b = -pStator_Currents->b;
  pHandle->_Super.Ia = pStator_Currents->a;
  pHandle->_Super.Ib = pStator_Currents->b;
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8009a00:	4463      	add	r3, ip
  pStator_Currents->a = -pStator_Currents->a;
 8009a02:	800d      	strh	r5, [r1, #0]
  pStator_Currents->b = -pStator_Currents->b;
 8009a04:	804c      	strh	r4, [r1, #2]
  pHandle->_Super.Ia = pStator_Currents->a;
 8009a06:	f8a0 5062 	strh.w	r5, [r0, #98]	@ 0x62
  pHandle->_Super.Ib = pStator_Currents->b;
 8009a0a:	f8a0 4064 	strh.w	r4, [r0, #100]	@ 0x64
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8009a0e:	f8a0 3066 	strh.w	r3, [r0, #102]	@ 0x66
}
 8009a12:	bc70      	pop	{r4, r5, r6}
 8009a14:	4770      	bx	lr
      wAux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( hReg1 );
 8009a16:	f8d0 4088 	ldr.w	r4, [r0, #136]	@ 0x88
      if ( wAux < -INT16_MAX )
 8009a1a:	4e3e      	ldr	r6, [pc, #248]	@ (8009b14 <R3_1_GetPhaseCurrents+0x170>)
      wAux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( hReg1 );
 8009a1c:	1ae4      	subs	r4, r4, r3
      if ( wAux < -INT16_MAX )
 8009a1e:	42b4      	cmp	r4, r6
 8009a20:	db3e      	blt.n	8009aa0 <R3_1_GetPhaseCurrents+0xfc>
      else  if ( wAux > INT16_MAX )
 8009a22:	f5b4 4f00 	cmp.w	r4, #32768	@ 0x8000
 8009a26:	da55      	bge.n	8009ad4 <R3_1_GetPhaseCurrents+0x130>
  pStator_Currents->a = -pStator_Currents->a;
 8009a28:	b2a3      	uxth	r3, r4
 8009a2a:	425d      	negs	r5, r3
 8009a2c:	b22d      	sxth	r5, r5
      wAux = -wAux -  ( int32_t )pStator_Currents->a;
 8009a2e:	f8d0 6090 	ldr.w	r6, [r0, #144]	@ 0x90
 8009a32:	1b92      	subs	r2, r2, r6
 8009a34:	1b12      	subs	r2, r2, r4
      if ( wAux > INT16_MAX )
 8009a36:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8009a3a:	da3e      	bge.n	8009aba <R3_1_GetPhaseCurrents+0x116>
      else  if ( wAux < -INT16_MAX )
 8009a3c:	f512 4f00 	cmn.w	r2, #32768	@ 0x8000
 8009a40:	dd43      	ble.n	8009aca <R3_1_GetPhaseCurrents+0x126>
  pStator_Currents->b = -pStator_Currents->b;
 8009a42:	fa1f fc82 	uxth.w	ip, r2
 8009a46:	f1cc 0400 	rsb	r4, ip, #0
 8009a4a:	b224      	sxth	r4, r4
 8009a4c:	e7d8      	b.n	8009a00 <R3_1_GetPhaseCurrents+0x5c>
      wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg1 );
 8009a4e:	f8d0 508c 	ldr.w	r5, [r0, #140]	@ 0x8c
 8009a52:	1aed      	subs	r5, r5, r3
      if ( wAux < -INT16_MAX )
 8009a54:	4b2f      	ldr	r3, [pc, #188]	@ (8009b14 <R3_1_GetPhaseCurrents+0x170>)
 8009a56:	429d      	cmp	r5, r3
 8009a58:	db1c      	blt.n	8009a94 <R3_1_GetPhaseCurrents+0xf0>
      else  if ( wAux > INT16_MAX )
 8009a5a:	f5b5 4f00 	cmp.w	r5, #32768	@ 0x8000
 8009a5e:	da3e      	bge.n	8009ade <R3_1_GetPhaseCurrents+0x13a>
  pStator_Currents->b = -pStator_Currents->b;
 8009a60:	fa1f fc85 	uxth.w	ip, r5
 8009a64:	f1cc 0400 	rsb	r4, ip, #0
 8009a68:	b224      	sxth	r4, r4
      wAux = -wAux - ( int32_t )pStator_Currents->b;
 8009a6a:	f8d0 3090 	ldr.w	r3, [r0, #144]	@ 0x90
 8009a6e:	1ad3      	subs	r3, r2, r3
 8009a70:	1b5b      	subs	r3, r3, r5
      if ( wAux > INT16_MAX )
 8009a72:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009a76:	da24      	bge.n	8009ac2 <R3_1_GetPhaseCurrents+0x11e>
      else  if ( wAux < -INT16_MAX )
 8009a78:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8009a7c:	dd3c      	ble.n	8009af8 <R3_1_GetPhaseCurrents+0x154>
  pStator_Currents->a = -pStator_Currents->a;
 8009a7e:	b29b      	uxth	r3, r3
 8009a80:	425d      	negs	r5, r3
 8009a82:	b22d      	sxth	r5, r5
 8009a84:	e7bc      	b.n	8009a00 <R3_1_GetPhaseCurrents+0x5c>
 8009a86:	425d      	negs	r5, r3
 8009a88:	b22d      	sxth	r5, r5
 8009a8a:	f647 74ff 	movw	r4, #32767	@ 0x7fff
 8009a8e:	f248 0c01 	movw	ip, #32769	@ 0x8001
 8009a92:	e7b5      	b.n	8009a00 <R3_1_GetPhaseCurrents+0x5c>
 8009a94:	f647 74ff 	movw	r4, #32767	@ 0x7fff
 8009a98:	461d      	mov	r5, r3
 8009a9a:	f248 0c01 	movw	ip, #32769	@ 0x8001
 8009a9e:	e7e4      	b.n	8009a6a <R3_1_GetPhaseCurrents+0xc6>
 8009aa0:	f647 75ff 	movw	r5, #32767	@ 0x7fff
 8009aa4:	4634      	mov	r4, r6
 8009aa6:	f248 0301 	movw	r3, #32769	@ 0x8001
 8009aaa:	e7c0      	b.n	8009a2e <R3_1_GetPhaseCurrents+0x8a>
      else  if ( wAux > INT16_MAX )
 8009aac:	f5b4 4f00 	cmp.w	r4, #32768	@ 0x8000
        pStator_Currents->a = ( int16_t )wAux;
 8009ab0:	bfb4      	ite	lt
 8009ab2:	b223      	sxthlt	r3, r4
 8009ab4:	f647 73ff 	movwge	r3, #32767	@ 0x7fff
 8009ab8:	e793      	b.n	80099e2 <R3_1_GetPhaseCurrents+0x3e>
 8009aba:	4c16      	ldr	r4, [pc, #88]	@ (8009b14 <R3_1_GetPhaseCurrents+0x170>)
 8009abc:	f647 7cff 	movw	ip, #32767	@ 0x7fff
 8009ac0:	e79e      	b.n	8009a00 <R3_1_GetPhaseCurrents+0x5c>
 8009ac2:	4d14      	ldr	r5, [pc, #80]	@ (8009b14 <R3_1_GetPhaseCurrents+0x170>)
 8009ac4:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8009ac8:	e79a      	b.n	8009a00 <R3_1_GetPhaseCurrents+0x5c>
 8009aca:	f647 74ff 	movw	r4, #32767	@ 0x7fff
 8009ace:	f248 0c01 	movw	ip, #32769	@ 0x8001
 8009ad2:	e795      	b.n	8009a00 <R3_1_GetPhaseCurrents+0x5c>
 8009ad4:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8009ad8:	4635      	mov	r5, r6
 8009ada:	461c      	mov	r4, r3
 8009adc:	e7a7      	b.n	8009a2e <R3_1_GetPhaseCurrents+0x8a>
 8009ade:	f647 7cff 	movw	ip, #32767	@ 0x7fff
 8009ae2:	461c      	mov	r4, r3
 8009ae4:	4665      	mov	r5, ip
 8009ae6:	e7c0      	b.n	8009a6a <R3_1_GetPhaseCurrents+0xc6>
  pStator_Currents->b = -pStator_Currents->b;
 8009ae8:	fa1f fc8c 	uxth.w	ip, ip
  pStator_Currents->a = -pStator_Currents->a;
 8009aec:	425d      	negs	r5, r3
  pStator_Currents->b = -pStator_Currents->b;
 8009aee:	f1cc 0400 	rsb	r4, ip, #0
  pStator_Currents->a = -pStator_Currents->a;
 8009af2:	b22d      	sxth	r5, r5
  pStator_Currents->b = -pStator_Currents->b;
 8009af4:	b224      	sxth	r4, r4
 8009af6:	e783      	b.n	8009a00 <R3_1_GetPhaseCurrents+0x5c>
 8009af8:	f647 75ff 	movw	r5, #32767	@ 0x7fff
 8009afc:	f248 0301 	movw	r3, #32769	@ 0x8001
 8009b00:	e77e      	b.n	8009a00 <R3_1_GetPhaseCurrents+0x5c>
  pStator_Currents->a = -pStator_Currents->a;
 8009b02:	880b      	ldrh	r3, [r1, #0]
  pStator_Currents->b = -pStator_Currents->b;
 8009b04:	f8b1 c002 	ldrh.w	ip, [r1, #2]
  pStator_Currents->a = -pStator_Currents->a;
 8009b08:	425d      	negs	r5, r3
  pStator_Currents->b = -pStator_Currents->b;
 8009b0a:	f1cc 0400 	rsb	r4, ip, #0
  pStator_Currents->a = -pStator_Currents->a;
 8009b0e:	b22d      	sxth	r5, r5
  pStator_Currents->b = -pStator_Currents->b;
 8009b10:	b224      	sxth	r4, r4
 8009b12:	e775      	b.n	8009a00 <R3_1_GetPhaseCurrents+0x5c>
 8009b14:	ffff8001 	.word	0xffff8001

08009b18 <R3_1_HFCurrentsCalibrationAB>:
  *         of phase A and B in ab_t format.
  */
__weak void R3_1_HFCurrentsCalibrationAB( PWMC_Handle_t * pHdl, ab_t * pStator_Currents )
{
  PWMC_R3_1_Handle_t * pHandle = (PWMC_R3_1_Handle_t *) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8009b18:	f8d0 30a0 	ldr.w	r3, [r0, #160]	@ 0xa0
{
 8009b1c:	b430      	push	{r4, r5}
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 8009b1e:	e9d3 4200 	ldrd	r4, r2, [r3]
 8009b22:	6a13      	ldr	r3, [r2, #32]
 8009b24:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009b28:	6213      	str	r3, [r2, #32]
  
  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 8009b2a:	f890 309f 	ldrb.w	r3, [r0, #159]	@ 0x9f
 8009b2e:	2b0f      	cmp	r3, #15
 8009b30:	d80f      	bhi.n	8009b52 <R3_1_HFCurrentsCalibrationAB+0x3a>
  {
    pHandle->PhaseAOffset += ADCx->JDR1;
 8009b32:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8009b34:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
    pHandle->PhaseBOffset += ADCx->JDR2;
 8009b38:	6c25      	ldr	r5, [r4, #64]	@ 0x40
    pHandle->PhaseAOffset += ADCx->JDR1;
 8009b3a:	189c      	adds	r4, r3, r2
    pHandle->PhaseBOffset += ADCx->JDR2;
 8009b3c:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
    pHandle->PolarizationCounter++;
 8009b40:	f890 309f 	ldrb.w	r3, [r0, #159]	@ 0x9f
    pHandle->PhaseBOffset += ADCx->JDR2;
 8009b44:	442a      	add	r2, r5
    pHandle->PolarizationCounter++;
 8009b46:	3301      	adds	r3, #1
    pHandle->PhaseBOffset += ADCx->JDR2;
 8009b48:	e9c0 4222 	strd	r4, r2, [r0, #136]	@ 0x88
    pHandle->PolarizationCounter++;
 8009b4c:	b2db      	uxtb	r3, r3
 8009b4e:	f880 309f 	strb.w	r3, [r0, #159]	@ 0x9f
  }

  /* during offset calibration no current is flowing in the phases */
  pStator_Currents->a = 0;
 8009b52:	2300      	movs	r3, #0
  pStator_Currents->b = 0;
}
 8009b54:	bc30      	pop	{r4, r5}
  pStator_Currents->a = 0;
 8009b56:	600b      	str	r3, [r1, #0]
}
 8009b58:	4770      	bx	lr
 8009b5a:	bf00      	nop

08009b5c <R3_1_HFCurrentsCalibrationC>:
  *         of phase A and B in ab_t format.
  */
__weak void R3_1_HFCurrentsCalibrationC(PWMC_Handle_t *pHdl, ab_t* pStator_Currents)
{
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8009b5c:	f8d0 30a0 	ldr.w	r3, [r0, #160]	@ 0xa0
{
 8009b60:	b410      	push	{r4}
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 8009b62:	e9d3 4200 	ldrd	r4, r2, [r3]
 8009b66:	6a13      	ldr	r3, [r2, #32]
 8009b68:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009b6c:	6213      	str	r3, [r2, #32]

  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 8009b6e:	f890 309f 	ldrb.w	r3, [r0, #159]	@ 0x9f
 8009b72:	2b0f      	cmp	r3, #15
 8009b74:	d80b      	bhi.n	8009b8e <R3_1_HFCurrentsCalibrationC+0x32>
  {
    pHandle->PhaseCOffset += ADCx->JDR2;
 8009b76:	6c24      	ldr	r4, [r4, #64]	@ 0x40
    pHandle->PolarizationCounter++;
 8009b78:	f890 309f 	ldrb.w	r3, [r0, #159]	@ 0x9f
    pHandle->PhaseCOffset += ADCx->JDR2;
 8009b7c:	f8d0 2090 	ldr.w	r2, [r0, #144]	@ 0x90
    pHandle->PolarizationCounter++;
 8009b80:	3301      	adds	r3, #1
    pHandle->PhaseCOffset += ADCx->JDR2;
 8009b82:	4422      	add	r2, r4
    pHandle->PolarizationCounter++;
 8009b84:	b2db      	uxtb	r3, r3
    pHandle->PhaseCOffset += ADCx->JDR2;
 8009b86:	f8c0 2090 	str.w	r2, [r0, #144]	@ 0x90
    pHandle->PolarizationCounter++;
 8009b8a:	f880 309f 	strb.w	r3, [r0, #159]	@ 0x9f
  }

  /* during offset calibration no current is flowing in the phases */
  pStator_Currents->a = 0;
 8009b8e:	2300      	movs	r3, #0
  pStator_Currents->b = 0;
}
 8009b90:	f85d 4b04 	ldr.w	r4, [sp], #4
  pStator_Currents->a = 0;
 8009b94:	600b      	str	r3, [r1, #0]
}
 8009b96:	4770      	bx	lr

08009b98 <R3_1_SwitchOnPWM>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  */
__weak void R3_1_SwitchOnPWM(PWMC_Handle_t *pHdl)
{  
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8009b98:	f8d0 30a0 	ldr.w	r3, [r0, #160]	@ 0xa0

  pHandle->_Super.TurnOnLowSidesAction = false;
  
  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
 8009b9c:	f8b0 209c 	ldrh.w	r2, [r0, #156]	@ 0x9c
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8009ba0:	685b      	ldr	r3, [r3, #4]
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
 8009ba2:	0851      	lsrs	r1, r2, #1
  pHandle->_Super.TurnOnLowSidesAction = false;
 8009ba4:	f04f 0c00 	mov.w	ip, #0
{  
 8009ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
  pHandle->_Super.TurnOnLowSidesAction = false;
 8009baa:	f880 c07e 	strb.w	ip, [r0, #126]	@ 0x7e
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
  LL_TIM_OC_SetCompareCH4(TIMx, (uint32_t)(pHandle->Half_PWMPeriod - 5u));
 8009bae:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR1, CompareValue);
 8009bb0:	6359      	str	r1, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8009bb2:	6399      	str	r1, [r3, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8009bb4:	63d9      	str	r1, [r3, #60]	@ 0x3c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8009bb6:	f06f 0101 	mvn.w	r1, #1
  WRITE_REG(TIMx->CCR4, CompareValue);
 8009bba:	641a      	str	r2, [r3, #64]	@ 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8009bbc:	6119      	str	r1, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8009bbe:	691a      	ldr	r2, [r3, #16]
 8009bc0:	07d2      	lsls	r2, r2, #31
 8009bc2:	d5fc      	bpl.n	8009bbe <R3_1_SwitchOnPWM+0x26>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8009bc4:	f06f 0201 	mvn.w	r2, #1
 8009bc8:	611a      	str	r2, [r3, #16]
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE(TIMx);

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8009bca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009bcc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009bd0:	645a      	str	r2, [r3, #68]	@ 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8009bd2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009bd4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009bd8:	645a      	str	r2, [r3, #68]	@ 0x44
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->_Super.LowSideOutputs ) == ES_GPIO )
 8009bda:	f890 207d 	ldrb.w	r2, [r0, #125]	@ 0x7d
 8009bde:	2a02      	cmp	r2, #2
 8009be0:	d007      	beq.n	8009bf2 <R3_1_SwitchOnPWM+0x5a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8009be2:	f06f 0201 	mvn.w	r2, #1
 8009be6:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8009be8:	68da      	ldr	r2, [r3, #12]
 8009bea:	f042 0201 	orr.w	r2, r2, #1
 8009bee:	60da      	str	r2, [r3, #12]
  LL_TIM_ClearFlag_UPDATE( TIMx );
  /* Enable Update IRQ */
  LL_TIM_EnableIT_UPDATE( TIMx );

  return; 
}
 8009bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0u)
 8009bf2:	6a1d      	ldr	r5, [r3, #32]
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 8009bf4:	f8d0 e03c 	ldr.w	lr, [r0, #60]	@ 0x3c
 8009bf8:	f8b0 4048 	ldrh.w	r4, [r0, #72]	@ 0x48
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 8009bfc:	6c07      	ldr	r7, [r0, #64]	@ 0x40
 8009bfe:	f8b0 104a 	ldrh.w	r1, [r0, #74]	@ 0x4a
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8009c02:	6c46      	ldr	r6, [r0, #68]	@ 0x44
 8009c04:	f8b0 204c 	ldrh.w	r2, [r0, #76]	@ 0x4c
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0u)
 8009c08:	f240 5c55 	movw	ip, #1365	@ 0x555
 8009c0c:	ea15 0f0c 	tst.w	r5, ip
 8009c10:	d004      	beq.n	8009c1c <R3_1_SwitchOnPWM+0x84>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 8009c12:	f8ce 4018 	str.w	r4, [lr, #24]
 8009c16:	61b9      	str	r1, [r7, #24]
 8009c18:	61b2      	str	r2, [r6, #24]
}
 8009c1a:	e7e2      	b.n	8009be2 <R3_1_SwitchOnPWM+0x4a>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8009c1c:	0424      	lsls	r4, r4, #16
 8009c1e:	0409      	lsls	r1, r1, #16
 8009c20:	0412      	lsls	r2, r2, #16
 8009c22:	f8ce 4018 	str.w	r4, [lr, #24]
 8009c26:	61b9      	str	r1, [r7, #24]
 8009c28:	61b2      	str	r2, [r6, #24]
}
 8009c2a:	e7da      	b.n	8009be2 <R3_1_SwitchOnPWM+0x4a>

08009c2c <R3_1_SwitchOffPWM>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  */
__weak void R3_1_SwitchOffPWM(PWMC_Handle_t *pHdl)
{
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8009c2c:	f8d0 30a0 	ldr.w	r3, [r0, #160]	@ 0xa0

  pHandle->_Super.TurnOnLowSidesAction = false;

  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs(TIMx);
  if (pHandle->_Super.BrakeActionLock == true)
 8009c30:	f890 1085 	ldrb.w	r1, [r0, #133]	@ 0x85
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8009c34:	685a      	ldr	r2, [r3, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8009c36:	68d3      	ldr	r3, [r2, #12]
 8009c38:	f023 0301 	bic.w	r3, r3, #1
 8009c3c:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8009c3e:	6c53      	ldr	r3, [r2, #68]	@ 0x44
  pHandle->_Super.TurnOnLowSidesAction = false;
 8009c40:	f04f 0c00 	mov.w	ip, #0
 8009c44:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009c48:	f880 c07e 	strb.w	ip, [r0, #126]	@ 0x7e
 8009c4c:	6453      	str	r3, [r2, #68]	@ 0x44
  if (pHandle->_Super.BrakeActionLock == true)
 8009c4e:	b919      	cbnz	r1, 8009c58 <R3_1_SwitchOffPWM+0x2c>
  {
  }
  else
  {
    if ( ( pHandle->_Super.LowSideOutputs ) == ES_GPIO )
 8009c50:	f890 307d 	ldrb.w	r3, [r0, #125]	@ 0x7d
 8009c54:	2b02      	cmp	r3, #2
 8009c56:	d009      	beq.n	8009c6c <R3_1_SwitchOffPWM+0x40>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8009c58:	f06f 0301 	mvn.w	r3, #1
 8009c5c:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8009c5e:	6913      	ldr	r3, [r2, #16]
 8009c60:	07db      	lsls	r3, r3, #31
 8009c62:	d5fc      	bpl.n	8009c5e <R3_1_SwitchOffPWM+0x32>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8009c64:	f06f 0301 	mvn.w	r3, #1
 8009c68:	6113      	str	r3, [r2, #16]
 8009c6a:	4770      	bx	lr
{
 8009c6c:	b430      	push	{r4, r5}
    {
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 8009c6e:	f8b0 4048 	ldrh.w	r4, [r0, #72]	@ 0x48
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8009c72:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 8009c74:	f8b0 104a 	ldrh.w	r1, [r0, #74]	@ 0x4a
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8009c78:	f8b0 304c 	ldrh.w	r3, [r0, #76]	@ 0x4c
 8009c7c:	0424      	lsls	r4, r4, #16
 8009c7e:	61ac      	str	r4, [r5, #24]
 8009c80:	e9d0 4010 	ldrd	r4, r0, [r0, #64]	@ 0x40
 8009c84:	041b      	lsls	r3, r3, #16
 8009c86:	0409      	lsls	r1, r1, #16
 8009c88:	61a1      	str	r1, [r4, #24]
 8009c8a:	6183      	str	r3, [r0, #24]
 8009c8c:	f06f 0301 	mvn.w	r3, #1
 8009c90:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8009c92:	6913      	ldr	r3, [r2, #16]
 8009c94:	07d9      	lsls	r1, r3, #31
 8009c96:	d5fc      	bpl.n	8009c92 <R3_1_SwitchOffPWM+0x66>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8009c98:	f06f 0301 	mvn.w	r3, #1
  while (LL_TIM_IsActiveFlag_UPDATE(TIMx) == 0)
  {}
  LL_TIM_ClearFlag_UPDATE(TIMx);

  return;
}
 8009c9c:	bc30      	pop	{r4, r5}
 8009c9e:	6113      	str	r3, [r2, #16]
 8009ca0:	4770      	bx	lr
 8009ca2:	bf00      	nop

08009ca4 <R3_1_RLGetPhaseCurrents>:
  */
void R3_1_RLGetPhaseCurrents(PWMC_Handle_t *pHdl,ab_t* pStator_Currents)
{

  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8009ca4:	f8d0 20a0 	ldr.w	r2, [r0, #160]	@ 0xa0
  int32_t wAux;
  
  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);
  
  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t)((ADCx->JDR2)*2u);
 8009ca8:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
{
 8009cac:	b410      	push	{r4}
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 8009cae:	e9d2 4000 	ldrd	r4, r0, [r2]
  CLEAR_BIT(TIMx->CCER, Channels);
 8009cb2:	6a02      	ldr	r2, [r0, #32]
 8009cb4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009cb8:	6202      	str	r2, [r0, #32]
  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t)((ADCx->JDR2)*2u);
 8009cba:	6c20      	ldr	r0, [r4, #64]	@ 0x40
  
  /* Check saturation */
  if (wAux > -INT16_MAX)
 8009cbc:	4a0a      	ldr	r2, [pc, #40]	@ (8009ce8 <R3_1_RLGetPhaseCurrents+0x44>)
  /* First value read of Phase B*/
  wAux = -wAux;
  pStator_Currents->a = ( int16_t )( wAux );
  pStator_Currents->b = ( int16_t )( wAux );

}
 8009cbe:	f85d 4b04 	ldr.w	r4, [sp], #4
  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t)((ADCx->JDR2)*2u);
 8009cc2:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
    if (wAux < INT16_MAX)
 8009cc6:	f647 70ff 	movw	r0, #32767	@ 0x7fff
 8009cca:	4283      	cmp	r3, r0
 8009ccc:	bfa8      	it	ge
 8009cce:	4603      	movge	r3, r0
 8009cd0:	4293      	cmp	r3, r2
 8009cd2:	bfb8      	it	lt
 8009cd4:	4613      	movlt	r3, r2
  wAux = -wAux;
 8009cd6:	425b      	negs	r3, r3
  pStator_Currents->a = ( int16_t )( wAux );
 8009cd8:	b21b      	sxth	r3, r3
 8009cda:	2200      	movs	r2, #0
 8009cdc:	f363 020f 	bfi	r2, r3, #0, #16
 8009ce0:	f363 421f 	bfi	r2, r3, #16, #16
 8009ce4:	600a      	str	r2, [r1, #0]
}
 8009ce6:	4770      	bx	lr
 8009ce8:	ffff8001 	.word	0xffff8001

08009cec <R3_1_RLSwitchOnPWM>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  */
void R3_1_RLSwitchOnPWM(PWMC_Handle_t *pHdl)
{
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8009cec:	f8d0 20a0 	ldr.w	r2, [r0, #160]	@ 0xa0
{
 8009cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
  
  pHandle->_Super.TurnOnLowSidesAction = false;
 8009cf2:	2400      	movs	r4, #0
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 8009cf4:	e9d2 1300 	ldrd	r1, r3, [r2]
  pHandle->_Super.TurnOnLowSidesAction = false;
 8009cf8:	f880 407e 	strb.w	r4, [r0, #126]	@ 0x7e
  /* The following while cycles ensure the identification of the nergative counting mode of TIM1
   * for correct modification of Repetition Counter value of TIM1.*/

  /* Wait the change of Counter Direction of TIM1 from Down-Direction to Up-Direction*/

  while ( ( TIMx->CR1 & DIR_MASK ) == DIR_MASK )
 8009cfc:	681a      	ldr	r2, [r3, #0]
 8009cfe:	06d5      	lsls	r5, r2, #27
 8009d00:	d4fc      	bmi.n	8009cfc <R3_1_RLSwitchOnPWM+0x10>
  {
  }
  /* Wait the change of Counter Direction of TIM1 from Up-Direction to Down-Direction*/
  while ( ( TIMx->CR1 & DIR_MASK ) == 0u )
 8009d02:	681a      	ldr	r2, [r3, #0]
 8009d04:	06d4      	lsls	r4, r2, #27
 8009d06:	d5fc      	bpl.n	8009d02 <R3_1_RLSwitchOnPWM+0x16>
  /* Set channel 1 Compare/Capture register to 1 */
  LL_TIM_OC_SetCompareCH1(TIMx, 1u);

  /* Set channel 4 Compare/Capture register to trig ADC in the middle 
     of the PWM period */
  LL_TIM_OC_SetCompareCH4(TIMx,(( uint32_t )( pHandle->Half_PWMPeriod ) - 5u));
 8009d08:	f8b0 209c 	ldrh.w	r2, [r0, #156]	@ 0x9c
  WRITE_REG(TIMx->CCR1, CompareValue);
 8009d0c:	2401      	movs	r4, #1
 8009d0e:	3a05      	subs	r2, #5
 8009d10:	635c      	str	r4, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR4, CompareValue);
 8009d12:	641a      	str	r2, [r3, #64]	@ 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8009d14:	f06f 0201 	mvn.w	r2, #1
 8009d18:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8009d1a:	691a      	ldr	r2, [r3, #16]
 8009d1c:	07d2      	lsls	r2, r2, #31
 8009d1e:	d5fc      	bpl.n	8009d1a <R3_1_RLSwitchOnPWM+0x2e>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8009d20:	f06f 0201 	mvn.w	r2, #1
 8009d24:	611a      	str	r2, [r3, #16]
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
  {}
  LL_TIM_ClearFlag_UPDATE( TIMx );
  
  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8009d26:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009d28:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009d2c:	645a      	str	r2, [r3, #68]	@ 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8009d2e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009d30:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009d34:	645a      	str	r2, [r3, #68]	@ 0x44
  LL_TIM_EnableAllOutputs(TIMx);

  if ( ( pHandle->_Super.LowSideOutputs ) == ES_GPIO )
 8009d36:	f890 207d 	ldrb.w	r2, [r0, #125]	@ 0x7d
 8009d3a:	2a02      	cmp	r2, #2
 8009d3c:	d119      	bne.n	8009d72 <R3_1_RLSwitchOnPWM+0x86>
  {
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0u)
 8009d3e:	6a1e      	ldr	r6, [r3, #32]
    {
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8009d40:	f8b0 204c 	ldrh.w	r2, [r0, #76]	@ 0x4c
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 8009d44:	f8b0 5048 	ldrh.w	r5, [r0, #72]	@ 0x48
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 8009d48:	f8b0 404a 	ldrh.w	r4, [r0, #74]	@ 0x4a
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 8009d4c:	f8d0 e03c 	ldr.w	lr, [r0, #60]	@ 0x3c
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 8009d50:	6c07      	ldr	r7, [r0, #64]	@ 0x40
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8009d52:	6c40      	ldr	r0, [r0, #68]	@ 0x44
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0u)
 8009d54:	f240 5c55 	movw	ip, #1365	@ 0x555
 8009d58:	ea16 0f0c 	tst.w	r6, ip
 8009d5c:	ea4f 4202 	mov.w	r2, r2, lsl #16
 8009d60:	bf05      	ittet	eq
 8009d62:	042d      	lsleq	r5, r5, #16
 8009d64:	0424      	lsleq	r4, r4, #16
  WRITE_REG(GPIOx->BSRR, PinMask);
 8009d66:	f8ce 5018 	strne.w	r5, [lr, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8009d6a:	f8ce 5018 	streq.w	r5, [lr, #24]
 8009d6e:	61bc      	str	r4, [r7, #24]
 8009d70:	6182      	str	r2, [r0, #24]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8009d72:	f06f 0201 	mvn.w	r2, #1
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8009d76:	f06f 0004 	mvn.w	r0, #4
 8009d7a:	6008      	str	r0, [r1, #0]
 8009d7c:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8009d7e:	68da      	ldr	r2, [r3, #12]
 8009d80:	f042 0201 	orr.w	r2, r2, #1
 8009d84:	60da      	str	r2, [r3, #12]

  /* enable TIMx update interrupt*/
  LL_TIM_EnableIT_UPDATE( TIMx );

  return; 
}
 8009d86:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009d88 <R3_1_TurnOnLowSides>:
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8009d88:	f8d0 20a0 	ldr.w	r2, [r0, #160]	@ 0xa0
 8009d8c:	6852      	ldr	r2, [r2, #4]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8009d8e:	2300      	movs	r3, #0
  pHandle->_Super.TurnOnLowSidesAction = true;
 8009d90:	f04f 0c01 	mov.w	ip, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8009d94:	f06f 0101 	mvn.w	r1, #1
 8009d98:	f880 c07e 	strb.w	ip, [r0, #126]	@ 0x7e
 8009d9c:	6111      	str	r1, [r2, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8009d9e:	6353      	str	r3, [r2, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8009da0:	6393      	str	r3, [r2, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8009da2:	63d3      	str	r3, [r2, #60]	@ 0x3c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8009da4:	6913      	ldr	r3, [r2, #16]
 8009da6:	07db      	lsls	r3, r3, #31
 8009da8:	d5fc      	bpl.n	8009da4 <R3_1_TurnOnLowSides+0x1c>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8009daa:	f06f 0301 	mvn.w	r3, #1
 8009dae:	6113      	str	r3, [r2, #16]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8009db0:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 8009db2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009db6:	6453      	str	r3, [r2, #68]	@ 0x44
  if ((pHandle->_Super.LowSideOutputs)== ES_GPIO)
 8009db8:	f890 307d 	ldrb.w	r3, [r0, #125]	@ 0x7d
 8009dbc:	2b02      	cmp	r3, #2
 8009dbe:	d000      	beq.n	8009dc2 <R3_1_TurnOnLowSides+0x3a>
 8009dc0:	4770      	bx	lr
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 8009dc2:	e9d0 210f 	ldrd	r2, r1, [r0, #60]	@ 0x3c
{
 8009dc6:	b410      	push	{r4}
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8009dc8:	6c43      	ldr	r3, [r0, #68]	@ 0x44
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 8009dca:	f8b0 4048 	ldrh.w	r4, [r0, #72]	@ 0x48
  WRITE_REG(GPIOx->BSRR, PinMask);
 8009dce:	6194      	str	r4, [r2, #24]
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 8009dd0:	f8b0 404a 	ldrh.w	r4, [r0, #74]	@ 0x4a
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8009dd4:	f8b0 204c 	ldrh.w	r2, [r0, #76]	@ 0x4c
 8009dd8:	618c      	str	r4, [r1, #24]
}
 8009dda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009dde:	619a      	str	r2, [r3, #24]
 8009de0:	4770      	bx	lr
 8009de2:	bf00      	nop

08009de4 <R3_1_RLTurnOnLowSides>:
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8009de4:	f8d0 20a0 	ldr.w	r2, [r0, #160]	@ 0xa0
 8009de8:	6852      	ldr	r2, [r2, #4]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8009dea:	2100      	movs	r1, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8009dec:	f06f 0301 	mvn.w	r3, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8009df0:	6351      	str	r1, [r2, #52]	@ 0x34
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8009df2:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8009df4:	6913      	ldr	r3, [r2, #16]
 8009df6:	07db      	lsls	r3, r3, #31
 8009df8:	d5fc      	bpl.n	8009df4 <R3_1_RLTurnOnLowSides+0x10>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8009dfa:	f06f 0301 	mvn.w	r3, #1
 8009dfe:	6113      	str	r3, [r2, #16]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8009e00:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 8009e02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009e06:	6453      	str	r3, [r2, #68]	@ 0x44
  if ( ( pHandle->_Super.LowSideOutputs ) == ES_GPIO )
 8009e08:	f890 307d 	ldrb.w	r3, [r0, #125]	@ 0x7d
 8009e0c:	2b02      	cmp	r3, #2
 8009e0e:	d000      	beq.n	8009e12 <R3_1_RLTurnOnLowSides+0x2e>
 8009e10:	4770      	bx	lr
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 8009e12:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
    LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 8009e14:	f8b0 204a 	ldrh.w	r2, [r0, #74]	@ 0x4a
    LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8009e18:	f8b0 304c 	ldrh.w	r3, [r0, #76]	@ 0x4c
{  
 8009e1c:	b410      	push	{r4}
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 8009e1e:	f8b0 4048 	ldrh.w	r4, [r0, #72]	@ 0x48
 8009e22:	618c      	str	r4, [r1, #24]
    LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8009e24:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8009e28:	0412      	lsls	r2, r2, #16
 8009e2a:	041b      	lsls	r3, r3, #16
 8009e2c:	61a2      	str	r2, [r4, #24]
}
 8009e2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e32:	618b      	str	r3, [r1, #24]
 8009e34:	4770      	bx	lr
 8009e36:	bf00      	nop

08009e38 <R3_1_Init>:
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8009e38:	f8d0 20a0 	ldr.w	r2, [r0, #160]	@ 0xa0
  ADC_TypeDef* ADCx  = pHandle->pParams_str->ADCx;
 8009e3c:	6813      	ldr	r3, [r2, #0]
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8009e3e:	6852      	ldr	r2, [r2, #4]
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 8009e40:	6859      	ldr	r1, [r3, #4]
{
 8009e42:	b430      	push	{r4, r5}
 8009e44:	f021 0120 	bic.w	r1, r1, #32
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 8009e48:	f06f 0402 	mvn.w	r4, #2
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 8009e4c:	6059      	str	r1, [r3, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 8009e4e:	601c      	str	r4, [r3, #0]
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8009e50:	6859      	ldr	r1, [r3, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8009e52:	f06f 0404 	mvn.w	r4, #4
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8009e56:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8009e5a:	6059      	str	r1, [r3, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8009e5c:	601c      	str	r4, [r3, #0]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8009e5e:	6811      	ldr	r1, [r2, #0]
    if ( TIMx == TIM1 )
 8009e60:	4c1e      	ldr	r4, [pc, #120]	@ (8009edc <R3_1_Init+0xa4>)
 8009e62:	f021 0101 	bic.w	r1, r1, #1
 8009e66:	42a2      	cmp	r2, r4
 8009e68:	6011      	str	r1, [r2, #0]
 8009e6a:	d031      	beq.n	8009ed0 <R3_1_Init+0x98>
    else if ( TIMx == TIM8 )
 8009e6c:	491c      	ldr	r1, [pc, #112]	@ (8009ee0 <R3_1_Init+0xa8>)
 8009e6e:	428a      	cmp	r2, r1
 8009e70:	d028      	beq.n	8009ec4 <R3_1_Init+0x8c>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8009e72:	f06f 0180 	mvn.w	r1, #128	@ 0x80
 8009e76:	6111      	str	r1, [r2, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 8009e78:	68d1      	ldr	r1, [r2, #12]
 8009e7a:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8009e7e:	60d1      	str	r1, [r2, #12]
  SET_BIT(TIMx->CCER, Channels);
 8009e80:	6a11      	ldr	r1, [r2, #32]
 8009e82:	f441 61aa 	orr.w	r1, r1, #1360	@ 0x550
 8009e86:	f041 0105 	orr.w	r1, r1, #5
 8009e8a:	6211      	str	r1, [r2, #32]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8009e8c:	689a      	ldr	r2, [r3, #8]
 8009e8e:	f042 0201 	orr.w	r2, r2, #1
 8009e92:	609a      	str	r2, [r3, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8009e94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8009e96:	f06f 0504 	mvn.w	r5, #4
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8009e9a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8009e9e:	62da      	str	r2, [r3, #44]	@ 0x2c
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8009ea0:	601d      	str	r5, [r3, #0]
  SET_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8009ea2:	685a      	ldr	r2, [r3, #4]
 8009ea4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009ea8:	605a      	str	r2, [r3, #4]
  MODIFY_REG(ADCx->JSQR, ADC_JSQR_JL, SequencerNbRanks);
 8009eaa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
    pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 8009eac:	f44f 1480 	mov.w	r4, #1048576	@ 0x100000
    pHandle->_Super.DTTest = 0u;
 8009eb0:	2100      	movs	r1, #0
 8009eb2:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
    pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 8009eb6:	f8c0 4098 	str.w	r4, [r0, #152]	@ 0x98
 8009eba:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8009ebc:	bc30      	pop	{r4, r5}
    pHandle->_Super.DTTest = 0u;
 8009ebe:	f8a0 1070 	strh.w	r1, [r0, #112]	@ 0x70
}
 8009ec2:	4770      	bx	lr
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 8009ec4:	4c07      	ldr	r4, [pc, #28]	@ (8009ee4 <R3_1_Init+0xac>)
 8009ec6:	68e1      	ldr	r1, [r4, #12]
 8009ec8:	f041 0102 	orr.w	r1, r1, #2
 8009ecc:	60e1      	str	r1, [r4, #12]
}
 8009ece:	e7d0      	b.n	8009e72 <R3_1_Init+0x3a>
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 8009ed0:	4c04      	ldr	r4, [pc, #16]	@ (8009ee4 <R3_1_Init+0xac>)
 8009ed2:	68e1      	ldr	r1, [r4, #12]
 8009ed4:	f041 0101 	orr.w	r1, r1, #1
 8009ed8:	60e1      	str	r1, [r4, #12]
}
 8009eda:	e7ca      	b.n	8009e72 <R3_1_Init+0x3a>
 8009edc:	40010000 	.word	0x40010000
 8009ee0:	40010400 	.word	0x40010400
 8009ee4:	e0042000 	.word	0xe0042000

08009ee8 <R3_1_SetOffsetCalib>:
{
 8009ee8:	b410      	push	{r4}
  pHandle->PhaseAOffset = offsets->phaseAOffset;
 8009eea:	e9d1 4201 	ldrd	r4, r2, [r1, #4]
 8009eee:	680b      	ldr	r3, [r1, #0]
 8009ef0:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  pHdl->offsetCalibStatus = true;
 8009ef4:	2301      	movs	r3, #1
  pHandle->PhaseAOffset = offsets->phaseAOffset;
 8009ef6:	e9c0 4223 	strd	r4, r2, [r0, #140]	@ 0x8c
  pHdl->offsetCalibStatus = true;
 8009efa:	f880 3081 	strb.w	r3, [r0, #129]	@ 0x81
}
 8009efe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f02:	4770      	bx	lr

08009f04 <R3_1_GetOffsetCalib>:
  offsets->phaseAOffset = pHandle->PhaseAOffset;
 8009f04:	e9d0 2323 	ldrd	r2, r3, [r0, #140]	@ 0x8c
 8009f08:	f8d0 0088 	ldr.w	r0, [r0, #136]	@ 0x88
 8009f0c:	608b      	str	r3, [r1, #8]
 8009f0e:	e9c1 0200 	strd	r0, r2, [r1]
}
 8009f12:	4770      	bx	lr

08009f14 <R3_1_CurrentReadingCalibration>:
{
 8009f14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8009f18:	f8d0 30a0 	ldr.w	r3, [r0, #160]	@ 0xa0
  if (false == pHandle->_Super.offsetCalibStatus)
 8009f1c:	f890 6081 	ldrb.w	r6, [r0, #129]	@ 0x81
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8009f20:	685c      	ldr	r4, [r3, #4]
{
 8009f22:	b082      	sub	sp, #8
 8009f24:	4605      	mov	r5, r0
  if (false == pHandle->_Super.offsetCalibStatus)
 8009f26:	b35e      	cbz	r6, 8009f80 <R3_1_CurrentReadingCalibration+0x6c>
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8009f28:	69a2      	ldr	r2, [r4, #24]
  LL_TIM_OC_SetCompareCH1 (TIMx,pHandle->Half_PWMPeriod);
 8009f2a:	f8b5 309c 	ldrh.w	r3, [r5, #156]	@ 0x9c
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8009f2e:	f022 0208 	bic.w	r2, r2, #8
 8009f32:	61a2      	str	r2, [r4, #24]
 8009f34:	69a2      	ldr	r2, [r4, #24]
 8009f36:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009f3a:	61a2      	str	r2, [r4, #24]
 8009f3c:	69e2      	ldr	r2, [r4, #28]
 8009f3e:	f022 0208 	bic.w	r2, r2, #8
 8009f42:	61e2      	str	r2, [r4, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8009f44:	6363      	str	r3, [r4, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8009f46:	63a3      	str	r3, [r4, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8009f48:	63e3      	str	r3, [r4, #60]	@ 0x3c
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8009f4a:	69a3      	ldr	r3, [r4, #24]
 8009f4c:	f043 0308 	orr.w	r3, r3, #8
 8009f50:	61a3      	str	r3, [r4, #24]
 8009f52:	69a3      	ldr	r3, [r4, #24]
 8009f54:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8009f58:	61a3      	str	r3, [r4, #24]
 8009f5a:	69e3      	ldr	r3, [r4, #28]
 8009f5c:	f043 0308 	orr.w	r3, r3, #8
 8009f60:	61e3      	str	r3, [r4, #28]
  SET_BIT(TIMx->CCER, Channels);
 8009f62:	6a23      	ldr	r3, [r4, #32]
 8009f64:	f443 63aa 	orr.w	r3, r3, #1360	@ 0x550
  pHandle->_Super.Sector = SECTOR_5;
 8009f68:	2104      	movs	r1, #4
  pHandle->_Super.BrakeActionLock = false;
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	f043 0305 	orr.w	r3, r3, #5
 8009f70:	6223      	str	r3, [r4, #32]
  pHandle->_Super.Sector = SECTOR_5;
 8009f72:	f885 107c 	strb.w	r1, [r5, #124]	@ 0x7c
  pHandle->_Super.BrakeActionLock = false;
 8009f76:	f885 2085 	strb.w	r2, [r5, #133]	@ 0x85
}
 8009f7a:	b002      	add	sp, #8
 8009f7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    GetPhaseCurrCbSave = pHandle->_Super.pFctGetPhaseCurrents;
 8009f80:	6803      	ldr	r3, [r0, #0]
 8009f82:	9300      	str	r3, [sp, #0]
    pHandle->PhaseAOffset = 0u;
 8009f84:	e9c0 6622 	strd	r6, r6, [r0, #136]	@ 0x88
    SetSampPointSectXCbSave = pHandle->_Super.pFctSetADCSampPointSectX;
 8009f88:	6943      	ldr	r3, [r0, #20]
 8009f8a:	9301      	str	r3, [sp, #4]
    pHandle->PolarizationCounter = 0u;
 8009f8c:	f880 609f 	strb.w	r6, [r0, #159]	@ 0x9f
  CLEAR_BIT(TIMx->CCER, Channels);
 8009f90:	6a23      	ldr	r3, [r4, #32]
    pHandle->PhaseCOffset = 0u;
 8009f92:	f8c0 6090 	str.w	r6, [r0, #144]	@ 0x90
 8009f96:	f423 63aa 	bic.w	r3, r3, #1360	@ 0x550
 8009f9a:	f023 0305 	bic.w	r3, r3, #5
 8009f9e:	6223      	str	r3, [r4, #32]
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsCalibrationAB;
 8009fa0:	4b23      	ldr	r3, [pc, #140]	@ (800a030 <R3_1_CurrentReadingCalibration+0x11c>)
 8009fa2:	6003      	str	r3, [r0, #0]
    pHandle->_Super.pFctSetADCSampPointSectX = &R3_1_SetADCSampPointCalibration;
 8009fa4:	4b23      	ldr	r3, [pc, #140]	@ (800a034 <R3_1_CurrentReadingCalibration+0x120>)
 8009fa6:	6143      	str	r3, [r0, #20]
    pHandle->CalibSector = SECTOR_5;
 8009fa8:	2304      	movs	r3, #4
 8009faa:	f880 309e 	strb.w	r3, [r0, #158]	@ 0x9e
    pHandle->_Super.Sector = SECTOR_5;
 8009fae:	f880 307c 	strb.w	r3, [r0, #124]	@ 0x7c
    R3_1_SwitchOnPWM( &pHandle->_Super );
 8009fb2:	f7ff fdf1 	bl	8009b98 <R3_1_SwitchOnPWM>
                            pHandle->pParams_str->RepetitionCounter,
 8009fb6:	f8d5 30a0 	ldr.w	r3, [r5, #160]	@ 0xa0
    waitForPolarizationEnd( TIMx,
 8009fba:	f105 0756 	add.w	r7, r5, #86	@ 0x56
 8009fbe:	f105 089f 	add.w	r8, r5, #159	@ 0x9f
 8009fc2:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 8009fc6:	4639      	mov	r1, r7
 8009fc8:	4643      	mov	r3, r8
 8009fca:	4620      	mov	r0, r4
 8009fcc:	f7ff fccc 	bl	8009968 <waitForPolarizationEnd>
    R3_1_SwitchOffPWM( &pHandle->_Super );
 8009fd0:	4628      	mov	r0, r5
 8009fd2:	f7ff fe2b 	bl	8009c2c <R3_1_SwitchOffPWM>
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsCalibrationC;
 8009fd6:	4b18      	ldr	r3, [pc, #96]	@ (800a038 <R3_1_CurrentReadingCalibration+0x124>)
 8009fd8:	602b      	str	r3, [r5, #0]
    R3_1_SwitchOnPWM( &pHandle->_Super );
 8009fda:	4628      	mov	r0, r5
    pHandle->PolarizationCounter = 0u;
 8009fdc:	f885 609f 	strb.w	r6, [r5, #159]	@ 0x9f
    pHandle->CalibSector = SECTOR_1;
 8009fe0:	f885 609e 	strb.w	r6, [r5, #158]	@ 0x9e
    pHandle->_Super.Sector = SECTOR_1;
 8009fe4:	f885 607c 	strb.w	r6, [r5, #124]	@ 0x7c
    R3_1_SwitchOnPWM( &pHandle->_Super );
 8009fe8:	f7ff fdd6 	bl	8009b98 <R3_1_SwitchOnPWM>
                            pHandle->pParams_str->RepetitionCounter,
 8009fec:	f8d5 20a0 	ldr.w	r2, [r5, #160]	@ 0xa0
    waitForPolarizationEnd( TIMx,
 8009ff0:	4643      	mov	r3, r8
 8009ff2:	f892 202a 	ldrb.w	r2, [r2, #42]	@ 0x2a
 8009ff6:	4639      	mov	r1, r7
 8009ff8:	4620      	mov	r0, r4
 8009ffa:	f7ff fcb5 	bl	8009968 <waitForPolarizationEnd>
    R3_1_SwitchOffPWM( &pHandle->_Super );
 8009ffe:	4628      	mov	r0, r5
 800a000:	f7ff fe14 	bl	8009c2c <R3_1_SwitchOffPWM>
    pHandle->PhaseBOffset >>= 3;
 800a004:	e9d5 1222 	ldrd	r1, r2, [r5, #136]	@ 0x88
    pHandle->PhaseCOffset >>= 3;
 800a008:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
    pHandle->PhaseBOffset >>= 3;
 800a00c:	08d2      	lsrs	r2, r2, #3
    pHandle->PhaseAOffset >>= 3;
 800a00e:	08c9      	lsrs	r1, r1, #3
    pHandle->PhaseBOffset >>= 3;
 800a010:	e9c5 1222 	strd	r1, r2, [r5, #136]	@ 0x88
    if (0U == pHandle->_Super.SWerror)
 800a014:	f8b5 2056 	ldrh.w	r2, [r5, #86]	@ 0x56
    pHandle->PhaseCOffset >>= 3;
 800a018:	08db      	lsrs	r3, r3, #3
 800a01a:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
    if (0U == pHandle->_Super.SWerror)
 800a01e:	b912      	cbnz	r2, 800a026 <R3_1_CurrentReadingCalibration+0x112>
      pHandle->_Super.offsetCalibStatus = true;
 800a020:	2301      	movs	r3, #1
 800a022:	f885 3081 	strb.w	r3, [r5, #129]	@ 0x81
    pHandle->_Super.pFctGetPhaseCurrents = GetPhaseCurrCbSave;
 800a026:	9a00      	ldr	r2, [sp, #0]
    pHandle->_Super.pFctSetADCSampPointSectX = SetSampPointSectXCbSave;
 800a028:	9b01      	ldr	r3, [sp, #4]
    pHandle->_Super.pFctGetPhaseCurrents = GetPhaseCurrCbSave;
 800a02a:	602a      	str	r2, [r5, #0]
    pHandle->_Super.pFctSetADCSampPointSectX = SetSampPointSectXCbSave;
 800a02c:	616b      	str	r3, [r5, #20]
 800a02e:	e77b      	b.n	8009f28 <R3_1_CurrentReadingCalibration+0x14>
 800a030:	08009b19 	.word	0x08009b19
 800a034:	0800a075 	.word	0x0800a075
 800a038:	08009b5d 	.word	0x08009b5d

0800a03c <R3_1_WriteTIMRegisters>:
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 800a03c:	f8d0 20a0 	ldr.w	r2, [r0, #160]	@ 0xa0
{
 800a040:	4603      	mov	r3, r0
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 800a042:	6852      	ldr	r2, [r2, #4]
{
 800a044:	b410      	push	{r4}
  LL_TIM_OC_SetCompareCH1 (TIMx,pHandle->_Super.CntPhA);
 800a046:	f8b0 4050 	ldrh.w	r4, [r0, #80]	@ 0x50
  LL_TIM_OC_SetCompareCH2 (TIMx,pHandle->_Super.CntPhB);
 800a04a:	f8b0 0052 	ldrh.w	r0, [r0, #82]	@ 0x52
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a04e:	6354      	str	r4, [r2, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800a050:	6390      	str	r0, [r2, #56]	@ 0x38
  LL_TIM_OC_SetCompareCH3 (TIMx,pHandle->_Super.CntPhC);
 800a052:	f8b3 4054 	ldrh.w	r4, [r3, #84]	@ 0x54
  if ( pHandle->_Super.SWerror == 1u )
 800a056:	f8b3 0056 	ldrh.w	r0, [r3, #86]	@ 0x56
  WRITE_REG(TIMx->CCR3, CompareValue);
 800a05a:	63d4      	str	r4, [r2, #60]	@ 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 800a05c:	6411      	str	r1, [r2, #64]	@ 0x40
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 800a05e:	6a12      	ldr	r2, [r2, #32]
}
 800a060:	f85d 4b04 	ldr.w	r4, [sp], #4
  if ( pHandle->_Super.SWerror == 1u )
 800a064:	2801      	cmp	r0, #1
    pHandle->_Super.SWerror = 0u;
 800a066:	bf0a      	itet	eq
 800a068:	2200      	moveq	r2, #0
 800a06a:	f3c2 3000 	ubfxne	r0, r2, #12, #1
 800a06e:	f8a3 2056 	strheq.w	r2, [r3, #86]	@ 0x56
}
 800a072:	4770      	bx	lr

0800a074 <R3_1_SetADCSampPointCalibration>:
{
 800a074:	b510      	push	{r4, lr}
  return R3_1_WriteTIMRegisters(&pHandle->_Super, (uint16_t)(pHandle->Half_PWMPeriod) - 1u);
 800a076:	f8b0 109c 	ldrh.w	r1, [r0, #156]	@ 0x9c
  pHandle->_Super.Sector = pHandle->CalibSector;
 800a07a:	f890 209e 	ldrb.w	r2, [r0, #158]	@ 0x9e
 800a07e:	f880 207c 	strb.w	r2, [r0, #124]	@ 0x7c
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 800a082:	f44f 1480 	mov.w	r4, #1048576	@ 0x100000
  return R3_1_WriteTIMRegisters(&pHandle->_Super, (uint16_t)(pHandle->Half_PWMPeriod) - 1u);
 800a086:	3901      	subs	r1, #1
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 800a088:	f8c0 4098 	str.w	r4, [r0, #152]	@ 0x98
  return R3_1_WriteTIMRegisters(&pHandle->_Super, (uint16_t)(pHandle->Half_PWMPeriod) - 1u);
 800a08c:	b289      	uxth	r1, r1
 800a08e:	f7ff ffd5 	bl	800a03c <R3_1_WriteTIMRegisters>
}
 800a092:	bd10      	pop	{r4, pc}

0800a094 <R3_1_SetADCSampPointSectX>:
{
 800a094:	b510      	push	{r4, lr}
  register uint16_t lowDuty = pHdl->lowDuty;
 800a096:	f8b0 2058 	ldrh.w	r2, [r0, #88]	@ 0x58
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) > pHandle->pParams_str->hTafter )
 800a09a:	f8b0 e09c 	ldrh.w	lr, [r0, #156]	@ 0x9c
 800a09e:	f8d0 40a0 	ldr.w	r4, [r0, #160]	@ 0xa0
  register uint16_t midDuty = pHdl->midDuty;
 800a0a2:	f8b0 c05a 	ldrh.w	ip, [r0, #90]	@ 0x5a
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) > pHandle->pParams_str->hTafter )
 800a0a6:	8c21      	ldrh	r1, [r4, #32]
 800a0a8:	ebae 0302 	sub.w	r3, lr, r2
 800a0ac:	b29b      	uxth	r3, r3
 800a0ae:	428b      	cmp	r3, r1
 800a0b0:	d908      	bls.n	800a0c4 <R3_1_SetADCSampPointSectX+0x30>
    pHandle->_Super.Sector = SECTOR_5;
 800a0b2:	2304      	movs	r3, #4
    hCntSmp = ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u;
 800a0b4:	f10e 31ff 	add.w	r1, lr, #4294967295
    pHandle->_Super.Sector = SECTOR_5;
 800a0b8:	f880 307c 	strb.w	r3, [r0, #124]	@ 0x7c
    hCntSmp = ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u;
 800a0bc:	b289      	uxth	r1, r1
  return R3_1_WriteTIMRegisters( &pHandle->_Super, hCntSmp);
 800a0be:	f7ff ffbd 	bl	800a03c <R3_1_WriteTIMRegisters>
}
 800a0c2:	bd10      	pop	{r4, pc}
    hDeltaDuty = ( uint16_t )( lowDuty - midDuty );
 800a0c4:	eba2 0c0c 	sub.w	ip, r2, ip
    if ( hDeltaDuty > ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) * 2u )
 800a0c8:	fa1f fc8c 	uxth.w	ip, ip
 800a0cc:	ebbc 0f43 	cmp.w	ip, r3, lsl #1
 800a0d0:	d905      	bls.n	800a0de <R3_1_SetADCSampPointSectX+0x4a>
      hCntSmp = lowDuty - pHandle->pParams_str->hTbefore;
 800a0d2:	8c63      	ldrh	r3, [r4, #34]	@ 0x22
 800a0d4:	1ad2      	subs	r2, r2, r3
 800a0d6:	b291      	uxth	r1, r2
  return R3_1_WriteTIMRegisters( &pHandle->_Super, hCntSmp);
 800a0d8:	f7ff ffb0 	bl	800a03c <R3_1_WriteTIMRegisters>
}
 800a0dc:	bd10      	pop	{r4, pc}
      hCntSmp = lowDuty + pHandle->pParams_str->hTafter;
 800a0de:	4411      	add	r1, r2
 800a0e0:	b289      	uxth	r1, r1
      if ( hCntSmp >= pHandle->Half_PWMPeriod )
 800a0e2:	458e      	cmp	lr, r1
 800a0e4:	d8eb      	bhi.n	800a0be <R3_1_SetADCSampPointSectX+0x2a>
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 800a0e6:	43c9      	mvns	r1, r1
        pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_FALLING;
 800a0e8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 800a0ec:	eb01 014e 	add.w	r1, r1, lr, lsl #1
        pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_FALLING;
 800a0f0:	f8c0 3098 	str.w	r3, [r0, #152]	@ 0x98
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 800a0f4:	b289      	uxth	r1, r1
  return R3_1_WriteTIMRegisters( &pHandle->_Super, hCntSmp);
 800a0f6:	f7ff ffa1 	bl	800a03c <R3_1_WriteTIMRegisters>
}
 800a0fa:	bd10      	pop	{r4, pc}

0800a0fc <R3_1_TIMx_UP_IRQHandler>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800a0fc:	f8d0 10a0 	ldr.w	r1, [r0, #160]	@ 0xa0
{
 800a100:	b410      	push	{r4}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800a102:	e9d1 2400 	ldrd	r2, r4, [r1]
{
 800a106:	4603      	mov	r3, r0
  CLEAR_BIT(ADCx->CR2, ADC_CR2_JEXTEN);
 800a108:	6890      	ldr	r0, [r2, #8]
 800a10a:	f420 1040 	bic.w	r0, r0, #3145728	@ 0x300000
 800a10e:	6090      	str	r0, [r2, #8]
  ADCx->JSQR = pHandle->pParams_str->ADCConfig[pHandle->_Super.Sector];
 800a110:	f893 007c 	ldrb.w	r0, [r3, #124]	@ 0x7c
 800a114:	3002      	adds	r0, #2
 800a116:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800a11a:	6391      	str	r1, [r2, #56]	@ 0x38
  SET_BIT(TIMx->CCER, Channels);
 800a11c:	6a21      	ldr	r1, [r4, #32]
  SET_BIT(ADCx->CR2, ExternalTriggerEdge);
 800a11e:	f8d3 0098 	ldr.w	r0, [r3, #152]	@ 0x98
 800a122:	f441 5180 	orr.w	r1, r1, #4096	@ 0x1000
 800a126:	6221      	str	r1, [r4, #32]
 800a128:	6891      	ldr	r1, [r2, #8]
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 800a12a:	f44f 1480 	mov.w	r4, #1048576	@ 0x100000
 800a12e:	4301      	orrs	r1, r0
 800a130:	6091      	str	r1, [r2, #8]
}
 800a132:	f103 007a 	add.w	r0, r3, #122	@ 0x7a
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 800a136:	f8c3 4098 	str.w	r4, [r3, #152]	@ 0x98
}
 800a13a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a13e:	4770      	bx	lr

0800a140 <R3_1_RLDetectionModeEnable>:
  if (pHandle->_Super.RLDetectionMode == false)
 800a140:	f890 1080 	ldrb.w	r1, [r0, #128]	@ 0x80
{
 800a144:	b410      	push	{r4}
  if (pHandle->_Super.RLDetectionMode == false)
 800a146:	2900      	cmp	r1, #0
 800a148:	d135      	bne.n	800a1b6 <R3_1_RLDetectionModeEnable+0x76>
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 800a14a:	f8d0 30a0 	ldr.w	r3, [r0, #160]	@ 0xa0
 800a14e:	685b      	ldr	r3, [r3, #4]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800a150:	699a      	ldr	r2, [r3, #24]
 800a152:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 800a156:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800a15a:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800a15c:	6a1a      	ldr	r2, [r3, #32]
 800a15e:	f042 0201 	orr.w	r2, r2, #1
 800a162:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 800a164:	6a1a      	ldr	r2, [r3, #32]
 800a166:	f022 0204 	bic.w	r2, r2, #4
 800a16a:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a16c:	6359      	str	r1, [r3, #52]	@ 0x34
    if ((pHandle->_Super.LowSideOutputs)== LS_PWM_TIMER)
 800a16e:	f890 207d 	ldrb.w	r2, [r0, #125]	@ 0x7d
 800a172:	2a01      	cmp	r2, #1
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800a174:	f103 0418 	add.w	r4, r3, #24
 800a178:	d02b      	beq.n	800a1d2 <R3_1_RLDetectionModeEnable+0x92>
    else if ((pHandle->_Super.LowSideOutputs)== ES_GPIO)
 800a17a:	2a02      	cmp	r2, #2
 800a17c:	d10d      	bne.n	800a19a <R3_1_RLDetectionModeEnable+0x5a>
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800a17e:	699a      	ldr	r2, [r3, #24]
 800a180:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
 800a184:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a188:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800a18a:	6a1a      	ldr	r2, [r3, #32]
 800a18c:	f042 0210 	orr.w	r2, r2, #16
 800a190:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 800a192:	6a1a      	ldr	r2, [r3, #32]
 800a194:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a198:	621a      	str	r2, [r3, #32]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800a19a:	6862      	ldr	r2, [r4, #4]
 800a19c:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 800a1a0:	f042 0270 	orr.w	r2, r2, #112	@ 0x70
 800a1a4:	6062      	str	r2, [r4, #4]
  CLEAR_BIT(TIMx->CCER, Channels);
 800a1a6:	6a1a      	ldr	r2, [r3, #32]
 800a1a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a1ac:	621a      	str	r2, [r3, #32]
 800a1ae:	6a1a      	ldr	r2, [r3, #32]
 800a1b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a1b4:	621a      	str	r2, [r3, #32]
  pHandle->_Super.pFctTurnOnLowSides = &R3_1_RLTurnOnLowSides;
 800a1b6:	4b0e      	ldr	r3, [pc, #56]	@ (800a1f0 <R3_1_RLDetectionModeEnable+0xb0>)
  pHandle->_Super.pFctSwitchOnPwm = &R3_1_RLSwitchOnPWM;
 800a1b8:	490e      	ldr	r1, [pc, #56]	@ (800a1f4 <R3_1_RLDetectionModeEnable+0xb4>)
  pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 800a1ba:	4a0f      	ldr	r2, [pc, #60]	@ (800a1f8 <R3_1_RLDetectionModeEnable+0xb8>)
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_RLGetPhaseCurrents;
 800a1bc:	4c0f      	ldr	r4, [pc, #60]	@ (800a1fc <R3_1_RLDetectionModeEnable+0xbc>)
  pHandle->_Super.pFctTurnOnLowSides = &R3_1_RLTurnOnLowSides;
 800a1be:	6103      	str	r3, [r0, #16]
  pHandle->_Super.RLDetectionMode = true;
 800a1c0:	2301      	movs	r3, #1
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_RLGetPhaseCurrents;
 800a1c2:	6004      	str	r4, [r0, #0]
  pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 800a1c4:	e9c0 2101 	strd	r2, r1, [r0, #4]
}
 800a1c8:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->_Super.RLDetectionMode = true;
 800a1cc:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
}
 800a1d0:	4770      	bx	lr
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800a1d2:	699a      	ldr	r2, [r3, #24]
 800a1d4:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
 800a1d8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a1dc:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(TIMx->CCER, Channels);
 800a1de:	6a1a      	ldr	r2, [r3, #32]
 800a1e0:	f022 0210 	bic.w	r2, r2, #16
 800a1e4:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CCER, Channels);
 800a1e6:	6a1a      	ldr	r2, [r3, #32]
 800a1e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a1ec:	621a      	str	r2, [r3, #32]
}
 800a1ee:	e7d4      	b.n	800a19a <R3_1_RLDetectionModeEnable+0x5a>
 800a1f0:	08009de5 	.word	0x08009de5
 800a1f4:	08009ced 	.word	0x08009ced
 800a1f8:	08009c2d 	.word	0x08009c2d
 800a1fc:	08009ca5 	.word	0x08009ca5

0800a200 <R3_1_RLDetectionModeDisable>:
  if (pHandle->_Super.RLDetectionMode == true)
 800a200:	f890 3080 	ldrb.w	r3, [r0, #128]	@ 0x80
 800a204:	2b00      	cmp	r3, #0
 800a206:	d04a      	beq.n	800a29e <R3_1_RLDetectionModeDisable+0x9e>
{
 800a208:	b410      	push	{r4}
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 800a20a:	f8d0 10a0 	ldr.w	r1, [r0, #160]	@ 0xa0
 800a20e:	684b      	ldr	r3, [r1, #4]
    while ((TIMx->CR1 & DIR_MASK) == 0u)
 800a210:	681a      	ldr	r2, [r3, #0]
 800a212:	06d4      	lsls	r4, r2, #27
 800a214:	d5fc      	bpl.n	800a210 <R3_1_RLDetectionModeDisable+0x10>
    while ((TIMx->CR1 & DIR_MASK) == DIR_MASK)
 800a216:	681a      	ldr	r2, [r3, #0]
 800a218:	06d2      	lsls	r2, r2, #27
 800a21a:	d4fc      	bmi.n	800a216 <R3_1_RLDetectionModeDisable+0x16>
    TIMx->RCR = pHandle->pParams_str->RepetitionCounter;
 800a21c:	f891 202a 	ldrb.w	r2, [r1, #42]	@ 0x2a
 800a220:	631a      	str	r2, [r3, #48]	@ 0x30
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800a222:	699a      	ldr	r2, [r3, #24]
    LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod) >> 1);
 800a224:	f8b0 c09c 	ldrh.w	ip, [r0, #156]	@ 0x9c
 800a228:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 800a22c:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800a230:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800a232:	6a1c      	ldr	r4, [r3, #32]
 800a234:	f044 0401 	orr.w	r4, r4, #1
 800a238:	621c      	str	r4, [r3, #32]
    if ((pHandle->_Super.LowSideOutputs)== LS_PWM_TIMER)
 800a23a:	f890 407d 	ldrb.w	r4, [r0, #125]	@ 0x7d
 800a23e:	2c01      	cmp	r4, #1
    LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod) >> 1);
 800a240:	ea4f 025c 	mov.w	r2, ip, lsr #1
    if ((pHandle->_Super.LowSideOutputs)== LS_PWM_TIMER)
 800a244:	d02c      	beq.n	800a2a0 <R3_1_RLDetectionModeDisable+0xa0>
    else if ((pHandle->_Super.LowSideOutputs)== ES_GPIO)
 800a246:	2c02      	cmp	r4, #2
 800a248:	d04d      	beq.n	800a2e6 <R3_1_RLDetectionModeDisable+0xe6>
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a24a:	635a      	str	r2, [r3, #52]	@ 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800a24c:	699c      	ldr	r4, [r3, #24]
 800a24e:	f424 44e6 	bic.w	r4, r4, #29440	@ 0x7300
 800a252:	f444 44c0 	orr.w	r4, r4, #24576	@ 0x6000
 800a256:	619c      	str	r4, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800a258:	6a1c      	ldr	r4, [r3, #32]
 800a25a:	f044 0410 	orr.w	r4, r4, #16
 800a25e:	621c      	str	r4, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800a260:	639a      	str	r2, [r3, #56]	@ 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800a262:	69dc      	ldr	r4, [r3, #28]
 800a264:	f024 0473 	bic.w	r4, r4, #115	@ 0x73
 800a268:	f044 0460 	orr.w	r4, r4, #96	@ 0x60
 800a26c:	61dc      	str	r4, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 800a26e:	6a1c      	ldr	r4, [r3, #32]
 800a270:	f444 7480 	orr.w	r4, r4, #256	@ 0x100
 800a274:	621c      	str	r4, [r3, #32]
    LL_ADC_INJ_SetSequencerDiscont(pHandle->pParams_str->ADCx,
 800a276:	6809      	ldr	r1, [r1, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800a278:	63da      	str	r2, [r3, #60]	@ 0x3c
  MODIFY_REG(ADCx->CR1, ADC_CR1_JDISCEN, SeqDiscont);
 800a27a:	684b      	ldr	r3, [r1, #4]
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_GetPhaseCurrents;
 800a27c:	4a2b      	ldr	r2, [pc, #172]	@ (800a32c <R3_1_RLDetectionModeDisable+0x12c>)
    pHandle->_Super.pFctTurnOnLowSides = &R3_1_TurnOnLowSides;
 800a27e:	4c2c      	ldr	r4, [pc, #176]	@ (800a330 <R3_1_RLDetectionModeDisable+0x130>)
 800a280:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a284:	604b      	str	r3, [r1, #4]
    pHandle->_Super.pFctSwitchOnPwm = &R3_1_SwitchOnPWM;
 800a286:	492b      	ldr	r1, [pc, #172]	@ (800a334 <R3_1_RLDetectionModeDisable+0x134>)
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_GetPhaseCurrents;
 800a288:	6002      	str	r2, [r0, #0]
    pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 800a28a:	4a2b      	ldr	r2, [pc, #172]	@ (800a338 <R3_1_RLDetectionModeDisable+0x138>)
    pHandle->_Super.pFctTurnOnLowSides = &R3_1_TurnOnLowSides;
 800a28c:	6104      	str	r4, [r0, #16]
    pHandle->_Super.RLDetectionMode = false;
 800a28e:	2300      	movs	r3, #0
    pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 800a290:	e9c0 2101 	strd	r2, r1, [r0, #4]
}
 800a294:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->_Super.RLDetectionMode = false;
 800a298:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
}
 800a29c:	4770      	bx	lr
 800a29e:	4770      	bx	lr
  SET_BIT(TIMx->CCER, Channels);
 800a2a0:	6a1c      	ldr	r4, [r3, #32]
 800a2a2:	f044 0404 	orr.w	r4, r4, #4
 800a2a6:	621c      	str	r4, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a2a8:	635a      	str	r2, [r3, #52]	@ 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800a2aa:	699c      	ldr	r4, [r3, #24]
 800a2ac:	f424 44e6 	bic.w	r4, r4, #29440	@ 0x7300
 800a2b0:	f444 44c0 	orr.w	r4, r4, #24576	@ 0x6000
 800a2b4:	619c      	str	r4, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800a2b6:	6a1c      	ldr	r4, [r3, #32]
 800a2b8:	f044 0410 	orr.w	r4, r4, #16
 800a2bc:	621c      	str	r4, [r3, #32]
 800a2be:	6a1c      	ldr	r4, [r3, #32]
 800a2c0:	f044 0440 	orr.w	r4, r4, #64	@ 0x40
 800a2c4:	621c      	str	r4, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800a2c6:	639a      	str	r2, [r3, #56]	@ 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800a2c8:	69dc      	ldr	r4, [r3, #28]
 800a2ca:	f024 0473 	bic.w	r4, r4, #115	@ 0x73
 800a2ce:	f044 0460 	orr.w	r4, r4, #96	@ 0x60
 800a2d2:	61dc      	str	r4, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 800a2d4:	6a1c      	ldr	r4, [r3, #32]
 800a2d6:	f444 7480 	orr.w	r4, r4, #256	@ 0x100
 800a2da:	621c      	str	r4, [r3, #32]
 800a2dc:	6a1c      	ldr	r4, [r3, #32]
 800a2de:	f444 6480 	orr.w	r4, r4, #1024	@ 0x400
 800a2e2:	621c      	str	r4, [r3, #32]
}
 800a2e4:	e7c7      	b.n	800a276 <R3_1_RLDetectionModeDisable+0x76>
  CLEAR_BIT(TIMx->CCER, Channels);
 800a2e6:	6a1c      	ldr	r4, [r3, #32]
 800a2e8:	f024 0404 	bic.w	r4, r4, #4
 800a2ec:	621c      	str	r4, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a2ee:	635a      	str	r2, [r3, #52]	@ 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800a2f0:	699c      	ldr	r4, [r3, #24]
 800a2f2:	f424 44e6 	bic.w	r4, r4, #29440	@ 0x7300
 800a2f6:	f444 44c0 	orr.w	r4, r4, #24576	@ 0x6000
 800a2fa:	619c      	str	r4, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800a2fc:	6a1c      	ldr	r4, [r3, #32]
 800a2fe:	f044 0410 	orr.w	r4, r4, #16
 800a302:	621c      	str	r4, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 800a304:	6a1c      	ldr	r4, [r3, #32]
 800a306:	f024 0440 	bic.w	r4, r4, #64	@ 0x40
 800a30a:	621c      	str	r4, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800a30c:	639a      	str	r2, [r3, #56]	@ 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800a30e:	69dc      	ldr	r4, [r3, #28]
 800a310:	f024 0473 	bic.w	r4, r4, #115	@ 0x73
 800a314:	f044 0460 	orr.w	r4, r4, #96	@ 0x60
 800a318:	61dc      	str	r4, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 800a31a:	6a1c      	ldr	r4, [r3, #32]
 800a31c:	f444 7480 	orr.w	r4, r4, #256	@ 0x100
 800a320:	621c      	str	r4, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 800a322:	6a1c      	ldr	r4, [r3, #32]
 800a324:	f424 6480 	bic.w	r4, r4, #1024	@ 0x400
 800a328:	621c      	str	r4, [r3, #32]
}
 800a32a:	e7a4      	b.n	800a276 <R3_1_RLDetectionModeDisable+0x76>
 800a32c:	080099a5 	.word	0x080099a5
 800a330:	08009d89 	.word	0x08009d89
 800a334:	08009b99 	.word	0x08009b99
 800a338:	08009c2d 	.word	0x08009c2d

0800a33c <R3_1_RLDetectionModeSetDuty>:
{
 800a33c:	4603      	mov	r3, r0
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800a33e:	f8d0 00a0 	ldr.w	r0, [r0, #160]	@ 0xa0
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 800a342:	f8b3 209c 	ldrh.w	r2, [r3, #156]	@ 0x9c
{
 800a346:	b410      	push	{r4}
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 800a348:	fb02 f101 	mul.w	r1, r2, r1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800a34c:	6844      	ldr	r4, [r0, #4]
  if (pHandle->_Super.SWerror == 1u)
 800a34e:	f8b3 0056 	ldrh.w	r0, [r3, #86]	@ 0x56
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 800a352:	0c09      	lsrs	r1, r1, #16
  pHandle->_Super.Sector = SECTOR_4;
 800a354:	2203      	movs	r2, #3
 800a356:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
  pHandle->_Super.CntPhA = ( uint16_t )( val );
 800a35a:	f8a3 1050 	strh.w	r1, [r3, #80]	@ 0x50
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a35e:	6361      	str	r1, [r4, #52]	@ 0x34
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 800a360:	6a22      	ldr	r2, [r4, #32]
}
 800a362:	f85d 4b04 	ldr.w	r4, [sp], #4
  if (pHandle->_Super.SWerror == 1u)
 800a366:	2801      	cmp	r0, #1
    pHandle->_Super.SWerror = 0u;
 800a368:	bf0a      	itet	eq
 800a36a:	2200      	moveq	r2, #0
 800a36c:	f3c2 3000 	ubfxne	r0, r2, #12, #1
 800a370:	f8a3 2056 	strheq.w	r2, [r3, #86]	@ 0x56
}
 800a374:	4770      	bx	lr
 800a376:	bf00      	nop

0800a378 <R3_1_RLTurnOnLowSidesAndStart>:
 * @param  pHdl: Handler of the current instance of the PWM component.
 */
void R3_1_RLTurnOnLowSidesAndStart( PWMC_Handle_t * pHdl )
{
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800a378:	f8d0 20a0 	ldr.w	r2, [r0, #160]	@ 0xa0
{
 800a37c:	b430      	push	{r4, r5}
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 800a37e:	e9d2 4300 	ldrd	r4, r3, [r2]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800a382:	f06f 0101 	mvn.w	r1, #1
 800a386:	6119      	str	r1, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800a388:	691a      	ldr	r2, [r3, #16]
 800a38a:	07d1      	lsls	r1, r2, #31
 800a38c:	d5fc      	bpl.n	800a388 <R3_1_RLTurnOnLowSidesAndStart+0x10>

  LL_TIM_OC_SetCompareCH1 ( TIMx, 0x0u );
  LL_TIM_OC_SetCompareCH2 ( TIMx, 0x0u );
  LL_TIM_OC_SetCompareCH3 ( TIMx, 0x0u );

  LL_TIM_OC_SetCompareCH4( TIMx, ( pHandle->Half_PWMPeriod - 5u));
 800a38e:	f8b0 209c 	ldrh.w	r2, [r0, #156]	@ 0x9c
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a392:	2100      	movs	r1, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800a394:	f06f 0501 	mvn.w	r5, #1
 800a398:	3a05      	subs	r2, #5
 800a39a:	611d      	str	r5, [r3, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a39c:	6359      	str	r1, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800a39e:	6399      	str	r1, [r3, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800a3a0:	63d9      	str	r1, [r3, #60]	@ 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 800a3a2:	641a      	str	r2, [r3, #64]	@ 0x40
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800a3a4:	691a      	ldr	r2, [r3, #16]
 800a3a6:	07d2      	lsls	r2, r2, #31
 800a3a8:	d5fc      	bpl.n	800a3a4 <R3_1_RLTurnOnLowSidesAndStart+0x2c>

  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
  {}

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE ;
 800a3aa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a3ac:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a3b0:	645a      	str	r2, [r3, #68]	@ 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800a3b2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a3b4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a3b8:	645a      	str	r2, [r3, #68]	@ 0x44
  LL_TIM_EnableAllOutputs ( TIMx );

  if ( ( pHandle->_Super.LowSideOutputs ) == ES_GPIO )
 800a3ba:	f890 307d 	ldrb.w	r3, [r0, #125]	@ 0x7d
 800a3be:	2b02      	cmp	r3, #2
 800a3c0:	d10b      	bne.n	800a3da <R3_1_RLTurnOnLowSidesAndStart+0x62>
  {
      /* It is executed during calibration phase the EN signal shall stay off */
      LL_GPIO_SetOutputPin( pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin );
      LL_GPIO_SetOutputPin( pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin );
 800a3c2:	e9d0 210f 	ldrd	r2, r1, [r0, #60]	@ 0x3c
      LL_GPIO_SetOutputPin( pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin );
 800a3c6:	f8b0 5048 	ldrh.w	r5, [r0, #72]	@ 0x48
      LL_GPIO_SetOutputPin( pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin );
 800a3ca:	6c43      	ldr	r3, [r0, #68]	@ 0x44
  WRITE_REG(GPIOx->BSRR, PinMask);
 800a3cc:	6195      	str	r5, [r2, #24]
      LL_GPIO_SetOutputPin( pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin );
 800a3ce:	f8b0 504a 	ldrh.w	r5, [r0, #74]	@ 0x4a
      LL_GPIO_SetOutputPin( pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin );
 800a3d2:	f8b0 204c 	ldrh.w	r2, [r0, #76]	@ 0x4c
 800a3d6:	618d      	str	r5, [r1, #24]
 800a3d8:	619a      	str	r2, [r3, #24]
  SET_BIT(ADCx->CR2, ExternalTriggerEdge);
 800a3da:	68a3      	ldr	r3, [r4, #8]
 800a3dc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a3e0:	60a3      	str	r3, [r4, #8]

//  ADCx->JSQR = pHandle->wADC_JSQR_phAB;
  LL_ADC_INJ_StartConversionExtTrig(ADCx,LL_ADC_INJ_TRIG_EXT_RISING);

  return;
}
 800a3e2:	bc30      	pop	{r4, r5}
 800a3e4:	4770      	bx	lr
 800a3e6:	bf00      	nop

0800a3e8 <RVBS_Clear>:
  {
#endif
    uint16_t aux;
    uint16_t index;

    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 800a3e8:	f8b0 c00c 	ldrh.w	ip, [r0, #12]
 800a3ec:	8a42      	ldrh	r2, [r0, #18]
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 800a3ee:	8943      	ldrh	r3, [r0, #10]
    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 800a3f0:	4494      	add	ip, r2
 800a3f2:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
{
 800a3f6:	b430      	push	{r4, r5}
 800a3f8:	2500      	movs	r5, #0
 800a3fa:	f36c 050f 	bfi	r5, ip, #0, #16
 800a3fe:	f36c 451f 	bfi	r5, ip, #16, #16
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 800a402:	b14b      	cbz	r3, 800a418 <RVBS_Clear+0x30>
    {
      pHandle->aBuffer[index] = aux;
 800a404:	6944      	ldr	r4, [r0, #20]
 800a406:	2300      	movs	r3, #0
 800a408:	b29a      	uxth	r2, r3
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 800a40a:	3301      	adds	r3, #1
      pHandle->aBuffer[index] = aux;
 800a40c:	f824 c012 	strh.w	ip, [r4, r2, lsl #1]
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 800a410:	8941      	ldrh	r1, [r0, #10]
 800a412:	b29a      	uxth	r2, r3
 800a414:	4291      	cmp	r1, r2
 800a416:	d8f7      	bhi.n	800a408 <RVBS_Clear+0x20>
    }
    pHandle->_Super.LatestConv = aux;
    pHandle->_Super.AvBusVoltage_d = aux;
    pHandle->index = 0U;
 800a418:	2300      	movs	r3, #0
    pHandle->_Super.LatestConv = aux;
 800a41a:	6045      	str	r5, [r0, #4]
    pHandle->index = 0U;
 800a41c:	7643      	strb	r3, [r0, #25]
#ifdef NULL_PTR_CHECK_RDIV_BUS_VLT_SNS
  }
#endif
}
 800a41e:	bc30      	pop	{r4, r5}
 800a420:	4770      	bx	lr
 800a422:	bf00      	nop

0800a424 <RVBS_Init>:
{
 800a424:	b508      	push	{r3, lr}
    RVBS_Clear(pHandle);
 800a426:	f7ff ffdf 	bl	800a3e8 <RVBS_Clear>
}
 800a42a:	bd08      	pop	{r3, pc}

0800a42c <RVBS_CheckFaultState>:
  }
  else
  {
#endif
	/* If both thresholds are equal, single threshold feature is used */
	if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 800a42c:	8982      	ldrh	r2, [r0, #12]
 800a42e:	89c1      	ldrh	r1, [r0, #14]
	{
      if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 800a430:	88c3      	ldrh	r3, [r0, #6]
	if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 800a432:	428a      	cmp	r2, r1
 800a434:	d010      	beq.n	800a458 <RVBS_CheckFaultState+0x2c>
      }
	}
    else
    {
      /* If both thresholds are different, hysteresis feature is used (Brake mode) */
      if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 800a436:	f8b0 c012 	ldrh.w	ip, [r0, #18]
 800a43a:	459c      	cmp	ip, r3
 800a43c:	d80a      	bhi.n	800a454 <RVBS_CheckFaultState+0x28>
{
 800a43e:	b410      	push	{r4}
      {
        fault = MC_UNDER_VOLT;
      }
      else if ( false == pHandle->OverVoltageHysteresisUpDir )
 800a440:	7c04      	ldrb	r4, [r0, #16]
 800a442:	b994      	cbnz	r4, 800a46a <RVBS_CheckFaultState+0x3e>
      {
        if (pHandle->_Super.AvBusVoltage_d < pHandle->OverVoltageThresholdLow)
 800a444:	4299      	cmp	r1, r3
 800a446:	d914      	bls.n	800a472 <RVBS_CheckFaultState+0x46>
        {
          pHandle->OverVoltageHysteresisUpDir = true;
 800a448:	2301      	movs	r3, #1
 800a44a:	7403      	strb	r3, [r0, #16]
        {
          pHandle->OverVoltageHysteresisUpDir = false;
          fault = MC_OVER_VOLT;
        }
        else{
          fault = MC_NO_ERROR;
 800a44c:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_RDIV_BUS_VLT_SNS
  }
#endif
  return (fault);
}
 800a44e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a452:	4770      	bx	lr
        fault = MC_UNDER_VOLT;
 800a454:	2004      	movs	r0, #4
 800a456:	4770      	bx	lr
      if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 800a458:	429a      	cmp	r2, r3
 800a45a:	d30c      	bcc.n	800a476 <RVBS_CheckFaultState+0x4a>
      else if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 800a45c:	8a40      	ldrh	r0, [r0, #18]
 800a45e:	4298      	cmp	r0, r3
 800a460:	bf94      	ite	ls
 800a462:	2000      	movls	r0, #0
 800a464:	2001      	movhi	r0, #1
 800a466:	0080      	lsls	r0, r0, #2
 800a468:	4770      	bx	lr
        if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 800a46a:	429a      	cmp	r2, r3
 800a46c:	d2ee      	bcs.n	800a44c <RVBS_CheckFaultState+0x20>
          pHandle->OverVoltageHysteresisUpDir = false;
 800a46e:	2300      	movs	r3, #0
 800a470:	7403      	strb	r3, [r0, #16]
          fault = MC_OVER_VOLT;
 800a472:	2002      	movs	r0, #2
 800a474:	e7eb      	b.n	800a44e <RVBS_CheckFaultState+0x22>
 800a476:	2002      	movs	r0, #2
}
 800a478:	4770      	bx	lr
 800a47a:	bf00      	nop

0800a47c <RVBS_CalcAvVbus>:
{
 800a47c:	b538      	push	{r3, r4, r5, lr}
    if (0xFFFFU == hAux)
 800a47e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a482:	4299      	cmp	r1, r3
{
 800a484:	4604      	mov	r4, r0
    if (0xFFFFU == hAux)
 800a486:	d021      	beq.n	800a4cc <RVBS_CalcAvVbus+0x50>
      pHandle->aBuffer[pHandle->index] = hAux;
 800a488:	6943      	ldr	r3, [r0, #20]
 800a48a:	7e45      	ldrb	r5, [r0, #25]
 800a48c:	f823 1015 	strh.w	r1, [r3, r5, lsl #1]
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 800a490:	f8b0 e00a 	ldrh.w	lr, [r0, #10]
 800a494:	f01e 02ff 	ands.w	r2, lr, #255	@ 0xff
 800a498:	d00d      	beq.n	800a4b6 <RVBS_CalcAvVbus+0x3a>
 800a49a:	3a01      	subs	r2, #1
 800a49c:	b2d2      	uxtb	r2, r2
 800a49e:	eb03 0042 	add.w	r0, r3, r2, lsl #1
 800a4a2:	3b02      	subs	r3, #2
      wtemp = 0u;
 800a4a4:	2200      	movs	r2, #0
        wtemp += pHandle->aBuffer[i];
 800a4a6:	f833 cf02 	ldrh.w	ip, [r3, #2]!
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 800a4aa:	4298      	cmp	r0, r3
        wtemp += pHandle->aBuffer[i];
 800a4ac:	4462      	add	r2, ip
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 800a4ae:	d1fa      	bne.n	800a4a6 <RVBS_CalcAvVbus+0x2a>
      wtemp /= pHandle->LowPassFilterBW;
 800a4b0:	fbb2 f2fe 	udiv	r2, r2, lr
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 800a4b4:	b292      	uxth	r2, r2
      if ((uint16_t)pHandle->index < (pHandle->LowPassFilterBW - 1U))
 800a4b6:	f10e 3eff 	add.w	lr, lr, #4294967295
 800a4ba:	4575      	cmp	r5, lr
        pHandle->index++;
 800a4bc:	bf34      	ite	cc
 800a4be:	3501      	addcc	r5, #1
        pHandle->index = 0U;
 800a4c0:	2300      	movcs	r3, #0
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 800a4c2:	80e2      	strh	r2, [r4, #6]
      pHandle->_Super.LatestConv = hAux;
 800a4c4:	80a1      	strh	r1, [r4, #4]
        pHandle->index++;
 800a4c6:	bf34      	ite	cc
 800a4c8:	7665      	strbcc	r5, [r4, #25]
        pHandle->index = 0U;
 800a4ca:	7663      	strbcs	r3, [r4, #25]
    pHandle->_Super.FaultState = RVBS_CheckFaultState(pHandle);
 800a4cc:	4620      	mov	r0, r4
 800a4ce:	f7ff ffad 	bl	800a42c <RVBS_CheckFaultState>
 800a4d2:	8120      	strh	r0, [r4, #8]
}
 800a4d4:	bd38      	pop	{r3, r4, r5, pc}
 800a4d6:	bf00      	nop

0800a4d8 <REMNG_Init>:
  }
  else
  {
#endif
    pHandle->Ext = 0;
    pHandle->TargetFinal = 0;
 800a4d8:	2300      	movs	r3, #0
    pHandle->RampRemainingStep = 0U;
    pHandle->IncDecAmount = 0;
    pHandle->ScalingFactor = 1U;
 800a4da:	2201      	movs	r2, #1
    pHandle->TargetFinal = 0;
 800a4dc:	e9c0 3301 	strd	r3, r3, [r0, #4]
    pHandle->IncDecAmount = 0;
 800a4e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
    pHandle->ScalingFactor = 1U;
 800a4e4:	6142      	str	r2, [r0, #20]
#ifdef NULL_PTR_CHECK_RMP_EXT_MNG
  }
#endif
}
 800a4e6:	4770      	bx	lr

0800a4e8 <REMNG_Calc>:
  else
  {
#endif
    int32_t current_ref;

    current_ref = pHandle->Ext;
 800a4e8:	e9d0 2102 	ldrd	r2, r1, [r0, #8]

    /* Update the variable and terminates the ramp if needed */
    if (pHandle->RampRemainingStep > 1U)
 800a4ec:	2901      	cmp	r1, #1
{
 800a4ee:	b410      	push	{r4}
 800a4f0:	4603      	mov	r3, r0
      pHandle->RampRemainingStep --;
    }
    else if (1U == pHandle->RampRemainingStep)
    {
      /* Set the backup value of TargetFinal */
      current_ref = pHandle->TargetFinal * ((int32_t)pHandle->ScalingFactor);
 800a4f2:	6944      	ldr	r4, [r0, #20]
    if (pHandle->RampRemainingStep > 1U)
 800a4f4:	d909      	bls.n	800a50a <REMNG_Calc+0x22>
      current_ref += pHandle->IncDecAmount;
 800a4f6:	6900      	ldr	r0, [r0, #16]
      pHandle->RampRemainingStep --;
 800a4f8:	3901      	subs	r1, #1
      current_ref += pHandle->IncDecAmount;
 800a4fa:	4402      	add	r2, r0
      pHandle->RampRemainingStep --;
 800a4fc:	60d9      	str	r1, [r3, #12]
    {
      /* Do nothing */
    }

    pHandle->Ext = current_ref;
    ret_val = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 800a4fe:	fb92 f0f4 	sdiv	r0, r2, r4
    pHandle->Ext = current_ref;
 800a502:	609a      	str	r2, [r3, #8]
#ifdef NULL_PTR_CHECK_RMP_EXT_MNG
  }
#endif
  return (ret_val);
}
 800a504:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a508:	4770      	bx	lr
    else if (1U == pHandle->RampRemainingStep)
 800a50a:	d005      	beq.n	800a518 <REMNG_Calc+0x30>
    ret_val = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 800a50c:	fb92 f0f4 	sdiv	r0, r2, r4
}
 800a510:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->Ext = current_ref;
 800a514:	609a      	str	r2, [r3, #8]
}
 800a516:	4770      	bx	lr
      current_ref = pHandle->TargetFinal * ((int32_t)pHandle->ScalingFactor);
 800a518:	6840      	ldr	r0, [r0, #4]
 800a51a:	fb04 f200 	mul.w	r2, r4, r0
      pHandle->RampRemainingStep = 0U;
 800a51e:	2100      	movs	r1, #0
}
 800a520:	f85d 4b04 	ldr.w	r4, [sp], #4
      pHandle->RampRemainingStep = 0U;
 800a524:	60d9      	str	r1, [r3, #12]
    pHandle->Ext = current_ref;
 800a526:	609a      	str	r2, [r3, #8]
}
 800a528:	4770      	bx	lr
 800a52a:	bf00      	nop

0800a52c <REMNG_RampCompleted>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (0U == pHandle->RampRemainingStep)
 800a52c:	68c0      	ldr	r0, [r0, #12]
#ifdef NULL_PTR_CHECK_RMP_EXT_MNG
  }
#endif
  return (retVal);

}
 800a52e:	fab0 f080 	clz	r0, r0
 800a532:	0940      	lsrs	r0, r0, #5
 800a534:	4770      	bx	lr
 800a536:	bf00      	nop

0800a538 <REMNG_StopRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->RampRemainingStep = 0U;
 800a538:	2300      	movs	r3, #0
    pHandle->IncDecAmount = 0;
 800a53a:	e9c0 3303 	strd	r3, r3, [r0, #12]
#ifdef NULL_PTR_CHECK_RMP_EXT_MNG
  }
#endif
}
 800a53e:	4770      	bx	lr

0800a540 <getScalingFactor>:
  int32_t aux;
  uint8_t i;

  if (Target < 0)
  {
    aux = -Target;
 800a540:	2800      	cmp	r0, #0
 800a542:	bfb8      	it	lt
 800a544:	4240      	neglt	r0, r0
    TargetAbs = (uint32_t)Target;
  }
  for (i = 1U; i < 32U; i++)
  {
    uint32_t limit = (((uint32_t)1) << (31U - i));
    if (TargetAbs >= limit)
 800a546:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800a54a:	d213      	bcs.n	800a574 <getScalingFactor+0x34>
 800a54c:	2302      	movs	r3, #2
    uint32_t limit = (((uint32_t)1) << (31U - i));
 800a54e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800a552:	e001      	b.n	800a558 <getScalingFactor+0x18>
  for (i = 1U; i < 32U; i++)
 800a554:	2b20      	cmp	r3, #32
 800a556:	d00a      	beq.n	800a56e <getScalingFactor+0x2e>
    uint32_t limit = (((uint32_t)1) << (31U - i));
 800a558:	fa2c f203 	lsr.w	r2, ip, r3
    if (TargetAbs >= limit)
 800a55c:	4290      	cmp	r0, r2
 800a55e:	4619      	mov	r1, r3
 800a560:	f103 0301 	add.w	r3, r3, #1
 800a564:	d3f6      	bcc.n	800a554 <getScalingFactor+0x14>
    else
    {
      /* Nothing to do */
    }
  }
  return (((uint32_t)1) << (i - 1U));
 800a566:	3901      	subs	r1, #1
 800a568:	2001      	movs	r0, #1
 800a56a:	4088      	lsls	r0, r1
 800a56c:	4770      	bx	lr
 800a56e:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800a572:	4770      	bx	lr
    if (TargetAbs >= limit)
 800a574:	2001      	movs	r0, #1
}
 800a576:	4770      	bx	lr

0800a578 <REMNG_ExecRamp>:
{
 800a578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a57c:	4604      	mov	r4, r0
 800a57e:	460e      	mov	r6, r1
    current_ref = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 800a580:	6880      	ldr	r0, [r0, #8]
 800a582:	6963      	ldr	r3, [r4, #20]
    if (0U == Durationms)
 800a584:	4615      	mov	r5, r2
 800a586:	b962      	cbnz	r2, 800a5a2 <REMNG_ExecRamp+0x2a>
      pHandle->ScalingFactor = getScalingFactor(TargetFinal);
 800a588:	4608      	mov	r0, r1
 800a58a:	f7ff ffd9 	bl	800a540 <getScalingFactor>
      pHandle->Ext = TargetFinal * ((int32_t)pHandle->ScalingFactor);
 800a58e:	fb00 f606 	mul.w	r6, r0, r6
      pHandle->ScalingFactor = getScalingFactor(TargetFinal);
 800a592:	6160      	str	r0, [r4, #20]
      pHandle->Ext = TargetFinal * ((int32_t)pHandle->ScalingFactor);
 800a594:	4628      	mov	r0, r5
      pHandle->IncDecAmount = 0;
 800a596:	e9c4 5003 	strd	r5, r0, [r4, #12]
      pHandle->Ext = TargetFinal * ((int32_t)pHandle->ScalingFactor);
 800a59a:	60a6      	str	r6, [r4, #8]
}
 800a59c:	2001      	movs	r0, #1
 800a59e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    current_ref = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 800a5a2:	fb90 f8f3 	sdiv	r8, r0, r3
      uint32_t wScalingFactor = getScalingFactor(TargetFinal - current_ref);
 800a5a6:	eba1 0708 	sub.w	r7, r1, r8
 800a5aa:	4638      	mov	r0, r7
 800a5ac:	f7ff ffc8 	bl	800a540 <getScalingFactor>
 800a5b0:	4682      	mov	sl, r0
      uint32_t wScalingFactor2 = getScalingFactor(current_ref);
 800a5b2:	4640      	mov	r0, r8
 800a5b4:	f7ff ffc4 	bl	800a540 <getScalingFactor>
 800a5b8:	4681      	mov	r9, r0
      uint32_t wScalingFactor3 = getScalingFactor(TargetFinal);
 800a5ba:	4630      	mov	r0, r6
 800a5bc:	f7ff ffc0 	bl	800a540 <getScalingFactor>
      if (wScalingFactor <  wScalingFactor2)
 800a5c0:	45ca      	cmp	sl, r9
 800a5c2:	d318      	bcc.n	800a5f6 <REMNG_ExecRamp+0x7e>
        if (wScalingFactor2 < wScalingFactor3)
 800a5c4:	4548      	cmp	r0, r9
 800a5c6:	bf28      	it	cs
 800a5c8:	4648      	movcs	r0, r9
      pHandle->Ext = current_ref * ((int32_t)pHandle->ScalingFactor);
 800a5ca:	fb08 f300 	mul.w	r3, r8, r0
 800a5ce:	60a3      	str	r3, [r4, #8]
      aux = Durationms * ((uint32_t)pHandle->FrequencyHz); /* Check for overflow and use prescaler */
 800a5d0:	6823      	ldr	r3, [r4, #0]
      aux /= 1000U;
 800a5d2:	4a0b      	ldr	r2, [pc, #44]	@ (800a600 <REMNG_ExecRamp+0x88>)
      pHandle->ScalingFactor = wScalingFactorMin;
 800a5d4:	6160      	str	r0, [r4, #20]
      aux = Durationms * ((uint32_t)pHandle->FrequencyHz); /* Check for overflow and use prescaler */
 800a5d6:	fb05 f303 	mul.w	r3, r5, r3
      aux /= 1000U;
 800a5da:	fba2 2303 	umull	r2, r3, r2, r3
 800a5de:	099b      	lsrs	r3, r3, #6
      pHandle->RampRemainingStep++;
 800a5e0:	1c5d      	adds	r5, r3, #1
      aux1 = (TargetFinal - current_ref) * ((int32_t)pHandle->ScalingFactor);
 800a5e2:	fb07 f000 	mul.w	r0, r7, r0
      pHandle->TargetFinal = TargetFinal;
 800a5e6:	6066      	str	r6, [r4, #4]
      aux1 /= ((int32_t)pHandle->RampRemainingStep);
 800a5e8:	fb90 f0f5 	sdiv	r0, r0, r5
      pHandle->IncDecAmount = 0;
 800a5ec:	e9c4 5003 	strd	r5, r0, [r4, #12]
}
 800a5f0:	2001      	movs	r0, #1
 800a5f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (wScalingFactor < wScalingFactor3)
 800a5f6:	4550      	cmp	r0, sl
 800a5f8:	bf28      	it	cs
 800a5fa:	4650      	movcs	r0, sl
 800a5fc:	e7e5      	b.n	800a5ca <REMNG_ExecRamp+0x52>
 800a5fe:	bf00      	nop
 800a600:	10624dd3 	.word	0x10624dd3

0800a604 <RUC_Init>:
__weak void RUC_Init(RevUpCtrl_Handle_t *pHandle,
                     SpeednTorqCtrl_Handle_t *pSTC,
                     VirtualSpeedSensor_Handle_t *pVSS,
                     STO_Handle_t *pSNSL,
                     PWMC_Handle_t *pPWM)
{
 800a604:	b500      	push	{lr}
  {
#endif
    RevUpCtrl_PhaseParams_t *pRUCPhaseParams = &pHandle->ParamsData[0];
    uint8_t bPhase = 0U;

    pHandle->pSTC = pSTC;
 800a606:	6681      	str	r1, [r0, #104]	@ 0x68
    pHandle->EnteredZone1 = false;

    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
    {
      /* Dump HF data for now HF data are forced to 16 bits */
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 800a608:	6941      	ldr	r1, [r0, #20]
    pHandle->pSNSL = pSNSL;
 800a60a:	e9c0 231b 	strd	r2, r3, [r0, #108]	@ 0x6c
    pHandle->OTFSCLowside = false;
 800a60e:	f04f 0c00 	mov.w	ip, #0
    pHandle->pPWM = pPWM;
 800a612:	9b01      	ldr	r3, [sp, #4]
    pHandle->OTFSCLowside = false;
 800a614:	f8a0 c054 	strh.w	ip, [r0, #84]	@ 0x54
    pHandle->pPWM = pPWM;
 800a618:	6743      	str	r3, [r0, #116]	@ 0x74
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 800a61a:	b309      	cbz	r1, 800a660 <RUC_Init+0x5c>
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 800a61c:	688b      	ldr	r3, [r1, #8]
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 800a61e:	b323      	cbz	r3, 800a66a <RUC_Init+0x66>
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 800a620:	689b      	ldr	r3, [r3, #8]
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 800a622:	b32b      	cbz	r3, 800a670 <RUC_Init+0x6c>
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 800a624:	689b      	ldr	r3, [r3, #8]
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 800a626:	b333      	cbz	r3, 800a676 <RUC_Init+0x72>
 800a628:	689b      	ldr	r3, [r3, #8]
      bPhase++;
 800a62a:	f04f 0c05 	mov.w	ip, #5
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 800a62e:	b1cb      	cbz	r3, 800a664 <RUC_Init+0x60>
 800a630:	2204      	movs	r2, #4
 800a632:	f04f 0c05 	mov.w	ip, #5
    {
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;

      pHandle->bPhaseNbr = bPhase;

      pHandle->bResetPLLTh = (uint8_t)((RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz) / 1000U);
 800a636:	8803      	ldrh	r3, [r0, #0]
 800a638:	4910      	ldr	r1, [pc, #64]	@ (800a67c <RUC_Init+0x78>)
 800a63a:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 800a63e:	fb0e f303 	mul.w	r3, lr, r3
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 800a642:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      pHandle->bResetPLLTh = (uint8_t)((RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz) / 1000U);
 800a646:	fba1 1303 	umull	r1, r3, r1, r3
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 800a64a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800a64e:	2100      	movs	r1, #0
      pHandle->bResetPLLTh = (uint8_t)((RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz) / 1000U);
 800a650:	099b      	lsrs	r3, r3, #6
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 800a652:	6151      	str	r1, [r2, #20]
      pHandle->bPhaseNbr = bPhase;
 800a654:	f880 c048 	strb.w	ip, [r0, #72]	@ 0x48
      pHandle->bResetPLLTh = (uint8_t)((RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz) / 1000U);
 800a658:	f880 3056 	strb.w	r3, [r0, #86]	@ 0x56
    }
#ifdef NULL_PTR_CHECK_REV_UP_CTL
  }
#endif
}
 800a65c:	f85d fb04 	ldr.w	pc, [sp], #4
      bPhase++;
 800a660:	f04f 0c01 	mov.w	ip, #1
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 800a664:	f10c 32ff 	add.w	r2, ip, #4294967295
 800a668:	e7e5      	b.n	800a636 <RUC_Init+0x32>
      bPhase++;
 800a66a:	f04f 0c02 	mov.w	ip, #2
 800a66e:	e7f9      	b.n	800a664 <RUC_Init+0x60>
 800a670:	f04f 0c03 	mov.w	ip, #3
 800a674:	e7f6      	b.n	800a664 <RUC_Init+0x60>
 800a676:	f04f 0c04 	mov.w	ip, #4
 800a67a:	e7f3      	b.n	800a664 <RUC_Init+0x60>
 800a67c:	10624dd3 	.word	0x10624dd3

0800a680 <RUC_Clear>:
  * @param  pHandle: Pointer on Handle structure of RevUp controller.
  * @param  hMotorDirection: Rotor rotation direction.
  *         This parameter must be -1 or +1.
  */
__weak void RUC_Clear(RevUpCtrl_Handle_t *pHandle, int16_t hMotorDirection)
{
 800a680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    VirtualSpeedSensor_Handle_t *pVSS = pHandle->pVSS;
 800a684:	6ec7      	ldr	r7, [r0, #108]	@ 0x6c
    SpeednTorqCtrl_Handle_t *pSTC = pHandle->pSTC;
 800a686:	f8d0 8068 	ldr.w	r8, [r0, #104]	@ 0x68
    RevUpCtrl_PhaseParams_t *pPhaseParams = pHandle->ParamsData;

    pHandle->hDirection = hMotorDirection;
 800a68a:	80c1      	strh	r1, [r0, #6]
    pHandle->EnteredZone1 = false;

    /* Initializes the rev up stages counter */
    pHandle->bStageCnt = 0U;
 800a68c:	2600      	movs	r6, #0
{
 800a68e:	4604      	mov	r4, r0
    pHandle->bStageCnt = 0U;
 800a690:	f880 6058 	strb.w	r6, [r0, #88]	@ 0x58
    pHandle->bOTFRelCounter = 0U;
 800a694:	f880 6053 	strb.w	r6, [r0, #83]	@ 0x53
    pHandle->OTFSCLowside = false;
 800a698:	f8a0 6054 	strh.w	r6, [r0, #84]	@ 0x54

    /* Calls the clear method of VSS */
    VSS_Clear(pVSS);
 800a69c:	4638      	mov	r0, r7

    /* Sets the STC in torque mode */
    STC_SetControlMode(pSTC, MCM_TORQUE_MODE);

    /* Sets the mechanical starting angle of VSS */
    VSS_SetMecAngle(pVSS, pHandle->hStartingMecAngle * hMotorDirection);
 800a69e:	b28d      	uxth	r5, r1
    VSS_Clear(pVSS);
 800a6a0:	f000 fccc 	bl	800b03c <VSS_Clear>
    STC_SetControlMode(pSTC, MCM_TORQUE_MODE);
 800a6a4:	2104      	movs	r1, #4
 800a6a6:	4640      	mov	r0, r8
 800a6a8:	f000 f932 	bl	800a910 <STC_SetControlMode>
    VSS_SetMecAngle(pVSS, pHandle->hStartingMecAngle * hMotorDirection);
 800a6ac:	8861      	ldrh	r1, [r4, #2]
 800a6ae:	fb11 f105 	smulbb	r1, r1, r5
 800a6b2:	b209      	sxth	r1, r1
 800a6b4:	4638      	mov	r0, r7
 800a6b6:	f000 fd77 	bl	800b1a8 <VSS_SetMecAngle>

    /* Sets to zero the starting torque of STC */
    (void)STC_ExecRamp(pSTC, 0, 0U);
 800a6ba:	4632      	mov	r2, r6
 800a6bc:	4631      	mov	r1, r6
 800a6be:	4640      	mov	r0, r8
 800a6c0:	f000 f92a 	bl	800a918 <STC_ExecRamp>

    /* Gives the first command to STC and VSS */
    (void)STC_ExecRamp(pSTC, pPhaseParams->hFinalTorque * hMotorDirection, (uint32_t)(pPhaseParams->hDurationms));
 800a6c4:	8a21      	ldrh	r1, [r4, #16]
 800a6c6:	89a2      	ldrh	r2, [r4, #12]
 800a6c8:	fb11 f105 	smulbb	r1, r1, r5
 800a6cc:	b209      	sxth	r1, r1
 800a6ce:	4640      	mov	r0, r8
 800a6d0:	f000 f922 	bl	800a918 <STC_ExecRamp>

    VSS_SetMecAcceleration(pVSS, pPhaseParams->hFinalMecSpeedUnit * hMotorDirection, pPhaseParams->hDurationms);
 800a6d4:	89e1      	ldrh	r1, [r4, #14]
 800a6d6:	89a2      	ldrh	r2, [r4, #12]
 800a6d8:	fb11 f105 	smulbb	r1, r1, r5
 800a6dc:	b209      	sxth	r1, r1
 800a6de:	4638      	mov	r0, r7
 800a6e0:	f000 fd6a 	bl	800b1b8 <VSS_SetMecAcceleration>

    /* Compute hPhaseRemainingTicks */
    pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pPhaseParams->hDurationms)
 800a6e4:	89a3      	ldrh	r3, [r4, #12]
                                              * ((uint32_t)pHandle->hRUCFrequencyHz))
 800a6e6:	8821      	ldrh	r1, [r4, #0]
                                              / 1000U );
 800a6e8:	4a06      	ldr	r2, [pc, #24]	@ (800a704 <RUC_Clear+0x84>)

    /* Set the next phases parameter pointer */
    pHandle->pCurrentPhaseParams = (RevUpCtrl_PhaseParams_t *)pPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5

    /* Timeout counter for PLL reset during OTF */
    pHandle->bResetPLLCnt = 0U;
 800a6ea:	f884 6057 	strb.w	r6, [r4, #87]	@ 0x57
                                              * ((uint32_t)pHandle->hRUCFrequencyHz))
 800a6ee:	fb01 f303 	mul.w	r3, r1, r3
                                              / 1000U );
 800a6f2:	fba2 2303 	umull	r2, r3, r2, r3
 800a6f6:	099b      	lsrs	r3, r3, #6
    pHandle->pCurrentPhaseParams = (RevUpCtrl_PhaseParams_t *)pPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 800a6f8:	6962      	ldr	r2, [r4, #20]
 800a6fa:	60a2      	str	r2, [r4, #8]
    pHandle->hPhaseRemainingTicks++;
 800a6fc:	3301      	adds	r3, #1
 800a6fe:	80a3      	strh	r3, [r4, #4]
#ifdef NULL_PTR_CHECK_REV_UP_CTL
  }
#endif
}
 800a700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a704:	10624dd3 	.word	0x10624dd3

0800a708 <RUC_Exec>:
    retVal = false;
  }
  else
  {
#endif
    if (pHandle->hPhaseRemainingTicks > 0U)
 800a708:	8883      	ldrh	r3, [r0, #4]
{
 800a70a:	b510      	push	{r4, lr}
 800a70c:	4604      	mov	r4, r0
    if (pHandle->hPhaseRemainingTicks > 0U)
 800a70e:	bb43      	cbnz	r3, 800a762 <RUC_Exec+0x5a>
      /* Nothing to do */
    }

    if (0U == pHandle->hPhaseRemainingTicks)
    {
      if (pHandle->pCurrentPhaseParams != MC_NULL)
 800a710:	68a0      	ldr	r0, [r4, #8]
 800a712:	b328      	cbz	r0, 800a760 <RUC_Exec+0x58>
      {
        /* If it becomes zero the current phase has been completed */
        /* Gives the next command to STC and VSS */
        (void)STC_ExecRamp(pHandle->pSTC, pHandle->pCurrentPhaseParams->hFinalTorque * pHandle->hDirection,
 800a714:	8881      	ldrh	r1, [r0, #4]
 800a716:	88e3      	ldrh	r3, [r4, #6]
 800a718:	8802      	ldrh	r2, [r0, #0]
 800a71a:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 800a71c:	fb11 f103 	smulbb	r1, r1, r3
 800a720:	b209      	sxth	r1, r1
 800a722:	f000 f8f9 	bl	800a918 <STC_ExecRamp>
                           (uint32_t)(pHandle->pCurrentPhaseParams->hDurationms));

        VSS_SetMecAcceleration(pHandle->pVSS,
                               pHandle->pCurrentPhaseParams->hFinalMecSpeedUnit * pHandle->hDirection,
 800a726:	68a3      	ldr	r3, [r4, #8]
 800a728:	88e0      	ldrh	r0, [r4, #6]
 800a72a:	8859      	ldrh	r1, [r3, #2]
        VSS_SetMecAcceleration(pHandle->pVSS,
 800a72c:	881a      	ldrh	r2, [r3, #0]
                               pHandle->pCurrentPhaseParams->hFinalMecSpeedUnit * pHandle->hDirection,
 800a72e:	fb11 f100 	smulbb	r1, r1, r0
        VSS_SetMecAcceleration(pHandle->pVSS,
 800a732:	b209      	sxth	r1, r1
 800a734:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 800a736:	f000 fd3f 	bl	800b1b8 <VSS_SetMecAcceleration>
                               pHandle->pCurrentPhaseParams->hDurationms);

        /* Compute hPhaseRemainingTicks */
        pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pHandle->pCurrentPhaseParams->hDurationms)
 800a73a:	68a1      	ldr	r1, [r4, #8]
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 800a73c:	8820      	ldrh	r0, [r4, #0]
        pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pHandle->pCurrentPhaseParams->hDurationms)
 800a73e:	880b      	ldrh	r3, [r1, #0]
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 800a740:	4a0b      	ldr	r2, [pc, #44]	@ (800a770 <RUC_Exec+0x68>)
        pHandle->hPhaseRemainingTicks++;

        /* Set the next phases parameter pointer */
        pHandle->pCurrentPhaseParams = pHandle->pCurrentPhaseParams->pNext; //cstat !MISRAC2012-Rule-11.5
 800a742:	6889      	ldr	r1, [r1, #8]
 800a744:	60a1      	str	r1, [r4, #8]
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 800a746:	fb00 f303 	mul.w	r3, r0, r3
 800a74a:	fba2 2303 	umull	r2, r3, r2, r3

        /* Increases the rev up stages counter */
        pHandle->bStageCnt++;
 800a74e:	f894 2058 	ldrb.w	r2, [r4, #88]	@ 0x58
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 800a752:	099b      	lsrs	r3, r3, #6
        pHandle->hPhaseRemainingTicks++;
 800a754:	3301      	adds	r3, #1
        pHandle->bStageCnt++;
 800a756:	3201      	adds	r2, #1
        pHandle->hPhaseRemainingTicks++;
 800a758:	80a3      	strh	r3, [r4, #4]
        pHandle->bStageCnt++;
 800a75a:	f884 2058 	strb.w	r2, [r4, #88]	@ 0x58
  bool retVal = true;
 800a75e:	2001      	movs	r0, #1
    }
#ifdef NULL_PTR_CHECK_REV_UP_CTL
  }
#endif
  return (retVal);
}
 800a760:	bd10      	pop	{r4, pc}
      pHandle->hPhaseRemainingTicks--;
 800a762:	3b01      	subs	r3, #1
 800a764:	b29b      	uxth	r3, r3
 800a766:	8083      	strh	r3, [r0, #4]
    if (0U == pHandle->hPhaseRemainingTicks)
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d0d1      	beq.n	800a710 <RUC_Exec+0x8>
  bool retVal = true;
 800a76c:	2001      	movs	r0, #1
}
 800a76e:	bd10      	pop	{r4, pc}
 800a770:	10624dd3 	.word	0x10624dd3

0800a774 <RUC_Completed>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (MC_NULL == pHandle->pCurrentPhaseParams)
 800a774:	6880      	ldr	r0, [r0, #8]
    }
#ifdef NULL_PTR_CHECK_REV_UP_CTL
  }
#endif
  return (retVal);
}
 800a776:	fab0 f080 	clz	r0, r0
 800a77a:	0940      	lsrs	r0, r0, #5
 800a77c:	4770      	bx	lr
 800a77e:	bf00      	nop

0800a780 <RUC_Stop>:
/**
  * @brief  Allow to exit from Rev-Up process at the current rotor speed.
  * @param  pHandle: Pointer on Handle structure of RevUp controller.
  */
__weak void RUC_Stop(RevUpCtrl_Handle_t *pHandle)
{
 800a780:	b538      	push	{r3, r4, r5, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    VirtualSpeedSensor_Handle_t *pVSS = pHandle->pVSS;
 800a782:	6ec5      	ldr	r5, [r0, #108]	@ 0x6c
    pHandle->pCurrentPhaseParams = MC_NULL;
 800a784:	2400      	movs	r4, #0
 800a786:	6084      	str	r4, [r0, #8]
    pHandle->hPhaseRemainingTicks = 0U;
 800a788:	8084      	strh	r4, [r0, #4]
    VSS_SetMecAcceleration(pVSS, SPD_GetAvrgMecSpeedUnit(&pVSS->_Super), 0U);
 800a78a:	4628      	mov	r0, r5
 800a78c:	f000 f84a 	bl	800a824 <SPD_GetAvrgMecSpeedUnit>
 800a790:	4622      	mov	r2, r4
 800a792:	4601      	mov	r1, r0
 800a794:	4628      	mov	r0, r5
#ifdef NULL_PTR_CHECK_REV_UP_CTL
  }
#endif
}
 800a796:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    VSS_SetMecAcceleration(pVSS, SPD_GetAvrgMecSpeedUnit(&pVSS->_Super), 0U);
 800a79a:	f000 bd0d 	b.w	800b1b8 <VSS_SetMecAcceleration>
 800a79e:	bf00      	nop

0800a7a0 <RUC_FirstAccelerationStageReached>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (pHandle->bStageCnt >= pHandle->bFirstAccelerationStage)
 800a7a0:	f890 2058 	ldrb.w	r2, [r0, #88]	@ 0x58
 800a7a4:	f890 0049 	ldrb.w	r0, [r0, #73]	@ 0x49
    }
#ifdef NULL_PTR_CHECK_REV_UP_CTL
  }
#endif
  return (retVal);
}
 800a7a8:	4282      	cmp	r2, r0
 800a7aa:	bf34      	ite	cc
 800a7ac:	2000      	movcc	r0, #0
 800a7ae:	2001      	movcs	r0, #1
 800a7b0:	4770      	bx	lr
 800a7b2:	bf00      	nop

0800a7b4 <RUC_SetPhaseDurationms>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->ParamsData[bPhase].hDurationms = hDurationms;
 800a7b4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800a7b8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800a7bc:	8182      	strh	r2, [r0, #12]
#ifdef NULL_PTR_CHECK_REV_UP_CTL
  }
#endif
}
 800a7be:	4770      	bx	lr

0800a7c0 <RUC_SetPhaseFinalMecSpeedUnit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->ParamsData[bPhase].hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800a7c0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800a7c4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800a7c8:	81c2      	strh	r2, [r0, #14]
#ifdef NULL_PTR_CHECK_REV_UP_CTL
  }
#endif
}
 800a7ca:	4770      	bx	lr

0800a7cc <RUC_SetPhaseFinalTorque>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->ParamsData[bPhase].hFinalTorque = hFinalTorque;
 800a7cc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800a7d0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800a7d4:	8202      	strh	r2, [r0, #16]
#ifdef NULL_PTR_CHECK_REV_UP_CTL
  }
#endif
}
 800a7d6:	4770      	bx	lr

0800a7d8 <RUC_SetPhase>:
  }
  else
  {
#endif
    pHandle->ParamsData[phaseNumber].hFinalTorque = phaseData->hFinalTorque;
    pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit = phaseData->hFinalMecSpeedUnit;
 800a7d8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800a7dc:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800a7e0:	f8d2 c002 	ldr.w	ip, [r2, #2]
 800a7e4:	f8c3 c00e 	str.w	ip, [r3, #14]
    pHandle->ParamsData[phaseNumber].hDurationms = phaseData->hDurationms;
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	8813      	ldrh	r3, [r2, #0]
 800a7ec:	8183      	strh	r3, [r0, #12]
#ifdef NULL_PTR_CHECK_REV_UP_CTL
  }
#endif
  return (retValue);
}
 800a7ee:	2001      	movs	r0, #1
 800a7f0:	4770      	bx	lr
 800a7f2:	bf00      	nop

0800a7f4 <RUC_GetNumberOfPhases>:
#ifdef NULL_PTR_CHECK_REV_UP_CTL
  return ((MC_NULL == pHandle) ? 0U : (uint8_t)pHandle->bPhaseNbr);
#else
  return ((uint8_t)pHandle->bPhaseNbr);
#endif
}
 800a7f4:	f890 0048 	ldrb.w	r0, [r0, #72]	@ 0x48
 800a7f8:	4770      	bx	lr
 800a7fa:	bf00      	nop

0800a7fc <RUC_GetPhase>:
  }
  else
  {
#endif
    phaseData->hFinalTorque = (int16_t)pHandle->ParamsData[phaseNumber].hFinalTorque;
    phaseData->hFinalMecSpeedUnit = (int16_t)pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit;
 800a7fc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800a800:	0089      	lsls	r1, r1, #2
 800a802:	f101 0308 	add.w	r3, r1, #8
 800a806:	4403      	add	r3, r0
    phaseData->hDurationms = (uint16_t)pHandle->ParamsData[phaseNumber].hDurationms;
 800a808:	4408      	add	r0, r1
    phaseData->hFinalMecSpeedUnit = (int16_t)pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit;
 800a80a:	f8d3 3006 	ldr.w	r3, [r3, #6]
 800a80e:	f8c2 3002 	str.w	r3, [r2, #2]
    phaseData->hDurationms = (uint16_t)pHandle->ParamsData[phaseNumber].hDurationms;
 800a812:	8983      	ldrh	r3, [r0, #12]
 800a814:	8013      	strh	r3, [r2, #0]
#ifdef NULL_PTR_CHECK_REV_UP_CTL
  }
#endif
  return (retValue);
}
 800a816:	2001      	movs	r0, #1
 800a818:	4770      	bx	lr
 800a81a:	bf00      	nop

0800a81c <SPD_GetElAngle>:
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hElAngle);
#else
  return (pHandle->hElAngle);
#endif
}
 800a81c:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 800a820:	4770      	bx	lr
 800a822:	bf00      	nop

0800a824 <SPD_GetAvrgMecSpeedUnit>:
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hAvrMecSpeedUnit);
#else
  return (pHandle->hAvrMecSpeedUnit);
#endif
}
 800a824:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 800a828:	4770      	bx	lr
 800a82a:	bf00      	nop

0800a82c <SPD_GetElSpeedDpp>:
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hElSpeedDpp);
#else
  return (pHandle->hElSpeedDpp);
#endif
}
 800a82c:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
 800a830:	4770      	bx	lr
 800a832:	bf00      	nop

0800a834 <SPD_IsMecSpeedReliable>:
    bool SpeedError = false;

    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

    /* Compute absoulte value of mechanical speed */
    if (*pMecSpeedUnit < 0)
 800a834:	f9b1 c000 	ldrsh.w	ip, [r1]
{
 800a838:	4603      	mov	r3, r0
 800a83a:	b510      	push	{r4, lr}
    {
      hAux = -(*pMecSpeedUnit);
 800a83c:	fa1f f18c 	uxth.w	r1, ip
    if (*pMecSpeedUnit < 0)
 800a840:	f1bc 0f00 	cmp.w	ip, #0
      hAux = -(*pMecSpeedUnit);
 800a844:	bfb8      	it	lt
 800a846:	4249      	neglt	r1, r1
    else
    {
      /* Nothing to do */
    }

    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 800a848:	f8b3 e016 	ldrh.w	lr, [r3, #22]
    uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 800a84c:	78c0      	ldrb	r0, [r0, #3]
    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 800a84e:	781a      	ldrb	r2, [r3, #0]
    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
 800a850:	8a9c      	ldrh	r4, [r3, #20]
    {
      /* Nothing to do */
    }

    /* Compute absoulte value of mechanical acceleration */
    if (pHandle->hMecAccelUnitP < 0)
 800a852:	f9b3 c012 	ldrsh.w	ip, [r3, #18]
      hAux = -(*pMecSpeedUnit);
 800a856:	bfb8      	it	lt
 800a858:	b289      	uxthlt	r1, r1
    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 800a85a:	458e      	cmp	lr, r1
 800a85c:	d816      	bhi.n	800a88c <SPD_IsMecSpeedReliable+0x58>
    {
      hAux = -(pHandle->hMecAccelUnitP);
 800a85e:	fa1f fe8c 	uxth.w	lr, ip
    if (pHandle->hMecAccelUnitP < 0)
 800a862:	f1bc 0f00 	cmp.w	ip, #0
      hAux = -(pHandle->hMecAccelUnitP);
 800a866:	bfb8      	it	lt
 800a868:	f1ce 0e00 	rsblt	lr, lr, #0
    else
    {
      hAbsMecAccelUnitP = (uint16_t)pHandle->hMecAccelUnitP;
    }

    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 800a86c:	f8b3 c018 	ldrh.w	ip, [r3, #24]
      hAux = -(pHandle->hMecAccelUnitP);
 800a870:	bfb8      	it	lt
 800a872:	fa1f fe8e 	uxthlt.w	lr, lr
    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 800a876:	45f4      	cmp	ip, lr
 800a878:	d308      	bcc.n	800a88c <SPD_IsMecSpeedReliable+0x58>
    else
    {
      /* Nothing to do */
    }

    if (true == SpeedError)
 800a87a:	428c      	cmp	r4, r1
 800a87c:	d306      	bcc.n	800a88c <SPD_IsMecSpeedReliable+0x58>
        /* Nothing to do */
      }
    }
    else
    {
      if (bSpeedErrorNumber < bMaximumSpeedErrorsNumber)
 800a87e:	4290      	cmp	r0, r2
 800a880:	d809      	bhi.n	800a896 <SPD_IsMecSpeedReliable+0x62>
      {
        /* Nothing to do */
      }
    }

    if (bSpeedErrorNumber == bMaximumSpeedErrorsNumber)
 800a882:	1a10      	subs	r0, r2, r0
    else
    {
      /* Nothing to do */
    }

    pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 800a884:	701a      	strb	r2, [r3, #0]
    if (bSpeedErrorNumber == bMaximumSpeedErrorsNumber)
 800a886:	bf18      	it	ne
 800a888:	2001      	movne	r0, #1
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  }
#endif
  return (SpeedSensorReliability);
}
 800a88a:	bd10      	pop	{r4, pc}
      if (bSpeedErrorNumber < bMaximumSpeedErrorsNumber)
 800a88c:	4290      	cmp	r0, r2
 800a88e:	d9f8      	bls.n	800a882 <SPD_IsMecSpeedReliable+0x4e>
        bSpeedErrorNumber++;
 800a890:	3201      	adds	r2, #1
 800a892:	b2d2      	uxtb	r2, r2
 800a894:	e7f5      	b.n	800a882 <SPD_IsMecSpeedReliable+0x4e>
        bSpeedErrorNumber = 0u;
 800a896:	2200      	movs	r2, #0
    pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 800a898:	701a      	strb	r2, [r3, #0]
  bool SpeedSensorReliability = true;
 800a89a:	2001      	movs	r0, #1
}
 800a89c:	bd10      	pop	{r4, pc}
 800a89e:	bf00      	nop

0800a8a0 <SPD_GetS16Speed>:
  }
  else
  {
#endif
    int32_t wAux = (int32_t)pHandle->hAvrMecSpeedUnit;
    wAux *= INT16_MAX;
 800a8a0:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
    wAux /= (int16_t)pHandle->hMaxReliableMecSpeedUnit;
 800a8a4:	f9b0 2014 	ldrsh.w	r2, [r0, #20]
    wAux *= INT16_MAX;
 800a8a8:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
    wAux /= (int16_t)pHandle->hMaxReliableMecSpeedUnit;
 800a8ac:	fb93 f0f2 	sdiv	r0, r3, r2
    tempValue = (int16_t)wAux;
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  }
#endif
  return (tempValue);
}
 800a8b0:	b200      	sxth	r0, r0
 800a8b2:	4770      	bx	lr

0800a8b4 <SPD_GetElToMecRatio>:
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0U : pHandle->bElToMecRatio);
#else
  return (pHandle->bElToMecRatio);
#endif
}
 800a8b4:	7840      	ldrb	r0, [r0, #1]
 800a8b6:	4770      	bx	lr

0800a8b8 <SPD_SetElToMecRatio>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->bElToMecRatio = bPP;
 800a8b8:	7041      	strb	r1, [r0, #1]
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  }
#endif
}
 800a8ba:	4770      	bx	lr

0800a8bc <STC_Init>:
  {
#endif
    pHandle->PISpeed = pPI;
    pHandle->SPD = SPD_Handle;
    pHandle->Mode = pHandle->ModeDefault;
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 800a8bc:	f9b0 c02c 	ldrsh.w	ip, [r0, #44]	@ 0x2c
    pHandle->PISpeed = pPI;
 800a8c0:	6101      	str	r1, [r0, #16]
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 800a8c2:	f9b0 102e 	ldrsh.w	r1, [r0, #46]	@ 0x2e
    pHandle->SPD = SPD_Handle;
 800a8c6:	6142      	str	r2, [r0, #20]
{
 800a8c8:	b410      	push	{r4}
    pHandle->Mode = pHandle->ModeDefault;
 800a8ca:	f890 402a 	ldrb.w	r4, [r0, #42]	@ 0x2a
 800a8ce:	7004      	strb	r4, [r0, #0]
    pHandle->TargetFinal = 0;
 800a8d0:	2300      	movs	r3, #0
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 800a8d2:	ea4f 440c 	mov.w	r4, ip, lsl #16
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 800a8d6:	0409      	lsls	r1, r1, #16
 800a8d8:	e9c0 4101 	strd	r4, r1, [r0, #4]
    pHandle->TargetFinal = 0;
 800a8dc:	8043      	strh	r3, [r0, #2]
    pHandle->RampRemainingStep = 0U;
    pHandle->IncDecAmount = 0;
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 800a8de:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->RampRemainingStep = 0U;
 800a8e2:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 800a8e4:	6183      	str	r3, [r0, #24]
}
 800a8e6:	4770      	bx	lr

0800a8e8 <STC_SetSpeedSensor>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SPD = SPD_Handle;
 800a8e8:	6141      	str	r1, [r0, #20]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 800a8ea:	4770      	bx	lr

0800a8ec <STC_GetSpeedSensor>:
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  return ((MC_NULL ==  pHandle) ? MC_NULL : pHandle->SPD);
#else
  return (pHandle->SPD);
#endif
}
 800a8ec:	6940      	ldr	r0, [r0, #20]
 800a8ee:	4770      	bx	lr

0800a8f0 <STC_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (MCM_SPEED_MODE == pHandle->Mode)
 800a8f0:	7803      	ldrb	r3, [r0, #0]
 800a8f2:	2b03      	cmp	r3, #3
 800a8f4:	d000      	beq.n	800a8f8 <STC_Clear+0x8>
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 800a8f6:	4770      	bx	lr
      PID_SetIntegralTerm(pHandle->PISpeed, 0);
 800a8f8:	6900      	ldr	r0, [r0, #16]
 800a8fa:	2100      	movs	r1, #0
 800a8fc:	f7fe bf50 	b.w	80097a0 <PID_SetIntegralTerm>

0800a900 <STC_GetMecSpeedRefUnit>:
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->SpeedRefUnitExt / 65536));
#else
  return ((int16_t)(pHandle->SpeedRefUnitExt / 65536));
#endif
#endif
}
 800a900:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800a904:	4770      	bx	lr
 800a906:	bf00      	nop

0800a908 <STC_GetTorqueRef>:
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->TorqueRef / 65536));
#else
  return ((int16_t)(pHandle->TorqueRef / 65536));
#endif
#endif
}
 800a908:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
 800a90c:	4770      	bx	lr
 800a90e:	bf00      	nop

0800a910 <STC_SetControlMode>:
  }
  else
  {
#endif
    pHandle->Mode = bMode;
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp */
 800a910:	2300      	movs	r3, #0
    pHandle->Mode = bMode;
 800a912:	7001      	strb	r1, [r0, #0]
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp */
 800a914:	60c3      	str	r3, [r0, #12]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 800a916:	4770      	bx	lr

0800a918 <STC_ExecRamp>:
  * @ref EncAlignCtrl "Encoder Alignment Control",
  * @ref PositionControl "Position Control" loop or
  * speed regulation with @ref SpeedRegulatorPotentiometer Speed potentiometer.
  */
__weak bool STC_ExecRamp(SpeednTorqCtrl_Handle_t *pHandle, int16_t hTargetFinal, uint32_t hDurationms)
{
 800a918:	b570      	push	{r4, r5, r6, lr}
    uint32_t wAux;
    int32_t wAux1;
    int16_t hCurrentReference;

    /* Check if the hTargetFinal is out of the bound of application */
    if (MCM_TORQUE_MODE == pHandle->Mode)
 800a91a:	7803      	ldrb	r3, [r0, #0]
 800a91c:	2b04      	cmp	r3, #4
{
 800a91e:	4604      	mov	r4, r0
 800a920:	460d      	mov	r5, r1
 800a922:	4616      	mov	r6, r2
    if (MCM_TORQUE_MODE == pHandle->Mode)
 800a924:	d01d      	beq.n	800a962 <STC_ExecRamp+0x4a>
#else
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt / 65536);
#endif

#ifdef CHECK_BOUNDARY
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxAppPositiveMecSpeedUnit)
 800a926:	8bc3      	ldrh	r3, [r0, #30]
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt >> 16);
 800a928:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxAppPositiveMecSpeedUnit)
 800a92c:	4299      	cmp	r1, r3
 800a92e:	dd01      	ble.n	800a934 <STC_ExecRamp+0x1c>
 800a930:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (allowedRange);
}
 800a932:	bd70      	pop	{r4, r5, r6, pc}
      else if (hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit)
 800a934:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	@ 0x24
 800a938:	428b      	cmp	r3, r1
 800a93a:	dcf9      	bgt.n	800a930 <STC_ExecRamp+0x18>
      else if ((int32_t)hTargetFinal < (int32_t)pHandle->MinAppPositiveMecSpeedUnit)
 800a93c:	8c23      	ldrh	r3, [r4, #32]
 800a93e:	4299      	cmp	r1, r3
 800a940:	da03      	bge.n	800a94a <STC_ExecRamp+0x32>
        if (hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit)
 800a942:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	@ 0x22
 800a946:	428b      	cmp	r3, r1
 800a948:	dbf2      	blt.n	800a930 <STC_ExecRamp+0x18>
      if (0U == hDurationms)
 800a94a:	b9a6      	cbnz	r6, 800a976 <STC_ExecRamp+0x5e>
        if (MCM_SPEED_MODE == pHandle->Mode)
 800a94c:	7823      	ldrb	r3, [r4, #0]
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 800a94e:	042d      	lsls	r5, r5, #16
        if (MCM_SPEED_MODE == pHandle->Mode)
 800a950:	2b03      	cmp	r3, #3
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 800a952:	bf0c      	ite	eq
 800a954:	6065      	streq	r5, [r4, #4]
          pHandle->TorqueRef = ((int32_t)hTargetFinal) * 65536;
 800a956:	60a5      	strne	r5, [r4, #8]
        pHandle->IncDecAmount = 0;
 800a958:	2000      	movs	r0, #0
        pHandle->IncDecAmount = wAux1;
 800a95a:	61a0      	str	r0, [r4, #24]
        pHandle->RampRemainingStep++;
 800a95c:	60e6      	str	r6, [r4, #12]
        pHandle->IncDecAmount = wAux1;
 800a95e:	2001      	movs	r0, #1
}
 800a960:	bd70      	pop	{r4, r5, r6, pc}
      hCurrentReference = STC_GetTorqueRef(pHandle);
 800a962:	f7ff ffd1 	bl	800a908 <STC_GetTorqueRef>
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxPositiveTorque)
 800a966:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 800a968:	42ab      	cmp	r3, r5
 800a96a:	dbe1      	blt.n	800a930 <STC_ExecRamp+0x18>
      if ((int32_t)hTargetFinal < (int32_t)pHandle->MinNegativeTorque)
 800a96c:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	@ 0x28
 800a970:	42ab      	cmp	r3, r5
 800a972:	dcdd      	bgt.n	800a930 <STC_ExecRamp+0x18>
 800a974:	e7e9      	b.n	800a94a <STC_ExecRamp+0x32>
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 800a976:	8ba3      	ldrh	r3, [r4, #28]
        wAux /= 1000U;
 800a978:	4a06      	ldr	r2, [pc, #24]	@ (800a994 <STC_ExecRamp+0x7c>)
        pHandle->TargetFinal = hTargetFinal;
 800a97a:	8065      	strh	r5, [r4, #2]
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 800a97c:	fb06 f303 	mul.w	r3, r6, r3
        wAux /= 1000U;
 800a980:	fba2 2303 	umull	r2, r3, r2, r3
        wAux1 = (((int32_t)hTargetFinal) - ((int32_t)hCurrentReference)) * 65536;
 800a984:	1a28      	subs	r0, r5, r0
        wAux /= 1000U;
 800a986:	099b      	lsrs	r3, r3, #6
        pHandle->RampRemainingStep++;
 800a988:	1c5e      	adds	r6, r3, #1
        wAux1 = (((int32_t)hTargetFinal) - ((int32_t)hCurrentReference)) * 65536;
 800a98a:	0400      	lsls	r0, r0, #16
        wAux1 /= ((int32_t)pHandle->RampRemainingStep);
 800a98c:	fb90 f0f6 	sdiv	r0, r0, r6
        pHandle->IncDecAmount = wAux1;
 800a990:	e7e3      	b.n	800a95a <STC_ExecRamp+0x42>
 800a992:	bf00      	nop
 800a994:	10624dd3 	.word	0x10624dd3

0800a998 <STC_StopRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->RampRemainingStep = 0U;
 800a998:	2300      	movs	r3, #0
 800a99a:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 800a99c:	6183      	str	r3, [r0, #24]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 800a99e:	4770      	bx	lr

0800a9a0 <STC_CalcTorqueReference>:
  * - Must be called at fixed time equal to hSTCFrequencyHz. It is called
  * passing as parameter the speed sensor used to perform the speed regulation.
  * - Called during START and ALIGNEMENT states of the MC state machine into MediumFrequencyTask.
  */
__weak int16_t STC_CalcTorqueReference(SpeednTorqCtrl_Handle_t *pHandle)
{
 800a9a0:	b538      	push	{r3, r4, r5, lr}
    int32_t wCurrentReference;
    int16_t hMeasuredSpeed;
    int16_t hTargetSpeed;
    int16_t hError;

    if (MCM_TORQUE_MODE == pHandle->Mode)
 800a9a2:	7802      	ldrb	r2, [r0, #0]
      wCurrentReference = pHandle->SpeedRefUnitExt;
    }

    /* Update the speed reference or the torque reference according to the mode
       and terminates the ramp if needed */
    if (pHandle->RampRemainingStep > 1U)
 800a9a4:	68c3      	ldr	r3, [r0, #12]
    if (MCM_TORQUE_MODE == pHandle->Mode)
 800a9a6:	2a04      	cmp	r2, #4
{
 800a9a8:	4604      	mov	r4, r0
    if (MCM_TORQUE_MODE == pHandle->Mode)
 800a9aa:	d012      	beq.n	800a9d2 <STC_CalcTorqueReference+0x32>
    if (pHandle->RampRemainingStep > 1U)
 800a9ac:	2b01      	cmp	r3, #1
      wCurrentReference = pHandle->SpeedRefUnitExt;
 800a9ae:	6845      	ldr	r5, [r0, #4]
    if (pHandle->RampRemainingStep > 1U)
 800a9b0:	d908      	bls.n	800a9c4 <STC_CalcTorqueReference+0x24>
    {
      /* Increment/decrement the reference value */
      wCurrentReference += pHandle->IncDecAmount;
 800a9b2:	6981      	ldr	r1, [r0, #24]

      /* Decrement the number of remaining steps */
      pHandle->RampRemainingStep--;
 800a9b4:	3b01      	subs	r3, #1
      wCurrentReference += pHandle->IncDecAmount;
 800a9b6:	440d      	add	r5, r1
      pHandle->RampRemainingStep--;
 800a9b8:	60c3      	str	r3, [r0, #12]
    else
    {
      /* Do nothing */
    }

    if (MCM_SPEED_MODE == pHandle->Mode)
 800a9ba:	2a03      	cmp	r2, #3
 800a9bc:	d011      	beq.n	800a9e2 <STC_CalcTorqueReference+0x42>
    else
    {
      pHandle->TorqueRef = wCurrentReference;
#ifndef FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hTorqueReference = (int16_t)(wCurrentReference >> 16);
 800a9be:	1428      	asrs	r0, r5, #16
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
 800a9c0:	60a5      	str	r5, [r4, #8]
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (hTorqueReference);
}
 800a9c2:	bd38      	pop	{r3, r4, r5, pc}
    else if (1U == pHandle->RampRemainingStep)
 800a9c4:	d1f9      	bne.n	800a9ba <STC_CalcTorqueReference+0x1a>
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 800a9c6:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
      pHandle->RampRemainingStep = 0U;
 800a9ca:	2300      	movs	r3, #0
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 800a9cc:	042d      	lsls	r5, r5, #16
      pHandle->RampRemainingStep = 0U;
 800a9ce:	60c3      	str	r3, [r0, #12]
 800a9d0:	e7f3      	b.n	800a9ba <STC_CalcTorqueReference+0x1a>
    if (pHandle->RampRemainingStep > 1U)
 800a9d2:	2b01      	cmp	r3, #1
      wCurrentReference = pHandle->TorqueRef;
 800a9d4:	6885      	ldr	r5, [r0, #8]
    if (pHandle->RampRemainingStep > 1U)
 800a9d6:	d911      	bls.n	800a9fc <STC_CalcTorqueReference+0x5c>
      wCurrentReference += pHandle->IncDecAmount;
 800a9d8:	6982      	ldr	r2, [r0, #24]
      pHandle->RampRemainingStep--;
 800a9da:	3b01      	subs	r3, #1
      wCurrentReference += pHandle->IncDecAmount;
 800a9dc:	4415      	add	r5, r2
      pHandle->RampRemainingStep--;
 800a9de:	60c3      	str	r3, [r0, #12]
    if (MCM_SPEED_MODE == pHandle->Mode)
 800a9e0:	e7ed      	b.n	800a9be <STC_CalcTorqueReference+0x1e>
      hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit(pHandle->SPD);
 800a9e2:	6960      	ldr	r0, [r4, #20]
 800a9e4:	f7ff ff1e 	bl	800a824 <SPD_GetAvrgMecSpeedUnit>
      hError = hTargetSpeed - hMeasuredSpeed;
 800a9e8:	ebc0 4125 	rsb	r1, r0, r5, asr #16
      hTorqueReference = PI_Controller(pHandle->PISpeed, (int32_t)hError);
 800a9ec:	b209      	sxth	r1, r1
 800a9ee:	6920      	ldr	r0, [r4, #16]
 800a9f0:	f7fe ff0e 	bl	8009810 <PI_Controller>
      pHandle->SpeedRefUnitExt = wCurrentReference;
 800a9f4:	6065      	str	r5, [r4, #4]
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
 800a9f6:	0405      	lsls	r5, r0, #16
 800a9f8:	60a5      	str	r5, [r4, #8]
}
 800a9fa:	bd38      	pop	{r3, r4, r5, pc}
    else if (1U == pHandle->RampRemainingStep)
 800a9fc:	d1df      	bne.n	800a9be <STC_CalcTorqueReference+0x1e>
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 800a9fe:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
      pHandle->RampRemainingStep = 0U;
 800aa02:	2300      	movs	r3, #0
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 800aa04:	042d      	lsls	r5, r5, #16
      pHandle->RampRemainingStep = 0U;
 800aa06:	60c3      	str	r3, [r0, #12]
    if (MCM_SPEED_MODE == pHandle->Mode)
 800aa08:	e7d9      	b.n	800a9be <STC_CalcTorqueReference+0x1e>
 800aa0a:	bf00      	nop

0800aa0c <STC_GetMecSpeedRefUnitDefault>:
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  return ((MC_NULL == pHandle) ? 0 : pHandle->MecSpeedRefUnitDefault);
#else
  return (pHandle->MecSpeedRefUnitDefault);
#endif
}
 800aa0c:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	@ 0x2c
 800aa10:	4770      	bx	lr
 800aa12:	bf00      	nop

0800aa14 <STC_RampCompleted>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (0U == pHandle->RampRemainingStep)
 800aa14:	68c0      	ldr	r0, [r0, #12]
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (retVal);
}
 800aa16:	fab0 f080 	clz	r0, r0
 800aa1a:	0940      	lsrs	r0, r0, #5
 800aa1c:	4770      	bx	lr
 800aa1e:	bf00      	nop

0800aa20 <STC_GetDefaultIqdref>:
    IqdRefDefault.d = 0;
  }
  else
  {
#endif
    IqdRefDefault.q = pHandle->TorqueRefDefault;
 800aa20:	f8d0 302e 	ldr.w	r3, [r0, #46]	@ 0x2e
    IqdRefDefault.d = pHandle->IdrefDefault;
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (IqdRefDefault);
 800aa24:	2200      	movs	r2, #0
 800aa26:	b299      	uxth	r1, r3
 800aa28:	f361 020f 	bfi	r2, r1, #0, #16
 800aa2c:	0c1b      	lsrs	r3, r3, #16
 800aa2e:	f363 421f 	bfi	r2, r3, #16, #16
{
 800aa32:	b082      	sub	sp, #8
}
 800aa34:	4610      	mov	r0, r2
 800aa36:	b002      	add	sp, #8
 800aa38:	4770      	bx	lr
 800aa3a:	bf00      	nop

0800aa3c <STC_SetNominalCurrent>:
  }
  else
  {
#endif
    pHandle->MaxPositiveTorque = hNominalCurrent;
    pHandle->MinNegativeTorque = -(int16_t)hNominalCurrent;
 800aa3c:	424b      	negs	r3, r1
    pHandle->MaxPositiveTorque = hNominalCurrent;
 800aa3e:	84c1      	strh	r1, [r0, #38]	@ 0x26
    pHandle->MinNegativeTorque = -(int16_t)hNominalCurrent;
 800aa40:	8503      	strh	r3, [r0, #40]	@ 0x28
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 800aa42:	4770      	bx	lr

0800aa44 <STC_ForceSpeedReferenceToCurrentSpeed>:
  *
  * - Called during the CHARGE_BOOT_CAP, SWITCH_OVER and WAIT_STOP_MOTOR states of the MC state machine
  * into MediumFrequencyTask to initialize the speed reference.
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed(SpeednTorqCtrl_Handle_t *pHandle)
{
 800aa44:	b510      	push	{r4, lr}
 800aa46:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SpeedRefUnitExt = ((int32_t)SPD_GetAvrgMecSpeedUnit(pHandle->SPD)) * (int32_t)65536;
 800aa48:	6940      	ldr	r0, [r0, #20]
 800aa4a:	f7ff feeb 	bl	800a824 <SPD_GetAvrgMecSpeedUnit>
 800aa4e:	0400      	lsls	r0, r0, #16
 800aa50:	6060      	str	r0, [r4, #4]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 800aa52:	bd10      	pop	{r4, pc}

0800aa54 <STO_PLL_CalcElAngle>:
  * @param  pInput: Pointer to the observer inputs structure.
  * @retval int16_t Rotor electrical angle (s16Degrees).
  */
//cstat !MISRAC2012-Rule-8.13
__weak int16_t STO_PLL_CalcElAngle(STO_PLL_Handle_t *pHandle, Observer_Inputs_t *pInputs)
{
 800aa54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int16_t retValue;

  if ((MC_NULL == pHandle) || (MC_NULL == pInputs))
 800aa58:	4604      	mov	r4, r0
{
 800aa5a:	b089      	sub	sp, #36	@ 0x24
  if ((MC_NULL == pHandle) || (MC_NULL == pInputs))
 800aa5c:	2800      	cmp	r0, #0
 800aa5e:	f000 80cf 	beq.w	800ac00 <STO_PLL_CalcElAngle+0x1ac>
 800aa62:	2900      	cmp	r1, #0
 800aa64:	f000 80cf 	beq.w	800ac06 <STO_PLL_CalcElAngle+0x1b2>
    int16_t hIbeta_err;
    int16_t hRotor_Speed;
    int16_t hValfa;
    int16_t hVbeta;

    if (pHandle->wBemf_alfa_est > (((int32_t)pHandle->hF2) * INT16_MAX))
 800aa68:	f9b0 302e 	ldrsh.w	r3, [r0, #46]	@ 0x2e
 800aa6c:	6e87      	ldr	r7, [r0, #104]	@ 0x68
 800aa6e:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
 800aa72:	429f      	cmp	r7, r3
 800aa74:	f340 80d1 	ble.w	800ac1a <STO_PLL_CalcElAngle+0x1c6>
    {
      pHandle->wBemf_alfa_est = INT16_MAX * ((int32_t)pHandle->hF2);
 800aa78:	6683      	str	r3, [r0, #104]	@ 0x68
 800aa7a:	461f      	mov	r7, r3
    {
      /* Nothing to do */
    }
#ifndef FULL_MISRA_C_COMPLIANCY_STO_PLL
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est >> pHandle->F2LOG);
 800aa7c:	f8b4 511e 	ldrh.w	r5, [r4, #286]	@ 0x11e
#else
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est / pHandle->hF2);
#endif

    if (pHandle->wBemf_beta_est > (INT16_MAX * ((int32_t)pHandle->hF2)))
 800aa80:	6ee6      	ldr	r6, [r4, #108]	@ 0x6c
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est >> pHandle->F2LOG);
 800aa82:	fa47 f205 	asr.w	r2, r7, r5
    if (pHandle->wBemf_beta_est > (INT16_MAX * ((int32_t)pHandle->hF2)))
 800aa86:	42b3      	cmp	r3, r6
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est >> pHandle->F2LOG);
 800aa88:	9201      	str	r2, [sp, #4]
 800aa8a:	fa0f fe82 	sxth.w	lr, r2
    if (pHandle->wBemf_beta_est > (INT16_MAX * ((int32_t)pHandle->hF2)))
 800aa8e:	f2c0 80c1 	blt.w	800ac14 <STO_PLL_CalcElAngle+0x1c0>
    {
      pHandle->wBemf_beta_est = INT16_MAX * ((int32_t)pHandle->hF2);
    }
    else if (pHandle->wBemf_beta_est <= (-INT16_MAX * ((int32_t)pHandle->hF2)))
 800aa92:	425b      	negs	r3, r3
 800aa94:	429e      	cmp	r6, r3
 800aa96:	f340 80bd 	ble.w	800ac14 <STO_PLL_CalcElAngle+0x1c0>
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est >> pHandle->F2LOG);
#else
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est / pHandle->hF2);
#endif

    if (pHandle->Ialfa_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 800aa9a:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	@ 0x2c
 800aa9e:	f8d4 9060 	ldr.w	r9, [r4, #96]	@ 0x60
 800aaa2:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est >> pHandle->F2LOG);
 800aaa6:	fa46 f505 	asr.w	r5, r6, r5
    if (pHandle->Ialfa_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 800aaaa:	4599      	cmp	r9, r3
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est >> pHandle->F2LOG);
 800aaac:	fa0f fc85 	sxth.w	ip, r5
    if (pHandle->Ialfa_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 800aab0:	f340 80b9 	ble.w	800ac26 <STO_PLL_CalcElAngle+0x1d2>
    {
      pHandle->Ialfa_est = INT16_MAX * ((int32_t)pHandle->hF1);
 800aab4:	6623      	str	r3, [r4, #96]	@ 0x60
 800aab6:	4699      	mov	r9, r3
    else
    {
      /* Nothing to do */
    }

    if (pHandle->Ibeta_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 800aab8:	f8d4 8064 	ldr.w	r8, [r4, #100]	@ 0x64
 800aabc:	4543      	cmp	r3, r8
 800aabe:	f2c0 80a6 	blt.w	800ac0e <STO_PLL_CalcElAngle+0x1ba>
    {
      pHandle->Ibeta_est = INT16_MAX * ((int32_t)pHandle->hF1);
    }
    else if (pHandle->Ibeta_est <= (-INT16_MAX * ((int32_t)pHandle->hF1)))
 800aac2:	425b      	negs	r3, r3
 800aac4:	4598      	cmp	r8, r3
 800aac6:	f340 80a2 	ble.w	800ac0e <STO_PLL_CalcElAngle+0x1ba>
    hIbeta_err = (int16_t)(pHandle->Ibeta_est >> pHandle->F1LOG);
#else
    hIbeta_err = (int16_t)(pHandle->Ibeta_est / pHandle->hF1);
#endif

    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 800aaca:	88c8      	ldrh	r0, [r1, #6]

    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.alpha;
 800aacc:	f8b1 a008 	ldrh.w	sl, [r1, #8]
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 800aad0:	888b      	ldrh	r3, [r1, #4]
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 800aad2:	f8ad 0014 	strh.w	r0, [sp, #20]
    hValfa = (int16_t)(wAux >> 16); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
#else
    hValfa = (int16_t)(wAux / 65536);
#endif

    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.beta;
 800aad6:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 800aada:	f8ad 3010 	strh.w	r3, [sp, #16]
    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.alpha;
 800aade:	f9b1 3000 	ldrsh.w	r3, [r1]
    hIalfa_err = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 800aae2:	f8b4 211c 	ldrh.w	r2, [r4, #284]	@ 0x11c
    hAux = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
#else
    hAux = (int16_t)(pHandle->Ialfa_est / pHandle->hF1);
#endif

    wAux = ((int32_t)pHandle->hC1) * hAux;
 800aae6:	f9b4 b020 	ldrsh.w	fp, [r4, #32]
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 800aaea:	9904      	ldr	r1, [sp, #16]
    wAux = wAux * pHandle->hC6;
    wAux = pHandle->_Super.hElSpeedDpp * wAux;
    wBemf_beta_est_Next -= wAux;

    /* Calls the PLL blockset */
    pHandle->hBemf_alfa_est = hAux_Alfa;
 800aaec:	f8a4 e070 	strh.w	lr, [r4, #112]	@ 0x70
    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.beta;
 800aaf0:	fb0a f000 	mul.w	r0, sl, r0
    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.alpha;
 800aaf4:	fb0a f303 	mul.w	r3, sl, r3
    hVbeta = ( int16_t ) ( wAux >> 16 ); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800aaf8:	1400      	asrs	r0, r0, #16
    hValfa = (int16_t)(wAux >> 16); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800aafa:	141b      	asrs	r3, r3, #16
    hVbeta = ( int16_t ) ( wAux >> 16 ); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800aafc:	9003      	str	r0, [sp, #12]
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 800aafe:	9805      	ldr	r0, [sp, #20]
    hValfa = (int16_t)(wAux >> 16); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800ab00:	9302      	str	r3, [sp, #8]
    hIalfa_err = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 800ab02:	fa49 f302 	asr.w	r3, r9, r2
    hIbeta_err = (int16_t)(pHandle->Ibeta_est >> pHandle->F1LOG);
 800ab06:	fa48 f202 	asr.w	r2, r8, r2
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 800ab0a:	eba2 0a00 	sub.w	sl, r2, r0
    wAux = ((int32_t)pHandle->hC1) * hAux;
 800ab0e:	fb12 f20b 	smulbb	r2, r2, fp
    wIbeta_est_Next = pHandle->Ibeta_est - wAux;
 800ab12:	eba8 0202 	sub.w	r2, r8, r2
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 800ab16:	1a59      	subs	r1, r3, r1
    wAux = ((int32_t)pHandle->hC2) * hIalfa_err;
 800ab18:	f9b4 8022 	ldrsh.w	r8, [r4, #34]	@ 0x22
    wIalfa_est_Next += wAux;
 800ab1c:	9802      	ldr	r0, [sp, #8]
    pHandle->hBemf_beta_est = hAux_Beta;
 800ab1e:	f8a4 c072 	strh.w	ip, [r4, #114]	@ 0x72
    wAux = ((int32_t)pHandle->hC1) * hAux;
 800ab22:	fb13 f30b 	smulbb	r3, r3, fp
    wIalfa_est_Next = pHandle->Ialfa_est - wAux;
 800ab26:	eba9 0303 	sub.w	r3, r9, r3
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 800ab2a:	b209      	sxth	r1, r1
    wAux = ((int32_t)pHandle->hC5) * hValfa;
 800ab2c:	f9b4 9028 	ldrsh.w	r9, [r4, #40]	@ 0x28
    wIalfa_est_Next += wAux;
 800ab30:	fb08 3301 	mla	r3, r8, r1, r3
    wIalfa_est_Next += wAux;
 800ab34:	fb09 3300 	mla	r3, r9, r0, r3
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 800ab38:	fa0f fa8a 	sxth.w	sl, sl
    wIbeta_est_Next += wAux;
 800ab3c:	9803      	ldr	r0, [sp, #12]
    wIbeta_est_Next += wAux;
 800ab3e:	fb08 280a 	mla	r8, r8, sl, r2
    wIbeta_est_Next += wAux;
 800ab42:	fb09 8800 	mla	r8, r9, r0, r8
    wAux = ((int32_t)pHandle->hC4) * hIalfa_err;
 800ab46:	f9b4 0026 	ldrsh.w	r0, [r4, #38]	@ 0x26
    wAux = (int32_t)hAux_Beta >> pHandle->F3POW2; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800ab4a:	8e62      	ldrh	r2, [r4, #50]	@ 0x32
    wAux = wAux * pHandle->hC6;
 800ab4c:	f9b4 902a 	ldrsh.w	r9, [r4, #42]	@ 0x2a
    wBemf_alfa_est_Next = pHandle->wBemf_alfa_est + wAux;
 800ab50:	fb01 7100 	mla	r1, r1, r0, r7
    wBemf_beta_est_Next = pHandle->wBemf_beta_est + wAux;
 800ab54:	fb00 600a 	mla	r0, r0, sl, r6
    wAux = ((int32_t)pHandle->hC3) * hAux_Alfa;
 800ab58:	f9b4 6024 	ldrsh.w	r6, [r4, #36]	@ 0x24
    wIalfa_est_Next -= wAux;
 800ab5c:	fb06 371e 	mls	r7, r6, lr, r3
    wIbeta_est_Next -= wAux;
 800ab60:	fb06 861c 	mls	r6, r6, ip, r8
    wAux = (int32_t)hAux_Alfa >> pHandle->F3POW2; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800ab64:	fa4e fe02 	asr.w	lr, lr, r2
    wAux = (int32_t)hAux_Beta >> pHandle->F3POW2; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800ab68:	fa4c fc02 	asr.w	ip, ip, r2
    wAux = pHandle->_Super.hElSpeedDpp * wAux;
 800ab6c:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
    wAux = wAux * pHandle->hC6;
 800ab70:	fb0e f309 	mul.w	r3, lr, r9
    wBemf_beta_est_Next -= wAux;
 800ab74:	fb03 0812 	mls	r8, r3, r2, r0

    if (0 == pHandle->hForcedDirection)
 800ab78:	f994 3124 	ldrsb.w	r3, [r4, #292]	@ 0x124
    wAux = wAux * pHandle->hC6;
 800ab7c:	fb0c fc09 	mul.w	ip, ip, r9
    wBemf_alfa_est_Next += wAux;
 800ab80:	fb0c 1902 	mla	r9, ip, r2, r1
    if (0 == pHandle->hForcedDirection)
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d154      	bne.n	800ac32 <STO_PLL_CalcElAngle+0x1de>
    {
      /* We are in auxiliary mode, then rely on the speed detected */
      if(pHandle->_Super.hElSpeedDpp >= 0)
 800ab88:	2a00      	cmp	r2, #0
 800ab8a:	f64f 7aff 	movw	sl, #65535	@ 0xffff
 800ab8e:	bfa8      	it	ge
 800ab90:	f04f 0a01 	movge.w	sl, #1
  int16_t hAux1;
  int16_t hAux2;
  int16_t hOutput;
  Trig_Components Local_Components;

  Local_Components = MCM_Trig_Functions(pHandle->_Super.hElAngle);
 800ab94:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800ab98:	f7fa f878 	bl	8004c8c <MCM_Trig_Functions>
    hAux_Alfa = (int16_t)(hAux_Alfa * wDirection);
 800ab9c:	9b01      	ldr	r3, [sp, #4]
    hAux_Beta = (int16_t)(hAux_Beta * wDirection);
 800ab9e:	fb15 f50a 	smulbb	r5, r5, sl
    hAux_Alfa = (int16_t)(hAux_Alfa * wDirection);
 800aba2:	fb13 f30a 	smulbb	r3, r3, sl
    hRotor_Speed = STO_ExecutePLL(pHandle, hAux_Alfa, -hAux_Beta);
 800aba6:	426d      	negs	r5, r5

  /* Alfa & Beta BEMF multiplied by Cos & Sin */
  wAlfa_Sin_tmp = ((int32_t )hBemf_alfa_est) * ((int32_t )Local_Components.hSin);
  wBeta_Cos_tmp = ((int32_t )hBemf_beta_est) * ((int32_t )Local_Components.hCos);
 800aba8:	fb10 f505 	smulbb	r5, r0, r5
  wAlfa_Sin_tmp = ((int32_t )hBemf_alfa_est) * ((int32_t )Local_Components.hSin);
 800abac:	fb10 f023 	smultb	r0, r0, r3
#else
  hAux2 = (int16_t)(wAlfa_Sin_tmp / 32768);
#endif

  /* Speed PI regulator */
  hOutput = PI_Controller(& pHandle->PIRegulator, (int32_t)(hAux1 ) - hAux2);
 800abb0:	f340 31cf 	sbfx	r1, r0, #15, #16
 800abb4:	f345 35cf 	sbfx	r5, r5, #15, #16
 800abb8:	1a69      	subs	r1, r5, r1
 800abba:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 800abbe:	f7fe fe27 	bl	8009810 <PI_Controller>
  uint8_t bBuffer_index = pHandle->Speed_Buffer_Index;
 800abc2:	f894 30f4 	ldrb.w	r3, [r4, #244]	@ 0xf4
  if (bBuffer_index == pHandle->SpeedBufferSizeUnit)
 800abc6:	f894 210e 	ldrb.w	r2, [r4, #270]	@ 0x10e
    pHandle->_Super.InstantaneousElSpeedDpp = hRotor_Speed;
 800abca:	8220      	strh	r0, [r4, #16]
  bBuffer_index++;
 800abcc:	3301      	adds	r3, #1
 800abce:	b2db      	uxtb	r3, r3
  if (bBuffer_index == pHandle->SpeedBufferSizeUnit)
 800abd0:	429a      	cmp	r2, r3
  pHandle->SpeedBufferOldestEl = pHandle->Speed_Buffer[bBuffer_index];
 800abd2:	bf12      	itee	ne
 800abd4:	461a      	movne	r2, r3
 800abd6:	2200      	moveq	r2, #0
    bBuffer_index = 0U;
 800abd8:	4613      	moveq	r3, r2
  pHandle->SpeedBufferOldestEl = pHandle->Speed_Buffer[bBuffer_index];
 800abda:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 800abde:	f9b2 1074 	ldrsh.w	r1, [r2, #116]	@ 0x74
 800abe2:	f8a4 110c 	strh.w	r1, [r4, #268]	@ 0x10c
  pHandle->Speed_Buffer[bBuffer_index] = hRotor_Speed;
 800abe6:	f8a2 0074 	strh.w	r0, [r2, #116]	@ 0x74
  pHandle->Speed_Buffer_Index = bBuffer_index;
 800abea:	f884 30f4 	strb.w	r3, [r4, #244]	@ 0xf4
    pHandle->_Super.hElAngle += hRotor_Speed;
 800abee:	88a3      	ldrh	r3, [r4, #4]
    pHandle->Ialfa_est = wIalfa_est_Next;
 800abf0:	6627      	str	r7, [r4, #96]	@ 0x60
    pHandle->_Super.hElAngle += hRotor_Speed;
 800abf2:	4418      	add	r0, r3
    pHandle->Ibeta_est = wIbeta_est_Next;
 800abf4:	e9c4 6919 	strd	r6, r9, [r4, #100]	@ 0x64
    pHandle->_Super.hElAngle += hRotor_Speed;
 800abf8:	b200      	sxth	r0, r0
    pHandle->wBemf_beta_est = wBemf_beta_est_Next;
 800abfa:	f8c4 806c 	str.w	r8, [r4, #108]	@ 0x6c
    pHandle->_Super.hElAngle += hRotor_Speed;
 800abfe:	80a0      	strh	r0, [r4, #4]
}
 800ac00:	b009      	add	sp, #36	@ 0x24
 800ac02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    retValue = 0;
 800ac06:	4608      	mov	r0, r1
}
 800ac08:	b009      	add	sp, #36	@ 0x24
 800ac0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pHandle->Ibeta_est = -INT16_MAX * ((int32_t)pHandle->hF1);
 800ac0e:	6663      	str	r3, [r4, #100]	@ 0x64
 800ac10:	4698      	mov	r8, r3
 800ac12:	e75a      	b.n	800aaca <STO_PLL_CalcElAngle+0x76>
      pHandle->wBemf_beta_est = (-INT16_MAX * ((int32_t)pHandle->hF2));
 800ac14:	66e3      	str	r3, [r4, #108]	@ 0x6c
 800ac16:	461e      	mov	r6, r3
 800ac18:	e73f      	b.n	800aa9a <STO_PLL_CalcElAngle+0x46>
    else if (pHandle->wBemf_alfa_est <= (-INT16_MAX * ((int32_t)pHandle->hF2)))
 800ac1a:	425a      	negs	r2, r3
 800ac1c:	4297      	cmp	r7, r2
      pHandle->wBemf_alfa_est = -INT16_MAX * ((int32_t)pHandle->hF2);
 800ac1e:	bfdc      	itt	le
 800ac20:	6682      	strle	r2, [r0, #104]	@ 0x68
 800ac22:	4617      	movle	r7, r2
 800ac24:	e72a      	b.n	800aa7c <STO_PLL_CalcElAngle+0x28>
    else if (pHandle->Ialfa_est <= (-INT16_MAX * ((int32_t)pHandle->hF1)))
 800ac26:	425a      	negs	r2, r3
 800ac28:	4591      	cmp	r9, r2
      pHandle->Ialfa_est = -INT16_MAX * ((int32_t)pHandle->hF1);
 800ac2a:	bfdc      	itt	le
 800ac2c:	6622      	strle	r2, [r4, #96]	@ 0x60
 800ac2e:	4691      	movle	r9, r2
 800ac30:	e742      	b.n	800aab8 <STO_PLL_CalcElAngle+0x64>
    hAux_Alfa = (int16_t)(hAux_Alfa * wDirection);
 800ac32:	fa1f fa83 	uxth.w	sl, r3
 800ac36:	e7ad      	b.n	800ab94 <STO_PLL_CalcElAngle+0x140>

0800ac38 <STO_PLL_CalcAvrgMecSpeedUnit>:
{
 800ac38:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t i, bSpeedBufferSizeUnit = pHandle->SpeedBufferSizeUnit;
 800ac3a:	f890 510e 	ldrb.w	r5, [r0, #270]	@ 0x10e
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 800ac3e:	2d00      	cmp	r5, #0
 800ac40:	f000 8096 	beq.w	800ad70 <STO_PLL_CalcAvrgMecSpeedUnit+0x138>
 800ac44:	f100 0272 	add.w	r2, r0, #114	@ 0x72
 800ac48:	eb02 0445 	add.w	r4, r2, r5, lsl #1
 800ac4c:	4613      	mov	r3, r2
    int32_t wAvrSpeed_dpp = (int32_t)0;
 800ac4e:	f04f 0c00 	mov.w	ip, #0
      wAvrSpeed_dpp += (int32_t)(pHandle->Speed_Buffer[i]);
 800ac52:	f933 ef02 	ldrsh.w	lr, [r3, #2]!
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 800ac56:	42a3      	cmp	r3, r4
      wAvrSpeed_dpp += (int32_t)(pHandle->Speed_Buffer[i]);
 800ac58:	44f4      	add	ip, lr
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 800ac5a:	d1fa      	bne.n	800ac52 <STO_PLL_CalcAvrgMecSpeedUnit+0x1a>
      wAvrSpeed_dpp = wAvrSpeed_dpp / ((int16_t)bSpeedBufferSizeUnit);
 800ac5c:	fb9c fef5 	sdiv	lr, ip, r5
    int32_t wAvrQuadraticError = 0;
 800ac60:	f04f 0c00 	mov.w	ip, #0
      wError = ((int32_t)pHandle->Speed_Buffer[i]) - wAvrSpeed_dpp;
 800ac64:	f932 3f02 	ldrsh.w	r3, [r2, #2]!
 800ac68:	eba3 030e 	sub.w	r3, r3, lr
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 800ac6c:	42a2      	cmp	r2, r4
      wAvrQuadraticError += wError;
 800ac6e:	fb03 cc03 	mla	ip, r3, r3, ip
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 800ac72:	d1f7      	bne.n	800ac64 <STO_PLL_CalcAvrgMecSpeedUnit+0x2c>
    wAvrQuadraticError = wAvrQuadraticError / ((int16_t)bSpeedBufferSizeUnit);
 800ac74:	fbbc f4f5 	udiv	r4, ip, r5
    wAvrSquareSpeed = wAvrSpeed_dpp * wAvrSpeed_dpp;
 800ac78:	fb0e f30e 	mul.w	r3, lr, lr
    int64_t lAvrSquareSpeed = (int64_t)(wAvrSquareSpeed) * (int64_t)pHandle->VariancePercentage;
 800ac7c:	17de      	asrs	r6, r3, #31
 800ac7e:	f8b0 c110 	ldrh.w	ip, [r0, #272]	@ 0x110
    wAux = wAvrSpeed_dpp * ((int32_t)pHandle->_Super.hMeasurementFrequency);
 800ac82:	8b45      	ldrh	r5, [r0, #26]
    if (true == pHandle->EnableDualCheck) /* Do algorithm if it's enabled */
 800ac84:	f890 7104 	ldrb.w	r7, [r0, #260]	@ 0x104
    int64_t lAvrSquareSpeed = (int64_t)(wAvrSquareSpeed) * (int64_t)pHandle->VariancePercentage;
 800ac88:	fbac 2303 	umull	r2, r3, ip, r3
 800ac8c:	fb0c 3306 	mla	r3, ip, r6, r3
    wAvrSquareSpeed = (int32_t)(lAvrSquareSpeed / (int64_t)128);
 800ac90:	09d2      	lsrs	r2, r2, #7
 800ac92:	ea42 6243 	orr.w	r2, r2, r3, lsl #25
    wAux = wAux * ((int32_t)pHandle->_Super.SpeedUnit);
 800ac96:	7883      	ldrb	r3, [r0, #2]
    wAux = wAvrSpeed_dpp * ((int32_t)pHandle->_Super.hMeasurementFrequency);
 800ac98:	fb0e f505 	mul.w	r5, lr, r5
    if (wAvrQuadraticError < wAvrSquareSpeed)
 800ac9c:	42a2      	cmp	r2, r4
    wAux = wAux * ((int32_t)pHandle->_Super.SpeedUnit);
 800ac9e:	fb05 f303 	mul.w	r3, r5, r3
    if (wAvrQuadraticError < wAvrSquareSpeed)
 800aca2:	bfd8      	it	le
 800aca4:	2600      	movle	r6, #0
    wAux = wAux / ((int32_t)pHandle->_Super.DPPConvFactor);
 800aca6:	69c5      	ldr	r5, [r0, #28]
 800aca8:	fb93 f3f5 	sdiv	r3, r3, r5
    if (wAvrQuadraticError < wAvrSquareSpeed)
 800acac:	bfc8      	it	gt
 800acae:	2601      	movgt	r6, #1
    wAux = wAux / ((int16_t)pHandle->_Super.bElToMecRatio);
 800acb0:	7845      	ldrb	r5, [r0, #1]
 800acb2:	fb93 f3f5 	sdiv	r3, r3, r5
    *pMecSpeedUnit = (int16_t)wAux;
 800acb6:	b21d      	sxth	r5, r3
 800acb8:	800d      	strh	r5, [r1, #0]
    if (wAvrQuadraticError < wAvrSquareSpeed)
 800acba:	f880 60f5 	strb.w	r6, [r0, #245]	@ 0xf5
    pHandle->_Super.hAvrMecSpeedUnit = (int16_t)wAux;
 800acbe:	8185      	strh	r5, [r0, #12]
    if (false == pHandle->IsAlgorithmConverged)
 800acc0:	f890 60f8 	ldrb.w	r6, [r0, #248]	@ 0xf8
    if (true == pHandle->EnableDualCheck) /* Do algorithm if it's enabled */
 800acc4:	b99f      	cbnz	r7, 800acee <STO_PLL_CalcAvrgMecSpeedUnit+0xb6>
    if (false == pHandle->IsAlgorithmConverged)
 800acc6:	b346      	cbz	r6, 800ad1a <STO_PLL_CalcAvrgMecSpeedUnit+0xe2>
      if ((false == pHandle->IsSpeedReliable) || (false == bIs_Bemf_Consistent))
 800acc8:	42a2      	cmp	r2, r4
 800acca:	dc23      	bgt.n	800ad14 <STO_PLL_CalcAvrgMecSpeedUnit+0xdc>
        pHandle->ReliabilityCounter++;
 800accc:	f890 30f7 	ldrb.w	r3, [r0, #247]	@ 0xf7
        if (pHandle->ReliabilityCounter >= pHandle->Reliability_hysteresys)
 800acd0:	f890 2117 	ldrb.w	r2, [r0, #279]	@ 0x117
        pHandle->ReliabilityCounter++;
 800acd4:	3301      	adds	r3, #1
 800acd6:	b2db      	uxtb	r3, r3
        if (pHandle->ReliabilityCounter >= pHandle->Reliability_hysteresys)
 800acd8:	429a      	cmp	r2, r3
        pHandle->ReliabilityCounter++;
 800acda:	f880 30f7 	strb.w	r3, [r0, #247]	@ 0xf7
        if (pHandle->ReliabilityCounter >= pHandle->Reliability_hysteresys)
 800acde:	d81c      	bhi.n	800ad1a <STO_PLL_CalcAvrgMecSpeedUnit+0xe2>
          pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 800ace0:	78c2      	ldrb	r2, [r0, #3]
 800ace2:	7002      	strb	r2, [r0, #0]
          pHandle->ReliabilityCounter = 0U;
 800ace4:	2300      	movs	r3, #0
 800ace6:	f880 30f7 	strb.w	r3, [r0, #247]	@ 0xf7
}
 800acea:	4618      	mov	r0, r3
 800acec:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wAux = ((wAux < 0) ? (-wAux) : (wAux));
 800acee:	2b00      	cmp	r3, #0
      if (wAux < (int32_t)(pHandle->MaxAppPositiveMecSpeedUnit))
 800acf0:	f8b0 511a 	ldrh.w	r5, [r0, #282]	@ 0x11a
      wAux = ((wAux < 0) ? (-wAux) : (wAux));
 800acf4:	bfb8      	it	lt
 800acf6:	425b      	neglt	r3, r3
      if (wAux < (int32_t)(pHandle->MaxAppPositiveMecSpeedUnit))
 800acf8:	429d      	cmp	r5, r3
 800acfa:	dc12      	bgt.n	800ad22 <STO_PLL_CalcAvrgMecSpeedUnit+0xea>
    bool bIs_Bemf_Consistent = false;
 800acfc:	2500      	movs	r5, #0
    int32_t wEstBemfSq = 0;
 800acfe:	462b      	mov	r3, r5
    int32_t wObsBemfSq = 0;
 800ad00:	462f      	mov	r7, r5
      pHandle->Est_Bemf_Level = wEstBemfSq;
 800ad02:	e9c0 733f 	strd	r7, r3, [r0, #252]	@ 0xfc
      pHandle->IsBemfConsistent = bIs_Bemf_Consistent;
 800ad06:	f880 50f9 	strb.w	r5, [r0, #249]	@ 0xf9
    if (false == pHandle->IsAlgorithmConverged)
 800ad0a:	b136      	cbz	r6, 800ad1a <STO_PLL_CalcAvrgMecSpeedUnit+0xe2>
      if ((false == pHandle->IsSpeedReliable) || (false == bIs_Bemf_Consistent))
 800ad0c:	42a2      	cmp	r2, r4
 800ad0e:	dddd      	ble.n	800accc <STO_PLL_CalcAvrgMecSpeedUnit+0x94>
 800ad10:	2d00      	cmp	r5, #0
 800ad12:	d0db      	beq.n	800accc <STO_PLL_CalcAvrgMecSpeedUnit+0x94>
        pHandle->ReliabilityCounter = 0U;
 800ad14:	2300      	movs	r3, #0
 800ad16:	f880 30f7 	strb.w	r3, [r0, #247]	@ 0xf7
}
 800ad1a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        bAux = SPD_IsMecSpeedReliable (&pHandle->_Super, pMecSpeedUnit);
 800ad1e:	f7ff bd89 	b.w	800a834 <SPD_IsMecSpeedReliable>
        wObsBemf = (int32_t)pHandle->hBemf_alfa_est;
 800ad22:	f9b0 5070 	ldrsh.w	r5, [r0, #112]	@ 0x70
        wObsBemf = (int32_t)pHandle->hBemf_beta_est;
 800ad26:	f9b0 7072 	ldrsh.w	r7, [r0, #114]	@ 0x72
        wObsBemfSq = wObsBemf * wObsBemf;
 800ad2a:	fb05 fc05 	mul.w	ip, r5, r5
        wEstBemfSq = (wEstBemf * ((int32_t)pHandle->BemfConsistencyGain)) / 64;
 800ad2e:	f890 5119 	ldrb.w	r5, [r0, #281]	@ 0x119
        wObsBemfSq += wObsBemf * wObsBemf;
 800ad32:	fb07 c707 	mla	r7, r7, r7, ip
        wEstBemf = (wAux * 32767) / ((int16_t)pHandle->_Super.hMaxReliableMecSpeedUnit);
 800ad36:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
 800ad3a:	f9b0 c014 	ldrsh.w	ip, [r0, #20]
 800ad3e:	fb93 f3fc 	sdiv	r3, r3, ip
        wEstBemfSq = (wEstBemf * ((int32_t)pHandle->BemfConsistencyGain)) / 64;
 800ad42:	fb03 f505 	mul.w	r5, r3, r5
 800ad46:	2d00      	cmp	r5, #0
 800ad48:	bfb8      	it	lt
 800ad4a:	353f      	addlt	r5, #63	@ 0x3f
 800ad4c:	11ad      	asrs	r5, r5, #6
        wEstBemfSq *= wEstBemf;
 800ad4e:	fb05 f303 	mul.w	r3, r5, r3
        wEstBemfSqLo = wEstBemfSq - ((wEstBemfSq / 64) * ((int32_t)pHandle->BemfConsistencyCheck));
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	461d      	mov	r5, r3
 800ad56:	f890 c118 	ldrb.w	ip, [r0, #280]	@ 0x118
 800ad5a:	bfb8      	it	lt
 800ad5c:	f103 053f 	addlt.w	r5, r3, #63	@ 0x3f
 800ad60:	11ad      	asrs	r5, r5, #6
 800ad62:	fb0c 3515 	mls	r5, ip, r5, r3
        if (wObsBemfSq > wEstBemfSqLo)
 800ad66:	42af      	cmp	r7, r5
 800ad68:	bfd4      	ite	le
 800ad6a:	2500      	movle	r5, #0
 800ad6c:	2501      	movgt	r5, #1
 800ad6e:	e7c8      	b.n	800ad02 <STO_PLL_CalcAvrgMecSpeedUnit+0xca>
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 800ad70:	462c      	mov	r4, r5
 800ad72:	462b      	mov	r3, r5
 800ad74:	462e      	mov	r6, r5
    int32_t wAvrSpeed_dpp = (int32_t)0;
 800ad76:	46ae      	mov	lr, r5
 800ad78:	e781      	b.n	800ac7e <STO_PLL_CalcAvrgMecSpeedUnit+0x46>
 800ad7a:	bf00      	nop

0800ad7c <STO_PLL_CalcAvrgElSpeedDpp>:
    int16_t hIndexNew = (int16_t)pHandle->Speed_Buffer_Index;
 800ad7c:	f890 20f4 	ldrb.w	r2, [r0, #244]	@ 0xf4
    int16_t hSpeedBufferSizeUnit = (int16_t)pHandle->SpeedBufferSizeUnit;
 800ad80:	f890 c10e 	ldrb.w	ip, [r0, #270]	@ 0x10e
    hBufferSizeDiff = hSpeedBufferSizeUnit - hSpeedBufferSizedpp;
 800ad84:	f890 110f 	ldrb.w	r1, [r0, #271]	@ 0x10f
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->SpeedBufferOldestEl;
 800ad88:	eb00 0342 	add.w	r3, r0, r2, lsl #1
{
 800ad8c:	b410      	push	{r4}
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->SpeedBufferOldestEl;
 800ad8e:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	@ 0x74
 800ad92:	f8d0 4108 	ldr.w	r4, [r0, #264]	@ 0x108
    hBufferSizeDiff = hSpeedBufferSizeUnit - hSpeedBufferSizedpp;
 800ad96:	ebac 0101 	sub.w	r1, ip, r1
 800ad9a:	b289      	uxth	r1, r1
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->SpeedBufferOldestEl;
 800ad9c:	4423      	add	r3, r4
    if (0 == hBufferSizeDiff)
 800ad9e:	b959      	cbnz	r1, 800adb8 <STO_PLL_CalcAvrgElSpeedDpp+0x3c>
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->SpeedBufferOldestEl;
 800ada0:	f9b0 210c 	ldrsh.w	r2, [r0, #268]	@ 0x10c
 800ada4:	1a9b      	subs	r3, r3, r2
  wAvrSpeed_dpp = wSum >> pHandle->SpeedBufferSizeDppLOG;
 800ada6:	f8b0 2120 	ldrh.w	r2, [r0, #288]	@ 0x120
    pHandle->DppBufferSum = wSum;
 800adaa:	f8c0 3108 	str.w	r3, [r0, #264]	@ 0x108
  wAvrSpeed_dpp = wSum >> pHandle->SpeedBufferSizeDppLOG;
 800adae:	4113      	asrs	r3, r2
}
 800adb0:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->_Super.hElSpeedDpp = (int16_t)wAvrSpeed_dpp;
 800adb4:	81c3      	strh	r3, [r0, #14]
}
 800adb6:	4770      	bx	lr
      hIndexOldTemp = hIndexNew + hBufferSizeDiff;
 800adb8:	440a      	add	r2, r1
 800adba:	b291      	uxth	r1, r2
 800adbc:	b212      	sxth	r2, r2
      if (hIndexOldTemp >= hSpeedBufferSizeUnit)
 800adbe:	4594      	cmp	ip, r2
        hIndexOld = hIndexOldTemp - hSpeedBufferSizeUnit;
 800adc0:	bfdc      	itt	le
 800adc2:	eba1 010c 	suble.w	r1, r1, ip
 800adc6:	b20a      	sxthle	r2, r1
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->Speed_Buffer[hIndexOld];
 800adc8:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800adcc:	f9b2 2074 	ldrsh.w	r2, [r2, #116]	@ 0x74
 800add0:	1a9b      	subs	r3, r3, r2
 800add2:	e7e8      	b.n	800ada6 <STO_PLL_CalcAvrgElSpeedDpp+0x2a>

0800add4 <STO_PLL_Clear>:
{
 800add4:	b510      	push	{r4, lr}
  *
  */
static void STO_InitSpeedBuffer(STO_PLL_Handle_t * pHandle)
{
  uint8_t b_i;
  uint8_t bSpeedBufferSize = pHandle->SpeedBufferSizeUnit;
 800add6:	f890 210e 	ldrb.w	r2, [r0, #270]	@ 0x10e
    pHandle->Ialfa_est = (int32_t)0;
 800adda:	2100      	movs	r1, #0
    pHandle->Ibeta_est = (int32_t)0;
 800addc:	e9c0 1118 	strd	r1, r1, [r0, #96]	@ 0x60
    pHandle->wBemf_beta_est = (int32_t)0;
 800ade0:	e9c0 111a 	strd	r1, r1, [r0, #104]	@ 0x68
    pHandle->Est_Bemf_Level = (int32_t)0;
 800ade4:	e9c0 113f 	strd	r1, r1, [r0, #252]	@ 0xfc
{
 800ade8:	4604      	mov	r4, r0
    pHandle->_Super.hElAngle = (int16_t)0;
 800adea:	8081      	strh	r1, [r0, #4]
    pHandle->_Super.hElSpeedDpp = (int16_t)0;
 800adec:	81c1      	strh	r1, [r0, #14]
    pHandle->ConsistencyCounter = 0u;
 800adee:	f8a0 10f6 	strh.w	r1, [r0, #246]	@ 0xf6
    pHandle->IsAlgorithmConverged = false;
 800adf2:	f8a0 10f8 	strh.w	r1, [r0, #248]	@ 0xf8
    pHandle->DppBufferSum = (int32_t)0;
 800adf6:	f8c0 1108 	str.w	r1, [r0, #264]	@ 0x108
    pHandle->ForceConvergency = false;
 800adfa:	f8a0 1122 	strh.w	r1, [r0, #290]	@ 0x122

  /* Init speed buffer */
  for (b_i = 0U; b_i < bSpeedBufferSize; b_i++)
 800adfe:	b11a      	cbz	r2, 800ae08 <STO_PLL_Clear+0x34>
  {
    pHandle->Speed_Buffer[b_i] = (int16_t)0;
 800ae00:	0052      	lsls	r2, r2, #1
 800ae02:	3074      	adds	r0, #116	@ 0x74
 800ae04:	f000 fa26 	bl	800b254 <memset>
  }
  pHandle->Speed_Buffer_Index = 0U;
 800ae08:	2100      	movs	r1, #0
 800ae0a:	f884 10f4 	strb.w	r1, [r4, #244]	@ 0xf4
  pHandle->SpeedBufferOldestEl = (int16_t)0;
 800ae0e:	f8a4 110c 	strh.w	r1, [r4, #268]	@ 0x10c
    PID_SetIntegralTerm(& pHandle->PIRegulator, (int32_t)0);
 800ae12:	f104 0034 	add.w	r0, r4, #52	@ 0x34
}
 800ae16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    PID_SetIntegralTerm(& pHandle->PIRegulator, (int32_t)0);
 800ae1a:	f7fe bcc1 	b.w	80097a0 <PID_SetIntegralTerm>
 800ae1e:	bf00      	nop

0800ae20 <STO_PLL_Init>:
{
 800ae20:	b510      	push	{r4, lr}
    pHandle->ConsistencyCounter = pHandle->StartUpConsistThreshold;
 800ae22:	f890 1116 	ldrb.w	r1, [r0, #278]	@ 0x116
    htempk = (int16_t)(C6_COMP_CONST1 / pHandle->hF2);
 800ae26:	4b19      	ldr	r3, [pc, #100]	@ (800ae8c <STO_PLL_Init+0x6c>)
 800ae28:	f9b0 e02e 	ldrsh.w	lr, [r0, #46]	@ 0x2e
    pHandle->ConsistencyCounter = pHandle->StartUpConsistThreshold;
 800ae2c:	f880 10f6 	strb.w	r1, [r0, #246]	@ 0xf6
    pHandle->EnableDualCheck = true;
 800ae30:	2201      	movs	r2, #1
    pHandle->F3POW2 = 0U;
 800ae32:	2100      	movs	r1, #0
    htempk = (int16_t)(C6_COMP_CONST1 / pHandle->hF2);
 800ae34:	fb93 f3fe 	sdiv	r3, r3, lr
 800ae38:	b21b      	sxth	r3, r3
{
 800ae3a:	4604      	mov	r4, r0
    pHandle->EnableDualCheck = true;
 800ae3c:	f880 2104 	strb.w	r2, [r0, #260]	@ 0x104
    pHandle->F3POW2 = 0U;
 800ae40:	8641      	strh	r1, [r0, #50]	@ 0x32
    while (htempk != 0)
 800ae42:	b30b      	cbz	r3, 800ae88 <STO_PLL_Init+0x68>
    wAux = ((int32_t)1);
 800ae44:	4611      	mov	r1, r2
      htempk /= ((int16_t)2);
 800ae46:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    while (htempk != 0)
 800ae4a:	f102 0c01 	add.w	ip, r2, #1
 800ae4e:	105b      	asrs	r3, r3, #1
 800ae50:	4610      	mov	r0, r2
      wAux *= ((int32_t)2);
 800ae52:	ea4f 0141 	mov.w	r1, r1, lsl #1
    while (htempk != 0)
 800ae56:	fa1f f28c 	uxth.w	r2, ip
 800ae5a:	d1f4      	bne.n	800ae46 <STO_PLL_Init+0x26>
    pHandle->hF3 = (int16_t)wAux;
 800ae5c:	b20a      	sxth	r2, r1
 800ae5e:	8660      	strh	r0, [r4, #50]	@ 0x32
    wAux = ((int32_t)(pHandle->hF2)) * pHandle->hF3;
 800ae60:	fb0e f102 	mul.w	r1, lr, r2
    pHandle->hC6 = (int16_t)(wAux / C6_COMP_CONST2);
 800ae64:	480a      	ldr	r0, [pc, #40]	@ (800ae90 <STO_PLL_Init+0x70>)
    pHandle->hF3 = (int16_t)wAux;
 800ae66:	8622      	strh	r2, [r4, #48]	@ 0x30
    pHandle->hC6 = (int16_t)(wAux / C6_COMP_CONST2);
 800ae68:	17cb      	asrs	r3, r1, #31
 800ae6a:	fb80 0101 	smull	r0, r1, r0, r1
 800ae6e:	ebc3 2321 	rsb	r3, r3, r1, asr #8
 800ae72:	8563      	strh	r3, [r4, #42]	@ 0x2a
    STO_PLL_Clear(pHandle);
 800ae74:	4620      	mov	r0, r4
 800ae76:	f7ff ffad 	bl	800add4 <STO_PLL_Clear>
    PID_HandleInit(&pHandle->PIRegulator);
 800ae7a:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 800ae7e:	f7fe fc7b 	bl	8009778 <PID_HandleInit>
    pHandle->_Super.hMecAccelUnitP = 0;
 800ae82:	2300      	movs	r3, #0
 800ae84:	8263      	strh	r3, [r4, #18]
}
 800ae86:	bd10      	pop	{r4, pc}
 800ae88:	4671      	mov	r1, lr
 800ae8a:	e7eb      	b.n	800ae64 <STO_PLL_Init+0x44>
 800ae8c:	000fea5e 	.word	0x000fea5e
 800ae90:	06488dc5 	.word	0x06488dc5

0800ae94 <STO_PLL_IsObserverConverged>:
    int32_t wtemp;
    int16_t hEstimatedSpeedUnit;
    int16_t hUpperThreshold;
    int16_t hLowerThreshold;

    if (true == pHandle->ForceConvergency2)
 800ae94:	f890 2123 	ldrb.w	r2, [r0, #291]	@ 0x123
{
 800ae98:	4603      	mov	r3, r0
    if (true == pHandle->ForceConvergency2)
 800ae9a:	b112      	cbz	r2, 800aea2 <STO_PLL_IsObserverConverged+0xe>
    {
      *phForcedMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 800ae9c:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
 800aea0:	800a      	strh	r2, [r1, #0]
    else
    {
      /* Nothing to do */
    }

    if (true == pHandle->ForceConvergency)
 800aea2:	f893 0122 	ldrb.w	r0, [r3, #290]	@ 0x122
 800aea6:	b128      	cbz	r0, 800aeb4 <STO_PLL_IsObserverConverged+0x20>
    {
      bAux = true;
      pHandle->IsAlgorithmConverged = true;
 800aea8:	2001      	movs	r0, #1
      pHandle->_Super.bSpeedErrorNumber = 0U;
 800aeaa:	2200      	movs	r2, #0
      pHandle->IsAlgorithmConverged = true;
 800aeac:	f883 00f8 	strb.w	r0, [r3, #248]	@ 0xf8
      pHandle->_Super.bSpeedErrorNumber = 0U;
 800aeb0:	701a      	strb	r2, [r3, #0]
    }
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
  return (bAux);
}
 800aeb2:	4770      	bx	lr
      wtemp = ((int32_t)hEstimatedSpeedUnit) * ((int32_t)*phForcedMecSpeedUnit);
 800aeb4:	f9b1 2000 	ldrsh.w	r2, [r1]
      hEstimatedSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 800aeb8:	f9b3 c00c 	ldrsh.w	ip, [r3, #12]
{
 800aebc:	b530      	push	{r4, r5, lr}
      wtemp = ((int32_t)hEstimatedSpeedUnit) * ((int32_t)*phForcedMecSpeedUnit);
 800aebe:	fb0c fe02 	mul.w	lr, ip, r2
      if (wtemp > 0)
 800aec2:	f1be 0f00 	cmp.w	lr, #0
      wtemp = ((int32_t)hEstimatedSpeedUnit) * ((int32_t)*phForcedMecSpeedUnit);
 800aec6:	4614      	mov	r4, r2
      if (wtemp > 0)
 800aec8:	dd38      	ble.n	800af3c <STO_PLL_IsObserverConverged+0xa8>
        if (hEstimatedSpeedUnit < 0)
 800aeca:	f1bc 0f00 	cmp.w	ip, #0
          hEstimatedSpeedUnit = -hEstimatedSpeedUnit;
 800aece:	bfbc      	itt	lt
 800aed0:	f1cc 0c00 	rsblt	ip, ip, #0
 800aed4:	fa0f fc8c 	sxthlt.w	ip, ip
        if (*phForcedMecSpeedUnit < 0)
 800aed8:	2a00      	cmp	r2, #0
 800aeda:	db34      	blt.n	800af46 <STO_PLL_IsObserverConverged+0xb2>
        if (true == pHandle->IsSpeedReliable)
 800aedc:	f893 10f5 	ldrb.w	r1, [r3, #245]	@ 0xf5
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_H);
 800aee0:	f893 e112 	ldrb.w	lr, [r3, #274]	@ 0x112
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_L);
 800aee4:	f893 2113 	ldrb.w	r2, [r3, #275]	@ 0x113
        if (true == pHandle->IsSpeedReliable)
 800aee8:	b349      	cbz	r1, 800af3e <STO_PLL_IsObserverConverged+0xaa>
          if ((uint16_t)hEstimatedSpeedUnit > pHandle->MinStartUpValidSpeed)
 800aeea:	f8b3 5114 	ldrh.w	r5, [r3, #276]	@ 0x114
 800aeee:	fa1f f18c 	uxth.w	r1, ip
 800aef2:	428d      	cmp	r5, r1
 800aef4:	d223      	bcs.n	800af3e <STO_PLL_IsObserverConverged+0xaa>
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_L);
 800aef6:	fb04 f202 	mul.w	r2, r4, r2
        hLowerThreshold = (int16_t)(wAux / ((int32_t)16));
 800aefa:	2a00      	cmp	r2, #0
 800aefc:	bfb8      	it	lt
 800aefe:	320f      	addlt	r2, #15
            if (hEstimatedSpeedUnit >= hLowerThreshold)
 800af00:	f342 120f 	sbfx	r2, r2, #4, #16
 800af04:	4594      	cmp	ip, r2
 800af06:	db1a      	blt.n	800af3e <STO_PLL_IsObserverConverged+0xaa>
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_H);
 800af08:	fb04 fe0e 	mul.w	lr, r4, lr
        hUpperThreshold = (int16_t)(wAux / ((int32_t)16));
 800af0c:	f1be 0f00 	cmp.w	lr, #0
 800af10:	bfb8      	it	lt
 800af12:	f10e 0e0f 	addlt.w	lr, lr, #15
              if (hEstimatedSpeedUnit <= hUpperThreshold)
 800af16:	f34e 1e0f 	sbfx	lr, lr, #4, #16
 800af1a:	45f4      	cmp	ip, lr
 800af1c:	dc0f      	bgt.n	800af3e <STO_PLL_IsObserverConverged+0xaa>
                pHandle->ConsistencyCounter++;
 800af1e:	f893 20f6 	ldrb.w	r2, [r3, #246]	@ 0xf6
                if (pHandle->ConsistencyCounter >= pHandle->StartUpConsistThreshold)
 800af22:	f893 1116 	ldrb.w	r1, [r3, #278]	@ 0x116
                pHandle->ConsistencyCounter++;
 800af26:	3201      	adds	r2, #1
 800af28:	b2d2      	uxtb	r2, r2
                if (pHandle->ConsistencyCounter >= pHandle->StartUpConsistThreshold)
 800af2a:	4291      	cmp	r1, r2
                pHandle->ConsistencyCounter++;
 800af2c:	f883 20f6 	strb.w	r2, [r3, #246]	@ 0xf6
                if (pHandle->ConsistencyCounter >= pHandle->StartUpConsistThreshold)
 800af30:	d804      	bhi.n	800af3c <STO_PLL_IsObserverConverged+0xa8>
      pHandle->IsAlgorithmConverged = true;
 800af32:	2001      	movs	r0, #1
      pHandle->_Super.bSpeedErrorNumber = 0U;
 800af34:	2200      	movs	r2, #0
      pHandle->IsAlgorithmConverged = true;
 800af36:	f883 00f8 	strb.w	r0, [r3, #248]	@ 0xf8
      pHandle->_Super.bSpeedErrorNumber = 0U;
 800af3a:	701a      	strb	r2, [r3, #0]
}
 800af3c:	bd30      	pop	{r4, r5, pc}
                pHandle->ConsistencyCounter = 0U;
 800af3e:	2200      	movs	r2, #0
 800af40:	f883 20f6 	strb.w	r2, [r3, #246]	@ 0xf6
}
 800af44:	bd30      	pop	{r4, r5, pc}
          *phForcedMecSpeedUnit = -*phForcedMecSpeedUnit;
 800af46:	4252      	negs	r2, r2
 800af48:	b212      	sxth	r2, r2
 800af4a:	800a      	strh	r2, [r1, #0]
        if (true == pHandle->IsSpeedReliable)
 800af4c:	f893 10f5 	ldrb.w	r1, [r3, #245]	@ 0xf5
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_H);
 800af50:	f893 e112 	ldrb.w	lr, [r3, #274]	@ 0x112
 800af54:	4614      	mov	r4, r2
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_L);
 800af56:	f893 2113 	ldrb.w	r2, [r3, #275]	@ 0x113
        if (true == pHandle->IsSpeedReliable)
 800af5a:	2900      	cmp	r1, #0
 800af5c:	d0ef      	beq.n	800af3e <STO_PLL_IsObserverConverged+0xaa>
 800af5e:	e7c4      	b.n	800aeea <STO_PLL_IsObserverConverged+0x56>

0800af60 <STO_PLL_GetEstimatedBemf>:
    vaux.alpha = pHandle->hBemf_alfa_est;
    vaux.beta = pHandle->hBemf_beta_est;
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
  return (vaux);
 800af60:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 800af62:	2200      	movs	r2, #0
 800af64:	b299      	uxth	r1, r3
 800af66:	f361 020f 	bfi	r2, r1, #0, #16
 800af6a:	0c1b      	lsrs	r3, r3, #16
 800af6c:	f363 421f 	bfi	r2, r3, #16, #16
{
 800af70:	b082      	sub	sp, #8
}
 800af72:	4610      	mov	r0, r2
 800af74:	b002      	add	sp, #8
 800af76:	4770      	bx	lr

0800af78 <STO_PLL_GetEstimatedCurrent>:
  * 
  * @retval alphabeta_t State observer estimated stator current Ialpha-beta.
  */
//cstat !MISRAC2012-Rule-8.13
__weak alphabeta_t STO_PLL_GetEstimatedCurrent(STO_PLL_Handle_t *pHandle)
{
 800af78:	4603      	mov	r3, r0
  iaux.beta = (int16_t)(pHandle->Ibeta_est / pHandle->hF1);
#endif
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
  return (iaux);
 800af7a:	2000      	movs	r0, #0
  iaux.alpha = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 800af7c:	f8b3 111c 	ldrh.w	r1, [r3, #284]	@ 0x11c
  iaux.beta = (int16_t)(pHandle->Ibeta_est >> pHandle->F1LOG);
 800af80:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
  iaux.alpha = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 800af84:	410a      	asrs	r2, r1
  return (iaux);
 800af86:	410b      	asrs	r3, r1
 800af88:	b292      	uxth	r2, r2
 800af8a:	f362 000f 	bfi	r0, r2, #0, #16
 800af8e:	b29b      	uxth	r3, r3
{
 800af90:	b082      	sub	sp, #8
  return (iaux);
 800af92:	f363 401f 	bfi	r0, r3, #16, #16
}
 800af96:	b002      	add	sp, #8
 800af98:	4770      	bx	lr
 800af9a:	bf00      	nop

0800af9c <STO_PLL_GetObserverGains>:
    /* Nothing to do */
  }
  else
  {
#endif
    *phC2 = pHandle->hC2;
 800af9c:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 800afa0:	800b      	strh	r3, [r1, #0]
    *phC4 = pHandle->hC4;
 800afa2:	f9b0 3026 	ldrsh.w	r3, [r0, #38]	@ 0x26
 800afa6:	8013      	strh	r3, [r2, #0]
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
}
 800afa8:	4770      	bx	lr
 800afaa:	bf00      	nop

0800afac <STO_PLL_SetObserverGains>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hC2 = hhC1;
 800afac:	8441      	strh	r1, [r0, #34]	@ 0x22
    pHandle->hC4 = hhC2;
 800afae:	84c2      	strh	r2, [r0, #38]	@ 0x26
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
}
 800afb0:	4770      	bx	lr
 800afb2:	bf00      	nop

0800afb4 <STO_SetPLLGains>:
/**
  * @brief  Stores in @p pHandle the new values @p hPgain and @p hIgain for PLL gains.
  * 
  */
__weak void STO_SetPLLGains(STO_PLL_Handle_t *pHandle, int16_t hPgain, int16_t hIgain)
{
 800afb4:	b538      	push	{r3, r4, r5, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    PID_SetKP(&pHandle->PIRegulator, hPgain);
 800afb6:	f100 0434 	add.w	r4, r0, #52	@ 0x34
{
 800afba:	4615      	mov	r5, r2
    PID_SetKP(&pHandle->PIRegulator, hPgain);
 800afbc:	4620      	mov	r0, r4
 800afbe:	f7fe fbe3 	bl	8009788 <PID_SetKP>
    PID_SetKI(&pHandle->PIRegulator, hIgain);
 800afc2:	4629      	mov	r1, r5
 800afc4:	4620      	mov	r0, r4
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
}
 800afc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    PID_SetKI(&pHandle->PIRegulator, hIgain);
 800afca:	f7fe bbdf 	b.w	800978c <PID_SetKI>
 800afce:	bf00      	nop

0800afd0 <STO_OTF_ResetPLL>:
  }
  else
  {
#endif
    STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    PID_SetIntegralTerm(&pHdl->PIRegulator, (int32_t)0);
 800afd0:	6800      	ldr	r0, [r0, #0]
 800afd2:	2100      	movs	r1, #0
 800afd4:	3034      	adds	r0, #52	@ 0x34
 800afd6:	f7fe bbe3 	b.w	80097a0 <PID_SetIntegralTerm>
 800afda:	bf00      	nop

0800afdc <STO_SetPLL>:
  * @param  pHandle: Handler of the current instance of the STO component.
  * @param  hElSpeedDpp: Estimated average electrical speed expressed in dpp.
  * @param  hElAngle: Estimated electrical angle expressed in s16Degrees.
  */
__weak void STO_SetPLL(STO_PLL_Handle_t *pHandle, int16_t hElSpeedDpp, int16_t hElAngle)
{
 800afdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    PID_SetIntegralTerm(&pHandle->PIRegulator, ((int32_t)hElSpeedDpp)
 800afde:	f100 0734 	add.w	r7, r0, #52	@ 0x34
{
 800afe2:	4604      	mov	r4, r0
                                              * (int32_t)(PID_GetKIDivisor(&pHandle->PIRegulator)));
 800afe4:	4638      	mov	r0, r7
{
 800afe6:	4615      	mov	r5, r2
 800afe8:	460e      	mov	r6, r1
                                              * (int32_t)(PID_GetKIDivisor(&pHandle->PIRegulator)));
 800afea:	f7fe fbe3 	bl	80097b4 <PID_GetKIDivisor>
    PID_SetIntegralTerm(&pHandle->PIRegulator, ((int32_t)hElSpeedDpp)
 800afee:	fb00 f106 	mul.w	r1, r0, r6
 800aff2:	4638      	mov	r0, r7
 800aff4:	f7fe fbd4 	bl	80097a0 <PID_SetIntegralTerm>
    pHandle->_Super.hElAngle = hElAngle;
 800aff8:	80a5      	strh	r5, [r4, #4]
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
}
 800affa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800affc <STO_PLL_GetEstimatedBemfLevel>:
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  return ((MC_NULL == pHandle) ? 0 : pHandle->Est_Bemf_Level);
#else
  return (pHandle->Est_Bemf_Level);
#endif
}
 800affc:	f8d0 0100 	ldr.w	r0, [r0, #256]	@ 0x100
 800b000:	4770      	bx	lr
 800b002:	bf00      	nop

0800b004 <STO_PLL_GetObservedBemfLevel>:
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  return ((MC_NULL == pHandle) ? 0 : pHandle->Obs_Bemf_Level);
#else
  return (pHandle->Obs_Bemf_Level);
#endif
}
 800b004:	f8d0 00fc 	ldr.w	r0, [r0, #252]	@ 0xfc
 800b008:	4770      	bx	lr
 800b00a:	bf00      	nop

0800b00c <STO_PLL_IsVarianceTight>:
  }
  else
  {
#endif
    const STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    tempStatus = pHdl->IsSpeedReliable;
 800b00c:	6803      	ldr	r3, [r0, #0]
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
  return (tempStatus);
}
 800b00e:	f893 00f5 	ldrb.w	r0, [r3, #245]	@ 0xf5
 800b012:	4770      	bx	lr

0800b014 <STO_PLL_ForceConvergency1>:
  }
  else
  {
#endif
    STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    pHdl->ForceConvergency = true;
 800b014:	6803      	ldr	r3, [r0, #0]
 800b016:	2201      	movs	r2, #1
 800b018:	f883 2122 	strb.w	r2, [r3, #290]	@ 0x122
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
}
 800b01c:	4770      	bx	lr
 800b01e:	bf00      	nop

0800b020 <STO_PLL_ForceConvergency2>:
  }
  else
  {
#endif
    STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    pHdl->ForceConvergency2 = true;
 800b020:	6803      	ldr	r3, [r0, #0]
 800b022:	2201      	movs	r2, #1
 800b024:	f883 2123 	strb.w	r2, [r3, #291]	@ 0x123
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
}
 800b028:	4770      	bx	lr
 800b02a:	bf00      	nop

0800b02c <STO_SetMinStartUpValidSpeedUnit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->MinStartUpValidSpeed = hMinStartUpValidSpeed;
 800b02c:	f8a0 1114 	strh.w	r1, [r0, #276]	@ 0x114
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
}
 800b030:	4770      	bx	lr
 800b032:	bf00      	nop

0800b034 <STO_SetDirection>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hForcedDirection = direction;
 800b034:	f880 1124 	strb.w	r1, [r0, #292]	@ 0x124
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
}
 800b038:	4770      	bx	lr
 800b03a:	bf00      	nop

0800b03c <VSS_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->_Super.bSpeedErrorNumber = 0U;
 800b03c:	2300      	movs	r3, #0
    pHandle->hRemainingStep = 0U;
    pHandle->hElAngleAccu = 0;

    pHandle->bTransitionStarted = false;
    pHandle->bTransitionEnded = false;
    pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 800b03e:	8ec2      	ldrh	r2, [r0, #54]	@ 0x36
    pHandle->_Super.bSpeedErrorNumber = 0U;
 800b040:	7003      	strb	r3, [r0, #0]
    pHandle->wElSpeedDpp32 = 0;
 800b042:	e9c0 3308 	strd	r3, r3, [r0, #32]
    pHandle->_Super.hElAngle = 0;
 800b046:	6043      	str	r3, [r0, #4]
    pHandle->_Super.hAvrMecSpeedUnit = 0;
 800b048:	60c3      	str	r3, [r0, #12]
    pHandle->_Super.hMecAccelUnitP = 0;
 800b04a:	8243      	strh	r3, [r0, #18]
    pHandle->hRemainingStep = 0U;
 800b04c:	8503      	strh	r3, [r0, #40]	@ 0x28
    pHandle->bTransitionStarted = false;
 800b04e:	8583      	strh	r3, [r0, #44]	@ 0x2c
    pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 800b050:	85c2      	strh	r2, [r0, #46]	@ 0x2e
    pHandle->hElAngleAccu = 0;
 800b052:	6303      	str	r3, [r0, #48]	@ 0x30

    pHandle->bCopyObserver = false;
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
}
 800b054:	4770      	bx	lr
 800b056:	bf00      	nop

0800b058 <VSS_Init>:
{
 800b058:	b508      	push	{r3, lr}
  VSS_Clear(pHandle);
 800b05a:	f7ff ffef 	bl	800b03c <VSS_Clear>
}
 800b05e:	bd08      	pop	{r3, pc}

0800b060 <VSS_CalcElAngle>:
    int16_t hAngleDiff;
    int32_t wAux;
    int16_t hAngleCorr;
    int16_t hSignCorr = 1;

    if (true == pHandle->bCopyObserver)
 800b060:	f890 2033 	ldrb.w	r2, [r0, #51]	@ 0x33
{
 800b064:	4603      	mov	r3, r0
    if (true == pHandle->bCopyObserver)
 800b066:	b11a      	cbz	r2, 800b070 <VSS_CalcElAngle+0x10>
    {
      hRetAngle = *(int16_t *)pInputVars_str;
 800b068:	f9b1 0000 	ldrsh.w	r0, [r1]
      {
        hRetAngle = pHandle->hElAngleAccu;
      }
    }

    pHandle->_Super.hElAngle = hRetAngle;
 800b06c:	8098      	strh	r0, [r3, #4]
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
  return (hRetAngle);
}
 800b06e:	4770      	bx	lr
{
 800b070:	b530      	push	{r4, r5, lr}
      pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 800b072:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 800b076:	8e00      	ldrh	r0, [r0, #48]	@ 0x30
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 800b078:	88dd      	ldrh	r5, [r3, #6]
      if (true == pHandle->bTransitionStarted)
 800b07a:	f893 402c 	ldrb.w	r4, [r3, #44]	@ 0x2c
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 800b07e:	785a      	ldrb	r2, [r3, #1]
 800b080:	fb9c f2f2 	sdiv	r2, ip, r2
      pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 800b084:	4460      	add	r0, ip
 800b086:	fa1f fe80 	uxth.w	lr, r0
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 800b08a:	442a      	add	r2, r5
      pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 800b08c:	b200      	sxth	r0, r0
 800b08e:	8618      	strh	r0, [r3, #48]	@ 0x30
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 800b090:	80da      	strh	r2, [r3, #6]
      if (true == pHandle->bTransitionStarted)
 800b092:	b1fc      	cbz	r4, 800b0d4 <VSS_CalcElAngle+0x74>
        if (0 == pHandle->hTransitionRemainingSteps)
 800b094:	f9b3 202e 	ldrsh.w	r2, [r3, #46]	@ 0x2e
 800b098:	b1f2      	cbz	r2, 800b0d8 <VSS_CalcElAngle+0x78>
          pHandle->hTransitionRemainingSteps--;
 800b09a:	3a01      	subs	r2, #1
 800b09c:	b212      	sxth	r2, r2
 800b09e:	85da      	strh	r2, [r3, #46]	@ 0x2e
          if (pHandle->_Super.hElSpeedDpp >= 0)
 800b0a0:	f1bc 0f00 	cmp.w	ip, #0
            hAngleDiff = *(int16_t *)pInputVars_str - pHandle->hElAngleAccu;
 800b0a4:	8809      	ldrh	r1, [r1, #0]
          if (pHandle->_Super.hElSpeedDpp >= 0)
 800b0a6:	db26      	blt.n	800b0f6 <VSS_CalcElAngle+0x96>
            hAngleDiff = *(int16_t *)pInputVars_str - pHandle->hElAngleAccu;
 800b0a8:	eba1 0e0e 	sub.w	lr, r1, lr
 800b0ac:	fa0f fe8e 	sxth.w	lr, lr
 800b0b0:	2501      	movs	r5, #1
          hAngleCorr = (int16_t)(wAux / pHandle->hTransitionSteps);
 800b0b2:	f9b3 4036 	ldrsh.w	r4, [r3, #54]	@ 0x36
          wAux = (int32_t)hAngleDiff * pHandle->hTransitionRemainingSteps;
 800b0b6:	fb0e f202 	mul.w	r2, lr, r2
          if (hAngleDiff >= 0)
 800b0ba:	f1be 0f00 	cmp.w	lr, #0
          hAngleCorr = (int16_t)(wAux / pHandle->hTransitionSteps);
 800b0be:	fb92 f2f4 	sdiv	r2, r2, r4
          hAngleCorr *= hSignCorr;
 800b0c2:	fb12 f205 	smulbb	r2, r2, r5
 800b0c6:	b292      	uxth	r2, r2
          if (hAngleDiff >= 0)
 800b0c8:	db0e      	blt.n	800b0e8 <VSS_CalcElAngle+0x88>
            pHandle->bTransitionLocked = true;
 800b0ca:	2001      	movs	r0, #1
            hRetAngle = *(int16_t *)pInputVars_str - hAngleCorr;
 800b0cc:	1a8a      	subs	r2, r1, r2
            pHandle->bTransitionLocked = true;
 800b0ce:	f883 0032 	strb.w	r0, [r3, #50]	@ 0x32
            hRetAngle = *(int16_t *)pInputVars_str - hAngleCorr;
 800b0d2:	b210      	sxth	r0, r2
    pHandle->_Super.hElAngle = hRetAngle;
 800b0d4:	8098      	strh	r0, [r3, #4]
}
 800b0d6:	bd30      	pop	{r4, r5, pc}
          hRetAngle = *(int16_t *)pInputVars_str;
 800b0d8:	f9b1 0000 	ldrsh.w	r0, [r1]
          pHandle->_Super.bSpeedErrorNumber = 0U;
 800b0dc:	701a      	strb	r2, [r3, #0]
          pHandle->bTransitionEnded = true;
 800b0de:	2401      	movs	r4, #1
 800b0e0:	f883 402d 	strb.w	r4, [r3, #45]	@ 0x2d
    pHandle->_Super.hElAngle = hRetAngle;
 800b0e4:	8098      	strh	r0, [r3, #4]
}
 800b0e6:	bd30      	pop	{r4, r5, pc}
            if (false == pHandle->bTransitionLocked)
 800b0e8:	f893 4032 	ldrb.w	r4, [r3, #50]	@ 0x32
 800b0ec:	2c00      	cmp	r4, #0
 800b0ee:	d0f1      	beq.n	800b0d4 <VSS_CalcElAngle+0x74>
              hRetAngle = *(int16_t *)pInputVars_str + hAngleCorr;
 800b0f0:	440a      	add	r2, r1
 800b0f2:	b210      	sxth	r0, r2
 800b0f4:	e7ee      	b.n	800b0d4 <VSS_CalcElAngle+0x74>
            hAngleDiff = pHandle->hElAngleAccu - *(int16_t *)pInputVars_str;
 800b0f6:	ebae 0e01 	sub.w	lr, lr, r1
 800b0fa:	fa0f fe8e 	sxth.w	lr, lr
 800b0fe:	f64f 75ff 	movw	r5, #65535	@ 0xffff
 800b102:	e7d6      	b.n	800b0b2 <VSS_CalcElAngle+0x52>

0800b104 <VSS_CalcAvrgMecSpeedUnit>:
    SpeedSensorReliability = false;
  }
  else
  {
#endif
    if (pHandle->hRemainingStep > 1u)
 800b104:	8d02      	ldrh	r2, [r0, #40]	@ 0x28
 800b106:	2a01      	cmp	r2, #1
{
 800b108:	4603      	mov	r3, r0
    if (pHandle->hRemainingStep > 1u)
 800b10a:	d922      	bls.n	800b152 <VSS_CalcAvrgMecSpeedUnit+0x4e>
{
 800b10c:	b410      	push	{r4}
    {
      pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 800b10e:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 800b110:	6a1c      	ldr	r4, [r3, #32]
      pHandle->_Super.hElSpeedDpp = (int16_t)(pHandle->wElSpeedDpp32 / 65536);
#endif

      /* Convert dpp into MecUnit */
      *hMecSpeedUnit = (int16_t)((((int32_t)pHandle->_Super.hElSpeedDpp)
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 800b112:	8b5a      	ldrh	r2, [r3, #26]
      pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 800b114:	4420      	add	r0, r4
      pHandle->_Super.hElSpeedDpp = (int16_t)(pHandle->wElSpeedDpp32 >> 16);
 800b116:	ea4f 4c20 	mov.w	ip, r0, asr #16
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 800b11a:	69dc      	ldr	r4, [r3, #28]
      pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 800b11c:	6258      	str	r0, [r3, #36]	@ 0x24
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 800b11e:	fb0c f202 	mul.w	r2, ip, r2
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 800b122:	7858      	ldrb	r0, [r3, #1]
      pHandle->_Super.hElSpeedDpp = (int16_t)(pHandle->wElSpeedDpp32 >> 16);
 800b124:	f8a3 c00e 	strh.w	ip, [r3, #14]
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 800b128:	eb02 0282 	add.w	r2, r2, r2, lsl #2
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 800b12c:	fb04 f000 	mul.w	r0, r4, r0
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 800b130:	0052      	lsls	r2, r2, #1
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 800b132:	fb92 f2f0 	sdiv	r2, r2, r0
      *hMecSpeedUnit = (int16_t)((((int32_t)pHandle->_Super.hElSpeedDpp)
 800b136:	b212      	sxth	r2, r2
 800b138:	800a      	strh	r2, [r1, #0]
      pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
      pHandle->hRemainingStep--;
 800b13a:	8d18      	ldrh	r0, [r3, #40]	@ 0x28
      pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 800b13c:	819a      	strh	r2, [r3, #12]
      pHandle->hRemainingStep--;
 800b13e:	1e42      	subs	r2, r0, #1
    else
    {
      *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
    }
    /* If the transition is not done yet, we already know that speed is not reliable */
    if (false == pHandle->bTransitionEnded)
 800b140:	f893 002d 	ldrb.w	r0, [r3, #45]	@ 0x2d
      pHandle->hRemainingStep--;
 800b144:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (false == pHandle->bTransitionEnded)
 800b146:	b970      	cbnz	r0, 800b166 <VSS_CalcAvrgMecSpeedUnit+0x62>
    {
      pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 800b148:	78da      	ldrb	r2, [r3, #3]
 800b14a:	701a      	strb	r2, [r3, #0]
    }
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
  return (SpeedSensorReliability);
}
 800b14c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b150:	4770      	bx	lr
    else if (1U == pHandle->hRemainingStep)
 800b152:	d00d      	beq.n	800b170 <VSS_CalcAvrgMecSpeedUnit+0x6c>
      *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 800b154:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
    if (false == pHandle->bTransitionEnded)
 800b158:	f893 002d 	ldrb.w	r0, [r3, #45]	@ 0x2d
      *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 800b15c:	800a      	strh	r2, [r1, #0]
    if (false == pHandle->bTransitionEnded)
 800b15e:	bb00      	cbnz	r0, 800b1a2 <VSS_CalcAvrgMecSpeedUnit+0x9e>
      pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 800b160:	78da      	ldrb	r2, [r3, #3]
 800b162:	701a      	strb	r2, [r3, #0]
}
 800b164:	4770      	bx	lr
 800b166:	f85d 4b04 	ldr.w	r4, [sp], #4
      SpeedSensorReliability = SPD_IsMecSpeedReliable(&pHandle->_Super, hMecSpeedUnit);
 800b16a:	4618      	mov	r0, r3
 800b16c:	f7ff bb62 	b.w	800a834 <SPD_IsMecSpeedReliable>
      *hMecSpeedUnit = pHandle->hFinalMecSpeedUnit;
 800b170:	f9b0 c02a 	ldrsh.w	ip, [r0, #42]	@ 0x2a
 800b174:	f8a1 c000 	strh.w	ip, [r1]
                                          / (((int32_t)SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800b178:	8b42      	ldrh	r2, [r0, #26]
      pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)*hMecSpeedUnit) * ((int32_t)pHandle->_Super.DPPConvFactor))
 800b17a:	69c0      	ldr	r0, [r0, #28]
      pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 800b17c:	f8a3 c00c 	strh.w	ip, [r3, #12]
                                          / (((int32_t)SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800b180:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800b184:	0052      	lsls	r2, r2, #1
      pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)*hMecSpeedUnit) * ((int32_t)pHandle->_Super.DPPConvFactor))
 800b186:	fb00 f00c 	mul.w	r0, r0, ip
                                          / (((int32_t)SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800b18a:	fb90 f0f2 	sdiv	r0, r0, r2
      pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 800b18e:	785a      	ldrb	r2, [r3, #1]
 800b190:	fb12 f200 	smulbb	r2, r2, r0
      pHandle->hRemainingStep = 0U;
 800b194:	2000      	movs	r0, #0
 800b196:	8518      	strh	r0, [r3, #40]	@ 0x28
    if (false == pHandle->bTransitionEnded)
 800b198:	f893 002d 	ldrb.w	r0, [r3, #45]	@ 0x2d
      pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 800b19c:	81da      	strh	r2, [r3, #14]
    if (false == pHandle->bTransitionEnded)
 800b19e:	2800      	cmp	r0, #0
 800b1a0:	d0de      	beq.n	800b160 <VSS_CalcAvrgMecSpeedUnit+0x5c>
      SpeedSensorReliability = SPD_IsMecSpeedReliable(&pHandle->_Super, hMecSpeedUnit);
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	f7ff bb46 	b.w	800a834 <SPD_IsMecSpeedReliable>

0800b1a8 <VSS_SetMecAngle>:
  }
  else
  {
#endif
    pHandle->hElAngleAccu = hMecAngle;
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 800b1a8:	7843      	ldrb	r3, [r0, #1]
    pHandle->hElAngleAccu = hMecAngle;
 800b1aa:	8601      	strh	r1, [r0, #48]	@ 0x30
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 800b1ac:	fb91 f3f3 	sdiv	r3, r1, r3
    pHandle->_Super.hElAngle = hMecAngle;
 800b1b0:	8081      	strh	r1, [r0, #4]
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 800b1b2:	80c3      	strh	r3, [r0, #6]
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
}
 800b1b4:	4770      	bx	lr
 800b1b6:	bf00      	nop

0800b1b8 <VSS_SetMecAcceleration>:
    int32_t wMecAccDppP32;
    uint16_t hNbrStep;
    int16_t hCurrentMecSpeedDpp;
    int16_t hFinalMecSpeedDpp;

    if (false == pHandle->bTransitionStarted)
 800b1b8:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 800b1bc:	b9a3      	cbnz	r3, 800b1e8 <VSS_SetMecAcceleration+0x30>
        pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;

        pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)hFinalMecSpeedUnit)
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
                                              / (((int32_t)SPEED_UNIT)
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800b1be:	8b43      	ldrh	r3, [r0, #26]
{
 800b1c0:	b510      	push	{r4, lr}
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
 800b1c2:	69c4      	ldr	r4, [r0, #28]

        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 800b1c4:	f890 e001 	ldrb.w	lr, [r0, #1]
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800b1c8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
 800b1cc:	fb04 fc01 	mul.w	ip, r4, r1
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800b1d0:	005b      	lsls	r3, r3, #1
                                              / (((int32_t)SPEED_UNIT)
 800b1d2:	fb9c fcf3 	sdiv	ip, ip, r3
      if (0U == hDurationms)
 800b1d6:	b942      	cbnz	r2, 800b1ea <VSS_SetMecAcceleration+0x32>
        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 800b1d8:	fb1c fc0e 	smulbb	ip, ip, lr
        pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;
 800b1dc:	8181      	strh	r1, [r0, #12]
        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 800b1de:	f8a0 c00e 	strh.w	ip, [r0, #14]

        pHandle->hRemainingStep = 0U;
 800b1e2:	8502      	strh	r2, [r0, #40]	@ 0x28

        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800b1e4:	8541      	strh	r1, [r0, #42]	@ 0x2a
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
}
 800b1e6:	bd10      	pop	{r4, pc}
 800b1e8:	4770      	bx	lr
        hNbrStep = (uint16_t)((((uint32_t)hDurationms) * ((uint32_t)pHandle->hSpeedSamplingFreqHz)) / 1000U);
 800b1ea:	8e83      	ldrh	r3, [r0, #52]	@ 0x34
 800b1ec:	fb02 f303 	mul.w	r3, r2, r3
 800b1f0:	4a0e      	ldr	r2, [pc, #56]	@ (800b22c <VSS_SetMecAcceleration+0x74>)
 800b1f2:	fba2 2303 	umull	r2, r3, r2, r3
 800b1f6:	f3c3 138f 	ubfx	r3, r3, #6, #16
        hNbrStep++;
 800b1fa:	3301      	adds	r3, #1
 800b1fc:	b29b      	uxth	r3, r3
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 800b1fe:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
        pHandle->hRemainingStep = hNbrStep;
 800b202:	8503      	strh	r3, [r0, #40]	@ 0x28
        if (0U == hNbrStep)
 800b204:	b91b      	cbnz	r3, 800b20e <VSS_SetMecAcceleration+0x56>
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 800b206:	0412      	lsls	r2, r2, #16
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800b208:	8541      	strh	r1, [r0, #42]	@ 0x2a
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 800b20a:	6242      	str	r2, [r0, #36]	@ 0x24
}
 800b20c:	bd10      	pop	{r4, pc}
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 800b20e:	fb92 f4fe 	sdiv	r4, r2, lr
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 800b212:	ebac 0c04 	sub.w	ip, ip, r4
                         * ((int32_t)65536)) / ((int32_t )hNbrStep);
 800b216:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 800b21a:	0412      	lsls	r2, r2, #16
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 800b21c:	fb9c f3f3 	sdiv	r3, ip, r3
          pHandle->wElAccDppP32 = wMecAccDppP32 * ((int16_t)pHandle->_Super.bElToMecRatio);
 800b220:	fb0e f303 	mul.w	r3, lr, r3
 800b224:	6203      	str	r3, [r0, #32]
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800b226:	8541      	strh	r1, [r0, #42]	@ 0x2a
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 800b228:	6242      	str	r2, [r0, #36]	@ 0x24
    }
 800b22a:	e7ef      	b.n	800b20c <VSS_SetMecAcceleration+0x54>
 800b22c:	10624dd3 	.word	0x10624dd3

0800b230 <VSS_SetStartTransition>:
    /* nothing to do */
  }
  else
  {
#endif
    if (true == bCommand)
 800b230:	b151      	cbz	r1, 800b248 <VSS_SetStartTransition+0x18>
    {
      pHandle->bTransitionStarted = true;

      if (0 == pHandle->hTransitionSteps)
 800b232:	f9b0 3036 	ldrsh.w	r3, [r0, #54]	@ 0x36
      pHandle->bTransitionStarted = true;
 800b236:	2201      	movs	r2, #1
 800b238:	f880 202c 	strb.w	r2, [r0, #44]	@ 0x2c
      if (0 == pHandle->hTransitionSteps)
 800b23c:	b923      	cbnz	r3, 800b248 <VSS_SetStartTransition+0x18>
      {
        pHandle->bTransitionEnded = true;
 800b23e:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d
        pHandle->_Super.bSpeedErrorNumber = 0U;
 800b242:	7003      	strb	r3, [r0, #0]
        bAux = false;
 800b244:	4618      	mov	r0, r3
    }
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
  return (bAux);
}
 800b246:	4770      	bx	lr
  bool bAux = true;
 800b248:	2001      	movs	r0, #1
 800b24a:	4770      	bx	lr

0800b24c <VSS_TransitionEnded>:
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  return ((MC_NULL == pHandle) ? false : pHandle->bTransitionEnded);
#else
  return (pHandle->bTransitionEnded);
#endif
}
 800b24c:	f890 002d 	ldrb.w	r0, [r0, #45]	@ 0x2d
 800b250:	4770      	bx	lr
 800b252:	bf00      	nop

0800b254 <memset>:
 800b254:	4402      	add	r2, r0
 800b256:	4603      	mov	r3, r0
 800b258:	4293      	cmp	r3, r2
 800b25a:	d100      	bne.n	800b25e <memset+0xa>
 800b25c:	4770      	bx	lr
 800b25e:	f803 1b01 	strb.w	r1, [r3], #1
 800b262:	e7f9      	b.n	800b258 <memset+0x4>

0800b264 <__libc_init_array>:
 800b264:	b570      	push	{r4, r5, r6, lr}
 800b266:	4d0d      	ldr	r5, [pc, #52]	@ (800b29c <__libc_init_array+0x38>)
 800b268:	4c0d      	ldr	r4, [pc, #52]	@ (800b2a0 <__libc_init_array+0x3c>)
 800b26a:	1b64      	subs	r4, r4, r5
 800b26c:	10a4      	asrs	r4, r4, #2
 800b26e:	2600      	movs	r6, #0
 800b270:	42a6      	cmp	r6, r4
 800b272:	d109      	bne.n	800b288 <__libc_init_array+0x24>
 800b274:	4d0b      	ldr	r5, [pc, #44]	@ (800b2a4 <__libc_init_array+0x40>)
 800b276:	4c0c      	ldr	r4, [pc, #48]	@ (800b2a8 <__libc_init_array+0x44>)
 800b278:	f000 f85e 	bl	800b338 <_init>
 800b27c:	1b64      	subs	r4, r4, r5
 800b27e:	10a4      	asrs	r4, r4, #2
 800b280:	2600      	movs	r6, #0
 800b282:	42a6      	cmp	r6, r4
 800b284:	d105      	bne.n	800b292 <__libc_init_array+0x2e>
 800b286:	bd70      	pop	{r4, r5, r6, pc}
 800b288:	f855 3b04 	ldr.w	r3, [r5], #4
 800b28c:	4798      	blx	r3
 800b28e:	3601      	adds	r6, #1
 800b290:	e7ee      	b.n	800b270 <__libc_init_array+0xc>
 800b292:	f855 3b04 	ldr.w	r3, [r5], #4
 800b296:	4798      	blx	r3
 800b298:	3601      	adds	r6, #1
 800b29a:	e7f2      	b.n	800b282 <__libc_init_array+0x1e>
 800b29c:	0800b7c4 	.word	0x0800b7c4
 800b2a0:	0800b7c4 	.word	0x0800b7c4
 800b2a4:	0800b7c4 	.word	0x0800b7c4
 800b2a8:	0800b7c8 	.word	0x0800b7c8

0800b2ac <round>:
 800b2ac:	ec51 0b10 	vmov	r0, r1, d0
 800b2b0:	b570      	push	{r4, r5, r6, lr}
 800b2b2:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800b2b6:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 800b2ba:	2a13      	cmp	r2, #19
 800b2bc:	460b      	mov	r3, r1
 800b2be:	4605      	mov	r5, r0
 800b2c0:	dc1b      	bgt.n	800b2fa <round+0x4e>
 800b2c2:	2a00      	cmp	r2, #0
 800b2c4:	da0b      	bge.n	800b2de <round+0x32>
 800b2c6:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800b2ca:	3201      	adds	r2, #1
 800b2cc:	bf04      	itt	eq
 800b2ce:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 800b2d2:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	4619      	mov	r1, r3
 800b2da:	4610      	mov	r0, r2
 800b2dc:	e015      	b.n	800b30a <round+0x5e>
 800b2de:	4c15      	ldr	r4, [pc, #84]	@ (800b334 <round+0x88>)
 800b2e0:	4114      	asrs	r4, r2
 800b2e2:	ea04 0601 	and.w	r6, r4, r1
 800b2e6:	4306      	orrs	r6, r0
 800b2e8:	d00f      	beq.n	800b30a <round+0x5e>
 800b2ea:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800b2ee:	fa41 f202 	asr.w	r2, r1, r2
 800b2f2:	4413      	add	r3, r2
 800b2f4:	ea23 0304 	bic.w	r3, r3, r4
 800b2f8:	e7ed      	b.n	800b2d6 <round+0x2a>
 800b2fa:	2a33      	cmp	r2, #51	@ 0x33
 800b2fc:	dd08      	ble.n	800b310 <round+0x64>
 800b2fe:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800b302:	d102      	bne.n	800b30a <round+0x5e>
 800b304:	4602      	mov	r2, r0
 800b306:	f7f8 f9ed 	bl	80036e4 <__adddf3>
 800b30a:	ec41 0b10 	vmov	d0, r0, r1
 800b30e:	bd70      	pop	{r4, r5, r6, pc}
 800b310:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 800b314:	f04f 34ff 	mov.w	r4, #4294967295
 800b318:	40f4      	lsrs	r4, r6
 800b31a:	4204      	tst	r4, r0
 800b31c:	d0f5      	beq.n	800b30a <round+0x5e>
 800b31e:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 800b322:	2201      	movs	r2, #1
 800b324:	408a      	lsls	r2, r1
 800b326:	1952      	adds	r2, r2, r5
 800b328:	bf28      	it	cs
 800b32a:	3301      	addcs	r3, #1
 800b32c:	ea22 0204 	bic.w	r2, r2, r4
 800b330:	e7d2      	b.n	800b2d8 <round+0x2c>
 800b332:	bf00      	nop
 800b334:	000fffff 	.word	0x000fffff

0800b338 <_init>:
 800b338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b33a:	bf00      	nop
 800b33c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b33e:	bc08      	pop	{r3}
 800b340:	469e      	mov	lr, r3
 800b342:	4770      	bx	lr

0800b344 <_fini>:
 800b344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b346:	bf00      	nop
 800b348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b34a:	bc08      	pop	{r3}
 800b34c:	469e      	mov	lr, r3
 800b34e:	4770      	bx	lr
