
TorqueMode-10VV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000726c  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  08007434  08007434  00008434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007850  08007850  000093a8  2**0
                  CONTENTS
  4 .ARM          00000008  08007850  08007850  00008850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007858  08007858  000093a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007858  08007858  00008858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800785c  0800785c  0000885c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003a8  20000000  08007860  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014f8  200003a8  08007c08  000093a8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200018a0  08007c08  000098a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000093a8  2**0
                  CONTENTS, READONLY
 12 .debug_line   00041726  00000000  00000000  000093d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 0000008a  00000000  00000000  0004aafe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   000388bc  00000000  00000000  0004ab88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000876b  00000000  00000000  00083444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001d50  00000000  00000000  0008bbb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000f6e5c  00000000  00000000  0008d900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00002847  00000000  00000000  0018475c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loclists 00016f6c  00000000  00000000  00186fa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002e08c  00000000  00000000  0019df0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001cbf9b  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00004d38  00000000  00000000  001cbfe0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200003a8 	.word	0x200003a8
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800741c 	.word	0x0800741c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200003ac 	.word	0x200003ac
 8000204:	0800741c 	.word	0x0800741c

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b96a 	b.w	80004f4 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	460c      	mov	r4, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14e      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000244:	4694      	mov	ip, r2
 8000246:	458c      	cmp	ip, r1
 8000248:	4686      	mov	lr, r0
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	d962      	bls.n	8000316 <__udivmoddi4+0xde>
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0320 	rsb	r3, r2, #32
 8000256:	4091      	lsls	r1, r2
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000260:	4319      	orrs	r1, r3
 8000262:	fa00 fe02 	lsl.w	lr, r0, r2
 8000266:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800026a:	fa1f f68c 	uxth.w	r6, ip
 800026e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000272:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000276:	fb07 1114 	mls	r1, r7, r4, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb04 f106 	mul.w	r1, r4, r6
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f104 30ff 	add.w	r0, r4, #4294967295
 800028e:	f080 8112 	bcs.w	80004b6 <__udivmoddi4+0x27e>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 810f 	bls.w	80004b6 <__udivmoddi4+0x27e>
 8000298:	3c02      	subs	r4, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a59      	subs	r1, r3, r1
 800029e:	fa1f f38e 	uxth.w	r3, lr
 80002a2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a6:	fb07 1110 	mls	r1, r7, r0, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb00 f606 	mul.w	r6, r0, r6
 80002b2:	429e      	cmp	r6, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x94>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f100 31ff 	add.w	r1, r0, #4294967295
 80002be:	f080 80fc 	bcs.w	80004ba <__udivmoddi4+0x282>
 80002c2:	429e      	cmp	r6, r3
 80002c4:	f240 80f9 	bls.w	80004ba <__udivmoddi4+0x282>
 80002c8:	4463      	add	r3, ip
 80002ca:	3802      	subs	r0, #2
 80002cc:	1b9b      	subs	r3, r3, r6
 80002ce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002d2:	2100      	movs	r1, #0
 80002d4:	b11d      	cbz	r5, 80002de <__udivmoddi4+0xa6>
 80002d6:	40d3      	lsrs	r3, r2
 80002d8:	2200      	movs	r2, #0
 80002da:	e9c5 3200 	strd	r3, r2, [r5]
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d905      	bls.n	80002f2 <__udivmoddi4+0xba>
 80002e6:	b10d      	cbz	r5, 80002ec <__udivmoddi4+0xb4>
 80002e8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ec:	2100      	movs	r1, #0
 80002ee:	4608      	mov	r0, r1
 80002f0:	e7f5      	b.n	80002de <__udivmoddi4+0xa6>
 80002f2:	fab3 f183 	clz	r1, r3
 80002f6:	2900      	cmp	r1, #0
 80002f8:	d146      	bne.n	8000388 <__udivmoddi4+0x150>
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xcc>
 80002fe:	4290      	cmp	r0, r2
 8000300:	f0c0 80f0 	bcc.w	80004e4 <__udivmoddi4+0x2ac>
 8000304:	1a86      	subs	r6, r0, r2
 8000306:	eb64 0303 	sbc.w	r3, r4, r3
 800030a:	2001      	movs	r0, #1
 800030c:	2d00      	cmp	r5, #0
 800030e:	d0e6      	beq.n	80002de <__udivmoddi4+0xa6>
 8000310:	e9c5 6300 	strd	r6, r3, [r5]
 8000314:	e7e3      	b.n	80002de <__udivmoddi4+0xa6>
 8000316:	2a00      	cmp	r2, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x204>
 800031c:	eba1 040c 	sub.w	r4, r1, ip
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	fa1f f78c 	uxth.w	r7, ip
 8000328:	2101      	movs	r1, #1
 800032a:	fbb4 f6f8 	udiv	r6, r4, r8
 800032e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000332:	fb08 4416 	mls	r4, r8, r6, r4
 8000336:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033a:	fb07 f006 	mul.w	r0, r7, r6
 800033e:	4298      	cmp	r0, r3
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x11c>
 8000342:	eb1c 0303 	adds.w	r3, ip, r3
 8000346:	f106 34ff 	add.w	r4, r6, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x11a>
 800034c:	4298      	cmp	r0, r3
 800034e:	f200 80cd 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 8000352:	4626      	mov	r6, r4
 8000354:	1a1c      	subs	r4, r3, r0
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb4 f0f8 	udiv	r0, r4, r8
 800035e:	fb08 4410 	mls	r4, r8, r0, r4
 8000362:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000366:	fb00 f707 	mul.w	r7, r0, r7
 800036a:	429f      	cmp	r7, r3
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x148>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 34ff 	add.w	r4, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x146>
 8000378:	429f      	cmp	r7, r3
 800037a:	f200 80b0 	bhi.w	80004de <__udivmoddi4+0x2a6>
 800037e:	4620      	mov	r0, r4
 8000380:	1bdb      	subs	r3, r3, r7
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0x9c>
 8000388:	f1c1 0620 	rsb	r6, r1, #32
 800038c:	408b      	lsls	r3, r1
 800038e:	fa22 f706 	lsr.w	r7, r2, r6
 8000392:	431f      	orrs	r7, r3
 8000394:	fa20 fc06 	lsr.w	ip, r0, r6
 8000398:	fa04 f301 	lsl.w	r3, r4, r1
 800039c:	ea43 030c 	orr.w	r3, r3, ip
 80003a0:	40f4      	lsrs	r4, r6
 80003a2:	fa00 f801 	lsl.w	r8, r0, r1
 80003a6:	0c38      	lsrs	r0, r7, #16
 80003a8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003ac:	fbb4 fef0 	udiv	lr, r4, r0
 80003b0:	fa1f fc87 	uxth.w	ip, r7
 80003b4:	fb00 441e 	mls	r4, r0, lr, r4
 80003b8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003bc:	fb0e f90c 	mul.w	r9, lr, ip
 80003c0:	45a1      	cmp	r9, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	d90a      	bls.n	80003de <__udivmoddi4+0x1a6>
 80003c8:	193c      	adds	r4, r7, r4
 80003ca:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ce:	f080 8084 	bcs.w	80004da <__udivmoddi4+0x2a2>
 80003d2:	45a1      	cmp	r9, r4
 80003d4:	f240 8081 	bls.w	80004da <__udivmoddi4+0x2a2>
 80003d8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003dc:	443c      	add	r4, r7
 80003de:	eba4 0409 	sub.w	r4, r4, r9
 80003e2:	fa1f f983 	uxth.w	r9, r3
 80003e6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ea:	fb00 4413 	mls	r4, r0, r3, r4
 80003ee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003f2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d907      	bls.n	800040a <__udivmoddi4+0x1d2>
 80003fa:	193c      	adds	r4, r7, r4
 80003fc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000400:	d267      	bcs.n	80004d2 <__udivmoddi4+0x29a>
 8000402:	45a4      	cmp	ip, r4
 8000404:	d965      	bls.n	80004d2 <__udivmoddi4+0x29a>
 8000406:	3b02      	subs	r3, #2
 8000408:	443c      	add	r4, r7
 800040a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040e:	fba0 9302 	umull	r9, r3, r0, r2
 8000412:	eba4 040c 	sub.w	r4, r4, ip
 8000416:	429c      	cmp	r4, r3
 8000418:	46ce      	mov	lr, r9
 800041a:	469c      	mov	ip, r3
 800041c:	d351      	bcc.n	80004c2 <__udivmoddi4+0x28a>
 800041e:	d04e      	beq.n	80004be <__udivmoddi4+0x286>
 8000420:	b155      	cbz	r5, 8000438 <__udivmoddi4+0x200>
 8000422:	ebb8 030e 	subs.w	r3, r8, lr
 8000426:	eb64 040c 	sbc.w	r4, r4, ip
 800042a:	fa04 f606 	lsl.w	r6, r4, r6
 800042e:	40cb      	lsrs	r3, r1
 8000430:	431e      	orrs	r6, r3
 8000432:	40cc      	lsrs	r4, r1
 8000434:	e9c5 6400 	strd	r6, r4, [r5]
 8000438:	2100      	movs	r1, #0
 800043a:	e750      	b.n	80002de <__udivmoddi4+0xa6>
 800043c:	f1c2 0320 	rsb	r3, r2, #32
 8000440:	fa20 f103 	lsr.w	r1, r0, r3
 8000444:	fa0c fc02 	lsl.w	ip, ip, r2
 8000448:	fa24 f303 	lsr.w	r3, r4, r3
 800044c:	4094      	lsls	r4, r2
 800044e:	430c      	orrs	r4, r1
 8000450:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000454:	fa00 fe02 	lsl.w	lr, r0, r2
 8000458:	fa1f f78c 	uxth.w	r7, ip
 800045c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000460:	fb08 3110 	mls	r1, r8, r0, r3
 8000464:	0c23      	lsrs	r3, r4, #16
 8000466:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046a:	fb00 f107 	mul.w	r1, r0, r7
 800046e:	4299      	cmp	r1, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x24c>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 36ff 	add.w	r6, r0, #4294967295
 800047a:	d22c      	bcs.n	80004d6 <__udivmoddi4+0x29e>
 800047c:	4299      	cmp	r1, r3
 800047e:	d92a      	bls.n	80004d6 <__udivmoddi4+0x29e>
 8000480:	3802      	subs	r0, #2
 8000482:	4463      	add	r3, ip
 8000484:	1a5b      	subs	r3, r3, r1
 8000486:	b2a4      	uxth	r4, r4
 8000488:	fbb3 f1f8 	udiv	r1, r3, r8
 800048c:	fb08 3311 	mls	r3, r8, r1, r3
 8000490:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000494:	fb01 f307 	mul.w	r3, r1, r7
 8000498:	42a3      	cmp	r3, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x276>
 800049c:	eb1c 0404 	adds.w	r4, ip, r4
 80004a0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a4:	d213      	bcs.n	80004ce <__udivmoddi4+0x296>
 80004a6:	42a3      	cmp	r3, r4
 80004a8:	d911      	bls.n	80004ce <__udivmoddi4+0x296>
 80004aa:	3902      	subs	r1, #2
 80004ac:	4464      	add	r4, ip
 80004ae:	1ae4      	subs	r4, r4, r3
 80004b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b4:	e739      	b.n	800032a <__udivmoddi4+0xf2>
 80004b6:	4604      	mov	r4, r0
 80004b8:	e6f0      	b.n	800029c <__udivmoddi4+0x64>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e706      	b.n	80002cc <__udivmoddi4+0x94>
 80004be:	45c8      	cmp	r8, r9
 80004c0:	d2ae      	bcs.n	8000420 <__udivmoddi4+0x1e8>
 80004c2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ca:	3801      	subs	r0, #1
 80004cc:	e7a8      	b.n	8000420 <__udivmoddi4+0x1e8>
 80004ce:	4631      	mov	r1, r6
 80004d0:	e7ed      	b.n	80004ae <__udivmoddi4+0x276>
 80004d2:	4603      	mov	r3, r0
 80004d4:	e799      	b.n	800040a <__udivmoddi4+0x1d2>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e7d4      	b.n	8000484 <__udivmoddi4+0x24c>
 80004da:	46d6      	mov	lr, sl
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1a6>
 80004de:	4463      	add	r3, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e74d      	b.n	8000380 <__udivmoddi4+0x148>
 80004e4:	4606      	mov	r6, r0
 80004e6:	4623      	mov	r3, r4
 80004e8:	4608      	mov	r0, r1
 80004ea:	e70f      	b.n	800030c <__udivmoddi4+0xd4>
 80004ec:	3e02      	subs	r6, #2
 80004ee:	4463      	add	r3, ip
 80004f0:	e730      	b.n	8000354 <__udivmoddi4+0x11c>
 80004f2:	bf00      	nop

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80004f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000530 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80004fc:	480d      	ldr	r0, [pc, #52]	@ (8000534 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80004fe:	490e      	ldr	r1, [pc, #56]	@ (8000538 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000500:	4a0e      	ldr	r2, [pc, #56]	@ (800053c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000502:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000504:	e002      	b.n	800050c <LoopCopyDataInit>

08000506 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000506:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000508:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800050a:	3304      	adds	r3, #4

0800050c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800050c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800050e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000510:	d3f9      	bcc.n	8000506 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000512:	4a0b      	ldr	r2, [pc, #44]	@ (8000540 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000514:	4c0b      	ldr	r4, [pc, #44]	@ (8000544 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000516:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000518:	e001      	b.n	800051e <LoopFillZerobss>

0800051a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800051a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800051c:	3204      	adds	r2, #4

0800051e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800051e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000520:	d3fb      	bcc.n	800051a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000522:	f003 fc0b 	bl	8003d3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000526:	f006 ff47 	bl	80073b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800052a:	f000 fcf5 	bl	8000f18 <main>
  bx  lr    
 800052e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000530:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000534:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000538:	200003a8 	.word	0x200003a8
  ldr r2, =_sidata
 800053c:	08007860 	.word	0x08007860
  ldr r2, =_sbss
 8000540:	200003a8 	.word	0x200003a8
  ldr r4, =_ebss
 8000544:	200018a0 	.word	0x200018a0

08000548 <BusFault_Handler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000548:	e7fe      	b.n	8000548 <BusFault_Handler>
	...

0800054c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800054c:	b510      	push	{r4, lr}
 800054e:	b08c      	sub	sp, #48	@ 0x30

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000550:	2220      	movs	r2, #32
 8000552:	2100      	movs	r1, #0
 8000554:	a804      	add	r0, sp, #16
 8000556:	f006 ff27 	bl	80073a8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800055a:	4830      	ldr	r0, [pc, #192]	@ (800061c <MX_ADC1_Init+0xd0>)
 800055c:	4a30      	ldr	r2, [pc, #192]	@ (8000620 <MX_ADC1_Init+0xd4>)
 800055e:	6002      	str	r2, [r0, #0]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000560:	2300      	movs	r3, #0
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000562:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
  ADC_ChannelConfTypeDef sConfig = {0};
 8000566:	e9cd 3300 	strd	r3, r3, [sp]
 800056a:	e9cd 3302 	strd	r3, r3, [sp, #8]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800056e:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = ENABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000570:	7603      	strb	r3, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000572:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000576:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
  hadc1.Init.NbrOfConversion = 1;
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000578:	f880 3030 	strb.w	r3, [r0, #48]	@ 0x30
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800057c:	4b29      	ldr	r3, [pc, #164]	@ (8000624 <MX_ADC1_Init+0xd8>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800057e:	6042      	str	r2, [r0, #4]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000580:	6283      	str	r3, [r0, #40]	@ 0x28
  hadc1.Init.ScanConvMode = ENABLE;
 8000582:	2201      	movs	r2, #1
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000584:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  hadc1.Init.ScanConvMode = ENABLE;
 8000588:	6102      	str	r2, [r0, #16]
  hadc1.Init.NbrOfConversion = 1;
 800058a:	61c2      	str	r2, [r0, #28]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800058c:	6142      	str	r2, [r0, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 800058e:	60c3      	str	r3, [r0, #12]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000590:	f003 fc40 	bl	8003e14 <HAL_ADC_Init>
 8000594:	bb90      	cbnz	r0, 80005fc <MX_ADC1_Init+0xb0>

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_0;
  sConfigInjected.InjectedRank = 1;
  sConfigInjected.InjectedNbrOfConversion = 3;
 8000596:	2103      	movs	r1, #3
 8000598:	9108      	str	r1, [sp, #32]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_15CYCLES;
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_RISING;
 800059a:	f44f 1180 	mov.w	r1, #1048576	@ 0x100000
  sConfigInjected.InjectedChannel = ADC_CHANNEL_0;
 800059e:	2300      	movs	r3, #0
  sConfigInjected.InjectedRank = 1;
 80005a0:	2201      	movs	r2, #1
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_RISING;
 80005a2:	910b      	str	r1, [sp, #44]	@ 0x2c
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
  sConfigInjected.AutoInjectedConv = DISABLE;
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
  sConfigInjected.InjectedOffset = 0;
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80005a4:	481d      	ldr	r0, [pc, #116]	@ (800061c <MX_ADC1_Init+0xd0>)
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_15CYCLES;
 80005a6:	9206      	str	r2, [sp, #24]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80005a8:	a904      	add	r1, sp, #16
  sConfigInjected.InjectedRank = 1;
 80005aa:	e9cd 3204 	strd	r3, r2, [sp, #16]
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 80005ae:	930a      	str	r3, [sp, #40]	@ 0x28
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80005b0:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
  sConfigInjected.InjectedOffset = 0;
 80005b4:	9307      	str	r3, [sp, #28]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80005b6:	f003 fd8f 	bl	80040d8 <HAL_ADCEx_InjectedConfigChannel>
 80005ba:	bb60      	cbnz	r0, 8000616 <MX_ADC1_Init+0xca>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_11;
  sConfigInjected.InjectedRank = 2;
 80005bc:	220b      	movs	r2, #11
 80005be:	2302      	movs	r3, #2
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80005c0:	4816      	ldr	r0, [pc, #88]	@ (800061c <MX_ADC1_Init+0xd0>)
 80005c2:	a904      	add	r1, sp, #16
  sConfigInjected.InjectedRank = 2;
 80005c4:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80005c8:	f003 fd86 	bl	80040d8 <HAL_ADCEx_InjectedConfigChannel>
 80005cc:	bb00      	cbnz	r0, 8000610 <MX_ADC1_Init+0xc4>
    Error_Handler();
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_10;
 80005ce:	220a      	movs	r2, #10
  sConfigInjected.InjectedRank = 3;
 80005d0:	2303      	movs	r3, #3
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80005d2:	4812      	ldr	r0, [pc, #72]	@ (800061c <MX_ADC1_Init+0xd0>)
 80005d4:	a904      	add	r1, sp, #16
  sConfigInjected.InjectedRank = 3;
 80005d6:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80005da:	f003 fd7d 	bl	80040d8 <HAL_ADCEx_InjectedConfigChannel>
 80005de:	b9a0      	cbnz	r0, 800060a <MX_ADC1_Init+0xbe>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80005e0:	2301      	movs	r3, #1
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80005e2:	2402      	movs	r4, #2
  sConfig.Offset = 0;
 80005e4:	2200      	movs	r2, #0

  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005e6:	480d      	ldr	r0, [pc, #52]	@ (800061c <MX_ADC1_Init+0xd0>)
 80005e8:	4669      	mov	r1, sp
  sConfig.Rank = 1;
 80005ea:	e9cd 3300 	strd	r3, r3, [sp]
  sConfig.Offset = 0;
 80005ee:	e9cd 4202 	strd	r4, r2, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005f2:	f003 fcbb 	bl	8003f6c <HAL_ADC_ConfigChannel>
 80005f6:	b920      	cbnz	r0, 8000602 <MX_ADC1_Init+0xb6>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005f8:	b00c      	add	sp, #48	@ 0x30
 80005fa:	bd10      	pop	{r4, pc}
    Error_Handler();
 80005fc:	f000 fd00 	bl	8001000 <Error_Handler>
 8000600:	e7c9      	b.n	8000596 <MX_ADC1_Init+0x4a>
    Error_Handler();
 8000602:	f000 fcfd 	bl	8001000 <Error_Handler>
}
 8000606:	b00c      	add	sp, #48	@ 0x30
 8000608:	bd10      	pop	{r4, pc}
    Error_Handler();
 800060a:	f000 fcf9 	bl	8001000 <Error_Handler>
 800060e:	e7e7      	b.n	80005e0 <MX_ADC1_Init+0x94>
    Error_Handler();
 8000610:	f000 fcf6 	bl	8001000 <Error_Handler>
 8000614:	e7db      	b.n	80005ce <MX_ADC1_Init+0x82>
    Error_Handler();
 8000616:	f000 fcf3 	bl	8001000 <Error_Handler>
 800061a:	e7cf      	b.n	80005bc <MX_ADC1_Init+0x70>
 800061c:	200003c4 	.word	0x200003c4
 8000620:	40012000 	.word	0x40012000
 8000624:	0f000001 	.word	0x0f000001

08000628 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000628:	b5d0      	push	{r4, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(adcHandle->Instance==ADC1)
 800062a:	4b1f      	ldr	r3, [pc, #124]	@ (80006a8 <HAL_ADC_MspInit+0x80>)
 800062c:	6802      	ldr	r2, [r0, #0]
{
 800062e:	b08a      	sub	sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000630:	2400      	movs	r4, #0
  if(adcHandle->Instance==ADC1)
 8000632:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000634:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8000638:	e9cd 4406 	strd	r4, r4, [sp, #24]
 800063c:	9408      	str	r4, [sp, #32]
  if(adcHandle->Instance==ADC1)
 800063e:	d001      	beq.n	8000644 <HAL_ADC_MspInit+0x1c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000640:	b00a      	add	sp, #40	@ 0x28
 8000642:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000644:	f503 338c 	add.w	r3, r3, #71680	@ 0x11800
 8000648:	9401      	str	r4, [sp, #4]
 800064a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800064c:	4817      	ldr	r0, [pc, #92]	@ (80006ac <HAL_ADC_MspInit+0x84>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 800064e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000652:	645a      	str	r2, [r3, #68]	@ 0x44
 8000654:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000656:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 800065a:	9201      	str	r2, [sp, #4]
 800065c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800065e:	9402      	str	r4, [sp, #8]
 8000660:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000662:	f042 0204 	orr.w	r2, r2, #4
 8000666:	631a      	str	r2, [r3, #48]	@ 0x30
 8000668:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800066a:	f002 0204 	and.w	r2, r2, #4
 800066e:	9202      	str	r2, [sp, #8]
 8000670:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000672:	9403      	str	r4, [sp, #12]
 8000674:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000676:	f042 0201 	orr.w	r2, r2, #1
 800067a:	631a      	str	r2, [r3, #48]	@ 0x30
 800067c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067e:	f003 0301 	and.w	r3, r3, #1
 8000682:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin|M1_CURR_AMPL_V_Pin;
 8000684:	2603      	movs	r6, #3
 8000686:	2703      	movs	r7, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000688:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800068a:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin|M1_CURR_AMPL_V_Pin;
 800068c:	e9cd 6704 	strd	r6, r7, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000690:	f003 ff08 	bl	80044a4 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000694:	4806      	ldr	r0, [pc, #24]	@ (80006b0 <HAL_ADC_MspInit+0x88>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000696:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000698:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin|M1_BUS_VOLTAGE_Pin;
 800069a:	e9cd 6704 	strd	r6, r7, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800069e:	f003 ff01 	bl	80044a4 <HAL_GPIO_Init>
}
 80006a2:	b00a      	add	sp, #40	@ 0x28
 80006a4:	bdd0      	pop	{r4, r6, r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40012000 	.word	0x40012000
 80006ac:	40020800 	.word	0x40020800
 80006b0:	40020000 	.word	0x40020000

080006b4 <ASPEP_start>:
  * @brief  Starts ASPEP communication by configuring UART.
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_start(ASPEP_Handle_t *pHandle)
{
 80006b4:	b570      	push	{r4, r5, r6, lr}
 80006b6:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->fASPEP_HWInit(pHandle->HWIp);
 80006b8:	6940      	ldr	r0, [r0, #20]
 80006ba:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80006bc:	4798      	blx	r3
    pHandle->ASPEP_State = ASPEP_IDLE;
 80006be:	2300      	movs	r3, #0
    pHandle->ASPEP_TL_State = WAITING_PACKET;
    pHandle->syncPacketCount = 0; /* Sync packet counter is reset only at startup*/

    /* Configure UART to receive first packet*/
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 80006c0:	6d65      	ldr	r5, [r4, #84]	@ 0x54
    pHandle->ASPEP_State = ASPEP_IDLE;
 80006c2:	f8a4 3064 	strh.w	r3, [r4, #100]	@ 0x64
    pHandle->syncPacketCount = 0; /* Sync packet counter is reset only at startup*/
 80006c6:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 80006ca:	6960      	ldr	r0, [r4, #20]
 80006cc:	f104 011c 	add.w	r1, r4, #28
 80006d0:	462b      	mov	r3, r5
 80006d2:	2204      	movs	r2, #4
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 80006d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 80006d8:	4718      	bx	r3
 80006da:	bf00      	nop

080006dc <ASPEP_sendBeacon>:
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  * @param  *capabilities Matched capabilities between controller and performer
  */
void ASPEP_sendBeacon(ASPEP_Handle_t *pHandle, ASPEP_Capabilities_def *capabilities)
{
 80006dc:	b410      	push	{r4}
  {
#endif
    uint32_t *packet = (uint32_t *)pHandle->ctrlBuffer.buffer; //cstat !MISRAC2012-Rule-11.3
    *packet = (BEACON
             | (((uint32_t)capabilities->version) << 4U)
             | (((uint32_t)capabilities->DATA_CRC) << 7U)
 80006de:	780b      	ldrb	r3, [r1, #0]
             | (((uint32_t)capabilities->version) << 4U)
 80006e0:	790a      	ldrb	r2, [r1, #4]
             | (((uint32_t)capabilities->RX_maxSize) << 8U)
             | (((uint32_t)capabilities->TXS_maxSize) << 14U)
 80006e2:	f891 c002 	ldrb.w	ip, [r1, #2]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 80006e6:	4c1e      	ldr	r4, [pc, #120]	@ (8000760 <ASPEP_sendBeacon+0x84>)
             | (((uint32_t)capabilities->DATA_CRC) << 7U)
 80006e8:	01db      	lsls	r3, r3, #7
 80006ea:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
             | (((uint32_t)capabilities->RX_maxSize) << 8U)
 80006ee:	784a      	ldrb	r2, [r1, #1]
 80006f0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
             | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 80006f4:	78ca      	ldrb	r2, [r1, #3]
             | (((uint32_t)capabilities->TXS_maxSize) << 14U)
 80006f6:	ea43 338c 	orr.w	r3, r3, ip, lsl #14
             | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 80006fa:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 80006fe:	b2da      	uxtb	r2, r3
 8000700:	f042 0205 	orr.w	r2, r2, #5
  header &= 0x0fffffffU;
 8000704:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000708:	5ca2      	ldrb	r2, [r4, r2]
 800070a:	ea82 2211 	eor.w	r2, r2, r1, lsr #8
 800070e:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000710:	5ca2      	ldrb	r2, [r4, r2]
 8000712:	ea82 4211 	eor.w	r2, r2, r1, lsr #16
 8000716:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000718:	5ca2      	ldrb	r2, [r4, r2]
 800071a:	4c12      	ldr	r4, [pc, #72]	@ (8000764 <ASPEP_sendBeacon+0x88>)
 800071c:	ea82 6211 	eor.w	r2, r2, r1, lsr #24
  *headerPtr |= (uint32_t)crc << 28;
 8000720:	5ca2      	ldrb	r2, [r4, r2]
 8000722:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8000726:	f043 0305 	orr.w	r3, r3, #5
 800072a:	6203      	str	r3, [r0, #32]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800072c:	b672      	cpsid	i
  {
#endif
    /* Insert CRC header in the packet to send */
    ASPEP_ComputeHeaderCRC((uint32_t *)txBuffer); //cstat !MISRAC2012-Rule-11.5
    __disable_irq(); /*TODO: Disable High frequency task is enough */
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 800072e:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8000730:	b14b      	cbz	r3, 8000746 <ASPEP_sendBeacon+0x6a>
  __ASM volatile ("cpsie i" : : : "memory");
 8000732:	b662      	cpsie	i
          pHandle->syncBuffer.length = bufferLength;
        }
      }
      else if(ASPEP_CTRL == dataType)
      {
        if (pHandle->ctrlBuffer.state != available)
 8000734:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8000738:	b913      	cbnz	r3, 8000740 <ASPEP_sendBeacon+0x64>
        {
          result = ASPEP_BUFFER_ERROR;
        }
        else
        {
          pHandle->ctrlBuffer.state = pending;
 800073a:	2302      	movs	r3, #2
 800073c:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
}
 8000740:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000744:	4770      	bx	lr
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8000746:	f100 0120 	add.w	r1, r0, #32
        pHandle->ctrlBuffer.state = readLock;
 800074a:	2303      	movs	r3, #3
 800074c:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8000750:	6481      	str	r1, [r0, #72]	@ 0x48
 8000752:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8000754:	2204      	movs	r2, #4
 8000756:	6d83      	ldr	r3, [r0, #88]	@ 0x58
}
 8000758:	f85d 4b04 	ldr.w	r4, [sp], #4
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 800075c:	6940      	ldr	r0, [r0, #20]
 800075e:	4718      	bx	r3
 8000760:	08007444 	.word	0x08007444
 8000764:	08007434 	.word	0x08007434

08000768 <ASPEP_sendPing>:
{
 8000768:	b430      	push	{r4, r5}
                   | (uint32_t)((uint32_t)cBit << 5U)
 800076a:	014b      	lsls	r3, r1, #5
    uint8_t Nbit = pHandle->syncPacketCount & 0x1U; /* Keep only LSB */
 800076c:	f890 c060 	ldrb.w	ip, [r0, #96]	@ 0x60
    uint8_t ipID = pHandle->liid & 0xFU;
 8000770:	f890 4063 	ldrb.w	r4, [r0, #99]	@ 0x63
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000774:	4d1d      	ldr	r5, [pc, #116]	@ (80007ec <ASPEP_sendPing+0x84>)
                   | (uint32_t)((uint32_t)cBit << 5U)
 8000776:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 800077a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
                   | (uint32_t)((uint32_t)Nbit << 6U)
 800077e:	f00c 0101 	and.w	r1, ip, #1
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000782:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8000786:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
                   | (uint32_t)((uint32_t)ipID << 8U)
 800078a:	f004 040f 	and.w	r4, r4, #15
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 800078e:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000792:	b2da      	uxtb	r2, r3
 8000794:	4c16      	ldr	r4, [pc, #88]	@ (80007f0 <ASPEP_sendPing+0x88>)
 8000796:	f042 0206 	orr.w	r2, r2, #6
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 800079a:	f043 0106 	orr.w	r1, r3, #6
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 800079e:	5ca2      	ldrb	r2, [r4, r2]
 80007a0:	ea82 2213 	eor.w	r2, r2, r3, lsr #8
 80007a4:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 80007a6:	5ca2      	ldrb	r2, [r4, r2]
 80007a8:	ea82 4213 	eor.w	r2, r2, r3, lsr #16
 80007ac:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 80007ae:	5ca2      	ldrb	r2, [r4, r2]
 80007b0:	ea82 6313 	eor.w	r3, r2, r3, lsr #24
  *headerPtr |= (uint32_t)crc << 28;
 80007b4:	5ceb      	ldrb	r3, [r5, r3]
 80007b6:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
 80007ba:	6203      	str	r3, [r0, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80007bc:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 80007be:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 80007c0:	b143      	cbz	r3, 80007d4 <ASPEP_sendPing+0x6c>
  __ASM volatile ("cpsie i" : : : "memory");
 80007c2:	b662      	cpsie	i
        if (pHandle->ctrlBuffer.state != available)
 80007c4:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 80007c8:	b913      	cbnz	r3, 80007d0 <ASPEP_sendPing+0x68>
          pHandle->ctrlBuffer.state = pending;
 80007ca:	2302      	movs	r3, #2
 80007cc:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
}
 80007d0:	bc30      	pop	{r4, r5}
 80007d2:	4770      	bx	lr
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 80007d4:	f100 0120 	add.w	r1, r0, #32
        pHandle->ctrlBuffer.state = readLock;
 80007d8:	2303      	movs	r3, #3
 80007da:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 80007de:	6481      	str	r1, [r0, #72]	@ 0x48
 80007e0:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 80007e2:	2204      	movs	r2, #4
 80007e4:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 80007e6:	6940      	ldr	r0, [r0, #20]
}
 80007e8:	bc30      	pop	{r4, r5}
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 80007ea:	4718      	bx	r3
 80007ec:	08007434 	.word	0x08007434
 80007f0:	08007444 	.word	0x08007444

080007f4 <ASPEP_getBuffer>:
    if (MCTL_SYNC == syncAsync)
 80007f4:	2a0a      	cmp	r2, #10
 80007f6:	d009      	beq.n	800080c <ASPEP_getBuffer+0x18>
      if ((pHandle->asyncBufferA.state > writeLock) && (pHandle->asyncBufferB.state > writeLock))
 80007f8:	f890 3036 	ldrb.w	r3, [r0, #54]	@ 0x36
 80007fc:	2b01      	cmp	r3, #1
 80007fe:	d91d      	bls.n	800083c <ASPEP_getBuffer+0x48>
 8000800:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 8000804:	2b01      	cmp	r3, #1
 8000806:	d90d      	bls.n	8000824 <ASPEP_getBuffer+0x30>
        result = false;
 8000808:	2000      	movs	r0, #0
}
 800080a:	4770      	bx	lr
      if (pHandle->syncBuffer.state <= writeLock) /* Possible values are free or writeLock*/
 800080c:	f890 302e 	ldrb.w	r3, [r0, #46]	@ 0x2e
 8000810:	2b01      	cmp	r3, #1
 8000812:	d8f9      	bhi.n	8000808 <ASPEP_getBuffer+0x14>
        *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 8000814:	6a83      	ldr	r3, [r0, #40]	@ 0x28
        pHandle->syncBuffer.state = writeLock;
 8000816:	2201      	movs	r2, #1
        *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 8000818:	3304      	adds	r3, #4
 800081a:	600b      	str	r3, [r1, #0]
        pHandle->syncBuffer.state = writeLock;
 800081c:	f880 202e 	strb.w	r2, [r0, #46]	@ 0x2e
  bool result = true;
 8000820:	2001      	movs	r0, #1
 8000822:	4770      	bx	lr
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 8000824:	6b83      	ldr	r3, [r0, #56]	@ 0x38
          pHandle->asyncBufferB.state = writeLock;
 8000826:	f04f 0c01 	mov.w	ip, #1
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferB;
 800082a:	f100 0238 	add.w	r2, r0, #56	@ 0x38
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 800082e:	3304      	adds	r3, #4
          pHandle->asyncBufferB.state = writeLock;
 8000830:	f880 c03e 	strb.w	ip, [r0, #62]	@ 0x3e
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferB;
 8000834:	6402      	str	r2, [r0, #64]	@ 0x40
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 8000836:	600b      	str	r3, [r1, #0]
  bool result = true;
 8000838:	2001      	movs	r0, #1
 800083a:	4770      	bx	lr
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 800083c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
          pHandle->asyncBufferA.state = writeLock;
 800083e:	f04f 0c01 	mov.w	ip, #1
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferA;
 8000842:	f100 0230 	add.w	r2, r0, #48	@ 0x30
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 8000846:	3304      	adds	r3, #4
          pHandle->asyncBufferA.state = writeLock;
 8000848:	f880 c036 	strb.w	ip, [r0, #54]	@ 0x36
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferA;
 800084c:	6402      	str	r2, [r0, #64]	@ 0x40
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 800084e:	600b      	str	r3, [r1, #0]
 8000850:	e7f2      	b.n	8000838 <ASPEP_getBuffer+0x44>
 8000852:	bf00      	nop

08000854 <ASPEP_sendPacket>:
{
 8000854:	4684      	mov	ip, r0
    if (ASPEP_CONNECTED == pHandle-> ASPEP_State)
 8000856:	f890 0064 	ldrb.w	r0, [r0, #100]	@ 0x64
 800085a:	2802      	cmp	r0, #2
 800085c:	d001      	beq.n	8000862 <ASPEP_sendPacket+0xe>
      result = ASPEP_NOT_CONNECTED;
 800085e:	2002      	movs	r0, #2
 8000860:	4770      	bx	lr
      tmpHeader = ((uint32_t)((uint32_t)txDataLengthTemp << (uint32_t)4) | (uint32_t)syncAsync);
 8000862:	ea43 1002 	orr.w	r0, r3, r2, lsl #4
      *header = tmpHeader;
 8000866:	f841 0c04 	str.w	r0, [r1, #-4]
      if (1U == pHandle->Capabilities.DATA_CRC)
 800086a:	f89c 006c 	ldrb.w	r0, [ip, #108]	@ 0x6c
 800086e:	2801      	cmp	r0, #1
 8000870:	d104      	bne.n	800087c <ASPEP_sendPacket+0x28>
        packet[txDataLengthTemp] = (uint8_t)0xCA; /* Dummy CRC */
 8000872:	f64f 60ca 	movw	r0, #65226	@ 0xfeca
 8000876:	5288      	strh	r0, [r1, r2]
        txDataLengthTemp += (uint16_t)ASPEP_DATACRC_SIZE;
 8000878:	3202      	adds	r2, #2
 800087a:	b292      	uxth	r2, r2
      if (MCTL_SYNC == syncAsync)
 800087c:	2b0a      	cmp	r3, #10
 800087e:	d105      	bne.n	800088c <ASPEP_sendPacket+0x38>
        if (pSupHandle->MCP_PacketAvailable)
 8000880:	f89c 0010 	ldrb.w	r0, [ip, #16]
 8000884:	b348      	cbz	r0, 80008da <ASPEP_sendPacket+0x86>
          pSupHandle->MCP_PacketAvailable = false; /* CMD from controller is processed*/
 8000886:	2000      	movs	r0, #0
 8000888:	f88c 0010 	strb.w	r0, [ip, #16]
  uint32_t header = *headerPtr;
 800088c:	f851 0c04 	ldr.w	r0, [r1, #-4]
{
 8000890:	b570      	push	{r4, r5, r6, lr}
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000892:	4d34      	ldr	r5, [pc, #208]	@ (8000964 <ASPEP_sendPacket+0x110>)
 8000894:	b2c4      	uxtb	r4, r0
        result = ASPEP_TXframeProcess(pHandle, syncAsync, header, txDataLengthTemp + (uint16_t)ASPEP_HEADER_SIZE);
 8000896:	3204      	adds	r2, #4
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000898:	5d2e      	ldrb	r6, [r5, r4]
 800089a:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800089e:	4074      	eors	r4, r6
      header--; /* Header ues 4*8 bits on top of txBuffer*/
 80008a0:	f1a1 0e04 	sub.w	lr, r1, #4
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 80008a4:	5d2e      	ldrb	r6, [r5, r4]
 80008a6:	f3c0 4407 	ubfx	r4, r0, #16, #8
 80008aa:	4074      	eors	r4, r6
        result = ASPEP_TXframeProcess(pHandle, syncAsync, header, txDataLengthTemp + (uint16_t)ASPEP_HEADER_SIZE);
 80008ac:	b292      	uxth	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 80008ae:	5d2c      	ldrb	r4, [r5, r4]
 80008b0:	f3c0 6503 	ubfx	r5, r0, #24, #4
 80008b4:	406c      	eors	r4, r5
 80008b6:	4d2c      	ldr	r5, [pc, #176]	@ (8000968 <ASPEP_sendPacket+0x114>)
  *headerPtr |= (uint32_t)crc << 28;
 80008b8:	5d2c      	ldrb	r4, [r5, r4]
 80008ba:	ea40 7004 	orr.w	r0, r0, r4, lsl #28
 80008be:	f841 0c04 	str.w	r0, [r1, #-4]
  __ASM volatile ("cpsid i" : : : "memory");
 80008c2:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 80008c4:	f8dc 1048 	ldr.w	r1, [ip, #72]	@ 0x48
 80008c8:	b1b9      	cbz	r1, 80008fa <ASPEP_sendPacket+0xa6>
  __ASM volatile ("cpsie i" : : : "memory");
 80008ca:	b662      	cpsie	i
      if (MCTL_ASYNC == dataType)
 80008cc:	2b09      	cmp	r3, #9
 80008ce:	d006      	beq.n	80008de <ASPEP_sendPacket+0x8a>
      else if (MCTL_SYNC == dataType)
 80008d0:	2b0a      	cmp	r3, #10
 80008d2:	d02a      	beq.n	800092a <ASPEP_sendPacket+0xd6>
      else if(ASPEP_CTRL == dataType)
 80008d4:	b37b      	cbz	r3, 8000936 <ASPEP_sendPacket+0xe2>
  uint8_t result = ASPEP_OK;
 80008d6:	2000      	movs	r0, #0
}
 80008d8:	bd70      	pop	{r4, r5, r6, pc}
          result = MCTL_SYNC_NOT_EXPECTED;
 80008da:	2001      	movs	r0, #1
}
 80008dc:	4770      	bx	lr
        if (txBuffer != (uint8_t *)pHandle->lastRequestedAsyncBuff->buffer)
 80008de:	f8dc 3040 	ldr.w	r3, [ip, #64]	@ 0x40
 80008e2:	6819      	ldr	r1, [r3, #0]
  uint8_t result = ASPEP_OK;
 80008e4:	458e      	cmp	lr, r1
 80008e6:	bf14      	ite	ne
 80008e8:	2003      	movne	r0, #3
 80008ea:	2000      	moveq	r0, #0
        if (NULL == pHandle->asyncNextBuffer)
 80008ec:	f8dc 1044 	ldr.w	r1, [ip, #68]	@ 0x44
 80008f0:	b3a1      	cbz	r1, 800095c <ASPEP_sendPacket+0x108>
        pHandle->lastRequestedAsyncBuff->state = pending;
 80008f2:	2102      	movs	r1, #2
 80008f4:	7199      	strb	r1, [r3, #6]
        pHandle->lastRequestedAsyncBuff->length = bufferLength;
 80008f6:	809a      	strh	r2, [r3, #4]
}
 80008f8:	bd70      	pop	{r4, r5, r6, pc}
      if (MCTL_ASYNC == dataType)
 80008fa:	2b09      	cmp	r3, #9
 80008fc:	d029      	beq.n	8000952 <ASPEP_sendPacket+0xfe>
      else if (MCTL_SYNC == dataType)
 80008fe:	2b0a      	cmp	r3, #10
        pHandle->syncBuffer.state = readLock;
 8000900:	f04f 0303 	mov.w	r3, #3
 8000904:	bf0b      	itete	eq
 8000906:	f88c 302e 	strbeq.w	r3, [ip, #46]	@ 0x2e
        pHandle->ctrlBuffer.state = readLock;
 800090a:	f88c 3024 	strbne.w	r3, [ip, #36]	@ 0x24
        pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 800090e:	f10c 0328 	addeq.w	r3, ip, #40	@ 0x28
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8000912:	f10c 0320 	addne.w	r3, ip, #32
        pHandle->lockBuffer = (void *)pHandle->lastRequestedAsyncBuff;
 8000916:	f8cc 3048 	str.w	r3, [ip, #72]	@ 0x48
 800091a:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 800091c:	f8dc 3058 	ldr.w	r3, [ip, #88]	@ 0x58
 8000920:	f8dc 0014 	ldr.w	r0, [ip, #20]
 8000924:	4671      	mov	r1, lr
 8000926:	4798      	blx	r3
 8000928:	e7d5      	b.n	80008d6 <ASPEP_sendPacket+0x82>
        if (pHandle -> syncBuffer.state != writeLock)
 800092a:	f89c 302e 	ldrb.w	r3, [ip, #46]	@ 0x2e
 800092e:	2b01      	cmp	r3, #1
 8000930:	d009      	beq.n	8000946 <ASPEP_sendPacket+0xf2>
          result = ASPEP_BUFFER_ERROR;
 8000932:	2003      	movs	r0, #3
}
 8000934:	bd70      	pop	{r4, r5, r6, pc}
        if (pHandle->ctrlBuffer.state != available)
 8000936:	f89c 3024 	ldrb.w	r3, [ip, #36]	@ 0x24
 800093a:	2b00      	cmp	r3, #0
 800093c:	d1f9      	bne.n	8000932 <ASPEP_sendPacket+0xde>
          pHandle->ctrlBuffer.state = pending;
 800093e:	2302      	movs	r3, #2
 8000940:	f88c 3024 	strb.w	r3, [ip, #36]	@ 0x24
 8000944:	e7c7      	b.n	80008d6 <ASPEP_sendPacket+0x82>
          pHandle->syncBuffer.state = pending;
 8000946:	2302      	movs	r3, #2
 8000948:	f88c 302e 	strb.w	r3, [ip, #46]	@ 0x2e
          pHandle->syncBuffer.length = bufferLength;
 800094c:	f8ac 202c 	strh.w	r2, [ip, #44]	@ 0x2c
 8000950:	e7c1      	b.n	80008d6 <ASPEP_sendPacket+0x82>
        pHandle->lastRequestedAsyncBuff->state = readLock;
 8000952:	f8dc 3040 	ldr.w	r3, [ip, #64]	@ 0x40
 8000956:	2103      	movs	r1, #3
 8000958:	7199      	strb	r1, [r3, #6]
        pHandle->lockBuffer = (void *)pHandle->lastRequestedAsyncBuff;
 800095a:	e7dc      	b.n	8000916 <ASPEP_sendPacket+0xc2>
          pHandle->asyncNextBuffer = pHandle->lastRequestedAsyncBuff;
 800095c:	f8cc 3044 	str.w	r3, [ip, #68]	@ 0x44
 8000960:	e7c7      	b.n	80008f2 <ASPEP_sendPacket+0x9e>
 8000962:	bf00      	nop
 8000964:	08007444 	.word	0x08007444
 8000968:	08007434 	.word	0x08007434

0800096c <ASPEP_HWDataTransmittedIT>:
  * Therefore, there is no need to protect this ISR against another higher priority ISR (HF Task).
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_HWDataTransmittedIT(ASPEP_Handle_t *pHandle)
{
 800096c:	b510      	push	{r4, lr}
  }
  else
  {
#endif
    /* First free previous readLock buffer */
    if (pHandle->ctrlBuffer.state == readLock)
 800096e:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8000972:	2b03      	cmp	r3, #3
{
 8000974:	4604      	mov	r4, r0
    if (pHandle->ctrlBuffer.state == readLock)
 8000976:	d013      	beq.n	80009a0 <ASPEP_HWDataTransmittedIT+0x34>
      pHandle->ctrlBuffer.state = available;
    }
    else /* if previous buffer was not ASPEP_CTRL, then the buffer locked is a MCTL_Buff_t */
    {
      MCTL_Buff_t *tempBuff = (MCTL_Buff_t *)pHandle->lockBuffer; //cstat !MISRAC2012-Rule-11.5
      tempBuff->state = available;
 8000978:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 800097a:	2100      	movs	r1, #0
 800097c:	7191      	strb	r1, [r2, #6]
    }
    if (pHandle->syncBuffer.state == pending)
 800097e:	f890 202e 	ldrb.w	r2, [r0, #46]	@ 0x2e
 8000982:	2a02      	cmp	r2, #2
 8000984:	d013      	beq.n	80009ae <ASPEP_HWDataTransmittedIT+0x42>
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
      pHandle->fASPEP_send(pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
      pHandle->syncBuffer.state = readLock;
    }
    /* Second prepare transfer of pending buffer */
    else if (pHandle->ctrlBuffer.state == pending)
 8000986:	2b02      	cmp	r3, #2
 8000988:	d11d      	bne.n	80009c6 <ASPEP_HWDataTransmittedIT+0x5a>
    {
      pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 800098a:	f100 0120 	add.w	r1, r0, #32
      pHandle->fASPEP_send(pHandle ->HWIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 800098e:	6d83      	ldr	r3, [r0, #88]	@ 0x58
      pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 8000990:	6481      	str	r1, [r0, #72]	@ 0x48
      pHandle->fASPEP_send(pHandle ->HWIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 8000992:	2204      	movs	r2, #4
 8000994:	6940      	ldr	r0, [r0, #20]
 8000996:	4798      	blx	r3
      pHandle->ctrlBuffer.state = readLock;
 8000998:	2303      	movs	r3, #3
 800099a:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
      __enable_irq();
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 800099e:	bd10      	pop	{r4, pc}
    if (pHandle->syncBuffer.state == pending)
 80009a0:	f890 302e 	ldrb.w	r3, [r0, #46]	@ 0x2e
      pHandle->ctrlBuffer.state = available;
 80009a4:	2200      	movs	r2, #0
    if (pHandle->syncBuffer.state == pending)
 80009a6:	2b02      	cmp	r3, #2
      pHandle->ctrlBuffer.state = available;
 80009a8:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
    if (pHandle->syncBuffer.state == pending)
 80009ac:	d10b      	bne.n	80009c6 <ASPEP_HWDataTransmittedIT+0x5a>
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 80009ae:	f104 0028 	add.w	r0, r4, #40	@ 0x28
      pHandle->fASPEP_send(pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 80009b2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 80009b4:	64a0      	str	r0, [r4, #72]	@ 0x48
      pHandle->fASPEP_send(pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 80009b6:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 80009b8:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80009ba:	6960      	ldr	r0, [r4, #20]
 80009bc:	4798      	blx	r3
      pHandle->syncBuffer.state = readLock;
 80009be:	2303      	movs	r3, #3
 80009c0:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
}
 80009c4:	bd10      	pop	{r4, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 80009c6:	b672      	cpsid	i
      if (pHandle->asyncNextBuffer != NULL)
 80009c8:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80009ca:	b1cb      	cbz	r3, 8000a00 <ASPEP_HWDataTransmittedIT+0x94>
        pHandle->asyncNextBuffer->state = readLock;
 80009cc:	2203      	movs	r2, #3
        pHandle->lockBuffer = (void *)pHandle->asyncNextBuffer;
 80009ce:	64a3      	str	r3, [r4, #72]	@ 0x48
        pHandle->asyncNextBuffer->state = readLock;
 80009d0:	719a      	strb	r2, [r3, #6]
        pHandle->fASPEP_send(pHandle ->HWIp, pHandle->asyncNextBuffer->buffer, pHandle->asyncNextBuffer->length);
 80009d2:	6819      	ldr	r1, [r3, #0]
 80009d4:	889a      	ldrh	r2, [r3, #4]
 80009d6:	6960      	ldr	r0, [r4, #20]
 80009d8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80009da:	4798      	blx	r3
        if ((pHandle->asyncBufferA.state == pending) || (pHandle->asyncBufferB.state == pending))
 80009dc:	f894 3036 	ldrb.w	r3, [r4, #54]	@ 0x36
 80009e0:	2b02      	cmp	r3, #2
 80009e2:	d007      	beq.n	80009f4 <ASPEP_HWDataTransmittedIT+0x88>
 80009e4:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 80009e8:	2b02      	cmp	r3, #2
 80009ea:	d003      	beq.n	80009f4 <ASPEP_HWDataTransmittedIT+0x88>
          pHandle->asyncNextBuffer = NULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	6463      	str	r3, [r4, #68]	@ 0x44
  __ASM volatile ("cpsie i" : : : "memory");
 80009f0:	b662      	cpsie	i
}
 80009f2:	bd10      	pop	{r4, pc}
          uint32_t temp = (uint32_t)&pHandle->asyncBufferA + (uint32_t)&pHandle->asyncBufferB
 80009f4:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80009f6:	0063      	lsls	r3, r4, #1
 80009f8:	3368      	adds	r3, #104	@ 0x68
 80009fa:	1a9b      	subs	r3, r3, r2
          pHandle->asyncNextBuffer = (MCTL_Buff_t *) temp; //cstat !MISRAC2012-Rule-11.4
 80009fc:	6463      	str	r3, [r4, #68]	@ 0x44
        {
 80009fe:	e7f7      	b.n	80009f0 <ASPEP_HWDataTransmittedIT+0x84>
        pHandle->lockBuffer = NULL;
 8000a00:	64a3      	str	r3, [r4, #72]	@ 0x48
 8000a02:	e7f5      	b.n	80009f0 <ASPEP_HWDataTransmittedIT+0x84>

08000a04 <ASPEP_RXframeProcess>:
    uint16_t packetNumber;
#if VALID_CRC_DATA
    bool validCRCData = true;
#endif
    *packetLength = 0;
    if (pHandle->NewPacketAvailable)
 8000a04:	f890 3061 	ldrb.w	r3, [r0, #97]	@ 0x61
    uint32_t packetHeader = *((uint32_t *)pHandle->rxHeader); //cstat !MISRAC2012-Rule-11.3
 8000a08:	69c2      	ldr	r2, [r0, #28]
    *packetLength = 0;
 8000a0a:	f04f 0c00 	mov.w	ip, #0
{
 8000a0e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a12:	4604      	mov	r4, r0
    *packetLength = 0;
 8000a14:	f8a1 c000 	strh.w	ip, [r1]
    if (pHandle->NewPacketAvailable)
 8000a18:	b1cb      	cbz	r3, 8000a4e <ASPEP_RXframeProcess+0x4a>
    {
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
      switch (pHandle->ASPEP_State)
 8000a1a:	f890 3064 	ldrb.w	r3, [r0, #100]	@ 0x64
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
 8000a1e:	f880 c061 	strb.w	ip, [r0, #97]	@ 0x61
      switch (pHandle->ASPEP_State)
 8000a22:	2b01      	cmp	r3, #1
 8000a24:	d055      	beq.n	8000ad2 <ASPEP_RXframeProcess+0xce>
 8000a26:	2b02      	cmp	r3, #2
 8000a28:	d018      	beq.n	8000a5c <ASPEP_RXframeProcess+0x58>
 8000a2a:	b933      	cbnz	r3, 8000a3a <ASPEP_RXframeProcess+0x36>
      {
        case ASPEP_IDLE:
        {
          if (BEACON == pHandle->rxPacketType)
 8000a2c:	6e81      	ldr	r1, [r0, #104]	@ 0x68
 8000a2e:	2905      	cmp	r1, #5
 8000a30:	f000 80e3 	beq.w	8000bfa <ASPEP_RXframeProcess+0x1f6>
              /* Nothing to do, controller has to send back new beacon with matching capabilities */
            }
            /* Beacon Packet must be answered*/
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
          }
          else if (PING == pHandle->rxPacketType)
 8000a34:	2906      	cmp	r1, #6
 8000a36:	f000 8129 	beq.w	8000c8c <ASPEP_RXframeProcess+0x288>
  uint8_t *result = NULL; //cstat !MISRAC2012-Rule-8.13
 8000a3a:	2500      	movs	r5, #0

        default:
          break;
      }
      /* The valid received packet is now safely consumes, we are ready to receive a new packet */
      pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000a3c:	6960      	ldr	r0, [r4, #20]
 8000a3e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8000a40:	2204      	movs	r2, #4
 8000a42:	f104 011c 	add.w	r1, r4, #28
 8000a46:	4798      	blx	r3
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
  return (result);
}
 8000a48:	4628      	mov	r0, r5
 8000a4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if (pHandle->badPacketFlag > ASPEP_OK)
 8000a4e:	f890 3062 	ldrb.w	r3, [r0, #98]	@ 0x62
 8000a52:	b9bb      	cbnz	r3, 8000a84 <ASPEP_RXframeProcess+0x80>
  uint8_t *result = NULL; //cstat !MISRAC2012-Rule-8.13
 8000a54:	2500      	movs	r5, #0
}
 8000a56:	4628      	mov	r0, r5
 8000a58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if (BEACON == pHandle->rxPacketType)
 8000a5c:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8000a5e:	2b05      	cmp	r3, #5
 8000a60:	d045      	beq.n	8000aee <ASPEP_RXframeProcess+0xea>
          else if (PING == pHandle->rxPacketType)
 8000a62:	2b06      	cmp	r3, #6
 8000a64:	f000 8118 	beq.w	8000c98 <ASPEP_RXframeProcess+0x294>
          else if (DATA_PACKET == pHandle->rxPacketType)
 8000a68:	2b09      	cmp	r3, #9
 8000a6a:	d1e6      	bne.n	8000a3a <ASPEP_RXframeProcess+0x36>
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from controller */
 8000a6c:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
              *packetLength = pHandle->rxLength;
 8000a70:	f8b0 205c 	ldrh.w	r2, [r0, #92]	@ 0x5c
              result = pHandle->rxBuffer;
 8000a74:	69a5      	ldr	r5, [r4, #24]
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from controller */
 8000a76:	3301      	adds	r3, #1
              pSupHandle->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 8000a78:	2001      	movs	r0, #1
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from controller */
 8000a7a:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
              pSupHandle->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 8000a7e:	7420      	strb	r0, [r4, #16]
              *packetLength = pHandle->rxLength;
 8000a80:	800a      	strh	r2, [r1, #0]
              result = pHandle->rxBuffer;
 8000a82:	e7db      	b.n	8000a3c <ASPEP_RXframeProcess+0x38>
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 8000a84:	eb03 2303 	add.w	r3, r3, r3, lsl #8
 8000a88:	021b      	lsls	r3, r3, #8
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000a8a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8000a8e:	488b      	ldr	r0, [pc, #556]	@ (8000cbc <ASPEP_RXframeProcess+0x2b8>)
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000a90:	4d8b      	ldr	r5, [pc, #556]	@ (8000cc0 <ASPEP_RXframeProcess+0x2bc>)
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000a92:	f082 0209 	eor.w	r2, r2, #9
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 8000a96:	f043 010f 	orr.w	r1, r3, #15
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000a9a:	5c82      	ldrb	r2, [r0, r2]
 8000a9c:	ea82 4313 	eor.w	r3, r2, r3, lsr #16
 8000aa0:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000aa2:	5cc3      	ldrb	r3, [r0, r3]
  *headerPtr |= (uint32_t)crc << 28;
 8000aa4:	5ceb      	ldrb	r3, [r5, r3]
 8000aa6:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
 8000aaa:	6223      	str	r3, [r4, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8000aac:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8000aae:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	f000 80f6 	beq.w	8000ca2 <ASPEP_RXframeProcess+0x29e>
  __ASM volatile ("cpsie i" : : : "memory");
 8000ab6:	b662      	cpsie	i
        if (pHandle->ctrlBuffer.state != available)
 8000ab8:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 8000abc:	b913      	cbnz	r3, 8000ac4 <ASPEP_RXframeProcess+0xc0>
          pHandle->ctrlBuffer.state = pending;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
      pHandle->badPacketFlag = ASPEP_OK;
 8000ac4:	2200      	movs	r2, #0
      pHandle->fASPEP_HWSync(pHandle->HWIp);
 8000ac6:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8000ac8:	6960      	ldr	r0, [r4, #20]
      pHandle->badPacketFlag = ASPEP_OK;
 8000aca:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
      pHandle->fASPEP_HWSync(pHandle->HWIp);
 8000ace:	4798      	blx	r3
 8000ad0:	e7c0      	b.n	8000a54 <ASPEP_RXframeProcess+0x50>
          if (BEACON == pHandle->rxPacketType)
 8000ad2:	6e81      	ldr	r1, [r0, #104]	@ 0x68
 8000ad4:	2905      	cmp	r1, #5
 8000ad6:	d04f      	beq.n	8000b78 <ASPEP_RXframeProcess+0x174>
          else if (PING == pHandle->rxPacketType)
 8000ad8:	2906      	cmp	r1, #6
 8000ada:	d1ae      	bne.n	8000a3a <ASPEP_RXframeProcess+0x36>
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 8000adc:	4619      	mov	r1, r3
 8000ade:	f3c2 320f 	ubfx	r2, r2, #12, #16
 8000ae2:	f7ff fe41 	bl	8000768 <ASPEP_sendPing>
            pHandle->ASPEP_State = ASPEP_CONNECTED;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	f884 3064 	strb.w	r3, [r4, #100]	@ 0x64
 8000aec:	e7a5      	b.n	8000a3a <ASPEP_RXframeProcess+0x36>
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000aee:	f894 e01d 	ldrb.w	lr, [r4, #29]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000af2:	f894 506d 	ldrb.w	r5, [r4, #109]	@ 0x6d
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8000af6:	7f00      	ldrb	r0, [r0, #28]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000af8:	f894 606c 	ldrb.w	r6, [r4, #108]	@ 0x6c
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000afc:	f894 706e 	ldrb.w	r7, [r4, #110]	@ 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000b00:	f894 906f 	ldrb.w	r9, [r4, #111]	@ 0x6f
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000b04:	f00e 0e3f 	and.w	lr, lr, #63	@ 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8000b08:	09c0      	lsrs	r0, r0, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000b0a:	4575      	cmp	r5, lr
 8000b0c:	bf28      	it	cs
 8000b0e:	4675      	movcs	r5, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000b10:	42b0      	cmp	r0, r6
 8000b12:	4601      	mov	r1, r0
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000b14:	f3c2 3886 	ubfx	r8, r2, #14, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000b18:	bf28      	it	cs
 8000b1a:	4631      	movcs	r1, r6
 8000b1c:	4663      	mov	r3, ip
 8000b1e:	f361 0307 	bfi	r3, r1, #0, #8
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 8000b22:	f3c2 5a46 	ubfx	sl, r2, #21, #7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000b26:	45b8      	cmp	r8, r7
 8000b28:	4641      	mov	r1, r8
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000b2a:	f365 230f 	bfi	r3, r5, #8, #8
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000b2e:	bf28      	it	cs
 8000b30:	4639      	movcs	r1, r7
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000b32:	45ca      	cmp	sl, r9
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000b34:	f361 4317 	bfi	r3, r1, #16, #8
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000b38:	4651      	mov	r1, sl
 8000b3a:	bf28      	it	cs
 8000b3c:	4649      	movcs	r1, r9
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000b3e:	f361 631f 	bfi	r3, r1, #24, #8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000b42:	42b0      	cmp	r0, r6
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000b44:	66e3      	str	r3, [r4, #108]	@ 0x6c
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000b46:	f104 016c 	add.w	r1, r4, #108	@ 0x6c
 8000b4a:	d80f      	bhi.n	8000b6c <ASPEP_RXframeProcess+0x168>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8000b4c:	45ae      	cmp	lr, r5
 8000b4e:	d80d      	bhi.n	8000b6c <ASPEP_RXframeProcess+0x168>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8000b50:	45b8      	cmp	r8, r7
 8000b52:	d80b      	bhi.n	8000b6c <ASPEP_RXframeProcess+0x168>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8000b54:	45ca      	cmp	sl, r9
 8000b56:	d809      	bhi.n	8000b6c <ASPEP_RXframeProcess+0x168>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000b58:	f894 c070 	ldrb.w	ip, [r4, #112]	@ 0x70
 8000b5c:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8000b60:	ebac 0c02 	sub.w	ip, ip, r2
 8000b64:	fabc fc8c 	clz	ip, ip
 8000b68:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8000b6c:	f884 c064 	strb.w	ip, [r4, #100]	@ 0x64
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
 8000b70:	4620      	mov	r0, r4
 8000b72:	f7ff fdb3 	bl	80006dc <ASPEP_sendBeacon>
 8000b76:	e760      	b.n	8000a3a <ASPEP_RXframeProcess+0x36>
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000b78:	7f45      	ldrb	r5, [r0, #29]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000b7a:	f890 606c 	ldrb.w	r6, [r0, #108]	@ 0x6c
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8000b7e:	7f01      	ldrb	r1, [r0, #28]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000b80:	f890 006d 	ldrb.w	r0, [r0, #109]	@ 0x6d
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000b84:	f894 706e 	ldrb.w	r7, [r4, #110]	@ 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000b88:	f894 e06f 	ldrb.w	lr, [r4, #111]	@ 0x6f
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000b8c:	f005 053f 	and.w	r5, r5, #63	@ 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8000b90:	09c9      	lsrs	r1, r1, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000b92:	42a8      	cmp	r0, r5
 8000b94:	bf28      	it	cs
 8000b96:	4628      	movcs	r0, r5
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000b98:	42b1      	cmp	r1, r6
 8000b9a:	4663      	mov	r3, ip
 8000b9c:	468c      	mov	ip, r1
 8000b9e:	bf28      	it	cs
 8000ba0:	46b4      	movcs	ip, r6
 8000ba2:	f36c 0307 	bfi	r3, ip, #0, #8
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000ba6:	f3c2 3c86 	ubfx	ip, r2, #14, #7
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 8000baa:	f3c2 5846 	ubfx	r8, r2, #21, #7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000bae:	45bc      	cmp	ip, r7
 8000bb0:	46e1      	mov	r9, ip
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000bb2:	f360 230f 	bfi	r3, r0, #8, #8
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000bb6:	bf28      	it	cs
 8000bb8:	46b9      	movcs	r9, r7
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000bba:	45f0      	cmp	r8, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000bbc:	f369 4317 	bfi	r3, r9, #16, #8
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000bc0:	46c1      	mov	r9, r8
 8000bc2:	bf28      	it	cs
 8000bc4:	46f1      	movcs	r9, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000bc6:	f369 631f 	bfi	r3, r9, #24, #8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000bca:	42b1      	cmp	r1, r6
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000bcc:	66e3      	str	r3, [r4, #108]	@ 0x6c
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000bce:	d80b      	bhi.n	8000be8 <ASPEP_RXframeProcess+0x1e4>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8000bd0:	4285      	cmp	r5, r0
 8000bd2:	d809      	bhi.n	8000be8 <ASPEP_RXframeProcess+0x1e4>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8000bd4:	45bc      	cmp	ip, r7
 8000bd6:	d807      	bhi.n	8000be8 <ASPEP_RXframeProcess+0x1e4>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8000bd8:	45f0      	cmp	r8, lr
 8000bda:	d805      	bhi.n	8000be8 <ASPEP_RXframeProcess+0x1e4>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000bdc:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 8000be0:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d002      	beq.n	8000bee <ASPEP_RXframeProcess+0x1ea>
              pHandle->ASPEP_State = ASPEP_IDLE;
 8000be8:	2300      	movs	r3, #0
 8000bea:	f884 3064 	strb.w	r3, [r4, #100]	@ 0x64
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
 8000bee:	f104 016c 	add.w	r1, r4, #108	@ 0x6c
 8000bf2:	4620      	mov	r0, r4
 8000bf4:	f7ff fd72 	bl	80006dc <ASPEP_sendBeacon>
 8000bf8:	e71f      	b.n	8000a3a <ASPEP_RXframeProcess+0x36>
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000bfa:	f890 c01d 	ldrb.w	ip, [r0, #29]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000bfe:	f890 106d 	ldrb.w	r1, [r0, #109]	@ 0x6d
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8000c02:	7f05      	ldrb	r5, [r0, #28]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000c04:	f890 606c 	ldrb.w	r6, [r0, #108]	@ 0x6c
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000c08:	f890 706e 	ldrb.w	r7, [r0, #110]	@ 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000c0c:	f894 906f 	ldrb.w	r9, [r4, #111]	@ 0x6f
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000c10:	f00c 0c3f 	and.w	ip, ip, #63	@ 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8000c14:	09ed      	lsrs	r5, r5, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000c16:	4561      	cmp	r1, ip
 8000c18:	bf28      	it	cs
 8000c1a:	4661      	movcs	r1, ip
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000c1c:	42b5      	cmp	r5, r6
 8000c1e:	4628      	mov	r0, r5
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000c20:	f3c2 3886 	ubfx	r8, r2, #14, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000c24:	bf28      	it	cs
 8000c26:	4630      	movcs	r0, r6
 8000c28:	f360 0307 	bfi	r3, r0, #0, #8
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 8000c2c:	f3c2 5a46 	ubfx	sl, r2, #21, #7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000c30:	45b8      	cmp	r8, r7
 8000c32:	4640      	mov	r0, r8
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000c34:	f361 230f 	bfi	r3, r1, #8, #8
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000c38:	bf28      	it	cs
 8000c3a:	4638      	movcs	r0, r7
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000c3c:	45ca      	cmp	sl, r9
 8000c3e:	46d6      	mov	lr, sl
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000c40:	f360 4317 	bfi	r3, r0, #16, #8
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000c44:	bf28      	it	cs
 8000c46:	46ce      	movcs	lr, r9
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000c48:	f36e 631f 	bfi	r3, lr, #24, #8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000c4c:	42b5      	cmp	r5, r6
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000c4e:	66e3      	str	r3, [r4, #108]	@ 0x6c
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000c50:	d8cd      	bhi.n	8000bee <ASPEP_RXframeProcess+0x1ea>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8000c52:	458c      	cmp	ip, r1
 8000c54:	d8cb      	bhi.n	8000bee <ASPEP_RXframeProcess+0x1ea>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8000c56:	45b8      	cmp	r8, r7
 8000c58:	d8c9      	bhi.n	8000bee <ASPEP_RXframeProcess+0x1ea>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8000c5a:	45ca      	cmp	sl, r9
 8000c5c:	d8c7      	bhi.n	8000bee <ASPEP_RXframeProcess+0x1ea>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000c5e:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 8000c62:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d1c1      	bne.n	8000bee <ASPEP_RXframeProcess+0x1ea>
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000c6a:	1c4b      	adds	r3, r1, #1
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000c6c:	1c42      	adds	r2, r0, #1
 8000c6e:	b2d2      	uxtb	r2, r2
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000c70:	b2db      	uxtb	r3, r3
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000c72:	0152      	lsls	r2, r2, #5
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
 8000c74:	ea4f 1e8e 	mov.w	lr, lr, lsl #6
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000c78:	015b      	lsls	r3, r3, #5
              pHandle->ASPEP_State = ASPEP_CONFIGURED;
 8000c7a:	2101      	movs	r1, #1
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000c7c:	81a2      	strh	r2, [r4, #12]
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
 8000c7e:	f8a4 e00e 	strh.w	lr, [r4, #14]
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000c82:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
              pHandle->ASPEP_State = ASPEP_CONFIGURED;
 8000c86:	f884 1064 	strb.w	r1, [r4, #100]	@ 0x64
 8000c8a:	e7b0      	b.n	8000bee <ASPEP_RXframeProcess+0x1ea>
            ASPEP_sendPing(pHandle, ASPEP_PING_RESET, packetNumber);
 8000c8c:	f3c2 320f 	ubfx	r2, r2, #12, #16
 8000c90:	4619      	mov	r1, r3
 8000c92:	f7ff fd69 	bl	8000768 <ASPEP_sendPing>
 8000c96:	e6d0      	b.n	8000a3a <ASPEP_RXframeProcess+0x36>
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 8000c98:	7f42      	ldrb	r2, [r0, #29]
 8000c9a:	2101      	movs	r1, #1
 8000c9c:	f7ff fd64 	bl	8000768 <ASPEP_sendPing>
 8000ca0:	e6cb      	b.n	8000a3a <ASPEP_RXframeProcess+0x36>
  (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8000ca2:	f104 0120 	add.w	r1, r4, #32
        pHandle->ctrlBuffer.state = readLock;
 8000ca6:	2303      	movs	r3, #3
 8000ca8:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8000cac:	64a1      	str	r1, [r4, #72]	@ 0x48
 8000cae:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8000cb0:	2204      	movs	r2, #4
 8000cb2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8000cb4:	6960      	ldr	r0, [r4, #20]
 8000cb6:	4798      	blx	r3
 8000cb8:	e704      	b.n	8000ac4 <ASPEP_RXframeProcess+0xc0>
 8000cba:	bf00      	nop
 8000cbc:	08007444 	.word	0x08007444
 8000cc0:	08007434 	.word	0x08007434

08000cc4 <ASPEP_HWDataReceivedIT>:
  * If the packet received contains an error in the header, the HW IP will be re-synchronised first, and DMA will be configured after.
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_HWDataReceivedIT(ASPEP_Handle_t *pHandle)
{
 8000cc4:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    switch (pHandle->ASPEP_TL_State)
 8000cc6:	f890 3065 	ldrb.w	r3, [r0, #101]	@ 0x65
{
 8000cca:	4604      	mov	r4, r0
    switch (pHandle->ASPEP_TL_State)
 8000ccc:	b13b      	cbz	r3, 8000cde <ASPEP_HWDataReceivedIT+0x1a>
 8000cce:	2b01      	cmp	r3, #1
 8000cd0:	d104      	bne.n	8000cdc <ASPEP_HWDataReceivedIT+0x18>
        break;
      }

      case WAITING_PAYLOAD:
      {
        pHandle->ASPEP_TL_State = WAITING_PACKET;
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f880 2065 	strb.w	r2, [r0, #101]	@ 0x65
        /* Payload received, */
        pHandle->NewPacketAvailable = true;
 8000cd8:	f880 3061 	strb.w	r3, [r0, #97]	@ 0x61
        break;
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 8000cdc:	bd10      	pop	{r4, pc}
        if (ASPEP_CheckHeaderCRC(*(uint32_t *)pHandle->rxHeader) == true) //cstat !MISRAC2012-Rule-11.3
 8000cde:	69c1      	ldr	r1, [r0, #28]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000ce0:	4a1e      	ldr	r2, [pc, #120]	@ (8000d5c <ASPEP_HWDataReceivedIT+0x98>)
 8000ce2:	b2cb      	uxtb	r3, r1
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000ce4:	5cd3      	ldrb	r3, [r2, r3]
 8000ce6:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 8000cea:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000cec:	5cd3      	ldrb	r3, [r2, r3]
 8000cee:	ea83 4311 	eor.w	r3, r3, r1, lsr #16
 8000cf2:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 24U) & 0xffU)];
 8000cf4:	5cd3      	ldrb	r3, [r2, r3]
 8000cf6:	ea83 6311 	eor.w	r3, r3, r1, lsr #24
        if (ASPEP_CheckHeaderCRC(*(uint32_t *)pHandle->rxHeader) == true) //cstat !MISRAC2012-Rule-11.3
 8000cfa:	5cd3      	ldrb	r3, [r2, r3]
 8000cfc:	b95b      	cbnz	r3, 8000d16 <ASPEP_HWDataReceivedIT+0x52>
          pHandle->rxPacketType = (ASPEP_packetType)(((uint32_t)pHandle->rxHeader[0]) & ID_MASK);
 8000cfe:	7f03      	ldrb	r3, [r0, #28]
 8000d00:	f003 030f 	and.w	r3, r3, #15
 8000d04:	2b06      	cmp	r3, #6
 8000d06:	6683      	str	r3, [r0, #104]	@ 0x68
          switch (pHandle->rxPacketType)
 8000d08:	d809      	bhi.n	8000d1e <ASPEP_HWDataReceivedIT+0x5a>
 8000d0a:	2b04      	cmp	r3, #4
 8000d0c:	d81e      	bhi.n	8000d4c <ASPEP_HWDataReceivedIT+0x88>
              pHandle->badPacketFlag = ASPEP_BAD_PACKET_TYPE;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
}
 8000d14:	bd10      	pop	{r4, pc}
          pHandle->badPacketFlag = ASPEP_BAD_CRC_HEADER;
 8000d16:	2304      	movs	r3, #4
 8000d18:	f880 3062 	strb.w	r3, [r0, #98]	@ 0x62
}
 8000d1c:	bd10      	pop	{r4, pc}
 8000d1e:	2b09      	cmp	r3, #9
 8000d20:	d1f5      	bne.n	8000d0e <ASPEP_HWDataReceivedIT+0x4a>
              pHandle->rxLength = (uint16_t)((*((uint16_t *)pHandle->rxHeader) & 0x1FFF0U) >> (uint16_t)4);
 8000d22:	8b83      	ldrh	r3, [r0, #28]
 8000d24:	091b      	lsrs	r3, r3, #4
 8000d26:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
              if (0U == pHandle->rxLength) /* data packet with length 0 is a valid packet */
 8000d2a:	b17b      	cbz	r3, 8000d4c <ASPEP_HWDataReceivedIT+0x88>
              else if (pHandle->rxLength <= pHandle->maxRXPayload)
 8000d2c:	f8b0 205e 	ldrh.w	r2, [r0, #94]	@ 0x5e
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d30f      	bcc.n	8000d54 <ASPEP_HWDataReceivedIT+0x90>
                pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxBuffer,  /* need to read + 2 bytes CRC*/
 8000d34:	f890 206c 	ldrb.w	r2, [r0, #108]	@ 0x6c
 8000d38:	6981      	ldr	r1, [r0, #24]
 8000d3a:	6940      	ldr	r0, [r0, #20]
 8000d3c:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8000d40:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8000d42:	4798      	blx	r3
                pHandle->ASPEP_TL_State = WAITING_PAYLOAD;
 8000d44:	2301      	movs	r3, #1
 8000d46:	f884 3065 	strb.w	r3, [r4, #101]	@ 0x65
}
 8000d4a:	bd10      	pop	{r4, pc}
              pHandle->NewPacketAvailable = true;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
}
 8000d52:	bd10      	pop	{r4, pc}
                pHandle->badPacketFlag = ASPEP_BAD_PACKET_SIZE;
 8000d54:	2302      	movs	r3, #2
 8000d56:	f880 3062 	strb.w	r3, [r0, #98]	@ 0x62
}
 8000d5a:	bd10      	pop	{r4, pc}
 8000d5c:	08007444 	.word	0x08007444

08000d60 <ASPEP_HWDMAReset>:
  * @brief  Resets DMA after debugger has stopped the MCU.
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_HWDMAReset(ASPEP_Handle_t *pHandle)
{
 8000d60:	4601      	mov	r1, r0
  {
#endif
    /* We must reset the RX state machine to be sure to not be in Waiting packet state */
    /* Otherwise the arrival of a new packet will trigger a NewPacketAvailable despite */
    /* the fact that bytes have been lost because of overrun (debugger paused for instance) */
    pHandle->ASPEP_TL_State = WAITING_PACKET;
 8000d62:	2200      	movs	r2, #0
 8000d64:	f880 2065 	strb.w	r2, [r0, #101]	@ 0x65
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000d68:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8000d6a:	6940      	ldr	r0, [r0, #20]
 8000d6c:	2204      	movs	r2, #4
 8000d6e:	311c      	adds	r1, #28
 8000d70:	4718      	bx	r3
 8000d72:	bf00      	nop

08000d74 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000d74:	b082      	sub	sp, #8

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d76:	4b07      	ldr	r3, [pc, #28]	@ (8000d94 <MX_DMA_Init+0x20>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	9201      	str	r2, [sp, #4]
 8000d7c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d7e:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8000d82:	631a      	str	r2, [r3, #48]	@ 0x30
 8000d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d86:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d8a:	9301      	str	r3, [sp, #4]
 8000d8c:	9b01      	ldr	r3, [sp, #4]

}
 8000d8e:	b002      	add	sp, #8
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	40023800 	.word	0x40023800

08000d98 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d98:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9a:	2400      	movs	r4, #0
{
 8000d9c:	b08a      	sub	sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9e:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8000da2:	e9cd 4406 	strd	r4, r4, [sp, #24]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000da6:	4b2a      	ldr	r3, [pc, #168]	@ (8000e50 <MX_GPIO_Init+0xb8>)
 8000da8:	9400      	str	r4, [sp, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000daa:	9408      	str	r4, [sp, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 8000dae:	4d29      	ldr	r5, [pc, #164]	@ (8000e54 <MX_GPIO_Init+0xbc>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|SPI3_CS_Pin, GPIO_PIN_RESET);
 8000db0:	4e29      	ldr	r6, [pc, #164]	@ (8000e58 <MX_GPIO_Init+0xc0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000db2:	f042 0204 	orr.w	r2, r2, #4
 8000db6:	631a      	str	r2, [r3, #48]	@ 0x30
 8000db8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000dba:	f002 0204 	and.w	r2, r2, #4
 8000dbe:	9200      	str	r2, [sp, #0]
 8000dc0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dc2:	9401      	str	r4, [sp, #4]
 8000dc4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000dc6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000dca:	631a      	str	r2, [r3, #48]	@ 0x30
 8000dcc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000dce:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8000dd2:	9201      	str	r2, [sp, #4]
 8000dd4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd6:	9402      	str	r4, [sp, #8]
 8000dd8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000dda:	f042 0201 	orr.w	r2, r2, #1
 8000dde:	631a      	str	r2, [r3, #48]	@ 0x30
 8000de0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000de2:	f002 0201 	and.w	r2, r2, #1
 8000de6:	9202      	str	r2, [sp, #8]
 8000de8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dea:	9403      	str	r4, [sp, #12]
 8000dec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000dee:	f042 0202 	orr.w	r2, r2, #2
 8000df2:	631a      	str	r2, [r3, #48]	@ 0x30
 8000df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df6:	f003 0302 	and.w	r3, r3, #2
 8000dfa:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 8000dfc:	4622      	mov	r2, r4
 8000dfe:	4628      	mov	r0, r5
 8000e00:	f244 11c0 	movw	r1, #16832	@ 0x41c0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e04:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 8000e06:	f003 fc5d 	bl	80046c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|SPI3_CS_Pin, GPIO_PIN_RESET);
 8000e0a:	4622      	mov	r2, r4
 8000e0c:	4630      	mov	r0, r6
 8000e0e:	f248 0110 	movw	r1, #32784	@ 0x8010
 8000e12:	f003 fc57 	bl	80046c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC6 PC7 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8000e16:	f244 12c0 	movw	r2, #16832	@ 0x41c0
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e9cd 2304 	strd	r2, r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e20:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8000e22:	2200      	movs	r2, #0
 8000e24:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e26:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8000e28:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e2c:	f003 fb3a 	bl	80044a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|SPI3_CS_Pin;
 8000e30:	f248 0210 	movw	r2, #32784	@ 0x8010
 8000e34:	2301      	movs	r3, #1
 8000e36:	e9cd 2304 	strd	r2, r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3a:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = SPI1_CS_Pin|SPI3_CS_Pin;
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e40:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = SPI1_CS_Pin|SPI3_CS_Pin;
 8000e42:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e46:	f003 fb2d 	bl	80044a4 <HAL_GPIO_Init>

}
 8000e4a:	b00a      	add	sp, #40	@ 0x28
 8000e4c:	bd70      	pop	{r4, r5, r6, pc}
 8000e4e:	bf00      	nop
 8000e50:	40023800 	.word	0x40023800
 8000e54:	40020800 	.word	0x40020800
 8000e58:	40020000 	.word	0x40020000
 8000e5c:	00000000 	.word	0x00000000

08000e60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e60:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e62:	2300      	movs	r3, #0
{
 8000e64:	b097      	sub	sp, #92	@ 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e66:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
 8000e6a:	e9cd 330c 	strd	r3, r3, [sp, #48]	@ 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e6e:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8000e72:	e9cd 3305 	strd	r3, r3, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e76:	4926      	ldr	r1, [pc, #152]	@ (8000f10 <SystemClock_Config+0xb0>)
 8000e78:	9301      	str	r3, [sp, #4]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e7a:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e7c:	6c08      	ldr	r0, [r1, #64]	@ 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e7e:	4a25      	ldr	r2, [pc, #148]	@ (8000f14 <SystemClock_Config+0xb4>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e80:	f040 5080 	orr.w	r0, r0, #268435456	@ 0x10000000
 8000e84:	6408      	str	r0, [r1, #64]	@ 0x40
 8000e86:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8000e88:	f001 5180 	and.w	r1, r1, #268435456	@ 0x10000000
 8000e8c:	9101      	str	r1, [sp, #4]
 8000e8e:	9901      	ldr	r1, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e90:	9302      	str	r3, [sp, #8]
 8000e92:	6813      	ldr	r3, [r2, #0]
 8000e94:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000e98:	6013      	str	r3, [r2, #0]
 8000e9a:	6813      	ldr	r3, [r2, #0]
 8000e9c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ea0:	2402      	movs	r4, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ea2:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ea4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ea8:	ed9f 7b17 	vldr	d7, [pc, #92]	@ 8000f08 <SystemClock_Config+0xa8>
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000eac:	e9cd 410e 	strd	r4, r1, [sp, #56]	@ 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000eb0:	9802      	ldr	r0, [sp, #8]
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 180;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000eb2:	9414      	str	r4, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000eb4:	2002      	movs	r0, #2
 8000eb6:	2102      	movs	r1, #2
 8000eb8:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ebc:	2204      	movs	r2, #4
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000ebe:	23b4      	movs	r3, #180	@ 0xb4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ec0:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ec2:	ed8d 7b08 	vstr	d7, [sp, #32]
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ec6:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000ec8:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eca:	f003 fd5f 	bl	800498c <HAL_RCC_OscConfig>
 8000ece:	b108      	cbz	r0, 8000ed4 <SystemClock_Config+0x74>
  __ASM volatile ("cpsid i" : : : "memory");
 8000ed0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ed2:	e7fe      	b.n	8000ed2 <SystemClock_Config+0x72>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000ed4:	f003 fc04 	bl	80046e0 <HAL_PWREx_EnableOverDrive>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	b108      	cbz	r0, 8000ee0 <SystemClock_Config+0x80>
 8000edc:	b672      	cpsid	i
  while (1)
 8000ede:	e7fe      	b.n	8000ede <SystemClock_Config+0x7e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ee0:	220f      	movs	r2, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ee2:	e9cd 2403 	strd	r2, r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ee6:	f44f 55a0 	mov.w	r5, #5120	@ 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000eea:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000eee:	a803      	add	r0, sp, #12
 8000ef0:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ef2:	e9cd 3505 	strd	r3, r5, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ef6:	9207      	str	r2, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ef8:	f003 fc2e 	bl	8004758 <HAL_RCC_ClockConfig>
 8000efc:	b108      	cbz	r0, 8000f02 <SystemClock_Config+0xa2>
 8000efe:	b672      	cpsid	i
  while (1)
 8000f00:	e7fe      	b.n	8000f00 <SystemClock_Config+0xa0>
}
 8000f02:	b017      	add	sp, #92	@ 0x5c
 8000f04:	bd30      	pop	{r4, r5, pc}
 8000f06:	bf00      	nop
 8000f08:	00000001 	.word	0x00000001
 8000f0c:	00010000 	.word	0x00010000
 8000f10:	40023800 	.word	0x40023800
 8000f14:	40007000 	.word	0x40007000

08000f18 <main>:
{
 8000f18:	b500      	push	{lr}
 8000f1a:	b083      	sub	sp, #12
  HAL_Init();
 8000f1c:	f002 ff3c 	bl	8003d98 <HAL_Init>
  SystemClock_Config();
 8000f20:	f7ff ff9e 	bl	8000e60 <SystemClock_Config>
  MX_GPIO_Init();
 8000f24:	f7ff ff38 	bl	8000d98 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f28:	f7ff ff24 	bl	8000d74 <MX_DMA_Init>
  MX_ADC1_Init();
 8000f2c:	f7ff fb0e 	bl	800054c <MX_ADC1_Init>
  MX_TIM1_Init();
 8000f30:	f002 fd16 	bl	8003960 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000f34:	f002 fc46 	bl	80037c4 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000f38:	f002 fdc0 	bl	8003abc <MX_USART2_UART_Init>
  MX_MotorControl_Init();
 8000f3c:	f001 f860 	bl	8002000 <MX_MotorControl_Init>
  MX_SPI1_Init();
 8000f40:	f002 fa48 	bl	80033d4 <MX_SPI1_Init>
  MX_SPI3_Init();
 8000f44:	f002 fa6c 	bl	8003420 <MX_SPI3_Init>
  HAL_NVIC_SetPriority(USART2_IRQn, 3, 1);
 8000f48:	2201      	movs	r2, #1
 8000f4a:	2103      	movs	r1, #3
 8000f4c:	2026      	movs	r0, #38	@ 0x26
 8000f4e:	f003 f9a9 	bl	80042a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f52:	2026      	movs	r0, #38	@ 0x26
 8000f54:	f003 f9e2 	bl	800431c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 3, 0);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	2103      	movs	r1, #3
 8000f5c:	2010      	movs	r0, #16
 8000f5e:	f003 f9a1 	bl	80042a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000f62:	2010      	movs	r0, #16
 8000f64:	f003 f9da 	bl	800431c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(ADC_IRQn, 2, 0);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	2102      	movs	r1, #2
 8000f6c:	2012      	movs	r0, #18
 8000f6e:	f003 f999 	bl	80042a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000f72:	2012      	movs	r0, #18
 8000f74:	f003 f9d2 	bl	800431c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	4611      	mov	r1, r2
 8000f7c:	2019      	movs	r0, #25
 8000f7e:	f003 f991 	bl	80042a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000f82:	2019      	movs	r0, #25
 8000f84:	f003 f9ca 	bl	800431c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 4, 1);
 8000f88:	2201      	movs	r2, #1
 8000f8a:	2104      	movs	r1, #4
 8000f8c:	2018      	movs	r0, #24
 8000f8e:	f003 f989 	bl	80042a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000f92:	2018      	movs	r0, #24
 8000f94:	f003 f9c2 	bl	800431c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	2103      	movs	r1, #3
 8000f9c:	201c      	movs	r0, #28
 8000f9e:	f003 f981 	bl	80042a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fa2:	201c      	movs	r0, #28
 8000fa4:	f003 f9ba 	bl	800431c <HAL_NVIC_EnableIRQ>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);   //B
 8000fa8:	4814      	ldr	r0, [pc, #80]	@ (8000ffc <main+0xe4>)
 8000faa:	2201      	movs	r2, #1
 8000fac:	2140      	movs	r1, #64	@ 0x40
 8000fae:	f003 fb89 	bl	80046c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET); //G
 8000fb2:	4812      	ldr	r0, [pc, #72]	@ (8000ffc <main+0xe4>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	2180      	movs	r1, #128	@ 0x80
 8000fb8:	f003 fb84 	bl	80046c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);   //R
 8000fbc:	480f      	ldr	r0, [pc, #60]	@ (8000ffc <main+0xe4>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fc4:	f003 fb7e 	bl	80046c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);   // DRV Enable
 8000fc8:	2201      	movs	r2, #1
 8000fca:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000fce:	480b      	ldr	r0, [pc, #44]	@ (8000ffc <main+0xe4>)
 8000fd0:	f003 fb78 	bl	80046c4 <HAL_GPIO_WritePin>
  DRV8323_Init();
 8000fd4:	f006 f90c 	bl	80071f0 <DRV8323_Init>
  AS5147U_Init();
 8000fd8:	f006 f8fc 	bl	80071d4 <AS5147U_Init>
  if(Set_CSA_Gain(CSA_GAIN_10_VV))
 8000fdc:	2001      	movs	r0, #1
 8000fde:	f006 f915 	bl	800720c <Set_CSA_Gain>
 8000fe2:	b108      	cbz	r0, 8000fe8 <main+0xd0>
 8000fe4:	b672      	cpsid	i
  while (1)
 8000fe6:	e7fe      	b.n	8000fe6 <main+0xce>
    drv8323_fault_status = Get_Fault_Status();
 8000fe8:	f006 f984 	bl	80072f4 <Get_Fault_Status>
 8000fec:	4603      	mov	r3, r0
    HAL_Delay(1000);
 8000fee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
    drv8323_fault_status = Get_Fault_Status();
 8000ff2:	9301      	str	r3, [sp, #4]
    HAL_Delay(1000);
 8000ff4:	f002 fefc 	bl	8003df0 <HAL_Delay>
  while (1)
 8000ff8:	e7f6      	b.n	8000fe8 <main+0xd0>
 8000ffa:	bf00      	nop
 8000ffc:	40020800 	.word	0x40020800

08001000 <Error_Handler>:
 8001000:	b672      	cpsid	i
  while (1)
 8001002:	e7fe      	b.n	8001002 <Error_Handler+0x2>

08001004 <MC_ProfilerCommand>:
 * @brief Not implemented MC_Profiler function.
 *  */ //cstat !MISRAC2012-Rule-2.7 !RED-unused-param  !MISRAC2012-Rule-2.7  !MISRAC2012-Rule-8.13
__weak uint8_t MC_ProfilerCommand(uint16_t rxLength, uint8_t *rxBuffer, int16_t txSyncFreeSpace, uint16_t *txLength, uint8_t *txBuffer)
{
  return (MCP_CMD_UNKNOWN);
}
 8001004:	2002      	movs	r0, #2
 8001006:	4770      	bx	lr

08001008 <MC_APP_BootHook>:
   */

/* USER CODE BEGIN BootHook */

/* USER CODE END BootHook */
}
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <MC_APP_PostMediumFrequencyHook_M1>:
 * @brief Hook function called right after the Medium Frequency Task for Motor 1.
 *
 *
 *
 */
__weak void MC_APP_PostMediumFrequencyHook_M1(void)
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop

08001010 <MCI_Init>:
  *         (only present if position control is enabled)
  * @param  pPWMHandle pointer to the PWM & current feedback component to be used by the MCI.
  */
__weak void MCI_Init(MCI_Handle_t *pHandle, SpeednTorqCtrl_Handle_t *pSTC, pFOCVars_t pFOCVars,
                     PWMC_Handle_t *pPWMHandle )
{
 8001010:	b410      	push	{r4}
    pHandle->pSTC = pSTC;
    pHandle->pFOCVars = pFOCVars;
    pHandle->pPWM = pPWMHandle;

    /* Buffer related initialization */
    pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8001012:	2400      	movs	r4, #0
    pHandle->hFinalTorque = 0;
    pHandle->hDurationms = 0;
    pHandle->CommandState = MCI_BUFFER_EMPTY;
    pHandle->DirectCommand = MCI_NO_COMMAND;
    pHandle->State = IDLE;
    pHandle->CurrentFaults = MC_NO_FAULTS;
 8001014:	e9c0 4407 	strd	r4, r4, [r0, #28]
    pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8001018:	7304      	strb	r4, [r0, #12]
    pHandle->hFinalSpeed = 0;
 800101a:	f8c0 400e 	str.w	r4, [r0, #14]
    pHandle->CommandState = MCI_BUFFER_EMPTY;
 800101e:	f880 4024 	strb.w	r4, [r0, #36]	@ 0x24
    pHandle->pFOCVars = pFOCVars;
 8001022:	e9c0 1200 	strd	r1, r2, [r0]
    pHandle->PastFaults = MC_NO_FAULTS;
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8001026:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->pPWM = pPWMHandle;
 800102a:	6083      	str	r3, [r0, #8]
}
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <MCI_ExecSpeedRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
 8001030:	f04f 0c01 	mov.w	ip, #1
    pHandle->hFinalSpeed = hFinalSpeed;
    pHandle->hDurationms = hDurationms;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001034:	f240 3301 	movw	r3, #769	@ 0x301
    pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
 8001038:	f880 c00c 	strb.w	ip, [r0, #12]
    pHandle->hFinalSpeed = hFinalSpeed;
 800103c:	81c1      	strh	r1, [r0, #14]
    pHandle->hDurationms = hDurationms;
 800103e:	8382      	strh	r2, [r0, #28]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001040:	8483      	strh	r3, [r0, #36]	@ 0x24
    pHandle->LastModalitySetByUser = MCM_SPEED_MODE;

#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8001042:	4770      	bx	lr

08001044 <MCI_ExecTorqueRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->lastCommand = MCI_CMD_EXECTORQUERAMP;
 8001044:	f04f 0c02 	mov.w	ip, #2
    pHandle->hFinalTorque = hFinalTorque;
    pHandle->hDurationms = hDurationms;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001048:	f240 4301 	movw	r3, #1025	@ 0x401
    pHandle->lastCommand = MCI_CMD_EXECTORQUERAMP;
 800104c:	f880 c00c 	strb.w	ip, [r0, #12]
    pHandle->hFinalTorque = hFinalTorque;
 8001050:	8201      	strh	r1, [r0, #16]
    pHandle->hDurationms = hDurationms;
 8001052:	8382      	strh	r2, [r0, #28]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001054:	8483      	strh	r3, [r0, #36]	@ 0x24
    pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8001056:	4770      	bx	lr

08001058 <MCI_SetCurrentReferences>:
  * function.

  @sa MCI_SetCurrentReferences_F
  */
__weak void MCI_SetCurrentReferences(MCI_Handle_t *pHandle, qd_t Iqdref)
{
 8001058:	b082      	sub	sp, #8
  }
  else
  {
#endif

    pHandle->lastCommand = MCI_CMD_SETCURRENTREFERENCES;
 800105a:	2203      	movs	r2, #3
    pHandle->Iqdref.q = Iqdref.q;
    pHandle->Iqdref.d = Iqdref.d;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800105c:	f240 4301 	movw	r3, #1025	@ 0x401
    pHandle->lastCommand = MCI_CMD_SETCURRENTREFERENCES;
 8001060:	7302      	strb	r2, [r0, #12]
    pHandle->Iqdref.q = Iqdref.q;
 8001062:	f8c0 1012 	str.w	r1, [r0, #18]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001066:	8483      	strh	r3, [r0, #36]	@ 0x24
    pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8001068:	b002      	add	sp, #8
 800106a:	4770      	bx	lr

0800106c <MCI_FaultProcessing>:
  }
  else
  {
#endif
    /* Set current errors */
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 800106c:	8c03      	ldrh	r3, [r0, #32]
    pHandle->PastFaults |= hSetErrors;
 800106e:	f8b0 c022 	ldrh.w	ip, [r0, #34]	@ 0x22
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 8001072:	430b      	orrs	r3, r1
 8001074:	ea23 0302 	bic.w	r3, r3, r2
    pHandle->PastFaults |= hSetErrors;
 8001078:	ea41 010c 	orr.w	r1, r1, ip
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 800107c:	8403      	strh	r3, [r0, #32]
    pHandle->PastFaults |= hSetErrors;
 800107e:	8441      	strh	r1, [r0, #34]	@ 0x22
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop

08001084 <MCI_ExecBufferedCommands>:
    /* Nothing to do */
  }
  else
  {
#endif
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8001084:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8001088:	2b01      	cmp	r3, #1
 800108a:	d000      	beq.n	800108e <MCI_ExecBufferedCommands+0xa>
 800108c:	4770      	bx	lr
{
 800108e:	b510      	push	{r4, lr}
    {
      bool commandHasBeenExecuted = false;
      switch (pHandle->lastCommand)
 8001090:	7b02      	ldrb	r2, [r0, #12]
 8001092:	2a02      	cmp	r2, #2
 8001094:	4604      	mov	r4, r0
 8001096:	d007      	beq.n	80010a8 <MCI_ExecBufferedCommands+0x24>
 8001098:	2a03      	cmp	r2, #3
 800109a:	d028      	beq.n	80010ee <MCI_ExecBufferedCommands+0x6a>
 800109c:	2a01      	cmp	r2, #1
 800109e:	d017      	beq.n	80010d0 <MCI_ExecBufferedCommands+0x4c>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESSFULLY;
      }
      else
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESSFULLY;
 80010a0:	2303      	movs	r3, #3
 80010a2:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
      }
    }
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 80010a6:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 80010a8:	6843      	ldr	r3, [r0, #4]
 80010aa:	2200      	movs	r2, #0
 80010ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 80010b0:	6800      	ldr	r0, [r0, #0]
 80010b2:	2104      	movs	r1, #4
 80010b4:	f005 ffa4 	bl	8007000 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms);
 80010b8:	8ba2      	ldrh	r2, [r4, #28]
 80010ba:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 80010be:	6820      	ldr	r0, [r4, #0]
 80010c0:	f005 ffa2 	bl	8007008 <STC_ExecRamp>
      if (commandHasBeenExecuted)
 80010c4:	2800      	cmp	r0, #0
 80010c6:	d0eb      	beq.n	80010a0 <MCI_ExecBufferedCommands+0x1c>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESSFULLY;
 80010c8:	2302      	movs	r3, #2
 80010ca:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
}
 80010ce:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 80010d0:	6843      	ldr	r3, [r0, #4]
 80010d2:	2200      	movs	r2, #0
 80010d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          STC_SetControlMode(pHandle->pSTC, MCM_SPEED_MODE);
 80010d8:	6800      	ldr	r0, [r0, #0]
 80010da:	2103      	movs	r1, #3
 80010dc:	f005 ff90 	bl	8007000 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms);
 80010e0:	8ba2      	ldrh	r2, [r4, #28]
 80010e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80010e6:	6820      	ldr	r0, [r4, #0]
 80010e8:	f005 ff8e 	bl	8007008 <STC_ExecRamp>
          break;
 80010ec:	e7ea      	b.n	80010c4 <MCI_ExecBufferedCommands+0x40>
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 80010ee:	6842      	ldr	r2, [r0, #4]
 80010f0:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 80010f4:	f8d0 3012 	ldr.w	r3, [r0, #18]
 80010f8:	6113      	str	r3, [r2, #16]
      if (commandHasBeenExecuted)
 80010fa:	e7e5      	b.n	80010c8 <MCI_ExecBufferedCommands+0x44>

080010fc <MCI_GetSTMState>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? FAULT_NOW : pHandle->State);
#else
  return (pHandle->State);
#endif
}
 80010fc:	7fc0      	ldrb	r0, [r0, #31]
 80010fe:	4770      	bx	lr

08001100 <MCI_GetOccurredFaults>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MC_SW_ERROR : (uint16_t)pHandle->PastFaults);
#else
  return ((uint16_t)pHandle->PastFaults);
#endif
}
 8001100:	8c40      	ldrh	r0, [r0, #34]	@ 0x22
 8001102:	4770      	bx	lr

08001104 <MCI_GetCurrentFaults>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MC_SW_ERROR : (uint16_t)pHandle->CurrentFaults);
#else
  return ((uint16_t)pHandle->CurrentFaults);
#endif
}
 8001104:	8c00      	ldrh	r0, [r0, #32]
 8001106:	4770      	bx	lr

08001108 <MCI_StartWithPolarizationMotor>:
{
 8001108:	b510      	push	{r4, lr}
 800110a:	4604      	mov	r4, r0
    if ((IDLE == MCI_GetSTMState(pHandle)) &&
 800110c:	f7ff fff6 	bl	80010fc <MCI_GetSTMState>
 8001110:	b108      	cbz	r0, 8001116 <MCI_StartWithPolarizationMotor+0xe>
  bool retVal = true;
 8001112:	2001      	movs	r0, #1
}
 8001114:	bd10      	pop	{r4, pc}
        (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8001116:	4620      	mov	r0, r4
 8001118:	f7ff fff2 	bl	8001100 <MCI_GetOccurredFaults>
    if ((IDLE == MCI_GetSTMState(pHandle)) &&
 800111c:	2800      	cmp	r0, #0
 800111e:	d1f8      	bne.n	8001112 <MCI_StartWithPolarizationMotor+0xa>
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8001120:	4620      	mov	r0, r4
 8001122:	f7ff ffef 	bl	8001104 <MCI_GetCurrentFaults>
        (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8001126:	2800      	cmp	r0, #0
 8001128:	d1f3      	bne.n	8001112 <MCI_StartWithPolarizationMotor+0xa>
      pHandle->DirectCommand = MCI_START;
 800112a:	2201      	movs	r2, #1
      pHandle->pPWM->offsetCalibStatus = false;
 800112c:	68a1      	ldr	r1, [r4, #8]
      pHandle->DirectCommand = MCI_START;
 800112e:	77a2      	strb	r2, [r4, #30]
      pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001130:	f884 2024 	strb.w	r2, [r4, #36]	@ 0x24
      pHandle->pPWM->offsetCalibStatus = false;
 8001134:	f881 0081 	strb.w	r0, [r1, #129]	@ 0x81
}
 8001138:	bd10      	pop	{r4, pc}
 800113a:	bf00      	nop

0800113c <MCI_StopMotor>:
{
 800113c:	b538      	push	{r3, r4, r5, lr}
 800113e:	4605      	mov	r5, r0
    State = MCI_GetSTMState(pHandle);
 8001140:	f7ff ffdc 	bl	80010fc <MCI_GetSTMState>
    if ((IDLE == State) || (ICLWAIT == State))
 8001144:	4604      	mov	r4, r0
 8001146:	b118      	cbz	r0, 8001150 <MCI_StopMotor+0x14>
 8001148:	f1b0 040c 	subs.w	r4, r0, #12
 800114c:	bf18      	it	ne
 800114e:	2401      	movne	r4, #1
    if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8001150:	4628      	mov	r0, r5
 8001152:	f7ff ffd5 	bl	8001100 <MCI_GetOccurredFaults>
 8001156:	b110      	cbz	r0, 800115e <MCI_StopMotor+0x22>
  bool retVal = false;
 8001158:	2400      	movs	r4, #0
}
 800115a:	4620      	mov	r0, r4
 800115c:	bd38      	pop	{r3, r4, r5, pc}
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 800115e:	4628      	mov	r0, r5
 8001160:	f7ff ffd0 	bl	8001104 <MCI_GetCurrentFaults>
    if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8001164:	2800      	cmp	r0, #0
 8001166:	d1f7      	bne.n	8001158 <MCI_StopMotor+0x1c>
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 8001168:	2c00      	cmp	r4, #0
 800116a:	d0f5      	beq.n	8001158 <MCI_StopMotor+0x1c>
      pHandle->DirectCommand = MCI_STOP;
 800116c:	2305      	movs	r3, #5
 800116e:	77ab      	strb	r3, [r5, #30]
      retVal = true;
 8001170:	e7f3      	b.n	800115a <MCI_StopMotor+0x1e>
 8001172:	bf00      	nop

08001174 <MCI_FaultAcknowledged>:
{
 8001174:	b510      	push	{r4, lr}
 8001176:	4604      	mov	r4, r0
    if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8001178:	f7ff ffc0 	bl	80010fc <MCI_GetSTMState>
 800117c:	280b      	cmp	r0, #11
 800117e:	d001      	beq.n	8001184 <MCI_FaultAcknowledged+0x10>
  bool reVal = false;
 8001180:	2000      	movs	r0, #0
}
 8001182:	bd10      	pop	{r4, pc}
    if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8001184:	4620      	mov	r0, r4
 8001186:	f7ff ffbd 	bl	8001104 <MCI_GetCurrentFaults>
 800118a:	2800      	cmp	r0, #0
 800118c:	d1f8      	bne.n	8001180 <MCI_FaultAcknowledged+0xc>
      pHandle->DirectCommand = MCI_ACK_FAULTS;
 800118e:	2302      	movs	r3, #2
 8001190:	77a3      	strb	r3, [r4, #30]
      pHandle->PastFaults = MC_NO_FAULTS;
 8001192:	8460      	strh	r0, [r4, #34]	@ 0x22
      reVal = true;
 8001194:	2001      	movs	r0, #1
}
 8001196:	bd10      	pop	{r4, pc}

08001198 <MCI_GetFaultState>:
    LocalFaultState = MC_SW_ERROR | (MC_SW_ERROR << 16);
  }
  else
  {
#endif
    LocalFaultState = (uint32_t)(pHandle->PastFaults);
 8001198:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
    LocalFaultState |= (uint32_t)(pHandle->CurrentFaults) << 16;
 800119a:	8c00      	ldrh	r0, [r0, #32]
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
  return (LocalFaultState);
}
 800119c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop

080011a4 <MCI_GetControlMode>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MCM_TORQUE_MODE : pHandle->LastModalitySetByUser);
#else
  return (pHandle->LastModalitySetByUser);
#endif
}
 80011a4:	f890 0025 	ldrb.w	r0, [r0, #37]	@ 0x25
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop

080011ac <MCI_GetLastRampFinalSpeed>:
  }
  return (retVal);
#else
  return (pHandle->hFinalSpeed);
#endif
}
 80011ac:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop

080011b4 <MCI_GetLastRampFinalTorque>:
  }
  return (retVal);
#else
  return (pHandle->hFinalTorque);
#endif
}
 80011b4:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop

080011bc <MCI_GetLastRampFinalDuration>:
  }
  return (retVal);
#else
  return (pHandle->hDurationms);
#endif
}
 80011bc:	8b80      	ldrh	r0, [r0, #28]
 80011be:	4770      	bx	lr

080011c0 <MCI_StopRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    STC_StopRamp(pHandle->pSTC);
 80011c0:	6800      	ldr	r0, [r0, #0]
 80011c2:	f005 bf61 	b.w	8007088 <STC_StopRamp>
 80011c6:	bf00      	nop

080011c8 <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit(MCI_Handle_t *pHandle)
{
 80011c8:	b508      	push	{r3, lr}
    temp_speed = 0;
  }
  else
  {
#endif
    SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor(pHandle->pSTC);
 80011ca:	6800      	ldr	r0, [r0, #0]
 80011cc:	f005 ff06 	bl	8006fdc <STC_GetSpeedSensor>
    temp_speed = SPD_GetAvrgMecSpeedUnit(SpeedSensor);
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
  return (temp_speed);
}
 80011d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    temp_speed = SPD_GetAvrgMecSpeedUnit(SpeedSensor);
 80011d4:	f005 bea2 	b.w	8006f1c <SPD_GetAvrgMecSpeedUnit>

080011d8 <MCI_GetMecSpeedRefUnit>:
__weak int16_t MCI_GetMecSpeedRefUnit(MCI_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? 0 : STC_GetMecSpeedRefUnit(pHandle->pSTC));
#else
  return (STC_GetMecSpeedRefUnit(pHandle->pSTC));
 80011d8:	6800      	ldr	r0, [r0, #0]
 80011da:	f005 bf09 	b.w	8006ff0 <STC_GetMecSpeedRefUnit>
 80011de:	bf00      	nop

080011e0 <MCI_GetIab>:
  {
    tempVal = pHandle->pFOCVars->Iab;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iab);
 80011e0:	6842      	ldr	r2, [r0, #4]
 80011e2:	6810      	ldr	r0, [r2, #0]
 80011e4:	2300      	movs	r3, #0
 80011e6:	b282      	uxth	r2, r0
 80011e8:	f362 030f 	bfi	r3, r2, #0, #16
 80011ec:	0c00      	lsrs	r0, r0, #16
 80011ee:	f360 431f 	bfi	r3, r0, #16, #16
{
 80011f2:	b082      	sub	sp, #8
#endif
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	b002      	add	sp, #8
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop

080011fc <MCI_GetIalphabeta>:
  {
    tempVal = pHandle->pFOCVars->Ialphabeta;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Ialphabeta);
 80011fc:	6842      	ldr	r2, [r0, #4]
 80011fe:	6850      	ldr	r0, [r2, #4]
 8001200:	2300      	movs	r3, #0
 8001202:	b282      	uxth	r2, r0
 8001204:	f362 030f 	bfi	r3, r2, #0, #16
 8001208:	0c00      	lsrs	r0, r0, #16
 800120a:	f360 431f 	bfi	r3, r0, #16, #16
{
 800120e:	b082      	sub	sp, #8
#endif
}
 8001210:	4618      	mov	r0, r3
 8001212:	b002      	add	sp, #8
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop

08001218 <MCI_GetIqd>:
  {
    tempVal = pHandle->pFOCVars->Iqd;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iqd);
 8001218:	6842      	ldr	r2, [r0, #4]
 800121a:	68d0      	ldr	r0, [r2, #12]
 800121c:	2300      	movs	r3, #0
 800121e:	b282      	uxth	r2, r0
 8001220:	f362 030f 	bfi	r3, r2, #0, #16
 8001224:	0c00      	lsrs	r0, r0, #16
 8001226:	f360 431f 	bfi	r3, r0, #16, #16
{
 800122a:	b082      	sub	sp, #8
#endif
}
 800122c:	4618      	mov	r0, r3
 800122e:	b002      	add	sp, #8
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop

08001234 <MCI_GetIqdref>:
  {
    tempVal = pHandle->pFOCVars->Iqdref;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iqdref);
 8001234:	6842      	ldr	r2, [r0, #4]
 8001236:	6910      	ldr	r0, [r2, #16]
 8001238:	2300      	movs	r3, #0
 800123a:	b282      	uxth	r2, r0
 800123c:	f362 030f 	bfi	r3, r2, #0, #16
 8001240:	0c00      	lsrs	r0, r0, #16
 8001242:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001246:	b082      	sub	sp, #8
#endif
}
 8001248:	4618      	mov	r0, r3
 800124a:	b002      	add	sp, #8
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop

08001250 <MCI_GetVqd>:
  {
    tempVal = pHandle->pFOCVars->Vqd;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Vqd);
 8001250:	6842      	ldr	r2, [r0, #4]
 8001252:	f8d2 0016 	ldr.w	r0, [r2, #22]
 8001256:	2300      	movs	r3, #0
 8001258:	b282      	uxth	r2, r0
 800125a:	f362 030f 	bfi	r3, r2, #0, #16
 800125e:	0c00      	lsrs	r0, r0, #16
 8001260:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001264:	b082      	sub	sp, #8
#endif
}
 8001266:	4618      	mov	r0, r3
 8001268:	b002      	add	sp, #8
 800126a:	4770      	bx	lr

0800126c <MCI_GetValphabeta>:
  {
    tempVal = pHandle->pFOCVars->Valphabeta;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Valphabeta);
 800126c:	6842      	ldr	r2, [r0, #4]
 800126e:	f8d2 001a 	ldr.w	r0, [r2, #26]
 8001272:	2300      	movs	r3, #0
 8001274:	b282      	uxth	r2, r0
 8001276:	f362 030f 	bfi	r3, r2, #0, #16
 800127a:	0c00      	lsrs	r0, r0, #16
 800127c:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001280:	b082      	sub	sp, #8
#endif
}
 8001282:	4618      	mov	r0, r3
 8001284:	b002      	add	sp, #8
 8001286:	4770      	bx	lr

08001288 <MCI_GetTeref>:
__weak int16_t MCI_GetTeref(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? 0 : pHandle->pFOCVars->hTeref);
#else
  return (pHandle->pFOCVars->hTeref);
 8001288:	6843      	ldr	r3, [r0, #4]
#endif
}
 800128a:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 800128e:	4770      	bx	lr

08001290 <MCI_Clear_Iqdref>:
/**
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_Clear_Iqdref(MCI_Handle_t *pHandle)
{
 8001290:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref(pHandle->pSTC);
 8001292:	e9d0 0400 	ldrd	r0, r4, [r0]
 8001296:	f005 ff31 	bl	80070fc <STC_GetDefaultIqdref>
 800129a:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800129e:	8220      	strh	r0, [r4, #16]
 80012a0:	8263      	strh	r3, [r4, #18]
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 80012a2:	bd10      	pop	{r4, pc}

080012a4 <MCM_Clarke>:
  *                       beta = -(2*b+a)/sqrt(3)
  * @param  Input: stator values a and b in ab_t format.
  * @retval Stator values alpha and beta in alphabeta_t format.
  */
__weak alphabeta_t MCM_Clarke(ab_t Input)
{
 80012a4:	f3c0 430f 	ubfx	r3, r0, #16, #16
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.a);

  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 80012a8:	f644 11e6 	movw	r1, #18918	@ 0x49e6
#ifndef FULL_MISRA_C_COMPLIANCY_MC_MATH
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 80012ac:	f24b 621a 	movw	r2, #46618	@ 0xb61a
  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 80012b0:	fb13 f301 	smulbb	r3, r3, r1
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 80012b4:	fb10 f202 	smulbb	r2, r0, r2
 80012b8:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
#else
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) / 32768;
#endif

  /* Check saturation of Ibeta */
  if (wbeta_tmp > INT16_MAX)
 80012bc:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
{
 80012c0:	b084      	sub	sp, #16
 80012c2:	b203      	sxth	r3, r0
  if (wbeta_tmp > INT16_MAX)
 80012c4:	da05      	bge.n	80012d2 <MCM_Clarke+0x2e>
 80012c6:	13d1      	asrs	r1, r2, #15
  {
    hbeta_tmp = INT16_MAX;
  }
  else if (wbeta_tmp < (-32768))
 80012c8:	f511 4f00 	cmn.w	r1, #32768	@ 0x8000
 80012cc:	da0c      	bge.n	80012e8 <MCM_Clarke+0x44>
 80012ce:	4a09      	ldr	r2, [pc, #36]	@ (80012f4 <MCM_Clarke+0x50>)
 80012d0:	e001      	b.n	80012d6 <MCM_Clarke+0x32>
 80012d2:	f647 72ff 	movw	r2, #32767	@ 0x7fff
  else
  {
    /* Nothing to do */
  }

  return (Output);
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	2000      	movs	r0, #0
 80012da:	f363 000f 	bfi	r0, r3, #0, #16
 80012de:	b293      	uxth	r3, r2
 80012e0:	f363 401f 	bfi	r0, r3, #16, #16
}
 80012e4:	b004      	add	sp, #16
 80012e6:	4770      	bx	lr
    hbeta_tmp = ((int16_t)wbeta_tmp);
 80012e8:	4802      	ldr	r0, [pc, #8]	@ (80012f4 <MCM_Clarke+0x50>)
 80012ea:	b20a      	sxth	r2, r1
 80012ec:	4282      	cmp	r2, r0
 80012ee:	bfb8      	it	lt
 80012f0:	4602      	movlt	r2, r0
 80012f2:	e7f0      	b.n	80012d6 <MCM_Clarke+0x32>
 80012f4:	ffff8001 	.word	0xffff8001

080012f8 <MCM_Trig_Functions>:
  uint16_t uhindex;

  Trig_Components Local_Components;

  /* 10 bit index computation  */
  shindex = (((int32_t)32768) + ((int32_t)hAngle));
 80012f8:	f500 4000 	add.w	r0, r0, #32768	@ 0x8000
  uhindex = (uint16_t)shindex;
  uhindex /= ((uint16_t)64);
 80012fc:	f3c0 1089 	ubfx	r0, r0, #6, #10

  switch (((uint16_t)uhindex) & SIN_MASK)
 8001300:	f400 7140 	and.w	r1, r0, #768	@ 0x300
 8001304:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
{
 8001308:	b082      	sub	sp, #8
  switch (((uint16_t)uhindex) & SIN_MASK)
 800130a:	d028      	beq.n	800135e <MCM_Trig_Functions+0x66>
 800130c:	f04f 0300 	mov.w	r3, #0
 8001310:	461a      	mov	r2, r3
 8001312:	d816      	bhi.n	8001342 <MCM_Trig_Functions+0x4a>
 8001314:	b361      	cbz	r1, 8001370 <MCM_Trig_Functions+0x78>
 8001316:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800131a:	d109      	bne.n	8001330 <MCM_Trig_Functions+0x38>
      break;
    }

    case U270_360:
    {
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800131c:	b2c0      	uxtb	r0, r0
 800131e:	43c2      	mvns	r2, r0
 8001320:	491a      	ldr	r1, [pc, #104]	@ (800138c <MCM_Trig_Functions+0x94>)
 8001322:	b2d2      	uxtb	r2, r2
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
 8001324:	f931 3010 	ldrsh.w	r3, [r1, r0, lsl #1]
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001328:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800132c:	4252      	negs	r2, r2
 800132e:	b212      	sxth	r2, r2
    }

    default:
      break;
  }
  return (Local_Components);
 8001330:	b29b      	uxth	r3, r3
 8001332:	2000      	movs	r0, #0
 8001334:	f363 000f 	bfi	r0, r3, #0, #16
 8001338:	b292      	uxth	r2, r2
 800133a:	f362 401f 	bfi	r0, r2, #16, #16
}
 800133e:	b002      	add	sp, #8
 8001340:	4770      	bx	lr
  switch (((uint16_t)uhindex) & SIN_MASK)
 8001342:	f5b1 7f40 	cmp.w	r1, #768	@ 0x300
 8001346:	d1f3      	bne.n	8001330 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001348:	4910      	ldr	r1, [pc, #64]	@ (800138c <MCM_Trig_Functions+0x94>)
 800134a:	b2c0      	uxtb	r0, r0
 800134c:	43c2      	mvns	r2, r0
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 800134e:	f831 3010 	ldrh.w	r3, [r1, r0, lsl #1]
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001352:	b2d2      	uxtb	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001354:	425b      	negs	r3, r3
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001356:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 800135a:	b21b      	sxth	r3, r3
      break;
 800135c:	e7e8      	b.n	8001330 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 800135e:	b2c0      	uxtb	r0, r0
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001360:	43c3      	mvns	r3, r0
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8001362:	490a      	ldr	r1, [pc, #40]	@ (800138c <MCM_Trig_Functions+0x94>)
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001364:	b2db      	uxtb	r3, r3
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8001366:	f931 2010 	ldrsh.w	r2, [r1, r0, lsl #1]
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800136a:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
      break;
 800136e:	e7df      	b.n	8001330 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001370:	b2c0      	uxtb	r0, r0
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001372:	43c3      	mvns	r3, r0
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001374:	4905      	ldr	r1, [pc, #20]	@ (800138c <MCM_Trig_Functions+0x94>)
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001376:	b2db      	uxtb	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001378:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800137c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001380:	4252      	negs	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001382:	425b      	negs	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001384:	b212      	sxth	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001386:	b21b      	sxth	r3, r3
      break;
 8001388:	e7d2      	b.n	8001330 <MCM_Trig_Functions+0x38>
 800138a:	bf00      	nop
 800138c:	080075e8 	.word	0x080075e8

08001390 <MCM_Park>:
{
 8001390:	b530      	push	{r4, r5, lr}
 8001392:	4605      	mov	r5, r0
 8001394:	4604      	mov	r4, r0
 8001396:	b085      	sub	sp, #20
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 8001398:	4608      	mov	r0, r1
 800139a:	f7ff ffad 	bl	80012f8 <MCM_Trig_Functions>
 800139e:	b22d      	sxth	r5, r5
 80013a0:	b201      	sxth	r1, r0
 80013a2:	1424      	asrs	r4, r4, #16
 80013a4:	1400      	asrs	r0, r0, #16
  q_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hCos);
 80013a6:	fb05 f301 	mul.w	r3, r5, r1
  wqd_tmp = (q_tmp_1 - q_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 80013aa:	fb04 3310 	mls	r3, r4, r0, r3
  if (wqd_tmp > INT16_MAX)
 80013ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80013b2:	da05      	bge.n	80013c0 <MCM_Park+0x30>
 80013b4:	13da      	asrs	r2, r3, #15
  else if (wqd_tmp < (-32768))
 80013b6:	f512 4f00 	cmn.w	r2, #32768	@ 0x8000
 80013ba:	da22      	bge.n	8001402 <MCM_Park+0x72>
 80013bc:	4a14      	ldr	r2, [pc, #80]	@ (8001410 <MCM_Park+0x80>)
 80013be:	e001      	b.n	80013c4 <MCM_Park+0x34>
 80013c0:	f647 72ff 	movw	r2, #32767	@ 0x7fff
  d_tmp_2 = Input.beta * ((int32_t )Local_Vector_Components.hCos);
 80013c4:	fb01 f404 	mul.w	r4, r1, r4
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 80013c8:	fb05 4400 	mla	r4, r5, r0, r4
  if (wqd_tmp > INT16_MAX)
 80013cc:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 80013d0:	ea4f 33e4 	mov.w	r3, r4, asr #15
  if (wqd_tmp > INT16_MAX)
 80013d4:	da04      	bge.n	80013e0 <MCM_Park+0x50>
  else if (wqd_tmp < (-32768))
 80013d6:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 80013da:	da0c      	bge.n	80013f6 <MCM_Park+0x66>
 80013dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001410 <MCM_Park+0x80>)
 80013de:	e001      	b.n	80013e4 <MCM_Park+0x54>
 80013e0:	f647 73ff 	movw	r3, #32767	@ 0x7fff
  return (Output);
 80013e4:	b292      	uxth	r2, r2
 80013e6:	2000      	movs	r0, #0
 80013e8:	f362 000f 	bfi	r0, r2, #0, #16
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	f363 401f 	bfi	r0, r3, #16, #16
}
 80013f2:	b005      	add	sp, #20
 80013f4:	bd30      	pop	{r4, r5, pc}
    hqd_tmp = ((int16_t)wqd_tmp);
 80013f6:	4906      	ldr	r1, [pc, #24]	@ (8001410 <MCM_Park+0x80>)
 80013f8:	b21b      	sxth	r3, r3
 80013fa:	428b      	cmp	r3, r1
 80013fc:	bfb8      	it	lt
 80013fe:	460b      	movlt	r3, r1
 8001400:	e7f0      	b.n	80013e4 <MCM_Park+0x54>
    hqd_tmp = ((int16_t)wqd_tmp);
 8001402:	4b03      	ldr	r3, [pc, #12]	@ (8001410 <MCM_Park+0x80>)
 8001404:	b212      	sxth	r2, r2
 8001406:	429a      	cmp	r2, r3
 8001408:	bfb8      	it	lt
 800140a:	461a      	movlt	r2, r3
 800140c:	e7da      	b.n	80013c4 <MCM_Park+0x34>
 800140e:	bf00      	nop
 8001410:	ffff8001 	.word	0xffff8001

08001414 <MCM_Rev_Park>:
{
 8001414:	b530      	push	{r4, r5, lr}
 8001416:	4605      	mov	r5, r0
 8001418:	b085      	sub	sp, #20
 800141a:	4604      	mov	r4, r0
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 800141c:	4608      	mov	r0, r1
 800141e:	f7ff ff6b 	bl	80012f8 <MCM_Trig_Functions>
 8001422:	1424      	asrs	r4, r4, #16
 8001424:	1402      	asrs	r2, r0, #16
 8001426:	b22d      	sxth	r5, r5
 8001428:	b200      	sxth	r0, r0
  alpha_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hSin);
 800142a:	fb04 f302 	mul.w	r3, r4, r2
  Output.alpha = (int16_t)(((alpha_tmp1) + (alpha_tmp2)) >> 15);
 800142e:	fb05 3300 	mla	r3, r5, r0, r3
  beta_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hCos);
 8001432:	fb00 f404 	mul.w	r4, r0, r4
  Output.beta = (int16_t)((beta_tmp2 - beta_tmp1) >> 15);
 8001436:	fb05 4412 	mls	r4, r5, r2, r4
  return (Output);
 800143a:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 800143e:	2000      	movs	r0, #0
 8001440:	f363 000f 	bfi	r0, r3, #0, #16
 8001444:	f3c4 34cf 	ubfx	r4, r4, #15, #16
 8001448:	f364 401f 	bfi	r0, r4, #16, #16
}
 800144c:	b005      	add	sp, #20
 800144e:	bd30      	pop	{r4, r5, pc}

08001450 <MCM_Sqrt>:
  */
__weak int32_t MCM_Sqrt(int32_t wInput)
{
  int32_t wtemprootnew;

  if (wInput > 0)
 8001450:	1e03      	subs	r3, r0, #0
 8001452:	dd32      	ble.n	80014ba <MCM_Sqrt+0x6a>
    {
      wtemproot = ((int32_t)128);
    }
    else
    {
      wtemproot = ((int32_t)8192);
 8001454:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001458:	bfd4      	ite	le
 800145a:	2180      	movle	r1, #128	@ 0x80
 800145c:	f44f 5100 	movgt.w	r1, #8192	@ 0x2000
    }

    do
    {
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 8001460:	fb93 f2f1 	sdiv	r2, r3, r1
 8001464:	440a      	add	r2, r1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 8001466:	ebb1 0f62 	cmp.w	r1, r2, asr #1
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 800146a:	ea4f 0062 	mov.w	r0, r2, asr #1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 800146e:	d025      	beq.n	80014bc <MCM_Sqrt+0x6c>
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 8001470:	fb93 f2f0 	sdiv	r2, r3, r0
 8001474:	4402      	add	r2, r0
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 8001476:	ebb0 0f62 	cmp.w	r0, r2, asr #1
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 800147a:	ea4f 0162 	mov.w	r1, r2, asr #1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 800147e:	d01d      	beq.n	80014bc <MCM_Sqrt+0x6c>
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 8001480:	fb93 f2f1 	sdiv	r2, r3, r1
 8001484:	440a      	add	r2, r1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 8001486:	ebb1 0f62 	cmp.w	r1, r2, asr #1
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 800148a:	ea4f 0062 	mov.w	r0, r2, asr #1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 800148e:	d015      	beq.n	80014bc <MCM_Sqrt+0x6c>
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 8001490:	fb93 f2f0 	sdiv	r2, r3, r0
 8001494:	4402      	add	r2, r0
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 8001496:	ebb0 0f62 	cmp.w	r0, r2, asr #1
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 800149a:	ea4f 0162 	mov.w	r1, r2, asr #1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 800149e:	d00d      	beq.n	80014bc <MCM_Sqrt+0x6c>
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 80014a0:	fb93 f2f1 	sdiv	r2, r3, r1
 80014a4:	440a      	add	r2, r1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 80014a6:	ebb1 0f62 	cmp.w	r1, r2, asr #1
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 80014aa:	ea4f 0062 	mov.w	r0, r2, asr #1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 80014ae:	d005      	beq.n	80014bc <MCM_Sqrt+0x6c>
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 80014b0:	fb93 f3f0 	sdiv	r3, r3, r0
 80014b4:	4418      	add	r0, r3
 80014b6:	1040      	asrs	r0, r0, #1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 80014b8:	4770      	bx	lr
    while (biter < 6U);

  }
  else
  {
    wtemprootnew = (int32_t)0;
 80014ba:	2000      	movs	r0, #0
  }

  return (wtemprootnew);
}
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop

080014c0 <FOC_Clear>:
  *         controller. It must be called before each motor restart.
  *         It does not clear speed sensor.
  * @param  bMotor related motor it can be M1 or M2.
  */
__weak void FOC_Clear(uint8_t bMotor)
{
 80014c0:	b538      	push	{r3, r4, r5, lr}
 80014c2:	2326      	movs	r3, #38	@ 0x26
 80014c4:	4916      	ldr	r1, [pc, #88]	@ (8001520 <FOC_Clear+0x60>)
 80014c6:	fb00 f303 	mul.w	r3, r0, r3

  ab_t NULL_ab = {((int16_t)0), ((int16_t)0)};
  qd_t NULL_qd = {((int16_t)0), ((int16_t)0)};
  alphabeta_t NULL_alphabeta = {((int16_t)0), ((int16_t)0)};

  FOCVars[bMotor].Iab = NULL_ab;
 80014ca:	2400      	movs	r4, #0
 80014cc:	50cc      	str	r4, [r1, r3]
{
 80014ce:	4605      	mov	r5, r0
 80014d0:	f103 0208 	add.w	r2, r3, #8
 80014d4:	1858      	adds	r0, r3, r1
 80014d6:	3310      	adds	r3, #16
 80014d8:	440a      	add	r2, r1
 80014da:	440b      	add	r3, r1
  FOCVars[bMotor].hTeref = (int16_t)0;
  FOCVars[bMotor].Vqd = NULL_qd;
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 80014dc:	4911      	ldr	r1, [pc, #68]	@ (8001524 <FOC_Clear+0x64>)
  FOCVars[bMotor].Iab = NULL_ab;
 80014de:	6044      	str	r4, [r0, #4]
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 80014e0:	f851 0025 	ldr.w	r0, [r1, r5, lsl #2]
  FOCVars[bMotor].Iqd = NULL_qd;
 80014e4:	6054      	str	r4, [r2, #4]
 80014e6:	6094      	str	r4, [r2, #8]
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 80014e8:	4621      	mov	r1, r4
  FOCVars[bMotor].Vqd = NULL_qd;
 80014ea:	f8c3 4006 	str.w	r4, [r3, #6]
 80014ee:	f8c3 400a 	str.w	r4, [r3, #10]
 80014f2:	f8c3 400e 	str.w	r4, [r3, #14]
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 80014f6:	f004 fe6f 	bl	80061d8 <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], ((int32_t)0));
 80014fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001528 <FOC_Clear+0x68>)
 80014fc:	4621      	mov	r1, r4
 80014fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8001502:	f004 fe69 	bl	80061d8 <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 8001506:	4b09      	ldr	r3, [pc, #36]	@ (800152c <FOC_Clear+0x6c>)
 8001508:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800150c:	f005 fd68 	bl	8006fe0 <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001510:	4b07      	ldr	r3, [pc, #28]	@ (8001530 <FOC_Clear+0x70>)
 8001512:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 8001516:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 800151a:	f000 bf0b 	b.w	8002334 <PWMC_SwitchOffPWM>
 800151e:	bf00      	nop
 8001520:	20000458 	.word	0x20000458
 8001524:	20000008 	.word	0x20000008
 8001528:	20000004 	.word	0x20000004
 800152c:	2000000c 	.word	0x2000000c
 8001530:	20000450 	.word	0x20000450

08001534 <MCboot>:
  if (MC_NULL == pMCIList)
 8001534:	2800      	cmp	r0, #0
 8001536:	d070      	beq.n	800161a <MCboot+0xe6>
{
 8001538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bMCBootCompleted = (uint8_t )0;
 800153c:	f8df 9124 	ldr.w	r9, [pc, #292]	@ 8001664 <MCboot+0x130>
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8001540:	f8df b124 	ldr.w	fp, [pc, #292]	@ 8001668 <MCboot+0x134>
    EAC_Init(&EncAlignCtrlM1,pSTC[M1],&VirtualSpeedSensorM1,&ENCODER_M1);
 8001544:	4d35      	ldr	r5, [pc, #212]	@ (800161c <MCboot+0xe8>)
 8001546:	4e36      	ldr	r6, [pc, #216]	@ (8001620 <MCboot+0xec>)
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 8001548:	4f36      	ldr	r7, [pc, #216]	@ (8001624 <MCboot+0xf0>)
{
 800154a:	b083      	sub	sp, #12
    bMCBootCompleted = (uint8_t )0;
 800154c:	f04f 0800 	mov.w	r8, #0
 8001550:	4604      	mov	r4, r0
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8001552:	4835      	ldr	r0, [pc, #212]	@ (8001628 <MCboot+0xf4>)
 8001554:	f8cb 0000 	str.w	r0, [fp]
    bMCBootCompleted = (uint8_t )0;
 8001558:	f889 8000 	strb.w	r8, [r9]
    R3_1_Init(&PWM_Handle_M1);
 800155c:	f005 f982 	bl	8006864 <R3_1_Init>
    ASPEP_start(&aspepOverUartA);
 8001560:	4832      	ldr	r0, [pc, #200]	@ (800162c <MCboot+0xf8>)
 8001562:	f7ff f8a7 	bl	80006b4 <ASPEP_start>
    startTimers();
 8001566:	f004 fee3 	bl	8006330 <startTimers>
    PID_HandleInit(&PIDSpeedHandle_M1);
 800156a:	4831      	ldr	r0, [pc, #196]	@ (8001630 <MCboot+0xfc>)
 800156c:	f004 fe20 	bl	80061b0 <PID_HandleInit>
    ENC_Init (&ENCODER_M1);
 8001570:	4830      	ldr	r0, [pc, #192]	@ (8001634 <MCboot+0x100>)
 8001572:	f004 fb45 	bl	8005c00 <ENC_Init>
    EAC_Init(&EncAlignCtrlM1,pSTC[M1],&VirtualSpeedSensorM1,&ENCODER_M1);
 8001576:	6829      	ldr	r1, [r5, #0]
 8001578:	4b2e      	ldr	r3, [pc, #184]	@ (8001634 <MCboot+0x100>)
 800157a:	4a2f      	ldr	r2, [pc, #188]	@ (8001638 <MCboot+0x104>)
 800157c:	4630      	mov	r0, r6
 800157e:	f004 faf3 	bl	8005b68 <EAC_Init>
    pEAC[M1] = &EncAlignCtrlM1;
 8001582:	4b2e      	ldr	r3, [pc, #184]	@ (800163c <MCboot+0x108>)
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &ENCODER_M1._Super);
 8001584:	4a2b      	ldr	r2, [pc, #172]	@ (8001634 <MCboot+0x100>)
 8001586:	492a      	ldr	r1, [pc, #168]	@ (8001630 <MCboot+0xfc>)
 8001588:	6828      	ldr	r0, [r5, #0]
    pEAC[M1] = &EncAlignCtrlM1;
 800158a:	601e      	str	r6, [r3, #0]
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &ENCODER_M1._Super);
 800158c:	f005 fd0e 	bl	8006fac <STC_Init>
    VSS_Init(&VirtualSpeedSensorM1);
 8001590:	4829      	ldr	r0, [pc, #164]	@ (8001638 <MCboot+0x104>)
    RVBS_Init(&BusVoltageSensor_M1);
 8001592:	4e2b      	ldr	r6, [pc, #172]	@ (8001640 <MCboot+0x10c>)
    VSS_Init(&VirtualSpeedSensorM1);
 8001594:	f005 fdd6 	bl	8007144 <VSS_Init>
    PID_HandleInit(&PIDIqHandle_M1);
 8001598:	482a      	ldr	r0, [pc, #168]	@ (8001644 <MCboot+0x110>)
 800159a:	f004 fe09 	bl	80061b0 <PID_HandleInit>
    PID_HandleInit(&PIDIdHandle_M1);
 800159e:	482a      	ldr	r0, [pc, #168]	@ (8001648 <MCboot+0x114>)
 80015a0:	f004 fe06 	bl	80061b0 <PID_HandleInit>
    (void)RCM_RegisterRegConv(&VbusRegConv_M1);
 80015a4:	4829      	ldr	r0, [pc, #164]	@ (800164c <MCboot+0x118>)
 80015a6:	f001 fdd3 	bl	8003150 <RCM_RegisterRegConv>
    RVBS_Init(&BusVoltageSensor_M1);
 80015aa:	4630      	mov	r0, r6
 80015ac:	f005 fc50 	bl	8006e50 <RVBS_Init>
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 80015b0:	4b27      	ldr	r3, [pc, #156]	@ (8001650 <MCboot+0x11c>)
    NTC_Init(&TempSensor_M1);
 80015b2:	4828      	ldr	r0, [pc, #160]	@ (8001654 <MCboot+0x120>)
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	60de      	str	r6, [r3, #12]
    pMPM[M1]->pFOCVars = &FOCVars[M1];
 80015b8:	4e27      	ldr	r6, [pc, #156]	@ (8001658 <MCboot+0x124>)
 80015ba:	609e      	str	r6, [r3, #8]
    NTC_Init(&TempSensor_M1);
 80015bc:	f004 fdda 	bl	8006174 <NTC_Init>
    REMNG_Init(pREMNG[M1]);
 80015c0:	4826      	ldr	r0, [pc, #152]	@ (800165c <MCboot+0x128>)
 80015c2:	f005 fc9f 	bl	8006f04 <REMNG_Init>
    FOC_Clear(M1);
 80015c6:	4640      	mov	r0, r8
 80015c8:	f7ff ff7a 	bl	80014c0 <FOC_Clear>
    FOCVars[M1].bDriveInput = EXTERNAL;
 80015cc:	f04f 0a01 	mov.w	sl, #1
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 80015d0:	6828      	ldr	r0, [r5, #0]
    FOCVars[M1].bDriveInput = EXTERNAL;
 80015d2:	f886 a024 	strb.w	sl, [r6, #36]	@ 0x24
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 80015d6:	f005 fd91 	bl	80070fc <STC_GetDefaultIqdref>
 80015da:	6130      	str	r0, [r6, #16]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 80015dc:	6828      	ldr	r0, [r5, #0]
 80015de:	f005 fd8d 	bl	80070fc <STC_GetDefaultIqdref>
 80015e2:	f3c0 400f 	ubfx	r0, r0, #16, #16
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 80015e6:	6829      	ldr	r1, [r5, #0]
 80015e8:	f8db 3000 	ldr.w	r3, [fp]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 80015ec:	82b0      	strh	r0, [r6, #20]
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 80015ee:	4632      	mov	r2, r6
 80015f0:	4638      	mov	r0, r7
 80015f2:	f7ff fd0d 	bl	8001010 <MCI_Init>
   Mci[M1].pScale = &scaleParams_M1;
 80015f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001660 <MCboot+0x12c>)
    MCI_ExecTorqueRamp(&Mci[M1], STC_GetDefaultIqdref(pSTC[M1]).q, 0);
 80015f8:	6828      	ldr	r0, [r5, #0]
   Mci[M1].pScale = &scaleParams_M1;
 80015fa:	61bb      	str	r3, [r7, #24]
    MCI_ExecTorqueRamp(&Mci[M1], STC_GetDefaultIqdref(pSTC[M1]).q, 0);
 80015fc:	f005 fd7e 	bl	80070fc <STC_GetDefaultIqdref>
 8001600:	4642      	mov	r2, r8
 8001602:	b201      	sxth	r1, r0
 8001604:	4638      	mov	r0, r7
 8001606:	f7ff fd1d 	bl	8001044 <MCI_ExecTorqueRamp>
    pMCIList[M1] = &Mci[M1];
 800160a:	6027      	str	r7, [r4, #0]
    MC_APP_BootHook();
 800160c:	f7ff fcfc 	bl	8001008 <MC_APP_BootHook>
    bMCBootCompleted = 1U;
 8001610:	f889 a000 	strb.w	sl, [r9]
}
 8001614:	b003      	add	sp, #12
 8001616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800161a:	4770      	bx	lr
 800161c:	2000000c 	.word	0x2000000c
 8001620:	20000074 	.word	0x20000074
 8001624:	2000040c 	.word	0x2000040c
 8001628:	20000148 	.word	0x20000148
 800162c:	20000310 	.word	0x20000310
 8001630:	20000278 	.word	0x20000278
 8001634:	20000090 	.word	0x20000090
 8001638:	20000110 	.word	0x20000110
 800163c:	20000454 	.word	0x20000454
 8001640:	2000002c 	.word	0x2000002c
 8001644:	2000024c 	.word	0x2000024c
 8001648:	20000220 	.word	0x20000220
 800164c:	20000048 	.word	0x20000048
 8001650:	20000000 	.word	0x20000000
 8001654:	20000058 	.word	0x20000058
 8001658:	20000458 	.word	0x20000458
 800165c:	20000014 	.word	0x20000014
 8001660:	200002c4 	.word	0x200002c4
 8001664:	20000448 	.word	0x20000448
 8001668:	20000450 	.word	0x20000450

0800166c <FOC_InitAdditionalMethods>:
    {
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
    }
}
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop

08001670 <FOC_CalcCurrRef>:
  *         MTPA algorithm(s). It must be called with the periodicity specified
  *         in oTSC parameters.
  * @param  bMotor related motor it can be M1 or M2.
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 8001670:	b510      	push	{r4, lr}

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if (INTERNAL == FOCVars[bMotor].bDriveInput)
 8001672:	4c08      	ldr	r4, [pc, #32]	@ (8001694 <FOC_CalcCurrRef+0x24>)
 8001674:	2326      	movs	r3, #38	@ 0x26
 8001676:	fb03 4400 	mla	r4, r3, r0, r4
 800167a:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 800167e:	b103      	cbz	r3, 8001682 <FOC_CalcCurrRef+0x12>
    /* Nothing to do */
  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 8001680:	bd10      	pop	{r4, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 8001682:	4b05      	ldr	r3, [pc, #20]	@ (8001698 <FOC_CalcCurrRef+0x28>)
 8001684:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001688:	f005 fd02 	bl	8007090 <STC_CalcTorqueReference>
 800168c:	83e0      	strh	r0, [r4, #30]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 800168e:	8220      	strh	r0, [r4, #16]
}
 8001690:	bd10      	pop	{r4, pc}
 8001692:	bf00      	nop
 8001694:	20000458 	.word	0x20000458
 8001698:	2000000c 	.word	0x2000000c

0800169c <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted.
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 800169c:	4b01      	ldr	r3, [pc, #4]	@ (80016a4 <TSK_SetChargeBootCapDelayM1+0x8>)
 800169e:	8018      	strh	r0, [r3, #0]
}
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	2000044c 	.word	0x2000044c

080016a8 <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise.
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hBootCapDelayCounterM1)
 80016a8:	4b03      	ldr	r3, [pc, #12]	@ (80016b8 <TSK_ChargeBootCapDelayHasElapsedM1+0x10>)
 80016aa:	8818      	ldrh	r0, [r3, #0]
 80016ac:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 80016ae:	fab0 f080 	clz	r0, r0
 80016b2:	0940      	lsrs	r0, r0, #5
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	2000044c 	.word	0x2000044c

080016bc <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted.
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 80016bc:	4b01      	ldr	r3, [pc, #4]	@ (80016c4 <TSK_SetStopPermanencyTimeM1+0x8>)
 80016be:	8018      	strh	r0, [r3, #0]
}
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	2000044a 	.word	0x2000044a

080016c8 <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise.
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hStopPermanencyCounterM1)
 80016c8:	4b03      	ldr	r3, [pc, #12]	@ (80016d8 <TSK_StopPermanencyTimeHasElapsedM1+0x10>)
 80016ca:	8818      	ldrh	r0, [r3, #0]
 80016cc:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 80016ce:	fab0 f080 	clz	r0, r0
 80016d2:	0940      	lsrs	r0, r0, #5
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	2000044a 	.word	0x2000044a

080016dc <TSK_MediumFrequencyTaskM1>:
{
 80016dc:	b570      	push	{r4, r5, r6, lr}
  PQD_CalcElMotorPower(pMPM[M1]);
 80016de:	4d9f      	ldr	r5, [pc, #636]	@ (800195c <TSK_MediumFrequencyTaskM1+0x280>)
  (void)ENC_CalcAvrgMecSpeedUnit(&ENCODER_M1, &wAux);
 80016e0:	489f      	ldr	r0, [pc, #636]	@ (8001960 <TSK_MediumFrequencyTaskM1+0x284>)
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 80016e2:	4ca0      	ldr	r4, [pc, #640]	@ (8001964 <TSK_MediumFrequencyTaskM1+0x288>)
{
 80016e4:	b082      	sub	sp, #8
  int16_t wAux = 0;
 80016e6:	2300      	movs	r3, #0
  (void)ENC_CalcAvrgMecSpeedUnit(&ENCODER_M1, &wAux);
 80016e8:	f10d 0106 	add.w	r1, sp, #6
  int16_t wAux = 0;
 80016ec:	f8ad 3006 	strh.w	r3, [sp, #6]
  (void)ENC_CalcAvrgMecSpeedUnit(&ENCODER_M1, &wAux);
 80016f0:	f004 fae6 	bl	8005cc0 <ENC_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower(pMPM[M1]);
 80016f4:	6828      	ldr	r0, [r5, #0]
 80016f6:	f004 fde1 	bl	80062bc <PQD_CalcElMotorPower>
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 80016fa:	4620      	mov	r0, r4
 80016fc:	f7ff fd02 	bl	8001104 <MCI_GetCurrentFaults>
 8001700:	b118      	cbz	r0, 800170a <TSK_MediumFrequencyTaskM1+0x2e>
    Mci[M1].State = FAULT_NOW;
 8001702:	230a      	movs	r3, #10
 8001704:	77e3      	strb	r3, [r4, #31]
}
 8001706:	b002      	add	sp, #8
 8001708:	bd70      	pop	{r4, r5, r6, pc}
    if (MCI_GetOccurredFaults(&Mci[M1]) == MC_NO_FAULTS)
 800170a:	4620      	mov	r0, r4
 800170c:	f7ff fcf8 	bl	8001100 <MCI_GetOccurredFaults>
 8001710:	bb80      	cbnz	r0, 8001774 <TSK_MediumFrequencyTaskM1+0x98>
      switch (Mci[M1].State)
 8001712:	7fe3      	ldrb	r3, [r4, #31]
 8001714:	2b14      	cmp	r3, #20
 8001716:	d8f6      	bhi.n	8001706 <TSK_MediumFrequencyTaskM1+0x2a>
 8001718:	a201      	add	r2, pc, #4	@ (adr r2, 8001720 <TSK_MediumFrequencyTaskM1+0x44>)
 800171a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800171e:	bf00      	nop
 8001720:	080018bf 	.word	0x080018bf
 8001724:	08001707 	.word	0x08001707
 8001728:	0800186d 	.word	0x0800186d
 800172c:	08001707 	.word	0x08001707
 8001730:	08001707 	.word	0x08001707
 8001734:	08001707 	.word	0x08001707
 8001738:	08001859 	.word	0x08001859
 800173c:	08001707 	.word	0x08001707
 8001740:	0800184d 	.word	0x0800184d
 8001744:	08001707 	.word	0x08001707
 8001748:	08001775 	.word	0x08001775
 800174c:	0800183f 	.word	0x0800183f
 8001750:	08001707 	.word	0x08001707
 8001754:	08001707 	.word	0x08001707
 8001758:	08001707 	.word	0x08001707
 800175c:	08001707 	.word	0x08001707
 8001760:	080017ed 	.word	0x080017ed
 8001764:	080017bb 	.word	0x080017bb
 8001768:	08001707 	.word	0x08001707
 800176c:	08001707 	.word	0x08001707
 8001770:	0800177d 	.word	0x0800177d
      Mci[M1].State = FAULT_OVER;
 8001774:	230b      	movs	r3, #11
 8001776:	77e3      	strb	r3, [r4, #31]
}
 8001778:	b002      	add	sp, #8
 800177a:	bd70      	pop	{r4, r5, r6, pc}
          if (MCI_STOP == Mci[M1].DirectCommand)
 800177c:	7fa3      	ldrb	r3, [r4, #30]
 800177e:	2b05      	cmp	r3, #5
 8001780:	f000 80ad 	beq.w	80018de <TSK_MediumFrequencyTaskM1+0x202>
            if (TSK_StopPermanencyTimeHasElapsedM1())
 8001784:	f7ff ffa0 	bl	80016c8 <TSK_StopPermanencyTimeHasElapsedM1>
 8001788:	2800      	cmp	r0, #0
 800178a:	d0bc      	beq.n	8001706 <TSK_MediumFrequencyTaskM1+0x2a>
              ENC_Clear(&ENCODER_M1);
 800178c:	4874      	ldr	r0, [pc, #464]	@ (8001960 <TSK_MediumFrequencyTaskM1+0x284>)
 800178e:	f004 fa6f 	bl	8005c70 <ENC_Clear>
              R3_1_SwitchOnPWM(pwmcHandle[M1]);
 8001792:	4b75      	ldr	r3, [pc, #468]	@ (8001968 <TSK_MediumFrequencyTaskM1+0x28c>)
 8001794:	6818      	ldr	r0, [r3, #0]
 8001796:	f004 ff15 	bl	80065c4 <R3_1_SwitchOnPWM>
              FOC_InitAdditionalMethods(M1);
 800179a:	2000      	movs	r0, #0
 800179c:	f7ff ff66 	bl	800166c <FOC_InitAdditionalMethods>
              STC_ForceSpeedReferenceToCurrentSpeed(pSTC[M1]); /* Init the reference speed to current speed */
 80017a0:	4b72      	ldr	r3, [pc, #456]	@ (800196c <TSK_MediumFrequencyTaskM1+0x290>)
 80017a2:	6818      	ldr	r0, [r3, #0]
 80017a4:	f005 fcb8 	bl	8007118 <STC_ForceSpeedReferenceToCurrentSpeed>
              MCI_ExecBufferedCommands(&Mci[M1]); /* Exec the speed ramp after changing of the speed sensor */
 80017a8:	486e      	ldr	r0, [pc, #440]	@ (8001964 <TSK_MediumFrequencyTaskM1+0x288>)
 80017aa:	f7ff fc6b 	bl	8001084 <MCI_ExecBufferedCommands>
              FOC_CalcCurrRef(M1);
 80017ae:	2000      	movs	r0, #0
 80017b0:	f7ff ff5e 	bl	8001670 <FOC_CalcCurrRef>
              Mci[M1].State = RUN;
 80017b4:	2306      	movs	r3, #6
 80017b6:	77e3      	strb	r3, [r4, #31]
 80017b8:	e7a5      	b.n	8001706 <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_STOP == Mci[M1].DirectCommand)
 80017ba:	7fa3      	ldrb	r3, [r4, #30]
            if (pwmcHandle[M1]->offsetCalibStatus == false)
 80017bc:	4e6a      	ldr	r6, [pc, #424]	@ (8001968 <TSK_MediumFrequencyTaskM1+0x28c>)
          if (MCI_STOP == Mci[M1].DirectCommand)
 80017be:	2b05      	cmp	r3, #5
            if (pwmcHandle[M1]->offsetCalibStatus == false)
 80017c0:	6830      	ldr	r0, [r6, #0]
          if (MCI_STOP == Mci[M1].DirectCommand)
 80017c2:	f000 808e 	beq.w	80018e2 <TSK_MediumFrequencyTaskM1+0x206>
            if (PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC))
 80017c6:	2101      	movs	r1, #1
 80017c8:	f000 fdb8 	bl	800233c <PWMC_CurrentReadingCalibr>
 80017cc:	2800      	cmp	r0, #0
 80017ce:	d09a      	beq.n	8001706 <TSK_MediumFrequencyTaskM1+0x2a>
              if (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand)
 80017d0:	7fa3      	ldrb	r3, [r4, #30]
 80017d2:	2b03      	cmp	r3, #3
 80017d4:	f000 80a3 	beq.w	800191e <TSK_MediumFrequencyTaskM1+0x242>
                R3_1_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 80017d8:	6830      	ldr	r0, [r6, #0]
 80017da:	2100      	movs	r1, #0
 80017dc:	f004 ffea 	bl	80067b4 <R3_1_TurnOnLowSides>
                TSK_SetChargeBootCapDelayM1(M1_CHARGE_BOOT_CAP_TICKS);
 80017e0:	2014      	movs	r0, #20
 80017e2:	f7ff ff5b 	bl	800169c <TSK_SetChargeBootCapDelayM1>
                Mci[M1].State = CHARGE_BOOT_CAP;
 80017e6:	2310      	movs	r3, #16
 80017e8:	77e3      	strb	r3, [r4, #31]
 80017ea:	e78c      	b.n	8001706 <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_STOP == Mci[M1].DirectCommand)
 80017ec:	7fa3      	ldrb	r3, [r4, #30]
 80017ee:	2b05      	cmp	r3, #5
 80017f0:	d075      	beq.n	80018de <TSK_MediumFrequencyTaskM1+0x202>
            if (TSK_ChargeBootCapDelayHasElapsedM1())
 80017f2:	f7ff ff59 	bl	80016a8 <TSK_ChargeBootCapDelayHasElapsedM1>
 80017f6:	2800      	cmp	r0, #0
 80017f8:	d085      	beq.n	8001706 <TSK_MediumFrequencyTaskM1+0x2a>
              R3_1_SwitchOffPWM(pwmcHandle[M1]);
 80017fa:	4d5b      	ldr	r5, [pc, #364]	@ (8001968 <TSK_MediumFrequencyTaskM1+0x28c>)
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 80017fc:	4e5b      	ldr	r6, [pc, #364]	@ (800196c <TSK_MediumFrequencyTaskM1+0x290>)
              R3_1_SwitchOffPWM(pwmcHandle[M1]);
 80017fe:	6828      	ldr	r0, [r5, #0]
 8001800:	f004 ff2a 	bl	8006658 <R3_1_SwitchOffPWM>
              FOCVars[M1].bDriveInput = EXTERNAL;
 8001804:	4b5a      	ldr	r3, [pc, #360]	@ (8001970 <TSK_MediumFrequencyTaskM1+0x294>)
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8001806:	495b      	ldr	r1, [pc, #364]	@ (8001974 <TSK_MediumFrequencyTaskM1+0x298>)
 8001808:	6830      	ldr	r0, [r6, #0]
              FOCVars[M1].bDriveInput = EXTERNAL;
 800180a:	2201      	movs	r2, #1
 800180c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8001810:	f005 fbe2 	bl	8006fd8 <STC_SetSpeedSensor>
              ENC_Clear(&ENCODER_M1);
 8001814:	4852      	ldr	r0, [pc, #328]	@ (8001960 <TSK_MediumFrequencyTaskM1+0x284>)
 8001816:	f004 fa2b 	bl	8005c70 <ENC_Clear>
              FOC_Clear( M1 );
 800181a:	2000      	movs	r0, #0
 800181c:	f7ff fe50 	bl	80014c0 <FOC_Clear>
              if (EAC_IsAligned(&EncAlignCtrlM1) == false)
 8001820:	4855      	ldr	r0, [pc, #340]	@ (8001978 <TSK_MediumFrequencyTaskM1+0x29c>)
 8001822:	f004 f9e9 	bl	8005bf8 <EAC_IsAligned>
 8001826:	2800      	cmp	r0, #0
 8001828:	f040 8082 	bne.w	8001930 <TSK_MediumFrequencyTaskM1+0x254>
                EAC_StartAlignment(&EncAlignCtrlM1);
 800182c:	4852      	ldr	r0, [pc, #328]	@ (8001978 <TSK_MediumFrequencyTaskM1+0x29c>)
 800182e:	f004 f9a3 	bl	8005b78 <EAC_StartAlignment>
                Mci[M1].State = ALIGNMENT;
 8001832:	2302      	movs	r3, #2
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 8001834:	6828      	ldr	r0, [r5, #0]
                Mci[M1].State = ALIGNMENT;
 8001836:	77e3      	strb	r3, [r4, #31]
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 8001838:	f000 fd7e 	bl	8002338 <PWMC_SwitchOnPWM>
 800183c:	e763      	b.n	8001706 <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_ACK_FAULTS == Mci[M1].DirectCommand)
 800183e:	7fa3      	ldrb	r3, [r4, #30]
 8001840:	2b02      	cmp	r3, #2
 8001842:	f47f af60 	bne.w	8001706 <TSK_MediumFrequencyTaskM1+0x2a>
            Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8001846:	2300      	movs	r3, #0
 8001848:	83e3      	strh	r3, [r4, #30]
 800184a:	e75c      	b.n	8001706 <TSK_MediumFrequencyTaskM1+0x2a>
          if (TSK_StopPermanencyTimeHasElapsedM1())
 800184c:	f7ff ff3c 	bl	80016c8 <TSK_StopPermanencyTimeHasElapsedM1>
 8001850:	2800      	cmp	r0, #0
 8001852:	f43f af58 	beq.w	8001706 <TSK_MediumFrequencyTaskM1+0x2a>
 8001856:	e7f6      	b.n	8001846 <TSK_MediumFrequencyTaskM1+0x16a>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001858:	7fa3      	ldrb	r3, [r4, #30]
 800185a:	2b05      	cmp	r3, #5
 800185c:	d03f      	beq.n	80018de <TSK_MediumFrequencyTaskM1+0x202>
            MCI_ExecBufferedCommands(&Mci[M1]);
 800185e:	4841      	ldr	r0, [pc, #260]	@ (8001964 <TSK_MediumFrequencyTaskM1+0x288>)
 8001860:	f7ff fc10 	bl	8001084 <MCI_ExecBufferedCommands>
              FOC_CalcCurrRef(M1);
 8001864:	2000      	movs	r0, #0
 8001866:	f7ff ff03 	bl	8001670 <FOC_CalcCurrRef>
 800186a:	e74c      	b.n	8001706 <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_STOP == Mci[M1].DirectCommand)
 800186c:	7fa3      	ldrb	r3, [r4, #30]
 800186e:	2b05      	cmp	r3, #5
 8001870:	d035      	beq.n	80018de <TSK_MediumFrequencyTaskM1+0x202>
            bool isAligned = EAC_IsAligned(&EncAlignCtrlM1);
 8001872:	4841      	ldr	r0, [pc, #260]	@ (8001978 <TSK_MediumFrequencyTaskM1+0x29c>)
 8001874:	f004 f9c0 	bl	8005bf8 <EAC_IsAligned>
 8001878:	4605      	mov	r5, r0
            bool EACDone = EAC_Exec(&EncAlignCtrlM1);
 800187a:	483f      	ldr	r0, [pc, #252]	@ (8001978 <TSK_MediumFrequencyTaskM1+0x29c>)
 800187c:	f004 f9a4 	bl	8005bc8 <EAC_Exec>
 8001880:	4606      	mov	r6, r0
            if ((isAligned == false)  && (EACDone == false))
 8001882:	b90d      	cbnz	r5, 8001888 <TSK_MediumFrequencyTaskM1+0x1ac>
 8001884:	2800      	cmp	r0, #0
 8001886:	d042      	beq.n	800190e <TSK_MediumFrequencyTaskM1+0x232>
              R3_1_SwitchOffPWM( pwmcHandle[M1] );
 8001888:	4d37      	ldr	r5, [pc, #220]	@ (8001968 <TSK_MediumFrequencyTaskM1+0x28c>)
              STC_SetControlMode(pSTC[M1], MCM_SPEED_MODE);
 800188a:	4e38      	ldr	r6, [pc, #224]	@ (800196c <TSK_MediumFrequencyTaskM1+0x290>)
              R3_1_SwitchOffPWM( pwmcHandle[M1] );
 800188c:	6828      	ldr	r0, [r5, #0]
 800188e:	f004 fee3 	bl	8006658 <R3_1_SwitchOffPWM>
              STC_SetControlMode(pSTC[M1], MCM_SPEED_MODE);
 8001892:	6830      	ldr	r0, [r6, #0]
 8001894:	2103      	movs	r1, #3
 8001896:	f005 fbb3 	bl	8007000 <STC_SetControlMode>
              STC_SetSpeedSensor(pSTC[M1], &ENCODER_M1._Super);
 800189a:	4931      	ldr	r1, [pc, #196]	@ (8001960 <TSK_MediumFrequencyTaskM1+0x284>)
 800189c:	6830      	ldr	r0, [r6, #0]
 800189e:	f005 fb9b 	bl	8006fd8 <STC_SetSpeedSensor>
              FOC_Clear(M1);
 80018a2:	2000      	movs	r0, #0
 80018a4:	f7ff fe0c 	bl	80014c0 <FOC_Clear>
              R3_1_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 80018a8:	6828      	ldr	r0, [r5, #0]
 80018aa:	2100      	movs	r1, #0
 80018ac:	f004 ff82 	bl	80067b4 <R3_1_TurnOnLowSides>
              TSK_SetStopPermanencyTimeM1(STOPPERMANENCY_TICKS);
 80018b0:	f44f 7048 	mov.w	r0, #800	@ 0x320
 80018b4:	f7ff ff02 	bl	80016bc <TSK_SetStopPermanencyTimeM1>
              Mci[M1].State = WAIT_STOP_MOTOR;
 80018b8:	2314      	movs	r3, #20
 80018ba:	77e3      	strb	r3, [r4, #31]
 80018bc:	e723      	b.n	8001706 <TSK_MediumFrequencyTaskM1+0x2a>
          if ((MCI_START == Mci[M1].DirectCommand) || (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand))
 80018be:	7fa3      	ldrb	r3, [r4, #30]
 80018c0:	f003 03fd 	and.w	r3, r3, #253	@ 0xfd
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	f47f af1e 	bne.w	8001706 <TSK_MediumFrequencyTaskM1+0x2a>
            if (pwmcHandle[M1]->offsetCalibStatus == false)
 80018ca:	4d27      	ldr	r5, [pc, #156]	@ (8001968 <TSK_MediumFrequencyTaskM1+0x28c>)
 80018cc:	6828      	ldr	r0, [r5, #0]
 80018ce:	f890 1081 	ldrb.w	r1, [r0, #129]	@ 0x81
 80018d2:	b9a9      	cbnz	r1, 8001900 <TSK_MediumFrequencyTaskM1+0x224>
              (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_START);
 80018d4:	f000 fd32 	bl	800233c <PWMC_CurrentReadingCalibr>
              Mci[M1].State = OFFSET_CALIB;
 80018d8:	2311      	movs	r3, #17
 80018da:	77e3      	strb	r3, [r4, #31]
 80018dc:	e713      	b.n	8001706 <TSK_MediumFrequencyTaskM1+0x2a>
    R3_1_SwitchOffPWM(pwmcHandle[motor]);
 80018de:	4b22      	ldr	r3, [pc, #136]	@ (8001968 <TSK_MediumFrequencyTaskM1+0x28c>)
 80018e0:	6818      	ldr	r0, [r3, #0]
 80018e2:	f004 feb9 	bl	8006658 <R3_1_SwitchOffPWM>
  FOC_Clear(motor);
 80018e6:	2000      	movs	r0, #0
 80018e8:	f7ff fdea 	bl	80014c0 <FOC_Clear>
  PQD_Clear(pMPM[motor]);
 80018ec:	6828      	ldr	r0, [r5, #0]
 80018ee:	f004 fd01 	bl	80062f4 <PQD_Clear>
  TSK_SetStopPermanencyTimeM1(STOPPERMANENCY_TICKS);
 80018f2:	f44f 7048 	mov.w	r0, #800	@ 0x320
 80018f6:	f7ff fee1 	bl	80016bc <TSK_SetStopPermanencyTimeM1>
  Mci[motor].State = STOP;
 80018fa:	2308      	movs	r3, #8
 80018fc:	77e3      	strb	r3, [r4, #31]
}
 80018fe:	e702      	b.n	8001706 <TSK_MediumFrequencyTaskM1+0x2a>
              (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 8001900:	4619      	mov	r1, r3
              pwmcHandle[M1]->OffCalibrWaitTimeCounter = 1u;
 8001902:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
              (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 8001906:	f000 fd19 	bl	800233c <PWMC_CurrentReadingCalibr>
              R3_1_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 800190a:	6828      	ldr	r0, [r5, #0]
 800190c:	e765      	b.n	80017da <TSK_MediumFrequencyTaskM1+0xfe>
              IqdRef.d = STC_CalcTorqueReference(pSTC[M1]);
 800190e:	4b17      	ldr	r3, [pc, #92]	@ (800196c <TSK_MediumFrequencyTaskM1+0x290>)
 8001910:	6818      	ldr	r0, [r3, #0]
 8001912:	f005 fbbd 	bl	8007090 <STC_CalcTorqueReference>
              FOCVars[M1].Iqdref = IqdRef;
 8001916:	4b16      	ldr	r3, [pc, #88]	@ (8001970 <TSK_MediumFrequencyTaskM1+0x294>)
 8001918:	821e      	strh	r6, [r3, #16]
 800191a:	8258      	strh	r0, [r3, #18]
            {
 800191c:	e6f3      	b.n	8001706 <TSK_MediumFrequencyTaskM1+0x2a>
                FOC_Clear(M1);
 800191e:	2000      	movs	r0, #0
 8001920:	f7ff fdce 	bl	80014c0 <FOC_Clear>
                PQD_Clear(pMPM[M1]);
 8001924:	6828      	ldr	r0, [r5, #0]
 8001926:	f004 fce5 	bl	80062f4 <PQD_Clear>
                Mci[M1].DirectCommand = MCI_NO_COMMAND;
 800192a:	2300      	movs	r3, #0
 800192c:	83e3      	strh	r3, [r4, #30]
 800192e:	e6ea      	b.n	8001706 <TSK_MediumFrequencyTaskM1+0x2a>
                STC_SetControlMode(pSTC[M1], MCM_SPEED_MODE);
 8001930:	6830      	ldr	r0, [r6, #0]
 8001932:	2103      	movs	r1, #3
 8001934:	f005 fb64 	bl	8007000 <STC_SetControlMode>
                STC_SetSpeedSensor(pSTC[M1], &ENCODER_M1._Super);
 8001938:	4909      	ldr	r1, [pc, #36]	@ (8001960 <TSK_MediumFrequencyTaskM1+0x284>)
 800193a:	6830      	ldr	r0, [r6, #0]
 800193c:	f005 fb4c 	bl	8006fd8 <STC_SetSpeedSensor>
                FOC_InitAdditionalMethods(M1);
 8001940:	2000      	movs	r0, #0
 8001942:	f7ff fe93 	bl	800166c <FOC_InitAdditionalMethods>
                FOC_CalcCurrRef(M1);
 8001946:	2000      	movs	r0, #0
 8001948:	f7ff fe92 	bl	8001670 <FOC_CalcCurrRef>
                STC_ForceSpeedReferenceToCurrentSpeed(pSTC[M1]); /* Init the reference speed to current speed */
 800194c:	6830      	ldr	r0, [r6, #0]
 800194e:	f005 fbe3 	bl	8007118 <STC_ForceSpeedReferenceToCurrentSpeed>
                MCI_ExecBufferedCommands(&Mci[M1]); /* Exec the speed ramp after changing of the speed sensor */
 8001952:	4804      	ldr	r0, [pc, #16]	@ (8001964 <TSK_MediumFrequencyTaskM1+0x288>)
 8001954:	f7ff fb96 	bl	8001084 <MCI_ExecBufferedCommands>
 8001958:	2306      	movs	r3, #6
 800195a:	e76b      	b.n	8001834 <TSK_MediumFrequencyTaskM1+0x158>
 800195c:	20000000 	.word	0x20000000
 8001960:	20000090 	.word	0x20000090
 8001964:	2000040c 	.word	0x2000040c
 8001968:	20000450 	.word	0x20000450
 800196c:	2000000c 	.word	0x2000000c
 8001970:	20000458 	.word	0x20000458
 8001974:	20000110 	.word	0x20000110
 8001978:	20000074 	.word	0x20000074

0800197c <MC_Scheduler>:
  if (((uint8_t)1) == bMCBootCompleted)
 800197c:	4b1d      	ldr	r3, [pc, #116]	@ (80019f4 <MC_Scheduler+0x78>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d000      	beq.n	8001986 <MC_Scheduler+0xa>
 8001984:	4770      	bx	lr
{
 8001986:	b570      	push	{r4, r5, r6, lr}
    if(hMFTaskCounterM1 > 0u)
 8001988:	4c1b      	ldr	r4, [pc, #108]	@ (80019f8 <MC_Scheduler+0x7c>)
 800198a:	8823      	ldrh	r3, [r4, #0]
 800198c:	b19b      	cbz	r3, 80019b6 <MC_Scheduler+0x3a>
      hMFTaskCounterM1--;
 800198e:	3b01      	subs	r3, #1
 8001990:	b29b      	uxth	r3, r3
    if(hBootCapDelayCounterM1 > 0U)
 8001992:	4a1a      	ldr	r2, [pc, #104]	@ (80019fc <MC_Scheduler+0x80>)
      hMFTaskCounterM1--;
 8001994:	8023      	strh	r3, [r4, #0]
    if(hBootCapDelayCounterM1 > 0U)
 8001996:	8813      	ldrh	r3, [r2, #0]
 8001998:	b29b      	uxth	r3, r3
 800199a:	b11b      	cbz	r3, 80019a4 <MC_Scheduler+0x28>
      hBootCapDelayCounterM1--;
 800199c:	8813      	ldrh	r3, [r2, #0]
 800199e:	3b01      	subs	r3, #1
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	8013      	strh	r3, [r2, #0]
    if(hStopPermanencyCounterM1 > 0U)
 80019a4:	4a16      	ldr	r2, [pc, #88]	@ (8001a00 <MC_Scheduler+0x84>)
 80019a6:	8813      	ldrh	r3, [r2, #0]
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	b11b      	cbz	r3, 80019b4 <MC_Scheduler+0x38>
      hStopPermanencyCounterM1--;
 80019ac:	8813      	ldrh	r3, [r2, #0]
 80019ae:	3b01      	subs	r3, #1
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	8013      	strh	r3, [r2, #0]
}
 80019b4:	bd70      	pop	{r4, r5, r6, pc}
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess(MCP_Over_UartA.pTransportLayer,
 80019b6:	4d13      	ldr	r5, [pc, #76]	@ (8001a04 <MC_Scheduler+0x88>)
      TSK_MediumFrequencyTaskM1();
 80019b8:	f7ff fe90 	bl	80016dc <TSK_MediumFrequencyTaskM1>
      MC_APP_PostMediumFrequencyHook_M1();
 80019bc:	f7ff fb26 	bl	800100c <MC_APP_PostMediumFrequencyHook_M1>
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess(MCP_Over_UartA.pTransportLayer,
 80019c0:	4629      	mov	r1, r5
 80019c2:	f851 0b0c 	ldr.w	r0, [r1], #12
 80019c6:	6883      	ldr	r3, [r0, #8]
 80019c8:	4798      	blx	r3
 80019ca:	6068      	str	r0, [r5, #4]
      if ( 0U == MCP_Over_UartA.rxBuffer)
 80019cc:	b130      	cbz	r0, 80019dc <MC_Scheduler+0x60>
        if (0U == MCP_Over_UartA.pTransportLayer->fGetBuffer(MCP_Over_UartA.pTransportLayer,
 80019ce:	4629      	mov	r1, r5
 80019d0:	220a      	movs	r2, #10
 80019d2:	f851 0b08 	ldr.w	r0, [r1], #8
 80019d6:	6803      	ldr	r3, [r0, #0]
 80019d8:	4798      	blx	r3
 80019da:	b908      	cbnz	r0, 80019e0 <MC_Scheduler+0x64>
{
 80019dc:	2301      	movs	r3, #1
 80019de:	e7d8      	b.n	8001992 <MC_Scheduler+0x16>
          MCP_ReceivedPacket(&MCP_Over_UartA);
 80019e0:	4628      	mov	r0, r5
 80019e2:	f000 fa39 	bl	8001e58 <MCP_ReceivedPacket>
          MCP_Over_UartA.pTransportLayer->fSendPacket(MCP_Over_UartA.pTransportLayer, MCP_Over_UartA.txBuffer,
 80019e6:	6828      	ldr	r0, [r5, #0]
 80019e8:	89ea      	ldrh	r2, [r5, #14]
 80019ea:	6846      	ldr	r6, [r0, #4]
 80019ec:	68a9      	ldr	r1, [r5, #8]
 80019ee:	230a      	movs	r3, #10
 80019f0:	47b0      	blx	r6
 80019f2:	e7f3      	b.n	80019dc <MC_Scheduler+0x60>
 80019f4:	20000448 	.word	0x20000448
 80019f8:	2000044e 	.word	0x2000044e
 80019fc:	2000044c 	.word	0x2000044c
 8001a00:	2000044a 	.word	0x2000044a
 8001a04:	20000300 	.word	0x20000300

08001a08 <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 8001a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t bMotorNbr = 0;
  /* USER CODE BEGIN HighFrequencyTask 0 */

  /* USER CODE END HighFrequencyTask 0 */

  (void)ENC_CalcAngle(&ENCODER_M1);   /* If not sensorless then 2nd parameter is MC_NULL */
 8001a0c:	4835      	ldr	r0, [pc, #212]	@ (8001ae4 <TSK_HighFrequencyTask+0xdc>)
  int16_t hElAngle;
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
  hElAngle = SPD_GetElAngle(speedHandle);
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8001a0e:	f8df 80f8 	ldr.w	r8, [pc, #248]	@ 8001b08 <TSK_HighFrequencyTask+0x100>
  Ialphabeta = MCM_Clarke(Iab);
  Iqd = MCM_Park(Ialphabeta, hElAngle);
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001a12:	4c35      	ldr	r4, [pc, #212]	@ (8001ae8 <TSK_HighFrequencyTask+0xe0>)
{
 8001a14:	b086      	sub	sp, #24
  (void)ENC_CalcAngle(&ENCODER_M1);   /* If not sensorless then 2nd parameter is MC_NULL */
 8001a16:	f004 f939 	bl	8005c8c <ENC_CalcAngle>
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8001a1a:	4b34      	ldr	r3, [pc, #208]	@ (8001aec <TSK_HighFrequencyTask+0xe4>)
 8001a1c:	6818      	ldr	r0, [r3, #0]
 8001a1e:	f005 fadd 	bl	8006fdc <STC_GetSpeedSensor>
 8001a22:	4607      	mov	r7, r0
  hElAngle = SPD_GetElAngle(speedHandle);
 8001a24:	f005 fa76 	bl	8006f14 <SPD_GetElAngle>
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8001a28:	a903      	add	r1, sp, #12
  hElAngle = SPD_GetElAngle(speedHandle);
 8001a2a:	4605      	mov	r5, r0
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8001a2c:	f8d8 0000 	ldr.w	r0, [r8]
 8001a30:	f000 fb04 	bl	800203c <PWMC_GetPhaseCurrents>
  Ialphabeta = MCM_Clarke(Iab);
 8001a34:	9803      	ldr	r0, [sp, #12]
 8001a36:	f7ff fc35 	bl	80012a4 <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001a3a:	4629      	mov	r1, r5
  Ialphabeta = MCM_Clarke(Iab);
 8001a3c:	9004      	str	r0, [sp, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001a3e:	f7ff fca7 	bl	8001390 <MCM_Park>
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001a42:	4b2b      	ldr	r3, [pc, #172]	@ (8001af0 <TSK_HighFrequencyTask+0xe8>)
 8001a44:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001a48:	9001      	str	r0, [sp, #4]
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001a4a:	b200      	sxth	r0, r0
 8001a4c:	1a09      	subs	r1, r1, r0
 8001a4e:	6818      	ldr	r0, [r3, #0]
 8001a50:	f004 fbf4 	bl	800623c <PI_Controller>
  Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8001a54:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8001a58:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 8001a5c:	1ac9      	subs	r1, r1, r3
 8001a5e:	4b25      	ldr	r3, [pc, #148]	@ (8001af4 <TSK_HighFrequencyTask+0xec>)
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001a60:	4606      	mov	r6, r0
  Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8001a62:	6818      	ldr	r0, [r3, #0]
 8001a64:	f004 fbea 	bl	800623c <PI_Controller>
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 8001a68:	f8ad 6008 	strh.w	r6, [sp, #8]
 8001a6c:	f8ad 000a 	strh.w	r0, [sp, #10]
 8001a70:	9902      	ldr	r1, [sp, #8]
 8001a72:	4821      	ldr	r0, [pc, #132]	@ (8001af8 <TSK_HighFrequencyTask+0xf0>)
 8001a74:	f004 f84a 	bl	8005b0c <Circle_Limitation>
 8001a78:	4606      	mov	r6, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8001a7a:	4638      	mov	r0, r7
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 8001a7c:	9602      	str	r6, [sp, #8]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8001a7e:	f005 fa51 	bl	8006f24 <SPD_GetInstElSpeedDpp>
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8001a82:	4629      	mov	r1, r5
 8001a84:	9802      	ldr	r0, [sp, #8]
 8001a86:	f7ff fcc5 	bl	8001414 <MCM_Rev_Park>
 8001a8a:	4601      	mov	r1, r0
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8001a8c:	f8d8 0000 	ldr.w	r0, [r8]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8001a90:	9105      	str	r1, [sp, #20]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8001a92:	f000 fad5 	bl	8002040 <PWMC_SetPhaseVoltage>

  FOCVars[M1].Vqd = Vqd;
  FOCVars[M1].Iab = Iab;
 8001a96:	9b03      	ldr	r3, [sp, #12]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8001a98:	9a04      	ldr	r2, [sp, #16]
  FOCVars[M1].Iab = Iab;
 8001a9a:	6023      	str	r3, [r4, #0]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8001a9c:	4601      	mov	r1, r0
  FOCVars[M1].Iqd = Iqd;
 8001a9e:	9b01      	ldr	r3, [sp, #4]
  FOCVars[M1].Valphabeta = Valphabeta;
 8001aa0:	9805      	ldr	r0, [sp, #20]
  FOCVars[M1].Vqd = Vqd;
 8001aa2:	f8c4 6016 	str.w	r6, [r4, #22]
  if(hFOCreturn == MC_DURATION)
 8001aa6:	2901      	cmp	r1, #1
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8001aa8:	6062      	str	r2, [r4, #4]
  FOCVars[M1].Iqd = Iqd;
 8001aaa:	60e3      	str	r3, [r4, #12]
  FOCVars[M1].Valphabeta = Valphabeta;
 8001aac:	f8c4 001a 	str.w	r0, [r4, #26]
  FOCVars[M1].hElAngle = hElAngle;
 8001ab0:	8425      	strh	r5, [r4, #32]
  if(hFOCreturn == MC_DURATION)
 8001ab2:	d011      	beq.n	8001ad8 <TSK_HighFrequencyTask+0xd0>
  GLOBAL_TIMESTAMP++;
 8001ab4:	4a11      	ldr	r2, [pc, #68]	@ (8001afc <TSK_HighFrequencyTask+0xf4>)
  if (0U == MCPA_UART_A.Mark)
 8001ab6:	4812      	ldr	r0, [pc, #72]	@ (8001b00 <TSK_HighFrequencyTask+0xf8>)
  GLOBAL_TIMESTAMP++;
 8001ab8:	6813      	ldr	r3, [r2, #0]
  if (0U == MCPA_UART_A.Mark)
 8001aba:	f890 1029 	ldrb.w	r1, [r0, #41]	@ 0x29
  GLOBAL_TIMESTAMP++;
 8001abe:	3301      	adds	r3, #1
 8001ac0:	6013      	str	r3, [r2, #0]
  if (0U == MCPA_UART_A.Mark)
 8001ac2:	b919      	cbnz	r1, 8001acc <TSK_HighFrequencyTask+0xc4>
}
 8001ac4:	2000      	movs	r0, #0
 8001ac6:	b006      	add	sp, #24
 8001ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MCPA_dataLog (&MCPA_UART_A);
 8001acc:	f004 f9e6 	bl	8005e9c <MCPA_dataLog>
}
 8001ad0:	2000      	movs	r0, #0
 8001ad2:	b006      	add	sp, #24
 8001ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MCI_FaultProcessing(&Mci[M1], MC_DURATION, 0);
 8001ad8:	480a      	ldr	r0, [pc, #40]	@ (8001b04 <TSK_HighFrequencyTask+0xfc>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	f7ff fac6 	bl	800106c <MCI_FaultProcessing>
 8001ae0:	e7e8      	b.n	8001ab4 <TSK_HighFrequencyTask+0xac>
 8001ae2:	bf00      	nop
 8001ae4:	20000090 	.word	0x20000090
 8001ae8:	20000458 	.word	0x20000458
 8001aec:	2000000c 	.word	0x2000000c
 8001af0:	20000008 	.word	0x20000008
 8001af4:	20000004 	.word	0x20000004
 8001af8:	20000010 	.word	0x20000010
 8001afc:	2000189c 	.word	0x2000189c
 8001b00:	200002d4 	.word	0x200002d4
 8001b04:	2000040c 	.word	0x2000040c
 8001b08:	20000450 	.word	0x20000450

08001b0c <TSK_SafetyTask_PWMOFF>:
  * @brief  Safety task implementation if  MC.M1_ON_OVER_VOLTAGE == TURN_OFF_PWM.
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink.
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 8001b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */
  uint16_t CodeReturn = MC_NO_ERROR;
  const uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};
  /* Check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
  CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[bMotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 8001b0e:	4f20      	ldr	r7, [pc, #128]	@ (8001b90 <TSK_SafetyTask_PWMOFF+0x84>)
{
 8001b10:	4604      	mov	r4, r0
  CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[bMotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 8001b12:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 8001b16:	f000 fc39 	bl	800238c <PWMC_IsFaultOccurred>
 8001b1a:	4605      	mov	r5, r0
                                                    (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  if (M1 == bMotor)
 8001b1c:	b344      	cbz	r4, 8001b70 <TSK_SafetyTask_PWMOFF+0x64>
  }
  else
  {
    /* Nothing to do */
  }
  MCI_FaultProcessing(&Mci[bMotor], CodeReturn, ~CodeReturn); /* Process faults */
 8001b1e:	4e1d      	ldr	r6, [pc, #116]	@ (8001b94 <TSK_SafetyTask_PWMOFF+0x88>)
 8001b20:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8001b24:	eb06 06c3 	add.w	r6, r6, r3, lsl #3
 8001b28:	43ea      	mvns	r2, r5
 8001b2a:	4630      	mov	r0, r6
 8001b2c:	b292      	uxth	r2, r2
 8001b2e:	4629      	mov	r1, r5
 8001b30:	f7ff fa9c 	bl	800106c <MCI_FaultProcessing>

  if (MCI_GetFaultState(&Mci[bMotor]) != (uint32_t)MC_NO_FAULTS)
 8001b34:	4630      	mov	r0, r6
 8001b36:	f7ff fb2f 	bl	8001198 <MCI_GetFaultState>
 8001b3a:	b1c0      	cbz	r0, 8001b6e <TSK_SafetyTask_PWMOFF+0x62>
  {
    /* Reset Encoder state */
    if (pEAC[bMotor] != MC_NULL)
 8001b3c:	4b16      	ldr	r3, [pc, #88]	@ (8001b98 <TSK_SafetyTask_PWMOFF+0x8c>)
 8001b3e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8001b42:	b110      	cbz	r0, 8001b4a <TSK_SafetyTask_PWMOFF+0x3e>
    {
      EAC_SetRestartState(pEAC[bMotor], false);
 8001b44:	2100      	movs	r1, #0
 8001b46:	f004 f859 	bl	8005bfc <EAC_SetRestartState>
    }
    else
    {
      /* Nothing to do */
    }
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001b4a:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
 8001b4e:	f000 fbf1 	bl	8002334 <PWMC_SwitchOffPWM>
    if (MCPA_UART_A.Mark != 0U)
 8001b52:	4812      	ldr	r0, [pc, #72]	@ (8001b9c <TSK_SafetyTask_PWMOFF+0x90>)
 8001b54:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
 8001b58:	b9b3      	cbnz	r3, 8001b88 <TSK_SafetyTask_PWMOFF+0x7c>
    }
    else
    {
      /* Nothing to do */
    }
    FOC_Clear(bMotor);
 8001b5a:	4620      	mov	r0, r4
 8001b5c:	f7ff fcb0 	bl	80014c0 <FOC_Clear>
    PQD_Clear(pMPM[bMotor]); //cstat !MISRAC2012-Rule-11.3
 8001b60:	4b0f      	ldr	r3, [pc, #60]	@ (8001ba0 <TSK_SafetyTask_PWMOFF+0x94>)
 8001b62:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    /* No errors */
  }
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 8001b66:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    PQD_Clear(pMPM[bMotor]); //cstat !MISRAC2012-Rule-11.3
 8001b6a:	f004 bbc3 	b.w	80062f4 <PQD_Clear>
}
 8001b6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    uint16_t rawValueM1 =  RCM_ExecRegularConv(&VbusRegConv_M1);
 8001b70:	480c      	ldr	r0, [pc, #48]	@ (8001ba4 <TSK_SafetyTask_PWMOFF+0x98>)
 8001b72:	f001 fbcb 	bl	800330c <RCM_ExecRegularConv>
 8001b76:	4601      	mov	r1, r0
    CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(&BusVoltageSensor_M1, rawValueM1);
 8001b78:	480b      	ldr	r0, [pc, #44]	@ (8001ba8 <TSK_SafetyTask_PWMOFF+0x9c>)
 8001b7a:	f005 f995 	bl	8006ea8 <RVBS_CalcAvVbus>
 8001b7e:	f020 0008 	bic.w	r0, r0, #8
 8001b82:	4328      	orrs	r0, r5
 8001b84:	b285      	uxth	r5, r0
 8001b86:	e7ca      	b.n	8001b1e <TSK_SafetyTask_PWMOFF+0x12>
      MCPA_flushDataLog (&MCPA_UART_A);
 8001b88:	f004 fa48 	bl	800601c <MCPA_flushDataLog>
 8001b8c:	e7e5      	b.n	8001b5a <TSK_SafetyTask_PWMOFF+0x4e>
 8001b8e:	bf00      	nop
 8001b90:	20000450 	.word	0x20000450
 8001b94:	2000040c 	.word	0x2000040c
 8001b98:	20000454 	.word	0x20000454
 8001b9c:	200002d4 	.word	0x200002d4
 8001ba0:	20000000 	.word	0x20000000
 8001ba4:	20000048 	.word	0x20000048
 8001ba8:	2000002c 	.word	0x2000002c

08001bac <TSK_SafetyTask>:
{
 8001bac:	b508      	push	{r3, lr}
  if (1U == bMCBootCompleted)
 8001bae:	4b06      	ldr	r3, [pc, #24]	@ (8001bc8 <TSK_SafetyTask+0x1c>)
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d000      	beq.n	8001bb8 <TSK_SafetyTask+0xc>
}
 8001bb6:	bd08      	pop	{r3, pc}
    TSK_SafetyTask_PWMOFF(M1);
 8001bb8:	2000      	movs	r0, #0
 8001bba:	f7ff ffa7 	bl	8001b0c <TSK_SafetyTask_PWMOFF>
}
 8001bbe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCM_ExecUserConv();
 8001bc2:	f001 bbdb 	b.w	800337c <RCM_ExecUserConv>
 8001bc6:	bf00      	nop
 8001bc8:	20000448 	.word	0x20000448

08001bcc <MC_RunMotorControlTasks>:
{
 8001bcc:	b508      	push	{r3, lr}
  if (0U == bMCBootCompleted)
 8001bce:	4b04      	ldr	r3, [pc, #16]	@ (8001be0 <MC_RunMotorControlTasks+0x14>)
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	b903      	cbnz	r3, 8001bd6 <MC_RunMotorControlTasks+0xa>
}
 8001bd4:	bd08      	pop	{r3, pc}
    MC_Scheduler();
 8001bd6:	f7ff fed1 	bl	800197c <MC_Scheduler>
    TSK_SafetyTask();
 8001bda:	f7ff ffe7 	bl	8001bac <TSK_SafetyTask>
}
 8001bde:	bd08      	pop	{r3, pc}
 8001be0:	20000448 	.word	0x20000448

08001be4 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 8001be4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */
  R3_1_SwitchOffPWM(pwmcHandle[M1]);
 8001be6:	4b05      	ldr	r3, [pc, #20]	@ (8001bfc <TSK_HardwareFaultTask+0x18>)
 8001be8:	6818      	ldr	r0, [r3, #0]
 8001bea:	f004 fd35 	bl	8006658 <R3_1_SwitchOffPWM>
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);

  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 8001bee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);
 8001bf2:	4803      	ldr	r0, [pc, #12]	@ (8001c00 <TSK_HardwareFaultTask+0x1c>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	2180      	movs	r1, #128	@ 0x80
 8001bf8:	f7ff ba38 	b.w	800106c <MCI_FaultProcessing>
 8001bfc:	20000450 	.word	0x20000450
 8001c00:	2000040c 	.word	0x2000040c

08001c04 <mc_lock_pins>:

 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration.
  */
__weak void mc_lock_pins (void)
{
 8001c04:	b430      	push	{r4, r5}
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c06:	4a35      	ldr	r2, [pc, #212]	@ (8001cdc <mc_lock_pins+0xd8>)
 8001c08:	4835      	ldr	r0, [pc, #212]	@ (8001ce0 <mc_lock_pins+0xdc>)
 8001c0a:	f44f 3181 	mov.w	r1, #66048	@ 0x10200
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001c0e:	f44f 7400 	mov.w	r4, #512	@ 0x200
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c12:	61d1      	str	r1, [r2, #28]
 8001c14:	b08c      	sub	sp, #48	@ 0x30
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001c16:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c18:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001c1a:	69d3      	ldr	r3, [r2, #28]
 8001c1c:	930b      	str	r3, [sp, #44]	@ 0x2c
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001c1e:	f44f 7580 	mov.w	r5, #256	@ 0x100
  (void) temp;
 8001c22:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c24:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001c26:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c28:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001c2a:	69d3      	ldr	r3, [r2, #28]
 8001c2c:	930a      	str	r3, [sp, #40]	@ 0x28
  (void) temp;
 8001c2e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c30:	4b2c      	ldr	r3, [pc, #176]	@ (8001ce4 <mc_lock_pins+0xe0>)
 8001c32:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001c34:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c36:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001c38:	69d8      	ldr	r0, [r3, #28]
 8001c3a:	9009      	str	r0, [sp, #36]	@ 0x24
  (void) temp;
 8001c3c:	9809      	ldr	r0, [sp, #36]	@ 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c3e:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001c40:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c42:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001c44:	69d9      	ldr	r1, [r3, #28]
 8001c46:	9108      	str	r1, [sp, #32]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001c48:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c4c:	f44f 31a0 	mov.w	r1, #81920	@ 0x14000
  (void) temp;
 8001c50:	9c08      	ldr	r4, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c52:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001c54:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c56:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001c58:	69d1      	ldr	r1, [r2, #28]
 8001c5a:	9107      	str	r1, [sp, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001c5c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c60:	f44f 3182 	mov.w	r1, #66560	@ 0x10400
  (void) temp;
 8001c64:	9c07      	ldr	r4, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c66:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001c68:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c6a:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001c6c:	69d9      	ldr	r1, [r3, #28]
 8001c6e:	9106      	str	r1, [sp, #24]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001c70:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c74:	f44f 31c0 	mov.w	r1, #98304	@ 0x18000
  (void) temp;
 8001c78:	9c06      	ldr	r4, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c7a:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001c7c:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c7e:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001c80:	69d1      	ldr	r1, [r2, #28]
 8001c82:	9105      	str	r1, [sp, #20]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001c84:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c88:	f44f 3190 	mov.w	r1, #73728	@ 0x12000
  (void) temp;
 8001c8c:	9c05      	ldr	r4, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c8e:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001c90:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c92:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001c94:	69d2      	ldr	r2, [r2, #28]
 8001c96:	9204      	str	r2, [sp, #16]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001c98:	2001      	movs	r0, #1
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c9a:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
  (void) temp;
 8001c9e:	9904      	ldr	r1, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001ca0:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001ca2:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001ca4:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001ca6:	69d9      	ldr	r1, [r3, #28]
 8001ca8:	9103      	str	r1, [sp, #12]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001caa:	2402      	movs	r4, #2
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001cac:	490e      	ldr	r1, [pc, #56]	@ (8001ce8 <mc_lock_pins+0xe4>)
  (void) temp;
 8001cae:	9d03      	ldr	r5, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001cb0:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001cb2:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001cb4:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001cb6:	69db      	ldr	r3, [r3, #28]
 8001cb8:	9302      	str	r3, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001cba:	4b0c      	ldr	r3, [pc, #48]	@ (8001cec <mc_lock_pins+0xe8>)
  (void) temp;
 8001cbc:	9d02      	ldr	r5, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001cbe:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001cc0:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001cc2:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001cc4:	69d9      	ldr	r1, [r3, #28]
 8001cc6:	9101      	str	r1, [sp, #4]
  (void) temp;
 8001cc8:	9901      	ldr	r1, [sp, #4]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001cca:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001ccc:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001cce:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001cd0:	69db      	ldr	r3, [r3, #28]
 8001cd2:	9300      	str	r3, [sp, #0]
  (void) temp;
 8001cd4:	9b00      	ldr	r3, [sp, #0]
LL_GPIO_LockPin(M1_PWM_UL_GPIO_Port, M1_PWM_UL_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_U_GPIO_Port, M1_CURR_AMPL_U_Pin);
LL_GPIO_LockPin(M1_BUS_VOLTAGE_GPIO_Port, M1_BUS_VOLTAGE_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_V_GPIO_Port, M1_CURR_AMPL_V_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_W_GPIO_Port, M1_CURR_AMPL_W_Pin);
}
 8001cd6:	b00c      	add	sp, #48	@ 0x30
 8001cd8:	bc30      	pop	{r4, r5}
 8001cda:	4770      	bx	lr
 8001cdc:	40020400 	.word	0x40020400
 8001ce0:	00010100 	.word	0x00010100
 8001ce4:	40020000 	.word	0x40020000
 8001ce8:	00010002 	.word	0x00010002
 8001cec:	40020800 	.word	0x40020800

08001cf0 <RI_SetRegCommandParser>:
  * @param  txSyncFreeSpace Space available for synchronous transmission
  *
  * @retval Returns #MCP_CMD_OK if the command is acknowledged and #MCP_CMD_NOK if not.
  */
uint8_t RI_SetRegCommandParser (MCP_Handle_t * pHandle, uint16_t txSyncFreeSpace)
{
 8001cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  {
#endif
    uint16_t * dataElementID;
    uint8_t * rxData = pHandle->rxBuffer;
    uint8_t * txData = pHandle->txBuffer;
    int16_t rxLength = pHandle->rxLength;
 8001cf4:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
    uint8_t accessResult;

    uint16_t regID;
    uint8_t typeID;
    uint8_t motorID;
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 8001cf8:	4b31      	ldr	r3, [pc, #196]	@ (8001dc0 <RI_SetRegCommandParser+0xd0>)
{
 8001cfa:	b089      	sub	sp, #36	@ 0x24
    uint16_t size = 0U;
 8001cfc:	f04f 0900 	mov.w	r9, #0
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 8001d00:	9306      	str	r3, [sp, #24]
    uint8_t number_of_item =0;
    pHandle->txLength = 0;

    while (rxLength > 0)
 8001d02:	454c      	cmp	r4, r9
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 8001d04:	4b2f      	ldr	r3, [pc, #188]	@ (8001dc4 <RI_SetRegCommandParser+0xd4>)
    uint16_t size = 0U;
 8001d06:	f8ad 9016 	strh.w	r9, [sp, #22]
    uint8_t * txData = pHandle->txBuffer;
 8001d0a:	e9d0 c601 	ldrd	ip, r6, [r0, #4]
{
 8001d0e:	4607      	mov	r7, r0
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 8001d10:	9307      	str	r3, [sp, #28]
    pHandle->txLength = 0;
 8001d12:	f8a0 900e 	strh.w	r9, [r0, #14]
    while (rxLength > 0)
 8001d16:	dd47      	ble.n	8001da8 <RI_SetRegCommandParser+0xb8>
 8001d18:	eb06 0801 	add.w	r8, r6, r1
  uint8_t retVal = MCP_CMD_OK;
 8001d1c:	f8cd 900c 	str.w	r9, [sp, #12]
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
        /* Prepare next data*/
        rxLength = (int16_t) (rxLength - size);
        rxData = rxData+size;
        /* If there is only one CMD in the buffer, we do not store the result */
        if ((1U == number_of_item) && (0 == rxLength))
 8001d20:	f1c6 0a01 	rsb	sl, r6, #1
      rxData = rxData+MCP_ID_SIZE; // Shift buffer to the next data
 8001d24:	f10c 0502 	add.w	r5, ip, #2
      regID = *dataElementID & REG_MASK;
 8001d28:	f8bc c000 	ldrh.w	ip, [ip]
      typeID = (uint8_t)*dataElementID & TYPE_MASK;
 8001d2c:	fa5f f18c 	uxtb.w	r1, ip
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8001d30:	3c02      	subs	r4, #2
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 8001d32:	f001 0b07 	and.w	fp, r1, #7
 8001d36:	f10d 0920 	add.w	r9, sp, #32
      if (motorID > NBR_OF_MOTORS)
 8001d3a:	f01c 0f06 	tst.w	ip, #6
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 8001d3e:	fa0f fe84 	sxth.w	lr, r4
 8001d42:	f10d 0316 	add.w	r3, sp, #22
 8001d46:	462a      	mov	r2, r5
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8001d48:	b2a4      	uxth	r4, r4
      regID = *dataElementID & REG_MASK;
 8001d4a:	f02c 0007 	bic.w	r0, ip, #7
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 8001d4e:	eb09 0b8b 	add.w	fp, r9, fp, lsl #2
 8001d52:	f001 0138 	and.w	r1, r1, #56	@ 0x38
      if (motorID > NBR_OF_MOTORS)
 8001d56:	d11b      	bne.n	8001d90 <RI_SetRegCommandParser+0xa0>
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 8001d58:	f8cd e000 	str.w	lr, [sp]
 8001d5c:	f85b bc08 	ldr.w	fp, [fp, #-8]
 8001d60:	47d8      	blx	fp
        rxLength = (int16_t) (rxLength - size);
 8001d62:	f8bd 2016 	ldrh.w	r2, [sp, #22]
        if ((1U == number_of_item) && (0 == rxLength))
 8001d66:	eb06 030a 	add.w	r3, r6, sl
 8001d6a:	b2db      	uxtb	r3, r3
        rxLength = (int16_t) (rxLength - size);
 8001d6c:	1aa4      	subs	r4, r4, r2
        if ((1U == number_of_item) && (0 == rxLength))
 8001d6e:	2b01      	cmp	r3, #1
        rxLength = (int16_t) (rxLength - size);
 8001d70:	b224      	sxth	r4, r4
        rxData = rxData+size;
 8001d72:	eb05 0c02 	add.w	ip, r5, r2
        if ((1U == number_of_item) && (0 == rxLength))
 8001d76:	d013      	beq.n	8001da0 <RI_SetRegCommandParser+0xb0>
        {
          retVal = accessResult;
        }
        else
        {/* Store the result for each access to be able to report failing access */
          if (txSyncFreeSpace !=0 )
 8001d78:	4546      	cmp	r6, r8
 8001d7a:	d00d      	beq.n	8001d98 <RI_SetRegCommandParser+0xa8>
          {
            *txData = accessResult;
 8001d7c:	f806 0b01 	strb.w	r0, [r6], #1
            txData = txData+1;
            pHandle->txLength++;
 8001d80:	89fb      	ldrh	r3, [r7, #14]
 8001d82:	3301      	adds	r3, #1
 8001d84:	81fb      	strh	r3, [r7, #14]
            txSyncFreeSpace--; /* decrement one by one no wraparound possible */
            retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 8001d86:	b1a0      	cbz	r0, 8001db2 <RI_SetRegCommandParser+0xc2>
            if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FORMAT))
 8001d88:	2807      	cmp	r0, #7
 8001d8a:	d001      	beq.n	8001d90 <RI_SetRegCommandParser+0xa0>
 8001d8c:	280a      	cmp	r0, #10
 8001d8e:	d10e      	bne.n	8001dae <RI_SetRegCommandParser+0xbe>
        retVal = MCP_CMD_NOK;
 8001d90:	2001      	movs	r0, #1
    }
  #ifdef NULL_PTR_CHECK_REG_INT
  }
#endif
  return (retVal);
}
 8001d92:	b009      	add	sp, #36	@ 0x24
 8001d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8001d98:	2008      	movs	r0, #8
}
 8001d9a:	b009      	add	sp, #36	@ 0x24
 8001d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((1U == number_of_item) && (0 == rxLength))
 8001da0:	2c00      	cmp	r4, #0
 8001da2:	d1e9      	bne.n	8001d78 <RI_SetRegCommandParser+0x88>
    if (MCP_CMD_OK == retVal)
 8001da4:	2800      	cmp	r0, #0
 8001da6:	d1f4      	bne.n	8001d92 <RI_SetRegCommandParser+0xa2>
      pHandle->txLength = 0;
 8001da8:	2000      	movs	r0, #0
 8001daa:	81f8      	strh	r0, [r7, #14]
 8001dac:	e7f1      	b.n	8001d92 <RI_SetRegCommandParser+0xa2>
            retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 8001dae:	2301      	movs	r3, #1
 8001db0:	9303      	str	r3, [sp, #12]
    while (rxLength > 0)
 8001db2:	2c00      	cmp	r4, #0
 8001db4:	dcb6      	bgt.n	8001d24 <RI_SetRegCommandParser+0x34>
 8001db6:	9803      	ldr	r0, [sp, #12]
    if (MCP_CMD_OK == retVal)
 8001db8:	2800      	cmp	r0, #0
 8001dba:	d0f5      	beq.n	8001da8 <RI_SetRegCommandParser+0xb8>
 8001dbc:	e7e9      	b.n	8001d92 <RI_SetRegCommandParser+0xa2>
 8001dbe:	bf00      	nop
 8001dc0:	080023c5 	.word	0x080023c5
 8001dc4:	080024c9 	.word	0x080024c9

08001dc8 <RI_GetRegCommandParser>:
  * @param  txSyncFreeSpace Space available for synchronous transmission
  *
  * @retval Returns #MCP_CMD_OK if the command is acknowledged and #MCP_CMD_NOK if not.
  */
uint8_t RI_GetRegCommandParser (MCP_Handle_t * pHandle, uint16_t txSyncFreeSpace)
{
 8001dc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001dcc:	b086      	sub	sp, #24
  {
#endif
    uint16_t * dataElementID;
    uint8_t * rxData = pHandle->rxBuffer;
    uint8_t * txData = pHandle->txBuffer;
    uint16_t size = 0U;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	f8ad 300e 	strh.w	r3, [sp, #14]

    uint16_t regID;
    uint8_t typeID;
    uint8_t motorID;
    uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_GetRegisterGlobal, &RI_GetRegisterMotor1};
    pHandle->txLength = 0;
 8001dd4:	81c3      	strh	r3, [r0, #14]
    uint16_t rxLength = pHandle->rxLength;
 8001dd6:	f8b0 800c 	ldrh.w	r8, [r0, #12]
    uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_GetRegisterGlobal, &RI_GetRegisterMotor1};
 8001dda:	4b1d      	ldr	r3, [pc, #116]	@ (8001e50 <RI_GetRegCommandParser+0x88>)
 8001ddc:	9304      	str	r3, [sp, #16]
 8001dde:	4b1d      	ldr	r3, [pc, #116]	@ (8001e54 <RI_GetRegCommandParser+0x8c>)
    uint8_t * rxData = pHandle->rxBuffer;
 8001de0:	f8d0 9004 	ldr.w	r9, [r0, #4]
    uint8_t * txData = pHandle->txBuffer;
 8001de4:	6886      	ldr	r6, [r0, #8]
    uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_GetRegisterGlobal, &RI_GetRegisterMotor1};
 8001de6:	9305      	str	r3, [sp, #20]
    while (rxLength > 0U)
 8001de8:	f1b8 0f00 	cmp.w	r8, #0
 8001dec:	d016      	beq.n	8001e1c <RI_GetRegCommandParser+0x54>
 8001dee:	4607      	mov	r7, r0
 8001df0:	b20d      	sxth	r5, r1
    uint8_t * rxData = pHandle->rxBuffer;
 8001df2:	464c      	mov	r4, r9
    {
      dataElementID = (uint16_t *) rxData;
      rxLength = rxLength - MCP_ID_SIZE;
      rxData = rxData + MCP_ID_SIZE; // Shift buffer to the next MCP_ID

      regID = *dataElementID & REG_MASK;
 8001df4:	f834 cb02 	ldrh.w	ip, [r4], #2
      typeID = (uint8_t)*dataElementID & TYPE_MASK;
 8001df8:	fa5f f18c 	uxtb.w	r1, ip
        retVal = MCP_CMD_NOK;
        rxLength = 0;
      }
      else
      {
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 8001dfc:	f001 0e07 	and.w	lr, r1, #7
 8001e00:	f10d 0a18 	add.w	sl, sp, #24
      if (motorID > NBR_OF_MOTORS)
 8001e04:	f01c 0f06 	tst.w	ip, #6
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 8001e08:	4632      	mov	r2, r6
      regID = *dataElementID & REG_MASK;
 8001e0a:	f02c 0007 	bic.w	r0, ip, #7
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 8001e0e:	f10d 030e 	add.w	r3, sp, #14
 8001e12:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 8001e16:	f001 0138 	and.w	r1, r1, #56	@ 0x38
      if (motorID > NBR_OF_MOTORS)
 8001e1a:	d003      	beq.n	8001e24 <RI_GetRegCommandParser+0x5c>
        retVal = MCP_CMD_NOK;
 8001e1c:	2001      	movs	r0, #1
    }
#ifdef NULL_PTR_CHECK_REG_INT
  }
#endif
  return (retVal);
}
 8001e1e:	b006      	add	sp, #24
 8001e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 8001e24:	9500      	str	r5, [sp, #0]
 8001e26:	f85e ac08 	ldr.w	sl, [lr, #-8]
 8001e2a:	47d0      	blx	sl
        if (retVal == MCP_CMD_OK )
 8001e2c:	eba8 0304 	sub.w	r3, r8, r4
    while (rxLength > 0U)
 8001e30:	fa19 f383 	uxtah	r3, r9, r3
 8001e34:	b29b      	uxth	r3, r3
        if (retVal == MCP_CMD_OK )
 8001e36:	2800      	cmp	r0, #0
 8001e38:	d1f1      	bne.n	8001e1e <RI_GetRegCommandParser+0x56>
          txData = txData+size;
 8001e3a:	f8bd 100e 	ldrh.w	r1, [sp, #14]
          pHandle->txLength += size;
 8001e3e:	89fa      	ldrh	r2, [r7, #14]
          freeSpaceS16 = freeSpaceS16-size;
 8001e40:	1a6d      	subs	r5, r5, r1
          pHandle->txLength += size;
 8001e42:	440a      	add	r2, r1
          txData = txData+size;
 8001e44:	440e      	add	r6, r1
          pHandle->txLength += size;
 8001e46:	81fa      	strh	r2, [r7, #14]
          freeSpaceS16 = freeSpaceS16-size;
 8001e48:	b22d      	sxth	r5, r5
    while (rxLength > 0U)
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d1d2      	bne.n	8001df4 <RI_GetRegCommandParser+0x2c>
 8001e4e:	e7e6      	b.n	8001e1e <RI_GetRegCommandParser+0x56>
 8001e50:	080028f1 	.word	0x080028f1
 8001e54:	08002a25 	.word	0x08002a25

08001e58 <MCP_ReceivedPacket>:
  * @brief  Parses the header from the received packet and call the required function depending on the command sent by the controller device.
  *
  * @param  pHandle Handler of the current instance of the MCP component
  */
void MCP_ReceivedPacket(MCP_Handle_t *pHandle)
{
 8001e58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e5a:	4604      	mov	r4, r0
  }
  else /* Length is 0, this is a request to send back the last packet */
  {
#endif
    packetHeader = (uint16_t *)pHandle->rxBuffer; //cstat !MISRAC2012-Rule-11.3
    command = (uint16_t)(*packetHeader & CMD_MASK);
 8001e5c:	6846      	ldr	r6, [r0, #4]
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;

    /* Commands requiering payload response must be aware of space available for the payload */
    /* Last byte is reserved for MCP response*/
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8001e5e:	6822      	ldr	r2, [r4, #0]
    command = (uint16_t)(*packetHeader & CMD_MASK);
 8001e60:	f836 3b02 	ldrh.w	r3, [r6], #2
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8001e64:	8980      	ldrh	r0, [r0, #12]
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8001e66:	8992      	ldrh	r2, [r2, #12]
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 8001e68:	f403 457f 	and.w	r5, r3, #65280	@ 0xff00
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8001e6c:	3a01      	subs	r2, #1
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8001e6e:	3802      	subs	r0, #2
    command = (uint16_t)(*packetHeader & CMD_MASK);
 8001e70:	f023 0c07 	bic.w	ip, r3, #7
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 8001e74:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8001e78:	b291      	uxth	r1, r2
{
 8001e7a:	b083      	sub	sp, #12
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8001e7c:	b280      	uxth	r0, r0
    command = (uint16_t)(*packetHeader & CMD_MASK);
 8001e7e:	fa1f fc8c 	uxth.w	ip, ip
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8001e82:	b212      	sxth	r2, r2
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 8001e84:	d045      	beq.n	8001f12 <MCP_ReceivedPacket+0xba>
    motorID = (uint8_t)((*packetHeader - 1U) & MOTOR_MASK);
 8001e86:	3b01      	subs	r3, #1
    MCI_Handle_t *pMCI = &Mci[motorID];
 8001e88:	4f5a      	ldr	r7, [pc, #360]	@ (8001ff4 <MCP_ReceivedPacket+0x19c>)
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8001e8a:	81a0      	strh	r0, [r4, #12]
    MCI_Handle_t *pMCI = &Mci[motorID];
 8001e8c:	f003 0307 	and.w	r3, r3, #7
 8001e90:	eb03 0383 	add.w	r3, r3, r3, lsl #2

    /* Initialization of the tx length, command which send back data has to increment the txLength
     * (case of Read register) */
    pHandle->txLength = 0U;
 8001e94:	2500      	movs	r5, #0

    switch (command)
 8001e96:	f1bc 0f38 	cmp.w	ip, #56	@ 0x38
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 8001e9a:	6066      	str	r6, [r4, #4]
    MCI_Handle_t *pMCI = &Mci[motorID];
 8001e9c:	eb07 07c3 	add.w	r7, r7, r3, lsl #3
    pHandle->txLength = 0U;
 8001ea0:	81e5      	strh	r5, [r4, #14]
    switch (command)
 8001ea2:	d82a      	bhi.n	8001efa <MCP_ReceivedPacket+0xa2>
 8001ea4:	f1bc 0f38 	cmp.w	ip, #56	@ 0x38
 8001ea8:	d81e      	bhi.n	8001ee8 <MCP_ReceivedPacket+0x90>
 8001eaa:	e8df f00c 	tbb	[pc, ip]
 8001eae:	1d68      	.short	0x1d68
 8001eb0:	1d1d1d1d 	.word	0x1d1d1d1d
 8001eb4:	1d701d1d 	.word	0x1d701d1d
 8001eb8:	1d1d1d1d 	.word	0x1d1d1d1d
 8001ebc:	1d751d1d 	.word	0x1d751d1d
 8001ec0:	1d1d1d1d 	.word	0x1d1d1d1d
 8001ec4:	1d7a1d1d 	.word	0x1d7a1d1d
 8001ec8:	1d1d1d1d 	.word	0x1d1d1d1d
 8001ecc:	1d421d1d 	.word	0x1d421d1d
 8001ed0:	1d1d1d1d 	.word	0x1d1d1d1d
 8001ed4:	1d481d1d 	.word	0x1d481d1d
 8001ed8:	1d1d1d1d 	.word	0x1d1d1d1d
 8001edc:	1d3d1d1d 	.word	0x1d3d1d1d
 8001ee0:	1d1d1d1d 	.word	0x1d1d1d1d
 8001ee4:	1d1d      	.short	0x1d1d
 8001ee6:	50          	.byte	0x50
 8001ee7:	00          	.byte	0x00
 8001ee8:	2300      	movs	r3, #0
 8001eea:	2002      	movs	r0, #2
      {
        MCPResponse = MCP_CMD_UNKNOWN;
        break;
      }
    }
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8001eec:	68a2      	ldr	r2, [r4, #8]
 8001eee:	54d0      	strb	r0, [r2, r3]
    pHandle->txLength++;
 8001ef0:	89e3      	ldrh	r3, [r4, #14]
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	81e3      	strh	r3, [r4, #14]
#ifdef NULL_PTR_CHECK_MCP
  }
#endif
}
 8001ef6:	b003      	add	sp, #12
 8001ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch (command)
 8001efa:	f1bc 0f68 	cmp.w	ip, #104	@ 0x68
 8001efe:	d055      	beq.n	8001fac <MCP_ReceivedPacket+0x154>
 8001f00:	f1bc 0f48 	cmp.w	ip, #72	@ 0x48
 8001f04:	d1f0      	bne.n	8001ee8 <MCP_ReceivedPacket+0x90>
        MCI_Clear_Iqdref(pMCI);
 8001f06:	4638      	mov	r0, r7
 8001f08:	f7ff f9c2 	bl	8001290 <MCI_Clear_Iqdref>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8001f0c:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8001f0e:	4628      	mov	r0, r5
        break;
 8001f10:	e7ec      	b.n	8001eec <MCP_ReceivedPacket+0x94>
      userCommand = ((uint8_t)(command & 0xF8U) >> 3U);
 8001f12:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
    pHandle->txLength = 0U;
 8001f16:	2300      	movs	r3, #0
        if ((userCommand < MCP_USER_CALLBACK_MAX) && (MCP_UserCallBack[userCommand] != NULL))
 8001f18:	f1bc 0f01 	cmp.w	ip, #1
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8001f1c:	81a0      	strh	r0, [r4, #12]
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 8001f1e:	6066      	str	r6, [r4, #4]
    pHandle->txLength = 0U;
 8001f20:	81e3      	strh	r3, [r4, #14]
        if ((userCommand < MCP_USER_CALLBACK_MAX) && (MCP_UserCallBack[userCommand] != NULL))
 8001f22:	d954      	bls.n	8001fce <MCP_ReceivedPacket+0x176>
          MCPResponse = MCP_ERROR_CALLBACK_NOT_REGISTRED;
 8001f24:	200d      	movs	r0, #13
 8001f26:	e7e1      	b.n	8001eec <MCP_ReceivedPacket+0x94>
        if (IDLE == MCI_GetSTMState(pMCI))
 8001f28:	4638      	mov	r0, r7
 8001f2a:	f7ff f8e7 	bl	80010fc <MCI_GetSTMState>
 8001f2e:	2800      	cmp	r0, #0
 8001f30:	d045      	beq.n	8001fbe <MCP_ReceivedPacket+0x166>
          (void)MCI_StopMotor(pMCI);
 8001f32:	4638      	mov	r0, r7
 8001f34:	f7ff f902 	bl	800113c <MCI_StopMotor>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8001f38:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8001f3a:	2000      	movs	r0, #0
 8001f3c:	e7d6      	b.n	8001eec <MCP_ReceivedPacket+0x94>
        if (RUN == MCI_GetSTMState(pMCI))
 8001f3e:	4638      	mov	r0, r7
 8001f40:	f7ff f8dc 	bl	80010fc <MCI_GetSTMState>
 8001f44:	2806      	cmp	r0, #6
 8001f46:	d04e      	beq.n	8001fe6 <MCP_ReceivedPacket+0x18e>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8001f48:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8001f4a:	2000      	movs	r0, #0
 8001f4c:	e7ce      	b.n	8001eec <MCP_ReceivedPacket+0x94>
        (void)MCI_FaultAcknowledged(pMCI);
 8001f4e:	4638      	mov	r0, r7
 8001f50:	f7ff f910 	bl	8001174 <MCI_FaultAcknowledged>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);   // DRV Enable
 8001f54:	2200      	movs	r2, #0
 8001f56:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001f5a:	4827      	ldr	r0, [pc, #156]	@ (8001ff8 <MCP_ReceivedPacket+0x1a0>)
 8001f5c:	f002 fbb2 	bl	80046c4 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8001f60:	2001      	movs	r0, #1
 8001f62:	f001 ff45 	bl	8003df0 <HAL_Delay>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);   // DRV Enable
 8001f66:	4824      	ldr	r0, [pc, #144]	@ (8001ff8 <MCP_ReceivedPacket+0x1a0>)
 8001f68:	2201      	movs	r2, #1
 8001f6a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001f6e:	f002 fba9 	bl	80046c4 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8001f72:	2001      	movs	r0, #1
 8001f74:	f001 ff3c 	bl	8003df0 <HAL_Delay>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8001f78:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8001f7a:	2000      	movs	r0, #0
        break;
 8001f7c:	e7b6      	b.n	8001eec <MCP_ReceivedPacket+0x94>
        *pHandle->txBuffer = MCP_VERSION;
 8001f7e:	68a3      	ldr	r3, [r4, #8]
        pHandle->txLength = 4U;
 8001f80:	2104      	movs	r1, #4
        *pHandle->txBuffer = MCP_VERSION;
 8001f82:	2201      	movs	r2, #1
        pHandle->txLength = 4U;
 8001f84:	81e1      	strh	r1, [r4, #14]
        *pHandle->txBuffer = MCP_VERSION;
 8001f86:	701a      	strb	r2, [r3, #0]
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8001f88:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8001f8a:	2000      	movs	r0, #0
        break;
 8001f8c:	e7ae      	b.n	8001eec <MCP_ReceivedPacket+0x94>
        MCPResponse = RI_SetRegCommandParser(pHandle, (uint16_t)txSyncFreeSpace);
 8001f8e:	4620      	mov	r0, r4
 8001f90:	f7ff feae 	bl	8001cf0 <RI_SetRegCommandParser>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8001f94:	89e3      	ldrh	r3, [r4, #14]
        break;
 8001f96:	e7a9      	b.n	8001eec <MCP_ReceivedPacket+0x94>
        MCPResponse = RI_GetRegCommandParser(pHandle, (uint16_t)txSyncFreeSpace);
 8001f98:	4620      	mov	r0, r4
 8001f9a:	f7ff ff15 	bl	8001dc8 <RI_GetRegCommandParser>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8001f9e:	89e3      	ldrh	r3, [r4, #14]
        break;
 8001fa0:	e7a4      	b.n	8001eec <MCP_ReceivedPacket+0x94>
        MCPResponse = (MCI_StartWithPolarizationMotor(pMCI) == false) ? MCP_CMD_OK : MCP_CMD_NOK;
 8001fa2:	4638      	mov	r0, r7
 8001fa4:	f7ff f8b0 	bl	8001108 <MCI_StartWithPolarizationMotor>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8001fa8:	89e3      	ldrh	r3, [r4, #14]
 8001faa:	e79f      	b.n	8001eec <MCP_ReceivedPacket+0x94>
        MCPResponse = MC_ProfilerCommand(pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace, &pHandle->txLength,
 8001fac:	68a3      	ldr	r3, [r4, #8]
 8001fae:	9300      	str	r3, [sp, #0]
 8001fb0:	4631      	mov	r1, r6
 8001fb2:	f104 030e 	add.w	r3, r4, #14
 8001fb6:	f7ff f825 	bl	8001004 <MC_ProfilerCommand>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8001fba:	89e3      	ldrh	r3, [r4, #14]
        break;
 8001fbc:	e796      	b.n	8001eec <MCP_ReceivedPacket+0x94>
          MCPResponse = (MCI_StartWithPolarizationMotor(pMCI) == true) ? MCP_CMD_OK : MCP_CMD_NOK;
 8001fbe:	4638      	mov	r0, r7
 8001fc0:	f7ff f8a2 	bl	8001108 <MCI_StartWithPolarizationMotor>
 8001fc4:	f080 0001 	eor.w	r0, r0, #1
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8001fc8:	89e3      	ldrh	r3, [r4, #14]
          MCPResponse = (MCI_StartWithPolarizationMotor(pMCI) == true) ? MCP_CMD_OK : MCP_CMD_NOK;
 8001fca:	b2c0      	uxtb	r0, r0
 8001fcc:	e78e      	b.n	8001eec <MCP_ReceivedPacket+0x94>
        if ((userCommand < MCP_USER_CALLBACK_MAX) && (MCP_UserCallBack[userCommand] != NULL))
 8001fce:	4b0b      	ldr	r3, [pc, #44]	@ (8001ffc <MCP_ReceivedPacket+0x1a4>)
 8001fd0:	f853 502c 	ldr.w	r5, [r3, ip, lsl #2]
 8001fd4:	b15d      	cbz	r5, 8001fee <MCP_ReceivedPacket+0x196>
          MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace,
 8001fd6:	68a3      	ldr	r3, [r4, #8]
 8001fd8:	9300      	str	r3, [sp, #0]
 8001fda:	4631      	mov	r1, r6
 8001fdc:	f104 030e 	add.w	r3, r4, #14
 8001fe0:	47a8      	blx	r5
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8001fe2:	89e3      	ldrh	r3, [r4, #14]
          MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace,
 8001fe4:	e782      	b.n	8001eec <MCP_ReceivedPacket+0x94>
          MCI_StopRamp(pMCI);
 8001fe6:	4638      	mov	r0, r7
 8001fe8:	f7ff f8ea 	bl	80011c0 <MCI_StopRamp>
 8001fec:	e7ac      	b.n	8001f48 <MCP_ReceivedPacket+0xf0>
 8001fee:	462b      	mov	r3, r5
 8001ff0:	e798      	b.n	8001f24 <MCP_ReceivedPacket+0xcc>
 8001ff2:	bf00      	nop
 8001ff4:	2000040c 	.word	0x2000040c
 8001ff8:	40020800 	.word	0x40020800
 8001ffc:	20000480 	.word	0x20000480

08002000 <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 8002000:	b508      	push	{r3, lr}
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  (void)HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / SYS_TICK_FREQUENCY);
 8002002:	f002 fc47 	bl	8004894 <HAL_RCC_GetHCLKFreq>
 8002006:	4b0a      	ldr	r3, [pc, #40]	@ (8002030 <MX_MotorControl_Init+0x30>)
 8002008:	fba3 3000 	umull	r3, r0, r3, r0
 800200c:	09c0      	lsrs	r0, r0, #7
 800200e:	f002 f993 	bl	8004338 <HAL_SYSTICK_Config>
  HAL_NVIC_SetPriority(SysTick_IRQn, uwTickPrio, 0U);
 8002012:	4b08      	ldr	r3, [pc, #32]	@ (8002034 <MX_MotorControl_Init+0x34>)
 8002014:	2200      	movs	r2, #0
 8002016:	6819      	ldr	r1, [r3, #0]
 8002018:	f04f 30ff 	mov.w	r0, #4294967295
 800201c:	f002 f942 	bl	80042a4 <HAL_NVIC_SetPriority>

  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI);
 8002020:	4805      	ldr	r0, [pc, #20]	@ (8002038 <MX_MotorControl_Init+0x38>)
 8002022:	f7ff fa87 	bl	8001534 <MCboot>
  mc_lock_pins();
}
 8002026:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  mc_lock_pins();
 800202a:	f7ff bdeb 	b.w	8001c04 <mc_lock_pins>
 800202e:	bf00      	nop
 8002030:	10624dd3 	.word	0x10624dd3
 8002034:	200003a4 	.word	0x200003a4
 8002038:	2000160c 	.word	0x2000160c

0800203c <PWMC_GetPhaseCurrents>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctGetPhaseCurrents(pHandle, Iab);
 800203c:	6803      	ldr	r3, [r0, #0]
 800203e:	4718      	bx	r3

08002040 <PWMC_SetPhaseVoltage>:
  * @param  Valfa_beta: Voltage Components expressed in the @f$(\alpha, \beta)@f$ reference frame.
  * @retval #MC_NO_ERROR if no error occurred or #MC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage(PWMC_Handle_t *pHandle, alphabeta_t Valfa_beta)
{
 8002040:	b530      	push	{r4, r5, lr}
    int32_t wTimePhA;
    int32_t wTimePhB;
    int32_t wTimePhC;

    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8002042:	f8b0 4072 	ldrh.w	r4, [r0, #114]	@ 0x72
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 8002046:	f8b0 204e 	ldrh.w	r2, [r0, #78]	@ 0x4e
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 800204a:	ea4f 4c21 	mov.w	ip, r1, asr #16
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 800204e:	b20b      	sxth	r3, r1
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8002050:	fb04 fc0c 	mul.w	ip, r4, ip
 8002054:	ebcc 7ccc 	rsb	ip, ip, ip, lsl #31
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 8002058:	fb02 f303 	mul.w	r3, r2, r3

    wX = wUBeta;
    wY = (wUBeta + wUAlpha) / 2;
 800205c:	eb03 024c 	add.w	r2, r3, ip, lsl #1
    wZ = (wUBeta - wUAlpha) / 2;
 8002060:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
    wY = (wUBeta + wUAlpha) / 2;
 8002064:	eb02 71d2 	add.w	r1, r2, r2, lsr #31
    wZ = (wUBeta - wUAlpha) / 2;
 8002068:	eb03 7ed3 	add.w	lr, r3, r3, lsr #31

    /* Sector calculation from wX, wY, wZ */
    if (wY < 0)
 800206c:	1c55      	adds	r5, r2, #1
{
 800206e:	b083      	sub	sp, #12
    {
      if (wZ < 0)
      {
        pHandle->Sector = SECTOR_5;
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8002070:	ea4f 0494 	mov.w	r4, r4, lsr #2
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8002074:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    wY = (wUBeta + wUAlpha) / 2;
 8002078:	ea4f 0161 	mov.w	r1, r1, asr #1
    wZ = (wUBeta - wUAlpha) / 2;
 800207c:	ea4f 0e6e 	mov.w	lr, lr, asr #1
    if (wY < 0)
 8002080:	f2c0 8094 	blt.w	80021ac <PWMC_SetPhaseVoltage+0x16c>
        }
        }
    }
    else /* wY > 0 */
    {
      if (wZ >= 0)
 8002084:	1c5d      	adds	r5, r3, #1
 8002086:	db64      	blt.n	8002152 <PWMC_SetPhaseVoltage+0x112>
      {
        pHandle->Sector = SECTOR_2;
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8002088:	ebb1 010e 	subs.w	r1, r1, lr
 800208c:	bf44      	itt	mi
 800208e:	f501 317f 	addmi.w	r1, r1, #261120	@ 0x3fc00
 8002092:	f201 31ff 	addwmi	r1, r1, #1023	@ 0x3ff
        wTimePhB = wTimePhA + (wZ / 131072);
 8002096:	2b00      	cmp	r3, #0
 8002098:	bfbc      	itt	lt
 800209a:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
 800209e:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
        wTimePhC = wTimePhA - (wY / 131072);
 80020a2:	2a00      	cmp	r2, #0
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 80020a4:	eb04 41a1 	add.w	r1, r4, r1, asr #18
        wTimePhC = wTimePhA - (wY / 131072);
 80020a8:	bfb8      	it	lt
 80020aa:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00

        if(true == pHandle->SingleShuntTopology)
 80020ae:	f890 4087 	ldrb.w	r4, [r0, #135]	@ 0x87
        pHandle->Sector = SECTOR_2;
 80020b2:	f04f 0501 	mov.w	r5, #1
        wTimePhC = wTimePhA - (wY / 131072);
 80020b6:	bfb8      	it	lt
 80020b8:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
        pHandle->Sector = SECTOR_2;
 80020bc:	f880 507c 	strb.w	r5, [r0, #124]	@ 0x7c
        wTimePhB = wTimePhA + (wZ / 131072);
 80020c0:	eb01 43a3 	add.w	r3, r1, r3, asr #18
        wTimePhC = wTimePhA - (wY / 131072);
 80020c4:	eba1 42a2 	sub.w	r2, r1, r2, asr #18
        if(true == pHandle->SingleShuntTopology)
 80020c8:	2c00      	cmp	r4, #0
 80020ca:	f040 8097 	bne.w	80021fc <PWMC_SetPhaseVoltage+0x1bc>
          pHandle->midDuty = 0U;
          pHandle->highDuty = 1U;
        }
        else
        {
        pHandle->lowDuty = (uint16_t)wTimePhB;
 80020ce:	fa1f fe83 	uxth.w	lr, r3
        pHandle->midDuty = (uint16_t)wTimePhA;
 80020d2:	fa1f fc81 	uxth.w	ip, r1
        pHandle->highDuty = (uint16_t)wTimePhC;
 80020d6:	b294      	uxth	r4, r2
            pHandle->highDuty = 2U;
 80020d8:	f8a0 405c 	strh.w	r4, [r0, #92]	@ 0x5c

    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));

    if (1U == pHandle->DTTest)
 80020dc:	f8b0 4070 	ldrh.w	r4, [r0, #112]	@ 0x70
            pHandle->lowDuty = 0U;
 80020e0:	f8a0 e058 	strh.w	lr, [r0, #88]	@ 0x58
    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
 80020e4:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 80020e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));
 80020ec:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 80020f0:	b289      	uxth	r1, r1
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	b292      	uxth	r2, r2
    if (1U == pHandle->DTTest)
 80020f6:	2c01      	cmp	r4, #1
            pHandle->midDuty = 1U;
 80020f8:	f8a0 c05a 	strh.w	ip, [r0, #90]	@ 0x5a
    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
 80020fc:	f8a0 1050 	strh.w	r1, [r0, #80]	@ 0x50
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 8002100:	f8a0 3052 	strh.w	r3, [r0, #82]	@ 0x52
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));
 8002104:	f8a0 2054 	strh.w	r2, [r0, #84]	@ 0x54
    if (1U == pHandle->DTTest)
 8002108:	d11e      	bne.n	8002148 <PWMC_SetPhaseVoltage+0x108>
    {
      /* Dead time compensation */
      if (pHandle->Ia > 0)
 800210a:	f9b0 5062 	ldrsh.w	r5, [r0, #98]	@ 0x62
      {
        pHandle->CntPhA += pHandle->DTCompCnt;
 800210e:	f8b0 4074 	ldrh.w	r4, [r0, #116]	@ 0x74
      if (pHandle->Ia > 0)
 8002112:	2d00      	cmp	r5, #0
        pHandle->CntPhA += pHandle->DTCompCnt;
 8002114:	bfcc      	ite	gt
 8002116:	1909      	addgt	r1, r1, r4
      }
      else
      {
        pHandle->CntPhA -= pHandle->DTCompCnt;
 8002118:	1b09      	suble	r1, r1, r4
 800211a:	b289      	uxth	r1, r1
 800211c:	f8a0 1050 	strh.w	r1, [r0, #80]	@ 0x50
      }

      if (pHandle->Ib > 0)
 8002120:	f9b0 1064 	ldrsh.w	r1, [r0, #100]	@ 0x64
 8002124:	2900      	cmp	r1, #0
      else
      {
        pHandle->CntPhB -= pHandle->DTCompCnt;
      }

      if (pHandle->Ic > 0)
 8002126:	f9b0 1066 	ldrsh.w	r1, [r0, #102]	@ 0x66
        pHandle->CntPhB += pHandle->DTCompCnt;
 800212a:	bfcc      	ite	gt
 800212c:	191b      	addgt	r3, r3, r4
        pHandle->CntPhB -= pHandle->DTCompCnt;
 800212e:	1b1b      	suble	r3, r3, r4
      if (pHandle->Ic > 0)
 8002130:	2900      	cmp	r1, #0
        pHandle->CntPhB -= pHandle->DTCompCnt;
 8002132:	b29b      	uxth	r3, r3
      {
        pHandle->CntPhC += pHandle->DTCompCnt;
 8002134:	bfcc      	ite	gt
 8002136:	18a4      	addgt	r4, r4, r2
      }
      else
      {
        pHandle->CntPhC -= pHandle->DTCompCnt;
 8002138:	1b12      	suble	r2, r2, r4
 800213a:	f8a0 3052 	strh.w	r3, [r0, #82]	@ 0x52
        pHandle->CntPhC += pHandle->DTCompCnt;
 800213e:	bfcc      	ite	gt
 8002140:	f8a0 4054 	strhgt.w	r4, [r0, #84]	@ 0x54
        pHandle->CntPhC -= pHandle->DTCompCnt;
 8002144:	f8a0 2054 	strhle.w	r2, [r0, #84]	@ 0x54
      }
    }
    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 8002148:	6943      	ldr	r3, [r0, #20]
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (returnValue);
}
 800214a:	b003      	add	sp, #12
 800214c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 8002150:	4718      	bx	r3
        if ( wX <= 0 )
 8002152:	f1bc 0f00 	cmp.w	ip, #0
 8002156:	dd7f      	ble.n	8002258 <PWMC_SetPhaseVoltage+0x218>
          wTimePhB = wTimePhA + (wZ / 131072);
 8002158:	2b00      	cmp	r3, #0
 800215a:	bfb8      	it	lt
 800215c:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 8002160:	ebac 0e0e 	sub.w	lr, ip, lr
          wTimePhB = wTimePhA + (wZ / 131072);
 8002164:	bfb8      	it	lt
 8002166:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
          wTimePhC = wTimePhB - (wX / 131072);
 800216a:	f1bc 0f00 	cmp.w	ip, #0
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 800216e:	eb04 41ae 	add.w	r1, r4, lr, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 8002172:	bfb8      	it	lt
 8002174:	f50c 3cff 	addlt.w	ip, ip, #130560	@ 0x1fe00
          if((pHandle->DPWM_Mode == true) || (pHandle->SingleShuntTopology == true))
 8002178:	f890 407f 	ldrb.w	r4, [r0, #127]	@ 0x7f
          pHandle->Sector = SECTOR_1;
 800217c:	f04f 0200 	mov.w	r2, #0
          wTimePhB = wTimePhA + (wZ / 131072);
 8002180:	eb01 43a3 	add.w	r3, r1, r3, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 8002184:	bfb8      	it	lt
 8002186:	f20c 1cff 	addwlt	ip, ip, #511	@ 0x1ff
          pHandle->Sector = SECTOR_1;
 800218a:	f880 207c 	strb.w	r2, [r0, #124]	@ 0x7c
          wTimePhC = wTimePhB - (wX / 131072);
 800218e:	eba3 426c 	sub.w	r2, r3, ip, asr #17
          if((pHandle->DPWM_Mode == true) || (pHandle->SingleShuntTopology == true))
 8002192:	2c00      	cmp	r4, #0
 8002194:	f040 80b5 	bne.w	8002302 <PWMC_SetPhaseVoltage+0x2c2>
 8002198:	f890 5087 	ldrb.w	r5, [r0, #135]	@ 0x87
 800219c:	2d00      	cmp	r5, #0
 800219e:	f000 80c2 	beq.w	8002326 <PWMC_SetPhaseVoltage+0x2e6>
 80021a2:	f04f 0e02 	mov.w	lr, #2
 80021a6:	f04f 0c01 	mov.w	ip, #1
 80021aa:	e795      	b.n	80020d8 <PWMC_SetPhaseVoltage+0x98>
      if (wZ < 0)
 80021ac:	f1b3 3fff 	cmp.w	r3, #4294967295
        if(true == pHandle->SingleShuntTopology)
 80021b0:	f890 5087 	ldrb.w	r5, [r0, #135]	@ 0x87
      if (wZ < 0)
 80021b4:	db74      	blt.n	80022a0 <PWMC_SetPhaseVoltage+0x260>
        if (wX <= 0)
 80021b6:	f1bc 0f00 	cmp.w	ip, #0
 80021ba:	dd25      	ble.n	8002208 <PWMC_SetPhaseVoltage+0x1c8>
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 80021bc:	ebb1 010c 	subs.w	r1, r1, ip
 80021c0:	bf44      	itt	mi
 80021c2:	f501 317f 	addmi.w	r1, r1, #261120	@ 0x3fc00
 80021c6:	f201 31ff 	addwmi	r1, r1, #1023	@ 0x3ff
          wTimePhC = wTimePhA - (wY / 131072);
 80021ca:	2a00      	cmp	r2, #0
 80021cc:	bfb8      	it	lt
 80021ce:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 80021d2:	eb04 41a1 	add.w	r1, r4, r1, asr #18
          wTimePhC = wTimePhA - (wY / 131072);
 80021d6:	bfb8      	it	lt
 80021d8:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
          pHandle->Sector = SECTOR_3;
 80021dc:	2302      	movs	r3, #2
          wTimePhC = wTimePhA - (wY / 131072);
 80021de:	eba1 42a2 	sub.w	r2, r1, r2, asr #18
          pHandle->Sector = SECTOR_3;
 80021e2:	f880 307c 	strb.w	r3, [r0, #124]	@ 0x7c
          wTimePhB = wTimePhC + (wX / 131072);
 80021e6:	eb02 436c 	add.w	r3, r2, ip, asr #17
          if(true == pHandle->SingleShuntTopology)
 80021ea:	2d00      	cmp	r5, #0
 80021ec:	f040 8083 	bne.w	80022f6 <PWMC_SetPhaseVoltage+0x2b6>
          pHandle->lowDuty = (uint16_t)wTimePhB;
 80021f0:	fa1f fe83 	uxth.w	lr, r3
          pHandle->midDuty = (uint16_t)wTimePhC;
 80021f4:	fa1f fc82 	uxth.w	ip, r2
          pHandle->highDuty = (uint16_t)wTimePhA;
 80021f8:	b28c      	uxth	r4, r1
 80021fa:	e76d      	b.n	80020d8 <PWMC_SetPhaseVoltage+0x98>
 80021fc:	f04f 0e02 	mov.w	lr, #2
 8002200:	f04f 0c00 	mov.w	ip, #0
 8002204:	2401      	movs	r4, #1
 8002206:	e767      	b.n	80020d8 <PWMC_SetPhaseVoltage+0x98>
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 8002208:	ebbc 0e0e 	subs.w	lr, ip, lr
 800220c:	bf44      	itt	mi
 800220e:	f50e 3e7f 	addmi.w	lr, lr, #261120	@ 0x3fc00
 8002212:	f20e 3eff 	addwmi	lr, lr, #1023	@ 0x3ff
          wTimePhB = wTimePhA + (wZ / 131072);
 8002216:	2b00      	cmp	r3, #0
 8002218:	bfb8      	it	lt
 800221a:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
          pHandle->Sector = SECTOR_4;
 800221e:	f04f 0203 	mov.w	r2, #3
          wTimePhB = wTimePhA + (wZ / 131072);
 8002222:	bfb8      	it	lt
 8002224:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
          pHandle->Sector = SECTOR_4;
 8002228:	f880 207c 	strb.w	r2, [r0, #124]	@ 0x7c
          wTimePhC = wTimePhB - (wX / 131072);
 800222c:	f1bc 0200 	subs.w	r2, ip, #0
 8002230:	bfb8      	it	lt
 8002232:	f502 32ff 	addlt.w	r2, r2, #130560	@ 0x1fe00
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 8002236:	eb04 41ae 	add.w	r1, r4, lr, asr #18
          wTimePhB = wTimePhA + (wZ / 131072);
 800223a:	eb01 43a3 	add.w	r3, r1, r3, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 800223e:	bfb8      	it	lt
 8002240:	f202 12ff 	addwlt	r2, r2, #511	@ 0x1ff
 8002244:	eba3 4262 	sub.w	r2, r3, r2, asr #17
          if(true == pHandle->SingleShuntTopology)
 8002248:	2d00      	cmp	r5, #0
 800224a:	d066      	beq.n	800231a <PWMC_SetPhaseVoltage+0x2da>
 800224c:	f04f 0e00 	mov.w	lr, #0
 8002250:	f04f 0c01 	mov.w	ip, #1
 8002254:	2402      	movs	r4, #2
 8002256:	e73f      	b.n	80020d8 <PWMC_SetPhaseVoltage+0x98>
          wTimePhC = wTimePhA - (wY / 131072);
 8002258:	2a00      	cmp	r2, #0
 800225a:	bfb8      	it	lt
 800225c:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00
          pHandle->Sector = SECTOR_6;
 8002260:	f04f 0305 	mov.w	r3, #5
          wTimePhC = wTimePhA - (wY / 131072);
 8002264:	bfb8      	it	lt
 8002266:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 800226a:	eba1 010c 	sub.w	r1, r1, ip
          pHandle->Sector = SECTOR_6;
 800226e:	f880 307c 	strb.w	r3, [r0, #124]	@ 0x7c
          wTimePhB = wTimePhC + (wX / 131072);
 8002272:	f1bc 0300 	subs.w	r3, ip, #0
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 8002276:	eb04 41a1 	add.w	r1, r4, r1, asr #18
          wTimePhB = wTimePhC + (wX / 131072);
 800227a:	bfb8      	it	lt
 800227c:	f503 33ff 	addlt.w	r3, r3, #130560	@ 0x1fe00
          if(true == pHandle->SingleShuntTopology)
 8002280:	f890 4087 	ldrb.w	r4, [r0, #135]	@ 0x87
          wTimePhC = wTimePhA - (wY / 131072);
 8002284:	eba1 42a2 	sub.w	r2, r1, r2, asr #18
          wTimePhB = wTimePhC + (wX / 131072);
 8002288:	bfb8      	it	lt
 800228a:	f203 13ff 	addwlt	r3, r3, #511	@ 0x1ff
 800228e:	eb02 4363 	add.w	r3, r2, r3, asr #17
          if(true == pHandle->SingleShuntTopology)
 8002292:	b3e4      	cbz	r4, 800230e <PWMC_SetPhaseVoltage+0x2ce>
 8002294:	f04f 0e01 	mov.w	lr, #1
 8002298:	f04f 0c02 	mov.w	ip, #2
 800229c:	2400      	movs	r4, #0
 800229e:	e71b      	b.n	80020d8 <PWMC_SetPhaseVoltage+0x98>
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 80022a0:	ebb1 010e 	subs.w	r1, r1, lr
 80022a4:	bf44      	itt	mi
 80022a6:	f501 317f 	addmi.w	r1, r1, #261120	@ 0x3fc00
 80022aa:	f201 31ff 	addwmi	r1, r1, #1023	@ 0x3ff
        wTimePhB = wTimePhA + (wZ / 131072);
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	bfbc      	itt	lt
 80022b2:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
 80022b6:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
        wTimePhC = wTimePhA - (wY / 131072) ;
 80022ba:	2a00      	cmp	r2, #0
 80022bc:	bfb8      	it	lt
 80022be:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 80022c2:	eb04 41a1 	add.w	r1, r4, r1, asr #18
        pHandle->Sector = SECTOR_5;
 80022c6:	f04f 0c04 	mov.w	ip, #4
        wTimePhC = wTimePhA - (wY / 131072) ;
 80022ca:	bfb8      	it	lt
 80022cc:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
        pHandle->Sector = SECTOR_5;
 80022d0:	f880 c07c 	strb.w	ip, [r0, #124]	@ 0x7c
        wTimePhB = wTimePhA + (wZ / 131072);
 80022d4:	eb01 43a3 	add.w	r3, r1, r3, asr #18
        wTimePhC = wTimePhA - (wY / 131072) ;
 80022d8:	eba1 42a2 	sub.w	r2, r1, r2, asr #18
        if(true == pHandle->SingleShuntTopology)
 80022dc:	b92d      	cbnz	r5, 80022ea <PWMC_SetPhaseVoltage+0x2aa>
          pHandle->lowDuty = (uint16_t)wTimePhC;
 80022de:	fa1f fe82 	uxth.w	lr, r2
          pHandle->midDuty = (uint16_t)wTimePhA;
 80022e2:	fa1f fc81 	uxth.w	ip, r1
          pHandle->highDuty = (uint16_t)wTimePhB;
 80022e6:	b29c      	uxth	r4, r3
 80022e8:	e6f6      	b.n	80020d8 <PWMC_SetPhaseVoltage+0x98>
 80022ea:	f04f 0e01 	mov.w	lr, #1
 80022ee:	f04f 0c00 	mov.w	ip, #0
 80022f2:	2402      	movs	r4, #2
 80022f4:	e6f0      	b.n	80020d8 <PWMC_SetPhaseVoltage+0x98>
 80022f6:	f04f 0e00 	mov.w	lr, #0
 80022fa:	f04f 0c02 	mov.w	ip, #2
 80022fe:	2401      	movs	r4, #1
 8002300:	e6ea      	b.n	80020d8 <PWMC_SetPhaseVoltage+0x98>
 8002302:	f04f 0e02 	mov.w	lr, #2
 8002306:	f04f 0c01 	mov.w	ip, #1
 800230a:	2400      	movs	r4, #0
 800230c:	e6e4      	b.n	80020d8 <PWMC_SetPhaseVoltage+0x98>
            pHandle->lowDuty = (uint16_t)wTimePhA;
 800230e:	fa1f fe81 	uxth.w	lr, r1
            pHandle->midDuty = (uint16_t)wTimePhC;
 8002312:	fa1f fc82 	uxth.w	ip, r2
            pHandle->highDuty = (uint16_t)wTimePhB;
 8002316:	b29c      	uxth	r4, r3
 8002318:	e6de      	b.n	80020d8 <PWMC_SetPhaseVoltage+0x98>
          pHandle->lowDuty = (uint16_t)wTimePhC;
 800231a:	fa1f fe82 	uxth.w	lr, r2
          pHandle->midDuty = (uint16_t)wTimePhB;
 800231e:	fa1f fc83 	uxth.w	ip, r3
          pHandle->highDuty = (uint16_t)wTimePhA;
 8002322:	b28c      	uxth	r4, r1
 8002324:	e6d8      	b.n	80020d8 <PWMC_SetPhaseVoltage+0x98>
            pHandle->lowDuty = (uint16_t)wTimePhA;
 8002326:	fa1f fe81 	uxth.w	lr, r1
            pHandle->midDuty = (uint16_t)wTimePhB;
 800232a:	fa1f fc83 	uxth.w	ip, r3
            pHandle->highDuty = (uint16_t)wTimePhC;
 800232e:	b294      	uxth	r4, r2
 8002330:	e6d2      	b.n	80020d8 <PWMC_SetPhaseVoltage+0x98>
 8002332:	bf00      	nop

08002334 <PWMC_SwitchOffPWM>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOffPwm(pHandle);
 8002334:	6843      	ldr	r3, [r0, #4]
 8002336:	4718      	bx	r3

08002338 <PWMC_SwitchOnPWM>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOnPwm(pHandle);
 8002338:	6883      	ldr	r3, [r0, #8]
 800233a:	4718      	bx	r3

0800233c <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, **false** if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr(PWMC_Handle_t *pHandle, CRCAction_t action)
{
 800233c:	b510      	push	{r4, lr}
 800233e:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    if (CRC_START == action)
 8002340:	b179      	cbz	r1, 8002362 <PWMC_CurrentReadingCalibr+0x26>
    {
      PWMC_SwitchOffPWM(pHandle);
      pHandle->pFctCurrReadingCalib(pHandle);
      retVal = true;
    }
    else if (CRC_EXEC == action)
 8002342:	2901      	cmp	r1, #1
 8002344:	d001      	beq.n	800234a <PWMC_CurrentReadingCalibr+0xe>
  bool retVal = false;
 8002346:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (retVal);
}
 8002348:	bd10      	pop	{r4, pc}
      if (pHandle->OffCalibrWaitTimeCounter > 0u)
 800234a:	f8b0 3060 	ldrh.w	r3, [r0, #96]	@ 0x60
 800234e:	b16b      	cbz	r3, 800236c <PWMC_CurrentReadingCalibr+0x30>
        pHandle->OffCalibrWaitTimeCounter--;
 8002350:	3b01      	subs	r3, #1
 8002352:	b29b      	uxth	r3, r3
 8002354:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
        if (0U == pHandle->OffCalibrWaitTimeCounter)
 8002358:	2b00      	cmp	r3, #0
 800235a:	d1f4      	bne.n	8002346 <PWMC_CurrentReadingCalibr+0xa>
          pHandle->pFctCurrReadingCalib(pHandle);
 800235c:	68c3      	ldr	r3, [r0, #12]
 800235e:	4798      	blx	r3
          retVal = true;
 8002360:	e004      	b.n	800236c <PWMC_CurrentReadingCalibr+0x30>
      PWMC_SwitchOffPWM(pHandle);
 8002362:	f7ff ffe7 	bl	8002334 <PWMC_SwitchOffPWM>
      pHandle->pFctCurrReadingCalib(pHandle);
 8002366:	68e3      	ldr	r3, [r4, #12]
 8002368:	4620      	mov	r0, r4
 800236a:	4798      	blx	r3
      retVal = true;
 800236c:	2001      	movs	r0, #1
}
 800236e:	bd10      	pop	{r4, pc}

08002370 <PWMC_OVP_Handler>:
    tempPointer = MC_NULL;
  }
  else
  {
#endif
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8002370:	6c4a      	ldr	r2, [r1, #68]	@ 0x44
{
 8002372:	4603      	mov	r3, r0
    pHandle->OverVoltageFlag = true;
 8002374:	f04f 0c01 	mov.w	ip, #1
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8002378:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800237c:	644a      	str	r2, [r1, #68]	@ 0x44
    tempPointer = &(pHandle->Motor);
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (tempPointer);
}
 800237e:	307a      	adds	r0, #122	@ 0x7a
    pHandle->OverVoltageFlag = true;
 8002380:	f883 c083 	strb.w	ip, [r3, #131]	@ 0x83
    pHandle->BrakeActionLock = true;
 8002384:	f883 c085 	strb.w	ip, [r3, #133]	@ 0x85
}
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop

0800238c <PWMC_IsFaultOccurred>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  * @retval uint16_t Returns #MC_OVER_CURR if an overcurrent has been
  *                  detected since last method call, #MC_NO_FAULTS otherwise.
  */
__weak uint16_t PWMC_IsFaultOccurred(PWMC_Handle_t *pHandle)
{
 800238c:	4603      	mov	r3, r0
  uint16_t retVal = MC_NO_FAULTS;

  if (true == pHandle->OverVoltageFlag)
 800238e:	f890 0083 	ldrb.w	r0, [r0, #131]	@ 0x83
 8002392:	b1a8      	cbz	r0, 80023c0 <PWMC_IsFaultOccurred+0x34>
  {
    retVal = MC_OVER_VOLT;
    pHandle->OverVoltageFlag = false;
 8002394:	2200      	movs	r2, #0
 8002396:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
 800239a:	2142      	movs	r1, #66	@ 0x42
    retVal = MC_OVER_VOLT;
 800239c:	2002      	movs	r0, #2
  else
  {
    /* Nothing to do */
  }

  if (true == pHandle->OverCurrentFlag)
 800239e:	f893 2082 	ldrb.w	r2, [r3, #130]	@ 0x82
 80023a2:	b11a      	cbz	r2, 80023ac <PWMC_IsFaultOccurred+0x20>
  {
    retVal |= MC_OVER_CURR;
    pHandle->OverCurrentFlag = false;
 80023a4:	2200      	movs	r2, #0
 80023a6:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
    retVal |= MC_OVER_CURR;
 80023aa:	4608      	mov	r0, r1
  else
  {
    /* Nothing to do */
  }

  if (true == pHandle->driverProtectionFlag)
 80023ac:	f893 2084 	ldrb.w	r2, [r3, #132]	@ 0x84
 80023b0:	b12a      	cbz	r2, 80023be <PWMC_IsFaultOccurred+0x32>
  {
    retVal |= MC_DP_FAULT;
 80023b2:	f440 6080 	orr.w	r0, r0, #1024	@ 0x400
    pHandle->driverProtectionFlag = false;
 80023b6:	2200      	movs	r2, #0
    retVal |= MC_DP_FAULT;
 80023b8:	b280      	uxth	r0, r0
    pHandle->driverProtectionFlag = false;
 80023ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
  {
    /* Nothing to do */
  }

  return (retVal);
}
 80023be:	4770      	bx	lr
 80023c0:	2140      	movs	r1, #64	@ 0x40
 80023c2:	e7ec      	b.n	800239e <PWMC_IsFaultOccurred+0x12>

080023c4 <RI_SetRegisterGlobal>:
#include "mcp_config.h"
#include "mcpa.h"
#include "mc_configuration_registers.h"

uint8_t RI_SetRegisterGlobal(uint16_t regID, uint8_t typeID, uint8_t *data, uint16_t *size, int16_t dataAvailable)
{
 80023c4:	b410      	push	{r4}
  uint8_t retVal = MCP_CMD_OK;
  switch(typeID)
 80023c6:	3908      	subs	r1, #8
{
 80023c8:	f9bd c004 	ldrsh.w	ip, [sp, #4]
  switch(typeID)
 80023cc:	2920      	cmp	r1, #32
 80023ce:	d812      	bhi.n	80023f6 <RI_SetRegisterGlobal+0x32>
 80023d0:	e8df f001 	tbb	[pc, r1]
 80023d4:	11111117 	.word	0x11111117
 80023d8:	11111111 	.word	0x11111111
 80023dc:	11111121 	.word	0x11111121
 80023e0:	11111111 	.word	0x11111111
 80023e4:	11111133 	.word	0x11111133
 80023e8:	11111111 	.word	0x11111111
 80023ec:	1111113d 	.word	0x1111113d
 80023f0:	11111111 	.word	0x11111111
 80023f4:	51          	.byte	0x51
 80023f5:	00          	.byte	0x00
    }

    default:
    {
      retVal = MCP_ERROR_BAD_DATA_TYPE;
      *size =0; /* From this point we are not able anymore to decode the RX buffer */
 80023f6:	2200      	movs	r2, #0
 80023f8:	801a      	strh	r2, [r3, #0]
      retVal = MCP_ERROR_BAD_DATA_TYPE;
 80023fa:	2007      	movs	r0, #7
      break;
    }
  }
  return (retVal);
}
 80023fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002400:	4770      	bx	lr
          retVal = MCP_ERROR_RO_REG;
 8002402:	2848      	cmp	r0, #72	@ 0x48
      *size = 1;
 8002404:	f04f 0201 	mov.w	r2, #1
          retVal = MCP_ERROR_RO_REG;
 8002408:	bf14      	ite	ne
 800240a:	2005      	movne	r0, #5
 800240c:	2004      	moveq	r0, #4
}
 800240e:	f85d 4b04 	ldr.w	r4, [sp], #4
      *size = 1;
 8002412:	801a      	strh	r2, [r3, #0]
}
 8002414:	4770      	bx	lr
      switch (regID)
 8002416:	f5b0 6f65 	cmp.w	r0, #3664	@ 0xe50
 800241a:	d04e      	beq.n	80024ba <RI_SetRegisterGlobal+0xf6>
 800241c:	d93e      	bls.n	800249c <RI_SetRegisterGlobal+0xd8>
 800241e:	f5b0 6f69 	cmp.w	r0, #3728	@ 0xe90
 8002422:	d04a      	beq.n	80024ba <RI_SetRegisterGlobal+0xf6>
 8002424:	f641 3258 	movw	r2, #7000	@ 0x1b58
          retVal = MCP_ERROR_UNKNOWN_REG;
 8002428:	4290      	cmp	r0, r2
 800242a:	bf0c      	ite	eq
 800242c:	2004      	moveq	r0, #4
 800242e:	2005      	movne	r0, #5
      *size = 2;
 8002430:	2202      	movs	r2, #2
}
 8002432:	f85d 4b04 	ldr.w	r4, [sp], #4
      *size = 2;
 8002436:	801a      	strh	r2, [r3, #0]
}
 8002438:	4770      	bx	lr
          retVal = MCP_ERROR_RO_REG;
 800243a:	2818      	cmp	r0, #24
      *size = 4;
 800243c:	f04f 0204 	mov.w	r2, #4
          retVal = MCP_ERROR_RO_REG;
 8002440:	bf14      	ite	ne
 8002442:	2005      	movne	r0, #5
 8002444:	4610      	moveq	r0, r2
}
 8002446:	f85d 4b04 	ldr.w	r4, [sp], #4
      *size = 4;
 800244a:	801a      	strh	r2, [r3, #0]
}
 800244c:	4770      	bx	lr
uint8_t RI_MovString(const char_t *srcString, char_t *destString, uint16_t *size, int16_t maxSize)
{
  uint8_t retVal = MCP_CMD_OK;
  const char_t *tempsrcString = srcString;
  char_t *tempdestString = destString;
  *size= 1U ; /* /0 is the min String size */
 800244e:	2101      	movs	r1, #1
 8002450:	8019      	strh	r1, [r3, #0]

  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002452:	f992 0000 	ldrsb.w	r0, [r2]
 8002456:	b348      	cbz	r0, 80024ac <RI_SetRegisterGlobal+0xe8>
 8002458:	fa1f f08c 	uxth.w	r0, ip
 800245c:	e003      	b.n	8002466 <RI_SetRegisterGlobal+0xa2>
  {
    *tempdestString = *tempsrcString;
    tempdestString++;
    tempsrcString++;
    *size = *size + 1U;
 800245e:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002460:	f912 4f01 	ldrsb.w	r4, [r2, #1]!
 8002464:	b314      	cbz	r4, 80024ac <RI_SetRegisterGlobal+0xe8>
    *size = *size + 1U;
 8002466:	f101 0c01 	add.w	ip, r1, #1
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 800246a:	4281      	cmp	r1, r0
    *size = *size + 1U;
 800246c:	fa1f f18c 	uxth.w	r1, ip
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002470:	d3f5      	bcc.n	800245e <RI_SetRegisterGlobal+0x9a>
      retVal = MCP_ERROR_RO_REG;
 8002472:	2004      	movs	r0, #4
 8002474:	e7c2      	b.n	80023fc <RI_SetRegisterGlobal+0x38>
      *size = rawSize + 2U;
 8002476:	8812      	ldrh	r2, [r2, #0]
 8002478:	3202      	adds	r2, #2
 800247a:	b292      	uxth	r2, r2
      if (*size > (uint16_t)dataAvailable)
 800247c:	fa1f fc8c 	uxth.w	ip, ip
 8002480:	4562      	cmp	r2, ip
      *size = rawSize + 2U;
 8002482:	801a      	strh	r2, [r3, #0]
      if (*size > (uint16_t)dataAvailable)
 8002484:	d81b      	bhi.n	80024be <RI_SetRegisterGlobal+0xfa>
        switch (regID)
 8002486:	28a8      	cmp	r0, #168	@ 0xa8
 8002488:	d0f3      	beq.n	8002472 <RI_SetRegisterGlobal+0xae>
 800248a:	d813      	bhi.n	80024b4 <RI_SetRegisterGlobal+0xf0>
 800248c:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 8002490:	2828      	cmp	r0, #40	@ 0x28
 8002492:	d0ee      	beq.n	8002472 <RI_SetRegisterGlobal+0xae>
 8002494:	2005      	movs	r0, #5
}
 8002496:	f85d 4b04 	ldr.w	r4, [sp], #4
 800249a:	4770      	bx	lr
 800249c:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
          retVal = MCP_ERROR_UNKNOWN_REG;
 80024a0:	f5b0 6fb2 	cmp.w	r0, #1424	@ 0x590
 80024a4:	bf0c      	ite	eq
 80024a6:	2004      	moveq	r0, #4
 80024a8:	2005      	movne	r0, #5
 80024aa:	e7c1      	b.n	8002430 <RI_SetRegisterGlobal+0x6c>
  { /* Last string char must be 0 */
    retVal = MCP_ERROR_STRING_FORMAT;
  }
  else
  {
    *tempdestString = (int8_t)0;
 80024ac:	2300      	movs	r3, #0
 80024ae:	7013      	strb	r3, [r2, #0]
      retVal = MCP_ERROR_RO_REG;
 80024b0:	2004      	movs	r0, #4
 80024b2:	e7a3      	b.n	80023fc <RI_SetRegisterGlobal+0x38>
 80024b4:	28e8      	cmp	r0, #232	@ 0xe8
 80024b6:	d1ed      	bne.n	8002494 <RI_SetRegisterGlobal+0xd0>
 80024b8:	e7db      	b.n	8002472 <RI_SetRegisterGlobal+0xae>
  uint8_t retVal = MCP_CMD_OK;
 80024ba:	2000      	movs	r0, #0
 80024bc:	e7b8      	b.n	8002430 <RI_SetRegisterGlobal+0x6c>
        *size = 0;
 80024be:	2200      	movs	r2, #0
 80024c0:	801a      	strh	r2, [r3, #0]
        retVal = MCP_ERROR_BAD_RAW_FORMAT; /* This error stop the parsing of the CMD buffer */
 80024c2:	200a      	movs	r0, #10
 80024c4:	e79a      	b.n	80023fc <RI_SetRegisterGlobal+0x38>
 80024c6:	bf00      	nop

080024c8 <RI_SetRegisterMotor1>:
{
 80024c8:	b510      	push	{r4, lr}
 80024ca:	b084      	sub	sp, #16
  switch(typeID)
 80024cc:	3908      	subs	r1, #8
{
 80024ce:	f9bd c018 	ldrsh.w	ip, [sp, #24]
 80024d2:	4696      	mov	lr, r2
 80024d4:	461c      	mov	r4, r3
  switch(typeID)
 80024d6:	2920      	cmp	r1, #32
 80024d8:	d812      	bhi.n	8002500 <RI_SetRegisterMotor1+0x38>
 80024da:	e8df f001 	tbb	[pc, r1]
 80024de:	1116      	.short	0x1116
 80024e0:	11111111 	.word	0x11111111
 80024e4:	11251111 	.word	0x11251111
 80024e8:	11111111 	.word	0x11111111
 80024ec:	114a1111 	.word	0x114a1111
 80024f0:	11111111 	.word	0x11111111
 80024f4:	11581111 	.word	0x11581111
 80024f8:	11111111 	.word	0x11111111
 80024fc:	1111      	.short	0x1111
 80024fe:	6f          	.byte	0x6f
 80024ff:	00          	.byte	0x00
      *size =0; /* From this point we are not able anymore to decode the RX buffer */
 8002500:	2300      	movs	r3, #0
 8002502:	8023      	strh	r3, [r4, #0]
      retVal = MCP_ERROR_BAD_DATA_TYPE;
 8002504:	2007      	movs	r0, #7
}
 8002506:	b004      	add	sp, #16
 8002508:	bd10      	pop	{r4, pc}
      switch (regID)
 800250a:	2848      	cmp	r0, #72	@ 0x48
 800250c:	f000 8154 	beq.w	80027b8 <RI_SetRegisterMotor1+0x2f0>
 8002510:	2888      	cmp	r0, #136	@ 0x88
 8002512:	f040 8148 	bne.w	80027a6 <RI_SetRegisterMotor1+0x2de>
          uint8_t regdata8 = *data;
 8002516:	7813      	ldrb	r3, [r2, #0]
          if ((uint8_t)MCM_TORQUE_MODE == regdata8)
 8002518:	2b04      	cmp	r3, #4
 800251a:	f000 815d 	beq.w	80027d8 <RI_SetRegisterMotor1+0x310>
          if ((uint8_t)MCM_SPEED_MODE == regdata8)
 800251e:	2b03      	cmp	r3, #3
 8002520:	f000 8190 	beq.w	8002844 <RI_SetRegisterMotor1+0x37c>
  uint8_t retVal = MCP_CMD_OK;
 8002524:	2000      	movs	r0, #0
 8002526:	e13f      	b.n	80027a8 <RI_SetRegisterMotor1+0x2e0>
      uint16_t regdata16 = *(uint16_t *)data; //cstat !MISRAC2012-Rule-11.3
 8002528:	f5b0 6f19 	cmp.w	r0, #2448	@ 0x990
 800252c:	8811      	ldrh	r1, [r2, #0]
      switch (regID)
 800252e:	f000 819c 	beq.w	800286a <RI_SetRegisterMotor1+0x3a2>
 8002532:	f200 8096 	bhi.w	8002662 <RI_SetRegisterMotor1+0x19a>
 8002536:	f5b0 7f04 	cmp.w	r0, #528	@ 0x210
 800253a:	f000 8191 	beq.w	8002860 <RI_SetRegisterMotor1+0x398>
 800253e:	d97f      	bls.n	8002640 <RI_SetRegisterMotor1+0x178>
 8002540:	f5b0 7f44 	cmp.w	r0, #784	@ 0x310
 8002544:	f000 81a6 	beq.w	8002894 <RI_SetRegisterMotor1+0x3cc>
 8002548:	d95b      	bls.n	8002602 <RI_SetRegisterMotor1+0x13a>
 800254a:	f5b0 6f15 	cmp.w	r0, #2384	@ 0x950
 800254e:	d153      	bne.n	80025f8 <RI_SetRegisterMotor1+0x130>
          currComp = MCI_GetIqdref(pMCIN);
 8002550:	48a7      	ldr	r0, [pc, #668]	@ (80027f0 <RI_SetRegisterMotor1+0x328>)
 8002552:	9101      	str	r1, [sp, #4]
 8002554:	f7fe fe6e 	bl	8001234 <MCI_GetIqdref>
          currComp.q = (int16_t)regdata16;
 8002558:	9901      	ldr	r1, [sp, #4]
          currComp = MCI_GetIqdref(pMCIN);
 800255a:	9003      	str	r0, [sp, #12]
          currComp.q = (int16_t)regdata16;
 800255c:	f8ad 100c 	strh.w	r1, [sp, #12]
          MCI_SetCurrentReferences(pMCIN,currComp);
 8002560:	9903      	ldr	r1, [sp, #12]
 8002562:	48a3      	ldr	r0, [pc, #652]	@ (80027f0 <RI_SetRegisterMotor1+0x328>)
 8002564:	f7fe fd78 	bl	8001058 <MCI_SetCurrentReferences>
  uint8_t retVal = MCP_CMD_OK;
 8002568:	2000      	movs	r0, #0
      *size = 2;
 800256a:	2302      	movs	r3, #2
 800256c:	8023      	strh	r3, [r4, #0]
}
 800256e:	b004      	add	sp, #16
 8002570:	bd10      	pop	{r4, pc}
      switch (regID)
 8002572:	2858      	cmp	r0, #88	@ 0x58
 8002574:	f000 8139 	beq.w	80027ea <RI_SetRegisterMotor1+0x322>
 8002578:	2898      	cmp	r0, #152	@ 0x98
 800257a:	f000 811f 	beq.w	80027bc <RI_SetRegisterMotor1+0x2f4>
 800257e:	2818      	cmp	r0, #24
 8002580:	bf0c      	ite	eq
 8002582:	2004      	moveq	r0, #4
 8002584:	2005      	movne	r0, #5
      *size = 4;
 8002586:	2304      	movs	r3, #4
 8002588:	8023      	strh	r3, [r4, #0]
}
 800258a:	b004      	add	sp, #16
 800258c:	bd10      	pop	{r4, pc}
  *size= 1U ; /* /0 is the min String size */
 800258e:	2001      	movs	r0, #1
 8002590:	8020      	strh	r0, [r4, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002592:	f992 3000 	ldrsb.w	r3, [r2]
 8002596:	2b00      	cmp	r3, #0
 8002598:	f000 8101 	beq.w	800279e <RI_SetRegisterMotor1+0x2d6>
 800259c:	fa1f f38c 	uxth.w	r3, ip
 80025a0:	e005      	b.n	80025ae <RI_SetRegisterMotor1+0xe6>
    *size = *size + 1U;
 80025a2:	8020      	strh	r0, [r4, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80025a4:	f91e 1f01 	ldrsb.w	r1, [lr, #1]!
 80025a8:	2900      	cmp	r1, #0
 80025aa:	f000 80f8 	beq.w	800279e <RI_SetRegisterMotor1+0x2d6>
    *size = *size + 1U;
 80025ae:	f100 0c01 	add.w	ip, r0, #1
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80025b2:	4298      	cmp	r0, r3
    *size = *size + 1U;
 80025b4:	fa1f f08c 	uxth.w	r0, ip
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80025b8:	d3f3      	bcc.n	80025a2 <RI_SetRegisterMotor1+0xda>
 80025ba:	e01b      	b.n	80025f4 <RI_SetRegisterMotor1+0x12c>
      *size = rawSize + 2U;
 80025bc:	8812      	ldrh	r2, [r2, #0]
 80025be:	3202      	adds	r2, #2
 80025c0:	b292      	uxth	r2, r2
      if (*size > (uint16_t)dataAvailable)
 80025c2:	fa1f f38c 	uxth.w	r3, ip
 80025c6:	429a      	cmp	r2, r3
      *size = rawSize + 2U;
 80025c8:	8022      	strh	r2, [r4, #0]
      if (*size > (uint16_t)dataAvailable)
 80025ca:	f200 80f1 	bhi.w	80027b0 <RI_SetRegisterMotor1+0x2e8>
        switch (regID)
 80025ce:	f5b0 7ff4 	cmp.w	r0, #488	@ 0x1e8
 80025d2:	f000 8128 	beq.w	8002826 <RI_SetRegisterMotor1+0x35e>
 80025d6:	f200 80d4 	bhi.w	8002782 <RI_SetRegisterMotor1+0x2ba>
 80025da:	f5b0 7fd4 	cmp.w	r0, #424	@ 0x1a8
 80025de:	f000 8113 	beq.w	8002808 <RI_SetRegisterMotor1+0x340>
 80025e2:	f200 80cb 	bhi.w	800277c <RI_SetRegisterMotor1+0x2b4>
 80025e6:	28a8      	cmp	r0, #168	@ 0xa8
 80025e8:	d004      	beq.n	80025f4 <RI_SetRegisterMotor1+0x12c>
 80025ea:	f240 80c2 	bls.w	8002772 <RI_SetRegisterMotor1+0x2aa>
 80025ee:	28e8      	cmp	r0, #232	@ 0xe8
 80025f0:	f040 80c4 	bne.w	800277c <RI_SetRegisterMotor1+0x2b4>
      retVal = MCP_ERROR_RO_REG;
 80025f4:	2004      	movs	r0, #4
 80025f6:	e786      	b.n	8002506 <RI_SetRegisterMotor1+0x3e>
 80025f8:	d90f      	bls.n	800261a <RI_SetRegisterMotor1+0x152>
      *size = 2;
 80025fa:	2302      	movs	r3, #2
          retVal = MCP_ERROR_UNKNOWN_REG;
 80025fc:	2005      	movs	r0, #5
      *size = 2;
 80025fe:	8023      	strh	r3, [r4, #0]
      break;
 8002600:	e7b5      	b.n	800256e <RI_SetRegisterMotor1+0xa6>
 8002602:	f5b0 7f24 	cmp.w	r0, #656	@ 0x290
 8002606:	f000 814a 	beq.w	800289e <RI_SetRegisterMotor1+0x3d6>
 800260a:	f5b0 7f34 	cmp.w	r0, #720	@ 0x2d0
 800260e:	d1f4      	bne.n	80025fa <RI_SetRegisterMotor1+0x132>
          PID_SetKI(&PIDIdHandle_M1, (int16_t)regdata16);
 8002610:	4878      	ldr	r0, [pc, #480]	@ (80027f4 <RI_SetRegisterMotor1+0x32c>)
 8002612:	b209      	sxth	r1, r1
 8002614:	f003 fdd6 	bl	80061c4 <PID_SetKI>
          break;
 8002618:	e7a6      	b.n	8002568 <RI_SetRegisterMotor1+0xa0>
 800261a:	f5b0 6f01 	cmp.w	r0, #2064	@ 0x810
 800261e:	d00d      	beq.n	800263c <RI_SetRegisterMotor1+0x174>
 8002620:	d94f      	bls.n	80026c2 <RI_SetRegisterMotor1+0x1fa>
 8002622:	f5b0 6f0d 	cmp.w	r0, #2256	@ 0x8d0
 8002626:	d009      	beq.n	800263c <RI_SetRegisterMotor1+0x174>
 8002628:	d938      	bls.n	800269c <RI_SetRegisterMotor1+0x1d4>
          retVal = MCP_ERROR_UNKNOWN_REG;
 800262a:	f5b0 6f11 	cmp.w	r0, #2320	@ 0x910
      *size = 2;
 800262e:	f04f 0302 	mov.w	r3, #2
          retVal = MCP_ERROR_UNKNOWN_REG;
 8002632:	bf0c      	ite	eq
 8002634:	2004      	moveq	r0, #4
 8002636:	2005      	movne	r0, #5
      *size = 2;
 8002638:	8023      	strh	r3, [r4, #0]
      break;
 800263a:	e798      	b.n	800256e <RI_SetRegisterMotor1+0xa6>
 800263c:	2004      	movs	r0, #4
 800263e:	e794      	b.n	800256a <RI_SetRegisterMotor1+0xa2>
 8002640:	f5b0 7f88 	cmp.w	r0, #272	@ 0x110
 8002644:	f000 8145 	beq.w	80028d2 <RI_SetRegisterMotor1+0x40a>
 8002648:	d931      	bls.n	80026ae <RI_SetRegisterMotor1+0x1e6>
 800264a:	f5b0 7fc8 	cmp.w	r0, #400	@ 0x190
 800264e:	f000 812f 	beq.w	80028b0 <RI_SetRegisterMotor1+0x3e8>
 8002652:	f5b0 7fe8 	cmp.w	r0, #464	@ 0x1d0
 8002656:	d1d0      	bne.n	80025fa <RI_SetRegisterMotor1+0x132>
          PID_SetKI(&PIDIqHandle_M1, (int16_t)regdata16);
 8002658:	4867      	ldr	r0, [pc, #412]	@ (80027f8 <RI_SetRegisterMotor1+0x330>)
 800265a:	b209      	sxth	r1, r1
 800265c:	f003 fdb2 	bl	80061c4 <PID_SetKI>
          break;
 8002660:	e782      	b.n	8002568 <RI_SetRegisterMotor1+0xa0>
 8002662:	f241 5310 	movw	r3, #5392	@ 0x1510
 8002666:	4298      	cmp	r0, r3
 8002668:	f000 812f 	beq.w	80028ca <RI_SetRegisterMotor1+0x402>
 800266c:	d940      	bls.n	80026f0 <RI_SetRegisterMotor1+0x228>
 800266e:	f241 53d0 	movw	r3, #5584	@ 0x15d0
 8002672:	4298      	cmp	r0, r3
 8002674:	f000 8125 	beq.w	80028c2 <RI_SetRegisterMotor1+0x3fa>
 8002678:	d92d      	bls.n	80026d6 <RI_SetRegisterMotor1+0x20e>
 800267a:	f241 6350 	movw	r3, #5712	@ 0x1650
 800267e:	4298      	cmp	r0, r3
 8002680:	f000 8100 	beq.w	8002884 <RI_SetRegisterMotor1+0x3bc>
 8002684:	f641 3358 	movw	r3, #7000	@ 0x1b58
 8002688:	4298      	cmp	r0, r3
 800268a:	d0d7      	beq.n	800263c <RI_SetRegisterMotor1+0x174>
 800268c:	f241 6310 	movw	r3, #5648	@ 0x1610
 8002690:	4298      	cmp	r0, r3
 8002692:	d1b2      	bne.n	80025fa <RI_SetRegisterMotor1+0x132>
          PID_SetKIDivisorPOW2(&PIDIqHandle_M1, regdata16);
 8002694:	4858      	ldr	r0, [pc, #352]	@ (80027f8 <RI_SetRegisterMotor1+0x330>)
 8002696:	f003 fdaf 	bl	80061f8 <PID_SetKIDivisorPOW2>
          break;
 800269a:	e765      	b.n	8002568 <RI_SetRegisterMotor1+0xa0>
 800269c:	f5b0 6f05 	cmp.w	r0, #2128	@ 0x850
 80026a0:	d0cc      	beq.n	800263c <RI_SetRegisterMotor1+0x174>
          retVal = MCP_ERROR_UNKNOWN_REG;
 80026a2:	f5b0 6f09 	cmp.w	r0, #2192	@ 0x890
 80026a6:	bf0c      	ite	eq
 80026a8:	2004      	moveq	r0, #4
 80026aa:	2005      	movne	r0, #5
 80026ac:	e75d      	b.n	800256a <RI_SetRegisterMotor1+0xa2>
 80026ae:	2890      	cmp	r0, #144	@ 0x90
 80026b0:	f000 80d1 	beq.w	8002856 <RI_SetRegisterMotor1+0x38e>
 80026b4:	28d0      	cmp	r0, #208	@ 0xd0
 80026b6:	d1a0      	bne.n	80025fa <RI_SetRegisterMotor1+0x132>
          PID_SetKI(&PIDSpeedHandle_M1, (int16_t)regdata16);
 80026b8:	4850      	ldr	r0, [pc, #320]	@ (80027fc <RI_SetRegisterMotor1+0x334>)
 80026ba:	b209      	sxth	r1, r1
 80026bc:	f003 fd82 	bl	80061c4 <PID_SetKI>
          break;
 80026c0:	e752      	b.n	8002568 <RI_SetRegisterMotor1+0xa0>
 80026c2:	f5b0 6ff2 	cmp.w	r0, #1936	@ 0x790
 80026c6:	d0b9      	beq.n	800263c <RI_SetRegisterMotor1+0x174>
 80026c8:	d926      	bls.n	8002718 <RI_SetRegisterMotor1+0x250>
          retVal = MCP_ERROR_UNKNOWN_REG;
 80026ca:	f5b0 6ffa 	cmp.w	r0, #2000	@ 0x7d0
 80026ce:	bf0c      	ite	eq
 80026d0:	2004      	moveq	r0, #4
 80026d2:	2005      	movne	r0, #5
 80026d4:	e749      	b.n	800256a <RI_SetRegisterMotor1+0xa2>
 80026d6:	f241 5350 	movw	r3, #5456	@ 0x1550
 80026da:	4298      	cmp	r0, r3
 80026dc:	f000 80e4 	beq.w	80028a8 <RI_SetRegisterMotor1+0x3e0>
 80026e0:	f241 5390 	movw	r3, #5520	@ 0x1590
 80026e4:	4298      	cmp	r0, r3
 80026e6:	d188      	bne.n	80025fa <RI_SetRegisterMotor1+0x132>
          PID_SetKDDivisorPOW2(&PIDIdHandle_M1, regdata16);
 80026e8:	4842      	ldr	r0, [pc, #264]	@ (80027f4 <RI_SetRegisterMotor1+0x32c>)
 80026ea:	f003 fda1 	bl	8006230 <PID_SetKDDivisorPOW2>
          break;
 80026ee:	e73b      	b.n	8002568 <RI_SetRegisterMotor1+0xa0>
 80026f0:	f241 4350 	movw	r3, #5200	@ 0x1450
 80026f4:	4298      	cmp	r0, r3
 80026f6:	f000 80e0 	beq.w	80028ba <RI_SetRegisterMotor1+0x3f2>
 80026fa:	d915      	bls.n	8002728 <RI_SetRegisterMotor1+0x260>
 80026fc:	f241 4390 	movw	r3, #5264	@ 0x1490
 8002700:	4298      	cmp	r0, r3
 8002702:	f000 80c3 	beq.w	800288c <RI_SetRegisterMotor1+0x3c4>
 8002706:	f241 43d0 	movw	r3, #5328	@ 0x14d0
 800270a:	4298      	cmp	r0, r3
 800270c:	f47f af75 	bne.w	80025fa <RI_SetRegisterMotor1+0x132>
          PID_SetKDDivisorPOW2(&PIDSpeedHandle_M1, regdata16);
 8002710:	483a      	ldr	r0, [pc, #232]	@ (80027fc <RI_SetRegisterMotor1+0x334>)
 8002712:	f003 fd8d 	bl	8006230 <PID_SetKDDivisorPOW2>
          break;
 8002716:	e727      	b.n	8002568 <RI_SetRegisterMotor1+0xa0>
 8002718:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
          retVal = MCP_ERROR_UNKNOWN_REG;
 800271c:	f5b0 6fb2 	cmp.w	r0, #1424	@ 0x590
 8002720:	bf0c      	ite	eq
 8002722:	2004      	moveq	r0, #4
 8002724:	2005      	movne	r0, #5
 8002726:	e720      	b.n	800256a <RI_SetRegisterMotor1+0xa2>
 8002728:	f5b0 6f65 	cmp.w	r0, #3664	@ 0xe50
 800272c:	f43f af1c 	beq.w	8002568 <RI_SetRegisterMotor1+0xa0>
 8002730:	d904      	bls.n	800273c <RI_SetRegisterMotor1+0x274>
 8002732:	f5b0 6f69 	cmp.w	r0, #3728	@ 0xe90
 8002736:	f43f af17 	beq.w	8002568 <RI_SetRegisterMotor1+0xa0>
 800273a:	e75e      	b.n	80025fa <RI_SetRegisterMotor1+0x132>
 800273c:	f5b0 6f29 	cmp.w	r0, #2704	@ 0xa90
 8002740:	f43f af7c 	beq.w	800263c <RI_SetRegisterMotor1+0x174>
 8002744:	d909      	bls.n	800275a <RI_SetRegisterMotor1+0x292>
 8002746:	f5b0 6f2d 	cmp.w	r0, #2768	@ 0xad0
 800274a:	f43f af77 	beq.w	800263c <RI_SetRegisterMotor1+0x174>
 800274e:	f5b0 6f31 	cmp.w	r0, #2832	@ 0xb10
 8002752:	bf0c      	ite	eq
 8002754:	2004      	moveq	r0, #4
 8002756:	2005      	movne	r0, #5
 8002758:	e707      	b.n	800256a <RI_SetRegisterMotor1+0xa2>
 800275a:	f020 0340 	bic.w	r3, r0, #64	@ 0x40
 800275e:	f5b3 6f21 	cmp.w	r3, #2576	@ 0xa10
 8002762:	f43f af6b 	beq.w	800263c <RI_SetRegisterMotor1+0x174>
 8002766:	f5b0 6f1d 	cmp.w	r0, #2512	@ 0x9d0
 800276a:	bf0c      	ite	eq
 800276c:	2004      	moveq	r0, #4
 800276e:	2005      	movne	r0, #5
 8002770:	e6fb      	b.n	800256a <RI_SetRegisterMotor1+0xa2>
 8002772:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 8002776:	2828      	cmp	r0, #40	@ 0x28
 8002778:	f43f af3c 	beq.w	80025f4 <RI_SetRegisterMotor1+0x12c>
 800277c:	2005      	movs	r0, #5
}
 800277e:	b004      	add	sp, #16
 8002780:	bd10      	pop	{r4, pc}
 8002782:	f5b0 7f5a 	cmp.w	r0, #872	@ 0x368
 8002786:	d056      	beq.n	8002836 <RI_SetRegisterMotor1+0x36e>
 8002788:	f5b0 6fa5 	cmp.w	r0, #1320	@ 0x528
 800278c:	d1f6      	bne.n	800277c <RI_SetRegisterMotor1+0x2b4>
            retVal =  MCPA_cfgLog (&MCPA_UART_A, rawData);
 800278e:	481c      	ldr	r0, [pc, #112]	@ (8002800 <RI_SetRegisterMotor1+0x338>)
 8002790:	f10e 0102 	add.w	r1, lr, #2
}
 8002794:	b004      	add	sp, #16
 8002796:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            retVal =  MCPA_cfgLog (&MCPA_UART_A, rawData);
 800279a:	f003 bc6d 	b.w	8006078 <MCPA_cfgLog>
    *tempdestString = (int8_t)0;
 800279e:	2300      	movs	r3, #0
 80027a0:	f88e 3000 	strb.w	r3, [lr]
 80027a4:	e726      	b.n	80025f4 <RI_SetRegisterMotor1+0x12c>
 80027a6:	2005      	movs	r0, #5
      *size = 1;
 80027a8:	2301      	movs	r3, #1
 80027aa:	8023      	strh	r3, [r4, #0]
}
 80027ac:	b004      	add	sp, #16
 80027ae:	bd10      	pop	{r4, pc}
        *size = 0;
 80027b0:	2300      	movs	r3, #0
 80027b2:	8023      	strh	r3, [r4, #0]
        retVal = MCP_ERROR_BAD_RAW_FORMAT; /* This error stop the parsing of the CMD buffer */
 80027b4:	200a      	movs	r0, #10
 80027b6:	e6a6      	b.n	8002506 <RI_SetRegisterMotor1+0x3e>
            retVal = MCP_ERROR_RO_REG;
 80027b8:	2004      	movs	r0, #4
 80027ba:	e7f5      	b.n	80027a8 <RI_SetRegisterMotor1+0x2e0>
          MCI_ExecSpeedRamp(pMCIN,((((int16_t)regdata32) * ((int16_t)SPEED_UNIT)) / (int16_t)U_RPM), 0);
 80027bc:	f9b2 3000 	ldrsh.w	r3, [r2]
 80027c0:	4910      	ldr	r1, [pc, #64]	@ (8002804 <RI_SetRegisterMotor1+0x33c>)
 80027c2:	480b      	ldr	r0, [pc, #44]	@ (80027f0 <RI_SetRegisterMotor1+0x328>)
 80027c4:	fb81 2103 	smull	r2, r1, r1, r3
 80027c8:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 80027cc:	2200      	movs	r2, #0
 80027ce:	b209      	sxth	r1, r1
 80027d0:	f7fe fc2e 	bl	8001030 <MCI_ExecSpeedRamp>
  uint8_t retVal = MCP_CMD_OK;
 80027d4:	2000      	movs	r0, #0
          break;
 80027d6:	e6d6      	b.n	8002586 <RI_SetRegisterMotor1+0xbe>
            MCI_ExecTorqueRamp(pMCIN, MCI_GetTeref(pMCIN), 0);
 80027d8:	4805      	ldr	r0, [pc, #20]	@ (80027f0 <RI_SetRegisterMotor1+0x328>)
 80027da:	f7fe fd55 	bl	8001288 <MCI_GetTeref>
 80027de:	2200      	movs	r2, #0
 80027e0:	4601      	mov	r1, r0
 80027e2:	4803      	ldr	r0, [pc, #12]	@ (80027f0 <RI_SetRegisterMotor1+0x328>)
 80027e4:	f7fe fc2e 	bl	8001044 <MCI_ExecTorqueRamp>
          if ((uint8_t)MCM_SPEED_MODE == regdata8)
 80027e8:	e69c      	b.n	8002524 <RI_SetRegisterMotor1+0x5c>
          retVal = MCP_ERROR_RO_REG;
 80027ea:	2004      	movs	r0, #4
 80027ec:	e6cb      	b.n	8002586 <RI_SetRegisterMotor1+0xbe>
 80027ee:	bf00      	nop
 80027f0:	2000040c 	.word	0x2000040c
 80027f4:	20000220 	.word	0x20000220
 80027f8:	2000024c 	.word	0x2000024c
 80027fc:	20000278 	.word	0x20000278
 8002800:	200002d4 	.word	0x200002d4
 8002804:	2aaaaaab 	.word	0x2aaaaaab
            MCI_ExecSpeedRamp(pMCIN, (int16_t)((rpm * SPEED_UNIT) / U_RPM), duration);
 8002808:	f8de 1002 	ldr.w	r1, [lr, #2]
 800280c:	4b33      	ldr	r3, [pc, #204]	@ (80028dc <RI_SetRegisterMotor1+0x414>)
 800280e:	f8be 2006 	ldrh.w	r2, [lr, #6]
 8002812:	fb83 0301 	smull	r0, r3, r3, r1
 8002816:	eba3 71e1 	sub.w	r1, r3, r1, asr #31
 800281a:	4831      	ldr	r0, [pc, #196]	@ (80028e0 <RI_SetRegisterMotor1+0x418>)
 800281c:	b209      	sxth	r1, r1
 800281e:	f7fe fc07 	bl	8001030 <MCI_ExecSpeedRamp>
  uint8_t retVal = MCP_CMD_OK;
 8002822:	2000      	movs	r0, #0
 8002824:	e66f      	b.n	8002506 <RI_SetRegisterMotor1+0x3e>
            MCI_ExecTorqueRamp(pMCIN, (int16_t)torque, duration);
 8002826:	f8be 2006 	ldrh.w	r2, [lr, #6]
 800282a:	f9be 1002 	ldrsh.w	r1, [lr, #2]
 800282e:	482c      	ldr	r0, [pc, #176]	@ (80028e0 <RI_SetRegisterMotor1+0x418>)
 8002830:	f7fe fc08 	bl	8001044 <MCI_ExecTorqueRamp>
            break;
 8002834:	e7f5      	b.n	8002822 <RI_SetRegisterMotor1+0x35a>
            currComp.q = *((int16_t *) rawData); //cstat !MISRAC2012-Rule-11.3
 8002836:	f8de 1002 	ldr.w	r1, [lr, #2]
            MCI_SetCurrentReferences(pMCIN, currComp);
 800283a:	4829      	ldr	r0, [pc, #164]	@ (80028e0 <RI_SetRegisterMotor1+0x418>)
            currComp.q = *((int16_t *) rawData); //cstat !MISRAC2012-Rule-11.3
 800283c:	9103      	str	r1, [sp, #12]
            MCI_SetCurrentReferences(pMCIN, currComp);
 800283e:	f7fe fc0b 	bl	8001058 <MCI_SetCurrentReferences>
            break;
 8002842:	e7ee      	b.n	8002822 <RI_SetRegisterMotor1+0x35a>
            MCI_ExecSpeedRamp(pMCIN, MCI_GetMecSpeedRefUnit(pMCIN), 0);
 8002844:	4826      	ldr	r0, [pc, #152]	@ (80028e0 <RI_SetRegisterMotor1+0x418>)
 8002846:	f7fe fcc7 	bl	80011d8 <MCI_GetMecSpeedRefUnit>
 800284a:	2200      	movs	r2, #0
 800284c:	4601      	mov	r1, r0
 800284e:	4824      	ldr	r0, [pc, #144]	@ (80028e0 <RI_SetRegisterMotor1+0x418>)
 8002850:	f7fe fbee 	bl	8001030 <MCI_ExecSpeedRamp>
 8002854:	e666      	b.n	8002524 <RI_SetRegisterMotor1+0x5c>
          PID_SetKP(&PIDSpeedHandle_M1, (int16_t)regdata16);
 8002856:	4823      	ldr	r0, [pc, #140]	@ (80028e4 <RI_SetRegisterMotor1+0x41c>)
 8002858:	b209      	sxth	r1, r1
 800285a:	f003 fcb1 	bl	80061c0 <PID_SetKP>
          break;
 800285e:	e683      	b.n	8002568 <RI_SetRegisterMotor1+0xa0>
          PID_SetKD(&PIDIqHandle_M1, (int16_t)regdata16);
 8002860:	4821      	ldr	r0, [pc, #132]	@ (80028e8 <RI_SetRegisterMotor1+0x420>)
 8002862:	b209      	sxth	r1, r1
 8002864:	f003 fcdc 	bl	8006220 <PID_SetKD>
          break;
 8002868:	e67e      	b.n	8002568 <RI_SetRegisterMotor1+0xa0>
          currComp = MCI_GetIqdref(pMCIN);
 800286a:	481d      	ldr	r0, [pc, #116]	@ (80028e0 <RI_SetRegisterMotor1+0x418>)
 800286c:	9101      	str	r1, [sp, #4]
 800286e:	f7fe fce1 	bl	8001234 <MCI_GetIqdref>
          currComp.d = (int16_t)regdata16;
 8002872:	9901      	ldr	r1, [sp, #4]
          currComp = MCI_GetIqdref(pMCIN);
 8002874:	9003      	str	r0, [sp, #12]
          currComp.d = (int16_t)regdata16;
 8002876:	f8ad 100e 	strh.w	r1, [sp, #14]
          MCI_SetCurrentReferences(pMCIN,currComp);
 800287a:	9903      	ldr	r1, [sp, #12]
 800287c:	4818      	ldr	r0, [pc, #96]	@ (80028e0 <RI_SetRegisterMotor1+0x418>)
 800287e:	f7fe fbeb 	bl	8001058 <MCI_SetCurrentReferences>
          break;
 8002882:	e671      	b.n	8002568 <RI_SetRegisterMotor1+0xa0>
          PID_SetKDDivisorPOW2(&PIDIqHandle_M1, regdata16);
 8002884:	4818      	ldr	r0, [pc, #96]	@ (80028e8 <RI_SetRegisterMotor1+0x420>)
 8002886:	f003 fcd3 	bl	8006230 <PID_SetKDDivisorPOW2>
          break;
 800288a:	e66d      	b.n	8002568 <RI_SetRegisterMotor1+0xa0>
          PID_SetKIDivisorPOW2(&PIDSpeedHandle_M1, regdata16);
 800288c:	4815      	ldr	r0, [pc, #84]	@ (80028e4 <RI_SetRegisterMotor1+0x41c>)
 800288e:	f003 fcb3 	bl	80061f8 <PID_SetKIDivisorPOW2>
          break;
 8002892:	e669      	b.n	8002568 <RI_SetRegisterMotor1+0xa0>
          PID_SetKD(&PIDIdHandle_M1, (int16_t)regdata16);
 8002894:	4815      	ldr	r0, [pc, #84]	@ (80028ec <RI_SetRegisterMotor1+0x424>)
 8002896:	b209      	sxth	r1, r1
 8002898:	f003 fcc2 	bl	8006220 <PID_SetKD>
          break;
 800289c:	e664      	b.n	8002568 <RI_SetRegisterMotor1+0xa0>
          PID_SetKP(&PIDIdHandle_M1, (int16_t)regdata16);
 800289e:	4813      	ldr	r0, [pc, #76]	@ (80028ec <RI_SetRegisterMotor1+0x424>)
 80028a0:	b209      	sxth	r1, r1
 80028a2:	f003 fc8d 	bl	80061c0 <PID_SetKP>
          break;
 80028a6:	e65f      	b.n	8002568 <RI_SetRegisterMotor1+0xa0>
          PID_SetKIDivisorPOW2(&PIDIdHandle_M1, regdata16);
 80028a8:	4810      	ldr	r0, [pc, #64]	@ (80028ec <RI_SetRegisterMotor1+0x424>)
 80028aa:	f003 fca5 	bl	80061f8 <PID_SetKIDivisorPOW2>
          break;
 80028ae:	e65b      	b.n	8002568 <RI_SetRegisterMotor1+0xa0>
          PID_SetKP(&PIDIqHandle_M1, (int16_t)regdata16);
 80028b0:	480d      	ldr	r0, [pc, #52]	@ (80028e8 <RI_SetRegisterMotor1+0x420>)
 80028b2:	b209      	sxth	r1, r1
 80028b4:	f003 fc84 	bl	80061c0 <PID_SetKP>
          break;
 80028b8:	e656      	b.n	8002568 <RI_SetRegisterMotor1+0xa0>
          PID_SetKPDivisorPOW2(&PIDSpeedHandle_M1, regdata16);
 80028ba:	480a      	ldr	r0, [pc, #40]	@ (80028e4 <RI_SetRegisterMotor1+0x41c>)
 80028bc:	f003 fc90 	bl	80061e0 <PID_SetKPDivisorPOW2>
          break;
 80028c0:	e652      	b.n	8002568 <RI_SetRegisterMotor1+0xa0>
          PID_SetKPDivisorPOW2(&PIDIqHandle_M1, regdata16);
 80028c2:	4809      	ldr	r0, [pc, #36]	@ (80028e8 <RI_SetRegisterMotor1+0x420>)
 80028c4:	f003 fc8c 	bl	80061e0 <PID_SetKPDivisorPOW2>
          break;
 80028c8:	e64e      	b.n	8002568 <RI_SetRegisterMotor1+0xa0>
          PID_SetKPDivisorPOW2(&PIDIdHandle_M1, regdata16);
 80028ca:	4808      	ldr	r0, [pc, #32]	@ (80028ec <RI_SetRegisterMotor1+0x424>)
 80028cc:	f003 fc88 	bl	80061e0 <PID_SetKPDivisorPOW2>
          break;
 80028d0:	e64a      	b.n	8002568 <RI_SetRegisterMotor1+0xa0>
          PID_SetKD(&PIDSpeedHandle_M1, (int16_t)regdata16);
 80028d2:	4804      	ldr	r0, [pc, #16]	@ (80028e4 <RI_SetRegisterMotor1+0x41c>)
 80028d4:	b209      	sxth	r1, r1
 80028d6:	f003 fca3 	bl	8006220 <PID_SetKD>
          break;
 80028da:	e645      	b.n	8002568 <RI_SetRegisterMotor1+0xa0>
 80028dc:	2aaaaaab 	.word	0x2aaaaaab
 80028e0:	2000040c 	.word	0x2000040c
 80028e4:	20000278 	.word	0x20000278
 80028e8:	2000024c 	.word	0x2000024c
 80028ec:	20000220 	.word	0x20000220

080028f0 <RI_GetRegisterGlobal>:
uint8_t RI_GetRegisterGlobal(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace){
 80028f0:	b510      	push	{r4, lr}
    switch (typeID)
 80028f2:	f1a1 0c08 	sub.w	ip, r1, #8
uint8_t RI_GetRegisterGlobal(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace){
 80028f6:	f9bd e008 	ldrsh.w	lr, [sp, #8]
    switch (typeID)
 80028fa:	f1bc 0f20 	cmp.w	ip, #32
 80028fe:	d812      	bhi.n	8002926 <RI_GetRegisterGlobal+0x36>
 8002900:	e8df f00c 	tbb	[pc, ip]
 8002904:	1111111b 	.word	0x1111111b
 8002908:	11111111 	.word	0x11111111
 800290c:	11111127 	.word	0x11111127
 8002910:	11111111 	.word	0x11111111
 8002914:	11111122 	.word	0x11111122
 8002918:	11111111 	.word	0x11111111
 800291c:	11111135 	.word	0x11111135
 8002920:	11111111 	.word	0x11111111
 8002924:	13          	.byte	0x13
 8002925:	00          	.byte	0x00
 8002926:	2007      	movs	r0, #7
}
 8002928:	bd10      	pop	{r4, pc}
        switch (regID)
 800292a:	2828      	cmp	r0, #40	@ 0x28
 800292c:	d044      	beq.n	80029b8 <RI_GetRegisterGlobal+0xc8>
        *size = (*rawSize) + 2U;
 800292e:	8812      	ldrh	r2, [r2, #0]
 8002930:	3202      	adds	r2, #2
            retVal = MCP_ERROR_UNKNOWN_REG;
 8002932:	2005      	movs	r0, #5
        *size = (*rawSize) + 2U;
 8002934:	b292      	uxth	r2, r2
 8002936:	801a      	strh	r2, [r3, #0]
}
 8002938:	bd10      	pop	{r4, pc}
        if (freeSpace > 0)
 800293a:	f1be 0f00 	cmp.w	lr, #0
 800293e:	dd39      	ble.n	80029b4 <RI_GetRegisterGlobal+0xc4>
 8002940:	2201      	movs	r2, #1
            *size= 0 ; /* */
 8002942:	801a      	strh	r2, [r3, #0]
              retVal = MCP_ERROR_UNKNOWN_REG;
 8002944:	2005      	movs	r0, #5
}
 8002946:	bd10      	pop	{r4, pc}
        if (freeSpace >= 4)
 8002948:	f1be 0f03 	cmp.w	lr, #3
 800294c:	dd2a      	ble.n	80029a4 <RI_GetRegisterGlobal+0xb4>
 800294e:	2204      	movs	r2, #4
 8002950:	e7f7      	b.n	8002942 <RI_GetRegisterGlobal+0x52>
        if (freeSpace >= 2)
 8002952:	f1be 0f01 	cmp.w	lr, #1
 8002956:	dd25      	ble.n	80029a4 <RI_GetRegisterGlobal+0xb4>
          switch (regID)
 8002958:	f5b0 6f65 	cmp.w	r0, #3664	@ 0xe50
 800295c:	d05a      	beq.n	8002a14 <RI_GetRegisterGlobal+0x124>
 800295e:	f5b0 6f69 	cmp.w	r0, #3728	@ 0xe90
 8002962:	bf0c      	ite	eq
 8002964:	2000      	moveq	r0, #0
 8002966:	2005      	movne	r0, #5
          *size = 2;
 8002968:	2202      	movs	r2, #2
 800296a:	801a      	strh	r2, [r3, #0]
}
 800296c:	bd10      	pop	{r4, pc}
        switch (regID)
 800296e:	2820      	cmp	r0, #32
 8002970:	d02c      	beq.n	80029cc <RI_GetRegisterGlobal+0xdc>
 8002972:	2860      	cmp	r0, #96	@ 0x60
 8002974:	d118      	bne.n	80029a8 <RI_GetRegisterGlobal+0xb8>
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002976:	4c28      	ldr	r4, [pc, #160]	@ (8002a18 <RI_GetRegisterGlobal+0x128>)
 8002978:	f994 0000 	ldrsb.w	r0, [r4]
  *size= 1U ; /* /0 is the min String size */
 800297c:	2101      	movs	r1, #1
 800297e:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002980:	b1a0      	cbz	r0, 80029ac <RI_GetRegisterGlobal+0xbc>
 8002982:	fa1f fe8e 	uxth.w	lr, lr
  const char_t *tempsrcString = srcString;
 8002986:	46a4      	mov	ip, r4
 8002988:	e008      	b.n	800299c <RI_GetRegisterGlobal+0xac>
    *tempdestString = *tempsrcString;
 800298a:	f802 0b01 	strb.w	r0, [r2], #1
    *size = *size + 1U;
 800298e:	8819      	ldrh	r1, [r3, #0]
 8002990:	3101      	adds	r1, #1
 8002992:	b289      	uxth	r1, r1
 8002994:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002996:	f91c 0f01 	ldrsb.w	r0, [ip, #1]!
 800299a:	b138      	cbz	r0, 80029ac <RI_GetRegisterGlobal+0xbc>
 800299c:	4571      	cmp	r1, lr
 800299e:	d3f4      	bcc.n	800298a <RI_GetRegisterGlobal+0x9a>
    retVal = MCP_ERROR_STRING_FORMAT;
 80029a0:	2006      	movs	r0, #6
}
 80029a2:	bd10      	pop	{r4, pc}
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 80029a4:	2008      	movs	r0, #8
}
 80029a6:	bd10      	pop	{r4, pc}
 80029a8:	2200      	movs	r2, #0
 80029aa:	e7ca      	b.n	8002942 <RI_GetRegisterGlobal+0x52>
    *tempdestString = (int8_t)0;
 80029ac:	2300      	movs	r3, #0
 80029ae:	7013      	strb	r3, [r2, #0]
  uint8_t retVal = MCP_CMD_OK;
 80029b0:	2000      	movs	r0, #0
}
 80029b2:	bd10      	pop	{r4, pc}
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 80029b4:	4608      	mov	r0, r1
}
 80029b6:	bd10      	pop	{r4, pc}
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 80029b8:	fa1f fe8e 	uxth.w	lr, lr
            *rawSize = (uint16_t)sizeof(GlobalConfig_reg_t);
 80029bc:	210a      	movs	r1, #10
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 80029be:	f1be 0f0b 	cmp.w	lr, #11
            *rawSize = (uint16_t)sizeof(GlobalConfig_reg_t);
 80029c2:	8011      	strh	r1, [r2, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 80029c4:	d81a      	bhi.n	80029fc <RI_GetRegisterGlobal+0x10c>
 80029c6:	220c      	movs	r2, #12
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 80029c8:	2008      	movs	r0, #8
 80029ca:	e7b4      	b.n	8002936 <RI_GetRegisterGlobal+0x46>
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80029cc:	4c13      	ldr	r4, [pc, #76]	@ (8002a1c <RI_GetRegisterGlobal+0x12c>)
 80029ce:	f994 0000 	ldrsb.w	r0, [r4]
  *size= 1U ; /* /0 is the min String size */
 80029d2:	2101      	movs	r1, #1
 80029d4:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80029d6:	2800      	cmp	r0, #0
 80029d8:	d0e8      	beq.n	80029ac <RI_GetRegisterGlobal+0xbc>
 80029da:	fa1f fe8e 	uxth.w	lr, lr
  const char_t *tempsrcString = srcString;
 80029de:	46a4      	mov	ip, r4
 80029e0:	e009      	b.n	80029f6 <RI_GetRegisterGlobal+0x106>
    *tempdestString = *tempsrcString;
 80029e2:	f802 0b01 	strb.w	r0, [r2], #1
    *size = *size + 1U;
 80029e6:	8819      	ldrh	r1, [r3, #0]
 80029e8:	3101      	adds	r1, #1
 80029ea:	b289      	uxth	r1, r1
 80029ec:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80029ee:	f91c 0f01 	ldrsb.w	r0, [ip, #1]!
 80029f2:	2800      	cmp	r0, #0
 80029f4:	d0da      	beq.n	80029ac <RI_GetRegisterGlobal+0xbc>
 80029f6:	458e      	cmp	lr, r1
 80029f8:	d8f3      	bhi.n	80029e2 <RI_GetRegisterGlobal+0xf2>
 80029fa:	e7d1      	b.n	80029a0 <RI_GetRegisterGlobal+0xb0>
              (void)memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t));
 80029fc:	4908      	ldr	r1, [pc, #32]	@ (8002a20 <RI_GetRegisterGlobal+0x130>)
 80029fe:	6848      	ldr	r0, [r1, #4]
 8002a00:	680c      	ldr	r4, [r1, #0]
 8002a02:	8909      	ldrh	r1, [r1, #8]
 8002a04:	f8c2 0006 	str.w	r0, [r2, #6]
 8002a08:	f8c2 4002 	str.w	r4, [r2, #2]
 8002a0c:	8151      	strh	r1, [r2, #10]
    uint8_t retVal = MCP_CMD_OK;
 8002a0e:	2000      	movs	r0, #0
              (void)memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t));
 8002a10:	220c      	movs	r2, #12
 8002a12:	e790      	b.n	8002936 <RI_GetRegisterGlobal+0x46>
    uint8_t retVal = MCP_CMD_OK;
 8002a14:	2000      	movs	r0, #0
 8002a16:	e7a7      	b.n	8002968 <RI_GetRegisterGlobal+0x78>
 8002a18:	080075d8 	.word	0x080075d8
 8002a1c:	080075ac 	.word	0x080075ac
 8002a20:	080075a0 	.word	0x080075a0

08002a24 <RI_GetRegisterMotor1>:
  uint8_t RI_GetRegisterMotor1(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace) {
 8002a24:	b530      	push	{r4, r5, lr}
 8002a26:	b091      	sub	sp, #68	@ 0x44
 8002a28:	461d      	mov	r5, r3
    switch (typeID)
 8002a2a:	f1a1 0308 	sub.w	r3, r1, #8
  uint8_t RI_GetRegisterMotor1(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace) {
 8002a2e:	f9bd c050 	ldrsh.w	ip, [sp, #80]	@ 0x50
 8002a32:	4614      	mov	r4, r2
    switch (typeID)
 8002a34:	2b20      	cmp	r3, #32
 8002a36:	d812      	bhi.n	8002a5e <RI_GetRegisterMotor1+0x3a>
 8002a38:	e8df f003 	tbb	[pc, r3]
 8002a3c:	1111112d 	.word	0x1111112d
 8002a40:	11111111 	.word	0x11111111
 8002a44:	11111140 	.word	0x11111140
 8002a48:	11111111 	.word	0x11111111
 8002a4c:	11111163 	.word	0x11111163
 8002a50:	11111111 	.word	0x11111111
 8002a54:	1111117e 	.word	0x1111117e
 8002a58:	11111111 	.word	0x11111111
 8002a5c:	14          	.byte	0x14
 8002a5d:	00          	.byte	0x00
 8002a5e:	2007      	movs	r0, #7
  }
 8002a60:	b011      	add	sp, #68	@ 0x44
 8002a62:	bd30      	pop	{r4, r5, pc}
        rawData++;
 8002a64:	f5b0 7f94 	cmp.w	r0, #296	@ 0x128
 8002a68:	f104 0302 	add.w	r3, r4, #2
        switch (regID)
 8002a6c:	f000 8236 	beq.w	8002edc <RI_GetRegisterMotor1+0x4b8>
 8002a70:	d87a      	bhi.n	8002b68 <RI_GetRegisterMotor1+0x144>
 8002a72:	28a8      	cmp	r0, #168	@ 0xa8
 8002a74:	f000 8223 	beq.w	8002ebe <RI_GetRegisterMotor1+0x49a>
 8002a78:	28e8      	cmp	r0, #232	@ 0xe8
 8002a7a:	d167      	bne.n	8002b4c <RI_GetRegisterMotor1+0x128>
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002a7c:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = (uint16_t)sizeof(FOCFwConfig_reg_t);
 8002a80:	220e      	movs	r2, #14
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002a82:	f1bc 0f0f 	cmp.w	ip, #15
            *rawSize = (uint16_t)sizeof(FOCFwConfig_reg_t);
 8002a86:	8022      	strh	r2, [r4, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002a88:	f200 81f5 	bhi.w	8002e76 <RI_GetRegisterMotor1+0x452>
 8002a8c:	2310      	movs	r3, #16
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002a8e:	2008      	movs	r0, #8
        *size = (*rawSize) + 2U;
 8002a90:	802b      	strh	r3, [r5, #0]
  }
 8002a92:	b011      	add	sp, #68	@ 0x44
 8002a94:	bd30      	pop	{r4, r5, pc}
        if (freeSpace > 0)
 8002a96:	f1bc 0f00 	cmp.w	ip, #0
 8002a9a:	f340 81f9 	ble.w	8002e90 <RI_GetRegisterMotor1+0x46c>
          switch (regID)
 8002a9e:	2848      	cmp	r0, #72	@ 0x48
 8002aa0:	f000 81f8 	beq.w	8002e94 <RI_GetRegisterMotor1+0x470>
 8002aa4:	2888      	cmp	r0, #136	@ 0x88
 8002aa6:	f040 8193 	bne.w	8002dd0 <RI_GetRegisterMotor1+0x3ac>
              *data = (uint8_t)MCI_GetControlMode(pMCIN);
 8002aaa:	48ad      	ldr	r0, [pc, #692]	@ (8002d60 <RI_GetRegisterMotor1+0x33c>)
 8002aac:	f7fe fb7a 	bl	80011a4 <MCI_GetControlMode>
 8002ab0:	7020      	strb	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002ab2:	2000      	movs	r0, #0
          *size = 1;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	802b      	strh	r3, [r5, #0]
  }
 8002ab8:	b011      	add	sp, #68	@ 0x44
 8002aba:	bd30      	pop	{r4, r5, pc}
        if (freeSpace >= 2)
 8002abc:	f1bc 0f01 	cmp.w	ip, #1
 8002ac0:	f340 8183 	ble.w	8002dca <RI_GetRegisterMotor1+0x3a6>
          switch (regID)
 8002ac4:	f5b0 6f15 	cmp.w	r0, #2384	@ 0x950
 8002ac8:	f000 8244 	beq.w	8002f54 <RI_GetRegisterMotor1+0x530>
 8002acc:	f200 80b6 	bhi.w	8002c3c <RI_GetRegisterMotor1+0x218>
 8002ad0:	f5b0 7f44 	cmp.w	r0, #784	@ 0x310
 8002ad4:	f000 8260 	beq.w	8002f98 <RI_GetRegisterMotor1+0x574>
 8002ad8:	f240 808e 	bls.w	8002bf8 <RI_GetRegisterMotor1+0x1d4>
 8002adc:	f5b0 6f05 	cmp.w	r0, #2128	@ 0x850
 8002ae0:	f000 8255 	beq.w	8002f8e <RI_GetRegisterMotor1+0x56a>
 8002ae4:	d978      	bls.n	8002bd8 <RI_GetRegisterMotor1+0x1b4>
 8002ae6:	f5b0 6f0d 	cmp.w	r0, #2256	@ 0x8d0
 8002aea:	f000 823f 	beq.w	8002f6c <RI_GetRegisterMotor1+0x548>
 8002aee:	f5b0 6f11 	cmp.w	r0, #2320	@ 0x910
 8002af2:	d166      	bne.n	8002bc2 <RI_GetRegisterMotor1+0x19e>
              *regdata16 = MCI_GetIqd(pMCIN).d;
 8002af4:	489a      	ldr	r0, [pc, #616]	@ (8002d60 <RI_GetRegisterMotor1+0x33c>)
 8002af6:	f7fe fb8f 	bl	8001218 <MCI_GetIqd>
 8002afa:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8002afe:	8023      	strh	r3, [r4, #0]
              break;
 8002b00:	e0ee      	b.n	8002ce0 <RI_GetRegisterMotor1+0x2bc>
        if (freeSpace >= 4)
 8002b02:	f1bc 0f03 	cmp.w	ip, #3
 8002b06:	f340 8160 	ble.w	8002dca <RI_GetRegisterMotor1+0x3a6>
          switch (regID)
 8002b0a:	2898      	cmp	r0, #152	@ 0x98
 8002b0c:	f000 81cf 	beq.w	8002eae <RI_GetRegisterMotor1+0x48a>
 8002b10:	f200 814e 	bhi.w	8002db0 <RI_GetRegisterMotor1+0x38c>
 8002b14:	2818      	cmp	r0, #24
 8002b16:	f000 81c5 	beq.w	8002ea4 <RI_GetRegisterMotor1+0x480>
 8002b1a:	2858      	cmp	r0, #88	@ 0x58
 8002b1c:	f040 81be 	bne.w	8002e9c <RI_GetRegisterMotor1+0x478>
              *regdata32 = (((int32_t)MCI_GetAvrgMecSpeedUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 8002b20:	488f      	ldr	r0, [pc, #572]	@ (8002d60 <RI_GetRegisterMotor1+0x33c>)
 8002b22:	f7fe fb51 	bl	80011c8 <MCI_GetAvrgMecSpeedUnit>
 8002b26:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002b2a:	0040      	lsls	r0, r0, #1
 8002b2c:	6020      	str	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002b2e:	2000      	movs	r0, #0
          *size = 4;
 8002b30:	2304      	movs	r3, #4
 8002b32:	802b      	strh	r3, [r5, #0]
  }
 8002b34:	b011      	add	sp, #68	@ 0x44
 8002b36:	bd30      	pop	{r4, r5, pc}
        switch (regID)
 8002b38:	28a0      	cmp	r0, #160	@ 0xa0
 8002b3a:	f000 8168 	beq.w	8002e0e <RI_GetRegisterMotor1+0x3ea>
 8002b3e:	28e0      	cmp	r0, #224	@ 0xe0
 8002b40:	f000 8148 	beq.w	8002dd4 <RI_GetRegisterMotor1+0x3b0>
            *size= 0 ; /* */
 8002b44:	2300      	movs	r3, #0
 8002b46:	802b      	strh	r3, [r5, #0]
            retVal = MCP_ERROR_UNKNOWN_REG;
 8002b48:	2005      	movs	r0, #5
            break;
 8002b4a:	e789      	b.n	8002a60 <RI_GetRegisterMotor1+0x3c>
 8002b4c:	2868      	cmp	r0, #104	@ 0x68
 8002b4e:	f040 81c0 	bne.w	8002ed2 <RI_GetRegisterMotor1+0x4ae>
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002b52:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = (uint16_t)sizeof(MotorConfig_reg_t);
 8002b56:	223c      	movs	r2, #60	@ 0x3c
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002b58:	f1bc 0f3d 	cmp.w	ip, #61	@ 0x3d
            *rawSize = (uint16_t)sizeof(MotorConfig_reg_t);
 8002b5c:	8022      	strh	r2, [r4, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002b5e:	f200 816e 	bhi.w	8002e3e <RI_GetRegisterMotor1+0x41a>
 8002b62:	233e      	movs	r3, #62	@ 0x3e
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002b64:	2008      	movs	r0, #8
 8002b66:	e793      	b.n	8002a90 <RI_GetRegisterMotor1+0x6c>
 8002b68:	f5b0 7ff4 	cmp.w	r0, #488	@ 0x1e8
 8002b6c:	f000 81c9 	beq.w	8002f02 <RI_GetRegisterMotor1+0x4de>
 8002b70:	f5b0 7f5a 	cmp.w	r0, #872	@ 0x368
 8002b74:	d110      	bne.n	8002b98 <RI_GetRegisterMotor1+0x174>
            *rawSize = 4;
 8002b76:	2304      	movs	r3, #4
 8002b78:	8023      	strh	r3, [r4, #0]
            *iqref = (uint16_t)MCI_GetIqdref(pMCIN).q;
 8002b7a:	4879      	ldr	r0, [pc, #484]	@ (8002d60 <RI_GetRegisterMotor1+0x33c>)
 8002b7c:	f7fe fb5a 	bl	8001234 <MCI_GetIqdref>
 8002b80:	8060      	strh	r0, [r4, #2]
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 8002b82:	4877      	ldr	r0, [pc, #476]	@ (8002d60 <RI_GetRegisterMotor1+0x33c>)
 8002b84:	f7fe fb56 	bl	8001234 <MCI_GetIqdref>
        *size = (*rawSize) + 2U;
 8002b88:	8823      	ldrh	r3, [r4, #0]
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 8002b8a:	f3c0 400f 	ubfx	r0, r0, #16, #16
        *size = (*rawSize) + 2U;
 8002b8e:	3302      	adds	r3, #2
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 8002b90:	80a0      	strh	r0, [r4, #4]
        *size = (*rawSize) + 2U;
 8002b92:	b29b      	uxth	r3, r3
    uint8_t retVal = MCP_CMD_OK;
 8002b94:	2000      	movs	r0, #0
            break;
 8002b96:	e77b      	b.n	8002a90 <RI_GetRegisterMotor1+0x6c>
 8002b98:	f5b0 7fd4 	cmp.w	r0, #424	@ 0x1a8
 8002b9c:	f040 8199 	bne.w	8002ed2 <RI_GetRegisterMotor1+0x4ae>
            *rpm = (((int32_t)MCI_GetLastRampFinalSpeed(pMCIN) * U_RPM) / (int32_t)SPEED_UNIT);
 8002ba0:	486f      	ldr	r0, [pc, #444]	@ (8002d60 <RI_GetRegisterMotor1+0x33c>)
 8002ba2:	f7fe fb03 	bl	80011ac <MCI_GetLastRampFinalSpeed>
 8002ba6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002baa:	0043      	lsls	r3, r0, #1
 8002bac:	f8c4 3002 	str.w	r3, [r4, #2]
            *duration = MCI_GetLastRampFinalDuration(pMCIN);
 8002bb0:	486b      	ldr	r0, [pc, #428]	@ (8002d60 <RI_GetRegisterMotor1+0x33c>)
 8002bb2:	f7fe fb03 	bl	80011bc <MCI_GetLastRampFinalDuration>
            *rawSize = 6;
 8002bb6:	2306      	movs	r3, #6
            *duration = MCI_GetLastRampFinalDuration(pMCIN);
 8002bb8:	80e0      	strh	r0, [r4, #6]
            *rawSize = 6;
 8002bba:	8023      	strh	r3, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002bbc:	2000      	movs	r0, #0
            break;
 8002bbe:	2308      	movs	r3, #8
 8002bc0:	e766      	b.n	8002a90 <RI_GetRegisterMotor1+0x6c>
 8002bc2:	f5b0 6f09 	cmp.w	r0, #2192	@ 0x890
 8002bc6:	f040 816b 	bne.w	8002ea0 <RI_GetRegisterMotor1+0x47c>
              *regdata16 = MCI_GetIalphabeta(pMCIN).beta;
 8002bca:	4865      	ldr	r0, [pc, #404]	@ (8002d60 <RI_GetRegisterMotor1+0x33c>)
 8002bcc:	f7fe fb16 	bl	80011fc <MCI_GetIalphabeta>
 8002bd0:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8002bd4:	8023      	strh	r3, [r4, #0]
              break;
 8002bd6:	e083      	b.n	8002ce0 <RI_GetRegisterMotor1+0x2bc>
 8002bd8:	f5b0 6ffa 	cmp.w	r0, #2000	@ 0x7d0
 8002bdc:	f000 81b5 	beq.w	8002f4a <RI_GetRegisterMotor1+0x526>
 8002be0:	d91b      	bls.n	8002c1a <RI_GetRegisterMotor1+0x1f6>
 8002be2:	f5b0 6f01 	cmp.w	r0, #2064	@ 0x810
 8002be6:	f040 815b 	bne.w	8002ea0 <RI_GetRegisterMotor1+0x47c>
              *regdata16 = MCI_GetIab(pMCIN).b;
 8002bea:	485d      	ldr	r0, [pc, #372]	@ (8002d60 <RI_GetRegisterMotor1+0x33c>)
 8002bec:	f7fe faf8 	bl	80011e0 <MCI_GetIab>
 8002bf0:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8002bf4:	8023      	strh	r3, [r4, #0]
              break;
 8002bf6:	e073      	b.n	8002ce0 <RI_GetRegisterMotor1+0x2bc>
 8002bf8:	f5b0 7fe8 	cmp.w	r0, #464	@ 0x1d0
 8002bfc:	f000 81d6 	beq.w	8002fac <RI_GetRegisterMotor1+0x588>
 8002c00:	d936      	bls.n	8002c70 <RI_GetRegisterMotor1+0x24c>
 8002c02:	f5b0 7f24 	cmp.w	r0, #656	@ 0x290
 8002c06:	f000 81cc 	beq.w	8002fa2 <RI_GetRegisterMotor1+0x57e>
 8002c0a:	f5b0 7f34 	cmp.w	r0, #720	@ 0x2d0
 8002c0e:	d10c      	bne.n	8002c2a <RI_GetRegisterMotor1+0x206>
              *regdata16 = PID_GetKI(&PIDIdHandle_M1);
 8002c10:	4854      	ldr	r0, [pc, #336]	@ (8002d64 <RI_GetRegisterMotor1+0x340>)
 8002c12:	f003 fadd 	bl	80061d0 <PID_GetKI>
 8002c16:	8020      	strh	r0, [r4, #0]
              break;
 8002c18:	e062      	b.n	8002ce0 <RI_GetRegisterMotor1+0x2bc>
 8002c1a:	f5b0 6fb2 	cmp.w	r0, #1424	@ 0x590
 8002c1e:	d135      	bne.n	8002c8c <RI_GetRegisterMotor1+0x268>
              *regdataU16 = VBS_GetAvBusVoltage_V(BusVoltageSensor);
 8002c20:	4851      	ldr	r0, [pc, #324]	@ (8002d68 <RI_GetRegisterMotor1+0x344>)
 8002c22:	f002 ff6d 	bl	8005b00 <VBS_GetAvBusVoltage_V>
 8002c26:	8020      	strh	r0, [r4, #0]
              break;
 8002c28:	e05a      	b.n	8002ce0 <RI_GetRegisterMotor1+0x2bc>
 8002c2a:	f5b0 7f04 	cmp.w	r0, #528	@ 0x210
 8002c2e:	f040 8137 	bne.w	8002ea0 <RI_GetRegisterMotor1+0x47c>
              *regdata16 = PID_GetKD(&PIDIqHandle_M1);
 8002c32:	484e      	ldr	r0, [pc, #312]	@ (8002d6c <RI_GetRegisterMotor1+0x348>)
 8002c34:	f003 faf6 	bl	8006224 <PID_GetKD>
 8002c38:	8020      	strh	r0, [r4, #0]
              break;
 8002c3a:	e051      	b.n	8002ce0 <RI_GetRegisterMotor1+0x2bc>
 8002c3c:	f241 4350 	movw	r3, #5200	@ 0x1450
 8002c40:	4298      	cmp	r0, r3
 8002c42:	f000 81c7 	beq.w	8002fd4 <RI_GetRegisterMotor1+0x5b0>
 8002c46:	d93a      	bls.n	8002cbe <RI_GetRegisterMotor1+0x29a>
 8002c48:	f241 5390 	movw	r3, #5520	@ 0x1590
 8002c4c:	4298      	cmp	r0, r3
 8002c4e:	f000 81bc 	beq.w	8002fca <RI_GetRegisterMotor1+0x5a6>
 8002c52:	d924      	bls.n	8002c9e <RI_GetRegisterMotor1+0x27a>
 8002c54:	f241 6310 	movw	r3, #5648	@ 0x1610
 8002c58:	4298      	cmp	r0, r3
 8002c5a:	f000 81b1 	beq.w	8002fc0 <RI_GetRegisterMotor1+0x59c>
 8002c5e:	f241 6350 	movw	r3, #5712	@ 0x1650
 8002c62:	4298      	cmp	r0, r3
 8002c64:	d158      	bne.n	8002d18 <RI_GetRegisterMotor1+0x2f4>
              *regdataU16 = PID_GetKDDivisorPOW2(&PIDIqHandle_M1);
 8002c66:	4841      	ldr	r0, [pc, #260]	@ (8002d6c <RI_GetRegisterMotor1+0x348>)
 8002c68:	f003 fae0 	bl	800622c <PID_GetKDDivisorPOW2>
 8002c6c:	8020      	strh	r0, [r4, #0]
              break;
 8002c6e:	e037      	b.n	8002ce0 <RI_GetRegisterMotor1+0x2bc>
 8002c70:	f5b0 7f88 	cmp.w	r0, #272	@ 0x110
 8002c74:	f000 819f 	beq.w	8002fb6 <RI_GetRegisterMotor1+0x592>
 8002c78:	d961      	bls.n	8002d3e <RI_GetRegisterMotor1+0x31a>
 8002c7a:	f5b0 7fc8 	cmp.w	r0, #400	@ 0x190
 8002c7e:	f040 810f 	bne.w	8002ea0 <RI_GetRegisterMotor1+0x47c>
              *regdata16 = PID_GetKP(&PIDIqHandle_M1);
 8002c82:	483a      	ldr	r0, [pc, #232]	@ (8002d6c <RI_GetRegisterMotor1+0x348>)
 8002c84:	f003 faa0 	bl	80061c8 <PID_GetKP>
 8002c88:	8020      	strh	r0, [r4, #0]
              break;
 8002c8a:	e029      	b.n	8002ce0 <RI_GetRegisterMotor1+0x2bc>
 8002c8c:	f5b0 6fba 	cmp.w	r0, #1488	@ 0x5d0
 8002c90:	f040 8106 	bne.w	8002ea0 <RI_GetRegisterMotor1+0x47c>
              *regdata16 = NTC_GetAvTemp_C(&TempSensor_M1);
 8002c94:	4836      	ldr	r0, [pc, #216]	@ (8002d70 <RI_GetRegisterMotor1+0x34c>)
 8002c96:	f003 fa79 	bl	800618c <NTC_GetAvTemp_C>
 8002c9a:	8020      	strh	r0, [r4, #0]
              break;
 8002c9c:	e020      	b.n	8002ce0 <RI_GetRegisterMotor1+0x2bc>
 8002c9e:	f241 5310 	movw	r3, #5392	@ 0x1510
 8002ca2:	4298      	cmp	r0, r3
 8002ca4:	f000 816e 	beq.w	8002f84 <RI_GetRegisterMotor1+0x560>
 8002ca8:	d940      	bls.n	8002d2c <RI_GetRegisterMotor1+0x308>
 8002caa:	f241 5350 	movw	r3, #5456	@ 0x1550
 8002cae:	4298      	cmp	r0, r3
 8002cb0:	f040 80f6 	bne.w	8002ea0 <RI_GetRegisterMotor1+0x47c>
              *regdataU16 = PID_GetKIDivisorPOW2(&PIDIdHandle_M1);
 8002cb4:	482b      	ldr	r0, [pc, #172]	@ (8002d64 <RI_GetRegisterMotor1+0x340>)
 8002cb6:	f003 fa99 	bl	80061ec <PID_GetKIDivisorPOW2>
 8002cba:	8020      	strh	r0, [r4, #0]
              break;
 8002cbc:	e010      	b.n	8002ce0 <RI_GetRegisterMotor1+0x2bc>
 8002cbe:	f5b0 6f29 	cmp.w	r0, #2704	@ 0xa90
 8002cc2:	f000 8158 	beq.w	8002f76 <RI_GetRegisterMotor1+0x552>
 8002cc6:	d919      	bls.n	8002cfc <RI_GetRegisterMotor1+0x2d8>
 8002cc8:	f5b0 6f31 	cmp.w	r0, #2832	@ 0xb10
 8002ccc:	f000 8138 	beq.w	8002f40 <RI_GetRegisterMotor1+0x51c>
 8002cd0:	d90b      	bls.n	8002cea <RI_GetRegisterMotor1+0x2c6>
 8002cd2:	f5b0 6f65 	cmp.w	r0, #3664	@ 0xe50
 8002cd6:	d003      	beq.n	8002ce0 <RI_GetRegisterMotor1+0x2bc>
 8002cd8:	f5b0 6f69 	cmp.w	r0, #3728	@ 0xe90
 8002cdc:	f040 80e0 	bne.w	8002ea0 <RI_GetRegisterMotor1+0x47c>
    uint8_t retVal = MCP_CMD_OK;
 8002ce0:	2000      	movs	r0, #0
          *size = 2;
 8002ce2:	2302      	movs	r3, #2
 8002ce4:	802b      	strh	r3, [r5, #0]
  }
 8002ce6:	b011      	add	sp, #68	@ 0x44
 8002ce8:	bd30      	pop	{r4, r5, pc}
 8002cea:	f5b0 6f2d 	cmp.w	r0, #2768	@ 0xad0
 8002cee:	f040 80d7 	bne.w	8002ea0 <RI_GetRegisterMotor1+0x47c>
              *regdata16 = SPD_GetElAngle ((SpeednPosFdbk_Handle_t*) &ENCODER_M1); //cstat !MISRAC2012-Rule-11.3
 8002cf2:	4820      	ldr	r0, [pc, #128]	@ (8002d74 <RI_GetRegisterMotor1+0x350>)
 8002cf4:	f004 f90e 	bl	8006f14 <SPD_GetElAngle>
 8002cf8:	8020      	strh	r0, [r4, #0]
              break;
 8002cfa:	e7f1      	b.n	8002ce0 <RI_GetRegisterMotor1+0x2bc>
 8002cfc:	f5b0 6f21 	cmp.w	r0, #2576	@ 0xa10
 8002d00:	f000 812d 	beq.w	8002f5e <RI_GetRegisterMotor1+0x53a>
 8002d04:	d922      	bls.n	8002d4c <RI_GetRegisterMotor1+0x328>
 8002d06:	f5b0 6f25 	cmp.w	r0, #2640	@ 0xa50
 8002d0a:	f040 80c9 	bne.w	8002ea0 <RI_GetRegisterMotor1+0x47c>
              *regdata16 = MCI_GetValphabeta(pMCIN).alpha;
 8002d0e:	4814      	ldr	r0, [pc, #80]	@ (8002d60 <RI_GetRegisterMotor1+0x33c>)
 8002d10:	f7fe faac 	bl	800126c <MCI_GetValphabeta>
 8002d14:	8020      	strh	r0, [r4, #0]
              break;
 8002d16:	e7e3      	b.n	8002ce0 <RI_GetRegisterMotor1+0x2bc>
 8002d18:	f241 53d0 	movw	r3, #5584	@ 0x15d0
 8002d1c:	4298      	cmp	r0, r3
 8002d1e:	f040 80bf 	bne.w	8002ea0 <RI_GetRegisterMotor1+0x47c>
              *regdataU16 = PID_GetKPDivisorPOW2(&PIDIqHandle_M1);
 8002d22:	4812      	ldr	r0, [pc, #72]	@ (8002d6c <RI_GetRegisterMotor1+0x348>)
 8002d24:	f003 fa5a 	bl	80061dc <PID_GetKPDivisorPOW2>
 8002d28:	8020      	strh	r0, [r4, #0]
              break;
 8002d2a:	e7d9      	b.n	8002ce0 <RI_GetRegisterMotor1+0x2bc>
 8002d2c:	f241 4390 	movw	r3, #5264	@ 0x1490
 8002d30:	4298      	cmp	r0, r3
 8002d32:	d123      	bne.n	8002d7c <RI_GetRegisterMotor1+0x358>
              *regdataU16 = (uint16_t)PID_GetKIDivisorPOW2(&PIDSpeedHandle_M1);
 8002d34:	4810      	ldr	r0, [pc, #64]	@ (8002d78 <RI_GetRegisterMotor1+0x354>)
 8002d36:	f003 fa59 	bl	80061ec <PID_GetKIDivisorPOW2>
 8002d3a:	8020      	strh	r0, [r4, #0]
              break;
 8002d3c:	e7d0      	b.n	8002ce0 <RI_GetRegisterMotor1+0x2bc>
 8002d3e:	2890      	cmp	r0, #144	@ 0x90
 8002d40:	d126      	bne.n	8002d90 <RI_GetRegisterMotor1+0x36c>
              *regdata16 = PID_GetKP(&PIDSpeedHandle_M1);
 8002d42:	480d      	ldr	r0, [pc, #52]	@ (8002d78 <RI_GetRegisterMotor1+0x354>)
 8002d44:	f003 fa40 	bl	80061c8 <PID_GetKP>
 8002d48:	8020      	strh	r0, [r4, #0]
              break;
 8002d4a:	e7c9      	b.n	8002ce0 <RI_GetRegisterMotor1+0x2bc>
 8002d4c:	f5b0 6f19 	cmp.w	r0, #2448	@ 0x990
 8002d50:	d126      	bne.n	8002da0 <RI_GetRegisterMotor1+0x37c>
              *regdata16 = MCI_GetIqdref(pMCIN).d;
 8002d52:	4803      	ldr	r0, [pc, #12]	@ (8002d60 <RI_GetRegisterMotor1+0x33c>)
 8002d54:	f7fe fa6e 	bl	8001234 <MCI_GetIqdref>
 8002d58:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8002d5c:	8023      	strh	r3, [r4, #0]
              break;
 8002d5e:	e7bf      	b.n	8002ce0 <RI_GetRegisterMotor1+0x2bc>
 8002d60:	2000040c 	.word	0x2000040c
 8002d64:	20000220 	.word	0x20000220
 8002d68:	2000002c 	.word	0x2000002c
 8002d6c:	2000024c 	.word	0x2000024c
 8002d70:	20000058 	.word	0x20000058
 8002d74:	20000090 	.word	0x20000090
 8002d78:	20000278 	.word	0x20000278
 8002d7c:	f241 43d0 	movw	r3, #5328	@ 0x14d0
 8002d80:	4298      	cmp	r0, r3
 8002d82:	f040 808d 	bne.w	8002ea0 <RI_GetRegisterMotor1+0x47c>
              *regdataU16 = PID_GetKDDivisorPOW2(&PIDSpeedHandle_M1);
 8002d86:	4896      	ldr	r0, [pc, #600]	@ (8002fe0 <RI_GetRegisterMotor1+0x5bc>)
 8002d88:	f003 fa50 	bl	800622c <PID_GetKDDivisorPOW2>
 8002d8c:	8020      	strh	r0, [r4, #0]
              break;
 8002d8e:	e7a7      	b.n	8002ce0 <RI_GetRegisterMotor1+0x2bc>
 8002d90:	28d0      	cmp	r0, #208	@ 0xd0
 8002d92:	f040 8085 	bne.w	8002ea0 <RI_GetRegisterMotor1+0x47c>
              *regdata16 = PID_GetKI(&PIDSpeedHandle_M1);
 8002d96:	4892      	ldr	r0, [pc, #584]	@ (8002fe0 <RI_GetRegisterMotor1+0x5bc>)
 8002d98:	f003 fa1a 	bl	80061d0 <PID_GetKI>
 8002d9c:	8020      	strh	r0, [r4, #0]
              break;
 8002d9e:	e79f      	b.n	8002ce0 <RI_GetRegisterMotor1+0x2bc>
 8002da0:	f5b0 6f1d 	cmp.w	r0, #2512	@ 0x9d0
 8002da4:	d17c      	bne.n	8002ea0 <RI_GetRegisterMotor1+0x47c>
              *regdata16 = MCI_GetVqd(pMCIN).q;
 8002da6:	488f      	ldr	r0, [pc, #572]	@ (8002fe4 <RI_GetRegisterMotor1+0x5c0>)
 8002da8:	f7fe fa52 	bl	8001250 <MCI_GetVqd>
 8002dac:	8020      	strh	r0, [r4, #0]
              break;
 8002dae:	e797      	b.n	8002ce0 <RI_GetRegisterMotor1+0x2bc>
 8002db0:	f641 3358 	movw	r3, #7000	@ 0x1b58
 8002db4:	4298      	cmp	r0, r3
 8002db6:	d171      	bne.n	8002e9c <RI_GetRegisterMotor1+0x478>
              ReadVal.Float_Val = PQD_GetAvrgElMotorPowerW(pMPM[M1]);
 8002db8:	4b8b      	ldr	r3, [pc, #556]	@ (8002fe8 <RI_GetRegisterMotor1+0x5c4>)
 8002dba:	6818      	ldr	r0, [r3, #0]
 8002dbc:	f003 fa9e 	bl	80062fc <PQD_GetAvrgElMotorPowerW>
 8002dc0:	ed8d 0a01 	vstr	s0, [sp, #4]
              *regdataU32 = ReadVal.U32_Val; //cstat !UNION-type-punning
 8002dc4:	9b01      	ldr	r3, [sp, #4]
 8002dc6:	6023      	str	r3, [r4, #0]
              break;
 8002dc8:	e6b1      	b.n	8002b2e <RI_GetRegisterMotor1+0x10a>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002dca:	2008      	movs	r0, #8
  }
 8002dcc:	b011      	add	sp, #68	@ 0x44
 8002dce:	bd30      	pop	{r4, r5, pc}
 8002dd0:	2005      	movs	r0, #5
 8002dd2:	e66f      	b.n	8002ab4 <RI_GetRegisterMotor1+0x90>
            retVal = RI_MovString (MotorConfig_reg[motorID]->name ,charData, size, freeSpace);
 8002dd4:	4b85      	ldr	r3, [pc, #532]	@ (8002fec <RI_GetRegisterMotor1+0x5c8>)
 8002dd6:	681a      	ldr	r2, [r3, #0]
  *size= 1U ; /* /0 is the min String size */
 8002dd8:	2301      	movs	r3, #1
 8002dda:	802b      	strh	r3, [r5, #0]
            retVal = RI_MovString (MotorConfig_reg[motorID]->name ,charData, size, freeSpace);
 8002ddc:	f102 0124 	add.w	r1, r2, #36	@ 0x24
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002de0:	f992 2024 	ldrsb.w	r2, [r2, #36]	@ 0x24
 8002de4:	b17a      	cbz	r2, 8002e06 <RI_GetRegisterMotor1+0x3e2>
 8002de6:	fa1f fc8c 	uxth.w	ip, ip
 8002dea:	e008      	b.n	8002dfe <RI_GetRegisterMotor1+0x3da>
    *tempdestString = *tempsrcString;
 8002dec:	f804 2b01 	strb.w	r2, [r4], #1
    *size = *size + 1U;
 8002df0:	882b      	ldrh	r3, [r5, #0]
 8002df2:	3301      	adds	r3, #1
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	802b      	strh	r3, [r5, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002df8:	f911 2f01 	ldrsb.w	r2, [r1, #1]!
 8002dfc:	b11a      	cbz	r2, 8002e06 <RI_GetRegisterMotor1+0x3e2>
 8002dfe:	459c      	cmp	ip, r3
 8002e00:	d8f4      	bhi.n	8002dec <RI_GetRegisterMotor1+0x3c8>
    retVal = MCP_ERROR_STRING_FORMAT;
 8002e02:	2006      	movs	r0, #6
 8002e04:	e62c      	b.n	8002a60 <RI_GetRegisterMotor1+0x3c>
    *tempdestString = (int8_t)0;
 8002e06:	2300      	movs	r3, #0
 8002e08:	7023      	strb	r3, [r4, #0]
  uint8_t retVal = MCP_CMD_OK;
 8002e0a:	2000      	movs	r0, #0
 8002e0c:	e628      	b.n	8002a60 <RI_GetRegisterMotor1+0x3c>
            retVal = RI_MovString (PWR_BOARD_NAME[motorID], charData, size, freeSpace);
 8002e0e:	4a78      	ldr	r2, [pc, #480]	@ (8002ff0 <RI_GetRegisterMotor1+0x5cc>)
  *size= 1U ; /* /0 is the min String size */
 8002e10:	2301      	movs	r3, #1
            retVal = RI_MovString (PWR_BOARD_NAME[motorID], charData, size, freeSpace);
 8002e12:	6811      	ldr	r1, [r2, #0]
  *size= 1U ; /* /0 is the min String size */
 8002e14:	802b      	strh	r3, [r5, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002e16:	f991 2000 	ldrsb.w	r2, [r1]
 8002e1a:	2a00      	cmp	r2, #0
 8002e1c:	d0f3      	beq.n	8002e06 <RI_GetRegisterMotor1+0x3e2>
 8002e1e:	fa1f fc8c 	uxth.w	ip, ip
 8002e22:	e009      	b.n	8002e38 <RI_GetRegisterMotor1+0x414>
    *tempdestString = *tempsrcString;
 8002e24:	f804 2b01 	strb.w	r2, [r4], #1
    *size = *size + 1U;
 8002e28:	882b      	ldrh	r3, [r5, #0]
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	802b      	strh	r3, [r5, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002e30:	f911 2f01 	ldrsb.w	r2, [r1, #1]!
 8002e34:	2a00      	cmp	r2, #0
 8002e36:	d0e6      	beq.n	8002e06 <RI_GetRegisterMotor1+0x3e2>
 8002e38:	459c      	cmp	ip, r3
 8002e3a:	d8f3      	bhi.n	8002e24 <RI_GetRegisterMotor1+0x400>
 8002e3c:	e7e1      	b.n	8002e02 <RI_GetRegisterMotor1+0x3de>
              MotorConfig_reg_t const *pMotorConfig_reg = MotorConfig_reg[motorID];
 8002e3e:	4a6b      	ldr	r2, [pc, #428]	@ (8002fec <RI_GetRegisterMotor1+0x5c8>)
              (void)memcpy(rawData, (const uint8_t *)pMotorConfig_reg, sizeof(MotorConfig_reg_t));
 8002e40:	6812      	ldr	r2, [r2, #0]
 8002e42:	f102 0e30 	add.w	lr, r2, #48	@ 0x30
 8002e46:	6814      	ldr	r4, [r2, #0]
 8002e48:	6850      	ldr	r0, [r2, #4]
 8002e4a:	6891      	ldr	r1, [r2, #8]
 8002e4c:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 8002e50:	f8c3 c00c 	str.w	ip, [r3, #12]
 8002e54:	3210      	adds	r2, #16
 8002e56:	4572      	cmp	r2, lr
 8002e58:	601c      	str	r4, [r3, #0]
 8002e5a:	6058      	str	r0, [r3, #4]
 8002e5c:	6099      	str	r1, [r3, #8]
 8002e5e:	f103 0310 	add.w	r3, r3, #16
 8002e62:	d1f0      	bne.n	8002e46 <RI_GetRegisterMotor1+0x422>
 8002e64:	6810      	ldr	r0, [r2, #0]
 8002e66:	6851      	ldr	r1, [r2, #4]
 8002e68:	6892      	ldr	r2, [r2, #8]
 8002e6a:	609a      	str	r2, [r3, #8]
 8002e6c:	6018      	str	r0, [r3, #0]
 8002e6e:	6059      	str	r1, [r3, #4]
    uint8_t retVal = MCP_CMD_OK;
 8002e70:	2000      	movs	r0, #0
              (void)memcpy(rawData, (const uint8_t *)pMotorConfig_reg, sizeof(MotorConfig_reg_t));
 8002e72:	233e      	movs	r3, #62	@ 0x3e
 8002e74:	e60c      	b.n	8002a90 <RI_GetRegisterMotor1+0x6c>
              FOCFwConfig_reg_t const *pFOCConfig_reg = FOCConfig_reg[motorID];
 8002e76:	4a5f      	ldr	r2, [pc, #380]	@ (8002ff4 <RI_GetRegisterMotor1+0x5d0>)
              (void)memcpy(rawData, (const uint8_t *)pFOCConfig_reg, sizeof(FOCFwConfig_reg_t));
 8002e78:	6812      	ldr	r2, [r2, #0]
 8002e7a:	6810      	ldr	r0, [r2, #0]
 8002e7c:	6851      	ldr	r1, [r2, #4]
 8002e7e:	6894      	ldr	r4, [r2, #8]
 8002e80:	609c      	str	r4, [r3, #8]
 8002e82:	6018      	str	r0, [r3, #0]
 8002e84:	6059      	str	r1, [r3, #4]
 8002e86:	8992      	ldrh	r2, [r2, #12]
 8002e88:	819a      	strh	r2, [r3, #12]
    uint8_t retVal = MCP_CMD_OK;
 8002e8a:	2000      	movs	r0, #0
              (void)memcpy(rawData, (const uint8_t *)pFOCConfig_reg, sizeof(FOCFwConfig_reg_t));
 8002e8c:	2310      	movs	r3, #16
 8002e8e:	e5ff      	b.n	8002a90 <RI_GetRegisterMotor1+0x6c>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002e90:	4608      	mov	r0, r1
 8002e92:	e5e5      	b.n	8002a60 <RI_GetRegisterMotor1+0x3c>
              *data = (uint8_t)MCI_GetSTMState(pMCIN);
 8002e94:	4853      	ldr	r0, [pc, #332]	@ (8002fe4 <RI_GetRegisterMotor1+0x5c0>)
 8002e96:	f7fe f931 	bl	80010fc <MCI_GetSTMState>
              break;
 8002e9a:	e609      	b.n	8002ab0 <RI_GetRegisterMotor1+0x8c>
 8002e9c:	2005      	movs	r0, #5
 8002e9e:	e647      	b.n	8002b30 <RI_GetRegisterMotor1+0x10c>
 8002ea0:	2005      	movs	r0, #5
 8002ea2:	e71e      	b.n	8002ce2 <RI_GetRegisterMotor1+0x2be>
              *regdataU32 = MCI_GetFaultState(pMCIN);
 8002ea4:	484f      	ldr	r0, [pc, #316]	@ (8002fe4 <RI_GetRegisterMotor1+0x5c0>)
 8002ea6:	f7fe f977 	bl	8001198 <MCI_GetFaultState>
 8002eaa:	6020      	str	r0, [r4, #0]
              break;
 8002eac:	e63f      	b.n	8002b2e <RI_GetRegisterMotor1+0x10a>
              *regdata32 = (((int32_t)MCI_GetMecSpeedRefUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 8002eae:	484d      	ldr	r0, [pc, #308]	@ (8002fe4 <RI_GetRegisterMotor1+0x5c0>)
 8002eb0:	f7fe f992 	bl	80011d8 <MCI_GetMecSpeedRefUnit>
 8002eb4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002eb8:	0040      	lsls	r0, r0, #1
 8002eba:	6020      	str	r0, [r4, #0]
              break;
 8002ebc:	e637      	b.n	8002b2e <RI_GetRegisterMotor1+0x10a>
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002ebe:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = (uint16_t)sizeof(ApplicationConfig_reg_t);
 8002ec2:	2210      	movs	r2, #16
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002ec4:	f1bc 0f11 	cmp.w	ip, #17
            *rawSize = (uint16_t)sizeof(ApplicationConfig_reg_t);
 8002ec8:	8022      	strh	r2, [r4, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002eca:	d82c      	bhi.n	8002f26 <RI_GetRegisterMotor1+0x502>
 8002ecc:	2312      	movs	r3, #18
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002ece:	2008      	movs	r0, #8
 8002ed0:	e5de      	b.n	8002a90 <RI_GetRegisterMotor1+0x6c>
        *size = (*rawSize) + 2U;
 8002ed2:	8823      	ldrh	r3, [r4, #0]
 8002ed4:	3302      	adds	r3, #2
            retVal = MCP_ERROR_UNKNOWN_REG;
 8002ed6:	2005      	movs	r0, #5
        *size = (*rawSize) + 2U;
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	e5d9      	b.n	8002a90 <RI_GetRegisterMotor1+0x6c>
            if ((*rawSize) +2U > (uint16_t)freeSpace)
 8002edc:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = 12;
 8002ee0:	220c      	movs	r2, #12
            if ((*rawSize) +2U > (uint16_t)freeSpace)
 8002ee2:	f1bc 0f0d 	cmp.w	ip, #13
            *rawSize = 12;
 8002ee6:	8022      	strh	r2, [r4, #0]
            if ((*rawSize) +2U > (uint16_t)freeSpace)
 8002ee8:	d91a      	bls.n	8002f20 <RI_GetRegisterMotor1+0x4fc>
              memcpy(rawData, &scaleParams_M1, sizeof(ScaleParams_t) );
 8002eea:	4a43      	ldr	r2, [pc, #268]	@ (8002ff8 <RI_GetRegisterMotor1+0x5d4>)
 8002eec:	6850      	ldr	r0, [r2, #4]
 8002eee:	6814      	ldr	r4, [r2, #0]
 8002ef0:	6891      	ldr	r1, [r2, #8]
 8002ef2:	68d2      	ldr	r2, [r2, #12]
 8002ef4:	60da      	str	r2, [r3, #12]
 8002ef6:	6058      	str	r0, [r3, #4]
 8002ef8:	601c      	str	r4, [r3, #0]
 8002efa:	6099      	str	r1, [r3, #8]
    uint8_t retVal = MCP_CMD_OK;
 8002efc:	2000      	movs	r0, #0
              memcpy(rawData, &scaleParams_M1, sizeof(ScaleParams_t) );
 8002efe:	230e      	movs	r3, #14
 8002f00:	e5c6      	b.n	8002a90 <RI_GetRegisterMotor1+0x6c>
            *rawSize = 4;
 8002f02:	2304      	movs	r3, #4
 8002f04:	8023      	strh	r3, [r4, #0]
            *torque = MCI_GetLastRampFinalTorque(pMCIN);
 8002f06:	4837      	ldr	r0, [pc, #220]	@ (8002fe4 <RI_GetRegisterMotor1+0x5c0>)
 8002f08:	f7fe f954 	bl	80011b4 <MCI_GetLastRampFinalTorque>
 8002f0c:	8060      	strh	r0, [r4, #2]
            *duration = MCI_GetLastRampFinalDuration(pMCIN) ;
 8002f0e:	4835      	ldr	r0, [pc, #212]	@ (8002fe4 <RI_GetRegisterMotor1+0x5c0>)
 8002f10:	f7fe f954 	bl	80011bc <MCI_GetLastRampFinalDuration>
        *size = (*rawSize) + 2U;
 8002f14:	8823      	ldrh	r3, [r4, #0]
            *duration = MCI_GetLastRampFinalDuration(pMCIN) ;
 8002f16:	80a0      	strh	r0, [r4, #4]
        *size = (*rawSize) + 2U;
 8002f18:	3302      	adds	r3, #2
 8002f1a:	b29b      	uxth	r3, r3
    uint8_t retVal = MCP_CMD_OK;
 8002f1c:	2000      	movs	r0, #0
            break;
 8002f1e:	e5b7      	b.n	8002a90 <RI_GetRegisterMotor1+0x6c>
 8002f20:	230e      	movs	r3, #14
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002f22:	2008      	movs	r0, #8
 8002f24:	e5b4      	b.n	8002a90 <RI_GetRegisterMotor1+0x6c>
              ApplicationConfig_reg_t const *pApplicationConfig_reg = ApplicationConfig_reg[motorID];
 8002f26:	4a35      	ldr	r2, [pc, #212]	@ (8002ffc <RI_GetRegisterMotor1+0x5d8>)
              (void)memcpy(rawData, (const uint8_t *)pApplicationConfig_reg, sizeof(ApplicationConfig_reg_t));
 8002f28:	6812      	ldr	r2, [r2, #0]
 8002f2a:	6850      	ldr	r0, [r2, #4]
 8002f2c:	6814      	ldr	r4, [r2, #0]
 8002f2e:	6891      	ldr	r1, [r2, #8]
 8002f30:	68d2      	ldr	r2, [r2, #12]
 8002f32:	60da      	str	r2, [r3, #12]
 8002f34:	6058      	str	r0, [r3, #4]
 8002f36:	601c      	str	r4, [r3, #0]
 8002f38:	6099      	str	r1, [r3, #8]
    uint8_t retVal = MCP_CMD_OK;
 8002f3a:	2000      	movs	r0, #0
              (void)memcpy(rawData, (const uint8_t *)pApplicationConfig_reg, sizeof(ApplicationConfig_reg_t));
 8002f3c:	2312      	movs	r3, #18
 8002f3e:	e5a7      	b.n	8002a90 <RI_GetRegisterMotor1+0x6c>
              *regdata16 = SPD_GetS16Speed ((SpeednPosFdbk_Handle_t*) &ENCODER_M1); //cstat !MISRAC2012-Rule-11.3
 8002f40:	482f      	ldr	r0, [pc, #188]	@ (8003000 <RI_GetRegisterMotor1+0x5dc>)
 8002f42:	f004 f829 	bl	8006f98 <SPD_GetS16Speed>
 8002f46:	8020      	strh	r0, [r4, #0]
              break;
 8002f48:	e6ca      	b.n	8002ce0 <RI_GetRegisterMotor1+0x2bc>
              *regdata16 = MCI_GetIab(pMCIN).a;
 8002f4a:	4826      	ldr	r0, [pc, #152]	@ (8002fe4 <RI_GetRegisterMotor1+0x5c0>)
 8002f4c:	f7fe f948 	bl	80011e0 <MCI_GetIab>
 8002f50:	8020      	strh	r0, [r4, #0]
              break;
 8002f52:	e6c5      	b.n	8002ce0 <RI_GetRegisterMotor1+0x2bc>
              *regdata16 = MCI_GetIqdref(pMCIN).q;
 8002f54:	4823      	ldr	r0, [pc, #140]	@ (8002fe4 <RI_GetRegisterMotor1+0x5c0>)
 8002f56:	f7fe f96d 	bl	8001234 <MCI_GetIqdref>
 8002f5a:	8020      	strh	r0, [r4, #0]
              break;
 8002f5c:	e6c0      	b.n	8002ce0 <RI_GetRegisterMotor1+0x2bc>
              *regdata16 = MCI_GetVqd(pMCIN).d;
 8002f5e:	4821      	ldr	r0, [pc, #132]	@ (8002fe4 <RI_GetRegisterMotor1+0x5c0>)
 8002f60:	f7fe f976 	bl	8001250 <MCI_GetVqd>
 8002f64:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8002f68:	8023      	strh	r3, [r4, #0]
              break;
 8002f6a:	e6b9      	b.n	8002ce0 <RI_GetRegisterMotor1+0x2bc>
              *regdata16 = MCI_GetIqd(pMCIN).q;
 8002f6c:	481d      	ldr	r0, [pc, #116]	@ (8002fe4 <RI_GetRegisterMotor1+0x5c0>)
 8002f6e:	f7fe f953 	bl	8001218 <MCI_GetIqd>
 8002f72:	8020      	strh	r0, [r4, #0]
              break;
 8002f74:	e6b4      	b.n	8002ce0 <RI_GetRegisterMotor1+0x2bc>
              *regdata16 = MCI_GetValphabeta(pMCIN).beta;
 8002f76:	481b      	ldr	r0, [pc, #108]	@ (8002fe4 <RI_GetRegisterMotor1+0x5c0>)
 8002f78:	f7fe f978 	bl	800126c <MCI_GetValphabeta>
 8002f7c:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8002f80:	8023      	strh	r3, [r4, #0]
              break;
 8002f82:	e6ad      	b.n	8002ce0 <RI_GetRegisterMotor1+0x2bc>
              *regdataU16 = PID_GetKPDivisorPOW2(&PIDIdHandle_M1);
 8002f84:	481f      	ldr	r0, [pc, #124]	@ (8003004 <RI_GetRegisterMotor1+0x5e0>)
 8002f86:	f003 f929 	bl	80061dc <PID_GetKPDivisorPOW2>
 8002f8a:	8020      	strh	r0, [r4, #0]
              break;
 8002f8c:	e6a8      	b.n	8002ce0 <RI_GetRegisterMotor1+0x2bc>
              *regdata16 = MCI_GetIalphabeta(pMCIN).alpha;
 8002f8e:	4815      	ldr	r0, [pc, #84]	@ (8002fe4 <RI_GetRegisterMotor1+0x5c0>)
 8002f90:	f7fe f934 	bl	80011fc <MCI_GetIalphabeta>
 8002f94:	8020      	strh	r0, [r4, #0]
              break;
 8002f96:	e6a3      	b.n	8002ce0 <RI_GetRegisterMotor1+0x2bc>
              *regdata16 = PID_GetKD(&PIDIdHandle_M1);
 8002f98:	481a      	ldr	r0, [pc, #104]	@ (8003004 <RI_GetRegisterMotor1+0x5e0>)
 8002f9a:	f003 f943 	bl	8006224 <PID_GetKD>
 8002f9e:	8020      	strh	r0, [r4, #0]
              break;
 8002fa0:	e69e      	b.n	8002ce0 <RI_GetRegisterMotor1+0x2bc>
              *regdata16 = PID_GetKP(&PIDIdHandle_M1);
 8002fa2:	4818      	ldr	r0, [pc, #96]	@ (8003004 <RI_GetRegisterMotor1+0x5e0>)
 8002fa4:	f003 f910 	bl	80061c8 <PID_GetKP>
 8002fa8:	8020      	strh	r0, [r4, #0]
              break;
 8002faa:	e699      	b.n	8002ce0 <RI_GetRegisterMotor1+0x2bc>
              *regdata16 = PID_GetKI(&PIDIqHandle_M1);
 8002fac:	4816      	ldr	r0, [pc, #88]	@ (8003008 <RI_GetRegisterMotor1+0x5e4>)
 8002fae:	f003 f90f 	bl	80061d0 <PID_GetKI>
 8002fb2:	8020      	strh	r0, [r4, #0]
              break;
 8002fb4:	e694      	b.n	8002ce0 <RI_GetRegisterMotor1+0x2bc>
              *regdata16 = PID_GetKD(&PIDSpeedHandle_M1);
 8002fb6:	480a      	ldr	r0, [pc, #40]	@ (8002fe0 <RI_GetRegisterMotor1+0x5bc>)
 8002fb8:	f003 f934 	bl	8006224 <PID_GetKD>
 8002fbc:	8020      	strh	r0, [r4, #0]
              break;
 8002fbe:	e68f      	b.n	8002ce0 <RI_GetRegisterMotor1+0x2bc>
              *regdataU16 = PID_GetKIDivisorPOW2(&PIDIqHandle_M1);
 8002fc0:	4811      	ldr	r0, [pc, #68]	@ (8003008 <RI_GetRegisterMotor1+0x5e4>)
 8002fc2:	f003 f913 	bl	80061ec <PID_GetKIDivisorPOW2>
 8002fc6:	8020      	strh	r0, [r4, #0]
              break;
 8002fc8:	e68a      	b.n	8002ce0 <RI_GetRegisterMotor1+0x2bc>
              *regdataU16 = PID_GetKDDivisorPOW2(&PIDIdHandle_M1);
 8002fca:	480e      	ldr	r0, [pc, #56]	@ (8003004 <RI_GetRegisterMotor1+0x5e0>)
 8002fcc:	f003 f92e 	bl	800622c <PID_GetKDDivisorPOW2>
 8002fd0:	8020      	strh	r0, [r4, #0]
              break;
 8002fd2:	e685      	b.n	8002ce0 <RI_GetRegisterMotor1+0x2bc>
              *regdataU16 = (uint16_t)PID_GetKPDivisorPOW2(&PIDSpeedHandle_M1);
 8002fd4:	4802      	ldr	r0, [pc, #8]	@ (8002fe0 <RI_GetRegisterMotor1+0x5bc>)
 8002fd6:	f003 f901 	bl	80061dc <PID_GetKPDivisorPOW2>
 8002fda:	8020      	strh	r0, [r4, #0]
              break;
 8002fdc:	e680      	b.n	8002ce0 <RI_GetRegisterMotor1+0x2bc>
 8002fde:	bf00      	nop
 8002fe0:	20000278 	.word	0x20000278
 8002fe4:	2000040c 	.word	0x2000040c
 8002fe8:	20000000 	.word	0x20000000
 8002fec:	200002b8 	.word	0x200002b8
 8002ff0:	200002c0 	.word	0x200002c0
 8002ff4:	200002bc 	.word	0x200002bc
 8002ff8:	200002c4 	.word	0x200002c4
 8002ffc:	200002b4 	.word	0x200002b4
 8003000:	20000090 	.word	0x20000090
 8003004:	20000220 	.word	0x20000220
 8003008:	2000024c 	.word	0x2000024c

0800300c <RI_GetIDSize>:
  return (retVal);
}

uint8_t RI_GetIDSize(uint16_t dataID)
{
  uint8_t typeID = ((uint8_t)dataID) & TYPE_MASK;
 800300c:	f000 0038 	and.w	r0, r0, #56	@ 0x38
 8003010:	3808      	subs	r0, #8
 8003012:	b2c0      	uxtb	r0, r0
 8003014:	2810      	cmp	r0, #16
 8003016:	bf9a      	itte	ls
 8003018:	4b01      	ldrls	r3, [pc, #4]	@ (8003020 <RI_GetIDSize+0x14>)
 800301a:	5c18      	ldrbls	r0, [r3, r0]
 800301c:	2000      	movhi	r0, #0
      break;
    }
  }

  return (result);
}
 800301e:	4770      	bx	lr
 8003020:	08007814 	.word	0x08007814

08003024 <RI_GetPtrReg>:
  else
  {
#endif

    MCI_Handle_t *pMCIN = &Mci[0];
    uint16_t regID = dataID & REG_MASK;
 8003024:	f020 0307 	bic.w	r3, r0, #7
    uint8_t typeID = ((uint8_t)dataID) & TYPE_MASK;
 8003028:	f000 0038 	and.w	r0, r0, #56	@ 0x38

    switch (typeID)
 800302c:	2810      	cmp	r0, #16
    uint16_t regID = dataID & REG_MASK;
 800302e:	b29b      	uxth	r3, r3
    switch (typeID)
 8003030:	d010      	beq.n	8003054 <RI_GetPtrReg+0x30>
 8003032:	2818      	cmp	r0, #24
 8003034:	d10a      	bne.n	800304c <RI_GetPtrReg+0x28>
    {
      case TYPE_DATA_32BIT:
	  {
		switch (regID)
 8003036:	4841      	ldr	r0, [pc, #260]	@ (800313c <RI_GetPtrReg+0x118>)
 8003038:	4a41      	ldr	r2, [pc, #260]	@ (8003140 <RI_GetPtrReg+0x11c>)
 800303a:	f640 2c58 	movw	ip, #2648	@ 0xa58
 800303e:	4563      	cmp	r3, ip
 8003040:	bf16      	itet	ne
 8003042:	4602      	movne	r2, r0
 8003044:	2000      	moveq	r0, #0
 8003046:	2005      	movne	r0, #5
			*dataPtr = *dataPtr = &((&ENCODER_M1)->_Super.wMecAngle);
			 break;
		  }
		  default:
		  {
			*dataPtr = &nullData16;
 8003048:	600a      	str	r2, [r1, #0]
    }
#ifdef NULL_PTR_CHECK_REG_INT
  }
#endif
  return (retVal);
}
 800304a:	4770      	bx	lr
    switch (typeID)
 800304c:	4a3b      	ldr	r2, [pc, #236]	@ (800313c <RI_GetPtrReg+0x118>)
			*dataPtr = &nullData16;
 800304e:	600a      	str	r2, [r1, #0]
			retVal = MCP_ERROR_UNKNOWN_REG;
 8003050:	2005      	movs	r0, #5
}
 8003052:	4770      	bx	lr
        switch (regID)
 8003054:	f5b3 6f19 	cmp.w	r3, #2448	@ 0x990
 8003058:	d060      	beq.n	800311c <RI_GetPtrReg+0xf8>
 800305a:	d80e      	bhi.n	800307a <RI_GetPtrReg+0x56>
 800305c:	f5b3 6f09 	cmp.w	r3, #2192	@ 0x890
 8003060:	d061      	beq.n	8003126 <RI_GetPtrReg+0x102>
 8003062:	d926      	bls.n	80030b2 <RI_GetPtrReg+0x8e>
 8003064:	f5b3 6f11 	cmp.w	r3, #2320	@ 0x910
 8003068:	d062      	beq.n	8003130 <RI_GetPtrReg+0x10c>
 800306a:	f5b3 6f15 	cmp.w	r3, #2384	@ 0x950
 800306e:	d12b      	bne.n	80030c8 <RI_GetPtrReg+0xa4>
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.q);
 8003070:	4b34      	ldr	r3, [pc, #208]	@ (8003144 <RI_GetPtrReg+0x120>)
 8003072:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8003074:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.q);
 8003076:	3210      	adds	r2, #16
            break;
 8003078:	e7e6      	b.n	8003048 <RI_GetPtrReg+0x24>
 800307a:	f5b3 6f29 	cmp.w	r3, #2704	@ 0xa90
 800307e:	d03e      	beq.n	80030fe <RI_GetPtrReg+0xda>
 8003080:	d90c      	bls.n	800309c <RI_GetPtrReg+0x78>
 8003082:	f5b3 6f2d 	cmp.w	r3, #2768	@ 0xad0
 8003086:	d036      	beq.n	80030f6 <RI_GetPtrReg+0xd2>
 8003088:	482c      	ldr	r0, [pc, #176]	@ (800313c <RI_GetPtrReg+0x118>)
 800308a:	4a2f      	ldr	r2, [pc, #188]	@ (8003148 <RI_GetPtrReg+0x124>)
 800308c:	f5b3 6f31 	cmp.w	r3, #2832	@ 0xb10
 8003090:	bf16      	itet	ne
 8003092:	4602      	movne	r2, r0
 8003094:	2000      	moveq	r0, #0
 8003096:	2005      	movne	r0, #5
			*dataPtr = &nullData16;
 8003098:	600a      	str	r2, [r1, #0]
}
 800309a:	4770      	bx	lr
 800309c:	f5b3 6f21 	cmp.w	r3, #2576	@ 0xa10
 80030a0:	d032      	beq.n	8003108 <RI_GetPtrReg+0xe4>
 80030a2:	f5b3 6f25 	cmp.w	r3, #2640	@ 0xa50
 80030a6:	d117      	bne.n	80030d8 <RI_GetPtrReg+0xb4>
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.alpha);
 80030a8:	4b26      	ldr	r3, [pc, #152]	@ (8003144 <RI_GetPtrReg+0x120>)
 80030aa:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 80030ac:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.alpha);
 80030ae:	321a      	adds	r2, #26
            break;
 80030b0:	e7ca      	b.n	8003048 <RI_GetPtrReg+0x24>
 80030b2:	f5b3 6f01 	cmp.w	r3, #2064	@ 0x810
 80030b6:	d02c      	beq.n	8003112 <RI_GetPtrReg+0xee>
 80030b8:	f5b3 6f05 	cmp.w	r3, #2128	@ 0x850
 80030bc:	d114      	bne.n	80030e8 <RI_GetPtrReg+0xc4>
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.alpha);
 80030be:	4b21      	ldr	r3, [pc, #132]	@ (8003144 <RI_GetPtrReg+0x120>)
 80030c0:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 80030c2:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.alpha);
 80030c4:	3204      	adds	r2, #4
            break;
 80030c6:	e7bf      	b.n	8003048 <RI_GetPtrReg+0x24>
 80030c8:	f5b3 6f0d 	cmp.w	r3, #2256	@ 0x8d0
 80030cc:	d1be      	bne.n	800304c <RI_GetPtrReg+0x28>
            *dataPtr = &(pMCIN->pFOCVars->Iqd.q);
 80030ce:	4b1d      	ldr	r3, [pc, #116]	@ (8003144 <RI_GetPtrReg+0x120>)
 80030d0:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 80030d2:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqd.q);
 80030d4:	320c      	adds	r2, #12
            break;
 80030d6:	e7b7      	b.n	8003048 <RI_GetPtrReg+0x24>
 80030d8:	f5b3 6f1d 	cmp.w	r3, #2512	@ 0x9d0
 80030dc:	d1b6      	bne.n	800304c <RI_GetPtrReg+0x28>
            *dataPtr = &(pMCIN->pFOCVars->Vqd.q);
 80030de:	4b19      	ldr	r3, [pc, #100]	@ (8003144 <RI_GetPtrReg+0x120>)
 80030e0:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 80030e2:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Vqd.q);
 80030e4:	3216      	adds	r2, #22
            break;
 80030e6:	e7af      	b.n	8003048 <RI_GetPtrReg+0x24>
 80030e8:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80030ec:	d1ae      	bne.n	800304c <RI_GetPtrReg+0x28>
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 80030ee:	4b15      	ldr	r3, [pc, #84]	@ (8003144 <RI_GetPtrReg+0x120>)
  uint8_t retVal = MCP_CMD_OK;
 80030f0:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 80030f2:	685a      	ldr	r2, [r3, #4]
             break;
 80030f4:	e7a8      	b.n	8003048 <RI_GetPtrReg+0x24>
 80030f6:	4a15      	ldr	r2, [pc, #84]	@ (800314c <RI_GetPtrReg+0x128>)
			*dataPtr = &nullData16;
 80030f8:	600a      	str	r2, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 80030fa:	2000      	movs	r0, #0
}
 80030fc:	4770      	bx	lr
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.beta);
 80030fe:	4b11      	ldr	r3, [pc, #68]	@ (8003144 <RI_GetPtrReg+0x120>)
 8003100:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8003102:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.beta);
 8003104:	321c      	adds	r2, #28
            break;
 8003106:	e79f      	b.n	8003048 <RI_GetPtrReg+0x24>
            *dataPtr = &(pMCIN->pFOCVars->Vqd.d);
 8003108:	4b0e      	ldr	r3, [pc, #56]	@ (8003144 <RI_GetPtrReg+0x120>)
 800310a:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 800310c:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Vqd.d);
 800310e:	3218      	adds	r2, #24
            break;
 8003110:	e79a      	b.n	8003048 <RI_GetPtrReg+0x24>
            *dataPtr = &(pMCIN->pFOCVars->Iab.b);
 8003112:	4b0c      	ldr	r3, [pc, #48]	@ (8003144 <RI_GetPtrReg+0x120>)
 8003114:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8003116:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iab.b);
 8003118:	3202      	adds	r2, #2
            break;
 800311a:	e795      	b.n	8003048 <RI_GetPtrReg+0x24>
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.d);
 800311c:	4b09      	ldr	r3, [pc, #36]	@ (8003144 <RI_GetPtrReg+0x120>)
 800311e:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8003120:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.d);
 8003122:	3212      	adds	r2, #18
            break;
 8003124:	e790      	b.n	8003048 <RI_GetPtrReg+0x24>
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.beta);
 8003126:	4b07      	ldr	r3, [pc, #28]	@ (8003144 <RI_GetPtrReg+0x120>)
 8003128:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 800312a:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.beta);
 800312c:	3206      	adds	r2, #6
            break;
 800312e:	e78b      	b.n	8003048 <RI_GetPtrReg+0x24>
            *dataPtr = &(pMCIN->pFOCVars->Iqd.d);
 8003130:	4b04      	ldr	r3, [pc, #16]	@ (8003144 <RI_GetPtrReg+0x120>)
 8003132:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8003134:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqd.d);
 8003136:	320e      	adds	r2, #14
            break;
 8003138:	e786      	b.n	8003048 <RI_GetPtrReg+0x24>
 800313a:	bf00      	nop
 800313c:	20001610 	.word	0x20001610
 8003140:	20000098 	.word	0x20000098
 8003144:	2000040c 	.word	0x2000040c
 8003148:	2000009c 	.word	0x2000009c
 800314c:	20000094 	.word	0x20000094

08003150 <RCM_RegisterRegConv>:

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003150:	4a6c      	ldr	r2, [pc, #432]	@ (8003304 <RCM_RegisterRegConv+0x1b4>)
 8003152:	6813      	ldr	r3, [r2, #0]
{
 8003154:	b530      	push	{r4, r5, lr}
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003156:	2b00      	cmp	r3, #0
 8003158:	d036      	beq.n	80031c8 <RCM_RegisterRegConv+0x78>
        /* Nothing to do */
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault */
      if (RCM_handle_array [i] != 0)
      {
        if ((RCM_handle_array [i]->channel == regConv->channel)
 800315a:	f890 c004 	ldrb.w	ip, [r0, #4]
 800315e:	7919      	ldrb	r1, [r3, #4]
 8003160:	458c      	cmp	ip, r1
 8003162:	d01e      	beq.n	80031a2 <RCM_RegisterRegConv+0x52>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003164:	6854      	ldr	r4, [r2, #4]
 8003166:	2c00      	cmp	r4, #0
 8003168:	f000 80ab 	beq.w	80032c2 <RCM_RegisterRegConv+0x172>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 800316c:	7921      	ldrb	r1, [r4, #4]
 800316e:	458c      	cmp	ip, r1
  uint8_t handle = 255U;
 8003170:	f04f 03ff 	mov.w	r3, #255	@ 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003174:	d031      	beq.n	80031da <RCM_RegisterRegConv+0x8a>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003176:	6895      	ldr	r5, [r2, #8]
 8003178:	2d00      	cmp	r5, #0
 800317a:	f000 808f 	beq.w	800329c <RCM_RegisterRegConv+0x14c>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 800317e:	7929      	ldrb	r1, [r5, #4]
 8003180:	4561      	cmp	r1, ip
 8003182:	d030      	beq.n	80031e6 <RCM_RegisterRegConv+0x96>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003184:	68d4      	ldr	r4, [r2, #12]
 8003186:	2c00      	cmp	r4, #0
 8003188:	f000 8096 	beq.w	80032b8 <RCM_RegisterRegConv+0x168>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 800318c:	7921      	ldrb	r1, [r4, #4]
 800318e:	4561      	cmp	r1, ip
 8003190:	f000 80a3 	beq.w	80032da <RCM_RegisterRegConv+0x18a>
      {
        /* Nothing to do */
      }
      i++;
    }
    if (handle < RCM_MAX_CONV)
 8003194:	2b03      	cmp	r3, #3
 8003196:	bf88      	it	hi
 8003198:	23ff      	movhi	r3, #255	@ 0xff
 800319a:	f240 80aa 	bls.w	80032f2 <RCM_RegisterRegConv+0x1a2>
      /* Nothing to do handle is already set to error value : 255 */
    }
#ifdef NULL_PTR_CHECK_REG_CON_MNG
  }
#endif
  regConv->convHandle = handle;
 800319e:	7303      	strb	r3, [r0, #12]
}
 80031a0:	bd30      	pop	{r4, r5, pc}
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 80031a2:	6801      	ldr	r1, [r0, #0]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4299      	cmp	r1, r3
 80031a8:	d023      	beq.n	80031f2 <RCM_RegisterRegConv+0xa2>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80031aa:	6854      	ldr	r4, [r2, #4]
 80031ac:	2c00      	cmp	r4, #0
 80031ae:	d1dd      	bne.n	800316c <RCM_RegisterRegConv+0x1c>
 80031b0:	6895      	ldr	r5, [r2, #8]
      i++;
 80031b2:	2301      	movs	r3, #1
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80031b4:	2d00      	cmp	r5, #0
 80031b6:	d1e2      	bne.n	800317e <RCM_RegisterRegConv+0x2e>
 80031b8:	68d4      	ldr	r4, [r2, #12]
 80031ba:	b1dc      	cbz	r4, 80031f4 <RCM_RegisterRegConv+0xa4>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80031bc:	f894 c004 	ldrb.w	ip, [r4, #4]
 80031c0:	7905      	ldrb	r5, [r0, #4]
 80031c2:	45ac      	cmp	ip, r5
 80031c4:	d116      	bne.n	80031f4 <RCM_RegisterRegConv+0xa4>
 80031c6:	e089      	b.n	80032dc <RCM_RegisterRegConv+0x18c>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80031c8:	6854      	ldr	r4, [r2, #4]
 80031ca:	2c00      	cmp	r4, #0
 80031cc:	f000 808b 	beq.w	80032e6 <RCM_RegisterRegConv+0x196>
 80031d0:	f890 c004 	ldrb.w	ip, [r0, #4]
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80031d4:	7921      	ldrb	r1, [r4, #4]
 80031d6:	458c      	cmp	ip, r1
 80031d8:	d1cd      	bne.n	8003176 <RCM_RegisterRegConv+0x26>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 80031da:	6824      	ldr	r4, [r4, #0]
 80031dc:	6801      	ldr	r1, [r0, #0]
 80031de:	42a1      	cmp	r1, r4
 80031e0:	d1c9      	bne.n	8003176 <RCM_RegisterRegConv+0x26>
      i++;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e006      	b.n	80031f4 <RCM_RegisterRegConv+0xa4>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 80031e6:	682c      	ldr	r4, [r5, #0]
 80031e8:	6801      	ldr	r1, [r0, #0]
 80031ea:	428c      	cmp	r4, r1
 80031ec:	d1ca      	bne.n	8003184 <RCM_RegisterRegConv+0x34>
      i++;
 80031ee:	2302      	movs	r3, #2
 80031f0:	e000      	b.n	80031f4 <RCM_RegisterRegConv+0xa4>
    uint8_t i = 0;
 80031f2:	2300      	movs	r3, #0
      RCM_handle_array [handle] = regConv;
 80031f4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 80031f8:	688a      	ldr	r2, [r1, #8]
      RCM_CB_array [handle].cb = NULL; /* If a previous callback was attached, it is cleared */
 80031fa:	4c43      	ldr	r4, [pc, #268]	@ (8003308 <RCM_RegisterRegConv+0x1b8>)
 80031fc:	2500      	movs	r5, #0
      if (0U == LL_ADC_IsEnabled(regConv->regADC))
 80031fe:	07d2      	lsls	r2, r2, #31
      RCM_CB_array [handle].cb = NULL; /* If a previous callback was attached, it is cleared */
 8003200:	f844 5033 	str.w	r5, [r4, r3, lsl #3]
      if (0U == LL_ADC_IsEnabled(regConv->regADC))
 8003204:	d411      	bmi.n	800322a <RCM_RegisterRegConv+0xda>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOCS(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 8003206:	684a      	ldr	r2, [r1, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 8003208:	f06f 0402 	mvn.w	r4, #2
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 800320c:	f022 0220 	bic.w	r2, r2, #32
 8003210:	604a      	str	r2, [r1, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 8003212:	600c      	str	r4, [r1, #0]
{
  /* Note: on this STM32 series, there is no flag ADC group injected          */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "JEOC" is corresponding to flag "JEOS"               */
  /*       in other STM32 families).                                          */
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8003214:	684a      	ldr	r2, [r1, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8003216:	f06f 0404 	mvn.w	r4, #4
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 800321a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800321e:	604a      	str	r2, [r1, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8003220:	600c      	str	r4, [r1, #0]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8003222:	688a      	ldr	r2, [r1, #8]
 8003224:	f042 0201 	orr.w	r2, r2, #1
 8003228:	608a      	str	r2, [r1, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 800322a:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 800322c:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003230:	62ca      	str	r2, [r1, #44]	@ 0x2c
      LL_ADC_SetChannelSamplingTime (regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 8003232:	7902      	ldrb	r2, [r0, #4]
 8003234:	2a09      	cmp	r2, #9
 8003236:	eb02 0442 	add.w	r4, r2, r2, lsl #1
 800323a:	d829      	bhi.n	8003290 <RCM_RegisterRegConv+0x140>
 800323c:	ea42 5204 	orr.w	r2, r2, r4, lsl #20
 8003240:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8003244:	f04f 7400 	mov.w	r4, #33554432	@ 0x2000000
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003248:	f04f 7c00 	mov.w	ip, #33554432	@ 0x2000000
 800324c:	fa9c fcac 	rbit	ip, ip
 8003250:	fabc fc8c 	clz	ip, ip
  MODIFY_REG(*preg,
 8003254:	6885      	ldr	r5, [r0, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8003256:	fa24 f40c 	lsr.w	r4, r4, ip
 800325a:	310c      	adds	r1, #12
  MODIFY_REG(*preg,
 800325c:	f002 72f8 	and.w	r2, r2, #32505856	@ 0x1f00000
 8003260:	f04f 7cf8 	mov.w	ip, #32505856	@ 0x1f00000
 8003264:	fa9c fcac 	rbit	ip, ip
  return result;
 8003268:	fabc fc8c 	clz	ip, ip
 800326c:	fa22 f20c 	lsr.w	r2, r2, ip
 8003270:	fa05 fc02 	lsl.w	ip, r5, r2
 8003274:	f04f 0e07 	mov.w	lr, #7
 8003278:	f851 5024 	ldr.w	r5, [r1, r4, lsl #2]
 800327c:	fa0e f202 	lsl.w	r2, lr, r2
 8003280:	ea25 0202 	bic.w	r2, r5, r2
 8003284:	ea4c 0202 	orr.w	r2, ip, r2
 8003288:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
  regConv->convHandle = handle;
 800328c:	7303      	strb	r3, [r0, #12]
}
 800328e:	bd30      	pop	{r4, r5, pc}
      LL_ADC_SetChannelSamplingTime (regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 8003290:	3c1e      	subs	r4, #30
 8003292:	ea42 5204 	orr.w	r2, r2, r4, lsl #20
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8003296:	f002 7400 	and.w	r4, r2, #33554432	@ 0x2000000
 800329a:	e7d5      	b.n	8003248 <RCM_RegisterRegConv+0xf8>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800329c:	2b04      	cmp	r3, #4
 800329e:	d92a      	bls.n	80032f6 <RCM_RegisterRegConv+0x1a6>
 80032a0:	68d3      	ldr	r3, [r2, #12]
 80032a2:	b353      	cbz	r3, 80032fa <RCM_RegisterRegConv+0x1aa>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80032a4:	7919      	ldrb	r1, [r3, #4]
 80032a6:	4561      	cmp	r1, ip
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 80032a8:	6801      	ldr	r1, [r0, #0]
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80032aa:	d1a0      	bne.n	80031ee <RCM_RegisterRegConv+0x9e>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 80032ac:	681b      	ldr	r3, [r3, #0]
      i++;
 80032ae:	4299      	cmp	r1, r3
 80032b0:	bf0c      	ite	eq
 80032b2:	2303      	moveq	r3, #3
 80032b4:	2302      	movne	r3, #2
 80032b6:	e79d      	b.n	80031f4 <RCM_RegisterRegConv+0xa4>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80032b8:	2b04      	cmp	r3, #4
 80032ba:	6801      	ldr	r1, [r0, #0]
 80032bc:	d99a      	bls.n	80031f4 <RCM_RegisterRegConv+0xa4>
 80032be:	2303      	movs	r3, #3
 80032c0:	e798      	b.n	80031f4 <RCM_RegisterRegConv+0xa4>
 80032c2:	6895      	ldr	r5, [r2, #8]
      i++;
 80032c4:	2301      	movs	r3, #1
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80032c6:	2d00      	cmp	r5, #0
 80032c8:	f47f af59 	bne.w	800317e <RCM_RegisterRegConv+0x2e>
 80032cc:	68d4      	ldr	r4, [r2, #12]
 80032ce:	b184      	cbz	r4, 80032f2 <RCM_RegisterRegConv+0x1a2>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80032d0:	7921      	ldrb	r1, [r4, #4]
 80032d2:	4561      	cmp	r1, ip
 80032d4:	6801      	ldr	r1, [r0, #0]
 80032d6:	d18d      	bne.n	80031f4 <RCM_RegisterRegConv+0xa4>
 80032d8:	e000      	b.n	80032dc <RCM_RegisterRegConv+0x18c>
 80032da:	6801      	ldr	r1, [r0, #0]
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 80032dc:	6824      	ldr	r4, [r4, #0]
 80032de:	428c      	cmp	r4, r1
 80032e0:	f47f af58 	bne.w	8003194 <RCM_RegisterRegConv+0x44>
 80032e4:	e7eb      	b.n	80032be <RCM_RegisterRegConv+0x16e>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80032e6:	6895      	ldr	r5, [r2, #8]
 80032e8:	b14d      	cbz	r5, 80032fe <RCM_RegisterRegConv+0x1ae>
 80032ea:	f890 c004 	ldrb.w	ip, [r0, #4]
    uint8_t i = 0;
 80032ee:	4623      	mov	r3, r4
 80032f0:	e745      	b.n	800317e <RCM_RegisterRegConv+0x2e>
 80032f2:	6801      	ldr	r1, [r0, #0]
 80032f4:	e77e      	b.n	80031f4 <RCM_RegisterRegConv+0xa4>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80032f6:	462b      	mov	r3, r5
 80032f8:	e7e8      	b.n	80032cc <RCM_RegisterRegConv+0x17c>
 80032fa:	6801      	ldr	r1, [r0, #0]
 80032fc:	e777      	b.n	80031ee <RCM_RegisterRegConv+0x9e>
 80032fe:	6801      	ldr	r1, [r0, #0]
    uint8_t i = 0;
 8003300:	462b      	mov	r3, r5
 8003302:	e759      	b.n	80031b8 <RCM_RegisterRegConv+0x68>
 8003304:	2000163c 	.word	0x2000163c
 8003308:	2000161c 	.word	0x2000161c

0800330c <RCM_ExecRegularConv>:
 */
uint16_t RCM_ExecRegularConv (RegConv_t *regConv)
{
  uint16_t retVal;
  uint8_t handle = regConv->convHandle;
  LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 800330c:	4b1a      	ldr	r3, [pc, #104]	@ (8003378 <RCM_ExecRegularConv+0x6c>)
 800330e:	7b02      	ldrb	r2, [r0, #12]
 8003310:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
                               LL_ADC_REG_RANK_1,
                               __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 8003314:	7913      	ldrb	r3, [r2, #4]
  LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8003316:	6812      	ldr	r2, [r2, #0]
                               __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 8003318:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 800331c:	2b09      	cmp	r3, #9
                               __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 800331e:	bf93      	iteet	ls
 8003320:	ea43 5301 	orrls.w	r3, r3, r1, lsl #20
 8003324:	391e      	subhi	r1, #30
  LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8003326:	ea43 5301 	orrhi.w	r3, r3, r1, lsl #20
 800332a:	f043 7300 	orrls.w	r3, r3, #33554432	@ 0x2000000
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800332e:	f44f 7140 	mov.w	r1, #768	@ 0x300
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8003332:	f102 0c2c 	add.w	ip, r2, #44	@ 0x2c
 8003336:	fa91 f1a1 	rbit	r1, r1
  if (value == 0U)
 800333a:	b139      	cbz	r1, 800334c <RCM_ExecRegularConv+0x40>
  return __builtin_clz(value);
 800333c:	fab1 f181 	clz	r1, r1
 8003340:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8003344:	fa20 f101 	lsr.w	r1, r0, r1
 8003348:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
  MODIFY_REG(*preg,
 800334c:	f8dc 0000 	ldr.w	r0, [ip]

  (void)LL_ADC_REG_ReadConversionData12(RCM_handle_array[handle]->regADC);

  /* Bit banding access equivalent to LL_ADC_REG_StartConversionSWStart */
  BB_REG_BIT_SET(&RCM_handle_array[handle]->regADC->CR2, ADC_CR2_SWSTART_Pos);
 8003350:	0151      	lsls	r1, r2, #5
 8003352:	f020 001f 	bic.w	r0, r0, #31
 8003356:	f003 031f 	and.w	r3, r3, #31
 800335a:	4303      	orrs	r3, r0
 800335c:	f101 4184 	add.w	r1, r1, #1107296256	@ 0x42000000
 8003360:	f8cc 3000 	str.w	r3, [ip]
 8003364:	2301      	movs	r3, #1
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8003366:	6cd0      	ldr	r0, [r2, #76]	@ 0x4c
 8003368:	f8c1 3178 	str.w	r3, [r1, #376]	@ 0x178
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_EOCS) == (LL_ADC_FLAG_EOCS));
 800336c:	6813      	ldr	r3, [r2, #0]
  /* Wait until end of regular conversion */
  while (LL_ADC_IsActiveFlag_EOCS(RCM_handle_array[handle]->regADC) == 0u)
 800336e:	079b      	lsls	r3, r3, #30
 8003370:	d5fc      	bpl.n	800336c <RCM_ExecRegularConv+0x60>
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8003372:	6cd0      	ldr	r0, [r2, #76]	@ 0x4c
  {
    /* Nothing to do */
  }
  retVal = LL_ADC_REG_ReadConversionData12(RCM_handle_array[handle]->regADC);
  return (retVal);
}
 8003374:	b280      	uxth	r0, r0
 8003376:	4770      	bx	lr
 8003378:	2000163c 	.word	0x2000163c

0800337c <RCM_ExecUserConv>:
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv()
{
  uint8_t handle;
  if (RCM_UserConvHandle != NULL)
 800337c:	4b11      	ldr	r3, [pc, #68]	@ (80033c4 <RCM_ExecUserConv+0x48>)
{
 800337e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (RCM_UserConvHandle != NULL)
 8003382:	681c      	ldr	r4, [r3, #0]
 8003384:	b124      	cbz	r4, 8003390 <RCM_ExecUserConv+0x14>
  {
    handle = RCM_UserConvHandle->convHandle;
    if (RCM_USERCONV_REQUESTED == RCM_UserConvState)
 8003386:	4d10      	ldr	r5, [pc, #64]	@ (80033c8 <RCM_ExecUserConv+0x4c>)
    handle = RCM_UserConvHandle->convHandle;
 8003388:	7b26      	ldrb	r6, [r4, #12]
    if (RCM_USERCONV_REQUESTED == RCM_UserConvState)
 800338a:	782b      	ldrb	r3, [r5, #0]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d001      	beq.n	8003394 <RCM_ExecUserConv+0x18>
  }
  else
  {
     /* Nothing to do */
  }
}
 8003390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8003394:	4620      	mov	r0, r4
 8003396:	f7ff ffb9 	bl	800330c <RCM_ExecRegularConv>
 800339a:	4b0c      	ldr	r3, [pc, #48]	@ (80033cc <RCM_ExecUserConv+0x50>)
 800339c:	8018      	strh	r0, [r3, #0]
      RCM_UserConvState = RCM_USERCONV_EOC;
 800339e:	2302      	movs	r3, #2
 80033a0:	702b      	strb	r3, [r5, #0]
      if (RCM_CB_array[handle].cb != NULL)
 80033a2:	4b0b      	ldr	r3, [pc, #44]	@ (80033d0 <RCM_ExecUserConv+0x54>)
 80033a4:	f853 7036 	ldr.w	r7, [r3, r6, lsl #3]
      RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 80033a8:	4601      	mov	r1, r0
      if (RCM_CB_array[handle].cb != NULL)
 80033aa:	2f00      	cmp	r7, #0
 80033ac:	d0f0      	beq.n	8003390 <RCM_ExecUserConv+0x14>
        RCM_CB_array[handle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 80033ae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80033b2:	4620      	mov	r0, r4
 80033b4:	685a      	ldr	r2, [r3, #4]
        RCM_UserConvState = RCM_USERCONV_IDLE;
 80033b6:	2300      	movs	r3, #0
 80033b8:	702b      	strb	r3, [r5, #0]
        RCM_CB_array[handle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 80033ba:	463b      	mov	r3, r7
}
 80033bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        RCM_CB_array[handle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 80033c0:	4718      	bx	r3
 80033c2:	bf00      	nop
 80033c4:	20001614 	.word	0x20001614
 80033c8:	20001618 	.word	0x20001618
 80033cc:	2000161a 	.word	0x2000161a
 80033d0:	2000161c 	.word	0x2000161c

080033d4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80033d4:	b510      	push	{r4, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80033d6:	4810      	ldr	r0, [pc, #64]	@ (8003418 <MX_SPI1_Init+0x44>)
 80033d8:	4c10      	ldr	r4, [pc, #64]	@ (800341c <MX_SPI1_Init+0x48>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80033da:	f44f 7282 	mov.w	r2, #260	@ 0x104
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80033de:	2300      	movs	r3, #0
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80033e0:	e9c0 4200 	strd	r4, r2, [r0]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80033e4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80033e8:	2201      	movs	r2, #1
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80033ea:	e9c0 3102 	strd	r3, r1, [r0, #8]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80033ee:	e9c0 3204 	strd	r3, r2, [r0, #16]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80033f2:	f44f 7400 	mov.w	r4, #512	@ 0x200
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80033f6:	2130      	movs	r1, #48	@ 0x30
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 10;
 80033f8:	220a      	movs	r2, #10
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80033fa:	e9c0 4106 	strd	r4, r1, [r0, #24]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80033fe:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi1.Init.CRCPolynomial = 10;
 8003402:	e9c0 320a 	strd	r3, r2, [r0, #40]	@ 0x28
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003406:	f001 fd73 	bl	8004ef0 <HAL_SPI_Init>
 800340a:	b900      	cbnz	r0, 800340e <MX_SPI1_Init+0x3a>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800340c:	bd10      	pop	{r4, pc}
 800340e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8003412:	f7fd bdf5 	b.w	8001000 <Error_Handler>
 8003416:	bf00      	nop
 8003418:	200016a8 	.word	0x200016a8
 800341c:	40013000 	.word	0x40013000

08003420 <MX_SPI3_Init>:
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8003420:	480f      	ldr	r0, [pc, #60]	@ (8003460 <MX_SPI3_Init+0x40>)
 8003422:	4910      	ldr	r1, [pc, #64]	@ (8003464 <MX_SPI3_Init+0x44>)
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8003424:	f44f 7282 	mov.w	r2, #260	@ 0x104
{
 8003428:	b510      	push	{r4, lr}
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800342a:	e9c0 1200 	strd	r1, r2, [r0]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800342e:	f44f 7200 	mov.w	r2, #512	@ 0x200
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003432:	2300      	movs	r3, #0
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003434:	2401      	movs	r4, #1
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003436:	2128      	movs	r1, #40	@ 0x28
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003438:	6182      	str	r2, [r0, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi3.Init.CRCPolynomial = 10;
 800343a:	220a      	movs	r2, #10
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800343c:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003440:	e9c0 3404 	strd	r3, r4, [r0, #16]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003444:	e9c0 1307 	strd	r1, r3, [r0, #28]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003448:	e9c0 3309 	strd	r3, r3, [r0, #36]	@ 0x24
  hspi3.Init.CRCPolynomial = 10;
 800344c:	62c2      	str	r2, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800344e:	f001 fd4f 	bl	8004ef0 <HAL_SPI_Init>
 8003452:	b900      	cbnz	r0, 8003456 <MX_SPI3_Init+0x36>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003454:	bd10      	pop	{r4, pc}
 8003456:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 800345a:	f7fd bdd1 	b.w	8001000 <Error_Handler>
 800345e:	bf00      	nop
 8003460:	20001650 	.word	0x20001650
 8003464:	40003c00 	.word	0x40003c00

08003468 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003468:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(spiHandle->Instance==SPI1)
 800346a:	6802      	ldr	r2, [r0, #0]
 800346c:	4937      	ldr	r1, [pc, #220]	@ (800354c <HAL_SPI_MspInit+0xe4>)
{
 800346e:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003470:	2300      	movs	r3, #0
  if(spiHandle->Instance==SPI1)
 8003472:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003474:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003478:	e9cd 3306 	strd	r3, r3, [sp, #24]
 800347c:	9308      	str	r3, [sp, #32]
  if(spiHandle->Instance==SPI1)
 800347e:	d004      	beq.n	800348a <HAL_SPI_MspInit+0x22>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI3)
 8003480:	4933      	ldr	r1, [pc, #204]	@ (8003550 <HAL_SPI_MspInit+0xe8>)
 8003482:	428a      	cmp	r2, r1
 8003484:	d030      	beq.n	80034e8 <HAL_SPI_MspInit+0x80>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8003486:	b00b      	add	sp, #44	@ 0x2c
 8003488:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 800348a:	4a32      	ldr	r2, [pc, #200]	@ (8003554 <HAL_SPI_MspInit+0xec>)
 800348c:	9300      	str	r3, [sp, #0]
 800348e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003490:	4831      	ldr	r0, [pc, #196]	@ (8003558 <HAL_SPI_MspInit+0xf0>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003492:	f441 5180 	orr.w	r1, r1, #4096	@ 0x1000
 8003496:	6451      	str	r1, [r2, #68]	@ 0x44
 8003498:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800349a:	f401 5180 	and.w	r1, r1, #4096	@ 0x1000
 800349e:	9100      	str	r1, [sp, #0]
 80034a0:	9900      	ldr	r1, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034a2:	9301      	str	r3, [sp, #4]
 80034a4:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80034a6:	f043 0301 	orr.w	r3, r3, #1
 80034aa:	6313      	str	r3, [r2, #48]	@ 0x30
 80034ac:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034b4:	2503      	movs	r5, #3
 80034b6:	2405      	movs	r4, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034b8:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80034ba:	22a0      	movs	r2, #160	@ 0xa0
 80034bc:	2302      	movs	r3, #2
 80034be:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034c2:	e9cd 5407 	strd	r5, r4, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034c6:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034c8:	f000 ffec 	bl	80044a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80034cc:	2240      	movs	r2, #64	@ 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ce:	2302      	movs	r3, #2
 80034d0:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034d4:	4820      	ldr	r0, [pc, #128]	@ (8003558 <HAL_SPI_MspInit+0xf0>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80034d6:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034d8:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034da:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034dc:	e9cd 3506 	strd	r3, r5, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034e0:	f000 ffe0 	bl	80044a4 <HAL_GPIO_Init>
}
 80034e4:	b00b      	add	sp, #44	@ 0x2c
 80034e6:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_SPI3_CLK_ENABLE();
 80034e8:	4a1a      	ldr	r2, [pc, #104]	@ (8003554 <HAL_SPI_MspInit+0xec>)
 80034ea:	9302      	str	r3, [sp, #8]
 80034ec:	6c11      	ldr	r1, [r2, #64]	@ 0x40
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034ee:	481b      	ldr	r0, [pc, #108]	@ (800355c <HAL_SPI_MspInit+0xf4>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 80034f0:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 80034f4:	6411      	str	r1, [r2, #64]	@ 0x40
 80034f6:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 80034f8:	f401 4100 	and.w	r1, r1, #32768	@ 0x8000
 80034fc:	9102      	str	r1, [sp, #8]
 80034fe:	9902      	ldr	r1, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003500:	9303      	str	r3, [sp, #12]
 8003502:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8003504:	f043 0304 	orr.w	r3, r3, #4
 8003508:	6313      	str	r3, [r2, #48]	@ 0x30
 800350a:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800350c:	f003 0304 	and.w	r3, r3, #4
 8003510:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003512:	2503      	movs	r5, #3
 8003514:	2406      	movs	r4, #6
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003516:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8003518:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 800351c:	2302      	movs	r3, #2
 800351e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003522:	e9cd 5407 	strd	r5, r4, [sp, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003526:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003528:	f000 ffbc 	bl	80044a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800352c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003530:	2302      	movs	r3, #2
 8003532:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003536:	4809      	ldr	r0, [pc, #36]	@ (800355c <HAL_SPI_MspInit+0xf4>)
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003538:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800353a:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800353c:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800353e:	e9cd 3506 	strd	r3, r5, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003542:	f000 ffaf 	bl	80044a4 <HAL_GPIO_Init>
}
 8003546:	b00b      	add	sp, #44	@ 0x2c
 8003548:	bd30      	pop	{r4, r5, pc}
 800354a:	bf00      	nop
 800354c:	40013000 	.word	0x40013000
 8003550:	40003c00 	.word	0x40003c00
 8003554:	40023800 	.word	0x40023800
 8003558:	40020000 	.word	0x40020000
 800355c:	40020800 	.word	0x40020800

08003560 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003560:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003562:	4b0d      	ldr	r3, [pc, #52]	@ (8003598 <HAL_MspInit+0x38>)
 8003564:	2100      	movs	r1, #0
 8003566:	9100      	str	r1, [sp, #0]
 8003568:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800356a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800356e:	645a      	str	r2, [r3, #68]	@ 0x44
 8003570:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003572:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8003576:	9200      	str	r2, [sp, #0]
 8003578:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800357a:	9101      	str	r1, [sp, #4]
 800357c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800357e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003582:	641a      	str	r2, [r3, #64]	@ 0x40
 8003584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003586:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800358a:	9301      	str	r3, [sp, #4]
 800358c:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 800358e:	2004      	movs	r0, #4
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003590:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8003592:	f000 be75 	b.w	8004280 <HAL_NVIC_SetPriorityGrouping>
 8003596:	bf00      	nop
 8003598:	40023800 	.word	0x40023800

0800359c <ADC_IRQHandler>:
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_JEOS) == (LL_ADC_FLAG_JEOS));
 800359c:	4b05      	ldr	r3, [pc, #20]	@ (80035b4 <ADC_IRQHandler+0x18>)
 800359e:	681a      	ldr	r2, [r3, #0]
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  if(LL_ADC_IsActiveFlag_JEOS(ADC1))
 80035a0:	0752      	lsls	r2, r2, #29
 80035a2:	d400      	bmi.n	80035a6 <ADC_IRQHandler+0xa>
    TSK_HighFrequencyTask();          /*GUI, this section is present only if DAC is disabled*/
  }
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80035a4:	4770      	bx	lr
    ADC1->SR &= ~(uint32_t)(LL_ADC_FLAG_JEOS | LL_ADC_FLAG_JSTRT);
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	f022 020c 	bic.w	r2, r2, #12
 80035ac:	601a      	str	r2, [r3, #0]
    TSK_HighFrequencyTask();          /*GUI, this section is present only if DAC is disabled*/
 80035ae:	f7fe ba2b 	b.w	8001a08 <TSK_HighFrequencyTask>
 80035b2:	bf00      	nop
 80035b4:	40012000 	.word	0x40012000

080035b8 <TIM1_UP_TIM10_IRQHandler>:
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80035b8:	4b03      	ldr	r3, [pc, #12]	@ (80035c8 <TIM1_UP_TIM10_IRQHandler+0x10>)
  /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

  /* USER CODE END TIMx_UP_M1_IRQn 0 */

  LL_TIM_ClearFlag_UPDATE(TIM1);
  R3_1_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 80035ba:	4804      	ldr	r0, [pc, #16]	@ (80035cc <TIM1_UP_TIM10_IRQHandler+0x14>)
 80035bc:	f06f 0201 	mvn.w	r2, #1
 80035c0:	611a      	str	r2, [r3, #16]
 80035c2:	f003 bab1 	b.w	8006b28 <R3_1_TIMx_UP_IRQHandler>
 80035c6:	bf00      	nop
 80035c8:	40010000 	.word	0x40010000
 80035cc:	20000148 	.word	0x20000148

080035d0 <TIM1_BRK_TIM9_IRQHandler>:
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK(const TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 80035d0:	4907      	ldr	r1, [pc, #28]	@ (80035f0 <TIM1_BRK_TIM9_IRQHandler+0x20>)
/**
  * @brief  This function handles first motor BRK interrupt.
  * @param  None
  */
void TIMx_BRK_M1_IRQHandler(void)
{
 80035d2:	b508      	push	{r3, lr}
 80035d4:	690b      	ldr	r3, [r1, #16]
 80035d6:	061b      	lsls	r3, r3, #24
 80035d8:	d505      	bpl.n	80035e6 <TIM1_BRK_TIM9_IRQHandler+0x16>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 80035da:	f06f 0380 	mvn.w	r3, #128	@ 0x80

  /* USER CODE END TIMx_BRK_M1_IRQn 0 */
  if (LL_TIM_IsActiveFlag_BRK(TIM1))
  {
    LL_TIM_ClearFlag_BRK(TIM1);
    PWMC_OVP_Handler(&PWM_Handle_M1._Super, TIM1);
 80035de:	4805      	ldr	r0, [pc, #20]	@ (80035f4 <TIM1_BRK_TIM9_IRQHandler+0x24>)
 80035e0:	610b      	str	r3, [r1, #16]
 80035e2:	f7fe fec5 	bl	8002370 <PWMC_OVP_Handler>
  MC_Scheduler();

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 80035e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_Scheduler();
 80035ea:	f7fe b9c7 	b.w	800197c <MC_Scheduler>
 80035ee:	bf00      	nop
 80035f0:	40010000 	.word	0x40010000
 80035f4:	20000148 	.word	0x20000148

080035f8 <TIM2_IRQHandler>:
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 0 */

  /* USER CODE END SPD_TIM_M1_IRQn 0 */

 /* Encoder Timer UPDATE IT is dynamicaly enabled/disabled, checking enable state is required */
  if (LL_TIM_IsEnabledIT_UPDATE (ENCODER_M1.TIMx) && LL_TIM_IsActiveFlag_UPDATE (ENCODER_M1.TIMx))
 80035f8:	4806      	ldr	r0, [pc, #24]	@ (8003614 <TIM2_IRQHandler+0x1c>)
 80035fa:	6a03      	ldr	r3, [r0, #32]
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsEnabledIT_UPDATE(const TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->DIER, TIM_DIER_UIE) == (TIM_DIER_UIE)) ? 1UL : 0UL);
 80035fc:	68da      	ldr	r2, [r3, #12]
 80035fe:	07d1      	lsls	r1, r2, #31
 8003600:	d507      	bpl.n	8003612 <TIM2_IRQHandler+0x1a>
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8003602:	691a      	ldr	r2, [r3, #16]
 8003604:	07d2      	lsls	r2, r2, #31
 8003606:	d504      	bpl.n	8003612 <TIM2_IRQHandler+0x1a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8003608:	f06f 0201 	mvn.w	r2, #1
 800360c:	611a      	str	r2, [r3, #16]
  {
    LL_TIM_ClearFlag_UPDATE(ENCODER_M1.TIMx);
    ENC_IRQHandler(&ENCODER_M1);
 800360e:	f002 bc3b 	b.w	8005e88 <ENC_IRQHandler>
  /* No other IT to manage for encoder config */
  }
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 1 */

  /* USER CODE END SPD_TIM_M1_IRQn 1 */
}
 8003612:	4770      	bx	lr
 8003614:	20000090 	.word	0x20000090

08003618 <DMA1_Stream5_IRQHandler>:
    retVal = 0;
  }
  else
  {
    register __IO uint32_t *preg = __DMA_PTR_REG_OFFSET(DMAx->LISR,(Stream<=3)?0:1);
    retVal = ((READ_BIT(*preg, 1 << __LL_DMA_IT_TC_BIT(Stream)) == (1 << __LL_DMA_IT_TC_BIT(Stream))) ? 1UL : 0UL);
 8003618:	4b05      	ldr	r3, [pc, #20]	@ (8003630 <DMA1_Stream5_IRQHandler+0x18>)
 800361a:	685a      	ldr	r2, [r3, #4]
 800361c:	0512      	lsls	r2, r2, #20
 800361e:	d400      	bmi.n	8003622 <DMA1_Stream5_IRQHandler+0xa>
  }
  /* USER CODE BEGIN DMA1_Stream5_IRQHandler 1 */

  /* USER CODE BEGIN DMA1_Stream5_IRQHandler 1 */

}
 8003620:	4770      	bx	lr
    WRITE_REG (*preg, 1 << __LL_DMA_IT_TC_BIT(Stream));
 8003622:	f44f 6200 	mov.w	r2, #2048	@ 0x800
    ASPEP_HWDataReceivedIT (&aspepOverUartA);
 8003626:	4803      	ldr	r0, [pc, #12]	@ (8003634 <DMA1_Stream5_IRQHandler+0x1c>)
 8003628:	60da      	str	r2, [r3, #12]
 800362a:	f7fd bb4b 	b.w	8000cc4 <ASPEP_HWDataReceivedIT>
 800362e:	bf00      	nop
 8003630:	40026000 	.word	0x40026000
 8003634:	20000310 	.word	0x20000310

08003638 <USART2_IRQHandler>:
/**
  * @brief  This function handles USART interrupt request.
  * @param  None
  */
void USART2_IRQHandler(void)
{
 8003638:	b510      	push	{r4, lr}
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 800363a:	4b51      	ldr	r3, [pc, #324]	@ (8003780 <USART2_IRQHandler+0x148>)
 800363c:	681a      	ldr	r2, [r3, #0]
  /* USER CODE BEGIN USART2_IRQHandler 0 */

  /* USER CODE END UUSART2_IRQHandler 0 */

  if ( LL_USART_IsActiveFlag_TC (USARTA) )
 800363e:	0651      	lsls	r1, r2, #25
{
 8003640:	b084      	sub	sp, #16
  if ( LL_USART_IsActiveFlag_TC (USARTA) )
 8003642:	f100 808e 	bmi.w	8003762 <USART2_IRQHandler+0x12a>
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8003646:	4b4e      	ldr	r3, [pc, #312]	@ (8003780 <USART2_IRQHandler+0x148>)
 8003648:	681a      	ldr	r2, [r3, #0]
    LL_USART_ClearFlag_TC (USARTA);
    /* Data Sent by UART*/
    /* Need to free the buffer, and to check pending transfer*/
    ASPEP_HWDataTransmittedIT (&aspepOverUartA);
  }
  if ( (LL_USART_IsActiveFlag_ORE (USARTA) || LL_USART_IsActiveFlag_FE (USARTA) || LL_USART_IsActiveFlag_NE (USARTA))
 800364a:	0712      	lsls	r2, r2, #28
 800364c:	d402      	bmi.n	8003654 <USART2_IRQHandler+0x1c>
  return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	0794      	lsls	r4, r2, #30
 8003652:	d57e      	bpl.n	8003752 <USART2_IRQHandler+0x11a>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_ERROR(const USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE));
 8003654:	4b4a      	ldr	r3, [pc, #296]	@ (8003780 <USART2_IRQHandler+0x148>)
 8003656:	695a      	ldr	r2, [r3, #20]
        && LL_USART_IsEnabledIT_ERROR (USARTA) )
 8003658:	07d1      	lsls	r1, r2, #31
 800365a:	d52d      	bpl.n	80036b8 <USART2_IRQHandler+0x80>
  tmpreg = USARTx->SR;
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	9203      	str	r2, [sp, #12]
  (void) tmpreg;
 8003660:	9a03      	ldr	r2, [sp, #12]
  tmpreg = USARTx->DR;
 8003662:	685a      	ldr	r2, [r3, #4]
 8003664:	9203      	str	r2, [sp, #12]
  (void) tmpreg;
 8003666:	9a03      	ldr	r2, [sp, #12]
  tmpreg = USARTx->SR;
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	9202      	str	r2, [sp, #8]
  (void) tmpreg;
 800366c:	9a02      	ldr	r2, [sp, #8]
  tmpreg = USARTx->DR;
 800366e:	685a      	ldr	r2, [r3, #4]
 8003670:	9202      	str	r2, [sp, #8]
  (void) tmpreg;
 8003672:	9a02      	ldr	r2, [sp, #8]
  tmpreg = USARTx->SR;
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 8003678:	9a01      	ldr	r2, [sp, #4]
  tmpreg = USARTx->DR;
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 800367e:	9b01      	ldr	r3, [sp, #4]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003680:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003684:	f202 4314 	addw	r3, r2, #1044	@ 0x414
 8003688:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
 800368c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003690:	f202 4014 	addw	r0, r2, #1044	@ 0x414
 8003694:	e840 3100 	strex	r1, r3, [r0]
 8003698:	2900      	cmp	r1, #0
 800369a:	d1f3      	bne.n	8003684 <USART2_IRQHandler+0x4c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800369c:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80036a0:	f202 430c 	addw	r3, r2, #1036	@ 0x40c
 80036a4:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 80036a8:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ac:	f202 400c 	addw	r0, r2, #1036	@ 0x40c
 80036b0:	e840 3100 	strex	r1, r3, [r0]
 80036b4:	2900      	cmp	r1, #0
 80036b6:	d1f3      	bne.n	80036a0 <USART2_IRQHandler+0x68>
  return (READ_BIT(USARTx->SR, USART_SR_IDLE) == (USART_SR_IDLE));
 80036b8:	4b31      	ldr	r3, [pc, #196]	@ (8003780 <USART2_IRQHandler+0x148>)
 80036ba:	681a      	ldr	r2, [r3, #0]
    LL_USART_ClearFlag_NE(USARTA);
    /* We disable ERROR interrupt to avoid to trig one Overrun IT per additional byte recevied*/
    LL_USART_DisableIT_ERROR (USARTA);
    LL_USART_EnableIT_IDLE (USARTA);
  }
  if ( LL_USART_IsActiveFlag_IDLE (USARTA) && LL_USART_IsEnabledIT_IDLE (USARTA) )
 80036bc:	06d2      	lsls	r2, r2, #27
 80036be:	d546      	bpl.n	800374e <USART2_IRQHandler+0x116>
  return (READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE));
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	06db      	lsls	r3, r3, #27
 80036c4:	d543      	bpl.n	800374e <USART2_IRQHandler+0x116>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036c6:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80036ca:	f202 430c 	addw	r3, r2, #1036	@ 0x40c
 80036ce:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 80036d2:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d6:	f202 400c 	addw	r0, r2, #1036	@ 0x40c
 80036da:	e840 3100 	strex	r1, r3, [r0]
 80036de:	2900      	cmp	r1, #0
 80036e0:	d1f3      	bne.n	80036ca <USART2_IRQHandler+0x92>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e2:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80036e6:	f202 4314 	addw	r3, r2, #1044	@ 0x414
 80036ea:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 80036ee:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f2:	f202 4014 	addw	r0, r2, #1044	@ 0x414
 80036f6:	e840 3100 	strex	r1, r3, [r0]
 80036fa:	2900      	cmp	r1, #0
 80036fc:	d1f3      	bne.n	80036e6 <USART2_IRQHandler+0xae>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036fe:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003702:	f202 4314 	addw	r3, r2, #1044	@ 0x414
 8003706:	e853 3f00 	ldrex	r3, [r3]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableDMAReq_RX(USART_TypeDef *USARTx)
{
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_DMAR);
 800370a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800370e:	f202 4014 	addw	r0, r2, #1044	@ 0x414
 8003712:	e840 3100 	strex	r1, r3, [r0]
 8003716:	2900      	cmp	r1, #0
 8003718:	d1f3      	bne.n	8003702 <USART2_IRQHandler+0xca>
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 800371a:	4b19      	ldr	r3, [pc, #100]	@ (8003780 <USART2_IRQHandler+0x148>)
 800371c:	685b      	ldr	r3, [r3, #4]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800371e:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003722:	f202 4314 	addw	r3, r2, #1044	@ 0x414
 8003726:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 800372a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800372e:	f202 4014 	addw	r0, r2, #1044	@ 0x414
 8003732:	e840 3100 	strex	r1, r3, [r0]
 8003736:	2900      	cmp	r1, #0
 8003738:	d1f3      	bne.n	8003722 <USART2_IRQHandler+0xea>
    WRITE_REG (*preg, 1 << __LL_DMA_IT_TE_BIT(Stream));
 800373a:	4b12      	ldr	r3, [pc, #72]	@ (8003784 <USART2_IRQHandler+0x14c>)
    /* We disable the DMA request, Read the dummy data, endable back the DMA request */
    LL_USART_DisableDMAReq_RX (USARTA);
    LL_USART_ReceiveData8(USARTA);
    LL_USART_EnableDMAReq_RX (USARTA);
    LL_DMA_ClearFlag_TE (DMA_RX_A, DMACH_RX_A );
    ASPEP_HWDMAReset (&aspepOverUartA);
 800373c:	4812      	ldr	r0, [pc, #72]	@ (8003788 <USART2_IRQHandler+0x150>)
 800373e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003742:	60da      	str	r2, [r3, #12]
  }

  /* USER CODE BEGIN USART2_IRQHandler 1 */

  /* USER CODE END USART2_IRQHandler 1 */
}
 8003744:	b004      	add	sp, #16
 8003746:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ASPEP_HWDMAReset (&aspepOverUartA);
 800374a:	f7fd bb09 	b.w	8000d60 <ASPEP_HWDMAReset>
}
 800374e:	b004      	add	sp, #16
 8003750:	bd10      	pop	{r4, pc}
  return (READ_BIT(USARTx->SR, USART_SR_NE) == (USART_SR_NE));
 8003752:	681b      	ldr	r3, [r3, #0]
  if ( (LL_USART_IsActiveFlag_ORE (USARTA) || LL_USART_IsActiveFlag_FE (USARTA) || LL_USART_IsActiveFlag_NE (USARTA))
 8003754:	0758      	lsls	r0, r3, #29
 8003756:	d5af      	bpl.n	80036b8 <USART2_IRQHandler+0x80>
  return (READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE));
 8003758:	4b09      	ldr	r3, [pc, #36]	@ (8003780 <USART2_IRQHandler+0x148>)
 800375a:	695a      	ldr	r2, [r3, #20]
        && LL_USART_IsEnabledIT_ERROR (USARTA) )
 800375c:	07d1      	lsls	r1, r2, #31
 800375e:	d5ab      	bpl.n	80036b8 <USART2_IRQHandler+0x80>
 8003760:	e77c      	b.n	800365c <USART2_IRQHandler+0x24>
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8003762:	4908      	ldr	r1, [pc, #32]	@ (8003784 <USART2_IRQHandler+0x14c>)
    ASPEP_HWDataTransmittedIT (&aspepOverUartA);
 8003764:	4808      	ldr	r0, [pc, #32]	@ (8003788 <USART2_IRQHandler+0x150>)
 8003766:	f8d1 20a0 	ldr.w	r2, [r1, #160]	@ 0xa0
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 800376a:	f06f 0440 	mvn.w	r4, #64	@ 0x40
 800376e:	f022 0201 	bic.w	r2, r2, #1
 8003772:	f8c1 20a0 	str.w	r2, [r1, #160]	@ 0xa0
 8003776:	601c      	str	r4, [r3, #0]
 8003778:	f7fd f8f8 	bl	800096c <ASPEP_HWDataTransmittedIT>
 800377c:	e763      	b.n	8003646 <USART2_IRQHandler+0xe>
 800377e:	bf00      	nop
 8003780:	40004400 	.word	0x40004400
 8003784:	40026000 	.word	0x40026000
 8003788:	20000310 	.word	0x20000310

0800378c <HardFault_Handler>:
/**
  * @brief  This function handles Hard Fault exception.
  * @param  None
  */
void HardFault_Handler(void)
{
 800378c:	b508      	push	{r3, lr}
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 800378e:	f7fe fa29 	bl	8001be4 <TSK_HardwareFaultTask>

  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8003792:	e7fe      	b.n	8003792 <HardFault_Handler+0x6>

08003794 <SysTick_Handler>:
 /* USER CODE END HardFault_IRQn 1 */

}

void SysTick_Handler(void)
{
 8003794:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 8003796:	4c0a      	ldr	r4, [pc, #40]	@ (80037c0 <SysTick_Handler+0x2c>)
 8003798:	7823      	ldrb	r3, [r4, #0]
 800379a:	2b02      	cmp	r3, #2
 800379c:	d006      	beq.n	80037ac <SysTick_Handler+0x18>
  {
    HAL_IncTick();
    HAL_SYSTICK_IRQHandler();
    SystickDividerCounter = 0;
  }
  SystickDividerCounter ++;
 800379e:	3301      	adds	r3, #1
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	7023      	strb	r3, [r4, #0]
  /* USER CODE END SysTick_IRQn 1 */
    MC_RunMotorControlTasks();

  /* USER CODE BEGIN SysTick_IRQn 2 */
  /* USER CODE END SysTick_IRQn 2 */
}
 80037a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 80037a8:	f7fe ba10 	b.w	8001bcc <MC_RunMotorControlTasks>
    HAL_IncTick();
 80037ac:	f000 fb0e 	bl	8003dcc <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 80037b0:	f000 fdde 	bl	8004370 <HAL_SYSTICK_IRQHandler>
 80037b4:	2301      	movs	r3, #1
  SystickDividerCounter ++;
 80037b6:	7023      	strb	r3, [r4, #0]
}
 80037b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 80037bc:	f7fe ba06 	b.w	8001bcc <MC_RunMotorControlTasks>
 80037c0:	20000398 	.word	0x20000398

080037c4 <MX_TIM2_Init>:
  HAL_TIM_MspPostInit(&htim1);

}
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80037c4:	b510      	push	{r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80037c6:	4819      	ldr	r0, [pc, #100]	@ (800382c <MX_TIM2_Init+0x68>)
{
 80037c8:	b08c      	sub	sp, #48	@ 0x30
  htim2.Instance = TIM2;
 80037ca:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
  TIM_Encoder_InitTypeDef sConfig = {0};
 80037ce:	2300      	movs	r3, #0
  htim2.Init.Prescaler = 0;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = M1_PULSE_NBR;
 80037d0:	f640 71ff 	movw	r1, #4095	@ 0xfff
  htim2.Instance = TIM2;
 80037d4:	6002      	str	r2, [r0, #0]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC1Filter = M1_ENC_IC_FILTER;
 80037d6:	220c      	movs	r2, #12
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80037d8:	2401      	movs	r4, #1
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037da:	e9cd 3300 	strd	r3, r3, [sp]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037de:	e9c0 3301 	strd	r3, r3, [r0, #4]
  TIM_Encoder_InitTypeDef sConfig = {0};
 80037e2:	9304      	str	r3, [sp, #16]
 80037e4:	9306      	str	r3, [sp, #24]
 80037e6:	9308      	str	r3, [sp, #32]
 80037e8:	930a      	str	r3, [sp, #40]	@ 0x28
  htim2.Init.Period = M1_PULSE_NBR;
 80037ea:	60c1      	str	r1, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037ec:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037ee:	6183      	str	r3, [r0, #24]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = M1_ENC_IC_FILTER;
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80037f0:	eb0d 0102 	add.w	r1, sp, r2
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80037f4:	2303      	movs	r3, #3
 80037f6:	9303      	str	r3, [sp, #12]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80037f8:	9405      	str	r4, [sp, #20]
  sConfig.IC1Filter = M1_ENC_IC_FILTER;
 80037fa:	9207      	str	r2, [sp, #28]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80037fc:	9409      	str	r4, [sp, #36]	@ 0x24
  sConfig.IC2Filter = M1_ENC_IC_FILTER;
 80037fe:	920b      	str	r2, [sp, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8003800:	f001 fe32 	bl	8005468 <HAL_TIM_Encoder_Init>
 8003804:	b950      	cbnz	r0, 800381c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003806:	2200      	movs	r2, #0
 8003808:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800380a:	4808      	ldr	r0, [pc, #32]	@ (800382c <MX_TIM2_Init+0x68>)
 800380c:	4669      	mov	r1, sp
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800380e:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003812:	f002 f879 	bl	8005908 <HAL_TIMEx_MasterConfigSynchronization>
 8003816:	b920      	cbnz	r0, 8003822 <MX_TIM2_Init+0x5e>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003818:	b00c      	add	sp, #48	@ 0x30
 800381a:	bd10      	pop	{r4, pc}
    Error_Handler();
 800381c:	f7fd fbf0 	bl	8001000 <Error_Handler>
 8003820:	e7f1      	b.n	8003806 <MX_TIM2_Init+0x42>
    Error_Handler();
 8003822:	f7fd fbed 	bl	8001000 <Error_Handler>
}
 8003826:	b00c      	add	sp, #48	@ 0x30
 8003828:	bd10      	pop	{r4, pc}
 800382a:	bf00      	nop
 800382c:	20001700 	.word	0x20001700

08003830 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM1)
 8003830:	4b0a      	ldr	r3, [pc, #40]	@ (800385c <HAL_TIM_Base_MspInit+0x2c>)
 8003832:	6802      	ldr	r2, [r0, #0]
 8003834:	429a      	cmp	r2, r3
 8003836:	d000      	beq.n	800383a <HAL_TIM_Base_MspInit+0xa>
 8003838:	4770      	bx	lr
{
 800383a:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800383c:	f503 339c 	add.w	r3, r3, #79872	@ 0x13800
 8003840:	2200      	movs	r2, #0
 8003842:	9201      	str	r2, [sp, #4]
 8003844:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003846:	f042 0201 	orr.w	r2, r2, #1
 800384a:	645a      	str	r2, [r3, #68]	@ 0x44
 800384c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	9301      	str	r3, [sp, #4]
 8003854:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8003856:	b002      	add	sp, #8
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	40010000 	.word	0x40010000

08003860 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003860:	b500      	push	{lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(tim_encoderHandle->Instance==TIM2)
 8003862:	6802      	ldr	r2, [r0, #0]
{
 8003864:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003866:	2300      	movs	r3, #0
  if(tim_encoderHandle->Instance==TIM2)
 8003868:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800386c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003870:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003874:	9306      	str	r3, [sp, #24]
  if(tim_encoderHandle->Instance==TIM2)
 8003876:	d002      	beq.n	800387e <HAL_TIM_Encoder_MspInit+0x1e>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8003878:	b009      	add	sp, #36	@ 0x24
 800387a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM2_CLK_ENABLE();
 800387e:	f502 320e 	add.w	r2, r2, #145408	@ 0x23800
 8003882:	9300      	str	r3, [sp, #0]
 8003884:	6c10      	ldr	r0, [r2, #64]	@ 0x40
 8003886:	f040 0001 	orr.w	r0, r0, #1
 800388a:	6410      	str	r0, [r2, #64]	@ 0x40
 800388c:	6c10      	ldr	r0, [r2, #64]	@ 0x40
 800388e:	f000 0001 	and.w	r0, r0, #1
 8003892:	9000      	str	r0, [sp, #0]
 8003894:	9800      	ldr	r0, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003896:	9301      	str	r3, [sp, #4]
 8003898:	6b13      	ldr	r3, [r2, #48]	@ 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800389a:	480d      	ldr	r0, [pc, #52]	@ (80038d0 <HAL_TIM_Encoder_MspInit+0x70>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800389c:	f043 0302 	orr.w	r3, r3, #2
 80038a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80038a2:	6b13      	ldr	r3, [r2, #48]	@ 0x30
    GPIO_InitStruct.Pin = M1_ENCODER_A_Pin|M1_ENCODER_B_Pin;
 80038a4:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 80038c8 <HAL_TIM_Encoder_MspInit+0x68>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038a8:	f003 0302 	and.w	r3, r3, #2
 80038ac:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038ae:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80038b0:	2301      	movs	r3, #1
    GPIO_InitStruct.Pin = M1_ENCODER_A_Pin|M1_ENCODER_B_Pin;
 80038b2:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038b6:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80038b8:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038ba:	f000 fdf3 	bl	80044a4 <HAL_GPIO_Init>
}
 80038be:	b009      	add	sp, #36	@ 0x24
 80038c0:	f85d fb04 	ldr.w	pc, [sp], #4
 80038c4:	f3af 8000 	nop.w
 80038c8:	00000300 	.word	0x00000300
 80038cc:	00000002 	.word	0x00000002
 80038d0:	40020400 	.word	0x40020400

080038d4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80038d4:	b5d0      	push	{r4, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(timHandle->Instance==TIM1)
 80038d6:	4a1f      	ldr	r2, [pc, #124]	@ (8003954 <HAL_TIM_MspPostInit+0x80>)
 80038d8:	6801      	ldr	r1, [r0, #0]
{
 80038da:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038dc:	2300      	movs	r3, #0
  if(timHandle->Instance==TIM1)
 80038de:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038e0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80038e4:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80038e8:	9306      	str	r3, [sp, #24]
  if(timHandle->Instance==TIM1)
 80038ea:	d001      	beq.n	80038f0 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80038ec:	b008      	add	sp, #32
 80038ee:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038f0:	f502 329c 	add.w	r2, r2, #79872	@ 0x13800
 80038f4:	9300      	str	r3, [sp, #0]
 80038f6:	6b11      	ldr	r1, [r2, #48]	@ 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038f8:	4817      	ldr	r0, [pc, #92]	@ (8003958 <HAL_TIM_MspPostInit+0x84>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038fa:	f041 0102 	orr.w	r1, r1, #2
 80038fe:	6311      	str	r1, [r2, #48]	@ 0x30
 8003900:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8003902:	f001 0102 	and.w	r1, r1, #2
 8003906:	9100      	str	r1, [sp, #0]
 8003908:	9900      	ldr	r1, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800390a:	9301      	str	r3, [sp, #4]
 800390c:	6b13      	ldr	r3, [r2, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800390e:	2401      	movs	r4, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003910:	4323      	orrs	r3, r4
 8003912:	6313      	str	r3, [r2, #48]	@ 0x30
 8003914:	6b13      	ldr	r3, [r2, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003916:	9406      	str	r4, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003918:	4023      	ands	r3, r4
 800391a:	9301      	str	r3, [sp, #4]
 800391c:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800391e:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8003920:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 8003924:	2302      	movs	r3, #2
 8003926:	2602      	movs	r6, #2
 8003928:	2702      	movs	r7, #2
 800392a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800392e:	e9cd 6704 	strd	r6, r7, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003932:	f000 fdb7 	bl	80044a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8003936:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800393a:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800393c:	4807      	ldr	r0, [pc, #28]	@ (800395c <HAL_TIM_MspPostInit+0x88>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800393e:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003940:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8003942:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003946:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800394a:	f000 fdab 	bl	80044a4 <HAL_GPIO_Init>
}
 800394e:	b008      	add	sp, #32
 8003950:	bdd0      	pop	{r4, r6, r7, pc}
 8003952:	bf00      	nop
 8003954:	40010000 	.word	0x40010000
 8003958:	40020400 	.word	0x40020400
 800395c:	40020000 	.word	0x40020000

08003960 <MX_TIM1_Init>:
{
 8003960:	b530      	push	{r4, r5, lr}
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8003962:	2400      	movs	r4, #0
{
 8003964:	b099      	sub	sp, #100	@ 0x64
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003966:	2520      	movs	r5, #32
 8003968:	4621      	mov	r1, r4
 800396a:	462a      	mov	r2, r5
 800396c:	a810      	add	r0, sp, #64	@ 0x40
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800396e:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003972:	e9cd 4405 	strd	r4, r4, [sp, #20]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003976:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
 800397a:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 800397e:	e9cd 440d 	strd	r4, r4, [sp, #52]	@ 0x34
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8003982:	9402      	str	r4, [sp, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003984:	9400      	str	r4, [sp, #0]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003986:	9408      	str	r4, [sp, #32]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003988:	9401      	str	r4, [sp, #4]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800398a:	f003 fd0d 	bl	80073a8 <memset>
  htim1.Instance = TIM1;
 800398e:	4849      	ldr	r0, [pc, #292]	@ (8003ab4 <MX_TIM1_Init+0x154>)
 8003990:	4b49      	ldr	r3, [pc, #292]	@ (8003ab8 <MX_TIM1_Init+0x158>)
 8003992:	6003      	str	r3, [r0, #0]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8003994:	f241 51f9 	movw	r1, #5625	@ 0x15f9
 8003998:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800399c:	e9c0 1303 	strd	r1, r3, [r0, #12]
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 80039a0:	2301      	movs	r3, #1
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 80039a2:	e9c0 4501 	strd	r4, r5, [r0, #4]
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 80039a6:	6184      	str	r4, [r0, #24]
 80039a8:	6143      	str	r3, [r0, #20]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80039aa:	f001 fc2b 	bl	8005204 <HAL_TIM_Base_Init>
 80039ae:	2800      	cmp	r0, #0
 80039b0:	d15d      	bne.n	8003a6e <MX_TIM1_Init+0x10e>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80039b2:	4840      	ldr	r0, [pc, #256]	@ (8003ab4 <MX_TIM1_Init+0x154>)
 80039b4:	f001 fcc0 	bl	8005338 <HAL_TIM_PWM_Init>
 80039b8:	2800      	cmp	r0, #0
 80039ba:	d15f      	bne.n	8003a7c <MX_TIM1_Init+0x11c>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80039bc:	2206      	movs	r2, #6
 80039be:	2310      	movs	r3, #16
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80039c0:	483c      	ldr	r0, [pc, #240]	@ (8003ab4 <MX_TIM1_Init+0x154>)
 80039c2:	a902      	add	r1, sp, #8
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80039c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80039c8:	f001 ff12 	bl	80057f0 <HAL_TIM_SlaveConfigSynchro>
 80039cc:	2800      	cmp	r0, #0
 80039ce:	d16e      	bne.n	8003aae <MX_TIM1_Init+0x14e>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039d0:	2200      	movs	r2, #0
 80039d2:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80039d4:	4837      	ldr	r0, [pc, #220]	@ (8003ab4 <MX_TIM1_Init+0x154>)
 80039d6:	4669      	mov	r1, sp
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039d8:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80039dc:	f001 ff94 	bl	8005908 <HAL_TIMEx_MasterConfigSynchronization>
 80039e0:	2800      	cmp	r0, #0
 80039e2:	d161      	bne.n	8003aa8 <MX_TIM1_Init+0x148>
  sConfigOC.Pulse = ((PWM_PERIOD_CYCLES) / 4);
 80039e4:	2160      	movs	r1, #96	@ 0x60
 80039e6:	f640 23fc 	movw	r3, #2812	@ 0xafc
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80039ea:	2000      	movs	r0, #0
  sConfigOC.Pulse = ((PWM_PERIOD_CYCLES) / 4);
 80039ec:	e9cd 1308 	strd	r1, r3, [sp, #32]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80039f0:	2100      	movs	r1, #0
 80039f2:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80039f6:	2200      	movs	r2, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80039f8:	482e      	ldr	r0, [pc, #184]	@ (8003ab4 <MX_TIM1_Init+0x154>)
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80039fa:	920e      	str	r2, [sp, #56]	@ 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80039fc:	a908      	add	r1, sp, #32
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80039fe:	e9cd 220a 	strd	r2, r2, [sp, #40]	@ 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003a02:	f001 fdf1 	bl	80055e8 <HAL_TIM_PWM_ConfigChannel>
 8003a06:	2800      	cmp	r0, #0
 8003a08:	d14b      	bne.n	8003aa2 <MX_TIM1_Init+0x142>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003a0a:	482a      	ldr	r0, [pc, #168]	@ (8003ab4 <MX_TIM1_Init+0x154>)
 8003a0c:	2204      	movs	r2, #4
 8003a0e:	a908      	add	r1, sp, #32
 8003a10:	f001 fdea 	bl	80055e8 <HAL_TIM_PWM_ConfigChannel>
 8003a14:	2800      	cmp	r0, #0
 8003a16:	d141      	bne.n	8003a9c <MX_TIM1_Init+0x13c>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003a18:	4826      	ldr	r0, [pc, #152]	@ (8003ab4 <MX_TIM1_Init+0x154>)
 8003a1a:	2208      	movs	r2, #8
 8003a1c:	a908      	add	r1, sp, #32
 8003a1e:	f001 fde3 	bl	80055e8 <HAL_TIM_PWM_ConfigChannel>
 8003a22:	2800      	cmp	r0, #0
 8003a24:	d137      	bne.n	8003a96 <MX_TIM1_Init+0x136>
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8003a26:	2270      	movs	r2, #112	@ 0x70
 8003a28:	f241 53f8 	movw	r3, #5624	@ 0x15f8
 8003a2c:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003a30:	4820      	ldr	r0, [pc, #128]	@ (8003ab4 <MX_TIM1_Init+0x154>)
 8003a32:	a908      	add	r1, sp, #32
 8003a34:	220c      	movs	r2, #12
 8003a36:	f001 fdd7 	bl	80055e8 <HAL_TIM_PWM_ConfigChannel>
 8003a3a:	bb48      	cbnz	r0, 8003a90 <MX_TIM1_Init+0x130>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8003a3c:	f44f 6400 	mov.w	r4, #2048	@ 0x800
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8003a40:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003a44:	e9cd 4210 	strd	r4, r2, [sp, #64]	@ 0x40
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003a48:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 8003a4a:	224c      	movs	r2, #76	@ 0x4c
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003a4c:	2400      	movs	r4, #0
 8003a4e:	2500      	movs	r5, #0
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003a50:	4818      	ldr	r0, [pc, #96]	@ (8003ab4 <MX_TIM1_Init+0x154>)
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003a52:	9317      	str	r3, [sp, #92]	@ 0x5c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003a54:	a910      	add	r1, sp, #64	@ 0x40
  sBreakDeadTimeConfig.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 8003a56:	e9cd 3212 	strd	r3, r2, [sp, #72]	@ 0x48
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003a5a:	e9cd 4514 	strd	r4, r5, [sp, #80]	@ 0x50
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003a5e:	f001 ff93 	bl	8005988 <HAL_TIMEx_ConfigBreakDeadTime>
 8003a62:	b970      	cbnz	r0, 8003a82 <MX_TIM1_Init+0x122>
  HAL_TIM_MspPostInit(&htim1);
 8003a64:	4813      	ldr	r0, [pc, #76]	@ (8003ab4 <MX_TIM1_Init+0x154>)
 8003a66:	f7ff ff35 	bl	80038d4 <HAL_TIM_MspPostInit>
}
 8003a6a:	b019      	add	sp, #100	@ 0x64
 8003a6c:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8003a6e:	f7fd fac7 	bl	8001000 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003a72:	4810      	ldr	r0, [pc, #64]	@ (8003ab4 <MX_TIM1_Init+0x154>)
 8003a74:	f001 fc60 	bl	8005338 <HAL_TIM_PWM_Init>
 8003a78:	2800      	cmp	r0, #0
 8003a7a:	d09f      	beq.n	80039bc <MX_TIM1_Init+0x5c>
    Error_Handler();
 8003a7c:	f7fd fac0 	bl	8001000 <Error_Handler>
 8003a80:	e79c      	b.n	80039bc <MX_TIM1_Init+0x5c>
    Error_Handler();
 8003a82:	f7fd fabd 	bl	8001000 <Error_Handler>
  HAL_TIM_MspPostInit(&htim1);
 8003a86:	480b      	ldr	r0, [pc, #44]	@ (8003ab4 <MX_TIM1_Init+0x154>)
 8003a88:	f7ff ff24 	bl	80038d4 <HAL_TIM_MspPostInit>
}
 8003a8c:	b019      	add	sp, #100	@ 0x64
 8003a8e:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8003a90:	f7fd fab6 	bl	8001000 <Error_Handler>
 8003a94:	e7d2      	b.n	8003a3c <MX_TIM1_Init+0xdc>
    Error_Handler();
 8003a96:	f7fd fab3 	bl	8001000 <Error_Handler>
 8003a9a:	e7c4      	b.n	8003a26 <MX_TIM1_Init+0xc6>
    Error_Handler();
 8003a9c:	f7fd fab0 	bl	8001000 <Error_Handler>
 8003aa0:	e7ba      	b.n	8003a18 <MX_TIM1_Init+0xb8>
    Error_Handler();
 8003aa2:	f7fd faad 	bl	8001000 <Error_Handler>
 8003aa6:	e7b0      	b.n	8003a0a <MX_TIM1_Init+0xaa>
    Error_Handler();
 8003aa8:	f7fd faaa 	bl	8001000 <Error_Handler>
 8003aac:	e79a      	b.n	80039e4 <MX_TIM1_Init+0x84>
    Error_Handler();
 8003aae:	f7fd faa7 	bl	8001000 <Error_Handler>
 8003ab2:	e78d      	b.n	80039d0 <MX_TIM1_Init+0x70>
 8003ab4:	20001748 	.word	0x20001748
 8003ab8:	40010000 	.word	0x40010000

08003abc <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003abc:	b510      	push	{r4, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003abe:	480b      	ldr	r0, [pc, #44]	@ (8003aec <MX_USART2_UART_Init+0x30>)
 8003ac0:	4c0b      	ldr	r4, [pc, #44]	@ (8003af0 <MX_USART2_UART_Init+0x34>)
  huart2.Init.BaudRate = 921600;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003ac2:	2300      	movs	r3, #0
  huart2.Init.BaudRate = 921600;
 8003ac4:	f44f 2161 	mov.w	r1, #921600	@ 0xe1000
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003ac8:	220c      	movs	r2, #12
  huart2.Init.BaudRate = 921600;
 8003aca:	e9c0 4100 	strd	r4, r1, [r0]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003ace:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003ad2:	e9c0 3204 	strd	r3, r2, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ad6:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003ada:	f001 ff7f 	bl	80059dc <HAL_UART_Init>
 8003ade:	b900      	cbnz	r0, 8003ae2 <MX_USART2_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003ae0:	bd10      	pop	{r4, pc}
 8003ae2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8003ae6:	f7fd ba8b 	b.w	8001000 <Error_Handler>
 8003aea:	bf00      	nop
 8003aec:	20001850 	.word	0x20001850
 8003af0:	40004400 	.word	0x40004400

08003af4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003af4:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(uartHandle->Instance==USART2)
 8003af6:	4b32      	ldr	r3, [pc, #200]	@ (8003bc0 <HAL_UART_MspInit+0xcc>)
 8003af8:	6802      	ldr	r2, [r0, #0]
{
 8003afa:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003afc:	2400      	movs	r4, #0
  if(uartHandle->Instance==USART2)
 8003afe:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b00:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8003b04:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8003b08:	9406      	str	r4, [sp, #24]
  if(uartHandle->Instance==USART2)
 8003b0a:	d001      	beq.n	8003b10 <HAL_UART_MspInit+0x1c>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003b0c:	b008      	add	sp, #32
 8003b0e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8003b10:	f503 33fa 	add.w	r3, r3, #128000	@ 0x1f400
 8003b14:	9400      	str	r4, [sp, #0]
 8003b16:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003b18:	4e2a      	ldr	r6, [pc, #168]	@ (8003bc4 <HAL_UART_MspInit+0xd0>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8003b1a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8003b1e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003b20:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b22:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8003b26:	9200      	str	r2, [sp, #0]
 8003b28:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b2a:	9401      	str	r4, [sp, #4]
 8003b2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b2e:	f042 0201 	orr.w	r2, r2, #1
 8003b32:	631a      	str	r2, [r3, #48]	@ 0x30
 8003b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b36:	f003 0301 	and.w	r3, r3, #1
 8003b3a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8003b3c:	220c      	movs	r2, #12
 8003b3e:	2302      	movs	r3, #2
 8003b40:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003b44:	4605      	mov	r5, r0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003b46:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b48:	481f      	ldr	r0, [pc, #124]	@ (8003bc8 <HAL_UART_MspInit+0xd4>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003b4a:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b4c:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b4e:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b50:	f000 fca8 	bl	80044a4 <HAL_GPIO_Init>
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003b54:	4a1d      	ldr	r2, [pc, #116]	@ (8003bcc <HAL_UART_MspInit+0xd8>)
 8003b56:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003b5a:	e9c6 2300 	strd	r2, r3, [r6]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003b5e:	4630      	mov	r0, r6
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003b60:	f44f 6380 	mov.w	r3, #1024	@ 0x400
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b64:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b68:	e9c6 3404 	strd	r3, r4, [r6, #16]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003b6c:	e9c6 4406 	strd	r4, r4, [r6, #24]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003b70:	e9c6 4408 	strd	r4, r4, [r6, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003b74:	f000 fc00 	bl	8004378 <HAL_DMA_Init>
 8003b78:	b9d8      	cbnz	r0, 8003bb2 <HAL_UART_MspInit+0xbe>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003b7a:	4c15      	ldr	r4, [pc, #84]	@ (8003bd0 <HAL_UART_MspInit+0xdc>)
 8003b7c:	4915      	ldr	r1, [pc, #84]	@ (8003bd4 <HAL_UART_MspInit+0xe0>)
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8003b7e:	63ee      	str	r6, [r5, #60]	@ 0x3c
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003b80:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b84:	2300      	movs	r3, #0
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003b86:	e9c4 1200 	strd	r1, r2, [r4]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003b8a:	4620      	mov	r0, r4
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003b8c:	2140      	movs	r1, #64	@ 0x40
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003b8e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b92:	e9c4 1302 	strd	r1, r3, [r4, #8]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b96:	e9c4 3305 	strd	r3, r3, [r4, #20]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003b9a:	e9c4 3307 	strd	r3, r3, [r4, #28]
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8003b9e:	63b5      	str	r5, [r6, #56]	@ 0x38
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003ba0:	6122      	str	r2, [r4, #16]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003ba2:	6263      	str	r3, [r4, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003ba4:	f000 fbe8 	bl	8004378 <HAL_DMA_Init>
 8003ba8:	b930      	cbnz	r0, 8003bb8 <HAL_UART_MspInit+0xc4>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8003baa:	63ac      	str	r4, [r5, #56]	@ 0x38
 8003bac:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 8003bae:	b008      	add	sp, #32
 8003bb0:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8003bb2:	f7fd fa25 	bl	8001000 <Error_Handler>
 8003bb6:	e7e0      	b.n	8003b7a <HAL_UART_MspInit+0x86>
      Error_Handler();
 8003bb8:	f7fd fa22 	bl	8001000 <Error_Handler>
 8003bbc:	e7f5      	b.n	8003baa <HAL_UART_MspInit+0xb6>
 8003bbe:	bf00      	nop
 8003bc0:	40004400 	.word	0x40004400
 8003bc4:	200017f0 	.word	0x200017f0
 8003bc8:	40020000 	.word	0x40020000
 8003bcc:	40026088 	.word	0x40026088
 8003bd0:	20001790 	.word	0x20001790
 8003bd4:	400260a0 	.word	0x400260a0

08003bd8 <UASPEP_INIT>:
  }
  else
  {
#endif
    /* Enable DMA UART */
    LL_USART_ClearFlag_TC(pHandle->USARTx);
 8003bd8:	6802      	ldr	r2, [r0, #0]
 8003bda:	4611      	mov	r1, r2
 8003bdc:	f06f 0340 	mvn.w	r3, #64	@ 0x40
{
 8003be0:	b470      	push	{r4, r5, r6}
 8003be2:	f841 3b0c 	str.w	r3, [r1], #12
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be6:	e851 3f00 	ldrex	r3, [r1]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 8003bea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bee:	e841 3400 	strex	r4, r3, [r1]
 8003bf2:	2c00      	cmp	r4, #0
 8003bf4:	d1f7      	bne.n	8003be6 <UASPEP_INIT+0xe>
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8003bf6:	f102 0114 	add.w	r1, r2, #20
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bfa:	e851 3f00 	ldrex	r3, [r1]
 8003bfe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c02:	e841 3400 	strex	r4, r3, [r1]
 8003c06:	2c00      	cmp	r4, #0
 8003c08:	d1f7      	bne.n	8003bfa <UASPEP_INIT+0x22>
  * @param  PeriphAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t PeriphAddress)
{
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 8003c0a:	6901      	ldr	r1, [r0, #16]
 8003c0c:	4e16      	ldr	r6, [pc, #88]	@ (8003c68 <UASPEP_INIT+0x90>)
 8003c0e:	6883      	ldr	r3, [r0, #8]
 8003c10:	5c74      	ldrb	r4, [r6, r1]
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 8003c12:	6845      	ldr	r5, [r0, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 8003c14:	4423      	add	r3, r4
    LL_USART_EnableDMAReq_TX(pHandle->USARTx);

    /* Write the USART_TDR register address in the DMA control register to configure it as
     * the destination of the transfer */
    //cstat !MISRAC2012-Rule-11.4
    LL_DMA_SetPeriphAddress(pHandle->txDMA, pHandle->txChannel, (uint32_t)&pHandle->USARTx->DR);
 8003c16:	1d11      	adds	r1, r2, #4
 8003c18:	6099      	str	r1, [r3, #8]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 8003c1a:	68c3      	ldr	r3, [r0, #12]
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 8003c1c:	4611      	mov	r1, r2
 8003c1e:	f06f 0440 	mvn.w	r4, #64	@ 0x40
 8003c22:	f841 4b14 	str.w	r4, [r1], #20
 8003c26:	5cf4      	ldrb	r4, [r6, r3]
 8003c28:	592b      	ldr	r3, [r5, r4]
 8003c2a:	f043 0310 	orr.w	r3, r3, #16
 8003c2e:	512b      	str	r3, [r5, r4]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c30:	e851 3f00 	ldrex	r3, [r1]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8003c34:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c38:	e841 3400 	strex	r4, r3, [r1]
 8003c3c:	2c00      	cmp	r4, #0
 8003c3e:	d1f7      	bne.n	8003c30 <UASPEP_INIT+0x58>
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 8003c40:	68c3      	ldr	r3, [r0, #12]
 8003c42:	5cf3      	ldrb	r3, [r6, r3]
 8003c44:	441d      	add	r5, r3
    LL_USART_EnableIT_ERROR(pHandle->USARTx);

    /* Write the USART_RDR register address in the DMA control register to configure it as
     * the source of the transfer */
    //cstat !MISRAC2012-Rule-11.4
    LL_DMA_SetPeriphAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)&pHandle->USARTx->DR);
 8003c46:	1d11      	adds	r1, r2, #4
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 8003c48:	f06f 0340 	mvn.w	r3, #64	@ 0x40
 8003c4c:	60a9      	str	r1, [r5, #8]
 8003c4e:	f842 3b14 	str.w	r3, [r2], #20
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c52:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8003c56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c5a:	e842 3100 	strex	r1, r3, [r2]
 8003c5e:	2900      	cmp	r1, #0
 8003c60:	d1f7      	bne.n	8003c52 <UASPEP_INIT+0x7a>
}
 8003c62:	bc70      	pop	{r4, r5, r6}
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	08007828 	.word	0x08007828

08003c6c <UASPEP_SEND_PACKET>:
  * @param  pHWHandle Hardware components chosen for communication
  * @param  data Data to be transmitted to controller
  * @param  length Length of the data to be transmitted
  */
bool UASPEP_SEND_PACKET(void *pHWHandle, void *data, uint16_t length)
{
 8003c6c:	b4f0      	push	{r4, r5, r6, r7}
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *)pHWHandle; //cstat !MISRAC2012-Rule-11.5
  bool result;
  if (0U == LL_DMA_IsEnabledStream(pHandle->txDMA, pHandle->txChannel))
 8003c6e:	6905      	ldr	r5, [r0, #16]
  return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN) == (DMA_SxCR_EN));
 8003c70:	4e1b      	ldr	r6, [pc, #108]	@ (8003ce0 <UASPEP_SEND_PACKET+0x74>)
 8003c72:	6884      	ldr	r4, [r0, #8]
 8003c74:	5d73      	ldrb	r3, [r6, r5]
 8003c76:	58e7      	ldr	r7, [r4, r3]
 8003c78:	07ff      	lsls	r7, r7, #31
 8003c7a:	4423      	add	r3, r4
 8003c7c:	d422      	bmi.n	8003cc4 <UASPEP_SEND_PACKET+0x58>
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 8003c7e:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 8003c80:	6859      	ldr	r1, [r3, #4]
 8003c82:	0c09      	lsrs	r1, r1, #16
 8003c84:	0409      	lsls	r1, r1, #16
 8003c86:	430a      	orrs	r2, r1
 8003c88:	605a      	str	r2, [r3, #4]
  if (NULL == DMAx)
 8003c8a:	b1ac      	cbz	r4, 8003cb8 <UASPEP_SEND_PACKET+0x4c>
    register __IO uint32_t *preg = __DMA_PTR_REG_OFFSET(DMAx->LIFCR,(Stream<=3)?0:1);
 8003c8c:	2d03      	cmp	r5, #3
 8003c8e:	bf94      	ite	ls
 8003c90:	2200      	movls	r2, #0
 8003c92:	2201      	movhi	r2, #1
    WRITE_REG (*preg, 1 << __LL_DMA_IT_TC_BIT(Stream));
 8003c94:	f015 0503 	ands.w	r5, r5, #3
    register __IO uint32_t *preg = __DMA_PTR_REG_OFFSET(DMAx->LIFCR,(Stream<=3)?0:1);
 8003c98:	f104 0308 	add.w	r3, r4, #8
    WRITE_REG (*preg, 1 << __LL_DMA_IT_TC_BIT(Stream));
 8003c9c:	d015      	beq.n	8003cca <UASPEP_SEND_PACKET+0x5e>
 8003c9e:	2d01      	cmp	r5, #1
 8003ca0:	d01a      	beq.n	8003cd8 <UASPEP_SEND_PACKET+0x6c>
 8003ca2:	2d02      	cmp	r5, #2
 8003ca4:	bf14      	ite	ne
 8003ca6:	f04f 6100 	movne.w	r1, #134217728	@ 0x8000000
 8003caa:	f44f 1100 	moveq.w	r1, #2097152	@ 0x200000
 8003cae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8003cb2:	6903      	ldr	r3, [r0, #16]
 8003cb4:	5cf3      	ldrb	r3, [r6, r3]
 8003cb6:	4423      	add	r3, r4
 8003cb8:	681a      	ldr	r2, [r3, #0]
    //cstat !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6
    LL_DMA_SetMemoryAddress(pHandle->txDMA, pHandle->txChannel, (uint32_t)data);
    LL_DMA_SetDataLength(pHandle->txDMA, pHandle->txChannel, length);
    LL_DMA_ClearFlag_TC(pHandle->txDMA, pHandle->txChannel);
    LL_DMA_EnableStream(pHandle->txDMA, pHandle->txChannel);
    result = true;
 8003cba:	2001      	movs	r0, #1
 8003cbc:	4302      	orrs	r2, r0
  else
  {
    result = false;
  }
  return (result);
}
 8003cbe:	bcf0      	pop	{r4, r5, r6, r7}
 8003cc0:	601a      	str	r2, [r3, #0]
 8003cc2:	4770      	bx	lr
    result = false;
 8003cc4:	2000      	movs	r0, #0
}
 8003cc6:	bcf0      	pop	{r4, r5, r6, r7}
 8003cc8:	4770      	bx	lr
 8003cca:	2120      	movs	r1, #32
 8003ccc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003cd0:	6903      	ldr	r3, [r0, #16]
 8003cd2:	5cf3      	ldrb	r3, [r6, r3]
 8003cd4:	4423      	add	r3, r4
 8003cd6:	e7ef      	b.n	8003cb8 <UASPEP_SEND_PACKET+0x4c>
 8003cd8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003cdc:	e7f6      	b.n	8003ccc <UASPEP_SEND_PACKET+0x60>
 8003cde:	bf00      	nop
 8003ce0:	08007828 	.word	0x08007828

08003ce4 <UASPEP_RECEIVE_BUFFER>:
  * @param  pHWHandle Hardware components chosen for communication
  * @param  buffer Buffer which will receive the communicated data
  * @param  length Length of the received data
  */
void UASPEP_RECEIVE_BUFFER(void *pHWHandle, void* buffer, uint16_t length)
{
 8003ce4:	b430      	push	{r4, r5}
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 8003ce6:	68c3      	ldr	r3, [r0, #12]
 8003ce8:	4d09      	ldr	r5, [pc, #36]	@ (8003d10 <UASPEP_RECEIVE_BUFFER+0x2c>)
 8003cea:	6844      	ldr	r4, [r0, #4]
 8003cec:	5ce8      	ldrb	r0, [r5, r3]
 8003cee:	eb04 0c00 	add.w	ip, r4, r0
 8003cf2:	f8cc 100c 	str.w	r1, [ip, #12]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 8003cf6:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8003cfa:	0c1b      	lsrs	r3, r3, #16
 8003cfc:	041b      	lsls	r3, r3, #16
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	f8cc 3004 	str.w	r3, [ip, #4]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8003d04:	5823      	ldr	r3, [r4, r0]
 8003d06:	f043 0301 	orr.w	r3, r3, #1
 8003d0a:	5023      	str	r3, [r4, r0]
  //cstat !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6
  LL_DMA_SetMemoryAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)buffer);
  LL_DMA_SetDataLength(pHandle->rxDMA, pHandle->rxChannel, length);

  LL_DMA_EnableStream(pHandle->rxDMA, pHandle->rxChannel);
}
 8003d0c:	bc30      	pop	{r4, r5}
 8003d0e:	4770      	bx	lr
 8003d10:	08007828 	.word	0x08007828

08003d14 <UASPEP_IDLE_ENABLE>:
  * @param  pHandle Handler of the current instance of the UASPEP component
  */
void UASPEP_IDLE_ENABLE(void *pHWHandle)
{
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *)pHWHandle; //cstat !MISRAC2012-Rule-11.5
  LL_USART_ClearFlag_IDLE(pHandle->USARTx);
 8003d14:	6802      	ldr	r2, [r0, #0]
{
 8003d16:	b082      	sub	sp, #8
  tmpreg = USARTx->SR;
 8003d18:	6813      	ldr	r3, [r2, #0]
 8003d1a:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8003d1c:	9b01      	ldr	r3, [sp, #4]
  tmpreg = USARTx->DR;
 8003d1e:	6853      	ldr	r3, [r2, #4]
 8003d20:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8003d22:	9b01      	ldr	r3, [sp, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8003d24:	320c      	adds	r2, #12
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d26:	e852 3f00 	ldrex	r3, [r2]
 8003d2a:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d2e:	e842 3100 	strex	r1, r3, [r2]
 8003d32:	2900      	cmp	r1, #0
 8003d34:	d1f7      	bne.n	8003d26 <UASPEP_IDLE_ENABLE+0x12>
  LL_USART_EnableIT_IDLE(pHandle->USARTx);
}
 8003d36:	b002      	add	sp, #8
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop

08003d3c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003d3c:	4a03      	ldr	r2, [pc, #12]	@ (8003d4c <SystemInit+0x10>)
 8003d3e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8003d42:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003d46:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003d4a:	4770      	bx	lr
 8003d4c:	e000ed00 	.word	0xe000ed00

08003d50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d50:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003d52:	4a0e      	ldr	r2, [pc, #56]	@ (8003d8c <HAL_InitTick+0x3c>)
 8003d54:	4b0e      	ldr	r3, [pc, #56]	@ (8003d90 <HAL_InitTick+0x40>)
 8003d56:	7812      	ldrb	r2, [r2, #0]
 8003d58:	681b      	ldr	r3, [r3, #0]
{
 8003d5a:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003d5c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003d60:	fbb0 f0f2 	udiv	r0, r0, r2
 8003d64:	fbb3 f0f0 	udiv	r0, r3, r0
 8003d68:	f000 fae6 	bl	8004338 <HAL_SYSTICK_Config>
 8003d6c:	b908      	cbnz	r0, 8003d72 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d6e:	2d0f      	cmp	r5, #15
 8003d70:	d901      	bls.n	8003d76 <HAL_InitTick+0x26>
    return HAL_ERROR;
 8003d72:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8003d74:	bd38      	pop	{r3, r4, r5, pc}
 8003d76:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d78:	4602      	mov	r2, r0
 8003d7a:	4629      	mov	r1, r5
 8003d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d80:	f000 fa90 	bl	80042a4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003d84:	4b03      	ldr	r3, [pc, #12]	@ (8003d94 <HAL_InitTick+0x44>)
 8003d86:	4620      	mov	r0, r4
 8003d88:	601d      	str	r5, [r3, #0]
}
 8003d8a:	bd38      	pop	{r3, r4, r5, pc}
 8003d8c:	200003a0 	.word	0x200003a0
 8003d90:	2000039c 	.word	0x2000039c
 8003d94:	200003a4 	.word	0x200003a4

08003d98 <HAL_Init>:
{
 8003d98:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003d9a:	4b0b      	ldr	r3, [pc, #44]	@ (8003dc8 <HAL_Init+0x30>)
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003da2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003daa:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003db2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003db4:	2003      	movs	r0, #3
 8003db6:	f000 fa63 	bl	8004280 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8003dba:	2004      	movs	r0, #4
 8003dbc:	f7ff ffc8 	bl	8003d50 <HAL_InitTick>
  HAL_MspInit();
 8003dc0:	f7ff fbce 	bl	8003560 <HAL_MspInit>
}
 8003dc4:	2000      	movs	r0, #0
 8003dc6:	bd08      	pop	{r3, pc}
 8003dc8:	40023c00 	.word	0x40023c00

08003dcc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003dcc:	4a03      	ldr	r2, [pc, #12]	@ (8003ddc <HAL_IncTick+0x10>)
 8003dce:	4b04      	ldr	r3, [pc, #16]	@ (8003de0 <HAL_IncTick+0x14>)
 8003dd0:	6811      	ldr	r1, [r2, #0]
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	440b      	add	r3, r1
 8003dd6:	6013      	str	r3, [r2, #0]
}
 8003dd8:	4770      	bx	lr
 8003dda:	bf00      	nop
 8003ddc:	20001898 	.word	0x20001898
 8003de0:	200003a0 	.word	0x200003a0

08003de4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003de4:	4b01      	ldr	r3, [pc, #4]	@ (8003dec <HAL_GetTick+0x8>)
 8003de6:	6818      	ldr	r0, [r3, #0]
}
 8003de8:	4770      	bx	lr
 8003dea:	bf00      	nop
 8003dec:	20001898 	.word	0x20001898

08003df0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003df0:	b538      	push	{r3, r4, r5, lr}
 8003df2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003df4:	f7ff fff6 	bl	8003de4 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003df8:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8003dfa:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8003dfc:	d002      	beq.n	8003e04 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8003dfe:	4b04      	ldr	r3, [pc, #16]	@ (8003e10 <HAL_Delay+0x20>)
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003e04:	f7ff ffee 	bl	8003de4 <HAL_GetTick>
 8003e08:	1b40      	subs	r0, r0, r5
 8003e0a:	42a0      	cmp	r0, r4
 8003e0c:	d3fa      	bcc.n	8003e04 <HAL_Delay+0x14>
  {
  }
}
 8003e0e:	bd38      	pop	{r3, r4, r5, pc}
 8003e10:	200003a0 	.word	0x200003a0

08003e14 <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;

  /* Check ADC handle */
  if (hadc == NULL)
 8003e14:	2800      	cmp	r0, #0
 8003e16:	f000 809e 	beq.w	8003f56 <HAL_ADC_Init+0x142>
{
 8003e1a:	b538      	push	{r3, r4, r5, lr}
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003e1c:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 8003e1e:	4604      	mov	r4, r0
 8003e20:	b13d      	cbz	r5, 8003e32 <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003e22:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003e24:	06db      	lsls	r3, r3, #27
 8003e26:	d50c      	bpl.n	8003e42 <HAL_ADC_Init+0x2e>
  {
    tmp_hal_status = HAL_ERROR;
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003e28:	2300      	movs	r3, #0
 8003e2a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    tmp_hal_status = HAL_ERROR;
 8003e2e:	2001      	movs	r0, #1

  /* Return function status */
  return tmp_hal_status;
}
 8003e30:	bd38      	pop	{r3, r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 8003e32:	f7fc fbf9 	bl	8000628 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8003e36:	6465      	str	r5, [r4, #68]	@ 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003e38:	6c23      	ldr	r3, [r4, #64]	@ 0x40
    hadc->Lock = HAL_UNLOCKED;
 8003e3a:	f884 503c 	strb.w	r5, [r4, #60]	@ 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003e3e:	06db      	lsls	r3, r3, #27
 8003e40:	d4f2      	bmi.n	8003e28 <HAL_ADC_Init+0x14>
    ADC_STATE_CLR_SET(hadc->State,
 8003e42:	6c23      	ldr	r3, [r4, #64]	@ 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003e44:	4a47      	ldr	r2, [pc, #284]	@ (8003f64 <HAL_ADC_Init+0x150>)
    ADC_STATE_CLR_SET(hadc->State,
 8003e46:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003e4a:	f023 0302 	bic.w	r3, r3, #2
 8003e4e:	f043 0302 	orr.w	r3, r3, #2
 8003e52:	6423      	str	r3, [r4, #64]	@ 0x40
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003e54:	6851      	ldr	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003e56:	6823      	ldr	r3, [r4, #0]
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003e58:	f421 3140 	bic.w	r1, r1, #196608	@ 0x30000
 8003e5c:	6051      	str	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003e5e:	6851      	ldr	r1, [r2, #4]
 8003e60:	6860      	ldr	r0, [r4, #4]
 8003e62:	4301      	orrs	r1, r0
 8003e64:	6051      	str	r1, [r2, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003e66:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003e68:	6920      	ldr	r0, [r4, #16]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003e6a:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003e6c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003e70:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003e72:	685a      	ldr	r2, [r3, #4]
 8003e74:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8003e78:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003e7a:	685a      	ldr	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003e7c:	68e0      	ldr	r0, [r4, #12]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003e7e:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003e82:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003e84:	685a      	ldr	r2, [r3, #4]
 8003e86:	430a      	orrs	r2, r1
 8003e88:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003e8a:	689a      	ldr	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003e8c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003e8e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e92:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003e94:	689a      	ldr	r2, [r3, #8]
 8003e96:	4302      	orrs	r2, r0
 8003e98:	609a      	str	r2, [r3, #8]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003e9a:	4a33      	ldr	r2, [pc, #204]	@ (8003f68 <HAL_ADC_Init+0x154>)
 8003e9c:	4291      	cmp	r1, r2
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003e9e:	689a      	ldr	r2, [r3, #8]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003ea0:	d051      	beq.n	8003f46 <HAL_ADC_Init+0x132>
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003ea2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003ea6:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003ea8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003eaa:	689a      	ldr	r2, [r3, #8]
 8003eac:	4311      	orrs	r1, r2
 8003eae:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003eb0:	689a      	ldr	r2, [r3, #8]
 8003eb2:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003eb6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003eb8:	689a      	ldr	r2, [r3, #8]
 8003eba:	4302      	orrs	r2, r0
 8003ebc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003ebe:	689a      	ldr	r2, [r3, #8]
 8003ec0:	f022 0202 	bic.w	r2, r2, #2
 8003ec4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003ec6:	689a      	ldr	r2, [r3, #8]
 8003ec8:	7e21      	ldrb	r1, [r4, #24]
 8003eca:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8003ece:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003ed0:	f894 2020 	ldrb.w	r2, [r4, #32]
 8003ed4:	2a00      	cmp	r2, #0
 8003ed6:	d040      	beq.n	8003f5a <HAL_ADC_Init+0x146>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003ed8:	685a      	ldr	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003eda:	6a61      	ldr	r1, [r4, #36]	@ 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003edc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ee0:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003ee2:	685a      	ldr	r2, [r3, #4]
 8003ee4:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003ee8:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003eea:	685a      	ldr	r2, [r3, #4]
 8003eec:	3901      	subs	r1, #1
 8003eee:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8003ef2:	605a      	str	r2, [r3, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003ef4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003ef6:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003ef8:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003efc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003efe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f00:	3901      	subs	r1, #1
 8003f02:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8003f06:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003f08:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003f0a:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003f0c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003f10:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003f12:	689a      	ldr	r2, [r3, #8]
 8003f14:	f894 0030 	ldrb.w	r0, [r4, #48]	@ 0x30
 8003f18:	ea42 2240 	orr.w	r2, r2, r0, lsl #9
 8003f1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003f1e:	689a      	ldr	r2, [r3, #8]
 8003f20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f24:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003f26:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8003f28:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003f2a:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8003f2e:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8003f30:	6460      	str	r0, [r4, #68]	@ 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8003f32:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003f34:	f023 0303 	bic.w	r3, r3, #3
 8003f38:	f043 0301 	orr.w	r3, r3, #1
 8003f3c:	6423      	str	r3, [r4, #64]	@ 0x40
  __HAL_UNLOCK(hadc);
 8003f3e:	2300      	movs	r3, #0
 8003f40:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8003f44:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003f46:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003f4a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003f4c:	689a      	ldr	r2, [r3, #8]
 8003f4e:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003f52:	609a      	str	r2, [r3, #8]
 8003f54:	e7b3      	b.n	8003ebe <HAL_ADC_Init+0xaa>
    return HAL_ERROR;
 8003f56:	2001      	movs	r0, #1
}
 8003f58:	4770      	bx	lr
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003f5a:	685a      	ldr	r2, [r3, #4]
 8003f5c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f60:	605a      	str	r2, [r3, #4]
 8003f62:	e7c7      	b.n	8003ef4 <HAL_ADC_Init+0xe0>
 8003f64:	40012300 	.word	0x40012300
 8003f68:	0f000001 	.word	0x0f000001

08003f6c <HAL_ADC_ConfigChannel>:
{
 8003f6c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 8003f6e:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 8003f72:	b082      	sub	sp, #8
 8003f74:	4602      	mov	r2, r0
  __HAL_LOCK(hadc);
 8003f76:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 8003f78:	f04f 0000 	mov.w	r0, #0
 8003f7c:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8003f7e:	f000 809e 	beq.w	80040be <HAL_ADC_ConfigChannel+0x152>
 8003f82:	2301      	movs	r3, #1
 8003f84:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003f88:	680d      	ldr	r5, [r1, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003f8a:	6813      	ldr	r3, [r2, #0]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003f8c:	688c      	ldr	r4, [r1, #8]
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003f8e:	2d09      	cmp	r5, #9
 8003f90:	b2a8      	uxth	r0, r5
 8003f92:	d828      	bhi.n	8003fe6 <HAL_ADC_ConfigChannel+0x7a>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003f94:	691e      	ldr	r6, [r3, #16]
 8003f96:	eb05 0e45 	add.w	lr, r5, r5, lsl #1
 8003f9a:	f04f 0c07 	mov.w	ip, #7
 8003f9e:	fa0c fc0e 	lsl.w	ip, ip, lr
 8003fa2:	ea26 060c 	bic.w	r6, r6, ip
 8003fa6:	611e      	str	r6, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003fa8:	691e      	ldr	r6, [r3, #16]
 8003faa:	fa04 f40e 	lsl.w	r4, r4, lr
 8003fae:	4334      	orrs	r4, r6
 8003fb0:	611c      	str	r4, [r3, #16]
  if (sConfig->Rank < 7U)
 8003fb2:	684c      	ldr	r4, [r1, #4]
 8003fb4:	2c06      	cmp	r4, #6
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003fb6:	eb04 0184 	add.w	r1, r4, r4, lsl #2
  if (sConfig->Rank < 7U)
 8003fba:	d82a      	bhi.n	8004012 <HAL_ADC_ConfigChannel+0xa6>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003fbc:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 8003fbe:	3905      	subs	r1, #5
 8003fc0:	f04f 0c1f 	mov.w	ip, #31
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003fc4:	4088      	lsls	r0, r1
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003fc6:	fa0c f101 	lsl.w	r1, ip, r1
 8003fca:	ea24 0101 	bic.w	r1, r4, r1
 8003fce:	6359      	str	r1, [r3, #52]	@ 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003fd0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003fd2:	4308      	orrs	r0, r1
 8003fd4:	6358      	str	r0, [r3, #52]	@ 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003fd6:	493b      	ldr	r1, [pc, #236]	@ (80040c4 <HAL_ADC_ConfigChannel+0x158>)
 8003fd8:	428b      	cmp	r3, r1
 8003fda:	d02b      	beq.n	8004034 <HAL_ADC_ConfigChannel+0xc8>
  __HAL_UNLOCK(hadc);
 8003fdc:	2000      	movs	r0, #0
 8003fde:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c
}
 8003fe2:	b002      	add	sp, #8
 8003fe4:	bd70      	pop	{r4, r5, r6, pc}
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003fe6:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
 8003fea:	68de      	ldr	r6, [r3, #12]
 8003fec:	f1ac 0c1e 	sub.w	ip, ip, #30
 8003ff0:	f04f 0e07 	mov.w	lr, #7
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003ff4:	fa04 f40c 	lsl.w	r4, r4, ip
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003ff8:	fa0e fc0c 	lsl.w	ip, lr, ip
 8003ffc:	ea26 060c 	bic.w	r6, r6, ip
 8004000:	60de      	str	r6, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004002:	68de      	ldr	r6, [r3, #12]
 8004004:	4334      	orrs	r4, r6
 8004006:	60dc      	str	r4, [r3, #12]
  if (sConfig->Rank < 7U)
 8004008:	684c      	ldr	r4, [r1, #4]
 800400a:	2c06      	cmp	r4, #6
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800400c:	eb04 0184 	add.w	r1, r4, r4, lsl #2
  if (sConfig->Rank < 7U)
 8004010:	d9d4      	bls.n	8003fbc <HAL_ADC_ConfigChannel+0x50>
  else if (sConfig->Rank < 13U)
 8004012:	2c0c      	cmp	r4, #12
 8004014:	d81f      	bhi.n	8004056 <HAL_ADC_ConfigChannel+0xea>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004016:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 8004018:	3923      	subs	r1, #35	@ 0x23
 800401a:	261f      	movs	r6, #31
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800401c:	4088      	lsls	r0, r1
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800401e:	fa06 f101 	lsl.w	r1, r6, r1
 8004022:	ea24 0101 	bic.w	r1, r4, r1
 8004026:	6319      	str	r1, [r3, #48]	@ 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004028:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800402a:	4308      	orrs	r0, r1
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800402c:	4925      	ldr	r1, [pc, #148]	@ (80040c4 <HAL_ADC_ConfigChannel+0x158>)
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800402e:	6318      	str	r0, [r3, #48]	@ 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004030:	428b      	cmp	r3, r1
 8004032:	d1d3      	bne.n	8003fdc <HAL_ADC_ConfigChannel+0x70>
 8004034:	2d12      	cmp	r5, #18
 8004036:	d01b      	beq.n	8004070 <HAL_ADC_ConfigChannel+0x104>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004038:	4b23      	ldr	r3, [pc, #140]	@ (80040c8 <HAL_ADC_ConfigChannel+0x15c>)
 800403a:	429d      	cmp	r5, r3
 800403c:	d022      	beq.n	8004084 <HAL_ADC_ConfigChannel+0x118>
 800403e:	2d11      	cmp	r5, #17
 8004040:	d1cc      	bne.n	8003fdc <HAL_ADC_ConfigChannel+0x70>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004042:	4b22      	ldr	r3, [pc, #136]	@ (80040cc <HAL_ADC_ConfigChannel+0x160>)
 8004044:	6859      	ldr	r1, [r3, #4]
 8004046:	f421 0180 	bic.w	r1, r1, #4194304	@ 0x400000
 800404a:	6059      	str	r1, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800404c:	6859      	ldr	r1, [r3, #4]
 800404e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8004052:	6059      	str	r1, [r3, #4]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004054:	e7c2      	b.n	8003fdc <HAL_ADC_ConfigChannel+0x70>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004056:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8004058:	3941      	subs	r1, #65	@ 0x41
 800405a:	261f      	movs	r6, #31
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800405c:	4088      	lsls	r0, r1
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800405e:	fa06 f101 	lsl.w	r1, r6, r1
 8004062:	ea24 0101 	bic.w	r1, r4, r1
 8004066:	62d9      	str	r1, [r3, #44]	@ 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004068:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800406a:	4308      	orrs	r0, r1
 800406c:	62d8      	str	r0, [r3, #44]	@ 0x2c
 800406e:	e7b2      	b.n	8003fd6 <HAL_ADC_ConfigChannel+0x6a>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004070:	4b16      	ldr	r3, [pc, #88]	@ (80040cc <HAL_ADC_ConfigChannel+0x160>)
 8004072:	6859      	ldr	r1, [r3, #4]
 8004074:	f421 0100 	bic.w	r1, r1, #8388608	@ 0x800000
 8004078:	6059      	str	r1, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800407a:	6859      	ldr	r1, [r3, #4]
 800407c:	f441 0180 	orr.w	r1, r1, #4194304	@ 0x400000
 8004080:	6059      	str	r1, [r3, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004082:	e7ab      	b.n	8003fdc <HAL_ADC_ConfigChannel+0x70>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004084:	4b11      	ldr	r3, [pc, #68]	@ (80040cc <HAL_ADC_ConfigChannel+0x160>)
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004086:	4c12      	ldr	r4, [pc, #72]	@ (80040d0 <HAL_ADC_ConfigChannel+0x164>)
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004088:	6859      	ldr	r1, [r3, #4]
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800408a:	4812      	ldr	r0, [pc, #72]	@ (80040d4 <HAL_ADC_ConfigChannel+0x168>)
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800408c:	f421 0180 	bic.w	r1, r1, #4194304	@ 0x400000
 8004090:	6059      	str	r1, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004092:	6859      	ldr	r1, [r3, #4]
 8004094:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8004098:	6059      	str	r1, [r3, #4]
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800409a:	6823      	ldr	r3, [r4, #0]
 800409c:	fba0 0303 	umull	r0, r3, r0, r3
 80040a0:	0c9b      	lsrs	r3, r3, #18
 80040a2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80040a6:	005b      	lsls	r3, r3, #1
 80040a8:	9301      	str	r3, [sp, #4]
      while (counter != 0U)
 80040aa:	9b01      	ldr	r3, [sp, #4]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d095      	beq.n	8003fdc <HAL_ADC_ConfigChannel+0x70>
        counter--;
 80040b0:	9b01      	ldr	r3, [sp, #4]
 80040b2:	3b01      	subs	r3, #1
 80040b4:	9301      	str	r3, [sp, #4]
      while (counter != 0U)
 80040b6:	9b01      	ldr	r3, [sp, #4]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d1f9      	bne.n	80040b0 <HAL_ADC_ConfigChannel+0x144>
 80040bc:	e78e      	b.n	8003fdc <HAL_ADC_ConfigChannel+0x70>
  __HAL_LOCK(hadc);
 80040be:	2002      	movs	r0, #2
}
 80040c0:	b002      	add	sp, #8
 80040c2:	bd70      	pop	{r4, r5, r6, pc}
 80040c4:	40012000 	.word	0x40012000
 80040c8:	10000012 	.word	0x10000012
 80040cc:	40012300 	.word	0x40012300
 80040d0:	2000039c 	.word	0x2000039c
 80040d4:	431bde83 	.word	0x431bde83

080040d8 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 80040d8:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80040da:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
  if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80040de:	698d      	ldr	r5, [r1, #24]
  __HAL_LOCK(hadc);
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	f000 80c2 	beq.w	800426a <HAL_ADCEx_InjectedConfigChannel+0x192>
 80040e6:	2301      	movs	r3, #1
 80040e8:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 80040ec:	680c      	ldr	r4, [r1, #0]
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 80040ee:	6803      	ldr	r3, [r0, #0]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 80040f0:	688a      	ldr	r2, [r1, #8]
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 80040f2:	2c09      	cmp	r4, #9
 80040f4:	4684      	mov	ip, r0
 80040f6:	b2a0      	uxth	r0, r4
 80040f8:	d861      	bhi.n	80041be <HAL_ADCEx_InjectedConfigChannel+0xe6>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 80040fa:	691e      	ldr	r6, [r3, #16]
 80040fc:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 8004100:	2707      	movs	r7, #7
 8004102:	fa07 f70e 	lsl.w	r7, r7, lr
 8004106:	ea26 0607 	bic.w	r6, r6, r7
 800410a:	611e      	str	r6, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 800410c:	691e      	ldr	r6, [r3, #16]
 800410e:	fa02 f20e 	lsl.w	r2, r2, lr
 8004112:	4332      	orrs	r2, r6
 8004114:	611a      	str	r2, [r3, #16]
  }

  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8004116:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8004118:	690f      	ldr	r7, [r1, #16]

  /* Rank configuration */

  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 800411a:	684e      	ldr	r6, [r1, #4]
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 800411c:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8004120:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8004122:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004124:	f107 3eff 	add.w	lr, r7, #4294967295
 8004128:	ea42 520e 	orr.w	r2, r2, lr, lsl #20
 800412c:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 800412e:	1cf2      	adds	r2, r6, #3
 8004130:	1bd2      	subs	r2, r2, r7
 8004132:	b2d2      	uxtb	r2, r2
 8004134:	6b9f      	ldr	r7, [r3, #56]	@ 0x38
 8004136:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800413a:	f04f 0e1f 	mov.w	lr, #31

  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 800413e:	4090      	lsls	r0, r2
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 8004140:	fa0e f202 	lsl.w	r2, lr, r2
 8004144:	ea27 0202 	bic.w	r2, r7, r2
 8004148:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 800414a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800414c:	4310      	orrs	r0, r2
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800414e:	4a48      	ldr	r2, [pc, #288]	@ (8004270 <HAL_ADCEx_InjectedConfigChannel+0x198>)
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 8004150:	6398      	str	r0, [r3, #56]	@ 0x38
  if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004152:	4295      	cmp	r5, r2
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8004154:	689a      	ldr	r2, [r3, #8]
 8004156:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
 800415a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 800415c:	689a      	ldr	r2, [r3, #8]
  if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800415e:	d065      	beq.n	800422c <HAL_ADCEx_InjectedConfigChannel+0x154>
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8004160:	4315      	orrs	r5, r2
 8004162:	609d      	str	r5, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8004164:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8004166:	69c8      	ldr	r0, [r1, #28]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8004168:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 800416c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 800416e:	689a      	ldr	r2, [r3, #8]
 8004170:	4302      	orrs	r2, r0
 8004172:	609a      	str	r2, [r3, #8]
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
  }

  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8004174:	7d4a      	ldrb	r2, [r1, #21]
 8004176:	2a00      	cmp	r2, #0
 8004178:	d031      	beq.n	80041de <HAL_ADCEx_InjectedConfigChannel+0x106>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 800417a:	685a      	ldr	r2, [r3, #4]
 800417c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004180:	605a      	str	r2, [r3, #4]
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
  }

  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8004182:	7d0a      	ldrb	r2, [r1, #20]
 8004184:	2a00      	cmp	r2, #0
 8004186:	d031      	beq.n	80041ec <HAL_ADCEx_InjectedConfigChannel+0x114>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8004188:	685a      	ldr	r2, [r3, #4]
 800418a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800418e:	605a      	str	r2, [r3, #4]
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
  }

  switch (sConfigInjected->InjectedRank)
 8004190:	2e02      	cmp	r6, #2
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8004192:	68ca      	ldr	r2, [r1, #12]
  switch (sConfigInjected->InjectedRank)
 8004194:	d031      	beq.n	80041fa <HAL_ADCEx_InjectedConfigChannel+0x122>
 8004196:	2e03      	cmp	r6, #3
 8004198:	d056      	beq.n	8004248 <HAL_ADCEx_InjectedConfigChannel+0x170>
 800419a:	2e01      	cmp	r6, #1
 800419c:	d04a      	beq.n	8004234 <HAL_ADCEx_InjectedConfigChannel+0x15c>
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
      break;
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 800419e:	6a19      	ldr	r1, [r3, #32]
 80041a0:	f421 617f 	bic.w	r1, r1, #4080	@ 0xff0
 80041a4:	f021 010f 	bic.w	r1, r1, #15
 80041a8:	6219      	str	r1, [r3, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 80041aa:	6a19      	ldr	r1, [r3, #32]
 80041ac:	430a      	orrs	r2, r1
 80041ae:	621a      	str	r2, [r3, #32]
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 80041b0:	4a30      	ldr	r2, [pc, #192]	@ (8004274 <HAL_ADCEx_InjectedConfigChannel+0x19c>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d02d      	beq.n	8004212 <HAL_ADCEx_InjectedConfigChannel+0x13a>
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80041b6:	2000      	movs	r0, #0
 80041b8:	f88c 003c 	strb.w	r0, [ip, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
}
 80041bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 80041be:	eb00 0640 	add.w	r6, r0, r0, lsl #1
 80041c2:	68df      	ldr	r7, [r3, #12]
 80041c4:	3e1e      	subs	r6, #30
 80041c6:	f04f 0e07 	mov.w	lr, #7
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 80041ca:	40b2      	lsls	r2, r6
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 80041cc:	fa0e f606 	lsl.w	r6, lr, r6
 80041d0:	ea27 0606 	bic.w	r6, r7, r6
 80041d4:	60de      	str	r6, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 80041d6:	68de      	ldr	r6, [r3, #12]
 80041d8:	4332      	orrs	r2, r6
 80041da:	60da      	str	r2, [r3, #12]
 80041dc:	e79b      	b.n	8004116 <HAL_ADCEx_InjectedConfigChannel+0x3e>
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 80041de:	685a      	ldr	r2, [r3, #4]
 80041e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041e4:	605a      	str	r2, [r3, #4]
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 80041e6:	7d0a      	ldrb	r2, [r1, #20]
 80041e8:	2a00      	cmp	r2, #0
 80041ea:	d1cd      	bne.n	8004188 <HAL_ADCEx_InjectedConfigChannel+0xb0>
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 80041ec:	685a      	ldr	r2, [r3, #4]
 80041ee:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80041f2:	605a      	str	r2, [r3, #4]
  switch (sConfigInjected->InjectedRank)
 80041f4:	2e02      	cmp	r6, #2
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 80041f6:	68ca      	ldr	r2, [r1, #12]
  switch (sConfigInjected->InjectedRank)
 80041f8:	d1cd      	bne.n	8004196 <HAL_ADCEx_InjectedConfigChannel+0xbe>
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 80041fa:	6999      	ldr	r1, [r3, #24]
 80041fc:	f421 617f 	bic.w	r1, r1, #4080	@ 0xff0
 8004200:	f021 010f 	bic.w	r1, r1, #15
 8004204:	6199      	str	r1, [r3, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8004206:	6999      	ldr	r1, [r3, #24]
 8004208:	430a      	orrs	r2, r1
 800420a:	619a      	str	r2, [r3, #24]
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 800420c:	4a19      	ldr	r2, [pc, #100]	@ (8004274 <HAL_ADCEx_InjectedConfigChannel+0x19c>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d1d1      	bne.n	80041b6 <HAL_ADCEx_InjectedConfigChannel+0xde>
 8004212:	2c12      	cmp	r4, #18
 8004214:	d022      	beq.n	800425c <HAL_ADCEx_InjectedConfigChannel+0x184>
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8004216:	4b18      	ldr	r3, [pc, #96]	@ (8004278 <HAL_ADCEx_InjectedConfigChannel+0x1a0>)
 8004218:	429c      	cmp	r4, r3
 800421a:	d001      	beq.n	8004220 <HAL_ADCEx_InjectedConfigChannel+0x148>
 800421c:	2c11      	cmp	r4, #17
 800421e:	d1ca      	bne.n	80041b6 <HAL_ADCEx_InjectedConfigChannel+0xde>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004220:	4a16      	ldr	r2, [pc, #88]	@ (800427c <HAL_ADCEx_InjectedConfigChannel+0x1a4>)
 8004222:	6853      	ldr	r3, [r2, #4]
 8004224:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004228:	6053      	str	r3, [r2, #4]
 800422a:	e7c4      	b.n	80041b6 <HAL_ADCEx_InjectedConfigChannel+0xde>
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 800422c:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8004230:	609a      	str	r2, [r3, #8]
 8004232:	e79f      	b.n	8004174 <HAL_ADCEx_InjectedConfigChannel+0x9c>
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8004234:	6959      	ldr	r1, [r3, #20]
 8004236:	f421 617f 	bic.w	r1, r1, #4080	@ 0xff0
 800423a:	f021 010f 	bic.w	r1, r1, #15
 800423e:	6159      	str	r1, [r3, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8004240:	6959      	ldr	r1, [r3, #20]
 8004242:	430a      	orrs	r2, r1
 8004244:	615a      	str	r2, [r3, #20]
      break;
 8004246:	e7b3      	b.n	80041b0 <HAL_ADCEx_InjectedConfigChannel+0xd8>
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8004248:	69d9      	ldr	r1, [r3, #28]
 800424a:	f421 617f 	bic.w	r1, r1, #4080	@ 0xff0
 800424e:	f021 010f 	bic.w	r1, r1, #15
 8004252:	61d9      	str	r1, [r3, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8004254:	69d9      	ldr	r1, [r3, #28]
 8004256:	430a      	orrs	r2, r1
 8004258:	61da      	str	r2, [r3, #28]
      break;
 800425a:	e7a9      	b.n	80041b0 <HAL_ADCEx_InjectedConfigChannel+0xd8>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800425c:	f8d2 3304 	ldr.w	r3, [r2, #772]	@ 0x304
 8004260:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004264:	f8c2 3304 	str.w	r3, [r2, #772]	@ 0x304
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8004268:	e7a5      	b.n	80041b6 <HAL_ADCEx_InjectedConfigChannel+0xde>
  __HAL_LOCK(hadc);
 800426a:	2002      	movs	r0, #2
}
 800426c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800426e:	bf00      	nop
 8004270:	000f0001 	.word	0x000f0001
 8004274:	40012000 	.word	0x40012000
 8004278:	10000012 	.word	0x10000012
 800427c:	40012300 	.word	0x40012300

08004280 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004280:	4907      	ldr	r1, [pc, #28]	@ (80042a0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8004282:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004284:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004286:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800428a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800428e:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004290:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004292:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004296:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 800429a:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop
 80042a0:	e000ed00 	.word	0xe000ed00

080042a4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042a4:	4b1b      	ldr	r3, [pc, #108]	@ (8004314 <HAL_NVIC_SetPriority+0x70>)
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80042ac:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042ae:	f1c3 0e07 	rsb	lr, r3, #7
 80042b2:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042b6:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042ba:	bf28      	it	cs
 80042bc:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042c0:	f1bc 0f06 	cmp.w	ip, #6
 80042c4:	d91c      	bls.n	8004300 <HAL_NVIC_SetPriority+0x5c>
 80042c6:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042ca:	f04f 33ff 	mov.w	r3, #4294967295
 80042ce:	fa03 f30c 	lsl.w	r3, r3, ip
 80042d2:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042d6:	f04f 33ff 	mov.w	r3, #4294967295
 80042da:	fa03 f30e 	lsl.w	r3, r3, lr
 80042de:	ea21 0303 	bic.w	r3, r1, r3
 80042e2:	fa03 f30c 	lsl.w	r3, r3, ip
 80042e6:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042e8:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 80042ea:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042ec:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 80042ee:	db0a      	blt.n	8004306 <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042f0:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 80042f4:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 80042f8:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80042fc:	f85d fb04 	ldr.w	pc, [sp], #4
 8004300:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004302:	4694      	mov	ip, r2
 8004304:	e7e7      	b.n	80042d6 <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004306:	4a04      	ldr	r2, [pc, #16]	@ (8004318 <HAL_NVIC_SetPriority+0x74>)
 8004308:	f000 000f 	and.w	r0, r0, #15
 800430c:	4402      	add	r2, r0
 800430e:	7613      	strb	r3, [r2, #24]
 8004310:	f85d fb04 	ldr.w	pc, [sp], #4
 8004314:	e000ed00 	.word	0xe000ed00
 8004318:	e000ecfc 	.word	0xe000ecfc

0800431c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800431c:	2800      	cmp	r0, #0
 800431e:	db07      	blt.n	8004330 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004320:	4a04      	ldr	r2, [pc, #16]	@ (8004334 <HAL_NVIC_EnableIRQ+0x18>)
 8004322:	0941      	lsrs	r1, r0, #5
 8004324:	2301      	movs	r3, #1
 8004326:	f000 001f 	and.w	r0, r0, #31
 800432a:	4083      	lsls	r3, r0
 800432c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004330:	4770      	bx	lr
 8004332:	bf00      	nop
 8004334:	e000e100 	.word	0xe000e100

08004338 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004338:	3801      	subs	r0, #1
 800433a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800433e:	d301      	bcc.n	8004344 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004340:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8004342:	4770      	bx	lr
{
 8004344:	b410      	push	{r4}
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004346:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800434a:	4c07      	ldr	r4, [pc, #28]	@ (8004368 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800434c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800434e:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 8004352:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004356:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004358:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800435a:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800435c:	619a      	str	r2, [r3, #24]
}
 800435e:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004362:	6119      	str	r1, [r3, #16]
 8004364:	4770      	bx	lr
 8004366:	bf00      	nop
 8004368:	e000ed00 	.word	0xe000ed00

0800436c <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800436c:	4770      	bx	lr
 800436e:	bf00      	nop

08004370 <HAL_SYSTICK_IRQHandler>:
{
 8004370:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8004372:	f7ff fffb 	bl	800436c <HAL_SYSTICK_Callback>
}
 8004376:	bd08      	pop	{r3, pc}

08004378 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004378:	b538      	push	{r3, r4, r5, lr}
 800437a:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 800437c:	f7ff fd32 	bl	8003de4 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004380:	2c00      	cmp	r4, #0
 8004382:	d06f      	beq.n	8004464 <HAL_DMA_Init+0xec>

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004384:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 8004386:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_BUSY;
 8004388:	2102      	movs	r1, #2
 800438a:	f884 1035 	strb.w	r1, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 800438e:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	f022 0201 	bic.w	r2, r2, #1
 8004398:	4605      	mov	r5, r0
 800439a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800439c:	e005      	b.n	80043aa <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800439e:	f7ff fd21 	bl	8003de4 <HAL_GetTick>
 80043a2:	1b43      	subs	r3, r0, r5
 80043a4:	2b05      	cmp	r3, #5
 80043a6:	d839      	bhi.n	800441c <HAL_DMA_Init+0xa4>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80043a8:	6823      	ldr	r3, [r4, #0]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	07d1      	lsls	r1, r2, #31
 80043ae:	d4f6      	bmi.n	800439e <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80043b0:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 80043b4:	68e1      	ldr	r1, [r4, #12]
 80043b6:	4302      	orrs	r2, r0
 80043b8:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043ba:	e9d4 5104 	ldrd	r5, r1, [r4, #16]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043be:	69a0      	ldr	r0, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043c0:	432a      	orrs	r2, r5
 80043c2:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043c4:	69e1      	ldr	r1, [r4, #28]
  tmp = hdma->Instance->CR;
 80043c6:	681d      	ldr	r5, [r3, #0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043c8:	4302      	orrs	r2, r0
 80043ca:	430a      	orrs	r2, r1
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80043cc:	4932      	ldr	r1, [pc, #200]	@ (8004498 <HAL_DMA_Init+0x120>)
 80043ce:	4029      	ands	r1, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 80043d0:	6a25      	ldr	r5, [r4, #32]
 80043d2:	432a      	orrs	r2, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80043d4:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80043d6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80043d8:	2904      	cmp	r1, #4
 80043da:	d026      	beq.n	800442a <HAL_DMA_Init+0xb2>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80043dc:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80043de:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80043e0:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80043e4:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80043e6:	b2d8      	uxtb	r0, r3
 80043e8:	4a2c      	ldr	r2, [pc, #176]	@ (800449c <HAL_DMA_Init+0x124>)
  hdma->Instance->FCR = tmp;
 80043ea:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80043ec:	3810      	subs	r0, #16
 80043ee:	fba2 5200 	umull	r5, r2, r2, r0
 80043f2:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80043f4:	492a      	ldr	r1, [pc, #168]	@ (80044a0 <HAL_DMA_Init+0x128>)
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80043f6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80043fa:	5c89      	ldrb	r1, [r1, r2]
 80043fc:	65e1      	str	r1, [r4, #92]	@ 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80043fe:	f023 0303 	bic.w	r3, r3, #3
  if (stream_number > 3U)
 8004402:	285f      	cmp	r0, #95	@ 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004404:	bf88      	it	hi
 8004406:	3304      	addhi	r3, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004408:	223f      	movs	r2, #63	@ 0x3f
 800440a:	408a      	lsls	r2, r1
 800440c:	65a3      	str	r3, [r4, #88]	@ 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800440e:	2000      	movs	r0, #0
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004410:	609a      	str	r2, [r3, #8]
  hdma->State = HAL_DMA_STATE_READY;
 8004412:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004414:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8004416:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
}
 800441a:	bd38      	pop	{r3, r4, r5, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800441c:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800441e:	2220      	movs	r2, #32
 8004420:	6562      	str	r2, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004422:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      return HAL_TIMEOUT;
 8004426:	4618      	mov	r0, r3
}
 8004428:	bd38      	pop	{r3, r4, r5, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800442a:	e9d4 510b 	ldrd	r5, r1, [r4, #44]	@ 0x2c
 800442e:	4329      	orrs	r1, r5
 8004430:	4311      	orrs	r1, r2
  hdma->Instance->CR = tmp;  
 8004432:	6019      	str	r1, [r3, #0]
  tmp = hdma->Instance->FCR;
 8004434:	6959      	ldr	r1, [r3, #20]
    tmp |= hdma->Init.FIFOThreshold;
 8004436:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004438:	f021 0107 	bic.w	r1, r1, #7
 800443c:	4311      	orrs	r1, r2
    tmp |= hdma->Init.FIFOThreshold;
 800443e:	f041 0104 	orr.w	r1, r1, #4
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004442:	2d00      	cmp	r5, #0
 8004444:	d0cf      	beq.n	80043e6 <HAL_DMA_Init+0x6e>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004446:	b178      	cbz	r0, 8004468 <HAL_DMA_Init+0xf0>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004448:	f5b0 5f00 	cmp.w	r0, #8192	@ 0x2000
 800444c:	d016      	beq.n	800447c <HAL_DMA_Init+0x104>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800444e:	2a02      	cmp	r2, #2
 8004450:	d903      	bls.n	800445a <HAL_DMA_Init+0xe2>
 8004452:	2a03      	cmp	r2, #3
 8004454:	d1c7      	bne.n	80043e6 <HAL_DMA_Init+0x6e>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004456:	01ea      	lsls	r2, r5, #7
 8004458:	d5c5      	bpl.n	80043e6 <HAL_DMA_Init+0x6e>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800445a:	2240      	movs	r2, #64	@ 0x40
        hdma->State = HAL_DMA_STATE_READY;
 800445c:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800445e:	6562      	str	r2, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8004460:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    return HAL_ERROR;
 8004464:	2001      	movs	r0, #1
}
 8004466:	bd38      	pop	{r3, r4, r5, pc}
    switch (tmp)
 8004468:	2a01      	cmp	r2, #1
 800446a:	d003      	beq.n	8004474 <HAL_DMA_Init+0xfc>
 800446c:	f032 0202 	bics.w	r2, r2, #2
 8004470:	d1b9      	bne.n	80043e6 <HAL_DMA_Init+0x6e>
 8004472:	e7f0      	b.n	8004456 <HAL_DMA_Init+0xde>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004474:	f1b5 7fc0 	cmp.w	r5, #25165824	@ 0x1800000
 8004478:	d1b5      	bne.n	80043e6 <HAL_DMA_Init+0x6e>
 800447a:	e7ee      	b.n	800445a <HAL_DMA_Init+0xe2>
    switch (tmp)
 800447c:	2a03      	cmp	r2, #3
 800447e:	d8b2      	bhi.n	80043e6 <HAL_DMA_Init+0x6e>
 8004480:	a001      	add	r0, pc, #4	@ (adr r0, 8004488 <HAL_DMA_Init+0x110>)
 8004482:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8004486:	bf00      	nop
 8004488:	0800445b 	.word	0x0800445b
 800448c:	08004457 	.word	0x08004457
 8004490:	0800445b 	.word	0x0800445b
 8004494:	08004475 	.word	0x08004475
 8004498:	f010803f 	.word	0xf010803f
 800449c:	aaaaaaab 	.word	0xaaaaaaab
 80044a0:	08007848 	.word	0x08007848

080044a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044a8:	2300      	movs	r3, #0
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80044aa:	680c      	ldr	r4, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044ac:	f8df a200 	ldr.w	sl, [pc, #512]	@ 80046b0 <HAL_GPIO_Init+0x20c>
{
 80044b0:	b085      	sub	sp, #20
    ioposition = 0x01U << position;
 80044b2:	f04f 0b01 	mov.w	fp, #1

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80044b6:	4689      	mov	r9, r1
 80044b8:	e003      	b.n	80044c2 <HAL_GPIO_Init+0x1e>
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044ba:	3301      	adds	r3, #1
 80044bc:	2b10      	cmp	r3, #16
 80044be:	f000 808c 	beq.w	80045da <HAL_GPIO_Init+0x136>
    ioposition = 0x01U << position;
 80044c2:	fa0b f203 	lsl.w	r2, fp, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80044c6:	ea02 0804 	and.w	r8, r2, r4
    if(iocurrent == ioposition)
 80044ca:	43a2      	bics	r2, r4
 80044cc:	d1f5      	bne.n	80044ba <HAL_GPIO_Init+0x16>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80044ce:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80044d2:	f001 0203 	and.w	r2, r1, #3
 80044d6:	ea4f 0c43 	mov.w	ip, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80044da:	2503      	movs	r5, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80044dc:	1e57      	subs	r7, r2, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80044de:	fa05 f50c 	lsl.w	r5, r5, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80044e2:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80044e4:	ea6f 0505 	mvn.w	r5, r5
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80044e8:	d97a      	bls.n	80045e0 <HAL_GPIO_Init+0x13c>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80044ea:	2a03      	cmp	r2, #3
 80044ec:	f040 80b1 	bne.w	8004652 <HAL_GPIO_Init+0x1ae>
      temp = GPIOx->MODER;
 80044f0:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80044f2:	fa02 f20c 	lsl.w	r2, r2, ip
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80044f6:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80044f8:	432a      	orrs	r2, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80044fa:	f411 3f40 	tst.w	r1, #196608	@ 0x30000
      GPIOx->MODER = temp;
 80044fe:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004500:	d0db      	beq.n	80044ba <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004502:	2200      	movs	r2, #0
 8004504:	9203      	str	r2, [sp, #12]
 8004506:	f8da 2044 	ldr.w	r2, [sl, #68]	@ 0x44
 800450a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800450e:	f8ca 2044 	str.w	r2, [sl, #68]	@ 0x44
 8004512:	f8da 2044 	ldr.w	r2, [sl, #68]	@ 0x44
 8004516:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800451a:	9203      	str	r2, [sp, #12]
 800451c:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 800451e:	f023 0203 	bic.w	r2, r3, #3
 8004522:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004526:	f003 0703 	and.w	r7, r3, #3
 800452a:	260f      	movs	r6, #15
 800452c:	f502 329c 	add.w	r2, r2, #79872	@ 0x13800
 8004530:	00bf      	lsls	r7, r7, #2
 8004532:	fa06 fc07 	lsl.w	ip, r6, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004536:	4e5b      	ldr	r6, [pc, #364]	@ (80046a4 <HAL_GPIO_Init+0x200>)
        temp = SYSCFG->EXTICR[position >> 2U];
 8004538:	6895      	ldr	r5, [r2, #8]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800453a:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800453c:	ea25 050c 	bic.w	r5, r5, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004540:	d022      	beq.n	8004588 <HAL_GPIO_Init+0xe4>
 8004542:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8004546:	42b0      	cmp	r0, r6
 8004548:	f000 808e 	beq.w	8004668 <HAL_GPIO_Init+0x1c4>
 800454c:	4e56      	ldr	r6, [pc, #344]	@ (80046a8 <HAL_GPIO_Init+0x204>)
 800454e:	42b0      	cmp	r0, r6
 8004550:	f000 8090 	beq.w	8004674 <HAL_GPIO_Init+0x1d0>
 8004554:	f8df c15c 	ldr.w	ip, [pc, #348]	@ 80046b4 <HAL_GPIO_Init+0x210>
 8004558:	4560      	cmp	r0, ip
 800455a:	f000 8091 	beq.w	8004680 <HAL_GPIO_Init+0x1dc>
 800455e:	f8df c158 	ldr.w	ip, [pc, #344]	@ 80046b8 <HAL_GPIO_Init+0x214>
 8004562:	4560      	cmp	r0, ip
 8004564:	f000 8092 	beq.w	800468c <HAL_GPIO_Init+0x1e8>
 8004568:	f8df c150 	ldr.w	ip, [pc, #336]	@ 80046bc <HAL_GPIO_Init+0x218>
 800456c:	4560      	cmp	r0, ip
 800456e:	f000 8093 	beq.w	8004698 <HAL_GPIO_Init+0x1f4>
 8004572:	f8df c14c 	ldr.w	ip, [pc, #332]	@ 80046c0 <HAL_GPIO_Init+0x21c>
 8004576:	4560      	cmp	r0, ip
 8004578:	bf0c      	ite	eq
 800457a:	f04f 0c06 	moveq.w	ip, #6
 800457e:	f04f 0c07 	movne.w	ip, #7
 8004582:	fa0c f707 	lsl.w	r7, ip, r7
 8004586:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004588:	6095      	str	r5, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800458a:	4a48      	ldr	r2, [pc, #288]	@ (80046ac <HAL_GPIO_Init+0x208>)
 800458c:	6892      	ldr	r2, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800458e:	02ce      	lsls	r6, r1, #11
        temp &= ~((uint32_t)iocurrent);
 8004590:	ea6f 0508 	mvn.w	r5, r8
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8004594:	4e45      	ldr	r6, [pc, #276]	@ (80046ac <HAL_GPIO_Init+0x208>)
        temp &= ~((uint32_t)iocurrent);
 8004596:	bf54      	ite	pl
 8004598:	402a      	andpl	r2, r5
          temp |= iocurrent;
 800459a:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->RTSR = temp;
 800459e:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR;
 80045a0:	68f2      	ldr	r2, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 80045a2:	4e42      	ldr	r6, [pc, #264]	@ (80046ac <HAL_GPIO_Init+0x208>)
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80045a4:	028f      	lsls	r7, r1, #10
        temp &= ~((uint32_t)iocurrent);
 80045a6:	bf54      	ite	pl
 80045a8:	402a      	andpl	r2, r5
          temp |= iocurrent;
 80045aa:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->FTSR = temp;
 80045ae:	60f2      	str	r2, [r6, #12]

        temp = EXTI->EMR;
 80045b0:	6872      	ldr	r2, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80045b2:	038e      	lsls	r6, r1, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 80045b4:	4e3d      	ldr	r6, [pc, #244]	@ (80046ac <HAL_GPIO_Init+0x208>)
        temp &= ~((uint32_t)iocurrent);
 80045b6:	bf54      	ite	pl
 80045b8:	402a      	andpl	r2, r5
          temp |= iocurrent;
 80045ba:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->EMR = temp;
 80045be:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80045c0:	6832      	ldr	r2, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80045c2:	03c9      	lsls	r1, r1, #15
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045c4:	f103 0301 	add.w	r3, r3, #1
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 80045c8:	4938      	ldr	r1, [pc, #224]	@ (80046ac <HAL_GPIO_Init+0x208>)
        temp &= ~((uint32_t)iocurrent);
 80045ca:	bf54      	ite	pl
 80045cc:	402a      	andpl	r2, r5
          temp |= iocurrent;
 80045ce:	ea48 0202 	orrmi.w	r2, r8, r2
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045d2:	2b10      	cmp	r3, #16
        EXTI->IMR = temp;
 80045d4:	600a      	str	r2, [r1, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045d6:	f47f af74 	bne.w	80044c2 <HAL_GPIO_Init+0x1e>
      }
    }
  }
}
 80045da:	b005      	add	sp, #20
 80045dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 80045e0:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80045e2:	ea07 0e05 	and.w	lr, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80045e6:	f8d9 700c 	ldr.w	r7, [r9, #12]
 80045ea:	fa07 f70c 	lsl.w	r7, r7, ip
 80045ee:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 80045f2:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80045f4:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80045f6:	ea27 0e08 	bic.w	lr, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045fa:	f3c1 1700 	ubfx	r7, r1, #4, #1
 80045fe:	409f      	lsls	r7, r3
 8004600:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8004604:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8004606:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004608:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800460c:	f8d9 7008 	ldr.w	r7, [r9, #8]
 8004610:	fa07 f70c 	lsl.w	r7, r7, ip
 8004614:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004618:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 800461a:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800461c:	f47f af68 	bne.w	80044f0 <HAL_GPIO_Init+0x4c>
        temp = GPIOx->AFR[position >> 3U];
 8004620:	08df      	lsrs	r7, r3, #3
 8004622:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8004626:	9701      	str	r7, [sp, #4]
 8004628:	6a3e      	ldr	r6, [r7, #32]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800462a:	f8d9 7010 	ldr.w	r7, [r9, #16]
        temp = GPIOx->AFR[position >> 3U];
 800462e:	9600      	str	r6, [sp, #0]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004630:	f003 0e07 	and.w	lr, r3, #7
 8004634:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8004638:	260f      	movs	r6, #15
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800463a:	fa07 f70e 	lsl.w	r7, r7, lr
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800463e:	fa06 fe0e 	lsl.w	lr, r6, lr
 8004642:	9e00      	ldr	r6, [sp, #0]
 8004644:	ea26 0e0e 	bic.w	lr, r6, lr
        GPIOx->AFR[position >> 3U] = temp;
 8004648:	9e01      	ldr	r6, [sp, #4]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800464a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 800464e:	6237      	str	r7, [r6, #32]
 8004650:	e74e      	b.n	80044f0 <HAL_GPIO_Init+0x4c>
        temp = GPIOx->PUPDR;
 8004652:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004654:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004658:	f8d9 7008 	ldr.w	r7, [r9, #8]
 800465c:	fa07 f70c 	lsl.w	r7, r7, ip
 8004660:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 8004664:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004666:	e743      	b.n	80044f0 <HAL_GPIO_Init+0x4c>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004668:	f04f 0c01 	mov.w	ip, #1
 800466c:	fa0c f707 	lsl.w	r7, ip, r7
 8004670:	433d      	orrs	r5, r7
 8004672:	e789      	b.n	8004588 <HAL_GPIO_Init+0xe4>
 8004674:	f04f 0c02 	mov.w	ip, #2
 8004678:	fa0c f707 	lsl.w	r7, ip, r7
 800467c:	433d      	orrs	r5, r7
 800467e:	e783      	b.n	8004588 <HAL_GPIO_Init+0xe4>
 8004680:	f04f 0c03 	mov.w	ip, #3
 8004684:	fa0c f707 	lsl.w	r7, ip, r7
 8004688:	433d      	orrs	r5, r7
 800468a:	e77d      	b.n	8004588 <HAL_GPIO_Init+0xe4>
 800468c:	f04f 0c04 	mov.w	ip, #4
 8004690:	fa0c f707 	lsl.w	r7, ip, r7
 8004694:	433d      	orrs	r5, r7
 8004696:	e777      	b.n	8004588 <HAL_GPIO_Init+0xe4>
 8004698:	f04f 0c05 	mov.w	ip, #5
 800469c:	fa0c f707 	lsl.w	r7, ip, r7
 80046a0:	433d      	orrs	r5, r7
 80046a2:	e771      	b.n	8004588 <HAL_GPIO_Init+0xe4>
 80046a4:	40020000 	.word	0x40020000
 80046a8:	40020800 	.word	0x40020800
 80046ac:	40013c00 	.word	0x40013c00
 80046b0:	40023800 	.word	0x40023800
 80046b4:	40020c00 	.word	0x40020c00
 80046b8:	40021000 	.word	0x40021000
 80046bc:	40021400 	.word	0x40021400
 80046c0:	40021800 	.word	0x40021800

080046c4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80046c4:	b902      	cbnz	r2, 80046c8 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80046c6:	0409      	lsls	r1, r1, #16
 80046c8:	6181      	str	r1, [r0, #24]
  }
}
 80046ca:	4770      	bx	lr

080046cc <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80046cc:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80046ce:	ea01 0203 	and.w	r2, r1, r3
 80046d2:	ea21 0103 	bic.w	r1, r1, r3
 80046d6:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80046da:	6181      	str	r1, [r0, #24]
}
 80046dc:	4770      	bx	lr
 80046de:	bf00      	nop

080046e0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80046e0:	b530      	push	{r4, r5, lr}
 80046e2:	b083      	sub	sp, #12
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 80046e4:	4b19      	ldr	r3, [pc, #100]	@ (800474c <HAL_PWREx_EnableOverDrive+0x6c>)
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80046e6:	491a      	ldr	r1, [pc, #104]	@ (8004750 <HAL_PWREx_EnableOverDrive+0x70>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80046e8:	4d1a      	ldr	r5, [pc, #104]	@ (8004754 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80046ea:	2200      	movs	r2, #0
 80046ec:	9201      	str	r2, [sp, #4]
 80046ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80046f0:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80046f4:	641a      	str	r2, [r3, #64]	@ 0x40
 80046f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046fc:	9301      	str	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 80046fe:	2201      	movs	r2, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8004700:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004702:	640a      	str	r2, [r1, #64]	@ 0x40
  tickstart = HAL_GetTick();
 8004704:	f7ff fb6e 	bl	8003de4 <HAL_GetTick>
 8004708:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800470a:	e005      	b.n	8004718 <HAL_PWREx_EnableOverDrive+0x38>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800470c:	f7ff fb6a 	bl	8003de4 <HAL_GetTick>
 8004710:	1b00      	subs	r0, r0, r4
 8004712:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8004716:	d816      	bhi.n	8004746 <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004718:	686b      	ldr	r3, [r5, #4]
 800471a:	03da      	lsls	r2, r3, #15
 800471c:	d5f6      	bpl.n	800470c <HAL_PWREx_EnableOverDrive+0x2c>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800471e:	4b0c      	ldr	r3, [pc, #48]	@ (8004750 <HAL_PWREx_EnableOverDrive+0x70>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004720:	4d0c      	ldr	r5, [pc, #48]	@ (8004754 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004722:	2201      	movs	r2, #1
 8004724:	645a      	str	r2, [r3, #68]	@ 0x44
  tickstart = HAL_GetTick();
 8004726:	f7ff fb5d 	bl	8003de4 <HAL_GetTick>
 800472a:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800472c:	e005      	b.n	800473a <HAL_PWREx_EnableOverDrive+0x5a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800472e:	f7ff fb59 	bl	8003de4 <HAL_GetTick>
 8004732:	1b00      	subs	r0, r0, r4
 8004734:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8004738:	d805      	bhi.n	8004746 <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800473a:	686b      	ldr	r3, [r5, #4]
 800473c:	039b      	lsls	r3, r3, #14
 800473e:	d5f6      	bpl.n	800472e <HAL_PWREx_EnableOverDrive+0x4e>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8004740:	2000      	movs	r0, #0
}
 8004742:	b003      	add	sp, #12
 8004744:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 8004746:	2003      	movs	r0, #3
}
 8004748:	b003      	add	sp, #12
 800474a:	bd30      	pop	{r4, r5, pc}
 800474c:	40023800 	.word	0x40023800
 8004750:	420e0000 	.word	0x420e0000
 8004754:	40007000 	.word	0x40007000

08004758 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004758:	2800      	cmp	r0, #0
 800475a:	f000 8087 	beq.w	800486c <HAL_RCC_ClockConfig+0x114>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800475e:	4a48      	ldr	r2, [pc, #288]	@ (8004880 <HAL_RCC_ClockConfig+0x128>)
 8004760:	6813      	ldr	r3, [r2, #0]
 8004762:	f003 030f 	and.w	r3, r3, #15
 8004766:	428b      	cmp	r3, r1
{
 8004768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800476c:	460d      	mov	r5, r1
 800476e:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004770:	d209      	bcs.n	8004786 <HAL_RCC_ClockConfig+0x2e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004772:	b2cb      	uxtb	r3, r1
 8004774:	7013      	strb	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004776:	6813      	ldr	r3, [r2, #0]
 8004778:	f003 030f 	and.w	r3, r3, #15
 800477c:	428b      	cmp	r3, r1
 800477e:	d002      	beq.n	8004786 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8004780:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);

  return HAL_OK;
}
 8004782:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004786:	6823      	ldr	r3, [r4, #0]
 8004788:	0798      	lsls	r0, r3, #30
 800478a:	d514      	bpl.n	80047b6 <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800478c:	0759      	lsls	r1, r3, #29
 800478e:	d504      	bpl.n	800479a <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004790:	493c      	ldr	r1, [pc, #240]	@ (8004884 <HAL_RCC_ClockConfig+0x12c>)
 8004792:	688a      	ldr	r2, [r1, #8]
 8004794:	f442 52e0 	orr.w	r2, r2, #7168	@ 0x1c00
 8004798:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800479a:	071a      	lsls	r2, r3, #28
 800479c:	d504      	bpl.n	80047a8 <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800479e:	4939      	ldr	r1, [pc, #228]	@ (8004884 <HAL_RCC_ClockConfig+0x12c>)
 80047a0:	688a      	ldr	r2, [r1, #8]
 80047a2:	f442 4260 	orr.w	r2, r2, #57344	@ 0xe000
 80047a6:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047a8:	4936      	ldr	r1, [pc, #216]	@ (8004884 <HAL_RCC_ClockConfig+0x12c>)
 80047aa:	68a0      	ldr	r0, [r4, #8]
 80047ac:	688a      	ldr	r2, [r1, #8]
 80047ae:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80047b2:	4302      	orrs	r2, r0
 80047b4:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047b6:	07df      	lsls	r7, r3, #31
 80047b8:	d521      	bpl.n	80047fe <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047ba:	6862      	ldr	r2, [r4, #4]
 80047bc:	2a01      	cmp	r2, #1
 80047be:	d057      	beq.n	8004870 <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047c0:	1e93      	subs	r3, r2, #2
 80047c2:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047c4:	4b2f      	ldr	r3, [pc, #188]	@ (8004884 <HAL_RCC_ClockConfig+0x12c>)
 80047c6:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047c8:	d94d      	bls.n	8004866 <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047ca:	0799      	lsls	r1, r3, #30
 80047cc:	d5d8      	bpl.n	8004780 <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047ce:	4e2d      	ldr	r6, [pc, #180]	@ (8004884 <HAL_RCC_ClockConfig+0x12c>)
 80047d0:	68b3      	ldr	r3, [r6, #8]
 80047d2:	f023 0303 	bic.w	r3, r3, #3
 80047d6:	4313      	orrs	r3, r2
 80047d8:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80047da:	f7ff fb03 	bl	8003de4 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047de:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 80047e2:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047e4:	e004      	b.n	80047f0 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047e6:	f7ff fafd 	bl	8003de4 <HAL_GetTick>
 80047ea:	1bc0      	subs	r0, r0, r7
 80047ec:	4540      	cmp	r0, r8
 80047ee:	d844      	bhi.n	800487a <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047f0:	68b3      	ldr	r3, [r6, #8]
 80047f2:	6862      	ldr	r2, [r4, #4]
 80047f4:	f003 030c 	and.w	r3, r3, #12
 80047f8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80047fc:	d1f3      	bne.n	80047e6 <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047fe:	4a20      	ldr	r2, [pc, #128]	@ (8004880 <HAL_RCC_ClockConfig+0x128>)
 8004800:	6813      	ldr	r3, [r2, #0]
 8004802:	f003 030f 	and.w	r3, r3, #15
 8004806:	42ab      	cmp	r3, r5
 8004808:	d906      	bls.n	8004818 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800480a:	b2eb      	uxtb	r3, r5
 800480c:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800480e:	6813      	ldr	r3, [r2, #0]
 8004810:	f003 030f 	and.w	r3, r3, #15
 8004814:	42ab      	cmp	r3, r5
 8004816:	d1b3      	bne.n	8004780 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004818:	6823      	ldr	r3, [r4, #0]
 800481a:	075a      	lsls	r2, r3, #29
 800481c:	d506      	bpl.n	800482c <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800481e:	4919      	ldr	r1, [pc, #100]	@ (8004884 <HAL_RCC_ClockConfig+0x12c>)
 8004820:	68e0      	ldr	r0, [r4, #12]
 8004822:	688a      	ldr	r2, [r1, #8]
 8004824:	f422 52e0 	bic.w	r2, r2, #7168	@ 0x1c00
 8004828:	4302      	orrs	r2, r0
 800482a:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800482c:	071b      	lsls	r3, r3, #28
 800482e:	d507      	bpl.n	8004840 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004830:	4a14      	ldr	r2, [pc, #80]	@ (8004884 <HAL_RCC_ClockConfig+0x12c>)
 8004832:	6921      	ldr	r1, [r4, #16]
 8004834:	6893      	ldr	r3, [r2, #8]
 8004836:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800483a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800483e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004840:	f000 f84e 	bl	80048e0 <HAL_RCC_GetSysClockFreq>
 8004844:	4a0f      	ldr	r2, [pc, #60]	@ (8004884 <HAL_RCC_ClockConfig+0x12c>)
 8004846:	4c10      	ldr	r4, [pc, #64]	@ (8004888 <HAL_RCC_ClockConfig+0x130>)
 8004848:	6892      	ldr	r2, [r2, #8]
 800484a:	4910      	ldr	r1, [pc, #64]	@ (800488c <HAL_RCC_ClockConfig+0x134>)
 800484c:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8004850:	4603      	mov	r3, r0
 8004852:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 8004854:	480e      	ldr	r0, [pc, #56]	@ (8004890 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004856:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 8004858:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800485a:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 800485c:	f7ff fa78 	bl	8003d50 <HAL_InitTick>
  return HAL_OK;
 8004860:	2000      	movs	r0, #0
}
 8004862:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004866:	0198      	lsls	r0, r3, #6
 8004868:	d4b1      	bmi.n	80047ce <HAL_RCC_ClockConfig+0x76>
 800486a:	e789      	b.n	8004780 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 800486c:	2001      	movs	r0, #1
}
 800486e:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004870:	4b04      	ldr	r3, [pc, #16]	@ (8004884 <HAL_RCC_ClockConfig+0x12c>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	039e      	lsls	r6, r3, #14
 8004876:	d4aa      	bmi.n	80047ce <HAL_RCC_ClockConfig+0x76>
 8004878:	e782      	b.n	8004780 <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 800487a:	2003      	movs	r0, #3
 800487c:	e781      	b.n	8004782 <HAL_RCC_ClockConfig+0x2a>
 800487e:	bf00      	nop
 8004880:	40023c00 	.word	0x40023c00
 8004884:	40023800 	.word	0x40023800
 8004888:	08007838 	.word	0x08007838
 800488c:	2000039c 	.word	0x2000039c
 8004890:	200003a4 	.word	0x200003a4

08004894 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8004894:	4b01      	ldr	r3, [pc, #4]	@ (800489c <HAL_RCC_GetHCLKFreq+0x8>)
}
 8004896:	6818      	ldr	r0, [r3, #0]
 8004898:	4770      	bx	lr
 800489a:	bf00      	nop
 800489c:	2000039c 	.word	0x2000039c

080048a0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80048a0:	4b04      	ldr	r3, [pc, #16]	@ (80048b4 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 80048a2:	4905      	ldr	r1, [pc, #20]	@ (80048b8 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	4a05      	ldr	r2, [pc, #20]	@ (80048bc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80048a8:	6808      	ldr	r0, [r1, #0]
 80048aa:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80048ae:	5cd3      	ldrb	r3, [r2, r3]
}
 80048b0:	40d8      	lsrs	r0, r3
 80048b2:	4770      	bx	lr
 80048b4:	40023800 	.word	0x40023800
 80048b8:	2000039c 	.word	0x2000039c
 80048bc:	08007830 	.word	0x08007830

080048c0 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80048c0:	4b04      	ldr	r3, [pc, #16]	@ (80048d4 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 80048c2:	4905      	ldr	r1, [pc, #20]	@ (80048d8 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	4a05      	ldr	r2, [pc, #20]	@ (80048dc <HAL_RCC_GetPCLK2Freq+0x1c>)
 80048c8:	6808      	ldr	r0, [r1, #0]
 80048ca:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80048ce:	5cd3      	ldrb	r3, [r2, r3]
}
 80048d0:	40d8      	lsrs	r0, r3
 80048d2:	4770      	bx	lr
 80048d4:	40023800 	.word	0x40023800
 80048d8:	2000039c 	.word	0x2000039c
 80048dc:	08007830 	.word	0x08007830

080048e0 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048e0:	4927      	ldr	r1, [pc, #156]	@ (8004980 <HAL_RCC_GetSysClockFreq+0xa0>)
{
 80048e2:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048e4:	688b      	ldr	r3, [r1, #8]
 80048e6:	f003 030c 	and.w	r3, r3, #12
 80048ea:	2b08      	cmp	r3, #8
 80048ec:	d007      	beq.n	80048fe <HAL_RCC_GetSysClockFreq+0x1e>
 80048ee:	2b0c      	cmp	r3, #12
 80048f0:	d01d      	beq.n	800492e <HAL_RCC_GetSysClockFreq+0x4e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048f2:	4a24      	ldr	r2, [pc, #144]	@ (8004984 <HAL_RCC_GetSysClockFreq+0xa4>)
 80048f4:	4824      	ldr	r0, [pc, #144]	@ (8004988 <HAL_RCC_GetSysClockFreq+0xa8>)
 80048f6:	2b04      	cmp	r3, #4
 80048f8:	bf18      	it	ne
 80048fa:	4610      	movne	r0, r2
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80048fc:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048fe:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004900:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004902:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004904:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004908:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800490c:	d12e      	bne.n	800496c <HAL_RCC_GetSysClockFreq+0x8c>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800490e:	481d      	ldr	r0, [pc, #116]	@ (8004984 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004910:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8004914:	fba1 0100 	umull	r0, r1, r1, r0
 8004918:	f7fb fc76 	bl	8000208 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800491c:	4b18      	ldr	r3, [pc, #96]	@ (8004980 <HAL_RCC_GetSysClockFreq+0xa0>)
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8004924:	3301      	adds	r3, #1
 8004926:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8004928:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800492c:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800492e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004930:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004932:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004934:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004938:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800493c:	d10d      	bne.n	800495a <HAL_RCC_GetSysClockFreq+0x7a>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800493e:	4811      	ldr	r0, [pc, #68]	@ (8004984 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004940:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8004944:	fba1 0100 	umull	r0, r1, r1, r0
 8004948:	f7fb fc5e 	bl	8000208 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800494c:	4b0c      	ldr	r3, [pc, #48]	@ (8004980 <HAL_RCC_GetSysClockFreq+0xa0>)
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	f3c3 7302 	ubfx	r3, r3, #28, #3
      sysclockfreq = pllvco/pllr;
 8004954:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8004958:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800495a:	480b      	ldr	r0, [pc, #44]	@ (8004988 <HAL_RCC_GetSysClockFreq+0xa8>)
 800495c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8004960:	2300      	movs	r3, #0
 8004962:	fba1 0100 	umull	r0, r1, r1, r0
 8004966:	f7fb fc4f 	bl	8000208 <__aeabi_uldivmod>
 800496a:	e7ef      	b.n	800494c <HAL_RCC_GetSysClockFreq+0x6c>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800496c:	4806      	ldr	r0, [pc, #24]	@ (8004988 <HAL_RCC_GetSysClockFreq+0xa8>)
 800496e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8004972:	2300      	movs	r3, #0
 8004974:	fba1 0100 	umull	r0, r1, r1, r0
 8004978:	f7fb fc46 	bl	8000208 <__aeabi_uldivmod>
 800497c:	e7ce      	b.n	800491c <HAL_RCC_GetSysClockFreq+0x3c>
 800497e:	bf00      	nop
 8004980:	40023800 	.word	0x40023800
 8004984:	00f42400 	.word	0x00f42400
 8004988:	007a1200 	.word	0x007a1200

0800498c <HAL_RCC_OscConfig>:
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800498c:	2800      	cmp	r0, #0
 800498e:	f000 81fb 	beq.w	8004d88 <HAL_RCC_OscConfig+0x3fc>
{
 8004992:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004996:	6803      	ldr	r3, [r0, #0]
 8004998:	07de      	lsls	r6, r3, #31
{
 800499a:	b082      	sub	sp, #8
 800499c:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800499e:	d536      	bpl.n	8004a0e <HAL_RCC_OscConfig+0x82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80049a0:	49a1      	ldr	r1, [pc, #644]	@ (8004c28 <HAL_RCC_OscConfig+0x29c>)
 80049a2:	688a      	ldr	r2, [r1, #8]
 80049a4:	f002 020c 	and.w	r2, r2, #12
 80049a8:	2a04      	cmp	r2, #4
 80049aa:	f000 80de 	beq.w	8004b6a <HAL_RCC_OscConfig+0x1de>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80049ae:	688a      	ldr	r2, [r1, #8]
 80049b0:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80049b4:	2a08      	cmp	r2, #8
 80049b6:	f000 80d4 	beq.w	8004b62 <HAL_RCC_OscConfig+0x1d6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049ba:	499b      	ldr	r1, [pc, #620]	@ (8004c28 <HAL_RCC_OscConfig+0x29c>)
 80049bc:	688a      	ldr	r2, [r1, #8]
 80049be:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80049c2:	2a0c      	cmp	r2, #12
 80049c4:	f000 8104 	beq.w	8004bd0 <HAL_RCC_OscConfig+0x244>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049c8:	6863      	ldr	r3, [r4, #4]
 80049ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049ce:	f000 8118 	beq.w	8004c02 <HAL_RCC_OscConfig+0x276>
 80049d2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80049d6:	f000 8192 	beq.w	8004cfe <HAL_RCC_OscConfig+0x372>
 80049da:	4d93      	ldr	r5, [pc, #588]	@ (8004c28 <HAL_RCC_OscConfig+0x29c>)
 80049dc:	682a      	ldr	r2, [r5, #0]
 80049de:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80049e2:	602a      	str	r2, [r5, #0]
 80049e4:	682a      	ldr	r2, [r5, #0]
 80049e6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80049ea:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	f040 810d 	bne.w	8004c0c <HAL_RCC_OscConfig+0x280>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049f2:	f7ff f9f7 	bl	8003de4 <HAL_GetTick>
 80049f6:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049f8:	e005      	b.n	8004a06 <HAL_RCC_OscConfig+0x7a>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049fa:	f7ff f9f3 	bl	8003de4 <HAL_GetTick>
 80049fe:	1b80      	subs	r0, r0, r6
 8004a00:	2864      	cmp	r0, #100	@ 0x64
 8004a02:	f200 80fa 	bhi.w	8004bfa <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a06:	682b      	ldr	r3, [r5, #0]
 8004a08:	039f      	lsls	r7, r3, #14
 8004a0a:	d4f6      	bmi.n	80049fa <HAL_RCC_OscConfig+0x6e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a0c:	6823      	ldr	r3, [r4, #0]
 8004a0e:	079d      	lsls	r5, r3, #30
 8004a10:	d52f      	bpl.n	8004a72 <HAL_RCC_OscConfig+0xe6>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004a12:	4a85      	ldr	r2, [pc, #532]	@ (8004c28 <HAL_RCC_OscConfig+0x29c>)
 8004a14:	6891      	ldr	r1, [r2, #8]
 8004a16:	f011 0f0c 	tst.w	r1, #12
 8004a1a:	f000 8099 	beq.w	8004b50 <HAL_RCC_OscConfig+0x1c4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004a1e:	6891      	ldr	r1, [r2, #8]
 8004a20:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004a24:	2908      	cmp	r1, #8
 8004a26:	f000 808f 	beq.w	8004b48 <HAL_RCC_OscConfig+0x1bc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a2a:	497f      	ldr	r1, [pc, #508]	@ (8004c28 <HAL_RCC_OscConfig+0x29c>)
 8004a2c:	688a      	ldr	r2, [r1, #8]
 8004a2e:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004a32:	2a0c      	cmp	r2, #12
 8004a34:	f000 815e 	beq.w	8004cf4 <HAL_RCC_OscConfig+0x368>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a38:	68e3      	ldr	r3, [r4, #12]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	f000 8112 	beq.w	8004c64 <HAL_RCC_OscConfig+0x2d8>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a40:	4b7a      	ldr	r3, [pc, #488]	@ (8004c2c <HAL_RCC_OscConfig+0x2a0>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a42:	4e79      	ldr	r6, [pc, #484]	@ (8004c28 <HAL_RCC_OscConfig+0x29c>)
        __HAL_RCC_HSI_ENABLE();
 8004a44:	2201      	movs	r2, #1
 8004a46:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004a48:	f7ff f9cc 	bl	8003de4 <HAL_GetTick>
 8004a4c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a4e:	e005      	b.n	8004a5c <HAL_RCC_OscConfig+0xd0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a50:	f7ff f9c8 	bl	8003de4 <HAL_GetTick>
 8004a54:	1b40      	subs	r0, r0, r5
 8004a56:	2802      	cmp	r0, #2
 8004a58:	f200 80cf 	bhi.w	8004bfa <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a5c:	6833      	ldr	r3, [r6, #0]
 8004a5e:	079f      	lsls	r7, r3, #30
 8004a60:	d5f6      	bpl.n	8004a50 <HAL_RCC_OscConfig+0xc4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a62:	6833      	ldr	r3, [r6, #0]
 8004a64:	6922      	ldr	r2, [r4, #16]
 8004a66:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8004a6a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004a6e:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a70:	6823      	ldr	r3, [r4, #0]
 8004a72:	071a      	lsls	r2, r3, #28
 8004a74:	d452      	bmi.n	8004b1c <HAL_RCC_OscConfig+0x190>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a76:	075d      	lsls	r5, r3, #29
 8004a78:	d530      	bpl.n	8004adc <HAL_RCC_OscConfig+0x150>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a7a:	4a6b      	ldr	r2, [pc, #428]	@ (8004c28 <HAL_RCC_OscConfig+0x29c>)
 8004a7c:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8004a7e:	f013 5380 	ands.w	r3, r3, #268435456	@ 0x10000000
 8004a82:	f000 8099 	beq.w	8004bb8 <HAL_RCC_OscConfig+0x22c>
    FlagStatus       pwrclkchanged = RESET;
 8004a86:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a88:	4e69      	ldr	r6, [pc, #420]	@ (8004c30 <HAL_RCC_OscConfig+0x2a4>)
 8004a8a:	6833      	ldr	r3, [r6, #0]
 8004a8c:	05d8      	lsls	r0, r3, #23
 8004a8e:	f140 80a4 	bpl.w	8004bda <HAL_RCC_OscConfig+0x24e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a92:	68a3      	ldr	r3, [r4, #8]
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	f000 80cd 	beq.w	8004c34 <HAL_RCC_OscConfig+0x2a8>
 8004a9a:	2b05      	cmp	r3, #5
 8004a9c:	f000 8139 	beq.w	8004d12 <HAL_RCC_OscConfig+0x386>
 8004aa0:	4e61      	ldr	r6, [pc, #388]	@ (8004c28 <HAL_RCC_OscConfig+0x29c>)
 8004aa2:	6f32      	ldr	r2, [r6, #112]	@ 0x70
 8004aa4:	f022 0201 	bic.w	r2, r2, #1
 8004aa8:	6732      	str	r2, [r6, #112]	@ 0x70
 8004aaa:	6f32      	ldr	r2, [r6, #112]	@ 0x70
 8004aac:	f022 0204 	bic.w	r2, r2, #4
 8004ab0:	6732      	str	r2, [r6, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	f040 80c3 	bne.w	8004c3e <HAL_RCC_OscConfig+0x2b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ab8:	f7ff f994 	bl	8003de4 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004abc:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8004ac0:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ac2:	e005      	b.n	8004ad0 <HAL_RCC_OscConfig+0x144>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ac4:	f7ff f98e 	bl	8003de4 <HAL_GetTick>
 8004ac8:	1bc0      	subs	r0, r0, r7
 8004aca:	4540      	cmp	r0, r8
 8004acc:	f200 8095 	bhi.w	8004bfa <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ad0:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8004ad2:	079b      	lsls	r3, r3, #30
 8004ad4:	d4f6      	bmi.n	8004ac4 <HAL_RCC_OscConfig+0x138>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ad6:	2d00      	cmp	r5, #0
 8004ad8:	f040 8106 	bne.w	8004ce8 <HAL_RCC_OscConfig+0x35c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004adc:	69a3      	ldr	r3, [r4, #24]
 8004ade:	b1cb      	cbz	r3, 8004b14 <HAL_RCC_OscConfig+0x188>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ae0:	4d51      	ldr	r5, [pc, #324]	@ (8004c28 <HAL_RCC_OscConfig+0x29c>)
 8004ae2:	68aa      	ldr	r2, [r5, #8]
 8004ae4:	f002 020c 	and.w	r2, r2, #12
 8004ae8:	2a08      	cmp	r2, #8
 8004aea:	f000 80cc 	beq.w	8004c86 <HAL_RCC_OscConfig+0x2fa>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004aee:	2b02      	cmp	r3, #2
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004af0:	4b4e      	ldr	r3, [pc, #312]	@ (8004c2c <HAL_RCC_OscConfig+0x2a0>)
 8004af2:	f04f 0200 	mov.w	r2, #0
 8004af6:	661a      	str	r2, [r3, #96]	@ 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004af8:	f000 8115 	beq.w	8004d26 <HAL_RCC_OscConfig+0x39a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004afc:	f7ff f972 	bl	8003de4 <HAL_GetTick>
 8004b00:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b02:	e004      	b.n	8004b0e <HAL_RCC_OscConfig+0x182>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b04:	f7ff f96e 	bl	8003de4 <HAL_GetTick>
 8004b08:	1b00      	subs	r0, r0, r4
 8004b0a:	2802      	cmp	r0, #2
 8004b0c:	d875      	bhi.n	8004bfa <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b0e:	682b      	ldr	r3, [r5, #0]
 8004b10:	019b      	lsls	r3, r3, #6
 8004b12:	d4f7      	bmi.n	8004b04 <HAL_RCC_OscConfig+0x178>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8004b14:	2000      	movs	r0, #0
}
 8004b16:	b002      	add	sp, #8
 8004b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004b1c:	6963      	ldr	r3, [r4, #20]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d02d      	beq.n	8004b7e <HAL_RCC_OscConfig+0x1f2>
      __HAL_RCC_LSI_ENABLE();
 8004b22:	4b42      	ldr	r3, [pc, #264]	@ (8004c2c <HAL_RCC_OscConfig+0x2a0>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b24:	4e40      	ldr	r6, [pc, #256]	@ (8004c28 <HAL_RCC_OscConfig+0x29c>)
      __HAL_RCC_LSI_ENABLE();
 8004b26:	2201      	movs	r2, #1
 8004b28:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 8004b2c:	f7ff f95a 	bl	8003de4 <HAL_GetTick>
 8004b30:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b32:	e004      	b.n	8004b3e <HAL_RCC_OscConfig+0x1b2>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b34:	f7ff f956 	bl	8003de4 <HAL_GetTick>
 8004b38:	1b40      	subs	r0, r0, r5
 8004b3a:	2802      	cmp	r0, #2
 8004b3c:	d85d      	bhi.n	8004bfa <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b3e:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8004b40:	079b      	lsls	r3, r3, #30
 8004b42:	d5f7      	bpl.n	8004b34 <HAL_RCC_OscConfig+0x1a8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b44:	6823      	ldr	r3, [r4, #0]
 8004b46:	e796      	b.n	8004a76 <HAL_RCC_OscConfig+0xea>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004b48:	6852      	ldr	r2, [r2, #4]
 8004b4a:	0250      	lsls	r0, r2, #9
 8004b4c:	f53f af6d 	bmi.w	8004a2a <HAL_RCC_OscConfig+0x9e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b50:	4a35      	ldr	r2, [pc, #212]	@ (8004c28 <HAL_RCC_OscConfig+0x29c>)
 8004b52:	6812      	ldr	r2, [r2, #0]
 8004b54:	0792      	lsls	r2, r2, #30
 8004b56:	d523      	bpl.n	8004ba0 <HAL_RCC_OscConfig+0x214>
 8004b58:	68e2      	ldr	r2, [r4, #12]
 8004b5a:	2a01      	cmp	r2, #1
 8004b5c:	d020      	beq.n	8004ba0 <HAL_RCC_OscConfig+0x214>
    return HAL_ERROR;
 8004b5e:	2001      	movs	r0, #1
 8004b60:	e7d9      	b.n	8004b16 <HAL_RCC_OscConfig+0x18a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004b62:	684a      	ldr	r2, [r1, #4]
 8004b64:	0255      	lsls	r5, r2, #9
 8004b66:	f57f af28 	bpl.w	80049ba <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b6a:	4a2f      	ldr	r2, [pc, #188]	@ (8004c28 <HAL_RCC_OscConfig+0x29c>)
 8004b6c:	6812      	ldr	r2, [r2, #0]
 8004b6e:	0392      	lsls	r2, r2, #14
 8004b70:	f57f af4d 	bpl.w	8004a0e <HAL_RCC_OscConfig+0x82>
 8004b74:	6862      	ldr	r2, [r4, #4]
 8004b76:	2a00      	cmp	r2, #0
 8004b78:	f47f af49 	bne.w	8004a0e <HAL_RCC_OscConfig+0x82>
 8004b7c:	e7ef      	b.n	8004b5e <HAL_RCC_OscConfig+0x1d2>
      __HAL_RCC_LSI_DISABLE();
 8004b7e:	4a2b      	ldr	r2, [pc, #172]	@ (8004c2c <HAL_RCC_OscConfig+0x2a0>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b80:	4e29      	ldr	r6, [pc, #164]	@ (8004c28 <HAL_RCC_OscConfig+0x29c>)
      __HAL_RCC_LSI_DISABLE();
 8004b82:	f8c2 3e80 	str.w	r3, [r2, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 8004b86:	f7ff f92d 	bl	8003de4 <HAL_GetTick>
 8004b8a:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b8c:	e004      	b.n	8004b98 <HAL_RCC_OscConfig+0x20c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b8e:	f7ff f929 	bl	8003de4 <HAL_GetTick>
 8004b92:	1b40      	subs	r0, r0, r5
 8004b94:	2802      	cmp	r0, #2
 8004b96:	d830      	bhi.n	8004bfa <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b98:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8004b9a:	079f      	lsls	r7, r3, #30
 8004b9c:	d4f7      	bmi.n	8004b8e <HAL_RCC_OscConfig+0x202>
 8004b9e:	e7d1      	b.n	8004b44 <HAL_RCC_OscConfig+0x1b8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ba0:	4921      	ldr	r1, [pc, #132]	@ (8004c28 <HAL_RCC_OscConfig+0x29c>)
 8004ba2:	6920      	ldr	r0, [r4, #16]
 8004ba4:	680a      	ldr	r2, [r1, #0]
 8004ba6:	f022 02f8 	bic.w	r2, r2, #248	@ 0xf8
 8004baa:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8004bae:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bb0:	071a      	lsls	r2, r3, #28
 8004bb2:	f57f af60 	bpl.w	8004a76 <HAL_RCC_OscConfig+0xea>
 8004bb6:	e7b1      	b.n	8004b1c <HAL_RCC_OscConfig+0x190>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bb8:	9301      	str	r3, [sp, #4]
 8004bba:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8004bbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8004bc2:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8004bc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bc8:	9301      	str	r3, [sp, #4]
 8004bca:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004bcc:	2501      	movs	r5, #1
 8004bce:	e75b      	b.n	8004a88 <HAL_RCC_OscConfig+0xfc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bd0:	684a      	ldr	r2, [r1, #4]
 8004bd2:	0251      	lsls	r1, r2, #9
 8004bd4:	f57f aef8 	bpl.w	80049c8 <HAL_RCC_OscConfig+0x3c>
 8004bd8:	e7c7      	b.n	8004b6a <HAL_RCC_OscConfig+0x1de>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bda:	6833      	ldr	r3, [r6, #0]
 8004bdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004be0:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004be2:	f7ff f8ff 	bl	8003de4 <HAL_GetTick>
 8004be6:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004be8:	6833      	ldr	r3, [r6, #0]
 8004bea:	05d9      	lsls	r1, r3, #23
 8004bec:	f53f af51 	bmi.w	8004a92 <HAL_RCC_OscConfig+0x106>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bf0:	f7ff f8f8 	bl	8003de4 <HAL_GetTick>
 8004bf4:	1bc0      	subs	r0, r0, r7
 8004bf6:	2802      	cmp	r0, #2
 8004bf8:	d9f6      	bls.n	8004be8 <HAL_RCC_OscConfig+0x25c>
            return HAL_TIMEOUT;
 8004bfa:	2003      	movs	r0, #3
}
 8004bfc:	b002      	add	sp, #8
 8004bfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c02:	4a09      	ldr	r2, [pc, #36]	@ (8004c28 <HAL_RCC_OscConfig+0x29c>)
 8004c04:	6813      	ldr	r3, [r2, #0]
 8004c06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c0a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004c0c:	f7ff f8ea 	bl	8003de4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c10:	4e05      	ldr	r6, [pc, #20]	@ (8004c28 <HAL_RCC_OscConfig+0x29c>)
        tickstart = HAL_GetTick();
 8004c12:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c14:	e004      	b.n	8004c20 <HAL_RCC_OscConfig+0x294>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c16:	f7ff f8e5 	bl	8003de4 <HAL_GetTick>
 8004c1a:	1b40      	subs	r0, r0, r5
 8004c1c:	2864      	cmp	r0, #100	@ 0x64
 8004c1e:	d8ec      	bhi.n	8004bfa <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c20:	6833      	ldr	r3, [r6, #0]
 8004c22:	039b      	lsls	r3, r3, #14
 8004c24:	d5f7      	bpl.n	8004c16 <HAL_RCC_OscConfig+0x28a>
 8004c26:	e6f1      	b.n	8004a0c <HAL_RCC_OscConfig+0x80>
 8004c28:	40023800 	.word	0x40023800
 8004c2c:	42470000 	.word	0x42470000
 8004c30:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c34:	4a55      	ldr	r2, [pc, #340]	@ (8004d8c <HAL_RCC_OscConfig+0x400>)
 8004c36:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8004c38:	f043 0301 	orr.w	r3, r3, #1
 8004c3c:	6713      	str	r3, [r2, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8004c3e:	f7ff f8d1 	bl	8003de4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c42:	4f52      	ldr	r7, [pc, #328]	@ (8004d8c <HAL_RCC_OscConfig+0x400>)
      tickstart = HAL_GetTick();
 8004c44:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c46:	f241 3888 	movw	r8, #5000	@ 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c4a:	e004      	b.n	8004c56 <HAL_RCC_OscConfig+0x2ca>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c4c:	f7ff f8ca 	bl	8003de4 <HAL_GetTick>
 8004c50:	1b80      	subs	r0, r0, r6
 8004c52:	4540      	cmp	r0, r8
 8004c54:	d8d1      	bhi.n	8004bfa <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c56:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004c58:	079a      	lsls	r2, r3, #30
 8004c5a:	d5f7      	bpl.n	8004c4c <HAL_RCC_OscConfig+0x2c0>
    if(pwrclkchanged == SET)
 8004c5c:	2d00      	cmp	r5, #0
 8004c5e:	f43f af3d 	beq.w	8004adc <HAL_RCC_OscConfig+0x150>
 8004c62:	e041      	b.n	8004ce8 <HAL_RCC_OscConfig+0x35c>
        __HAL_RCC_HSI_DISABLE();
 8004c64:	4a4a      	ldr	r2, [pc, #296]	@ (8004d90 <HAL_RCC_OscConfig+0x404>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c66:	4e49      	ldr	r6, [pc, #292]	@ (8004d8c <HAL_RCC_OscConfig+0x400>)
        __HAL_RCC_HSI_DISABLE();
 8004c68:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004c6a:	f7ff f8bb 	bl	8003de4 <HAL_GetTick>
 8004c6e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c70:	e004      	b.n	8004c7c <HAL_RCC_OscConfig+0x2f0>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c72:	f7ff f8b7 	bl	8003de4 <HAL_GetTick>
 8004c76:	1b40      	subs	r0, r0, r5
 8004c78:	2802      	cmp	r0, #2
 8004c7a:	d8be      	bhi.n	8004bfa <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c7c:	6833      	ldr	r3, [r6, #0]
 8004c7e:	0799      	lsls	r1, r3, #30
 8004c80:	d4f7      	bmi.n	8004c72 <HAL_RCC_OscConfig+0x2e6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c82:	6823      	ldr	r3, [r4, #0]
 8004c84:	e6f5      	b.n	8004a72 <HAL_RCC_OscConfig+0xe6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	f43f af69 	beq.w	8004b5e <HAL_RCC_OscConfig+0x1d2>
        pll_config = RCC->PLLCFGR;
 8004c8c:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c8e:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c90:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c94:	4291      	cmp	r1, r2
 8004c96:	f47f af62 	bne.w	8004b5e <HAL_RCC_OscConfig+0x1d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c9a:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c9c:	f003 013f 	and.w	r1, r3, #63	@ 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ca0:	4291      	cmp	r1, r2
 8004ca2:	f47f af5c 	bne.w	8004b5e <HAL_RCC_OscConfig+0x1d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ca6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8004ca8:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8004cac:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004cae:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8004cb2:	f47f af54 	bne.w	8004b5e <HAL_RCC_OscConfig+0x1d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004cb6:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8004cb8:	0852      	lsrs	r2, r2, #1
 8004cba:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8004cbe:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004cc0:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8004cc4:	f47f af4b 	bne.w	8004b5e <HAL_RCC_OscConfig+0x1d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004cc8:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8004cca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004cce:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 8004cd2:	f47f af44 	bne.w	8004b5e <HAL_RCC_OscConfig+0x1d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004cd6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8004cd8:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004cdc:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 8004ce0:	bf14      	ite	ne
 8004ce2:	2001      	movne	r0, #1
 8004ce4:	2000      	moveq	r0, #0
 8004ce6:	e716      	b.n	8004b16 <HAL_RCC_OscConfig+0x18a>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ce8:	4a28      	ldr	r2, [pc, #160]	@ (8004d8c <HAL_RCC_OscConfig+0x400>)
 8004cea:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8004cec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004cf0:	6413      	str	r3, [r2, #64]	@ 0x40
 8004cf2:	e6f3      	b.n	8004adc <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cf4:	684a      	ldr	r2, [r1, #4]
 8004cf6:	0251      	lsls	r1, r2, #9
 8004cf8:	f53f ae9e 	bmi.w	8004a38 <HAL_RCC_OscConfig+0xac>
 8004cfc:	e728      	b.n	8004b50 <HAL_RCC_OscConfig+0x1c4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cfe:	4b23      	ldr	r3, [pc, #140]	@ (8004d8c <HAL_RCC_OscConfig+0x400>)
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8004d06:	601a      	str	r2, [r3, #0]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004d0e:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004d10:	e77c      	b.n	8004c0c <HAL_RCC_OscConfig+0x280>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d12:	4b1e      	ldr	r3, [pc, #120]	@ (8004d8c <HAL_RCC_OscConfig+0x400>)
 8004d14:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004d16:	f042 0204 	orr.w	r2, r2, #4
 8004d1a:	671a      	str	r2, [r3, #112]	@ 0x70
 8004d1c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004d1e:	f042 0201 	orr.w	r2, r2, #1
 8004d22:	671a      	str	r2, [r3, #112]	@ 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d24:	e78b      	b.n	8004c3e <HAL_RCC_OscConfig+0x2b2>
        tickstart = HAL_GetTick();
 8004d26:	f7ff f85d 	bl	8003de4 <HAL_GetTick>
 8004d2a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d2c:	e005      	b.n	8004d3a <HAL_RCC_OscConfig+0x3ae>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d2e:	f7ff f859 	bl	8003de4 <HAL_GetTick>
 8004d32:	1b80      	subs	r0, r0, r6
 8004d34:	2802      	cmp	r0, #2
 8004d36:	f63f af60 	bhi.w	8004bfa <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d3a:	682b      	ldr	r3, [r5, #0]
 8004d3c:	0199      	lsls	r1, r3, #6
 8004d3e:	d4f6      	bmi.n	8004d2e <HAL_RCC_OscConfig+0x3a2>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d40:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8004d44:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8004d46:	430b      	orrs	r3, r1
 8004d48:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8004d4c:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	@ 0x28
 8004d50:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004d52:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8004d56:	0852      	lsrs	r2, r2, #1
 8004d58:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8004d5c:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8004d5e:	490c      	ldr	r1, [pc, #48]	@ (8004d90 <HAL_RCC_OscConfig+0x404>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d60:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8004d64:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d66:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8004d68:	660a      	str	r2, [r1, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8004d6a:	f7ff f83b 	bl	8003de4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d6e:	4d07      	ldr	r5, [pc, #28]	@ (8004d8c <HAL_RCC_OscConfig+0x400>)
        tickstart = HAL_GetTick();
 8004d70:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d72:	e005      	b.n	8004d80 <HAL_RCC_OscConfig+0x3f4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d74:	f7ff f836 	bl	8003de4 <HAL_GetTick>
 8004d78:	1b00      	subs	r0, r0, r4
 8004d7a:	2802      	cmp	r0, #2
 8004d7c:	f63f af3d 	bhi.w	8004bfa <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d80:	682b      	ldr	r3, [r5, #0]
 8004d82:	019a      	lsls	r2, r3, #6
 8004d84:	d5f6      	bpl.n	8004d74 <HAL_RCC_OscConfig+0x3e8>
 8004d86:	e6c5      	b.n	8004b14 <HAL_RCC_OscConfig+0x188>
    return HAL_ERROR;
 8004d88:	2001      	movs	r0, #1
}
 8004d8a:	4770      	bx	lr
 8004d8c:	40023800 	.word	0x40023800
 8004d90:	42470000 	.word	0x42470000

08004d94 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004d94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004d98:	b083      	sub	sp, #12
 8004d9a:	4698      	mov	r8, r3
 8004d9c:	4615      	mov	r5, r2
 8004d9e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8004da0:	4607      	mov	r7, r0
 8004da2:	460c      	mov	r4, r1
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004da4:	f7ff f81e 	bl	8003de4 <HAL_GetTick>
 8004da8:	4446      	add	r6, r8
 8004daa:	1a36      	subs	r6, r6, r0
  tmp_tickstart = HAL_GetTick();
 8004dac:	f7ff f81a 	bl	8003de4 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004db0:	4b2c      	ldr	r3, [pc, #176]	@ (8004e64 <SPI_WaitFlagStateUntilTimeout+0xd0>)
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	f3c2 32cb 	ubfx	r2, r2, #15, #12
 8004db8:	fb06 f202 	mul.w	r2, r6, r2
 8004dbc:	f1b8 3fff 	cmp.w	r8, #4294967295
 8004dc0:	9201      	str	r2, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004dc2:	bf18      	it	ne
 8004dc4:	4681      	movne	r9, r0
 8004dc6:	683a      	ldr	r2, [r7, #0]
 8004dc8:	d11a      	bne.n	8004e00 <SPI_WaitFlagStateUntilTimeout+0x6c>
 8004dca:	6893      	ldr	r3, [r2, #8]
 8004dcc:	ea34 0303 	bics.w	r3, r4, r3
 8004dd0:	bf0c      	ite	eq
 8004dd2:	2301      	moveq	r3, #1
 8004dd4:	2300      	movne	r3, #0
 8004dd6:	429d      	cmp	r5, r3
 8004dd8:	d1f7      	bne.n	8004dca <SPI_WaitFlagStateUntilTimeout+0x36>
      }
      count--;
    }
  }

  return HAL_OK;
 8004dda:	2000      	movs	r0, #0
}
 8004ddc:	b003      	add	sp, #12
 8004dde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004de2:	f7fe ffff 	bl	8003de4 <HAL_GetTick>
 8004de6:	eba0 0009 	sub.w	r0, r0, r9
 8004dea:	42b0      	cmp	r0, r6
 8004dec:	d211      	bcs.n	8004e12 <SPI_WaitFlagStateUntilTimeout+0x7e>
      if (count == 0U)
 8004dee:	9b01      	ldr	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004df0:	683a      	ldr	r2, [r7, #0]
        tmp_timeout = 0U;
 8004df2:	2b00      	cmp	r3, #0
      count--;
 8004df4:	9b01      	ldr	r3, [sp, #4]
 8004df6:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 8004dfa:	bf08      	it	eq
 8004dfc:	2600      	moveq	r6, #0
      count--;
 8004dfe:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e00:	6893      	ldr	r3, [r2, #8]
 8004e02:	ea34 0303 	bics.w	r3, r4, r3
 8004e06:	bf0c      	ite	eq
 8004e08:	2301      	moveq	r3, #1
 8004e0a:	2300      	movne	r3, #0
 8004e0c:	42ab      	cmp	r3, r5
 8004e0e:	d1e8      	bne.n	8004de2 <SPI_WaitFlagStateUntilTimeout+0x4e>
 8004e10:	e7e3      	b.n	8004dda <SPI_WaitFlagStateUntilTimeout+0x46>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e12:	e9d7 3100 	ldrd	r3, r1, [r7]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e16:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e18:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e1c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004e20:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e22:	d013      	beq.n	8004e4c <SPI_WaitFlagStateUntilTimeout+0xb8>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e24:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e26:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8004e2a:	d107      	bne.n	8004e3c <SPI_WaitFlagStateUntilTimeout+0xa8>
          SPI_RESET_CRC(hspi);
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004e32:	601a      	str	r2, [r3, #0]
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004e3a:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8004e3c:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 8004e3e:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 8004e40:	f887 2051 	strb.w	r2, [r7, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004e44:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
 8004e48:	2003      	movs	r0, #3
 8004e4a:	e7c7      	b.n	8004ddc <SPI_WaitFlagStateUntilTimeout+0x48>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e4c:	68ba      	ldr	r2, [r7, #8]
 8004e4e:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8004e52:	d002      	beq.n	8004e5a <SPI_WaitFlagStateUntilTimeout+0xc6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e54:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8004e58:	d1e4      	bne.n	8004e24 <SPI_WaitFlagStateUntilTimeout+0x90>
          __HAL_SPI_DISABLE(hspi);
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e60:	601a      	str	r2, [r3, #0]
 8004e62:	e7df      	b.n	8004e24 <SPI_WaitFlagStateUntilTimeout+0x90>
 8004e64:	2000039c 	.word	0x2000039c

08004e68 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004e68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e6c:	b084      	sub	sp, #16
 8004e6e:	460f      	mov	r7, r1
 8004e70:	4690      	mov	r8, r2
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004e72:	9200      	str	r2, [sp, #0]
 8004e74:	460b      	mov	r3, r1
 8004e76:	2201      	movs	r2, #1
 8004e78:	2102      	movs	r1, #2
{
 8004e7a:	4604      	mov	r4, r0
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004e7c:	f7ff ff8a 	bl	8004d94 <SPI_WaitFlagStateUntilTimeout>
 8004e80:	bb40      	cbnz	r0, 8004ed4 <SPI_EndRxTxTransaction+0x6c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004e82:	4b19      	ldr	r3, [pc, #100]	@ (8004ee8 <SPI_EndRxTxTransaction+0x80>)
 8004e84:	681d      	ldr	r5, [r3, #0]
 8004e86:	4b19      	ldr	r3, [pc, #100]	@ (8004eec <SPI_EndRxTxTransaction+0x84>)
 8004e88:	fba3 3505 	umull	r3, r5, r3, r5
 8004e8c:	0d6d      	lsrs	r5, r5, #21
 8004e8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004e92:	fb03 f505 	mul.w	r5, r3, r5
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e96:	6863      	ldr	r3, [r4, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004e98:	9503      	str	r5, [sp, #12]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e9a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e9e:	4606      	mov	r6, r0
 8004ea0:	d107      	bne.n	8004eb2 <SPI_EndRxTxTransaction+0x4a>
 8004ea2:	e00d      	b.n	8004ec0 <SPI_EndRxTxTransaction+0x58>
    {
      if (count == 0U)
      {
        break;
      }
      count--;
 8004ea4:	9b03      	ldr	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004ea6:	6821      	ldr	r1, [r4, #0]
      count--;
 8004ea8:	3b01      	subs	r3, #1
 8004eaa:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004eac:	688b      	ldr	r3, [r1, #8]
 8004eae:	061b      	lsls	r3, r3, #24
 8004eb0:	d502      	bpl.n	8004eb8 <SPI_EndRxTxTransaction+0x50>
      if (count == 0U)
 8004eb2:	9b03      	ldr	r3, [sp, #12]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d1f5      	bne.n	8004ea4 <SPI_EndRxTxTransaction+0x3c>
  }

  return HAL_OK;
}
 8004eb8:	4630      	mov	r0, r6
 8004eba:	b004      	add	sp, #16
 8004ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	f8cd 8000 	str.w	r8, [sp]
 8004ec6:	463b      	mov	r3, r7
 8004ec8:	2180      	movs	r1, #128	@ 0x80
 8004eca:	4620      	mov	r0, r4
 8004ecc:	f7ff ff62 	bl	8004d94 <SPI_WaitFlagStateUntilTimeout>
 8004ed0:	2800      	cmp	r0, #0
 8004ed2:	d0f1      	beq.n	8004eb8 <SPI_EndRxTxTransaction+0x50>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ed4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004ed6:	2603      	movs	r6, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ed8:	f043 0320 	orr.w	r3, r3, #32
}
 8004edc:	4630      	mov	r0, r6
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ede:	6563      	str	r3, [r4, #84]	@ 0x54
}
 8004ee0:	b004      	add	sp, #16
 8004ee2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ee6:	bf00      	nop
 8004ee8:	2000039c 	.word	0x2000039c
 8004eec:	165e9f81 	.word	0x165e9f81

08004ef0 <HAL_SPI_Init>:
  if (hspi == NULL)
 8004ef0:	2800      	cmp	r0, #0
 8004ef2:	d05c      	beq.n	8004fae <HAL_SPI_Init+0xbe>
{
 8004ef4:	b570      	push	{r4, r5, r6, lr}
 8004ef6:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004ef8:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8004efa:	2800      	cmp	r0, #0
 8004efc:	d047      	beq.n	8004f8e <HAL_SPI_Init+0x9e>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004efe:	2300      	movs	r3, #0
 8004f00:	e9c4 3304 	strd	r3, r3, [r4, #16]
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f04:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f08:	2200      	movs	r2, #0
 8004f0a:	62a2      	str	r2, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f0c:	f003 01ff 	and.w	r1, r3, #255	@ 0xff
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d042      	beq.n	8004f9a <HAL_SPI_Init+0xaa>
 8004f14:	4694      	mov	ip, r2
  __HAL_SPI_DISABLE(hspi);
 8004f16:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f18:	68a5      	ldr	r5, [r4, #8]
 8004f1a:	69a2      	ldr	r2, [r4, #24]
 8004f1c:	6a26      	ldr	r6, [r4, #32]
  hspi->State = HAL_SPI_STATE_BUSY;
 8004f1e:	2302      	movs	r3, #2
 8004f20:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_SPI_DISABLE(hspi);
 8004f24:	680b      	ldr	r3, [r1, #0]
 8004f26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f2a:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f2c:	6863      	ldr	r3, [r4, #4]
 8004f2e:	f405 4504 	and.w	r5, r5, #33792	@ 0x8400
 8004f32:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8004f36:	432b      	orrs	r3, r5
 8004f38:	68e5      	ldr	r5, [r4, #12]
 8004f3a:	f405 6500 	and.w	r5, r5, #2048	@ 0x800
 8004f3e:	432b      	orrs	r3, r5
 8004f40:	6925      	ldr	r5, [r4, #16]
 8004f42:	f005 0502 	and.w	r5, r5, #2
 8004f46:	432b      	orrs	r3, r5
 8004f48:	6965      	ldr	r5, [r4, #20]
 8004f4a:	f005 0501 	and.w	r5, r5, #1
 8004f4e:	432b      	orrs	r3, r5
 8004f50:	69e5      	ldr	r5, [r4, #28]
 8004f52:	f006 0e80 	and.w	lr, r6, #128	@ 0x80
 8004f56:	f402 7600 	and.w	r6, r2, #512	@ 0x200
 8004f5a:	f005 0538 	and.w	r5, r5, #56	@ 0x38
 8004f5e:	4333      	orrs	r3, r6
 8004f60:	432b      	orrs	r3, r5
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004f62:	0c12      	lsrs	r2, r2, #16
 8004f64:	f000 0010 	and.w	r0, r0, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f68:	ea43 030e 	orr.w	r3, r3, lr
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004f6c:	f002 0204 	and.w	r2, r2, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f70:	ea43 030c 	orr.w	r3, r3, ip
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004f74:	4302      	orrs	r2, r0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f76:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004f78:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f7a:	69cb      	ldr	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f7c:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f7e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 8004f82:	2201      	movs	r2, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f84:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f86:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004f88:	f884 2051 	strb.w	r2, [r4, #81]	@ 0x51
}
 8004f8c:	bd70      	pop	{r4, r5, r6, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f8e:	6863      	ldr	r3, [r4, #4]
 8004f90:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f94:	d0b6      	beq.n	8004f04 <HAL_SPI_Init+0x14>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f96:	61e0      	str	r0, [r4, #28]
 8004f98:	e7b4      	b.n	8004f04 <HAL_SPI_Init+0x14>
    HAL_SPI_MspInit(hspi);
 8004f9a:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8004f9c:	f884 1050 	strb.w	r1, [r4, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 8004fa0:	f7fe fa62 	bl	8003468 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004fa4:	e9d4 0309 	ldrd	r0, r3, [r4, #36]	@ 0x24
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004fa8:	f403 5c00 	and.w	ip, r3, #8192	@ 0x2000
 8004fac:	e7b3      	b.n	8004f16 <HAL_SPI_Init+0x26>
    return HAL_ERROR;
 8004fae:	2001      	movs	r0, #1
}
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop

08004fb4 <HAL_SPI_TransmitReceive>:
{
 8004fb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004fb8:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8004fba:	f890 0050 	ldrb.w	r0, [r0, #80]	@ 0x50
{
 8004fbe:	b083      	sub	sp, #12
  __HAL_LOCK(hspi);
 8004fc0:	2801      	cmp	r0, #1
{
 8004fc2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
  __HAL_LOCK(hspi);
 8004fc4:	f000 8086 	beq.w	80050d4 <HAL_SPI_TransmitReceive+0x120>
 8004fc8:	461f      	mov	r7, r3
 8004fca:	2301      	movs	r3, #1
 8004fcc:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  tickstart = HAL_GetTick();
 8004fd0:	4689      	mov	r9, r1
 8004fd2:	4690      	mov	r8, r2
 8004fd4:	f7fe ff06 	bl	8003de4 <HAL_GetTick>
 8004fd8:	4605      	mov	r5, r0
  tmp_state           = hspi->State;
 8004fda:	f894 0051 	ldrb.w	r0, [r4, #81]	@ 0x51
  tmp_mode            = hspi->Init.Mode;
 8004fde:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004fe0:	2801      	cmp	r0, #1
  tmp_state           = hspi->State;
 8004fe2:	b2c1      	uxtb	r1, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004fe4:	d00e      	beq.n	8005004 <HAL_SPI_TransmitReceive+0x50>
 8004fe6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004fea:	d006      	beq.n	8004ffa <HAL_SPI_TransmitReceive+0x46>
    errorcode = HAL_BUSY;
 8004fec:	2002      	movs	r0, #2
  __HAL_UNLOCK(hspi);
 8004fee:	2300      	movs	r3, #0
 8004ff0:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 8004ff4:	b003      	add	sp, #12
 8004ff6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004ffa:	68a2      	ldr	r2, [r4, #8]
 8004ffc:	2a00      	cmp	r2, #0
 8004ffe:	d1f5      	bne.n	8004fec <HAL_SPI_TransmitReceive+0x38>
 8005000:	2904      	cmp	r1, #4
 8005002:	d1f3      	bne.n	8004fec <HAL_SPI_TransmitReceive+0x38>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005004:	f1b9 0f00 	cmp.w	r9, #0
 8005008:	f000 80c7 	beq.w	800519a <HAL_SPI_TransmitReceive+0x1e6>
 800500c:	f1b8 0f00 	cmp.w	r8, #0
 8005010:	f000 80c3 	beq.w	800519a <HAL_SPI_TransmitReceive+0x1e6>
 8005014:	2f00      	cmp	r7, #0
 8005016:	f000 80c0 	beq.w	800519a <HAL_SPI_TransmitReceive+0x1e6>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800501a:	f894 2051 	ldrb.w	r2, [r4, #81]	@ 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800501e:	f8c4 8038 	str.w	r8, [r4, #56]	@ 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005022:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005024:	bf1c      	itt	ne
 8005026:	2205      	movne	r2, #5
 8005028:	f884 2051 	strbne.w	r2, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800502c:	2200      	movs	r2, #0
 800502e:	6562      	str	r2, [r4, #84]	@ 0x54
  hspi->RxISR       = NULL;
 8005030:	e9c4 2210 	strd	r2, r2, [r4, #64]	@ 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005034:	6822      	ldr	r2, [r4, #0]
  hspi->RxXferCount = Size;
 8005036:	87e7      	strh	r7, [r4, #62]	@ 0x3e
  hspi->TxXferCount = Size;
 8005038:	86e7      	strh	r7, [r4, #54]	@ 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800503a:	6811      	ldr	r1, [r2, #0]
  hspi->RxXferSize  = Size;
 800503c:	87a7      	strh	r7, [r4, #60]	@ 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800503e:	0649      	lsls	r1, r1, #25
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005040:	f8c4 9030 	str.w	r9, [r4, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005044:	86a7      	strh	r7, [r4, #52]	@ 0x34
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005046:	d403      	bmi.n	8005050 <HAL_SPI_TransmitReceive+0x9c>
    __HAL_SPI_ENABLE(hspi);
 8005048:	6811      	ldr	r1, [r2, #0]
 800504a:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
 800504e:	6011      	str	r1, [r2, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005050:	68e1      	ldr	r1, [r4, #12]
 8005052:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8005056:	d04c      	beq.n	80050f2 <HAL_SPI_TransmitReceive+0x13e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005058:	2b00      	cmp	r3, #0
 800505a:	d03f      	beq.n	80050dc <HAL_SPI_TransmitReceive+0x128>
 800505c:	2f01      	cmp	r7, #1
 800505e:	d03d      	beq.n	80050dc <HAL_SPI_TransmitReceive+0x128>
        txallowed = 1U;
 8005060:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005062:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8005064:	b29b      	uxth	r3, r3
 8005066:	b91b      	cbnz	r3, 8005070 <HAL_SPI_TransmitReceive+0xbc>
 8005068:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800506a:	b29b      	uxth	r3, r3
 800506c:	2b00      	cmp	r3, #0
 800506e:	d07d      	beq.n	800516c <HAL_SPI_TransmitReceive+0x1b8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005070:	6822      	ldr	r2, [r4, #0]
 8005072:	6893      	ldr	r3, [r2, #8]
 8005074:	0799      	lsls	r1, r3, #30
 8005076:	d50f      	bpl.n	8005098 <HAL_SPI_TransmitReceive+0xe4>
 8005078:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800507a:	b29b      	uxth	r3, r3
 800507c:	b163      	cbz	r3, 8005098 <HAL_SPI_TransmitReceive+0xe4>
 800507e:	b15f      	cbz	r7, 8005098 <HAL_SPI_TransmitReceive+0xe4>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005080:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	7313      	strb	r3, [r2, #12]
        hspi->TxXferCount--;
 8005086:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
        hspi->pTxBuffPtr++;
 8005088:	6b22      	ldr	r2, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 800508a:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr++;
 800508c:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 800508e:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr++;
 8005090:	6322      	str	r2, [r4, #48]	@ 0x30
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005092:	6822      	ldr	r2, [r4, #0]
        hspi->TxXferCount--;
 8005094:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 8005096:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005098:	6893      	ldr	r3, [r2, #8]
 800509a:	f013 0301 	ands.w	r3, r3, #1
 800509e:	d00d      	beq.n	80050bc <HAL_SPI_TransmitReceive+0x108>
 80050a0:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
 80050a2:	b289      	uxth	r1, r1
 80050a4:	b151      	cbz	r1, 80050bc <HAL_SPI_TransmitReceive+0x108>
        txallowed = 1U;
 80050a6:	461f      	mov	r7, r3
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80050a8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80050aa:	68d2      	ldr	r2, [r2, #12]
 80050ac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80050ae:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80050b0:	3301      	adds	r3, #1
 80050b2:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 80050b4:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80050b6:	3b01      	subs	r3, #1
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80050bc:	f7fe fe92 	bl	8003de4 <HAL_GetTick>
 80050c0:	1b40      	subs	r0, r0, r5
 80050c2:	42b0      	cmp	r0, r6
 80050c4:	d3cd      	bcc.n	8005062 <HAL_SPI_TransmitReceive+0xae>
 80050c6:	1c73      	adds	r3, r6, #1
 80050c8:	d0cb      	beq.n	8005062 <HAL_SPI_TransmitReceive+0xae>
        hspi->State = HAL_SPI_STATE_READY;
 80050ca:	2301      	movs	r3, #1
 80050cc:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        errorcode = HAL_TIMEOUT;
 80050d0:	2003      	movs	r0, #3
 80050d2:	e78c      	b.n	8004fee <HAL_SPI_TransmitReceive+0x3a>
  __HAL_LOCK(hspi);
 80050d4:	2002      	movs	r0, #2
}
 80050d6:	b003      	add	sp, #12
 80050d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80050dc:	f899 3000 	ldrb.w	r3, [r9]
 80050e0:	7313      	strb	r3, [r2, #12]
      hspi->TxXferCount--;
 80050e2:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80050e4:	6b22      	ldr	r2, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 80050e6:	3b01      	subs	r3, #1
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80050e8:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 80050ea:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80050ec:	6322      	str	r2, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 80050ee:	86e3      	strh	r3, [r4, #54]	@ 0x36
 80050f0:	e7b6      	b.n	8005060 <HAL_SPI_TransmitReceive+0xac>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d153      	bne.n	800519e <HAL_SPI_TransmitReceive+0x1ea>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050f6:	4649      	mov	r1, r9
 80050f8:	f831 3b02 	ldrh.w	r3, [r1], #2
 80050fc:	60d3      	str	r3, [r2, #12]
      hspi->TxXferCount--;
 80050fe:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005100:	6321      	str	r1, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8005102:	3b01      	subs	r3, #1
 8005104:	b29b      	uxth	r3, r3
 8005106:	86e3      	strh	r3, [r4, #54]	@ 0x36
 8005108:	1c72      	adds	r2, r6, #1
{
 800510a:	f04f 0701 	mov.w	r7, #1
 800510e:	d025      	beq.n	800515c <HAL_SPI_TransmitReceive+0x1a8>
 8005110:	e048      	b.n	80051a4 <HAL_SPI_TransmitReceive+0x1f0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005112:	6822      	ldr	r2, [r4, #0]
 8005114:	6893      	ldr	r3, [r2, #8]
 8005116:	079b      	lsls	r3, r3, #30
 8005118:	d50d      	bpl.n	8005136 <HAL_SPI_TransmitReceive+0x182>
 800511a:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800511c:	b29b      	uxth	r3, r3
 800511e:	b153      	cbz	r3, 8005136 <HAL_SPI_TransmitReceive+0x182>
 8005120:	b147      	cbz	r7, 8005134 <HAL_SPI_TransmitReceive+0x180>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005122:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005124:	f833 1b02 	ldrh.w	r1, [r3], #2
 8005128:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800512a:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 800512c:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800512e:	3b01      	subs	r3, #1
 8005130:	b29b      	uxth	r3, r3
 8005132:	86e3      	strh	r3, [r4, #54]	@ 0x36
{
 8005134:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005136:	6893      	ldr	r3, [r2, #8]
 8005138:	f013 0301 	ands.w	r3, r3, #1
 800513c:	d00c      	beq.n	8005158 <HAL_SPI_TransmitReceive+0x1a4>
 800513e:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
 8005140:	b289      	uxth	r1, r1
 8005142:	b149      	cbz	r1, 8005158 <HAL_SPI_TransmitReceive+0x1a4>
        txallowed = 1U;
 8005144:	461f      	mov	r7, r3
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005146:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8005148:	68d2      	ldr	r2, [r2, #12]
 800514a:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800514e:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8005150:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005152:	3b01      	subs	r3, #1
 8005154:	b29b      	uxth	r3, r3
 8005156:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005158:	f7fe fe44 	bl	8003de4 <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800515c:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800515e:	b29b      	uxth	r3, r3
 8005160:	2b00      	cmp	r3, #0
 8005162:	d1d6      	bne.n	8005112 <HAL_SPI_TransmitReceive+0x15e>
 8005164:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005166:	b29b      	uxth	r3, r3
 8005168:	2b00      	cmp	r3, #0
 800516a:	d1d2      	bne.n	8005112 <HAL_SPI_TransmitReceive+0x15e>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800516c:	462a      	mov	r2, r5
 800516e:	4631      	mov	r1, r6
 8005170:	4620      	mov	r0, r4
 8005172:	f7ff fe79 	bl	8004e68 <SPI_EndRxTxTransaction>
 8005176:	b970      	cbnz	r0, 8005196 <HAL_SPI_TransmitReceive+0x1e2>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005178:	68a3      	ldr	r3, [r4, #8]
 800517a:	b933      	cbnz	r3, 800518a <HAL_SPI_TransmitReceive+0x1d6>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800517c:	6823      	ldr	r3, [r4, #0]
 800517e:	9001      	str	r0, [sp, #4]
 8005180:	68da      	ldr	r2, [r3, #12]
 8005182:	9201      	str	r2, [sp, #4]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	9301      	str	r3, [sp, #4]
 8005188:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800518a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800518c:	b92b      	cbnz	r3, 800519a <HAL_SPI_TransmitReceive+0x1e6>
    hspi->State = HAL_SPI_STATE_READY;
 800518e:	2301      	movs	r3, #1
 8005190:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
 8005194:	e72b      	b.n	8004fee <HAL_SPI_TransmitReceive+0x3a>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005196:	2320      	movs	r3, #32
 8005198:	6563      	str	r3, [r4, #84]	@ 0x54
    errorcode = HAL_ERROR;
 800519a:	2001      	movs	r0, #1
 800519c:	e727      	b.n	8004fee <HAL_SPI_TransmitReceive+0x3a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800519e:	2f01      	cmp	r7, #1
 80051a0:	d1b2      	bne.n	8005108 <HAL_SPI_TransmitReceive+0x154>
 80051a2:	e7a8      	b.n	80050f6 <HAL_SPI_TransmitReceive+0x142>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051a4:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	b91b      	cbnz	r3, 80051b2 <HAL_SPI_TransmitReceive+0x1fe>
 80051aa:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d0dc      	beq.n	800516c <HAL_SPI_TransmitReceive+0x1b8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80051b2:	6822      	ldr	r2, [r4, #0]
 80051b4:	6893      	ldr	r3, [r2, #8]
 80051b6:	0798      	lsls	r0, r3, #30
 80051b8:	d50d      	bpl.n	80051d6 <HAL_SPI_TransmitReceive+0x222>
 80051ba:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80051bc:	b29b      	uxth	r3, r3
 80051be:	b153      	cbz	r3, 80051d6 <HAL_SPI_TransmitReceive+0x222>
 80051c0:	b147      	cbz	r7, 80051d4 <HAL_SPI_TransmitReceive+0x220>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051c2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80051c4:	f833 1b02 	ldrh.w	r1, [r3], #2
 80051c8:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80051ca:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 80051cc:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80051ce:	3b01      	subs	r3, #1
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 80051d4:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80051d6:	6893      	ldr	r3, [r2, #8]
 80051d8:	f013 0301 	ands.w	r3, r3, #1
 80051dc:	d00c      	beq.n	80051f8 <HAL_SPI_TransmitReceive+0x244>
 80051de:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
 80051e0:	b289      	uxth	r1, r1
 80051e2:	b149      	cbz	r1, 80051f8 <HAL_SPI_TransmitReceive+0x244>
        txallowed = 1U;
 80051e4:	461f      	mov	r7, r3
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80051e6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80051e8:	68d2      	ldr	r2, [r2, #12]
 80051ea:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80051ee:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 80051f0:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80051f2:	3b01      	subs	r3, #1
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80051f8:	f7fe fdf4 	bl	8003de4 <HAL_GetTick>
 80051fc:	1b40      	subs	r0, r0, r5
 80051fe:	42b0      	cmp	r0, r6
 8005200:	d3d0      	bcc.n	80051a4 <HAL_SPI_TransmitReceive+0x1f0>
 8005202:	e762      	b.n	80050ca <HAL_SPI_TransmitReceive+0x116>

08005204 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005204:	2800      	cmp	r0, #0
 8005206:	f000 808f 	beq.w	8005328 <HAL_TIM_Base_Init+0x124>
{
 800520a:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800520c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8005210:	4604      	mov	r4, r0
 8005212:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8005216:	2b00      	cmp	r3, #0
 8005218:	f000 8081 	beq.w	800531e <HAL_TIM_Base_Init+0x11a>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800521c:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800521e:	4943      	ldr	r1, [pc, #268]	@ (800532c <HAL_TIM_Base_Init+0x128>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005220:	2302      	movs	r3, #2
 8005222:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005226:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8005228:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800522a:	d064      	beq.n	80052f6 <HAL_TIM_Base_Init+0xf2>
 800522c:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8005230:	d030      	beq.n	8005294 <HAL_TIM_Base_Init+0x90>
 8005232:	f5a1 417c 	sub.w	r1, r1, #64512	@ 0xfc00
 8005236:	428a      	cmp	r2, r1
 8005238:	d02c      	beq.n	8005294 <HAL_TIM_Base_Init+0x90>
 800523a:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800523e:	428a      	cmp	r2, r1
 8005240:	d028      	beq.n	8005294 <HAL_TIM_Base_Init+0x90>
 8005242:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005246:	428a      	cmp	r2, r1
 8005248:	d024      	beq.n	8005294 <HAL_TIM_Base_Init+0x90>
 800524a:	f501 4178 	add.w	r1, r1, #63488	@ 0xf800
 800524e:	428a      	cmp	r2, r1
 8005250:	d051      	beq.n	80052f6 <HAL_TIM_Base_Init+0xf2>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005252:	f501 5170 	add.w	r1, r1, #15360	@ 0x3c00
 8005256:	428a      	cmp	r2, r1
 8005258:	d020      	beq.n	800529c <HAL_TIM_Base_Init+0x98>
 800525a:	4935      	ldr	r1, [pc, #212]	@ (8005330 <HAL_TIM_Base_Init+0x12c>)
 800525c:	428a      	cmp	r2, r1
 800525e:	d01d      	beq.n	800529c <HAL_TIM_Base_Init+0x98>
 8005260:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005264:	428a      	cmp	r2, r1
 8005266:	d019      	beq.n	800529c <HAL_TIM_Base_Init+0x98>
 8005268:	f5a1 3198 	sub.w	r1, r1, #77824	@ 0x13000
 800526c:	428a      	cmp	r2, r1
 800526e:	d015      	beq.n	800529c <HAL_TIM_Base_Init+0x98>
 8005270:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005274:	428a      	cmp	r2, r1
 8005276:	d011      	beq.n	800529c <HAL_TIM_Base_Init+0x98>
 8005278:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800527c:	428a      	cmp	r2, r1
 800527e:	d00d      	beq.n	800529c <HAL_TIM_Base_Init+0x98>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005280:	69a5      	ldr	r5, [r4, #24]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005282:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005284:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005286:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800528a:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800528c:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800528e:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005290:	6291      	str	r1, [r2, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005292:	e010      	b.n	80052b6 <HAL_TIM_Base_Init+0xb2>
    tmpcr1 |= Structure->CounterMode;
 8005294:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005296:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800529a:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800529c:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800529e:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 80052a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052a4:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052aa:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052ac:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 80052ae:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 80052b0:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052b2:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80052b4:	6291      	str	r1, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052b6:	2301      	movs	r3, #1
 80052b8:	6153      	str	r3, [r2, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80052ba:	6913      	ldr	r3, [r2, #16]
 80052bc:	07db      	lsls	r3, r3, #31
 80052be:	d503      	bpl.n	80052c8 <HAL_TIM_Base_Init+0xc4>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80052c0:	6913      	ldr	r3, [r2, #16]
 80052c2:	f023 0301 	bic.w	r3, r3, #1
 80052c6:	6113      	str	r3, [r2, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052c8:	2301      	movs	r3, #1
 80052ca:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052ce:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80052d2:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80052d6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80052da:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052de:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80052e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80052e6:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80052ea:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 80052ee:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80052f2:	2000      	movs	r0, #0
}
 80052f4:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 80052f6:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052f8:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80052fe:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8005300:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005304:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005306:	69a1      	ldr	r1, [r4, #24]
 8005308:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800530c:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 800530e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005310:	68e3      	ldr	r3, [r4, #12]
 8005312:	62d3      	str	r3, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005314:	6863      	ldr	r3, [r4, #4]
 8005316:	6293      	str	r3, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8005318:	6963      	ldr	r3, [r4, #20]
 800531a:	6313      	str	r3, [r2, #48]	@ 0x30
 800531c:	e7cb      	b.n	80052b6 <HAL_TIM_Base_Init+0xb2>
    htim->Lock = HAL_UNLOCKED;
 800531e:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005322:	f7fe fa85 	bl	8003830 <HAL_TIM_Base_MspInit>
 8005326:	e779      	b.n	800521c <HAL_TIM_Base_Init+0x18>
    return HAL_ERROR;
 8005328:	2001      	movs	r0, #1
}
 800532a:	4770      	bx	lr
 800532c:	40010000 	.word	0x40010000
 8005330:	40014400 	.word	0x40014400

08005334 <HAL_TIM_PWM_MspInit>:
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
 8005334:	4770      	bx	lr
 8005336:	bf00      	nop

08005338 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8005338:	2800      	cmp	r0, #0
 800533a:	f000 808f 	beq.w	800545c <HAL_TIM_PWM_Init+0x124>
{
 800533e:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8005340:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8005344:	4604      	mov	r4, r0
 8005346:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800534a:	2b00      	cmp	r3, #0
 800534c:	f000 8081 	beq.w	8005452 <HAL_TIM_PWM_Init+0x11a>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005350:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005352:	4943      	ldr	r1, [pc, #268]	@ (8005460 <HAL_TIM_PWM_Init+0x128>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005354:	2302      	movs	r3, #2
 8005356:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800535a:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 800535c:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800535e:	d064      	beq.n	800542a <HAL_TIM_PWM_Init+0xf2>
 8005360:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8005364:	d030      	beq.n	80053c8 <HAL_TIM_PWM_Init+0x90>
 8005366:	f5a1 417c 	sub.w	r1, r1, #64512	@ 0xfc00
 800536a:	428a      	cmp	r2, r1
 800536c:	d02c      	beq.n	80053c8 <HAL_TIM_PWM_Init+0x90>
 800536e:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005372:	428a      	cmp	r2, r1
 8005374:	d028      	beq.n	80053c8 <HAL_TIM_PWM_Init+0x90>
 8005376:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800537a:	428a      	cmp	r2, r1
 800537c:	d024      	beq.n	80053c8 <HAL_TIM_PWM_Init+0x90>
 800537e:	f501 4178 	add.w	r1, r1, #63488	@ 0xf800
 8005382:	428a      	cmp	r2, r1
 8005384:	d051      	beq.n	800542a <HAL_TIM_PWM_Init+0xf2>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005386:	f501 5170 	add.w	r1, r1, #15360	@ 0x3c00
 800538a:	428a      	cmp	r2, r1
 800538c:	d020      	beq.n	80053d0 <HAL_TIM_PWM_Init+0x98>
 800538e:	4935      	ldr	r1, [pc, #212]	@ (8005464 <HAL_TIM_PWM_Init+0x12c>)
 8005390:	428a      	cmp	r2, r1
 8005392:	d01d      	beq.n	80053d0 <HAL_TIM_PWM_Init+0x98>
 8005394:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005398:	428a      	cmp	r2, r1
 800539a:	d019      	beq.n	80053d0 <HAL_TIM_PWM_Init+0x98>
 800539c:	f5a1 3198 	sub.w	r1, r1, #77824	@ 0x13000
 80053a0:	428a      	cmp	r2, r1
 80053a2:	d015      	beq.n	80053d0 <HAL_TIM_PWM_Init+0x98>
 80053a4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80053a8:	428a      	cmp	r2, r1
 80053aa:	d011      	beq.n	80053d0 <HAL_TIM_PWM_Init+0x98>
 80053ac:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80053b0:	428a      	cmp	r2, r1
 80053b2:	d00d      	beq.n	80053d0 <HAL_TIM_PWM_Init+0x98>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053b4:	69a5      	ldr	r5, [r4, #24]
  TIMx->PSC = Structure->Prescaler;
 80053b6:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053b8:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80053be:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80053c0:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053c2:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80053c4:	6291      	str	r1, [r2, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053c6:	e010      	b.n	80053ea <HAL_TIM_PWM_Init+0xb2>
    tmpcr1 |= Structure->CounterMode;
 80053c8:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80053ce:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053d0:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053d2:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 80053d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053d8:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053de:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053e0:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 80053e2:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 80053e4:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053e6:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80053e8:	6291      	str	r1, [r2, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 80053ea:	2301      	movs	r3, #1
 80053ec:	6153      	str	r3, [r2, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80053ee:	6913      	ldr	r3, [r2, #16]
 80053f0:	07db      	lsls	r3, r3, #31
 80053f2:	d503      	bpl.n	80053fc <HAL_TIM_PWM_Init+0xc4>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80053f4:	6913      	ldr	r3, [r2, #16]
 80053f6:	f023 0301 	bic.w	r3, r3, #1
 80053fa:	6113      	str	r3, [r2, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053fc:	2301      	movs	r3, #1
 80053fe:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005402:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8005406:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800540a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800540e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005412:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005416:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800541a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800541e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8005422:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8005426:	2000      	movs	r0, #0
}
 8005428:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 800542a:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800542c:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800542e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8005432:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8005434:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005438:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800543a:	69a1      	ldr	r1, [r4, #24]
 800543c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005440:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8005442:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005444:	68e3      	ldr	r3, [r4, #12]
 8005446:	62d3      	str	r3, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005448:	6863      	ldr	r3, [r4, #4]
 800544a:	6293      	str	r3, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800544c:	6963      	ldr	r3, [r4, #20]
 800544e:	6313      	str	r3, [r2, #48]	@ 0x30
 8005450:	e7cb      	b.n	80053ea <HAL_TIM_PWM_Init+0xb2>
    htim->Lock = HAL_UNLOCKED;
 8005452:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8005456:	f7ff ff6d 	bl	8005334 <HAL_TIM_PWM_MspInit>
 800545a:	e779      	b.n	8005350 <HAL_TIM_PWM_Init+0x18>
    return HAL_ERROR;
 800545c:	2001      	movs	r0, #1
}
 800545e:	4770      	bx	lr
 8005460:	40010000 	.word	0x40010000
 8005464:	40014400 	.word	0x40014400

08005468 <HAL_TIM_Encoder_Init>:
  if (htim == NULL)
 8005468:	2800      	cmp	r0, #0
 800546a:	f000 80b6 	beq.w	80055da <HAL_TIM_Encoder_Init+0x172>
{
 800546e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8005470:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8005474:	460d      	mov	r5, r1
 8005476:	4604      	mov	r4, r0
 8005478:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800547c:	2b00      	cmp	r3, #0
 800547e:	f000 80a7 	beq.w	80055d0 <HAL_TIM_Encoder_Init+0x168>
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005482:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005484:	4956      	ldr	r1, [pc, #344]	@ (80055e0 <HAL_TIM_Encoder_Init+0x178>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005486:	2202      	movs	r2, #2
 8005488:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800548c:	689a      	ldr	r2, [r3, #8]
 800548e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005492:	f022 0207 	bic.w	r2, r2, #7
 8005496:	609a      	str	r2, [r3, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005498:	428b      	cmp	r3, r1
  tmpcr1 = TIMx->CR1;
 800549a:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800549c:	f000 8084 	beq.w	80055a8 <HAL_TIM_Encoder_Init+0x140>
 80054a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054a4:	d030      	beq.n	8005508 <HAL_TIM_Encoder_Init+0xa0>
 80054a6:	f5a1 417c 	sub.w	r1, r1, #64512	@ 0xfc00
 80054aa:	428b      	cmp	r3, r1
 80054ac:	d02c      	beq.n	8005508 <HAL_TIM_Encoder_Init+0xa0>
 80054ae:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80054b2:	428b      	cmp	r3, r1
 80054b4:	d028      	beq.n	8005508 <HAL_TIM_Encoder_Init+0xa0>
 80054b6:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80054ba:	428b      	cmp	r3, r1
 80054bc:	d024      	beq.n	8005508 <HAL_TIM_Encoder_Init+0xa0>
 80054be:	f501 4178 	add.w	r1, r1, #63488	@ 0xf800
 80054c2:	428b      	cmp	r3, r1
 80054c4:	d070      	beq.n	80055a8 <HAL_TIM_Encoder_Init+0x140>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054c6:	f501 5170 	add.w	r1, r1, #15360	@ 0x3c00
 80054ca:	428b      	cmp	r3, r1
 80054cc:	d020      	beq.n	8005510 <HAL_TIM_Encoder_Init+0xa8>
 80054ce:	4945      	ldr	r1, [pc, #276]	@ (80055e4 <HAL_TIM_Encoder_Init+0x17c>)
 80054d0:	428b      	cmp	r3, r1
 80054d2:	d01d      	beq.n	8005510 <HAL_TIM_Encoder_Init+0xa8>
 80054d4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80054d8:	428b      	cmp	r3, r1
 80054da:	d019      	beq.n	8005510 <HAL_TIM_Encoder_Init+0xa8>
 80054dc:	f5a1 3198 	sub.w	r1, r1, #77824	@ 0x13000
 80054e0:	428b      	cmp	r3, r1
 80054e2:	d015      	beq.n	8005510 <HAL_TIM_Encoder_Init+0xa8>
 80054e4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80054e8:	428b      	cmp	r3, r1
 80054ea:	d011      	beq.n	8005510 <HAL_TIM_Encoder_Init+0xa8>
 80054ec:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80054f0:	428b      	cmp	r3, r1
 80054f2:	d00d      	beq.n	8005510 <HAL_TIM_Encoder_Init+0xa8>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054f4:	69a0      	ldr	r0, [r4, #24]
  TIMx->PSC = Structure->Prescaler;
 80054f6:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054f8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80054fc:	4302      	orrs	r2, r0
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054fe:	68e0      	ldr	r0, [r4, #12]
  TIMx->CR1 = tmpcr1;
 8005500:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005502:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005504:	6299      	str	r1, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005506:	e010      	b.n	800552a <HAL_TIM_Encoder_Init+0xc2>
    tmpcr1 |= Structure->CounterMode;
 8005508:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800550a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800550e:	430a      	orrs	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005510:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005512:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005516:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005518:	69a1      	ldr	r1, [r4, #24]
 800551a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800551e:	430a      	orrs	r2, r1
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005520:	68e1      	ldr	r1, [r4, #12]
  TIMx->CR1 = tmpcr1;
 8005522:	601a      	str	r2, [r3, #0]
  TIMx->PSC = Structure->Prescaler;
 8005524:	6862      	ldr	r2, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005526:	62d9      	str	r1, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005528:	629a      	str	r2, [r3, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 800552a:	2201      	movs	r2, #1
 800552c:	615a      	str	r2, [r3, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800552e:	691a      	ldr	r2, [r3, #16]
 8005530:	07d2      	lsls	r2, r2, #31
 8005532:	d503      	bpl.n	800553c <HAL_TIM_Encoder_Init+0xd4>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005534:	691a      	ldr	r2, [r3, #16]
 8005536:	f022 0201 	bic.w	r2, r2, #1
 800553a:	611a      	str	r2, [r3, #16]
  tmpsmcr = htim->Instance->SMCR;
 800553c:	689e      	ldr	r6, [r3, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 800553e:	6999      	ldr	r1, [r3, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005540:	69a8      	ldr	r0, [r5, #24]
 8005542:	68aa      	ldr	r2, [r5, #8]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005544:	6a2f      	ldr	r7, [r5, #32]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005546:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
 800554a:	f021 0103 	bic.w	r1, r1, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800554e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8005552:	430a      	orrs	r2, r1
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005554:	f422 417c 	bic.w	r1, r2, #64512	@ 0xfc00
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005558:	692a      	ldr	r2, [r5, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800555a:	69e8      	ldr	r0, [r5, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800555c:	0112      	lsls	r2, r2, #4
 800555e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8005562:	68e8      	ldr	r0, [r5, #12]
 8005564:	4302      	orrs	r2, r0
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005566:	f021 01fc 	bic.w	r1, r1, #252	@ 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800556a:	ea42 3207 	orr.w	r2, r2, r7, lsl #12
  tmpccer = htim->Instance->CCER;
 800556e:	6a18      	ldr	r0, [r3, #32]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005570:	696f      	ldr	r7, [r5, #20]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005572:	430a      	orrs	r2, r1
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005574:	6869      	ldr	r1, [r5, #4]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005576:	f020 00aa 	bic.w	r0, r0, #170	@ 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800557a:	ea41 1107 	orr.w	r1, r1, r7, lsl #4
 800557e:	4308      	orrs	r0, r1
  tmpsmcr |= sConfig->EncoderMode;
 8005580:	6829      	ldr	r1, [r5, #0]
 8005582:	430e      	orrs	r6, r1
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005584:	2101      	movs	r1, #1
  htim->Instance->SMCR = tmpsmcr;
 8005586:	609e      	str	r6, [r3, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 8005588:	619a      	str	r2, [r3, #24]
  htim->Instance->CCER = tmpccer;
 800558a:	6218      	str	r0, [r3, #32]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800558c:	f884 1046 	strb.w	r1, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005590:	f884 103e 	strb.w	r1, [r4, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005594:	f884 103f 	strb.w	r1, [r4, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005598:	f884 1042 	strb.w	r1, [r4, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800559c:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
  htim->State = HAL_TIM_STATE_READY;
 80055a0:	f884 103d 	strb.w	r1, [r4, #61]	@ 0x3d
  return HAL_OK;
 80055a4:	2000      	movs	r0, #0
}
 80055a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 |= Structure->CounterMode;
 80055a8:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055aa:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80055ae:	430a      	orrs	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055b0:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80055b2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055b6:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055b8:	69a1      	ldr	r1, [r4, #24]
 80055ba:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80055be:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 80055c0:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055c2:	68e2      	ldr	r2, [r4, #12]
 80055c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80055c6:	6862      	ldr	r2, [r4, #4]
 80055c8:	629a      	str	r2, [r3, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80055ca:	6962      	ldr	r2, [r4, #20]
 80055cc:	631a      	str	r2, [r3, #48]	@ 0x30
 80055ce:	e7ac      	b.n	800552a <HAL_TIM_Encoder_Init+0xc2>
    htim->Lock = HAL_UNLOCKED;
 80055d0:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 80055d4:	f7fe f944 	bl	8003860 <HAL_TIM_Encoder_MspInit>
 80055d8:	e753      	b.n	8005482 <HAL_TIM_Encoder_Init+0x1a>
    return HAL_ERROR;
 80055da:	2001      	movs	r0, #1
}
 80055dc:	4770      	bx	lr
 80055de:	bf00      	nop
 80055e0:	40010000 	.word	0x40010000
 80055e4:	40014400 	.word	0x40014400

080055e8 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 80055e8:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	f000 80c6 	beq.w	800577e <HAL_TIM_PWM_ConfigChannel+0x196>
 80055f2:	2301      	movs	r3, #1
{
 80055f4:	b570      	push	{r4, r5, r6, lr}
 80055f6:	4684      	mov	ip, r0
  __HAL_LOCK(htim);
 80055f8:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 80055fc:	2a0c      	cmp	r2, #12
 80055fe:	d808      	bhi.n	8005612 <HAL_TIM_PWM_ConfigChannel+0x2a>
 8005600:	e8df f002 	tbb	[pc, r2]
 8005604:	0707073e 	.word	0x0707073e
 8005608:	07070767 	.word	0x07070767
 800560c:	07070793 	.word	0x07070793
 8005610:	0c          	.byte	0x0c
 8005611:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 8005612:	2300      	movs	r3, #0
 8005614:	f88c 303c 	strb.w	r3, [ip, #60]	@ 0x3c
  switch (Channel)
 8005618:	2001      	movs	r0, #1
}
 800561a:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800561c:	6803      	ldr	r3, [r0, #0]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800561e:	680d      	ldr	r5, [r1, #0]
  tmpccer = TIMx->CCER;
 8005620:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005622:	6a18      	ldr	r0, [r3, #32]
 8005624:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 8005628:	6218      	str	r0, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800562a:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 800562c:	69d8      	ldr	r0, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800562e:	f420 40e6 	bic.w	r0, r0, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005632:	ea40 2005 	orr.w	r0, r0, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005636:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8005638:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800563c:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005640:	4d6a      	ldr	r5, [pc, #424]	@ (80057ec <HAL_TIM_PWM_ConfigChannel+0x204>)
 8005642:	42ab      	cmp	r3, r5
 8005644:	f000 80bc 	beq.w	80057c0 <HAL_TIM_PWM_ConfigChannel+0x1d8>
 8005648:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800564c:	42ab      	cmp	r3, r5
 800564e:	f000 80b7 	beq.w	80057c0 <HAL_TIM_PWM_ConfigChannel+0x1d8>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005652:	605c      	str	r4, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005654:	61d8      	str	r0, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005656:	6848      	ldr	r0, [r1, #4]
 8005658:	6418      	str	r0, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800565a:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800565c:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800565e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005660:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005664:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005666:	69da      	ldr	r2, [r3, #28]
 8005668:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800566c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800566e:	69da      	ldr	r2, [r3, #28]
 8005670:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005674:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8005676:	2300      	movs	r3, #0
 8005678:	f88c 303c 	strb.w	r3, [ip, #60]	@ 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 800567c:	2000      	movs	r0, #0
}
 800567e:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005680:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8005682:	680d      	ldr	r5, [r1, #0]
  tmpccer = TIMx->CCER;
 8005684:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005686:	6a18      	ldr	r0, [r3, #32]
 8005688:	f020 0001 	bic.w	r0, r0, #1
 800568c:	6218      	str	r0, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800568e:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8005690:	6998      	ldr	r0, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005692:	f020 0073 	bic.w	r0, r0, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 8005696:	4328      	orrs	r0, r5
  tmpccer |= OC_Config->OCPolarity;
 8005698:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 800569a:	f022 0202 	bic.w	r2, r2, #2
  tmpccer |= OC_Config->OCPolarity;
 800569e:	432a      	orrs	r2, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80056a0:	4d52      	ldr	r5, [pc, #328]	@ (80057ec <HAL_TIM_PWM_ConfigChannel+0x204>)
 80056a2:	42ab      	cmp	r3, r5
 80056a4:	d06d      	beq.n	8005782 <HAL_TIM_PWM_ConfigChannel+0x19a>
 80056a6:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80056aa:	42ab      	cmp	r3, r5
 80056ac:	d069      	beq.n	8005782 <HAL_TIM_PWM_ConfigChannel+0x19a>
  TIMx->CR2 = tmpcr2;
 80056ae:	605c      	str	r4, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 80056b0:	6198      	str	r0, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 80056b2:	6848      	ldr	r0, [r1, #4]
 80056b4:	6358      	str	r0, [r3, #52]	@ 0x34
  TIMx->CCER = tmpccer;
 80056b6:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80056b8:	699a      	ldr	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80056ba:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80056bc:	f042 0208 	orr.w	r2, r2, #8
 80056c0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80056c2:	699a      	ldr	r2, [r3, #24]
 80056c4:	f022 0204 	bic.w	r2, r2, #4
 80056c8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80056ca:	699a      	ldr	r2, [r3, #24]
 80056cc:	430a      	orrs	r2, r1
 80056ce:	619a      	str	r2, [r3, #24]
      break;
 80056d0:	e7d1      	b.n	8005676 <HAL_TIM_PWM_ConfigChannel+0x8e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80056d2:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056d4:	680d      	ldr	r5, [r1, #0]
  tmpccer = TIMx->CCER;
 80056d6:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056d8:	6a18      	ldr	r0, [r3, #32]
 80056da:	f020 0010 	bic.w	r0, r0, #16
 80056de:	6218      	str	r0, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80056e0:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 80056e2:	6998      	ldr	r0, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80056e4:	f420 40e6 	bic.w	r0, r0, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056e8:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80056ec:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80056ee:	f022 0220 	bic.w	r2, r2, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80056f2:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80056f6:	4d3d      	ldr	r5, [pc, #244]	@ (80057ec <HAL_TIM_PWM_ConfigChannel+0x204>)
 80056f8:	42ab      	cmp	r3, r5
 80056fa:	d051      	beq.n	80057a0 <HAL_TIM_PWM_ConfigChannel+0x1b8>
 80056fc:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8005700:	42ab      	cmp	r3, r5
 8005702:	d04d      	beq.n	80057a0 <HAL_TIM_PWM_ConfigChannel+0x1b8>
  TIMx->CR2 = tmpcr2;
 8005704:	605c      	str	r4, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005706:	6198      	str	r0, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8005708:	6848      	ldr	r0, [r1, #4]
 800570a:	6398      	str	r0, [r3, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 800570c:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800570e:	699a      	ldr	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005710:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005712:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005716:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005718:	699a      	ldr	r2, [r3, #24]
 800571a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800571e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005720:	699a      	ldr	r2, [r3, #24]
 8005722:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005726:	619a      	str	r2, [r3, #24]
      break;
 8005728:	e7a5      	b.n	8005676 <HAL_TIM_PWM_ConfigChannel+0x8e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800572a:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 800572c:	680d      	ldr	r5, [r1, #0]
  tmpccer = TIMx->CCER;
 800572e:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005730:	6a18      	ldr	r0, [r3, #32]
 8005732:	f420 7080 	bic.w	r0, r0, #256	@ 0x100
 8005736:	6218      	str	r0, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005738:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 800573a:	69d8      	ldr	r0, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800573c:	f020 0073 	bic.w	r0, r0, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 8005740:	4328      	orrs	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005742:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8005744:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005748:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800574c:	4d27      	ldr	r5, [pc, #156]	@ (80057ec <HAL_TIM_PWM_ConfigChannel+0x204>)
 800574e:	42ab      	cmp	r3, r5
 8005750:	d03c      	beq.n	80057cc <HAL_TIM_PWM_ConfigChannel+0x1e4>
 8005752:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8005756:	42ab      	cmp	r3, r5
 8005758:	d038      	beq.n	80057cc <HAL_TIM_PWM_ConfigChannel+0x1e4>
  TIMx->CR2 = tmpcr2;
 800575a:	605c      	str	r4, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 800575c:	61d8      	str	r0, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800575e:	6848      	ldr	r0, [r1, #4]
 8005760:	63d8      	str	r0, [r3, #60]	@ 0x3c
  TIMx->CCER = tmpccer;
 8005762:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005764:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005766:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005768:	f042 0208 	orr.w	r2, r2, #8
 800576c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800576e:	69da      	ldr	r2, [r3, #28]
 8005770:	f022 0204 	bic.w	r2, r2, #4
 8005774:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005776:	69da      	ldr	r2, [r3, #28]
 8005778:	430a      	orrs	r2, r1
 800577a:	61da      	str	r2, [r3, #28]
      break;
 800577c:	e77b      	b.n	8005676 <HAL_TIM_PWM_ConfigChannel+0x8e>
  __HAL_LOCK(htim);
 800577e:	2002      	movs	r0, #2
}
 8005780:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 8005782:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8005784:	f022 0208 	bic.w	r2, r2, #8
    tmpccer |= OC_Config->OCNPolarity;
 8005788:	432a      	orrs	r2, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 800578a:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800578e:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8005792:	ea46 0e05 	orr.w	lr, r6, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8005796:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 800579a:	ea4e 0404 	orr.w	r4, lr, r4
 800579e:	e786      	b.n	80056ae <HAL_TIM_PWM_ConfigChannel+0xc6>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80057a0:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80057a2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80057a6:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80057aa:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80057ae:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80057b2:	ea46 0e05 	orr.w	lr, r6, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 80057b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80057ba:	ea44 048e 	orr.w	r4, r4, lr, lsl #2
 80057be:	e7a1      	b.n	8005704 <HAL_TIM_PWM_ConfigChannel+0x11c>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80057c0:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80057c2:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80057c6:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 80057ca:	e742      	b.n	8005652 <HAL_TIM_PWM_ConfigChannel+0x6a>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80057cc:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80057ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80057d2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80057d6:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80057da:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80057de:	ea46 0e05 	orr.w	lr, r6, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 80057e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80057e6:	ea44 140e 	orr.w	r4, r4, lr, lsl #4
 80057ea:	e7b6      	b.n	800575a <HAL_TIM_PWM_ConfigChannel+0x172>
 80057ec:	40010000 	.word	0x40010000

080057f0 <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 80057f0:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 80057f4:	2a01      	cmp	r2, #1
 80057f6:	d050      	beq.n	800589a <HAL_TIM_SlaveConfigSynchro+0xaa>
 80057f8:	4603      	mov	r3, r0
{
 80057fa:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 80057fc:	2202      	movs	r2, #2
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057fe:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  __HAL_LOCK(htim);
 8005804:	2001      	movs	r0, #1
 8005806:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
  tmpsmcr = htim->Instance->SMCR;
 800580a:	68a2      	ldr	r2, [r4, #8]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800580c:	6848      	ldr	r0, [r1, #4]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800580e:	680d      	ldr	r5, [r1, #0]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005810:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005814:	4302      	orrs	r2, r0
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005816:	f022 0207 	bic.w	r2, r2, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800581a:	432a      	orrs	r2, r5

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800581c:	2850      	cmp	r0, #80	@ 0x50
  htim->Instance->SMCR = tmpsmcr;
 800581e:	60a2      	str	r2, [r4, #8]
  switch (sSlaveConfig->InputTrigger)
 8005820:	d060      	beq.n	80058e4 <HAL_TIM_SlaveConfigSynchro+0xf4>
 8005822:	d90f      	bls.n	8005844 <HAL_TIM_SlaveConfigSynchro+0x54>
 8005824:	2860      	cmp	r0, #96	@ 0x60
 8005826:	d03a      	beq.n	800589e <HAL_TIM_SlaveConfigSynchro+0xae>
 8005828:	2870      	cmp	r0, #112	@ 0x70
 800582a:	d10e      	bne.n	800584a <HAL_TIM_SlaveConfigSynchro+0x5a>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800582c:	e9d1 5202 	ldrd	r5, r2, [r1, #8]
  tmpsmcr = TIMx->SMCR;
 8005830:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005832:	432a      	orrs	r2, r5
 8005834:	690d      	ldr	r5, [r1, #16]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005836:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800583a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 800583e:	430a      	orrs	r2, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005840:	60a2      	str	r2, [r4, #8]
 8005842:	e00f      	b.n	8005864 <HAL_TIM_SlaveConfigSynchro+0x74>
  switch (sSlaveConfig->InputTrigger)
 8005844:	2840      	cmp	r0, #64	@ 0x40
 8005846:	d03d      	beq.n	80058c4 <HAL_TIM_SlaveConfigSynchro+0xd4>
 8005848:	d907      	bls.n	800585a <HAL_TIM_SlaveConfigSynchro+0x6a>
    htim->State = HAL_TIM_STATE_READY;
 800584a:	2001      	movs	r0, #1
    __HAL_UNLOCK(htim);
 800584c:	2200      	movs	r2, #0
    htim->State = HAL_TIM_STATE_READY;
 800584e:	f883 003d 	strb.w	r0, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8005852:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8005856:	bc30      	pop	{r4, r5}
 8005858:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 800585a:	2820      	cmp	r0, #32
 800585c:	d002      	beq.n	8005864 <HAL_TIM_SlaveConfigSynchro+0x74>
 800585e:	d912      	bls.n	8005886 <HAL_TIM_SlaveConfigSynchro+0x96>
 8005860:	2830      	cmp	r0, #48	@ 0x30
 8005862:	d1f2      	bne.n	800584a <HAL_TIM_SlaveConfigSynchro+0x5a>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005864:	68e2      	ldr	r2, [r4, #12]
 8005866:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800586a:	60e2      	str	r2, [r4, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800586c:	68e2      	ldr	r2, [r4, #12]
  __HAL_UNLOCK(htim);
 800586e:	2100      	movs	r1, #0
  htim->State = HAL_TIM_STATE_READY;
 8005870:	2501      	movs	r5, #1
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005872:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005876:	60e2      	str	r2, [r4, #12]
  htim->State = HAL_TIM_STATE_READY;
 8005878:	f883 503d 	strb.w	r5, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 800587c:	f883 103c 	strb.w	r1, [r3, #60]	@ 0x3c
  return HAL_OK;
 8005880:	4608      	mov	r0, r1
}
 8005882:	bc30      	pop	{r4, r5}
 8005884:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 8005886:	f030 0210 	bics.w	r2, r0, #16
 800588a:	d0eb      	beq.n	8005864 <HAL_TIM_SlaveConfigSynchro+0x74>
    htim->State = HAL_TIM_STATE_READY;
 800588c:	2001      	movs	r0, #1
    __HAL_UNLOCK(htim);
 800588e:	2200      	movs	r2, #0
    htim->State = HAL_TIM_STATE_READY;
 8005890:	f883 003d 	strb.w	r0, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8005894:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8005898:	e7dd      	b.n	8005856 <HAL_TIM_SlaveConfigSynchro+0x66>
  __HAL_LOCK(htim);
 800589a:	2002      	movs	r0, #2
}
 800589c:	4770      	bx	lr
  tmpccer = TIMx->CCER;
 800589e:	6a22      	ldr	r2, [r4, #32]
                               sSlaveConfig->TriggerPolarity,
 80058a0:	688d      	ldr	r5, [r1, #8]
                               sSlaveConfig->TriggerFilter);
 80058a2:	6908      	ldr	r0, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058a4:	6a21      	ldr	r1, [r4, #32]
 80058a6:	f021 0110 	bic.w	r1, r1, #16
 80058aa:	6221      	str	r1, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058ac:	69a1      	ldr	r1, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80058ae:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80058b2:	f421 4170 	bic.w	r1, r1, #61440	@ 0xf000
  tmpccer |= (TIM_ICPolarity << 4U);
 80058b6:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80058ba:	ea41 3100 	orr.w	r1, r1, r0, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80058be:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 80058c0:	6222      	str	r2, [r4, #32]
 80058c2:	e7cf      	b.n	8005864 <HAL_TIM_SlaveConfigSynchro+0x74>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80058c4:	2d05      	cmp	r5, #5
 80058c6:	d0c0      	beq.n	800584a <HAL_TIM_SlaveConfigSynchro+0x5a>
      tmpccer = htim->Instance->CCER;
 80058c8:	6a20      	ldr	r0, [r4, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80058ca:	6a22      	ldr	r2, [r4, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80058cc:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80058ce:	f022 0201 	bic.w	r2, r2, #1
 80058d2:	6222      	str	r2, [r4, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80058d4:	69a2      	ldr	r2, [r4, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80058d6:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80058da:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 80058de:	61a2      	str	r2, [r4, #24]
      htim->Instance->CCER = tmpccer;
 80058e0:	6220      	str	r0, [r4, #32]
      break;
 80058e2:	e7bf      	b.n	8005864 <HAL_TIM_SlaveConfigSynchro+0x74>
                               sSlaveConfig->TriggerPolarity,
 80058e4:	688a      	ldr	r2, [r1, #8]
                               sSlaveConfig->TriggerFilter);
 80058e6:	6908      	ldr	r0, [r1, #16]
  tmpccer = TIMx->CCER;
 80058e8:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80058ea:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 80058ee:	4311      	orrs	r1, r2
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058f0:	6a22      	ldr	r2, [r4, #32]
 80058f2:	f022 0201 	bic.w	r2, r2, #1
 80058f6:	6222      	str	r2, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058f8:	69a2      	ldr	r2, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80058fa:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80058fe:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8005902:	61a2      	str	r2, [r4, #24]
  TIMx->CCER = tmpccer;
 8005904:	6221      	str	r1, [r4, #32]
 8005906:	e7ad      	b.n	8005864 <HAL_TIM_SlaveConfigSynchro+0x74>

08005908 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005908:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 800590c:	2a01      	cmp	r2, #1
 800590e:	d037      	beq.n	8005980 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8005910:	4603      	mov	r3, r0

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005912:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005914:	2002      	movs	r0, #2
{
 8005916:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8005918:	f883 003d 	strb.w	r0, [r3, #61]	@ 0x3d
  tmpcr2 = htim->Instance->CR2;
 800591c:	6850      	ldr	r0, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800591e:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 8005920:	6894      	ldr	r4, [r2, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8005922:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005926:	4328      	orrs	r0, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005928:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800592a:	4816      	ldr	r0, [pc, #88]	@ (8005984 <HAL_TIMEx_MasterConfigSynchronization+0x7c>)
 800592c:	4282      	cmp	r2, r0
 800592e:	d01a      	beq.n	8005966 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8005930:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8005934:	d017      	beq.n	8005966 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8005936:	f5a0 407c 	sub.w	r0, r0, #64512	@ 0xfc00
 800593a:	4282      	cmp	r2, r0
 800593c:	d013      	beq.n	8005966 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 800593e:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8005942:	4282      	cmp	r2, r0
 8005944:	d00f      	beq.n	8005966 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8005946:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 800594a:	4282      	cmp	r2, r0
 800594c:	d00b      	beq.n	8005966 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 800594e:	f500 4078 	add.w	r0, r0, #63488	@ 0xf800
 8005952:	4282      	cmp	r2, r0
 8005954:	d007      	beq.n	8005966 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8005956:	f500 5070 	add.w	r0, r0, #15360	@ 0x3c00
 800595a:	4282      	cmp	r2, r0
 800595c:	d003      	beq.n	8005966 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 800595e:	f5a0 3094 	sub.w	r0, r0, #75776	@ 0x12800
 8005962:	4282      	cmp	r2, r0
 8005964:	d104      	bne.n	8005970 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005966:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005968:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800596c:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800596e:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8005970:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005972:	2201      	movs	r2, #1
 8005974:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8005978:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 800597c:	bc30      	pop	{r4, r5}
 800597e:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005980:	2002      	movs	r0, #2
}
 8005982:	4770      	bx	lr
 8005984:	40010000 	.word	0x40010000

08005988 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005988:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800598c:	2b01      	cmp	r3, #1
 800598e:	d023      	beq.n	80059d8 <HAL_TIMEx_ConfigBreakDeadTime+0x50>
{
 8005990:	b410      	push	{r4}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005992:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 8005996:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800599a:	4602      	mov	r2, r0
 800599c:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800599e:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80059a0:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80059a2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80059a6:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80059a8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80059ac:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80059ae:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80059b0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80059b4:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80059b6:	6948      	ldr	r0, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80059b8:	69cc      	ldr	r4, [r1, #28]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80059ba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80059be:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80059c0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80059c4:	6810      	ldr	r0, [r2, #0]

  __HAL_UNLOCK(htim);
 80059c6:	2100      	movs	r1, #0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80059c8:	4323      	orrs	r3, r4
  htim->Instance->BDTR = tmpbdtr;
 80059ca:	6443      	str	r3, [r0, #68]	@ 0x44
  __HAL_UNLOCK(htim);
 80059cc:	f882 103c 	strb.w	r1, [r2, #60]	@ 0x3c

  return HAL_OK;
 80059d0:	4608      	mov	r0, r1
}
 80059d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80059d6:	4770      	bx	lr
  __HAL_LOCK(htim);
 80059d8:	2002      	movs	r0, #2
}
 80059da:	4770      	bx	lr

080059dc <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059dc:	2800      	cmp	r0, #0
 80059de:	f000 8087 	beq.w	8005af0 <HAL_UART_Init+0x114>
{
 80059e2:	b538      	push	{r3, r4, r5, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80059e4:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80059e8:	4604      	mov	r4, r0
 80059ea:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d079      	beq.n	8005ae6 <HAL_UART_Init+0x10a>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80059f2:	6823      	ldr	r3, [r4, #0]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059f4:	68e0      	ldr	r0, [r4, #12]
  huart->gState = HAL_UART_STATE_BUSY;
 80059f6:	2224      	movs	r2, #36	@ 0x24
 80059f8:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 80059fc:	68da      	ldr	r2, [r3, #12]
 80059fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005a02:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a04:	6919      	ldr	r1, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005a06:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a08:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 8005a0c:	4301      	orrs	r1, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005a0e:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a10:	6119      	str	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005a12:	4302      	orrs	r2, r0
 8005a14:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8005a16:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005a18:	4302      	orrs	r2, r0
 8005a1a:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 8005a1c:	f421 4116 	bic.w	r1, r1, #38400	@ 0x9600
 8005a20:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005a24:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8005a26:	430a      	orrs	r2, r1
 8005a28:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a2a:	695a      	ldr	r2, [r3, #20]
 8005a2c:	69a0      	ldr	r0, [r4, #24]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a2e:	4931      	ldr	r1, [pc, #196]	@ (8005af4 <HAL_UART_Init+0x118>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a30:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005a34:	4302      	orrs	r2, r0
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a36:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a38:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a3a:	d036      	beq.n	8005aaa <HAL_UART_Init+0xce>
 8005a3c:	4a2e      	ldr	r2, [pc, #184]	@ (8005af8 <HAL_UART_Init+0x11c>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d033      	beq.n	8005aaa <HAL_UART_Init+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a42:	f7fe ff2d 	bl	80048a0 <HAL_RCC_GetPCLK1Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a46:	69e2      	ldr	r2, [r4, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005a48:	2119      	movs	r1, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a4a:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005a4e:	e9d4 5300 	ldrd	r5, r3, [r4]
 8005a52:	fba0 0101 	umull	r0, r1, r0, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a56:	d02b      	beq.n	8005ab0 <HAL_UART_Init+0xd4>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a58:	009a      	lsls	r2, r3, #2
 8005a5a:	0f9b      	lsrs	r3, r3, #30
 8005a5c:	f7fa fbd4 	bl	8000208 <__aeabi_uldivmod>
 8005a60:	4a26      	ldr	r2, [pc, #152]	@ (8005afc <HAL_UART_Init+0x120>)
 8005a62:	fba2 1300 	umull	r1, r3, r2, r0
 8005a66:	095b      	lsrs	r3, r3, #5
 8005a68:	2164      	movs	r1, #100	@ 0x64
 8005a6a:	fb01 0013 	mls	r0, r1, r3, r0
 8005a6e:	0100      	lsls	r0, r0, #4
 8005a70:	3032      	adds	r0, #50	@ 0x32
 8005a72:	fba2 2000 	umull	r2, r0, r2, r0
 8005a76:	011b      	lsls	r3, r3, #4
 8005a78:	eb03 1350 	add.w	r3, r3, r0, lsr #5
 8005a7c:	60ab      	str	r3, [r5, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a7e:	692a      	ldr	r2, [r5, #16]
 8005a80:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005a84:	612a      	str	r2, [r5, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a86:	696a      	ldr	r2, [r5, #20]
 8005a88:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005a8c:	616a      	str	r2, [r5, #20]
  __HAL_UART_ENABLE(huart);
 8005a8e:	68ea      	ldr	r2, [r5, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a90:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8005a92:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 8005a94:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005a98:	60ea      	str	r2, [r5, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a9a:	6463      	str	r3, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005a9c:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005aa0:	f884 1042 	strb.w	r1, [r4, #66]	@ 0x42
  return HAL_OK;
 8005aa4:	4618      	mov	r0, r3
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005aa6:	6363      	str	r3, [r4, #52]	@ 0x34
}
 8005aa8:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 8005aaa:	f7fe ff09 	bl	80048c0 <HAL_RCC_GetPCLK2Freq>
 8005aae:	e7ca      	b.n	8005a46 <HAL_UART_Init+0x6a>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005ab0:	18da      	adds	r2, r3, r3
 8005ab2:	f04f 0300 	mov.w	r3, #0
 8005ab6:	415b      	adcs	r3, r3
 8005ab8:	f7fa fba6 	bl	8000208 <__aeabi_uldivmod>
 8005abc:	4a0f      	ldr	r2, [pc, #60]	@ (8005afc <HAL_UART_Init+0x120>)
 8005abe:	fba2 3100 	umull	r3, r1, r2, r0
 8005ac2:	0949      	lsrs	r1, r1, #5
 8005ac4:	2364      	movs	r3, #100	@ 0x64
 8005ac6:	fb03 0311 	mls	r3, r3, r1, r0
 8005aca:	00db      	lsls	r3, r3, #3
 8005acc:	3332      	adds	r3, #50	@ 0x32
 8005ace:	fba2 2303 	umull	r2, r3, r2, r3
 8005ad2:	f3c3 1242 	ubfx	r2, r3, #5, #3
 8005ad6:	091b      	lsrs	r3, r3, #4
 8005ad8:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8005adc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005ae0:	4413      	add	r3, r2
 8005ae2:	60ab      	str	r3, [r5, #8]
 8005ae4:	e7cb      	b.n	8005a7e <HAL_UART_Init+0xa2>
    huart->Lock = HAL_UNLOCKED;
 8005ae6:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8005aea:	f7fe f803 	bl	8003af4 <HAL_UART_MspInit>
 8005aee:	e780      	b.n	80059f2 <HAL_UART_Init+0x16>
    return HAL_ERROR;
 8005af0:	2001      	movs	r0, #1
}
 8005af2:	4770      	bx	lr
 8005af4:	40011000 	.word	0x40011000
 8005af8:	40011400 	.word	0x40011400
 8005afc:	51eb851f 	.word	0x51eb851f

08005b00 <VBS_GetAvBusVoltage_V>:
    temp = 0U;
  }
  else
  {
#endif
    temp = (uint32_t)(pHandle->AvBusVoltage_d);
 8005b00:	88c3      	ldrh	r3, [r0, #6]
    temp *= pHandle->ConversionFactor;
 8005b02:	8840      	ldrh	r0, [r0, #2]
 8005b04:	fb03 f000 	mul.w	r0, r3, r0
    temp /= 65536U;
#ifdef NULL_PTR_CHECK_BUS_VOLT
  }
#endif
  return ((uint16_t)temp);
}
 8005b08:	0c00      	lsrs	r0, r0, #16
 8005b0a:	4770      	bx	lr

08005b0c <Circle_Limitation>:
  *  @f$v_q = \sqrt(MaxModule^2-v_d^2\ ) @f$

  *
  */
__weak qd_t Circle_Limitation(const CircleLimitation_Handle_t *pHandle, qd_t Vqd)
{
 8005b0c:	b570      	push	{r4, r5, r6, lr}
    int32_t square_limit;
    int32_t vd_square_limit;
    int32_t new_q;
    int32_t new_d;

    maxModule = (int32_t)pHandle->MaxModule;
 8005b0e:	8803      	ldrh	r3, [r0, #0]
 8005b10:	140d      	asrs	r5, r1, #16
 8005b12:	b20c      	sxth	r4, r1

    square_q = ((int32_t)(Vqd.q)) * Vqd.q;
    square_d = ((int32_t)(Vqd.d)) * Vqd.d;
 8005b14:	fb05 f205 	mul.w	r2, r5, r5
    square_limit = maxModule * maxModule;
 8005b18:	fb03 f303 	mul.w	r3, r3, r3
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
    square_sum = square_q + square_d;
 8005b1c:	fb04 2104 	mla	r1, r4, r4, r2

    if (square_sum > square_limit)
 8005b20:	428b      	cmp	r3, r1
{
 8005b22:	b084      	sub	sp, #16
    if (square_sum > square_limit)
 8005b24:	da0f      	bge.n	8005b46 <Circle_Limitation+0x3a>
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
 8005b26:	8846      	ldrh	r6, [r0, #2]
 8005b28:	fb06 f006 	mul.w	r0, r6, r6
    {
      if (square_d <= vd_square_limit)
 8005b2c:	4282      	cmp	r2, r0
 8005b2e:	dd13      	ble.n	8005b58 <Circle_Limitation+0x4c>
        new_d = Vqd.d;
      }
      else
      {
        new_d = (int32_t)pHandle->MaxVd;
        if (Vqd.d < 0)
 8005b30:	2d00      	cmp	r5, #0
#if defined CIRCLE_LIMITATION_SQRT_M0
        square_temp = (square_limit - vd_square_limit) / 1048576;
        new_q = SqrtTable[square_temp];
#else
        square_temp = square_limit - vd_square_limit;
        new_q = MCM_Sqrt(square_temp);
 8005b32:	eba3 0000 	sub.w	r0, r3, r0
          new_d = -new_d;
 8005b36:	bfb8      	it	lt
 8005b38:	4276      	neglt	r6, r6
        new_q = MCM_Sqrt(square_temp);
 8005b3a:	f7fb fc89 	bl	8001450 <MCM_Sqrt>
#endif
        if (Vqd.q < 0)
 8005b3e:	2c00      	cmp	r4, #0
        {
          /* Nothing to do */
        }
      }
      local_vqd.q = (int16_t)new_q;
      local_vqd.d = (int16_t)new_d;
 8005b40:	b235      	sxth	r5, r6
        if (Vqd.q < 0)
 8005b42:	db0e      	blt.n	8005b62 <Circle_Limitation+0x56>
      local_vqd.q = (int16_t)new_q;
 8005b44:	b204      	sxth	r4, r0
    }
#ifdef NULL_PTR_CHECK_CRC_LIM
  }
#endif
  return (local_vqd);
 8005b46:	b2a4      	uxth	r4, r4
 8005b48:	2000      	movs	r0, #0
 8005b4a:	f364 000f 	bfi	r0, r4, #0, #16
 8005b4e:	b2ad      	uxth	r5, r5
 8005b50:	f365 401f 	bfi	r0, r5, #16, #16
}
 8005b54:	b004      	add	sp, #16
 8005b56:	bd70      	pop	{r4, r5, r6, pc}
        new_q = MCM_Sqrt(square_temp);
 8005b58:	1a98      	subs	r0, r3, r2
 8005b5a:	f7fb fc79 	bl	8001450 <MCM_Sqrt>
        if (Vqd.q < 0)
 8005b5e:	2c00      	cmp	r4, #0
 8005b60:	daf0      	bge.n	8005b44 <Circle_Limitation+0x38>
          new_q = - new_q;
 8005b62:	4240      	negs	r0, r0
      local_vqd.q = (int16_t)new_q;
 8005b64:	b204      	sxth	r4, r0
      local_vqd.d = (int16_t)new_d;
 8005b66:	e7ee      	b.n	8005b46 <Circle_Limitation+0x3a>

08005b68 <EAC_Init>:
  {
#endif
    pHandle->pSTC = pSTC;
    pHandle->pVSS = pVSS;
    pHandle->pENC = pENC;
    pHandle->EncAligned = false;
 8005b68:	f04f 0c00 	mov.w	ip, #0
    pHandle->pVSS = pVSS;
 8005b6c:	e9c0 1200 	strd	r1, r2, [r0]
    pHandle->pENC = pENC;
 8005b70:	6083      	str	r3, [r0, #8]
    pHandle->EncAligned = false;
 8005b72:	f8a0 c00e 	strh.w	ip, [r0, #14]
    pHandle->EncRestart = false;
#ifdef NULL_PTR_CHECK_ENC_ALI_CTRL
  }
#endif
}
 8005b76:	4770      	bx	lr

08005b78 <EAC_StartAlignment>:
  * It configures the VSS (Virtual Speed Sensor) with the required angle and sets the
  * STC (Speed and Torque Controller) to execute the required torque ramp.
  * @param  pHandle: handler of the current instance of the EncAlignCtrl component.
  */
__weak void EAC_StartAlignment(EncAlign_Handle_t *pHandle)
{
 8005b78:	b510      	push	{r4, lr}
  {
#endif
    uint32_t wAux;

    /* Set pVSS mechanical speed to zero */
    VSS_SetMecAcceleration(pHandle->pVSS, 0, 0U);
 8005b7a:	2200      	movs	r2, #0
{
 8005b7c:	4604      	mov	r4, r0
    VSS_SetMecAcceleration(pHandle->pVSS, 0, 0U);
 8005b7e:	4611      	mov	r1, r2
 8005b80:	6840      	ldr	r0, [r0, #4]
 8005b82:	f001 faeb 	bl	800715c <VSS_SetMecAcceleration>

    /* Set pVSS mechanical angle */
    VSS_SetMecAngle(pHandle->pVSS, pHandle->hElAngle);
 8005b86:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8005b8a:	6860      	ldr	r0, [r4, #4]
 8005b8c:	f001 fade 	bl	800714c <VSS_SetMecAngle>

    /* Set pSTC in MCM_TORQUE_MODE */
    STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 8005b90:	6820      	ldr	r0, [r4, #0]
 8005b92:	2104      	movs	r1, #4
 8005b94:	f001 fa34 	bl	8007000 <STC_SetControlMode>

    /* Set starting torque to Zero */
    (void)STC_ExecRamp(pHandle->pSTC, 0, 0U);
 8005b98:	2200      	movs	r2, #0
 8005b9a:	4611      	mov	r1, r2
 8005b9c:	6820      	ldr	r0, [r4, #0]
 8005b9e:	f001 fa33 	bl	8007008 <STC_ExecRamp>

    /* Execute the torque ramp */
    (void)STC_ExecRamp(pHandle->pSTC, pHandle->hFinalTorque, (uint32_t)pHandle->hDurationms);
 8005ba2:	8ae2      	ldrh	r2, [r4, #22]
 8005ba4:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 8005ba8:	6820      	ldr	r0, [r4, #0]
 8005baa:	f001 fa2d 	bl	8007008 <STC_ExecRamp>
    /* Compute hRemainingTicks, the number of thick of alignment phase */
    wAux = ((uint32_t)pHandle->hDurationms) * ((uint32_t)pHandle->hEACFrequencyHz);
 8005bae:	8ae3      	ldrh	r3, [r4, #22]
 8005bb0:	8a21      	ldrh	r1, [r4, #16]
    wAux /= 1000U;
 8005bb2:	4a04      	ldr	r2, [pc, #16]	@ (8005bc4 <EAC_StartAlignment+0x4c>)
    wAux = ((uint32_t)pHandle->hDurationms) * ((uint32_t)pHandle->hEACFrequencyHz);
 8005bb4:	fb01 f303 	mul.w	r3, r1, r3
    wAux /= 1000U;
 8005bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8005bbc:	099b      	lsrs	r3, r3, #6
    pHandle->hRemainingTicks = (uint16_t)wAux;
    pHandle->hRemainingTicks++;
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	81a3      	strh	r3, [r4, #12]
#ifdef NULL_PTR_CHECK_ENC_ALI_CTRL
  }
#endif
}
 8005bc2:	bd10      	pop	{r4, pc}
 8005bc4:	10624dd3 	.word	0x10624dd3

08005bc8 <EAC_Exec>:
    retVal = false;
  }
  else
  {
#endif
    if (pHandle->hRemainingTicks > 0U)
 8005bc8:	8983      	ldrh	r3, [r0, #12]
 8005bca:	b90b      	cbnz	r3, 8005bd0 <EAC_Exec+0x8>
  bool retVal = true;
 8005bcc:	2001      	movs	r0, #1
#ifdef NULL_PTR_CHECK_ENC_ALI_CTRL
  }
#endif

  return (retVal);
}
 8005bce:	4770      	bx	lr
      pHandle->hRemainingTicks--;
 8005bd0:	3b01      	subs	r3, #1
 8005bd2:	b29b      	uxth	r3, r3
{
 8005bd4:	b510      	push	{r4, lr}
 8005bd6:	4604      	mov	r4, r0
      pHandle->hRemainingTicks--;
 8005bd8:	8183      	strh	r3, [r0, #12]
      if (0U == pHandle->hRemainingTicks)
 8005bda:	b10b      	cbz	r3, 8005be0 <EAC_Exec+0x18>
        retVal = false;
 8005bdc:	2000      	movs	r0, #0
}
 8005bde:	bd10      	pop	{r4, pc}
        ENC_SetMecAngle(pHandle->pENC, pHandle->hElAngle / ((int16_t)pHandle->bElToMecRatio));
 8005be0:	7e03      	ldrb	r3, [r0, #24]
 8005be2:	f9b0 1014 	ldrsh.w	r1, [r0, #20]
 8005be6:	6880      	ldr	r0, [r0, #8]
 8005be8:	fb91 f1f3 	sdiv	r1, r1, r3
 8005bec:	f000 f930 	bl	8005e50 <ENC_SetMecAngle>
        pHandle->EncAligned = true;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	73a3      	strb	r3, [r4, #14]
  bool retVal = true;
 8005bf4:	2001      	movs	r0, #1
}
 8005bf6:	bd10      	pop	{r4, pc}

08005bf8 <EAC_IsAligned>:
#ifdef NULL_PTR_CHECK_ENC_ALI_CTRL
  return ((NULL == pHandle) ? false : pHandle->EncAligned);
#else
  return (pHandle->EncAligned);
#endif
}
 8005bf8:	7b80      	ldrb	r0, [r0, #14]
 8005bfa:	4770      	bx	lr

08005bfc <EAC_SetRestartState>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->EncRestart = restart;
 8005bfc:	73c1      	strb	r1, [r0, #15]
#ifdef NULL_PTR_CHECK_ENC_ALI_CTRL
  }
#endif
}
 8005bfe:	4770      	bx	lr

08005c00 <ENC_Init>:
    /* Reset counter */
    LL_TIM_SetCounter(TIMx, 0);

    /*Calculations of convenience*/
    pHandle->U32MAXdivPulseNumber = UINT32_MAX / ((uint32_t) pHandle->PulseNumber);
    pHandle->SpeedSamplingFreqUnit = ((uint32_t)pHandle->SpeedSamplingFreqHz * (uint32_t)SPEED_UNIT);
 8005c00:	f8b0 206c 	ldrh.w	r2, [r0, #108]	@ 0x6c
    TIM_TypeDef *TIMx = pHandle->TIMx;
 8005c04:	6a03      	ldr	r3, [r0, #32]
    pHandle->SpeedSamplingFreqUnit = ((uint32_t)pHandle->SpeedSamplingFreqHz * (uint32_t)SPEED_UNIT);
 8005c06:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005c0a:	0052      	lsls	r2, r2, #1
  WRITE_REG(TIMx->CNT, Counter);
 8005c0c:	2100      	movs	r1, #0
{
 8005c0e:	b410      	push	{r4}
 8005c10:	6259      	str	r1, [r3, #36]	@ 0x24
    pHandle->U32MAXdivPulseNumber = UINT32_MAX / ((uint32_t) pHandle->PulseNumber);
 8005c12:	f8b0 406e 	ldrh.w	r4, [r0, #110]	@ 0x6e
    pHandle->SpeedSamplingFreqUnit = ((uint32_t)pHandle->SpeedSamplingFreqHz * (uint32_t)SPEED_UNIT);
 8005c16:	6242      	str	r2, [r0, #36]	@ 0x24
    pHandle->U32MAXdivPulseNumber = UINT32_MAX / ((uint32_t) pHandle->PulseNumber);
 8005c18:	f04f 32ff 	mov.w	r2, #4294967295
 8005c1c:	fbb2 f2f4 	udiv	r2, r2, r4
 8005c20:	6682      	str	r2, [r0, #104]	@ 0x68
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8005c22:	699c      	ldr	r4, [r3, #24]
 8005c24:	f8b0 207a 	ldrh.w	r2, [r0, #122]	@ 0x7a
 8005c28:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
 8005c2c:	ea42 020c 	orr.w	r2, r2, ip
 8005c30:	619a      	str	r2, [r3, #24]
 8005c32:	699a      	ldr	r2, [r3, #24]
 8005c34:	f8b0 407a 	ldrh.w	r4, [r0, #122]	@ 0x7a
 8005c38:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
 8005c3c:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005c40:	f06f 0401 	mvn.w	r4, #1
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8005c44:	619a      	str	r2, [r3, #24]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005c46:	611c      	str	r4, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8005c48:	68da      	ldr	r2, [r3, #12]
 8005c4a:	f042 0201 	orr.w	r2, r2, #1
 8005c4e:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	f042 0201 	orr.w	r2, r2, #1
 8005c56:	601a      	str	r2, [r3, #0]

    /* Enable the counting timer */
    LL_TIM_EnableCounter(TIMx);

    /* Erase speed buffer */
    bufferSize = pHandle->SpeedBufferSize;
 8005c58:	f890 2074 	ldrb.w	r2, [r0, #116]	@ 0x74

    for (index = 0U; index < bufferSize; index++)
 8005c5c:	b12a      	cbz	r2, 8005c6a <ENC_Init+0x6a>
      pHandle->DeltaCapturesBuffer[index] = 0;
    }
#ifdef NULL_PTR_CHECK_ENC_SPD_POS_FDB
  }
#endif
}
 8005c5e:	f85d 4b04 	ldr.w	r4, [sp], #4
      pHandle->DeltaCapturesBuffer[index] = 0;
 8005c62:	0092      	lsls	r2, r2, #2
 8005c64:	3028      	adds	r0, #40	@ 0x28
 8005c66:	f001 bb9f 	b.w	80073a8 <memset>
}
 8005c6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c6e:	4770      	bx	lr

08005c70 <ENC_Clear>:
  *         This function must be called before starting the motor to initialize
  *         the speed measurement process.
  * @param  pHandle: handler of the current instance of the encoder component
  */
__weak void ENC_Clear(ENCODER_Handle_t *pHandle)
{
 8005c70:	b510      	push	{r4, lr}
  else
  {
#endif
    uint8_t index;

    for (index = 0u; index < pHandle->SpeedBufferSize; index++)
 8005c72:	f890 2074 	ldrb.w	r2, [r0, #116]	@ 0x74
{
 8005c76:	4604      	mov	r4, r0
    for (index = 0u; index < pHandle->SpeedBufferSize; index++)
 8005c78:	b122      	cbz	r2, 8005c84 <ENC_Clear+0x14>
    {
      pHandle->DeltaCapturesBuffer[index] = 0;
 8005c7a:	0092      	lsls	r2, r2, #2
 8005c7c:	2100      	movs	r1, #0
 8005c7e:	3028      	adds	r0, #40	@ 0x28
 8005c80:	f001 fb92 	bl	80073a8 <memset>
    }
    pHandle->SensorIsReliable = true;
 8005c84:	2301      	movs	r3, #1
 8005c86:	f884 3075 	strb.w	r3, [r4, #117]	@ 0x75
#ifdef NULL_PTR_CHECK_ENC_SPD_POS_FDB
  }
#endif
}
 8005c8a:	bd10      	pop	{r4, pc}

08005c8c <ENC_CalcAngle>:
  *         of the instantaneous value of the timer counter.
  * @param  pHandle: handler of the current instance of the encoder component
  * @retval Measured electrical angle in [s16degree](measurement_units.md) format.
  */
__weak int16_t ENC_CalcAngle(ENCODER_Handle_t *pHandle)
{
 8005c8c:	b410      	push	{r4}
    int16_t mecAngle; /* s16degree format */
    uint32_t uwtemp1;
    int32_t wtemp1;
    /* PR 52926 We need to keep only the 16 LSB, bit 31 could be at 1
     if the overflow occurs just after the entry in the High frequency task */
    uwtemp1 = (LL_TIM_GetCounter(pHandle->TIMx) & 0xffffU) * (pHandle->U32MAXdivPulseNumber);
 8005c8e:	6a02      	ldr	r2, [r0, #32]
    wtemp1 = (int32_t)uwtemp1 / 65536;
#endif
    /* Computes and stores the rotor mechanical angle */
    mecAngle = (int16_t)wtemp1;

    int16_t hMecAnglePrev = pHandle->_Super.hMecAngle;
 8005c90:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
  return (uint32_t)(READ_REG(TIMx->CNT));
 8005c94:	6a52      	ldr	r2, [r2, #36]	@ 0x24
{
 8005c96:	4603      	mov	r3, r0
    uwtemp1 = (LL_TIM_GetCounter(pHandle->TIMx) & 0xffffU) * (pHandle->U32MAXdivPulseNumber);
 8005c98:	b292      	uxth	r2, r2
 8005c9a:	6e9c      	ldr	r4, [r3, #104]	@ 0x68

    pHandle->_Super.hMecAngle = mecAngle;

    /* Computes and stores the rotor electrical angle */
    elAngle = mecAngle * (int16_t)(pHandle->_Super.bElToMecRatio);
 8005c9c:	7840      	ldrb	r0, [r0, #1]
    uwtemp1 = (LL_TIM_GetCounter(pHandle->TIMx) & 0xffffU) * (pHandle->U32MAXdivPulseNumber);
 8005c9e:	fb04 f202 	mul.w	r2, r4, r2
    wtemp1 = (int32_t)uwtemp1 >> 16U;  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8005ca2:	1412      	asrs	r2, r2, #16
    elAngle = mecAngle * (int16_t)(pHandle->_Super.bElToMecRatio);
 8005ca4:	fb02 f000 	mul.w	r0, r2, r0

    pHandle->_Super.hElAngle = elAngle;

    int16_t hMecSpeedDpp = mecAngle - hMecAnglePrev;
 8005ca8:	1a51      	subs	r1, r2, r1
    mecAngle = (int16_t)wtemp1;
 8005caa:	80da      	strh	r2, [r3, #6]
    pHandle->_Super.wMecAngle += ((int32_t)hMecSpeedDpp);
 8005cac:	689a      	ldr	r2, [r3, #8]
#ifdef NULL_PTR_CHECK_ENC_SPD_POS_FDB
  }
#endif
  /*Returns rotor electrical angle*/
  return (elAngle);
}
 8005cae:	f85d 4b04 	ldr.w	r4, [sp], #4
    elAngle = mecAngle * (int16_t)(pHandle->_Super.bElToMecRatio);
 8005cb2:	b200      	sxth	r0, r0
    pHandle->_Super.wMecAngle += ((int32_t)hMecSpeedDpp);
 8005cb4:	fa02 f281 	sxtah	r2, r2, r1
    pHandle->_Super.hElAngle = elAngle;
 8005cb8:	8098      	strh	r0, [r3, #4]
    pHandle->_Super.wMecAngle += ((int32_t)hMecSpeedDpp);
 8005cba:	609a      	str	r2, [r3, #8]
}
 8005cbc:	4770      	bx	lr
 8005cbe:	bf00      	nop

08005cc0 <ENC_CalcAvrgMecSpeedUnit>:
  * @param  pMecSpeedUnit pointer used to return the rotor average mechanical speed
  *         expressed in the unit defined by #SPEED_UNIT
  * @retval true = sensor information is reliable. false = sensor information is not reliable
  */
__weak bool ENC_CalcAvrgMecSpeedUnit(ENCODER_Handle_t *pHandle, int16_t *pMecSpeedUnit)
{
 8005cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cc2:	4603      	mov	r3, r0
    int32_t wtemp2;
    uint32_t OverflowCntSample;
    uint32_t CntCapture;
    uint32_t directionSample;
    int32_t wOverallAngleVariation = 0;
    TIM_TypeDef *TIMx = pHandle->TIMx;
 8005cc4:	6a02      	ldr	r2, [r0, #32]
    uint8_t bBufferSize = pHandle->SpeedBufferSize;
 8005cc6:	f890 0074 	ldrb.w	r0, [r0, #116]	@ 0x74
 8005cca:	6a55      	ldr	r5, [r2, #36]	@ 0x24
#ifdef TIM_CNT_UIFCPY
    /* disable Interrupt generation */
    LL_TIM_DisableIT_UPDATE(TIMx);
#endif
    CntCapture = LL_TIM_GetCounter(TIMx);
    OverflowCntSample = pHandle->TimerOverflowNb;
 8005ccc:	f8b3 4070 	ldrh.w	r4, [r3, #112]	@ 0x70
    if (LL_TIM_COUNTERDIRECTION_DOWN == directionSample)
    {
      /* Encoder timer down-counting */
      /* If UIFCPY not present Overflow counter can not be safely used -> limitation to 1 OF */
#ifndef TIM_CNT_UIFCPY
      OverflowCntSample = (CntCapture > pHandle->PreviousCapture) ? 1 : 0;
 8005cd0:	f8b3 e072 	ldrh.w	lr, [r3, #114]	@ 0x72
#endif
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
        ((int32_t)CntCapture) - ((int32_t)pHandle->PreviousCapture)
        - ((((int32_t)OverflowCntSample) + (int32_t)OFbit) * ((int32_t)pHandle->PulseNumber));
 8005cd4:	f8b3 c06e 	ldrh.w	ip, [r3, #110]	@ 0x6e
    pHandle->TimerOverflowNb = 0;
 8005cd8:	2600      	movs	r6, #0
 8005cda:	f8a3 6070 	strh.w	r6, [r3, #112]	@ 0x70
    OverflowCntSample = pHandle->TimerOverflowNb;
 8005cde:	b2a4      	uxth	r4, r4
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 8005ce0:	6812      	ldr	r2, [r2, #0]
    if ((OverflowCntSample + OFbit) > ENC_MAX_OVERFLOW_NB)
 8005ce2:	2c01      	cmp	r4, #1
      pHandle->TimerOverflowError = true;
 8005ce4:	bf88      	it	hi
 8005ce6:	2401      	movhi	r4, #1
 8005ce8:	f002 0210 	and.w	r2, r2, #16
    {
      /* Nothing to do */
    }

    /* Checks the reliability status, then stores and returns it */
    if (pHandle->TimerOverflowError)
 8005cec:	bf94      	ite	ls
 8005cee:	f893 407d 	ldrbls.w	r4, [r3, #125]	@ 0x7d
      pHandle->TimerOverflowError = true;
 8005cf2:	f883 407d 	strbhi.w	r4, [r3, #125]	@ 0x7d
        ((int32_t)CntCapture) - ((int32_t)pHandle->PreviousCapture)
 8005cf6:	eba5 060e 	sub.w	r6, r5, lr
    if (LL_TIM_COUNTERDIRECTION_DOWN == directionSample)
 8005cfa:	2a00      	cmp	r2, #0
 8005cfc:	f000 8092 	beq.w	8005e24 <ENC_CalcAvrgMecSpeedUnit+0x164>
        - ((((int32_t)OverflowCntSample) + (int32_t)OFbit) * ((int32_t)pHandle->PulseNumber));
 8005d00:	4575      	cmp	r5, lr
 8005d02:	bf8c      	ite	hi
 8005d04:	4662      	movhi	r2, ip
 8005d06:	2200      	movls	r2, #0
 8005d08:	1ab6      	subs	r6, r6, r2
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8005d0a:	f893 207c 	ldrb.w	r2, [r3, #124]	@ 0x7c
 8005d0e:	320a      	adds	r2, #10
 8005d10:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8005d14:	2800      	cmp	r0, #0
 8005d16:	f000 8092 	beq.w	8005e3e <ENC_CalcAvrgMecSpeedUnit+0x17e>
 8005d1a:	2801      	cmp	r0, #1
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8005d1c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8005d1e:	d039      	beq.n	8005d94 <ENC_CalcAvrgMecSpeedUnit+0xd4>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8005d20:	6ade      	ldr	r6, [r3, #44]	@ 0x2c
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8005d22:	2802      	cmp	r0, #2
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8005d24:	4432      	add	r2, r6
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8005d26:	d035      	beq.n	8005d94 <ENC_CalcAvrgMecSpeedUnit+0xd4>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8005d28:	6b1e      	ldr	r6, [r3, #48]	@ 0x30
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8005d2a:	2803      	cmp	r0, #3
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8005d2c:	4432      	add	r2, r6
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8005d2e:	d031      	beq.n	8005d94 <ENC_CalcAvrgMecSpeedUnit+0xd4>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8005d30:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8005d32:	2804      	cmp	r0, #4
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8005d34:	4432      	add	r2, r6
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8005d36:	d02d      	beq.n	8005d94 <ENC_CalcAvrgMecSpeedUnit+0xd4>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8005d38:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8005d3a:	2805      	cmp	r0, #5
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8005d3c:	4432      	add	r2, r6
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8005d3e:	d029      	beq.n	8005d94 <ENC_CalcAvrgMecSpeedUnit+0xd4>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8005d40:	6bde      	ldr	r6, [r3, #60]	@ 0x3c
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8005d42:	2806      	cmp	r0, #6
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8005d44:	4432      	add	r2, r6
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8005d46:	d025      	beq.n	8005d94 <ENC_CalcAvrgMecSpeedUnit+0xd4>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8005d48:	6c1e      	ldr	r6, [r3, #64]	@ 0x40
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8005d4a:	2807      	cmp	r0, #7
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8005d4c:	4432      	add	r2, r6
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8005d4e:	d021      	beq.n	8005d94 <ENC_CalcAvrgMecSpeedUnit+0xd4>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8005d50:	6c5e      	ldr	r6, [r3, #68]	@ 0x44
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8005d52:	2808      	cmp	r0, #8
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8005d54:	4432      	add	r2, r6
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8005d56:	d01d      	beq.n	8005d94 <ENC_CalcAvrgMecSpeedUnit+0xd4>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8005d58:	6c9e      	ldr	r6, [r3, #72]	@ 0x48
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8005d5a:	2809      	cmp	r0, #9
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8005d5c:	4432      	add	r2, r6
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8005d5e:	d019      	beq.n	8005d94 <ENC_CalcAvrgMecSpeedUnit+0xd4>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8005d60:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8005d62:	280a      	cmp	r0, #10
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8005d64:	4432      	add	r2, r6
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8005d66:	d015      	beq.n	8005d94 <ENC_CalcAvrgMecSpeedUnit+0xd4>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8005d68:	6d1e      	ldr	r6, [r3, #80]	@ 0x50
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8005d6a:	280b      	cmp	r0, #11
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8005d6c:	4432      	add	r2, r6
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8005d6e:	d011      	beq.n	8005d94 <ENC_CalcAvrgMecSpeedUnit+0xd4>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8005d70:	6d5e      	ldr	r6, [r3, #84]	@ 0x54
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8005d72:	280c      	cmp	r0, #12
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8005d74:	4432      	add	r2, r6
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8005d76:	d00d      	beq.n	8005d94 <ENC_CalcAvrgMecSpeedUnit+0xd4>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8005d78:	6d9e      	ldr	r6, [r3, #88]	@ 0x58
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8005d7a:	280d      	cmp	r0, #13
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8005d7c:	4432      	add	r2, r6
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8005d7e:	d009      	beq.n	8005d94 <ENC_CalcAvrgMecSpeedUnit+0xd4>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8005d80:	6dde      	ldr	r6, [r3, #92]	@ 0x5c
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8005d82:	280e      	cmp	r0, #14
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8005d84:	4432      	add	r2, r6
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8005d86:	d005      	beq.n	8005d94 <ENC_CalcAvrgMecSpeedUnit+0xd4>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8005d88:	6e1e      	ldr	r6, [r3, #96]	@ 0x60
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8005d8a:	280f      	cmp	r0, #15
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8005d8c:	4432      	add	r2, r6
 8005d8e:	bf1c      	itt	ne
 8005d90:	6e5e      	ldrne	r6, [r3, #100]	@ 0x64
 8005d92:	1992      	addne	r2, r2, r6
    wtemp1 = wOverallAngleVariation * ((int32_t)pHandle->SpeedSamplingFreqUnit);
 8005d94:	6a5f      	ldr	r7, [r3, #36]	@ 0x24
    wtemp2 = ((int32_t)pHandle->PulseNumber) * ((int32_t)pHandle->SpeedBufferSize);
 8005d96:	fb0c f600 	mul.w	r6, ip, r0
    wtemp1 = wOverallAngleVariation * ((int32_t)pHandle->SpeedSamplingFreqUnit);
 8005d9a:	fb07 f202 	mul.w	r2, r7, r2
    wtemp1 = ((0 == wtemp2) ? wtemp1 : (wtemp1 / wtemp2));
 8005d9e:	b10e      	cbz	r6, 8005da4 <ENC_CalcAvrgMecSpeedUnit+0xe4>
 8005da0:	fb92 f2f6 	sdiv	r2, r2, r6
    *pMecSpeedUnit = (int16_t)wtemp1;
 8005da4:	fa0f fe82 	sxth.w	lr, r2
    pHandle->_Super.hMecAccelUnitP = (int16_t)(wtemp1 - pHandle->_Super.hAvrMecSpeedUnit);
 8005da8:	b292      	uxth	r2, r2
    *pMecSpeedUnit = (int16_t)wtemp1;
 8005daa:	f8a1 e000 	strh.w	lr, [r1]
    wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] * ((int32_t)pHandle->SpeedSamplingFreqHz)
 8005dae:	f893 607c 	ldrb.w	r6, [r3, #124]	@ 0x7c
    pHandle->DeltaCapturesIndex++;
 8005db2:	f893 c07c 	ldrb.w	ip, [r3, #124]	@ 0x7c
    wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] * ((int32_t)pHandle->SpeedSamplingFreqHz)
 8005db6:	360a      	adds	r6, #10
    pHandle->DeltaCapturesIndex++;
 8005db8:	f10c 0c01 	add.w	ip, ip, #1
 8005dbc:	fa5f fc8c 	uxtb.w	ip, ip
    wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] * ((int32_t)pHandle->SpeedSamplingFreqHz)
 8005dc0:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
    pHandle->DeltaCapturesIndex++;
 8005dc4:	f883 c07c 	strb.w	ip, [r3, #124]	@ 0x7c
    pHandle->_Super.hMecAccelUnitP = (int16_t)(wtemp1 - pHandle->_Super.hAvrMecSpeedUnit);
 8005dc8:	f8b3 c00c 	ldrh.w	ip, [r3, #12]
    pHandle->_Super.hAvrMecSpeedUnit = (int16_t)wtemp1;
 8005dcc:	f8a3 e00c 	strh.w	lr, [r3, #12]
    pHandle->_Super.hMecAccelUnitP = (int16_t)(wtemp1 - pHandle->_Super.hAvrMecSpeedUnit);
 8005dd0:	eba2 020c 	sub.w	r2, r2, ip
 8005dd4:	825a      	strh	r2, [r3, #18]
    wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] * ((int32_t)pHandle->SpeedSamplingFreqHz)
 8005dd6:	f8b3 206c 	ldrh.w	r2, [r3, #108]	@ 0x6c
    if (pHandle->DeltaCapturesIndex >= pHandle->SpeedBufferSize)
 8005dda:	f893 e07c 	ldrb.w	lr, [r3, #124]	@ 0x7c
    wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] * ((int32_t)pHandle->SpeedSamplingFreqHz)
 8005dde:	fb06 f202 	mul.w	r2, r6, r2
             * ((int32_t)pHandle->_Super.bElToMecRatio);
 8005de2:	785e      	ldrb	r6, [r3, #1]
    pHandle->PreviousCapture = (CntCapture >= (uint32_t)65535) ? 65535U : (uint16_t)CntCapture;
 8005de4:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8005de8:	4565      	cmp	r5, ip
    wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] * ((int32_t)pHandle->SpeedSamplingFreqHz)
 8005dea:	fb06 f202 	mul.w	r2, r6, r2
    wtemp1 *= ((int32_t)pHandle->_Super.DPPConvFactor);
 8005dee:	69de      	ldr	r6, [r3, #28]
    pHandle->PreviousCapture = (CntCapture >= (uint32_t)65535) ? 65535U : (uint16_t)CntCapture;
 8005df0:	bf28      	it	cs
 8005df2:	4665      	movcs	r5, ip
    if (pHandle->DeltaCapturesIndex >= pHandle->SpeedBufferSize)
 8005df4:	4586      	cmp	lr, r0
    pHandle->PreviousCapture = (CntCapture >= (uint32_t)65535) ? 65535U : (uint16_t)CntCapture;
 8005df6:	f8a3 5072 	strh.w	r5, [r3, #114]	@ 0x72
    wtemp1 /= ((int32_t)pHandle->PulseNumber);
 8005dfa:	f8b3 506e 	ldrh.w	r5, [r3, #110]	@ 0x6e
 8005dfe:	fb92 f2f5 	sdiv	r2, r2, r5
    wtemp1 /= ((int32_t)pHandle->_Super.hMeasurementFrequency);
 8005e02:	8b5d      	ldrh	r5, [r3, #26]
    wtemp1 *= ((int32_t)pHandle->_Super.DPPConvFactor);
 8005e04:	fb06 f202 	mul.w	r2, r6, r2
    wtemp1 /= ((int32_t)pHandle->_Super.hMeasurementFrequency);
 8005e08:	fb92 f2f5 	sdiv	r2, r2, r5
    pHandle->_Super.hElSpeedDpp = (int16_t)wtemp1;
 8005e0c:	81da      	strh	r2, [r3, #14]
      pHandle->DeltaCapturesIndex = 0U;
 8005e0e:	bf24      	itt	cs
 8005e10:	2200      	movcs	r2, #0
 8005e12:	f883 207c 	strbcs.w	r2, [r3, #124]	@ 0x7c
    if (pHandle->TimerOverflowError)
 8005e16:	b1ac      	cbz	r4, 8005e44 <ENC_CalcAvrgMecSpeedUnit+0x184>
    {
      bReliability = false;
      pHandle->SensorIsReliable = false;
      pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 8005e18:	78da      	ldrb	r2, [r3, #3]
 8005e1a:	701a      	strb	r2, [r3, #0]
      pHandle->SensorIsReliable = false;
 8005e1c:	2000      	movs	r0, #0
 8005e1e:	f883 0075 	strb.w	r0, [r3, #117]	@ 0x75
    }
#ifdef NULL_PTR_CHECK_ENC_SPD_POS_FDB
  }
#endif
  return (bReliability);
}
 8005e22:	bdf0      	pop	{r4, r5, r6, r7, pc}
        + ((((int32_t)OverflowCntSample) + (int32_t)OFbit) * ((int32_t)pHandle->PulseNumber));
 8005e24:	4575      	cmp	r5, lr
 8005e26:	bf34      	ite	cc
 8005e28:	4662      	movcc	r2, ip
 8005e2a:	2200      	movcs	r2, #0
 8005e2c:	4416      	add	r6, r2
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8005e2e:	f893 207c 	ldrb.w	r2, [r3, #124]	@ 0x7c
 8005e32:	320a      	adds	r2, #10
 8005e34:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8005e38:	2800      	cmp	r0, #0
 8005e3a:	f47f af6e 	bne.w	8005d1a <ENC_CalcAvrgMecSpeedUnit+0x5a>
 8005e3e:	4602      	mov	r2, r0
 8005e40:	4686      	mov	lr, r0
 8005e42:	e7b2      	b.n	8005daa <ENC_CalcAvrgMecSpeedUnit+0xea>
}
 8005e44:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      bReliability = SPD_IsMecSpeedReliable(&pHandle->_Super, pMecSpeedUnit);
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f001 b86f 	b.w	8006f2c <SPD_IsMecSpeedReliable>
 8005e4e:	bf00      	nop

08005e50 <ENC_SetMecAngle>:
    uint16_t hAngleCounts;
    uint16_t hMecAngleuint;
    int16_t localhMecAngle = hMecAngle;

    pHandle->_Super.hMecAngle = localhMecAngle;
    pHandle->_Super.hElAngle = localhMecAngle * (int16_t)pHandle->_Super.bElToMecRatio;
 8005e50:	7843      	ldrb	r3, [r0, #1]
    pHandle->_Super.hMecAngle = localhMecAngle;
 8005e52:	80c1      	strh	r1, [r0, #6]
    pHandle->_Super.hElAngle = localhMecAngle * (int16_t)pHandle->_Super.bElToMecRatio;
 8005e54:	b28a      	uxth	r2, r1
 8005e56:	fb01 f303 	mul.w	r3, r1, r3
    if (localhMecAngle < 0)
 8005e5a:	2900      	cmp	r1, #0
    pHandle->_Super.hElAngle = localhMecAngle * (int16_t)pHandle->_Super.bElToMecRatio;
 8005e5c:	8083      	strh	r3, [r0, #4]
 8005e5e:	bfb8      	it	lt
 8005e60:	f102 32ff 	addlt.w	r2, r2, #4294967295
    else
    {
      hMecAngleuint = (uint16_t)localhMecAngle;
    }

    hAngleCounts = (uint16_t)((((uint32_t)hMecAngleuint) * ((uint32_t)pHandle->PulseNumber)) / 65535U);
 8005e64:	f8b0 306e 	ldrh.w	r3, [r0, #110]	@ 0x6e
 8005e68:	4906      	ldr	r1, [pc, #24]	@ (8005e84 <ENC_SetMecAngle+0x34>)
 8005e6a:	bfb8      	it	lt
 8005e6c:	b292      	uxthlt	r2, r2
 8005e6e:	fb02 f303 	mul.w	r3, r2, r3
{
 8005e72:	b410      	push	{r4}
    hAngleCounts = (uint16_t)((((uint32_t)hMecAngleuint) * ((uint32_t)pHandle->PulseNumber)) / 65535U);
 8005e74:	fba1 1303 	umull	r1, r3, r1, r3
    TIM_TypeDef *TIMx = pHandle->TIMx;
 8005e78:	6a04      	ldr	r4, [r0, #32]
    hAngleCounts = (uint16_t)((((uint32_t)hMecAngleuint) * ((uint32_t)pHandle->PulseNumber)) / 65535U);
 8005e7a:	0bdb      	lsrs	r3, r3, #15

    TIMx->CNT = (uint16_t)hAngleCounts;
 8005e7c:	6263      	str	r3, [r4, #36]	@ 0x24
#ifdef NULL_PTR_CHECK_ENC_SPD_POS_FDB
  }
#endif
}
 8005e7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e82:	4770      	bx	lr
 8005e84:	80008001 	.word	0x80008001

08005e88 <ENC_IRQHandler>:
/**
  * @brief  TIMER ENCODER Overflow interrupt counter update
  * @param  pHandleVoid: handler of the current instance of the encoder component
  */
__weak void *ENC_IRQHandler(void *pHandleVoid)
{
 8005e88:	4602      	mov	r2, r0
  /* Updates the number of overflows occurred */
  /* The handling of overflow error is done in ENC_CalcAvrgMecSpeedUnit */
  pHandle->TimerOverflowNb += 1U;

  return (MC_NULL);
}
 8005e8a:	2000      	movs	r0, #0
  pHandle->TimerOverflowNb += 1U;
 8005e8c:	f8b2 3070 	ldrh.w	r3, [r2, #112]	@ 0x70
 8005e90:	3301      	adds	r3, #1
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	f8a2 3070 	strh.w	r3, [r2, #112]	@ 0x70
}
 8005e98:	4770      	bx	lr
 8005e9a:	bf00      	nop

08005e9c <MCPA_dataLog>:
  * @brief  Allocates and fills buffer with asynchronous data to be sent to controller
  *
  * @param  *pHandle Pointer to the MCPA Handle
  */
void MCPA_dataLog(MCPA_Handle_t *pHandle)
{
 8005e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif
    uint32_t *logValue;
    uint16_t *logValue16;
    uint8_t i;

    if (pHandle->HFIndex == pHandle->HFRateBuff) /*  */
 8005e9e:	7fc3      	ldrb	r3, [r0, #31]
 8005ea0:	f890 2022 	ldrb.w	r2, [r0, #34]	@ 0x22
 8005ea4:	429a      	cmp	r2, r3
{
 8005ea6:	4604      	mov	r4, r0
    if (pHandle->HFIndex == pHandle->HFRateBuff) /*  */
 8005ea8:	d002      	beq.n	8005eb0 <MCPA_dataLog+0x14>
      }
    }
    else
    {
      /* Nothing to log just waiting next call to MCPA_datalog */
      pHandle->HFIndex++;
 8005eaa:	3301      	adds	r3, #1
 8005eac:	77c3      	strb	r3, [r0, #31]
    }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
}
 8005eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (0U == pHandle->bufferIndex)
 8005eb0:	8b05      	ldrh	r5, [r0, #24]
      pHandle->HFIndex = 0U;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	77c3      	strb	r3, [r0, #31]
      if (0U == pHandle->bufferIndex)
 8005eb6:	b1a5      	cbz	r5, 8005ee2 <MCPA_dataLog+0x46>
 8005eb8:	6961      	ldr	r1, [r4, #20]
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 8005eba:	8ba2      	ldrh	r2, [r4, #28]
 8005ebc:	42aa      	cmp	r2, r5
 8005ebe:	d24e      	bcs.n	8005f5e <MCPA_dataLog+0xc2>
 8005ec0:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
        if (pHandle->MFRateBuff == 254U) /* MFRateBuff = 254 means we dump MF data once per buffer */
 8005ec4:	2bfe      	cmp	r3, #254	@ 0xfe
 8005ec6:	d066      	beq.n	8005f96 <MCPA_dataLog+0xfa>
        *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after
 8005ec8:	f894 302a 	ldrb.w	r3, [r4, #42]	@ 0x2a
 8005ecc:	534b      	strh	r3, [r1, r5]
        pHandle->pTransportLayer->fSendPacket(pHandle->pTransportLayer, pHandle->currentBuffer,
 8005ece:	8b22      	ldrh	r2, [r4, #24]
 8005ed0:	6820      	ldr	r0, [r4, #0]
 8005ed2:	3202      	adds	r2, #2
 8005ed4:	2309      	movs	r3, #9
 8005ed6:	6845      	ldr	r5, [r0, #4]
 8005ed8:	b292      	uxth	r2, r2
 8005eda:	47a8      	blx	r5
        pHandle->bufferIndex = 0U;
 8005edc:	2300      	movs	r3, #0
 8005ede:	8323      	strh	r3, [r4, #24]
}
 8005ee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (0U == pHandle->pTransportLayer->fGetBuffer (pHandle->pTransportLayer,
 8005ee2:	4601      	mov	r1, r0
 8005ee4:	2209      	movs	r2, #9
 8005ee6:	f851 0b14 	ldr.w	r0, [r1], #20
 8005eea:	6803      	ldr	r3, [r0, #0]
 8005eec:	4798      	blx	r3
 8005eee:	b390      	cbz	r0, 8005f56 <MCPA_dataLog+0xba>
          *logValue = GLOBAL_TIMESTAMP; /* 32 first bits is used to store Timestamp */
 8005ef0:	4b49      	ldr	r3, [pc, #292]	@ (8006018 <MCPA_dataLog+0x17c>)
 8005ef2:	6961      	ldr	r1, [r4, #20]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	600b      	str	r3, [r1, #0]
          if (pHandle->Mark == pHandle->MarkBuff)
 8005ef8:	f894 0029 	ldrb.w	r0, [r4, #41]	@ 0x29
 8005efc:	f894 202a 	ldrb.w	r2, [r4, #42]	@ 0x2a
          pHandle->MFIndex = 0U; /* Restart the motif from scratch at each buffer */
 8005f00:	f884 5020 	strb.w	r5, [r4, #32]
          pHandle->bufferIndex = 4U;
 8005f04:	2304      	movs	r3, #4
          if (pHandle->Mark == pHandle->MarkBuff)
 8005f06:	4282      	cmp	r2, r0
          pHandle->bufferIndex = 4U;
 8005f08:	8323      	strh	r3, [r4, #24]
          if (pHandle->Mark == pHandle->MarkBuff)
 8005f0a:	d101      	bne.n	8005f10 <MCPA_dataLog+0x74>
 8005f0c:	461d      	mov	r5, r3
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 8005f0e:	e7d4      	b.n	8005eba <MCPA_dataLog+0x1e>
            pHandle->MFNumBuff           = pHandle->MFNum;
 8005f10:	f894 3027 	ldrb.w	r3, [r4, #39]	@ 0x27
            pHandle->HFNumBuff           = pHandle->HFNum;
 8005f14:	f894 2023 	ldrb.w	r2, [r4, #35]	@ 0x23
            pHandle->MFRateBuff          = pHandle->MFRate;
 8005f18:	f894 1025 	ldrb.w	r1, [r4, #37]	@ 0x25
            pHandle->HFRateBuff          = pHandle->HFRate;
 8005f1c:	f894 5021 	ldrb.w	r5, [r4, #33]	@ 0x21
            pHandle->HFNumBuff           = pHandle->HFNum;
 8005f20:	f884 2024 	strb.w	r2, [r4, #36]	@ 0x24
            pHandle->MFNumBuff           = pHandle->MFNum;
 8005f24:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
                         ((uint32_t)pHandle->HFNum + (uint32_t)pHandle->MFNum) * 4U); /* We store pointer here,
 8005f28:	441a      	add	r2, r3
            pHandle->bufferTxTriggerBuff = pHandle->bufferTxTrigger;
 8005f2a:	8b63      	ldrh	r3, [r4, #26]
            pHandle->MarkBuff            = pHandle->Mark;
 8005f2c:	f884 002a 	strb.w	r0, [r4, #42]	@ 0x2a
            (void)memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable,
 8005f30:	0092      	lsls	r2, r2, #2
            pHandle->MFRateBuff          = pHandle->MFRate;
 8005f32:	f884 1026 	strb.w	r1, [r4, #38]	@ 0x26
            pHandle->bufferTxTriggerBuff = pHandle->bufferTxTrigger;
 8005f36:	83a3      	strh	r3, [r4, #28]
            (void)memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable,
 8005f38:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
            pHandle->HFRateBuff          = pHandle->HFRate;
 8005f3c:	f884 5022 	strb.w	r5, [r4, #34]	@ 0x22
            (void)memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable,
 8005f40:	f001 fa5e 	bl	8007400 <memcpy>
                         (uint32_t)pHandle->HFNum + (uint32_t)pHandle->MFNum); /* 1 size byte per ID */
 8005f44:	f894 2023 	ldrb.w	r2, [r4, #35]	@ 0x23
 8005f48:	f894 3027 	ldrb.w	r3, [r4, #39]	@ 0x27
            (void)memcpy(pHandle->dataSizeTableBuff, pHandle->dataSizeTable,
 8005f4c:	e9d4 1003 	ldrd	r1, r0, [r4, #12]
 8005f50:	441a      	add	r2, r3
 8005f52:	f001 fa55 	bl	8007400 <memcpy>
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 8005f56:	8b25      	ldrh	r5, [r4, #24]
 8005f58:	2d00      	cmp	r5, #0
 8005f5a:	d1ad      	bne.n	8005eb8 <MCPA_dataLog+0x1c>
}
 8005f5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8005f5e:	f894 6024 	ldrb.w	r6, [r4, #36]	@ 0x24
        logValue16 = (uint16_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 8005f62:	194b      	adds	r3, r1, r5
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8005f64:	b36e      	cbz	r6, 8005fc2 <MCPA_dataLog+0x126>
 8005f66:	68a2      	ldr	r2, [r4, #8]
 8005f68:	eb03 0c46 	add.w	ip, r3, r6, lsl #1
 8005f6c:	3a04      	subs	r2, #4
          *logValue16 = *((uint16_t *) pHandle->dataPtrTableBuff[i]) ; //cstat !MISRAC2012-Rule-11.5
 8005f6e:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8005f72:	8800      	ldrh	r0, [r0, #0]
 8005f74:	f823 0b02 	strh.w	r0, [r3], #2
          pHandle->bufferIndex = pHandle->bufferIndex + 2U;
 8005f78:	8b25      	ldrh	r5, [r4, #24]
 8005f7a:	3502      	adds	r5, #2
 8005f7c:	b2ad      	uxth	r5, r5
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8005f7e:	459c      	cmp	ip, r3
          pHandle->bufferIndex = pHandle->bufferIndex + 2U;
 8005f80:	8325      	strh	r5, [r4, #24]
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8005f82:	d1f4      	bne.n	8005f6e <MCPA_dataLog+0xd2>
        if (pHandle->MFRateBuff < 254U)
 8005f84:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8005f88:	8ba2      	ldrh	r2, [r4, #28]
        if (pHandle->MFRateBuff < 254U)
 8005f8a:	2bfd      	cmp	r3, #253	@ 0xfd
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	d91d      	bls.n	8005fcc <MCPA_dataLog+0x130>
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8005f90:	4295      	cmp	r5, r2
 8005f92:	d897      	bhi.n	8005ec4 <MCPA_dataLog+0x28>
}
 8005f94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8005f96:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 8005f9a:	f894 0028 	ldrb.w	r0, [r4, #40]	@ 0x28
 8005f9e:	4418      	add	r0, r3
 8005fa0:	4298      	cmp	r0, r3
 8005fa2:	dd91      	ble.n	8005ec8 <MCPA_dataLog+0x2c>
            *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8005fa4:	68a7      	ldr	r7, [r4, #8]
            pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 8005fa6:	6926      	ldr	r6, [r4, #16]
            *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8005fa8:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
 8005fac:	6812      	ldr	r2, [r2, #0]
 8005fae:	514a      	str	r2, [r1, r5]
          for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8005fb0:	1c5a      	adds	r2, r3, #1
            pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 8005fb2:	5cf3      	ldrb	r3, [r6, r3]
 8005fb4:	442b      	add	r3, r5
 8005fb6:	b29d      	uxth	r5, r3
          for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8005fb8:	b2d3      	uxtb	r3, r2
 8005fba:	4283      	cmp	r3, r0
            pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 8005fbc:	8325      	strh	r5, [r4, #24]
          for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8005fbe:	dbf3      	blt.n	8005fa8 <MCPA_dataLog+0x10c>
 8005fc0:	e782      	b.n	8005ec8 <MCPA_dataLog+0x2c>
        if (pHandle->MFRateBuff < 254U)
 8005fc2:	f894 0026 	ldrb.w	r0, [r4, #38]	@ 0x26
 8005fc6:	28fd      	cmp	r0, #253	@ 0xfd
 8005fc8:	f63f af71 	bhi.w	8005eae <MCPA_dataLog+0x12>
          if (pHandle->MFIndex == pHandle->MFRateBuff)
 8005fcc:	f894 3020 	ldrb.w	r3, [r4, #32]
 8005fd0:	4283      	cmp	r3, r0
 8005fd2:	d006      	beq.n	8005fe2 <MCPA_dataLog+0x146>
            pHandle->MFIndex ++;
 8005fd4:	3301      	adds	r3, #1
 8005fd6:	f884 3020 	strb.w	r3, [r4, #32]
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8005fda:	4295      	cmp	r5, r2
 8005fdc:	f63f af74 	bhi.w	8005ec8 <MCPA_dataLog+0x2c>
}
 8005fe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8005fe2:	f894 7028 	ldrb.w	r7, [r4, #40]	@ 0x28
 8005fe6:	4437      	add	r7, r6
            pHandle->MFIndex = 0U;
 8005fe8:	2300      	movs	r3, #0
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8005fea:	42b7      	cmp	r7, r6
            pHandle->MFIndex = 0U;
 8005fec:	f884 3020 	strb.w	r3, [r4, #32]
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8005ff0:	ddf3      	ble.n	8005fda <MCPA_dataLog+0x13e>
              *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8005ff2:	f8d4 e008 	ldr.w	lr, [r4, #8]
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8005ff6:	f8d4 c010 	ldr.w	ip, [r4, #16]
              *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8005ffa:	f85e 3026 	ldr.w	r3, [lr, r6, lsl #2]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	514b      	str	r3, [r1, r5]
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8006002:	f81c 3006 	ldrb.w	r3, [ip, r6]
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8006006:	1c70      	adds	r0, r6, #1
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8006008:	442b      	add	r3, r5
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 800600a:	b2c6      	uxtb	r6, r0
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 800600c:	b29d      	uxth	r5, r3
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 800600e:	42be      	cmp	r6, r7
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8006010:	8325      	strh	r5, [r4, #24]
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8006012:	dbf2      	blt.n	8005ffa <MCPA_dataLog+0x15e>
 8006014:	e7e1      	b.n	8005fda <MCPA_dataLog+0x13e>
 8006016:	bf00      	nop
 8006018:	2000189c 	.word	0x2000189c

0800601c <MCPA_flushDataLog>:
#endif
    uint32_t *logValue;
    uint16_t *logValue16;
    uint8_t i;

    if (pHandle->bufferIndex > 0U)
 800601c:	8b03      	ldrh	r3, [r0, #24]
 800601e:	b19b      	cbz	r3, 8006048 <MCPA_flushDataLog+0x2c>
{
 8006020:	b570      	push	{r4, r5, r6, lr}
    {  /* If buffer is allocated, we must send it */
      if (pHandle->MFRateBuff == 254U) /* In case of flush, we must respect the packet format to allow
 8006022:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
                                          proper decoding */
      {
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
        {
         logValue = (uint32_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 8006026:	6941      	ldr	r1, [r0, #20]
      if (pHandle->MFRateBuff == 254U) /* In case of flush, we must respect the packet format to allow
 8006028:	2afe      	cmp	r2, #254	@ 0xfe
 800602a:	4604      	mov	r4, r0
 800602c:	d00d      	beq.n	800604a <MCPA_flushDataLog+0x2e>
      else
      {
        /* Nothing to do */
      }
      logValue16 = (uint16_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
      *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after
 800602e:	f894 202a 	ldrb.w	r2, [r4, #42]	@ 0x2a
 8006032:	52ca      	strh	r2, [r1, r3]
                                          the MARK */
      pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer,
 8006034:	8b22      	ldrh	r2, [r4, #24]
 8006036:	6820      	ldr	r0, [r4, #0]
 8006038:	3202      	adds	r2, #2
 800603a:	2309      	movs	r3, #9
 800603c:	6845      	ldr	r5, [r0, #4]
 800603e:	b292      	uxth	r2, r2
 8006040:	47a8      	blx	r5
                                             pHandle->bufferIndex + 2U, MCTL_ASYNC);
      pHandle->bufferIndex = 0U;
 8006042:	2300      	movs	r3, #0
 8006044:	8323      	strh	r3, [r4, #24]
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
}
 8006046:	bd70      	pop	{r4, r5, r6, pc}
 8006048:	4770      	bx	lr
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 800604a:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 800604e:	f890 c028 	ldrb.w	ip, [r0, #40]	@ 0x28
 8006052:	4494      	add	ip, r2
 8006054:	4562      	cmp	r2, ip
 8006056:	daea      	bge.n	800602e <MCPA_flushDataLog+0x12>
         *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8006058:	6886      	ldr	r6, [r0, #8]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 800605a:	6905      	ldr	r5, [r0, #16]
         *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 800605c:	f856 0022 	ldr.w	r0, [r6, r2, lsl #2]
 8006060:	6800      	ldr	r0, [r0, #0]
 8006062:	50c8      	str	r0, [r1, r3]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8006064:	5ca8      	ldrb	r0, [r5, r2]
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8006066:	3201      	adds	r2, #1
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8006068:	4403      	add	r3, r0
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 800606a:	b2d2      	uxtb	r2, r2
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 800606c:	b29b      	uxth	r3, r3
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 800606e:	4562      	cmp	r2, ip
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8006070:	8323      	strh	r3, [r4, #24]
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8006072:	dbf3      	blt.n	800605c <MCPA_flushDataLog+0x40>
 8006074:	e7db      	b.n	800602e <MCPA_flushDataLog+0x12>
 8006076:	bf00      	nop

08006078 <MCPA_cfgLog>:
  *
  * @param  *pHandle Pointer to the MCPA Handle
  * @param  *cfgdata Configuration of the Async communication
  */
uint8_t MCPA_cfgLog(MCPA_Handle_t *pHandle, uint8_t *cfgdata)
{
 8006078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint8_t i;
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF) */
    uint16_t newID, buffSize;
    uint8_t *pCfgData = cfgdata;

    buffSize = *((uint16_t *)pCfgData); //cstat !MISRAC2012-Rule-11.3
 800607c:	880f      	ldrh	r7, [r1, #0]
{
 800607e:	4604      	mov	r4, r0

    if (buffSize == 0U)
 8006080:	2f00      	cmp	r7, #0
 8006082:	d046      	beq.n	8006112 <MCPA_cfgLog+0x9a>
    { 
      /* Switch Off condition */
      MCPA_stopDataLog(pHandle);
    }
    else if (buffSize > pHandle->pTransportLayer->txAsyncMaxPayload)
 8006084:	6803      	ldr	r3, [r0, #0]
 8006086:	89db      	ldrh	r3, [r3, #14]
 8006088:	42bb      	cmp	r3, r7
 800608a:	d33f      	bcc.n	800610c <MCPA_cfgLog+0x94>
    {
      result = MCP_ERROR_NO_TXASYNC_SPACE;
    }
    else
    {
      pHandle->HFRate = *((uint8_t *)&pCfgData[2]);
 800608c:	788b      	ldrb	r3, [r1, #2]
 800608e:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
      pHandle->HFNum  = *((uint8_t *)&pCfgData[3]);
 8006092:	f891 8003 	ldrb.w	r8, [r1, #3]
 8006096:	f880 8023 	strb.w	r8, [r0, #35]	@ 0x23
      pHandle->MFRate = *((uint8_t *)&pCfgData[4]);
 800609a:	790b      	ldrb	r3, [r1, #4]
 800609c:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
      pHandle->MFNum  = *((uint8_t *)&pCfgData[5]);
 80060a0:	794b      	ldrb	r3, [r1, #5]
      pCfgData = &pCfgData[6]; /* Start of the HF IDs */

      if ((pHandle->HFNum + pHandle->MFNum) <= pHandle->nbrOfDataLog)
 80060a2:	7f82      	ldrb	r2, [r0, #30]
      pHandle->MFNum  = *((uint8_t *)&pCfgData[5]);
 80060a4:	f880 3027 	strb.w	r3, [r0, #39]	@ 0x27
      if ((pHandle->HFNum + pHandle->MFNum) <= pHandle->nbrOfDataLog)
 80060a8:	4443      	add	r3, r8
 80060aa:	4293      	cmp	r3, r2
 80060ac:	dc57      	bgt.n	800615e <MCPA_cfgLog+0xe6>
      pCfgData = &pCfgData[6]; /* Start of the HF IDs */
 80060ae:	1d8e      	adds	r6, r1, #6
      {
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d057      	beq.n	8006164 <MCPA_cfgLog+0xec>
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF) */
 80060b4:	f04f 0800 	mov.w	r8, #0
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 80060b8:	4645      	mov	r5, r8
 80060ba:	e011      	b.n	80060e0 <MCPA_cfgLog+0x68>
        {
          newID = *((uint16_t *)pCfgData); //cstat !MISRAC2012-Rule-11.3
          (void)RI_GetPtrReg(newID, &pHandle->dataPtrTable[i]);
          /* HF Data are fixed to 2 bytes */
          pHandle->dataSizeTable[i] = (i < pHandle->HFNum ) ? 2U : RI_GetIDSize(newID);
 80060bc:	68e3      	ldr	r3, [r4, #12]
 80060be:	5558      	strb	r0, [r3, r5]
          pCfgData++; /* Point to the next UID */
          pCfgData++;
          logSize = logSize+pHandle->dataSizeTable[i];
 80060c0:	68e2      	ldr	r2, [r4, #12]
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 80060c2:	f894 3023 	ldrb.w	r3, [r4, #35]	@ 0x23
 80060c6:	f894 1027 	ldrb.w	r1, [r4, #39]	@ 0x27
          logSize = logSize+pHandle->dataSizeTable[i];
 80060ca:	5d52      	ldrb	r2, [r2, r5]
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 80060cc:	f105 0c01 	add.w	ip, r5, #1
 80060d0:	fa5f f58c 	uxtb.w	r5, ip
 80060d4:	440b      	add	r3, r1
          logSize = logSize+pHandle->dataSizeTable[i];
 80060d6:	4442      	add	r2, r8
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 80060d8:	429d      	cmp	r5, r3
          logSize = logSize+pHandle->dataSizeTable[i];
 80060da:	fa1f f882 	uxth.w	r8, r2
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 80060de:	da11      	bge.n	8006104 <MCPA_cfgLog+0x8c>
          newID = *((uint16_t *)pCfgData); //cstat !MISRAC2012-Rule-11.3
 80060e0:	f836 9b02 	ldrh.w	r9, [r6], #2
          (void)RI_GetPtrReg(newID, &pHandle->dataPtrTable[i]);
 80060e4:	6861      	ldr	r1, [r4, #4]
 80060e6:	4648      	mov	r0, r9
 80060e8:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 80060ec:	f7fc ff9a 	bl	8003024 <RI_GetPtrReg>
          pHandle->dataSizeTable[i] = (i < pHandle->HFNum ) ? 2U : RI_GetIDSize(newID);
 80060f0:	f894 3023 	ldrb.w	r3, [r4, #35]	@ 0x23
 80060f4:	42ab      	cmp	r3, r5
 80060f6:	f04f 0002 	mov.w	r0, #2
 80060fa:	d8df      	bhi.n	80060bc <MCPA_cfgLog+0x44>
 80060fc:	4648      	mov	r0, r9
 80060fe:	f7fc ff85 	bl	800300c <RI_GetIDSize>
 8006102:	e7db      	b.n	80060bc <MCPA_cfgLog+0x44>
        }

        /* Smallest packet must be able to contain logSize Markbyte AsyncID and TimeStamp */
        if (buffSize < (logSize + 2U + 4U))
 8006104:	f108 0206 	add.w	r2, r8, #6
 8006108:	4297      	cmp	r7, r2
 800610a:	d210      	bcs.n	800612e <MCPA_cfgLog+0xb6>
      result = MCP_ERROR_NO_TXASYNC_SPACE;
 800610c:	2009      	movs	r0, #9
    }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
  return (result);
}
 800610e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (pHandle->bufferIndex > 0U)
 8006112:	8b03      	ldrh	r3, [r0, #24]
  pHandle->Mark = 0U;
 8006114:	f880 7029 	strb.w	r7, [r0, #41]	@ 0x29
  if (pHandle->bufferIndex > 0U)
 8006118:	b9ab      	cbnz	r3, 8006146 <MCPA_cfgLog+0xce>
  pHandle->bufferIndex = 0U;
 800611a:	2300      	movs	r3, #0
 800611c:	8323      	strh	r3, [r4, #24]
  pHandle->MarkBuff    = 0U;
 800611e:	f884 302a 	strb.w	r3, [r4, #42]	@ 0x2a
  pHandle->HFIndex     = 0U;
 8006122:	77e3      	strb	r3, [r4, #31]
  pHandle->HFRateBuff  = 0U; /* We do not want to miss any sample at the restart */
 8006124:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
  uint8_t result = MCP_CMD_OK;
 8006128:	2000      	movs	r0, #0
}
 800612a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          pHandle->bufferTxTrigger = buffSize-logSize - 2U; /* 2 is required to add the last Mark byte and NUL
 800612e:	3f02      	subs	r7, #2
 8006130:	eba7 0708 	sub.w	r7, r7, r8
 8006134:	8367      	strh	r7, [r4, #26]
          pHandle->Mark = *((uint8_t *)pCfgData);
 8006136:	7833      	ldrb	r3, [r6, #0]
 8006138:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
          if (0U == pHandle->Mark)
 800613c:	2b00      	cmp	r3, #0
 800613e:	d1f3      	bne.n	8006128 <MCPA_cfgLog+0xb0>
  if (pHandle->bufferIndex > 0U)
 8006140:	8b23      	ldrh	r3, [r4, #24]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d0e9      	beq.n	800611a <MCPA_cfgLog+0xa2>
    logValue16 = (uint16_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 8006146:	6961      	ldr	r1, [r4, #20]
    *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after
 8006148:	f894 202a 	ldrb.w	r2, [r4, #42]	@ 0x2a
 800614c:	52ca      	strh	r2, [r1, r3]
    pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer,
 800614e:	8b22      	ldrh	r2, [r4, #24]
 8006150:	6820      	ldr	r0, [r4, #0]
 8006152:	3202      	adds	r2, #2
 8006154:	6845      	ldr	r5, [r0, #4]
 8006156:	b292      	uxth	r2, r2
 8006158:	2309      	movs	r3, #9
 800615a:	47a8      	blx	r5
 800615c:	e7dd      	b.n	800611a <MCPA_cfgLog+0xa2>
        result = MCP_ERROR_BAD_RAW_FORMAT;
 800615e:	200a      	movs	r0, #10
}
 8006160:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8006164:	2206      	movs	r2, #6
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF) */
 8006166:	4698      	mov	r8, r3
 8006168:	e7ce      	b.n	8006108 <MCPA_cfgLog+0x90>
 800616a:	bf00      	nop

0800616c <NTC_Clear>:
    /* nothing to do */
  }
  else
  {
#endif
    pHandle->hAvTemp_d = 0U;
 800616c:	2300      	movs	r3, #0
 800616e:	8043      	strh	r3, [r0, #2]
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
}
 8006170:	4770      	bx	lr
 8006172:	bf00      	nop

08006174 <NTC_Init>:
    if (REAL_SENSOR == pHandle->bSensorType)
 8006174:	7802      	ldrb	r2, [r0, #0]
{
 8006176:	b508      	push	{r3, lr}
    if (REAL_SENSOR == pHandle->bSensorType)
 8006178:	b122      	cbz	r2, 8006184 <NTC_Init+0x10>
      pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 800617a:	8882      	ldrh	r2, [r0, #4]
 800617c:	8042      	strh	r2, [r0, #2]
      pHandle->hFaultState = MC_NO_ERROR;
 800617e:	2100      	movs	r1, #0
 8006180:	8101      	strh	r1, [r0, #8]
}
 8006182:	bd08      	pop	{r3, pc}
      NTC_Clear(pHandle);
 8006184:	f7ff fff2 	bl	800616c <NTC_Clear>
}
 8006188:	bd08      	pop	{r3, pc}
 800618a:	bf00      	nop

0800618c <NTC_GetAvTemp_C>:
  else
  {
#endif
    int32_t wTemp;

    if (REAL_SENSOR == pHandle->bSensorType)
 800618c:	7803      	ldrb	r3, [r0, #0]
 800618e:	b95b      	cbnz	r3, 80061a8 <NTC_GetAvTemp_C+0x1c>
    {
      wTemp = (int32_t)pHandle->hAvTemp_d;
 8006190:	8842      	ldrh	r2, [r0, #2]
      wTemp -= ((int32_t)pHandle->wV0);
 8006192:	6941      	ldr	r1, [r0, #20]
      wTemp *= pHandle->hSensitivity;
 8006194:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
#ifndef FULL_MISRA_C_COMPLIANCY_NTC_TEMP
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      wTemp = (wTemp >> 16) + (int32_t)pHandle->hT0;
 8006198:	8b00      	ldrh	r0, [r0, #24]
      wTemp -= ((int32_t)pHandle->wV0);
 800619a:	1a52      	subs	r2, r2, r1
      wTemp *= pHandle->hSensitivity;
 800619c:	fb02 f303 	mul.w	r3, r2, r3
      wTemp = (wTemp >> 16) + (int32_t)pHandle->hT0;
 80061a0:	eb00 4023 	add.w	r0, r0, r3, asr #16
    returnValue = (int16_t)wTemp;
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (returnValue);
}
 80061a4:	b200      	sxth	r0, r0
 80061a6:	4770      	bx	lr
      wTemp = (int32_t)pHandle->hExpectedTemp_C;
 80061a8:	88c0      	ldrh	r0, [r0, #6]
}
 80061aa:	b200      	sxth	r0, r0
 80061ac:	4770      	bx	lr
 80061ae:	bf00      	nop

080061b0 <PID_HandleInit>:
  {
#endif
    pHandle->hKpGain =  pHandle->hDefKpGain;
    pHandle->hKiGain =  pHandle->hDefKiGain;
    pHandle->hKdGain =  pHandle->hDefKdGain;
    pHandle->wIntegralTerm = 0;
 80061b0:	2300      	movs	r3, #0
    pHandle->hKpGain =  pHandle->hDefKpGain;
 80061b2:	6801      	ldr	r1, [r0, #0]
    pHandle->hKdGain =  pHandle->hDefKdGain;
 80061b4:	8c02      	ldrh	r2, [r0, #32]
    pHandle->hKpGain =  pHandle->hDefKpGain;
 80061b6:	6041      	str	r1, [r0, #4]
    pHandle->hKdGain =  pHandle->hDefKdGain;
 80061b8:	8442      	strh	r2, [r0, #34]	@ 0x22
    pHandle->wIntegralTerm = 0;
 80061ba:	6083      	str	r3, [r0, #8]
    pHandle->wPrevProcessVarError = 0;
 80061bc:	6283      	str	r3, [r0, #40]	@ 0x28
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 80061be:	4770      	bx	lr

080061c0 <PID_SetKP>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKpGain = hKpGain;
 80061c0:	8081      	strh	r1, [r0, #4]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 80061c2:	4770      	bx	lr

080061c4 <PID_SetKI>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKiGain = hKiGain;
 80061c4:	80c1      	strh	r1, [r0, #6]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 80061c6:	4770      	bx	lr

080061c8 <PID_GetKP>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKpGain);
#else
  return (pHandle->hKpGain);
#endif
}
 80061c8:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 80061cc:	4770      	bx	lr
 80061ce:	bf00      	nop

080061d0 <PID_GetKI>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKiGain);
#else
  return (pHandle->hKiGain);
#endif
}
 80061d0:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 80061d4:	4770      	bx	lr
 80061d6:	bf00      	nop

080061d8 <PID_SetIntegralTerm>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wIntegralTerm = wIntegralTermValue;
 80061d8:	6081      	str	r1, [r0, #8]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return;
}
 80061da:	4770      	bx	lr

080061dc <PID_GetKPDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKpDivisorPOW2);
#else
  return (pHandle->hKpDivisorPOW2);
#endif
}
 80061dc:	8b80      	ldrh	r0, [r0, #28]
 80061de:	4770      	bx	lr

080061e0 <PID_SetKPDivisorPOW2>:
  }
  else
  {
#endif
    pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
    pHandle->hKpDivisor = (((uint16_t)1) << hKpDivisorPOW2);
 80061e0:	2301      	movs	r3, #1
 80061e2:	408b      	lsls	r3, r1
    pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
 80061e4:	8381      	strh	r1, [r0, #28]
    pHandle->hKpDivisor = (((uint16_t)1) << hKpDivisorPOW2);
 80061e6:	8303      	strh	r3, [r0, #24]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 80061e8:	4770      	bx	lr
 80061ea:	bf00      	nop

080061ec <PID_GetKIDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKiDivisorPOW2);
#else
  return (pHandle->hKiDivisorPOW2);
#endif
}
 80061ec:	8bc0      	ldrh	r0, [r0, #30]
 80061ee:	4770      	bx	lr

080061f0 <PID_SetLowerIntegralTermLimit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wLowerIntegralLimit = wLowerLimit;
 80061f0:	6101      	str	r1, [r0, #16]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 80061f2:	4770      	bx	lr

080061f4 <PID_SetUpperIntegralTermLimit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wUpperIntegralLimit = wUpperLimit;
 80061f4:	60c1      	str	r1, [r0, #12]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 80061f6:	4770      	bx	lr

080061f8 <PID_SetKIDivisorPOW2>:
{
 80061f8:	b538      	push	{r3, r4, r5, lr}
    uint32_t wKiDiv = (((uint32_t)1) << hKiDivisorPOW2);
 80061fa:	2301      	movs	r3, #1
{
 80061fc:	460c      	mov	r4, r1
    uint32_t wKiDiv = (((uint32_t)1) << hKiDivisorPOW2);
 80061fe:	408b      	lsls	r3, r1
    PID_SetUpperIntegralTermLimit(pHandle, (int32_t)INT16_MAX * (int32_t)wKiDiv);
 8006200:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8006204:	40a1      	lsls	r1, r4
    pHandle->hKiDivisorPOW2 = hKiDivisorPOW2;
 8006206:	83c4      	strh	r4, [r0, #30]
    pHandle->hKiDivisor = (uint16_t)wKiDiv;
 8006208:	8343      	strh	r3, [r0, #26]
{
 800620a:	4605      	mov	r5, r0
    PID_SetUpperIntegralTermLimit(pHandle, (int32_t)INT16_MAX * (int32_t)wKiDiv);
 800620c:	f7ff fff2 	bl	80061f4 <PID_SetUpperIntegralTermLimit>
    PID_SetLowerIntegralTermLimit(pHandle, (int32_t)(-INT16_MAX) * (int32_t)wKiDiv);
 8006210:	4902      	ldr	r1, [pc, #8]	@ (800621c <PID_SetKIDivisorPOW2+0x24>)
 8006212:	4628      	mov	r0, r5
 8006214:	40a1      	lsls	r1, r4
 8006216:	f7ff ffeb 	bl	80061f0 <PID_SetLowerIntegralTermLimit>
}
 800621a:	bd38      	pop	{r3, r4, r5, pc}
 800621c:	ffff8001 	.word	0xffff8001

08006220 <PID_SetKD>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKdGain = hKdGain;
 8006220:	8441      	strh	r1, [r0, #34]	@ 0x22
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8006222:	4770      	bx	lr

08006224 <PID_GetKD>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKdGain);
#else
  return (pHandle->hKdGain);
#endif
}
 8006224:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	@ 0x22
 8006228:	4770      	bx	lr
 800622a:	bf00      	nop

0800622c <PID_GetKDDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKdDivisorPOW2);
#else
  return (pHandle->hKdDivisorPOW2);
#endif
}
 800622c:	8cc0      	ldrh	r0, [r0, #38]	@ 0x26
 800622e:	4770      	bx	lr

08006230 <PID_SetKDDivisorPOW2>:
  }
  else
  {
#endif
    pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
    pHandle->hKdDivisor = (((uint16_t)1) << hKdDivisorPOW2);
 8006230:	2301      	movs	r3, #1
 8006232:	408b      	lsls	r3, r1
    pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
 8006234:	84c1      	strh	r1, [r0, #38]	@ 0x26
    pHandle->hKdDivisor = (((uint16_t)1) << hKdDivisorPOW2);
 8006236:	8483      	strh	r3, [r0, #36]	@ 0x24
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8006238:	4770      	bx	lr
 800623a:	bf00      	nop

0800623c <PI_Controller>:
    int32_t wDischarge = 0;
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

    /* Proportional term computation*/
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 800623c:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
{
 8006240:	4603      	mov	r3, r0
 8006242:	b530      	push	{r4, r5, lr}

    /* Integral term computation */
    if (0 == pHandle->hKiGain)
 8006244:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 8006248:	f9b3 c016 	ldrsh.w	ip, [r3, #22]
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 800624c:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8006250:	fb01 f202 	mul.w	r2, r1, r2
    if (0 == pHandle->hKiGain)
 8006254:	b17c      	cbz	r4, 8006276 <PI_Controller+0x3a>
    {
      pHandle->wIntegralTerm = 0;
    }
    else
    {
      wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 8006256:	fb04 f101 	mul.w	r1, r4, r1
        {
          /* Nothing to do */
        }
      }

      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 800625a:	e9d3 5402 	ldrd	r5, r4, [r3, #8]
      if (wIntegral_sum_temp < 0)
 800625e:	eb15 0e01 	adds.w	lr, r5, r1
 8006262:	d41d      	bmi.n	80062a0 <PI_Controller+0x64>
            wIntegral_sum_temp = -INT32_MAX;
 8006264:	420d      	tst	r5, r1
 8006266:	4914      	ldr	r1, [pc, #80]	@ (80062b8 <PI_Controller+0x7c>)
 8006268:	bf48      	it	mi
 800626a:	468e      	movmi	lr, r1
      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 800626c:	45a6      	cmp	lr, r4
 800626e:	dc02      	bgt.n	8006276 <PI_Controller+0x3a>
      {
        pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
      }
      else if (wIntegral_sum_temp < pHandle->wLowerIntegralLimit)
 8006270:	691c      	ldr	r4, [r3, #16]
 8006272:	4574      	cmp	r4, lr
 8006274:	dd1d      	ble.n	80062b2 <PI_Controller+0x76>
    /* WARNING: the below instruction is not MISRA compliant, user should verify
               that Cortex-M3 assembly instruction ASR (arithmetic shift right)
               is used by the compiler to perform the shifts (instead of LSR
               logical shift right)*/
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    wOutput_32 = (wProportional_Term >> pHandle->hKpDivisorPOW2) + (pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2);
 8006276:	8b99      	ldrh	r1, [r3, #28]
 8006278:	410a      	asrs	r2, r1
 800627a:	8bd9      	ldrh	r1, [r3, #30]
 800627c:	fa44 f101 	asr.w	r1, r4, r1
 8006280:	440a      	add	r2, r1
#else
    wOutput_32 = (wProportional_Term / (int32_t)pHandle->hKpDivisor)
              + (pHandle->wIntegralTerm / (int32_t)pHandle->hKiDivisor);
#endif

    if (wOutput_32 > hUpperOutputLimit)
 8006282:	4290      	cmp	r0, r2
 8006284:	da03      	bge.n	800628e <PI_Controller+0x52>
    {
      wDischarge = hUpperOutputLimit - wOutput_32;
 8006286:	1a82      	subs	r2, r0, r2
    else
    {
      /* Nothing to do here */
    }

    pHandle->wIntegralTerm += wDischarge;
 8006288:	4414      	add	r4, r2
 800628a:	609c      	str	r4, [r3, #8]
    returnValue = (int16_t)wOutput_32;
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return (returnValue);
}
 800628c:	bd30      	pop	{r4, r5, pc}
    else if (wOutput_32 < hLowerOutputLimit)
 800628e:	4594      	cmp	ip, r2
      wDischarge = hLowerOutputLimit - wOutput_32;
 8006290:	bfc5      	ittet	gt
 8006292:	ebac 0202 	subgt.w	r2, ip, r2
    pHandle->wIntegralTerm += wDischarge;
 8006296:	18a4      	addgt	r4, r4, r2
    returnValue = (int16_t)wOutput_32;
 8006298:	b210      	sxthle	r0, r2
      wOutput_32 = hLowerOutputLimit;
 800629a:	4660      	movgt	r0, ip
    pHandle->wIntegralTerm += wDischarge;
 800629c:	609c      	str	r4, [r3, #8]
}
 800629e:	bd30      	pop	{r4, r5, pc}
        if (pHandle->wIntegralTerm > 0)
 80062a0:	2d00      	cmp	r5, #0
 80062a2:	dde3      	ble.n	800626c <PI_Controller+0x30>
          if (wIntegral_Term > 0)
 80062a4:	2900      	cmp	r1, #0
 80062a6:	dde1      	ble.n	800626c <PI_Controller+0x30>
      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 80062a8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80062ac:	428c      	cmp	r4, r1
 80062ae:	d1e2      	bne.n	8006276 <PI_Controller+0x3a>
 80062b0:	46a6      	mov	lr, r4
        pHandle->wIntegralTerm = wIntegral_sum_temp;
 80062b2:	4674      	mov	r4, lr
 80062b4:	e7df      	b.n	8006276 <PI_Controller+0x3a>
 80062b6:	bf00      	nop
 80062b8:	80000001 	.word	0x80000001

080062bc <PQD_CalcElMotorPower>:
  }
  else
  {
#endif
    int32_t wAux;
    qd_t Iqd = pHandle->pFOCVars->Iqd;
 80062bc:	6882      	ldr	r2, [r0, #8]
{
 80062be:	b500      	push	{lr}
    qd_t Vqd = pHandle->pFOCVars->Vqd;

    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 80062c0:	89d1      	ldrh	r1, [r2, #14]
 80062c2:	f8b2 e018 	ldrh.w	lr, [r2, #24]
    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
 80062c6:	8993      	ldrh	r3, [r2, #12]
 80062c8:	f8b2 c016 	ldrh.w	ip, [r2, #22]
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 80062cc:	fb11 f20e 	smulbb	r2, r1, lr
    wAux /= 65536;
 80062d0:	fb13 230c 	smlabb	r3, r3, ip, r2
 80062d4:	2b00      	cmp	r3, #0

    /* pHandle->hAvrgElMotorPower += (wAux - pHandle->hAvrgElMotorPower) >> 4 */
    pHandle->hAvrgElMotorPower += (int16_t)((wAux - (int32_t)pHandle->hAvrgElMotorPower) / 16);
 80062d6:	f9b0 2000 	ldrsh.w	r2, [r0]
    wAux /= 65536;
 80062da:	bfbc      	itt	lt
 80062dc:	f503 437f 	addlt.w	r3, r3, #65280	@ 0xff00
 80062e0:	33ff      	addlt	r3, #255	@ 0xff
    pHandle->hAvrgElMotorPower += (int16_t)((wAux - (int32_t)pHandle->hAvrgElMotorPower) / 16);
 80062e2:	ebd2 4323 	rsbs	r3, r2, r3, asr #16
 80062e6:	bf48      	it	mi
 80062e8:	330f      	addmi	r3, #15
 80062ea:	eb02 1223 	add.w	r2, r2, r3, asr #4
 80062ee:	8002      	strh	r2, [r0, #0]

#ifdef NULL_PTR_CHECK_PQD_MOT_POW_MEAS
  }
#endif
}
 80062f0:	f85d fb04 	ldr.w	pc, [sp], #4

080062f4 <PQD_Clear>:
    /* nothing to do */
  }
  else
  {
#endif
    pHandle->hAvrgElMotorPower = 0;
 80062f4:	2300      	movs	r3, #0
 80062f6:	8003      	strh	r3, [r0, #0]
#ifdef NULL_PTR_CHECK_MOT_POW_MES
  }
#endif
}
 80062f8:	4770      	bx	lr
 80062fa:	bf00      	nop

080062fc <PQD_GetAvrgElMotorPowerW>:
  * 
  * @param pHandle pointer on the related component instance.
  * @retval float_t The average measured motor power expressed in Watts.
  */
__weak float_t PQD_GetAvrgElMotorPowerW(const PQD_MotorPowMeas_Handle_t *pHandle)
{
 80062fc:	b510      	push	{r4, lr}
  else
  {
#endif

  /* First perform an integer multiplication, then a float one. */
  PowerW = ((float_t)pHandle->hAvrgElMotorPower * (float_t)VBS_GetAvBusVoltage_V(pHandle->pVBS)) * pHandle->ConvFact;
 80062fe:	f9b0 3000 	ldrsh.w	r3, [r0]
 8006302:	ee07 3a90 	vmov	s15, r3
{
 8006306:	ed2d 8b02 	vpush	{d8}
 800630a:	4604      	mov	r4, r0
  PowerW = ((float_t)pHandle->hAvrgElMotorPower * (float_t)VBS_GetAvBusVoltage_V(pHandle->pVBS)) * pHandle->ConvFact;
 800630c:	68c0      	ldr	r0, [r0, #12]
 800630e:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8006312:	f7ff fbf5 	bl	8005b00 <VBS_GetAvBusVoltage_V>
 8006316:	edd4 7a01 	vldr	s15, [r4, #4]
 800631a:	ee68 7a27 	vmul.f32	s15, s16, s15

#ifdef NULL_PTR_CHECK_PQD_MOT_POW_MEAS
  }
#endif
  return (PowerW);
}
 800631e:	ecbd 8b02 	vpop	{d8}
  PowerW = ((float_t)pHandle->hAvrgElMotorPower * (float_t)VBS_GetAvBusVoltage_V(pHandle->pVBS)) * pHandle->ConvFact;
 8006322:	ee00 0a10 	vmov	s0, r0
 8006326:	eeb8 0a40 	vcvt.f32.u32	s0, s0
}
 800632a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800632e:	bd10      	pop	{r4, pc}

08006330 <startTimers>:
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
*/
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return (READ_BIT(RCC->APB1ENR, Periphs) == Periphs);
 8006330:	4b17      	ldr	r3, [pc, #92]	@ (8006390 <startTimers+0x60>)
 8006332:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
  uint32_t isTIM2ClockOn;
  uint32_t trigOut;

  isTIM2ClockOn = LL_APB1_GRP1_IsEnabledClock(LL_APB1_GRP1_PERIPH_TIM2);
  if ((uint32_t)0 == isTIM2ClockOn)
 8006334:	07d2      	lsls	r2, r2, #31
 8006336:	d415      	bmi.n	8006364 <startTimers+0x34>
  SET_BIT(RCC->APB1ENR, Periphs);
 8006338:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800633a:	f042 0201 	orr.w	r2, r2, #1
 800633e:	641a      	str	r2, [r3, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8006340:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 8006342:	b082      	sub	sp, #8
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8006344:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8006348:	f002 0201 	and.w	r2, r2, #1
 800634c:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 800634e:	9a01      	ldr	r2, [sp, #4]
 8006350:	694a      	ldr	r2, [r1, #20]
 8006352:	f042 0201 	orr.w	r2, r2, #1
 8006356:	614a      	str	r2, [r1, #20]
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 8006358:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800635a:	f022 0201 	bic.w	r2, r2, #1
 800635e:	641a      	str	r2, [r3, #64]	@ 0x40
    trigOut = LL_TIM_ReadReg(TIM2, CR2) & TIM_CR2_MMS;
    LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_UPDATE);
    LL_TIM_GenerateEvent_UPDATE(TIM2);
    LL_TIM_SetTriggerOutput(TIM2, trigOut);
  }
}
 8006360:	b002      	add	sp, #8
 8006362:	4770      	bx	lr
    trigOut = LL_TIM_ReadReg(TIM2, CR2) & TIM_CR2_MMS;
 8006364:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006368:	685a      	ldr	r2, [r3, #4]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800636a:	6859      	ldr	r1, [r3, #4]
 800636c:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8006370:	f041 0120 	orr.w	r1, r1, #32
 8006374:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8006376:	6959      	ldr	r1, [r3, #20]
 8006378:	f041 0101 	orr.w	r1, r1, #1
 800637c:	6159      	str	r1, [r3, #20]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800637e:	6859      	ldr	r1, [r3, #4]
 8006380:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8006384:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8006388:	430a      	orrs	r2, r1
 800638a:	605a      	str	r2, [r3, #4]
 800638c:	4770      	bx	lr
 800638e:	bf00      	nop
 8006390:	40023800 	.word	0x40023800

08006394 <waitForPolarizationEnd>:
  {
#endif
    uint16_t hCalibrationPeriodCounter;
    uint16_t hMaxPeriodsNumber;

    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 8006394:	3201      	adds	r2, #1
{
 8006396:	b570      	push	{r4, r5, r6, lr}
    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 8006398:	0852      	lsrs	r2, r2, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 800639a:	f06f 0602 	mvn.w	r6, #2
 800639e:	0155      	lsls	r5, r2, #5
 80063a0:	6106      	str	r6, [r0, #16]

    /* Wait for NB_CONVERSIONS to be executed */
    LL_TIM_ClearFlag_CC1(TIMx);
    hCalibrationPeriodCounter = 0u;
 80063a2:	2200      	movs	r2, #0
    while (*cnt < NB_CONVERSIONS)
 80063a4:	f893 c000 	ldrb.w	ip, [r3]
 80063a8:	f1bc 0f0f 	cmp.w	ip, #15
    {
      if ((uint32_t)ERROR == LL_TIM_IsActiveFlag_CC1(TIMx))
      {
        LL_TIM_ClearFlag_CC1(TIMx);
        hCalibrationPeriodCounter++;
 80063ac:	f102 0e01 	add.w	lr, r2, #1
    while (*cnt < NB_CONVERSIONS)
 80063b0:	d80c      	bhi.n	80063cc <waitForPolarizationEnd+0x38>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 80063b2:	6904      	ldr	r4, [r0, #16]
 80063b4:	07a4      	lsls	r4, r4, #30
 80063b6:	d5f5      	bpl.n	80063a4 <waitForPolarizationEnd+0x10>
        hCalibrationPeriodCounter++;
 80063b8:	fa1f f28e 	uxth.w	r2, lr
        if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 80063bc:	4295      	cmp	r5, r2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 80063be:	6106      	str	r6, [r0, #16]
 80063c0:	d8f0      	bhi.n	80063a4 <waitForPolarizationEnd+0x10>
        {
          if (*cnt < NB_CONVERSIONS)
 80063c2:	781c      	ldrb	r4, [r3, #0]
 80063c4:	2c0f      	cmp	r4, #15
 80063c6:	d8ed      	bhi.n	80063a4 <waitForPolarizationEnd+0x10>
          {
            *SWerror = 1u;
 80063c8:	2301      	movs	r3, #1
 80063ca:	800b      	strh	r3, [r1, #0]
      }
    }
#ifdef NULL_PTR_CHECK_POW_COM
  }
#endif
  }
 80063cc:	bd70      	pop	{r4, r5, r6, pc}
 80063ce:	bf00      	nop

080063d0 <R3_1_GetPhaseCurrents>:
  *
  */
__weak void R3_1_GetPhaseCurrents(PWMC_Handle_t *pHdl, ab_t* pStator_Currents)
{
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80063d0:	f8d0 30a0 	ldr.w	r3, [r0, #160]	@ 0xa0
{
 80063d4:	b470      	push	{r4, r5, r6}
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 80063d6:	e9d3 2400 	ldrd	r2, r4, [r3]
  CLEAR_BIT(TIMx->CCER, Channels);
 80063da:	6a23      	ldr	r3, [r4, #32]
 80063dc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80063e0:	6223      	str	r3, [r4, #32]
  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);

  bSector = ( uint8_t )( pHandle->_Super.Sector );

  hReg1 =  (ADCx->JDR1)*2;
 80063e2:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
  hReg2 =  (ADCx->JDR2)*2;
 80063e4:	6c12      	ldr	r2, [r2, #64]	@ 0x40

  switch ( bSector )
 80063e6:	f890 407c 	ldrb.w	r4, [r0, #124]	@ 0x7c
  hReg1 =  (ADCx->JDR1)*2;
 80063ea:	005b      	lsls	r3, r3, #1
  hReg2 =  (ADCx->JDR2)*2;
 80063ec:	0052      	lsls	r2, r2, #1
  hReg1 =  (ADCx->JDR1)*2;
 80063ee:	b29b      	uxth	r3, r3
  hReg2 =  (ADCx->JDR2)*2;
 80063f0:	b292      	uxth	r2, r2
  switch ( bSector )
 80063f2:	2c05      	cmp	r4, #5
 80063f4:	f200 809b 	bhi.w	800652e <R3_1_GetPhaseCurrents+0x15e>
 80063f8:	e8df f004 	tbb	[pc, r4]
 80063fc:	0323233f 	.word	0x0323233f
 8006400:	3f03      	.short	0x3f03
    case SECTOR_4:
    case SECTOR_5:
    {
      /* Current on Phase C is not accessible     */
      /* Ia = PhaseAOffset - ADC converted value) */
      wAux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( hReg1 );
 8006402:	f8d0 4088 	ldr.w	r4, [r0, #136]	@ 0x88
 8006406:	1ae4      	subs	r4, r4, r3
      /* Saturation of Ia */
      if ( wAux < -INT16_MAX )
 8006408:	4b4d      	ldr	r3, [pc, #308]	@ (8006540 <R3_1_GetPhaseCurrents+0x170>)
 800640a:	429c      	cmp	r4, r3
 800640c:	da64      	bge.n	80064d8 <R3_1_GetPhaseCurrents+0x108>
      {
        pStator_Currents->a = ( int16_t )wAux;
      }

      /* Ib = PhaseBOffset - ADC converted value) */
        wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg2 );
 800640e:	f8d0 408c 	ldr.w	r4, [r0, #140]	@ 0x8c
 8006412:	eba4 0c02 	sub.w	ip, r4, r2

      /* Saturation of Ib */
      if ( wAux < -INT16_MAX )
 8006416:	4c4a      	ldr	r4, [pc, #296]	@ (8006540 <R3_1_GetPhaseCurrents+0x170>)
 8006418:	45a4      	cmp	ip, r4
    default:
    {
    }
    break;
  }
  pStator_Currents->a = -pStator_Currents->a;
 800641a:	b29b      	uxth	r3, r3
      if ( wAux < -INT16_MAX )
 800641c:	db49      	blt.n	80064b2 <R3_1_GetPhaseCurrents+0xe2>
      else  if ( wAux > INT16_MAX )
 800641e:	f5bc 4f00 	cmp.w	ip, #32768	@ 0x8000
 8006422:	db77      	blt.n	8006514 <R3_1_GetPhaseCurrents+0x144>
  pStator_Currents->a = -pStator_Currents->a;
 8006424:	425d      	negs	r5, r3
 8006426:	b22d      	sxth	r5, r5
 8006428:	f647 7cff 	movw	ip, #32767	@ 0x7fff
  pStator_Currents->b = -pStator_Currents->b;
  pHandle->_Super.Ia = pStator_Currents->a;
  pHandle->_Super.Ib = pStator_Currents->b;
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 800642c:	4463      	add	r3, ip
  pStator_Currents->a = -pStator_Currents->a;
 800642e:	800d      	strh	r5, [r1, #0]
  pStator_Currents->b = -pStator_Currents->b;
 8006430:	804c      	strh	r4, [r1, #2]
  pHandle->_Super.Ia = pStator_Currents->a;
 8006432:	f8a0 5062 	strh.w	r5, [r0, #98]	@ 0x62
  pHandle->_Super.Ib = pStator_Currents->b;
 8006436:	f8a0 4064 	strh.w	r4, [r0, #100]	@ 0x64
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 800643a:	f8a0 3066 	strh.w	r3, [r0, #102]	@ 0x66
}
 800643e:	bc70      	pop	{r4, r5, r6}
 8006440:	4770      	bx	lr
      wAux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( hReg1 );
 8006442:	f8d0 4088 	ldr.w	r4, [r0, #136]	@ 0x88
      if ( wAux < -INT16_MAX )
 8006446:	4e3e      	ldr	r6, [pc, #248]	@ (8006540 <R3_1_GetPhaseCurrents+0x170>)
      wAux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( hReg1 );
 8006448:	1ae4      	subs	r4, r4, r3
      if ( wAux < -INT16_MAX )
 800644a:	42b4      	cmp	r4, r6
 800644c:	db3e      	blt.n	80064cc <R3_1_GetPhaseCurrents+0xfc>
      else  if ( wAux > INT16_MAX )
 800644e:	f5b4 4f00 	cmp.w	r4, #32768	@ 0x8000
 8006452:	da55      	bge.n	8006500 <R3_1_GetPhaseCurrents+0x130>
  pStator_Currents->a = -pStator_Currents->a;
 8006454:	b2a3      	uxth	r3, r4
 8006456:	425d      	negs	r5, r3
 8006458:	b22d      	sxth	r5, r5
      wAux = -wAux -  ( int32_t )pStator_Currents->a;
 800645a:	f8d0 6090 	ldr.w	r6, [r0, #144]	@ 0x90
 800645e:	1b92      	subs	r2, r2, r6
 8006460:	1b12      	subs	r2, r2, r4
      if ( wAux > INT16_MAX )
 8006462:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8006466:	da3e      	bge.n	80064e6 <R3_1_GetPhaseCurrents+0x116>
      else  if ( wAux < -INT16_MAX )
 8006468:	f512 4f00 	cmn.w	r2, #32768	@ 0x8000
 800646c:	dd43      	ble.n	80064f6 <R3_1_GetPhaseCurrents+0x126>
  pStator_Currents->b = -pStator_Currents->b;
 800646e:	fa1f fc82 	uxth.w	ip, r2
 8006472:	f1cc 0400 	rsb	r4, ip, #0
 8006476:	b224      	sxth	r4, r4
 8006478:	e7d8      	b.n	800642c <R3_1_GetPhaseCurrents+0x5c>
      wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg1 );
 800647a:	f8d0 508c 	ldr.w	r5, [r0, #140]	@ 0x8c
 800647e:	1aed      	subs	r5, r5, r3
      if ( wAux < -INT16_MAX )
 8006480:	4b2f      	ldr	r3, [pc, #188]	@ (8006540 <R3_1_GetPhaseCurrents+0x170>)
 8006482:	429d      	cmp	r5, r3
 8006484:	db1c      	blt.n	80064c0 <R3_1_GetPhaseCurrents+0xf0>
      else  if ( wAux > INT16_MAX )
 8006486:	f5b5 4f00 	cmp.w	r5, #32768	@ 0x8000
 800648a:	da3e      	bge.n	800650a <R3_1_GetPhaseCurrents+0x13a>
  pStator_Currents->b = -pStator_Currents->b;
 800648c:	fa1f fc85 	uxth.w	ip, r5
 8006490:	f1cc 0400 	rsb	r4, ip, #0
 8006494:	b224      	sxth	r4, r4
      wAux = -wAux - ( int32_t )pStator_Currents->b;
 8006496:	f8d0 3090 	ldr.w	r3, [r0, #144]	@ 0x90
 800649a:	1ad3      	subs	r3, r2, r3
 800649c:	1b5b      	subs	r3, r3, r5
      if ( wAux > INT16_MAX )
 800649e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80064a2:	da24      	bge.n	80064ee <R3_1_GetPhaseCurrents+0x11e>
      else  if ( wAux < -INT16_MAX )
 80064a4:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 80064a8:	dd3c      	ble.n	8006524 <R3_1_GetPhaseCurrents+0x154>
  pStator_Currents->a = -pStator_Currents->a;
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	425d      	negs	r5, r3
 80064ae:	b22d      	sxth	r5, r5
 80064b0:	e7bc      	b.n	800642c <R3_1_GetPhaseCurrents+0x5c>
 80064b2:	425d      	negs	r5, r3
 80064b4:	b22d      	sxth	r5, r5
 80064b6:	f647 74ff 	movw	r4, #32767	@ 0x7fff
 80064ba:	f248 0c01 	movw	ip, #32769	@ 0x8001
 80064be:	e7b5      	b.n	800642c <R3_1_GetPhaseCurrents+0x5c>
 80064c0:	f647 74ff 	movw	r4, #32767	@ 0x7fff
 80064c4:	461d      	mov	r5, r3
 80064c6:	f248 0c01 	movw	ip, #32769	@ 0x8001
 80064ca:	e7e4      	b.n	8006496 <R3_1_GetPhaseCurrents+0xc6>
 80064cc:	f647 75ff 	movw	r5, #32767	@ 0x7fff
 80064d0:	4634      	mov	r4, r6
 80064d2:	f248 0301 	movw	r3, #32769	@ 0x8001
 80064d6:	e7c0      	b.n	800645a <R3_1_GetPhaseCurrents+0x8a>
      else  if ( wAux > INT16_MAX )
 80064d8:	f5b4 4f00 	cmp.w	r4, #32768	@ 0x8000
        pStator_Currents->a = ( int16_t )wAux;
 80064dc:	bfb4      	ite	lt
 80064de:	b223      	sxthlt	r3, r4
 80064e0:	f647 73ff 	movwge	r3, #32767	@ 0x7fff
 80064e4:	e793      	b.n	800640e <R3_1_GetPhaseCurrents+0x3e>
 80064e6:	4c16      	ldr	r4, [pc, #88]	@ (8006540 <R3_1_GetPhaseCurrents+0x170>)
 80064e8:	f647 7cff 	movw	ip, #32767	@ 0x7fff
 80064ec:	e79e      	b.n	800642c <R3_1_GetPhaseCurrents+0x5c>
 80064ee:	4d14      	ldr	r5, [pc, #80]	@ (8006540 <R3_1_GetPhaseCurrents+0x170>)
 80064f0:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 80064f4:	e79a      	b.n	800642c <R3_1_GetPhaseCurrents+0x5c>
 80064f6:	f647 74ff 	movw	r4, #32767	@ 0x7fff
 80064fa:	f248 0c01 	movw	ip, #32769	@ 0x8001
 80064fe:	e795      	b.n	800642c <R3_1_GetPhaseCurrents+0x5c>
 8006500:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8006504:	4635      	mov	r5, r6
 8006506:	461c      	mov	r4, r3
 8006508:	e7a7      	b.n	800645a <R3_1_GetPhaseCurrents+0x8a>
 800650a:	f647 7cff 	movw	ip, #32767	@ 0x7fff
 800650e:	461c      	mov	r4, r3
 8006510:	4665      	mov	r5, ip
 8006512:	e7c0      	b.n	8006496 <R3_1_GetPhaseCurrents+0xc6>
  pStator_Currents->b = -pStator_Currents->b;
 8006514:	fa1f fc8c 	uxth.w	ip, ip
  pStator_Currents->a = -pStator_Currents->a;
 8006518:	425d      	negs	r5, r3
  pStator_Currents->b = -pStator_Currents->b;
 800651a:	f1cc 0400 	rsb	r4, ip, #0
  pStator_Currents->a = -pStator_Currents->a;
 800651e:	b22d      	sxth	r5, r5
  pStator_Currents->b = -pStator_Currents->b;
 8006520:	b224      	sxth	r4, r4
 8006522:	e783      	b.n	800642c <R3_1_GetPhaseCurrents+0x5c>
 8006524:	f647 75ff 	movw	r5, #32767	@ 0x7fff
 8006528:	f248 0301 	movw	r3, #32769	@ 0x8001
 800652c:	e77e      	b.n	800642c <R3_1_GetPhaseCurrents+0x5c>
  pStator_Currents->a = -pStator_Currents->a;
 800652e:	880b      	ldrh	r3, [r1, #0]
  pStator_Currents->b = -pStator_Currents->b;
 8006530:	f8b1 c002 	ldrh.w	ip, [r1, #2]
  pStator_Currents->a = -pStator_Currents->a;
 8006534:	425d      	negs	r5, r3
  pStator_Currents->b = -pStator_Currents->b;
 8006536:	f1cc 0400 	rsb	r4, ip, #0
  pStator_Currents->a = -pStator_Currents->a;
 800653a:	b22d      	sxth	r5, r5
  pStator_Currents->b = -pStator_Currents->b;
 800653c:	b224      	sxth	r4, r4
 800653e:	e775      	b.n	800642c <R3_1_GetPhaseCurrents+0x5c>
 8006540:	ffff8001 	.word	0xffff8001

08006544 <R3_1_HFCurrentsCalibrationAB>:
  *         of phase A and B in ab_t format.
  */
__weak void R3_1_HFCurrentsCalibrationAB( PWMC_Handle_t * pHdl, ab_t * pStator_Currents )
{
  PWMC_R3_1_Handle_t * pHandle = (PWMC_R3_1_Handle_t *) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006544:	f8d0 30a0 	ldr.w	r3, [r0, #160]	@ 0xa0
{
 8006548:	b430      	push	{r4, r5}
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 800654a:	e9d3 4200 	ldrd	r4, r2, [r3]
 800654e:	6a13      	ldr	r3, [r2, #32]
 8006550:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006554:	6213      	str	r3, [r2, #32]
  
  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 8006556:	f890 309f 	ldrb.w	r3, [r0, #159]	@ 0x9f
 800655a:	2b0f      	cmp	r3, #15
 800655c:	d80f      	bhi.n	800657e <R3_1_HFCurrentsCalibrationAB+0x3a>
  {
    pHandle->PhaseAOffset += ADCx->JDR1;
 800655e:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8006560:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
    pHandle->PhaseBOffset += ADCx->JDR2;
 8006564:	6c25      	ldr	r5, [r4, #64]	@ 0x40
    pHandle->PhaseAOffset += ADCx->JDR1;
 8006566:	189c      	adds	r4, r3, r2
    pHandle->PhaseBOffset += ADCx->JDR2;
 8006568:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
    pHandle->PolarizationCounter++;
 800656c:	f890 309f 	ldrb.w	r3, [r0, #159]	@ 0x9f
    pHandle->PhaseBOffset += ADCx->JDR2;
 8006570:	442a      	add	r2, r5
    pHandle->PolarizationCounter++;
 8006572:	3301      	adds	r3, #1
    pHandle->PhaseBOffset += ADCx->JDR2;
 8006574:	e9c0 4222 	strd	r4, r2, [r0, #136]	@ 0x88
    pHandle->PolarizationCounter++;
 8006578:	b2db      	uxtb	r3, r3
 800657a:	f880 309f 	strb.w	r3, [r0, #159]	@ 0x9f
  }

  /* during offset calibration no current is flowing in the phases */
  pStator_Currents->a = 0;
 800657e:	2300      	movs	r3, #0
  pStator_Currents->b = 0;
}
 8006580:	bc30      	pop	{r4, r5}
  pStator_Currents->a = 0;
 8006582:	600b      	str	r3, [r1, #0]
}
 8006584:	4770      	bx	lr
 8006586:	bf00      	nop

08006588 <R3_1_HFCurrentsCalibrationC>:
  *         of phase A and B in ab_t format.
  */
__weak void R3_1_HFCurrentsCalibrationC(PWMC_Handle_t *pHdl, ab_t* pStator_Currents)
{
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006588:	f8d0 30a0 	ldr.w	r3, [r0, #160]	@ 0xa0
{
 800658c:	b410      	push	{r4}
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 800658e:	e9d3 4200 	ldrd	r4, r2, [r3]
 8006592:	6a13      	ldr	r3, [r2, #32]
 8006594:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006598:	6213      	str	r3, [r2, #32]

  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 800659a:	f890 309f 	ldrb.w	r3, [r0, #159]	@ 0x9f
 800659e:	2b0f      	cmp	r3, #15
 80065a0:	d80b      	bhi.n	80065ba <R3_1_HFCurrentsCalibrationC+0x32>
  {
    pHandle->PhaseCOffset += ADCx->JDR2;
 80065a2:	6c24      	ldr	r4, [r4, #64]	@ 0x40
    pHandle->PolarizationCounter++;
 80065a4:	f890 309f 	ldrb.w	r3, [r0, #159]	@ 0x9f
    pHandle->PhaseCOffset += ADCx->JDR2;
 80065a8:	f8d0 2090 	ldr.w	r2, [r0, #144]	@ 0x90
    pHandle->PolarizationCounter++;
 80065ac:	3301      	adds	r3, #1
    pHandle->PhaseCOffset += ADCx->JDR2;
 80065ae:	4422      	add	r2, r4
    pHandle->PolarizationCounter++;
 80065b0:	b2db      	uxtb	r3, r3
    pHandle->PhaseCOffset += ADCx->JDR2;
 80065b2:	f8c0 2090 	str.w	r2, [r0, #144]	@ 0x90
    pHandle->PolarizationCounter++;
 80065b6:	f880 309f 	strb.w	r3, [r0, #159]	@ 0x9f
  }

  /* during offset calibration no current is flowing in the phases */
  pStator_Currents->a = 0;
 80065ba:	2300      	movs	r3, #0
  pStator_Currents->b = 0;
}
 80065bc:	f85d 4b04 	ldr.w	r4, [sp], #4
  pStator_Currents->a = 0;
 80065c0:	600b      	str	r3, [r1, #0]
}
 80065c2:	4770      	bx	lr

080065c4 <R3_1_SwitchOnPWM>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  */
__weak void R3_1_SwitchOnPWM(PWMC_Handle_t *pHdl)
{  
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 80065c4:	f8d0 30a0 	ldr.w	r3, [r0, #160]	@ 0xa0

  pHandle->_Super.TurnOnLowSidesAction = false;
  
  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
 80065c8:	f8b0 209c 	ldrh.w	r2, [r0, #156]	@ 0x9c
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 80065cc:	685b      	ldr	r3, [r3, #4]
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
 80065ce:	0851      	lsrs	r1, r2, #1
  pHandle->_Super.TurnOnLowSidesAction = false;
 80065d0:	f04f 0c00 	mov.w	ip, #0
{  
 80065d4:	b5f0      	push	{r4, r5, r6, r7, lr}
  pHandle->_Super.TurnOnLowSidesAction = false;
 80065d6:	f880 c07e 	strb.w	ip, [r0, #126]	@ 0x7e
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
  LL_TIM_OC_SetCompareCH4(TIMx, (uint32_t)(pHandle->Half_PWMPeriod - 5u));
 80065da:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR1, CompareValue);
 80065dc:	6359      	str	r1, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 80065de:	6399      	str	r1, [r3, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80065e0:	63d9      	str	r1, [r3, #60]	@ 0x3c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80065e2:	f06f 0101 	mvn.w	r1, #1
  WRITE_REG(TIMx->CCR4, CompareValue);
 80065e6:	641a      	str	r2, [r3, #64]	@ 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80065e8:	6119      	str	r1, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80065ea:	691a      	ldr	r2, [r3, #16]
 80065ec:	07d2      	lsls	r2, r2, #31
 80065ee:	d5fc      	bpl.n	80065ea <R3_1_SwitchOnPWM+0x26>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80065f0:	f06f 0201 	mvn.w	r2, #1
 80065f4:	611a      	str	r2, [r3, #16]
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE(TIMx);

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 80065f6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80065f8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80065fc:	645a      	str	r2, [r3, #68]	@ 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80065fe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006600:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006604:	645a      	str	r2, [r3, #68]	@ 0x44
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->_Super.LowSideOutputs ) == ES_GPIO )
 8006606:	f890 207d 	ldrb.w	r2, [r0, #125]	@ 0x7d
 800660a:	2a02      	cmp	r2, #2
 800660c:	d007      	beq.n	800661e <R3_1_SwitchOnPWM+0x5a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800660e:	f06f 0201 	mvn.w	r2, #1
 8006612:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8006614:	68da      	ldr	r2, [r3, #12]
 8006616:	f042 0201 	orr.w	r2, r2, #1
 800661a:	60da      	str	r2, [r3, #12]
  LL_TIM_ClearFlag_UPDATE( TIMx );
  /* Enable Update IRQ */
  LL_TIM_EnableIT_UPDATE( TIMx );

  return; 
}
 800661c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0u)
 800661e:	6a1d      	ldr	r5, [r3, #32]
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 8006620:	f8d0 e03c 	ldr.w	lr, [r0, #60]	@ 0x3c
 8006624:	f8b0 4048 	ldrh.w	r4, [r0, #72]	@ 0x48
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 8006628:	6c07      	ldr	r7, [r0, #64]	@ 0x40
 800662a:	f8b0 104a 	ldrh.w	r1, [r0, #74]	@ 0x4a
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800662e:	6c46      	ldr	r6, [r0, #68]	@ 0x44
 8006630:	f8b0 204c 	ldrh.w	r2, [r0, #76]	@ 0x4c
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0u)
 8006634:	f240 5c55 	movw	ip, #1365	@ 0x555
 8006638:	ea15 0f0c 	tst.w	r5, ip
 800663c:	d004      	beq.n	8006648 <R3_1_SwitchOnPWM+0x84>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 800663e:	f8ce 4018 	str.w	r4, [lr, #24]
 8006642:	61b9      	str	r1, [r7, #24]
 8006644:	61b2      	str	r2, [r6, #24]
}
 8006646:	e7e2      	b.n	800660e <R3_1_SwitchOnPWM+0x4a>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8006648:	0424      	lsls	r4, r4, #16
 800664a:	0409      	lsls	r1, r1, #16
 800664c:	0412      	lsls	r2, r2, #16
 800664e:	f8ce 4018 	str.w	r4, [lr, #24]
 8006652:	61b9      	str	r1, [r7, #24]
 8006654:	61b2      	str	r2, [r6, #24]
}
 8006656:	e7da      	b.n	800660e <R3_1_SwitchOnPWM+0x4a>

08006658 <R3_1_SwitchOffPWM>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  */
__weak void R3_1_SwitchOffPWM(PWMC_Handle_t *pHdl)
{
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8006658:	f8d0 30a0 	ldr.w	r3, [r0, #160]	@ 0xa0

  pHandle->_Super.TurnOnLowSidesAction = false;

  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs(TIMx);
  if (pHandle->_Super.BrakeActionLock == true)
 800665c:	f890 1085 	ldrb.w	r1, [r0, #133]	@ 0x85
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8006660:	685a      	ldr	r2, [r3, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8006662:	68d3      	ldr	r3, [r2, #12]
 8006664:	f023 0301 	bic.w	r3, r3, #1
 8006668:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800666a:	6c53      	ldr	r3, [r2, #68]	@ 0x44
  pHandle->_Super.TurnOnLowSidesAction = false;
 800666c:	f04f 0c00 	mov.w	ip, #0
 8006670:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006674:	f880 c07e 	strb.w	ip, [r0, #126]	@ 0x7e
 8006678:	6453      	str	r3, [r2, #68]	@ 0x44
  if (pHandle->_Super.BrakeActionLock == true)
 800667a:	b919      	cbnz	r1, 8006684 <R3_1_SwitchOffPWM+0x2c>
  {
  }
  else
  {
    if ( ( pHandle->_Super.LowSideOutputs ) == ES_GPIO )
 800667c:	f890 307d 	ldrb.w	r3, [r0, #125]	@ 0x7d
 8006680:	2b02      	cmp	r3, #2
 8006682:	d009      	beq.n	8006698 <R3_1_SwitchOffPWM+0x40>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006684:	f06f 0301 	mvn.w	r3, #1
 8006688:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800668a:	6913      	ldr	r3, [r2, #16]
 800668c:	07db      	lsls	r3, r3, #31
 800668e:	d5fc      	bpl.n	800668a <R3_1_SwitchOffPWM+0x32>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006690:	f06f 0301 	mvn.w	r3, #1
 8006694:	6113      	str	r3, [r2, #16]
 8006696:	4770      	bx	lr
{
 8006698:	b430      	push	{r4, r5}
    {
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 800669a:	f8b0 4048 	ldrh.w	r4, [r0, #72]	@ 0x48
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800669e:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 80066a0:	f8b0 104a 	ldrh.w	r1, [r0, #74]	@ 0x4a
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 80066a4:	f8b0 304c 	ldrh.w	r3, [r0, #76]	@ 0x4c
 80066a8:	0424      	lsls	r4, r4, #16
 80066aa:	61ac      	str	r4, [r5, #24]
 80066ac:	e9d0 4010 	ldrd	r4, r0, [r0, #64]	@ 0x40
 80066b0:	041b      	lsls	r3, r3, #16
 80066b2:	0409      	lsls	r1, r1, #16
 80066b4:	61a1      	str	r1, [r4, #24]
 80066b6:	6183      	str	r3, [r0, #24]
 80066b8:	f06f 0301 	mvn.w	r3, #1
 80066bc:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80066be:	6913      	ldr	r3, [r2, #16]
 80066c0:	07d9      	lsls	r1, r3, #31
 80066c2:	d5fc      	bpl.n	80066be <R3_1_SwitchOffPWM+0x66>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80066c4:	f06f 0301 	mvn.w	r3, #1
  while (LL_TIM_IsActiveFlag_UPDATE(TIMx) == 0)
  {}
  LL_TIM_ClearFlag_UPDATE(TIMx);

  return;
}
 80066c8:	bc30      	pop	{r4, r5}
 80066ca:	6113      	str	r3, [r2, #16]
 80066cc:	4770      	bx	lr
 80066ce:	bf00      	nop

080066d0 <R3_1_RLGetPhaseCurrents>:
  */
void R3_1_RLGetPhaseCurrents(PWMC_Handle_t *pHdl,ab_t* pStator_Currents)
{

  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80066d0:	f8d0 20a0 	ldr.w	r2, [r0, #160]	@ 0xa0
  int32_t wAux;
  
  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);
  
  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t)((ADCx->JDR2)*2u);
 80066d4:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
{
 80066d8:	b410      	push	{r4}
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 80066da:	e9d2 4000 	ldrd	r4, r0, [r2]
  CLEAR_BIT(TIMx->CCER, Channels);
 80066de:	6a02      	ldr	r2, [r0, #32]
 80066e0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80066e4:	6202      	str	r2, [r0, #32]
  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t)((ADCx->JDR2)*2u);
 80066e6:	6c20      	ldr	r0, [r4, #64]	@ 0x40
  
  /* Check saturation */
  if (wAux > -INT16_MAX)
 80066e8:	4a0a      	ldr	r2, [pc, #40]	@ (8006714 <R3_1_RLGetPhaseCurrents+0x44>)
  /* First value read of Phase B*/
  wAux = -wAux;
  pStator_Currents->a = ( int16_t )( wAux );
  pStator_Currents->b = ( int16_t )( wAux );

}
 80066ea:	f85d 4b04 	ldr.w	r4, [sp], #4
  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t)((ADCx->JDR2)*2u);
 80066ee:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
    if (wAux < INT16_MAX)
 80066f2:	f647 70ff 	movw	r0, #32767	@ 0x7fff
 80066f6:	4283      	cmp	r3, r0
 80066f8:	bfa8      	it	ge
 80066fa:	4603      	movge	r3, r0
 80066fc:	4293      	cmp	r3, r2
 80066fe:	bfb8      	it	lt
 8006700:	4613      	movlt	r3, r2
  wAux = -wAux;
 8006702:	425b      	negs	r3, r3
  pStator_Currents->a = ( int16_t )( wAux );
 8006704:	b21b      	sxth	r3, r3
 8006706:	2200      	movs	r2, #0
 8006708:	f363 020f 	bfi	r2, r3, #0, #16
 800670c:	f363 421f 	bfi	r2, r3, #16, #16
 8006710:	600a      	str	r2, [r1, #0]
}
 8006712:	4770      	bx	lr
 8006714:	ffff8001 	.word	0xffff8001

08006718 <R3_1_RLSwitchOnPWM>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  */
void R3_1_RLSwitchOnPWM(PWMC_Handle_t *pHdl)
{
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8006718:	f8d0 20a0 	ldr.w	r2, [r0, #160]	@ 0xa0
{
 800671c:	b5f0      	push	{r4, r5, r6, r7, lr}
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
  
  pHandle->_Super.TurnOnLowSidesAction = false;
 800671e:	2400      	movs	r4, #0
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 8006720:	e9d2 1300 	ldrd	r1, r3, [r2]
  pHandle->_Super.TurnOnLowSidesAction = false;
 8006724:	f880 407e 	strb.w	r4, [r0, #126]	@ 0x7e
  /* The following while cycles ensure the identification of the nergative counting mode of TIM1
   * for correct modification of Repetition Counter value of TIM1.*/

  /* Wait the change of Counter Direction of TIM1 from Down-Direction to Up-Direction*/

  while ( ( TIMx->CR1 & DIR_MASK ) == DIR_MASK )
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	06d5      	lsls	r5, r2, #27
 800672c:	d4fc      	bmi.n	8006728 <R3_1_RLSwitchOnPWM+0x10>
  {
  }
  /* Wait the change of Counter Direction of TIM1 from Up-Direction to Down-Direction*/
  while ( ( TIMx->CR1 & DIR_MASK ) == 0u )
 800672e:	681a      	ldr	r2, [r3, #0]
 8006730:	06d4      	lsls	r4, r2, #27
 8006732:	d5fc      	bpl.n	800672e <R3_1_RLSwitchOnPWM+0x16>
  /* Set channel 1 Compare/Capture register to 1 */
  LL_TIM_OC_SetCompareCH1(TIMx, 1u);

  /* Set channel 4 Compare/Capture register to trig ADC in the middle 
     of the PWM period */
  LL_TIM_OC_SetCompareCH4(TIMx,(( uint32_t )( pHandle->Half_PWMPeriod ) - 5u));
 8006734:	f8b0 209c 	ldrh.w	r2, [r0, #156]	@ 0x9c
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006738:	2401      	movs	r4, #1
 800673a:	3a05      	subs	r2, #5
 800673c:	635c      	str	r4, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR4, CompareValue);
 800673e:	641a      	str	r2, [r3, #64]	@ 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006740:	f06f 0201 	mvn.w	r2, #1
 8006744:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8006746:	691a      	ldr	r2, [r3, #16]
 8006748:	07d2      	lsls	r2, r2, #31
 800674a:	d5fc      	bpl.n	8006746 <R3_1_RLSwitchOnPWM+0x2e>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800674c:	f06f 0201 	mvn.w	r2, #1
 8006750:	611a      	str	r2, [r3, #16]
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
  {}
  LL_TIM_ClearFlag_UPDATE( TIMx );
  
  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8006752:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006754:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006758:	645a      	str	r2, [r3, #68]	@ 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800675a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800675c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006760:	645a      	str	r2, [r3, #68]	@ 0x44
  LL_TIM_EnableAllOutputs(TIMx);

  if ( ( pHandle->_Super.LowSideOutputs ) == ES_GPIO )
 8006762:	f890 207d 	ldrb.w	r2, [r0, #125]	@ 0x7d
 8006766:	2a02      	cmp	r2, #2
 8006768:	d119      	bne.n	800679e <R3_1_RLSwitchOnPWM+0x86>
  {
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0u)
 800676a:	6a1e      	ldr	r6, [r3, #32]
    {
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800676c:	f8b0 204c 	ldrh.w	r2, [r0, #76]	@ 0x4c
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 8006770:	f8b0 5048 	ldrh.w	r5, [r0, #72]	@ 0x48
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 8006774:	f8b0 404a 	ldrh.w	r4, [r0, #74]	@ 0x4a
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 8006778:	f8d0 e03c 	ldr.w	lr, [r0, #60]	@ 0x3c
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800677c:	6c07      	ldr	r7, [r0, #64]	@ 0x40
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800677e:	6c40      	ldr	r0, [r0, #68]	@ 0x44
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0u)
 8006780:	f240 5c55 	movw	ip, #1365	@ 0x555
 8006784:	ea16 0f0c 	tst.w	r6, ip
 8006788:	ea4f 4202 	mov.w	r2, r2, lsl #16
 800678c:	bf05      	ittet	eq
 800678e:	042d      	lsleq	r5, r5, #16
 8006790:	0424      	lsleq	r4, r4, #16
  WRITE_REG(GPIOx->BSRR, PinMask);
 8006792:	f8ce 5018 	strne.w	r5, [lr, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8006796:	f8ce 5018 	streq.w	r5, [lr, #24]
 800679a:	61bc      	str	r4, [r7, #24]
 800679c:	6182      	str	r2, [r0, #24]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800679e:	f06f 0201 	mvn.w	r2, #1
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 80067a2:	f06f 0004 	mvn.w	r0, #4
 80067a6:	6008      	str	r0, [r1, #0]
 80067a8:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80067aa:	68da      	ldr	r2, [r3, #12]
 80067ac:	f042 0201 	orr.w	r2, r2, #1
 80067b0:	60da      	str	r2, [r3, #12]

  /* enable TIMx update interrupt*/
  LL_TIM_EnableIT_UPDATE( TIMx );

  return; 
}
 80067b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080067b4 <R3_1_TurnOnLowSides>:
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 80067b4:	f8d0 20a0 	ldr.w	r2, [r0, #160]	@ 0xa0
 80067b8:	6852      	ldr	r2, [r2, #4]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80067ba:	2300      	movs	r3, #0
  pHandle->_Super.TurnOnLowSidesAction = true;
 80067bc:	f04f 0c01 	mov.w	ip, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80067c0:	f06f 0101 	mvn.w	r1, #1
 80067c4:	f880 c07e 	strb.w	ip, [r0, #126]	@ 0x7e
 80067c8:	6111      	str	r1, [r2, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80067ca:	6353      	str	r3, [r2, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 80067cc:	6393      	str	r3, [r2, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80067ce:	63d3      	str	r3, [r2, #60]	@ 0x3c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80067d0:	6913      	ldr	r3, [r2, #16]
 80067d2:	07db      	lsls	r3, r3, #31
 80067d4:	d5fc      	bpl.n	80067d0 <R3_1_TurnOnLowSides+0x1c>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80067d6:	f06f 0301 	mvn.w	r3, #1
 80067da:	6113      	str	r3, [r2, #16]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80067dc:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 80067de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067e2:	6453      	str	r3, [r2, #68]	@ 0x44
  if ((pHandle->_Super.LowSideOutputs)== ES_GPIO)
 80067e4:	f890 307d 	ldrb.w	r3, [r0, #125]	@ 0x7d
 80067e8:	2b02      	cmp	r3, #2
 80067ea:	d000      	beq.n	80067ee <R3_1_TurnOnLowSides+0x3a>
 80067ec:	4770      	bx	lr
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 80067ee:	e9d0 210f 	ldrd	r2, r1, [r0, #60]	@ 0x3c
{
 80067f2:	b410      	push	{r4}
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 80067f4:	6c43      	ldr	r3, [r0, #68]	@ 0x44
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 80067f6:	f8b0 4048 	ldrh.w	r4, [r0, #72]	@ 0x48
  WRITE_REG(GPIOx->BSRR, PinMask);
 80067fa:	6194      	str	r4, [r2, #24]
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 80067fc:	f8b0 404a 	ldrh.w	r4, [r0, #74]	@ 0x4a
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8006800:	f8b0 204c 	ldrh.w	r2, [r0, #76]	@ 0x4c
 8006804:	618c      	str	r4, [r1, #24]
}
 8006806:	f85d 4b04 	ldr.w	r4, [sp], #4
 800680a:	619a      	str	r2, [r3, #24]
 800680c:	4770      	bx	lr
 800680e:	bf00      	nop

08006810 <R3_1_RLTurnOnLowSides>:
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8006810:	f8d0 20a0 	ldr.w	r2, [r0, #160]	@ 0xa0
 8006814:	6852      	ldr	r2, [r2, #4]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006816:	2100      	movs	r1, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006818:	f06f 0301 	mvn.w	r3, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 800681c:	6351      	str	r1, [r2, #52]	@ 0x34
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800681e:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8006820:	6913      	ldr	r3, [r2, #16]
 8006822:	07db      	lsls	r3, r3, #31
 8006824:	d5fc      	bpl.n	8006820 <R3_1_RLTurnOnLowSides+0x10>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006826:	f06f 0301 	mvn.w	r3, #1
 800682a:	6113      	str	r3, [r2, #16]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800682c:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 800682e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006832:	6453      	str	r3, [r2, #68]	@ 0x44
  if ( ( pHandle->_Super.LowSideOutputs ) == ES_GPIO )
 8006834:	f890 307d 	ldrb.w	r3, [r0, #125]	@ 0x7d
 8006838:	2b02      	cmp	r3, #2
 800683a:	d000      	beq.n	800683e <R3_1_RLTurnOnLowSides+0x2e>
 800683c:	4770      	bx	lr
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 800683e:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
    LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 8006840:	f8b0 204a 	ldrh.w	r2, [r0, #74]	@ 0x4a
    LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8006844:	f8b0 304c 	ldrh.w	r3, [r0, #76]	@ 0x4c
{  
 8006848:	b410      	push	{r4}
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 800684a:	f8b0 4048 	ldrh.w	r4, [r0, #72]	@ 0x48
 800684e:	618c      	str	r4, [r1, #24]
    LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8006850:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8006854:	0412      	lsls	r2, r2, #16
 8006856:	041b      	lsls	r3, r3, #16
 8006858:	61a2      	str	r2, [r4, #24]
}
 800685a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800685e:	618b      	str	r3, [r1, #24]
 8006860:	4770      	bx	lr
 8006862:	bf00      	nop

08006864 <R3_1_Init>:
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8006864:	f8d0 20a0 	ldr.w	r2, [r0, #160]	@ 0xa0
  ADC_TypeDef* ADCx  = pHandle->pParams_str->ADCx;
 8006868:	6813      	ldr	r3, [r2, #0]
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 800686a:	6852      	ldr	r2, [r2, #4]
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 800686c:	6859      	ldr	r1, [r3, #4]
{
 800686e:	b430      	push	{r4, r5}
 8006870:	f021 0120 	bic.w	r1, r1, #32
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 8006874:	f06f 0402 	mvn.w	r4, #2
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 8006878:	6059      	str	r1, [r3, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 800687a:	601c      	str	r4, [r3, #0]
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 800687c:	6859      	ldr	r1, [r3, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 800687e:	f06f 0404 	mvn.w	r4, #4
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8006882:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8006886:	6059      	str	r1, [r3, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8006888:	601c      	str	r4, [r3, #0]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 800688a:	6811      	ldr	r1, [r2, #0]
    if ( TIMx == TIM1 )
 800688c:	4c1e      	ldr	r4, [pc, #120]	@ (8006908 <R3_1_Init+0xa4>)
 800688e:	f021 0101 	bic.w	r1, r1, #1
 8006892:	42a2      	cmp	r2, r4
 8006894:	6011      	str	r1, [r2, #0]
 8006896:	d031      	beq.n	80068fc <R3_1_Init+0x98>
    else if ( TIMx == TIM8 )
 8006898:	491c      	ldr	r1, [pc, #112]	@ (800690c <R3_1_Init+0xa8>)
 800689a:	428a      	cmp	r2, r1
 800689c:	d028      	beq.n	80068f0 <R3_1_Init+0x8c>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 800689e:	f06f 0180 	mvn.w	r1, #128	@ 0x80
 80068a2:	6111      	str	r1, [r2, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 80068a4:	68d1      	ldr	r1, [r2, #12]
 80068a6:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 80068aa:	60d1      	str	r1, [r2, #12]
  SET_BIT(TIMx->CCER, Channels);
 80068ac:	6a11      	ldr	r1, [r2, #32]
 80068ae:	f441 61aa 	orr.w	r1, r1, #1360	@ 0x550
 80068b2:	f041 0105 	orr.w	r1, r1, #5
 80068b6:	6211      	str	r1, [r2, #32]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 80068b8:	689a      	ldr	r2, [r3, #8]
 80068ba:	f042 0201 	orr.w	r2, r2, #1
 80068be:	609a      	str	r2, [r3, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80068c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 80068c2:	f06f 0504 	mvn.w	r5, #4
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80068c6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80068ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 80068cc:	601d      	str	r5, [r3, #0]
  SET_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 80068ce:	685a      	ldr	r2, [r3, #4]
 80068d0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80068d4:	605a      	str	r2, [r3, #4]
  MODIFY_REG(ADCx->JSQR, ADC_JSQR_JL, SequencerNbRanks);
 80068d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
    pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 80068d8:	f44f 1480 	mov.w	r4, #1048576	@ 0x100000
    pHandle->_Super.DTTest = 0u;
 80068dc:	2100      	movs	r1, #0
 80068de:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
    pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 80068e2:	f8c0 4098 	str.w	r4, [r0, #152]	@ 0x98
 80068e6:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80068e8:	bc30      	pop	{r4, r5}
    pHandle->_Super.DTTest = 0u;
 80068ea:	f8a0 1070 	strh.w	r1, [r0, #112]	@ 0x70
}
 80068ee:	4770      	bx	lr
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 80068f0:	4c07      	ldr	r4, [pc, #28]	@ (8006910 <R3_1_Init+0xac>)
 80068f2:	68e1      	ldr	r1, [r4, #12]
 80068f4:	f041 0102 	orr.w	r1, r1, #2
 80068f8:	60e1      	str	r1, [r4, #12]
}
 80068fa:	e7d0      	b.n	800689e <R3_1_Init+0x3a>
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 80068fc:	4c04      	ldr	r4, [pc, #16]	@ (8006910 <R3_1_Init+0xac>)
 80068fe:	68e1      	ldr	r1, [r4, #12]
 8006900:	f041 0101 	orr.w	r1, r1, #1
 8006904:	60e1      	str	r1, [r4, #12]
}
 8006906:	e7ca      	b.n	800689e <R3_1_Init+0x3a>
 8006908:	40010000 	.word	0x40010000
 800690c:	40010400 	.word	0x40010400
 8006910:	e0042000 	.word	0xe0042000

08006914 <R3_1_SetOffsetCalib>:
{
 8006914:	b410      	push	{r4}
  pHandle->PhaseAOffset = offsets->phaseAOffset;
 8006916:	e9d1 4201 	ldrd	r4, r2, [r1, #4]
 800691a:	680b      	ldr	r3, [r1, #0]
 800691c:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  pHdl->offsetCalibStatus = true;
 8006920:	2301      	movs	r3, #1
  pHandle->PhaseAOffset = offsets->phaseAOffset;
 8006922:	e9c0 4223 	strd	r4, r2, [r0, #140]	@ 0x8c
  pHdl->offsetCalibStatus = true;
 8006926:	f880 3081 	strb.w	r3, [r0, #129]	@ 0x81
}
 800692a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800692e:	4770      	bx	lr

08006930 <R3_1_GetOffsetCalib>:
  offsets->phaseAOffset = pHandle->PhaseAOffset;
 8006930:	e9d0 2323 	ldrd	r2, r3, [r0, #140]	@ 0x8c
 8006934:	f8d0 0088 	ldr.w	r0, [r0, #136]	@ 0x88
 8006938:	608b      	str	r3, [r1, #8]
 800693a:	e9c1 0200 	strd	r0, r2, [r1]
}
 800693e:	4770      	bx	lr

08006940 <R3_1_CurrentReadingCalibration>:
{
 8006940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8006944:	f8d0 30a0 	ldr.w	r3, [r0, #160]	@ 0xa0
  if (false == pHandle->_Super.offsetCalibStatus)
 8006948:	f890 6081 	ldrb.w	r6, [r0, #129]	@ 0x81
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 800694c:	685c      	ldr	r4, [r3, #4]
{
 800694e:	b082      	sub	sp, #8
 8006950:	4605      	mov	r5, r0
  if (false == pHandle->_Super.offsetCalibStatus)
 8006952:	b35e      	cbz	r6, 80069ac <R3_1_CurrentReadingCalibration+0x6c>
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8006954:	69a2      	ldr	r2, [r4, #24]
  LL_TIM_OC_SetCompareCH1 (TIMx,pHandle->Half_PWMPeriod);
 8006956:	f8b5 309c 	ldrh.w	r3, [r5, #156]	@ 0x9c
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800695a:	f022 0208 	bic.w	r2, r2, #8
 800695e:	61a2      	str	r2, [r4, #24]
 8006960:	69a2      	ldr	r2, [r4, #24]
 8006962:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006966:	61a2      	str	r2, [r4, #24]
 8006968:	69e2      	ldr	r2, [r4, #28]
 800696a:	f022 0208 	bic.w	r2, r2, #8
 800696e:	61e2      	str	r2, [r4, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006970:	6363      	str	r3, [r4, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006972:	63a3      	str	r3, [r4, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8006974:	63e3      	str	r3, [r4, #60]	@ 0x3c
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8006976:	69a3      	ldr	r3, [r4, #24]
 8006978:	f043 0308 	orr.w	r3, r3, #8
 800697c:	61a3      	str	r3, [r4, #24]
 800697e:	69a3      	ldr	r3, [r4, #24]
 8006980:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8006984:	61a3      	str	r3, [r4, #24]
 8006986:	69e3      	ldr	r3, [r4, #28]
 8006988:	f043 0308 	orr.w	r3, r3, #8
 800698c:	61e3      	str	r3, [r4, #28]
  SET_BIT(TIMx->CCER, Channels);
 800698e:	6a23      	ldr	r3, [r4, #32]
 8006990:	f443 63aa 	orr.w	r3, r3, #1360	@ 0x550
  pHandle->_Super.Sector = SECTOR_5;
 8006994:	2104      	movs	r1, #4
  pHandle->_Super.BrakeActionLock = false;
 8006996:	2200      	movs	r2, #0
 8006998:	f043 0305 	orr.w	r3, r3, #5
 800699c:	6223      	str	r3, [r4, #32]
  pHandle->_Super.Sector = SECTOR_5;
 800699e:	f885 107c 	strb.w	r1, [r5, #124]	@ 0x7c
  pHandle->_Super.BrakeActionLock = false;
 80069a2:	f885 2085 	strb.w	r2, [r5, #133]	@ 0x85
}
 80069a6:	b002      	add	sp, #8
 80069a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    GetPhaseCurrCbSave = pHandle->_Super.pFctGetPhaseCurrents;
 80069ac:	6803      	ldr	r3, [r0, #0]
 80069ae:	9300      	str	r3, [sp, #0]
    pHandle->PhaseAOffset = 0u;
 80069b0:	e9c0 6622 	strd	r6, r6, [r0, #136]	@ 0x88
    SetSampPointSectXCbSave = pHandle->_Super.pFctSetADCSampPointSectX;
 80069b4:	6943      	ldr	r3, [r0, #20]
 80069b6:	9301      	str	r3, [sp, #4]
    pHandle->PolarizationCounter = 0u;
 80069b8:	f880 609f 	strb.w	r6, [r0, #159]	@ 0x9f
  CLEAR_BIT(TIMx->CCER, Channels);
 80069bc:	6a23      	ldr	r3, [r4, #32]
    pHandle->PhaseCOffset = 0u;
 80069be:	f8c0 6090 	str.w	r6, [r0, #144]	@ 0x90
 80069c2:	f423 63aa 	bic.w	r3, r3, #1360	@ 0x550
 80069c6:	f023 0305 	bic.w	r3, r3, #5
 80069ca:	6223      	str	r3, [r4, #32]
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsCalibrationAB;
 80069cc:	4b23      	ldr	r3, [pc, #140]	@ (8006a5c <R3_1_CurrentReadingCalibration+0x11c>)
 80069ce:	6003      	str	r3, [r0, #0]
    pHandle->_Super.pFctSetADCSampPointSectX = &R3_1_SetADCSampPointCalibration;
 80069d0:	4b23      	ldr	r3, [pc, #140]	@ (8006a60 <R3_1_CurrentReadingCalibration+0x120>)
 80069d2:	6143      	str	r3, [r0, #20]
    pHandle->CalibSector = SECTOR_5;
 80069d4:	2304      	movs	r3, #4
 80069d6:	f880 309e 	strb.w	r3, [r0, #158]	@ 0x9e
    pHandle->_Super.Sector = SECTOR_5;
 80069da:	f880 307c 	strb.w	r3, [r0, #124]	@ 0x7c
    R3_1_SwitchOnPWM( &pHandle->_Super );
 80069de:	f7ff fdf1 	bl	80065c4 <R3_1_SwitchOnPWM>
                            pHandle->pParams_str->RepetitionCounter,
 80069e2:	f8d5 30a0 	ldr.w	r3, [r5, #160]	@ 0xa0
    waitForPolarizationEnd( TIMx,
 80069e6:	f105 0756 	add.w	r7, r5, #86	@ 0x56
 80069ea:	f105 089f 	add.w	r8, r5, #159	@ 0x9f
 80069ee:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 80069f2:	4639      	mov	r1, r7
 80069f4:	4643      	mov	r3, r8
 80069f6:	4620      	mov	r0, r4
 80069f8:	f7ff fccc 	bl	8006394 <waitForPolarizationEnd>
    R3_1_SwitchOffPWM( &pHandle->_Super );
 80069fc:	4628      	mov	r0, r5
 80069fe:	f7ff fe2b 	bl	8006658 <R3_1_SwitchOffPWM>
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsCalibrationC;
 8006a02:	4b18      	ldr	r3, [pc, #96]	@ (8006a64 <R3_1_CurrentReadingCalibration+0x124>)
 8006a04:	602b      	str	r3, [r5, #0]
    R3_1_SwitchOnPWM( &pHandle->_Super );
 8006a06:	4628      	mov	r0, r5
    pHandle->PolarizationCounter = 0u;
 8006a08:	f885 609f 	strb.w	r6, [r5, #159]	@ 0x9f
    pHandle->CalibSector = SECTOR_1;
 8006a0c:	f885 609e 	strb.w	r6, [r5, #158]	@ 0x9e
    pHandle->_Super.Sector = SECTOR_1;
 8006a10:	f885 607c 	strb.w	r6, [r5, #124]	@ 0x7c
    R3_1_SwitchOnPWM( &pHandle->_Super );
 8006a14:	f7ff fdd6 	bl	80065c4 <R3_1_SwitchOnPWM>
                            pHandle->pParams_str->RepetitionCounter,
 8006a18:	f8d5 20a0 	ldr.w	r2, [r5, #160]	@ 0xa0
    waitForPolarizationEnd( TIMx,
 8006a1c:	4643      	mov	r3, r8
 8006a1e:	f892 202a 	ldrb.w	r2, [r2, #42]	@ 0x2a
 8006a22:	4639      	mov	r1, r7
 8006a24:	4620      	mov	r0, r4
 8006a26:	f7ff fcb5 	bl	8006394 <waitForPolarizationEnd>
    R3_1_SwitchOffPWM( &pHandle->_Super );
 8006a2a:	4628      	mov	r0, r5
 8006a2c:	f7ff fe14 	bl	8006658 <R3_1_SwitchOffPWM>
    pHandle->PhaseBOffset >>= 3;
 8006a30:	e9d5 1222 	ldrd	r1, r2, [r5, #136]	@ 0x88
    pHandle->PhaseCOffset >>= 3;
 8006a34:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
    pHandle->PhaseBOffset >>= 3;
 8006a38:	08d2      	lsrs	r2, r2, #3
    pHandle->PhaseAOffset >>= 3;
 8006a3a:	08c9      	lsrs	r1, r1, #3
    pHandle->PhaseBOffset >>= 3;
 8006a3c:	e9c5 1222 	strd	r1, r2, [r5, #136]	@ 0x88
    if (0U == pHandle->_Super.SWerror)
 8006a40:	f8b5 2056 	ldrh.w	r2, [r5, #86]	@ 0x56
    pHandle->PhaseCOffset >>= 3;
 8006a44:	08db      	lsrs	r3, r3, #3
 8006a46:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
    if (0U == pHandle->_Super.SWerror)
 8006a4a:	b912      	cbnz	r2, 8006a52 <R3_1_CurrentReadingCalibration+0x112>
      pHandle->_Super.offsetCalibStatus = true;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	f885 3081 	strb.w	r3, [r5, #129]	@ 0x81
    pHandle->_Super.pFctGetPhaseCurrents = GetPhaseCurrCbSave;
 8006a52:	9a00      	ldr	r2, [sp, #0]
    pHandle->_Super.pFctSetADCSampPointSectX = SetSampPointSectXCbSave;
 8006a54:	9b01      	ldr	r3, [sp, #4]
    pHandle->_Super.pFctGetPhaseCurrents = GetPhaseCurrCbSave;
 8006a56:	602a      	str	r2, [r5, #0]
    pHandle->_Super.pFctSetADCSampPointSectX = SetSampPointSectXCbSave;
 8006a58:	616b      	str	r3, [r5, #20]
 8006a5a:	e77b      	b.n	8006954 <R3_1_CurrentReadingCalibration+0x14>
 8006a5c:	08006545 	.word	0x08006545
 8006a60:	08006aa1 	.word	0x08006aa1
 8006a64:	08006589 	.word	0x08006589

08006a68 <R3_1_WriteTIMRegisters>:
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8006a68:	f8d0 20a0 	ldr.w	r2, [r0, #160]	@ 0xa0
{
 8006a6c:	4603      	mov	r3, r0
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8006a6e:	6852      	ldr	r2, [r2, #4]
{
 8006a70:	b410      	push	{r4}
  LL_TIM_OC_SetCompareCH1 (TIMx,pHandle->_Super.CntPhA);
 8006a72:	f8b0 4050 	ldrh.w	r4, [r0, #80]	@ 0x50
  LL_TIM_OC_SetCompareCH2 (TIMx,pHandle->_Super.CntPhB);
 8006a76:	f8b0 0052 	ldrh.w	r0, [r0, #82]	@ 0x52
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006a7a:	6354      	str	r4, [r2, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006a7c:	6390      	str	r0, [r2, #56]	@ 0x38
  LL_TIM_OC_SetCompareCH3 (TIMx,pHandle->_Super.CntPhC);
 8006a7e:	f8b3 4054 	ldrh.w	r4, [r3, #84]	@ 0x54
  if ( pHandle->_Super.SWerror == 1u )
 8006a82:	f8b3 0056 	ldrh.w	r0, [r3, #86]	@ 0x56
  WRITE_REG(TIMx->CCR3, CompareValue);
 8006a86:	63d4      	str	r4, [r2, #60]	@ 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 8006a88:	6411      	str	r1, [r2, #64]	@ 0x40
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 8006a8a:	6a12      	ldr	r2, [r2, #32]
}
 8006a8c:	f85d 4b04 	ldr.w	r4, [sp], #4
  if ( pHandle->_Super.SWerror == 1u )
 8006a90:	2801      	cmp	r0, #1
    pHandle->_Super.SWerror = 0u;
 8006a92:	bf0a      	itet	eq
 8006a94:	2200      	moveq	r2, #0
 8006a96:	f3c2 3000 	ubfxne	r0, r2, #12, #1
 8006a9a:	f8a3 2056 	strheq.w	r2, [r3, #86]	@ 0x56
}
 8006a9e:	4770      	bx	lr

08006aa0 <R3_1_SetADCSampPointCalibration>:
{
 8006aa0:	b510      	push	{r4, lr}
  return R3_1_WriteTIMRegisters(&pHandle->_Super, (uint16_t)(pHandle->Half_PWMPeriod) - 1u);
 8006aa2:	f8b0 109c 	ldrh.w	r1, [r0, #156]	@ 0x9c
  pHandle->_Super.Sector = pHandle->CalibSector;
 8006aa6:	f890 209e 	ldrb.w	r2, [r0, #158]	@ 0x9e
 8006aaa:	f880 207c 	strb.w	r2, [r0, #124]	@ 0x7c
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 8006aae:	f44f 1480 	mov.w	r4, #1048576	@ 0x100000
  return R3_1_WriteTIMRegisters(&pHandle->_Super, (uint16_t)(pHandle->Half_PWMPeriod) - 1u);
 8006ab2:	3901      	subs	r1, #1
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 8006ab4:	f8c0 4098 	str.w	r4, [r0, #152]	@ 0x98
  return R3_1_WriteTIMRegisters(&pHandle->_Super, (uint16_t)(pHandle->Half_PWMPeriod) - 1u);
 8006ab8:	b289      	uxth	r1, r1
 8006aba:	f7ff ffd5 	bl	8006a68 <R3_1_WriteTIMRegisters>
}
 8006abe:	bd10      	pop	{r4, pc}

08006ac0 <R3_1_SetADCSampPointSectX>:
{
 8006ac0:	b510      	push	{r4, lr}
  register uint16_t lowDuty = pHdl->lowDuty;
 8006ac2:	f8b0 2058 	ldrh.w	r2, [r0, #88]	@ 0x58
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) > pHandle->pParams_str->hTafter )
 8006ac6:	f8b0 e09c 	ldrh.w	lr, [r0, #156]	@ 0x9c
 8006aca:	f8d0 40a0 	ldr.w	r4, [r0, #160]	@ 0xa0
  register uint16_t midDuty = pHdl->midDuty;
 8006ace:	f8b0 c05a 	ldrh.w	ip, [r0, #90]	@ 0x5a
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) > pHandle->pParams_str->hTafter )
 8006ad2:	8c21      	ldrh	r1, [r4, #32]
 8006ad4:	ebae 0302 	sub.w	r3, lr, r2
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	428b      	cmp	r3, r1
 8006adc:	d908      	bls.n	8006af0 <R3_1_SetADCSampPointSectX+0x30>
    pHandle->_Super.Sector = SECTOR_5;
 8006ade:	2304      	movs	r3, #4
    hCntSmp = ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u;
 8006ae0:	f10e 31ff 	add.w	r1, lr, #4294967295
    pHandle->_Super.Sector = SECTOR_5;
 8006ae4:	f880 307c 	strb.w	r3, [r0, #124]	@ 0x7c
    hCntSmp = ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u;
 8006ae8:	b289      	uxth	r1, r1
  return R3_1_WriteTIMRegisters( &pHandle->_Super, hCntSmp);
 8006aea:	f7ff ffbd 	bl	8006a68 <R3_1_WriteTIMRegisters>
}
 8006aee:	bd10      	pop	{r4, pc}
    hDeltaDuty = ( uint16_t )( lowDuty - midDuty );
 8006af0:	eba2 0c0c 	sub.w	ip, r2, ip
    if ( hDeltaDuty > ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) * 2u )
 8006af4:	fa1f fc8c 	uxth.w	ip, ip
 8006af8:	ebbc 0f43 	cmp.w	ip, r3, lsl #1
 8006afc:	d905      	bls.n	8006b0a <R3_1_SetADCSampPointSectX+0x4a>
      hCntSmp = lowDuty - pHandle->pParams_str->hTbefore;
 8006afe:	8c63      	ldrh	r3, [r4, #34]	@ 0x22
 8006b00:	1ad2      	subs	r2, r2, r3
 8006b02:	b291      	uxth	r1, r2
  return R3_1_WriteTIMRegisters( &pHandle->_Super, hCntSmp);
 8006b04:	f7ff ffb0 	bl	8006a68 <R3_1_WriteTIMRegisters>
}
 8006b08:	bd10      	pop	{r4, pc}
      hCntSmp = lowDuty + pHandle->pParams_str->hTafter;
 8006b0a:	4411      	add	r1, r2
 8006b0c:	b289      	uxth	r1, r1
      if ( hCntSmp >= pHandle->Half_PWMPeriod )
 8006b0e:	458e      	cmp	lr, r1
 8006b10:	d8eb      	bhi.n	8006aea <R3_1_SetADCSampPointSectX+0x2a>
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 8006b12:	43c9      	mvns	r1, r1
        pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_FALLING;
 8006b14:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 8006b18:	eb01 014e 	add.w	r1, r1, lr, lsl #1
        pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_FALLING;
 8006b1c:	f8c0 3098 	str.w	r3, [r0, #152]	@ 0x98
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 8006b20:	b289      	uxth	r1, r1
  return R3_1_WriteTIMRegisters( &pHandle->_Super, hCntSmp);
 8006b22:	f7ff ffa1 	bl	8006a68 <R3_1_WriteTIMRegisters>
}
 8006b26:	bd10      	pop	{r4, pc}

08006b28 <R3_1_TIMx_UP_IRQHandler>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006b28:	f8d0 10a0 	ldr.w	r1, [r0, #160]	@ 0xa0
{
 8006b2c:	b410      	push	{r4}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006b2e:	e9d1 2400 	ldrd	r2, r4, [r1]
{
 8006b32:	4603      	mov	r3, r0
  CLEAR_BIT(ADCx->CR2, ADC_CR2_JEXTEN);
 8006b34:	6890      	ldr	r0, [r2, #8]
 8006b36:	f420 1040 	bic.w	r0, r0, #3145728	@ 0x300000
 8006b3a:	6090      	str	r0, [r2, #8]
  ADCx->JSQR = pHandle->pParams_str->ADCConfig[pHandle->_Super.Sector];
 8006b3c:	f893 007c 	ldrb.w	r0, [r3, #124]	@ 0x7c
 8006b40:	3002      	adds	r0, #2
 8006b42:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8006b46:	6391      	str	r1, [r2, #56]	@ 0x38
  SET_BIT(TIMx->CCER, Channels);
 8006b48:	6a21      	ldr	r1, [r4, #32]
  SET_BIT(ADCx->CR2, ExternalTriggerEdge);
 8006b4a:	f8d3 0098 	ldr.w	r0, [r3, #152]	@ 0x98
 8006b4e:	f441 5180 	orr.w	r1, r1, #4096	@ 0x1000
 8006b52:	6221      	str	r1, [r4, #32]
 8006b54:	6891      	ldr	r1, [r2, #8]
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 8006b56:	f44f 1480 	mov.w	r4, #1048576	@ 0x100000
 8006b5a:	4301      	orrs	r1, r0
 8006b5c:	6091      	str	r1, [r2, #8]
}
 8006b5e:	f103 007a 	add.w	r0, r3, #122	@ 0x7a
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 8006b62:	f8c3 4098 	str.w	r4, [r3, #152]	@ 0x98
}
 8006b66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b6a:	4770      	bx	lr

08006b6c <R3_1_RLDetectionModeEnable>:
  if (pHandle->_Super.RLDetectionMode == false)
 8006b6c:	f890 1080 	ldrb.w	r1, [r0, #128]	@ 0x80
{
 8006b70:	b410      	push	{r4}
  if (pHandle->_Super.RLDetectionMode == false)
 8006b72:	2900      	cmp	r1, #0
 8006b74:	d135      	bne.n	8006be2 <R3_1_RLDetectionModeEnable+0x76>
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8006b76:	f8d0 30a0 	ldr.w	r3, [r0, #160]	@ 0xa0
 8006b7a:	685b      	ldr	r3, [r3, #4]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8006b7c:	699a      	ldr	r2, [r3, #24]
 8006b7e:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 8006b82:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8006b86:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8006b88:	6a1a      	ldr	r2, [r3, #32]
 8006b8a:	f042 0201 	orr.w	r2, r2, #1
 8006b8e:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8006b90:	6a1a      	ldr	r2, [r3, #32]
 8006b92:	f022 0204 	bic.w	r2, r2, #4
 8006b96:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006b98:	6359      	str	r1, [r3, #52]	@ 0x34
    if ((pHandle->_Super.LowSideOutputs)== LS_PWM_TIMER)
 8006b9a:	f890 207d 	ldrb.w	r2, [r0, #125]	@ 0x7d
 8006b9e:	2a01      	cmp	r2, #1
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8006ba0:	f103 0418 	add.w	r4, r3, #24
 8006ba4:	d02b      	beq.n	8006bfe <R3_1_RLDetectionModeEnable+0x92>
    else if ((pHandle->_Super.LowSideOutputs)== ES_GPIO)
 8006ba6:	2a02      	cmp	r2, #2
 8006ba8:	d10d      	bne.n	8006bc6 <R3_1_RLDetectionModeEnable+0x5a>
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8006baa:	699a      	ldr	r2, [r3, #24]
 8006bac:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
 8006bb0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006bb4:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8006bb6:	6a1a      	ldr	r2, [r3, #32]
 8006bb8:	f042 0210 	orr.w	r2, r2, #16
 8006bbc:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8006bbe:	6a1a      	ldr	r2, [r3, #32]
 8006bc0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006bc4:	621a      	str	r2, [r3, #32]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8006bc6:	6862      	ldr	r2, [r4, #4]
 8006bc8:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 8006bcc:	f042 0270 	orr.w	r2, r2, #112	@ 0x70
 8006bd0:	6062      	str	r2, [r4, #4]
  CLEAR_BIT(TIMx->CCER, Channels);
 8006bd2:	6a1a      	ldr	r2, [r3, #32]
 8006bd4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006bd8:	621a      	str	r2, [r3, #32]
 8006bda:	6a1a      	ldr	r2, [r3, #32]
 8006bdc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006be0:	621a      	str	r2, [r3, #32]
  pHandle->_Super.pFctTurnOnLowSides = &R3_1_RLTurnOnLowSides;
 8006be2:	4b0e      	ldr	r3, [pc, #56]	@ (8006c1c <R3_1_RLDetectionModeEnable+0xb0>)
  pHandle->_Super.pFctSwitchOnPwm = &R3_1_RLSwitchOnPWM;
 8006be4:	490e      	ldr	r1, [pc, #56]	@ (8006c20 <R3_1_RLDetectionModeEnable+0xb4>)
  pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 8006be6:	4a0f      	ldr	r2, [pc, #60]	@ (8006c24 <R3_1_RLDetectionModeEnable+0xb8>)
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_RLGetPhaseCurrents;
 8006be8:	4c0f      	ldr	r4, [pc, #60]	@ (8006c28 <R3_1_RLDetectionModeEnable+0xbc>)
  pHandle->_Super.pFctTurnOnLowSides = &R3_1_RLTurnOnLowSides;
 8006bea:	6103      	str	r3, [r0, #16]
  pHandle->_Super.RLDetectionMode = true;
 8006bec:	2301      	movs	r3, #1
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_RLGetPhaseCurrents;
 8006bee:	6004      	str	r4, [r0, #0]
  pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 8006bf0:	e9c0 2101 	strd	r2, r1, [r0, #4]
}
 8006bf4:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->_Super.RLDetectionMode = true;
 8006bf8:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
}
 8006bfc:	4770      	bx	lr
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8006bfe:	699a      	ldr	r2, [r3, #24]
 8006c00:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
 8006c04:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006c08:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(TIMx->CCER, Channels);
 8006c0a:	6a1a      	ldr	r2, [r3, #32]
 8006c0c:	f022 0210 	bic.w	r2, r2, #16
 8006c10:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CCER, Channels);
 8006c12:	6a1a      	ldr	r2, [r3, #32]
 8006c14:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006c18:	621a      	str	r2, [r3, #32]
}
 8006c1a:	e7d4      	b.n	8006bc6 <R3_1_RLDetectionModeEnable+0x5a>
 8006c1c:	08006811 	.word	0x08006811
 8006c20:	08006719 	.word	0x08006719
 8006c24:	08006659 	.word	0x08006659
 8006c28:	080066d1 	.word	0x080066d1

08006c2c <R3_1_RLDetectionModeDisable>:
  if (pHandle->_Super.RLDetectionMode == true)
 8006c2c:	f890 3080 	ldrb.w	r3, [r0, #128]	@ 0x80
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d04a      	beq.n	8006cca <R3_1_RLDetectionModeDisable+0x9e>
{
 8006c34:	b410      	push	{r4}
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8006c36:	f8d0 10a0 	ldr.w	r1, [r0, #160]	@ 0xa0
 8006c3a:	684b      	ldr	r3, [r1, #4]
    while ((TIMx->CR1 & DIR_MASK) == 0u)
 8006c3c:	681a      	ldr	r2, [r3, #0]
 8006c3e:	06d4      	lsls	r4, r2, #27
 8006c40:	d5fc      	bpl.n	8006c3c <R3_1_RLDetectionModeDisable+0x10>
    while ((TIMx->CR1 & DIR_MASK) == DIR_MASK)
 8006c42:	681a      	ldr	r2, [r3, #0]
 8006c44:	06d2      	lsls	r2, r2, #27
 8006c46:	d4fc      	bmi.n	8006c42 <R3_1_RLDetectionModeDisable+0x16>
    TIMx->RCR = pHandle->pParams_str->RepetitionCounter;
 8006c48:	f891 202a 	ldrb.w	r2, [r1, #42]	@ 0x2a
 8006c4c:	631a      	str	r2, [r3, #48]	@ 0x30
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8006c4e:	699a      	ldr	r2, [r3, #24]
    LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod) >> 1);
 8006c50:	f8b0 c09c 	ldrh.w	ip, [r0, #156]	@ 0x9c
 8006c54:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 8006c58:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8006c5c:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8006c5e:	6a1c      	ldr	r4, [r3, #32]
 8006c60:	f044 0401 	orr.w	r4, r4, #1
 8006c64:	621c      	str	r4, [r3, #32]
    if ((pHandle->_Super.LowSideOutputs)== LS_PWM_TIMER)
 8006c66:	f890 407d 	ldrb.w	r4, [r0, #125]	@ 0x7d
 8006c6a:	2c01      	cmp	r4, #1
    LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod) >> 1);
 8006c6c:	ea4f 025c 	mov.w	r2, ip, lsr #1
    if ((pHandle->_Super.LowSideOutputs)== LS_PWM_TIMER)
 8006c70:	d02c      	beq.n	8006ccc <R3_1_RLDetectionModeDisable+0xa0>
    else if ((pHandle->_Super.LowSideOutputs)== ES_GPIO)
 8006c72:	2c02      	cmp	r4, #2
 8006c74:	d04d      	beq.n	8006d12 <R3_1_RLDetectionModeDisable+0xe6>
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006c76:	635a      	str	r2, [r3, #52]	@ 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8006c78:	699c      	ldr	r4, [r3, #24]
 8006c7a:	f424 44e6 	bic.w	r4, r4, #29440	@ 0x7300
 8006c7e:	f444 44c0 	orr.w	r4, r4, #24576	@ 0x6000
 8006c82:	619c      	str	r4, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8006c84:	6a1c      	ldr	r4, [r3, #32]
 8006c86:	f044 0410 	orr.w	r4, r4, #16
 8006c8a:	621c      	str	r4, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006c8c:	639a      	str	r2, [r3, #56]	@ 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8006c8e:	69dc      	ldr	r4, [r3, #28]
 8006c90:	f024 0473 	bic.w	r4, r4, #115	@ 0x73
 8006c94:	f044 0460 	orr.w	r4, r4, #96	@ 0x60
 8006c98:	61dc      	str	r4, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8006c9a:	6a1c      	ldr	r4, [r3, #32]
 8006c9c:	f444 7480 	orr.w	r4, r4, #256	@ 0x100
 8006ca0:	621c      	str	r4, [r3, #32]
    LL_ADC_INJ_SetSequencerDiscont(pHandle->pParams_str->ADCx,
 8006ca2:	6809      	ldr	r1, [r1, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8006ca4:	63da      	str	r2, [r3, #60]	@ 0x3c
  MODIFY_REG(ADCx->CR1, ADC_CR1_JDISCEN, SeqDiscont);
 8006ca6:	684b      	ldr	r3, [r1, #4]
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_GetPhaseCurrents;
 8006ca8:	4a2b      	ldr	r2, [pc, #172]	@ (8006d58 <R3_1_RLDetectionModeDisable+0x12c>)
    pHandle->_Super.pFctTurnOnLowSides = &R3_1_TurnOnLowSides;
 8006caa:	4c2c      	ldr	r4, [pc, #176]	@ (8006d5c <R3_1_RLDetectionModeDisable+0x130>)
 8006cac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006cb0:	604b      	str	r3, [r1, #4]
    pHandle->_Super.pFctSwitchOnPwm = &R3_1_SwitchOnPWM;
 8006cb2:	492b      	ldr	r1, [pc, #172]	@ (8006d60 <R3_1_RLDetectionModeDisable+0x134>)
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_GetPhaseCurrents;
 8006cb4:	6002      	str	r2, [r0, #0]
    pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 8006cb6:	4a2b      	ldr	r2, [pc, #172]	@ (8006d64 <R3_1_RLDetectionModeDisable+0x138>)
    pHandle->_Super.pFctTurnOnLowSides = &R3_1_TurnOnLowSides;
 8006cb8:	6104      	str	r4, [r0, #16]
    pHandle->_Super.RLDetectionMode = false;
 8006cba:	2300      	movs	r3, #0
    pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 8006cbc:	e9c0 2101 	strd	r2, r1, [r0, #4]
}
 8006cc0:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->_Super.RLDetectionMode = false;
 8006cc4:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
}
 8006cc8:	4770      	bx	lr
 8006cca:	4770      	bx	lr
  SET_BIT(TIMx->CCER, Channels);
 8006ccc:	6a1c      	ldr	r4, [r3, #32]
 8006cce:	f044 0404 	orr.w	r4, r4, #4
 8006cd2:	621c      	str	r4, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006cd4:	635a      	str	r2, [r3, #52]	@ 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8006cd6:	699c      	ldr	r4, [r3, #24]
 8006cd8:	f424 44e6 	bic.w	r4, r4, #29440	@ 0x7300
 8006cdc:	f444 44c0 	orr.w	r4, r4, #24576	@ 0x6000
 8006ce0:	619c      	str	r4, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8006ce2:	6a1c      	ldr	r4, [r3, #32]
 8006ce4:	f044 0410 	orr.w	r4, r4, #16
 8006ce8:	621c      	str	r4, [r3, #32]
 8006cea:	6a1c      	ldr	r4, [r3, #32]
 8006cec:	f044 0440 	orr.w	r4, r4, #64	@ 0x40
 8006cf0:	621c      	str	r4, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006cf2:	639a      	str	r2, [r3, #56]	@ 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8006cf4:	69dc      	ldr	r4, [r3, #28]
 8006cf6:	f024 0473 	bic.w	r4, r4, #115	@ 0x73
 8006cfa:	f044 0460 	orr.w	r4, r4, #96	@ 0x60
 8006cfe:	61dc      	str	r4, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8006d00:	6a1c      	ldr	r4, [r3, #32]
 8006d02:	f444 7480 	orr.w	r4, r4, #256	@ 0x100
 8006d06:	621c      	str	r4, [r3, #32]
 8006d08:	6a1c      	ldr	r4, [r3, #32]
 8006d0a:	f444 6480 	orr.w	r4, r4, #1024	@ 0x400
 8006d0e:	621c      	str	r4, [r3, #32]
}
 8006d10:	e7c7      	b.n	8006ca2 <R3_1_RLDetectionModeDisable+0x76>
  CLEAR_BIT(TIMx->CCER, Channels);
 8006d12:	6a1c      	ldr	r4, [r3, #32]
 8006d14:	f024 0404 	bic.w	r4, r4, #4
 8006d18:	621c      	str	r4, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006d1a:	635a      	str	r2, [r3, #52]	@ 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8006d1c:	699c      	ldr	r4, [r3, #24]
 8006d1e:	f424 44e6 	bic.w	r4, r4, #29440	@ 0x7300
 8006d22:	f444 44c0 	orr.w	r4, r4, #24576	@ 0x6000
 8006d26:	619c      	str	r4, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8006d28:	6a1c      	ldr	r4, [r3, #32]
 8006d2a:	f044 0410 	orr.w	r4, r4, #16
 8006d2e:	621c      	str	r4, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8006d30:	6a1c      	ldr	r4, [r3, #32]
 8006d32:	f024 0440 	bic.w	r4, r4, #64	@ 0x40
 8006d36:	621c      	str	r4, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006d38:	639a      	str	r2, [r3, #56]	@ 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8006d3a:	69dc      	ldr	r4, [r3, #28]
 8006d3c:	f024 0473 	bic.w	r4, r4, #115	@ 0x73
 8006d40:	f044 0460 	orr.w	r4, r4, #96	@ 0x60
 8006d44:	61dc      	str	r4, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8006d46:	6a1c      	ldr	r4, [r3, #32]
 8006d48:	f444 7480 	orr.w	r4, r4, #256	@ 0x100
 8006d4c:	621c      	str	r4, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8006d4e:	6a1c      	ldr	r4, [r3, #32]
 8006d50:	f424 6480 	bic.w	r4, r4, #1024	@ 0x400
 8006d54:	621c      	str	r4, [r3, #32]
}
 8006d56:	e7a4      	b.n	8006ca2 <R3_1_RLDetectionModeDisable+0x76>
 8006d58:	080063d1 	.word	0x080063d1
 8006d5c:	080067b5 	.word	0x080067b5
 8006d60:	080065c5 	.word	0x080065c5
 8006d64:	08006659 	.word	0x08006659

08006d68 <R3_1_RLDetectionModeSetDuty>:
{
 8006d68:	4603      	mov	r3, r0
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006d6a:	f8d0 00a0 	ldr.w	r0, [r0, #160]	@ 0xa0
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8006d6e:	f8b3 209c 	ldrh.w	r2, [r3, #156]	@ 0x9c
{
 8006d72:	b410      	push	{r4}
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8006d74:	fb02 f101 	mul.w	r1, r2, r1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006d78:	6844      	ldr	r4, [r0, #4]
  if (pHandle->_Super.SWerror == 1u)
 8006d7a:	f8b3 0056 	ldrh.w	r0, [r3, #86]	@ 0x56
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8006d7e:	0c09      	lsrs	r1, r1, #16
  pHandle->_Super.Sector = SECTOR_4;
 8006d80:	2203      	movs	r2, #3
 8006d82:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
  pHandle->_Super.CntPhA = ( uint16_t )( val );
 8006d86:	f8a3 1050 	strh.w	r1, [r3, #80]	@ 0x50
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006d8a:	6361      	str	r1, [r4, #52]	@ 0x34
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 8006d8c:	6a22      	ldr	r2, [r4, #32]
}
 8006d8e:	f85d 4b04 	ldr.w	r4, [sp], #4
  if (pHandle->_Super.SWerror == 1u)
 8006d92:	2801      	cmp	r0, #1
    pHandle->_Super.SWerror = 0u;
 8006d94:	bf0a      	itet	eq
 8006d96:	2200      	moveq	r2, #0
 8006d98:	f3c2 3000 	ubfxne	r0, r2, #12, #1
 8006d9c:	f8a3 2056 	strheq.w	r2, [r3, #86]	@ 0x56
}
 8006da0:	4770      	bx	lr
 8006da2:	bf00      	nop

08006da4 <R3_1_RLTurnOnLowSidesAndStart>:
 * @param  pHdl: Handler of the current instance of the PWM component.
 */
void R3_1_RLTurnOnLowSidesAndStart( PWMC_Handle_t * pHdl )
{
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006da4:	f8d0 20a0 	ldr.w	r2, [r0, #160]	@ 0xa0
{
 8006da8:	b430      	push	{r4, r5}
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 8006daa:	e9d2 4300 	ldrd	r4, r3, [r2]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006dae:	f06f 0101 	mvn.w	r1, #1
 8006db2:	6119      	str	r1, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8006db4:	691a      	ldr	r2, [r3, #16]
 8006db6:	07d1      	lsls	r1, r2, #31
 8006db8:	d5fc      	bpl.n	8006db4 <R3_1_RLTurnOnLowSidesAndStart+0x10>

  LL_TIM_OC_SetCompareCH1 ( TIMx, 0x0u );
  LL_TIM_OC_SetCompareCH2 ( TIMx, 0x0u );
  LL_TIM_OC_SetCompareCH3 ( TIMx, 0x0u );

  LL_TIM_OC_SetCompareCH4( TIMx, ( pHandle->Half_PWMPeriod - 5u));
 8006dba:	f8b0 209c 	ldrh.w	r2, [r0, #156]	@ 0x9c
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006dbe:	2100      	movs	r1, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006dc0:	f06f 0501 	mvn.w	r5, #1
 8006dc4:	3a05      	subs	r2, #5
 8006dc6:	611d      	str	r5, [r3, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006dc8:	6359      	str	r1, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006dca:	6399      	str	r1, [r3, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8006dcc:	63d9      	str	r1, [r3, #60]	@ 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 8006dce:	641a      	str	r2, [r3, #64]	@ 0x40
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8006dd0:	691a      	ldr	r2, [r3, #16]
 8006dd2:	07d2      	lsls	r2, r2, #31
 8006dd4:	d5fc      	bpl.n	8006dd0 <R3_1_RLTurnOnLowSidesAndStart+0x2c>

  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
  {}

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE ;
 8006dd6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006dd8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006ddc:	645a      	str	r2, [r3, #68]	@ 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8006dde:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006de0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006de4:	645a      	str	r2, [r3, #68]	@ 0x44
  LL_TIM_EnableAllOutputs ( TIMx );

  if ( ( pHandle->_Super.LowSideOutputs ) == ES_GPIO )
 8006de6:	f890 307d 	ldrb.w	r3, [r0, #125]	@ 0x7d
 8006dea:	2b02      	cmp	r3, #2
 8006dec:	d10b      	bne.n	8006e06 <R3_1_RLTurnOnLowSidesAndStart+0x62>
  {
      /* It is executed during calibration phase the EN signal shall stay off */
      LL_GPIO_SetOutputPin( pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin );
      LL_GPIO_SetOutputPin( pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin );
 8006dee:	e9d0 210f 	ldrd	r2, r1, [r0, #60]	@ 0x3c
      LL_GPIO_SetOutputPin( pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin );
 8006df2:	f8b0 5048 	ldrh.w	r5, [r0, #72]	@ 0x48
      LL_GPIO_SetOutputPin( pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin );
 8006df6:	6c43      	ldr	r3, [r0, #68]	@ 0x44
  WRITE_REG(GPIOx->BSRR, PinMask);
 8006df8:	6195      	str	r5, [r2, #24]
      LL_GPIO_SetOutputPin( pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin );
 8006dfa:	f8b0 504a 	ldrh.w	r5, [r0, #74]	@ 0x4a
      LL_GPIO_SetOutputPin( pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin );
 8006dfe:	f8b0 204c 	ldrh.w	r2, [r0, #76]	@ 0x4c
 8006e02:	618d      	str	r5, [r1, #24]
 8006e04:	619a      	str	r2, [r3, #24]
  SET_BIT(ADCx->CR2, ExternalTriggerEdge);
 8006e06:	68a3      	ldr	r3, [r4, #8]
 8006e08:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006e0c:	60a3      	str	r3, [r4, #8]

//  ADCx->JSQR = pHandle->wADC_JSQR_phAB;
  LL_ADC_INJ_StartConversionExtTrig(ADCx,LL_ADC_INJ_TRIG_EXT_RISING);

  return;
}
 8006e0e:	bc30      	pop	{r4, r5}
 8006e10:	4770      	bx	lr
 8006e12:	bf00      	nop

08006e14 <RVBS_Clear>:
  {
#endif
    uint16_t aux;
    uint16_t index;

    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 8006e14:	f8b0 c00c 	ldrh.w	ip, [r0, #12]
 8006e18:	8a42      	ldrh	r2, [r0, #18]
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8006e1a:	8943      	ldrh	r3, [r0, #10]
    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 8006e1c:	4494      	add	ip, r2
 8006e1e:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
{
 8006e22:	b430      	push	{r4, r5}
 8006e24:	2500      	movs	r5, #0
 8006e26:	f36c 050f 	bfi	r5, ip, #0, #16
 8006e2a:	f36c 451f 	bfi	r5, ip, #16, #16
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8006e2e:	b14b      	cbz	r3, 8006e44 <RVBS_Clear+0x30>
    {
      pHandle->aBuffer[index] = aux;
 8006e30:	6944      	ldr	r4, [r0, #20]
 8006e32:	2300      	movs	r3, #0
 8006e34:	b29a      	uxth	r2, r3
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8006e36:	3301      	adds	r3, #1
      pHandle->aBuffer[index] = aux;
 8006e38:	f824 c012 	strh.w	ip, [r4, r2, lsl #1]
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8006e3c:	8941      	ldrh	r1, [r0, #10]
 8006e3e:	b29a      	uxth	r2, r3
 8006e40:	4291      	cmp	r1, r2
 8006e42:	d8f7      	bhi.n	8006e34 <RVBS_Clear+0x20>
    }
    pHandle->_Super.LatestConv = aux;
    pHandle->_Super.AvBusVoltage_d = aux;
    pHandle->index = 0U;
 8006e44:	2300      	movs	r3, #0
    pHandle->_Super.LatestConv = aux;
 8006e46:	6045      	str	r5, [r0, #4]
    pHandle->index = 0U;
 8006e48:	7643      	strb	r3, [r0, #25]
#ifdef NULL_PTR_CHECK_RDIV_BUS_VLT_SNS
  }
#endif
}
 8006e4a:	bc30      	pop	{r4, r5}
 8006e4c:	4770      	bx	lr
 8006e4e:	bf00      	nop

08006e50 <RVBS_Init>:
{
 8006e50:	b508      	push	{r3, lr}
    RVBS_Clear(pHandle);
 8006e52:	f7ff ffdf 	bl	8006e14 <RVBS_Clear>
}
 8006e56:	bd08      	pop	{r3, pc}

08006e58 <RVBS_CheckFaultState>:
  }
  else
  {
#endif
	/* If both thresholds are equal, single threshold feature is used */
	if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 8006e58:	8982      	ldrh	r2, [r0, #12]
 8006e5a:	89c1      	ldrh	r1, [r0, #14]
	{
      if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 8006e5c:	88c3      	ldrh	r3, [r0, #6]
	if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 8006e5e:	428a      	cmp	r2, r1
 8006e60:	d010      	beq.n	8006e84 <RVBS_CheckFaultState+0x2c>
      }
	}
    else
    {
      /* If both thresholds are different, hysteresis feature is used (Brake mode) */
      if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 8006e62:	f8b0 c012 	ldrh.w	ip, [r0, #18]
 8006e66:	459c      	cmp	ip, r3
 8006e68:	d80a      	bhi.n	8006e80 <RVBS_CheckFaultState+0x28>
{
 8006e6a:	b410      	push	{r4}
      {
        fault = MC_UNDER_VOLT;
      }
      else if ( false == pHandle->OverVoltageHysteresisUpDir )
 8006e6c:	7c04      	ldrb	r4, [r0, #16]
 8006e6e:	b994      	cbnz	r4, 8006e96 <RVBS_CheckFaultState+0x3e>
      {
        if (pHandle->_Super.AvBusVoltage_d < pHandle->OverVoltageThresholdLow)
 8006e70:	4299      	cmp	r1, r3
 8006e72:	d914      	bls.n	8006e9e <RVBS_CheckFaultState+0x46>
        {
          pHandle->OverVoltageHysteresisUpDir = true;
 8006e74:	2301      	movs	r3, #1
 8006e76:	7403      	strb	r3, [r0, #16]
        {
          pHandle->OverVoltageHysteresisUpDir = false;
          fault = MC_OVER_VOLT;
        }
        else{
          fault = MC_NO_ERROR;
 8006e78:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_RDIV_BUS_VLT_SNS
  }
#endif
  return (fault);
}
 8006e7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e7e:	4770      	bx	lr
        fault = MC_UNDER_VOLT;
 8006e80:	2004      	movs	r0, #4
 8006e82:	4770      	bx	lr
      if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d30c      	bcc.n	8006ea2 <RVBS_CheckFaultState+0x4a>
      else if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 8006e88:	8a40      	ldrh	r0, [r0, #18]
 8006e8a:	4298      	cmp	r0, r3
 8006e8c:	bf94      	ite	ls
 8006e8e:	2000      	movls	r0, #0
 8006e90:	2001      	movhi	r0, #1
 8006e92:	0080      	lsls	r0, r0, #2
 8006e94:	4770      	bx	lr
        if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 8006e96:	429a      	cmp	r2, r3
 8006e98:	d2ee      	bcs.n	8006e78 <RVBS_CheckFaultState+0x20>
          pHandle->OverVoltageHysteresisUpDir = false;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	7403      	strb	r3, [r0, #16]
          fault = MC_OVER_VOLT;
 8006e9e:	2002      	movs	r0, #2
 8006ea0:	e7eb      	b.n	8006e7a <RVBS_CheckFaultState+0x22>
 8006ea2:	2002      	movs	r0, #2
}
 8006ea4:	4770      	bx	lr
 8006ea6:	bf00      	nop

08006ea8 <RVBS_CalcAvVbus>:
{
 8006ea8:	b538      	push	{r3, r4, r5, lr}
    if (0xFFFFU == hAux)
 8006eaa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006eae:	4299      	cmp	r1, r3
{
 8006eb0:	4604      	mov	r4, r0
    if (0xFFFFU == hAux)
 8006eb2:	d021      	beq.n	8006ef8 <RVBS_CalcAvVbus+0x50>
      pHandle->aBuffer[pHandle->index] = hAux;
 8006eb4:	6943      	ldr	r3, [r0, #20]
 8006eb6:	7e45      	ldrb	r5, [r0, #25]
 8006eb8:	f823 1015 	strh.w	r1, [r3, r5, lsl #1]
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 8006ebc:	f8b0 e00a 	ldrh.w	lr, [r0, #10]
 8006ec0:	f01e 02ff 	ands.w	r2, lr, #255	@ 0xff
 8006ec4:	d00d      	beq.n	8006ee2 <RVBS_CalcAvVbus+0x3a>
 8006ec6:	3a01      	subs	r2, #1
 8006ec8:	b2d2      	uxtb	r2, r2
 8006eca:	eb03 0042 	add.w	r0, r3, r2, lsl #1
 8006ece:	3b02      	subs	r3, #2
      wtemp = 0u;
 8006ed0:	2200      	movs	r2, #0
        wtemp += pHandle->aBuffer[i];
 8006ed2:	f833 cf02 	ldrh.w	ip, [r3, #2]!
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 8006ed6:	4298      	cmp	r0, r3
        wtemp += pHandle->aBuffer[i];
 8006ed8:	4462      	add	r2, ip
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 8006eda:	d1fa      	bne.n	8006ed2 <RVBS_CalcAvVbus+0x2a>
      wtemp /= pHandle->LowPassFilterBW;
 8006edc:	fbb2 f2fe 	udiv	r2, r2, lr
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 8006ee0:	b292      	uxth	r2, r2
      if ((uint16_t)pHandle->index < (pHandle->LowPassFilterBW - 1U))
 8006ee2:	f10e 3eff 	add.w	lr, lr, #4294967295
 8006ee6:	4575      	cmp	r5, lr
        pHandle->index++;
 8006ee8:	bf34      	ite	cc
 8006eea:	3501      	addcc	r5, #1
        pHandle->index = 0U;
 8006eec:	2300      	movcs	r3, #0
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 8006eee:	80e2      	strh	r2, [r4, #6]
      pHandle->_Super.LatestConv = hAux;
 8006ef0:	80a1      	strh	r1, [r4, #4]
        pHandle->index++;
 8006ef2:	bf34      	ite	cc
 8006ef4:	7665      	strbcc	r5, [r4, #25]
        pHandle->index = 0U;
 8006ef6:	7663      	strbcs	r3, [r4, #25]
    pHandle->_Super.FaultState = RVBS_CheckFaultState(pHandle);
 8006ef8:	4620      	mov	r0, r4
 8006efa:	f7ff ffad 	bl	8006e58 <RVBS_CheckFaultState>
 8006efe:	8120      	strh	r0, [r4, #8]
}
 8006f00:	bd38      	pop	{r3, r4, r5, pc}
 8006f02:	bf00      	nop

08006f04 <REMNG_Init>:
  }
  else
  {
#endif
    pHandle->Ext = 0;
    pHandle->TargetFinal = 0;
 8006f04:	2300      	movs	r3, #0
    pHandle->RampRemainingStep = 0U;
    pHandle->IncDecAmount = 0;
    pHandle->ScalingFactor = 1U;
 8006f06:	2201      	movs	r2, #1
    pHandle->TargetFinal = 0;
 8006f08:	e9c0 3301 	strd	r3, r3, [r0, #4]
    pHandle->IncDecAmount = 0;
 8006f0c:	e9c0 3303 	strd	r3, r3, [r0, #12]
    pHandle->ScalingFactor = 1U;
 8006f10:	6142      	str	r2, [r0, #20]
#ifdef NULL_PTR_CHECK_RMP_EXT_MNG
  }
#endif
}
 8006f12:	4770      	bx	lr

08006f14 <SPD_GetElAngle>:
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hElAngle);
#else
  return (pHandle->hElAngle);
#endif
}
 8006f14:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8006f18:	4770      	bx	lr
 8006f1a:	bf00      	nop

08006f1c <SPD_GetAvrgMecSpeedUnit>:
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hAvrMecSpeedUnit);
#else
  return (pHandle->hAvrMecSpeedUnit);
#endif
}
 8006f1c:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 8006f20:	4770      	bx	lr
 8006f22:	bf00      	nop

08006f24 <SPD_GetInstElSpeedDpp>:
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->InstantaneousElSpeedDpp);
#else
  return (pHandle->InstantaneousElSpeedDpp);
#endif
}
 8006f24:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 8006f28:	4770      	bx	lr
 8006f2a:	bf00      	nop

08006f2c <SPD_IsMecSpeedReliable>:
    bool SpeedError = false;

    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

    /* Compute absoulte value of mechanical speed */
    if (*pMecSpeedUnit < 0)
 8006f2c:	f9b1 c000 	ldrsh.w	ip, [r1]
{
 8006f30:	4603      	mov	r3, r0
 8006f32:	b510      	push	{r4, lr}
    {
      hAux = -(*pMecSpeedUnit);
 8006f34:	fa1f f18c 	uxth.w	r1, ip
    if (*pMecSpeedUnit < 0)
 8006f38:	f1bc 0f00 	cmp.w	ip, #0
      hAux = -(*pMecSpeedUnit);
 8006f3c:	bfb8      	it	lt
 8006f3e:	4249      	neglt	r1, r1
    else
    {
      /* Nothing to do */
    }

    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 8006f40:	f8b3 e016 	ldrh.w	lr, [r3, #22]
    uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 8006f44:	78c0      	ldrb	r0, [r0, #3]
    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 8006f46:	781a      	ldrb	r2, [r3, #0]
    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
 8006f48:	8a9c      	ldrh	r4, [r3, #20]
    {
      /* Nothing to do */
    }

    /* Compute absoulte value of mechanical acceleration */
    if (pHandle->hMecAccelUnitP < 0)
 8006f4a:	f9b3 c012 	ldrsh.w	ip, [r3, #18]
      hAux = -(*pMecSpeedUnit);
 8006f4e:	bfb8      	it	lt
 8006f50:	b289      	uxthlt	r1, r1
    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 8006f52:	458e      	cmp	lr, r1
 8006f54:	d816      	bhi.n	8006f84 <SPD_IsMecSpeedReliable+0x58>
    {
      hAux = -(pHandle->hMecAccelUnitP);
 8006f56:	fa1f fe8c 	uxth.w	lr, ip
    if (pHandle->hMecAccelUnitP < 0)
 8006f5a:	f1bc 0f00 	cmp.w	ip, #0
      hAux = -(pHandle->hMecAccelUnitP);
 8006f5e:	bfb8      	it	lt
 8006f60:	f1ce 0e00 	rsblt	lr, lr, #0
    else
    {
      hAbsMecAccelUnitP = (uint16_t)pHandle->hMecAccelUnitP;
    }

    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 8006f64:	f8b3 c018 	ldrh.w	ip, [r3, #24]
      hAux = -(pHandle->hMecAccelUnitP);
 8006f68:	bfb8      	it	lt
 8006f6a:	fa1f fe8e 	uxthlt.w	lr, lr
    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 8006f6e:	45f4      	cmp	ip, lr
 8006f70:	d308      	bcc.n	8006f84 <SPD_IsMecSpeedReliable+0x58>
    else
    {
      /* Nothing to do */
    }

    if (true == SpeedError)
 8006f72:	428c      	cmp	r4, r1
 8006f74:	d306      	bcc.n	8006f84 <SPD_IsMecSpeedReliable+0x58>
        /* Nothing to do */
      }
    }
    else
    {
      if (bSpeedErrorNumber < bMaximumSpeedErrorsNumber)
 8006f76:	4290      	cmp	r0, r2
 8006f78:	d809      	bhi.n	8006f8e <SPD_IsMecSpeedReliable+0x62>
      {
        /* Nothing to do */
      }
    }

    if (bSpeedErrorNumber == bMaximumSpeedErrorsNumber)
 8006f7a:	1a10      	subs	r0, r2, r0
    else
    {
      /* Nothing to do */
    }

    pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 8006f7c:	701a      	strb	r2, [r3, #0]
    if (bSpeedErrorNumber == bMaximumSpeedErrorsNumber)
 8006f7e:	bf18      	it	ne
 8006f80:	2001      	movne	r0, #1
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  }
#endif
  return (SpeedSensorReliability);
}
 8006f82:	bd10      	pop	{r4, pc}
      if (bSpeedErrorNumber < bMaximumSpeedErrorsNumber)
 8006f84:	4290      	cmp	r0, r2
 8006f86:	d9f8      	bls.n	8006f7a <SPD_IsMecSpeedReliable+0x4e>
        bSpeedErrorNumber++;
 8006f88:	3201      	adds	r2, #1
 8006f8a:	b2d2      	uxtb	r2, r2
 8006f8c:	e7f5      	b.n	8006f7a <SPD_IsMecSpeedReliable+0x4e>
        bSpeedErrorNumber = 0u;
 8006f8e:	2200      	movs	r2, #0
    pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 8006f90:	701a      	strb	r2, [r3, #0]
  bool SpeedSensorReliability = true;
 8006f92:	2001      	movs	r0, #1
}
 8006f94:	bd10      	pop	{r4, pc}
 8006f96:	bf00      	nop

08006f98 <SPD_GetS16Speed>:
  }
  else
  {
#endif
    int32_t wAux = (int32_t)pHandle->hAvrMecSpeedUnit;
    wAux *= INT16_MAX;
 8006f98:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
    wAux /= (int16_t)pHandle->hMaxReliableMecSpeedUnit;
 8006f9c:	f9b0 2014 	ldrsh.w	r2, [r0, #20]
    wAux *= INT16_MAX;
 8006fa0:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
    wAux /= (int16_t)pHandle->hMaxReliableMecSpeedUnit;
 8006fa4:	fb93 f0f2 	sdiv	r0, r3, r2
    tempValue = (int16_t)wAux;
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  }
#endif
  return (tempValue);
}
 8006fa8:	b200      	sxth	r0, r0
 8006faa:	4770      	bx	lr

08006fac <STC_Init>:
  {
#endif
    pHandle->PISpeed = pPI;
    pHandle->SPD = SPD_Handle;
    pHandle->Mode = pHandle->ModeDefault;
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 8006fac:	f9b0 c02c 	ldrsh.w	ip, [r0, #44]	@ 0x2c
    pHandle->PISpeed = pPI;
 8006fb0:	6101      	str	r1, [r0, #16]
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 8006fb2:	f9b0 102e 	ldrsh.w	r1, [r0, #46]	@ 0x2e
    pHandle->SPD = SPD_Handle;
 8006fb6:	6142      	str	r2, [r0, #20]
{
 8006fb8:	b410      	push	{r4}
    pHandle->Mode = pHandle->ModeDefault;
 8006fba:	f890 402a 	ldrb.w	r4, [r0, #42]	@ 0x2a
 8006fbe:	7004      	strb	r4, [r0, #0]
    pHandle->TargetFinal = 0;
 8006fc0:	2300      	movs	r3, #0
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 8006fc2:	ea4f 440c 	mov.w	r4, ip, lsl #16
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 8006fc6:	0409      	lsls	r1, r1, #16
 8006fc8:	e9c0 4101 	strd	r4, r1, [r0, #4]
    pHandle->TargetFinal = 0;
 8006fcc:	8043      	strh	r3, [r0, #2]
    pHandle->RampRemainingStep = 0U;
    pHandle->IncDecAmount = 0;
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 8006fce:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->RampRemainingStep = 0U;
 8006fd2:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 8006fd4:	6183      	str	r3, [r0, #24]
}
 8006fd6:	4770      	bx	lr

08006fd8 <STC_SetSpeedSensor>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SPD = SPD_Handle;
 8006fd8:	6141      	str	r1, [r0, #20]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 8006fda:	4770      	bx	lr

08006fdc <STC_GetSpeedSensor>:
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  return ((MC_NULL ==  pHandle) ? MC_NULL : pHandle->SPD);
#else
  return (pHandle->SPD);
#endif
}
 8006fdc:	6940      	ldr	r0, [r0, #20]
 8006fde:	4770      	bx	lr

08006fe0 <STC_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (MCM_SPEED_MODE == pHandle->Mode)
 8006fe0:	7803      	ldrb	r3, [r0, #0]
 8006fe2:	2b03      	cmp	r3, #3
 8006fe4:	d000      	beq.n	8006fe8 <STC_Clear+0x8>
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 8006fe6:	4770      	bx	lr
      PID_SetIntegralTerm(pHandle->PISpeed, 0);
 8006fe8:	6900      	ldr	r0, [r0, #16]
 8006fea:	2100      	movs	r1, #0
 8006fec:	f7ff b8f4 	b.w	80061d8 <PID_SetIntegralTerm>

08006ff0 <STC_GetMecSpeedRefUnit>:
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->SpeedRefUnitExt / 65536));
#else
  return ((int16_t)(pHandle->SpeedRefUnitExt / 65536));
#endif
#endif
}
 8006ff0:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8006ff4:	4770      	bx	lr
 8006ff6:	bf00      	nop

08006ff8 <STC_GetTorqueRef>:
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->TorqueRef / 65536));
#else
  return ((int16_t)(pHandle->TorqueRef / 65536));
#endif
#endif
}
 8006ff8:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
 8006ffc:	4770      	bx	lr
 8006ffe:	bf00      	nop

08007000 <STC_SetControlMode>:
  }
  else
  {
#endif
    pHandle->Mode = bMode;
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp */
 8007000:	2300      	movs	r3, #0
    pHandle->Mode = bMode;
 8007002:	7001      	strb	r1, [r0, #0]
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp */
 8007004:	60c3      	str	r3, [r0, #12]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 8007006:	4770      	bx	lr

08007008 <STC_ExecRamp>:
  * @ref EncAlignCtrl "Encoder Alignment Control",
  * @ref PositionControl "Position Control" loop or
  * speed regulation with @ref SpeedRegulatorPotentiometer Speed potentiometer.
  */
__weak bool STC_ExecRamp(SpeednTorqCtrl_Handle_t *pHandle, int16_t hTargetFinal, uint32_t hDurationms)
{
 8007008:	b570      	push	{r4, r5, r6, lr}
    uint32_t wAux;
    int32_t wAux1;
    int16_t hCurrentReference;

    /* Check if the hTargetFinal is out of the bound of application */
    if (MCM_TORQUE_MODE == pHandle->Mode)
 800700a:	7803      	ldrb	r3, [r0, #0]
 800700c:	2b04      	cmp	r3, #4
{
 800700e:	4604      	mov	r4, r0
 8007010:	460d      	mov	r5, r1
 8007012:	4616      	mov	r6, r2
    if (MCM_TORQUE_MODE == pHandle->Mode)
 8007014:	d01d      	beq.n	8007052 <STC_ExecRamp+0x4a>
#else
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt / 65536);
#endif

#ifdef CHECK_BOUNDARY
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxAppPositiveMecSpeedUnit)
 8007016:	8bc3      	ldrh	r3, [r0, #30]
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt >> 16);
 8007018:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxAppPositiveMecSpeedUnit)
 800701c:	4299      	cmp	r1, r3
 800701e:	dd01      	ble.n	8007024 <STC_ExecRamp+0x1c>
 8007020:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (allowedRange);
}
 8007022:	bd70      	pop	{r4, r5, r6, pc}
      else if (hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit)
 8007024:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	@ 0x24
 8007028:	428b      	cmp	r3, r1
 800702a:	dcf9      	bgt.n	8007020 <STC_ExecRamp+0x18>
      else if ((int32_t)hTargetFinal < (int32_t)pHandle->MinAppPositiveMecSpeedUnit)
 800702c:	8c23      	ldrh	r3, [r4, #32]
 800702e:	4299      	cmp	r1, r3
 8007030:	da03      	bge.n	800703a <STC_ExecRamp+0x32>
        if (hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit)
 8007032:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	@ 0x22
 8007036:	428b      	cmp	r3, r1
 8007038:	dbf2      	blt.n	8007020 <STC_ExecRamp+0x18>
      if (0U == hDurationms)
 800703a:	b9a6      	cbnz	r6, 8007066 <STC_ExecRamp+0x5e>
        if (MCM_SPEED_MODE == pHandle->Mode)
 800703c:	7823      	ldrb	r3, [r4, #0]
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 800703e:	042d      	lsls	r5, r5, #16
        if (MCM_SPEED_MODE == pHandle->Mode)
 8007040:	2b03      	cmp	r3, #3
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 8007042:	bf0c      	ite	eq
 8007044:	6065      	streq	r5, [r4, #4]
          pHandle->TorqueRef = ((int32_t)hTargetFinal) * 65536;
 8007046:	60a5      	strne	r5, [r4, #8]
        pHandle->IncDecAmount = 0;
 8007048:	2000      	movs	r0, #0
        pHandle->IncDecAmount = wAux1;
 800704a:	61a0      	str	r0, [r4, #24]
        pHandle->RampRemainingStep++;
 800704c:	60e6      	str	r6, [r4, #12]
        pHandle->IncDecAmount = wAux1;
 800704e:	2001      	movs	r0, #1
}
 8007050:	bd70      	pop	{r4, r5, r6, pc}
      hCurrentReference = STC_GetTorqueRef(pHandle);
 8007052:	f7ff ffd1 	bl	8006ff8 <STC_GetTorqueRef>
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxPositiveTorque)
 8007056:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8007058:	42ab      	cmp	r3, r5
 800705a:	dbe1      	blt.n	8007020 <STC_ExecRamp+0x18>
      if ((int32_t)hTargetFinal < (int32_t)pHandle->MinNegativeTorque)
 800705c:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	@ 0x28
 8007060:	42ab      	cmp	r3, r5
 8007062:	dcdd      	bgt.n	8007020 <STC_ExecRamp+0x18>
 8007064:	e7e9      	b.n	800703a <STC_ExecRamp+0x32>
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 8007066:	8ba3      	ldrh	r3, [r4, #28]
        wAux /= 1000U;
 8007068:	4a06      	ldr	r2, [pc, #24]	@ (8007084 <STC_ExecRamp+0x7c>)
        pHandle->TargetFinal = hTargetFinal;
 800706a:	8065      	strh	r5, [r4, #2]
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 800706c:	fb06 f303 	mul.w	r3, r6, r3
        wAux /= 1000U;
 8007070:	fba2 2303 	umull	r2, r3, r2, r3
        wAux1 = (((int32_t)hTargetFinal) - ((int32_t)hCurrentReference)) * 65536;
 8007074:	1a28      	subs	r0, r5, r0
        wAux /= 1000U;
 8007076:	099b      	lsrs	r3, r3, #6
        pHandle->RampRemainingStep++;
 8007078:	1c5e      	adds	r6, r3, #1
        wAux1 = (((int32_t)hTargetFinal) - ((int32_t)hCurrentReference)) * 65536;
 800707a:	0400      	lsls	r0, r0, #16
        wAux1 /= ((int32_t)pHandle->RampRemainingStep);
 800707c:	fb90 f0f6 	sdiv	r0, r0, r6
        pHandle->IncDecAmount = wAux1;
 8007080:	e7e3      	b.n	800704a <STC_ExecRamp+0x42>
 8007082:	bf00      	nop
 8007084:	10624dd3 	.word	0x10624dd3

08007088 <STC_StopRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->RampRemainingStep = 0U;
 8007088:	2300      	movs	r3, #0
 800708a:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 800708c:	6183      	str	r3, [r0, #24]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 800708e:	4770      	bx	lr

08007090 <STC_CalcTorqueReference>:
  * - Must be called at fixed time equal to hSTCFrequencyHz. It is called
  * passing as parameter the speed sensor used to perform the speed regulation.
  * - Called during START and ALIGNEMENT states of the MC state machine into MediumFrequencyTask.
  */
__weak int16_t STC_CalcTorqueReference(SpeednTorqCtrl_Handle_t *pHandle)
{
 8007090:	b538      	push	{r3, r4, r5, lr}
    int32_t wCurrentReference;
    int16_t hMeasuredSpeed;
    int16_t hTargetSpeed;
    int16_t hError;

    if (MCM_TORQUE_MODE == pHandle->Mode)
 8007092:	7802      	ldrb	r2, [r0, #0]
      wCurrentReference = pHandle->SpeedRefUnitExt;
    }

    /* Update the speed reference or the torque reference according to the mode
       and terminates the ramp if needed */
    if (pHandle->RampRemainingStep > 1U)
 8007094:	68c3      	ldr	r3, [r0, #12]
    if (MCM_TORQUE_MODE == pHandle->Mode)
 8007096:	2a04      	cmp	r2, #4
{
 8007098:	4604      	mov	r4, r0
    if (MCM_TORQUE_MODE == pHandle->Mode)
 800709a:	d012      	beq.n	80070c2 <STC_CalcTorqueReference+0x32>
    if (pHandle->RampRemainingStep > 1U)
 800709c:	2b01      	cmp	r3, #1
      wCurrentReference = pHandle->SpeedRefUnitExt;
 800709e:	6845      	ldr	r5, [r0, #4]
    if (pHandle->RampRemainingStep > 1U)
 80070a0:	d908      	bls.n	80070b4 <STC_CalcTorqueReference+0x24>
    {
      /* Increment/decrement the reference value */
      wCurrentReference += pHandle->IncDecAmount;
 80070a2:	6981      	ldr	r1, [r0, #24]

      /* Decrement the number of remaining steps */
      pHandle->RampRemainingStep--;
 80070a4:	3b01      	subs	r3, #1
      wCurrentReference += pHandle->IncDecAmount;
 80070a6:	440d      	add	r5, r1
      pHandle->RampRemainingStep--;
 80070a8:	60c3      	str	r3, [r0, #12]
    else
    {
      /* Do nothing */
    }

    if (MCM_SPEED_MODE == pHandle->Mode)
 80070aa:	2a03      	cmp	r2, #3
 80070ac:	d011      	beq.n	80070d2 <STC_CalcTorqueReference+0x42>
    else
    {
      pHandle->TorqueRef = wCurrentReference;
#ifndef FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hTorqueReference = (int16_t)(wCurrentReference >> 16);
 80070ae:	1428      	asrs	r0, r5, #16
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
 80070b0:	60a5      	str	r5, [r4, #8]
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (hTorqueReference);
}
 80070b2:	bd38      	pop	{r3, r4, r5, pc}
    else if (1U == pHandle->RampRemainingStep)
 80070b4:	d1f9      	bne.n	80070aa <STC_CalcTorqueReference+0x1a>
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 80070b6:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
      pHandle->RampRemainingStep = 0U;
 80070ba:	2300      	movs	r3, #0
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 80070bc:	042d      	lsls	r5, r5, #16
      pHandle->RampRemainingStep = 0U;
 80070be:	60c3      	str	r3, [r0, #12]
 80070c0:	e7f3      	b.n	80070aa <STC_CalcTorqueReference+0x1a>
    if (pHandle->RampRemainingStep > 1U)
 80070c2:	2b01      	cmp	r3, #1
      wCurrentReference = pHandle->TorqueRef;
 80070c4:	6885      	ldr	r5, [r0, #8]
    if (pHandle->RampRemainingStep > 1U)
 80070c6:	d911      	bls.n	80070ec <STC_CalcTorqueReference+0x5c>
      wCurrentReference += pHandle->IncDecAmount;
 80070c8:	6982      	ldr	r2, [r0, #24]
      pHandle->RampRemainingStep--;
 80070ca:	3b01      	subs	r3, #1
      wCurrentReference += pHandle->IncDecAmount;
 80070cc:	4415      	add	r5, r2
      pHandle->RampRemainingStep--;
 80070ce:	60c3      	str	r3, [r0, #12]
    if (MCM_SPEED_MODE == pHandle->Mode)
 80070d0:	e7ed      	b.n	80070ae <STC_CalcTorqueReference+0x1e>
      hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit(pHandle->SPD);
 80070d2:	6960      	ldr	r0, [r4, #20]
 80070d4:	f7ff ff22 	bl	8006f1c <SPD_GetAvrgMecSpeedUnit>
      hError = hTargetSpeed - hMeasuredSpeed;
 80070d8:	ebc0 4125 	rsb	r1, r0, r5, asr #16
      hTorqueReference = PI_Controller(pHandle->PISpeed, (int32_t)hError);
 80070dc:	b209      	sxth	r1, r1
 80070de:	6920      	ldr	r0, [r4, #16]
 80070e0:	f7ff f8ac 	bl	800623c <PI_Controller>
      pHandle->SpeedRefUnitExt = wCurrentReference;
 80070e4:	6065      	str	r5, [r4, #4]
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
 80070e6:	0405      	lsls	r5, r0, #16
 80070e8:	60a5      	str	r5, [r4, #8]
}
 80070ea:	bd38      	pop	{r3, r4, r5, pc}
    else if (1U == pHandle->RampRemainingStep)
 80070ec:	d1df      	bne.n	80070ae <STC_CalcTorqueReference+0x1e>
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 80070ee:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
      pHandle->RampRemainingStep = 0U;
 80070f2:	2300      	movs	r3, #0
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 80070f4:	042d      	lsls	r5, r5, #16
      pHandle->RampRemainingStep = 0U;
 80070f6:	60c3      	str	r3, [r0, #12]
    if (MCM_SPEED_MODE == pHandle->Mode)
 80070f8:	e7d9      	b.n	80070ae <STC_CalcTorqueReference+0x1e>
 80070fa:	bf00      	nop

080070fc <STC_GetDefaultIqdref>:
    IqdRefDefault.d = 0;
  }
  else
  {
#endif
    IqdRefDefault.q = pHandle->TorqueRefDefault;
 80070fc:	f8d0 302e 	ldr.w	r3, [r0, #46]	@ 0x2e
    IqdRefDefault.d = pHandle->IdrefDefault;
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (IqdRefDefault);
 8007100:	2200      	movs	r2, #0
 8007102:	b299      	uxth	r1, r3
 8007104:	f361 020f 	bfi	r2, r1, #0, #16
 8007108:	0c1b      	lsrs	r3, r3, #16
 800710a:	f363 421f 	bfi	r2, r3, #16, #16
{
 800710e:	b082      	sub	sp, #8
}
 8007110:	4610      	mov	r0, r2
 8007112:	b002      	add	sp, #8
 8007114:	4770      	bx	lr
 8007116:	bf00      	nop

08007118 <STC_ForceSpeedReferenceToCurrentSpeed>:
  *
  * - Called during the CHARGE_BOOT_CAP, SWITCH_OVER and WAIT_STOP_MOTOR states of the MC state machine
  * into MediumFrequencyTask to initialize the speed reference.
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed(SpeednTorqCtrl_Handle_t *pHandle)
{
 8007118:	b510      	push	{r4, lr}
 800711a:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SpeedRefUnitExt = ((int32_t)SPD_GetAvrgMecSpeedUnit(pHandle->SPD)) * (int32_t)65536;
 800711c:	6940      	ldr	r0, [r0, #20]
 800711e:	f7ff fefd 	bl	8006f1c <SPD_GetAvrgMecSpeedUnit>
 8007122:	0400      	lsls	r0, r0, #16
 8007124:	6060      	str	r0, [r4, #4]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 8007126:	bd10      	pop	{r4, pc}

08007128 <VSS_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->_Super.bSpeedErrorNumber = 0U;
 8007128:	2300      	movs	r3, #0
    pHandle->hRemainingStep = 0U;
    pHandle->hElAngleAccu = 0;

    pHandle->bTransitionStarted = false;
    pHandle->bTransitionEnded = false;
    pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 800712a:	8ec2      	ldrh	r2, [r0, #54]	@ 0x36
    pHandle->_Super.bSpeedErrorNumber = 0U;
 800712c:	7003      	strb	r3, [r0, #0]
    pHandle->wElSpeedDpp32 = 0;
 800712e:	e9c0 3308 	strd	r3, r3, [r0, #32]
    pHandle->_Super.hElAngle = 0;
 8007132:	6043      	str	r3, [r0, #4]
    pHandle->_Super.hAvrMecSpeedUnit = 0;
 8007134:	60c3      	str	r3, [r0, #12]
    pHandle->_Super.hMecAccelUnitP = 0;
 8007136:	8243      	strh	r3, [r0, #18]
    pHandle->hRemainingStep = 0U;
 8007138:	8503      	strh	r3, [r0, #40]	@ 0x28
    pHandle->bTransitionStarted = false;
 800713a:	8583      	strh	r3, [r0, #44]	@ 0x2c
    pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 800713c:	85c2      	strh	r2, [r0, #46]	@ 0x2e
    pHandle->hElAngleAccu = 0;
 800713e:	6303      	str	r3, [r0, #48]	@ 0x30

    pHandle->bCopyObserver = false;
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
}
 8007140:	4770      	bx	lr
 8007142:	bf00      	nop

08007144 <VSS_Init>:
{
 8007144:	b508      	push	{r3, lr}
  VSS_Clear(pHandle);
 8007146:	f7ff ffef 	bl	8007128 <VSS_Clear>
}
 800714a:	bd08      	pop	{r3, pc}

0800714c <VSS_SetMecAngle>:
  }
  else
  {
#endif
    pHandle->hElAngleAccu = hMecAngle;
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 800714c:	7843      	ldrb	r3, [r0, #1]
    pHandle->hElAngleAccu = hMecAngle;
 800714e:	8601      	strh	r1, [r0, #48]	@ 0x30
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 8007150:	fb91 f3f3 	sdiv	r3, r1, r3
    pHandle->_Super.hElAngle = hMecAngle;
 8007154:	8081      	strh	r1, [r0, #4]
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 8007156:	80c3      	strh	r3, [r0, #6]
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
}
 8007158:	4770      	bx	lr
 800715a:	bf00      	nop

0800715c <VSS_SetMecAcceleration>:
    int32_t wMecAccDppP32;
    uint16_t hNbrStep;
    int16_t hCurrentMecSpeedDpp;
    int16_t hFinalMecSpeedDpp;

    if (false == pHandle->bTransitionStarted)
 800715c:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8007160:	b9a3      	cbnz	r3, 800718c <VSS_SetMecAcceleration+0x30>
        pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;

        pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)hFinalMecSpeedUnit)
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
                                              / (((int32_t)SPEED_UNIT)
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 8007162:	8b43      	ldrh	r3, [r0, #26]
{
 8007164:	b510      	push	{r4, lr}
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
 8007166:	69c4      	ldr	r4, [r0, #28]

        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 8007168:	f890 e001 	ldrb.w	lr, [r0, #1]
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800716c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
 8007170:	fb04 fc01 	mul.w	ip, r4, r1
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 8007174:	005b      	lsls	r3, r3, #1
                                              / (((int32_t)SPEED_UNIT)
 8007176:	fb9c fcf3 	sdiv	ip, ip, r3
      if (0U == hDurationms)
 800717a:	b942      	cbnz	r2, 800718e <VSS_SetMecAcceleration+0x32>
        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 800717c:	fb1c fc0e 	smulbb	ip, ip, lr
        pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;
 8007180:	8181      	strh	r1, [r0, #12]
        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 8007182:	f8a0 c00e 	strh.w	ip, [r0, #14]

        pHandle->hRemainingStep = 0U;
 8007186:	8502      	strh	r2, [r0, #40]	@ 0x28

        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8007188:	8541      	strh	r1, [r0, #42]	@ 0x2a
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
}
 800718a:	bd10      	pop	{r4, pc}
 800718c:	4770      	bx	lr
        hNbrStep = (uint16_t)((((uint32_t)hDurationms) * ((uint32_t)pHandle->hSpeedSamplingFreqHz)) / 1000U);
 800718e:	8e83      	ldrh	r3, [r0, #52]	@ 0x34
 8007190:	fb02 f303 	mul.w	r3, r2, r3
 8007194:	4a0e      	ldr	r2, [pc, #56]	@ (80071d0 <VSS_SetMecAcceleration+0x74>)
 8007196:	fba2 2303 	umull	r2, r3, r2, r3
 800719a:	f3c3 138f 	ubfx	r3, r3, #6, #16
        hNbrStep++;
 800719e:	3301      	adds	r3, #1
 80071a0:	b29b      	uxth	r3, r3
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 80071a2:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
        pHandle->hRemainingStep = hNbrStep;
 80071a6:	8503      	strh	r3, [r0, #40]	@ 0x28
        if (0U == hNbrStep)
 80071a8:	b91b      	cbnz	r3, 80071b2 <VSS_SetMecAcceleration+0x56>
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 80071aa:	0412      	lsls	r2, r2, #16
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 80071ac:	8541      	strh	r1, [r0, #42]	@ 0x2a
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 80071ae:	6242      	str	r2, [r0, #36]	@ 0x24
}
 80071b0:	bd10      	pop	{r4, pc}
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 80071b2:	fb92 f4fe 	sdiv	r4, r2, lr
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 80071b6:	ebac 0c04 	sub.w	ip, ip, r4
                         * ((int32_t)65536)) / ((int32_t )hNbrStep);
 80071ba:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 80071be:	0412      	lsls	r2, r2, #16
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 80071c0:	fb9c f3f3 	sdiv	r3, ip, r3
          pHandle->wElAccDppP32 = wMecAccDppP32 * ((int16_t)pHandle->_Super.bElToMecRatio);
 80071c4:	fb0e f303 	mul.w	r3, lr, r3
 80071c8:	6203      	str	r3, [r0, #32]
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 80071ca:	8541      	strh	r1, [r0, #42]	@ 0x2a
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 80071cc:	6242      	str	r2, [r0, #36]	@ 0x24
    }
 80071ce:	e7ef      	b.n	80071b0 <VSS_SetMecAcceleration+0x54>
 80071d0:	10624dd3 	.word	0x10624dd3

080071d4 <AS5147U_Init>:
#include "as5147u.h"
#include "spi.h"


uint8_t AS5147U_Init(void)
{
 80071d4:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET); // Pull nSCS high
 80071d6:	2201      	movs	r2, #1
 80071d8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80071dc:	4803      	ldr	r0, [pc, #12]	@ (80071ec <AS5147U_Init+0x18>)
 80071de:	f7fd fa71 	bl	80046c4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80071e2:	2001      	movs	r0, #1
 80071e4:	f7fc fe04 	bl	8003df0 <HAL_Delay>
	return 0;
}
 80071e8:	2000      	movs	r0, #0
 80071ea:	bd08      	pop	{r3, pc}
 80071ec:	40020000 	.word	0x40020000

080071f0 <DRV8323_Init>:

#include "drv8323.h"
#include "spi.h"

uint8_t DRV8323_Init(void)
{
 80071f0:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); // Pull nSCS high
 80071f2:	2201      	movs	r2, #1
 80071f4:	2110      	movs	r1, #16
 80071f6:	4804      	ldr	r0, [pc, #16]	@ (8007208 <DRV8323_Init+0x18>)
 80071f8:	f7fd fa64 	bl	80046c4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80071fc:	2001      	movs	r0, #1
 80071fe:	f7fc fdf7 	bl	8003df0 <HAL_Delay>
	return 0;
}
 8007202:	2000      	movs	r0, #0
 8007204:	bd08      	pop	{r3, pc}
 8007206:	bf00      	nop
 8007208:	40020000 	.word	0x40020000

0800720c <Set_CSA_Gain>:


uint8_t Set_CSA_Gain(CSA_GAIN_t gain)
{
    // Ensure the gain value is valid (0 to 3)
    if (gain > CSA_GAIN_40_VV)
 800720c:	2803      	cmp	r0, #3
 800720e:	d901      	bls.n	8007214 <Set_CSA_Gain+0x8>
        return 1; // Invalid gain value
 8007210:	2001      	movs	r0, #1
    else
    {
    	return 1; // Failure
    }

}
 8007212:	4770      	bx	lr
{
 8007214:	b570      	push	{r4, r5, r6, lr}
 8007216:	b084      	sub	sp, #16
 8007218:	4605      	mov	r5, r0
    HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&spiData.value, (uint8_t*)&receivedWord, 1, 1000);
 800721a:	f44f 767a 	mov.w	r6, #1000	@ 0x3e8
    spiData.bits.payload = 0;  // We are readings sooo.... 0s?
 800721e:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);   // CS Enable
 8007222:	4831      	ldr	r0, [pc, #196]	@ (80072e8 <Set_CSA_Gain+0xdc>)
    spiData.bits.payload = 0;  // We are readings sooo.... 0s?
 8007224:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);   // CS Enable
 8007228:	2200      	movs	r2, #0
 800722a:	2110      	movs	r1, #16
 800722c:	f7fd fa4a 	bl	80046c4 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&spiData.value, (uint8_t*)&receivedWord, 1, 1000);
 8007230:	f10d 020e 	add.w	r2, sp, #14
 8007234:	a903      	add	r1, sp, #12
 8007236:	2301      	movs	r3, #1
 8007238:	9600      	str	r6, [sp, #0]
 800723a:	482c      	ldr	r0, [pc, #176]	@ (80072ec <Set_CSA_Gain+0xe0>)
 800723c:	f7fd feba 	bl	8004fb4 <HAL_SPI_TransmitReceive>
    csaData.value = receivedWord;
 8007240:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8007244:	4828      	ldr	r0, [pc, #160]	@ (80072e8 <Set_CSA_Gain+0xdc>)
 8007246:	2201      	movs	r2, #1
 8007248:	2110      	movs	r1, #16
    csaData.value = receivedWord;
 800724a:	f04f 0400 	mov.w	r4, #0
 800724e:	f363 040a 	bfi	r4, r3, #0, #11
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8007252:	f7fd fa37 	bl	80046c4 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8007256:	2001      	movs	r0, #1
 8007258:	f7fc fdca 	bl	8003df0 <HAL_Delay>
    spiData.bits.payload = csaData.value;
 800725c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8007260:	4821      	ldr	r0, [pc, #132]	@ (80072e8 <Set_CSA_Gain+0xdc>)
    csaData.bits.CSA_GAIN = gain; // change gain settings
 8007262:	f365 1487 	bfi	r4, r5, #6, #2
    spiData.bits.payload = csaData.value;
 8007266:	f3c4 020a 	ubfx	r2, r4, #0, #11
 800726a:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
 800726e:	4313      	orrs	r3, r2
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8007270:	2110      	movs	r1, #16
 8007272:	2200      	movs	r2, #0
    spiData.bits.payload = csaData.value;
 8007274:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8007278:	f7fd fa24 	bl	80046c4 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&spiData.value, (uint8_t*)&receivedWord, 1, 1000);
 800727c:	2301      	movs	r3, #1
 800727e:	f10d 020e 	add.w	r2, sp, #14
 8007282:	a903      	add	r1, sp, #12
 8007284:	9600      	str	r6, [sp, #0]
 8007286:	4819      	ldr	r0, [pc, #100]	@ (80072ec <Set_CSA_Gain+0xe0>)
 8007288:	f7fd fe94 	bl	8004fb4 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800728c:	2201      	movs	r2, #1
 800728e:	2110      	movs	r1, #16
 8007290:	4815      	ldr	r0, [pc, #84]	@ (80072e8 <Set_CSA_Gain+0xdc>)
 8007292:	f7fd fa17 	bl	80046c4 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8007296:	2001      	movs	r0, #1
 8007298:	f7fc fdaa 	bl	8003df0 <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
 800729c:	4814      	ldr	r0, [pc, #80]	@ (80072f0 <Set_CSA_Gain+0xe4>)
 800729e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80072a2:	f7fd fa13 	bl	80046cc <HAL_GPIO_TogglePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);   // CS Enable?
 80072a6:	4810      	ldr	r0, [pc, #64]	@ (80072e8 <Set_CSA_Gain+0xdc>)
 80072a8:	2200      	movs	r2, #0
 80072aa:	2110      	movs	r1, #16
 80072ac:	f7fd fa0a 	bl	80046c4 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&spiData.value, (uint8_t*)&receivedWord, 1, 1000);
 80072b0:	f10d 020e 	add.w	r2, sp, #14
 80072b4:	a903      	add	r1, sp, #12
 80072b6:	9600      	str	r6, [sp, #0]
 80072b8:	2301      	movs	r3, #1
 80072ba:	480c      	ldr	r0, [pc, #48]	@ (80072ec <Set_CSA_Gain+0xe0>)
 80072bc:	f7fd fe7a 	bl	8004fb4 <HAL_SPI_TransmitReceive>
    csaData.value = receivedWord;
 80072c0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80072c4:	4808      	ldr	r0, [pc, #32]	@ (80072e8 <Set_CSA_Gain+0xdc>)
 80072c6:	2201      	movs	r2, #1
 80072c8:	2110      	movs	r1, #16
    csaData.value = receivedWord;
 80072ca:	f363 040a 	bfi	r4, r3, #0, #11
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80072ce:	f7fd f9f9 	bl	80046c4 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80072d2:	2001      	movs	r0, #1
 80072d4:	f7fc fd8c 	bl	8003df0 <HAL_Delay>
    if(csaData.bits.CSA_GAIN == gain)
 80072d8:	f3c4 1481 	ubfx	r4, r4, #6, #2
 80072dc:	1b60      	subs	r0, r4, r5
 80072de:	bf18      	it	ne
 80072e0:	2001      	movne	r0, #1
}
 80072e2:	b004      	add	sp, #16
 80072e4:	bd70      	pop	{r4, r5, r6, pc}
 80072e6:	bf00      	nop
 80072e8:	40020000 	.word	0x40020000
 80072ec:	200016a8 	.word	0x200016a8
 80072f0:	40020800 	.word	0x40020800

080072f4 <Get_Fault_Status>:

FaultStatus Get_Fault_Status()
{
 80072f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint16_t receivedWord;
	spiData.bits.rw = DRV8323_READ;
	spiData.bits.address = FAULT1_REG;
	spiData.bits.payload = 0;

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);   // CS Enable
 80072f8:	4e29      	ldr	r6, [pc, #164]	@ (80073a0 <Get_Fault_Status+0xac>)
    HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&spiData.value, (uint8_t*)&receivedWord, 1, 1000);
 80072fa:	4f2a      	ldr	r7, [pc, #168]	@ (80073a4 <Get_Fault_Status+0xb0>)
{
 80072fc:	b084      	sub	sp, #16
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);   // CS Enable
 80072fe:	4630      	mov	r0, r6
	spiData.bits.payload = 0;
 8007300:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
    HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&spiData.value, (uint8_t*)&receivedWord, 1, 1000);
 8007304:	f44f 787a 	mov.w	r8, #1000	@ 0x3e8
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);   // CS Enable
 8007308:	2200      	movs	r2, #0
 800730a:	2110      	movs	r1, #16
	spiData.bits.payload = 0;
 800730c:	f8ad 3008 	strh.w	r3, [sp, #8]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);   // CS Enable
 8007310:	f7fd f9d8 	bl	80046c4 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&spiData.value, (uint8_t*)&receivedWord, 1, 1000);
 8007314:	2301      	movs	r3, #1
 8007316:	f10d 020a 	add.w	r2, sp, #10
 800731a:	a902      	add	r1, sp, #8
 800731c:	f8cd 8000 	str.w	r8, [sp]
 8007320:	4638      	mov	r0, r7
 8007322:	f7fd fe47 	bl	8004fb4 <HAL_SPI_TransmitReceive>
    status.faultReg1.value = receivedWord;
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8007326:	2201      	movs	r2, #1
 8007328:	2110      	movs	r1, #16
 800732a:	4630      	mov	r0, r6
    status.faultReg1.value = receivedWord;
 800732c:	f8bd 400a 	ldrh.w	r4, [sp, #10]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8007330:	f7fd f9c8 	bl	80046c4 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8007334:	2001      	movs	r0, #1
 8007336:	f7fc fd5b 	bl	8003df0 <HAL_Delay>

	spiData.bits.address = FAULT2_REG;
 800733a:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800733e:	2501      	movs	r5, #1
 8007340:	f365 03c6 	bfi	r3, r5, #3, #4

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);   // CS Enable
 8007344:	4630      	mov	r0, r6
 8007346:	2200      	movs	r2, #0
 8007348:	2110      	movs	r1, #16
	spiData.bits.address = FAULT2_REG;
 800734a:	f88d 3009 	strb.w	r3, [sp, #9]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);   // CS Enable
 800734e:	f7fd f9b9 	bl	80046c4 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&spiData.value, (uint8_t*)&receivedWord, 1, 1000);
 8007352:	462b      	mov	r3, r5
 8007354:	f10d 020a 	add.w	r2, sp, #10
 8007358:	a902      	add	r1, sp, #8
 800735a:	f8cd 8000 	str.w	r8, [sp]
 800735e:	4638      	mov	r0, r7
 8007360:	f7fd fe28 	bl	8004fb4 <HAL_SPI_TransmitReceive>
    status.faultReg2.value = receivedWord;
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8007364:	462a      	mov	r2, r5
 8007366:	2110      	movs	r1, #16
 8007368:	4630      	mov	r0, r6
    status.faultReg2.value = receivedWord;
 800736a:	f8bd 600a 	ldrh.w	r6, [sp, #10]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800736e:	f7fd f9a9 	bl	80046c4 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8007372:	4628      	mov	r0, r5
 8007374:	f7fc fd3c 	bl	8003df0 <HAL_Delay>

    return status;
 8007378:	9a03      	ldr	r2, [sp, #12]
 800737a:	f3c6 060a 	ubfx	r6, r6, #0, #11
 800737e:	f3c4 030a 	ubfx	r3, r4, #0, #11
 8007382:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8007386:	f002 22f8 	and.w	r2, r2, #4160813056	@ 0xf800f800
 800738a:	4313      	orrs	r3, r2
 800738c:	b29a      	uxth	r2, r3
 800738e:	2000      	movs	r0, #0
 8007390:	f362 000f 	bfi	r0, r2, #0, #16
 8007394:	0c1b      	lsrs	r3, r3, #16
 8007396:	f363 401f 	bfi	r0, r3, #16, #16

}
 800739a:	b004      	add	sp, #16
 800739c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073a0:	40020000 	.word	0x40020000
 80073a4:	200016a8 	.word	0x200016a8

080073a8 <memset>:
 80073a8:	4402      	add	r2, r0
 80073aa:	4603      	mov	r3, r0
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d100      	bne.n	80073b2 <memset+0xa>
 80073b0:	4770      	bx	lr
 80073b2:	f803 1b01 	strb.w	r1, [r3], #1
 80073b6:	e7f9      	b.n	80073ac <memset+0x4>

080073b8 <__libc_init_array>:
 80073b8:	b570      	push	{r4, r5, r6, lr}
 80073ba:	4d0d      	ldr	r5, [pc, #52]	@ (80073f0 <__libc_init_array+0x38>)
 80073bc:	4c0d      	ldr	r4, [pc, #52]	@ (80073f4 <__libc_init_array+0x3c>)
 80073be:	1b64      	subs	r4, r4, r5
 80073c0:	10a4      	asrs	r4, r4, #2
 80073c2:	2600      	movs	r6, #0
 80073c4:	42a6      	cmp	r6, r4
 80073c6:	d109      	bne.n	80073dc <__libc_init_array+0x24>
 80073c8:	4d0b      	ldr	r5, [pc, #44]	@ (80073f8 <__libc_init_array+0x40>)
 80073ca:	4c0c      	ldr	r4, [pc, #48]	@ (80073fc <__libc_init_array+0x44>)
 80073cc:	f000 f826 	bl	800741c <_init>
 80073d0:	1b64      	subs	r4, r4, r5
 80073d2:	10a4      	asrs	r4, r4, #2
 80073d4:	2600      	movs	r6, #0
 80073d6:	42a6      	cmp	r6, r4
 80073d8:	d105      	bne.n	80073e6 <__libc_init_array+0x2e>
 80073da:	bd70      	pop	{r4, r5, r6, pc}
 80073dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80073e0:	4798      	blx	r3
 80073e2:	3601      	adds	r6, #1
 80073e4:	e7ee      	b.n	80073c4 <__libc_init_array+0xc>
 80073e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80073ea:	4798      	blx	r3
 80073ec:	3601      	adds	r6, #1
 80073ee:	e7f2      	b.n	80073d6 <__libc_init_array+0x1e>
 80073f0:	08007858 	.word	0x08007858
 80073f4:	08007858 	.word	0x08007858
 80073f8:	08007858 	.word	0x08007858
 80073fc:	0800785c 	.word	0x0800785c

08007400 <memcpy>:
 8007400:	440a      	add	r2, r1
 8007402:	4291      	cmp	r1, r2
 8007404:	f100 33ff 	add.w	r3, r0, #4294967295
 8007408:	d100      	bne.n	800740c <memcpy+0xc>
 800740a:	4770      	bx	lr
 800740c:	b510      	push	{r4, lr}
 800740e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007412:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007416:	4291      	cmp	r1, r2
 8007418:	d1f9      	bne.n	800740e <memcpy+0xe>
 800741a:	bd10      	pop	{r4, pc}

0800741c <_init>:
 800741c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800741e:	bf00      	nop
 8007420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007422:	bc08      	pop	{r3}
 8007424:	469e      	mov	lr, r3
 8007426:	4770      	bx	lr

08007428 <_fini>:
 8007428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800742a:	bf00      	nop
 800742c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800742e:	bc08      	pop	{r3}
 8007430:	469e      	mov	lr, r3
 8007432:	4770      	bx	lr
