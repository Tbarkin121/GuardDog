
MotorProfilerG4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011358  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000b3e4  08011540  08011540  00021540  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c924  0801c924  00031b6c  2**0
                  CONTENTS
  4 .ARM          00000008  0801c924  0801c924  0002c924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c92c  0801c92c  00031b6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c92c  0801c92c  0002c92c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c930  0801c930  0002c930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001b6c  20000000  0801c934  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bfc  20001b80  0801e4a0  00031b80  2**5
                  ALLOC
 10 ._user_heap_stack 00001004  2000377c  0801e4a0  0003377c  2**0
                  ALLOC
 11 .ARM.attributes 0000003a  00000000  00000000  00031b6c  2**0
                  CONTENTS, READONLY
 12 .comment      000019b0  00000000  00000000  00031ba6  2**0
                  CONTENTS, READONLY
 13 .iar.rtmodel  000000a2  00000000  00000000  00033556  2**0
                  CONTENTS, READONLY
 14 .iar_vfe_header 0000000c  00000000  00000000  000335f8  2**2
                  CONTENTS, READONLY
 15 .debug_line   0005282b  00000000  00000000  00033604  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line_str 0000006b  00000000  00000000  00085e2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_info   00060292  00000000  00000000  00085e9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 00009aa8  00000000  00000000  000e612c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 000028c8  00000000  00000000  000efbd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0014b286  00000000  00000000  000f24a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_rnglists 000036d6  00000000  00000000  0023d726  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0001e425  00000000  00000000  00240dfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_macro  00037a3d  00000000  00000000  0025f221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_frame  00006ccc  00000000  00000000  00296c60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_types  00000820  00000000  00000000  0029d92c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_macinfo 000004e7  00000000  00000000  0029e14c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_loc    00002b73  00000000  00000000  0029e633  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_ranges 000004a0  00000000  00000000  002a11a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 29 .debug_pubnames 00000c8c  00000000  00000000  002a1646  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20001b80 	.word	0x20001b80
 80001fc:	00000000 	.word	0x00000000
 8000200:	08011520 	.word	0x08011520

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20001b84 	.word	0x20001b84
 800021c:	08011520 	.word	0x08011520

08000220 <OTT_Init>:
 8000220:	b510      	push	{r4, lr}
 8000222:	4604      	mov	r4, r0
 8000224:	f8df 0934 	ldr.w	r0, [pc, #2356]	; 8000b5c <??DataTable4_2>
 8000228:	6120      	str	r0, [r4, #16]
 800022a:	f00c fe07 	bl	800ce3c <REMNG_Init>
 800022e:	2100      	movs	r1, #0
 8000230:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 8000234:	f8a4 1058 	strh.w	r1, [r4, #88]	; 0x58
 8000238:	f8a4 105a 	strh.w	r1, [r4, #90]	; 0x5a
 800023c:	6221      	str	r1, [r4, #32]
 800023e:	6261      	str	r1, [r4, #36]	; 0x24
 8000240:	62a1      	str	r1, [r4, #40]	; 0x28
 8000242:	62e1      	str	r1, [r4, #44]	; 0x2c
 8000244:	6521      	str	r1, [r4, #80]	; 0x50
 8000246:	2200      	movs	r2, #0
 8000248:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800024a:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
 800024e:	2300      	movs	r3, #0
 8000250:	6981      	ldr	r1, [r0, #24]
 8000252:	6321      	str	r1, [r4, #48]	; 0x30
 8000254:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
 8000258:	63a3      	str	r3, [r4, #56]	; 0x38
 800025a:	63e2      	str	r2, [r4, #60]	; 0x3c
 800025c:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
 8000260:	f8a4 204c 	strh.w	r2, [r4, #76]	; 0x4c
 8000264:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 8000268:	ed90 0a00 	vldr	s0, [r0]
 800026c:	edd0 0a07 	vldr	s1, [r0, #28]
 8000270:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8000274:	ee60 0a20 	vmul.f32	s1, s0, s1
 8000278:	eefd 0ae0 	vcvt.s32.f32	s1, s1
 800027c:	ee10 1a90 	vmov	r1, s1
 8000280:	f8a4 105c 	strh.w	r1, [r4, #92]	; 0x5c
 8000284:	ed90 0a09 	vldr	s0, [r0, #36]	; 0x24
 8000288:	edd0 0a07 	vldr	s1, [r0, #28]
 800028c:	eec0 0a20 	vdiv.f32	s1, s0, s1
 8000290:	eefd 0ae0 	vcvt.s32.f32	s1, s1
 8000294:	ee10 1a90 	vmov	r1, s1
 8000298:	f8a4 105e 	strh.w	r1, [r4, #94]	; 0x5e
 800029c:	ed90 0a00 	vldr	s0, [r0]
 80002a0:	edd0 0a0c 	vldr	s1, [r0, #48]	; 0x30
 80002a4:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 80002a8:	ee60 0a20 	vmul.f32	s1, s0, s1
 80002ac:	eefd 0ae0 	vcvt.s32.f32	s1, s1
 80002b0:	ee10 1a90 	vmov	r1, s1
 80002b4:	f8a4 1060 	strh.w	r1, [r4, #96]	; 0x60
 80002b8:	ed90 0a00 	vldr	s0, [r0]
 80002bc:	edd0 0a0d 	vldr	s1, [r0, #52]	; 0x34
 80002c0:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 80002c4:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80002c8:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 80002cc:	ee60 0a20 	vmul.f32	s1, s0, s1
 80002d0:	eefd 0ae0 	vcvt.s32.f32	s1, s1
 80002d4:	ee10 0a90 	vmov	r0, s1
 80002d8:	f8a4 0074 	strh.w	r0, [r4, #116]	; 0x74
 80002dc:	6662      	str	r2, [r4, #100]	; 0x64
 80002de:	66a2      	str	r2, [r4, #104]	; 0x68
 80002e0:	f884 206c 	strb.w	r2, [r4, #108]	; 0x6c
 80002e4:	6722      	str	r2, [r4, #112]	; 0x70
 80002e6:	f891 0020 	ldrb.w	r0, [r1, #32]
 80002ea:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 80002ee:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 80002f2:	8c41      	ldrh	r1, [r0, #34]	; 0x22
 80002f4:	f8a4 1078 	strh.w	r1, [r4, #120]	; 0x78
 80002f8:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80002fa:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
 80002fe:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8000300:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
 8000304:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8000306:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
 800030a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 800030e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 8000312:	bd10      	pop	{r4, pc}

08000314 <OTT_Clear>:
 8000314:	f890 1062 	ldrb.w	r1, [r0, #98]	; 0x62
 8000318:	b979      	cbnz	r1, 800033a <??OTT_Clear_0>
 800031a:	2200      	movs	r2, #0
 800031c:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
 8000320:	6381      	str	r1, [r0, #56]	; 0x38
 8000322:	63c2      	str	r2, [r0, #60]	; 0x3c
 8000324:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8000328:	f8a0 204c 	strh.w	r2, [r0, #76]	; 0x4c
 800032c:	f8a0 104e 	strh.w	r1, [r0, #78]	; 0x4e
 8000330:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
 8000334:	f8c0 1094 	str.w	r1, [r0, #148]	; 0x94
 8000338:	4770      	bx	lr

0800033a <??OTT_Clear_0>:
 800033a:	220a      	movs	r2, #10
 800033c:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
 8000340:	4770      	bx	lr

08000342 <OTT_Stop>:
 8000342:	2100      	movs	r1, #0
 8000344:	f880 1034 	strb.w	r1, [r0, #52]	; 0x34
 8000348:	4770      	bx	lr
	...

0800034c <OTT_MF>:
 800034c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000350:	4605      	mov	r5, r0
 8000352:	f895 0034 	ldrb.w	r0, [r5, #52]	; 0x34
 8000356:	692c      	ldr	r4, [r5, #16]
 8000358:	2809      	cmp	r0, #9
 800035a:	f200 80cb 	bhi.w	80004f4 <??OTT_MF_2>
 800035e:	e8df f010 	tbh	[pc, r0, lsl #1]

08000362 <??OTT_MF_0>:
 8000362:	000a 0049 00c9 00c9 00c9 00a2 00cb 0146     ..I...........F.
 8000372:	0170 0213                                   p...

08000376 <??OTT_MF_3>:
 8000376:	6868      	ldr	r0, [r5, #4]
 8000378:	2100      	movs	r1, #0
 800037a:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 800037e:	2104      	movs	r1, #4
 8000380:	68e8      	ldr	r0, [r5, #12]
 8000382:	f00c ff67 	bl	800d254 <STC_SetControlMode>
 8000386:	2100      	movs	r1, #0
 8000388:	63a9      	str	r1, [r5, #56]	; 0x38
 800038a:	f8a5 1040 	strh.w	r1, [r5, #64]	; 0x40
 800038e:	f8a5 104c 	strh.w	r1, [r5, #76]	; 0x4c
 8000392:	2000      	movs	r0, #0
 8000394:	63e8      	str	r0, [r5, #60]	; 0x3c
 8000396:	f8a5 0048 	strh.w	r0, [r5, #72]	; 0x48
 800039a:	f8a5 004e 	strh.w	r0, [r5, #78]	; 0x4e
 800039e:	2101      	movs	r1, #1
 80003a0:	f885 006c 	strb.w	r0, [r5, #108]	; 0x6c
 80003a4:	f8a5 104a 	strh.w	r1, [r5, #74]	; 0x4a
 80003a8:	6828      	ldr	r0, [r5, #0]
 80003aa:	f00c fee5 	bl	800d178 <SPD_GetAvrgMecSpeedUnit>
 80003ae:	ebc0 1100 	rsb	r1, r0, r0, lsl #4
 80003b2:	0088      	lsls	r0, r1, #2
 80003b4:	f8df 37a8 	ldr.w	r3, [pc, #1960]	; 8000b60 <??DataTable4_3>
 80003b8:	fb80 6303 	smull	r6, r3, r0, r3
 80003bc:	1099      	asrs	r1, r3, #2
 80003be:	2200      	movs	r2, #0
 80003c0:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 80003c4:	4620      	mov	r0, r4
 80003c6:	f00c fd83 	bl	800ced0 <REMNG_ExecRamp>
 80003ca:	f8d5 1080 	ldr.w	r1, [r5, #128]	; 0x80
 80003ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80003d2:	4620      	mov	r0, r4
 80003d4:	f00c fd7c 	bl	800ced0 <REMNG_ExecRamp>
 80003d8:	2001      	movs	r0, #1
 80003da:	6869      	ldr	r1, [r5, #4]
 80003dc:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
 80003e0:	f9b1 0010 	ldrsh.w	r0, [r1, #16]
 80003e4:	ee00 0a10 	vmov	s0, r0
 80003e8:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80003ec:	ed85 0a24 	vstr	s0, [r5, #144]	; 0x90
 80003f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080003f4 <??OTT_MF_4>:
 80003f4:	4620      	mov	r0, r4
 80003f6:	f00c fd29 	bl	800ce4c <REMNG_Calc>
 80003fa:	ee00 0a10 	vmov	s0, r0
 80003fe:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8000402:	ed85 0a1c 	vstr	s0, [r5, #112]	; 0x70
 8000406:	4628      	mov	r0, r5
 8000408:	f000 fad6 	bl	80009b8 <OTT_SpeedCtrl>
 800040c:	4606      	mov	r6, r0
 800040e:	4620      	mov	r0, r4
 8000410:	f00c fd3e 	bl	800ce90 <REMNG_RampCompleted>
 8000414:	2800      	cmp	r0, #0
 8000416:	d06d      	beq.n	80004f4 <??OTT_MF_2>
 8000418:	f8b5 004e 	ldrh.w	r0, [r5, #78]	; 0x4e
 800041c:	1c40      	adds	r0, r0, #1
 800041e:	2e01      	cmp	r6, #1
 8000420:	f8a5 004e 	strh.w	r0, [r5, #78]	; 0x4e
 8000424:	d004      	beq.n	8000430 <??OTT_MF_5>
 8000426:	f8b5 1074 	ldrh.w	r1, [r5, #116]	; 0x74
 800042a:	b280      	uxth	r0, r0
 800042c:	4281      	cmp	r1, r0
 800042e:	d261      	bcs.n	80004f4 <??OTT_MF_2>

08000430 <??OTT_MF_5>:
 8000430:	6828      	ldr	r0, [r5, #0]
 8000432:	f00c fea1 	bl	800d178 <SPD_GetAvrgMecSpeedUnit>
 8000436:	ebc0 1100 	rsb	r1, r0, r0, lsl #4
 800043a:	0088      	lsls	r0, r1, #2
 800043c:	f8df 2720 	ldr.w	r2, [pc, #1824]	; 8000b60 <??DataTable4_3>
 8000440:	fb80 3202 	smull	r3, r2, r0, r2
 8000444:	1092      	asrs	r2, r2, #2
 8000446:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 800044a:	ee00 2a10 	vmov	s0, r2
 800044e:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
 8000452:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8000456:	ed85 0a14 	vstr	s0, [r5, #80]	; 0x50
 800045a:	f241 3288 	movw	r2, #5000	; 0x1388
 800045e:	edd0 0a0a 	vldr	s1, [r0, #40]	; 0x28
 8000462:	ee60 0a20 	vmul.f32	s1, s0, s1
 8000466:	eefd 0ae0 	vcvt.s32.f32	s1, s1
 800046a:	ee10 1a90 	vmov	r1, s1
 800046e:	f8a5 1058 	strh.w	r1, [r5, #88]	; 0x58
 8000472:	ed90 1a0b 	vldr	s2, [r0, #44]	; 0x2c
 8000476:	ee20 0a01 	vmul.f32	s0, s0, s2
 800047a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800047e:	ee10 1a10 	vmov	r1, s0
 8000482:	2000      	movs	r0, #0
 8000484:	63e8      	str	r0, [r5, #60]	; 0x3c
 8000486:	f8a5 0040 	strh.w	r0, [r5, #64]	; 0x40
 800048a:	6468      	str	r0, [r5, #68]	; 0x44
 800048c:	f8a5 004e 	strh.w	r0, [r5, #78]	; 0x4e
 8000490:	f8a5 105a 	strh.w	r1, [r5, #90]	; 0x5a
 8000494:	4620      	mov	r0, r4
 8000496:	b209      	sxth	r1, r1
 8000498:	f00c fd1a 	bl	800ced0 <REMNG_ExecRamp>
 800049c:	2005      	movs	r0, #5
 800049e:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
 80004a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080004a6 <??OTT_MF_6>:
 80004a6:	4620      	mov	r0, r4
 80004a8:	f00c fcd0 	bl	800ce4c <REMNG_Calc>
 80004ac:	ee00 0a10 	vmov	s0, r0
 80004b0:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80004b4:	ed85 0a1c 	vstr	s0, [r5, #112]	; 0x70
 80004b8:	4628      	mov	r0, r5
 80004ba:	f000 fa7d 	bl	80009b8 <OTT_SpeedCtrl>
 80004be:	4606      	mov	r6, r0
 80004c0:	4620      	mov	r0, r4
 80004c2:	f00c fce5 	bl	800ce90 <REMNG_RampCompleted>
 80004c6:	b1a8      	cbz	r0, 80004f4 <??OTT_MF_2>
 80004c8:	f8b5 004e 	ldrh.w	r0, [r5, #78]	; 0x4e
 80004cc:	1c40      	adds	r0, r0, #1
 80004ce:	2e01      	cmp	r6, #1
 80004d0:	d004      	beq.n	80004dc <??OTT_MF_7>
 80004d2:	f8b5 1074 	ldrh.w	r1, [r5, #116]	; 0x74
 80004d6:	b282      	uxth	r2, r0
 80004d8:	4291      	cmp	r1, r2
 80004da:	d209      	bcs.n	80004f0 <??OTT_MF_8>

080004dc <??OTT_MF_7>:
 80004dc:	2000      	movs	r0, #0
 80004de:	2206      	movs	r2, #6
 80004e0:	63e8      	str	r0, [r5, #60]	; 0x3c
 80004e2:	f8a5 0040 	strh.w	r0, [r5, #64]	; 0x40
 80004e6:	6468      	str	r0, [r5, #68]	; 0x44
 80004e8:	f8a5 0048 	strh.w	r0, [r5, #72]	; 0x48
 80004ec:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34

080004f0 <??OTT_MF_8>:
 80004f0:	f8a5 004e 	strh.w	r0, [r5, #78]	; 0x4e

080004f4 <??OTT_MF_2>:
 80004f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080004f8 <??OTT_MF_9>:
 80004f8:	4628      	mov	r0, r5
 80004fa:	ed95 0a1c 	vldr	s0, [r5, #112]	; 0x70
 80004fe:	f000 fa5b 	bl	80009b8 <OTT_SpeedCtrl>
 8000502:	6828      	ldr	r0, [r5, #0]
 8000504:	f00c fe38 	bl	800d178 <SPD_GetAvrgMecSpeedUnit>
 8000508:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 800050c:	0050      	lsls	r0, r2, #1
 800050e:	f8df 3650 	ldr.w	r3, [pc, #1616]	; 8000b60 <??DataTable4_3>
 8000512:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8000514:	686a      	ldr	r2, [r5, #4]
 8000516:	fb80 6303 	smull	r6, r3, r0, r3
 800051a:	1098      	asrs	r0, r3, #2
 800051c:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8000520:	1840      	adds	r0, r0, r1
 8000522:	63e8      	str	r0, [r5, #60]	; 0x3c
 8000524:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8000526:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 800052a:	f8b5 2040 	ldrh.w	r2, [r5, #64]	; 0x40
 800052e:	f8b5 605c 	ldrh.w	r6, [r5, #92]	; 0x5c
 8000532:	18c9      	adds	r1, r1, r3
 8000534:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8000536:	1c52      	adds	r2, r2, #1
 8000538:	b297      	uxth	r7, r2
 800053a:	1c5b      	adds	r3, r3, #1
 800053c:	42be      	cmp	r6, r7
 800053e:	63a9      	str	r1, [r5, #56]	; 0x38
 8000540:	f8a5 2040 	strh.w	r2, [r5, #64]	; 0x40
 8000544:	646b      	str	r3, [r5, #68]	; 0x44
 8000546:	d2d5      	bcs.n	80004f4 <??OTT_MF_2>
 8000548:	b292      	uxth	r2, r2
 800054a:	fb90 f0f2 	sdiv	r0, r0, r2
 800054e:	f8b5 2048 	ldrh.w	r2, [r5, #72]	; 0x48
 8000552:	1a12      	subs	r2, r2, r0
 8000554:	b216      	sxth	r6, r2
 8000556:	f8a5 204a 	strh.w	r2, [r5, #74]	; 0x4a
 800055a:	2e00      	cmp	r6, #0
 800055c:	bf44      	itt	mi
 800055e:	4632      	movmi	r2, r6
 8000560:	4252      	negmi	r2, r2
 8000562:	f8a5 0048 	strh.w	r0, [r5, #72]	; 0x48
 8000566:	2600      	movs	r6, #0
 8000568:	2000      	movs	r0, #0
 800056a:	63e8      	str	r0, [r5, #60]	; 0x3c
 800056c:	f8a5 6040 	strh.w	r6, [r5, #64]	; 0x40
 8000570:	f8b5 0060 	ldrh.w	r0, [r5, #96]	; 0x60
 8000574:	4298      	cmp	r0, r3
 8000576:	db02      	blt.n	800057e <??OTT_MF_10>
 8000578:	b212      	sxth	r2, r2
 800057a:	2a04      	cmp	r2, #4
 800057c:	dcba      	bgt.n	80004f4 <??OTT_MF_2>

0800057e <??OTT_MF_10>:
 800057e:	fb91 f0f3 	sdiv	r0, r1, r3
 8000582:	82a8      	strh	r0, [r5, #20]
 8000584:	eddf 0a7f 	vldr	s1, [pc, #508]	; 8000784 <??OTT_MF_1>
 8000588:	f9b5 0048 	ldrsh.w	r0, [r5, #72]	; 0x48
 800058c:	f895 1076 	ldrb.w	r1, [r5, #118]	; 0x76
 8000590:	ee00 0a10 	vmov	s0, r0
 8000594:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8000598:	ee01 1a10 	vmov	s2, r1
 800059c:	ee60 0a20 	vmul.f32	s1, s0, s1
 80005a0:	eeb8 1a41 	vcvt.f32.u32	s2, s2
 80005a4:	ee20 1a81 	vmul.f32	s2, s1, s2
 80005a8:	ed85 1a06 	vstr	s2, [r5, #24]
 80005ac:	6828      	ldr	r0, [r5, #0]
 80005ae:	f00c fde3 	bl	800d178 <SPD_GetAvrgMecSpeedUnit>
 80005b2:	ebc0 1100 	rsb	r1, r0, r0, lsl #4
 80005b6:	0088      	lsls	r0, r1, #2
 80005b8:	f8df 25a4 	ldr.w	r2, [pc, #1444]	; 8000b60 <??DataTable4_3>
 80005bc:	f9b5 1058 	ldrsh.w	r1, [r5, #88]	; 0x58
 80005c0:	f8a5 604e 	strh.w	r6, [r5, #78]	; 0x4e
 80005c4:	fb80 3202 	smull	r3, r2, r0, r2
 80005c8:	1092      	asrs	r2, r2, #2
 80005ca:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 80005ce:	ee00 2a10 	vmov	s0, r2
 80005d2:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80005d6:	ed85 0a1c 	vstr	s0, [r5, #112]	; 0x70
 80005da:	f241 3288 	movw	r2, #5000	; 0x1388
 80005de:	4620      	mov	r0, r4
 80005e0:	f00c fc76 	bl	800ced0 <REMNG_ExecRamp>
 80005e4:	2007      	movs	r0, #7
 80005e6:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
 80005ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080005ee <??OTT_MF_11>:
 80005ee:	4620      	mov	r0, r4
 80005f0:	f00c fc2c 	bl	800ce4c <REMNG_Calc>
 80005f4:	ee00 0a10 	vmov	s0, r0
 80005f8:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80005fc:	ed85 0a1c 	vstr	s0, [r5, #112]	; 0x70
 8000600:	4628      	mov	r0, r5
 8000602:	f000 f9d9 	bl	80009b8 <OTT_SpeedCtrl>
 8000606:	4606      	mov	r6, r0
 8000608:	4620      	mov	r0, r4
 800060a:	f00c fc41 	bl	800ce90 <REMNG_RampCompleted>
 800060e:	2800      	cmp	r0, #0
 8000610:	f43f af70 	beq.w	80004f4 <??OTT_MF_2>
 8000614:	f8b5 004e 	ldrh.w	r0, [r5, #78]	; 0x4e
 8000618:	1c40      	adds	r0, r0, #1
 800061a:	2e01      	cmp	r6, #1
 800061c:	d005      	beq.n	800062a <??OTT_MF_12>
 800061e:	f8b5 1074 	ldrh.w	r1, [r5, #116]	; 0x74
 8000622:	b282      	uxth	r2, r0
 8000624:	4291      	cmp	r1, r2
 8000626:	f4bf af63 	bcs.w	80004f0 <??OTT_MF_8>

0800062a <??OTT_MF_12>:
 800062a:	2000      	movs	r0, #0
 800062c:	2108      	movs	r1, #8
 800062e:	63a8      	str	r0, [r5, #56]	; 0x38
 8000630:	63e8      	str	r0, [r5, #60]	; 0x3c
 8000632:	f8a5 0040 	strh.w	r0, [r5, #64]	; 0x40
 8000636:	6468      	str	r0, [r5, #68]	; 0x44
 8000638:	f8a5 0048 	strh.w	r0, [r5, #72]	; 0x48
 800063c:	f885 1034 	strb.w	r1, [r5, #52]	; 0x34
 8000640:	e756      	b.n	80004f0 <??OTT_MF_8>

08000642 <??OTT_MF_13>:
 8000642:	ed95 0a1c 	vldr	s0, [r5, #112]	; 0x70
 8000646:	4628      	mov	r0, r5
 8000648:	f000 f9b6 	bl	80009b8 <OTT_SpeedCtrl>
 800064c:	6828      	ldr	r0, [r5, #0]
 800064e:	f00c fd93 	bl	800d178 <SPD_GetAvrgMecSpeedUnit>
 8000652:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8000656:	0050      	lsls	r0, r2, #1
 8000658:	f8df 3504 	ldr.w	r3, [pc, #1284]	; 8000b60 <??DataTable4_3>
 800065c:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 800065e:	686a      	ldr	r2, [r5, #4]
 8000660:	fb80 4303 	smull	r4, r3, r0, r3
 8000664:	1098      	asrs	r0, r3, #2
 8000666:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800066a:	1840      	adds	r0, r0, r1
 800066c:	63e8      	str	r0, [r5, #60]	; 0x3c
 800066e:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8000670:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 8000674:	f8b5 2040 	ldrh.w	r2, [r5, #64]	; 0x40
 8000678:	f8b5 405c 	ldrh.w	r4, [r5, #92]	; 0x5c
 800067c:	18c9      	adds	r1, r1, r3
 800067e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8000680:	1c52      	adds	r2, r2, #1
 8000682:	b296      	uxth	r6, r2
 8000684:	1c5b      	adds	r3, r3, #1
 8000686:	42b4      	cmp	r4, r6
 8000688:	63a9      	str	r1, [r5, #56]	; 0x38
 800068a:	f8a5 2040 	strh.w	r2, [r5, #64]	; 0x40
 800068e:	646b      	str	r3, [r5, #68]	; 0x44
 8000690:	f4bf af30 	bcs.w	80004f4 <??OTT_MF_2>
 8000694:	b292      	uxth	r2, r2
 8000696:	fb90 f0f2 	sdiv	r0, r0, r2
 800069a:	f8b5 2048 	ldrh.w	r2, [r5, #72]	; 0x48
 800069e:	1a12      	subs	r2, r2, r0
 80006a0:	b214      	sxth	r4, r2
 80006a2:	f8a5 204a 	strh.w	r2, [r5, #74]	; 0x4a
 80006a6:	2c00      	cmp	r4, #0
 80006a8:	bf44      	itt	mi
 80006aa:	4622      	movmi	r2, r4
 80006ac:	4252      	negmi	r2, r2
 80006ae:	f8a5 0048 	strh.w	r0, [r5, #72]	; 0x48
 80006b2:	2400      	movs	r4, #0
 80006b4:	2000      	movs	r0, #0
 80006b6:	63e8      	str	r0, [r5, #60]	; 0x3c
 80006b8:	f8a5 4040 	strh.w	r4, [r5, #64]	; 0x40
 80006bc:	f8b5 0060 	ldrh.w	r0, [r5, #96]	; 0x60
 80006c0:	4298      	cmp	r0, r3
 80006c2:	db03      	blt.n	80006cc <??OTT_MF_14>
 80006c4:	b212      	sxth	r2, r2
 80006c6:	2a04      	cmp	r2, #4
 80006c8:	f73f af14 	bgt.w	80004f4 <??OTT_MF_2>

080006cc <??OTT_MF_14>:
 80006cc:	fb91 f0f3 	sdiv	r0, r1, r3
 80006d0:	82e8      	strh	r0, [r5, #22]
 80006d2:	eddf 0a2c 	vldr	s1, [pc, #176]	; 8000784 <??OTT_MF_1>
 80006d6:	f9b5 0048 	ldrsh.w	r0, [r5, #72]	; 0x48
 80006da:	f895 1076 	ldrb.w	r1, [r5, #118]	; 0x76
 80006de:	ee00 0a10 	vmov	s0, r0
 80006e2:	f9b5 0014 	ldrsh.w	r0, [r5, #20]
 80006e6:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80006ea:	ee01 1a10 	vmov	s2, r1
 80006ee:	f9b5 1016 	ldrsh.w	r1, [r5, #22]
 80006f2:	ee60 0a20 	vmul.f32	s1, s0, s1
 80006f6:	eeb8 1a41 	vcvt.f32.u32	s2, s2
 80006fa:	ee20 0a81 	vmul.f32	s0, s1, s2
 80006fe:	ee00 0a90 	vmov	s1, r0
 8000702:	ee01 1a10 	vmov	s2, r1
 8000706:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 800070a:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 800070e:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8000712:	ed85 0a07 	vstr	s0, [r5, #28]
 8000716:	edd5 0a06 	vldr	s1, [r5, #24]
 800071a:	ee30 0ac0 	vsub.f32	s0, s1, s0
 800071e:	ee81 0a00 	vdiv.f32	s0, s2, s0
 8000722:	eddf 0a88 	vldr	s1, [pc, #544]	; 8000944 <??DataTable1>
 8000726:	eeb4 0a60 	vcmp.f32	s0, s1
 800072a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800072e:	bf48      	it	mi
 8000730:	eeb0 0a60 	vmovmi.f32	s0, s1
 8000734:	ed85 0a08 	vstr	s0, [r5, #32]
 8000738:	ed95 0a06 	vldr	s0, [r5, #24]
 800073c:	edd5 0a07 	vldr	s1, [r5, #28]
 8000740:	ee70 0a60 	vsub.f32	s1, s0, s1
 8000744:	ed9f 1a80 	vldr	s2, [pc, #512]	; 8000948 <??DataTable1_1>
 8000748:	ee20 0a81 	vmul.f32	s0, s1, s2
 800074c:	f9b5 1014 	ldrsh.w	r1, [r5, #20]
 8000750:	f9b5 2016 	ldrsh.w	r2, [r5, #22]
 8000754:	edd5 0a07 	vldr	s1, [r5, #28]
 8000758:	68e8      	ldr	r0, [r5, #12]
 800075a:	ed85 0a09 	vstr	s0, [r5, #36]	; 0x24
 800075e:	ee30 0a20 	vadd.f32	s0, s0, s1
 8000762:	428a      	cmp	r2, r1
 8000764:	ed85 0a09 	vstr	s0, [r5, #36]	; 0x24
 8000768:	4622      	mov	r2, r4
 800076a:	bfa8      	it	ge
 800076c:	f9b5 1078 	ldrshge.w	r1, [r5, #120]	; 0x78
 8000770:	f00c fd74 	bl	800d25c <STC_ExecRamp>
 8000774:	f8a5 404e 	strh.w	r4, [r5, #78]	; 0x4e
 8000778:	2109      	movs	r1, #9
 800077a:	f885 1034 	strb.w	r1, [r5, #52]	; 0x34
 800077e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000782:	bf00      	nop

08000784 <??OTT_MF_1>:
 8000784:	c49c 3f20                                   .. ?

08000788 <??OTT_MF_15>:
 8000788:	f8b5 004e 	ldrh.w	r0, [r5, #78]	; 0x4e
 800078c:	1c40      	adds	r0, r0, #1
 800078e:	f8a5 004e 	strh.w	r0, [r5, #78]	; 0x4e
 8000792:	6828      	ldr	r0, [r5, #0]
 8000794:	f00c fcf0 	bl	800d178 <SPD_GetAvrgMecSpeedUnit>
 8000798:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 800079c:	0050      	lsls	r0, r2, #1
 800079e:	f8df 33c0 	ldr.w	r3, [pc, #960]	; 8000b60 <??DataTable4_3>
 80007a2:	f895 1076 	ldrb.w	r1, [r5, #118]	; 0x76
 80007a6:	edd5 1a09 	vldr	s3, [r5, #36]	; 0x24
 80007aa:	fb80 4303 	smull	r4, r3, r0, r3
 80007ae:	109b      	asrs	r3, r3, #2
 80007b0:	ee00 1a10 	vmov	s0, r1
 80007b4:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80007b8:	eef8 0a40 	vcvt.f32.u32	s1, s0
 80007bc:	ee01 3a10 	vmov	s2, r3
 80007c0:	ed9f 0ad8 	vldr	s0, [pc, #864]	; 8000b24 <??DataTable3>
 80007c4:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 80007c8:	ee21 1a00 	vmul.f32	s2, s2, s0
 80007cc:	ee21 1a20 	vmul.f32	s2, s2, s1
 80007d0:	eeb4 1a61 	vcmp.f32	s2, s3
 80007d4:	f8b5 104e 	ldrh.w	r1, [r5, #78]	; 0x4e
 80007d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007dc:	da06      	bge.n	80007ec <??OTT_MF_16>
 80007de:	f8b5 0074 	ldrh.w	r0, [r5, #116]	; 0x74
 80007e2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80007e6:	4288      	cmp	r0, r1
 80007e8:	f6bf ae84 	bge.w	80004f4 <??OTT_MF_2>

080007ec <??OTT_MF_16>:
 80007ec:	eeb6 2a00 	vmov.f32	s4, #96	; 0x3f000000  0.5
 80007f0:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
 80007f4:	68ae      	ldr	r6, [r5, #8]
 80007f6:	edd0 1a00 	vldr	s3, [r0]
 80007fa:	eef3 2a0e 	vmov.f32	s5, #62	; 0x41f00000  30.0
 80007fe:	ee01 1a10 	vmov	s2, r1
 8000802:	eeb8 1a41 	vcvt.f32.u32	s2, s2
 8000806:	eef8 1a61 	vcvt.f32.u32	s3, s3
 800080a:	ee81 1a21 	vdiv.f32	s2, s2, s3
 800080e:	ee82 2a01 	vdiv.f32	s4, s4, s2
 8000812:	ee62 1a22 	vmul.f32	s3, s4, s5
 8000816:	edc5 1a0c 	vstr	s3, [r5, #48]	; 0x30
 800081a:	ed85 1a0a 	vstr	s2, [r5, #40]	; 0x28
 800081e:	2110      	movs	r1, #16
 8000820:	ed95 2a08 	vldr	s4, [r5, #32]
 8000824:	ee21 2a02 	vmul.f32	s4, s2, s4
 8000828:	ee62 1a21 	vmul.f32	s3, s4, s3
 800082c:	ee21 0a80 	vmul.f32	s0, s3, s0
 8000830:	ee20 0a20 	vmul.f32	s0, s0, s1
 8000834:	ed85 2a0b 	vstr	s4, [r5, #44]	; 0x2c
 8000838:	ed85 0a19 	vstr	s0, [r5, #100]	; 0x64
 800083c:	eec0 0a01 	vdiv.f32	s1, s0, s2
 8000840:	ed90 1a00 	vldr	s2, [r0]
 8000844:	eeb8 1a41 	vcvt.f32.u32	s2, s2
 8000848:	eec0 0a81 	vdiv.f32	s1, s1, s2
 800084c:	edc5 0a1a 	vstr	s1, [r5, #104]	; 0x68
 8000850:	2710      	movs	r7, #16
 8000852:	f04f 0800 	mov.w	r8, #0
 8000856:	200f      	movs	r0, #15
 8000858:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800085c:	f05f 0301 	movs.w	r3, #1

08000860 <??OTT_MF_17>:
 8000860:	fa03 f400 	lsl.w	r4, r3, r0
 8000864:	ee01 4a10 	vmov	s2, r4
 8000868:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 800086c:	ee21 1a00 	vmul.f32	s2, s2, s0
 8000870:	eebd 1ac1 	vcvt.s32.f32	s2, s2
 8000874:	ee11 4a10 	vmov	r4, s2
 8000878:	4294      	cmp	r4, r2
 800087a:	da06      	bge.n	800088a <??OTT_MF_18>
 800087c:	4601      	mov	r1, r0
 800087e:	e004      	b.n	800088a <??OTT_MF_18>

08000880 <??OTT_MF_19>:
 8000880:	fa1f fc81 	uxth.w	ip, r1
 8000884:	f1bc 0f10 	cmp.w	ip, #16
 8000888:	d0ea      	beq.n	8000860 <??OTT_MF_17>

0800088a <??OTT_MF_18>:
 800088a:	fa1f fc87 	uxth.w	ip, r7
 800088e:	f1bc 0f10 	cmp.w	ip, #16
 8000892:	d10e      	bne.n	80008b2 <??OTT_MF_20>
 8000894:	fa03 fc00 	lsl.w	ip, r3, r0
 8000898:	ee01 ca10 	vmov	s2, ip
 800089c:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 80008a0:	ee21 1a20 	vmul.f32	s2, s2, s1
 80008a4:	eebd 1ac1 	vcvt.s32.f32	s2, s2
 80008a8:	ee11 8a10 	vmov	r8, s2
 80008ac:	4590      	cmp	r8, r2
 80008ae:	bfb8      	it	lt
 80008b0:	4607      	movlt	r7, r0

080008b2 <??OTT_MF_20>:
 80008b2:	1e40      	subs	r0, r0, #1
 80008b4:	d5e4      	bpl.n	8000880 <??OTT_MF_19>
 80008b6:	b288      	uxth	r0, r1
 80008b8:	2810      	cmp	r0, #16
 80008ba:	d007      	beq.n	80008cc <??OTT_MF_21>
 80008bc:	b289      	uxth	r1, r1
 80008be:	4630      	mov	r0, r6
 80008c0:	f00b fa10 	bl	800bce4 <PID_SetKPDivisorPOW2>
 80008c4:	b221      	sxth	r1, r4
 80008c6:	4630      	mov	r0, r6
 80008c8:	f00b f9fc 	bl	800bcc4 <PID_SetKP>

080008cc <??OTT_MF_21>:
 80008cc:	b2b8      	uxth	r0, r7
 80008ce:	2810      	cmp	r0, #16
 80008d0:	d008      	beq.n	80008e4 <??OTT_MF_22>
 80008d2:	b2b9      	uxth	r1, r7
 80008d4:	4630      	mov	r0, r6
 80008d6:	f00b fa13 	bl	800bd00 <PID_SetKIDivisorPOW2>
 80008da:	fa0f f188 	sxth.w	r1, r8
 80008de:	4630      	mov	r0, r6
 80008e0:	f00b f9f2 	bl	800bcc8 <PID_SetKI>

080008e4 <??OTT_MF_22>:
 80008e4:	f9b5 1078 	ldrsh.w	r1, [r5, #120]	; 0x78
 80008e8:	4630      	mov	r0, r6
 80008ea:	f00b fa1f 	bl	800bd2c <PID_SetUpperOutputLimit>
 80008ee:	f8b5 1078 	ldrh.w	r1, [r5, #120]	; 0x78
 80008f2:	4249      	negs	r1, r1
 80008f4:	b209      	sxth	r1, r1
 80008f6:	4630      	mov	r0, r6
 80008f8:	f00b fa16 	bl	800bd28 <PID_SetLowerOutputLimit>
 80008fc:	4630      	mov	r0, r6
 80008fe:	f00b f9f7 	bl	800bcf0 <PID_GetKIDivisor>
 8000902:	4604      	mov	r4, r0
 8000904:	f8b5 0078 	ldrh.w	r0, [r5, #120]	; 0x78
 8000908:	4344      	muls	r4, r0
 800090a:	4621      	mov	r1, r4
 800090c:	4630      	mov	r0, r6
 800090e:	f00b f9f5 	bl	800bcfc <PID_SetUpperIntegralTermLimit>
 8000912:	4264      	negs	r4, r4
 8000914:	4621      	mov	r1, r4
 8000916:	4630      	mov	r0, r6
 8000918:	f00b f9ee 	bl	800bcf8 <PID_SetLowerIntegralTermLimit>
 800091c:	2001      	movs	r0, #1
 800091e:	f885 0062 	strb.w	r0, [r5, #98]	; 0x62
 8000922:	2103      	movs	r1, #3
 8000924:	68e8      	ldr	r0, [r5, #12]
 8000926:	f00c fc95 	bl	800d254 <STC_SetControlMode>
 800092a:	6828      	ldr	r0, [r5, #0]
 800092c:	f00c fc24 	bl	800d178 <SPD_GetAvrgMecSpeedUnit>
 8000930:	4601      	mov	r1, r0
 8000932:	68e8      	ldr	r0, [r5, #12]
 8000934:	2200      	movs	r2, #0
 8000936:	f00c fc91 	bl	800d25c <STC_ExecRamp>
 800093a:	200a      	movs	r0, #10
 800093c:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
 8000940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000944 <??DataTable1>:
 8000944:	d70a 3c23                                   ..#<

08000948 <??DataTable1_1>:
 8000948:	47ae 3f21                                   .G!?

0800094c <OTT_SR>:
 800094c:	b510      	push	{r4, lr}
 800094e:	4604      	mov	r4, r0
 8000950:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
 8000954:	b9b0      	cbnz	r0, 8000984 <??OTT_SR_0>
 8000956:	6860      	ldr	r0, [r4, #4]
 8000958:	2100      	movs	r1, #0
 800095a:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 800095e:	2104      	movs	r1, #4
 8000960:	68e0      	ldr	r0, [r4, #12]
 8000962:	f00c fc77 	bl	800d254 <STC_SetControlMode>
 8000966:	6860      	ldr	r0, [r4, #4]
 8000968:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
 800096c:	68e0      	ldr	r0, [r4, #12]
 800096e:	2200      	movs	r2, #0
 8000970:	f00c fc74 	bl	800d25c <STC_ExecRamp>
 8000974:	68e0      	ldr	r0, [r4, #12]
 8000976:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800097a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800097e:	2100      	movs	r1, #0
 8000980:	f00c bc6c 	b.w	800d25c <STC_ExecRamp>

08000984 <??OTT_SR_0>:
 8000984:	bd10      	pop	{r4, pc}

08000986 <OTT_ForceTuning>:
 8000986:	2100      	movs	r1, #0
 8000988:	f880 1062 	strb.w	r1, [r0, #98]	; 0x62
 800098c:	4770      	bx	lr

0800098e <OTT_GetNominalSpeed>:
 800098e:	ed90 0a14 	vldr	s0, [r0, #80]	; 0x50
 8000992:	f004 bc41 	b.w	8005218 <MCM_floatToIntBit>

08000996 <OTT_GetSteps>:
 8000996:	200b      	movs	r0, #11
 8000998:	4770      	bx	lr

0800099a <OTT_GetState>:
 800099a:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 800099e:	4770      	bx	lr

080009a0 <OTT_IsSpeedPITuned>:
 80009a0:	4601      	mov	r1, r0
 80009a2:	2000      	movs	r0, #0
 80009a4:	f891 1034 	ldrb.w	r1, [r1, #52]	; 0x34
 80009a8:	290a      	cmp	r1, #10
 80009aa:	bf08      	it	eq
 80009ac:	2001      	moveq	r0, #1
 80009ae:	4770      	bx	lr

080009b0 <OTT_fGetNominalSpeedRPM>:
 80009b0:	ed90 0a14 	vldr	s0, [r0, #80]	; 0x50
 80009b4:	4770      	bx	lr
	...

080009b8 <OTT_SpeedCtrl>:
 80009b8:	b530      	push	{r4, r5, lr}
 80009ba:	4604      	mov	r4, r0
 80009bc:	b081      	sub	sp, #4
 80009be:	2500      	movs	r5, #0
 80009c0:	ed2d 8b04 	vpush	{d8-d9}
 80009c4:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 80009c8:	edd0 8a0e 	vldr	s17, [r0, #56]	; 0x38
 80009cc:	6820      	ldr	r0, [r4, #0]
 80009ce:	eeb0 8a40 	vmov.f32	s16, s0
 80009d2:	f00c fbd1 	bl	800d178 <SPD_GetAvrgMecSpeedUnit>
 80009d6:	ebc0 1100 	rsb	r1, r0, r0, lsl #4
 80009da:	0089      	lsls	r1, r1, #2
 80009dc:	4860      	ldr	r0, [pc, #384]	; (8000b60 <??DataTable4_3>)
 80009de:	ed94 1a22 	vldr	s2, [r4, #136]	; 0x88
 80009e2:	edd4 0a21 	vldr	s1, [r4, #132]	; 0x84
 80009e6:	fb81 2000 	smull	r2, r0, r1, r0
 80009ea:	1080      	asrs	r0, r0, #2
 80009ec:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80009f0:	ee00 0a10 	vmov	s0, r0
 80009f4:	eeb8 9ac0 	vcvt.f32.s32	s18, s0
 80009f8:	ee38 0a49 	vsub.f32	s0, s16, s18
 80009fc:	eeb5 1a40 	vcmp.f32	s2, #0.0
 8000a00:	ee60 0a80 	vmul.f32	s1, s1, s0
 8000a04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a08:	bf08      	it	eq
 8000a0a:	ed9f 0a52 	vldreq	s0, [pc, #328]	; 8000b54 <??DataTable4>
 8000a0e:	d009      	beq.n	8000a24 <??OTT_SpeedCtrl_0>
 8000a10:	edd4 1a25 	vldr	s3, [r4, #148]	; 0x94
 8000a14:	ee70 1a61 	vsub.f32	s3, s0, s3
 8000a18:	ed94 0a24 	vldr	s0, [r4, #144]	; 0x90
 8000a1c:	ee01 0a81 	vmla.f32	s0, s3, s2
 8000a20:	ee70 0a80 	vadd.f32	s1, s1, s0

08000a24 <??OTT_SpeedCtrl_0>:
 8000a24:	f8b4 0078 	ldrh.w	r0, [r4, #120]	; 0x78
 8000a28:	ed84 0a24 	vstr	s0, [r4, #144]	; 0x90
 8000a2c:	4601      	mov	r1, r0
 8000a2e:	ee01 1a10 	vmov	s2, r1
 8000a32:	eeb8 1a41 	vcvt.f32.u32	s2, s2
 8000a36:	eeb4 1a60 	vcmp.f32	s2, s1
 8000a3a:	eeb0 0a60 	vmov.f32	s0, s1
 8000a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a42:	bf48      	it	mi
 8000a44:	eeb0 0a41 	vmovmi.f32	s0, s2
 8000a48:	4240      	negs	r0, r0
 8000a4a:	ee01 0a10 	vmov	s2, r0
 8000a4e:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8000a52:	eef4 0a41 	vcmp.f32	s1, s2
 8000a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a5a:	bf48      	it	mi
 8000a5c:	eeb0 0a41 	vmovmi.f32	s0, s2
 8000a60:	ee70 0ac0 	vsub.f32	s1, s1, s0
 8000a64:	edd4 1a23 	vldr	s3, [r4, #140]	; 0x8c
 8000a68:	68e0      	ldr	r0, [r4, #12]
 8000a6a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8000a6e:	ee60 0aa1 	vmul.f32	s1, s1, s3
 8000a72:	ee10 1a10 	vmov	r1, s0
 8000a76:	edc4 0a25 	vstr	s1, [r4, #148]	; 0x94
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	b209      	sxth	r1, r1
 8000a7e:	f00c fbed 	bl	800d25c <STC_ExecRamp>
 8000a82:	ee28 0a28 	vmul.f32	s0, s16, s17
 8000a86:	eeb4 9a40 	vcmp.f32	s18, s0
 8000a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a8e:	d41e      	bmi.n	8000ace <??OTT_SpeedCtrl_1>
 8000a90:	eeb4 9a48 	vcmp.f32	s18, s16
 8000a94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a98:	d40a      	bmi.n	8000ab0 <??OTT_SpeedCtrl_2>
 8000a9a:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8000a9e:	ee30 0a68 	vsub.f32	s0, s0, s17
 8000aa2:	ee20 0a08 	vmul.f32	s0, s0, s16
 8000aa6:	eeb4 9a40 	vcmp.f32	s18, s0
 8000aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000aae:	d50e      	bpl.n	8000ace <??OTT_SpeedCtrl_1>

08000ab0 <??OTT_SpeedCtrl_2>:
 8000ab0:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 8000ab4:	1c40      	adds	r0, r0, #1
 8000ab6:	b241      	sxtb	r1, r0
 8000ab8:	2914      	cmp	r1, #20
 8000aba:	bfa4      	itt	ge
 8000abc:	2014      	movge	r0, #20
 8000abe:	2501      	movge	r5, #1
 8000ac0:	f884 006c 	strb.w	r0, [r4, #108]	; 0x6c
 8000ac4:	4628      	mov	r0, r5
 8000ac6:	ecbd 8b04 	vpop	{d8-d9}
 8000aca:	b001      	add	sp, #4
 8000acc:	bd30      	pop	{r4, r5, pc}

08000ace <??OTT_SpeedCtrl_1>:
 8000ace:	2000      	movs	r0, #0
 8000ad0:	f884 006c 	strb.w	r0, [r4, #108]	; 0x6c
 8000ad4:	4628      	mov	r0, r5
 8000ad6:	ecbd 8b04 	vpop	{d8-d9}
 8000ada:	b001      	add	sp, #4
 8000adc:	bd30      	pop	{r4, r5, pc}

08000ade <OTT_SetPolesPairs>:
 8000ade:	f880 1076 	strb.w	r1, [r0, #118]	; 0x76
 8000ae2:	4770      	bx	lr

08000ae4 <OTT_SetNominalCurrent>:
 8000ae4:	f8a0 1078 	strh.w	r1, [r0, #120]	; 0x78
 8000ae8:	4770      	bx	lr

08000aea <OTT_SetSpeedRegulatorBandwidth>:
 8000aea:	ed80 0a0c 	vstr	s0, [r0, #48]	; 0x30
 8000aee:	4770      	bx	lr

08000af0 <OTT_GetSpeedRegulatorBandwidth>:
 8000af0:	ed90 0a0c 	vldr	s0, [r0, #48]	; 0x30
 8000af4:	4770      	bx	lr
	...

08000af8 <OTT_GetJ>:
 8000af8:	f8d0 109c 	ldr.w	r1, [r0, #156]	; 0x9c
 8000afc:	ed90 0a0b 	vldr	s0, [r0, #44]	; 0x2c
 8000b00:	ed90 1a26 	vldr	s2, [r0, #152]	; 0x98
 8000b04:	eddf 0a14 	vldr	s1, [pc, #80]	; 8000b58 <??DataTable4_1>
 8000b08:	ee60 0a20 	vmul.f32	s1, s0, s1
 8000b0c:	ee20 1a81 	vmul.f32	s2, s1, s2
 8000b10:	ed91 0a13 	vldr	s0, [r1, #76]	; 0x4c
 8000b14:	edd1 0a14 	vldr	s1, [r1, #80]	; 0x50
 8000b18:	ee60 0a20 	vmul.f32	s1, s0, s1
 8000b1c:	ee81 0a20 	vdiv.f32	s0, s2, s1
 8000b20:	4770      	bx	lr
	...

08000b24 <??DataTable3>:
 8000b24:	c49c 3f20                                   .. ?

08000b28 <OTT_GetF>:
 8000b28:	f8d0 109c 	ldr.w	r1, [r0, #156]	; 0x9c
 8000b2c:	ed90 0a08 	vldr	s0, [r0, #32]
 8000b30:	ed90 1a26 	vldr	s2, [r0, #152]	; 0x98
 8000b34:	eddf 0a08 	vldr	s1, [pc, #32]	; 8000b58 <??DataTable4_1>
 8000b38:	ee60 0a20 	vmul.f32	s1, s0, s1
 8000b3c:	ee20 1a81 	vmul.f32	s2, s1, s2
 8000b40:	ed91 0a13 	vldr	s0, [r1, #76]	; 0x4c
 8000b44:	edd1 0a14 	vldr	s1, [r1, #80]	; 0x50
 8000b48:	ee60 0a20 	vmul.f32	s1, s0, s1
 8000b4c:	ee81 0a20 	vdiv.f32	s0, s2, s1
 8000b50:	4770      	bx	lr
	...

08000b54 <??DataTable4>:
 8000b54:	0000 0000                                   ....

08000b58 <??DataTable4_1>:
 8000b58:	15cb 351e                                   ...5

08000b5c <??DataTable4_2>:
 8000b5c:	0214 2000                                   ... 

08000b60 <??DataTable4_3>:
 8000b60:	6667 6666                                   gfff

08000b64 <OTT_SetNominalSpeed>:
 8000b64:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
 8000b68:	4770      	bx	lr

08000b6a <OTT_SetKe>:
 8000b6a:	ed80 0a26 	vstr	s0, [r0, #152]	; 0x98
 8000b6e:	4770      	bx	lr

08000b70 <OTT_IsMotorAlreadyProfiled>:
 8000b70:	f890 0062 	ldrb.w	r0, [r0, #98]	; 0x62
 8000b74:	4770      	bx	lr
	...

08000b78 <SCC_Init>:
 8000b78:	b530      	push	{r4, r5, lr}
 8000b7a:	4604      	mov	r4, r0
 8000b7c:	b081      	sub	sp, #4
 8000b7e:	f8df 0438 	ldr.w	r0, [pc, #1080]	; 8000fb8 <??DataTable4_3>
 8000b82:	63a0      	str	r0, [r4, #56]	; 0x38
 8000b84:	f44f 75fa 	mov.w	r5, #500	; 0x1f4
 8000b88:	f00c f958 	bl	800ce3c <REMNG_Init>
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
 8000b92:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
 8000b96:	4620      	mov	r0, r4
 8000b98:	f000 f8f0 	bl	8000d7c <SCC_InitKeDetRevup>
 8000b9c:	f8d4 1548 	ldr.w	r1, [r4, #1352]	; 0x548
 8000ba0:	2000      	movs	r0, #0
 8000ba2:	f884 0128 	strb.w	r0, [r4, #296]	; 0x128
 8000ba6:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000baa:	ed91 0a00 	vldr	s0, [r1]
 8000bae:	6920      	ldr	r0, [r4, #16]
 8000bb0:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8000bb4:	eec0 0a80 	vdiv.f32	s1, s1, s0
 8000bb8:	ed84 0a11 	vstr	s0, [r4, #68]	; 0x44
 8000bbc:	edc4 0a10 	vstr	s1, [r4, #64]	; 0x40
 8000bc0:	f00c fb1a 	bl	800d1f8 <SPD_GetElToMecRatio>
 8000bc4:	ee00 0a10 	vmov	s0, r0
 8000bc8:	f8d4 0548 	ldr.w	r0, [r4, #1352]	; 0x548
 8000bcc:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8000bd0:	ed84 0a12 	vstr	s0, [r4, #72]	; 0x48
 8000bd4:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8000bd8:	ed90 0a13 	vldr	s0, [r0, #76]	; 0x4c
 8000bdc:	ed90 1a09 	vldr	s2, [r0, #36]	; 0x24
 8000be0:	ee60 0a20 	vmul.f32	s1, s0, s1
 8000be4:	ee80 1a81 	vdiv.f32	s2, s1, s2
 8000be8:	eebd 1ac1 	vcvt.s32.f32	s2, s2
 8000bec:	ee11 1a10 	vmov	r1, s2
 8000bf0:	f8a4 104c 	strh.w	r1, [r4, #76]	; 0x4c
 8000bf4:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8000bf8:	ed90 0a06 	vldr	s0, [r0, #24]
 8000bfc:	ed90 1a07 	vldr	s2, [r0, #28]
 8000c00:	ee60 0a20 	vmul.f32	s1, s0, s1
 8000c04:	ee20 1a81 	vmul.f32	s2, s1, s2
 8000c08:	ed90 0a13 	vldr	s0, [r0, #76]	; 0x4c
 8000c0c:	ee80 0a01 	vdiv.f32	s0, s0, s2
 8000c10:	ed84 0a14 	vstr	s0, [r4, #80]	; 0x50
 8000c14:	eef5 0a00 	vmov.f32	s1, #80	; 0x3e800000  0.250
 8000c18:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8000c1a:	6561      	str	r1, [r4, #84]	; 0x54
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	ed90 0a0b 	vldr	s0, [r0, #44]	; 0x2c
 8000c22:	ee60 0a20 	vmul.f32	s1, s0, s1
 8000c26:	edc4 0a17 	vstr	s1, [r4, #92]	; 0x5c
 8000c2a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8000c2c:	65a0      	str	r0, [r4, #88]	; 0x58
 8000c2e:	6621      	str	r1, [r4, #96]	; 0x60
 8000c30:	6661      	str	r1, [r4, #100]	; 0x64
 8000c32:	66a1      	str	r1, [r4, #104]	; 0x68
 8000c34:	66e1      	str	r1, [r4, #108]	; 0x6c
 8000c36:	f884 1090 	strb.w	r1, [r4, #144]	; 0x90
 8000c3a:	f8c4 1094 	str.w	r1, [r4, #148]	; 0x94
 8000c3e:	f8c4 1098 	str.w	r1, [r4, #152]	; 0x98
 8000c42:	f884 109c 	strb.w	r1, [r4, #156]	; 0x9c
 8000c46:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
 8000c4a:	f8c4 10a4 	str.w	r1, [r4, #164]	; 0xa4
 8000c4e:	f8c4 10a8 	str.w	r1, [r4, #168]	; 0xa8
 8000c52:	f8c4 10ac 	str.w	r1, [r4, #172]	; 0xac
 8000c56:	f8c4 10b0 	str.w	r1, [r4, #176]	; 0xb0
 8000c5a:	f8c4 10b4 	str.w	r1, [r4, #180]	; 0xb4
 8000c5e:	f8c4 10b8 	str.w	r1, [r4, #184]	; 0xb8
 8000c62:	f884 1540 	strb.w	r1, [r4, #1344]	; 0x540
 8000c66:	4620      	mov	r0, r4
 8000c68:	f001 fb10 	bl	800228c <SCC_KeDetectionInit>
 8000c6c:	2000      	movs	r0, #0
 8000c6e:	f8c4 00d0 	str.w	r0, [r4, #208]	; 0xd0
 8000c72:	f8c4 00d4 	str.w	r0, [r4, #212]	; 0xd4
 8000c76:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
 8000c7a:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc
 8000c7e:	eddf 0a3e 	vldr	s1, [pc, #248]	; 8000d78 <??DataTable3>
 8000c82:	f8d4 0548 	ldr.w	r0, [r4, #1352]	; 0x548
 8000c86:	4acd      	ldr	r2, [pc, #820]	; (8000fbc <??DataTable4_4>)
 8000c88:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8000c8a:	f8c4 10e0 	str.w	r1, [r4, #224]	; 0xe0
 8000c8e:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8000c90:	fb81 3202 	smull	r3, r2, r1, r2
 8000c94:	ee00 1a10 	vmov	s0, r1
 8000c98:	1092      	asrs	r2, r2, #2
 8000c9a:	f8c4 10e4 	str.w	r1, [r4, #228]	; 0xe4
 8000c9e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8000ca2:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8000ca6:	ee60 0a20 	vmul.f32	s1, s0, s1
 8000caa:	f8c4 20ec 	str.w	r2, [r4, #236]	; 0xec
 8000cae:	eefd 0ae0 	vcvt.s32.f32	s1, s1
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	f8c4 50ec 	str.w	r5, [r4, #236]	; 0xec
 8000cb8:	edc4 0a3a 	vstr	s1, [r4, #232]	; 0xe8
 8000cbc:	f8a4 1130 	strh.w	r1, [r4, #304]	; 0x130
 8000cc0:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8000cc2:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
 8000cc6:	f884 1138 	strb.w	r1, [r4, #312]	; 0x138
 8000cca:	f884 1541 	strb.w	r1, [r4, #1345]	; 0x541
 8000cce:	b001      	add	sp, #4
 8000cd0:	bd30      	pop	{r4, r5, pc}
	...

08000cd4 <SCC_CMD>:
 8000cd4:	b530      	push	{r4, r5, lr}
 8000cd6:	b081      	sub	sp, #4
 8000cd8:	4605      	mov	r5, r0
 8000cda:	7810      	ldrb	r0, [r2, #0]
 8000cdc:	2400      	movs	r4, #0
 8000cde:	2806      	cmp	r0, #6
 8000ce0:	d834      	bhi.n	8000d4c <??SCC_CMD_1>
 8000ce2:	e8df f000 	tbb	[pc, r0]

08000ce6 <??SCC_CMD_0>:
 8000ce6:	0419 231f 2d28 000b                         ...#(-..

08000cee <??SCC_CMD_2>:
 8000cee:	49b4      	ldr	r1, [pc, #720]	; (8000fc0 <??DataTable4_5>)
 8000cf0:	f891 0034 	ldrb.w	r0, [r1, #52]	; 0x34
 8000cf4:	b128      	cbz	r0, 8000d02 <??SCC_CMD_3>
 8000cf6:	280a      	cmp	r0, #10
 8000cf8:	d128      	bne.n	8000d4c <??SCC_CMD_1>
 8000cfa:	e002      	b.n	8000d02 <??SCC_CMD_3>

08000cfc <??SCC_CMD_4>:
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	f885 0541 	strb.w	r0, [r5, #1345]	; 0x541

08000d02 <??SCC_CMD_3>:
 8000d02:	4628      	mov	r0, r5
 8000d04:	f001 fa15 	bl	8002132 <SCC_ForceProfile>
 8000d08:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8000d0a:	f7ff fe3c 	bl	8000986 <OTT_ForceTuning>
 8000d0e:	f004 f81b 	bl	8004d48 <MC_AcknowledgeFaultMotor1>
 8000d12:	f003 fff5 	bl	8004d00 <MC_StartMotor1>
 8000d16:	e01a      	b.n	8000d4e <??SCC_CMD_5>

08000d18 <??SCC_CMD_6>:
 8000d18:	4628      	mov	r0, r5
 8000d1a:	f000 f86d 	bl	8000df8 <SCC_Stop>
 8000d1e:	f003 fff5 	bl	8004d0c <MC_StopMotor1>
 8000d22:	e014      	b.n	8000d4e <??SCC_CMD_5>

08000d24 <??SCC_CMD_7>:
 8000d24:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8000d26:	b188      	cbz	r0, 8000d4c <??SCC_CMD_1>
 8000d28:	2101      	movs	r1, #1
 8000d2a:	e00c      	b.n	8000d46 <??SCC_CMD_8>

08000d2c <??SCC_CMD_9>:
 8000d2c:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8000d2e:	b168      	cbz	r0, 8000d4c <??SCC_CMD_1>
 8000d30:	f002 fbae 	bl	8003490 <HT_SetRestart>
 8000d34:	e00b      	b.n	8000d4e <??SCC_CMD_5>

08000d36 <??SCC_CMD_10>:
 8000d36:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8000d38:	b140      	cbz	r0, 8000d4c <??SCC_CMD_1>
 8000d3a:	f002 fbac 	bl	8003496 <HT_SetAbort>
 8000d3e:	e006      	b.n	8000d4e <??SCC_CMD_5>

08000d40 <??SCC_CMD_11>:
 8000d40:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8000d42:	b118      	cbz	r0, 8000d4c <??SCC_CMD_1>
 8000d44:	2100      	movs	r1, #0

08000d46 <??SCC_CMD_8>:
 8000d46:	f002 fba1 	bl	800348c <HT_SetStart>
 8000d4a:	e000      	b.n	8000d4e <??SCC_CMD_5>

08000d4c <??SCC_CMD_1>:
 8000d4c:	2402      	movs	r4, #2

08000d4e <??SCC_CMD_5>:
 8000d4e:	9804      	ldr	r0, [sp, #16]
 8000d50:	2100      	movs	r1, #0
 8000d52:	8001      	strh	r1, [r0, #0]
 8000d54:	4620      	mov	r0, r4
 8000d56:	b001      	add	sp, #4
 8000d58:	bd30      	pop	{r4, r5, pc}

08000d5a <SCC_SetAcc>:
 8000d5a:	f8d0 10e4 	ldr.w	r1, [r0, #228]	; 0xe4
 8000d5e:	4a97      	ldr	r2, [pc, #604]	; (8000fbc <??DataTable4_4>)
 8000d60:	fb81 3202 	smull	r3, r2, r1, r2
 8000d64:	1092      	asrs	r2, r2, #2
 8000d66:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8000d6a:	f8c0 20ec 	str.w	r2, [r0, #236]	; 0xec
 8000d6e:	f44f 7cfa 	mov.w	ip, #500	; 0x1f4
 8000d72:	f8c0 c0ec 	str.w	ip, [r0, #236]	; 0xec
 8000d76:	4770      	bx	lr

08000d78 <??DataTable3>:
 8000d78:	cccd 3ecc                                   ...>

08000d7c <SCC_InitKeDetRevup>:
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	f880 103f 	strb.w	r1, [r0, #63]	; 0x3f
 8000d82:	f880 10f0 	strb.w	r1, [r0, #240]	; 0xf0
 8000d86:	f8a0 111c 	strh.w	r1, [r0, #284]	; 0x11c
 8000d8a:	f880 111e 	strb.w	r1, [r0, #286]	; 0x11e
 8000d8e:	f8a0 1120 	strh.w	r1, [r0, #288]	; 0x120
 8000d92:	f8c0 1124 	str.w	r1, [r0, #292]	; 0x124
 8000d96:	f8c0 113c 	str.w	r1, [r0, #316]	; 0x13c
 8000d9a:	4770      	bx	lr

08000d9c <SCC_Start>:
 8000d9c:	b510      	push	{r4, lr}
 8000d9e:	4604      	mov	r4, r0
 8000da0:	2100      	movs	r1, #0
 8000da2:	f894 003f 	ldrb.w	r0, [r4, #63]	; 0x3f
 8000da6:	2804      	cmp	r0, #4
 8000da8:	d108      	bne.n	8000dbc <??SCC_Start_0>
 8000daa:	2108      	movs	r1, #8
 8000dac:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
 8000db0:	2000      	movs	r0, #0
 8000db2:	f884 00f0 	strb.w	r0, [r4, #240]	; 0xf0
 8000db6:	2101      	movs	r1, #1
 8000db8:	4608      	mov	r0, r1
 8000dba:	bd10      	pop	{r4, pc}

08000dbc <??SCC_Start_0>:
 8000dbc:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 8000dc0:	b9c0      	cbnz	r0, 8000df4 <??SCC_Start_1>
 8000dc2:	6820      	ldr	r0, [r4, #0]
 8000dc4:	f005 fc1a 	bl	80065fc <PWMC_RLDetectionModeEnable>
 8000dc8:	2000      	movs	r0, #0
 8000dca:	2101      	movs	r1, #1
 8000dcc:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
 8000dd0:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
 8000dd4:	4620      	mov	r0, r4
 8000dd6:	f7ff ffd1 	bl	8000d7c <SCC_InitKeDetRevup>
 8000dda:	2000      	movs	r0, #0
 8000ddc:	f884 0128 	strb.w	r0, [r4, #296]	; 0x128
 8000de0:	2100      	movs	r1, #0
 8000de2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000de4:	6560      	str	r0, [r4, #84]	; 0x54
 8000de6:	f884 1090 	strb.w	r1, [r4, #144]	; 0x90
 8000dea:	f884 109c 	strb.w	r1, [r4, #156]	; 0x9c
 8000dee:	2001      	movs	r0, #1
 8000df0:	87a0      	strh	r0, [r4, #60]	; 0x3c
 8000df2:	2101      	movs	r1, #1

08000df4 <??SCC_Start_1>:
 8000df4:	4608      	mov	r0, r1
 8000df6:	bd10      	pop	{r4, pc}

08000df8 <SCC_Stop>:
 8000df8:	b510      	push	{r4, lr}
 8000dfa:	4604      	mov	r4, r0
 8000dfc:	6820      	ldr	r0, [r4, #0]
 8000dfe:	f005 fbff 	bl	8006600 <PWMC_RLDetectionModeDisable>
 8000e02:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 8000e06:	2806      	cmp	r0, #6
 8000e08:	bf18      	it	ne
 8000e0a:	2807      	cmpne	r0, #7
 8000e0c:	d004      	beq.n	8000e18 <??SCC_Stop_0>
 8000e0e:	280a      	cmp	r0, #10
 8000e10:	bf1c      	itt	ne
 8000e12:	2000      	movne	r0, #0
 8000e14:	f884 0034 	strbne.w	r0, [r4, #52]	; 0x34

08000e18 <??SCC_Stop_0>:
 8000e18:	bd10      	pop	{r4, pc}
	...

08000e1c <SCC_CheckOC_RL>:
 8000e1c:	b570      	push	{r4, r5, r6, lr}
 8000e1e:	4604      	mov	r4, r0
 8000e20:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
 8000e24:	1e49      	subs	r1, r1, #1
 8000e26:	2907      	cmp	r1, #7
 8000e28:	f200 80bf 	bhi.w	8000faa <??SCC_CheckOC_RL_1>
 8000e2c:	e8df f001 	tbb	[pc, r1]

08000e30 <??SCC_CheckOC_RL_0>:
 8000e30:	0404 0404 bd26 46bd                         ....&..F

08000e38 <??SCC_CheckOC_RL_2>:
 8000e38:	6820      	ldr	r0, [r4, #0]
 8000e3a:	f005 fbc3 	bl	80065c4 <PWMC_IsFaultOccurred>
 8000e3e:	0005      	movs	r5, r0
 8000e40:	d016      	beq.n	8000e70 <??SCC_CheckOC_RL_3>
 8000e42:	2007      	movs	r0, #7
 8000e44:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
 8000e48:	6820      	ldr	r0, [r4, #0]
 8000e4a:	f005 fb85 	bl	8006558 <PWMC_SwitchOffPWM>
 8000e4e:	43e8      	mvns	r0, r5
 8000e50:	b282      	uxth	r2, r0
 8000e52:	4629      	mov	r1, r5
 8000e54:	f8df 0d90 	ldr.w	r0, [pc, #3472]	; 8001be8 <??DataTable5_1>
 8000e58:	f003 ffc6 	bl	8004de8 <MCI_FaultProcessing>
 8000e5c:	ed94 0a4b 	vldr	s0, [r4, #300]	; 0x12c
 8000e60:	eddf 0a52 	vldr	s1, [pc, #328]	; 8000fac <??DataTable4>
 8000e64:	ee20 0a20 	vmul.f32	s0, s0, s1
 8000e68:	4620      	mov	r0, r4
 8000e6a:	f001 fd49 	bl	8002900 <SCC_SetNominalCurrent>
 8000e6e:	e097      	b.n	8000fa0 <??SCC_CheckOC_RL_4>

08000e70 <??SCC_CheckOC_RL_3>:
 8000e70:	4620      	mov	r0, r4
 8000e72:	f001 f8bd 	bl	8001ff0 <SCC_GetCurrent>
 8000e76:	ed84 0a4b 	vstr	s0, [r4, #300]	; 0x12c
 8000e7a:	bd70      	pop	{r4, r5, r6, pc}

08000e7c <??SCC_CheckOC_RL_5>:
 8000e7c:	6820      	ldr	r0, [r4, #0]
 8000e7e:	f005 fba1 	bl	80065c4 <PWMC_IsFaultOccurred>
 8000e82:	0005      	movs	r5, r0
 8000e84:	f000 8091 	beq.w	8000faa <??SCC_CheckOC_RL_1>
 8000e88:	2007      	movs	r0, #7
 8000e8a:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
 8000e8e:	6820      	ldr	r0, [r4, #0]
 8000e90:	f005 fb62 	bl	8006558 <PWMC_SwitchOffPWM>
 8000e94:	43e8      	mvns	r0, r5
 8000e96:	b282      	uxth	r2, r0
 8000e98:	4629      	mov	r1, r5
 8000e9a:	f8df 0d4c 	ldr.w	r0, [pc, #3404]	; 8001be8 <??DataTable5_1>
 8000e9e:	f003 ffa3 	bl	8004de8 <MCI_FaultProcessing>
 8000ea2:	ed94 0a4b 	vldr	s0, [r4, #300]	; 0x12c
 8000ea6:	eddf 0a41 	vldr	s1, [pc, #260]	; 8000fac <??DataTable4>
 8000eaa:	ee20 0a20 	vmul.f32	s0, s0, s1
 8000eae:	4620      	mov	r0, r4
 8000eb0:	f001 fd26 	bl	8002900 <SCC_SetNominalCurrent>
 8000eb4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000eb6:	f8c4 012c 	str.w	r0, [r4, #300]	; 0x12c
 8000eba:	e071      	b.n	8000fa0 <??SCC_CheckOC_RL_4>

08000ebc <??SCC_CheckOC_RL_6>:
 8000ebc:	f894 003f 	ldrb.w	r0, [r4, #63]	; 0x3f
 8000ec0:	2804      	cmp	r0, #4
 8000ec2:	d072      	beq.n	8000faa <??SCC_CheckOC_RL_1>
 8000ec4:	6820      	ldr	r0, [r4, #0]
 8000ec6:	f005 fb7d 	bl	80065c4 <PWMC_IsFaultOccurred>
 8000eca:	0005      	movs	r5, r0
 8000ecc:	d06d      	beq.n	8000faa <??SCC_CheckOC_RL_1>
 8000ece:	ed94 0a4b 	vldr	s0, [r4, #300]	; 0x12c
 8000ed2:	eddf 0a36 	vldr	s1, [pc, #216]	; 8000fac <??DataTable4>
 8000ed6:	ee20 0a20 	vmul.f32	s0, s0, s1
 8000eda:	4620      	mov	r0, r4
 8000edc:	f001 fd10 	bl	8002900 <SCC_SetNominalCurrent>
 8000ee0:	f8d4 0548 	ldr.w	r0, [r4, #1352]	; 0x548
 8000ee4:	ed94 0a15 	vldr	s0, [r4, #84]	; 0x54
 8000ee8:	ed84 0a4b 	vstr	s0, [r4, #300]	; 0x12c
 8000eec:	ed9f 1a30 	vldr	s2, [pc, #192]	; 8000fb0 <??DataTable4_1>
 8000ef0:	edd0 0a06 	vldr	s1, [r0, #24]
 8000ef4:	edd0 1a07 	vldr	s3, [r0, #28]
 8000ef8:	ee20 1a81 	vmul.f32	s2, s1, s2
 8000efc:	ee61 1a21 	vmul.f32	s3, s2, s3
 8000f00:	edd0 0a13 	vldr	s1, [r0, #76]	; 0x4c
 8000f04:	eec1 0aa0 	vdiv.f32	s1, s3, s1
 8000f08:	ee20 0a80 	vmul.f32	s0, s1, s0
 8000f0c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8000f10:	ee10 0a10 	vmov	r0, s0
 8000f14:	1e46      	subs	r6, r0, #1
 8000f16:	6a20      	ldr	r0, [r4, #32]
 8000f18:	b232      	sxth	r2, r6
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	f00c f900 	bl	800d120 <RUC_SetPhaseFinalTorque>
 8000f20:	6a20      	ldr	r0, [r4, #32]
 8000f22:	b232      	sxth	r2, r6
 8000f24:	2101      	movs	r1, #1
 8000f26:	f00c f8fb 	bl	800d120 <RUC_SetPhaseFinalTorque>
 8000f2a:	6a20      	ldr	r0, [r4, #32]
 8000f2c:	b232      	sxth	r2, r6
 8000f2e:	2102      	movs	r1, #2
 8000f30:	f00c f8f6 	bl	800d120 <RUC_SetPhaseFinalTorque>
 8000f34:	6a20      	ldr	r0, [r4, #32]
 8000f36:	b232      	sxth	r2, r6
 8000f38:	2103      	movs	r1, #3
 8000f3a:	f00c f8f1 	bl	800d120 <RUC_SetPhaseFinalTorque>
 8000f3e:	6a20      	ldr	r0, [r4, #32]
 8000f40:	b232      	sxth	r2, r6
 8000f42:	2104      	movs	r1, #4
 8000f44:	f00c f8ec 	bl	800d120 <RUC_SetPhaseFinalTorque>
 8000f48:	f894 00f0 	ldrb.w	r0, [r4, #240]	; 0xf0
 8000f4c:	2801      	cmp	r0, #1
 8000f4e:	d11a      	bne.n	8000f86 <??SCC_CheckOC_RL_7>
 8000f50:	6920      	ldr	r0, [r4, #16]
 8000f52:	f00c f911 	bl	800d178 <SPD_GetAvrgMecSpeedUnit>
 8000f56:	ebc0 1100 	rsb	r1, r0, r0, lsl #4
 8000f5a:	0088      	lsls	r0, r1, #2
 8000f5c:	4a17      	ldr	r2, [pc, #92]	; (8000fbc <??DataTable4_4>)
 8000f5e:	fb80 3202 	smull	r3, r2, r0, r2
 8000f62:	1092      	asrs	r2, r2, #2
 8000f64:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8000f68:	ee00 2a10 	vmov	s0, r2
 8000f6c:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8000f70:	eddf 0a10 	vldr	s1, [pc, #64]	; 8000fb4 <??DataTable4_2>
 8000f74:	ee60 0a20 	vmul.f32	s1, s0, s1
 8000f78:	eefd 0ae0 	vcvt.s32.f32	s1, s1
 8000f7c:	edc4 0a3a 	vstr	s1, [r4, #232]	; 0xe8
 8000f80:	4620      	mov	r0, r4
 8000f82:	f001 fc45 	bl	8002810 <SCC_UpdateRevup>

08000f86 <??SCC_CheckOC_RL_7>:
 8000f86:	2006      	movs	r0, #6
 8000f88:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
 8000f8c:	6820      	ldr	r0, [r4, #0]
 8000f8e:	f005 fae3 	bl	8006558 <PWMC_SwitchOffPWM>
 8000f92:	43e8      	mvns	r0, r5
 8000f94:	b282      	uxth	r2, r0
 8000f96:	4629      	mov	r1, r5
 8000f98:	f8df 0c4c 	ldr.w	r0, [pc, #3148]	; 8001be8 <??DataTable5_1>
 8000f9c:	f003 ff24 	bl	8004de8 <MCI_FaultProcessing>

08000fa0 <??SCC_CheckOC_RL_4>:
 8000fa0:	f8df 0c5c 	ldr.w	r0, [pc, #3164]	; 8001c00 <??DataTable5_7>
 8000fa4:	8801      	ldrh	r1, [r0, #0]
 8000fa6:	1c49      	adds	r1, r1, #1
 8000fa8:	8001      	strh	r1, [r0, #0]

08000faa <??SCC_CheckOC_RL_1>:
 8000faa:	bd70      	pop	{r4, r5, r6, pc}

08000fac <??DataTable4>:
 8000fac:	6666 3f66                                   fff?

08000fb0 <??DataTable4_1>:
 8000fb0:	0000 4780                                   ...G

08000fb4 <??DataTable4_2>:
 8000fb4:	cccd 3f4c                                   ..L?

08000fb8 <??DataTable4_3>:
 8000fb8:	022c 2000                                   ,.. 

08000fbc <??DataTable4_4>:
 8000fbc:	6667 6666                                   gfff

08000fc0 <??DataTable4_5>:
 8000fc0:	02bc 2000                                   ... 

08000fc4 <SCC_SetPhaseVoltage>:
 8000fc4:	b5f1      	push	{r0, r4, r5, r6, r7, lr}
 8000fc6:	ed2d 8b04 	vpush	{d8-d9}
 8000fca:	b088      	sub	sp, #32
 8000fcc:	2000      	movs	r0, #0
 8000fce:	f8ad 0004 	strh.w	r0, [sp, #4]
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	a804      	add	r0, sp, #16
 8000fd6:	2400      	movs	r4, #0
 8000fd8:	6001      	str	r1, [r0, #0]
 8000fda:	990c      	ldr	r1, [sp, #48]	; 0x30
 8000fdc:	6b88      	ldr	r0, [r1, #56]	; 0x38
 8000fde:	9000      	str	r0, [sp, #0]
 8000fe0:	980c      	ldr	r0, [sp, #48]	; 0x30
 8000fe2:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
 8000fe6:	290d      	cmp	r1, #13
 8000fe8:	f200 85ef 	bhi.w	8001bca <??SCC_SetPhaseVoltage_4>
 8000fec:	e8df f011 	tbh	[pc, r1, lsl #1]

08000ff0 <??SCC_SetPhaseVoltage_0>:
 8000ff0:	05c5 000e 00b3 000e 00e9 01ee 05ca 05ed     ................
 8001000:	0397 05b8 05ed 000e 007b 0092               ........{...

0800100c <??SCC_SetPhaseVoltage_5>:
 800100c:	ed90 0a15 	vldr	s0, [r0, #84]	; 0x54
 8001010:	f001 f8d6 	bl	80021c0 <SCC_CurrCtrl>
 8001014:	2801      	cmp	r0, #1
 8001016:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001018:	d140      	bne.n	800109c <??SCC_SetPhaseVoltage_6>
 800101a:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
 800101e:	2901      	cmp	r1, #1
 8001020:	d10f      	bne.n	8001042 <??SCC_SetPhaseVoltage_7>
 8001022:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001024:	2002      	movs	r0, #2
 8001026:	f881 0034 	strb.w	r0, [r1, #52]	; 0x34
 800102a:	9800      	ldr	r0, [sp, #0]
 800102c:	f00b ff06 	bl	800ce3c <REMNG_Init>
 8001030:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001032:	f8d0 1548 	ldr.w	r1, [r0, #1352]	; 0x548
 8001036:	8e4a      	ldrh	r2, [r1, #50]	; 0x32
 8001038:	9800      	ldr	r0, [sp, #0]
 800103a:	f64e 2160 	movw	r1, #60000	; 0xea60
 800103e:	f00b ff47 	bl	800ced0 <REMNG_ExecRamp>

08001042 <??SCC_SetPhaseVoltage_7>:
 8001042:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001044:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
 8001048:	2903      	cmp	r1, #3
 800104a:	d10e      	bne.n	800106a <??SCC_SetPhaseVoltage_8>
 800104c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800104e:	2004      	movs	r0, #4
 8001050:	f881 0034 	strb.w	r0, [r1, #52]	; 0x34
 8001054:	9800      	ldr	r0, [sp, #0]
 8001056:	f00b fef1 	bl	800ce3c <REMNG_Init>
 800105a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800105c:	f8d0 1548 	ldr.w	r1, [r0, #1352]	; 0x548
 8001060:	8e8a      	ldrh	r2, [r1, #52]	; 0x34
 8001062:	8f81      	ldrh	r1, [r0, #60]	; 0x3c
 8001064:	9800      	ldr	r0, [sp, #0]
 8001066:	f00b ff33 	bl	800ced0 <REMNG_ExecRamp>

0800106a <??SCC_SetPhaseVoltage_8>:
 800106a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800106c:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
 8001070:	290b      	cmp	r1, #11
 8001072:	f040 809f 	bne.w	80011b4 <??SCC_SetPhaseVoltage_9>
 8001076:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001078:	200c      	movs	r0, #12
 800107a:	f881 0034 	strb.w	r0, [r1, #52]	; 0x34
 800107e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001080:	f8c1 4544 	str.w	r4, [r1, #1348]	; 0x544
 8001084:	9800      	ldr	r0, [sp, #0]
 8001086:	f00b fed9 	bl	800ce3c <REMNG_Init>
 800108a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800108c:	f8d0 1548 	ldr.w	r1, [r0, #1352]	; 0x548
 8001090:	8e8a      	ldrh	r2, [r1, #52]	; 0x34
 8001092:	8f81      	ldrh	r1, [r0, #60]	; 0x3c
 8001094:	9800      	ldr	r0, [sp, #0]
 8001096:	f00b ff1b 	bl	800ced0 <REMNG_ExecRamp>
 800109a:	e08b      	b.n	80011b4 <??SCC_SetPhaseVoltage_9>

0800109c <??SCC_SetPhaseVoltage_6>:
 800109c:	8f81      	ldrh	r1, [r0, #60]	; 0x3c
 800109e:	f64e 2260 	movw	r2, #60000	; 0xea60
 80010a2:	4291      	cmp	r1, r2
 80010a4:	f040 8086 	bne.w	80011b4 <??SCC_SetPhaseVoltage_9>
 80010a8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80010aa:	878c      	strh	r4, [r1, #60]	; 0x3c
 80010ac:	980c      	ldr	r0, [sp, #48]	; 0x30
 80010ae:	f000 ff9f 	bl	8001ff0 <SCC_GetCurrent>
 80010b2:	980c      	ldr	r0, [sp, #48]	; 0x30
 80010b4:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 80010b8:	ee20 0a20 	vmul.f32	s0, s0, s1
 80010bc:	ed80 0a15 	vstr	s0, [r0, #84]	; 0x54
 80010c0:	f06f 0113 	mvn.w	r1, #19
 80010c4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80010c6:	f880 10dc 	strb.w	r1, [r0, #220]	; 0xdc
 80010ca:	990c      	ldr	r1, [sp, #48]	; 0x30
 80010cc:	f891 009c 	ldrb.w	r0, [r1, #156]	; 0x9c
 80010d0:	1c40      	adds	r0, r0, #1
 80010d2:	f881 009c 	strb.w	r0, [r1, #156]	; 0x9c
 80010d6:	b2c0      	uxtb	r0, r0
 80010d8:	2803      	cmp	r0, #3
 80010da:	d36b      	bcc.n	80011b4 <??SCC_SetPhaseVoltage_9>
 80010dc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80010de:	2009      	movs	r0, #9
 80010e0:	f881 0034 	strb.w	r0, [r1, #52]	; 0x34
 80010e4:	e066      	b.n	80011b4 <??SCC_SetPhaseVoltage_9>

080010e6 <??SCC_SetPhaseVoltage_10>:
 80010e6:	ed90 0a15 	vldr	s0, [r0, #84]	; 0x54
 80010ea:	f001 f869 	bl	80021c0 <SCC_CurrCtrl>
 80010ee:	9800      	ldr	r0, [sp, #0]
 80010f0:	f00b feac 	bl	800ce4c <REMNG_Calc>
 80010f4:	9800      	ldr	r0, [sp, #0]
 80010f6:	f00b fecb 	bl	800ce90 <REMNG_RampCompleted>
 80010fa:	2800      	cmp	r0, #0
 80010fc:	f000 856b 	beq.w	8001bd6 <??SCC_SetPhaseVoltage_11>
 8001100:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001102:	200d      	movs	r0, #13
 8001104:	f881 0034 	strb.w	r0, [r1, #52]	; 0x34
 8001108:	b008      	add	sp, #32
 800110a:	4620      	mov	r0, r4
 800110c:	ecbd 8b04 	vpop	{d8-d9}
 8001110:	b001      	add	sp, #4
 8001112:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001114 <??SCC_SetPhaseVoltage_12>:
 8001114:	f8d0 0544 	ldr.w	r0, [r0, #1348]	; 0x544
 8001118:	f8df 1af8 	ldr.w	r1, [pc, #2808]	; 8001c14 <??DataTable5_12>
 800111c:	4288      	cmp	r0, r1
 800111e:	d209      	bcs.n	8001134 <??SCC_SetPhaseVoltage_13>
 8001120:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001122:	1c40      	adds	r0, r0, #1
 8001124:	f8c1 0544 	str.w	r0, [r1, #1348]	; 0x544
 8001128:	b008      	add	sp, #32
 800112a:	4620      	mov	r0, r4
 800112c:	ecbd 8b04 	vpop	{d8-d9}
 8001130:	b001      	add	sp, #4
 8001132:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001134 <??SCC_SetPhaseVoltage_13>:
 8001134:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001136:	f7ff fe5f 	bl	8000df8 <SCC_Stop>
 800113a:	f003 fde7 	bl	8004d0c <MC_StopMotor1>
 800113e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001140:	f8c1 4544 	str.w	r4, [r1, #1348]	; 0x544
 8001144:	4620      	mov	r0, r4
 8001146:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001148:	f881 4541 	strb.w	r4, [r1, #1345]	; 0x541
 800114c:	b008      	add	sp, #32
 800114e:	ecbd 8b04 	vpop	{d8-d9}
 8001152:	b001      	add	sp, #4
 8001154:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001156 <??SCC_SetPhaseVoltage_14>:
 8001156:	ed90 0a15 	vldr	s0, [r0, #84]	; 0x54
 800115a:	f001 f831 	bl	80021c0 <SCC_CurrCtrl>
 800115e:	9800      	ldr	r0, [sp, #0]
 8001160:	f00b fe74 	bl	800ce4c <REMNG_Calc>
 8001164:	9800      	ldr	r0, [sp, #0]
 8001166:	f00b fe93 	bl	800ce90 <REMNG_RampCompleted>
 800116a:	b318      	cbz	r0, 80011b4 <??SCC_SetPhaseVoltage_9>
 800116c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800116e:	f890 1541 	ldrb.w	r1, [r0, #1345]	; 0x541
 8001172:	2901      	cmp	r1, #1
 8001174:	bf0c      	ite	eq
 8001176:	200b      	moveq	r0, #11
 8001178:	2003      	movne	r0, #3
 800117a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800117c:	f881 0034 	strb.w	r0, [r1, #52]	; 0x34
 8001180:	eef5 0a00 	vmov.f32	s1, #80	; 0x3e800000  0.250
 8001184:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001186:	f8c0 40ac 	str.w	r4, [r0, #172]	; 0xac
 800118a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800118c:	f8c0 40b0 	str.w	r4, [r0, #176]	; 0xb0
 8001190:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001192:	f8c0 40b4 	str.w	r4, [r0, #180]	; 0xb4
 8001196:	f06f 0013 	mvn.w	r0, #19
 800119a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800119c:	ed91 0a15 	vldr	s0, [r1, #84]	; 0x54
 80011a0:	ee20 0a20 	vmul.f32	s0, s0, s1
 80011a4:	ed81 0a15 	vstr	s0, [r1, #84]	; 0x54
 80011a8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80011aa:	ed81 0a17 	vstr	s0, [r1, #92]	; 0x5c
 80011ae:	990c      	ldr	r1, [sp, #48]	; 0x30
 80011b0:	f881 00dc 	strb.w	r0, [r1, #220]	; 0xdc

080011b4 <??SCC_SetPhaseVoltage_9>:
 80011b4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80011b6:	8f81      	ldrh	r1, [r0, #60]	; 0x3c
 80011b8:	6800      	ldr	r0, [r0, #0]
 80011ba:	f005 fa23 	bl	8006604 <PWMC_RLDetectionModeSetDuty>
 80011be:	f000 bd09 	b.w	8001bd4 <??SCC_SetPhaseVoltage_15>

080011c2 <??SCC_SetPhaseVoltage_16>:
 80011c2:	ed90 0a15 	vldr	s0, [r0, #84]	; 0x54
 80011c6:	f000 fffb 	bl	80021c0 <SCC_CurrCtrl>
 80011ca:	980c      	ldr	r0, [sp, #48]	; 0x30
 80011cc:	8f81      	ldrh	r1, [r0, #60]	; 0x3c
 80011ce:	9800      	ldr	r0, [sp, #0]
 80011d0:	f8ad 1004 	strh.w	r1, [sp, #4]
 80011d4:	f00b fe3a 	bl	800ce4c <REMNG_Calc>
 80011d8:	980c      	ldr	r0, [sp, #48]	; 0x30
 80011da:	f000 ff09 	bl	8001ff0 <SCC_GetCurrent>
 80011de:	980c      	ldr	r0, [sp, #48]	; 0x30
 80011e0:	edd0 0a2b 	vldr	s1, [r0, #172]	; 0xac
 80011e4:	ee30 0a80 	vadd.f32	s0, s1, s0
 80011e8:	ed80 0a2b 	vstr	s0, [r0, #172]	; 0xac
 80011ec:	990c      	ldr	r1, [sp, #48]	; 0x30
 80011ee:	f8d1 00b4 	ldr.w	r0, [r1, #180]	; 0xb4
 80011f2:	1c40      	adds	r0, r0, #1
 80011f4:	f8c1 00b4 	str.w	r0, [r1, #180]	; 0xb4
 80011f8:	980c      	ldr	r0, [sp, #48]	; 0x30
 80011fa:	6840      	ldr	r0, [r0, #4]
 80011fc:	f00a fc5c 	bl	800bab8 <VBS_GetAvBusVoltage_d>
 8001200:	ee00 0a90 	vmov	s1, r0
 8001204:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001206:	6841      	ldr	r1, [r0, #4]
 8001208:	8848      	ldrh	r0, [r1, #2]
 800120a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800120c:	ee01 0a10 	vmov	s2, r0
 8001210:	eef8 0a60 	vcvt.f32.u32	s1, s1
 8001214:	eeb8 1a41 	vcvt.f32.u32	s2, s2
 8001218:	ed9f 0ad9 	vldr	s0, [pc, #868]	; 8001580 <??SCC_SetPhaseVoltage_2>
 800121c:	ee60 0a81 	vmul.f32	s1, s1, s2
 8001220:	ee60 0a80 	vmul.f32	s1, s1, s0
 8001224:	edc1 0a18 	vstr	s1, [r1, #96]	; 0x60
 8001228:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 800122c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800122e:	ee01 0a10 	vmov	s2, r0
 8001232:	eeb8 1a41 	vcvt.f32.u32	s2, s2
 8001236:	ee21 0a00 	vmul.f32	s0, s2, s0
 800123a:	ed91 1a2c 	vldr	s2, [r1, #176]	; 0xb0
 800123e:	ee00 1a20 	vmla.f32	s2, s0, s1
 8001242:	ed81 1a2c 	vstr	s2, [r1, #176]	; 0xb0
 8001246:	9800      	ldr	r0, [sp, #0]
 8001248:	f00b fe22 	bl	800ce90 <REMNG_RampCompleted>
 800124c:	2800      	cmp	r0, #0
 800124e:	f000 825f 	beq.w	8001710 <??SCC_SetPhaseVoltage_17>
 8001252:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001254:	ed90 0a2d 	vldr	s0, [r0, #180]	; 0xb4
 8001258:	edd0 0a2b 	vldr	s1, [r0, #172]	; 0xac
 800125c:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8001260:	ee80 0a80 	vdiv.f32	s0, s1, s0
 8001264:	ed80 0a25 	vstr	s0, [r0, #148]	; 0x94
 8001268:	990c      	ldr	r1, [sp, #48]	; 0x30
 800126a:	f891 2090 	ldrb.w	r2, [r1, #144]	; 0x90
 800126e:	edd1 0a2d 	vldr	s1, [r1, #180]	; 0xb4
 8001272:	ed91 1a2c 	vldr	s2, [r1, #176]	; 0xb0
 8001276:	eb01 0082 	add.w	r0, r1, r2, lsl #2
 800127a:	eef8 0a60 	vcvt.f32.u32	s1, s1
 800127e:	ed80 0a1c 	vstr	s0, [r0, #112]	; 0x70
 8001282:	eec1 0a20 	vdiv.f32	s1, s2, s1
 8001286:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001288:	f891 2090 	ldrb.w	r2, [r1, #144]	; 0x90
 800128c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8001290:	edc1 0a20 	vstr	s1, [r1, #128]	; 0x80
 8001294:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001296:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001298:	f890 0090 	ldrb.w	r0, [r0, #144]	; 0x90
 800129c:	1c40      	adds	r0, r0, #1
 800129e:	f881 0090 	strb.w	r0, [r1, #144]	; 0x90
 80012a2:	b2c0      	uxtb	r0, r0
 80012a4:	2804      	cmp	r0, #4
 80012a6:	d21b      	bcs.n	80012e0 <??SCC_SetPhaseVoltage_18>
 80012a8:	980c      	ldr	r0, [sp, #48]	; 0x30
 80012aa:	ed90 0a15 	vldr	s0, [r0, #84]	; 0x54
 80012ae:	edd0 0a17 	vldr	s1, [r0, #92]	; 0x5c
 80012b2:	ee30 0a20 	vadd.f32	s0, s0, s1
 80012b6:	ed80 0a15 	vstr	s0, [r0, #84]	; 0x54
 80012ba:	f06f 0113 	mvn.w	r1, #19
 80012be:	980c      	ldr	r0, [sp, #48]	; 0x30
 80012c0:	f880 10dc 	strb.w	r1, [r0, #220]	; 0xdc
 80012c4:	2003      	movs	r0, #3
 80012c6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80012c8:	f8c1 40ac 	str.w	r4, [r1, #172]	; 0xac
 80012cc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80012ce:	f8c1 40b0 	str.w	r4, [r1, #176]	; 0xb0
 80012d2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80012d4:	f8c1 40b4 	str.w	r4, [r1, #180]	; 0xb4
 80012d8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80012da:	f881 0034 	strb.w	r0, [r1, #52]	; 0x34
 80012de:	e217      	b.n	8001710 <??SCC_SetPhaseVoltage_17>

080012e0 <??SCC_SetPhaseVoltage_18>:
 80012e0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80012e2:	2005      	movs	r0, #5
 80012e4:	f881 0034 	strb.w	r0, [r1, #52]	; 0x34
 80012e8:	ed9f 8aa6 	vldr	s16, [pc, #664]	; 8001584 <??SCC_SetPhaseVoltage_2+0x4>
 80012ec:	990c      	ldr	r1, [sp, #48]	; 0x30
 80012ee:	f881 403e 	strb.w	r4, [r1, #62]	; 0x3e
 80012f2:	9800      	ldr	r0, [sp, #0]
 80012f4:	f00b fda2 	bl	800ce3c <REMNG_Init>
 80012f8:	9800      	ldr	r0, [sp, #0]
 80012fa:	2264      	movs	r2, #100	; 0x64
 80012fc:	f64e 2160 	movw	r1, #60000	; 0xea60
 8001300:	f00b fde6 	bl	800ced0 <REMNG_ExecRamp>
 8001304:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001306:	a905      	add	r1, sp, #20
 8001308:	f05f 0003 	movs.w	r0, #3

0800130c <??SCC_SetPhaseVoltage_19>:
 800130c:	ed92 0a21 	vldr	s0, [r2, #132]	; 0x84
 8001310:	edd2 0a20 	vldr	s1, [r2, #128]	; 0x80
 8001314:	ed92 1a1c 	vldr	s2, [r2, #112]	; 0x70
 8001318:	ee70 0a60 	vsub.f32	s1, s0, s1
 800131c:	ed92 0a1d 	vldr	s0, [r2, #116]	; 0x74
 8001320:	ee30 1a41 	vsub.f32	s2, s0, s2
 8001324:	1d12      	adds	r2, r2, #4
 8001326:	ee80 0a81 	vdiv.f32	s0, s1, s2
 800132a:	ed81 0a00 	vstr	s0, [r1]
 800132e:	1d09      	adds	r1, r1, #4
 8001330:	1e40      	subs	r0, r0, #1
 8001332:	ee38 8a00 	vadd.f32	s16, s16, s0
 8001336:	d1e9      	bne.n	800130c <??SCC_SetPhaseVoltage_19>
 8001338:	980c      	ldr	r0, [sp, #48]	; 0x30
 800133a:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 800133e:	ee88 0a00 	vdiv.f32	s0, s16, s0
 8001342:	ed80 0a19 	vstr	s0, [r0, #100]	; 0x64
 8001346:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001348:	f8d1 1548 	ldr.w	r1, [r1, #1352]	; 0x548
 800134c:	f891 0040 	ldrb.w	r0, [r1, #64]	; 0x40
 8001350:	bb48      	cbnz	r0, 80013a6 <??SCC_SetPhaseVoltage_20>
 8001352:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001354:	edd1 0a0a 	vldr	s1, [r1, #40]	; 0x28
 8001358:	ee30 0a60 	vsub.f32	s0, s0, s1
 800135c:	eddf 0a8a 	vldr	s1, [pc, #552]	; 8001588 <??SCC_SetPhaseVoltage_2+0x8>
 8001360:	eeb4 0a60 	vcmp.f32	s0, s1
 8001364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001368:	ed80 0a19 	vstr	s0, [r0, #100]	; 0x64
 800136c:	d504      	bpl.n	8001378 <??SCC_SetPhaseVoltage_21>
 800136e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001370:	f8df 1d10 	ldr.w	r1, [pc, #3344]	; 8002084 <??DataTable9_3>
 8001374:	6641      	str	r1, [r0, #100]	; 0x64
 8001376:	e006      	b.n	8001386 <??SCC_SetPhaseVoltage_22>

08001378 <??SCC_SetPhaseVoltage_21>:
 8001378:	980c      	ldr	r0, [sp, #48]	; 0x30
 800137a:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 800137e:	ee20 0a20 	vmul.f32	s0, s0, s1
 8001382:	ed80 0a19 	vstr	s0, [r0, #100]	; 0x64

08001386 <??SCC_SetPhaseVoltage_22>:
 8001386:	eddf 0a81 	vldr	s1, [pc, #516]	; 800158c <??SCC_SetPhaseVoltage_2+0xc>
 800138a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800138c:	ed90 0a25 	vldr	s0, [r0, #148]	; 0x94
 8001390:	ee60 0a20 	vmul.f32	s1, s0, s1
 8001394:	edc0 0a26 	vstr	s1, [r0, #152]	; 0x98
 8001398:	990c      	ldr	r1, [sp, #48]	; 0x30
 800139a:	f8c1 40a8 	str.w	r4, [r1, #168]	; 0xa8
 800139e:	990c      	ldr	r1, [sp, #48]	; 0x30
 80013a0:	f8c1 40a4 	str.w	r4, [r1, #164]	; 0xa4
 80013a4:	e1b4      	b.n	8001710 <??SCC_SetPhaseVoltage_17>

080013a6 <??SCC_SetPhaseVoltage_20>:
 80013a6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80013a8:	200a      	movs	r0, #10
 80013aa:	f881 0034 	strb.w	r0, [r1, #52]	; 0x34
 80013ae:	2008      	movs	r0, #8
 80013b0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80013b2:	68ca      	ldr	r2, [r1, #12]
 80013b4:	77d0      	strb	r0, [r2, #31]
 80013b6:	980c      	ldr	r0, [sp, #48]	; 0x30
 80013b8:	6800      	ldr	r0, [r0, #0]
 80013ba:	f005 f8cd 	bl	8006558 <PWMC_SwitchOffPWM>
 80013be:	980c      	ldr	r0, [sp, #48]	; 0x30
 80013c0:	6800      	ldr	r0, [r0, #0]
 80013c2:	f005 f91d 	bl	8006600 <PWMC_RLDetectionModeDisable>
 80013c6:	f8ad 4004 	strh.w	r4, [sp, #4]
 80013ca:	e1a1      	b.n	8001710 <??SCC_SetPhaseVoltage_17>

080013cc <??SCC_SetPhaseVoltage_23>:
 80013cc:	f000 fe10 	bl	8001ff0 <SCC_GetCurrent>
 80013d0:	980c      	ldr	r0, [sp, #48]	; 0x30
 80013d2:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
 80013d6:	b111      	cbz	r1, 80013de <??SCC_SetPhaseVoltage_24>
 80013d8:	2902      	cmp	r1, #2
 80013da:	d008      	beq.n	80013ee <??SCC_SetPhaseVoltage_25>
 80013dc:	e01c      	b.n	8001418 <??SCC_SetPhaseVoltage_26>

080013de <??SCC_SetPhaseVoltage_24>:
 80013de:	eddf 0a6c 	vldr	s1, [pc, #432]	; 8001590 <??SCC_SetPhaseVoltage_2+0x10>
 80013e2:	eeb4 0a60 	vcmp.f32	s0, s1
 80013e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ea:	d515      	bpl.n	8001418 <??SCC_SetPhaseVoltage_26>
 80013ec:	e011      	b.n	8001412 <??SCC_SetPhaseVoltage_27>

080013ee <??SCC_SetPhaseVoltage_25>:
 80013ee:	8f81      	ldrh	r1, [r0, #60]	; 0x3c
 80013f0:	980c      	ldr	r0, [sp, #48]	; 0x30
 80013f2:	f8ad 1004 	strh.w	r1, [sp, #4]
 80013f6:	edd0 0a26 	vldr	s1, [r0, #152]	; 0x98
 80013fa:	eeb4 0a60 	vcmp.f32	s0, s1
 80013fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001402:	d506      	bpl.n	8001412 <??SCC_SetPhaseVoltage_27>
 8001404:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001406:	f8d0 10a0 	ldr.w	r1, [r0, #160]	; 0xa0
 800140a:	1c49      	adds	r1, r1, #1
 800140c:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
 8001410:	e002      	b.n	8001418 <??SCC_SetPhaseVoltage_26>

08001412 <??SCC_SetPhaseVoltage_27>:
 8001412:	9800      	ldr	r0, [sp, #0]
 8001414:	f00b fd42 	bl	800ce9c <REMNG_StopRamp>

08001418 <??SCC_SetPhaseVoltage_26>:
 8001418:	9800      	ldr	r0, [sp, #0]
 800141a:	f00b fd17 	bl	800ce4c <REMNG_Calc>
 800141e:	9800      	ldr	r0, [sp, #0]
 8001420:	f00b fd36 	bl	800ce90 <REMNG_RampCompleted>
 8001424:	2800      	cmp	r0, #0
 8001426:	f000 8173 	beq.w	8001710 <??SCC_SetPhaseVoltage_17>
 800142a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800142c:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
 8001430:	b119      	cbz	r1, 800143a <??SCC_SetPhaseVoltage_28>
 8001432:	2902      	cmp	r1, #2
 8001434:	d012      	beq.n	800145c <??SCC_SetPhaseVoltage_29>
 8001436:	d309      	bcc.n	800144c <??SCC_SetPhaseVoltage_30>
 8001438:	e16a      	b.n	8001710 <??SCC_SetPhaseVoltage_17>

0800143a <??SCC_SetPhaseVoltage_28>:
 800143a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800143c:	2001      	movs	r0, #1
 800143e:	f881 003e 	strb.w	r0, [r1, #62]	; 0x3e
 8001442:	9800      	ldr	r0, [sp, #0]
 8001444:	f00b fcfa 	bl	800ce3c <REMNG_Init>
 8001448:	220a      	movs	r2, #10
 800144a:	e15c      	b.n	8001706 <??SCC_SetPhaseVoltage_31>

0800144c <??SCC_SetPhaseVoltage_30>:
 800144c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800144e:	2002      	movs	r0, #2
 8001450:	f881 003e 	strb.w	r0, [r1, #62]	; 0x3e
 8001454:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001456:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
 800145a:	e150      	b.n	80016fe <??SCC_SetPhaseVoltage_32>

0800145c <??SCC_SetPhaseVoltage_29>:
 800145c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800145e:	f881 403e 	strb.w	r4, [r1, #62]	; 0x3e
 8001462:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001464:	ed90 0a28 	vldr	s0, [r0, #160]	; 0xa0
 8001468:	edd0 0a10 	vldr	s1, [r0, #64]	; 0x40
 800146c:	ed90 1a2a 	vldr	s2, [r0, #168]	; 0xa8
 8001470:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8001474:	ee20 0a20 	vmul.f32	s0, s0, s1
 8001478:	edd0 0a19 	vldr	s1, [r0, #100]	; 0x64
 800147c:	ee00 1a20 	vmla.f32	s2, s0, s1
 8001480:	ed80 1a2a 	vstr	s2, [r0, #168]	; 0xa8
 8001484:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001486:	f8d1 00a4 	ldr.w	r0, [r1, #164]	; 0xa4
 800148a:	1c40      	adds	r0, r0, #1
 800148c:	2814      	cmp	r0, #20
 800148e:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
 8001492:	f040 8134 	bne.w	80016fe <??SCC_SetPhaseVoltage_32>
 8001496:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001498:	2006      	movs	r0, #6
 800149a:	f881 0034 	strb.w	r0, [r1, #52]	; 0x34
 800149e:	2008      	movs	r0, #8
 80014a0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80014a2:	68ca      	ldr	r2, [r1, #12]
 80014a4:	77d0      	strb	r0, [r2, #31]
 80014a6:	2710      	movs	r7, #16
 80014a8:	980c      	ldr	r0, [sp, #48]	; 0x30
 80014aa:	6800      	ldr	r0, [r0, #0]
 80014ac:	f005 f854 	bl	8006558 <PWMC_SwitchOffPWM>
 80014b0:	980c      	ldr	r0, [sp, #48]	; 0x30
 80014b2:	6800      	ldr	r0, [r0, #0]
 80014b4:	f005 f8a4 	bl	8006600 <PWMC_RLDetectionModeDisable>
 80014b8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80014ba:	f8ad 4004 	strh.w	r4, [sp, #4]
 80014be:	2610      	movs	r6, #16
 80014c0:	ed91 0a29 	vldr	s0, [r1, #164]	; 0xa4
 80014c4:	edd1 0a2a 	vldr	s1, [r1, #168]	; 0xa8
 80014c8:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 80014cc:	ee80 0a80 	vdiv.f32	s0, s1, s0
 80014d0:	ed81 0a1a 	vstr	s0, [r1, #104]	; 0x68
 80014d4:	2500      	movs	r5, #0
 80014d6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80014d8:	6848      	ldr	r0, [r1, #4]
 80014da:	f00a faed 	bl	800bab8 <VBS_GetAvBusVoltage_d>
 80014de:	ee00 0a10 	vmov	s0, r0
 80014e2:	980c      	ldr	r0, [sp, #48]	; 0x30
 80014e4:	6841      	ldr	r1, [r0, #4]
 80014e6:	8848      	ldrh	r0, [r1, #2]
 80014e8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80014ea:	ee00 0a90 	vmov	s1, r0
 80014ee:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 80014f2:	eef8 0a60 	vcvt.f32.u32	s1, s1
 80014f6:	ee20 0a20 	vmul.f32	s0, s0, s1
 80014fa:	ed9f 1a21 	vldr	s2, [pc, #132]	; 8001580 <??SCC_SetPhaseVoltage_2>
 80014fe:	ee20 0a01 	vmul.f32	s0, s0, s2
 8001502:	ed81 0a18 	vstr	s0, [r1, #96]	; 0x60
 8001506:	2110      	movs	r1, #16
 8001508:	980c      	ldr	r0, [sp, #48]	; 0x30
 800150a:	f8d0 0548 	ldr.w	r0, [r0, #1352]	; 0x548
 800150e:	edd0 0a06 	vldr	s1, [r0, #24]
 8001512:	ed90 1a07 	vldr	s2, [r0, #28]
 8001516:	ee20 0a20 	vmul.f32	s0, s0, s1
 800151a:	ee20 1a01 	vmul.f32	s2, s0, s2
 800151e:	ed90 0a13 	vldr	s0, [r0, #76]	; 0x4c
 8001522:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001524:	ed90 2a19 	vldr	s4, [r0, #100]	; 0x64
 8001528:	edd0 1a4d 	vldr	s3, [r0, #308]	; 0x134
 800152c:	edd0 0a38 	vldr	s1, [r0, #224]	; 0xe0
 8001530:	ee81 1a00 	vdiv.f32	s2, s2, s0
 8001534:	ed90 0a1a 	vldr	s0, [r0, #104]	; 0x68
 8001538:	ee20 0a21 	vmul.f32	s0, s0, s3
 800153c:	ee62 1a21 	vmul.f32	s3, s4, s3
 8001540:	ed90 2a10 	vldr	s4, [r0, #64]	; 0x40
 8001544:	ee80 0a01 	vdiv.f32	s0, s0, s2
 8001548:	ee61 1a82 	vmul.f32	s3, s3, s4
 800154c:	ee60 0a20 	vmul.f32	s1, s0, s1
 8001550:	ee81 1a81 	vdiv.f32	s2, s3, s2
 8001554:	2200      	movs	r2, #0
 8001556:	200f      	movs	r0, #15
 8001558:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800155c:	f04f 0c01 	mov.w	ip, #1

08001560 <??SCC_SetPhaseVoltage_33>:
 8001560:	fa0c f400 	lsl.w	r4, ip, r0
 8001564:	ee01 4a90 	vmov	s3, r4
 8001568:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 800156c:	ee61 1a80 	vmul.f32	s3, s3, s0
 8001570:	eefd 1ae1 	vcvt.s32.f32	s3, s3
 8001574:	ee11 4a90 	vmov	r4, s3
 8001578:	429c      	cmp	r4, r3
 800157a:	da12      	bge.n	80015a2 <??SCC_SetPhaseVoltage_34>
 800157c:	4601      	mov	r1, r0
 800157e:	e010      	b.n	80015a2 <??SCC_SetPhaseVoltage_34>

08001580 <??SCC_SetPhaseVoltage_2>:
 8001580:	0000 3780 0000 0000 cccd 3e4c d29e 3f21     ...7......L>..!?
 8001590:	d70a 3c23                                   ..#<

08001594 <??SCC_SetPhaseVoltage_35>:
 8001594:	4607      	mov	r7, r0
 8001596:	e017      	b.n	80015c8 <??SCC_SetPhaseVoltage_36>

08001598 <??SCC_SetPhaseVoltage_37>:
 8001598:	fa1f fe81 	uxth.w	lr, r1
 800159c:	f1be 0f10 	cmp.w	lr, #16
 80015a0:	d0de      	beq.n	8001560 <??SCC_SetPhaseVoltage_33>

080015a2 <??SCC_SetPhaseVoltage_34>:
 80015a2:	fa1f fe87 	uxth.w	lr, r7
 80015a6:	f1be 0f10 	cmp.w	lr, #16
 80015aa:	d10d      	bne.n	80015c8 <??SCC_SetPhaseVoltage_36>
 80015ac:	fa0c f200 	lsl.w	r2, ip, r0
 80015b0:	ee01 2a90 	vmov	s3, r2
 80015b4:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 80015b8:	ee61 1aa0 	vmul.f32	s3, s3, s1
 80015bc:	eefd 1ae1 	vcvt.s32.f32	s3, s3
 80015c0:	ee11 2a90 	vmov	r2, s3
 80015c4:	429a      	cmp	r2, r3
 80015c6:	dbe5      	blt.n	8001594 <??SCC_SetPhaseVoltage_35>

080015c8 <??SCC_SetPhaseVoltage_36>:
 80015c8:	fa1f fe86 	uxth.w	lr, r6
 80015cc:	f1be 0f10 	cmp.w	lr, #16
 80015d0:	d10e      	bne.n	80015f0 <??SCC_SetPhaseVoltage_38>
 80015d2:	fa0c f500 	lsl.w	r5, ip, r0
 80015d6:	ee01 5a90 	vmov	s3, r5
 80015da:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 80015de:	ee61 1a81 	vmul.f32	s3, s3, s2
 80015e2:	eefd 1ae1 	vcvt.s32.f32	s3, s3
 80015e6:	ee11 5a90 	vmov	r5, s3
 80015ea:	429d      	cmp	r5, r3
 80015ec:	bfb8      	it	lt
 80015ee:	4606      	movlt	r6, r0

080015f0 <??SCC_SetPhaseVoltage_38>:
 80015f0:	1e40      	subs	r0, r0, #1
 80015f2:	d5d1      	bpl.n	8001598 <??SCC_SetPhaseVoltage_37>
 80015f4:	b288      	uxth	r0, r1
 80015f6:	2810      	cmp	r0, #16
 80015f8:	9202      	str	r2, [sp, #8]
 80015fa:	d00a      	beq.n	8001612 <??SCC_SetPhaseVoltage_39>
 80015fc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80015fe:	6980      	ldr	r0, [r0, #24]
 8001600:	b289      	uxth	r1, r1
 8001602:	f00a fb6f 	bl	800bce4 <PID_SetKPDivisorPOW2>
 8001606:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001608:	6980      	ldr	r0, [r0, #24]
 800160a:	b221      	sxth	r1, r4
 800160c:	f00a fb5a 	bl	800bcc4 <PID_SetKP>
 8001610:	e003      	b.n	800161a <??SCC_SetPhaseVoltage_40>

08001612 <??SCC_SetPhaseVoltage_39>:
 8001612:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001614:	2009      	movs	r0, #9
 8001616:	f881 0034 	strb.w	r0, [r1, #52]	; 0x34

0800161a <??SCC_SetPhaseVoltage_40>:
 800161a:	b2b8      	uxth	r0, r7
 800161c:	2810      	cmp	r0, #16
 800161e:	d00b      	beq.n	8001638 <??SCC_SetPhaseVoltage_41>
 8001620:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001622:	69c0      	ldr	r0, [r0, #28]
 8001624:	b2b9      	uxth	r1, r7
 8001626:	f00a fb5d 	bl	800bce4 <PID_SetKPDivisorPOW2>
 800162a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800162c:	9902      	ldr	r1, [sp, #8]
 800162e:	69c0      	ldr	r0, [r0, #28]
 8001630:	b209      	sxth	r1, r1
 8001632:	f00a fb47 	bl	800bcc4 <PID_SetKP>
 8001636:	e003      	b.n	8001640 <??SCC_SetPhaseVoltage_42>

08001638 <??SCC_SetPhaseVoltage_41>:
 8001638:	990c      	ldr	r1, [sp, #48]	; 0x30
 800163a:	2009      	movs	r0, #9
 800163c:	f881 0034 	strb.w	r0, [r1, #52]	; 0x34

08001640 <??SCC_SetPhaseVoltage_42>:
 8001640:	b2b0      	uxth	r0, r6
 8001642:	2810      	cmp	r0, #16
 8001644:	d014      	beq.n	8001670 <??SCC_SetPhaseVoltage_43>
 8001646:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001648:	6980      	ldr	r0, [r0, #24]
 800164a:	b2b1      	uxth	r1, r6
 800164c:	f00a fb58 	bl	800bd00 <PID_SetKIDivisorPOW2>
 8001650:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001652:	69c0      	ldr	r0, [r0, #28]
 8001654:	b2b1      	uxth	r1, r6
 8001656:	f00a fb53 	bl	800bd00 <PID_SetKIDivisorPOW2>
 800165a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800165c:	6980      	ldr	r0, [r0, #24]
 800165e:	b229      	sxth	r1, r5
 8001660:	f00a fb32 	bl	800bcc8 <PID_SetKI>
 8001664:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001666:	69c0      	ldr	r0, [r0, #28]
 8001668:	b229      	sxth	r1, r5
 800166a:	f00a fb2d 	bl	800bcc8 <PID_SetKI>
 800166e:	e003      	b.n	8001678 <??SCC_SetPhaseVoltage_44>

08001670 <??SCC_SetPhaseVoltage_43>:
 8001670:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001672:	2009      	movs	r0, #9
 8001674:	f881 0034 	strb.w	r0, [r1, #52]	; 0x34

08001678 <??SCC_SetPhaseVoltage_44>:
 8001678:	eddf 0aab 	vldr	s1, [pc, #684]	; 8001928 <??SCC_SetPhaseVoltage_3>
 800167c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800167e:	f8d0 0548 	ldr.w	r0, [r0, #1352]	; 0x548
 8001682:	ed90 0a06 	vldr	s0, [r0, #24]
 8001686:	ed90 1a07 	vldr	s2, [r0, #28]
 800168a:	ee60 0a20 	vmul.f32	s1, s0, s1
 800168e:	ee20 1a81 	vmul.f32	s2, s1, s2
 8001692:	ed90 0a13 	vldr	s0, [r0, #76]	; 0x4c
 8001696:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001698:	edd0 0a15 	vldr	s1, [r0, #84]	; 0x54
 800169c:	6a00      	ldr	r0, [r0, #32]
 800169e:	ee81 0a00 	vdiv.f32	s0, s2, s0
 80016a2:	ee20 0a20 	vmul.f32	s0, s0, s1
 80016a6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80016aa:	ee10 1a10 	vmov	r1, s0
 80016ae:	1e4c      	subs	r4, r1, #1
 80016b0:	b222      	sxth	r2, r4
 80016b2:	2100      	movs	r1, #0
 80016b4:	f00b fd34 	bl	800d120 <RUC_SetPhaseFinalTorque>
 80016b8:	980c      	ldr	r0, [sp, #48]	; 0x30
 80016ba:	6a00      	ldr	r0, [r0, #32]
 80016bc:	b222      	sxth	r2, r4
 80016be:	2101      	movs	r1, #1
 80016c0:	f00b fd2e 	bl	800d120 <RUC_SetPhaseFinalTorque>
 80016c4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80016c6:	6a00      	ldr	r0, [r0, #32]
 80016c8:	b222      	sxth	r2, r4
 80016ca:	2102      	movs	r1, #2
 80016cc:	f00b fd28 	bl	800d120 <RUC_SetPhaseFinalTorque>
 80016d0:	980c      	ldr	r0, [sp, #48]	; 0x30
 80016d2:	6a00      	ldr	r0, [r0, #32]
 80016d4:	b222      	sxth	r2, r4
 80016d6:	2103      	movs	r1, #3
 80016d8:	f00b fd22 	bl	800d120 <RUC_SetPhaseFinalTorque>
 80016dc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80016de:	6a00      	ldr	r0, [r0, #32]
 80016e0:	b222      	sxth	r2, r4
 80016e2:	2104      	movs	r1, #4
 80016e4:	f00b fd1c 	bl	800d120 <RUC_SetPhaseFinalTorque>
 80016e8:	980c      	ldr	r0, [sp, #48]	; 0x30
 80016ea:	f8d0 1548 	ldr.w	r1, [r0, #1352]	; 0x548
 80016ee:	8e4a      	ldrh	r2, [r1, #50]	; 0x32
 80016f0:	6a00      	ldr	r0, [r0, #32]
 80016f2:	2100      	movs	r1, #0
 80016f4:	f00b fd08 	bl	800d108 <RUC_SetPhaseDurationms>
 80016f8:	980c      	ldr	r0, [sp, #48]	; 0x30
 80016fa:	f001 f889 	bl	8002810 <SCC_UpdateRevup>

080016fe <??SCC_SetPhaseVoltage_32>:
 80016fe:	9800      	ldr	r0, [sp, #0]
 8001700:	f00b fb9c 	bl	800ce3c <REMNG_Init>
 8001704:	2264      	movs	r2, #100	; 0x64

08001706 <??SCC_SetPhaseVoltage_31>:
 8001706:	9800      	ldr	r0, [sp, #0]
 8001708:	f64e 2160 	movw	r1, #60000	; 0xea60
 800170c:	f00b fbe0 	bl	800ced0 <REMNG_ExecRamp>

08001710 <??SCC_SetPhaseVoltage_17>:
 8001710:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001712:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8001716:	6800      	ldr	r0, [r0, #0]
 8001718:	f004 ff74 	bl	8006604 <PWMC_RLDetectionModeSetDuty>
 800171c:	e25a      	b.n	8001bd4 <??SCC_SetPhaseVoltage_15>

0800171e <??SCC_SetPhaseVoltage_45>:
 800171e:	68c0      	ldr	r0, [r0, #12]
 8001720:	f003 fbaa 	bl	8004e78 <MCI_GetSTMState>
 8001724:	2804      	cmp	r0, #4
 8001726:	bf18      	it	ne
 8001728:	2806      	cmpne	r0, #6
 800172a:	d005      	beq.n	8001738 <??SCC_SetPhaseVoltage_46>
 800172c:	2808      	cmp	r0, #8
 800172e:	f000 820a 	beq.w	8001b46 <??SCC_SetPhaseVoltage_47>
 8001732:	2813      	cmp	r0, #19
 8001734:	f040 8249 	bne.w	8001bca <??SCC_SetPhaseVoltage_4>

08001738 <??SCC_SetPhaseVoltage_46>:
 8001738:	980c      	ldr	r0, [sp, #48]	; 0x30
 800173a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800173c:	f00b fd78 	bl	800d230 <STC_GetSpeedSensor>
 8001740:	f00b fd16 	bl	800d170 <SPD_GetElAngle>
 8001744:	4605      	mov	r5, r0
 8001746:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001748:	6881      	ldr	r1, [r0, #8]
 800174a:	6808      	ldr	r0, [r1, #0]
 800174c:	f003 fcb2 	bl	80050b4 <MCM_Clarke>
 8001750:	4606      	mov	r6, r0
 8001752:	4629      	mov	r1, r5
 8001754:	f003 fcee 	bl	8005134 <MCM_Park>
 8001758:	9003      	str	r0, [sp, #12]
 800175a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800175c:	6881      	ldr	r1, [r0, #8]
 800175e:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 8001762:	f9b1 1010 	ldrsh.w	r1, [r1, #16]
 8001766:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001768:	1a09      	subs	r1, r1, r0
 800176a:	6990      	ldr	r0, [r2, #24]
 800176c:	f00a faee 	bl	800bd4c <PI_Controller>
 8001770:	f8ad 0004 	strh.w	r0, [sp, #4]
 8001774:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001776:	6881      	ldr	r1, [r0, #8]
 8001778:	f9bd 000e 	ldrsh.w	r0, [sp, #14]
 800177c:	f9b1 1012 	ldrsh.w	r1, [r1, #18]
 8001780:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001782:	1a09      	subs	r1, r1, r0
 8001784:	69d0      	ldr	r0, [r2, #28]
 8001786:	f00a fae1 	bl	800bd4c <PI_Controller>
 800178a:	f8ad 0006 	strh.w	r0, [sp, #6]
 800178e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001790:	9901      	ldr	r1, [sp, #4]
 8001792:	6940      	ldr	r0, [r0, #20]
 8001794:	f00a f998 	bl	800bac8 <Circle_Limitation>
 8001798:	9001      	str	r0, [sp, #4]
 800179a:	4629      	mov	r1, r5
 800179c:	f003 fd0c 	bl	80051b8 <MCM_Rev_Park>
 80017a0:	4607      	mov	r7, r0
 80017a2:	980c      	ldr	r0, [sp, #48]	; 0x30
 80017a4:	6800      	ldr	r0, [r0, #0]
 80017a6:	4639      	mov	r1, r7
 80017a8:	f004 fd44 	bl	8006234 <PWMC_SetPhaseVoltage>
 80017ac:	4604      	mov	r4, r0
 80017ae:	980c      	ldr	r0, [sp, #48]	; 0x30
 80017b0:	6881      	ldr	r1, [r0, #8]
 80017b2:	604e      	str	r6, [r1, #4]
 80017b4:	9606      	str	r6, [sp, #24]
 80017b6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80017b8:	688a      	ldr	r2, [r1, #8]
 80017ba:	9803      	ldr	r0, [sp, #12]
 80017bc:	60d0      	str	r0, [r2, #12]
 80017be:	990c      	ldr	r1, [sp, #48]	; 0x30
 80017c0:	688a      	ldr	r2, [r1, #8]
 80017c2:	9801      	ldr	r0, [sp, #4]
 80017c4:	f8c2 0016 	str.w	r0, [r2, #22]
 80017c8:	980c      	ldr	r0, [sp, #48]	; 0x30
 80017ca:	6881      	ldr	r1, [r0, #8]
 80017cc:	f8d1 001a 	ldr.w	r0, [r1, #26]
 80017d0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80017d2:	9005      	str	r0, [sp, #20]
 80017d4:	6888      	ldr	r0, [r1, #8]
 80017d6:	f8c0 701a 	str.w	r7, [r0, #26]
 80017da:	990c      	ldr	r1, [sp, #48]	; 0x30
 80017dc:	6888      	ldr	r0, [r1, #8]
 80017de:	8405      	strh	r5, [r0, #32]
 80017e0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80017e2:	6848      	ldr	r0, [r1, #4]
 80017e4:	f00a f968 	bl	800bab8 <VBS_GetAvBusVoltage_d>
 80017e8:	f8ad 001c 	strh.w	r0, [sp, #28]
 80017ec:	a905      	add	r1, sp, #20
 80017ee:	980c      	ldr	r0, [sp, #48]	; 0x30
 80017f0:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80017f2:	f00b fdc9 	bl	800d388 <STO_PLL_CalcElAngle>
 80017f6:	f8ad 0008 	strh.w	r0, [sp, #8]
 80017fa:	980c      	ldr	r0, [sp, #48]	; 0x30
 80017fc:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80017fe:	f00b ff5d 	bl	800d6bc <STO_PLL_CalcAvrgElSpeedDpp>
 8001802:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001804:	6900      	ldr	r0, [r0, #16]
 8001806:	a902      	add	r1, sp, #8
 8001808:	f00c f8d2 	bl	800d9b0 <VSS_CalcElAngle>
 800180c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800180e:	f890 103f 	ldrb.w	r1, [r0, #63]	; 0x3f
 8001812:	2905      	cmp	r1, #5
 8001814:	f200 81df 	bhi.w	8001bd6 <??SCC_SetPhaseVoltage_11>
 8001818:	e8df f011 	tbh	[pc, r1, lsl #1]

0800181c <??SCC_SetPhaseVoltage_1>:
 800181c:	0006 0088 01dd 015b 01dd 017d               ......[...}.

08001828 <??SCC_SetPhaseVoltage_48>:
 8001828:	f000 fd3c 	bl	80022a4 <SCC_KeDetection>
 800182c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800182e:	f881 0128 	strb.w	r0, [r1, #296]	; 0x128
 8001832:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001834:	f890 0128 	ldrb.w	r0, [r0, #296]	; 0x128
 8001838:	2802      	cmp	r0, #2
 800183a:	d125      	bne.n	8001888 <??SCC_SetPhaseVoltage_49>
 800183c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800183e:	6900      	ldr	r0, [r0, #16]
 8001840:	f00b fc9a 	bl	800d178 <SPD_GetAvrgMecSpeedUnit>
 8001844:	ebc0 1100 	rsb	r1, r0, r0, lsl #4
 8001848:	0088      	lsls	r0, r1, #2
 800184a:	f8df 23cc 	ldr.w	r2, [pc, #972]	; 8001c18 <??DataTable5_13>
 800184e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001850:	fb80 3202 	smull	r3, r2, r0, r2
 8001854:	1092      	asrs	r2, r2, #2
 8001856:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 800185a:	f8c5 20e8 	str.w	r2, [r5, #232]	; 0xe8
 800185e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001860:	6900      	ldr	r0, [r0, #16]
 8001862:	f00b fc89 	bl	800d178 <SPD_GetAvrgMecSpeedUnit>
 8001866:	4601      	mov	r1, r0
 8001868:	980c      	ldr	r0, [sp, #48]	; 0x30
 800186a:	f001 f829 	bl	80028c0 <SCC_SetMinStarupSpeedSTO>
 800186e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001870:	2001      	movs	r0, #1
 8001872:	f881 003f 	strb.w	r0, [r1, #63]	; 0x3f
 8001876:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001878:	f000 fd08 	bl	800228c <SCC_KeDetectionInit>
 800187c:	b008      	add	sp, #32
 800187e:	4620      	mov	r0, r4
 8001880:	ecbd 8b04 	vpop	{d8-d9}
 8001884:	b001      	add	sp, #4
 8001886:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001888 <??SCC_SetPhaseVoltage_49>:
 8001888:	2801      	cmp	r0, #1
 800188a:	f000 81a4 	beq.w	8001bd6 <??SCC_SetPhaseVoltage_11>
 800188e:	2803      	cmp	r0, #3
 8001890:	d121      	bne.n	80018d6 <??SCC_SetPhaseVoltage_50>
 8001892:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001894:	ed90 0a3b 	vldr	s0, [r0, #236]	; 0xec
 8001898:	eebb 0aef 	vcvt.f32.u32	s0, s0, #1
 800189c:	eefc 0ac0 	vcvt.u32.f32	s1, s0
 80018a0:	edc0 0a3b 	vstr	s1, [r0, #236]	; 0xec
 80018a4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80018a6:	f000 ffb3 	bl	8002810 <SCC_UpdateRevup>
 80018aa:	990c      	ldr	r1, [sp, #48]	; 0x30
 80018ac:	2006      	movs	r0, #6
 80018ae:	f881 0034 	strb.w	r0, [r1, #52]	; 0x34
 80018b2:	2008      	movs	r0, #8
 80018b4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80018b6:	68ca      	ldr	r2, [r1, #12]
 80018b8:	77d0      	strb	r0, [r2, #31]
 80018ba:	980c      	ldr	r0, [sp, #48]	; 0x30
 80018bc:	6800      	ldr	r0, [r0, #0]
 80018be:	f004 fe4b 	bl	8006558 <PWMC_SwitchOffPWM>
 80018c2:	48cf      	ldr	r0, [pc, #828]	; (8001c00 <??DataTable5_7>)
 80018c4:	8841      	ldrh	r1, [r0, #2]
 80018c6:	1c49      	adds	r1, r1, #1
 80018c8:	8041      	strh	r1, [r0, #2]
 80018ca:	b008      	add	sp, #32
 80018cc:	4620      	mov	r0, r4
 80018ce:	ecbd 8b04 	vpop	{d8-d9}
 80018d2:	b001      	add	sp, #4
 80018d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080018d6 <??SCC_SetPhaseVoltage_50>:
 80018d6:	2804      	cmp	r0, #4
 80018d8:	f040 817d 	bne.w	8001bd6 <??SCC_SetPhaseVoltage_11>
 80018dc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80018de:	ed90 0a49 	vldr	s0, [r0, #292]	; 0x124
 80018e2:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 80018e6:	eddf 0abf 	vldr	s1, [pc, #764]	; 8001be4 <??DataTable5>
 80018ea:	ee60 0a20 	vmul.f32	s1, s0, s1
 80018ee:	eefd 0ae0 	vcvt.s32.f32	s1, s1
 80018f2:	edc0 0a3a 	vstr	s1, [r0, #232]	; 0xe8
 80018f6:	980c      	ldr	r0, [sp, #48]	; 0x30
 80018f8:	f000 ff8a 	bl	8002810 <SCC_UpdateRevup>
 80018fc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80018fe:	2006      	movs	r0, #6
 8001900:	f881 0034 	strb.w	r0, [r1, #52]	; 0x34
 8001904:	2008      	movs	r0, #8
 8001906:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001908:	68ca      	ldr	r2, [r1, #12]
 800190a:	77d0      	strb	r0, [r2, #31]
 800190c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800190e:	6800      	ldr	r0, [r0, #0]
 8001910:	f004 fe22 	bl	8006558 <PWMC_SwitchOffPWM>
 8001914:	48ba      	ldr	r0, [pc, #744]	; (8001c00 <??DataTable5_7>)
 8001916:	8881      	ldrh	r1, [r0, #4]
 8001918:	1c49      	adds	r1, r1, #1
 800191a:	8081      	strh	r1, [r0, #4]
 800191c:	b008      	add	sp, #32
 800191e:	4620      	mov	r0, r4
 8001920:	ecbd 8b04 	vpop	{d8-d9}
 8001924:	b001      	add	sp, #4
 8001926:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001928 <??SCC_SetPhaseVoltage_3>:
 8001928:	0000 4780                                   ...G

0800192c <??SCC_SetPhaseVoltage_51>:
 800192c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800192e:	f8d0 0548 	ldr.w	r0, [r0, #1352]	; 0x548
 8001932:	688a      	ldr	r2, [r1, #8]
 8001934:	edd0 0a06 	vldr	s1, [r0, #24]
 8001938:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
 800193c:	edd0 1a07 	vldr	s3, [r0, #28]
 8001940:	ed9f 1aaa 	vldr	s2, [pc, #680]	; 8001bec <??DataTable5_2>
 8001944:	ee20 1a81 	vmul.f32	s2, s1, s2
 8001948:	ee00 1a10 	vmov	s0, r1
 800194c:	ee61 1a21 	vmul.f32	s3, s2, s3
 8001950:	edd0 0a13 	vldr	s1, [r0, #76]	; 0x4c
 8001954:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001956:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800195a:	eec0 0aa1 	vdiv.f32	s1, s1, s3
 800195e:	ed90 1a2f 	vldr	s2, [r0, #188]	; 0xbc
 8001962:	ee00 1a20 	vmla.f32	s2, s0, s1
 8001966:	ed80 1a2f 	vstr	s2, [r0, #188]	; 0xbc
 800196a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800196c:	6848      	ldr	r0, [r1, #4]
 800196e:	f00a f8a3 	bl	800bab8 <VBS_GetAvBusVoltage_d>
 8001972:	ee00 0a10 	vmov	s0, r0
 8001976:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001978:	6841      	ldr	r1, [r0, #4]
 800197a:	8848      	ldrh	r0, [r1, #2]
 800197c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800197e:	ee00 0a90 	vmov	s1, r0
 8001982:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8001986:	eef8 0a60 	vcvt.f32.u32	s1, s1
 800198a:	ee20 0a20 	vmul.f32	s0, s0, s1
 800198e:	ed9f 1a98 	vldr	s2, [pc, #608]	; 8001bf0 <??DataTable5_3>
 8001992:	ee20 0a01 	vmul.f32	s0, s0, s2
 8001996:	ed81 0a18 	vstr	s0, [r1, #96]	; 0x60
 800199a:	eddf 0a96 	vldr	s1, [pc, #600]	; 8001bf4 <??DataTable5_4>
 800199e:	980c      	ldr	r0, [sp, #48]	; 0x30
 80019a0:	6881      	ldr	r1, [r0, #8]
 80019a2:	f9b1 0016 	ldrsh.w	r0, [r1, #22]
 80019a6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80019a8:	ee01 0a10 	vmov	s2, r0
 80019ac:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 80019b0:	ee21 0a00 	vmul.f32	s0, s2, s0
 80019b4:	ed91 1a30 	vldr	s2, [r1, #192]	; 0xc0
 80019b8:	ee00 1a20 	vmla.f32	s2, s0, s1
 80019bc:	ed81 1a30 	vstr	s2, [r1, #192]	; 0xc0
 80019c0:	f242 7210 	movw	r2, #10000	; 0x2710
 80019c4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80019c6:	6888      	ldr	r0, [r1, #8]
 80019c8:	f9b0 1018 	ldrsh.w	r1, [r0, #24]
 80019cc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80019ce:	ed90 1a18 	vldr	s2, [r0, #96]	; 0x60
 80019d2:	ee00 1a10 	vmov	s0, r1
 80019d6:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80019da:	ee20 0a01 	vmul.f32	s0, s0, s2
 80019de:	ed90 1a31 	vldr	s2, [r0, #196]	; 0xc4
 80019e2:	ee00 1a20 	vmla.f32	s2, s0, s1
 80019e6:	ed80 1a31 	vstr	s2, [r0, #196]	; 0xc4
 80019ea:	990c      	ldr	r1, [sp, #48]	; 0x30
 80019ec:	f8d1 00cc 	ldr.w	r0, [r1, #204]	; 0xcc
 80019f0:	1c40      	adds	r0, r0, #1
 80019f2:	4290      	cmp	r0, r2
 80019f4:	f8c1 00cc 	str.w	r0, [r1, #204]	; 0xcc
 80019f8:	f0c0 80ed 	bcc.w	8001bd6 <??SCC_SetPhaseVoltage_11>
 80019fc:	ee00 0a10 	vmov	s0, r0
 8001a00:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001a02:	edd0 0a2f 	vldr	s1, [r0, #188]	; 0xbc
 8001a06:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8001a0a:	ee80 8a80 	vdiv.f32	s16, s1, s0
 8001a0e:	edd0 0a30 	vldr	s1, [r0, #192]	; 0xc0
 8001a12:	eec0 8a80 	vdiv.f32	s17, s1, s0
 8001a16:	edd0 0a31 	vldr	s1, [r0, #196]	; 0xc4
 8001a1a:	ee80 9a80 	vdiv.f32	s18, s1, s0
 8001a1e:	f000 fc35 	bl	800228c <SCC_KeDetectionInit>
 8001a22:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001a24:	6900      	ldr	r0, [r0, #16]
 8001a26:	f00b fba7 	bl	800d178 <SPD_GetAvrgMecSpeedUnit>
 8001a2a:	ee00 0a10 	vmov	s0, r0
 8001a2e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001a30:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8001a34:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 8001a38:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8001a3c:	edd0 0a19 	vldr	s1, [r0, #100]	; 0x64
 8001a40:	ed9f 1a6d 	vldr	s2, [pc, #436]	; 8001bf8 <??DataTable5_5>
 8001a44:	ee40 8ac8 	vmls.f32	s17, s1, s16
 8001a48:	ee60 9a01 	vmul.f32	s19, s0, s2
 8001a4c:	edd0 0a12 	vldr	s1, [r0, #72]	; 0x48
 8001a50:	ee20 0a20 	vmul.f32	s0, s0, s1
 8001a54:	ed9f 1a69 	vldr	s2, [pc, #420]	; 8001bfc <??DataTable5_6>
 8001a58:	ee20 1a01 	vmul.f32	s2, s0, s2
 8001a5c:	ed90 0a1a 	vldr	s0, [r0, #104]	; 0x68
 8001a60:	ee21 0a00 	vmul.f32	s0, s2, s0
 8001a64:	ee00 9a08 	vmla.f32	s18, s0, s16
 8001a68:	ee28 0aa8 	vmul.f32	s0, s17, s17
 8001a6c:	ee09 0a09 	vmla.f32	s0, s18, s18
 8001a70:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8001a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a78:	db02      	blt.n	8001a80 <??SCC_SetPhaseVoltage_52>
 8001a7a:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8001a7e:	e001      	b.n	8001a84 <??SCC_SetPhaseVoltage_53>

08001a80 <??SCC_SetPhaseVoltage_52>:
 8001a80:	ed9f 8a60 	vldr	s16, [pc, #384]	; 8001c04 <??DataTable5_8>

08001a84 <??SCC_SetPhaseVoltage_53>:
 8001a84:	ed9f 0a60 	vldr	s0, [pc, #384]	; 8001c08 <??DataTable5_9>
 8001a88:	ee28 0a00 	vmul.f32	s0, s16, s0
 8001a8c:	eddf 0a5f 	vldr	s1, [pc, #380]	; 8001c0c <??DataTable5_10>
 8001a90:	ee60 0a20 	vmul.f32	s1, s0, s1
 8001a94:	ee80 0aa9 	vdiv.f32	s0, s1, s19
 8001a98:	ed80 0a1b 	vstr	s0, [r0, #108]	; 0x6c
 8001a9c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001a9e:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
 8001aa0:	f7ff f863 	bl	8000b6a <OTT_SetKe>
 8001aa4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001aa6:	edd0 0a18 	vldr	s1, [r0, #96]	; 0x60
 8001aaa:	ed9f 1a59 	vldr	s2, [pc, #356]	; 8001c10 <??DataTable5_11>
 8001aae:	ee89 0a88 	vdiv.f32	s0, s19, s16
 8001ab2:	ee80 1a81 	vdiv.f32	s2, s1, s2
 8001ab6:	ee20 0a01 	vmul.f32	s0, s0, s2
 8001aba:	ed80 0a34 	vstr	s0, [r0, #208]	; 0xd0
 8001abe:	2102      	movs	r1, #2
 8001ac0:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001ac2:	f880 103f 	strb.w	r1, [r0, #63]	; 0x3f
 8001ac6:	b008      	add	sp, #32
 8001ac8:	4620      	mov	r0, r4
 8001aca:	ecbd 8b04 	vpop	{d8-d9}
 8001ace:	b001      	add	sp, #4
 8001ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ad2 <??SCC_SetPhaseVoltage_54>:
 8001ad2:	9800      	ldr	r0, [sp, #0]
 8001ad4:	f00b f9ba 	bl	800ce4c <REMNG_Calc>
 8001ad8:	9800      	ldr	r0, [sp, #0]
 8001ada:	f00b f9d9 	bl	800ce90 <REMNG_RampCompleted>
 8001ade:	2800      	cmp	r0, #0
 8001ae0:	d079      	beq.n	8001bd6 <??SCC_SetPhaseVoltage_11>
 8001ae2:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001ae4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001ae6:	f00b fb47 	bl	800d178 <SPD_GetAvrgMecSpeedUnit>
 8001aea:	ee00 0a10 	vmov	s0, r0
 8001aee:	eeba 0a67 	vcvt.f32.s16	s0, s0, #1
 8001af2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8001af6:	ee10 1a10 	vmov	r1, s0
 8001afa:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001afc:	b209      	sxth	r1, r1
 8001afe:	f000 fedf 	bl	80028c0 <SCC_SetMinStarupSpeedSTO>
 8001b02:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001b04:	2004      	movs	r0, #4
 8001b06:	f881 003f 	strb.w	r0, [r1, #63]	; 0x3f
 8001b0a:	b008      	add	sp, #32
 8001b0c:	4620      	mov	r0, r4
 8001b0e:	ecbd 8b04 	vpop	{d8-d9}
 8001b12:	b001      	add	sp, #4
 8001b14:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b16 <??SCC_SetPhaseVoltage_55>:
 8001b16:	6a00      	ldr	r0, [r0, #32]
 8001b18:	f00b fad6 	bl	800d0c8 <RUC_Completed>
 8001b1c:	b118      	cbz	r0, 8001b26 <??SCC_SetPhaseVoltage_56>
 8001b1e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001b20:	2003      	movs	r0, #3
 8001b22:	f881 003f 	strb.w	r0, [r1, #63]	; 0x3f

08001b26 <??SCC_SetPhaseVoltage_56>:
 8001b26:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001b28:	68c0      	ldr	r0, [r0, #12]
 8001b2a:	f003 f9a5 	bl	8004e78 <MCI_GetSTMState>
 8001b2e:	2806      	cmp	r0, #6
 8001b30:	d151      	bne.n	8001bd6 <??SCC_SetPhaseVoltage_11>
 8001b32:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001b34:	2004      	movs	r0, #4
 8001b36:	f881 003f 	strb.w	r0, [r1, #63]	; 0x3f
 8001b3a:	b008      	add	sp, #32
 8001b3c:	4620      	mov	r0, r4
 8001b3e:	ecbd 8b04 	vpop	{d8-d9}
 8001b42:	b001      	add	sp, #4
 8001b44:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b46 <??SCC_SetPhaseVoltage_47>:
 8001b46:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001b48:	6800      	ldr	r0, [r0, #0]
 8001b4a:	f004 fd05 	bl	8006558 <PWMC_SwitchOffPWM>
 8001b4e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001b50:	f881 4034 	strb.w	r4, [r1, #52]	; 0x34
 8001b54:	b008      	add	sp, #32
 8001b56:	4620      	mov	r0, r4
 8001b58:	ecbd 8b04 	vpop	{d8-d9}
 8001b5c:	b001      	add	sp, #4
 8001b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b60 <??SCC_SetPhaseVoltage_57>:
 8001b60:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001b62:	68ca      	ldr	r2, [r1, #12]
 8001b64:	2008      	movs	r0, #8
 8001b66:	77d0      	strb	r0, [r2, #31]
 8001b68:	4620      	mov	r0, r4
 8001b6a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001b6c:	f881 4034 	strb.w	r4, [r1, #52]	; 0x34
 8001b70:	b008      	add	sp, #32
 8001b72:	ecbd 8b04 	vpop	{d8-d9}
 8001b76:	b001      	add	sp, #4
 8001b78:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b7a <??SCC_SetPhaseVoltage_58>:
 8001b7a:	68c1      	ldr	r1, [r0, #12]
 8001b7c:	7fc8      	ldrb	r0, [r1, #31]
 8001b7e:	2814      	cmp	r0, #20
 8001b80:	d123      	bne.n	8001bca <??SCC_SetPhaseVoltage_4>
 8001b82:	980c      	ldr	r0, [sp, #48]	; 0x30

08001b84 <??SCC_SetPhaseVoltage_59>:
 8001b84:	f8d0 10b8 	ldr.w	r1, [r0, #184]	; 0xb8
 8001b88:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8001b8c:	bf04      	itt	eq
 8001b8e:	990c      	ldreq	r1, [sp, #48]	; 0x30
 8001b90:	f8c1 40b8 	streq.w	r4, [r1, #184]	; 0xb8
 8001b94:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001b96:	f000 fa55 	bl	8002044 <SCC_GetIaCurrent>
 8001b9a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001b9c:	680a      	ldr	r2, [r1, #0]
 8001b9e:	2003      	movs	r0, #3
 8001ba0:	f882 007c 	strb.w	r0, [r2, #124]	; 0x7c
 8001ba4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001ba6:	f8d0 20b8 	ldr.w	r2, [r0, #184]	; 0xb8
 8001baa:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8001bae:	ed80 0a50 	vstr	s0, [r0, #320]	; 0x140
 8001bb2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001bb4:	f8d1 00b8 	ldr.w	r0, [r1, #184]	; 0xb8
 8001bb8:	1c40      	adds	r0, r0, #1
 8001bba:	f8c1 00b8 	str.w	r0, [r1, #184]	; 0xb8
 8001bbe:	b008      	add	sp, #32
 8001bc0:	4620      	mov	r0, r4
 8001bc2:	ecbd 8b04 	vpop	{d8-d9}
 8001bc6:	b001      	add	sp, #4
 8001bc8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001bca <??SCC_SetPhaseVoltage_4>:
 8001bca:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001bcc:	9904      	ldr	r1, [sp, #16]
 8001bce:	6800      	ldr	r0, [r0, #0]
 8001bd0:	f004 fb30 	bl	8006234 <PWMC_SetPhaseVoltage>

08001bd4 <??SCC_SetPhaseVoltage_15>:
 8001bd4:	4604      	mov	r4, r0

08001bd6 <??SCC_SetPhaseVoltage_11>:
 8001bd6:	b008      	add	sp, #32
 8001bd8:	4620      	mov	r0, r4
 8001bda:	ecbd 8b04 	vpop	{d8-d9}
 8001bde:	b001      	add	sp, #4
 8001be0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001be4 <??DataTable5>:
 8001be4:	cccd 3f4c                                   ..L?

08001be8 <??DataTable5_1>:
 8001be8:	2298 2000                                   .". 

08001bec <??DataTable5_2>:
 8001bec:	0000 4780                                   ...G

08001bf0 <??DataTable5_3>:
 8001bf0:	0000 3780                                   ...7

08001bf4 <??DataTable5_4>:
 8001bf4:	cd46 3793                                   F..7

08001bf8 <??DataTable5_5>:
 8001bf8:	0000 4270                                   ..pB

08001bfc <??DataTable5_6>:
 8001bfc:	0fdb 40c9                                   ...@

08001c00 <??DataTable5_7>:
 8001c00:	1b9c 2000                                   ... 

08001c04 <??DataTable5_8>:
 8001c04:	0000 0000                                   ....

08001c08 <??DataTable5_9>:
 8001c08:	c471 3f9c                                   q..?

08001c0c <??DataTable5_10>:
 8001c0c:	0000 447a                                   ..zD

08001c10 <??DataTable5_11>:
 8001c10:	b3d7 3fdd                                   ...?

08001c14 <??DataTable5_12>:
 8001c14:	d090 0003                                   ....

08001c18 <??DataTable5_13>:
 8001c18:	6667 6666                                   gfff

08001c1c <SCC_MF>:
 8001c1c:	b570      	push	{r4, r5, r6, lr}
 8001c1e:	4604      	mov	r4, r0
 8001c20:	b086      	sub	sp, #24
 8001c22:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8001c24:	68e0      	ldr	r0, [r4, #12]
 8001c26:	f003 f927 	bl	8004e78 <MCI_GetSTMState>
 8001c2a:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
 8001c2e:	2906      	cmp	r1, #6
 8001c30:	d007      	beq.n	8001c42 <??SCC_MF_1>
 8001c32:	f0c0 8188 	bcc.w	8001f46 <??SCC_MF_2>
 8001c36:	2908      	cmp	r1, #8
 8001c38:	d062      	beq.n	8001d00 <??SCC_MF_3>
 8001c3a:	f0c0 8176 	bcc.w	8001f2a <??SCC_MF_4>
 8001c3e:	b006      	add	sp, #24
 8001c40:	bd70      	pop	{r4, r5, r6, pc}

08001c42 <??SCC_MF_1>:
 8001c42:	280b      	cmp	r0, #11
 8001c44:	f200 817f 	bhi.w	8001f46 <??SCC_MF_2>
 8001c48:	e8df f010 	tbh	[pc, r0, lsl #1]

08001c4c <??SCC_MF_0>:
 8001c4c:	000c 017d 017d 017d 004c 017d 017d 017d     ..}.}.}.L.}.}.}.
 8001c5c:	017d 017d 017d 017a                         }.}.}.z.

08001c64 <??SCC_MF_5>:
 8001c64:	4620      	mov	r0, r4
 8001c66:	f000 fca5 	bl	80025b4 <SCC_DetectBemf>
 8001c6a:	2800      	cmp	r0, #0
 8001c6c:	f040 816b 	bne.w	8001f46 <??SCC_MF_2>
 8001c70:	ed94 0a11 	vldr	s0, [r4, #68]	; 0x44
 8001c74:	edd4 0a1a 	vldr	s1, [r4, #104]	; 0x68
 8001c78:	ed94 1a19 	vldr	s2, [r4, #100]	; 0x64
 8001c7c:	68e0      	ldr	r0, [r4, #12]
 8001c7e:	ee20 2a80 	vmul.f32	s4, s1, s0
 8001c82:	ee81 2a02 	vdiv.f32	s4, s2, s4
 8001c86:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 8001c8a:	eef5 1a00 	vmov.f32	s3, #80	; 0x3e800000  0.250
 8001c8e:	ee72 2ac2 	vsub.f32	s5, s5, s4
 8001c92:	ee22 2aa1 	vmul.f32	s4, s5, s3
 8001c96:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 8001c9a:	ee72 2ac2 	vsub.f32	s5, s5, s4
 8001c9e:	eeb5 3a00 	vmov.f32	s6, #80	; 0x3e800000  0.250
 8001ca2:	ee32 3a03 	vadd.f32	s6, s4, s6
 8001ca6:	eef8 3a00 	vmov.f32	s7, #128	; 0xc0000000 -2.0
 8001caa:	ee73 3a23 	vadd.f32	s7, s6, s7
 8001cae:	eebd 3a00 	vmov.f32	s6, #208	; 0xbe800000 -0.250
 8001cb2:	ee32 3a83 	vadd.f32	s6, s5, s6
 8001cb6:	ee02 3a21 	vmla.f32	s6, s4, s3
 8001cba:	ee63 1a00 	vmul.f32	s3, s6, s0
 8001cbe:	ee81 1a20 	vdiv.f32	s2, s2, s1
 8001cc2:	ee03 1a80 	vmla.f32	s2, s7, s0
 8001cc6:	ee21 0a80 	vmul.f32	s0, s3, s0
 8001cca:	ee20 0a20 	vmul.f32	s0, s0, s1
 8001cce:	ed84 1a35 	vstr	s2, [r4, #212]	; 0xd4
 8001cd2:	ed84 0a36 	vstr	s0, [r4, #216]	; 0xd8
 8001cd6:	f003 f8d5 	bl	8004e84 <MCI_StartMotor>
 8001cda:	6820      	ldr	r0, [r4, #0]
 8001cdc:	f004 fc3c 	bl	8006558 <PWMC_SwitchOffPWM>
 8001ce0:	b006      	add	sp, #24
 8001ce2:	bd70      	pop	{r4, r5, r6, pc}

08001ce4 <??SCC_MF_6>:
 8001ce4:	2008      	movs	r0, #8
 8001ce6:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
 8001cea:	4620      	mov	r0, r4
 8001cec:	f7ff f846 	bl	8000d7c <SCC_InitKeDetRevup>
 8001cf0:	2001      	movs	r0, #1
 8001cf2:	f884 0128 	strb.w	r0, [r4, #296]	; 0x128
 8001cf6:	4620      	mov	r0, r4
 8001cf8:	f000 fac8 	bl	800228c <SCC_KeDetectionInit>
 8001cfc:	b006      	add	sp, #24
 8001cfe:	bd70      	pop	{r4, r5, r6, pc}

08001d00 <??SCC_MF_3>:
 8001d00:	f894 003f 	ldrb.w	r0, [r4, #63]	; 0x3f
 8001d04:	2802      	cmp	r0, #2
 8001d06:	f040 811e 	bne.w	8001f46 <??SCC_MF_2>
 8001d0a:	edd4 1a34 	vldr	s3, [r4, #208]	; 0xd0
 8001d0e:	ed94 2a1b 	vldr	s4, [r4, #108]	; 0x6c
 8001d12:	ee21 2a82 	vmul.f32	s4, s3, s4
 8001d16:	eddf 2ac9 	vldr	s5, [pc, #804]	; 800203c <??DataTable8>
 8001d1a:	ee62 2a22 	vmul.f32	s5, s4, s5
 8001d1e:	eddf 1ac8 	vldr	s3, [pc, #800]	; 8002040 <??DataTable8_1>
 8001d22:	f9b4 304c 	ldrsh.w	r3, [r4, #76]	; 0x4c
 8001d26:	ed94 2a14 	vldr	s4, [r4, #80]	; 0x50
 8001d2a:	ed94 3a1a 	vldr	s6, [r4, #104]	; 0x68
 8001d2e:	edd4 4a19 	vldr	s9, [r4, #100]	; 0x64
 8001d32:	ed94 5a35 	vldr	s10, [r4, #212]	; 0xd4
 8001d36:	eec2 1aa1 	vdiv.f32	s3, s5, s3
 8001d3a:	edd4 2a11 	vldr	s5, [r4, #68]	; 0x44
 8001d3e:	ee63 3a02 	vmul.f32	s7, s6, s4
 8001d42:	ee04 3a10 	vmov	s8, r3
 8001d46:	ee23 3a22 	vmul.f32	s6, s6, s5
 8001d4a:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8001d4e:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 8001d52:	ee84 3a83 	vdiv.f32	s6, s9, s6
 8001d56:	ee84 4a23 	vdiv.f32	s8, s8, s7
 8001d5a:	eec5 4a22 	vdiv.f32	s9, s10, s5
 8001d5e:	ed9f 0ac6 	vldr	s0, [pc, #792]	; 8002078 <??DataTable9>
 8001d62:	eddf 0ac5 	vldr	s1, [pc, #788]	; 8002078 <??DataTable9>
 8001d66:	ed9f 1ac4 	vldr	s2, [pc, #784]	; 8002078 <??DataTable9>
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	200e      	movs	r0, #14
 8001d70:	eec1 3aa3 	vdiv.f32	s7, s3, s7
 8001d74:	ed9f 5ac1 	vldr	s10, [pc, #772]	; 800207c <??DataTable9_1>
 8001d78:	eddf 5ac1 	vldr	s11, [pc, #772]	; 8002080 <??DataTable9_2>
 8001d7c:	f05f 0301 	movs.w	r3, #1

08001d80 <??SCC_MF_7>:
 8001d80:	fa03 f600 	lsl.w	r6, r3, r0
 8001d84:	ee06 6a10 	vmov	s12, r6
 8001d88:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8001d8c:	ee63 6a06 	vmul.f32	s13, s6, s12
 8001d90:	eef4 6a65 	vcmp.f32	s13, s11
 8001d94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d98:	da06      	bge.n	8001da8 <??SCC_MF_8>
 8001d9a:	ee24 1a86 	vmul.f32	s2, s9, s12
 8001d9e:	eeb4 1a65 	vcmp.f32	s2, s11
 8001da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001da6:	d405      	bmi.n	8001db4 <??SCC_MF_9>

08001da8 <??SCC_MF_8>:
 8001da8:	1e40      	subs	r0, r0, #1
 8001daa:	b246      	sxtb	r6, r0
 8001dac:	2e00      	cmp	r6, #0
 8001dae:	dce7      	bgt.n	8001d80 <??SCC_MF_7>
 8001db0:	e01c      	b.n	8001dec <??SCC_MF_10>
 8001db2:	bf00      	nop

08001db4 <??SCC_MF_9>:
 8001db4:	eeb4 1a45 	vcmp.f32	s2, s10
 8001db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dbc:	d4f4      	bmi.n	8001da8 <??SCC_MF_8>
 8001dbe:	ee23 0a86 	vmul.f32	s0, s7, s12
 8001dc2:	eeb4 0a65 	vcmp.f32	s0, s11
 8001dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dca:	bfbe      	ittt	lt
 8001dcc:	ee64 0a06 	vmullt.f32	s1, s8, s12
 8001dd0:	eef4 0a65 	vcmplt.f32	s1, s11
 8001dd4:	eef1 fa10 	vmrslt	APSR_nzcv, fpscr
 8001dd8:	dae6      	bge.n	8001da8 <??SCC_MF_8>
 8001dda:	b240      	sxtb	r0, r0
 8001ddc:	ee03 0a10 	vmov	s6, r0
 8001de0:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8001de4:	eebd 3ac3 	vcvt.s32.f32	s6, s6
 8001de8:	ee13 2a10 	vmov	r2, s6

08001dec <??SCC_MF_10>:
 8001dec:	ed94 3a36 	vldr	s6, [r4, #216]	; 0xd8
 8001df0:	ee23 2a02 	vmul.f32	s4, s6, s4
 8001df4:	eec2 1a21 	vdiv.f32	s3, s4, s3
 8001df8:	f05f 000e 	movs.w	r0, #14
 8001dfc:	eec1 1aa2 	vdiv.f32	s3, s3, s5

08001e00 <??SCC_MF_11>:
 8001e00:	fa03 f600 	lsl.w	r6, r3, r0
 8001e04:	ee02 6a10 	vmov	s4, r6
 8001e08:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 8001e0c:	ee61 2a82 	vmul.f32	s5, s3, s4
 8001e10:	eef4 2a65 	vcmp.f32	s5, s11
 8001e14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e18:	d404      	bmi.n	8001e24 <??SCC_MF_12>

08001e1a <??SCC_MF_13>:
 8001e1a:	1e40      	subs	r0, r0, #1
 8001e1c:	b246      	sxtb	r6, r0
 8001e1e:	2e00      	cmp	r6, #0
 8001e20:	dcee      	bgt.n	8001e00 <??SCC_MF_11>
 8001e22:	e00d      	b.n	8001e40 <??SCC_MF_14>

08001e24 <??SCC_MF_12>:
 8001e24:	eef4 2a45 	vcmp.f32	s5, s10
 8001e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e2c:	d4f5      	bmi.n	8001e1a <??SCC_MF_13>
 8001e2e:	b240      	sxtb	r0, r0
 8001e30:	ee01 0a90 	vmov	s3, r0
 8001e34:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8001e38:	eefd 1ae1 	vcvt.s32.f32	s3, s3
 8001e3c:	ee11 1a90 	vmov	r1, s3

08001e40 <??SCC_MF_14>:
 8001e40:	eefd 1ae6 	vcvt.s32.f32	s3, s13
 8001e44:	ee11 0a90 	vmov	r0, s3
 8001e48:	f8ad 0000 	strh.w	r0, [sp]
 8001e4c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8001e50:	eebd 1ac1 	vcvt.s32.f32	s2, s2
 8001e54:	ee10 0a10 	vmov	r0, s0
 8001e58:	ee11 3a10 	vmov	r3, s2
 8001e5c:	f8ad 0004 	strh.w	r0, [sp, #4]
 8001e60:	f8ad 3002 	strh.w	r3, [sp, #2]
 8001e64:	eebd 0ae0 	vcvt.s32.f32	s0, s1
 8001e68:	eebd 1ae2 	vcvt.s32.f32	s2, s5
 8001e6c:	ee10 0a10 	vmov	r0, s0
 8001e70:	ee11 3a10 	vmov	r3, s2
 8001e74:	f8ad 0008 	strh.w	r0, [sp, #8]
 8001e78:	f8ad 3006 	strh.w	r3, [sp, #6]
 8001e7c:	eebd 0ac2 	vcvt.s32.f32	s0, s4
 8001e80:	eefd 0ac6 	vcvt.s32.f32	s1, s12
 8001e84:	ee10 0a10 	vmov	r0, s0
 8001e88:	ee10 3a90 	vmov	r3, s1
 8001e8c:	f8ad 000c 	strh.w	r0, [sp, #12]
 8001e90:	f8ad 300a 	strh.w	r3, [sp, #10]
 8001e94:	f8ad 200e 	strh.w	r2, [sp, #14]
 8001e98:	f8ad 1010 	strh.w	r1, [sp, #16]
 8001e9c:	4669      	mov	r1, sp
 8001e9e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001ea0:	f000 f854 	bl	8001f4c <STO_ReInit>
 8001ea4:	ed94 1a34 	vldr	s2, [r4, #208]	; 0xd0
 8001ea8:	ed94 0a11 	vldr	s0, [r4, #68]	; 0x44
 8001eac:	edd4 0a12 	vldr	s1, [r4, #72]	; 0x48
 8001eb0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001eb2:	eddf 1abb 	vldr	s3, [pc, #748]	; 80021a0 <??DataTable10>
 8001eb6:	ee61 1a21 	vmul.f32	s3, s2, s3
 8001eba:	ed9f 3aba 	vldr	s6, [pc, #744]	; 80021a4 <??DataTable10_1>
 8001ebe:	ee61 1aa0 	vmul.f32	s3, s3, s1
 8001ec2:	ee20 2a00 	vmul.f32	s4, s0, s0
 8001ec6:	ee21 1a03 	vmul.f32	s2, s2, s6
 8001eca:	eec1 1a82 	vdiv.f32	s3, s3, s4
 8001ece:	eef5 2a00 	vmov.f32	s5, #80	; 0x3e800000  0.250
 8001ed2:	ee61 0a20 	vmul.f32	s1, s2, s1
 8001ed6:	ee61 2aa2 	vmul.f32	s5, s3, s5
 8001eda:	ee80 0a80 	vdiv.f32	s0, s1, s0
 8001ede:	eefd 2ae2 	vcvt.s32.f32	s5, s5
 8001ee2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8001ee6:	ee12 2a90 	vmov	r2, s5
 8001eea:	ee10 1a10 	vmov	r1, s0
 8001eee:	b212      	sxth	r2, r2
 8001ef0:	b209      	sxth	r1, r1
 8001ef2:	f00b fd07 	bl	800d904 <STO_SetPLLGains>
 8001ef6:	6920      	ldr	r0, [r4, #16]
 8001ef8:	f00b f93a 	bl	800d170 <SPD_GetElAngle>
 8001efc:	4606      	mov	r6, r0
 8001efe:	6920      	ldr	r0, [r4, #16]
 8001f00:	f00b f93e 	bl	800d180 <SPD_GetElSpeedDpp>
 8001f04:	4601      	mov	r1, r0
 8001f06:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001f08:	4632      	mov	r2, r6
 8001f0a:	f00b fd0f 	bl	800d92c <STO_SetPLL>
 8001f0e:	4628      	mov	r0, r5
 8001f10:	f00a ff94 	bl	800ce3c <REMNG_Init>
 8001f14:	22fa      	movs	r2, #250	; 0xfa
 8001f16:	f64e 2160 	movw	r1, #60000	; 0xea60
 8001f1a:	4628      	mov	r0, r5
 8001f1c:	f00a ffd8 	bl	800ced0 <REMNG_ExecRamp>
 8001f20:	2003      	movs	r0, #3
 8001f22:	f884 003f 	strb.w	r0, [r4, #63]	; 0x3f
 8001f26:	b006      	add	sp, #24
 8001f28:	bd70      	pop	{r4, r5, r6, pc}

08001f2a <??SCC_MF_4>:
 8001f2a:	b938      	cbnz	r0, 8001f3c <??SCC_MF_15>
 8001f2c:	68e0      	ldr	r0, [r4, #12]
 8001f2e:	f002 ffa9 	bl	8004e84 <MCI_StartMotor>
 8001f32:	2000      	movs	r0, #0
 8001f34:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
 8001f38:	b006      	add	sp, #24
 8001f3a:	bd70      	pop	{r4, r5, r6, pc}

08001f3c <??SCC_MF_15>:
 8001f3c:	280b      	cmp	r0, #11
 8001f3e:	d102      	bne.n	8001f46 <??SCC_MF_2>

08001f40 <??SCC_MF_16>:
 8001f40:	68e0      	ldr	r0, [r4, #12]
 8001f42:	f002 ffef 	bl	8004f24 <MCI_FaultAcknowledged>

08001f46 <??SCC_MF_2>:
 8001f46:	b006      	add	sp, #24
 8001f48:	bd70      	pop	{r4, r5, r6, pc}
	...

08001f4c <STO_ReInit>:
 8001f4c:	b430      	push	{r4, r5}
 8001f4e:	4602      	mov	r2, r0
 8001f50:	8808      	ldrh	r0, [r1, #0]
 8001f52:	f8df 5b74 	ldr.w	r5, [pc, #2932]	; 8002ac8 <??DataTable22_7>
 8001f56:	8410      	strh	r0, [r2, #32]
 8001f58:	2400      	movs	r4, #0
 8001f5a:	884b      	ldrh	r3, [r1, #2]
 8001f5c:	8453      	strh	r3, [r2, #34]	; 0x22
 8001f5e:	8888      	ldrh	r0, [r1, #4]
 8001f60:	8490      	strh	r0, [r2, #36]	; 0x24
 8001f62:	88cb      	ldrh	r3, [r1, #6]
 8001f64:	84d3      	strh	r3, [r2, #38]	; 0x26
 8001f66:	8908      	ldrh	r0, [r1, #8]
 8001f68:	8510      	strh	r0, [r2, #40]	; 0x28
 8001f6a:	894b      	ldrh	r3, [r1, #10]
 8001f6c:	8593      	strh	r3, [r2, #44]	; 0x2c
 8001f6e:	8988      	ldrh	r0, [r1, #12]
 8001f70:	85d0      	strh	r0, [r2, #46]	; 0x2e
 8001f72:	89cb      	ldrh	r3, [r1, #14]
 8001f74:	f8a2 311c 	strh.w	r3, [r2, #284]	; 0x11c
 8001f78:	2301      	movs	r3, #1
 8001f7a:	8a08      	ldrh	r0, [r1, #16]
 8001f7c:	f8a2 011e 	strh.w	r0, [r2, #286]	; 0x11e
 8001f80:	f8a2 4032 	strh.w	r4, [r2, #50]	; 0x32
 8001f84:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 8001f88:	fb95 f0f0 	sdiv	r0, r5, r0
 8001f8c:	b200      	sxth	r0, r0
 8001f8e:	b1e8      	cbz	r0, 8001fcc <??STO_ReInit_0>

08001f90 <??STO_ReInit_1>:
 8001f90:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8001f94:	03c0      	lsls	r0, r0, #15
 8001f96:	1400      	asrs	r0, r0, #16
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	1c64      	adds	r4, r4, #1
 8001f9c:	b1b0      	cbz	r0, 8001fcc <??STO_ReInit_0>
 8001f9e:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8001fa2:	03c0      	lsls	r0, r0, #15
 8001fa4:	1400      	asrs	r0, r0, #16
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	1c64      	adds	r4, r4, #1
 8001faa:	b178      	cbz	r0, 8001fcc <??STO_ReInit_0>
 8001fac:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8001fb0:	03c0      	lsls	r0, r0, #15
 8001fb2:	1400      	asrs	r0, r0, #16
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	1c64      	adds	r4, r4, #1
 8001fb8:	2800      	cmp	r0, #0
 8001fba:	d007      	beq.n	8001fcc <??STO_ReInit_0>
 8001fbc:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8001fc0:	03c0      	lsls	r0, r0, #15
 8001fc2:	1400      	asrs	r0, r0, #16
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	1c64      	adds	r4, r4, #1
 8001fc8:	2800      	cmp	r0, #0
 8001fca:	d1e1      	bne.n	8001f90 <??STO_ReInit_1>

08001fcc <??STO_ReInit_0>:
 8001fcc:	8654      	strh	r4, [r2, #50]	; 0x32
 8001fce:	8613      	strh	r3, [r2, #48]	; 0x30
 8001fd0:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 8001fd4:	f9b2 1030 	ldrsh.w	r1, [r2, #48]	; 0x30
 8001fd8:	f8df 3af0 	ldr.w	r3, [pc, #2800]	; 8002acc <??DataTable22_8>
 8001fdc:	fb10 f101 	smulbb	r1, r0, r1
 8001fe0:	fb81 4303 	smull	r4, r3, r1, r3
 8001fe4:	121b      	asrs	r3, r3, #8
 8001fe6:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8001fea:	8553      	strh	r3, [r2, #42]	; 0x2a
 8001fec:	bc30      	pop	{r4, r5}
 8001fee:	4770      	bx	lr

08001ff0 <SCC_GetCurrent>:
 8001ff0:	f8d0 1548 	ldr.w	r1, [r0, #1352]	; 0x548
 8001ff4:	6880      	ldr	r0, [r0, #8]
 8001ff6:	ed91 0a06 	vldr	s0, [r1, #24]
 8001ffa:	ed91 1a07 	vldr	s2, [r1, #28]
 8001ffe:	eddf 0aa2 	vldr	s1, [pc, #648]	; 8002288 <??DataTable11>
 8002002:	ee60 0a20 	vmul.f32	s1, s0, s1
 8002006:	ee20 1a81 	vmul.f32	s2, s1, s2
 800200a:	ed91 0a13 	vldr	s0, [r1, #76]	; 0x4c
 800200e:	f9b0 1000 	ldrsh.w	r1, [r0]
 8002012:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 8002016:	ee00 1a90 	vmov	s1, r1
 800201a:	ee80 0a01 	vdiv.f32	s0, s0, s2
 800201e:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8002022:	ee01 0a10 	vmov	s2, r0
 8002026:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 800202a:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 800202e:	ee41 0a40 	vmls.f32	s1, s2, s0
 8002032:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8002036:	ee20 0a80 	vmul.f32	s0, s1, s0
 800203a:	4770      	bx	lr

0800203c <??DataTable8>:
 800203c:	0481 3fb5                                   ...?

08002040 <??DataTable8_1>:
 8002040:	8000 44d8                                   ...D

08002044 <SCC_GetIaCurrent>:
 8002044:	f8d0 1548 	ldr.w	r1, [r0, #1352]	; 0x548
 8002048:	6880      	ldr	r0, [r0, #8]
 800204a:	edd1 0a06 	vldr	s1, [r1, #24]
 800204e:	f9b0 2000 	ldrsh.w	r2, [r0]
 8002052:	edd1 1a07 	vldr	s3, [r1, #28]
 8002056:	ed9f 1a8c 	vldr	s2, [pc, #560]	; 8002288 <??DataTable11>
 800205a:	ee20 1a81 	vmul.f32	s2, s1, s2
 800205e:	ee00 2a10 	vmov	s0, r2
 8002062:	ee61 1a21 	vmul.f32	s3, s2, s3
 8002066:	edd1 0a13 	vldr	s1, [r1, #76]	; 0x4c
 800206a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800206e:	eec0 0aa1 	vdiv.f32	s1, s1, s3
 8002072:	ee20 0a60 	vnmul.f32	s0, s0, s1
 8002076:	4770      	bx	lr

08002078 <??DataTable9>:
 8002078:	0000 0000                                   ....

0800207c <??DataTable9_1>:
 800207c:	fe00 c6ff                                   ....

08002080 <??DataTable9_2>:
 8002080:	fe01 46ff                                   ...F

08002084 <??DataTable9_3>:
 8002084:	cccd 3dcc                                   ...=

08002088 <SCC_GetSteps>:
 8002088:	2005      	movs	r0, #5
 800208a:	4770      	bx	lr

0800208c <SCC_GetState>:
 800208c:	b530      	push	{r4, r5, lr}
 800208e:	4604      	mov	r4, r0
 8002090:	b081      	sub	sp, #4
 8002092:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002094:	f7fe fc84 	bl	80009a0 <OTT_IsSpeedPITuned>
 8002098:	2500      	movs	r5, #0
 800209a:	2801      	cmp	r0, #1
 800209c:	bf08      	it	eq
 800209e:	f884 5138 	strbeq.w	r5, [r4, #312]	; 0x138
 80020a2:	68e0      	ldr	r0, [r4, #12]
 80020a4:	f002 fee8 	bl	8004e78 <MCI_GetSTMState>
 80020a8:	280a      	cmp	r0, #10
 80020aa:	d106      	bne.n	80020ba <??SCC_GetState_1>
 80020ac:	f884 5138 	strb.w	r5, [r4, #312]	; 0x138
 80020b0:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 80020b4:	4628      	mov	r0, r5
 80020b6:	b001      	add	sp, #4
 80020b8:	bd30      	pop	{r4, r5, pc}

080020ba <??SCC_GetState_1>:
 80020ba:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
 80020be:	290d      	cmp	r1, #13
 80020c0:	d820      	bhi.n	8002104 <??SCC_GetState_2>
 80020c2:	e8df f001 	tbb	[pc, r1]

080020c6 <??SCC_GetState_0>:
 80020c6:	0a07 120e 1212 1616 0716 1f1a 1e1f          ..............

080020d4 <??SCC_GetState_3>:
 80020d4:	f894 0138 	ldrb.w	r0, [r4, #312]	; 0x138
 80020d8:	b1a0      	cbz	r0, 8002104 <??SCC_GetState_2>

080020da <??SCC_GetState_4>:
 80020da:	2501      	movs	r5, #1
 80020dc:	4628      	mov	r0, r5
 80020de:	b001      	add	sp, #4
 80020e0:	bd30      	pop	{r4, r5, pc}

080020e2 <??SCC_GetState_5>:
 80020e2:	2502      	movs	r5, #2
 80020e4:	4628      	mov	r0, r5
 80020e6:	b001      	add	sp, #4
 80020e8:	bd30      	pop	{r4, r5, pc}

080020ea <??SCC_GetState_6>:
 80020ea:	2503      	movs	r5, #3
 80020ec:	4628      	mov	r0, r5
 80020ee:	b001      	add	sp, #4
 80020f0:	bd30      	pop	{r4, r5, pc}

080020f2 <??SCC_GetState_7>:
 80020f2:	2504      	movs	r5, #4
 80020f4:	4628      	mov	r0, r5
 80020f6:	b001      	add	sp, #4
 80020f8:	bd30      	pop	{r4, r5, pc}

080020fa <??SCC_GetState_8>:
 80020fa:	250e      	movs	r5, #14
 80020fc:	4628      	mov	r0, r5
 80020fe:	b001      	add	sp, #4
 8002100:	bd30      	pop	{r4, r5, pc}

08002102 <??SCC_GetState_9>:
 8002102:	250f      	movs	r5, #15

08002104 <??SCC_GetState_2>:
 8002104:	4628      	mov	r0, r5
 8002106:	b001      	add	sp, #4
 8002108:	bd30      	pop	{r4, r5, pc}

0800210a <SCC_GetRs>:
 800210a:	ed90 0a19 	vldr	s0, [r0, #100]	; 0x64
 800210e:	f003 b883 	b.w	8005218 <MCM_floatToIntBit>

08002112 <SCC_GetLs>:
 8002112:	ed90 0a1a 	vldr	s0, [r0, #104]	; 0x68
 8002116:	f003 b87f 	b.w	8005218 <MCM_floatToIntBit>

0800211a <SCC_GetKe>:
 800211a:	ed90 0a1b 	vldr	s0, [r0, #108]	; 0x6c
 800211e:	f003 b87b 	b.w	8005218 <MCM_floatToIntBit>

08002122 <SCC_GetVbus>:
 8002122:	ed90 0a18 	vldr	s0, [r0, #96]	; 0x60
 8002126:	f003 b877 	b.w	8005218 <MCM_floatToIntBit>

0800212a <SCC_GetEstNominalSpeed>:
 800212a:	ed90 0a34 	vldr	s0, [r0, #208]	; 0xd0
 800212e:	f003 b873 	b.w	8005218 <MCM_floatToIntBit>

08002132 <SCC_ForceProfile>:
 8002132:	f890 103f 	ldrb.w	r1, [r0, #63]	; 0x3f
 8002136:	2904      	cmp	r1, #4
 8002138:	bf1c      	itt	ne
 800213a:	f890 1034 	ldrbne.w	r1, [r0, #52]	; 0x34
 800213e:	290a      	cmpne	r1, #10
 8002140:	d122      	bne.n	8002188 <??SCC_ForceProfile_0>
 8002142:	2200      	movs	r2, #0
 8002144:	f880 203f 	strb.w	r2, [r0, #63]	; 0x3f
 8002148:	f880 20f0 	strb.w	r2, [r0, #240]	; 0xf0
 800214c:	f8a0 211c 	strh.w	r2, [r0, #284]	; 0x11c
 8002150:	f880 211e 	strb.w	r2, [r0, #286]	; 0x11e
 8002154:	f8a0 2120 	strh.w	r2, [r0, #288]	; 0x120
 8002158:	f8c0 2124 	str.w	r2, [r0, #292]	; 0x124
 800215c:	f8c0 213c 	str.w	r2, [r0, #316]	; 0x13c
 8002160:	f880 2128 	strb.w	r2, [r0, #296]	; 0x128
 8002164:	f44f 7cfa 	mov.w	ip, #500	; 0x1f4
 8002168:	f8d0 20e4 	ldr.w	r2, [r0, #228]	; 0xe4
 800216c:	f8df 1960 	ldr.w	r1, [pc, #2400]	; 8002ad0 <??DataTable22_9>
 8002170:	fb82 3101 	smull	r3, r1, r2, r1
 8002174:	1089      	asrs	r1, r1, #2
 8002176:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 800217a:	f8c0 10ec 	str.w	r1, [r0, #236]	; 0xec
 800217e:	f8c0 c0ec 	str.w	ip, [r0, #236]	; 0xec
 8002182:	2100      	movs	r1, #0
 8002184:	f880 1034 	strb.w	r1, [r0, #52]	; 0x34

08002188 <??SCC_ForceProfile_0>:
 8002188:	2201      	movs	r2, #1
 800218a:	f880 2138 	strb.w	r2, [r0, #312]	; 0x138
 800218e:	2100      	movs	r1, #0
 8002190:	f8df 041c 	ldr.w	r0, [pc, #1052]	; 80025b0 <??DataTable13_3>
 8002194:	8001      	strh	r1, [r0, #0]
 8002196:	2200      	movs	r2, #0
 8002198:	8042      	strh	r2, [r0, #2]
 800219a:	2300      	movs	r3, #0
 800219c:	8083      	strh	r3, [r0, #4]
 800219e:	4770      	bx	lr

080021a0 <??DataTable10>:
 80021a0:	edb0 49b7                                   ...I

080021a4 <??DataTable10_1>:
 80021a4:	0000 4405                                   ...D

080021a8 <SCC_StopProfile>:
 80021a8:	b510      	push	{r4, lr}
 80021aa:	4604      	mov	r4, r0
 80021ac:	6820      	ldr	r0, [r4, #0]
 80021ae:	f004 f9d3 	bl	8006558 <PWMC_SwitchOffPWM>
 80021b2:	2100      	movs	r1, #0
 80021b4:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
 80021b8:	f884 1138 	strb.w	r1, [r4, #312]	; 0x138
 80021bc:	bd10      	pop	{r4, pc}
	...

080021c0 <SCC_CurrCtrl>:
 80021c0:	f8d0 2548 	ldr.w	r2, [r0, #1352]	; 0x548
 80021c4:	edd2 0a06 	vldr	s1, [r2, #24]
 80021c8:	edd2 1a07 	vldr	s3, [r2, #28]
 80021cc:	2100      	movs	r1, #0
 80021ce:	ed9f 1a2e 	vldr	s2, [pc, #184]	; 8002288 <??DataTable11>
 80021d2:	ee20 1a81 	vmul.f32	s2, s1, s2
 80021d6:	ee61 1a21 	vmul.f32	s3, s2, s3
 80021da:	edd2 0a13 	vldr	s1, [r2, #76]	; 0x4c
 80021de:	6882      	ldr	r2, [r0, #8]
 80021e0:	5e53      	ldrsh	r3, [r2, r1]
 80021e2:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80021e6:	ee01 3a10 	vmov	s2, r3
 80021ea:	eec0 0aa1 	vdiv.f32	s1, s1, s3
 80021ee:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 80021f2:	ee01 2a90 	vmov	s3, r2
 80021f6:	ee21 1a60 	vnmul.f32	s2, s2, s1
 80021fa:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 80021fe:	ee01 1ae0 	vmls.f32	s2, s3, s1
 8002202:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8002206:	ee61 0a20 	vmul.f32	s1, s2, s1
 800220a:	eef4 0a40 	vcmp.f32	s1, s0
 800220e:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
 8002210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002214:	db18      	blt.n	8002248 <??SCC_CurrCtrl_0>
 8002216:	b10a      	cbz	r2, 800221c <??SCC_CurrCtrl_1>
 8002218:	1e52      	subs	r2, r2, #1
 800221a:	8782      	strh	r2, [r0, #60]	; 0x3c

0800221c <??SCC_CurrCtrl_1>:
 800221c:	ee30 0ac0 	vsub.f32	s0, s1, s0
 8002220:	eddf 0aca 	vldr	s1, [pc, #808]	; 800254c <??DataTable12>
 8002224:	eeb4 0a60 	vcmp.f32	s0, s1
 8002228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800222c:	d41b      	bmi.n	8002266 <??SCC_CurrCtrl_2>

0800222e <??SCC_CurrCtrl_3>:
 800222e:	f890 20dc 	ldrb.w	r2, [r0, #220]	; 0xdc
 8002232:	1e52      	subs	r2, r2, #1
 8002234:	b253      	sxtb	r3, r2
 8002236:	f113 0f13 	cmn.w	r3, #19
 800223a:	da1c      	bge.n	8002276 <??SCC_CurrCtrl_4>
 800223c:	f06f 0213 	mvn.w	r2, #19
 8002240:	f880 20dc 	strb.w	r2, [r0, #220]	; 0xdc
 8002244:	4608      	mov	r0, r1
 8002246:	4770      	bx	lr

08002248 <??SCC_CurrCtrl_0>:
 8002248:	f64e 2c60 	movw	ip, #60000	; 0xea60
 800224c:	4562      	cmp	r2, ip
 800224e:	bfbc      	itt	lt
 8002250:	1c52      	addlt	r2, r2, #1
 8002252:	8782      	strhlt	r2, [r0, #60]	; 0x3c
 8002254:	ee30 0a60 	vsub.f32	s0, s0, s1
 8002258:	eddf 0abc 	vldr	s1, [pc, #752]	; 800254c <??DataTable12>
 800225c:	eeb4 0a60 	vcmp.f32	s0, s1
 8002260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002264:	d5e3      	bpl.n	800222e <??SCC_CurrCtrl_3>

08002266 <??SCC_CurrCtrl_2>:
 8002266:	f890 20dc 	ldrb.w	r2, [r0, #220]	; 0xdc
 800226a:	1c52      	adds	r2, r2, #1
 800226c:	b253      	sxtb	r3, r2
 800226e:	2b14      	cmp	r3, #20
 8002270:	bfa8      	it	ge
 8002272:	2214      	movge	r2, #20
 8002274:	da02      	bge.n	800227c <??SCC_CurrCtrl_5>

08002276 <??SCC_CurrCtrl_4>:
 8002276:	b253      	sxtb	r3, r2
 8002278:	2b00      	cmp	r3, #0
 800227a:	d400      	bmi.n	800227e <??SCC_CurrCtrl_6>

0800227c <??SCC_CurrCtrl_5>:
 800227c:	2101      	movs	r1, #1

0800227e <??SCC_CurrCtrl_6>:
 800227e:	f880 20dc 	strb.w	r2, [r0, #220]	; 0xdc
 8002282:	4608      	mov	r0, r1
 8002284:	4770      	bx	lr
	...

08002288 <??DataTable11>:
 8002288:	0000 4780                                   ...G

0800228c <SCC_KeDetectionInit>:
 800228c:	2100      	movs	r1, #0
 800228e:	f8c0 10bc 	str.w	r1, [r0, #188]	; 0xbc
 8002292:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
 8002296:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
 800229a:	f8c0 10c8 	str.w	r1, [r0, #200]	; 0xc8
 800229e:	f8c0 10cc 	str.w	r1, [r0, #204]	; 0xcc
 80022a2:	4770      	bx	lr

080022a4 <SCC_KeDetection>:
 80022a4:	ed9f 1aaa 	vldr	s2, [pc, #680]	; 8002550 <??DataTable12_1>
 80022a8:	b570      	push	{r4, r5, r6, lr}
 80022aa:	4604      	mov	r4, r0
 80022ac:	2501      	movs	r5, #1
 80022ae:	ed2d 8b06 	vpush	{d8-d10}
 80022b2:	f8d4 0548 	ldr.w	r0, [r4, #1352]	; 0x548
 80022b6:	68a1      	ldr	r1, [r4, #8]
 80022b8:	edd0 0a06 	vldr	s1, [r0, #24]
 80022bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80022c0:	edd0 1a07 	vldr	s3, [r0, #28]
 80022c4:	ee20 1a81 	vmul.f32	s2, s1, s2
 80022c8:	ee00 2a10 	vmov	s0, r2
 80022cc:	ee61 1a21 	vmul.f32	s3, s2, s3
 80022d0:	edd0 0a13 	vldr	s1, [r0, #76]	; 0x4c
 80022d4:	ed94 1a2f 	vldr	s2, [r4, #188]	; 0xbc
 80022d8:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80022dc:	eec0 0aa1 	vdiv.f32	s1, s1, s3
 80022e0:	ee00 1a20 	vmla.f32	s2, s0, s1
 80022e4:	6860      	ldr	r0, [r4, #4]
 80022e6:	ed84 1a2f 	vstr	s2, [r4, #188]	; 0xbc
 80022ea:	f009 fbe5 	bl	800bab8 <VBS_GetAvBusVoltage_d>
 80022ee:	ee00 0a10 	vmov	s0, r0
 80022f2:	6860      	ldr	r0, [r4, #4]
 80022f4:	edd4 1a30 	vldr	s3, [r4, #192]	; 0xc0
 80022f8:	8841      	ldrh	r1, [r0, #2]
 80022fa:	68a0      	ldr	r0, [r4, #8]
 80022fc:	ee00 1a90 	vmov	s1, r1
 8002300:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8002304:	eef8 0a60 	vcvt.f32.u32	s1, s1
 8002308:	ee20 0a20 	vmul.f32	s0, s0, s1
 800230c:	ed9f 1aa5 	vldr	s2, [pc, #660]	; 80025a4 <??DataTable13>
 8002310:	ee20 0a01 	vmul.f32	s0, s0, s2
 8002314:	ed84 0a18 	vstr	s0, [r4, #96]	; 0x60
 8002318:	eddf 0aa3 	vldr	s1, [pc, #652]	; 80025a8 <??DataTable13_1>
 800231c:	f9b0 1016 	ldrsh.w	r1, [r0, #22]
 8002320:	68a0      	ldr	r0, [r4, #8]
 8002322:	ee01 1a10 	vmov	s2, r1
 8002326:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 800232a:	ee21 0a00 	vmul.f32	s0, s2, s0
 800232e:	ee40 1a20 	vmla.f32	s3, s0, s1
 8002332:	edc4 1a30 	vstr	s3, [r4, #192]	; 0xc0
 8002336:	eddf 8a9d 	vldr	s17, [pc, #628]	; 80025ac <??DataTable13_2>
 800233a:	f9b0 1018 	ldrsh.w	r1, [r0, #24]
 800233e:	ed94 1a18 	vldr	s2, [r4, #96]	; 0x60
 8002342:	6920      	ldr	r0, [r4, #16]
 8002344:	ee00 1a10 	vmov	s0, r1
 8002348:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800234c:	ee20 1a01 	vmul.f32	s2, s0, s2
 8002350:	ed94 0a31 	vldr	s0, [r4, #196]	; 0xc4
 8002354:	ee01 0a20 	vmla.f32	s0, s2, s1
 8002358:	ed84 0a31 	vstr	s0, [r4, #196]	; 0xc4
 800235c:	f00a ff0c 	bl	800d178 <SPD_GetAvrgMecSpeedUnit>
 8002360:	f246 6167 	movw	r1, #26215	; 0x6667
 8002364:	fb10 f101 	smulbb	r1, r0, r1
 8002368:	1488      	asrs	r0, r1, #18
 800236a:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800236e:	b200      	sxth	r0, r0
 8002370:	ee00 0a10 	vmov	s0, r0
 8002374:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
 8002378:	edd4 0a12 	vldr	s1, [r4, #72]	; 0x48
 800237c:	ed94 1a32 	vldr	s2, [r4, #200]	; 0xc8
 8002380:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8002384:	f242 7110 	movw	r1, #10000	; 0x2710
 8002388:	ee00 1a20 	vmla.f32	s2, s0, s1
 800238c:	1c40      	adds	r0, r0, #1
 800238e:	4288      	cmp	r0, r1
 8002390:	ed84 1a32 	vstr	s2, [r4, #200]	; 0xc8
 8002394:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
 8002398:	f0c0 80d3 	bcc.w	8002542 <??SCC_KeDetection_0>
 800239c:	ee00 0a10 	vmov	s0, r0
 80023a0:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 80023a4:	edd4 0a2f 	vldr	s1, [r4, #188]	; 0xbc
 80023a8:	ed94 1a30 	vldr	s2, [r4, #192]	; 0xc0
 80023ac:	eec0 9a80 	vdiv.f32	s19, s1, s0
 80023b0:	ee81 aa00 	vdiv.f32	s20, s2, s0
 80023b4:	edd4 0a31 	vldr	s1, [r4, #196]	; 0xc4
 80023b8:	ed94 1a32 	vldr	s2, [r4, #200]	; 0xc8
 80023bc:	eec0 aa80 	vdiv.f32	s21, s1, s0
 80023c0:	ee81 9a00 	vdiv.f32	s18, s2, s0
 80023c4:	4620      	mov	r0, r4
 80023c6:	f7ff ff61 	bl	800228c <SCC_KeDetectionInit>
 80023ca:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80023ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023d2:	f000 80b6 	beq.w	8002542 <??SCC_KeDetection_0>
 80023d6:	6920      	ldr	r0, [r4, #16]
 80023d8:	f00a fece 	bl	800d178 <SPD_GetAvrgMecSpeedUnit>
 80023dc:	ebc0 1100 	rsb	r1, r0, r0, lsl #4
 80023e0:	0088      	lsls	r0, r1, #2
 80023e2:	f8df 26ec 	ldr.w	r2, [pc, #1772]	; 8002ad0 <??DataTable22_9>
 80023e6:	ed94 1a19 	vldr	s2, [r4, #100]	; 0x64
 80023ea:	fb80 3202 	smull	r3, r2, r0, r2
 80023ee:	1092      	asrs	r2, r2, #2
 80023f0:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 80023f4:	ee00 2a10 	vmov	s0, r2
 80023f8:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80023fc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8002400:	ee10 6a10 	vmov	r6, s0
 8002404:	eddf 0a98 	vldr	s1, [pc, #608]	; 8002668 <??DataTable14>
 8002408:	ee29 8a20 	vmul.f32	s16, s18, s1
 800240c:	ed94 0a1a 	vldr	s0, [r4, #104]	; 0x68
 8002410:	ee28 0a00 	vmul.f32	s0, s16, s0
 8002414:	ee01 aa69 	vmls.f32	s20, s2, s19
 8002418:	ee40 aa29 	vmla.f32	s21, s0, s19
 800241c:	ee2a 0a0a 	vmul.f32	s0, s20, s20
 8002420:	ee0a 0aaa 	vmla.f32	s0, s21, s21
 8002424:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8002428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800242c:	db01      	blt.n	8002432 <??SCC_KeDetection_1>
 800242e:	eef1 8ac0 	vsqrt.f32	s17, s0

08002432 <??SCC_KeDetection_1>:
 8002432:	f8b4 111c 	ldrh.w	r1, [r4, #284]	; 0x11c
 8002436:	f104 00f4 	add.w	r0, r4, #244	; 0xf4
 800243a:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 800243e:	f504 7084 	add.w	r0, r4, #264	; 0x108
 8002442:	edc2 8a00 	vstr	s17, [r2]
 8002446:	f8b4 111c 	ldrh.w	r1, [r4, #284]	; 0x11c
 800244a:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 800244e:	ed82 8a00 	vstr	s16, [r2]
 8002452:	f8b4 011c 	ldrh.w	r0, [r4, #284]	; 0x11c
 8002456:	1c40      	adds	r0, r0, #1
 8002458:	f8a4 011c 	strh.w	r0, [r4, #284]	; 0x11c
 800245c:	b280      	uxth	r0, r0
 800245e:	2805      	cmp	r0, #5
 8002460:	d304      	bcc.n	800246c <??SCC_KeDetection_2>
 8002462:	2000      	movs	r0, #0
 8002464:	f8a4 011c 	strh.w	r0, [r4, #284]	; 0x11c
 8002468:	f884 511e 	strb.w	r5, [r4, #286]	; 0x11e

0800246c <??SCC_KeDetection_2>:
 800246c:	f894 011e 	ldrb.w	r0, [r4, #286]	; 0x11e
 8002470:	2800      	cmp	r0, #0
 8002472:	d050      	beq.n	8002516 <??SCC_KeDetection_3>
 8002474:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
 8002478:	f001 f9b4 	bl	80037e4 <__aeabi_i2d>
 800247c:	f8df 2654 	ldr.w	r2, [pc, #1620]	; 8002ad4 <??DataTable22_10>
 8002480:	f8df 3654 	ldr.w	r3, [pc, #1620]	; 8002ad8 <??DataTable22_11>
 8002484:	f001 fa18 	bl	80038b8 <__aeabi_dmul>
 8002488:	f001 fc28 	bl	8003cdc <__aeabi_d2iz>
 800248c:	42b0      	cmp	r0, r6
 800248e:	da42      	bge.n	8002516 <??SCC_KeDetection_3>
 8002490:	2205      	movs	r2, #5
 8002492:	f104 01f4 	add.w	r1, r4, #244	; 0xf4
 8002496:	f504 7084 	add.w	r0, r4, #264	; 0x108
 800249a:	f000 f8e9 	bl	8002670 <Fitab>
 800249e:	ed9f 2a73 	vldr	s4, [pc, #460]	; 800266c <??DataTable14_1>
 80024a2:	eef0 1a68 	vmov.f32	s3, s17
 80024a6:	eeb0 1a48 	vmov.f32	s2, s16
 80024aa:	4620      	mov	r0, r4
 80024ac:	f000 f852 	bl	8002554 <SCC_CheckBemf>
 80024b0:	2800      	cmp	r0, #0
 80024b2:	f894 00f0 	ldrb.w	r0, [r4, #240]	; 0xf0
 80024b6:	d00e      	beq.n	80024d6 <??SCC_KeDetection_4>
 80024b8:	b950      	cbnz	r0, 80024d0 <??SCC_KeDetection_5>
 80024ba:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
 80024be:	f8df 161c 	ldr.w	r1, [pc, #1564]	; 8002adc <??DataTable22_12>
 80024c2:	1830      	adds	r0, r6, r0
 80024c4:	fb80 2101 	smull	r2, r1, r0, r1
 80024c8:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 80024cc:	f8c4 113c 	str.w	r1, [r4, #316]	; 0x13c

080024d0 <??SCC_KeDetection_5>:
 80024d0:	f884 50f0 	strb.w	r5, [r4, #240]	; 0xf0
 80024d4:	e01f      	b.n	8002516 <??SCC_KeDetection_3>

080024d6 <??SCC_KeDetection_4>:
 80024d6:	2801      	cmp	r0, #1
 80024d8:	d115      	bne.n	8002506 <??SCC_KeDetection_6>
 80024da:	ed9f 0acc 	vldr	s0, [pc, #816]	; 800280c <??DataTable15>
 80024de:	ee29 0a00 	vmul.f32	s0, s18, s0
 80024e2:	edd4 0a12 	vldr	s1, [r4, #72]	; 0x48
 80024e6:	eec0 0a20 	vdiv.f32	s1, s0, s1
 80024ea:	2100      	movs	r1, #0
 80024ec:	eefc 0ae0 	vcvt.u32.f32	s1, s1
 80024f0:	f884 10f0 	strb.w	r1, [r4, #240]	; 0xf0
 80024f4:	edc4 0a49 	vstr	s1, [r4, #292]	; 0x124
 80024f8:	f8a4 1120 	strh.w	r1, [r4, #288]	; 0x120
 80024fc:	2504      	movs	r5, #4
 80024fe:	ecbd 8b06 	vpop	{d8-d10}
 8002502:	4628      	mov	r0, r5
 8002504:	bd70      	pop	{r4, r5, r6, pc}

08002506 <??SCC_KeDetection_6>:
 8002506:	f8b4 0120 	ldrh.w	r0, [r4, #288]	; 0x120
 800250a:	1c40      	adds	r0, r0, #1
 800250c:	f8a4 0120 	strh.w	r0, [r4, #288]	; 0x120
 8002510:	b280      	uxth	r0, r0
 8002512:	2804      	cmp	r0, #4
 8002514:	da07      	bge.n	8002526 <??SCC_KeDetection_7>

08002516 <??SCC_KeDetection_3>:
 8002516:	6a20      	ldr	r0, [r4, #32]
 8002518:	f00a fdec 	bl	800d0f4 <RUC_FirstAccelerationStageReached>
 800251c:	2800      	cmp	r0, #0
 800251e:	f894 00f0 	ldrb.w	r0, [r4, #240]	; 0xf0
 8002522:	d002      	beq.n	800252a <??SCC_KeDetection_8>
 8002524:	b948      	cbnz	r0, 800253a <??SCC_KeDetection_9>

08002526 <??SCC_KeDetection_7>:
 8002526:	2503      	movs	r5, #3
 8002528:	e008      	b.n	800253c <??SCC_KeDetection_10>

0800252a <??SCC_KeDetection_8>:
 800252a:	b150      	cbz	r0, 8002542 <??SCC_KeDetection_0>
 800252c:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 8002530:	42b0      	cmp	r0, r6
 8002532:	d206      	bcs.n	8002542 <??SCC_KeDetection_0>
 8002534:	6a20      	ldr	r0, [r4, #32]
 8002536:	f00a fdcd 	bl	800d0d4 <RUC_Stop>

0800253a <??SCC_KeDetection_9>:
 800253a:	2502      	movs	r5, #2

0800253c <??SCC_KeDetection_10>:
 800253c:	2000      	movs	r0, #0
 800253e:	f8a4 0120 	strh.w	r0, [r4, #288]	; 0x120

08002542 <??SCC_KeDetection_0>:
 8002542:	4628      	mov	r0, r5
 8002544:	ecbd 8b06 	vpop	{d8-d10}
 8002548:	bd70      	pop	{r4, r5, r6, pc}
	...

0800254c <??DataTable12>:
 800254c:	cccd 3e4c                                   ..L>

08002550 <??DataTable12_1>:
 8002550:	0000 4780                                   ...G

08002554 <SCC_CheckBemf>:
 8002554:	ee01 0a20 	vmla.f32	s0, s2, s1
 8002558:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800255c:	ee32 1a01 	vadd.f32	s2, s4, s2
 8002560:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 8002564:	ee21 1a00 	vmul.f32	s2, s2, s0
 8002568:	ee32 2ac2 	vsub.f32	s4, s5, s4
 800256c:	4601      	mov	r1, r0
 800256e:	ee22 0a00 	vmul.f32	s0, s4, s0
 8002572:	2000      	movs	r0, #0
 8002574:	eeb4 0a61 	vcmp.f32	s0, s3
 8002578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800257c:	bf44      	itt	mi
 800257e:	eef4 1a41 	vcmpmi.f32	s3, s2
 8002582:	eef1 fa10 	vmrsmi	APSR_nzcv, fpscr
 8002586:	d50b      	bpl.n	80025a0 <??SCC_CheckBemf_0>
 8002588:	eddf 1ad6 	vldr	s3, [pc, #856]	; 80028e4 <??DataTable17>
 800258c:	ed91 0a12 	vldr	s0, [r1, #72]	; 0x48
 8002590:	ee81 0a80 	vdiv.f32	s0, s3, s0
 8002594:	eeb4 0a60 	vcmp.f32	s0, s1
 8002598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800259c:	bf48      	it	mi
 800259e:	2001      	movmi	r0, #1

080025a0 <??SCC_CheckBemf_0>:
 80025a0:	4770      	bx	lr
	...

080025a4 <??DataTable13>:
 80025a4:	0000 3780                                   ...7

080025a8 <??DataTable13_1>:
 80025a8:	cd46 3793                                   F..7

080025ac <??DataTable13_2>:
 80025ac:	0000 0000                                   ....

080025b0 <??DataTable13_3>:
 80025b0:	1b9c 2000                                   ... 

080025b4 <SCC_DetectBemf>:
 80025b4:	b530      	push	{r4, r5, lr}
 80025b6:	4605      	mov	r5, r0
 80025b8:	b081      	sub	sp, #4
 80025ba:	f895 0540 	ldrb.w	r0, [r5, #1344]	; 0x540
 80025be:	2401      	movs	r4, #1
 80025c0:	b990      	cbnz	r0, 80025e8 <??SCC_DetectBemf_0>
 80025c2:	6828      	ldr	r0, [r5, #0]
 80025c4:	f004 f820 	bl	8006608 <PWMC_RLTurnOnLowSidesAndStart>
 80025c8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80025cc:	f8a5 1130 	strh.w	r1, [r5, #304]	; 0x130
 80025d0:	f241 3088 	movw	r0, #5000	; 0x1388
 80025d4:	f8a5 0132 	strh.w	r0, [r5, #306]	; 0x132
 80025d8:	2100      	movs	r1, #0
 80025da:	f8c5 10b8 	str.w	r1, [r5, #184]	; 0xb8
 80025de:	f885 4540 	strb.w	r4, [r5, #1344]	; 0x540
 80025e2:	4620      	mov	r0, r4
 80025e4:	b001      	add	sp, #4
 80025e6:	bd30      	pop	{r4, r5, pc}

080025e8 <??SCC_DetectBemf_0>:
 80025e8:	f8b5 0132 	ldrh.w	r0, [r5, #306]	; 0x132
 80025ec:	b3a0      	cbz	r0, 8002658 <??SCC_DetectBemf_1>
 80025ee:	1e40      	subs	r0, r0, #1
 80025f0:	f8a5 0132 	strh.w	r0, [r5, #306]	; 0x132
 80025f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025f8:	ed9f 0abb 	vldr	s0, [pc, #748]	; 80028e8 <??DataTable17_1>
 80025fc:	462a      	mov	r2, r5
 80025fe:	4608      	mov	r0, r1

08002600 <??SCC_DetectBemf_2>:
 8002600:	edd2 0a50 	vldr	s1, [r2, #320]	; 0x140
 8002604:	1d12      	adds	r2, r2, #4
 8002606:	1e40      	subs	r0, r0, #1
 8002608:	ee30 0a20 	vadd.f32	s0, s0, s1
 800260c:	d1f8      	bne.n	8002600 <??SCC_DetectBemf_2>
 800260e:	eddf 0ab7 	vldr	s1, [pc, #732]	; 80028ec <??DataTable17_2>
 8002612:	ee20 0a20 	vmul.f32	s0, s0, s1
 8002616:	ed9f 1ab4 	vldr	s2, [pc, #720]	; 80028e8 <??DataTable17_1>
 800261a:	4628      	mov	r0, r5

0800261c <??SCC_DetectBemf_3>:
 800261c:	edd0 1a50 	vldr	s3, [r0, #320]	; 0x140
 8002620:	1d00      	adds	r0, r0, #4
 8002622:	ee71 1ac0 	vsub.f32	s3, s3, s0
 8002626:	1e49      	subs	r1, r1, #1
 8002628:	ee01 1aa1 	vmla.f32	s2, s3, s3
 800262c:	d1f6      	bne.n	800261c <??SCC_DetectBemf_3>
 800262e:	ee21 0a20 	vmul.f32	s0, s2, s1
 8002632:	eddf 0acc 	vldr	s1, [pc, #816]	; 8002964 <??DataTable18>
 8002636:	eeb4 0a60 	vcmp.f32	s0, s1
 800263a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800263e:	bfa8      	it	ge
 8002640:	f44f 707a 	movge.w	r0, #1000	; 0x3e8
 8002644:	da03      	bge.n	800264e <??SCC_DetectBemf_4>
 8002646:	f8b5 0130 	ldrh.w	r0, [r5, #304]	; 0x130
 800264a:	b128      	cbz	r0, 8002658 <??SCC_DetectBemf_1>
 800264c:	1e40      	subs	r0, r0, #1

0800264e <??SCC_DetectBemf_4>:
 800264e:	f8a5 0130 	strh.w	r0, [r5, #304]	; 0x130
 8002652:	b001      	add	sp, #4
 8002654:	4620      	mov	r0, r4
 8002656:	bd30      	pop	{r4, r5, pc}

08002658 <??SCC_DetectBemf_1>:
 8002658:	2100      	movs	r1, #0
 800265a:	f885 1540 	strb.w	r1, [r5, #1344]	; 0x540
 800265e:	2400      	movs	r4, #0
 8002660:	4620      	mov	r0, r4
 8002662:	b001      	add	sp, #4
 8002664:	bd30      	pop	{r4, r5, pc}
	...

08002668 <??DataTable14>:
 8002668:	0fdb 40c9                                   ...@

0800266c <??DataTable14_1>:
 800266c:	cccd 3dcc                                   ...=

08002670 <Fitab>:
 8002670:	b4f0      	push	{r4, r5, r6, r7}
 8002672:	4603      	mov	r3, r0
 8002674:	f20f 40a0 	addw	r0, pc, #1184	; 0x4a0
 8002678:	460c      	mov	r4, r1
 800267a:	ec90 1a02 	vldmia	r0, {s2-s3}
 800267e:	b291      	uxth	r1, r2
 8002680:	2500      	movs	r5, #0
 8002682:	b290      	uxth	r0, r2
 8002684:	ee00 1a10 	vmov	s0, r1
 8002688:	2800      	cmp	r0, #0
 800268a:	ed9f 2a97 	vldr	s4, [pc, #604]	; 80028e8 <??DataTable17_1>
 800268e:	eddf 2a96 	vldr	s5, [pc, #600]	; 80028e8 <??DataTable17_1>
 8002692:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8002696:	eddf 0a94 	vldr	s1, [pc, #592]	; 80028e8 <??DataTable17_1>
 800269a:	d04b      	beq.n	8002734 <??Fitab_0>
 800269c:	f010 0103 	ands.w	r1, r0, #3
 80026a0:	f000 800f 	beq.w	80026c2 <??Fitab_1>

080026a4 <??Fitab_2>:
 80026a4:	eb03 0685 	add.w	r6, r3, r5, lsl #2
 80026a8:	eb04 0785 	add.w	r7, r4, r5, lsl #2
 80026ac:	1c6d      	adds	r5, r5, #1
 80026ae:	ed96 3a00 	vldr	s6, [r6]
 80026b2:	edd7 3a00 	vldr	s7, [r7]
 80026b6:	1e49      	subs	r1, r1, #1
 80026b8:	ee32 2a03 	vadd.f32	s4, s4, s6
 80026bc:	ee72 2aa3 	vadd.f32	s5, s5, s7
 80026c0:	d1f0      	bne.n	80026a4 <??Fitab_2>

080026c2 <??Fitab_1>:
 80026c2:	0880      	lsrs	r0, r0, #2
 80026c4:	f000 8036 	beq.w	8002734 <??Fitab_0>

080026c8 <??Fitab_3>:
 80026c8:	eb03 0185 	add.w	r1, r3, r5, lsl #2
 80026cc:	eb04 0685 	add.w	r6, r4, r5, lsl #2
 80026d0:	1c6d      	adds	r5, r5, #1
 80026d2:	ed91 3a00 	vldr	s6, [r1]
 80026d6:	edd6 3a00 	vldr	s7, [r6]
 80026da:	eb03 0185 	add.w	r1, r3, r5, lsl #2
 80026de:	eb04 0685 	add.w	r6, r4, r5, lsl #2
 80026e2:	ee32 2a03 	vadd.f32	s4, s4, s6
 80026e6:	ee72 2aa3 	vadd.f32	s5, s5, s7
 80026ea:	1c6d      	adds	r5, r5, #1
 80026ec:	ed91 3a00 	vldr	s6, [r1]
 80026f0:	edd6 3a00 	vldr	s7, [r6]
 80026f4:	eb03 0185 	add.w	r1, r3, r5, lsl #2
 80026f8:	eb04 0685 	add.w	r6, r4, r5, lsl #2
 80026fc:	ee32 2a03 	vadd.f32	s4, s4, s6
 8002700:	ee72 2aa3 	vadd.f32	s5, s5, s7
 8002704:	1c6d      	adds	r5, r5, #1
 8002706:	ed91 3a00 	vldr	s6, [r1]
 800270a:	edd6 3a00 	vldr	s7, [r6]
 800270e:	eb03 0185 	add.w	r1, r3, r5, lsl #2
 8002712:	eb04 0685 	add.w	r6, r4, r5, lsl #2
 8002716:	ee32 2a03 	vadd.f32	s4, s4, s6
 800271a:	ee72 2aa3 	vadd.f32	s5, s5, s7
 800271e:	1c6d      	adds	r5, r5, #1
 8002720:	ed91 3a00 	vldr	s6, [r1]
 8002724:	edd6 3a00 	vldr	s7, [r6]
 8002728:	1e40      	subs	r0, r0, #1
 800272a:	ee32 2a03 	vadd.f32	s4, s4, s6
 800272e:	ee72 2aa3 	vadd.f32	s5, s5, s7
 8002732:	d1c9      	bne.n	80026c8 <??Fitab_3>

08002734 <??Fitab_0>:
 8002734:	2100      	movs	r1, #0
 8002736:	b290      	uxth	r0, r2
 8002738:	2800      	cmp	r0, #0
 800273a:	ee82 3a00 	vdiv.f32	s6, s4, s0
 800273e:	d05d      	beq.n	80027fc <??Fitab_4>
 8002740:	b292      	uxth	r2, r2
 8002742:	f012 0003 	ands.w	r0, r2, #3
 8002746:	d014      	beq.n	8002772 <??Fitab_5>

08002748 <??Fitab_6>:
 8002748:	eb03 0581 	add.w	r5, r3, r1, lsl #2
 800274c:	eb04 0681 	add.w	r6, r4, r1, lsl #2
 8002750:	edd5 3a00 	vldr	s7, [r5]
 8002754:	ed96 4a00 	vldr	s8, [r6]
 8002758:	eef0 4a61 	vmov.f32	s9, s3
 800275c:	1c49      	adds	r1, r1, #1
 800275e:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8002762:	ee43 4a84 	vmla.f32	s9, s7, s8
 8002766:	1e40      	subs	r0, r0, #1
 8002768:	ee43 0aa3 	vmla.f32	s1, s7, s7
 800276c:	eef0 1a64 	vmov.f32	s3, s9
 8002770:	d1ea      	bne.n	8002748 <??Fitab_6>

08002772 <??Fitab_5>:
 8002772:	0892      	lsrs	r2, r2, #2
 8002774:	f000 8042 	beq.w	80027fc <??Fitab_4>

08002778 <??Fitab_7>:
 8002778:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 800277c:	eb04 0581 	add.w	r5, r4, r1, lsl #2
 8002780:	edd0 3a00 	vldr	s7, [r0]
 8002784:	edd5 4a00 	vldr	s9, [r5]
 8002788:	1c49      	adds	r1, r1, #1
 800278a:	ee33 4ac3 	vsub.f32	s8, s7, s6
 800278e:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 8002792:	eef0 3a61 	vmov.f32	s7, s3
 8002796:	eb04 0581 	add.w	r5, r4, r1, lsl #2
 800279a:	1c49      	adds	r1, r1, #1
 800279c:	ee44 3a24 	vmla.f32	s7, s8, s9
 80027a0:	ed90 5a00 	vldr	s10, [r0]
 80027a4:	edd5 5a00 	vldr	s11, [r5]
 80027a8:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 80027ac:	ee75 4a43 	vsub.f32	s9, s10, s6
 80027b0:	eb04 0581 	add.w	r5, r4, r1, lsl #2
 80027b4:	1c49      	adds	r1, r1, #1
 80027b6:	ee44 3aa5 	vmla.f32	s7, s9, s11
 80027ba:	ed90 5a00 	vldr	s10, [r0]
 80027be:	edd5 5a00 	vldr	s11, [r5]
 80027c2:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 80027c6:	eb04 0581 	add.w	r5, r4, r1, lsl #2
 80027ca:	ee35 5a43 	vsub.f32	s10, s10, s6
 80027ce:	ee44 0a04 	vmla.f32	s1, s8, s8
 80027d2:	ee45 3a25 	vmla.f32	s7, s10, s11
 80027d6:	ed90 6a00 	vldr	s12, [r0]
 80027da:	ed95 4a00 	vldr	s8, [r5]
 80027de:	ee44 0aa4 	vmla.f32	s1, s9, s9
 80027e2:	1c49      	adds	r1, r1, #1
 80027e4:	ee76 5a43 	vsub.f32	s11, s12, s6
 80027e8:	ee45 0a05 	vmla.f32	s1, s10, s10
 80027ec:	ee45 3a84 	vmla.f32	s7, s11, s8
 80027f0:	1e52      	subs	r2, r2, #1
 80027f2:	ee45 0aa5 	vmla.f32	s1, s11, s11
 80027f6:	eef0 1a63 	vmov.f32	s3, s7
 80027fa:	d1bd      	bne.n	8002778 <??Fitab_7>

080027fc <??Fitab_4>:
 80027fc:	bcf0      	pop	{r4, r5, r6, r7}
 80027fe:	eec1 0aa0 	vdiv.f32	s1, s3, s1
 8002802:	ee42 2a60 	vmls.f32	s5, s4, s1
 8002806:	ee82 0a80 	vdiv.f32	s0, s5, s0
 800280a:	4770      	bx	lr

0800280c <??DataTable15>:
 800280c:	0000 4270                                   ..pB

08002810 <SCC_UpdateRevup>:
 8002810:	b530      	push	{r4, r5, lr}
 8002812:	b081      	sub	sp, #4
 8002814:	4604      	mov	r4, r0
 8002816:	ed2d 8b02 	vpush	{d8}
 800281a:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
 800281e:	ed94 0a3a 	vldr	s0, [r4, #232]	; 0xe8
 8002822:	ee00 0a90 	vmov	s1, r0
 8002826:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800282a:	eef8 0a60 	vcvt.f32.u32	s1, s1
 800282e:	eec0 0a20 	vdiv.f32	s1, s0, s1
 8002832:	ed9f 1a9e 	vldr	s2, [pc, #632]	; 8002aac <??DataTable22>
 8002836:	ee20 8a81 	vmul.f32	s16, s1, s2
 800283a:	eddf 1a9d 	vldr	s3, [pc, #628]	; 8002ab0 <??DataTable22_1>
 800283e:	eeb4 8a61 	vcmp.f32	s16, s3
 8002842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002846:	db09      	blt.n	800285c <??SCC_UpdateRevup_0>
 8002848:	eb00 1080 	add.w	r0, r0, r0, lsl #6
 800284c:	ee00 0a10 	vmov	s0, r0
 8002850:	ed84 0a3a 	vstr	s0, [r4, #232]	; 0xe8
 8002854:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8002858:	ed9f 8a96 	vldr	s16, [pc, #600]	; 8002ab4 <??DataTable22_2>

0800285c <??SCC_UpdateRevup_0>:
 800285c:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 8002860:	ee20 0a20 	vmul.f32	s0, s0, s1
 8002864:	ed9f 1a94 	vldr	s2, [pc, #592]	; 8002ab8 <??DataTable22_3>
 8002868:	ee80 0a01 	vdiv.f32	s0, s0, s2
 800286c:	eebd 1ac0 	vcvt.s32.f32	s2, s0
 8002870:	ee11 5a10 	vmov	r5, s2
 8002874:	b229      	sxth	r1, r5
 8002876:	4620      	mov	r0, r4
 8002878:	f000 f822 	bl	80028c0 <SCC_SetMinStarupSpeedSTO>
 800287c:	6a20      	ldr	r0, [r4, #32]
 800287e:	b22a      	sxth	r2, r5
 8002880:	2101      	movs	r1, #1
 8002882:	f00a fc47 	bl	800d114 <RUC_SetPhaseFinalMecSpeedUnit>
 8002886:	6a20      	ldr	r0, [r4, #32]
 8002888:	b22a      	sxth	r2, r5
 800288a:	2102      	movs	r1, #2
 800288c:	f00a fc42 	bl	800d114 <RUC_SetPhaseFinalMecSpeedUnit>
 8002890:	6a20      	ldr	r0, [r4, #32]
 8002892:	b22a      	sxth	r2, r5
 8002894:	2103      	movs	r1, #3
 8002896:	f00a fc3d 	bl	800d114 <RUC_SetPhaseFinalMecSpeedUnit>
 800289a:	6a20      	ldr	r0, [r4, #32]
 800289c:	b22a      	sxth	r2, r5
 800289e:	2104      	movs	r1, #4
 80028a0:	f00a fc38 	bl	800d114 <RUC_SetPhaseFinalMecSpeedUnit>
 80028a4:	eebd 0ac8 	vcvt.s32.f32	s0, s16
 80028a8:	ee10 0a10 	vmov	r0, s0
 80028ac:	b282      	uxth	r2, r0
 80028ae:	6a20      	ldr	r0, [r4, #32]
 80028b0:	ecbd 8b02 	vpop	{d8}
 80028b4:	2101      	movs	r1, #1
 80028b6:	b001      	add	sp, #4
 80028b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80028bc:	f00a bc24 	b.w	800d108 <RUC_SetPhaseDurationms>

080028c0 <SCC_SetMinStarupSpeedSTO>:
 80028c0:	ee00 1a10 	vmov	s0, r1
 80028c4:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80028c8:	eddf 0a7c 	vldr	s1, [pc, #496]	; 8002abc <??DataTable22_4>
 80028cc:	ee20 0a20 	vmul.f32	s0, s0, s1
 80028d0:	eeb0 0ac0 	vabs.f32	s0, s0
 80028d4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80028d8:	ee10 1a10 	vmov	r1, s0
 80028dc:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80028de:	b289      	uxth	r1, r1
 80028e0:	f00b b84c 	b.w	800d97c <STO_SetMinStartUpValidSpeedUnit>

080028e4 <??DataTable17>:
 80028e4:	b717 3ad1                                   ...:

080028e8 <??DataTable17_1>:
 80028e8:	0000 0000                                   ....

080028ec <??DataTable17_2>:
 80028ec:	0000 3b80                                   ...;

080028f0 <SCC_SetPolesPairs>:
 80028f0:	ee00 1a10 	vmov	s0, r1
 80028f4:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 80028f8:	ed80 0a12 	vstr	s0, [r0, #72]	; 0x48
 80028fc:	4770      	bx	lr
	...

08002900 <SCC_SetNominalCurrent>:
 8002900:	b530      	push	{r4, r5, lr}
 8002902:	eef5 0a00 	vmov.f32	s1, #80	; 0x3e800000  0.250
 8002906:	4604      	mov	r4, r0
 8002908:	ee60 0a20 	vmul.f32	s1, s0, s1
 800290c:	b081      	sub	sp, #4
 800290e:	f8d4 0548 	ldr.w	r0, [r4, #1352]	; 0x548
 8002912:	edc4 0a17 	vstr	s1, [r4, #92]	; 0x5c
 8002916:	ed84 0a15 	vstr	s0, [r4, #84]	; 0x54
 800291a:	ed84 0a16 	vstr	s0, [r4, #88]	; 0x58
 800291e:	eddf 0a68 	vldr	s1, [pc, #416]	; 8002ac0 <??DataTable22_5>
 8002922:	ee20 0a20 	vmul.f32	s0, s0, s1
 8002926:	ed90 1a06 	vldr	s2, [r0, #24]
 800292a:	edd0 0a13 	vldr	s1, [r0, #76]	; 0x4c
 800292e:	ee20 1a01 	vmul.f32	s2, s0, s2
 8002932:	ed90 0a07 	vldr	s0, [r0, #28]
 8002936:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002938:	ee21 0a00 	vmul.f32	s0, s2, s0
 800293c:	eec0 0a20 	vdiv.f32	s1, s0, s1
 8002940:	eefd 0ae0 	vcvt.s32.f32	s1, s1
 8002944:	ee10 5a90 	vmov	r5, s1
 8002948:	b110      	cbz	r0, 8002950 <??SCC_SetNominalCurrent_0>
 800294a:	b2a9      	uxth	r1, r5
 800294c:	f00a fd10 	bl	800d370 <STC_SetNominalCurrent>

08002950 <??SCC_SetNominalCurrent_0>:
 8002950:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002952:	b128      	cbz	r0, 8002960 <??SCC_SetNominalCurrent_1>
 8002954:	b2a9      	uxth	r1, r5
 8002956:	b001      	add	sp, #4
 8002958:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800295c:	f7fe b8c2 	b.w	8000ae4 <OTT_SetNominalCurrent>

08002960 <??SCC_SetNominalCurrent_1>:
 8002960:	b001      	add	sp, #4
 8002962:	bd30      	pop	{r4, r5, pc}

08002964 <??DataTable18>:
 8002964:	d70b 3c23                                   ..#<

08002968 <SCC_GetNominalCurrent>:
 8002968:	ed90 0a16 	vldr	s0, [r0, #88]	; 0x58
 800296c:	4770      	bx	lr

0800296e <SCC_SetLdLqRatio>:
 800296e:	ed80 0a38 	vstr	s0, [r0, #224]	; 0xe0
 8002972:	4770      	bx	lr

08002974 <SCC_GetLdLqRatio>:
 8002974:	ed90 0a38 	vldr	s0, [r0, #224]	; 0xe0
 8002978:	4770      	bx	lr
	...

0800297c <SCC_SetNominalSpeed>:
 800297c:	b410      	push	{r4}
 800297e:	b081      	sub	sp, #4
 8002980:	b911      	cbnz	r1, 8002988 <??SCC_SetNominalSpeed_0>
 8002982:	f8d0 1548 	ldr.w	r1, [r0, #1352]	; 0x548
 8002986:	6c49      	ldr	r1, [r1, #68]	; 0x44

08002988 <??SCC_SetNominalSpeed_0>:
 8002988:	4a51      	ldr	r2, [pc, #324]	; (8002ad0 <??DataTable22_9>)
 800298a:	fb81 3202 	smull	r3, r2, r1, r2
 800298e:	ee00 1a10 	vmov	s0, r1
 8002992:	1092      	asrs	r2, r2, #2
 8002994:	f8c0 10e4 	str.w	r1, [r0, #228]	; 0xe4
 8002998:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800299c:	eddf 0a49 	vldr	s1, [pc, #292]	; 8002ac4 <??DataTable22_6>
 80029a0:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 80029a4:	ee60 0a20 	vmul.f32	s1, s0, s1
 80029a8:	f8c0 20ec 	str.w	r2, [r0, #236]	; 0xec
 80029ac:	f44f 74fa 	mov.w	r4, #500	; 0x1f4
 80029b0:	eefd 0ae0 	vcvt.s32.f32	s1, s1
 80029b4:	f8d0 10e4 	ldr.w	r1, [r0, #228]	; 0xe4
 80029b8:	f8c0 40ec 	str.w	r4, [r0, #236]	; 0xec
 80029bc:	edc0 0a3a 	vstr	s1, [r0, #232]	; 0xe8
 80029c0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80029c2:	b001      	add	sp, #4
 80029c4:	bc10      	pop	{r4}
 80029c6:	f7fe b8cd 	b.w	8000b64 <OTT_SetNominalSpeed>

080029ca <SCC_GetNominalSpeed>:
 80029ca:	f8d0 00e4 	ldr.w	r0, [r0, #228]	; 0xe4
 80029ce:	4770      	bx	lr

080029d0 <SCC_GetEstMaxOLSpeed>:
 80029d0:	f8d0 00e8 	ldr.w	r0, [r0, #232]	; 0xe8
 80029d4:	4770      	bx	lr

080029d6 <SCC_GetEstMaxAcceleration>:
 80029d6:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80029da:	4770      	bx	lr

080029dc <SCC_GetResistorOffset>:
 80029dc:	f8d0 0548 	ldr.w	r0, [r0, #1352]	; 0x548
 80029e0:	ed90 0a0a 	vldr	s0, [r0, #40]	; 0x28
 80029e4:	4770      	bx	lr
	...

080029e8 <SCC_GetStartupCurrentS16>:
 80029e8:	f8d0 1548 	ldr.w	r1, [r0, #1352]	; 0x548
 80029ec:	ed91 0a06 	vldr	s0, [r1, #24]
 80029f0:	ed91 1a07 	vldr	s2, [r1, #28]
 80029f4:	eddf 0a32 	vldr	s1, [pc, #200]	; 8002ac0 <??DataTable22_5>
 80029f8:	ee60 0a20 	vmul.f32	s1, s0, s1
 80029fc:	ee20 1a81 	vmul.f32	s2, s1, s2
 8002a00:	ed91 0a13 	vldr	s0, [r1, #76]	; 0x4c
 8002a04:	edd0 0a15 	vldr	s1, [r0, #84]	; 0x54
 8002a08:	ee81 0a00 	vdiv.f32	s0, s2, s0
 8002a0c:	ee60 0a20 	vmul.f32	s1, s0, s1
 8002a10:	eefd 0ae0 	vcvt.s32.f32	s1, s1
 8002a14:	ee10 0a90 	vmov	r0, s1
 8002a18:	1e40      	subs	r0, r0, #1
 8002a1a:	b200      	sxth	r0, r0
 8002a1c:	4770      	bx	lr

08002a1e <SCC_GetStartupCurrentAmp>:
 8002a1e:	ed90 0a16 	vldr	s0, [r0, #88]	; 0x58
 8002a22:	4770      	bx	lr

08002a24 <SCC_SetCurrentBandwidth>:
 8002a24:	ed80 0a4d 	vstr	s0, [r0, #308]	; 0x134
 8002a28:	4770      	bx	lr

08002a2a <SCC_GetCurrentBandwidth>:
 8002a2a:	ed90 0a4d 	vldr	s0, [r0, #308]	; 0x134
 8002a2e:	4770      	bx	lr

08002a30 <SCC_GetPWMFrequencyHz>:
 8002a30:	f8d0 0548 	ldr.w	r0, [r0, #1352]	; 0x548
 8002a34:	f8b0 0048 	ldrh.w	r0, [r0, #72]	; 0x48
 8002a38:	4770      	bx	lr

08002a3a <SCC_GetFOCRepRate>:
 8002a3a:	f8d0 0548 	ldr.w	r0, [r0, #1352]	; 0x548
 8002a3e:	f890 004a 	ldrb.w	r0, [r0, #74]	; 0x4a
 8002a42:	4770      	bx	lr

08002a44 <SCC_GetOverVoltageThreshold>:
 8002a44:	b500      	push	{lr}
 8002a46:	b081      	sub	sp, #4
 8002a48:	6840      	ldr	r0, [r0, #4]
 8002a4a:	4a25      	ldr	r2, [pc, #148]	; (8002ae0 <??DataTable22_13>)
 8002a4c:	8981      	ldrh	r1, [r0, #12]
 8002a4e:	8840      	ldrh	r0, [r0, #2]
 8002a50:	4341      	muls	r1, r0
 8002a52:	fb81 3202 	smull	r3, r2, r1, r2
 8002a56:	440a      	add	r2, r1
 8002a58:	13d0      	asrs	r0, r2, #15
 8002a5a:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8002a5e:	f000 fec1 	bl	80037e4 <__aeabi_i2d>
 8002a62:	ec41 0b10 	vmov	d0, r0, r1
 8002a66:	f00e fc15 	bl	8011294 <round>
 8002a6a:	ec51 0b10 	vmov	r0, r1, d0
 8002a6e:	f001 f935 	bl	8003cdc <__aeabi_d2iz>
 8002a72:	b280      	uxth	r0, r0
 8002a74:	b001      	add	sp, #4
 8002a76:	bd00      	pop	{pc}

08002a78 <SCC_GetUnderVoltageThreshold>:
 8002a78:	b500      	push	{lr}
 8002a7a:	b081      	sub	sp, #4
 8002a7c:	6840      	ldr	r0, [r0, #4]
 8002a7e:	4a18      	ldr	r2, [pc, #96]	; (8002ae0 <??DataTable22_13>)
 8002a80:	8a41      	ldrh	r1, [r0, #18]
 8002a82:	8840      	ldrh	r0, [r0, #2]
 8002a84:	4341      	muls	r1, r0
 8002a86:	fb81 3202 	smull	r3, r2, r1, r2
 8002a8a:	440a      	add	r2, r1
 8002a8c:	13d0      	asrs	r0, r2, #15
 8002a8e:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8002a92:	f000 fea7 	bl	80037e4 <__aeabi_i2d>
 8002a96:	ec41 0b10 	vmov	d0, r0, r1
 8002a9a:	f00e fbfb 	bl	8011294 <round>
 8002a9e:	ec51 0b10 	vmov	r0, r1, d0
 8002aa2:	f001 f91b 	bl	8003cdc <__aeabi_d2iz>
 8002aa6:	b280      	uxth	r0, r0
 8002aa8:	b001      	add	sp, #4
 8002aaa:	bd00      	pop	{pc}

08002aac <??DataTable22>:
 8002aac:	0000 447a                                   ..zD

08002ab0 <??DataTable22_1>:
 8002ab0:	ff01 477f                                   ...G

08002ab4 <??DataTable22_2>:
 8002ab4:	e800 477d                                   ..}G

08002ab8 <??DataTable22_3>:
 8002ab8:	0000 4270                                   ..pB

08002abc <??DataTable22_4>:
 8002abc:	cccd 3f8c                                   ...?

08002ac0 <??DataTable22_5>:
 8002ac0:	0000 4780                                   ...G

08002ac4 <??DataTable22_6>:
 8002ac4:	cccd 3ecc                                   ...>

08002ac8 <??DataTable22_7>:
 8002ac8:	ea5e 000f                                   ^...

08002acc <??DataTable22_8>:
 8002acc:	8dc5 0648                                   ..H.

08002ad0 <??DataTable22_9>:
 8002ad0:	6667 6666                                   gfff

08002ad4 <??DataTable22_10>:
 8002ad4:	999a 9999                                   ....

08002ad8 <??DataTable22_11>:
 8002ad8:	9999 3fb9                                   ...?

08002adc <??DataTable22_12>:
 8002adc:	5556 5555                                   VUUU

08002ae0 <??DataTable22_13>:
 8002ae0:	8001 8000                                   ....

08002ae4 <SCC_SetOverVoltageThreshold>:
 8002ae4:	6840      	ldr	r0, [r0, #4]
 8002ae6:	8842      	ldrh	r2, [r0, #2]
 8002ae8:	ebc1 4101 	rsb	r1, r1, r1, lsl #16
 8002aec:	fb91 f1f2 	sdiv	r1, r1, r2
 8002af0:	8181      	strh	r1, [r0, #12]
 8002af2:	4770      	bx	lr

08002af4 <SCC_SetUnderVoltageThreshold>:
 8002af4:	6840      	ldr	r0, [r0, #4]
 8002af6:	8842      	ldrh	r2, [r0, #2]
 8002af8:	ebc1 4101 	rsb	r1, r1, r1, lsl #16
 8002afc:	fb91 f1f2 	sdiv	r1, r1, r2
 8002b00:	8241      	strh	r1, [r0, #18]
 8002b02:	4770      	bx	lr

08002b04 <SCC_SetPBCharacterization>:
 8002b04:	f8d0 0548 	ldr.w	r0, [r0, #1352]	; 0x548
 8002b08:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
 8002b0c:	4770      	bx	lr

08002b0e <SCC_SetResistorOffset>:
 8002b0e:	f8d0 0548 	ldr.w	r0, [r0, #1352]	; 0x548
 8002b12:	ed80 0a0a 	vstr	s0, [r0, #40]	; 0x28
 8002b16:	4770      	bx	lr

08002b18 <?_0>:
	...

08002b20 <HT_Init>:
 8002b20:	b530      	push	{r4, r5, lr}
 8002b22:	4604      	mov	r4, r0
 8002b24:	b081      	sub	sp, #4
 8002b26:	6820      	ldr	r0, [r4, #0]
 8002b28:	460d      	mov	r5, r1
 8002b2a:	f002 f9a5 	bl	8004e78 <MCI_GetSTMState>
 8002b2e:	f8df 1928 	ldr.w	r1, [pc, #2344]	; 8003458 <??DataTable1>
 8002b32:	2200      	movs	r2, #0
 8002b34:	2300      	movs	r3, #0
 8002b36:	710a      	strb	r2, [r1, #4]
 8002b38:	80cb      	strh	r3, [r1, #6]
 8002b3a:	2100      	movs	r1, #0
 8002b3c:	68a2      	ldr	r2, [r4, #8]
 8002b3e:	f882 10cc 	strb.w	r1, [r2, #204]	; 0xcc
 8002b42:	2d00      	cmp	r5, #0
 8002b44:	68a1      	ldr	r1, [r4, #8]
 8002b46:	844b      	strh	r3, [r1, #34]	; 0x22
 8002b48:	f8a1 30a8 	strh.w	r3, [r1, #168]	; 0xa8
 8002b4c:	7523      	strb	r3, [r4, #20]
 8002b4e:	7563      	strb	r3, [r4, #21]
 8002b50:	75a3      	strb	r3, [r4, #22]
 8002b52:	75e3      	strb	r3, [r4, #23]
 8002b54:	7623      	strb	r3, [r4, #24]
 8002b56:	7663      	strb	r3, [r4, #25]
 8002b58:	76a3      	strb	r3, [r4, #26]
 8002b5a:	76e3      	strb	r3, [r4, #27]
 8002b5c:	7723      	strb	r3, [r4, #28]
 8002b5e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8002b62:	f884 3020 	strb.w	r3, [r4, #32]
 8002b66:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
 8002b6a:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 8002b6e:	63a3      	str	r3, [r4, #56]	; 0x38
 8002b70:	63e3      	str	r3, [r4, #60]	; 0x3c
 8002b72:	6423      	str	r3, [r4, #64]	; 0x40
 8002b74:	77e3      	strb	r3, [r4, #31]
 8002b76:	85a3      	strh	r3, [r4, #44]	; 0x2c
 8002b78:	8523      	strh	r3, [r4, #40]	; 0x28
 8002b7a:	84e3      	strh	r3, [r4, #38]	; 0x26
 8002b7c:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
 8002b80:	6463      	str	r3, [r4, #68]	; 0x44
 8002b82:	64a3      	str	r3, [r4, #72]	; 0x48
 8002b84:	6523      	str	r3, [r4, #80]	; 0x50
 8002b86:	6563      	str	r3, [r4, #84]	; 0x54
 8002b88:	65a3      	str	r3, [r4, #88]	; 0x58
 8002b8a:	65e3      	str	r3, [r4, #92]	; 0x5c
 8002b8c:	6623      	str	r3, [r4, #96]	; 0x60
 8002b8e:	6663      	str	r3, [r4, #100]	; 0x64
 8002b90:	66a3      	str	r3, [r4, #104]	; 0x68
 8002b92:	66e3      	str	r3, [r4, #108]	; 0x6c
 8002b94:	6723      	str	r3, [r4, #112]	; 0x70
 8002b96:	6763      	str	r3, [r4, #116]	; 0x74
 8002b98:	67a3      	str	r3, [r4, #120]	; 0x78
 8002b9a:	67e3      	str	r3, [r4, #124]	; 0x7c
 8002b9c:	d14a      	bne.n	8002c34 <??HT_Init_0>
 8002b9e:	2101      	movs	r1, #1
 8002ba0:	77a3      	strb	r3, [r4, #30]
 8002ba2:	7761      	strb	r1, [r4, #29]
 8002ba4:	85e3      	strh	r3, [r4, #46]	; 0x2e
 8002ba6:	8623      	strh	r3, [r4, #48]	; 0x30
 8002ba8:	8663      	strh	r3, [r4, #50]	; 0x32
 8002baa:	86a3      	strh	r3, [r4, #52]	; 0x34
 8002bac:	f8a4 3080 	strh.w	r3, [r4, #128]	; 0x80
 8002bb0:	f8a4 3082 	strh.w	r3, [r4, #130]	; 0x82
 8002bb4:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
 8002bb8:	f8a4 3086 	strh.w	r3, [r4, #134]	; 0x86
 8002bbc:	f8a4 3088 	strh.w	r3, [r4, #136]	; 0x88
 8002bc0:	f8a4 308a 	strh.w	r3, [r4, #138]	; 0x8a
 8002bc4:	f8a4 308c 	strh.w	r3, [r4, #140]	; 0x8c
 8002bc8:	f8a4 308e 	strh.w	r3, [r4, #142]	; 0x8e
 8002bcc:	f8a4 3090 	strh.w	r3, [r4, #144]	; 0x90
 8002bd0:	f8a4 3092 	strh.w	r3, [r4, #146]	; 0x92
 8002bd4:	f8a4 3094 	strh.w	r3, [r4, #148]	; 0x94
 8002bd8:	f8a4 3096 	strh.w	r3, [r4, #150]	; 0x96
 8002bdc:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
 8002be0:	f8a4 309a 	strh.w	r3, [r4, #154]	; 0x9a
 8002be4:	f8a4 309c 	strh.w	r3, [r4, #156]	; 0x9c
 8002be8:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
 8002bec:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
 8002bf0:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
 8002bf4:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 8002bf8:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
 8002bfc:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
 8002c00:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
 8002c04:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
 8002c08:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
 8002c0c:	7463      	strb	r3, [r4, #17]
 8002c0e:	74a3      	strb	r3, [r4, #18]
 8002c10:	74e3      	strb	r3, [r4, #19]
 8002c12:	7423      	strb	r3, [r4, #16]
 8002c14:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 8002c18:	f002 f890 	bl	8004d3c <MC_GetMecSpeedReferenceMotor1>
 8002c1c:	2800      	cmp	r0, #0
 8002c1e:	d516      	bpl.n	8002c4e <??HT_Init_1>
 8002c20:	f002 f88c 	bl	8004d3c <MC_GetMecSpeedReferenceMotor1>
 8002c24:	b001      	add	sp, #4
 8002c26:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002c2a:	4240      	negs	r0, r0
 8002c2c:	2100      	movs	r1, #0
 8002c2e:	b200      	sxth	r0, r0
 8002c30:	f002 b872 	b.w	8004d18 <MC_ProgramSpeedRampMotor1>

08002c34 <??HT_Init_0>:
 8002c34:	6861      	ldr	r1, [r4, #4]
 8002c36:	f891 2062 	ldrb.w	r2, [r1, #98]	; 0x62
 8002c3a:	2a01      	cmp	r2, #1
 8002c3c:	bf01      	itttt	eq
 8002c3e:	2108      	moveq	r1, #8
 8002c40:	6822      	ldreq	r2, [r4, #0]
 8002c42:	77d1      	strbeq	r1, [r2, #31]
 8002c44:	2800      	cmpeq	r0, #0
 8002c46:	d102      	bne.n	8002c4e <??HT_Init_1>
 8002c48:	2102      	movs	r1, #2
 8002c4a:	74e0      	strb	r0, [r4, #19]
 8002c4c:	7421      	strb	r1, [r4, #16]

08002c4e <??HT_Init_1>:
 8002c4e:	b001      	add	sp, #4
 8002c50:	bd30      	pop	{r4, r5, pc}
	...

08002c54 <HT_MF>:
 8002c54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c56:	4604      	mov	r4, r0
 8002c58:	b081      	sub	sp, #4
 8002c5a:	6820      	ldr	r0, [r4, #0]
 8002c5c:	f002 f90c 	bl	8004e78 <MCI_GetSTMState>
 8002c60:	7c21      	ldrb	r1, [r4, #16]
 8002c62:	2913      	cmp	r1, #19
 8002c64:	f200 830d 	bhi.w	8003282 <??HT_MF_2>
 8002c68:	e8df f011 	tbh	[pc, r1, lsl #1]

08002c6c <??HT_MF_0>:
 8002c6c:	0014 030b 0026 004b 030b 0058 0090 00a3     ....&.K...X.....
 8002c7c:	00a3 00a3 00ae 00e2 010a 016c 030b 030b     ..........l.....
 8002c8c:	018a 01f1 03e1 03ec                         ........

08002c94 <??HT_MF_3>:
 8002c94:	6862      	ldr	r2, [r4, #4]
 8002c96:	f892 1062 	ldrb.w	r1, [r2, #98]	; 0x62
 8002c9a:	2901      	cmp	r1, #1
 8002c9c:	bf02      	ittt	eq
 8002c9e:	2800      	cmpeq	r0, #0
 8002ca0:	7c60      	ldrbeq	r0, [r4, #17]
 8002ca2:	2801      	cmpeq	r0, #1
 8002ca4:	f040 82ed 	bne.w	8003282 <??HT_MF_2>
 8002ca8:	68a0      	ldr	r0, [r4, #8]
 8002caa:	7841      	ldrb	r1, [r0, #1]
 8002cac:	ebc1 1201 	rsb	r2, r1, r1, lsl #4
 8002cb0:	0092      	lsls	r2, r2, #2
 8002cb2:	8562      	strh	r2, [r4, #42]	; 0x2a
 8002cb4:	2002      	movs	r0, #2
 8002cb6:	e2e3      	b.n	8003280 <??HT_MF_4>

08002cb8 <??HT_MF_5>:
 8002cb8:	68a1      	ldr	r1, [r4, #8]
 8002cba:	f9b1 00a8 	ldrsh.w	r0, [r1, #168]	; 0xa8
 8002cbe:	2800      	cmp	r0, #0
 8002cc0:	f040 82df 	bne.w	8003282 <??HT_MF_2>
 8002cc4:	7f60      	ldrb	r0, [r4, #29]
 8002cc6:	b148      	cbz	r0, 8002cdc <??HT_MF_6>
 8002cc8:	f002 f838 	bl	8004d3c <MC_GetMecSpeedReferenceMotor1>
 8002ccc:	2800      	cmp	r0, #0
 8002cce:	dc0f      	bgt.n	8002cf0 <??HT_MF_7>
 8002cd0:	f002 f834 	bl	8004d3c <MC_GetMecSpeedReferenceMotor1>
 8002cd4:	4240      	negs	r0, r0
 8002cd6:	2100      	movs	r1, #0
 8002cd8:	b200      	sxth	r0, r0
 8002cda:	e00c      	b.n	8002cf6 <??HT_MF_8>

08002cdc <??HT_MF_6>:
 8002cdc:	f002 f82e 	bl	8004d3c <MC_GetMecSpeedReferenceMotor1>
 8002ce0:	2800      	cmp	r0, #0
 8002ce2:	dd05      	ble.n	8002cf0 <??HT_MF_7>
 8002ce4:	f002 f82a 	bl	8004d3c <MC_GetMecSpeedReferenceMotor1>
 8002ce8:	4240      	negs	r0, r0
 8002cea:	2100      	movs	r1, #0
 8002cec:	b200      	sxth	r0, r0
 8002cee:	e002      	b.n	8002cf6 <??HT_MF_8>

08002cf0 <??HT_MF_7>:
 8002cf0:	f002 f824 	bl	8004d3c <MC_GetMecSpeedReferenceMotor1>
 8002cf4:	2100      	movs	r1, #0

08002cf6 <??HT_MF_8>:
 8002cf6:	f002 f80f 	bl	8004d18 <MC_ProgramSpeedRampMotor1>
 8002cfa:	f002 f801 	bl	8004d00 <MC_StartMotor1>
 8002cfe:	2003      	movs	r0, #3
 8002d00:	e2be      	b.n	8003280 <??HT_MF_4>

08002d02 <??HT_MF_9>:
 8002d02:	f002 f815 	bl	8004d30 <MC_HasRampCompletedMotor1>
 8002d06:	2800      	cmp	r0, #0
 8002d08:	f000 82bb 	beq.w	8003282 <??HT_MF_2>
 8002d0c:	7f60      	ldrb	r0, [r4, #29]
 8002d0e:	2100      	movs	r1, #0
 8002d10:	84e1      	strh	r1, [r4, #38]	; 0x26
 8002d12:	2800      	cmp	r0, #0
 8002d14:	bf0c      	ite	eq
 8002d16:	200d      	moveq	r0, #13
 8002d18:	2005      	movne	r0, #5
 8002d1a:	e2b1      	b.n	8003280 <??HT_MF_4>

08002d1c <??HT_MF_10>:
 8002d1c:	2806      	cmp	r0, #6
 8002d1e:	f040 82b0 	bne.w	8003282 <??HT_MF_2>
 8002d22:	7ee0      	ldrb	r0, [r4, #27]
 8002d24:	2801      	cmp	r0, #1
 8002d26:	d123      	bne.n	8002d70 <??HT_MF_11>
 8002d28:	7de0      	ldrb	r0, [r4, #23]
 8002d2a:	2800      	cmp	r0, #0
 8002d2c:	bf1c      	itt	ne
 8002d2e:	7e20      	ldrbne	r0, [r4, #24]
 8002d30:	2800      	cmpne	r0, #0
 8002d32:	d001      	beq.n	8002d38 <??HT_MF_12>
 8002d34:	7e60      	ldrb	r0, [r4, #25]
 8002d36:	b968      	cbnz	r0, 8002d54 <??HT_MF_13>

08002d38 <??HT_MF_12>:
 8002d38:	6820      	ldr	r0, [r4, #0]
 8002d3a:	2108      	movs	r1, #8
 8002d3c:	77c1      	strb	r1, [r0, #31]
 8002d3e:	2207      	movs	r2, #7
 8002d40:	68a1      	ldr	r1, [r4, #8]
 8002d42:	7422      	strb	r2, [r4, #16]
 8002d44:	2000      	movs	r0, #0
 8002d46:	f8a1 00a8 	strh.w	r0, [r1, #168]	; 0xa8
 8002d4a:	2100      	movs	r1, #0
 8002d4c:	84e0      	strh	r0, [r4, #38]	; 0x26
 8002d4e:	7721      	strb	r1, [r4, #28]
 8002d50:	b001      	add	sp, #4
 8002d52:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d54 <??HT_MF_13>:
 8002d54:	7ca0      	ldrb	r0, [r4, #18]
 8002d56:	2101      	movs	r1, #1
 8002d58:	2800      	cmp	r0, #0
 8002d5a:	bf1d      	ittte	ne
 8002d5c:	2000      	movne	r0, #0
 8002d5e:	84e0      	strhne	r0, [r4, #38]	; 0x26
 8002d60:	200a      	movne	r0, #10
 8002d62:	2006      	moveq	r0, #6
 8002d64:	2200      	movs	r2, #0
 8002d66:	76e2      	strb	r2, [r4, #27]
 8002d68:	7420      	strb	r0, [r4, #16]
 8002d6a:	7721      	strb	r1, [r4, #28]
 8002d6c:	b001      	add	sp, #4
 8002d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d70 <??HT_MF_11>:
 8002d70:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
 8002d72:	2800      	cmp	r0, #0
 8002d74:	d152      	bne.n	8002e1c <??HT_MF_14>
 8002d76:	7660      	strb	r0, [r4, #25]
 8002d78:	75e0      	strb	r0, [r4, #23]
 8002d7a:	75a0      	strb	r0, [r4, #22]
 8002d7c:	2100      	movs	r1, #0
 8002d7e:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
 8002d80:	7621      	strb	r1, [r4, #24]
 8002d82:	1c40      	adds	r0, r0, #1
 8002d84:	7561      	strb	r1, [r4, #21]
 8002d86:	84e0      	strh	r0, [r4, #38]	; 0x26
 8002d88:	b001      	add	sp, #4
 8002d8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d8c <??HT_MF_15>:
 8002d8c:	7fe0      	ldrb	r0, [r4, #31]
 8002d8e:	2801      	cmp	r0, #1
 8002d90:	d105      	bne.n	8002d9e <??HT_MF_16>
 8002d92:	2000      	movs	r0, #0
 8002d94:	84e0      	strh	r0, [r4, #38]	; 0x26
 8002d96:	2101      	movs	r1, #1
 8002d98:	74a1      	strb	r1, [r4, #18]
 8002d9a:	200a      	movs	r0, #10
 8002d9c:	e270      	b.n	8003280 <??HT_MF_4>

08002d9e <??HT_MF_16>:
 8002d9e:	2802      	cmp	r0, #2
 8002da0:	f040 826f 	bne.w	8003282 <??HT_MF_2>
 8002da4:	2001      	movs	r0, #1
 8002da6:	74a0      	strb	r0, [r4, #18]
 8002da8:	2108      	movs	r1, #8
 8002daa:	6822      	ldr	r2, [r4, #0]
 8002dac:	77d1      	strb	r1, [r2, #31]
 8002dae:	2009      	movs	r0, #9
 8002db0:	e266      	b.n	8003280 <??HT_MF_4>

08002db2 <??HT_MF_17>:
 8002db2:	7ce0      	ldrb	r0, [r4, #19]
 8002db4:	2801      	cmp	r0, #1
 8002db6:	bf1c      	itt	ne
 8002db8:	7d20      	ldrbne	r0, [r4, #20]
 8002dba:	2801      	cmpne	r0, #1
 8002dbc:	f040 8261 	bne.w	8003282 <??HT_MF_2>
 8002dc0:	2112      	movs	r1, #18
 8002dc2:	7421      	strb	r1, [r4, #16]
 8002dc4:	b001      	add	sp, #4
 8002dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002dc8 <??HT_MF_18>:
 8002dc8:	2806      	cmp	r0, #6
 8002dca:	f040 825a 	bne.w	8003282 <??HT_MF_2>
 8002dce:	7ee0      	ldrb	r0, [r4, #27]
 8002dd0:	2801      	cmp	r0, #1
 8002dd2:	d119      	bne.n	8002e08 <??HT_MF_19>
 8002dd4:	7d60      	ldrb	r0, [r4, #21]
 8002dd6:	2801      	cmp	r0, #1
 8002dd8:	bf04      	itt	eq
 8002dda:	7da0      	ldrbeq	r0, [r4, #22]
 8002ddc:	2801      	cmpeq	r0, #1
 8002dde:	d103      	bne.n	8002de8 <??HT_MF_20>
 8002de0:	213c      	movs	r1, #60	; 0x3c
 8002de2:	77a1      	strb	r1, [r4, #30]
 8002de4:	200b      	movs	r0, #11
 8002de6:	e24b      	b.n	8003280 <??HT_MF_4>

08002de8 <??HT_MF_20>:
 8002de8:	7fa0      	ldrb	r0, [r4, #30]
 8002dea:	b928      	cbnz	r0, 8002df8 <??HT_MF_21>
 8002dec:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
 8002df0:	2178      	movs	r1, #120	; 0x78
 8002df2:	77a1      	strb	r1, [r4, #30]
 8002df4:	200c      	movs	r0, #12
 8002df6:	e243      	b.n	8003280 <??HT_MF_4>

08002df8 <??HT_MF_21>:
 8002df8:	f994 0024 	ldrsb.w	r0, [r4, #36]	; 0x24
 8002dfc:	2802      	cmp	r0, #2
 8002dfe:	bf04      	itt	eq
 8002e00:	2101      	moveq	r1, #1
 8002e02:	76a1      	strbeq	r1, [r4, #26]
 8002e04:	200c      	movs	r0, #12
 8002e06:	e23b      	b.n	8003280 <??HT_MF_4>

08002e08 <??HT_MF_19>:
 8002e08:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
 8002e0a:	b938      	cbnz	r0, 8002e1c <??HT_MF_14>
 8002e0c:	7560      	strb	r0, [r4, #21]
 8002e0e:	2100      	movs	r1, #0
 8002e10:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
 8002e12:	75a1      	strb	r1, [r4, #22]
 8002e14:	1c40      	adds	r0, r0, #1
 8002e16:	84e0      	strh	r0, [r4, #38]	; 0x26
 8002e18:	b001      	add	sp, #4
 8002e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e1c <??HT_MF_14>:
 8002e1c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002e20:	bfa4      	itt	ge
 8002e22:	2001      	movge	r0, #1
 8002e24:	76e0      	strbge	r0, [r4, #27]
 8002e26:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
 8002e28:	1c40      	adds	r0, r0, #1
 8002e2a:	84e0      	strh	r0, [r4, #38]	; 0x26
 8002e2c:	b001      	add	sp, #4
 8002e2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e30 <??HT_MF_22>:
 8002e30:	2806      	cmp	r0, #6
 8002e32:	f040 8226 	bne.w	8003282 <??HT_MF_2>
 8002e36:	f8df 3620 	ldr.w	r3, [pc, #1568]	; 8003458 <??DataTable1>
 8002e3a:	7ee1      	ldrb	r1, [r4, #27]
 8002e3c:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8002e3e:	791d      	ldrb	r5, [r3, #4]
 8002e40:	200b      	movs	r0, #11
 8002e42:	b12d      	cbz	r5, 8002e50 <??HT_MF_23>
 8002e44:	2d02      	cmp	r5, #2
 8002e46:	d014      	beq.n	8002e72 <??HT_MF_24>
 8002e48:	d311      	bcc.n	8002e6e <??HT_MF_25>
 8002e4a:	76e1      	strb	r1, [r4, #27]
 8002e4c:	84e2      	strh	r2, [r4, #38]	; 0x26
 8002e4e:	e217      	b.n	8003280 <??HT_MF_4>

08002e50 <??HT_MF_23>:
 8002e50:	2001      	movs	r0, #1

08002e52 <??HT_MF_26>:
 8002e52:	68a1      	ldr	r1, [r4, #8]
 8002e54:	f881 00cc 	strb.w	r0, [r1, #204]	; 0xcc
 8002e58:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
 8002e5c:	7919      	ldrb	r1, [r3, #4]
 8002e5e:	1c49      	adds	r1, r1, #1
 8002e60:	7119      	strb	r1, [r3, #4]

08002e62 <??HT_MF_27>:
 8002e62:	2200      	movs	r2, #0
 8002e64:	2100      	movs	r1, #0
 8002e66:	200a      	movs	r0, #10
 8002e68:	76e1      	strb	r1, [r4, #27]
 8002e6a:	84e2      	strh	r2, [r4, #38]	; 0x26
 8002e6c:	e208      	b.n	8003280 <??HT_MF_4>

08002e6e <??HT_MF_25>:
 8002e6e:	2002      	movs	r0, #2
 8002e70:	e7ef      	b.n	8002e52 <??HT_MF_26>

08002e72 <??HT_MF_24>:
 8002e72:	68a1      	ldr	r1, [r4, #8]
 8002e74:	2004      	movs	r0, #4
 8002e76:	f881 00cc 	strb.w	r0, [r1, #204]	; 0xcc
 8002e7a:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
 8002e7e:	e7f0      	b.n	8002e62 <??HT_MF_27>

08002e80 <??HT_MF_28>:
 8002e80:	2806      	cmp	r0, #6
 8002e82:	f040 81fe 	bne.w	8003282 <??HT_MF_2>
 8002e86:	7fa2      	ldrb	r2, [r4, #30]
 8002e88:	210c      	movs	r1, #12
 8002e8a:	2a3c      	cmp	r2, #60	; 0x3c
 8002e8c:	bf04      	itt	eq
 8002e8e:	7ea0      	ldrbeq	r0, [r4, #26]
 8002e90:	2800      	cmpeq	r0, #0
 8002e92:	d124      	bne.n	8002ede <??HT_MF_29>
 8002e94:	68a0      	ldr	r0, [r4, #8]
 8002e96:	f994 1024 	ldrsb.w	r1, [r4, #36]	; 0x24
 8002e9a:	f9b0 00a8 	ldrsh.w	r0, [r0, #168]	; 0xa8
 8002e9e:	2901      	cmp	r1, #1
 8002ea0:	d107      	bne.n	8002eb2 <??HT_MF_30>
 8002ea2:	2800      	cmp	r0, #0
 8002ea4:	d502      	bpl.n	8002eac <??HT_MF_31>
 8002ea6:	2002      	movs	r0, #2
 8002ea8:	2203      	movs	r2, #3
 8002eaa:	e00b      	b.n	8002ec4 <??HT_MF_32>

08002eac <??HT_MF_31>:
 8002eac:	2003      	movs	r0, #3
 8002eae:	2202      	movs	r2, #2
 8002eb0:	e008      	b.n	8002ec4 <??HT_MF_32>

08002eb2 <??HT_MF_30>:
 8002eb2:	2800      	cmp	r0, #0
 8002eb4:	d503      	bpl.n	8002ebe <??HT_MF_33>
 8002eb6:	2001      	movs	r0, #1
 8002eb8:	2103      	movs	r1, #3
 8002eba:	2202      	movs	r2, #2
 8002ebc:	e002      	b.n	8002ec4 <??HT_MF_32>

08002ebe <??HT_MF_33>:
 8002ebe:	2002      	movs	r0, #2
 8002ec0:	2103      	movs	r1, #3
 8002ec2:	2201      	movs	r2, #1

08002ec4 <??HT_MF_32>:
 8002ec4:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
 8002ec8:	f884 2022 	strb.w	r2, [r4, #34]	; 0x22
 8002ecc:	f884 0020 	strb.w	r0, [r4, #32]
 8002ed0:	2008      	movs	r0, #8
 8002ed2:	6821      	ldr	r1, [r4, #0]
 8002ed4:	77c8      	strb	r0, [r1, #31]
 8002ed6:	2108      	movs	r1, #8
 8002ed8:	7421      	strb	r1, [r4, #16]
 8002eda:	b001      	add	sp, #4
 8002edc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ede <??HT_MF_29>:
 8002ede:	f894 0020 	ldrb.w	r0, [r4, #32]
 8002ee2:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8002ee6:	f894 5022 	ldrb.w	r5, [r4, #34]	; 0x22
 8002eea:	2a3c      	cmp	r2, #60	; 0x3c
 8002eec:	d117      	bne.n	8002f1e <??HT_MF_34>
 8002eee:	7ea2      	ldrb	r2, [r4, #26]
 8002ef0:	2a01      	cmp	r2, #1
 8002ef2:	d10b      	bne.n	8002f0c <??HT_MF_35>
 8002ef4:	68a0      	ldr	r0, [r4, #8]
 8002ef6:	f9b0 10a8 	ldrsh.w	r1, [r0, #168]	; 0xa8
 8002efa:	2900      	cmp	r1, #0
 8002efc:	d51d      	bpl.n	8002f3a <??HT_MF_36>
 8002efe:	6821      	ldr	r1, [r4, #0]
 8002f00:	2008      	movs	r0, #8
 8002f02:	77c8      	strb	r0, [r1, #31]
 8002f04:	2302      	movs	r3, #2
 8002f06:	2003      	movs	r0, #3
 8002f08:	2501      	movs	r5, #1

08002f0a <??HT_MF_37>:
 8002f0a:	2108      	movs	r1, #8

08002f0c <??HT_MF_35>:
 8002f0c:	f884 0020 	strb.w	r0, [r4, #32]
 8002f10:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
 8002f14:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
 8002f18:	7421      	strb	r1, [r4, #16]
 8002f1a:	b001      	add	sp, #4
 8002f1c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002f1e <??HT_MF_34>:
 8002f1e:	2a78      	cmp	r2, #120	; 0x78
 8002f20:	d1f4      	bne.n	8002f0c <??HT_MF_35>
 8002f22:	68a0      	ldr	r0, [r4, #8]
 8002f24:	f9b0 10a8 	ldrsh.w	r1, [r0, #168]	; 0xa8
 8002f28:	2900      	cmp	r1, #0
 8002f2a:	d506      	bpl.n	8002f3a <??HT_MF_36>
 8002f2c:	6821      	ldr	r1, [r4, #0]
 8002f2e:	2008      	movs	r0, #8
 8002f30:	77c8      	strb	r0, [r1, #31]
 8002f32:	2301      	movs	r3, #1
 8002f34:	2002      	movs	r0, #2
 8002f36:	2503      	movs	r5, #3
 8002f38:	e7e7      	b.n	8002f0a <??HT_MF_37>

08002f3a <??HT_MF_36>:
 8002f3a:	2001      	movs	r0, #1
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	2503      	movs	r5, #3
 8002f40:	210d      	movs	r1, #13
 8002f42:	e7e3      	b.n	8002f0c <??HT_MF_35>

08002f44 <??HT_MF_38>:
 8002f44:	2806      	cmp	r0, #6
 8002f46:	f040 819c 	bne.w	8003282 <??HT_MF_2>
 8002f4a:	68a1      	ldr	r1, [r4, #8]
 8002f4c:	f9b1 00a8 	ldrsh.w	r0, [r1, #168]	; 0xa8
 8002f50:	2800      	cmp	r0, #0
 8002f52:	f000 8196 	beq.w	8003282 <??HT_MF_2>
 8002f56:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8002f58:	f242 7310 	movw	r3, #10000	; 0x2710
 8002f5c:	4299      	cmp	r1, r3
 8002f5e:	da0d      	bge.n	8002f7c <??HT_MF_39>
 8002f60:	2064      	movs	r0, #100	; 0x64
 8002f62:	fb00 f201 	mul.w	r2, r0, r1
 8002f66:	f8df 54f4 	ldr.w	r5, [pc, #1268]	; 800345c <??DataTable1_1>
 8002f6a:	fb82 6505 	smull	r6, r5, r2, r5
 8002f6e:	0b2a      	lsrs	r2, r5, #12
 8002f70:	1c49      	adds	r1, r1, #1
 8002f72:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
 8002f76:	8521      	strh	r1, [r4, #40]	; 0x28
 8002f78:	b001      	add	sp, #4
 8002f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002f7c <??HT_MF_39>:
 8002f7c:	200e      	movs	r0, #14
 8002f7e:	e17f      	b.n	8003280 <??HT_MF_4>

08002f80 <??HT_MF_40>:
 8002f80:	f9b4 002c 	ldrsh.w	r0, [r4, #44]	; 0x2c
 8002f84:	f002 f8c0 	bl	8005108 <MCM_Trig_Functions>
 8002f88:	f8df 14cc 	ldr.w	r1, [pc, #1228]	; 8003458 <??DataTable1>
 8002f8c:	6008      	str	r0, [r1, #0]
 8002f8e:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
 8002f92:	1e40      	subs	r0, r0, #1
 8002f94:	2805      	cmp	r0, #5
 8002f96:	d845      	bhi.n	8003024 <??HT_MF_41>
 8002f98:	e8df f000 	tbb	[pc, r0]

08002f9c <??HT_MF_1>:
 8002f9c:	0e03 2419 3a2f                              ...$/:

08002fa2 <??HT_MF_42>:
 8002fa2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002fa4:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
 8002fa8:	1810      	adds	r0, r2, r0
 8002faa:	6520      	str	r0, [r4, #80]	; 0x50
 8002fac:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002fae:	f9b1 0000 	ldrsh.w	r0, [r1]
 8002fb2:	1810      	adds	r0, r2, r0
 8002fb4:	6560      	str	r0, [r4, #84]	; 0x54
 8002fb6:	e035      	b.n	8003024 <??HT_MF_41>

08002fb8 <??HT_MF_43>:
 8002fb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002fba:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 8002fbe:	1882      	adds	r2, r0, r2
 8002fc0:	65a2      	str	r2, [r4, #88]	; 0x58
 8002fc2:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8002fc4:	f9b1 2000 	ldrsh.w	r2, [r1]
 8002fc8:	1882      	adds	r2, r0, r2
 8002fca:	65e2      	str	r2, [r4, #92]	; 0x5c
 8002fcc:	e02a      	b.n	8003024 <??HT_MF_41>

08002fce <??HT_MF_44>:
 8002fce:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8002fd0:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 8002fd4:	1882      	adds	r2, r0, r2
 8002fd6:	6622      	str	r2, [r4, #96]	; 0x60
 8002fd8:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8002fda:	f9b1 2000 	ldrsh.w	r2, [r1]
 8002fde:	1882      	adds	r2, r0, r2
 8002fe0:	6662      	str	r2, [r4, #100]	; 0x64
 8002fe2:	e01f      	b.n	8003024 <??HT_MF_41>

08002fe4 <??HT_MF_45>:
 8002fe4:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8002fe6:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 8002fea:	1882      	adds	r2, r0, r2
 8002fec:	66a2      	str	r2, [r4, #104]	; 0x68
 8002fee:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002ff0:	f9b1 2000 	ldrsh.w	r2, [r1]
 8002ff4:	1882      	adds	r2, r0, r2
 8002ff6:	66e2      	str	r2, [r4, #108]	; 0x6c
 8002ff8:	e014      	b.n	8003024 <??HT_MF_41>

08002ffa <??HT_MF_46>:
 8002ffa:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8002ffc:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 8003000:	1882      	adds	r2, r0, r2
 8003002:	6722      	str	r2, [r4, #112]	; 0x70
 8003004:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8003006:	f9b1 2000 	ldrsh.w	r2, [r1]
 800300a:	1882      	adds	r2, r0, r2
 800300c:	6762      	str	r2, [r4, #116]	; 0x74
 800300e:	e009      	b.n	8003024 <??HT_MF_41>

08003010 <??HT_MF_47>:
 8003010:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8003012:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 8003016:	1882      	adds	r2, r0, r2
 8003018:	67a2      	str	r2, [r4, #120]	; 0x78
 800301a:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800301c:	f9b1 2000 	ldrsh.w	r2, [r1]
 8003020:	1882      	adds	r2, r0, r2
 8003022:	67e2      	str	r2, [r4, #124]	; 0x7c

08003024 <??HT_MF_41>:
 8003024:	2064      	movs	r0, #100	; 0x64
 8003026:	88ca      	ldrh	r2, [r1, #6]
 8003028:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800302a:	4342      	muls	r2, r0
 800302c:	fb92 f3f3 	sdiv	r3, r2, r3
 8003030:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
 8003034:	88c8      	ldrh	r0, [r1, #6]
 8003036:	1c40      	adds	r0, r0, #1
 8003038:	80c8      	strh	r0, [r1, #6]
 800303a:	b280      	uxth	r0, r0
 800303c:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 800303e:	4288      	cmp	r0, r1
 8003040:	bf23      	ittte	cs
 8003042:	2007      	movcs	r0, #7
 8003044:	f884 004c 	strbcs.w	r0, [r4, #76]	; 0x4c
 8003048:	2011      	movcs	r0, #17
 800304a:	200e      	movcc	r0, #14
 800304c:	e118      	b.n	8003280 <??HT_MF_4>

0800304e <??HT_MF_48>:
 800304e:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8003050:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003052:	f8df 340c 	ldr.w	r3, [pc, #1036]	; 8003460 <??DataTable1_2>
 8003056:	f64a 21ab 	movw	r1, #43691	; 0xaaab
 800305a:	4341      	muls	r1, r0
 800305c:	0c88      	lsrs	r0, r1, #18
 800305e:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003060:	fb92 f2f0 	sdiv	r2, r2, r0
 8003064:	fb91 f1f0 	sdiv	r1, r1, r0
 8003068:	6562      	str	r2, [r4, #84]	; 0x54
 800306a:	6521      	str	r1, [r4, #80]	; 0x50
 800306c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800306e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003070:	fb92 f2f0 	sdiv	r2, r2, r0
 8003074:	fb91 f1f0 	sdiv	r1, r1, r0
 8003078:	65e2      	str	r2, [r4, #92]	; 0x5c
 800307a:	65a1      	str	r1, [r4, #88]	; 0x58
 800307c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800307e:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8003080:	fb92 f2f0 	sdiv	r2, r2, r0
 8003084:	fb91 f1f0 	sdiv	r1, r1, r0
 8003088:	6662      	str	r2, [r4, #100]	; 0x64
 800308a:	6621      	str	r1, [r4, #96]	; 0x60
 800308c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800308e:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8003090:	fb92 f5f0 	sdiv	r5, r2, r0
 8003094:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8003096:	fb91 f6f0 	sdiv	r6, r1, r0
 800309a:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800309c:	fb92 f7f0 	sdiv	r7, r2, r0
 80030a0:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80030a2:	66e5      	str	r5, [r4, #108]	; 0x6c
 80030a4:	fb92 f2f0 	sdiv	r2, r2, r0
 80030a8:	67e2      	str	r2, [r4, #124]	; 0x7c
 80030aa:	fb91 fcf0 	sdiv	ip, r1, r0
 80030ae:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 80030b0:	4aec      	ldr	r2, [pc, #944]	; (8003464 <??DataTable1_3>)
 80030b2:	66a6      	str	r6, [r4, #104]	; 0x68
 80030b4:	fb91 f0f0 	sdiv	r0, r1, r0
 80030b8:	67a0      	str	r0, [r4, #120]	; 0x78
 80030ba:	21b4      	movs	r1, #180	; 0xb4
 80030bc:	7f60      	ldrb	r0, [r4, #29]
 80030be:	6767      	str	r7, [r4, #116]	; 0x74
 80030c0:	f8c4 c070 	str.w	ip, [r4, #112]	; 0x70
 80030c4:	2800      	cmp	r0, #0
 80030c6:	6013      	str	r3, [r2, #0]
 80030c8:	f000 80dd 	beq.w	8003286 <??HT_MF_49>
 80030cc:	6057      	str	r7, [r2, #4]
 80030ce:	f8c2 c004 	str.w	ip, [r2, #4]
 80030d2:	6890      	ldr	r0, [r2, #8]
 80030d4:	0c00      	lsrs	r0, r0, #16
 80030d6:	fb10 f501 	smulbb	r5, r0, r1
 80030da:	13ae      	asrs	r6, r5, #14
 80030dc:	eb05 4556 	add.w	r5, r5, r6, lsr #17
 80030e0:	13ed      	asrs	r5, r5, #15
 80030e2:	b22f      	sxth	r7, r5
 80030e4:	2f00      	cmp	r7, #0
 80030e6:	bf48      	it	mi
 80030e8:	f505 75b4 	addmi.w	r5, r5, #360	; 0x168
 80030ec:	8625      	strh	r5, [r4, #48]	; 0x30
 80030ee:	6d26      	ldr	r6, [r4, #80]	; 0x50
 80030f0:	6f25      	ldr	r5, [r4, #112]	; 0x70
 80030f2:	6f67      	ldr	r7, [r4, #116]	; 0x74
 80030f4:	f8d4 c054 	ldr.w	ip, [r4, #84]	; 0x54
 80030f8:	fb05 fe06 	mul.w	lr, r5, r6
 80030fc:	437e      	muls	r6, r7
 80030fe:	fb07 ee0c 	mla	lr, r7, ip, lr
 8003102:	fb0c 6515 	mls	r5, ip, r5, r6
 8003106:	f8c4 e048 	str.w	lr, [r4, #72]	; 0x48
 800310a:	6465      	str	r5, [r4, #68]	; 0x44
 800310c:	6013      	str	r3, [r2, #0]
 800310e:	f8c2 e004 	str.w	lr, [r2, #4]
 8003112:	6055      	str	r5, [r2, #4]
 8003114:	6895      	ldr	r5, [r2, #8]
 8003116:	85e0      	strh	r0, [r4, #46]	; 0x2e
 8003118:	0c2d      	lsrs	r5, r5, #16
 800311a:	f8a4 5080 	strh.w	r5, [r4, #128]	; 0x80
 800311e:	f9b4 0080 	ldrsh.w	r0, [r4, #128]	; 0x80
 8003122:	6d66      	ldr	r6, [r4, #84]	; 0x54
 8003124:	6e67      	ldr	r7, [r4, #100]	; 0x64
 8003126:	fb10 f001 	smulbb	r0, r0, r1
 800312a:	1385      	asrs	r5, r0, #14
 800312c:	eb00 4055 	add.w	r0, r0, r5, lsr #17
 8003130:	13c0      	asrs	r0, r0, #15
 8003132:	f8a4 0082 	strh.w	r0, [r4, #130]	; 0x82
 8003136:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8003138:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800313a:	fb00 fc05 	mul.w	ip, r0, r5
 800313e:	4375      	muls	r5, r6
 8003140:	fb06 cc07 	mla	ip, r6, r7, ip
 8003144:	fb07 5010 	mls	r0, r7, r0, r5
 8003148:	f8c4 c048 	str.w	ip, [r4, #72]	; 0x48
 800314c:	6460      	str	r0, [r4, #68]	; 0x44
 800314e:	6013      	str	r3, [r2, #0]
 8003150:	f8c2 c004 	str.w	ip, [r2, #4]
 8003154:	6050      	str	r0, [r2, #4]
 8003156:	6890      	ldr	r0, [r2, #8]
 8003158:	6e66      	ldr	r6, [r4, #100]	; 0x64
 800315a:	6de7      	ldr	r7, [r4, #92]	; 0x5c
 800315c:	0c00      	lsrs	r0, r0, #16
 800315e:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
 8003162:	f9b4 0084 	ldrsh.w	r0, [r4, #132]	; 0x84
 8003166:	fb10 f001 	smulbb	r0, r0, r1
 800316a:	1385      	asrs	r5, r0, #14
 800316c:	eb00 4055 	add.w	r0, r0, r5, lsr #17
 8003170:	13c0      	asrs	r0, r0, #15
 8003172:	f8a4 0086 	strh.w	r0, [r4, #134]	; 0x86
 8003176:	6da5      	ldr	r5, [r4, #88]	; 0x58
 8003178:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800317a:	fb00 fc05 	mul.w	ip, r0, r5
 800317e:	4375      	muls	r5, r6
 8003180:	fb06 cc07 	mla	ip, r6, r7, ip
 8003184:	fb07 5010 	mls	r0, r7, r0, r5
 8003188:	f8c4 c048 	str.w	ip, [r4, #72]	; 0x48
 800318c:	6460      	str	r0, [r4, #68]	; 0x44
 800318e:	6013      	str	r3, [r2, #0]
 8003190:	f8c2 c004 	str.w	ip, [r2, #4]
 8003194:	6050      	str	r0, [r2, #4]
 8003196:	6890      	ldr	r0, [r2, #8]
 8003198:	6de6      	ldr	r6, [r4, #92]	; 0x5c
 800319a:	6fe7      	ldr	r7, [r4, #124]	; 0x7c
 800319c:	0c00      	lsrs	r0, r0, #16
 800319e:	f8a4 0088 	strh.w	r0, [r4, #136]	; 0x88
 80031a2:	f9b4 0088 	ldrsh.w	r0, [r4, #136]	; 0x88
 80031a6:	fb10 f001 	smulbb	r0, r0, r1
 80031aa:	1385      	asrs	r5, r0, #14
 80031ac:	eb00 4055 	add.w	r0, r0, r5, lsr #17
 80031b0:	13c0      	asrs	r0, r0, #15
 80031b2:	f8a4 008a 	strh.w	r0, [r4, #138]	; 0x8a
 80031b6:	6fa5      	ldr	r5, [r4, #120]	; 0x78
 80031b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80031ba:	fb00 fc05 	mul.w	ip, r0, r5
 80031be:	4375      	muls	r5, r6
 80031c0:	fb06 cc07 	mla	ip, r6, r7, ip
 80031c4:	fb07 5010 	mls	r0, r7, r0, r5
 80031c8:	f8c4 c048 	str.w	ip, [r4, #72]	; 0x48
 80031cc:	6460      	str	r0, [r4, #68]	; 0x44
 80031ce:	6013      	str	r3, [r2, #0]
 80031d0:	f8c2 c004 	str.w	ip, [r2, #4]
 80031d4:	6050      	str	r0, [r2, #4]
 80031d6:	6890      	ldr	r0, [r2, #8]
 80031d8:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 80031da:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 80031dc:	0c00      	lsrs	r0, r0, #16
 80031de:	f8a4 008c 	strh.w	r0, [r4, #140]	; 0x8c
 80031e2:	f9b4 008c 	ldrsh.w	r0, [r4, #140]	; 0x8c
 80031e6:	fb10 f001 	smulbb	r0, r0, r1
 80031ea:	1385      	asrs	r5, r0, #14
 80031ec:	eb00 4055 	add.w	r0, r0, r5, lsr #17
 80031f0:	13c0      	asrs	r0, r0, #15
 80031f2:	f8a4 008e 	strh.w	r0, [r4, #142]	; 0x8e
 80031f6:	6ea5      	ldr	r5, [r4, #104]	; 0x68
 80031f8:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 80031fa:	fb00 fc05 	mul.w	ip, r0, r5
 80031fe:	4375      	muls	r5, r6
 8003200:	fb06 cc07 	mla	ip, r6, r7, ip
 8003204:	fb07 5010 	mls	r0, r7, r0, r5
 8003208:	f8c4 c048 	str.w	ip, [r4, #72]	; 0x48
 800320c:	6460      	str	r0, [r4, #68]	; 0x44
 800320e:	6013      	str	r3, [r2, #0]
 8003210:	f8c2 c004 	str.w	ip, [r2, #4]
 8003214:	6050      	str	r0, [r2, #4]
 8003216:	6890      	ldr	r0, [r2, #8]
 8003218:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 800321a:	6f67      	ldr	r7, [r4, #116]	; 0x74
 800321c:	0c00      	lsrs	r0, r0, #16
 800321e:	f8a4 0090 	strh.w	r0, [r4, #144]	; 0x90
 8003222:	f9b4 0090 	ldrsh.w	r0, [r4, #144]	; 0x90
 8003226:	fb10 f001 	smulbb	r0, r0, r1
 800322a:	1385      	asrs	r5, r0, #14
 800322c:	eb00 4055 	add.w	r0, r0, r5, lsr #17
 8003230:	13c0      	asrs	r0, r0, #15
 8003232:	f8a4 0092 	strh.w	r0, [r4, #146]	; 0x92
 8003236:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8003238:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800323a:	fb00 fc05 	mul.w	ip, r0, r5
 800323e:	4375      	muls	r5, r6
 8003240:	fb06 cc07 	mla	ip, r6, r7, ip
 8003244:	fb07 5010 	mls	r0, r7, r0, r5
 8003248:	f8c4 c048 	str.w	ip, [r4, #72]	; 0x48
 800324c:	6460      	str	r0, [r4, #68]	; 0x44
 800324e:	6013      	str	r3, [r2, #0]
 8003250:	f8c2 c004 	str.w	ip, [r2, #4]
 8003254:	6050      	str	r0, [r2, #4]
 8003256:	6890      	ldr	r0, [r2, #8]
 8003258:	0c00      	lsrs	r0, r0, #16
 800325a:	f8a4 0094 	strh.w	r0, [r4, #148]	; 0x94
 800325e:	f9b4 0094 	ldrsh.w	r0, [r4, #148]	; 0x94
 8003262:	fb10 f001 	smulbb	r0, r0, r1
 8003266:	1381      	asrs	r1, r0, #14
 8003268:	eb00 4051 	add.w	r0, r0, r1, lsr #17
 800326c:	13c0      	asrs	r0, r0, #15
 800326e:	f8a4 0096 	strh.w	r0, [r4, #150]	; 0x96
 8003272:	2000      	movs	r0, #0
 8003274:	4978      	ldr	r1, [pc, #480]	; (8003458 <??DataTable1>)
 8003276:	80c8      	strh	r0, [r1, #6]
 8003278:	7760      	strb	r0, [r4, #29]
 800327a:	2001      	movs	r0, #1
 800327c:	74e0      	strb	r0, [r4, #19]
 800327e:	2012      	movs	r0, #18

08003280 <??HT_MF_4>:
 8003280:	7420      	strb	r0, [r4, #16]

08003282 <??HT_MF_2>:
 8003282:	b001      	add	sp, #4
 8003284:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003286 <??HT_MF_49>:
 8003286:	6055      	str	r5, [r2, #4]
 8003288:	6056      	str	r6, [r2, #4]
 800328a:	6890      	ldr	r0, [r2, #8]
 800328c:	0c00      	lsrs	r0, r0, #16
 800328e:	fb10 f501 	smulbb	r5, r0, r1
 8003292:	13ae      	asrs	r6, r5, #14
 8003294:	eb05 4556 	add.w	r5, r5, r6, lsr #17
 8003298:	13ed      	asrs	r5, r5, #15
 800329a:	b22f      	sxth	r7, r5
 800329c:	2f00      	cmp	r7, #0
 800329e:	bf48      	it	mi
 80032a0:	f505 75b4 	addmi.w	r5, r5, #360	; 0x168
 80032a4:	86a5      	strh	r5, [r4, #52]	; 0x34
 80032a6:	6ea6      	ldr	r6, [r4, #104]	; 0x68
 80032a8:	6f25      	ldr	r5, [r4, #112]	; 0x70
 80032aa:	6f67      	ldr	r7, [r4, #116]	; 0x74
 80032ac:	f8d4 c06c 	ldr.w	ip, [r4, #108]	; 0x6c
 80032b0:	fb05 fe06 	mul.w	lr, r5, r6
 80032b4:	437e      	muls	r6, r7
 80032b6:	fb07 ee0c 	mla	lr, r7, ip, lr
 80032ba:	fb0c 6515 	mls	r5, ip, r5, r6
 80032be:	f8c4 e048 	str.w	lr, [r4, #72]	; 0x48
 80032c2:	6465      	str	r5, [r4, #68]	; 0x44
 80032c4:	6013      	str	r3, [r2, #0]
 80032c6:	f8c2 e004 	str.w	lr, [r2, #4]
 80032ca:	6055      	str	r5, [r2, #4]
 80032cc:	6895      	ldr	r5, [r2, #8]
 80032ce:	8660      	strh	r0, [r4, #50]	; 0x32
 80032d0:	0c2d      	lsrs	r5, r5, #16
 80032d2:	f8a4 5098 	strh.w	r5, [r4, #152]	; 0x98
 80032d6:	f9b4 0098 	ldrsh.w	r0, [r4, #152]	; 0x98
 80032da:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 80032dc:	6fe7      	ldr	r7, [r4, #124]	; 0x7c
 80032de:	fb10 f001 	smulbb	r0, r0, r1
 80032e2:	1385      	asrs	r5, r0, #14
 80032e4:	eb00 4055 	add.w	r0, r0, r5, lsr #17
 80032e8:	13c0      	asrs	r0, r0, #15
 80032ea:	f8a4 009a 	strh.w	r0, [r4, #154]	; 0x9a
 80032ee:	6fa5      	ldr	r5, [r4, #120]	; 0x78
 80032f0:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80032f2:	fb00 fc05 	mul.w	ip, r0, r5
 80032f6:	4375      	muls	r5, r6
 80032f8:	fb06 cc07 	mla	ip, r6, r7, ip
 80032fc:	fb07 5010 	mls	r0, r7, r0, r5
 8003300:	f8c4 c048 	str.w	ip, [r4, #72]	; 0x48
 8003304:	6460      	str	r0, [r4, #68]	; 0x44
 8003306:	6013      	str	r3, [r2, #0]
 8003308:	f8c2 c004 	str.w	ip, [r2, #4]
 800330c:	6050      	str	r0, [r2, #4]
 800330e:	6890      	ldr	r0, [r2, #8]
 8003310:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 8003312:	6de7      	ldr	r7, [r4, #92]	; 0x5c
 8003314:	0c00      	lsrs	r0, r0, #16
 8003316:	f8a4 009c 	strh.w	r0, [r4, #156]	; 0x9c
 800331a:	f9b4 009c 	ldrsh.w	r0, [r4, #156]	; 0x9c
 800331e:	fb10 f001 	smulbb	r0, r0, r1
 8003322:	1385      	asrs	r5, r0, #14
 8003324:	eb00 4055 	add.w	r0, r0, r5, lsr #17
 8003328:	13c0      	asrs	r0, r0, #15
 800332a:	f8a4 009e 	strh.w	r0, [r4, #158]	; 0x9e
 800332e:	6da5      	ldr	r5, [r4, #88]	; 0x58
 8003330:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8003332:	fb00 fc05 	mul.w	ip, r0, r5
 8003336:	4375      	muls	r5, r6
 8003338:	fb06 cc07 	mla	ip, r6, r7, ip
 800333c:	fb07 5010 	mls	r0, r7, r0, r5
 8003340:	f8c4 c048 	str.w	ip, [r4, #72]	; 0x48
 8003344:	6460      	str	r0, [r4, #68]	; 0x44
 8003346:	6013      	str	r3, [r2, #0]
 8003348:	f8c2 c004 	str.w	ip, [r2, #4]
 800334c:	6050      	str	r0, [r2, #4]
 800334e:	6890      	ldr	r0, [r2, #8]
 8003350:	6de6      	ldr	r6, [r4, #92]	; 0x5c
 8003352:	6e67      	ldr	r7, [r4, #100]	; 0x64
 8003354:	0c00      	lsrs	r0, r0, #16
 8003356:	f8a4 00a0 	strh.w	r0, [r4, #160]	; 0xa0
 800335a:	f9b4 00a0 	ldrsh.w	r0, [r4, #160]	; 0xa0
 800335e:	fb10 f001 	smulbb	r0, r0, r1
 8003362:	1385      	asrs	r5, r0, #14
 8003364:	eb00 4055 	add.w	r0, r0, r5, lsr #17
 8003368:	13c0      	asrs	r0, r0, #15
 800336a:	f8a4 00a2 	strh.w	r0, [r4, #162]	; 0xa2
 800336e:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8003370:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003372:	fb00 fc05 	mul.w	ip, r0, r5
 8003376:	4375      	muls	r5, r6
 8003378:	fb06 cc07 	mla	ip, r6, r7, ip
 800337c:	fb07 5010 	mls	r0, r7, r0, r5
 8003380:	f8c4 c048 	str.w	ip, [r4, #72]	; 0x48
 8003384:	6460      	str	r0, [r4, #68]	; 0x44
 8003386:	6013      	str	r3, [r2, #0]
 8003388:	f8c2 c004 	str.w	ip, [r2, #4]
 800338c:	6050      	str	r0, [r2, #4]
 800338e:	6890      	ldr	r0, [r2, #8]
 8003390:	6e66      	ldr	r6, [r4, #100]	; 0x64
 8003392:	6d67      	ldr	r7, [r4, #84]	; 0x54
 8003394:	0c00      	lsrs	r0, r0, #16
 8003396:	f8a4 00a4 	strh.w	r0, [r4, #164]	; 0xa4
 800339a:	f9b4 00a4 	ldrsh.w	r0, [r4, #164]	; 0xa4
 800339e:	fb10 f001 	smulbb	r0, r0, r1
 80033a2:	1385      	asrs	r5, r0, #14
 80033a4:	eb00 4055 	add.w	r0, r0, r5, lsr #17
 80033a8:	13c0      	asrs	r0, r0, #15
 80033aa:	f8a4 00a6 	strh.w	r0, [r4, #166]	; 0xa6
 80033ae:	6d25      	ldr	r5, [r4, #80]	; 0x50
 80033b0:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80033b2:	fb00 fc05 	mul.w	ip, r0, r5
 80033b6:	4375      	muls	r5, r6
 80033b8:	fb06 cc07 	mla	ip, r6, r7, ip
 80033bc:	fb07 5010 	mls	r0, r7, r0, r5
 80033c0:	f8c4 c048 	str.w	ip, [r4, #72]	; 0x48
 80033c4:	6460      	str	r0, [r4, #68]	; 0x44
 80033c6:	6013      	str	r3, [r2, #0]
 80033c8:	f8c2 c004 	str.w	ip, [r2, #4]
 80033cc:	6050      	str	r0, [r2, #4]
 80033ce:	6890      	ldr	r0, [r2, #8]
 80033d0:	6d66      	ldr	r6, [r4, #84]	; 0x54
 80033d2:	6f67      	ldr	r7, [r4, #116]	; 0x74
 80033d4:	0c00      	lsrs	r0, r0, #16
 80033d6:	f8a4 00a8 	strh.w	r0, [r4, #168]	; 0xa8
 80033da:	f9b4 00a8 	ldrsh.w	r0, [r4, #168]	; 0xa8
 80033de:	fb10 f001 	smulbb	r0, r0, r1
 80033e2:	1385      	asrs	r5, r0, #14
 80033e4:	eb00 4055 	add.w	r0, r0, r5, lsr #17
 80033e8:	13c0      	asrs	r0, r0, #15
 80033ea:	f8a4 00aa 	strh.w	r0, [r4, #170]	; 0xaa
 80033ee:	6f25      	ldr	r5, [r4, #112]	; 0x70
 80033f0:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80033f2:	fb00 fc05 	mul.w	ip, r0, r5
 80033f6:	4375      	muls	r5, r6
 80033f8:	fb06 cc07 	mla	ip, r6, r7, ip
 80033fc:	fb07 5010 	mls	r0, r7, r0, r5
 8003400:	f8c4 c048 	str.w	ip, [r4, #72]	; 0x48
 8003404:	6460      	str	r0, [r4, #68]	; 0x44
 8003406:	6013      	str	r3, [r2, #0]
 8003408:	f8c2 c004 	str.w	ip, [r2, #4]
 800340c:	6050      	str	r0, [r2, #4]
 800340e:	6890      	ldr	r0, [r2, #8]
 8003410:	0c00      	lsrs	r0, r0, #16
 8003412:	f8a4 00ac 	strh.w	r0, [r4, #172]	; 0xac
 8003416:	f9b4 00ac 	ldrsh.w	r0, [r4, #172]	; 0xac
 800341a:	fb10 f001 	smulbb	r0, r0, r1
 800341e:	1381      	asrs	r1, r0, #14
 8003420:	eb00 4051 	add.w	r0, r0, r1, lsr #17
 8003424:	13c0      	asrs	r0, r0, #15
 8003426:	f8a4 00ae 	strh.w	r0, [r4, #174]	; 0xae
 800342a:	2013      	movs	r0, #19
 800342c:	e728      	b.n	8003280 <??HT_MF_4>

0800342e <??HT_MF_50>:
 800342e:	7ce0      	ldrb	r0, [r4, #19]
 8003430:	2801      	cmp	r0, #1
 8003432:	bf14      	ite	ne
 8003434:	2100      	movne	r1, #0
 8003436:	2101      	moveq	r1, #1

08003438 <??HT_MF_51>:
 8003438:	4620      	mov	r0, r4
 800343a:	b001      	add	sp, #4
 800343c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8003440:	f7ff bb6e 	b.w	8002b20 <HT_Init>

08003444 <??HT_MF_52>:
 8003444:	7c60      	ldrb	r0, [r4, #17]
 8003446:	2800      	cmp	r0, #0
 8003448:	f47f af1b 	bne.w	8003282 <??HT_MF_2>
 800344c:	6820      	ldr	r0, [r4, #0]
 800344e:	2108      	movs	r1, #8
 8003450:	77c1      	strb	r1, [r0, #31]
 8003452:	2100      	movs	r1, #0
 8003454:	e7f0      	b.n	8003438 <??HT_MF_51>
	...

08003458 <??DataTable1>:
 8003458:	1ba4 2000                                   ... 

0800345c <??DataTable1_1>:
 800345c:	8bad 68db                                   ...h

08003460 <??DataTable1_2>:
 8003460:	0062 0010                                   b...

08003464 <??DataTable1_3>:
 8003464:	0c00 4002                                   ...@

08003468 <HT_GetPhaseShift>:
 8003468:	b510      	push	{r4, lr}
 800346a:	4604      	mov	r4, r0
 800346c:	6820      	ldr	r0, [r4, #0]
 800346e:	f001 fd03 	bl	8004e78 <MCI_GetSTMState>
 8003472:	7c21      	ldrb	r1, [r4, #16]
 8003474:	290f      	cmp	r1, #15
 8003476:	bf08      	it	eq
 8003478:	2806      	cmpeq	r0, #6
 800347a:	d104      	bne.n	8003486 <??HT_GetPhaseShift_0>
 800347c:	68e0      	ldr	r0, [r4, #12]
 800347e:	8881      	ldrh	r1, [r0, #4]
 8003480:	85a1      	strh	r1, [r4, #44]	; 0x2c
 8003482:	2010      	movs	r0, #16
 8003484:	7420      	strb	r0, [r4, #16]

08003486 <??HT_GetPhaseShift_0>:
 8003486:	bd10      	pop	{r4, pc}

08003488 <HT_SetMechanicalWantedDirection>:
 8003488:	77c1      	strb	r1, [r0, #31]
 800348a:	4770      	bx	lr

0800348c <HT_SetStart>:
 800348c:	7441      	strb	r1, [r0, #17]
 800348e:	4770      	bx	lr

08003490 <HT_SetRestart>:
 8003490:	2101      	movs	r1, #1
 8003492:	74c1      	strb	r1, [r0, #19]
 8003494:	4770      	bx	lr

08003496 <HT_SetAbort>:
 8003496:	2101      	movs	r1, #1
 8003498:	7501      	strb	r1, [r0, #20]
 800349a:	4770      	bx	lr
 800349c:	0000      	movs	r0, r0
	...

080034a0 <memchr>:
 80034a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80034a4:	2a10      	cmp	r2, #16
 80034a6:	db2b      	blt.n	8003500 <memchr+0x60>
 80034a8:	f010 0f07 	tst.w	r0, #7
 80034ac:	d008      	beq.n	80034c0 <memchr+0x20>
 80034ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80034b2:	3a01      	subs	r2, #1
 80034b4:	428b      	cmp	r3, r1
 80034b6:	d02d      	beq.n	8003514 <memchr+0x74>
 80034b8:	f010 0f07 	tst.w	r0, #7
 80034bc:	b342      	cbz	r2, 8003510 <memchr+0x70>
 80034be:	d1f6      	bne.n	80034ae <memchr+0xe>
 80034c0:	b4f0      	push	{r4, r5, r6, r7}
 80034c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80034c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80034ca:	f022 0407 	bic.w	r4, r2, #7
 80034ce:	f07f 0700 	mvns.w	r7, #0
 80034d2:	2300      	movs	r3, #0
 80034d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80034d8:	3c08      	subs	r4, #8
 80034da:	ea85 0501 	eor.w	r5, r5, r1
 80034de:	ea86 0601 	eor.w	r6, r6, r1
 80034e2:	fa85 f547 	uadd8	r5, r5, r7
 80034e6:	faa3 f587 	sel	r5, r3, r7
 80034ea:	fa86 f647 	uadd8	r6, r6, r7
 80034ee:	faa5 f687 	sel	r6, r5, r7
 80034f2:	b98e      	cbnz	r6, 8003518 <memchr+0x78>
 80034f4:	d1ee      	bne.n	80034d4 <memchr+0x34>
 80034f6:	bcf0      	pop	{r4, r5, r6, r7}
 80034f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80034fc:	f002 0207 	and.w	r2, r2, #7
 8003500:	b132      	cbz	r2, 8003510 <memchr+0x70>
 8003502:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003506:	3a01      	subs	r2, #1
 8003508:	ea83 0301 	eor.w	r3, r3, r1
 800350c:	b113      	cbz	r3, 8003514 <memchr+0x74>
 800350e:	d1f8      	bne.n	8003502 <memchr+0x62>
 8003510:	2000      	movs	r0, #0
 8003512:	4770      	bx	lr
 8003514:	3801      	subs	r0, #1
 8003516:	4770      	bx	lr
 8003518:	2d00      	cmp	r5, #0
 800351a:	bf06      	itte	eq
 800351c:	4635      	moveq	r5, r6
 800351e:	3803      	subeq	r0, #3
 8003520:	3807      	subne	r0, #7
 8003522:	f015 0f01 	tst.w	r5, #1
 8003526:	d107      	bne.n	8003538 <memchr+0x98>
 8003528:	3001      	adds	r0, #1
 800352a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800352e:	bf02      	ittt	eq
 8003530:	3001      	addeq	r0, #1
 8003532:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8003536:	3001      	addeq	r0, #1
 8003538:	bcf0      	pop	{r4, r5, r6, r7}
 800353a:	3801      	subs	r0, #1
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop

08003540 <__aeabi_drsub>:
 8003540:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8003544:	e002      	b.n	800354c <__adddf3>
 8003546:	bf00      	nop

08003548 <__aeabi_dsub>:
 8003548:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800354c <__adddf3>:
 800354c:	b530      	push	{r4, r5, lr}
 800354e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8003552:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8003556:	ea94 0f05 	teq	r4, r5
 800355a:	bf08      	it	eq
 800355c:	ea90 0f02 	teqeq	r0, r2
 8003560:	bf1f      	itttt	ne
 8003562:	ea54 0c00 	orrsne.w	ip, r4, r0
 8003566:	ea55 0c02 	orrsne.w	ip, r5, r2
 800356a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800356e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8003572:	f000 80e2 	beq.w	800373a <__adddf3+0x1ee>
 8003576:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800357a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800357e:	bfb8      	it	lt
 8003580:	426d      	neglt	r5, r5
 8003582:	dd0c      	ble.n	800359e <__adddf3+0x52>
 8003584:	442c      	add	r4, r5
 8003586:	ea80 0202 	eor.w	r2, r0, r2
 800358a:	ea81 0303 	eor.w	r3, r1, r3
 800358e:	ea82 0000 	eor.w	r0, r2, r0
 8003592:	ea83 0101 	eor.w	r1, r3, r1
 8003596:	ea80 0202 	eor.w	r2, r0, r2
 800359a:	ea81 0303 	eor.w	r3, r1, r3
 800359e:	2d36      	cmp	r5, #54	; 0x36
 80035a0:	bf88      	it	hi
 80035a2:	bd30      	pophi	{r4, r5, pc}
 80035a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80035a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80035ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80035b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80035b4:	d002      	beq.n	80035bc <__adddf3+0x70>
 80035b6:	4240      	negs	r0, r0
 80035b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80035bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80035c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80035c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80035c8:	d002      	beq.n	80035d0 <__adddf3+0x84>
 80035ca:	4252      	negs	r2, r2
 80035cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80035d0:	ea94 0f05 	teq	r4, r5
 80035d4:	f000 80a7 	beq.w	8003726 <__adddf3+0x1da>
 80035d8:	f1a4 0401 	sub.w	r4, r4, #1
 80035dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80035e0:	db0d      	blt.n	80035fe <__adddf3+0xb2>
 80035e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80035e6:	fa22 f205 	lsr.w	r2, r2, r5
 80035ea:	1880      	adds	r0, r0, r2
 80035ec:	f141 0100 	adc.w	r1, r1, #0
 80035f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80035f4:	1880      	adds	r0, r0, r2
 80035f6:	fa43 f305 	asr.w	r3, r3, r5
 80035fa:	4159      	adcs	r1, r3
 80035fc:	e00e      	b.n	800361c <__adddf3+0xd0>
 80035fe:	f1a5 0520 	sub.w	r5, r5, #32
 8003602:	f10e 0e20 	add.w	lr, lr, #32
 8003606:	2a01      	cmp	r2, #1
 8003608:	fa03 fc0e 	lsl.w	ip, r3, lr
 800360c:	bf28      	it	cs
 800360e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8003612:	fa43 f305 	asr.w	r3, r3, r5
 8003616:	18c0      	adds	r0, r0, r3
 8003618:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800361c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8003620:	d507      	bpl.n	8003632 <__adddf3+0xe6>
 8003622:	f04f 0e00 	mov.w	lr, #0
 8003626:	f1dc 0c00 	rsbs	ip, ip, #0
 800362a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800362e:	eb6e 0101 	sbc.w	r1, lr, r1
 8003632:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8003636:	d31b      	bcc.n	8003670 <__adddf3+0x124>
 8003638:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800363c:	d30c      	bcc.n	8003658 <__adddf3+0x10c>
 800363e:	0849      	lsrs	r1, r1, #1
 8003640:	ea5f 0030 	movs.w	r0, r0, rrx
 8003644:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8003648:	f104 0401 	add.w	r4, r4, #1
 800364c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8003650:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8003654:	f080 809a 	bcs.w	800378c <__adddf3+0x240>
 8003658:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800365c:	bf08      	it	eq
 800365e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8003662:	f150 0000 	adcs.w	r0, r0, #0
 8003666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800366a:	ea41 0105 	orr.w	r1, r1, r5
 800366e:	bd30      	pop	{r4, r5, pc}
 8003670:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8003674:	4140      	adcs	r0, r0
 8003676:	eb41 0101 	adc.w	r1, r1, r1
 800367a:	3c01      	subs	r4, #1
 800367c:	bf28      	it	cs
 800367e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8003682:	d2e9      	bcs.n	8003658 <__adddf3+0x10c>
 8003684:	f091 0f00 	teq	r1, #0
 8003688:	bf04      	itt	eq
 800368a:	4601      	moveq	r1, r0
 800368c:	2000      	moveq	r0, #0
 800368e:	fab1 f381 	clz	r3, r1
 8003692:	bf08      	it	eq
 8003694:	3320      	addeq	r3, #32
 8003696:	f1a3 030b 	sub.w	r3, r3, #11
 800369a:	f1b3 0220 	subs.w	r2, r3, #32
 800369e:	da0c      	bge.n	80036ba <__adddf3+0x16e>
 80036a0:	320c      	adds	r2, #12
 80036a2:	dd08      	ble.n	80036b6 <__adddf3+0x16a>
 80036a4:	f102 0c14 	add.w	ip, r2, #20
 80036a8:	f1c2 020c 	rsb	r2, r2, #12
 80036ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80036b0:	fa21 f102 	lsr.w	r1, r1, r2
 80036b4:	e00c      	b.n	80036d0 <__adddf3+0x184>
 80036b6:	f102 0214 	add.w	r2, r2, #20
 80036ba:	bfd8      	it	le
 80036bc:	f1c2 0c20 	rsble	ip, r2, #32
 80036c0:	fa01 f102 	lsl.w	r1, r1, r2
 80036c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80036c8:	bfdc      	itt	le
 80036ca:	ea41 010c 	orrle.w	r1, r1, ip
 80036ce:	4090      	lslle	r0, r2
 80036d0:	1ae4      	subs	r4, r4, r3
 80036d2:	bfa2      	ittt	ge
 80036d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80036d8:	4329      	orrge	r1, r5
 80036da:	bd30      	popge	{r4, r5, pc}
 80036dc:	ea6f 0404 	mvn.w	r4, r4
 80036e0:	3c1f      	subs	r4, #31
 80036e2:	da1c      	bge.n	800371e <__adddf3+0x1d2>
 80036e4:	340c      	adds	r4, #12
 80036e6:	dc0e      	bgt.n	8003706 <__adddf3+0x1ba>
 80036e8:	f104 0414 	add.w	r4, r4, #20
 80036ec:	f1c4 0220 	rsb	r2, r4, #32
 80036f0:	fa20 f004 	lsr.w	r0, r0, r4
 80036f4:	fa01 f302 	lsl.w	r3, r1, r2
 80036f8:	ea40 0003 	orr.w	r0, r0, r3
 80036fc:	fa21 f304 	lsr.w	r3, r1, r4
 8003700:	ea45 0103 	orr.w	r1, r5, r3
 8003704:	bd30      	pop	{r4, r5, pc}
 8003706:	f1c4 040c 	rsb	r4, r4, #12
 800370a:	f1c4 0220 	rsb	r2, r4, #32
 800370e:	fa20 f002 	lsr.w	r0, r0, r2
 8003712:	fa01 f304 	lsl.w	r3, r1, r4
 8003716:	ea40 0003 	orr.w	r0, r0, r3
 800371a:	4629      	mov	r1, r5
 800371c:	bd30      	pop	{r4, r5, pc}
 800371e:	fa21 f004 	lsr.w	r0, r1, r4
 8003722:	4629      	mov	r1, r5
 8003724:	bd30      	pop	{r4, r5, pc}
 8003726:	f094 0f00 	teq	r4, #0
 800372a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800372e:	bf06      	itte	eq
 8003730:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8003734:	3401      	addeq	r4, #1
 8003736:	3d01      	subne	r5, #1
 8003738:	e74e      	b.n	80035d8 <__adddf3+0x8c>
 800373a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800373e:	bf18      	it	ne
 8003740:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8003744:	d029      	beq.n	800379a <__adddf3+0x24e>
 8003746:	ea94 0f05 	teq	r4, r5
 800374a:	bf08      	it	eq
 800374c:	ea90 0f02 	teqeq	r0, r2
 8003750:	d005      	beq.n	800375e <__adddf3+0x212>
 8003752:	ea54 0c00 	orrs.w	ip, r4, r0
 8003756:	bf04      	itt	eq
 8003758:	4619      	moveq	r1, r3
 800375a:	4610      	moveq	r0, r2
 800375c:	bd30      	pop	{r4, r5, pc}
 800375e:	ea91 0f03 	teq	r1, r3
 8003762:	bf1e      	ittt	ne
 8003764:	2100      	movne	r1, #0
 8003766:	2000      	movne	r0, #0
 8003768:	bd30      	popne	{r4, r5, pc}
 800376a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800376e:	d105      	bne.n	800377c <__adddf3+0x230>
 8003770:	0040      	lsls	r0, r0, #1
 8003772:	4149      	adcs	r1, r1
 8003774:	bf28      	it	cs
 8003776:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800377a:	bd30      	pop	{r4, r5, pc}
 800377c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8003780:	bf3c      	itt	cc
 8003782:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8003786:	bd30      	popcc	{r4, r5, pc}
 8003788:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800378c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8003790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003794:	f04f 0000 	mov.w	r0, #0
 8003798:	bd30      	pop	{r4, r5, pc}
 800379a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800379e:	bf1a      	itte	ne
 80037a0:	4619      	movne	r1, r3
 80037a2:	4610      	movne	r0, r2
 80037a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80037a8:	bf1c      	itt	ne
 80037aa:	460b      	movne	r3, r1
 80037ac:	4602      	movne	r2, r0
 80037ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80037b2:	bf06      	itte	eq
 80037b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80037b8:	ea91 0f03 	teqeq	r1, r3
 80037bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80037c0:	bd30      	pop	{r4, r5, pc}
 80037c2:	bf00      	nop

080037c4 <__aeabi_ui2d>:
 80037c4:	f090 0f00 	teq	r0, #0
 80037c8:	bf04      	itt	eq
 80037ca:	2100      	moveq	r1, #0
 80037cc:	4770      	bxeq	lr
 80037ce:	b530      	push	{r4, r5, lr}
 80037d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80037d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80037d8:	f04f 0500 	mov.w	r5, #0
 80037dc:	f04f 0100 	mov.w	r1, #0
 80037e0:	e750      	b.n	8003684 <__adddf3+0x138>
 80037e2:	bf00      	nop

080037e4 <__aeabi_i2d>:
 80037e4:	f090 0f00 	teq	r0, #0
 80037e8:	bf04      	itt	eq
 80037ea:	2100      	moveq	r1, #0
 80037ec:	4770      	bxeq	lr
 80037ee:	b530      	push	{r4, r5, lr}
 80037f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80037f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80037f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80037fc:	bf48      	it	mi
 80037fe:	4240      	negmi	r0, r0
 8003800:	f04f 0100 	mov.w	r1, #0
 8003804:	e73e      	b.n	8003684 <__adddf3+0x138>
 8003806:	bf00      	nop

08003808 <__aeabi_f2d>:
 8003808:	0042      	lsls	r2, r0, #1
 800380a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800380e:	ea4f 0131 	mov.w	r1, r1, rrx
 8003812:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8003816:	bf1f      	itttt	ne
 8003818:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800381c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8003820:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8003824:	4770      	bxne	lr
 8003826:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800382a:	bf08      	it	eq
 800382c:	4770      	bxeq	lr
 800382e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8003832:	bf04      	itt	eq
 8003834:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8003838:	4770      	bxeq	lr
 800383a:	b530      	push	{r4, r5, lr}
 800383c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8003840:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8003844:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003848:	e71c      	b.n	8003684 <__adddf3+0x138>
 800384a:	bf00      	nop

0800384c <__aeabi_ul2d>:
 800384c:	ea50 0201 	orrs.w	r2, r0, r1
 8003850:	bf08      	it	eq
 8003852:	4770      	bxeq	lr
 8003854:	b530      	push	{r4, r5, lr}
 8003856:	f04f 0500 	mov.w	r5, #0
 800385a:	e00a      	b.n	8003872 <__aeabi_l2d+0x16>

0800385c <__aeabi_l2d>:
 800385c:	ea50 0201 	orrs.w	r2, r0, r1
 8003860:	bf08      	it	eq
 8003862:	4770      	bxeq	lr
 8003864:	b530      	push	{r4, r5, lr}
 8003866:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800386a:	d502      	bpl.n	8003872 <__aeabi_l2d+0x16>
 800386c:	4240      	negs	r0, r0
 800386e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8003872:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8003876:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800387a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800387e:	f43f aed8 	beq.w	8003632 <__adddf3+0xe6>
 8003882:	f04f 0203 	mov.w	r2, #3
 8003886:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800388a:	bf18      	it	ne
 800388c:	3203      	addne	r2, #3
 800388e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8003892:	bf18      	it	ne
 8003894:	3203      	addne	r2, #3
 8003896:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800389a:	f1c2 0320 	rsb	r3, r2, #32
 800389e:	fa00 fc03 	lsl.w	ip, r0, r3
 80038a2:	fa20 f002 	lsr.w	r0, r0, r2
 80038a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80038aa:	ea40 000e 	orr.w	r0, r0, lr
 80038ae:	fa21 f102 	lsr.w	r1, r1, r2
 80038b2:	4414      	add	r4, r2
 80038b4:	e6bd      	b.n	8003632 <__adddf3+0xe6>
 80038b6:	bf00      	nop

080038b8 <__aeabi_dmul>:
 80038b8:	b570      	push	{r4, r5, r6, lr}
 80038ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80038be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80038c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80038c6:	bf1d      	ittte	ne
 80038c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80038cc:	ea94 0f0c 	teqne	r4, ip
 80038d0:	ea95 0f0c 	teqne	r5, ip
 80038d4:	f000 f8de 	bleq	8003a94 <__aeabi_dmul+0x1dc>
 80038d8:	442c      	add	r4, r5
 80038da:	ea81 0603 	eor.w	r6, r1, r3
 80038de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80038e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80038e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80038ea:	bf18      	it	ne
 80038ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80038f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80038f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038f8:	d038      	beq.n	800396c <__aeabi_dmul+0xb4>
 80038fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80038fe:	f04f 0500 	mov.w	r5, #0
 8003902:	fbe1 e502 	umlal	lr, r5, r1, r2
 8003906:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800390a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800390e:	f04f 0600 	mov.w	r6, #0
 8003912:	fbe1 5603 	umlal	r5, r6, r1, r3
 8003916:	f09c 0f00 	teq	ip, #0
 800391a:	bf18      	it	ne
 800391c:	f04e 0e01 	orrne.w	lr, lr, #1
 8003920:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8003924:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8003928:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800392c:	d204      	bcs.n	8003938 <__aeabi_dmul+0x80>
 800392e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8003932:	416d      	adcs	r5, r5
 8003934:	eb46 0606 	adc.w	r6, r6, r6
 8003938:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800393c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8003940:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8003944:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8003948:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800394c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8003950:	bf88      	it	hi
 8003952:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8003956:	d81e      	bhi.n	8003996 <__aeabi_dmul+0xde>
 8003958:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800395c:	bf08      	it	eq
 800395e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8003962:	f150 0000 	adcs.w	r0, r0, #0
 8003966:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800396a:	bd70      	pop	{r4, r5, r6, pc}
 800396c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8003970:	ea46 0101 	orr.w	r1, r6, r1
 8003974:	ea40 0002 	orr.w	r0, r0, r2
 8003978:	ea81 0103 	eor.w	r1, r1, r3
 800397c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8003980:	bfc2      	ittt	gt
 8003982:	ebd4 050c 	rsbsgt	r5, r4, ip
 8003986:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800398a:	bd70      	popgt	{r4, r5, r6, pc}
 800398c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8003990:	f04f 0e00 	mov.w	lr, #0
 8003994:	3c01      	subs	r4, #1
 8003996:	f300 80ab 	bgt.w	8003af0 <__aeabi_dmul+0x238>
 800399a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800399e:	bfde      	ittt	le
 80039a0:	2000      	movle	r0, #0
 80039a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80039a6:	bd70      	pople	{r4, r5, r6, pc}
 80039a8:	f1c4 0400 	rsb	r4, r4, #0
 80039ac:	3c20      	subs	r4, #32
 80039ae:	da35      	bge.n	8003a1c <__aeabi_dmul+0x164>
 80039b0:	340c      	adds	r4, #12
 80039b2:	dc1b      	bgt.n	80039ec <__aeabi_dmul+0x134>
 80039b4:	f104 0414 	add.w	r4, r4, #20
 80039b8:	f1c4 0520 	rsb	r5, r4, #32
 80039bc:	fa00 f305 	lsl.w	r3, r0, r5
 80039c0:	fa20 f004 	lsr.w	r0, r0, r4
 80039c4:	fa01 f205 	lsl.w	r2, r1, r5
 80039c8:	ea40 0002 	orr.w	r0, r0, r2
 80039cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80039d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80039d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80039d8:	fa21 f604 	lsr.w	r6, r1, r4
 80039dc:	eb42 0106 	adc.w	r1, r2, r6
 80039e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80039e4:	bf08      	it	eq
 80039e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80039ea:	bd70      	pop	{r4, r5, r6, pc}
 80039ec:	f1c4 040c 	rsb	r4, r4, #12
 80039f0:	f1c4 0520 	rsb	r5, r4, #32
 80039f4:	fa00 f304 	lsl.w	r3, r0, r4
 80039f8:	fa20 f005 	lsr.w	r0, r0, r5
 80039fc:	fa01 f204 	lsl.w	r2, r1, r4
 8003a00:	ea40 0002 	orr.w	r0, r0, r2
 8003a04:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8003a08:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8003a0c:	f141 0100 	adc.w	r1, r1, #0
 8003a10:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8003a14:	bf08      	it	eq
 8003a16:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8003a1a:	bd70      	pop	{r4, r5, r6, pc}
 8003a1c:	f1c4 0520 	rsb	r5, r4, #32
 8003a20:	fa00 f205 	lsl.w	r2, r0, r5
 8003a24:	ea4e 0e02 	orr.w	lr, lr, r2
 8003a28:	fa20 f304 	lsr.w	r3, r0, r4
 8003a2c:	fa01 f205 	lsl.w	r2, r1, r5
 8003a30:	ea43 0302 	orr.w	r3, r3, r2
 8003a34:	fa21 f004 	lsr.w	r0, r1, r4
 8003a38:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8003a3c:	fa21 f204 	lsr.w	r2, r1, r4
 8003a40:	ea20 0002 	bic.w	r0, r0, r2
 8003a44:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8003a48:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8003a4c:	bf08      	it	eq
 8003a4e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8003a52:	bd70      	pop	{r4, r5, r6, pc}
 8003a54:	f094 0f00 	teq	r4, #0
 8003a58:	d10f      	bne.n	8003a7a <__aeabi_dmul+0x1c2>
 8003a5a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8003a5e:	0040      	lsls	r0, r0, #1
 8003a60:	eb41 0101 	adc.w	r1, r1, r1
 8003a64:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8003a68:	bf08      	it	eq
 8003a6a:	3c01      	subeq	r4, #1
 8003a6c:	d0f7      	beq.n	8003a5e <__aeabi_dmul+0x1a6>
 8003a6e:	ea41 0106 	orr.w	r1, r1, r6
 8003a72:	f095 0f00 	teq	r5, #0
 8003a76:	bf18      	it	ne
 8003a78:	4770      	bxne	lr
 8003a7a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8003a7e:	0052      	lsls	r2, r2, #1
 8003a80:	eb43 0303 	adc.w	r3, r3, r3
 8003a84:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003a88:	bf08      	it	eq
 8003a8a:	3d01      	subeq	r5, #1
 8003a8c:	d0f7      	beq.n	8003a7e <__aeabi_dmul+0x1c6>
 8003a8e:	ea43 0306 	orr.w	r3, r3, r6
 8003a92:	4770      	bx	lr
 8003a94:	ea94 0f0c 	teq	r4, ip
 8003a98:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8003a9c:	bf18      	it	ne
 8003a9e:	ea95 0f0c 	teqne	r5, ip
 8003aa2:	d00c      	beq.n	8003abe <__aeabi_dmul+0x206>
 8003aa4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8003aa8:	bf18      	it	ne
 8003aaa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8003aae:	d1d1      	bne.n	8003a54 <__aeabi_dmul+0x19c>
 8003ab0:	ea81 0103 	eor.w	r1, r1, r3
 8003ab4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8003ab8:	f04f 0000 	mov.w	r0, #0
 8003abc:	bd70      	pop	{r4, r5, r6, pc}
 8003abe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8003ac2:	bf06      	itte	eq
 8003ac4:	4610      	moveq	r0, r2
 8003ac6:	4619      	moveq	r1, r3
 8003ac8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8003acc:	d019      	beq.n	8003b02 <__aeabi_dmul+0x24a>
 8003ace:	ea94 0f0c 	teq	r4, ip
 8003ad2:	d102      	bne.n	8003ada <__aeabi_dmul+0x222>
 8003ad4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8003ad8:	d113      	bne.n	8003b02 <__aeabi_dmul+0x24a>
 8003ada:	ea95 0f0c 	teq	r5, ip
 8003ade:	d105      	bne.n	8003aec <__aeabi_dmul+0x234>
 8003ae0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8003ae4:	bf1c      	itt	ne
 8003ae6:	4610      	movne	r0, r2
 8003ae8:	4619      	movne	r1, r3
 8003aea:	d10a      	bne.n	8003b02 <__aeabi_dmul+0x24a>
 8003aec:	ea81 0103 	eor.w	r1, r1, r3
 8003af0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8003af4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8003af8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003afc:	f04f 0000 	mov.w	r0, #0
 8003b00:	bd70      	pop	{r4, r5, r6, pc}
 8003b02:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8003b06:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8003b0a:	bd70      	pop	{r4, r5, r6, pc}

08003b0c <__aeabi_ddiv>:
 8003b0c:	b570      	push	{r4, r5, r6, lr}
 8003b0e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8003b12:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8003b16:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8003b1a:	bf1d      	ittte	ne
 8003b1c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8003b20:	ea94 0f0c 	teqne	r4, ip
 8003b24:	ea95 0f0c 	teqne	r5, ip
 8003b28:	f000 f8a7 	bleq	8003c7a <__aeabi_ddiv+0x16e>
 8003b2c:	eba4 0405 	sub.w	r4, r4, r5
 8003b30:	ea81 0e03 	eor.w	lr, r1, r3
 8003b34:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8003b38:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8003b3c:	f000 8088 	beq.w	8003c50 <__aeabi_ddiv+0x144>
 8003b40:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8003b44:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8003b48:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8003b4c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8003b50:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8003b54:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8003b58:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8003b5c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8003b60:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8003b64:	429d      	cmp	r5, r3
 8003b66:	bf08      	it	eq
 8003b68:	4296      	cmpeq	r6, r2
 8003b6a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8003b6e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8003b72:	d202      	bcs.n	8003b7a <__aeabi_ddiv+0x6e>
 8003b74:	085b      	lsrs	r3, r3, #1
 8003b76:	ea4f 0232 	mov.w	r2, r2, rrx
 8003b7a:	1ab6      	subs	r6, r6, r2
 8003b7c:	eb65 0503 	sbc.w	r5, r5, r3
 8003b80:	085b      	lsrs	r3, r3, #1
 8003b82:	ea4f 0232 	mov.w	r2, r2, rrx
 8003b86:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003b8a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8003b8e:	ebb6 0e02 	subs.w	lr, r6, r2
 8003b92:	eb75 0e03 	sbcs.w	lr, r5, r3
 8003b96:	bf22      	ittt	cs
 8003b98:	1ab6      	subcs	r6, r6, r2
 8003b9a:	4675      	movcs	r5, lr
 8003b9c:	ea40 000c 	orrcs.w	r0, r0, ip
 8003ba0:	085b      	lsrs	r3, r3, #1
 8003ba2:	ea4f 0232 	mov.w	r2, r2, rrx
 8003ba6:	ebb6 0e02 	subs.w	lr, r6, r2
 8003baa:	eb75 0e03 	sbcs.w	lr, r5, r3
 8003bae:	bf22      	ittt	cs
 8003bb0:	1ab6      	subcs	r6, r6, r2
 8003bb2:	4675      	movcs	r5, lr
 8003bb4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8003bb8:	085b      	lsrs	r3, r3, #1
 8003bba:	ea4f 0232 	mov.w	r2, r2, rrx
 8003bbe:	ebb6 0e02 	subs.w	lr, r6, r2
 8003bc2:	eb75 0e03 	sbcs.w	lr, r5, r3
 8003bc6:	bf22      	ittt	cs
 8003bc8:	1ab6      	subcs	r6, r6, r2
 8003bca:	4675      	movcs	r5, lr
 8003bcc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8003bd0:	085b      	lsrs	r3, r3, #1
 8003bd2:	ea4f 0232 	mov.w	r2, r2, rrx
 8003bd6:	ebb6 0e02 	subs.w	lr, r6, r2
 8003bda:	eb75 0e03 	sbcs.w	lr, r5, r3
 8003bde:	bf22      	ittt	cs
 8003be0:	1ab6      	subcs	r6, r6, r2
 8003be2:	4675      	movcs	r5, lr
 8003be4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8003be8:	ea55 0e06 	orrs.w	lr, r5, r6
 8003bec:	d018      	beq.n	8003c20 <__aeabi_ddiv+0x114>
 8003bee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8003bf2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8003bf6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8003bfa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8003bfe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8003c02:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8003c06:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8003c0a:	d1c0      	bne.n	8003b8e <__aeabi_ddiv+0x82>
 8003c0c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8003c10:	d10b      	bne.n	8003c2a <__aeabi_ddiv+0x11e>
 8003c12:	ea41 0100 	orr.w	r1, r1, r0
 8003c16:	f04f 0000 	mov.w	r0, #0
 8003c1a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8003c1e:	e7b6      	b.n	8003b8e <__aeabi_ddiv+0x82>
 8003c20:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8003c24:	bf04      	itt	eq
 8003c26:	4301      	orreq	r1, r0
 8003c28:	2000      	moveq	r0, #0
 8003c2a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8003c2e:	bf88      	it	hi
 8003c30:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8003c34:	f63f aeaf 	bhi.w	8003996 <__aeabi_dmul+0xde>
 8003c38:	ebb5 0c03 	subs.w	ip, r5, r3
 8003c3c:	bf04      	itt	eq
 8003c3e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8003c42:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8003c46:	f150 0000 	adcs.w	r0, r0, #0
 8003c4a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8003c4e:	bd70      	pop	{r4, r5, r6, pc}
 8003c50:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8003c54:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8003c58:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8003c5c:	bfc2      	ittt	gt
 8003c5e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8003c62:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8003c66:	bd70      	popgt	{r4, r5, r6, pc}
 8003c68:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8003c6c:	f04f 0e00 	mov.w	lr, #0
 8003c70:	3c01      	subs	r4, #1
 8003c72:	e690      	b.n	8003996 <__aeabi_dmul+0xde>
 8003c74:	ea45 0e06 	orr.w	lr, r5, r6
 8003c78:	e68d      	b.n	8003996 <__aeabi_dmul+0xde>
 8003c7a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8003c7e:	ea94 0f0c 	teq	r4, ip
 8003c82:	bf08      	it	eq
 8003c84:	ea95 0f0c 	teqeq	r5, ip
 8003c88:	f43f af3b 	beq.w	8003b02 <__aeabi_dmul+0x24a>
 8003c8c:	ea94 0f0c 	teq	r4, ip
 8003c90:	d10a      	bne.n	8003ca8 <__aeabi_ddiv+0x19c>
 8003c92:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8003c96:	f47f af34 	bne.w	8003b02 <__aeabi_dmul+0x24a>
 8003c9a:	ea95 0f0c 	teq	r5, ip
 8003c9e:	f47f af25 	bne.w	8003aec <__aeabi_dmul+0x234>
 8003ca2:	4610      	mov	r0, r2
 8003ca4:	4619      	mov	r1, r3
 8003ca6:	e72c      	b.n	8003b02 <__aeabi_dmul+0x24a>
 8003ca8:	ea95 0f0c 	teq	r5, ip
 8003cac:	d106      	bne.n	8003cbc <__aeabi_ddiv+0x1b0>
 8003cae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8003cb2:	f43f aefd 	beq.w	8003ab0 <__aeabi_dmul+0x1f8>
 8003cb6:	4610      	mov	r0, r2
 8003cb8:	4619      	mov	r1, r3
 8003cba:	e722      	b.n	8003b02 <__aeabi_dmul+0x24a>
 8003cbc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8003cc0:	bf18      	it	ne
 8003cc2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8003cc6:	f47f aec5 	bne.w	8003a54 <__aeabi_dmul+0x19c>
 8003cca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8003cce:	f47f af0d 	bne.w	8003aec <__aeabi_dmul+0x234>
 8003cd2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8003cd6:	f47f aeeb 	bne.w	8003ab0 <__aeabi_dmul+0x1f8>
 8003cda:	e712      	b.n	8003b02 <__aeabi_dmul+0x24a>

08003cdc <__aeabi_d2iz>:
 8003cdc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8003ce0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8003ce4:	d215      	bcs.n	8003d12 <__aeabi_d2iz+0x36>
 8003ce6:	d511      	bpl.n	8003d0c <__aeabi_d2iz+0x30>
 8003ce8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8003cec:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8003cf0:	d912      	bls.n	8003d18 <__aeabi_d2iz+0x3c>
 8003cf2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8003cf6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003cfa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8003cfe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8003d02:	fa23 f002 	lsr.w	r0, r3, r2
 8003d06:	bf18      	it	ne
 8003d08:	4240      	negne	r0, r0
 8003d0a:	4770      	bx	lr
 8003d0c:	f04f 0000 	mov.w	r0, #0
 8003d10:	4770      	bx	lr
 8003d12:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8003d16:	d105      	bne.n	8003d24 <__aeabi_d2iz+0x48>
 8003d18:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8003d1c:	bf08      	it	eq
 8003d1e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8003d22:	4770      	bx	lr
 8003d24:	f04f 0000 	mov.w	r0, #0
 8003d28:	4770      	bx	lr
 8003d2a:	bf00      	nop

08003d2c <__aeabi_uldivmod>:
 8003d2c:	b953      	cbnz	r3, 8003d44 <__aeabi_uldivmod+0x18>
 8003d2e:	b94a      	cbnz	r2, 8003d44 <__aeabi_uldivmod+0x18>
 8003d30:	2900      	cmp	r1, #0
 8003d32:	bf08      	it	eq
 8003d34:	2800      	cmpeq	r0, #0
 8003d36:	bf1c      	itt	ne
 8003d38:	f04f 31ff 	movne.w	r1, #4294967295
 8003d3c:	f04f 30ff 	movne.w	r0, #4294967295
 8003d40:	f000 b970 	b.w	8004024 <__aeabi_idiv0>
 8003d44:	f1ad 0c08 	sub.w	ip, sp, #8
 8003d48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8003d4c:	f000 f806 	bl	8003d5c <__udivmoddi4>
 8003d50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8003d54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003d58:	b004      	add	sp, #16
 8003d5a:	4770      	bx	lr

08003d5c <__udivmoddi4>:
 8003d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d60:	9e08      	ldr	r6, [sp, #32]
 8003d62:	460d      	mov	r5, r1
 8003d64:	4604      	mov	r4, r0
 8003d66:	460f      	mov	r7, r1
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d14a      	bne.n	8003e02 <__udivmoddi4+0xa6>
 8003d6c:	428a      	cmp	r2, r1
 8003d6e:	4694      	mov	ip, r2
 8003d70:	d965      	bls.n	8003e3e <__udivmoddi4+0xe2>
 8003d72:	fab2 f382 	clz	r3, r2
 8003d76:	b143      	cbz	r3, 8003d8a <__udivmoddi4+0x2e>
 8003d78:	fa02 fc03 	lsl.w	ip, r2, r3
 8003d7c:	f1c3 0220 	rsb	r2, r3, #32
 8003d80:	409f      	lsls	r7, r3
 8003d82:	fa20 f202 	lsr.w	r2, r0, r2
 8003d86:	4317      	orrs	r7, r2
 8003d88:	409c      	lsls	r4, r3
 8003d8a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8003d8e:	fa1f f58c 	uxth.w	r5, ip
 8003d92:	fbb7 f1fe 	udiv	r1, r7, lr
 8003d96:	0c22      	lsrs	r2, r4, #16
 8003d98:	fb0e 7711 	mls	r7, lr, r1, r7
 8003d9c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8003da0:	fb01 f005 	mul.w	r0, r1, r5
 8003da4:	4290      	cmp	r0, r2
 8003da6:	d90a      	bls.n	8003dbe <__udivmoddi4+0x62>
 8003da8:	eb1c 0202 	adds.w	r2, ip, r2
 8003dac:	f101 37ff 	add.w	r7, r1, #4294967295
 8003db0:	f080 811c 	bcs.w	8003fec <__udivmoddi4+0x290>
 8003db4:	4290      	cmp	r0, r2
 8003db6:	f240 8119 	bls.w	8003fec <__udivmoddi4+0x290>
 8003dba:	3902      	subs	r1, #2
 8003dbc:	4462      	add	r2, ip
 8003dbe:	1a12      	subs	r2, r2, r0
 8003dc0:	b2a4      	uxth	r4, r4
 8003dc2:	fbb2 f0fe 	udiv	r0, r2, lr
 8003dc6:	fb0e 2210 	mls	r2, lr, r0, r2
 8003dca:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8003dce:	fb00 f505 	mul.w	r5, r0, r5
 8003dd2:	42a5      	cmp	r5, r4
 8003dd4:	d90a      	bls.n	8003dec <__udivmoddi4+0x90>
 8003dd6:	eb1c 0404 	adds.w	r4, ip, r4
 8003dda:	f100 32ff 	add.w	r2, r0, #4294967295
 8003dde:	f080 8107 	bcs.w	8003ff0 <__udivmoddi4+0x294>
 8003de2:	42a5      	cmp	r5, r4
 8003de4:	f240 8104 	bls.w	8003ff0 <__udivmoddi4+0x294>
 8003de8:	4464      	add	r4, ip
 8003dea:	3802      	subs	r0, #2
 8003dec:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8003df0:	1b64      	subs	r4, r4, r5
 8003df2:	2100      	movs	r1, #0
 8003df4:	b11e      	cbz	r6, 8003dfe <__udivmoddi4+0xa2>
 8003df6:	40dc      	lsrs	r4, r3
 8003df8:	2300      	movs	r3, #0
 8003dfa:	e9c6 4300 	strd	r4, r3, [r6]
 8003dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e02:	428b      	cmp	r3, r1
 8003e04:	d908      	bls.n	8003e18 <__udivmoddi4+0xbc>
 8003e06:	2e00      	cmp	r6, #0
 8003e08:	f000 80ed 	beq.w	8003fe6 <__udivmoddi4+0x28a>
 8003e0c:	2100      	movs	r1, #0
 8003e0e:	e9c6 0500 	strd	r0, r5, [r6]
 8003e12:	4608      	mov	r0, r1
 8003e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e18:	fab3 f183 	clz	r1, r3
 8003e1c:	2900      	cmp	r1, #0
 8003e1e:	d149      	bne.n	8003eb4 <__udivmoddi4+0x158>
 8003e20:	42ab      	cmp	r3, r5
 8003e22:	d302      	bcc.n	8003e2a <__udivmoddi4+0xce>
 8003e24:	4282      	cmp	r2, r0
 8003e26:	f200 80f8 	bhi.w	800401a <__udivmoddi4+0x2be>
 8003e2a:	1a84      	subs	r4, r0, r2
 8003e2c:	eb65 0203 	sbc.w	r2, r5, r3
 8003e30:	2001      	movs	r0, #1
 8003e32:	4617      	mov	r7, r2
 8003e34:	2e00      	cmp	r6, #0
 8003e36:	d0e2      	beq.n	8003dfe <__udivmoddi4+0xa2>
 8003e38:	e9c6 4700 	strd	r4, r7, [r6]
 8003e3c:	e7df      	b.n	8003dfe <__udivmoddi4+0xa2>
 8003e3e:	b902      	cbnz	r2, 8003e42 <__udivmoddi4+0xe6>
 8003e40:	deff      	udf	#255	; 0xff
 8003e42:	fab2 f382 	clz	r3, r2
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	f040 8090 	bne.w	8003f6c <__udivmoddi4+0x210>
 8003e4c:	1a8a      	subs	r2, r1, r2
 8003e4e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8003e52:	fa1f fe8c 	uxth.w	lr, ip
 8003e56:	2101      	movs	r1, #1
 8003e58:	fbb2 f5f7 	udiv	r5, r2, r7
 8003e5c:	fb07 2015 	mls	r0, r7, r5, r2
 8003e60:	0c22      	lsrs	r2, r4, #16
 8003e62:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8003e66:	fb0e f005 	mul.w	r0, lr, r5
 8003e6a:	4290      	cmp	r0, r2
 8003e6c:	d908      	bls.n	8003e80 <__udivmoddi4+0x124>
 8003e6e:	eb1c 0202 	adds.w	r2, ip, r2
 8003e72:	f105 38ff 	add.w	r8, r5, #4294967295
 8003e76:	d202      	bcs.n	8003e7e <__udivmoddi4+0x122>
 8003e78:	4290      	cmp	r0, r2
 8003e7a:	f200 80cb 	bhi.w	8004014 <__udivmoddi4+0x2b8>
 8003e7e:	4645      	mov	r5, r8
 8003e80:	1a12      	subs	r2, r2, r0
 8003e82:	b2a4      	uxth	r4, r4
 8003e84:	fbb2 f0f7 	udiv	r0, r2, r7
 8003e88:	fb07 2210 	mls	r2, r7, r0, r2
 8003e8c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8003e90:	fb0e fe00 	mul.w	lr, lr, r0
 8003e94:	45a6      	cmp	lr, r4
 8003e96:	d908      	bls.n	8003eaa <__udivmoddi4+0x14e>
 8003e98:	eb1c 0404 	adds.w	r4, ip, r4
 8003e9c:	f100 32ff 	add.w	r2, r0, #4294967295
 8003ea0:	d202      	bcs.n	8003ea8 <__udivmoddi4+0x14c>
 8003ea2:	45a6      	cmp	lr, r4
 8003ea4:	f200 80bb 	bhi.w	800401e <__udivmoddi4+0x2c2>
 8003ea8:	4610      	mov	r0, r2
 8003eaa:	eba4 040e 	sub.w	r4, r4, lr
 8003eae:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8003eb2:	e79f      	b.n	8003df4 <__udivmoddi4+0x98>
 8003eb4:	f1c1 0720 	rsb	r7, r1, #32
 8003eb8:	408b      	lsls	r3, r1
 8003eba:	fa22 fc07 	lsr.w	ip, r2, r7
 8003ebe:	ea4c 0c03 	orr.w	ip, ip, r3
 8003ec2:	fa05 f401 	lsl.w	r4, r5, r1
 8003ec6:	fa20 f307 	lsr.w	r3, r0, r7
 8003eca:	40fd      	lsrs	r5, r7
 8003ecc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8003ed0:	4323      	orrs	r3, r4
 8003ed2:	fbb5 f8f9 	udiv	r8, r5, r9
 8003ed6:	fa1f fe8c 	uxth.w	lr, ip
 8003eda:	fb09 5518 	mls	r5, r9, r8, r5
 8003ede:	0c1c      	lsrs	r4, r3, #16
 8003ee0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8003ee4:	fb08 f50e 	mul.w	r5, r8, lr
 8003ee8:	42a5      	cmp	r5, r4
 8003eea:	fa02 f201 	lsl.w	r2, r2, r1
 8003eee:	fa00 f001 	lsl.w	r0, r0, r1
 8003ef2:	d90b      	bls.n	8003f0c <__udivmoddi4+0x1b0>
 8003ef4:	eb1c 0404 	adds.w	r4, ip, r4
 8003ef8:	f108 3aff 	add.w	sl, r8, #4294967295
 8003efc:	f080 8088 	bcs.w	8004010 <__udivmoddi4+0x2b4>
 8003f00:	42a5      	cmp	r5, r4
 8003f02:	f240 8085 	bls.w	8004010 <__udivmoddi4+0x2b4>
 8003f06:	f1a8 0802 	sub.w	r8, r8, #2
 8003f0a:	4464      	add	r4, ip
 8003f0c:	1b64      	subs	r4, r4, r5
 8003f0e:	b29d      	uxth	r5, r3
 8003f10:	fbb4 f3f9 	udiv	r3, r4, r9
 8003f14:	fb09 4413 	mls	r4, r9, r3, r4
 8003f18:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8003f1c:	fb03 fe0e 	mul.w	lr, r3, lr
 8003f20:	45a6      	cmp	lr, r4
 8003f22:	d908      	bls.n	8003f36 <__udivmoddi4+0x1da>
 8003f24:	eb1c 0404 	adds.w	r4, ip, r4
 8003f28:	f103 35ff 	add.w	r5, r3, #4294967295
 8003f2c:	d26c      	bcs.n	8004008 <__udivmoddi4+0x2ac>
 8003f2e:	45a6      	cmp	lr, r4
 8003f30:	d96a      	bls.n	8004008 <__udivmoddi4+0x2ac>
 8003f32:	3b02      	subs	r3, #2
 8003f34:	4464      	add	r4, ip
 8003f36:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8003f3a:	fba3 9502 	umull	r9, r5, r3, r2
 8003f3e:	eba4 040e 	sub.w	r4, r4, lr
 8003f42:	42ac      	cmp	r4, r5
 8003f44:	46c8      	mov	r8, r9
 8003f46:	46ae      	mov	lr, r5
 8003f48:	d356      	bcc.n	8003ff8 <__udivmoddi4+0x29c>
 8003f4a:	d053      	beq.n	8003ff4 <__udivmoddi4+0x298>
 8003f4c:	b156      	cbz	r6, 8003f64 <__udivmoddi4+0x208>
 8003f4e:	ebb0 0208 	subs.w	r2, r0, r8
 8003f52:	eb64 040e 	sbc.w	r4, r4, lr
 8003f56:	fa04 f707 	lsl.w	r7, r4, r7
 8003f5a:	40ca      	lsrs	r2, r1
 8003f5c:	40cc      	lsrs	r4, r1
 8003f5e:	4317      	orrs	r7, r2
 8003f60:	e9c6 7400 	strd	r7, r4, [r6]
 8003f64:	4618      	mov	r0, r3
 8003f66:	2100      	movs	r1, #0
 8003f68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f6c:	f1c3 0120 	rsb	r1, r3, #32
 8003f70:	fa02 fc03 	lsl.w	ip, r2, r3
 8003f74:	fa20 f201 	lsr.w	r2, r0, r1
 8003f78:	fa25 f101 	lsr.w	r1, r5, r1
 8003f7c:	409d      	lsls	r5, r3
 8003f7e:	432a      	orrs	r2, r5
 8003f80:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8003f84:	fa1f fe8c 	uxth.w	lr, ip
 8003f88:	fbb1 f0f7 	udiv	r0, r1, r7
 8003f8c:	fb07 1510 	mls	r5, r7, r0, r1
 8003f90:	0c11      	lsrs	r1, r2, #16
 8003f92:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8003f96:	fb00 f50e 	mul.w	r5, r0, lr
 8003f9a:	428d      	cmp	r5, r1
 8003f9c:	fa04 f403 	lsl.w	r4, r4, r3
 8003fa0:	d908      	bls.n	8003fb4 <__udivmoddi4+0x258>
 8003fa2:	eb1c 0101 	adds.w	r1, ip, r1
 8003fa6:	f100 38ff 	add.w	r8, r0, #4294967295
 8003faa:	d22f      	bcs.n	800400c <__udivmoddi4+0x2b0>
 8003fac:	428d      	cmp	r5, r1
 8003fae:	d92d      	bls.n	800400c <__udivmoddi4+0x2b0>
 8003fb0:	3802      	subs	r0, #2
 8003fb2:	4461      	add	r1, ip
 8003fb4:	1b49      	subs	r1, r1, r5
 8003fb6:	b292      	uxth	r2, r2
 8003fb8:	fbb1 f5f7 	udiv	r5, r1, r7
 8003fbc:	fb07 1115 	mls	r1, r7, r5, r1
 8003fc0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003fc4:	fb05 f10e 	mul.w	r1, r5, lr
 8003fc8:	4291      	cmp	r1, r2
 8003fca:	d908      	bls.n	8003fde <__udivmoddi4+0x282>
 8003fcc:	eb1c 0202 	adds.w	r2, ip, r2
 8003fd0:	f105 38ff 	add.w	r8, r5, #4294967295
 8003fd4:	d216      	bcs.n	8004004 <__udivmoddi4+0x2a8>
 8003fd6:	4291      	cmp	r1, r2
 8003fd8:	d914      	bls.n	8004004 <__udivmoddi4+0x2a8>
 8003fda:	3d02      	subs	r5, #2
 8003fdc:	4462      	add	r2, ip
 8003fde:	1a52      	subs	r2, r2, r1
 8003fe0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8003fe4:	e738      	b.n	8003e58 <__udivmoddi4+0xfc>
 8003fe6:	4631      	mov	r1, r6
 8003fe8:	4630      	mov	r0, r6
 8003fea:	e708      	b.n	8003dfe <__udivmoddi4+0xa2>
 8003fec:	4639      	mov	r1, r7
 8003fee:	e6e6      	b.n	8003dbe <__udivmoddi4+0x62>
 8003ff0:	4610      	mov	r0, r2
 8003ff2:	e6fb      	b.n	8003dec <__udivmoddi4+0x90>
 8003ff4:	4548      	cmp	r0, r9
 8003ff6:	d2a9      	bcs.n	8003f4c <__udivmoddi4+0x1f0>
 8003ff8:	ebb9 0802 	subs.w	r8, r9, r2
 8003ffc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8004000:	3b01      	subs	r3, #1
 8004002:	e7a3      	b.n	8003f4c <__udivmoddi4+0x1f0>
 8004004:	4645      	mov	r5, r8
 8004006:	e7ea      	b.n	8003fde <__udivmoddi4+0x282>
 8004008:	462b      	mov	r3, r5
 800400a:	e794      	b.n	8003f36 <__udivmoddi4+0x1da>
 800400c:	4640      	mov	r0, r8
 800400e:	e7d1      	b.n	8003fb4 <__udivmoddi4+0x258>
 8004010:	46d0      	mov	r8, sl
 8004012:	e77b      	b.n	8003f0c <__udivmoddi4+0x1b0>
 8004014:	3d02      	subs	r5, #2
 8004016:	4462      	add	r2, ip
 8004018:	e732      	b.n	8003e80 <__udivmoddi4+0x124>
 800401a:	4608      	mov	r0, r1
 800401c:	e70a      	b.n	8003e34 <__udivmoddi4+0xd8>
 800401e:	4464      	add	r4, ip
 8004020:	3802      	subs	r0, #2
 8004022:	e742      	b.n	8003eaa <__udivmoddi4+0x14e>

08004024 <__aeabi_idiv0>:
 8004024:	4770      	bx	lr
 8004026:	bf00      	nop

08004028 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004028:	480d      	ldr	r0, [pc, #52]	; (8004060 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800402a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800402c:	480d      	ldr	r0, [pc, #52]	; (8004064 <LoopForever+0x6>)
  ldr r1, =_edata
 800402e:	490e      	ldr	r1, [pc, #56]	; (8004068 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004030:	4a0e      	ldr	r2, [pc, #56]	; (800406c <LoopForever+0xe>)
  movs r3, #0
 8004032:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004034:	e002      	b.n	800403c <LoopCopyDataInit>

08004036 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004036:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004038:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800403a:	3304      	adds	r3, #4

0800403c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800403c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800403e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004040:	d3f9      	bcc.n	8004036 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004042:	4a0b      	ldr	r2, [pc, #44]	; (8004070 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004044:	4c0b      	ldr	r4, [pc, #44]	; (8004074 <LoopForever+0x16>)
  movs r3, #0
 8004046:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004048:	e001      	b.n	800404e <LoopFillZerobss>

0800404a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800404a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800404c:	3204      	adds	r2, #4

0800404e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800404e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004050:	d3fb      	bcc.n	800404a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004052:	f004 fbb1 	bl	80087b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004056:	f00c fc3d 	bl	80108d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800405a:	f000 fc21 	bl	80048a0 <main>

0800405e <LoopForever>:

LoopForever:
    b LoopForever
 800405e:	e7fe      	b.n	800405e <LoopForever>
  ldr   r0, =_estack
 8004060:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004064:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004068:	20001b6c 	.word	0x20001b6c
  ldr r2, =_sidata
 800406c:	0801c934 	.word	0x0801c934
  ldr r2, =_sbss
 8004070:	20001b80 	.word	0x20001b80
  ldr r4, =_ebss
 8004074:	2000377c 	.word	0x2000377c

08004078 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004078:	e7fe      	b.n	8004078 <ADC3_IRQHandler>
	...

0800407c <MX_X_CUBE_AI_Init>:
/* USER CODE END 2 */

/* Entry points --------------------------------------------------------------*/

void MX_X_CUBE_AI_Init(void)
{
 800407c:	b570      	push	{r4, r5, r6, lr}
  err = ai_network_create_and_init(&network, act_addr, NULL);
 800407e:	4c16      	ldr	r4, [pc, #88]	; (80040d8 <MX_X_CUBE_AI_Init+0x5c>)
    /* USER CODE BEGIN 5 */
  printf("\r\nTEMPLATE - initialization\r\n");
 8004080:	4816      	ldr	r0, [pc, #88]	; (80040dc <MX_X_CUBE_AI_Init+0x60>)
 8004082:	f00c fae3 	bl	801064c <puts>
  err = ai_network_create_and_init(&network, act_addr, NULL);
 8004086:	4916      	ldr	r1, [pc, #88]	; (80040e0 <MX_X_CUBE_AI_Init+0x64>)
 8004088:	2200      	movs	r2, #0
 800408a:	4620      	mov	r0, r4
 800408c:	f002 f85a 	bl	8006144 <ai_network_create_and_init>
  if (err.type != AI_ERROR_NONE) {
 8004090:	f010 05ff 	ands.w	r5, r0, #255	; 0xff
 8004094:	d118      	bne.n	80040c8 <MX_X_CUBE_AI_Init+0x4c>
  ai_input = ai_network_inputs_get(network, NULL);
 8004096:	6820      	ldr	r0, [r4, #0]
 8004098:	4e12      	ldr	r6, [pc, #72]	; (80040e4 <MX_X_CUBE_AI_Init+0x68>)
 800409a:	4629      	mov	r1, r5
 800409c:	f001 fee4 	bl	8005e68 <ai_network_inputs_get>
  ai_output = ai_network_outputs_get(network, NULL);
 80040a0:	4629      	mov	r1, r5
  ai_input = ai_network_inputs_get(network, NULL);
 80040a2:	4603      	mov	r3, r0
  ai_output = ai_network_outputs_get(network, NULL);
 80040a4:	6820      	ldr	r0, [r4, #0]
  ai_input = ai_network_inputs_get(network, NULL);
 80040a6:	6033      	str	r3, [r6, #0]
  ai_output = ai_network_outputs_get(network, NULL);
 80040a8:	f001 feea 	bl	8005e80 <ai_network_outputs_get>
	data_ins[idx] = ai_input[idx].data;
 80040ac:	6831      	ldr	r1, [r6, #0]
  ai_output = ai_network_outputs_get(network, NULL);
 80040ae:	4c0e      	ldr	r4, [pc, #56]	; (80040e8 <MX_X_CUBE_AI_Init+0x6c>)
	data_ins[idx] = ai_input[idx].data;
 80040b0:	4a0e      	ldr	r2, [pc, #56]	; (80040ec <MX_X_CUBE_AI_Init+0x70>)
 80040b2:	6849      	ldr	r1, [r1, #4]
	data_outs[idx] = ai_output[idx].data;
 80040b4:	4b0e      	ldr	r3, [pc, #56]	; (80040f0 <MX_X_CUBE_AI_Init+0x74>)
	data_ins[idx] = ai_input[idx].data;
 80040b6:	6011      	str	r1, [r2, #0]
  ai_output = ai_network_outputs_get(network, NULL);
 80040b8:	6020      	str	r0, [r4, #0]
	data_outs[idx] = ai_output[idx].data;
 80040ba:	6a01      	ldr	r1, [r0, #32]
 80040bc:	6844      	ldr	r4, [r0, #4]
 80040be:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80040c0:	609a      	str	r2, [r3, #8]
 80040c2:	e9c3 4100 	strd	r4, r1, [r3]

  ai_boostrap(data_activations0);
    /* USER CODE END 5 */
}
 80040c6:	bd70      	pop	{r4, r5, r6, pc}
    ai_log_err(err, "ai_network_create_and_init");
 80040c8:	4603      	mov	r3, r0
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 80040ca:	490a      	ldr	r1, [pc, #40]	; (80040f4 <MX_X_CUBE_AI_Init+0x78>)
 80040cc:	480a      	ldr	r0, [pc, #40]	; (80040f8 <MX_X_CUBE_AI_Init+0x7c>)
 80040ce:	0a1b      	lsrs	r3, r3, #8
 80040d0:	462a      	mov	r2, r5
 80040d2:	f00c fa55 	bl	8010580 <iprintf>
  do {} while (1);
 80040d6:	e7fe      	b.n	80040d6 <MX_X_CUBE_AI_Init+0x5a>
 80040d8:	20001bc4 	.word	0x20001bc4
 80040dc:	08011550 	.word	0x08011550
 80040e0:	20000000 	.word	0x20000000
 80040e4:	20001bac 	.word	0x20001bac
 80040e8:	20001bb0 	.word	0x20001bb0
 80040ec:	20001bb4 	.word	0x20001bb4
 80040f0:	20001bb8 	.word	0x20001bb8
 80040f4:	08011570 	.word	0x08011570
 80040f8:	0801158c 	.word	0x0801158c

080040fc <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(void)
{
 80040fc:	b570      	push	{r4, r5, r6, lr}
    /* USER CODE BEGIN 6 */
  int res = -1;

  printf("TEMPLATE - run - main loop\r\n");

  if (network) {
 80040fe:	4c10      	ldr	r4, [pc, #64]	; (8004140 <MX_X_CUBE_AI_Process+0x44>)
  printf("TEMPLATE - run - main loop\r\n");
 8004100:	4810      	ldr	r0, [pc, #64]	; (8004144 <MX_X_CUBE_AI_Process+0x48>)
 8004102:	f00c faa3 	bl	801064c <puts>
  if (network) {
 8004106:	6820      	ldr	r0, [r4, #0]
 8004108:	b190      	cbz	r0, 8004130 <MX_X_CUBE_AI_Process+0x34>
 800410a:	4e0f      	ldr	r6, [pc, #60]	; (8004148 <MX_X_CUBE_AI_Process+0x4c>)
 800410c:	4d0f      	ldr	r5, [pc, #60]	; (800414c <MX_X_CUBE_AI_Process+0x50>)
  batch = ai_network_run(network, ai_input, ai_output);
 800410e:	6832      	ldr	r2, [r6, #0]
 8004110:	6829      	ldr	r1, [r5, #0]
 8004112:	f002 f871 	bl	80061f8 <ai_network_run>
  if (batch != 1) {
 8004116:	2801      	cmp	r0, #1
    ai_log_err(ai_network_get_error(network),
 8004118:	6820      	ldr	r0, [r4, #0]
  if (batch != 1) {
 800411a:	d0f8      	beq.n	800410e <MX_X_CUBE_AI_Process+0x12>
    ai_log_err(ai_network_get_error(network),
 800411c:	f001 fea2 	bl	8005e64 <ai_network_get_error>
 8004120:	4602      	mov	r2, r0
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8004122:	0a13      	lsrs	r3, r2, #8
 8004124:	490a      	ldr	r1, [pc, #40]	; (8004150 <MX_X_CUBE_AI_Process+0x54>)
 8004126:	480b      	ldr	r0, [pc, #44]	; (8004154 <MX_X_CUBE_AI_Process+0x58>)
 8004128:	b2d2      	uxtb	r2, r2
 800412a:	f00c fa29 	bl	8010580 <iprintf>
  do {} while (1);
 800412e:	e7fe      	b.n	800412e <MX_X_CUBE_AI_Process+0x32>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8004130:	4909      	ldr	r1, [pc, #36]	; (8004158 <MX_X_CUBE_AI_Process+0x5c>)
 8004132:	4808      	ldr	r0, [pc, #32]	; (8004154 <MX_X_CUBE_AI_Process+0x58>)
 8004134:	2310      	movs	r3, #16
 8004136:	2211      	movs	r2, #17
 8004138:	f00c fa22 	bl	8010580 <iprintf>
  do {} while (1);
 800413c:	e7fe      	b.n	800413c <MX_X_CUBE_AI_Process+0x40>
 800413e:	bf00      	nop
 8004140:	20001bc4 	.word	0x20001bc4
 8004144:	080115c0 	.word	0x080115c0
 8004148:	20001bb0 	.word	0x20001bb0
 800414c:	20001bac 	.word	0x20001bac
 8004150:	080115dc 	.word	0x080115dc
 8004154:	0801158c 	.word	0x0801158c
 8004158:	080115ec 	.word	0x080115ec

0800415c <ASPEP_start>:
  * @brief  Starts ASPEP communication by configuring UART.
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_start(ASPEP_Handle_t *pHandle)
{
 800415c:	b570      	push	{r4, r5, r6, lr}
 800415e:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->fASPEP_HWInit(pHandle->HWIp);
 8004160:	6940      	ldr	r0, [r0, #20]
 8004162:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004164:	4798      	blx	r3
    pHandle->ASPEP_State = ASPEP_IDLE;
 8004166:	2300      	movs	r3, #0
    pHandle->ASPEP_TL_State = WAITING_PACKET;
    pHandle->syncPacketCount = 0; /* Sync packet counter is reset only at startup*/

    /* Configure UART to receive first packet*/
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8004168:	6d65      	ldr	r5, [r4, #84]	; 0x54
    pHandle->ASPEP_State = ASPEP_IDLE;
 800416a:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
    pHandle->syncPacketCount = 0; /* Sync packet counter is reset only at startup*/
 800416e:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8004172:	6960      	ldr	r0, [r4, #20]
 8004174:	f104 011c 	add.w	r1, r4, #28
 8004178:	462b      	mov	r3, r5
 800417a:	2204      	movs	r2, #4
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 800417c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8004180:	4718      	bx	r3
 8004182:	bf00      	nop

08004184 <ASPEP_sendBeacon>:
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  * @param  *capabilities Matched capabilities between controller and performer
  */
void ASPEP_sendBeacon(ASPEP_Handle_t *pHandle, ASPEP_Capabilities_def *capabilities)
{
 8004184:	b410      	push	{r4}
  {
#endif
    uint32_t *packet = (uint32_t *)pHandle->ctrlBuffer.buffer; //cstat !MISRAC2012-Rule-11.3
    *packet = (BEACON
             | (((uint32_t)capabilities->version) << 4U)
             | (((uint32_t)capabilities->DATA_CRC) << 7U)
 8004186:	780b      	ldrb	r3, [r1, #0]
             | (((uint32_t)capabilities->version) << 4U)
 8004188:	790a      	ldrb	r2, [r1, #4]
             | (((uint32_t)capabilities->RX_maxSize) << 8U)
             | (((uint32_t)capabilities->TXS_maxSize) << 14U)
 800418a:	f891 c002 	ldrb.w	ip, [r1, #2]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 800418e:	4c1e      	ldr	r4, [pc, #120]	; (8004208 <ASPEP_sendBeacon+0x84>)
             | (((uint32_t)capabilities->DATA_CRC) << 7U)
 8004190:	01db      	lsls	r3, r3, #7
             | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 8004192:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
             | (((uint32_t)capabilities->RX_maxSize) << 8U)
 8004196:	784a      	ldrb	r2, [r1, #1]
             | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 8004198:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800419c:	78ca      	ldrb	r2, [r1, #3]
 800419e:	ea43 338c 	orr.w	r3, r3, ip, lsl #14
 80041a2:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 80041a6:	b2da      	uxtb	r2, r3
 80041a8:	f042 0205 	orr.w	r2, r2, #5
  header &= 0x0fffffffU;
 80041ac:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 80041b0:	5ca2      	ldrb	r2, [r4, r2]
 80041b2:	ea82 2211 	eor.w	r2, r2, r1, lsr #8
 80041b6:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 80041b8:	5ca2      	ldrb	r2, [r4, r2]
 80041ba:	ea82 4211 	eor.w	r2, r2, r1, lsr #16
 80041be:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 80041c0:	5ca2      	ldrb	r2, [r4, r2]
 80041c2:	4c12      	ldr	r4, [pc, #72]	; (800420c <ASPEP_sendBeacon+0x88>)
 80041c4:	ea82 6211 	eor.w	r2, r2, r1, lsr #24
  *headerPtr |= (uint32_t)crc << 28;
 80041c8:	5ca2      	ldrb	r2, [r4, r2]
 80041ca:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80041ce:	f043 0305 	orr.w	r3, r3, #5
 80041d2:	6203      	str	r3, [r0, #32]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80041d4:	b672      	cpsid	i
  {
#endif
    /* Insert CRC header in the packet to send */
    ASPEP_ComputeHeaderCRC((uint32_t *)txBuffer); //cstat !MISRAC2012-Rule-11.5
    __disable_irq(); /*TODO: Disable High frequency task is enough */
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 80041d6:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80041d8:	b14b      	cbz	r3, 80041ee <ASPEP_sendBeacon+0x6a>
  __ASM volatile ("cpsie i" : : : "memory");
 80041da:	b662      	cpsie	i
          pHandle->syncBuffer.length = bufferLength;
        }
      }
      else if(ASPEP_CTRL == dataType)
      {
        if (pHandle->ctrlBuffer.state != available)
 80041dc:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80041e0:	b913      	cbnz	r3, 80041e8 <ASPEP_sendBeacon+0x64>
        {
          result = ASPEP_BUFFER_ERROR;
        }
        else
        {
          pHandle->ctrlBuffer.state = pending;
 80041e2:	2302      	movs	r3, #2
 80041e4:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
}
 80041e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80041ec:	4770      	bx	lr
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 80041ee:	f100 0120 	add.w	r1, r0, #32
        pHandle->ctrlBuffer.state = readLock;
 80041f2:	2303      	movs	r3, #3
 80041f4:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 80041f8:	6481      	str	r1, [r0, #72]	; 0x48
 80041fa:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 80041fc:	2204      	movs	r2, #4
 80041fe:	6d83      	ldr	r3, [r0, #88]	; 0x58
}
 8004200:	f85d 4b04 	ldr.w	r4, [sp], #4
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8004204:	6940      	ldr	r0, [r0, #20]
 8004206:	4718      	bx	r3
 8004208:	08011610 	.word	0x08011610
 800420c:	08011600 	.word	0x08011600

08004210 <ASPEP_sendPing>:
{
 8004210:	b430      	push	{r4, r5}
                   | (uint32_t)((uint32_t)cBit << 5U)
 8004212:	014b      	lsls	r3, r1, #5
    uint8_t Nbit = pHandle->syncPacketCount & 0x1U; /* Keep only LSB */
 8004214:	f890 c060 	ldrb.w	ip, [r0, #96]	; 0x60
    uint8_t ipID = pHandle->liid & 0xFU;
 8004218:	f890 4063 	ldrb.w	r4, [r0, #99]	; 0x63
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 800421c:	4d1d      	ldr	r5, [pc, #116]	; (8004294 <ASPEP_sendPing+0x84>)
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 800421e:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8004222:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
                   | (uint32_t)((uint32_t)Nbit << 6U)
 8004226:	f00c 0101 	and.w	r1, ip, #1
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 800422a:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 800422e:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
                   | (uint32_t)((uint32_t)ipID << 8U)
 8004232:	f004 040f 	and.w	r4, r4, #15
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8004236:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 800423a:	b2d3      	uxtb	r3, r2
 800423c:	4c16      	ldr	r4, [pc, #88]	; (8004298 <ASPEP_sendPing+0x88>)
 800423e:	f043 0306 	orr.w	r3, r3, #6
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8004242:	f042 0106 	orr.w	r1, r2, #6
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8004246:	5ce3      	ldrb	r3, [r4, r3]
 8004248:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
 800424c:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 800424e:	5ce3      	ldrb	r3, [r4, r3]
 8004250:	ea83 4312 	eor.w	r3, r3, r2, lsr #16
 8004254:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8004256:	5ce3      	ldrb	r3, [r4, r3]
 8004258:	ea83 6312 	eor.w	r3, r3, r2, lsr #24
  *headerPtr |= (uint32_t)crc << 28;
 800425c:	5ceb      	ldrb	r3, [r5, r3]
 800425e:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
 8004262:	6203      	str	r3, [r0, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8004264:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8004266:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8004268:	b143      	cbz	r3, 800427c <ASPEP_sendPing+0x6c>
  __ASM volatile ("cpsie i" : : : "memory");
 800426a:	b662      	cpsie	i
        if (pHandle->ctrlBuffer.state != available)
 800426c:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8004270:	b913      	cbnz	r3, 8004278 <ASPEP_sendPing+0x68>
          pHandle->ctrlBuffer.state = pending;
 8004272:	2302      	movs	r3, #2
 8004274:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
}
 8004278:	bc30      	pop	{r4, r5}
 800427a:	4770      	bx	lr
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 800427c:	f100 0120 	add.w	r1, r0, #32
        pHandle->ctrlBuffer.state = readLock;
 8004280:	2303      	movs	r3, #3
 8004282:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8004286:	6481      	str	r1, [r0, #72]	; 0x48
 8004288:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 800428a:	2204      	movs	r2, #4
 800428c:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800428e:	6940      	ldr	r0, [r0, #20]
}
 8004290:	bc30      	pop	{r4, r5}
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8004292:	4718      	bx	r3
 8004294:	08011600 	.word	0x08011600
 8004298:	08011610 	.word	0x08011610

0800429c <ASPEP_getBuffer>:
    if (MCTL_SYNC == syncAsync)
 800429c:	2a0a      	cmp	r2, #10
{
 800429e:	b410      	push	{r4}
 80042a0:	4603      	mov	r3, r0
    if (MCTL_SYNC == syncAsync)
 80042a2:	d00b      	beq.n	80042bc <ASPEP_getBuffer+0x20>
      if ((pHandle->asyncBufferA.state > writeLock) && (pHandle->asyncBufferB.state > writeLock))
 80042a4:	f890 2036 	ldrb.w	r2, [r0, #54]	; 0x36
 80042a8:	2a01      	cmp	r2, #1
 80042aa:	d921      	bls.n	80042f0 <ASPEP_getBuffer+0x54>
 80042ac:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 80042b0:	2a01      	cmp	r2, #1
 80042b2:	d911      	bls.n	80042d8 <ASPEP_getBuffer+0x3c>
        result = false;
 80042b4:	2000      	movs	r0, #0
}
 80042b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80042ba:	4770      	bx	lr
      if (pHandle->syncBuffer.state <= writeLock) /* Possible values are free or writeLock*/
 80042bc:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
 80042c0:	2a01      	cmp	r2, #1
 80042c2:	d8f7      	bhi.n	80042b4 <ASPEP_getBuffer+0x18>
        *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 80042c4:	6a82      	ldr	r2, [r0, #40]	; 0x28
        pHandle->syncBuffer.state = writeLock;
 80042c6:	2401      	movs	r4, #1
        *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 80042c8:	3204      	adds	r2, #4
 80042ca:	600a      	str	r2, [r1, #0]
        pHandle->syncBuffer.state = writeLock;
 80042cc:	f883 402e 	strb.w	r4, [r3, #46]	; 0x2e
  bool result = true;
 80042d0:	4620      	mov	r0, r4
}
 80042d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80042d6:	4770      	bx	lr
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 80042d8:	6b82      	ldr	r2, [r0, #56]	; 0x38
          pHandle->asyncBufferB.state = writeLock;
 80042da:	2001      	movs	r0, #1
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferB;
 80042dc:	f103 0438 	add.w	r4, r3, #56	; 0x38
          pHandle->asyncBufferB.state = writeLock;
 80042e0:	f883 003e 	strb.w	r0, [r3, #62]	; 0x3e
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 80042e4:	3204      	adds	r2, #4
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferB;
 80042e6:	641c      	str	r4, [r3, #64]	; 0x40
}
 80042e8:	f85d 4b04 	ldr.w	r4, [sp], #4
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 80042ec:	600a      	str	r2, [r1, #0]
}
 80042ee:	4770      	bx	lr
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 80042f0:	6b02      	ldr	r2, [r0, #48]	; 0x30
          pHandle->asyncBufferA.state = writeLock;
 80042f2:	2001      	movs	r0, #1
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferA;
 80042f4:	f103 0430 	add.w	r4, r3, #48	; 0x30
          pHandle->asyncBufferA.state = writeLock;
 80042f8:	f883 0036 	strb.w	r0, [r3, #54]	; 0x36
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 80042fc:	3204      	adds	r2, #4
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferA;
 80042fe:	641c      	str	r4, [r3, #64]	; 0x40
}
 8004300:	f85d 4b04 	ldr.w	r4, [sp], #4
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 8004304:	600a      	str	r2, [r1, #0]
}
 8004306:	4770      	bx	lr

08004308 <ASPEP_sendPacket>:
{
 8004308:	4684      	mov	ip, r0
    if (ASPEP_CONNECTED == pHandle-> ASPEP_State)
 800430a:	f890 0064 	ldrb.w	r0, [r0, #100]	; 0x64
 800430e:	2802      	cmp	r0, #2
 8004310:	d001      	beq.n	8004316 <ASPEP_sendPacket+0xe>
      result = ASPEP_NOT_CONNECTED;
 8004312:	2002      	movs	r0, #2
 8004314:	4770      	bx	lr
      tmpHeader = ((uint32_t)((uint32_t)txDataLengthTemp << (uint32_t)4) | (uint32_t)syncAsync);
 8004316:	ea43 1002 	orr.w	r0, r3, r2, lsl #4
      *header = tmpHeader;
 800431a:	f841 0c04 	str.w	r0, [r1, #-4]
      if (1U == pHandle->Capabilities.DATA_CRC)
 800431e:	f89c 006c 	ldrb.w	r0, [ip, #108]	; 0x6c
 8004322:	2801      	cmp	r0, #1
 8004324:	d104      	bne.n	8004330 <ASPEP_sendPacket+0x28>
        packet[txDataLengthTemp] = (uint8_t)0xCA; /* Dummy CRC */
 8004326:	f64f 60ca 	movw	r0, #65226	; 0xfeca
 800432a:	5288      	strh	r0, [r1, r2]
        txDataLengthTemp += (uint16_t)ASPEP_DATACRC_SIZE;
 800432c:	3202      	adds	r2, #2
 800432e:	b292      	uxth	r2, r2
      if (MCTL_SYNC == syncAsync)
 8004330:	2b0a      	cmp	r3, #10
 8004332:	d105      	bne.n	8004340 <ASPEP_sendPacket+0x38>
        if (pSupHandle->MCP_PacketAvailable)
 8004334:	f89c 0010 	ldrb.w	r0, [ip, #16]
 8004338:	b378      	cbz	r0, 800439a <ASPEP_sendPacket+0x92>
          pSupHandle->MCP_PacketAvailable = false; /* CMD from controller is processed*/
 800433a:	2000      	movs	r0, #0
 800433c:	f88c 0010 	strb.w	r0, [ip, #16]
  uint32_t header = *headerPtr;
 8004340:	f851 0c04 	ldr.w	r0, [r1, #-4]
{
 8004344:	b570      	push	{r4, r5, r6, lr}
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8004346:	4d35      	ldr	r5, [pc, #212]	; (800441c <ASPEP_sendPacket+0x114>)
 8004348:	b2c4      	uxtb	r4, r0
        result = ASPEP_TXframeProcess(pHandle, syncAsync, header, txDataLengthTemp + (uint16_t)ASPEP_HEADER_SIZE);
 800434a:	3204      	adds	r2, #4
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 800434c:	5d2e      	ldrb	r6, [r5, r4]
 800434e:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8004352:	4074      	eors	r4, r6
      header--; /* Header ues 4*8 bits on top of txBuffer*/
 8004354:	f1a1 0e04 	sub.w	lr, r1, #4
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8004358:	5d2e      	ldrb	r6, [r5, r4]
 800435a:	f3c0 4407 	ubfx	r4, r0, #16, #8
 800435e:	4074      	eors	r4, r6
        result = ASPEP_TXframeProcess(pHandle, syncAsync, header, txDataLengthTemp + (uint16_t)ASPEP_HEADER_SIZE);
 8004360:	b292      	uxth	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8004362:	5d2c      	ldrb	r4, [r5, r4]
 8004364:	f3c0 6503 	ubfx	r5, r0, #24, #4
 8004368:	406c      	eors	r4, r5
 800436a:	4d2d      	ldr	r5, [pc, #180]	; (8004420 <ASPEP_sendPacket+0x118>)
  *headerPtr |= (uint32_t)crc << 28;
 800436c:	5d2c      	ldrb	r4, [r5, r4]
 800436e:	ea40 7004 	orr.w	r0, r0, r4, lsl #28
 8004372:	f841 0c04 	str.w	r0, [r1, #-4]
  __ASM volatile ("cpsid i" : : : "memory");
 8004376:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8004378:	f8dc 1048 	ldr.w	r1, [ip, #72]	; 0x48
 800437c:	b1e9      	cbz	r1, 80043ba <ASPEP_sendPacket+0xb2>
  __ASM volatile ("cpsie i" : : : "memory");
 800437e:	b662      	cpsie	i
      if (MCTL_ASYNC == dataType)
 8004380:	2b09      	cmp	r3, #9
 8004382:	d00c      	beq.n	800439e <ASPEP_sendPacket+0x96>
      else if (MCTL_SYNC == dataType)
 8004384:	2b0a      	cmp	r3, #10
 8004386:	d031      	beq.n	80043ec <ASPEP_sendPacket+0xe4>
      else if(ASPEP_CTRL == dataType)
 8004388:	2b00      	cmp	r3, #0
 800438a:	d135      	bne.n	80043f8 <ASPEP_sendPacket+0xf0>
        if (pHandle->ctrlBuffer.state != available)
 800438c:	f89c 0024 	ldrb.w	r0, [ip, #36]	; 0x24
 8004390:	bb80      	cbnz	r0, 80043f4 <ASPEP_sendPacket+0xec>
          pHandle->ctrlBuffer.state = pending;
 8004392:	2302      	movs	r3, #2
 8004394:	f88c 3024 	strb.w	r3, [ip, #36]	; 0x24
}
 8004398:	bd70      	pop	{r4, r5, r6, pc}
          result = MCTL_SYNC_NOT_EXPECTED;
 800439a:	2001      	movs	r0, #1
}
 800439c:	4770      	bx	lr
        if (txBuffer != (uint8_t *)pHandle->lastRequestedAsyncBuff->buffer)
 800439e:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 80043a2:	6819      	ldr	r1, [r3, #0]
          result = ASPEP_BUFFER_ERROR;
 80043a4:	458e      	cmp	lr, r1
 80043a6:	bf14      	ite	ne
 80043a8:	2003      	movne	r0, #3
 80043aa:	2000      	moveq	r0, #0
        if (NULL == pHandle->asyncNextBuffer)
 80043ac:	f8dc 1044 	ldr.w	r1, [ip, #68]	; 0x44
 80043b0:	b381      	cbz	r1, 8004414 <ASPEP_sendPacket+0x10c>
        pHandle->lastRequestedAsyncBuff->state = pending;
 80043b2:	2102      	movs	r1, #2
 80043b4:	7199      	strb	r1, [r3, #6]
        pHandle->lastRequestedAsyncBuff->length = bufferLength;
 80043b6:	809a      	strh	r2, [r3, #4]
}
 80043b8:	bd70      	pop	{r4, r5, r6, pc}
      if (MCTL_ASYNC == dataType)
 80043ba:	2b09      	cmp	r3, #9
 80043bc:	d025      	beq.n	800440a <ASPEP_sendPacket+0x102>
      else if (MCTL_SYNC == dataType)
 80043be:	2b0a      	cmp	r3, #10
        pHandle->syncBuffer.state = readLock;
 80043c0:	f04f 0303 	mov.w	r3, #3
 80043c4:	bf0b      	itete	eq
 80043c6:	f88c 302e 	strbeq.w	r3, [ip, #46]	; 0x2e
        pHandle->ctrlBuffer.state = readLock;
 80043ca:	f88c 3024 	strbne.w	r3, [ip, #36]	; 0x24
        pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 80043ce:	f10c 0328 	addeq.w	r3, ip, #40	; 0x28
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 80043d2:	f10c 0320 	addne.w	r3, ip, #32
        pHandle->lockBuffer = (void *)pHandle->lastRequestedAsyncBuff;
 80043d6:	f8cc 3048 	str.w	r3, [ip, #72]	; 0x48
 80043da:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 80043dc:	f8dc 3058 	ldr.w	r3, [ip, #88]	; 0x58
 80043e0:	f8dc 0014 	ldr.w	r0, [ip, #20]
 80043e4:	4671      	mov	r1, lr
 80043e6:	4798      	blx	r3
 80043e8:	2000      	movs	r0, #0
}
 80043ea:	bd70      	pop	{r4, r5, r6, pc}
        if (pHandle -> syncBuffer.state != writeLock)
 80043ec:	f89c 302e 	ldrb.w	r3, [ip, #46]	; 0x2e
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d003      	beq.n	80043fc <ASPEP_sendPacket+0xf4>
          result = ASPEP_BUFFER_ERROR;
 80043f4:	2003      	movs	r0, #3
}
 80043f6:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t result = ASPEP_OK;
 80043f8:	2000      	movs	r0, #0
}
 80043fa:	bd70      	pop	{r4, r5, r6, pc}
          pHandle->syncBuffer.state = pending;
 80043fc:	2302      	movs	r3, #2
 80043fe:	f88c 302e 	strb.w	r3, [ip, #46]	; 0x2e
          pHandle->syncBuffer.length = bufferLength;
 8004402:	f8ac 202c 	strh.w	r2, [ip, #44]	; 0x2c
  uint8_t result = ASPEP_OK;
 8004406:	2000      	movs	r0, #0
}
 8004408:	bd70      	pop	{r4, r5, r6, pc}
        pHandle->lastRequestedAsyncBuff->state = readLock;
 800440a:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 800440e:	2103      	movs	r1, #3
 8004410:	7199      	strb	r1, [r3, #6]
        pHandle->lockBuffer = (void *)pHandle->lastRequestedAsyncBuff;
 8004412:	e7e0      	b.n	80043d6 <ASPEP_sendPacket+0xce>
          pHandle->asyncNextBuffer = pHandle->lastRequestedAsyncBuff;
 8004414:	f8cc 3044 	str.w	r3, [ip, #68]	; 0x44
 8004418:	e7cb      	b.n	80043b2 <ASPEP_sendPacket+0xaa>
 800441a:	bf00      	nop
 800441c:	08011610 	.word	0x08011610
 8004420:	08011600 	.word	0x08011600

08004424 <ASPEP_HWDataTransmittedIT>:
  * Therefore, there is no need to protect this ISR against another higher priority ISR (HF Task).
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_HWDataTransmittedIT(ASPEP_Handle_t *pHandle)
{
 8004424:	b510      	push	{r4, lr}
  }
  else
  {
#endif
    /* First free previous readLock buffer */
    if (pHandle->ctrlBuffer.state == readLock)
 8004426:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800442a:	2b03      	cmp	r3, #3
{
 800442c:	4604      	mov	r4, r0
    if (pHandle->ctrlBuffer.state == readLock)
 800442e:	d013      	beq.n	8004458 <ASPEP_HWDataTransmittedIT+0x34>
      pHandle->ctrlBuffer.state = available;
    }
    else /* if previous buffer was not ASPEP_CTRL, then the buffer locked is a MCTL_Buff_t */
    {
      MCTL_Buff_t *tempBuff = (MCTL_Buff_t *)pHandle->lockBuffer; //cstat !MISRAC2012-Rule-11.5
      tempBuff->state = available;
 8004430:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8004432:	2100      	movs	r1, #0
 8004434:	7191      	strb	r1, [r2, #6]
    }
    if (pHandle->syncBuffer.state == pending)
 8004436:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
 800443a:	2a02      	cmp	r2, #2
 800443c:	d013      	beq.n	8004466 <ASPEP_HWDataTransmittedIT+0x42>
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
      pHandle->fASPEP_send(pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
      pHandle->syncBuffer.state = readLock;
    }
    /* Second prepare transfer of pending buffer */
    else if (pHandle->ctrlBuffer.state == pending)
 800443e:	2b02      	cmp	r3, #2
 8004440:	d11d      	bne.n	800447e <ASPEP_HWDataTransmittedIT+0x5a>
    {
      pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 8004442:	f100 0120 	add.w	r1, r0, #32
      pHandle->fASPEP_send(pHandle ->HWIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 8004446:	6d83      	ldr	r3, [r0, #88]	; 0x58
      pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 8004448:	6481      	str	r1, [r0, #72]	; 0x48
      pHandle->fASPEP_send(pHandle ->HWIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 800444a:	2204      	movs	r2, #4
 800444c:	6940      	ldr	r0, [r0, #20]
 800444e:	4798      	blx	r3
      pHandle->ctrlBuffer.state = readLock;
 8004450:	2303      	movs	r3, #3
 8004452:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      __enable_irq();
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 8004456:	bd10      	pop	{r4, pc}
    if (pHandle->syncBuffer.state == pending)
 8004458:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
      pHandle->ctrlBuffer.state = available;
 800445c:	2200      	movs	r2, #0
    if (pHandle->syncBuffer.state == pending)
 800445e:	2b02      	cmp	r3, #2
      pHandle->ctrlBuffer.state = available;
 8004460:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    if (pHandle->syncBuffer.state == pending)
 8004464:	d10b      	bne.n	800447e <ASPEP_HWDataTransmittedIT+0x5a>
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 8004466:	f104 0028 	add.w	r0, r4, #40	; 0x28
      pHandle->fASPEP_send(pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 800446a:	6da3      	ldr	r3, [r4, #88]	; 0x58
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 800446c:	64a0      	str	r0, [r4, #72]	; 0x48
      pHandle->fASPEP_send(pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 800446e:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8004470:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004472:	6960      	ldr	r0, [r4, #20]
 8004474:	4798      	blx	r3
      pHandle->syncBuffer.state = readLock;
 8004476:	2303      	movs	r3, #3
 8004478:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
}
 800447c:	bd10      	pop	{r4, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 800447e:	b672      	cpsid	i
      if (pHandle->asyncNextBuffer != NULL)
 8004480:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004482:	b1cb      	cbz	r3, 80044b8 <ASPEP_HWDataTransmittedIT+0x94>
        pHandle->asyncNextBuffer->state = readLock;
 8004484:	2203      	movs	r2, #3
        pHandle->lockBuffer = (void *)pHandle->asyncNextBuffer;
 8004486:	64a3      	str	r3, [r4, #72]	; 0x48
        pHandle->asyncNextBuffer->state = readLock;
 8004488:	719a      	strb	r2, [r3, #6]
        pHandle->fASPEP_send(pHandle ->HWIp, pHandle->asyncNextBuffer->buffer, pHandle->asyncNextBuffer->length);
 800448a:	6819      	ldr	r1, [r3, #0]
 800448c:	889a      	ldrh	r2, [r3, #4]
 800448e:	6960      	ldr	r0, [r4, #20]
 8004490:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004492:	4798      	blx	r3
        if ((pHandle->asyncBufferA.state == pending) || (pHandle->asyncBufferB.state == pending))
 8004494:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8004498:	2b02      	cmp	r3, #2
 800449a:	d007      	beq.n	80044ac <ASPEP_HWDataTransmittedIT+0x88>
 800449c:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d003      	beq.n	80044ac <ASPEP_HWDataTransmittedIT+0x88>
          pHandle->asyncNextBuffer = NULL;
 80044a4:	2300      	movs	r3, #0
 80044a6:	6463      	str	r3, [r4, #68]	; 0x44
  __ASM volatile ("cpsie i" : : : "memory");
 80044a8:	b662      	cpsie	i
}
 80044aa:	bd10      	pop	{r4, pc}
          uint32_t temp = (uint32_t)&pHandle->asyncBufferA + (uint32_t)&pHandle->asyncBufferB
 80044ac:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80044ae:	0063      	lsls	r3, r4, #1
 80044b0:	3368      	adds	r3, #104	; 0x68
 80044b2:	1a9b      	subs	r3, r3, r2
          pHandle->asyncNextBuffer = (MCTL_Buff_t *) temp; //cstat !MISRAC2012-Rule-11.4
 80044b4:	6463      	str	r3, [r4, #68]	; 0x44
        {
 80044b6:	e7f7      	b.n	80044a8 <ASPEP_HWDataTransmittedIT+0x84>
        pHandle->lockBuffer = NULL;
 80044b8:	64a3      	str	r3, [r4, #72]	; 0x48
 80044ba:	e7f5      	b.n	80044a8 <ASPEP_HWDataTransmittedIT+0x84>

080044bc <ASPEP_RXframeProcess>:
    uint16_t packetNumber;
#if VALID_CRC_DATA
    bool validCRCData = true;
#endif
    *packetLength = 0;
    if (pHandle->NewPacketAvailable)
 80044bc:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
    uint32_t packetHeader = *((uint32_t *)pHandle->rxHeader); //cstat !MISRAC2012-Rule-11.3
 80044c0:	69c2      	ldr	r2, [r0, #28]
{
 80044c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    *packetLength = 0;
 80044c6:	2500      	movs	r5, #0
{
 80044c8:	4604      	mov	r4, r0
    *packetLength = 0;
 80044ca:	800d      	strh	r5, [r1, #0]
    if (pHandle->NewPacketAvailable)
 80044cc:	b193      	cbz	r3, 80044f4 <ASPEP_RXframeProcess+0x38>
    {
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
      switch (pHandle->ASPEP_State)
 80044ce:	f890 6064 	ldrb.w	r6, [r0, #100]	; 0x64
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
 80044d2:	f880 5061 	strb.w	r5, [r0, #97]	; 0x61
      switch (pHandle->ASPEP_State)
 80044d6:	2e01      	cmp	r6, #1
 80044d8:	d054      	beq.n	8004584 <ASPEP_RXframeProcess+0xc8>
 80044da:	2e02      	cmp	r6, #2
 80044dc:	d03e      	beq.n	800455c <ASPEP_RXframeProcess+0xa0>
 80044de:	2e00      	cmp	r6, #0
 80044e0:	d033      	beq.n	800454a <ASPEP_RXframeProcess+0x8e>

        default:
          break;
      }
      /* The valid received packet is now safely consumes, we are ready to receive a new packet */
      pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 80044e2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80044e4:	6960      	ldr	r0, [r4, #20]
 80044e6:	2204      	movs	r2, #4
 80044e8:	f104 011c 	add.w	r1, r4, #28
 80044ec:	4798      	blx	r3
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
  return (result);
}
 80044ee:	4628      	mov	r0, r5
 80044f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if (pHandle->badPacketFlag > ASPEP_OK)
 80044f4:	f890 5062 	ldrb.w	r5, [r0, #98]	; 0x62
 80044f8:	2d00      	cmp	r5, #0
 80044fa:	d0f8      	beq.n	80044ee <ASPEP_RXframeProcess+0x32>
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 80044fc:	042b      	lsls	r3, r5, #16
 80044fe:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8004502:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004506:	489b      	ldr	r0, [pc, #620]	; (8004774 <ASPEP_RXframeProcess+0x2b8>)
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8004508:	4d9b      	ldr	r5, [pc, #620]	; (8004778 <ASPEP_RXframeProcess+0x2bc>)
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 800450a:	f082 0209 	eor.w	r2, r2, #9
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 800450e:	5c81      	ldrb	r1, [r0, r2]
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 8004510:	f043 020f 	orr.w	r2, r3, #15
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8004514:	ea81 4313 	eor.w	r3, r1, r3, lsr #16
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8004518:	5cc3      	ldrb	r3, [r0, r3]
  *headerPtr |= (uint32_t)crc << 28;
 800451a:	5ceb      	ldrb	r3, [r5, r3]
 800451c:	ea42 7303 	orr.w	r3, r2, r3, lsl #28
 8004520:	6223      	str	r3, [r4, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8004522:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8004524:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004526:	2b00      	cmp	r3, #0
 8004528:	d03a      	beq.n	80045a0 <ASPEP_RXframeProcess+0xe4>
  __ASM volatile ("cpsie i" : : : "memory");
 800452a:	b662      	cpsie	i
        if (pHandle->ctrlBuffer.state != available)
 800452c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8004530:	b913      	cbnz	r3, 8004538 <ASPEP_RXframeProcess+0x7c>
          pHandle->ctrlBuffer.state = pending;
 8004532:	2302      	movs	r3, #2
 8004534:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      pHandle->badPacketFlag = ASPEP_OK;
 8004538:	2500      	movs	r5, #0
      pHandle->fASPEP_HWSync(pHandle->HWIp);
 800453a:	6960      	ldr	r0, [r4, #20]
 800453c:	6d23      	ldr	r3, [r4, #80]	; 0x50
      pHandle->badPacketFlag = ASPEP_OK;
 800453e:	f884 5062 	strb.w	r5, [r4, #98]	; 0x62
      pHandle->fASPEP_HWSync(pHandle->HWIp);
 8004542:	4798      	blx	r3
}
 8004544:	4628      	mov	r0, r5
 8004546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if (BEACON == pHandle->rxPacketType)
 800454a:	6e81      	ldr	r1, [r0, #104]	; 0x68
 800454c:	2905      	cmp	r1, #5
 800454e:	f000 809e 	beq.w	800468e <ASPEP_RXframeProcess+0x1d2>
          else if (PING == pHandle->rxPacketType)
 8004552:	2906      	cmp	r1, #6
 8004554:	f000 80e3 	beq.w	800471e <ASPEP_RXframeProcess+0x262>
  uint8_t *result = NULL; //cstat !MISRAC2012-Rule-8.13
 8004558:	4635      	mov	r5, r6
 800455a:	e7c2      	b.n	80044e2 <ASPEP_RXframeProcess+0x26>
          if (BEACON == pHandle->rxPacketType)
 800455c:	6e86      	ldr	r6, [r0, #104]	; 0x68
 800455e:	2e05      	cmp	r6, #5
 8004560:	d060      	beq.n	8004624 <ASPEP_RXframeProcess+0x168>
          else if (PING == pHandle->rxPacketType)
 8004562:	2e06      	cmp	r6, #6
 8004564:	f000 80e2 	beq.w	800472c <ASPEP_RXframeProcess+0x270>
          else if (DATA_PACKET == pHandle->rxPacketType)
 8004568:	2e09      	cmp	r6, #9
 800456a:	d1ba      	bne.n	80044e2 <ASPEP_RXframeProcess+0x26>
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from controller */
 800456c:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
              *packetLength = pHandle->rxLength;
 8004570:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
              result = pHandle->rxBuffer;
 8004574:	69a5      	ldr	r5, [r4, #24]
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from controller */
 8004576:	3301      	adds	r3, #1
              pSupHandle->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 8004578:	2001      	movs	r0, #1
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from controller */
 800457a:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
              pSupHandle->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 800457e:	7420      	strb	r0, [r4, #16]
              *packetLength = pHandle->rxLength;
 8004580:	800a      	strh	r2, [r1, #0]
              result = pHandle->rxBuffer;
 8004582:	e7ae      	b.n	80044e2 <ASPEP_RXframeProcess+0x26>
          if (BEACON == pHandle->rxPacketType)
 8004584:	6e81      	ldr	r1, [r0, #104]	; 0x68
 8004586:	2905      	cmp	r1, #5
 8004588:	d016      	beq.n	80045b8 <ASPEP_RXframeProcess+0xfc>
          else if (PING == pHandle->rxPacketType)
 800458a:	2906      	cmp	r1, #6
 800458c:	d1a9      	bne.n	80044e2 <ASPEP_RXframeProcess+0x26>
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 800458e:	f3c2 320f 	ubfx	r2, r2, #12, #16
 8004592:	4631      	mov	r1, r6
 8004594:	f7ff fe3c 	bl	8004210 <ASPEP_sendPing>
            pHandle->ASPEP_State = ASPEP_CONNECTED;
 8004598:	2302      	movs	r3, #2
 800459a:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 800459e:	e7a0      	b.n	80044e2 <ASPEP_RXframeProcess+0x26>
  (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 80045a0:	f104 0120 	add.w	r1, r4, #32
        pHandle->ctrlBuffer.state = readLock;
 80045a4:	2303      	movs	r3, #3
 80045a6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 80045aa:	64a1      	str	r1, [r4, #72]	; 0x48
 80045ac:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 80045ae:	2204      	movs	r2, #4
 80045b0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80045b2:	6960      	ldr	r0, [r4, #20]
 80045b4:	4798      	blx	r3
  return (result);
 80045b6:	e7bf      	b.n	8004538 <ASPEP_RXframeProcess+0x7c>
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 80045b8:	7f03      	ldrb	r3, [r0, #28]
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 80045ba:	7f40      	ldrb	r0, [r0, #29]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 80045bc:	f894 106d 	ldrb.w	r1, [r4, #109]	; 0x6d
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80045c0:	f894 606c 	ldrb.w	r6, [r4, #108]	; 0x6c
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80045c4:	f894 706e 	ldrb.w	r7, [r4, #110]	; 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80045c8:	f894 e06f 	ldrb.w	lr, [r4, #111]	; 0x6f
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 80045cc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 80045d0:	09db      	lsrs	r3, r3, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 80045d2:	4281      	cmp	r1, r0
 80045d4:	bf28      	it	cs
 80045d6:	4601      	movcs	r1, r0
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80045d8:	42b3      	cmp	r3, r6
 80045da:	469c      	mov	ip, r3
 80045dc:	bf28      	it	cs
 80045de:	46b4      	movcs	ip, r6
 80045e0:	f36c 0507 	bfi	r5, ip, #0, #8
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 80045e4:	f3c2 3c86 	ubfx	ip, r2, #14, #7
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 80045e8:	f3c2 5846 	ubfx	r8, r2, #21, #7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80045ec:	45bc      	cmp	ip, r7
 80045ee:	46e1      	mov	r9, ip
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80045f0:	f361 250f 	bfi	r5, r1, #8, #8
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80045f4:	bf28      	it	cs
 80045f6:	46b9      	movcs	r9, r7
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80045f8:	45f0      	cmp	r8, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80045fa:	f369 4517 	bfi	r5, r9, #16, #8
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80045fe:	46c1      	mov	r9, r8
 8004600:	bf28      	it	cs
 8004602:	46f1      	movcs	r9, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8004604:	f369 651f 	bfi	r5, r9, #24, #8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8004608:	42b3      	cmp	r3, r6
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 800460a:	66e5      	str	r5, [r4, #108]	; 0x6c
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 800460c:	f240 8093 	bls.w	8004736 <ASPEP_RXframeProcess+0x27a>
              pHandle->ASPEP_State = ASPEP_IDLE;
 8004610:	2300      	movs	r3, #0
 8004612:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
 8004616:	f104 016c 	add.w	r1, r4, #108	; 0x6c
 800461a:	4620      	mov	r0, r4
 800461c:	f7ff fdb2 	bl	8004184 <ASPEP_sendBeacon>
  uint8_t *result = NULL; //cstat !MISRAC2012-Rule-8.13
 8004620:	2500      	movs	r5, #0
 8004622:	e75e      	b.n	80044e2 <ASPEP_RXframeProcess+0x26>
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8004624:	7f46      	ldrb	r6, [r0, #29]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8004626:	f890 c06c 	ldrb.w	ip, [r0, #108]	; 0x6c
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 800462a:	7f03      	ldrb	r3, [r0, #28]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 800462c:	f890 006d 	ldrb.w	r0, [r0, #109]	; 0x6d
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8004630:	f894 e06e 	ldrb.w	lr, [r4, #110]	; 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8004634:	f894 806f 	ldrb.w	r8, [r4, #111]	; 0x6f
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8004638:	f006 063f 	and.w	r6, r6, #63	; 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 800463c:	09db      	lsrs	r3, r3, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 800463e:	42b0      	cmp	r0, r6
 8004640:	bf28      	it	cs
 8004642:	4630      	movcs	r0, r6
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8004644:	4563      	cmp	r3, ip
 8004646:	461f      	mov	r7, r3
 8004648:	4629      	mov	r1, r5
 800464a:	bf28      	it	cs
 800464c:	4667      	movcs	r7, ip
 800464e:	f367 0107 	bfi	r1, r7, #0, #8
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8004652:	f3c2 3786 	ubfx	r7, r2, #14, #7
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 8004656:	f3c2 5946 	ubfx	r9, r2, #21, #7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 800465a:	4577      	cmp	r7, lr
 800465c:	46ba      	mov	sl, r7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 800465e:	f360 210f 	bfi	r1, r0, #8, #8
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8004662:	bf28      	it	cs
 8004664:	46f2      	movcs	sl, lr
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8004666:	45c1      	cmp	r9, r8
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8004668:	f36a 4117 	bfi	r1, sl, #16, #8
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 800466c:	46ca      	mov	sl, r9
 800466e:	bf28      	it	cs
 8004670:	46c2      	movcs	sl, r8
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8004672:	f36a 611f 	bfi	r1, sl, #24, #8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8004676:	4563      	cmp	r3, ip
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8004678:	66e1      	str	r1, [r4, #108]	; 0x6c
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 800467a:	f104 016c 	add.w	r1, r4, #108	; 0x6c
 800467e:	d96b      	bls.n	8004758 <ASPEP_RXframeProcess+0x29c>
 8004680:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
 8004684:	4620      	mov	r0, r4
 8004686:	f7ff fd7d 	bl	8004184 <ASPEP_sendBeacon>
  uint8_t *result = NULL; //cstat !MISRAC2012-Rule-8.13
 800468a:	2500      	movs	r5, #0
 800468c:	e729      	b.n	80044e2 <ASPEP_RXframeProcess+0x26>
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 800468e:	7f45      	ldrb	r5, [r0, #29]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8004690:	f890 106d 	ldrb.w	r1, [r0, #109]	; 0x6d
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8004694:	7f03      	ldrb	r3, [r0, #28]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8004696:	f890 e06c 	ldrb.w	lr, [r0, #108]	; 0x6c
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 800469a:	f890 706e 	ldrb.w	r7, [r0, #110]	; 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 800469e:	f894 906f 	ldrb.w	r9, [r4, #111]	; 0x6f
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 80046a2:	f005 053f 	and.w	r5, r5, #63	; 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 80046a6:	09db      	lsrs	r3, r3, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 80046a8:	42a9      	cmp	r1, r5
 80046aa:	bf28      	it	cs
 80046ac:	4629      	movcs	r1, r5
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80046ae:	4573      	cmp	r3, lr
 80046b0:	4618      	mov	r0, r3
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 80046b2:	f3c2 3886 	ubfx	r8, r2, #14, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80046b6:	bf28      	it	cs
 80046b8:	4670      	movcs	r0, lr
 80046ba:	f360 0607 	bfi	r6, r0, #0, #8
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 80046be:	f3c2 5a46 	ubfx	sl, r2, #21, #7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80046c2:	45b8      	cmp	r8, r7
 80046c4:	4640      	mov	r0, r8
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80046c6:	f361 260f 	bfi	r6, r1, #8, #8
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80046ca:	bf28      	it	cs
 80046cc:	4638      	movcs	r0, r7
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80046ce:	45ca      	cmp	sl, r9
 80046d0:	46d4      	mov	ip, sl
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80046d2:	f360 4617 	bfi	r6, r0, #16, #8
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80046d6:	bf28      	it	cs
 80046d8:	46cc      	movcs	ip, r9
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80046da:	f36c 661f 	bfi	r6, ip, #24, #8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 80046de:	4573      	cmp	r3, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80046e0:	66e6      	str	r6, [r4, #108]	; 0x6c
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 80046e2:	d898      	bhi.n	8004616 <ASPEP_RXframeProcess+0x15a>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 80046e4:	428d      	cmp	r5, r1
 80046e6:	d896      	bhi.n	8004616 <ASPEP_RXframeProcess+0x15a>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 80046e8:	45b8      	cmp	r8, r7
 80046ea:	d894      	bhi.n	8004616 <ASPEP_RXframeProcess+0x15a>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 80046ec:	45ca      	cmp	sl, r9
 80046ee:	d892      	bhi.n	8004616 <ASPEP_RXframeProcess+0x15a>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 80046f0:	f3c2 1302 	ubfx	r3, r2, #4, #3
 80046f4:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d18c      	bne.n	8004616 <ASPEP_RXframeProcess+0x15a>
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 80046fc:	1c4b      	adds	r3, r1, #1
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 80046fe:	1c42      	adds	r2, r0, #1
 8004700:	b2d2      	uxtb	r2, r2
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8004702:	b2db      	uxtb	r3, r3
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8004704:	0152      	lsls	r2, r2, #5
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
 8004706:	ea4f 1c8c 	mov.w	ip, ip, lsl #6
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 800470a:	015b      	lsls	r3, r3, #5
              pHandle->ASPEP_State = ASPEP_CONFIGURED;
 800470c:	2101      	movs	r1, #1
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 800470e:	81a2      	strh	r2, [r4, #12]
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
 8004710:	f8a4 c00e 	strh.w	ip, [r4, #14]
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8004714:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
              pHandle->ASPEP_State = ASPEP_CONFIGURED;
 8004718:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
 800471c:	e77b      	b.n	8004616 <ASPEP_RXframeProcess+0x15a>
            ASPEP_sendPing(pHandle, ASPEP_PING_RESET, packetNumber);
 800471e:	f3c2 320f 	ubfx	r2, r2, #12, #16
 8004722:	4631      	mov	r1, r6
 8004724:	f7ff fd74 	bl	8004210 <ASPEP_sendPing>
  uint8_t *result = NULL; //cstat !MISRAC2012-Rule-8.13
 8004728:	4635      	mov	r5, r6
 800472a:	e6da      	b.n	80044e2 <ASPEP_RXframeProcess+0x26>
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 800472c:	7f42      	ldrb	r2, [r0, #29]
 800472e:	2101      	movs	r1, #1
 8004730:	f7ff fd6e 	bl	8004210 <ASPEP_sendPing>
 8004734:	e6d5      	b.n	80044e2 <ASPEP_RXframeProcess+0x26>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8004736:	4288      	cmp	r0, r1
 8004738:	f63f af6a 	bhi.w	8004610 <ASPEP_RXframeProcess+0x154>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 800473c:	45bc      	cmp	ip, r7
 800473e:	f63f af67 	bhi.w	8004610 <ASPEP_RXframeProcess+0x154>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8004742:	45f0      	cmp	r8, lr
 8004744:	f63f af64 	bhi.w	8004610 <ASPEP_RXframeProcess+0x154>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8004748:	f894 1070 	ldrb.w	r1, [r4, #112]	; 0x70
 800474c:	f3c2 1302 	ubfx	r3, r2, #4, #3
 8004750:	4299      	cmp	r1, r3
 8004752:	f47f af5d 	bne.w	8004610 <ASPEP_RXframeProcess+0x154>
 8004756:	e75e      	b.n	8004616 <ASPEP_RXframeProcess+0x15a>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8004758:	4286      	cmp	r6, r0
 800475a:	d891      	bhi.n	8004680 <ASPEP_RXframeProcess+0x1c4>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 800475c:	4577      	cmp	r7, lr
 800475e:	d88f      	bhi.n	8004680 <ASPEP_RXframeProcess+0x1c4>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8004760:	45c1      	cmp	r9, r8
 8004762:	d88d      	bhi.n	8004680 <ASPEP_RXframeProcess+0x1c4>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8004764:	f894 5070 	ldrb.w	r5, [r4, #112]	; 0x70
 8004768:	f3c2 1302 	ubfx	r3, r2, #4, #3
              pHandle->ASPEP_State = ASPEP_IDLE;
 800476c:	1aeb      	subs	r3, r5, r3
 800476e:	425d      	negs	r5, r3
 8004770:	415d      	adcs	r5, r3
 8004772:	e785      	b.n	8004680 <ASPEP_RXframeProcess+0x1c4>
 8004774:	08011610 	.word	0x08011610
 8004778:	08011600 	.word	0x08011600

0800477c <ASPEP_HWDataReceivedIT>:
  * If the packet received contains an error in the header, the HW IP will be re-synchronised first, and DMA will be configured after.
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_HWDataReceivedIT(ASPEP_Handle_t *pHandle)
{
 800477c:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    switch (pHandle->ASPEP_TL_State)
 800477e:	f890 3065 	ldrb.w	r3, [r0, #101]	; 0x65
{
 8004782:	4604      	mov	r4, r0
    switch (pHandle->ASPEP_TL_State)
 8004784:	b13b      	cbz	r3, 8004796 <ASPEP_HWDataReceivedIT+0x1a>
 8004786:	2b01      	cmp	r3, #1
 8004788:	d104      	bne.n	8004794 <ASPEP_HWDataReceivedIT+0x18>
        break;
      }

      case WAITING_PAYLOAD:
      {
        pHandle->ASPEP_TL_State = WAITING_PACKET;
 800478a:	2200      	movs	r2, #0
 800478c:	f880 2065 	strb.w	r2, [r0, #101]	; 0x65
        /* Payload received, */
        pHandle->NewPacketAvailable = true;
 8004790:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61
        break;
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 8004794:	bd10      	pop	{r4, pc}
        if (ASPEP_CheckHeaderCRC(*(uint32_t *)pHandle->rxHeader) == true) //cstat !MISRAC2012-Rule-11.3
 8004796:	69c1      	ldr	r1, [r0, #28]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8004798:	4a1e      	ldr	r2, [pc, #120]	; (8004814 <ASPEP_HWDataReceivedIT+0x98>)
 800479a:	b2cb      	uxtb	r3, r1
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 800479c:	5cd3      	ldrb	r3, [r2, r3]
 800479e:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 80047a2:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 80047a4:	5cd3      	ldrb	r3, [r2, r3]
 80047a6:	ea83 4311 	eor.w	r3, r3, r1, lsr #16
 80047aa:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 24U) & 0xffU)];
 80047ac:	5cd3      	ldrb	r3, [r2, r3]
 80047ae:	ea83 6311 	eor.w	r3, r3, r1, lsr #24
        if (ASPEP_CheckHeaderCRC(*(uint32_t *)pHandle->rxHeader) == true) //cstat !MISRAC2012-Rule-11.3
 80047b2:	5cd3      	ldrb	r3, [r2, r3]
 80047b4:	b95b      	cbnz	r3, 80047ce <ASPEP_HWDataReceivedIT+0x52>
          pHandle->rxPacketType = (ASPEP_packetType)(((uint32_t)pHandle->rxHeader[0]) & ID_MASK);
 80047b6:	7f03      	ldrb	r3, [r0, #28]
 80047b8:	f003 030f 	and.w	r3, r3, #15
 80047bc:	2b06      	cmp	r3, #6
 80047be:	6683      	str	r3, [r0, #104]	; 0x68
          switch (pHandle->rxPacketType)
 80047c0:	d809      	bhi.n	80047d6 <ASPEP_HWDataReceivedIT+0x5a>
 80047c2:	2b04      	cmp	r3, #4
 80047c4:	d81e      	bhi.n	8004804 <ASPEP_HWDataReceivedIT+0x88>
              pHandle->badPacketFlag = ASPEP_BAD_PACKET_TYPE;
 80047c6:	2301      	movs	r3, #1
 80047c8:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
}
 80047cc:	bd10      	pop	{r4, pc}
          pHandle->badPacketFlag = ASPEP_BAD_CRC_HEADER;
 80047ce:	2304      	movs	r3, #4
 80047d0:	f880 3062 	strb.w	r3, [r0, #98]	; 0x62
}
 80047d4:	bd10      	pop	{r4, pc}
 80047d6:	2b09      	cmp	r3, #9
 80047d8:	d1f5      	bne.n	80047c6 <ASPEP_HWDataReceivedIT+0x4a>
              pHandle->rxLength = (uint16_t)((*((uint16_t *)pHandle->rxHeader) & 0x1FFF0U) >> (uint16_t)4);
 80047da:	8b83      	ldrh	r3, [r0, #28]
 80047dc:	091b      	lsrs	r3, r3, #4
 80047de:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
              if (0U == pHandle->rxLength) /* data packet with length 0 is a valid packet */
 80047e2:	b17b      	cbz	r3, 8004804 <ASPEP_HWDataReceivedIT+0x88>
              else if (pHandle->rxLength <= pHandle->maxRXPayload)
 80047e4:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d30f      	bcc.n	800480c <ASPEP_HWDataReceivedIT+0x90>
                pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxBuffer,  /* need to read + 2 bytes CRC*/
 80047ec:	f890 206c 	ldrb.w	r2, [r0, #108]	; 0x6c
 80047f0:	6981      	ldr	r1, [r0, #24]
 80047f2:	6940      	ldr	r0, [r0, #20]
 80047f4:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80047f8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80047fa:	4798      	blx	r3
                pHandle->ASPEP_TL_State = WAITING_PAYLOAD;
 80047fc:	2301      	movs	r3, #1
 80047fe:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
}
 8004802:	bd10      	pop	{r4, pc}
              pHandle->NewPacketAvailable = true;
 8004804:	2301      	movs	r3, #1
 8004806:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
}
 800480a:	bd10      	pop	{r4, pc}
                pHandle->badPacketFlag = ASPEP_BAD_PACKET_SIZE;
 800480c:	2302      	movs	r3, #2
 800480e:	f880 3062 	strb.w	r3, [r0, #98]	; 0x62
}
 8004812:	bd10      	pop	{r4, pc}
 8004814:	08011610 	.word	0x08011610

08004818 <ASPEP_HWDMAReset>:
  * @brief  Resets DMA after debugger has stopped the MCU.
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_HWDMAReset(ASPEP_Handle_t *pHandle)
{
 8004818:	4601      	mov	r1, r0
  {
#endif
    /* We must reset the RX state machine to be sure to not be in Waiting packet state */
    /* Otherwise the arrival of a new packet will trigger a NewPacketAvailable despite */
    /* the fact that bytes have been lost because of overrun (debugger paused for instance) */
    pHandle->ASPEP_TL_State = WAITING_PACKET;
 800481a:	2200      	movs	r2, #0
 800481c:	f880 2065 	strb.w	r2, [r0, #101]	; 0x65
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8004820:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8004822:	6940      	ldr	r0, [r0, #20]
 8004824:	2204      	movs	r2, #4
 8004826:	311c      	adds	r1, #28
 8004828:	4718      	bx	r3
 800482a:	bf00      	nop

0800482c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800482c:	b510      	push	{r4, lr}
 800482e:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004830:	2238      	movs	r2, #56	; 0x38
 8004832:	2100      	movs	r1, #0
 8004834:	a806      	add	r0, sp, #24
 8004836:	f00b ffe9 	bl	801080c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800483a:	2000      	movs	r0, #0
 800483c:	e9cd 0001 	strd	r0, r0, [sp, #4]
 8004840:	e9cd 0003 	strd	r0, r0, [sp, #12]
 8004844:	9005      	str	r0, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8004846:	f005 fa29 	bl	8009c9c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800484a:	2001      	movs	r0, #1
 800484c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8004850:	2206      	movs	r2, #6
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004852:	e9cd 0106 	strd	r0, r1, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004856:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004858:	2403      	movs	r4, #3
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 800485a:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 800485c:	2155      	movs	r1, #85	; 0x55
 800485e:	2208      	movs	r2, #8
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004860:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004862:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 8004866:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800486a:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800486e:	f005 fa93 	bl	8009d98 <HAL_RCC_OscConfig>
 8004872:	b108      	cbz	r0, 8004878 <SystemClock_Config+0x4c>
  __ASM volatile ("cpsid i" : : : "memory");
 8004874:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004876:	e7fe      	b.n	8004876 <SystemClock_Config+0x4a>
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004878:	2104      	movs	r1, #4
 800487a:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800487c:	220f      	movs	r2, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800487e:	eb0d 0001 	add.w	r0, sp, r1
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004882:	e9cd 2401 	strd	r2, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004886:	e9cd 3303 	strd	r3, r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800488a:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800488c:	f005 fd08 	bl	800a2a0 <HAL_RCC_ClockConfig>
 8004890:	b108      	cbz	r0, 8004896 <SystemClock_Config+0x6a>
 8004892:	b672      	cpsid	i
  while (1)
 8004894:	e7fe      	b.n	8004894 <SystemClock_Config+0x68>
  HAL_RCC_EnableCSS();
 8004896:	f005 fe31 	bl	800a4fc <HAL_RCC_EnableCSS>
}
 800489a:	b014      	add	sp, #80	; 0x50
 800489c:	bd10      	pop	{r4, pc}
 800489e:	bf00      	nop

080048a0 <main>:
{
 80048a0:	b580      	push	{r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048a2:	2400      	movs	r4, #0
{
 80048a4:	b0a6      	sub	sp, #152	; 0x98
  HAL_Init();
 80048a6:	f003 ffb7 	bl	8008818 <HAL_Init>
  SystemClock_Config();
 80048aa:	f7ff ffbf 	bl	800482c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048ae:	e9cd 4419 	strd	r4, r4, [sp, #100]	; 0x64
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80048b2:	4d9d      	ldr	r5, [pc, #628]	; (8004b28 <main+0x288>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048b4:	941b      	str	r4, [sp, #108]	; 0x6c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80048b6:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 80048b8:	489c      	ldr	r0, [pc, #624]	; (8004b2c <main+0x28c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80048ba:	f043 0304 	orr.w	r3, r3, #4
 80048be:	64eb      	str	r3, [r5, #76]	; 0x4c
 80048c0:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80048c2:	f003 0304 	and.w	r3, r3, #4
 80048c6:	9303      	str	r3, [sp, #12]
 80048c8:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80048ca:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80048cc:	f043 0320 	orr.w	r3, r3, #32
 80048d0:	64eb      	str	r3, [r5, #76]	; 0x4c
 80048d2:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80048d4:	f003 0320 	and.w	r3, r3, #32
 80048d8:	9304      	str	r3, [sp, #16]
 80048da:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80048dc:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80048de:	f043 0301 	orr.w	r3, r3, #1
 80048e2:	64eb      	str	r3, [r5, #76]	; 0x4c
 80048e4:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80048e6:	f003 0301 	and.w	r3, r3, #1
 80048ea:	9305      	str	r3, [sp, #20]
 80048ec:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80048ee:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80048f0:	f043 0302 	orr.w	r3, r3, #2
 80048f4:	64eb      	str	r3, [r5, #76]	; 0x4c
 80048f6:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80048f8:	f003 0302 	and.w	r3, r3, #2
 80048fc:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 80048fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8004902:	a917      	add	r1, sp, #92	; 0x5c
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 8004904:	9317      	str	r3, [sp, #92]	; 0x5c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004906:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800490a:	9a06      	ldr	r2, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800490c:	9318      	str	r3, [sp, #96]	; 0x60
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 800490e:	f005 f8cb 	bl	8009aa8 <HAL_GPIO_Init>
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8004912:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8004914:	f043 0304 	orr.w	r3, r3, #4
 8004918:	64ab      	str	r3, [r5, #72]	; 0x48
 800491a:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800491c:	f003 0304 	and.w	r3, r3, #4
 8004920:	9301      	str	r3, [sp, #4]
 8004922:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004924:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8004926:	f043 0301 	orr.w	r3, r3, #1
 800492a:	64ab      	str	r3, [r5, #72]	; 0x48
 800492c:	6cab      	ldr	r3, [r5, #72]	; 0x48
  hadc1.Instance = ADC1;
 800492e:	4d80      	ldr	r5, [pc, #512]	; (8004b30 <main+0x290>)
  ADC_MultiModeTypeDef multimode = {0};
 8004930:	940a      	str	r4, [sp, #40]	; 0x28
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004932:	f003 0301 	and.w	r3, r3, #1
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8004936:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004938:	9302      	str	r3, [sp, #8]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800493a:	223c      	movs	r2, #60	; 0x3c
 800493c:	a817      	add	r0, sp, #92	; 0x5c
  ADC_ChannelConfTypeDef sConfig = {0};
 800493e:	2720      	movs	r7, #32
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004940:	9b02      	ldr	r3, [sp, #8]
  ADC_MultiModeTypeDef multimode = {0};
 8004942:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8004946:	f00b ff61 	bl	801080c <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 800494a:	4621      	mov	r1, r4
 800494c:	463a      	mov	r2, r7
 800494e:	a80f      	add	r0, sp, #60	; 0x3c
 8004950:	f00b ff5c 	bl	801080c <memset>
  hadc1.Instance = ADC1;
 8004954:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004958:	e9c5 4401 	strd	r4, r4, [r5, #4]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800495c:	e9c5 440b 	strd	r4, r4, [r5, #44]	; 0x2c
  hadc1.Init.GainCompensation = 0;
 8004960:	612c      	str	r4, [r5, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8004962:	83ac      	strh	r4, [r5, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004964:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8004968:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800496c:	63ec      	str	r4, [r5, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800496e:	f885 4040 	strb.w	r4, [r5, #64]	; 0x40
  hadc1.Instance = ADC1;
 8004972:	602b      	str	r3, [r5, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004974:	2401      	movs	r4, #1
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8004976:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800497a:	2604      	movs	r6, #4
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800497c:	4628      	mov	r0, r5
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800497e:	616c      	str	r4, [r5, #20]
  hadc1.Init.NbrOfConversion = 1;
 8004980:	622c      	str	r4, [r5, #32]
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8004982:	60eb      	str	r3, [r5, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004984:	61ae      	str	r6, [r5, #24]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004986:	f003 ff71 	bl	800886c <HAL_ADC_Init>
 800498a:	b108      	cbz	r0, 8004990 <main+0xf0>
 800498c:	b672      	cpsid	i
  while (1)
 800498e:	e7fe      	b.n	800498e <main+0xee>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8004990:	900a      	str	r0, [sp, #40]	; 0x28
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8004992:	a90a      	add	r1, sp, #40	; 0x28
 8004994:	4628      	mov	r0, r5
 8004996:	f004 fe37 	bl	8009608 <HAL_ADCEx_MultiModeConfigChannel>
 800499a:	b108      	cbz	r0, 80049a0 <main+0x100>
 800499c:	b672      	cpsid	i
  while (1)
 800499e:	e7fe      	b.n	800499e <main+0xfe>
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80049a0:	4964      	ldr	r1, [pc, #400]	; (8004b34 <main+0x294>)
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80049a2:	f8ad 0080 	strh.w	r0, [sp, #128]	; 0x80
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 80049a6:	2380      	movs	r3, #128	; 0x80
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 80049a8:	e9cd 3321 	strd	r3, r3, [sp, #132]	; 0x84
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80049ac:	2309      	movs	r3, #9
 80049ae:	e9cd 1317 	strd	r1, r3, [sp, #92]	; 0x5c
  sConfigInjected.InjectedOffset = 0;
 80049b2:	e9cd 601b 	strd	r6, r0, [sp, #108]	; 0x6c
  sConfigInjected.QueueInjectedContext = DISABLE;
 80049b6:	f88d 0082 	strb.w	r0, [sp, #130]	; 0x82
  sConfigInjected.InjecOversamplingMode = DISABLE;
 80049ba:	f88d 008c 	strb.w	r0, [sp, #140]	; 0x8c
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 80049be:	f04f 087f 	mov.w	r8, #127	; 0x7f
  sConfigInjected.InjectedNbrOfConversion = 3;
 80049c2:	2303      	movs	r3, #3
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80049c4:	a917      	add	r1, sp, #92	; 0x5c
 80049c6:	4628      	mov	r0, r5
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 80049c8:	9419      	str	r4, [sp, #100]	; 0x64
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 80049ca:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
  sConfigInjected.InjectedNbrOfConversion = 3;
 80049ce:	931f      	str	r3, [sp, #124]	; 0x7c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80049d0:	f004 fafe 	bl	8008fd0 <HAL_ADCEx_InjectedConfigChannel>
 80049d4:	b108      	cbz	r0, 80049da <main+0x13a>
 80049d6:	b672      	cpsid	i
  while (1)
 80049d8:	e7fe      	b.n	80049d8 <main+0x138>
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 80049da:	4a57      	ldr	r2, [pc, #348]	; (8004b38 <main+0x298>)
 80049dc:	f240 130f 	movw	r3, #271	; 0x10f
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80049e0:	a917      	add	r1, sp, #92	; 0x5c
 80049e2:	4628      	mov	r0, r5
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 80049e4:	e9cd 2317 	strd	r2, r3, [sp, #92]	; 0x5c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80049e8:	f004 faf2 	bl	8008fd0 <HAL_ADCEx_InjectedConfigChannel>
 80049ec:	b108      	cbz	r0, 80049f2 <main+0x152>
 80049ee:	b672      	cpsid	i
  while (1)
 80049f0:	e7fe      	b.n	80049f0 <main+0x150>
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 80049f2:	f8df e15c 	ldr.w	lr, [pc, #348]	; 8004b50 <main+0x2b0>
 80049f6:	f240 2315 	movw	r3, #533	; 0x215
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80049fa:	a917      	add	r1, sp, #92	; 0x5c
 80049fc:	4628      	mov	r0, r5
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 80049fe:	e9cd e317 	strd	lr, r3, [sp, #92]	; 0x5c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8004a02:	f004 fae5 	bl	8008fd0 <HAL_ADCEx_InjectedConfigChannel>
 8004a06:	b108      	cbz	r0, 8004a0c <main+0x16c>
 8004a08:	b672      	cpsid	i
  while (1)
 8004a0a:	e7fe      	b.n	8004a0a <main+0x16a>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004a0c:	4b4b      	ldr	r3, [pc, #300]	; (8004b3c <main+0x29c>)
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004a0e:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
  sConfig.Offset = 0;
 8004a12:	9014      	str	r0, [sp, #80]	; 0x50
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004a14:	f04f 0806 	mov.w	r8, #6
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004a18:	4628      	mov	r0, r5
 8004a1a:	a90f      	add	r1, sp, #60	; 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004a1c:	e9cd 380f 	strd	r3, r8, [sp, #60]	; 0x3c
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8004a20:	9611      	str	r6, [sp, #68]	; 0x44
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004a22:	9613      	str	r6, [sp, #76]	; 0x4c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004a24:	f004 f848 	bl	8008ab8 <HAL_ADC_ConfigChannel>
 8004a28:	b108      	cbz	r0, 8004a2e <main+0x18e>
 8004a2a:	b672      	cpsid	i
  while (1)
 8004a2c:	e7fe      	b.n	8004a2c <main+0x18c>
  hcordic.Instance = CORDIC;
 8004a2e:	4844      	ldr	r0, [pc, #272]	; (8004b40 <main+0x2a0>)
 8004a30:	4b44      	ldr	r3, [pc, #272]	; (8004b44 <main+0x2a4>)
 8004a32:	6003      	str	r3, [r0, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8004a34:	f004 fe98 	bl	8009768 <HAL_CORDIC_Init>
 8004a38:	4605      	mov	r5, r0
 8004a3a:	b108      	cbz	r0, 8004a40 <main+0x1a0>
 8004a3c:	b672      	cpsid	i
  while (1)
 8004a3e:	e7fe      	b.n	8004a3e <main+0x19e>
  htim1.Instance = TIM1;
 8004a40:	4e41      	ldr	r6, [pc, #260]	; (8004b48 <main+0x2a8>)
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8004a42:	900e      	str	r0, [sp, #56]	; 0x38
 8004a44:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 8004a48:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004a4c:	e9cd 000f 	strd	r0, r0, [sp, #60]	; 0x3c
 8004a50:	e9cd 0011 	strd	r0, r0, [sp, #68]	; 0x44
 8004a54:	e9cd 0013 	strd	r0, r0, [sp, #76]	; 0x4c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004a58:	e9cd 0008 	strd	r0, r0, [sp, #32]
 8004a5c:	9007      	str	r0, [sp, #28]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004a5e:	9015      	str	r0, [sp, #84]	; 0x54
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004a60:	4601      	mov	r1, r0
 8004a62:	2234      	movs	r2, #52	; 0x34
 8004a64:	a817      	add	r0, sp, #92	; 0x5c
 8004a66:	f00b fed1 	bl	801080c <memset>
  htim1.Instance = TIM1;
 8004a6a:	4b38      	ldr	r3, [pc, #224]	; (8004b4c <main+0x2ac>)
 8004a6c:	6033      	str	r3, [r6, #0]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8004a6e:	f44f 5ca6 	mov.w	ip, #5312	; 0x14c0
 8004a72:	f44f 7380 	mov.w	r3, #256	; 0x100
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004a76:	4630      	mov	r0, r6
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8004a78:	e9c6 c303 	strd	ip, r3, [r6, #12]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8004a7c:	60b7      	str	r7, [r6, #8]
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 8004a7e:	6174      	str	r4, [r6, #20]
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 8004a80:	6075      	str	r5, [r6, #4]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004a82:	61b5      	str	r5, [r6, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004a84:	f005 ffac 	bl	800a9e0 <HAL_TIM_Base_Init>
 8004a88:	b108      	cbz	r0, 8004a8e <main+0x1ee>
 8004a8a:	b672      	cpsid	i
  while (1)
 8004a8c:	e7fe      	b.n	8004a8c <main+0x1ec>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004a8e:	4630      	mov	r0, r6
 8004a90:	f006 f87e 	bl	800ab90 <HAL_TIM_PWM_Init>
 8004a94:	b108      	cbz	r0, 8004a9a <main+0x1fa>
 8004a96:	b672      	cpsid	i
  while (1)
 8004a98:	e7fe      	b.n	8004a98 <main+0x1f8>
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8004a9a:	2310      	movs	r3, #16
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8004a9c:	a90a      	add	r1, sp, #40	; 0x28
 8004a9e:	4630      	mov	r0, r6
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8004aa0:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8004aa4:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8004aa6:	f006 f9ed 	bl	800ae84 <HAL_TIM_SlaveConfigSynchro>
 8004aaa:	b108      	cbz	r0, 8004ab0 <main+0x210>
 8004aac:	b672      	cpsid	i
  while (1)
 8004aae:	e7fe      	b.n	8004aae <main+0x20e>
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004ab0:	2300      	movs	r3, #0
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8004ab2:	2470      	movs	r4, #112	; 0x70
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004ab4:	4824      	ldr	r0, [pc, #144]	; (8004b48 <main+0x2a8>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004ab6:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004ab8:	a907      	add	r1, sp, #28
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004aba:	e9cd 4307 	strd	r4, r3, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004abe:	f006 fbe5 	bl	800b28c <HAL_TIMEx_MasterConfigSynchronization>
 8004ac2:	b108      	cbz	r0, 8004ac8 <main+0x228>
 8004ac4:	b672      	cpsid	i
  while (1)
 8004ac6:	e7fe      	b.n	8004ac6 <main+0x226>
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004ac8:	e9cd 0011 	strd	r0, r0, [sp, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004acc:	e9cd 0013 	strd	r0, r0, [sp, #76]	; 0x4c
  sConfigOC.Pulse = ((PWM_PERIOD_CYCLES) / 4);
 8004ad0:	2560      	movs	r5, #96	; 0x60
 8004ad2:	f44f 6326 	mov.w	r3, #2656	; 0xa60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004ad6:	4602      	mov	r2, r0
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004ad8:	9015      	str	r0, [sp, #84]	; 0x54
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004ada:	a90f      	add	r1, sp, #60	; 0x3c
 8004adc:	481a      	ldr	r0, [pc, #104]	; (8004b48 <main+0x2a8>)
  sConfigOC.Pulse = ((PWM_PERIOD_CYCLES) / 4);
 8004ade:	e9cd 530f 	strd	r5, r3, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004ae2:	f006 fac9 	bl	800b078 <HAL_TIM_PWM_ConfigChannel>
 8004ae6:	b108      	cbz	r0, 8004aec <main+0x24c>
 8004ae8:	b672      	cpsid	i
  while (1)
 8004aea:	e7fe      	b.n	8004aea <main+0x24a>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004aec:	4816      	ldr	r0, [pc, #88]	; (8004b48 <main+0x2a8>)
 8004aee:	2204      	movs	r2, #4
 8004af0:	a90f      	add	r1, sp, #60	; 0x3c
 8004af2:	f006 fac1 	bl	800b078 <HAL_TIM_PWM_ConfigChannel>
 8004af6:	b108      	cbz	r0, 8004afc <main+0x25c>
 8004af8:	b672      	cpsid	i
  while (1)
 8004afa:	e7fe      	b.n	8004afa <main+0x25a>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004afc:	4812      	ldr	r0, [pc, #72]	; (8004b48 <main+0x2a8>)
 8004afe:	2208      	movs	r2, #8
 8004b00:	a90f      	add	r1, sp, #60	; 0x3c
 8004b02:	f006 fab9 	bl	800b078 <HAL_TIM_PWM_ConfigChannel>
 8004b06:	b108      	cbz	r0, 8004b0c <main+0x26c>
 8004b08:	b672      	cpsid	i
  while (1)
 8004b0a:	e7fe      	b.n	8004b0a <main+0x26a>
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 8004b0c:	f241 43bf 	movw	r3, #5311	; 0x14bf
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004b10:	480d      	ldr	r0, [pc, #52]	; (8004b48 <main+0x2a8>)
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 8004b12:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004b14:	220c      	movs	r2, #12
 8004b16:	a90f      	add	r1, sp, #60	; 0x3c
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8004b18:	940f      	str	r4, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004b1a:	f006 faad 	bl	800b078 <HAL_TIM_PWM_ConfigChannel>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	b1c0      	cbz	r0, 8004b54 <main+0x2b4>
 8004b22:	b672      	cpsid	i
  while (1)
 8004b24:	e7fe      	b.n	8004b24 <main+0x284>
 8004b26:	bf00      	nop
 8004b28:	40021000 	.word	0x40021000
 8004b2c:	48000800 	.word	0x48000800
 8004b30:	20001ff8 	.word	0x20001ff8
 8004b34:	04300002 	.word	0x04300002
 8004b38:	1d500080 	.word	0x1d500080
 8004b3c:	08600004 	.word	0x08600004
 8004b40:	20002064 	.word	0x20002064
 8004b44:	40020c00 	.word	0x40020c00
 8004b48:	20002170 	.word	0x20002170
 8004b4c:	40012c00 	.word	0x40012c00
 8004b50:	19200040 	.word	0x19200040
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8004b54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004b58:	f44f 6400 	mov.w	r4, #2048	; 0x800
 8004b5c:	e9cd 4217 	strd	r4, r2, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 8004b60:	2248      	movs	r2, #72	; 0x48
 8004b62:	e9cd 3219 	strd	r3, r2, [sp, #100]	; 0x64
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004b66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004b6a:	e9cd 321b 	strd	r3, r2, [sp, #108]	; 0x6c
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004b6e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004b72:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004b76:	485a      	ldr	r0, [pc, #360]	; (8004ce0 <main+0x440>)
  sBreakDeadTimeConfig.Break2Filter = 3;
 8004b78:	2203      	movs	r2, #3
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004b7a:	a917      	add	r1, sp, #92	; 0x5c
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8004b7c:	e9cd 331d 	strd	r3, r3, [sp, #116]	; 0x74
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004b80:	e9cd 3322 	strd	r3, r3, [sp, #136]	; 0x88
  sBreakDeadTimeConfig.Break2Filter = 3;
 8004b84:	9221      	str	r2, [sp, #132]	; 0x84
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004b86:	f006 fbdd 	bl	800b344 <HAL_TIMEx_ConfigBreakDeadTime>
 8004b8a:	4605      	mov	r5, r0
 8004b8c:	b108      	cbz	r0, 8004b92 <main+0x2f2>
 8004b8e:	b672      	cpsid	i
  while (1)
 8004b90:	e7fe      	b.n	8004b90 <main+0x2f0>
  HAL_TIM_MspPostInit(&htim1);
 8004b92:	4853      	ldr	r0, [pc, #332]	; (8004ce0 <main+0x440>)
  huart2.Instance = USART2;
 8004b94:	4c53      	ldr	r4, [pc, #332]	; (8004ce4 <main+0x444>)
  HAL_TIM_MspPostInit(&htim1);
 8004b96:	f003 fbad 	bl	80082f4 <HAL_TIM_MspPostInit>
  huart2.Init.BaudRate = 1843200;
 8004b9a:	4953      	ldr	r1, [pc, #332]	; (8004ce8 <main+0x448>)
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004b9c:	62a5      	str	r5, [r4, #40]	; 0x28
  huart2.Init.BaudRate = 1843200;
 8004b9e:	f44f 13e1 	mov.w	r3, #1843200	; 0x1c2000
 8004ba2:	e9c4 1300 	strd	r1, r3, [r4]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004ba6:	4620      	mov	r0, r4
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004ba8:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004baa:	e9c4 5502 	strd	r5, r5, [r4, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004bae:	e9c4 5304 	strd	r5, r3, [r4, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004bb2:	e9c4 5506 	strd	r5, r5, [r4, #24]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004bb6:	e9c4 5508 	strd	r5, r5, [r4, #32]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004bba:	f006 fe6f 	bl	800b89c <HAL_UART_Init>
 8004bbe:	4601      	mov	r1, r0
 8004bc0:	b108      	cbz	r0, 8004bc6 <main+0x326>
 8004bc2:	b672      	cpsid	i
  while (1)
 8004bc4:	e7fe      	b.n	8004bc4 <main+0x324>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004bc6:	4620      	mov	r0, r4
 8004bc8:	f006 fef2 	bl	800b9b0 <HAL_UARTEx_SetTxFifoThreshold>
 8004bcc:	4601      	mov	r1, r0
 8004bce:	b108      	cbz	r0, 8004bd4 <main+0x334>
 8004bd0:	b672      	cpsid	i
  while (1)
 8004bd2:	e7fe      	b.n	8004bd2 <main+0x332>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004bd4:	4620      	mov	r0, r4
 8004bd6:	f006 ff2d 	bl	800ba34 <HAL_UARTEx_SetRxFifoThreshold>
 8004bda:	b108      	cbz	r0, 8004be0 <main+0x340>
 8004bdc:	b672      	cpsid	i
  while (1)
 8004bde:	e7fe      	b.n	8004bde <main+0x33e>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8004be0:	4620      	mov	r0, r4
 8004be2:	f006 fec7 	bl	800b974 <HAL_UARTEx_DisableFifoMode>
 8004be6:	b108      	cbz	r0, 8004bec <main+0x34c>
 8004be8:	b672      	cpsid	i
  while (1)
 8004bea:	e7fe      	b.n	8004bea <main+0x34a>
  MX_MotorControl_Init();
 8004bec:	f001 f91c 	bl	8005e28 <MX_MotorControl_Init>
  hcrc.Instance = CRC;
 8004bf0:	483e      	ldr	r0, [pc, #248]	; (8004cec <main+0x44c>)
 8004bf2:	4a3f      	ldr	r2, [pc, #252]	; (8004cf0 <main+0x450>)
 8004bf4:	6002      	str	r2, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8004bf6:	2300      	movs	r3, #0
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8004bf8:	2601      	movs	r6, #1
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8004bfa:	8083      	strh	r3, [r0, #4]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8004bfc:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8004c00:	6206      	str	r6, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8004c02:	f004 fe49 	bl	8009898 <HAL_CRC_Init>
 8004c06:	b108      	cbz	r0, 8004c0c <main+0x36c>
 8004c08:	b672      	cpsid	i
  while (1)
 8004c0a:	e7fe      	b.n	8004c0a <main+0x36a>
  htim3.Instance = TIM3;
 8004c0c:	4c39      	ldr	r4, [pc, #228]	; (8004cf4 <main+0x454>)
  htim3.Init.Prescaler = 17000;
 8004c0e:	4a3a      	ldr	r2, [pc, #232]	; (8004cf8 <main+0x458>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004c10:	9011      	str	r0, [sp, #68]	; 0x44
  htim3.Init.Prescaler = 17000;
 8004c12:	f244 2368 	movw	r3, #17000	; 0x4268
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004c16:	e9cd 0017 	strd	r0, r0, [sp, #92]	; 0x5c
 8004c1a:	e9cd 0019 	strd	r0, r0, [sp, #100]	; 0x64
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004c1e:	e9cd 000f 	strd	r0, r0, [sp, #60]	; 0x3c
  htim3.Init.Prescaler = 17000;
 8004c22:	e9c4 2300 	strd	r2, r3, [r4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c26:	60a0      	str	r0, [r4, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c28:	6120      	str	r0, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c2a:	61a0      	str	r0, [r4, #24]
  htim3.Init.Period = 65535;
 8004c2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004c30:	4620      	mov	r0, r4
  htim3.Init.Period = 65535;
 8004c32:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004c34:	f005 fed4 	bl	800a9e0 <HAL_TIM_Base_Init>
 8004c38:	b108      	cbz	r0, 8004c3e <main+0x39e>
 8004c3a:	b672      	cpsid	i
  while (1)
 8004c3c:	e7fe      	b.n	8004c3c <main+0x39c>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004c3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004c42:	a917      	add	r1, sp, #92	; 0x5c
 8004c44:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004c46:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004c48:	f006 f83c 	bl	800acc4 <HAL_TIM_ConfigClockSource>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	b108      	cbz	r0, 8004c54 <main+0x3b4>
 8004c50:	b672      	cpsid	i
  while (1)
 8004c52:	e7fe      	b.n	8004c52 <main+0x3b2>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004c54:	a90f      	add	r1, sp, #60	; 0x3c
 8004c56:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004c58:	930f      	str	r3, [sp, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c5a:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004c5c:	f006 fb16 	bl	800b28c <HAL_TIMEx_MasterConfigSynchronization>
 8004c60:	4605      	mov	r5, r0
 8004c62:	b108      	cbz	r0, 8004c68 <main+0x3c8>
 8004c64:	b672      	cpsid	i
  while (1)
 8004c66:	e7fe      	b.n	8004c66 <main+0x3c6>
  MX_X_CUBE_AI_Init();
 8004c68:	f7ff fa08 	bl	800407c <MX_X_CUBE_AI_Init>
  HAL_NVIC_SetPriority(USART2_IRQn, 3, 1);
 8004c6c:	4632      	mov	r2, r6
 8004c6e:	2103      	movs	r1, #3
 8004c70:	2026      	movs	r0, #38	; 0x26
 8004c72:	f004 fda5 	bl	80097c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004c76:	2026      	movs	r0, #38	; 0x26
 8004c78:	f004 fde0 	bl	800983c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 8004c7c:	462a      	mov	r2, r5
 8004c7e:	2103      	movs	r1, #3
 8004c80:	200b      	movs	r0, #11
 8004c82:	f004 fd9d 	bl	80097c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004c86:	200b      	movs	r0, #11
 8004c88:	f004 fdd8 	bl	800983c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 4, 1);
 8004c8c:	4632      	mov	r2, r6
 8004c8e:	2104      	movs	r1, #4
 8004c90:	2018      	movs	r0, #24
 8004c92:	f004 fd95 	bl	80097c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8004c96:	2018      	movs	r0, #24
 8004c98:	f004 fdd0 	bl	800983c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8004c9c:	462a      	mov	r2, r5
 8004c9e:	4629      	mov	r1, r5
 8004ca0:	2019      	movs	r0, #25
 8004ca2:	f004 fd8d 	bl	80097c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004ca6:	2019      	movs	r0, #25
 8004ca8:	f004 fdc8 	bl	800983c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 8004cac:	462a      	mov	r2, r5
 8004cae:	2102      	movs	r1, #2
 8004cb0:	2012      	movs	r0, #18
 8004cb2:	f004 fd85 	bl	80097c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8004cb6:	2012      	movs	r0, #18
 8004cb8:	f004 fdc0 	bl	800983c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8004cbc:	462a      	mov	r2, r5
 8004cbe:	2103      	movs	r1, #3
 8004cc0:	2028      	movs	r0, #40	; 0x28
 8004cc2:	f004 fd7d 	bl	80097c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004cc6:	2028      	movs	r0, #40	; 0x28
 8004cc8:	f004 fdb8 	bl	800983c <HAL_NVIC_EnableIRQ>
  TIM2->CNT = 0;
 8004ccc:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
 8004cd0:	6275      	str	r5, [r6, #36]	; 0x24
  HAL_TIM_Base_Start(&htim3);
 8004cd2:	4620      	mov	r0, r4
 8004cd4:	f005 ff1e 	bl	800ab14 <HAL_TIM_Base_Start>
  MX_X_CUBE_AI_Process();
 8004cd8:	f7ff fa10 	bl	80040fc <MX_X_CUBE_AI_Process>
  while (1)
 8004cdc:	e7f8      	b.n	8004cd0 <main+0x430>
 8004cde:	bf00      	nop
 8004ce0:	20002170 	.word	0x20002170
 8004ce4:	20002208 	.word	0x20002208
 8004ce8:	40004400 	.word	0x40004400
 8004cec:	2000208c 	.word	0x2000208c
 8004cf0:	40023000 	.word	0x40023000
 8004cf4:	200021bc 	.word	0x200021bc
 8004cf8:	40000400 	.word	0x40000400

08004cfc <Error_Handler>:
 8004cfc:	b672      	cpsid	i
  while (1)
 8004cfe:	e7fe      	b.n	8004cfe <Error_Handler+0x2>

08004d00 <MC_StartMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StartMotor1(void)
{
  return (MCI_StartMotor(pMCI[M1]));
 8004d00:	4b01      	ldr	r3, [pc, #4]	; (8004d08 <MC_StartMotor1+0x8>)
 8004d02:	6818      	ldr	r0, [r3, #0]
 8004d04:	f000 b8be 	b.w	8004e84 <MCI_StartMotor>
 8004d08:	20003490 	.word	0x20003490

08004d0c <MC_StopMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StopMotor1(void)
{
  return (MCI_StopMotor(pMCI[M1]));
 8004d0c:	4b01      	ldr	r3, [pc, #4]	; (8004d14 <MC_StopMotor1+0x8>)
 8004d0e:	6818      	ldr	r0, [r3, #0]
 8004d10:	f000 b8e8 	b.w	8004ee4 <MCI_StopMotor>
 8004d14:	20003490 	.word	0x20003490

08004d18 <MC_ProgramSpeedRampMotor1>:
  * @param  hDurationms Duration of the ramp expressed in milliseconds. It
  *         is possible to set 0 to perform an instantaneous change in the speed
  *         value.
  */
__weak void MC_ProgramSpeedRampMotor1(int16_t hFinalSpeed, uint16_t hDurationms)
{
 8004d18:	b410      	push	{r4}
  MCI_ExecSpeedRamp(pMCI[M1], hFinalSpeed, hDurationms);
 8004d1a:	4c04      	ldr	r4, [pc, #16]	; (8004d2c <MC_ProgramSpeedRampMotor1+0x14>)
{
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	460a      	mov	r2, r1
  MCI_ExecSpeedRamp(pMCI[M1], hFinalSpeed, hDurationms);
 8004d20:	6820      	ldr	r0, [r4, #0]
}
 8004d22:	f85d 4b04 	ldr.w	r4, [sp], #4
  MCI_ExecSpeedRamp(pMCI[M1], hFinalSpeed, hDurationms);
 8004d26:	4619      	mov	r1, r3
 8004d28:	f000 b840 	b.w	8004dac <MCI_ExecSpeedRamp>
 8004d2c:	20003490 	.word	0x20003490

08004d30 <MC_HasRampCompletedMotor1>:
/**
 * @brief Returns true if the last ramp submited for Motor 1 has completed, false otherwise
 */
__weak bool MC_HasRampCompletedMotor1(void)
{
  return (MCI_RampCompleted(pMCI[M1]));
 8004d30:	4b01      	ldr	r3, [pc, #4]	; (8004d38 <MC_HasRampCompletedMotor1+0x8>)
 8004d32:	6818      	ldr	r0, [r3, #0]
 8004d34:	f000 b93e 	b.w	8004fb4 <MCI_RampCompleted>
 8004d38:	20003490 	.word	0x20003490

08004d3c <MC_GetMecSpeedReferenceMotor1>:
/**
 *  @brief Returns the current mechanical rotor speed reference set for Motor 1, expressed in the unit defined by #SPEED_UNIT
 */
__weak int16_t MC_GetMecSpeedReferenceMotor1(void)
{
  return (MCI_GetMecSpeedRefUnit(pMCI[M1]));
 8004d3c:	4b01      	ldr	r3, [pc, #4]	; (8004d44 <MC_GetMecSpeedReferenceMotor1+0x8>)
 8004d3e:	6818      	ldr	r0, [r3, #0]
 8004d40:	f000 b952 	b.w	8004fe8 <MCI_GetMecSpeedRefUnit>
 8004d44:	20003490 	.word	0x20003490

08004d48 <MC_AcknowledgeFaultMotor1>:
 * the function is called, nothing is done and false is returned. Otherwise, true is
 * returned.
 */
__weak bool MC_AcknowledgeFaultMotor1(void)
{
  return (MCI_FaultAcknowledged(pMCI[M1]));
 8004d48:	4b01      	ldr	r3, [pc, #4]	; (8004d50 <MC_AcknowledgeFaultMotor1+0x8>)
 8004d4a:	6818      	ldr	r0, [r3, #0]
 8004d4c:	f000 b8ea 	b.w	8004f24 <MCI_FaultAcknowledged>
 8004d50:	20003490 	.word	0x20003490

08004d54 <MC_GetSTMStateMotor1>:
/**
 * @brief returns the current state of Motor 1 state machine
 */
__weak MCI_State_t MC_GetSTMStateMotor1(void)
{
  return (MCI_GetSTMState(pMCI[M1]));
 8004d54:	4b01      	ldr	r3, [pc, #4]	; (8004d5c <MC_GetSTMStateMotor1+0x8>)
 8004d56:	6818      	ldr	r0, [r3, #0]
 8004d58:	f000 b88e 	b.w	8004e78 <MCI_GetSTMState>
 8004d5c:	20003490 	.word	0x20003490

08004d60 <MC_ProfilerCommand>:
 * - txLength : Amount of space actually used for the answer - Set in the command itself
 * - txBuffer : Pointer to the buffer containing the answer
 * @retval returns MCP_CMD_OK or MCP_CMD_NOK if profiler is started correctly or not.
 *  */
__weak uint8_t MC_ProfilerCommand(uint16_t rxLength, uint8_t *rxBuffer, int16_t txSyncFreeSpace, uint16_t *txLength, uint8_t *txBuffer)
{
 8004d60:	b500      	push	{lr}
 8004d62:	b083      	sub	sp, #12
 8004d64:	4684      	mov	ip, r0
 8004d66:	9804      	ldr	r0, [sp, #16]
  return (SCC_CMD(&SCC, rxLength, rxBuffer, txSyncFreeSpace, txLength, txBuffer));
 8004d68:	9001      	str	r0, [sp, #4]
 8004d6a:	9300      	str	r3, [sp, #0]
 8004d6c:	4804      	ldr	r0, [pc, #16]	; (8004d80 <MC_ProfilerCommand+0x20>)
 8004d6e:	4613      	mov	r3, r2
 8004d70:	460a      	mov	r2, r1
 8004d72:	4661      	mov	r1, ip
 8004d74:	f7fb ffae 	bl	8000cd4 <SCC_CMD>
}
 8004d78:	b003      	add	sp, #12
 8004d7a:	f85d fb04 	ldr.w	pc, [sp], #4
 8004d7e:	bf00      	nop
 8004d80:	200002bc 	.word	0x200002bc

08004d84 <MC_APP_BootHook>:
   */

/* USER CODE BEGIN BootHook */

/* USER CODE END BootHook */
}
 8004d84:	4770      	bx	lr
 8004d86:	bf00      	nop

08004d88 <MC_APP_PostMediumFrequencyHook_M1>:
 8004d88:	4770      	bx	lr
 8004d8a:	bf00      	nop

08004d8c <MCI_Init>:
  *         (only present if position control is enabled)
  * @param  pPWMHandle pointer to the PWM & current feedback component to be used by the MCI.
  */
__weak void MCI_Init(MCI_Handle_t *pHandle, SpeednTorqCtrl_Handle_t *pSTC, pFOCVars_t pFOCVars,
                     PWMC_Handle_t *pPWMHandle )
{
 8004d8c:	b410      	push	{r4}
    pHandle->pSTC = pSTC;
    pHandle->pFOCVars = pFOCVars;
    pHandle->pPWM = pPWMHandle;

    /* Buffer related initialization */
    pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8004d8e:	2400      	movs	r4, #0
    pHandle->hFinalTorque = 0;
    pHandle->hDurationms = 0;
    pHandle->CommandState = MCI_BUFFER_EMPTY;
    pHandle->DirectCommand = MCI_NO_COMMAND;
    pHandle->State = IDLE;
    pHandle->CurrentFaults = MC_NO_FAULTS;
 8004d90:	e9c0 4407 	strd	r4, r4, [r0, #28]
    pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8004d94:	7304      	strb	r4, [r0, #12]
    pHandle->hFinalSpeed = 0;
 8004d96:	f8c0 400e 	str.w	r4, [r0, #14]
    pHandle->CommandState = MCI_BUFFER_EMPTY;
 8004d9a:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    pHandle->pFOCVars = pFOCVars;
 8004d9e:	e9c0 1200 	strd	r1, r2, [r0]
    pHandle->PastFaults = MC_NO_FAULTS;
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8004da2:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->pPWM = pPWMHandle;
 8004da6:	6083      	str	r3, [r0, #8]
}
 8004da8:	4770      	bx	lr
 8004daa:	bf00      	nop

08004dac <MCI_ExecSpeedRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
 8004dac:	f04f 0c01 	mov.w	ip, #1
    pHandle->hFinalSpeed = hFinalSpeed;
    pHandle->hDurationms = hDurationms;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8004db0:	f240 3301 	movw	r3, #769	; 0x301
    pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
 8004db4:	f880 c00c 	strb.w	ip, [r0, #12]
    pHandle->hFinalSpeed = hFinalSpeed;
 8004db8:	81c1      	strh	r1, [r0, #14]
    pHandle->hDurationms = hDurationms;
 8004dba:	8382      	strh	r2, [r0, #28]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8004dbc:	8483      	strh	r3, [r0, #36]	; 0x24
    pHandle->LastModalitySetByUser = MCM_SPEED_MODE;

#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8004dbe:	4770      	bx	lr

08004dc0 <MCI_ExecTorqueRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->lastCommand = MCI_CMD_EXECTORQUERAMP;
 8004dc0:	f04f 0c02 	mov.w	ip, #2
    pHandle->hFinalTorque = hFinalTorque;
    pHandle->hDurationms = hDurationms;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8004dc4:	f240 4301 	movw	r3, #1025	; 0x401
    pHandle->lastCommand = MCI_CMD_EXECTORQUERAMP;
 8004dc8:	f880 c00c 	strb.w	ip, [r0, #12]
    pHandle->hFinalTorque = hFinalTorque;
 8004dcc:	8201      	strh	r1, [r0, #16]
    pHandle->hDurationms = hDurationms;
 8004dce:	8382      	strh	r2, [r0, #28]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8004dd0:	8483      	strh	r3, [r0, #36]	; 0x24
    pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8004dd2:	4770      	bx	lr

08004dd4 <MCI_SetCurrentReferences>:
  * function.

  @sa MCI_SetCurrentReferences_F
  */
__weak void MCI_SetCurrentReferences(MCI_Handle_t *pHandle, qd_t Iqdref)
{
 8004dd4:	b082      	sub	sp, #8
  }
  else
  {
#endif

    pHandle->lastCommand = MCI_CMD_SETCURRENTREFERENCES;
 8004dd6:	2203      	movs	r2, #3
    pHandle->Iqdref.q = Iqdref.q;
    pHandle->Iqdref.d = Iqdref.d;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8004dd8:	f240 4301 	movw	r3, #1025	; 0x401
    pHandle->lastCommand = MCI_CMD_SETCURRENTREFERENCES;
 8004ddc:	7302      	strb	r2, [r0, #12]
    pHandle->Iqdref.q = Iqdref.q;
 8004dde:	f8c0 1012 	str.w	r1, [r0, #18]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8004de2:	8483      	strh	r3, [r0, #36]	; 0x24
    pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8004de4:	b002      	add	sp, #8
 8004de6:	4770      	bx	lr

08004de8 <MCI_FaultProcessing>:
  }
  else
  {
#endif
    /* Set current errors */
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 8004de8:	8c03      	ldrh	r3, [r0, #32]
    pHandle->PastFaults |= hSetErrors;
 8004dea:	f8b0 c022 	ldrh.w	ip, [r0, #34]	; 0x22
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 8004dee:	430b      	orrs	r3, r1
 8004df0:	ea23 0302 	bic.w	r3, r3, r2
    pHandle->PastFaults |= hSetErrors;
 8004df4:	ea41 010c 	orr.w	r1, r1, ip
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 8004df8:	8403      	strh	r3, [r0, #32]
    pHandle->PastFaults |= hSetErrors;
 8004dfa:	8441      	strh	r1, [r0, #34]	; 0x22
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8004dfc:	4770      	bx	lr
 8004dfe:	bf00      	nop

08004e00 <MCI_ExecBufferedCommands>:
    /* Nothing to do */
  }
  else
  {
#endif
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8004e00:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d000      	beq.n	8004e0a <MCI_ExecBufferedCommands+0xa>
 8004e08:	4770      	bx	lr
{
 8004e0a:	b510      	push	{r4, lr}
    {
      bool commandHasBeenExecuted = false;
      switch (pHandle->lastCommand)
 8004e0c:	7b02      	ldrb	r2, [r0, #12]
 8004e0e:	2a02      	cmp	r2, #2
 8004e10:	4604      	mov	r4, r0
 8004e12:	d007      	beq.n	8004e24 <MCI_ExecBufferedCommands+0x24>
 8004e14:	2a03      	cmp	r2, #3
 8004e16:	d028      	beq.n	8004e6a <MCI_ExecBufferedCommands+0x6a>
 8004e18:	2a01      	cmp	r2, #1
 8004e1a:	d017      	beq.n	8004e4c <MCI_ExecBufferedCommands+0x4c>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESSFULLY;
      }
      else
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESSFULLY;
 8004e1c:	2303      	movs	r3, #3
 8004e1e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      }
    }
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8004e22:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8004e24:	6843      	ldr	r3, [r0, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 8004e2c:	6800      	ldr	r0, [r0, #0]
 8004e2e:	2104      	movs	r1, #4
 8004e30:	f008 fa10 	bl	800d254 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms);
 8004e34:	8ba2      	ldrh	r2, [r4, #28]
 8004e36:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 8004e3a:	6820      	ldr	r0, [r4, #0]
 8004e3c:	f008 fa0e 	bl	800d25c <STC_ExecRamp>
      if (commandHasBeenExecuted)
 8004e40:	2800      	cmp	r0, #0
 8004e42:	d0eb      	beq.n	8004e1c <MCI_ExecBufferedCommands+0x1c>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESSFULLY;
 8004e44:	2302      	movs	r3, #2
 8004e46:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8004e4a:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8004e4c:	6843      	ldr	r3, [r0, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode(pHandle->pSTC, MCM_SPEED_MODE);
 8004e54:	6800      	ldr	r0, [r0, #0]
 8004e56:	2103      	movs	r1, #3
 8004e58:	f008 f9fc 	bl	800d254 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms);
 8004e5c:	8ba2      	ldrh	r2, [r4, #28]
 8004e5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e62:	6820      	ldr	r0, [r4, #0]
 8004e64:	f008 f9fa 	bl	800d25c <STC_ExecRamp>
          break;
 8004e68:	e7ea      	b.n	8004e40 <MCI_ExecBufferedCommands+0x40>
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8004e6a:	6842      	ldr	r2, [r0, #4]
 8004e6c:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 8004e70:	f8d0 3012 	ldr.w	r3, [r0, #18]
 8004e74:	6113      	str	r3, [r2, #16]
      if (commandHasBeenExecuted)
 8004e76:	e7e5      	b.n	8004e44 <MCI_ExecBufferedCommands+0x44>

08004e78 <MCI_GetSTMState>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? FAULT_NOW : pHandle->State);
#else
  return (pHandle->State);
#endif
}
 8004e78:	7fc0      	ldrb	r0, [r0, #31]
 8004e7a:	4770      	bx	lr

08004e7c <MCI_GetOccurredFaults>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MC_SW_ERROR : (uint16_t)pHandle->PastFaults);
#else
  return ((uint16_t)pHandle->PastFaults);
#endif
}
 8004e7c:	8c40      	ldrh	r0, [r0, #34]	; 0x22
 8004e7e:	4770      	bx	lr

08004e80 <MCI_GetCurrentFaults>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MC_SW_ERROR : (uint16_t)pHandle->CurrentFaults);
#else
  return ((uint16_t)pHandle->CurrentFaults);
#endif
}
 8004e80:	8c00      	ldrh	r0, [r0, #32]
 8004e82:	4770      	bx	lr

08004e84 <MCI_StartMotor>:
{
 8004e84:	b510      	push	{r4, lr}
 8004e86:	4604      	mov	r4, r0
    if ((IDLE == MCI_GetSTMState(pHandle)) &&
 8004e88:	f7ff fff6 	bl	8004e78 <MCI_GetSTMState>
 8004e8c:	b108      	cbz	r0, 8004e92 <MCI_StartMotor+0xe>
  bool retVal = false;
 8004e8e:	2000      	movs	r0, #0
}
 8004e90:	bd10      	pop	{r4, pc}
        (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8004e92:	4620      	mov	r0, r4
 8004e94:	f7ff fff2 	bl	8004e7c <MCI_GetOccurredFaults>
    if ((IDLE == MCI_GetSTMState(pHandle)) &&
 8004e98:	2800      	cmp	r0, #0
 8004e9a:	d1f8      	bne.n	8004e8e <MCI_StartMotor+0xa>
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8004e9c:	4620      	mov	r0, r4
 8004e9e:	f7ff ffef 	bl	8004e80 <MCI_GetCurrentFaults>
        (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8004ea2:	2800      	cmp	r0, #0
 8004ea4:	d1f3      	bne.n	8004e8e <MCI_StartMotor+0xa>
      pHandle->DirectCommand = MCI_START;
 8004ea6:	2001      	movs	r0, #1
 8004ea8:	77a0      	strb	r0, [r4, #30]
      pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8004eaa:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 8004eae:	bd10      	pop	{r4, pc}

08004eb0 <MCI_StartWithPolarizationMotor>:
{
 8004eb0:	b510      	push	{r4, lr}
 8004eb2:	4604      	mov	r4, r0
    if ((IDLE == MCI_GetSTMState(pHandle)) &&
 8004eb4:	f7ff ffe0 	bl	8004e78 <MCI_GetSTMState>
 8004eb8:	b108      	cbz	r0, 8004ebe <MCI_StartWithPolarizationMotor+0xe>
  bool retVal = true;
 8004eba:	2001      	movs	r0, #1
}
 8004ebc:	bd10      	pop	{r4, pc}
        (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8004ebe:	4620      	mov	r0, r4
 8004ec0:	f7ff ffdc 	bl	8004e7c <MCI_GetOccurredFaults>
    if ((IDLE == MCI_GetSTMState(pHandle)) &&
 8004ec4:	2800      	cmp	r0, #0
 8004ec6:	d1f8      	bne.n	8004eba <MCI_StartWithPolarizationMotor+0xa>
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8004ec8:	4620      	mov	r0, r4
 8004eca:	f7ff ffd9 	bl	8004e80 <MCI_GetCurrentFaults>
        (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8004ece:	2800      	cmp	r0, #0
 8004ed0:	d1f3      	bne.n	8004eba <MCI_StartWithPolarizationMotor+0xa>
      pHandle->DirectCommand = MCI_START;
 8004ed2:	2201      	movs	r2, #1
      pHandle->pPWM->offsetCalibStatus = false;
 8004ed4:	68a1      	ldr	r1, [r4, #8]
      pHandle->DirectCommand = MCI_START;
 8004ed6:	77a2      	strb	r2, [r4, #30]
      pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8004ed8:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
      pHandle->pPWM->offsetCalibStatus = false;
 8004edc:	f881 0081 	strb.w	r0, [r1, #129]	; 0x81
}
 8004ee0:	bd10      	pop	{r4, pc}
 8004ee2:	bf00      	nop

08004ee4 <MCI_StopMotor>:
{
 8004ee4:	b538      	push	{r3, r4, r5, lr}
 8004ee6:	4605      	mov	r5, r0
    State = MCI_GetSTMState(pHandle);
 8004ee8:	f7ff ffc6 	bl	8004e78 <MCI_GetSTMState>
    if ((IDLE == State) || (ICLWAIT == State))
 8004eec:	b150      	cbz	r0, 8004f04 <MCI_StopMotor+0x20>
 8004eee:	f1b0 040c 	subs.w	r4, r0, #12
    if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8004ef2:	4628      	mov	r0, r5
    if ((IDLE == State) || (ICLWAIT == State))
 8004ef4:	bf18      	it	ne
 8004ef6:	2401      	movne	r4, #1
    if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8004ef8:	f7ff ffc0 	bl	8004e7c <MCI_GetOccurredFaults>
 8004efc:	b140      	cbz	r0, 8004f10 <MCI_StopMotor+0x2c>
  bool retVal = false;
 8004efe:	2400      	movs	r4, #0
}
 8004f00:	4620      	mov	r0, r4
 8004f02:	bd38      	pop	{r3, r4, r5, pc}
      status = false;
 8004f04:	4604      	mov	r4, r0
    if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8004f06:	4628      	mov	r0, r5
 8004f08:	f7ff ffb8 	bl	8004e7c <MCI_GetOccurredFaults>
 8004f0c:	2800      	cmp	r0, #0
 8004f0e:	d1f6      	bne.n	8004efe <MCI_StopMotor+0x1a>
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 8004f10:	4628      	mov	r0, r5
 8004f12:	f7ff ffb5 	bl	8004e80 <MCI_GetCurrentFaults>
    if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8004f16:	2800      	cmp	r0, #0
 8004f18:	d1f1      	bne.n	8004efe <MCI_StopMotor+0x1a>
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 8004f1a:	2c00      	cmp	r4, #0
 8004f1c:	d0ef      	beq.n	8004efe <MCI_StopMotor+0x1a>
      pHandle->DirectCommand = MCI_STOP;
 8004f1e:	2305      	movs	r3, #5
 8004f20:	77ab      	strb	r3, [r5, #30]
      retVal = true;
 8004f22:	e7ed      	b.n	8004f00 <MCI_StopMotor+0x1c>

08004f24 <MCI_FaultAcknowledged>:
{
 8004f24:	b510      	push	{r4, lr}
 8004f26:	4604      	mov	r4, r0
    if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8004f28:	f7ff ffa6 	bl	8004e78 <MCI_GetSTMState>
 8004f2c:	280b      	cmp	r0, #11
 8004f2e:	d001      	beq.n	8004f34 <MCI_FaultAcknowledged+0x10>
  bool reVal = false;
 8004f30:	2000      	movs	r0, #0
}
 8004f32:	bd10      	pop	{r4, pc}
    if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8004f34:	4620      	mov	r0, r4
 8004f36:	f7ff ffa3 	bl	8004e80 <MCI_GetCurrentFaults>
 8004f3a:	2800      	cmp	r0, #0
 8004f3c:	d1f8      	bne.n	8004f30 <MCI_FaultAcknowledged+0xc>
      pHandle->DirectCommand = MCI_ACK_FAULTS;
 8004f3e:	2302      	movs	r3, #2
 8004f40:	77a3      	strb	r3, [r4, #30]
      pHandle->PastFaults = MC_NO_FAULTS;
 8004f42:	8460      	strh	r0, [r4, #34]	; 0x22
      reVal = true;
 8004f44:	2001      	movs	r0, #1
}
 8004f46:	bd10      	pop	{r4, pc}

08004f48 <MCI_GetFaultState>:
    LocalFaultState = MC_SW_ERROR | (MC_SW_ERROR << 16);
  }
  else
  {
#endif
    LocalFaultState = (uint32_t)(pHandle->PastFaults);
 8004f48:	8c43      	ldrh	r3, [r0, #34]	; 0x22
    LocalFaultState |= (uint32_t)(pHandle->CurrentFaults) << 16;
 8004f4a:	8c00      	ldrh	r0, [r0, #32]
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
  return (LocalFaultState);
}
 8004f4c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8004f50:	4770      	bx	lr
 8004f52:	bf00      	nop

08004f54 <MCI_GetControlMode>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MCM_TORQUE_MODE : pHandle->LastModalitySetByUser);
#else
  return (pHandle->LastModalitySetByUser);
#endif
}
 8004f54:	f890 0025 	ldrb.w	r0, [r0, #37]	; 0x25
 8004f58:	4770      	bx	lr
 8004f5a:	bf00      	nop

08004f5c <MCI_GetImposedMotorDirection>:
    /* Nothing to do */
  }
  else
  {
#endif
    switch (pHandle->lastCommand)
 8004f5c:	7b03      	ldrb	r3, [r0, #12]
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	d005      	beq.n	8004f6e <MCI_GetImposedMotorDirection+0x12>
 8004f62:	2b03      	cmp	r3, #3
 8004f64:	d013      	beq.n	8004f8e <MCI_GetImposedMotorDirection+0x32>
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d009      	beq.n	8004f7e <MCI_GetImposedMotorDirection+0x22>
 8004f6a:	2001      	movs	r0, #1
    }
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
  return (retVal);
}
 8004f6c:	4770      	bx	lr
        if (pHandle->hFinalTorque < 0)
 8004f6e:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
          retVal = -1;
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	bfac      	ite	ge
 8004f76:	2001      	movge	r0, #1
 8004f78:	f04f 30ff 	movlt.w	r0, #4294967295
 8004f7c:	4770      	bx	lr
        if (pHandle->hFinalSpeed < 0)
 8004f7e:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
          retVal = -1;
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	bfac      	ite	ge
 8004f86:	2001      	movge	r0, #1
 8004f88:	f04f 30ff 	movlt.w	r0, #4294967295
 8004f8c:	4770      	bx	lr
        if (pHandle->Iqdref.q < 0)
 8004f8e:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
          retVal = -1;
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	bfac      	ite	ge
 8004f96:	2001      	movge	r0, #1
 8004f98:	f04f 30ff 	movlt.w	r0, #4294967295
 8004f9c:	4770      	bx	lr
 8004f9e:	bf00      	nop

08004fa0 <MCI_GetLastRampFinalSpeed>:
  }
  return (retVal);
#else
  return (pHandle->hFinalSpeed);
#endif
}
 8004fa0:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
 8004fa4:	4770      	bx	lr
 8004fa6:	bf00      	nop

08004fa8 <MCI_GetLastRampFinalTorque>:
  }
  return (retVal);
#else
  return (pHandle->hFinalTorque);
#endif
}
 8004fa8:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 8004fac:	4770      	bx	lr
 8004fae:	bf00      	nop

08004fb0 <MCI_GetLastRampFinalDuration>:
  }
  return (retVal);
#else
  return (pHandle->hDurationms);
#endif
}
 8004fb0:	8b80      	ldrh	r0, [r0, #28]
 8004fb2:	4770      	bx	lr

08004fb4 <MCI_RampCompleted>:
  * @brief  Check if the settled speed or torque ramp has been completed.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the ramp is completed, false otherwise.
  */
__weak bool MCI_RampCompleted(MCI_Handle_t *pHandle)
{
 8004fb4:	b510      	push	{r4, lr}
 8004fb6:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    if (RUN == MCI_GetSTMState(pHandle))
 8004fb8:	f7ff ff5e 	bl	8004e78 <MCI_GetSTMState>
 8004fbc:	2806      	cmp	r0, #6
 8004fbe:	d001      	beq.n	8004fc4 <MCI_RampCompleted+0x10>
    }
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
  return (retVal);
}
 8004fc0:	2000      	movs	r0, #0
 8004fc2:	bd10      	pop	{r4, pc}
      retVal = STC_RampCompleted(pHandle->pSTC);
 8004fc4:	6820      	ldr	r0, [r4, #0]
}
 8004fc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      retVal = STC_RampCompleted(pHandle->pSTC);
 8004fca:	f008 b9bd 	b.w	800d348 <STC_RampCompleted>
 8004fce:	bf00      	nop

08004fd0 <MCI_StopRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    STC_StopRamp(pHandle->pSTC);
 8004fd0:	6800      	ldr	r0, [r0, #0]
 8004fd2:	f008 b987 	b.w	800d2e4 <STC_StopRamp>
 8004fd6:	bf00      	nop

08004fd8 <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit(MCI_Handle_t *pHandle)
{
 8004fd8:	b508      	push	{r3, lr}
    temp_speed = 0;
  }
  else
  {
#endif
    SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor(pHandle->pSTC);
 8004fda:	6800      	ldr	r0, [r0, #0]
 8004fdc:	f008 f928 	bl	800d230 <STC_GetSpeedSensor>
    temp_speed = SPD_GetAvrgMecSpeedUnit(SpeedSensor);
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
  return (temp_speed);
}
 8004fe0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    temp_speed = SPD_GetAvrgMecSpeedUnit(SpeedSensor);
 8004fe4:	f008 b8c8 	b.w	800d178 <SPD_GetAvrgMecSpeedUnit>

08004fe8 <MCI_GetMecSpeedRefUnit>:
__weak int16_t MCI_GetMecSpeedRefUnit(MCI_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? 0 : STC_GetMecSpeedRefUnit(pHandle->pSTC));
#else
  return (STC_GetMecSpeedRefUnit(pHandle->pSTC));
 8004fe8:	6800      	ldr	r0, [r0, #0]
 8004fea:	f008 b92b 	b.w	800d244 <STC_GetMecSpeedRefUnit>
 8004fee:	bf00      	nop

08004ff0 <MCI_GetIab>:
  {
    tempVal = pHandle->pFOCVars->Iab;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iab);
 8004ff0:	6842      	ldr	r2, [r0, #4]
 8004ff2:	6810      	ldr	r0, [r2, #0]
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	b282      	uxth	r2, r0
 8004ff8:	f362 030f 	bfi	r3, r2, #0, #16
 8004ffc:	0c00      	lsrs	r0, r0, #16
 8004ffe:	f360 431f 	bfi	r3, r0, #16, #16
{
 8005002:	b082      	sub	sp, #8
#endif
}
 8005004:	4618      	mov	r0, r3
 8005006:	b002      	add	sp, #8
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop

0800500c <MCI_GetIalphabeta>:
  {
    tempVal = pHandle->pFOCVars->Ialphabeta;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Ialphabeta);
 800500c:	6842      	ldr	r2, [r0, #4]
 800500e:	6850      	ldr	r0, [r2, #4]
 8005010:	2300      	movs	r3, #0
 8005012:	b282      	uxth	r2, r0
 8005014:	f362 030f 	bfi	r3, r2, #0, #16
 8005018:	0c00      	lsrs	r0, r0, #16
 800501a:	f360 431f 	bfi	r3, r0, #16, #16
{
 800501e:	b082      	sub	sp, #8
#endif
}
 8005020:	4618      	mov	r0, r3
 8005022:	b002      	add	sp, #8
 8005024:	4770      	bx	lr
 8005026:	bf00      	nop

08005028 <MCI_GetIqd>:
  {
    tempVal = pHandle->pFOCVars->Iqd;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iqd);
 8005028:	6842      	ldr	r2, [r0, #4]
 800502a:	68d0      	ldr	r0, [r2, #12]
 800502c:	2300      	movs	r3, #0
 800502e:	b282      	uxth	r2, r0
 8005030:	f362 030f 	bfi	r3, r2, #0, #16
 8005034:	0c00      	lsrs	r0, r0, #16
 8005036:	f360 431f 	bfi	r3, r0, #16, #16
{
 800503a:	b082      	sub	sp, #8
#endif
}
 800503c:	4618      	mov	r0, r3
 800503e:	b002      	add	sp, #8
 8005040:	4770      	bx	lr
 8005042:	bf00      	nop

08005044 <MCI_GetIqdref>:
  {
    tempVal = pHandle->pFOCVars->Iqdref;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iqdref);
 8005044:	6842      	ldr	r2, [r0, #4]
 8005046:	6910      	ldr	r0, [r2, #16]
 8005048:	2300      	movs	r3, #0
 800504a:	b282      	uxth	r2, r0
 800504c:	f362 030f 	bfi	r3, r2, #0, #16
 8005050:	0c00      	lsrs	r0, r0, #16
 8005052:	f360 431f 	bfi	r3, r0, #16, #16
{
 8005056:	b082      	sub	sp, #8
#endif
}
 8005058:	4618      	mov	r0, r3
 800505a:	b002      	add	sp, #8
 800505c:	4770      	bx	lr
 800505e:	bf00      	nop

08005060 <MCI_GetVqd>:
  {
    tempVal = pHandle->pFOCVars->Vqd;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Vqd);
 8005060:	6842      	ldr	r2, [r0, #4]
 8005062:	f8d2 0016 	ldr.w	r0, [r2, #22]
 8005066:	2300      	movs	r3, #0
 8005068:	b282      	uxth	r2, r0
 800506a:	f362 030f 	bfi	r3, r2, #0, #16
 800506e:	0c00      	lsrs	r0, r0, #16
 8005070:	f360 431f 	bfi	r3, r0, #16, #16
{
 8005074:	b082      	sub	sp, #8
#endif
}
 8005076:	4618      	mov	r0, r3
 8005078:	b002      	add	sp, #8
 800507a:	4770      	bx	lr

0800507c <MCI_GetValphabeta>:
  {
    tempVal = pHandle->pFOCVars->Valphabeta;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Valphabeta);
 800507c:	6842      	ldr	r2, [r0, #4]
 800507e:	f8d2 001a 	ldr.w	r0, [r2, #26]
 8005082:	2300      	movs	r3, #0
 8005084:	b282      	uxth	r2, r0
 8005086:	f362 030f 	bfi	r3, r2, #0, #16
 800508a:	0c00      	lsrs	r0, r0, #16
 800508c:	f360 431f 	bfi	r3, r0, #16, #16
{
 8005090:	b082      	sub	sp, #8
#endif
}
 8005092:	4618      	mov	r0, r3
 8005094:	b002      	add	sp, #8
 8005096:	4770      	bx	lr

08005098 <MCI_GetTeref>:
__weak int16_t MCI_GetTeref(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? 0 : pHandle->pFOCVars->hTeref);
#else
  return (pHandle->pFOCVars->hTeref);
 8005098:	6843      	ldr	r3, [r0, #4]
#endif
}
 800509a:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 800509e:	4770      	bx	lr

080050a0 <MCI_Clear_Iqdref>:
/**
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_Clear_Iqdref(MCI_Handle_t *pHandle)
{
 80050a0:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref(pHandle->pSTC);
 80050a2:	e9d0 0400 	ldrd	r0, r4, [r0]
 80050a6:	f008 f955 	bl	800d354 <STC_GetDefaultIqdref>
 80050aa:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80050ae:	8220      	strh	r0, [r4, #16]
 80050b0:	8263      	strh	r3, [r4, #18]
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 80050b2:	bd10      	pop	{r4, pc}

080050b4 <MCM_Clarke>:
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.a);

  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 80050b4:	f644 11e6 	movw	r1, #18918	; 0x49e6
 80050b8:	b203      	sxth	r3, r0
  a_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.a);
 80050ba:	fb13 f201 	smulbb	r2, r3, r1
{
 80050be:	f3c0 400f 	ubfx	r0, r0, #16, #16
  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 80050c2:	fb10 f001 	smulbb	r0, r0, r1
#ifndef FULL_MISRA_C_COMPLIANCY_MC_MATH
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 80050c6:	4252      	negs	r2, r2
 80050c8:	eba2 0240 	sub.w	r2, r2, r0, lsl #1
#else
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) / 32768;
#endif

  /* Check saturation of Ibeta */
  if (wbeta_tmp > INT16_MAX)
 80050cc:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
{
 80050d0:	b084      	sub	sp, #16
  if (wbeta_tmp > INT16_MAX)
 80050d2:	da05      	bge.n	80050e0 <MCM_Clarke+0x2c>
 80050d4:	13d1      	asrs	r1, r2, #15
  {
    hbeta_tmp = INT16_MAX;
  }
  else if (wbeta_tmp < (-32768))
 80050d6:	f511 4f00 	cmn.w	r1, #32768	; 0x8000
 80050da:	da0c      	bge.n	80050f6 <MCM_Clarke+0x42>
 80050dc:	4a09      	ldr	r2, [pc, #36]	; (8005104 <MCM_Clarke+0x50>)
 80050de:	e001      	b.n	80050e4 <MCM_Clarke+0x30>
 80050e0:	f647 72ff 	movw	r2, #32767	; 0x7fff
  else
  {
    /* Nothing to do */
  }

  return (Output);
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	2000      	movs	r0, #0
 80050e8:	f363 000f 	bfi	r0, r3, #0, #16
 80050ec:	b293      	uxth	r3, r2
 80050ee:	f363 401f 	bfi	r0, r3, #16, #16
}
 80050f2:	b004      	add	sp, #16
 80050f4:	4770      	bx	lr
    hbeta_tmp = ((int16_t)wbeta_tmp);
 80050f6:	4803      	ldr	r0, [pc, #12]	; (8005104 <MCM_Clarke+0x50>)
 80050f8:	b20a      	sxth	r2, r1
 80050fa:	4282      	cmp	r2, r0
 80050fc:	bfb8      	it	lt
 80050fe:	4602      	movlt	r2, r0
 8005100:	e7f0      	b.n	80050e4 <MCM_Clarke+0x30>
 8005102:	bf00      	nop
 8005104:	ffff8001 	.word	0xffff8001

08005108 <MCM_Trig_Functions>:
  } CosSin;
  //cstat +MISRAC2012-Rule-19.2
  /* Configure CORDIC */
  /* Misra  violation Rule 11.4 A�Conversion�should�not�be�performed�between�a�
   * pointer�to�object and an integer type */
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 8005108:	4b09      	ldr	r3, [pc, #36]	; (8005130 <MCM_Trig_Functions+0x28>)
  /* Misra  violation Rule�11.4 A�Conversion�should�not�be�performed�between�a
   * pointer�to�object and an integer type */
  LL_CORDIC_WriteData(CORDIC, ((uint32_t)0x7FFF0000) + ((uint32_t)hAngle));
 800510a:	f100 40ff 	add.w	r0, r0, #2139095040	; 0x7f800000
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 800510e:	f04f 1260 	mov.w	r2, #6291552	; 0x600060
  LL_CORDIC_WriteData(CORDIC, ((uint32_t)0x7FFF0000) + ((uint32_t)hAngle));
 8005112:	f500 00fe 	add.w	r0, r0, #8323072	; 0x7f0000
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 8005116:	601a      	str	r2, [r3, #0]
  * @param  InData 0 .. 0xFFFFFFFF : 32-bit value to be provided as input data for CORDIC processing.
  * @retval None
  */
__STATIC_INLINE void LL_CORDIC_WriteData(CORDIC_TypeDef *CORDICx, uint32_t InData)
{
  WRITE_REG(CORDICx->WDATA, InData);
 8005118:	6058      	str	r0, [r3, #4]
  * @param  CORDICx CORDIC Instance
  * @retval 32-bit output data of CORDIC processing.
  */
__STATIC_INLINE uint32_t LL_CORDIC_ReadData(CORDIC_TypeDef *CORDICx)
{
  return (uint32_t)(READ_REG(CORDICx->RDATA));
 800511a:	689b      	ldr	r3, [r3, #8]
  /* Read angle */
  /* Misra  violation Rule�11.4 A�Conversion�should�not�be�performed between�a
   * pointer�to object and an integer type */
  CosSin.CordicRdata = LL_CORDIC_ReadData(CORDIC);
  return (CosSin.Components); //cstat !UNION-type-punning
 800511c:	2000      	movs	r0, #0
 800511e:	b29a      	uxth	r2, r3
 8005120:	f362 000f 	bfi	r0, r2, #0, #16
 8005124:	0c1b      	lsrs	r3, r3, #16
{
 8005126:	b082      	sub	sp, #8
  return (CosSin.Components); //cstat !UNION-type-punning
 8005128:	f363 401f 	bfi	r0, r3, #16, #16
}
 800512c:	b002      	add	sp, #8
 800512e:	4770      	bx	lr
 8005130:	40020c00 	.word	0x40020c00

08005134 <MCM_Park>:
{
 8005134:	b530      	push	{r4, r5, lr}
 8005136:	b085      	sub	sp, #20
 8005138:	4604      	mov	r4, r0
 800513a:	4605      	mov	r5, r0
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 800513c:	4608      	mov	r0, r1
{
 800513e:	9401      	str	r4, [sp, #4]
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 8005140:	f7ff ffe2 	bl	8005108 <MCM_Trig_Functions>
 8005144:	b22d      	sxth	r5, r5
 8005146:	b201      	sxth	r1, r0
 8005148:	1424      	asrs	r4, r4, #16
 800514a:	1400      	asrs	r0, r0, #16
  q_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hCos);
 800514c:	fb05 f301 	mul.w	r3, r5, r1
  wqd_tmp = (q_tmp_1 - q_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8005150:	fb04 3310 	mls	r3, r4, r0, r3
  if (wqd_tmp > INT16_MAX)
 8005154:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005158:	da05      	bge.n	8005166 <MCM_Park+0x32>
 800515a:	13da      	asrs	r2, r3, #15
  else if (wqd_tmp < (-32768))
 800515c:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
 8005160:	da22      	bge.n	80051a8 <MCM_Park+0x74>
 8005162:	4a14      	ldr	r2, [pc, #80]	; (80051b4 <MCM_Park+0x80>)
 8005164:	e001      	b.n	800516a <MCM_Park+0x36>
 8005166:	f647 72ff 	movw	r2, #32767	; 0x7fff
  d_tmp_2 = Input.beta * ((int32_t )Local_Vector_Components.hCos);
 800516a:	fb01 f404 	mul.w	r4, r1, r4
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800516e:	fb05 4400 	mla	r4, r5, r0, r4
  if (wqd_tmp > INT16_MAX)
 8005172:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8005176:	ea4f 33e4 	mov.w	r3, r4, asr #15
  if (wqd_tmp > INT16_MAX)
 800517a:	da04      	bge.n	8005186 <MCM_Park+0x52>
  else if (wqd_tmp < (-32768))
 800517c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8005180:	da0c      	bge.n	800519c <MCM_Park+0x68>
 8005182:	4b0c      	ldr	r3, [pc, #48]	; (80051b4 <MCM_Park+0x80>)
 8005184:	e001      	b.n	800518a <MCM_Park+0x56>
 8005186:	f647 73ff 	movw	r3, #32767	; 0x7fff
  return (Output);
 800518a:	b292      	uxth	r2, r2
 800518c:	2000      	movs	r0, #0
 800518e:	f362 000f 	bfi	r0, r2, #0, #16
 8005192:	b29b      	uxth	r3, r3
 8005194:	f363 401f 	bfi	r0, r3, #16, #16
}
 8005198:	b005      	add	sp, #20
 800519a:	bd30      	pop	{r4, r5, pc}
    hqd_tmp = ((int16_t)wqd_tmp);
 800519c:	4905      	ldr	r1, [pc, #20]	; (80051b4 <MCM_Park+0x80>)
 800519e:	b21b      	sxth	r3, r3
 80051a0:	428b      	cmp	r3, r1
 80051a2:	bfb8      	it	lt
 80051a4:	460b      	movlt	r3, r1
 80051a6:	e7f0      	b.n	800518a <MCM_Park+0x56>
    hqd_tmp = ((int16_t)wqd_tmp);
 80051a8:	4b02      	ldr	r3, [pc, #8]	; (80051b4 <MCM_Park+0x80>)
 80051aa:	b212      	sxth	r2, r2
 80051ac:	429a      	cmp	r2, r3
 80051ae:	bfb8      	it	lt
 80051b0:	461a      	movlt	r2, r3
 80051b2:	e7da      	b.n	800516a <MCM_Park+0x36>
 80051b4:	ffff8001 	.word	0xffff8001

080051b8 <MCM_Rev_Park>:
{
 80051b8:	b530      	push	{r4, r5, lr}
 80051ba:	b085      	sub	sp, #20
 80051bc:	4604      	mov	r4, r0
 80051be:	4605      	mov	r5, r0
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 80051c0:	4608      	mov	r0, r1
{
 80051c2:	9401      	str	r4, [sp, #4]
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 80051c4:	f7ff ffa0 	bl	8005108 <MCM_Trig_Functions>
 80051c8:	1424      	asrs	r4, r4, #16
 80051ca:	1402      	asrs	r2, r0, #16
 80051cc:	b22d      	sxth	r5, r5
 80051ce:	b200      	sxth	r0, r0
  alpha_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hSin);
 80051d0:	fb04 f302 	mul.w	r3, r4, r2
  Output.alpha = (int16_t)(((alpha_tmp1) + (alpha_tmp2)) >> 15);
 80051d4:	fb05 3300 	mla	r3, r5, r0, r3
  beta_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hCos);
 80051d8:	fb00 f404 	mul.w	r4, r0, r4
  Output.beta = (int16_t)((beta_tmp2 - beta_tmp1) >> 15);
 80051dc:	fb05 4412 	mls	r4, r5, r2, r4
  return (Output);
 80051e0:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 80051e4:	2000      	movs	r0, #0
 80051e6:	f363 000f 	bfi	r0, r3, #0, #16
 80051ea:	f3c4 34cf 	ubfx	r4, r4, #15, #16
 80051ee:	f364 401f 	bfi	r0, r4, #16, #16
}
 80051f2:	b005      	add	sp, #20
 80051f4:	bd30      	pop	{r4, r5, pc}
 80051f6:	bf00      	nop

080051f8 <MCM_Sqrt>:
  */
__weak int32_t MCM_Sqrt(int32_t wInput)
{
  int32_t wtemprootnew;

  if (wInput > 0)
 80051f8:	2800      	cmp	r0, #0
 80051fa:	dd09      	ble.n	8005210 <MCM_Sqrt+0x18>
 80051fc:	b672      	cpsid	i
  {
    uint32_t retVal;
    /* Disable Irq as sqrt is used in MF and HF task */
    __disable_irq();
    /* Configure CORDIC */
    WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_SQRT);
 80051fe:	4b05      	ldr	r3, [pc, #20]	; (8005214 <MCM_Sqrt+0x1c>)
 8005200:	f240 1269 	movw	r2, #361	; 0x169
 8005204:	601a      	str	r2, [r3, #0]
  WRITE_REG(CORDICx->WDATA, InData);
 8005206:	6058      	str	r0, [r3, #4]
  return (uint32_t)(READ_REG(CORDICx->RDATA));
 8005208:	6898      	ldr	r0, [r3, #8]
    LL_CORDIC_WriteData(CORDIC, ((uint32_t)wInput));
    /* Read sqrt and return */
#ifndef FULL_MISRA_C_COMPLIANCY_MC_MATH
    retVal = (LL_CORDIC_ReadData(CORDIC)) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800520a:	0bc0      	lsrs	r0, r0, #15
  __ASM volatile ("cpsie i" : : : "memory");
 800520c:	b662      	cpsie	i
}
 800520e:	4770      	bx	lr
    __enable_irq();

  }
  else
  {
    wtemprootnew = (int32_t)0;
 8005210:	2000      	movs	r0, #0
  }

  return (wtemprootnew);
}
 8005212:	4770      	bx	lr
 8005214:	40020c00 	.word	0x40020c00

08005218 <MCM_floatToIntBit>:
  * @brief  This function codify a floating point number into the relative 32bit integer.
  * @param  float Floating point number to be coded.
  * @retval uint32_t Coded 32bit integer.
  */
__weak uint32_t MCM_floatToIntBit( float_t x ) //cstat !MISRAC2012-Dir-4.6_a
{
 8005218:	b082      	sub	sp, #8
 800521a:	ed8d 0a01 	vstr	s0, [sp, #4]
  const uint32_t *pInt;
  pInt = (uint32_t *)(&x); //cstat !MISRAC2012-Rule-11.3
  return (*pInt);
 800521e:	9801      	ldr	r0, [sp, #4]
}
 8005220:	b002      	add	sp, #8
 8005222:	4770      	bx	lr

08005224 <FOC_Clear>:
  ab_t NULL_ab = {((int16_t)0), ((int16_t)0)};
  qd_t NULL_qd = {((int16_t)0), ((int16_t)0)};
  alphabeta_t NULL_alphabeta = {((int16_t)0), ((int16_t)0)};

  FOCVars[bMotor].Iab = NULL_ab;
  FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
 8005224:	2226      	movs	r2, #38	; 0x26
{
 8005226:	b538      	push	{r3, r4, r5, lr}
 8005228:	fb00 f202 	mul.w	r2, r0, r2
 800522c:	4b15      	ldr	r3, [pc, #84]	; (8005284 <FOC_Clear+0x60>)
  FOCVars[bMotor].Iab = NULL_ab;
 800522e:	2400      	movs	r4, #0
 8005230:	509c      	str	r4, [r3, r2]
{
 8005232:	4605      	mov	r5, r0
 8005234:	f102 0108 	add.w	r1, r2, #8
 8005238:	1898      	adds	r0, r3, r2
 800523a:	3210      	adds	r2, #16
 800523c:	4419      	add	r1, r3
 800523e:	4413      	add	r3, r2
  FOCVars[bMotor].hTeref = (int16_t)0;
  FOCVars[bMotor].Vqd = NULL_qd;
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8005240:	4a11      	ldr	r2, [pc, #68]	; (8005288 <FOC_Clear+0x64>)
  FOCVars[bMotor].Iab = NULL_ab;
 8005242:	6044      	str	r4, [r0, #4]
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8005244:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
  FOCVars[bMotor].Iqd = NULL_qd;
 8005248:	604c      	str	r4, [r1, #4]
 800524a:	608c      	str	r4, [r1, #8]
  FOCVars[bMotor].Vqd = NULL_qd;
 800524c:	f8c3 4006 	str.w	r4, [r3, #6]
 8005250:	f8c3 400a 	str.w	r4, [r3, #10]
 8005254:	f8c3 400e 	str.w	r4, [r3, #14]
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8005258:	4621      	mov	r1, r4
 800525a:	f006 fd3f 	bl	800bcdc <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], ((int32_t)0));
 800525e:	4b0b      	ldr	r3, [pc, #44]	; (800528c <FOC_Clear+0x68>)
 8005260:	4621      	mov	r1, r4
 8005262:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005266:	f006 fd39 	bl	800bcdc <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 800526a:	4b09      	ldr	r3, [pc, #36]	; (8005290 <FOC_Clear+0x6c>)
 800526c:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005270:	f007 ffe0 	bl	800d234 <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8005274:	4b07      	ldr	r3, [pc, #28]	; (8005294 <FOC_Clear+0x70>)
 8005276:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 800527a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 800527e:	f001 b96b 	b.w	8006558 <PWMC_SwitchOffPWM>
 8005282:	bf00      	nop
 8005284:	200022cc 	.word	0x200022cc
 8005288:	200009e4 	.word	0x200009e4
 800528c:	200009e0 	.word	0x200009e0
 8005290:	200009e8 	.word	0x200009e8
 8005294:	20002300 	.word	0x20002300

08005298 <MCboot>:
{
 8005298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800529c:	b087      	sub	sp, #28
  if (MC_NULL == pMCIList)
 800529e:	9003      	str	r0, [sp, #12]
 80052a0:	2800      	cmp	r0, #0
 80052a2:	f000 809d 	beq.w	80053e0 <MCboot+0x148>
    bMCBootCompleted = (uint8_t )0;
 80052a6:	4a50      	ldr	r2, [pc, #320]	; (80053e8 <MCboot+0x150>)
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 80052a8:	4f50      	ldr	r7, [pc, #320]	; (80053ec <MCboot+0x154>)
 80052aa:	4851      	ldr	r0, [pc, #324]	; (80053f0 <MCboot+0x158>)
    PID_HandleInit(&PIDSpeedHandle_M1);
 80052ac:	f8df 918c 	ldr.w	r9, [pc, #396]	; 800543c <MCboot+0x1a4>
    STO_PLL_Init (&STO_PLL_M1);
 80052b0:	f8df 818c 	ldr.w	r8, [pc, #396]	; 8005440 <MCboot+0x1a8>
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 80052b4:	6038      	str	r0, [r7, #0]
    bMCBootCompleted = (uint8_t )0;
 80052b6:	2600      	movs	r6, #0
 80052b8:	7016      	strb	r6, [r2, #0]
    R3_1_Init(&PWM_Handle_M1);
 80052ba:	f007 f8eb 	bl	800c494 <R3_1_Init>
    ASPEP_start(&aspepOverUartA);
 80052be:	484d      	ldr	r0, [pc, #308]	; (80053f4 <MCboot+0x15c>)
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &STO_PLL_M1._Super);
 80052c0:	4d4d      	ldr	r5, [pc, #308]	; (80053f8 <MCboot+0x160>)
    VSS_Init(&VirtualSpeedSensorM1);
 80052c2:	f8df a180 	ldr.w	sl, [pc, #384]	; 8005444 <MCboot+0x1ac>
    RVBS_Init(&BusVoltageSensor_M1);
 80052c6:	f8df b180 	ldr.w	fp, [pc, #384]	; 8005448 <MCboot+0x1b0>
    pMPM[M1]->pFOCVars = &FOCVars[M1];
 80052ca:	4c4c      	ldr	r4, [pc, #304]	; (80053fc <MCboot+0x164>)
    ASPEP_start(&aspepOverUartA);
 80052cc:	f7fe ff46 	bl	800415c <ASPEP_start>
    startTimers();
 80052d0:	f006 fdba 	bl	800be48 <startTimers>
    PID_HandleInit(&PIDSpeedHandle_M1);
 80052d4:	4648      	mov	r0, r9
 80052d6:	f006 fced 	bl	800bcb4 <PID_HandleInit>
    STO_PLL_Init (&STO_PLL_M1);
 80052da:	4640      	mov	r0, r8
 80052dc:	f008 fa46 	bl	800d76c <STO_PLL_Init>
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &STO_PLL_M1._Super);
 80052e0:	4642      	mov	r2, r8
 80052e2:	4649      	mov	r1, r9
 80052e4:	6828      	ldr	r0, [r5, #0]
 80052e6:	f007 ff8b 	bl	800d200 <STC_Init>
    VSS_Init(&VirtualSpeedSensorM1);
 80052ea:	4650      	mov	r0, sl
 80052ec:	f008 fb5c 	bl	800d9a8 <VSS_Init>
    RUC_Init(&RevUpControlM1, pSTC[M1], &VirtualSpeedSensorM1, &STO_M1, pwmcHandle[M1]);
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	6829      	ldr	r1, [r5, #0]
 80052f4:	4842      	ldr	r0, [pc, #264]	; (8005400 <MCboot+0x168>)
 80052f6:	9300      	str	r3, [sp, #0]
 80052f8:	4652      	mov	r2, sl
 80052fa:	4b42      	ldr	r3, [pc, #264]	; (8005404 <MCboot+0x16c>)
 80052fc:	f007 fe2c 	bl	800cf58 <RUC_Init>
    PID_HandleInit(&PIDIqHandle_M1);
 8005300:	4841      	ldr	r0, [pc, #260]	; (8005408 <MCboot+0x170>)
 8005302:	f006 fcd7 	bl	800bcb4 <PID_HandleInit>
    PID_HandleInit(&PIDIdHandle_M1);
 8005306:	4841      	ldr	r0, [pc, #260]	; (800540c <MCboot+0x174>)
 8005308:	f006 fcd4 	bl	800bcb4 <PID_HandleInit>
    (void)RCM_RegisterRegConv(&VbusRegConv_M1);
 800530c:	4840      	ldr	r0, [pc, #256]	; (8005410 <MCboot+0x178>)
 800530e:	f002 fc9f 	bl	8007c50 <RCM_RegisterRegConv>
    RVBS_Init(&BusVoltageSensor_M1);
 8005312:	4658      	mov	r0, fp
 8005314:	f007 fd38 	bl	800cd88 <RVBS_Init>
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 8005318:	4b3e      	ldr	r3, [pc, #248]	; (8005414 <MCboot+0x17c>)
    NTC_Init(&TempSensor_M1);
 800531a:	483f      	ldr	r0, [pc, #252]	; (8005418 <MCboot+0x180>)
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f8c3 b00c 	str.w	fp, [r3, #12]
    pMPM[M1]->pFOCVars = &FOCVars[M1];
 8005322:	609c      	str	r4, [r3, #8]
    NTC_Init(&TempSensor_M1);
 8005324:	f006 fca8 	bl	800bc78 <NTC_Init>
    pREMNG[M1] = &RampExtMngrHFParamsM1;
 8005328:	4b3c      	ldr	r3, [pc, #240]	; (800541c <MCboot+0x184>)
 800532a:	483d      	ldr	r0, [pc, #244]	; (8005420 <MCboot+0x188>)
 800532c:	6018      	str	r0, [r3, #0]
    REMNG_Init(pREMNG[M1]);
 800532e:	f007 fd85 	bl	800ce3c <REMNG_Init>
    SCC.pPIDIq = pPIDIq[M1];
 8005332:	4b3c      	ldr	r3, [pc, #240]	; (8005424 <MCboot+0x18c>)
    SCC.pPWMC = pwmcHandle[M1];
 8005334:	483c      	ldr	r0, [pc, #240]	; (8005428 <MCboot+0x190>)
    SCC.pPIDIq = pPIDIq[M1];
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	6183      	str	r3, [r0, #24]
    SCC.pPIDId = pPIDId[M1];
 800533a:	4b3c      	ldr	r3, [pc, #240]	; (800542c <MCboot+0x194>)
    SCC.pVBS = &BusVoltageSensor_M1;
 800533c:	f8c0 b004 	str.w	fp, [r0, #4]
    SCC.pPIDId = pPIDId[M1];
 8005340:	681b      	ldr	r3, [r3, #0]
    SCC.pOTT = &OTT;
 8005342:	f8df b108 	ldr.w	fp, [pc, #264]	; 800544c <MCboot+0x1b4>
    SCC.pPIDId = pPIDId[M1];
 8005346:	61c3      	str	r3, [r0, #28]
    SCC.pPWMC = pwmcHandle[M1];
 8005348:	683b      	ldr	r3, [r7, #0]
    SCC.pRevupCtrl = &RevUpControlM1;
 800534a:	492d      	ldr	r1, [pc, #180]	; (8005400 <MCboot+0x168>)
    SCC.pCLM = &CircleLimitationM1;
 800534c:	4a38      	ldr	r2, [pc, #224]	; (8005430 <MCboot+0x198>)
    SCC.pVSS = &VirtualSpeedSensorM1;
 800534e:	f8c0 a010 	str.w	sl, [r0, #16]
    SCC.pPWMC = pwmcHandle[M1];
 8005352:	6003      	str	r3, [r0, #0]
    SCC.pMCI = &Mci[M1];
 8005354:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 8005450 <MCboot+0x1b8>
    SCC.pSTC = &SpeednTorqCtrlM1;
 8005358:	4b36      	ldr	r3, [pc, #216]	; (8005434 <MCboot+0x19c>)
    SCC.pRevupCtrl = &RevUpControlM1;
 800535a:	6201      	str	r1, [r0, #32]
    SCC.pCLM = &CircleLimitationM1;
 800535c:	6142      	str	r2, [r0, #20]
    SCC.pSTO = &STO_PLL_M1;
 800535e:	f8c0 8024 	str.w	r8, [r0, #36]	; 0x24
    SCC.pSTC = &SpeednTorqCtrlM1;
 8005362:	6283      	str	r3, [r0, #40]	; 0x28
    SCC.pFOCVars = &FOCVars[M1];
 8005364:	6084      	str	r4, [r0, #8]
    SCC.pHT = MC_NULL;
 8005366:	6306      	str	r6, [r0, #48]	; 0x30
    SCC.pOTT = &OTT;
 8005368:	f8c0 b02c 	str.w	fp, [r0, #44]	; 0x2c
    SCC.pMCI = &Mci[M1];
 800536c:	f8c0 a00c 	str.w	sl, [r0, #12]
    SCC_Init(&SCC);
 8005370:	f7fb fc02 	bl	8000b78 <SCC_Init>
    OTT.pSTC = &SpeednTorqCtrlM1;
 8005374:	4b2f      	ldr	r3, [pc, #188]	; (8005434 <MCboot+0x19c>)
 8005376:	f8cb 300c 	str.w	r3, [fp, #12]
    OTT_Init(&OTT);
 800537a:	4658      	mov	r0, fp
    OTT.pSpeedSensor = &STO_PLL_M1._Super;
 800537c:	f8cb 8000 	str.w	r8, [fp]
    OTT.pPIDSpeed = &PIDSpeedHandle_M1;
 8005380:	f8cb 9008 	str.w	r9, [fp, #8]
    OTT.pFOCVars = &FOCVars[M1];
 8005384:	f8cb 4004 	str.w	r4, [fp, #4]
    OTT_Init(&OTT);
 8005388:	f7fa ff4a 	bl	8000220 <OTT_Init>
    FOC_Clear(M1);
 800538c:	4630      	mov	r0, r6
 800538e:	f7ff ff49 	bl	8005224 <FOC_Clear>
    FOCVars[M1].bDriveInput = EXTERNAL;
 8005392:	f04f 0801 	mov.w	r8, #1
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8005396:	6828      	ldr	r0, [r5, #0]
    FOCVars[M1].bDriveInput = EXTERNAL;
 8005398:	f884 8024 	strb.w	r8, [r4, #36]	; 0x24
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 800539c:	f007 ffda 	bl	800d354 <STC_GetDefaultIqdref>
 80053a0:	6120      	str	r0, [r4, #16]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 80053a2:	6828      	ldr	r0, [r5, #0]
 80053a4:	f007 ffd6 	bl	800d354 <STC_GetDefaultIqdref>
 80053a8:	f3c0 400f 	ubfx	r0, r0, #16, #16
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 80053ac:	6829      	ldr	r1, [r5, #0]
 80053ae:	683b      	ldr	r3, [r7, #0]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 80053b0:	82a0      	strh	r0, [r4, #20]
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 80053b2:	4622      	mov	r2, r4
 80053b4:	4650      	mov	r0, sl
 80053b6:	f7ff fce9 	bl	8004d8c <MCI_Init>
   Mci[M1].pScale = &scaleParams_M1;
 80053ba:	4b1f      	ldr	r3, [pc, #124]	; (8005438 <MCboot+0x1a0>)
 80053bc:	f8ca 3018 	str.w	r3, [sl, #24]
    MCI_ExecSpeedRamp(&Mci[M1],
 80053c0:	6828      	ldr	r0, [r5, #0]
 80053c2:	f007 ffbd 	bl	800d340 <STC_GetMecSpeedRefUnitDefault>
 80053c6:	4632      	mov	r2, r6
 80053c8:	4601      	mov	r1, r0
 80053ca:	4650      	mov	r0, sl
 80053cc:	f7ff fcee 	bl	8004dac <MCI_ExecSpeedRamp>
    pMCIList[M1] = &Mci[M1];
 80053d0:	9b03      	ldr	r3, [sp, #12]
 80053d2:	f8c3 a000 	str.w	sl, [r3]
    MC_APP_BootHook();
 80053d6:	f7ff fcd5 	bl	8004d84 <MC_APP_BootHook>
    bMCBootCompleted = 1U;
 80053da:	4a03      	ldr	r2, [pc, #12]	; (80053e8 <MCboot+0x150>)
 80053dc:	f882 8000 	strb.w	r8, [r2]
}
 80053e0:	b007      	add	sp, #28
 80053e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053e6:	bf00      	nop
 80053e8:	200022f2 	.word	0x200022f2
 80053ec:	20002300 	.word	0x20002300
 80053f0:	20000158 	.word	0x20000158
 80053f4:	20000ab0 	.word	0x20000ab0
 80053f8:	200009e8 	.word	0x200009e8
 80053fc:	200022cc 	.word	0x200022cc
 8005400:	20000244 	.word	0x20000244
 8005404:	20000808 	.word	0x20000808
 8005408:	200000f0 	.word	0x200000f0
 800540c:	200000c4 	.word	0x200000c4
 8005410:	20000994 	.word	0x20000994
 8005414:	200009dc 	.word	0x200009dc
 8005418:	20000978 	.word	0x20000978
 800541c:	200022fc 	.word	0x200022fc
 8005420:	200001fc 	.word	0x200001fc
 8005424:	200009e4 	.word	0x200009e4
 8005428:	200002bc 	.word	0x200002bc
 800542c:	200009e0 	.word	0x200009e0
 8005430:	20000020 	.word	0x20000020
 8005434:	20000944 	.word	0x20000944
 8005438:	20000a50 	.word	0x20000a50
 800543c:	2000011c 	.word	0x2000011c
 8005440:	2000081c 	.word	0x2000081c
 8005444:	200009a4 	.word	0x200009a4
 8005448:	20000004 	.word	0x20000004
 800544c:	20000024 	.word	0x20000024
 8005450:	20002298 	.word	0x20002298

08005454 <FOC_InitAdditionalMethods>:
    {
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
    }
}
 8005454:	4770      	bx	lr
 8005456:	bf00      	nop

08005458 <FOC_CalcCurrRef>:
  *         MTPA algorithm(s). It must be called with the periodicity specified
  *         in oTSC parameters.
  * @param  bMotor related motor it can be M1 or M2.
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 8005458:	b510      	push	{r4, lr}

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if (INTERNAL == FOCVars[bMotor].bDriveInput)
 800545a:	4c08      	ldr	r4, [pc, #32]	; (800547c <FOC_CalcCurrRef+0x24>)
 800545c:	2326      	movs	r3, #38	; 0x26
 800545e:	fb03 4400 	mla	r4, r3, r0, r4
 8005462:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8005466:	b103      	cbz	r3, 800546a <FOC_CalcCurrRef+0x12>
    /* Nothing to do */
  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 8005468:	bd10      	pop	{r4, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 800546a:	4b05      	ldr	r3, [pc, #20]	; (8005480 <FOC_CalcCurrRef+0x28>)
 800546c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8005470:	f007 ff3c 	bl	800d2ec <STC_CalcTorqueReference>
 8005474:	83e0      	strh	r0, [r4, #30]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 8005476:	8220      	strh	r0, [r4, #16]
}
 8005478:	bd10      	pop	{r4, pc}
 800547a:	bf00      	nop
 800547c:	200022cc 	.word	0x200022cc
 8005480:	200009e8 	.word	0x200009e8

08005484 <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted.
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 8005484:	4b01      	ldr	r3, [pc, #4]	; (800548c <TSK_SetChargeBootCapDelayM1+0x8>)
 8005486:	8018      	strh	r0, [r3, #0]
}
 8005488:	4770      	bx	lr
 800548a:	bf00      	nop
 800548c:	200022f4 	.word	0x200022f4

08005490 <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise.
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hBootCapDelayCounterM1)
 8005490:	4b03      	ldr	r3, [pc, #12]	; (80054a0 <TSK_ChargeBootCapDelayHasElapsedM1+0x10>)
 8005492:	8818      	ldrh	r0, [r3, #0]
 8005494:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8005496:	fab0 f080 	clz	r0, r0
 800549a:	0940      	lsrs	r0, r0, #5
 800549c:	4770      	bx	lr
 800549e:	bf00      	nop
 80054a0:	200022f4 	.word	0x200022f4

080054a4 <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted.
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 80054a4:	4b01      	ldr	r3, [pc, #4]	; (80054ac <TSK_SetStopPermanencyTimeM1+0x8>)
 80054a6:	8018      	strh	r0, [r3, #0]
}
 80054a8:	4770      	bx	lr
 80054aa:	bf00      	nop
 80054ac:	200022f8 	.word	0x200022f8

080054b0 <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise.
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hStopPermanencyCounterM1)
 80054b0:	4b03      	ldr	r3, [pc, #12]	; (80054c0 <TSK_StopPermanencyTimeHasElapsedM1+0x10>)
 80054b2:	8818      	ldrh	r0, [r3, #0]
 80054b4:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 80054b6:	fab0 f080 	clz	r0, r0
 80054ba:	0940      	lsrs	r0, r0, #5
 80054bc:	4770      	bx	lr
 80054be:	bf00      	nop
 80054c0:	200022f8 	.word	0x200022f8

080054c4 <TSK_MediumFrequencyTaskM1>:
{
 80054c4:	b570      	push	{r4, r5, r6, lr}
 80054c6:	b082      	sub	sp, #8
  int16_t wAux = 0;
 80054c8:	2300      	movs	r3, #0
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit(&STO_PLL_M1, &wAux);
 80054ca:	4669      	mov	r1, sp
 80054cc:	48bb      	ldr	r0, [pc, #748]	; (80057bc <TSK_MediumFrequencyTaskM1+0x2f8>)
  int16_t wAux = 0;
 80054ce:	f8ad 3000 	strh.w	r3, [sp]
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit(&STO_PLL_M1, &wAux);
 80054d2:	f008 f84b 	bl	800d56c <STO_PLL_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower(pMPM[M1]);
 80054d6:	4eba      	ldr	r6, [pc, #744]	; (80057c0 <TSK_MediumFrequencyTaskM1+0x2fc>)
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 80054d8:	4cba      	ldr	r4, [pc, #744]	; (80057c4 <TSK_MediumFrequencyTaskM1+0x300>)
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit(&STO_PLL_M1, &wAux);
 80054da:	4605      	mov	r5, r0
  PQD_CalcElMotorPower(pMPM[M1]);
 80054dc:	6830      	ldr	r0, [r6, #0]
 80054de:	f006 fc79 	bl	800bdd4 <PQD_CalcElMotorPower>
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 80054e2:	4620      	mov	r0, r4
 80054e4:	f7ff fccc 	bl	8004e80 <MCI_GetCurrentFaults>
 80054e8:	b130      	cbz	r0, 80054f8 <TSK_MediumFrequencyTaskM1+0x34>
    Mci[M1].State = FAULT_NOW;
 80054ea:	230a      	movs	r3, #10
 80054ec:	77e3      	strb	r3, [r4, #31]
  SCC_MF(&SCC);
 80054ee:	48b6      	ldr	r0, [pc, #728]	; (80057c8 <TSK_MediumFrequencyTaskM1+0x304>)
 80054f0:	f7fc fb94 	bl	8001c1c <SCC_MF>
}
 80054f4:	b002      	add	sp, #8
 80054f6:	bd70      	pop	{r4, r5, r6, pc}
    if (MCI_GetOccurredFaults(&Mci[M1]) == MC_NO_FAULTS)
 80054f8:	4620      	mov	r0, r4
 80054fa:	f7ff fcbf 	bl	8004e7c <MCI_GetOccurredFaults>
 80054fe:	bb78      	cbnz	r0, 8005560 <TSK_MediumFrequencyTaskM1+0x9c>
      switch (Mci[M1].State)
 8005500:	7fe3      	ldrb	r3, [r4, #31]
 8005502:	2b14      	cmp	r3, #20
 8005504:	d8f3      	bhi.n	80054ee <TSK_MediumFrequencyTaskM1+0x2a>
 8005506:	a201      	add	r2, pc, #4	; (adr r2, 800550c <TSK_MediumFrequencyTaskM1+0x48>)
 8005508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800550c:	08005757 	.word	0x08005757
 8005510:	080054ef 	.word	0x080054ef
 8005514:	080054ef 	.word	0x080054ef
 8005518:	080054ef 	.word	0x080054ef
 800551c:	080056bb 	.word	0x080056bb
 8005520:	080054ef 	.word	0x080054ef
 8005524:	08005739 	.word	0x08005739
 8005528:	080054ef 	.word	0x080054ef
 800552c:	08005619 	.word	0x08005619
 8005530:	080054ef 	.word	0x080054ef
 8005534:	08005561 	.word	0x08005561
 8005538:	08005689 	.word	0x08005689
 800553c:	080054ef 	.word	0x080054ef
 8005540:	080054ef 	.word	0x080054ef
 8005544:	080054ef 	.word	0x080054ef
 8005548:	080054ef 	.word	0x080054ef
 800554c:	08005639 	.word	0x08005639
 8005550:	08005697 	.word	0x08005697
 8005554:	080054ef 	.word	0x080054ef
 8005558:	080055b5 	.word	0x080055b5
 800555c:	0800556f 	.word	0x0800556f
      Mci[M1].State = FAULT_OVER;
 8005560:	230b      	movs	r3, #11
  SCC_MF(&SCC);
 8005562:	4899      	ldr	r0, [pc, #612]	; (80057c8 <TSK_MediumFrequencyTaskM1+0x304>)
      Mci[M1].State = FAULT_OVER;
 8005564:	77e3      	strb	r3, [r4, #31]
  SCC_MF(&SCC);
 8005566:	f7fc fb59 	bl	8001c1c <SCC_MF>
}
 800556a:	b002      	add	sp, #8
 800556c:	bd70      	pop	{r4, r5, r6, pc}
          if (MCI_STOP == Mci[M1].DirectCommand)
 800556e:	7fa3      	ldrb	r3, [r4, #30]
 8005570:	2b05      	cmp	r3, #5
 8005572:	f000 810b 	beq.w	800578c <TSK_MediumFrequencyTaskM1+0x2c8>
            if (0 == SCC_DetectBemf(&SCC))
 8005576:	4894      	ldr	r0, [pc, #592]	; (80057c8 <TSK_MediumFrequencyTaskM1+0x304>)
 8005578:	f7fd f81c 	bl	80025b4 <SCC_DetectBemf>
 800557c:	4605      	mov	r5, r0
 800557e:	2800      	cmp	r0, #0
 8005580:	d1b5      	bne.n	80054ee <TSK_MediumFrequencyTaskM1+0x2a>
              STC_SetSpeedSensor(pSTC[M1], &VirtualSpeedSensorM1._Super);
 8005582:	4a92      	ldr	r2, [pc, #584]	; (80057cc <TSK_MediumFrequencyTaskM1+0x308>)
              FOCVars[M1].bDriveInput = EXTERNAL;
 8005584:	4b92      	ldr	r3, [pc, #584]	; (80057d0 <TSK_MediumFrequencyTaskM1+0x30c>)
              STC_SetSpeedSensor(pSTC[M1], &VirtualSpeedSensorM1._Super);
 8005586:	6810      	ldr	r0, [r2, #0]
 8005588:	4992      	ldr	r1, [pc, #584]	; (80057d4 <TSK_MediumFrequencyTaskM1+0x310>)
              FOCVars[M1].bDriveInput = EXTERNAL;
 800558a:	2201      	movs	r2, #1
 800558c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
              STC_SetSpeedSensor(pSTC[M1], &VirtualSpeedSensorM1._Super);
 8005590:	f007 fe4c 	bl	800d22c <STC_SetSpeedSensor>
               STO_PLL_Clear(&STO_PLL_M1);
 8005594:	4889      	ldr	r0, [pc, #548]	; (80057bc <TSK_MediumFrequencyTaskM1+0x2f8>)
 8005596:	f008 f8c3 	bl	800d720 <STO_PLL_Clear>
              FOC_Clear(M1);
 800559a:	4628      	mov	r0, r5
 800559c:	f7ff fe42 	bl	8005224 <FOC_Clear>
              SCC_Start(&SCC);
 80055a0:	4889      	ldr	r0, [pc, #548]	; (80057c8 <TSK_MediumFrequencyTaskM1+0x304>)
 80055a2:	f7fb fbfb 	bl	8000d9c <SCC_Start>
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 80055a6:	4b8c      	ldr	r3, [pc, #560]	; (80057d8 <TSK_MediumFrequencyTaskM1+0x314>)
 80055a8:	6818      	ldr	r0, [r3, #0]
 80055aa:	f000 ffd7 	bl	800655c <PWMC_SwitchOnPWM>
              Mci[M1].State = START;
 80055ae:	2304      	movs	r3, #4
 80055b0:	77e3      	strb	r3, [r4, #31]
 80055b2:	e79c      	b.n	80054ee <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_STOP == Mci[M1].DirectCommand)
 80055b4:	7fa3      	ldrb	r3, [r4, #30]
 80055b6:	2b05      	cmp	r3, #5
 80055b8:	f000 80e8 	beq.w	800578c <TSK_MediumFrequencyTaskM1+0x2c8>
              LoopClosed = VSS_CalcAvrgMecSpeedUnit(&VirtualSpeedSensorM1, &hForcedMecSpeedUnit);
 80055bc:	4885      	ldr	r0, [pc, #532]	; (80057d4 <TSK_MediumFrequencyTaskM1+0x310>)
 80055be:	a901      	add	r1, sp, #4
 80055c0:	f008 fa48 	bl	800da54 <VSS_CalcAvrgMecSpeedUnit>
 80055c4:	4605      	mov	r5, r0
              tempBool = VSS_TransitionEnded(&VirtualSpeedSensorM1);
 80055c6:	4883      	ldr	r0, [pc, #524]	; (80057d4 <TSK_MediumFrequencyTaskM1+0x310>)
 80055c8:	f008 faf4 	bl	800dbb4 <VSS_TransitionEnded>
              LoopClosed = LoopClosed || tempBool;
 80055cc:	2d00      	cmp	r5, #0
 80055ce:	f000 810d 	beq.w	80057ec <TSK_MediumFrequencyTaskM1+0x328>
                                    (((int32_t)FOCVars[M1].Iqdref.q * (int16_t)PID_GetKIDivisor(&PIDSpeedHandle_M1))
 80055d2:	4b7f      	ldr	r3, [pc, #508]	; (80057d0 <TSK_MediumFrequencyTaskM1+0x30c>)
 80055d4:	4881      	ldr	r0, [pc, #516]	; (80057dc <TSK_MediumFrequencyTaskM1+0x318>)
 80055d6:	f9b3 5010 	ldrsh.w	r5, [r3, #16]
 80055da:	f006 fb89 	bl	800bcf0 <PID_GetKIDivisor>
                PID_SetIntegralTerm(&PIDSpeedHandle_M1,
 80055de:	b200      	sxth	r0, r0
 80055e0:	fb00 f105 	mul.w	r1, r0, r5
 80055e4:	487d      	ldr	r0, [pc, #500]	; (80057dc <TSK_MediumFrequencyTaskM1+0x318>)
                STC_SetSpeedSensor(pSTC[M1], &STO_PLL_M1._Super); /* Observer has converged */
 80055e6:	4d79      	ldr	r5, [pc, #484]	; (80057cc <TSK_MediumFrequencyTaskM1+0x308>)
                PID_SetIntegralTerm(&PIDSpeedHandle_M1,
 80055e8:	f006 fb78 	bl	800bcdc <PID_SetIntegralTerm>
                OTT_SR(&OTT);
 80055ec:	487c      	ldr	r0, [pc, #496]	; (80057e0 <TSK_MediumFrequencyTaskM1+0x31c>)
 80055ee:	f7fb f9ad 	bl	800094c <OTT_SR>
                STC_SetSpeedSensor(pSTC[M1], &STO_PLL_M1._Super); /* Observer has converged */
 80055f2:	4972      	ldr	r1, [pc, #456]	; (80057bc <TSK_MediumFrequencyTaskM1+0x2f8>)
 80055f4:	6828      	ldr	r0, [r5, #0]
 80055f6:	f007 fe19 	bl	800d22c <STC_SetSpeedSensor>
                FOC_InitAdditionalMethods(M1);
 80055fa:	2000      	movs	r0, #0
 80055fc:	f7ff ff2a 	bl	8005454 <FOC_InitAdditionalMethods>
                FOC_CalcCurrRef(M1);
 8005600:	2000      	movs	r0, #0
 8005602:	f7ff ff29 	bl	8005458 <FOC_CalcCurrRef>
                STC_ForceSpeedReferenceToCurrentSpeed(pSTC[M1]); /* Init the reference speed to current speed */
 8005606:	6828      	ldr	r0, [r5, #0]
 8005608:	f007 feb6 	bl	800d378 <STC_ForceSpeedReferenceToCurrentSpeed>
                MCI_ExecBufferedCommands(&Mci[M1]); /* Exec the speed ramp after changing of the speed sensor */
 800560c:	486d      	ldr	r0, [pc, #436]	; (80057c4 <TSK_MediumFrequencyTaskM1+0x300>)
 800560e:	f7ff fbf7 	bl	8004e00 <MCI_ExecBufferedCommands>
                Mci[M1].State = RUN;
 8005612:	2306      	movs	r3, #6
 8005614:	77e3      	strb	r3, [r4, #31]
 8005616:	e76a      	b.n	80054ee <TSK_MediumFrequencyTaskM1+0x2a>
          if (TSK_StopPermanencyTimeHasElapsedM1())
 8005618:	f7ff ff4a 	bl	80054b0 <TSK_StopPermanencyTimeHasElapsedM1>
 800561c:	2800      	cmp	r0, #0
 800561e:	f43f af66 	beq.w	80054ee <TSK_MediumFrequencyTaskM1+0x2a>
            STC_SetSpeedSensor(pSTC[M1], &VirtualSpeedSensorM1._Super);    /* Sensor-less */
 8005622:	4b6a      	ldr	r3, [pc, #424]	; (80057cc <TSK_MediumFrequencyTaskM1+0x308>)
 8005624:	496b      	ldr	r1, [pc, #428]	; (80057d4 <TSK_MediumFrequencyTaskM1+0x310>)
 8005626:	6818      	ldr	r0, [r3, #0]
 8005628:	f007 fe00 	bl	800d22c <STC_SetSpeedSensor>
            VSS_Clear(&VirtualSpeedSensorM1); /* Reset measured speed in IDLE */
 800562c:	4869      	ldr	r0, [pc, #420]	; (80057d4 <TSK_MediumFrequencyTaskM1+0x310>)
 800562e:	f008 f9ad 	bl	800d98c <VSS_Clear>
            Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8005632:	2300      	movs	r3, #0
 8005634:	83e3      	strh	r3, [r4, #30]
 8005636:	e75a      	b.n	80054ee <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8005638:	7fa3      	ldrb	r3, [r4, #30]
 800563a:	2b05      	cmp	r3, #5
 800563c:	f000 80a6 	beq.w	800578c <TSK_MediumFrequencyTaskM1+0x2c8>
            if (TSK_ChargeBootCapDelayHasElapsedM1())
 8005640:	f7ff ff26 	bl	8005490 <TSK_ChargeBootCapDelayHasElapsedM1>
 8005644:	2800      	cmp	r0, #0
 8005646:	f43f af52 	beq.w	80054ee <TSK_MediumFrequencyTaskM1+0x2a>
              R3_1_SwitchOffPWM(pwmcHandle[M1]);
 800564a:	4d63      	ldr	r5, [pc, #396]	; (80057d8 <TSK_MediumFrequencyTaskM1+0x314>)
 800564c:	6828      	ldr	r0, [r5, #0]
 800564e:	f006 fdc9 	bl	800c1e4 <R3_1_SwitchOffPWM>
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8005652:	4a5e      	ldr	r2, [pc, #376]	; (80057cc <TSK_MediumFrequencyTaskM1+0x308>)
              FOCVars[M1].bDriveInput = EXTERNAL;
 8005654:	4b5e      	ldr	r3, [pc, #376]	; (80057d0 <TSK_MediumFrequencyTaskM1+0x30c>)
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8005656:	6810      	ldr	r0, [r2, #0]
 8005658:	495e      	ldr	r1, [pc, #376]	; (80057d4 <TSK_MediumFrequencyTaskM1+0x310>)
              FOCVars[M1].bDriveInput = EXTERNAL;
 800565a:	2201      	movs	r2, #1
 800565c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8005660:	f007 fde4 	bl	800d22c <STC_SetSpeedSensor>
              STO_PLL_Clear(&STO_PLL_M1);
 8005664:	4855      	ldr	r0, [pc, #340]	; (80057bc <TSK_MediumFrequencyTaskM1+0x2f8>)
 8005666:	f008 f85b 	bl	800d720 <STO_PLL_Clear>
              FOC_Clear( M1 );
 800566a:	2000      	movs	r0, #0
 800566c:	f7ff fdda 	bl	8005224 <FOC_Clear>
        SCC_Start(&SCC);
 8005670:	4855      	ldr	r0, [pc, #340]	; (80057c8 <TSK_MediumFrequencyTaskM1+0x304>)
 8005672:	f7fb fb93 	bl	8000d9c <SCC_Start>
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 8005676:	6828      	ldr	r0, [r5, #0]
 8005678:	f000 ff70 	bl	800655c <PWMC_SwitchOnPWM>
              Mci[M1].State = START;
 800567c:	2304      	movs	r3, #4
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 800567e:	6828      	ldr	r0, [r5, #0]
              Mci[M1].State = START;
 8005680:	77e3      	strb	r3, [r4, #31]
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 8005682:	f000 ff6b 	bl	800655c <PWMC_SwitchOnPWM>
 8005686:	e732      	b.n	80054ee <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_ACK_FAULTS == Mci[M1].DirectCommand)
 8005688:	7fa3      	ldrb	r3, [r4, #30]
 800568a:	2b02      	cmp	r3, #2
 800568c:	f47f af2f 	bne.w	80054ee <TSK_MediumFrequencyTaskM1+0x2a>
            Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8005690:	2300      	movs	r3, #0
 8005692:	83e3      	strh	r3, [r4, #30]
 8005694:	e72b      	b.n	80054ee <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8005696:	7fa3      	ldrb	r3, [r4, #30]
 8005698:	2b05      	cmp	r3, #5
 800569a:	d077      	beq.n	800578c <TSK_MediumFrequencyTaskM1+0x2c8>
            if (PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC))
 800569c:	4b4e      	ldr	r3, [pc, #312]	; (80057d8 <TSK_MediumFrequencyTaskM1+0x314>)
 800569e:	2101      	movs	r1, #1
 80056a0:	6818      	ldr	r0, [r3, #0]
 80056a2:	f000 ff5d 	bl	8006560 <PWMC_CurrentReadingCalibr>
 80056a6:	2800      	cmp	r0, #0
 80056a8:	f43f af21 	beq.w	80054ee <TSK_MediumFrequencyTaskM1+0x2a>
              if (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand)
 80056ac:	7fa3      	ldrb	r3, [r4, #30]
 80056ae:	2b03      	cmp	r3, #3
 80056b0:	f000 80be 	beq.w	8005830 <TSK_MediumFrequencyTaskM1+0x36c>
                Mci[M1].State = WAIT_STOP_MOTOR;
 80056b4:	2314      	movs	r3, #20
 80056b6:	77e3      	strb	r3, [r4, #31]
 80056b8:	e719      	b.n	80054ee <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_STOP == Mci[M1].DirectCommand)
 80056ba:	7fa3      	ldrb	r3, [r4, #30]
 80056bc:	2b05      	cmp	r3, #5
 80056be:	d065      	beq.n	800578c <TSK_MediumFrequencyTaskM1+0x2c8>
            if(! RUC_Exec(&RevUpControlM1))
 80056c0:	4848      	ldr	r0, [pc, #288]	; (80057e4 <TSK_MediumFrequencyTaskM1+0x320>)
 80056c2:	f007 fccb 	bl	800d05c <RUC_Exec>
 80056c6:	2800      	cmp	r0, #0
 80056c8:	f040 80a2 	bne.w	8005810 <TSK_MediumFrequencyTaskM1+0x34c>
            (void)VSS_CalcAvrgMecSpeedUnit(&VirtualSpeedSensorM1, &hForcedMecSpeedUnit);
 80056cc:	f10d 0102 	add.w	r1, sp, #2
 80056d0:	4840      	ldr	r0, [pc, #256]	; (80057d4 <TSK_MediumFrequencyTaskM1+0x310>)
 80056d2:	f008 f9bf 	bl	800da54 <VSS_CalcAvrgMecSpeedUnit>
              ObserverConverged = STO_PLL_IsObserverConverged(&STO_PLL_M1, &hForcedMecSpeedUnit);
 80056d6:	f10d 0102 	add.w	r1, sp, #2
 80056da:	4838      	ldr	r0, [pc, #224]	; (80057bc <TSK_MediumFrequencyTaskM1+0x2f8>)
 80056dc:	f008 f880 	bl	800d7e0 <STO_PLL_IsObserverConverged>
 80056e0:	4605      	mov	r5, r0
              STO_SetDirection(&STO_PLL_M1, (int8_t)MCI_GetImposedMotorDirection(&Mci[M1]));
 80056e2:	4838      	ldr	r0, [pc, #224]	; (80057c4 <TSK_MediumFrequencyTaskM1+0x300>)
 80056e4:	f7ff fc3a 	bl	8004f5c <MCI_GetImposedMotorDirection>
 80056e8:	b241      	sxtb	r1, r0
 80056ea:	4834      	ldr	r0, [pc, #208]	; (80057bc <TSK_MediumFrequencyTaskM1+0x2f8>)
 80056ec:	f008 f94a 	bl	800d984 <STO_SetDirection>
              (void)VSS_SetStartTransition(&VirtualSpeedSensorM1, ObserverConverged);
 80056f0:	4838      	ldr	r0, [pc, #224]	; (80057d4 <TSK_MediumFrequencyTaskM1+0x310>)
 80056f2:	4629      	mov	r1, r5
 80056f4:	f008 fa50 	bl	800db98 <VSS_SetStartTransition>
            if (ObserverConverged)
 80056f8:	2d00      	cmp	r5, #0
 80056fa:	f43f aef8 	beq.w	80054ee <TSK_MediumFrequencyTaskM1+0x2a>
              qd_t StatorCurrent = MCM_Park(FOCVars[M1].Ialphabeta, SPD_GetElAngle(&STO_PLL_M1._Super));
 80056fe:	482f      	ldr	r0, [pc, #188]	; (80057bc <TSK_MediumFrequencyTaskM1+0x2f8>)
 8005700:	4e33      	ldr	r6, [pc, #204]	; (80057d0 <TSK_MediumFrequencyTaskM1+0x30c>)
              REMNG_Init(pREMNG[M1]);
 8005702:	4d39      	ldr	r5, [pc, #228]	; (80057e8 <TSK_MediumFrequencyTaskM1+0x324>)
              qd_t StatorCurrent = MCM_Park(FOCVars[M1].Ialphabeta, SPD_GetElAngle(&STO_PLL_M1._Super));
 8005704:	f007 fd34 	bl	800d170 <SPD_GetElAngle>
 8005708:	4601      	mov	r1, r0
 800570a:	6870      	ldr	r0, [r6, #4]
 800570c:	f7ff fd12 	bl	8005134 <MCM_Park>
 8005710:	4603      	mov	r3, r0
              REMNG_Init(pREMNG[M1]);
 8005712:	6828      	ldr	r0, [r5, #0]
              qd_t StatorCurrent = MCM_Park(FOCVars[M1].Ialphabeta, SPD_GetElAngle(&STO_PLL_M1._Super));
 8005714:	9301      	str	r3, [sp, #4]
              REMNG_Init(pREMNG[M1]);
 8005716:	f007 fb91 	bl	800ce3c <REMNG_Init>
              (void)REMNG_ExecRamp(pREMNG[M1], FOCVars[M1].Iqdref.q, 0);
 800571a:	f9b6 1010 	ldrsh.w	r1, [r6, #16]
 800571e:	6828      	ldr	r0, [r5, #0]
 8005720:	2200      	movs	r2, #0
 8005722:	f007 fbd5 	bl	800ced0 <REMNG_ExecRamp>
              (void)REMNG_ExecRamp(pREMNG[M1], StatorCurrent.q, TRANSITION_DURATION);
 8005726:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 800572a:	6828      	ldr	r0, [r5, #0]
 800572c:	2219      	movs	r2, #25
 800572e:	f007 fbcf 	bl	800ced0 <REMNG_ExecRamp>
              Mci[M1].State = SWITCH_OVER;
 8005732:	2313      	movs	r3, #19
 8005734:	77e3      	strb	r3, [r4, #31]
 8005736:	e6da      	b.n	80054ee <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8005738:	7fa3      	ldrb	r3, [r4, #30]
 800573a:	2b05      	cmp	r3, #5
 800573c:	d026      	beq.n	800578c <TSK_MediumFrequencyTaskM1+0x2c8>
            MCI_ExecBufferedCommands(&Mci[M1]);
 800573e:	4821      	ldr	r0, [pc, #132]	; (80057c4 <TSK_MediumFrequencyTaskM1+0x300>)
 8005740:	f7ff fb5e 	bl	8004e00 <MCI_ExecBufferedCommands>
              FOC_CalcCurrRef(M1);
 8005744:	2000      	movs	r0, #0
 8005746:	f7ff fe87 	bl	8005458 <FOC_CalcCurrRef>
              if(!IsSpeedReliable)
 800574a:	2d00      	cmp	r5, #0
 800574c:	d06a      	beq.n	8005824 <TSK_MediumFrequencyTaskM1+0x360>
            OTT_MF(&OTT);
 800574e:	4824      	ldr	r0, [pc, #144]	; (80057e0 <TSK_MediumFrequencyTaskM1+0x31c>)
 8005750:	f7fa fdfc 	bl	800034c <OTT_MF>
 8005754:	e6cb      	b.n	80054ee <TSK_MediumFrequencyTaskM1+0x2a>
          if ((MCI_START == Mci[M1].DirectCommand) || (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand))
 8005756:	7fa5      	ldrb	r5, [r4, #30]
 8005758:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
 800575c:	2d01      	cmp	r5, #1
 800575e:	f47f aec6 	bne.w	80054ee <TSK_MediumFrequencyTaskM1+0x2a>
              RUC_Clear(&RevUpControlM1, MCI_GetImposedMotorDirection(&Mci[M1]));
 8005762:	4818      	ldr	r0, [pc, #96]	; (80057c4 <TSK_MediumFrequencyTaskM1+0x300>)
            if (pwmcHandle[M1]->offsetCalibStatus == false)
 8005764:	4e1c      	ldr	r6, [pc, #112]	; (80057d8 <TSK_MediumFrequencyTaskM1+0x314>)
              RUC_Clear(&RevUpControlM1, MCI_GetImposedMotorDirection(&Mci[M1]));
 8005766:	f7ff fbf9 	bl	8004f5c <MCI_GetImposedMotorDirection>
 800576a:	4601      	mov	r1, r0
 800576c:	481d      	ldr	r0, [pc, #116]	; (80057e4 <TSK_MediumFrequencyTaskM1+0x320>)
 800576e:	f007 fc31 	bl	800cfd4 <RUC_Clear>
            if (pwmcHandle[M1]->offsetCalibStatus == false)
 8005772:	6830      	ldr	r0, [r6, #0]
 8005774:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
 8005778:	2900      	cmp	r1, #0
 800577a:	d13b      	bne.n	80057f4 <TSK_MediumFrequencyTaskM1+0x330>
              (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_START);
 800577c:	f000 fef0 	bl	8006560 <PWMC_CurrentReadingCalibr>
              Mci[M1].State = OFFSET_CALIB;
 8005780:	2311      	movs	r3, #17
            OTT_Clear(&OTT);
 8005782:	4817      	ldr	r0, [pc, #92]	; (80057e0 <TSK_MediumFrequencyTaskM1+0x31c>)
              Mci[M1].State = OFFSET_CALIB;
 8005784:	77e3      	strb	r3, [r4, #31]
            OTT_Clear(&OTT);
 8005786:	f7fa fdc5 	bl	8000314 <OTT_Clear>
 800578a:	e6b0      	b.n	80054ee <TSK_MediumFrequencyTaskM1+0x2a>
    R3_1_SwitchOffPWM(pwmcHandle[motor]);
 800578c:	4b12      	ldr	r3, [pc, #72]	; (80057d8 <TSK_MediumFrequencyTaskM1+0x314>)
 800578e:	6818      	ldr	r0, [r3, #0]
 8005790:	f006 fd28 	bl	800c1e4 <R3_1_SwitchOffPWM>
  SCC_Stop(&SCC);
 8005794:	480c      	ldr	r0, [pc, #48]	; (80057c8 <TSK_MediumFrequencyTaskM1+0x304>)
 8005796:	f7fb fb2f 	bl	8000df8 <SCC_Stop>
  OTT_Stop(&OTT);
 800579a:	4811      	ldr	r0, [pc, #68]	; (80057e0 <TSK_MediumFrequencyTaskM1+0x31c>)
 800579c:	f7fa fdd1 	bl	8000342 <OTT_Stop>
  FOC_Clear(motor);
 80057a0:	2000      	movs	r0, #0
 80057a2:	f7ff fd3f 	bl	8005224 <FOC_Clear>
  PQD_Clear(pMPM[motor]);
 80057a6:	6830      	ldr	r0, [r6, #0]
 80057a8:	f006 fb30 	bl	800be0c <PQD_Clear>
  TSK_SetStopPermanencyTimeM1(STOPPERMANENCY_TICKS);
 80057ac:	f44f 7048 	mov.w	r0, #800	; 0x320
 80057b0:	f7ff fe78 	bl	80054a4 <TSK_SetStopPermanencyTimeM1>
  Mci[motor].State = STOP;
 80057b4:	2308      	movs	r3, #8
 80057b6:	77e3      	strb	r3, [r4, #31]
}
 80057b8:	e699      	b.n	80054ee <TSK_MediumFrequencyTaskM1+0x2a>
 80057ba:	bf00      	nop
 80057bc:	2000081c 	.word	0x2000081c
 80057c0:	200009dc 	.word	0x200009dc
 80057c4:	20002298 	.word	0x20002298
 80057c8:	200002bc 	.word	0x200002bc
 80057cc:	200009e8 	.word	0x200009e8
 80057d0:	200022cc 	.word	0x200022cc
 80057d4:	200009a4 	.word	0x200009a4
 80057d8:	20002300 	.word	0x20002300
 80057dc:	2000011c 	.word	0x2000011c
 80057e0:	20000024 	.word	0x20000024
 80057e4:	20000244 	.word	0x20000244
 80057e8:	200022fc 	.word	0x200022fc
              LoopClosed = LoopClosed || tempBool;
 80057ec:	2800      	cmp	r0, #0
 80057ee:	f47f aef0 	bne.w	80055d2 <TSK_MediumFrequencyTaskM1+0x10e>
 80057f2:	e67c      	b.n	80054ee <TSK_MediumFrequencyTaskM1+0x2a>
              (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 80057f4:	4629      	mov	r1, r5
              pwmcHandle[M1]->OffCalibrWaitTimeCounter = 1u;
 80057f6:	f8a0 5060 	strh.w	r5, [r0, #96]	; 0x60
              (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 80057fa:	f000 feb1 	bl	8006560 <PWMC_CurrentReadingCalibr>
              R3_1_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 80057fe:	6830      	ldr	r0, [r6, #0]
 8005800:	2100      	movs	r1, #0
 8005802:	f006 fda9 	bl	800c358 <R3_1_TurnOnLowSides>
              TSK_SetChargeBootCapDelayM1(M1_CHARGE_BOOT_CAP_TICKS);
 8005806:	2014      	movs	r0, #20
 8005808:	f7ff fe3c 	bl	8005484 <TSK_SetChargeBootCapDelayM1>
 800580c:	2310      	movs	r3, #16
 800580e:	e7b8      	b.n	8005782 <TSK_MediumFrequencyTaskM1+0x2be>
              IqdRef.q = STC_CalcTorqueReference(pSTC[M1]);
 8005810:	4b0c      	ldr	r3, [pc, #48]	; (8005844 <TSK_MediumFrequencyTaskM1+0x380>)
 8005812:	6818      	ldr	r0, [r3, #0]
 8005814:	f007 fd6a 	bl	800d2ec <STC_CalcTorqueReference>
              IqdRef.d = FOCVars[M1].UserIdref;
 8005818:	4b0b      	ldr	r3, [pc, #44]	; (8005848 <TSK_MediumFrequencyTaskM1+0x384>)
 800581a:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
              FOCVars[M1].Iqdref = IqdRef;
 800581e:	8218      	strh	r0, [r3, #16]
 8005820:	825a      	strh	r2, [r3, #18]
 8005822:	e753      	b.n	80056cc <TSK_MediumFrequencyTaskM1+0x208>
                MCI_FaultProcessing(&Mci[M1], MC_SPEED_FDBK, 0);
 8005824:	4809      	ldr	r0, [pc, #36]	; (800584c <TSK_MediumFrequencyTaskM1+0x388>)
 8005826:	462a      	mov	r2, r5
 8005828:	2120      	movs	r1, #32
 800582a:	f7ff fadd 	bl	8004de8 <MCI_FaultProcessing>
 800582e:	e78e      	b.n	800574e <TSK_MediumFrequencyTaskM1+0x28a>
                FOC_Clear(M1);
 8005830:	2000      	movs	r0, #0
 8005832:	f7ff fcf7 	bl	8005224 <FOC_Clear>
                PQD_Clear(pMPM[M1]);
 8005836:	6830      	ldr	r0, [r6, #0]
 8005838:	f006 fae8 	bl	800be0c <PQD_Clear>
                Mci[M1].DirectCommand = MCI_NO_COMMAND;
 800583c:	2300      	movs	r3, #0
 800583e:	83e3      	strh	r3, [r4, #30]
 8005840:	e655      	b.n	80054ee <TSK_MediumFrequencyTaskM1+0x2a>
 8005842:	bf00      	nop
 8005844:	200009e8 	.word	0x200009e8
 8005848:	200022cc 	.word	0x200022cc
 800584c:	20002298 	.word	0x20002298

08005850 <MC_Scheduler>:
  if (((uint8_t)1) == bMCBootCompleted)
 8005850:	4b1d      	ldr	r3, [pc, #116]	; (80058c8 <MC_Scheduler+0x78>)
 8005852:	781b      	ldrb	r3, [r3, #0]
 8005854:	2b01      	cmp	r3, #1
 8005856:	d000      	beq.n	800585a <MC_Scheduler+0xa>
 8005858:	4770      	bx	lr
{
 800585a:	b570      	push	{r4, r5, r6, lr}
    if(hMFTaskCounterM1 > 0u)
 800585c:	4c1b      	ldr	r4, [pc, #108]	; (80058cc <MC_Scheduler+0x7c>)
 800585e:	8823      	ldrh	r3, [r4, #0]
 8005860:	b19b      	cbz	r3, 800588a <MC_Scheduler+0x3a>
      hMFTaskCounterM1--;
 8005862:	3b01      	subs	r3, #1
 8005864:	b29b      	uxth	r3, r3
    if(hBootCapDelayCounterM1 > 0U)
 8005866:	4a1a      	ldr	r2, [pc, #104]	; (80058d0 <MC_Scheduler+0x80>)
      hMFTaskCounterM1--;
 8005868:	8023      	strh	r3, [r4, #0]
    if(hBootCapDelayCounterM1 > 0U)
 800586a:	8813      	ldrh	r3, [r2, #0]
 800586c:	b29b      	uxth	r3, r3
 800586e:	b11b      	cbz	r3, 8005878 <MC_Scheduler+0x28>
      hBootCapDelayCounterM1--;
 8005870:	8813      	ldrh	r3, [r2, #0]
 8005872:	3b01      	subs	r3, #1
 8005874:	b29b      	uxth	r3, r3
 8005876:	8013      	strh	r3, [r2, #0]
    if(hStopPermanencyCounterM1 > 0U)
 8005878:	4a16      	ldr	r2, [pc, #88]	; (80058d4 <MC_Scheduler+0x84>)
 800587a:	8813      	ldrh	r3, [r2, #0]
 800587c:	b29b      	uxth	r3, r3
 800587e:	b11b      	cbz	r3, 8005888 <MC_Scheduler+0x38>
      hStopPermanencyCounterM1--;
 8005880:	8813      	ldrh	r3, [r2, #0]
 8005882:	3b01      	subs	r3, #1
 8005884:	b29b      	uxth	r3, r3
 8005886:	8013      	strh	r3, [r2, #0]
}
 8005888:	bd70      	pop	{r4, r5, r6, pc}
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess(MCP_Over_UartA.pTransportLayer,
 800588a:	4d13      	ldr	r5, [pc, #76]	; (80058d8 <MC_Scheduler+0x88>)
      TSK_MediumFrequencyTaskM1();
 800588c:	f7ff fe1a 	bl	80054c4 <TSK_MediumFrequencyTaskM1>
      MC_APP_PostMediumFrequencyHook_M1();
 8005890:	f7ff fa7a 	bl	8004d88 <MC_APP_PostMediumFrequencyHook_M1>
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess(MCP_Over_UartA.pTransportLayer,
 8005894:	4629      	mov	r1, r5
 8005896:	f851 0b0c 	ldr.w	r0, [r1], #12
 800589a:	6883      	ldr	r3, [r0, #8]
 800589c:	4798      	blx	r3
 800589e:	6068      	str	r0, [r5, #4]
      if ( 0U == MCP_Over_UartA.rxBuffer)
 80058a0:	b130      	cbz	r0, 80058b0 <MC_Scheduler+0x60>
        if (0U == MCP_Over_UartA.pTransportLayer->fGetBuffer(MCP_Over_UartA.pTransportLayer,
 80058a2:	4629      	mov	r1, r5
 80058a4:	220a      	movs	r2, #10
 80058a6:	f851 0b08 	ldr.w	r0, [r1], #8
 80058aa:	6803      	ldr	r3, [r0, #0]
 80058ac:	4798      	blx	r3
 80058ae:	b908      	cbnz	r0, 80058b4 <MC_Scheduler+0x64>
{
 80058b0:	2301      	movs	r3, #1
 80058b2:	e7d8      	b.n	8005866 <MC_Scheduler+0x16>
          MCP_ReceivedPacket(&MCP_Over_UartA);
 80058b4:	4628      	mov	r0, r5
 80058b6:	f000 f9eb 	bl	8005c90 <MCP_ReceivedPacket>
          MCP_Over_UartA.pTransportLayer->fSendPacket(MCP_Over_UartA.pTransportLayer, MCP_Over_UartA.txBuffer,
 80058ba:	6828      	ldr	r0, [r5, #0]
 80058bc:	89ea      	ldrh	r2, [r5, #14]
 80058be:	6846      	ldr	r6, [r0, #4]
 80058c0:	68a9      	ldr	r1, [r5, #8]
 80058c2:	230a      	movs	r3, #10
 80058c4:	47b0      	blx	r6
 80058c6:	e7f3      	b.n	80058b0 <MC_Scheduler+0x60>
 80058c8:	200022f2 	.word	0x200022f2
 80058cc:	200022f6 	.word	0x200022f6
 80058d0:	200022f4 	.word	0x200022f4
 80058d4:	200022f8 	.word	0x200022f8
 80058d8:	20000a8c 	.word	0x20000a8c

080058dc <TSK_HighFrequencyTask>:
  * @brief  Motor control profiler HF task
  * @param  None
  * @retval uint8_t It return always 0.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 80058dc:	b510      	push	{r4, lr}
  ab_t Iab;

  if (SWITCH_OVER == Mci[M1].State)
 80058de:	4b11      	ldr	r3, [pc, #68]	; (8005924 <TSK_HighFrequencyTask+0x48>)
 80058e0:	7fdb      	ldrb	r3, [r3, #31]
 80058e2:	2b13      	cmp	r3, #19
{
 80058e4:	b082      	sub	sp, #8
  if (SWITCH_OVER == Mci[M1].State)
 80058e6:	d011      	beq.n	800590c <TSK_HighFrequencyTask+0x30>
 80058e8:	4c0f      	ldr	r4, [pc, #60]	; (8005928 <TSK_HighFrequencyTask+0x4c>)
  }
  else
  {
    /* Nothing to do */
  }
  RCM_ReadOngoingConv();
 80058ea:	f002 fc07 	bl	80080fc <RCM_ReadOngoingConv>
  RCM_ExecNextConv();
 80058ee:	f002 fbb5 	bl	800805c <RCM_ExecNextConv>
  /* The generic function needs to be called here as the undelying
   * implementation changes in time depending on the Profiler's state
   * machine. Calling the generic function ensures that the correct
   * implementation is invoked */
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 80058f2:	4b0e      	ldr	r3, [pc, #56]	; (800592c <TSK_HighFrequencyTask+0x50>)
 80058f4:	a901      	add	r1, sp, #4
 80058f6:	6818      	ldr	r0, [r3, #0]
 80058f8:	f000 fc9a 	bl	8006230 <PWMC_GetPhaseCurrents>
  FOCVars[M1].Iab = Iab;
 80058fc:	9b01      	ldr	r3, [sp, #4]
 80058fe:	6023      	str	r3, [r4, #0]
  SCC_SetPhaseVoltage(&SCC);
 8005900:	480b      	ldr	r0, [pc, #44]	; (8005930 <TSK_HighFrequencyTask+0x54>)
 8005902:	f7fb fb5f 	bl	8000fc4 <SCC_SetPhaseVoltage>

  return (0); /* Single motor only */
}
 8005906:	2000      	movs	r0, #0
 8005908:	b002      	add	sp, #8
 800590a:	bd10      	pop	{r4, pc}
    if (!REMNG_RampCompleted(pREMNG[M1]))
 800590c:	4c09      	ldr	r4, [pc, #36]	; (8005934 <TSK_HighFrequencyTask+0x58>)
 800590e:	6820      	ldr	r0, [r4, #0]
 8005910:	f007 fabe 	bl	800ce90 <REMNG_RampCompleted>
 8005914:	2800      	cmp	r0, #0
 8005916:	d1e7      	bne.n	80058e8 <TSK_HighFrequencyTask+0xc>
      FOCVars[M1].Iqdref.q = (int16_t)REMNG_Calc(pREMNG[M1]);
 8005918:	6820      	ldr	r0, [r4, #0]
 800591a:	4c03      	ldr	r4, [pc, #12]	; (8005928 <TSK_HighFrequencyTask+0x4c>)
 800591c:	f007 fa96 	bl	800ce4c <REMNG_Calc>
 8005920:	8220      	strh	r0, [r4, #16]
 8005922:	e7e2      	b.n	80058ea <TSK_HighFrequencyTask+0xe>
 8005924:	20002298 	.word	0x20002298
 8005928:	200022cc 	.word	0x200022cc
 800592c:	20002300 	.word	0x20002300
 8005930:	200002bc 	.word	0x200002bc
 8005934:	200022fc 	.word	0x200022fc

08005938 <TSK_SafetyTask_PWMOFF>:
  * @brief  Safety task implementation if  MC.M1_ON_OVER_VOLTAGE == TURN_OFF_PWM.
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink.
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 8005938:	b570      	push	{r4, r5, r6, lr}

  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */
  uint16_t CodeReturn = MC_NO_ERROR;
  const uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};
  /* Check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
  CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[bMotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 800593a:	4e21      	ldr	r6, [pc, #132]	; (80059c0 <TSK_SafetyTask_PWMOFF+0x88>)
{
 800593c:	b082      	sub	sp, #8
 800593e:	4604      	mov	r4, r0
  CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[bMotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 8005940:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8005944:	f000 fe3e 	bl	80065c4 <PWMC_IsFaultOccurred>
 8005948:	4605      	mov	r5, r0
                                                    (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  if (M1 == bMotor)
 800594a:	b184      	cbz	r4, 800596e <TSK_SafetyTask_PWMOFF+0x36>
  }
  else
  {
    /* Nothing to do */
  }
  MCI_FaultProcessing(&Mci[bMotor], CodeReturn, ~CodeReturn); /* Process faults */
 800594c:	481d      	ldr	r0, [pc, #116]	; (80059c4 <TSK_SafetyTask_PWMOFF+0x8c>)
 800594e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8005952:	43ea      	mvns	r2, r5
 8005954:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 8005958:	b292      	uxth	r2, r2
 800595a:	4629      	mov	r1, r5
 800595c:	9001      	str	r0, [sp, #4]
 800595e:	f7ff fa43 	bl	8004de8 <MCI_FaultProcessing>

  if (MCI_GetFaultState(&Mci[bMotor]) != (uint32_t)MC_NO_FAULTS)
 8005962:	9801      	ldr	r0, [sp, #4]
 8005964:	f7ff faf0 	bl	8004f48 <MCI_GetFaultState>
 8005968:	b968      	cbnz	r0, 8005986 <TSK_SafetyTask_PWMOFF+0x4e>
    /* No errors */
  }
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 800596a:	b002      	add	sp, #8
 800596c:	bd70      	pop	{r4, r5, r6, pc}
    uint16_t rawValueM1 =  RCM_ExecRegularConv(&VbusRegConv_M1);
 800596e:	4816      	ldr	r0, [pc, #88]	; (80059c8 <TSK_SafetyTask_PWMOFF+0x90>)
 8005970:	f002 fa78 	bl	8007e64 <RCM_ExecRegularConv>
 8005974:	4601      	mov	r1, r0
    CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(&BusVoltageSensor_M1, rawValueM1);
 8005976:	4815      	ldr	r0, [pc, #84]	; (80059cc <TSK_SafetyTask_PWMOFF+0x94>)
 8005978:	f007 fa32 	bl	800cde0 <RVBS_CalcAvVbus>
 800597c:	f020 0008 	bic.w	r0, r0, #8
 8005980:	4328      	orrs	r0, r5
 8005982:	b285      	uxth	r5, r0
 8005984:	e7e2      	b.n	800594c <TSK_SafetyTask_PWMOFF+0x14>
      SCC_Stop(&SCC);
 8005986:	4812      	ldr	r0, [pc, #72]	; (80059d0 <TSK_SafetyTask_PWMOFF+0x98>)
 8005988:	f7fb fa36 	bl	8000df8 <SCC_Stop>
      OTT_Stop(&OTT);
 800598c:	4811      	ldr	r0, [pc, #68]	; (80059d4 <TSK_SafetyTask_PWMOFF+0x9c>)
 800598e:	f7fa fcd8 	bl	8000342 <OTT_Stop>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8005992:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005996:	f000 fddf 	bl	8006558 <PWMC_SwitchOffPWM>
    if (MCPA_UART_A.Mark != 0U)
 800599a:	480f      	ldr	r0, [pc, #60]	; (80059d8 <TSK_SafetyTask_PWMOFF+0xa0>)
 800599c:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 80059a0:	b953      	cbnz	r3, 80059b8 <TSK_SafetyTask_PWMOFF+0x80>
    FOC_Clear(bMotor);
 80059a2:	4620      	mov	r0, r4
 80059a4:	f7ff fc3e 	bl	8005224 <FOC_Clear>
    PQD_Clear(pMPM[bMotor]); //cstat !MISRAC2012-Rule-11.3
 80059a8:	4b0c      	ldr	r3, [pc, #48]	; (80059dc <TSK_SafetyTask_PWMOFF+0xa4>)
 80059aa:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
 80059ae:	b002      	add	sp, #8
 80059b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    PQD_Clear(pMPM[bMotor]); //cstat !MISRAC2012-Rule-11.3
 80059b4:	f006 ba2a 	b.w	800be0c <PQD_Clear>
      MCPA_flushDataLog (&MCPA_UART_A);
 80059b8:	f006 f8b6 	bl	800bb28 <MCPA_flushDataLog>
 80059bc:	e7f1      	b.n	80059a2 <TSK_SafetyTask_PWMOFF+0x6a>
 80059be:	bf00      	nop
 80059c0:	20002300 	.word	0x20002300
 80059c4:	20002298 	.word	0x20002298
 80059c8:	20000994 	.word	0x20000994
 80059cc:	20000004 	.word	0x20000004
 80059d0:	200002bc 	.word	0x200002bc
 80059d4:	20000024 	.word	0x20000024
 80059d8:	20000a60 	.word	0x20000a60
 80059dc:	200009dc 	.word	0x200009dc

080059e0 <TSK_SafetyTask>:
{
 80059e0:	b508      	push	{r3, lr}
  if (1U == bMCBootCompleted)
 80059e2:	4b07      	ldr	r3, [pc, #28]	; (8005a00 <TSK_SafetyTask+0x20>)
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d000      	beq.n	80059ec <TSK_SafetyTask+0xc>
}
 80059ea:	bd08      	pop	{r3, pc}
    SCC_CheckOC_RL(&SCC);
 80059ec:	4805      	ldr	r0, [pc, #20]	; (8005a04 <TSK_SafetyTask+0x24>)
 80059ee:	f7fb fa15 	bl	8000e1c <SCC_CheckOC_RL>
    TSK_SafetyTask_PWMOFF(M1);
 80059f2:	2000      	movs	r0, #0
 80059f4:	f7ff ffa0 	bl	8005938 <TSK_SafetyTask_PWMOFF>
}
 80059f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCM_ExecUserConv();
 80059fc:	f002 bafa 	b.w	8007ff4 <RCM_ExecUserConv>
 8005a00:	200022f2 	.word	0x200022f2
 8005a04:	200002bc 	.word	0x200002bc

08005a08 <MC_RunMotorControlTasks>:
{
 8005a08:	b508      	push	{r3, lr}
  if (0U == bMCBootCompleted)
 8005a0a:	4b04      	ldr	r3, [pc, #16]	; (8005a1c <MC_RunMotorControlTasks+0x14>)
 8005a0c:	781b      	ldrb	r3, [r3, #0]
 8005a0e:	b903      	cbnz	r3, 8005a12 <MC_RunMotorControlTasks+0xa>
}
 8005a10:	bd08      	pop	{r3, pc}
    MC_Scheduler();
 8005a12:	f7ff ff1d 	bl	8005850 <MC_Scheduler>
    TSK_SafetyTask();
 8005a16:	f7ff ffe3 	bl	80059e0 <TSK_SafetyTask>
}
 8005a1a:	bd08      	pop	{r3, pc}
 8005a1c:	200022f2 	.word	0x200022f2

08005a20 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 8005a20:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */
  SCC_Stop(&SCC);
 8005a22:	4808      	ldr	r0, [pc, #32]	; (8005a44 <TSK_HardwareFaultTask+0x24>)
 8005a24:	f7fb f9e8 	bl	8000df8 <SCC_Stop>
  OTT_Stop(&OTT);
 8005a28:	4807      	ldr	r0, [pc, #28]	; (8005a48 <TSK_HardwareFaultTask+0x28>)
 8005a2a:	f7fa fc8a 	bl	8000342 <OTT_Stop>
  R3_1_SwitchOffPWM(pwmcHandle[M1]);
 8005a2e:	4b07      	ldr	r3, [pc, #28]	; (8005a4c <TSK_HardwareFaultTask+0x2c>)
 8005a30:	6818      	ldr	r0, [r3, #0]
 8005a32:	f006 fbd7 	bl	800c1e4 <R3_1_SwitchOffPWM>
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);

  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 8005a36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);
 8005a3a:	4805      	ldr	r0, [pc, #20]	; (8005a50 <TSK_HardwareFaultTask+0x30>)
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	2180      	movs	r1, #128	; 0x80
 8005a40:	f7ff b9d2 	b.w	8004de8 <MCI_FaultProcessing>
 8005a44:	200002bc 	.word	0x200002bc
 8005a48:	20000024 	.word	0x20000024
 8005a4c:	20002300 	.word	0x20002300
 8005a50:	20002298 	.word	0x20002298

08005a54 <UI_HandleStartStopButton_cb>:

__weak void UI_HandleStartStopButton_cb (void)
{
 8005a54:	b508      	push	{r3, lr}
/* USER CODE BEGIN START_STOP_BTN */
  if (IDLE == MC_GetSTMStateMotor1())
 8005a56:	f7ff f97d 	bl	8004d54 <MC_GetSTMStateMotor1>
 8005a5a:	b918      	cbnz	r0, 8005a64 <UI_HandleStartStopButton_cb+0x10>
  else
  {
    (void)MC_StopMotor1();
  }
/* USER CODE END START_STOP_BTN */
}
 8005a5c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    (void)MC_StartMotor1();
 8005a60:	f7ff b94e 	b.w	8004d00 <MC_StartMotor1>
}
 8005a64:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    (void)MC_StopMotor1();
 8005a68:	f7ff b950 	b.w	8004d0c <MC_StopMotor1>

08005a6c <mc_lock_pins>:

 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration.
  */
__weak void mc_lock_pins (void)
{
 8005a6c:	b470      	push	{r4, r5, r6}
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8005a6e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005a72:	4a2a      	ldr	r2, [pc, #168]	; (8005b1c <mc_lock_pins+0xb0>)
 8005a74:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8005a76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005a7a:	61d9      	str	r1, [r3, #28]
 8005a7c:	b08b      	sub	sp, #44	; 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8005a7e:	61da      	str	r2, [r3, #28]
  /* Read LCKR register. This read is mandatory to complete key lock sequence */
  temp = READ_REG(GPIOx->LCKR);
 8005a80:	69da      	ldr	r2, [r3, #28]
 8005a82:	9209      	str	r2, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, PinMask);
 8005a84:	f44f 7100 	mov.w	r1, #512	; 0x200
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8005a88:	f44f 3281 	mov.w	r2, #66048	; 0x10200
  (void) temp;
 8005a8c:	9809      	ldr	r0, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8005a8e:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8005a90:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8005a92:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8005a94:	69d9      	ldr	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8005a96:	4a22      	ldr	r2, [pc, #136]	; (8005b20 <mc_lock_pins+0xb4>)
  temp = READ_REG(GPIOx->LCKR);
 8005a98:	9108      	str	r1, [sp, #32]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8005a9a:	2401      	movs	r4, #1
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8005a9c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
  (void) temp;
 8005aa0:	9808      	ldr	r0, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8005aa2:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8005aa4:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8005aa6:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8005aa8:	69d0      	ldr	r0, [r2, #28]
 8005aaa:	9007      	str	r0, [sp, #28]
  (void) temp;
 8005aac:	9d07      	ldr	r5, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8005aae:	f44f 3082 	mov.w	r0, #66560	; 0x10400
  WRITE_REG(GPIOx->LCKR, PinMask);
 8005ab2:	f44f 6580 	mov.w	r5, #1024	; 0x400
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8005ab6:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8005ab8:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8005aba:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8005abc:	69d8      	ldr	r0, [r3, #28]
 8005abe:	9006      	str	r0, [sp, #24]
  (void) temp;
 8005ac0:	9d06      	ldr	r5, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8005ac2:	4818      	ldr	r0, [pc, #96]	; (8005b24 <mc_lock_pins+0xb8>)
 8005ac4:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8005ac6:	2502      	movs	r5, #2
 8005ac8:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8005aca:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8005acc:	69d2      	ldr	r2, [r2, #28]
 8005ace:	9205      	str	r2, [sp, #20]
  (void) temp;
 8005ad0:	9a05      	ldr	r2, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8005ad2:	4a15      	ldr	r2, [pc, #84]	; (8005b28 <mc_lock_pins+0xbc>)
 8005ad4:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8005ad6:	2680      	movs	r6, #128	; 0x80
 8005ad8:	61de      	str	r6, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8005ada:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8005adc:	69de      	ldr	r6, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8005ade:	4a13      	ldr	r2, [pc, #76]	; (8005b2c <mc_lock_pins+0xc0>)
  temp = READ_REG(GPIOx->LCKR);
 8005ae0:	9604      	str	r6, [sp, #16]
  (void) temp;
 8005ae2:	9e04      	ldr	r6, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8005ae4:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8005ae6:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8005ae8:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8005aea:	69d6      	ldr	r6, [r2, #28]
 8005aec:	9603      	str	r6, [sp, #12]
  (void) temp;
 8005aee:	9e03      	ldr	r6, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8005af0:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8005af2:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8005af4:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8005af6:	69d2      	ldr	r2, [r2, #28]
 8005af8:	9202      	str	r2, [sp, #8]
  (void) temp;
 8005afa:	9a02      	ldr	r2, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8005afc:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8005afe:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8005b00:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8005b02:	69da      	ldr	r2, [r3, #28]
 8005b04:	9201      	str	r2, [sp, #4]
  (void) temp;
 8005b06:	9a01      	ldr	r2, [sp, #4]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8005b08:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8005b0a:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8005b0c:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8005b0e:	69db      	ldr	r3, [r3, #28]
 8005b10:	9300      	str	r3, [sp, #0]
  (void) temp;
 8005b12:	9b00      	ldr	r3, [sp, #0]
LL_GPIO_LockPin(M1_PWM_UL_GPIO_Port, M1_PWM_UL_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_V_GPIO_Port, M1_CURR_AMPL_V_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_W_GPIO_Port, M1_CURR_AMPL_W_Pin);
LL_GPIO_LockPin(M1_BUS_VOLTAGE_GPIO_Port, M1_BUS_VOLTAGE_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_U_GPIO_Port, M1_CURR_AMPL_U_Pin);
}
 8005b14:	b00b      	add	sp, #44	; 0x2c
 8005b16:	bc70      	pop	{r4, r5, r6}
 8005b18:	4770      	bx	lr
 8005b1a:	bf00      	nop
 8005b1c:	00010100 	.word	0x00010100
 8005b20:	48000400 	.word	0x48000400
 8005b24:	00010002 	.word	0x00010002
 8005b28:	00010080 	.word	0x00010080
 8005b2c:	48000800 	.word	0x48000800

08005b30 <RI_SetRegCommandParser>:
  * @param  txSyncFreeSpace Space available for synchronous transmission
  *
  * @retval Returns #MCP_CMD_OK if the command is acknowledged and #MCP_CMD_NOK if not.
  */
uint8_t RI_SetRegCommandParser (MCP_Handle_t * pHandle, uint16_t txSyncFreeSpace)
{
 8005b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b34:	b087      	sub	sp, #28
    uint8_t accessResult;

    uint16_t regID;
    uint8_t typeID;
    uint8_t motorID;
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 8005b36:	4b2f      	ldr	r3, [pc, #188]	; (8005bf4 <RI_SetRegCommandParser+0xc4>)
 8005b38:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8005b3c:	9304      	str	r3, [sp, #16]
 8005b3e:	4b2e      	ldr	r3, [pc, #184]	; (8005bf8 <RI_SetRegCommandParser+0xc8>)
 8005b40:	9305      	str	r3, [sp, #20]
    uint16_t size = 0U;
 8005b42:	2600      	movs	r6, #0
    uint8_t * rxData = pHandle->rxBuffer;
 8005b44:	f8d0 e004 	ldr.w	lr, [r0, #4]
    int16_t rxLength = pHandle->rxLength;
 8005b48:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
    uint16_t size = 0U;
 8005b4c:	f8ad 600e 	strh.w	r6, [sp, #14]
{
 8005b50:	4607      	mov	r7, r0
    uint8_t number_of_item =0;
    pHandle->txLength = 0;
 8005b52:	81c6      	strh	r6, [r0, #14]
 8005b54:	eb08 0901 	add.w	r9, r8, r1
  uint8_t retVal = MCP_CMD_OK;
 8005b58:	46b2      	mov	sl, r6

    while (rxLength > 0)
    {
      number_of_item ++;
 8005b5a:	3601      	adds	r6, #1
    while (rxLength > 0)
 8005b5c:	2b00      	cmp	r3, #0
      dataElementID = (uint16_t *) rxData;
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8005b5e:	f1a3 0c02 	sub.w	ip, r3, #2
      number_of_item ++;
 8005b62:	b2f6      	uxtb	r6, r6
    while (rxLength > 0)
 8005b64:	dd43      	ble.n	8005bee <RI_SetRegCommandParser+0xbe>
        retVal = MCP_CMD_NOK;
        rxLength = 0;
      }
      else
      {
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 8005b66:	fa0f f18c 	sxth.w	r1, ip
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8005b6a:	fa1f f48c 	uxth.w	r4, ip
      regID = *dataElementID & REG_MASK;
 8005b6e:	f8be c000 	ldrh.w	ip, [lr]
      rxData = rxData+MCP_ID_SIZE; // Shift buffer to the next data
 8005b72:	f10e 0502 	add.w	r5, lr, #2
      if (motorID > NBR_OF_MOTORS)
 8005b76:	f01c 0f06 	tst.w	ip, #6
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 8005b7a:	f10d 030e 	add.w	r3, sp, #14
 8005b7e:	462a      	mov	r2, r5
      regID = *dataElementID & REG_MASK;
 8005b80:	f02c 0007 	bic.w	r0, ip, #7
      typeID = (uint8_t)*dataElementID & TYPE_MASK;
 8005b84:	fa5f fe8c 	uxtb.w	lr, ip
      if (motorID > NBR_OF_MOTORS)
 8005b88:	d11e      	bne.n	8005bc8 <RI_SetRegCommandParser+0x98>
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 8005b8a:	9100      	str	r1, [sp, #0]
 8005b8c:	f00e 0c07 	and.w	ip, lr, #7
 8005b90:	a906      	add	r1, sp, #24
 8005b92:	eb01 0c8c 	add.w	ip, r1, ip, lsl #2
 8005b96:	f00e 0138 	and.w	r1, lr, #56	; 0x38
 8005b9a:	f85c bc08 	ldr.w	fp, [ip, #-8]
 8005b9e:	47d8      	blx	fp
        /* Prepare next data*/
        rxLength = (int16_t) (rxLength - size);
 8005ba0:	f8bd e00e 	ldrh.w	lr, [sp, #14]
        rxData = rxData+size;
        /* If there is only one CMD in the buffer, we do not store the result */
        if ((1U == number_of_item) && (0 == rxLength))
 8005ba4:	2e01      	cmp	r6, #1
        rxLength = (int16_t) (rxLength - size);
 8005ba6:	eba4 0c0e 	sub.w	ip, r4, lr
 8005baa:	fa0f f38c 	sxth.w	r3, ip
        if ((1U == number_of_item) && (0 == rxLength))
 8005bae:	d013      	beq.n	8005bd8 <RI_SetRegCommandParser+0xa8>
        {
          retVal = accessResult;
        }
        else
        {/* Store the result for each access to be able to report failing access */
          if (txSyncFreeSpace !=0 )
 8005bb0:	45c1      	cmp	r9, r8
 8005bb2:	d00d      	beq.n	8005bd0 <RI_SetRegCommandParser+0xa0>
          {
            *txData = accessResult;
 8005bb4:	f808 0b01 	strb.w	r0, [r8], #1
            txData = txData+1;
            pHandle->txLength++;
 8005bb8:	89fa      	ldrh	r2, [r7, #14]
 8005bba:	3201      	adds	r2, #1
        rxData = rxData+size;
 8005bbc:	44ae      	add	lr, r5
            pHandle->txLength++;
 8005bbe:	81fa      	strh	r2, [r7, #14]
            txSyncFreeSpace--; /* decrement one by one no wraparound possible */
            retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 8005bc0:	2800      	cmp	r0, #0
 8005bc2:	d0ca      	beq.n	8005b5a <RI_SetRegCommandParser+0x2a>
            if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FORMAT))
 8005bc4:	2807      	cmp	r0, #7
 8005bc6:	d10d      	bne.n	8005be4 <RI_SetRegCommandParser+0xb4>
            retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 8005bc8:	2001      	movs	r0, #1
    }
  #ifdef NULL_PTR_CHECK_REG_INT
  }
#endif
  return (retVal);
}
 8005bca:	b007      	add	sp, #28
 8005bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8005bd0:	2008      	movs	r0, #8
}
 8005bd2:	b007      	add	sp, #28
 8005bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((1U == number_of_item) && (0 == rxLength))
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d1e9      	bne.n	8005bb0 <RI_SetRegCommandParser+0x80>
    if (MCP_CMD_OK == retVal)
 8005bdc:	2800      	cmp	r0, #0
 8005bde:	d1f4      	bne.n	8005bca <RI_SetRegCommandParser+0x9a>
      pHandle->txLength = 0;
 8005be0:	81f8      	strh	r0, [r7, #14]
 8005be2:	e7f2      	b.n	8005bca <RI_SetRegCommandParser+0x9a>
            if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FORMAT))
 8005be4:	280a      	cmp	r0, #10
 8005be6:	d0ef      	beq.n	8005bc8 <RI_SetRegCommandParser+0x98>
            retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 8005be8:	f04f 0a01 	mov.w	sl, #1
 8005bec:	e7b5      	b.n	8005b5a <RI_SetRegCommandParser+0x2a>
 8005bee:	4650      	mov	r0, sl
 8005bf0:	e7f4      	b.n	8005bdc <RI_SetRegCommandParser+0xac>
 8005bf2:	bf00      	nop
 8005bf4:	0800660d 	.word	0x0800660d
 8005bf8:	08006709 	.word	0x08006709

08005bfc <RI_GetRegCommandParser>:
  * @param  txSyncFreeSpace Space available for synchronous transmission
  *
  * @retval Returns #MCP_CMD_OK if the command is acknowledged and #MCP_CMD_NOK if not.
  */
uint8_t RI_GetRegCommandParser (MCP_Handle_t * pHandle, uint16_t txSyncFreeSpace)
{
 8005bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c00:	b086      	sub	sp, #24
  {
#endif
    uint16_t * dataElementID;
    uint8_t * rxData = pHandle->rxBuffer;
    uint8_t * txData = pHandle->txBuffer;
    uint16_t size = 0U;
 8005c02:	2300      	movs	r3, #0
 8005c04:	f8ad 300e 	strh.w	r3, [sp, #14]

    uint16_t regID;
    uint8_t typeID;
    uint8_t motorID;
    uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_GetRegisterGlobal, &RI_GetRegisterMotor1};
    pHandle->txLength = 0;
 8005c08:	81c3      	strh	r3, [r0, #14]
    uint16_t rxLength = pHandle->rxLength;
 8005c0a:	f8b0 800c 	ldrh.w	r8, [r0, #12]
    uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_GetRegisterGlobal, &RI_GetRegisterMotor1};
 8005c0e:	4b1e      	ldr	r3, [pc, #120]	; (8005c88 <RI_GetRegCommandParser+0x8c>)
 8005c10:	9304      	str	r3, [sp, #16]
 8005c12:	4b1e      	ldr	r3, [pc, #120]	; (8005c8c <RI_GetRegCommandParser+0x90>)
    uint8_t * rxData = pHandle->rxBuffer;
 8005c14:	f8d0 9004 	ldr.w	r9, [r0, #4]
    uint8_t * txData = pHandle->txBuffer;
 8005c18:	6886      	ldr	r6, [r0, #8]
    uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_GetRegisterGlobal, &RI_GetRegisterMotor1};
 8005c1a:	9305      	str	r3, [sp, #20]
    while (rxLength > 0U)
 8005c1c:	f1b8 0f00 	cmp.w	r8, #0
 8005c20:	d023      	beq.n	8005c6a <RI_GetRegCommandParser+0x6e>
 8005c22:	4607      	mov	r7, r0
 8005c24:	b20d      	sxth	r5, r1
    uint8_t * rxData = pHandle->rxBuffer;
 8005c26:	464c      	mov	r4, r9
    {
      dataElementID = (uint16_t *) rxData;
      rxLength = rxLength - MCP_ID_SIZE;
      rxData = rxData + MCP_ID_SIZE; // Shift buffer to the next MCP_ID

      regID = *dataElementID & REG_MASK;
 8005c28:	f834 cb02 	ldrh.w	ip, [r4], #2
      typeID = (uint8_t)*dataElementID & TYPE_MASK;
 8005c2c:	fa5f f18c 	uxtb.w	r1, ip
        retVal = MCP_CMD_NOK;
        rxLength = 0;
      }
      else
      {
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 8005c30:	f001 0e07 	and.w	lr, r1, #7
 8005c34:	f10d 0a18 	add.w	sl, sp, #24
      if (motorID > NBR_OF_MOTORS)
 8005c38:	f01c 0f06 	tst.w	ip, #6
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 8005c3c:	4632      	mov	r2, r6
      regID = *dataElementID & REG_MASK;
 8005c3e:	f02c 0007 	bic.w	r0, ip, #7
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 8005c42:	f10d 030e 	add.w	r3, sp, #14
 8005c46:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 8005c4a:	f001 0138 	and.w	r1, r1, #56	; 0x38
      if (motorID > NBR_OF_MOTORS)
 8005c4e:	d10c      	bne.n	8005c6a <RI_GetRegCommandParser+0x6e>
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 8005c50:	9500      	str	r5, [sp, #0]
 8005c52:	f85e ac08 	ldr.w	sl, [lr, #-8]
 8005c56:	47d0      	blx	sl
        if (retVal == MCP_CMD_OK )
 8005c58:	eba8 0304 	sub.w	r3, r8, r4
    while (rxLength > 0U)
 8005c5c:	fa19 f383 	uxtah	r3, r9, r3
 8005c60:	b29b      	uxth	r3, r3
        if (retVal == MCP_CMD_OK )
 8005c62:	b130      	cbz	r0, 8005c72 <RI_GetRegCommandParser+0x76>
    }
#ifdef NULL_PTR_CHECK_REG_INT
  }
#endif
  return (retVal);
}
 8005c64:	b006      	add	sp, #24
 8005c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  uint8_t retVal = MCP_CMD_NOK;
 8005c6a:	2001      	movs	r0, #1
}
 8005c6c:	b006      	add	sp, #24
 8005c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          txData = txData+size;
 8005c72:	f8bd 100e 	ldrh.w	r1, [sp, #14]
          pHandle->txLength += size;
 8005c76:	89fa      	ldrh	r2, [r7, #14]
          freeSpaceS16 = freeSpaceS16-size;
 8005c78:	1a6d      	subs	r5, r5, r1
          pHandle->txLength += size;
 8005c7a:	440a      	add	r2, r1
          txData = txData+size;
 8005c7c:	440e      	add	r6, r1
          pHandle->txLength += size;
 8005c7e:	81fa      	strh	r2, [r7, #14]
          freeSpaceS16 = freeSpaceS16-size;
 8005c80:	b22d      	sxth	r5, r5
    while (rxLength > 0U)
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d1d0      	bne.n	8005c28 <RI_GetRegCommandParser+0x2c>
 8005c86:	e7ed      	b.n	8005c64 <RI_GetRegCommandParser+0x68>
 8005c88:	08006f11 	.word	0x08006f11
 8005c8c:	0800704d 	.word	0x0800704d

08005c90 <MCP_ReceivedPacket>:
  * @brief  Parses the header from the received packet and call the required function depending on the command sent by the controller device.
  *
  * @param  pHandle Handler of the current instance of the MCP component
  */
void MCP_ReceivedPacket(MCP_Handle_t *pHandle)
{
 8005c90:	b5f0      	push	{r4, r5, r6, r7, lr}
    /* Nothing to do, txBuffer and txLength have not been modified */
  }
  else /* Length is 0, this is a request to send back the last packet */
  {
#endif
    packetHeader = (uint16_t *)pHandle->rxBuffer; //cstat !MISRAC2012-Rule-11.3
 8005c92:	6845      	ldr	r5, [r0, #4]
    command = (uint16_t)(*packetHeader & CMD_MASK);
 8005c94:	882b      	ldrh	r3, [r5, #0]

    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 8005c96:	f403 427f 	and.w	r2, r3, #65280	; 0xff00
    command = (uint16_t)(*packetHeader & CMD_MASK);
 8005c9a:	f023 0c07 	bic.w	ip, r3, #7
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 8005c9e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
{
 8005ca2:	b083      	sub	sp, #12
 8005ca4:	4604      	mov	r4, r0
    command = (uint16_t)(*packetHeader & CMD_MASK);
 8005ca6:	fa1f fc8c 	uxth.w	ip, ip
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 8005caa:	d051      	beq.n	8005d50 <MCP_ReceivedPacket+0xc0>
    else
    {
      /* Nothing to do */
    }

    motorID = (uint8_t)((*packetHeader - 1U) & MOTOR_MASK);
 8005cac:	3b01      	subs	r3, #1
    MCI_Handle_t *pMCI = &Mci[motorID];
 8005cae:	4f5c      	ldr	r7, [pc, #368]	; (8005e20 <MCP_ReceivedPacket+0x190>)
 8005cb0:	f003 0307 	and.w	r3, r3, #7
 8005cb4:	eb03 0383 	add.w	r3, r3, r3, lsl #2

    /* Removing MCP Header from RxBuffer */
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 8005cb8:	3502      	adds	r5, #2
    MCI_Handle_t *pMCI = &Mci[motorID];
 8005cba:	eb07 07c3 	add.w	r7, r7, r3, lsl #3

    /* Commands requiering payload response must be aware of space available for the payload */
    /* Last byte is reserved for MCP response*/
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8005cbe:	6823      	ldr	r3, [r4, #0]
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 8005cc0:	6045      	str	r5, [r0, #4]
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8005cc2:	8980      	ldrh	r0, [r0, #12]
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8005cc4:	899a      	ldrh	r2, [r3, #12]
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8005cc6:	3802      	subs	r0, #2
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8005cc8:	3a01      	subs	r2, #1
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8005cca:	b280      	uxth	r0, r0

    /* Initialization of the tx length, command which send back data has to increment the txLength
     * (case of Read register) */
    pHandle->txLength = 0U;
 8005ccc:	2600      	movs	r6, #0

    switch (command)
 8005cce:	f1bc 0f38 	cmp.w	ip, #56	; 0x38
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8005cd2:	b291      	uxth	r1, r2
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8005cd4:	81a0      	strh	r0, [r4, #12]
    pHandle->txLength = 0U;
 8005cd6:	81e6      	strh	r6, [r4, #14]
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8005cd8:	b212      	sxth	r2, r2
    switch (command)
 8005cda:	d82a      	bhi.n	8005d32 <MCP_ReceivedPacket+0xa2>
 8005cdc:	f1bc 0f38 	cmp.w	ip, #56	; 0x38
 8005ce0:	d81e      	bhi.n	8005d20 <MCP_ReceivedPacket+0x90>
 8005ce2:	e8df f00c 	tbb	[pc, ip]
 8005ce6:	1d63      	.short	0x1d63
 8005ce8:	1d1d1d1d 	.word	0x1d1d1d1d
 8005cec:	1d6b1d1d 	.word	0x1d6b1d1d
 8005cf0:	1d1d1d1d 	.word	0x1d1d1d1d
 8005cf4:	1d701d1d 	.word	0x1d701d1d
 8005cf8:	1d1d1d1d 	.word	0x1d1d1d1d
 8005cfc:	1d751d1d 	.word	0x1d751d1d
 8005d00:	1d1d1d1d 	.word	0x1d1d1d1d
 8005d04:	1d4c1d1d 	.word	0x1d4c1d1d
 8005d08:	1d1d1d1d 	.word	0x1d1d1d1d
 8005d0c:	1d521d1d 	.word	0x1d521d1d
 8005d10:	1d1d1d1d 	.word	0x1d1d1d1d
 8005d14:	1d471d1d 	.word	0x1d471d1d
 8005d18:	1d1d1d1d 	.word	0x1d1d1d1d
 8005d1c:	1d1d      	.short	0x1d1d
 8005d1e:	5d          	.byte	0x5d
 8005d1f:	00          	.byte	0x00
 8005d20:	2300      	movs	r3, #0
 8005d22:	2002      	movs	r0, #2
      {
        MCPResponse = MCP_CMD_UNKNOWN;
        break;
      }
    }
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8005d24:	68a2      	ldr	r2, [r4, #8]
 8005d26:	54d0      	strb	r0, [r2, r3]
    pHandle->txLength++;
 8005d28:	89e3      	ldrh	r3, [r4, #14]
 8005d2a:	3301      	adds	r3, #1
 8005d2c:	81e3      	strh	r3, [r4, #14]
#ifdef NULL_PTR_CHECK_MCP
  }
#endif
}
 8005d2e:	b003      	add	sp, #12
 8005d30:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch (command)
 8005d32:	f1bc 0f68 	cmp.w	ip, #104	; 0x68
 8005d36:	d05f      	beq.n	8005df8 <MCP_ReceivedPacket+0x168>
 8005d38:	f5bc 7f80 	cmp.w	ip, #256	; 0x100
 8005d3c:	d06d      	beq.n	8005e1a <MCP_ReceivedPacket+0x18a>
 8005d3e:	f1bc 0f48 	cmp.w	ip, #72	; 0x48
 8005d42:	d1ed      	bne.n	8005d20 <MCP_ReceivedPacket+0x90>
        MCI_Clear_Iqdref(pMCI);
 8005d44:	4638      	mov	r0, r7
 8005d46:	f7ff f9ab 	bl	80050a0 <MCI_Clear_Iqdref>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8005d4a:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8005d4c:	4630      	mov	r0, r6
        break;
 8005d4e:	e7e9      	b.n	8005d24 <MCP_ReceivedPacket+0x94>
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8005d50:	8980      	ldrh	r0, [r0, #12]
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8005d52:	6823      	ldr	r3, [r4, #0]
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8005d54:	3802      	subs	r0, #2
      userCommand = ((uint8_t)(command & 0xF8U) >> 3U);
 8005d56:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8005d5a:	899a      	ldrh	r2, [r3, #12]
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8005d5c:	b280      	uxth	r0, r0
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 8005d5e:	3502      	adds	r5, #2
    pHandle->txLength = 0U;
 8005d60:	2300      	movs	r3, #0
        if ((userCommand < MCP_USER_CALLBACK_MAX) && (MCP_UserCallBack[userCommand] != NULL))
 8005d62:	f1bc 0f01 	cmp.w	ip, #1
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8005d66:	81a0      	strh	r0, [r4, #12]
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 8005d68:	6065      	str	r5, [r4, #4]
    pHandle->txLength = 0U;
 8005d6a:	81e3      	strh	r3, [r4, #14]
        if ((userCommand < MCP_USER_CALLBACK_MAX) && (MCP_UserCallBack[userCommand] != NULL))
 8005d6c:	d935      	bls.n	8005dda <MCP_ReceivedPacket+0x14a>
        MCPResponse = MCP_CMD_OK;
 8005d6e:	2300      	movs	r3, #0
          MCPResponse = MCP_ERROR_CALLBACK_NOT_REGISTRED;
 8005d70:	200d      	movs	r0, #13
 8005d72:	e7d7      	b.n	8005d24 <MCP_ReceivedPacket+0x94>
        if (IDLE == MCI_GetSTMState(pMCI))
 8005d74:	4638      	mov	r0, r7
 8005d76:	f7ff f87f 	bl	8004e78 <MCI_GetSTMState>
 8005d7a:	2800      	cmp	r0, #0
 8005d7c:	d045      	beq.n	8005e0a <MCP_ReceivedPacket+0x17a>
          (void)MCI_StopMotor(pMCI);
 8005d7e:	4638      	mov	r0, r7
 8005d80:	f7ff f8b0 	bl	8004ee4 <MCI_StopMotor>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8005d84:	89e3      	ldrh	r3, [r4, #14]
          MCPResponse = MCP_CMD_OK;
 8005d86:	2000      	movs	r0, #0
 8005d88:	e7cc      	b.n	8005d24 <MCP_ReceivedPacket+0x94>
        if (RUN == MCI_GetSTMState(pMCI))
 8005d8a:	4638      	mov	r0, r7
 8005d8c:	f7ff f874 	bl	8004e78 <MCI_GetSTMState>
 8005d90:	2806      	cmp	r0, #6
 8005d92:	d1f7      	bne.n	8005d84 <MCP_ReceivedPacket+0xf4>
          MCI_StopRamp(pMCI);
 8005d94:	4638      	mov	r0, r7
 8005d96:	f7ff f91b 	bl	8004fd0 <MCI_StopRamp>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8005d9a:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8005d9c:	2000      	movs	r0, #0
 8005d9e:	e7c1      	b.n	8005d24 <MCP_ReceivedPacket+0x94>
        (void)MCI_FaultAcknowledged(pMCI);
 8005da0:	4638      	mov	r0, r7
 8005da2:	f7ff f8bf 	bl	8004f24 <MCI_FaultAcknowledged>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8005da6:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8005da8:	2000      	movs	r0, #0
        break;
 8005daa:	e7bb      	b.n	8005d24 <MCP_ReceivedPacket+0x94>
        *pHandle->txBuffer = MCP_VERSION;
 8005dac:	68a3      	ldr	r3, [r4, #8]
        pHandle->txLength = 4U;
 8005dae:	2104      	movs	r1, #4
        *pHandle->txBuffer = MCP_VERSION;
 8005db0:	2201      	movs	r2, #1
        pHandle->txLength = 4U;
 8005db2:	81e1      	strh	r1, [r4, #14]
        *pHandle->txBuffer = MCP_VERSION;
 8005db4:	701a      	strb	r2, [r3, #0]
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8005db6:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8005db8:	2000      	movs	r0, #0
        break;
 8005dba:	e7b3      	b.n	8005d24 <MCP_ReceivedPacket+0x94>
        MCPResponse = RI_SetRegCommandParser(pHandle, (uint16_t)txSyncFreeSpace);
 8005dbc:	4620      	mov	r0, r4
 8005dbe:	f7ff feb7 	bl	8005b30 <RI_SetRegCommandParser>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8005dc2:	89e3      	ldrh	r3, [r4, #14]
        break;
 8005dc4:	e7ae      	b.n	8005d24 <MCP_ReceivedPacket+0x94>
        MCPResponse = RI_GetRegCommandParser(pHandle, (uint16_t)txSyncFreeSpace);
 8005dc6:	4620      	mov	r0, r4
 8005dc8:	f7ff ff18 	bl	8005bfc <RI_GetRegCommandParser>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8005dcc:	89e3      	ldrh	r3, [r4, #14]
        break;
 8005dce:	e7a9      	b.n	8005d24 <MCP_ReceivedPacket+0x94>
        MCPResponse = (MCI_StartWithPolarizationMotor(pMCI) == false) ? MCP_CMD_OK : MCP_CMD_NOK;
 8005dd0:	4638      	mov	r0, r7
 8005dd2:	f7ff f86d 	bl	8004eb0 <MCI_StartWithPolarizationMotor>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8005dd6:	89e3      	ldrh	r3, [r4, #14]
 8005dd8:	e7a4      	b.n	8005d24 <MCP_ReceivedPacket+0x94>
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8005dda:	3a01      	subs	r2, #1
 8005ddc:	b212      	sxth	r2, r2
        if ((userCommand < MCP_USER_CALLBACK_MAX) && (MCP_UserCallBack[userCommand] != NULL))
 8005dde:	4b11      	ldr	r3, [pc, #68]	; (8005e24 <MCP_ReceivedPacket+0x194>)
 8005de0:	f853 602c 	ldr.w	r6, [r3, ip, lsl #2]
 8005de4:	2e00      	cmp	r6, #0
 8005de6:	d0c2      	beq.n	8005d6e <MCP_ReceivedPacket+0xde>
          MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace,
 8005de8:	68a3      	ldr	r3, [r4, #8]
 8005dea:	9300      	str	r3, [sp, #0]
 8005dec:	4629      	mov	r1, r5
 8005dee:	f104 030e 	add.w	r3, r4, #14
 8005df2:	47b0      	blx	r6
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8005df4:	89e3      	ldrh	r3, [r4, #14]
          MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace,
 8005df6:	e795      	b.n	8005d24 <MCP_ReceivedPacket+0x94>
        MCPResponse = MC_ProfilerCommand(pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace, &pHandle->txLength,
 8005df8:	68a3      	ldr	r3, [r4, #8]
 8005dfa:	9300      	str	r3, [sp, #0]
 8005dfc:	4629      	mov	r1, r5
 8005dfe:	f104 030e 	add.w	r3, r4, #14
 8005e02:	f7fe ffad 	bl	8004d60 <MC_ProfilerCommand>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8005e06:	89e3      	ldrh	r3, [r4, #14]
        break;
 8005e08:	e78c      	b.n	8005d24 <MCP_ReceivedPacket+0x94>
          MCPResponse = (MCI_StartWithPolarizationMotor(pMCI) == true) ? MCP_CMD_OK : MCP_CMD_NOK;
 8005e0a:	4638      	mov	r0, r7
 8005e0c:	f7ff f850 	bl	8004eb0 <MCI_StartWithPolarizationMotor>
 8005e10:	f080 0001 	eor.w	r0, r0, #1
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8005e14:	89e3      	ldrh	r3, [r4, #14]
          MCPResponse = (MCI_StartWithPolarizationMotor(pMCI) == true) ? MCP_CMD_OK : MCP_CMD_NOK;
 8005e16:	b2c0      	uxtb	r0, r0
 8005e18:	e784      	b.n	8005d24 <MCP_ReceivedPacket+0x94>
    switch (command)
 8005e1a:	46b4      	mov	ip, r6
 8005e1c:	e7df      	b.n	8005dde <MCP_ReceivedPacket+0x14e>
 8005e1e:	bf00      	nop
 8005e20:	20002298 	.word	0x20002298
 8005e24:	20003420 	.word	0x20003420

08005e28 <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 8005e28:	b508      	push	{r3, lr}
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  (void)HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / SYS_TICK_FREQUENCY);
 8005e2a:	f004 fb3d 	bl	800a4a8 <HAL_RCC_GetHCLKFreq>
 8005e2e:	4b0a      	ldr	r3, [pc, #40]	; (8005e58 <MX_MotorControl_Init+0x30>)
 8005e30:	fba3 3000 	umull	r3, r0, r3, r0
 8005e34:	09c0      	lsrs	r0, r0, #7
 8005e36:	f003 fd0f 	bl	8009858 <HAL_SYSTICK_Config>
  HAL_NVIC_SetPriority(SysTick_IRQn, uwTickPrio, 0U);
 8005e3a:	4b08      	ldr	r3, [pc, #32]	; (8005e5c <MX_MotorControl_Init+0x34>)
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	6819      	ldr	r1, [r3, #0]
 8005e40:	f04f 30ff 	mov.w	r0, #4294967295
 8005e44:	f003 fcbc 	bl	80097c0 <HAL_NVIC_SetPriority>

  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI);
 8005e48:	4805      	ldr	r0, [pc, #20]	; (8005e60 <MX_MotorControl_Init+0x38>)
 8005e4a:	f7ff fa25 	bl	8005298 <MCboot>
  mc_lock_pins();
}
 8005e4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  mc_lock_pins();
 8005e52:	f7ff be0b 	b.w	8005a6c <mc_lock_pins>
 8005e56:	bf00      	nop
 8005e58:	10624dd3 	.word	0x10624dd3
 8005e5c:	20001b0c 	.word	0x20001b0c
 8005e60:	20003490 	.word	0x20003490

08005e64 <ai_network_get_error>:
}

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
  return ai_platform_network_get_error(network);
 8005e64:	f007 bfc6 	b.w	800ddf4 <ai_platform_network_get_error>

08005e68 <ai_network_inputs_get>:
}

AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
  if (network == AI_HANDLE_NULL) {
 8005e68:	b108      	cbz	r0, 8005e6e <ai_network_inputs_get+0x6>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
  }
  return ai_platform_inputs_get(network, n_buffer);
 8005e6a:	f008 b837 	b.w	800dedc <ai_platform_inputs_get>
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8005e6e:	4802      	ldr	r0, [pc, #8]	; (8005e78 <ai_network_inputs_get+0x10>)
 8005e70:	4b02      	ldr	r3, [pc, #8]	; (8005e7c <ai_network_inputs_get+0x14>)
 8005e72:	6003      	str	r3, [r0, #0]
  return ai_platform_inputs_get(network, n_buffer);
 8005e74:	f008 b832 	b.w	800dedc <ai_platform_inputs_get>
 8005e78:	200017f8 	.word	0x200017f8
 8005e7c:	a1c00100 	.word	0xa1c00100

08005e80 <ai_network_outputs_get>:
}

AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
  if (network == AI_HANDLE_NULL) {
 8005e80:	b108      	cbz	r0, 8005e86 <ai_network_outputs_get+0x6>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
  }
  return ai_platform_outputs_get(network, n_buffer);
 8005e82:	f008 b901 	b.w	800e088 <ai_platform_outputs_get>
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8005e86:	4802      	ldr	r0, [pc, #8]	; (8005e90 <ai_network_outputs_get+0x10>)
 8005e88:	4b02      	ldr	r3, [pc, #8]	; (8005e94 <ai_network_outputs_get+0x14>)
 8005e8a:	6003      	str	r3, [r0, #0]
  return ai_platform_outputs_get(network, n_buffer);
 8005e8c:	f008 b8fc 	b.w	800e088 <ai_platform_outputs_get>
 8005e90:	200017f8 	.word	0x200017f8
 8005e94:	a1c00100 	.word	0xa1c00100

08005e98 <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8005e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e9c:	b085      	sub	sp, #20
 8005e9e:	460d      	mov	r5, r1
 8005ea0:	9001      	str	r0, [sp, #4]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8005ea2:	f008 fa97 	bl	800e3d4 <ai_platform_network_init>
  if (!net_ctx) return false;
 8005ea6:	4604      	mov	r4, r0
 8005ea8:	2800      	cmp	r0, #0
 8005eaa:	f000 80fb 	beq.w	80060a4 <ai_network_init+0x20c>
  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 8005eae:	4e85      	ldr	r6, [pc, #532]	; (80060c4 <ai_network_init+0x22c>)
 8005eb0:	462a      	mov	r2, r5
 8005eb2:	2101      	movs	r1, #1
 8005eb4:	4630      	mov	r0, r6
 8005eb6:	f007 fed3 	bl	800dc60 <ai_platform_get_weights_map>
 8005eba:	9002      	str	r0, [sp, #8]
 8005ebc:	2800      	cmp	r0, #0
 8005ebe:	f000 80f4 	beq.w	80060aa <ai_network_init+0x212>
    model__model_a2c_network_sigma_array.format |= AI_FMT_FLAG_CONST;
 8005ec2:	f8df 8254 	ldr.w	r8, [pc, #596]	; 8006118 <ai_network_init+0x280>
    model__model_a2c_network_sigma_array.data = AI_PTR(g_network_weights_map[0] + 0);
 8005ec6:	6833      	ldr	r3, [r6, #0]
    model__model_a2c_network_sigma_array.format |= AI_FMT_FLAG_CONST;
 8005ec8:	f8d8 2000 	ldr.w	r2, [r8]
    _model_a2c_network_Constant_output_0_array.format |= AI_FMT_FLAG_CONST;
 8005ecc:	4e7e      	ldr	r6, [pc, #504]	; (80060c8 <ai_network_init+0x230>)
    onnxDiv_43_array.format |= AI_FMT_FLAG_CONST;
 8005ece:	487f      	ldr	r0, [pc, #508]	; (80060cc <ai_network_init+0x234>)
    onnxSub_40_array.format |= AI_FMT_FLAG_CONST;
 8005ed0:	497f      	ldr	r1, [pc, #508]	; (80060d0 <ai_network_init+0x238>)
    _model_a2c_network_actor_mlp_0_Gemm_output_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8005ed2:	4f80      	ldr	r7, [pc, #512]	; (80060d4 <ai_network_init+0x23c>)
    _model_a2c_network_actor_mlp_0_Gemm_output_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8005ed4:	f8df c244 	ldr.w	ip, [pc, #580]	; 800611c <ai_network_init+0x284>
    _model_a2c_network_actor_mlp_1_Gemm_output_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8005ed8:	f8df e244 	ldr.w	lr, [pc, #580]	; 8006120 <ai_network_init+0x288>
    value_weights_array.format |= AI_FMT_FLAG_CONST;
 8005edc:	f8df b244 	ldr.w	fp, [pc, #580]	; 8006124 <ai_network_init+0x28c>
    value_bias_array.format |= AI_FMT_FLAG_CONST;
 8005ee0:	f8df a244 	ldr.w	sl, [pc, #580]	; 8006128 <ai_network_init+0x290>
    model__model_a2c_network_sigma_array.format |= AI_FMT_FLAG_CONST;
 8005ee4:	f042 4980 	orr.w	r9, r2, #1073741824	; 0x40000000
    _model_a2c_network_Constant_output_0_array.format |= AI_FMT_FLAG_CONST;
 8005ee8:	6832      	ldr	r2, [r6, #0]
    model__model_a2c_network_sigma_array.format |= AI_FMT_FLAG_CONST;
 8005eea:	f8c8 9000 	str.w	r9, [r8]
    model__model_a2c_network_sigma_array.data = AI_PTR(g_network_weights_map[0] + 0);
 8005eee:	e9c8 3302 	strd	r3, r3, [r8, #8]
    _model_a2c_network_Constant_output_0_array.format |= AI_FMT_FLAG_CONST;
 8005ef2:	f042 4880 	orr.w	r8, r2, #1073741824	; 0x40000000
    onnxDiv_43_array.format |= AI_FMT_FLAG_CONST;
 8005ef6:	6802      	ldr	r2, [r0, #0]
    _model_a2c_network_Constant_output_0_array.format |= AI_FMT_FLAG_CONST;
 8005ef8:	f8c6 8000 	str.w	r8, [r6]
    onnxDiv_43_array.format |= AI_FMT_FLAG_CONST;
 8005efc:	f042 4880 	orr.w	r8, r2, #1073741824	; 0x40000000
    onnxSub_40_array.format |= AI_FMT_FLAG_CONST;
 8005f00:	680a      	ldr	r2, [r1, #0]
    onnxDiv_43_array.format |= AI_FMT_FLAG_CONST;
 8005f02:	f8c0 8000 	str.w	r8, [r0]
    onnxSub_40_array.format |= AI_FMT_FLAG_CONST;
 8005f06:	f042 4880 	orr.w	r8, r2, #1073741824	; 0x40000000
    _model_a2c_network_actor_mlp_0_Gemm_output_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8005f0a:	683a      	ldr	r2, [r7, #0]
    onnxSub_40_array.format |= AI_FMT_FLAG_CONST;
 8005f0c:	f8c1 8000 	str.w	r8, [r1]
    _model_a2c_network_actor_mlp_0_Gemm_output_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8005f10:	f042 4880 	orr.w	r8, r2, #1073741824	; 0x40000000
    _model_a2c_network_actor_mlp_0_Gemm_output_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8005f14:	f8dc 2000 	ldr.w	r2, [ip]
    _model_a2c_network_actor_mlp_0_Gemm_output_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8005f18:	f8c7 8000 	str.w	r8, [r7]
    _model_a2c_network_actor_mlp_0_Gemm_output_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8005f1c:	f042 4880 	orr.w	r8, r2, #1073741824	; 0x40000000
    _model_a2c_network_actor_mlp_1_Gemm_output_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8005f20:	f8de 2000 	ldr.w	r2, [lr]
    _model_a2c_network_actor_mlp_0_Gemm_output_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8005f24:	f8cc 8000 	str.w	r8, [ip]
    _model_a2c_network_actor_mlp_1_Gemm_output_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8005f28:	f042 4880 	orr.w	r8, r2, #1073741824	; 0x40000000
    _model_a2c_network_actor_mlp_1_Gemm_output_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8005f2c:	4a6a      	ldr	r2, [pc, #424]	; (80060d8 <ai_network_init+0x240>)
    _model_a2c_network_actor_mlp_1_Gemm_output_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8005f2e:	f8ce 8000 	str.w	r8, [lr]
    _model_a2c_network_actor_mlp_1_Gemm_output_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8005f32:	6817      	ldr	r7, [r2, #0]
    mu_weights_array.format |= AI_FMT_FLAG_CONST;
 8005f34:	f8df 91f4 	ldr.w	r9, [pc, #500]	; 800612c <ai_network_init+0x294>
    _model_a2c_network_actor_mlp_1_Gemm_output_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8005f38:	f047 4880 	orr.w	r8, r7, #1073741824	; 0x40000000
 8005f3c:	f8c2 8000 	str.w	r8, [r2]
    _model_a2c_network_actor_mlp_1_Gemm_output_0_bias_array.data = AI_PTR(g_network_weights_map[0] + 35616);
 8005f40:	f503 470b 	add.w	r7, r3, #35584	; 0x8b00
 8005f44:	4a64      	ldr	r2, [pc, #400]	; (80060d8 <ai_network_init+0x240>)
    mu_bias_array.format |= AI_FMT_FLAG_CONST;
 8005f46:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 8006130 <ai_network_init+0x298>
    _model_a2c_network_actor_mlp_1_Gemm_output_0_bias_array.data = AI_PTR(g_network_weights_map[0] + 35616);
 8005f4a:	3720      	adds	r7, #32
 8005f4c:	6097      	str	r7, [r2, #8]
 8005f4e:	9703      	str	r7, [sp, #12]
    _model_a2c_network_Constant_output_0_array.data = AI_PTR(g_network_weights_map[0] + 4);
 8005f50:	1d1f      	adds	r7, r3, #4
 8005f52:	e9c6 7702 	strd	r7, r7, [r6, #8]
    onnxDiv_43_array.data = AI_PTR(g_network_weights_map[0] + 8);
 8005f56:	f103 0608 	add.w	r6, r3, #8
    _model_a2c_network_actor_mlp_0_Gemm_output_0_bias_array.data = AI_PTR(g_network_weights_map[0] + 1568);
 8005f5a:	f503 62c4 	add.w	r2, r3, #1568	; 0x620
    onnxDiv_43_array.data = AI_PTR(g_network_weights_map[0] + 8);
 8005f5e:	e9c0 6602 	strd	r6, r6, [r0, #8]
    _model_a2c_network_actor_mlp_0_Gemm_output_0_weights_array.data = AI_PTR(g_network_weights_map[0] + 32);
 8005f62:	4f5c      	ldr	r7, [pc, #368]	; (80060d4 <ai_network_init+0x23c>)
    onnxSub_40_array.data = AI_PTR(g_network_weights_map[0] + 20);
 8005f64:	f103 0014 	add.w	r0, r3, #20
 8005f68:	e9c1 0002 	strd	r0, r0, [r1, #8]
    _model_a2c_network_actor_mlp_0_Gemm_output_0_bias_array.data = AI_PTR(g_network_weights_map[0] + 1568);
 8005f6c:	e9cc 2202 	strd	r2, r2, [ip, #8]
    _model_a2c_network_actor_mlp_0_Gemm_output_0_weights_array.data = AI_PTR(g_network_weights_map[0] + 32);
 8005f70:	f103 0120 	add.w	r1, r3, #32
    _model_a2c_network_actor_mlp_1_Gemm_output_0_weights_array.data = AI_PTR(g_network_weights_map[0] + 2080);
 8005f74:	f503 6202 	add.w	r2, r3, #2080	; 0x820
    _model_a2c_network_actor_mlp_0_Gemm_output_0_weights_array.data = AI_PTR(g_network_weights_map[0] + 32);
 8005f78:	e9c7 1102 	strd	r1, r1, [r7, #8]
    _model_a2c_network_actor_mlp_1_Gemm_output_0_weights_array.data = AI_PTR(g_network_weights_map[0] + 2080);
 8005f7c:	e9ce 2202 	strd	r2, r2, [lr, #8]
    _model_a2c_network_actor_mlp_2_Gemm_output_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8005f80:	4956      	ldr	r1, [pc, #344]	; (80060dc <ai_network_init+0x244>)
    _model_a2c_network_actor_mlp_1_Gemm_output_0_bias_array.data = AI_PTR(g_network_weights_map[0] + 35616);
 8005f82:	4a55      	ldr	r2, [pc, #340]	; (80060d8 <ai_network_init+0x240>)
 8005f84:	9f03      	ldr	r7, [sp, #12]
 8005f86:	60d7      	str	r7, [r2, #12]
    _model_a2c_network_actor_mlp_2_Gemm_output_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8005f88:	680a      	ldr	r2, [r1, #0]
    _model_a2c_network_actor_mlp_2_Gemm_output_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8005f8a:	4855      	ldr	r0, [pc, #340]	; (80060e0 <ai_network_init+0x248>)
    _model_a2c_network_actor_mlp_2_Gemm_output_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8005f8c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005f90:	600a      	str	r2, [r1, #0]
    _model_a2c_network_actor_mlp_2_Gemm_output_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8005f92:	6802      	ldr	r2, [r0, #0]
 8005f94:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005f98:	6002      	str	r2, [r0, #0]
    value_weights_array.format |= AI_FMT_FLAG_CONST;
 8005f9a:	f8db 2000 	ldr.w	r2, [fp]
 8005f9e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005fa2:	f8cb 2000 	str.w	r2, [fp]
    value_bias_array.format |= AI_FMT_FLAG_CONST;
 8005fa6:	f8da 2000 	ldr.w	r2, [sl]
 8005faa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005fae:	f8ca 2000 	str.w	r2, [sl]
    mu_weights_array.format |= AI_FMT_FLAG_CONST;
 8005fb2:	f8d9 2000 	ldr.w	r2, [r9]
 8005fb6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005fba:	f8c9 2000 	str.w	r2, [r9]
    mu_bias_array.format |= AI_FMT_FLAG_CONST;
 8005fbe:	f8d8 2000 	ldr.w	r2, [r8]
 8005fc2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005fc6:	f8c8 2000 	str.w	r2, [r8]
    _model_a2c_network_actor_mlp_2_Gemm_output_0_weights_array.data = AI_PTR(g_network_weights_map[0] + 35872);
 8005fca:	f503 420c 	add.w	r2, r3, #35840	; 0x8c00
 8005fce:	3220      	adds	r2, #32
 8005fd0:	e9c1 2202 	strd	r2, r2, [r1, #8]
    _model_a2c_network_actor_mlp_2_Gemm_output_0_bias_array.data = AI_PTR(g_network_weights_map[0] + 44448);
 8005fd4:	f503 422d 	add.w	r2, r3, #44288	; 0xad00
 8005fd8:	32a0      	adds	r2, #160	; 0xa0
 8005fda:	e9c0 2202 	strd	r2, r2, [r0, #8]
    value_weights_array.data = AI_PTR(g_network_weights_map[0] + 44576);
 8005fde:	f503 422e 	add.w	r2, r3, #44544	; 0xae00
 8005fe2:	3220      	adds	r2, #32
 8005fe4:	e9cb 2202 	strd	r2, r2, [fp, #8]
    value_bias_array.data = AI_PTR(g_network_weights_map[0] + 44704);
 8005fe8:	f503 422e 	add.w	r2, r3, #44544	; 0xae00
 8005fec:	32a0      	adds	r2, #160	; 0xa0
 8005fee:	e9ca 2202 	strd	r2, r2, [sl, #8]
    mu_weights_array.data = AI_PTR(g_network_weights_map[0] + 44708);
 8005ff2:	f503 422e 	add.w	r2, r3, #44544	; 0xae00
    mu_bias_array.data = AI_PTR(g_network_weights_map[0] + 44836);
 8005ff6:	f503 432f 	add.w	r3, r3, #44800	; 0xaf00
    mu_weights_array.data = AI_PTR(g_network_weights_map[0] + 44708);
 8005ffa:	32a4      	adds	r2, #164	; 0xa4
    mu_bias_array.data = AI_PTR(g_network_weights_map[0] + 44836);
 8005ffc:	3324      	adds	r3, #36	; 0x24
    mu_weights_array.data = AI_PTR(g_network_weights_map[0] + 44708);
 8005ffe:	e9c9 2202 	strd	r2, r2, [r9, #8]
    mu_bias_array.data = AI_PTR(g_network_weights_map[0] + 44836);
 8006002:	e9c8 3302 	strd	r3, r3, [r8, #8]
  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 8006006:	4e37      	ldr	r6, [pc, #220]	; (80060e4 <ai_network_init+0x24c>)
 8006008:	462a      	mov	r2, r5
 800600a:	2101      	movs	r1, #1
 800600c:	4630      	mov	r0, r6
 800600e:	f007 fe7b 	bl	800dd08 <ai_platform_get_activations_map>
 8006012:	4605      	mov	r5, r0
 8006014:	2800      	cmp	r0, #0
 8006016:	d04e      	beq.n	80060b6 <ai_network_init+0x21e>
    obs_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8006018:	6833      	ldr	r3, [r6, #0]
 800601a:	4a33      	ldr	r2, [pc, #204]	; (80060e8 <ai_network_init+0x250>)
    _model_a2c_network_actor_mlp_0_Gemm_output_0_output_array.data = AI_PTR(g_network_activations_map[0] + 12);
 800601c:	4933      	ldr	r1, [pc, #204]	; (80060ec <ai_network_init+0x254>)
    _model_a2c_network_actor_mlp_Concat_output_0_output_array.data = AI_PTR(g_network_activations_map[0] + 524);
 800601e:	f8df 9114 	ldr.w	r9, [pc, #276]	; 8006134 <ai_network_init+0x29c>
    _model_a2c_network_actor_mlp_Concat_1_output_0_output_array.data = AI_PTR(g_network_activations_map[0] + 524);
 8006022:	f8df 8114 	ldr.w	r8, [pc, #276]	; 8006138 <ai_network_init+0x2a0>
    _model_a2c_network_actor_mlp_activations_1_Elu_output_0_output_array.data = AI_PTR(g_network_activations_map[0] + 268);
 8006026:	f8df e114 	ldr.w	lr, [pc, #276]	; 800613c <ai_network_init+0x2a4>
    _model_a2c_network_actor_mlp_activations_2_Elu_output_0_output_array.data = AI_PTR(g_network_activations_map[0] + 128);
 800602a:	f8df c114 	ldr.w	ip, [pc, #276]	; 8006140 <ai_network_init+0x2a8>
    log_std_output_array.data = AI_PTR(g_network_activations_map[0] + 12);
 800602e:	4830      	ldr	r0, [pc, #192]	; (80060f0 <ai_network_init+0x258>)
    mu_output_array.data = AI_PTR(g_network_activations_map[0] + 4);
 8006030:	4e30      	ldr	r6, [pc, #192]	; (80060f4 <ai_network_init+0x25c>)
    _model_a2c_network_Mul_output_0_output_array.data = AI_PTR(g_network_activations_map[0] + 8);
 8006032:	4c31      	ldr	r4, [pc, #196]	; (80060f8 <ai_network_init+0x260>)
    obs_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8006034:	e9c2 3302 	strd	r3, r3, [r2, #8]
    _model_running_mean_std_Sub_output_0_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8006038:	4a30      	ldr	r2, [pc, #192]	; (80060fc <ai_network_init+0x264>)
 800603a:	e9c2 3302 	strd	r3, r3, [r2, #8]
    _model_running_mean_std_Div_output_0_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800603e:	4a30      	ldr	r2, [pc, #192]	; (8006100 <ai_network_init+0x268>)
 8006040:	e9c2 3302 	strd	r3, r3, [r2, #8]
    _model_running_mean_std_Clip_output_0_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8006044:	4a2f      	ldr	r2, [pc, #188]	; (8006104 <ai_network_init+0x26c>)
 8006046:	e9c2 3302 	strd	r3, r3, [r2, #8]
    _model_a2c_network_actor_mlp_0_Gemm_output_0_output_array.data = AI_PTR(g_network_activations_map[0] + 12);
 800604a:	f103 020c 	add.w	r2, r3, #12
 800604e:	e9c1 2202 	strd	r2, r2, [r1, #8]
    _model_a2c_network_actor_mlp_activations_0_Elu_output_0_output_array.data = AI_PTR(g_network_activations_map[0] + 12);
 8006052:	492d      	ldr	r1, [pc, #180]	; (8006108 <ai_network_init+0x270>)
    log_std_output_array.data = AI_PTR(g_network_activations_map[0] + 12);
 8006054:	6082      	str	r2, [r0, #8]
    _model_a2c_network_actor_mlp_activations_0_Elu_output_0_output_array.data = AI_PTR(g_network_activations_map[0] + 12);
 8006056:	e9c1 2202 	strd	r2, r2, [r1, #8]
    _model_a2c_network_actor_mlp_1_Gemm_output_0_output_array.data = AI_PTR(g_network_activations_map[0] + 12);
 800605a:	492c      	ldr	r1, [pc, #176]	; (800610c <ai_network_init+0x274>)
 800605c:	e9c1 2202 	strd	r2, r2, [r1, #8]
    _model_a2c_network_actor_mlp_2_Gemm_output_0_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8006060:	492b      	ldr	r1, [pc, #172]	; (8006110 <ai_network_init+0x278>)
 8006062:	e9c1 3302 	strd	r3, r3, [r1, #8]
    value_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8006066:	492b      	ldr	r1, [pc, #172]	; (8006114 <ai_network_init+0x27c>)
 8006068:	e9c1 3302 	strd	r3, r3, [r1, #8]
    _model_a2c_network_actor_mlp_Concat_output_0_output_array.data = AI_PTR(g_network_activations_map[0] + 524);
 800606c:	f503 7103 	add.w	r1, r3, #524	; 0x20c
 8006070:	e9c9 1102 	strd	r1, r1, [r9, #8]
    _model_a2c_network_actor_mlp_Concat_1_output_0_output_array.data = AI_PTR(g_network_activations_map[0] + 524);
 8006074:	e9c8 1102 	strd	r1, r1, [r8, #8]
    _model_a2c_network_actor_mlp_activations_1_Elu_output_0_output_array.data = AI_PTR(g_network_activations_map[0] + 268);
 8006078:	f503 7186 	add.w	r1, r3, #268	; 0x10c
 800607c:	e9ce 1102 	strd	r1, r1, [lr, #8]
    _model_a2c_network_actor_mlp_activations_2_Elu_output_0_output_array.data = AI_PTR(g_network_activations_map[0] + 128);
 8006080:	f103 0180 	add.w	r1, r3, #128	; 0x80
 8006084:	e9cc 1102 	strd	r1, r1, [ip, #8]
    mu_output_array.data = AI_PTR(g_network_activations_map[0] + 4);
 8006088:	1d19      	adds	r1, r3, #4
    _model_a2c_network_Mul_output_0_output_array.data = AI_PTR(g_network_activations_map[0] + 8);
 800608a:	3308      	adds	r3, #8
    mu_output_array.data = AI_PTR(g_network_activations_map[0] + 4);
 800608c:	e9c6 1102 	strd	r1, r1, [r6, #8]
    _model_a2c_network_Mul_output_0_output_array.data = AI_PTR(g_network_activations_map[0] + 8);
 8006090:	e9c4 3302 	strd	r3, r3, [r4, #8]
    log_std_output_array.data = AI_PTR(g_network_activations_map[0] + 12);
 8006094:	60c2      	str	r2, [r0, #12]

  ai_bool ok = true;
  ok &= network_configure_weights(net_ctx, params);
  ok &= network_configure_activations(net_ctx, params);

  ok &= ai_platform_network_post_init(network);
 8006096:	9801      	ldr	r0, [sp, #4]
 8006098:	f008 fa8a 	bl	800e5b0 <ai_platform_network_post_init>
 800609c:	9b02      	ldr	r3, [sp, #8]
 800609e:	4028      	ands	r0, r5
 80060a0:	4003      	ands	r3, r0
 80060a2:	b2d8      	uxtb	r0, r3

  return ok;
}
 80060a4:	b005      	add	sp, #20
 80060a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 80060aa:	2212      	movs	r2, #18
 80060ac:	2130      	movs	r1, #48	; 0x30
 80060ae:	4620      	mov	r0, r4
 80060b0:	f007 ff0e 	bl	800ded0 <ai_platform_network_set_error>
  return false;
 80060b4:	e7a7      	b.n	8006006 <ai_network_init+0x16e>
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 80060b6:	2213      	movs	r2, #19
 80060b8:	4620      	mov	r0, r4
 80060ba:	2130      	movs	r1, #48	; 0x30
 80060bc:	f007 ff08 	bl	800ded0 <ai_platform_network_set_error>
  return false;
 80060c0:	e7e9      	b.n	8006096 <ai_network_init+0x1fe>
 80060c2:	bf00      	nop
 80060c4:	200035cc 	.word	0x200035cc
 80060c8:	20001320 	.word	0x20001320
 80060cc:	200019c0 	.word	0x200019c0
 80060d0:	200019f0 	.word	0x200019f0
 80060d4:	20001418 	.word	0x20001418
 80060d8:	20001448 	.word	0x20001448
 80060dc:	20001568 	.word	0x20001568
 80060e0:	200014f0 	.word	0x200014f0
 80060e4:	200035c8 	.word	0x200035c8
 80060e8:	20001990 	.word	0x20001990
 80060ec:	200013e8 	.word	0x200013e8
 80060f0:	20001888 	.word	0x20001888
 80060f4:	20001930 	.word	0x20001930
 80060f8:	20001370 	.word	0x20001370
 80060fc:	200017e8 	.word	0x200017e8
 8006100:	20001798 	.word	0x20001798
 8006104:	20001748 	.word	0x20001748
 8006108:	20001658 	.word	0x20001658
 800610c:	20001490 	.word	0x20001490
 8006110:	20001538 	.word	0x20001538
 8006114:	20001a68 	.word	0x20001a68
 8006118:	200018b8 	.word	0x200018b8
 800611c:	200013a0 	.word	0x200013a0
 8006120:	200014c0 	.word	0x200014c0
 8006124:	20001a98 	.word	0x20001a98
 8006128:	20001a20 	.word	0x20001a20
 800612c:	20001960 	.word	0x20001960
 8006130:	200018e8 	.word	0x200018e8
 8006134:	20001608 	.word	0x20001608
 8006138:	200015b8 	.word	0x200015b8
 800613c:	200016a8 	.word	0x200016a8
 8006140:	200016f8 	.word	0x200016f8

08006144 <ai_network_create_and_init>:
{
 8006144:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006148:	b091      	sub	sp, #68	; 0x44
  return ai_platform_network_create(
 800614a:	2300      	movs	r3, #0
 800614c:	2405      	movs	r4, #5
 800614e:	9400      	str	r4, [sp, #0]
 8006150:	9301      	str	r3, [sp, #4]
{
 8006152:	460f      	mov	r7, r1
 8006154:	4616      	mov	r6, r2
  return ai_platform_network_create(
 8006156:	4619      	mov	r1, r3
 8006158:	4a26      	ldr	r2, [pc, #152]	; (80061f4 <ai_network_create_and_init+0xb0>)
 800615a:	2301      	movs	r3, #1
{
 800615c:	4680      	mov	r8, r0
  return ai_platform_network_create(
 800615e:	f008 f863 	bl	800e228 <ai_platform_network_create>
    if (err.type != AI_ERROR_NONE)
 8006162:	f010 09ff 	ands.w	r9, r0, #255	; 0xff
 8006166:	4604      	mov	r4, r0
 8006168:	d003      	beq.n	8006172 <ai_network_create_and_init+0x2e>
}
 800616a:	4620      	mov	r0, r4
 800616c:	b011      	add	sp, #68	; 0x44
 800616e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (ai_network_data_params_get(&params) != true) {
 8006172:	a802      	add	r0, sp, #8
 8006174:	f000 f842 	bl	80061fc <ai_network_data_params_get>
 8006178:	b3a8      	cbz	r0, 80061e6 <ai_network_create_and_init+0xa2>
    if (activations) {
 800617a:	b17f      	cbz	r7, 800619c <ai_network_create_and_init+0x58>
        for (int idx=0;idx<params.map_activations.size;idx++)
 800617c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8006180:	b163      	cbz	r3, 800619c <ai_network_create_and_init+0x58>
 8006182:	3f04      	subs	r7, #4
 8006184:	464d      	mov	r5, r9
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8006186:	4629      	mov	r1, r5
 8006188:	f857 2f04 	ldr.w	r2, [r7, #4]!
 800618c:	a805      	add	r0, sp, #20
 800618e:	f007 fd53 	bl	800dc38 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 8006192:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8006196:	3501      	adds	r5, #1
 8006198:	42ab      	cmp	r3, r5
 800619a:	dcf4      	bgt.n	8006186 <ai_network_create_and_init+0x42>
    if (weights) {
 800619c:	b17e      	cbz	r6, 80061be <ai_network_create_and_init+0x7a>
        for (int idx=0;idx<params.map_weights.size;idx++)
 800619e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80061a2:	b163      	cbz	r3, 80061be <ai_network_create_and_init+0x7a>
 80061a4:	3e04      	subs	r6, #4
 80061a6:	2500      	movs	r5, #0
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 80061a8:	4629      	mov	r1, r5
 80061aa:	f856 2f04 	ldr.w	r2, [r6, #4]!
 80061ae:	a803      	add	r0, sp, #12
 80061b0:	f007 fd42 	bl	800dc38 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 80061b4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80061b8:	3501      	adds	r5, #1
 80061ba:	42ab      	cmp	r3, r5
 80061bc:	dcf4      	bgt.n	80061a8 <ai_network_create_and_init+0x64>
    if (ai_network_init(*network, &params) != true) {
 80061be:	f8d8 0000 	ldr.w	r0, [r8]
 80061c2:	a902      	add	r1, sp, #8
 80061c4:	f7ff fe68 	bl	8005e98 <ai_network_init>
 80061c8:	b128      	cbz	r0, 80061d6 <ai_network_create_and_init+0x92>
    return err;
 80061ca:	f369 0407 	bfi	r4, r9, #0, #8
}
 80061ce:	4620      	mov	r0, r4
 80061d0:	b011      	add	sp, #68	; 0x44
 80061d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return ai_platform_network_get_error(network);
 80061d6:	f8d8 0000 	ldr.w	r0, [r8]
 80061da:	f007 fe0b 	bl	800ddf4 <ai_platform_network_get_error>
 80061de:	fa5f f980 	uxtb.w	r9, r0
 80061e2:	4604      	mov	r4, r0
 80061e4:	e7f1      	b.n	80061ca <ai_network_create_and_init+0x86>
 80061e6:	f8d8 0000 	ldr.w	r0, [r8]
 80061ea:	f007 fe03 	bl	800ddf4 <ai_platform_network_get_error>
 80061ee:	4604      	mov	r4, r0
        return err;
 80061f0:	e7bb      	b.n	800616a <ai_network_create_and_init+0x26>
 80061f2:	bf00      	nop
 80061f4:	200017f8 	.word	0x200017f8

080061f8 <ai_network_run>:

AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 80061f8:	f008 ba62 	b.w	800e6c0 <ai_platform_network_process>

080061fc <ai_network_data_params_get>:
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
  if (!params) return false;
 80061fc:	4603      	mov	r3, r0
 80061fe:	b198      	cbz	r0, 8006228 <ai_network_data_params_get+0x2c>
{
 8006200:	b510      	push	{r4, lr}
  
  const ai_buffer_array map_activations = 
 8006202:	4c0a      	ldr	r4, [pc, #40]	; (800622c <ai_network_data_params_get+0x30>)
 8006204:	e894 0003 	ldmia.w	r4, {r0, r1}
{
 8006208:	b084      	sub	sp, #16
  const ai_buffer_array map_activations = 
 800620a:	466a      	mov	r2, sp
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 800620c:	3408      	adds	r4, #8
  const ai_buffer_array map_activations = 
 800620e:	e882 0003 	stmia.w	r2, {r0, r1}
  const ai_buffer_array map_weights = 
 8006212:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006216:	ac02      	add	r4, sp, #8
 8006218:	e884 0003 	stmia.w	r4, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 800621c:	4621      	mov	r1, r4
 800621e:	4618      	mov	r0, r3
 8006220:	f007 fdc6 	bl	800ddb0 <ai_platform_bind_network_params>
}
 8006224:	b004      	add	sp, #16
 8006226:	bd10      	pop	{r4, pc}
 8006228:	4770      	bx	lr
 800622a:	bf00      	nop
 800622c:	08011540 	.word	0x08011540

08006230 <PWMC_GetPhaseCurrents>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctGetPhaseCurrents(pHandle, Iab);
 8006230:	6803      	ldr	r3, [r0, #0]
 8006232:	4718      	bx	r3

08006234 <PWMC_SetPhaseVoltage>:
  * @param  Valfa_beta: Voltage Components expressed in the @f$(\alpha, \beta)@f$ reference frame.
  * @retval #MC_NO_ERROR if no error occurred or #MC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage(PWMC_Handle_t *pHandle, alphabeta_t Valfa_beta)
{
 8006234:	b530      	push	{r4, r5, lr}
    int32_t wTimePhA;
    int32_t wTimePhB;
    int32_t wTimePhC;

    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8006236:	f8b0 e072 	ldrh.w	lr, [r0, #114]	; 0x72
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 800623a:	f8b0 204e 	ldrh.w	r2, [r0, #78]	; 0x4e
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 800623e:	ea4f 4c21 	mov.w	ip, r1, asr #16
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 8006242:	b20b      	sxth	r3, r1
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8006244:	fb0e fc0c 	mul.w	ip, lr, ip
 8006248:	ebcc 7ccc 	rsb	ip, ip, ip, lsl #31
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 800624c:	fb02 f303 	mul.w	r3, r2, r3
{
 8006250:	b083      	sub	sp, #12

    wX = wUBeta;
    wY = (wUBeta + wUAlpha) / 2;
 8006252:	eb03 024c 	add.w	r2, r3, ip, lsl #1
    wZ = (wUBeta - wUAlpha) / 2;
 8006256:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
{
 800625a:	9101      	str	r1, [sp, #4]
    wZ = (wUBeta - wUAlpha) / 2;
 800625c:	eb03 74d3 	add.w	r4, r3, r3, lsr #31
    wY = (wUBeta + wUAlpha) / 2;
 8006260:	eb02 71d2 	add.w	r1, r2, r2, lsr #31

    /* Sector calculation from wX, wY, wZ */
    if (wY < 0)
 8006264:	1c55      	adds	r5, r2, #1
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8006266:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    wY = (wUBeta + wUAlpha) / 2;
 800626a:	ea4f 0161 	mov.w	r1, r1, asr #1
    wZ = (wUBeta - wUAlpha) / 2;
 800626e:	ea4f 0464 	mov.w	r4, r4, asr #1
    if (wY < 0)
 8006272:	f2c0 809c 	blt.w	80063ae <PWMC_SetPhaseVoltage+0x17a>
        }
        }
    }
    else /* wY > 0 */
    {
      if (wZ >= 0)
 8006276:	1c5d      	adds	r5, r3, #1
 8006278:	db65      	blt.n	8006346 <PWMC_SetPhaseVoltage+0x112>
      {
        pHandle->Sector = SECTOR_2;
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 800627a:	1b09      	subs	r1, r1, r4
 800627c:	bf44      	itt	mi
 800627e:	f501 317f 	addmi.w	r1, r1, #261120	; 0x3fc00
 8006282:	f201 31ff 	addwmi	r1, r1, #1023	; 0x3ff
        wTimePhB = wTimePhA + (wZ / 131072);
 8006286:	2b00      	cmp	r3, #0
 8006288:	bfbc      	itt	lt
 800628a:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
 800628e:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
        wTimePhC = wTimePhA - (wY / 131072);
 8006292:	2a00      	cmp	r2, #0
 8006294:	bfb8      	it	lt
 8006296:	f502 327f 	addlt.w	r2, r2, #261120	; 0x3fc00
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 800629a:	ea4f 0e9e 	mov.w	lr, lr, lsr #2

        if(true == pHandle->SingleShuntTopology)
 800629e:	f890 4087 	ldrb.w	r4, [r0, #135]	; 0x87
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 80062a2:	eb0e 41a1 	add.w	r1, lr, r1, asr #18
        pHandle->Sector = SECTOR_2;
 80062a6:	f04f 0c01 	mov.w	ip, #1
        wTimePhC = wTimePhA - (wY / 131072);
 80062aa:	bfb8      	it	lt
 80062ac:	f202 32ff 	addwlt	r2, r2, #1023	; 0x3ff
        pHandle->Sector = SECTOR_2;
 80062b0:	f880 c07c 	strb.w	ip, [r0, #124]	; 0x7c
        wTimePhB = wTimePhA + (wZ / 131072);
 80062b4:	eb01 43a3 	add.w	r3, r1, r3, asr #18
        wTimePhC = wTimePhA - (wY / 131072);
 80062b8:	eba1 42a2 	sub.w	r2, r1, r2, asr #18
        if(true == pHandle->SingleShuntTopology)
 80062bc:	2c00      	cmp	r4, #0
 80062be:	f040 80a0 	bne.w	8006402 <PWMC_SetPhaseVoltage+0x1ce>
          pHandle->midDuty = 0U;
          pHandle->highDuty = 1U;
        }
        else
        {
        pHandle->lowDuty = (uint16_t)wTimePhB;
 80062c2:	fa1f fe83 	uxth.w	lr, r3
        pHandle->midDuty = (uint16_t)wTimePhA;
 80062c6:	fa1f fc81 	uxth.w	ip, r1
        pHandle->highDuty = (uint16_t)wTimePhC;
 80062ca:	b294      	uxth	r4, r2
          pHandle->highDuty = (uint16_t)wTimePhA;
 80062cc:	f8a0 405c 	strh.w	r4, [r0, #92]	; 0x5c

    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));

    if (1U == pHandle->DTTest)
 80062d0:	f8b0 4070 	ldrh.w	r4, [r0, #112]	; 0x70
          pHandle->lowDuty = (uint16_t)wTimePhC;
 80062d4:	f8a0 e058 	strh.w	lr, [r0, #88]	; 0x58
 80062d8:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 80062dc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80062e0:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 80062e4:	b289      	uxth	r1, r1
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	b292      	uxth	r2, r2
    if (1U == pHandle->DTTest)
 80062ea:	2c01      	cmp	r4, #1
          pHandle->midDuty = (uint16_t)wTimePhB;
 80062ec:	f8a0 c05a 	strh.w	ip, [r0, #90]	; 0x5a
    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
 80062f0:	f8a0 1050 	strh.w	r1, [r0, #80]	; 0x50
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 80062f4:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));
 80062f8:	f8a0 2054 	strh.w	r2, [r0, #84]	; 0x54
    if (1U == pHandle->DTTest)
 80062fc:	d11e      	bne.n	800633c <PWMC_SetPhaseVoltage+0x108>
    {
      /* Dead time compensation */
      if (pHandle->Ia > 0)
 80062fe:	f9b0 4062 	ldrsh.w	r4, [r0, #98]	; 0x62
 8006302:	2c00      	cmp	r4, #0
      {
        pHandle->CntPhA += pHandle->DTCompCnt;
 8006304:	f8b0 4074 	ldrh.w	r4, [r0, #116]	; 0x74
 8006308:	bfcc      	ite	gt
 800630a:	1909      	addgt	r1, r1, r4
      }
      else
      {
        pHandle->CntPhA -= pHandle->DTCompCnt;
 800630c:	1b09      	suble	r1, r1, r4
 800630e:	b289      	uxth	r1, r1
 8006310:	f8a0 1050 	strh.w	r1, [r0, #80]	; 0x50
      }

      if (pHandle->Ib > 0)
 8006314:	f9b0 1064 	ldrsh.w	r1, [r0, #100]	; 0x64
 8006318:	2900      	cmp	r1, #0
      else
      {
        pHandle->CntPhB -= pHandle->DTCompCnt;
      }

      if (pHandle->Ic > 0)
 800631a:	f9b0 1066 	ldrsh.w	r1, [r0, #102]	; 0x66
        pHandle->CntPhB += pHandle->DTCompCnt;
 800631e:	bfcc      	ite	gt
 8006320:	191b      	addgt	r3, r3, r4
        pHandle->CntPhB -= pHandle->DTCompCnt;
 8006322:	1b1b      	suble	r3, r3, r4
      if (pHandle->Ic > 0)
 8006324:	2900      	cmp	r1, #0
        pHandle->CntPhB -= pHandle->DTCompCnt;
 8006326:	b29b      	uxth	r3, r3
      {
        pHandle->CntPhC += pHandle->DTCompCnt;
 8006328:	bfcc      	ite	gt
 800632a:	18a4      	addgt	r4, r4, r2
      }
      else
      {
        pHandle->CntPhC -= pHandle->DTCompCnt;
 800632c:	1b12      	suble	r2, r2, r4
 800632e:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
        pHandle->CntPhC += pHandle->DTCompCnt;
 8006332:	bfcc      	ite	gt
 8006334:	f8a0 4054 	strhgt.w	r4, [r0, #84]	; 0x54
        pHandle->CntPhC -= pHandle->DTCompCnt;
 8006338:	f8a0 2054 	strhle.w	r2, [r0, #84]	; 0x54
      }
    }
    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 800633c:	6943      	ldr	r3, [r0, #20]
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (returnValue);
}
 800633e:	b003      	add	sp, #12
 8006340:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 8006344:	4718      	bx	r3
        if ( wX <= 0 )
 8006346:	f1bc 0f00 	cmp.w	ip, #0
 800634a:	f340 808c 	ble.w	8006466 <PWMC_SetPhaseVoltage+0x232>
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 800634e:	ebbc 0404 	subs.w	r4, ip, r4
 8006352:	bf44      	itt	mi
 8006354:	f504 347f 	addmi.w	r4, r4, #261120	; 0x3fc00
 8006358:	f204 34ff 	addwmi	r4, r4, #1023	; 0x3ff
          wTimePhB = wTimePhA + (wZ / 131072);
 800635c:	2b00      	cmp	r3, #0
 800635e:	bfbc      	itt	lt
 8006360:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
 8006364:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 8006368:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
          wTimePhC = wTimePhB - (wX / 131072);
 800636c:	f1bc 0f00 	cmp.w	ip, #0
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 8006370:	eb0e 41a4 	add.w	r1, lr, r4, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 8006374:	bfb8      	it	lt
 8006376:	f50c 3cff 	addlt.w	ip, ip, #130560	; 0x1fe00
          if((pHandle->DPWM_Mode == true) || (pHandle->SingleShuntTopology == true))
 800637a:	f890 407f 	ldrb.w	r4, [r0, #127]	; 0x7f
          pHandle->Sector = SECTOR_1;
 800637e:	f04f 0200 	mov.w	r2, #0
          wTimePhB = wTimePhA + (wZ / 131072);
 8006382:	eb01 43a3 	add.w	r3, r1, r3, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 8006386:	bfb8      	it	lt
 8006388:	f20c 1cff 	addwlt	ip, ip, #511	; 0x1ff
          pHandle->Sector = SECTOR_1;
 800638c:	f880 207c 	strb.w	r2, [r0, #124]	; 0x7c
          wTimePhC = wTimePhB - (wX / 131072);
 8006390:	eba3 426c 	sub.w	r2, r3, ip, asr #17
          if((pHandle->DPWM_Mode == true) || (pHandle->SingleShuntTopology == true))
 8006394:	2c00      	cmp	r4, #0
 8006396:	f040 80c6 	bne.w	8006526 <PWMC_SetPhaseVoltage+0x2f2>
 800639a:	f890 5087 	ldrb.w	r5, [r0, #135]	; 0x87
 800639e:	2d00      	cmp	r5, #0
 80063a0:	f000 80d3 	beq.w	800654a <PWMC_SetPhaseVoltage+0x316>
 80063a4:	f04f 0e02 	mov.w	lr, #2
 80063a8:	f04f 0c01 	mov.w	ip, #1
 80063ac:	e78e      	b.n	80062cc <PWMC_SetPhaseVoltage+0x98>
      if (wZ < 0)
 80063ae:	1c5d      	adds	r5, r3, #1
 80063b0:	f2c0 8085 	blt.w	80064be <PWMC_SetPhaseVoltage+0x28a>
        if (wX <= 0)
 80063b4:	f1bc 0f00 	cmp.w	ip, #0
 80063b8:	dd29      	ble.n	800640e <PWMC_SetPhaseVoltage+0x1da>
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 80063ba:	ebb1 010c 	subs.w	r1, r1, ip
 80063be:	bf44      	itt	mi
 80063c0:	f501 317f 	addmi.w	r1, r1, #261120	; 0x3fc00
 80063c4:	f201 31ff 	addwmi	r1, r1, #1023	; 0x3ff
          wTimePhC = wTimePhA - (wY / 131072);
 80063c8:	2a00      	cmp	r2, #0
 80063ca:	bfb8      	it	lt
 80063cc:	f502 327f 	addlt.w	r2, r2, #261120	; 0x3fc00
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 80063d0:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
 80063d4:	eb0e 41a1 	add.w	r1, lr, r1, asr #18
          wTimePhC = wTimePhA - (wY / 131072);
 80063d8:	bfb8      	it	lt
 80063da:	f202 32ff 	addwlt	r2, r2, #1023	; 0x3ff
          if(true == pHandle->SingleShuntTopology)
 80063de:	f890 4087 	ldrb.w	r4, [r0, #135]	; 0x87
          pHandle->Sector = SECTOR_3;
 80063e2:	2302      	movs	r3, #2
          wTimePhC = wTimePhA - (wY / 131072);
 80063e4:	eba1 42a2 	sub.w	r2, r1, r2, asr #18
          pHandle->Sector = SECTOR_3;
 80063e8:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
          wTimePhB = wTimePhC + (wX / 131072);
 80063ec:	eb02 436c 	add.w	r3, r2, ip, asr #17
          if(true == pHandle->SingleShuntTopology)
 80063f0:	2c00      	cmp	r4, #0
 80063f2:	f040 8092 	bne.w	800651a <PWMC_SetPhaseVoltage+0x2e6>
          pHandle->lowDuty = (uint16_t)wTimePhB;
 80063f6:	fa1f fe83 	uxth.w	lr, r3
          pHandle->midDuty = (uint16_t)wTimePhC;
 80063fa:	fa1f fc82 	uxth.w	ip, r2
          pHandle->highDuty = (uint16_t)wTimePhA;
 80063fe:	b28c      	uxth	r4, r1
 8006400:	e764      	b.n	80062cc <PWMC_SetPhaseVoltage+0x98>
 8006402:	f04f 0e02 	mov.w	lr, #2
 8006406:	f04f 0c00 	mov.w	ip, #0
 800640a:	2401      	movs	r4, #1
 800640c:	e75e      	b.n	80062cc <PWMC_SetPhaseVoltage+0x98>
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 800640e:	ebbc 0404 	subs.w	r4, ip, r4
 8006412:	bf44      	itt	mi
 8006414:	f504 347f 	addmi.w	r4, r4, #261120	; 0x3fc00
 8006418:	f204 34ff 	addwmi	r4, r4, #1023	; 0x3ff
          wTimePhB = wTimePhA + (wZ / 131072);
 800641c:	2b00      	cmp	r3, #0
 800641e:	bfb8      	it	lt
 8006420:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
          pHandle->Sector = SECTOR_4;
 8006424:	f04f 0203 	mov.w	r2, #3
          wTimePhB = wTimePhA + (wZ / 131072);
 8006428:	bfb8      	it	lt
 800642a:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
          pHandle->Sector = SECTOR_4;
 800642e:	f880 207c 	strb.w	r2, [r0, #124]	; 0x7c
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 8006432:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
          wTimePhC = wTimePhB - (wX / 131072);
 8006436:	f1bc 0200 	subs.w	r2, ip, #0
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 800643a:	eb0e 41a4 	add.w	r1, lr, r4, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 800643e:	bfb8      	it	lt
 8006440:	f502 32ff 	addlt.w	r2, r2, #130560	; 0x1fe00
          if(true == pHandle->SingleShuntTopology)
 8006444:	f890 4087 	ldrb.w	r4, [r0, #135]	; 0x87
          wTimePhB = wTimePhA + (wZ / 131072);
 8006448:	eb01 43a3 	add.w	r3, r1, r3, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 800644c:	bfb8      	it	lt
 800644e:	f202 12ff 	addwlt	r2, r2, #511	; 0x1ff
 8006452:	eba3 4262 	sub.w	r2, r3, r2, asr #17
          if(true == pHandle->SingleShuntTopology)
 8006456:	2c00      	cmp	r4, #0
 8006458:	d071      	beq.n	800653e <PWMC_SetPhaseVoltage+0x30a>
 800645a:	f04f 0e00 	mov.w	lr, #0
 800645e:	f04f 0c01 	mov.w	ip, #1
 8006462:	2402      	movs	r4, #2
 8006464:	e732      	b.n	80062cc <PWMC_SetPhaseVoltage+0x98>
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 8006466:	ebb1 010c 	subs.w	r1, r1, ip
 800646a:	bf44      	itt	mi
 800646c:	f501 317f 	addmi.w	r1, r1, #261120	; 0x3fc00
 8006470:	f201 31ff 	addwmi	r1, r1, #1023	; 0x3ff
          wTimePhC = wTimePhA - (wY / 131072);
 8006474:	2a00      	cmp	r2, #0
 8006476:	bfb8      	it	lt
 8006478:	f502 327f 	addlt.w	r2, r2, #261120	; 0x3fc00
          pHandle->Sector = SECTOR_6;
 800647c:	f04f 0305 	mov.w	r3, #5
          wTimePhC = wTimePhA - (wY / 131072);
 8006480:	bfb8      	it	lt
 8006482:	f202 32ff 	addwlt	r2, r2, #1023	; 0x3ff
          pHandle->Sector = SECTOR_6;
 8006486:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 800648a:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
          wTimePhB = wTimePhC + (wX / 131072);
 800648e:	f1bc 0300 	subs.w	r3, ip, #0
 8006492:	bfb8      	it	lt
 8006494:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 8006498:	eb0e 41a1 	add.w	r1, lr, r1, asr #18
          if(true == pHandle->SingleShuntTopology)
 800649c:	f890 4087 	ldrb.w	r4, [r0, #135]	; 0x87
          wTimePhC = wTimePhA - (wY / 131072);
 80064a0:	eba1 42a2 	sub.w	r2, r1, r2, asr #18
          wTimePhB = wTimePhC + (wX / 131072);
 80064a4:	bfb8      	it	lt
 80064a6:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 80064aa:	eb02 4363 	add.w	r3, r2, r3, asr #17
          if(true == pHandle->SingleShuntTopology)
 80064ae:	2c00      	cmp	r4, #0
 80064b0:	d03f      	beq.n	8006532 <PWMC_SetPhaseVoltage+0x2fe>
 80064b2:	f04f 0e01 	mov.w	lr, #1
 80064b6:	f04f 0c02 	mov.w	ip, #2
 80064ba:	2400      	movs	r4, #0
 80064bc:	e706      	b.n	80062cc <PWMC_SetPhaseVoltage+0x98>
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 80064be:	1b09      	subs	r1, r1, r4
 80064c0:	bf44      	itt	mi
 80064c2:	f501 317f 	addmi.w	r1, r1, #261120	; 0x3fc00
 80064c6:	f201 31ff 	addwmi	r1, r1, #1023	; 0x3ff
        wTimePhB = wTimePhA + (wZ / 131072);
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	bfbc      	itt	lt
 80064ce:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
 80064d2:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
        wTimePhC = wTimePhA - (wY / 131072) ;
 80064d6:	2a00      	cmp	r2, #0
 80064d8:	bfb8      	it	lt
 80064da:	f502 327f 	addlt.w	r2, r2, #261120	; 0x3fc00
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 80064de:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
        if(true == pHandle->SingleShuntTopology)
 80064e2:	f890 4087 	ldrb.w	r4, [r0, #135]	; 0x87
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 80064e6:	eb0e 41a1 	add.w	r1, lr, r1, asr #18
        pHandle->Sector = SECTOR_5;
 80064ea:	f04f 0c04 	mov.w	ip, #4
        wTimePhC = wTimePhA - (wY / 131072) ;
 80064ee:	bfb8      	it	lt
 80064f0:	f202 32ff 	addwlt	r2, r2, #1023	; 0x3ff
        pHandle->Sector = SECTOR_5;
 80064f4:	f880 c07c 	strb.w	ip, [r0, #124]	; 0x7c
        wTimePhB = wTimePhA + (wZ / 131072);
 80064f8:	eb01 43a3 	add.w	r3, r1, r3, asr #18
        wTimePhC = wTimePhA - (wY / 131072) ;
 80064fc:	eba1 42a2 	sub.w	r2, r1, r2, asr #18
        if(true == pHandle->SingleShuntTopology)
 8006500:	b92c      	cbnz	r4, 800650e <PWMC_SetPhaseVoltage+0x2da>
          pHandle->lowDuty = (uint16_t)wTimePhC;
 8006502:	fa1f fe82 	uxth.w	lr, r2
          pHandle->midDuty = (uint16_t)wTimePhA;
 8006506:	fa1f fc81 	uxth.w	ip, r1
          pHandle->highDuty = (uint16_t)wTimePhB;
 800650a:	b29c      	uxth	r4, r3
 800650c:	e6de      	b.n	80062cc <PWMC_SetPhaseVoltage+0x98>
 800650e:	f04f 0e01 	mov.w	lr, #1
 8006512:	f04f 0c00 	mov.w	ip, #0
 8006516:	2402      	movs	r4, #2
 8006518:	e6d8      	b.n	80062cc <PWMC_SetPhaseVoltage+0x98>
 800651a:	f04f 0e00 	mov.w	lr, #0
 800651e:	f04f 0c02 	mov.w	ip, #2
 8006522:	2401      	movs	r4, #1
 8006524:	e6d2      	b.n	80062cc <PWMC_SetPhaseVoltage+0x98>
 8006526:	f04f 0e02 	mov.w	lr, #2
 800652a:	f04f 0c01 	mov.w	ip, #1
 800652e:	2400      	movs	r4, #0
 8006530:	e6cc      	b.n	80062cc <PWMC_SetPhaseVoltage+0x98>
            pHandle->lowDuty = (uint16_t)wTimePhA;
 8006532:	fa1f fe81 	uxth.w	lr, r1
            pHandle->midDuty = (uint16_t)wTimePhC;
 8006536:	fa1f fc82 	uxth.w	ip, r2
            pHandle->highDuty = (uint16_t)wTimePhB;
 800653a:	b29c      	uxth	r4, r3
 800653c:	e6c6      	b.n	80062cc <PWMC_SetPhaseVoltage+0x98>
          pHandle->lowDuty = (uint16_t)wTimePhC;
 800653e:	fa1f fe82 	uxth.w	lr, r2
          pHandle->midDuty = (uint16_t)wTimePhB;
 8006542:	fa1f fc83 	uxth.w	ip, r3
          pHandle->highDuty = (uint16_t)wTimePhA;
 8006546:	b28c      	uxth	r4, r1
 8006548:	e6c0      	b.n	80062cc <PWMC_SetPhaseVoltage+0x98>
            pHandle->lowDuty = (uint16_t)wTimePhA;
 800654a:	fa1f fe81 	uxth.w	lr, r1
            pHandle->midDuty = (uint16_t)wTimePhB;
 800654e:	fa1f fc83 	uxth.w	ip, r3
            pHandle->highDuty = (uint16_t)wTimePhC;
 8006552:	b294      	uxth	r4, r2
 8006554:	e6ba      	b.n	80062cc <PWMC_SetPhaseVoltage+0x98>
 8006556:	bf00      	nop

08006558 <PWMC_SwitchOffPWM>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOffPwm(pHandle);
 8006558:	6843      	ldr	r3, [r0, #4]
 800655a:	4718      	bx	r3

0800655c <PWMC_SwitchOnPWM>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOnPwm(pHandle);
 800655c:	6883      	ldr	r3, [r0, #8]
 800655e:	4718      	bx	r3

08006560 <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, **false** if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr(PWMC_Handle_t *pHandle, CRCAction_t action)
{
 8006560:	b510      	push	{r4, lr}
 8006562:	4604      	mov	r4, r0
 8006564:	b082      	sub	sp, #8
    /* Nothing to do */
  }
  else
  {
#endif
    if (CRC_START == action)
 8006566:	b199      	cbz	r1, 8006590 <PWMC_CurrentReadingCalibr+0x30>
    {
      PWMC_SwitchOffPWM(pHandle);
      pHandle->pFctCurrReadingCalib(pHandle);
      retVal = true;
    }
    else if (CRC_EXEC == action)
 8006568:	2901      	cmp	r1, #1
 800656a:	d002      	beq.n	8006572 <PWMC_CurrentReadingCalibr+0x12>
  bool retVal = false;
 800656c:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (retVal);
}
 800656e:	b002      	add	sp, #8
 8006570:	bd10      	pop	{r4, pc}
      if (pHandle->OffCalibrWaitTimeCounter > 0u)
 8006572:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8006576:	b19b      	cbz	r3, 80065a0 <PWMC_CurrentReadingCalibr+0x40>
        pHandle->OffCalibrWaitTimeCounter--;
 8006578:	3b01      	subs	r3, #1
 800657a:	b29b      	uxth	r3, r3
 800657c:	9101      	str	r1, [sp, #4]
 800657e:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
        if (0U == pHandle->OffCalibrWaitTimeCounter)
 8006582:	2b00      	cmp	r3, #0
 8006584:	d1f2      	bne.n	800656c <PWMC_CurrentReadingCalibr+0xc>
          pHandle->pFctCurrReadingCalib(pHandle);
 8006586:	68c3      	ldr	r3, [r0, #12]
 8006588:	4798      	blx	r3
          retVal = true;
 800658a:	9901      	ldr	r1, [sp, #4]
 800658c:	4608      	mov	r0, r1
 800658e:	e7ee      	b.n	800656e <PWMC_CurrentReadingCalibr+0xe>
      PWMC_SwitchOffPWM(pHandle);
 8006590:	f7ff ffe2 	bl	8006558 <PWMC_SwitchOffPWM>
      pHandle->pFctCurrReadingCalib(pHandle);
 8006594:	4620      	mov	r0, r4
 8006596:	68e3      	ldr	r3, [r4, #12]
 8006598:	4798      	blx	r3
      retVal = true;
 800659a:	2001      	movs	r0, #1
}
 800659c:	b002      	add	sp, #8
 800659e:	bd10      	pop	{r4, pc}
        retVal = true;
 80065a0:	4608      	mov	r0, r1
}
 80065a2:	b002      	add	sp, #8
 80065a4:	bd10      	pop	{r4, pc}
 80065a6:	bf00      	nop

080065a8 <PWMC_OVP_Handler>:
    tempPointer = MC_NULL;
  }
  else
  {
#endif
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 80065a8:	6c4a      	ldr	r2, [r1, #68]	; 0x44
{
 80065aa:	4603      	mov	r3, r0
    pHandle->OverVoltageFlag = true;
 80065ac:	f04f 0c01 	mov.w	ip, #1
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 80065b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80065b4:	644a      	str	r2, [r1, #68]	; 0x44
    tempPointer = &(pHandle->Motor);
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (tempPointer);
}
 80065b6:	307a      	adds	r0, #122	; 0x7a
    pHandle->OverVoltageFlag = true;
 80065b8:	f883 c083 	strb.w	ip, [r3, #131]	; 0x83
    pHandle->BrakeActionLock = true;
 80065bc:	f883 c085 	strb.w	ip, [r3, #133]	; 0x85
}
 80065c0:	4770      	bx	lr
 80065c2:	bf00      	nop

080065c4 <PWMC_IsFaultOccurred>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  * @retval uint16_t Returns #MC_OVER_CURR if an overcurrent has been
  *                  detected since last method call, #MC_NO_FAULTS otherwise.
  */
__weak uint16_t PWMC_IsFaultOccurred(PWMC_Handle_t *pHandle)
{
 80065c4:	4603      	mov	r3, r0
  uint16_t retVal = MC_NO_FAULTS;

  if (true == pHandle->OverVoltageFlag)
 80065c6:	f890 0083 	ldrb.w	r0, [r0, #131]	; 0x83
 80065ca:	b1a8      	cbz	r0, 80065f8 <PWMC_IsFaultOccurred+0x34>
  {
    retVal = MC_OVER_VOLT;
    pHandle->OverVoltageFlag = false;
 80065cc:	2200      	movs	r2, #0
 80065ce:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
 80065d2:	2142      	movs	r1, #66	; 0x42
    retVal = MC_OVER_VOLT;
 80065d4:	2002      	movs	r0, #2
  else
  {
    /* Nothing to do */
  }

  if (true == pHandle->OverCurrentFlag)
 80065d6:	f893 2082 	ldrb.w	r2, [r3, #130]	; 0x82
 80065da:	b11a      	cbz	r2, 80065e4 <PWMC_IsFaultOccurred+0x20>
  {
    retVal |= MC_OVER_CURR;
    pHandle->OverCurrentFlag = false;
 80065dc:	2200      	movs	r2, #0
 80065de:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
    retVal |= MC_OVER_CURR;
 80065e2:	4608      	mov	r0, r1
  else
  {
    /* Nothing to do */
  }

  if (true == pHandle->driverProtectionFlag)
 80065e4:	f893 2084 	ldrb.w	r2, [r3, #132]	; 0x84
 80065e8:	b12a      	cbz	r2, 80065f6 <PWMC_IsFaultOccurred+0x32>
  {
    retVal |= MC_DP_FAULT;
 80065ea:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    pHandle->driverProtectionFlag = false;
 80065ee:	2200      	movs	r2, #0
    retVal |= MC_DP_FAULT;
 80065f0:	b280      	uxth	r0, r0
    pHandle->driverProtectionFlag = false;
 80065f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
  {
    /* Nothing to do */
  }

  return (retVal);
}
 80065f6:	4770      	bx	lr
 80065f8:	2140      	movs	r1, #64	; 0x40
 80065fa:	e7ec      	b.n	80065d6 <PWMC_IsFaultOccurred+0x12>

080065fc <PWMC_RLDetectionModeEnable>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctRLDetectionModeEnable(pHandle);
 80065fc:	69c3      	ldr	r3, [r0, #28]
 80065fe:	4718      	bx	r3

08006600 <PWMC_RLDetectionModeDisable>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctRLDetectionModeDisable(pHandle);
 8006600:	6a03      	ldr	r3, [r0, #32]
 8006602:	4718      	bx	r3

08006604 <PWMC_RLDetectionModeSetDuty>:
 {
   retVal = pHandle->pFctRLDetectionModeSetDuty(pHandle, hDuty);
 }
 return (retVal);
#else
  return (pHandle->pFctRLDetectionModeSetDuty(pHandle, hDuty));
 8006604:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006606:	4718      	bx	r3

08006608 <PWMC_RLTurnOnLowSidesAndStart>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctRLTurnOnLowSidesAndStart(pHandle);
 8006608:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800660a:	4718      	bx	r3

0800660c <RI_SetRegisterGlobal>:
#include "mp_one_touch_tuning.h"
#include "mp_self_com_ctrl.h"
#include "mc_configuration_registers.h"

uint8_t RI_SetRegisterGlobal(uint16_t regID, uint8_t typeID, uint8_t *data, uint16_t *size, int16_t dataAvailable)
{
 800660c:	b510      	push	{r4, lr}
  uint8_t retVal = MCP_CMD_OK;
  switch(typeID)
 800660e:	3908      	subs	r1, #8
{
 8006610:	f9bd c008 	ldrsh.w	ip, [sp, #8]
  switch(typeID)
 8006614:	2920      	cmp	r1, #32
 8006616:	d812      	bhi.n	800663e <RI_SetRegisterGlobal+0x32>
 8006618:	e8df f001 	tbb	[pc, r1]
 800661c:	11111115 	.word	0x11111115
 8006620:	11111111 	.word	0x11111111
 8006624:	1111111d 	.word	0x1111111d
 8006628:	11111111 	.word	0x11111111
 800662c:	1111112d 	.word	0x1111112d
 8006630:	11111111 	.word	0x11111111
 8006634:	11111135 	.word	0x11111135
 8006638:	11111111 	.word	0x11111111
 800663c:	4c          	.byte	0x4c
 800663d:	00          	.byte	0x00
    }

    default:
    {
      retVal = MCP_ERROR_BAD_DATA_TYPE;
      *size =0; /* From this point we are not able anymore to decode the RX buffer */
 800663e:	2200      	movs	r2, #0
 8006640:	801a      	strh	r2, [r3, #0]
      retVal = MCP_ERROR_BAD_DATA_TYPE;
 8006642:	2007      	movs	r0, #7
      break;
    }
  }
  return (retVal);
}
 8006644:	bd10      	pop	{r4, pc}
          retVal = MCP_ERROR_UNKNOWN_REG;
 8006646:	2848      	cmp	r0, #72	; 0x48
      *size = 1;
 8006648:	f04f 0201 	mov.w	r2, #1
          retVal = MCP_ERROR_UNKNOWN_REG;
 800664c:	bf0c      	ite	eq
 800664e:	2004      	moveq	r0, #4
 8006650:	2005      	movne	r0, #5
      *size = 1;
 8006652:	801a      	strh	r2, [r3, #0]
}
 8006654:	bd10      	pop	{r4, pc}
      switch (regID)
 8006656:	f5b0 6f65 	cmp.w	r0, #3664	; 0xe50
 800665a:	d04e      	beq.n	80066fa <RI_SetRegisterGlobal+0xee>
 800665c:	d93c      	bls.n	80066d8 <RI_SetRegisterGlobal+0xcc>
 800665e:	f5b0 6f69 	cmp.w	r0, #3728	; 0xe90
 8006662:	d04a      	beq.n	80066fa <RI_SetRegisterGlobal+0xee>
 8006664:	f641 3258 	movw	r2, #7000	; 0x1b58
 8006668:	4290      	cmp	r0, r2
 800666a:	bf14      	ite	ne
 800666c:	2005      	movne	r0, #5
 800666e:	2004      	moveq	r0, #4
      *size = 2;
 8006670:	2202      	movs	r2, #2
 8006672:	801a      	strh	r2, [r3, #0]
}
 8006674:	bd10      	pop	{r4, pc}
          retVal = MCP_ERROR_UNKNOWN_REG;
 8006676:	2818      	cmp	r0, #24
      *size = 4;
 8006678:	f04f 0204 	mov.w	r2, #4
          retVal = MCP_ERROR_UNKNOWN_REG;
 800667c:	bf0c      	ite	eq
 800667e:	4610      	moveq	r0, r2
 8006680:	2005      	movne	r0, #5
      *size = 4;
 8006682:	801a      	strh	r2, [r3, #0]
}
 8006684:	bd10      	pop	{r4, pc}
uint8_t RI_MovString(const char_t *srcString, char_t *destString, uint16_t *size, int16_t maxSize)
{
  uint8_t retVal = MCP_CMD_OK;
  const char_t *tempsrcString = srcString;
  char_t *tempdestString = destString;
  *size= 1U ; /* /0 is the min String size */
 8006686:	2101      	movs	r1, #1
 8006688:	8019      	strh	r1, [r3, #0]

  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 800668a:	f992 0000 	ldrsb.w	r0, [r2]
 800668e:	b358      	cbz	r0, 80066e8 <RI_SetRegisterGlobal+0xdc>
 8006690:	fa1f fc8c 	uxth.w	ip, ip
 8006694:	1850      	adds	r0, r2, r1
 8006696:	e004      	b.n	80066a2 <RI_SetRegisterGlobal+0x96>
  {
    *tempdestString = *tempsrcString;
    tempdestString++;
    tempsrcString++;
    *size = *size + 1U;
 8006698:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 800669a:	f992 4000 	ldrsb.w	r4, [r2]
 800669e:	3001      	adds	r0, #1
 80066a0:	b314      	cbz	r4, 80066e8 <RI_SetRegisterGlobal+0xdc>
    *size = *size + 1U;
 80066a2:	f101 0e01 	add.w	lr, r1, #1
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80066a6:	4561      	cmp	r1, ip
    tempdestString++;
 80066a8:	4602      	mov	r2, r0
    *size = *size + 1U;
 80066aa:	fa1f f18e 	uxth.w	r1, lr
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80066ae:	d3f3      	bcc.n	8006698 <RI_SetRegisterGlobal+0x8c>
      retVal = MCP_ERROR_RO_REG;
 80066b0:	2004      	movs	r0, #4
}
 80066b2:	bd10      	pop	{r4, pc}
      *size = rawSize + 2U;
 80066b4:	8812      	ldrh	r2, [r2, #0]
 80066b6:	3202      	adds	r2, #2
 80066b8:	b292      	uxth	r2, r2
      if (*size > (uint16_t)dataAvailable)
 80066ba:	fa1f fc8c 	uxth.w	ip, ip
 80066be:	4562      	cmp	r2, ip
      *size = rawSize + 2U;
 80066c0:	801a      	strh	r2, [r3, #0]
      if (*size > (uint16_t)dataAvailable)
 80066c2:	d81c      	bhi.n	80066fe <RI_SetRegisterGlobal+0xf2>
        switch (regID)
 80066c4:	28a8      	cmp	r0, #168	; 0xa8
 80066c6:	d0f3      	beq.n	80066b0 <RI_SetRegisterGlobal+0xa4>
 80066c8:	d812      	bhi.n	80066f0 <RI_SetRegisterGlobal+0xe4>
 80066ca:	f020 0040 	bic.w	r0, r0, #64	; 0x40
            retVal = MCP_ERROR_RO_REG;
 80066ce:	2828      	cmp	r0, #40	; 0x28
 80066d0:	bf14      	ite	ne
 80066d2:	2005      	movne	r0, #5
 80066d4:	2004      	moveq	r0, #4
}
 80066d6:	bd10      	pop	{r4, pc}
 80066d8:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 80066dc:	f5b0 6fb2 	cmp.w	r0, #1424	; 0x590
 80066e0:	bf14      	ite	ne
 80066e2:	2005      	movne	r0, #5
 80066e4:	2004      	moveq	r0, #4
 80066e6:	e7c3      	b.n	8006670 <RI_SetRegisterGlobal+0x64>
  { /* Last string char must be 0 */
    retVal = MCP_ERROR_STRING_FORMAT;
  }
  else
  {
    *tempdestString = (int8_t)0;
 80066e8:	2300      	movs	r3, #0
 80066ea:	7013      	strb	r3, [r2, #0]
      retVal = MCP_ERROR_RO_REG;
 80066ec:	2004      	movs	r0, #4
  return (retVal);
 80066ee:	e7e0      	b.n	80066b2 <RI_SetRegisterGlobal+0xa6>
            retVal = MCP_ERROR_RO_REG;
 80066f0:	28e8      	cmp	r0, #232	; 0xe8
 80066f2:	bf14      	ite	ne
 80066f4:	2005      	movne	r0, #5
 80066f6:	2004      	moveq	r0, #4
}
 80066f8:	bd10      	pop	{r4, pc}
  uint8_t retVal = MCP_CMD_OK;
 80066fa:	2000      	movs	r0, #0
 80066fc:	e7b8      	b.n	8006670 <RI_SetRegisterGlobal+0x64>
        *size = 0;
 80066fe:	2200      	movs	r2, #0
 8006700:	801a      	strh	r2, [r3, #0]
        retVal = MCP_ERROR_BAD_RAW_FORMAT; /* This error stop the parsing of the CMD buffer */
 8006702:	200a      	movs	r0, #10
}
 8006704:	bd10      	pop	{r4, pc}
 8006706:	bf00      	nop

08006708 <RI_SetRegisterMotor1>:
{
 8006708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800670c:	b086      	sub	sp, #24
  switch(typeID)
 800670e:	3908      	subs	r1, #8
{
 8006710:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 8006714:	4696      	mov	lr, r2
 8006716:	461c      	mov	r4, r3
  switch(typeID)
 8006718:	2920      	cmp	r1, #32
 800671a:	d812      	bhi.n	8006742 <RI_SetRegisterMotor1+0x3a>
 800671c:	e8df f001 	tbb	[pc, r1]
 8006720:	11111117 	.word	0x11111117
 8006724:	11111111 	.word	0x11111111
 8006728:	11111132 	.word	0x11111132
 800672c:	11111111 	.word	0x11111111
 8006730:	1111117b 	.word	0x1111117b
 8006734:	11111111 	.word	0x11111111
 8006738:	1111115e 	.word	0x1111115e
 800673c:	11111111 	.word	0x11111111
 8006740:	99          	.byte	0x99
 8006741:	00          	.byte	0x00
      *size =0; /* From this point we are not able anymore to decode the RX buffer */
 8006742:	2300      	movs	r3, #0
 8006744:	8023      	strh	r3, [r4, #0]
      retVal = MCP_ERROR_BAD_DATA_TYPE;
 8006746:	2007      	movs	r0, #7
}
 8006748:	b006      	add	sp, #24
 800674a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      switch (regID)
 800674e:	f5b0 6f91 	cmp.w	r0, #1160	; 0x488
 8006752:	f000 82e1 	beq.w	8006d18 <RI_SetRegisterMotor1+0x610>
 8006756:	f200 81d6 	bhi.w	8006b06 <RI_SetRegisterMotor1+0x3fe>
 800675a:	2888      	cmp	r0, #136	; 0x88
 800675c:	f000 82ef 	beq.w	8006d3e <RI_SetRegisterMotor1+0x636>
 8006760:	f240 8167 	bls.w	8006a32 <RI_SetRegisterMotor1+0x32a>
 8006764:	f5b0 6f81 	cmp.w	r0, #1032	; 0x408
 8006768:	f000 82a6 	beq.w	8006cb8 <RI_SetRegisterMotor1+0x5b0>
 800676c:	f240 819a 	bls.w	8006aa4 <RI_SetRegisterMotor1+0x39c>
            retVal = MCP_ERROR_RO_REG;
 8006770:	f5b0 6f89 	cmp.w	r0, #1096	; 0x448
 8006774:	bf14      	ite	ne
 8006776:	2005      	movne	r0, #5
 8006778:	2004      	moveq	r0, #4
      *size = 1;
 800677a:	2301      	movs	r3, #1
 800677c:	8023      	strh	r3, [r4, #0]
}
 800677e:	b006      	add	sp, #24
 8006780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      uint16_t regdata16 = *(uint16_t *)data; //cstat !MISRAC2012-Rule-11.3
 8006784:	f5b0 6f21 	cmp.w	r0, #2576	; 0xa10
 8006788:	8815      	ldrh	r5, [r2, #0]
      switch (regID)
 800678a:	f000 808f 	beq.w	80068ac <RI_SetRegisterMotor1+0x1a4>
 800678e:	f200 8091 	bhi.w	80068b4 <RI_SetRegisterMotor1+0x1ac>
 8006792:	f5b0 7f44 	cmp.w	r0, #784	; 0x310
 8006796:	f000 836e 	beq.w	8006e76 <RI_SetRegisterMotor1+0x76e>
 800679a:	f240 80c9 	bls.w	8006930 <RI_SetRegisterMotor1+0x228>
 800679e:	f5b0 6fb2 	cmp.w	r0, #1424	; 0x590
 80067a2:	f000 8083 	beq.w	80068ac <RI_SetRegisterMotor1+0x1a4>
 80067a6:	f240 80b4 	bls.w	8006912 <RI_SetRegisterMotor1+0x20a>
 80067aa:	f5b0 6f15 	cmp.w	r0, #2384	; 0x950
 80067ae:	f000 8380 	beq.w	8006eb2 <RI_SetRegisterMotor1+0x7aa>
 80067b2:	d972      	bls.n	800689a <RI_SetRegisterMotor1+0x192>
 80067b4:	f5b0 6f19 	cmp.w	r0, #2448	; 0x990
 80067b8:	f040 81c0 	bne.w	8006b3c <RI_SetRegisterMotor1+0x434>
          currComp = MCI_GetIqdref(pMCIN);
 80067bc:	48b0      	ldr	r0, [pc, #704]	; (8006a80 <RI_SetRegisterMotor1+0x378>)
 80067be:	f7fe fc41 	bl	8005044 <MCI_GetIqdref>
 80067c2:	9003      	str	r0, [sp, #12]
          currComp.d = (int16_t)regdata16;
 80067c4:	f8ad 500e 	strh.w	r5, [sp, #14]
          MCI_SetCurrentReferences(pMCIN,currComp);
 80067c8:	48ad      	ldr	r0, [pc, #692]	; (8006a80 <RI_SetRegisterMotor1+0x378>)
 80067ca:	9903      	ldr	r1, [sp, #12]
 80067cc:	f7fe fb02 	bl	8004dd4 <MCI_SetCurrentReferences>
  uint8_t retVal = MCP_CMD_OK;
 80067d0:	2000      	movs	r0, #0
      *size = 2;
 80067d2:	2302      	movs	r3, #2
 80067d4:	8023      	strh	r3, [r4, #0]
}
 80067d6:	b006      	add	sp, #24
 80067d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  *size= 1U ; /* /0 is the min String size */
 80067dc:	2101      	movs	r1, #1
 80067de:	8021      	strh	r1, [r4, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80067e0:	f992 3000 	ldrsb.w	r3, [r2]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	f000 8269 	beq.w	8006cbc <RI_SetRegisterMotor1+0x5b4>
 80067ea:	fa1f f08c 	uxth.w	r0, ip
 80067ee:	1853      	adds	r3, r2, r1
 80067f0:	e006      	b.n	8006800 <RI_SetRegisterMotor1+0xf8>
    *size = *size + 1U;
 80067f2:	8021      	strh	r1, [r4, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80067f4:	f99e 5000 	ldrsb.w	r5, [lr]
 80067f8:	3301      	adds	r3, #1
 80067fa:	2d00      	cmp	r5, #0
 80067fc:	f000 825e 	beq.w	8006cbc <RI_SetRegisterMotor1+0x5b4>
    *size = *size + 1U;
 8006800:	f101 0c01 	add.w	ip, r1, #1
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8006804:	4288      	cmp	r0, r1
    tempdestString++;
 8006806:	469e      	mov	lr, r3
    *size = *size + 1U;
 8006808:	fa1f f18c 	uxth.w	r1, ip
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 800680c:	d8f1      	bhi.n	80067f2 <RI_SetRegisterMotor1+0xea>
      retVal = MCP_ERROR_RO_REG;
 800680e:	2004      	movs	r0, #4
}
 8006810:	b006      	add	sp, #24
 8006812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      uint32_t regdata32 = *(uint32_t *)data; //cstat !MISRAC2012-Rule-11.3
 8006816:	f641 0398 	movw	r3, #6296	; 0x1898
 800681a:	4298      	cmp	r0, r3
 800681c:	6811      	ldr	r1, [r2, #0]
      switch (regID)
 800681e:	f000 82bf 	beq.w	8006da0 <RI_SetRegisterMotor1+0x698>
 8006822:	f200 810b 	bhi.w	8006a3c <RI_SetRegisterMotor1+0x334>
 8006826:	f641 0318 	movw	r3, #6168	; 0x1818
 800682a:	4298      	cmp	r0, r3
 800682c:	f000 8297 	beq.w	8006d5e <RI_SetRegisterMotor1+0x656>
 8006830:	d960      	bls.n	80068f4 <RI_SetRegisterMotor1+0x1ec>
 8006832:	f641 0358 	movw	r3, #6232	; 0x1858
 8006836:	4298      	cmp	r0, r3
 8006838:	f040 823c 	bne.w	8006cb4 <RI_SetRegisterMotor1+0x5ac>
          OTT_SetSpeedRegulatorBandwidth(&OTT, fregdata);
 800683c:	4891      	ldr	r0, [pc, #580]	; (8006a84 <RI_SetRegisterMotor1+0x37c>)
 800683e:	ee00 1a10 	vmov	s0, r1
 8006842:	f7fa f952 	bl	8000aea <OTT_SetSpeedRegulatorBandwidth>
  uint8_t retVal = MCP_CMD_OK;
 8006846:	2000      	movs	r0, #0
      *size = 4;
 8006848:	2304      	movs	r3, #4
 800684a:	8023      	strh	r3, [r4, #0]
}
 800684c:	b006      	add	sp, #24
 800684e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      uint16_t rawSize = *(uint16_t *)data; //cstat !MISRAC2012-Rule-11.3
 8006852:	8812      	ldrh	r2, [r2, #0]
      *size = rawSize + 2U;
 8006854:	1c93      	adds	r3, r2, #2
 8006856:	b29b      	uxth	r3, r3
      if (*size > (uint16_t)dataAvailable)
 8006858:	fa1f fc8c 	uxth.w	ip, ip
 800685c:	4563      	cmp	r3, ip
      *size = rawSize + 2U;
 800685e:	8023      	strh	r3, [r4, #0]
      if (*size > (uint16_t)dataAvailable)
 8006860:	f200 8252 	bhi.w	8006d08 <RI_SetRegisterMotor1+0x600>
 8006864:	f5b0 7f0a 	cmp.w	r0, #552	; 0x228
      rawData++;
 8006868:	f10e 0102 	add.w	r1, lr, #2
        switch (regID)
 800686c:	f000 829f 	beq.w	8006dae <RI_SetRegisterMotor1+0x6a6>
 8006870:	f200 8234 	bhi.w	8006cdc <RI_SetRegisterMotor1+0x5d4>
 8006874:	f5b0 7fd4 	cmp.w	r0, #424	; 0x1a8
 8006878:	f000 82bf 	beq.w	8006dfa <RI_SetRegisterMotor1+0x6f2>
 800687c:	f240 8223 	bls.w	8006cc6 <RI_SetRegisterMotor1+0x5be>
 8006880:	f5b0 7ff4 	cmp.w	r0, #488	; 0x1e8
 8006884:	f040 8262 	bne.w	8006d4c <RI_SetRegisterMotor1+0x644>
            MCI_ExecTorqueRamp(pMCIN, (int16_t)torque, duration);
 8006888:	487d      	ldr	r0, [pc, #500]	; (8006a80 <RI_SetRegisterMotor1+0x378>)
 800688a:	f8be 2006 	ldrh.w	r2, [lr, #6]
 800688e:	f9be 1002 	ldrsh.w	r1, [lr, #2]
 8006892:	f7fe fa95 	bl	8004dc0 <MCI_ExecTorqueRamp>
  uint8_t retVal = MCP_CMD_OK;
 8006896:	2000      	movs	r0, #0
            break;
 8006898:	e756      	b.n	8006748 <RI_SetRegisterMotor1+0x40>
 800689a:	f5b0 6f05 	cmp.w	r0, #2128	; 0x850
 800689e:	d005      	beq.n	80068ac <RI_SetRegisterMotor1+0x1a4>
 80068a0:	f240 81d1 	bls.w	8006c46 <RI_SetRegisterMotor1+0x53e>
 80068a4:	f5b0 6f11 	cmp.w	r0, #2320	; 0x910
 80068a8:	f040 81c5 	bne.w	8006c36 <RI_SetRegisterMotor1+0x52e>
      *size = 2;
 80068ac:	2302      	movs	r3, #2
 80068ae:	2004      	movs	r0, #4
 80068b0:	8023      	strh	r3, [r4, #0]
      break;
 80068b2:	e790      	b.n	80067d6 <RI_SetRegisterMotor1+0xce>
 80068b4:	f241 5390 	movw	r3, #5520	; 0x1590
 80068b8:	4298      	cmp	r0, r3
 80068ba:	f000 82f4 	beq.w	8006ea6 <RI_SetRegisterMotor1+0x79e>
 80068be:	f240 810b 	bls.w	8006ad8 <RI_SetRegisterMotor1+0x3d0>
 80068c2:	f641 1310 	movw	r3, #6416	; 0x1910
 80068c6:	4298      	cmp	r0, r3
 80068c8:	f000 82e7 	beq.w	8006e9a <RI_SetRegisterMotor1+0x792>
 80068cc:	f240 80f3 	bls.w	8006ab6 <RI_SetRegisterMotor1+0x3ae>
 80068d0:	f641 4310 	movw	r3, #7184	; 0x1c10
 80068d4:	4298      	cmp	r0, r3
 80068d6:	f000 82c8 	beq.w	8006e6a <RI_SetRegisterMotor1+0x762>
 80068da:	f240 80c1 	bls.w	8006a60 <RI_SetRegisterMotor1+0x358>
 80068de:	f641 4350 	movw	r3, #7248	; 0x1c50
 80068e2:	4298      	cmp	r0, r3
 80068e4:	f040 8216 	bne.w	8006d14 <RI_SetRegisterMotor1+0x60c>
          SCC_SetUnderVoltageThreshold(&SCC,regdata16);
 80068e8:	4867      	ldr	r0, [pc, #412]	; (8006a88 <RI_SetRegisterMotor1+0x380>)
 80068ea:	4629      	mov	r1, r5
 80068ec:	f7fc f902 	bl	8002af4 <SCC_SetUnderVoltageThreshold>
  uint8_t retVal = MCP_CMD_OK;
 80068f0:	2000      	movs	r0, #0
          break;
 80068f2:	e76e      	b.n	80067d2 <RI_SetRegisterMotor1+0xca>
 80068f4:	2898      	cmp	r0, #152	; 0x98
 80068f6:	d12d      	bne.n	8006954 <RI_SetRegisterMotor1+0x24c>
          MCI_ExecSpeedRamp(pMCIN,((((int16_t)regdata32) * ((int16_t)SPEED_UNIT)) / (int16_t)U_RPM), 0);
 80068f8:	4b64      	ldr	r3, [pc, #400]	; (8006a8c <RI_SetRegisterMotor1+0x384>)
 80068fa:	4861      	ldr	r0, [pc, #388]	; (8006a80 <RI_SetRegisterMotor1+0x378>)
 80068fc:	b209      	sxth	r1, r1
 80068fe:	fb83 2301 	smull	r2, r3, r3, r1
 8006902:	eba3 71e1 	sub.w	r1, r3, r1, asr #31
 8006906:	2200      	movs	r2, #0
 8006908:	b209      	sxth	r1, r1
 800690a:	f7fe fa4f 	bl	8004dac <MCI_ExecSpeedRamp>
  uint8_t retVal = MCP_CMD_OK;
 800690e:	2000      	movs	r0, #0
          break;
 8006910:	e79a      	b.n	8006848 <RI_SetRegisterMotor1+0x140>
 8006912:	f5b0 6f8a 	cmp.w	r0, #1104	; 0x450
 8006916:	f000 82e4 	beq.w	8006ee2 <RI_SetRegisterMotor1+0x7da>
 800691a:	d940      	bls.n	800699e <RI_SetRegisterMotor1+0x296>
 800691c:	f5b0 6f92 	cmp.w	r0, #1168	; 0x490
 8006920:	f040 81f8 	bne.w	8006d14 <RI_SetRegisterMotor1+0x60c>
          PID_SetKP (&(&STO_PLL_M1)->PIRegulator, (int16_t)regdata16);
 8006924:	485a      	ldr	r0, [pc, #360]	; (8006a90 <RI_SetRegisterMotor1+0x388>)
 8006926:	b229      	sxth	r1, r5
 8006928:	f005 f9cc 	bl	800bcc4 <PID_SetKP>
  uint8_t retVal = MCP_CMD_OK;
 800692c:	2000      	movs	r0, #0
          break;
 800692e:	e750      	b.n	80067d2 <RI_SetRegisterMotor1+0xca>
 8006930:	f5b0 7fe8 	cmp.w	r0, #464	; 0x1d0
 8006934:	f000 82cf 	beq.w	8006ed6 <RI_SetRegisterMotor1+0x7ce>
 8006938:	d942      	bls.n	80069c0 <RI_SetRegisterMotor1+0x2b8>
 800693a:	f5b0 7f24 	cmp.w	r0, #656	; 0x290
 800693e:	f000 828e 	beq.w	8006e5e <RI_SetRegisterMotor1+0x756>
 8006942:	f5b0 7f34 	cmp.w	r0, #720	; 0x2d0
 8006946:	d14a      	bne.n	80069de <RI_SetRegisterMotor1+0x2d6>
          PID_SetKI(&PIDIdHandle_M1, (int16_t)regdata16);
 8006948:	4852      	ldr	r0, [pc, #328]	; (8006a94 <RI_SetRegisterMotor1+0x38c>)
 800694a:	b229      	sxth	r1, r5
 800694c:	f005 f9bc 	bl	800bcc8 <PID_SetKI>
  uint8_t retVal = MCP_CMD_OK;
 8006950:	2000      	movs	r0, #0
          break;
 8006952:	e73e      	b.n	80067d2 <RI_SetRegisterMotor1+0xca>
 8006954:	d91c      	bls.n	8006990 <RI_SetRegisterMotor1+0x288>
 8006956:	f241 7318 	movw	r3, #5912	; 0x1718
 800695a:	4298      	cmp	r0, r3
 800695c:	d016      	beq.n	800698c <RI_SetRegisterMotor1+0x284>
 800695e:	d90e      	bls.n	800697e <RI_SetRegisterMotor1+0x276>
 8006960:	f241 7398 	movw	r3, #6040	; 0x1798
 8006964:	4298      	cmp	r0, r3
 8006966:	d011      	beq.n	800698c <RI_SetRegisterMotor1+0x284>
 8006968:	f241 7358 	movw	r3, #5976	; 0x1758
 800696c:	f020 0080 	bic.w	r0, r0, #128	; 0x80
          retVal = MCP_ERROR_RO_REG;
 8006970:	4298      	cmp	r0, r3
 8006972:	bf14      	ite	ne
 8006974:	2005      	movne	r0, #5
 8006976:	2004      	moveq	r0, #4
      *size = 4;
 8006978:	2304      	movs	r3, #4
 800697a:	8023      	strh	r3, [r4, #0]
      break;
 800697c:	e766      	b.n	800684c <RI_SetRegisterMotor1+0x144>
 800697e:	f5b0 7f8c 	cmp.w	r0, #280	; 0x118
 8006982:	d003      	beq.n	800698c <RI_SetRegisterMotor1+0x284>
 8006984:	f241 63d8 	movw	r3, #5848	; 0x16d8
 8006988:	4298      	cmp	r0, r3
 800698a:	d144      	bne.n	8006a16 <RI_SetRegisterMotor1+0x30e>
              retVal = MCP_ERROR_RO_REG;
 800698c:	2004      	movs	r0, #4
 800698e:	e75b      	b.n	8006848 <RI_SetRegisterMotor1+0x140>
 8006990:	f020 0040 	bic.w	r0, r0, #64	; 0x40
          retVal = MCP_ERROR_RO_REG;
 8006994:	2818      	cmp	r0, #24
 8006996:	bf14      	ite	ne
 8006998:	2005      	movne	r0, #5
 800699a:	2004      	moveq	r0, #4
 800699c:	e754      	b.n	8006848 <RI_SetRegisterMotor1+0x140>
 800699e:	f5b0 7f54 	cmp.w	r0, #848	; 0x350
 80069a2:	d126      	bne.n	80069f2 <RI_SetRegisterMotor1+0x2ea>
          STO_PLL_GetObserverGains(&STO_PLL_M1, &hC1, &hC2);
 80069a4:	483c      	ldr	r0, [pc, #240]	; (8006a98 <RI_SetRegisterMotor1+0x390>)
 80069a6:	aa03      	add	r2, sp, #12
 80069a8:	f10d 010a 	add.w	r1, sp, #10
 80069ac:	f006 ff9e 	bl	800d8ec <STO_PLL_GetObserverGains>
          STO_PLL_SetObserverGains(&STO_PLL_M1, (int16_t)regdata16, hC2);
 80069b0:	4839      	ldr	r0, [pc, #228]	; (8006a98 <RI_SetRegisterMotor1+0x390>)
 80069b2:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 80069b6:	b229      	sxth	r1, r5
 80069b8:	f006 ffa0 	bl	800d8fc <STO_PLL_SetObserverGains>
  uint8_t retVal = MCP_CMD_OK;
 80069bc:	2000      	movs	r0, #0
 80069be:	e708      	b.n	80067d2 <RI_SetRegisterMotor1+0xca>
 80069c0:	f5b0 7f88 	cmp.w	r0, #272	; 0x110
 80069c4:	f000 8281 	beq.w	8006eca <RI_SetRegisterMotor1+0x7c2>
 80069c8:	d92a      	bls.n	8006a20 <RI_SetRegisterMotor1+0x318>
 80069ca:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
 80069ce:	f040 81a1 	bne.w	8006d14 <RI_SetRegisterMotor1+0x60c>
          PID_SetKP(&PIDIqHandle_M1, (int16_t)regdata16);
 80069d2:	4832      	ldr	r0, [pc, #200]	; (8006a9c <RI_SetRegisterMotor1+0x394>)
 80069d4:	b229      	sxth	r1, r5
 80069d6:	f005 f975 	bl	800bcc4 <PID_SetKP>
  uint8_t retVal = MCP_CMD_OK;
 80069da:	2000      	movs	r0, #0
          break;
 80069dc:	e6f9      	b.n	80067d2 <RI_SetRegisterMotor1+0xca>
 80069de:	f5b0 7f04 	cmp.w	r0, #528	; 0x210
 80069e2:	f040 8197 	bne.w	8006d14 <RI_SetRegisterMotor1+0x60c>
          PID_SetKD(&PIDIqHandle_M1, (int16_t)regdata16);
 80069e6:	482d      	ldr	r0, [pc, #180]	; (8006a9c <RI_SetRegisterMotor1+0x394>)
 80069e8:	b229      	sxth	r1, r5
 80069ea:	f005 f9a1 	bl	800bd30 <PID_SetKD>
  uint8_t retVal = MCP_CMD_OK;
 80069ee:	2000      	movs	r0, #0
          break;
 80069f0:	e6ef      	b.n	80067d2 <RI_SetRegisterMotor1+0xca>
 80069f2:	f5b0 7f64 	cmp.w	r0, #912	; 0x390
 80069f6:	f040 818d 	bne.w	8006d14 <RI_SetRegisterMotor1+0x60c>
          STO_PLL_GetObserverGains(&STO_PLL_M1, &hC1, &hC2);
 80069fa:	4827      	ldr	r0, [pc, #156]	; (8006a98 <RI_SetRegisterMotor1+0x390>)
 80069fc:	aa03      	add	r2, sp, #12
 80069fe:	f10d 010a 	add.w	r1, sp, #10
 8006a02:	f006 ff73 	bl	800d8ec <STO_PLL_GetObserverGains>
          STO_PLL_SetObserverGains(&STO_PLL_M1, hC1, (int16_t)regdata16);
 8006a06:	4824      	ldr	r0, [pc, #144]	; (8006a98 <RI_SetRegisterMotor1+0x390>)
 8006a08:	f9bd 100a 	ldrsh.w	r1, [sp, #10]
 8006a0c:	b22a      	sxth	r2, r5
 8006a0e:	f006 ff75 	bl	800d8fc <STO_PLL_SetObserverGains>
  uint8_t retVal = MCP_CMD_OK;
 8006a12:	2000      	movs	r0, #0
 8006a14:	e6dd      	b.n	80067d2 <RI_SetRegisterMotor1+0xca>
          retVal = MCP_ERROR_RO_REG;
 8006a16:	28d8      	cmp	r0, #216	; 0xd8
 8006a18:	bf14      	ite	ne
 8006a1a:	2005      	movne	r0, #5
 8006a1c:	2004      	moveq	r0, #4
 8006a1e:	e713      	b.n	8006848 <RI_SetRegisterMotor1+0x140>
 8006a20:	2890      	cmp	r0, #144	; 0x90
 8006a22:	f040 80a6 	bne.w	8006b72 <RI_SetRegisterMotor1+0x46a>
          PID_SetKP(&PIDSpeedHandle_M1, (int16_t)regdata16);
 8006a26:	481e      	ldr	r0, [pc, #120]	; (8006aa0 <RI_SetRegisterMotor1+0x398>)
 8006a28:	b229      	sxth	r1, r5
 8006a2a:	f005 f94b 	bl	800bcc4 <PID_SetKP>
  uint8_t retVal = MCP_CMD_OK;
 8006a2e:	2000      	movs	r0, #0
          break;
 8006a30:	e6cf      	b.n	80067d2 <RI_SetRegisterMotor1+0xca>
            retVal = MCP_ERROR_RO_REG;
 8006a32:	2848      	cmp	r0, #72	; 0x48
 8006a34:	bf14      	ite	ne
 8006a36:	2005      	movne	r0, #5
 8006a38:	2004      	moveq	r0, #4
 8006a3a:	e69e      	b.n	800677a <RI_SetRegisterMotor1+0x72>
 8006a3c:	f641 1318 	movw	r3, #6424	; 0x1918
 8006a40:	4298      	cmp	r0, r3
 8006a42:	f000 8185 	beq.w	8006d50 <RI_SetRegisterMotor1+0x648>
 8006a46:	f240 808a 	bls.w	8006b5e <RI_SetRegisterMotor1+0x456>
 8006a4a:	f641 5318 	movw	r3, #7448	; 0x1d18
 8006a4e:	4298      	cmp	r0, r3
 8006a50:	d163      	bne.n	8006b1a <RI_SetRegisterMotor1+0x412>
          SCC_SetResistorOffset(&SCC,fregdata);
 8006a52:	480d      	ldr	r0, [pc, #52]	; (8006a88 <RI_SetRegisterMotor1+0x380>)
 8006a54:	ee00 1a10 	vmov	s0, r1
 8006a58:	f7fc f859 	bl	8002b0e <SCC_SetResistorOffset>
  uint8_t retVal = MCP_CMD_OK;
 8006a5c:	2000      	movs	r0, #0
          break;
 8006a5e:	e6f3      	b.n	8006848 <RI_SetRegisterMotor1+0x140>
 8006a60:	f641 3358 	movw	r3, #7000	; 0x1b58
 8006a64:	4298      	cmp	r0, r3
 8006a66:	f43f af21 	beq.w	80068ac <RI_SetRegisterMotor1+0x1a4>
 8006a6a:	f240 80ca 	bls.w	8006c02 <RI_SetRegisterMotor1+0x4fa>
 8006a6e:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8006a72:	f641 3390 	movw	r3, #7056	; 0x1b90
 8006a76:	4298      	cmp	r0, r3
 8006a78:	bf14      	ite	ne
 8006a7a:	2005      	movne	r0, #5
 8006a7c:	2004      	moveq	r0, #4
 8006a7e:	e6a8      	b.n	80067d2 <RI_SetRegisterMotor1+0xca>
 8006a80:	20002298 	.word	0x20002298
 8006a84:	20000024 	.word	0x20000024
 8006a88:	200002bc 	.word	0x200002bc
 8006a8c:	2aaaaaab 	.word	0x2aaaaaab
 8006a90:	20000850 	.word	0x20000850
 8006a94:	200000c4 	.word	0x200000c4
 8006a98:	2000081c 	.word	0x2000081c
 8006a9c:	200000f0 	.word	0x200000f0
 8006aa0:	2000011c 	.word	0x2000011c
 8006aa4:	28c8      	cmp	r0, #200	; 0xc8
 8006aa6:	f000 8107 	beq.w	8006cb8 <RI_SetRegisterMotor1+0x5b0>
            retVal = MCP_ERROR_RO_REG;
 8006aaa:	f5b0 7f72 	cmp.w	r0, #968	; 0x3c8
 8006aae:	bf14      	ite	ne
 8006ab0:	2005      	movne	r0, #5
 8006ab2:	2004      	moveq	r0, #4
 8006ab4:	e661      	b.n	800677a <RI_SetRegisterMotor1+0x72>
 8006ab6:	f241 6350 	movw	r3, #5712	; 0x1650
 8006aba:	4298      	cmp	r0, r3
 8006abc:	f000 81e7 	beq.w	8006e8e <RI_SetRegisterMotor1+0x786>
 8006ac0:	d942      	bls.n	8006b48 <RI_SetRegisterMotor1+0x440>
 8006ac2:	f641 03d0 	movw	r3, #6352	; 0x18d0
 8006ac6:	4298      	cmp	r0, r3
 8006ac8:	f040 8124 	bne.w	8006d14 <RI_SetRegisterMotor1+0x60c>
          PID_SetKIDivisorPOW2 (&(&STO_PLL_M1)->PIRegulator,regdata16);
 8006acc:	48ab      	ldr	r0, [pc, #684]	; (8006d7c <RI_SetRegisterMotor1+0x674>)
 8006ace:	4629      	mov	r1, r5
 8006ad0:	f005 f916 	bl	800bd00 <PID_SetKIDivisorPOW2>
  uint8_t retVal = MCP_CMD_OK;
 8006ad4:	2000      	movs	r0, #0
          break;
 8006ad6:	e67c      	b.n	80067d2 <RI_SetRegisterMotor1+0xca>
 8006ad8:	f241 4350 	movw	r3, #5200	; 0x1450
 8006adc:	4298      	cmp	r0, r3
 8006ade:	f000 81d0 	beq.w	8006e82 <RI_SetRegisterMotor1+0x77a>
 8006ae2:	d959      	bls.n	8006b98 <RI_SetRegisterMotor1+0x490>
 8006ae4:	f241 5310 	movw	r3, #5392	; 0x1510
 8006ae8:	4298      	cmp	r0, r3
 8006aea:	f000 81b2 	beq.w	8006e52 <RI_SetRegisterMotor1+0x74a>
 8006aee:	d949      	bls.n	8006b84 <RI_SetRegisterMotor1+0x47c>
 8006af0:	f241 5350 	movw	r3, #5456	; 0x1550
 8006af4:	4298      	cmp	r0, r3
 8006af6:	f040 810d 	bne.w	8006d14 <RI_SetRegisterMotor1+0x60c>
          PID_SetKIDivisorPOW2(&PIDIdHandle_M1, regdata16);
 8006afa:	48a1      	ldr	r0, [pc, #644]	; (8006d80 <RI_SetRegisterMotor1+0x678>)
 8006afc:	4629      	mov	r1, r5
 8006afe:	f005 f8ff 	bl	800bd00 <PID_SetKIDivisorPOW2>
  uint8_t retVal = MCP_CMD_OK;
 8006b02:	2000      	movs	r0, #0
          break;
 8006b04:	e665      	b.n	80067d2 <RI_SetRegisterMotor1+0xca>
 8006b06:	f5b0 6fe9 	cmp.w	r0, #1864	; 0x748
 8006b0a:	f040 80bd 	bne.w	8006c88 <RI_SetRegisterMotor1+0x580>
          SCC_SetPBCharacterization(&SCC,regdataU8);
 8006b0e:	489d      	ldr	r0, [pc, #628]	; (8006d84 <RI_SetRegisterMotor1+0x67c>)
 8006b10:	7811      	ldrb	r1, [r2, #0]
 8006b12:	f7fb fff7 	bl	8002b04 <SCC_SetPBCharacterization>
  uint8_t retVal = MCP_CMD_OK;
 8006b16:	2000      	movs	r0, #0
          break;
 8006b18:	e62f      	b.n	800677a <RI_SetRegisterMotor1+0x72>
 8006b1a:	f200 80cb 	bhi.w	8006cb4 <RI_SetRegisterMotor1+0x5ac>
 8006b1e:	f641 13d8 	movw	r3, #6616	; 0x19d8
 8006b22:	4298      	cmp	r0, r3
 8006b24:	f43f af32 	beq.w	800698c <RI_SetRegisterMotor1+0x284>
 8006b28:	d979      	bls.n	8006c1e <RI_SetRegisterMotor1+0x516>
 8006b2a:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8006b2e:	f641 2318 	movw	r3, #6680	; 0x1a18
          retVal = MCP_ERROR_RO_REG;
 8006b32:	4298      	cmp	r0, r3
 8006b34:	bf14      	ite	ne
 8006b36:	2005      	movne	r0, #5
 8006b38:	2004      	moveq	r0, #4
 8006b3a:	e685      	b.n	8006848 <RI_SetRegisterMotor1+0x140>
 8006b3c:	f5b0 6f1d 	cmp.w	r0, #2512	; 0x9d0
 8006b40:	bf14      	ite	ne
 8006b42:	2005      	movne	r0, #5
 8006b44:	2004      	moveq	r0, #4
 8006b46:	e644      	b.n	80067d2 <RI_SetRegisterMotor1+0xca>
 8006b48:	f241 53d0 	movw	r3, #5584	; 0x15d0
 8006b4c:	4298      	cmp	r0, r3
 8006b4e:	f040 809e 	bne.w	8006c8e <RI_SetRegisterMotor1+0x586>
          PID_SetKPDivisorPOW2(&PIDIqHandle_M1, regdata16);
 8006b52:	488d      	ldr	r0, [pc, #564]	; (8006d88 <RI_SetRegisterMotor1+0x680>)
 8006b54:	4629      	mov	r1, r5
 8006b56:	f005 f8c5 	bl	800bce4 <PID_SetKPDivisorPOW2>
  uint8_t retVal = MCP_CMD_OK;
 8006b5a:	2000      	movs	r0, #0
          break;
 8006b5c:	e639      	b.n	80067d2 <RI_SetRegisterMotor1+0xca>
 8006b5e:	f641 03d8 	movw	r3, #6360	; 0x18d8
 8006b62:	4298      	cmp	r0, r3
 8006b64:	f040 80a6 	bne.w	8006cb4 <RI_SetRegisterMotor1+0x5ac>
          SCC_SetNominalSpeed (&SCC, (int32_t) regdata32);
 8006b68:	4886      	ldr	r0, [pc, #536]	; (8006d84 <RI_SetRegisterMotor1+0x67c>)
 8006b6a:	f7fb ff07 	bl	800297c <SCC_SetNominalSpeed>
  uint8_t retVal = MCP_CMD_OK;
 8006b6e:	2000      	movs	r0, #0
          break;
 8006b70:	e66a      	b.n	8006848 <RI_SetRegisterMotor1+0x140>
 8006b72:	28d0      	cmp	r0, #208	; 0xd0
 8006b74:	f040 80ce 	bne.w	8006d14 <RI_SetRegisterMotor1+0x60c>
          PID_SetKI(&PIDSpeedHandle_M1, (int16_t)regdata16);
 8006b78:	4884      	ldr	r0, [pc, #528]	; (8006d8c <RI_SetRegisterMotor1+0x684>)
 8006b7a:	b229      	sxth	r1, r5
 8006b7c:	f005 f8a4 	bl	800bcc8 <PID_SetKI>
  uint8_t retVal = MCP_CMD_OK;
 8006b80:	2000      	movs	r0, #0
          break;
 8006b82:	e626      	b.n	80067d2 <RI_SetRegisterMotor1+0xca>
 8006b84:	f241 4390 	movw	r3, #5264	; 0x1490
 8006b88:	4298      	cmp	r0, r3
 8006b8a:	d116      	bne.n	8006bba <RI_SetRegisterMotor1+0x4b2>
          PID_SetKIDivisorPOW2(&PIDSpeedHandle_M1, regdata16);
 8006b8c:	487f      	ldr	r0, [pc, #508]	; (8006d8c <RI_SetRegisterMotor1+0x684>)
 8006b8e:	4629      	mov	r1, r5
 8006b90:	f005 f8b6 	bl	800bd00 <PID_SetKIDivisorPOW2>
  uint8_t retVal = MCP_CMD_OK;
 8006b94:	2000      	movs	r0, #0
          break;
 8006b96:	e61c      	b.n	80067d2 <RI_SetRegisterMotor1+0xca>
 8006b98:	f5b0 6f45 	cmp.w	r0, #3152	; 0xc50
 8006b9c:	f43f ae86 	beq.w	80068ac <RI_SetRegisterMotor1+0x1a4>
 8006ba0:	d920      	bls.n	8006be4 <RI_SetRegisterMotor1+0x4dc>
 8006ba2:	f5b0 6f69 	cmp.w	r0, #3728	; 0xe90
 8006ba6:	f000 80b3 	beq.w	8006d10 <RI_SetRegisterMotor1+0x608>
 8006baa:	d911      	bls.n	8006bd0 <RI_SetRegisterMotor1+0x4c8>
 8006bac:	f241 3350 	movw	r3, #4944	; 0x1350
 8006bb0:	4298      	cmp	r0, r3
 8006bb2:	bf14      	ite	ne
 8006bb4:	2005      	movne	r0, #5
 8006bb6:	2004      	moveq	r0, #4
 8006bb8:	e60b      	b.n	80067d2 <RI_SetRegisterMotor1+0xca>
 8006bba:	f241 43d0 	movw	r3, #5328	; 0x14d0
 8006bbe:	4298      	cmp	r0, r3
 8006bc0:	f040 80a8 	bne.w	8006d14 <RI_SetRegisterMotor1+0x60c>
          PID_SetKDDivisorPOW2(&PIDSpeedHandle_M1, regdata16);
 8006bc4:	4871      	ldr	r0, [pc, #452]	; (8006d8c <RI_SetRegisterMotor1+0x684>)
 8006bc6:	4629      	mov	r1, r5
 8006bc8:	f005 f8ba 	bl	800bd40 <PID_SetKDDivisorPOW2>
  uint8_t retVal = MCP_CMD_OK;
 8006bcc:	2000      	movs	r0, #0
          break;
 8006bce:	e600      	b.n	80067d2 <RI_SetRegisterMotor1+0xca>
 8006bd0:	f5b0 6f49 	cmp.w	r0, #3216	; 0xc90
 8006bd4:	f43f ae6a 	beq.w	80068ac <RI_SetRegisterMotor1+0x1a4>
  uint8_t retVal = MCP_CMD_OK;
 8006bd8:	f5b0 6f65 	cmp.w	r0, #3664	; 0xe50
 8006bdc:	bf14      	ite	ne
 8006bde:	2005      	movne	r0, #5
 8006be0:	2000      	moveq	r0, #0
 8006be2:	e5f6      	b.n	80067d2 <RI_SetRegisterMotor1+0xca>
 8006be4:	f5b0 6f39 	cmp.w	r0, #2960	; 0xb90
 8006be8:	f43f ae60 	beq.w	80068ac <RI_SetRegisterMotor1+0x1a4>
 8006bec:	d936      	bls.n	8006c5c <RI_SetRegisterMotor1+0x554>
 8006bee:	f5b0 6f3d 	cmp.w	r0, #3024	; 0xbd0
 8006bf2:	f43f ae5b 	beq.w	80068ac <RI_SetRegisterMotor1+0x1a4>
 8006bf6:	f5b0 6f41 	cmp.w	r0, #3088	; 0xc10
 8006bfa:	bf14      	ite	ne
 8006bfc:	2005      	movne	r0, #5
 8006bfe:	2004      	moveq	r0, #4
 8006c00:	e5e7      	b.n	80067d2 <RI_SetRegisterMotor1+0xca>
 8006c02:	f020 0340 	bic.w	r3, r0, #64	; 0x40
 8006c06:	f641 3210 	movw	r2, #6928	; 0x1b10
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	f43f ae4e 	beq.w	80068ac <RI_SetRegisterMotor1+0x1a4>
 8006c10:	f641 2390 	movw	r3, #6800	; 0x1a90
 8006c14:	4298      	cmp	r0, r3
 8006c16:	bf14      	ite	ne
 8006c18:	2005      	movne	r0, #5
 8006c1a:	2004      	moveq	r0, #4
 8006c1c:	e5d9      	b.n	80067d2 <RI_SetRegisterMotor1+0xca>
 8006c1e:	f641 1358 	movw	r3, #6488	; 0x1958
 8006c22:	4298      	cmp	r0, r3
 8006c24:	f43f aeb2 	beq.w	800698c <RI_SetRegisterMotor1+0x284>
 8006c28:	f641 1398 	movw	r3, #6552	; 0x1998
          retVal = MCP_ERROR_RO_REG;
 8006c2c:	4298      	cmp	r0, r3
 8006c2e:	bf14      	ite	ne
 8006c30:	2005      	movne	r0, #5
 8006c32:	2004      	moveq	r0, #4
 8006c34:	e608      	b.n	8006848 <RI_SetRegisterMotor1+0x140>
 8006c36:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8006c3a:	f5b0 6f09 	cmp.w	r0, #2192	; 0x890
 8006c3e:	bf14      	ite	ne
 8006c40:	2005      	movne	r0, #5
 8006c42:	2004      	moveq	r0, #4
 8006c44:	e5c5      	b.n	80067d2 <RI_SetRegisterMotor1+0xca>
 8006c46:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8006c4a:	f43f ae2f 	beq.w	80068ac <RI_SetRegisterMotor1+0x1a4>
 8006c4e:	d911      	bls.n	8006c74 <RI_SetRegisterMotor1+0x56c>
 8006c50:	f5b0 6f01 	cmp.w	r0, #2064	; 0x810
 8006c54:	bf14      	ite	ne
 8006c56:	2005      	movne	r0, #5
 8006c58:	2004      	moveq	r0, #4
 8006c5a:	e5ba      	b.n	80067d2 <RI_SetRegisterMotor1+0xca>
 8006c5c:	f5b0 6f29 	cmp.w	r0, #2704	; 0xa90
 8006c60:	f43f ae24 	beq.w	80068ac <RI_SetRegisterMotor1+0x1a4>
 8006c64:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 8006c68:	f5b0 6f25 	cmp.w	r0, #2640	; 0xa50
 8006c6c:	bf14      	ite	ne
 8006c6e:	2005      	movne	r0, #5
 8006c70:	2004      	moveq	r0, #4
 8006c72:	e5ae      	b.n	80067d2 <RI_SetRegisterMotor1+0xca>
 8006c74:	f5b0 6fba 	cmp.w	r0, #1488	; 0x5d0
 8006c78:	f43f ae18 	beq.w	80068ac <RI_SetRegisterMotor1+0x1a4>
 8006c7c:	f5b0 6ff2 	cmp.w	r0, #1936	; 0x790
 8006c80:	bf14      	ite	ne
 8006c82:	2005      	movne	r0, #5
 8006c84:	2004      	moveq	r0, #4
 8006c86:	e5a4      	b.n	80067d2 <RI_SetRegisterMotor1+0xca>
 8006c88:	d90b      	bls.n	8006ca2 <RI_SetRegisterMotor1+0x59a>
 8006c8a:	2005      	movs	r0, #5
 8006c8c:	e575      	b.n	800677a <RI_SetRegisterMotor1+0x72>
 8006c8e:	f241 6310 	movw	r3, #5648	; 0x1610
 8006c92:	4298      	cmp	r0, r3
 8006c94:	d13e      	bne.n	8006d14 <RI_SetRegisterMotor1+0x60c>
          PID_SetKIDivisorPOW2(&PIDIqHandle_M1, regdata16);
 8006c96:	483c      	ldr	r0, [pc, #240]	; (8006d88 <RI_SetRegisterMotor1+0x680>)
 8006c98:	4629      	mov	r1, r5
 8006c9a:	f005 f831 	bl	800bd00 <PID_SetKIDivisorPOW2>
  uint8_t retVal = MCP_CMD_OK;
 8006c9e:	2000      	movs	r0, #0
          break;
 8006ca0:	e597      	b.n	80067d2 <RI_SetRegisterMotor1+0xca>
 8006ca2:	f5b0 6f99 	cmp.w	r0, #1224	; 0x4c8
 8006ca6:	d007      	beq.n	8006cb8 <RI_SetRegisterMotor1+0x5b0>
            retVal = MCP_ERROR_RO_REG;
 8006ca8:	f5b0 6fa1 	cmp.w	r0, #1288	; 0x508
 8006cac:	bf14      	ite	ne
 8006cae:	2005      	movne	r0, #5
 8006cb0:	2004      	moveq	r0, #4
 8006cb2:	e562      	b.n	800677a <RI_SetRegisterMotor1+0x72>
 8006cb4:	2005      	movs	r0, #5
 8006cb6:	e5c7      	b.n	8006848 <RI_SetRegisterMotor1+0x140>
 8006cb8:	2004      	movs	r0, #4
 8006cba:	e55e      	b.n	800677a <RI_SetRegisterMotor1+0x72>
    *tempdestString = (int8_t)0;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	f88e 3000 	strb.w	r3, [lr]
      retVal = MCP_ERROR_RO_REG;
 8006cc2:	2004      	movs	r0, #4
  return (retVal);
 8006cc4:	e5a4      	b.n	8006810 <RI_SetRegisterMotor1+0x108>
 8006cc6:	28a8      	cmp	r0, #168	; 0xa8
 8006cc8:	f43f ada1 	beq.w	800680e <RI_SetRegisterMotor1+0x106>
 8006ccc:	d913      	bls.n	8006cf6 <RI_SetRegisterMotor1+0x5ee>
            retVal = MCP_ERROR_RO_REG;
 8006cce:	28e8      	cmp	r0, #232	; 0xe8
 8006cd0:	bf14      	ite	ne
 8006cd2:	2005      	movne	r0, #5
 8006cd4:	2004      	moveq	r0, #4
}
 8006cd6:	b006      	add	sp, #24
 8006cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cdc:	f5b0 7f5a 	cmp.w	r0, #872	; 0x368
 8006ce0:	f000 809a 	beq.w	8006e18 <RI_SetRegisterMotor1+0x710>
 8006ce4:	f5b0 6fa5 	cmp.w	r0, #1320	; 0x528
 8006ce8:	d130      	bne.n	8006d4c <RI_SetRegisterMotor1+0x644>
            retVal =  MCPA_cfgLog (&MCPA_UART_A, rawData);
 8006cea:	4829      	ldr	r0, [pc, #164]	; (8006d90 <RI_SetRegisterMotor1+0x688>)
}
 8006cec:	b006      	add	sp, #24
 8006cee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            retVal =  MCPA_cfgLog (&MCPA_UART_A, rawData);
 8006cf2:	f004 bf47 	b.w	800bb84 <MCPA_cfgLog>
 8006cf6:	f020 0040 	bic.w	r0, r0, #64	; 0x40
            retVal = MCP_ERROR_RO_REG;
 8006cfa:	2828      	cmp	r0, #40	; 0x28
 8006cfc:	bf14      	ite	ne
 8006cfe:	2005      	movne	r0, #5
 8006d00:	2004      	moveq	r0, #4
}
 8006d02:	b006      	add	sp, #24
 8006d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        *size = 0;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	8023      	strh	r3, [r4, #0]
        retVal = MCP_ERROR_BAD_RAW_FORMAT; /* This error stop the parsing of the CMD buffer */
 8006d0c:	200a      	movs	r0, #10
 8006d0e:	e51b      	b.n	8006748 <RI_SetRegisterMotor1+0x40>
  uint8_t retVal = MCP_CMD_OK;
 8006d10:	2000      	movs	r0, #0
 8006d12:	e55e      	b.n	80067d2 <RI_SetRegisterMotor1+0xca>
          retVal = MCP_ERROR_UNKNOWN_REG;
 8006d14:	2005      	movs	r0, #5
 8006d16:	e55c      	b.n	80067d2 <RI_SetRegisterMotor1+0xca>
          uint8_t regdataU8 = *(uint8_t *)data;
 8006d18:	7811      	ldrb	r1, [r2, #0]
          SPD_SetElToMecRatio(&STO_PLL_M1._Super, regdataU8);
 8006d1a:	481e      	ldr	r0, [pc, #120]	; (8006d94 <RI_SetRegisterMotor1+0x68c>)
 8006d1c:	9101      	str	r1, [sp, #4]
 8006d1e:	f006 fa6d 	bl	800d1fc <SPD_SetElToMecRatio>
          SPD_SetElToMecRatio(&VirtualSpeedSensorM1._Super, regdataU8);
 8006d22:	9901      	ldr	r1, [sp, #4]
 8006d24:	481c      	ldr	r0, [pc, #112]	; (8006d98 <RI_SetRegisterMotor1+0x690>)
 8006d26:	f006 fa69 	bl	800d1fc <SPD_SetElToMecRatio>
          SCC_SetPolesPairs(&SCC, regdataU8);
 8006d2a:	9901      	ldr	r1, [sp, #4]
 8006d2c:	4815      	ldr	r0, [pc, #84]	; (8006d84 <RI_SetRegisterMotor1+0x67c>)
 8006d2e:	f7fb fddf 	bl	80028f0 <SCC_SetPolesPairs>
          OTT_SetPolesPairs(&OTT, regdataU8);
 8006d32:	481a      	ldr	r0, [pc, #104]	; (8006d9c <RI_SetRegisterMotor1+0x694>)
 8006d34:	9901      	ldr	r1, [sp, #4]
 8006d36:	f7f9 fed2 	bl	8000ade <OTT_SetPolesPairs>
  uint8_t retVal = MCP_CMD_OK;
 8006d3a:	2000      	movs	r0, #0
          break;
 8006d3c:	e51d      	b.n	800677a <RI_SetRegisterMotor1+0x72>
          uint8_t regdata8 = *data;
 8006d3e:	7813      	ldrb	r3, [r2, #0]
          if ((uint8_t)MCM_TORQUE_MODE == regdata8)
 8006d40:	2b04      	cmp	r3, #4
 8006d42:	d07c      	beq.n	8006e3e <RI_SetRegisterMotor1+0x736>
          if ((uint8_t)MCM_SPEED_MODE == regdata8)
 8006d44:	2b03      	cmp	r3, #3
 8006d46:	d070      	beq.n	8006e2a <RI_SetRegisterMotor1+0x722>
  uint8_t retVal = MCP_CMD_OK;
 8006d48:	2000      	movs	r0, #0
 8006d4a:	e516      	b.n	800677a <RI_SetRegisterMotor1+0x72>
 8006d4c:	2005      	movs	r0, #5
 8006d4e:	e4fb      	b.n	8006748 <RI_SetRegisterMotor1+0x40>
          SCC_SetCurrentBandwidth(&SCC, fregdata);
 8006d50:	480c      	ldr	r0, [pc, #48]	; (8006d84 <RI_SetRegisterMotor1+0x67c>)
 8006d52:	ee00 1a10 	vmov	s0, r1
 8006d56:	f7fb fe65 	bl	8002a24 <SCC_SetCurrentBandwidth>
  uint8_t retVal = MCP_CMD_OK;
 8006d5a:	2000      	movs	r0, #0
          break;
 8006d5c:	e574      	b.n	8006848 <RI_SetRegisterMotor1+0x140>
          if(SCC.sm_state==SCC_IDLE || SCC_CALIBRATION_END==SCC.sm_state)
 8006d5e:	4b09      	ldr	r3, [pc, #36]	; (8006d84 <RI_SetRegisterMotor1+0x67c>)
 8006d60:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006d64:	b113      	cbz	r3, 8006d6c <RI_SetRegisterMotor1+0x664>
 8006d66:	2b0a      	cmp	r3, #10
 8006d68:	f47f ae10 	bne.w	800698c <RI_SetRegisterMotor1+0x284>
            SCC_SetNominalCurrent(&SCC, fregdata);
 8006d6c:	4805      	ldr	r0, [pc, #20]	; (8006d84 <RI_SetRegisterMotor1+0x67c>)
 8006d6e:	ee00 1a10 	vmov	s0, r1
 8006d72:	f7fb fdc5 	bl	8002900 <SCC_SetNominalCurrent>
  uint8_t retVal = MCP_CMD_OK;
 8006d76:	2000      	movs	r0, #0
          {
 8006d78:	e566      	b.n	8006848 <RI_SetRegisterMotor1+0x140>
 8006d7a:	bf00      	nop
 8006d7c:	20000850 	.word	0x20000850
 8006d80:	200000c4 	.word	0x200000c4
 8006d84:	200002bc 	.word	0x200002bc
 8006d88:	200000f0 	.word	0x200000f0
 8006d8c:	2000011c 	.word	0x2000011c
 8006d90:	20000a60 	.word	0x20000a60
 8006d94:	2000081c 	.word	0x2000081c
 8006d98:	200009a4 	.word	0x200009a4
 8006d9c:	20000024 	.word	0x20000024
          SCC_SetLdLqRatio(&SCC, fregdata);
 8006da0:	4853      	ldr	r0, [pc, #332]	; (8006ef0 <RI_SetRegisterMotor1+0x7e8>)
 8006da2:	ee00 1a10 	vmov	s0, r1
 8006da6:	f7fb fde2 	bl	800296e <SCC_SetLdLqRatio>
  uint8_t retVal = MCP_CMD_OK;
 8006daa:	2000      	movs	r0, #0
          break;
 8006dac:	e54c      	b.n	8006848 <RI_SetRegisterMotor1+0x140>
            if (((0U != ((rawSize) % 8U))) || ((nbrOfPhase > RUC_MAX_PHASE_NUMBER) != 0))
 8006dae:	f012 0607 	ands.w	r6, r2, #7
 8006db2:	d138      	bne.n	8006e26 <RI_SetRegisterMotor1+0x71e>
            uint8_t nbrOfPhase = (((uint8_t)rawSize) / 8U);
 8006db4:	b2d2      	uxtb	r2, r2
            if (((0U != ((rawSize) % 8U))) || ((nbrOfPhase > RUC_MAX_PHASE_NUMBER) != 0))
 8006db6:	2a2f      	cmp	r2, #47	; 0x2f
 8006db8:	d835      	bhi.n	8006e26 <RI_SetRegisterMotor1+0x71e>
              for (i = 0; i <nbrOfPhase; i++)
 8006dba:	08d4      	lsrs	r4, r2, #3
 8006dbc:	d01b      	beq.n	8006df6 <RI_SetRegisterMotor1+0x6ee>
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8006dbe:	f8df 8138 	ldr.w	r8, [pc, #312]	; 8006ef8 <RI_SetRegisterMotor1+0x7f0>
              (void)RUC_SetPhase(&RevUpControlM1, i, &revUpPhase);
 8006dc2:	4f4c      	ldr	r7, [pc, #304]	; (8006ef4 <RI_SetRegisterMotor1+0x7ec>)
 8006dc4:	4675      	mov	r5, lr
 8006dc6:	4631      	mov	r1, r6
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8006dc8:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
              revUpPhase.hFinalTorque = *((int16_t *) &rawData[4U + (i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 8006dcc:	88eb      	ldrh	r3, [r5, #6]
 8006dce:	f8ad 3010 	strh.w	r3, [sp, #16]
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8006dd2:	fb88 0302 	smull	r0, r3, r8, r2
 8006dd6:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
 8006dda:	f8ad 300e 	strh.w	r3, [sp, #14]
              for (i = 0; i <nbrOfPhase; i++)
 8006dde:	3601      	adds	r6, #1
              revUpPhase.hDurationms  = *((uint16_t *) &rawData[6U +(i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 8006de0:	f835 3f08 	ldrh.w	r3, [r5, #8]!
 8006de4:	f8ad 300c 	strh.w	r3, [sp, #12]
              (void)RUC_SetPhase(&RevUpControlM1, i, &revUpPhase);
 8006de8:	aa03      	add	r2, sp, #12
 8006dea:	4638      	mov	r0, r7
 8006dec:	f006 f99e 	bl	800d12c <RUC_SetPhase>
              for (i = 0; i <nbrOfPhase; i++)
 8006df0:	b2f1      	uxtb	r1, r6
 8006df2:	42a1      	cmp	r1, r4
 8006df4:	d3e8      	bcc.n	8006dc8 <RI_SetRegisterMotor1+0x6c0>
  uint8_t retVal = MCP_CMD_OK;
 8006df6:	2000      	movs	r0, #0
 8006df8:	e4a6      	b.n	8006748 <RI_SetRegisterMotor1+0x40>
            MCI_ExecSpeedRamp(pMCIN, (int16_t)((rpm * SPEED_UNIT) / U_RPM), duration);
 8006dfa:	f8de 3002 	ldr.w	r3, [lr, #2]
 8006dfe:	493e      	ldr	r1, [pc, #248]	; (8006ef8 <RI_SetRegisterMotor1+0x7f0>)
 8006e00:	f8be 2006 	ldrh.w	r2, [lr, #6]
 8006e04:	fb81 0103 	smull	r0, r1, r1, r3
 8006e08:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8006e0c:	483b      	ldr	r0, [pc, #236]	; (8006efc <RI_SetRegisterMotor1+0x7f4>)
 8006e0e:	b209      	sxth	r1, r1
 8006e10:	f7fd ffcc 	bl	8004dac <MCI_ExecSpeedRamp>
  uint8_t retVal = MCP_CMD_OK;
 8006e14:	2000      	movs	r0, #0
            break;
 8006e16:	e497      	b.n	8006748 <RI_SetRegisterMotor1+0x40>
            currComp.q = *((int16_t *) rawData); //cstat !MISRAC2012-Rule-11.3
 8006e18:	f8de 1002 	ldr.w	r1, [lr, #2]
            MCI_SetCurrentReferences(pMCIN, currComp);
 8006e1c:	4837      	ldr	r0, [pc, #220]	; (8006efc <RI_SetRegisterMotor1+0x7f4>)
            currComp.q = *((int16_t *) rawData); //cstat !MISRAC2012-Rule-11.3
 8006e1e:	9103      	str	r1, [sp, #12]
            MCI_SetCurrentReferences(pMCIN, currComp);
 8006e20:	f7fd ffd8 	bl	8004dd4 <MCI_SetCurrentReferences>
 8006e24:	e7e7      	b.n	8006df6 <RI_SetRegisterMotor1+0x6ee>
              retVal = MCP_ERROR_BAD_RAW_FORMAT;
 8006e26:	200a      	movs	r0, #10
            break;
 8006e28:	e48e      	b.n	8006748 <RI_SetRegisterMotor1+0x40>
            MCI_ExecSpeedRamp(pMCIN, MCI_GetMecSpeedRefUnit(pMCIN), 0);
 8006e2a:	4834      	ldr	r0, [pc, #208]	; (8006efc <RI_SetRegisterMotor1+0x7f4>)
 8006e2c:	f7fe f8dc 	bl	8004fe8 <MCI_GetMecSpeedRefUnit>
 8006e30:	2200      	movs	r2, #0
 8006e32:	4601      	mov	r1, r0
 8006e34:	4831      	ldr	r0, [pc, #196]	; (8006efc <RI_SetRegisterMotor1+0x7f4>)
 8006e36:	f7fd ffb9 	bl	8004dac <MCI_ExecSpeedRamp>
  uint8_t retVal = MCP_CMD_OK;
 8006e3a:	2000      	movs	r0, #0
 8006e3c:	e49d      	b.n	800677a <RI_SetRegisterMotor1+0x72>
            MCI_ExecTorqueRamp(pMCIN, MCI_GetTeref(pMCIN), 0);
 8006e3e:	482f      	ldr	r0, [pc, #188]	; (8006efc <RI_SetRegisterMotor1+0x7f4>)
 8006e40:	f7fe f92a 	bl	8005098 <MCI_GetTeref>
 8006e44:	2200      	movs	r2, #0
 8006e46:	4601      	mov	r1, r0
 8006e48:	482c      	ldr	r0, [pc, #176]	; (8006efc <RI_SetRegisterMotor1+0x7f4>)
 8006e4a:	f7fd ffb9 	bl	8004dc0 <MCI_ExecTorqueRamp>
  uint8_t retVal = MCP_CMD_OK;
 8006e4e:	2000      	movs	r0, #0
 8006e50:	e493      	b.n	800677a <RI_SetRegisterMotor1+0x72>
          PID_SetKPDivisorPOW2(&PIDIdHandle_M1, regdata16);
 8006e52:	482b      	ldr	r0, [pc, #172]	; (8006f00 <RI_SetRegisterMotor1+0x7f8>)
 8006e54:	4629      	mov	r1, r5
 8006e56:	f004 ff45 	bl	800bce4 <PID_SetKPDivisorPOW2>
  uint8_t retVal = MCP_CMD_OK;
 8006e5a:	2000      	movs	r0, #0
          break;
 8006e5c:	e4b9      	b.n	80067d2 <RI_SetRegisterMotor1+0xca>
          PID_SetKP(&PIDIdHandle_M1, (int16_t)regdata16);
 8006e5e:	4828      	ldr	r0, [pc, #160]	; (8006f00 <RI_SetRegisterMotor1+0x7f8>)
 8006e60:	b229      	sxth	r1, r5
 8006e62:	f004 ff2f 	bl	800bcc4 <PID_SetKP>
  uint8_t retVal = MCP_CMD_OK;
 8006e66:	2000      	movs	r0, #0
          break;
 8006e68:	e4b3      	b.n	80067d2 <RI_SetRegisterMotor1+0xca>
          SCC_SetOverVoltageThreshold(&SCC,regdata16);
 8006e6a:	4821      	ldr	r0, [pc, #132]	; (8006ef0 <RI_SetRegisterMotor1+0x7e8>)
 8006e6c:	4629      	mov	r1, r5
 8006e6e:	f7fb fe39 	bl	8002ae4 <SCC_SetOverVoltageThreshold>
  uint8_t retVal = MCP_CMD_OK;
 8006e72:	2000      	movs	r0, #0
          break;
 8006e74:	e4ad      	b.n	80067d2 <RI_SetRegisterMotor1+0xca>
          PID_SetKD(&PIDIdHandle_M1, (int16_t)regdata16);
 8006e76:	4822      	ldr	r0, [pc, #136]	; (8006f00 <RI_SetRegisterMotor1+0x7f8>)
 8006e78:	b229      	sxth	r1, r5
 8006e7a:	f004 ff59 	bl	800bd30 <PID_SetKD>
  uint8_t retVal = MCP_CMD_OK;
 8006e7e:	2000      	movs	r0, #0
          break;
 8006e80:	e4a7      	b.n	80067d2 <RI_SetRegisterMotor1+0xca>
          PID_SetKPDivisorPOW2(&PIDSpeedHandle_M1, regdata16);
 8006e82:	4820      	ldr	r0, [pc, #128]	; (8006f04 <RI_SetRegisterMotor1+0x7fc>)
 8006e84:	4629      	mov	r1, r5
 8006e86:	f004 ff2d 	bl	800bce4 <PID_SetKPDivisorPOW2>
  uint8_t retVal = MCP_CMD_OK;
 8006e8a:	2000      	movs	r0, #0
          break;
 8006e8c:	e4a1      	b.n	80067d2 <RI_SetRegisterMotor1+0xca>
          PID_SetKDDivisorPOW2(&PIDIqHandle_M1, regdata16);
 8006e8e:	481e      	ldr	r0, [pc, #120]	; (8006f08 <RI_SetRegisterMotor1+0x800>)
 8006e90:	4629      	mov	r1, r5
 8006e92:	f004 ff55 	bl	800bd40 <PID_SetKDDivisorPOW2>
  uint8_t retVal = MCP_CMD_OK;
 8006e96:	2000      	movs	r0, #0
          break;
 8006e98:	e49b      	b.n	80067d2 <RI_SetRegisterMotor1+0xca>
          PID_SetKPDivisorPOW2 (&(&STO_PLL_M1)->PIRegulator,regdata16);
 8006e9a:	481c      	ldr	r0, [pc, #112]	; (8006f0c <RI_SetRegisterMotor1+0x804>)
 8006e9c:	4629      	mov	r1, r5
 8006e9e:	f004 ff21 	bl	800bce4 <PID_SetKPDivisorPOW2>
  uint8_t retVal = MCP_CMD_OK;
 8006ea2:	2000      	movs	r0, #0
          break;
 8006ea4:	e495      	b.n	80067d2 <RI_SetRegisterMotor1+0xca>
          PID_SetKDDivisorPOW2(&PIDIdHandle_M1, regdata16);
 8006ea6:	4816      	ldr	r0, [pc, #88]	; (8006f00 <RI_SetRegisterMotor1+0x7f8>)
 8006ea8:	4629      	mov	r1, r5
 8006eaa:	f004 ff49 	bl	800bd40 <PID_SetKDDivisorPOW2>
  uint8_t retVal = MCP_CMD_OK;
 8006eae:	2000      	movs	r0, #0
          break;
 8006eb0:	e48f      	b.n	80067d2 <RI_SetRegisterMotor1+0xca>
          currComp = MCI_GetIqdref(pMCIN);
 8006eb2:	4812      	ldr	r0, [pc, #72]	; (8006efc <RI_SetRegisterMotor1+0x7f4>)
 8006eb4:	f7fe f8c6 	bl	8005044 <MCI_GetIqdref>
 8006eb8:	9003      	str	r0, [sp, #12]
          currComp.q = (int16_t)regdata16;
 8006eba:	f8ad 500c 	strh.w	r5, [sp, #12]
          MCI_SetCurrentReferences(pMCIN,currComp);
 8006ebe:	480f      	ldr	r0, [pc, #60]	; (8006efc <RI_SetRegisterMotor1+0x7f4>)
 8006ec0:	9903      	ldr	r1, [sp, #12]
 8006ec2:	f7fd ff87 	bl	8004dd4 <MCI_SetCurrentReferences>
  uint8_t retVal = MCP_CMD_OK;
 8006ec6:	2000      	movs	r0, #0
 8006ec8:	e483      	b.n	80067d2 <RI_SetRegisterMotor1+0xca>
          PID_SetKD(&PIDSpeedHandle_M1, (int16_t)regdata16);
 8006eca:	480e      	ldr	r0, [pc, #56]	; (8006f04 <RI_SetRegisterMotor1+0x7fc>)
 8006ecc:	b229      	sxth	r1, r5
 8006ece:	f004 ff2f 	bl	800bd30 <PID_SetKD>
  uint8_t retVal = MCP_CMD_OK;
 8006ed2:	2000      	movs	r0, #0
          break;
 8006ed4:	e47d      	b.n	80067d2 <RI_SetRegisterMotor1+0xca>
          PID_SetKI(&PIDIqHandle_M1, (int16_t)regdata16);
 8006ed6:	480c      	ldr	r0, [pc, #48]	; (8006f08 <RI_SetRegisterMotor1+0x800>)
 8006ed8:	b229      	sxth	r1, r5
 8006eda:	f004 fef5 	bl	800bcc8 <PID_SetKI>
  uint8_t retVal = MCP_CMD_OK;
 8006ede:	2000      	movs	r0, #0
          break;
 8006ee0:	e477      	b.n	80067d2 <RI_SetRegisterMotor1+0xca>
          PID_SetKI (&(&STO_PLL_M1)->PIRegulator, (int16_t)regdata16);
 8006ee2:	480a      	ldr	r0, [pc, #40]	; (8006f0c <RI_SetRegisterMotor1+0x804>)
 8006ee4:	b229      	sxth	r1, r5
 8006ee6:	f004 feef 	bl	800bcc8 <PID_SetKI>
  uint8_t retVal = MCP_CMD_OK;
 8006eea:	2000      	movs	r0, #0
          break;
 8006eec:	e471      	b.n	80067d2 <RI_SetRegisterMotor1+0xca>
 8006eee:	bf00      	nop
 8006ef0:	200002bc 	.word	0x200002bc
 8006ef4:	20000244 	.word	0x20000244
 8006ef8:	2aaaaaab 	.word	0x2aaaaaab
 8006efc:	20002298 	.word	0x20002298
 8006f00:	200000c4 	.word	0x200000c4
 8006f04:	2000011c 	.word	0x2000011c
 8006f08:	200000f0 	.word	0x200000f0
 8006f0c:	20000850 	.word	0x20000850

08006f10 <RI_GetRegisterGlobal>:
uint8_t RI_GetRegisterGlobal(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace){
 8006f10:	b510      	push	{r4, lr}
    switch (typeID)
 8006f12:	f1a1 0c08 	sub.w	ip, r1, #8
uint8_t RI_GetRegisterGlobal(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace){
 8006f16:	f9bd e008 	ldrsh.w	lr, [sp, #8]
    switch (typeID)
 8006f1a:	f1bc 0f20 	cmp.w	ip, #32
 8006f1e:	d812      	bhi.n	8006f46 <RI_GetRegisterGlobal+0x36>
 8006f20:	e8df f00c 	tbb	[pc, ip]
 8006f24:	1111111b 	.word	0x1111111b
 8006f28:	11111111 	.word	0x11111111
 8006f2c:	11111129 	.word	0x11111129
 8006f30:	11111111 	.word	0x11111111
 8006f34:	11111122 	.word	0x11111122
 8006f38:	11111111 	.word	0x11111111
 8006f3c:	11111137 	.word	0x11111137
 8006f40:	11111111 	.word	0x11111111
 8006f44:	13          	.byte	0x13
 8006f45:	00          	.byte	0x00
 8006f46:	2007      	movs	r0, #7
}
 8006f48:	bd10      	pop	{r4, pc}
        switch (regID)
 8006f4a:	2828      	cmp	r0, #40	; 0x28
 8006f4c:	d02d      	beq.n	8006faa <RI_GetRegisterGlobal+0x9a>
        *size = (*rawSize) + 2U;
 8006f4e:	8812      	ldrh	r2, [r2, #0]
 8006f50:	3202      	adds	r2, #2
            retVal = MCP_ERROR_UNKNOWN_REG;
 8006f52:	2005      	movs	r0, #5
        *size = (*rawSize) + 2U;
 8006f54:	b292      	uxth	r2, r2
 8006f56:	801a      	strh	r2, [r3, #0]
}
 8006f58:	bd10      	pop	{r4, pc}
        if (freeSpace > 0)
 8006f5a:	f1be 0f00 	cmp.w	lr, #0
 8006f5e:	dd22      	ble.n	8006fa6 <RI_GetRegisterGlobal+0x96>
          *size = 1;
 8006f60:	2201      	movs	r2, #1
 8006f62:	801a      	strh	r2, [r3, #0]
              retVal = MCP_ERROR_UNKNOWN_REG;
 8006f64:	2005      	movs	r0, #5
}
 8006f66:	bd10      	pop	{r4, pc}
        if (freeSpace >= 4)
 8006f68:	f1be 0f03 	cmp.w	lr, #3
 8006f6c:	dd19      	ble.n	8006fa2 <RI_GetRegisterGlobal+0x92>
          *size = 4;
 8006f6e:	2204      	movs	r2, #4
 8006f70:	801a      	strh	r2, [r3, #0]
              retVal = MCP_ERROR_UNKNOWN_REG;
 8006f72:	2005      	movs	r0, #5
}
 8006f74:	bd10      	pop	{r4, pc}
        if (freeSpace >= 2)
 8006f76:	f1be 0f01 	cmp.w	lr, #1
 8006f7a:	dd12      	ble.n	8006fa2 <RI_GetRegisterGlobal+0x92>
          switch (regID)
 8006f7c:	f5b0 6f65 	cmp.w	r0, #3664	; 0xe50
 8006f80:	d05b      	beq.n	800703a <RI_GetRegisterGlobal+0x12a>
    uint8_t retVal = MCP_CMD_OK;
 8006f82:	f5b0 6f69 	cmp.w	r0, #3728	; 0xe90
 8006f86:	bf14      	ite	ne
 8006f88:	2005      	movne	r0, #5
 8006f8a:	2000      	moveq	r0, #0
          *size = 2;
 8006f8c:	2202      	movs	r2, #2
 8006f8e:	801a      	strh	r2, [r3, #0]
}
 8006f90:	bd10      	pop	{r4, pc}
        switch (regID)
 8006f92:	2820      	cmp	r0, #32
 8006f94:	d02d      	beq.n	8006ff2 <RI_GetRegisterGlobal+0xe2>
 8006f96:	2860      	cmp	r0, #96	; 0x60
 8006f98:	d011      	beq.n	8006fbe <RI_GetRegisterGlobal+0xae>
            *size= 0 ; /* */
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	801a      	strh	r2, [r3, #0]
            retVal = MCP_ERROR_UNKNOWN_REG;
 8006f9e:	2005      	movs	r0, #5
}
 8006fa0:	bd10      	pop	{r4, pc}
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8006fa2:	2008      	movs	r0, #8
}
 8006fa4:	bd10      	pop	{r4, pc}
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8006fa6:	4608      	mov	r0, r1
}
 8006fa8:	bd10      	pop	{r4, pc}
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8006faa:	fa1f fe8e 	uxth.w	lr, lr
            *rawSize = (uint16_t)sizeof(GlobalConfig_reg_t);
 8006fae:	210a      	movs	r1, #10
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8006fb0:	f1be 0f0b 	cmp.w	lr, #11
            *rawSize = (uint16_t)sizeof(GlobalConfig_reg_t);
 8006fb4:	8011      	strh	r1, [r2, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8006fb6:	d834      	bhi.n	8007022 <RI_GetRegisterGlobal+0x112>
 8006fb8:	220c      	movs	r2, #12
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8006fba:	2008      	movs	r0, #8
 8006fbc:	e7cb      	b.n	8006f56 <RI_GetRegisterGlobal+0x46>
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8006fbe:	4c20      	ldr	r4, [pc, #128]	; (8007040 <RI_GetRegisterGlobal+0x130>)
 8006fc0:	f994 0000 	ldrsb.w	r0, [r4]
  *size= 1U ; /* /0 is the min String size */
 8006fc4:	2101      	movs	r1, #1
 8006fc6:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8006fc8:	b180      	cbz	r0, 8006fec <RI_GetRegisterGlobal+0xdc>
 8006fca:	fa1f fe8e 	uxth.w	lr, lr
  const char_t *tempsrcString = srcString;
 8006fce:	46a4      	mov	ip, r4
 8006fd0:	e008      	b.n	8006fe4 <RI_GetRegisterGlobal+0xd4>
    *tempdestString = *tempsrcString;
 8006fd2:	f802 0b01 	strb.w	r0, [r2], #1
    *size = *size + 1U;
 8006fd6:	8819      	ldrh	r1, [r3, #0]
 8006fd8:	3101      	adds	r1, #1
 8006fda:	b289      	uxth	r1, r1
 8006fdc:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8006fde:	f91c 0f01 	ldrsb.w	r0, [ip, #1]!
 8006fe2:	b118      	cbz	r0, 8006fec <RI_GetRegisterGlobal+0xdc>
 8006fe4:	458e      	cmp	lr, r1
 8006fe6:	d8f4      	bhi.n	8006fd2 <RI_GetRegisterGlobal+0xc2>
    retVal = MCP_ERROR_STRING_FORMAT;
 8006fe8:	2006      	movs	r0, #6
}
 8006fea:	bd10      	pop	{r4, pc}
    *tempdestString = (int8_t)0;
 8006fec:	2000      	movs	r0, #0
 8006fee:	7010      	strb	r0, [r2, #0]
}
 8006ff0:	bd10      	pop	{r4, pc}
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8006ff2:	4c14      	ldr	r4, [pc, #80]	; (8007044 <RI_GetRegisterGlobal+0x134>)
 8006ff4:	f994 0000 	ldrsb.w	r0, [r4]
  *size= 1U ; /* /0 is the min String size */
 8006ff8:	2101      	movs	r1, #1
 8006ffa:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8006ffc:	2800      	cmp	r0, #0
 8006ffe:	d0f5      	beq.n	8006fec <RI_GetRegisterGlobal+0xdc>
 8007000:	fa1f fe8e 	uxth.w	lr, lr
  const char_t *tempsrcString = srcString;
 8007004:	46a4      	mov	ip, r4
 8007006:	e009      	b.n	800701c <RI_GetRegisterGlobal+0x10c>
    *tempdestString = *tempsrcString;
 8007008:	f802 0b01 	strb.w	r0, [r2], #1
    *size = *size + 1U;
 800700c:	8819      	ldrh	r1, [r3, #0]
 800700e:	3101      	adds	r1, #1
 8007010:	b289      	uxth	r1, r1
 8007012:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8007014:	f91c 0f01 	ldrsb.w	r0, [ip, #1]!
 8007018:	2800      	cmp	r0, #0
 800701a:	d0e7      	beq.n	8006fec <RI_GetRegisterGlobal+0xdc>
 800701c:	458e      	cmp	lr, r1
 800701e:	d8f3      	bhi.n	8007008 <RI_GetRegisterGlobal+0xf8>
 8007020:	e7e2      	b.n	8006fe8 <RI_GetRegisterGlobal+0xd8>
              (void)memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t));
 8007022:	4909      	ldr	r1, [pc, #36]	; (8007048 <RI_GetRegisterGlobal+0x138>)
 8007024:	6848      	ldr	r0, [r1, #4]
 8007026:	680c      	ldr	r4, [r1, #0]
 8007028:	8909      	ldrh	r1, [r1, #8]
 800702a:	f8c2 0006 	str.w	r0, [r2, #6]
 800702e:	f8c2 4002 	str.w	r4, [r2, #2]
 8007032:	8151      	strh	r1, [r2, #10]
    uint8_t retVal = MCP_CMD_OK;
 8007034:	2000      	movs	r0, #0
              (void)memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t));
 8007036:	220c      	movs	r2, #12
 8007038:	e78d      	b.n	8006f56 <RI_GetRegisterGlobal+0x46>
    uint8_t retVal = MCP_CMD_OK;
 800703a:	2000      	movs	r0, #0
 800703c:	e7a6      	b.n	8006f8c <RI_GetRegisterGlobal+0x7c>
 800703e:	bf00      	nop
 8007040:	08011710 	.word	0x08011710
 8007044:	08011720 	.word	0x08011720
 8007048:	080117a4 	.word	0x080117a4

0800704c <RI_GetRegisterMotor1>:
  uint8_t RI_GetRegisterMotor1(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace) {
 800704c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007050:	b096      	sub	sp, #88	; 0x58
 8007052:	461d      	mov	r5, r3
    switch (typeID)
 8007054:	f1a1 0308 	sub.w	r3, r1, #8
  uint8_t RI_GetRegisterMotor1(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace) {
 8007058:	f9bd c070 	ldrsh.w	ip, [sp, #112]	; 0x70
 800705c:	4614      	mov	r4, r2
    switch (typeID)
 800705e:	2b20      	cmp	r3, #32
 8007060:	d812      	bhi.n	8007088 <RI_GetRegisterMotor1+0x3c>
 8007062:	e8df f003 	tbb	[pc, r3]
 8007066:	1136      	.short	0x1136
 8007068:	11111111 	.word	0x11111111
 800706c:	118b1111 	.word	0x118b1111
 8007070:	11111111 	.word	0x11111111
 8007074:	11511111 	.word	0x11511111
 8007078:	11111111 	.word	0x11111111
 800707c:	11811111 	.word	0x11811111
 8007080:	11111111 	.word	0x11111111
 8007084:	1111      	.short	0x1111
 8007086:	15          	.byte	0x15
 8007087:	00          	.byte	0x00
 8007088:	2007      	movs	r0, #7
  }
 800708a:	b016      	add	sp, #88	; 0x58
 800708c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rawData++;
 8007090:	f5b0 7fd4 	cmp.w	r0, #424	; 0x1a8
 8007094:	f104 0202 	add.w	r2, r4, #2
        switch (regID)
 8007098:	f000 8393 	beq.w	80077c2 <RI_GetRegisterMotor1+0x776>
 800709c:	f200 80a8 	bhi.w	80071f0 <RI_GetRegisterMotor1+0x1a4>
 80070a0:	28e8      	cmp	r0, #232	; 0xe8
 80070a2:	f000 837f 	beq.w	80077a4 <RI_GetRegisterMotor1+0x758>
 80070a6:	f200 8094 	bhi.w	80071d2 <RI_GetRegisterMotor1+0x186>
 80070aa:	2868      	cmp	r0, #104	; 0x68
 80070ac:	f000 836f 	beq.w	800778e <RI_GetRegisterMotor1+0x742>
 80070b0:	28a8      	cmp	r0, #168	; 0xa8
 80070b2:	f040 8381 	bne.w	80077b8 <RI_GetRegisterMotor1+0x76c>
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 80070b6:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = (uint16_t)sizeof(ApplicationConfig_reg_t);
 80070ba:	2310      	movs	r3, #16
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 80070bc:	f1bc 0f11 	cmp.w	ip, #17
            *rawSize = (uint16_t)sizeof(ApplicationConfig_reg_t);
 80070c0:	8023      	strh	r3, [r4, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 80070c2:	f200 8353 	bhi.w	800776c <RI_GetRegisterMotor1+0x720>
 80070c6:	2312      	movs	r3, #18
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 80070c8:	2008      	movs	r0, #8
        *size = (*rawSize) + 2U;
 80070ca:	802b      	strh	r3, [r5, #0]
  }
 80070cc:	b016      	add	sp, #88	; 0x58
 80070ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (freeSpace > 0)
 80070d2:	f1bc 0f00 	cmp.w	ip, #0
 80070d6:	f340 8358 	ble.w	800778a <RI_GetRegisterMotor1+0x73e>
          switch (regID)
 80070da:	f5b0 6f81 	cmp.w	r0, #1032	; 0x408
 80070de:	f000 83bf 	beq.w	8007860 <RI_GetRegisterMotor1+0x814>
 80070e2:	f200 81d8 	bhi.w	8007496 <RI_GetRegisterMotor1+0x44a>
 80070e6:	28c8      	cmp	r0, #200	; 0xc8
 80070e8:	f000 83b4 	beq.w	8007854 <RI_GetRegisterMotor1+0x808>
 80070ec:	f240 81c7 	bls.w	800747e <RI_GetRegisterMotor1+0x432>
 80070f0:	f5b0 7f72 	cmp.w	r0, #968	; 0x3c8
 80070f4:	f040 8347 	bne.w	8007786 <RI_GetRegisterMotor1+0x73a>
              *data = (uint8_t) 1u;
 80070f8:	2301      	movs	r3, #1
 80070fa:	7023      	strb	r3, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 80070fc:	2000      	movs	r0, #0
          *size = 1;
 80070fe:	2301      	movs	r3, #1
 8007100:	802b      	strh	r3, [r5, #0]
  }
 8007102:	b016      	add	sp, #88	; 0x58
 8007104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (freeSpace >= 4)
 8007108:	f1bc 0f03 	cmp.w	ip, #3
 800710c:	f340 82d6 	ble.w	80076bc <RI_GetRegisterMotor1+0x670>
          switch (regID)
 8007110:	f641 0358 	movw	r3, #6232	; 0x1858
 8007114:	4298      	cmp	r0, r3
 8007116:	f000 8425 	beq.w	8007964 <RI_GetRegisterMotor1+0x918>
 800711a:	f200 826d 	bhi.w	80075f8 <RI_GetRegisterMotor1+0x5ac>
 800711e:	f241 63d8 	movw	r3, #5848	; 0x16d8
 8007122:	4298      	cmp	r0, r3
 8007124:	f000 83f2 	beq.w	800790c <RI_GetRegisterMotor1+0x8c0>
 8007128:	f240 8255 	bls.w	80075d6 <RI_GetRegisterMotor1+0x58a>
 800712c:	f241 7398 	movw	r3, #6040	; 0x1798
 8007130:	4298      	cmp	r0, r3
 8007132:	f000 83e5 	beq.w	8007900 <RI_GetRegisterMotor1+0x8b4>
 8007136:	f240 823e 	bls.w	80075b6 <RI_GetRegisterMotor1+0x56a>
 800713a:	f241 73d8 	movw	r3, #6104	; 0x17d8
 800713e:	4298      	cmp	r0, r3
 8007140:	f000 83cc 	beq.w	80078dc <RI_GetRegisterMotor1+0x890>
 8007144:	f641 0318 	movw	r3, #6168	; 0x1818
 8007148:	4298      	cmp	r0, r3
 800714a:	f040 839a 	bne.w	8007882 <RI_GetRegisterMotor1+0x836>
              ReadVal.Float_Val = SCC_GetNominalCurrent(&SCC);
 800714e:	48ad      	ldr	r0, [pc, #692]	; (8007404 <RI_GetRegisterMotor1+0x3b8>)
 8007150:	f7fb fc0a 	bl	8002968 <SCC_GetNominalCurrent>
 8007154:	ed8d 0a01 	vstr	s0, [sp, #4]
              *regdataU32 = ReadVal.U32_Val;
 8007158:	9b01      	ldr	r3, [sp, #4]
 800715a:	6023      	str	r3, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 800715c:	2000      	movs	r0, #0
          *size = 4;
 800715e:	2304      	movs	r3, #4
 8007160:	802b      	strh	r3, [r5, #0]
  }
 8007162:	b016      	add	sp, #88	; 0x58
 8007164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        switch (regID)
 8007168:	28a0      	cmp	r0, #160	; 0xa0
 800716a:	f000 82db 	beq.w	8007724 <RI_GetRegisterMotor1+0x6d8>
 800716e:	28e0      	cmp	r0, #224	; 0xe0
 8007170:	f000 82a8 	beq.w	80076c4 <RI_GetRegisterMotor1+0x678>
            *size= 0 ; /* */
 8007174:	2300      	movs	r3, #0
 8007176:	802b      	strh	r3, [r5, #0]
            retVal = MCP_ERROR_UNKNOWN_REG;
 8007178:	2005      	movs	r0, #5
            break;
 800717a:	e786      	b.n	800708a <RI_GetRegisterMotor1+0x3e>
        if (freeSpace >= 2)
 800717c:	f1bc 0f01 	cmp.w	ip, #1
 8007180:	f340 829c 	ble.w	80076bc <RI_GetRegisterMotor1+0x670>
          switch (regID)
 8007184:	f5b0 6f21 	cmp.w	r0, #2576	; 0xa10
 8007188:	f000 842c 	beq.w	80079e4 <RI_GetRegisterMotor1+0x998>
 800718c:	f200 80b3 	bhi.w	80072f6 <RI_GetRegisterMotor1+0x2aa>
 8007190:	f5b0 6f92 	cmp.w	r0, #1168	; 0x490
 8007194:	f000 8436 	beq.w	8007a04 <RI_GetRegisterMotor1+0x9b8>
 8007198:	f200 8098 	bhi.w	80072cc <RI_GetRegisterMotor1+0x280>
 800719c:	f5b0 7f24 	cmp.w	r0, #656	; 0x290
 80071a0:	f000 8429 	beq.w	80079f6 <RI_GetRegisterMotor1+0x9aa>
 80071a4:	d964      	bls.n	8007270 <RI_GetRegisterMotor1+0x224>
 80071a6:	f5b0 7f54 	cmp.w	r0, #848	; 0x350
 80071aa:	f000 8407 	beq.w	80079bc <RI_GetRegisterMotor1+0x970>
 80071ae:	d956      	bls.n	800725e <RI_GetRegisterMotor1+0x212>
 80071b0:	f5b0 7f64 	cmp.w	r0, #912	; 0x390
 80071b4:	d149      	bne.n	800724a <RI_GetRegisterMotor1+0x1fe>
              STO_PLL_GetObserverGains(&STO_PLL_M1, &hC1, &hC2);
 80071b6:	4894      	ldr	r0, [pc, #592]	; (8007408 <RI_GetRegisterMotor1+0x3bc>)
 80071b8:	aa13      	add	r2, sp, #76	; 0x4c
 80071ba:	a912      	add	r1, sp, #72	; 0x48
 80071bc:	f006 fb96 	bl	800d8ec <STO_PLL_GetObserverGains>
              *regdata16 = hC2;
 80071c0:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80071c4:	8023      	strh	r3, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 80071c6:	2000      	movs	r0, #0
          *size = 2;
 80071c8:	2302      	movs	r3, #2
 80071ca:	802b      	strh	r3, [r5, #0]
  }
 80071cc:	b016      	add	sp, #88	; 0x58
 80071ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071d2:	f5b0 7f94 	cmp.w	r0, #296	; 0x128
 80071d6:	f040 82ef 	bne.w	80077b8 <RI_GetRegisterMotor1+0x76c>
            if ((*rawSize) +2U > (uint16_t)freeSpace)
 80071da:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = 12;
 80071de:	230c      	movs	r3, #12
            if ((*rawSize) +2U > (uint16_t)freeSpace)
 80071e0:	f1bc 0f0d 	cmp.w	ip, #13
            *rawSize = 12;
 80071e4:	8023      	strh	r3, [r4, #0]
            if ((*rawSize) +2U > (uint16_t)freeSpace)
 80071e6:	f200 82b5 	bhi.w	8007754 <RI_GetRegisterMotor1+0x708>
 80071ea:	230e      	movs	r3, #14
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 80071ec:	2008      	movs	r0, #8
 80071ee:	e76c      	b.n	80070ca <RI_GetRegisterMotor1+0x7e>
 80071f0:	f5b0 7f0a 	cmp.w	r0, #552	; 0x228
 80071f4:	f000 82f6 	beq.w	80077e4 <RI_GetRegisterMotor1+0x798>
 80071f8:	f5b0 7f5a 	cmp.w	r0, #872	; 0x368
 80071fc:	d112      	bne.n	8007224 <RI_GetRegisterMotor1+0x1d8>
            *rawSize = 4;
 80071fe:	2304      	movs	r3, #4
 8007200:	8023      	strh	r3, [r4, #0]
            *iqref = (uint16_t)MCI_GetIqdref(pMCIN).q;
 8007202:	4882      	ldr	r0, [pc, #520]	; (800740c <RI_GetRegisterMotor1+0x3c0>)
 8007204:	f7fd ff1e 	bl	8005044 <MCI_GetIqdref>
 8007208:	4603      	mov	r3, r0
 800720a:	8063      	strh	r3, [r4, #2]
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 800720c:	487f      	ldr	r0, [pc, #508]	; (800740c <RI_GetRegisterMotor1+0x3c0>)
            *iqref = (uint16_t)MCI_GetIqdref(pMCIN).q;
 800720e:	9312      	str	r3, [sp, #72]	; 0x48
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 8007210:	f7fd ff18 	bl	8005044 <MCI_GetIqdref>
        *size = (*rawSize) + 2U;
 8007214:	8823      	ldrh	r3, [r4, #0]
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 8007216:	f3c0 400f 	ubfx	r0, r0, #16, #16
        *size = (*rawSize) + 2U;
 800721a:	3302      	adds	r3, #2
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 800721c:	80a0      	strh	r0, [r4, #4]
        *size = (*rawSize) + 2U;
 800721e:	b29b      	uxth	r3, r3
    uint8_t retVal = MCP_CMD_OK;
 8007220:	2000      	movs	r0, #0
            break;
 8007222:	e752      	b.n	80070ca <RI_GetRegisterMotor1+0x7e>
 8007224:	f5b0 7ff4 	cmp.w	r0, #488	; 0x1e8
 8007228:	f040 82c6 	bne.w	80077b8 <RI_GetRegisterMotor1+0x76c>
            *rawSize = 4;
 800722c:	2304      	movs	r3, #4
 800722e:	8023      	strh	r3, [r4, #0]
            *torque = MCI_GetLastRampFinalTorque(pMCIN);
 8007230:	4876      	ldr	r0, [pc, #472]	; (800740c <RI_GetRegisterMotor1+0x3c0>)
 8007232:	f7fd feb9 	bl	8004fa8 <MCI_GetLastRampFinalTorque>
 8007236:	8060      	strh	r0, [r4, #2]
            *duration = MCI_GetLastRampFinalDuration(pMCIN) ;
 8007238:	4874      	ldr	r0, [pc, #464]	; (800740c <RI_GetRegisterMotor1+0x3c0>)
 800723a:	f7fd feb9 	bl	8004fb0 <MCI_GetLastRampFinalDuration>
        *size = (*rawSize) + 2U;
 800723e:	8823      	ldrh	r3, [r4, #0]
            *duration = MCI_GetLastRampFinalDuration(pMCIN) ;
 8007240:	80a0      	strh	r0, [r4, #4]
        *size = (*rawSize) + 2U;
 8007242:	3302      	adds	r3, #2
 8007244:	b29b      	uxth	r3, r3
    uint8_t retVal = MCP_CMD_OK;
 8007246:	2000      	movs	r0, #0
            break;
 8007248:	e73f      	b.n	80070ca <RI_GetRegisterMotor1+0x7e>
 800724a:	f5b0 6f8a 	cmp.w	r0, #1104	; 0x450
 800724e:	f040 844b 	bne.w	8007ae8 <RI_GetRegisterMotor1+0xa9c>
              *regdata16 = PID_GetKI (&(&STO_PLL_M1)->PIRegulator);
 8007252:	486f      	ldr	r0, [pc, #444]	; (8007410 <RI_GetRegisterMotor1+0x3c4>)
 8007254:	f004 fd3e 	bl	800bcd4 <PID_GetKI>
 8007258:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 800725a:	2000      	movs	r0, #0
              break;
 800725c:	e7b4      	b.n	80071c8 <RI_GetRegisterMotor1+0x17c>
 800725e:	f5b0 7f34 	cmp.w	r0, #720	; 0x2d0
 8007262:	d113      	bne.n	800728c <RI_GetRegisterMotor1+0x240>
              *regdata16 = PID_GetKI(&PIDIdHandle_M1);
 8007264:	486b      	ldr	r0, [pc, #428]	; (8007414 <RI_GetRegisterMotor1+0x3c8>)
 8007266:	f004 fd35 	bl	800bcd4 <PID_GetKI>
 800726a:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 800726c:	2000      	movs	r0, #0
              break;
 800726e:	e7ab      	b.n	80071c8 <RI_GetRegisterMotor1+0x17c>
 8007270:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
 8007274:	f000 8431 	beq.w	8007ada <RI_GetRegisterMotor1+0xa8e>
 8007278:	d91c      	bls.n	80072b4 <RI_GetRegisterMotor1+0x268>
 800727a:	f5b0 7fe8 	cmp.w	r0, #464	; 0x1d0
 800727e:	d10f      	bne.n	80072a0 <RI_GetRegisterMotor1+0x254>
              *regdata16 = PID_GetKI(&PIDIqHandle_M1);
 8007280:	4865      	ldr	r0, [pc, #404]	; (8007418 <RI_GetRegisterMotor1+0x3cc>)
 8007282:	f004 fd27 	bl	800bcd4 <PID_GetKI>
 8007286:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8007288:	2000      	movs	r0, #0
              break;
 800728a:	e79d      	b.n	80071c8 <RI_GetRegisterMotor1+0x17c>
 800728c:	f5b0 7f44 	cmp.w	r0, #784	; 0x310
 8007290:	f040 842a 	bne.w	8007ae8 <RI_GetRegisterMotor1+0xa9c>
              *regdata16 = PID_GetKD(&PIDIdHandle_M1);
 8007294:	485f      	ldr	r0, [pc, #380]	; (8007414 <RI_GetRegisterMotor1+0x3c8>)
 8007296:	f004 fd4d 	bl	800bd34 <PID_GetKD>
 800729a:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 800729c:	2000      	movs	r0, #0
              break;
 800729e:	e793      	b.n	80071c8 <RI_GetRegisterMotor1+0x17c>
 80072a0:	f5b0 7f04 	cmp.w	r0, #528	; 0x210
 80072a4:	f040 8420 	bne.w	8007ae8 <RI_GetRegisterMotor1+0xa9c>
              *regdata16 = PID_GetKD(&PIDIqHandle_M1);
 80072a8:	485b      	ldr	r0, [pc, #364]	; (8007418 <RI_GetRegisterMotor1+0x3cc>)
 80072aa:	f004 fd43 	bl	800bd34 <PID_GetKD>
 80072ae:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 80072b0:	2000      	movs	r0, #0
              break;
 80072b2:	e789      	b.n	80071c8 <RI_GetRegisterMotor1+0x17c>
 80072b4:	28d0      	cmp	r0, #208	; 0xd0
 80072b6:	f000 8409 	beq.w	8007acc <RI_GetRegisterMotor1+0xa80>
 80072ba:	f5b0 7f88 	cmp.w	r0, #272	; 0x110
 80072be:	d138      	bne.n	8007332 <RI_GetRegisterMotor1+0x2e6>
              *regdata16 = PID_GetKD(&PIDSpeedHandle_M1);
 80072c0:	4856      	ldr	r0, [pc, #344]	; (800741c <RI_GetRegisterMotor1+0x3d0>)
 80072c2:	f004 fd37 	bl	800bd34 <PID_GetKD>
 80072c6:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 80072c8:	2000      	movs	r0, #0
              break;
 80072ca:	e77d      	b.n	80071c8 <RI_GetRegisterMotor1+0x17c>
 80072cc:	f5b0 6f09 	cmp.w	r0, #2192	; 0x890
 80072d0:	f000 83f3 	beq.w	8007aba <RI_GetRegisterMotor1+0xa6e>
 80072d4:	d949      	bls.n	800736a <RI_GetRegisterMotor1+0x31e>
 80072d6:	f5b0 6f15 	cmp.w	r0, #2384	; 0x950
 80072da:	f000 83e7 	beq.w	8007aac <RI_GetRegisterMotor1+0xa60>
 80072de:	d93b      	bls.n	8007358 <RI_GetRegisterMotor1+0x30c>
 80072e0:	f5b0 6f19 	cmp.w	r0, #2448	; 0x990
 80072e4:	d12e      	bne.n	8007344 <RI_GetRegisterMotor1+0x2f8>
              *regdata16 = MCI_GetIqdref(pMCIN).d;
 80072e6:	4849      	ldr	r0, [pc, #292]	; (800740c <RI_GetRegisterMotor1+0x3c0>)
 80072e8:	f7fd feac 	bl	8005044 <MCI_GetIqdref>
 80072ec:	f3c0 400f 	ubfx	r0, r0, #16, #16
 80072f0:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 80072f2:	2000      	movs	r0, #0
              break;
 80072f4:	e768      	b.n	80071c8 <RI_GetRegisterMotor1+0x17c>
 80072f6:	f241 4390 	movw	r3, #5264	; 0x1490
 80072fa:	4298      	cmp	r0, r3
 80072fc:	f000 83cf 	beq.w	8007a9e <RI_GetRegisterMotor1+0xa52>
 8007300:	f240 8090 	bls.w	8007424 <RI_GetRegisterMotor1+0x3d8>
 8007304:	f241 6310 	movw	r3, #5648	; 0x1610
 8007308:	4298      	cmp	r0, r3
 800730a:	f000 83c1 	beq.w	8007a90 <RI_GetRegisterMotor1+0xa44>
 800730e:	d967      	bls.n	80073e0 <RI_GetRegisterMotor1+0x394>
 8007310:	f641 1310 	movw	r3, #6416	; 0x1910
 8007314:	4298      	cmp	r0, r3
 8007316:	f000 83b4 	beq.w	8007a82 <RI_GetRegisterMotor1+0xa36>
 800731a:	f240 80cb 	bls.w	80074b4 <RI_GetRegisterMotor1+0x468>
 800731e:	f641 4310 	movw	r3, #7184	; 0x1c10
 8007322:	4298      	cmp	r0, r3
 8007324:	d151      	bne.n	80073ca <RI_GetRegisterMotor1+0x37e>
              *regdataU16 = SCC_GetOverVoltageThreshold(&SCC);
 8007326:	4837      	ldr	r0, [pc, #220]	; (8007404 <RI_GetRegisterMotor1+0x3b8>)
 8007328:	f7fb fb8c 	bl	8002a44 <SCC_GetOverVoltageThreshold>
 800732c:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 800732e:	2000      	movs	r0, #0
              break;
 8007330:	e74a      	b.n	80071c8 <RI_GetRegisterMotor1+0x17c>
 8007332:	2890      	cmp	r0, #144	; 0x90
 8007334:	f040 83d8 	bne.w	8007ae8 <RI_GetRegisterMotor1+0xa9c>
              *regdata16 = PID_GetKP(&PIDSpeedHandle_M1);
 8007338:	4838      	ldr	r0, [pc, #224]	; (800741c <RI_GetRegisterMotor1+0x3d0>)
 800733a:	f004 fcc7 	bl	800bccc <PID_GetKP>
 800733e:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8007340:	2000      	movs	r0, #0
              break;
 8007342:	e741      	b.n	80071c8 <RI_GetRegisterMotor1+0x17c>
 8007344:	f5b0 6f1d 	cmp.w	r0, #2512	; 0x9d0
 8007348:	f040 83ce 	bne.w	8007ae8 <RI_GetRegisterMotor1+0xa9c>
              *regdata16 = MCI_GetVqd(pMCIN).q;
 800734c:	482f      	ldr	r0, [pc, #188]	; (800740c <RI_GetRegisterMotor1+0x3c0>)
 800734e:	f7fd fe87 	bl	8005060 <MCI_GetVqd>
 8007352:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8007354:	2000      	movs	r0, #0
              break;
 8007356:	e737      	b.n	80071c8 <RI_GetRegisterMotor1+0x17c>
 8007358:	f5b0 6f0d 	cmp.w	r0, #2256	; 0x8d0
 800735c:	d115      	bne.n	800738a <RI_GetRegisterMotor1+0x33e>
              *regdata16 = MCI_GetIqd(pMCIN).q;
 800735e:	482b      	ldr	r0, [pc, #172]	; (800740c <RI_GetRegisterMotor1+0x3c0>)
 8007360:	f7fd fe62 	bl	8005028 <MCI_GetIqd>
 8007364:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8007366:	2000      	movs	r0, #0
              break;
 8007368:	e72e      	b.n	80071c8 <RI_GetRegisterMotor1+0x17c>
 800736a:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 800736e:	f000 8381 	beq.w	8007a74 <RI_GetRegisterMotor1+0xa28>
 8007372:	d920      	bls.n	80073b6 <RI_GetRegisterMotor1+0x36a>
 8007374:	f5b0 6f01 	cmp.w	r0, #2064	; 0x810
 8007378:	d113      	bne.n	80073a2 <RI_GetRegisterMotor1+0x356>
              *regdata16 = MCI_GetIab(pMCIN).b;
 800737a:	4824      	ldr	r0, [pc, #144]	; (800740c <RI_GetRegisterMotor1+0x3c0>)
 800737c:	f7fd fe38 	bl	8004ff0 <MCI_GetIab>
 8007380:	f3c0 400f 	ubfx	r0, r0, #16, #16
 8007384:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8007386:	2000      	movs	r0, #0
              break;
 8007388:	e71e      	b.n	80071c8 <RI_GetRegisterMotor1+0x17c>
 800738a:	f5b0 6f11 	cmp.w	r0, #2320	; 0x910
 800738e:	f040 83ab 	bne.w	8007ae8 <RI_GetRegisterMotor1+0xa9c>
              *regdata16 = MCI_GetIqd(pMCIN).d;
 8007392:	481e      	ldr	r0, [pc, #120]	; (800740c <RI_GetRegisterMotor1+0x3c0>)
 8007394:	f7fd fe48 	bl	8005028 <MCI_GetIqd>
 8007398:	f3c0 400f 	ubfx	r0, r0, #16, #16
 800739c:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 800739e:	2000      	movs	r0, #0
              break;
 80073a0:	e712      	b.n	80071c8 <RI_GetRegisterMotor1+0x17c>
 80073a2:	f5b0 6f05 	cmp.w	r0, #2128	; 0x850
 80073a6:	f040 839f 	bne.w	8007ae8 <RI_GetRegisterMotor1+0xa9c>
              *regdata16 = MCI_GetIalphabeta(pMCIN).alpha;
 80073aa:	4818      	ldr	r0, [pc, #96]	; (800740c <RI_GetRegisterMotor1+0x3c0>)
 80073ac:	f7fd fe2e 	bl	800500c <MCI_GetIalphabeta>
 80073b0:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 80073b2:	2000      	movs	r0, #0
              break;
 80073b4:	e708      	b.n	80071c8 <RI_GetRegisterMotor1+0x17c>
 80073b6:	f5b0 6fb2 	cmp.w	r0, #1424	; 0x590
 80073ba:	f040 80c4 	bne.w	8007546 <RI_GetRegisterMotor1+0x4fa>
              *regdataU16 = VBS_GetAvBusVoltage_V(BusVoltageSensor);
 80073be:	4818      	ldr	r0, [pc, #96]	; (8007420 <RI_GetRegisterMotor1+0x3d4>)
 80073c0:	f004 fb7c 	bl	800babc <VBS_GetAvBusVoltage_V>
 80073c4:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 80073c6:	2000      	movs	r0, #0
              break;
 80073c8:	e6fe      	b.n	80071c8 <RI_GetRegisterMotor1+0x17c>
 80073ca:	f641 4350 	movw	r3, #7248	; 0x1c50
 80073ce:	4298      	cmp	r0, r3
 80073d0:	f040 838a 	bne.w	8007ae8 <RI_GetRegisterMotor1+0xa9c>
                *regdata16 = SCC_GetUnderVoltageThreshold(&SCC);
 80073d4:	480b      	ldr	r0, [pc, #44]	; (8007404 <RI_GetRegisterMotor1+0x3b8>)
 80073d6:	f7fb fb4f 	bl	8002a78 <SCC_GetUnderVoltageThreshold>
 80073da:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 80073dc:	2000      	movs	r0, #0
              break;
 80073de:	e6f3      	b.n	80071c8 <RI_GetRegisterMotor1+0x17c>
 80073e0:	f241 5350 	movw	r3, #5456	; 0x1550
 80073e4:	4298      	cmp	r0, r3
 80073e6:	f000 833e 	beq.w	8007a66 <RI_GetRegisterMotor1+0xa1a>
 80073ea:	f240 8082 	bls.w	80074f2 <RI_GetRegisterMotor1+0x4a6>
 80073ee:	f241 5390 	movw	r3, #5520	; 0x1590
 80073f2:	4298      	cmp	r0, r3
 80073f4:	d172      	bne.n	80074dc <RI_GetRegisterMotor1+0x490>
              *regdataU16 = PID_GetKDDivisorPOW2(&PIDIdHandle_M1);
 80073f6:	4807      	ldr	r0, [pc, #28]	; (8007414 <RI_GetRegisterMotor1+0x3c8>)
 80073f8:	f004 fca0 	bl	800bd3c <PID_GetKDDivisorPOW2>
 80073fc:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 80073fe:	2000      	movs	r0, #0
              break;
 8007400:	e6e2      	b.n	80071c8 <RI_GetRegisterMotor1+0x17c>
 8007402:	bf00      	nop
 8007404:	200002bc 	.word	0x200002bc
 8007408:	2000081c 	.word	0x2000081c
 800740c:	20002298 	.word	0x20002298
 8007410:	20000850 	.word	0x20000850
 8007414:	200000c4 	.word	0x200000c4
 8007418:	200000f0 	.word	0x200000f0
 800741c:	2000011c 	.word	0x2000011c
 8007420:	20000004 	.word	0x20000004
 8007424:	f5b0 6f41 	cmp.w	r0, #3088	; 0xc10
 8007428:	f000 8314 	beq.w	8007a54 <RI_GetRegisterMotor1+0xa08>
 800742c:	d918      	bls.n	8007460 <RI_GetRegisterMotor1+0x414>
 800742e:	f5b0 6f69 	cmp.w	r0, #3728	; 0xe90
 8007432:	d011      	beq.n	8007458 <RI_GetRegisterMotor1+0x40c>
 8007434:	d909      	bls.n	800744a <RI_GetRegisterMotor1+0x3fe>
 8007436:	f241 3350 	movw	r3, #4944	; 0x1350
 800743a:	4298      	cmp	r0, r3
 800743c:	d163      	bne.n	8007506 <RI_GetRegisterMotor1+0x4ba>
              *regdataU16 = SCC_GetPWMFrequencyHz(&SCC);
 800743e:	48af      	ldr	r0, [pc, #700]	; (80076fc <RI_GetRegisterMotor1+0x6b0>)
 8007440:	f7fb faf6 	bl	8002a30 <SCC_GetPWMFrequencyHz>
 8007444:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8007446:	2000      	movs	r0, #0
              break;
 8007448:	e6be      	b.n	80071c8 <RI_GetRegisterMotor1+0x17c>
 800744a:	f5b0 6f49 	cmp.w	r0, #3216	; 0xc90
 800744e:	f000 82c0 	beq.w	80079d2 <RI_GetRegisterMotor1+0x986>
 8007452:	f5b0 6f65 	cmp.w	r0, #3664	; 0xe50
 8007456:	d16c      	bne.n	8007532 <RI_GetRegisterMotor1+0x4e6>
          *size = 2;
 8007458:	2302      	movs	r3, #2
    uint8_t retVal = MCP_CMD_OK;
 800745a:	2000      	movs	r0, #0
          *size = 2;
 800745c:	802b      	strh	r3, [r5, #0]
 800745e:	e6b5      	b.n	80071cc <RI_GetRegisterMotor1+0x180>
 8007460:	f5b0 6f35 	cmp.w	r0, #2896	; 0xb50
 8007464:	f000 82d5 	beq.w	8007a12 <RI_GetRegisterMotor1+0x9c6>
 8007468:	f240 8085 	bls.w	8007576 <RI_GetRegisterMotor1+0x52a>
 800746c:	f5b0 6f39 	cmp.w	r0, #2960	; 0xb90
 8007470:	d12a      	bne.n	80074c8 <RI_GetRegisterMotor1+0x47c>
              *regdata16 = SPD_GetS16Speed((SpeednPosFdbk_Handle_t *)&STO_PLL_M1);
 8007472:	48a3      	ldr	r0, [pc, #652]	; (8007700 <RI_GetRegisterMotor1+0x6b4>)
 8007474:	f005 feb6 	bl	800d1e4 <SPD_GetS16Speed>
 8007478:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 800747a:	2000      	movs	r0, #0
              break;
 800747c:	e6a4      	b.n	80071c8 <RI_GetRegisterMotor1+0x17c>
 800747e:	2848      	cmp	r0, #72	; 0x48
 8007480:	f000 81d6 	beq.w	8007830 <RI_GetRegisterMotor1+0x7e4>
 8007484:	2888      	cmp	r0, #136	; 0x88
 8007486:	f040 817e 	bne.w	8007786 <RI_GetRegisterMotor1+0x73a>
              *data = (uint8_t)MCI_GetControlMode(pMCIN);
 800748a:	489e      	ldr	r0, [pc, #632]	; (8007704 <RI_GetRegisterMotor1+0x6b8>)
 800748c:	f7fd fd62 	bl	8004f54 <MCI_GetControlMode>
 8007490:	7020      	strb	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8007492:	2000      	movs	r0, #0
              break;
 8007494:	e633      	b.n	80070fe <RI_GetRegisterMotor1+0xb2>
 8007496:	f5b0 6f99 	cmp.w	r0, #1224	; 0x4c8
 800749a:	f000 81ec 	beq.w	8007876 <RI_GetRegisterMotor1+0x82a>
 800749e:	d95c      	bls.n	800755a <RI_GetRegisterMotor1+0x50e>
 80074a0:	f5b0 6fa1 	cmp.w	r0, #1288	; 0x508
 80074a4:	f040 816f 	bne.w	8007786 <RI_GetRegisterMotor1+0x73a>
              *data = OTT_IsMotorAlreadyProfiled(&OTT);
 80074a8:	4897      	ldr	r0, [pc, #604]	; (8007708 <RI_GetRegisterMotor1+0x6bc>)
 80074aa:	f7f9 fb61 	bl	8000b70 <OTT_IsMotorAlreadyProfiled>
 80074ae:	7020      	strb	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 80074b0:	2000      	movs	r0, #0
              break;
 80074b2:	e624      	b.n	80070fe <RI_GetRegisterMotor1+0xb2>
 80074b4:	f241 6350 	movw	r3, #5712	; 0x1650
 80074b8:	4298      	cmp	r0, r3
 80074ba:	d165      	bne.n	8007588 <RI_GetRegisterMotor1+0x53c>
              *regdataU16 = PID_GetKDDivisorPOW2(&PIDIqHandle_M1);
 80074bc:	4893      	ldr	r0, [pc, #588]	; (800770c <RI_GetRegisterMotor1+0x6c0>)
 80074be:	f004 fc3d 	bl	800bd3c <PID_GetKDDivisorPOW2>
 80074c2:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 80074c4:	2000      	movs	r0, #0
              break;
 80074c6:	e67f      	b.n	80071c8 <RI_GetRegisterMotor1+0x17c>
 80074c8:	f5b0 6f3d 	cmp.w	r0, #3024	; 0xbd0
 80074cc:	f040 830c 	bne.w	8007ae8 <RI_GetRegisterMotor1+0xa9c>
              *regdata16 = STO_PLL_GetEstimatedCurrent(&STO_PLL_M1).alpha;
 80074d0:	488b      	ldr	r0, [pc, #556]	; (8007700 <RI_GetRegisterMotor1+0x6b4>)
 80074d2:	f006 f9f7 	bl	800d8c4 <STO_PLL_GetEstimatedCurrent>
 80074d6:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 80074d8:	2000      	movs	r0, #0
              break;
 80074da:	e675      	b.n	80071c8 <RI_GetRegisterMotor1+0x17c>
 80074dc:	f241 53d0 	movw	r3, #5584	; 0x15d0
 80074e0:	4298      	cmp	r0, r3
 80074e2:	f040 8301 	bne.w	8007ae8 <RI_GetRegisterMotor1+0xa9c>
              *regdataU16 = PID_GetKPDivisorPOW2(&PIDIqHandle_M1);
 80074e6:	4889      	ldr	r0, [pc, #548]	; (800770c <RI_GetRegisterMotor1+0x6c0>)
 80074e8:	f004 fbfa 	bl	800bce0 <PID_GetKPDivisorPOW2>
 80074ec:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 80074ee:	2000      	movs	r0, #0
              break;
 80074f0:	e66a      	b.n	80071c8 <RI_GetRegisterMotor1+0x17c>
 80074f2:	f241 43d0 	movw	r3, #5328	; 0x14d0
 80074f6:	4298      	cmp	r0, r3
 80074f8:	d110      	bne.n	800751c <RI_GetRegisterMotor1+0x4d0>
              *regdataU16 = PID_GetKDDivisorPOW2(&PIDSpeedHandle_M1);
 80074fa:	4885      	ldr	r0, [pc, #532]	; (8007710 <RI_GetRegisterMotor1+0x6c4>)
 80074fc:	f004 fc1e 	bl	800bd3c <PID_GetKDDivisorPOW2>
 8007500:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8007502:	2000      	movs	r0, #0
              break;
 8007504:	e660      	b.n	80071c8 <RI_GetRegisterMotor1+0x17c>
 8007506:	f241 4350 	movw	r3, #5200	; 0x1450
 800750a:	4298      	cmp	r0, r3
 800750c:	f040 82ec 	bne.w	8007ae8 <RI_GetRegisterMotor1+0xa9c>
              *regdataU16 = (uint16_t)PID_GetKPDivisorPOW2(&PIDSpeedHandle_M1);
 8007510:	487f      	ldr	r0, [pc, #508]	; (8007710 <RI_GetRegisterMotor1+0x6c4>)
 8007512:	f004 fbe5 	bl	800bce0 <PID_GetKPDivisorPOW2>
 8007516:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8007518:	2000      	movs	r0, #0
              break;
 800751a:	e655      	b.n	80071c8 <RI_GetRegisterMotor1+0x17c>
 800751c:	f241 5310 	movw	r3, #5392	; 0x1510
 8007520:	4298      	cmp	r0, r3
 8007522:	f040 82e1 	bne.w	8007ae8 <RI_GetRegisterMotor1+0xa9c>
              *regdataU16 = PID_GetKPDivisorPOW2(&PIDIdHandle_M1);
 8007526:	487b      	ldr	r0, [pc, #492]	; (8007714 <RI_GetRegisterMotor1+0x6c8>)
 8007528:	f004 fbda 	bl	800bce0 <PID_GetKPDivisorPOW2>
 800752c:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 800752e:	2000      	movs	r0, #0
              break;
 8007530:	e64a      	b.n	80071c8 <RI_GetRegisterMotor1+0x17c>
 8007532:	f5b0 6f45 	cmp.w	r0, #3152	; 0xc50
 8007536:	f040 82d7 	bne.w	8007ae8 <RI_GetRegisterMotor1+0xa9c>
              *regdata16 = STO_PLL_GetEstimatedBemf(&STO_PLL_M1).alpha;
 800753a:	4871      	ldr	r0, [pc, #452]	; (8007700 <RI_GetRegisterMotor1+0x6b4>)
 800753c:	f006 f9b6 	bl	800d8ac <STO_PLL_GetEstimatedBemf>
 8007540:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8007542:	2000      	movs	r0, #0
              break;
 8007544:	e640      	b.n	80071c8 <RI_GetRegisterMotor1+0x17c>
 8007546:	f5b0 6fba 	cmp.w	r0, #1488	; 0x5d0
 800754a:	f040 82cd 	bne.w	8007ae8 <RI_GetRegisterMotor1+0xa9c>
              *regdata16 = NTC_GetAvTemp_C(&TempSensor_M1);
 800754e:	4872      	ldr	r0, [pc, #456]	; (8007718 <RI_GetRegisterMotor1+0x6cc>)
 8007550:	f004 fb9e 	bl	800bc90 <NTC_GetAvTemp_C>
 8007554:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8007556:	2000      	movs	r0, #0
              break;
 8007558:	e636      	b.n	80071c8 <RI_GetRegisterMotor1+0x17c>
 800755a:	f5b0 6f89 	cmp.w	r0, #1096	; 0x448
 800755e:	f000 816d 	beq.w	800783c <RI_GetRegisterMotor1+0x7f0>
 8007562:	f5b0 6f91 	cmp.w	r0, #1160	; 0x488
 8007566:	f040 810e 	bne.w	8007786 <RI_GetRegisterMotor1+0x73a>
              *data = SPD_GetElToMecRatio(&STO_PLL_M1._Super);
 800756a:	4865      	ldr	r0, [pc, #404]	; (8007700 <RI_GetRegisterMotor1+0x6b4>)
 800756c:	f005 fe44 	bl	800d1f8 <SPD_GetElToMecRatio>
 8007570:	7020      	strb	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8007572:	2000      	movs	r0, #0
              break;
 8007574:	e5c3      	b.n	80070fe <RI_GetRegisterMotor1+0xb2>
 8007576:	f5b0 6f25 	cmp.w	r0, #2640	; 0xa50
 800757a:	d110      	bne.n	800759e <RI_GetRegisterMotor1+0x552>
              *regdata16 = MCI_GetValphabeta(pMCIN).alpha;
 800757c:	4861      	ldr	r0, [pc, #388]	; (8007704 <RI_GetRegisterMotor1+0x6b8>)
 800757e:	f7fd fd7d 	bl	800507c <MCI_GetValphabeta>
 8007582:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8007584:	2000      	movs	r0, #0
              break;
 8007586:	e61f      	b.n	80071c8 <RI_GetRegisterMotor1+0x17c>
 8007588:	f641 03d0 	movw	r3, #6352	; 0x18d0
 800758c:	4298      	cmp	r0, r3
 800758e:	f040 82ab 	bne.w	8007ae8 <RI_GetRegisterMotor1+0xa9c>
              *regdataU16 = PID_GetKIDivisorPOW2(&(&STO_PLL_M1)->PIRegulator);
 8007592:	4862      	ldr	r0, [pc, #392]	; (800771c <RI_GetRegisterMotor1+0x6d0>)
 8007594:	f004 fbae 	bl	800bcf4 <PID_GetKIDivisorPOW2>
 8007598:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 800759a:	2000      	movs	r0, #0
              break;
 800759c:	e614      	b.n	80071c8 <RI_GetRegisterMotor1+0x17c>
 800759e:	f5b0 6f29 	cmp.w	r0, #2704	; 0xa90
 80075a2:	f040 82a1 	bne.w	8007ae8 <RI_GetRegisterMotor1+0xa9c>
              *regdata16 = MCI_GetValphabeta(pMCIN).beta;
 80075a6:	4857      	ldr	r0, [pc, #348]	; (8007704 <RI_GetRegisterMotor1+0x6b8>)
 80075a8:	f7fd fd68 	bl	800507c <MCI_GetValphabeta>
 80075ac:	f3c0 400f 	ubfx	r0, r0, #16, #16
 80075b0:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 80075b2:	2000      	movs	r0, #0
              break;
 80075b4:	e608      	b.n	80071c8 <RI_GetRegisterMotor1+0x17c>
 80075b6:	f241 7318 	movw	r3, #5912	; 0x1718
 80075ba:	4298      	cmp	r0, r3
 80075bc:	f000 819a 	beq.w	80078f4 <RI_GetRegisterMotor1+0x8a8>
 80075c0:	f241 7358 	movw	r3, #5976	; 0x1758
 80075c4:	4298      	cmp	r0, r3
 80075c6:	f040 815c 	bne.w	8007882 <RI_GetRegisterMotor1+0x836>
              *regdataU32 = SCC_GetKe(&SCC);
 80075ca:	484c      	ldr	r0, [pc, #304]	; (80076fc <RI_GetRegisterMotor1+0x6b0>)
 80075cc:	f7fa fda5 	bl	800211a <SCC_GetKe>
 80075d0:	6020      	str	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 80075d2:	2000      	movs	r0, #0
              break;
 80075d4:	e5c3      	b.n	800715e <RI_GetRegisterMotor1+0x112>
 80075d6:	2898      	cmp	r0, #152	; 0x98
 80075d8:	f000 81ba 	beq.w	8007950 <RI_GetRegisterMotor1+0x904>
 80075dc:	d92b      	bls.n	8007636 <RI_GetRegisterMotor1+0x5ea>
 80075de:	28d8      	cmp	r0, #216	; 0xd8
 80075e0:	f000 81e5 	beq.w	80079ae <RI_GetRegisterMotor1+0x962>
 80075e4:	f5b0 7f8c 	cmp.w	r0, #280	; 0x118
 80075e8:	f040 814b 	bne.w	8007882 <RI_GetRegisterMotor1+0x836>
              *regdata32 = STO_PLL_GetObservedBemfLevel(&STO_PLL_M1);
 80075ec:	4844      	ldr	r0, [pc, #272]	; (8007700 <RI_GetRegisterMotor1+0x6b4>)
 80075ee:	f006 f9b1 	bl	800d954 <STO_PLL_GetObservedBemfLevel>
 80075f2:	6020      	str	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 80075f4:	2000      	movs	r0, #0
              break;
 80075f6:	e5b2      	b.n	800715e <RI_GetRegisterMotor1+0x112>
 80075f8:	f641 13d8 	movw	r3, #6616	; 0x19d8
 80075fc:	4298      	cmp	r0, r3
 80075fe:	f000 819e 	beq.w	800793e <RI_GetRegisterMotor1+0x8f2>
 8007602:	d837      	bhi.n	8007674 <RI_GetRegisterMotor1+0x628>
 8007604:	f641 1318 	movw	r3, #6424	; 0x1918
 8007608:	4298      	cmp	r0, r3
 800760a:	f000 818f 	beq.w	800792c <RI_GetRegisterMotor1+0x8e0>
 800760e:	d921      	bls.n	8007654 <RI_GetRegisterMotor1+0x608>
 8007610:	f641 1358 	movw	r3, #6488	; 0x1958
 8007614:	4298      	cmp	r0, r3
 8007616:	f000 81c0 	beq.w	800799a <RI_GetRegisterMotor1+0x94e>
 800761a:	f641 1398 	movw	r3, #6552	; 0x1998
 800761e:	4298      	cmp	r0, r3
 8007620:	f040 812f 	bne.w	8007882 <RI_GetRegisterMotor1+0x836>
              ReadVal.Float_Val = OTT_GetF(&OTT);
 8007624:	4838      	ldr	r0, [pc, #224]	; (8007708 <RI_GetRegisterMotor1+0x6bc>)
 8007626:	f7f9 fa7f 	bl	8000b28 <OTT_GetF>
 800762a:	ed8d 0a01 	vstr	s0, [sp, #4]
              *regdataU32 = ReadVal.U32_Val;
 800762e:	9b01      	ldr	r3, [sp, #4]
 8007630:	6023      	str	r3, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8007632:	2000      	movs	r0, #0
 8007634:	e593      	b.n	800715e <RI_GetRegisterMotor1+0x112>
 8007636:	2818      	cmp	r0, #24
 8007638:	f000 81a8 	beq.w	800798c <RI_GetRegisterMotor1+0x940>
 800763c:	2858      	cmp	r0, #88	; 0x58
 800763e:	f040 8120 	bne.w	8007882 <RI_GetRegisterMotor1+0x836>
              *regdata32 = (((int32_t)MCI_GetAvrgMecSpeedUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 8007642:	4830      	ldr	r0, [pc, #192]	; (8007704 <RI_GetRegisterMotor1+0x6b8>)
 8007644:	f7fd fcc8 	bl	8004fd8 <MCI_GetAvrgMecSpeedUnit>
 8007648:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800764c:	0040      	lsls	r0, r0, #1
 800764e:	6020      	str	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8007650:	2000      	movs	r0, #0
              break;
 8007652:	e584      	b.n	800715e <RI_GetRegisterMotor1+0x112>
 8007654:	f641 0398 	movw	r3, #6296	; 0x1898
 8007658:	4298      	cmp	r0, r3
 800765a:	f000 818d 	beq.w	8007978 <RI_GetRegisterMotor1+0x92c>
 800765e:	f641 03d8 	movw	r3, #6360	; 0x18d8
 8007662:	4298      	cmp	r0, r3
 8007664:	f040 810d 	bne.w	8007882 <RI_GetRegisterMotor1+0x836>
              *regdata32 = SCC_GetNominalSpeed(&SCC);
 8007668:	4824      	ldr	r0, [pc, #144]	; (80076fc <RI_GetRegisterMotor1+0x6b0>)
 800766a:	f7fb f9ae 	bl	80029ca <SCC_GetNominalSpeed>
 800766e:	6020      	str	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8007670:	2000      	movs	r0, #0
              break;
 8007672:	e574      	b.n	800715e <RI_GetRegisterMotor1+0x112>
 8007674:	f641 3358 	movw	r3, #7000	; 0x1b58
 8007678:	4298      	cmp	r0, r3
 800767a:	f000 814d 	beq.w	8007918 <RI_GetRegisterMotor1+0x8cc>
 800767e:	d90d      	bls.n	800769c <RI_GetRegisterMotor1+0x650>
 8007680:	f641 5318 	movw	r3, #7448	; 0x1d18
 8007684:	4298      	cmp	r0, r3
 8007686:	f040 80fc 	bne.w	8007882 <RI_GetRegisterMotor1+0x836>
              ReadVal.Float_Val=SCC_GetResistorOffset(&SCC);
 800768a:	481c      	ldr	r0, [pc, #112]	; (80076fc <RI_GetRegisterMotor1+0x6b0>)
 800768c:	f7fb f9a6 	bl	80029dc <SCC_GetResistorOffset>
 8007690:	ed8d 0a01 	vstr	s0, [sp, #4]
              *regdata32 =ReadVal.U32_Val;
 8007694:	9b01      	ldr	r3, [sp, #4]
 8007696:	6023      	str	r3, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8007698:	2000      	movs	r0, #0
 800769a:	e560      	b.n	800715e <RI_GetRegisterMotor1+0x112>
 800769c:	f641 2318 	movw	r3, #6680	; 0x1a18
 80076a0:	4298      	cmp	r0, r3
 80076a2:	f000 8121 	beq.w	80078e8 <RI_GetRegisterMotor1+0x89c>
 80076a6:	f641 2358 	movw	r3, #6744	; 0x1a58
 80076aa:	4298      	cmp	r0, r3
 80076ac:	f040 80e9 	bne.w	8007882 <RI_GetRegisterMotor1+0x836>
              *regdata32 = SCC_GetEstMaxAcceleration(&SCC);
 80076b0:	4812      	ldr	r0, [pc, #72]	; (80076fc <RI_GetRegisterMotor1+0x6b0>)
 80076b2:	f7fb f990 	bl	80029d6 <SCC_GetEstMaxAcceleration>
 80076b6:	6020      	str	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 80076b8:	2000      	movs	r0, #0
              break;
 80076ba:	e550      	b.n	800715e <RI_GetRegisterMotor1+0x112>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 80076bc:	2008      	movs	r0, #8
  }
 80076be:	b016      	add	sp, #88	; 0x58
 80076c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            retVal = RI_MovString (MotorConfig_reg[motorID]->name ,charData, size, freeSpace);
 80076c4:	4b16      	ldr	r3, [pc, #88]	; (8007720 <RI_GetRegisterMotor1+0x6d4>)
 80076c6:	681a      	ldr	r2, [r3, #0]
  *size= 1U ; /* /0 is the min String size */
 80076c8:	2301      	movs	r3, #1
 80076ca:	802b      	strh	r3, [r5, #0]
            retVal = RI_MovString (MotorConfig_reg[motorID]->name ,charData, size, freeSpace);
 80076cc:	f102 0124 	add.w	r1, r2, #36	; 0x24
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80076d0:	f992 2024 	ldrsb.w	r2, [r2, #36]	; 0x24
 80076d4:	b17a      	cbz	r2, 80076f6 <RI_GetRegisterMotor1+0x6aa>
 80076d6:	fa1f fc8c 	uxth.w	ip, ip
 80076da:	e008      	b.n	80076ee <RI_GetRegisterMotor1+0x6a2>
    *tempdestString = *tempsrcString;
 80076dc:	f804 2b01 	strb.w	r2, [r4], #1
    *size = *size + 1U;
 80076e0:	882b      	ldrh	r3, [r5, #0]
 80076e2:	3301      	adds	r3, #1
 80076e4:	b29b      	uxth	r3, r3
 80076e6:	802b      	strh	r3, [r5, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80076e8:	f911 2f01 	ldrsb.w	r2, [r1, #1]!
 80076ec:	b11a      	cbz	r2, 80076f6 <RI_GetRegisterMotor1+0x6aa>
 80076ee:	4563      	cmp	r3, ip
 80076f0:	d3f4      	bcc.n	80076dc <RI_GetRegisterMotor1+0x690>
    retVal = MCP_ERROR_STRING_FORMAT;
 80076f2:	2006      	movs	r0, #6
 80076f4:	e4c9      	b.n	800708a <RI_GetRegisterMotor1+0x3e>
    *tempdestString = (int8_t)0;
 80076f6:	2000      	movs	r0, #0
 80076f8:	7020      	strb	r0, [r4, #0]
    return (retVal);
 80076fa:	e4c6      	b.n	800708a <RI_GetRegisterMotor1+0x3e>
 80076fc:	200002bc 	.word	0x200002bc
 8007700:	2000081c 	.word	0x2000081c
 8007704:	20002298 	.word	0x20002298
 8007708:	20000024 	.word	0x20000024
 800770c:	200000f0 	.word	0x200000f0
 8007710:	2000011c 	.word	0x2000011c
 8007714:	200000c4 	.word	0x200000c4
 8007718:	20000978 	.word	0x20000978
 800771c:	20000850 	.word	0x20000850
 8007720:	200009f4 	.word	0x200009f4
            retVal = RI_MovString (PWR_BOARD_NAME[motorID], charData, size, freeSpace);
 8007724:	4abe      	ldr	r2, [pc, #760]	; (8007a20 <RI_GetRegisterMotor1+0x9d4>)
  *size= 1U ; /* /0 is the min String size */
 8007726:	2301      	movs	r3, #1
            retVal = RI_MovString (PWR_BOARD_NAME[motorID], charData, size, freeSpace);
 8007728:	6811      	ldr	r1, [r2, #0]
  *size= 1U ; /* /0 is the min String size */
 800772a:	802b      	strh	r3, [r5, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 800772c:	f991 2000 	ldrsb.w	r2, [r1]
 8007730:	2a00      	cmp	r2, #0
 8007732:	d0e0      	beq.n	80076f6 <RI_GetRegisterMotor1+0x6aa>
 8007734:	fa1f fc8c 	uxth.w	ip, ip
 8007738:	e009      	b.n	800774e <RI_GetRegisterMotor1+0x702>
    *tempdestString = *tempsrcString;
 800773a:	f804 2b01 	strb.w	r2, [r4], #1
    *size = *size + 1U;
 800773e:	882b      	ldrh	r3, [r5, #0]
 8007740:	3301      	adds	r3, #1
 8007742:	b29b      	uxth	r3, r3
 8007744:	802b      	strh	r3, [r5, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8007746:	f911 2f01 	ldrsb.w	r2, [r1, #1]!
 800774a:	2a00      	cmp	r2, #0
 800774c:	d0d3      	beq.n	80076f6 <RI_GetRegisterMotor1+0x6aa>
 800774e:	459c      	cmp	ip, r3
 8007750:	d8f3      	bhi.n	800773a <RI_GetRegisterMotor1+0x6ee>
 8007752:	e7ce      	b.n	80076f2 <RI_GetRegisterMotor1+0x6a6>
              memcpy(rawData, &scaleParams_M1, sizeof(ScaleParams_t) );
 8007754:	4bb3      	ldr	r3, [pc, #716]	; (8007a24 <RI_GetRegisterMotor1+0x9d8>)
 8007756:	6858      	ldr	r0, [r3, #4]
 8007758:	681c      	ldr	r4, [r3, #0]
 800775a:	6899      	ldr	r1, [r3, #8]
 800775c:	68db      	ldr	r3, [r3, #12]
 800775e:	60d3      	str	r3, [r2, #12]
 8007760:	6050      	str	r0, [r2, #4]
 8007762:	6014      	str	r4, [r2, #0]
 8007764:	6091      	str	r1, [r2, #8]
 8007766:	230e      	movs	r3, #14
    uint8_t retVal = MCP_CMD_OK;
 8007768:	2000      	movs	r0, #0
 800776a:	e4ae      	b.n	80070ca <RI_GetRegisterMotor1+0x7e>
              ApplicationConfig_reg_t const *pApplicationConfig_reg = ApplicationConfig_reg[motorID];
 800776c:	4bae      	ldr	r3, [pc, #696]	; (8007a28 <RI_GetRegisterMotor1+0x9dc>)
              (void)memcpy(rawData, (const uint8_t *)pApplicationConfig_reg, sizeof(ApplicationConfig_reg_t));
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	6858      	ldr	r0, [r3, #4]
 8007772:	681c      	ldr	r4, [r3, #0]
 8007774:	6899      	ldr	r1, [r3, #8]
 8007776:	68db      	ldr	r3, [r3, #12]
 8007778:	60d3      	str	r3, [r2, #12]
 800777a:	6050      	str	r0, [r2, #4]
 800777c:	6014      	str	r4, [r2, #0]
 800777e:	6091      	str	r1, [r2, #8]
 8007780:	2312      	movs	r3, #18
    uint8_t retVal = MCP_CMD_OK;
 8007782:	2000      	movs	r0, #0
 8007784:	e4a1      	b.n	80070ca <RI_GetRegisterMotor1+0x7e>
 8007786:	2005      	movs	r0, #5
 8007788:	e4b9      	b.n	80070fe <RI_GetRegisterMotor1+0xb2>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 800778a:	4608      	mov	r0, r1
 800778c:	e47d      	b.n	800708a <RI_GetRegisterMotor1+0x3e>
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 800778e:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = (uint16_t)sizeof(MotorConfig_reg_t);
 8007792:	233c      	movs	r3, #60	; 0x3c
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8007794:	f1bc 0f3d 	cmp.w	ip, #61	; 0x3d
            *rawSize = (uint16_t)sizeof(MotorConfig_reg_t);
 8007798:	8023      	strh	r3, [r4, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 800779a:	f200 8084 	bhi.w	80078a6 <RI_GetRegisterMotor1+0x85a>
 800779e:	233e      	movs	r3, #62	; 0x3e
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 80077a0:	2008      	movs	r0, #8
 80077a2:	e492      	b.n	80070ca <RI_GetRegisterMotor1+0x7e>
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 80077a4:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = (uint16_t)sizeof(FOCFwConfig_reg_t);
 80077a8:	230e      	movs	r3, #14
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 80077aa:	f1bc 0f0f 	cmp.w	ip, #15
            *rawSize = (uint16_t)sizeof(FOCFwConfig_reg_t);
 80077ae:	8023      	strh	r3, [r4, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 80077b0:	d86c      	bhi.n	800788c <RI_GetRegisterMotor1+0x840>
 80077b2:	2310      	movs	r3, #16
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 80077b4:	2008      	movs	r0, #8
 80077b6:	e488      	b.n	80070ca <RI_GetRegisterMotor1+0x7e>
        *size = (*rawSize) + 2U;
 80077b8:	8823      	ldrh	r3, [r4, #0]
 80077ba:	3302      	adds	r3, #2
            retVal = MCP_ERROR_UNKNOWN_REG;
 80077bc:	2005      	movs	r0, #5
        *size = (*rawSize) + 2U;
 80077be:	b29b      	uxth	r3, r3
 80077c0:	e483      	b.n	80070ca <RI_GetRegisterMotor1+0x7e>
            *rpm = (((int32_t)MCI_GetLastRampFinalSpeed(pMCIN) * U_RPM) / (int32_t)SPEED_UNIT);
 80077c2:	489a      	ldr	r0, [pc, #616]	; (8007a2c <RI_GetRegisterMotor1+0x9e0>)
 80077c4:	f7fd fbec 	bl	8004fa0 <MCI_GetLastRampFinalSpeed>
 80077c8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80077cc:	0043      	lsls	r3, r0, #1
 80077ce:	f8c4 3002 	str.w	r3, [r4, #2]
            *duration = MCI_GetLastRampFinalDuration(pMCIN);
 80077d2:	4896      	ldr	r0, [pc, #600]	; (8007a2c <RI_GetRegisterMotor1+0x9e0>)
 80077d4:	f7fd fbec 	bl	8004fb0 <MCI_GetLastRampFinalDuration>
            *rawSize = 6;
 80077d8:	2306      	movs	r3, #6
            *duration = MCI_GetLastRampFinalDuration(pMCIN);
 80077da:	80e0      	strh	r0, [r4, #6]
            *rawSize = 6;
 80077dc:	8023      	strh	r3, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 80077de:	2000      	movs	r0, #0
            break;
 80077e0:	2308      	movs	r3, #8
 80077e2:	e472      	b.n	80070ca <RI_GetRegisterMotor1+0x7e>
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 80077e4:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = (uint16_t)RUC_MAX_PHASE_NUMBER*8U;
 80077e8:	2328      	movs	r3, #40	; 0x28
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 80077ea:	f1bc 0f29 	cmp.w	ip, #41	; 0x29
            *rawSize = (uint16_t)RUC_MAX_PHASE_NUMBER*8U;
 80077ee:	8023      	strh	r3, [r4, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 80077f0:	d949      	bls.n	8007886 <RI_GetRegisterMotor1+0x83a>
                (void)RUC_GetPhase( &RevUpControlM1 ,i, &revUpPhase);
 80077f2:	f8df 8244 	ldr.w	r8, [pc, #580]	; 8007a38 <RI_GetRegisterMotor1+0x9ec>
 80077f6:	4627      	mov	r7, r4
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 80077f8:	2600      	movs	r6, #0
                (void)RUC_GetPhase( &RevUpControlM1 ,i, &revUpPhase);
 80077fa:	b2f1      	uxtb	r1, r6
 80077fc:	aa13      	add	r2, sp, #76	; 0x4c
 80077fe:	4640      	mov	r0, r8
 8007800:	f005 fca6 	bl	800d150 <RUC_GetPhase>
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 8007804:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 8007808:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800780c:	005b      	lsls	r3, r3, #1
 800780e:	f8c7 3002 	str.w	r3, [r7, #2]
              for (i = 0; i <RUC_MAX_PHASE_NUMBER; i++)
 8007812:	3601      	adds	r6, #1
                *finalTorque = (uint16_t)revUpPhase.hFinalTorque; //cstat !MISRAC2012-Rule-11.3
 8007814:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8007818:	80fb      	strh	r3, [r7, #6]
              for (i = 0; i <RUC_MAX_PHASE_NUMBER; i++)
 800781a:	2e05      	cmp	r6, #5
                *durationms  = revUpPhase.hDurationms;
 800781c:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8007820:	f827 3f08 	strh.w	r3, [r7, #8]!
              for (i = 0; i <RUC_MAX_PHASE_NUMBER; i++)
 8007824:	d1e9      	bne.n	80077fa <RI_GetRegisterMotor1+0x7ae>
        *size = (*rawSize) + 2U;
 8007826:	8823      	ldrh	r3, [r4, #0]
 8007828:	3302      	adds	r3, #2
    uint8_t retVal = MCP_CMD_OK;
 800782a:	2000      	movs	r0, #0
        *size = (*rawSize) + 2U;
 800782c:	b29b      	uxth	r3, r3
 800782e:	e44c      	b.n	80070ca <RI_GetRegisterMotor1+0x7e>
              *data = (uint8_t)MCI_GetSTMState(pMCIN);
 8007830:	487e      	ldr	r0, [pc, #504]	; (8007a2c <RI_GetRegisterMotor1+0x9e0>)
 8007832:	f7fd fb21 	bl	8004e78 <MCI_GetSTMState>
 8007836:	7020      	strb	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8007838:	2000      	movs	r0, #0
              break;
 800783a:	e460      	b.n	80070fe <RI_GetRegisterMotor1+0xb2>
              steps = SCC_GetSteps(&SCC);
 800783c:	487c      	ldr	r0, [pc, #496]	; (8007a30 <RI_GetRegisterMotor1+0x9e4>)
 800783e:	f7fa fc23 	bl	8002088 <SCC_GetSteps>
 8007842:	4606      	mov	r6, r0
              steps += OTT_GetSteps (&OTT);
 8007844:	487b      	ldr	r0, [pc, #492]	; (8007a34 <RI_GetRegisterMotor1+0x9e8>)
 8007846:	f7f9 f8a6 	bl	8000996 <OTT_GetSteps>
 800784a:	4430      	add	r0, r6
              *data = steps-1u;
 800784c:	1e43      	subs	r3, r0, #1
 800784e:	7023      	strb	r3, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8007850:	2000      	movs	r0, #0
              break;
 8007852:	e454      	b.n	80070fe <RI_GetRegisterMotor1+0xb2>
              *data = (uint8_t)RUC_GetNumberOfPhases(&RevUpControlM1);
 8007854:	4878      	ldr	r0, [pc, #480]	; (8007a38 <RI_GetRegisterMotor1+0x9ec>)
 8007856:	f005 fc77 	bl	800d148 <RUC_GetNumberOfPhases>
 800785a:	7020      	strb	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 800785c:	2000      	movs	r0, #0
              break;
 800785e:	e44e      	b.n	80070fe <RI_GetRegisterMotor1+0xb2>
              state = SCC_GetState(&SCC);
 8007860:	4873      	ldr	r0, [pc, #460]	; (8007a30 <RI_GetRegisterMotor1+0x9e4>)
 8007862:	f7fa fc13 	bl	800208c <SCC_GetState>
 8007866:	4606      	mov	r6, r0
              state += OTT_GetState (&OTT);
 8007868:	4872      	ldr	r0, [pc, #456]	; (8007a34 <RI_GetRegisterMotor1+0x9e8>)
 800786a:	f7f9 f896 	bl	800099a <OTT_GetState>
 800786e:	4430      	add	r0, r6
              *data = state;
 8007870:	7020      	strb	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8007872:	2000      	movs	r0, #0
              break;
 8007874:	e443      	b.n	80070fe <RI_GetRegisterMotor1+0xb2>
              *data = SCC_GetFOCRepRate(&SCC);
 8007876:	486e      	ldr	r0, [pc, #440]	; (8007a30 <RI_GetRegisterMotor1+0x9e4>)
 8007878:	f7fb f8df 	bl	8002a3a <SCC_GetFOCRepRate>
 800787c:	7020      	strb	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 800787e:	2000      	movs	r0, #0
              break;
 8007880:	e43d      	b.n	80070fe <RI_GetRegisterMotor1+0xb2>
 8007882:	2005      	movs	r0, #5
 8007884:	e46b      	b.n	800715e <RI_GetRegisterMotor1+0x112>
 8007886:	232a      	movs	r3, #42	; 0x2a
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8007888:	2008      	movs	r0, #8
            break;
 800788a:	e41e      	b.n	80070ca <RI_GetRegisterMotor1+0x7e>
              FOCFwConfig_reg_t const *pFOCConfig_reg = FOCConfig_reg[motorID];
 800788c:	4b6b      	ldr	r3, [pc, #428]	; (8007a3c <RI_GetRegisterMotor1+0x9f0>)
              (void)memcpy(rawData, (const uint8_t *)pFOCConfig_reg, sizeof(FOCFwConfig_reg_t));
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	6818      	ldr	r0, [r3, #0]
 8007892:	6859      	ldr	r1, [r3, #4]
 8007894:	689c      	ldr	r4, [r3, #8]
 8007896:	6094      	str	r4, [r2, #8]
 8007898:	6010      	str	r0, [r2, #0]
 800789a:	6051      	str	r1, [r2, #4]
 800789c:	899b      	ldrh	r3, [r3, #12]
 800789e:	8193      	strh	r3, [r2, #12]
    uint8_t retVal = MCP_CMD_OK;
 80078a0:	2000      	movs	r0, #0
              (void)memcpy(rawData, (const uint8_t *)pFOCConfig_reg, sizeof(FOCFwConfig_reg_t));
 80078a2:	2310      	movs	r3, #16
 80078a4:	e411      	b.n	80070ca <RI_GetRegisterMotor1+0x7e>
              MotorConfig_reg_t const *pMotorConfig_reg = MotorConfig_reg[motorID];
 80078a6:	4b66      	ldr	r3, [pc, #408]	; (8007a40 <RI_GetRegisterMotor1+0x9f4>)
              (void)memcpy(rawData, (const uint8_t *)pMotorConfig_reg, sizeof(MotorConfig_reg_t));
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f103 0730 	add.w	r7, r3, #48	; 0x30
 80078ae:	681c      	ldr	r4, [r3, #0]
 80078b0:	6858      	ldr	r0, [r3, #4]
 80078b2:	6899      	ldr	r1, [r3, #8]
 80078b4:	68de      	ldr	r6, [r3, #12]
 80078b6:	60d6      	str	r6, [r2, #12]
 80078b8:	3310      	adds	r3, #16
 80078ba:	42bb      	cmp	r3, r7
 80078bc:	6014      	str	r4, [r2, #0]
 80078be:	6050      	str	r0, [r2, #4]
 80078c0:	6091      	str	r1, [r2, #8]
 80078c2:	f102 0210 	add.w	r2, r2, #16
 80078c6:	d1f2      	bne.n	80078ae <RI_GetRegisterMotor1+0x862>
 80078c8:	6818      	ldr	r0, [r3, #0]
 80078ca:	6859      	ldr	r1, [r3, #4]
 80078cc:	689b      	ldr	r3, [r3, #8]
 80078ce:	6093      	str	r3, [r2, #8]
 80078d0:	6010      	str	r0, [r2, #0]
 80078d2:	6051      	str	r1, [r2, #4]
 80078d4:	233e      	movs	r3, #62	; 0x3e
    uint8_t retVal = MCP_CMD_OK;
 80078d6:	2000      	movs	r0, #0
 80078d8:	f7ff bbf7 	b.w	80070ca <RI_GetRegisterMotor1+0x7e>
              *regdataU32 = OTT_GetNominalSpeed(&OTT);
 80078dc:	4855      	ldr	r0, [pc, #340]	; (8007a34 <RI_GetRegisterMotor1+0x9e8>)
 80078de:	f7f9 f856 	bl	800098e <OTT_GetNominalSpeed>
 80078e2:	6020      	str	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 80078e4:	2000      	movs	r0, #0
              break;
 80078e6:	e43a      	b.n	800715e <RI_GetRegisterMotor1+0x112>
              *regdata32 = SCC_GetEstMaxOLSpeed(&SCC);
 80078e8:	4851      	ldr	r0, [pc, #324]	; (8007a30 <RI_GetRegisterMotor1+0x9e4>)
 80078ea:	f7fb f871 	bl	80029d0 <SCC_GetEstMaxOLSpeed>
 80078ee:	6020      	str	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 80078f0:	2000      	movs	r0, #0
              break;
 80078f2:	e434      	b.n	800715e <RI_GetRegisterMotor1+0x112>
              *regdataU32 = SCC_GetLs(&SCC);
 80078f4:	484e      	ldr	r0, [pc, #312]	; (8007a30 <RI_GetRegisterMotor1+0x9e4>)
 80078f6:	f7fa fc0c 	bl	8002112 <SCC_GetLs>
 80078fa:	6020      	str	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 80078fc:	2000      	movs	r0, #0
              break;
 80078fe:	e42e      	b.n	800715e <RI_GetRegisterMotor1+0x112>
              *regdataU32 = SCC_GetVbus(&SCC);
 8007900:	484b      	ldr	r0, [pc, #300]	; (8007a30 <RI_GetRegisterMotor1+0x9e4>)
 8007902:	f7fa fc0e 	bl	8002122 <SCC_GetVbus>
 8007906:	6020      	str	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8007908:	2000      	movs	r0, #0
              break;
 800790a:	e428      	b.n	800715e <RI_GetRegisterMotor1+0x112>
              *regdataU32 = SCC_GetRs(&SCC);
 800790c:	4848      	ldr	r0, [pc, #288]	; (8007a30 <RI_GetRegisterMotor1+0x9e4>)
 800790e:	f7fa fbfc 	bl	800210a <SCC_GetRs>
 8007912:	6020      	str	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8007914:	2000      	movs	r0, #0
              break;
 8007916:	e422      	b.n	800715e <RI_GetRegisterMotor1+0x112>
              ReadVal.Float_Val = PQD_GetAvrgElMotorPowerW(pMPM[M1]);
 8007918:	4b4a      	ldr	r3, [pc, #296]	; (8007a44 <RI_GetRegisterMotor1+0x9f8>)
 800791a:	6818      	ldr	r0, [r3, #0]
 800791c:	f004 fa7a 	bl	800be14 <PQD_GetAvrgElMotorPowerW>
 8007920:	ed8d 0a01 	vstr	s0, [sp, #4]
              *regdataU32 = ReadVal.U32_Val; //cstat !UNION-type-punning
 8007924:	9b01      	ldr	r3, [sp, #4]
 8007926:	6023      	str	r3, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8007928:	2000      	movs	r0, #0
 800792a:	e418      	b.n	800715e <RI_GetRegisterMotor1+0x112>
              ReadVal.Float_Val = SCC_GetCurrentBandwidth(&SCC);
 800792c:	4840      	ldr	r0, [pc, #256]	; (8007a30 <RI_GetRegisterMotor1+0x9e4>)
 800792e:	f7fb f87c 	bl	8002a2a <SCC_GetCurrentBandwidth>
 8007932:	ed8d 0a01 	vstr	s0, [sp, #4]
              *regdataU32 = ReadVal.U32_Val;
 8007936:	9b01      	ldr	r3, [sp, #4]
 8007938:	6023      	str	r3, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 800793a:	2000      	movs	r0, #0
 800793c:	e40f      	b.n	800715e <RI_GetRegisterMotor1+0x112>
              ReadVal.Float_Val = SCC_GetStartupCurrentAmp(&SCC);
 800793e:	483c      	ldr	r0, [pc, #240]	; (8007a30 <RI_GetRegisterMotor1+0x9e4>)
 8007940:	f7fb f86d 	bl	8002a1e <SCC_GetStartupCurrentAmp>
 8007944:	ed8d 0a01 	vstr	s0, [sp, #4]
              *regdataU32 = ReadVal.U32_Val;
 8007948:	9b01      	ldr	r3, [sp, #4]
 800794a:	6023      	str	r3, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 800794c:	2000      	movs	r0, #0
 800794e:	e406      	b.n	800715e <RI_GetRegisterMotor1+0x112>
              *regdata32 = (((int32_t)MCI_GetMecSpeedRefUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 8007950:	4836      	ldr	r0, [pc, #216]	; (8007a2c <RI_GetRegisterMotor1+0x9e0>)
 8007952:	f7fd fb49 	bl	8004fe8 <MCI_GetMecSpeedRefUnit>
 8007956:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800795a:	0040      	lsls	r0, r0, #1
 800795c:	6020      	str	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 800795e:	2000      	movs	r0, #0
              break;
 8007960:	f7ff bbfd 	b.w	800715e <RI_GetRegisterMotor1+0x112>
              ReadVal.Float_Val = OTT_GetSpeedRegulatorBandwidth(&OTT);
 8007964:	4833      	ldr	r0, [pc, #204]	; (8007a34 <RI_GetRegisterMotor1+0x9e8>)
 8007966:	f7f9 f8c3 	bl	8000af0 <OTT_GetSpeedRegulatorBandwidth>
 800796a:	ed8d 0a01 	vstr	s0, [sp, #4]
              *regdataU32 = ReadVal.U32_Val;
 800796e:	9b01      	ldr	r3, [sp, #4]
 8007970:	6023      	str	r3, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8007972:	2000      	movs	r0, #0
 8007974:	f7ff bbf3 	b.w	800715e <RI_GetRegisterMotor1+0x112>
              ReadVal.Float_Val = SCC_GetLdLqRatio(&SCC);
 8007978:	482d      	ldr	r0, [pc, #180]	; (8007a30 <RI_GetRegisterMotor1+0x9e4>)
 800797a:	f7fa fffb 	bl	8002974 <SCC_GetLdLqRatio>
 800797e:	ed8d 0a01 	vstr	s0, [sp, #4]
              *regdataU32 = ReadVal.U32_Val;
 8007982:	9b01      	ldr	r3, [sp, #4]
 8007984:	6023      	str	r3, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8007986:	2000      	movs	r0, #0
 8007988:	f7ff bbe9 	b.w	800715e <RI_GetRegisterMotor1+0x112>
              *regdataU32 = MCI_GetFaultState(pMCIN);
 800798c:	4827      	ldr	r0, [pc, #156]	; (8007a2c <RI_GetRegisterMotor1+0x9e0>)
 800798e:	f7fd fadb 	bl	8004f48 <MCI_GetFaultState>
 8007992:	6020      	str	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8007994:	2000      	movs	r0, #0
              break;
 8007996:	f7ff bbe2 	b.w	800715e <RI_GetRegisterMotor1+0x112>
              ReadVal.Float_Val = OTT_GetJ(&OTT);
 800799a:	4826      	ldr	r0, [pc, #152]	; (8007a34 <RI_GetRegisterMotor1+0x9e8>)
 800799c:	f7f9 f8ac 	bl	8000af8 <OTT_GetJ>
 80079a0:	ed8d 0a01 	vstr	s0, [sp, #4]
              *regdataU32 = ReadVal.U32_Val;
 80079a4:	9b01      	ldr	r3, [sp, #4]
 80079a6:	6023      	str	r3, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 80079a8:	2000      	movs	r0, #0
 80079aa:	f7ff bbd8 	b.w	800715e <RI_GetRegisterMotor1+0x112>
              *regdata32 = STO_PLL_GetEstimatedBemfLevel(&STO_PLL_M1);
 80079ae:	4826      	ldr	r0, [pc, #152]	; (8007a48 <RI_GetRegisterMotor1+0x9fc>)
 80079b0:	f005 ffcc 	bl	800d94c <STO_PLL_GetEstimatedBemfLevel>
 80079b4:	6020      	str	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 80079b6:	2000      	movs	r0, #0
              break;
 80079b8:	f7ff bbd1 	b.w	800715e <RI_GetRegisterMotor1+0x112>
              STO_PLL_GetObserverGains(&STO_PLL_M1, &hC1, &hC2);
 80079bc:	4822      	ldr	r0, [pc, #136]	; (8007a48 <RI_GetRegisterMotor1+0x9fc>)
 80079be:	aa13      	add	r2, sp, #76	; 0x4c
 80079c0:	a912      	add	r1, sp, #72	; 0x48
 80079c2:	f005 ff93 	bl	800d8ec <STO_PLL_GetObserverGains>
              *regdata16 = hC1;
 80079c6:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80079ca:	8023      	strh	r3, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 80079cc:	2000      	movs	r0, #0
 80079ce:	f7ff bbfb 	b.w	80071c8 <RI_GetRegisterMotor1+0x17c>
              *regdata16 = STO_PLL_GetEstimatedBemf(&STO_PLL_M1).beta;
 80079d2:	481d      	ldr	r0, [pc, #116]	; (8007a48 <RI_GetRegisterMotor1+0x9fc>)
 80079d4:	f005 ff6a 	bl	800d8ac <STO_PLL_GetEstimatedBemf>
 80079d8:	f3c0 400f 	ubfx	r0, r0, #16, #16
 80079dc:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 80079de:	2000      	movs	r0, #0
              break;
 80079e0:	f7ff bbf2 	b.w	80071c8 <RI_GetRegisterMotor1+0x17c>
              *regdata16 = MCI_GetVqd(pMCIN).d;
 80079e4:	4811      	ldr	r0, [pc, #68]	; (8007a2c <RI_GetRegisterMotor1+0x9e0>)
 80079e6:	f7fd fb3b 	bl	8005060 <MCI_GetVqd>
 80079ea:	f3c0 400f 	ubfx	r0, r0, #16, #16
 80079ee:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 80079f0:	2000      	movs	r0, #0
              break;
 80079f2:	f7ff bbe9 	b.w	80071c8 <RI_GetRegisterMotor1+0x17c>
              *regdata16 = PID_GetKP(&PIDIdHandle_M1);
 80079f6:	4815      	ldr	r0, [pc, #84]	; (8007a4c <RI_GetRegisterMotor1+0xa00>)
 80079f8:	f004 f968 	bl	800bccc <PID_GetKP>
 80079fc:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 80079fe:	2000      	movs	r0, #0
              break;
 8007a00:	f7ff bbe2 	b.w	80071c8 <RI_GetRegisterMotor1+0x17c>
              *regdata16 = PID_GetKP (&(&STO_PLL_M1)->PIRegulator);
 8007a04:	4812      	ldr	r0, [pc, #72]	; (8007a50 <RI_GetRegisterMotor1+0xa04>)
 8007a06:	f004 f961 	bl	800bccc <PID_GetKP>
 8007a0a:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8007a0c:	2000      	movs	r0, #0
              break;
 8007a0e:	f7ff bbdb 	b.w	80071c8 <RI_GetRegisterMotor1+0x17c>
              *regdata16 = SPD_GetElAngle((SpeednPosFdbk_Handle_t *)&STO_PLL_M1);
 8007a12:	480d      	ldr	r0, [pc, #52]	; (8007a48 <RI_GetRegisterMotor1+0x9fc>)
 8007a14:	f005 fbac 	bl	800d170 <SPD_GetElAngle>
 8007a18:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8007a1a:	2000      	movs	r0, #0
              break;
 8007a1c:	f7ff bbd4 	b.w	80071c8 <RI_GetRegisterMotor1+0x17c>
 8007a20:	200009f8 	.word	0x200009f8
 8007a24:	20000a50 	.word	0x20000a50
 8007a28:	200009ec 	.word	0x200009ec
 8007a2c:	20002298 	.word	0x20002298
 8007a30:	200002bc 	.word	0x200002bc
 8007a34:	20000024 	.word	0x20000024
 8007a38:	20000244 	.word	0x20000244
 8007a3c:	200009f0 	.word	0x200009f0
 8007a40:	200009f4 	.word	0x200009f4
 8007a44:	200009dc 	.word	0x200009dc
 8007a48:	2000081c 	.word	0x2000081c
 8007a4c:	200000c4 	.word	0x200000c4
 8007a50:	20000850 	.word	0x20000850
              *regdata16 = STO_PLL_GetEstimatedCurrent(&STO_PLL_M1).beta;
 8007a54:	4826      	ldr	r0, [pc, #152]	; (8007af0 <RI_GetRegisterMotor1+0xaa4>)
 8007a56:	f005 ff35 	bl	800d8c4 <STO_PLL_GetEstimatedCurrent>
 8007a5a:	f3c0 400f 	ubfx	r0, r0, #16, #16
 8007a5e:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8007a60:	2000      	movs	r0, #0
              break;
 8007a62:	f7ff bbb1 	b.w	80071c8 <RI_GetRegisterMotor1+0x17c>
              *regdataU16 = PID_GetKIDivisorPOW2(&PIDIdHandle_M1);
 8007a66:	4823      	ldr	r0, [pc, #140]	; (8007af4 <RI_GetRegisterMotor1+0xaa8>)
 8007a68:	f004 f944 	bl	800bcf4 <PID_GetKIDivisorPOW2>
 8007a6c:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8007a6e:	2000      	movs	r0, #0
              break;
 8007a70:	f7ff bbaa 	b.w	80071c8 <RI_GetRegisterMotor1+0x17c>
              *regdata16 = MCI_GetIab(pMCIN).a;
 8007a74:	4820      	ldr	r0, [pc, #128]	; (8007af8 <RI_GetRegisterMotor1+0xaac>)
 8007a76:	f7fd fabb 	bl	8004ff0 <MCI_GetIab>
 8007a7a:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8007a7c:	2000      	movs	r0, #0
              break;
 8007a7e:	f7ff bba3 	b.w	80071c8 <RI_GetRegisterMotor1+0x17c>
              *regdataU16 = PID_GetKPDivisorPOW2(&(&STO_PLL_M1)->PIRegulator);
 8007a82:	481e      	ldr	r0, [pc, #120]	; (8007afc <RI_GetRegisterMotor1+0xab0>)
 8007a84:	f004 f92c 	bl	800bce0 <PID_GetKPDivisorPOW2>
 8007a88:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8007a8a:	2000      	movs	r0, #0
              break;
 8007a8c:	f7ff bb9c 	b.w	80071c8 <RI_GetRegisterMotor1+0x17c>
              *regdataU16 = PID_GetKIDivisorPOW2(&PIDIqHandle_M1);
 8007a90:	481b      	ldr	r0, [pc, #108]	; (8007b00 <RI_GetRegisterMotor1+0xab4>)
 8007a92:	f004 f92f 	bl	800bcf4 <PID_GetKIDivisorPOW2>
 8007a96:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8007a98:	2000      	movs	r0, #0
              break;
 8007a9a:	f7ff bb95 	b.w	80071c8 <RI_GetRegisterMotor1+0x17c>
              *regdataU16 = (uint16_t)PID_GetKIDivisorPOW2(&PIDSpeedHandle_M1);
 8007a9e:	4819      	ldr	r0, [pc, #100]	; (8007b04 <RI_GetRegisterMotor1+0xab8>)
 8007aa0:	f004 f928 	bl	800bcf4 <PID_GetKIDivisorPOW2>
 8007aa4:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8007aa6:	2000      	movs	r0, #0
              break;
 8007aa8:	f7ff bb8e 	b.w	80071c8 <RI_GetRegisterMotor1+0x17c>
              *regdata16 = MCI_GetIqdref(pMCIN).q;
 8007aac:	4812      	ldr	r0, [pc, #72]	; (8007af8 <RI_GetRegisterMotor1+0xaac>)
 8007aae:	f7fd fac9 	bl	8005044 <MCI_GetIqdref>
 8007ab2:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8007ab4:	2000      	movs	r0, #0
              break;
 8007ab6:	f7ff bb87 	b.w	80071c8 <RI_GetRegisterMotor1+0x17c>
              *regdata16 = MCI_GetIalphabeta(pMCIN).beta;
 8007aba:	480f      	ldr	r0, [pc, #60]	; (8007af8 <RI_GetRegisterMotor1+0xaac>)
 8007abc:	f7fd faa6 	bl	800500c <MCI_GetIalphabeta>
 8007ac0:	f3c0 400f 	ubfx	r0, r0, #16, #16
 8007ac4:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8007ac6:	2000      	movs	r0, #0
              break;
 8007ac8:	f7ff bb7e 	b.w	80071c8 <RI_GetRegisterMotor1+0x17c>
              *regdata16 = PID_GetKI(&PIDSpeedHandle_M1);
 8007acc:	480d      	ldr	r0, [pc, #52]	; (8007b04 <RI_GetRegisterMotor1+0xab8>)
 8007ace:	f004 f901 	bl	800bcd4 <PID_GetKI>
 8007ad2:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8007ad4:	2000      	movs	r0, #0
              break;
 8007ad6:	f7ff bb77 	b.w	80071c8 <RI_GetRegisterMotor1+0x17c>
              *regdata16 = PID_GetKP(&PIDIqHandle_M1);
 8007ada:	4809      	ldr	r0, [pc, #36]	; (8007b00 <RI_GetRegisterMotor1+0xab4>)
 8007adc:	f004 f8f6 	bl	800bccc <PID_GetKP>
 8007ae0:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8007ae2:	2000      	movs	r0, #0
              break;
 8007ae4:	f7ff bb70 	b.w	80071c8 <RI_GetRegisterMotor1+0x17c>
 8007ae8:	2005      	movs	r0, #5
 8007aea:	f7ff bb6d 	b.w	80071c8 <RI_GetRegisterMotor1+0x17c>
 8007aee:	bf00      	nop
 8007af0:	2000081c 	.word	0x2000081c
 8007af4:	200000c4 	.word	0x200000c4
 8007af8:	20002298 	.word	0x20002298
 8007afc:	20000850 	.word	0x20000850
 8007b00:	200000f0 	.word	0x200000f0
 8007b04:	2000011c 	.word	0x2000011c

08007b08 <RI_GetIDSize>:
  return (retVal);
}

uint8_t RI_GetIDSize(uint16_t dataID)
{
  uint8_t typeID = ((uint8_t)dataID) & TYPE_MASK;
 8007b08:	f000 0038 	and.w	r0, r0, #56	; 0x38
 8007b0c:	3808      	subs	r0, #8
 8007b0e:	b2c0      	uxtb	r0, r0
 8007b10:	2810      	cmp	r0, #16
 8007b12:	bf9a      	itte	ls
 8007b14:	4b01      	ldrls	r3, [pc, #4]	; (8007b1c <RI_GetIDSize+0x14>)
 8007b16:	5c18      	ldrbls	r0, [r3, r0]
 8007b18:	2000      	movhi	r0, #0
      break;
    }
  }

  return (result);
}
 8007b1a:	4770      	bx	lr
 8007b1c:	0801c868 	.word	0x0801c868

08007b20 <RI_GetPtrReg>:

    MCI_Handle_t *pMCIN = &Mci[0];
    uint16_t regID = dataID & REG_MASK;
    uint8_t typeID = ((uint8_t)dataID) & TYPE_MASK;

    switch (typeID)
 8007b20:	f000 0338 	and.w	r3, r0, #56	; 0x38
 8007b24:	2b10      	cmp	r3, #16
 8007b26:	d003      	beq.n	8007b30 <RI_GetPtrReg+0x10>
 8007b28:	4a43      	ldr	r2, [pc, #268]	; (8007c38 <RI_GetPtrReg+0x118>)
          }

          default:
          {
            *dataPtr = &nullData16;
            retVal = MCP_ERROR_UNKNOWN_REG;
 8007b2a:	2005      	movs	r0, #5
            *dataPtr = &(pMCIN->pFOCVars->Iab.b);
 8007b2c:	600a      	str	r2, [r1, #0]
    }
#ifdef NULL_PTR_CHECK_REG_INT
  }
#endif
  return (retVal);
}
 8007b2e:	4770      	bx	lr
    uint16_t regID = dataID & REG_MASK;
 8007b30:	f020 0007 	bic.w	r0, r0, #7
 8007b34:	f5b0 6f1d 	cmp.w	r0, #2512	; 0x9d0
 8007b38:	b283      	uxth	r3, r0
 8007b3a:	d073      	beq.n	8007c24 <RI_GetPtrReg+0x104>
 8007b3c:	d80f      	bhi.n	8007b5e <RI_GetPtrReg+0x3e>
 8007b3e:	f5b3 6f0d 	cmp.w	r3, #2256	; 0x8d0
 8007b42:	d074      	beq.n	8007c2e <RI_GetPtrReg+0x10e>
 8007b44:	d824      	bhi.n	8007b90 <RI_GetPtrReg+0x70>
 8007b46:	f5b3 6f05 	cmp.w	r3, #2128	; 0x850
 8007b4a:	d058      	beq.n	8007bfe <RI_GetPtrReg+0xde>
 8007b4c:	d915      	bls.n	8007b7a <RI_GetPtrReg+0x5a>
 8007b4e:	f5b3 6f09 	cmp.w	r3, #2192	; 0x890
 8007b52:	d1e9      	bne.n	8007b28 <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.beta);
 8007b54:	4b39      	ldr	r3, [pc, #228]	; (8007c3c <RI_GetPtrReg+0x11c>)
 8007b56:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8007b58:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.beta);
 8007b5a:	3206      	adds	r2, #6
            break;
 8007b5c:	e7e6      	b.n	8007b2c <RI_GetPtrReg+0xc>
 8007b5e:	f5b3 6f35 	cmp.w	r3, #2896	; 0xb50
 8007b62:	d049      	beq.n	8007bf8 <RI_GetPtrReg+0xd8>
 8007b64:	d929      	bls.n	8007bba <RI_GetPtrReg+0x9a>
 8007b66:	f5b3 6f45 	cmp.w	r3, #3152	; 0xc50
 8007b6a:	d041      	beq.n	8007bf0 <RI_GetPtrReg+0xd0>
 8007b6c:	f5b3 6f49 	cmp.w	r3, #3216	; 0xc90
 8007b70:	d119      	bne.n	8007ba6 <RI_GetPtrReg+0x86>
 8007b72:	4a33      	ldr	r2, [pc, #204]	; (8007c40 <RI_GetPtrReg+0x120>)
            *dataPtr = &(pMCIN->pFOCVars->Iab.b);
 8007b74:	600a      	str	r2, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 8007b76:	2000      	movs	r0, #0
}
 8007b78:	4770      	bx	lr
 8007b7a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007b7e:	d04d      	beq.n	8007c1c <RI_GetPtrReg+0xfc>
 8007b80:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 8007b84:	d1d0      	bne.n	8007b28 <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Iab.b);
 8007b86:	4b2d      	ldr	r3, [pc, #180]	; (8007c3c <RI_GetPtrReg+0x11c>)
 8007b88:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8007b8a:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iab.b);
 8007b8c:	3202      	adds	r2, #2
            break;
 8007b8e:	e7cd      	b.n	8007b2c <RI_GetPtrReg+0xc>
 8007b90:	f5b3 6f15 	cmp.w	r3, #2384	; 0x950
 8007b94:	d038      	beq.n	8007c08 <RI_GetPtrReg+0xe8>
 8007b96:	f5b3 6f19 	cmp.w	r3, #2448	; 0x990
 8007b9a:	d119      	bne.n	8007bd0 <RI_GetPtrReg+0xb0>
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.d);
 8007b9c:	4b27      	ldr	r3, [pc, #156]	; (8007c3c <RI_GetPtrReg+0x11c>)
 8007b9e:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8007ba0:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.d);
 8007ba2:	3212      	adds	r2, #18
            break;
 8007ba4:	e7c2      	b.n	8007b2c <RI_GetPtrReg+0xc>
 8007ba6:	4827      	ldr	r0, [pc, #156]	; (8007c44 <RI_GetPtrReg+0x124>)
 8007ba8:	4a23      	ldr	r2, [pc, #140]	; (8007c38 <RI_GetPtrReg+0x118>)
 8007baa:	f5b3 6f39 	cmp.w	r3, #2960	; 0xb90
 8007bae:	bf0a      	itet	eq
 8007bb0:	4602      	moveq	r2, r0
 8007bb2:	2005      	movne	r0, #5
 8007bb4:	2000      	moveq	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iab.b);
 8007bb6:	600a      	str	r2, [r1, #0]
}
 8007bb8:	4770      	bx	lr
 8007bba:	f5b3 6f25 	cmp.w	r3, #2640	; 0xa50
 8007bbe:	d028      	beq.n	8007c12 <RI_GetPtrReg+0xf2>
 8007bc0:	f5b3 6f29 	cmp.w	r3, #2704	; 0xa90
 8007bc4:	d10c      	bne.n	8007be0 <RI_GetPtrReg+0xc0>
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.beta);
 8007bc6:	4b1d      	ldr	r3, [pc, #116]	; (8007c3c <RI_GetPtrReg+0x11c>)
 8007bc8:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8007bca:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.beta);
 8007bcc:	321c      	adds	r2, #28
            break;
 8007bce:	e7ad      	b.n	8007b2c <RI_GetPtrReg+0xc>
 8007bd0:	f5b3 6f11 	cmp.w	r3, #2320	; 0x910
 8007bd4:	d1a8      	bne.n	8007b28 <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Iqd.d);
 8007bd6:	4b19      	ldr	r3, [pc, #100]	; (8007c3c <RI_GetPtrReg+0x11c>)
 8007bd8:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8007bda:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqd.d);
 8007bdc:	320e      	adds	r2, #14
            break;
 8007bde:	e7a5      	b.n	8007b2c <RI_GetPtrReg+0xc>
 8007be0:	f5b3 6f21 	cmp.w	r3, #2576	; 0xa10
 8007be4:	d1a0      	bne.n	8007b28 <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Vqd.d);
 8007be6:	4b15      	ldr	r3, [pc, #84]	; (8007c3c <RI_GetPtrReg+0x11c>)
 8007be8:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8007bea:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Vqd.d);
 8007bec:	3218      	adds	r2, #24
            break;
 8007bee:	e79d      	b.n	8007b2c <RI_GetPtrReg+0xc>
 8007bf0:	4a15      	ldr	r2, [pc, #84]	; (8007c48 <RI_GetPtrReg+0x128>)
            *dataPtr = &(pMCIN->pFOCVars->Iab.b);
 8007bf2:	600a      	str	r2, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 8007bf4:	2000      	movs	r0, #0
}
 8007bf6:	4770      	bx	lr
 8007bf8:	4a14      	ldr	r2, [pc, #80]	; (8007c4c <RI_GetPtrReg+0x12c>)
  uint8_t retVal = MCP_CMD_OK;
 8007bfa:	2000      	movs	r0, #0
 8007bfc:	e796      	b.n	8007b2c <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.alpha);
 8007bfe:	4b0f      	ldr	r3, [pc, #60]	; (8007c3c <RI_GetPtrReg+0x11c>)
 8007c00:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8007c02:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.alpha);
 8007c04:	3204      	adds	r2, #4
            break;
 8007c06:	e791      	b.n	8007b2c <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.q);
 8007c08:	4b0c      	ldr	r3, [pc, #48]	; (8007c3c <RI_GetPtrReg+0x11c>)
 8007c0a:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8007c0c:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.q);
 8007c0e:	3210      	adds	r2, #16
            break;
 8007c10:	e78c      	b.n	8007b2c <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.alpha);
 8007c12:	4b0a      	ldr	r3, [pc, #40]	; (8007c3c <RI_GetPtrReg+0x11c>)
 8007c14:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8007c16:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.alpha);
 8007c18:	321a      	adds	r2, #26
            break;
 8007c1a:	e787      	b.n	8007b2c <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 8007c1c:	4b07      	ldr	r3, [pc, #28]	; (8007c3c <RI_GetPtrReg+0x11c>)
  uint8_t retVal = MCP_CMD_OK;
 8007c1e:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 8007c20:	685a      	ldr	r2, [r3, #4]
             break;
 8007c22:	e783      	b.n	8007b2c <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Vqd.q);
 8007c24:	4b05      	ldr	r3, [pc, #20]	; (8007c3c <RI_GetPtrReg+0x11c>)
 8007c26:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8007c28:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Vqd.q);
 8007c2a:	3216      	adds	r2, #22
            break;
 8007c2c:	e77e      	b.n	8007b2c <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Iqd.q);
 8007c2e:	4b03      	ldr	r3, [pc, #12]	; (8007c3c <RI_GetPtrReg+0x11c>)
 8007c30:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8007c32:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqd.q);
 8007c34:	320c      	adds	r2, #12
            break;
 8007c36:	e779      	b.n	8007b2c <RI_GetPtrReg+0xc>
 8007c38:	200035d0 	.word	0x200035d0
 8007c3c:	20002298 	.word	0x20002298
 8007c40:	2000088e 	.word	0x2000088e
 8007c44:	20000828 	.word	0x20000828
 8007c48:	2000088c 	.word	0x2000088c
 8007c4c:	20000820 	.word	0x20000820

08007c50 <RCM_RegisterRegConv>:

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8007c50:	4980      	ldr	r1, [pc, #512]	; (8007e54 <RCM_RegisterRegConv+0x204>)
 8007c52:	680b      	ldr	r3, [r1, #0]
{
 8007c54:	b570      	push	{r4, r5, r6, lr}
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	f000 8094 	beq.w	8007d84 <RCM_RegisterRegConv+0x134>
        /* Nothing to do */
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault */
      if (RCM_handle_array [i] != 0)
      {
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8007c5c:	f890 c004 	ldrb.w	ip, [r0, #4]
 8007c60:	791a      	ldrb	r2, [r3, #4]
 8007c62:	4594      	cmp	ip, r2
 8007c64:	d027      	beq.n	8007cb6 <RCM_RegisterRegConv+0x66>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8007c66:	684a      	ldr	r2, [r1, #4]
 8007c68:	2a00      	cmp	r2, #0
 8007c6a:	f000 80a6 	beq.w	8007dba <RCM_RegisterRegConv+0x16a>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8007c6e:	7914      	ldrb	r4, [r2, #4]
 8007c70:	4564      	cmp	r4, ip
  uint8_t handle = 255U;
 8007c72:	f04f 03ff 	mov.w	r3, #255	; 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8007c76:	f000 808e 	beq.w	8007d96 <RCM_RegisterRegConv+0x146>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8007c7a:	688c      	ldr	r4, [r1, #8]
 8007c7c:	2c00      	cmp	r4, #0
 8007c7e:	f000 80c0 	beq.w	8007e02 <RCM_RegisterRegConv+0x1b2>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8007c82:	7922      	ldrb	r2, [r4, #4]
 8007c84:	4562      	cmp	r2, ip
 8007c86:	f000 808f 	beq.w	8007da8 <RCM_RegisterRegConv+0x158>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8007c8a:	68ca      	ldr	r2, [r1, #12]
 8007c8c:	2a00      	cmp	r2, #0
 8007c8e:	f000 80c1 	beq.w	8007e14 <RCM_RegisterRegConv+0x1c4>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8007c92:	7914      	ldrb	r4, [r2, #4]
 8007c94:	4564      	cmp	r4, ip
 8007c96:	f000 809c 	beq.w	8007dd2 <RCM_RegisterRegConv+0x182>
    while (i < RCM_MAX_CONV)
 8007c9a:	f04f 0200 	mov.w	r2, #0
 8007c9e:	f363 0207 	bfi	r2, r3, #0, #8
 8007ca2:	f363 220f 	bfi	r2, r3, #8, #8
      {
        /* Nothing to do */
      }
      i++;
    }
    if (handle < RCM_MAX_CONV)
 8007ca6:	2b03      	cmp	r3, #3
 8007ca8:	4614      	mov	r4, r2
 8007caa:	bf88      	it	hi
 8007cac:	23ff      	movhi	r3, #255	; 0xff
 8007cae:	f240 80ce 	bls.w	8007e4e <RCM_RegisterRegConv+0x1fe>
      /* Nothing to do handle is already set to error value : 255 */
    }
#ifdef NULL_PTR_CHECK_REG_CON_MNG
  }
#endif
  regConv->convHandle = handle;
 8007cb2:	7303      	strb	r3, [r0, #12]
}
 8007cb4:	bd70      	pop	{r4, r5, r6, pc}
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8007cb6:	6802      	ldr	r2, [r0, #0]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	429a      	cmp	r2, r3
 8007cbc:	d1d3      	bne.n	8007c66 <RCM_RegisterRegConv+0x16>
    uint8_t i = 0;
 8007cbe:	2300      	movs	r3, #0
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8007cc0:	461c      	mov	r4, r3
      RCM_handle_array [handle] = regConv;
 8007cc2:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
      RCM_CB_array [handle].cb = NULL; /* If a previous callback was attached, it is cleared */
 8007cc6:	4d64      	ldr	r5, [pc, #400]	; (8007e58 <RCM_RegisterRegConv+0x208>)
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007cc8:	6891      	ldr	r1, [r2, #8]
 8007cca:	2600      	movs	r6, #0
 8007ccc:	f845 6033 	str.w	r6, [r5, r3, lsl #3]
 8007cd0:	07ce      	lsls	r6, r1, #31
 8007cd2:	d422      	bmi.n	8007d1a <RCM_RegisterRegConv+0xca>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8007cd4:	6851      	ldr	r1, [r2, #4]
 8007cd6:	f021 0104 	bic.w	r1, r1, #4
 8007cda:	6051      	str	r1, [r2, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8007cdc:	2104      	movs	r1, #4
 8007cde:	6011      	str	r1, [r2, #0]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_JEOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8007ce0:	6851      	ldr	r1, [r2, #4]
 8007ce2:	f021 0120 	bic.w	r1, r1, #32
 8007ce6:	6051      	str	r1, [r2, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8007ce8:	2120      	movs	r1, #32
 8007cea:	6011      	str	r1, [r2, #0]
  MODIFY_REG(ADCx->CR,
 8007cec:	6891      	ldr	r1, [r2, #8]
 8007cee:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 8007cf2:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8007cf6:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8007cfa:	6091      	str	r1, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8007cfc:	6891      	ldr	r1, [r2, #8]
 8007cfe:	2900      	cmp	r1, #0
 8007d00:	dbfc      	blt.n	8007cfc <RCM_RegisterRegConv+0xac>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8007d02:	6811      	ldr	r1, [r2, #0]
 8007d04:	07cd      	lsls	r5, r1, #31
 8007d06:	d408      	bmi.n	8007d1a <RCM_RegisterRegConv+0xca>
  MODIFY_REG(ADCx->CR,
 8007d08:	4d54      	ldr	r5, [pc, #336]	; (8007e5c <RCM_RegisterRegConv+0x20c>)
 8007d0a:	6891      	ldr	r1, [r2, #8]
 8007d0c:	4029      	ands	r1, r5
 8007d0e:	f041 0101 	orr.w	r1, r1, #1
 8007d12:	6091      	str	r1, [r2, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8007d14:	6811      	ldr	r1, [r2, #0]
 8007d16:	07c9      	lsls	r1, r1, #31
 8007d18:	d5f7      	bpl.n	8007d0a <RCM_RegisterRegConv+0xba>
      RCM_NoInj_array[handle].enable = false;
 8007d1a:	4d51      	ldr	r5, [pc, #324]	; (8007e60 <RCM_RegisterRegConv+0x210>)
 8007d1c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8007d20:	0049      	lsls	r1, r1, #1
      RCM_NoInj_array[handle].prev = handle;
 8007d22:	eb05 0c01 	add.w	ip, r5, r1
      RCM_NoInj_array[handle].enable = false;
 8007d26:	f04f 0e00 	mov.w	lr, #0
 8007d2a:	f805 e001 	strb.w	lr, [r5, r1]
      RCM_NoInj_array[handle].prev = handle;
 8007d2e:	f8ac 4004 	strh.w	r4, [ip, #4]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8007d32:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8007d34:	f021 010f 	bic.w	r1, r1, #15
 8007d38:	6311      	str	r1, [r2, #48]	; 0x30
      LL_ADC_SetChannelSamplingTime(regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 8007d3a:	f890 c004 	ldrb.w	ip, [r0, #4]
 8007d3e:	f1bc 0f09 	cmp.w	ip, #9
 8007d42:	d84f      	bhi.n	8007de4 <RCM_RegisterRegConv+0x194>
 8007d44:	eb0c 044c 	add.w	r4, ip, ip, lsl #1
 8007d48:	ea4f 618c 	mov.w	r1, ip, lsl #26
 8007d4c:	ea41 5104 	orr.w	r1, r1, r4, lsl #20
 8007d50:	2401      	movs	r4, #1
 8007d52:	fa04 f40c 	lsl.w	r4, r4, ip
 8007d56:	4321      	orrs	r1, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8007d58:	0dcc      	lsrs	r4, r1, #23
 8007d5a:	f004 0404 	and.w	r4, r4, #4
 8007d5e:	f102 0514 	add.w	r5, r2, #20
  MODIFY_REG(*preg,
 8007d62:	6886      	ldr	r6, [r0, #8]
 8007d64:	592a      	ldr	r2, [r5, r4]
 8007d66:	f3c1 5104 	ubfx	r1, r1, #20, #5
 8007d6a:	f04f 0e07 	mov.w	lr, #7
 8007d6e:	fa06 fc01 	lsl.w	ip, r6, r1
 8007d72:	fa0e f101 	lsl.w	r1, lr, r1
 8007d76:	ea22 0101 	bic.w	r1, r2, r1
 8007d7a:	ea41 010c 	orr.w	r1, r1, ip
 8007d7e:	5129      	str	r1, [r5, r4]
  regConv->convHandle = handle;
 8007d80:	7303      	strb	r3, [r0, #12]
}
 8007d82:	bd70      	pop	{r4, r5, r6, pc}
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8007d84:	684a      	ldr	r2, [r1, #4]
 8007d86:	2a00      	cmp	r2, #0
 8007d88:	d04b      	beq.n	8007e22 <RCM_RegisterRegConv+0x1d2>
 8007d8a:	f890 c004 	ldrb.w	ip, [r0, #4]
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8007d8e:	7914      	ldrb	r4, [r2, #4]
 8007d90:	4564      	cmp	r4, ip
 8007d92:	f47f af72 	bne.w	8007c7a <RCM_RegisterRegConv+0x2a>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8007d96:	6814      	ldr	r4, [r2, #0]
 8007d98:	6802      	ldr	r2, [r0, #0]
 8007d9a:	4294      	cmp	r4, r2
 8007d9c:	f47f af6d 	bne.w	8007c7a <RCM_RegisterRegConv+0x2a>
      i++;
 8007da0:	2301      	movs	r3, #1
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8007da2:	f240 1401 	movw	r4, #257	; 0x101
 8007da6:	e78c      	b.n	8007cc2 <RCM_RegisterRegConv+0x72>
 8007da8:	6824      	ldr	r4, [r4, #0]
 8007daa:	6802      	ldr	r2, [r0, #0]
 8007dac:	4294      	cmp	r4, r2
 8007dae:	f47f af6c 	bne.w	8007c8a <RCM_RegisterRegConv+0x3a>
      i++;
 8007db2:	2302      	movs	r3, #2
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8007db4:	f240 2402 	movw	r4, #514	; 0x202
 8007db8:	e783      	b.n	8007cc2 <RCM_RegisterRegConv+0x72>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8007dba:	688c      	ldr	r4, [r1, #8]
      i++;
 8007dbc:	2301      	movs	r3, #1
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8007dbe:	2c00      	cmp	r4, #0
 8007dc0:	f47f af5f 	bne.w	8007c82 <RCM_RegisterRegConv+0x32>
 8007dc4:	68ca      	ldr	r2, [r1, #12]
 8007dc6:	2a00      	cmp	r2, #0
 8007dc8:	d03b      	beq.n	8007e42 <RCM_RegisterRegConv+0x1f2>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8007dca:	7915      	ldrb	r5, [r2, #4]
 8007dcc:	7904      	ldrb	r4, [r0, #4]
 8007dce:	42a5      	cmp	r5, r4
 8007dd0:	d137      	bne.n	8007e42 <RCM_RegisterRegConv+0x1f2>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8007dd2:	6814      	ldr	r4, [r2, #0]
 8007dd4:	6802      	ldr	r2, [r0, #0]
 8007dd6:	4294      	cmp	r4, r2
 8007dd8:	f47f af5f 	bne.w	8007c9a <RCM_RegisterRegConv+0x4a>
      i++;
 8007ddc:	2303      	movs	r3, #3
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8007dde:	f240 3403 	movw	r4, #771	; 0x303
 8007de2:	e76e      	b.n	8007cc2 <RCM_RegisterRegConv+0x72>
      LL_ADC_SetChannelSamplingTime(regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 8007de4:	f06f 011d 	mvn.w	r1, #29
 8007de8:	2403      	movs	r4, #3
 8007dea:	fb14 140c 	smlabb	r4, r4, ip, r1
 8007dee:	2101      	movs	r1, #1
 8007df0:	fa01 f10c 	lsl.w	r1, r1, ip
 8007df4:	ea41 5104 	orr.w	r1, r1, r4, lsl #20
 8007df8:	ea41 618c 	orr.w	r1, r1, ip, lsl #26
 8007dfc:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8007e00:	e7aa      	b.n	8007d58 <RCM_RegisterRegConv+0x108>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8007e02:	2b04      	cmp	r3, #4
 8007e04:	d913      	bls.n	8007e2e <RCM_RegisterRegConv+0x1de>
 8007e06:	68cb      	ldr	r3, [r1, #12]
 8007e08:	b113      	cbz	r3, 8007e10 <RCM_RegisterRegConv+0x1c0>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8007e0a:	791a      	ldrb	r2, [r3, #4]
 8007e0c:	4562      	cmp	r2, ip
 8007e0e:	d010      	beq.n	8007e32 <RCM_RegisterRegConv+0x1e2>
 8007e10:	6802      	ldr	r2, [r0, #0]
 8007e12:	e7ce      	b.n	8007db2 <RCM_RegisterRegConv+0x162>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8007e14:	2b04      	cmp	r3, #4
 8007e16:	d914      	bls.n	8007e42 <RCM_RegisterRegConv+0x1f2>
 8007e18:	6802      	ldr	r2, [r0, #0]
      i++;
 8007e1a:	2303      	movs	r3, #3
 8007e1c:	f240 3403 	movw	r4, #771	; 0x303
 8007e20:	e74f      	b.n	8007cc2 <RCM_RegisterRegConv+0x72>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8007e22:	688c      	ldr	r4, [r1, #8]
 8007e24:	b11c      	cbz	r4, 8007e2e <RCM_RegisterRegConv+0x1de>
 8007e26:	f890 c004 	ldrb.w	ip, [r0, #4]
    uint8_t i = 0;
 8007e2a:	4613      	mov	r3, r2
 8007e2c:	e729      	b.n	8007c82 <RCM_RegisterRegConv+0x32>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8007e2e:	4623      	mov	r3, r4
 8007e30:	e7c8      	b.n	8007dc4 <RCM_RegisterRegConv+0x174>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	6802      	ldr	r2, [r0, #0]
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d0d0      	beq.n	8007ddc <RCM_RegisterRegConv+0x18c>
 8007e3a:	f240 2402 	movw	r4, #514	; 0x202
      i++;
 8007e3e:	2302      	movs	r3, #2
 8007e40:	e73f      	b.n	8007cc2 <RCM_RegisterRegConv+0x72>
    while (i < RCM_MAX_CONV)
 8007e42:	f04f 0400 	mov.w	r4, #0
 8007e46:	f363 0407 	bfi	r4, r3, #0, #8
 8007e4a:	f363 240f 	bfi	r4, r3, #8, #8
 8007e4e:	6802      	ldr	r2, [r0, #0]
    if (handle < RCM_MAX_CONV)
 8007e50:	e737      	b.n	8007cc2 <RCM_RegisterRegConv+0x72>
 8007e52:	bf00      	nop
 8007e54:	20003618 	.word	0x20003618
 8007e58:	200035d4 	.word	0x200035d4
 8007e5c:	7fffffc0 	.word	0x7fffffc0
 8007e60:	200035f4 	.word	0x200035f4

08007e64 <RCM_ExecRegularConv>:
 * Otherwise, the latest stored conversion result will be returned.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
uint16_t RCM_ExecRegularConv (RegConv_t *regConv)
{
 8007e64:	b510      	push	{r4, lr}
  uint16_t retVal;
  uint8_t handle = regConv->convHandle;
 8007e66:	7b03      	ldrb	r3, [r0, #12]
  uint8_t formerNext;
  uint8_t i=0;
  uint8_t LastEnable = RCM_MAX_CONV;

  if (false == RCM_NoInj_array [handle].enable)
 8007e68:	4a5e      	ldr	r2, [pc, #376]	; (8007fe4 <RCM_ExecRegularConv+0x180>)
 8007e6a:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8007e6e:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8007e72:	f812 1011 	ldrb.w	r1, [r2, r1, lsl #1]
 8007e76:	2900      	cmp	r1, #0
 8007e78:	d13c      	bne.n	8007ef4 <RCM_ExecRegularConv+0x90>
  {
    /* Find position in the list */
    while (i < RCM_MAX_CONV)
    {
      if (true == RCM_NoInj_array [i].enable)
 8007e7a:	7810      	ldrb	r0, [r2, #0]
 8007e7c:	b9a8      	cbnz	r0, 8007eaa <RCM_ExecRegularConv+0x46>
  uint8_t LastEnable = RCM_MAX_CONV;
 8007e7e:	2104      	movs	r1, #4
      if (true == RCM_NoInj_array [i].enable)
 8007e80:	7990      	ldrb	r0, [r2, #6]
 8007e82:	2800      	cmp	r0, #0
 8007e84:	d07f      	beq.n	8007f86 <RCM_ExecRegularConv+0x122>
      {
        if (RCM_NoInj_array[i].next > handle)
 8007e86:	7ad0      	ldrb	r0, [r2, #11]
 8007e88:	4283      	cmp	r3, r0
 8007e8a:	f0c0 809b 	bcc.w	8007fc4 <RCM_ExecRegularConv+0x160>
      if (true == RCM_NoInj_array [i].enable)
 8007e8e:	7b11      	ldrb	r1, [r2, #12]
 8007e90:	2900      	cmp	r1, #0
 8007e92:	f000 809a 	beq.w	8007fca <RCM_ExecRegularConv+0x166>
        if (RCM_NoInj_array[i].next > handle)
 8007e96:	7c50      	ldrb	r0, [r2, #17]
 8007e98:	4283      	cmp	r3, r0
 8007e9a:	f0c0 80a0 	bcc.w	8007fde <RCM_ExecRegularConv+0x17a>
      if (true == RCM_NoInj_array [i].enable)
 8007e9e:	7c91      	ldrb	r1, [r2, #18]
 8007ea0:	2900      	cmp	r1, #0
 8007ea2:	f040 8096 	bne.w	8007fd2 <RCM_ExecRegularConv+0x16e>
      }
      else
      {
        /* Nothing to do */
      }
      i++;
 8007ea6:	2102      	movs	r1, #2
 8007ea8:	e074      	b.n	8007f94 <RCM_ExecRegularConv+0x130>
        if (RCM_NoInj_array[i].next > handle)
 8007eaa:	7950      	ldrb	r0, [r2, #5]
 8007eac:	4298      	cmp	r0, r3
 8007eae:	d9e7      	bls.n	8007e80 <RCM_ExecRegularConv+0x1c>
      if (true == RCM_NoInj_array [i].enable)
 8007eb0:	468e      	mov	lr, r1
          RCM_NoInj_array[handle].next = formerNext;
 8007eb2:	eb0c 0403 	add.w	r4, ip, r3
 8007eb6:	eb02 0444 	add.w	r4, r2, r4, lsl #1
          RCM_NoInj_array[i].next = handle;
 8007eba:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
          RCM_NoInj_array[handle].prev = i;
 8007ebe:	7121      	strb	r1, [r4, #4]
          RCM_NoInj_array[handle].next = formerNext;
 8007ec0:	7160      	strb	r0, [r4, #5]
      }
    }
    /* The handle is now linked with others, we can set the enable flag */
    RCM_NoInj_array[handle].enable = true;
    RCM_NoInj_array[handle].status = notvalid;
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8007ec2:	4c49      	ldr	r4, [pc, #292]	; (8007fe8 <RCM_ExecRegularConv+0x184>)
          RCM_NoInj_array[formerNext].prev = handle;
 8007ec4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
          RCM_NoInj_array[i].next = handle;
 8007ec8:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
          RCM_NoInj_array[formerNext].prev = handle;
 8007ecc:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8007ed0:	7821      	ldrb	r1, [r4, #0]
          RCM_NoInj_array[i].next = handle;
 8007ed2:	f88e 3005 	strb.w	r3, [lr, #5]
          RCM_NoInj_array[formerNext].prev = handle;
 8007ed6:	7103      	strb	r3, [r0, #4]
    RCM_NoInj_array[handle].enable = true;
 8007ed8:	eb0c 0003 	add.w	r0, ip, r3
 8007edc:	f04f 0e01 	mov.w	lr, #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8007ee0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    RCM_NoInj_array[handle].enable = true;
 8007ee4:	f822 e010 	strh.w	lr, [r2, r0, lsl #1]
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8007ee8:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8007eec:	7849      	ldrb	r1, [r1, #1]
 8007eee:	4571      	cmp	r1, lr
    {/* Select the new conversion to be the next scheduled only if a conversion is not ongoing */
      RCM_currentHandle = handle;
 8007ef0:	bf18      	it	ne
 8007ef2:	7023      	strbne	r3, [r4, #0]
  }
  else
  {
    /* Nothing to do the current handle is already scheduled */
  }
  if (false == PWM_Handle_M1.ADCRegularLocked)
 8007ef4:	493d      	ldr	r1, [pc, #244]	; (8007fec <RCM_ExecRegularConv+0x188>)
 8007ef6:	f891 10a0 	ldrb.w	r1, [r1, #160]	; 0xa0
 8007efa:	2900      	cmp	r1, #0
 8007efc:	d133      	bne.n	8007f66 <RCM_ExecRegularConv+0x102>
  /* The ADC is free to be used asynchronously */
  {
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8007efe:	493c      	ldr	r1, [pc, #240]	; (8007ff0 <RCM_ExecRegularConv+0x18c>)
 8007f00:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
                                 LL_ADC_REG_RANK_1,
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 8007f04:	790c      	ldrb	r4, [r1, #4]
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8007f06:	6808      	ldr	r0, [r1, #0]
 8007f08:	2c09      	cmp	r4, #9
 8007f0a:	d931      	bls.n	8007f70 <RCM_ExecRegularConv+0x10c>
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 8007f0c:	f06f 011d 	mvn.w	r1, #29
 8007f10:	f04f 0e03 	mov.w	lr, #3
 8007f14:	fb1e 1e04 	smlabb	lr, lr, r4, r1
 8007f18:	2101      	movs	r1, #1
 8007f1a:	40a1      	lsls	r1, r4
 8007f1c:	ea41 510e 	orr.w	r1, r1, lr, lsl #20
 8007f20:	ea41 6184 	orr.w	r1, r1, r4, lsl #26
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8007f24:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
  MODIFY_REG(*preg,
 8007f28:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8007f2a:	0d09      	lsrs	r1, r1, #20
 8007f2c:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
 8007f30:	f424 64f8 	bic.w	r4, r4, #1984	; 0x7c0
 8007f34:	4321      	orrs	r1, r4
 8007f36:	6301      	str	r1, [r0, #48]	; 0x30
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8007f38:	6c01      	ldr	r1, [r0, #64]	; 0x40
  MODIFY_REG(ADCx->CR,
 8007f3a:	6881      	ldr	r1, [r0, #8]
 8007f3c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007f40:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8007f44:	f041 0104 	orr.w	r1, r1, #4
 8007f48:	6081      	str	r1, [r0, #8]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 8007f4a:	6801      	ldr	r1, [r0, #0]
 8007f4c:	0749      	lsls	r1, r1, #29
 8007f4e:	d5fc      	bpl.n	8007f4a <RCM_ExecRegularConv+0xe6>
    {
      /* Nothing to do */
    }

    /* Read the "Regular" conversion (Not related to current sampling) */
    RCM_NoInj_array[handle].value = LL_ADC_REG_ReadConversionData12(RCM_handle_array[handle]->regADC);
 8007f50:	eb0c 0103 	add.w	r1, ip, r3
 8007f54:	eb02 0141 	add.w	r1, r2, r1, lsl #1
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8007f58:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8007f5a:	8048      	strh	r0, [r1, #2]
    RCM_currentHandle = RCM_NoInj_array[handle].next;
 8007f5c:	4822      	ldr	r0, [pc, #136]	; (8007fe8 <RCM_ExecRegularConv+0x184>)
 8007f5e:	794c      	ldrb	r4, [r1, #5]
 8007f60:	7004      	strb	r4, [r0, #0]
    RCM_NoInj_array[handle].status = valid;
 8007f62:	2002      	movs	r0, #2
 8007f64:	7048      	strb	r0, [r1, #1]
  }
  else
  {
    /* Nothing to do */
  }
  retVal = RCM_NoInj_array[handle].value;
 8007f66:	449c      	add	ip, r3
 8007f68:	eb02 024c 	add.w	r2, r2, ip, lsl #1
  return (retVal);
}
 8007f6c:	8850      	ldrh	r0, [r2, #2]
 8007f6e:	bd10      	pop	{r4, pc}
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 8007f70:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 8007f74:	06a1      	lsls	r1, r4, #26
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8007f76:	ea41 510e 	orr.w	r1, r1, lr, lsl #20
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 8007f7a:	f04f 0e01 	mov.w	lr, #1
 8007f7e:	fa0e f404 	lsl.w	r4, lr, r4
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8007f82:	4321      	orrs	r1, r4
 8007f84:	e7d0      	b.n	8007f28 <RCM_ExecRegularConv+0xc4>
      if (true == RCM_NoInj_array [i].enable)
 8007f86:	7b10      	ldrb	r0, [r2, #12]
 8007f88:	2800      	cmp	r0, #0
 8007f8a:	d184      	bne.n	8007e96 <RCM_ExecRegularConv+0x32>
 8007f8c:	7c90      	ldrb	r0, [r2, #18]
 8007f8e:	bb00      	cbnz	r0, 8007fd2 <RCM_ExecRegularConv+0x16e>
       if (LastEnable != RCM_MAX_CONV )
 8007f90:	2904      	cmp	r1, #4
 8007f92:	d013      	beq.n	8007fbc <RCM_ExecRegularConv+0x158>
         formerNext = RCM_NoInj_array[LastEnable].next;
 8007f94:	eb01 0041 	add.w	r0, r1, r1, lsl #1
         RCM_NoInj_array[handle].next = formerNext;
 8007f98:	eb0c 0403 	add.w	r4, ip, r3
 8007f9c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
         formerNext = RCM_NoInj_array[LastEnable].next;
 8007fa0:	eb02 0040 	add.w	r0, r2, r0, lsl #1
         RCM_NoInj_array[handle].prev = LastEnable;
 8007fa4:	7121      	strb	r1, [r4, #4]
         formerNext = RCM_NoInj_array[LastEnable].next;
 8007fa6:	7941      	ldrb	r1, [r0, #5]
         RCM_NoInj_array[handle].next = formerNext;
 8007fa8:	7161      	strb	r1, [r4, #5]
         RCM_NoInj_array[formerNext].prev = handle;
 8007faa:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8007fae:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8007fb2:	4c0d      	ldr	r4, [pc, #52]	; (8007fe8 <RCM_ExecRegularConv+0x184>)
         RCM_NoInj_array[formerNext].prev = handle;
 8007fb4:	710b      	strb	r3, [r1, #4]
         RCM_NoInj_array[LastEnable].next = handle;
 8007fb6:	7143      	strb	r3, [r0, #5]
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8007fb8:	7821      	ldrb	r1, [r4, #0]
 8007fba:	e78d      	b.n	8007ed8 <RCM_ExecRegularConv+0x74>
         RCM_currentHandle = handle;
 8007fbc:	4c0a      	ldr	r4, [pc, #40]	; (8007fe8 <RCM_ExecRegularConv+0x184>)
 8007fbe:	4619      	mov	r1, r3
 8007fc0:	7023      	strb	r3, [r4, #0]
    while (i < RCM_MAX_CONV)
 8007fc2:	e789      	b.n	8007ed8 <RCM_ExecRegularConv+0x74>
      i++;
 8007fc4:	2101      	movs	r1, #1
      if (true == RCM_NoInj_array [i].enable)
 8007fc6:	468e      	mov	lr, r1
 8007fc8:	e773      	b.n	8007eb2 <RCM_ExecRegularConv+0x4e>
 8007fca:	7c91      	ldrb	r1, [r2, #18]
 8007fcc:	b909      	cbnz	r1, 8007fd2 <RCM_ExecRegularConv+0x16e>
      i++;
 8007fce:	2101      	movs	r1, #1
 8007fd0:	e7e0      	b.n	8007f94 <RCM_ExecRegularConv+0x130>
        if (RCM_NoInj_array[i].next > handle)
 8007fd2:	7dd0      	ldrb	r0, [r2, #23]
 8007fd4:	4298      	cmp	r0, r3
      i++;
 8007fd6:	f04f 0103 	mov.w	r1, #3
        if (RCM_NoInj_array[i].next > handle)
 8007fda:	d9db      	bls.n	8007f94 <RCM_ExecRegularConv+0x130>
 8007fdc:	e768      	b.n	8007eb0 <RCM_ExecRegularConv+0x4c>
      i++;
 8007fde:	2102      	movs	r1, #2
 8007fe0:	e766      	b.n	8007eb0 <RCM_ExecRegularConv+0x4c>
 8007fe2:	bf00      	nop
 8007fe4:	200035f4 	.word	0x200035f4
 8007fe8:	20003614 	.word	0x20003614
 8007fec:	20000158 	.word	0x20000158
 8007ff0:	20003618 	.word	0x20003618

08007ff4 <RCM_ExecUserConv>:
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv()
{
  uint8_t handle;
  if (RCM_UserConvHandle != NULL)
 8007ff4:	4b14      	ldr	r3, [pc, #80]	; (8008048 <RCM_ExecUserConv+0x54>)
{
 8007ff6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (RCM_UserConvHandle != NULL)
 8007ffa:	681c      	ldr	r4, [r3, #0]
 8007ffc:	b124      	cbz	r4, 8008008 <RCM_ExecUserConv+0x14>
  {
    handle = RCM_UserConvHandle->convHandle;
    if (RCM_USERCONV_REQUESTED == RCM_UserConvState)
 8007ffe:	4d13      	ldr	r5, [pc, #76]	; (800804c <RCM_ExecUserConv+0x58>)
    handle = RCM_UserConvHandle->convHandle;
 8008000:	7b26      	ldrb	r6, [r4, #12]
    if (RCM_USERCONV_REQUESTED == RCM_UserConvState)
 8008002:	782b      	ldrb	r3, [r5, #0]
 8008004:	2b01      	cmp	r3, #1
 8008006:	d001      	beq.n	800800c <RCM_ExecUserConv+0x18>
  }
  else
  {
     /* Nothing to do */
  }
}
 8008008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 800800c:	4620      	mov	r0, r4
 800800e:	f7ff ff29 	bl	8007e64 <RCM_ExecRegularConv>
 8008012:	4b0f      	ldr	r3, [pc, #60]	; (8008050 <RCM_ExecUserConv+0x5c>)
 8008014:	8018      	strh	r0, [r3, #0]
      if (RCM_NoInj_array [handle].status != notvalid)
 8008016:	4b0f      	ldr	r3, [pc, #60]	; (8008054 <RCM_ExecUserConv+0x60>)
 8008018:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 800801c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
      RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8008020:	4601      	mov	r1, r0
      if (RCM_NoInj_array [handle].status != notvalid)
 8008022:	785b      	ldrb	r3, [r3, #1]
 8008024:	b10b      	cbz	r3, 800802a <RCM_ExecUserConv+0x36>
        RCM_UserConvState = RCM_USERCONV_EOC;
 8008026:	2302      	movs	r3, #2
 8008028:	702b      	strb	r3, [r5, #0]
      if (RCM_CB_array[handle].cb != NULL)
 800802a:	4b0b      	ldr	r3, [pc, #44]	; (8008058 <RCM_ExecUserConv+0x64>)
 800802c:	f853 7036 	ldr.w	r7, [r3, r6, lsl #3]
 8008030:	2f00      	cmp	r7, #0
 8008032:	d0e9      	beq.n	8008008 <RCM_ExecUserConv+0x14>
        RCM_CB_array[handle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 8008034:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008038:	4620      	mov	r0, r4
 800803a:	685a      	ldr	r2, [r3, #4]
        RCM_UserConvState = RCM_USERCONV_IDLE;
 800803c:	2300      	movs	r3, #0
 800803e:	702b      	strb	r3, [r5, #0]
        RCM_CB_array[handle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 8008040:	463b      	mov	r3, r7
}
 8008042:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        RCM_CB_array[handle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 8008046:	4718      	bx	r3
 8008048:	2000360c 	.word	0x2000360c
 800804c:	20003610 	.word	0x20003610
 8008050:	20003612 	.word	0x20003612
 8008054:	200035f4 	.word	0x200035f4
 8008058:	200035d4 	.word	0x200035d4

0800805c <RCM_ExecNextConv>:
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecNextConv(void)
{
  if (true == RCM_NoInj_array [RCM_currentHandle].enable)
 800805c:	4b24      	ldr	r3, [pc, #144]	; (80080f0 <RCM_ExecNextConv+0x94>)
 800805e:	4825      	ldr	r0, [pc, #148]	; (80080f4 <RCM_ExecNextConv+0x98>)
 8008060:	781a      	ldrb	r2, [r3, #0]
 8008062:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8008066:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 800806a:	b3a3      	cbz	r3, 80080d6 <RCM_ExecNextConv+0x7a>
    /* When this function is called, the ADC conversions triggered by External
       event for current reading has been completed.
       ADC is therefore ready to be started because already stopped */

    /* Clear EOC */
    LL_ADC_ClearFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 800806c:	4b22      	ldr	r3, [pc, #136]	; (80080f8 <RCM_ExecNextConv+0x9c>)
{
 800806e:	b510      	push	{r4, lr}
    LL_ADC_ClearFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8008070:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008074:	6819      	ldr	r1, [r3, #0]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8008076:	2404      	movs	r4, #4
 8008078:	600c      	str	r4, [r1, #0]
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
                                 LL_ADC_REG_RANK_1,
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel));
 800807a:	f893 c004 	ldrb.w	ip, [r3, #4]
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
 800807e:	f1bc 0f09 	cmp.w	ip, #9
 8008082:	ea4f 0e42 	mov.w	lr, r2, lsl #1
 8008086:	d927      	bls.n	80080d8 <RCM_ExecNextConv+0x7c>
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel));
 8008088:	f06f 031d 	mvn.w	r3, #29
 800808c:	2403      	movs	r4, #3
 800808e:	fb14 340c 	smlabb	r4, r4, ip, r3
 8008092:	2301      	movs	r3, #1
 8008094:	fa03 f30c 	lsl.w	r3, r3, ip
 8008098:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
 800809c:	ea43 638c 	orr.w	r3, r3, ip, lsl #26
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
 80080a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000

    (void)LL_ADC_REG_ReadConversionData12(RCM_handle_array[RCM_currentHandle]->regADC);

    /* Start ADC for regular conversion */
    LL_ADC_REG_StartConversion(RCM_handle_array[RCM_currentHandle]->regADC);
    RCM_NoInj_array[RCM_currentHandle].status = ongoing;
 80080a4:	4496      	add	lr, r2
  MODIFY_REG(*preg,
 80080a6:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80080a8:	0d1b      	lsrs	r3, r3, #20
 80080aa:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80080ae:	f422 62f8 	bic.w	r2, r2, #1984	; 0x7c0
 80080b2:	4313      	orrs	r3, r2
 80080b4:	630b      	str	r3, [r1, #48]	; 0x30
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 80080b6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  MODIFY_REG(ADCx->CR,
 80080b8:	688b      	ldr	r3, [r1, #8]
 80080ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80080be:	eb00 004e 	add.w	r0, r0, lr, lsl #1
 80080c2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80080c6:	f04f 0c01 	mov.w	ip, #1
 80080ca:	f043 0304 	orr.w	r3, r3, #4
 80080ce:	608b      	str	r3, [r1, #8]
 80080d0:	f880 c001 	strb.w	ip, [r0, #1]
  }
  else
  {
    /* Nothing to do, conversion not enabled have already notvalid status */
  }
}
 80080d4:	bd10      	pop	{r4, pc}
 80080d6:	4770      	bx	lr
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel));
 80080d8:	eb0c 044c 	add.w	r4, ip, ip, lsl #1
 80080dc:	ea4f 638c 	mov.w	r3, ip, lsl #26
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
 80080e0:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel));
 80080e4:	2401      	movs	r4, #1
 80080e6:	fa04 f40c 	lsl.w	r4, r4, ip
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
 80080ea:	4323      	orrs	r3, r4
 80080ec:	e7da      	b.n	80080a4 <RCM_ExecNextConv+0x48>
 80080ee:	bf00      	nop
 80080f0:	20003614 	.word	0x20003614
 80080f4:	200035f4 	.word	0x200035f4
 80080f8:	20003618 	.word	0x20003618

080080fc <RCM_ReadOngoingConv>:
 * and user conversion.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ReadOngoingConv(void)
{
 80080fc:	b510      	push	{r4, lr}
  uint32_t result;
  RCM_status_t status;

  status = RCM_NoInj_array[RCM_currentHandle].status;
 80080fe:	4814      	ldr	r0, [pc, #80]	; (8008150 <RCM_ReadOngoingConv+0x54>)
  result = LL_ADC_IsActiveFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8008100:	4a14      	ldr	r2, [pc, #80]	; (8008154 <RCM_ReadOngoingConv+0x58>)
  status = RCM_NoInj_array[RCM_currentHandle].status;
 8008102:	7803      	ldrb	r3, [r0, #0]
  result = LL_ADC_IsActiveFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8008104:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008108:	6814      	ldr	r4, [r2, #0]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 800810a:	6822      	ldr	r2, [r4, #0]
 800810c:	f012 0f04 	tst.w	r2, #4
  status = RCM_NoInj_array[RCM_currentHandle].status;
 8008110:	ea4f 0143 	mov.w	r1, r3, lsl #1
 8008114:	4a10      	ldr	r2, [pc, #64]	; (8008158 <RCM_ReadOngoingConv+0x5c>)
 8008116:	d008      	beq.n	800812a <RCM_ReadOngoingConv+0x2e>
 8008118:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 800811c:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
  if (( valid == status ) || ( notvalid == status ) || ( 0U == result ))
 8008120:	f89c e001 	ldrb.w	lr, [ip, #1]
 8008124:	f01e 0ffd 	tst.w	lr, #253	; 0xfd
 8008128:	d105      	bne.n	8008136 <RCM_ReadOngoingConv+0x3a>
    RCM_NoInj_array[RCM_currentHandle].status = valid;
    /* Restore back DMA configuration */
  }

  /* Prepare next conversion */
  RCM_currentHandle = RCM_NoInj_array [RCM_currentHandle].next;
 800812a:	440b      	add	r3, r1
 800812c:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8008130:	7953      	ldrb	r3, [r2, #5]
 8008132:	7003      	strb	r3, [r0, #0]
}
 8008134:	bd10      	pop	{r4, pc}
  RCM_currentHandle = RCM_NoInj_array [RCM_currentHandle].next;
 8008136:	440b      	add	r3, r1
 8008138:	eb02 0243 	add.w	r2, r2, r3, lsl #1
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 800813c:	6c24      	ldr	r4, [r4, #64]	; 0x40
 800813e:	7953      	ldrb	r3, [r2, #5]
 8008140:	f8ac 4002 	strh.w	r4, [ip, #2]
    RCM_NoInj_array[RCM_currentHandle].status = valid;
 8008144:	2402      	movs	r4, #2
 8008146:	f88c 4001 	strb.w	r4, [ip, #1]
  RCM_currentHandle = RCM_NoInj_array [RCM_currentHandle].next;
 800814a:	7003      	strb	r3, [r0, #0]
}
 800814c:	bd10      	pop	{r4, pc}
 800814e:	bf00      	nop
 8008150:	20003614 	.word	0x20003614
 8008154:	20003618 	.word	0x20003618
 8008158:	200035f4 	.word	0x200035f4

0800815c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800815c:	4b0e      	ldr	r3, [pc, #56]	; (8008198 <HAL_MspInit+0x3c>)
{
 800815e:	b500      	push	{lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008160:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008162:	f042 0201 	orr.w	r2, r2, #1
 8008166:	661a      	str	r2, [r3, #96]	; 0x60
 8008168:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 800816a:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800816c:	f002 0201 	and.w	r2, r2, #1
 8008170:	9200      	str	r2, [sp, #0]
 8008172:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008174:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008176:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800817a:	659a      	str	r2, [r3, #88]	; 0x58
 800817c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800817e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008182:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8008184:	2004      	movs	r0, #4
  __HAL_RCC_PWR_CLK_ENABLE();
 8008186:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8008188:	f001 fb08 	bl	800979c <HAL_NVIC_SetPriorityGrouping>
  HAL_PWREx_DisableUCPDDeadBattery();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800818c:	b003      	add	sp, #12
 800818e:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_PWREx_DisableUCPDDeadBattery();
 8008192:	f001 bdf9 	b.w	8009d88 <HAL_PWREx_DisableUCPDDeadBattery>
 8008196:	bf00      	nop
 8008198:	40021000 	.word	0x40021000

0800819c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800819c:	b5d0      	push	{r4, r6, r7, lr}
 800819e:	4604      	mov	r4, r0
 80081a0:	b09e      	sub	sp, #120	; 0x78
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80081a2:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80081a4:	2254      	movs	r2, #84	; 0x54
 80081a6:	a809      	add	r0, sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80081a8:	e9cd 1104 	strd	r1, r1, [sp, #16]
 80081ac:	e9cd 1106 	strd	r1, r1, [sp, #24]
 80081b0:	9108      	str	r1, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80081b2:	f008 fb2b 	bl	801080c <memset>
  if(hadc->Instance==ADC1)
 80081b6:	6823      	ldr	r3, [r4, #0]
 80081b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80081bc:	d001      	beq.n	80081c2 <HAL_ADC_MspInit+0x26>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80081be:	b01e      	add	sp, #120	; 0x78
 80081c0:	bdd0      	pop	{r4, r6, r7, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80081c2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80081c6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80081ca:	a809      	add	r0, sp, #36	; 0x24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80081cc:	9209      	str	r2, [sp, #36]	; 0x24
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80081ce:	931a      	str	r3, [sp, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80081d0:	f002 f99c 	bl	800a50c <HAL_RCCEx_PeriphCLKConfig>
 80081d4:	2800      	cmp	r0, #0
 80081d6:	d12f      	bne.n	8008238 <HAL_ADC_MspInit+0x9c>
    __HAL_RCC_ADC12_CLK_ENABLE();
 80081d8:	4b19      	ldr	r3, [pc, #100]	; (8008240 <HAL_ADC_MspInit+0xa4>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80081da:	481a      	ldr	r0, [pc, #104]	; (8008244 <HAL_ADC_MspInit+0xa8>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 80081dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80081de:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80081e2:	64da      	str	r2, [r3, #76]	; 0x4c
 80081e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80081e6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80081ea:	9201      	str	r2, [sp, #4]
 80081ec:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80081ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80081f0:	f042 0204 	orr.w	r2, r2, #4
 80081f4:	64da      	str	r2, [r3, #76]	; 0x4c
 80081f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80081f8:	f002 0204 	and.w	r2, r2, #4
 80081fc:	9202      	str	r2, [sp, #8]
 80081fe:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008200:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008202:	f042 0201 	orr.w	r2, r2, #1
 8008206:	64da      	str	r2, [r3, #76]	; 0x4c
 8008208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800820a:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin|M1_CURR_AMPL_V_Pin;
 800820e:	2603      	movs	r6, #3
 8008210:	2703      	movs	r7, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008212:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008214:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008216:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008218:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800821a:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin|M1_CURR_AMPL_V_Pin;
 800821c:	e9cd 6704 	strd	r6, r7, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008220:	f001 fc42 	bl	8009aa8 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008224:	a904      	add	r1, sp, #16
 8008226:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin|M1_BUS_VOLTAGE_Pin;
 800822a:	e9cd 6704 	strd	r6, r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800822e:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008230:	f001 fc3a 	bl	8009aa8 <HAL_GPIO_Init>
}
 8008234:	b01e      	add	sp, #120	; 0x78
 8008236:	bdd0      	pop	{r4, r6, r7, pc}
      Error_Handler();
 8008238:	f7fc fd60 	bl	8004cfc <Error_Handler>
 800823c:	e7cc      	b.n	80081d8 <HAL_ADC_MspInit+0x3c>
 800823e:	bf00      	nop
 8008240:	40021000 	.word	0x40021000
 8008244:	48000800 	.word	0x48000800

08008248 <HAL_CORDIC_MspInit>:
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
  if(hcordic->Instance==CORDIC)
 8008248:	4b0a      	ldr	r3, [pc, #40]	; (8008274 <HAL_CORDIC_MspInit+0x2c>)
 800824a:	6802      	ldr	r2, [r0, #0]
 800824c:	429a      	cmp	r2, r3
 800824e:	d000      	beq.n	8008252 <HAL_CORDIC_MspInit+0xa>
 8008250:	4770      	bx	lr
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8008252:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
 8008256:	f042 0208 	orr.w	r2, r2, #8
 800825a:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
 800825e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
{
 8008262:	b082      	sub	sp, #8
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8008264:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008266:	f003 0308 	and.w	r3, r3, #8
 800826a:	9301      	str	r3, [sp, #4]
 800826c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }

}
 800826e:	b002      	add	sp, #8
 8008270:	4770      	bx	lr
 8008272:	bf00      	nop
 8008274:	40020c00 	.word	0x40020c00

08008278 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8008278:	4b09      	ldr	r3, [pc, #36]	; (80082a0 <HAL_CRC_MspInit+0x28>)
 800827a:	6802      	ldr	r2, [r0, #0]
 800827c:	429a      	cmp	r2, r3
 800827e:	d000      	beq.n	8008282 <HAL_CRC_MspInit+0xa>
 8008280:	4770      	bx	lr
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8008282:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
{
 8008286:	b082      	sub	sp, #8
    __HAL_RCC_CRC_CLK_ENABLE();
 8008288:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800828a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800828e:	649a      	str	r2, [r3, #72]	; 0x48
 8008290:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008292:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008296:	9301      	str	r3, [sp, #4]
 8008298:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800829a:	b002      	add	sp, #8
 800829c:	4770      	bx	lr
 800829e:	bf00      	nop
 80082a0:	40023000 	.word	0x40023000

080082a4 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 80082a4:	4a10      	ldr	r2, [pc, #64]	; (80082e8 <HAL_TIM_Base_MspInit+0x44>)
 80082a6:	6803      	ldr	r3, [r0, #0]
 80082a8:	4293      	cmp	r3, r2
{
 80082aa:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM1)
 80082ac:	d010      	beq.n	80082d0 <HAL_TIM_Base_MspInit+0x2c>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 80082ae:	4a0f      	ldr	r2, [pc, #60]	; (80082ec <HAL_TIM_Base_MspInit+0x48>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d001      	beq.n	80082b8 <HAL_TIM_Base_MspInit+0x14>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80082b4:	b002      	add	sp, #8
 80082b6:	4770      	bx	lr
    __HAL_RCC_TIM3_CLK_ENABLE();
 80082b8:	4b0d      	ldr	r3, [pc, #52]	; (80082f0 <HAL_TIM_Base_MspInit+0x4c>)
 80082ba:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80082bc:	f042 0202 	orr.w	r2, r2, #2
 80082c0:	659a      	str	r2, [r3, #88]	; 0x58
 80082c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082c4:	f003 0302 	and.w	r3, r3, #2
 80082c8:	9301      	str	r3, [sp, #4]
 80082ca:	9b01      	ldr	r3, [sp, #4]
}
 80082cc:	b002      	add	sp, #8
 80082ce:	4770      	bx	lr
    __HAL_RCC_TIM1_CLK_ENABLE();
 80082d0:	4b07      	ldr	r3, [pc, #28]	; (80082f0 <HAL_TIM_Base_MspInit+0x4c>)
 80082d2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80082d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80082d8:	661a      	str	r2, [r3, #96]	; 0x60
 80082da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80082e0:	9300      	str	r3, [sp, #0]
 80082e2:	9b00      	ldr	r3, [sp, #0]
}
 80082e4:	b002      	add	sp, #8
 80082e6:	4770      	bx	lr
 80082e8:	40012c00 	.word	0x40012c00
 80082ec:	40000400 	.word	0x40000400
 80082f0:	40021000 	.word	0x40021000

080082f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80082f4:	b5d0      	push	{r4, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 80082f6:	4a20      	ldr	r2, [pc, #128]	; (8008378 <HAL_TIM_MspPostInit+0x84>)
 80082f8:	6801      	ldr	r1, [r0, #0]
{
 80082fa:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80082fc:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 80082fe:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008300:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008304:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8008308:	9306      	str	r3, [sp, #24]
  if(htim->Instance==TIM1)
 800830a:	d001      	beq.n	8008310 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800830c:	b008      	add	sp, #32
 800830e:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008310:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008314:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8008318:	2406      	movs	r4, #6
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800831a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800831c:	f042 0201 	orr.w	r2, r2, #1
 8008320:	64da      	str	r2, [r3, #76]	; 0x4c
 8008322:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008324:	f002 0201 	and.w	r2, r2, #1
 8008328:	9200      	str	r2, [sp, #0]
 800832a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800832c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800832e:	f042 0202 	orr.w	r2, r2, #2
 8008332:	64da      	str	r2, [r3, #76]	; 0x4c
 8008334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8008336:	9406      	str	r4, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008338:	f003 0302 	and.w	r3, r3, #2
 800833c:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800833e:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8008340:	f44f 62f0 	mov.w	r2, #1920	; 0x780
 8008344:	2602      	movs	r6, #2
 8008346:	2702      	movs	r7, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008348:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 800834c:	2302      	movs	r3, #2
 800834e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008352:	e9cd 6704 	strd	r6, r7, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008356:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008358:	f001 fba6 	bl	8009aa8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 800835c:	2203      	movs	r2, #3
 800835e:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008360:	4806      	ldr	r0, [pc, #24]	; (800837c <HAL_TIM_MspPostInit+0x88>)
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8008362:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008364:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8008366:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800836a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800836e:	f001 fb9b 	bl	8009aa8 <HAL_GPIO_Init>
}
 8008372:	b008      	add	sp, #32
 8008374:	bdd0      	pop	{r4, r6, r7, pc}
 8008376:	bf00      	nop
 8008378:	40012c00 	.word	0x40012c00
 800837c:	48000400 	.word	0x48000400

08008380 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008380:	b570      	push	{r4, r5, r6, lr}
 8008382:	4604      	mov	r4, r0
 8008384:	b09c      	sub	sp, #112	; 0x70
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008386:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008388:	2254      	movs	r2, #84	; 0x54
 800838a:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800838c:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8008390:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8008394:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008396:	f008 fa39 	bl	801080c <memset>
  if(huart->Instance==USART2)
 800839a:	4b31      	ldr	r3, [pc, #196]	; (8008460 <HAL_UART_MspInit+0xe0>)
 800839c:	6822      	ldr	r2, [r4, #0]
 800839e:	429a      	cmp	r2, r3
 80083a0:	d001      	beq.n	80083a6 <HAL_UART_MspInit+0x26>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80083a2:	b01c      	add	sp, #112	; 0x70
 80083a4:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80083a6:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80083a8:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80083aa:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80083ac:	f002 f8ae 	bl	800a50c <HAL_RCCEx_PeriphCLKConfig>
 80083b0:	2800      	cmp	r0, #0
 80083b2:	d14c      	bne.n	800844e <HAL_UART_MspInit+0xce>
    __HAL_RCC_USART2_CLK_ENABLE();
 80083b4:	4b2b      	ldr	r3, [pc, #172]	; (8008464 <HAL_UART_MspInit+0xe4>)
    hdma_usart2_rx.Instance = DMA1_Channel1;
 80083b6:	4e2c      	ldr	r6, [pc, #176]	; (8008468 <HAL_UART_MspInit+0xe8>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80083b8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80083ba:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80083be:	659a      	str	r2, [r3, #88]	; 0x58
 80083c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80083c2:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80083c6:	9200      	str	r2, [sp, #0]
 80083c8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80083ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80083cc:	f042 0201 	orr.w	r2, r2, #1
 80083d0:	64da      	str	r2, [r3, #76]	; 0x4c
 80083d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083d4:	f003 0301 	and.w	r3, r3, #1
 80083d8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 80083da:	220c      	movs	r2, #12
 80083dc:	2302      	movs	r3, #2
 80083de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80083e2:	2200      	movs	r2, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80083e4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 80083e6:	2300      	movs	r3, #0
 80083e8:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80083ec:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80083ee:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80083f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80083f4:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80083f6:	f001 fb57 	bl	8009aa8 <HAL_GPIO_Init>
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80083fa:	491c      	ldr	r1, [pc, #112]	; (800846c <HAL_UART_MspInit+0xec>)
 80083fc:	221a      	movs	r2, #26
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80083fe:	2300      	movs	r3, #0
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8008400:	e9c6 1200 	strd	r1, r2, [r6]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8008404:	4630      	mov	r0, r6
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008406:	2280      	movs	r2, #128	; 0x80
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008408:	e9c6 3302 	strd	r3, r3, [r6, #8]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800840c:	e9c6 2304 	strd	r2, r3, [r6, #16]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8008410:	e9c6 3306 	strd	r3, r3, [r6, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008414:	6233      	str	r3, [r6, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8008416:	f001 fab1 	bl	800997c <HAL_DMA_Init>
 800841a:	b9f0      	cbnz	r0, 800845a <HAL_UART_MspInit+0xda>
    hdma_usart2_tx.Instance = DMA1_Channel2;
 800841c:	4d14      	ldr	r5, [pc, #80]	; (8008470 <HAL_UART_MspInit+0xf0>)
 800841e:	4915      	ldr	r1, [pc, #84]	; (8008474 <HAL_UART_MspInit+0xf4>)
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8008420:	67e6      	str	r6, [r4, #124]	; 0x7c
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8008422:	221b      	movs	r2, #27
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008424:	2300      	movs	r3, #0
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8008426:	e9c5 1200 	strd	r1, r2, [r5]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800842a:	4628      	mov	r0, r5
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800842c:	2110      	movs	r1, #16
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800842e:	2280      	movs	r2, #128	; 0x80
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008430:	e9c5 1302 	strd	r1, r3, [r5, #8]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008434:	e9c5 3305 	strd	r3, r3, [r5, #20]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8008438:	e9c5 3307 	strd	r3, r3, [r5, #28]
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800843c:	62b4      	str	r4, [r6, #40]	; 0x28
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800843e:	612a      	str	r2, [r5, #16]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8008440:	f001 fa9c 	bl	800997c <HAL_DMA_Init>
 8008444:	b930      	cbnz	r0, 8008454 <HAL_UART_MspInit+0xd4>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8008446:	67a5      	str	r5, [r4, #120]	; 0x78
 8008448:	62ac      	str	r4, [r5, #40]	; 0x28
}
 800844a:	b01c      	add	sp, #112	; 0x70
 800844c:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 800844e:	f7fc fc55 	bl	8004cfc <Error_Handler>
 8008452:	e7af      	b.n	80083b4 <HAL_UART_MspInit+0x34>
      Error_Handler();
 8008454:	f7fc fc52 	bl	8004cfc <Error_Handler>
 8008458:	e7f5      	b.n	8008446 <HAL_UART_MspInit+0xc6>
      Error_Handler();
 800845a:	f7fc fc4f 	bl	8004cfc <Error_Handler>
 800845e:	e7dd      	b.n	800841c <HAL_UART_MspInit+0x9c>
 8008460:	40004400 	.word	0x40004400
 8008464:	40021000 	.word	0x40021000
 8008468:	200020b0 	.word	0x200020b0
 800846c:	40020008 	.word	0x40020008
 8008470:	20002110 	.word	0x20002110
 8008474:	4002001c 	.word	0x4002001c

08008478 <ADC1_2_IRQHandler>:
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 8008478:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800847c:	2240      	movs	r2, #64	; 0x40
 800847e:	601a      	str	r2, [r3, #0]
  /* USER CODE END ADC1_2_IRQn 0 */

    /* Clear Flags M1 */
    LL_ADC_ClearFlag_JEOS(ADC1);

  (void)TSK_HighFrequencyTask();
 8008480:	f7fd ba2c 	b.w	80058dc <TSK_HighFrequencyTask>

08008484 <TIM1_UP_TIM16_IRQHandler>:
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008484:	4b03      	ldr	r3, [pc, #12]	; (8008494 <TIM1_UP_TIM16_IRQHandler+0x10>)
 /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

 /* USER CODE END  TIMx_UP_M1_IRQn 0 */

  LL_TIM_ClearFlag_UPDATE(TIM1);
  (void)R3_1_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 8008486:	4804      	ldr	r0, [pc, #16]	; (8008498 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8008488:	f06f 0201 	mvn.w	r2, #1
 800848c:	611a      	str	r2, [r3, #16]
 800848e:	f004 ba95 	b.w	800c9bc <R3_1_TIMx_UP_IRQHandler>
 8008492:	bf00      	nop
 8008494:	40012c00 	.word	0x40012c00
 8008498:	20000158 	.word	0x20000158

0800849c <TIM1_BRK_TIM15_IRQHandler>:
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 800849c:	490c      	ldr	r1, [pc, #48]	; (80084d0 <TIM1_BRK_TIM15_IRQHandler+0x34>)

 /* USER CODE END  TIMx_UP_M1_IRQn 1 */
}

void TIMx_BRK_M1_IRQHandler(void)
{
 800849e:	b508      	push	{r3, lr}
 80084a0:	690b      	ldr	r3, [r1, #16]
 80084a2:	061a      	lsls	r2, r3, #24
 80084a4:	d505      	bpl.n	80084b2 <TIM1_BRK_TIM15_IRQHandler+0x16>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 80084a6:	f06f 0380 	mvn.w	r3, #128	; 0x80
    /* Nothing to do */
  }
  else
  {
    LL_TIM_ClearFlag_BRK(TIM1);
    PWMC_OVP_Handler(&PWM_Handle_M1._Super, TIM1);
 80084aa:	480a      	ldr	r0, [pc, #40]	; (80084d4 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 80084ac:	610b      	str	r3, [r1, #16]
 80084ae:	f7fe f87b 	bl	80065a8 <PWMC_OVP_Handler>
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK2(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 80084b2:	4907      	ldr	r1, [pc, #28]	; (80084d0 <TIM1_BRK_TIM15_IRQHandler+0x34>)
 80084b4:	690b      	ldr	r3, [r1, #16]
 80084b6:	05db      	lsls	r3, r3, #23
 80084b8:	d505      	bpl.n	80084c6 <TIM1_BRK_TIM15_IRQHandler+0x2a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 80084ba:	f46f 7380 	mvn.w	r3, #256	; 0x100
    /* Nothing to do */
  }
  else
  {
    LL_TIM_ClearFlag_BRK2(TIM1);
    PWMC_OVP_Handler(&PWM_Handle_M1._Super, TIM1);
 80084be:	4805      	ldr	r0, [pc, #20]	; (80084d4 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 80084c0:	610b      	str	r3, [r1, #16]
 80084c2:	f7fe f871 	bl	80065a8 <PWMC_OVP_Handler>
  MC_Scheduler();

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 80084c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_Scheduler();
 80084ca:	f7fd b9c1 	b.w	8005850 <MC_Scheduler>
 80084ce:	bf00      	nop
 80084d0:	40012c00 	.word	0x40012c00
 80084d4:	20000158 	.word	0x20000158

080084d8 <DMA1_Channel1_IRQHandler>:
}

//cstat !MISRAC2012-Rule-8.13
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
  return ((NULL == DMAx) ? 0U : ((READ_BIT(DMAx->ISR,
 80084d8:	4b04      	ldr	r3, [pc, #16]	; (80084ec <DMA1_Channel1_IRQHandler+0x14>)
 80084da:	681a      	ldr	r2, [r3, #0]
 80084dc:	0792      	lsls	r2, r2, #30
 80084de:	d400      	bmi.n	80084e2 <DMA1_Channel1_IRQHandler+0xa>
  }
  /* USER CODE BEGIN DMA1_Channel1_IRQHandler 1 */

  /* USER CODE BEGIN DMA1_Channel1_IRQHandler 1 */

}
 80084e0:	4770      	bx	lr
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 80084e2:	2202      	movs	r2, #2
    ASPEP_HWDataReceivedIT (&aspepOverUartA);
 80084e4:	4802      	ldr	r0, [pc, #8]	; (80084f0 <DMA1_Channel1_IRQHandler+0x18>)
 80084e6:	605a      	str	r2, [r3, #4]
 80084e8:	f7fc b948 	b.w	800477c <ASPEP_HWDataReceivedIT>
 80084ec:	40020000 	.word	0x40020000
 80084f0:	20000ab0 	.word	0x20000ab0

080084f4 <USART2_IRQHandler>:
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 80084f4:	4b42      	ldr	r3, [pc, #264]	; (8008600 <USART2_IRQHandler+0x10c>)
 80084f6:	69da      	ldr	r2, [r3, #28]
 80084f8:	0652      	lsls	r2, r2, #25
  * @brief  This function handles USART interrupt request.
  * @param  None
  */
//cstat !MISRAC2012-Rule-8.4
void USART2_IRQHandler(void)
{
 80084fa:	b510      	push	{r4, lr}
 80084fc:	d509      	bpl.n	8008512 <USART2_IRQHandler+0x1e>
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 80084fe:	4941      	ldr	r1, [pc, #260]	; (8008604 <USART2_IRQHandler+0x110>)
    /* Disable the DMA channel to prepare the next chunck of data */
    LL_DMA_DisableChannel(DMA_TX_A, DMACH_TX_A);
    LL_USART_ClearFlag_TC (USARTA);
    /* Data Sent by UART */
    /* Need to free the buffer, and to check pending transfer */
    ASPEP_HWDataTransmittedIT (&aspepOverUartA);
 8008500:	4841      	ldr	r0, [pc, #260]	; (8008608 <USART2_IRQHandler+0x114>)
 8008502:	69ca      	ldr	r2, [r1, #28]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
{
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8008504:	2440      	movs	r4, #64	; 0x40
 8008506:	f022 0201 	bic.w	r2, r2, #1
 800850a:	61ca      	str	r2, [r1, #28]
 800850c:	621c      	str	r4, [r3, #32]
 800850e:	f7fb ff89 	bl	8004424 <ASPEP_HWDataTransmittedIT>
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8008512:	4b3b      	ldr	r3, [pc, #236]	; (8008600 <USART2_IRQHandler+0x10c>)
 8008514:	69d8      	ldr	r0, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8008516:	69da      	ldr	r2, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 8008518:	69d9      	ldr	r1, [r3, #28]
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_ERROR(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE)) ? 1UL : 0UL);
 800851a:	689c      	ldr	r4, [r3, #8]
 800851c:	07e4      	lsls	r4, r4, #31
 800851e:	d526      	bpl.n	800856e <USART2_IRQHandler+0x7a>
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8008520:	f002 0202 	and.w	r2, r2, #2
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8008524:	f000 0008 	and.w	r0, r0, #8
  feFlag = LL_USART_IsActiveFlag_FE(USARTA);
  neFlag = LL_USART_IsActiveFlag_NE(USARTA);
  errorMask = LL_USART_IsEnabledIT_ERROR(USARTA);

  flags = ((oreFlag | feFlag | neFlag) & errorMask);
  if (0U == flags)
 8008528:	4302      	orrs	r2, r0
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 800852a:	f001 0104 	and.w	r1, r1, #4
 800852e:	430a      	orrs	r2, r1
 8008530:	d01d      	beq.n	800856e <USART2_IRQHandler+0x7a>
  {
    /* Nothing to do */
  }
  else
  { /* Stopping the debugger will generate an OverRun error */
    WRITE_REG(USARTA->ICR, USART_ICR_FECF|USART_ICR_ORECF|USART_ICR_NECF);
 8008532:	220e      	movs	r2, #14
 8008534:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008536:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800853a:	f502 6381 	add.w	r3, r2, #1032	; 0x408
 800853e:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
 8008542:	f023 0301 	bic.w	r3, r3, #1
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008546:	f502 6081 	add.w	r0, r2, #1032	; 0x408
 800854a:	e840 3100 	strex	r1, r3, [r0]
 800854e:	2900      	cmp	r1, #0
 8008550:	d1f3      	bne.n	800853a <USART2_IRQHandler+0x46>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008552:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8008556:	f502 6380 	add.w	r3, r2, #1024	; 0x400
 800855a:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 800855e:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008562:	f502 6080 	add.w	r0, r2, #1024	; 0x400
 8008566:	e840 3100 	strex	r1, r3, [r0]
 800856a:	2900      	cmp	r1, #0
 800856c:	d1f3      	bne.n	8008556 <USART2_IRQHandler+0x62>
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 800856e:	4b24      	ldr	r3, [pc, #144]	; (8008600 <USART2_IRQHandler+0x10c>)
 8008570:	69da      	ldr	r2, [r3, #28]
 8008572:	06d2      	lsls	r2, r2, #27
 8008574:	d541      	bpl.n	80085fa <USART2_IRQHandler+0x106>
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	06db      	lsls	r3, r3, #27
 800857a:	d53f      	bpl.n	80085fc <USART2_IRQHandler+0x108>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800857c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8008580:	f502 6380 	add.w	r3, r2, #1024	; 0x400
 8008584:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8008588:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800858c:	f502 6080 	add.w	r0, r2, #1024	; 0x400
 8008590:	e840 3100 	strex	r1, r3, [r0]
 8008594:	2900      	cmp	r1, #0
 8008596:	d1f3      	bne.n	8008580 <USART2_IRQHandler+0x8c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008598:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800859c:	f502 6381 	add.w	r3, r2, #1032	; 0x408
 80085a0:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 80085a4:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085a8:	f502 6081 	add.w	r0, r2, #1032	; 0x408
 80085ac:	e840 3100 	strex	r1, r3, [r0]
 80085b0:	2900      	cmp	r1, #0
 80085b2:	d1f3      	bne.n	800859c <USART2_IRQHandler+0xa8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085b4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80085b8:	f502 6381 	add.w	r3, r2, #1032	; 0x408
 80085bc:	e853 3f00 	ldrex	r3, [r3]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableDMAReq_RX(USART_TypeDef *USARTx)
{
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_DMAR);
 80085c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085c4:	f502 6081 	add.w	r0, r2, #1032	; 0x408
 80085c8:	e840 3100 	strex	r1, r3, [r0]
 80085cc:	2900      	cmp	r1, #0
 80085ce:	d1f3      	bne.n	80085b8 <USART2_IRQHandler+0xc4>
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 80085d0:	4b0b      	ldr	r3, [pc, #44]	; (8008600 <USART2_IRQHandler+0x10c>)
 80085d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085d4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80085d8:	f502 6381 	add.w	r3, r2, #1032	; 0x408
 80085dc:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 80085e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085e4:	f502 6081 	add.w	r0, r2, #1032	; 0x408
 80085e8:	e840 3100 	strex	r1, r3, [r0]
 80085ec:	2900      	cmp	r1, #0
 80085ee:	d1f3      	bne.n	80085d8 <USART2_IRQHandler+0xe4>
  }

  /* USER CODE BEGIN USART2_IRQHandler 1 */

  /* USER CODE END USART2_IRQHandler 1 */
}
 80085f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ASPEP_HWDMAReset (&aspepOverUartA);
 80085f4:	4804      	ldr	r0, [pc, #16]	; (8008608 <USART2_IRQHandler+0x114>)
 80085f6:	f7fc b90f 	b.w	8004818 <ASPEP_HWDMAReset>
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 80085fa:	681b      	ldr	r3, [r3, #0]
}
 80085fc:	bd10      	pop	{r4, pc}
 80085fe:	bf00      	nop
 8008600:	40004400 	.word	0x40004400
 8008604:	40020000 	.word	0x40020000
 8008608:	20000ab0 	.word	0x20000ab0

0800860c <HardFault_Handler>:
/**
  * @brief  This function handles Hard Fault exception.
  * @param  None
  */
void HardFault_Handler(void)
{
 800860c:	b508      	push	{r3, lr}
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 800860e:	f7fd fa07 	bl	8005a20 <TSK_HardwareFaultTask>

  /* Go to infinite loop when Hard Fault exception occurs */
  while (true)
 8008612:	e7fe      	b.n	8008612 <HardFault_Handler+0x6>

08008614 <SysTick_Handler>:
 /* USER CODE END HardFault_IRQn 1 */

}

void SysTick_Handler(void)
{
 8008614:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 8008616:	4c0a      	ldr	r4, [pc, #40]	; (8008640 <SysTick_Handler+0x2c>)
 8008618:	7823      	ldrb	r3, [r4, #0]
 800861a:	2b02      	cmp	r3, #2
 800861c:	d006      	beq.n	800862c <SysTick_Handler+0x18>
  {
    HAL_IncTick();
    HAL_SYSTICK_IRQHandler();
    SystickDividerCounter = 0;
  }
  SystickDividerCounter ++;
 800861e:	3301      	adds	r3, #1
 8008620:	b2db      	uxtb	r3, r3
 8008622:	7023      	strb	r3, [r4, #0]
  /* USER CODE END SysTick_IRQn 1 */
    MC_RunMotorControlTasks();

  /* USER CODE BEGIN SysTick_IRQn 2 */
  /* USER CODE END SysTick_IRQn 2 */
}
 8008624:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 8008628:	f7fd b9ee 	b.w	8005a08 <MC_RunMotorControlTasks>
    HAL_IncTick();
 800862c:	f000 f90c 	bl	8008848 <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 8008630:	f001 f92e 	bl	8009890 <HAL_SYSTICK_IRQHandler>
 8008634:	2301      	movs	r3, #1
  SystickDividerCounter ++;
 8008636:	7023      	strb	r3, [r4, #0]
}
 8008638:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 800863c:	f7fd b9e4 	b.w	8005a08 <MC_RunMotorControlTasks>
 8008640:	20001b00 	.word	0x20001b00

08008644 <EXTI15_10_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
  return (uint32_t)(READ_BIT(EXTI->PR1, ExtiLine));
 8008644:	4b04      	ldr	r3, [pc, #16]	; (8008658 <EXTI15_10_IRQHandler+0x14>)
 8008646:	695a      	ldr	r2, [r3, #20]
  * @brief  This function handles Button IRQ on PIN PC13.
  */
void EXTI15_10_IRQHandler (void)
{
  /* USER CODE BEGIN START_STOP_BTN */
  if (0U == LL_EXTI_ReadFlag_0_31(LL_EXTI_LINE_13))
 8008648:	0492      	lsls	r2, r2, #18
 800864a:	d400      	bmi.n	800864e <EXTI15_10_IRQHandler+0xa>
  {
    LL_EXTI_ClearFlag_0_31 (LL_EXTI_LINE_13);
    (void)UI_HandleStartStopButton_cb ();
  }

}
 800864c:	4770      	bx	lr
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 800864e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008652:	615a      	str	r2, [r3, #20]
    (void)UI_HandleStartStopButton_cb ();
 8008654:	f7fd b9fe 	b.w	8005a54 <UI_HandleStartStopButton_cb>
 8008658:	40010400 	.word	0x40010400

0800865c <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800865c:	490c      	ldr	r1, [pc, #48]	; (8008690 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800865e:	4a0d      	ldr	r2, [pc, #52]	; (8008694 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 8008660:	680b      	ldr	r3, [r1, #0]
{
 8008662:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008664:	4c0c      	ldr	r4, [pc, #48]	; (8008698 <_sbrk+0x3c>)
 8008666:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8008668:	b12b      	cbz	r3, 8008676 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800866a:	4418      	add	r0, r3
 800866c:	4290      	cmp	r0, r2
 800866e:	d807      	bhi.n	8008680 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8008670:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 8008672:	4618      	mov	r0, r3
 8008674:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8008676:	4b09      	ldr	r3, [pc, #36]	; (800869c <_sbrk+0x40>)
 8008678:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 800867a:	4418      	add	r0, r3
 800867c:	4290      	cmp	r0, r2
 800867e:	d9f7      	bls.n	8008670 <_sbrk+0x14>
    errno = ENOMEM;
 8008680:	f008 f922 	bl	80108c8 <__errno>
 8008684:	230c      	movs	r3, #12
 8008686:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8008688:	f04f 33ff 	mov.w	r3, #4294967295
}
 800868c:	4618      	mov	r0, r3
 800868e:	bd10      	pop	{r4, pc}
 8008690:	20003628 	.word	0x20003628
 8008694:	20020000 	.word	0x20020000
 8008698:	00000800 	.word	0x00000800
 800869c:	20003780 	.word	0x20003780

080086a0 <UASPEP_INIT>:
  }
  else
  {
#endif
    /* Enable DMA UART */
    LL_USART_ClearFlag_TC(pHandle->USARTx);
 80086a0:	6802      	ldr	r2, [r0, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 80086a2:	2340      	movs	r3, #64	; 0x40
{
 80086a4:	b470      	push	{r4, r5, r6}
 80086a6:	6213      	str	r3, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086a8:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 80086ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086b0:	e842 3100 	strex	r1, r3, [r2]
 80086b4:	2900      	cmp	r1, #0
 80086b6:	d1f7      	bne.n	80086a8 <UASPEP_INIT+0x8>
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 80086b8:	f102 0108 	add.w	r1, r2, #8
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086bc:	e851 3f00 	ldrex	r3, [r1]
 80086c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086c4:	e841 3400 	strex	r4, r3, [r1]
 80086c8:	2c00      	cmp	r4, #0
 80086ca:	d1f7      	bne.n	80086bc <UASPEP_INIT+0x1c>
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, PeriphAddress);
 80086cc:	6901      	ldr	r1, [r0, #16]
 80086ce:	4e17      	ldr	r6, [pc, #92]	; (800872c <UASPEP_INIT+0x8c>)
 80086d0:	6883      	ldr	r3, [r0, #8]
 80086d2:	5c74      	ldrb	r4, [r6, r1]
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_TCIE);
 80086d4:	6845      	ldr	r5, [r0, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, PeriphAddress);
 80086d6:	4423      	add	r3, r4
    LL_USART_EnableDMAReq_TX(pHandle->USARTx);

    /* Write the USART_TDR register address in the DMA control register to configure it as
     * the destination of the transfer */
    //cstat !MISRAC2012-Rule-11.4
    LL_DMA_SetPeriphAddress(pHandle->txDMA, pHandle->txChannel, (uint32_t)&pHandle->USARTx->TDR);
 80086d8:	f102 0128 	add.w	r1, r2, #40	; 0x28
 80086dc:	6099      	str	r1, [r3, #8]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_TCIE);
 80086de:	68c3      	ldr	r3, [r0, #12]
 80086e0:	5cf1      	ldrb	r1, [r6, r3]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 80086e2:	2340      	movs	r3, #64	; 0x40
 80086e4:	6213      	str	r3, [r2, #32]
 80086e6:	586b      	ldr	r3, [r5, r1]
 80086e8:	f043 0302 	orr.w	r3, r3, #2
 80086ec:	506b      	str	r3, [r5, r1]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 80086ee:	f102 0108 	add.w	r1, r2, #8
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086f2:	e851 3f00 	ldrex	r3, [r1]
 80086f6:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086fa:	e841 3400 	strex	r4, r3, [r1]
 80086fe:	2c00      	cmp	r4, #0
 8008700:	d1f7      	bne.n	80086f2 <UASPEP_INIT+0x52>
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, PeriphAddress);
 8008702:	68c3      	ldr	r3, [r0, #12]
 8008704:	5cf0      	ldrb	r0, [r6, r3]
 8008706:	4405      	add	r5, r0
    LL_USART_EnableIT_ERROR(pHandle->USARTx);

    /* Write the USART_RDR register address in the DMA control register to configure it as
     * the source of the transfer */
    //cstat !MISRAC2012-Rule-11.4
    LL_DMA_SetPeriphAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)&pHandle->USARTx->RDR);
 8008708:	f102 0124 	add.w	r1, r2, #36	; 0x24
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 800870c:	2340      	movs	r3, #64	; 0x40
 800870e:	60a9      	str	r1, [r5, #8]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8008710:	f102 0108 	add.w	r1, r2, #8
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8008714:	6213      	str	r3, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008716:	e851 3f00 	ldrex	r3, [r1]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 800871a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800871e:	e841 3200 	strex	r2, r3, [r1]
 8008722:	2a00      	cmp	r2, #0
 8008724:	d1f7      	bne.n	8008716 <UASPEP_INIT+0x76>
}
 8008726:	bc70      	pop	{r4, r5, r6}
 8008728:	4770      	bx	lr
 800872a:	bf00      	nop
 800872c:	0801c87c 	.word	0x0801c87c

08008730 <UASPEP_SEND_PACKET>:
  * @param  pHWHandle Hardware components chosen for communication
  * @param  data Data to be transmitted to controller
  * @param  length Length of the data to be transmitted
  */
bool UASPEP_SEND_PACKET(void *pHWHandle, void *data, uint16_t length)
{
 8008730:	b430      	push	{r4, r5}
  return ((READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 8008732:	6903      	ldr	r3, [r0, #16]
 8008734:	4d0b      	ldr	r5, [pc, #44]	; (8008764 <UASPEP_SEND_PACKET+0x34>)
 8008736:	6884      	ldr	r4, [r0, #8]
 8008738:	5ceb      	ldrb	r3, [r5, r3]
 800873a:	58e5      	ldr	r5, [r4, r3]
                    DMA_CCR_EN) == (DMA_CCR_EN)) ? 1UL : 0UL);
 800873c:	07ed      	lsls	r5, r5, #31
  return ((READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 800873e:	eb04 0003 	add.w	r0, r4, r3
                    DMA_CCR_EN) == (DMA_CCR_EN)) ? 1UL : 0UL);
 8008742:	d40b      	bmi.n	800875c <UASPEP_SEND_PACKET+0x2c>
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, MemoryAddress);
 8008744:	60c1      	str	r1, [r0, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 8008746:	6841      	ldr	r1, [r0, #4]
 8008748:	0c09      	lsrs	r1, r1, #16
 800874a:	0409      	lsls	r1, r1, #16
 800874c:	430a      	orrs	r2, r1
 800874e:	6042      	str	r2, [r0, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 8008750:	58e2      	ldr	r2, [r4, r3]
  {
    //cstat !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6
    LL_DMA_SetMemoryAddress(pHandle->txDMA, pHandle->txChannel, (uint32_t)data);
    LL_DMA_SetDataLength(pHandle->txDMA, pHandle->txChannel, length);
    LL_DMA_EnableChannel(pHandle->txDMA, pHandle->txChannel);
    result = true;
 8008752:	2001      	movs	r0, #1
 8008754:	4302      	orrs	r2, r0
 8008756:	50e2      	str	r2, [r4, r3]
  else
  {
    result = false;
  }
  return (result);
}
 8008758:	bc30      	pop	{r4, r5}
 800875a:	4770      	bx	lr
    result = false;
 800875c:	2000      	movs	r0, #0
}
 800875e:	bc30      	pop	{r4, r5}
 8008760:	4770      	bx	lr
 8008762:	bf00      	nop
 8008764:	0801c87c 	.word	0x0801c87c

08008768 <UASPEP_RECEIVE_BUFFER>:
  * @param  pHWHandle Hardware components chosen for communication
  * @param  buffer Buffer which will receive the communicated data
  * @param  length Length of the received data
  */
void UASPEP_RECEIVE_BUFFER(void *pHWHandle, void* buffer, uint16_t length)
{
 8008768:	b430      	push	{r4, r5}
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 800876a:	68c3      	ldr	r3, [r0, #12]
 800876c:	4d0b      	ldr	r5, [pc, #44]	; (800879c <UASPEP_RECEIVE_BUFFER+0x34>)
 800876e:	6844      	ldr	r4, [r0, #4]
 8008770:	5ce8      	ldrb	r0, [r5, r3]
 8008772:	5823      	ldr	r3, [r4, r0]
 8008774:	eb04 0c00 	add.w	ip, r4, r0
 8008778:	f023 0301 	bic.w	r3, r3, #1
 800877c:	5023      	str	r3, [r4, r0]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, MemoryAddress);
 800877e:	f8cc 100c 	str.w	r1, [ip, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 8008782:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8008786:	0c1b      	lsrs	r3, r3, #16
 8008788:	041b      	lsls	r3, r3, #16
 800878a:	431a      	orrs	r2, r3
 800878c:	f8cc 2004 	str.w	r2, [ip, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 8008790:	5823      	ldr	r3, [r4, r0]
 8008792:	f043 0301 	orr.w	r3, r3, #1
 8008796:	5023      	str	r3, [r4, r0]
  //cstat !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6
  LL_DMA_SetMemoryAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)buffer);
  LL_DMA_SetDataLength(pHandle->rxDMA, pHandle->rxChannel, length);

  LL_DMA_EnableChannel(pHandle->rxDMA, pHandle->rxChannel);
}
 8008798:	bc30      	pop	{r4, r5}
 800879a:	4770      	bx	lr
 800879c:	0801c87c 	.word	0x0801c87c

080087a0 <UASPEP_IDLE_ENABLE>:
  * @param  pHandle Handler of the current instance of the UASPEP component
  */
void UASPEP_IDLE_ENABLE(void *pHWHandle)
{
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *)pHWHandle; //cstat !MISRAC2012-Rule-11.5
  LL_USART_ClearFlag_IDLE(pHandle->USARTx);
 80087a0:	6802      	ldr	r2, [r0, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 80087a2:	2310      	movs	r3, #16
 80087a4:	6213      	str	r3, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087a6:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 80087aa:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ae:	e842 3100 	strex	r1, r3, [r2]
 80087b2:	2900      	cmp	r1, #0
 80087b4:	d1f7      	bne.n	80087a6 <UASPEP_IDLE_ENABLE+0x6>
  LL_USART_EnableIT_IDLE(pHandle->USARTx);
}
 80087b6:	4770      	bx	lr

080087b8 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80087b8:	4a03      	ldr	r2, [pc, #12]	; (80087c8 <SystemInit+0x10>)
 80087ba:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80087be:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80087c2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80087c6:	4770      	bx	lr
 80087c8:	e000ed00 	.word	0xe000ed00

080087cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80087cc:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 80087ce:	4b0f      	ldr	r3, [pc, #60]	; (800880c <HAL_InitTick+0x40>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	b90b      	cbnz	r3, 80087d8 <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80087d4:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80087d6:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80087d8:	490d      	ldr	r1, [pc, #52]	; (8008810 <HAL_InitTick+0x44>)
 80087da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80087de:	4605      	mov	r5, r0
 80087e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80087e4:	6808      	ldr	r0, [r1, #0]
 80087e6:	fbb0 f0f3 	udiv	r0, r0, r3
 80087ea:	f001 f835 	bl	8009858 <HAL_SYSTICK_Config>
 80087ee:	4604      	mov	r4, r0
 80087f0:	2800      	cmp	r0, #0
 80087f2:	d1ef      	bne.n	80087d4 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80087f4:	2d0f      	cmp	r5, #15
 80087f6:	d8ed      	bhi.n	80087d4 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80087f8:	4602      	mov	r2, r0
 80087fa:	4629      	mov	r1, r5
 80087fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008800:	f000 ffde 	bl	80097c0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8008804:	4b03      	ldr	r3, [pc, #12]	; (8008814 <HAL_InitTick+0x48>)
 8008806:	4620      	mov	r0, r4
 8008808:	601d      	str	r5, [r3, #0]
}
 800880a:	bd38      	pop	{r3, r4, r5, pc}
 800880c:	20001b08 	.word	0x20001b08
 8008810:	20001b04 	.word	0x20001b04
 8008814:	20001b0c 	.word	0x20001b0c

08008818 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008818:	4a0a      	ldr	r2, [pc, #40]	; (8008844 <HAL_Init+0x2c>)
 800881a:	6813      	ldr	r3, [r2, #0]
 800881c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8008820:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008822:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008824:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008826:	f000 ffb9 	bl	800979c <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800882a:	2004      	movs	r0, #4
 800882c:	f7ff ffce 	bl	80087cc <HAL_InitTick>
 8008830:	b110      	cbz	r0, 8008838 <HAL_Init+0x20>
    status = HAL_ERROR;
 8008832:	2401      	movs	r4, #1
}
 8008834:	4620      	mov	r0, r4
 8008836:	bd10      	pop	{r4, pc}
 8008838:	4604      	mov	r4, r0
    HAL_MspInit();
 800883a:	f7ff fc8f 	bl	800815c <HAL_MspInit>
}
 800883e:	4620      	mov	r0, r4
 8008840:	bd10      	pop	{r4, pc}
 8008842:	bf00      	nop
 8008844:	40022000 	.word	0x40022000

08008848 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8008848:	4a03      	ldr	r2, [pc, #12]	; (8008858 <HAL_IncTick+0x10>)
 800884a:	4904      	ldr	r1, [pc, #16]	; (800885c <HAL_IncTick+0x14>)
 800884c:	6813      	ldr	r3, [r2, #0]
 800884e:	6809      	ldr	r1, [r1, #0]
 8008850:	440b      	add	r3, r1
 8008852:	6013      	str	r3, [r2, #0]
}
 8008854:	4770      	bx	lr
 8008856:	bf00      	nop
 8008858:	2000362c 	.word	0x2000362c
 800885c:	20001b08 	.word	0x20001b08

08008860 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8008860:	4b01      	ldr	r3, [pc, #4]	; (8008868 <HAL_GetTick+0x8>)
 8008862:	6818      	ldr	r0, [r3, #0]
}
 8008864:	4770      	bx	lr
 8008866:	bf00      	nop
 8008868:	2000362c 	.word	0x2000362c

0800886c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800886c:	b530      	push	{r4, r5, lr}
 800886e:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8008870:	2300      	movs	r3, #0
 8008872:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8008874:	2800      	cmp	r0, #0
 8008876:	f000 80d4 	beq.w	8008a22 <HAL_ADC_Init+0x1b6>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800887a:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 800887c:	4604      	mov	r4, r0
 800887e:	2d00      	cmp	r5, #0
 8008880:	f000 809d 	beq.w	80089be <HAL_ADC_Init+0x152>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8008884:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8008886:	6893      	ldr	r3, [r2, #8]
 8008888:	009d      	lsls	r5, r3, #2
 800888a:	d505      	bpl.n	8008898 <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800888c:	6893      	ldr	r3, [r2, #8]
 800888e:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8008892:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008896:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8008898:	6893      	ldr	r3, [r2, #8]
 800889a:	00d8      	lsls	r0, r3, #3
 800889c:	d419      	bmi.n	80088d2 <HAL_ADC_Init+0x66>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800889e:	4b7e      	ldr	r3, [pc, #504]	; (8008a98 <HAL_ADC_Init+0x22c>)
 80088a0:	487e      	ldr	r0, [pc, #504]	; (8008a9c <HAL_ADC_Init+0x230>)
 80088a2:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 80088a4:	6891      	ldr	r1, [r2, #8]
 80088a6:	099b      	lsrs	r3, r3, #6
 80088a8:	fba0 0303 	umull	r0, r3, r0, r3
 80088ac:	f021 4110 	bic.w	r1, r1, #2415919104	; 0x90000000
 80088b0:	099b      	lsrs	r3, r3, #6
 80088b2:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80088b6:	3301      	adds	r3, #1
 80088b8:	005b      	lsls	r3, r3, #1
 80088ba:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80088be:	6091      	str	r1, [r2, #8]
 80088c0:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80088c2:	9b01      	ldr	r3, [sp, #4]
 80088c4:	b12b      	cbz	r3, 80088d2 <HAL_ADC_Init+0x66>
    {
      wait_loop_index--;
 80088c6:	9b01      	ldr	r3, [sp, #4]
 80088c8:	3b01      	subs	r3, #1
 80088ca:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80088cc:	9b01      	ldr	r3, [sp, #4]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d1f9      	bne.n	80088c6 <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80088d2:	6893      	ldr	r3, [r2, #8]
 80088d4:	00d9      	lsls	r1, r3, #3
 80088d6:	d464      	bmi.n	80089a2 <HAL_ADC_Init+0x136>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80088d8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80088da:	f043 0310 	orr.w	r3, r3, #16
 80088de:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80088e0:	6e23      	ldr	r3, [r4, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80088e2:	2001      	movs	r0, #1
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80088e4:	4303      	orrs	r3, r0
 80088e6:	6623      	str	r3, [r4, #96]	; 0x60
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80088e8:	6893      	ldr	r3, [r2, #8]
 80088ea:	f013 0f04 	tst.w	r3, #4
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80088ee:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80088f0:	d15e      	bne.n	80089b0 <HAL_ADC_Init+0x144>
 80088f2:	06db      	lsls	r3, r3, #27
 80088f4:	d45c      	bmi.n	80089b0 <HAL_ADC_Init+0x144>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80088f6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80088f8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80088fc:	f043 0302 	orr.w	r3, r3, #2
 8008900:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008902:	6893      	ldr	r3, [r2, #8]
 8008904:	07dd      	lsls	r5, r3, #31
 8008906:	d419      	bmi.n	800893c <HAL_ADC_Init+0xd0>
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008908:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 800890c:	4b64      	ldr	r3, [pc, #400]	; (8008aa0 <HAL_ADC_Init+0x234>)
 800890e:	f000 80a0 	beq.w	8008a52 <HAL_ADC_Init+0x1e6>
 8008912:	429a      	cmp	r2, r3
 8008914:	f000 80a5 	beq.w	8008a62 <HAL_ADC_Init+0x1f6>
 8008918:	4962      	ldr	r1, [pc, #392]	; (8008aa4 <HAL_ADC_Init+0x238>)
 800891a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800891e:	6889      	ldr	r1, [r1, #8]
 8008920:	689b      	ldr	r3, [r3, #8]
 8008922:	430b      	orrs	r3, r1
 8008924:	4960      	ldr	r1, [pc, #384]	; (8008aa8 <HAL_ADC_Init+0x23c>)
 8008926:	6889      	ldr	r1, [r1, #8]
 8008928:	430b      	orrs	r3, r1
 800892a:	07d9      	lsls	r1, r3, #31
 800892c:	d406      	bmi.n	800893c <HAL_ADC_Init+0xd0>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800892e:	495f      	ldr	r1, [pc, #380]	; (8008aac <HAL_ADC_Init+0x240>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8008930:	688b      	ldr	r3, [r1, #8]
 8008932:	6865      	ldr	r5, [r4, #4]
 8008934:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8008938:	432b      	orrs	r3, r5
 800893a:	608b      	str	r3, [r1, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 800893c:	68e5      	ldr	r5, [r4, #12]
 800893e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8008940:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
                hadc->Init.DataAlign                                                   |
 8008944:	432b      	orrs	r3, r5
 8008946:	68a5      	ldr	r5, [r4, #8]
 8008948:	432b      	orrs	r3, r5
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800894a:	7f65      	ldrb	r5, [r4, #29]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800894c:	2901      	cmp	r1, #1
                hadc->Init.DataAlign                                                   |
 800894e:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008952:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8008956:	d05f      	beq.n	8008a18 <HAL_ADC_Init+0x1ac>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008958:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800895a:	b121      	cbz	r1, 8008966 <HAL_ADC_Init+0xfa>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 800895c:	6b25      	ldr	r5, [r4, #48]	; 0x30
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800895e:	f401 7178 	and.w	r1, r1, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8008962:	4329      	orrs	r1, r5
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8008964:	430b      	orrs	r3, r1
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8008966:	68d5      	ldr	r5, [r2, #12]
 8008968:	4951      	ldr	r1, [pc, #324]	; (8008ab0 <HAL_ADC_Init+0x244>)
 800896a:	4029      	ands	r1, r5
 800896c:	4319      	orrs	r1, r3
 800896e:	60d1      	str	r1, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8008970:	6913      	ldr	r3, [r2, #16]
 8008972:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008974:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8008978:	430b      	orrs	r3, r1
 800897a:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800897c:	6893      	ldr	r3, [r2, #8]
 800897e:	075b      	lsls	r3, r3, #29
 8008980:	d523      	bpl.n	80089ca <HAL_ADC_Init+0x15e>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8008982:	6893      	ldr	r3, [r2, #8]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8008984:	6963      	ldr	r3, [r4, #20]
 8008986:	2b01      	cmp	r3, #1
 8008988:	d04e      	beq.n	8008a28 <HAL_ADC_Init+0x1bc>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800898a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800898c:	f023 030f 	bic.w	r3, r3, #15
 8008990:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8008992:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8008994:	f023 0303 	bic.w	r3, r3, #3
 8008998:	f043 0301 	orr.w	r3, r3, #1
 800899c:	65e3      	str	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 800899e:	b003      	add	sp, #12
 80089a0:	bd30      	pop	{r4, r5, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80089a2:	6893      	ldr	r3, [r2, #8]
 80089a4:	f013 0f04 	tst.w	r3, #4
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80089a8:	f04f 0000 	mov.w	r0, #0
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80089ac:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80089ae:	d0a0      	beq.n	80088f2 <HAL_ADC_Init+0x86>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80089b0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 80089b2:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80089b4:	f043 0310 	orr.w	r3, r3, #16
 80089b8:	65e3      	str	r3, [r4, #92]	; 0x5c
}
 80089ba:	b003      	add	sp, #12
 80089bc:	bd30      	pop	{r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 80089be:	f7ff fbed 	bl	800819c <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80089c2:	6625      	str	r5, [r4, #96]	; 0x60
    hadc->Lock = HAL_UNLOCKED;
 80089c4:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 80089c8:	e75c      	b.n	8008884 <HAL_ADC_Init+0x18>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80089ca:	6893      	ldr	r3, [r2, #8]
 80089cc:	071d      	lsls	r5, r3, #28
 80089ce:	d4d9      	bmi.n	8008984 <HAL_ADC_Init+0x118>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80089d0:	68d1      	ldr	r1, [r2, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80089d2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80089d6:	7f25      	ldrb	r5, [r4, #28]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80089d8:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80089dc:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80089de:	f021 0102 	bic.w	r1, r1, #2
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80089e2:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80089e6:	430b      	orrs	r3, r1
      if (hadc->Init.GainCompensation != 0UL)
 80089e8:	6921      	ldr	r1, [r4, #16]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80089ea:	60d3      	str	r3, [r2, #12]
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80089ec:	6913      	ldr	r3, [r2, #16]
      if (hadc->Init.GainCompensation != 0UL)
 80089ee:	bb19      	cbnz	r1, 8008a38 <HAL_ADC_Init+0x1cc>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80089f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80089f4:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80089f6:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 80089fa:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80089fe:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008a02:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      if (hadc->Init.OversamplingMode == ENABLE)
 8008a06:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8008a0a:	2b01      	cmp	r3, #1
 8008a0c:	d032      	beq.n	8008a74 <HAL_ADC_Init+0x208>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8008a0e:	6913      	ldr	r3, [r2, #16]
 8008a10:	f023 0301 	bic.w	r3, r3, #1
 8008a14:	6113      	str	r3, [r2, #16]
 8008a16:	e7b5      	b.n	8008984 <HAL_ADC_Init+0x118>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8008a18:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8008a1a:	3901      	subs	r1, #1
 8008a1c:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8008a20:	e79a      	b.n	8008958 <HAL_ADC_Init+0xec>
    return HAL_ERROR;
 8008a22:	2001      	movs	r0, #1
}
 8008a24:	b003      	add	sp, #12
 8008a26:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8008a28:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8008a2a:	6a23      	ldr	r3, [r4, #32]
 8008a2c:	f021 010f 	bic.w	r1, r1, #15
 8008a30:	3b01      	subs	r3, #1
 8008a32:	430b      	orrs	r3, r1
 8008a34:	6313      	str	r3, [r2, #48]	; 0x30
 8008a36:	e7ac      	b.n	8008992 <HAL_ADC_Init+0x126>
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8008a38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a3c:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8008a3e:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8008a42:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8008a46:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008a4a:	430b      	orrs	r3, r1
 8008a4c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8008a50:	e7d9      	b.n	8008a06 <HAL_ADC_Init+0x19a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008a52:	6891      	ldr	r1, [r2, #8]
 8008a54:	689b      	ldr	r3, [r3, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008a56:	430b      	orrs	r3, r1
 8008a58:	07db      	lsls	r3, r3, #31
 8008a5a:	f53f af6f 	bmi.w	800893c <HAL_ADC_Init+0xd0>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8008a5e:	4915      	ldr	r1, [pc, #84]	; (8008ab4 <HAL_ADC_Init+0x248>)
 8008a60:	e766      	b.n	8008930 <HAL_ADC_Init+0xc4>
 8008a62:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8008a66:	689b      	ldr	r3, [r3, #8]
 8008a68:	6891      	ldr	r1, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008a6a:	430b      	orrs	r3, r1
 8008a6c:	07d9      	lsls	r1, r3, #31
 8008a6e:	f53f af65 	bmi.w	800893c <HAL_ADC_Init+0xd0>
 8008a72:	e7f4      	b.n	8008a5e <HAL_ADC_Init+0x1f2>
        MODIFY_REG(hadc->Instance->CFGR2,
 8008a74:	6911      	ldr	r1, [r2, #16]
 8008a76:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008a78:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8008a7a:	f421 61ff 	bic.w	r1, r1, #2040	; 0x7f8
 8008a7e:	f021 0104 	bic.w	r1, r1, #4
 8008a82:	432b      	orrs	r3, r5
 8008a84:	430b      	orrs	r3, r1
 8008a86:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008a88:	430b      	orrs	r3, r1
 8008a8a:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8008a8c:	430b      	orrs	r3, r1
 8008a8e:	f043 0301 	orr.w	r3, r3, #1
 8008a92:	6113      	str	r3, [r2, #16]
 8008a94:	e776      	b.n	8008984 <HAL_ADC_Init+0x118>
 8008a96:	bf00      	nop
 8008a98:	20001b04 	.word	0x20001b04
 8008a9c:	053e2d63 	.word	0x053e2d63
 8008aa0:	50000100 	.word	0x50000100
 8008aa4:	50000400 	.word	0x50000400
 8008aa8:	50000600 	.word	0x50000600
 8008aac:	50000700 	.word	0x50000700
 8008ab0:	fff04007 	.word	0xfff04007
 8008ab4:	50000300 	.word	0x50000300

08008ab8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8008ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008aba:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
{
 8008abe:	b083      	sub	sp, #12
 8008ac0:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8008ac2:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 8008ac4:	f04f 0000 	mov.w	r0, #0
 8008ac8:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8008aca:	f000 8174 	beq.w	8008db6 <HAL_ADC_ConfigChannel+0x2fe>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008ace:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 8008ad0:	2001      	movs	r0, #1
 8008ad2:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008ad6:	6894      	ldr	r4, [r2, #8]
 8008ad8:	0766      	lsls	r6, r4, #29
 8008ada:	d45e      	bmi.n	8008b9a <HAL_ADC_ConfigChannel+0xe2>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8008adc:	6848      	ldr	r0, [r1, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8008ade:	ea4f 1e90 	mov.w	lr, r0, lsr #6
  MODIFY_REG(*preg,
 8008ae2:	f000 0c1f 	and.w	ip, r0, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8008ae6:	f00e 0e0c 	and.w	lr, lr, #12
  MODIFY_REG(*preg,
 8008aea:	6808      	ldr	r0, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8008aec:	f102 0430 	add.w	r4, r2, #48	; 0x30
  MODIFY_REG(*preg,
 8008af0:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8008af4:	f854 500e 	ldr.w	r5, [r4, lr]
 8008af8:	261f      	movs	r6, #31
 8008afa:	fa00 f00c 	lsl.w	r0, r0, ip
 8008afe:	fa06 fc0c 	lsl.w	ip, r6, ip
 8008b02:	ea25 0c0c 	bic.w	ip, r5, ip
 8008b06:	ea40 000c 	orr.w	r0, r0, ip
 8008b0a:	f844 000e 	str.w	r0, [r4, lr]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008b0e:	6890      	ldr	r0, [r2, #8]
 8008b10:	0745      	lsls	r5, r0, #29
 8008b12:	d572      	bpl.n	8008bfa <HAL_ADC_ConfigChannel+0x142>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8008b14:	6890      	ldr	r0, [r2, #8]
 8008b16:	6808      	ldr	r0, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008b18:	6894      	ldr	r4, [r2, #8]
 8008b1a:	f014 0f01 	tst.w	r4, #1
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8008b1e:	4604      	mov	r4, r0
 8008b20:	d10c      	bne.n	8008b3c <HAL_ADC_ConfigChannel+0x84>
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8008b22:	4dbd      	ldr	r5, [pc, #756]	; (8008e18 <HAL_ADC_ConfigChannel+0x360>)
 8008b24:	68ce      	ldr	r6, [r1, #12]
 8008b26:	42ae      	cmp	r6, r5
 8008b28:	f000 80eb 	beq.w	8008d02 <HAL_ADC_ConfigChannel+0x24a>
    CLEAR_BIT(ADCx->DIFSEL,
 8008b2c:	f8d2 10b0 	ldr.w	r1, [r2, #176]	; 0xb0
 8008b30:	f3c0 0012 	ubfx	r0, r0, #0, #19
 8008b34:	ea21 0100 	bic.w	r1, r1, r0
 8008b38:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8008b3c:	49b7      	ldr	r1, [pc, #732]	; (8008e1c <HAL_ADC_ConfigChannel+0x364>)
 8008b3e:	420c      	tst	r4, r1
 8008b40:	d059      	beq.n	8008bf6 <HAL_ADC_ConfigChannel+0x13e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008b42:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8008b46:	f000 8134 	beq.w	8008db2 <HAL_ADC_ConfigChannel+0x2fa>
 8008b4a:	4db5      	ldr	r5, [pc, #724]	; (8008e20 <HAL_ADC_ConfigChannel+0x368>)
 8008b4c:	49b5      	ldr	r1, [pc, #724]	; (8008e24 <HAL_ADC_ConfigChannel+0x36c>)
 8008b4e:	48b6      	ldr	r0, [pc, #728]	; (8008e28 <HAL_ADC_ConfigChannel+0x370>)
 8008b50:	42aa      	cmp	r2, r5
 8008b52:	bf18      	it	ne
 8008b54:	4601      	movne	r1, r0
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8008b56:	6888      	ldr	r0, [r1, #8]

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8008b58:	49b4      	ldr	r1, [pc, #720]	; (8008e2c <HAL_ADC_ConfigChannel+0x374>)
 8008b5a:	428c      	cmp	r4, r1
 8008b5c:	f000 75e0 	and.w	r5, r0, #29360128	; 0x1c00000
 8008b60:	d024      	beq.n	8008bac <HAL_ADC_ConfigChannel+0xf4>
 8008b62:	49b3      	ldr	r1, [pc, #716]	; (8008e30 <HAL_ADC_ConfigChannel+0x378>)
 8008b64:	428c      	cmp	r4, r1
 8008b66:	d021      	beq.n	8008bac <HAL_ADC_ConfigChannel+0xf4>
          {
            wait_loop_index--;
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8008b68:	49b2      	ldr	r1, [pc, #712]	; (8008e34 <HAL_ADC_ConfigChannel+0x37c>)
 8008b6a:	428c      	cmp	r4, r1
 8008b6c:	f040 8139 	bne.w	8008de2 <HAL_ADC_ConfigChannel+0x32a>
 8008b70:	01c4      	lsls	r4, r0, #7
 8008b72:	d440      	bmi.n	8008bf6 <HAL_ADC_ConfigChannel+0x13e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008b74:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8008b78:	f000 8215 	beq.w	8008fa6 <HAL_ADC_ConfigChannel+0x4ee>
 8008b7c:	4ca8      	ldr	r4, [pc, #672]	; (8008e20 <HAL_ADC_ConfigChannel+0x368>)
 8008b7e:	49a9      	ldr	r1, [pc, #676]	; (8008e24 <HAL_ADC_ConfigChannel+0x36c>)
 8008b80:	48a9      	ldr	r0, [pc, #676]	; (8008e28 <HAL_ADC_ConfigChannel+0x370>)
 8008b82:	42a2      	cmp	r2, r4
 8008b84:	bf18      	it	ne
 8008b86:	4601      	movne	r1, r0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8008b88:	688a      	ldr	r2, [r1, #8]
 8008b8a:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8008b8e:	432a      	orrs	r2, r5
 8008b90:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008b94:	2000      	movs	r0, #0
 8008b96:	608a      	str	r2, [r1, #8]
}
 8008b98:	e003      	b.n	8008ba2 <HAL_ADC_ConfigChannel+0xea>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008b9a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008b9c:	f042 0220 	orr.w	r2, r2, #32
 8008ba0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8008ba8:	b003      	add	sp, #12
 8008baa:	bdf0      	pop	{r4, r5, r6, r7, pc}
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8008bac:	0201      	lsls	r1, r0, #8
 8008bae:	d422      	bmi.n	8008bf6 <HAL_ADC_ConfigChannel+0x13e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008bb0:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8008bb4:	f000 8113 	beq.w	8008dde <HAL_ADC_ConfigChannel+0x326>
 8008bb8:	499f      	ldr	r1, [pc, #636]	; (8008e38 <HAL_ADC_ConfigChannel+0x380>)
 8008bba:	428a      	cmp	r2, r1
 8008bbc:	d11b      	bne.n	8008bf6 <HAL_ADC_ConfigChannel+0x13e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008bbe:	489a      	ldr	r0, [pc, #616]	; (8008e28 <HAL_ADC_ConfigChannel+0x370>)
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008bc0:	4a9e      	ldr	r2, [pc, #632]	; (8008e3c <HAL_ADC_ConfigChannel+0x384>)
 8008bc2:	4c9f      	ldr	r4, [pc, #636]	; (8008e40 <HAL_ADC_ConfigChannel+0x388>)
 8008bc4:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8008bc6:	6881      	ldr	r1, [r0, #8]
 8008bc8:	0992      	lsrs	r2, r2, #6
 8008bca:	fba4 4202 	umull	r4, r2, r4, r2
 8008bce:	0992      	lsrs	r2, r2, #6
 8008bd0:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8008bd4:	3201      	adds	r2, #1
 8008bd6:	4329      	orrs	r1, r5
 8008bd8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8008bdc:	0092      	lsls	r2, r2, #2
 8008bde:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8008be2:	6081      	str	r1, [r0, #8]
 8008be4:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8008be6:	9a01      	ldr	r2, [sp, #4]
 8008be8:	b12a      	cbz	r2, 8008bf6 <HAL_ADC_ConfigChannel+0x13e>
            wait_loop_index--;
 8008bea:	9a01      	ldr	r2, [sp, #4]
 8008bec:	3a01      	subs	r2, #1
 8008bee:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8008bf0:	9a01      	ldr	r2, [sp, #4]
 8008bf2:	2a00      	cmp	r2, #0
 8008bf4:	d1f9      	bne.n	8008bea <HAL_ADC_ConfigChannel+0x132>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008bf6:	2000      	movs	r0, #0
 8008bf8:	e7d3      	b.n	8008ba2 <HAL_ADC_ConfigChannel+0xea>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8008bfa:	6890      	ldr	r0, [r2, #8]
 8008bfc:	0700      	lsls	r0, r0, #28
 8008bfe:	d47e      	bmi.n	8008cfe <HAL_ADC_ConfigChannel+0x246>
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8008c00:	6888      	ldr	r0, [r1, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8008c02:	680d      	ldr	r5, [r1, #0]
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8008c04:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8008c08:	f000 8120 	beq.w	8008e4c <HAL_ADC_ConfigChannel+0x394>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8008c0c:	0dee      	lsrs	r6, r5, #23
 8008c0e:	f102 0c14 	add.w	ip, r2, #20
 8008c12:	f006 0604 	and.w	r6, r6, #4
  MODIFY_REG(*preg,
 8008c16:	f3c5 5504 	ubfx	r5, r5, #20, #5
 8008c1a:	f85c 4006 	ldr.w	r4, [ip, r6]
 8008c1e:	2707      	movs	r7, #7
 8008c20:	40a8      	lsls	r0, r5
 8008c22:	fa07 f505 	lsl.w	r5, r7, r5
 8008c26:	ea24 0405 	bic.w	r4, r4, r5
 8008c2a:	4320      	orrs	r0, r4
 8008c2c:	f84c 0006 	str.w	r0, [ip, r6]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8008c30:	6950      	ldr	r0, [r2, #20]
 8008c32:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8008c36:	6150      	str	r0, [r2, #20]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8008c38:	e9d1 5604 	ldrd	r5, r6, [r1, #16]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8008c3c:	2d04      	cmp	r5, #4
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8008c3e:	68d0      	ldr	r0, [r2, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8008c40:	d02d      	beq.n	8008c9e <HAL_ADC_ConfigChannel+0x1e6>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008c42:	f102 0460 	add.w	r4, r2, #96	; 0x60
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8008c46:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 8008c4a:	0040      	lsls	r0, r0, #1
  MODIFY_REG(*preg,
 8008c4c:	f854 c025 	ldr.w	ip, [r4, r5, lsl #2]
 8008c50:	4f7c      	ldr	r7, [pc, #496]	; (8008e44 <HAL_ADC_ConfigChannel+0x38c>)
 8008c52:	4086      	lsls	r6, r0
 8008c54:	6808      	ldr	r0, [r1, #0]
 8008c56:	ea0c 0707 	and.w	r7, ip, r7
 8008c5a:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8008c5e:	4338      	orrs	r0, r7
 8008c60:	4330      	orrs	r0, r6
 8008c62:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8008c66:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008c6a:	690d      	ldr	r5, [r1, #16]
  MODIFY_REG(*preg,
 8008c6c:	698e      	ldr	r6, [r1, #24]
 8008c6e:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 8008c72:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
 8008c76:	4330      	orrs	r0, r6
 8008c78:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008c7c:	690e      	ldr	r6, [r1, #16]
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8008c7e:	7f0d      	ldrb	r5, [r1, #28]
  MODIFY_REG(*preg,
 8008c80:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 8008c84:	f1a5 0501 	sub.w	r5, r5, #1
 8008c88:	fab5 f585 	clz	r5, r5
 8008c8c:	096d      	lsrs	r5, r5, #5
 8008c8e:	f020 7000 	bic.w	r0, r0, #33554432	; 0x2000000
 8008c92:	ea40 6045 	orr.w	r0, r0, r5, lsl #25
 8008c96:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
 8008c9a:	6808      	ldr	r0, [r1, #0]
}
 8008c9c:	e73c      	b.n	8008b18 <HAL_ADC_ConfigChannel+0x60>
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008c9e:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8008ca0:	6e14      	ldr	r4, [r2, #96]	; 0x60
 8008ca2:	6e14      	ldr	r4, [r2, #96]	; 0x60
 8008ca4:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8008ca8:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008cac:	2d00      	cmp	r5, #0
 8008cae:	f040 80df 	bne.w	8008e70 <HAL_ADC_ConfigChannel+0x3b8>
 8008cb2:	f3c0 6584 	ubfx	r5, r0, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8008cb6:	42ac      	cmp	r4, r5
 8008cb8:	f000 813d 	beq.w	8008f36 <HAL_ADC_ConfigChannel+0x47e>
 8008cbc:	6e54      	ldr	r4, [r2, #100]	; 0x64
 8008cbe:	6e56      	ldr	r6, [r2, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008cc0:	f102 0460 	add.w	r4, r2, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8008cc4:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8008cc8:	f102 0764 	add.w	r7, r2, #100	; 0x64
 8008ccc:	42ae      	cmp	r6, r5
 8008cce:	f000 8158 	beq.w	8008f82 <HAL_ADC_ConfigChannel+0x4ca>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8008cd2:	68a6      	ldr	r6, [r4, #8]
 8008cd4:	68a6      	ldr	r6, [r4, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008cd6:	f104 0708 	add.w	r7, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8008cda:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8008cde:	42ae      	cmp	r6, r5
 8008ce0:	f000 813d 	beq.w	8008f5e <HAL_ADC_ConfigChannel+0x4a6>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8008ce4:	68e6      	ldr	r6, [r4, #12]
 8008ce6:	68e6      	ldr	r6, [r4, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008ce8:	f104 070c 	add.w	r7, r4, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8008cec:	f3c6 6484 	ubfx	r4, r6, #26, #5
 8008cf0:	42a5      	cmp	r5, r4
 8008cf2:	f47f af11 	bne.w	8008b18 <HAL_ADC_ConfigChannel+0x60>
  MODIFY_REG(*preg,
 8008cf6:	6838      	ldr	r0, [r7, #0]
 8008cf8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8008cfc:	6038      	str	r0, [r7, #0]
 8008cfe:	6808      	ldr	r0, [r1, #0]
}
 8008d00:	e70a      	b.n	8008b18 <HAL_ADC_ConfigChannel+0x60>
    SET_BIT(ADCx->DIFSEL,
 8008d02:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 8008d06:	f3c0 0512 	ubfx	r5, r0, #0, #19
 8008d0a:	432c      	orrs	r4, r5
 8008d0c:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008d10:	2d00      	cmp	r5, #0
 8008d12:	d053      	beq.n	8008dbc <HAL_ADC_ConfigChannel+0x304>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d14:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8008d18:	2c00      	cmp	r4, #0
 8008d1a:	f000 80e8 	beq.w	8008eee <HAL_ADC_ConfigChannel+0x436>
  return __builtin_clz(value);
 8008d1e:	fab4 f484 	clz	r4, r4
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008d22:	3401      	adds	r4, #1
 8008d24:	f004 041f 	and.w	r4, r4, #31
 8008d28:	2c09      	cmp	r4, #9
 8008d2a:	f240 80e0 	bls.w	8008eee <HAL_ADC_ConfigChannel+0x436>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d2e:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8008d32:	2c00      	cmp	r4, #0
 8008d34:	f000 813d 	beq.w	8008fb2 <HAL_ADC_ConfigChannel+0x4fa>
  return __builtin_clz(value);
 8008d38:	fab4 f484 	clz	r4, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008d3c:	3401      	adds	r4, #1
 8008d3e:	06a4      	lsls	r4, r4, #26
 8008d40:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d44:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8008d48:	2d00      	cmp	r5, #0
 8008d4a:	f000 8130 	beq.w	8008fae <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8008d4e:	fab5 f585 	clz	r5, r5
 8008d52:	3501      	adds	r5, #1
 8008d54:	f005 051f 	and.w	r5, r5, #31
 8008d58:	2601      	movs	r6, #1
 8008d5a:	fa06 f505 	lsl.w	r5, r6, r5
 8008d5e:	432c      	orrs	r4, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d60:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8008d64:	2800      	cmp	r0, #0
 8008d66:	f000 8120 	beq.w	8008faa <HAL_ADC_ConfigChannel+0x4f2>
  return __builtin_clz(value);
 8008d6a:	fab0 f080 	clz	r0, r0
 8008d6e:	1c45      	adds	r5, r0, #1
 8008d70:	f005 051f 	and.w	r5, r5, #31
 8008d74:	2003      	movs	r0, #3
 8008d76:	f06f 061d 	mvn.w	r6, #29
 8008d7a:	fb10 6005 	smlabb	r0, r0, r5, r6
 8008d7e:	0500      	lsls	r0, r0, #20
 8008d80:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008d84:	4320      	orrs	r0, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8008d86:	0dc5      	lsrs	r5, r0, #23
  MODIFY_REG(*preg,
 8008d88:	688c      	ldr	r4, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8008d8a:	f005 0504 	and.w	r5, r5, #4
 8008d8e:	f102 0614 	add.w	r6, r2, #20
  MODIFY_REG(*preg,
 8008d92:	f3c0 5004 	ubfx	r0, r0, #20, #5
 8008d96:	fa04 fc00 	lsl.w	ip, r4, r0
 8008d9a:	f04f 0e07 	mov.w	lr, #7
 8008d9e:	5974      	ldr	r4, [r6, r5]
 8008da0:	fa0e f000 	lsl.w	r0, lr, r0
 8008da4:	ea24 0000 	bic.w	r0, r4, r0
 8008da8:	ea40 000c 	orr.w	r0, r0, ip
 8008dac:	5170      	str	r0, [r6, r5]
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8008dae:	680c      	ldr	r4, [r1, #0]
}
 8008db0:	e6c4      	b.n	8008b3c <HAL_ADC_ConfigChannel+0x84>
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008db2:	491c      	ldr	r1, [pc, #112]	; (8008e24 <HAL_ADC_ConfigChannel+0x36c>)
 8008db4:	e6cf      	b.n	8008b56 <HAL_ADC_ConfigChannel+0x9e>
  __HAL_LOCK(hadc);
 8008db6:	2002      	movs	r0, #2
}
 8008db8:	b003      	add	sp, #12
 8008dba:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008dbc:	0e80      	lsrs	r0, r0, #26
 8008dbe:	3001      	adds	r0, #1
 8008dc0:	f000 051f 	and.w	r5, r0, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008dc4:	2d09      	cmp	r5, #9
 8008dc6:	f200 8084 	bhi.w	8008ed2 <HAL_ADC_ConfigChannel+0x41a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008dca:	0684      	lsls	r4, r0, #26
 8008dcc:	2001      	movs	r0, #1
 8008dce:	40a8      	lsls	r0, r5
 8008dd0:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8008dd4:	4304      	orrs	r4, r0
 8008dd6:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 8008dda:	0500      	lsls	r0, r0, #20
 8008ddc:	e7d2      	b.n	8008d84 <HAL_ADC_ConfigChannel+0x2cc>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008dde:	4811      	ldr	r0, [pc, #68]	; (8008e24 <HAL_ADC_ConfigChannel+0x36c>)
 8008de0:	e6ee      	b.n	8008bc0 <HAL_ADC_ConfigChannel+0x108>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8008de2:	4919      	ldr	r1, [pc, #100]	; (8008e48 <HAL_ADC_ConfigChannel+0x390>)
 8008de4:	428c      	cmp	r4, r1
 8008de6:	f47f af06 	bne.w	8008bf6 <HAL_ADC_ConfigChannel+0x13e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8008dea:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 8008dee:	f47f af02 	bne.w	8008bf6 <HAL_ADC_ConfigChannel+0x13e>
        if (ADC_VREFINT_INSTANCE(hadc))
 8008df2:	490b      	ldr	r1, [pc, #44]	; (8008e20 <HAL_ADC_ConfigChannel+0x368>)
 8008df4:	428a      	cmp	r2, r1
 8008df6:	f43f aefe 	beq.w	8008bf6 <HAL_ADC_ConfigChannel+0x13e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008dfa:	4c0b      	ldr	r4, [pc, #44]	; (8008e28 <HAL_ADC_ConfigChannel+0x370>)
 8008dfc:	f501 7100 	add.w	r1, r1, #512	; 0x200
 8008e00:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8008e04:	bf18      	it	ne
 8008e06:	4621      	movne	r1, r4
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8008e08:	688a      	ldr	r2, [r1, #8]
 8008e0a:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8008e0e:	432a      	orrs	r2, r5
 8008e10:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8008e14:	608a      	str	r2, [r1, #8]
}
 8008e16:	e6c4      	b.n	8008ba2 <HAL_ADC_ConfigChannel+0xea>
 8008e18:	407f0000 	.word	0x407f0000
 8008e1c:	80080000 	.word	0x80080000
 8008e20:	50000100 	.word	0x50000100
 8008e24:	50000300 	.word	0x50000300
 8008e28:	50000700 	.word	0x50000700
 8008e2c:	c3210000 	.word	0xc3210000
 8008e30:	90c00010 	.word	0x90c00010
 8008e34:	c7520000 	.word	0xc7520000
 8008e38:	50000600 	.word	0x50000600
 8008e3c:	20001b04 	.word	0x20001b04
 8008e40:	053e2d63 	.word	0x053e2d63
 8008e44:	03fff000 	.word	0x03fff000
 8008e48:	cb840000 	.word	0xcb840000
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8008e4c:	0de8      	lsrs	r0, r5, #23
 8008e4e:	f000 0004 	and.w	r0, r0, #4
 8008e52:	f102 0414 	add.w	r4, r2, #20
  MODIFY_REG(*preg,
 8008e56:	f3c5 5504 	ubfx	r5, r5, #20, #5
 8008e5a:	2607      	movs	r6, #7
 8008e5c:	40ae      	lsls	r6, r5
 8008e5e:	5825      	ldr	r5, [r4, r0]
 8008e60:	ea25 0506 	bic.w	r5, r5, r6
 8008e64:	5025      	str	r5, [r4, r0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8008e66:	6950      	ldr	r0, [r2, #20]
 8008e68:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8008e6c:	6150      	str	r0, [r2, #20]
}
 8008e6e:	e6e3      	b.n	8008c38 <HAL_ADC_ConfigChannel+0x180>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e70:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8008e74:	b11d      	cbz	r5, 8008e7e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8008e76:	fab5 f585 	clz	r5, r5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8008e7a:	42ac      	cmp	r4, r5
 8008e7c:	d05b      	beq.n	8008f36 <HAL_ADC_ConfigChannel+0x47e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8008e7e:	6e54      	ldr	r4, [r2, #100]	; 0x64
 8008e80:	6e56      	ldr	r6, [r2, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008e82:	f102 0460 	add.w	r4, r2, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8008e86:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8008e8a:	f102 0764 	add.w	r7, r2, #100	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e8e:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8008e92:	b11d      	cbz	r5, 8008e9c <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 8008e94:	fab5 f585 	clz	r5, r5
 8008e98:	42ae      	cmp	r6, r5
 8008e9a:	d072      	beq.n	8008f82 <HAL_ADC_ConfigChannel+0x4ca>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8008e9c:	68a5      	ldr	r5, [r4, #8]
 8008e9e:	68a6      	ldr	r6, [r4, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008ea0:	f104 0708 	add.w	r7, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8008ea4:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ea8:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8008eac:	b11d      	cbz	r5, 8008eb6 <HAL_ADC_ConfigChannel+0x3fe>
  return __builtin_clz(value);
 8008eae:	fab5 f585 	clz	r5, r5
 8008eb2:	42ae      	cmp	r6, r5
 8008eb4:	d053      	beq.n	8008f5e <HAL_ADC_ConfigChannel+0x4a6>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8008eb6:	68e5      	ldr	r5, [r4, #12]
 8008eb8:	68e5      	ldr	r5, [r4, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008eba:	f104 070c 	add.w	r7, r4, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8008ebe:	f3c5 6484 	ubfx	r4, r5, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ec2:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8008ec6:	2d00      	cmp	r5, #0
 8008ec8:	f43f ae26 	beq.w	8008b18 <HAL_ADC_ConfigChannel+0x60>
  return __builtin_clz(value);
 8008ecc:	fab5 f585 	clz	r5, r5
 8008ed0:	e70e      	b.n	8008cf0 <HAL_ADC_ConfigChannel+0x238>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008ed2:	0684      	lsls	r4, r0, #26
 8008ed4:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 8008ed8:	381e      	subs	r0, #30
 8008eda:	2601      	movs	r6, #1
 8008edc:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8008ee0:	0500      	lsls	r0, r0, #20
 8008ee2:	fa06 f505 	lsl.w	r5, r6, r5
 8008ee6:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 8008eea:	432c      	orrs	r4, r5
 8008eec:	e74a      	b.n	8008d84 <HAL_ADC_ConfigChannel+0x2cc>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008eee:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8008ef2:	2c00      	cmp	r4, #0
 8008ef4:	d065      	beq.n	8008fc2 <HAL_ADC_ConfigChannel+0x50a>
  return __builtin_clz(value);
 8008ef6:	fab4 f484 	clz	r4, r4
 8008efa:	3401      	adds	r4, #1
 8008efc:	06a4      	lsls	r4, r4, #26
 8008efe:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f02:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8008f06:	2d00      	cmp	r5, #0
 8008f08:	d059      	beq.n	8008fbe <HAL_ADC_ConfigChannel+0x506>
  return __builtin_clz(value);
 8008f0a:	fab5 f585 	clz	r5, r5
 8008f0e:	3501      	adds	r5, #1
 8008f10:	f005 051f 	and.w	r5, r5, #31
 8008f14:	2601      	movs	r6, #1
 8008f16:	fa06 f505 	lsl.w	r5, r6, r5
 8008f1a:	432c      	orrs	r4, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f1c:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8008f20:	2800      	cmp	r0, #0
 8008f22:	d049      	beq.n	8008fb8 <HAL_ADC_ConfigChannel+0x500>
  return __builtin_clz(value);
 8008f24:	fab0 f080 	clz	r0, r0
 8008f28:	3001      	adds	r0, #1
 8008f2a:	f000 001f 	and.w	r0, r0, #31
 8008f2e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8008f32:	0500      	lsls	r0, r0, #20
 8008f34:	e726      	b.n	8008d84 <HAL_ADC_ConfigChannel+0x2cc>
  MODIFY_REG(*preg,
 8008f36:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8008f38:	4614      	mov	r4, r2
 8008f3a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8008f3e:	f844 0f60 	str.w	r0, [r4, #96]!
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8008f42:	6e50      	ldr	r0, [r2, #100]	; 0x64
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008f44:	6808      	ldr	r0, [r1, #0]
 8008f46:	6e56      	ldr	r6, [r2, #100]	; 0x64
 8008f48:	f3c0 0512 	ubfx	r5, r0, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008f4c:	f102 0764 	add.w	r7, r2, #100	; 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8008f50:	f3c6 6684 	ubfx	r6, r6, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008f54:	2d00      	cmp	r5, #0
 8008f56:	d19a      	bne.n	8008e8e <HAL_ADC_ConfigChannel+0x3d6>
 8008f58:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8008f5c:	e6b6      	b.n	8008ccc <HAL_ADC_ConfigChannel+0x214>
  MODIFY_REG(*preg,
 8008f5e:	6838      	ldr	r0, [r7, #0]
 8008f60:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8008f64:	6038      	str	r0, [r7, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8008f66:	68e0      	ldr	r0, [r4, #12]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008f68:	6808      	ldr	r0, [r1, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008f6a:	f104 070c 	add.w	r7, r4, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8008f6e:	68e4      	ldr	r4, [r4, #12]
 8008f70:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8008f74:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008f78:	2d00      	cmp	r5, #0
 8008f7a:	d1a2      	bne.n	8008ec2 <HAL_ADC_ConfigChannel+0x40a>
 8008f7c:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8008f80:	e6b6      	b.n	8008cf0 <HAL_ADC_ConfigChannel+0x238>
  MODIFY_REG(*preg,
 8008f82:	6838      	ldr	r0, [r7, #0]
 8008f84:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8008f88:	6038      	str	r0, [r7, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8008f8a:	68a0      	ldr	r0, [r4, #8]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008f8c:	6808      	ldr	r0, [r1, #0]
 8008f8e:	68a6      	ldr	r6, [r4, #8]
 8008f90:	f3c0 0512 	ubfx	r5, r0, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008f94:	f104 0708 	add.w	r7, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8008f98:	f3c6 6684 	ubfx	r6, r6, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008f9c:	2d00      	cmp	r5, #0
 8008f9e:	d183      	bne.n	8008ea8 <HAL_ADC_ConfigChannel+0x3f0>
 8008fa0:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8008fa4:	e69b      	b.n	8008cde <HAL_ADC_ConfigChannel+0x226>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008fa6:	4908      	ldr	r1, [pc, #32]	; (8008fc8 <HAL_ADC_ConfigChannel+0x510>)
 8008fa8:	e5ee      	b.n	8008b88 <HAL_ADC_ConfigChannel+0xd0>
 8008faa:	4808      	ldr	r0, [pc, #32]	; (8008fcc <HAL_ADC_ConfigChannel+0x514>)
 8008fac:	e6ea      	b.n	8008d84 <HAL_ADC_ConfigChannel+0x2cc>
 8008fae:	2502      	movs	r5, #2
 8008fb0:	e6d5      	b.n	8008d5e <HAL_ADC_ConfigChannel+0x2a6>
 8008fb2:	f04f 6480 	mov.w	r4, #67108864	; 0x4000000
 8008fb6:	e6c5      	b.n	8008d44 <HAL_ADC_ConfigChannel+0x28c>
 8008fb8:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8008fbc:	e6e2      	b.n	8008d84 <HAL_ADC_ConfigChannel+0x2cc>
 8008fbe:	2502      	movs	r5, #2
 8008fc0:	e7ab      	b.n	8008f1a <HAL_ADC_ConfigChannel+0x462>
 8008fc2:	f04f 6480 	mov.w	r4, #67108864	; 0x4000000
 8008fc6:	e79c      	b.n	8008f02 <HAL_ADC_ConfigChannel+0x44a>
 8008fc8:	50000300 	.word	0x50000300
 8008fcc:	fe500000 	.word	0xfe500000

08008fd0 <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8008fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008fd2:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
{
 8008fd6:	4602      	mov	r2, r0
 8008fd8:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 8008fda:	2000      	movs	r0, #0
  __HAL_LOCK(hadc);
 8008fdc:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0;
 8008fde:	9001      	str	r0, [sp, #4]
  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8008fe0:	6950      	ldr	r0, [r2, #20]
  __HAL_LOCK(hadc);
 8008fe2:	f000 8178 	beq.w	80092d6 <HAL_ADCEx_InjectedConfigChannel+0x306>
 8008fe6:	2301      	movs	r3, #1
 8008fe8:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8008fec:	b1e8      	cbz	r0, 800902a <HAL_ADCEx_InjectedConfigChannel+0x5a>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 8008fee:	6a0b      	ldr	r3, [r1, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8008ff0:	2b01      	cmp	r3, #1
 8008ff2:	d01a      	beq.n	800902a <HAL_ADCEx_InjectedConfigChannel+0x5a>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8008ff4:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8008ff6:	2800      	cmp	r0, #0
 8008ff8:	f040 8129 	bne.w	800924e <HAL_ADCEx_InjectedConfigChannel+0x27e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8008ffc:	6a88      	ldr	r0, [r1, #40]	; 0x28
 8008ffe:	2800      	cmp	r0, #0
 8009000:	f000 823f 	beq.w	8009482 <HAL_ADCEx_InjectedConfigChannel+0x4b2>
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8009004:	1e5e      	subs	r6, r3, #1
 8009006:	6acc      	ldr	r4, [r1, #44]	; 0x2c
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8009008:	f000 007c 	and.w	r0, r0, #124	; 0x7c
 800900c:	4330      	orrs	r0, r6
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 800900e:	ea40 0304 	orr.w	r3, r0, r4
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8009012:	e9d1 4500 	ldrd	r4, r5, [r1]
 8009016:	f005 051f 	and.w	r5, r5, #31
 800901a:	f3c4 6084 	ubfx	r0, r4, #26, #5
 800901e:	40a8      	lsls	r0, r5
    hadc->InjectionConfig.ChannelCount--;

    /* 3. tmp_JSQR_ContextQueueBeingBuilt is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8009020:	4318      	orrs	r0, r3
    hadc->InjectionConfig.ChannelCount--;
 8009022:	6696      	str	r6, [r2, #104]	; 0x68

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8009024:	6813      	ldr	r3, [r2, #0]
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8009026:	6650      	str	r0, [r2, #100]	; 0x64
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8009028:	e005      	b.n	8009036 <HAL_ADCEx_InjectedConfigChannel+0x66>
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 800902a:	684b      	ldr	r3, [r1, #4]
 800902c:	2b09      	cmp	r3, #9
 800902e:	f000 80fa 	beq.w	8009226 <HAL_ADCEx_InjectedConfigChannel+0x256>
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8009032:	680c      	ldr	r4, [r1, #0]
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8009034:	6813      	ldr	r3, [r2, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8009036:	6898      	ldr	r0, [r3, #8]
 8009038:	0707      	lsls	r7, r0, #28
 800903a:	d410      	bmi.n	800905e <HAL_ADCEx_InjectedConfigChannel+0x8e>
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 800903c:	f891 0025 	ldrb.w	r0, [r1, #37]	; 0x25
 8009040:	2800      	cmp	r0, #0
 8009042:	f040 80e7 	bne.w	8009214 <HAL_ADCEx_InjectedConfigChannel+0x244>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8009046:	f891 0024 	ldrb.w	r0, [r1, #36]	; 0x24
 800904a:	68dd      	ldr	r5, [r3, #12]
 800904c:	f891 6026 	ldrb.w	r6, [r1, #38]	; 0x26
 8009050:	0500      	lsls	r0, r0, #20
 8009052:	f425 1540 	bic.w	r5, r5, #3145728	; 0x300000
 8009056:	ea40 5046 	orr.w	r0, r0, r6, lsl #21
 800905a:	4328      	orrs	r0, r5
 800905c:	60d8      	str	r0, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800905e:	6898      	ldr	r0, [r3, #8]
 8009060:	f010 0004 	ands.w	r0, r0, #4
 8009064:	d06a      	beq.n	800913c <HAL_ADCEx_InjectedConfigChannel+0x16c>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8009066:	6898      	ldr	r0, [r3, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009068:	2000      	movs	r0, #0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800906a:	689d      	ldr	r5, [r3, #8]
 800906c:	07ee      	lsls	r6, r5, #31
 800906e:	d40c      	bmi.n	800908a <HAL_ADCEx_InjectedConfigChannel+0xba>
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8009070:	4da9      	ldr	r5, [pc, #676]	; (8009318 <HAL_ADCEx_InjectedConfigChannel+0x348>)
 8009072:	68ce      	ldr	r6, [r1, #12]
 8009074:	42ae      	cmp	r6, r5
 8009076:	f000 810f 	beq.w	8009298 <HAL_ADCEx_InjectedConfigChannel+0x2c8>
    CLEAR_BIT(ADCx->DIFSEL,
 800907a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800907e:	f3c4 0512 	ubfx	r5, r4, #0, #19
 8009082:	ea21 0105 	bic.w	r1, r1, r5
 8009086:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 800908a:	49a4      	ldr	r1, [pc, #656]	; (800931c <HAL_ADCEx_InjectedConfigChannel+0x34c>)
 800908c:	420c      	tst	r4, r1
 800908e:	d029      	beq.n	80090e4 <HAL_ADCEx_InjectedConfigChannel+0x114>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8009090:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009094:	f000 811d 	beq.w	80092d2 <HAL_ADCEx_InjectedConfigChannel+0x302>
 8009098:	4ea1      	ldr	r6, [pc, #644]	; (8009320 <HAL_ADCEx_InjectedConfigChannel+0x350>)
 800909a:	49a2      	ldr	r1, [pc, #648]	; (8009324 <HAL_ADCEx_InjectedConfigChannel+0x354>)
 800909c:	4da2      	ldr	r5, [pc, #648]	; (8009328 <HAL_ADCEx_InjectedConfigChannel+0x358>)
 800909e:	42b3      	cmp	r3, r6
 80090a0:	bf18      	it	ne
 80090a2:	4629      	movne	r1, r5

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 80090a4:	4da1      	ldr	r5, [pc, #644]	; (800932c <HAL_ADCEx_InjectedConfigChannel+0x35c>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80090a6:	6889      	ldr	r1, [r1, #8]
 80090a8:	42ac      	cmp	r4, r5
 80090aa:	f001 76e0 	and.w	r6, r1, #29360128	; 0x1c00000
 80090ae:	d01e      	beq.n	80090ee <HAL_ADCEx_InjectedConfigChannel+0x11e>
         || (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80090b0:	4d9f      	ldr	r5, [pc, #636]	; (8009330 <HAL_ADCEx_InjectedConfigChannel+0x360>)
 80090b2:	42ac      	cmp	r4, r5
 80090b4:	d01b      	beq.n	80090ee <HAL_ADCEx_InjectedConfigChannel+0x11e>
        {
          wait_loop_index--;
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 80090b6:	4d9f      	ldr	r5, [pc, #636]	; (8009334 <HAL_ADCEx_InjectedConfigChannel+0x364>)
 80090b8:	42ac      	cmp	r4, r5
 80090ba:	f040 8113 	bne.w	80092e4 <HAL_ADCEx_InjectedConfigChannel+0x314>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80090be:	01cd      	lsls	r5, r1, #7
 80090c0:	d410      	bmi.n	80090e4 <HAL_ADCEx_InjectedConfigChannel+0x114>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80090c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80090c6:	f000 8249 	beq.w	800955c <HAL_ADCEx_InjectedConfigChannel+0x58c>
 80090ca:	4d95      	ldr	r5, [pc, #596]	; (8009320 <HAL_ADCEx_InjectedConfigChannel+0x350>)
 80090cc:	4995      	ldr	r1, [pc, #596]	; (8009324 <HAL_ADCEx_InjectedConfigChannel+0x354>)
 80090ce:	4c96      	ldr	r4, [pc, #600]	; (8009328 <HAL_ADCEx_InjectedConfigChannel+0x358>)
 80090d0:	42ab      	cmp	r3, r5
 80090d2:	bf18      	it	ne
 80090d4:	4621      	movne	r1, r4
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80090d6:	688b      	ldr	r3, [r1, #8]
 80090d8:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 80090dc:	4333      	orrs	r3, r6
 80090de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80090e2:	608b      	str	r3, [r1, #8]
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80090e4:	2300      	movs	r3, #0
 80090e6:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 80090ea:	b003      	add	sp, #12
 80090ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80090ee:	0209      	lsls	r1, r1, #8
 80090f0:	d4f8      	bmi.n	80090e4 <HAL_ADCEx_InjectedConfigChannel+0x114>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80090f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80090f6:	f000 8233 	beq.w	8009560 <HAL_ADCEx_InjectedConfigChannel+0x590>
 80090fa:	498f      	ldr	r1, [pc, #572]	; (8009338 <HAL_ADCEx_InjectedConfigChannel+0x368>)
 80090fc:	428b      	cmp	r3, r1
 80090fe:	d1f1      	bne.n	80090e4 <HAL_ADCEx_InjectedConfigChannel+0x114>
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009100:	4c89      	ldr	r4, [pc, #548]	; (8009328 <HAL_ADCEx_InjectedConfigChannel+0x358>)
 8009102:	68a1      	ldr	r1, [r4, #8]
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8009104:	4b8d      	ldr	r3, [pc, #564]	; (800933c <HAL_ADCEx_InjectedConfigChannel+0x36c>)
 8009106:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 800910a:	4331      	orrs	r1, r6
 800910c:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	60a1      	str	r1, [r4, #8]
 8009114:	498a      	ldr	r1, [pc, #552]	; (8009340 <HAL_ADCEx_InjectedConfigChannel+0x370>)
 8009116:	099b      	lsrs	r3, r3, #6
 8009118:	fba1 1303 	umull	r1, r3, r1, r3
 800911c:	099b      	lsrs	r3, r3, #6
 800911e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8009122:	009b      	lsls	r3, r3, #2
 8009124:	3318      	adds	r3, #24
 8009126:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 8009128:	9b01      	ldr	r3, [sp, #4]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d0da      	beq.n	80090e4 <HAL_ADCEx_InjectedConfigChannel+0x114>
          wait_loop_index--;
 800912e:	9b01      	ldr	r3, [sp, #4]
 8009130:	3b01      	subs	r3, #1
 8009132:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 8009134:	9b01      	ldr	r3, [sp, #4]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d1f9      	bne.n	800912e <HAL_ADCEx_InjectedConfigChannel+0x15e>
 800913a:	e7d3      	b.n	80090e4 <HAL_ADCEx_InjectedConfigChannel+0x114>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800913c:	689d      	ldr	r5, [r3, #8]
 800913e:	f015 0508 	ands.w	r5, r5, #8
 8009142:	d192      	bne.n	800906a <HAL_ADCEx_InjectedConfigChannel+0x9a>
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8009144:	6a88      	ldr	r0, [r1, #40]	; 0x28
 8009146:	2800      	cmp	r0, #0
 8009148:	f040 8097 	bne.w	800927a <HAL_ADCEx_InjectedConfigChannel+0x2aa>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 800914c:	f891 0025 	ldrb.w	r0, [r1, #37]	; 0x25
 8009150:	2801      	cmp	r0, #1
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8009152:	68d8      	ldr	r0, [r3, #12]
 8009154:	bf0c      	ite	eq
 8009156:	f040 7000 	orreq.w	r0, r0, #33554432	; 0x2000000
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 800915a:	f020 7000 	bicne.w	r0, r0, #33554432	; 0x2000000
 800915e:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009160:	2000      	movs	r0, #0
    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 8009162:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 8009166:	2d01      	cmp	r5, #1
 8009168:	f000 8149 	beq.w	80093fe <HAL_ADCEx_InjectedConfigChannel+0x42e>
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 800916c:	691d      	ldr	r5, [r3, #16]
 800916e:	f025 0502 	bic.w	r5, r5, #2
 8009172:	611d      	str	r5, [r3, #16]
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8009174:	688d      	ldr	r5, [r1, #8]
 8009176:	f1b5 4f00 	cmp.w	r5, #2147483648	; 0x80000000
 800917a:	f000 812e 	beq.w	80093da <HAL_ADCEx_InjectedConfigChannel+0x40a>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800917e:	0de6      	lsrs	r6, r4, #23
 8009180:	f006 0604 	and.w	r6, r6, #4
 8009184:	f103 0c14 	add.w	ip, r3, #20
  MODIFY_REG(*preg,
 8009188:	f3c4 5404 	ubfx	r4, r4, #20, #5
 800918c:	2707      	movs	r7, #7
 800918e:	40a5      	lsls	r5, r4
 8009190:	40a7      	lsls	r7, r4
 8009192:	f85c 4006 	ldr.w	r4, [ip, r6]
 8009196:	ea24 0407 	bic.w	r4, r4, r7
 800919a:	432c      	orrs	r4, r5
 800919c:	f84c 4006 	str.w	r4, [ip, r6]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80091a0:	695c      	ldr	r4, [r3, #20]
 80091a2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80091a6:	615c      	str	r4, [r3, #20]
    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 80091a8:	e9d1 6504 	ldrd	r6, r5, [r1, #16]
 80091ac:	2e04      	cmp	r6, #4
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 80091ae:	68dc      	ldr	r4, [r3, #12]
    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 80091b0:	f000 80ce 	beq.w	8009350 <HAL_ADCEx_InjectedConfigChannel+0x380>
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 80091b4:	f3c4 04c1 	ubfx	r4, r4, #3, #2
 80091b8:	0064      	lsls	r4, r4, #1
 80091ba:	fa05 fc04 	lsl.w	ip, r5, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80091be:	f103 0560 	add.w	r5, r3, #96	; 0x60
  MODIFY_REG(*preg,
 80091c2:	680c      	ldr	r4, [r1, #0]
 80091c4:	f855 e026 	ldr.w	lr, [r5, r6, lsl #2]
 80091c8:	4f5e      	ldr	r7, [pc, #376]	; (8009344 <HAL_ADCEx_InjectedConfigChannel+0x374>)
 80091ca:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 80091ce:	ea0e 0707 	and.w	r7, lr, r7
 80091d2:	433c      	orrs	r4, r7
 80091d4:	ea44 040c 	orr.w	r4, r4, ip
 80091d8:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 80091dc:	f845 4026 	str.w	r4, [r5, r6, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80091e0:	690f      	ldr	r7, [r1, #16]
  MODIFY_REG(*preg,
 80091e2:	698e      	ldr	r6, [r1, #24]
 80091e4:	f855 4027 	ldr.w	r4, [r5, r7, lsl #2]
 80091e8:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 80091ec:	4334      	orrs	r4, r6
 80091ee:	f845 4027 	str.w	r4, [r5, r7, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80091f2:	690f      	ldr	r7, [r1, #16]
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 80091f4:	7f0e      	ldrb	r6, [r1, #28]
  MODIFY_REG(*preg,
 80091f6:	f855 4027 	ldr.w	r4, [r5, r7, lsl #2]
 80091fa:	f1a6 0601 	sub.w	r6, r6, #1
 80091fe:	fab6 f686 	clz	r6, r6
 8009202:	0976      	lsrs	r6, r6, #5
 8009204:	f024 7400 	bic.w	r4, r4, #33554432	; 0x2000000
 8009208:	ea44 6446 	orr.w	r4, r4, r6, lsl #25
 800920c:	f845 4027 	str.w	r4, [r5, r7, lsl #2]
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 8009210:	680c      	ldr	r4, [r1, #0]
}
 8009212:	e72a      	b.n	800906a <HAL_ADCEx_InjectedConfigChannel+0x9a>
      MODIFY_REG(hadc->Instance->CFGR,
 8009214:	68d8      	ldr	r0, [r3, #12]
 8009216:	f891 5026 	ldrb.w	r5, [r1, #38]	; 0x26
 800921a:	f420 1040 	bic.w	r0, r0, #3145728	; 0x300000
 800921e:	ea40 5045 	orr.w	r0, r0, r5, lsl #21
 8009222:	60d8      	str	r0, [r3, #12]
 8009224:	e71b      	b.n	800905e <HAL_ADCEx_InjectedConfigChannel+0x8e>
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8009226:	6a8b      	ldr	r3, [r1, #40]	; 0x28
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8009228:	680c      	ldr	r4, [r1, #0]
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800922a:	2b00      	cmp	r3, #0
 800922c:	d056      	beq.n	80092dc <HAL_ADCEx_InjectedConfigChannel+0x30c>
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 800922e:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8009230:	f003 037c 	and.w	r3, r3, #124	; 0x7c
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8009234:	0c65      	lsrs	r5, r4, #17
 8009236:	f405 5578 	and.w	r5, r5, #15872	; 0x3e00
 800923a:	4303      	orrs	r3, r0
 800923c:	431d      	orrs	r5, r3
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 800923e:	6813      	ldr	r3, [r2, #0]
 8009240:	4e41      	ldr	r6, [pc, #260]	; (8009348 <HAL_ADCEx_InjectedConfigChannel+0x378>)
 8009242:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009244:	4030      	ands	r0, r6
 8009246:	4328      	orrs	r0, r5
 8009248:	64d8      	str	r0, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 800924a:	6655      	str	r5, [r2, #100]	; 0x64
 800924c:	e6f3      	b.n	8009036 <HAL_ADCEx_InjectedConfigChannel+0x66>
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 800924e:	680c      	ldr	r4, [r1, #0]
 8009250:	684b      	ldr	r3, [r1, #4]
 8009252:	f3c4 6584 	ubfx	r5, r4, #26, #5
 8009256:	f003 031f 	and.w	r3, r3, #31
 800925a:	409d      	lsls	r5, r3
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 800925c:	6e53      	ldr	r3, [r2, #100]	; 0x64
    hadc->InjectionConfig.ChannelCount--;
 800925e:	3801      	subs	r0, #1
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8009260:	431d      	orrs	r5, r3
    hadc->InjectionConfig.ChannelCount--;
 8009262:	6690      	str	r0, [r2, #104]	; 0x68
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8009264:	6813      	ldr	r3, [r2, #0]
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8009266:	6655      	str	r5, [r2, #100]	; 0x64
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8009268:	2800      	cmp	r0, #0
 800926a:	f47f aee4 	bne.w	8009036 <HAL_ADCEx_InjectedConfigChannel+0x66>
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 800926e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009270:	4e35      	ldr	r6, [pc, #212]	; (8009348 <HAL_ADCEx_InjectedConfigChannel+0x378>)
 8009272:	4030      	ands	r0, r6
 8009274:	4328      	orrs	r0, r5
 8009276:	64d8      	str	r0, [r3, #76]	; 0x4c
 8009278:	e6dd      	b.n	8009036 <HAL_ADCEx_InjectedConfigChannel+0x66>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 800927a:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
 800927c:	2800      	cmp	r0, #0
 800927e:	f43f af65 	beq.w	800914c <HAL_ADCEx_InjectedConfigChannel+0x17c>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8009282:	f891 0025 	ldrb.w	r0, [r1, #37]	; 0x25
 8009286:	2801      	cmp	r0, #1
 8009288:	f000 8163 	beq.w	8009552 <HAL_ADCEx_InjectedConfigChannel+0x582>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800928c:	4628      	mov	r0, r5
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 800928e:	68dd      	ldr	r5, [r3, #12]
 8009290:	f025 7500 	bic.w	r5, r5, #33554432	; 0x2000000
 8009294:	60dd      	str	r5, [r3, #12]
 8009296:	e764      	b.n	8009162 <HAL_ADCEx_InjectedConfigChannel+0x192>
    SET_BIT(ADCx->DIFSEL,
 8009298:	f8d3 50b0 	ldr.w	r5, [r3, #176]	; 0xb0
 800929c:	f3c4 0612 	ubfx	r6, r4, #0, #19
 80092a0:	4335      	orrs	r5, r6
 80092a2:	f8c3 50b0 	str.w	r5, [r3, #176]	; 0xb0
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 80092a6:	2e00      	cmp	r6, #0
 80092a8:	f040 80b4 	bne.w	8009414 <HAL_ADCEx_InjectedConfigChannel+0x444>
 80092ac:	0ea4      	lsrs	r4, r4, #26
 80092ae:	3401      	adds	r4, #1
 80092b0:	f004 0c1f 	and.w	ip, r4, #31
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80092b4:	f1bc 0f09 	cmp.w	ip, #9
 80092b8:	f200 80e6 	bhi.w	8009488 <HAL_ADCEx_InjectedConfigChannel+0x4b8>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 80092bc:	06a5      	lsls	r5, r4, #26
 80092be:	2401      	movs	r4, #1
 80092c0:	fa04 f40c 	lsl.w	r4, r4, ip
 80092c4:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 80092c8:	4325      	orrs	r5, r4
 80092ca:	eb0c 044c 	add.w	r4, ip, ip, lsl #1
 80092ce:	0524      	lsls	r4, r4, #20
 80092d0:	e0e7      	b.n	80094a2 <HAL_ADCEx_InjectedConfigChannel+0x4d2>
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80092d2:	4914      	ldr	r1, [pc, #80]	; (8009324 <HAL_ADCEx_InjectedConfigChannel+0x354>)
 80092d4:	e6e6      	b.n	80090a4 <HAL_ADCEx_InjectedConfigChannel+0xd4>
  __HAL_LOCK(hadc);
 80092d6:	2002      	movs	r0, #2
}
 80092d8:	b003      	add	sp, #12
 80092da:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 80092dc:	0c65      	lsrs	r5, r4, #17
 80092de:	f405 5578 	and.w	r5, r5, #15872	; 0x3e00
 80092e2:	e7ac      	b.n	800923e <HAL_ADCEx_InjectedConfigChannel+0x26e>
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 80092e4:	4d19      	ldr	r5, [pc, #100]	; (800934c <HAL_ADCEx_InjectedConfigChannel+0x37c>)
 80092e6:	42ac      	cmp	r4, r5
 80092e8:	f47f aefc 	bne.w	80090e4 <HAL_ADCEx_InjectedConfigChannel+0x114>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80092ec:	024c      	lsls	r4, r1, #9
 80092ee:	f53f aef9 	bmi.w	80090e4 <HAL_ADCEx_InjectedConfigChannel+0x114>
      if (ADC_VREFINT_INSTANCE(hadc))
 80092f2:	490b      	ldr	r1, [pc, #44]	; (8009320 <HAL_ADCEx_InjectedConfigChannel+0x350>)
 80092f4:	428b      	cmp	r3, r1
 80092f6:	f43f aef5 	beq.w	80090e4 <HAL_ADCEx_InjectedConfigChannel+0x114>
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80092fa:	4c0b      	ldr	r4, [pc, #44]	; (8009328 <HAL_ADCEx_InjectedConfigChannel+0x358>)
 80092fc:	f501 7100 	add.w	r1, r1, #512	; 0x200
 8009300:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009304:	bf18      	it	ne
 8009306:	4621      	movne	r1, r4
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8009308:	688b      	ldr	r3, [r1, #8]
 800930a:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 800930e:	4333      	orrs	r3, r6
 8009310:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009314:	608b      	str	r3, [r1, #8]
}
 8009316:	e6e5      	b.n	80090e4 <HAL_ADCEx_InjectedConfigChannel+0x114>
 8009318:	407f0000 	.word	0x407f0000
 800931c:	80080000 	.word	0x80080000
 8009320:	50000100 	.word	0x50000100
 8009324:	50000300 	.word	0x50000300
 8009328:	50000700 	.word	0x50000700
 800932c:	c3210000 	.word	0xc3210000
 8009330:	90c00010 	.word	0x90c00010
 8009334:	c7520000 	.word	0xc7520000
 8009338:	50000600 	.word	0x50000600
 800933c:	20001b04 	.word	0x20001b04
 8009340:	053e2d63 	.word	0x053e2d63
 8009344:	03fff000 	.word	0x03fff000
 8009348:	04104000 	.word	0x04104000
 800934c:	cb840000 	.word	0xcb840000
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8009350:	6e1c      	ldr	r4, [r3, #96]	; 0x60
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8009352:	680c      	ldr	r4, [r1, #0]
 8009354:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 8009356:	f3c4 0612 	ubfx	r6, r4, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800935a:	f3c5 6584 	ubfx	r5, r5, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 800935e:	2e00      	cmp	r6, #0
 8009360:	f000 80b7 	beq.w	80094d2 <HAL_ADCEx_InjectedConfigChannel+0x502>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009364:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 8009368:	b126      	cbz	r6, 8009374 <HAL_ADCEx_InjectedConfigChannel+0x3a4>
  return __builtin_clz(value);
 800936a:	fab6 f686 	clz	r6, r6
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800936e:	42b5      	cmp	r5, r6
 8009370:	f000 80f8 	beq.w	8009564 <HAL_ADCEx_InjectedConfigChannel+0x594>
 8009374:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 8009376:	6e5f      	ldr	r7, [r3, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009378:	f103 0560 	add.w	r5, r3, #96	; 0x60
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800937c:	f3c7 6784 	ubfx	r7, r7, #26, #5
 8009380:	f103 0c64 	add.w	ip, r3, #100	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009384:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 8009388:	b126      	cbz	r6, 8009394 <HAL_ADCEx_InjectedConfigChannel+0x3c4>
  return __builtin_clz(value);
 800938a:	fab6 f686 	clz	r6, r6
 800938e:	42b7      	cmp	r7, r6
 8009390:	f000 80fd 	beq.w	800958e <HAL_ADCEx_InjectedConfigChannel+0x5be>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8009394:	68ae      	ldr	r6, [r5, #8]
 8009396:	68af      	ldr	r7, [r5, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009398:	f105 0c08 	add.w	ip, r5, #8
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800939c:	f3c7 6784 	ubfx	r7, r7, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80093a0:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 80093a4:	b126      	cbz	r6, 80093b0 <HAL_ADCEx_InjectedConfigChannel+0x3e0>
  return __builtin_clz(value);
 80093a6:	fab6 f686 	clz	r6, r6
 80093aa:	42b7      	cmp	r7, r6
 80093ac:	f000 8104 	beq.w	80095b8 <HAL_ADCEx_InjectedConfigChannel+0x5e8>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80093b0:	68ee      	ldr	r6, [r5, #12]
 80093b2:	68ef      	ldr	r7, [r5, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80093b4:	350c      	adds	r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80093b6:	f3c7 6784 	ubfx	r7, r7, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80093ba:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 80093be:	2e00      	cmp	r6, #0
 80093c0:	f43f ae53 	beq.w	800906a <HAL_ADCEx_InjectedConfigChannel+0x9a>
  return __builtin_clz(value);
 80093c4:	fab6 f686 	clz	r6, r6
 80093c8:	42be      	cmp	r6, r7
 80093ca:	f47f ae4e 	bne.w	800906a <HAL_ADCEx_InjectedConfigChannel+0x9a>
  MODIFY_REG(*preg,
 80093ce:	682c      	ldr	r4, [r5, #0]
 80093d0:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80093d4:	602c      	str	r4, [r5, #0]
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 80093d6:	680c      	ldr	r4, [r1, #0]
}
 80093d8:	e647      	b.n	800906a <HAL_ADCEx_InjectedConfigChannel+0x9a>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80093da:	0de5      	lsrs	r5, r4, #23
  MODIFY_REG(*preg,
 80093dc:	f3c4 5604 	ubfx	r6, r4, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80093e0:	f005 0504 	and.w	r5, r5, #4
 80093e4:	f103 0414 	add.w	r4, r3, #20
  MODIFY_REG(*preg,
 80093e8:	2707      	movs	r7, #7
 80093ea:	40b7      	lsls	r7, r6
 80093ec:	5966      	ldr	r6, [r4, r5]
 80093ee:	ea26 0607 	bic.w	r6, r6, r7
 80093f2:	5166      	str	r6, [r4, r5]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80093f4:	695c      	ldr	r4, [r3, #20]
 80093f6:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 80093fa:	615c      	str	r4, [r3, #20]
}
 80093fc:	e6d4      	b.n	80091a8 <HAL_ADCEx_InjectedConfigChannel+0x1d8>
      MODIFY_REG(hadc->Instance->CFGR2,
 80093fe:	e9d1 570d 	ldrd	r5, r7, [r1, #52]	; 0x34
 8009402:	691e      	ldr	r6, [r3, #16]
 8009404:	433d      	orrs	r5, r7
 8009406:	f426 76ff 	bic.w	r6, r6, #510	; 0x1fe
 800940a:	4335      	orrs	r5, r6
 800940c:	f045 0502 	orr.w	r5, r5, #2
 8009410:	611d      	str	r5, [r3, #16]
 8009412:	e6af      	b.n	8009174 <HAL_ADCEx_InjectedConfigChannel+0x1a4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009414:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 8009418:	2d00      	cmp	r5, #0
 800941a:	d076      	beq.n	800950a <HAL_ADCEx_InjectedConfigChannel+0x53a>
  return __builtin_clz(value);
 800941c:	fab5 f585 	clz	r5, r5
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009420:	3501      	adds	r5, #1
 8009422:	f005 051f 	and.w	r5, r5, #31
 8009426:	2d09      	cmp	r5, #9
 8009428:	d96f      	bls.n	800950a <HAL_ADCEx_InjectedConfigChannel+0x53a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800942a:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 800942e:	2d00      	cmp	r5, #0
 8009430:	f000 80e2 	beq.w	80095f8 <HAL_ADCEx_InjectedConfigChannel+0x628>
  return __builtin_clz(value);
 8009434:	fab5 f585 	clz	r5, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8009438:	3501      	adds	r5, #1
 800943a:	06ad      	lsls	r5, r5, #26
 800943c:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009440:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 8009444:	2e00      	cmp	r6, #0
 8009446:	f000 80d5 	beq.w	80095f4 <HAL_ADCEx_InjectedConfigChannel+0x624>
  return __builtin_clz(value);
 800944a:	fab6 f686 	clz	r6, r6
 800944e:	3601      	adds	r6, #1
 8009450:	f006 061f 	and.w	r6, r6, #31
 8009454:	2701      	movs	r7, #1
 8009456:	fa07 f606 	lsl.w	r6, r7, r6
 800945a:	4335      	orrs	r5, r6
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800945c:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 8009460:	2c00      	cmp	r4, #0
 8009462:	f000 80c5 	beq.w	80095f0 <HAL_ADCEx_InjectedConfigChannel+0x620>
  return __builtin_clz(value);
 8009466:	fab4 f484 	clz	r4, r4
 800946a:	1c66      	adds	r6, r4, #1
 800946c:	f006 061f 	and.w	r6, r6, #31
 8009470:	2403      	movs	r4, #3
 8009472:	f06f 071d 	mvn.w	r7, #29
 8009476:	fb14 7406 	smlabb	r4, r4, r6, r7
 800947a:	0524      	lsls	r4, r4, #20
 800947c:	f044 7400 	orr.w	r4, r4, #33554432	; 0x2000000
 8009480:	e00f      	b.n	80094a2 <HAL_ADCEx_InjectedConfigChannel+0x4d2>
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 8009482:	3b01      	subs	r3, #1
 8009484:	461e      	mov	r6, r3
 8009486:	e5c4      	b.n	8009012 <HAL_ADCEx_InjectedConfigChannel+0x42>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8009488:	06a5      	lsls	r5, r4, #26
 800948a:	eb0c 044c 	add.w	r4, ip, ip, lsl #1
 800948e:	3c1e      	subs	r4, #30
 8009490:	2601      	movs	r6, #1
 8009492:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8009496:	0524      	lsls	r4, r4, #20
 8009498:	fa06 f60c 	lsl.w	r6, r6, ip
 800949c:	f044 7400 	orr.w	r4, r4, #33554432	; 0x2000000
 80094a0:	4335      	orrs	r5, r6
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80094a2:	432c      	orrs	r4, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80094a4:	ea4f 5cd4 	mov.w	ip, r4, lsr #23
  MODIFY_REG(*preg,
 80094a8:	688d      	ldr	r5, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80094aa:	f00c 0c04 	and.w	ip, ip, #4
 80094ae:	f103 0e14 	add.w	lr, r3, #20
  MODIFY_REG(*preg,
 80094b2:	f3c4 5404 	ubfx	r4, r4, #20, #5
 80094b6:	fa05 f604 	lsl.w	r6, r5, r4
 80094ba:	2707      	movs	r7, #7
 80094bc:	f85e 500c 	ldr.w	r5, [lr, ip]
 80094c0:	fa07 f404 	lsl.w	r4, r7, r4
 80094c4:	ea25 0404 	bic.w	r4, r5, r4
 80094c8:	4334      	orrs	r4, r6
 80094ca:	f84e 400c 	str.w	r4, [lr, ip]
  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 80094ce:	680c      	ldr	r4, [r1, #0]
}
 80094d0:	e5db      	b.n	800908a <HAL_ADCEx_InjectedConfigChannel+0xba>
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80094d2:	f3c4 6684 	ubfx	r6, r4, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80094d6:	42b5      	cmp	r5, r6
 80094d8:	d044      	beq.n	8009564 <HAL_ADCEx_InjectedConfigChannel+0x594>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80094da:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 80094dc:	6e5f      	ldr	r7, [r3, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80094de:	f103 0560 	add.w	r5, r3, #96	; 0x60
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80094e2:	f3c7 6784 	ubfx	r7, r7, #26, #5
 80094e6:	f103 0c64 	add.w	ip, r3, #100	; 0x64
 80094ea:	42b7      	cmp	r7, r6
 80094ec:	d04f      	beq.n	800958e <HAL_ADCEx_InjectedConfigChannel+0x5be>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80094ee:	68af      	ldr	r7, [r5, #8]
 80094f0:	68af      	ldr	r7, [r5, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80094f2:	f105 0c08 	add.w	ip, r5, #8
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80094f6:	f3c7 6784 	ubfx	r7, r7, #26, #5
 80094fa:	42b7      	cmp	r7, r6
 80094fc:	d05c      	beq.n	80095b8 <HAL_ADCEx_InjectedConfigChannel+0x5e8>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80094fe:	68ef      	ldr	r7, [r5, #12]
 8009500:	68ef      	ldr	r7, [r5, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009502:	350c      	adds	r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8009504:	f3c7 6784 	ubfx	r7, r7, #26, #5
 8009508:	e75e      	b.n	80093c8 <HAL_ADCEx_InjectedConfigChannel+0x3f8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800950a:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 800950e:	2d00      	cmp	r5, #0
 8009510:	d068      	beq.n	80095e4 <HAL_ADCEx_InjectedConfigChannel+0x614>
  return __builtin_clz(value);
 8009512:	fab5 f585 	clz	r5, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8009516:	3501      	adds	r5, #1
 8009518:	06ad      	lsls	r5, r5, #26
 800951a:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800951e:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 8009522:	2e00      	cmp	r6, #0
 8009524:	d05c      	beq.n	80095e0 <HAL_ADCEx_InjectedConfigChannel+0x610>
  return __builtin_clz(value);
 8009526:	fab6 f686 	clz	r6, r6
 800952a:	3601      	adds	r6, #1
 800952c:	f006 061f 	and.w	r6, r6, #31
 8009530:	2701      	movs	r7, #1
 8009532:	fa07 f606 	lsl.w	r6, r7, r6
 8009536:	4335      	orrs	r5, r6
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009538:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 800953c:	2c00      	cmp	r4, #0
 800953e:	d054      	beq.n	80095ea <HAL_ADCEx_InjectedConfigChannel+0x61a>
  return __builtin_clz(value);
 8009540:	fab4 f484 	clz	r4, r4
 8009544:	3401      	adds	r4, #1
 8009546:	f004 041f 	and.w	r4, r4, #31
 800954a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800954e:	0524      	lsls	r4, r4, #20
 8009550:	e7a7      	b.n	80094a2 <HAL_ADCEx_InjectedConfigChannel+0x4d2>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009552:	6dd5      	ldr	r5, [r2, #92]	; 0x5c
 8009554:	f045 0520 	orr.w	r5, r5, #32
 8009558:	65d5      	str	r5, [r2, #92]	; 0x5c
        tmp_hal_status = HAL_ERROR;
 800955a:	e602      	b.n	8009162 <HAL_ADCEx_InjectedConfigChannel+0x192>
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800955c:	4928      	ldr	r1, [pc, #160]	; (8009600 <HAL_ADCEx_InjectedConfigChannel+0x630>)
 800955e:	e5ba      	b.n	80090d6 <HAL_ADCEx_InjectedConfigChannel+0x106>
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009560:	4c27      	ldr	r4, [pc, #156]	; (8009600 <HAL_ADCEx_InjectedConfigChannel+0x630>)
 8009562:	e5ce      	b.n	8009102 <HAL_ADCEx_InjectedConfigChannel+0x132>
  MODIFY_REG(*preg,
 8009564:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8009566:	461d      	mov	r5, r3
 8009568:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800956c:	f845 4f60 	str.w	r4, [r5, #96]!
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8009570:	6e5c      	ldr	r4, [r3, #100]	; 0x64
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8009572:	680c      	ldr	r4, [r1, #0]
 8009574:	6e5f      	ldr	r7, [r3, #100]	; 0x64
 8009576:	f3c4 0612 	ubfx	r6, r4, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800957a:	f3c7 6784 	ubfx	r7, r7, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800957e:	f103 0c64 	add.w	ip, r3, #100	; 0x64
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8009582:	2e00      	cmp	r6, #0
 8009584:	f47f aefe 	bne.w	8009384 <HAL_ADCEx_InjectedConfigChannel+0x3b4>
 8009588:	f3c4 6684 	ubfx	r6, r4, #26, #5
 800958c:	e7ad      	b.n	80094ea <HAL_ADCEx_InjectedConfigChannel+0x51a>
  MODIFY_REG(*preg,
 800958e:	f8dc 4000 	ldr.w	r4, [ip]
 8009592:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8009596:	f8cc 4000 	str.w	r4, [ip]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800959a:	68ac      	ldr	r4, [r5, #8]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 800959c:	680c      	ldr	r4, [r1, #0]
 800959e:	68af      	ldr	r7, [r5, #8]
 80095a0:	f3c4 0612 	ubfx	r6, r4, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80095a4:	f3c7 6784 	ubfx	r7, r7, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80095a8:	f105 0c08 	add.w	ip, r5, #8
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80095ac:	2e00      	cmp	r6, #0
 80095ae:	f47f aef7 	bne.w	80093a0 <HAL_ADCEx_InjectedConfigChannel+0x3d0>
 80095b2:	f3c4 6684 	ubfx	r6, r4, #26, #5
 80095b6:	e7a0      	b.n	80094fa <HAL_ADCEx_InjectedConfigChannel+0x52a>
  MODIFY_REG(*preg,
 80095b8:	f8dc 4000 	ldr.w	r4, [ip]
 80095bc:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80095c0:	f8cc 4000 	str.w	r4, [ip]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80095c4:	68ec      	ldr	r4, [r5, #12]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80095c6:	680c      	ldr	r4, [r1, #0]
 80095c8:	68ef      	ldr	r7, [r5, #12]
 80095ca:	f3c4 0612 	ubfx	r6, r4, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80095ce:	350c      	adds	r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80095d0:	f3c7 6784 	ubfx	r7, r7, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80095d4:	2e00      	cmp	r6, #0
 80095d6:	f47f aef0 	bne.w	80093ba <HAL_ADCEx_InjectedConfigChannel+0x3ea>
 80095da:	f3c4 6684 	ubfx	r6, r4, #26, #5
 80095de:	e6f3      	b.n	80093c8 <HAL_ADCEx_InjectedConfigChannel+0x3f8>
 80095e0:	2602      	movs	r6, #2
 80095e2:	e7a8      	b.n	8009536 <HAL_ADCEx_InjectedConfigChannel+0x566>
 80095e4:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 80095e8:	e799      	b.n	800951e <HAL_ADCEx_InjectedConfigChannel+0x54e>
 80095ea:	f44f 1440 	mov.w	r4, #3145728	; 0x300000
 80095ee:	e758      	b.n	80094a2 <HAL_ADCEx_InjectedConfigChannel+0x4d2>
 80095f0:	4c04      	ldr	r4, [pc, #16]	; (8009604 <HAL_ADCEx_InjectedConfigChannel+0x634>)
 80095f2:	e756      	b.n	80094a2 <HAL_ADCEx_InjectedConfigChannel+0x4d2>
 80095f4:	2602      	movs	r6, #2
 80095f6:	e730      	b.n	800945a <HAL_ADCEx_InjectedConfigChannel+0x48a>
 80095f8:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 80095fc:	e720      	b.n	8009440 <HAL_ADCEx_InjectedConfigChannel+0x470>
 80095fe:	bf00      	nop
 8009600:	50000300 	.word	0x50000300
 8009604:	fe500000 	.word	0xfe500000

08009608 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8009608:	b470      	push	{r4, r5, r6}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800960a:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800960e:	680e      	ldr	r6, [r1, #0]
  __HAL_LOCK(hadc);
 8009610:	2a01      	cmp	r2, #1
{
 8009612:	b09d      	sub	sp, #116	; 0x74
  __HAL_LOCK(hadc);
 8009614:	d056      	beq.n	80096c4 <HAL_ADCEx_MultiModeConfigChannel+0xbc>

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8009616:	6802      	ldr	r2, [r0, #0]
 8009618:	4603      	mov	r3, r0
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800961a:	2400      	movs	r4, #0
  __HAL_LOCK(hadc);
 800961c:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800961e:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8009622:	9418      	str	r4, [sp, #96]	; 0x60
  __HAL_LOCK(hadc);
 8009624:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8009628:	9419      	str	r4, [sp, #100]	; 0x64
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800962a:	d00b      	beq.n	8009644 <HAL_ADCEx_MultiModeConfigChannel+0x3c>
 800962c:	4d48      	ldr	r5, [pc, #288]	; (8009750 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 800962e:	42aa      	cmp	r2, r5
 8009630:	d046      	beq.n	80096c0 <HAL_ADCEx_MultiModeConfigChannel+0xb8>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009632:	6dda      	ldr	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8009634:	f883 4058 	strb.w	r4, [r3, #88]	; 0x58
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009638:	f042 0220 	orr.w	r2, r2, #32
 800963c:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 800963e:	b01d      	add	sp, #116	; 0x74
 8009640:	bc70      	pop	{r4, r5, r6}
 8009642:	4770      	bx	lr
 8009644:	4843      	ldr	r0, [pc, #268]	; (8009754 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8009646:	6880      	ldr	r0, [r0, #8]
 8009648:	0740      	lsls	r0, r0, #29
 800964a:	d50b      	bpl.n	8009664 <HAL_ADCEx_MultiModeConfigChannel+0x5c>
 800964c:	6892      	ldr	r2, [r2, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800964e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009650:	f042 0220 	orr.w	r2, r2, #32
    tmp_hal_status = HAL_ERROR;
 8009654:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009656:	65da      	str	r2, [r3, #92]	; 0x5c
  __HAL_UNLOCK(hadc);
 8009658:	2200      	movs	r2, #0
 800965a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 800965e:	b01d      	add	sp, #116	; 0x74
 8009660:	bc70      	pop	{r4, r5, r6}
 8009662:	4770      	bx	lr
 8009664:	6890      	ldr	r0, [r2, #8]
 8009666:	0744      	lsls	r4, r0, #29
 8009668:	d4f1      	bmi.n	800964e <HAL_ADCEx_MultiModeConfigChannel+0x46>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800966a:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 800966e:	d02d      	beq.n	80096cc <HAL_ADCEx_MultiModeConfigChannel+0xc4>
 8009670:	4838      	ldr	r0, [pc, #224]	; (8009754 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8009672:	4282      	cmp	r2, r0
 8009674:	d02a      	beq.n	80096cc <HAL_ADCEx_MultiModeConfigChannel+0xc4>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8009676:	2e00      	cmp	r6, #0
 8009678:	d058      	beq.n	800972c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800967a:	4837      	ldr	r0, [pc, #220]	; (8009758 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800967c:	684c      	ldr	r4, [r1, #4]
 800967e:	6882      	ldr	r2, [r0, #8]
 8009680:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8009684:	4322      	orrs	r2, r4
 8009686:	f893 4038 	ldrb.w	r4, [r3, #56]	; 0x38
 800968a:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 800968e:	6082      	str	r2, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8009690:	4a2f      	ldr	r2, [pc, #188]	; (8009750 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8009692:	6894      	ldr	r4, [r2, #8]
 8009694:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8009698:	6892      	ldr	r2, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800969a:	4322      	orrs	r2, r4
 800969c:	4c2f      	ldr	r4, [pc, #188]	; (800975c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800969e:	68a4      	ldr	r4, [r4, #8]
 80096a0:	4322      	orrs	r2, r4
 80096a2:	43d2      	mvns	r2, r2
 80096a4:	f002 0201 	and.w	r2, r2, #1
 80096a8:	b142      	cbz	r2, 80096bc <HAL_ADCEx_MultiModeConfigChannel+0xb4>
        MODIFY_REG(tmpADC_Common->CCR,
 80096aa:	6884      	ldr	r4, [r0, #8]
 80096ac:	688a      	ldr	r2, [r1, #8]
 80096ae:	f424 6171 	bic.w	r1, r4, #3856	; 0xf10
 80096b2:	4332      	orrs	r2, r6
 80096b4:	f021 010f 	bic.w	r1, r1, #15
 80096b8:	430a      	orrs	r2, r1
 80096ba:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80096bc:	2000      	movs	r0, #0
 80096be:	e7cb      	b.n	8009658 <HAL_ADCEx_MultiModeConfigChannel+0x50>
 80096c0:	4827      	ldr	r0, [pc, #156]	; (8009760 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80096c2:	e7c0      	b.n	8009646 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
  __HAL_LOCK(hadc);
 80096c4:	2002      	movs	r0, #2
}
 80096c6:	b01d      	add	sp, #116	; 0x74
 80096c8:	bc70      	pop	{r4, r5, r6}
 80096ca:	4770      	bx	lr
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80096cc:	b1ae      	cbz	r6, 80096fa <HAL_ADCEx_MultiModeConfigChannel+0xf2>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80096ce:	4825      	ldr	r0, [pc, #148]	; (8009764 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80096d0:	684c      	ldr	r4, [r1, #4]
 80096d2:	6882      	ldr	r2, [r0, #8]
 80096d4:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80096d8:	4322      	orrs	r2, r4
 80096da:	f893 4038 	ldrb.w	r4, [r3, #56]	; 0x38
 80096de:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 80096e2:	6082      	str	r2, [r0, #8]
 80096e4:	4a1b      	ldr	r2, [pc, #108]	; (8009754 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80096e6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80096ea:	6880      	ldr	r0, [r0, #8]
 80096ec:	6892      	ldr	r2, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80096ee:	4302      	orrs	r2, r0
 80096f0:	43d2      	mvns	r2, r2
 80096f2:	481c      	ldr	r0, [pc, #112]	; (8009764 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80096f4:	f002 0201 	and.w	r2, r2, #1
 80096f8:	e7d6      	b.n	80096a8 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80096fa:	491a      	ldr	r1, [pc, #104]	; (8009764 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80096fc:	688a      	ldr	r2, [r1, #8]
 80096fe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8009702:	608a      	str	r2, [r1, #8]
 8009704:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8009708:	4a12      	ldr	r2, [pc, #72]	; (8009754 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 800970a:	6880      	ldr	r0, [r0, #8]
 800970c:	6892      	ldr	r2, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800970e:	4915      	ldr	r1, [pc, #84]	; (8009764 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8009710:	4302      	orrs	r2, r0
 8009712:	43d2      	mvns	r2, r2
 8009714:	f002 0201 	and.w	r2, r2, #1
 8009718:	2a00      	cmp	r2, #0
 800971a:	d0cf      	beq.n	80096bc <HAL_ADCEx_MultiModeConfigChannel+0xb4>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800971c:	688a      	ldr	r2, [r1, #8]
 800971e:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8009722:	f022 020f 	bic.w	r2, r2, #15
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009726:	2000      	movs	r0, #0
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8009728:	608a      	str	r2, [r1, #8]
 800972a:	e795      	b.n	8009658 <HAL_ADCEx_MultiModeConfigChannel+0x50>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800972c:	490a      	ldr	r1, [pc, #40]	; (8009758 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800972e:	4808      	ldr	r0, [pc, #32]	; (8009750 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8009730:	688a      	ldr	r2, [r1, #8]
 8009732:	4c0b      	ldr	r4, [pc, #44]	; (8009760 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8009734:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8009738:	608a      	str	r2, [r1, #8]
 800973a:	6880      	ldr	r0, [r0, #8]
 800973c:	68a2      	ldr	r2, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800973e:	4302      	orrs	r2, r0
 8009740:	4806      	ldr	r0, [pc, #24]	; (800975c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8009742:	6880      	ldr	r0, [r0, #8]
 8009744:	4302      	orrs	r2, r0
 8009746:	43d2      	mvns	r2, r2
 8009748:	f002 0201 	and.w	r2, r2, #1
 800974c:	e7e4      	b.n	8009718 <HAL_ADCEx_MultiModeConfigChannel+0x110>
 800974e:	bf00      	nop
 8009750:	50000400 	.word	0x50000400
 8009754:	50000100 	.word	0x50000100
 8009758:	50000700 	.word	0x50000700
 800975c:	50000600 	.word	0x50000600
 8009760:	50000500 	.word	0x50000500
 8009764:	50000300 	.word	0x50000300

08009768 <HAL_CORDIC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8009768:	b1b0      	cbz	r0, 8009798 <HAL_CORDIC_Init+0x30>
{
 800976a:	b510      	push	{r4, lr}

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 800976c:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8009770:	4604      	mov	r4, r0
 8009772:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009776:	b153      	cbz	r3, 800978e <HAL_CORDIC_Init+0x26>
    HAL_CORDIC_MspInit(hcordic);
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8009778:	2000      	movs	r0, #0

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 800977a:	2301      	movs	r3, #1
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 800977c:	6260      	str	r0, [r4, #36]	; 0x24
  hcordic->State = HAL_CORDIC_STATE_READY;
 800977e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  hcordic->pOutBuff = NULL;
 8009782:	e9c4 0001 	strd	r0, r0, [r4, #4]
  hcordic->NbCalcToGet = 0U;
 8009786:	e9c4 0003 	strd	r0, r0, [r4, #12]
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 800978a:	6160      	str	r0, [r4, #20]

  /* Return function status */
  return HAL_OK;
}
 800978c:	bd10      	pop	{r4, pc}
    hcordic->Lock = HAL_UNLOCKED;
 800978e:	f880 2020 	strb.w	r2, [r0, #32]
    HAL_CORDIC_MspInit(hcordic);
 8009792:	f7fe fd59 	bl	8008248 <HAL_CORDIC_MspInit>
 8009796:	e7ef      	b.n	8009778 <HAL_CORDIC_Init+0x10>
    return HAL_ERROR;
 8009798:	2001      	movs	r0, #1
}
 800979a:	4770      	bx	lr

0800979c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800979c:	4907      	ldr	r1, [pc, #28]	; (80097bc <HAL_NVIC_SetPriorityGrouping+0x20>)
 800979e:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80097a0:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80097a2:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80097a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80097aa:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80097ac:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80097ae:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80097b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80097b6:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80097b8:	4770      	bx	lr
 80097ba:	bf00      	nop
 80097bc:	e000ed00 	.word	0xe000ed00

080097c0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80097c0:	4b1c      	ldr	r3, [pc, #112]	; (8009834 <HAL_NVIC_SetPriority+0x74>)
 80097c2:	68db      	ldr	r3, [r3, #12]
 80097c4:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80097c8:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80097ca:	f1c3 0e07 	rsb	lr, r3, #7
 80097ce:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80097d2:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80097d6:	bf28      	it	cs
 80097d8:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80097dc:	f1bc 0f06 	cmp.w	ip, #6
 80097e0:	d91b      	bls.n	800981a <HAL_NVIC_SetPriority+0x5a>
 80097e2:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80097e4:	f04f 3cff 	mov.w	ip, #4294967295
 80097e8:	fa0c fc03 	lsl.w	ip, ip, r3
 80097ec:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80097f0:	f04f 3cff 	mov.w	ip, #4294967295
 80097f4:	fa0c fc0e 	lsl.w	ip, ip, lr
 80097f8:	ea21 010c 	bic.w	r1, r1, ip
 80097fc:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80097fe:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009800:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8009804:	db0c      	blt.n	8009820 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009806:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800980a:	0109      	lsls	r1, r1, #4
 800980c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8009810:	b2c9      	uxtb	r1, r1
 8009812:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8009816:	f85d fb04 	ldr.w	pc, [sp], #4
 800981a:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800981c:	4613      	mov	r3, r2
 800981e:	e7e7      	b.n	80097f0 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009820:	4b05      	ldr	r3, [pc, #20]	; (8009838 <HAL_NVIC_SetPriority+0x78>)
 8009822:	f000 000f 	and.w	r0, r0, #15
 8009826:	0109      	lsls	r1, r1, #4
 8009828:	4403      	add	r3, r0
 800982a:	b2c9      	uxtb	r1, r1
 800982c:	7619      	strb	r1, [r3, #24]
 800982e:	f85d fb04 	ldr.w	pc, [sp], #4
 8009832:	bf00      	nop
 8009834:	e000ed00 	.word	0xe000ed00
 8009838:	e000ecfc 	.word	0xe000ecfc

0800983c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800983c:	2800      	cmp	r0, #0
 800983e:	db07      	blt.n	8009850 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009840:	4a04      	ldr	r2, [pc, #16]	; (8009854 <HAL_NVIC_EnableIRQ+0x18>)
 8009842:	0941      	lsrs	r1, r0, #5
 8009844:	2301      	movs	r3, #1
 8009846:	f000 001f 	and.w	r0, r0, #31
 800984a:	4083      	lsls	r3, r0
 800984c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8009850:	4770      	bx	lr
 8009852:	bf00      	nop
 8009854:	e000e100 	.word	0xe000e100

08009858 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009858:	3801      	subs	r0, #1
 800985a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800985e:	d210      	bcs.n	8009882 <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009860:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009862:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009866:	4c08      	ldr	r4, [pc, #32]	; (8009888 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009868:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800986a:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 800986e:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009872:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009874:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009876:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009878:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 800987a:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800987e:	6119      	str	r1, [r3, #16]
 8009880:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8009882:	2001      	movs	r0, #1
 8009884:	4770      	bx	lr
 8009886:	bf00      	nop
 8009888:	e000ed00 	.word	0xe000ed00

0800988c <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800988c:	4770      	bx	lr
 800988e:	bf00      	nop

08009890 <HAL_SYSTICK_IRQHandler>:
{
 8009890:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8009892:	f7ff fffb 	bl	800988c <HAL_SYSTICK_Callback>
}
 8009896:	bd08      	pop	{r3, pc}

08009898 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8009898:	2800      	cmp	r0, #0
 800989a:	d036      	beq.n	800990a <HAL_CRC_Init+0x72>
{
 800989c:	b510      	push	{r4, lr}
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800989e:	7f43      	ldrb	r3, [r0, #29]
 80098a0:	4604      	mov	r4, r0
 80098a2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80098a6:	b363      	cbz	r3, 8009902 <HAL_CRC_Init+0x6a>
  hcrc->State = HAL_CRC_STATE_BUSY;

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80098a8:	7923      	ldrb	r3, [r4, #4]
  hcrc->State = HAL_CRC_STATE_BUSY;
 80098aa:	2202      	movs	r2, #2
 80098ac:	7762      	strb	r2, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80098ae:	b9f3      	cbnz	r3, 80098ee <HAL_CRC_Init+0x56>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80098b0:	6823      	ldr	r3, [r4, #0]
 80098b2:	4a17      	ldr	r2, [pc, #92]	; (8009910 <HAL_CRC_Init+0x78>)
 80098b4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80098b6:	689a      	ldr	r2, [r3, #8]
 80098b8:	f022 0218 	bic.w	r2, r2, #24
 80098bc:	609a      	str	r2, [r3, #8]
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80098be:	7962      	ldrb	r2, [r4, #5]
 80098c0:	b18a      	cbz	r2, 80098e6 <HAL_CRC_Init+0x4e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80098c2:	6922      	ldr	r2, [r4, #16]
 80098c4:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80098c6:	689a      	ldr	r2, [r3, #8]
 80098c8:	6961      	ldr	r1, [r4, #20]
 80098ca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80098ce:	430a      	orrs	r2, r1
 80098d0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80098d2:	689a      	ldr	r2, [r3, #8]
 80098d4:	69a1      	ldr	r1, [r4, #24]
 80098d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80098da:	430a      	orrs	r2, r1
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80098dc:	2101      	movs	r1, #1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80098de:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 80098e0:	7761      	strb	r1, [r4, #29]

  /* Return function status */
  return HAL_OK;
 80098e2:	2000      	movs	r0, #0
}
 80098e4:	bd10      	pop	{r4, pc}
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80098e6:	f04f 32ff 	mov.w	r2, #4294967295
 80098ea:	611a      	str	r2, [r3, #16]
 80098ec:	e7eb      	b.n	80098c6 <HAL_CRC_Init+0x2e>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80098ee:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 80098f2:	4620      	mov	r0, r4
 80098f4:	f000 f80e 	bl	8009914 <HAL_CRCEx_Polynomial_Set>
 80098f8:	b908      	cbnz	r0, 80098fe <HAL_CRC_Init+0x66>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80098fa:	6823      	ldr	r3, [r4, #0]
 80098fc:	e7df      	b.n	80098be <HAL_CRC_Init+0x26>
    return HAL_ERROR;
 80098fe:	2001      	movs	r0, #1
}
 8009900:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8009902:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8009904:	f7fe fcb8 	bl	8008278 <HAL_CRC_MspInit>
 8009908:	e7ce      	b.n	80098a8 <HAL_CRC_Init+0x10>
    return HAL_ERROR;
 800990a:	2001      	movs	r0, #1
}
 800990c:	4770      	bx	lr
 800990e:	bf00      	nop
 8009910:	04c11db7 	.word	0x04c11db7

08009914 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8009914:	b410      	push	{r4}
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8009916:	231e      	movs	r3, #30
 8009918:	e001      	b.n	800991e <HAL_CRCEx_Polynomial_Set+0xa>
 800991a:	3b01      	subs	r3, #1
 800991c:	d315      	bcc.n	800994a <HAL_CRCEx_Polynomial_Set+0x36>
 800991e:	fa21 fc03 	lsr.w	ip, r1, r3
 8009922:	f01c 0f01 	tst.w	ip, #1
 8009926:	d0f8      	beq.n	800991a <HAL_CRCEx_Polynomial_Set+0x6>
  {
  }

  switch (PolyLength)
 8009928:	2a18      	cmp	r2, #24
 800992a:	d80f      	bhi.n	800994c <HAL_CRCEx_Polynomial_Set+0x38>
 800992c:	e8df f002 	tbb	[pc, r2]
 8009930:	0e0e0e14 	.word	0x0e0e0e14
 8009934:	0e0e0e0e 	.word	0x0e0e0e0e
 8009938:	0e0e0e1f 	.word	0x0e0e0e1f
 800993c:	0e0e0e0e 	.word	0x0e0e0e0e
 8009940:	0e0e0e22 	.word	0x0e0e0e22
 8009944:	0e0e0e0e 	.word	0x0e0e0e0e
 8009948:	12          	.byte	0x12
 8009949:	00          	.byte	0x00
 800994a:	b12a      	cbz	r2, 8009958 <HAL_CRCEx_Polynomial_Set+0x44>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800994c:	2001      	movs	r0, #1
    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
}
 800994e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009952:	4770      	bx	lr
      if (msb >= HAL_CRC_LENGTH_7B)
 8009954:	2b06      	cmp	r3, #6
 8009956:	d8f9      	bhi.n	800994c <HAL_CRCEx_Polynomial_Set+0x38>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8009958:	6804      	ldr	r4, [r0, #0]
 800995a:	6161      	str	r1, [r4, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800995c:	68a3      	ldr	r3, [r4, #8]
 800995e:	f023 0318 	bic.w	r3, r3, #24
 8009962:	4313      	orrs	r3, r2
 8009964:	2000      	movs	r0, #0
 8009966:	60a3      	str	r3, [r4, #8]
}
 8009968:	f85d 4b04 	ldr.w	r4, [sp], #4
 800996c:	4770      	bx	lr
      if (msb >= HAL_CRC_LENGTH_16B)
 800996e:	2b0f      	cmp	r3, #15
 8009970:	d9f2      	bls.n	8009958 <HAL_CRCEx_Polynomial_Set+0x44>
 8009972:	e7eb      	b.n	800994c <HAL_CRCEx_Polynomial_Set+0x38>
      if (msb >= HAL_CRC_LENGTH_8B)
 8009974:	2b07      	cmp	r3, #7
 8009976:	d9ef      	bls.n	8009958 <HAL_CRCEx_Polynomial_Set+0x44>
 8009978:	e7e8      	b.n	800994c <HAL_CRCEx_Polynomial_Set+0x38>
 800997a:	bf00      	nop

0800997c <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800997c:	2800      	cmp	r0, #0
 800997e:	d078      	beq.n	8009a72 <HAL_DMA_Init+0xf6>
{
 8009980:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8009982:	4b3d      	ldr	r3, [pc, #244]	; (8009a78 <HAL_DMA_Init+0xfc>)
 8009984:	6804      	ldr	r4, [r0, #0]
 8009986:	429c      	cmp	r4, r3
 8009988:	d95f      	bls.n	8009a4a <HAL_DMA_Init+0xce>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800998a:	4a3c      	ldr	r2, [pc, #240]	; (8009a7c <HAL_DMA_Init+0x100>)
 800998c:	4b3c      	ldr	r3, [pc, #240]	; (8009a80 <HAL_DMA_Init+0x104>)
    hdma->DmaBaseAddress = DMA2;
 800998e:	493d      	ldr	r1, [pc, #244]	; (8009a84 <HAL_DMA_Init+0x108>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8009990:	4422      	add	r2, r4
 8009992:	fba3 3202 	umull	r3, r2, r3, r2
 8009996:	0912      	lsrs	r2, r2, #4
 8009998:	0092      	lsls	r2, r2, #2
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800999a:	2302      	movs	r3, #2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800999c:	6885      	ldr	r5, [r0, #8]
  hdma->State = HAL_DMA_STATE_BUSY;
 800999e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  tmp |=  hdma->Init.Direction        |
 80099a2:	68c3      	ldr	r3, [r0, #12]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80099a4:	4e36      	ldr	r6, [pc, #216]	; (8009a80 <HAL_DMA_Init+0x104>)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80099a6:	4f34      	ldr	r7, [pc, #208]	; (8009a78 <HAL_DMA_Init+0xfc>)
 80099a8:	e9c0 1210 	strd	r1, r2, [r0, #64]	; 0x40
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80099ac:	6901      	ldr	r1, [r0, #16]
  tmp |=  hdma->Init.Direction        |
 80099ae:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80099b0:	430b      	orrs	r3, r1
 80099b2:	6941      	ldr	r1, [r0, #20]
 80099b4:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80099b6:	6981      	ldr	r1, [r0, #24]
 80099b8:	430b      	orrs	r3, r1
  tmp = hdma->Instance->CCR;
 80099ba:	6821      	ldr	r1, [r4, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80099bc:	f421 4cff 	bic.w	ip, r1, #32640	; 0x7f80
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80099c0:	69c1      	ldr	r1, [r0, #28]
 80099c2:	430b      	orrs	r3, r1
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80099c4:	b2e1      	uxtb	r1, r4
 80099c6:	3908      	subs	r1, #8
 80099c8:	fba6 6101 	umull	r6, r1, r6, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 80099cc:	6a06      	ldr	r6, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80099ce:	f02c 0c70 	bic.w	ip, ip, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 80099d2:	4333      	orrs	r3, r6
  tmp |=  hdma->Init.Direction        |
 80099d4:	ea43 030c 	orr.w	r3, r3, ip
  hdma->Instance->CCR = tmp;
 80099d8:	6023      	str	r3, [r4, #0]
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80099da:	4e2b      	ldr	r6, [pc, #172]	; (8009a88 <HAL_DMA_Init+0x10c>)
 80099dc:	4b2b      	ldr	r3, [pc, #172]	; (8009a8c <HAL_DMA_Init+0x110>)
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80099de:	f3c1 1104 	ubfx	r1, r1, #4, #5
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80099e2:	42bc      	cmp	r4, r7
 80099e4:	bf98      	it	ls
 80099e6:	4633      	movls	r3, r6
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80099e8:	f04f 0c01 	mov.w	ip, #1
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80099ec:	4c28      	ldr	r4, [pc, #160]	; (8009a90 <HAL_DMA_Init+0x114>)
 80099ee:	64c4      	str	r4, [r0, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80099f0:	fa0c f101 	lsl.w	r1, ip, r1
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80099f4:	18d4      	adds	r4, r2, r3
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80099f6:	f5b5 4f80 	cmp.w	r5, #16384	; 0x4000
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80099fa:	6501      	str	r1, [r0, #80]	; 0x50
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80099fc:	6484      	str	r4, [r0, #72]	; 0x48
 80099fe:	ea4f 0292 	mov.w	r2, r2, lsr #2
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8009a02:	d02b      	beq.n	8009a5c <HAL_DMA_Init+0xe0>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8009a04:	6845      	ldr	r5, [r0, #4]
 8009a06:	b2ec      	uxtb	r4, r5
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8009a08:	3d01      	subs	r5, #1
 8009a0a:	2d03      	cmp	r5, #3
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8009a0c:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009a10:	f8c6 1084 	str.w	r1, [r6, #132]	; 0x84
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8009a14:	d828      	bhi.n	8009a68 <HAL_DMA_Init+0xec>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009a16:	4b1f      	ldr	r3, [pc, #124]	; (8009a94 <HAL_DMA_Init+0x118>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009a18:	4d1f      	ldr	r5, [pc, #124]	; (8009a98 <HAL_DMA_Init+0x11c>)
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009a1a:	4a20      	ldr	r2, [pc, #128]	; (8009a9c <HAL_DMA_Init+0x120>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009a1c:	4423      	add	r3, r4

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8009a1e:	3c01      	subs	r4, #1
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009a20:	009b      	lsls	r3, r3, #2
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8009a22:	f004 041f 	and.w	r4, r4, #31
 8009a26:	fa0c f404 	lsl.w	r4, ip, r4
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8009a2a:	2100      	movs	r1, #0
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009a2c:	e9c0 3515 	strd	r3, r5, [r0, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8009a30:	65c4      	str	r4, [r0, #92]	; 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8009a32:	6019      	str	r1, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009a34:	6454      	str	r4, [r2, #68]	; 0x44
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009a36:	2300      	movs	r3, #0
  hdma->State  = HAL_DMA_STATE_READY;
 8009a38:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009a3a:	63c3      	str	r3, [r0, #60]	; 0x3c
  hdma->Lock = HAL_UNLOCKED;
 8009a3c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 8009a40:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
}
 8009a44:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8009a46:	4618      	mov	r0, r3
}
 8009a48:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8009a4a:	4a15      	ldr	r2, [pc, #84]	; (8009aa0 <HAL_DMA_Init+0x124>)
 8009a4c:	4b0c      	ldr	r3, [pc, #48]	; (8009a80 <HAL_DMA_Init+0x104>)
    hdma->DmaBaseAddress = DMA1;
 8009a4e:	4915      	ldr	r1, [pc, #84]	; (8009aa4 <HAL_DMA_Init+0x128>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8009a50:	4422      	add	r2, r4
 8009a52:	fba3 3202 	umull	r3, r2, r3, r2
 8009a56:	0912      	lsrs	r2, r2, #4
 8009a58:	0092      	lsls	r2, r2, #2
    hdma->DmaBaseAddress = DMA1;
 8009a5a:	e79e      	b.n	800999a <HAL_DMA_Init+0x1e>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8009a5c:	2400      	movs	r4, #0
 8009a5e:	6044      	str	r4, [r0, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8009a60:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009a64:	f8c6 1084 	str.w	r1, [r6, #132]	; 0x84
    hdma->DMAmuxRequestGen = 0U;
 8009a68:	2300      	movs	r3, #0
    hdma->DMAmuxRequestGenStatus = 0U;
 8009a6a:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8009a6e:	65c3      	str	r3, [r0, #92]	; 0x5c
 8009a70:	e7e1      	b.n	8009a36 <HAL_DMA_Init+0xba>
    return HAL_ERROR;
 8009a72:	2001      	movs	r0, #1
}
 8009a74:	4770      	bx	lr
 8009a76:	bf00      	nop
 8009a78:	40020407 	.word	0x40020407
 8009a7c:	bffdfbf8 	.word	0xbffdfbf8
 8009a80:	cccccccd 	.word	0xcccccccd
 8009a84:	40020400 	.word	0x40020400
 8009a88:	40020800 	.word	0x40020800
 8009a8c:	40020820 	.word	0x40020820
 8009a90:	40020880 	.word	0x40020880
 8009a94:	1000823f 	.word	0x1000823f
 8009a98:	40020940 	.word	0x40020940
 8009a9c:	40020900 	.word	0x40020900
 8009aa0:	bffdfff8 	.word	0xbffdfff8
 8009aa4:	40020000 	.word	0x40020000

08009aa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8009aac:	680c      	ldr	r4, [r1, #0]
{
 8009aae:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0U)
 8009ab0:	2c00      	cmp	r4, #0
 8009ab2:	d07d      	beq.n	8009bb0 <HAL_GPIO_Init+0x108>
 8009ab4:	f04f 0c00 	mov.w	ip, #0
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009ab8:	4e71      	ldr	r6, [pc, #452]	; (8009c80 <HAL_GPIO_Init+0x1d8>)
  uint32_t position = 0x00U;
 8009aba:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009abc:	f04f 0b01 	mov.w	fp, #1
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009ac0:	468e      	mov	lr, r1
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009ac2:	fa0b f703 	lsl.w	r7, fp, r3
    if (iocurrent != 0x00u)
 8009ac6:	ea17 0a04 	ands.w	sl, r7, r4
 8009aca:	d06b      	beq.n	8009ba4 <HAL_GPIO_Init+0xfc>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8009acc:	f8de 1004 	ldr.w	r1, [lr, #4]
 8009ad0:	f001 0203 	and.w	r2, r1, #3
 8009ad4:	1e55      	subs	r5, r2, #1
 8009ad6:	2d01      	cmp	r5, #1
 8009ad8:	d96d      	bls.n	8009bb6 <HAL_GPIO_Init+0x10e>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009ada:	2a03      	cmp	r2, #3
 8009adc:	f040 80b1 	bne.w	8009c42 <HAL_GPIO_Init+0x19a>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009ae0:	fa02 f20c 	lsl.w	r2, r2, ip
 8009ae4:	43d5      	mvns	r5, r2
      temp = GPIOx->MODER;
 8009ae6:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009ae8:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009aea:	432a      	orrs	r2, r5
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8009aec:	f411 3f40 	tst.w	r1, #196608	; 0x30000
      GPIOx->MODER = temp;
 8009af0:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8009af2:	d057      	beq.n	8009ba4 <HAL_GPIO_Init+0xfc>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009af4:	4d63      	ldr	r5, [pc, #396]	; (8009c84 <HAL_GPIO_Init+0x1dc>)
 8009af6:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8009af8:	f042 0201 	orr.w	r2, r2, #1
 8009afc:	662a      	str	r2, [r5, #96]	; 0x60
 8009afe:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8009b00:	f002 0201 	and.w	r2, r2, #1
 8009b04:	9203      	str	r2, [sp, #12]
 8009b06:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8009b08:	f023 0203 	bic.w	r2, r3, #3
 8009b0c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8009b10:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009b14:	f003 0703 	and.w	r7, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8009b18:	6895      	ldr	r5, [r2, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009b1a:	00bf      	lsls	r7, r7, #2
 8009b1c:	f04f 080f 	mov.w	r8, #15
 8009b20:	fa08 f807 	lsl.w	r8, r8, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009b24:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009b28:	ea25 0908 	bic.w	r9, r5, r8
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009b2c:	d01a      	beq.n	8009b64 <HAL_GPIO_Init+0xbc>
 8009b2e:	4d56      	ldr	r5, [pc, #344]	; (8009c88 <HAL_GPIO_Init+0x1e0>)
 8009b30:	42a8      	cmp	r0, r5
 8009b32:	f000 8092 	beq.w	8009c5a <HAL_GPIO_Init+0x1b2>
 8009b36:	4d55      	ldr	r5, [pc, #340]	; (8009c8c <HAL_GPIO_Init+0x1e4>)
 8009b38:	42a8      	cmp	r0, r5
 8009b3a:	f000 8093 	beq.w	8009c64 <HAL_GPIO_Init+0x1bc>
 8009b3e:	4d54      	ldr	r5, [pc, #336]	; (8009c90 <HAL_GPIO_Init+0x1e8>)
 8009b40:	42a8      	cmp	r0, r5
 8009b42:	f000 8083 	beq.w	8009c4c <HAL_GPIO_Init+0x1a4>
 8009b46:	4d53      	ldr	r5, [pc, #332]	; (8009c94 <HAL_GPIO_Init+0x1ec>)
 8009b48:	42a8      	cmp	r0, r5
 8009b4a:	f000 8092 	beq.w	8009c72 <HAL_GPIO_Init+0x1ca>
 8009b4e:	4d52      	ldr	r5, [pc, #328]	; (8009c98 <HAL_GPIO_Init+0x1f0>)
 8009b50:	42a8      	cmp	r0, r5
 8009b52:	bf0c      	ite	eq
 8009b54:	f04f 0805 	moveq.w	r8, #5
 8009b58:	f04f 0806 	movne.w	r8, #6
 8009b5c:	fa08 f707 	lsl.w	r7, r8, r7
 8009b60:	ea49 0907 	orr.w	r9, r9, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009b64:	f8c2 9008 	str.w	r9, [r2, #8]
        temp = EXTI->RTSR1;
 8009b68:	68b2      	ldr	r2, [r6, #8]
        temp &= ~(iocurrent);
 8009b6a:	ea6f 050a 	mvn.w	r5, sl
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009b6e:	02cf      	lsls	r7, r1, #11
        temp &= ~(iocurrent);
 8009b70:	bf54      	ite	pl
 8009b72:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 8009b74:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->RTSR1 = temp;
 8009b78:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR1;
 8009b7a:	68f2      	ldr	r2, [r6, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009b7c:	028f      	lsls	r7, r1, #10
        temp &= ~(iocurrent);
 8009b7e:	bf54      	ite	pl
 8009b80:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 8009b82:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->FTSR1 = temp;
 8009b86:	60f2      	str	r2, [r6, #12]

        temp = EXTI->EMR1;
 8009b88:	6872      	ldr	r2, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009b8a:	038f      	lsls	r7, r1, #14
        temp &= ~(iocurrent);
 8009b8c:	bf54      	ite	pl
 8009b8e:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 8009b90:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->EMR1 = temp;
 8009b94:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8009b96:	6832      	ldr	r2, [r6, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009b98:	03c9      	lsls	r1, r1, #15
        temp &= ~(iocurrent);
 8009b9a:	bf54      	ite	pl
 8009b9c:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 8009b9e:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->IMR1 = temp;
 8009ba2:	6032      	str	r2, [r6, #0]
      }
    }

    position++;
 8009ba4:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 8009ba6:	fa34 f203 	lsrs.w	r2, r4, r3
 8009baa:	f10c 0c02 	add.w	ip, ip, #2
 8009bae:	d188      	bne.n	8009ac2 <HAL_GPIO_Init+0x1a>
  }
}
 8009bb0:	b005      	add	sp, #20
 8009bb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8009bb6:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009bba:	f8de 500c 	ldr.w	r5, [lr, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009bbe:	f04f 0803 	mov.w	r8, #3
 8009bc2:	fa08 f80c 	lsl.w	r8, r8, ip
 8009bc6:	ea29 0908 	bic.w	r9, r9, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009bca:	fa05 f50c 	lsl.w	r5, r5, ip
 8009bce:	ea45 0509 	orr.w	r5, r5, r9
        GPIOx->OSPEEDR = temp;
 8009bd2:	6085      	str	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009bd4:	ea6f 0508 	mvn.w	r5, r8
        temp = GPIOx->OTYPER;
 8009bd8:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009bdc:	ea28 0807 	bic.w	r8, r8, r7
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009be0:	f3c1 1700 	ubfx	r7, r1, #4, #1
 8009be4:	409f      	lsls	r7, r3
 8009be6:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 8009bea:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8009bec:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009bee:	ea07 0805 	and.w	r8, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009bf2:	f8de 7008 	ldr.w	r7, [lr, #8]
 8009bf6:	fa07 f70c 	lsl.w	r7, r7, ip
 8009bfa:	ea47 0708 	orr.w	r7, r7, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009bfe:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8009c00:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009c02:	fa02 f20c 	lsl.w	r2, r2, ip
 8009c06:	f47f af6e 	bne.w	8009ae6 <HAL_GPIO_Init+0x3e>
        temp = GPIOx->AFR[position >> 3U];
 8009c0a:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 8009c0e:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009c12:	f003 0807 	and.w	r8, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8009c16:	f8d9 7020 	ldr.w	r7, [r9, #32]
 8009c1a:	9700      	str	r7, [sp, #0]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8009c1c:	f8de 7010 	ldr.w	r7, [lr, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009c20:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8009c24:	fa07 f708 	lsl.w	r7, r7, r8
 8009c28:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009c2a:	270f      	movs	r7, #15
 8009c2c:	fa07 f808 	lsl.w	r8, r7, r8
 8009c30:	9f00      	ldr	r7, [sp, #0]
 8009c32:	ea27 0808 	bic.w	r8, r7, r8
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8009c36:	9f01      	ldr	r7, [sp, #4]
 8009c38:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->AFR[position >> 3U] = temp;
 8009c3c:	f8c9 7020 	str.w	r7, [r9, #32]
 8009c40:	e751      	b.n	8009ae6 <HAL_GPIO_Init+0x3e>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009c42:	2503      	movs	r5, #3
 8009c44:	fa05 f50c 	lsl.w	r5, r5, ip
 8009c48:	43ed      	mvns	r5, r5
 8009c4a:	e7cf      	b.n	8009bec <HAL_GPIO_Init+0x144>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009c4c:	f04f 0803 	mov.w	r8, #3
 8009c50:	fa08 f707 	lsl.w	r7, r8, r7
 8009c54:	ea49 0907 	orr.w	r9, r9, r7
 8009c58:	e784      	b.n	8009b64 <HAL_GPIO_Init+0xbc>
 8009c5a:	fa0b f707 	lsl.w	r7, fp, r7
 8009c5e:	ea49 0907 	orr.w	r9, r9, r7
 8009c62:	e77f      	b.n	8009b64 <HAL_GPIO_Init+0xbc>
 8009c64:	f04f 0802 	mov.w	r8, #2
 8009c68:	fa08 f707 	lsl.w	r7, r8, r7
 8009c6c:	ea49 0907 	orr.w	r9, r9, r7
 8009c70:	e778      	b.n	8009b64 <HAL_GPIO_Init+0xbc>
 8009c72:	f04f 0804 	mov.w	r8, #4
 8009c76:	fa08 f707 	lsl.w	r7, r8, r7
 8009c7a:	ea49 0907 	orr.w	r9, r9, r7
 8009c7e:	e771      	b.n	8009b64 <HAL_GPIO_Init+0xbc>
 8009c80:	40010400 	.word	0x40010400
 8009c84:	40021000 	.word	0x40021000
 8009c88:	48000400 	.word	0x48000400
 8009c8c:	48000800 	.word	0x48000800
 8009c90:	48000c00 	.word	0x48000c00
 8009c94:	48001000 	.word	0x48001000
 8009c98:	48001400 	.word	0x48001400

08009c9c <HAL_PWREx_ControlVoltageScaling>:
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009c9c:	4a37      	ldr	r2, [pc, #220]	; (8009d7c <HAL_PWREx_ControlVoltageScaling+0xe0>)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8009c9e:	b960      	cbnz	r0, 8009cba <HAL_PWREx_ControlVoltageScaling+0x1e>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009ca0:	6813      	ldr	r3, [r2, #0]
 8009ca2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009ca6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009caa:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009cae:	d01d      	beq.n	8009cec <HAL_PWREx_ControlVoltageScaling+0x50>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009cb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009cb4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8009cb8:	4770      	bx	lr
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009cba:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8009cbe:	d007      	beq.n	8009cd0 <HAL_PWREx_ControlVoltageScaling+0x34>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8009cc0:	6813      	ldr	r3, [r2, #0]
 8009cc2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009cc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8009cca:	2000      	movs	r0, #0
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8009ccc:	6013      	str	r3, [r2, #0]
}
 8009cce:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009cd0:	6813      	ldr	r3, [r2, #0]
 8009cd2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009cd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009cda:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009cde:	d02b      	beq.n	8009d38 <HAL_PWREx_ControlVoltageScaling+0x9c>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009ce0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  return HAL_OK;
 8009ce4:	2000      	movs	r0, #0
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009ce6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8009cea:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009cec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009cf0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009cf4:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8009cf6:	4822      	ldr	r0, [pc, #136]	; (8009d80 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8009cf8:	4922      	ldr	r1, [pc, #136]	; (8009d84 <HAL_PWREx_ControlVoltageScaling+0xe8>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009cfa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009cfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009d02:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8009d04:	6803      	ldr	r3, [r0, #0]
 8009d06:	2032      	movs	r0, #50	; 0x32
 8009d08:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009d0c:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8009d0e:	fba1 1303 	umull	r1, r3, r1, r3
 8009d12:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009d14:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8009d16:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009d1a:	d506      	bpl.n	8009d2a <HAL_PWREx_ControlVoltageScaling+0x8e>
 8009d1c:	e000      	b.n	8009d20 <HAL_PWREx_ControlVoltageScaling+0x84>
 8009d1e:	b123      	cbz	r3, 8009d2a <HAL_PWREx_ControlVoltageScaling+0x8e>
 8009d20:	6951      	ldr	r1, [r2, #20]
 8009d22:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8009d24:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009d28:	d4f9      	bmi.n	8009d1e <HAL_PWREx_ControlVoltageScaling+0x82>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009d2a:	4b14      	ldr	r3, [pc, #80]	; (8009d7c <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8009d2c:	695b      	ldr	r3, [r3, #20]
 8009d2e:	055b      	lsls	r3, r3, #21
  return HAL_OK;
 8009d30:	bf54      	ite	pl
 8009d32:	2000      	movpl	r0, #0
        return HAL_TIMEOUT;
 8009d34:	2003      	movmi	r0, #3
 8009d36:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009d38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d3c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009d40:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8009d42:	480f      	ldr	r0, [pc, #60]	; (8009d80 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8009d44:	490f      	ldr	r1, [pc, #60]	; (8009d84 <HAL_PWREx_ControlVoltageScaling+0xe8>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009d46:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009d4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009d4e:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8009d50:	6803      	ldr	r3, [r0, #0]
 8009d52:	2032      	movs	r0, #50	; 0x32
 8009d54:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009d58:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8009d5a:	fba1 1303 	umull	r1, r3, r1, r3
 8009d5e:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009d60:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8009d62:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009d66:	d5e0      	bpl.n	8009d2a <HAL_PWREx_ControlVoltageScaling+0x8e>
 8009d68:	e001      	b.n	8009d6e <HAL_PWREx_ControlVoltageScaling+0xd2>
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d0dd      	beq.n	8009d2a <HAL_PWREx_ControlVoltageScaling+0x8e>
 8009d6e:	6951      	ldr	r1, [r2, #20]
 8009d70:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8009d72:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009d76:	d5d8      	bpl.n	8009d2a <HAL_PWREx_ControlVoltageScaling+0x8e>
 8009d78:	e7f7      	b.n	8009d6a <HAL_PWREx_ControlVoltageScaling+0xce>
 8009d7a:	bf00      	nop
 8009d7c:	40007000 	.word	0x40007000
 8009d80:	20001b04 	.word	0x20001b04
 8009d84:	431bde83 	.word	0x431bde83

08009d88 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8009d88:	4a02      	ldr	r2, [pc, #8]	; (8009d94 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 8009d8a:	6893      	ldr	r3, [r2, #8]
 8009d8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009d90:	6093      	str	r3, [r2, #8]
}
 8009d92:	4770      	bx	lr
 8009d94:	40007000 	.word	0x40007000

08009d98 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009d98:	2800      	cmp	r0, #0
 8009d9a:	f000 81c3 	beq.w	800a124 <HAL_RCC_OscConfig+0x38c>
{
 8009d9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009da2:	6803      	ldr	r3, [r0, #0]
 8009da4:	07d9      	lsls	r1, r3, #31
{
 8009da6:	b082      	sub	sp, #8
 8009da8:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009daa:	d52d      	bpl.n	8009e08 <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009dac:	49a6      	ldr	r1, [pc, #664]	; (800a048 <HAL_RCC_OscConfig+0x2b0>)
 8009dae:	688a      	ldr	r2, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009db0:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009db2:	f002 020c 	and.w	r2, r2, #12

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8009db6:	2a0c      	cmp	r2, #12
 8009db8:	f000 810a 	beq.w	8009fd0 <HAL_RCC_OscConfig+0x238>
 8009dbc:	2a08      	cmp	r2, #8
 8009dbe:	f000 810c 	beq.w	8009fda <HAL_RCC_OscConfig+0x242>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009dc2:	6863      	ldr	r3, [r4, #4]
 8009dc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009dc8:	f000 8133 	beq.w	800a032 <HAL_RCC_OscConfig+0x29a>
 8009dcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009dd0:	f000 819b 	beq.w	800a10a <HAL_RCC_OscConfig+0x372>
 8009dd4:	4d9c      	ldr	r5, [pc, #624]	; (800a048 <HAL_RCC_OscConfig+0x2b0>)
 8009dd6:	682a      	ldr	r2, [r5, #0]
 8009dd8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009ddc:	602a      	str	r2, [r5, #0]
 8009dde:	682a      	ldr	r2, [r5, #0]
 8009de0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009de4:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	f040 8128 	bne.w	800a03c <HAL_RCC_OscConfig+0x2a4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009dec:	f7fe fd38 	bl	8008860 <HAL_GetTick>
 8009df0:	4606      	mov	r6, r0

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009df2:	e005      	b.n	8009e00 <HAL_RCC_OscConfig+0x68>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009df4:	f7fe fd34 	bl	8008860 <HAL_GetTick>
 8009df8:	1b80      	subs	r0, r0, r6
 8009dfa:	2864      	cmp	r0, #100	; 0x64
 8009dfc:	f200 8142 	bhi.w	800a084 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009e00:	682b      	ldr	r3, [r5, #0]
 8009e02:	039f      	lsls	r7, r3, #14
 8009e04:	d4f6      	bmi.n	8009df4 <HAL_RCC_OscConfig+0x5c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009e06:	6823      	ldr	r3, [r4, #0]
 8009e08:	079e      	lsls	r6, r3, #30
 8009e0a:	d528      	bpl.n	8009e5e <HAL_RCC_OscConfig+0xc6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009e0c:	4a8e      	ldr	r2, [pc, #568]	; (800a048 <HAL_RCC_OscConfig+0x2b0>)
 8009e0e:	6893      	ldr	r3, [r2, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009e10:	68d2      	ldr	r2, [r2, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009e12:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8009e16:	2b0c      	cmp	r3, #12
 8009e18:	f000 80ec 	beq.w	8009ff4 <HAL_RCC_OscConfig+0x25c>
 8009e1c:	2b04      	cmp	r3, #4
 8009e1e:	f000 80ee 	beq.w	8009ffe <HAL_RCC_OscConfig+0x266>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009e22:	68e3      	ldr	r3, [r4, #12]
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009e24:	4d88      	ldr	r5, [pc, #544]	; (800a048 <HAL_RCC_OscConfig+0x2b0>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	f000 811d 	beq.w	800a066 <HAL_RCC_OscConfig+0x2ce>
        __HAL_RCC_HSI_ENABLE();
 8009e2c:	682b      	ldr	r3, [r5, #0]
 8009e2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e32:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e34:	f7fe fd14 	bl	8008860 <HAL_GetTick>
 8009e38:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009e3a:	e005      	b.n	8009e48 <HAL_RCC_OscConfig+0xb0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009e3c:	f7fe fd10 	bl	8008860 <HAL_GetTick>
 8009e40:	1b80      	subs	r0, r0, r6
 8009e42:	2802      	cmp	r0, #2
 8009e44:	f200 811e 	bhi.w	800a084 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009e48:	682b      	ldr	r3, [r5, #0]
 8009e4a:	0558      	lsls	r0, r3, #21
 8009e4c:	d5f6      	bpl.n	8009e3c <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009e4e:	686b      	ldr	r3, [r5, #4]
 8009e50:	6922      	ldr	r2, [r4, #16]
 8009e52:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8009e56:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009e5a:	606b      	str	r3, [r5, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009e5c:	6823      	ldr	r3, [r4, #0]
 8009e5e:	071a      	lsls	r2, r3, #28
 8009e60:	d519      	bpl.n	8009e96 <HAL_RCC_OscConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009e62:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009e64:	4d78      	ldr	r5, [pc, #480]	; (800a048 <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	f000 809e 	beq.w	8009fa8 <HAL_RCC_OscConfig+0x210>
      __HAL_RCC_LSI_ENABLE();
 8009e6c:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8009e70:	f043 0301 	orr.w	r3, r3, #1
 8009e74:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e78:	f7fe fcf2 	bl	8008860 <HAL_GetTick>
 8009e7c:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009e7e:	e005      	b.n	8009e8c <HAL_RCC_OscConfig+0xf4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009e80:	f7fe fcee 	bl	8008860 <HAL_GetTick>
 8009e84:	1b80      	subs	r0, r0, r6
 8009e86:	2802      	cmp	r0, #2
 8009e88:	f200 80fc 	bhi.w	800a084 <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009e8c:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8009e90:	079f      	lsls	r7, r3, #30
 8009e92:	d5f5      	bpl.n	8009e80 <HAL_RCC_OscConfig+0xe8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009e94:	6823      	ldr	r3, [r4, #0]
 8009e96:	0759      	lsls	r1, r3, #29
 8009e98:	d541      	bpl.n	8009f1e <HAL_RCC_OscConfig+0x186>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009e9a:	4b6b      	ldr	r3, [pc, #428]	; (800a048 <HAL_RCC_OscConfig+0x2b0>)
 8009e9c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009e9e:	00d2      	lsls	r2, r2, #3
 8009ea0:	f100 80f4 	bmi.w	800a08c <HAL_RCC_OscConfig+0x2f4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009ea4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009ea6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009eaa:	659a      	str	r2, [r3, #88]	; 0x58
 8009eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009eb2:	9301      	str	r3, [sp, #4]
 8009eb4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8009eb6:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009eb8:	4e64      	ldr	r6, [pc, #400]	; (800a04c <HAL_RCC_OscConfig+0x2b4>)
 8009eba:	6833      	ldr	r3, [r6, #0]
 8009ebc:	05df      	lsls	r7, r3, #23
 8009ebe:	f140 8113 	bpl.w	800a0e8 <HAL_RCC_OscConfig+0x350>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009ec2:	68a3      	ldr	r3, [r4, #8]
 8009ec4:	2b01      	cmp	r3, #1
 8009ec6:	f000 80e3 	beq.w	800a090 <HAL_RCC_OscConfig+0x2f8>
 8009eca:	2b05      	cmp	r3, #5
 8009ecc:	f000 8169 	beq.w	800a1a2 <HAL_RCC_OscConfig+0x40a>
 8009ed0:	4e5d      	ldr	r6, [pc, #372]	; (800a048 <HAL_RCC_OscConfig+0x2b0>)
 8009ed2:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8009ed6:	f022 0201 	bic.w	r2, r2, #1
 8009eda:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
 8009ede:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8009ee2:	f022 0204 	bic.w	r2, r2, #4
 8009ee6:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	f040 80d7 	bne.w	800a09e <HAL_RCC_OscConfig+0x306>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009ef0:	f7fe fcb6 	bl	8008860 <HAL_GetTick>

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009ef4:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8009ef8:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009efa:	e005      	b.n	8009f08 <HAL_RCC_OscConfig+0x170>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009efc:	f7fe fcb0 	bl	8008860 <HAL_GetTick>
 8009f00:	1bc0      	subs	r0, r0, r7
 8009f02:	4540      	cmp	r0, r8
 8009f04:	f200 80be 	bhi.w	800a084 <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009f08:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8009f0c:	079a      	lsls	r2, r3, #30
 8009f0e:	d4f5      	bmi.n	8009efc <HAL_RCC_OscConfig+0x164>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009f10:	b125      	cbz	r5, 8009f1c <HAL_RCC_OscConfig+0x184>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009f12:	4a4d      	ldr	r2, [pc, #308]	; (800a048 <HAL_RCC_OscConfig+0x2b0>)
 8009f14:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009f16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009f1a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009f1c:	6823      	ldr	r3, [r4, #0]
 8009f1e:	069b      	lsls	r3, r3, #26
 8009f20:	d518      	bpl.n	8009f54 <HAL_RCC_OscConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009f22:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009f24:	4d48      	ldr	r5, [pc, #288]	; (800a048 <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	f000 80ca 	beq.w	800a0c0 <HAL_RCC_OscConfig+0x328>
      __HAL_RCC_HSI48_ENABLE();
 8009f2c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8009f30:	f043 0301 	orr.w	r3, r3, #1
 8009f34:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009f38:	f7fe fc92 	bl	8008860 <HAL_GetTick>
 8009f3c:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009f3e:	e005      	b.n	8009f4c <HAL_RCC_OscConfig+0x1b4>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009f40:	f7fe fc8e 	bl	8008860 <HAL_GetTick>
 8009f44:	1b80      	subs	r0, r0, r6
 8009f46:	2802      	cmp	r0, #2
 8009f48:	f200 809c 	bhi.w	800a084 <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009f4c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8009f50:	079f      	lsls	r7, r3, #30
 8009f52:	d5f5      	bpl.n	8009f40 <HAL_RCC_OscConfig+0x1a8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009f54:	69e0      	ldr	r0, [r4, #28]
 8009f56:	b318      	cbz	r0, 8009fa0 <HAL_RCC_OscConfig+0x208>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009f58:	4d3b      	ldr	r5, [pc, #236]	; (800a048 <HAL_RCC_OscConfig+0x2b0>)
 8009f5a:	68ab      	ldr	r3, [r5, #8]
 8009f5c:	f003 030c 	and.w	r3, r3, #12
 8009f60:	2b0c      	cmp	r3, #12
 8009f62:	f000 812c 	beq.w	800a1be <HAL_RCC_OscConfig+0x426>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009f66:	682b      	ldr	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009f68:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8009f6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009f6e:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009f70:	f000 80da 	beq.w	800a128 <HAL_RCC_OscConfig+0x390>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8009f74:	68eb      	ldr	r3, [r5, #12]
 8009f76:	f023 0303 	bic.w	r3, r3, #3
 8009f7a:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8009f7c:	68eb      	ldr	r3, [r5, #12]
 8009f7e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8009f82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009f86:	60eb      	str	r3, [r5, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f88:	f7fe fc6a 	bl	8008860 <HAL_GetTick>
 8009f8c:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009f8e:	e004      	b.n	8009f9a <HAL_RCC_OscConfig+0x202>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009f90:	f7fe fc66 	bl	8008860 <HAL_GetTick>
 8009f94:	1b00      	subs	r0, r0, r4
 8009f96:	2802      	cmp	r0, #2
 8009f98:	d874      	bhi.n	800a084 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009f9a:	682b      	ldr	r3, [r5, #0]
 8009f9c:	019b      	lsls	r3, r3, #6
 8009f9e:	d4f7      	bmi.n	8009f90 <HAL_RCC_OscConfig+0x1f8>
      }
    }
  }
  }

  return HAL_OK;
 8009fa0:	2000      	movs	r0, #0
}
 8009fa2:	b002      	add	sp, #8
 8009fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8009fa8:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8009fac:	f023 0301 	bic.w	r3, r3, #1
 8009fb0:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 8009fb4:	f7fe fc54 	bl	8008860 <HAL_GetTick>
 8009fb8:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009fba:	e004      	b.n	8009fc6 <HAL_RCC_OscConfig+0x22e>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009fbc:	f7fe fc50 	bl	8008860 <HAL_GetTick>
 8009fc0:	1b80      	subs	r0, r0, r6
 8009fc2:	2802      	cmp	r0, #2
 8009fc4:	d85e      	bhi.n	800a084 <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009fc6:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8009fca:	0798      	lsls	r0, r3, #30
 8009fcc:	d4f6      	bmi.n	8009fbc <HAL_RCC_OscConfig+0x224>
 8009fce:	e761      	b.n	8009e94 <HAL_RCC_OscConfig+0xfc>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009fd0:	f001 0103 	and.w	r1, r1, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8009fd4:	2903      	cmp	r1, #3
 8009fd6:	f47f aef4 	bne.w	8009dc2 <HAL_RCC_OscConfig+0x2a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009fda:	4a1b      	ldr	r2, [pc, #108]	; (800a048 <HAL_RCC_OscConfig+0x2b0>)
 8009fdc:	6812      	ldr	r2, [r2, #0]
 8009fde:	0392      	lsls	r2, r2, #14
 8009fe0:	f57f af12 	bpl.w	8009e08 <HAL_RCC_OscConfig+0x70>
 8009fe4:	6862      	ldr	r2, [r4, #4]
 8009fe6:	2a00      	cmp	r2, #0
 8009fe8:	f47f af0e 	bne.w	8009e08 <HAL_RCC_OscConfig+0x70>
        return HAL_ERROR;
 8009fec:	2001      	movs	r0, #1
}
 8009fee:	b002      	add	sp, #8
 8009ff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009ff4:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8009ff8:	2a02      	cmp	r2, #2
 8009ffa:	f47f af12 	bne.w	8009e22 <HAL_RCC_OscConfig+0x8a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009ffe:	4b12      	ldr	r3, [pc, #72]	; (800a048 <HAL_RCC_OscConfig+0x2b0>)
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	055d      	lsls	r5, r3, #21
 800a004:	d502      	bpl.n	800a00c <HAL_RCC_OscConfig+0x274>
 800a006:	68e3      	ldr	r3, [r4, #12]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d0ef      	beq.n	8009fec <HAL_RCC_OscConfig+0x254>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a00c:	4a0e      	ldr	r2, [pc, #56]	; (800a048 <HAL_RCC_OscConfig+0x2b0>)
 800a00e:	6920      	ldr	r0, [r4, #16]
 800a010:	6853      	ldr	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800a012:	490f      	ldr	r1, [pc, #60]	; (800a050 <HAL_RCC_OscConfig+0x2b8>)
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a014:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800a018:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800a01c:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800a01e:	6808      	ldr	r0, [r1, #0]
 800a020:	f7fe fbd4 	bl	80087cc <HAL_InitTick>
 800a024:	2800      	cmp	r0, #0
 800a026:	d1e1      	bne.n	8009fec <HAL_RCC_OscConfig+0x254>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a028:	6823      	ldr	r3, [r4, #0]
 800a02a:	071a      	lsls	r2, r3, #28
 800a02c:	f57f af33 	bpl.w	8009e96 <HAL_RCC_OscConfig+0xfe>
 800a030:	e717      	b.n	8009e62 <HAL_RCC_OscConfig+0xca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a032:	4a05      	ldr	r2, [pc, #20]	; (800a048 <HAL_RCC_OscConfig+0x2b0>)
 800a034:	6813      	ldr	r3, [r2, #0]
 800a036:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a03a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800a03c:	f7fe fc10 	bl	8008860 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a040:	4e01      	ldr	r6, [pc, #4]	; (800a048 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 800a042:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a044:	e00b      	b.n	800a05e <HAL_RCC_OscConfig+0x2c6>
 800a046:	bf00      	nop
 800a048:	40021000 	.word	0x40021000
 800a04c:	40007000 	.word	0x40007000
 800a050:	20001b0c 	.word	0x20001b0c
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a054:	f7fe fc04 	bl	8008860 <HAL_GetTick>
 800a058:	1b40      	subs	r0, r0, r5
 800a05a:	2864      	cmp	r0, #100	; 0x64
 800a05c:	d812      	bhi.n	800a084 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a05e:	6833      	ldr	r3, [r6, #0]
 800a060:	039b      	lsls	r3, r3, #14
 800a062:	d5f7      	bpl.n	800a054 <HAL_RCC_OscConfig+0x2bc>
 800a064:	e6cf      	b.n	8009e06 <HAL_RCC_OscConfig+0x6e>
        __HAL_RCC_HSI_DISABLE();
 800a066:	682b      	ldr	r3, [r5, #0]
 800a068:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a06c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800a06e:	f7fe fbf7 	bl	8008860 <HAL_GetTick>
 800a072:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a074:	682b      	ldr	r3, [r5, #0]
 800a076:	0559      	lsls	r1, r3, #21
 800a078:	d5d6      	bpl.n	800a028 <HAL_RCC_OscConfig+0x290>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a07a:	f7fe fbf1 	bl	8008860 <HAL_GetTick>
 800a07e:	1b80      	subs	r0, r0, r6
 800a080:	2802      	cmp	r0, #2
 800a082:	d9f7      	bls.n	800a074 <HAL_RCC_OscConfig+0x2dc>
            return HAL_TIMEOUT;
 800a084:	2003      	movs	r0, #3
}
 800a086:	b002      	add	sp, #8
 800a088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FlagStatus       pwrclkchanged = RESET;
 800a08c:	2500      	movs	r5, #0
 800a08e:	e713      	b.n	8009eb8 <HAL_RCC_OscConfig+0x120>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a090:	4a65      	ldr	r2, [pc, #404]	; (800a228 <HAL_RCC_OscConfig+0x490>)
 800a092:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800a096:	f043 0301 	orr.w	r3, r3, #1
 800a09a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 800a09e:	f7fe fbdf 	bl	8008860 <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a0a2:	4f61      	ldr	r7, [pc, #388]	; (800a228 <HAL_RCC_OscConfig+0x490>)
      tickstart = HAL_GetTick();
 800a0a4:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a0a6:	f241 3888 	movw	r8, #5000	; 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a0aa:	e004      	b.n	800a0b6 <HAL_RCC_OscConfig+0x31e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a0ac:	f7fe fbd8 	bl	8008860 <HAL_GetTick>
 800a0b0:	1b80      	subs	r0, r0, r6
 800a0b2:	4540      	cmp	r0, r8
 800a0b4:	d8e6      	bhi.n	800a084 <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a0b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a0ba:	0799      	lsls	r1, r3, #30
 800a0bc:	d5f6      	bpl.n	800a0ac <HAL_RCC_OscConfig+0x314>
 800a0be:	e727      	b.n	8009f10 <HAL_RCC_OscConfig+0x178>
      __HAL_RCC_HSI48_DISABLE();
 800a0c0:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800a0c4:	f023 0301 	bic.w	r3, r3, #1
 800a0c8:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 800a0cc:	f7fe fbc8 	bl	8008860 <HAL_GetTick>
 800a0d0:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a0d2:	e004      	b.n	800a0de <HAL_RCC_OscConfig+0x346>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a0d4:	f7fe fbc4 	bl	8008860 <HAL_GetTick>
 800a0d8:	1b80      	subs	r0, r0, r6
 800a0da:	2802      	cmp	r0, #2
 800a0dc:	d8d2      	bhi.n	800a084 <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a0de:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800a0e2:	0798      	lsls	r0, r3, #30
 800a0e4:	d4f6      	bmi.n	800a0d4 <HAL_RCC_OscConfig+0x33c>
 800a0e6:	e735      	b.n	8009f54 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a0e8:	6833      	ldr	r3, [r6, #0]
 800a0ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a0ee:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800a0f0:	f7fe fbb6 	bl	8008860 <HAL_GetTick>
 800a0f4:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a0f6:	6833      	ldr	r3, [r6, #0]
 800a0f8:	05d8      	lsls	r0, r3, #23
 800a0fa:	f53f aee2 	bmi.w	8009ec2 <HAL_RCC_OscConfig+0x12a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a0fe:	f7fe fbaf 	bl	8008860 <HAL_GetTick>
 800a102:	1bc0      	subs	r0, r0, r7
 800a104:	2802      	cmp	r0, #2
 800a106:	d9f6      	bls.n	800a0f6 <HAL_RCC_OscConfig+0x35e>
 800a108:	e7bc      	b.n	800a084 <HAL_RCC_OscConfig+0x2ec>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a10a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a10e:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 800a112:	681a      	ldr	r2, [r3, #0]
 800a114:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800a118:	601a      	str	r2, [r3, #0]
 800a11a:	681a      	ldr	r2, [r3, #0]
 800a11c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800a120:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a122:	e78b      	b.n	800a03c <HAL_RCC_OscConfig+0x2a4>
    return HAL_ERROR;
 800a124:	2001      	movs	r0, #1
}
 800a126:	4770      	bx	lr
        tickstart = HAL_GetTick();
 800a128:	f7fe fb9a 	bl	8008860 <HAL_GetTick>
 800a12c:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a12e:	e004      	b.n	800a13a <HAL_RCC_OscConfig+0x3a2>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a130:	f7fe fb96 	bl	8008860 <HAL_GetTick>
 800a134:	1b80      	subs	r0, r0, r6
 800a136:	2802      	cmp	r0, #2
 800a138:	d8a4      	bhi.n	800a084 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a13a:	682b      	ldr	r3, [r5, #0]
 800a13c:	0199      	lsls	r1, r3, #6
 800a13e:	d4f7      	bmi.n	800a130 <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a140:	68e9      	ldr	r1, [r5, #12]
 800a142:	4b3a      	ldr	r3, [pc, #232]	; (800a22c <HAL_RCC_OscConfig+0x494>)
 800a144:	6a22      	ldr	r2, [r4, #32]
 800a146:	6a60      	ldr	r0, [r4, #36]	; 0x24
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a148:	4e37      	ldr	r6, [pc, #220]	; (800a228 <HAL_RCC_OscConfig+0x490>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a14a:	400b      	ands	r3, r1
 800a14c:	4313      	orrs	r3, r2
 800a14e:	e9d4 120a 	ldrd	r1, r2, [r4, #40]	; 0x28
 800a152:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800a156:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 800a15a:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
 800a15e:	3801      	subs	r0, #1
 800a160:	0849      	lsrs	r1, r1, #1
 800a162:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 800a166:	3901      	subs	r1, #1
 800a168:	0852      	lsrs	r2, r2, #1
 800a16a:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 800a16e:	3a01      	subs	r2, #1
 800a170:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800a174:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 800a176:	682b      	ldr	r3, [r5, #0]
 800a178:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a17c:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a17e:	68eb      	ldr	r3, [r5, #12]
 800a180:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a184:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 800a186:	f7fe fb6b 	bl	8008860 <HAL_GetTick>
 800a18a:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a18c:	e005      	b.n	800a19a <HAL_RCC_OscConfig+0x402>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a18e:	f7fe fb67 	bl	8008860 <HAL_GetTick>
 800a192:	1b00      	subs	r0, r0, r4
 800a194:	2802      	cmp	r0, #2
 800a196:	f63f af75 	bhi.w	800a084 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a19a:	6833      	ldr	r3, [r6, #0]
 800a19c:	019a      	lsls	r2, r3, #6
 800a19e:	d5f6      	bpl.n	800a18e <HAL_RCC_OscConfig+0x3f6>
 800a1a0:	e6fe      	b.n	8009fa0 <HAL_RCC_OscConfig+0x208>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a1a2:	4b21      	ldr	r3, [pc, #132]	; (800a228 <HAL_RCC_OscConfig+0x490>)
 800a1a4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800a1a8:	f042 0204 	orr.w	r2, r2, #4
 800a1ac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800a1b0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800a1b4:	f042 0201 	orr.w	r2, r2, #1
 800a1b8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a1bc:	e76f      	b.n	800a09e <HAL_RCC_OscConfig+0x306>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a1be:	2801      	cmp	r0, #1
 800a1c0:	f43f aeef 	beq.w	8009fa2 <HAL_RCC_OscConfig+0x20a>
      temp_pllckcfg = RCC->PLLCFGR;
 800a1c4:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a1c6:	6a22      	ldr	r2, [r4, #32]
 800a1c8:	f003 0103 	and.w	r1, r3, #3
 800a1cc:	4291      	cmp	r1, r2
 800a1ce:	f47f af0d 	bne.w	8009fec <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a1d2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a1d4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a1d8:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a1da:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 800a1de:	f47f af05 	bne.w	8009fec <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800a1e2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800a1e4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a1e8:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 800a1ec:	f47f aefe 	bne.w	8009fec <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a1f0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800a1f2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800a1f6:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 800a1fa:	f47f aef7 	bne.w	8009fec <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a1fe:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800a200:	0852      	lsrs	r2, r2, #1
 800a202:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 800a206:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a208:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 800a20c:	f47f aeee 	bne.w	8009fec <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800a210:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800a212:	0852      	lsrs	r2, r2, #1
 800a214:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 800a218:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a21a:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
    return HAL_ERROR;
 800a21e:	bf14      	ite	ne
 800a220:	2001      	movne	r0, #1
 800a222:	2000      	moveq	r0, #0
 800a224:	e6bd      	b.n	8009fa2 <HAL_RCC_OscConfig+0x20a>
 800a226:	bf00      	nop
 800a228:	40021000 	.word	0x40021000
 800a22c:	019f800c 	.word	0x019f800c

0800a230 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800a230:	4b18      	ldr	r3, [pc, #96]	; (800a294 <HAL_RCC_GetSysClockFreq+0x64>)
 800a232:	689a      	ldr	r2, [r3, #8]
 800a234:	f002 020c 	and.w	r2, r2, #12
 800a238:	2a04      	cmp	r2, #4
 800a23a:	d026      	beq.n	800a28a <HAL_RCC_GetSysClockFreq+0x5a>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800a23c:	689a      	ldr	r2, [r3, #8]
 800a23e:	f002 020c 	and.w	r2, r2, #12
 800a242:	2a08      	cmp	r2, #8
 800a244:	d023      	beq.n	800a28e <HAL_RCC_GetSysClockFreq+0x5e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800a246:	689a      	ldr	r2, [r3, #8]
 800a248:	f002 020c 	and.w	r2, r2, #12
 800a24c:	2a0c      	cmp	r2, #12
 800a24e:	d001      	beq.n	800a254 <HAL_RCC_GetSysClockFreq+0x24>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 800a250:	2000      	movs	r0, #0
  }

  return sysclockfreq;
}
 800a252:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a254:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a256:	68da      	ldr	r2, [r3, #12]
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a258:	68d8      	ldr	r0, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a25a:	f001 0103 	and.w	r1, r1, #3
    switch (pllsource)
 800a25e:	2903      	cmp	r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a260:	f3c2 1203 	ubfx	r2, r2, #4, #4
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a264:	f3c0 2006 	ubfx	r0, r0, #8, #7
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a268:	bf0c      	ite	eq
 800a26a:	4b0b      	ldreq	r3, [pc, #44]	; (800a298 <HAL_RCC_GetSysClockFreq+0x68>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a26c:	4b0b      	ldrne	r3, [pc, #44]	; (800a29c <HAL_RCC_GetSysClockFreq+0x6c>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a26e:	3201      	adds	r2, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a270:	fbb3 f3f2 	udiv	r3, r3, r2
 800a274:	fb03 f000 	mul.w	r0, r3, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a278:	4b06      	ldr	r3, [pc, #24]	; (800a294 <HAL_RCC_GetSysClockFreq+0x64>)
 800a27a:	68db      	ldr	r3, [r3, #12]
 800a27c:	f3c3 6341 	ubfx	r3, r3, #25, #2
 800a280:	3301      	adds	r3, #1
 800a282:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 800a284:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 800a288:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 800a28a:	4804      	ldr	r0, [pc, #16]	; (800a29c <HAL_RCC_GetSysClockFreq+0x6c>)
 800a28c:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 800a28e:	4802      	ldr	r0, [pc, #8]	; (800a298 <HAL_RCC_GetSysClockFreq+0x68>)
 800a290:	4770      	bx	lr
 800a292:	bf00      	nop
 800a294:	40021000 	.word	0x40021000
 800a298:	016e3600 	.word	0x016e3600
 800a29c:	00f42400 	.word	0x00f42400

0800a2a0 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800a2a0:	2800      	cmp	r0, #0
 800a2a2:	f000 80ee 	beq.w	800a482 <HAL_RCC_ClockConfig+0x1e2>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a2a6:	4a78      	ldr	r2, [pc, #480]	; (800a488 <HAL_RCC_ClockConfig+0x1e8>)
{
 800a2a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a2ac:	6813      	ldr	r3, [r2, #0]
 800a2ae:	f003 030f 	and.w	r3, r3, #15
 800a2b2:	428b      	cmp	r3, r1
 800a2b4:	460d      	mov	r5, r1
 800a2b6:	4604      	mov	r4, r0
 800a2b8:	d20c      	bcs.n	800a2d4 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a2ba:	6813      	ldr	r3, [r2, #0]
 800a2bc:	f023 030f 	bic.w	r3, r3, #15
 800a2c0:	430b      	orrs	r3, r1
 800a2c2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a2c4:	6813      	ldr	r3, [r2, #0]
 800a2c6:	f003 030f 	and.w	r3, r3, #15
 800a2ca:	428b      	cmp	r3, r1
 800a2cc:	d002      	beq.n	800a2d4 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 800a2ce:	2001      	movs	r0, #1
}
 800a2d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a2d4:	6823      	ldr	r3, [r4, #0]
 800a2d6:	07df      	lsls	r7, r3, #31
 800a2d8:	d569      	bpl.n	800a3ae <HAL_RCC_ClockConfig+0x10e>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a2da:	6867      	ldr	r7, [r4, #4]
 800a2dc:	2f03      	cmp	r7, #3
 800a2de:	f000 80a0 	beq.w	800a422 <HAL_RCC_ClockConfig+0x182>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a2e2:	4b6a      	ldr	r3, [pc, #424]	; (800a48c <HAL_RCC_ClockConfig+0x1ec>)
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a2e4:	2f02      	cmp	r7, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a2e6:	681b      	ldr	r3, [r3, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a2e8:	f000 8097 	beq.w	800a41a <HAL_RCC_ClockConfig+0x17a>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a2ec:	055b      	lsls	r3, r3, #21
 800a2ee:	d5ee      	bpl.n	800a2ce <HAL_RCC_ClockConfig+0x2e>
      pllfreq = HAL_RCC_GetSysClockFreq();
 800a2f0:	f7ff ff9e 	bl	800a230 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 800a2f4:	4b66      	ldr	r3, [pc, #408]	; (800a490 <HAL_RCC_ClockConfig+0x1f0>)
 800a2f6:	4298      	cmp	r0, r3
 800a2f8:	f240 80c0 	bls.w	800a47c <HAL_RCC_ClockConfig+0x1dc>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800a2fc:	4a63      	ldr	r2, [pc, #396]	; (800a48c <HAL_RCC_ClockConfig+0x1ec>)
 800a2fe:	6893      	ldr	r3, [r2, #8]
 800a300:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a304:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a308:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800a30a:	f04f 0980 	mov.w	r9, #128	; 0x80
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a30e:	4e5f      	ldr	r6, [pc, #380]	; (800a48c <HAL_RCC_ClockConfig+0x1ec>)
 800a310:	68b3      	ldr	r3, [r6, #8]
 800a312:	f023 0303 	bic.w	r3, r3, #3
 800a316:	433b      	orrs	r3, r7
 800a318:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800a31a:	f7fe faa1 	bl	8008860 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a31e:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800a322:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a324:	e004      	b.n	800a330 <HAL_RCC_ClockConfig+0x90>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a326:	f7fe fa9b 	bl	8008860 <HAL_GetTick>
 800a32a:	1bc0      	subs	r0, r0, r7
 800a32c:	4540      	cmp	r0, r8
 800a32e:	d871      	bhi.n	800a414 <HAL_RCC_ClockConfig+0x174>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a330:	68b3      	ldr	r3, [r6, #8]
 800a332:	6862      	ldr	r2, [r4, #4]
 800a334:	f003 030c 	and.w	r3, r3, #12
 800a338:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800a33c:	d1f3      	bne.n	800a326 <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a33e:	6823      	ldr	r3, [r4, #0]
 800a340:	079f      	lsls	r7, r3, #30
 800a342:	d436      	bmi.n	800a3b2 <HAL_RCC_ClockConfig+0x112>
    if(hpre == RCC_SYSCLK_DIV2)
 800a344:	f1b9 0f00 	cmp.w	r9, #0
 800a348:	d003      	beq.n	800a352 <HAL_RCC_ClockConfig+0xb2>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800a34a:	68b3      	ldr	r3, [r6, #8]
 800a34c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a350:	60b3      	str	r3, [r6, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a352:	4e4d      	ldr	r6, [pc, #308]	; (800a488 <HAL_RCC_ClockConfig+0x1e8>)
 800a354:	6833      	ldr	r3, [r6, #0]
 800a356:	f003 030f 	and.w	r3, r3, #15
 800a35a:	42ab      	cmp	r3, r5
 800a35c:	d846      	bhi.n	800a3ec <HAL_RCC_ClockConfig+0x14c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a35e:	6823      	ldr	r3, [r4, #0]
 800a360:	075a      	lsls	r2, r3, #29
 800a362:	d506      	bpl.n	800a372 <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a364:	4949      	ldr	r1, [pc, #292]	; (800a48c <HAL_RCC_ClockConfig+0x1ec>)
 800a366:	68e0      	ldr	r0, [r4, #12]
 800a368:	688a      	ldr	r2, [r1, #8]
 800a36a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800a36e:	4302      	orrs	r2, r0
 800a370:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a372:	071b      	lsls	r3, r3, #28
 800a374:	d507      	bpl.n	800a386 <HAL_RCC_ClockConfig+0xe6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a376:	4a45      	ldr	r2, [pc, #276]	; (800a48c <HAL_RCC_ClockConfig+0x1ec>)
 800a378:	6921      	ldr	r1, [r4, #16]
 800a37a:	6893      	ldr	r3, [r2, #8]
 800a37c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800a380:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800a384:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a386:	f7ff ff53 	bl	800a230 <HAL_RCC_GetSysClockFreq>
 800a38a:	4a40      	ldr	r2, [pc, #256]	; (800a48c <HAL_RCC_ClockConfig+0x1ec>)
 800a38c:	4c41      	ldr	r4, [pc, #260]	; (800a494 <HAL_RCC_ClockConfig+0x1f4>)
 800a38e:	6892      	ldr	r2, [r2, #8]
 800a390:	4941      	ldr	r1, [pc, #260]	; (800a498 <HAL_RCC_ClockConfig+0x1f8>)
 800a392:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800a396:	4603      	mov	r3, r0
 800a398:	5ca2      	ldrb	r2, [r4, r2]
  return HAL_InitTick(uwTickPrio);
 800a39a:	4840      	ldr	r0, [pc, #256]	; (800a49c <HAL_RCC_ClockConfig+0x1fc>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a39c:	f002 021f 	and.w	r2, r2, #31
 800a3a0:	40d3      	lsrs	r3, r2
 800a3a2:	600b      	str	r3, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 800a3a4:	6800      	ldr	r0, [r0, #0]
}
 800a3a6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 800a3aa:	f7fe ba0f 	b.w	80087cc <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a3ae:	079e      	lsls	r6, r3, #30
 800a3b0:	d5cf      	bpl.n	800a352 <HAL_RCC_ClockConfig+0xb2>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a3b2:	0758      	lsls	r0, r3, #29
 800a3b4:	d504      	bpl.n	800a3c0 <HAL_RCC_ClockConfig+0x120>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a3b6:	4935      	ldr	r1, [pc, #212]	; (800a48c <HAL_RCC_ClockConfig+0x1ec>)
 800a3b8:	688a      	ldr	r2, [r1, #8]
 800a3ba:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800a3be:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a3c0:	0719      	lsls	r1, r3, #28
 800a3c2:	d506      	bpl.n	800a3d2 <HAL_RCC_ClockConfig+0x132>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800a3c4:	4a31      	ldr	r2, [pc, #196]	; (800a48c <HAL_RCC_ClockConfig+0x1ec>)
 800a3c6:	6893      	ldr	r3, [r2, #8]
 800a3c8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a3cc:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800a3d0:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a3d2:	4a2e      	ldr	r2, [pc, #184]	; (800a48c <HAL_RCC_ClockConfig+0x1ec>)
 800a3d4:	68a1      	ldr	r1, [r4, #8]
 800a3d6:	6893      	ldr	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a3d8:	4e2b      	ldr	r6, [pc, #172]	; (800a488 <HAL_RCC_ClockConfig+0x1e8>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a3da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a3de:	430b      	orrs	r3, r1
 800a3e0:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a3e2:	6833      	ldr	r3, [r6, #0]
 800a3e4:	f003 030f 	and.w	r3, r3, #15
 800a3e8:	42ab      	cmp	r3, r5
 800a3ea:	d9b8      	bls.n	800a35e <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a3ec:	6833      	ldr	r3, [r6, #0]
 800a3ee:	f023 030f 	bic.w	r3, r3, #15
 800a3f2:	432b      	orrs	r3, r5
 800a3f4:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800a3f6:	f7fe fa33 	bl	8008860 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a3fa:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800a3fe:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a400:	6833      	ldr	r3, [r6, #0]
 800a402:	f003 030f 	and.w	r3, r3, #15
 800a406:	42ab      	cmp	r3, r5
 800a408:	d0a9      	beq.n	800a35e <HAL_RCC_ClockConfig+0xbe>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a40a:	f7fe fa29 	bl	8008860 <HAL_GetTick>
 800a40e:	1bc0      	subs	r0, r0, r7
 800a410:	4540      	cmp	r0, r8
 800a412:	d9f5      	bls.n	800a400 <HAL_RCC_ClockConfig+0x160>
        return HAL_TIMEOUT;
 800a414:	2003      	movs	r0, #3
}
 800a416:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a41a:	039a      	lsls	r2, r3, #14
 800a41c:	f53f af68 	bmi.w	800a2f0 <HAL_RCC_ClockConfig+0x50>
 800a420:	e755      	b.n	800a2ce <HAL_RCC_ClockConfig+0x2e>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a422:	4a1a      	ldr	r2, [pc, #104]	; (800a48c <HAL_RCC_ClockConfig+0x1ec>)
 800a424:	6811      	ldr	r1, [r2, #0]
 800a426:	0188      	lsls	r0, r1, #6
 800a428:	f57f af51 	bpl.w	800a2ce <HAL_RCC_ClockConfig+0x2e>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a42c:	68d0      	ldr	r0, [r2, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a42e:	68d1      	ldr	r1, [r2, #12]
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a430:	68d2      	ldr	r2, [r2, #12]
      if(pllfreq > 80000000U)
 800a432:	4e17      	ldr	r6, [pc, #92]	; (800a490 <HAL_RCC_ClockConfig+0x1f0>)
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a434:	f000 0003 	and.w	r0, r0, #3
  switch (pllsource)
 800a438:	2803      	cmp	r0, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a43a:	f3c1 1103 	ubfx	r1, r1, #4, #4
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a43e:	bf0c      	ite	eq
 800a440:	4817      	ldreq	r0, [pc, #92]	; (800a4a0 <HAL_RCC_ClockConfig+0x200>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a442:	4818      	ldrne	r0, [pc, #96]	; (800a4a4 <HAL_RCC_ClockConfig+0x204>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a444:	3101      	adds	r1, #1
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a446:	fbb0 f1f1 	udiv	r1, r0, r1
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a44a:	4810      	ldr	r0, [pc, #64]	; (800a48c <HAL_RCC_ClockConfig+0x1ec>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a44c:	f3c2 2206 	ubfx	r2, r2, #8, #7
 800a450:	fb01 f202 	mul.w	r2, r1, r2
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a454:	68c1      	ldr	r1, [r0, #12]
 800a456:	f3c1 6141 	ubfx	r1, r1, #25, #2
 800a45a:	3101      	adds	r1, #1
 800a45c:	0049      	lsls	r1, r1, #1
  sysclockfreq = pllvco/pllr;
 800a45e:	fbb2 f2f1 	udiv	r2, r2, r1
      if(pllfreq > 80000000U)
 800a462:	42b2      	cmp	r2, r6
 800a464:	d90a      	bls.n	800a47c <HAL_RCC_ClockConfig+0x1dc>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800a466:	6882      	ldr	r2, [r0, #8]
 800a468:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 800a46c:	f43f af46 	beq.w	800a2fc <HAL_RCC_ClockConfig+0x5c>
 800a470:	0799      	lsls	r1, r3, #30
 800a472:	d503      	bpl.n	800a47c <HAL_RCC_ClockConfig+0x1dc>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800a474:	68a3      	ldr	r3, [r4, #8]
 800a476:	2b00      	cmp	r3, #0
 800a478:	f43f af40 	beq.w	800a2fc <HAL_RCC_ClockConfig+0x5c>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800a47c:	f04f 0900 	mov.w	r9, #0
 800a480:	e745      	b.n	800a30e <HAL_RCC_ClockConfig+0x6e>
    return HAL_ERROR;
 800a482:	2001      	movs	r0, #1
}
 800a484:	4770      	bx	lr
 800a486:	bf00      	nop
 800a488:	40022000 	.word	0x40022000
 800a48c:	40021000 	.word	0x40021000
 800a490:	04c4b400 	.word	0x04c4b400
 800a494:	0801c884 	.word	0x0801c884
 800a498:	20001b04 	.word	0x20001b04
 800a49c:	20001b0c 	.word	0x20001b0c
 800a4a0:	016e3600 	.word	0x016e3600
 800a4a4:	00f42400 	.word	0x00f42400

0800a4a8 <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 800a4a8:	4b01      	ldr	r3, [pc, #4]	; (800a4b0 <HAL_RCC_GetHCLKFreq+0x8>)
}
 800a4aa:	6818      	ldr	r0, [r3, #0]
 800a4ac:	4770      	bx	lr
 800a4ae:	bf00      	nop
 800a4b0:	20001b04 	.word	0x20001b04

0800a4b4 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800a4b4:	4b05      	ldr	r3, [pc, #20]	; (800a4cc <HAL_RCC_GetPCLK1Freq+0x18>)
 800a4b6:	4a06      	ldr	r2, [pc, #24]	; (800a4d0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800a4b8:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800a4ba:	4906      	ldr	r1, [pc, #24]	; (800a4d4 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800a4bc:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800a4c0:	6808      	ldr	r0, [r1, #0]
 800a4c2:	5cd3      	ldrb	r3, [r2, r3]
 800a4c4:	f003 031f 	and.w	r3, r3, #31
}
 800a4c8:	40d8      	lsrs	r0, r3
 800a4ca:	4770      	bx	lr
 800a4cc:	40021000 	.word	0x40021000
 800a4d0:	0801c894 	.word	0x0801c894
 800a4d4:	20001b04 	.word	0x20001b04

0800a4d8 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800a4d8:	4b05      	ldr	r3, [pc, #20]	; (800a4f0 <HAL_RCC_GetPCLK2Freq+0x18>)
 800a4da:	4a06      	ldr	r2, [pc, #24]	; (800a4f4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800a4dc:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800a4de:	4906      	ldr	r1, [pc, #24]	; (800a4f8 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800a4e0:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800a4e4:	6808      	ldr	r0, [r1, #0]
 800a4e6:	5cd3      	ldrb	r3, [r2, r3]
 800a4e8:	f003 031f 	and.w	r3, r3, #31
}
 800a4ec:	40d8      	lsrs	r0, r3
 800a4ee:	4770      	bx	lr
 800a4f0:	40021000 	.word	0x40021000
 800a4f4:	0801c894 	.word	0x0801c894
 800a4f8:	20001b04 	.word	0x20001b04

0800a4fc <HAL_RCC_EnableCSS>:
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 800a4fc:	4a02      	ldr	r2, [pc, #8]	; (800a508 <HAL_RCC_EnableCSS+0xc>)
 800a4fe:	6813      	ldr	r3, [r2, #0]
 800a500:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a504:	6013      	str	r3, [r2, #0]
}
 800a506:	4770      	bx	lr
 800a508:	40021000 	.word	0x40021000

0800a50c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a50c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a510:	6803      	ldr	r3, [r0, #0]
{
 800a512:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a514:	f413 2000 	ands.w	r0, r3, #524288	; 0x80000
{
 800a518:	b082      	sub	sp, #8
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a51a:	d056      	beq.n	800a5ca <HAL_RCCEx_PeriphCLKConfig+0xbe>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a51c:	4bac      	ldr	r3, [pc, #688]	; (800a7d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a51e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a520:	00d5      	lsls	r5, r2, #3
 800a522:	f140 813e 	bpl.w	800a7a2 <HAL_RCCEx_PeriphCLKConfig+0x296>
    FlagStatus       pwrclkchanged = RESET;
 800a526:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a528:	4daa      	ldr	r5, [pc, #680]	; (800a7d4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800a52a:	682b      	ldr	r3, [r5, #0]
 800a52c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a530:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a532:	f7fe f995 	bl	8008860 <HAL_GetTick>
 800a536:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a538:	e005      	b.n	800a546 <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a53a:	f7fe f991 	bl	8008860 <HAL_GetTick>
 800a53e:	1b83      	subs	r3, r0, r6
 800a540:	2b02      	cmp	r3, #2
 800a542:	f200 8139 	bhi.w	800a7b8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a546:	682b      	ldr	r3, [r5, #0]
 800a548:	05d8      	lsls	r0, r3, #23
 800a54a:	d5f6      	bpl.n	800a53a <HAL_RCCEx_PeriphCLKConfig+0x2e>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a54c:	4da0      	ldr	r5, [pc, #640]	; (800a7d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a54e:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a552:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800a556:	d027      	beq.n	800a5a8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 800a558:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800a55a:	429a      	cmp	r2, r3
 800a55c:	d025      	beq.n	800a5aa <HAL_RCCEx_PeriphCLKConfig+0x9e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a55e:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a562:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 800a566:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a56a:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a56e:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 800a572:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a576:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a57a:	f421 7340 	bic.w	r3, r1, #768	; 0x300
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a57e:	07c9      	lsls	r1, r1, #31
        RCC->BDCR = tmpregister;
 800a580:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a584:	f140 8148 	bpl.w	800a818 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a588:	f7fe f96a 	bl	8008860 <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a58c:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800a590:	4606      	mov	r6, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a592:	e005      	b.n	800a5a0 <HAL_RCCEx_PeriphCLKConfig+0x94>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a594:	f7fe f964 	bl	8008860 <HAL_GetTick>
 800a598:	1b80      	subs	r0, r0, r6
 800a59a:	4540      	cmp	r0, r8
 800a59c:	f200 810c 	bhi.w	800a7b8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a5a0:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 800a5a4:	079b      	lsls	r3, r3, #30
 800a5a6:	d5f5      	bpl.n	800a594 <HAL_RCCEx_PeriphCLKConfig+0x88>
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a5a8:	6d23      	ldr	r3, [r4, #80]	; 0x50
      }
      
      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a5aa:	4989      	ldr	r1, [pc, #548]	; (800a7d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a5ac:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800a5b0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800a5b4:	4313      	orrs	r3, r2
 800a5b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a5ba:	2000      	movs	r0, #0
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a5bc:	b127      	cbz	r7, 800a5c8 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a5be:	4a84      	ldr	r2, [pc, #528]	; (800a7d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a5c0:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800a5c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a5c6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a5c8:	6823      	ldr	r3, [r4, #0]
 800a5ca:	07dd      	lsls	r5, r3, #31
 800a5cc:	d508      	bpl.n	800a5e0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a5ce:	4980      	ldr	r1, [pc, #512]	; (800a7d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a5d0:	6865      	ldr	r5, [r4, #4]
 800a5d2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800a5d6:	f022 0203 	bic.w	r2, r2, #3
 800a5da:	432a      	orrs	r2, r5
 800a5dc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a5e0:	0799      	lsls	r1, r3, #30
 800a5e2:	d508      	bpl.n	800a5f6 <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a5e4:	497a      	ldr	r1, [pc, #488]	; (800a7d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a5e6:	68a5      	ldr	r5, [r4, #8]
 800a5e8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800a5ec:	f022 020c 	bic.w	r2, r2, #12
 800a5f0:	432a      	orrs	r2, r5
 800a5f2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a5f6:	075a      	lsls	r2, r3, #29
 800a5f8:	d508      	bpl.n	800a60c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a5fa:	4975      	ldr	r1, [pc, #468]	; (800a7d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a5fc:	68e5      	ldr	r5, [r4, #12]
 800a5fe:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800a602:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800a606:	432a      	orrs	r2, r5
 800a608:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a60c:	071f      	lsls	r7, r3, #28
 800a60e:	d508      	bpl.n	800a622 <HAL_RCCEx_PeriphCLKConfig+0x116>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a610:	496f      	ldr	r1, [pc, #444]	; (800a7d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a612:	6925      	ldr	r5, [r4, #16]
 800a614:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800a618:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800a61c:	432a      	orrs	r2, r5
 800a61e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a622:	06de      	lsls	r6, r3, #27
 800a624:	d508      	bpl.n	800a638 <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a626:	496a      	ldr	r1, [pc, #424]	; (800a7d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a628:	6965      	ldr	r5, [r4, #20]
 800a62a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800a62e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800a632:	432a      	orrs	r2, r5
 800a634:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a638:	069d      	lsls	r5, r3, #26
 800a63a:	d508      	bpl.n	800a64e <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a63c:	4964      	ldr	r1, [pc, #400]	; (800a7d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a63e:	69a5      	ldr	r5, [r4, #24]
 800a640:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800a644:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800a648:	432a      	orrs	r2, r5
 800a64a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a64e:	0659      	lsls	r1, r3, #25
 800a650:	d508      	bpl.n	800a664 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a652:	495f      	ldr	r1, [pc, #380]	; (800a7d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a654:	69e5      	ldr	r5, [r4, #28]
 800a656:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800a65a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800a65e:	432a      	orrs	r2, r5
 800a660:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a664:	061a      	lsls	r2, r3, #24
 800a666:	d508      	bpl.n	800a67a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a668:	4959      	ldr	r1, [pc, #356]	; (800a7d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a66a:	6a25      	ldr	r5, [r4, #32]
 800a66c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800a670:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800a674:	432a      	orrs	r2, r5
 800a676:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a67a:	05df      	lsls	r7, r3, #23
 800a67c:	d508      	bpl.n	800a690 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a67e:	4954      	ldr	r1, [pc, #336]	; (800a7d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a680:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a682:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800a686:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800a68a:	432a      	orrs	r2, r5
 800a68c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a690:	039e      	lsls	r6, r3, #14
 800a692:	d508      	bpl.n	800a6a6 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a694:	494e      	ldr	r1, [pc, #312]	; (800a7d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a696:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800a698:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 800a69c:	f022 0203 	bic.w	r2, r2, #3
 800a6a0:	432a      	orrs	r2, r5
 800a6a2:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a6a6:	059d      	lsls	r5, r3, #22
 800a6a8:	d508      	bpl.n	800a6bc <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a6aa:	4949      	ldr	r1, [pc, #292]	; (800a7d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a6ac:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 800a6ae:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800a6b2:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800a6b6:	432a      	orrs	r2, r5
 800a6b8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a6bc:	0559      	lsls	r1, r3, #21
 800a6be:	d50b      	bpl.n	800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a6c0:	4943      	ldr	r1, [pc, #268]	; (800a7d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a6c2:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800a6c4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800a6c8:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800a6cc:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800a6ce:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a6d2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800a6d6:	d071      	beq.n	800a7bc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800a6d8:	051a      	lsls	r2, r3, #20
 800a6da:	d50b      	bpl.n	800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a6dc:	493c      	ldr	r1, [pc, #240]	; (800a7d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a6de:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800a6e0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800a6e4:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800a6e8:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800a6ea:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a6ee:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800a6f2:	d068      	beq.n	800a7c6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a6f4:	04df      	lsls	r7, r3, #19
 800a6f6:	d50b      	bpl.n	800a710 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a6f8:	4935      	ldr	r1, [pc, #212]	; (800a7d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a6fa:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800a6fc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800a700:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800a704:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800a706:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a70a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800a70e:	d063      	beq.n	800a7d8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a710:	049e      	lsls	r6, r3, #18
 800a712:	d50b      	bpl.n	800a72c <HAL_RCCEx_PeriphCLKConfig+0x220>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a714:	492e      	ldr	r1, [pc, #184]	; (800a7d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a716:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 800a718:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800a71c:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800a720:	432a      	orrs	r2, r5

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a722:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a726:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a72a:	d05a      	beq.n	800a7e2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a72c:	045d      	lsls	r5, r3, #17
 800a72e:	d50b      	bpl.n	800a748 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a730:	4927      	ldr	r1, [pc, #156]	; (800a7d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a732:	6c25      	ldr	r5, [r4, #64]	; 0x40
 800a734:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800a738:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800a73c:	432a      	orrs	r2, r5

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a73e:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a742:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a746:	d051      	beq.n	800a7ec <HAL_RCCEx_PeriphCLKConfig+0x2e0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800a748:	0419      	lsls	r1, r3, #16
 800a74a:	d50b      	bpl.n	800a764 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800a74c:	4920      	ldr	r1, [pc, #128]	; (800a7d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a74e:	6c65      	ldr	r5, [r4, #68]	; 0x44
 800a750:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800a754:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a758:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800a75a:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800a75e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800a762:	d048      	beq.n	800a7f6 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800a764:	03da      	lsls	r2, r3, #15
 800a766:	d50b      	bpl.n	800a780 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800a768:	4919      	ldr	r1, [pc, #100]	; (800a7d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a76a:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 800a76c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800a770:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 800a774:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800a776:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800a77a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800a77e:	d03f      	beq.n	800a800 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a780:	035b      	lsls	r3, r3, #13
 800a782:	d50b      	bpl.n	800a79c <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a784:	4a12      	ldr	r2, [pc, #72]	; (800a7d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a786:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800a788:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 800a78c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800a790:	430b      	orrs	r3, r1

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800a792:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a796:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800a79a:	d036      	beq.n	800a80a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  }

#endif /* QUADSPI */

  return status;
}
 800a79c:	b002      	add	sp, #8
 800a79e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 800a7a2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a7a4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800a7a8:	659a      	str	r2, [r3, #88]	; 0x58
 800a7aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a7b0:	9301      	str	r3, [sp, #4]
 800a7b2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800a7b4:	2701      	movs	r7, #1
 800a7b6:	e6b7      	b.n	800a528 <HAL_RCCEx_PeriphCLKConfig+0x1c>
      status = ret;
 800a7b8:	2003      	movs	r0, #3
 800a7ba:	e6ff      	b.n	800a5bc <HAL_RCCEx_PeriphCLKConfig+0xb0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a7bc:	68ca      	ldr	r2, [r1, #12]
 800a7be:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800a7c2:	60ca      	str	r2, [r1, #12]
 800a7c4:	e788      	b.n	800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a7c6:	68ca      	ldr	r2, [r1, #12]
 800a7c8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800a7cc:	60ca      	str	r2, [r1, #12]
 800a7ce:	e791      	b.n	800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800a7d0:	40021000 	.word	0x40021000
 800a7d4:	40007000 	.word	0x40007000
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a7d8:	68ca      	ldr	r2, [r1, #12]
 800a7da:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800a7de:	60ca      	str	r2, [r1, #12]
 800a7e0:	e796      	b.n	800a710 <HAL_RCCEx_PeriphCLKConfig+0x204>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a7e2:	68ca      	ldr	r2, [r1, #12]
 800a7e4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800a7e8:	60ca      	str	r2, [r1, #12]
 800a7ea:	e79f      	b.n	800a72c <HAL_RCCEx_PeriphCLKConfig+0x220>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a7ec:	68ca      	ldr	r2, [r1, #12]
 800a7ee:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800a7f2:	60ca      	str	r2, [r1, #12]
 800a7f4:	e7a8      	b.n	800a748 <HAL_RCCEx_PeriphCLKConfig+0x23c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800a7f6:	68ca      	ldr	r2, [r1, #12]
 800a7f8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800a7fc:	60ca      	str	r2, [r1, #12]
 800a7fe:	e7b1      	b.n	800a764 <HAL_RCCEx_PeriphCLKConfig+0x258>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800a800:	68ca      	ldr	r2, [r1, #12]
 800a802:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800a806:	60ca      	str	r2, [r1, #12]
 800a808:	e7ba      	b.n	800a780 <HAL_RCCEx_PeriphCLKConfig+0x274>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a80a:	68d3      	ldr	r3, [r2, #12]
 800a80c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a810:	60d3      	str	r3, [r2, #12]
}
 800a812:	b002      	add	sp, #8
 800a814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a818:	4613      	mov	r3, r2
 800a81a:	e6c6      	b.n	800a5aa <HAL_RCCEx_PeriphCLKConfig+0x9e>

0800a81c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a81c:	6a03      	ldr	r3, [r0, #32]
 800a81e:	f023 0301 	bic.w	r3, r3, #1
 800a822:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a824:	6a03      	ldr	r3, [r0, #32]
{
 800a826:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a828:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a82a:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a82c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a82e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a832:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800a836:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a838:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 800a83a:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 800a83e:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a840:	4d15      	ldr	r5, [pc, #84]	; (800a898 <TIM_OC1_SetConfig+0x7c>)
 800a842:	42a8      	cmp	r0, r5
 800a844:	d013      	beq.n	800a86e <TIM_OC1_SetConfig+0x52>
 800a846:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800a84a:	42a8      	cmp	r0, r5
 800a84c:	d00f      	beq.n	800a86e <TIM_OC1_SetConfig+0x52>
 800a84e:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800a852:	42a8      	cmp	r0, r5
 800a854:	d00b      	beq.n	800a86e <TIM_OC1_SetConfig+0x52>
 800a856:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800a85a:	42a8      	cmp	r0, r5
 800a85c:	d007      	beq.n	800a86e <TIM_OC1_SetConfig+0x52>
 800a85e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800a862:	42a8      	cmp	r0, r5
 800a864:	d003      	beq.n	800a86e <TIM_OC1_SetConfig+0x52>
 800a866:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800a86a:	42a8      	cmp	r0, r5
 800a86c:	d10d      	bne.n	800a88a <TIM_OC1_SetConfig+0x6e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a86e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800a870:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800a874:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a876:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a87a:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 800a87e:	ea46 0c05 	orr.w	ip, r6, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 800a882:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 800a886:	ea4c 0404 	orr.w	r4, ip, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a88a:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800a88c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800a88e:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 800a890:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR1 = OC_Config->Pulse;
 800a892:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 800a894:	6203      	str	r3, [r0, #32]
}
 800a896:	4770      	bx	lr
 800a898:	40012c00 	.word	0x40012c00

0800a89c <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a89c:	6a03      	ldr	r3, [r0, #32]
 800a89e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a8a2:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a8a4:	6a03      	ldr	r3, [r0, #32]
{
 800a8a6:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a8a8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a8aa:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a8ac:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a8ae:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a8b2:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800a8b6:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a8b8:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 800a8ba:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a8be:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a8c2:	4d1c      	ldr	r5, [pc, #112]	; (800a934 <TIM_OC3_SetConfig+0x98>)
 800a8c4:	42a8      	cmp	r0, r5
 800a8c6:	d017      	beq.n	800a8f8 <TIM_OC3_SetConfig+0x5c>
 800a8c8:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800a8cc:	42a8      	cmp	r0, r5
 800a8ce:	d013      	beq.n	800a8f8 <TIM_OC3_SetConfig+0x5c>
 800a8d0:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 800a8d4:	42a8      	cmp	r0, r5
 800a8d6:	d025      	beq.n	800a924 <TIM_OC3_SetConfig+0x88>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a8d8:	4d17      	ldr	r5, [pc, #92]	; (800a938 <TIM_OC3_SetConfig+0x9c>)
 800a8da:	42a8      	cmp	r0, r5
 800a8dc:	d013      	beq.n	800a906 <TIM_OC3_SetConfig+0x6a>
 800a8de:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800a8e2:	42a8      	cmp	r0, r5
 800a8e4:	d00f      	beq.n	800a906 <TIM_OC3_SetConfig+0x6a>
 800a8e6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800a8ea:	42a8      	cmp	r0, r5
 800a8ec:	d00b      	beq.n	800a906 <TIM_OC3_SetConfig+0x6a>
 800a8ee:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800a8f2:	42a8      	cmp	r0, r5
 800a8f4:	d10f      	bne.n	800a916 <TIM_OC3_SetConfig+0x7a>
 800a8f6:	e006      	b.n	800a906 <TIM_OC3_SetConfig+0x6a>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a8f8:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800a8fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a8fe:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 800a902:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a906:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a90a:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a90e:	ea46 0c05 	orr.w	ip, r6, r5
 800a912:	ea44 140c 	orr.w	r4, r4, ip, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a916:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800a918:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 800a91a:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 800a91c:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR3 = OC_Config->Pulse;
 800a91e:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 800a920:	6203      	str	r3, [r0, #32]
}
 800a922:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a924:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800a926:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a92a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 800a92e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a932:	e7d1      	b.n	800a8d8 <TIM_OC3_SetConfig+0x3c>
 800a934:	40012c00 	.word	0x40012c00
 800a938:	40014000 	.word	0x40014000

0800a93c <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a93c:	6a03      	ldr	r3, [r0, #32]
 800a93e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a942:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a944:	6a03      	ldr	r3, [r0, #32]
{
 800a946:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a948:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a94a:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a94c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a94e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800a952:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a956:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a95a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 800a95c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a960:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800a964:	4d1c      	ldr	r5, [pc, #112]	; (800a9d8 <TIM_OC4_SetConfig+0x9c>)
 800a966:	42a8      	cmp	r0, r5
 800a968:	d017      	beq.n	800a99a <TIM_OC4_SetConfig+0x5e>
 800a96a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800a96e:	42a8      	cmp	r0, r5
 800a970:	d013      	beq.n	800a99a <TIM_OC4_SetConfig+0x5e>
 800a972:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 800a976:	42a8      	cmp	r0, r5
 800a978:	d025      	beq.n	800a9c6 <TIM_OC4_SetConfig+0x8a>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a97a:	4d18      	ldr	r5, [pc, #96]	; (800a9dc <TIM_OC4_SetConfig+0xa0>)
 800a97c:	42a8      	cmp	r0, r5
 800a97e:	d013      	beq.n	800a9a8 <TIM_OC4_SetConfig+0x6c>
 800a980:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800a984:	42a8      	cmp	r0, r5
 800a986:	d00f      	beq.n	800a9a8 <TIM_OC4_SetConfig+0x6c>
 800a988:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800a98c:	42a8      	cmp	r0, r5
 800a98e:	d00b      	beq.n	800a9a8 <TIM_OC4_SetConfig+0x6c>
 800a990:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800a994:	42a8      	cmp	r0, r5
 800a996:	d10f      	bne.n	800a9b8 <TIM_OC4_SetConfig+0x7c>
 800a998:	e006      	b.n	800a9a8 <TIM_OC4_SetConfig+0x6c>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800a99a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 800a99c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800a9a0:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 800a9a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 &= ~TIM_CR2_OIS4N;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800a9a8:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800a9ac:	f424 4440 	bic.w	r4, r4, #49152	; 0xc000
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800a9b0:	ea46 0c05 	orr.w	ip, r6, r5
 800a9b4:	ea44 148c 	orr.w	r4, r4, ip, lsl #6

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a9b8:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800a9ba:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 800a9bc:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 800a9be:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR4 = OC_Config->Pulse;
 800a9c0:	6401      	str	r1, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 800a9c2:	6203      	str	r3, [r0, #32]
}
 800a9c4:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800a9c6:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 800a9c8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800a9cc:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 800a9d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a9d4:	e7d1      	b.n	800a97a <TIM_OC4_SetConfig+0x3e>
 800a9d6:	bf00      	nop
 800a9d8:	40012c00 	.word	0x40012c00
 800a9dc:	40014000 	.word	0x40014000

0800a9e0 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800a9e0:	2800      	cmp	r0, #0
 800a9e2:	f000 808c 	beq.w	800aafe <HAL_TIM_Base_Init+0x11e>
{
 800a9e6:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800a9e8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800a9ec:	4604      	mov	r4, r0
 800a9ee:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d078      	beq.n	800aae8 <HAL_TIM_Base_Init+0x108>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a9f6:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a9f8:	4944      	ldr	r1, [pc, #272]	; (800ab0c <HAL_TIM_Base_Init+0x12c>)
  htim->State = HAL_TIM_STATE_BUSY;
 800a9fa:	2302      	movs	r3, #2
 800a9fc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aa00:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 800aa02:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aa04:	d05c      	beq.n	800aac0 <HAL_TIM_Base_Init+0xe0>
 800aa06:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800aa0a:	d02c      	beq.n	800aa66 <HAL_TIM_Base_Init+0x86>
 800aa0c:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 800aa10:	428a      	cmp	r2, r1
 800aa12:	d028      	beq.n	800aa66 <HAL_TIM_Base_Init+0x86>
 800aa14:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800aa18:	428a      	cmp	r2, r1
 800aa1a:	d024      	beq.n	800aa66 <HAL_TIM_Base_Init+0x86>
 800aa1c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800aa20:	428a      	cmp	r2, r1
 800aa22:	d020      	beq.n	800aa66 <HAL_TIM_Base_Init+0x86>
 800aa24:	f501 3194 	add.w	r1, r1, #75776	; 0x12800
 800aa28:	428a      	cmp	r2, r1
 800aa2a:	d049      	beq.n	800aac0 <HAL_TIM_Base_Init+0xe0>
 800aa2c:	f501 51e0 	add.w	r1, r1, #7168	; 0x1c00
 800aa30:	428a      	cmp	r2, r1
 800aa32:	d066      	beq.n	800ab02 <HAL_TIM_Base_Init+0x122>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aa34:	4936      	ldr	r1, [pc, #216]	; (800ab10 <HAL_TIM_Base_Init+0x130>)
 800aa36:	428a      	cmp	r2, r1
 800aa38:	d05b      	beq.n	800aaf2 <HAL_TIM_Base_Init+0x112>
 800aa3a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800aa3e:	428a      	cmp	r2, r1
 800aa40:	d057      	beq.n	800aaf2 <HAL_TIM_Base_Init+0x112>
 800aa42:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800aa46:	428a      	cmp	r2, r1
 800aa48:	d053      	beq.n	800aaf2 <HAL_TIM_Base_Init+0x112>
 800aa4a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aa4e:	428a      	cmp	r2, r1
 800aa50:	d04f      	beq.n	800aaf2 <HAL_TIM_Base_Init+0x112>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aa52:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aa54:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aa56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aa5a:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 800aa5c:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 800aa5e:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aa60:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800aa62:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aa64:	e010      	b.n	800aa88 <HAL_TIM_Base_Init+0xa8>
    tmpcr1 |= Structure->CounterMode;
 800aa66:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aa68:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aa6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800aa6e:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 800aa70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aa74:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aa76:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aa78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aa7c:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aa7e:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 800aa80:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800aa82:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aa84:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800aa86:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 800aa88:	2301      	movs	r3, #1
 800aa8a:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aa8c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa90:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800aa94:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800aa98:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800aa9c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800aaa0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aaa4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aaa8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800aaac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800aab0:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800aab4:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800aab8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800aabc:	2000      	movs	r0, #0
}
 800aabe:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 800aac0:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aac2:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aac4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800aac8:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 800aaca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aace:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aad0:	69a1      	ldr	r1, [r4, #24]
 800aad2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aad6:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 800aad8:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aada:	68e3      	ldr	r3, [r4, #12]
 800aadc:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800aade:	6863      	ldr	r3, [r4, #4]
 800aae0:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800aae2:	6963      	ldr	r3, [r4, #20]
 800aae4:	6313      	str	r3, [r2, #48]	; 0x30
 800aae6:	e7cf      	b.n	800aa88 <HAL_TIM_Base_Init+0xa8>
    htim->Lock = HAL_UNLOCKED;
 800aae8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800aaec:	f7fd fbda 	bl	80082a4 <HAL_TIM_Base_MspInit>
 800aaf0:	e781      	b.n	800a9f6 <HAL_TIM_Base_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aaf2:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aaf4:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 800aaf6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aafa:	4303      	orrs	r3, r0
 800aafc:	e7e9      	b.n	800aad2 <HAL_TIM_Base_Init+0xf2>
    return HAL_ERROR;
 800aafe:	2001      	movs	r0, #1
}
 800ab00:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 800ab02:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ab04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800ab08:	430b      	orrs	r3, r1
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ab0a:	e793      	b.n	800aa34 <HAL_TIM_Base_Init+0x54>
 800ab0c:	40012c00 	.word	0x40012c00
 800ab10:	40014000 	.word	0x40014000

0800ab14 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 800ab14:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800ab18:	2b01      	cmp	r3, #1
 800ab1a:	d12f      	bne.n	800ab7c <HAL_TIM_Base_Start+0x68>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab1c:	6803      	ldr	r3, [r0, #0]
 800ab1e:	4a19      	ldr	r2, [pc, #100]	; (800ab84 <HAL_TIM_Base_Start+0x70>)
  htim->State = HAL_TIM_STATE_BUSY;
 800ab20:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab22:	4293      	cmp	r3, r2
  htim->State = HAL_TIM_STATE_BUSY;
 800ab24:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab28:	d01a      	beq.n	800ab60 <HAL_TIM_Base_Start+0x4c>
 800ab2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab2e:	d017      	beq.n	800ab60 <HAL_TIM_Base_Start+0x4c>
 800ab30:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800ab34:	4293      	cmp	r3, r2
 800ab36:	d013      	beq.n	800ab60 <HAL_TIM_Base_Start+0x4c>
 800ab38:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ab3c:	4293      	cmp	r3, r2
 800ab3e:	d00f      	beq.n	800ab60 <HAL_TIM_Base_Start+0x4c>
 800ab40:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ab44:	4293      	cmp	r3, r2
 800ab46:	d00b      	beq.n	800ab60 <HAL_TIM_Base_Start+0x4c>
 800ab48:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800ab4c:	4293      	cmp	r3, r2
 800ab4e:	d007      	beq.n	800ab60 <HAL_TIM_Base_Start+0x4c>
 800ab50:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800ab54:	4293      	cmp	r3, r2
 800ab56:	d003      	beq.n	800ab60 <HAL_TIM_Base_Start+0x4c>
 800ab58:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ab5c:	4293      	cmp	r3, r2
 800ab5e:	d107      	bne.n	800ab70 <HAL_TIM_Base_Start+0x5c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ab60:	6899      	ldr	r1, [r3, #8]
 800ab62:	4a09      	ldr	r2, [pc, #36]	; (800ab88 <HAL_TIM_Base_Start+0x74>)
 800ab64:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab66:	2a06      	cmp	r2, #6
 800ab68:	d00a      	beq.n	800ab80 <HAL_TIM_Base_Start+0x6c>
 800ab6a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800ab6e:	d007      	beq.n	800ab80 <HAL_TIM_Base_Start+0x6c>
    __HAL_TIM_ENABLE(htim);
 800ab70:	681a      	ldr	r2, [r3, #0]
 800ab72:	f042 0201 	orr.w	r2, r2, #1
  return HAL_OK;
 800ab76:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 800ab78:	601a      	str	r2, [r3, #0]
 800ab7a:	4770      	bx	lr
    return HAL_ERROR;
 800ab7c:	2001      	movs	r0, #1
 800ab7e:	4770      	bx	lr
  return HAL_OK;
 800ab80:	2000      	movs	r0, #0
}
 800ab82:	4770      	bx	lr
 800ab84:	40012c00 	.word	0x40012c00
 800ab88:	00010007 	.word	0x00010007

0800ab8c <HAL_TIM_PWM_MspInit>:
 800ab8c:	4770      	bx	lr
 800ab8e:	bf00      	nop

0800ab90 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 800ab90:	2800      	cmp	r0, #0
 800ab92:	f000 808c 	beq.w	800acae <HAL_TIM_PWM_Init+0x11e>
{
 800ab96:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800ab98:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800ab9c:	4604      	mov	r4, r0
 800ab9e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d078      	beq.n	800ac98 <HAL_TIM_PWM_Init+0x108>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aba6:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aba8:	4944      	ldr	r1, [pc, #272]	; (800acbc <HAL_TIM_PWM_Init+0x12c>)
  htim->State = HAL_TIM_STATE_BUSY;
 800abaa:	2302      	movs	r3, #2
 800abac:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800abb0:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 800abb2:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800abb4:	d05c      	beq.n	800ac70 <HAL_TIM_PWM_Init+0xe0>
 800abb6:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800abba:	d02c      	beq.n	800ac16 <HAL_TIM_PWM_Init+0x86>
 800abbc:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 800abc0:	428a      	cmp	r2, r1
 800abc2:	d028      	beq.n	800ac16 <HAL_TIM_PWM_Init+0x86>
 800abc4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800abc8:	428a      	cmp	r2, r1
 800abca:	d024      	beq.n	800ac16 <HAL_TIM_PWM_Init+0x86>
 800abcc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800abd0:	428a      	cmp	r2, r1
 800abd2:	d020      	beq.n	800ac16 <HAL_TIM_PWM_Init+0x86>
 800abd4:	f501 3194 	add.w	r1, r1, #75776	; 0x12800
 800abd8:	428a      	cmp	r2, r1
 800abda:	d049      	beq.n	800ac70 <HAL_TIM_PWM_Init+0xe0>
 800abdc:	f501 51e0 	add.w	r1, r1, #7168	; 0x1c00
 800abe0:	428a      	cmp	r2, r1
 800abe2:	d066      	beq.n	800acb2 <HAL_TIM_PWM_Init+0x122>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800abe4:	4936      	ldr	r1, [pc, #216]	; (800acc0 <HAL_TIM_PWM_Init+0x130>)
 800abe6:	428a      	cmp	r2, r1
 800abe8:	d05b      	beq.n	800aca2 <HAL_TIM_PWM_Init+0x112>
 800abea:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800abee:	428a      	cmp	r2, r1
 800abf0:	d057      	beq.n	800aca2 <HAL_TIM_PWM_Init+0x112>
 800abf2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800abf6:	428a      	cmp	r2, r1
 800abf8:	d053      	beq.n	800aca2 <HAL_TIM_PWM_Init+0x112>
 800abfa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800abfe:	428a      	cmp	r2, r1
 800ac00:	d04f      	beq.n	800aca2 <HAL_TIM_PWM_Init+0x112>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ac02:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ac04:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ac06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ac0a:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 800ac0c:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 800ac0e:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ac10:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800ac12:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ac14:	e010      	b.n	800ac38 <HAL_TIM_PWM_Init+0xa8>
    tmpcr1 |= Structure->CounterMode;
 800ac16:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ac18:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ac1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800ac1e:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 800ac20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ac24:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ac26:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ac28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ac2c:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ac2e:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 800ac30:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800ac32:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ac34:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800ac36:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 800ac38:	2301      	movs	r3, #1
 800ac3a:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ac3c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ac40:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800ac44:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800ac48:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800ac4c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800ac50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ac54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ac58:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800ac5c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ac60:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800ac64:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800ac68:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800ac6c:	2000      	movs	r0, #0
}
 800ac6e:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 800ac70:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ac72:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ac74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800ac78:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 800ac7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ac7e:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ac80:	69a1      	ldr	r1, [r4, #24]
 800ac82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ac86:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 800ac88:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ac8a:	68e3      	ldr	r3, [r4, #12]
 800ac8c:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800ac8e:	6863      	ldr	r3, [r4, #4]
 800ac90:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800ac92:	6963      	ldr	r3, [r4, #20]
 800ac94:	6313      	str	r3, [r2, #48]	; 0x30
 800ac96:	e7cf      	b.n	800ac38 <HAL_TIM_PWM_Init+0xa8>
    htim->Lock = HAL_UNLOCKED;
 800ac98:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800ac9c:	f7ff ff76 	bl	800ab8c <HAL_TIM_PWM_MspInit>
 800aca0:	e781      	b.n	800aba6 <HAL_TIM_PWM_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aca2:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aca4:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 800aca6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800acaa:	4303      	orrs	r3, r0
 800acac:	e7e9      	b.n	800ac82 <HAL_TIM_PWM_Init+0xf2>
    return HAL_ERROR;
 800acae:	2001      	movs	r0, #1
}
 800acb0:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 800acb2:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800acb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800acb8:	430b      	orrs	r3, r1
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800acba:	e793      	b.n	800abe4 <HAL_TIM_PWM_Init+0x54>
 800acbc:	40012c00 	.word	0x40012c00
 800acc0:	40014000 	.word	0x40014000

0800acc4 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800acc4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800acc8:	2b01      	cmp	r3, #1
 800acca:	f000 8094 	beq.w	800adf6 <HAL_TIM_ConfigClockSource+0x132>
 800acce:	4602      	mov	r2, r0
{
 800acd0:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 800acd2:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR;
 800acd4:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800acd6:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_LOCK(htim);
 800acda:	2001      	movs	r0, #1
 800acdc:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 800ace0:	68a5      	ldr	r5, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ace2:	4b64      	ldr	r3, [pc, #400]	; (800ae74 <HAL_TIM_ConfigClockSource+0x1b0>)
 800ace4:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 800ace6:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 800ace8:	680b      	ldr	r3, [r1, #0]
 800acea:	2b70      	cmp	r3, #112	; 0x70
 800acec:	f000 80b1 	beq.w	800ae52 <HAL_TIM_ConfigClockSource+0x18e>
 800acf0:	d828      	bhi.n	800ad44 <HAL_TIM_ConfigClockSource+0x80>
 800acf2:	2b50      	cmp	r3, #80	; 0x50
 800acf4:	f000 8081 	beq.w	800adfa <HAL_TIM_ConfigClockSource+0x136>
 800acf8:	d93f      	bls.n	800ad7a <HAL_TIM_ConfigClockSource+0xb6>
 800acfa:	2b60      	cmp	r3, #96	; 0x60
 800acfc:	d11a      	bne.n	800ad34 <HAL_TIM_ConfigClockSource+0x70>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800acfe:	6a23      	ldr	r3, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ad00:	6848      	ldr	r0, [r1, #4]
 800ad02:	68cd      	ldr	r5, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ad04:	f023 0310 	bic.w	r3, r3, #16
 800ad08:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ad0a:	69a1      	ldr	r1, [r4, #24]
  tmpccer = TIMx->CCER;
 800ad0c:	6a23      	ldr	r3, [r4, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ad0e:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ad12:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800ad16:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ad1a:	ea41 3105 	orr.w	r1, r1, r5, lsl #12

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ad1e:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 800ad20:	6223      	str	r3, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ad22:	68a3      	ldr	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ad24:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800ad28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ad2c:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  HAL_StatusTypeDef status = HAL_OK;
 800ad30:	2000      	movs	r0, #0
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ad32:	60a3      	str	r3, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 800ad34:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 800ad36:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800ad38:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800ad3c:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 800ad40:	bc30      	pop	{r4, r5}
 800ad42:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 800ad44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ad48:	d072      	beq.n	800ae30 <HAL_TIM_ConfigClockSource+0x16c>
 800ad4a:	d943      	bls.n	800add4 <HAL_TIM_ConfigClockSource+0x110>
 800ad4c:	494a      	ldr	r1, [pc, #296]	; (800ae78 <HAL_TIM_ConfigClockSource+0x1b4>)
 800ad4e:	428b      	cmp	r3, r1
 800ad50:	d008      	beq.n	800ad64 <HAL_TIM_ConfigClockSource+0xa0>
 800ad52:	d92f      	bls.n	800adb4 <HAL_TIM_ConfigClockSource+0xf0>
 800ad54:	4949      	ldr	r1, [pc, #292]	; (800ae7c <HAL_TIM_ConfigClockSource+0x1b8>)
 800ad56:	428b      	cmp	r3, r1
 800ad58:	d004      	beq.n	800ad64 <HAL_TIM_ConfigClockSource+0xa0>
 800ad5a:	f023 0c20 	bic.w	ip, r3, #32
 800ad5e:	3910      	subs	r1, #16
 800ad60:	458c      	cmp	ip, r1
 800ad62:	d1e7      	bne.n	800ad34 <HAL_TIM_ConfigClockSource+0x70>
  tmpsmcr = TIMx->SMCR;
 800ad64:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800ad66:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 800ad6a:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ad6e:	4319      	orrs	r1, r3
 800ad70:	f041 0107 	orr.w	r1, r1, #7
  HAL_StatusTypeDef status = HAL_OK;
 800ad74:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 800ad76:	60a1      	str	r1, [r4, #8]
}
 800ad78:	e7dc      	b.n	800ad34 <HAL_TIM_ConfigClockSource+0x70>
  switch (sClockSourceConfig->ClockSource)
 800ad7a:	2b40      	cmp	r3, #64	; 0x40
 800ad7c:	d12f      	bne.n	800adde <HAL_TIM_ConfigClockSource+0x11a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ad7e:	684b      	ldr	r3, [r1, #4]
 800ad80:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 800ad82:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ad84:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 800ad88:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ad8a:	6a23      	ldr	r3, [r4, #32]
 800ad8c:	f023 0301 	bic.w	r3, r3, #1
 800ad90:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ad92:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ad94:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ad98:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800ad9c:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 800ad9e:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 800ada0:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800ada2:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800ada6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800adaa:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  HAL_StatusTypeDef status = HAL_OK;
 800adae:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 800adb0:	60a3      	str	r3, [r4, #8]
}
 800adb2:	e7bf      	b.n	800ad34 <HAL_TIM_ConfigClockSource+0x70>
  switch (sClockSourceConfig->ClockSource)
 800adb4:	3920      	subs	r1, #32
 800adb6:	428b      	cmp	r3, r1
 800adb8:	d0d4      	beq.n	800ad64 <HAL_TIM_ConfigClockSource+0xa0>
 800adba:	d904      	bls.n	800adc6 <HAL_TIM_ConfigClockSource+0x102>
 800adbc:	4930      	ldr	r1, [pc, #192]	; (800ae80 <HAL_TIM_ConfigClockSource+0x1bc>)
 800adbe:	428b      	cmp	r3, r1
 800adc0:	d0d0      	beq.n	800ad64 <HAL_TIM_ConfigClockSource+0xa0>
 800adc2:	2001      	movs	r0, #1
 800adc4:	e7b6      	b.n	800ad34 <HAL_TIM_ConfigClockSource+0x70>
 800adc6:	f023 0110 	bic.w	r1, r3, #16
 800adca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800adce:	d0c9      	beq.n	800ad64 <HAL_TIM_ConfigClockSource+0xa0>
 800add0:	2001      	movs	r0, #1
 800add2:	e7af      	b.n	800ad34 <HAL_TIM_ConfigClockSource+0x70>
  HAL_StatusTypeDef status = HAL_OK;
 800add4:	f5b3 5080 	subs.w	r0, r3, #4096	; 0x1000
 800add8:	bf18      	it	ne
 800adda:	2001      	movne	r0, #1
 800addc:	e7aa      	b.n	800ad34 <HAL_TIM_ConfigClockSource+0x70>
  switch (sClockSourceConfig->ClockSource)
 800adde:	d8a9      	bhi.n	800ad34 <HAL_TIM_ConfigClockSource+0x70>
 800ade0:	2b20      	cmp	r3, #32
 800ade2:	d0bf      	beq.n	800ad64 <HAL_TIM_ConfigClockSource+0xa0>
 800ade4:	d903      	bls.n	800adee <HAL_TIM_ConfigClockSource+0x12a>
 800ade6:	2b30      	cmp	r3, #48	; 0x30
 800ade8:	d0bc      	beq.n	800ad64 <HAL_TIM_ConfigClockSource+0xa0>
 800adea:	2001      	movs	r0, #1
 800adec:	e7a2      	b.n	800ad34 <HAL_TIM_ConfigClockSource+0x70>
 800adee:	f033 0110 	bics.w	r1, r3, #16
 800adf2:	d19f      	bne.n	800ad34 <HAL_TIM_ConfigClockSource+0x70>
 800adf4:	e7b6      	b.n	800ad64 <HAL_TIM_ConfigClockSource+0xa0>
  __HAL_LOCK(htim);
 800adf6:	2002      	movs	r0, #2
}
 800adf8:	4770      	bx	lr
      TIM_TI1_ConfigInputStage(htim->Instance,
 800adfa:	684b      	ldr	r3, [r1, #4]
 800adfc:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 800adfe:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ae00:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 800ae04:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ae06:	6a23      	ldr	r3, [r4, #32]
 800ae08:	f023 0301 	bic.w	r3, r3, #1
 800ae0c:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ae0e:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ae10:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ae14:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800ae18:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 800ae1a:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 800ae1c:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800ae1e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800ae22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ae26:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  HAL_StatusTypeDef status = HAL_OK;
 800ae2a:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 800ae2c:	60a3      	str	r3, [r4, #8]
}
 800ae2e:	e781      	b.n	800ad34 <HAL_TIM_ConfigClockSource+0x70>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ae30:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800ae34:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ae36:	432b      	orrs	r3, r5
 800ae38:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ae3a:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ae3e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800ae42:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ae44:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ae46:	68a3      	ldr	r3, [r4, #8]
 800ae48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  HAL_StatusTypeDef status = HAL_OK;
 800ae4c:	2000      	movs	r0, #0
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ae4e:	60a3      	str	r3, [r4, #8]
      break;
 800ae50:	e770      	b.n	800ad34 <HAL_TIM_ConfigClockSource+0x70>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ae52:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800ae56:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ae58:	432b      	orrs	r3, r5
 800ae5a:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ae5c:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ae60:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800ae64:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 800ae66:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 800ae68:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ae6a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  HAL_StatusTypeDef status = HAL_OK;
 800ae6e:	2000      	movs	r0, #0
      htim->Instance->SMCR = tmpsmcr;
 800ae70:	60a3      	str	r3, [r4, #8]
      break;
 800ae72:	e75f      	b.n	800ad34 <HAL_TIM_ConfigClockSource+0x70>
 800ae74:	ffce0088 	.word	0xffce0088
 800ae78:	00100040 	.word	0x00100040
 800ae7c:	00100060 	.word	0x00100060
 800ae80:	00100030 	.word	0x00100030

0800ae84 <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 800ae84:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800ae88:	2b01      	cmp	r3, #1
 800ae8a:	d072      	beq.n	800af72 <HAL_TIM_SlaveConfigSynchro+0xee>
 800ae8c:	4684      	mov	ip, r0
 800ae8e:	2201      	movs	r2, #1
  tmpsmcr = htim->Instance->SMCR;
 800ae90:	6800      	ldr	r0, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800ae92:	2302      	movs	r3, #2
{
 800ae94:	b410      	push	{r4}
  __HAL_LOCK(htim);
 800ae96:	f88c 203c 	strb.w	r2, [ip, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800ae9a:	f88c 303d 	strb.w	r3, [ip, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800ae9e:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800aea0:	684b      	ldr	r3, [r1, #4]
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800aea2:	680c      	ldr	r4, [r1, #0]
  tmpsmcr &= ~TIM_SMCR_TS;
 800aea4:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800aea8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800aeac:	431a      	orrs	r2, r3
  tmpsmcr &= ~TIM_SMCR_SMS;
 800aeae:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800aeb2:	f022 0207 	bic.w	r2, r2, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800aeb6:	4322      	orrs	r2, r4
  switch (sSlaveConfig->InputTrigger)
 800aeb8:	2b60      	cmp	r3, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 800aeba:	6082      	str	r2, [r0, #8]
  switch (sSlaveConfig->InputTrigger)
 800aebc:	d067      	beq.n	800af8e <HAL_TIM_SlaveConfigSynchro+0x10a>
 800aebe:	d816      	bhi.n	800aeee <HAL_TIM_SlaveConfigSynchro+0x6a>
 800aec0:	2b40      	cmp	r3, #64	; 0x40
 800aec2:	d077      	beq.n	800afb4 <HAL_TIM_SlaveConfigSynchro+0x130>
 800aec4:	d935      	bls.n	800af32 <HAL_TIM_SlaveConfigSynchro+0xae>
 800aec6:	2b50      	cmp	r3, #80	; 0x50
 800aec8:	d144      	bne.n	800af54 <HAL_TIM_SlaveConfigSynchro+0xd0>
  tmpccer = TIMx->CCER;
 800aeca:	6a03      	ldr	r3, [r0, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aecc:	688a      	ldr	r2, [r1, #8]
 800aece:	6909      	ldr	r1, [r1, #16]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aed0:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 800aed4:	431a      	orrs	r2, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aed6:	6a03      	ldr	r3, [r0, #32]
 800aed8:	f023 0301 	bic.w	r3, r3, #1
 800aedc:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aede:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aee0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800aee4:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800aee8:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800aeea:	6202      	str	r2, [r0, #32]
 800aeec:	e00f      	b.n	800af0e <HAL_TIM_SlaveConfigSynchro+0x8a>
  switch (sSlaveConfig->InputTrigger)
 800aeee:	2b70      	cmp	r3, #112	; 0x70
 800aef0:	d041      	beq.n	800af76 <HAL_TIM_SlaveConfigSynchro+0xf2>
 800aef2:	2b6f      	cmp	r3, #111	; 0x6f
 800aef4:	d92e      	bls.n	800af54 <HAL_TIM_SlaveConfigSynchro+0xd0>
 800aef6:	4a34      	ldr	r2, [pc, #208]	; (800afc8 <HAL_TIM_SlaveConfigSynchro+0x144>)
 800aef8:	4293      	cmp	r3, r2
 800aefa:	d008      	beq.n	800af0e <HAL_TIM_SlaveConfigSynchro+0x8a>
 800aefc:	d91f      	bls.n	800af3e <HAL_TIM_SlaveConfigSynchro+0xba>
 800aefe:	4a33      	ldr	r2, [pc, #204]	; (800afcc <HAL_TIM_SlaveConfigSynchro+0x148>)
 800af00:	4293      	cmp	r3, r2
 800af02:	d004      	beq.n	800af0e <HAL_TIM_SlaveConfigSynchro+0x8a>
 800af04:	3a10      	subs	r2, #16
 800af06:	f023 0320 	bic.w	r3, r3, #32
 800af0a:	4293      	cmp	r3, r2
 800af0c:	d122      	bne.n	800af54 <HAL_TIM_SlaveConfigSynchro+0xd0>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800af0e:	68c3      	ldr	r3, [r0, #12]
 800af10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af14:	60c3      	str	r3, [r0, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800af16:	68c3      	ldr	r3, [r0, #12]
  __HAL_UNLOCK(htim);
 800af18:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 800af1a:	2101      	movs	r1, #1
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800af1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800af20:	60c3      	str	r3, [r0, #12]
  htim->State = HAL_TIM_STATE_READY;
 800af22:	f88c 103d 	strb.w	r1, [ip, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800af26:	f88c 203c 	strb.w	r2, [ip, #60]	; 0x3c
  return HAL_OK;
 800af2a:	4610      	mov	r0, r2
}
 800af2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af30:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 800af32:	2b20      	cmp	r3, #32
 800af34:	d0eb      	beq.n	800af0e <HAL_TIM_SlaveConfigSynchro+0x8a>
 800af36:	d90a      	bls.n	800af4e <HAL_TIM_SlaveConfigSynchro+0xca>
 800af38:	2b30      	cmp	r3, #48	; 0x30
 800af3a:	d10b      	bne.n	800af54 <HAL_TIM_SlaveConfigSynchro+0xd0>
 800af3c:	e7e7      	b.n	800af0e <HAL_TIM_SlaveConfigSynchro+0x8a>
 800af3e:	3a20      	subs	r2, #32
 800af40:	4293      	cmp	r3, r2
 800af42:	d0e4      	beq.n	800af0e <HAL_TIM_SlaveConfigSynchro+0x8a>
 800af44:	d90f      	bls.n	800af66 <HAL_TIM_SlaveConfigSynchro+0xe2>
 800af46:	4a22      	ldr	r2, [pc, #136]	; (800afd0 <HAL_TIM_SlaveConfigSynchro+0x14c>)
 800af48:	4293      	cmp	r3, r2
 800af4a:	d0e0      	beq.n	800af0e <HAL_TIM_SlaveConfigSynchro+0x8a>
 800af4c:	e002      	b.n	800af54 <HAL_TIM_SlaveConfigSynchro+0xd0>
 800af4e:	f033 0310 	bics.w	r3, r3, #16
 800af52:	d0dc      	beq.n	800af0e <HAL_TIM_SlaveConfigSynchro+0x8a>
    htim->State = HAL_TIM_STATE_READY;
 800af54:	2001      	movs	r0, #1
    __HAL_UNLOCK(htim);
 800af56:	2300      	movs	r3, #0
    htim->State = HAL_TIM_STATE_READY;
 800af58:	f88c 003d 	strb.w	r0, [ip, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800af5c:	f88c 303c 	strb.w	r3, [ip, #60]	; 0x3c
}
 800af60:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af64:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 800af66:	f023 0310 	bic.w	r3, r3, #16
 800af6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800af6e:	d1f1      	bne.n	800af54 <HAL_TIM_SlaveConfigSynchro+0xd0>
 800af70:	e7cd      	b.n	800af0e <HAL_TIM_SlaveConfigSynchro+0x8a>
  __HAL_LOCK(htim);
 800af72:	2002      	movs	r0, #2
}
 800af74:	4770      	bx	lr
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800af76:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
  tmpsmcr = TIMx->SMCR;
 800af7a:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800af7c:	6909      	ldr	r1, [r1, #16]
 800af7e:	4323      	orrs	r3, r4
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800af80:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800af84:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800af88:	4313      	orrs	r3, r2
  TIMx->SMCR = tmpsmcr;
 800af8a:	6083      	str	r3, [r0, #8]
 800af8c:	e7bf      	b.n	800af0e <HAL_TIM_SlaveConfigSynchro+0x8a>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800af8e:	6a03      	ldr	r3, [r0, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800af90:	688c      	ldr	r4, [r1, #8]
 800af92:	6909      	ldr	r1, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800af94:	f023 0310 	bic.w	r3, r3, #16
 800af98:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800af9a:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 800af9c:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800af9e:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800afa2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800afa6:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 800afaa:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800afae:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800afb0:	6203      	str	r3, [r0, #32]
 800afb2:	e7ac      	b.n	800af0e <HAL_TIM_SlaveConfigSynchro+0x8a>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 800afb4:	2c05      	cmp	r4, #5
 800afb6:	d0cd      	beq.n	800af54 <HAL_TIM_SlaveConfigSynchro+0xd0>
 800afb8:	f1b4 1f01 	cmp.w	r4, #65537	; 0x10001
 800afbc:	d0ca      	beq.n	800af54 <HAL_TIM_SlaveConfigSynchro+0xd0>
      tmpccer = htim->Instance->CCER;
 800afbe:	6a02      	ldr	r2, [r0, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800afc0:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800afc2:	6a03      	ldr	r3, [r0, #32]
 800afc4:	e788      	b.n	800aed8 <HAL_TIM_SlaveConfigSynchro+0x54>
 800afc6:	bf00      	nop
 800afc8:	00100040 	.word	0x00100040
 800afcc:	00100060 	.word	0x00100060
 800afd0:	00100030 	.word	0x00100030

0800afd4 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800afd4:	6a03      	ldr	r3, [r0, #32]
 800afd6:	f023 0310 	bic.w	r3, r3, #16
 800afda:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800afdc:	6a03      	ldr	r3, [r0, #32]
{
 800afde:	b470      	push	{r4, r5, r6}
  tmpcr2 =  TIMx->CR2;
 800afe0:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800afe2:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800afe4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800afe6:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800afea:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800afee:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800aff2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 800aff4:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800aff8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800affc:	4d1c      	ldr	r5, [pc, #112]	; (800b070 <TIM_OC2_SetConfig+0x9c>)
 800affe:	42a8      	cmp	r0, r5
 800b000:	d017      	beq.n	800b032 <TIM_OC2_SetConfig+0x5e>
 800b002:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800b006:	42a8      	cmp	r0, r5
 800b008:	d013      	beq.n	800b032 <TIM_OC2_SetConfig+0x5e>
 800b00a:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 800b00e:	42a8      	cmp	r0, r5
 800b010:	d025      	beq.n	800b05e <TIM_OC2_SetConfig+0x8a>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b012:	4d18      	ldr	r5, [pc, #96]	; (800b074 <TIM_OC2_SetConfig+0xa0>)
 800b014:	42a8      	cmp	r0, r5
 800b016:	d013      	beq.n	800b040 <TIM_OC2_SetConfig+0x6c>
 800b018:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800b01c:	42a8      	cmp	r0, r5
 800b01e:	d00f      	beq.n	800b040 <TIM_OC2_SetConfig+0x6c>
 800b020:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800b024:	42a8      	cmp	r0, r5
 800b026:	d00b      	beq.n	800b040 <TIM_OC2_SetConfig+0x6c>
 800b028:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800b02c:	42a8      	cmp	r0, r5
 800b02e:	d10f      	bne.n	800b050 <TIM_OC2_SetConfig+0x7c>
 800b030:	e006      	b.n	800b040 <TIM_OC2_SetConfig+0x6c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b032:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800b034:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b038:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 800b03c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b040:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b044:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b048:	ea46 0c05 	orr.w	ip, r6, r5
 800b04c:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 800b050:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800b052:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800b054:	6182      	str	r2, [r0, #24]
}
 800b056:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR2 = OC_Config->Pulse;
 800b058:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800b05a:	6203      	str	r3, [r0, #32]
}
 800b05c:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b05e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800b060:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b064:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 800b068:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b06c:	e7d1      	b.n	800b012 <TIM_OC2_SetConfig+0x3e>
 800b06e:	bf00      	nop
 800b070:	40012c00 	.word	0x40012c00
 800b074:	40014000 	.word	0x40014000

0800b078 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 800b078:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800b07c:	2b01      	cmp	r3, #1
 800b07e:	f000 80ff 	beq.w	800b280 <HAL_TIM_PWM_ConfigChannel+0x208>
 800b082:	2301      	movs	r3, #1
{
 800b084:	b570      	push	{r4, r5, r6, lr}
 800b086:	4604      	mov	r4, r0
 800b088:	460d      	mov	r5, r1
  __HAL_LOCK(htim);
 800b08a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 800b08e:	2a14      	cmp	r2, #20
 800b090:	d80c      	bhi.n	800b0ac <HAL_TIM_PWM_ConfigChannel+0x34>
 800b092:	e8df f002 	tbb	[pc, r2]
 800b096:	0b59      	.short	0x0b59
 800b098:	0b6e0b0b 	.word	0x0b6e0b0b
 800b09c:	0b840b0b 	.word	0x0b840b0b
 800b0a0:	0b990b0b 	.word	0x0b990b0b
 800b0a4:	0baf0b0b 	.word	0x0baf0b0b
 800b0a8:	0b0b      	.short	0x0b0b
 800b0aa:	11          	.byte	0x11
 800b0ab:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 800b0ac:	2300      	movs	r3, #0
  switch (Channel)
 800b0ae:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 800b0b0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800b0b4:	4610      	mov	r0, r2
 800b0b6:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b0b8:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b0ba:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b0bc:	6a1a      	ldr	r2, [r3, #32]
 800b0be:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800b0c2:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 800b0c4:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800b0c6:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 800b0c8:	6d19      	ldr	r1, [r3, #80]	; 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b0ca:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 800b0ce:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b0d2:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b0d6:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b0d8:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b0dc:	ea42 5206 	orr.w	r2, r2, r6, lsl #20
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b0e0:	4e69      	ldr	r6, [pc, #420]	; (800b288 <HAL_TIM_PWM_ConfigChannel+0x210>)
 800b0e2:	42b3      	cmp	r3, r6
 800b0e4:	d013      	beq.n	800b10e <HAL_TIM_PWM_ConfigChannel+0x96>
 800b0e6:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 800b0ea:	42b3      	cmp	r3, r6
 800b0ec:	d00f      	beq.n	800b10e <HAL_TIM_PWM_ConfigChannel+0x96>
 800b0ee:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 800b0f2:	42b3      	cmp	r3, r6
 800b0f4:	d00b      	beq.n	800b10e <HAL_TIM_PWM_ConfigChannel+0x96>
 800b0f6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800b0fa:	42b3      	cmp	r3, r6
 800b0fc:	d007      	beq.n	800b10e <HAL_TIM_PWM_ConfigChannel+0x96>
 800b0fe:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800b102:	42b3      	cmp	r3, r6
 800b104:	d003      	beq.n	800b10e <HAL_TIM_PWM_ConfigChannel+0x96>
 800b106:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 800b10a:	42b3      	cmp	r3, r6
 800b10c:	d104      	bne.n	800b118 <HAL_TIM_PWM_ConfigChannel+0xa0>
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b10e:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b110:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b114:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
  TIMx->CR2 = tmpcr2;
 800b118:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 800b11a:	6519      	str	r1, [r3, #80]	; 0x50
  TIMx->CCR6 = OC_Config->Pulse;
 800b11c:	6869      	ldr	r1, [r5, #4]
 800b11e:	64d9      	str	r1, [r3, #76]	; 0x4c
  TIMx->CCER = tmpccer;
 800b120:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b122:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b124:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b126:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b12a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b12c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800b12e:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800b132:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b134:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800b136:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 800b13a:	6519      	str	r1, [r3, #80]	; 0x50
  __HAL_UNLOCK(htim);
 800b13c:	2300      	movs	r3, #0
  HAL_StatusTypeDef status = HAL_OK;
 800b13e:	2200      	movs	r2, #0
  __HAL_UNLOCK(htim);
 800b140:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800b144:	4610      	mov	r0, r2
 800b146:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b148:	6800      	ldr	r0, [r0, #0]
 800b14a:	f7ff fb67 	bl	800a81c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b14e:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b150:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b152:	f043 0308 	orr.w	r3, r3, #8
 800b156:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b158:	6983      	ldr	r3, [r0, #24]
 800b15a:	f023 0304 	bic.w	r3, r3, #4
 800b15e:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b160:	6983      	ldr	r3, [r0, #24]
 800b162:	430b      	orrs	r3, r1
 800b164:	6183      	str	r3, [r0, #24]
  __HAL_UNLOCK(htim);
 800b166:	2300      	movs	r3, #0
  HAL_StatusTypeDef status = HAL_OK;
 800b168:	2200      	movs	r2, #0
  __HAL_UNLOCK(htim);
 800b16a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800b16e:	4610      	mov	r0, r2
 800b170:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b172:	6800      	ldr	r0, [r0, #0]
 800b174:	f7ff ff2e 	bl	800afd4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b178:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b17a:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b17c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b180:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b182:	6983      	ldr	r3, [r0, #24]
 800b184:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b188:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b18a:	6983      	ldr	r3, [r0, #24]
 800b18c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800b190:	6183      	str	r3, [r0, #24]
  __HAL_UNLOCK(htim);
 800b192:	2300      	movs	r3, #0
  HAL_StatusTypeDef status = HAL_OK;
 800b194:	2200      	movs	r2, #0
  __HAL_UNLOCK(htim);
 800b196:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800b19a:	4610      	mov	r0, r2
 800b19c:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b19e:	6800      	ldr	r0, [r0, #0]
 800b1a0:	f7ff fb7c 	bl	800a89c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b1a4:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b1a6:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b1a8:	f043 0308 	orr.w	r3, r3, #8
 800b1ac:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b1ae:	69c3      	ldr	r3, [r0, #28]
 800b1b0:	f023 0304 	bic.w	r3, r3, #4
 800b1b4:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b1b6:	69c3      	ldr	r3, [r0, #28]
 800b1b8:	430b      	orrs	r3, r1
 800b1ba:	61c3      	str	r3, [r0, #28]
  __HAL_UNLOCK(htim);
 800b1bc:	2300      	movs	r3, #0
  HAL_StatusTypeDef status = HAL_OK;
 800b1be:	2200      	movs	r2, #0
  __HAL_UNLOCK(htim);
 800b1c0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800b1c4:	4610      	mov	r0, r2
 800b1c6:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b1c8:	6800      	ldr	r0, [r0, #0]
 800b1ca:	f7ff fbb7 	bl	800a93c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b1ce:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b1d0:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b1d2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b1d6:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b1d8:	69c3      	ldr	r3, [r0, #28]
 800b1da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b1de:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b1e0:	69c3      	ldr	r3, [r0, #28]
 800b1e2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800b1e6:	61c3      	str	r3, [r0, #28]
  __HAL_UNLOCK(htim);
 800b1e8:	2300      	movs	r3, #0
  HAL_StatusTypeDef status = HAL_OK;
 800b1ea:	2200      	movs	r2, #0
  __HAL_UNLOCK(htim);
 800b1ec:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800b1f0:	4610      	mov	r0, r2
 800b1f2:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b1f4:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 800b1f6:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b1f8:	6a1a      	ldr	r2, [r3, #32]
 800b1fa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800b1fe:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 800b200:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800b202:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 800b204:	6d19      	ldr	r1, [r3, #80]	; 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b206:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800b20a:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 800b20e:	4331      	orrs	r1, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b210:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 800b212:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b216:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b21a:	4e1b      	ldr	r6, [pc, #108]	; (800b288 <HAL_TIM_PWM_ConfigChannel+0x210>)
 800b21c:	42b3      	cmp	r3, r6
 800b21e:	d013      	beq.n	800b248 <HAL_TIM_PWM_ConfigChannel+0x1d0>
 800b220:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 800b224:	42b3      	cmp	r3, r6
 800b226:	d00f      	beq.n	800b248 <HAL_TIM_PWM_ConfigChannel+0x1d0>
 800b228:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 800b22c:	42b3      	cmp	r3, r6
 800b22e:	d00b      	beq.n	800b248 <HAL_TIM_PWM_ConfigChannel+0x1d0>
 800b230:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800b234:	42b3      	cmp	r3, r6
 800b236:	d007      	beq.n	800b248 <HAL_TIM_PWM_ConfigChannel+0x1d0>
 800b238:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800b23c:	42b3      	cmp	r3, r6
 800b23e:	d003      	beq.n	800b248 <HAL_TIM_PWM_ConfigChannel+0x1d0>
 800b240:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 800b244:	42b3      	cmp	r3, r6
 800b246:	d104      	bne.n	800b252 <HAL_TIM_PWM_ConfigChannel+0x1da>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b248:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b24a:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b24e:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  TIMx->CR2 = tmpcr2;
 800b252:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 800b254:	6519      	str	r1, [r3, #80]	; 0x50
  TIMx->CCR5 = OC_Config->Pulse;
 800b256:	6869      	ldr	r1, [r5, #4]
 800b258:	6499      	str	r1, [r3, #72]	; 0x48
  TIMx->CCER = tmpccer;
 800b25a:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b25c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b25e:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b260:	f042 0208 	orr.w	r2, r2, #8
 800b264:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b266:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800b268:	f021 0104 	bic.w	r1, r1, #4
 800b26c:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b26e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800b270:	4301      	orrs	r1, r0
 800b272:	6519      	str	r1, [r3, #80]	; 0x50
  __HAL_UNLOCK(htim);
 800b274:	2300      	movs	r3, #0
  HAL_StatusTypeDef status = HAL_OK;
 800b276:	2200      	movs	r2, #0
  __HAL_UNLOCK(htim);
 800b278:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800b27c:	4610      	mov	r0, r2
 800b27e:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 800b280:	2202      	movs	r2, #2
}
 800b282:	4610      	mov	r0, r2
 800b284:	4770      	bx	lr
 800b286:	bf00      	nop
 800b288:	40012c00 	.word	0x40012c00

0800b28c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b28c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800b290:	2b01      	cmp	r3, #1
 800b292:	d051      	beq.n	800b338 <HAL_TIMEx_MasterConfigSynchronization+0xac>
{
 800b294:	b430      	push	{r4, r5}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b296:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b298:	4d28      	ldr	r5, [pc, #160]	; (800b33c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
  htim->State = HAL_TIM_STATE_BUSY;
 800b29a:	2302      	movs	r3, #2
 800b29c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b2a0:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 800b2a2:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 800b2a4:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b2a6:	d03b      	beq.n	800b320 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 800b2a8:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800b2ac:	42aa      	cmp	r2, r5
 800b2ae:	d032      	beq.n	800b316 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
 800b2b0:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 800b2b4:	42aa      	cmp	r2, r5
 800b2b6:	d02e      	beq.n	800b316 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b2b8:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800b2ba:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800b2be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b2c2:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b2c4:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->Instance->CR2 = tmpcr2;
 800b2c8:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b2ca:	d016      	beq.n	800b2fa <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800b2cc:	4b1c      	ldr	r3, [pc, #112]	; (800b340 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800b2ce:	429a      	cmp	r2, r3
 800b2d0:	d013      	beq.n	800b2fa <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800b2d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b2d6:	429a      	cmp	r2, r3
 800b2d8:	d00f      	beq.n	800b2fa <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800b2da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b2de:	429a      	cmp	r2, r3
 800b2e0:	d00b      	beq.n	800b2fa <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800b2e2:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 800b2e6:	429a      	cmp	r2, r3
 800b2e8:	d007      	beq.n	800b2fa <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800b2ea:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800b2ee:	429a      	cmp	r2, r3
 800b2f0:	d003      	beq.n	800b2fa <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800b2f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b2f6:	429a      	cmp	r2, r3
 800b2f8:	d104      	bne.n	800b304 <HAL_TIMEx_MasterConfigSynchronization+0x78>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b2fa:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b2fc:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b300:	431c      	orrs	r4, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b302:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800b304:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800b306:	2201      	movs	r2, #1
 800b308:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800b30c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 800b310:	bc30      	pop	{r4, r5}
  return HAL_OK;
 800b312:	4618      	mov	r0, r3
}
 800b314:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b316:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b318:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b31c:	432b      	orrs	r3, r5
 800b31e:	e7cb      	b.n	800b2b8 <HAL_TIMEx_MasterConfigSynchronization+0x2c>
 800b320:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b322:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b326:	432b      	orrs	r3, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 800b328:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b32c:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800b32e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b332:	432b      	orrs	r3, r5
  htim->Instance->CR2 = tmpcr2;
 800b334:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b336:	e7e0      	b.n	800b2fa <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  __HAL_LOCK(htim);
 800b338:	2002      	movs	r0, #2
}
 800b33a:	4770      	bx	lr
 800b33c:	40012c00 	.word	0x40012c00
 800b340:	40000400 	.word	0x40000400

0800b344 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b344:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800b348:	2b01      	cmp	r3, #1
 800b34a:	d048      	beq.n	800b3de <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
{
 800b34c:	b410      	push	{r4}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b34e:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 800b352:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b356:	4602      	mov	r2, r0
 800b358:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b35a:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b35c:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b35e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b362:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b364:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b368:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b36a:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b36c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b370:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b372:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b374:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b378:	6b08      	ldr	r0, [r1, #48]	; 0x30
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b37a:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b37c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b380:	698c      	ldr	r4, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b382:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b384:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b388:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b38a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b38e:	4c15      	ldr	r4, [pc, #84]	; (800b3e4 <HAL_TIMEx_ConfigBreakDeadTime+0xa0>)
 800b390:	42a0      	cmp	r0, r4
 800b392:	d007      	beq.n	800b3a4 <HAL_TIMEx_ConfigBreakDeadTime+0x60>
 800b394:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 800b398:	42a0      	cmp	r0, r4
 800b39a:	d003      	beq.n	800b3a4 <HAL_TIMEx_ConfigBreakDeadTime+0x60>
 800b39c:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 800b3a0:	42a0      	cmp	r0, r4
 800b3a2:	d114      	bne.n	800b3ce <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b3a4:	69cc      	ldr	r4, [r1, #28]
 800b3a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b3aa:	4323      	orrs	r3, r4
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b3ac:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 800b3ae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b3b2:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b3b6:	6a0c      	ldr	r4, [r1, #32]
 800b3b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b3bc:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b3be:	6a4c      	ldr	r4, [r1, #36]	; 0x24
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b3c0:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b3c2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800b3c6:	4323      	orrs	r3, r4
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b3c8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b3cc:	430b      	orrs	r3, r1
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 800b3ce:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 800b3d0:	6443      	str	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(htim);
 800b3d2:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c

  return HAL_OK;
 800b3d6:	4608      	mov	r0, r1
}
 800b3d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3dc:	4770      	bx	lr
  __HAL_LOCK(htim);
 800b3de:	2002      	movs	r0, #2
}
 800b3e0:	4770      	bx	lr
 800b3e2:	bf00      	nop
 800b3e4:	40012c00 	.word	0x40012c00

0800b3e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b3e8:	b538      	push	{r3, r4, r5, lr}
 800b3ea:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800b3ec:	6803      	ldr	r3, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b3ee:	6882      	ldr	r2, [r0, #8]
 800b3f0:	6900      	ldr	r0, [r0, #16]
 800b3f2:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b3f4:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b3f6:	4302      	orrs	r2, r0
 800b3f8:	430a      	orrs	r2, r1
 800b3fa:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b3fc:	49b2      	ldr	r1, [pc, #712]	; (800b6c8 <UART_SetConfig+0x2e0>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b3fe:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b400:	4029      	ands	r1, r5
 800b402:	430a      	orrs	r2, r1
 800b404:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b406:	685a      	ldr	r2, [r3, #4]
 800b408:	68e1      	ldr	r1, [r4, #12]
 800b40a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800b40e:	430a      	orrs	r2, r1
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b410:	49ae      	ldr	r1, [pc, #696]	; (800b6cc <UART_SetConfig+0x2e4>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b412:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b414:	428b      	cmp	r3, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b416:	69a2      	ldr	r2, [r4, #24]
  {
    tmpreg |= huart->Init.OneBitSampling;
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b418:	6899      	ldr	r1, [r3, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b41a:	f000 8081 	beq.w	800b520 <UART_SetConfig+0x138>
    tmpreg |= huart->Init.OneBitSampling;
 800b41e:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b420:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 800b424:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 800b428:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b42a:	430a      	orrs	r2, r1
 800b42c:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b42e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b430:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b432:	f022 020f 	bic.w	r2, r2, #15
 800b436:	430a      	orrs	r2, r1
 800b438:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b43a:	4aa5      	ldr	r2, [pc, #660]	; (800b6d0 <UART_SetConfig+0x2e8>)
 800b43c:	4293      	cmp	r3, r2
 800b43e:	d027      	beq.n	800b490 <UART_SetConfig+0xa8>
 800b440:	4aa4      	ldr	r2, [pc, #656]	; (800b6d4 <UART_SetConfig+0x2ec>)
 800b442:	4293      	cmp	r3, r2
 800b444:	d04b      	beq.n	800b4de <UART_SetConfig+0xf6>
 800b446:	4aa4      	ldr	r2, [pc, #656]	; (800b6d8 <UART_SetConfig+0x2f0>)
 800b448:	4293      	cmp	r3, r2
 800b44a:	f000 8111 	beq.w	800b670 <UART_SetConfig+0x288>
 800b44e:	4aa3      	ldr	r2, [pc, #652]	; (800b6dc <UART_SetConfig+0x2f4>)
 800b450:	4293      	cmp	r3, r2
 800b452:	f000 80b9 	beq.w	800b5c8 <UART_SetConfig+0x1e0>
 800b456:	4aa2      	ldr	r2, [pc, #648]	; (800b6e0 <UART_SetConfig+0x2f8>)
 800b458:	4293      	cmp	r3, r2
 800b45a:	d111      	bne.n	800b480 <UART_SetConfig+0x98>
 800b45c:	4ba1      	ldr	r3, [pc, #644]	; (800b6e4 <UART_SetConfig+0x2fc>)
 800b45e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b462:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b466:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b46a:	f000 8126 	beq.w	800b6ba <UART_SetConfig+0x2d2>
 800b46e:	f200 80d5 	bhi.w	800b61c <UART_SetConfig+0x234>
 800b472:	2b00      	cmp	r3, #0
 800b474:	f000 80d9 	beq.w	800b62a <UART_SetConfig+0x242>
 800b478:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b47c:	f000 80b0 	beq.w	800b5e0 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
        break;
      default:
        pclk = 0U;
        ret = HAL_ERROR;
 800b480:	2001      	movs	r0, #1
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b482:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 800b484:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->TxISR = NULL;
 800b488:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 800b48c:	66a2      	str	r2, [r4, #104]	; 0x68

  return ret;
}
 800b48e:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b490:	4b94      	ldr	r3, [pc, #592]	; (800b6e4 <UART_SetConfig+0x2fc>)
 800b492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b496:	f003 0303 	and.w	r3, r3, #3
 800b49a:	3b01      	subs	r3, #1
 800b49c:	2b02      	cmp	r3, #2
 800b49e:	f240 808d 	bls.w	800b5bc <UART_SetConfig+0x1d4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b4a2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800b4a6:	f000 8103 	beq.w	800b6b0 <UART_SetConfig+0x2c8>
        pclk = HAL_RCC_GetPCLK2Freq();
 800b4aa:	f7ff f815 	bl	800a4d8 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 800b4ae:	2800      	cmp	r0, #0
 800b4b0:	f000 80dc 	beq.w	800b66c <UART_SetConfig+0x284>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b4b4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b4b6:	6862      	ldr	r2, [r4, #4]
 800b4b8:	4b8b      	ldr	r3, [pc, #556]	; (800b6e8 <UART_SetConfig+0x300>)
 800b4ba:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800b4be:	fbb0 f3f3 	udiv	r3, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b4c2:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b4c6:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800b4ca:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b4ce:	f1a3 0210 	sub.w	r2, r3, #16
 800b4d2:	428a      	cmp	r2, r1
 800b4d4:	d8d4      	bhi.n	800b480 <UART_SetConfig+0x98>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b4d6:	6822      	ldr	r2, [r4, #0]
 800b4d8:	2000      	movs	r0, #0
 800b4da:	60d3      	str	r3, [r2, #12]
 800b4dc:	e7d1      	b.n	800b482 <UART_SetConfig+0x9a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b4de:	4b81      	ldr	r3, [pc, #516]	; (800b6e4 <UART_SetConfig+0x2fc>)
 800b4e0:	4a82      	ldr	r2, [pc, #520]	; (800b6ec <UART_SetConfig+0x304>)
 800b4e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4e6:	f003 030c 	and.w	r3, r3, #12
 800b4ea:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b4ec:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800b4f0:	d07c      	beq.n	800b5ec <UART_SetConfig+0x204>
    switch (clocksource)
 800b4f2:	2b08      	cmp	r3, #8
 800b4f4:	d8c4      	bhi.n	800b480 <UART_SetConfig+0x98>
 800b4f6:	a201      	add	r2, pc, #4	; (adr r2, 800b4fc <UART_SetConfig+0x114>)
 800b4f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4fc:	0800b625 	.word	0x0800b625
 800b500:	0800b4ab 	.word	0x0800b4ab
 800b504:	0800b6a7 	.word	0x0800b6a7
 800b508:	0800b481 	.word	0x0800b481
 800b50c:	0800b5e7 	.word	0x0800b5e7
 800b510:	0800b481 	.word	0x0800b481
 800b514:	0800b481 	.word	0x0800b481
 800b518:	0800b481 	.word	0x0800b481
 800b51c:	0800b697 	.word	0x0800b697
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b520:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 800b524:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800b528:	4311      	orrs	r1, r2
 800b52a:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b52c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b52e:	6a61      	ldr	r1, [r4, #36]	; 0x24
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b530:	486c      	ldr	r0, [pc, #432]	; (800b6e4 <UART_SetConfig+0x2fc>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b532:	f022 020f 	bic.w	r2, r2, #15
 800b536:	430a      	orrs	r2, r1
 800b538:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b53a:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800b53e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b542:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b546:	f000 80ac 	beq.w	800b6a2 <UART_SetConfig+0x2ba>
 800b54a:	d80b      	bhi.n	800b564 <UART_SetConfig+0x17c>
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d038      	beq.n	800b5c2 <UART_SetConfig+0x1da>
 800b550:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b554:	d194      	bne.n	800b480 <UART_SetConfig+0x98>
        pclk = HAL_RCC_GetSysClockFreq();
 800b556:	f7fe fe6b 	bl	800a230 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 800b55a:	2800      	cmp	r0, #0
 800b55c:	f000 8086 	beq.w	800b66c <UART_SetConfig+0x284>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b560:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b562:	e004      	b.n	800b56e <UART_SetConfig+0x186>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b564:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b568:	d18a      	bne.n	800b480 <UART_SetConfig+0x98>
        pclk = (uint32_t) LSE_VALUE;
 800b56a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b56e:	4b5e      	ldr	r3, [pc, #376]	; (800b6e8 <UART_SetConfig+0x300>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b570:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b572:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 800b576:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b57a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800b57e:	4299      	cmp	r1, r3
 800b580:	f63f af7e 	bhi.w	800b480 <UART_SetConfig+0x98>
 800b584:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800b588:	f63f af7a 	bhi.w	800b480 <UART_SetConfig+0x98>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b58c:	2300      	movs	r3, #0
 800b58e:	4619      	mov	r1, r3
 800b590:	f7f8 fbcc 	bl	8003d2c <__aeabi_uldivmod>
 800b594:	086a      	lsrs	r2, r5, #1
 800b596:	0203      	lsls	r3, r0, #8
 800b598:	0209      	lsls	r1, r1, #8
 800b59a:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800b59e:	1898      	adds	r0, r3, r2
 800b5a0:	f141 0100 	adc.w	r1, r1, #0
 800b5a4:	462a      	mov	r2, r5
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	f7f8 fbc0 	bl	8003d2c <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b5ac:	4a50      	ldr	r2, [pc, #320]	; (800b6f0 <UART_SetConfig+0x308>)
 800b5ae:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 800b5b2:	4291      	cmp	r1, r2
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b5b4:	4603      	mov	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b5b6:	f63f af63 	bhi.w	800b480 <UART_SetConfig+0x98>
 800b5ba:	e78c      	b.n	800b4d6 <UART_SetConfig+0xee>
 800b5bc:	4a4d      	ldr	r2, [pc, #308]	; (800b6f4 <UART_SetConfig+0x30c>)
 800b5be:	5cd3      	ldrb	r3, [r2, r3]
  if (UART_INSTANCE_LOWPOWER(huart))
 800b5c0:	e794      	b.n	800b4ec <UART_SetConfig+0x104>
        pclk = HAL_RCC_GetPCLK1Freq();
 800b5c2:	f7fe ff77 	bl	800a4b4 <HAL_RCC_GetPCLK1Freq>
        break;
 800b5c6:	e7c8      	b.n	800b55a <UART_SetConfig+0x172>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b5c8:	4b46      	ldr	r3, [pc, #280]	; (800b6e4 <UART_SetConfig+0x2fc>)
 800b5ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5ce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b5d2:	2b80      	cmp	r3, #128	; 0x80
 800b5d4:	d071      	beq.n	800b6ba <UART_SetConfig+0x2d2>
 800b5d6:	d861      	bhi.n	800b69c <UART_SetConfig+0x2b4>
 800b5d8:	b33b      	cbz	r3, 800b62a <UART_SetConfig+0x242>
 800b5da:	2b40      	cmp	r3, #64	; 0x40
 800b5dc:	f47f af50 	bne.w	800b480 <UART_SetConfig+0x98>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b5e0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800b5e4:	d061      	beq.n	800b6aa <UART_SetConfig+0x2c2>
        pclk = HAL_RCC_GetSysClockFreq();
 800b5e6:	f7fe fe23 	bl	800a230 <HAL_RCC_GetSysClockFreq>
        break;
 800b5ea:	e760      	b.n	800b4ae <UART_SetConfig+0xc6>
    switch (clocksource)
 800b5ec:	2b08      	cmp	r3, #8
 800b5ee:	f63f af47 	bhi.w	800b480 <UART_SetConfig+0x98>
 800b5f2:	a201      	add	r2, pc, #4	; (adr r2, 800b5f8 <UART_SetConfig+0x210>)
 800b5f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5f8:	0800b631 	.word	0x0800b631
 800b5fc:	0800b6b1 	.word	0x0800b6b1
 800b600:	0800b6b7 	.word	0x0800b6b7
 800b604:	0800b481 	.word	0x0800b481
 800b608:	0800b6ab 	.word	0x0800b6ab
 800b60c:	0800b481 	.word	0x0800b481
 800b610:	0800b481 	.word	0x0800b481
 800b614:	0800b481 	.word	0x0800b481
 800b618:	0800b639 	.word	0x0800b639
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b61c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b620:	d036      	beq.n	800b690 <UART_SetConfig+0x2a8>
 800b622:	e72d      	b.n	800b480 <UART_SetConfig+0x98>
        pclk = HAL_RCC_GetPCLK1Freq();
 800b624:	f7fe ff46 	bl	800a4b4 <HAL_RCC_GetPCLK1Freq>
        break;
 800b628:	e741      	b.n	800b4ae <UART_SetConfig+0xc6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b62a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800b62e:	d1f9      	bne.n	800b624 <UART_SetConfig+0x23c>
        pclk = HAL_RCC_GetPCLK1Freq();
 800b630:	f7fe ff40 	bl	800a4b4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800b634:	b1d0      	cbz	r0, 800b66c <UART_SetConfig+0x284>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b636:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b638:	6862      	ldr	r2, [r4, #4]
 800b63a:	4b2b      	ldr	r3, [pc, #172]	; (800b6e8 <UART_SetConfig+0x300>)
 800b63c:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 800b640:	fbb0 f0f1 	udiv	r0, r0, r1
 800b644:	0853      	lsrs	r3, r2, #1
 800b646:	eb03 0340 	add.w	r3, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b64a:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b64e:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b652:	f1a3 0210 	sub.w	r2, r3, #16
 800b656:	428a      	cmp	r2, r1
 800b658:	f63f af12 	bhi.w	800b480 <UART_SetConfig+0x98>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b65c:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 800b660:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b662:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b664:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 800b668:	4313      	orrs	r3, r2
 800b66a:	60cb      	str	r3, [r1, #12]
 800b66c:	2000      	movs	r0, #0
 800b66e:	e708      	b.n	800b482 <UART_SetConfig+0x9a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b670:	4b1c      	ldr	r3, [pc, #112]	; (800b6e4 <UART_SetConfig+0x2fc>)
 800b672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b676:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b67a:	2b20      	cmp	r3, #32
 800b67c:	d01d      	beq.n	800b6ba <UART_SetConfig+0x2d2>
 800b67e:	d804      	bhi.n	800b68a <UART_SetConfig+0x2a2>
 800b680:	2b00      	cmp	r3, #0
 800b682:	d0d2      	beq.n	800b62a <UART_SetConfig+0x242>
 800b684:	2b10      	cmp	r3, #16
 800b686:	d0ab      	beq.n	800b5e0 <UART_SetConfig+0x1f8>
 800b688:	e6fa      	b.n	800b480 <UART_SetConfig+0x98>
 800b68a:	2b30      	cmp	r3, #48	; 0x30
 800b68c:	f47f aef8 	bne.w	800b480 <UART_SetConfig+0x98>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b690:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800b694:	d0d0      	beq.n	800b638 <UART_SetConfig+0x250>
    switch (clocksource)
 800b696:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800b69a:	e70c      	b.n	800b4b6 <UART_SetConfig+0xce>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b69c:	2bc0      	cmp	r3, #192	; 0xc0
 800b69e:	d0f7      	beq.n	800b690 <UART_SetConfig+0x2a8>
 800b6a0:	e6ee      	b.n	800b480 <UART_SetConfig+0x98>
 800b6a2:	4815      	ldr	r0, [pc, #84]	; (800b6f8 <UART_SetConfig+0x310>)
 800b6a4:	e763      	b.n	800b56e <UART_SetConfig+0x186>
        pclk = (uint32_t) HSI_VALUE;
 800b6a6:	4814      	ldr	r0, [pc, #80]	; (800b6f8 <UART_SetConfig+0x310>)
 800b6a8:	e705      	b.n	800b4b6 <UART_SetConfig+0xce>
        pclk = HAL_RCC_GetSysClockFreq();
 800b6aa:	f7fe fdc1 	bl	800a230 <HAL_RCC_GetSysClockFreq>
        break;
 800b6ae:	e7c1      	b.n	800b634 <UART_SetConfig+0x24c>
        pclk = HAL_RCC_GetPCLK2Freq();
 800b6b0:	f7fe ff12 	bl	800a4d8 <HAL_RCC_GetPCLK2Freq>
        break;
 800b6b4:	e7be      	b.n	800b634 <UART_SetConfig+0x24c>
        pclk = (uint32_t) HSI_VALUE;
 800b6b6:	4810      	ldr	r0, [pc, #64]	; (800b6f8 <UART_SetConfig+0x310>)
 800b6b8:	e7be      	b.n	800b638 <UART_SetConfig+0x250>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b6ba:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
        pclk = (uint32_t) HSI_VALUE;
 800b6be:	480e      	ldr	r0, [pc, #56]	; (800b6f8 <UART_SetConfig+0x310>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b6c0:	f47f aef9 	bne.w	800b4b6 <UART_SetConfig+0xce>
 800b6c4:	e7b8      	b.n	800b638 <UART_SetConfig+0x250>
 800b6c6:	bf00      	nop
 800b6c8:	cfff69f3 	.word	0xcfff69f3
 800b6cc:	40008000 	.word	0x40008000
 800b6d0:	40013800 	.word	0x40013800
 800b6d4:	40004400 	.word	0x40004400
 800b6d8:	40004800 	.word	0x40004800
 800b6dc:	40004c00 	.word	0x40004c00
 800b6e0:	40005000 	.word	0x40005000
 800b6e4:	40021000 	.word	0x40021000
 800b6e8:	0801c8b0 	.word	0x0801c8b0
 800b6ec:	0801c8a0 	.word	0x0801c8a0
 800b6f0:	000ffcff 	.word	0x000ffcff
 800b6f4:	0801c89c 	.word	0x0801c89c
 800b6f8:	00f42400 	.word	0x00f42400

0800b6fc <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b6fc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b6fe:	07da      	lsls	r2, r3, #31
{
 800b700:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b702:	d506      	bpl.n	800b712 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b704:	6801      	ldr	r1, [r0, #0]
 800b706:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800b708:	684a      	ldr	r2, [r1, #4]
 800b70a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800b70e:	4322      	orrs	r2, r4
 800b710:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b712:	079c      	lsls	r4, r3, #30
 800b714:	d506      	bpl.n	800b724 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b716:	6801      	ldr	r1, [r0, #0]
 800b718:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800b71a:	684a      	ldr	r2, [r1, #4]
 800b71c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800b720:	4322      	orrs	r2, r4
 800b722:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b724:	0759      	lsls	r1, r3, #29
 800b726:	d506      	bpl.n	800b736 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b728:	6801      	ldr	r1, [r0, #0]
 800b72a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800b72c:	684a      	ldr	r2, [r1, #4]
 800b72e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b732:	4322      	orrs	r2, r4
 800b734:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b736:	071a      	lsls	r2, r3, #28
 800b738:	d506      	bpl.n	800b748 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b73a:	6801      	ldr	r1, [r0, #0]
 800b73c:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800b73e:	684a      	ldr	r2, [r1, #4]
 800b740:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b744:	4322      	orrs	r2, r4
 800b746:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b748:	06dc      	lsls	r4, r3, #27
 800b74a:	d506      	bpl.n	800b75a <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b74c:	6801      	ldr	r1, [r0, #0]
 800b74e:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800b750:	688a      	ldr	r2, [r1, #8]
 800b752:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b756:	4322      	orrs	r2, r4
 800b758:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b75a:	0699      	lsls	r1, r3, #26
 800b75c:	d506      	bpl.n	800b76c <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b75e:	6801      	ldr	r1, [r0, #0]
 800b760:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800b762:	688a      	ldr	r2, [r1, #8]
 800b764:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b768:	4322      	orrs	r2, r4
 800b76a:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b76c:	065a      	lsls	r2, r3, #25
 800b76e:	d509      	bpl.n	800b784 <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b770:	6801      	ldr	r1, [r0, #0]
 800b772:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800b774:	684a      	ldr	r2, [r1, #4]
 800b776:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800b77a:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b77c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b780:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b782:	d00b      	beq.n	800b79c <UART_AdvFeatureConfig+0xa0>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b784:	061b      	lsls	r3, r3, #24
 800b786:	d506      	bpl.n	800b796 <UART_AdvFeatureConfig+0x9a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b788:	6802      	ldr	r2, [r0, #0]
 800b78a:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800b78c:	6853      	ldr	r3, [r2, #4]
 800b78e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800b792:	430b      	orrs	r3, r1
 800b794:	6053      	str	r3, [r2, #4]
  }
}
 800b796:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b79a:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b79c:	684a      	ldr	r2, [r1, #4]
 800b79e:	6c84      	ldr	r4, [r0, #72]	; 0x48
 800b7a0:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800b7a4:	4322      	orrs	r2, r4
 800b7a6:	604a      	str	r2, [r1, #4]
 800b7a8:	e7ec      	b.n	800b784 <UART_AdvFeatureConfig+0x88>
 800b7aa:	bf00      	nop

0800b7ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b7ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b7b4:	6804      	ldr	r4, [r0, #0]
{
 800b7b6:	4607      	mov	r7, r0
 800b7b8:	460e      	mov	r6, r1
 800b7ba:	4615      	mov	r5, r2
 800b7bc:	4699      	mov	r9, r3
 800b7be:	f1b8 3fff 	cmp.w	r8, #4294967295
 800b7c2:	d10a      	bne.n	800b7da <UART_WaitOnFlagUntilTimeout+0x2e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b7c4:	69e3      	ldr	r3, [r4, #28]
 800b7c6:	ea36 0303 	bics.w	r3, r6, r3
 800b7ca:	bf0c      	ite	eq
 800b7cc:	2301      	moveq	r3, #1
 800b7ce:	2300      	movne	r3, #0
 800b7d0:	429d      	cmp	r5, r3
 800b7d2:	d0f7      	beq.n	800b7c4 <UART_WaitOnFlagUntilTimeout+0x18>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 800b7d4:	2000      	movs	r0, #0
}
 800b7d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b7da:	69e2      	ldr	r2, [r4, #28]
 800b7dc:	ea36 0202 	bics.w	r2, r6, r2
 800b7e0:	bf0c      	ite	eq
 800b7e2:	2301      	moveq	r3, #1
 800b7e4:	2300      	movne	r3, #0
 800b7e6:	42ab      	cmp	r3, r5
 800b7e8:	d1f4      	bne.n	800b7d4 <UART_WaitOnFlagUntilTimeout+0x28>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b7ea:	f7fd f839 	bl	8008860 <HAL_GetTick>
 800b7ee:	eba0 0009 	sub.w	r0, r0, r9
 800b7f2:	4540      	cmp	r0, r8
 800b7f4:	d833      	bhi.n	800b85e <UART_WaitOnFlagUntilTimeout+0xb2>
 800b7f6:	f1b8 0f00 	cmp.w	r8, #0
 800b7fa:	d030      	beq.n	800b85e <UART_WaitOnFlagUntilTimeout+0xb2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b7fc:	683c      	ldr	r4, [r7, #0]
 800b7fe:	6823      	ldr	r3, [r4, #0]
 800b800:	0758      	lsls	r0, r3, #29
 800b802:	4622      	mov	r2, r4
 800b804:	d5db      	bpl.n	800b7be <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b806:	69e3      	ldr	r3, [r4, #28]
 800b808:	0519      	lsls	r1, r3, #20
 800b80a:	d5d8      	bpl.n	800b7be <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b80c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b810:	6223      	str	r3, [r4, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b812:	e854 3f00 	ldrex	r3, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b816:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b81a:	e844 3100 	strex	r1, r3, [r4]
 800b81e:	b139      	cbz	r1, 800b830 <UART_WaitOnFlagUntilTimeout+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b820:	e852 3f00 	ldrex	r3, [r2]
 800b824:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b828:	e842 3100 	strex	r1, r3, [r2]
 800b82c:	2900      	cmp	r1, #0
 800b82e:	d1f7      	bne.n	800b820 <UART_WaitOnFlagUntilTimeout+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b830:	f102 0308 	add.w	r3, r2, #8
 800b834:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b838:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b83c:	f102 0008 	add.w	r0, r2, #8
 800b840:	e840 3100 	strex	r1, r3, [r0]
 800b844:	2900      	cmp	r1, #0
 800b846:	d1f3      	bne.n	800b830 <UART_WaitOnFlagUntilTimeout+0x84>
          huart->gState = HAL_UART_STATE_READY;
 800b848:	2320      	movs	r3, #32
 800b84a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
          __HAL_UNLOCK(huart);
 800b84e:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800b852:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
          return HAL_TIMEOUT;
 800b856:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b858:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          return HAL_TIMEOUT;
 800b85c:	e7bb      	b.n	800b7d6 <UART_WaitOnFlagUntilTimeout+0x2a>
 800b85e:	683a      	ldr	r2, [r7, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b860:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b864:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b868:	e842 3100 	strex	r1, r3, [r2]
 800b86c:	2900      	cmp	r1, #0
 800b86e:	d1f7      	bne.n	800b860 <UART_WaitOnFlagUntilTimeout+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b870:	f102 0308 	add.w	r3, r2, #8
 800b874:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b878:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b87c:	f102 0008 	add.w	r0, r2, #8
 800b880:	e840 3100 	strex	r1, r3, [r0]
 800b884:	2900      	cmp	r1, #0
 800b886:	d1f3      	bne.n	800b870 <UART_WaitOnFlagUntilTimeout+0xc4>
        huart->gState = HAL_UART_STATE_READY;
 800b888:	2320      	movs	r3, #32
 800b88a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        __HAL_UNLOCK(huart);
 800b88e:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800b892:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        return HAL_TIMEOUT;
 800b896:	2003      	movs	r0, #3
 800b898:	e79d      	b.n	800b7d6 <UART_WaitOnFlagUntilTimeout+0x2a>
 800b89a:	bf00      	nop

0800b89c <HAL_UART_Init>:
  if (huart == NULL)
 800b89c:	2800      	cmp	r0, #0
 800b89e:	d066      	beq.n	800b96e <HAL_UART_Init+0xd2>
{
 800b8a0:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 800b8a2:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 800b8a6:	b082      	sub	sp, #8
 800b8a8:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d04c      	beq.n	800b948 <HAL_UART_Init+0xac>
  __HAL_UART_DISABLE(huart);
 800b8ae:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800b8b0:	2324      	movs	r3, #36	; 0x24
 800b8b2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 800b8b6:	6813      	ldr	r3, [r2, #0]
 800b8b8:	f023 0301 	bic.w	r3, r3, #1
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b8bc:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 800b8be:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b8c0:	f7ff fd92 	bl	800b3e8 <UART_SetConfig>
 800b8c4:	2801      	cmp	r0, #1
 800b8c6:	d03c      	beq.n	800b942 <HAL_UART_Init+0xa6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b8c8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d135      	bne.n	800b93a <HAL_UART_Init+0x9e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b8ce:	6823      	ldr	r3, [r4, #0]
 800b8d0:	6859      	ldr	r1, [r3, #4]
 800b8d2:	f421 4190 	bic.w	r1, r1, #18432	; 0x4800
 800b8d6:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b8d8:	6899      	ldr	r1, [r3, #8]
 800b8da:	f021 012a 	bic.w	r1, r1, #42	; 0x2a
 800b8de:	6099      	str	r1, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800b8e0:	6819      	ldr	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b8e2:	2500      	movs	r5, #0
  __HAL_UART_ENABLE(huart);
 800b8e4:	f041 0101 	orr.w	r1, r1, #1
 800b8e8:	6019      	str	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b8ea:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
  tickstart = HAL_GetTick();
 800b8ee:	f7fc ffb7 	bl	8008860 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b8f2:	6823      	ldr	r3, [r4, #0]
 800b8f4:	681a      	ldr	r2, [r3, #0]
 800b8f6:	0712      	lsls	r2, r2, #28
  tickstart = HAL_GetTick();
 800b8f8:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b8fa:	d40e      	bmi.n	800b91a <HAL_UART_Init+0x7e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	075b      	lsls	r3, r3, #29
 800b900:	d427      	bmi.n	800b952 <HAL_UART_Init+0xb6>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b902:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800b904:	2220      	movs	r2, #32
 800b906:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800b90a:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800b90e:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  return HAL_OK;
 800b912:	4618      	mov	r0, r3
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b914:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 800b916:	b002      	add	sp, #8
 800b918:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b91a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b91e:	9300      	str	r3, [sp, #0]
 800b920:	462a      	mov	r2, r5
 800b922:	4603      	mov	r3, r0
 800b924:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b928:	4620      	mov	r0, r4
 800b92a:	f7ff ff3f 	bl	800b7ac <UART_WaitOnFlagUntilTimeout>
 800b92e:	b9e0      	cbnz	r0, 800b96a <HAL_UART_Init+0xce>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b930:	6823      	ldr	r3, [r4, #0]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	075b      	lsls	r3, r3, #29
 800b936:	d40c      	bmi.n	800b952 <HAL_UART_Init+0xb6>
 800b938:	e7e3      	b.n	800b902 <HAL_UART_Init+0x66>
    UART_AdvFeatureConfig(huart);
 800b93a:	4620      	mov	r0, r4
 800b93c:	f7ff fede 	bl	800b6fc <UART_AdvFeatureConfig>
 800b940:	e7c5      	b.n	800b8ce <HAL_UART_Init+0x32>
    return HAL_ERROR;
 800b942:	2001      	movs	r0, #1
}
 800b944:	b002      	add	sp, #8
 800b946:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 800b948:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 800b94c:	f7fc fd18 	bl	8008380 <HAL_UART_MspInit>
 800b950:	e7ad      	b.n	800b8ae <HAL_UART_Init+0x12>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b952:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b956:	9300      	str	r3, [sp, #0]
 800b958:	2200      	movs	r2, #0
 800b95a:	4633      	mov	r3, r6
 800b95c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b960:	4620      	mov	r0, r4
 800b962:	f7ff ff23 	bl	800b7ac <UART_WaitOnFlagUntilTimeout>
 800b966:	2800      	cmp	r0, #0
 800b968:	d0cb      	beq.n	800b902 <HAL_UART_Init+0x66>
      return HAL_TIMEOUT;
 800b96a:	2003      	movs	r0, #3
 800b96c:	e7d3      	b.n	800b916 <HAL_UART_Init+0x7a>
    return HAL_ERROR;
 800b96e:	2001      	movs	r0, #1
}
 800b970:	4770      	bx	lr
 800b972:	bf00      	nop

0800b974 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b974:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800b978:	2b01      	cmp	r3, #1
 800b97a:	d017      	beq.n	800b9ac <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b97c:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800b97e:	2324      	movs	r3, #36	; 0x24
{
 800b980:	b410      	push	{r4}
  huart->gState = HAL_UART_STATE_BUSY;
 800b982:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b986:	6811      	ldr	r1, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b988:	6814      	ldr	r4, [r2, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b98a:	2300      	movs	r3, #0
  __HAL_UART_DISABLE(huart);
 800b98c:	f024 0401 	bic.w	r4, r4, #1
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b990:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 800b994:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b996:	6643      	str	r3, [r0, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b998:	6011      	str	r1, [r2, #0]

  huart->gState = HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b99a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 800b99e:	2220      	movs	r2, #32
 800b9a0:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84

  return HAL_OK;
}
 800b9a4:	f85d 4b04 	ldr.w	r4, [sp], #4
  return HAL_OK;
 800b9a8:	4618      	mov	r0, r3
}
 800b9aa:	4770      	bx	lr
  __HAL_LOCK(huart);
 800b9ac:	2002      	movs	r0, #2
}
 800b9ae:	4770      	bx	lr

0800b9b0 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b9b0:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 800b9b4:	2a01      	cmp	r2, #1
 800b9b6:	d037      	beq.n	800ba28 <HAL_UARTEx_SetTxFifoThreshold+0x78>

  huart->gState = HAL_UART_STATE_BUSY;
 800b9b8:	4603      	mov	r3, r0

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b9ba:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800b9bc:	2024      	movs	r0, #36	; 0x24
{
 800b9be:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 800b9c0:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b9c4:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b9c6:	6810      	ldr	r0, [r2, #0]
 800b9c8:	f020 0001 	bic.w	r0, r0, #1
 800b9cc:	6010      	str	r0, [r2, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b9ce:	6890      	ldr	r0, [r2, #8]
 800b9d0:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 800b9d4:	4301      	orrs	r1, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b9d6:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b9d8:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b9da:	b310      	cbz	r0, 800ba22 <HAL_UARTEx_SetTxFifoThreshold+0x72>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b9dc:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b9de:	6890      	ldr	r0, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
 800b9e0:	4d12      	ldr	r5, [pc, #72]	; (800ba2c <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b9e2:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b9e6:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b9ea:	4911      	ldr	r1, [pc, #68]	; (800ba30 <HAL_UARTEx_SetTxFifoThreshold+0x80>)
 800b9ec:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b9f0:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 800b9f4:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 800b9f8:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b9fc:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b9fe:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ba00:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ba04:	fbb1 f1f5 	udiv	r1, r1, r5
 800ba08:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 800ba0c:	2100      	movs	r1, #0
 800ba0e:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  huart->gState = HAL_UART_STATE_READY;
 800ba12:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ba14:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 800ba16:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 800ba1a:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800ba1c:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 800ba20:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 800ba22:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 800ba24:	4608      	mov	r0, r1
 800ba26:	e7ef      	b.n	800ba08 <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 800ba28:	2002      	movs	r0, #2
}
 800ba2a:	4770      	bx	lr
 800ba2c:	0801c8c8 	.word	0x0801c8c8
 800ba30:	0801c8d0 	.word	0x0801c8d0

0800ba34 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 800ba34:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 800ba38:	2a01      	cmp	r2, #1
 800ba3a:	d037      	beq.n	800baac <HAL_UARTEx_SetRxFifoThreshold+0x78>
  huart->gState = HAL_UART_STATE_BUSY;
 800ba3c:	4603      	mov	r3, r0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ba3e:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800ba40:	2024      	movs	r0, #36	; 0x24
{
 800ba42:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 800ba44:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ba48:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800ba4a:	6810      	ldr	r0, [r2, #0]
 800ba4c:	f020 0001 	bic.w	r0, r0, #1
 800ba50:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ba52:	6890      	ldr	r0, [r2, #8]
 800ba54:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
 800ba58:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ba5a:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ba5c:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ba5e:	b310      	cbz	r0, 800baa6 <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ba60:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ba62:	6890      	ldr	r0, [r2, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 800ba64:	4d12      	ldr	r5, [pc, #72]	; (800bab0 <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ba66:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ba6a:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ba6e:	4911      	ldr	r1, [pc, #68]	; (800bab4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800ba70:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ba74:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 800ba78:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 800ba7c:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ba80:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ba82:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ba84:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ba88:	fbb1 f1f5 	udiv	r1, r1, r5
 800ba8c:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 800ba90:	2100      	movs	r1, #0
 800ba92:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  huart->gState = HAL_UART_STATE_READY;
 800ba96:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ba98:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 800ba9a:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 800ba9e:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800baa0:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 800baa4:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 800baa6:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 800baa8:	4608      	mov	r0, r1
 800baaa:	e7ef      	b.n	800ba8c <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 800baac:	2002      	movs	r0, #2
}
 800baae:	4770      	bx	lr
 800bab0:	0801c8c8 	.word	0x0801c8c8
 800bab4:	0801c8d0 	.word	0x0801c8d0

0800bab8 <VBS_GetAvBusVoltage_d>:
  }
  return (temp_avBusVoltage_d);
#else
  return (pHandle->AvBusVoltage_d);
#endif
}
 800bab8:	88c0      	ldrh	r0, [r0, #6]
 800baba:	4770      	bx	lr

0800babc <VBS_GetAvBusVoltage_V>:
    temp = 0U;
  }
  else
  {
#endif
    temp = (uint32_t)(pHandle->AvBusVoltage_d);
 800babc:	88c3      	ldrh	r3, [r0, #6]
    temp *= pHandle->ConversionFactor;
 800babe:	8840      	ldrh	r0, [r0, #2]
 800bac0:	fb03 f000 	mul.w	r0, r3, r0
    temp /= 65536U;
#ifdef NULL_PTR_CHECK_BUS_VOLT
  }
#endif
  return ((uint16_t)temp);
}
 800bac4:	0c00      	lsrs	r0, r0, #16
 800bac6:	4770      	bx	lr

0800bac8 <Circle_Limitation>:
  *  @f$v_q = \sqrt(MaxModule^2-v_d^2\ ) @f$

  *
  */
__weak qd_t Circle_Limitation(const CircleLimitation_Handle_t *pHandle, qd_t Vqd)
{
 800bac8:	b570      	push	{r4, r5, r6, lr}
    int32_t square_limit;
    int32_t vd_square_limit;
    int32_t new_q;
    int32_t new_d;

    maxModule = (int32_t)pHandle->MaxModule;
 800baca:	8803      	ldrh	r3, [r0, #0]
 800bacc:	140d      	asrs	r5, r1, #16
{
 800bace:	b084      	sub	sp, #16
 800bad0:	b20c      	sxth	r4, r1

    square_q = ((int32_t)(Vqd.q)) * Vqd.q;
    square_d = ((int32_t)(Vqd.d)) * Vqd.d;
 800bad2:	fb05 f205 	mul.w	r2, r5, r5
    square_limit = maxModule * maxModule;
 800bad6:	fb03 f303 	mul.w	r3, r3, r3
{
 800bada:	9101      	str	r1, [sp, #4]
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
    square_sum = square_q + square_d;
 800badc:	fb04 2104 	mla	r1, r4, r4, r2

    if (square_sum > square_limit)
 800bae0:	428b      	cmp	r3, r1
 800bae2:	da10      	bge.n	800bb06 <Circle_Limitation+0x3e>
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
 800bae4:	8846      	ldrh	r6, [r0, #2]
 800bae6:	fb06 f006 	mul.w	r0, r6, r6
    {
      if (square_d <= vd_square_limit)
 800baea:	4282      	cmp	r2, r0
 800baec:	dd14      	ble.n	800bb18 <Circle_Limitation+0x50>
        new_d = Vqd.d;
      }
      else
      {
        new_d = (int32_t)pHandle->MaxVd;
        if (Vqd.d < 0)
 800baee:	2d00      	cmp	r5, #0
#if defined CIRCLE_LIMITATION_SQRT_M0
        square_temp = (square_limit - vd_square_limit) / 1048576;
        new_q = SqrtTable[square_temp];
#else
        square_temp = square_limit - vd_square_limit;
        new_q = MCM_Sqrt(square_temp);
 800baf0:	eba3 0000 	sub.w	r0, r3, r0
          new_d = -new_d;
 800baf4:	bfb8      	it	lt
 800baf6:	4276      	neglt	r6, r6
        new_q = MCM_Sqrt(square_temp);
 800baf8:	f7f9 fb7e 	bl	80051f8 <MCM_Sqrt>
#endif
        if (Vqd.q < 0)
 800bafc:	2c00      	cmp	r4, #0
        {
          new_q = - new_q;
 800bafe:	bfb8      	it	lt
 800bb00:	4240      	neglt	r0, r0
        {
          /* Nothing to do */
        }
      }
      local_vqd.q = (int16_t)new_q;
      local_vqd.d = (int16_t)new_d;
 800bb02:	b235      	sxth	r5, r6
      local_vqd.q = (int16_t)new_q;
 800bb04:	b204      	sxth	r4, r0
    }
#ifdef NULL_PTR_CHECK_CRC_LIM
  }
#endif
  return (local_vqd);
 800bb06:	b2a4      	uxth	r4, r4
 800bb08:	2000      	movs	r0, #0
 800bb0a:	f364 000f 	bfi	r0, r4, #0, #16
 800bb0e:	b2ad      	uxth	r5, r5
 800bb10:	f365 401f 	bfi	r0, r5, #16, #16
}
 800bb14:	b004      	add	sp, #16
 800bb16:	bd70      	pop	{r4, r5, r6, pc}
        new_q = MCM_Sqrt(square_temp);
 800bb18:	1a98      	subs	r0, r3, r2
 800bb1a:	f7f9 fb6d 	bl	80051f8 <MCM_Sqrt>
        if (Vqd.q < 0)
 800bb1e:	2c00      	cmp	r4, #0
 800bb20:	daf0      	bge.n	800bb04 <Circle_Limitation+0x3c>
          new_q = -new_q;
 800bb22:	4240      	negs	r0, r0
 800bb24:	e7ee      	b.n	800bb04 <Circle_Limitation+0x3c>
 800bb26:	bf00      	nop

0800bb28 <MCPA_flushDataLog>:
#endif
    uint32_t *logValue;
    uint16_t *logValue16;
    uint8_t i;

    if (pHandle->bufferIndex > 0U)
 800bb28:	8b03      	ldrh	r3, [r0, #24]
 800bb2a:	b19b      	cbz	r3, 800bb54 <MCPA_flushDataLog+0x2c>
{
 800bb2c:	b570      	push	{r4, r5, r6, lr}
    {  /* If buffer is allocated, we must send it */
      if (pHandle->MFRateBuff == 254U) /* In case of flush, we must respect the packet format to allow
 800bb2e:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 800bb32:	2afe      	cmp	r2, #254	; 0xfe
 800bb34:	4604      	mov	r4, r0
 800bb36:	d00e      	beq.n	800bb56 <MCPA_flushDataLog+0x2e>
                                          proper decoding */
      {
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
        {
         logValue = (uint32_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 800bb38:	6941      	ldr	r1, [r0, #20]
      else
      {
        /* Nothing to do */
      }
      logValue16 = (uint16_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
      *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after
 800bb3a:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 800bb3e:	52ca      	strh	r2, [r1, r3]
                                          the MARK */
      pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer,
 800bb40:	8b22      	ldrh	r2, [r4, #24]
 800bb42:	6820      	ldr	r0, [r4, #0]
 800bb44:	3202      	adds	r2, #2
 800bb46:	2309      	movs	r3, #9
 800bb48:	6845      	ldr	r5, [r0, #4]
 800bb4a:	b292      	uxth	r2, r2
 800bb4c:	47a8      	blx	r5
                                             pHandle->bufferIndex + 2U, MCTL_ASYNC);
      pHandle->bufferIndex = 0U;
 800bb4e:	2300      	movs	r3, #0
 800bb50:	8323      	strh	r3, [r4, #24]
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
}
 800bb52:	bd70      	pop	{r4, r5, r6, pc}
 800bb54:	4770      	bx	lr
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 800bb56:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 800bb5a:	f890 c028 	ldrb.w	ip, [r0, #40]	; 0x28
         logValue = (uint32_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 800bb5e:	6941      	ldr	r1, [r0, #20]
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 800bb60:	4494      	add	ip, r2
 800bb62:	4562      	cmp	r2, ip
 800bb64:	dae9      	bge.n	800bb3a <MCPA_flushDataLog+0x12>
         *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 800bb66:	6886      	ldr	r6, [r0, #8]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 800bb68:	6905      	ldr	r5, [r0, #16]
         *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 800bb6a:	f856 0022 	ldr.w	r0, [r6, r2, lsl #2]
 800bb6e:	6800      	ldr	r0, [r0, #0]
 800bb70:	50c8      	str	r0, [r1, r3]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 800bb72:	5ca8      	ldrb	r0, [r5, r2]
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 800bb74:	3201      	adds	r2, #1
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 800bb76:	4403      	add	r3, r0
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 800bb78:	b2d2      	uxtb	r2, r2
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 800bb7a:	b29b      	uxth	r3, r3
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 800bb7c:	4562      	cmp	r2, ip
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 800bb7e:	8323      	strh	r3, [r4, #24]
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 800bb80:	dbf3      	blt.n	800bb6a <MCPA_flushDataLog+0x42>
 800bb82:	e7da      	b.n	800bb3a <MCPA_flushDataLog+0x12>

0800bb84 <MCPA_cfgLog>:
  *
  * @param  *pHandle Pointer to the MCPA Handle
  * @param  *cfgdata Configuration of the Async communication
  */
uint8_t MCPA_cfgLog(MCPA_Handle_t *pHandle, uint8_t *cfgdata)
{
 800bb84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint8_t i;
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF) */
    uint16_t newID, buffSize;
    uint8_t *pCfgData = cfgdata;

    buffSize = *((uint16_t *)pCfgData); //cstat !MISRAC2012-Rule-11.3
 800bb88:	880f      	ldrh	r7, [r1, #0]
{
 800bb8a:	4604      	mov	r4, r0

    if (buffSize == 0U)
 800bb8c:	2f00      	cmp	r7, #0
 800bb8e:	d044      	beq.n	800bc1a <MCPA_cfgLog+0x96>
    { 
      /* Switch Off condition */
      MCPA_stopDataLog(pHandle);
    }
    else if (buffSize > pHandle->pTransportLayer->txAsyncMaxPayload)
 800bb90:	6803      	ldr	r3, [r0, #0]
 800bb92:	89db      	ldrh	r3, [r3, #14]
 800bb94:	42bb      	cmp	r3, r7
 800bb96:	d33d      	bcc.n	800bc14 <MCPA_cfgLog+0x90>
    {
      result = MCP_ERROR_NO_TXASYNC_SPACE;
    }
    else
    {
      pHandle->HFRate = *((uint8_t *)&pCfgData[2]);
 800bb98:	788b      	ldrb	r3, [r1, #2]
 800bb9a:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
      pHandle->HFNum  = *((uint8_t *)&pCfgData[3]);
 800bb9e:	78ce      	ldrb	r6, [r1, #3]
 800bba0:	f880 6023 	strb.w	r6, [r0, #35]	; 0x23
      pHandle->MFRate = *((uint8_t *)&pCfgData[4]);
 800bba4:	790b      	ldrb	r3, [r1, #4]
 800bba6:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
      pHandle->MFNum  = *((uint8_t *)&pCfgData[5]);
 800bbaa:	794b      	ldrb	r3, [r1, #5]
 800bbac:	f880 3027 	strb.w	r3, [r0, #39]	; 0x27
      pCfgData = &pCfgData[6]; /* Start of the HF IDs */

      if ((pHandle->HFNum + pHandle->MFNum) <= pHandle->nbrOfDataLog)
 800bbb0:	441e      	add	r6, r3
 800bbb2:	7f83      	ldrb	r3, [r0, #30]
 800bbb4:	429e      	cmp	r6, r3
 800bbb6:	dc52      	bgt.n	800bc5e <MCPA_cfgLog+0xda>
      pCfgData = &pCfgData[6]; /* Start of the HF IDs */
 800bbb8:	3106      	adds	r1, #6
      {
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 800bbba:	2e00      	cmp	r6, #0
 800bbbc:	d056      	beq.n	800bc6c <MCPA_cfgLog+0xe8>
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF) */
 800bbbe:	2600      	movs	r6, #0
 800bbc0:	4688      	mov	r8, r1
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 800bbc2:	4635      	mov	r5, r6
 800bbc4:	e011      	b.n	800bbea <MCPA_cfgLog+0x66>
        {
          newID = *((uint16_t *)pCfgData); //cstat !MISRAC2012-Rule-11.3
          (void)RI_GetPtrReg(newID, &pHandle->dataPtrTable[i]);
          /* HF Data are fixed to 2 bytes */
          pHandle->dataSizeTable[i] = (i < pHandle->HFNum ) ? 2U : RI_GetIDSize(newID);
 800bbc6:	68e3      	ldr	r3, [r4, #12]
 800bbc8:	5558      	strb	r0, [r3, r5]
          pCfgData++; /* Point to the next UID */
          pCfgData++;
          logSize = logSize+pHandle->dataSizeTable[i];
 800bbca:	68e2      	ldr	r2, [r4, #12]
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 800bbcc:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 800bbd0:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
          logSize = logSize+pHandle->dataSizeTable[i];
 800bbd4:	5d52      	ldrb	r2, [r2, r5]
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 800bbd6:	f105 0c01 	add.w	ip, r5, #1
 800bbda:	fa5f f58c 	uxtb.w	r5, ip
 800bbde:	4403      	add	r3, r0
          logSize = logSize+pHandle->dataSizeTable[i];
 800bbe0:	4432      	add	r2, r6
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 800bbe2:	429d      	cmp	r5, r3
          pCfgData++;
 800bbe4:	4641      	mov	r1, r8
          logSize = logSize+pHandle->dataSizeTable[i];
 800bbe6:	b296      	uxth	r6, r2
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 800bbe8:	da11      	bge.n	800bc0e <MCPA_cfgLog+0x8a>
          newID = *((uint16_t *)pCfgData); //cstat !MISRAC2012-Rule-11.3
 800bbea:	f838 9b02 	ldrh.w	r9, [r8], #2
          (void)RI_GetPtrReg(newID, &pHandle->dataPtrTable[i]);
 800bbee:	6861      	ldr	r1, [r4, #4]
 800bbf0:	4648      	mov	r0, r9
 800bbf2:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800bbf6:	f7fb ff93 	bl	8007b20 <RI_GetPtrReg>
          pHandle->dataSizeTable[i] = (i < pHandle->HFNum ) ? 2U : RI_GetIDSize(newID);
 800bbfa:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 800bbfe:	42ab      	cmp	r3, r5
 800bc00:	f04f 0002 	mov.w	r0, #2
 800bc04:	d8df      	bhi.n	800bbc6 <MCPA_cfgLog+0x42>
 800bc06:	4648      	mov	r0, r9
 800bc08:	f7fb ff7e 	bl	8007b08 <RI_GetIDSize>
 800bc0c:	e7db      	b.n	800bbc6 <MCPA_cfgLog+0x42>
        }

        /* Smallest packet must be able to contain logSize Markbyte AsyncID and TimeStamp */
        if (buffSize < (logSize + 2U + 4U))
 800bc0e:	1db3      	adds	r3, r6, #6
 800bc10:	429f      	cmp	r7, r3
 800bc12:	d21a      	bcs.n	800bc4a <MCPA_cfgLog+0xc6>
      result = MCP_ERROR_NO_TXASYNC_SPACE;
 800bc14:	2009      	movs	r0, #9
    }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
  return (result);
}
 800bc16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (pHandle->bufferIndex > 0U)
 800bc1a:	8b03      	ldrh	r3, [r0, #24]
  pHandle->Mark = 0U;
 800bc1c:	f880 7029 	strb.w	r7, [r0, #41]	; 0x29
  if (pHandle->bufferIndex > 0U)
 800bc20:	b153      	cbz	r3, 800bc38 <MCPA_cfgLog+0xb4>
    logValue16 = (uint16_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 800bc22:	6961      	ldr	r1, [r4, #20]
    *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after
 800bc24:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 800bc28:	52ca      	strh	r2, [r1, r3]
    pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer,
 800bc2a:	8b22      	ldrh	r2, [r4, #24]
 800bc2c:	6820      	ldr	r0, [r4, #0]
 800bc2e:	3202      	adds	r2, #2
 800bc30:	6845      	ldr	r5, [r0, #4]
 800bc32:	b292      	uxth	r2, r2
 800bc34:	2309      	movs	r3, #9
 800bc36:	47a8      	blx	r5
  pHandle->bufferIndex = 0U;
 800bc38:	2000      	movs	r0, #0
  pHandle->MarkBuff    = 0U;
 800bc3a:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
  pHandle->HFIndex     = 0U;
 800bc3e:	77e0      	strb	r0, [r4, #31]
  pHandle->HFRateBuff  = 0U; /* We do not want to miss any sample at the restart */
 800bc40:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
  pHandle->bufferIndex = 0U;
 800bc44:	8320      	strh	r0, [r4, #24]
}
 800bc46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          pHandle->bufferTxTrigger = buffSize-logSize - 2U; /* 2 is required to add the last Mark byte and NUL
 800bc4a:	3f02      	subs	r7, #2
 800bc4c:	1bbf      	subs	r7, r7, r6
 800bc4e:	8367      	strh	r7, [r4, #26]
          pHandle->Mark = *((uint8_t *)pCfgData);
 800bc50:	780b      	ldrb	r3, [r1, #0]
 800bc52:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
          if (0U == pHandle->Mark)
 800bc56:	b12b      	cbz	r3, 800bc64 <MCPA_cfgLog+0xe0>
  uint8_t result = MCP_CMD_OK;
 800bc58:	2000      	movs	r0, #0
}
 800bc5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        result = MCP_ERROR_BAD_RAW_FORMAT;
 800bc5e:	200a      	movs	r0, #10
}
 800bc60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (pHandle->bufferIndex > 0U)
 800bc64:	8b23      	ldrh	r3, [r4, #24]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d0e6      	beq.n	800bc38 <MCPA_cfgLog+0xb4>
 800bc6a:	e7da      	b.n	800bc22 <MCPA_cfgLog+0x9e>
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 800bc6c:	2306      	movs	r3, #6
 800bc6e:	e7cf      	b.n	800bc10 <MCPA_cfgLog+0x8c>

0800bc70 <NTC_Clear>:
    /* nothing to do */
  }
  else
  {
#endif
    pHandle->hAvTemp_d = 0U;
 800bc70:	2300      	movs	r3, #0
 800bc72:	8043      	strh	r3, [r0, #2]
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
}
 800bc74:	4770      	bx	lr
 800bc76:	bf00      	nop

0800bc78 <NTC_Init>:
    if (REAL_SENSOR == pHandle->bSensorType)
 800bc78:	7802      	ldrb	r2, [r0, #0]
{
 800bc7a:	b508      	push	{r3, lr}
    if (REAL_SENSOR == pHandle->bSensorType)
 800bc7c:	b122      	cbz	r2, 800bc88 <NTC_Init+0x10>
      pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 800bc7e:	8882      	ldrh	r2, [r0, #4]
 800bc80:	8042      	strh	r2, [r0, #2]
      pHandle->hFaultState = MC_NO_ERROR;
 800bc82:	2100      	movs	r1, #0
 800bc84:	8101      	strh	r1, [r0, #8]
}
 800bc86:	bd08      	pop	{r3, pc}
      NTC_Clear(pHandle);
 800bc88:	f7ff fff2 	bl	800bc70 <NTC_Clear>
}
 800bc8c:	bd08      	pop	{r3, pc}
 800bc8e:	bf00      	nop

0800bc90 <NTC_GetAvTemp_C>:
  else
  {
#endif
    int32_t wTemp;

    if (REAL_SENSOR == pHandle->bSensorType)
 800bc90:	7803      	ldrb	r3, [r0, #0]
 800bc92:	b95b      	cbnz	r3, 800bcac <NTC_GetAvTemp_C+0x1c>
    {
      wTemp = (int32_t)pHandle->hAvTemp_d;
 800bc94:	8842      	ldrh	r2, [r0, #2]
      wTemp -= ((int32_t)pHandle->wV0);
 800bc96:	6941      	ldr	r1, [r0, #20]
      wTemp *= pHandle->hSensitivity;
 800bc98:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
#ifndef FULL_MISRA_C_COMPLIANCY_NTC_TEMP
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      wTemp = (wTemp >> 16) + (int32_t)pHandle->hT0;
 800bc9c:	8b00      	ldrh	r0, [r0, #24]
      wTemp -= ((int32_t)pHandle->wV0);
 800bc9e:	1a52      	subs	r2, r2, r1
      wTemp *= pHandle->hSensitivity;
 800bca0:	fb02 f303 	mul.w	r3, r2, r3
      wTemp = (wTemp >> 16) + (int32_t)pHandle->hT0;
 800bca4:	eb00 4023 	add.w	r0, r0, r3, asr #16
    returnValue = (int16_t)wTemp;
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (returnValue);
}
 800bca8:	b200      	sxth	r0, r0
 800bcaa:	4770      	bx	lr
      wTemp = (int32_t)pHandle->hExpectedTemp_C;
 800bcac:	88c0      	ldrh	r0, [r0, #6]
}
 800bcae:	b200      	sxth	r0, r0
 800bcb0:	4770      	bx	lr
 800bcb2:	bf00      	nop

0800bcb4 <PID_HandleInit>:
  {
#endif
    pHandle->hKpGain =  pHandle->hDefKpGain;
    pHandle->hKiGain =  pHandle->hDefKiGain;
    pHandle->hKdGain =  pHandle->hDefKdGain;
    pHandle->wIntegralTerm = 0;
 800bcb4:	2300      	movs	r3, #0
    pHandle->hKpGain =  pHandle->hDefKpGain;
 800bcb6:	6801      	ldr	r1, [r0, #0]
    pHandle->hKdGain =  pHandle->hDefKdGain;
 800bcb8:	8c02      	ldrh	r2, [r0, #32]
    pHandle->hKpGain =  pHandle->hDefKpGain;
 800bcba:	6041      	str	r1, [r0, #4]
    pHandle->hKdGain =  pHandle->hDefKdGain;
 800bcbc:	8442      	strh	r2, [r0, #34]	; 0x22
    pHandle->wIntegralTerm = 0;
 800bcbe:	6083      	str	r3, [r0, #8]
    pHandle->wPrevProcessVarError = 0;
 800bcc0:	6283      	str	r3, [r0, #40]	; 0x28
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 800bcc2:	4770      	bx	lr

0800bcc4 <PID_SetKP>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKpGain = hKpGain;
 800bcc4:	8081      	strh	r1, [r0, #4]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 800bcc6:	4770      	bx	lr

0800bcc8 <PID_SetKI>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKiGain = hKiGain;
 800bcc8:	80c1      	strh	r1, [r0, #6]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 800bcca:	4770      	bx	lr

0800bccc <PID_GetKP>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKpGain);
#else
  return (pHandle->hKpGain);
#endif
}
 800bccc:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 800bcd0:	4770      	bx	lr
 800bcd2:	bf00      	nop

0800bcd4 <PID_GetKI>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKiGain);
#else
  return (pHandle->hKiGain);
#endif
}
 800bcd4:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800bcd8:	4770      	bx	lr
 800bcda:	bf00      	nop

0800bcdc <PID_SetIntegralTerm>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wIntegralTerm = wIntegralTermValue;
 800bcdc:	6081      	str	r1, [r0, #8]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return;
}
 800bcde:	4770      	bx	lr

0800bce0 <PID_GetKPDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKpDivisorPOW2);
#else
  return (pHandle->hKpDivisorPOW2);
#endif
}
 800bce0:	8b80      	ldrh	r0, [r0, #28]
 800bce2:	4770      	bx	lr

0800bce4 <PID_SetKPDivisorPOW2>:
  }
  else
  {
#endif
    pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
    pHandle->hKpDivisor = (((uint16_t)1) << hKpDivisorPOW2);
 800bce4:	2301      	movs	r3, #1
 800bce6:	408b      	lsls	r3, r1
    pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
 800bce8:	8381      	strh	r1, [r0, #28]
    pHandle->hKpDivisor = (((uint16_t)1) << hKpDivisorPOW2);
 800bcea:	8303      	strh	r3, [r0, #24]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 800bcec:	4770      	bx	lr
 800bcee:	bf00      	nop

0800bcf0 <PID_GetKIDivisor>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKiDivisor);
#else
  return (pHandle->hKiDivisor);
#endif
}
 800bcf0:	8b40      	ldrh	r0, [r0, #26]
 800bcf2:	4770      	bx	lr

0800bcf4 <PID_GetKIDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKiDivisorPOW2);
#else
  return (pHandle->hKiDivisorPOW2);
#endif
}
 800bcf4:	8bc0      	ldrh	r0, [r0, #30]
 800bcf6:	4770      	bx	lr

0800bcf8 <PID_SetLowerIntegralTermLimit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wLowerIntegralLimit = wLowerLimit;
 800bcf8:	6101      	str	r1, [r0, #16]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 800bcfa:	4770      	bx	lr

0800bcfc <PID_SetUpperIntegralTermLimit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wUpperIntegralLimit = wUpperLimit;
 800bcfc:	60c1      	str	r1, [r0, #12]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 800bcfe:	4770      	bx	lr

0800bd00 <PID_SetKIDivisorPOW2>:
{
 800bd00:	b538      	push	{r3, r4, r5, lr}
    uint32_t wKiDiv = (((uint32_t)1) << hKiDivisorPOW2);
 800bd02:	2301      	movs	r3, #1
{
 800bd04:	460c      	mov	r4, r1
    uint32_t wKiDiv = (((uint32_t)1) << hKiDivisorPOW2);
 800bd06:	408b      	lsls	r3, r1
    PID_SetUpperIntegralTermLimit(pHandle, (int32_t)INT16_MAX * (int32_t)wKiDiv);
 800bd08:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800bd0c:	40a1      	lsls	r1, r4
    pHandle->hKiDivisorPOW2 = hKiDivisorPOW2;
 800bd0e:	83c4      	strh	r4, [r0, #30]
    pHandle->hKiDivisor = (uint16_t)wKiDiv;
 800bd10:	8343      	strh	r3, [r0, #26]
{
 800bd12:	4605      	mov	r5, r0
    PID_SetUpperIntegralTermLimit(pHandle, (int32_t)INT16_MAX * (int32_t)wKiDiv);
 800bd14:	f7ff fff2 	bl	800bcfc <PID_SetUpperIntegralTermLimit>
    PID_SetLowerIntegralTermLimit(pHandle, (int32_t)(-INT16_MAX) * (int32_t)wKiDiv);
 800bd18:	4902      	ldr	r1, [pc, #8]	; (800bd24 <PID_SetKIDivisorPOW2+0x24>)
 800bd1a:	4628      	mov	r0, r5
 800bd1c:	40a1      	lsls	r1, r4
 800bd1e:	f7ff ffeb 	bl	800bcf8 <PID_SetLowerIntegralTermLimit>
}
 800bd22:	bd38      	pop	{r3, r4, r5, pc}
 800bd24:	ffff8001 	.word	0xffff8001

0800bd28 <PID_SetLowerOutputLimit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hLowerOutputLimit = hLowerLimit;
 800bd28:	82c1      	strh	r1, [r0, #22]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 800bd2a:	4770      	bx	lr

0800bd2c <PID_SetUpperOutputLimit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hUpperOutputLimit = hUpperLimit;
 800bd2c:	8281      	strh	r1, [r0, #20]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 800bd2e:	4770      	bx	lr

0800bd30 <PID_SetKD>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKdGain = hKdGain;
 800bd30:	8441      	strh	r1, [r0, #34]	; 0x22
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 800bd32:	4770      	bx	lr

0800bd34 <PID_GetKD>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKdGain);
#else
  return (pHandle->hKdGain);
#endif
}
 800bd34:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	; 0x22
 800bd38:	4770      	bx	lr
 800bd3a:	bf00      	nop

0800bd3c <PID_GetKDDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKdDivisorPOW2);
#else
  return (pHandle->hKdDivisorPOW2);
#endif
}
 800bd3c:	8cc0      	ldrh	r0, [r0, #38]	; 0x26
 800bd3e:	4770      	bx	lr

0800bd40 <PID_SetKDDivisorPOW2>:
  }
  else
  {
#endif
    pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
    pHandle->hKdDivisor = (((uint16_t)1) << hKdDivisorPOW2);
 800bd40:	2301      	movs	r3, #1
 800bd42:	408b      	lsls	r3, r1
    pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
 800bd44:	84c1      	strh	r1, [r0, #38]	; 0x26
    pHandle->hKdDivisor = (((uint16_t)1) << hKdDivisorPOW2);
 800bd46:	8483      	strh	r3, [r0, #36]	; 0x24
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 800bd48:	4770      	bx	lr
 800bd4a:	bf00      	nop

0800bd4c <PI_Controller>:
    int32_t wDischarge = 0;
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

    /* Proportional term computation*/
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 800bd4c:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
{
 800bd50:	4603      	mov	r3, r0
 800bd52:	b510      	push	{r4, lr}

    /* Integral term computation */
    if (0 == pHandle->hKiGain)
 800bd54:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 800bd58:	f9b3 c016 	ldrsh.w	ip, [r3, #22]
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 800bd5c:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 800bd60:	fb01 f202 	mul.w	r2, r1, r2
    if (0 == pHandle->hKiGain)
 800bd64:	b18c      	cbz	r4, 800bd8a <PI_Controller+0x3e>
    {
      pHandle->wIntegralTerm = 0;
    }
    else
    {
      wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 800bd66:	fb04 f101 	mul.w	r1, r4, r1
      wIntegral_sum_temp = pHandle->wIntegralTerm + wIntegral_Term;
 800bd6a:	689c      	ldr	r4, [r3, #8]

      if (wIntegral_sum_temp < 0)
 800bd6c:	eb14 0e01 	adds.w	lr, r4, r1
 800bd70:	d421      	bmi.n	800bdb6 <PI_Controller+0x6a>
      {
        if (pHandle->wIntegralTerm < 0)
        {
          if (wIntegral_Term < 0)
          {
            wIntegral_sum_temp = -INT32_MAX;
 800bd72:	420c      	tst	r4, r1
 800bd74:	4916      	ldr	r1, [pc, #88]	; (800bdd0 <PI_Controller+0x84>)
 800bd76:	bf48      	it	mi
 800bd78:	468e      	movmi	lr, r1
        {
          /* Nothing to do */
        }
      }

      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 800bd7a:	68d9      	ldr	r1, [r3, #12]
 800bd7c:	4571      	cmp	r1, lr
 800bd7e:	db05      	blt.n	800bd8c <PI_Controller+0x40>
      {
        pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
      }
      else if (wIntegral_sum_temp < pHandle->wLowerIntegralLimit)
 800bd80:	6919      	ldr	r1, [r3, #16]
 800bd82:	4571      	cmp	r1, lr
 800bd84:	dc02      	bgt.n	800bd8c <PI_Controller+0x40>
      {
        pHandle->wIntegralTerm = pHandle->wLowerIntegralLimit;
      }
      else
      {
        pHandle->wIntegralTerm = wIntegral_sum_temp;
 800bd86:	4671      	mov	r1, lr
 800bd88:	e000      	b.n	800bd8c <PI_Controller+0x40>
 800bd8a:	4621      	mov	r1, r4
    /* WARNING: the below instruction is not MISRA compliant, user should verify
               that Cortex-M3 assembly instruction ASR (arithmetic shift right)
               is used by the compiler to perform the shifts (instead of LSR
               logical shift right)*/
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    wOutput_32 = (wProportional_Term >> pHandle->hKpDivisorPOW2) + (pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2);
 800bd8c:	8b9c      	ldrh	r4, [r3, #28]
 800bd8e:	4122      	asrs	r2, r4
 800bd90:	8bdc      	ldrh	r4, [r3, #30]
 800bd92:	fa41 f404 	asr.w	r4, r1, r4
 800bd96:	4422      	add	r2, r4
#else
    wOutput_32 = (wProportional_Term / (int32_t)pHandle->hKpDivisor)
              + (pHandle->wIntegralTerm / (int32_t)pHandle->hKiDivisor);
#endif

    if (wOutput_32 > hUpperOutputLimit)
 800bd98:	4290      	cmp	r0, r2
 800bd9a:	da03      	bge.n	800bda4 <PI_Controller+0x58>
    {
      wDischarge = hUpperOutputLimit - wOutput_32;
 800bd9c:	1a82      	subs	r2, r0, r2
    else
    {
      /* Nothing to do here */
    }

    pHandle->wIntegralTerm += wDischarge;
 800bd9e:	4411      	add	r1, r2
 800bda0:	6099      	str	r1, [r3, #8]
    returnValue = (int16_t)wOutput_32;
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return (returnValue);
}
 800bda2:	bd10      	pop	{r4, pc}
    else if (wOutput_32 < hLowerOutputLimit)
 800bda4:	4594      	cmp	ip, r2
      wDischarge = hLowerOutputLimit - wOutput_32;
 800bda6:	bfc5      	ittet	gt
 800bda8:	ebac 0202 	subgt.w	r2, ip, r2
    pHandle->wIntegralTerm += wDischarge;
 800bdac:	1889      	addgt	r1, r1, r2
    returnValue = (int16_t)wOutput_32;
 800bdae:	b210      	sxthle	r0, r2
      wOutput_32 = hLowerOutputLimit;
 800bdb0:	4660      	movgt	r0, ip
    pHandle->wIntegralTerm += wDischarge;
 800bdb2:	6099      	str	r1, [r3, #8]
}
 800bdb4:	bd10      	pop	{r4, pc}
        if (pHandle->wIntegralTerm > 0)
 800bdb6:	2c00      	cmp	r4, #0
 800bdb8:	dddf      	ble.n	800bd7a <PI_Controller+0x2e>
          if (wIntegral_Term > 0)
 800bdba:	2900      	cmp	r1, #0
 800bdbc:	dddd      	ble.n	800bd7a <PI_Controller+0x2e>
      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 800bdbe:	68d9      	ldr	r1, [r3, #12]
 800bdc0:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 800bdc4:	42a1      	cmp	r1, r4
 800bdc6:	d1e1      	bne.n	800bd8c <PI_Controller+0x40>
            wIntegral_sum_temp = INT32_MAX;
 800bdc8:	468e      	mov	lr, r1
        pHandle->wIntegralTerm = wIntegral_sum_temp;
 800bdca:	4671      	mov	r1, lr
 800bdcc:	e7de      	b.n	800bd8c <PI_Controller+0x40>
 800bdce:	bf00      	nop
 800bdd0:	80000001 	.word	0x80000001

0800bdd4 <PQD_CalcElMotorPower>:
  }
  else
  {
#endif
    int32_t wAux;
    qd_t Iqd = pHandle->pFOCVars->Iqd;
 800bdd4:	6882      	ldr	r2, [r0, #8]
{
 800bdd6:	b500      	push	{lr}
    qd_t Vqd = pHandle->pFOCVars->Vqd;

    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 800bdd8:	89d1      	ldrh	r1, [r2, #14]
 800bdda:	f8b2 e018 	ldrh.w	lr, [r2, #24]
    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
 800bdde:	8993      	ldrh	r3, [r2, #12]
 800bde0:	f8b2 c016 	ldrh.w	ip, [r2, #22]
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 800bde4:	fb11 f20e 	smulbb	r2, r1, lr
    wAux /= 65536;
 800bde8:	fb13 230c 	smlabb	r3, r3, ip, r2
 800bdec:	2b00      	cmp	r3, #0

    /* pHandle->hAvrgElMotorPower += (wAux - pHandle->hAvrgElMotorPower) >> 4 */
    pHandle->hAvrgElMotorPower += (int16_t)((wAux - (int32_t)pHandle->hAvrgElMotorPower) / 16);
 800bdee:	f9b0 2000 	ldrsh.w	r2, [r0]
    wAux /= 65536;
 800bdf2:	bfbc      	itt	lt
 800bdf4:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00
 800bdf8:	33ff      	addlt	r3, #255	; 0xff
    pHandle->hAvrgElMotorPower += (int16_t)((wAux - (int32_t)pHandle->hAvrgElMotorPower) / 16);
 800bdfa:	ebd2 4323 	rsbs	r3, r2, r3, asr #16
 800bdfe:	bf48      	it	mi
 800be00:	330f      	addmi	r3, #15
 800be02:	eb02 1223 	add.w	r2, r2, r3, asr #4
 800be06:	8002      	strh	r2, [r0, #0]

#ifdef NULL_PTR_CHECK_PQD_MOT_POW_MEAS
  }
#endif
}
 800be08:	f85d fb04 	ldr.w	pc, [sp], #4

0800be0c <PQD_Clear>:
    /* nothing to do */
  }
  else
  {
#endif
    pHandle->hAvrgElMotorPower = 0;
 800be0c:	2300      	movs	r3, #0
 800be0e:	8003      	strh	r3, [r0, #0]
#ifdef NULL_PTR_CHECK_MOT_POW_MES
  }
#endif
}
 800be10:	4770      	bx	lr
 800be12:	bf00      	nop

0800be14 <PQD_GetAvrgElMotorPowerW>:
  * 
  * @param pHandle pointer on the related component instance.
  * @retval float_t The average measured motor power expressed in Watts.
  */
__weak float_t PQD_GetAvrgElMotorPowerW(const PQD_MotorPowMeas_Handle_t *pHandle)
{
 800be14:	b510      	push	{r4, lr}
  else
  {
#endif

  /* First perform an integer multiplication, then a float one. */
  PowerW = ((float_t)pHandle->hAvrgElMotorPower * (float_t)VBS_GetAvBusVoltage_V(pHandle->pVBS)) * pHandle->ConvFact;
 800be16:	f9b0 3000 	ldrsh.w	r3, [r0]
{
 800be1a:	ed2d 8b02 	vpush	{d8}
 800be1e:	4604      	mov	r4, r0
  PowerW = ((float_t)pHandle->hAvrgElMotorPower * (float_t)VBS_GetAvBusVoltage_V(pHandle->pVBS)) * pHandle->ConvFact;
 800be20:	68c0      	ldr	r0, [r0, #12]
 800be22:	ee08 3a10 	vmov	s16, r3
 800be26:	f7ff fe49 	bl	800babc <VBS_GetAvBusVoltage_V>
 800be2a:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 800be2e:	edd4 7a01 	vldr	s15, [r4, #4]
 800be32:	ee07 0a10 	vmov	s14, r0
 800be36:	ee28 8a27 	vmul.f32	s16, s16, s15
 800be3a:	eeb8 0a47 	vcvt.f32.u32	s0, s14

#ifdef NULL_PTR_CHECK_PQD_MOT_POW_MEAS
  }
#endif
  return (PowerW);
}
 800be3e:	ee28 0a00 	vmul.f32	s0, s16, s0
 800be42:	ecbd 8b02 	vpop	{d8}
 800be46:	bd10      	pop	{r4, pc}

0800be48 <startTimers>:
  * When this function is called, TIM1 and/or TIM8 must be in a frozen state
  * with CNT, ARR, REP RATE and trigger correctly set (these settings are
  * usually performed in the Init method accordingly with the configuration)
  */
__weak void startTimers(void)
{
 800be48:	b410      	push	{r4}
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
  */
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return ((READ_BIT(RCC->APB1ENR1, Periphs) == Periphs) ? 1UL : 0UL);
 800be4a:	4b19      	ldr	r3, [pc, #100]	; (800beb0 <startTimers+0x68>)
 800be4c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800be4e:	07d2      	lsls	r2, r2, #31
 800be50:	b083      	sub	sp, #12
 800be52:	d416      	bmi.n	800be82 <startTimers+0x3a>
  SET_BIT(RCC->APB1ENR1, Periphs);
 800be54:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800be56:	f042 0201 	orr.w	r2, r2, #1
 800be5a:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800be5c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800be5e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800be62:	f002 0201 	and.w	r2, r2, #1
 800be66:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 800be68:	9a01      	ldr	r2, [sp, #4]
 800be6a:	694a      	ldr	r2, [r1, #20]
 800be6c:	f042 0201 	orr.w	r2, r2, #1
 800be70:	614a      	str	r2, [r1, #20]
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 800be72:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800be74:	f022 0201 	bic.w	r2, r2, #1
 800be78:	659a      	str	r2, [r3, #88]	; 0x58
    trigOut = LL_TIM_ReadReg(TIM2, CR2) & TIM_CR2_MMS;
    LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_UPDATE);
    LL_TIM_GenerateEvent_UPDATE(TIM2);
    LL_TIM_SetTriggerOutput(TIM2, trigOut);
  }
}
 800be7a:	b003      	add	sp, #12
 800be7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be80:	4770      	bx	lr
    trigOut = LL_TIM_ReadReg(TIM2, CR2) & TIM_CR2_MMS;
 800be82:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800be86:	480b      	ldr	r0, [pc, #44]	; (800beb4 <startTimers+0x6c>)
 800be88:	685a      	ldr	r2, [r3, #4]
 800be8a:	6859      	ldr	r1, [r3, #4]
 800be8c:	4c0a      	ldr	r4, [pc, #40]	; (800beb8 <startTimers+0x70>)
 800be8e:	4001      	ands	r1, r0
 800be90:	f041 0120 	orr.w	r1, r1, #32
 800be94:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800be96:	6959      	ldr	r1, [r3, #20]
 800be98:	f041 0101 	orr.w	r1, r1, #1
 800be9c:	6159      	str	r1, [r3, #20]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800be9e:	6859      	ldr	r1, [r3, #4]
 800bea0:	4022      	ands	r2, r4
 800bea2:	4001      	ands	r1, r0
 800bea4:	430a      	orrs	r2, r1
 800bea6:	605a      	str	r2, [r3, #4]
}
 800bea8:	b003      	add	sp, #12
 800beaa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800beae:	4770      	bx	lr
 800beb0:	40021000 	.word	0x40021000
 800beb4:	fdffff8f 	.word	0xfdffff8f
 800beb8:	02000070 	.word	0x02000070

0800bebc <waitForPolarizationEnd>:
  {
#endif
    uint16_t hCalibrationPeriodCounter;
    uint16_t hMaxPeriodsNumber;

    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 800bebc:	3201      	adds	r2, #1
{
 800bebe:	b570      	push	{r4, r5, r6, lr}
    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 800bec0:	0852      	lsrs	r2, r2, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 800bec2:	f06f 0602 	mvn.w	r6, #2
 800bec6:	0155      	lsls	r5, r2, #5
 800bec8:	6106      	str	r6, [r0, #16]

    /* Wait for NB_CONVERSIONS to be executed */
    LL_TIM_ClearFlag_CC1(TIMx);
    hCalibrationPeriodCounter = 0u;
 800beca:	2200      	movs	r2, #0
    while (*cnt < NB_CONVERSIONS)
 800becc:	f893 c000 	ldrb.w	ip, [r3]
 800bed0:	f1bc 0f0f 	cmp.w	ip, #15
    {
      if ((uint32_t)ERROR == LL_TIM_IsActiveFlag_CC1(TIMx))
      {
        LL_TIM_ClearFlag_CC1(TIMx);
        hCalibrationPeriodCounter++;
 800bed4:	f102 0e01 	add.w	lr, r2, #1
    while (*cnt < NB_CONVERSIONS)
 800bed8:	d80c      	bhi.n	800bef4 <waitForPolarizationEnd+0x38>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 800beda:	6904      	ldr	r4, [r0, #16]
 800bedc:	07a4      	lsls	r4, r4, #30
 800bede:	d5f5      	bpl.n	800becc <waitForPolarizationEnd+0x10>
        hCalibrationPeriodCounter++;
 800bee0:	fa1f f28e 	uxth.w	r2, lr
        if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 800bee4:	4295      	cmp	r5, r2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 800bee6:	6106      	str	r6, [r0, #16]
 800bee8:	d8f0      	bhi.n	800becc <waitForPolarizationEnd+0x10>
        {
          if (*cnt < NB_CONVERSIONS)
 800beea:	781c      	ldrb	r4, [r3, #0]
 800beec:	2c0f      	cmp	r4, #15
 800beee:	d8ed      	bhi.n	800becc <waitForPolarizationEnd+0x10>
          {
            *SWerror = 1u;
 800bef0:	2301      	movs	r3, #1
 800bef2:	800b      	strh	r3, [r1, #0]
      }
    }
#ifdef NULL_PTR_CHECK_POW_COM
  }
#endif
  }
 800bef4:	bd70      	pop	{r4, r5, r6, pc}
 800bef6:	bf00      	nop

0800bef8 <R3_1_GetPhaseCurrents>:
  * @brief  Computes and stores in the handler the latest converted motor phase currents in ab_t format.
  *
  */
__weak void R3_1_GetPhaseCurrents(PWMC_Handle_t *pHdl, ab_t *Iab)
{
  if (MC_NULL == Iab)
 800bef8:	b1c1      	cbz	r1, 800bf2c <R3_1_GetPhaseCurrents+0x34>

    PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;  //cstat !MISRAC2012-Rule-11.3
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800befa:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
{
 800befe:	b470      	push	{r4, r5, r6}
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800bf00:	e9d2 3400 	ldrd	r3, r4, [r2]
    ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
    uint8_t Sector;

    Sector = (uint8_t)pHandle->_Super.Sector;
    ADCDataReg1 = ADCx->JDR1;
 800bf04:	f8d3 5080 	ldr.w	r5, [r3, #128]	; 0x80
    ADCDataReg2 = ADCx->JDR2;
 800bf08:	f8d3 6084 	ldr.w	r6, [r3, #132]	; 0x84
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800bf0c:	6863      	ldr	r3, [r4, #4]
    Sector = (uint8_t)pHandle->_Super.Sector;
 800bf0e:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
 800bf12:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800bf16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf1a:	6063      	str	r3, [r4, #4]

    /* disable ADC trigger source */
    /* LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4) */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    switch (Sector)
 800bf1c:	2a05      	cmp	r2, #5
 800bf1e:	f200 809e 	bhi.w	800c05e <R3_1_GetPhaseCurrents+0x166>
 800bf22:	e8df f002 	tbb	[pc, r2]
 800bf26:	1f11      	.short	0x1f11
 800bf28:	1104041f 	.word	0x1104041f
 800bf2c:	4770      	bx	lr
      case SECTOR_4:
      case SECTOR_5:
      {
        /* Current on Phase C is not accessible     */
        /* Ia = PhaseAOffset - ADC converted value) */
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 800bf2e:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88

        /* Saturation of Ia */
        if (Aux < -INT16_MAX)
 800bf32:	4a4e      	ldr	r2, [pc, #312]	; (800c06c <R3_1_GetPhaseCurrents+0x174>)
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 800bf34:	1b5b      	subs	r3, r3, r5
        if (Aux < -INT16_MAX)
 800bf36:	4293      	cmp	r3, r2
 800bf38:	db22      	blt.n	800bf80 <R3_1_GetPhaseCurrents+0x88>
        {
          Iab->a = -INT16_MAX;
        }
        else  if (Aux > INT16_MAX)
 800bf3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bf3e:	f2c0 808b 	blt.w	800c058 <R3_1_GetPhaseCurrents+0x160>
 800bf42:	f647 7cff 	movw	ip, #32767	; 0x7fff
 800bf46:	e01c      	b.n	800bf82 <R3_1_GetPhaseCurrents+0x8a>
      case SECTOR_6:
      case SECTOR_1:
      {
        /* Current on Phase A is not accessible     */
        /* Ib = PhaseBOffset - ADC converted value) */
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg1);
 800bf48:	f8d0 408c 	ldr.w	r4, [r0, #140]	; 0x8c

        /* Saturation of Ib */
        if (Aux < -INT16_MAX)
 800bf4c:	4b47      	ldr	r3, [pc, #284]	; (800c06c <R3_1_GetPhaseCurrents+0x174>)
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg1);
 800bf4e:	1b64      	subs	r4, r4, r5
        if (Aux < -INT16_MAX)
 800bf50:	429c      	cmp	r4, r3
 800bf52:	db2d      	blt.n	800bfb0 <R3_1_GetPhaseCurrents+0xb8>
        {
          Iab->b = -INT16_MAX;
        }
        else  if (Aux > INT16_MAX)
 800bf54:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 800bf58:	db7b      	blt.n	800c052 <R3_1_GetPhaseCurrents+0x15a>
 800bf5a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800bf5e:	4614      	mov	r4, r2
 800bf60:	4615      	mov	r5, r2
 800bf62:	e029      	b.n	800bfb8 <R3_1_GetPhaseCurrents+0xc0>
      case SECTOR_2:
      case SECTOR_3:
      {
        /* Current on Phase B is not accessible     */
        /* Ia = PhaseAOffset - ADC converted value) */
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 800bf64:	f8d0 4088 	ldr.w	r4, [r0, #136]	; 0x88

        /* Saturation of Ia */
        if (Aux < -INT16_MAX)
 800bf68:	4b40      	ldr	r3, [pc, #256]	; (800c06c <R3_1_GetPhaseCurrents+0x174>)
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 800bf6a:	1b64      	subs	r4, r4, r5
        if (Aux < -INT16_MAX)
 800bf6c:	429c      	cmp	r4, r3
 800bf6e:	db30      	blt.n	800bfd2 <R3_1_GetPhaseCurrents+0xda>
        {
          Iab->a = -INT16_MAX;
        }
        else  if (Aux > INT16_MAX)
 800bf70:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 800bf74:	db69      	blt.n	800c04a <R3_1_GetPhaseCurrents+0x152>
 800bf76:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800bf7a:	461c      	mov	r4, r3
 800bf7c:	469c      	mov	ip, r3
 800bf7e:	e02c      	b.n	800bfda <R3_1_GetPhaseCurrents+0xe2>
 800bf80:	4694      	mov	ip, r2
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg2);
 800bf82:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
        if (Aux < -INT16_MAX)
 800bf86:	4d39      	ldr	r5, [pc, #228]	; (800c06c <R3_1_GetPhaseCurrents+0x174>)
          Iab->a = -INT16_MAX;
 800bf88:	f8a1 c000 	strh.w	ip, [r1]
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg2);
 800bf8c:	1b92      	subs	r2, r2, r6
        if (Aux < -INT16_MAX)
 800bf8e:	42aa      	cmp	r2, r5
 800bf90:	da31      	bge.n	800bff6 <R3_1_GetPhaseCurrents+0xfe>
          Iab->b = -INT16_MAX;
 800bf92:	804d      	strh	r5, [r1, #2]
        break;
    }

    pHandle->_Super.Ia = Iab->a;
    pHandle->_Super.Ib = Iab->b;
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 800bf94:	fa1f f38c 	uxth.w	r3, ip
 800bf98:	f248 0201 	movw	r2, #32769	; 0x8001
 800bf9c:	4413      	add	r3, r2
 800bf9e:	425b      	negs	r3, r3
    pHandle->_Super.Ib = Iab->b;
 800bfa0:	f8a0 5064 	strh.w	r5, [r0, #100]	; 0x64
    pHandle->_Super.Ia = Iab->a;
 800bfa4:	f8a0 c062 	strh.w	ip, [r0, #98]	; 0x62
  }
}
 800bfa8:	bc70      	pop	{r4, r5, r6}
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 800bfaa:	f8a0 3066 	strh.w	r3, [r0, #102]	; 0x66
}
 800bfae:	4770      	bx	lr
 800bfb0:	461c      	mov	r4, r3
 800bfb2:	f248 0201 	movw	r2, #32769	; 0x8001
 800bfb6:	461d      	mov	r5, r3
        Aux = (int32_t)(ADCDataReg2) - (int32_t)(pHandle->PhaseCOffset); /* -Ic */
 800bfb8:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
          Iab->b = -INT16_MAX;
 800bfbc:	804d      	strh	r5, [r1, #2]
        Aux = (int32_t)(ADCDataReg2) - (int32_t)(pHandle->PhaseCOffset); /* -Ic */
 800bfbe:	1af3      	subs	r3, r6, r3
        Aux -= (int32_t)Iab->b;             /* Ia  */
 800bfc0:	1b1b      	subs	r3, r3, r4
        if (Aux > INT16_MAX)
 800bfc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bfc6:	db21      	blt.n	800c00c <R3_1_GetPhaseCurrents+0x114>
          Iab->a = INT16_MAX;
 800bfc8:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800bfcc:	800b      	strh	r3, [r1, #0]
 800bfce:	469c      	mov	ip, r3
 800bfd0:	e7e4      	b.n	800bf9c <R3_1_GetPhaseCurrents+0xa4>
 800bfd2:	461c      	mov	r4, r3
 800bfd4:	46a4      	mov	ip, r4
 800bfd6:	f248 0301 	movw	r3, #32769	; 0x8001
        Aux = (int32_t)(ADCDataReg2) - (int32_t)(pHandle->PhaseCOffset); /* -Ic */
 800bfda:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
          Iab->a = -INT16_MAX;
 800bfde:	f8a1 c000 	strh.w	ip, [r1]
        Aux = (int32_t)(ADCDataReg2) - (int32_t)(pHandle->PhaseCOffset); /* -Ic */
 800bfe2:	1ab2      	subs	r2, r6, r2
        Aux -= (int32_t)Iab->a;             /* Ib */
 800bfe4:	1b12      	subs	r2, r2, r4
        if (Aux > INT16_MAX)
 800bfe6:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800bfea:	db17      	blt.n	800c01c <R3_1_GetPhaseCurrents+0x124>
          Iab->b = INT16_MAX;
 800bfec:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800bff0:	804a      	strh	r2, [r1, #2]
 800bff2:	4615      	mov	r5, r2
 800bff4:	e7d2      	b.n	800bf9c <R3_1_GetPhaseCurrents+0xa4>
        else  if (Aux > INT16_MAX)
 800bff6:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800bffa:	db20      	blt.n	800c03e <R3_1_GetPhaseCurrents+0x146>
          Iab->b = INT16_MAX;
 800bffc:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800c000:	461a      	mov	r2, r3
 800c002:	804b      	strh	r3, [r1, #2]
 800c004:	4615      	mov	r5, r2
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 800c006:	fa1f f38c 	uxth.w	r3, ip
 800c00a:	e7c7      	b.n	800bf9c <R3_1_GetPhaseCurrents+0xa4>
        else  if (Aux < -INT16_MAX)
 800c00c:	4c17      	ldr	r4, [pc, #92]	; (800c06c <R3_1_GetPhaseCurrents+0x174>)
 800c00e:	42a3      	cmp	r3, r4
 800c010:	da0f      	bge.n	800c032 <R3_1_GetPhaseCurrents+0x13a>
          Iab->a = -INT16_MAX;
 800c012:	800c      	strh	r4, [r1, #0]
 800c014:	f248 0301 	movw	r3, #32769	; 0x8001
 800c018:	46a4      	mov	ip, r4
 800c01a:	e7bf      	b.n	800bf9c <R3_1_GetPhaseCurrents+0xa4>
        else  if (Aux < -INT16_MAX)
 800c01c:	4d13      	ldr	r5, [pc, #76]	; (800c06c <R3_1_GetPhaseCurrents+0x174>)
 800c01e:	42aa      	cmp	r2, r5
 800c020:	da03      	bge.n	800c02a <R3_1_GetPhaseCurrents+0x132>
          Iab->b = -INT16_MAX;
 800c022:	804d      	strh	r5, [r1, #2]
 800c024:	f248 0201 	movw	r2, #32769	; 0x8001
 800c028:	e7b8      	b.n	800bf9c <R3_1_GetPhaseCurrents+0xa4>
          Iab->b = (int16_t)Aux;
 800c02a:	b215      	sxth	r5, r2
 800c02c:	804d      	strh	r5, [r1, #2]
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 800c02e:	b292      	uxth	r2, r2
 800c030:	e7b4      	b.n	800bf9c <R3_1_GetPhaseCurrents+0xa4>
          Iab->a = (int16_t)Aux;
 800c032:	fa0f fc83 	sxth.w	ip, r3
 800c036:	f8a1 c000 	strh.w	ip, [r1]
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 800c03a:	b29b      	uxth	r3, r3
 800c03c:	e7ae      	b.n	800bf9c <R3_1_GetPhaseCurrents+0xa4>
          Iab->b = (int16_t)Aux;
 800c03e:	b215      	sxth	r5, r2
 800c040:	804d      	strh	r5, [r1, #2]
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 800c042:	fa1f f38c 	uxth.w	r3, ip
 800c046:	b292      	uxth	r2, r2
 800c048:	e7a8      	b.n	800bf9c <R3_1_GetPhaseCurrents+0xa4>
          Iab->a = (int16_t)Aux;
 800c04a:	fa0f fc84 	sxth.w	ip, r4
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 800c04e:	b2a3      	uxth	r3, r4
 800c050:	e7c3      	b.n	800bfda <R3_1_GetPhaseCurrents+0xe2>
          Iab->b = (int16_t)Aux;
 800c052:	b225      	sxth	r5, r4
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 800c054:	b2a2      	uxth	r2, r4
 800c056:	e7af      	b.n	800bfb8 <R3_1_GetPhaseCurrents+0xc0>
          Iab->a = (int16_t)Aux;
 800c058:	fa0f fc83 	sxth.w	ip, r3
 800c05c:	e791      	b.n	800bf82 <R3_1_GetPhaseCurrents+0x8a>
    pHandle->_Super.Ia = Iab->a;
 800c05e:	f9b1 c000 	ldrsh.w	ip, [r1]
    pHandle->_Super.Ib = Iab->b;
 800c062:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 800c066:	880b      	ldrh	r3, [r1, #0]
 800c068:	884a      	ldrh	r2, [r1, #2]
 800c06a:	e797      	b.n	800bf9c <R3_1_GetPhaseCurrents+0xa4>
 800c06c:	ffff8001 	.word	0xffff8001

0800c070 <R3_1_SetADCSampPointPolarization>:
  *
  * @param  pHdl: Handler of the current instance of the PWM component.
  * @retval uint16_t Returns the return value of R3_1_WriteTIMRegisters.
  */
uint16_t R3_1_SetADCSampPointPolarization(PWMC_Handle_t *pHdl)
{
 800c070:	b410      	push	{r4}
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800c072:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
  pHandle->_Super.Sector = pHandle->PolarizationSector;
 800c076:	f890 4099 	ldrb.w	r4, [r0, #153]	; 0x99
 800c07a:	f880 407c 	strb.w	r4, [r0, #124]	; 0x7c
  return R3_1_WriteTIMRegisters(&pHandle->_Super, (pHandle->Half_PWMPeriod - (uint16_t)1));
 800c07e:	f8b0 2094 	ldrh.w	r2, [r0, #148]	; 0x94
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800c082:	685b      	ldr	r3, [r3, #4]
  uint16_t Aux;


  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t) pHandle->_Super.CntPhA);
 800c084:	f8b0 4050 	ldrh.w	r4, [r0, #80]	; 0x50
  WRITE_REG(TIMx->CCR1, CompareValue);
 800c088:	635c      	str	r4, [r3, #52]	; 0x34
  return R3_1_WriteTIMRegisters(&pHandle->_Super, (pHandle->Half_PWMPeriod - (uint16_t)1));
 800c08a:	3a01      	subs	r2, #1
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t) pHandle->_Super.CntPhB);
 800c08c:	f8b0 4052 	ldrh.w	r4, [r0, #82]	; 0x52
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t) pHandle->_Super.CntPhC);
 800c090:	f8b0 0054 	ldrh.w	r0, [r0, #84]	; 0x54
  WRITE_REG(TIMx->CCR2, CompareValue);
 800c094:	639c      	str	r4, [r3, #56]	; 0x38
  return R3_1_WriteTIMRegisters(&pHandle->_Super, (pHandle->Half_PWMPeriod - (uint16_t)1));
 800c096:	b292      	uxth	r2, r2
  WRITE_REG(TIMx->CCR3, CompareValue);
 800c098:	63d8      	str	r0, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 800c09a:	641a      	str	r2, [r3, #64]	; 0x40
  LL_TIM_OC_SetCompareCH4(TIMx, (uint32_t) SamplingPoint);

  /* Limit for update event */

//  if ( LL_TIM_CC_IsEnabledChannel(TIMx, LL_TIM_CHANNEL_CH4) == 1u )
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 800c09c:	4904      	ldr	r1, [pc, #16]	; (800c0b0 <R3_1_SetADCSampPointPolarization+0x40>)
 800c09e:	685b      	ldr	r3, [r3, #4]
}
 800c0a0:	f85d 4b04 	ldr.w	r4, [sp], #4
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 800c0a4:	420b      	tst	r3, r1
}
 800c0a6:	bf14      	ite	ne
 800c0a8:	2001      	movne	r0, #1
 800c0aa:	2000      	moveq	r0, #0
 800c0ac:	4770      	bx	lr
 800c0ae:	bf00      	nop
 800c0b0:	02000070 	.word	0x02000070

0800c0b4 <R3_1_HFCurrentsPolarizationAB>:
  * @param  Iab: Pointer to the structure that will receive motor current
  *         of phase A and B in ab_t format.
  */
static void R3_1_HFCurrentsPolarizationAB(PWMC_Handle_t *pHdl, ab_t *Iab)
{
  if (MC_NULL == Iab)
 800c0b4:	b321      	cbz	r1, 800c100 <R3_1_HFCurrentsPolarizationAB+0x4c>
#endif /* __ICCARM__ */
    PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800c0b6:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
 800c0ba:	e9d2 3200 	ldrd	r3, r2, [r2]
{
 800c0be:	b430      	push	{r4, r5}
    ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
    uint32_t ADCDataReg1 = ADCx->JDR1;
 800c0c0:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
    uint32_t ADCDataReg2 = ADCx->JDR2;
 800c0c4:	f8d3 5084 	ldr.w	r5, [r3, #132]	; 0x84
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800c0c8:	6853      	ldr	r3, [r2, #4]
 800c0ca:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800c0ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c0d2:	6053      	str	r3, [r2, #4]

    /* disable ADC trigger source */
    /* LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4) */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    if (pHandle->PolarizationCounter < NB_CONVERSIONS)
 800c0d4:	f890 3098 	ldrb.w	r3, [r0, #152]	; 0x98
 800c0d8:	2b0f      	cmp	r3, #15
 800c0da:	d80d      	bhi.n	800c0f8 <R3_1_HFCurrentsPolarizationAB+0x44>
    {
      pHandle-> PhaseAOffset += ADCDataReg1;
 800c0dc:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
      pHandle-> PhaseBOffset += ADCDataReg2;
 800c0e0:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
      pHandle-> PhaseAOffset += ADCDataReg1;
 800c0e4:	441c      	add	r4, r3
      pHandle->PolarizationCounter++;
 800c0e6:	f890 3098 	ldrb.w	r3, [r0, #152]	; 0x98
      pHandle-> PhaseBOffset += ADCDataReg2;
 800c0ea:	442a      	add	r2, r5
      pHandle->PolarizationCounter++;
 800c0ec:	3301      	adds	r3, #1
      pHandle-> PhaseBOffset += ADCDataReg2;
 800c0ee:	e9c0 4222 	strd	r4, r2, [r0, #136]	; 0x88
      pHandle->PolarizationCounter++;
 800c0f2:	b2db      	uxtb	r3, r3
 800c0f4:	f880 3098 	strb.w	r3, [r0, #152]	; 0x98
    {
      /* Nothing to do */
    }

    /* during offset calibration no current is flowing in the phases */
    Iab->a = 0;
 800c0f8:	2300      	movs	r3, #0
    Iab->b = 0;
  }
}
 800c0fa:	bc30      	pop	{r4, r5}
    Iab->a = 0;
 800c0fc:	600b      	str	r3, [r1, #0]
}
 800c0fe:	4770      	bx	lr
 800c100:	4770      	bx	lr
 800c102:	bf00      	nop

0800c104 <R3_1_HFCurrentsPolarizationC>:
  *                Min value: 0 (low sides ON)
  *                Max value: PWM_PERIOD_CYCLES/2 (low sides OFF)
  */
static void R3_1_HFCurrentsPolarizationC(PWMC_Handle_t *pHdl, ab_t *Iab)
{
  if (MC_NULL == Iab)
 800c104:	b301      	cbz	r1, 800c148 <R3_1_HFCurrentsPolarizationC+0x44>
#endif /* __ICCARM__ */
    PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800c106:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
    ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 800c10a:	e9d3 3200 	ldrd	r3, r2, [r3]
{
 800c10e:	b410      	push	{r4}
    uint32_t ADCDataReg2 = ADCx->JDR2;
 800c110:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800c114:	6853      	ldr	r3, [r2, #4]
 800c116:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800c11a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c11e:	6053      	str	r3, [r2, #4]

    /* disable ADC trigger source */
    /* LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4) */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    if (pHandle->PolarizationCounter < NB_CONVERSIONS)
 800c120:	f890 3098 	ldrb.w	r3, [r0, #152]	; 0x98
 800c124:	2b0f      	cmp	r3, #15
 800c126:	d80a      	bhi.n	800c13e <R3_1_HFCurrentsPolarizationC+0x3a>
    {
      /* Phase C is read from SECTOR_1, second value */
      pHandle-> PhaseCOffset += ADCDataReg2;
      pHandle->PolarizationCounter++;
 800c128:	f890 3098 	ldrb.w	r3, [r0, #152]	; 0x98
      pHandle-> PhaseCOffset += ADCDataReg2;
 800c12c:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
      pHandle->PolarizationCounter++;
 800c130:	3301      	adds	r3, #1
      pHandle-> PhaseCOffset += ADCDataReg2;
 800c132:	4422      	add	r2, r4
      pHandle->PolarizationCounter++;
 800c134:	b2db      	uxtb	r3, r3
      pHandle-> PhaseCOffset += ADCDataReg2;
 800c136:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
      pHandle->PolarizationCounter++;
 800c13a:	f880 3098 	strb.w	r3, [r0, #152]	; 0x98
    {
      /* Nothing to do */
    }

    /* during offset calibration no current is flowing in the phases */
    Iab->a = 0;
 800c13e:	2300      	movs	r3, #0
    Iab->b = 0;
  }
}
 800c140:	f85d 4b04 	ldr.w	r4, [sp], #4
    Iab->a = 0;
 800c144:	600b      	str	r3, [r1, #0]
}
 800c146:	4770      	bx	lr
 800c148:	4770      	bx	lr
 800c14a:	bf00      	nop

0800c14c <R3_1_SwitchOnPWM>:
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800c14c:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
  pHandle->ADCRegularLocked = true;

  pHandle->_Super.TurnOnLowSidesAction = false;

  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
 800c150:	f8b0 2094 	ldrh.w	r2, [r0, #148]	; 0x94
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800c154:	685b      	ldr	r3, [r3, #4]
  pHandle->ADCRegularLocked = true;
 800c156:	f04f 0c01 	mov.w	ip, #1
{
 800c15a:	b530      	push	{r4, r5, lr}
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
 800c15c:	fa22 f10c 	lsr.w	r1, r2, ip
  pHandle->_Super.TurnOnLowSidesAction = false;
 800c160:	f04f 0e00 	mov.w	lr, #0
 800c164:	f880 e07e 	strb.w	lr, [r0, #126]	; 0x7e
  pHandle->ADCRegularLocked = true;
 800c168:	f880 c0a0 	strb.w	ip, [r0, #160]	; 0xa0
  LL_TIM_OC_SetCompareCH2(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
  LL_TIM_OC_SetCompareCH3(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
  LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t)pHandle->Half_PWMPeriod - (uint32_t)5));
 800c16c:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR1, CompareValue);
 800c16e:	6359      	str	r1, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800c170:	6399      	str	r1, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800c172:	63d9      	str	r1, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800c174:	f06f 0101 	mvn.w	r1, #1
  WRITE_REG(TIMx->CCR4, CompareValue);
 800c178:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800c17a:	6119      	str	r1, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800c17c:	691a      	ldr	r2, [r3, #16]
 800c17e:	07d2      	lsls	r2, r2, #31
 800c180:	d5fc      	bpl.n	800c17c <R3_1_SwitchOnPWM+0x30>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800c182:	f06f 0201 	mvn.w	r2, #1
 800c186:	611a      	str	r2, [r3, #16]
    /* Nothing to do */
  }
  LL_TIM_ClearFlag_UPDATE(TIMx);

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 800c188:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c18a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c18e:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800c190:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c192:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c196:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs(TIMx);

  if ((ES_GPIO == pHandle->_Super.LowSideOutputs))
 800c198:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
 800c19c:	2a02      	cmp	r2, #2
 800c19e:	d007      	beq.n	800c1b0 <R3_1_SwitchOnPWM+0x64>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800c1a0:	f06f 0201 	mvn.w	r2, #1
 800c1a4:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800c1a6:	68da      	ldr	r2, [r3, #12]
 800c1a8:	f042 0201 	orr.w	r2, r2, #1
 800c1ac:	60da      	str	r2, [r3, #12]
  }
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE(TIMx);
  /* Enable Update IRQ */
  LL_TIM_EnableIT_UPDATE(TIMx);
}
 800c1ae:	bd30      	pop	{r4, r5, pc}
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0U)
 800c1b0:	6a19      	ldr	r1, [r3, #32]
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 800c1b2:	f8b0 5048 	ldrh.w	r5, [r0, #72]	; 0x48
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0U)
 800c1b6:	f240 5255 	movw	r2, #1365	; 0x555
 800c1ba:	4211      	tst	r1, r2
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800c1bc:	e9d0 140f 	ldrd	r1, r4, [r0, #60]	; 0x3c
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800c1c0:	6c42      	ldr	r2, [r0, #68]	; 0x44
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0U)
 800c1c2:	d007      	beq.n	800c1d4 <R3_1_SwitchOnPWM+0x88>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 800c1c4:	618d      	str	r5, [r1, #24]
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800c1c6:	f8b0 504a 	ldrh.w	r5, [r0, #74]	; 0x4a
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800c1ca:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
 800c1ce:	61a5      	str	r5, [r4, #24]
 800c1d0:	6191      	str	r1, [r2, #24]
}
 800c1d2:	e7e5      	b.n	800c1a0 <R3_1_SwitchOnPWM+0x54>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 800c1d4:	628d      	str	r5, [r1, #40]	; 0x28
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800c1d6:	f8b0 504a 	ldrh.w	r5, [r0, #74]	; 0x4a
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800c1da:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
 800c1de:	62a5      	str	r5, [r4, #40]	; 0x28
 800c1e0:	6291      	str	r1, [r2, #40]	; 0x28
}
 800c1e2:	e7dd      	b.n	800c1a0 <R3_1_SwitchOnPWM+0x54>

0800c1e4 <R3_1_SwitchOffPWM>:
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800c1e4:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c

  pHandle->_Super.TurnOnLowSidesAction = false;

  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs(TIMx);
  if (true == pHandle->_Super.BrakeActionLock)
 800c1e8:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800c1ec:	685b      	ldr	r3, [r3, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 800c1ee:	68da      	ldr	r2, [r3, #12]
 800c1f0:	f022 0201 	bic.w	r2, r2, #1
 800c1f4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800c1f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  pHandle->_Super.TurnOnLowSidesAction = false;
 800c1f8:	f04f 0c00 	mov.w	ip, #0
 800c1fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c200:	f880 c07e 	strb.w	ip, [r0, #126]	; 0x7e
 800c204:	645a      	str	r2, [r3, #68]	; 0x44
  if (true == pHandle->_Super.BrakeActionLock)
 800c206:	b919      	cbnz	r1, 800c210 <R3_1_SwitchOffPWM+0x2c>
  {
    /* Nothing to do */
  }
  else
  {
    if (ES_GPIO == pHandle->_Super.LowSideOutputs)
 800c208:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
 800c20c:	2a02      	cmp	r2, #2
 800c20e:	d00c      	beq.n	800c22a <R3_1_SwitchOffPWM+0x46>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800c210:	f06f 0201 	mvn.w	r2, #1
 800c214:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800c216:	691a      	ldr	r2, [r3, #16]
 800c218:	07d2      	lsls	r2, r2, #31
 800c21a:	d5fc      	bpl.n	800c216 <R3_1_SwitchOffPWM+0x32>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800c21c:	f06f 0101 	mvn.w	r1, #1
    /* Nothing to do */
  }
  LL_TIM_ClearFlag_UPDATE(TIMx);

  /* We allow ADC usage for regular conversion on Systick*/
  pHandle->ADCRegularLocked = false;
 800c220:	2200      	movs	r2, #0
 800c222:	6119      	str	r1, [r3, #16]
 800c224:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
 800c228:	4770      	bx	lr
{
 800c22a:	b430      	push	{r4, r5}
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800c22c:	e9d0 410f 	ldrd	r4, r1, [r0, #60]	; 0x3c
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 800c230:	f8b0 5048 	ldrh.w	r5, [r0, #72]	; 0x48
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800c234:	6c42      	ldr	r2, [r0, #68]	; 0x44
  WRITE_REG(GPIOx->BRR, PinMask);
 800c236:	62a5      	str	r5, [r4, #40]	; 0x28
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800c238:	f8b0 404a 	ldrh.w	r4, [r0, #74]	; 0x4a
 800c23c:	628c      	str	r4, [r1, #40]	; 0x28
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800c23e:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
 800c242:	6291      	str	r1, [r2, #40]	; 0x28
 800c244:	f06f 0201 	mvn.w	r2, #1
 800c248:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800c24a:	691a      	ldr	r2, [r3, #16]
 800c24c:	07d1      	lsls	r1, r2, #31
 800c24e:	d5fc      	bpl.n	800c24a <R3_1_SwitchOffPWM+0x66>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800c250:	f06f 0101 	mvn.w	r1, #1
  pHandle->ADCRegularLocked = false;
 800c254:	2200      	movs	r2, #0
 800c256:	6119      	str	r1, [r3, #16]
}
 800c258:	bc30      	pop	{r4, r5}
  pHandle->ADCRegularLocked = false;
 800c25a:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
}
 800c25e:	4770      	bx	lr

0800c260 <R3_1_RLGetPhaseCurrents>:
  }
  else
  {
#endif
    PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800c260:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
    int32_t wAux;

    /* Disable ADC trigger source */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    wAux = ((int32_t)pHandle->PhaseBOffset)
 800c264:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
{
 800c268:	b410      	push	{r4}
    ADC_TypeDef *ADCx = pHandle->pParams_str->ADCx;
 800c26a:	e9d2 4000 	ldrd	r4, r0, [r2]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800c26e:	6842      	ldr	r2, [r0, #4]
 800c270:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 800c274:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800c278:	6042      	str	r2, [r0, #4]
         - (int32_t)ADCx->JDR2;
 800c27a:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84

    /* Check saturation */
    if (wAux > -INT16_MAX)
 800c27e:	4a0b      	ldr	r2, [pc, #44]	; (800c2ac <R3_1_RLGetPhaseCurrents+0x4c>)
    wAux = ((int32_t)pHandle->PhaseBOffset)
 800c280:	1a1b      	subs	r3, r3, r0
    if (wAux > -INT16_MAX)
 800c282:	4293      	cmp	r3, r2
 800c284:	db05      	blt.n	800c292 <R3_1_RLGetPhaseCurrents+0x32>
    {
      if (wAux < INT16_MAX)
 800c286:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800c28a:	4293      	cmp	r3, r2
 800c28c:	dc0b      	bgt.n	800c2a6 <R3_1_RLGetPhaseCurrents+0x46>
    else
    {
      wAux = -INT16_MAX;
    }

    pStator_Currents->a = (int16_t)wAux;
 800c28e:	b21b      	sxth	r3, r3
 800c290:	e000      	b.n	800c294 <R3_1_RLGetPhaseCurrents+0x34>
 800c292:	4b07      	ldr	r3, [pc, #28]	; (800c2b0 <R3_1_RLGetPhaseCurrents+0x50>)
    pStator_Currents->b = (int16_t)wAux;
#ifdef NULL_PTR_CHECK_R3_1_PWM_CURR_FDB
  }
#endif
}
 800c294:	f85d 4b04 	ldr.w	r4, [sp], #4
    pStator_Currents->a = (int16_t)wAux;
 800c298:	2200      	movs	r2, #0
 800c29a:	f363 020f 	bfi	r2, r3, #0, #16
 800c29e:	f363 421f 	bfi	r2, r3, #16, #16
 800c2a2:	600a      	str	r2, [r1, #0]
}
 800c2a4:	4770      	bx	lr
 800c2a6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800c2aa:	e7f3      	b.n	800c294 <R3_1_RLGetPhaseCurrents+0x34>
 800c2ac:	ffff8002 	.word	0xffff8002
 800c2b0:	ffff8001 	.word	0xffff8001

0800c2b4 <R3_1_RLSwitchOnPWM>:
  }
  else
  {
#endif
    PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800c2b4:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
    ADC_TypeDef *ADCx = pHandle->pParams_str->ADCx;
 800c2b8:	e9d2 1300 	ldrd	r1, r3, [r2]
{
 800c2bc:	b430      	push	{r4, r5}
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800c2be:	f06f 0201 	mvn.w	r2, #1

    pHandle->ADCRegularLocked=true;
 800c2c2:	2401      	movs	r4, #1
 800c2c4:	f880 40a0 	strb.w	r4, [r0, #160]	; 0xa0
 800c2c8:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800c2ca:	691a      	ldr	r2, [r3, #16]
 800c2cc:	07d4      	lsls	r4, r2, #31
 800c2ce:	d5fc      	bpl.n	800c2ca <R3_1_RLSwitchOnPWM+0x16>
    }
    /* Clear Update Flag */
    LL_TIM_ClearFlag_UPDATE(TIMx);

    LL_TIM_OC_SetCompareCH1(TIMx, 1U);
    LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t )pHandle->Half_PWMPeriod) - 5U);
 800c2d0:	f8b0 2094 	ldrh.w	r2, [r0, #148]	; 0x94
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800c2d4:	f06f 0401 	mvn.w	r4, #1
 800c2d8:	611c      	str	r4, [r3, #16]
 800c2da:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR1, CompareValue);
 800c2dc:	2401      	movs	r4, #1
 800c2de:	635c      	str	r4, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR4, CompareValue);
 800c2e0:	641a      	str	r2, [r3, #64]	; 0x40
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800c2e2:	691a      	ldr	r2, [r3, #16]
 800c2e4:	07d2      	lsls	r2, r2, #31
 800c2e6:	d5fc      	bpl.n	800c2e2 <R3_1_RLSwitchOnPWM+0x2e>
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800c2e8:	68da      	ldr	r2, [r3, #12]
 800c2ea:	f042 0201 	orr.w	r2, r2, #1
 800c2ee:	60da      	str	r2, [r3, #12]

    /* Enable TIMx update interrupt */
    LL_TIM_EnableIT_UPDATE(TIMx);

    /* Main PWM Output Enable */
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE ;
 800c2f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c2f2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c2f6:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800c2f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c2fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c2fe:	645a      	str	r2, [r3, #68]	; 0x44
    LL_TIM_EnableAllOutputs(TIMx);

    if (ES_GPIO ==  pHandle->_Super.LowSideOutputs)
 800c300:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
 800c304:	2a02      	cmp	r2, #2
 800c306:	d00c      	beq.n	800c322 <R3_1_RLSwitchOnPWM+0x6e>
      /* Nothing to do */
    }

    /* Set the sector that correspond to Phase B and C sampling
     * B will be sampled by ADCx */
    pHdl->Sector = SECTOR_4;
 800c308:	2303      	movs	r3, #3
 800c30a:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  MODIFY_REG(ADCx->CR,
 800c30e:	688b      	ldr	r3, [r1, #8]
 800c310:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c314:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800c318:	f043 0308 	orr.w	r3, r3, #8
    LL_ADC_INJ_StartConversion(ADCx);

#ifdef NULL_PTR_CHECK_R3_1_PWM_CURR_FDB
  }
#endif
}
 800c31c:	bc30      	pop	{r4, r5}
 800c31e:	608b      	str	r3, [r1, #8]
 800c320:	4770      	bx	lr
      if ((TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0U)
 800c322:	6a1a      	ldr	r2, [r3, #32]
        LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 800c324:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800c326:	f8b0 5048 	ldrh.w	r5, [r0, #72]	; 0x48
      if ((TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0U)
 800c32a:	f240 5355 	movw	r3, #1365	; 0x555
 800c32e:	421a      	tst	r2, r3
        LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800c330:	e9d0 2310 	ldrd	r2, r3, [r0, #64]	; 0x40
      if ((TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0U)
 800c334:	d007      	beq.n	800c346 <R3_1_RLSwitchOnPWM+0x92>
  WRITE_REG(GPIOx->BSRR, PinMask);
 800c336:	61a5      	str	r5, [r4, #24]
        LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800c338:	f8b0 404a 	ldrh.w	r4, [r0, #74]	; 0x4a
 800c33c:	6194      	str	r4, [r2, #24]
        LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800c33e:	f8b0 204c 	ldrh.w	r2, [r0, #76]	; 0x4c
  WRITE_REG(GPIOx->BRR, PinMask);
 800c342:	629a      	str	r2, [r3, #40]	; 0x28
}
 800c344:	e7e0      	b.n	800c308 <R3_1_RLSwitchOnPWM+0x54>
  WRITE_REG(GPIOx->BRR, PinMask);
 800c346:	62a5      	str	r5, [r4, #40]	; 0x28
        LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800c348:	f8b0 404a 	ldrh.w	r4, [r0, #74]	; 0x4a
 800c34c:	6294      	str	r4, [r2, #40]	; 0x28
        LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800c34e:	f8b0 204c 	ldrh.w	r2, [r0, #76]	; 0x4c
 800c352:	629a      	str	r2, [r3, #40]	; 0x28
}
 800c354:	e7d8      	b.n	800c308 <R3_1_RLSwitchOnPWM+0x54>
 800c356:	bf00      	nop

0800c358 <R3_1_TurnOnLowSides>:
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800c358:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 800c35c:	685b      	ldr	r3, [r3, #4]
  pHandle->_Super.TurnOnLowSidesAction = true;
 800c35e:	f04f 0c01 	mov.w	ip, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800c362:	f06f 0201 	mvn.w	r2, #1
 800c366:	f880 c07e 	strb.w	ip, [r0, #126]	; 0x7e
 800c36a:	611a      	str	r2, [r3, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800c36c:	6359      	str	r1, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800c36e:	6399      	str	r1, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800c370:	63d9      	str	r1, [r3, #60]	; 0x3c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800c372:	691a      	ldr	r2, [r3, #16]
 800c374:	07d2      	lsls	r2, r2, #31
 800c376:	d5fc      	bpl.n	800c372 <R3_1_TurnOnLowSides+0x1a>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800c378:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c37a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c37e:	645a      	str	r2, [r3, #68]	; 0x44
  if ((ES_GPIO == pHandle->_Super.LowSideOutputs))
 800c380:	f890 307d 	ldrb.w	r3, [r0, #125]	; 0x7d
 800c384:	2b02      	cmp	r3, #2
 800c386:	d000      	beq.n	800c38a <R3_1_TurnOnLowSides+0x32>
 800c388:	4770      	bx	lr
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800c38a:	e9d0 210f 	ldrd	r2, r1, [r0, #60]	; 0x3c
{
 800c38e:	b410      	push	{r4}
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800c390:	6c43      	ldr	r3, [r0, #68]	; 0x44
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 800c392:	f8b0 4048 	ldrh.w	r4, [r0, #72]	; 0x48
  WRITE_REG(GPIOx->BSRR, PinMask);
 800c396:	6194      	str	r4, [r2, #24]
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800c398:	f8b0 404a 	ldrh.w	r4, [r0, #74]	; 0x4a
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800c39c:	f8b0 204c 	ldrh.w	r2, [r0, #76]	; 0x4c
 800c3a0:	618c      	str	r4, [r1, #24]
}
 800c3a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c3a6:	619a      	str	r2, [r3, #24]
 800c3a8:	4770      	bx	lr
 800c3aa:	bf00      	nop

0800c3ac <R3_1_SetAOReferenceVoltage>:
  * @param  Data Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_DAC_ConvertData12LeftAligned(DAC_TypeDef *DACx, uint32_t DAC_Channel, uint32_t Data)
{
  __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, (DAC_Channel >> DAC_REG_DHR12LX_REGOFFSET_BITOFFSET_POS)
 800c3ac:	ea4f 4c90 	mov.w	ip, r0, lsr #18
{
 800c3b0:	b510      	push	{r4, lr}
 800c3b2:	f00c 0c3c 	and.w	ip, ip, #60	; 0x3c
 800c3b6:	f101 0e08 	add.w	lr, r1, #8
 800c3ba:	b082      	sub	sp, #8
                                             & DAC_REG_DHR_REGOFFSET_MASK_POSBIT0);

  MODIFY_REG(*preg, DAC_DHR12L1_DACC1DHR, Data);
 800c3bc:	f85e 300c 	ldr.w	r3, [lr, ip]
 800c3c0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c3c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c3c8:	431a      	orrs	r2, r3
 800c3ca:	f84e 200c 	str.w	r2, [lr, ip]
  SET_BIT(DACx->SWTRIGR,
 800c3ce:	684a      	ldr	r2, [r1, #4]
 800c3d0:	f000 0303 	and.w	r3, r0, #3
 800c3d4:	4313      	orrs	r3, r2
 800c3d6:	604b      	str	r3, [r1, #4]
  return ((READ_BIT(DACx->CR,
 800c3d8:	680a      	ldr	r2, [r1, #0]
 800c3da:	f000 0010 	and.w	r0, r0, #16
 800c3de:	2301      	movs	r3, #1
 800c3e0:	4083      	lsls	r3, r0
           == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK))) ? 1UL : 0UL);
 800c3e2:	ea33 0202 	bics.w	r2, r3, r2
 800c3e6:	d014      	beq.n	800c412 <R3_1_SetAOReferenceVoltage+0x66>
                                         * (SystemCoreClock / (1000000UL * 2UL)));
 800c3e8:	4a14      	ldr	r2, [pc, #80]	; (800c43c <R3_1_SetAOReferenceVoltage+0x90>)
 800c3ea:	4815      	ldr	r0, [pc, #84]	; (800c440 <R3_1_SetAOReferenceVoltage+0x94>)
 800c3ec:	6812      	ldr	r2, [r2, #0]
  SET_BIT(DACx->CR,
 800c3ee:	680c      	ldr	r4, [r1, #0]
 800c3f0:	fba0 0202 	umull	r0, r2, r0, r2
 800c3f4:	0cd2      	lsrs	r2, r2, #19
 800c3f6:	4323      	orrs	r3, r4
 800c3f8:	00d2      	lsls	r2, r2, #3
 800c3fa:	600b      	str	r3, [r1, #0]
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_STARTUP_VOLTAGE_SETTLING_US)
 800c3fc:	9200      	str	r2, [sp, #0]
    while (wait_loop_index != 0UL)
 800c3fe:	9b00      	ldr	r3, [sp, #0]
 800c400:	b12b      	cbz	r3, 800c40e <R3_1_SetAOReferenceVoltage+0x62>
      wait_loop_index--;
 800c402:	9b00      	ldr	r3, [sp, #0]
 800c404:	3b01      	subs	r3, #1
 800c406:	9300      	str	r3, [sp, #0]
    while (wait_loop_index != 0UL)
 800c408:	9b00      	ldr	r3, [sp, #0]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d1f9      	bne.n	800c402 <R3_1_SetAOReferenceVoltage+0x56>
}
 800c40e:	b002      	add	sp, #8
 800c410:	bd10      	pop	{r4, pc}
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 800c412:	4b0a      	ldr	r3, [pc, #40]	; (800c43c <R3_1_SetAOReferenceVoltage+0x90>)
 800c414:	4a0a      	ldr	r2, [pc, #40]	; (800c440 <R3_1_SetAOReferenceVoltage+0x94>)
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	fba2 2303 	umull	r2, r3, r2, r3
 800c41c:	0cdb      	lsrs	r3, r3, #19
 800c41e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c422:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800c424:	9b01      	ldr	r3, [sp, #4]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d0f1      	beq.n	800c40e <R3_1_SetAOReferenceVoltage+0x62>
      wait_loop_index--;
 800c42a:	9b01      	ldr	r3, [sp, #4]
 800c42c:	3b01      	subs	r3, #1
 800c42e:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800c430:	9b01      	ldr	r3, [sp, #4]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d1f9      	bne.n	800c42a <R3_1_SetAOReferenceVoltage+0x7e>
}
 800c436:	b002      	add	sp, #8
 800c438:	bd10      	pop	{r4, pc}
 800c43a:	bf00      	nop
 800c43c:	20001b04 	.word	0x20001b04
 800c440:	431bde83 	.word	0x431bde83

0800c444 <R3_1_RLTurnOnLowSides>:
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800c444:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 800c448:	685b      	ldr	r3, [r3, #4]
  pHandle->ADCRegularLocked = true;
 800c44a:	f04f 0c01 	mov.w	ip, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 800c44e:	2100      	movs	r1, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800c450:	f06f 0201 	mvn.w	r2, #1
 800c454:	f880 c0a0 	strb.w	ip, [r0, #160]	; 0xa0
  WRITE_REG(TIMx->CCR1, CompareValue);
 800c458:	6359      	str	r1, [r3, #52]	; 0x34
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800c45a:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800c45c:	691a      	ldr	r2, [r3, #16]
 800c45e:	07d2      	lsls	r2, r2, #31
 800c460:	d5fc      	bpl.n	800c45c <R3_1_RLTurnOnLowSides+0x18>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800c462:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c464:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c468:	645a      	str	r2, [r3, #68]	; 0x44
  if (ES_GPIO == pHandle->_Super.LowSideOutputs)
 800c46a:	f890 307d 	ldrb.w	r3, [r0, #125]	; 0x7d
 800c46e:	2b02      	cmp	r3, #2
 800c470:	d000      	beq.n	800c474 <R3_1_RLTurnOnLowSides+0x30>
 800c472:	4770      	bx	lr
    LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800c474:	e9d0 210f 	ldrd	r2, r1, [r0, #60]	; 0x3c
{
 800c478:	b410      	push	{r4}
    LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800c47a:	6c43      	ldr	r3, [r0, #68]	; 0x44
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 800c47c:	f8b0 4048 	ldrh.w	r4, [r0, #72]	; 0x48
 800c480:	6194      	str	r4, [r2, #24]
    LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800c482:	f8b0 404a 	ldrh.w	r4, [r0, #74]	; 0x4a
    LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800c486:	f8b0 204c 	ldrh.w	r2, [r0, #76]	; 0x4c
  WRITE_REG(GPIOx->BRR, PinMask);
 800c48a:	628c      	str	r4, [r1, #40]	; 0x28
}
 800c48c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c490:	629a      	str	r2, [r3, #40]	; 0x28
 800c492:	4770      	bx	lr

0800c494 <R3_1_Init>:
  if (MC_NULL == pHandle)
 800c494:	2800      	cmp	r0, #0
 800c496:	f000 8140 	beq.w	800c71a <R3_1_Init+0x286>
{
 800c49a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    R3_3_OPAMPParams_t *OPAMPParams = pHandle->pParams_str->OPAMPParams;
 800c49e:	f8d0 509c 	ldr.w	r5, [r0, #156]	; 0x9c
    ADC_TypeDef *ADCx = pHandle->pParams_str->ADCx;
 800c4a2:	682e      	ldr	r6, [r5, #0]
    DAC_TypeDef *DAC_OCPCx = pHandle->pParams_str->DAC_OCP_CSelection;
 800c4a4:	6a6c      	ldr	r4, [r5, #36]	; 0x24
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 800c4a6:	6872      	ldr	r2, [r6, #4]
    COMP_TypeDef *COMP_OCPBx = pHandle->pParams_str->CompOCPBSelection;
 800c4a8:	f8d5 a010 	ldr.w	sl, [r5, #16]
{
 800c4ac:	b087      	sub	sp, #28
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800c4ae:	f04f 0c04 	mov.w	ip, #4
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 800c4b2:	f022 0204 	bic.w	r2, r2, #4
    DAC_TypeDef *DAC_OCPCx = pHandle->pParams_str->DAC_OCP_CSelection;
 800c4b6:	9401      	str	r4, [sp, #4]
    DAC_TypeDef *DAC_OVPx = pHandle->pParams_str->DAC_OVP_Selection;
 800c4b8:	6aac      	ldr	r4, [r5, #40]	; 0x28
 800c4ba:	9402      	str	r4, [sp, #8]
    COMP_TypeDef *COMP_OVPx = pHandle->pParams_str->CompOVPSelection;
 800c4bc:	e9d5 9805 	ldrd	r9, r8, [r5, #20]
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800c4c0:	686c      	ldr	r4, [r5, #4]
    DAC_TypeDef *DAC_OCPBx = pHandle->pParams_str->DAC_OCP_BSelection;
 800c4c2:	e9d5 1b07 	ldrd	r1, fp, [r5, #28]
 800c4c6:	4607      	mov	r7, r0
    COMP_TypeDef *COMP_OCPAx = pHandle->pParams_str->CompOCPASelection;
 800c4c8:	e9d5 0302 	ldrd	r0, r3, [r5, #8]
 800c4cc:	6072      	str	r2, [r6, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800c4ce:	f8c6 c000 	str.w	ip, [r6]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 800c4d2:	6872      	ldr	r2, [r6, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 800c4d4:	f04f 0c20 	mov.w	ip, #32
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 800c4d8:	f022 0220 	bic.w	r2, r2, #32
 800c4dc:	6072      	str	r2, [r6, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 800c4de:	f8c6 c000 	str.w	ip, [r6]
      if (TIM1 ==  TIMx)
 800c4e2:	4aaa      	ldr	r2, [pc, #680]	; (800c78c <R3_1_Init+0x2f8>)
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 800c4e4:	f8df c2b4 	ldr.w	ip, [pc, #692]	; 800c79c <R3_1_Init+0x308>
 800c4e8:	4294      	cmp	r4, r2
 800c4ea:	f8dc 2010 	ldr.w	r2, [ip, #16]
 800c4ee:	bf0c      	ite	eq
 800c4f0:	f442 6200 	orreq.w	r2, r2, #2048	; 0x800
 800c4f4:	f442 5200 	orrne.w	r2, r2, #8192	; 0x2000
 800c4f8:	f8cc 2010 	str.w	r2, [ip, #16]
      if (OPAMPParams != NULL)
 800c4fc:	b190      	cbz	r0, 800c524 <R3_1_Init+0x90>
        LL_OPAMP_Enable(OPAMPParams->OPAMPSelect_1[1]);
 800c4fe:	e9d0 2c00 	ldrd	r2, ip, [r0]
  * @param  OPAMPx OPAMP instance
  * @retval None
  */
__STATIC_INLINE void LL_OPAMP_Enable(OPAMP_TypeDef *OPAMPx)
{
  SET_BIT(OPAMPx->CSR, OPAMP_CSR_OPAMPxEN);
 800c502:	f8d2 e000 	ldr.w	lr, [r2]
        LL_OPAMP_Enable(OPAMPParams->OPAMPSelect_2[0]);
 800c506:	6980      	ldr	r0, [r0, #24]
 800c508:	f04e 0e01 	orr.w	lr, lr, #1
 800c50c:	f8c2 e000 	str.w	lr, [r2]
 800c510:	f8dc 2000 	ldr.w	r2, [ip]
 800c514:	f042 0201 	orr.w	r2, r2, #1
 800c518:	f8cc 2000 	str.w	r2, [ip]
 800c51c:	6802      	ldr	r2, [r0, #0]
 800c51e:	f042 0201 	orr.w	r2, r2, #1
 800c522:	6002      	str	r2, [r0, #0]
      if (COMP_OCPAx != NULL)
 800c524:	b19b      	cbz	r3, 800c54e <R3_1_Init+0xba>
        if ((pHandle->pParams_str->CompOCPAInvInput_MODE != EXT_MODE) && (DAC_OCPAx != MC_NULL))
 800c526:	f895 2063 	ldrb.w	r2, [r5, #99]	; 0x63
 800c52a:	2a01      	cmp	r2, #1
 800c52c:	d007      	beq.n	800c53e <R3_1_Init+0xaa>
 800c52e:	b131      	cbz	r1, 800c53e <R3_1_Init+0xaa>
          R3_1_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OCPA, DAC_OCPAx,
 800c530:	f8b5 205e 	ldrh.w	r2, [r5, #94]	; 0x5e
 800c534:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800c536:	9303      	str	r3, [sp, #12]
 800c538:	f7ff ff38 	bl	800c3ac <R3_1_SetAOReferenceVoltage>
 800c53c:	9b03      	ldr	r3, [sp, #12]
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Enable(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 800c53e:	681a      	ldr	r2, [r3, #0]
 800c540:	f042 0201 	orr.w	r2, r2, #1
 800c544:	601a      	str	r2, [r3, #0]
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Lock(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 800c546:	681a      	ldr	r2, [r3, #0]
 800c548:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800c54c:	601a      	str	r2, [r3, #0]
      if (COMP_OCPBx != NULL)
 800c54e:	f1ba 0f00 	cmp.w	sl, #0
 800c552:	d018      	beq.n	800c586 <R3_1_Init+0xf2>
        if ((pHandle->pParams_str->CompOCPBInvInput_MODE != EXT_MODE) && (DAC_OCPBx != MC_NULL))
 800c554:	f895 3064 	ldrb.w	r3, [r5, #100]	; 0x64
 800c558:	2b01      	cmp	r3, #1
 800c55a:	d008      	beq.n	800c56e <R3_1_Init+0xda>
 800c55c:	f1bb 0f00 	cmp.w	fp, #0
 800c560:	d005      	beq.n	800c56e <R3_1_Init+0xda>
          R3_1_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OCPB, DAC_OCPBx,
 800c562:	f8b5 205e 	ldrh.w	r2, [r5, #94]	; 0x5e
 800c566:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800c568:	4659      	mov	r1, fp
 800c56a:	f7ff ff1f 	bl	800c3ac <R3_1_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 800c56e:	f8da 3000 	ldr.w	r3, [sl]
 800c572:	f043 0301 	orr.w	r3, r3, #1
 800c576:	f8ca 3000 	str.w	r3, [sl]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 800c57a:	f8da 3000 	ldr.w	r3, [sl]
 800c57e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c582:	f8ca 3000 	str.w	r3, [sl]
      if (COMP_OCPCx != NULL)
 800c586:	f1b9 0f00 	cmp.w	r9, #0
 800c58a:	d017      	beq.n	800c5bc <R3_1_Init+0x128>
        if ((pHandle->pParams_str->CompOCPCInvInput_MODE != EXT_MODE)  && (DAC_OCPCx != MC_NULL))
 800c58c:	f895 3065 	ldrb.w	r3, [r5, #101]	; 0x65
 800c590:	2b01      	cmp	r3, #1
 800c592:	d007      	beq.n	800c5a4 <R3_1_Init+0x110>
 800c594:	9b01      	ldr	r3, [sp, #4]
 800c596:	b12b      	cbz	r3, 800c5a4 <R3_1_Init+0x110>
          R3_1_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OCPC, DAC_OCPCx,
 800c598:	f8b5 205e 	ldrh.w	r2, [r5, #94]	; 0x5e
 800c59c:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800c59e:	4619      	mov	r1, r3
 800c5a0:	f7ff ff04 	bl	800c3ac <R3_1_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 800c5a4:	f8d9 3000 	ldr.w	r3, [r9]
 800c5a8:	f043 0301 	orr.w	r3, r3, #1
 800c5ac:	f8c9 3000 	str.w	r3, [r9]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 800c5b0:	f8d9 3000 	ldr.w	r3, [r9]
 800c5b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c5b8:	f8c9 3000 	str.w	r3, [r9]
      if (COMP_OVPx != NULL)
 800c5bc:	f1b8 0f00 	cmp.w	r8, #0
 800c5c0:	d017      	beq.n	800c5f2 <R3_1_Init+0x15e>
        if ((pHandle->pParams_str->CompOVPInvInput_MODE != EXT_MODE) && (DAC_OVPx != MC_NULL))
 800c5c2:	f895 3066 	ldrb.w	r3, [r5, #102]	; 0x66
 800c5c6:	2b01      	cmp	r3, #1
 800c5c8:	d007      	beq.n	800c5da <R3_1_Init+0x146>
 800c5ca:	9b02      	ldr	r3, [sp, #8]
 800c5cc:	b12b      	cbz	r3, 800c5da <R3_1_Init+0x146>
          R3_1_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OVP, DAC_OVPx,
 800c5ce:	f8b5 2060 	ldrh.w	r2, [r5, #96]	; 0x60
 800c5d2:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 800c5d4:	4619      	mov	r1, r3
 800c5d6:	f7ff fee9 	bl	800c3ac <R3_1_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 800c5da:	f8d8 3000 	ldr.w	r3, [r8]
 800c5de:	f043 0301 	orr.w	r3, r3, #1
 800c5e2:	f8c8 3000 	str.w	r3, [r8]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 800c5e6:	f8d8 3000 	ldr.w	r3, [r8]
 800c5ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c5ee:	f8c8 3000 	str.w	r3, [r8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800c5f2:	68b3      	ldr	r3, [r6, #8]
 800c5f4:	07da      	lsls	r2, r3, #31
 800c5f6:	d45a      	bmi.n	800c6ae <R3_1_Init+0x21a>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800c5f8:	68b3      	ldr	r3, [r6, #8]
 800c5fa:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800c5fe:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800c602:	60b3      	str	r3, [r6, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800c604:	68b3      	ldr	r3, [r6, #8]
 800c606:	00db      	lsls	r3, r3, #3
 800c608:	d418      	bmi.n	800c63c <R3_1_Init+0x1a8>
  MODIFY_REG(ADCx->CR,
 800c60a:	68b3      	ldr	r3, [r6, #8]
                                         * (SystemCoreClock / (100000UL * 2UL)));
 800c60c:	4a60      	ldr	r2, [pc, #384]	; (800c790 <R3_1_Init+0x2fc>)
 800c60e:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800c612:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800c616:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c61a:	60b3      	str	r3, [r6, #8]
 800c61c:	4b5d      	ldr	r3, [pc, #372]	; (800c794 <R3_1_Init+0x300>)
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	099b      	lsrs	r3, r3, #6
 800c622:	fba2 2303 	umull	r2, r3, r2, r3
 800c626:	099b      	lsrs	r3, r3, #6
 800c628:	005b      	lsls	r3, r3, #1
    volatile uint32_t wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)
 800c62a:	9304      	str	r3, [sp, #16]
    while (wait_loop_index != 0UL)
 800c62c:	9b04      	ldr	r3, [sp, #16]
 800c62e:	b12b      	cbz	r3, 800c63c <R3_1_Init+0x1a8>
      wait_loop_index--;
 800c630:	9b04      	ldr	r3, [sp, #16]
 800c632:	3b01      	subs	r3, #1
 800c634:	9304      	str	r3, [sp, #16]
    while (wait_loop_index != 0UL)
 800c636:	9b04      	ldr	r3, [sp, #16]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d1f9      	bne.n	800c630 <R3_1_Init+0x19c>
  MODIFY_REG(ADCx->CR,
 800c63c:	68b3      	ldr	r3, [r6, #8]
 800c63e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800c642:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800c646:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c64a:	60b3      	str	r3, [r6, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800c64c:	68b3      	ldr	r3, [r6, #8]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	dbfc      	blt.n	800c64c <R3_1_Init+0x1b8>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 800c652:	6833      	ldr	r3, [r6, #0]
 800c654:	07d8      	lsls	r0, r3, #31
 800c656:	d408      	bmi.n	800c66a <R3_1_Init+0x1d6>
  MODIFY_REG(ADCx->CR,
 800c658:	4a4f      	ldr	r2, [pc, #316]	; (800c798 <R3_1_Init+0x304>)
 800c65a:	68b3      	ldr	r3, [r6, #8]
 800c65c:	4013      	ands	r3, r2
 800c65e:	f043 0301 	orr.w	r3, r3, #1
 800c662:	60b3      	str	r3, [r6, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 800c664:	6833      	ldr	r3, [r6, #0]
 800c666:	07d9      	lsls	r1, r3, #31
 800c668:	d5f7      	bpl.n	800c65a <R3_1_Init+0x1c6>
  MODIFY_REG(ADCx->CR,
 800c66a:	68b3      	ldr	r3, [r6, #8]
 800c66c:	4a4a      	ldr	r2, [pc, #296]	; (800c798 <R3_1_Init+0x304>)
 800c66e:	4013      	ands	r3, r2
 800c670:	f043 0308 	orr.w	r3, r3, #8
 800c674:	60b3      	str	r3, [r6, #8]
  MODIFY_REG(ADCx->CR,
 800c676:	68b3      	ldr	r3, [r6, #8]
 800c678:	4013      	ands	r3, r2
 800c67a:	f043 0320 	orr.w	r3, r3, #32
 800c67e:	60b3      	str	r3, [r6, #8]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_JQM | ADC_CFGR_JQDIS, QueueMode);
 800c680:	68f3      	ldr	r3, [r6, #12]
 800c682:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c686:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c68a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c68e:	60f3      	str	r3, [r6, #12]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 800c690:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800c692:	f023 030f 	bic.w	r3, r3, #15
 800c696:	6333      	str	r3, [r6, #48]	; 0x30
  MODIFY_REG(ADCx->CR,
 800c698:	68b3      	ldr	r3, [r6, #8]
 800c69a:	4013      	ands	r3, r2
 800c69c:	f043 0304 	orr.w	r3, r3, #4
 800c6a0:	60b3      	str	r3, [r6, #8]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 800c6a2:	2340      	movs	r3, #64	; 0x40
 800c6a4:	6033      	str	r3, [r6, #0]
  SET_BIT(ADCx->IER, LL_ADC_IT_JEOS);
 800c6a6:	6873      	ldr	r3, [r6, #4]
 800c6a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c6ac:	6073      	str	r3, [r6, #4]
  volatile uint32_t Brk2Timeout = 1000;
 800c6ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c6b2:	9305      	str	r3, [sp, #20]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 800c6b4:	6823      	ldr	r3, [r4, #0]
 800c6b6:	f023 0301 	bic.w	r3, r3, #1
 800c6ba:	6023      	str	r3, [r4, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800c6bc:	6863      	ldr	r3, [r4, #4]
 800c6be:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800c6c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c6c6:	6063      	str	r3, [r4, #4]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800c6c8:	69a3      	ldr	r3, [r4, #24]
 800c6ca:	f043 0308 	orr.w	r3, r3, #8
 800c6ce:	61a3      	str	r3, [r4, #24]
 800c6d0:	69a3      	ldr	r3, [r4, #24]
 800c6d2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c6d6:	61a3      	str	r3, [r4, #24]
 800c6d8:	69e3      	ldr	r3, [r4, #28]
 800c6da:	f043 0308 	orr.w	r3, r3, #8
 800c6de:	61e3      	str	r3, [r4, #28]
 800c6e0:	69e3      	ldr	r3, [r4, #28]
 800c6e2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c6e6:	61e3      	str	r3, [r4, #28]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800c6e8:	6963      	ldr	r3, [r4, #20]
 800c6ea:	f043 0301 	orr.w	r3, r3, #1
 800c6ee:	6163      	str	r3, [r4, #20]
  if (2U == pHandle->pParams_str->FreqRatio)
 800c6f0:	f895 3067 	ldrb.w	r3, [r5, #103]	; 0x67
 800c6f4:	2b02      	cmp	r3, #2
 800c6f6:	d011      	beq.n	800c71c <R3_1_Init+0x288>
    if (M1 == pHandle->_Super.Motor)
 800c6f8:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 800c6fc:	b9b3      	cbnz	r3, 800c72c <R3_1_Init+0x298>
      if (1U == pHandle->pParams_str->RepetitionCounter)
 800c6fe:	f895 3062 	ldrb.w	r3, [r5, #98]	; 0x62
 800c702:	2b01      	cmp	r3, #1
 800c704:	d00e      	beq.n	800c724 <R3_1_Init+0x290>
      else if (3U == pHandle->pParams_str->RepetitionCounter)
 800c706:	2b03      	cmp	r3, #3
 800c708:	d110      	bne.n	800c72c <R3_1_Init+0x298>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800c70a:	2201      	movs	r2, #1
 800c70c:	6322      	str	r2, [r4, #48]	; 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800c70e:	6962      	ldr	r2, [r4, #20]
 800c710:	f042 0201 	orr.w	r2, r2, #1
 800c714:	6162      	str	r2, [r4, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800c716:	6323      	str	r3, [r4, #48]	; 0x30
}
 800c718:	e008      	b.n	800c72c <R3_1_Init+0x298>
 800c71a:	4770      	bx	lr
    if (HIGHER_FREQ == pHandle->pParams_str->IsHigherFreqTim)
 800c71c:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
 800c720:	2b01      	cmp	r3, #1
 800c722:	d028      	beq.n	800c776 <R3_1_Init+0x2e2>
        LL_TIM_SetCounter(TIMx, (uint32_t)(pHandle->Half_PWMPeriod) - 1U);
 800c724:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800c728:	3b01      	subs	r3, #1
  WRITE_REG(TIMx->CNT, Counter);
 800c72a:	6263      	str	r3, [r4, #36]	; 0x24
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 800c72c:	f06f 0380 	mvn.w	r3, #128	; 0x80
 800c730:	6123      	str	r3, [r4, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 800c732:	6923      	ldr	r3, [r4, #16]
 800c734:	05db      	lsls	r3, r3, #23
 800c736:	d51c      	bpl.n	800c772 <R3_1_Init+0x2de>
  while ((Brk2Timeout != 0u) && (1U == result))
 800c738:	9b05      	ldr	r3, [sp, #20]
 800c73a:	b153      	cbz	r3, 800c752 <R3_1_Init+0x2be>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 800c73c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c740:	6122      	str	r2, [r4, #16]
    Brk2Timeout--;
 800c742:	9b05      	ldr	r3, [sp, #20]
 800c744:	3b01      	subs	r3, #1
 800c746:	9305      	str	r3, [sp, #20]
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 800c748:	6923      	ldr	r3, [r4, #16]
 800c74a:	f413 7f80 	tst.w	r3, #256	; 0x100
  while ((Brk2Timeout != 0u) && (1U == result))
 800c74e:	9b05      	ldr	r3, [sp, #20]
 800c750:	d10c      	bne.n	800c76c <R3_1_Init+0x2d8>
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 800c752:	68e3      	ldr	r3, [r4, #12]
 800c754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c758:	60e3      	str	r3, [r4, #12]
  SET_BIT(TIMx->CCER, Channels);
 800c75a:	6a23      	ldr	r3, [r4, #32]
 800c75c:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 800c760:	f043 0305 	orr.w	r3, r3, #5
 800c764:	6223      	str	r3, [r4, #32]
}
 800c766:	b007      	add	sp, #28
 800c768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while ((Brk2Timeout != 0u) && (1U == result))
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d1e7      	bne.n	800c740 <R3_1_Init+0x2ac>
 800c770:	e7ef      	b.n	800c752 <R3_1_Init+0x2be>
 800c772:	9b05      	ldr	r3, [sp, #20]
 800c774:	e7ed      	b.n	800c752 <R3_1_Init+0x2be>
      if (3U == pHandle->pParams_str->RepetitionCounter)
 800c776:	f895 2062 	ldrb.w	r2, [r5, #98]	; 0x62
 800c77a:	2a03      	cmp	r2, #3
 800c77c:	d1d2      	bne.n	800c724 <R3_1_Init+0x290>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800c77e:	6323      	str	r3, [r4, #48]	; 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800c780:	6963      	ldr	r3, [r4, #20]
 800c782:	f043 0301 	orr.w	r3, r3, #1
 800c786:	6163      	str	r3, [r4, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800c788:	6322      	str	r2, [r4, #48]	; 0x30
}
 800c78a:	e7cb      	b.n	800c724 <R3_1_Init+0x290>
 800c78c:	40012c00 	.word	0x40012c00
 800c790:	053e2d63 	.word	0x053e2d63
 800c794:	20001b04 	.word	0x20001b04
 800c798:	7fffffc0 	.word	0x7fffffc0
 800c79c:	e0042000 	.word	0xe0042000

0800c7a0 <R3_1_SetOffsetCalib>:
{
 800c7a0:	b410      	push	{r4}
  pHandle->PhaseAOffset = offsets->phaseAOffset;
 800c7a2:	e9d1 4201 	ldrd	r4, r2, [r1, #4]
 800c7a6:	680b      	ldr	r3, [r1, #0]
 800c7a8:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  pHdl->offsetCalibStatus = true;
 800c7ac:	2301      	movs	r3, #1
  pHandle->PhaseAOffset = offsets->phaseAOffset;
 800c7ae:	e9c0 4223 	strd	r4, r2, [r0, #140]	; 0x8c
  pHdl->offsetCalibStatus = true;
 800c7b2:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
}
 800c7b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c7ba:	4770      	bx	lr

0800c7bc <R3_1_GetOffsetCalib>:
  offsets->phaseAOffset = pHandle->PhaseAOffset;
 800c7bc:	e9d0 2323 	ldrd	r2, r3, [r0, #140]	; 0x8c
 800c7c0:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
 800c7c4:	608b      	str	r3, [r1, #8]
 800c7c6:	e9c1 0200 	strd	r0, r2, [r1]
}
 800c7ca:	4770      	bx	lr

0800c7cc <R3_1_CurrentReadingPolarization>:
{
 800c7cc:	b570      	push	{r4, r5, r6, lr}
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800c7ce:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
  ADC_TypeDef *ADCx = pHandle->pParams_str->ADCx;
 800c7d2:	e9d3 6500 	ldrd	r6, r5, [r3]
  if (true == pHandle->_Super.offsetCalibStatus)
 800c7d6:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
{
 800c7da:	b084      	sub	sp, #16
 800c7dc:	4604      	mov	r4, r0
  if (true == pHandle->_Super.offsetCalibStatus)
 800c7de:	b193      	cbz	r3, 800c806 <R3_1_CurrentReadingPolarization+0x3a>
  MODIFY_REG(ADCx->CR,
 800c7e0:	68b3      	ldr	r3, [r6, #8]
 800c7e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c7e6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
    pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 800c7ea:	2280      	movs	r2, #128	; 0x80
 800c7ec:	f043 0308 	orr.w	r3, r3, #8
 800c7f0:	60b3      	str	r3, [r6, #8]
 800c7f2:	f8a0 2096 	strh.w	r2, [r0, #150]	; 0x96
  pHandle->_Super.Sector = SECTOR_5;
 800c7f6:	2204      	movs	r2, #4
  pHandle->_Super.BrakeActionLock = false;
 800c7f8:	2300      	movs	r3, #0
  pHandle->_Super.Sector = SECTOR_5;
 800c7fa:	f884 207c 	strb.w	r2, [r4, #124]	; 0x7c
  pHandle->_Super.BrakeActionLock = false;
 800c7fe:	f884 3085 	strb.w	r3, [r4, #133]	; 0x85
}
 800c802:	b004      	add	sp, #16
 800c804:	bd70      	pop	{r4, r5, r6, pc}
    GetPhaseCurrCbSave = pHandle->_Super.pFctGetPhaseCurrents;
 800c806:	6802      	ldr	r2, [r0, #0]
 800c808:	9202      	str	r2, [sp, #8]
    SetSampPointSectXCbSave = pHandle->_Super.pFctSetADCSampPointSectX;
 800c80a:	6942      	ldr	r2, [r0, #20]
 800c80c:	9203      	str	r2, [sp, #12]
    pHandle->PolarizationCounter = 0U;
 800c80e:	f880 3098 	strb.w	r3, [r0, #152]	; 0x98
    pHandle->PhaseBOffset = 0U;
 800c812:	e9c0 3322 	strd	r3, r3, [r0, #136]	; 0x88
    pHandle->PhaseCOffset = 0U;
 800c816:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  CLEAR_BIT(TIMx->CCER, Channels);
 800c81a:	6a2b      	ldr	r3, [r5, #32]
 800c81c:	f423 63aa 	bic.w	r3, r3, #1360	; 0x550
 800c820:	f023 0305 	bic.w	r3, r3, #5
 800c824:	622b      	str	r3, [r5, #32]
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsPolarizationAB;
 800c826:	4b3e      	ldr	r3, [pc, #248]	; (800c920 <R3_1_CurrentReadingPolarization+0x154>)
 800c828:	6003      	str	r3, [r0, #0]
    pHandle->_Super.pFctSetADCSampPointSectX = &R3_1_SetADCSampPointPolarization;
 800c82a:	4b3e      	ldr	r3, [pc, #248]	; (800c924 <R3_1_CurrentReadingPolarization+0x158>)
 800c82c:	6143      	str	r3, [r0, #20]
    pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 800c82e:	2380      	movs	r3, #128	; 0x80
 800c830:	f8a0 3096 	strh.w	r3, [r0, #150]	; 0x96
  pHandle->PolarizationSector=SECTOR_5;
 800c834:	2304      	movs	r3, #4
 800c836:	f880 3099 	strb.w	r3, [r0, #153]	; 0x99
  pHandle->_Super.Sector = SECTOR_5;   
 800c83a:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    R3_1_SwitchOnPWM(&pHandle->_Super);
 800c83e:	f7ff fc85 	bl	800c14c <R3_1_SwitchOnPWM>
    while (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_OC4REF)
 800c842:	4a39      	ldr	r2, [pc, #228]	; (800c928 <R3_1_CurrentReadingPolarization+0x15c>)
 800c844:	686b      	ldr	r3, [r5, #4]
 800c846:	4013      	ands	r3, r2
 800c848:	2b70      	cmp	r3, #112	; 0x70
 800c84a:	d1fb      	bne.n	800c844 <R3_1_CurrentReadingPolarization+0x78>
 800c84c:	68b3      	ldr	r3, [r6, #8]
                           pHandle->pParams_str->RepetitionCounter,
 800c84e:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 800c852:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c856:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800c85a:	f043 0308 	orr.w	r3, r3, #8
 800c85e:	60b3      	str	r3, [r6, #8]
    waitForPolarizationEnd(TIMx,
 800c860:	f104 0156 	add.w	r1, r4, #86	; 0x56
 800c864:	f104 0398 	add.w	r3, r4, #152	; 0x98
 800c868:	f892 2062 	ldrb.w	r2, [r2, #98]	; 0x62
 800c86c:	4628      	mov	r0, r5
 800c86e:	e9cd 1300 	strd	r1, r3, [sp]
 800c872:	f7ff fb23 	bl	800bebc <waitForPolarizationEnd>
    R3_1_SwitchOffPWM(&pHandle->_Super);
 800c876:	4620      	mov	r0, r4
 800c878:	f7ff fcb4 	bl	800c1e4 <R3_1_SwitchOffPWM>
    pHandle->PolarizationCounter = 0U;
 800c87c:	2200      	movs	r2, #0
 800c87e:	f884 2098 	strb.w	r2, [r4, #152]	; 0x98
  pHandle->PolarizationSector=SECTOR_1;
 800c882:	f884 2099 	strb.w	r2, [r4, #153]	; 0x99
  pHandle->_Super.Sector = SECTOR_1;   
 800c886:	f884 207c 	strb.w	r2, [r4, #124]	; 0x7c
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsPolarizationC;
 800c88a:	4a28      	ldr	r2, [pc, #160]	; (800c92c <R3_1_CurrentReadingPolarization+0x160>)
 800c88c:	6022      	str	r2, [r4, #0]
    R3_1_SwitchOnPWM(&pHandle->_Super);
 800c88e:	4620      	mov	r0, r4
 800c890:	f7ff fc5c 	bl	800c14c <R3_1_SwitchOnPWM>
                           pHandle->pParams_str->RepetitionCounter,
 800c894:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
    waitForPolarizationEnd(TIMx,
 800c898:	9b01      	ldr	r3, [sp, #4]
 800c89a:	f892 2062 	ldrb.w	r2, [r2, #98]	; 0x62
 800c89e:	9900      	ldr	r1, [sp, #0]
 800c8a0:	4628      	mov	r0, r5
 800c8a2:	f7ff fb0b 	bl	800bebc <waitForPolarizationEnd>
    R3_1_SwitchOffPWM(&pHandle->_Super);
 800c8a6:	4620      	mov	r0, r4
 800c8a8:	f7ff fc9c 	bl	800c1e4 <R3_1_SwitchOffPWM>
    pHandle->PhaseBOffset /= NB_CONVERSIONS;
 800c8ac:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
    pHandle->PhaseCOffset /= NB_CONVERSIONS;
 800c8b0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    pHandle->PhaseBOffset /= NB_CONVERSIONS;
 800c8b4:	0912      	lsrs	r2, r2, #4
    pHandle->PhaseAOffset /= NB_CONVERSIONS;
 800c8b6:	0909      	lsrs	r1, r1, #4
    pHandle->PhaseBOffset /= NB_CONVERSIONS;
 800c8b8:	e9c4 1222 	strd	r1, r2, [r4, #136]	; 0x88
    if (0U == pHandle->_Super.SWerror)
 800c8bc:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
    pHandle->PhaseCOffset /= NB_CONVERSIONS;
 800c8c0:	091b      	lsrs	r3, r3, #4
 800c8c2:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    if (0U == pHandle->_Super.SWerror)
 800c8c6:	b912      	cbnz	r2, 800c8ce <R3_1_CurrentReadingPolarization+0x102>
      pHandle->_Super.offsetCalibStatus = true;
 800c8c8:	2301      	movs	r3, #1
 800c8ca:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    pHandle->_Super.pFctGetPhaseCurrents = GetPhaseCurrCbSave;
 800c8ce:	9902      	ldr	r1, [sp, #8]
    pHandle->_Super.pFctSetADCSampPointSectX = SetSampPointSectXCbSave;
 800c8d0:	9a03      	ldr	r2, [sp, #12]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800c8d2:	69ab      	ldr	r3, [r5, #24]
 800c8d4:	6162      	str	r2, [r4, #20]
 800c8d6:	f023 0308 	bic.w	r3, r3, #8
    pHandle->_Super.pFctGetPhaseCurrents = GetPhaseCurrCbSave;
 800c8da:	6021      	str	r1, [r4, #0]
 800c8dc:	61ab      	str	r3, [r5, #24]
 800c8de:	69aa      	ldr	r2, [r5, #24]
  LL_TIM_OC_SetCompareCH1 (TIMx, pHandle->Half_PWMPeriod);
 800c8e0:	f8b4 3094 	ldrh.w	r3, [r4, #148]	; 0x94
 800c8e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c8e8:	61aa      	str	r2, [r5, #24]
 800c8ea:	69ea      	ldr	r2, [r5, #28]
 800c8ec:	f022 0208 	bic.w	r2, r2, #8
 800c8f0:	61ea      	str	r2, [r5, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800c8f2:	636b      	str	r3, [r5, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800c8f4:	63ab      	str	r3, [r5, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800c8f6:	63eb      	str	r3, [r5, #60]	; 0x3c
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800c8f8:	69ab      	ldr	r3, [r5, #24]
 800c8fa:	f043 0308 	orr.w	r3, r3, #8
 800c8fe:	61ab      	str	r3, [r5, #24]
 800c900:	69ab      	ldr	r3, [r5, #24]
 800c902:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c906:	61ab      	str	r3, [r5, #24]
 800c908:	69eb      	ldr	r3, [r5, #28]
 800c90a:	f043 0308 	orr.w	r3, r3, #8
 800c90e:	61eb      	str	r3, [r5, #28]
  SET_BIT(TIMx->CCER, Channels);
 800c910:	6a2b      	ldr	r3, [r5, #32]
 800c912:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 800c916:	f043 0305 	orr.w	r3, r3, #5
 800c91a:	622b      	str	r3, [r5, #32]
}
 800c91c:	e76b      	b.n	800c7f6 <R3_1_CurrentReadingPolarization+0x2a>
 800c91e:	bf00      	nop
 800c920:	0800c0b5 	.word	0x0800c0b5
 800c924:	0800c071 	.word	0x0800c071
 800c928:	02000070 	.word	0x02000070
 800c92c:	0800c105 	.word	0x0800c105

0800c930 <R3_1_SetADCSampPointSectX>:
  if (MC_NULL == pHdl)
 800c930:	2800      	cmp	r0, #0
 800c932:	d03b      	beq.n	800c9ac <R3_1_SetADCSampPointSectX+0x7c>
{
 800c934:	b530      	push	{r4, r5, lr}
    if ((uint16_t)(pHandle->Half_PWMPeriod - pHdl->lowDuty) > pHandle->pParams_str->Tafter)
 800c936:	f8b0 3058 	ldrh.w	r3, [r0, #88]	; 0x58
 800c93a:	f8b0 e094 	ldrh.w	lr, [r0, #148]	; 0x94
 800c93e:	f8d0 109c 	ldr.w	r1, [r0, #156]	; 0x9c
 800c942:	ebae 0203 	sub.w	r2, lr, r3
 800c946:	f8b1 4054 	ldrh.w	r4, [r1, #84]	; 0x54
 800c94a:	b292      	uxth	r2, r2
 800c94c:	42a2      	cmp	r2, r4
 800c94e:	d917      	bls.n	800c980 <R3_1_SetADCSampPointSectX+0x50>
      pHandle->_Super.Sector = SECTOR_5;
 800c950:	2204      	movs	r2, #4
      SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t)1;
 800c952:	f10e 33ff 	add.w	r3, lr, #4294967295
      pHandle->_Super.Sector = SECTOR_5;
 800c956:	f880 207c 	strb.w	r2, [r0, #124]	; 0x7c
      SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t)1;
 800c95a:	b29b      	uxth	r3, r3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800c95c:	684a      	ldr	r2, [r1, #4]
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t) pHandle->_Super.CntPhA);
 800c95e:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t) pHandle->_Super.CntPhB);
 800c962:	f8b0 4052 	ldrh.w	r4, [r0, #82]	; 0x52
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t) pHandle->_Super.CntPhC);
 800c966:	f8b0 1054 	ldrh.w	r1, [r0, #84]	; 0x54
  WRITE_REG(TIMx->CCR1, CompareValue);
 800c96a:	6355      	str	r5, [r2, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800c96c:	6394      	str	r4, [r2, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800c96e:	63d1      	str	r1, [r2, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 800c970:	6413      	str	r3, [r2, #64]	; 0x40
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 800c972:	6852      	ldr	r2, [r2, #4]
 800c974:	4b10      	ldr	r3, [pc, #64]	; (800c9b8 <R3_1_SetADCSampPointSectX+0x88>)
 800c976:	421a      	tst	r2, r3
    returnValue = 0U;
 800c978:	bf14      	ite	ne
 800c97a:	2001      	movne	r0, #1
 800c97c:	2000      	moveq	r0, #0
}
 800c97e:	bd30      	pop	{r4, r5, pc}
      DeltaDuty = (uint16_t)(pHdl->lowDuty - pHdl->midDuty);
 800c980:	f8b0 c05a 	ldrh.w	ip, [r0, #90]	; 0x5a
 800c984:	eba3 0c0c 	sub.w	ip, r3, ip
      if (DeltaDuty > ((uint16_t)(pHandle->Half_PWMPeriod - pHdl->lowDuty) * 2U))
 800c988:	fa1f fc8c 	uxth.w	ip, ip
 800c98c:	ebbc 0f42 	cmp.w	ip, r2, lsl #1
 800c990:	d80d      	bhi.n	800c9ae <R3_1_SetADCSampPointSectX+0x7e>
        SamplingPoint = pHdl->lowDuty + pHandle->pParams_str->Tafter;
 800c992:	4423      	add	r3, r4
 800c994:	b29b      	uxth	r3, r3
        if (SamplingPoint >= pHandle->Half_PWMPeriod)
 800c996:	459e      	cmp	lr, r3
 800c998:	d8e0      	bhi.n	800c95c <R3_1_SetADCSampPointSectX+0x2c>
          SamplingPoint = (2U * pHandle->Half_PWMPeriod) - SamplingPoint - (uint16_t)1;
 800c99a:	43db      	mvns	r3, r3
          pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_FALLING;
 800c99c:	f44f 7280 	mov.w	r2, #256	; 0x100
          SamplingPoint = (2U * pHandle->Half_PWMPeriod) - SamplingPoint - (uint16_t)1;
 800c9a0:	eb03 034e 	add.w	r3, r3, lr, lsl #1
          pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_FALLING;
 800c9a4:	f8a0 2096 	strh.w	r2, [r0, #150]	; 0x96
          SamplingPoint = (2U * pHandle->Half_PWMPeriod) - SamplingPoint - (uint16_t)1;
 800c9a8:	b29b      	uxth	r3, r3
 800c9aa:	e7d7      	b.n	800c95c <R3_1_SetADCSampPointSectX+0x2c>
}
 800c9ac:	4770      	bx	lr
        SamplingPoint = pHdl->lowDuty - pHandle->pParams_str->Tbefore;
 800c9ae:	f8b1 2058 	ldrh.w	r2, [r1, #88]	; 0x58
 800c9b2:	1a9b      	subs	r3, r3, r2
 800c9b4:	b29b      	uxth	r3, r3
 800c9b6:	e7d1      	b.n	800c95c <R3_1_SetADCSampPointSectX+0x2c>
 800c9b8:	02000070 	.word	0x02000070

0800c9bc <R3_1_TIMx_UP_IRQHandler>:
  if (MC_NULL == pHandle)
 800c9bc:	4602      	mov	r2, r0
 800c9be:	2800      	cmp	r0, #0
 800c9c0:	d03b      	beq.n	800ca3a <R3_1_TIMx_UP_IRQHandler+0x7e>
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800c9c2:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
{
 800c9c6:	b4f0      	push	{r4, r5, r6, r7}
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800c9c8:	e9d0 5401 	ldrd	r5, r4, [r0, #4]
    ADC_TypeDef *ADCx = pHandle->pParams_str->ADCx;
 800c9cc:	6801      	ldr	r1, [r0, #0]
    if (OPAMPParams != NULL)
 800c9ce:	b38c      	cbz	r4, 800ca34 <R3_1_TIMx_UP_IRQHandler+0x78>
      while (ADCx->JSQR != 0x0u)
 800c9d0:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d1fc      	bne.n	800c9d0 <R3_1_TIMx_UP_IRQHandler+0x14>
      operationAmp = OPAMPParams->OPAMPSelect_1[pHandle->_Super.Sector];
 800c9d6:	f892 307c 	ldrb.w	r3, [r2, #124]	; 0x7c
 800c9da:	f854 c023 	ldr.w	ip, [r4, r3, lsl #2]
      if (operationAmp != NULL)
 800c9de:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800c9e2:	f1bc 0f00 	cmp.w	ip, #0
 800c9e6:	d007      	beq.n	800c9f8 <R3_1_TIMx_UP_IRQHandler+0x3c>
        MODIFY_REG(operationAmp->CSR, (OPAMP_CSR_OPAMPINTEN | OPAMP_CSR_VPSEL), OpampConfig);
 800c9e8:	f8dc 6000 	ldr.w	r6, [ip]
 800c9ec:	6b27      	ldr	r7, [r4, #48]	; 0x30
 800c9ee:	f426 7686 	bic.w	r6, r6, #268	; 0x10c
 800c9f2:	433e      	orrs	r6, r7
 800c9f4:	f8cc 6000 	str.w	r6, [ip]
      operationAmp = OPAMPParams->OPAMPSelect_2[pHandle->_Super.Sector];
 800c9f8:	69a6      	ldr	r6, [r4, #24]
      if (operationAmp != NULL)
 800c9fa:	b12e      	cbz	r6, 800ca08 <R3_1_TIMx_UP_IRQHandler+0x4c>
        MODIFY_REG(operationAmp->CSR, (OPAMP_CSR_OPAMPINTEN | OPAMP_CSR_VPSEL), OpampConfig);
 800c9fc:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 800c9fe:	6834      	ldr	r4, [r6, #0]
 800ca00:	f424 7486 	bic.w	r4, r4, #268	; 0x10c
 800ca04:	433c      	orrs	r4, r7
 800ca06:	6034      	str	r4, [r6, #0]
    ADCx->JSQR = pHandle->pParams_str->ADCConfig[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 800ca08:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800ca0c:	f8b2 3096 	ldrh.w	r3, [r2, #150]	; 0x96
 800ca10:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800ca12:	4303      	orrs	r3, r0
 800ca14:	64cb      	str	r3, [r1, #76]	; 0x4c
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800ca16:	686b      	ldr	r3, [r5, #4]
 800ca18:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800ca1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 800ca20:	2180      	movs	r1, #128	; 0x80
 800ca22:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800ca26:	606b      	str	r3, [r5, #4]
    tempPointer = &(pHandle->_Super.Motor);
 800ca28:	f102 007a 	add.w	r0, r2, #122	; 0x7a
}
 800ca2c:	bcf0      	pop	{r4, r5, r6, r7}
    pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 800ca2e:	f8a2 1096 	strh.w	r1, [r2, #150]	; 0x96
}
 800ca32:	4770      	bx	lr
    ADCx->JSQR = pHandle->pParams_str->ADCConfig[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 800ca34:	f892 307c 	ldrb.w	r3, [r2, #124]	; 0x7c
 800ca38:	e7e6      	b.n	800ca08 <R3_1_TIMx_UP_IRQHandler+0x4c>
}
 800ca3a:	4770      	bx	lr

0800ca3c <R3_1_RLDetectionModeEnable>:
  if (false == pHandle->_Super.RLDetectionMode)
 800ca3c:	f890 1080 	ldrb.w	r1, [r0, #128]	; 0x80
{
 800ca40:	b410      	push	{r4}
  if (false == pHandle->_Super.RLDetectionMode)
 800ca42:	2900      	cmp	r1, #0
 800ca44:	d13f      	bne.n	800cac6 <R3_1_RLDetectionModeEnable+0x8a>
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800ca46:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 800ca4a:	685b      	ldr	r3, [r3, #4]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800ca4c:	699a      	ldr	r2, [r3, #24]
 800ca4e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800ca52:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 800ca56:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800ca5a:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800ca5c:	6a1a      	ldr	r2, [r3, #32]
 800ca5e:	f042 0201 	orr.w	r2, r2, #1
 800ca62:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 800ca64:	6a1a      	ldr	r2, [r3, #32]
 800ca66:	f022 0204 	bic.w	r2, r2, #4
 800ca6a:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800ca6c:	6359      	str	r1, [r3, #52]	; 0x34
    if (LS_PWM_TIMER == pHandle->_Super.LowSideOutputs)
 800ca6e:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
 800ca72:	2a01      	cmp	r2, #1
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800ca74:	f103 0418 	add.w	r4, r3, #24
 800ca78:	d033      	beq.n	800cae2 <R3_1_RLDetectionModeEnable+0xa6>
    else if (ES_GPIO ==  pHandle->_Super.LowSideOutputs)
 800ca7a:	2a02      	cmp	r2, #2
 800ca7c:	d10f      	bne.n	800ca9e <R3_1_RLDetectionModeEnable+0x62>
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800ca7e:	699a      	ldr	r2, [r3, #24]
 800ca80:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800ca84:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 800ca88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ca8c:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800ca8e:	6a1a      	ldr	r2, [r3, #32]
 800ca90:	f042 0210 	orr.w	r2, r2, #16
 800ca94:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 800ca96:	6a1a      	ldr	r2, [r3, #32]
 800ca98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ca9c:	621a      	str	r2, [r3, #32]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800ca9e:	6862      	ldr	r2, [r4, #4]
 800caa0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800caa4:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 800caa8:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 800caac:	6062      	str	r2, [r4, #4]
  CLEAR_BIT(TIMx->CCER, Channels);
 800caae:	6a1a      	ldr	r2, [r3, #32]
    pHandle->PhaseAOffset = pHandle->PhaseBOffset; /* Use only the offset of phB */
 800cab0:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
 800cab4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cab8:	621a      	str	r2, [r3, #32]
 800caba:	6a1a      	ldr	r2, [r3, #32]
 800cabc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cac0:	621a      	str	r2, [r3, #32]
 800cac2:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
  pHandle->_Super.pFctTurnOnLowSides = &R3_1_RLTurnOnLowSides;
 800cac6:	4b0f      	ldr	r3, [pc, #60]	; (800cb04 <R3_1_RLDetectionModeEnable+0xc8>)
  pHandle->_Super.pFctSwitchOnPwm = &R3_1_RLSwitchOnPWM;
 800cac8:	490f      	ldr	r1, [pc, #60]	; (800cb08 <R3_1_RLDetectionModeEnable+0xcc>)
  pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 800caca:	4a10      	ldr	r2, [pc, #64]	; (800cb0c <R3_1_RLDetectionModeEnable+0xd0>)
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_RLGetPhaseCurrents;
 800cacc:	4c10      	ldr	r4, [pc, #64]	; (800cb10 <R3_1_RLDetectionModeEnable+0xd4>)
  pHandle->_Super.pFctTurnOnLowSides = &R3_1_RLTurnOnLowSides;
 800cace:	6103      	str	r3, [r0, #16]
  pHandle->_Super.RLDetectionMode = true;
 800cad0:	2301      	movs	r3, #1
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_RLGetPhaseCurrents;
 800cad2:	6004      	str	r4, [r0, #0]
  pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 800cad4:	e9c0 2101 	strd	r2, r1, [r0, #4]
}
 800cad8:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->_Super.RLDetectionMode = true;
 800cadc:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
}
 800cae0:	4770      	bx	lr
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800cae2:	699a      	ldr	r2, [r3, #24]
 800cae4:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800cae8:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 800caec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800caf0:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(TIMx->CCER, Channels);
 800caf2:	6a1a      	ldr	r2, [r3, #32]
 800caf4:	f022 0210 	bic.w	r2, r2, #16
 800caf8:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CCER, Channels);
 800cafa:	6a1a      	ldr	r2, [r3, #32]
 800cafc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cb00:	621a      	str	r2, [r3, #32]
}
 800cb02:	e7cc      	b.n	800ca9e <R3_1_RLDetectionModeEnable+0x62>
 800cb04:	0800c445 	.word	0x0800c445
 800cb08:	0800c2b5 	.word	0x0800c2b5
 800cb0c:	0800c1e5 	.word	0x0800c1e5
 800cb10:	0800c261 	.word	0x0800c261

0800cb14 <R3_1_RLDetectionModeDisable>:
  if (true ==  pHandle->_Super.RLDetectionMode)
 800cb14:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d03c      	beq.n	800cb96 <R3_1_RLDetectionModeDisable+0x82>
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800cb1c:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 800cb20:	685b      	ldr	r3, [r3, #4]
{
 800cb22:	b410      	push	{r4}
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800cb24:	699a      	ldr	r2, [r3, #24]
 800cb26:	4c43      	ldr	r4, [pc, #268]	; (800cc34 <R3_1_RLDetectionModeDisable+0x120>)
 800cb28:	4022      	ands	r2, r4
 800cb2a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800cb2e:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800cb30:	6a1a      	ldr	r2, [r3, #32]
 800cb32:	f042 0201 	orr.w	r2, r2, #1
 800cb36:	621a      	str	r2, [r3, #32]
    if (LS_PWM_TIMER == pHandle->_Super.LowSideOutputs)
 800cb38:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
 800cb3c:	2a01      	cmp	r2, #1
 800cb3e:	d02b      	beq.n	800cb98 <R3_1_RLDetectionModeDisable+0x84>
    else if (ES_GPIO == pHandle->_Super.LowSideOutputs)
 800cb40:	2a02      	cmp	r2, #2
 800cb42:	d050      	beq.n	800cbe6 <R3_1_RLDetectionModeDisable+0xd2>
    LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t)pHandle->Half_PWMPeriod) >> 1);
 800cb44:	f8b0 2094 	ldrh.w	r2, [r0, #148]	; 0x94
 800cb48:	0852      	lsrs	r2, r2, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 800cb4a:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800cb4c:	6999      	ldr	r1, [r3, #24]
 800cb4e:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 800cb52:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 800cb56:	f441 41c0 	orr.w	r1, r1, #24576	; 0x6000
 800cb5a:	6199      	str	r1, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800cb5c:	6a19      	ldr	r1, [r3, #32]
 800cb5e:	f041 0110 	orr.w	r1, r1, #16
 800cb62:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800cb64:	639a      	str	r2, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800cb66:	69d9      	ldr	r1, [r3, #28]
 800cb68:	4021      	ands	r1, r4
 800cb6a:	f041 0160 	orr.w	r1, r1, #96	; 0x60
 800cb6e:	61d9      	str	r1, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 800cb70:	6a19      	ldr	r1, [r3, #32]
 800cb72:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800cb76:	6219      	str	r1, [r3, #32]
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_GetPhaseCurrents;
 800cb78:	492f      	ldr	r1, [pc, #188]	; (800cc38 <R3_1_RLDetectionModeDisable+0x124>)
  WRITE_REG(TIMx->CCR3, CompareValue);
 800cb7a:	63da      	str	r2, [r3, #60]	; 0x3c
    pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 800cb7c:	4a2f      	ldr	r2, [pc, #188]	; (800cc3c <R3_1_RLDetectionModeDisable+0x128>)
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_GetPhaseCurrents;
 800cb7e:	6001      	str	r1, [r0, #0]
    pHandle->_Super.pFctSwitchOnPwm = &R3_1_SwitchOnPWM;
 800cb80:	492f      	ldr	r1, [pc, #188]	; (800cc40 <R3_1_RLDetectionModeDisable+0x12c>)
    pHandle->_Super.pFctTurnOnLowSides = &R3_1_TurnOnLowSides;
 800cb82:	4c30      	ldr	r4, [pc, #192]	; (800cc44 <R3_1_RLDetectionModeDisable+0x130>)
 800cb84:	6104      	str	r4, [r0, #16]
    pHandle->_Super.RLDetectionMode = false;
 800cb86:	2300      	movs	r3, #0
    pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 800cb88:	e9c0 2101 	strd	r2, r1, [r0, #4]
}
 800cb8c:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->_Super.RLDetectionMode = false;
 800cb90:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
}
 800cb94:	4770      	bx	lr
 800cb96:	4770      	bx	lr
  SET_BIT(TIMx->CCER, Channels);
 800cb98:	6a19      	ldr	r1, [r3, #32]
    LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t)pHandle->Half_PWMPeriod) >> 1);
 800cb9a:	f8b0 2094 	ldrh.w	r2, [r0, #148]	; 0x94
 800cb9e:	f041 0104 	orr.w	r1, r1, #4
 800cba2:	0852      	lsrs	r2, r2, #1
 800cba4:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800cba6:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800cba8:	6999      	ldr	r1, [r3, #24]
 800cbaa:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 800cbae:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 800cbb2:	f441 41c0 	orr.w	r1, r1, #24576	; 0x6000
 800cbb6:	6199      	str	r1, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800cbb8:	6a19      	ldr	r1, [r3, #32]
 800cbba:	f041 0110 	orr.w	r1, r1, #16
 800cbbe:	6219      	str	r1, [r3, #32]
 800cbc0:	6a19      	ldr	r1, [r3, #32]
 800cbc2:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800cbc6:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800cbc8:	639a      	str	r2, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800cbca:	69d9      	ldr	r1, [r3, #28]
 800cbcc:	4021      	ands	r1, r4
 800cbce:	f041 0160 	orr.w	r1, r1, #96	; 0x60
 800cbd2:	61d9      	str	r1, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 800cbd4:	6a19      	ldr	r1, [r3, #32]
 800cbd6:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800cbda:	6219      	str	r1, [r3, #32]
 800cbdc:	6a19      	ldr	r1, [r3, #32]
 800cbde:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 800cbe2:	6219      	str	r1, [r3, #32]
}
 800cbe4:	e7c8      	b.n	800cb78 <R3_1_RLDetectionModeDisable+0x64>
  CLEAR_BIT(TIMx->CCER, Channels);
 800cbe6:	6a19      	ldr	r1, [r3, #32]
 800cbe8:	f8b0 2094 	ldrh.w	r2, [r0, #148]	; 0x94
 800cbec:	f021 0104 	bic.w	r1, r1, #4
 800cbf0:	0852      	lsrs	r2, r2, #1
 800cbf2:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800cbf4:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800cbf6:	6999      	ldr	r1, [r3, #24]
 800cbf8:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 800cbfc:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 800cc00:	f441 41c0 	orr.w	r1, r1, #24576	; 0x6000
 800cc04:	6199      	str	r1, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800cc06:	6a19      	ldr	r1, [r3, #32]
 800cc08:	f041 0110 	orr.w	r1, r1, #16
 800cc0c:	6219      	str	r1, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 800cc0e:	6a19      	ldr	r1, [r3, #32]
 800cc10:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800cc14:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800cc16:	639a      	str	r2, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800cc18:	69d9      	ldr	r1, [r3, #28]
 800cc1a:	4021      	ands	r1, r4
 800cc1c:	f041 0160 	orr.w	r1, r1, #96	; 0x60
 800cc20:	61d9      	str	r1, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 800cc22:	6a19      	ldr	r1, [r3, #32]
 800cc24:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800cc28:	6219      	str	r1, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 800cc2a:	6a19      	ldr	r1, [r3, #32]
 800cc2c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800cc30:	6219      	str	r1, [r3, #32]
}
 800cc32:	e7a1      	b.n	800cb78 <R3_1_RLDetectionModeDisable+0x64>
 800cc34:	fffeff8c 	.word	0xfffeff8c
 800cc38:	0800bef9 	.word	0x0800bef9
 800cc3c:	0800c1e5 	.word	0x0800c1e5
 800cc40:	0800c14d 	.word	0x0800c14d
 800cc44:	0800c359 	.word	0x0800c359

0800cc48 <R3_1_RLDetectionModeSetDuty>:
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800cc48:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
    val = (((uint32_t)pHandle->Half_PWMPeriod) * ((uint32_t)hDuty)) >> 16;
 800cc4c:	f8b0 c094 	ldrh.w	ip, [r0, #148]	; 0x94
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800cc50:	6852      	ldr	r2, [r2, #4]
{
 800cc52:	4603      	mov	r3, r0
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800cc54:	69d0      	ldr	r0, [r2, #28]
 800cc56:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
    val = (((uint32_t)pHandle->Half_PWMPeriod) * ((uint32_t)hDuty)) >> 16;
 800cc5a:	fb0c f101 	mul.w	r1, ip, r1
 800cc5e:	f420 40e6 	bic.w	r0, r0, #29440	; 0x7300
{
 800cc62:	b410      	push	{r4}
    val = (((uint32_t)pHandle->Half_PWMPeriod) * ((uint32_t)hDuty)) >> 16;
 800cc64:	0c09      	lsrs	r1, r1, #16
    pHandle->ADCRegularLocked = true;
 800cc66:	2401      	movs	r4, #1
 800cc68:	f440 40e0 	orr.w	r0, r0, #28672	; 0x7000
 800cc6c:	f883 40a0 	strb.w	r4, [r3, #160]	; 0xa0
    pHandle->_Super.CntPhA = (uint16_t)val;
 800cc70:	f8a3 1050 	strh.w	r1, [r3, #80]	; 0x50
 800cc74:	61d0      	str	r0, [r2, #28]
    LL_TIM_OC_SetCompareCH4(TIMx, (((uint32_t)pHandle->Half_PWMPeriod) - ((uint32_t)pHandle->_Super.Ton)));
 800cc76:	f8b3 0076 	ldrh.w	r0, [r3, #118]	; 0x76
    LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t)pHandle->_Super.Toff);
 800cc7a:	f8b3 4078 	ldrh.w	r4, [r3, #120]	; 0x78
    LL_TIM_OC_SetCompareCH4(TIMx, (((uint32_t)pHandle->Half_PWMPeriod) - ((uint32_t)pHandle->_Super.Ton)));
 800cc7e:	ebac 0000 	sub.w	r0, ip, r0
  WRITE_REG(TIMx->CCR4, CompareValue);
 800cc82:	6410      	str	r0, [r2, #64]	; 0x40
  WRITE_REG(TIMx->CCR3, CompareValue);
 800cc84:	63d4      	str	r4, [r2, #60]	; 0x3c
  WRITE_REG(TIMx->CCR1, CompareValue);
 800cc86:	6351      	str	r1, [r2, #52]	; 0x34
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800cc88:	6851      	ldr	r1, [r2, #4]
    if (1U ==  pHandle->_Super.SWerror)
 800cc8a:	f8b3 0056 	ldrh.w	r0, [r3, #86]	; 0x56
 800cc8e:	f021 7100 	bic.w	r1, r1, #33554432	; 0x2000000
 800cc92:	f021 0170 	bic.w	r1, r1, #112	; 0x70
    pHdl->Sector = SECTOR_4;
 800cc96:	f04f 0c03 	mov.w	ip, #3
 800cc9a:	f041 0170 	orr.w	r1, r1, #112	; 0x70
 800cc9e:	6051      	str	r1, [r2, #4]
    if (1U ==  pHandle->_Super.SWerror)
 800cca0:	2801      	cmp	r0, #1
    pHdl->Sector = SECTOR_4;
 800cca2:	f883 c07c 	strb.w	ip, [r3, #124]	; 0x7c
    if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 800cca6:	6852      	ldr	r2, [r2, #4]
    if (1U ==  pHandle->_Super.SWerror)
 800cca8:	d007      	beq.n	800ccba <R3_1_RLDetectionModeSetDuty+0x72>
    if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 800ccaa:	4b07      	ldr	r3, [pc, #28]	; (800ccc8 <R3_1_RLDetectionModeSetDuty+0x80>)
}
 800ccac:	f85d 4b04 	ldr.w	r4, [sp], #4
    if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 800ccb0:	421a      	tst	r2, r3
      hAux = MC_DURATION;
 800ccb2:	bf14      	ite	ne
 800ccb4:	2001      	movne	r0, #1
 800ccb6:	2000      	moveq	r0, #0
}
 800ccb8:	4770      	bx	lr
      pHandle->_Super.SWerror = 0U;
 800ccba:	2200      	movs	r2, #0
}
 800ccbc:	f85d 4b04 	ldr.w	r4, [sp], #4
      pHandle->_Super.SWerror = 0U;
 800ccc0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800ccc4:	4770      	bx	lr
 800ccc6:	bf00      	nop
 800ccc8:	02000070 	.word	0x02000070

0800cccc <R3_1_RLTurnOnLowSidesAndStart>:
  }
  else
  {
#endif
    PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800cccc:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 800ccd0:	685b      	ldr	r3, [r3, #4]

    pHandle->ADCRegularLocked=true;
 800ccd2:	2101      	movs	r1, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800ccd4:	f06f 0201 	mvn.w	r2, #1
{
 800ccd8:	b430      	push	{r4, r5}
    pHandle->ADCRegularLocked=true;
 800ccda:	f880 10a0 	strb.w	r1, [r0, #160]	; 0xa0
 800ccde:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800cce0:	691a      	ldr	r2, [r3, #16]
 800cce2:	07d1      	lsls	r1, r2, #31
 800cce4:	d5fc      	bpl.n	800cce0 <R3_1_RLTurnOnLowSidesAndStart+0x14>
    LL_TIM_ClearFlag_UPDATE(TIMx);

    LL_TIM_OC_SetCompareCH1(TIMx, 0x0U);
    LL_TIM_OC_SetCompareCH2(TIMx, 0x0U);
    LL_TIM_OC_SetCompareCH3(TIMx, 0x0U);
    LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t )pHandle->Half_PWMPeriod) - 5U);
 800cce6:	f8b0 2094 	ldrh.w	r2, [r0, #148]	; 0x94
  WRITE_REG(TIMx->CCR1, CompareValue);
 800ccea:	2100      	movs	r1, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800ccec:	f06f 0401 	mvn.w	r4, #1
 800ccf0:	3a05      	subs	r2, #5
 800ccf2:	611c      	str	r4, [r3, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800ccf4:	6359      	str	r1, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800ccf6:	6399      	str	r1, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800ccf8:	63d9      	str	r1, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 800ccfa:	641a      	str	r2, [r3, #64]	; 0x40
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800ccfc:	691a      	ldr	r2, [r3, #16]
 800ccfe:	07d2      	lsls	r2, r2, #31
 800cd00:	d5fc      	bpl.n	800ccfc <R3_1_RLTurnOnLowSidesAndStart+0x30>
    {
      /* Nothing to do */
    }

    /* Main PWM Output Enable */
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE ;
 800cd02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cd04:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cd08:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800cd0a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cd0c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cd10:	645a      	str	r2, [r3, #68]	; 0x44
    LL_TIM_EnableAllOutputs (TIMx);

    if (ES_GPIO == pHandle->_Super.LowSideOutputs )
 800cd12:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
 800cd16:	2a02      	cmp	r2, #2
 800cd18:	d10b      	bne.n	800cd32 <R3_1_RLTurnOnLowSidesAndStart+0x66>
    {
      /* It is executed during calibration phase the EN signal shall stay off */
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800cd1a:	e9d0 410f 	ldrd	r4, r1, [r0, #60]	; 0x3c
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 800cd1e:	f8b0 5048 	ldrh.w	r5, [r0, #72]	; 0x48
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800cd22:	6c42      	ldr	r2, [r0, #68]	; 0x44
  WRITE_REG(GPIOx->BSRR, PinMask);
 800cd24:	61a5      	str	r5, [r4, #24]
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800cd26:	f8b0 404a 	ldrh.w	r4, [r0, #74]	; 0x4a
 800cd2a:	618c      	str	r4, [r1, #24]
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800cd2c:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
 800cd30:	6191      	str	r1, [r2, #24]
    else
    {
      /* Nothing to do */
    }

    pHdl->Sector = SECTOR_4;
 800cd32:	2203      	movs	r2, #3
 800cd34:	f880 207c 	strb.w	r2, [r0, #124]	; 0x7c
  SET_BIT(TIMx->CCER, Channels);
 800cd38:	6a1a      	ldr	r2, [r3, #32]
 800cd3a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800cd3e:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800cd40:	68da      	ldr	r2, [r3, #12]
 800cd42:	f042 0201 	orr.w	r2, r2, #1

    LL_TIM_EnableIT_UPDATE(TIMx);
#ifdef NULL_PTR_CHECK_R3_1_PWM_CURR_FDB
  }
#endif
}
 800cd46:	bc30      	pop	{r4, r5}
 800cd48:	60da      	str	r2, [r3, #12]
 800cd4a:	4770      	bx	lr

0800cd4c <RVBS_Clear>:
  {
#endif
    uint16_t aux;
    uint16_t index;

    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 800cd4c:	f8b0 c00c 	ldrh.w	ip, [r0, #12]
 800cd50:	8a42      	ldrh	r2, [r0, #18]
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 800cd52:	8943      	ldrh	r3, [r0, #10]
    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 800cd54:	4494      	add	ip, r2
 800cd56:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
{
 800cd5a:	b430      	push	{r4, r5}
 800cd5c:	2500      	movs	r5, #0
 800cd5e:	f36c 050f 	bfi	r5, ip, #0, #16
 800cd62:	f36c 451f 	bfi	r5, ip, #16, #16
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 800cd66:	b14b      	cbz	r3, 800cd7c <RVBS_Clear+0x30>
    {
      pHandle->aBuffer[index] = aux;
 800cd68:	6944      	ldr	r4, [r0, #20]
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	b29a      	uxth	r2, r3
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 800cd6e:	3301      	adds	r3, #1
      pHandle->aBuffer[index] = aux;
 800cd70:	f824 c012 	strh.w	ip, [r4, r2, lsl #1]
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 800cd74:	8941      	ldrh	r1, [r0, #10]
 800cd76:	b29a      	uxth	r2, r3
 800cd78:	4291      	cmp	r1, r2
 800cd7a:	d8f7      	bhi.n	800cd6c <RVBS_Clear+0x20>
    }
    pHandle->_Super.LatestConv = aux;
    pHandle->_Super.AvBusVoltage_d = aux;
    pHandle->index = 0U;
 800cd7c:	2300      	movs	r3, #0
    pHandle->_Super.LatestConv = aux;
 800cd7e:	6045      	str	r5, [r0, #4]
    pHandle->index = 0U;
 800cd80:	7643      	strb	r3, [r0, #25]
#ifdef NULL_PTR_CHECK_RDIV_BUS_VLT_SNS
  }
#endif
}
 800cd82:	bc30      	pop	{r4, r5}
 800cd84:	4770      	bx	lr
 800cd86:	bf00      	nop

0800cd88 <RVBS_Init>:
{
 800cd88:	b508      	push	{r3, lr}
    RVBS_Clear(pHandle);
 800cd8a:	f7ff ffdf 	bl	800cd4c <RVBS_Clear>
}
 800cd8e:	bd08      	pop	{r3, pc}

0800cd90 <RVBS_CheckFaultState>:
  }
  else
  {
#endif
	/* If both thresholds are equal, single threshold feature is used */
	if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 800cd90:	8982      	ldrh	r2, [r0, #12]
 800cd92:	89c1      	ldrh	r1, [r0, #14]
 800cd94:	428a      	cmp	r2, r1
 800cd96:	d00e      	beq.n	800cdb6 <RVBS_CheckFaultState+0x26>
      }
	}
    else
    {
      /* If both thresholds are different, hysteresis feature is used (Brake mode) */
      if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 800cd98:	f8b0 c006 	ldrh.w	ip, [r0, #6]
 800cd9c:	8a43      	ldrh	r3, [r0, #18]
 800cd9e:	4563      	cmp	r3, ip
 800cda0:	d807      	bhi.n	800cdb2 <RVBS_CheckFaultState+0x22>
      {
        fault = MC_UNDER_VOLT;
      }
      else if ( false == pHandle->OverVoltageHysteresisUpDir )
 800cda2:	7c03      	ldrb	r3, [r0, #16]
 800cda4:	b98b      	cbnz	r3, 800cdca <RVBS_CheckFaultState+0x3a>
      {
        if (pHandle->_Super.AvBusVoltage_d < pHandle->OverVoltageThresholdLow)
 800cda6:	4561      	cmp	r1, ip
 800cda8:	d913      	bls.n	800cdd2 <RVBS_CheckFaultState+0x42>
        {
          pHandle->OverVoltageHysteresisUpDir = true;
 800cdaa:	2201      	movs	r2, #1
 800cdac:	7402      	strb	r2, [r0, #16]
          fault = MC_NO_ERROR;
 800cdae:	4618      	mov	r0, r3
 800cdb0:	4770      	bx	lr
        fault = MC_UNDER_VOLT;
 800cdb2:	2004      	movs	r0, #4
 800cdb4:	4770      	bx	lr
      if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 800cdb6:	88c3      	ldrh	r3, [r0, #6]
 800cdb8:	429a      	cmp	r2, r3
 800cdba:	d30a      	bcc.n	800cdd2 <RVBS_CheckFaultState+0x42>
      else if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 800cdbc:	8a40      	ldrh	r0, [r0, #18]
 800cdbe:	4298      	cmp	r0, r3
 800cdc0:	bf94      	ite	ls
 800cdc2:	2000      	movls	r0, #0
 800cdc4:	2001      	movhi	r0, #1
 800cdc6:	0080      	lsls	r0, r0, #2
 800cdc8:	4770      	bx	lr
          fault = MC_OVER_VOLT;
        }
      }
      else
      {
        if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 800cdca:	4562      	cmp	r2, ip
 800cdcc:	d303      	bcc.n	800cdd6 <RVBS_CheckFaultState+0x46>
        {
          pHandle->OverVoltageHysteresisUpDir = false;
          fault = MC_OVER_VOLT;
        }
        else{
          fault = MC_NO_ERROR;
 800cdce:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_RDIV_BUS_VLT_SNS
  }
#endif
  return (fault);
}
 800cdd0:	4770      	bx	lr
        fault = MC_OVER_VOLT;
 800cdd2:	2002      	movs	r0, #2
 800cdd4:	4770      	bx	lr
          pHandle->OverVoltageHysteresisUpDir = false;
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	7403      	strb	r3, [r0, #16]
          fault = MC_OVER_VOLT;
 800cdda:	2002      	movs	r0, #2
 800cddc:	4770      	bx	lr
 800cdde:	bf00      	nop

0800cde0 <RVBS_CalcAvVbus>:
{
 800cde0:	b538      	push	{r3, r4, r5, lr}
    if (0xFFFFU == hAux)
 800cde2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cde6:	4299      	cmp	r1, r3
{
 800cde8:	4604      	mov	r4, r0
    if (0xFFFFU == hAux)
 800cdea:	d021      	beq.n	800ce30 <RVBS_CalcAvVbus+0x50>
      pHandle->aBuffer[pHandle->index] = hAux;
 800cdec:	6943      	ldr	r3, [r0, #20]
 800cdee:	7e45      	ldrb	r5, [r0, #25]
 800cdf0:	f823 1015 	strh.w	r1, [r3, r5, lsl #1]
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 800cdf4:	f8b0 e00a 	ldrh.w	lr, [r0, #10]
 800cdf8:	f01e 02ff 	ands.w	r2, lr, #255	; 0xff
 800cdfc:	d00d      	beq.n	800ce1a <RVBS_CalcAvVbus+0x3a>
 800cdfe:	3a01      	subs	r2, #1
 800ce00:	b2d2      	uxtb	r2, r2
 800ce02:	eb03 0042 	add.w	r0, r3, r2, lsl #1
 800ce06:	3b02      	subs	r3, #2
      wtemp = 0u;
 800ce08:	2200      	movs	r2, #0
        wtemp += pHandle->aBuffer[i];
 800ce0a:	f833 cf02 	ldrh.w	ip, [r3, #2]!
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 800ce0e:	4298      	cmp	r0, r3
        wtemp += pHandle->aBuffer[i];
 800ce10:	4462      	add	r2, ip
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 800ce12:	d1fa      	bne.n	800ce0a <RVBS_CalcAvVbus+0x2a>
      wtemp /= pHandle->LowPassFilterBW;
 800ce14:	fbb2 f2fe 	udiv	r2, r2, lr
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 800ce18:	b292      	uxth	r2, r2
      if ((uint16_t)pHandle->index < (pHandle->LowPassFilterBW - 1U))
 800ce1a:	f10e 3eff 	add.w	lr, lr, #4294967295
 800ce1e:	4575      	cmp	r5, lr
        pHandle->index++;
 800ce20:	bf34      	ite	cc
 800ce22:	3501      	addcc	r5, #1
        pHandle->index = 0U;
 800ce24:	2300      	movcs	r3, #0
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 800ce26:	80e2      	strh	r2, [r4, #6]
      pHandle->_Super.LatestConv = hAux;
 800ce28:	80a1      	strh	r1, [r4, #4]
        pHandle->index++;
 800ce2a:	bf34      	ite	cc
 800ce2c:	7665      	strbcc	r5, [r4, #25]
        pHandle->index = 0U;
 800ce2e:	7663      	strbcs	r3, [r4, #25]
    pHandle->_Super.FaultState = RVBS_CheckFaultState(pHandle);
 800ce30:	4620      	mov	r0, r4
 800ce32:	f7ff ffad 	bl	800cd90 <RVBS_CheckFaultState>
 800ce36:	8120      	strh	r0, [r4, #8]
}
 800ce38:	bd38      	pop	{r3, r4, r5, pc}
 800ce3a:	bf00      	nop

0800ce3c <REMNG_Init>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->Ext = 0;
 800ce3c:	2300      	movs	r3, #0
    pHandle->TargetFinal = 0;
    pHandle->RampRemainingStep = 0U;
    pHandle->IncDecAmount = 0;
    pHandle->ScalingFactor = 1U;
 800ce3e:	2201      	movs	r2, #1
    pHandle->TargetFinal = 0;
 800ce40:	e9c0 3301 	strd	r3, r3, [r0, #4]
    pHandle->IncDecAmount = 0;
 800ce44:	e9c0 3303 	strd	r3, r3, [r0, #12]
    pHandle->ScalingFactor = 1U;
 800ce48:	6142      	str	r2, [r0, #20]
#ifdef NULL_PTR_CHECK_RMP_EXT_MNG
  }
#endif
}
 800ce4a:	4770      	bx	lr

0800ce4c <REMNG_Calc>:
  else
  {
#endif
    int32_t current_ref;

    current_ref = pHandle->Ext;
 800ce4c:	e9d0 3102 	ldrd	r3, r1, [r0, #8]

    /* Update the variable and terminates the ramp if needed */
    if (pHandle->RampRemainingStep > 1U)
 800ce50:	2901      	cmp	r1, #1
 800ce52:	d90c      	bls.n	800ce6e <REMNG_Calc+0x22>
{
 800ce54:	b410      	push	{r4}
    {
      /* Increment/decrement the reference value */
      current_ref += pHandle->IncDecAmount;
 800ce56:	e9d0 4204 	ldrd	r4, r2, [r0, #16]

      /* Decrement the number of remaining steps */
      pHandle->RampRemainingStep --;
 800ce5a:	3901      	subs	r1, #1
      current_ref += pHandle->IncDecAmount;
 800ce5c:	4423      	add	r3, r4
      pHandle->RampRemainingStep --;
 800ce5e:	60c1      	str	r1, [r0, #12]
    else
    {
      /* Do nothing */
    }

    pHandle->Ext = current_ref;
 800ce60:	6083      	str	r3, [r0, #8]
    ret_val = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 800ce62:	fb93 f2f2 	sdiv	r2, r3, r2
#ifdef NULL_PTR_CHECK_RMP_EXT_MNG
  }
#endif
  return (ret_val);
}
 800ce66:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ce6a:	4610      	mov	r0, r2
 800ce6c:	4770      	bx	lr
    else if (1U == pHandle->RampRemainingStep)
 800ce6e:	d005      	beq.n	800ce7c <REMNG_Calc+0x30>
    ret_val = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 800ce70:	6942      	ldr	r2, [r0, #20]
    pHandle->Ext = current_ref;
 800ce72:	6083      	str	r3, [r0, #8]
    ret_val = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 800ce74:	fb93 f2f2 	sdiv	r2, r3, r2
}
 800ce78:	4610      	mov	r0, r2
 800ce7a:	4770      	bx	lr
      current_ref = pHandle->TargetFinal * ((int32_t)pHandle->ScalingFactor);
 800ce7c:	6842      	ldr	r2, [r0, #4]
 800ce7e:	6943      	ldr	r3, [r0, #20]
      pHandle->RampRemainingStep = 0U;
 800ce80:	2100      	movs	r1, #0
      current_ref = pHandle->TargetFinal * ((int32_t)pHandle->ScalingFactor);
 800ce82:	fb02 f303 	mul.w	r3, r2, r3
      pHandle->RampRemainingStep = 0U;
 800ce86:	60c1      	str	r1, [r0, #12]
    pHandle->Ext = current_ref;
 800ce88:	6083      	str	r3, [r0, #8]
}
 800ce8a:	4610      	mov	r0, r2
 800ce8c:	4770      	bx	lr
 800ce8e:	bf00      	nop

0800ce90 <REMNG_RampCompleted>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (0U == pHandle->RampRemainingStep)
 800ce90:	68c0      	ldr	r0, [r0, #12]
#ifdef NULL_PTR_CHECK_RMP_EXT_MNG
  }
#endif
  return (retVal);

}
 800ce92:	fab0 f080 	clz	r0, r0
 800ce96:	0940      	lsrs	r0, r0, #5
 800ce98:	4770      	bx	lr
 800ce9a:	bf00      	nop

0800ce9c <REMNG_StopRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->RampRemainingStep = 0U;
 800ce9c:	2300      	movs	r3, #0
    pHandle->IncDecAmount = 0;
 800ce9e:	e9c0 3303 	strd	r3, r3, [r0, #12]
#ifdef NULL_PTR_CHECK_RMP_EXT_MNG
  }
#endif
}
 800cea2:	4770      	bx	lr

0800cea4 <getScalingFactor>:
  int32_t aux;
  uint8_t i;

  if (Target < 0)
  {
    aux = -Target;
 800cea4:	2800      	cmp	r0, #0
 800cea6:	bfb8      	it	lt
 800cea8:	4240      	neglt	r0, r0
{
 800ceaa:	2301      	movs	r3, #1
  {
    TargetAbs = (uint32_t)Target;
  }
  for (i = 1U; i < 32U; i++)
  {
    uint32_t limit = (((uint32_t)1) << (31U - i));
 800ceac:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800ceb0:	e002      	b.n	800ceb8 <getScalingFactor+0x14>
  for (i = 1U; i < 32U; i++)
 800ceb2:	3301      	adds	r3, #1
 800ceb4:	2b20      	cmp	r3, #32
 800ceb6:	d007      	beq.n	800cec8 <getScalingFactor+0x24>
    uint32_t limit = (((uint32_t)1) << (31U - i));
 800ceb8:	fa21 f203 	lsr.w	r2, r1, r3
    if (TargetAbs >= limit)
 800cebc:	4290      	cmp	r0, r2
 800cebe:	d3f8      	bcc.n	800ceb2 <getScalingFactor+0xe>
    else
    {
      /* Nothing to do */
    }
  }
  return (((uint32_t)1) << (i - 1U));
 800cec0:	3b01      	subs	r3, #1
 800cec2:	2001      	movs	r0, #1
 800cec4:	4098      	lsls	r0, r3
}
 800cec6:	4770      	bx	lr
 800cec8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800cecc:	4770      	bx	lr
 800cece:	bf00      	nop

0800ced0 <REMNG_ExecRamp>:
{
 800ced0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ced4:	4604      	mov	r4, r0
 800ced6:	460e      	mov	r6, r1
    current_ref = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 800ced8:	6880      	ldr	r0, [r0, #8]
 800ceda:	6963      	ldr	r3, [r4, #20]
    if (0U == Durationms)
 800cedc:	4615      	mov	r5, r2
 800cede:	b962      	cbnz	r2, 800cefa <REMNG_ExecRamp+0x2a>
      pHandle->ScalingFactor = getScalingFactor(TargetFinal);
 800cee0:	4608      	mov	r0, r1
 800cee2:	f7ff ffdf 	bl	800cea4 <getScalingFactor>
      pHandle->Ext = TargetFinal * ((int32_t)pHandle->ScalingFactor);
 800cee6:	fb00 f606 	mul.w	r6, r0, r6
      pHandle->ScalingFactor = getScalingFactor(TargetFinal);
 800ceea:	6160      	str	r0, [r4, #20]
      pHandle->Ext = TargetFinal * ((int32_t)pHandle->ScalingFactor);
 800ceec:	4628      	mov	r0, r5
      pHandle->IncDecAmount = 0;
 800ceee:	e9c4 5003 	strd	r5, r0, [r4, #12]
      pHandle->Ext = TargetFinal * ((int32_t)pHandle->ScalingFactor);
 800cef2:	60a6      	str	r6, [r4, #8]
}
 800cef4:	2001      	movs	r0, #1
 800cef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    current_ref = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 800cefa:	fb90 f8f3 	sdiv	r8, r0, r3
      uint32_t wScalingFactor = getScalingFactor(TargetFinal - current_ref);
 800cefe:	eba1 0708 	sub.w	r7, r1, r8
 800cf02:	4638      	mov	r0, r7
 800cf04:	f7ff ffce 	bl	800cea4 <getScalingFactor>
 800cf08:	4682      	mov	sl, r0
      uint32_t wScalingFactor2 = getScalingFactor(current_ref);
 800cf0a:	4640      	mov	r0, r8
 800cf0c:	f7ff ffca 	bl	800cea4 <getScalingFactor>
 800cf10:	4681      	mov	r9, r0
      uint32_t wScalingFactor3 = getScalingFactor(TargetFinal);
 800cf12:	4630      	mov	r0, r6
 800cf14:	f7ff ffc6 	bl	800cea4 <getScalingFactor>
      if (wScalingFactor <  wScalingFactor2)
 800cf18:	45ca      	cmp	sl, r9
      uint32_t wScalingFactor3 = getScalingFactor(TargetFinal);
 800cf1a:	4603      	mov	r3, r0
        if (wScalingFactor < wScalingFactor3)
 800cf1c:	bf2c      	ite	cs
 800cf1e:	4648      	movcs	r0, r9
 800cf20:	4650      	movcc	r0, sl
        if (wScalingFactor2 < wScalingFactor3)
 800cf22:	4298      	cmp	r0, r3
 800cf24:	bf28      	it	cs
 800cf26:	4618      	movcs	r0, r3
      pHandle->Ext = current_ref * ((int32_t)pHandle->ScalingFactor);
 800cf28:	fb08 f300 	mul.w	r3, r8, r0
 800cf2c:	60a3      	str	r3, [r4, #8]
      aux = Durationms * ((uint32_t)pHandle->FrequencyHz); /* Check for overflow and use prescaler */
 800cf2e:	6823      	ldr	r3, [r4, #0]
      aux /= 1000U;
 800cf30:	4a08      	ldr	r2, [pc, #32]	; (800cf54 <REMNG_ExecRamp+0x84>)
      pHandle->ScalingFactor = wScalingFactorMin;
 800cf32:	6160      	str	r0, [r4, #20]
      aux = Durationms * ((uint32_t)pHandle->FrequencyHz); /* Check for overflow and use prescaler */
 800cf34:	fb05 f303 	mul.w	r3, r5, r3
      aux /= 1000U;
 800cf38:	fba2 2303 	umull	r2, r3, r2, r3
 800cf3c:	099b      	lsrs	r3, r3, #6
      pHandle->RampRemainingStep++;
 800cf3e:	1c5d      	adds	r5, r3, #1
      aux1 = (TargetFinal - current_ref) * ((int32_t)pHandle->ScalingFactor);
 800cf40:	fb07 f000 	mul.w	r0, r7, r0
      pHandle->TargetFinal = TargetFinal;
 800cf44:	6066      	str	r6, [r4, #4]
      aux1 /= ((int32_t)pHandle->RampRemainingStep);
 800cf46:	fb90 f0f5 	sdiv	r0, r0, r5
      pHandle->IncDecAmount = 0;
 800cf4a:	e9c4 5003 	strd	r5, r0, [r4, #12]
}
 800cf4e:	2001      	movs	r0, #1
 800cf50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf54:	10624dd3 	.word	0x10624dd3

0800cf58 <RUC_Init>:
__weak void RUC_Init(RevUpCtrl_Handle_t *pHandle,
                     SpeednTorqCtrl_Handle_t *pSTC,
                     VirtualSpeedSensor_Handle_t *pVSS,
                     STO_Handle_t *pSNSL,
                     PWMC_Handle_t *pPWM)
{
 800cf58:	b500      	push	{lr}
  {
#endif
    RevUpCtrl_PhaseParams_t *pRUCPhaseParams = &pHandle->ParamsData[0];
    uint8_t bPhase = 0U;

    pHandle->pSTC = pSTC;
 800cf5a:	6681      	str	r1, [r0, #104]	; 0x68
    pHandle->EnteredZone1 = false;

    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
    {
      /* Dump HF data for now HF data are forced to 16 bits */
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 800cf5c:	6941      	ldr	r1, [r0, #20]
    pHandle->pSNSL = pSNSL;
 800cf5e:	e9c0 231b 	strd	r2, r3, [r0, #108]	; 0x6c
    pHandle->OTFSCLowside = false;
 800cf62:	f04f 0c00 	mov.w	ip, #0
    pHandle->pPWM = pPWM;
 800cf66:	9b01      	ldr	r3, [sp, #4]
    pHandle->OTFSCLowside = false;
 800cf68:	f8a0 c054 	strh.w	ip, [r0, #84]	; 0x54
    pHandle->pPWM = pPWM;
 800cf6c:	6743      	str	r3, [r0, #116]	; 0x74
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 800cf6e:	b309      	cbz	r1, 800cfb4 <RUC_Init+0x5c>
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 800cf70:	688b      	ldr	r3, [r1, #8]
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 800cf72:	b323      	cbz	r3, 800cfbe <RUC_Init+0x66>
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 800cf74:	689b      	ldr	r3, [r3, #8]
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 800cf76:	b32b      	cbz	r3, 800cfc4 <RUC_Init+0x6c>
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 800cf78:	689b      	ldr	r3, [r3, #8]
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 800cf7a:	b333      	cbz	r3, 800cfca <RUC_Init+0x72>
 800cf7c:	689b      	ldr	r3, [r3, #8]
      bPhase++;
 800cf7e:	f04f 0c05 	mov.w	ip, #5
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 800cf82:	b1cb      	cbz	r3, 800cfb8 <RUC_Init+0x60>
 800cf84:	2204      	movs	r2, #4
 800cf86:	f04f 0c05 	mov.w	ip, #5
    {
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;

      pHandle->bPhaseNbr = bPhase;

      pHandle->bResetPLLTh = (uint8_t)((RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz) / 1000U);
 800cf8a:	8803      	ldrh	r3, [r0, #0]
 800cf8c:	4910      	ldr	r1, [pc, #64]	; (800cfd0 <RUC_Init+0x78>)
 800cf8e:	f04f 0e64 	mov.w	lr, #100	; 0x64
 800cf92:	fb0e f303 	mul.w	r3, lr, r3
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 800cf96:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      pHandle->bResetPLLTh = (uint8_t)((RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz) / 1000U);
 800cf9a:	fba1 1303 	umull	r1, r3, r1, r3
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 800cf9e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800cfa2:	2100      	movs	r1, #0
      pHandle->bResetPLLTh = (uint8_t)((RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz) / 1000U);
 800cfa4:	099b      	lsrs	r3, r3, #6
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 800cfa6:	6151      	str	r1, [r2, #20]
      pHandle->bPhaseNbr = bPhase;
 800cfa8:	f880 c048 	strb.w	ip, [r0, #72]	; 0x48
      pHandle->bResetPLLTh = (uint8_t)((RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz) / 1000U);
 800cfac:	f880 3056 	strb.w	r3, [r0, #86]	; 0x56
    }
#ifdef NULL_PTR_CHECK_REV_UP_CTL
  }
#endif
}
 800cfb0:	f85d fb04 	ldr.w	pc, [sp], #4
      bPhase++;
 800cfb4:	f04f 0c01 	mov.w	ip, #1
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 800cfb8:	f10c 32ff 	add.w	r2, ip, #4294967295
 800cfbc:	e7e5      	b.n	800cf8a <RUC_Init+0x32>
      bPhase++;
 800cfbe:	f04f 0c02 	mov.w	ip, #2
 800cfc2:	e7f9      	b.n	800cfb8 <RUC_Init+0x60>
 800cfc4:	f04f 0c03 	mov.w	ip, #3
 800cfc8:	e7f6      	b.n	800cfb8 <RUC_Init+0x60>
 800cfca:	f04f 0c04 	mov.w	ip, #4
 800cfce:	e7f3      	b.n	800cfb8 <RUC_Init+0x60>
 800cfd0:	10624dd3 	.word	0x10624dd3

0800cfd4 <RUC_Clear>:
  * @param  pHandle: Pointer on Handle structure of RevUp controller.
  * @param  hMotorDirection: Rotor rotation direction.
  *         This parameter must be -1 or +1.
  */
__weak void RUC_Clear(RevUpCtrl_Handle_t *pHandle, int16_t hMotorDirection)
{
 800cfd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    VirtualSpeedSensor_Handle_t *pVSS = pHandle->pVSS;
 800cfd8:	6ec7      	ldr	r7, [r0, #108]	; 0x6c
    SpeednTorqCtrl_Handle_t *pSTC = pHandle->pSTC;
 800cfda:	f8d0 8068 	ldr.w	r8, [r0, #104]	; 0x68
    RevUpCtrl_PhaseParams_t *pPhaseParams = pHandle->ParamsData;

    pHandle->hDirection = hMotorDirection;
 800cfde:	80c1      	strh	r1, [r0, #6]
    pHandle->EnteredZone1 = false;

    /* Initializes the rev up stages counter */
    pHandle->bStageCnt = 0U;
 800cfe0:	2600      	movs	r6, #0
{
 800cfe2:	4604      	mov	r4, r0
    pHandle->bStageCnt = 0U;
 800cfe4:	f880 6058 	strb.w	r6, [r0, #88]	; 0x58
    pHandle->bOTFRelCounter = 0U;
 800cfe8:	f880 6053 	strb.w	r6, [r0, #83]	; 0x53
    pHandle->OTFSCLowside = false;
 800cfec:	f8a0 6054 	strh.w	r6, [r0, #84]	; 0x54

    /* Calls the clear method of VSS */
    VSS_Clear(pVSS);
 800cff0:	4638      	mov	r0, r7

    /* Sets the STC in torque mode */
    STC_SetControlMode(pSTC, MCM_TORQUE_MODE);

    /* Sets the mechanical starting angle of VSS */
    VSS_SetMecAngle(pVSS, pHandle->hStartingMecAngle * hMotorDirection);
 800cff2:	b28d      	uxth	r5, r1
    VSS_Clear(pVSS);
 800cff4:	f000 fcca 	bl	800d98c <VSS_Clear>
    STC_SetControlMode(pSTC, MCM_TORQUE_MODE);
 800cff8:	2104      	movs	r1, #4
 800cffa:	4640      	mov	r0, r8
 800cffc:	f000 f92a 	bl	800d254 <STC_SetControlMode>
    VSS_SetMecAngle(pVSS, pHandle->hStartingMecAngle * hMotorDirection);
 800d000:	8861      	ldrh	r1, [r4, #2]
 800d002:	fb11 f105 	smulbb	r1, r1, r5
 800d006:	b209      	sxth	r1, r1
 800d008:	4638      	mov	r0, r7
 800d00a:	f000 fd75 	bl	800daf8 <VSS_SetMecAngle>

    /* Sets to zero the starting torque of STC */
    (void)STC_ExecRamp(pSTC, 0, 0U);
 800d00e:	4632      	mov	r2, r6
 800d010:	4631      	mov	r1, r6
 800d012:	4640      	mov	r0, r8
 800d014:	f000 f922 	bl	800d25c <STC_ExecRamp>

    /* Gives the first command to STC and VSS */
    (void)STC_ExecRamp(pSTC, pPhaseParams->hFinalTorque * hMotorDirection, (uint32_t)(pPhaseParams->hDurationms));
 800d018:	8a21      	ldrh	r1, [r4, #16]
 800d01a:	89a2      	ldrh	r2, [r4, #12]
 800d01c:	fb11 f105 	smulbb	r1, r1, r5
 800d020:	b209      	sxth	r1, r1
 800d022:	4640      	mov	r0, r8
 800d024:	f000 f91a 	bl	800d25c <STC_ExecRamp>

    VSS_SetMecAcceleration(pVSS, pPhaseParams->hFinalMecSpeedUnit * hMotorDirection, pPhaseParams->hDurationms);
 800d028:	89e1      	ldrh	r1, [r4, #14]
 800d02a:	89a2      	ldrh	r2, [r4, #12]
 800d02c:	fb11 f105 	smulbb	r1, r1, r5
 800d030:	b209      	sxth	r1, r1
 800d032:	4638      	mov	r0, r7
 800d034:	f000 fd68 	bl	800db08 <VSS_SetMecAcceleration>

    /* Compute hPhaseRemainingTicks */
    pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pPhaseParams->hDurationms)
 800d038:	89a3      	ldrh	r3, [r4, #12]
                                              * ((uint32_t)pHandle->hRUCFrequencyHz))
 800d03a:	8821      	ldrh	r1, [r4, #0]
                                              / 1000U );
 800d03c:	4a06      	ldr	r2, [pc, #24]	; (800d058 <RUC_Clear+0x84>)

    /* Set the next phases parameter pointer */
    pHandle->pCurrentPhaseParams = (RevUpCtrl_PhaseParams_t *)pPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5

    /* Timeout counter for PLL reset during OTF */
    pHandle->bResetPLLCnt = 0U;
 800d03e:	f884 6057 	strb.w	r6, [r4, #87]	; 0x57
                                              * ((uint32_t)pHandle->hRUCFrequencyHz))
 800d042:	fb01 f303 	mul.w	r3, r1, r3
                                              / 1000U );
 800d046:	fba2 2303 	umull	r2, r3, r2, r3
 800d04a:	099b      	lsrs	r3, r3, #6
    pHandle->pCurrentPhaseParams = (RevUpCtrl_PhaseParams_t *)pPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 800d04c:	6962      	ldr	r2, [r4, #20]
 800d04e:	60a2      	str	r2, [r4, #8]
    pHandle->hPhaseRemainingTicks++;
 800d050:	3301      	adds	r3, #1
 800d052:	80a3      	strh	r3, [r4, #4]
#ifdef NULL_PTR_CHECK_REV_UP_CTL
  }
#endif
}
 800d054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d058:	10624dd3 	.word	0x10624dd3

0800d05c <RUC_Exec>:
    retVal = false;
  }
  else
  {
#endif
    if (pHandle->hPhaseRemainingTicks > 0U)
 800d05c:	8883      	ldrh	r3, [r0, #4]
{
 800d05e:	b510      	push	{r4, lr}
 800d060:	4604      	mov	r4, r0
    if (pHandle->hPhaseRemainingTicks > 0U)
 800d062:	bb43      	cbnz	r3, 800d0b6 <RUC_Exec+0x5a>
      /* Nothing to do */
    }

    if (0U == pHandle->hPhaseRemainingTicks)
    {
      if (pHandle->pCurrentPhaseParams != MC_NULL)
 800d064:	68a0      	ldr	r0, [r4, #8]
 800d066:	b328      	cbz	r0, 800d0b4 <RUC_Exec+0x58>
      {
        /* If it becomes zero the current phase has been completed */
        /* Gives the next command to STC and VSS */
        (void)STC_ExecRamp(pHandle->pSTC, pHandle->pCurrentPhaseParams->hFinalTorque * pHandle->hDirection,
 800d068:	8881      	ldrh	r1, [r0, #4]
 800d06a:	88e3      	ldrh	r3, [r4, #6]
 800d06c:	8802      	ldrh	r2, [r0, #0]
 800d06e:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800d070:	fb11 f103 	smulbb	r1, r1, r3
 800d074:	b209      	sxth	r1, r1
 800d076:	f000 f8f1 	bl	800d25c <STC_ExecRamp>
                           (uint32_t)(pHandle->pCurrentPhaseParams->hDurationms));

        VSS_SetMecAcceleration(pHandle->pVSS,
                               pHandle->pCurrentPhaseParams->hFinalMecSpeedUnit * pHandle->hDirection,
 800d07a:	68a3      	ldr	r3, [r4, #8]
 800d07c:	88e0      	ldrh	r0, [r4, #6]
 800d07e:	8859      	ldrh	r1, [r3, #2]
        VSS_SetMecAcceleration(pHandle->pVSS,
 800d080:	881a      	ldrh	r2, [r3, #0]
                               pHandle->pCurrentPhaseParams->hFinalMecSpeedUnit * pHandle->hDirection,
 800d082:	fb11 f100 	smulbb	r1, r1, r0
        VSS_SetMecAcceleration(pHandle->pVSS,
 800d086:	b209      	sxth	r1, r1
 800d088:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800d08a:	f000 fd3d 	bl	800db08 <VSS_SetMecAcceleration>
                               pHandle->pCurrentPhaseParams->hDurationms);

        /* Compute hPhaseRemainingTicks */
        pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pHandle->pCurrentPhaseParams->hDurationms)
 800d08e:	68a1      	ldr	r1, [r4, #8]
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 800d090:	8820      	ldrh	r0, [r4, #0]
        pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pHandle->pCurrentPhaseParams->hDurationms)
 800d092:	880b      	ldrh	r3, [r1, #0]
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 800d094:	4a0b      	ldr	r2, [pc, #44]	; (800d0c4 <RUC_Exec+0x68>)
        pHandle->hPhaseRemainingTicks++;

        /* Set the next phases parameter pointer */
        pHandle->pCurrentPhaseParams = pHandle->pCurrentPhaseParams->pNext; //cstat !MISRAC2012-Rule-11.5
 800d096:	6889      	ldr	r1, [r1, #8]
 800d098:	60a1      	str	r1, [r4, #8]
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 800d09a:	fb00 f303 	mul.w	r3, r0, r3
 800d09e:	fba2 2303 	umull	r2, r3, r2, r3

        /* Increases the rev up stages counter */
        pHandle->bStageCnt++;
 800d0a2:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 800d0a6:	099b      	lsrs	r3, r3, #6
        pHandle->hPhaseRemainingTicks++;
 800d0a8:	3301      	adds	r3, #1
        pHandle->bStageCnt++;
 800d0aa:	3201      	adds	r2, #1
        pHandle->hPhaseRemainingTicks++;
 800d0ac:	80a3      	strh	r3, [r4, #4]
        pHandle->bStageCnt++;
 800d0ae:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
  bool retVal = true;
 800d0b2:	2001      	movs	r0, #1
    }
#ifdef NULL_PTR_CHECK_REV_UP_CTL
  }
#endif
  return (retVal);
}
 800d0b4:	bd10      	pop	{r4, pc}
      pHandle->hPhaseRemainingTicks--;
 800d0b6:	3b01      	subs	r3, #1
 800d0b8:	b29b      	uxth	r3, r3
 800d0ba:	8083      	strh	r3, [r0, #4]
    if (0U == pHandle->hPhaseRemainingTicks)
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d0d1      	beq.n	800d064 <RUC_Exec+0x8>
  bool retVal = true;
 800d0c0:	2001      	movs	r0, #1
}
 800d0c2:	bd10      	pop	{r4, pc}
 800d0c4:	10624dd3 	.word	0x10624dd3

0800d0c8 <RUC_Completed>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (MC_NULL == pHandle->pCurrentPhaseParams)
 800d0c8:	6880      	ldr	r0, [r0, #8]
    }
#ifdef NULL_PTR_CHECK_REV_UP_CTL
  }
#endif
  return (retVal);
}
 800d0ca:	fab0 f080 	clz	r0, r0
 800d0ce:	0940      	lsrs	r0, r0, #5
 800d0d0:	4770      	bx	lr
 800d0d2:	bf00      	nop

0800d0d4 <RUC_Stop>:
/**
  * @brief  Allow to exit from Rev-Up process at the current rotor speed.
  * @param  pHandle: Pointer on Handle structure of RevUp controller.
  */
__weak void RUC_Stop(RevUpCtrl_Handle_t *pHandle)
{
 800d0d4:	b538      	push	{r3, r4, r5, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    VirtualSpeedSensor_Handle_t *pVSS = pHandle->pVSS;
 800d0d6:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
    pHandle->pCurrentPhaseParams = MC_NULL;
 800d0d8:	2400      	movs	r4, #0
 800d0da:	6084      	str	r4, [r0, #8]
    pHandle->hPhaseRemainingTicks = 0U;
 800d0dc:	8084      	strh	r4, [r0, #4]
    VSS_SetMecAcceleration(pVSS, SPD_GetAvrgMecSpeedUnit(&pVSS->_Super), 0U);
 800d0de:	4628      	mov	r0, r5
 800d0e0:	f000 f84a 	bl	800d178 <SPD_GetAvrgMecSpeedUnit>
 800d0e4:	4622      	mov	r2, r4
 800d0e6:	4601      	mov	r1, r0
 800d0e8:	4628      	mov	r0, r5
#ifdef NULL_PTR_CHECK_REV_UP_CTL
  }
#endif
}
 800d0ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    VSS_SetMecAcceleration(pVSS, SPD_GetAvrgMecSpeedUnit(&pVSS->_Super), 0U);
 800d0ee:	f000 bd0b 	b.w	800db08 <VSS_SetMecAcceleration>
 800d0f2:	bf00      	nop

0800d0f4 <RUC_FirstAccelerationStageReached>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (pHandle->bStageCnt >= pHandle->bFirstAccelerationStage)
 800d0f4:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
 800d0f8:	f890 0049 	ldrb.w	r0, [r0, #73]	; 0x49
    }
#ifdef NULL_PTR_CHECK_REV_UP_CTL
  }
#endif
  return (retVal);
}
 800d0fc:	4282      	cmp	r2, r0
 800d0fe:	bf34      	ite	cc
 800d100:	2000      	movcc	r0, #0
 800d102:	2001      	movcs	r0, #1
 800d104:	4770      	bx	lr
 800d106:	bf00      	nop

0800d108 <RUC_SetPhaseDurationms>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->ParamsData[bPhase].hDurationms = hDurationms;
 800d108:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800d10c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800d110:	8182      	strh	r2, [r0, #12]
#ifdef NULL_PTR_CHECK_REV_UP_CTL
  }
#endif
}
 800d112:	4770      	bx	lr

0800d114 <RUC_SetPhaseFinalMecSpeedUnit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->ParamsData[bPhase].hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800d114:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800d118:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800d11c:	81c2      	strh	r2, [r0, #14]
#ifdef NULL_PTR_CHECK_REV_UP_CTL
  }
#endif
}
 800d11e:	4770      	bx	lr

0800d120 <RUC_SetPhaseFinalTorque>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->ParamsData[bPhase].hFinalTorque = hFinalTorque;
 800d120:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800d124:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800d128:	8202      	strh	r2, [r0, #16]
#ifdef NULL_PTR_CHECK_REV_UP_CTL
  }
#endif
}
 800d12a:	4770      	bx	lr

0800d12c <RUC_SetPhase>:
  }
  else
  {
#endif
    pHandle->ParamsData[phaseNumber].hFinalTorque = phaseData->hFinalTorque;
    pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit = phaseData->hFinalMecSpeedUnit;
 800d12c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800d130:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800d134:	f8d2 c002 	ldr.w	ip, [r2, #2]
 800d138:	f8c3 c00e 	str.w	ip, [r3, #14]
    pHandle->ParamsData[phaseNumber].hDurationms = phaseData->hDurationms;
 800d13c:	4618      	mov	r0, r3
 800d13e:	8813      	ldrh	r3, [r2, #0]
 800d140:	8183      	strh	r3, [r0, #12]
#ifdef NULL_PTR_CHECK_REV_UP_CTL
  }
#endif
  return (retValue);
}
 800d142:	2001      	movs	r0, #1
 800d144:	4770      	bx	lr
 800d146:	bf00      	nop

0800d148 <RUC_GetNumberOfPhases>:
#ifdef NULL_PTR_CHECK_REV_UP_CTL
  return ((MC_NULL == pHandle) ? 0U : (uint8_t)pHandle->bPhaseNbr);
#else
  return ((uint8_t)pHandle->bPhaseNbr);
#endif
}
 800d148:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 800d14c:	4770      	bx	lr
 800d14e:	bf00      	nop

0800d150 <RUC_GetPhase>:
  }
  else
  {
#endif
    phaseData->hFinalTorque = (int16_t)pHandle->ParamsData[phaseNumber].hFinalTorque;
    phaseData->hFinalMecSpeedUnit = (int16_t)pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit;
 800d150:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800d154:	0089      	lsls	r1, r1, #2
 800d156:	f101 0308 	add.w	r3, r1, #8
 800d15a:	4403      	add	r3, r0
    phaseData->hDurationms = (uint16_t)pHandle->ParamsData[phaseNumber].hDurationms;
 800d15c:	4408      	add	r0, r1
    phaseData->hFinalMecSpeedUnit = (int16_t)pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit;
 800d15e:	f8d3 3006 	ldr.w	r3, [r3, #6]
 800d162:	f8c2 3002 	str.w	r3, [r2, #2]
    phaseData->hDurationms = (uint16_t)pHandle->ParamsData[phaseNumber].hDurationms;
 800d166:	8983      	ldrh	r3, [r0, #12]
 800d168:	8013      	strh	r3, [r2, #0]
#ifdef NULL_PTR_CHECK_REV_UP_CTL
  }
#endif
  return (retValue);
}
 800d16a:	2001      	movs	r0, #1
 800d16c:	4770      	bx	lr
 800d16e:	bf00      	nop

0800d170 <SPD_GetElAngle>:
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hElAngle);
#else
  return (pHandle->hElAngle);
#endif
}
 800d170:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 800d174:	4770      	bx	lr
 800d176:	bf00      	nop

0800d178 <SPD_GetAvrgMecSpeedUnit>:
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hAvrMecSpeedUnit);
#else
  return (pHandle->hAvrMecSpeedUnit);
#endif
}
 800d178:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 800d17c:	4770      	bx	lr
 800d17e:	bf00      	nop

0800d180 <SPD_GetElSpeedDpp>:
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hElSpeedDpp);
#else
  return (pHandle->hElSpeedDpp);
#endif
}
 800d180:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
 800d184:	4770      	bx	lr
 800d186:	bf00      	nop

0800d188 <SPD_IsMecSpeedReliable>:
    bool SpeedError = false;

    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

    /* Compute absoulte value of mechanical speed */
    if (*pMecSpeedUnit < 0)
 800d188:	f9b1 3000 	ldrsh.w	r3, [r1]
    else
    {
      /* Nothing to do */
    }

    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 800d18c:	f8b0 c016 	ldrh.w	ip, [r0, #22]
{
 800d190:	b410      	push	{r4}
    if (*pMecSpeedUnit < 0)
 800d192:	2b00      	cmp	r3, #0
      hAux = -(*pMecSpeedUnit);
 800d194:	bfb8      	it	lt
 800d196:	425b      	neglt	r3, r3
      hAbsMecSpeedUnit = (uint16_t)(*pMecSpeedUnit);
 800d198:	b29b      	uxth	r3, r3
    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 800d19a:	459c      	cmp	ip, r3
    uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 800d19c:	78c1      	ldrb	r1, [r0, #3]
    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 800d19e:	7802      	ldrb	r2, [r0, #0]
    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
 800d1a0:	8a84      	ldrh	r4, [r0, #20]
    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 800d1a2:	d819      	bhi.n	800d1d8 <SPD_IsMecSpeedReliable+0x50>
    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
 800d1a4:	429c      	cmp	r4, r3
 800d1a6:	bf2c      	ite	cs
 800d1a8:	2400      	movcs	r4, #0
 800d1aa:	2401      	movcc	r4, #1
    {
      /* Nothing to do */
    }

    /* Compute absoulte value of mechanical acceleration */
    if (pHandle->hMecAccelUnitP < 0)
 800d1ac:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
    else
    {
      hAbsMecAccelUnitP = (uint16_t)pHandle->hMecAccelUnitP;
    }

    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 800d1b0:	f8b0 c018 	ldrh.w	ip, [r0, #24]
    if (pHandle->hMecAccelUnitP < 0)
 800d1b4:	2b00      	cmp	r3, #0
      hAux = -(pHandle->hMecAccelUnitP);
 800d1b6:	bfb8      	it	lt
 800d1b8:	425b      	neglt	r3, r3
      hAbsMecAccelUnitP = (uint16_t)pHandle->hMecAccelUnitP;
 800d1ba:	b29b      	uxth	r3, r3
    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 800d1bc:	459c      	cmp	ip, r3
 800d1be:	d300      	bcc.n	800d1c2 <SPD_IsMecSpeedReliable+0x3a>
    else
    {
      /* Nothing to do */
    }

    if (true == SpeedError)
 800d1c0:	b164      	cbz	r4, 800d1dc <SPD_IsMecSpeedReliable+0x54>
    {
      if (bSpeedErrorNumber < bMaximumSpeedErrorsNumber)
 800d1c2:	4291      	cmp	r1, r2
 800d1c4:	d901      	bls.n	800d1ca <SPD_IsMecSpeedReliable+0x42>
      {
        bSpeedErrorNumber++;
 800d1c6:	3201      	adds	r2, #1
 800d1c8:	b2d2      	uxtb	r2, r2
    else
    {
      /* Nothing to do */
    }

    pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 800d1ca:	7002      	strb	r2, [r0, #0]
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  }
#endif
  return (SpeedSensorReliability);
}
 800d1cc:	1a50      	subs	r0, r2, r1
 800d1ce:	bf18      	it	ne
 800d1d0:	2001      	movne	r0, #1
 800d1d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d1d6:	4770      	bx	lr
      SpeedError = true;
 800d1d8:	2401      	movs	r4, #1
 800d1da:	e7e7      	b.n	800d1ac <SPD_IsMecSpeedReliable+0x24>
        bSpeedErrorNumber = 0u;
 800d1dc:	4291      	cmp	r1, r2
 800d1de:	bf88      	it	hi
 800d1e0:	2200      	movhi	r2, #0
 800d1e2:	e7f2      	b.n	800d1ca <SPD_IsMecSpeedReliable+0x42>

0800d1e4 <SPD_GetS16Speed>:
  }
  else
  {
#endif
    int32_t wAux = (int32_t)pHandle->hAvrMecSpeedUnit;
    wAux *= INT16_MAX;
 800d1e4:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
    wAux /= (int16_t)pHandle->hMaxReliableMecSpeedUnit;
 800d1e8:	f9b0 2014 	ldrsh.w	r2, [r0, #20]
    wAux *= INT16_MAX;
 800d1ec:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
    wAux /= (int16_t)pHandle->hMaxReliableMecSpeedUnit;
 800d1f0:	fb93 f0f2 	sdiv	r0, r3, r2
    tempValue = (int16_t)wAux;
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  }
#endif
  return (tempValue);
}
 800d1f4:	b200      	sxth	r0, r0
 800d1f6:	4770      	bx	lr

0800d1f8 <SPD_GetElToMecRatio>:
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0U : pHandle->bElToMecRatio);
#else
  return (pHandle->bElToMecRatio);
#endif
}
 800d1f8:	7840      	ldrb	r0, [r0, #1]
 800d1fa:	4770      	bx	lr

0800d1fc <SPD_SetElToMecRatio>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->bElToMecRatio = bPP;
 800d1fc:	7041      	strb	r1, [r0, #1]
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  }
#endif
}
 800d1fe:	4770      	bx	lr

0800d200 <STC_Init>:
  {
#endif
    pHandle->PISpeed = pPI;
    pHandle->SPD = SPD_Handle;
    pHandle->Mode = pHandle->ModeDefault;
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 800d200:	f9b0 c02c 	ldrsh.w	ip, [r0, #44]	; 0x2c
    pHandle->PISpeed = pPI;
 800d204:	6101      	str	r1, [r0, #16]
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 800d206:	f9b0 102e 	ldrsh.w	r1, [r0, #46]	; 0x2e
    pHandle->SPD = SPD_Handle;
 800d20a:	6142      	str	r2, [r0, #20]
{
 800d20c:	b410      	push	{r4}
    pHandle->Mode = pHandle->ModeDefault;
 800d20e:	f890 402a 	ldrb.w	r4, [r0, #42]	; 0x2a
 800d212:	7004      	strb	r4, [r0, #0]
    pHandle->TargetFinal = 0;
 800d214:	2300      	movs	r3, #0
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 800d216:	ea4f 440c 	mov.w	r4, ip, lsl #16
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 800d21a:	0409      	lsls	r1, r1, #16
 800d21c:	e9c0 4101 	strd	r4, r1, [r0, #4]
    pHandle->TargetFinal = 0;
 800d220:	8043      	strh	r3, [r0, #2]
    pHandle->RampRemainingStep = 0U;
    pHandle->IncDecAmount = 0;
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 800d222:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->RampRemainingStep = 0U;
 800d226:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 800d228:	6183      	str	r3, [r0, #24]
}
 800d22a:	4770      	bx	lr

0800d22c <STC_SetSpeedSensor>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SPD = SPD_Handle;
 800d22c:	6141      	str	r1, [r0, #20]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 800d22e:	4770      	bx	lr

0800d230 <STC_GetSpeedSensor>:
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  return ((MC_NULL ==  pHandle) ? MC_NULL : pHandle->SPD);
#else
  return (pHandle->SPD);
#endif
}
 800d230:	6940      	ldr	r0, [r0, #20]
 800d232:	4770      	bx	lr

0800d234 <STC_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (MCM_SPEED_MODE == pHandle->Mode)
 800d234:	7803      	ldrb	r3, [r0, #0]
 800d236:	2b03      	cmp	r3, #3
 800d238:	d000      	beq.n	800d23c <STC_Clear+0x8>
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 800d23a:	4770      	bx	lr
      PID_SetIntegralTerm(pHandle->PISpeed, 0);
 800d23c:	6900      	ldr	r0, [r0, #16]
 800d23e:	2100      	movs	r1, #0
 800d240:	f7fe bd4c 	b.w	800bcdc <PID_SetIntegralTerm>

0800d244 <STC_GetMecSpeedRefUnit>:
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->SpeedRefUnitExt / 65536));
#else
  return ((int16_t)(pHandle->SpeedRefUnitExt / 65536));
#endif
#endif
}
 800d244:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800d248:	4770      	bx	lr
 800d24a:	bf00      	nop

0800d24c <STC_GetTorqueRef>:
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->TorqueRef / 65536));
#else
  return ((int16_t)(pHandle->TorqueRef / 65536));
#endif
#endif
}
 800d24c:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
 800d250:	4770      	bx	lr
 800d252:	bf00      	nop

0800d254 <STC_SetControlMode>:
  }
  else
  {
#endif
    pHandle->Mode = bMode;
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp */
 800d254:	2300      	movs	r3, #0
    pHandle->Mode = bMode;
 800d256:	7001      	strb	r1, [r0, #0]
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp */
 800d258:	60c3      	str	r3, [r0, #12]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 800d25a:	4770      	bx	lr

0800d25c <STC_ExecRamp>:
  * @ref EncAlignCtrl "Encoder Alignment Control",
  * @ref PositionControl "Position Control" loop or
  * speed regulation with @ref SpeedRegulatorPotentiometer Speed potentiometer.
  */
__weak bool STC_ExecRamp(SpeednTorqCtrl_Handle_t *pHandle, int16_t hTargetFinal, uint32_t hDurationms)
{
 800d25c:	b570      	push	{r4, r5, r6, lr}
    uint32_t wAux;
    int32_t wAux1;
    int16_t hCurrentReference;

    /* Check if the hTargetFinal is out of the bound of application */
    if (MCM_TORQUE_MODE == pHandle->Mode)
 800d25e:	7803      	ldrb	r3, [r0, #0]
 800d260:	2b04      	cmp	r3, #4
{
 800d262:	4604      	mov	r4, r0
 800d264:	460d      	mov	r5, r1
 800d266:	4616      	mov	r6, r2
    if (MCM_TORQUE_MODE == pHandle->Mode)
 800d268:	d01e      	beq.n	800d2a8 <STC_ExecRamp+0x4c>
#else
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt / 65536);
#endif

#ifdef CHECK_BOUNDARY
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxAppPositiveMecSpeedUnit)
 800d26a:	8bc3      	ldrh	r3, [r0, #30]
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt >> 16);
 800d26c:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxAppPositiveMecSpeedUnit)
 800d270:	4299      	cmp	r1, r3
 800d272:	dd01      	ble.n	800d278 <STC_ExecRamp+0x1c>
        allowedRange = false;
 800d274:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (allowedRange);
}
 800d276:	bd70      	pop	{r4, r5, r6, pc}
      else if (hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit)
 800d278:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	; 0x24
 800d27c:	428b      	cmp	r3, r1
 800d27e:	dcf9      	bgt.n	800d274 <STC_ExecRamp+0x18>
      else if ((int32_t)hTargetFinal < (int32_t)pHandle->MinAppPositiveMecSpeedUnit)
 800d280:	8c23      	ldrh	r3, [r4, #32]
 800d282:	4299      	cmp	r1, r3
 800d284:	da03      	bge.n	800d28e <STC_ExecRamp+0x32>
        if (hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit)
 800d286:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
 800d28a:	428b      	cmp	r3, r1
 800d28c:	dbf2      	blt.n	800d274 <STC_ExecRamp+0x18>
      if (0U == hDurationms)
 800d28e:	b9ae      	cbnz	r6, 800d2bc <STC_ExecRamp+0x60>
        if (MCM_SPEED_MODE == pHandle->Mode)
 800d290:	7823      	ldrb	r3, [r4, #0]
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 800d292:	042d      	lsls	r5, r5, #16
        if (MCM_SPEED_MODE == pHandle->Mode)
 800d294:	2b03      	cmp	r3, #3
        pHandle->RampRemainingStep = 0U;
 800d296:	f04f 0300 	mov.w	r3, #0
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 800d29a:	bf0c      	ite	eq
 800d29c:	6065      	streq	r5, [r4, #4]
          pHandle->TorqueRef = ((int32_t)hTargetFinal) * 65536;
 800d29e:	60a5      	strne	r5, [r4, #8]
        pHandle->RampRemainingStep = 0U;
 800d2a0:	60e3      	str	r3, [r4, #12]
        pHandle->IncDecAmount = 0;
 800d2a2:	61a3      	str	r3, [r4, #24]
 800d2a4:	2001      	movs	r0, #1
}
 800d2a6:	bd70      	pop	{r4, r5, r6, pc}
      hCurrentReference = STC_GetTorqueRef(pHandle);
 800d2a8:	f7ff ffd0 	bl	800d24c <STC_GetTorqueRef>
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxPositiveTorque)
 800d2ac:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800d2ae:	429d      	cmp	r5, r3
 800d2b0:	dce0      	bgt.n	800d274 <STC_ExecRamp+0x18>
      if ((int32_t)hTargetFinal < (int32_t)pHandle->MinNegativeTorque)
 800d2b2:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 800d2b6:	42ab      	cmp	r3, r5
 800d2b8:	dcdc      	bgt.n	800d274 <STC_ExecRamp+0x18>
 800d2ba:	e7e8      	b.n	800d28e <STC_ExecRamp+0x32>
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 800d2bc:	8ba3      	ldrh	r3, [r4, #28]
        wAux /= 1000U;
 800d2be:	4a08      	ldr	r2, [pc, #32]	; (800d2e0 <STC_ExecRamp+0x84>)
        pHandle->TargetFinal = hTargetFinal;
 800d2c0:	8065      	strh	r5, [r4, #2]
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 800d2c2:	fb06 f303 	mul.w	r3, r6, r3
        wAux /= 1000U;
 800d2c6:	fba2 2303 	umull	r2, r3, r2, r3
 800d2ca:	099b      	lsrs	r3, r3, #6
        pHandle->RampRemainingStep++;
 800d2cc:	3301      	adds	r3, #1
        wAux1 = (((int32_t)hTargetFinal) - ((int32_t)hCurrentReference)) * 65536;
 800d2ce:	1a28      	subs	r0, r5, r0
 800d2d0:	0400      	lsls	r0, r0, #16
        pHandle->RampRemainingStep++;
 800d2d2:	60e3      	str	r3, [r4, #12]
        wAux1 /= ((int32_t)pHandle->RampRemainingStep);
 800d2d4:	fb90 f0f3 	sdiv	r0, r0, r3
        pHandle->IncDecAmount = wAux1;
 800d2d8:	61a0      	str	r0, [r4, #24]
 800d2da:	2001      	movs	r0, #1
}
 800d2dc:	bd70      	pop	{r4, r5, r6, pc}
 800d2de:	bf00      	nop
 800d2e0:	10624dd3 	.word	0x10624dd3

0800d2e4 <STC_StopRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->RampRemainingStep = 0U;
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 800d2e8:	6183      	str	r3, [r0, #24]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 800d2ea:	4770      	bx	lr

0800d2ec <STC_CalcTorqueReference>:
  * - Must be called at fixed time equal to hSTCFrequencyHz. It is called
  * passing as parameter the speed sensor used to perform the speed regulation.
  * - Called during START and ALIGNEMENT states of the MC state machine into MediumFrequencyTask.
  */
__weak int16_t STC_CalcTorqueReference(SpeednTorqCtrl_Handle_t *pHandle)
{
 800d2ec:	b538      	push	{r3, r4, r5, lr}
    int16_t hTargetSpeed;
    int16_t hError;

    if (MCM_TORQUE_MODE == pHandle->Mode)
    {
      wCurrentReference = pHandle->TorqueRef;
 800d2ee:	e9d0 5101 	ldrd	r5, r1, [r0, #4]
    if (MCM_TORQUE_MODE == pHandle->Mode)
 800d2f2:	7802      	ldrb	r2, [r0, #0]
      wCurrentReference = pHandle->SpeedRefUnitExt;
    }

    /* Update the speed reference or the torque reference according to the mode
       and terminates the ramp if needed */
    if (pHandle->RampRemainingStep > 1U)
 800d2f4:	68c3      	ldr	r3, [r0, #12]
      wCurrentReference = pHandle->TorqueRef;
 800d2f6:	2a04      	cmp	r2, #4
 800d2f8:	bf08      	it	eq
 800d2fa:	460d      	moveq	r5, r1
    if (pHandle->RampRemainingStep > 1U)
 800d2fc:	2b01      	cmp	r3, #1
{
 800d2fe:	4604      	mov	r4, r0
    if (pHandle->RampRemainingStep > 1U)
 800d300:	d908      	bls.n	800d314 <STC_CalcTorqueReference+0x28>
    {
      /* Increment/decrement the reference value */
      wCurrentReference += pHandle->IncDecAmount;
 800d302:	6981      	ldr	r1, [r0, #24]

      /* Decrement the number of remaining steps */
      pHandle->RampRemainingStep--;
 800d304:	3b01      	subs	r3, #1
      wCurrentReference += pHandle->IncDecAmount;
 800d306:	440d      	add	r5, r1
      pHandle->RampRemainingStep--;
 800d308:	60c3      	str	r3, [r0, #12]
    else
    {
      /* Do nothing */
    }

    if (MCM_SPEED_MODE == pHandle->Mode)
 800d30a:	2a03      	cmp	r2, #3
 800d30c:	d00b      	beq.n	800d326 <STC_CalcTorqueReference+0x3a>
    else
    {
      pHandle->TorqueRef = wCurrentReference;
#ifndef FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hTorqueReference = (int16_t)(wCurrentReference >> 16);
 800d30e:	1428      	asrs	r0, r5, #16
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
 800d310:	60a5      	str	r5, [r4, #8]
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (hTorqueReference);
}
 800d312:	bd38      	pop	{r3, r4, r5, pc}
    else if (1U == pHandle->RampRemainingStep)
 800d314:	d1f9      	bne.n	800d30a <STC_CalcTorqueReference+0x1e>
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 800d316:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
      pHandle->RampRemainingStep = 0U;
 800d31a:	2300      	movs	r3, #0
    if (MCM_SPEED_MODE == pHandle->Mode)
 800d31c:	2a03      	cmp	r2, #3
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 800d31e:	ea4f 4505 	mov.w	r5, r5, lsl #16
      pHandle->RampRemainingStep = 0U;
 800d322:	60c3      	str	r3, [r0, #12]
    if (MCM_SPEED_MODE == pHandle->Mode)
 800d324:	d1f3      	bne.n	800d30e <STC_CalcTorqueReference+0x22>
      hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit(pHandle->SPD);
 800d326:	6960      	ldr	r0, [r4, #20]
 800d328:	f7ff ff26 	bl	800d178 <SPD_GetAvrgMecSpeedUnit>
      hError = hTargetSpeed - hMeasuredSpeed;
 800d32c:	ebc0 4125 	rsb	r1, r0, r5, asr #16
      hTorqueReference = PI_Controller(pHandle->PISpeed, (int32_t)hError);
 800d330:	b209      	sxth	r1, r1
 800d332:	6920      	ldr	r0, [r4, #16]
 800d334:	f7fe fd0a 	bl	800bd4c <PI_Controller>
      pHandle->SpeedRefUnitExt = wCurrentReference;
 800d338:	6065      	str	r5, [r4, #4]
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
 800d33a:	0405      	lsls	r5, r0, #16
 800d33c:	60a5      	str	r5, [r4, #8]
}
 800d33e:	bd38      	pop	{r3, r4, r5, pc}

0800d340 <STC_GetMecSpeedRefUnitDefault>:
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  return ((MC_NULL == pHandle) ? 0 : pHandle->MecSpeedRefUnitDefault);
#else
  return (pHandle->MecSpeedRefUnitDefault);
#endif
}
 800d340:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
 800d344:	4770      	bx	lr
 800d346:	bf00      	nop

0800d348 <STC_RampCompleted>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (0U == pHandle->RampRemainingStep)
 800d348:	68c0      	ldr	r0, [r0, #12]
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (retVal);
}
 800d34a:	fab0 f080 	clz	r0, r0
 800d34e:	0940      	lsrs	r0, r0, #5
 800d350:	4770      	bx	lr
 800d352:	bf00      	nop

0800d354 <STC_GetDefaultIqdref>:
    IqdRefDefault.d = 0;
  }
  else
  {
#endif
    IqdRefDefault.q = pHandle->TorqueRefDefault;
 800d354:	f8d0 302e 	ldr.w	r3, [r0, #46]	; 0x2e
    IqdRefDefault.d = pHandle->IdrefDefault;
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (IqdRefDefault);
 800d358:	2200      	movs	r2, #0
 800d35a:	b299      	uxth	r1, r3
 800d35c:	f361 020f 	bfi	r2, r1, #0, #16
 800d360:	0c1b      	lsrs	r3, r3, #16
 800d362:	f363 421f 	bfi	r2, r3, #16, #16
{
 800d366:	b082      	sub	sp, #8
}
 800d368:	4610      	mov	r0, r2
 800d36a:	b002      	add	sp, #8
 800d36c:	4770      	bx	lr
 800d36e:	bf00      	nop

0800d370 <STC_SetNominalCurrent>:
  }
  else
  {
#endif
    pHandle->MaxPositiveTorque = hNominalCurrent;
    pHandle->MinNegativeTorque = -(int16_t)hNominalCurrent;
 800d370:	424b      	negs	r3, r1
    pHandle->MaxPositiveTorque = hNominalCurrent;
 800d372:	84c1      	strh	r1, [r0, #38]	; 0x26
    pHandle->MinNegativeTorque = -(int16_t)hNominalCurrent;
 800d374:	8503      	strh	r3, [r0, #40]	; 0x28
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 800d376:	4770      	bx	lr

0800d378 <STC_ForceSpeedReferenceToCurrentSpeed>:
  *
  * - Called during the CHARGE_BOOT_CAP, SWITCH_OVER and WAIT_STOP_MOTOR states of the MC state machine
  * into MediumFrequencyTask to initialize the speed reference.
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed(SpeednTorqCtrl_Handle_t *pHandle)
{
 800d378:	b510      	push	{r4, lr}
 800d37a:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SpeedRefUnitExt = ((int32_t)SPD_GetAvrgMecSpeedUnit(pHandle->SPD)) * (int32_t)65536;
 800d37c:	6940      	ldr	r0, [r0, #20]
 800d37e:	f7ff fefb 	bl	800d178 <SPD_GetAvrgMecSpeedUnit>
 800d382:	0400      	lsls	r0, r0, #16
 800d384:	6060      	str	r0, [r4, #4]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 800d386:	bd10      	pop	{r4, pc}

0800d388 <STO_PLL_CalcElAngle>:
  * @param  pInput: Pointer to the observer inputs structure.
  * @retval int16_t Rotor electrical angle (s16Degrees).
  */
//cstat !MISRAC2012-Rule-8.13
__weak int16_t STO_PLL_CalcElAngle(STO_PLL_Handle_t *pHandle, Observer_Inputs_t *pInputs)
{
 800d388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int16_t retValue;

  if ((MC_NULL == pHandle) || (MC_NULL == pInputs))
 800d38c:	4604      	mov	r4, r0
{
 800d38e:	b089      	sub	sp, #36	; 0x24
  if ((MC_NULL == pHandle) || (MC_NULL == pInputs))
 800d390:	2800      	cmp	r0, #0
 800d392:	f000 80cf 	beq.w	800d534 <STO_PLL_CalcElAngle+0x1ac>
 800d396:	2900      	cmp	r1, #0
 800d398:	f000 80cf 	beq.w	800d53a <STO_PLL_CalcElAngle+0x1b2>
    int16_t hIbeta_err;
    int16_t hRotor_Speed;
    int16_t hValfa;
    int16_t hVbeta;

    if (pHandle->wBemf_alfa_est > (((int32_t)pHandle->hF2) * INT16_MAX))
 800d39c:	f9b0 302e 	ldrsh.w	r3, [r0, #46]	; 0x2e
 800d3a0:	6e87      	ldr	r7, [r0, #104]	; 0x68
 800d3a2:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
 800d3a6:	429f      	cmp	r7, r3
 800d3a8:	f340 80d1 	ble.w	800d54e <STO_PLL_CalcElAngle+0x1c6>
    {
      pHandle->wBemf_alfa_est = INT16_MAX * ((int32_t)pHandle->hF2);
 800d3ac:	6683      	str	r3, [r0, #104]	; 0x68
 800d3ae:	461f      	mov	r7, r3
    {
      /* Nothing to do */
    }
#ifndef FULL_MISRA_C_COMPLIANCY_STO_PLL
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est >> pHandle->F2LOG);
 800d3b0:	f8b4 511e 	ldrh.w	r5, [r4, #286]	; 0x11e
#else
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est / pHandle->hF2);
#endif

    if (pHandle->wBemf_beta_est > (INT16_MAX * ((int32_t)pHandle->hF2)))
 800d3b4:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est >> pHandle->F2LOG);
 800d3b6:	fa47 f205 	asr.w	r2, r7, r5
    if (pHandle->wBemf_beta_est > (INT16_MAX * ((int32_t)pHandle->hF2)))
 800d3ba:	42b3      	cmp	r3, r6
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est >> pHandle->F2LOG);
 800d3bc:	9201      	str	r2, [sp, #4]
 800d3be:	fa0f fe82 	sxth.w	lr, r2
    if (pHandle->wBemf_beta_est > (INT16_MAX * ((int32_t)pHandle->hF2)))
 800d3c2:	f2c0 80c1 	blt.w	800d548 <STO_PLL_CalcElAngle+0x1c0>
    {
      pHandle->wBemf_beta_est = INT16_MAX * ((int32_t)pHandle->hF2);
    }
    else if (pHandle->wBemf_beta_est <= (-INT16_MAX * ((int32_t)pHandle->hF2)))
 800d3c6:	425b      	negs	r3, r3
 800d3c8:	429e      	cmp	r6, r3
 800d3ca:	f340 80bd 	ble.w	800d548 <STO_PLL_CalcElAngle+0x1c0>
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est >> pHandle->F2LOG);
#else
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est / pHandle->hF2);
#endif

    if (pHandle->Ialfa_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 800d3ce:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
 800d3d2:	f8d4 9060 	ldr.w	r9, [r4, #96]	; 0x60
 800d3d6:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est >> pHandle->F2LOG);
 800d3da:	fa46 f505 	asr.w	r5, r6, r5
    if (pHandle->Ialfa_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 800d3de:	4599      	cmp	r9, r3
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est >> pHandle->F2LOG);
 800d3e0:	fa0f fc85 	sxth.w	ip, r5
    if (pHandle->Ialfa_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 800d3e4:	f340 80b9 	ble.w	800d55a <STO_PLL_CalcElAngle+0x1d2>
    {
      pHandle->Ialfa_est = INT16_MAX * ((int32_t)pHandle->hF1);
 800d3e8:	6623      	str	r3, [r4, #96]	; 0x60
 800d3ea:	4699      	mov	r9, r3
    else
    {
      /* Nothing to do */
    }

    if (pHandle->Ibeta_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 800d3ec:	f8d4 8064 	ldr.w	r8, [r4, #100]	; 0x64
 800d3f0:	4543      	cmp	r3, r8
 800d3f2:	f2c0 80a6 	blt.w	800d542 <STO_PLL_CalcElAngle+0x1ba>
    {
      pHandle->Ibeta_est = INT16_MAX * ((int32_t)pHandle->hF1);
    }
    else if (pHandle->Ibeta_est <= (-INT16_MAX * ((int32_t)pHandle->hF1)))
 800d3f6:	425b      	negs	r3, r3
 800d3f8:	4598      	cmp	r8, r3
 800d3fa:	f340 80a2 	ble.w	800d542 <STO_PLL_CalcElAngle+0x1ba>
    hIbeta_err = (int16_t)(pHandle->Ibeta_est >> pHandle->F1LOG);
#else
    hIbeta_err = (int16_t)(pHandle->Ibeta_est / pHandle->hF1);
#endif

    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 800d3fe:	88c8      	ldrh	r0, [r1, #6]

    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.alpha;
 800d400:	f8b1 a008 	ldrh.w	sl, [r1, #8]
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 800d404:	888b      	ldrh	r3, [r1, #4]
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 800d406:	f8ad 0014 	strh.w	r0, [sp, #20]
    hValfa = (int16_t)(wAux >> 16); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
#else
    hValfa = (int16_t)(wAux / 65536);
#endif

    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.beta;
 800d40a:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 800d40e:	f8ad 3010 	strh.w	r3, [sp, #16]
    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.alpha;
 800d412:	f9b1 3000 	ldrsh.w	r3, [r1]
    hIalfa_err = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 800d416:	f8b4 211c 	ldrh.w	r2, [r4, #284]	; 0x11c
    hAux = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
#else
    hAux = (int16_t)(pHandle->Ialfa_est / pHandle->hF1);
#endif

    wAux = ((int32_t)pHandle->hC1) * hAux;
 800d41a:	f9b4 b020 	ldrsh.w	fp, [r4, #32]
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 800d41e:	9904      	ldr	r1, [sp, #16]
    wAux = wAux * pHandle->hC6;
    wAux = pHandle->_Super.hElSpeedDpp * wAux;
    wBemf_beta_est_Next -= wAux;

    /* Calls the PLL blockset */
    pHandle->hBemf_alfa_est = hAux_Alfa;
 800d420:	f8a4 e070 	strh.w	lr, [r4, #112]	; 0x70
    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.beta;
 800d424:	fb0a f000 	mul.w	r0, sl, r0
    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.alpha;
 800d428:	fb0a f303 	mul.w	r3, sl, r3
    hVbeta = ( int16_t ) ( wAux >> 16 ); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800d42c:	1400      	asrs	r0, r0, #16
    hValfa = (int16_t)(wAux >> 16); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800d42e:	141b      	asrs	r3, r3, #16
    hVbeta = ( int16_t ) ( wAux >> 16 ); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800d430:	9003      	str	r0, [sp, #12]
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 800d432:	9805      	ldr	r0, [sp, #20]
    hValfa = (int16_t)(wAux >> 16); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800d434:	9302      	str	r3, [sp, #8]
    hIalfa_err = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 800d436:	fa49 f302 	asr.w	r3, r9, r2
    hIbeta_err = (int16_t)(pHandle->Ibeta_est >> pHandle->F1LOG);
 800d43a:	fa48 f202 	asr.w	r2, r8, r2
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 800d43e:	eba2 0a00 	sub.w	sl, r2, r0
    wAux = ((int32_t)pHandle->hC1) * hAux;
 800d442:	fb12 f20b 	smulbb	r2, r2, fp
    wIbeta_est_Next = pHandle->Ibeta_est - wAux;
 800d446:	eba8 0202 	sub.w	r2, r8, r2
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 800d44a:	1a59      	subs	r1, r3, r1
    wAux = ((int32_t)pHandle->hC2) * hIalfa_err;
 800d44c:	f9b4 8022 	ldrsh.w	r8, [r4, #34]	; 0x22
    wIalfa_est_Next += wAux;
 800d450:	9802      	ldr	r0, [sp, #8]
    pHandle->hBemf_beta_est = hAux_Beta;
 800d452:	f8a4 c072 	strh.w	ip, [r4, #114]	; 0x72
    wAux = ((int32_t)pHandle->hC1) * hAux;
 800d456:	fb13 f30b 	smulbb	r3, r3, fp
    wIalfa_est_Next = pHandle->Ialfa_est - wAux;
 800d45a:	eba9 0303 	sub.w	r3, r9, r3
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 800d45e:	b209      	sxth	r1, r1
    wAux = ((int32_t)pHandle->hC5) * hValfa;
 800d460:	f9b4 9028 	ldrsh.w	r9, [r4, #40]	; 0x28
    wIalfa_est_Next += wAux;
 800d464:	fb08 3301 	mla	r3, r8, r1, r3
    wIalfa_est_Next += wAux;
 800d468:	fb09 3300 	mla	r3, r9, r0, r3
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 800d46c:	fa0f fa8a 	sxth.w	sl, sl
    wIbeta_est_Next += wAux;
 800d470:	9803      	ldr	r0, [sp, #12]
    wIbeta_est_Next += wAux;
 800d472:	fb08 280a 	mla	r8, r8, sl, r2
    wIbeta_est_Next += wAux;
 800d476:	fb09 8800 	mla	r8, r9, r0, r8
    wAux = ((int32_t)pHandle->hC4) * hIalfa_err;
 800d47a:	f9b4 0026 	ldrsh.w	r0, [r4, #38]	; 0x26
    wAux = (int32_t)hAux_Beta >> pHandle->F3POW2; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800d47e:	8e62      	ldrh	r2, [r4, #50]	; 0x32
    wAux = wAux * pHandle->hC6;
 800d480:	f9b4 902a 	ldrsh.w	r9, [r4, #42]	; 0x2a
    wBemf_alfa_est_Next = pHandle->wBemf_alfa_est + wAux;
 800d484:	fb01 7100 	mla	r1, r1, r0, r7
    wBemf_beta_est_Next = pHandle->wBemf_beta_est + wAux;
 800d488:	fb00 600a 	mla	r0, r0, sl, r6
    wAux = ((int32_t)pHandle->hC3) * hAux_Alfa;
 800d48c:	f9b4 6024 	ldrsh.w	r6, [r4, #36]	; 0x24
    wIalfa_est_Next -= wAux;
 800d490:	fb06 371e 	mls	r7, r6, lr, r3
    wIbeta_est_Next -= wAux;
 800d494:	fb06 861c 	mls	r6, r6, ip, r8
    wAux = (int32_t)hAux_Alfa >> pHandle->F3POW2; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800d498:	fa4e fe02 	asr.w	lr, lr, r2
    wAux = (int32_t)hAux_Beta >> pHandle->F3POW2; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800d49c:	fa4c fc02 	asr.w	ip, ip, r2
    wAux = pHandle->_Super.hElSpeedDpp * wAux;
 800d4a0:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
    wAux = wAux * pHandle->hC6;
 800d4a4:	fb0e f309 	mul.w	r3, lr, r9
    wBemf_beta_est_Next -= wAux;
 800d4a8:	fb03 0812 	mls	r8, r3, r2, r0

    if (0 == pHandle->hForcedDirection)
 800d4ac:	f994 3124 	ldrsb.w	r3, [r4, #292]	; 0x124
    wAux = wAux * pHandle->hC6;
 800d4b0:	fb0c fc09 	mul.w	ip, ip, r9
    wBemf_alfa_est_Next += wAux;
 800d4b4:	fb0c 1902 	mla	r9, ip, r2, r1
    if (0 == pHandle->hForcedDirection)
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d154      	bne.n	800d566 <STO_PLL_CalcElAngle+0x1de>
    {
      /* We are in auxiliary mode, then rely on the speed detected */
      if(pHandle->_Super.hElSpeedDpp >= 0)
 800d4bc:	2a00      	cmp	r2, #0
 800d4be:	f64f 7aff 	movw	sl, #65535	; 0xffff
 800d4c2:	bfa8      	it	ge
 800d4c4:	f04f 0a01 	movge.w	sl, #1
  int16_t hAux1;
  int16_t hAux2;
  int16_t hOutput;
  Trig_Components Local_Components;

  Local_Components = MCM_Trig_Functions(pHandle->_Super.hElAngle);
 800d4c8:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800d4cc:	f7f7 fe1c 	bl	8005108 <MCM_Trig_Functions>
    hAux_Alfa = (int16_t)(hAux_Alfa * wDirection);
 800d4d0:	9b01      	ldr	r3, [sp, #4]
    hAux_Beta = (int16_t)(hAux_Beta * wDirection);
 800d4d2:	fb15 f50a 	smulbb	r5, r5, sl
    hAux_Alfa = (int16_t)(hAux_Alfa * wDirection);
 800d4d6:	fb13 f30a 	smulbb	r3, r3, sl
    hRotor_Speed = STO_ExecutePLL(pHandle, hAux_Alfa, -hAux_Beta);
 800d4da:	426d      	negs	r5, r5

  /* Alfa & Beta BEMF multiplied by Cos & Sin */
  wAlfa_Sin_tmp = ((int32_t )hBemf_alfa_est) * ((int32_t )Local_Components.hSin);
  wBeta_Cos_tmp = ((int32_t )hBemf_beta_est) * ((int32_t )Local_Components.hCos);
 800d4dc:	fb10 f505 	smulbb	r5, r0, r5
  wAlfa_Sin_tmp = ((int32_t )hBemf_alfa_est) * ((int32_t )Local_Components.hSin);
 800d4e0:	fb10 f023 	smultb	r0, r0, r3
#else
  hAux2 = (int16_t)(wAlfa_Sin_tmp / 32768);
#endif

  /* Speed PI regulator */
  hOutput = PI_Controller(& pHandle->PIRegulator, (int32_t)(hAux1 ) - hAux2);
 800d4e4:	f340 31cf 	sbfx	r1, r0, #15, #16
 800d4e8:	f345 35cf 	sbfx	r5, r5, #15, #16
 800d4ec:	1a69      	subs	r1, r5, r1
 800d4ee:	f104 0034 	add.w	r0, r4, #52	; 0x34
 800d4f2:	f7fe fc2b 	bl	800bd4c <PI_Controller>
  uint8_t bBuffer_index = pHandle->Speed_Buffer_Index;
 800d4f6:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
  if (bBuffer_index == pHandle->SpeedBufferSizeUnit)
 800d4fa:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
    pHandle->_Super.InstantaneousElSpeedDpp = hRotor_Speed;
 800d4fe:	8220      	strh	r0, [r4, #16]
  bBuffer_index++;
 800d500:	3301      	adds	r3, #1
 800d502:	b2db      	uxtb	r3, r3
  if (bBuffer_index == pHandle->SpeedBufferSizeUnit)
 800d504:	429a      	cmp	r2, r3
  pHandle->SpeedBufferOldestEl = pHandle->Speed_Buffer[bBuffer_index];
 800d506:	bf12      	itee	ne
 800d508:	461a      	movne	r2, r3
 800d50a:	2200      	moveq	r2, #0
    bBuffer_index = 0U;
 800d50c:	4613      	moveq	r3, r2
  pHandle->SpeedBufferOldestEl = pHandle->Speed_Buffer[bBuffer_index];
 800d50e:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 800d512:	f9b2 1074 	ldrsh.w	r1, [r2, #116]	; 0x74
 800d516:	f8a4 110c 	strh.w	r1, [r4, #268]	; 0x10c
  pHandle->Speed_Buffer[bBuffer_index] = hRotor_Speed;
 800d51a:	f8a2 0074 	strh.w	r0, [r2, #116]	; 0x74
  pHandle->Speed_Buffer_Index = bBuffer_index;
 800d51e:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
    pHandle->_Super.hElAngle += hRotor_Speed;
 800d522:	88a3      	ldrh	r3, [r4, #4]
    pHandle->Ialfa_est = wIalfa_est_Next;
 800d524:	6627      	str	r7, [r4, #96]	; 0x60
    pHandle->_Super.hElAngle += hRotor_Speed;
 800d526:	4418      	add	r0, r3
    pHandle->Ibeta_est = wIbeta_est_Next;
 800d528:	e9c4 6919 	strd	r6, r9, [r4, #100]	; 0x64
    pHandle->_Super.hElAngle += hRotor_Speed;
 800d52c:	b200      	sxth	r0, r0
    pHandle->wBemf_beta_est = wBemf_beta_est_Next;
 800d52e:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c
    pHandle->_Super.hElAngle += hRotor_Speed;
 800d532:	80a0      	strh	r0, [r4, #4]
}
 800d534:	b009      	add	sp, #36	; 0x24
 800d536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    retValue = 0;
 800d53a:	4608      	mov	r0, r1
}
 800d53c:	b009      	add	sp, #36	; 0x24
 800d53e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pHandle->Ibeta_est = -INT16_MAX * ((int32_t)pHandle->hF1);
 800d542:	6663      	str	r3, [r4, #100]	; 0x64
 800d544:	4698      	mov	r8, r3
 800d546:	e75a      	b.n	800d3fe <STO_PLL_CalcElAngle+0x76>
      pHandle->wBemf_beta_est = (-INT16_MAX * ((int32_t)pHandle->hF2));
 800d548:	66e3      	str	r3, [r4, #108]	; 0x6c
 800d54a:	461e      	mov	r6, r3
 800d54c:	e73f      	b.n	800d3ce <STO_PLL_CalcElAngle+0x46>
    else if (pHandle->wBemf_alfa_est <= (-INT16_MAX * ((int32_t)pHandle->hF2)))
 800d54e:	425a      	negs	r2, r3
 800d550:	4297      	cmp	r7, r2
      pHandle->wBemf_alfa_est = -INT16_MAX * ((int32_t)pHandle->hF2);
 800d552:	bfdc      	itt	le
 800d554:	6682      	strle	r2, [r0, #104]	; 0x68
 800d556:	4617      	movle	r7, r2
 800d558:	e72a      	b.n	800d3b0 <STO_PLL_CalcElAngle+0x28>
    else if (pHandle->Ialfa_est <= (-INT16_MAX * ((int32_t)pHandle->hF1)))
 800d55a:	425a      	negs	r2, r3
 800d55c:	4591      	cmp	r9, r2
      pHandle->Ialfa_est = -INT16_MAX * ((int32_t)pHandle->hF1);
 800d55e:	bfdc      	itt	le
 800d560:	6622      	strle	r2, [r4, #96]	; 0x60
 800d562:	4691      	movle	r9, r2
 800d564:	e742      	b.n	800d3ec <STO_PLL_CalcElAngle+0x64>
    hAux_Alfa = (int16_t)(hAux_Alfa * wDirection);
 800d566:	fa1f fa83 	uxth.w	sl, r3
 800d56a:	e7ad      	b.n	800d4c8 <STO_PLL_CalcElAngle+0x140>

0800d56c <STO_PLL_CalcAvrgMecSpeedUnit>:
{
 800d56c:	b570      	push	{r4, r5, r6, lr}
    uint8_t i, bSpeedBufferSizeUnit = pHandle->SpeedBufferSizeUnit;
 800d56e:	f890 510e 	ldrb.w	r5, [r0, #270]	; 0x10e
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 800d572:	2d00      	cmp	r5, #0
 800d574:	f000 809c 	beq.w	800d6b0 <STO_PLL_CalcAvrgMecSpeedUnit+0x144>
 800d578:	1e6b      	subs	r3, r5, #1
 800d57a:	b2db      	uxtb	r3, r3
 800d57c:	f100 0472 	add.w	r4, r0, #114	; 0x72
 800d580:	f100 0c74 	add.w	ip, r0, #116	; 0x74
 800d584:	eb0c 0c43 	add.w	ip, ip, r3, lsl #1
    int32_t wAvrSpeed_dpp = (int32_t)0;
 800d588:	2200      	movs	r2, #0
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 800d58a:	4623      	mov	r3, r4
      wAvrSpeed_dpp += (int32_t)(pHandle->Speed_Buffer[i]);
 800d58c:	f933 ef02 	ldrsh.w	lr, [r3, #2]!
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 800d590:	459c      	cmp	ip, r3
      wAvrSpeed_dpp += (int32_t)(pHandle->Speed_Buffer[i]);
 800d592:	4472      	add	r2, lr
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 800d594:	d1fa      	bne.n	800d58c <STO_PLL_CalcAvrgMecSpeedUnit+0x20>
      wAvrSpeed_dpp = wAvrSpeed_dpp / ((int16_t)bSpeedBufferSizeUnit);
 800d596:	fb92 fef5 	sdiv	lr, r2, r5
 800d59a:	2200      	movs	r2, #0
      wError = ((int32_t)pHandle->Speed_Buffer[i]) - wAvrSpeed_dpp;
 800d59c:	f934 3f02 	ldrsh.w	r3, [r4, #2]!
 800d5a0:	eba3 030e 	sub.w	r3, r3, lr
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 800d5a4:	45a4      	cmp	ip, r4
      wAvrQuadraticError += wError;
 800d5a6:	fb03 2203 	mla	r2, r3, r3, r2
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 800d5aa:	d1f7      	bne.n	800d59c <STO_PLL_CalcAvrgMecSpeedUnit+0x30>
    wAvrQuadraticError = wAvrQuadraticError / ((int16_t)bSpeedBufferSizeUnit);
 800d5ac:	fbb2 f2f5 	udiv	r2, r2, r5
    wAvrSquareSpeed = wAvrSpeed_dpp * wAvrSpeed_dpp;
 800d5b0:	fb0e f30e 	mul.w	r3, lr, lr
    int64_t lAvrSquareSpeed = (int64_t)(wAvrSquareSpeed) * (int64_t)pHandle->VariancePercentage;
 800d5b4:	17de      	asrs	r6, r3, #31
 800d5b6:	f8b0 c110 	ldrh.w	ip, [r0, #272]	; 0x110
    wAux = wAvrSpeed_dpp * ((int32_t)pHandle->_Super.hMeasurementFrequency);
 800d5ba:	8b45      	ldrh	r5, [r0, #26]
    int64_t lAvrSquareSpeed = (int64_t)(wAvrSquareSpeed) * (int64_t)pHandle->VariancePercentage;
 800d5bc:	fbac 4303 	umull	r4, r3, ip, r3
 800d5c0:	fb0c 3306 	mla	r3, ip, r6, r3
    wAvrSquareSpeed = (int32_t)(lAvrSquareSpeed / (int64_t)128);
 800d5c4:	09e4      	lsrs	r4, r4, #7
 800d5c6:	ea44 6443 	orr.w	r4, r4, r3, lsl #25
    wAux = wAux * ((int32_t)pHandle->_Super.SpeedUnit);
 800d5ca:	7883      	ldrb	r3, [r0, #2]
    if (true == pHandle->EnableDualCheck) /* Do algorithm if it's enabled */
 800d5cc:	f890 6104 	ldrb.w	r6, [r0, #260]	; 0x104
    wAux = wAvrSpeed_dpp * ((int32_t)pHandle->_Super.hMeasurementFrequency);
 800d5d0:	fb0e f505 	mul.w	r5, lr, r5
    if (wAvrQuadraticError < wAvrSquareSpeed)
 800d5d4:	4294      	cmp	r4, r2
    wAux = wAux * ((int32_t)pHandle->_Super.SpeedUnit);
 800d5d6:	fb05 f303 	mul.w	r3, r5, r3
    if (wAvrQuadraticError < wAvrSquareSpeed)
 800d5da:	bfd8      	it	le
 800d5dc:	f04f 0c00 	movle.w	ip, #0
    wAux = wAux / ((int32_t)pHandle->_Super.DPPConvFactor);
 800d5e0:	69c5      	ldr	r5, [r0, #28]
 800d5e2:	fb93 f3f5 	sdiv	r3, r3, r5
    if (wAvrQuadraticError < wAvrSquareSpeed)
 800d5e6:	bfc8      	it	gt
 800d5e8:	f04f 0c01 	movgt.w	ip, #1
    wAux = wAux / ((int16_t)pHandle->_Super.bElToMecRatio);
 800d5ec:	7845      	ldrb	r5, [r0, #1]
 800d5ee:	fb93 f3f5 	sdiv	r3, r3, r5
    *pMecSpeedUnit = (int16_t)wAux;
 800d5f2:	b21d      	sxth	r5, r3
 800d5f4:	800d      	strh	r5, [r1, #0]
    pHandle->_Super.hAvrMecSpeedUnit = (int16_t)wAux;
 800d5f6:	8185      	strh	r5, [r0, #12]
    if (wAvrQuadraticError < wAvrSquareSpeed)
 800d5f8:	f880 c0f5 	strb.w	ip, [r0, #245]	; 0xf5
    if (true == pHandle->EnableDualCheck) /* Do algorithm if it's enabled */
 800d5fc:	b9ae      	cbnz	r6, 800d62a <STO_PLL_CalcAvrgMecSpeedUnit+0xbe>
    if (false == pHandle->IsAlgorithmConverged)
 800d5fe:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
 800d602:	b353      	cbz	r3, 800d65a <STO_PLL_CalcAvrgMecSpeedUnit+0xee>
      if ((false == pHandle->IsSpeedReliable) || (false == bIs_Bemf_Consistent))
 800d604:	4294      	cmp	r4, r2
 800d606:	dc25      	bgt.n	800d654 <STO_PLL_CalcAvrgMecSpeedUnit+0xe8>
        pHandle->ReliabilityCounter++;
 800d608:	f890 30f7 	ldrb.w	r3, [r0, #247]	; 0xf7
        if (pHandle->ReliabilityCounter >= pHandle->Reliability_hysteresys)
 800d60c:	f890 2117 	ldrb.w	r2, [r0, #279]	; 0x117
        pHandle->ReliabilityCounter++;
 800d610:	3301      	adds	r3, #1
 800d612:	b2db      	uxtb	r3, r3
        if (pHandle->ReliabilityCounter >= pHandle->Reliability_hysteresys)
 800d614:	429a      	cmp	r2, r3
        pHandle->ReliabilityCounter++;
 800d616:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
        if (pHandle->ReliabilityCounter >= pHandle->Reliability_hysteresys)
 800d61a:	d81e      	bhi.n	800d65a <STO_PLL_CalcAvrgMecSpeedUnit+0xee>
          pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 800d61c:	78c2      	ldrb	r2, [r0, #3]
 800d61e:	7002      	strb	r2, [r0, #0]
          pHandle->ReliabilityCounter = 0U;
 800d620:	2300      	movs	r3, #0
 800d622:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
}
 800d626:	4618      	mov	r0, r3
 800d628:	bd70      	pop	{r4, r5, r6, pc}
      wAux = ((wAux < 0) ? (-wAux) : (wAux));
 800d62a:	2b00      	cmp	r3, #0
      if (wAux < (int32_t)(pHandle->MaxAppPositiveMecSpeedUnit))
 800d62c:	f8b0 511a 	ldrh.w	r5, [r0, #282]	; 0x11a
      wAux = ((wAux < 0) ? (-wAux) : (wAux));
 800d630:	bfb8      	it	lt
 800d632:	425b      	neglt	r3, r3
      if (wAux < (int32_t)(pHandle->MaxAppPositiveMecSpeedUnit))
 800d634:	429d      	cmp	r5, r3
 800d636:	dc14      	bgt.n	800d662 <STO_PLL_CalcAvrgMecSpeedUnit+0xf6>
    bool bIs_Bemf_Consistent = false;
 800d638:	2500      	movs	r5, #0
    int32_t wEstBemfSq = 0;
 800d63a:	462b      	mov	r3, r5
    int32_t wObsBemfSq = 0;
 800d63c:	462e      	mov	r6, r5
      pHandle->Est_Bemf_Level = wEstBemfSq;
 800d63e:	e9c0 633f 	strd	r6, r3, [r0, #252]	; 0xfc
    if (false == pHandle->IsAlgorithmConverged)
 800d642:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
      pHandle->IsBemfConsistent = bIs_Bemf_Consistent;
 800d646:	f880 50f9 	strb.w	r5, [r0, #249]	; 0xf9
    if (false == pHandle->IsAlgorithmConverged)
 800d64a:	b133      	cbz	r3, 800d65a <STO_PLL_CalcAvrgMecSpeedUnit+0xee>
      if ((false == pHandle->IsSpeedReliable) || (false == bIs_Bemf_Consistent))
 800d64c:	4294      	cmp	r4, r2
 800d64e:	dddb      	ble.n	800d608 <STO_PLL_CalcAvrgMecSpeedUnit+0x9c>
 800d650:	2d00      	cmp	r5, #0
 800d652:	d0d9      	beq.n	800d608 <STO_PLL_CalcAvrgMecSpeedUnit+0x9c>
        pHandle->ReliabilityCounter = 0U;
 800d654:	2300      	movs	r3, #0
 800d656:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
}
 800d65a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        bAux = SPD_IsMecSpeedReliable (&pHandle->_Super, pMecSpeedUnit);
 800d65e:	f7ff bd93 	b.w	800d188 <SPD_IsMecSpeedReliable>
        wObsBemf = (int32_t)pHandle->hBemf_alfa_est;
 800d662:	f9b0 5070 	ldrsh.w	r5, [r0, #112]	; 0x70
        wObsBemf = (int32_t)pHandle->hBemf_beta_est;
 800d666:	f9b0 6072 	ldrsh.w	r6, [r0, #114]	; 0x72
        wObsBemfSq = wObsBemf * wObsBemf;
 800d66a:	fb05 fc05 	mul.w	ip, r5, r5
        wEstBemfSq = (wEstBemf * ((int32_t)pHandle->BemfConsistencyGain)) / 64;
 800d66e:	f890 5119 	ldrb.w	r5, [r0, #281]	; 0x119
        wObsBemfSq += wObsBemf * wObsBemf;
 800d672:	fb06 c606 	mla	r6, r6, r6, ip
        wEstBemf = (wAux * 32767) / ((int16_t)pHandle->_Super.hMaxReliableMecSpeedUnit);
 800d676:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
 800d67a:	f9b0 c014 	ldrsh.w	ip, [r0, #20]
 800d67e:	fb93 f3fc 	sdiv	r3, r3, ip
        wEstBemfSq = (wEstBemf * ((int32_t)pHandle->BemfConsistencyGain)) / 64;
 800d682:	fb03 f505 	mul.w	r5, r3, r5
 800d686:	2d00      	cmp	r5, #0
 800d688:	bfb8      	it	lt
 800d68a:	353f      	addlt	r5, #63	; 0x3f
 800d68c:	11ad      	asrs	r5, r5, #6
        wEstBemfSq *= wEstBemf;
 800d68e:	fb05 f303 	mul.w	r3, r5, r3
        wEstBemfSqLo = wEstBemfSq - ((wEstBemfSq / 64) * ((int32_t)pHandle->BemfConsistencyCheck));
 800d692:	2b00      	cmp	r3, #0
 800d694:	461d      	mov	r5, r3
 800d696:	f890 c118 	ldrb.w	ip, [r0, #280]	; 0x118
 800d69a:	bfb8      	it	lt
 800d69c:	f103 053f 	addlt.w	r5, r3, #63	; 0x3f
 800d6a0:	11ad      	asrs	r5, r5, #6
 800d6a2:	fb0c 3515 	mls	r5, ip, r5, r3
        if (wObsBemfSq > wEstBemfSqLo)
 800d6a6:	42ae      	cmp	r6, r5
 800d6a8:	bfd4      	ite	le
 800d6aa:	2500      	movle	r5, #0
 800d6ac:	2501      	movgt	r5, #1
 800d6ae:	e7c6      	b.n	800d63e <STO_PLL_CalcAvrgMecSpeedUnit+0xd2>
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 800d6b0:	462a      	mov	r2, r5
 800d6b2:	462b      	mov	r3, r5
 800d6b4:	462e      	mov	r6, r5
    int32_t wAvrSpeed_dpp = (int32_t)0;
 800d6b6:	46ae      	mov	lr, r5
 800d6b8:	e77d      	b.n	800d5b6 <STO_PLL_CalcAvrgMecSpeedUnit+0x4a>
 800d6ba:	bf00      	nop

0800d6bc <STO_PLL_CalcAvrgElSpeedDpp>:
    int16_t hSpeedBufferSizeUnit = (int16_t)pHandle->SpeedBufferSizeUnit;
 800d6bc:	f890 110e 	ldrb.w	r1, [r0, #270]	; 0x10e
    hBufferSizeDiff = hSpeedBufferSizeUnit - hSpeedBufferSizedpp;
 800d6c0:	f890 310f 	ldrb.w	r3, [r0, #271]	; 0x10f
    int16_t hIndexNew = (int16_t)pHandle->Speed_Buffer_Index;
 800d6c4:	f890 20f4 	ldrb.w	r2, [r0, #244]	; 0xf4
    hBufferSizeDiff = hSpeedBufferSizeUnit - hSpeedBufferSizedpp;
 800d6c8:	1acb      	subs	r3, r1, r3
 800d6ca:	b29b      	uxth	r3, r3
{
 800d6cc:	b510      	push	{r4, lr}
    int32_t wSum = pHandle->DppBufferSum;
 800d6ce:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
    if (0 == hBufferSizeDiff)
 800d6d2:	b973      	cbnz	r3, 800d6f2 <STO_PLL_CalcAvrgElSpeedDpp+0x36>
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->SpeedBufferOldestEl;
 800d6d4:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800d6d8:	f9b0 110c 	ldrsh.w	r1, [r0, #268]	; 0x10c
 800d6dc:	f9b2 3074 	ldrsh.w	r3, [r2, #116]	; 0x74
 800d6e0:	4423      	add	r3, r4
 800d6e2:	1a5b      	subs	r3, r3, r1
  wAvrSpeed_dpp = wSum >> pHandle->SpeedBufferSizeDppLOG;
 800d6e4:	f8b0 2120 	ldrh.w	r2, [r0, #288]	; 0x120
    pHandle->DppBufferSum = wSum;
 800d6e8:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  wAvrSpeed_dpp = wSum >> pHandle->SpeedBufferSizeDppLOG;
 800d6ec:	4113      	asrs	r3, r2
    pHandle->_Super.hElSpeedDpp = (int16_t)wAvrSpeed_dpp;
 800d6ee:	81c3      	strh	r3, [r0, #14]
}
 800d6f0:	bd10      	pop	{r4, pc}
      hIndexOldTemp = hIndexNew + hBufferSizeDiff;
 800d6f2:	4413      	add	r3, r2
 800d6f4:	fa0f fc83 	sxth.w	ip, r3
      if (hIndexOldTemp >= hSpeedBufferSizeUnit)
 800d6f8:	4561      	cmp	r1, ip
      hIndexOldTemp = hIndexNew + hBufferSizeDiff;
 800d6fa:	b29b      	uxth	r3, r3
      if (hIndexOldTemp >= hSpeedBufferSizeUnit)
 800d6fc:	dc05      	bgt.n	800d70a <STO_PLL_CalcAvrgElSpeedDpp+0x4e>
 800d6fe:	fa1f fe81 	uxth.w	lr, r1
        hIndexOld = hIndexOldTemp - hSpeedBufferSizeUnit;
 800d702:	eba3 030e 	sub.w	r3, r3, lr
 800d706:	fa0f fc83 	sxth.w	ip, r3
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->Speed_Buffer[hIndexOld];
 800d70a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800d70e:	eb00 0c4c 	add.w	ip, r0, ip, lsl #1
 800d712:	f9b2 3074 	ldrsh.w	r3, [r2, #116]	; 0x74
 800d716:	f9bc 2074 	ldrsh.w	r2, [ip, #116]	; 0x74
 800d71a:	4423      	add	r3, r4
 800d71c:	1a9b      	subs	r3, r3, r2
 800d71e:	e7e1      	b.n	800d6e4 <STO_PLL_CalcAvrgElSpeedDpp+0x28>

0800d720 <STO_PLL_Clear>:
{
 800d720:	b510      	push	{r4, lr}
  *
  */
static void STO_InitSpeedBuffer(STO_PLL_Handle_t * pHandle)
{
  uint8_t b_i;
  uint8_t bSpeedBufferSize = pHandle->SpeedBufferSizeUnit;
 800d722:	f890 210e 	ldrb.w	r2, [r0, #270]	; 0x10e
    pHandle->Ialfa_est = (int32_t)0;
 800d726:	2100      	movs	r1, #0
    pHandle->Ibeta_est = (int32_t)0;
 800d728:	e9c0 1118 	strd	r1, r1, [r0, #96]	; 0x60
    pHandle->wBemf_beta_est = (int32_t)0;
 800d72c:	e9c0 111a 	strd	r1, r1, [r0, #104]	; 0x68
    pHandle->Est_Bemf_Level = (int32_t)0;
 800d730:	e9c0 113f 	strd	r1, r1, [r0, #252]	; 0xfc
{
 800d734:	4604      	mov	r4, r0
    pHandle->_Super.hElAngle = (int16_t)0;
 800d736:	8081      	strh	r1, [r0, #4]
    pHandle->_Super.hElSpeedDpp = (int16_t)0;
 800d738:	81c1      	strh	r1, [r0, #14]
    pHandle->ConsistencyCounter = 0u;
 800d73a:	f8a0 10f6 	strh.w	r1, [r0, #246]	; 0xf6
    pHandle->IsAlgorithmConverged = false;
 800d73e:	f8a0 10f8 	strh.w	r1, [r0, #248]	; 0xf8
    pHandle->DppBufferSum = (int32_t)0;
 800d742:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    pHandle->ForceConvergency = false;
 800d746:	f8a0 1122 	strh.w	r1, [r0, #290]	; 0x122

  /* Init speed buffer */
  for (b_i = 0U; b_i < bSpeedBufferSize; b_i++)
 800d74a:	b11a      	cbz	r2, 800d754 <STO_PLL_Clear+0x34>
  {
    pHandle->Speed_Buffer[b_i] = (int16_t)0;
 800d74c:	0052      	lsls	r2, r2, #1
 800d74e:	3074      	adds	r0, #116	; 0x74
 800d750:	f003 f85c 	bl	801080c <memset>
  }
  pHandle->Speed_Buffer_Index = 0U;
 800d754:	2100      	movs	r1, #0
 800d756:	f884 10f4 	strb.w	r1, [r4, #244]	; 0xf4
  pHandle->SpeedBufferOldestEl = (int16_t)0;
 800d75a:	f8a4 110c 	strh.w	r1, [r4, #268]	; 0x10c
    PID_SetIntegralTerm(& pHandle->PIRegulator, (int32_t)0);
 800d75e:	f104 0034 	add.w	r0, r4, #52	; 0x34
}
 800d762:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    PID_SetIntegralTerm(& pHandle->PIRegulator, (int32_t)0);
 800d766:	f7fe bab9 	b.w	800bcdc <PID_SetIntegralTerm>
 800d76a:	bf00      	nop

0800d76c <STO_PLL_Init>:
{
 800d76c:	b510      	push	{r4, lr}
    pHandle->ConsistencyCounter = pHandle->StartUpConsistThreshold;
 800d76e:	f890 1116 	ldrb.w	r1, [r0, #278]	; 0x116
    htempk = (int16_t)(C6_COMP_CONST1 / pHandle->hF2);
 800d772:	4b19      	ldr	r3, [pc, #100]	; (800d7d8 <STO_PLL_Init+0x6c>)
 800d774:	f9b0 e02e 	ldrsh.w	lr, [r0, #46]	; 0x2e
    pHandle->ConsistencyCounter = pHandle->StartUpConsistThreshold;
 800d778:	f880 10f6 	strb.w	r1, [r0, #246]	; 0xf6
    pHandle->EnableDualCheck = true;
 800d77c:	2201      	movs	r2, #1
    pHandle->F3POW2 = 0U;
 800d77e:	2100      	movs	r1, #0
    htempk = (int16_t)(C6_COMP_CONST1 / pHandle->hF2);
 800d780:	fb93 f3fe 	sdiv	r3, r3, lr
 800d784:	b21b      	sxth	r3, r3
{
 800d786:	4604      	mov	r4, r0
    pHandle->EnableDualCheck = true;
 800d788:	f880 2104 	strb.w	r2, [r0, #260]	; 0x104
    pHandle->F3POW2 = 0U;
 800d78c:	8641      	strh	r1, [r0, #50]	; 0x32
    while (htempk != 0)
 800d78e:	b30b      	cbz	r3, 800d7d4 <STO_PLL_Init+0x68>
    wAux = ((int32_t)1);
 800d790:	4611      	mov	r1, r2
      htempk /= ((int16_t)2);
 800d792:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    while (htempk != 0)
 800d796:	f102 0c01 	add.w	ip, r2, #1
 800d79a:	105b      	asrs	r3, r3, #1
 800d79c:	4610      	mov	r0, r2
      wAux *= ((int32_t)2);
 800d79e:	ea4f 0141 	mov.w	r1, r1, lsl #1
    while (htempk != 0)
 800d7a2:	fa1f f28c 	uxth.w	r2, ip
 800d7a6:	d1f4      	bne.n	800d792 <STO_PLL_Init+0x26>
    pHandle->hF3 = (int16_t)wAux;
 800d7a8:	b20a      	sxth	r2, r1
 800d7aa:	8660      	strh	r0, [r4, #50]	; 0x32
    wAux = ((int32_t)(pHandle->hF2)) * pHandle->hF3;
 800d7ac:	fb0e f102 	mul.w	r1, lr, r2
    pHandle->hC6 = (int16_t)(wAux / C6_COMP_CONST2);
 800d7b0:	480a      	ldr	r0, [pc, #40]	; (800d7dc <STO_PLL_Init+0x70>)
    pHandle->hF3 = (int16_t)wAux;
 800d7b2:	8622      	strh	r2, [r4, #48]	; 0x30
    pHandle->hC6 = (int16_t)(wAux / C6_COMP_CONST2);
 800d7b4:	17cb      	asrs	r3, r1, #31
 800d7b6:	fb80 0101 	smull	r0, r1, r0, r1
 800d7ba:	ebc3 2321 	rsb	r3, r3, r1, asr #8
 800d7be:	8563      	strh	r3, [r4, #42]	; 0x2a
    STO_PLL_Clear(pHandle);
 800d7c0:	4620      	mov	r0, r4
 800d7c2:	f7ff ffad 	bl	800d720 <STO_PLL_Clear>
    PID_HandleInit(&pHandle->PIRegulator);
 800d7c6:	f104 0034 	add.w	r0, r4, #52	; 0x34
 800d7ca:	f7fe fa73 	bl	800bcb4 <PID_HandleInit>
    pHandle->_Super.hMecAccelUnitP = 0;
 800d7ce:	2300      	movs	r3, #0
 800d7d0:	8263      	strh	r3, [r4, #18]
}
 800d7d2:	bd10      	pop	{r4, pc}
 800d7d4:	4671      	mov	r1, lr
 800d7d6:	e7eb      	b.n	800d7b0 <STO_PLL_Init+0x44>
 800d7d8:	000fea5e 	.word	0x000fea5e
 800d7dc:	06488dc5 	.word	0x06488dc5

0800d7e0 <STO_PLL_IsObserverConverged>:
    int32_t wtemp;
    int16_t hEstimatedSpeedUnit;
    int16_t hUpperThreshold;
    int16_t hLowerThreshold;

    if (true == pHandle->ForceConvergency2)
 800d7e0:	f890 2123 	ldrb.w	r2, [r0, #291]	; 0x123
{
 800d7e4:	4603      	mov	r3, r0
    if (true == pHandle->ForceConvergency2)
 800d7e6:	b112      	cbz	r2, 800d7ee <STO_PLL_IsObserverConverged+0xe>
    {
      *phForcedMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 800d7e8:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
 800d7ec:	800a      	strh	r2, [r1, #0]
    else
    {
      /* Nothing to do */
    }

    if (true == pHandle->ForceConvergency)
 800d7ee:	f893 0122 	ldrb.w	r0, [r3, #290]	; 0x122
 800d7f2:	b128      	cbz	r0, 800d800 <STO_PLL_IsObserverConverged+0x20>
    {
      bAux = true;
      pHandle->IsAlgorithmConverged = true;
 800d7f4:	2001      	movs	r0, #1
      pHandle->_Super.bSpeedErrorNumber = 0U;
 800d7f6:	2200      	movs	r2, #0
      pHandle->IsAlgorithmConverged = true;
 800d7f8:	f883 00f8 	strb.w	r0, [r3, #248]	; 0xf8
      pHandle->_Super.bSpeedErrorNumber = 0U;
 800d7fc:	701a      	strb	r2, [r3, #0]
    }
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
  return (bAux);
}
 800d7fe:	4770      	bx	lr
      wtemp = ((int32_t)hEstimatedSpeedUnit) * ((int32_t)*phForcedMecSpeedUnit);
 800d800:	f9b1 2000 	ldrsh.w	r2, [r1]
      hEstimatedSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 800d804:	f9b3 c00c 	ldrsh.w	ip, [r3, #12]
{
 800d808:	b530      	push	{r4, r5, lr}
      wtemp = ((int32_t)hEstimatedSpeedUnit) * ((int32_t)*phForcedMecSpeedUnit);
 800d80a:	fb0c fe02 	mul.w	lr, ip, r2
      if (wtemp > 0)
 800d80e:	f1be 0f00 	cmp.w	lr, #0
      wtemp = ((int32_t)hEstimatedSpeedUnit) * ((int32_t)*phForcedMecSpeedUnit);
 800d812:	4614      	mov	r4, r2
      if (wtemp > 0)
 800d814:	dd38      	ble.n	800d888 <STO_PLL_IsObserverConverged+0xa8>
        if (hEstimatedSpeedUnit < 0)
 800d816:	f1bc 0f00 	cmp.w	ip, #0
          hEstimatedSpeedUnit = -hEstimatedSpeedUnit;
 800d81a:	bfbc      	itt	lt
 800d81c:	f1cc 0c00 	rsblt	ip, ip, #0
 800d820:	fa0f fc8c 	sxthlt.w	ip, ip
        if (*phForcedMecSpeedUnit < 0)
 800d824:	2a00      	cmp	r2, #0
 800d826:	db34      	blt.n	800d892 <STO_PLL_IsObserverConverged+0xb2>
        if (true == pHandle->IsSpeedReliable)
 800d828:	f893 10f5 	ldrb.w	r1, [r3, #245]	; 0xf5
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_H);
 800d82c:	f893 e112 	ldrb.w	lr, [r3, #274]	; 0x112
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_L);
 800d830:	f893 2113 	ldrb.w	r2, [r3, #275]	; 0x113
        if (true == pHandle->IsSpeedReliable)
 800d834:	b349      	cbz	r1, 800d88a <STO_PLL_IsObserverConverged+0xaa>
          if ((uint16_t)hEstimatedSpeedUnit > pHandle->MinStartUpValidSpeed)
 800d836:	f8b3 5114 	ldrh.w	r5, [r3, #276]	; 0x114
 800d83a:	fa1f f18c 	uxth.w	r1, ip
 800d83e:	428d      	cmp	r5, r1
 800d840:	d223      	bcs.n	800d88a <STO_PLL_IsObserverConverged+0xaa>
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_L);
 800d842:	fb04 f202 	mul.w	r2, r4, r2
        hLowerThreshold = (int16_t)(wAux / ((int32_t)16));
 800d846:	2a00      	cmp	r2, #0
 800d848:	bfb8      	it	lt
 800d84a:	320f      	addlt	r2, #15
            if (hEstimatedSpeedUnit >= hLowerThreshold)
 800d84c:	f342 120f 	sbfx	r2, r2, #4, #16
 800d850:	4594      	cmp	ip, r2
 800d852:	db1a      	blt.n	800d88a <STO_PLL_IsObserverConverged+0xaa>
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_H);
 800d854:	fb04 fe0e 	mul.w	lr, r4, lr
        hUpperThreshold = (int16_t)(wAux / ((int32_t)16));
 800d858:	f1be 0f00 	cmp.w	lr, #0
 800d85c:	bfb8      	it	lt
 800d85e:	f10e 0e0f 	addlt.w	lr, lr, #15
              if (hEstimatedSpeedUnit <= hUpperThreshold)
 800d862:	f34e 1e0f 	sbfx	lr, lr, #4, #16
 800d866:	45f4      	cmp	ip, lr
 800d868:	dc0f      	bgt.n	800d88a <STO_PLL_IsObserverConverged+0xaa>
                pHandle->ConsistencyCounter++;
 800d86a:	f893 20f6 	ldrb.w	r2, [r3, #246]	; 0xf6
                if (pHandle->ConsistencyCounter >= pHandle->StartUpConsistThreshold)
 800d86e:	f893 1116 	ldrb.w	r1, [r3, #278]	; 0x116
                pHandle->ConsistencyCounter++;
 800d872:	3201      	adds	r2, #1
 800d874:	b2d2      	uxtb	r2, r2
                if (pHandle->ConsistencyCounter >= pHandle->StartUpConsistThreshold)
 800d876:	4291      	cmp	r1, r2
                pHandle->ConsistencyCounter++;
 800d878:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
                if (pHandle->ConsistencyCounter >= pHandle->StartUpConsistThreshold)
 800d87c:	d804      	bhi.n	800d888 <STO_PLL_IsObserverConverged+0xa8>
      pHandle->IsAlgorithmConverged = true;
 800d87e:	2001      	movs	r0, #1
      pHandle->_Super.bSpeedErrorNumber = 0U;
 800d880:	2200      	movs	r2, #0
      pHandle->IsAlgorithmConverged = true;
 800d882:	f883 00f8 	strb.w	r0, [r3, #248]	; 0xf8
      pHandle->_Super.bSpeedErrorNumber = 0U;
 800d886:	701a      	strb	r2, [r3, #0]
}
 800d888:	bd30      	pop	{r4, r5, pc}
                pHandle->ConsistencyCounter = 0U;
 800d88a:	2200      	movs	r2, #0
 800d88c:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
}
 800d890:	bd30      	pop	{r4, r5, pc}
          *phForcedMecSpeedUnit = -*phForcedMecSpeedUnit;
 800d892:	4252      	negs	r2, r2
 800d894:	b212      	sxth	r2, r2
 800d896:	800a      	strh	r2, [r1, #0]
        if (true == pHandle->IsSpeedReliable)
 800d898:	f893 10f5 	ldrb.w	r1, [r3, #245]	; 0xf5
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_H);
 800d89c:	f893 e112 	ldrb.w	lr, [r3, #274]	; 0x112
 800d8a0:	4614      	mov	r4, r2
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_L);
 800d8a2:	f893 2113 	ldrb.w	r2, [r3, #275]	; 0x113
        if (true == pHandle->IsSpeedReliable)
 800d8a6:	2900      	cmp	r1, #0
 800d8a8:	d0ef      	beq.n	800d88a <STO_PLL_IsObserverConverged+0xaa>
 800d8aa:	e7c4      	b.n	800d836 <STO_PLL_IsObserverConverged+0x56>

0800d8ac <STO_PLL_GetEstimatedBemf>:
    vaux.alpha = pHandle->hBemf_alfa_est;
    vaux.beta = pHandle->hBemf_beta_est;
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
  return (vaux);
 800d8ac:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800d8ae:	2200      	movs	r2, #0
 800d8b0:	b299      	uxth	r1, r3
 800d8b2:	f361 020f 	bfi	r2, r1, #0, #16
 800d8b6:	0c1b      	lsrs	r3, r3, #16
 800d8b8:	f363 421f 	bfi	r2, r3, #16, #16
{
 800d8bc:	b082      	sub	sp, #8
}
 800d8be:	4610      	mov	r0, r2
 800d8c0:	b002      	add	sp, #8
 800d8c2:	4770      	bx	lr

0800d8c4 <STO_PLL_GetEstimatedCurrent>:
  iaux.alpha = (int16_t)(pHandle->Ialfa_est / pHandle->hF1);
#endif

#ifndef FULL_MISRA_C_COMPLIANCY_STO_PLL
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  iaux.beta = (int16_t)(pHandle->Ibeta_est >> pHandle->F1LOG);
 800d8c4:	e9d0 2318 	ldrd	r2, r3, [r0, #96]	; 0x60
  iaux.alpha = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 800d8c8:	f8b0 c11c 	ldrh.w	ip, [r0, #284]	; 0x11c
 800d8cc:	fa42 f20c 	asr.w	r2, r2, ip
  iaux.beta = (int16_t)(pHandle->Ibeta_est / pHandle->hF1);
#endif
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
  return (iaux);
 800d8d0:	fa43 f30c 	asr.w	r3, r3, ip
 800d8d4:	b292      	uxth	r2, r2
 800d8d6:	2100      	movs	r1, #0
 800d8d8:	f362 010f 	bfi	r1, r2, #0, #16
 800d8dc:	b29b      	uxth	r3, r3
 800d8de:	f363 411f 	bfi	r1, r3, #16, #16
{
 800d8e2:	b082      	sub	sp, #8
}
 800d8e4:	4608      	mov	r0, r1
 800d8e6:	b002      	add	sp, #8
 800d8e8:	4770      	bx	lr
 800d8ea:	bf00      	nop

0800d8ec <STO_PLL_GetObserverGains>:
    /* Nothing to do */
  }
  else
  {
#endif
    *phC2 = pHandle->hC2;
 800d8ec:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 800d8f0:	800b      	strh	r3, [r1, #0]
    *phC4 = pHandle->hC4;
 800d8f2:	f9b0 3026 	ldrsh.w	r3, [r0, #38]	; 0x26
 800d8f6:	8013      	strh	r3, [r2, #0]
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
}
 800d8f8:	4770      	bx	lr
 800d8fa:	bf00      	nop

0800d8fc <STO_PLL_SetObserverGains>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hC2 = hhC1;
 800d8fc:	8441      	strh	r1, [r0, #34]	; 0x22
    pHandle->hC4 = hhC2;
 800d8fe:	84c2      	strh	r2, [r0, #38]	; 0x26
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
}
 800d900:	4770      	bx	lr
 800d902:	bf00      	nop

0800d904 <STO_SetPLLGains>:
/**
  * @brief  Stores in @p pHandle the new values @p hPgain and @p hIgain for PLL gains.
  * 
  */
__weak void STO_SetPLLGains(STO_PLL_Handle_t *pHandle, int16_t hPgain, int16_t hIgain)
{
 800d904:	b510      	push	{r4, lr}
 800d906:	b082      	sub	sp, #8
    /* Nothing to do */
  }
  else
  {
#endif
    PID_SetKP(&pHandle->PIRegulator, hPgain);
 800d908:	3034      	adds	r0, #52	; 0x34
{
 800d90a:	4614      	mov	r4, r2
    PID_SetKP(&pHandle->PIRegulator, hPgain);
 800d90c:	9001      	str	r0, [sp, #4]
 800d90e:	f7fe f9d9 	bl	800bcc4 <PID_SetKP>
    PID_SetKI(&pHandle->PIRegulator, hIgain);
 800d912:	9801      	ldr	r0, [sp, #4]
 800d914:	4621      	mov	r1, r4
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
}
 800d916:	b002      	add	sp, #8
 800d918:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    PID_SetKI(&pHandle->PIRegulator, hIgain);
 800d91c:	f7fe b9d4 	b.w	800bcc8 <PID_SetKI>

0800d920 <STO_OTF_ResetPLL>:
  }
  else
  {
#endif
    STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    PID_SetIntegralTerm(&pHdl->PIRegulator, (int32_t)0);
 800d920:	6800      	ldr	r0, [r0, #0]
 800d922:	2100      	movs	r1, #0
 800d924:	3034      	adds	r0, #52	; 0x34
 800d926:	f7fe b9d9 	b.w	800bcdc <PID_SetIntegralTerm>
 800d92a:	bf00      	nop

0800d92c <STO_SetPLL>:
  * @param  pHandle: Handler of the current instance of the STO component.
  * @param  hElSpeedDpp: Estimated average electrical speed expressed in dpp.
  * @param  hElAngle: Estimated electrical angle expressed in s16Degrees.
  */
__weak void STO_SetPLL(STO_PLL_Handle_t *pHandle, int16_t hElSpeedDpp, int16_t hElAngle)
{
 800d92c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    PID_SetIntegralTerm(&pHandle->PIRegulator, ((int32_t)hElSpeedDpp)
 800d92e:	f100 0734 	add.w	r7, r0, #52	; 0x34
{
 800d932:	4604      	mov	r4, r0
                                              * (int32_t)(PID_GetKIDivisor(&pHandle->PIRegulator)));
 800d934:	4638      	mov	r0, r7
{
 800d936:	4615      	mov	r5, r2
 800d938:	460e      	mov	r6, r1
                                              * (int32_t)(PID_GetKIDivisor(&pHandle->PIRegulator)));
 800d93a:	f7fe f9d9 	bl	800bcf0 <PID_GetKIDivisor>
    PID_SetIntegralTerm(&pHandle->PIRegulator, ((int32_t)hElSpeedDpp)
 800d93e:	fb00 f106 	mul.w	r1, r0, r6
 800d942:	4638      	mov	r0, r7
 800d944:	f7fe f9ca 	bl	800bcdc <PID_SetIntegralTerm>
    pHandle->_Super.hElAngle = hElAngle;
 800d948:	80a5      	strh	r5, [r4, #4]
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
}
 800d94a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d94c <STO_PLL_GetEstimatedBemfLevel>:
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  return ((MC_NULL == pHandle) ? 0 : pHandle->Est_Bemf_Level);
#else
  return (pHandle->Est_Bemf_Level);
#endif
}
 800d94c:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
 800d950:	4770      	bx	lr
 800d952:	bf00      	nop

0800d954 <STO_PLL_GetObservedBemfLevel>:
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  return ((MC_NULL == pHandle) ? 0 : pHandle->Obs_Bemf_Level);
#else
  return (pHandle->Obs_Bemf_Level);
#endif
}
 800d954:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
 800d958:	4770      	bx	lr
 800d95a:	bf00      	nop

0800d95c <STO_PLL_IsVarianceTight>:
  }
  else
  {
#endif
    const STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    tempStatus = pHdl->IsSpeedReliable;
 800d95c:	6803      	ldr	r3, [r0, #0]
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
  return (tempStatus);
}
 800d95e:	f893 00f5 	ldrb.w	r0, [r3, #245]	; 0xf5
 800d962:	4770      	bx	lr

0800d964 <STO_PLL_ForceConvergency1>:
  }
  else
  {
#endif
    STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    pHdl->ForceConvergency = true;
 800d964:	6803      	ldr	r3, [r0, #0]
 800d966:	2201      	movs	r2, #1
 800d968:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
}
 800d96c:	4770      	bx	lr
 800d96e:	bf00      	nop

0800d970 <STO_PLL_ForceConvergency2>:
  }
  else
  {
#endif
    STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    pHdl->ForceConvergency2 = true;
 800d970:	6803      	ldr	r3, [r0, #0]
 800d972:	2201      	movs	r2, #1
 800d974:	f883 2123 	strb.w	r2, [r3, #291]	; 0x123
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
}
 800d978:	4770      	bx	lr
 800d97a:	bf00      	nop

0800d97c <STO_SetMinStartUpValidSpeedUnit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->MinStartUpValidSpeed = hMinStartUpValidSpeed;
 800d97c:	f8a0 1114 	strh.w	r1, [r0, #276]	; 0x114
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
}
 800d980:	4770      	bx	lr
 800d982:	bf00      	nop

0800d984 <STO_SetDirection>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hForcedDirection = direction;
 800d984:	f880 1124 	strb.w	r1, [r0, #292]	; 0x124
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
}
 800d988:	4770      	bx	lr
 800d98a:	bf00      	nop

0800d98c <VSS_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->_Super.bSpeedErrorNumber = 0U;
 800d98c:	2300      	movs	r3, #0
    pHandle->hRemainingStep = 0U;
    pHandle->hElAngleAccu = 0;

    pHandle->bTransitionStarted = false;
    pHandle->bTransitionEnded = false;
    pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 800d98e:	8ec2      	ldrh	r2, [r0, #54]	; 0x36
    pHandle->_Super.bSpeedErrorNumber = 0U;
 800d990:	7003      	strb	r3, [r0, #0]
    pHandle->wElSpeedDpp32 = 0;
 800d992:	e9c0 3308 	strd	r3, r3, [r0, #32]
    pHandle->_Super.hElAngle = 0;
 800d996:	6043      	str	r3, [r0, #4]
    pHandle->_Super.hAvrMecSpeedUnit = 0;
 800d998:	60c3      	str	r3, [r0, #12]
    pHandle->_Super.hMecAccelUnitP = 0;
 800d99a:	8243      	strh	r3, [r0, #18]
    pHandle->hRemainingStep = 0U;
 800d99c:	8503      	strh	r3, [r0, #40]	; 0x28
    pHandle->bTransitionStarted = false;
 800d99e:	8583      	strh	r3, [r0, #44]	; 0x2c
    pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 800d9a0:	85c2      	strh	r2, [r0, #46]	; 0x2e
    pHandle->hElAngleAccu = 0;
 800d9a2:	6303      	str	r3, [r0, #48]	; 0x30

    pHandle->bCopyObserver = false;
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
}
 800d9a4:	4770      	bx	lr
 800d9a6:	bf00      	nop

0800d9a8 <VSS_Init>:
{
 800d9a8:	b508      	push	{r3, lr}
  VSS_Clear(pHandle);
 800d9aa:	f7ff ffef 	bl	800d98c <VSS_Clear>
}
 800d9ae:	bd08      	pop	{r3, pc}

0800d9b0 <VSS_CalcElAngle>:
    int16_t hAngleDiff;
    int32_t wAux;
    int16_t hAngleCorr;
    int16_t hSignCorr = 1;

    if (true == pHandle->bCopyObserver)
 800d9b0:	f890 2033 	ldrb.w	r2, [r0, #51]	; 0x33
{
 800d9b4:	4603      	mov	r3, r0
    if (true == pHandle->bCopyObserver)
 800d9b6:	b11a      	cbz	r2, 800d9c0 <VSS_CalcElAngle+0x10>
    {
      hRetAngle = *(int16_t *)pInputVars_str;
 800d9b8:	f9b1 0000 	ldrsh.w	r0, [r1]
      {
        hRetAngle = pHandle->hElAngleAccu;
      }
    }

    pHandle->_Super.hElAngle = hRetAngle;
 800d9bc:	8098      	strh	r0, [r3, #4]
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
  return (hRetAngle);
}
 800d9be:	4770      	bx	lr
{
 800d9c0:	b530      	push	{r4, r5, lr}
      pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 800d9c2:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 800d9c6:	8e00      	ldrh	r0, [r0, #48]	; 0x30
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 800d9c8:	88dd      	ldrh	r5, [r3, #6]
      if (true == pHandle->bTransitionStarted)
 800d9ca:	f893 402c 	ldrb.w	r4, [r3, #44]	; 0x2c
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 800d9ce:	785a      	ldrb	r2, [r3, #1]
 800d9d0:	fb9c f2f2 	sdiv	r2, ip, r2
      pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 800d9d4:	4460      	add	r0, ip
 800d9d6:	fa1f fe80 	uxth.w	lr, r0
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 800d9da:	442a      	add	r2, r5
      pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 800d9dc:	b200      	sxth	r0, r0
 800d9de:	8618      	strh	r0, [r3, #48]	; 0x30
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 800d9e0:	80da      	strh	r2, [r3, #6]
      if (true == pHandle->bTransitionStarted)
 800d9e2:	b1fc      	cbz	r4, 800da24 <VSS_CalcElAngle+0x74>
        if (0 == pHandle->hTransitionRemainingSteps)
 800d9e4:	f9b3 202e 	ldrsh.w	r2, [r3, #46]	; 0x2e
 800d9e8:	b1f2      	cbz	r2, 800da28 <VSS_CalcElAngle+0x78>
          pHandle->hTransitionRemainingSteps--;
 800d9ea:	3a01      	subs	r2, #1
 800d9ec:	b212      	sxth	r2, r2
 800d9ee:	85da      	strh	r2, [r3, #46]	; 0x2e
          if (pHandle->_Super.hElSpeedDpp >= 0)
 800d9f0:	f1bc 0f00 	cmp.w	ip, #0
            hAngleDiff = *(int16_t *)pInputVars_str - pHandle->hElAngleAccu;
 800d9f4:	8809      	ldrh	r1, [r1, #0]
          if (pHandle->_Super.hElSpeedDpp >= 0)
 800d9f6:	db26      	blt.n	800da46 <VSS_CalcElAngle+0x96>
            hAngleDiff = *(int16_t *)pInputVars_str - pHandle->hElAngleAccu;
 800d9f8:	eba1 0e0e 	sub.w	lr, r1, lr
 800d9fc:	fa0f fe8e 	sxth.w	lr, lr
 800da00:	2501      	movs	r5, #1
          hAngleCorr = (int16_t)(wAux / pHandle->hTransitionSteps);
 800da02:	f9b3 4036 	ldrsh.w	r4, [r3, #54]	; 0x36
          wAux = (int32_t)hAngleDiff * pHandle->hTransitionRemainingSteps;
 800da06:	fb0e f202 	mul.w	r2, lr, r2
          if (hAngleDiff >= 0)
 800da0a:	f1be 0f00 	cmp.w	lr, #0
          hAngleCorr = (int16_t)(wAux / pHandle->hTransitionSteps);
 800da0e:	fb92 f2f4 	sdiv	r2, r2, r4
          hAngleCorr *= hSignCorr;
 800da12:	fb12 f205 	smulbb	r2, r2, r5
 800da16:	b292      	uxth	r2, r2
          if (hAngleDiff >= 0)
 800da18:	db0e      	blt.n	800da38 <VSS_CalcElAngle+0x88>
            pHandle->bTransitionLocked = true;
 800da1a:	2001      	movs	r0, #1
            hRetAngle = *(int16_t *)pInputVars_str - hAngleCorr;
 800da1c:	1a8a      	subs	r2, r1, r2
            pHandle->bTransitionLocked = true;
 800da1e:	f883 0032 	strb.w	r0, [r3, #50]	; 0x32
            hRetAngle = *(int16_t *)pInputVars_str - hAngleCorr;
 800da22:	b210      	sxth	r0, r2
    pHandle->_Super.hElAngle = hRetAngle;
 800da24:	8098      	strh	r0, [r3, #4]
}
 800da26:	bd30      	pop	{r4, r5, pc}
          hRetAngle = *(int16_t *)pInputVars_str;
 800da28:	f9b1 0000 	ldrsh.w	r0, [r1]
          pHandle->_Super.bSpeedErrorNumber = 0U;
 800da2c:	701a      	strb	r2, [r3, #0]
          pHandle->bTransitionEnded = true;
 800da2e:	2401      	movs	r4, #1
 800da30:	f883 402d 	strb.w	r4, [r3, #45]	; 0x2d
    pHandle->_Super.hElAngle = hRetAngle;
 800da34:	8098      	strh	r0, [r3, #4]
}
 800da36:	bd30      	pop	{r4, r5, pc}
            if (false == pHandle->bTransitionLocked)
 800da38:	f893 4032 	ldrb.w	r4, [r3, #50]	; 0x32
 800da3c:	2c00      	cmp	r4, #0
 800da3e:	d0f1      	beq.n	800da24 <VSS_CalcElAngle+0x74>
              hRetAngle = *(int16_t *)pInputVars_str + hAngleCorr;
 800da40:	440a      	add	r2, r1
 800da42:	b210      	sxth	r0, r2
 800da44:	e7ee      	b.n	800da24 <VSS_CalcElAngle+0x74>
            hAngleDiff = pHandle->hElAngleAccu - *(int16_t *)pInputVars_str;
 800da46:	ebae 0e01 	sub.w	lr, lr, r1
 800da4a:	fa0f fe8e 	sxth.w	lr, lr
 800da4e:	f64f 75ff 	movw	r5, #65535	; 0xffff
 800da52:	e7d6      	b.n	800da02 <VSS_CalcElAngle+0x52>

0800da54 <VSS_CalcAvrgMecSpeedUnit>:
    SpeedSensorReliability = false;
  }
  else
  {
#endif
    if (pHandle->hRemainingStep > 1u)
 800da54:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 800da56:	2b01      	cmp	r3, #1
 800da58:	d923      	bls.n	800daa2 <VSS_CalcAvrgMecSpeedUnit+0x4e>
{
 800da5a:	b410      	push	{r4}
    {
      pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 800da5c:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800da5e:	6a04      	ldr	r4, [r0, #32]
      pHandle->_Super.hElSpeedDpp = (int16_t)(pHandle->wElSpeedDpp32 / 65536);
#endif

      /* Convert dpp into MecUnit */
      *hMecSpeedUnit = (int16_t)((((int32_t)pHandle->_Super.hElSpeedDpp)
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 800da60:	8b43      	ldrh	r3, [r0, #26]
      pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 800da62:	4422      	add	r2, r4
      pHandle->_Super.hElSpeedDpp = (int16_t)(pHandle->wElSpeedDpp32 >> 16);
 800da64:	ea4f 4c22 	mov.w	ip, r2, asr #16
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 800da68:	69c4      	ldr	r4, [r0, #28]
      pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 800da6a:	6242      	str	r2, [r0, #36]	; 0x24
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 800da6c:	fb0c f303 	mul.w	r3, ip, r3
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 800da70:	7842      	ldrb	r2, [r0, #1]
      pHandle->_Super.hElSpeedDpp = (int16_t)(pHandle->wElSpeedDpp32 >> 16);
 800da72:	f8a0 c00e 	strh.w	ip, [r0, #14]
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 800da76:	eb03 0383 	add.w	r3, r3, r3, lsl #2
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 800da7a:	fb04 f202 	mul.w	r2, r4, r2
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 800da7e:	005b      	lsls	r3, r3, #1
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 800da80:	fb93 f3f2 	sdiv	r3, r3, r2
      *hMecSpeedUnit = (int16_t)((((int32_t)pHandle->_Super.hElSpeedDpp)
 800da84:	b21b      	sxth	r3, r3
 800da86:	800b      	strh	r3, [r1, #0]
      pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
      pHandle->hRemainingStep--;
 800da88:	8d02      	ldrh	r2, [r0, #40]	; 0x28
      pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 800da8a:	8183      	strh	r3, [r0, #12]
      pHandle->hRemainingStep--;
 800da8c:	1e53      	subs	r3, r2, #1
 800da8e:	8503      	strh	r3, [r0, #40]	; 0x28
    else
    {
      *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
    }
    /* If the transition is not done yet, we already know that speed is not reliable */
    if (false == pHandle->bTransitionEnded)
 800da90:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 800da94:	b983      	cbnz	r3, 800dab8 <VSS_CalcAvrgMecSpeedUnit+0x64>
    {
      pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 800da96:	78c2      	ldrb	r2, [r0, #3]
 800da98:	7002      	strb	r2, [r0, #0]
    }
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
  return (SpeedSensorReliability);
}
 800da9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800da9e:	4618      	mov	r0, r3
 800daa0:	4770      	bx	lr
    else if (1U == pHandle->hRemainingStep)
 800daa2:	d00d      	beq.n	800dac0 <VSS_CalcAvrgMecSpeedUnit+0x6c>
      *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 800daa4:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 800daa8:	800b      	strh	r3, [r1, #0]
    if (false == pHandle->bTransitionEnded)
 800daaa:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 800daae:	bb03      	cbnz	r3, 800daf2 <VSS_CalcAvrgMecSpeedUnit+0x9e>
      pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 800dab0:	78c2      	ldrb	r2, [r0, #3]
 800dab2:	7002      	strb	r2, [r0, #0]
}
 800dab4:	4618      	mov	r0, r3
 800dab6:	4770      	bx	lr
 800dab8:	f85d 4b04 	ldr.w	r4, [sp], #4
      SpeedSensorReliability = SPD_IsMecSpeedReliable(&pHandle->_Super, hMecSpeedUnit);
 800dabc:	f7ff bb64 	b.w	800d188 <SPD_IsMecSpeedReliable>
      *hMecSpeedUnit = pHandle->hFinalMecSpeedUnit;
 800dac0:	f9b0 c02a 	ldrsh.w	ip, [r0, #42]	; 0x2a
 800dac4:	f8a1 c000 	strh.w	ip, [r1]
                                          / (((int32_t)SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800dac8:	8b43      	ldrh	r3, [r0, #26]
      pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)*hMecSpeedUnit) * ((int32_t)pHandle->_Super.DPPConvFactor))
 800daca:	69c2      	ldr	r2, [r0, #28]
      pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 800dacc:	f8a0 c00c 	strh.w	ip, [r0, #12]
                                          / (((int32_t)SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800dad0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800dad4:	005b      	lsls	r3, r3, #1
      pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)*hMecSpeedUnit) * ((int32_t)pHandle->_Super.DPPConvFactor))
 800dad6:	fb02 f20c 	mul.w	r2, r2, ip
                                          / (((int32_t)SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800dada:	fb92 f2f3 	sdiv	r2, r2, r3
      pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 800dade:	7843      	ldrb	r3, [r0, #1]
 800dae0:	fb13 f302 	smulbb	r3, r3, r2
 800dae4:	81c3      	strh	r3, [r0, #14]
    if (false == pHandle->bTransitionEnded)
 800dae6:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
      pHandle->hRemainingStep = 0U;
 800daea:	2200      	movs	r2, #0
 800daec:	8502      	strh	r2, [r0, #40]	; 0x28
    if (false == pHandle->bTransitionEnded)
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d0de      	beq.n	800dab0 <VSS_CalcAvrgMecSpeedUnit+0x5c>
      SpeedSensorReliability = SPD_IsMecSpeedReliable(&pHandle->_Super, hMecSpeedUnit);
 800daf2:	f7ff bb49 	b.w	800d188 <SPD_IsMecSpeedReliable>
 800daf6:	bf00      	nop

0800daf8 <VSS_SetMecAngle>:
  }
  else
  {
#endif
    pHandle->hElAngleAccu = hMecAngle;
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 800daf8:	7843      	ldrb	r3, [r0, #1]
    pHandle->hElAngleAccu = hMecAngle;
 800dafa:	8601      	strh	r1, [r0, #48]	; 0x30
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 800dafc:	fb91 f3f3 	sdiv	r3, r1, r3
    pHandle->_Super.hElAngle = hMecAngle;
 800db00:	8081      	strh	r1, [r0, #4]
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 800db02:	80c3      	strh	r3, [r0, #6]
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
}
 800db04:	4770      	bx	lr
 800db06:	bf00      	nop

0800db08 <VSS_SetMecAcceleration>:
    int32_t wMecAccDppP32;
    uint16_t hNbrStep;
    int16_t hCurrentMecSpeedDpp;
    int16_t hFinalMecSpeedDpp;

    if (false == pHandle->bTransitionStarted)
 800db08:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800db0c:	b99b      	cbnz	r3, 800db36 <VSS_SetMecAcceleration+0x2e>
{
 800db0e:	b510      	push	{r4, lr}
    {
      if (0U == hDurationms)
 800db10:	b992      	cbnz	r2, 800db38 <VSS_SetMecAcceleration+0x30>
        pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;

        pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)hFinalMecSpeedUnit)
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
                                              / (((int32_t)SPEED_UNIT)
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800db12:	8b43      	ldrh	r3, [r0, #26]
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
 800db14:	69c4      	ldr	r4, [r0, #28]
        pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;
 800db16:	8181      	strh	r1, [r0, #12]
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800db18:	eb03 0383 	add.w	r3, r3, r3, lsl #2
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
 800db1c:	fb04 fc01 	mul.w	ip, r4, r1
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800db20:	005b      	lsls	r3, r3, #1
                                              / (((int32_t)SPEED_UNIT)
 800db22:	fb9c f3f3 	sdiv	r3, ip, r3

        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 800db26:	f890 c001 	ldrb.w	ip, [r0, #1]

        pHandle->hRemainingStep = 0U;
 800db2a:	8502      	strh	r2, [r0, #40]	; 0x28
        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 800db2c:	fb1c f303 	smulbb	r3, ip, r3
 800db30:	81c3      	strh	r3, [r0, #14]

        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800db32:	8541      	strh	r1, [r0, #42]	; 0x2a
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
}
 800db34:	bd10      	pop	{r4, pc}
 800db36:	4770      	bx	lr
        hNbrStep = (uint16_t)((((uint32_t)hDurationms) * ((uint32_t)pHandle->hSpeedSamplingFreqHz)) / 1000U);
 800db38:	8e83      	ldrh	r3, [r0, #52]	; 0x34
 800db3a:	4c16      	ldr	r4, [pc, #88]	; (800db94 <VSS_SetMecAcceleration+0x8c>)
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 800db3c:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
        hNbrStep = (uint16_t)((((uint32_t)hDurationms) * ((uint32_t)pHandle->hSpeedSamplingFreqHz)) / 1000U);
 800db40:	fb02 f303 	mul.w	r3, r2, r3
 800db44:	fba4 4303 	umull	r4, r3, r4, r3
 800db48:	f3c3 138f 	ubfx	r3, r3, #6, #16
        hNbrStep++;
 800db4c:	3301      	adds	r3, #1
 800db4e:	b29b      	uxth	r3, r3
        pHandle->hRemainingStep = hNbrStep;
 800db50:	8503      	strh	r3, [r0, #40]	; 0x28
        if (0U == hNbrStep)
 800db52:	b923      	cbnz	r3, 800db5e <VSS_SetMecAcceleration+0x56>
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 800db54:	ea4f 430c 	mov.w	r3, ip, lsl #16
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800db58:	8541      	strh	r1, [r0, #42]	; 0x2a
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 800db5a:	6243      	str	r3, [r0, #36]	; 0x24
}
 800db5c:	bd10      	pop	{r4, pc}
                                    / (((int32_t )SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800db5e:	8b42      	ldrh	r2, [r0, #26]
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 800db60:	7844      	ldrb	r4, [r0, #1]
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800db62:	8541      	strh	r1, [r0, #42]	; 0x2a
                                    / (((int32_t )SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800db64:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800db68:	ea4f 0e42 	mov.w	lr, r2, lsl #1
        hFinalMecSpeedDpp = (int16_t)((((int32_t )hFinalMecSpeedUnit) * ((int32_t)pHandle->_Super.DPPConvFactor))
 800db6c:	69c2      	ldr	r2, [r0, #28]
 800db6e:	fb01 f202 	mul.w	r2, r1, r2
                                    / (((int32_t )SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800db72:	fb92 f2fe 	sdiv	r2, r2, lr
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 800db76:	fb9c fef4 	sdiv	lr, ip, r4
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 800db7a:	eba2 020e 	sub.w	r2, r2, lr
                         * ((int32_t)65536)) / ((int32_t )hNbrStep);
 800db7e:	0412      	lsls	r2, r2, #16
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 800db80:	fb92 f3f3 	sdiv	r3, r2, r3
          pHandle->wElAccDppP32 = wMecAccDppP32 * ((int16_t)pHandle->_Super.bElToMecRatio);
 800db84:	fb04 f303 	mul.w	r3, r4, r3
 800db88:	6203      	str	r3, [r0, #32]
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 800db8a:	ea4f 430c 	mov.w	r3, ip, lsl #16
 800db8e:	6243      	str	r3, [r0, #36]	; 0x24
    }
 800db90:	e7e4      	b.n	800db5c <VSS_SetMecAcceleration+0x54>
 800db92:	bf00      	nop
 800db94:	10624dd3 	.word	0x10624dd3

0800db98 <VSS_SetStartTransition>:
    /* nothing to do */
  }
  else
  {
#endif
    if (true == bCommand)
 800db98:	b151      	cbz	r1, 800dbb0 <VSS_SetStartTransition+0x18>
    {
      pHandle->bTransitionStarted = true;

      if (0 == pHandle->hTransitionSteps)
 800db9a:	f9b0 3036 	ldrsh.w	r3, [r0, #54]	; 0x36
      pHandle->bTransitionStarted = true;
 800db9e:	2201      	movs	r2, #1
 800dba0:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
      if (0 == pHandle->hTransitionSteps)
 800dba4:	b923      	cbnz	r3, 800dbb0 <VSS_SetStartTransition+0x18>
      {
        pHandle->bTransitionEnded = true;
 800dba6:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
        pHandle->_Super.bSpeedErrorNumber = 0U;
 800dbaa:	7003      	strb	r3, [r0, #0]
        bAux = false;
 800dbac:	4618      	mov	r0, r3
    }
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
  return (bAux);
}
 800dbae:	4770      	bx	lr
  bool bAux = true;
 800dbb0:	2001      	movs	r0, #1
 800dbb2:	4770      	bx	lr

0800dbb4 <VSS_TransitionEnded>:
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  return ((MC_NULL == pHandle) ? false : pHandle->bTransitionEnded);
#else
  return (pHandle->bTransitionEnded);
#endif
}
 800dbb4:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
 800dbb8:	4770      	bx	lr
 800dbba:	bf00      	nop

0800dbbc <ai_buffer_get_size>:
 800dbbc:	b378      	cbz	r0, 800dc1e <ai_buffer_get_size+0x62>
 800dbbe:	b410      	push	{r4}
 800dbc0:	6803      	ldr	r3, [r0, #0]
 800dbc2:	4a17      	ldr	r2, [pc, #92]	; (800dc20 <ai_buffer_get_size+0x64>)
 800dbc4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800dbc8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800dbcc:	4293      	cmp	r3, r2
 800dbce:	d01e      	beq.n	800dc0e <ai_buffer_get_size+0x52>
 800dbd0:	6984      	ldr	r4, [r0, #24]
 800dbd2:	6862      	ldr	r2, [r4, #4]
 800dbd4:	7d03      	ldrb	r3, [r0, #20]
 800dbd6:	6941      	ldr	r1, [r0, #20]
 800dbd8:	f1a3 0301 	sub.w	r3, r3, #1
 800dbdc:	fab3 f383 	clz	r3, r3
 800dbe0:	095b      	lsrs	r3, r3, #5
 800dbe2:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 800dbe6:	f3c1 2017 	ubfx	r0, r1, #8, #24
 800dbea:	da0b      	bge.n	800dc04 <ai_buffer_get_size+0x48>
 800dbec:	2b01      	cmp	r3, #1
 800dbee:	d102      	bne.n	800dbf6 <ai_buffer_get_size+0x3a>
 800dbf0:	2802      	cmp	r0, #2
 800dbf2:	d007      	beq.n	800dc04 <ai_buffer_get_size+0x48>
 800dbf4:	2302      	movs	r3, #2
 800dbf6:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800dbfa:	3301      	adds	r3, #1
 800dbfc:	4298      	cmp	r0, r3
 800dbfe:	fb01 f202 	mul.w	r2, r1, r2
 800dc02:	d1f3      	bne.n	800dbec <ai_buffer_get_size+0x30>
 800dc04:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 800dc08:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc0c:	4770      	bx	lr
 800dc0e:	2900      	cmp	r1, #0
 800dc10:	d0de      	beq.n	800dbd0 <ai_buffer_get_size+0x14>
 800dc12:	6984      	ldr	r4, [r0, #24]
 800dc14:	6863      	ldr	r3, [r4, #4]
 800dc16:	331f      	adds	r3, #31
 800dc18:	f023 021f 	bic.w	r2, r3, #31
 800dc1c:	e7da      	b.n	800dbd4 <ai_buffer_get_size+0x18>
 800dc1e:	4770      	bx	lr
 800dc20:	000400c0 	.word	0x000400c0

0800dc24 <ai_buffer_array_sane>:
 800dc24:	b138      	cbz	r0, 800dc36 <ai_buffer_array_sane+0x12>
 800dc26:	6843      	ldr	r3, [r0, #4]
 800dc28:	b123      	cbz	r3, 800dc34 <ai_buffer_array_sane+0x10>
 800dc2a:	8840      	ldrh	r0, [r0, #2]
 800dc2c:	3800      	subs	r0, #0
 800dc2e:	bf18      	it	ne
 800dc30:	2001      	movne	r0, #1
 800dc32:	4770      	bx	lr
 800dc34:	4618      	mov	r0, r3
 800dc36:	4770      	bx	lr

0800dc38 <ai_buffer_array_item_set_address>:
 800dc38:	b150      	cbz	r0, 800dc50 <ai_buffer_array_item_set_address+0x18>
 800dc3a:	6843      	ldr	r3, [r0, #4]
 800dc3c:	b14b      	cbz	r3, 800dc52 <ai_buffer_array_item_set_address+0x1a>
 800dc3e:	8840      	ldrh	r0, [r0, #2]
 800dc40:	b900      	cbnz	r0, 800dc44 <ai_buffer_array_item_set_address+0xc>
 800dc42:	4770      	bx	lr
 800dc44:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800dc48:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800dc4c:	2001      	movs	r0, #1
 800dc4e:	604a      	str	r2, [r1, #4]
 800dc50:	4770      	bx	lr
 800dc52:	4618      	mov	r0, r3
 800dc54:	4770      	bx	lr
 800dc56:	bf00      	nop

0800dc58 <_ai_platform_acquire_crc>:
 800dc58:	2001      	movs	r0, #1
 800dc5a:	4770      	bx	lr

0800dc5c <_ai_platform_release_crc>:
 800dc5c:	4770      	bx	lr
 800dc5e:	bf00      	nop

0800dc60 <ai_platform_get_weights_map>:
 800dc60:	2a00      	cmp	r2, #0
 800dc62:	d037      	beq.n	800dcd4 <ai_platform_get_weights_map+0x74>
 800dc64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc66:	4604      	mov	r4, r0
 800dc68:	b1a0      	cbz	r0, 800dc94 <ai_platform_get_weights_map+0x34>
 800dc6a:	460f      	mov	r7, r1
 800dc6c:	b191      	cbz	r1, 800dc94 <ai_platform_get_weights_map+0x34>
 800dc6e:	4b25      	ldr	r3, [pc, #148]	; (800dd04 <ai_platform_get_weights_map+0xa4>)
 800dc70:	6810      	ldr	r0, [r2, #0]
 800dc72:	4298      	cmp	r0, r3
 800dc74:	4615      	mov	r5, r2
 800dc76:	d00f      	beq.n	800dc98 <ai_platform_get_weights_map+0x38>
 800dc78:	6855      	ldr	r5, [r2, #4]
 800dc7a:	b15d      	cbz	r5, 800dc94 <ai_platform_get_weights_map+0x34>
 800dc7c:	682e      	ldr	r6, [r5, #0]
 800dc7e:	429e      	cmp	r6, r3
 800dc80:	d02a      	beq.n	800dcd8 <ai_platform_get_weights_map+0x78>
 800dc82:	f1a1 0001 	sub.w	r0, r1, #1
 800dc86:	6025      	str	r5, [r4, #0]
 800dc88:	fab0 f080 	clz	r0, r0
 800dc8c:	0940      	lsrs	r0, r0, #5
 800dc8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc90:	42a7      	cmp	r7, r4
 800dc92:	d034      	beq.n	800dcfe <ai_platform_get_weights_map+0x9e>
 800dc94:	2000      	movs	r0, #0
 800dc96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc98:	1d10      	adds	r0, r2, #4
 800dc9a:	f7ff ffc3 	bl	800dc24 <ai_buffer_array_sane>
 800dc9e:	2800      	cmp	r0, #0
 800dca0:	d0f8      	beq.n	800dc94 <ai_platform_get_weights_map+0x34>
 800dca2:	88eb      	ldrh	r3, [r5, #6]
 800dca4:	429f      	cmp	r7, r3
 800dca6:	d1f5      	bne.n	800dc94 <ai_platform_get_weights_map+0x34>
 800dca8:	f04f 0e00 	mov.w	lr, #0
 800dcac:	1f23      	subs	r3, r4, #4
 800dcae:	4670      	mov	r0, lr
 800dcb0:	68aa      	ldr	r2, [r5, #8]
 800dcb2:	eb02 0c0e 	add.w	ip, r2, lr
 800dcb6:	f10e 0e1c 	add.w	lr, lr, #28
 800dcba:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800dcbe:	b124      	cbz	r4, 800dcca <ai_platform_get_weights_map+0x6a>
 800dcc0:	3001      	adds	r0, #1
 800dcc2:	4287      	cmp	r7, r0
 800dcc4:	f843 4f04 	str.w	r4, [r3, #4]!
 800dcc8:	d1f2      	bne.n	800dcb0 <ai_platform_get_weights_map+0x50>
 800dcca:	1a38      	subs	r0, r7, r0
 800dccc:	fab0 f080 	clz	r0, r0
 800dcd0:	0940      	lsrs	r0, r0, #5
 800dcd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dcd4:	2000      	movs	r0, #0
 800dcd6:	4770      	bx	lr
 800dcd8:	1f23      	subs	r3, r4, #4
 800dcda:	4628      	mov	r0, r5
 800dcdc:	2400      	movs	r4, #0
 800dcde:	e000      	b.n	800dce2 <ai_platform_get_weights_map+0x82>
 800dce0:	4614      	mov	r4, r2
 800dce2:	f850 2f04 	ldr.w	r2, [r0, #4]!
 800dce6:	42b2      	cmp	r2, r6
 800dce8:	d0d2      	beq.n	800dc90 <ai_platform_get_weights_map+0x30>
 800dcea:	f843 2f04 	str.w	r2, [r3, #4]!
 800dcee:	1c62      	adds	r2, r4, #1
 800dcf0:	4297      	cmp	r7, r2
 800dcf2:	d1f5      	bne.n	800dce0 <ai_platform_get_weights_map+0x80>
 800dcf4:	3402      	adds	r4, #2
 800dcf6:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800dcfa:	42b3      	cmp	r3, r6
 800dcfc:	d1ca      	bne.n	800dc94 <ai_platform_get_weights_map+0x34>
 800dcfe:	2001      	movs	r0, #1
 800dd00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd02:	bf00      	nop
 800dd04:	a1facade 	.word	0xa1facade

0800dd08 <ai_platform_get_activations_map>:
 800dd08:	2a00      	cmp	r2, #0
 800dd0a:	d038      	beq.n	800dd7e <ai_platform_get_activations_map+0x76>
 800dd0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd0e:	4604      	mov	r4, r0
 800dd10:	b1a0      	cbz	r0, 800dd3c <ai_platform_get_activations_map+0x34>
 800dd12:	460f      	mov	r7, r1
 800dd14:	b191      	cbz	r1, 800dd3c <ai_platform_get_activations_map+0x34>
 800dd16:	4b25      	ldr	r3, [pc, #148]	; (800ddac <ai_platform_get_activations_map+0xa4>)
 800dd18:	6810      	ldr	r0, [r2, #0]
 800dd1a:	4298      	cmp	r0, r3
 800dd1c:	4615      	mov	r5, r2
 800dd1e:	d00f      	beq.n	800dd40 <ai_platform_get_activations_map+0x38>
 800dd20:	6a15      	ldr	r5, [r2, #32]
 800dd22:	b15d      	cbz	r5, 800dd3c <ai_platform_get_activations_map+0x34>
 800dd24:	682e      	ldr	r6, [r5, #0]
 800dd26:	429e      	cmp	r6, r3
 800dd28:	d02b      	beq.n	800dd82 <ai_platform_get_activations_map+0x7a>
 800dd2a:	f1a1 0001 	sub.w	r0, r1, #1
 800dd2e:	6025      	str	r5, [r4, #0]
 800dd30:	fab0 f080 	clz	r0, r0
 800dd34:	0940      	lsrs	r0, r0, #5
 800dd36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd38:	42a7      	cmp	r7, r4
 800dd3a:	d035      	beq.n	800dda8 <ai_platform_get_activations_map+0xa0>
 800dd3c:	2000      	movs	r0, #0
 800dd3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd40:	f102 000c 	add.w	r0, r2, #12
 800dd44:	f7ff ff6e 	bl	800dc24 <ai_buffer_array_sane>
 800dd48:	2800      	cmp	r0, #0
 800dd4a:	d0f7      	beq.n	800dd3c <ai_platform_get_activations_map+0x34>
 800dd4c:	89eb      	ldrh	r3, [r5, #14]
 800dd4e:	429f      	cmp	r7, r3
 800dd50:	d1f4      	bne.n	800dd3c <ai_platform_get_activations_map+0x34>
 800dd52:	f04f 0e00 	mov.w	lr, #0
 800dd56:	1f23      	subs	r3, r4, #4
 800dd58:	4670      	mov	r0, lr
 800dd5a:	692a      	ldr	r2, [r5, #16]
 800dd5c:	eb02 0c0e 	add.w	ip, r2, lr
 800dd60:	f10e 0e1c 	add.w	lr, lr, #28
 800dd64:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800dd68:	b124      	cbz	r4, 800dd74 <ai_platform_get_activations_map+0x6c>
 800dd6a:	3001      	adds	r0, #1
 800dd6c:	4287      	cmp	r7, r0
 800dd6e:	f843 4f04 	str.w	r4, [r3, #4]!
 800dd72:	d1f2      	bne.n	800dd5a <ai_platform_get_activations_map+0x52>
 800dd74:	1a38      	subs	r0, r7, r0
 800dd76:	fab0 f080 	clz	r0, r0
 800dd7a:	0940      	lsrs	r0, r0, #5
 800dd7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd7e:	2000      	movs	r0, #0
 800dd80:	4770      	bx	lr
 800dd82:	1f23      	subs	r3, r4, #4
 800dd84:	4628      	mov	r0, r5
 800dd86:	2400      	movs	r4, #0
 800dd88:	e000      	b.n	800dd8c <ai_platform_get_activations_map+0x84>
 800dd8a:	4614      	mov	r4, r2
 800dd8c:	f850 2f04 	ldr.w	r2, [r0, #4]!
 800dd90:	42b2      	cmp	r2, r6
 800dd92:	d0d1      	beq.n	800dd38 <ai_platform_get_activations_map+0x30>
 800dd94:	f843 2f04 	str.w	r2, [r3, #4]!
 800dd98:	1c62      	adds	r2, r4, #1
 800dd9a:	4297      	cmp	r7, r2
 800dd9c:	d1f5      	bne.n	800dd8a <ai_platform_get_activations_map+0x82>
 800dd9e:	3402      	adds	r4, #2
 800dda0:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800dda4:	42b3      	cmp	r3, r6
 800dda6:	d1c9      	bne.n	800dd3c <ai_platform_get_activations_map+0x34>
 800dda8:	2001      	movs	r0, #1
 800ddaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ddac:	a1facade 	.word	0xa1facade

0800ddb0 <ai_platform_bind_network_params>:
 800ddb0:	b1a0      	cbz	r0, 800dddc <ai_platform_bind_network_params+0x2c>
 800ddb2:	b1b1      	cbz	r1, 800dde2 <ai_platform_bind_network_params+0x32>
 800ddb4:	b1c2      	cbz	r2, 800dde8 <ai_platform_bind_network_params+0x38>
 800ddb6:	b410      	push	{r4}
 800ddb8:	4603      	mov	r3, r0
 800ddba:	4c0d      	ldr	r4, [pc, #52]	; (800ddf0 <ai_platform_bind_network_params+0x40>)
 800ddbc:	f843 4b04 	str.w	r4, [r3], #4
 800ddc0:	f100 0c0c 	add.w	ip, r0, #12
 800ddc4:	c903      	ldmia	r1, {r0, r1}
 800ddc6:	e883 0003 	stmia.w	r3, {r0, r1}
 800ddca:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ddce:	e88c 0003 	stmia.w	ip, {r0, r1}
 800ddd2:	2301      	movs	r3, #1
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ddda:	4770      	bx	lr
 800dddc:	4603      	mov	r3, r0
 800ddde:	4618      	mov	r0, r3
 800dde0:	4770      	bx	lr
 800dde2:	460b      	mov	r3, r1
 800dde4:	4618      	mov	r0, r3
 800dde6:	4770      	bx	lr
 800dde8:	4613      	mov	r3, r2
 800ddea:	4618      	mov	r0, r3
 800ddec:	4770      	bx	lr
 800ddee:	bf00      	nop
 800ddf0:	a1facade 	.word	0xa1facade

0800ddf4 <ai_platform_network_get_error>:
 800ddf4:	b510      	push	{r4, lr}
 800ddf6:	b1f0      	cbz	r0, 800de36 <ai_platform_network_get_error+0x42>
 800ddf8:	4b2f      	ldr	r3, [pc, #188]	; (800deb8 <ai_platform_network_get_error+0xc4>)
 800ddfa:	6802      	ldr	r2, [r0, #0]
 800ddfc:	429a      	cmp	r2, r3
 800ddfe:	4604      	mov	r4, r0
 800de00:	d119      	bne.n	800de36 <ai_platform_network_get_error+0x42>
 800de02:	f7ff ff29 	bl	800dc58 <_ai_platform_acquire_crc>
 800de06:	4b2d      	ldr	r3, [pc, #180]	; (800debc <ai_platform_network_get_error+0xc8>)
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800de0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800de12:	d03c      	beq.n	800de8e <ai_platform_network_get_error+0x9a>
 800de14:	4a2a      	ldr	r2, [pc, #168]	; (800dec0 <ai_platform_network_get_error+0xcc>)
 800de16:	2301      	movs	r3, #1
 800de18:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800de1c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800de20:	2b00      	cmp	r3, #0
 800de22:	d1fb      	bne.n	800de1c <ai_platform_network_get_error+0x28>
 800de24:	4b27      	ldr	r3, [pc, #156]	; (800dec4 <ai_platform_network_get_error+0xd0>)
 800de26:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800de2a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800de2e:	4b26      	ldr	r3, [pc, #152]	; (800dec8 <ai_platform_network_get_error+0xd4>)
 800de30:	429a      	cmp	r2, r3
 800de32:	d038      	beq.n	800dea6 <ai_platform_network_get_error+0xb2>
 800de34:	e7fe      	b.n	800de34 <ai_platform_network_get_error+0x40>
 800de36:	f7ff ff0f 	bl	800dc58 <_ai_platform_acquire_crc>
 800de3a:	4b20      	ldr	r3, [pc, #128]	; (800debc <ai_platform_network_get_error+0xc8>)
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800de42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800de46:	d010      	beq.n	800de6a <ai_platform_network_get_error+0x76>
 800de48:	4a1d      	ldr	r2, [pc, #116]	; (800dec0 <ai_platform_network_get_error+0xcc>)
 800de4a:	2301      	movs	r3, #1
 800de4c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800de50:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800de54:	2b00      	cmp	r3, #0
 800de56:	d1fb      	bne.n	800de50 <ai_platform_network_get_error+0x5c>
 800de58:	4b1a      	ldr	r3, [pc, #104]	; (800dec4 <ai_platform_network_get_error+0xd0>)
 800de5a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800de5e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800de62:	4b19      	ldr	r3, [pc, #100]	; (800dec8 <ai_platform_network_get_error+0xd4>)
 800de64:	429a      	cmp	r2, r3
 800de66:	d00d      	beq.n	800de84 <ai_platform_network_get_error+0x90>
 800de68:	e7fe      	b.n	800de68 <ai_platform_network_get_error+0x74>
 800de6a:	4a18      	ldr	r2, [pc, #96]	; (800decc <ai_platform_network_get_error+0xd8>)
 800de6c:	2301      	movs	r3, #1
 800de6e:	6093      	str	r3, [r2, #8]
 800de70:	6893      	ldr	r3, [r2, #8]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d1fc      	bne.n	800de70 <ai_platform_network_get_error+0x7c>
 800de76:	4b13      	ldr	r3, [pc, #76]	; (800dec4 <ai_platform_network_get_error+0xd0>)
 800de78:	6013      	str	r3, [r2, #0]
 800de7a:	6812      	ldr	r2, [r2, #0]
 800de7c:	4b12      	ldr	r3, [pc, #72]	; (800dec8 <ai_platform_network_get_error+0xd4>)
 800de7e:	429a      	cmp	r2, r3
 800de80:	d000      	beq.n	800de84 <ai_platform_network_get_error+0x90>
 800de82:	e7fe      	b.n	800de82 <ai_platform_network_get_error+0x8e>
 800de84:	f7ff feea 	bl	800dc5c <_ai_platform_release_crc>
 800de88:	f241 0010 	movw	r0, #4112	; 0x1010
 800de8c:	bd10      	pop	{r4, pc}
 800de8e:	4a0f      	ldr	r2, [pc, #60]	; (800decc <ai_platform_network_get_error+0xd8>)
 800de90:	2301      	movs	r3, #1
 800de92:	6093      	str	r3, [r2, #8]
 800de94:	6893      	ldr	r3, [r2, #8]
 800de96:	2b00      	cmp	r3, #0
 800de98:	d1fc      	bne.n	800de94 <ai_platform_network_get_error+0xa0>
 800de9a:	4b0a      	ldr	r3, [pc, #40]	; (800dec4 <ai_platform_network_get_error+0xd0>)
 800de9c:	6013      	str	r3, [r2, #0]
 800de9e:	6812      	ldr	r2, [r2, #0]
 800dea0:	4b09      	ldr	r3, [pc, #36]	; (800dec8 <ai_platform_network_get_error+0xd4>)
 800dea2:	429a      	cmp	r2, r3
 800dea4:	d107      	bne.n	800deb6 <ai_platform_network_get_error+0xc2>
 800dea6:	f7ff fed9 	bl	800dc5c <_ai_platform_release_crc>
 800deaa:	f104 0010 	add.w	r0, r4, #16
 800deae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800deb2:	f000 be8b 	b.w	800ebcc <core_get_error>
 800deb6:	e7fe      	b.n	800deb6 <ai_platform_network_get_error+0xc2>
 800deb8:	a1c00100 	.word	0xa1c00100
 800debc:	e0042000 	.word	0xe0042000
 800dec0:	58024000 	.word	0x58024000
 800dec4:	f407a5c2 	.word	0xf407a5c2
 800dec8:	b5e8b5cd 	.word	0xb5e8b5cd
 800decc:	40023000 	.word	0x40023000

0800ded0 <ai_platform_network_set_error>:
 800ded0:	b110      	cbz	r0, 800ded8 <ai_platform_network_set_error+0x8>
 800ded2:	3010      	adds	r0, #16
 800ded4:	f000 be80 	b.w	800ebd8 <core_set_error>
 800ded8:	4770      	bx	lr
 800deda:	bf00      	nop

0800dedc <ai_platform_inputs_get>:
 800dedc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dee0:	b085      	sub	sp, #20
 800dee2:	9102      	str	r1, [sp, #8]
 800dee4:	b1f0      	cbz	r0, 800df24 <ai_platform_inputs_get+0x48>
 800dee6:	4b62      	ldr	r3, [pc, #392]	; (800e070 <ai_platform_inputs_get+0x194>)
 800dee8:	6802      	ldr	r2, [r0, #0]
 800deea:	429a      	cmp	r2, r3
 800deec:	4607      	mov	r7, r0
 800deee:	d119      	bne.n	800df24 <ai_platform_inputs_get+0x48>
 800def0:	f7ff feb2 	bl	800dc58 <_ai_platform_acquire_crc>
 800def4:	4b5f      	ldr	r3, [pc, #380]	; (800e074 <ai_platform_inputs_get+0x198>)
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800defc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800df00:	d03d      	beq.n	800df7e <ai_platform_inputs_get+0xa2>
 800df02:	4a5d      	ldr	r2, [pc, #372]	; (800e078 <ai_platform_inputs_get+0x19c>)
 800df04:	2301      	movs	r3, #1
 800df06:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800df0a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d1fb      	bne.n	800df0a <ai_platform_inputs_get+0x2e>
 800df12:	4b5a      	ldr	r3, [pc, #360]	; (800e07c <ai_platform_inputs_get+0x1a0>)
 800df14:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800df18:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800df1c:	4b58      	ldr	r3, [pc, #352]	; (800e080 <ai_platform_inputs_get+0x1a4>)
 800df1e:	429a      	cmp	r2, r3
 800df20:	d039      	beq.n	800df96 <ai_platform_inputs_get+0xba>
 800df22:	e7fe      	b.n	800df22 <ai_platform_inputs_get+0x46>
 800df24:	f7ff fe98 	bl	800dc58 <_ai_platform_acquire_crc>
 800df28:	4b52      	ldr	r3, [pc, #328]	; (800e074 <ai_platform_inputs_get+0x198>)
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800df30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800df34:	d010      	beq.n	800df58 <ai_platform_inputs_get+0x7c>
 800df36:	4a50      	ldr	r2, [pc, #320]	; (800e078 <ai_platform_inputs_get+0x19c>)
 800df38:	2301      	movs	r3, #1
 800df3a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800df3e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800df42:	2b00      	cmp	r3, #0
 800df44:	d1fb      	bne.n	800df3e <ai_platform_inputs_get+0x62>
 800df46:	4b4d      	ldr	r3, [pc, #308]	; (800e07c <ai_platform_inputs_get+0x1a0>)
 800df48:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800df4c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800df50:	4b4b      	ldr	r3, [pc, #300]	; (800e080 <ai_platform_inputs_get+0x1a4>)
 800df52:	429a      	cmp	r2, r3
 800df54:	d00d      	beq.n	800df72 <ai_platform_inputs_get+0x96>
 800df56:	e7fe      	b.n	800df56 <ai_platform_inputs_get+0x7a>
 800df58:	4a4a      	ldr	r2, [pc, #296]	; (800e084 <ai_platform_inputs_get+0x1a8>)
 800df5a:	2301      	movs	r3, #1
 800df5c:	6093      	str	r3, [r2, #8]
 800df5e:	6893      	ldr	r3, [r2, #8]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d1fc      	bne.n	800df5e <ai_platform_inputs_get+0x82>
 800df64:	4b45      	ldr	r3, [pc, #276]	; (800e07c <ai_platform_inputs_get+0x1a0>)
 800df66:	6013      	str	r3, [r2, #0]
 800df68:	6812      	ldr	r2, [r2, #0]
 800df6a:	4b45      	ldr	r3, [pc, #276]	; (800e080 <ai_platform_inputs_get+0x1a4>)
 800df6c:	429a      	cmp	r2, r3
 800df6e:	d000      	beq.n	800df72 <ai_platform_inputs_get+0x96>
 800df70:	e7fe      	b.n	800df70 <ai_platform_inputs_get+0x94>
 800df72:	f7ff fe73 	bl	800dc5c <_ai_platform_release_crc>
 800df76:	2000      	movs	r0, #0
 800df78:	b005      	add	sp, #20
 800df7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df7e:	4a41      	ldr	r2, [pc, #260]	; (800e084 <ai_platform_inputs_get+0x1a8>)
 800df80:	2301      	movs	r3, #1
 800df82:	6093      	str	r3, [r2, #8]
 800df84:	6893      	ldr	r3, [r2, #8]
 800df86:	2b00      	cmp	r3, #0
 800df88:	d1fc      	bne.n	800df84 <ai_platform_inputs_get+0xa8>
 800df8a:	4b3c      	ldr	r3, [pc, #240]	; (800e07c <ai_platform_inputs_get+0x1a0>)
 800df8c:	6013      	str	r3, [r2, #0]
 800df8e:	6812      	ldr	r2, [r2, #0]
 800df90:	4b3b      	ldr	r3, [pc, #236]	; (800e080 <ai_platform_inputs_get+0x1a4>)
 800df92:	429a      	cmp	r2, r3
 800df94:	d155      	bne.n	800e042 <ai_platform_inputs_get+0x166>
 800df96:	f7ff fe61 	bl	800dc5c <_ai_platform_release_crc>
 800df9a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d051      	beq.n	800e044 <ai_platform_inputs_get+0x168>
 800dfa0:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 800dfa4:	f1ba 0f00 	cmp.w	sl, #0
 800dfa8:	d04c      	beq.n	800e044 <ai_platform_inputs_get+0x168>
 800dfaa:	f04f 0b00 	mov.w	fp, #0
 800dfae:	465d      	mov	r5, fp
 800dfb0:	9703      	str	r7, [sp, #12]
 800dfb2:	e016      	b.n	800dfe2 <ai_platform_inputs_get+0x106>
 800dfb4:	9901      	ldr	r1, [sp, #4]
 800dfb6:	2301      	movs	r3, #1
 800dfb8:	507b      	str	r3, [r7, r1]
 800dfba:	69b1      	ldr	r1, [r6, #24]
 800dfbc:	6849      	ldr	r1, [r1, #4]
 800dfbe:	6121      	str	r1, [r4, #16]
 800dfc0:	f04f 0301 	mov.w	r3, #1
 800dfc4:	7523      	strb	r3, [r4, #20]
 800dfc6:	e9c4 c200 	strd	ip, r2, [r4]
 800dfca:	6962      	ldr	r2, [r4, #20]
 800dfcc:	60a0      	str	r0, [r4, #8]
 800dfce:	2300      	movs	r3, #0
 800dfd0:	f369 221f 	bfi	r2, r9, #8, #24
 800dfd4:	f8c4 8018 	str.w	r8, [r4, #24]
 800dfd8:	60e3      	str	r3, [r4, #12]
 800dfda:	3501      	adds	r5, #1
 800dfdc:	f10b 0b1c 	add.w	fp, fp, #28
 800dfe0:	6162      	str	r2, [r4, #20]
 800dfe2:	f8ba 3000 	ldrh.w	r3, [sl]
 800dfe6:	42ab      	cmp	r3, r5
 800dfe8:	b2aa      	uxth	r2, r5
 800dfea:	d93a      	bls.n	800e062 <ai_platform_inputs_get+0x186>
 800dfec:	f8da 3004 	ldr.w	r3, [sl, #4]
 800dff0:	00e9      	lsls	r1, r5, #3
 800dff2:	9101      	str	r1, [sp, #4]
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d034      	beq.n	800e062 <ai_platform_inputs_get+0x186>
 800dff8:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800dffc:	2e00      	cmp	r6, #0
 800dffe:	d030      	beq.n	800e062 <ai_platform_inputs_get+0x186>
 800e000:	f8da 3008 	ldr.w	r3, [sl, #8]
 800e004:	69b2      	ldr	r2, [r6, #24]
 800e006:	f8d6 800c 	ldr.w	r8, [r6, #12]
 800e00a:	6810      	ldr	r0, [r2, #0]
 800e00c:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 800e010:	68b3      	ldr	r3, [r6, #8]
 800e012:	f3c3 2917 	ubfx	r9, r3, #8, #24
 800e016:	f001 ffc3 	bl	800ffa0 <ai_array_to_buffer_fmt>
 800e01a:	69b1      	ldr	r1, [r6, #24]
 800e01c:	4684      	mov	ip, r0
 800e01e:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 800e022:	688a      	ldr	r2, [r1, #8]
 800e024:	445c      	add	r4, fp
 800e026:	2800      	cmp	r0, #0
 800e028:	d0c8      	beq.n	800dfbc <ai_platform_inputs_get+0xe0>
 800e02a:	2100      	movs	r1, #0
 800e02c:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 800e030:	6831      	ldr	r1, [r6, #0]
 800e032:	6041      	str	r1, [r0, #4]
 800e034:	b111      	cbz	r1, 800e03c <ai_platform_inputs_get+0x160>
 800e036:	8849      	ldrh	r1, [r1, #2]
 800e038:	2900      	cmp	r1, #0
 800e03a:	d1bb      	bne.n	800dfb4 <ai_platform_inputs_get+0xd8>
 800e03c:	69b1      	ldr	r1, [r6, #24]
 800e03e:	2000      	movs	r0, #0
 800e040:	e7bc      	b.n	800dfbc <ai_platform_inputs_get+0xe0>
 800e042:	e7fe      	b.n	800e042 <ai_platform_inputs_get+0x166>
 800e044:	2218      	movs	r2, #24
 800e046:	2111      	movs	r1, #17
 800e048:	f107 0010 	add.w	r0, r7, #16
 800e04c:	f000 fdc4 	bl	800ebd8 <core_set_error>
 800e050:	2200      	movs	r2, #0
 800e052:	4610      	mov	r0, r2
 800e054:	9b02      	ldr	r3, [sp, #8]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d08e      	beq.n	800df78 <ai_platform_inputs_get+0x9c>
 800e05a:	801a      	strh	r2, [r3, #0]
 800e05c:	b005      	add	sp, #20
 800e05e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e062:	9f03      	ldr	r7, [sp, #12]
 800e064:	2a00      	cmp	r2, #0
 800e066:	d0ed      	beq.n	800e044 <ai_platform_inputs_get+0x168>
 800e068:	f8da 3008 	ldr.w	r3, [sl, #8]
 800e06c:	6858      	ldr	r0, [r3, #4]
 800e06e:	e7f1      	b.n	800e054 <ai_platform_inputs_get+0x178>
 800e070:	a1c00100 	.word	0xa1c00100
 800e074:	e0042000 	.word	0xe0042000
 800e078:	58024000 	.word	0x58024000
 800e07c:	f407a5c2 	.word	0xf407a5c2
 800e080:	b5e8b5cd 	.word	0xb5e8b5cd
 800e084:	40023000 	.word	0x40023000

0800e088 <ai_platform_outputs_get>:
 800e088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e08c:	b085      	sub	sp, #20
 800e08e:	9102      	str	r1, [sp, #8]
 800e090:	b1f0      	cbz	r0, 800e0d0 <ai_platform_outputs_get+0x48>
 800e092:	4b5f      	ldr	r3, [pc, #380]	; (800e210 <ai_platform_outputs_get+0x188>)
 800e094:	6802      	ldr	r2, [r0, #0]
 800e096:	429a      	cmp	r2, r3
 800e098:	4607      	mov	r7, r0
 800e09a:	d119      	bne.n	800e0d0 <ai_platform_outputs_get+0x48>
 800e09c:	f7ff fddc 	bl	800dc58 <_ai_platform_acquire_crc>
 800e0a0:	4b5c      	ldr	r3, [pc, #368]	; (800e214 <ai_platform_outputs_get+0x18c>)
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e0a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e0ac:	d03d      	beq.n	800e12a <ai_platform_outputs_get+0xa2>
 800e0ae:	4a5a      	ldr	r2, [pc, #360]	; (800e218 <ai_platform_outputs_get+0x190>)
 800e0b0:	2301      	movs	r3, #1
 800e0b2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800e0b6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d1fb      	bne.n	800e0b6 <ai_platform_outputs_get+0x2e>
 800e0be:	4b57      	ldr	r3, [pc, #348]	; (800e21c <ai_platform_outputs_get+0x194>)
 800e0c0:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800e0c4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800e0c8:	4b55      	ldr	r3, [pc, #340]	; (800e220 <ai_platform_outputs_get+0x198>)
 800e0ca:	429a      	cmp	r2, r3
 800e0cc:	d039      	beq.n	800e142 <ai_platform_outputs_get+0xba>
 800e0ce:	e7fe      	b.n	800e0ce <ai_platform_outputs_get+0x46>
 800e0d0:	f7ff fdc2 	bl	800dc58 <_ai_platform_acquire_crc>
 800e0d4:	4b4f      	ldr	r3, [pc, #316]	; (800e214 <ai_platform_outputs_get+0x18c>)
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e0dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e0e0:	d010      	beq.n	800e104 <ai_platform_outputs_get+0x7c>
 800e0e2:	4a4d      	ldr	r2, [pc, #308]	; (800e218 <ai_platform_outputs_get+0x190>)
 800e0e4:	2301      	movs	r3, #1
 800e0e6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800e0ea:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d1fb      	bne.n	800e0ea <ai_platform_outputs_get+0x62>
 800e0f2:	4b4a      	ldr	r3, [pc, #296]	; (800e21c <ai_platform_outputs_get+0x194>)
 800e0f4:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800e0f8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800e0fc:	4b48      	ldr	r3, [pc, #288]	; (800e220 <ai_platform_outputs_get+0x198>)
 800e0fe:	429a      	cmp	r2, r3
 800e100:	d00d      	beq.n	800e11e <ai_platform_outputs_get+0x96>
 800e102:	e7fe      	b.n	800e102 <ai_platform_outputs_get+0x7a>
 800e104:	4a47      	ldr	r2, [pc, #284]	; (800e224 <ai_platform_outputs_get+0x19c>)
 800e106:	2301      	movs	r3, #1
 800e108:	6093      	str	r3, [r2, #8]
 800e10a:	6893      	ldr	r3, [r2, #8]
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d1fc      	bne.n	800e10a <ai_platform_outputs_get+0x82>
 800e110:	4b42      	ldr	r3, [pc, #264]	; (800e21c <ai_platform_outputs_get+0x194>)
 800e112:	6013      	str	r3, [r2, #0]
 800e114:	6812      	ldr	r2, [r2, #0]
 800e116:	4b42      	ldr	r3, [pc, #264]	; (800e220 <ai_platform_outputs_get+0x198>)
 800e118:	429a      	cmp	r2, r3
 800e11a:	d000      	beq.n	800e11e <ai_platform_outputs_get+0x96>
 800e11c:	e7fe      	b.n	800e11c <ai_platform_outputs_get+0x94>
 800e11e:	f7ff fd9d 	bl	800dc5c <_ai_platform_release_crc>
 800e122:	2000      	movs	r0, #0
 800e124:	b005      	add	sp, #20
 800e126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e12a:	4a3e      	ldr	r2, [pc, #248]	; (800e224 <ai_platform_outputs_get+0x19c>)
 800e12c:	2301      	movs	r3, #1
 800e12e:	6093      	str	r3, [r2, #8]
 800e130:	6893      	ldr	r3, [r2, #8]
 800e132:	2b00      	cmp	r3, #0
 800e134:	d1fc      	bne.n	800e130 <ai_platform_outputs_get+0xa8>
 800e136:	4b39      	ldr	r3, [pc, #228]	; (800e21c <ai_platform_outputs_get+0x194>)
 800e138:	6013      	str	r3, [r2, #0]
 800e13a:	6812      	ldr	r2, [r2, #0]
 800e13c:	4b38      	ldr	r3, [pc, #224]	; (800e220 <ai_platform_outputs_get+0x198>)
 800e13e:	429a      	cmp	r2, r3
 800e140:	d150      	bne.n	800e1e4 <ai_platform_outputs_get+0x15c>
 800e142:	f7ff fd8b 	bl	800dc5c <_ai_platform_release_crc>
 800e146:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e148:	2b01      	cmp	r3, #1
 800e14a:	d958      	bls.n	800e1fe <ai_platform_outputs_get+0x176>
 800e14c:	f04f 0b00 	mov.w	fp, #0
 800e150:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 800e154:	9703      	str	r7, [sp, #12]
 800e156:	465d      	mov	r5, fp
 800e158:	e016      	b.n	800e188 <ai_platform_outputs_get+0x100>
 800e15a:	9901      	ldr	r1, [sp, #4]
 800e15c:	2301      	movs	r3, #1
 800e15e:	507b      	str	r3, [r7, r1]
 800e160:	69b1      	ldr	r1, [r6, #24]
 800e162:	6849      	ldr	r1, [r1, #4]
 800e164:	6121      	str	r1, [r4, #16]
 800e166:	f04f 0301 	mov.w	r3, #1
 800e16a:	7523      	strb	r3, [r4, #20]
 800e16c:	e9c4 c200 	strd	ip, r2, [r4]
 800e170:	6962      	ldr	r2, [r4, #20]
 800e172:	60a0      	str	r0, [r4, #8]
 800e174:	2300      	movs	r3, #0
 800e176:	f369 221f 	bfi	r2, r9, #8, #24
 800e17a:	f8c4 8018 	str.w	r8, [r4, #24]
 800e17e:	60e3      	str	r3, [r4, #12]
 800e180:	3501      	adds	r5, #1
 800e182:	f10b 0b1c 	add.w	fp, fp, #28
 800e186:	6162      	str	r2, [r4, #20]
 800e188:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800e18c:	42ab      	cmp	r3, r5
 800e18e:	b2aa      	uxth	r2, r5
 800e190:	d929      	bls.n	800e1e6 <ai_platform_outputs_get+0x15e>
 800e192:	f8da 3010 	ldr.w	r3, [sl, #16]
 800e196:	00e9      	lsls	r1, r5, #3
 800e198:	9101      	str	r1, [sp, #4]
 800e19a:	b323      	cbz	r3, 800e1e6 <ai_platform_outputs_get+0x15e>
 800e19c:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800e1a0:	b30e      	cbz	r6, 800e1e6 <ai_platform_outputs_get+0x15e>
 800e1a2:	f8da 3014 	ldr.w	r3, [sl, #20]
 800e1a6:	69b2      	ldr	r2, [r6, #24]
 800e1a8:	f8d6 800c 	ldr.w	r8, [r6, #12]
 800e1ac:	6810      	ldr	r0, [r2, #0]
 800e1ae:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 800e1b2:	68b3      	ldr	r3, [r6, #8]
 800e1b4:	f3c3 2917 	ubfx	r9, r3, #8, #24
 800e1b8:	f001 fef2 	bl	800ffa0 <ai_array_to_buffer_fmt>
 800e1bc:	69b1      	ldr	r1, [r6, #24]
 800e1be:	4684      	mov	ip, r0
 800e1c0:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 800e1c4:	688a      	ldr	r2, [r1, #8]
 800e1c6:	445c      	add	r4, fp
 800e1c8:	2800      	cmp	r0, #0
 800e1ca:	d0ca      	beq.n	800e162 <ai_platform_outputs_get+0xda>
 800e1cc:	2100      	movs	r1, #0
 800e1ce:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 800e1d2:	6831      	ldr	r1, [r6, #0]
 800e1d4:	6041      	str	r1, [r0, #4]
 800e1d6:	b111      	cbz	r1, 800e1de <ai_platform_outputs_get+0x156>
 800e1d8:	8849      	ldrh	r1, [r1, #2]
 800e1da:	2900      	cmp	r1, #0
 800e1dc:	d1bd      	bne.n	800e15a <ai_platform_outputs_get+0xd2>
 800e1de:	69b1      	ldr	r1, [r6, #24]
 800e1e0:	2000      	movs	r0, #0
 800e1e2:	e7be      	b.n	800e162 <ai_platform_outputs_get+0xda>
 800e1e4:	e7fe      	b.n	800e1e4 <ai_platform_outputs_get+0x15c>
 800e1e6:	9f03      	ldr	r7, [sp, #12]
 800e1e8:	b14a      	cbz	r2, 800e1fe <ai_platform_outputs_get+0x176>
 800e1ea:	f8da 3014 	ldr.w	r3, [sl, #20]
 800e1ee:	6858      	ldr	r0, [r3, #4]
 800e1f0:	9b02      	ldr	r3, [sp, #8]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d096      	beq.n	800e124 <ai_platform_outputs_get+0x9c>
 800e1f6:	801a      	strh	r2, [r3, #0]
 800e1f8:	b005      	add	sp, #20
 800e1fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1fe:	2218      	movs	r2, #24
 800e200:	2111      	movs	r1, #17
 800e202:	f107 0010 	add.w	r0, r7, #16
 800e206:	f000 fce7 	bl	800ebd8 <core_set_error>
 800e20a:	2200      	movs	r2, #0
 800e20c:	4610      	mov	r0, r2
 800e20e:	e7ef      	b.n	800e1f0 <ai_platform_outputs_get+0x168>
 800e210:	a1c00100 	.word	0xa1c00100
 800e214:	e0042000 	.word	0xe0042000
 800e218:	58024000 	.word	0x58024000
 800e21c:	f407a5c2 	.word	0xf407a5c2
 800e220:	b5e8b5cd 	.word	0xb5e8b5cd
 800e224:	40023000 	.word	0x40023000

0800e228 <ai_platform_network_create>:
 800e228:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e22c:	b083      	sub	sp, #12
 800e22e:	4606      	mov	r6, r0
 800e230:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 800e234:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 800e238:	4615      	mov	r5, r2
 800e23a:	461f      	mov	r7, r3
 800e23c:	f7ff fd0c 	bl	800dc58 <_ai_platform_acquire_crc>
 800e240:	b188      	cbz	r0, 800e266 <ai_platform_network_create+0x3e>
 800e242:	4a5d      	ldr	r2, [pc, #372]	; (800e3b8 <ai_platform_network_create+0x190>)
 800e244:	6812      	ldr	r2, [r2, #0]
 800e246:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800e24a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800e24e:	4603      	mov	r3, r0
 800e250:	d00e      	beq.n	800e270 <ai_platform_network_create+0x48>
 800e252:	4a5a      	ldr	r2, [pc, #360]	; (800e3bc <ai_platform_network_create+0x194>)
 800e254:	2118      	movs	r1, #24
 800e256:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 800e25a:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 800e25e:	2918      	cmp	r1, #24
 800e260:	d018      	beq.n	800e294 <ai_platform_network_create+0x6c>
 800e262:	f7ff fcfb 	bl	800dc5c <_ai_platform_release_crc>
 800e266:	f244 1033 	movw	r0, #16691	; 0x4133
 800e26a:	b003      	add	sp, #12
 800e26c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e270:	4a53      	ldr	r2, [pc, #332]	; (800e3c0 <ai_platform_network_create+0x198>)
 800e272:	2101      	movs	r1, #1
 800e274:	6091      	str	r1, [r2, #8]
 800e276:	2114      	movs	r1, #20
 800e278:	e001      	b.n	800e27e <ai_platform_network_create+0x56>
 800e27a:	3901      	subs	r1, #1
 800e27c:	d002      	beq.n	800e284 <ai_platform_network_create+0x5c>
 800e27e:	6894      	ldr	r4, [r2, #8]
 800e280:	2c00      	cmp	r4, #0
 800e282:	d1fa      	bne.n	800e27a <ai_platform_network_create+0x52>
 800e284:	4a4e      	ldr	r2, [pc, #312]	; (800e3c0 <ai_platform_network_create+0x198>)
 800e286:	6891      	ldr	r1, [r2, #8]
 800e288:	b911      	cbnz	r1, 800e290 <ai_platform_network_create+0x68>
 800e28a:	6812      	ldr	r2, [r2, #0]
 800e28c:	3201      	adds	r2, #1
 800e28e:	d008      	beq.n	800e2a2 <ai_platform_network_create+0x7a>
 800e290:	4618      	mov	r0, r3
 800e292:	e7e6      	b.n	800e262 <ai_platform_network_create+0x3a>
 800e294:	2101      	movs	r1, #1
 800e296:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 800e29a:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 800e29e:	2900      	cmp	r1, #0
 800e2a0:	d1fb      	bne.n	800e29a <ai_platform_network_create+0x72>
 800e2a2:	4618      	mov	r0, r3
 800e2a4:	f7ff fcda 	bl	800dc5c <_ai_platform_release_crc>
 800e2a8:	f7ff fcd6 	bl	800dc58 <_ai_platform_acquire_crc>
 800e2ac:	4b42      	ldr	r3, [pc, #264]	; (800e3b8 <ai_platform_network_create+0x190>)
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e2b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e2b8:	d010      	beq.n	800e2dc <ai_platform_network_create+0xb4>
 800e2ba:	4b40      	ldr	r3, [pc, #256]	; (800e3bc <ai_platform_network_create+0x194>)
 800e2bc:	2201      	movs	r2, #1
 800e2be:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 800e2c2:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
 800e2c6:	2900      	cmp	r1, #0
 800e2c8:	d1fb      	bne.n	800e2c2 <ai_platform_network_create+0x9a>
 800e2ca:	4a3e      	ldr	r2, [pc, #248]	; (800e3c4 <ai_platform_network_create+0x19c>)
 800e2cc:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 800e2d0:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 800e2d4:	4b3c      	ldr	r3, [pc, #240]	; (800e3c8 <ai_platform_network_create+0x1a0>)
 800e2d6:	429a      	cmp	r2, r3
 800e2d8:	d00c      	beq.n	800e2f4 <ai_platform_network_create+0xcc>
 800e2da:	e7fe      	b.n	800e2da <ai_platform_network_create+0xb2>
 800e2dc:	4a38      	ldr	r2, [pc, #224]	; (800e3c0 <ai_platform_network_create+0x198>)
 800e2de:	2301      	movs	r3, #1
 800e2e0:	6093      	str	r3, [r2, #8]
 800e2e2:	6893      	ldr	r3, [r2, #8]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d1fc      	bne.n	800e2e2 <ai_platform_network_create+0xba>
 800e2e8:	4b36      	ldr	r3, [pc, #216]	; (800e3c4 <ai_platform_network_create+0x19c>)
 800e2ea:	6013      	str	r3, [r2, #0]
 800e2ec:	6812      	ldr	r2, [r2, #0]
 800e2ee:	4b36      	ldr	r3, [pc, #216]	; (800e3c8 <ai_platform_network_create+0x1a0>)
 800e2f0:	429a      	cmp	r2, r3
 800e2f2:	d122      	bne.n	800e33a <ai_platform_network_create+0x112>
 800e2f4:	f7ff fcb2 	bl	800dc5c <_ai_platform_release_crc>
 800e2f8:	b38e      	cbz	r6, 800e35e <ai_platform_network_create+0x136>
 800e2fa:	4b34      	ldr	r3, [pc, #208]	; (800e3cc <ai_platform_network_create+0x1a4>)
 800e2fc:	602b      	str	r3, [r5, #0]
 800e2fe:	6035      	str	r5, [r6, #0]
 800e300:	f000 fc62 	bl	800ebc8 <core_init>
 800e304:	b1d0      	cbz	r0, 800e33c <ai_platform_network_create+0x114>
 800e306:	f7ff fca7 	bl	800dc58 <_ai_platform_acquire_crc>
 800e30a:	4b2b      	ldr	r3, [pc, #172]	; (800e3b8 <ai_platform_network_create+0x190>)
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e312:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e316:	d025      	beq.n	800e364 <ai_platform_network_create+0x13c>
 800e318:	4a28      	ldr	r2, [pc, #160]	; (800e3bc <ai_platform_network_create+0x194>)
 800e31a:	2301      	movs	r3, #1
 800e31c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800e320:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800e324:	2b00      	cmp	r3, #0
 800e326:	d1fb      	bne.n	800e320 <ai_platform_network_create+0xf8>
 800e328:	4b26      	ldr	r3, [pc, #152]	; (800e3c4 <ai_platform_network_create+0x19c>)
 800e32a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800e32e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800e332:	4b25      	ldr	r3, [pc, #148]	; (800e3c8 <ai_platform_network_create+0x1a0>)
 800e334:	429a      	cmp	r2, r3
 800e336:	d022      	beq.n	800e37e <ai_platform_network_create+0x156>
 800e338:	e7fe      	b.n	800e338 <ai_platform_network_create+0x110>
 800e33a:	e7fe      	b.n	800e33a <ai_platform_network_create+0x112>
 800e33c:	2430      	movs	r4, #48	; 0x30
 800e33e:	2300      	movs	r3, #0
 800e340:	6033      	str	r3, [r6, #0]
 800e342:	2610      	movs	r6, #16
 800e344:	464a      	mov	r2, r9
 800e346:	4641      	mov	r1, r8
 800e348:	4638      	mov	r0, r7
 800e34a:	f001 fecf 	bl	80100ec <ai_version_get>
 800e34e:	4603      	mov	r3, r0
 800e350:	2000      	movs	r0, #0
 800e352:	f364 0007 	bfi	r0, r4, #0, #8
 800e356:	64ab      	str	r3, [r5, #72]	; 0x48
 800e358:	f366 201f 	bfi	r0, r6, #8, #24
 800e35c:	e785      	b.n	800e26a <ai_platform_network_create+0x42>
 800e35e:	f241 0010 	movw	r0, #4112	; 0x1010
 800e362:	e782      	b.n	800e26a <ai_platform_network_create+0x42>
 800e364:	4a16      	ldr	r2, [pc, #88]	; (800e3c0 <ai_platform_network_create+0x198>)
 800e366:	2301      	movs	r3, #1
 800e368:	6093      	str	r3, [r2, #8]
 800e36a:	6893      	ldr	r3, [r2, #8]
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d1fc      	bne.n	800e36a <ai_platform_network_create+0x142>
 800e370:	4b14      	ldr	r3, [pc, #80]	; (800e3c4 <ai_platform_network_create+0x19c>)
 800e372:	6013      	str	r3, [r2, #0]
 800e374:	6812      	ldr	r2, [r2, #0]
 800e376:	4b14      	ldr	r3, [pc, #80]	; (800e3c8 <ai_platform_network_create+0x1a0>)
 800e378:	429a      	cmp	r2, r3
 800e37a:	d000      	beq.n	800e37e <ai_platform_network_create+0x156>
 800e37c:	e7fe      	b.n	800e37c <ai_platform_network_create+0x154>
 800e37e:	f7ff fc6d 	bl	800dc5c <_ai_platform_release_crc>
 800e382:	2200      	movs	r2, #0
 800e384:	4641      	mov	r1, r8
 800e386:	4638      	mov	r0, r7
 800e388:	f001 feb0 	bl	80100ec <ai_version_get>
 800e38c:	2200      	movs	r2, #0
 800e38e:	4604      	mov	r4, r0
 800e390:	2105      	movs	r1, #5
 800e392:	2001      	movs	r0, #1
 800e394:	f001 feaa 	bl	80100ec <ai_version_get>
 800e398:	4284      	cmp	r4, r0
 800e39a:	d001      	beq.n	800e3a0 <ai_platform_network_create+0x178>
 800e39c:	2401      	movs	r4, #1
 800e39e:	e7ce      	b.n	800e33e <ai_platform_network_create+0x116>
 800e3a0:	4b0b      	ldr	r3, [pc, #44]	; (800e3d0 <ai_platform_network_create+0x1a8>)
 800e3a2:	9301      	str	r3, [sp, #4]
 800e3a4:	a801      	add	r0, sp, #4
 800e3a6:	f000 fc23 	bl	800ebf0 <ai_check_custom_types>
 800e3aa:	b110      	cbz	r0, 800e3b2 <ai_platform_network_create+0x18a>
 800e3ac:	2600      	movs	r6, #0
 800e3ae:	4634      	mov	r4, r6
 800e3b0:	e7c8      	b.n	800e344 <ai_platform_network_create+0x11c>
 800e3b2:	2402      	movs	r4, #2
 800e3b4:	e7c3      	b.n	800e33e <ai_platform_network_create+0x116>
 800e3b6:	bf00      	nop
 800e3b8:	e0042000 	.word	0xe0042000
 800e3bc:	58024000 	.word	0x58024000
 800e3c0:	40023000 	.word	0x40023000
 800e3c4:	f407a5c2 	.word	0xf407a5c2
 800e3c8:	b5e8b5cd 	.word	0xb5e8b5cd
 800e3cc:	a1c00100 	.word	0xa1c00100
 800e3d0:	84048403 	.word	0x84048403

0800e3d4 <ai_platform_network_init>:
 800e3d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e3d8:	b1f8      	cbz	r0, 800e41a <ai_platform_network_init+0x46>
 800e3da:	4b6e      	ldr	r3, [pc, #440]	; (800e594 <ai_platform_network_init+0x1c0>)
 800e3dc:	6802      	ldr	r2, [r0, #0]
 800e3de:	429a      	cmp	r2, r3
 800e3e0:	4604      	mov	r4, r0
 800e3e2:	d11a      	bne.n	800e41a <ai_platform_network_init+0x46>
 800e3e4:	460e      	mov	r6, r1
 800e3e6:	f7ff fc37 	bl	800dc58 <_ai_platform_acquire_crc>
 800e3ea:	4b6b      	ldr	r3, [pc, #428]	; (800e598 <ai_platform_network_init+0x1c4>)
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e3f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e3f6:	d03d      	beq.n	800e474 <ai_platform_network_init+0xa0>
 800e3f8:	4a68      	ldr	r2, [pc, #416]	; (800e59c <ai_platform_network_init+0x1c8>)
 800e3fa:	2301      	movs	r3, #1
 800e3fc:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800e400:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800e404:	2b00      	cmp	r3, #0
 800e406:	d1fb      	bne.n	800e400 <ai_platform_network_init+0x2c>
 800e408:	4b65      	ldr	r3, [pc, #404]	; (800e5a0 <ai_platform_network_init+0x1cc>)
 800e40a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800e40e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800e412:	4b64      	ldr	r3, [pc, #400]	; (800e5a4 <ai_platform_network_init+0x1d0>)
 800e414:	429a      	cmp	r2, r3
 800e416:	d039      	beq.n	800e48c <ai_platform_network_init+0xb8>
 800e418:	e7fe      	b.n	800e418 <ai_platform_network_init+0x44>
 800e41a:	f7ff fc1d 	bl	800dc58 <_ai_platform_acquire_crc>
 800e41e:	4b5e      	ldr	r3, [pc, #376]	; (800e598 <ai_platform_network_init+0x1c4>)
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e426:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e42a:	d010      	beq.n	800e44e <ai_platform_network_init+0x7a>
 800e42c:	4a5b      	ldr	r2, [pc, #364]	; (800e59c <ai_platform_network_init+0x1c8>)
 800e42e:	2301      	movs	r3, #1
 800e430:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800e434:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d1fb      	bne.n	800e434 <ai_platform_network_init+0x60>
 800e43c:	4b58      	ldr	r3, [pc, #352]	; (800e5a0 <ai_platform_network_init+0x1cc>)
 800e43e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800e442:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800e446:	4b57      	ldr	r3, [pc, #348]	; (800e5a4 <ai_platform_network_init+0x1d0>)
 800e448:	429a      	cmp	r2, r3
 800e44a:	d00d      	beq.n	800e468 <ai_platform_network_init+0x94>
 800e44c:	e7fe      	b.n	800e44c <ai_platform_network_init+0x78>
 800e44e:	4a56      	ldr	r2, [pc, #344]	; (800e5a8 <ai_platform_network_init+0x1d4>)
 800e450:	2301      	movs	r3, #1
 800e452:	6093      	str	r3, [r2, #8]
 800e454:	6893      	ldr	r3, [r2, #8]
 800e456:	2b00      	cmp	r3, #0
 800e458:	d1fc      	bne.n	800e454 <ai_platform_network_init+0x80>
 800e45a:	4b51      	ldr	r3, [pc, #324]	; (800e5a0 <ai_platform_network_init+0x1cc>)
 800e45c:	6013      	str	r3, [r2, #0]
 800e45e:	6812      	ldr	r2, [r2, #0]
 800e460:	4b50      	ldr	r3, [pc, #320]	; (800e5a4 <ai_platform_network_init+0x1d0>)
 800e462:	429a      	cmp	r2, r3
 800e464:	d000      	beq.n	800e468 <ai_platform_network_init+0x94>
 800e466:	e7fe      	b.n	800e466 <ai_platform_network_init+0x92>
 800e468:	f7ff fbf8 	bl	800dc5c <_ai_platform_release_crc>
 800e46c:	2600      	movs	r6, #0
 800e46e:	4630      	mov	r0, r6
 800e470:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e474:	4a4c      	ldr	r2, [pc, #304]	; (800e5a8 <ai_platform_network_init+0x1d4>)
 800e476:	2301      	movs	r3, #1
 800e478:	6093      	str	r3, [r2, #8]
 800e47a:	6893      	ldr	r3, [r2, #8]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d1fc      	bne.n	800e47a <ai_platform_network_init+0xa6>
 800e480:	4b47      	ldr	r3, [pc, #284]	; (800e5a0 <ai_platform_network_init+0x1cc>)
 800e482:	6013      	str	r3, [r2, #0]
 800e484:	6812      	ldr	r2, [r2, #0]
 800e486:	4b47      	ldr	r3, [pc, #284]	; (800e5a4 <ai_platform_network_init+0x1d0>)
 800e488:	429a      	cmp	r2, r3
 800e48a:	d11c      	bne.n	800e4c6 <ai_platform_network_init+0xf2>
 800e48c:	f7ff fbe6 	bl	800dc5c <_ai_platform_release_crc>
 800e490:	2e00      	cmp	r6, #0
 800e492:	d06f      	beq.n	800e574 <ai_platform_network_init+0x1a0>
 800e494:	4b45      	ldr	r3, [pc, #276]	; (800e5ac <ai_platform_network_init+0x1d8>)
 800e496:	6832      	ldr	r2, [r6, #0]
 800e498:	429a      	cmp	r2, r3
 800e49a:	d115      	bne.n	800e4c8 <ai_platform_network_init+0xf4>
 800e49c:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 800e4a0:	6933      	ldr	r3, [r6, #16]
 800e4a2:	f8b6 e00c 	ldrh.w	lr, [r6, #12]
 800e4a6:	89f7      	ldrh	r7, [r6, #14]
 800e4a8:	62a3      	str	r3, [r4, #40]	; 0x28
 800e4aa:	e9c4 2107 	strd	r2, r1, [r4, #28]
 800e4ae:	2303      	movs	r3, #3
 800e4b0:	84e7      	strh	r7, [r4, #38]	; 0x26
 800e4b2:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
 800e4b6:	60e3      	str	r3, [r4, #12]
 800e4b8:	4620      	mov	r0, r4
 800e4ba:	4626      	mov	r6, r4
 800e4bc:	f000 fbc2 	bl	800ec44 <ai_layers_init_all>
 800e4c0:	4630      	mov	r0, r6
 800e4c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e4c6:	e7fe      	b.n	800e4c6 <ai_platform_network_init+0xf2>
 800e4c8:	2101      	movs	r1, #1
 800e4ca:	4630      	mov	r0, r6
 800e4cc:	4635      	mov	r5, r6
 800e4ce:	6876      	ldr	r6, [r6, #4]
 800e4d0:	f7ff fb74 	bl	800dbbc <ai_buffer_get_size>
 800e4d4:	f105 081c 	add.w	r8, r5, #28
 800e4d8:	4681      	mov	r9, r0
 800e4da:	2101      	movs	r1, #1
 800e4dc:	4640      	mov	r0, r8
 800e4de:	6a2f      	ldr	r7, [r5, #32]
 800e4e0:	f7ff fb6c 	bl	800dbbc <ai_buffer_get_size>
 800e4e4:	f1b9 0f00 	cmp.w	r9, #0
 800e4e8:	d025      	beq.n	800e536 <ai_platform_network_init+0x162>
 800e4ea:	2201      	movs	r2, #1
 800e4ec:	4696      	mov	lr, r2
 800e4ee:	bb30      	cbnz	r0, 800e53e <ai_platform_network_init+0x16a>
 800e4f0:	4680      	mov	r8, r0
 800e4f2:	4607      	mov	r7, r0
 800e4f4:	b376      	cbz	r6, 800e554 <ai_platform_network_init+0x180>
 800e4f6:	8be3      	ldrh	r3, [r4, #30]
 800e4f8:	4573      	cmp	r3, lr
 800e4fa:	d323      	bcc.n	800e544 <ai_platform_network_init+0x170>
 800e4fc:	b142      	cbz	r2, 800e510 <ai_platform_network_init+0x13c>
 800e4fe:	46ac      	mov	ip, r5
 800e500:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e504:	6a25      	ldr	r5, [r4, #32]
 800e506:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e508:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800e50c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800e510:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800e512:	f8a4 e01e 	strh.w	lr, [r4, #30]
 800e516:	2600      	movs	r6, #0
 800e518:	42bb      	cmp	r3, r7
 800e51a:	83a6      	strh	r6, [r4, #28]
 800e51c:	d323      	bcc.n	800e566 <ai_platform_network_init+0x192>
 800e51e:	b37f      	cbz	r7, 800e580 <ai_platform_network_init+0x1ac>
 800e520:	46c4      	mov	ip, r8
 800e522:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e526:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800e528:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e52a:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800e52e:	46b6      	mov	lr, r6
 800e530:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800e534:	e7bb      	b.n	800e4ae <ai_platform_network_init+0xda>
 800e536:	464a      	mov	r2, r9
 800e538:	46ce      	mov	lr, r9
 800e53a:	464d      	mov	r5, r9
 800e53c:	e7d7      	b.n	800e4ee <ai_platform_network_init+0x11a>
 800e53e:	b30f      	cbz	r7, 800e584 <ai_platform_network_init+0x1b0>
 800e540:	2701      	movs	r7, #1
 800e542:	e7d7      	b.n	800e4f4 <ai_platform_network_init+0x120>
 800e544:	2212      	movs	r2, #18
 800e546:	2116      	movs	r1, #22
 800e548:	f104 0010 	add.w	r0, r4, #16
 800e54c:	f000 fb44 	bl	800ebd8 <core_set_error>
 800e550:	2600      	movs	r6, #0
 800e552:	e78c      	b.n	800e46e <ai_platform_network_init+0x9a>
 800e554:	f1b9 0f00 	cmp.w	r9, #0
 800e558:	d0cd      	beq.n	800e4f6 <ai_platform_network_init+0x122>
 800e55a:	2110      	movs	r1, #16
 800e55c:	2212      	movs	r2, #18
 800e55e:	1860      	adds	r0, r4, r1
 800e560:	f000 fb3a 	bl	800ebd8 <core_set_error>
 800e564:	e783      	b.n	800e46e <ai_platform_network_init+0x9a>
 800e566:	2213      	movs	r2, #19
 800e568:	2116      	movs	r1, #22
 800e56a:	f104 0010 	add.w	r0, r4, #16
 800e56e:	f000 fb33 	bl	800ebd8 <core_set_error>
 800e572:	e77c      	b.n	800e46e <ai_platform_network_init+0x9a>
 800e574:	2110      	movs	r1, #16
 800e576:	2211      	movs	r2, #17
 800e578:	1860      	adds	r0, r4, r1
 800e57a:	f000 fb2d 	bl	800ebd8 <core_set_error>
 800e57e:	e776      	b.n	800e46e <ai_platform_network_init+0x9a>
 800e580:	46be      	mov	lr, r7
 800e582:	e794      	b.n	800e4ae <ai_platform_network_init+0xda>
 800e584:	2110      	movs	r1, #16
 800e586:	2213      	movs	r2, #19
 800e588:	1860      	adds	r0, r4, r1
 800e58a:	f000 fb25 	bl	800ebd8 <core_set_error>
 800e58e:	463e      	mov	r6, r7
 800e590:	e76d      	b.n	800e46e <ai_platform_network_init+0x9a>
 800e592:	bf00      	nop
 800e594:	a1c00100 	.word	0xa1c00100
 800e598:	e0042000 	.word	0xe0042000
 800e59c:	58024000 	.word	0x58024000
 800e5a0:	f407a5c2 	.word	0xf407a5c2
 800e5a4:	b5e8b5cd 	.word	0xb5e8b5cd
 800e5a8:	40023000 	.word	0x40023000
 800e5ac:	a1facade 	.word	0xa1facade

0800e5b0 <ai_platform_network_post_init>:
 800e5b0:	b538      	push	{r3, r4, r5, lr}
 800e5b2:	b1f0      	cbz	r0, 800e5f2 <ai_platform_network_post_init+0x42>
 800e5b4:	4b3c      	ldr	r3, [pc, #240]	; (800e6a8 <ai_platform_network_post_init+0xf8>)
 800e5b6:	6802      	ldr	r2, [r0, #0]
 800e5b8:	429a      	cmp	r2, r3
 800e5ba:	4604      	mov	r4, r0
 800e5bc:	d119      	bne.n	800e5f2 <ai_platform_network_post_init+0x42>
 800e5be:	f7ff fb4b 	bl	800dc58 <_ai_platform_acquire_crc>
 800e5c2:	4b3a      	ldr	r3, [pc, #232]	; (800e6ac <ai_platform_network_post_init+0xfc>)
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e5ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e5ce:	d03b      	beq.n	800e648 <ai_platform_network_post_init+0x98>
 800e5d0:	4a37      	ldr	r2, [pc, #220]	; (800e6b0 <ai_platform_network_post_init+0x100>)
 800e5d2:	2301      	movs	r3, #1
 800e5d4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800e5d8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d1fb      	bne.n	800e5d8 <ai_platform_network_post_init+0x28>
 800e5e0:	4b34      	ldr	r3, [pc, #208]	; (800e6b4 <ai_platform_network_post_init+0x104>)
 800e5e2:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800e5e6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800e5ea:	4b33      	ldr	r3, [pc, #204]	; (800e6b8 <ai_platform_network_post_init+0x108>)
 800e5ec:	429a      	cmp	r2, r3
 800e5ee:	d037      	beq.n	800e660 <ai_platform_network_post_init+0xb0>
 800e5f0:	e7fe      	b.n	800e5f0 <ai_platform_network_post_init+0x40>
 800e5f2:	f7ff fb31 	bl	800dc58 <_ai_platform_acquire_crc>
 800e5f6:	4b2d      	ldr	r3, [pc, #180]	; (800e6ac <ai_platform_network_post_init+0xfc>)
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e5fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e602:	d010      	beq.n	800e626 <ai_platform_network_post_init+0x76>
 800e604:	4a2a      	ldr	r2, [pc, #168]	; (800e6b0 <ai_platform_network_post_init+0x100>)
 800e606:	2301      	movs	r3, #1
 800e608:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800e60c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800e610:	2b00      	cmp	r3, #0
 800e612:	d1fb      	bne.n	800e60c <ai_platform_network_post_init+0x5c>
 800e614:	4b27      	ldr	r3, [pc, #156]	; (800e6b4 <ai_platform_network_post_init+0x104>)
 800e616:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800e61a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800e61e:	4b26      	ldr	r3, [pc, #152]	; (800e6b8 <ai_platform_network_post_init+0x108>)
 800e620:	429a      	cmp	r2, r3
 800e622:	d00d      	beq.n	800e640 <ai_platform_network_post_init+0x90>
 800e624:	e7fe      	b.n	800e624 <ai_platform_network_post_init+0x74>
 800e626:	4a25      	ldr	r2, [pc, #148]	; (800e6bc <ai_platform_network_post_init+0x10c>)
 800e628:	2301      	movs	r3, #1
 800e62a:	6093      	str	r3, [r2, #8]
 800e62c:	6893      	ldr	r3, [r2, #8]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d1fc      	bne.n	800e62c <ai_platform_network_post_init+0x7c>
 800e632:	4b20      	ldr	r3, [pc, #128]	; (800e6b4 <ai_platform_network_post_init+0x104>)
 800e634:	6013      	str	r3, [r2, #0]
 800e636:	6812      	ldr	r2, [r2, #0]
 800e638:	4b1f      	ldr	r3, [pc, #124]	; (800e6b8 <ai_platform_network_post_init+0x108>)
 800e63a:	429a      	cmp	r2, r3
 800e63c:	d000      	beq.n	800e640 <ai_platform_network_post_init+0x90>
 800e63e:	e7fe      	b.n	800e63e <ai_platform_network_post_init+0x8e>
 800e640:	f7ff fb0c 	bl	800dc5c <_ai_platform_release_crc>
 800e644:	2000      	movs	r0, #0
 800e646:	bd38      	pop	{r3, r4, r5, pc}
 800e648:	4a1c      	ldr	r2, [pc, #112]	; (800e6bc <ai_platform_network_post_init+0x10c>)
 800e64a:	2301      	movs	r3, #1
 800e64c:	6093      	str	r3, [r2, #8]
 800e64e:	6893      	ldr	r3, [r2, #8]
 800e650:	2b00      	cmp	r3, #0
 800e652:	d1fc      	bne.n	800e64e <ai_platform_network_post_init+0x9e>
 800e654:	4b17      	ldr	r3, [pc, #92]	; (800e6b4 <ai_platform_network_post_init+0x104>)
 800e656:	6013      	str	r3, [r2, #0]
 800e658:	6812      	ldr	r2, [r2, #0]
 800e65a:	4b17      	ldr	r3, [pc, #92]	; (800e6b8 <ai_platform_network_post_init+0x108>)
 800e65c:	429a      	cmp	r2, r3
 800e65e:	d11a      	bne.n	800e696 <ai_platform_network_post_init+0xe6>
 800e660:	f7ff fafc 	bl	800dc5c <_ai_platform_release_crc>
 800e664:	68e3      	ldr	r3, [r4, #12]
 800e666:	f013 0502 	ands.w	r5, r3, #2
 800e66a:	d015      	beq.n	800e698 <ai_platform_network_post_init+0xe8>
 800e66c:	4620      	mov	r0, r4
 800e66e:	f000 faf7 	bl	800ec60 <ai_layers_post_init_all>
 800e672:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e674:	b16b      	cbz	r3, 800e692 <ai_platform_network_post_init+0xe2>
 800e676:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800e678:	e007      	b.n	800e68a <ai_platform_network_post_init+0xda>
 800e67a:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 800e67e:	4798      	blx	r3
 800e680:	692b      	ldr	r3, [r5, #16]
 800e682:	42ab      	cmp	r3, r5
 800e684:	d005      	beq.n	800e692 <ai_platform_network_post_init+0xe2>
 800e686:	b123      	cbz	r3, 800e692 <ai_platform_network_post_init+0xe2>
 800e688:	461d      	mov	r5, r3
 800e68a:	4629      	mov	r1, r5
 800e68c:	2000      	movs	r0, #0
 800e68e:	2d00      	cmp	r5, #0
 800e690:	d1f3      	bne.n	800e67a <ai_platform_network_post_init+0xca>
 800e692:	2001      	movs	r0, #1
 800e694:	bd38      	pop	{r3, r4, r5, pc}
 800e696:	e7fe      	b.n	800e696 <ai_platform_network_post_init+0xe6>
 800e698:	2210      	movs	r2, #16
 800e69a:	2111      	movs	r1, #17
 800e69c:	18a0      	adds	r0, r4, r2
 800e69e:	f000 fa9b 	bl	800ebd8 <core_set_error>
 800e6a2:	4628      	mov	r0, r5
 800e6a4:	bd38      	pop	{r3, r4, r5, pc}
 800e6a6:	bf00      	nop
 800e6a8:	a1c00100 	.word	0xa1c00100
 800e6ac:	e0042000 	.word	0xe0042000
 800e6b0:	58024000 	.word	0x58024000
 800e6b4:	f407a5c2 	.word	0xf407a5c2
 800e6b8:	b5e8b5cd 	.word	0xb5e8b5cd
 800e6bc:	40023000 	.word	0x40023000

0800e6c0 <ai_platform_network_process>:
 800e6c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6c4:	460e      	mov	r6, r1
 800e6c6:	b085      	sub	sp, #20
 800e6c8:	4693      	mov	fp, r2
 800e6ca:	4605      	mov	r5, r0
 800e6cc:	b120      	cbz	r0, 800e6d8 <ai_platform_network_process+0x18>
 800e6ce:	4bb8      	ldr	r3, [pc, #736]	; (800e9b0 <ai_platform_network_process+0x2f0>)
 800e6d0:	6802      	ldr	r2, [r0, #0]
 800e6d2:	429a      	cmp	r2, r3
 800e6d4:	bf18      	it	ne
 800e6d6:	2500      	movne	r5, #0
 800e6d8:	f7ff fabe 	bl	800dc58 <_ai_platform_acquire_crc>
 800e6dc:	4bb5      	ldr	r3, [pc, #724]	; (800e9b4 <ai_platform_network_process+0x2f4>)
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e6e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e6e8:	d010      	beq.n	800e70c <ai_platform_network_process+0x4c>
 800e6ea:	4ab3      	ldr	r2, [pc, #716]	; (800e9b8 <ai_platform_network_process+0x2f8>)
 800e6ec:	2301      	movs	r3, #1
 800e6ee:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800e6f2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d1fb      	bne.n	800e6f2 <ai_platform_network_process+0x32>
 800e6fa:	4bb0      	ldr	r3, [pc, #704]	; (800e9bc <ai_platform_network_process+0x2fc>)
 800e6fc:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800e700:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800e704:	4bae      	ldr	r3, [pc, #696]	; (800e9c0 <ai_platform_network_process+0x300>)
 800e706:	429a      	cmp	r2, r3
 800e708:	d00d      	beq.n	800e726 <ai_platform_network_process+0x66>
 800e70a:	e7fe      	b.n	800e70a <ai_platform_network_process+0x4a>
 800e70c:	4aad      	ldr	r2, [pc, #692]	; (800e9c4 <ai_platform_network_process+0x304>)
 800e70e:	2301      	movs	r3, #1
 800e710:	6093      	str	r3, [r2, #8]
 800e712:	6893      	ldr	r3, [r2, #8]
 800e714:	2b00      	cmp	r3, #0
 800e716:	d1fc      	bne.n	800e712 <ai_platform_network_process+0x52>
 800e718:	4ba8      	ldr	r3, [pc, #672]	; (800e9bc <ai_platform_network_process+0x2fc>)
 800e71a:	6013      	str	r3, [r2, #0]
 800e71c:	6812      	ldr	r2, [r2, #0]
 800e71e:	4ba8      	ldr	r3, [pc, #672]	; (800e9c0 <ai_platform_network_process+0x300>)
 800e720:	429a      	cmp	r2, r3
 800e722:	f040 812c 	bne.w	800e97e <ai_platform_network_process+0x2be>
 800e726:	f7ff fa99 	bl	800dc5c <_ai_platform_release_crc>
 800e72a:	2d00      	cmp	r5, #0
 800e72c:	f000 8154 	beq.w	800e9d8 <ai_platform_network_process+0x318>
 800e730:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 800e732:	2b00      	cmp	r3, #0
 800e734:	f000 8124 	beq.w	800e980 <ai_platform_network_process+0x2c0>
 800e738:	68eb      	ldr	r3, [r5, #12]
 800e73a:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 800e73e:	f003 0303 	and.w	r3, r3, #3
 800e742:	2700      	movs	r7, #0
 800e744:	2b03      	cmp	r3, #3
 800e746:	616f      	str	r7, [r5, #20]
 800e748:	f040 813e 	bne.w	800e9c8 <ai_platform_network_process+0x308>
 800e74c:	2e00      	cmp	r6, #0
 800e74e:	f000 811d 	beq.w	800e98c <ai_platform_network_process+0x2cc>
 800e752:	f1ba 0f00 	cmp.w	sl, #0
 800e756:	f000 8119 	beq.w	800e98c <ai_platform_network_process+0x2cc>
 800e75a:	f8ba 3000 	ldrh.w	r3, [sl]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	f000 8114 	beq.w	800e98c <ai_platform_network_process+0x2cc>
 800e764:	69b3      	ldr	r3, [r6, #24]
 800e766:	f8cd b00c 	str.w	fp, [sp, #12]
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	e9cd 3501 	strd	r3, r5, [sp, #4]
 800e770:	f8da 3004 	ldr.w	r3, [sl, #4]
 800e774:	2b00      	cmp	r3, #0
 800e776:	d072      	beq.n	800e85e <ai_platform_network_process+0x19e>
 800e778:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 800e77c:	2c00      	cmp	r4, #0
 800e77e:	d06e      	beq.n	800e85e <ai_platform_network_process+0x19e>
 800e780:	f8da 3008 	ldr.w	r3, [sl, #8]
 800e784:	f8d3 9000 	ldr.w	r9, [r3]
 800e788:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 800e78c:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 800e790:	f000 81de 	beq.w	800eb50 <ai_platform_network_process+0x490>
 800e794:	69a3      	ldr	r3, [r4, #24]
 800e796:	2101      	movs	r1, #1
 800e798:	4630      	mov	r0, r6
 800e79a:	685d      	ldr	r5, [r3, #4]
 800e79c:	f7ff fa0e 	bl	800dbbc <ai_buffer_get_size>
 800e7a0:	4285      	cmp	r5, r0
 800e7a2:	f0c0 811b 	bcc.w	800e9dc <ai_platform_network_process+0x31c>
 800e7a6:	68e0      	ldr	r0, [r4, #12]
 800e7a8:	69b1      	ldr	r1, [r6, #24]
 800e7aa:	68c2      	ldr	r2, [r0, #12]
 800e7ac:	68cb      	ldr	r3, [r1, #12]
 800e7ae:	429a      	cmp	r2, r3
 800e7b0:	f040 8114 	bne.w	800e9dc <ai_platform_network_process+0x31c>
 800e7b4:	6882      	ldr	r2, [r0, #8]
 800e7b6:	688b      	ldr	r3, [r1, #8]
 800e7b8:	429a      	cmp	r2, r3
 800e7ba:	f040 810f 	bne.w	800e9dc <ai_platform_network_process+0x31c>
 800e7be:	6842      	ldr	r2, [r0, #4]
 800e7c0:	684b      	ldr	r3, [r1, #4]
 800e7c2:	429a      	cmp	r2, r3
 800e7c4:	f040 810a 	bne.w	800e9dc <ai_platform_network_process+0x31c>
 800e7c8:	69a3      	ldr	r3, [r4, #24]
 800e7ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e7ce:	f001 fc7b 	bl	80100c8 <ai_array_get_data_byte_size>
 800e7d2:	4605      	mov	r5, r0
 800e7d4:	4620      	mov	r0, r4
 800e7d6:	f001 fc8f 	bl	80100f8 <get_tensor_byte_size>
 800e7da:	4285      	cmp	r5, r0
 800e7dc:	f0c0 80fe 	bcc.w	800e9dc <ai_platform_network_process+0x31c>
 800e7e0:	69a3      	ldr	r3, [r4, #24]
 800e7e2:	6818      	ldr	r0, [r3, #0]
 800e7e4:	f001 fbdc 	bl	800ffa0 <ai_array_to_buffer_fmt>
 800e7e8:	6833      	ldr	r3, [r6, #0]
 800e7ea:	4058      	eors	r0, r3
 800e7ec:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 800e7f0:	f040 81b9 	bne.w	800eb66 <ai_platform_network_process+0x4a6>
 800e7f4:	6873      	ldr	r3, [r6, #4]
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	f000 81ac 	beq.w	800eb54 <ai_platform_network_process+0x494>
 800e7fc:	69b3      	ldr	r3, [r6, #24]
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	2b00      	cmp	r3, #0
 800e802:	f000 819c 	beq.w	800eb3e <ai_platform_network_process+0x47e>
 800e806:	9a01      	ldr	r2, [sp, #4]
 800e808:	429a      	cmp	r2, r3
 800e80a:	bf38      	it	cc
 800e80c:	461a      	movcc	r2, r3
 800e80e:	4620      	mov	r0, r4
 800e810:	9201      	str	r2, [sp, #4]
 800e812:	f001 fc71 	bl	80100f8 <get_tensor_byte_size>
 800e816:	f8c8 0008 	str.w	r0, [r8, #8]
 800e81a:	69b3      	ldr	r3, [r6, #24]
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	fb00 f303 	mul.w	r3, r0, r3
 800e822:	f8c8 300c 	str.w	r3, [r8, #12]
 800e826:	6871      	ldr	r1, [r6, #4]
 800e828:	f8c8 1004 	str.w	r1, [r8, #4]
 800e82c:	440b      	add	r3, r1
 800e82e:	f849 300b 	str.w	r3, [r9, fp]
 800e832:	69a0      	ldr	r0, [r4, #24]
 800e834:	6803      	ldr	r3, [r0, #0]
 800e836:	009a      	lsls	r2, r3, #2
 800e838:	f107 0701 	add.w	r7, r7, #1
 800e83c:	f106 061c 	add.w	r6, r6, #28
 800e840:	f100 80af 	bmi.w	800e9a2 <ai_platform_network_process+0x2e2>
 800e844:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800e848:	1a9b      	subs	r3, r3, r2
 800e84a:	4419      	add	r1, r3
 800e84c:	6081      	str	r1, [r0, #8]
 800e84e:	69a3      	ldr	r3, [r4, #24]
 800e850:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800e854:	60da      	str	r2, [r3, #12]
 800e856:	f8ba 3000 	ldrh.w	r3, [sl]
 800e85a:	42bb      	cmp	r3, r7
 800e85c:	d888      	bhi.n	800e770 <ai_platform_network_process+0xb0>
 800e85e:	e9dd 5b02 	ldrd	r5, fp, [sp, #8]
 800e862:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 800e864:	f1bb 0f00 	cmp.w	fp, #0
 800e868:	f000 8186 	beq.w	800eb78 <ai_platform_network_process+0x4b8>
 800e86c:	2a01      	cmp	r2, #1
 800e86e:	f240 815e 	bls.w	800eb2e <ai_platform_network_process+0x46e>
 800e872:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 800e876:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	f000 8157 	beq.w	800eb2e <ai_platform_network_process+0x46e>
 800e880:	465e      	mov	r6, fp
 800e882:	2700      	movs	r7, #0
 800e884:	462c      	mov	r4, r5
 800e886:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	f000 80b4 	beq.w	800e9f8 <ai_platform_network_process+0x338>
 800e890:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
 800e894:	2d00      	cmp	r5, #0
 800e896:	f000 80af 	beq.w	800e9f8 <ai_platform_network_process+0x338>
 800e89a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800e89e:	f8d3 8000 	ldr.w	r8, [r3]
 800e8a2:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 800e8a6:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 800e8aa:	f000 8171 	beq.w	800eb90 <ai_platform_network_process+0x4d0>
 800e8ae:	69ab      	ldr	r3, [r5, #24]
 800e8b0:	2101      	movs	r1, #1
 800e8b2:	685b      	ldr	r3, [r3, #4]
 800e8b4:	9302      	str	r3, [sp, #8]
 800e8b6:	4630      	mov	r0, r6
 800e8b8:	f7ff f980 	bl	800dbbc <ai_buffer_get_size>
 800e8bc:	9b02      	ldr	r3, [sp, #8]
 800e8be:	4283      	cmp	r3, r0
 800e8c0:	f0c0 8134 	bcc.w	800eb2c <ai_platform_network_process+0x46c>
 800e8c4:	68e8      	ldr	r0, [r5, #12]
 800e8c6:	69b1      	ldr	r1, [r6, #24]
 800e8c8:	68c2      	ldr	r2, [r0, #12]
 800e8ca:	68cb      	ldr	r3, [r1, #12]
 800e8cc:	429a      	cmp	r2, r3
 800e8ce:	f040 812d 	bne.w	800eb2c <ai_platform_network_process+0x46c>
 800e8d2:	6882      	ldr	r2, [r0, #8]
 800e8d4:	688b      	ldr	r3, [r1, #8]
 800e8d6:	429a      	cmp	r2, r3
 800e8d8:	f040 8128 	bne.w	800eb2c <ai_platform_network_process+0x46c>
 800e8dc:	6842      	ldr	r2, [r0, #4]
 800e8de:	684b      	ldr	r3, [r1, #4]
 800e8e0:	429a      	cmp	r2, r3
 800e8e2:	f040 8123 	bne.w	800eb2c <ai_platform_network_process+0x46c>
 800e8e6:	69ab      	ldr	r3, [r5, #24]
 800e8e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e8ec:	f001 fbec 	bl	80100c8 <ai_array_get_data_byte_size>
 800e8f0:	9002      	str	r0, [sp, #8]
 800e8f2:	4628      	mov	r0, r5
 800e8f4:	f001 fc00 	bl	80100f8 <get_tensor_byte_size>
 800e8f8:	9b02      	ldr	r3, [sp, #8]
 800e8fa:	4283      	cmp	r3, r0
 800e8fc:	f0c0 8116 	bcc.w	800eb2c <ai_platform_network_process+0x46c>
 800e900:	69ab      	ldr	r3, [r5, #24]
 800e902:	6818      	ldr	r0, [r3, #0]
 800e904:	f001 fb4c 	bl	800ffa0 <ai_array_to_buffer_fmt>
 800e908:	6833      	ldr	r3, [r6, #0]
 800e90a:	4058      	eors	r0, r3
 800e90c:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 800e910:	f040 8136 	bne.w	800eb80 <ai_platform_network_process+0x4c0>
 800e914:	6873      	ldr	r3, [r6, #4]
 800e916:	2b00      	cmp	r3, #0
 800e918:	f000 814d 	beq.w	800ebb6 <ai_platform_network_process+0x4f6>
 800e91c:	69b3      	ldr	r3, [r6, #24]
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	2b00      	cmp	r3, #0
 800e922:	f000 813f 	beq.w	800eba4 <ai_platform_network_process+0x4e4>
 800e926:	9a01      	ldr	r2, [sp, #4]
 800e928:	429a      	cmp	r2, r3
 800e92a:	bf38      	it	cc
 800e92c:	461a      	movcc	r2, r3
 800e92e:	4628      	mov	r0, r5
 800e930:	9201      	str	r2, [sp, #4]
 800e932:	f001 fbe1 	bl	80100f8 <get_tensor_byte_size>
 800e936:	f8ca 0008 	str.w	r0, [sl, #8]
 800e93a:	69b3      	ldr	r3, [r6, #24]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	fb00 f303 	mul.w	r3, r0, r3
 800e942:	f8ca 300c 	str.w	r3, [sl, #12]
 800e946:	6871      	ldr	r1, [r6, #4]
 800e948:	f8ca 1004 	str.w	r1, [sl, #4]
 800e94c:	440b      	add	r3, r1
 800e94e:	f848 300b 	str.w	r3, [r8, fp]
 800e952:	69a8      	ldr	r0, [r5, #24]
 800e954:	6803      	ldr	r3, [r0, #0]
 800e956:	009b      	lsls	r3, r3, #2
 800e958:	f107 0701 	add.w	r7, r7, #1
 800e95c:	f106 061c 	add.w	r6, r6, #28
 800e960:	d445      	bmi.n	800e9ee <ai_platform_network_process+0x32e>
 800e962:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800e966:	1a9b      	subs	r3, r3, r2
 800e968:	4419      	add	r1, r3
 800e96a:	6081      	str	r1, [r0, #8]
 800e96c:	69ab      	ldr	r3, [r5, #24]
 800e96e:	f8da 2004 	ldr.w	r2, [sl, #4]
 800e972:	60da      	str	r2, [r3, #12]
 800e974:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800e978:	429f      	cmp	r7, r3
 800e97a:	d384      	bcc.n	800e886 <ai_platform_network_process+0x1c6>
 800e97c:	e03c      	b.n	800e9f8 <ai_platform_network_process+0x338>
 800e97e:	e7fe      	b.n	800e97e <ai_platform_network_process+0x2be>
 800e980:	68ea      	ldr	r2, [r5, #12]
 800e982:	616b      	str	r3, [r5, #20]
 800e984:	f002 0203 	and.w	r2, r2, #3
 800e988:	2a03      	cmp	r2, #3
 800e98a:	d11d      	bne.n	800e9c8 <ai_platform_network_process+0x308>
 800e98c:	2217      	movs	r2, #23
 800e98e:	2112      	movs	r1, #18
 800e990:	f105 0010 	add.w	r0, r5, #16
 800e994:	f000 f920 	bl	800ebd8 <core_set_error>
 800e998:	2400      	movs	r4, #0
 800e99a:	4620      	mov	r0, r4
 800e99c:	b005      	add	sp, #20
 800e99e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9a2:	f8ba 3000 	ldrh.w	r3, [sl]
 800e9a6:	429f      	cmp	r7, r3
 800e9a8:	f4ff aee2 	bcc.w	800e770 <ai_platform_network_process+0xb0>
 800e9ac:	e757      	b.n	800e85e <ai_platform_network_process+0x19e>
 800e9ae:	bf00      	nop
 800e9b0:	a1c00100 	.word	0xa1c00100
 800e9b4:	e0042000 	.word	0xe0042000
 800e9b8:	58024000 	.word	0x58024000
 800e9bc:	f407a5c2 	.word	0xf407a5c2
 800e9c0:	b5e8b5cd 	.word	0xb5e8b5cd
 800e9c4:	40023000 	.word	0x40023000
 800e9c8:	2230      	movs	r2, #48	; 0x30
 800e9ca:	2111      	movs	r1, #17
 800e9cc:	f105 0010 	add.w	r0, r5, #16
 800e9d0:	f000 f902 	bl	800ebd8 <core_set_error>
 800e9d4:	2400      	movs	r4, #0
 800e9d6:	e7e0      	b.n	800e99a <ai_platform_network_process+0x2da>
 800e9d8:	462c      	mov	r4, r5
 800e9da:	e7de      	b.n	800e99a <ai_platform_network_process+0x2da>
 800e9dc:	9d02      	ldr	r5, [sp, #8]
 800e9de:	2218      	movs	r2, #24
 800e9e0:	2112      	movs	r1, #18
 800e9e2:	f105 0010 	add.w	r0, r5, #16
 800e9e6:	f000 f8f7 	bl	800ebd8 <core_set_error>
 800e9ea:	2400      	movs	r4, #0
 800e9ec:	e7d5      	b.n	800e99a <ai_platform_network_process+0x2da>
 800e9ee:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800e9f2:	429f      	cmp	r7, r3
 800e9f4:	f4ff af47 	bcc.w	800e886 <ai_platform_network_process+0x1c6>
 800e9f8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800e9fc:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 800e9fe:	82a3      	strh	r3, [r4, #20]
 800ea00:	4625      	mov	r5, r4
 800ea02:	2a00      	cmp	r2, #0
 800ea04:	f040 808c 	bne.w	800eb20 <ai_platform_network_process+0x460>
 800ea08:	4616      	mov	r6, r2
 800ea0a:	4617      	mov	r7, r2
 800ea0c:	8aec      	ldrh	r4, [r5, #22]
 800ea0e:	429c      	cmp	r4, r3
 800ea10:	bf38      	it	cc
 800ea12:	46ab      	movcc	fp, r5
 800ea14:	d2c1      	bcs.n	800e99a <ai_platform_network_process+0x2da>
 800ea16:	2e00      	cmp	r6, #0
 800ea18:	d030      	beq.n	800ea7c <ai_platform_network_process+0x3bc>
 800ea1a:	f04f 0800 	mov.w	r8, #0
 800ea1e:	e014      	b.n	800ea4a <ai_platform_network_process+0x38a>
 800ea20:	6882      	ldr	r2, [r0, #8]
 800ea22:	68c5      	ldr	r5, [r0, #12]
 800ea24:	6863      	ldr	r3, [r4, #4]
 800ea26:	1b52      	subs	r2, r2, r5
 800ea28:	4413      	add	r3, r2
 800ea2a:	6083      	str	r3, [r0, #8]
 800ea2c:	698b      	ldr	r3, [r1, #24]
 800ea2e:	6862      	ldr	r2, [r4, #4]
 800ea30:	60da      	str	r2, [r3, #12]
 800ea32:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 800ea36:	f859 200a 	ldr.w	r2, [r9, sl]
 800ea3a:	440b      	add	r3, r1
 800ea3c:	4293      	cmp	r3, r2
 800ea3e:	bf24      	itt	cs
 800ea40:	68e3      	ldrcs	r3, [r4, #12]
 800ea42:	1ad3      	subcs	r3, r2, r3
 800ea44:	6063      	str	r3, [r4, #4]
 800ea46:	f108 0801 	add.w	r8, r8, #1
 800ea4a:	8833      	ldrh	r3, [r6, #0]
 800ea4c:	4543      	cmp	r3, r8
 800ea4e:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 800ea52:	d913      	bls.n	800ea7c <ai_platform_network_process+0x3bc>
 800ea54:	6873      	ldr	r3, [r6, #4]
 800ea56:	b18b      	cbz	r3, 800ea7c <ai_platform_network_process+0x3bc>
 800ea58:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 800ea5c:	b171      	cbz	r1, 800ea7c <ai_platform_network_process+0x3bc>
 800ea5e:	6988      	ldr	r0, [r1, #24]
 800ea60:	68b2      	ldr	r2, [r6, #8]
 800ea62:	6803      	ldr	r3, [r0, #0]
 800ea64:	f8d2 9000 	ldr.w	r9, [r2]
 800ea68:	009d      	lsls	r5, r3, #2
 800ea6a:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 800ea6e:	d5d7      	bpl.n	800ea20 <ai_platform_network_process+0x360>
 800ea70:	6881      	ldr	r1, [r0, #8]
 800ea72:	68a2      	ldr	r2, [r4, #8]
 800ea74:	6860      	ldr	r0, [r4, #4]
 800ea76:	f001 f9a5 	bl	800fdc4 <st_int8_copy>
 800ea7a:	e7da      	b.n	800ea32 <ai_platform_network_process+0x372>
 800ea7c:	4658      	mov	r0, fp
 800ea7e:	f000 f903 	bl	800ec88 <ai_layers_forward_all>
 800ea82:	2f00      	cmp	r7, #0
 800ea84:	d03d      	beq.n	800eb02 <ai_platform_network_process+0x442>
 800ea86:	2400      	movs	r4, #0
 800ea88:	e016      	b.n	800eab8 <ai_platform_network_process+0x3f8>
 800ea8a:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 800ea8e:	f859 100a 	ldr.w	r1, [r9, sl]
 800ea92:	4413      	add	r3, r2
 800ea94:	428b      	cmp	r3, r1
 800ea96:	bf24      	itt	cs
 800ea98:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 800ea9c:	1acb      	subcs	r3, r1, r3
 800ea9e:	f8c8 3004 	str.w	r3, [r8, #4]
 800eaa2:	6981      	ldr	r1, [r0, #24]
 800eaa4:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 800eaa8:	1b52      	subs	r2, r2, r5
 800eaaa:	4413      	add	r3, r2
 800eaac:	608b      	str	r3, [r1, #8]
 800eaae:	6983      	ldr	r3, [r0, #24]
 800eab0:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800eab4:	60da      	str	r2, [r3, #12]
 800eab6:	3401      	adds	r4, #1
 800eab8:	883b      	ldrh	r3, [r7, #0]
 800eaba:	42a3      	cmp	r3, r4
 800eabc:	d921      	bls.n	800eb02 <ai_platform_network_process+0x442>
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	b1fb      	cbz	r3, 800eb02 <ai_platform_network_process+0x442>
 800eac2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800eac6:	b1e0      	cbz	r0, 800eb02 <ai_platform_network_process+0x442>
 800eac8:	68ba      	ldr	r2, [r7, #8]
 800eaca:	6983      	ldr	r3, [r0, #24]
 800eacc:	f8d2 9000 	ldr.w	r9, [r2]
 800ead0:	681a      	ldr	r2, [r3, #0]
 800ead2:	0092      	lsls	r2, r2, #2
 800ead4:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 800ead8:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 800eadc:	d5d5      	bpl.n	800ea8a <ai_platform_network_process+0x3ca>
 800eade:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 800eae2:	6898      	ldr	r0, [r3, #8]
 800eae4:	f001 f96e 	bl	800fdc4 <st_int8_copy>
 800eae8:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 800eaec:	f859 200a 	ldr.w	r2, [r9, sl]
 800eaf0:	440b      	add	r3, r1
 800eaf2:	4293      	cmp	r3, r2
 800eaf4:	bf24      	itt	cs
 800eaf6:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 800eafa:	1ad3      	subcs	r3, r2, r3
 800eafc:	f8c8 3004 	str.w	r3, [r8, #4]
 800eb00:	e7d9      	b.n	800eab6 <ai_platform_network_process+0x3f6>
 800eb02:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 800eb06:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 800eb0a:	3401      	adds	r4, #1
 800eb0c:	b2a4      	uxth	r4, r4
 800eb0e:	42a3      	cmp	r3, r4
 800eb10:	f8ab 4016 	strh.w	r4, [fp, #22]
 800eb14:	f63f af7f 	bhi.w	800ea16 <ai_platform_network_process+0x356>
 800eb18:	4620      	mov	r0, r4
 800eb1a:	b005      	add	sp, #20
 800eb1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb20:	2a01      	cmp	r2, #1
 800eb22:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 800eb24:	d03c      	beq.n	800eba0 <ai_platform_network_process+0x4e0>
 800eb26:	f106 070c 	add.w	r7, r6, #12
 800eb2a:	e76f      	b.n	800ea0c <ai_platform_network_process+0x34c>
 800eb2c:	4625      	mov	r5, r4
 800eb2e:	2218      	movs	r2, #24
 800eb30:	2113      	movs	r1, #19
 800eb32:	f105 0010 	add.w	r0, r5, #16
 800eb36:	f000 f84f 	bl	800ebd8 <core_set_error>
 800eb3a:	2400      	movs	r4, #0
 800eb3c:	e72d      	b.n	800e99a <ai_platform_network_process+0x2da>
 800eb3e:	9d02      	ldr	r5, [sp, #8]
 800eb40:	4604      	mov	r4, r0
 800eb42:	2221      	movs	r2, #33	; 0x21
 800eb44:	2112      	movs	r1, #18
 800eb46:	f105 0010 	add.w	r0, r5, #16
 800eb4a:	f000 f845 	bl	800ebd8 <core_set_error>
 800eb4e:	e724      	b.n	800e99a <ai_platform_network_process+0x2da>
 800eb50:	9d02      	ldr	r5, [sp, #8]
 800eb52:	e71b      	b.n	800e98c <ai_platform_network_process+0x2cc>
 800eb54:	9d02      	ldr	r5, [sp, #8]
 800eb56:	4604      	mov	r4, r0
 800eb58:	2217      	movs	r2, #23
 800eb5a:	2112      	movs	r1, #18
 800eb5c:	f105 0010 	add.w	r0, r5, #16
 800eb60:	f000 f83a 	bl	800ebd8 <core_set_error>
 800eb64:	e719      	b.n	800e99a <ai_platform_network_process+0x2da>
 800eb66:	9d02      	ldr	r5, [sp, #8]
 800eb68:	2219      	movs	r2, #25
 800eb6a:	2112      	movs	r1, #18
 800eb6c:	f105 0010 	add.w	r0, r5, #16
 800eb70:	f000 f832 	bl	800ebd8 <core_set_error>
 800eb74:	2400      	movs	r4, #0
 800eb76:	e710      	b.n	800e99a <ai_platform_network_process+0x2da>
 800eb78:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800eb7c:	82ab      	strh	r3, [r5, #20]
 800eb7e:	e740      	b.n	800ea02 <ai_platform_network_process+0x342>
 800eb80:	f104 0010 	add.w	r0, r4, #16
 800eb84:	2219      	movs	r2, #25
 800eb86:	2113      	movs	r1, #19
 800eb88:	f000 f826 	bl	800ebd8 <core_set_error>
 800eb8c:	2400      	movs	r4, #0
 800eb8e:	e704      	b.n	800e99a <ai_platform_network_process+0x2da>
 800eb90:	f104 0010 	add.w	r0, r4, #16
 800eb94:	2217      	movs	r2, #23
 800eb96:	2113      	movs	r1, #19
 800eb98:	f000 f81e 	bl	800ebd8 <core_set_error>
 800eb9c:	4654      	mov	r4, sl
 800eb9e:	e6fc      	b.n	800e99a <ai_platform_network_process+0x2da>
 800eba0:	2700      	movs	r7, #0
 800eba2:	e733      	b.n	800ea0c <ai_platform_network_process+0x34c>
 800eba4:	4625      	mov	r5, r4
 800eba6:	2221      	movs	r2, #33	; 0x21
 800eba8:	4604      	mov	r4, r0
 800ebaa:	2113      	movs	r1, #19
 800ebac:	f105 0010 	add.w	r0, r5, #16
 800ebb0:	f000 f812 	bl	800ebd8 <core_set_error>
 800ebb4:	e6f1      	b.n	800e99a <ai_platform_network_process+0x2da>
 800ebb6:	4625      	mov	r5, r4
 800ebb8:	2217      	movs	r2, #23
 800ebba:	4604      	mov	r4, r0
 800ebbc:	2113      	movs	r1, #19
 800ebbe:	f105 0010 	add.w	r0, r5, #16
 800ebc2:	f000 f809 	bl	800ebd8 <core_set_error>
 800ebc6:	e6e8      	b.n	800e99a <ai_platform_network_process+0x2da>

0800ebc8 <core_init>:
 800ebc8:	2001      	movs	r0, #1
 800ebca:	4770      	bx	lr

0800ebcc <core_get_error>:
 800ebcc:	4603      	mov	r3, r0
 800ebce:	2200      	movs	r2, #0
 800ebd0:	6800      	ldr	r0, [r0, #0]
 800ebd2:	601a      	str	r2, [r3, #0]
 800ebd4:	4770      	bx	lr
 800ebd6:	bf00      	nop

0800ebd8 <core_set_error>:
 800ebd8:	4603      	mov	r3, r0
 800ebda:	7800      	ldrb	r0, [r0, #0]
 800ebdc:	b108      	cbz	r0, 800ebe2 <core_set_error+0xa>
 800ebde:	2000      	movs	r0, #0
 800ebe0:	4770      	bx	lr
 800ebe2:	7019      	strb	r1, [r3, #0]
 800ebe4:	6819      	ldr	r1, [r3, #0]
 800ebe6:	f362 211f 	bfi	r1, r2, #8, #24
 800ebea:	2001      	movs	r0, #1
 800ebec:	6019      	str	r1, [r3, #0]
 800ebee:	4770      	bx	lr

0800ebf0 <ai_check_custom_types>:
 800ebf0:	b082      	sub	sp, #8
 800ebf2:	4b13      	ldr	r3, [pc, #76]	; (800ec40 <ai_check_custom_types+0x50>)
 800ebf4:	9301      	str	r3, [sp, #4]
 800ebf6:	b118      	cbz	r0, 800ec00 <ai_check_custom_types+0x10>
 800ebf8:	7803      	ldrb	r3, [r0, #0]
 800ebfa:	2b03      	cmp	r3, #3
 800ebfc:	d002      	beq.n	800ec04 <ai_check_custom_types+0x14>
 800ebfe:	2000      	movs	r0, #0
 800ec00:	b002      	add	sp, #8
 800ec02:	4770      	bx	lr
 800ec04:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ec08:	4293      	cmp	r3, r2
 800ec0a:	d004      	beq.n	800ec16 <ai_check_custom_types+0x26>
 800ec0c:	2001      	movs	r0, #1
 800ec0e:	f080 0001 	eor.w	r0, r0, #1
 800ec12:	b002      	add	sp, #8
 800ec14:	4770      	bx	lr
 800ec16:	7842      	ldrb	r2, [r0, #1]
 800ec18:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ec1c:	429a      	cmp	r2, r3
 800ec1e:	f100 0001 	add.w	r0, r0, #1
 800ec22:	d1f3      	bne.n	800ec0c <ai_check_custom_types+0x1c>
 800ec24:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800ec28:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ec2c:	429a      	cmp	r2, r3
 800ec2e:	d1ed      	bne.n	800ec0c <ai_check_custom_types+0x1c>
 800ec30:	7842      	ldrb	r2, [r0, #1]
 800ec32:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ec36:	429a      	cmp	r2, r3
 800ec38:	d1e8      	bne.n	800ec0c <ai_check_custom_types+0x1c>
 800ec3a:	2000      	movs	r0, #0
 800ec3c:	e7e7      	b.n	800ec0e <ai_check_custom_types+0x1e>
 800ec3e:	bf00      	nop
 800ec40:	84048403 	.word	0x84048403

0800ec44 <ai_layers_init_all>:
 800ec44:	4601      	mov	r1, r0
 800ec46:	2000      	movs	r0, #0
 800ec48:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800ec4a:	b143      	cbz	r3, 800ec5e <ai_layers_init_all+0x1a>
 800ec4c:	691a      	ldr	r2, [r3, #16]
 800ec4e:	60d9      	str	r1, [r3, #12]
 800ec50:	429a      	cmp	r2, r3
 800ec52:	f100 0001 	add.w	r0, r0, #1
 800ec56:	d002      	beq.n	800ec5e <ai_layers_init_all+0x1a>
 800ec58:	b10a      	cbz	r2, 800ec5e <ai_layers_init_all+0x1a>
 800ec5a:	4613      	mov	r3, r2
 800ec5c:	e7f5      	b.n	800ec4a <ai_layers_init_all+0x6>
 800ec5e:	4770      	bx	lr

0800ec60 <ai_layers_post_init_all>:
 800ec60:	b538      	push	{r3, r4, r5, lr}
 800ec62:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800ec64:	2500      	movs	r5, #0
 800ec66:	b16c      	cbz	r4, 800ec84 <ai_layers_post_init_all+0x24>
 800ec68:	6863      	ldr	r3, [r4, #4]
 800ec6a:	07db      	lsls	r3, r3, #31
 800ec6c:	d504      	bpl.n	800ec78 <ai_layers_post_init_all+0x18>
 800ec6e:	6a23      	ldr	r3, [r4, #32]
 800ec70:	4620      	mov	r0, r4
 800ec72:	b10b      	cbz	r3, 800ec78 <ai_layers_post_init_all+0x18>
 800ec74:	4798      	blx	r3
 800ec76:	3501      	adds	r5, #1
 800ec78:	6923      	ldr	r3, [r4, #16]
 800ec7a:	42a3      	cmp	r3, r4
 800ec7c:	d002      	beq.n	800ec84 <ai_layers_post_init_all+0x24>
 800ec7e:	b10b      	cbz	r3, 800ec84 <ai_layers_post_init_all+0x24>
 800ec80:	461c      	mov	r4, r3
 800ec82:	e7f0      	b.n	800ec66 <ai_layers_post_init_all+0x6>
 800ec84:	4628      	mov	r0, r5
 800ec86:	bd38      	pop	{r3, r4, r5, pc}

0800ec88 <ai_layers_forward_all>:
 800ec88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec8c:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 800ec90:	4604      	mov	r4, r0
 800ec92:	f1b8 0f00 	cmp.w	r8, #0
 800ec96:	d02b      	beq.n	800ecf0 <ai_layers_forward_all+0x68>
 800ec98:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800ec9a:	6381      	str	r1, [r0, #56]	; 0x38
 800ec9c:	b321      	cbz	r1, 800ece8 <ai_layers_forward_all+0x60>
 800ec9e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800eca0:	2001      	movs	r0, #1
 800eca2:	47c0      	blx	r8
 800eca4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800eca6:	b1fe      	cbz	r6, 800ece8 <ai_layers_forward_all+0x60>
 800eca8:	2700      	movs	r7, #0
 800ecaa:	4631      	mov	r1, r6
 800ecac:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800ecae:	2002      	movs	r0, #2
 800ecb0:	47c0      	blx	r8
 800ecb2:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800ecb4:	4628      	mov	r0, r5
 800ecb6:	696b      	ldr	r3, [r5, #20]
 800ecb8:	4798      	blx	r3
 800ecba:	692e      	ldr	r6, [r5, #16]
 800ecbc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800ecbe:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ecc0:	42b5      	cmp	r5, r6
 800ecc2:	f04f 0003 	mov.w	r0, #3
 800ecc6:	d007      	beq.n	800ecd8 <ai_layers_forward_all+0x50>
 800ecc8:	47c0      	blx	r8
 800ecca:	3701      	adds	r7, #1
 800eccc:	63a6      	str	r6, [r4, #56]	; 0x38
 800ecce:	2e00      	cmp	r6, #0
 800ecd0:	d1eb      	bne.n	800ecaa <ai_layers_forward_all+0x22>
 800ecd2:	4638      	mov	r0, r7
 800ecd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecd8:	2003      	movs	r0, #3
 800ecda:	47c0      	blx	r8
 800ecdc:	2300      	movs	r3, #0
 800ecde:	3701      	adds	r7, #1
 800ece0:	63a3      	str	r3, [r4, #56]	; 0x38
 800ece2:	4638      	mov	r0, r7
 800ece4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ece8:	2700      	movs	r7, #0
 800ecea:	4638      	mov	r0, r7
 800ecec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecf0:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800ecf2:	6385      	str	r5, [r0, #56]	; 0x38
 800ecf4:	2d00      	cmp	r5, #0
 800ecf6:	d0f7      	beq.n	800ece8 <ai_layers_forward_all+0x60>
 800ecf8:	4647      	mov	r7, r8
 800ecfa:	696b      	ldr	r3, [r5, #20]
 800ecfc:	4628      	mov	r0, r5
 800ecfe:	4798      	blx	r3
 800ed00:	462b      	mov	r3, r5
 800ed02:	692d      	ldr	r5, [r5, #16]
 800ed04:	429d      	cmp	r5, r3
 800ed06:	d004      	beq.n	800ed12 <ai_layers_forward_all+0x8a>
 800ed08:	63a5      	str	r5, [r4, #56]	; 0x38
 800ed0a:	3701      	adds	r7, #1
 800ed0c:	2d00      	cmp	r5, #0
 800ed0e:	d1f4      	bne.n	800ecfa <ai_layers_forward_all+0x72>
 800ed10:	e7df      	b.n	800ecd2 <ai_layers_forward_all+0x4a>
 800ed12:	2300      	movs	r3, #0
 800ed14:	63a3      	str	r3, [r4, #56]	; 0x38
 800ed16:	3701      	adds	r7, #1
 800ed18:	e7db      	b.n	800ecd2 <ai_layers_forward_all+0x4a>
 800ed1a:	bf00      	nop

0800ed1c <forward_dense>:
 800ed1c:	6983      	ldr	r3, [r0, #24]
 800ed1e:	881a      	ldrh	r2, [r3, #0]
 800ed20:	2a00      	cmp	r2, #0
 800ed22:	f000 8181 	beq.w	800f028 <forward_dense+0x30c>
 800ed26:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed2a:	ed2d 8b02 	vpush	{d8}
 800ed2e:	f8d3 c004 	ldr.w	ip, [r3, #4]
 800ed32:	f8dc 5004 	ldr.w	r5, [ip, #4]
 800ed36:	b095      	sub	sp, #84	; 0x54
 800ed38:	b105      	cbz	r5, 800ed3c <forward_dense+0x20>
 800ed3a:	682d      	ldr	r5, [r5, #0]
 800ed3c:	2a01      	cmp	r2, #1
 800ed3e:	f000 828f 	beq.w	800f260 <forward_dense+0x544>
 800ed42:	f8dc 6010 	ldr.w	r6, [ip, #16]
 800ed46:	b106      	cbz	r6, 800ed4a <forward_dense+0x2e>
 800ed48:	6836      	ldr	r6, [r6, #0]
 800ed4a:	2a02      	cmp	r2, #2
 800ed4c:	f000 816e 	beq.w	800f02c <forward_dense+0x310>
 800ed50:	f8dc 301c 	ldr.w	r3, [ip, #28]
 800ed54:	930b      	str	r3, [sp, #44]	; 0x2c
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	f000 8274 	beq.w	800f244 <forward_dense+0x528>
 800ed5c:	4619      	mov	r1, r3
 800ed5e:	f8bc 3018 	ldrh.w	r3, [ip, #24]
 800ed62:	6809      	ldr	r1, [r1, #0]
 800ed64:	910d      	str	r1, [sp, #52]	; 0x34
 800ed66:	2b01      	cmp	r3, #1
 800ed68:	f240 826e 	bls.w	800f248 <forward_dense+0x52c>
 800ed6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ed6e:	685b      	ldr	r3, [r3, #4]
 800ed70:	930b      	str	r3, [sp, #44]	; 0x2c
 800ed72:	460b      	mov	r3, r1
 800ed74:	68e8      	ldr	r0, [r5, #12]
 800ed76:	68f7      	ldr	r7, [r6, #12]
 800ed78:	6840      	ldr	r0, [r0, #4]
 800ed7a:	6999      	ldr	r1, [r3, #24]
 800ed7c:	9013      	str	r0, [sp, #76]	; 0x4c
 800ed7e:	6878      	ldr	r0, [r7, #4]
 800ed80:	680b      	ldr	r3, [r1, #0]
 800ed82:	9012      	str	r0, [sp, #72]	; 0x48
 800ed84:	e9d7 4702 	ldrd	r4, r7, [r7, #8]
 800ed88:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 800ed8c:	fb00 f404 	mul.w	r4, r0, r4
 800ed90:	f3c3 5041 	ubfx	r0, r3, #21, #2
 800ed94:	fa4e f000 	asr.w	r0, lr, r0
 800ed98:	2a03      	cmp	r2, #3
 800ed9a:	9010      	str	r0, [sp, #64]	; 0x40
 800ed9c:	f000 825d 	beq.w	800f25a <forward_dense+0x53e>
 800eda0:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
 800eda4:	f3c3 4343 	ubfx	r3, r3, #17, #4
 800eda8:	2a00      	cmp	r2, #0
 800edaa:	f000 8246 	beq.w	800f23a <forward_dense+0x51e>
 800edae:	6812      	ldr	r2, [r2, #0]
 800edb0:	2a00      	cmp	r2, #0
 800edb2:	f000 8242 	beq.w	800f23a <forward_dense+0x51e>
 800edb6:	2b04      	cmp	r3, #4
 800edb8:	f8d2 9018 	ldr.w	r9, [r2, #24]
 800edbc:	f000 822c 	beq.w	800f218 <forward_dense+0x4fc>
 800edc0:	2b08      	cmp	r3, #8
 800edc2:	f000 8229 	beq.w	800f218 <forward_dense+0x4fc>
 800edc6:	f04f 0b00 	mov.w	fp, #0
 800edca:	69b2      	ldr	r2, [r6, #24]
 800edcc:	69ab      	ldr	r3, [r5, #24]
 800edce:	6891      	ldr	r1, [r2, #8]
 800edd0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800edd2:	689b      	ldr	r3, [r3, #8]
 800edd4:	6952      	ldr	r2, [r2, #20]
 800edd6:	9106      	str	r1, [sp, #24]
 800edd8:	fb07 f404 	mul.w	r4, r7, r4
 800eddc:	f8d2 9004 	ldr.w	r9, [r2, #4]
 800ede0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ede2:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800ede6:	4281      	cmp	r1, r0
 800ede8:	ea4f 0482 	mov.w	r4, r2, lsl #2
 800edec:	900e      	str	r0, [sp, #56]	; 0x38
 800edee:	940c      	str	r4, [sp, #48]	; 0x30
 800edf0:	eb01 0882 	add.w	r8, r1, r2, lsl #2
 800edf4:	f080 8113 	bcs.w	800f01e <forward_dense+0x302>
 800edf8:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800edfa:	ed9f 8a93 	vldr	s16, [pc, #588]	; 800f048 <forward_dense+0x32c>
 800edfe:	f021 0201 	bic.w	r2, r1, #1
 800ee02:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800ee06:	9204      	str	r2, [sp, #16]
 800ee08:	f001 0201 	and.w	r2, r1, #1
 800ee0c:	08c8      	lsrs	r0, r1, #3
 800ee0e:	9208      	str	r2, [sp, #32]
 800ee10:	008a      	lsls	r2, r1, #2
 800ee12:	f001 0a07 	and.w	sl, r1, #7
 800ee16:	920f      	str	r2, [sp, #60]	; 0x3c
 800ee18:	eb03 1240 	add.w	r2, r3, r0, lsl #5
 800ee1c:	3320      	adds	r3, #32
 800ee1e:	465c      	mov	r4, fp
 800ee20:	9007      	str	r0, [sp, #28]
 800ee22:	46cb      	mov	fp, r9
 800ee24:	9205      	str	r2, [sp, #20]
 800ee26:	9302      	str	r3, [sp, #8]
 800ee28:	46c1      	mov	r9, r8
 800ee2a:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 800ee2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ee30:	699b      	ldr	r3, [r3, #24]
 800ee32:	689a      	ldr	r2, [r3, #8]
 800ee34:	9b02      	ldr	r3, [sp, #8]
 800ee36:	3b20      	subs	r3, #32
 800ee38:	930a      	str	r3, [sp, #40]	; 0x28
 800ee3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ee3c:	b10b      	cbz	r3, 800ee42 <forward_dense+0x126>
 800ee3e:	699b      	ldr	r3, [r3, #24]
 800ee40:	689b      	ldr	r3, [r3, #8]
 800ee42:	2c00      	cmp	r4, #0
 800ee44:	f000 81da 	beq.w	800f1fc <forward_dense+0x4e0>
 800ee48:	9910      	ldr	r1, [sp, #64]	; 0x40
 800ee4a:	2904      	cmp	r1, #4
 800ee4c:	9906      	ldr	r1, [sp, #24]
 800ee4e:	f000 80fd 	beq.w	800f04c <forward_dense+0x330>
 800ee52:	4549      	cmp	r1, r9
 800ee54:	f080 80d2 	bcs.w	800effc <forward_dense+0x2e0>
 800ee58:	460f      	mov	r7, r1
 800ee5a:	9907      	ldr	r1, [sp, #28]
 800ee5c:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800ee60:	f8dd a014 	ldr.w	sl, [sp, #20]
 800ee64:	1c4e      	adds	r6, r1, #1
 800ee66:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800ee6a:	4694      	mov	ip, r2
 800ee6c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ee6e:	468e      	mov	lr, r1
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	f000 80de 	beq.w	800f032 <forward_dense+0x316>
 800ee76:	ecf3 2a01 	vldmia	r3!, {s5}
 800ee7a:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800f048 <forward_dense+0x32c>
 800ee7e:	f1be 0f00 	cmp.w	lr, #0
 800ee82:	f000 80de 	beq.w	800f042 <forward_dense+0x326>
 800ee86:	f10c 0108 	add.w	r1, ip, #8
 800ee8a:	4640      	mov	r0, r8
 800ee8c:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 800ee90:	ed10 3a07 	vldr	s6, [r0, #-28]	; 0xffffffe4
 800ee94:	ed50 3a08 	vldr	s7, [r0, #-32]	; 0xffffffe0
 800ee98:	ed10 4a06 	vldr	s8, [r0, #-24]	; 0xffffffe8
 800ee9c:	ed50 4a05 	vldr	s9, [r0, #-20]	; 0xffffffec
 800eea0:	ed10 5a04 	vldr	s10, [r0, #-16]
 800eea4:	ed50 5a03 	vldr	s11, [r0, #-12]
 800eea8:	ed10 6a02 	vldr	s12, [r0, #-8]
 800eeac:	ed50 6a01 	vldr	s13, [r0, #-4]
 800eeb0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800eeb4:	edd5 7a00 	vldr	s15, [r5]
 800eeb8:	f811 5c08 	ldrb.w	r5, [r1, #-8]
 800eebc:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800eec0:	ee67 7a83 	vmul.f32	s15, s15, s6
 800eec4:	ed95 3a00 	vldr	s6, [r5]
 800eec8:	f811 5c06 	ldrb.w	r5, [r1, #-6]
 800eecc:	eee3 7a23 	vfma.f32	s15, s6, s7
 800eed0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800eed4:	3108      	adds	r1, #8
 800eed6:	edd5 3a00 	vldr	s7, [r5]
 800eeda:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 800eede:	eee3 7a84 	vfma.f32	s15, s7, s8
 800eee2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800eee6:	3020      	adds	r0, #32
 800eee8:	ed95 4a00 	vldr	s8, [r5]
 800eeec:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 800eef0:	eee4 7a24 	vfma.f32	s15, s8, s9
 800eef4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800eef8:	edd5 4a00 	vldr	s9, [r5]
 800eefc:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 800ef00:	eee4 7a85 	vfma.f32	s15, s9, s10
 800ef04:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800ef08:	ed95 5a00 	vldr	s10, [r5]
 800ef0c:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 800ef10:	eee5 7a25 	vfma.f32	s15, s10, s11
 800ef14:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800ef18:	edd5 5a00 	vldr	s11, [r5]
 800ef1c:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 800ef20:	eee5 7a86 	vfma.f32	s15, s11, s12
 800ef24:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800ef28:	428e      	cmp	r6, r1
 800ef2a:	ed95 6a00 	vldr	s12, [r5]
 800ef2e:	eee6 7a26 	vfma.f32	s15, s12, s13
 800ef32:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ef36:	d1a9      	bne.n	800ee8c <forward_dense+0x170>
 800ef38:	f1a6 0108 	sub.w	r1, r6, #8
 800ef3c:	4650      	mov	r0, sl
 800ef3e:	2a00      	cmp	r2, #0
 800ef40:	d04a      	beq.n	800efd8 <forward_dense+0x2bc>
 800ef42:	780d      	ldrb	r5, [r1, #0]
 800ef44:	edd0 6a00 	vldr	s13, [r0]
 800ef48:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800ef4c:	edd5 7a00 	vldr	s15, [r5]
 800ef50:	2a01      	cmp	r2, #1
 800ef52:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ef56:	d03f      	beq.n	800efd8 <forward_dense+0x2bc>
 800ef58:	784d      	ldrb	r5, [r1, #1]
 800ef5a:	edd0 6a01 	vldr	s13, [r0, #4]
 800ef5e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800ef62:	edd5 7a00 	vldr	s15, [r5]
 800ef66:	2a02      	cmp	r2, #2
 800ef68:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ef6c:	d034      	beq.n	800efd8 <forward_dense+0x2bc>
 800ef6e:	788d      	ldrb	r5, [r1, #2]
 800ef70:	edd0 6a02 	vldr	s13, [r0, #8]
 800ef74:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800ef78:	edd5 7a00 	vldr	s15, [r5]
 800ef7c:	2a03      	cmp	r2, #3
 800ef7e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ef82:	d029      	beq.n	800efd8 <forward_dense+0x2bc>
 800ef84:	78cd      	ldrb	r5, [r1, #3]
 800ef86:	edd0 6a03 	vldr	s13, [r0, #12]
 800ef8a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800ef8e:	edd5 7a00 	vldr	s15, [r5]
 800ef92:	2a04      	cmp	r2, #4
 800ef94:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ef98:	d01e      	beq.n	800efd8 <forward_dense+0x2bc>
 800ef9a:	790d      	ldrb	r5, [r1, #4]
 800ef9c:	edd0 6a04 	vldr	s13, [r0, #16]
 800efa0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800efa4:	edd5 7a00 	vldr	s15, [r5]
 800efa8:	2a05      	cmp	r2, #5
 800efaa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800efae:	d013      	beq.n	800efd8 <forward_dense+0x2bc>
 800efb0:	794d      	ldrb	r5, [r1, #5]
 800efb2:	edd0 6a05 	vldr	s13, [r0, #20]
 800efb6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800efba:	edd5 7a00 	vldr	s15, [r5]
 800efbe:	2a06      	cmp	r2, #6
 800efc0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800efc4:	d008      	beq.n	800efd8 <forward_dense+0x2bc>
 800efc6:	7989      	ldrb	r1, [r1, #6]
 800efc8:	edd0 7a06 	vldr	s15, [r0, #24]
 800efcc:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800efd0:	edd1 6a00 	vldr	s13, [r1]
 800efd4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800efd8:	44dc      	add	ip, fp
 800efda:	445e      	add	r6, fp
 800efdc:	ee32 7a87 	vadd.f32	s14, s5, s14
 800efe0:	eca7 7a01 	vstmia	r7!, {s14}
 800efe4:	454f      	cmp	r7, r9
 800efe6:	f4ff af43 	bcc.w	800ee70 <forward_dense+0x154>
 800efea:	9a06      	ldr	r2, [sp, #24]
 800efec:	eba9 0302 	sub.w	r3, r9, r2
 800eff0:	3b01      	subs	r3, #1
 800eff2:	f023 0303 	bic.w	r3, r3, #3
 800eff6:	3304      	adds	r3, #4
 800eff8:	18d3      	adds	r3, r2, r3
 800effa:	9306      	str	r3, [sp, #24]
 800effc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800effe:	9a05      	ldr	r2, [sp, #20]
 800f000:	4499      	add	r9, r3
 800f002:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f004:	441a      	add	r2, r3
 800f006:	9205      	str	r2, [sp, #20]
 800f008:	9a02      	ldr	r2, [sp, #8]
 800f00a:	441a      	add	r2, r3
 800f00c:	9202      	str	r2, [sp, #8]
 800f00e:	9a04      	ldr	r2, [sp, #16]
 800f010:	441a      	add	r2, r3
 800f012:	9204      	str	r2, [sp, #16]
 800f014:	9b06      	ldr	r3, [sp, #24]
 800f016:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f018:	4293      	cmp	r3, r2
 800f01a:	f4ff af08 	bcc.w	800ee2e <forward_dense+0x112>
 800f01e:	b015      	add	sp, #84	; 0x54
 800f020:	ecbd 8b02 	vpop	{d8}
 800f024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f028:	6853      	ldr	r3, [r2, #4]
 800f02a:	deff      	udf	#255	; 0xff
 800f02c:	2300      	movs	r3, #0
 800f02e:	685b      	ldr	r3, [r3, #4]
 800f030:	deff      	udf	#255	; 0xff
 800f032:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800f048 <forward_dense+0x32c>
 800f036:	eef0 2a48 	vmov.f32	s5, s16
 800f03a:	f1be 0f00 	cmp.w	lr, #0
 800f03e:	f47f af22 	bne.w	800ee86 <forward_dense+0x16a>
 800f042:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f044:	4661      	mov	r1, ip
 800f046:	e77a      	b.n	800ef3e <forward_dense+0x222>
 800f048:	00000000 	.word	0x00000000
 800f04c:	4549      	cmp	r1, r9
 800f04e:	d2d5      	bcs.n	800effc <forward_dense+0x2e0>
 800f050:	9807      	ldr	r0, [sp, #28]
 800f052:	9103      	str	r1, [sp, #12]
 800f054:	9904      	ldr	r1, [sp, #16]
 800f056:	f100 0c01 	add.w	ip, r0, #1
 800f05a:	3901      	subs	r1, #1
 800f05c:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 800f060:	9109      	str	r1, [sp, #36]	; 0x24
 800f062:	2b00      	cmp	r3, #0
 800f064:	f000 80b2 	beq.w	800f1cc <forward_dense+0x4b0>
 800f068:	9907      	ldr	r1, [sp, #28]
 800f06a:	ecf3 2a01 	vldmia	r3!, {s5}
 800f06e:	ed1f 7a0a 	vldr	s14, [pc, #-40]	; 800f048 <forward_dense+0x32c>
 800f072:	2900      	cmp	r1, #0
 800f074:	f000 80b2 	beq.w	800f1dc <forward_dense+0x4c0>
 800f078:	9902      	ldr	r1, [sp, #8]
 800f07a:	1d10      	adds	r0, r2, #4
 800f07c:	f810 6c04 	ldrb.w	r6, [r0, #-4]
 800f080:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
 800f084:	f810 5c03 	ldrb.w	r5, [r0, #-3]
 800f088:	ed51 3a08 	vldr	s7, [r1, #-32]	; 0xffffffe0
 800f08c:	ed11 4a06 	vldr	s8, [r1, #-24]	; 0xffffffe8
 800f090:	ed51 4a05 	vldr	s9, [r1, #-20]	; 0xffffffec
 800f094:	ed11 5a04 	vldr	s10, [r1, #-16]
 800f098:	ed51 5a03 	vldr	s11, [r1, #-12]
 800f09c:	ed11 6a02 	vldr	s12, [r1, #-8]
 800f0a0:	ed51 6a01 	vldr	s13, [r1, #-4]
 800f0a4:	f006 070f 	and.w	r7, r6, #15
 800f0a8:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 800f0ac:	edd7 7a00 	vldr	s15, [r7]
 800f0b0:	0936      	lsrs	r6, r6, #4
 800f0b2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800f0b6:	ed96 3a00 	vldr	s6, [r6]
 800f0ba:	ee67 7a82 	vmul.f32	s15, s15, s4
 800f0be:	092e      	lsrs	r6, r5, #4
 800f0c0:	eee3 7a23 	vfma.f32	s15, s6, s7
 800f0c4:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800f0c8:	f005 050f 	and.w	r5, r5, #15
 800f0cc:	edd6 3a00 	vldr	s7, [r6]
 800f0d0:	f810 6c02 	ldrb.w	r6, [r0, #-2]
 800f0d4:	eee3 7a84 	vfma.f32	s15, s7, s8
 800f0d8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800f0dc:	0937      	lsrs	r7, r6, #4
 800f0de:	ed95 4a00 	vldr	s8, [r5]
 800f0e2:	f810 5c01 	ldrb.w	r5, [r0, #-1]
 800f0e6:	eee4 7a24 	vfma.f32	s15, s8, s9
 800f0ea:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 800f0ee:	f006 060f 	and.w	r6, r6, #15
 800f0f2:	edd7 4a00 	vldr	s9, [r7]
 800f0f6:	eee4 7a85 	vfma.f32	s15, s9, s10
 800f0fa:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800f0fe:	3004      	adds	r0, #4
 800f100:	ed96 5a00 	vldr	s10, [r6]
 800f104:	092e      	lsrs	r6, r5, #4
 800f106:	eee5 7a25 	vfma.f32	s15, s10, s11
 800f10a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800f10e:	f005 050f 	and.w	r5, r5, #15
 800f112:	edd6 5a00 	vldr	s11, [r6]
 800f116:	eee5 7a86 	vfma.f32	s15, s11, s12
 800f11a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800f11e:	4584      	cmp	ip, r0
 800f120:	ed95 6a00 	vldr	s12, [r5]
 800f124:	eee6 7a26 	vfma.f32	s15, s12, s13
 800f128:	f101 0120 	add.w	r1, r1, #32
 800f12c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f130:	d1a4      	bne.n	800f07c <forward_dense+0x360>
 800f132:	f8dd e014 	ldr.w	lr, [sp, #20]
 800f136:	f1ac 0804 	sub.w	r8, ip, #4
 800f13a:	9904      	ldr	r1, [sp, #16]
 800f13c:	458e      	cmp	lr, r1
 800f13e:	d22a      	bcs.n	800f196 <forward_dense+0x47a>
 800f140:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f142:	eba1 070e 	sub.w	r7, r1, lr
 800f146:	ea4f 0ad7 	mov.w	sl, r7, lsr #3
 800f14a:	f10e 0008 	add.w	r0, lr, #8
 800f14e:	f108 36ff 	add.w	r6, r8, #4294967295
 800f152:	eb08 07d7 	add.w	r7, r8, r7, lsr #3
 800f156:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f15a:	ed50 5a01 	vldr	s11, [r0, #-4]
 800f15e:	ed50 6a02 	vldr	s13, [r0, #-8]
 800f162:	f001 050f 	and.w	r5, r1, #15
 800f166:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800f16a:	edd5 7a00 	vldr	s15, [r5]
 800f16e:	0909      	lsrs	r1, r1, #4
 800f170:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800f174:	ed91 6a00 	vldr	s12, [r1]
 800f178:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800f17c:	42b7      	cmp	r7, r6
 800f17e:	eee6 7a26 	vfma.f32	s15, s12, s13
 800f182:	f100 0008 	add.w	r0, r0, #8
 800f186:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f18a:	d1e4      	bne.n	800f156 <forward_dense+0x43a>
 800f18c:	f10a 0a01 	add.w	sl, sl, #1
 800f190:	44d0      	add	r8, sl
 800f192:	eb0e 0eca 	add.w	lr, lr, sl, lsl #3
 800f196:	9908      	ldr	r1, [sp, #32]
 800f198:	b321      	cbz	r1, 800f1e4 <forward_dense+0x4c8>
 800f19a:	f898 1000 	ldrb.w	r1, [r8]
 800f19e:	edde 7a00 	vldr	s15, [lr]
 800f1a2:	0909      	lsrs	r1, r1, #4
 800f1a4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800f1a8:	edd1 6a00 	vldr	s13, [r1]
 800f1ac:	9903      	ldr	r1, [sp, #12]
 800f1ae:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f1b2:	445a      	add	r2, fp
 800f1b4:	44dc      	add	ip, fp
 800f1b6:	ee72 2a87 	vadd.f32	s5, s5, s14
 800f1ba:	ece1 2a01 	vstmia	r1!, {s5}
 800f1be:	4589      	cmp	r9, r1
 800f1c0:	9103      	str	r1, [sp, #12]
 800f1c2:	f67f af12 	bls.w	800efea <forward_dense+0x2ce>
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	f47f af4e 	bne.w	800f068 <forward_dense+0x34c>
 800f1cc:	9907      	ldr	r1, [sp, #28]
 800f1ce:	ed1f 7a62 	vldr	s14, [pc, #-392]	; 800f048 <forward_dense+0x32c>
 800f1d2:	eef0 2a48 	vmov.f32	s5, s16
 800f1d6:	2900      	cmp	r1, #0
 800f1d8:	f47f af4e 	bne.w	800f078 <forward_dense+0x35c>
 800f1dc:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 800f1e0:	4690      	mov	r8, r2
 800f1e2:	e7aa      	b.n	800f13a <forward_dense+0x41e>
 800f1e4:	9903      	ldr	r1, [sp, #12]
 800f1e6:	ee32 7a87 	vadd.f32	s14, s5, s14
 800f1ea:	445a      	add	r2, fp
 800f1ec:	eca1 7a01 	vstmia	r1!, {s14}
 800f1f0:	4549      	cmp	r1, r9
 800f1f2:	9103      	str	r1, [sp, #12]
 800f1f4:	44dc      	add	ip, fp
 800f1f6:	f4ff af34 	bcc.w	800f062 <forward_dense+0x346>
 800f1fa:	e6f6      	b.n	800efea <forward_dense+0x2ce>
 800f1fc:	9912      	ldr	r1, [sp, #72]	; 0x48
 800f1fe:	9d06      	ldr	r5, [sp, #24]
 800f200:	9101      	str	r1, [sp, #4]
 800f202:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800f204:	9100      	str	r1, [sp, #0]
 800f206:	4628      	mov	r0, r5
 800f208:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f20a:	f000 fcb7 	bl	800fb7c <forward_lite_dense_if32of32wf32>
 800f20e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f210:	462b      	mov	r3, r5
 800f212:	4413      	add	r3, r2
 800f214:	9306      	str	r3, [sp, #24]
 800f216:	e6f1      	b.n	800effc <forward_dense+0x2e0>
 800f218:	f8d1 800c 	ldr.w	r8, [r1, #12]
 800f21c:	f1b9 0f00 	cmp.w	r9, #0
 800f220:	d016      	beq.n	800f250 <forward_dense+0x534>
 800f222:	e9d9 0100 	ldrd	r0, r1, [r9]
 800f226:	f000 ff27 	bl	8010078 <ai_array_get_byte_size>
 800f22a:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 800f22e:	4602      	mov	r2, r0
 800f230:	4659      	mov	r1, fp
 800f232:	4640      	mov	r0, r8
 800f234:	f000 fdc6 	bl	800fdc4 <st_int8_copy>
 800f238:	e5c7      	b.n	800edca <forward_dense+0xae>
 800f23a:	2b04      	cmp	r3, #4
 800f23c:	d00a      	beq.n	800f254 <forward_dense+0x538>
 800f23e:	f04f 0900 	mov.w	r9, #0
 800f242:	e5bd      	b.n	800edc0 <forward_dense+0xa4>
 800f244:	930d      	str	r3, [sp, #52]	; 0x34
 800f246:	e595      	b.n	800ed74 <forward_dense+0x58>
 800f248:	2300      	movs	r3, #0
 800f24a:	930b      	str	r3, [sp, #44]	; 0x2c
 800f24c:	460b      	mov	r3, r1
 800f24e:	e591      	b.n	800ed74 <forward_dense+0x58>
 800f250:	46c3      	mov	fp, r8
 800f252:	e5ba      	b.n	800edca <forward_dense+0xae>
 800f254:	f8d1 b00c 	ldr.w	fp, [r1, #12]
 800f258:	e5b7      	b.n	800edca <forward_dense+0xae>
 800f25a:	2300      	movs	r3, #0
 800f25c:	685b      	ldr	r3, [r3, #4]
 800f25e:	deff      	udf	#255	; 0xff
 800f260:	2300      	movs	r3, #0
 800f262:	685b      	ldr	r3, [r3, #4]
 800f264:	deff      	udf	#255	; 0xff
 800f266:	bf00      	nop

0800f268 <forward_concat>:
 800f268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f26c:	ed2d 8b06 	vpush	{d8-d10}
 800f270:	6982      	ldr	r2, [r0, #24]
 800f272:	b085      	sub	sp, #20
 800f274:	8813      	ldrh	r3, [r2, #0]
 800f276:	9002      	str	r0, [sp, #8]
 800f278:	b90b      	cbnz	r3, 800f27e <forward_concat+0x16>
 800f27a:	685b      	ldr	r3, [r3, #4]
 800f27c:	deff      	udf	#255	; 0xff
 800f27e:	2b01      	cmp	r3, #1
 800f280:	6856      	ldr	r6, [r2, #4]
 800f282:	f000 8293 	beq.w	800f7ac <forward_concat+0x544>
 800f286:	6933      	ldr	r3, [r6, #16]
 800f288:	9301      	str	r3, [sp, #4]
 800f28a:	b10b      	cbz	r3, 800f290 <forward_concat+0x28>
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	9301      	str	r3, [sp, #4]
 800f290:	8834      	ldrh	r4, [r6, #0]
 800f292:	2300      	movs	r3, #0
 800f294:	4621      	mov	r1, r4
 800f296:	4618      	mov	r0, r3
 800f298:	e00c      	b.n	800f2b4 <forward_concat+0x4c>
 800f29a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f29e:	b172      	cbz	r2, 800f2be <forward_concat+0x56>
 800f2a0:	6992      	ldr	r2, [r2, #24]
 800f2a2:	6812      	ldr	r2, [r2, #0]
 800f2a4:	f3c2 4243 	ubfx	r2, r2, #17, #4
 800f2a8:	2a01      	cmp	r2, #1
 800f2aa:	bf0c      	ite	eq
 800f2ac:	2201      	moveq	r2, #1
 800f2ae:	2202      	movne	r2, #2
 800f2b0:	3301      	adds	r3, #1
 800f2b2:	4310      	orrs	r0, r2
 800f2b4:	429c      	cmp	r4, r3
 800f2b6:	d002      	beq.n	800f2be <forward_concat+0x56>
 800f2b8:	6872      	ldr	r2, [r6, #4]
 800f2ba:	2a00      	cmp	r2, #0
 800f2bc:	d1ed      	bne.n	800f29a <forward_concat+0x32>
 800f2be:	9b01      	ldr	r3, [sp, #4]
 800f2c0:	699a      	ldr	r2, [r3, #24]
 800f2c2:	6813      	ldr	r3, [r2, #0]
 800f2c4:	f8d2 b008 	ldr.w	fp, [r2, #8]
 800f2c8:	f3c3 4243 	ubfx	r2, r3, #17, #4
 800f2cc:	2a01      	cmp	r2, #1
 800f2ce:	d006      	beq.n	800f2de <forward_concat+0x76>
 800f2d0:	2801      	cmp	r0, #1
 800f2d2:	d146      	bne.n	800f362 <forward_concat+0xfa>
 800f2d4:	b005      	add	sp, #20
 800f2d6:	ecbd 8b06 	vpop	{d8-d10}
 800f2da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2de:	2801      	cmp	r0, #1
 800f2e0:	d134      	bne.n	800f34c <forward_concat+0xe4>
 800f2e2:	f04f 0800 	mov.w	r8, #0
 800f2e6:	4541      	cmp	r1, r8
 800f2e8:	d9f4      	bls.n	800f2d4 <forward_concat+0x6c>
 800f2ea:	6873      	ldr	r3, [r6, #4]
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d0f1      	beq.n	800f2d4 <forward_concat+0x6c>
 800f2f0:	f853 5028 	ldr.w	r5, [r3, r8, lsl #2]
 800f2f4:	2d00      	cmp	r5, #0
 800f2f6:	d0ed      	beq.n	800f2d4 <forward_concat+0x6c>
 800f2f8:	69ab      	ldr	r3, [r5, #24]
 800f2fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f2fe:	f000 febb 	bl	8010078 <ai_array_get_byte_size>
 800f302:	69ab      	ldr	r3, [r5, #24]
 800f304:	6969      	ldr	r1, [r5, #20]
 800f306:	689c      	ldr	r4, [r3, #8]
 800f308:	9b02      	ldr	r3, [sp, #8]
 800f30a:	68ea      	ldr	r2, [r5, #12]
 800f30c:	69db      	ldr	r3, [r3, #28]
 800f30e:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
 800f312:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f316:	fb02 f905 	mul.w	r9, r2, r5
 800f31a:	9a01      	ldr	r2, [sp, #4]
 800f31c:	68d1      	ldr	r1, [r2, #12]
 800f31e:	1827      	adds	r7, r4, r0
 800f320:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800f324:	42bc      	cmp	r4, r7
 800f326:	fb03 f505 	mul.w	r5, r3, r5
 800f32a:	bf38      	it	cc
 800f32c:	46da      	movcc	sl, fp
 800f32e:	d208      	bcs.n	800f342 <forward_concat+0xda>
 800f330:	4651      	mov	r1, sl
 800f332:	4620      	mov	r0, r4
 800f334:	464a      	mov	r2, r9
 800f336:	444c      	add	r4, r9
 800f338:	f000 fd44 	bl	800fdc4 <st_int8_copy>
 800f33c:	42a7      	cmp	r7, r4
 800f33e:	44aa      	add	sl, r5
 800f340:	d8f6      	bhi.n	800f330 <forward_concat+0xc8>
 800f342:	8831      	ldrh	r1, [r6, #0]
 800f344:	44cb      	add	fp, r9
 800f346:	f108 0801 	add.w	r8, r8, #1
 800f34a:	e7cc      	b.n	800f2e6 <forward_concat+0x7e>
 800f34c:	0782      	lsls	r2, r0, #30
 800f34e:	d4c1      	bmi.n	800f2d4 <forward_concat+0x6c>
 800f350:	9a01      	ldr	r2, [sp, #4]
 800f352:	f8d2 8000 	ldr.w	r8, [r2]
 800f356:	f1b8 0f00 	cmp.w	r8, #0
 800f35a:	d109      	bne.n	800f370 <forward_concat+0x108>
 800f35c:	ed9f 8aba 	vldr	s16, [pc, #744]	; 800f648 <forward_concat+0x3e0>
 800f360:	e011      	b.n	800f386 <forward_concat+0x11e>
 800f362:	9a01      	ldr	r2, [sp, #4]
 800f364:	f8d2 8000 	ldr.w	r8, [r2]
 800f368:	f1b8 0f00 	cmp.w	r8, #0
 800f36c:	f000 8216 	beq.w	800f79c <forward_concat+0x534>
 800f370:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800f374:	2a00      	cmp	r2, #0
 800f376:	d0f1      	beq.n	800f35c <forward_concat+0xf4>
 800f378:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 800f37c:	2900      	cmp	r1, #0
 800f37e:	d0ed      	beq.n	800f35c <forward_concat+0xf4>
 800f380:	6812      	ldr	r2, [r2, #0]
 800f382:	ed92 8a00 	vldr	s16, [r2]
 800f386:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f38a:	ee87 9a88 	vdiv.f32	s18, s15, s16
 800f38e:	f3c3 53c0 	ubfx	r3, r3, #23, #1
 800f392:	9303      	str	r3, [sp, #12]
 800f394:	4621      	mov	r1, r4
 800f396:	4633      	mov	r3, r6
 800f398:	2700      	movs	r7, #0
 800f39a:	4646      	mov	r6, r8
 800f39c:	4698      	mov	r8, r3
 800f39e:	ed9f aaa8 	vldr	s20, [pc, #672]	; 800f640 <forward_concat+0x3d8>
 800f3a2:	eddf 8aa9 	vldr	s17, [pc, #676]	; 800f648 <forward_concat+0x3e0>
 800f3a6:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
 800f3aa:	42b9      	cmp	r1, r7
 800f3ac:	d992      	bls.n	800f2d4 <forward_concat+0x6c>
 800f3ae:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d08e      	beq.n	800f2d4 <forward_concat+0x6c>
 800f3b6:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d08a      	beq.n	800f2d4 <forward_concat+0x6c>
 800f3be:	9a02      	ldr	r2, [sp, #8]
 800f3c0:	68d9      	ldr	r1, [r3, #12]
 800f3c2:	69d4      	ldr	r4, [r2, #28]
 800f3c4:	9a01      	ldr	r2, [sp, #4]
 800f3c6:	f851 5024 	ldr.w	r5, [r1, r4, lsl #2]
 800f3ca:	68d2      	ldr	r2, [r2, #12]
 800f3cc:	6958      	ldr	r0, [r3, #20]
 800f3ce:	f852 1024 	ldr.w	r1, [r2, r4, lsl #2]
 800f3d2:	699a      	ldr	r2, [r3, #24]
 800f3d4:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800f3d8:	f8d2 9000 	ldr.w	r9, [r2]
 800f3dc:	9300      	str	r3, [sp, #0]
 800f3de:	fb01 fa00 	mul.w	sl, r1, r0
 800f3e2:	fb00 f505 	mul.w	r5, r0, r5
 800f3e6:	e9d2 1401 	ldrd	r1, r4, [r2, #4]
 800f3ea:	4648      	mov	r0, r9
 800f3ec:	f000 fe44 	bl	8010078 <ai_array_get_byte_size>
 800f3f0:	f3c9 4243 	ubfx	r2, r9, #17, #4
 800f3f4:	2a01      	cmp	r2, #1
 800f3f6:	9b00      	ldr	r3, [sp, #0]
 800f3f8:	eb04 0900 	add.w	r9, r4, r0
 800f3fc:	d079      	beq.n	800f4f2 <forward_concat+0x28a>
 800f3fe:	6818      	ldr	r0, [r3, #0]
 800f400:	2800      	cmp	r0, #0
 800f402:	f000 8118 	beq.w	800f636 <forward_concat+0x3ce>
 800f406:	6841      	ldr	r1, [r0, #4]
 800f408:	2900      	cmp	r1, #0
 800f40a:	f000 8166 	beq.w	800f6da <forward_concat+0x472>
 800f40e:	8842      	ldrh	r2, [r0, #2]
 800f410:	2a00      	cmp	r2, #0
 800f412:	f000 815f 	beq.w	800f6d4 <forward_concat+0x46c>
 800f416:	680b      	ldr	r3, [r1, #0]
 800f418:	edd3 6a00 	vldr	s13, [r3]
 800f41c:	684b      	ldr	r3, [r1, #4]
 800f41e:	f993 2000 	ldrsb.w	r2, [r3]
 800f422:	2e00      	cmp	r6, #0
 800f424:	f000 8105 	beq.w	800f632 <forward_concat+0x3ca>
 800f428:	6871      	ldr	r1, [r6, #4]
 800f42a:	2900      	cmp	r1, #0
 800f42c:	f000 8159 	beq.w	800f6e2 <forward_concat+0x47a>
 800f430:	8873      	ldrh	r3, [r6, #2]
 800f432:	b113      	cbz	r3, 800f43a <forward_concat+0x1d2>
 800f434:	684b      	ldr	r3, [r1, #4]
 800f436:	f993 3000 	ldrsb.w	r3, [r3]
 800f43a:	eeb4 8a66 	vcmp.f32	s16, s13
 800f43e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f442:	d102      	bne.n	800f44a <forward_concat+0x1e2>
 800f444:	429a      	cmp	r2, r3
 800f446:	f000 818b 	beq.w	800f760 <forward_concat+0x4f8>
 800f44a:	9b03      	ldr	r3, [sp, #12]
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	f040 809a 	bne.w	800f586 <forward_concat+0x31e>
 800f452:	2800      	cmp	r0, #0
 800f454:	f000 8150 	beq.w	800f6f8 <forward_concat+0x490>
 800f458:	6843      	ldr	r3, [r0, #4]
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	f000 8143 	beq.w	800f6e6 <forward_concat+0x47e>
 800f460:	8842      	ldrh	r2, [r0, #2]
 800f462:	2a00      	cmp	r2, #0
 800f464:	f000 813f 	beq.w	800f6e6 <forward_concat+0x47e>
 800f468:	685b      	ldr	r3, [r3, #4]
 800f46a:	7819      	ldrb	r1, [r3, #0]
 800f46c:	2e00      	cmp	r6, #0
 800f46e:	f000 813e 	beq.w	800f6ee <forward_concat+0x486>
 800f472:	6872      	ldr	r2, [r6, #4]
 800f474:	2a00      	cmp	r2, #0
 800f476:	f000 816d 	beq.w	800f754 <forward_concat+0x4ec>
 800f47a:	8873      	ldrh	r3, [r6, #2]
 800f47c:	b10b      	cbz	r3, 800f482 <forward_concat+0x21a>
 800f47e:	6853      	ldr	r3, [r2, #4]
 800f480:	781b      	ldrb	r3, [r3, #0]
 800f482:	eeb4 8a66 	vcmp.f32	s16, s13
 800f486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f48a:	d102      	bne.n	800f492 <forward_concat+0x22a>
 800f48c:	4299      	cmp	r1, r3
 800f48e:	f000 814c 	beq.w	800f72a <forward_concat+0x4c2>
 800f492:	454c      	cmp	r4, r9
 800f494:	ee66 6a89 	vmul.f32	s13, s13, s18
 800f498:	f080 80c7 	bcs.w	800f62a <forward_concat+0x3c2>
 800f49c:	2d00      	cmp	r5, #0
 800f49e:	f340 80c4 	ble.w	800f62a <forward_concat+0x3c2>
 800f4a2:	ee07 3a90 	vmov	s15, r3
 800f4a6:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800f4aa:	1960      	adds	r0, r4, r5
 800f4ac:	ee36 6a29 	vadd.f32	s12, s12, s19
 800f4b0:	4602      	mov	r2, r0
 800f4b2:	46dc      	mov	ip, fp
 800f4b4:	46e6      	mov	lr, ip
 800f4b6:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f4ba:	1a5b      	subs	r3, r3, r1
 800f4bc:	ee07 3a90 	vmov	s15, r3
 800f4c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f4c4:	eeb0 7a46 	vmov.f32	s14, s12
 800f4c8:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800f4cc:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 800f4d0:	ee17 3a90 	vmov	r3, s15
 800f4d4:	f383 0308 	usat	r3, #8, r3
 800f4d8:	4294      	cmp	r4, r2
 800f4da:	f80e 3b01 	strb.w	r3, [lr], #1
 800f4de:	d1ea      	bne.n	800f4b6 <forward_concat+0x24e>
 800f4e0:	4548      	cmp	r0, r9
 800f4e2:	eb04 0205 	add.w	r2, r4, r5
 800f4e6:	44d4      	add	ip, sl
 800f4e8:	4604      	mov	r4, r0
 800f4ea:	f080 809e 	bcs.w	800f62a <forward_concat+0x3c2>
 800f4ee:	4428      	add	r0, r5
 800f4f0:	e7e0      	b.n	800f4b4 <forward_concat+0x24c>
 800f4f2:	2d00      	cmp	r5, #0
 800f4f4:	9b03      	ldr	r3, [sp, #12]
 800f4f6:	4629      	mov	r1, r5
 800f4f8:	bfb8      	it	lt
 800f4fa:	1ce9      	addlt	r1, r5, #3
 800f4fc:	1089      	asrs	r1, r1, #2
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	f040 80a4 	bne.w	800f64c <forward_concat+0x3e4>
 800f504:	2e00      	cmp	r6, #0
 800f506:	f000 80f4 	beq.w	800f6f2 <forward_concat+0x48a>
 800f50a:	6873      	ldr	r3, [r6, #4]
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	f000 80f0 	beq.w	800f6f2 <forward_concat+0x48a>
 800f512:	8872      	ldrh	r2, [r6, #2]
 800f514:	2a00      	cmp	r2, #0
 800f516:	f000 80ec 	beq.w	800f6f2 <forward_concat+0x48a>
 800f51a:	685b      	ldr	r3, [r3, #4]
 800f51c:	781b      	ldrb	r3, [r3, #0]
 800f51e:	ee06 3a90 	vmov	s13, r3
 800f522:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800f526:	ee76 6aa9 	vadd.f32	s13, s13, s19
 800f52a:	454c      	cmp	r4, r9
 800f52c:	d226      	bcs.n	800f57c <forward_concat+0x314>
 800f52e:	2d03      	cmp	r5, #3
 800f530:	ebaa 0a01 	sub.w	sl, sl, r1
 800f534:	bfc8      	it	gt
 800f536:	46de      	movgt	lr, fp
 800f538:	dd20      	ble.n	800f57c <forward_concat+0x314>
 800f53a:	46f4      	mov	ip, lr
 800f53c:	4620      	mov	r0, r4
 800f53e:	2200      	movs	r2, #0
 800f540:	f810 3b01 	ldrb.w	r3, [r0], #1
 800f544:	ee07 3a10 	vmov	s14, r3
 800f548:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f54c:	eef0 7a66 	vmov.f32	s15, s13
 800f550:	eee7 7a09 	vfma.f32	s15, s14, s18
 800f554:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f558:	ee17 3a90 	vmov	r3, s15
 800f55c:	f383 0308 	usat	r3, #8, r3
 800f560:	3201      	adds	r2, #1
 800f562:	4291      	cmp	r1, r2
 800f564:	f80c 3b01 	strb.w	r3, [ip], #1
 800f568:	dcea      	bgt.n	800f540 <forward_concat+0x2d8>
 800f56a:	2d03      	cmp	r5, #3
 800f56c:	bfcc      	ite	gt
 800f56e:	460b      	movgt	r3, r1
 800f570:	2301      	movle	r3, #1
 800f572:	441c      	add	r4, r3
 800f574:	45a1      	cmp	r9, r4
 800f576:	4453      	add	r3, sl
 800f578:	449e      	add	lr, r3
 800f57a:	d8de      	bhi.n	800f53a <forward_concat+0x2d2>
 800f57c:	448b      	add	fp, r1
 800f57e:	f8b8 1000 	ldrh.w	r1, [r8]
 800f582:	3701      	adds	r7, #1
 800f584:	e711      	b.n	800f3aa <forward_concat+0x142>
 800f586:	b140      	cbz	r0, 800f59a <forward_concat+0x332>
 800f588:	6843      	ldr	r3, [r0, #4]
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	f000 80e4 	beq.w	800f758 <forward_concat+0x4f0>
 800f590:	8840      	ldrh	r0, [r0, #2]
 800f592:	b110      	cbz	r0, 800f59a <forward_concat+0x332>
 800f594:	685b      	ldr	r3, [r3, #4]
 800f596:	f993 0000 	ldrsb.w	r0, [r3]
 800f59a:	2e00      	cmp	r6, #0
 800f59c:	f000 80ae 	beq.w	800f6fc <forward_concat+0x494>
 800f5a0:	6872      	ldr	r2, [r6, #4]
 800f5a2:	2a00      	cmp	r2, #0
 800f5a4:	f000 80da 	beq.w	800f75c <forward_concat+0x4f4>
 800f5a8:	8873      	ldrh	r3, [r6, #2]
 800f5aa:	b113      	cbz	r3, 800f5b2 <forward_concat+0x34a>
 800f5ac:	6853      	ldr	r3, [r2, #4]
 800f5ae:	f993 3000 	ldrsb.w	r3, [r3]
 800f5b2:	eeb4 8a66 	vcmp.f32	s16, s13
 800f5b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5ba:	d102      	bne.n	800f5c2 <forward_concat+0x35a>
 800f5bc:	4298      	cmp	r0, r3
 800f5be:	f000 809f 	beq.w	800f700 <forward_concat+0x498>
 800f5c2:	454c      	cmp	r4, r9
 800f5c4:	ee66 6a89 	vmul.f32	s13, s13, s18
 800f5c8:	d22f      	bcs.n	800f62a <forward_concat+0x3c2>
 800f5ca:	2d00      	cmp	r5, #0
 800f5cc:	dd2d      	ble.n	800f62a <forward_concat+0x3c2>
 800f5ce:	ee07 3a90 	vmov	s15, r3
 800f5d2:	eb0b 0e05 	add.w	lr, fp, r5
 800f5d6:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800f5da:	46f4      	mov	ip, lr
 800f5dc:	465a      	mov	r2, fp
 800f5de:	4621      	mov	r1, r4
 800f5e0:	f911 3b01 	ldrsb.w	r3, [r1], #1
 800f5e4:	1a1b      	subs	r3, r3, r0
 800f5e6:	ee07 3a90 	vmov	s15, r3
 800f5ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f5ee:	eef0 7a46 	vmov.f32	s15, s12
 800f5f2:	eee7 7a26 	vfma.f32	s15, s14, s13
 800f5f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f5fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5fe:	bf4c      	ite	mi
 800f600:	ee77 7aca 	vsubmi.f32	s15, s15, s20
 800f604:	ee77 7aa9 	vaddpl.f32	s15, s15, s19
 800f608:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f60c:	ee17 3a90 	vmov	r3, s15
 800f610:	f303 0307 	ssat	r3, #8, r3
 800f614:	f802 3b01 	strb.w	r3, [r2], #1
 800f618:	4562      	cmp	r2, ip
 800f61a:	d1e1      	bne.n	800f5e0 <forward_concat+0x378>
 800f61c:	442c      	add	r4, r5
 800f61e:	454c      	cmp	r4, r9
 800f620:	44d3      	add	fp, sl
 800f622:	44d4      	add	ip, sl
 800f624:	d3da      	bcc.n	800f5dc <forward_concat+0x374>
 800f626:	46f3      	mov	fp, lr
 800f628:	e7a9      	b.n	800f57e <forward_concat+0x316>
 800f62a:	eb0b 0e05 	add.w	lr, fp, r5
 800f62e:	46f3      	mov	fp, lr
 800f630:	e7a5      	b.n	800f57e <forward_concat+0x316>
 800f632:	4633      	mov	r3, r6
 800f634:	e701      	b.n	800f43a <forward_concat+0x1d2>
 800f636:	eef0 6a68 	vmov.f32	s13, s17
 800f63a:	4602      	mov	r2, r0
 800f63c:	e6f1      	b.n	800f422 <forward_concat+0x1ba>
 800f63e:	bf00      	nop
 800f640:	3efffffc 	.word	0x3efffffc
 800f644:	7f800000 	.word	0x7f800000
 800f648:	00000000 	.word	0x00000000
 800f64c:	2e00      	cmp	r6, #0
 800f64e:	f000 809c 	beq.w	800f78a <forward_concat+0x522>
 800f652:	6873      	ldr	r3, [r6, #4]
 800f654:	2b00      	cmp	r3, #0
 800f656:	f000 809e 	beq.w	800f796 <forward_concat+0x52e>
 800f65a:	8872      	ldrh	r2, [r6, #2]
 800f65c:	2a00      	cmp	r2, #0
 800f65e:	f000 8097 	beq.w	800f790 <forward_concat+0x528>
 800f662:	685b      	ldr	r3, [r3, #4]
 800f664:	f993 3000 	ldrsb.w	r3, [r3]
 800f668:	ee06 3a90 	vmov	s13, r3
 800f66c:	454c      	cmp	r4, r9
 800f66e:	d285      	bcs.n	800f57c <forward_concat+0x314>
 800f670:	2d03      	cmp	r5, #3
 800f672:	ebaa 0a01 	sub.w	sl, sl, r1
 800f676:	dd81      	ble.n	800f57c <forward_concat+0x314>
 800f678:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800f67c:	46de      	mov	lr, fp
 800f67e:	46f4      	mov	ip, lr
 800f680:	4620      	mov	r0, r4
 800f682:	2200      	movs	r2, #0
 800f684:	f810 3b01 	ldrb.w	r3, [r0], #1
 800f688:	ee07 3a10 	vmov	s14, r3
 800f68c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f690:	eef0 7a66 	vmov.f32	s15, s13
 800f694:	eee7 7a09 	vfma.f32	s15, s14, s18
 800f698:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f69c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6a0:	bf4c      	ite	mi
 800f6a2:	ee77 7aca 	vsubmi.f32	s15, s15, s20
 800f6a6:	ee77 7aa9 	vaddpl.f32	s15, s15, s19
 800f6aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f6ae:	ee17 3a90 	vmov	r3, s15
 800f6b2:	f303 0307 	ssat	r3, #8, r3
 800f6b6:	3201      	adds	r2, #1
 800f6b8:	4291      	cmp	r1, r2
 800f6ba:	f80c 3b01 	strb.w	r3, [ip], #1
 800f6be:	dce1      	bgt.n	800f684 <forward_concat+0x41c>
 800f6c0:	2d03      	cmp	r5, #3
 800f6c2:	bfcc      	ite	gt
 800f6c4:	460b      	movgt	r3, r1
 800f6c6:	2301      	movle	r3, #1
 800f6c8:	441c      	add	r4, r3
 800f6ca:	45a1      	cmp	r9, r4
 800f6cc:	4453      	add	r3, sl
 800f6ce:	449e      	add	lr, r3
 800f6d0:	d8d5      	bhi.n	800f67e <forward_concat+0x416>
 800f6d2:	e753      	b.n	800f57c <forward_concat+0x314>
 800f6d4:	eef0 6a68 	vmov.f32	s13, s17
 800f6d8:	e6a3      	b.n	800f422 <forward_concat+0x1ba>
 800f6da:	eef0 6a68 	vmov.f32	s13, s17
 800f6de:	460a      	mov	r2, r1
 800f6e0:	e69f      	b.n	800f422 <forward_concat+0x1ba>
 800f6e2:	460b      	mov	r3, r1
 800f6e4:	e6a9      	b.n	800f43a <forward_concat+0x1d2>
 800f6e6:	9903      	ldr	r1, [sp, #12]
 800f6e8:	2e00      	cmp	r6, #0
 800f6ea:	f47f aec2 	bne.w	800f472 <forward_concat+0x20a>
 800f6ee:	4633      	mov	r3, r6
 800f6f0:	e6c7      	b.n	800f482 <forward_concat+0x21a>
 800f6f2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800f6f6:	e718      	b.n	800f52a <forward_concat+0x2c2>
 800f6f8:	4619      	mov	r1, r3
 800f6fa:	e6b7      	b.n	800f46c <forward_concat+0x204>
 800f6fc:	4633      	mov	r3, r6
 800f6fe:	e758      	b.n	800f5b2 <forward_concat+0x34a>
 800f700:	454c      	cmp	r4, r9
 800f702:	d292      	bcs.n	800f62a <forward_concat+0x3c2>
 800f704:	9600      	str	r6, [sp, #0]
 800f706:	462e      	mov	r6, r5
 800f708:	464d      	mov	r5, r9
 800f70a:	46d9      	mov	r9, fp
 800f70c:	4649      	mov	r1, r9
 800f70e:	4620      	mov	r0, r4
 800f710:	4632      	mov	r2, r6
 800f712:	4434      	add	r4, r6
 800f714:	f000 fb56 	bl	800fdc4 <st_int8_copy>
 800f718:	42a5      	cmp	r5, r4
 800f71a:	44d1      	add	r9, sl
 800f71c:	d8f6      	bhi.n	800f70c <forward_concat+0x4a4>
 800f71e:	4635      	mov	r5, r6
 800f720:	9e00      	ldr	r6, [sp, #0]
 800f722:	eb0b 0e05 	add.w	lr, fp, r5
 800f726:	46f3      	mov	fp, lr
 800f728:	e729      	b.n	800f57e <forward_concat+0x316>
 800f72a:	454c      	cmp	r4, r9
 800f72c:	f4bf af7d 	bcs.w	800f62a <forward_concat+0x3c2>
 800f730:	9600      	str	r6, [sp, #0]
 800f732:	462e      	mov	r6, r5
 800f734:	464d      	mov	r5, r9
 800f736:	46d9      	mov	r9, fp
 800f738:	4649      	mov	r1, r9
 800f73a:	4620      	mov	r0, r4
 800f73c:	4632      	mov	r2, r6
 800f73e:	4434      	add	r4, r6
 800f740:	f000 fb40 	bl	800fdc4 <st_int8_copy>
 800f744:	42a5      	cmp	r5, r4
 800f746:	44d1      	add	r9, sl
 800f748:	d8f6      	bhi.n	800f738 <forward_concat+0x4d0>
 800f74a:	4635      	mov	r5, r6
 800f74c:	eb0b 0e05 	add.w	lr, fp, r5
 800f750:	9e00      	ldr	r6, [sp, #0]
 800f752:	e7e8      	b.n	800f726 <forward_concat+0x4be>
 800f754:	4613      	mov	r3, r2
 800f756:	e694      	b.n	800f482 <forward_concat+0x21a>
 800f758:	4618      	mov	r0, r3
 800f75a:	e71e      	b.n	800f59a <forward_concat+0x332>
 800f75c:	4613      	mov	r3, r2
 800f75e:	e728      	b.n	800f5b2 <forward_concat+0x34a>
 800f760:	454c      	cmp	r4, r9
 800f762:	f4bf af62 	bcs.w	800f62a <forward_concat+0x3c2>
 800f766:	9600      	str	r6, [sp, #0]
 800f768:	462e      	mov	r6, r5
 800f76a:	464d      	mov	r5, r9
 800f76c:	46d9      	mov	r9, fp
 800f76e:	4649      	mov	r1, r9
 800f770:	4620      	mov	r0, r4
 800f772:	4632      	mov	r2, r6
 800f774:	4434      	add	r4, r6
 800f776:	f000 fb25 	bl	800fdc4 <st_int8_copy>
 800f77a:	42a5      	cmp	r5, r4
 800f77c:	44d1      	add	r9, sl
 800f77e:	d8f6      	bhi.n	800f76e <forward_concat+0x506>
 800f780:	4635      	mov	r5, r6
 800f782:	eb0b 0e05 	add.w	lr, fp, r5
 800f786:	9e00      	ldr	r6, [sp, #0]
 800f788:	e7cd      	b.n	800f726 <forward_concat+0x4be>
 800f78a:	ee06 6a90 	vmov	s13, r6
 800f78e:	e76d      	b.n	800f66c <forward_concat+0x404>
 800f790:	ee06 2a90 	vmov	s13, r2
 800f794:	e76a      	b.n	800f66c <forward_concat+0x404>
 800f796:	ee06 3a90 	vmov	s13, r3
 800f79a:	e767      	b.n	800f66c <forward_concat+0x404>
 800f79c:	f3c3 53c0 	ubfx	r3, r3, #23, #1
 800f7a0:	ed1f 9a58 	vldr	s18, [pc, #-352]	; 800f644 <forward_concat+0x3dc>
 800f7a4:	ed1f 8a58 	vldr	s16, [pc, #-352]	; 800f648 <forward_concat+0x3e0>
 800f7a8:	9303      	str	r3, [sp, #12]
 800f7aa:	e5f4      	b.n	800f396 <forward_concat+0x12e>
 800f7ac:	2300      	movs	r3, #0
 800f7ae:	e564      	b.n	800f27a <forward_concat+0x12>

0800f7b0 <forward_eltwise>:
 800f7b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7b4:	6982      	ldr	r2, [r0, #24]
 800f7b6:	b09d      	sub	sp, #116	; 0x74
 800f7b8:	8811      	ldrh	r1, [r2, #0]
 800f7ba:	9003      	str	r0, [sp, #12]
 800f7bc:	2900      	cmp	r1, #0
 800f7be:	f000 80c7 	beq.w	800f950 <forward_eltwise+0x1a0>
 800f7c2:	6853      	ldr	r3, [r2, #4]
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	f000 810f 	beq.w	800f9e8 <forward_eltwise+0x238>
 800f7ca:	881d      	ldrh	r5, [r3, #0]
 800f7cc:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800f7d0:	f1b8 0f00 	cmp.w	r8, #0
 800f7d4:	d001      	beq.n	800f7da <forward_eltwise+0x2a>
 800f7d6:	f8d8 8000 	ldr.w	r8, [r8]
 800f7da:	2901      	cmp	r1, #1
 800f7dc:	f000 8108 	beq.w	800f9f0 <forward_eltwise+0x240>
 800f7e0:	691b      	ldr	r3, [r3, #16]
 800f7e2:	9300      	str	r3, [sp, #0]
 800f7e4:	b10b      	cbz	r3, 800f7ea <forward_eltwise+0x3a>
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	9300      	str	r3, [sp, #0]
 800f7ea:	2300      	movs	r3, #0
 800f7ec:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 800f7f0:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
 800f7f4:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
 800f7f8:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
 800f7fc:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
 800f800:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
 800f804:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
 800f808:	931b      	str	r3, [sp, #108]	; 0x6c
 800f80a:	f240 5302 	movw	r3, #1282	; 0x502
 800f80e:	9307      	str	r3, [sp, #28]
 800f810:	9309      	str	r3, [sp, #36]	; 0x24
 800f812:	f240 5301 	movw	r3, #1281	; 0x501
 800f816:	930b      	str	r3, [sp, #44]	; 0x2c
 800f818:	9b03      	ldr	r3, [sp, #12]
 800f81a:	e9d3 7307 	ldrd	r7, r3, [r3, #28]
 800f81e:	ac0d      	add	r4, sp, #52	; 0x34
 800f820:	a812      	add	r0, sp, #72	; 0x48
 800f822:	a917      	add	r1, sp, #92	; 0x5c
 800f824:	2d01      	cmp	r5, #1
 800f826:	9408      	str	r4, [sp, #32]
 800f828:	900a      	str	r0, [sp, #40]	; 0x28
 800f82a:	910c      	str	r1, [sp, #48]	; 0x30
 800f82c:	9304      	str	r3, [sp, #16]
 800f82e:	f240 80d8 	bls.w	800f9e2 <forward_eltwise+0x232>
 800f832:	00ab      	lsls	r3, r5, #2
 800f834:	9305      	str	r3, [sp, #20]
 800f836:	2304      	movs	r3, #4
 800f838:	9301      	str	r3, [sp, #4]
 800f83a:	8813      	ldrh	r3, [r2, #0]
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	f000 80da 	beq.w	800f9f6 <forward_eltwise+0x246>
 800f842:	6853      	ldr	r3, [r2, #4]
 800f844:	685b      	ldr	r3, [r3, #4]
 800f846:	2b00      	cmp	r3, #0
 800f848:	f000 80d0 	beq.w	800f9ec <forward_eltwise+0x23c>
 800f84c:	9a01      	ldr	r2, [sp, #4]
 800f84e:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800f852:	f853 a002 	ldr.w	sl, [r3, r2]
 800f856:	f8da 3008 	ldr.w	r3, [sl, #8]
 800f85a:	4043      	eors	r3, r0
 800f85c:	f033 03ff 	bics.w	r3, r3, #255	; 0xff
 800f860:	f108 0108 	add.w	r1, r8, #8
 800f864:	f10a 0908 	add.w	r9, sl, #8
 800f868:	d10f      	bne.n	800f88a <forward_eltwise+0xda>
 800f86a:	f3c0 2017 	ubfx	r0, r0, #8, #24
 800f86e:	2800      	cmp	r0, #0
 800f870:	f000 8095 	beq.w	800f99e <forward_eltwise+0x1ee>
 800f874:	3801      	subs	r0, #1
 800f876:	f8d8 200c 	ldr.w	r2, [r8, #12]
 800f87a:	f8da 300c 	ldr.w	r3, [sl, #12]
 800f87e:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 800f882:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800f886:	429a      	cmp	r2, r3
 800f888:	d0f1      	beq.n	800f86e <forward_eltwise+0xbe>
 800f88a:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800f88e:	9102      	str	r1, [sp, #8]
 800f890:	689d      	ldr	r5, [r3, #8]
 800f892:	f8da 3018 	ldr.w	r3, [sl, #24]
 800f896:	689c      	ldr	r4, [r3, #8]
 800f898:	9b00      	ldr	r3, [sp, #0]
 800f89a:	699b      	ldr	r3, [r3, #24]
 800f89c:	464a      	mov	r2, r9
 800f89e:	a80b      	add	r0, sp, #44	; 0x2c
 800f8a0:	689e      	ldr	r6, [r3, #8]
 800f8a2:	f000 fc41 	bl	8010128 <core_get_broadcasted_shape>
 800f8a6:	f8da 2014 	ldr.w	r2, [sl, #20]
 800f8aa:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800f8ae:	f8d2 a004 	ldr.w	sl, [r2, #4]
 800f8b2:	9a00      	ldr	r2, [sp, #0]
 800f8b4:	685b      	ldr	r3, [r3, #4]
 800f8b6:	6952      	ldr	r2, [r2, #20]
 800f8b8:	9902      	ldr	r1, [sp, #8]
 800f8ba:	f8d2 8004 	ldr.w	r8, [r2, #4]
 800f8be:	a807      	add	r0, sp, #28
 800f8c0:	aa0b      	add	r2, sp, #44	; 0x2c
 800f8c2:	f000 fc5d 	bl	8010180 <core_compute_offsets>
 800f8c6:	4653      	mov	r3, sl
 800f8c8:	aa0b      	add	r2, sp, #44	; 0x2c
 800f8ca:	4649      	mov	r1, r9
 800f8cc:	a809      	add	r0, sp, #36	; 0x24
 800f8ce:	f000 fc57 	bl	8010180 <core_compute_offsets>
 800f8d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f8d4:	68d3      	ldr	r3, [r2, #12]
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d056      	beq.n	800f988 <forward_eltwise+0x1d8>
 800f8da:	2300      	movs	r3, #0
 800f8dc:	6890      	ldr	r0, [r2, #8]
 800f8de:	9302      	str	r3, [sp, #8]
 800f8e0:	2800      	cmp	r0, #0
 800f8e2:	d051      	beq.n	800f988 <forward_eltwise+0x1d8>
 800f8e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f8e6:	f04f 0b00 	mov.w	fp, #0
 800f8ea:	f3c1 2117 	ubfx	r1, r1, #8, #24
 800f8ee:	f04f 0a00 	mov.w	sl, #0
 800f8f2:	2904      	cmp	r1, #4
 800f8f4:	bf8c      	ite	hi
 800f8f6:	6913      	ldrhi	r3, [r2, #16]
 800f8f8:	2301      	movls	r3, #1
 800f8fa:	459a      	cmp	sl, r3
 800f8fc:	d22a      	bcs.n	800f954 <forward_eltwise+0x1a4>
 800f8fe:	6850      	ldr	r0, [r2, #4]
 800f900:	f04f 0900 	mov.w	r9, #0
 800f904:	b198      	cbz	r0, 800f92e <forward_eltwise+0x17e>
 800f906:	4622      	mov	r2, r4
 800f908:	4629      	mov	r1, r5
 800f90a:	4630      	mov	r0, r6
 800f90c:	47b8      	blx	r7
 800f90e:	9b08      	ldr	r3, [sp, #32]
 800f910:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f912:	685b      	ldr	r3, [r3, #4]
 800f914:	441d      	add	r5, r3
 800f916:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f918:	685b      	ldr	r3, [r3, #4]
 800f91a:	441c      	add	r4, r3
 800f91c:	6853      	ldr	r3, [r2, #4]
 800f91e:	f109 0901 	add.w	r9, r9, #1
 800f922:	454b      	cmp	r3, r9
 800f924:	4446      	add	r6, r8
 800f926:	d8ee      	bhi.n	800f906 <forward_eltwise+0x156>
 800f928:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f92a:	f3c3 2117 	ubfx	r1, r3, #8, #24
 800f92e:	9807      	ldr	r0, [sp, #28]
 800f930:	f5b0 6fa0 	cmp.w	r0, #1280	; 0x500
 800f934:	d302      	bcc.n	800f93c <forward_eltwise+0x18c>
 800f936:	9808      	ldr	r0, [sp, #32]
 800f938:	6903      	ldr	r3, [r0, #16]
 800f93a:	441d      	add	r5, r3
 800f93c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f93e:	f5b0 6fa0 	cmp.w	r0, #1280	; 0x500
 800f942:	d302      	bcc.n	800f94a <forward_eltwise+0x19a>
 800f944:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f946:	6903      	ldr	r3, [r0, #16]
 800f948:	441c      	add	r4, r3
 800f94a:	f10a 0a01 	add.w	sl, sl, #1
 800f94e:	e7d0      	b.n	800f8f2 <forward_eltwise+0x142>
 800f950:	684b      	ldr	r3, [r1, #4]
 800f952:	deff      	udf	#255	; 0xff
 800f954:	9b08      	ldr	r3, [sp, #32]
 800f956:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 800f95a:	6898      	ldr	r0, [r3, #8]
 800f95c:	4405      	add	r5, r0
 800f95e:	f8dc 0008 	ldr.w	r0, [ip, #8]
 800f962:	4404      	add	r4, r0
 800f964:	6890      	ldr	r0, [r2, #8]
 800f966:	f10b 0b01 	add.w	fp, fp, #1
 800f96a:	4558      	cmp	r0, fp
 800f96c:	d8bf      	bhi.n	800f8ee <forward_eltwise+0x13e>
 800f96e:	68d9      	ldr	r1, [r3, #12]
 800f970:	469e      	mov	lr, r3
 800f972:	f8dc 300c 	ldr.w	r3, [ip, #12]
 800f976:	441c      	add	r4, r3
 800f978:	9b02      	ldr	r3, [sp, #8]
 800f97a:	3301      	adds	r3, #1
 800f97c:	440d      	add	r5, r1
 800f97e:	9302      	str	r3, [sp, #8]
 800f980:	4619      	mov	r1, r3
 800f982:	68d3      	ldr	r3, [r2, #12]
 800f984:	428b      	cmp	r3, r1
 800f986:	d8ab      	bhi.n	800f8e0 <forward_eltwise+0x130>
 800f988:	9b01      	ldr	r3, [sp, #4]
 800f98a:	9a05      	ldr	r2, [sp, #20]
 800f98c:	3304      	adds	r3, #4
 800f98e:	4293      	cmp	r3, r2
 800f990:	9301      	str	r3, [sp, #4]
 800f992:	d026      	beq.n	800f9e2 <forward_eltwise+0x232>
 800f994:	9b03      	ldr	r3, [sp, #12]
 800f996:	f8dd 8000 	ldr.w	r8, [sp]
 800f99a:	699a      	ldr	r2, [r3, #24]
 800f99c:	e74d      	b.n	800f83a <forward_eltwise+0x8a>
 800f99e:	9b00      	ldr	r3, [sp, #0]
 800f9a0:	f8da 0018 	ldr.w	r0, [sl, #24]
 800f9a4:	699b      	ldr	r3, [r3, #24]
 800f9a6:	f8d8 4018 	ldr.w	r4, [r8, #24]
 800f9aa:	6885      	ldr	r5, [r0, #8]
 800f9ac:	689e      	ldr	r6, [r3, #8]
 800f9ae:	68a4      	ldr	r4, [r4, #8]
 800f9b0:	464a      	mov	r2, r9
 800f9b2:	a80b      	add	r0, sp, #44	; 0x2c
 800f9b4:	f000 fbb8 	bl	8010128 <core_get_broadcasted_shape>
 800f9b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f9ba:	0a1b      	lsrs	r3, r3, #8
 800f9bc:	bf08      	it	eq
 800f9be:	2301      	moveq	r3, #1
 800f9c0:	d009      	beq.n	800f9d6 <forward_eltwise+0x226>
 800f9c2:	980c      	ldr	r0, [sp, #48]	; 0x30
 800f9c4:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 800f9c8:	2301      	movs	r3, #1
 800f9ca:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800f9ce:	4290      	cmp	r0, r2
 800f9d0:	fb01 f303 	mul.w	r3, r1, r3
 800f9d4:	d1f9      	bne.n	800f9ca <forward_eltwise+0x21a>
 800f9d6:	4621      	mov	r1, r4
 800f9d8:	462a      	mov	r2, r5
 800f9da:	9c04      	ldr	r4, [sp, #16]
 800f9dc:	4630      	mov	r0, r6
 800f9de:	47a0      	blx	r4
 800f9e0:	e7d2      	b.n	800f988 <forward_eltwise+0x1d8>
 800f9e2:	b01d      	add	sp, #116	; 0x74
 800f9e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9e8:	461d      	mov	r5, r3
 800f9ea:	e6ef      	b.n	800f7cc <forward_eltwise+0x1c>
 800f9ec:	689b      	ldr	r3, [r3, #8]
 800f9ee:	deff      	udf	#255	; 0xff
 800f9f0:	2300      	movs	r3, #0
 800f9f2:	685b      	ldr	r3, [r3, #4]
 800f9f4:	deff      	udf	#255	; 0xff
 800f9f6:	685b      	ldr	r3, [r3, #4]
 800f9f8:	deff      	udf	#255	; 0xff
 800f9fa:	bf00      	nop

0800f9fc <forward_elu>:
 800f9fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9fe:	ed2d 8b04 	vpush	{d8-d9}
 800fa02:	6982      	ldr	r2, [r0, #24]
 800fa04:	8813      	ldrh	r3, [r2, #0]
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d051      	beq.n	800faae <forward_elu+0xb2>
 800fa0a:	6851      	ldr	r1, [r2, #4]
 800fa0c:	684a      	ldr	r2, [r1, #4]
 800fa0e:	b102      	cbz	r2, 800fa12 <forward_elu+0x16>
 800fa10:	6812      	ldr	r2, [r2, #0]
 800fa12:	2b01      	cmp	r3, #1
 800fa14:	d04a      	beq.n	800faac <forward_elu+0xb0>
 800fa16:	690b      	ldr	r3, [r1, #16]
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d050      	beq.n	800fabe <forward_elu+0xc2>
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	6991      	ldr	r1, [r2, #24]
 800fa20:	699c      	ldr	r4, [r3, #24]
 800fa22:	6893      	ldr	r3, [r2, #8]
 800fa24:	68a7      	ldr	r7, [r4, #8]
 800fa26:	688e      	ldr	r6, [r1, #8]
 800fa28:	0a1b      	lsrs	r3, r3, #8
 800fa2a:	d042      	beq.n	800fab2 <forward_elu+0xb6>
 800fa2c:	68d4      	ldr	r4, [r2, #12]
 800fa2e:	2201      	movs	r2, #1
 800fa30:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800fa34:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fa38:	429c      	cmp	r4, r3
 800fa3a:	fb01 f202 	mul.w	r2, r1, r2
 800fa3e:	d1f9      	bne.n	800fa34 <forward_elu+0x38>
 800fa40:	69c3      	ldr	r3, [r0, #28]
 800fa42:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800fa46:	3a01      	subs	r2, #1
 800fa48:	689b      	ldr	r3, [r3, #8]
 800fa4a:	eb06 0582 	add.w	r5, r6, r2, lsl #2
 800fa4e:	42ae      	cmp	r6, r5
 800fa50:	ed93 9a00 	vldr	s18, [r3]
 800fa54:	eb07 0782 	add.w	r7, r7, r2, lsl #2
 800fa58:	d825      	bhi.n	800faa6 <forward_elu+0xaa>
 800fa5a:	eddf 8a1a 	vldr	s17, [pc, #104]	; 800fac4 <forward_elu+0xc8>
 800fa5e:	3504      	adds	r5, #4
 800fa60:	3704      	adds	r7, #4
 800fa62:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
 800fa66:	462c      	mov	r4, r5
 800fa68:	ed35 8a01 	vldmdb	r5!, {s16}
 800fa6c:	eeb0 0a48 	vmov.f32	s0, s16
 800fa70:	f001 fbaa 	bl	80111c8 <expf>
 800fa74:	ee30 0a69 	vsub.f32	s0, s0, s19
 800fa78:	3c08      	subs	r4, #8
 800fa7a:	ee60 7a09 	vmul.f32	s15, s0, s18
 800fa7e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800fa82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa86:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800fa8a:	bf88      	it	hi
 800fa8c:	eef0 7a68 	vmovhi.f32	s15, s17
 800fa90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa94:	bfb8      	it	lt
 800fa96:	eeb0 8a68 	vmovlt.f32	s16, s17
 800fa9a:	ee77 7a88 	vadd.f32	s15, s15, s16
 800fa9e:	42a6      	cmp	r6, r4
 800faa0:	ed67 7a01 	vstmdb	r7!, {s15}
 800faa4:	d9df      	bls.n	800fa66 <forward_elu+0x6a>
 800faa6:	ecbd 8b04 	vpop	{d8-d9}
 800faaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800faac:	2300      	movs	r3, #0
 800faae:	685b      	ldr	r3, [r3, #4]
 800fab0:	deff      	udf	#255	; 0xff
 800fab2:	69c3      	ldr	r3, [r0, #28]
 800fab4:	689b      	ldr	r3, [r3, #8]
 800fab6:	4635      	mov	r5, r6
 800fab8:	ed93 9a00 	vldr	s18, [r3]
 800fabc:	e7cd      	b.n	800fa5a <forward_elu+0x5e>
 800fabe:	699b      	ldr	r3, [r3, #24]
 800fac0:	deff      	udf	#255	; 0xff
 800fac2:	bf00      	nop
 800fac4:	00000000 	.word	0x00000000

0800fac8 <forward_clip>:
 800fac8:	6982      	ldr	r2, [r0, #24]
 800faca:	8813      	ldrh	r3, [r2, #0]
 800facc:	2b00      	cmp	r3, #0
 800face:	d045      	beq.n	800fb5c <forward_clip+0x94>
 800fad0:	6851      	ldr	r1, [r2, #4]
 800fad2:	684a      	ldr	r2, [r1, #4]
 800fad4:	b102      	cbz	r2, 800fad8 <forward_clip+0x10>
 800fad6:	6812      	ldr	r2, [r2, #0]
 800fad8:	2b01      	cmp	r3, #1
 800fada:	d049      	beq.n	800fb70 <forward_clip+0xa8>
 800fadc:	690b      	ldr	r3, [r1, #16]
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d049      	beq.n	800fb76 <forward_clip+0xae>
 800fae2:	b470      	push	{r4, r5, r6}
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	6994      	ldr	r4, [r2, #24]
 800fae8:	6999      	ldr	r1, [r3, #24]
 800faea:	6893      	ldr	r3, [r2, #8]
 800faec:	6889      	ldr	r1, [r1, #8]
 800faee:	68a5      	ldr	r5, [r4, #8]
 800faf0:	0a1b      	lsrs	r3, r3, #8
 800faf2:	d035      	beq.n	800fb60 <forward_clip+0x98>
 800faf4:	68d6      	ldr	r6, [r2, #12]
 800faf6:	2201      	movs	r2, #1
 800faf8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800fafc:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 800fb00:	429e      	cmp	r6, r3
 800fb02:	fb04 f202 	mul.w	r2, r4, r2
 800fb06:	d1f9      	bne.n	800fafc <forward_clip+0x34>
 800fb08:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
 800fb0c:	69c0      	ldr	r0, [r0, #28]
 800fb0e:	3b01      	subs	r3, #1
 800fb10:	6880      	ldr	r0, [r0, #8]
 800fb12:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 800fb16:	4295      	cmp	r5, r2
 800fb18:	edd0 6a00 	vldr	s13, [r0]
 800fb1c:	ed90 7a01 	vldr	s14, [r0, #4]
 800fb20:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800fb24:	d818      	bhi.n	800fb58 <forward_clip+0x90>
 800fb26:	3204      	adds	r2, #4
 800fb28:	3104      	adds	r1, #4
 800fb2a:	4613      	mov	r3, r2
 800fb2c:	ed72 7a01 	vldmdb	r2!, {s15}
 800fb30:	eef4 7ae6 	vcmpe.f32	s15, s13
 800fb34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb38:	bfb8      	it	lt
 800fb3a:	eef0 7a66 	vmovlt.f32	s15, s13
 800fb3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fb42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb46:	f1a3 0308 	sub.w	r3, r3, #8
 800fb4a:	bf88      	it	hi
 800fb4c:	eef0 7a47 	vmovhi.f32	s15, s14
 800fb50:	429d      	cmp	r5, r3
 800fb52:	ed61 7a01 	vstmdb	r1!, {s15}
 800fb56:	d9e8      	bls.n	800fb2a <forward_clip+0x62>
 800fb58:	bc70      	pop	{r4, r5, r6}
 800fb5a:	4770      	bx	lr
 800fb5c:	685b      	ldr	r3, [r3, #4]
 800fb5e:	deff      	udf	#255	; 0xff
 800fb60:	69c3      	ldr	r3, [r0, #28]
 800fb62:	689b      	ldr	r3, [r3, #8]
 800fb64:	462a      	mov	r2, r5
 800fb66:	edd3 6a00 	vldr	s13, [r3]
 800fb6a:	ed93 7a01 	vldr	s14, [r3, #4]
 800fb6e:	e7da      	b.n	800fb26 <forward_clip+0x5e>
 800fb70:	2300      	movs	r3, #0
 800fb72:	685b      	ldr	r3, [r3, #4]
 800fb74:	deff      	udf	#255	; 0xff
 800fb76:	699b      	ldr	r3, [r3, #24]
 800fb78:	deff      	udf	#255	; 0xff
 800fb7a:	bf00      	nop

0800fb7c <forward_lite_dense_if32of32wf32>:
 800fb7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb80:	e9dd 6409 	ldrd	r6, r4, [sp, #36]	; 0x24
 800fb84:	eb00 0784 	add.w	r7, r0, r4, lsl #2
 800fb88:	4287      	cmp	r7, r0
 800fb8a:	f240 8106 	bls.w	800fd9a <forward_lite_dense_if32of32wf32+0x21e>
 800fb8e:	f1a6 0810 	sub.w	r8, r6, #16
 800fb92:	ea4f 1818 	mov.w	r8, r8, lsr #4
 800fb96:	f108 0801 	add.w	r8, r8, #1
 800fb9a:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800fb9e:	ea4f 0986 	mov.w	r9, r6, lsl #2
 800fba2:	eb01 1888 	add.w	r8, r1, r8, lsl #6
 800fba6:	4605      	mov	r5, r0
 800fba8:	f006 0a0f 	and.w	sl, r6, #15
 800fbac:	2e0f      	cmp	r6, #15
 800fbae:	ed9f 7a84 	vldr	s14, [pc, #528]	; 800fdc0 <forward_lite_dense_if32of32wf32+0x244>
 800fbb2:	f240 8101 	bls.w	800fdb8 <forward_lite_dense_if32of32wf32+0x23c>
 800fbb6:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 800fbba:	f102 0440 	add.w	r4, r2, #64	; 0x40
 800fbbe:	46b6      	mov	lr, r6
 800fbc0:	ed54 5a0f 	vldr	s11, [r4, #-60]	; 0xffffffc4
 800fbc4:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 800fbc8:	ed1c 6a10 	vldr	s12, [ip, #-64]	; 0xffffffc0
 800fbcc:	ed54 6a10 	vldr	s13, [r4, #-64]	; 0xffffffc0
 800fbd0:	ed5c 4a0d 	vldr	s9, [ip, #-52]	; 0xffffffcc
 800fbd4:	ed1c 5a0c 	vldr	s10, [ip, #-48]	; 0xffffffd0
 800fbd8:	ed1c 3a0a 	vldr	s6, [ip, #-40]	; 0xffffffd8
 800fbdc:	ed54 3a0a 	vldr	s7, [r4, #-40]	; 0xffffffd8
 800fbe0:	ed1c 4a09 	vldr	s8, [ip, #-36]	; 0xffffffdc
 800fbe4:	ed1c 1a06 	vldr	s2, [ip, #-24]	; 0xffffffe8
 800fbe8:	ed54 1a06 	vldr	s3, [r4, #-24]	; 0xffffffe8
 800fbec:	ed1c 2a05 	vldr	s4, [ip, #-20]	; 0xffffffec
 800fbf0:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 800fbf4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800fbf8:	ed5c 5a0e 	vldr	s11, [ip, #-56]	; 0xffffffc8
 800fbfc:	eee6 7a26 	vfma.f32	s15, s12, s13
 800fc00:	f1ae 0e10 	sub.w	lr, lr, #16
 800fc04:	f1be 0f0f 	cmp.w	lr, #15
 800fc08:	ed14 6a0e 	vldr	s12, [r4, #-56]	; 0xffffffc8
 800fc0c:	ed54 6a0d 	vldr	s13, [r4, #-52]	; 0xffffffcc
 800fc10:	eee5 7a86 	vfma.f32	s15, s11, s12
 800fc14:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 800fc18:	f104 0440 	add.w	r4, r4, #64	; 0x40
 800fc1c:	ed54 5a1c 	vldr	s11, [r4, #-112]	; 0xffffff90
 800fc20:	ed1c 6a1b 	vldr	s12, [ip, #-108]	; 0xffffff94
 800fc24:	eee4 7aa6 	vfma.f32	s15, s9, s13
 800fc28:	ed54 6a1b 	vldr	s13, [r4, #-108]	; 0xffffff94
 800fc2c:	ed54 4a19 	vldr	s9, [r4, #-100]	; 0xffffff9c
 800fc30:	eee5 7a25 	vfma.f32	s15, s10, s11
 800fc34:	ed1c 5a18 	vldr	s10, [ip, #-96]	; 0xffffffa0
 800fc38:	ed54 5a18 	vldr	s11, [r4, #-96]	; 0xffffffa0
 800fc3c:	eee6 7a26 	vfma.f32	s15, s12, s13
 800fc40:	ed1c 6a17 	vldr	s12, [ip, #-92]	; 0xffffffa4
 800fc44:	ed54 6a17 	vldr	s13, [r4, #-92]	; 0xffffffa4
 800fc48:	eee3 7a23 	vfma.f32	s15, s6, s7
 800fc4c:	ed1c 3a14 	vldr	s6, [ip, #-80]	; 0xffffffb0
 800fc50:	ed54 3a14 	vldr	s7, [r4, #-80]	; 0xffffffb0
 800fc54:	eee4 7a24 	vfma.f32	s15, s8, s9
 800fc58:	ed1c 4a13 	vldr	s8, [ip, #-76]	; 0xffffffb4
 800fc5c:	ed54 4a13 	vldr	s9, [r4, #-76]	; 0xffffffb4
 800fc60:	eee5 7a25 	vfma.f32	s15, s10, s11
 800fc64:	ed1c 5a12 	vldr	s10, [ip, #-72]	; 0xffffffb8
 800fc68:	ed54 5a12 	vldr	s11, [r4, #-72]	; 0xffffffb8
 800fc6c:	eee6 7a26 	vfma.f32	s15, s12, s13
 800fc70:	ed1c 6a11 	vldr	s12, [ip, #-68]	; 0xffffffbc
 800fc74:	ed54 6a11 	vldr	s13, [r4, #-68]	; 0xffffffbc
 800fc78:	eee1 7a21 	vfma.f32	s15, s2, s3
 800fc7c:	eee2 7a22 	vfma.f32	s15, s4, s5
 800fc80:	eee3 7a23 	vfma.f32	s15, s6, s7
 800fc84:	eee4 7a24 	vfma.f32	s15, s8, s9
 800fc88:	eee5 7a25 	vfma.f32	s15, s10, s11
 800fc8c:	eee6 7a26 	vfma.f32	s15, s12, s13
 800fc90:	ee37 7a27 	vadd.f32	s14, s14, s15
 800fc94:	d894      	bhi.n	800fbc0 <forward_lite_dense_if32of32wf32+0x44>
 800fc96:	eb02 0e0b 	add.w	lr, r2, fp
 800fc9a:	4654      	mov	r4, sl
 800fc9c:	46c4      	mov	ip, r8
 800fc9e:	2c00      	cmp	r4, #0
 800fca0:	d075      	beq.n	800fd8e <forward_lite_dense_if32of32wf32+0x212>
 800fca2:	eddc 6a00 	vldr	s13, [ip]
 800fca6:	edde 7a00 	vldr	s15, [lr]
 800fcaa:	2c01      	cmp	r4, #1
 800fcac:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800fcb0:	d06d      	beq.n	800fd8e <forward_lite_dense_if32of32wf32+0x212>
 800fcb2:	eddc 6a01 	vldr	s13, [ip, #4]
 800fcb6:	edde 7a01 	vldr	s15, [lr, #4]
 800fcba:	2c02      	cmp	r4, #2
 800fcbc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800fcc0:	d065      	beq.n	800fd8e <forward_lite_dense_if32of32wf32+0x212>
 800fcc2:	eddc 6a02 	vldr	s13, [ip, #8]
 800fcc6:	edde 7a02 	vldr	s15, [lr, #8]
 800fcca:	2c03      	cmp	r4, #3
 800fccc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800fcd0:	d05d      	beq.n	800fd8e <forward_lite_dense_if32of32wf32+0x212>
 800fcd2:	eddc 6a03 	vldr	s13, [ip, #12]
 800fcd6:	edde 7a03 	vldr	s15, [lr, #12]
 800fcda:	2c04      	cmp	r4, #4
 800fcdc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800fce0:	d055      	beq.n	800fd8e <forward_lite_dense_if32of32wf32+0x212>
 800fce2:	eddc 6a04 	vldr	s13, [ip, #16]
 800fce6:	edde 7a04 	vldr	s15, [lr, #16]
 800fcea:	2c05      	cmp	r4, #5
 800fcec:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800fcf0:	d04d      	beq.n	800fd8e <forward_lite_dense_if32of32wf32+0x212>
 800fcf2:	eddc 6a05 	vldr	s13, [ip, #20]
 800fcf6:	edde 7a05 	vldr	s15, [lr, #20]
 800fcfa:	2c06      	cmp	r4, #6
 800fcfc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800fd00:	d045      	beq.n	800fd8e <forward_lite_dense_if32of32wf32+0x212>
 800fd02:	eddc 6a06 	vldr	s13, [ip, #24]
 800fd06:	edde 7a06 	vldr	s15, [lr, #24]
 800fd0a:	2c07      	cmp	r4, #7
 800fd0c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800fd10:	d03d      	beq.n	800fd8e <forward_lite_dense_if32of32wf32+0x212>
 800fd12:	eddc 6a07 	vldr	s13, [ip, #28]
 800fd16:	edde 7a07 	vldr	s15, [lr, #28]
 800fd1a:	2c08      	cmp	r4, #8
 800fd1c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800fd20:	d035      	beq.n	800fd8e <forward_lite_dense_if32of32wf32+0x212>
 800fd22:	eddc 6a08 	vldr	s13, [ip, #32]
 800fd26:	edde 7a08 	vldr	s15, [lr, #32]
 800fd2a:	2c09      	cmp	r4, #9
 800fd2c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800fd30:	d02d      	beq.n	800fd8e <forward_lite_dense_if32of32wf32+0x212>
 800fd32:	eddc 6a09 	vldr	s13, [ip, #36]	; 0x24
 800fd36:	edde 7a09 	vldr	s15, [lr, #36]	; 0x24
 800fd3a:	2c0a      	cmp	r4, #10
 800fd3c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800fd40:	d025      	beq.n	800fd8e <forward_lite_dense_if32of32wf32+0x212>
 800fd42:	eddc 6a0a 	vldr	s13, [ip, #40]	; 0x28
 800fd46:	edde 7a0a 	vldr	s15, [lr, #40]	; 0x28
 800fd4a:	2c0b      	cmp	r4, #11
 800fd4c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800fd50:	d01d      	beq.n	800fd8e <forward_lite_dense_if32of32wf32+0x212>
 800fd52:	eddc 6a0b 	vldr	s13, [ip, #44]	; 0x2c
 800fd56:	edde 7a0b 	vldr	s15, [lr, #44]	; 0x2c
 800fd5a:	2c0c      	cmp	r4, #12
 800fd5c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800fd60:	d015      	beq.n	800fd8e <forward_lite_dense_if32of32wf32+0x212>
 800fd62:	eddc 6a0c 	vldr	s13, [ip, #48]	; 0x30
 800fd66:	edde 7a0c 	vldr	s15, [lr, #48]	; 0x30
 800fd6a:	3c0d      	subs	r4, #13
 800fd6c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800fd70:	d00d      	beq.n	800fd8e <forward_lite_dense_if32of32wf32+0x212>
 800fd72:	eddc 6a0d 	vldr	s13, [ip, #52]	; 0x34
 800fd76:	edde 7a0d 	vldr	s15, [lr, #52]	; 0x34
 800fd7a:	2c01      	cmp	r4, #1
 800fd7c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800fd80:	d005      	beq.n	800fd8e <forward_lite_dense_if32of32wf32+0x212>
 800fd82:	edde 6a0e 	vldr	s13, [lr, #56]	; 0x38
 800fd86:	eddc 7a0e 	vldr	s15, [ip, #56]	; 0x38
 800fd8a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800fd8e:	444a      	add	r2, r9
 800fd90:	eca5 7a01 	vstmia	r5!, {s14}
 800fd94:	42af      	cmp	r7, r5
 800fd96:	f63f af09 	bhi.w	800fbac <forward_lite_dense_if32of32wf32+0x30>
 800fd9a:	b15b      	cbz	r3, 800fdb4 <forward_lite_dense_if32of32wf32+0x238>
 800fd9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fd9e:	b14a      	cbz	r2, 800fdb4 <forward_lite_dense_if32of32wf32+0x238>
 800fda0:	edd0 7a00 	vldr	s15, [r0]
 800fda4:	ecb3 7a01 	vldmia	r3!, {s14}
 800fda8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fdac:	ece0 7a01 	vstmia	r0!, {s15}
 800fdb0:	4287      	cmp	r7, r0
 800fdb2:	d1f5      	bne.n	800fda0 <forward_lite_dense_if32of32wf32+0x224>
 800fdb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdb8:	4634      	mov	r4, r6
 800fdba:	4696      	mov	lr, r2
 800fdbc:	468c      	mov	ip, r1
 800fdbe:	e76e      	b.n	800fc9e <forward_lite_dense_if32of32wf32+0x122>
 800fdc0:	00000000 	.word	0x00000000

0800fdc4 <st_int8_copy>:
 800fdc4:	4288      	cmp	r0, r1
 800fdc6:	d057      	beq.n	800fe78 <st_int8_copy+0xb4>
 800fdc8:	2a00      	cmp	r2, #0
 800fdca:	d055      	beq.n	800fe78 <st_int8_copy+0xb4>
 800fdcc:	4288      	cmp	r0, r1
 800fdce:	d354      	bcc.n	800fe7a <st_int8_copy+0xb6>
 800fdd0:	078b      	lsls	r3, r1, #30
 800fdd2:	d102      	bne.n	800fdda <st_int8_copy+0x16>
 800fdd4:	e009      	b.n	800fdea <st_int8_copy+0x26>
 800fdd6:	2a00      	cmp	r2, #0
 800fdd8:	d05c      	beq.n	800fe94 <st_int8_copy+0xd0>
 800fdda:	f910 3b01 	ldrsb.w	r3, [r0], #1
 800fdde:	f801 3b01 	strb.w	r3, [r1], #1
 800fde2:	078b      	lsls	r3, r1, #30
 800fde4:	f102 32ff 	add.w	r2, r2, #4294967295
 800fde8:	d1f5      	bne.n	800fdd6 <st_int8_copy+0x12>
 800fdea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fdee:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 800fdf2:	d069      	beq.n	800fec8 <st_int8_copy+0x104>
 800fdf4:	ea41 0300 	orr.w	r3, r1, r0
 800fdf8:	075b      	lsls	r3, r3, #29
 800fdfa:	d14c      	bne.n	800fe96 <st_int8_copy+0xd2>
 800fdfc:	f10e 33ff 	add.w	r3, lr, #4294967295
 800fe00:	2b01      	cmp	r3, #1
 800fe02:	d948      	bls.n	800fe96 <st_int8_copy+0xd2>
 800fe04:	f100 0310 	add.w	r3, r0, #16
 800fe08:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800fe0c:	f101 0c10 	add.w	ip, r1, #16
 800fe10:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 800fe14:	ed13 6b04 	vldr	d6, [r3, #-16]
 800fe18:	ed13 7b02 	vldr	d7, [r3, #-8]
 800fe1c:	3310      	adds	r3, #16
 800fe1e:	4573      	cmp	r3, lr
 800fe20:	ed0c 6b04 	vstr	d6, [ip, #-16]
 800fe24:	ed0c 7b02 	vstr	d7, [ip, #-8]
 800fe28:	f10c 0c10 	add.w	ip, ip, #16
 800fe2c:	d1f2      	bne.n	800fe14 <st_int8_copy+0x50>
 800fe2e:	f3c2 0381 	ubfx	r3, r2, #2, #2
 800fe32:	4421      	add	r1, r4
 800fe34:	4420      	add	r0, r4
 800fe36:	f002 0203 	and.w	r2, r2, #3
 800fe3a:	b16b      	cbz	r3, 800fe58 <st_int8_copy+0x94>
 800fe3c:	6804      	ldr	r4, [r0, #0]
 800fe3e:	600c      	str	r4, [r1, #0]
 800fe40:	1e5c      	subs	r4, r3, #1
 800fe42:	d005      	beq.n	800fe50 <st_int8_copy+0x8c>
 800fe44:	6845      	ldr	r5, [r0, #4]
 800fe46:	604d      	str	r5, [r1, #4]
 800fe48:	2c01      	cmp	r4, #1
 800fe4a:	bf1c      	itt	ne
 800fe4c:	6884      	ldrne	r4, [r0, #8]
 800fe4e:	608c      	strne	r4, [r1, #8]
 800fe50:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800fe54:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800fe58:	b162      	cbz	r2, 800fe74 <st_int8_copy+0xb0>
 800fe5a:	f990 3000 	ldrsb.w	r3, [r0]
 800fe5e:	700b      	strb	r3, [r1, #0]
 800fe60:	3a01      	subs	r2, #1
 800fe62:	d007      	beq.n	800fe74 <st_int8_copy+0xb0>
 800fe64:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800fe68:	704b      	strb	r3, [r1, #1]
 800fe6a:	2a01      	cmp	r2, #1
 800fe6c:	bf1c      	itt	ne
 800fe6e:	f990 3002 	ldrsbne.w	r3, [r0, #2]
 800fe72:	708b      	strbne	r3, [r1, #2]
 800fe74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe78:	4770      	bx	lr
 800fe7a:	1883      	adds	r3, r0, r2
 800fe7c:	428b      	cmp	r3, r1
 800fe7e:	d9a7      	bls.n	800fdd0 <st_int8_copy+0xc>
 800fe80:	4283      	cmp	r3, r0
 800fe82:	440a      	add	r2, r1
 800fe84:	d9f8      	bls.n	800fe78 <st_int8_copy+0xb4>
 800fe86:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 800fe8a:	f802 1d01 	strb.w	r1, [r2, #-1]!
 800fe8e:	4283      	cmp	r3, r0
 800fe90:	d1f9      	bne.n	800fe86 <st_int8_copy+0xc2>
 800fe92:	4770      	bx	lr
 800fe94:	4770      	bx	lr
 800fe96:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800fe9a:	460b      	mov	r3, r1
 800fe9c:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 800fea0:	4684      	mov	ip, r0
 800fea2:	f8dc 7000 	ldr.w	r7, [ip]
 800fea6:	f8dc 6004 	ldr.w	r6, [ip, #4]
 800feaa:	f8dc 5008 	ldr.w	r5, [ip, #8]
 800feae:	f8dc 800c 	ldr.w	r8, [ip, #12]
 800feb2:	f8c3 800c 	str.w	r8, [r3, #12]
 800feb6:	601f      	str	r7, [r3, #0]
 800feb8:	605e      	str	r6, [r3, #4]
 800feba:	609d      	str	r5, [r3, #8]
 800febc:	3310      	adds	r3, #16
 800febe:	459e      	cmp	lr, r3
 800fec0:	f10c 0c10 	add.w	ip, ip, #16
 800fec4:	d1ed      	bne.n	800fea2 <st_int8_copy+0xde>
 800fec6:	e7b2      	b.n	800fe2e <st_int8_copy+0x6a>
 800fec8:	0893      	lsrs	r3, r2, #2
 800feca:	f002 0203 	and.w	r2, r2, #3
 800fece:	e7b4      	b.n	800fe3a <st_int8_copy+0x76>

0800fed0 <ai_sum_f32>:
 800fed0:	edd1 7a00 	vldr	s15, [r1]
 800fed4:	ed92 7a00 	vldr	s14, [r2]
 800fed8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fedc:	edc0 7a00 	vstr	s15, [r0]
 800fee0:	4770      	bx	lr
 800fee2:	bf00      	nop

0800fee4 <ai_sum_buffer_f32>:
 800fee4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800fee8:	4298      	cmp	r0, r3
 800feea:	d209      	bcs.n	800ff00 <ai_sum_buffer_f32+0x1c>
 800feec:	ecf1 7a01 	vldmia	r1!, {s15}
 800fef0:	ecb2 7a01 	vldmia	r2!, {s14}
 800fef4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fef8:	ece0 7a01 	vstmia	r0!, {s15}
 800fefc:	4283      	cmp	r3, r0
 800fefe:	d8f5      	bhi.n	800feec <ai_sum_buffer_f32+0x8>
 800ff00:	4770      	bx	lr
 800ff02:	bf00      	nop

0800ff04 <ai_sub_f32>:
 800ff04:	edd1 7a00 	vldr	s15, [r1]
 800ff08:	ed92 7a00 	vldr	s14, [r2]
 800ff0c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ff10:	edc0 7a00 	vstr	s15, [r0]
 800ff14:	4770      	bx	lr
 800ff16:	bf00      	nop

0800ff18 <ai_sub_buffer_f32>:
 800ff18:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800ff1c:	4298      	cmp	r0, r3
 800ff1e:	d209      	bcs.n	800ff34 <ai_sub_buffer_f32+0x1c>
 800ff20:	ecf1 7a01 	vldmia	r1!, {s15}
 800ff24:	ecb2 7a01 	vldmia	r2!, {s14}
 800ff28:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ff2c:	ece0 7a01 	vstmia	r0!, {s15}
 800ff30:	4283      	cmp	r3, r0
 800ff32:	d8f5      	bhi.n	800ff20 <ai_sub_buffer_f32+0x8>
 800ff34:	4770      	bx	lr
 800ff36:	bf00      	nop

0800ff38 <ai_mul_f32>:
 800ff38:	edd1 7a00 	vldr	s15, [r1]
 800ff3c:	ed92 7a00 	vldr	s14, [r2]
 800ff40:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ff44:	edc0 7a00 	vstr	s15, [r0]
 800ff48:	4770      	bx	lr
 800ff4a:	bf00      	nop

0800ff4c <ai_mul_buffer_f32>:
 800ff4c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800ff50:	4298      	cmp	r0, r3
 800ff52:	d209      	bcs.n	800ff68 <ai_mul_buffer_f32+0x1c>
 800ff54:	ecf1 7a01 	vldmia	r1!, {s15}
 800ff58:	ecb2 7a01 	vldmia	r2!, {s14}
 800ff5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ff60:	ece0 7a01 	vstmia	r0!, {s15}
 800ff64:	4283      	cmp	r3, r0
 800ff66:	d8f5      	bhi.n	800ff54 <ai_mul_buffer_f32+0x8>
 800ff68:	4770      	bx	lr
 800ff6a:	bf00      	nop

0800ff6c <ai_div_f32>:
 800ff6c:	edd1 6a00 	vldr	s13, [r1]
 800ff70:	ed92 7a00 	vldr	s14, [r2]
 800ff74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ff78:	edc0 7a00 	vstr	s15, [r0]
 800ff7c:	4770      	bx	lr
 800ff7e:	bf00      	nop

0800ff80 <ai_div_buffer_f32>:
 800ff80:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800ff84:	4298      	cmp	r0, r3
 800ff86:	d209      	bcs.n	800ff9c <ai_div_buffer_f32+0x1c>
 800ff88:	ecf1 6a01 	vldmia	r1!, {s13}
 800ff8c:	ecb2 7a01 	vldmia	r2!, {s14}
 800ff90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ff94:	ece0 7a01 	vstmia	r0!, {s15}
 800ff98:	4283      	cmp	r3, r0
 800ff9a:	d8f5      	bhi.n	800ff88 <ai_div_buffer_f32+0x8>
 800ff9c:	4770      	bx	lr
 800ff9e:	bf00      	nop

0800ffa0 <ai_array_to_buffer_fmt>:
 800ffa0:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800ffa4:	2b02      	cmp	r3, #2
 800ffa6:	d050      	beq.n	801004a <ai_array_to_buffer_fmt+0xaa>
 800ffa8:	4b2a      	ldr	r3, [pc, #168]	; (8010054 <ai_array_to_buffer_fmt+0xb4>)
 800ffaa:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 800ffae:	429a      	cmp	r2, r3
 800ffb0:	d00b      	beq.n	800ffca <ai_array_to_buffer_fmt+0x2a>
 800ffb2:	dc1c      	bgt.n	800ffee <ai_array_to_buffer_fmt+0x4e>
 800ffb4:	4b28      	ldr	r3, [pc, #160]	; (8010058 <ai_array_to_buffer_fmt+0xb8>)
 800ffb6:	429a      	cmp	r2, r3
 800ffb8:	d007      	beq.n	800ffca <ai_array_to_buffer_fmt+0x2a>
 800ffba:	dd0b      	ble.n	800ffd4 <ai_array_to_buffer_fmt+0x34>
 800ffbc:	4b27      	ldr	r3, [pc, #156]	; (801005c <ai_array_to_buffer_fmt+0xbc>)
 800ffbe:	429a      	cmp	r2, r3
 800ffc0:	d003      	beq.n	800ffca <ai_array_to_buffer_fmt+0x2a>
 800ffc2:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 800ffc6:	429a      	cmp	r2, r3
 800ffc8:	d131      	bne.n	801002e <ai_array_to_buffer_fmt+0x8e>
 800ffca:	4613      	mov	r3, r2
 800ffcc:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800ffd0:	4318      	orrs	r0, r3
 800ffd2:	4770      	bx	lr
 800ffd4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800ffd8:	429a      	cmp	r2, r3
 800ffda:	d0f6      	beq.n	800ffca <ai_array_to_buffer_fmt+0x2a>
 800ffdc:	dd2c      	ble.n	8010038 <ai_array_to_buffer_fmt+0x98>
 800ffde:	4b20      	ldr	r3, [pc, #128]	; (8010060 <ai_array_to_buffer_fmt+0xc0>)
 800ffe0:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800ffe4:	429a      	cmp	r2, r3
 800ffe6:	bf18      	it	ne
 800ffe8:	2340      	movne	r3, #64	; 0x40
 800ffea:	4318      	orrs	r0, r3
 800ffec:	4770      	bx	lr
 800ffee:	4b1d      	ldr	r3, [pc, #116]	; (8010064 <ai_array_to_buffer_fmt+0xc4>)
 800fff0:	429a      	cmp	r2, r3
 800fff2:	d0ea      	beq.n	800ffca <ai_array_to_buffer_fmt+0x2a>
 800fff4:	dd0e      	ble.n	8010014 <ai_array_to_buffer_fmt+0x74>
 800fff6:	4b1c      	ldr	r3, [pc, #112]	; (8010068 <ai_array_to_buffer_fmt+0xc8>)
 800fff8:	429a      	cmp	r2, r3
 800fffa:	d0e6      	beq.n	800ffca <ai_array_to_buffer_fmt+0x2a>
 800fffc:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 8010000:	429a      	cmp	r2, r3
 8010002:	d0e2      	beq.n	800ffca <ai_array_to_buffer_fmt+0x2a>
 8010004:	4b19      	ldr	r3, [pc, #100]	; (801006c <ai_array_to_buffer_fmt+0xcc>)
 8010006:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 801000a:	429a      	cmp	r2, r3
 801000c:	bf18      	it	ne
 801000e:	2340      	movne	r3, #64	; 0x40
 8010010:	4318      	orrs	r0, r3
 8010012:	4770      	bx	lr
 8010014:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8010018:	429a      	cmp	r2, r3
 801001a:	d0d6      	beq.n	800ffca <ai_array_to_buffer_fmt+0x2a>
 801001c:	3307      	adds	r3, #7
 801001e:	429a      	cmp	r2, r3
 8010020:	d0d3      	beq.n	800ffca <ai_array_to_buffer_fmt+0x2a>
 8010022:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 8010026:	429a      	cmp	r2, r3
 8010028:	bf18      	it	ne
 801002a:	2340      	movne	r3, #64	; 0x40
 801002c:	e7ce      	b.n	800ffcc <ai_array_to_buffer_fmt+0x2c>
 801002e:	4b10      	ldr	r3, [pc, #64]	; (8010070 <ai_array_to_buffer_fmt+0xd0>)
 8010030:	429a      	cmp	r2, r3
 8010032:	bf18      	it	ne
 8010034:	2340      	movne	r3, #64	; 0x40
 8010036:	e7c9      	b.n	800ffcc <ai_array_to_buffer_fmt+0x2c>
 8010038:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 801003c:	429a      	cmp	r2, r3
 801003e:	d0c4      	beq.n	800ffca <ai_array_to_buffer_fmt+0x2a>
 8010040:	3380      	adds	r3, #128	; 0x80
 8010042:	429a      	cmp	r2, r3
 8010044:	bf18      	it	ne
 8010046:	2340      	movne	r3, #64	; 0x40
 8010048:	e7c0      	b.n	800ffcc <ai_array_to_buffer_fmt+0x2c>
 801004a:	4b0a      	ldr	r3, [pc, #40]	; (8010074 <ai_array_to_buffer_fmt+0xd4>)
 801004c:	4003      	ands	r3, r0
 801004e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8010052:	e7bb      	b.n	800ffcc <ai_array_to_buffer_fmt+0x2c>
 8010054:	00840040 	.word	0x00840040
 8010058:	00040840 	.word	0x00040840
 801005c:	00041040 	.word	0x00041040
 8010060:	00040447 	.word	0x00040447
 8010064:	00840840 	.word	0x00840840
 8010068:	00841040 	.word	0x00841040
 801006c:	0084084f 	.word	0x0084084f
 8010070:	0004084f 	.word	0x0004084f
 8010074:	00803fff 	.word	0x00803fff

08010078 <ai_array_get_byte_size>:
 8010078:	b319      	cbz	r1, 80100c2 <ai_array_get_byte_size+0x4a>
 801007a:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 801007e:	fb03 f101 	mul.w	r1, r3, r1
 8010082:	3107      	adds	r1, #7
 8010084:	f3c0 4243 	ubfx	r2, r0, #17, #4
 8010088:	f021 0307 	bic.w	r3, r1, #7
 801008c:	2a04      	cmp	r2, #4
 801008e:	f3c0 5141 	ubfx	r1, r0, #21, #2
 8010092:	fa23 f101 	lsr.w	r1, r3, r1
 8010096:	ea4f 10e0 	mov.w	r0, r0, asr #7
 801009a:	d00b      	beq.n	80100b4 <ai_array_get_byte_size+0x3c>
 801009c:	2a08      	cmp	r2, #8
 801009e:	d002      	beq.n	80100a6 <ai_array_get_byte_size+0x2e>
 80100a0:	3107      	adds	r1, #7
 80100a2:	08c8      	lsrs	r0, r1, #3
 80100a4:	4770      	bx	lr
 80100a6:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80100aa:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 80100ae:	3107      	adds	r1, #7
 80100b0:	08c8      	lsrs	r0, r1, #3
 80100b2:	4770      	bx	lr
 80100b4:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80100b8:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 80100bc:	3107      	adds	r1, #7
 80100be:	08c8      	lsrs	r0, r1, #3
 80100c0:	4770      	bx	lr
 80100c2:	4608      	mov	r0, r1
 80100c4:	4770      	bx	lr
 80100c6:	bf00      	nop

080100c8 <ai_array_get_data_byte_size>:
 80100c8:	b169      	cbz	r1, 80100e6 <ai_array_get_data_byte_size+0x1e>
 80100ca:	f3c0 12c6 	ubfx	r2, r0, #7, #7
 80100ce:	fb02 f101 	mul.w	r1, r2, r1
 80100d2:	1dcb      	adds	r3, r1, #7
 80100d4:	f023 0307 	bic.w	r3, r3, #7
 80100d8:	f3c0 5041 	ubfx	r0, r0, #21, #2
 80100dc:	fa23 f000 	lsr.w	r0, r3, r0
 80100e0:	3007      	adds	r0, #7
 80100e2:	08c0      	lsrs	r0, r0, #3
 80100e4:	4770      	bx	lr
 80100e6:	4608      	mov	r0, r1
 80100e8:	4770      	bx	lr
 80100ea:	bf00      	nop

080100ec <ai_version_get>:
 80100ec:	0212      	lsls	r2, r2, #8
 80100ee:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80100f2:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 80100f6:	4770      	bx	lr

080100f8 <get_tensor_byte_size>:
 80100f8:	b410      	push	{r4}
 80100fa:	6983      	ldr	r3, [r0, #24]
 80100fc:	68c4      	ldr	r4, [r0, #12]
 80100fe:	6941      	ldr	r1, [r0, #20]
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	68e0      	ldr	r0, [r4, #12]
 8010104:	4a07      	ldr	r2, [pc, #28]	; (8010124 <get_tensor_byte_size+0x2c>)
 8010106:	68c9      	ldr	r1, [r1, #12]
 8010108:	f85d 4b04 	ldr.w	r4, [sp], #4
 801010c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8010110:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8010114:	fb01 f000 	mul.w	r0, r1, r0
 8010118:	4293      	cmp	r3, r2
 801011a:	bf04      	itt	eq
 801011c:	3007      	addeq	r0, #7
 801011e:	08c0      	lsreq	r0, r0, #3
 8010120:	4770      	bx	lr
 8010122:	bf00      	nop
 8010124:	000400c0 	.word	0x000400c0

08010128 <core_get_broadcasted_shape>:
 8010128:	b470      	push	{r4, r5, r6}
 801012a:	6804      	ldr	r4, [r0, #0]
 801012c:	f3c4 2417 	ubfx	r4, r4, #8, #24
 8010130:	b324      	cbz	r4, 801017c <core_get_broadcasted_shape+0x54>
 8010132:	4623      	mov	r3, r4
 8010134:	3b01      	subs	r3, #1
 8010136:	429c      	cmp	r4, r3
 8010138:	d91b      	bls.n	8010172 <core_get_broadcasted_shape+0x4a>
 801013a:	6814      	ldr	r4, [r2, #0]
 801013c:	680e      	ldr	r6, [r1, #0]
 801013e:	ebb3 2f14 	cmp.w	r3, r4, lsr #8
 8010142:	bf36      	itet	cc
 8010144:	6854      	ldrcc	r4, [r2, #4]
 8010146:	2401      	movcs	r4, #1
 8010148:	f854 4023 	ldrcc.w	r4, [r4, r3, lsl #2]
 801014c:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 8010150:	bf38      	it	cc
 8010152:	ea4f 0c83 	movcc.w	ip, r3, lsl #2
 8010156:	ebb3 2f16 	cmp.w	r3, r6, lsr #8
 801015a:	f04f 0501 	mov.w	r5, #1
 801015e:	bf3c      	itt	cc
 8010160:	684d      	ldrcc	r5, [r1, #4]
 8010162:	f855 500c 	ldrcc.w	r5, [r5, ip]
 8010166:	42ac      	cmp	r4, r5
 8010168:	bf38      	it	cc
 801016a:	462c      	movcc	r4, r5
 801016c:	6845      	ldr	r5, [r0, #4]
 801016e:	f845 400c 	str.w	r4, [r5, ip]
 8010172:	b11b      	cbz	r3, 801017c <core_get_broadcasted_shape+0x54>
 8010174:	6804      	ldr	r4, [r0, #0]
 8010176:	f3c4 2417 	ubfx	r4, r4, #8, #24
 801017a:	e7db      	b.n	8010134 <core_get_broadcasted_shape+0xc>
 801017c:	bc70      	pop	{r4, r5, r6}
 801017e:	4770      	bx	lr

08010180 <core_compute_offsets>:
 8010180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010184:	e9d1 4600 	ldrd	r4, r6, [r1]
 8010188:	f5b4 6fa0 	cmp.w	r4, #1280	; 0x500
 801018c:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8010190:	6871      	ldr	r1, [r6, #4]
 8010192:	6812      	ldr	r2, [r2, #0]
 8010194:	bf28      	it	cs
 8010196:	6935      	ldrcs	r5, [r6, #16]
 8010198:	f8d9 c004 	ldr.w	ip, [r9, #4]
 801019c:	f8d0 b000 	ldr.w	fp, [r0]
 80101a0:	bf2e      	itee	cs
 80101a2:	fb05 fe01 	mulcs.w	lr, r5, r1
 80101a6:	468e      	movcc	lr, r1
 80101a8:	2501      	movcc	r5, #1
 80101aa:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 80101ae:	bf28      	it	cs
 80101b0:	f8d9 2010 	ldrcs.w	r2, [r9, #16]
 80101b4:	e9d6 4802 	ldrd	r4, r8, [r6, #8]
 80101b8:	e9d9 6902 	ldrd	r6, r9, [r9, #8]
 80101bc:	bf38      	it	cc
 80101be:	2201      	movcc	r2, #1
 80101c0:	b083      	sub	sp, #12
 80101c2:	ebb4 0a06 	subs.w	sl, r4, r6
 80101c6:	bf18      	it	ne
 80101c8:	f04f 0a01 	movne.w	sl, #1
 80101cc:	f5bb 7f00 	cmp.w	fp, #512	; 0x200
 80101d0:	9201      	str	r2, [sp, #4]
 80101d2:	f3cb 2217 	ubfx	r2, fp, #8, #24
 80101d6:	d308      	bcc.n	80101ea <core_compute_offsets+0x6a>
 80101d8:	6847      	ldr	r7, [r0, #4]
 80101da:	4561      	cmp	r1, ip
 80101dc:	bf0c      	ite	eq
 80101de:	461a      	moveq	r2, r3
 80101e0:	2200      	movne	r2, #0
 80101e2:	607a      	str	r2, [r7, #4]
 80101e4:	6802      	ldr	r2, [r0, #0]
 80101e6:	f3c2 2217 	ubfx	r2, r2, #8, #24
 80101ea:	9f01      	ldr	r7, [sp, #4]
 80101ec:	42bd      	cmp	r5, r7
 80101ee:	d03f      	beq.n	8010270 <core_compute_offsets+0xf0>
 80101f0:	eba1 0b0c 	sub.w	fp, r1, ip
 80101f4:	fabb fb8b 	clz	fp, fp
 80101f8:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 80101fc:	fb01 fb0b 	mul.w	fp, r1, fp
 8010200:	f1cb 0b00 	rsb	fp, fp, #0
 8010204:	2a04      	cmp	r2, #4
 8010206:	d906      	bls.n	8010216 <core_compute_offsets+0x96>
 8010208:	6847      	ldr	r7, [r0, #4]
 801020a:	fb0b f203 	mul.w	r2, fp, r3
 801020e:	613a      	str	r2, [r7, #16]
 8010210:	6802      	ldr	r2, [r0, #0]
 8010212:	f3c2 2217 	ubfx	r2, r2, #8, #24
 8010216:	42b4      	cmp	r4, r6
 8010218:	d03a      	beq.n	8010290 <core_compute_offsets+0x110>
 801021a:	f04f 0b00 	mov.w	fp, #0
 801021e:	2a02      	cmp	r2, #2
 8010220:	fb0e fa0a 	mul.w	sl, lr, sl
 8010224:	d90e      	bls.n	8010244 <core_compute_offsets+0xc4>
 8010226:	9a01      	ldr	r2, [sp, #4]
 8010228:	6847      	ldr	r7, [r0, #4]
 801022a:	1aaa      	subs	r2, r5, r2
 801022c:	bf18      	it	ne
 801022e:	2201      	movne	r2, #1
 8010230:	ebab 0b0a 	sub.w	fp, fp, sl
 8010234:	fb01 bb02 	mla	fp, r1, r2, fp
 8010238:	fb03 f20b 	mul.w	r2, r3, fp
 801023c:	60ba      	str	r2, [r7, #8]
 801023e:	6802      	ldr	r2, [r0, #0]
 8010240:	f3c2 2217 	ubfx	r2, r2, #8, #24
 8010244:	45c8      	cmp	r8, r9
 8010246:	d019      	beq.n	801027c <core_compute_offsets+0xfc>
 8010248:	2100      	movs	r1, #0
 801024a:	2a03      	cmp	r2, #3
 801024c:	d90d      	bls.n	801026a <core_compute_offsets+0xea>
 801024e:	ebb8 0809 	subs.w	r8, r8, r9
 8010252:	fb0e f404 	mul.w	r4, lr, r4
 8010256:	bf18      	it	ne
 8010258:	f04f 0801 	movne.w	r8, #1
 801025c:	fb08 1114 	mls	r1, r8, r4, r1
 8010260:	6842      	ldr	r2, [r0, #4]
 8010262:	448a      	add	sl, r1
 8010264:	fb03 f30a 	mul.w	r3, r3, sl
 8010268:	60d3      	str	r3, [r2, #12]
 801026a:	b003      	add	sp, #12
 801026c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010270:	ebb1 0b0c 	subs.w	fp, r1, ip
 8010274:	bf18      	it	ne
 8010276:	f04f 0b01 	movne.w	fp, #1
 801027a:	e7c3      	b.n	8010204 <core_compute_offsets+0x84>
 801027c:	42b4      	cmp	r4, r6
 801027e:	d0e3      	beq.n	8010248 <core_compute_offsets+0xc8>
 8010280:	9e01      	ldr	r6, [sp, #4]
 8010282:	42b5      	cmp	r5, r6
 8010284:	d0e0      	beq.n	8010248 <core_compute_offsets+0xc8>
 8010286:	ebb1 010c 	subs.w	r1, r1, ip
 801028a:	bf18      	it	ne
 801028c:	2101      	movne	r1, #1
 801028e:	e7dc      	b.n	801024a <core_compute_offsets+0xca>
 8010290:	9f01      	ldr	r7, [sp, #4]
 8010292:	42bd      	cmp	r5, r7
 8010294:	d0c1      	beq.n	801021a <core_compute_offsets+0x9a>
 8010296:	ebb1 0b0c 	subs.w	fp, r1, ip
 801029a:	bf18      	it	ne
 801029c:	f04f 0b01 	movne.w	fp, #1
 80102a0:	e7bd      	b.n	801021e <core_compute_offsets+0x9e>
 80102a2:	bf00      	nop

080102a4 <sbrk_aligned>:
 80102a4:	b570      	push	{r4, r5, r6, lr}
 80102a6:	4e0e      	ldr	r6, [pc, #56]	; (80102e0 <sbrk_aligned+0x3c>)
 80102a8:	460c      	mov	r4, r1
 80102aa:	6831      	ldr	r1, [r6, #0]
 80102ac:	4605      	mov	r5, r0
 80102ae:	b911      	cbnz	r1, 80102b6 <sbrk_aligned+0x12>
 80102b0:	f000 fae8 	bl	8010884 <_sbrk_r>
 80102b4:	6030      	str	r0, [r6, #0]
 80102b6:	4621      	mov	r1, r4
 80102b8:	4628      	mov	r0, r5
 80102ba:	f000 fae3 	bl	8010884 <_sbrk_r>
 80102be:	1c43      	adds	r3, r0, #1
 80102c0:	d00a      	beq.n	80102d8 <sbrk_aligned+0x34>
 80102c2:	1cc4      	adds	r4, r0, #3
 80102c4:	f024 0403 	bic.w	r4, r4, #3
 80102c8:	42a0      	cmp	r0, r4
 80102ca:	d007      	beq.n	80102dc <sbrk_aligned+0x38>
 80102cc:	1a21      	subs	r1, r4, r0
 80102ce:	4628      	mov	r0, r5
 80102d0:	f000 fad8 	bl	8010884 <_sbrk_r>
 80102d4:	3001      	adds	r0, #1
 80102d6:	d101      	bne.n	80102dc <sbrk_aligned+0x38>
 80102d8:	f04f 34ff 	mov.w	r4, #4294967295
 80102dc:	4620      	mov	r0, r4
 80102de:	bd70      	pop	{r4, r5, r6, pc}
 80102e0:	20003634 	.word	0x20003634

080102e4 <_malloc_r>:
 80102e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80102e8:	1ccd      	adds	r5, r1, #3
 80102ea:	f025 0503 	bic.w	r5, r5, #3
 80102ee:	3508      	adds	r5, #8
 80102f0:	2d0c      	cmp	r5, #12
 80102f2:	bf38      	it	cc
 80102f4:	250c      	movcc	r5, #12
 80102f6:	2d00      	cmp	r5, #0
 80102f8:	4607      	mov	r7, r0
 80102fa:	db01      	blt.n	8010300 <_malloc_r+0x1c>
 80102fc:	42a9      	cmp	r1, r5
 80102fe:	d905      	bls.n	801030c <_malloc_r+0x28>
 8010300:	230c      	movs	r3, #12
 8010302:	603b      	str	r3, [r7, #0]
 8010304:	2600      	movs	r6, #0
 8010306:	4630      	mov	r0, r6
 8010308:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801030c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80103e0 <_malloc_r+0xfc>
 8010310:	f000 f868 	bl	80103e4 <__malloc_lock>
 8010314:	f8d8 3000 	ldr.w	r3, [r8]
 8010318:	461c      	mov	r4, r3
 801031a:	bb5c      	cbnz	r4, 8010374 <_malloc_r+0x90>
 801031c:	4629      	mov	r1, r5
 801031e:	4638      	mov	r0, r7
 8010320:	f7ff ffc0 	bl	80102a4 <sbrk_aligned>
 8010324:	1c43      	adds	r3, r0, #1
 8010326:	4604      	mov	r4, r0
 8010328:	d155      	bne.n	80103d6 <_malloc_r+0xf2>
 801032a:	f8d8 4000 	ldr.w	r4, [r8]
 801032e:	4626      	mov	r6, r4
 8010330:	2e00      	cmp	r6, #0
 8010332:	d145      	bne.n	80103c0 <_malloc_r+0xdc>
 8010334:	2c00      	cmp	r4, #0
 8010336:	d048      	beq.n	80103ca <_malloc_r+0xe6>
 8010338:	6823      	ldr	r3, [r4, #0]
 801033a:	4631      	mov	r1, r6
 801033c:	4638      	mov	r0, r7
 801033e:	eb04 0903 	add.w	r9, r4, r3
 8010342:	f000 fa9f 	bl	8010884 <_sbrk_r>
 8010346:	4581      	cmp	r9, r0
 8010348:	d13f      	bne.n	80103ca <_malloc_r+0xe6>
 801034a:	6821      	ldr	r1, [r4, #0]
 801034c:	1a6d      	subs	r5, r5, r1
 801034e:	4629      	mov	r1, r5
 8010350:	4638      	mov	r0, r7
 8010352:	f7ff ffa7 	bl	80102a4 <sbrk_aligned>
 8010356:	3001      	adds	r0, #1
 8010358:	d037      	beq.n	80103ca <_malloc_r+0xe6>
 801035a:	6823      	ldr	r3, [r4, #0]
 801035c:	442b      	add	r3, r5
 801035e:	6023      	str	r3, [r4, #0]
 8010360:	f8d8 3000 	ldr.w	r3, [r8]
 8010364:	2b00      	cmp	r3, #0
 8010366:	d038      	beq.n	80103da <_malloc_r+0xf6>
 8010368:	685a      	ldr	r2, [r3, #4]
 801036a:	42a2      	cmp	r2, r4
 801036c:	d12b      	bne.n	80103c6 <_malloc_r+0xe2>
 801036e:	2200      	movs	r2, #0
 8010370:	605a      	str	r2, [r3, #4]
 8010372:	e00f      	b.n	8010394 <_malloc_r+0xb0>
 8010374:	6822      	ldr	r2, [r4, #0]
 8010376:	1b52      	subs	r2, r2, r5
 8010378:	d41f      	bmi.n	80103ba <_malloc_r+0xd6>
 801037a:	2a0b      	cmp	r2, #11
 801037c:	d917      	bls.n	80103ae <_malloc_r+0xca>
 801037e:	1961      	adds	r1, r4, r5
 8010380:	42a3      	cmp	r3, r4
 8010382:	6025      	str	r5, [r4, #0]
 8010384:	bf18      	it	ne
 8010386:	6059      	strne	r1, [r3, #4]
 8010388:	6863      	ldr	r3, [r4, #4]
 801038a:	bf08      	it	eq
 801038c:	f8c8 1000 	streq.w	r1, [r8]
 8010390:	5162      	str	r2, [r4, r5]
 8010392:	604b      	str	r3, [r1, #4]
 8010394:	4638      	mov	r0, r7
 8010396:	f104 060b 	add.w	r6, r4, #11
 801039a:	f000 f829 	bl	80103f0 <__malloc_unlock>
 801039e:	f026 0607 	bic.w	r6, r6, #7
 80103a2:	1d23      	adds	r3, r4, #4
 80103a4:	1af2      	subs	r2, r6, r3
 80103a6:	d0ae      	beq.n	8010306 <_malloc_r+0x22>
 80103a8:	1b9b      	subs	r3, r3, r6
 80103aa:	50a3      	str	r3, [r4, r2]
 80103ac:	e7ab      	b.n	8010306 <_malloc_r+0x22>
 80103ae:	42a3      	cmp	r3, r4
 80103b0:	6862      	ldr	r2, [r4, #4]
 80103b2:	d1dd      	bne.n	8010370 <_malloc_r+0x8c>
 80103b4:	f8c8 2000 	str.w	r2, [r8]
 80103b8:	e7ec      	b.n	8010394 <_malloc_r+0xb0>
 80103ba:	4623      	mov	r3, r4
 80103bc:	6864      	ldr	r4, [r4, #4]
 80103be:	e7ac      	b.n	801031a <_malloc_r+0x36>
 80103c0:	4634      	mov	r4, r6
 80103c2:	6876      	ldr	r6, [r6, #4]
 80103c4:	e7b4      	b.n	8010330 <_malloc_r+0x4c>
 80103c6:	4613      	mov	r3, r2
 80103c8:	e7cc      	b.n	8010364 <_malloc_r+0x80>
 80103ca:	230c      	movs	r3, #12
 80103cc:	603b      	str	r3, [r7, #0]
 80103ce:	4638      	mov	r0, r7
 80103d0:	f000 f80e 	bl	80103f0 <__malloc_unlock>
 80103d4:	e797      	b.n	8010306 <_malloc_r+0x22>
 80103d6:	6025      	str	r5, [r4, #0]
 80103d8:	e7dc      	b.n	8010394 <_malloc_r+0xb0>
 80103da:	605b      	str	r3, [r3, #4]
 80103dc:	deff      	udf	#255	; 0xff
 80103de:	bf00      	nop
 80103e0:	20003630 	.word	0x20003630

080103e4 <__malloc_lock>:
 80103e4:	4801      	ldr	r0, [pc, #4]	; (80103ec <__malloc_lock+0x8>)
 80103e6:	f000 ba9a 	b.w	801091e <__retarget_lock_acquire_recursive>
 80103ea:	bf00      	nop
 80103ec:	20003778 	.word	0x20003778

080103f0 <__malloc_unlock>:
 80103f0:	4801      	ldr	r0, [pc, #4]	; (80103f8 <__malloc_unlock+0x8>)
 80103f2:	f000 ba95 	b.w	8010920 <__retarget_lock_release_recursive>
 80103f6:	bf00      	nop
 80103f8:	20003778 	.word	0x20003778

080103fc <std>:
 80103fc:	2300      	movs	r3, #0
 80103fe:	b510      	push	{r4, lr}
 8010400:	4604      	mov	r4, r0
 8010402:	e9c0 3300 	strd	r3, r3, [r0]
 8010406:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801040a:	6083      	str	r3, [r0, #8]
 801040c:	8181      	strh	r1, [r0, #12]
 801040e:	6643      	str	r3, [r0, #100]	; 0x64
 8010410:	81c2      	strh	r2, [r0, #14]
 8010412:	6183      	str	r3, [r0, #24]
 8010414:	4619      	mov	r1, r3
 8010416:	2208      	movs	r2, #8
 8010418:	305c      	adds	r0, #92	; 0x5c
 801041a:	f000 f9f7 	bl	801080c <memset>
 801041e:	4b0d      	ldr	r3, [pc, #52]	; (8010454 <std+0x58>)
 8010420:	6263      	str	r3, [r4, #36]	; 0x24
 8010422:	4b0d      	ldr	r3, [pc, #52]	; (8010458 <std+0x5c>)
 8010424:	62a3      	str	r3, [r4, #40]	; 0x28
 8010426:	4b0d      	ldr	r3, [pc, #52]	; (801045c <std+0x60>)
 8010428:	62e3      	str	r3, [r4, #44]	; 0x2c
 801042a:	4b0d      	ldr	r3, [pc, #52]	; (8010460 <std+0x64>)
 801042c:	6323      	str	r3, [r4, #48]	; 0x30
 801042e:	4b0d      	ldr	r3, [pc, #52]	; (8010464 <std+0x68>)
 8010430:	6224      	str	r4, [r4, #32]
 8010432:	429c      	cmp	r4, r3
 8010434:	d006      	beq.n	8010444 <std+0x48>
 8010436:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801043a:	4294      	cmp	r4, r2
 801043c:	d002      	beq.n	8010444 <std+0x48>
 801043e:	33d0      	adds	r3, #208	; 0xd0
 8010440:	429c      	cmp	r4, r3
 8010442:	d105      	bne.n	8010450 <std+0x54>
 8010444:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010448:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801044c:	f000 ba66 	b.w	801091c <__retarget_lock_init_recursive>
 8010450:	bd10      	pop	{r4, pc}
 8010452:	bf00      	nop
 8010454:	0801065d 	.word	0x0801065d
 8010458:	0801067f 	.word	0x0801067f
 801045c:	080106b7 	.word	0x080106b7
 8010460:	080106db 	.word	0x080106db
 8010464:	20003638 	.word	0x20003638

08010468 <stdio_exit_handler>:
 8010468:	4a02      	ldr	r2, [pc, #8]	; (8010474 <stdio_exit_handler+0xc>)
 801046a:	4903      	ldr	r1, [pc, #12]	; (8010478 <stdio_exit_handler+0x10>)
 801046c:	4803      	ldr	r0, [pc, #12]	; (801047c <stdio_exit_handler+0x14>)
 801046e:	f000 b869 	b.w	8010544 <_fwalk_sglue>
 8010472:	bf00      	nop
 8010474:	20001b10 	.word	0x20001b10
 8010478:	08011071 	.word	0x08011071
 801047c:	20001b1c 	.word	0x20001b1c

08010480 <cleanup_stdio>:
 8010480:	6841      	ldr	r1, [r0, #4]
 8010482:	4b0c      	ldr	r3, [pc, #48]	; (80104b4 <cleanup_stdio+0x34>)
 8010484:	4299      	cmp	r1, r3
 8010486:	b510      	push	{r4, lr}
 8010488:	4604      	mov	r4, r0
 801048a:	d001      	beq.n	8010490 <cleanup_stdio+0x10>
 801048c:	f000 fdf0 	bl	8011070 <_fflush_r>
 8010490:	68a1      	ldr	r1, [r4, #8]
 8010492:	4b09      	ldr	r3, [pc, #36]	; (80104b8 <cleanup_stdio+0x38>)
 8010494:	4299      	cmp	r1, r3
 8010496:	d002      	beq.n	801049e <cleanup_stdio+0x1e>
 8010498:	4620      	mov	r0, r4
 801049a:	f000 fde9 	bl	8011070 <_fflush_r>
 801049e:	68e1      	ldr	r1, [r4, #12]
 80104a0:	4b06      	ldr	r3, [pc, #24]	; (80104bc <cleanup_stdio+0x3c>)
 80104a2:	4299      	cmp	r1, r3
 80104a4:	d004      	beq.n	80104b0 <cleanup_stdio+0x30>
 80104a6:	4620      	mov	r0, r4
 80104a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80104ac:	f000 bde0 	b.w	8011070 <_fflush_r>
 80104b0:	bd10      	pop	{r4, pc}
 80104b2:	bf00      	nop
 80104b4:	20003638 	.word	0x20003638
 80104b8:	200036a0 	.word	0x200036a0
 80104bc:	20003708 	.word	0x20003708

080104c0 <global_stdio_init.part.0>:
 80104c0:	b510      	push	{r4, lr}
 80104c2:	4b0b      	ldr	r3, [pc, #44]	; (80104f0 <global_stdio_init.part.0+0x30>)
 80104c4:	4c0b      	ldr	r4, [pc, #44]	; (80104f4 <global_stdio_init.part.0+0x34>)
 80104c6:	4a0c      	ldr	r2, [pc, #48]	; (80104f8 <global_stdio_init.part.0+0x38>)
 80104c8:	601a      	str	r2, [r3, #0]
 80104ca:	4620      	mov	r0, r4
 80104cc:	2200      	movs	r2, #0
 80104ce:	2104      	movs	r1, #4
 80104d0:	f7ff ff94 	bl	80103fc <std>
 80104d4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80104d8:	2201      	movs	r2, #1
 80104da:	2109      	movs	r1, #9
 80104dc:	f7ff ff8e 	bl	80103fc <std>
 80104e0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80104e4:	2202      	movs	r2, #2
 80104e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80104ea:	2112      	movs	r1, #18
 80104ec:	f7ff bf86 	b.w	80103fc <std>
 80104f0:	20003770 	.word	0x20003770
 80104f4:	20003638 	.word	0x20003638
 80104f8:	08010469 	.word	0x08010469

080104fc <__sfp_lock_acquire>:
 80104fc:	4801      	ldr	r0, [pc, #4]	; (8010504 <__sfp_lock_acquire+0x8>)
 80104fe:	f000 ba0e 	b.w	801091e <__retarget_lock_acquire_recursive>
 8010502:	bf00      	nop
 8010504:	20003779 	.word	0x20003779

08010508 <__sfp_lock_release>:
 8010508:	4801      	ldr	r0, [pc, #4]	; (8010510 <__sfp_lock_release+0x8>)
 801050a:	f000 ba09 	b.w	8010920 <__retarget_lock_release_recursive>
 801050e:	bf00      	nop
 8010510:	20003779 	.word	0x20003779

08010514 <__sinit>:
 8010514:	b510      	push	{r4, lr}
 8010516:	4604      	mov	r4, r0
 8010518:	f7ff fff0 	bl	80104fc <__sfp_lock_acquire>
 801051c:	6a23      	ldr	r3, [r4, #32]
 801051e:	b11b      	cbz	r3, 8010528 <__sinit+0x14>
 8010520:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010524:	f7ff bff0 	b.w	8010508 <__sfp_lock_release>
 8010528:	4b04      	ldr	r3, [pc, #16]	; (801053c <__sinit+0x28>)
 801052a:	6223      	str	r3, [r4, #32]
 801052c:	4b04      	ldr	r3, [pc, #16]	; (8010540 <__sinit+0x2c>)
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	2b00      	cmp	r3, #0
 8010532:	d1f5      	bne.n	8010520 <__sinit+0xc>
 8010534:	f7ff ffc4 	bl	80104c0 <global_stdio_init.part.0>
 8010538:	e7f2      	b.n	8010520 <__sinit+0xc>
 801053a:	bf00      	nop
 801053c:	08010481 	.word	0x08010481
 8010540:	20003770 	.word	0x20003770

08010544 <_fwalk_sglue>:
 8010544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010548:	4607      	mov	r7, r0
 801054a:	4688      	mov	r8, r1
 801054c:	4614      	mov	r4, r2
 801054e:	2600      	movs	r6, #0
 8010550:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010554:	f1b9 0901 	subs.w	r9, r9, #1
 8010558:	d505      	bpl.n	8010566 <_fwalk_sglue+0x22>
 801055a:	6824      	ldr	r4, [r4, #0]
 801055c:	2c00      	cmp	r4, #0
 801055e:	d1f7      	bne.n	8010550 <_fwalk_sglue+0xc>
 8010560:	4630      	mov	r0, r6
 8010562:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010566:	89ab      	ldrh	r3, [r5, #12]
 8010568:	2b01      	cmp	r3, #1
 801056a:	d907      	bls.n	801057c <_fwalk_sglue+0x38>
 801056c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010570:	3301      	adds	r3, #1
 8010572:	d003      	beq.n	801057c <_fwalk_sglue+0x38>
 8010574:	4629      	mov	r1, r5
 8010576:	4638      	mov	r0, r7
 8010578:	47c0      	blx	r8
 801057a:	4306      	orrs	r6, r0
 801057c:	3568      	adds	r5, #104	; 0x68
 801057e:	e7e9      	b.n	8010554 <_fwalk_sglue+0x10>

08010580 <iprintf>:
 8010580:	b40f      	push	{r0, r1, r2, r3}
 8010582:	b507      	push	{r0, r1, r2, lr}
 8010584:	4906      	ldr	r1, [pc, #24]	; (80105a0 <iprintf+0x20>)
 8010586:	ab04      	add	r3, sp, #16
 8010588:	6808      	ldr	r0, [r1, #0]
 801058a:	f853 2b04 	ldr.w	r2, [r3], #4
 801058e:	6881      	ldr	r1, [r0, #8]
 8010590:	9301      	str	r3, [sp, #4]
 8010592:	f000 fa3d 	bl	8010a10 <_vfiprintf_r>
 8010596:	b003      	add	sp, #12
 8010598:	f85d eb04 	ldr.w	lr, [sp], #4
 801059c:	b004      	add	sp, #16
 801059e:	4770      	bx	lr
 80105a0:	20001b68 	.word	0x20001b68

080105a4 <_puts_r>:
 80105a4:	6a03      	ldr	r3, [r0, #32]
 80105a6:	b570      	push	{r4, r5, r6, lr}
 80105a8:	6884      	ldr	r4, [r0, #8]
 80105aa:	4605      	mov	r5, r0
 80105ac:	460e      	mov	r6, r1
 80105ae:	b90b      	cbnz	r3, 80105b4 <_puts_r+0x10>
 80105b0:	f7ff ffb0 	bl	8010514 <__sinit>
 80105b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80105b6:	07db      	lsls	r3, r3, #31
 80105b8:	d405      	bmi.n	80105c6 <_puts_r+0x22>
 80105ba:	89a3      	ldrh	r3, [r4, #12]
 80105bc:	0598      	lsls	r0, r3, #22
 80105be:	d402      	bmi.n	80105c6 <_puts_r+0x22>
 80105c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80105c2:	f000 f9ac 	bl	801091e <__retarget_lock_acquire_recursive>
 80105c6:	89a3      	ldrh	r3, [r4, #12]
 80105c8:	0719      	lsls	r1, r3, #28
 80105ca:	d513      	bpl.n	80105f4 <_puts_r+0x50>
 80105cc:	6923      	ldr	r3, [r4, #16]
 80105ce:	b18b      	cbz	r3, 80105f4 <_puts_r+0x50>
 80105d0:	3e01      	subs	r6, #1
 80105d2:	68a3      	ldr	r3, [r4, #8]
 80105d4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80105d8:	3b01      	subs	r3, #1
 80105da:	60a3      	str	r3, [r4, #8]
 80105dc:	b9e9      	cbnz	r1, 801061a <_puts_r+0x76>
 80105de:	2b00      	cmp	r3, #0
 80105e0:	da2e      	bge.n	8010640 <_puts_r+0x9c>
 80105e2:	4622      	mov	r2, r4
 80105e4:	210a      	movs	r1, #10
 80105e6:	4628      	mov	r0, r5
 80105e8:	f000 f87b 	bl	80106e2 <__swbuf_r>
 80105ec:	3001      	adds	r0, #1
 80105ee:	d007      	beq.n	8010600 <_puts_r+0x5c>
 80105f0:	250a      	movs	r5, #10
 80105f2:	e007      	b.n	8010604 <_puts_r+0x60>
 80105f4:	4621      	mov	r1, r4
 80105f6:	4628      	mov	r0, r5
 80105f8:	f000 f8b0 	bl	801075c <__swsetup_r>
 80105fc:	2800      	cmp	r0, #0
 80105fe:	d0e7      	beq.n	80105d0 <_puts_r+0x2c>
 8010600:	f04f 35ff 	mov.w	r5, #4294967295
 8010604:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010606:	07da      	lsls	r2, r3, #31
 8010608:	d405      	bmi.n	8010616 <_puts_r+0x72>
 801060a:	89a3      	ldrh	r3, [r4, #12]
 801060c:	059b      	lsls	r3, r3, #22
 801060e:	d402      	bmi.n	8010616 <_puts_r+0x72>
 8010610:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010612:	f000 f985 	bl	8010920 <__retarget_lock_release_recursive>
 8010616:	4628      	mov	r0, r5
 8010618:	bd70      	pop	{r4, r5, r6, pc}
 801061a:	2b00      	cmp	r3, #0
 801061c:	da04      	bge.n	8010628 <_puts_r+0x84>
 801061e:	69a2      	ldr	r2, [r4, #24]
 8010620:	429a      	cmp	r2, r3
 8010622:	dc06      	bgt.n	8010632 <_puts_r+0x8e>
 8010624:	290a      	cmp	r1, #10
 8010626:	d004      	beq.n	8010632 <_puts_r+0x8e>
 8010628:	6823      	ldr	r3, [r4, #0]
 801062a:	1c5a      	adds	r2, r3, #1
 801062c:	6022      	str	r2, [r4, #0]
 801062e:	7019      	strb	r1, [r3, #0]
 8010630:	e7cf      	b.n	80105d2 <_puts_r+0x2e>
 8010632:	4622      	mov	r2, r4
 8010634:	4628      	mov	r0, r5
 8010636:	f000 f854 	bl	80106e2 <__swbuf_r>
 801063a:	3001      	adds	r0, #1
 801063c:	d1c9      	bne.n	80105d2 <_puts_r+0x2e>
 801063e:	e7df      	b.n	8010600 <_puts_r+0x5c>
 8010640:	6823      	ldr	r3, [r4, #0]
 8010642:	250a      	movs	r5, #10
 8010644:	1c5a      	adds	r2, r3, #1
 8010646:	6022      	str	r2, [r4, #0]
 8010648:	701d      	strb	r5, [r3, #0]
 801064a:	e7db      	b.n	8010604 <_puts_r+0x60>

0801064c <puts>:
 801064c:	4b02      	ldr	r3, [pc, #8]	; (8010658 <puts+0xc>)
 801064e:	4601      	mov	r1, r0
 8010650:	6818      	ldr	r0, [r3, #0]
 8010652:	f7ff bfa7 	b.w	80105a4 <_puts_r>
 8010656:	bf00      	nop
 8010658:	20001b68 	.word	0x20001b68

0801065c <__sread>:
 801065c:	b510      	push	{r4, lr}
 801065e:	460c      	mov	r4, r1
 8010660:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010664:	f000 f8fc 	bl	8010860 <_read_r>
 8010668:	2800      	cmp	r0, #0
 801066a:	bfab      	itete	ge
 801066c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801066e:	89a3      	ldrhlt	r3, [r4, #12]
 8010670:	181b      	addge	r3, r3, r0
 8010672:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010676:	bfac      	ite	ge
 8010678:	6563      	strge	r3, [r4, #84]	; 0x54
 801067a:	81a3      	strhlt	r3, [r4, #12]
 801067c:	bd10      	pop	{r4, pc}

0801067e <__swrite>:
 801067e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010682:	461f      	mov	r7, r3
 8010684:	898b      	ldrh	r3, [r1, #12]
 8010686:	05db      	lsls	r3, r3, #23
 8010688:	4605      	mov	r5, r0
 801068a:	460c      	mov	r4, r1
 801068c:	4616      	mov	r6, r2
 801068e:	d505      	bpl.n	801069c <__swrite+0x1e>
 8010690:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010694:	2302      	movs	r3, #2
 8010696:	2200      	movs	r2, #0
 8010698:	f000 f8d0 	bl	801083c <_lseek_r>
 801069c:	89a3      	ldrh	r3, [r4, #12]
 801069e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80106a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80106a6:	81a3      	strh	r3, [r4, #12]
 80106a8:	4632      	mov	r2, r6
 80106aa:	463b      	mov	r3, r7
 80106ac:	4628      	mov	r0, r5
 80106ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80106b2:	f000 b8f7 	b.w	80108a4 <_write_r>

080106b6 <__sseek>:
 80106b6:	b510      	push	{r4, lr}
 80106b8:	460c      	mov	r4, r1
 80106ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80106be:	f000 f8bd 	bl	801083c <_lseek_r>
 80106c2:	1c43      	adds	r3, r0, #1
 80106c4:	89a3      	ldrh	r3, [r4, #12]
 80106c6:	bf15      	itete	ne
 80106c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80106ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80106ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80106d2:	81a3      	strheq	r3, [r4, #12]
 80106d4:	bf18      	it	ne
 80106d6:	81a3      	strhne	r3, [r4, #12]
 80106d8:	bd10      	pop	{r4, pc}

080106da <__sclose>:
 80106da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80106de:	f000 b89d 	b.w	801081c <_close_r>

080106e2 <__swbuf_r>:
 80106e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106e4:	460e      	mov	r6, r1
 80106e6:	4614      	mov	r4, r2
 80106e8:	4605      	mov	r5, r0
 80106ea:	b118      	cbz	r0, 80106f4 <__swbuf_r+0x12>
 80106ec:	6a03      	ldr	r3, [r0, #32]
 80106ee:	b90b      	cbnz	r3, 80106f4 <__swbuf_r+0x12>
 80106f0:	f7ff ff10 	bl	8010514 <__sinit>
 80106f4:	69a3      	ldr	r3, [r4, #24]
 80106f6:	60a3      	str	r3, [r4, #8]
 80106f8:	89a3      	ldrh	r3, [r4, #12]
 80106fa:	071a      	lsls	r2, r3, #28
 80106fc:	d525      	bpl.n	801074a <__swbuf_r+0x68>
 80106fe:	6923      	ldr	r3, [r4, #16]
 8010700:	b31b      	cbz	r3, 801074a <__swbuf_r+0x68>
 8010702:	6823      	ldr	r3, [r4, #0]
 8010704:	6922      	ldr	r2, [r4, #16]
 8010706:	1a98      	subs	r0, r3, r2
 8010708:	6963      	ldr	r3, [r4, #20]
 801070a:	b2f6      	uxtb	r6, r6
 801070c:	4283      	cmp	r3, r0
 801070e:	4637      	mov	r7, r6
 8010710:	dc04      	bgt.n	801071c <__swbuf_r+0x3a>
 8010712:	4621      	mov	r1, r4
 8010714:	4628      	mov	r0, r5
 8010716:	f000 fcab 	bl	8011070 <_fflush_r>
 801071a:	b9e0      	cbnz	r0, 8010756 <__swbuf_r+0x74>
 801071c:	68a3      	ldr	r3, [r4, #8]
 801071e:	3b01      	subs	r3, #1
 8010720:	60a3      	str	r3, [r4, #8]
 8010722:	6823      	ldr	r3, [r4, #0]
 8010724:	1c5a      	adds	r2, r3, #1
 8010726:	6022      	str	r2, [r4, #0]
 8010728:	701e      	strb	r6, [r3, #0]
 801072a:	6962      	ldr	r2, [r4, #20]
 801072c:	1c43      	adds	r3, r0, #1
 801072e:	429a      	cmp	r2, r3
 8010730:	d004      	beq.n	801073c <__swbuf_r+0x5a>
 8010732:	89a3      	ldrh	r3, [r4, #12]
 8010734:	07db      	lsls	r3, r3, #31
 8010736:	d506      	bpl.n	8010746 <__swbuf_r+0x64>
 8010738:	2e0a      	cmp	r6, #10
 801073a:	d104      	bne.n	8010746 <__swbuf_r+0x64>
 801073c:	4621      	mov	r1, r4
 801073e:	4628      	mov	r0, r5
 8010740:	f000 fc96 	bl	8011070 <_fflush_r>
 8010744:	b938      	cbnz	r0, 8010756 <__swbuf_r+0x74>
 8010746:	4638      	mov	r0, r7
 8010748:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801074a:	4621      	mov	r1, r4
 801074c:	4628      	mov	r0, r5
 801074e:	f000 f805 	bl	801075c <__swsetup_r>
 8010752:	2800      	cmp	r0, #0
 8010754:	d0d5      	beq.n	8010702 <__swbuf_r+0x20>
 8010756:	f04f 37ff 	mov.w	r7, #4294967295
 801075a:	e7f4      	b.n	8010746 <__swbuf_r+0x64>

0801075c <__swsetup_r>:
 801075c:	b538      	push	{r3, r4, r5, lr}
 801075e:	4b2a      	ldr	r3, [pc, #168]	; (8010808 <__swsetup_r+0xac>)
 8010760:	4605      	mov	r5, r0
 8010762:	6818      	ldr	r0, [r3, #0]
 8010764:	460c      	mov	r4, r1
 8010766:	b118      	cbz	r0, 8010770 <__swsetup_r+0x14>
 8010768:	6a03      	ldr	r3, [r0, #32]
 801076a:	b90b      	cbnz	r3, 8010770 <__swsetup_r+0x14>
 801076c:	f7ff fed2 	bl	8010514 <__sinit>
 8010770:	89a3      	ldrh	r3, [r4, #12]
 8010772:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010776:	0718      	lsls	r0, r3, #28
 8010778:	d422      	bmi.n	80107c0 <__swsetup_r+0x64>
 801077a:	06d9      	lsls	r1, r3, #27
 801077c:	d407      	bmi.n	801078e <__swsetup_r+0x32>
 801077e:	2309      	movs	r3, #9
 8010780:	602b      	str	r3, [r5, #0]
 8010782:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010786:	81a3      	strh	r3, [r4, #12]
 8010788:	f04f 30ff 	mov.w	r0, #4294967295
 801078c:	e034      	b.n	80107f8 <__swsetup_r+0x9c>
 801078e:	0758      	lsls	r0, r3, #29
 8010790:	d512      	bpl.n	80107b8 <__swsetup_r+0x5c>
 8010792:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010794:	b141      	cbz	r1, 80107a8 <__swsetup_r+0x4c>
 8010796:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801079a:	4299      	cmp	r1, r3
 801079c:	d002      	beq.n	80107a4 <__swsetup_r+0x48>
 801079e:	4628      	mov	r0, r5
 80107a0:	f000 f8c0 	bl	8010924 <_free_r>
 80107a4:	2300      	movs	r3, #0
 80107a6:	6363      	str	r3, [r4, #52]	; 0x34
 80107a8:	89a3      	ldrh	r3, [r4, #12]
 80107aa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80107ae:	81a3      	strh	r3, [r4, #12]
 80107b0:	2300      	movs	r3, #0
 80107b2:	6063      	str	r3, [r4, #4]
 80107b4:	6923      	ldr	r3, [r4, #16]
 80107b6:	6023      	str	r3, [r4, #0]
 80107b8:	89a3      	ldrh	r3, [r4, #12]
 80107ba:	f043 0308 	orr.w	r3, r3, #8
 80107be:	81a3      	strh	r3, [r4, #12]
 80107c0:	6923      	ldr	r3, [r4, #16]
 80107c2:	b94b      	cbnz	r3, 80107d8 <__swsetup_r+0x7c>
 80107c4:	89a3      	ldrh	r3, [r4, #12]
 80107c6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80107ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80107ce:	d003      	beq.n	80107d8 <__swsetup_r+0x7c>
 80107d0:	4621      	mov	r1, r4
 80107d2:	4628      	mov	r0, r5
 80107d4:	f000 fc9a 	bl	801110c <__smakebuf_r>
 80107d8:	89a0      	ldrh	r0, [r4, #12]
 80107da:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80107de:	f010 0301 	ands.w	r3, r0, #1
 80107e2:	d00a      	beq.n	80107fa <__swsetup_r+0x9e>
 80107e4:	2300      	movs	r3, #0
 80107e6:	60a3      	str	r3, [r4, #8]
 80107e8:	6963      	ldr	r3, [r4, #20]
 80107ea:	425b      	negs	r3, r3
 80107ec:	61a3      	str	r3, [r4, #24]
 80107ee:	6923      	ldr	r3, [r4, #16]
 80107f0:	b943      	cbnz	r3, 8010804 <__swsetup_r+0xa8>
 80107f2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80107f6:	d1c4      	bne.n	8010782 <__swsetup_r+0x26>
 80107f8:	bd38      	pop	{r3, r4, r5, pc}
 80107fa:	0781      	lsls	r1, r0, #30
 80107fc:	bf58      	it	pl
 80107fe:	6963      	ldrpl	r3, [r4, #20]
 8010800:	60a3      	str	r3, [r4, #8]
 8010802:	e7f4      	b.n	80107ee <__swsetup_r+0x92>
 8010804:	2000      	movs	r0, #0
 8010806:	e7f7      	b.n	80107f8 <__swsetup_r+0x9c>
 8010808:	20001b68 	.word	0x20001b68

0801080c <memset>:
 801080c:	4402      	add	r2, r0
 801080e:	4603      	mov	r3, r0
 8010810:	4293      	cmp	r3, r2
 8010812:	d100      	bne.n	8010816 <memset+0xa>
 8010814:	4770      	bx	lr
 8010816:	f803 1b01 	strb.w	r1, [r3], #1
 801081a:	e7f9      	b.n	8010810 <memset+0x4>

0801081c <_close_r>:
 801081c:	b538      	push	{r3, r4, r5, lr}
 801081e:	4d06      	ldr	r5, [pc, #24]	; (8010838 <_close_r+0x1c>)
 8010820:	2300      	movs	r3, #0
 8010822:	4604      	mov	r4, r0
 8010824:	4608      	mov	r0, r1
 8010826:	602b      	str	r3, [r5, #0]
 8010828:	f000 fe4a 	bl	80114c0 <_close>
 801082c:	1c43      	adds	r3, r0, #1
 801082e:	d102      	bne.n	8010836 <_close_r+0x1a>
 8010830:	682b      	ldr	r3, [r5, #0]
 8010832:	b103      	cbz	r3, 8010836 <_close_r+0x1a>
 8010834:	6023      	str	r3, [r4, #0]
 8010836:	bd38      	pop	{r3, r4, r5, pc}
 8010838:	20003774 	.word	0x20003774

0801083c <_lseek_r>:
 801083c:	b538      	push	{r3, r4, r5, lr}
 801083e:	4d07      	ldr	r5, [pc, #28]	; (801085c <_lseek_r+0x20>)
 8010840:	4604      	mov	r4, r0
 8010842:	4608      	mov	r0, r1
 8010844:	4611      	mov	r1, r2
 8010846:	2200      	movs	r2, #0
 8010848:	602a      	str	r2, [r5, #0]
 801084a:	461a      	mov	r2, r3
 801084c:	f000 fe50 	bl	80114f0 <_lseek>
 8010850:	1c43      	adds	r3, r0, #1
 8010852:	d102      	bne.n	801085a <_lseek_r+0x1e>
 8010854:	682b      	ldr	r3, [r5, #0]
 8010856:	b103      	cbz	r3, 801085a <_lseek_r+0x1e>
 8010858:	6023      	str	r3, [r4, #0]
 801085a:	bd38      	pop	{r3, r4, r5, pc}
 801085c:	20003774 	.word	0x20003774

08010860 <_read_r>:
 8010860:	b538      	push	{r3, r4, r5, lr}
 8010862:	4d07      	ldr	r5, [pc, #28]	; (8010880 <_read_r+0x20>)
 8010864:	4604      	mov	r4, r0
 8010866:	4608      	mov	r0, r1
 8010868:	4611      	mov	r1, r2
 801086a:	2200      	movs	r2, #0
 801086c:	602a      	str	r2, [r5, #0]
 801086e:	461a      	mov	r2, r3
 8010870:	f000 fe46 	bl	8011500 <_read>
 8010874:	1c43      	adds	r3, r0, #1
 8010876:	d102      	bne.n	801087e <_read_r+0x1e>
 8010878:	682b      	ldr	r3, [r5, #0]
 801087a:	b103      	cbz	r3, 801087e <_read_r+0x1e>
 801087c:	6023      	str	r3, [r4, #0]
 801087e:	bd38      	pop	{r3, r4, r5, pc}
 8010880:	20003774 	.word	0x20003774

08010884 <_sbrk_r>:
 8010884:	b538      	push	{r3, r4, r5, lr}
 8010886:	4d06      	ldr	r5, [pc, #24]	; (80108a0 <_sbrk_r+0x1c>)
 8010888:	2300      	movs	r3, #0
 801088a:	4604      	mov	r4, r0
 801088c:	4608      	mov	r0, r1
 801088e:	602b      	str	r3, [r5, #0]
 8010890:	f7f7 fee4 	bl	800865c <_sbrk>
 8010894:	1c43      	adds	r3, r0, #1
 8010896:	d102      	bne.n	801089e <_sbrk_r+0x1a>
 8010898:	682b      	ldr	r3, [r5, #0]
 801089a:	b103      	cbz	r3, 801089e <_sbrk_r+0x1a>
 801089c:	6023      	str	r3, [r4, #0]
 801089e:	bd38      	pop	{r3, r4, r5, pc}
 80108a0:	20003774 	.word	0x20003774

080108a4 <_write_r>:
 80108a4:	b538      	push	{r3, r4, r5, lr}
 80108a6:	4d07      	ldr	r5, [pc, #28]	; (80108c4 <_write_r+0x20>)
 80108a8:	4604      	mov	r4, r0
 80108aa:	4608      	mov	r0, r1
 80108ac:	4611      	mov	r1, r2
 80108ae:	2200      	movs	r2, #0
 80108b0:	602a      	str	r2, [r5, #0]
 80108b2:	461a      	mov	r2, r3
 80108b4:	f000 fe2c 	bl	8011510 <_write>
 80108b8:	1c43      	adds	r3, r0, #1
 80108ba:	d102      	bne.n	80108c2 <_write_r+0x1e>
 80108bc:	682b      	ldr	r3, [r5, #0]
 80108be:	b103      	cbz	r3, 80108c2 <_write_r+0x1e>
 80108c0:	6023      	str	r3, [r4, #0]
 80108c2:	bd38      	pop	{r3, r4, r5, pc}
 80108c4:	20003774 	.word	0x20003774

080108c8 <__errno>:
 80108c8:	4b01      	ldr	r3, [pc, #4]	; (80108d0 <__errno+0x8>)
 80108ca:	6818      	ldr	r0, [r3, #0]
 80108cc:	4770      	bx	lr
 80108ce:	bf00      	nop
 80108d0:	20001b68 	.word	0x20001b68

080108d4 <__libc_init_array>:
 80108d4:	b570      	push	{r4, r5, r6, lr}
 80108d6:	4d0d      	ldr	r5, [pc, #52]	; (801090c <__libc_init_array+0x38>)
 80108d8:	4c0d      	ldr	r4, [pc, #52]	; (8010910 <__libc_init_array+0x3c>)
 80108da:	1b64      	subs	r4, r4, r5
 80108dc:	10a4      	asrs	r4, r4, #2
 80108de:	2600      	movs	r6, #0
 80108e0:	42a6      	cmp	r6, r4
 80108e2:	d109      	bne.n	80108f8 <__libc_init_array+0x24>
 80108e4:	4d0b      	ldr	r5, [pc, #44]	; (8010914 <__libc_init_array+0x40>)
 80108e6:	4c0c      	ldr	r4, [pc, #48]	; (8010918 <__libc_init_array+0x44>)
 80108e8:	f000 fe1a 	bl	8011520 <_init>
 80108ec:	1b64      	subs	r4, r4, r5
 80108ee:	10a4      	asrs	r4, r4, #2
 80108f0:	2600      	movs	r6, #0
 80108f2:	42a6      	cmp	r6, r4
 80108f4:	d105      	bne.n	8010902 <__libc_init_array+0x2e>
 80108f6:	bd70      	pop	{r4, r5, r6, pc}
 80108f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80108fc:	4798      	blx	r3
 80108fe:	3601      	adds	r6, #1
 8010900:	e7ee      	b.n	80108e0 <__libc_init_array+0xc>
 8010902:	f855 3b04 	ldr.w	r3, [r5], #4
 8010906:	4798      	blx	r3
 8010908:	3601      	adds	r6, #1
 801090a:	e7f2      	b.n	80108f2 <__libc_init_array+0x1e>
 801090c:	0801c92c 	.word	0x0801c92c
 8010910:	0801c92c 	.word	0x0801c92c
 8010914:	0801c92c 	.word	0x0801c92c
 8010918:	0801c930 	.word	0x0801c930

0801091c <__retarget_lock_init_recursive>:
 801091c:	4770      	bx	lr

0801091e <__retarget_lock_acquire_recursive>:
 801091e:	4770      	bx	lr

08010920 <__retarget_lock_release_recursive>:
 8010920:	4770      	bx	lr
	...

08010924 <_free_r>:
 8010924:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010926:	2900      	cmp	r1, #0
 8010928:	d044      	beq.n	80109b4 <_free_r+0x90>
 801092a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801092e:	9001      	str	r0, [sp, #4]
 8010930:	2b00      	cmp	r3, #0
 8010932:	f1a1 0404 	sub.w	r4, r1, #4
 8010936:	bfb8      	it	lt
 8010938:	18e4      	addlt	r4, r4, r3
 801093a:	f7ff fd53 	bl	80103e4 <__malloc_lock>
 801093e:	4a1e      	ldr	r2, [pc, #120]	; (80109b8 <_free_r+0x94>)
 8010940:	9801      	ldr	r0, [sp, #4]
 8010942:	6813      	ldr	r3, [r2, #0]
 8010944:	b933      	cbnz	r3, 8010954 <_free_r+0x30>
 8010946:	6063      	str	r3, [r4, #4]
 8010948:	6014      	str	r4, [r2, #0]
 801094a:	b003      	add	sp, #12
 801094c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010950:	f7ff bd4e 	b.w	80103f0 <__malloc_unlock>
 8010954:	42a3      	cmp	r3, r4
 8010956:	d908      	bls.n	801096a <_free_r+0x46>
 8010958:	6825      	ldr	r5, [r4, #0]
 801095a:	1961      	adds	r1, r4, r5
 801095c:	428b      	cmp	r3, r1
 801095e:	bf01      	itttt	eq
 8010960:	6819      	ldreq	r1, [r3, #0]
 8010962:	685b      	ldreq	r3, [r3, #4]
 8010964:	1949      	addeq	r1, r1, r5
 8010966:	6021      	streq	r1, [r4, #0]
 8010968:	e7ed      	b.n	8010946 <_free_r+0x22>
 801096a:	461a      	mov	r2, r3
 801096c:	685b      	ldr	r3, [r3, #4]
 801096e:	b10b      	cbz	r3, 8010974 <_free_r+0x50>
 8010970:	42a3      	cmp	r3, r4
 8010972:	d9fa      	bls.n	801096a <_free_r+0x46>
 8010974:	6811      	ldr	r1, [r2, #0]
 8010976:	1855      	adds	r5, r2, r1
 8010978:	42a5      	cmp	r5, r4
 801097a:	d10b      	bne.n	8010994 <_free_r+0x70>
 801097c:	6824      	ldr	r4, [r4, #0]
 801097e:	4421      	add	r1, r4
 8010980:	1854      	adds	r4, r2, r1
 8010982:	42a3      	cmp	r3, r4
 8010984:	6011      	str	r1, [r2, #0]
 8010986:	d1e0      	bne.n	801094a <_free_r+0x26>
 8010988:	681c      	ldr	r4, [r3, #0]
 801098a:	685b      	ldr	r3, [r3, #4]
 801098c:	6053      	str	r3, [r2, #4]
 801098e:	440c      	add	r4, r1
 8010990:	6014      	str	r4, [r2, #0]
 8010992:	e7da      	b.n	801094a <_free_r+0x26>
 8010994:	d902      	bls.n	801099c <_free_r+0x78>
 8010996:	230c      	movs	r3, #12
 8010998:	6003      	str	r3, [r0, #0]
 801099a:	e7d6      	b.n	801094a <_free_r+0x26>
 801099c:	6825      	ldr	r5, [r4, #0]
 801099e:	1961      	adds	r1, r4, r5
 80109a0:	428b      	cmp	r3, r1
 80109a2:	bf04      	itt	eq
 80109a4:	6819      	ldreq	r1, [r3, #0]
 80109a6:	685b      	ldreq	r3, [r3, #4]
 80109a8:	6063      	str	r3, [r4, #4]
 80109aa:	bf04      	itt	eq
 80109ac:	1949      	addeq	r1, r1, r5
 80109ae:	6021      	streq	r1, [r4, #0]
 80109b0:	6054      	str	r4, [r2, #4]
 80109b2:	e7ca      	b.n	801094a <_free_r+0x26>
 80109b4:	b003      	add	sp, #12
 80109b6:	bd30      	pop	{r4, r5, pc}
 80109b8:	20003630 	.word	0x20003630

080109bc <__sfputc_r>:
 80109bc:	6893      	ldr	r3, [r2, #8]
 80109be:	3b01      	subs	r3, #1
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	b410      	push	{r4}
 80109c4:	6093      	str	r3, [r2, #8]
 80109c6:	da08      	bge.n	80109da <__sfputc_r+0x1e>
 80109c8:	6994      	ldr	r4, [r2, #24]
 80109ca:	42a3      	cmp	r3, r4
 80109cc:	db01      	blt.n	80109d2 <__sfputc_r+0x16>
 80109ce:	290a      	cmp	r1, #10
 80109d0:	d103      	bne.n	80109da <__sfputc_r+0x1e>
 80109d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80109d6:	f7ff be84 	b.w	80106e2 <__swbuf_r>
 80109da:	6813      	ldr	r3, [r2, #0]
 80109dc:	1c58      	adds	r0, r3, #1
 80109de:	6010      	str	r0, [r2, #0]
 80109e0:	7019      	strb	r1, [r3, #0]
 80109e2:	4608      	mov	r0, r1
 80109e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80109e8:	4770      	bx	lr

080109ea <__sfputs_r>:
 80109ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109ec:	4606      	mov	r6, r0
 80109ee:	460f      	mov	r7, r1
 80109f0:	4614      	mov	r4, r2
 80109f2:	18d5      	adds	r5, r2, r3
 80109f4:	42ac      	cmp	r4, r5
 80109f6:	d101      	bne.n	80109fc <__sfputs_r+0x12>
 80109f8:	2000      	movs	r0, #0
 80109fa:	e007      	b.n	8010a0c <__sfputs_r+0x22>
 80109fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010a00:	463a      	mov	r2, r7
 8010a02:	4630      	mov	r0, r6
 8010a04:	f7ff ffda 	bl	80109bc <__sfputc_r>
 8010a08:	1c43      	adds	r3, r0, #1
 8010a0a:	d1f3      	bne.n	80109f4 <__sfputs_r+0xa>
 8010a0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010a10 <_vfiprintf_r>:
 8010a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a14:	460d      	mov	r5, r1
 8010a16:	b09d      	sub	sp, #116	; 0x74
 8010a18:	4614      	mov	r4, r2
 8010a1a:	4698      	mov	r8, r3
 8010a1c:	4606      	mov	r6, r0
 8010a1e:	b118      	cbz	r0, 8010a28 <_vfiprintf_r+0x18>
 8010a20:	6a03      	ldr	r3, [r0, #32]
 8010a22:	b90b      	cbnz	r3, 8010a28 <_vfiprintf_r+0x18>
 8010a24:	f7ff fd76 	bl	8010514 <__sinit>
 8010a28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010a2a:	07d9      	lsls	r1, r3, #31
 8010a2c:	d405      	bmi.n	8010a3a <_vfiprintf_r+0x2a>
 8010a2e:	89ab      	ldrh	r3, [r5, #12]
 8010a30:	059a      	lsls	r2, r3, #22
 8010a32:	d402      	bmi.n	8010a3a <_vfiprintf_r+0x2a>
 8010a34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010a36:	f7ff ff72 	bl	801091e <__retarget_lock_acquire_recursive>
 8010a3a:	89ab      	ldrh	r3, [r5, #12]
 8010a3c:	071b      	lsls	r3, r3, #28
 8010a3e:	d501      	bpl.n	8010a44 <_vfiprintf_r+0x34>
 8010a40:	692b      	ldr	r3, [r5, #16]
 8010a42:	b99b      	cbnz	r3, 8010a6c <_vfiprintf_r+0x5c>
 8010a44:	4629      	mov	r1, r5
 8010a46:	4630      	mov	r0, r6
 8010a48:	f7ff fe88 	bl	801075c <__swsetup_r>
 8010a4c:	b170      	cbz	r0, 8010a6c <_vfiprintf_r+0x5c>
 8010a4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010a50:	07dc      	lsls	r4, r3, #31
 8010a52:	d504      	bpl.n	8010a5e <_vfiprintf_r+0x4e>
 8010a54:	f04f 30ff 	mov.w	r0, #4294967295
 8010a58:	b01d      	add	sp, #116	; 0x74
 8010a5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a5e:	89ab      	ldrh	r3, [r5, #12]
 8010a60:	0598      	lsls	r0, r3, #22
 8010a62:	d4f7      	bmi.n	8010a54 <_vfiprintf_r+0x44>
 8010a64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010a66:	f7ff ff5b 	bl	8010920 <__retarget_lock_release_recursive>
 8010a6a:	e7f3      	b.n	8010a54 <_vfiprintf_r+0x44>
 8010a6c:	2300      	movs	r3, #0
 8010a6e:	9309      	str	r3, [sp, #36]	; 0x24
 8010a70:	2320      	movs	r3, #32
 8010a72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010a76:	f8cd 800c 	str.w	r8, [sp, #12]
 8010a7a:	2330      	movs	r3, #48	; 0x30
 8010a7c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8010c30 <_vfiprintf_r+0x220>
 8010a80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010a84:	f04f 0901 	mov.w	r9, #1
 8010a88:	4623      	mov	r3, r4
 8010a8a:	469a      	mov	sl, r3
 8010a8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010a90:	b10a      	cbz	r2, 8010a96 <_vfiprintf_r+0x86>
 8010a92:	2a25      	cmp	r2, #37	; 0x25
 8010a94:	d1f9      	bne.n	8010a8a <_vfiprintf_r+0x7a>
 8010a96:	ebba 0b04 	subs.w	fp, sl, r4
 8010a9a:	d00b      	beq.n	8010ab4 <_vfiprintf_r+0xa4>
 8010a9c:	465b      	mov	r3, fp
 8010a9e:	4622      	mov	r2, r4
 8010aa0:	4629      	mov	r1, r5
 8010aa2:	4630      	mov	r0, r6
 8010aa4:	f7ff ffa1 	bl	80109ea <__sfputs_r>
 8010aa8:	3001      	adds	r0, #1
 8010aaa:	f000 80a9 	beq.w	8010c00 <_vfiprintf_r+0x1f0>
 8010aae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010ab0:	445a      	add	r2, fp
 8010ab2:	9209      	str	r2, [sp, #36]	; 0x24
 8010ab4:	f89a 3000 	ldrb.w	r3, [sl]
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	f000 80a1 	beq.w	8010c00 <_vfiprintf_r+0x1f0>
 8010abe:	2300      	movs	r3, #0
 8010ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8010ac4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010ac8:	f10a 0a01 	add.w	sl, sl, #1
 8010acc:	9304      	str	r3, [sp, #16]
 8010ace:	9307      	str	r3, [sp, #28]
 8010ad0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010ad4:	931a      	str	r3, [sp, #104]	; 0x68
 8010ad6:	4654      	mov	r4, sl
 8010ad8:	2205      	movs	r2, #5
 8010ada:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010ade:	4854      	ldr	r0, [pc, #336]	; (8010c30 <_vfiprintf_r+0x220>)
 8010ae0:	f7f2 fcde 	bl	80034a0 <memchr>
 8010ae4:	9a04      	ldr	r2, [sp, #16]
 8010ae6:	b9d8      	cbnz	r0, 8010b20 <_vfiprintf_r+0x110>
 8010ae8:	06d1      	lsls	r1, r2, #27
 8010aea:	bf44      	itt	mi
 8010aec:	2320      	movmi	r3, #32
 8010aee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010af2:	0713      	lsls	r3, r2, #28
 8010af4:	bf44      	itt	mi
 8010af6:	232b      	movmi	r3, #43	; 0x2b
 8010af8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010afc:	f89a 3000 	ldrb.w	r3, [sl]
 8010b00:	2b2a      	cmp	r3, #42	; 0x2a
 8010b02:	d015      	beq.n	8010b30 <_vfiprintf_r+0x120>
 8010b04:	9a07      	ldr	r2, [sp, #28]
 8010b06:	4654      	mov	r4, sl
 8010b08:	2000      	movs	r0, #0
 8010b0a:	f04f 0c0a 	mov.w	ip, #10
 8010b0e:	4621      	mov	r1, r4
 8010b10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010b14:	3b30      	subs	r3, #48	; 0x30
 8010b16:	2b09      	cmp	r3, #9
 8010b18:	d94d      	bls.n	8010bb6 <_vfiprintf_r+0x1a6>
 8010b1a:	b1b0      	cbz	r0, 8010b4a <_vfiprintf_r+0x13a>
 8010b1c:	9207      	str	r2, [sp, #28]
 8010b1e:	e014      	b.n	8010b4a <_vfiprintf_r+0x13a>
 8010b20:	eba0 0308 	sub.w	r3, r0, r8
 8010b24:	fa09 f303 	lsl.w	r3, r9, r3
 8010b28:	4313      	orrs	r3, r2
 8010b2a:	9304      	str	r3, [sp, #16]
 8010b2c:	46a2      	mov	sl, r4
 8010b2e:	e7d2      	b.n	8010ad6 <_vfiprintf_r+0xc6>
 8010b30:	9b03      	ldr	r3, [sp, #12]
 8010b32:	1d19      	adds	r1, r3, #4
 8010b34:	681b      	ldr	r3, [r3, #0]
 8010b36:	9103      	str	r1, [sp, #12]
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	bfbb      	ittet	lt
 8010b3c:	425b      	neglt	r3, r3
 8010b3e:	f042 0202 	orrlt.w	r2, r2, #2
 8010b42:	9307      	strge	r3, [sp, #28]
 8010b44:	9307      	strlt	r3, [sp, #28]
 8010b46:	bfb8      	it	lt
 8010b48:	9204      	strlt	r2, [sp, #16]
 8010b4a:	7823      	ldrb	r3, [r4, #0]
 8010b4c:	2b2e      	cmp	r3, #46	; 0x2e
 8010b4e:	d10c      	bne.n	8010b6a <_vfiprintf_r+0x15a>
 8010b50:	7863      	ldrb	r3, [r4, #1]
 8010b52:	2b2a      	cmp	r3, #42	; 0x2a
 8010b54:	d134      	bne.n	8010bc0 <_vfiprintf_r+0x1b0>
 8010b56:	9b03      	ldr	r3, [sp, #12]
 8010b58:	1d1a      	adds	r2, r3, #4
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	9203      	str	r2, [sp, #12]
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	bfb8      	it	lt
 8010b62:	f04f 33ff 	movlt.w	r3, #4294967295
 8010b66:	3402      	adds	r4, #2
 8010b68:	9305      	str	r3, [sp, #20]
 8010b6a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8010c40 <_vfiprintf_r+0x230>
 8010b6e:	7821      	ldrb	r1, [r4, #0]
 8010b70:	2203      	movs	r2, #3
 8010b72:	4650      	mov	r0, sl
 8010b74:	f7f2 fc94 	bl	80034a0 <memchr>
 8010b78:	b138      	cbz	r0, 8010b8a <_vfiprintf_r+0x17a>
 8010b7a:	9b04      	ldr	r3, [sp, #16]
 8010b7c:	eba0 000a 	sub.w	r0, r0, sl
 8010b80:	2240      	movs	r2, #64	; 0x40
 8010b82:	4082      	lsls	r2, r0
 8010b84:	4313      	orrs	r3, r2
 8010b86:	3401      	adds	r4, #1
 8010b88:	9304      	str	r3, [sp, #16]
 8010b8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010b8e:	4829      	ldr	r0, [pc, #164]	; (8010c34 <_vfiprintf_r+0x224>)
 8010b90:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010b94:	2206      	movs	r2, #6
 8010b96:	f7f2 fc83 	bl	80034a0 <memchr>
 8010b9a:	2800      	cmp	r0, #0
 8010b9c:	d03f      	beq.n	8010c1e <_vfiprintf_r+0x20e>
 8010b9e:	4b26      	ldr	r3, [pc, #152]	; (8010c38 <_vfiprintf_r+0x228>)
 8010ba0:	bb1b      	cbnz	r3, 8010bea <_vfiprintf_r+0x1da>
 8010ba2:	9b03      	ldr	r3, [sp, #12]
 8010ba4:	3307      	adds	r3, #7
 8010ba6:	f023 0307 	bic.w	r3, r3, #7
 8010baa:	3308      	adds	r3, #8
 8010bac:	9303      	str	r3, [sp, #12]
 8010bae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010bb0:	443b      	add	r3, r7
 8010bb2:	9309      	str	r3, [sp, #36]	; 0x24
 8010bb4:	e768      	b.n	8010a88 <_vfiprintf_r+0x78>
 8010bb6:	fb0c 3202 	mla	r2, ip, r2, r3
 8010bba:	460c      	mov	r4, r1
 8010bbc:	2001      	movs	r0, #1
 8010bbe:	e7a6      	b.n	8010b0e <_vfiprintf_r+0xfe>
 8010bc0:	2300      	movs	r3, #0
 8010bc2:	3401      	adds	r4, #1
 8010bc4:	9305      	str	r3, [sp, #20]
 8010bc6:	4619      	mov	r1, r3
 8010bc8:	f04f 0c0a 	mov.w	ip, #10
 8010bcc:	4620      	mov	r0, r4
 8010bce:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010bd2:	3a30      	subs	r2, #48	; 0x30
 8010bd4:	2a09      	cmp	r2, #9
 8010bd6:	d903      	bls.n	8010be0 <_vfiprintf_r+0x1d0>
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d0c6      	beq.n	8010b6a <_vfiprintf_r+0x15a>
 8010bdc:	9105      	str	r1, [sp, #20]
 8010bde:	e7c4      	b.n	8010b6a <_vfiprintf_r+0x15a>
 8010be0:	fb0c 2101 	mla	r1, ip, r1, r2
 8010be4:	4604      	mov	r4, r0
 8010be6:	2301      	movs	r3, #1
 8010be8:	e7f0      	b.n	8010bcc <_vfiprintf_r+0x1bc>
 8010bea:	ab03      	add	r3, sp, #12
 8010bec:	9300      	str	r3, [sp, #0]
 8010bee:	462a      	mov	r2, r5
 8010bf0:	4b12      	ldr	r3, [pc, #72]	; (8010c3c <_vfiprintf_r+0x22c>)
 8010bf2:	a904      	add	r1, sp, #16
 8010bf4:	4630      	mov	r0, r6
 8010bf6:	f3af 8000 	nop.w
 8010bfa:	4607      	mov	r7, r0
 8010bfc:	1c78      	adds	r0, r7, #1
 8010bfe:	d1d6      	bne.n	8010bae <_vfiprintf_r+0x19e>
 8010c00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010c02:	07d9      	lsls	r1, r3, #31
 8010c04:	d405      	bmi.n	8010c12 <_vfiprintf_r+0x202>
 8010c06:	89ab      	ldrh	r3, [r5, #12]
 8010c08:	059a      	lsls	r2, r3, #22
 8010c0a:	d402      	bmi.n	8010c12 <_vfiprintf_r+0x202>
 8010c0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010c0e:	f7ff fe87 	bl	8010920 <__retarget_lock_release_recursive>
 8010c12:	89ab      	ldrh	r3, [r5, #12]
 8010c14:	065b      	lsls	r3, r3, #25
 8010c16:	f53f af1d 	bmi.w	8010a54 <_vfiprintf_r+0x44>
 8010c1a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010c1c:	e71c      	b.n	8010a58 <_vfiprintf_r+0x48>
 8010c1e:	ab03      	add	r3, sp, #12
 8010c20:	9300      	str	r3, [sp, #0]
 8010c22:	462a      	mov	r2, r5
 8010c24:	4b05      	ldr	r3, [pc, #20]	; (8010c3c <_vfiprintf_r+0x22c>)
 8010c26:	a904      	add	r1, sp, #16
 8010c28:	4630      	mov	r0, r6
 8010c2a:	f000 f879 	bl	8010d20 <_printf_i>
 8010c2e:	e7e4      	b.n	8010bfa <_vfiprintf_r+0x1ea>
 8010c30:	0801c8d8 	.word	0x0801c8d8
 8010c34:	0801c8e2 	.word	0x0801c8e2
 8010c38:	00000000 	.word	0x00000000
 8010c3c:	080109eb 	.word	0x080109eb
 8010c40:	0801c8de 	.word	0x0801c8de

08010c44 <_printf_common>:
 8010c44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c48:	4616      	mov	r6, r2
 8010c4a:	4699      	mov	r9, r3
 8010c4c:	688a      	ldr	r2, [r1, #8]
 8010c4e:	690b      	ldr	r3, [r1, #16]
 8010c50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010c54:	4293      	cmp	r3, r2
 8010c56:	bfb8      	it	lt
 8010c58:	4613      	movlt	r3, r2
 8010c5a:	6033      	str	r3, [r6, #0]
 8010c5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010c60:	4607      	mov	r7, r0
 8010c62:	460c      	mov	r4, r1
 8010c64:	b10a      	cbz	r2, 8010c6a <_printf_common+0x26>
 8010c66:	3301      	adds	r3, #1
 8010c68:	6033      	str	r3, [r6, #0]
 8010c6a:	6823      	ldr	r3, [r4, #0]
 8010c6c:	0699      	lsls	r1, r3, #26
 8010c6e:	bf42      	ittt	mi
 8010c70:	6833      	ldrmi	r3, [r6, #0]
 8010c72:	3302      	addmi	r3, #2
 8010c74:	6033      	strmi	r3, [r6, #0]
 8010c76:	6825      	ldr	r5, [r4, #0]
 8010c78:	f015 0506 	ands.w	r5, r5, #6
 8010c7c:	d106      	bne.n	8010c8c <_printf_common+0x48>
 8010c7e:	f104 0a19 	add.w	sl, r4, #25
 8010c82:	68e3      	ldr	r3, [r4, #12]
 8010c84:	6832      	ldr	r2, [r6, #0]
 8010c86:	1a9b      	subs	r3, r3, r2
 8010c88:	42ab      	cmp	r3, r5
 8010c8a:	dc26      	bgt.n	8010cda <_printf_common+0x96>
 8010c8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010c90:	1e13      	subs	r3, r2, #0
 8010c92:	6822      	ldr	r2, [r4, #0]
 8010c94:	bf18      	it	ne
 8010c96:	2301      	movne	r3, #1
 8010c98:	0692      	lsls	r2, r2, #26
 8010c9a:	d42b      	bmi.n	8010cf4 <_printf_common+0xb0>
 8010c9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010ca0:	4649      	mov	r1, r9
 8010ca2:	4638      	mov	r0, r7
 8010ca4:	47c0      	blx	r8
 8010ca6:	3001      	adds	r0, #1
 8010ca8:	d01e      	beq.n	8010ce8 <_printf_common+0xa4>
 8010caa:	6823      	ldr	r3, [r4, #0]
 8010cac:	6922      	ldr	r2, [r4, #16]
 8010cae:	f003 0306 	and.w	r3, r3, #6
 8010cb2:	2b04      	cmp	r3, #4
 8010cb4:	bf02      	ittt	eq
 8010cb6:	68e5      	ldreq	r5, [r4, #12]
 8010cb8:	6833      	ldreq	r3, [r6, #0]
 8010cba:	1aed      	subeq	r5, r5, r3
 8010cbc:	68a3      	ldr	r3, [r4, #8]
 8010cbe:	bf0c      	ite	eq
 8010cc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010cc4:	2500      	movne	r5, #0
 8010cc6:	4293      	cmp	r3, r2
 8010cc8:	bfc4      	itt	gt
 8010cca:	1a9b      	subgt	r3, r3, r2
 8010ccc:	18ed      	addgt	r5, r5, r3
 8010cce:	2600      	movs	r6, #0
 8010cd0:	341a      	adds	r4, #26
 8010cd2:	42b5      	cmp	r5, r6
 8010cd4:	d11a      	bne.n	8010d0c <_printf_common+0xc8>
 8010cd6:	2000      	movs	r0, #0
 8010cd8:	e008      	b.n	8010cec <_printf_common+0xa8>
 8010cda:	2301      	movs	r3, #1
 8010cdc:	4652      	mov	r2, sl
 8010cde:	4649      	mov	r1, r9
 8010ce0:	4638      	mov	r0, r7
 8010ce2:	47c0      	blx	r8
 8010ce4:	3001      	adds	r0, #1
 8010ce6:	d103      	bne.n	8010cf0 <_printf_common+0xac>
 8010ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8010cec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010cf0:	3501      	adds	r5, #1
 8010cf2:	e7c6      	b.n	8010c82 <_printf_common+0x3e>
 8010cf4:	18e1      	adds	r1, r4, r3
 8010cf6:	1c5a      	adds	r2, r3, #1
 8010cf8:	2030      	movs	r0, #48	; 0x30
 8010cfa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010cfe:	4422      	add	r2, r4
 8010d00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010d04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010d08:	3302      	adds	r3, #2
 8010d0a:	e7c7      	b.n	8010c9c <_printf_common+0x58>
 8010d0c:	2301      	movs	r3, #1
 8010d0e:	4622      	mov	r2, r4
 8010d10:	4649      	mov	r1, r9
 8010d12:	4638      	mov	r0, r7
 8010d14:	47c0      	blx	r8
 8010d16:	3001      	adds	r0, #1
 8010d18:	d0e6      	beq.n	8010ce8 <_printf_common+0xa4>
 8010d1a:	3601      	adds	r6, #1
 8010d1c:	e7d9      	b.n	8010cd2 <_printf_common+0x8e>
	...

08010d20 <_printf_i>:
 8010d20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010d24:	7e0f      	ldrb	r7, [r1, #24]
 8010d26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010d28:	2f78      	cmp	r7, #120	; 0x78
 8010d2a:	4691      	mov	r9, r2
 8010d2c:	4680      	mov	r8, r0
 8010d2e:	460c      	mov	r4, r1
 8010d30:	469a      	mov	sl, r3
 8010d32:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010d36:	d807      	bhi.n	8010d48 <_printf_i+0x28>
 8010d38:	2f62      	cmp	r7, #98	; 0x62
 8010d3a:	d80a      	bhi.n	8010d52 <_printf_i+0x32>
 8010d3c:	2f00      	cmp	r7, #0
 8010d3e:	f000 80d4 	beq.w	8010eea <_printf_i+0x1ca>
 8010d42:	2f58      	cmp	r7, #88	; 0x58
 8010d44:	f000 80c0 	beq.w	8010ec8 <_printf_i+0x1a8>
 8010d48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010d4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010d50:	e03a      	b.n	8010dc8 <_printf_i+0xa8>
 8010d52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010d56:	2b15      	cmp	r3, #21
 8010d58:	d8f6      	bhi.n	8010d48 <_printf_i+0x28>
 8010d5a:	a101      	add	r1, pc, #4	; (adr r1, 8010d60 <_printf_i+0x40>)
 8010d5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010d60:	08010db9 	.word	0x08010db9
 8010d64:	08010dcd 	.word	0x08010dcd
 8010d68:	08010d49 	.word	0x08010d49
 8010d6c:	08010d49 	.word	0x08010d49
 8010d70:	08010d49 	.word	0x08010d49
 8010d74:	08010d49 	.word	0x08010d49
 8010d78:	08010dcd 	.word	0x08010dcd
 8010d7c:	08010d49 	.word	0x08010d49
 8010d80:	08010d49 	.word	0x08010d49
 8010d84:	08010d49 	.word	0x08010d49
 8010d88:	08010d49 	.word	0x08010d49
 8010d8c:	08010ed1 	.word	0x08010ed1
 8010d90:	08010df9 	.word	0x08010df9
 8010d94:	08010e8b 	.word	0x08010e8b
 8010d98:	08010d49 	.word	0x08010d49
 8010d9c:	08010d49 	.word	0x08010d49
 8010da0:	08010ef3 	.word	0x08010ef3
 8010da4:	08010d49 	.word	0x08010d49
 8010da8:	08010df9 	.word	0x08010df9
 8010dac:	08010d49 	.word	0x08010d49
 8010db0:	08010d49 	.word	0x08010d49
 8010db4:	08010e93 	.word	0x08010e93
 8010db8:	682b      	ldr	r3, [r5, #0]
 8010dba:	1d1a      	adds	r2, r3, #4
 8010dbc:	681b      	ldr	r3, [r3, #0]
 8010dbe:	602a      	str	r2, [r5, #0]
 8010dc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010dc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010dc8:	2301      	movs	r3, #1
 8010dca:	e09f      	b.n	8010f0c <_printf_i+0x1ec>
 8010dcc:	6820      	ldr	r0, [r4, #0]
 8010dce:	682b      	ldr	r3, [r5, #0]
 8010dd0:	0607      	lsls	r7, r0, #24
 8010dd2:	f103 0104 	add.w	r1, r3, #4
 8010dd6:	6029      	str	r1, [r5, #0]
 8010dd8:	d501      	bpl.n	8010dde <_printf_i+0xbe>
 8010dda:	681e      	ldr	r6, [r3, #0]
 8010ddc:	e003      	b.n	8010de6 <_printf_i+0xc6>
 8010dde:	0646      	lsls	r6, r0, #25
 8010de0:	d5fb      	bpl.n	8010dda <_printf_i+0xba>
 8010de2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8010de6:	2e00      	cmp	r6, #0
 8010de8:	da03      	bge.n	8010df2 <_printf_i+0xd2>
 8010dea:	232d      	movs	r3, #45	; 0x2d
 8010dec:	4276      	negs	r6, r6
 8010dee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010df2:	485a      	ldr	r0, [pc, #360]	; (8010f5c <_printf_i+0x23c>)
 8010df4:	230a      	movs	r3, #10
 8010df6:	e012      	b.n	8010e1e <_printf_i+0xfe>
 8010df8:	682b      	ldr	r3, [r5, #0]
 8010dfa:	6820      	ldr	r0, [r4, #0]
 8010dfc:	1d19      	adds	r1, r3, #4
 8010dfe:	6029      	str	r1, [r5, #0]
 8010e00:	0605      	lsls	r5, r0, #24
 8010e02:	d501      	bpl.n	8010e08 <_printf_i+0xe8>
 8010e04:	681e      	ldr	r6, [r3, #0]
 8010e06:	e002      	b.n	8010e0e <_printf_i+0xee>
 8010e08:	0641      	lsls	r1, r0, #25
 8010e0a:	d5fb      	bpl.n	8010e04 <_printf_i+0xe4>
 8010e0c:	881e      	ldrh	r6, [r3, #0]
 8010e0e:	4853      	ldr	r0, [pc, #332]	; (8010f5c <_printf_i+0x23c>)
 8010e10:	2f6f      	cmp	r7, #111	; 0x6f
 8010e12:	bf0c      	ite	eq
 8010e14:	2308      	moveq	r3, #8
 8010e16:	230a      	movne	r3, #10
 8010e18:	2100      	movs	r1, #0
 8010e1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010e1e:	6865      	ldr	r5, [r4, #4]
 8010e20:	60a5      	str	r5, [r4, #8]
 8010e22:	2d00      	cmp	r5, #0
 8010e24:	bfa2      	ittt	ge
 8010e26:	6821      	ldrge	r1, [r4, #0]
 8010e28:	f021 0104 	bicge.w	r1, r1, #4
 8010e2c:	6021      	strge	r1, [r4, #0]
 8010e2e:	b90e      	cbnz	r6, 8010e34 <_printf_i+0x114>
 8010e30:	2d00      	cmp	r5, #0
 8010e32:	d04b      	beq.n	8010ecc <_printf_i+0x1ac>
 8010e34:	4615      	mov	r5, r2
 8010e36:	fbb6 f1f3 	udiv	r1, r6, r3
 8010e3a:	fb03 6711 	mls	r7, r3, r1, r6
 8010e3e:	5dc7      	ldrb	r7, [r0, r7]
 8010e40:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010e44:	4637      	mov	r7, r6
 8010e46:	42bb      	cmp	r3, r7
 8010e48:	460e      	mov	r6, r1
 8010e4a:	d9f4      	bls.n	8010e36 <_printf_i+0x116>
 8010e4c:	2b08      	cmp	r3, #8
 8010e4e:	d10b      	bne.n	8010e68 <_printf_i+0x148>
 8010e50:	6823      	ldr	r3, [r4, #0]
 8010e52:	07de      	lsls	r6, r3, #31
 8010e54:	d508      	bpl.n	8010e68 <_printf_i+0x148>
 8010e56:	6923      	ldr	r3, [r4, #16]
 8010e58:	6861      	ldr	r1, [r4, #4]
 8010e5a:	4299      	cmp	r1, r3
 8010e5c:	bfde      	ittt	le
 8010e5e:	2330      	movle	r3, #48	; 0x30
 8010e60:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010e64:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010e68:	1b52      	subs	r2, r2, r5
 8010e6a:	6122      	str	r2, [r4, #16]
 8010e6c:	f8cd a000 	str.w	sl, [sp]
 8010e70:	464b      	mov	r3, r9
 8010e72:	aa03      	add	r2, sp, #12
 8010e74:	4621      	mov	r1, r4
 8010e76:	4640      	mov	r0, r8
 8010e78:	f7ff fee4 	bl	8010c44 <_printf_common>
 8010e7c:	3001      	adds	r0, #1
 8010e7e:	d14a      	bne.n	8010f16 <_printf_i+0x1f6>
 8010e80:	f04f 30ff 	mov.w	r0, #4294967295
 8010e84:	b004      	add	sp, #16
 8010e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e8a:	6823      	ldr	r3, [r4, #0]
 8010e8c:	f043 0320 	orr.w	r3, r3, #32
 8010e90:	6023      	str	r3, [r4, #0]
 8010e92:	4833      	ldr	r0, [pc, #204]	; (8010f60 <_printf_i+0x240>)
 8010e94:	2778      	movs	r7, #120	; 0x78
 8010e96:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010e9a:	6823      	ldr	r3, [r4, #0]
 8010e9c:	6829      	ldr	r1, [r5, #0]
 8010e9e:	061f      	lsls	r7, r3, #24
 8010ea0:	f851 6b04 	ldr.w	r6, [r1], #4
 8010ea4:	d402      	bmi.n	8010eac <_printf_i+0x18c>
 8010ea6:	065f      	lsls	r7, r3, #25
 8010ea8:	bf48      	it	mi
 8010eaa:	b2b6      	uxthmi	r6, r6
 8010eac:	07df      	lsls	r7, r3, #31
 8010eae:	bf48      	it	mi
 8010eb0:	f043 0320 	orrmi.w	r3, r3, #32
 8010eb4:	6029      	str	r1, [r5, #0]
 8010eb6:	bf48      	it	mi
 8010eb8:	6023      	strmi	r3, [r4, #0]
 8010eba:	b91e      	cbnz	r6, 8010ec4 <_printf_i+0x1a4>
 8010ebc:	6823      	ldr	r3, [r4, #0]
 8010ebe:	f023 0320 	bic.w	r3, r3, #32
 8010ec2:	6023      	str	r3, [r4, #0]
 8010ec4:	2310      	movs	r3, #16
 8010ec6:	e7a7      	b.n	8010e18 <_printf_i+0xf8>
 8010ec8:	4824      	ldr	r0, [pc, #144]	; (8010f5c <_printf_i+0x23c>)
 8010eca:	e7e4      	b.n	8010e96 <_printf_i+0x176>
 8010ecc:	4615      	mov	r5, r2
 8010ece:	e7bd      	b.n	8010e4c <_printf_i+0x12c>
 8010ed0:	682b      	ldr	r3, [r5, #0]
 8010ed2:	6826      	ldr	r6, [r4, #0]
 8010ed4:	6961      	ldr	r1, [r4, #20]
 8010ed6:	1d18      	adds	r0, r3, #4
 8010ed8:	6028      	str	r0, [r5, #0]
 8010eda:	0635      	lsls	r5, r6, #24
 8010edc:	681b      	ldr	r3, [r3, #0]
 8010ede:	d501      	bpl.n	8010ee4 <_printf_i+0x1c4>
 8010ee0:	6019      	str	r1, [r3, #0]
 8010ee2:	e002      	b.n	8010eea <_printf_i+0x1ca>
 8010ee4:	0670      	lsls	r0, r6, #25
 8010ee6:	d5fb      	bpl.n	8010ee0 <_printf_i+0x1c0>
 8010ee8:	8019      	strh	r1, [r3, #0]
 8010eea:	2300      	movs	r3, #0
 8010eec:	6123      	str	r3, [r4, #16]
 8010eee:	4615      	mov	r5, r2
 8010ef0:	e7bc      	b.n	8010e6c <_printf_i+0x14c>
 8010ef2:	682b      	ldr	r3, [r5, #0]
 8010ef4:	1d1a      	adds	r2, r3, #4
 8010ef6:	602a      	str	r2, [r5, #0]
 8010ef8:	681d      	ldr	r5, [r3, #0]
 8010efa:	6862      	ldr	r2, [r4, #4]
 8010efc:	2100      	movs	r1, #0
 8010efe:	4628      	mov	r0, r5
 8010f00:	f7f2 face 	bl	80034a0 <memchr>
 8010f04:	b108      	cbz	r0, 8010f0a <_printf_i+0x1ea>
 8010f06:	1b40      	subs	r0, r0, r5
 8010f08:	6060      	str	r0, [r4, #4]
 8010f0a:	6863      	ldr	r3, [r4, #4]
 8010f0c:	6123      	str	r3, [r4, #16]
 8010f0e:	2300      	movs	r3, #0
 8010f10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010f14:	e7aa      	b.n	8010e6c <_printf_i+0x14c>
 8010f16:	6923      	ldr	r3, [r4, #16]
 8010f18:	462a      	mov	r2, r5
 8010f1a:	4649      	mov	r1, r9
 8010f1c:	4640      	mov	r0, r8
 8010f1e:	47d0      	blx	sl
 8010f20:	3001      	adds	r0, #1
 8010f22:	d0ad      	beq.n	8010e80 <_printf_i+0x160>
 8010f24:	6823      	ldr	r3, [r4, #0]
 8010f26:	079b      	lsls	r3, r3, #30
 8010f28:	d413      	bmi.n	8010f52 <_printf_i+0x232>
 8010f2a:	68e0      	ldr	r0, [r4, #12]
 8010f2c:	9b03      	ldr	r3, [sp, #12]
 8010f2e:	4298      	cmp	r0, r3
 8010f30:	bfb8      	it	lt
 8010f32:	4618      	movlt	r0, r3
 8010f34:	e7a6      	b.n	8010e84 <_printf_i+0x164>
 8010f36:	2301      	movs	r3, #1
 8010f38:	4632      	mov	r2, r6
 8010f3a:	4649      	mov	r1, r9
 8010f3c:	4640      	mov	r0, r8
 8010f3e:	47d0      	blx	sl
 8010f40:	3001      	adds	r0, #1
 8010f42:	d09d      	beq.n	8010e80 <_printf_i+0x160>
 8010f44:	3501      	adds	r5, #1
 8010f46:	68e3      	ldr	r3, [r4, #12]
 8010f48:	9903      	ldr	r1, [sp, #12]
 8010f4a:	1a5b      	subs	r3, r3, r1
 8010f4c:	42ab      	cmp	r3, r5
 8010f4e:	dcf2      	bgt.n	8010f36 <_printf_i+0x216>
 8010f50:	e7eb      	b.n	8010f2a <_printf_i+0x20a>
 8010f52:	2500      	movs	r5, #0
 8010f54:	f104 0619 	add.w	r6, r4, #25
 8010f58:	e7f5      	b.n	8010f46 <_printf_i+0x226>
 8010f5a:	bf00      	nop
 8010f5c:	0801c8e9 	.word	0x0801c8e9
 8010f60:	0801c8fa 	.word	0x0801c8fa

08010f64 <__sflush_r>:
 8010f64:	898a      	ldrh	r2, [r1, #12]
 8010f66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f6a:	4605      	mov	r5, r0
 8010f6c:	0710      	lsls	r0, r2, #28
 8010f6e:	460c      	mov	r4, r1
 8010f70:	d458      	bmi.n	8011024 <__sflush_r+0xc0>
 8010f72:	684b      	ldr	r3, [r1, #4]
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	dc05      	bgt.n	8010f84 <__sflush_r+0x20>
 8010f78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	dc02      	bgt.n	8010f84 <__sflush_r+0x20>
 8010f7e:	2000      	movs	r0, #0
 8010f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010f86:	2e00      	cmp	r6, #0
 8010f88:	d0f9      	beq.n	8010f7e <__sflush_r+0x1a>
 8010f8a:	2300      	movs	r3, #0
 8010f8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010f90:	682f      	ldr	r7, [r5, #0]
 8010f92:	6a21      	ldr	r1, [r4, #32]
 8010f94:	602b      	str	r3, [r5, #0]
 8010f96:	d032      	beq.n	8010ffe <__sflush_r+0x9a>
 8010f98:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010f9a:	89a3      	ldrh	r3, [r4, #12]
 8010f9c:	075a      	lsls	r2, r3, #29
 8010f9e:	d505      	bpl.n	8010fac <__sflush_r+0x48>
 8010fa0:	6863      	ldr	r3, [r4, #4]
 8010fa2:	1ac0      	subs	r0, r0, r3
 8010fa4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010fa6:	b10b      	cbz	r3, 8010fac <__sflush_r+0x48>
 8010fa8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010faa:	1ac0      	subs	r0, r0, r3
 8010fac:	2300      	movs	r3, #0
 8010fae:	4602      	mov	r2, r0
 8010fb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010fb2:	6a21      	ldr	r1, [r4, #32]
 8010fb4:	4628      	mov	r0, r5
 8010fb6:	47b0      	blx	r6
 8010fb8:	1c43      	adds	r3, r0, #1
 8010fba:	89a3      	ldrh	r3, [r4, #12]
 8010fbc:	d106      	bne.n	8010fcc <__sflush_r+0x68>
 8010fbe:	6829      	ldr	r1, [r5, #0]
 8010fc0:	291d      	cmp	r1, #29
 8010fc2:	d82b      	bhi.n	801101c <__sflush_r+0xb8>
 8010fc4:	4a29      	ldr	r2, [pc, #164]	; (801106c <__sflush_r+0x108>)
 8010fc6:	410a      	asrs	r2, r1
 8010fc8:	07d6      	lsls	r6, r2, #31
 8010fca:	d427      	bmi.n	801101c <__sflush_r+0xb8>
 8010fcc:	2200      	movs	r2, #0
 8010fce:	6062      	str	r2, [r4, #4]
 8010fd0:	04d9      	lsls	r1, r3, #19
 8010fd2:	6922      	ldr	r2, [r4, #16]
 8010fd4:	6022      	str	r2, [r4, #0]
 8010fd6:	d504      	bpl.n	8010fe2 <__sflush_r+0x7e>
 8010fd8:	1c42      	adds	r2, r0, #1
 8010fda:	d101      	bne.n	8010fe0 <__sflush_r+0x7c>
 8010fdc:	682b      	ldr	r3, [r5, #0]
 8010fde:	b903      	cbnz	r3, 8010fe2 <__sflush_r+0x7e>
 8010fe0:	6560      	str	r0, [r4, #84]	; 0x54
 8010fe2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010fe4:	602f      	str	r7, [r5, #0]
 8010fe6:	2900      	cmp	r1, #0
 8010fe8:	d0c9      	beq.n	8010f7e <__sflush_r+0x1a>
 8010fea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010fee:	4299      	cmp	r1, r3
 8010ff0:	d002      	beq.n	8010ff8 <__sflush_r+0x94>
 8010ff2:	4628      	mov	r0, r5
 8010ff4:	f7ff fc96 	bl	8010924 <_free_r>
 8010ff8:	2000      	movs	r0, #0
 8010ffa:	6360      	str	r0, [r4, #52]	; 0x34
 8010ffc:	e7c0      	b.n	8010f80 <__sflush_r+0x1c>
 8010ffe:	2301      	movs	r3, #1
 8011000:	4628      	mov	r0, r5
 8011002:	47b0      	blx	r6
 8011004:	1c41      	adds	r1, r0, #1
 8011006:	d1c8      	bne.n	8010f9a <__sflush_r+0x36>
 8011008:	682b      	ldr	r3, [r5, #0]
 801100a:	2b00      	cmp	r3, #0
 801100c:	d0c5      	beq.n	8010f9a <__sflush_r+0x36>
 801100e:	2b1d      	cmp	r3, #29
 8011010:	d001      	beq.n	8011016 <__sflush_r+0xb2>
 8011012:	2b16      	cmp	r3, #22
 8011014:	d101      	bne.n	801101a <__sflush_r+0xb6>
 8011016:	602f      	str	r7, [r5, #0]
 8011018:	e7b1      	b.n	8010f7e <__sflush_r+0x1a>
 801101a:	89a3      	ldrh	r3, [r4, #12]
 801101c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011020:	81a3      	strh	r3, [r4, #12]
 8011022:	e7ad      	b.n	8010f80 <__sflush_r+0x1c>
 8011024:	690f      	ldr	r7, [r1, #16]
 8011026:	2f00      	cmp	r7, #0
 8011028:	d0a9      	beq.n	8010f7e <__sflush_r+0x1a>
 801102a:	0793      	lsls	r3, r2, #30
 801102c:	680e      	ldr	r6, [r1, #0]
 801102e:	bf08      	it	eq
 8011030:	694b      	ldreq	r3, [r1, #20]
 8011032:	600f      	str	r7, [r1, #0]
 8011034:	bf18      	it	ne
 8011036:	2300      	movne	r3, #0
 8011038:	eba6 0807 	sub.w	r8, r6, r7
 801103c:	608b      	str	r3, [r1, #8]
 801103e:	f1b8 0f00 	cmp.w	r8, #0
 8011042:	dd9c      	ble.n	8010f7e <__sflush_r+0x1a>
 8011044:	6a21      	ldr	r1, [r4, #32]
 8011046:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011048:	4643      	mov	r3, r8
 801104a:	463a      	mov	r2, r7
 801104c:	4628      	mov	r0, r5
 801104e:	47b0      	blx	r6
 8011050:	2800      	cmp	r0, #0
 8011052:	dc06      	bgt.n	8011062 <__sflush_r+0xfe>
 8011054:	89a3      	ldrh	r3, [r4, #12]
 8011056:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801105a:	81a3      	strh	r3, [r4, #12]
 801105c:	f04f 30ff 	mov.w	r0, #4294967295
 8011060:	e78e      	b.n	8010f80 <__sflush_r+0x1c>
 8011062:	4407      	add	r7, r0
 8011064:	eba8 0800 	sub.w	r8, r8, r0
 8011068:	e7e9      	b.n	801103e <__sflush_r+0xda>
 801106a:	bf00      	nop
 801106c:	dfbffffe 	.word	0xdfbffffe

08011070 <_fflush_r>:
 8011070:	b538      	push	{r3, r4, r5, lr}
 8011072:	690b      	ldr	r3, [r1, #16]
 8011074:	4605      	mov	r5, r0
 8011076:	460c      	mov	r4, r1
 8011078:	b913      	cbnz	r3, 8011080 <_fflush_r+0x10>
 801107a:	2500      	movs	r5, #0
 801107c:	4628      	mov	r0, r5
 801107e:	bd38      	pop	{r3, r4, r5, pc}
 8011080:	b118      	cbz	r0, 801108a <_fflush_r+0x1a>
 8011082:	6a03      	ldr	r3, [r0, #32]
 8011084:	b90b      	cbnz	r3, 801108a <_fflush_r+0x1a>
 8011086:	f7ff fa45 	bl	8010514 <__sinit>
 801108a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801108e:	2b00      	cmp	r3, #0
 8011090:	d0f3      	beq.n	801107a <_fflush_r+0xa>
 8011092:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011094:	07d0      	lsls	r0, r2, #31
 8011096:	d404      	bmi.n	80110a2 <_fflush_r+0x32>
 8011098:	0599      	lsls	r1, r3, #22
 801109a:	d402      	bmi.n	80110a2 <_fflush_r+0x32>
 801109c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801109e:	f7ff fc3e 	bl	801091e <__retarget_lock_acquire_recursive>
 80110a2:	4628      	mov	r0, r5
 80110a4:	4621      	mov	r1, r4
 80110a6:	f7ff ff5d 	bl	8010f64 <__sflush_r>
 80110aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80110ac:	07da      	lsls	r2, r3, #31
 80110ae:	4605      	mov	r5, r0
 80110b0:	d4e4      	bmi.n	801107c <_fflush_r+0xc>
 80110b2:	89a3      	ldrh	r3, [r4, #12]
 80110b4:	059b      	lsls	r3, r3, #22
 80110b6:	d4e1      	bmi.n	801107c <_fflush_r+0xc>
 80110b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80110ba:	f7ff fc31 	bl	8010920 <__retarget_lock_release_recursive>
 80110be:	e7dd      	b.n	801107c <_fflush_r+0xc>

080110c0 <__swhatbuf_r>:
 80110c0:	b570      	push	{r4, r5, r6, lr}
 80110c2:	460c      	mov	r4, r1
 80110c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80110c8:	2900      	cmp	r1, #0
 80110ca:	b096      	sub	sp, #88	; 0x58
 80110cc:	4615      	mov	r5, r2
 80110ce:	461e      	mov	r6, r3
 80110d0:	da0d      	bge.n	80110ee <__swhatbuf_r+0x2e>
 80110d2:	89a3      	ldrh	r3, [r4, #12]
 80110d4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80110d8:	f04f 0100 	mov.w	r1, #0
 80110dc:	bf0c      	ite	eq
 80110de:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80110e2:	2340      	movne	r3, #64	; 0x40
 80110e4:	2000      	movs	r0, #0
 80110e6:	6031      	str	r1, [r6, #0]
 80110e8:	602b      	str	r3, [r5, #0]
 80110ea:	b016      	add	sp, #88	; 0x58
 80110ec:	bd70      	pop	{r4, r5, r6, pc}
 80110ee:	466a      	mov	r2, sp
 80110f0:	f000 f848 	bl	8011184 <_fstat_r>
 80110f4:	2800      	cmp	r0, #0
 80110f6:	dbec      	blt.n	80110d2 <__swhatbuf_r+0x12>
 80110f8:	9901      	ldr	r1, [sp, #4]
 80110fa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80110fe:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8011102:	4259      	negs	r1, r3
 8011104:	4159      	adcs	r1, r3
 8011106:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801110a:	e7eb      	b.n	80110e4 <__swhatbuf_r+0x24>

0801110c <__smakebuf_r>:
 801110c:	898b      	ldrh	r3, [r1, #12]
 801110e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011110:	079d      	lsls	r5, r3, #30
 8011112:	4606      	mov	r6, r0
 8011114:	460c      	mov	r4, r1
 8011116:	d507      	bpl.n	8011128 <__smakebuf_r+0x1c>
 8011118:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801111c:	6023      	str	r3, [r4, #0]
 801111e:	6123      	str	r3, [r4, #16]
 8011120:	2301      	movs	r3, #1
 8011122:	6163      	str	r3, [r4, #20]
 8011124:	b002      	add	sp, #8
 8011126:	bd70      	pop	{r4, r5, r6, pc}
 8011128:	ab01      	add	r3, sp, #4
 801112a:	466a      	mov	r2, sp
 801112c:	f7ff ffc8 	bl	80110c0 <__swhatbuf_r>
 8011130:	9900      	ldr	r1, [sp, #0]
 8011132:	4605      	mov	r5, r0
 8011134:	4630      	mov	r0, r6
 8011136:	f7ff f8d5 	bl	80102e4 <_malloc_r>
 801113a:	b948      	cbnz	r0, 8011150 <__smakebuf_r+0x44>
 801113c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011140:	059a      	lsls	r2, r3, #22
 8011142:	d4ef      	bmi.n	8011124 <__smakebuf_r+0x18>
 8011144:	f023 0303 	bic.w	r3, r3, #3
 8011148:	f043 0302 	orr.w	r3, r3, #2
 801114c:	81a3      	strh	r3, [r4, #12]
 801114e:	e7e3      	b.n	8011118 <__smakebuf_r+0xc>
 8011150:	89a3      	ldrh	r3, [r4, #12]
 8011152:	6020      	str	r0, [r4, #0]
 8011154:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011158:	81a3      	strh	r3, [r4, #12]
 801115a:	9b00      	ldr	r3, [sp, #0]
 801115c:	6163      	str	r3, [r4, #20]
 801115e:	9b01      	ldr	r3, [sp, #4]
 8011160:	6120      	str	r0, [r4, #16]
 8011162:	b15b      	cbz	r3, 801117c <__smakebuf_r+0x70>
 8011164:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011168:	4630      	mov	r0, r6
 801116a:	f000 f81d 	bl	80111a8 <_isatty_r>
 801116e:	b128      	cbz	r0, 801117c <__smakebuf_r+0x70>
 8011170:	89a3      	ldrh	r3, [r4, #12]
 8011172:	f023 0303 	bic.w	r3, r3, #3
 8011176:	f043 0301 	orr.w	r3, r3, #1
 801117a:	81a3      	strh	r3, [r4, #12]
 801117c:	89a3      	ldrh	r3, [r4, #12]
 801117e:	431d      	orrs	r5, r3
 8011180:	81a5      	strh	r5, [r4, #12]
 8011182:	e7cf      	b.n	8011124 <__smakebuf_r+0x18>

08011184 <_fstat_r>:
 8011184:	b538      	push	{r3, r4, r5, lr}
 8011186:	4d07      	ldr	r5, [pc, #28]	; (80111a4 <_fstat_r+0x20>)
 8011188:	2300      	movs	r3, #0
 801118a:	4604      	mov	r4, r0
 801118c:	4608      	mov	r0, r1
 801118e:	4611      	mov	r1, r2
 8011190:	602b      	str	r3, [r5, #0]
 8011192:	f000 f99d 	bl	80114d0 <_fstat>
 8011196:	1c43      	adds	r3, r0, #1
 8011198:	d102      	bne.n	80111a0 <_fstat_r+0x1c>
 801119a:	682b      	ldr	r3, [r5, #0]
 801119c:	b103      	cbz	r3, 80111a0 <_fstat_r+0x1c>
 801119e:	6023      	str	r3, [r4, #0]
 80111a0:	bd38      	pop	{r3, r4, r5, pc}
 80111a2:	bf00      	nop
 80111a4:	20003774 	.word	0x20003774

080111a8 <_isatty_r>:
 80111a8:	b538      	push	{r3, r4, r5, lr}
 80111aa:	4d06      	ldr	r5, [pc, #24]	; (80111c4 <_isatty_r+0x1c>)
 80111ac:	2300      	movs	r3, #0
 80111ae:	4604      	mov	r4, r0
 80111b0:	4608      	mov	r0, r1
 80111b2:	602b      	str	r3, [r5, #0]
 80111b4:	f000 f994 	bl	80114e0 <_isatty>
 80111b8:	1c43      	adds	r3, r0, #1
 80111ba:	d102      	bne.n	80111c2 <_isatty_r+0x1a>
 80111bc:	682b      	ldr	r3, [r5, #0]
 80111be:	b103      	cbz	r3, 80111c2 <_isatty_r+0x1a>
 80111c0:	6023      	str	r3, [r4, #0]
 80111c2:	bd38      	pop	{r3, r4, r5, pc}
 80111c4:	20003774 	.word	0x20003774

080111c8 <expf>:
 80111c8:	b508      	push	{r3, lr}
 80111ca:	ed2d 8b02 	vpush	{d8}
 80111ce:	eef0 8a40 	vmov.f32	s17, s0
 80111d2:	f000 f8a7 	bl	8011324 <__ieee754_expf>
 80111d6:	eeb0 8a40 	vmov.f32	s16, s0
 80111da:	eeb0 0a68 	vmov.f32	s0, s17
 80111de:	f000 f829 	bl	8011234 <finitef>
 80111e2:	b160      	cbz	r0, 80111fe <expf+0x36>
 80111e4:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8011224 <expf+0x5c>
 80111e8:	eef4 8ae7 	vcmpe.f32	s17, s15
 80111ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111f0:	dd0a      	ble.n	8011208 <expf+0x40>
 80111f2:	f7ff fb69 	bl	80108c8 <__errno>
 80111f6:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8011228 <expf+0x60>
 80111fa:	2322      	movs	r3, #34	; 0x22
 80111fc:	6003      	str	r3, [r0, #0]
 80111fe:	eeb0 0a48 	vmov.f32	s0, s16
 8011202:	ecbd 8b02 	vpop	{d8}
 8011206:	bd08      	pop	{r3, pc}
 8011208:	eddf 7a08 	vldr	s15, [pc, #32]	; 801122c <expf+0x64>
 801120c:	eef4 8ae7 	vcmpe.f32	s17, s15
 8011210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011214:	d5f3      	bpl.n	80111fe <expf+0x36>
 8011216:	f7ff fb57 	bl	80108c8 <__errno>
 801121a:	2322      	movs	r3, #34	; 0x22
 801121c:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8011230 <expf+0x68>
 8011220:	6003      	str	r3, [r0, #0]
 8011222:	e7ec      	b.n	80111fe <expf+0x36>
 8011224:	42b17217 	.word	0x42b17217
 8011228:	7f800000 	.word	0x7f800000
 801122c:	c2cff1b5 	.word	0xc2cff1b5
 8011230:	00000000 	.word	0x00000000

08011234 <finitef>:
 8011234:	b082      	sub	sp, #8
 8011236:	ed8d 0a01 	vstr	s0, [sp, #4]
 801123a:	9801      	ldr	r0, [sp, #4]
 801123c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8011240:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8011244:	bfac      	ite	ge
 8011246:	2000      	movge	r0, #0
 8011248:	2001      	movlt	r0, #1
 801124a:	b002      	add	sp, #8
 801124c:	4770      	bx	lr

0801124e <with_errnof>:
 801124e:	b513      	push	{r0, r1, r4, lr}
 8011250:	4604      	mov	r4, r0
 8011252:	ed8d 0a01 	vstr	s0, [sp, #4]
 8011256:	f7ff fb37 	bl	80108c8 <__errno>
 801125a:	ed9d 0a01 	vldr	s0, [sp, #4]
 801125e:	6004      	str	r4, [r0, #0]
 8011260:	b002      	add	sp, #8
 8011262:	bd10      	pop	{r4, pc}

08011264 <xflowf>:
 8011264:	b130      	cbz	r0, 8011274 <xflowf+0x10>
 8011266:	eef1 7a40 	vneg.f32	s15, s0
 801126a:	ee27 0a80 	vmul.f32	s0, s15, s0
 801126e:	2022      	movs	r0, #34	; 0x22
 8011270:	f7ff bfed 	b.w	801124e <with_errnof>
 8011274:	eef0 7a40 	vmov.f32	s15, s0
 8011278:	e7f7      	b.n	801126a <xflowf+0x6>
	...

0801127c <__math_uflowf>:
 801127c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8011284 <__math_uflowf+0x8>
 8011280:	f7ff bff0 	b.w	8011264 <xflowf>
 8011284:	10000000 	.word	0x10000000

08011288 <__math_oflowf>:
 8011288:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8011290 <__math_oflowf+0x8>
 801128c:	f7ff bfea 	b.w	8011264 <xflowf>
 8011290:	70000000 	.word	0x70000000

08011294 <round>:
 8011294:	ec53 2b10 	vmov	r2, r3, d0
 8011298:	b570      	push	{r4, r5, r6, lr}
 801129a:	f3c3 540a 	ubfx	r4, r3, #20, #11
 801129e:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 80112a2:	2813      	cmp	r0, #19
 80112a4:	ee10 5a10 	vmov	r5, s0
 80112a8:	4619      	mov	r1, r3
 80112aa:	dc18      	bgt.n	80112de <round+0x4a>
 80112ac:	2800      	cmp	r0, #0
 80112ae:	da09      	bge.n	80112c4 <round+0x30>
 80112b0:	3001      	adds	r0, #1
 80112b2:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 80112b6:	d103      	bne.n	80112c0 <round+0x2c>
 80112b8:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 80112bc:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80112c0:	2300      	movs	r3, #0
 80112c2:	e02a      	b.n	801131a <round+0x86>
 80112c4:	4c16      	ldr	r4, [pc, #88]	; (8011320 <round+0x8c>)
 80112c6:	4104      	asrs	r4, r0
 80112c8:	ea03 0604 	and.w	r6, r3, r4
 80112cc:	4316      	orrs	r6, r2
 80112ce:	d011      	beq.n	80112f4 <round+0x60>
 80112d0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80112d4:	4103      	asrs	r3, r0
 80112d6:	440b      	add	r3, r1
 80112d8:	ea23 0104 	bic.w	r1, r3, r4
 80112dc:	e7f0      	b.n	80112c0 <round+0x2c>
 80112de:	2833      	cmp	r0, #51	; 0x33
 80112e0:	dd0b      	ble.n	80112fa <round+0x66>
 80112e2:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80112e6:	d105      	bne.n	80112f4 <round+0x60>
 80112e8:	ee10 0a10 	vmov	r0, s0
 80112ec:	f7f2 f92e 	bl	800354c <__adddf3>
 80112f0:	4602      	mov	r2, r0
 80112f2:	460b      	mov	r3, r1
 80112f4:	ec43 2b10 	vmov	d0, r2, r3
 80112f8:	bd70      	pop	{r4, r5, r6, pc}
 80112fa:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 80112fe:	f04f 34ff 	mov.w	r4, #4294967295
 8011302:	40f4      	lsrs	r4, r6
 8011304:	4214      	tst	r4, r2
 8011306:	d0f5      	beq.n	80112f4 <round+0x60>
 8011308:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 801130c:	2301      	movs	r3, #1
 801130e:	4083      	lsls	r3, r0
 8011310:	195b      	adds	r3, r3, r5
 8011312:	bf28      	it	cs
 8011314:	3101      	addcs	r1, #1
 8011316:	ea23 0304 	bic.w	r3, r3, r4
 801131a:	461a      	mov	r2, r3
 801131c:	460b      	mov	r3, r1
 801131e:	e7e9      	b.n	80112f4 <round+0x60>
 8011320:	000fffff 	.word	0x000fffff

08011324 <__ieee754_expf>:
 8011324:	ee10 2a10 	vmov	r2, s0
 8011328:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 801132c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8011330:	d902      	bls.n	8011338 <__ieee754_expf+0x14>
 8011332:	ee30 0a00 	vadd.f32	s0, s0, s0
 8011336:	4770      	bx	lr
 8011338:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 801133c:	d106      	bne.n	801134c <__ieee754_expf+0x28>
 801133e:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8011478 <__ieee754_expf+0x154>
 8011342:	2900      	cmp	r1, #0
 8011344:	bf18      	it	ne
 8011346:	eeb0 0a67 	vmovne.f32	s0, s15
 801134a:	4770      	bx	lr
 801134c:	484b      	ldr	r0, [pc, #300]	; (801147c <__ieee754_expf+0x158>)
 801134e:	4282      	cmp	r2, r0
 8011350:	dd02      	ble.n	8011358 <__ieee754_expf+0x34>
 8011352:	2000      	movs	r0, #0
 8011354:	f7ff bf98 	b.w	8011288 <__math_oflowf>
 8011358:	2a00      	cmp	r2, #0
 801135a:	da05      	bge.n	8011368 <__ieee754_expf+0x44>
 801135c:	4a48      	ldr	r2, [pc, #288]	; (8011480 <__ieee754_expf+0x15c>)
 801135e:	4293      	cmp	r3, r2
 8011360:	d902      	bls.n	8011368 <__ieee754_expf+0x44>
 8011362:	2000      	movs	r0, #0
 8011364:	f7ff bf8a 	b.w	801127c <__math_uflowf>
 8011368:	4a46      	ldr	r2, [pc, #280]	; (8011484 <__ieee754_expf+0x160>)
 801136a:	4293      	cmp	r3, r2
 801136c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8011370:	d952      	bls.n	8011418 <__ieee754_expf+0xf4>
 8011372:	4a45      	ldr	r2, [pc, #276]	; (8011488 <__ieee754_expf+0x164>)
 8011374:	4293      	cmp	r3, r2
 8011376:	ea4f 0281 	mov.w	r2, r1, lsl #2
 801137a:	d834      	bhi.n	80113e6 <__ieee754_expf+0xc2>
 801137c:	4b43      	ldr	r3, [pc, #268]	; (801148c <__ieee754_expf+0x168>)
 801137e:	4413      	add	r3, r2
 8011380:	ed93 7a00 	vldr	s14, [r3]
 8011384:	4b42      	ldr	r3, [pc, #264]	; (8011490 <__ieee754_expf+0x16c>)
 8011386:	4413      	add	r3, r2
 8011388:	ee30 7a47 	vsub.f32	s14, s0, s14
 801138c:	f1c1 0201 	rsb	r2, r1, #1
 8011390:	edd3 7a00 	vldr	s15, [r3]
 8011394:	1a52      	subs	r2, r2, r1
 8011396:	ee37 0a67 	vsub.f32	s0, s14, s15
 801139a:	ee20 6a00 	vmul.f32	s12, s0, s0
 801139e:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 8011494 <__ieee754_expf+0x170>
 80113a2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8011498 <__ieee754_expf+0x174>
 80113a6:	eee6 6a05 	vfma.f32	s13, s12, s10
 80113aa:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 801149c <__ieee754_expf+0x178>
 80113ae:	eea6 5a86 	vfma.f32	s10, s13, s12
 80113b2:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80114a0 <__ieee754_expf+0x17c>
 80113b6:	eee5 6a06 	vfma.f32	s13, s10, s12
 80113ba:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 80114a4 <__ieee754_expf+0x180>
 80113be:	eea6 5a86 	vfma.f32	s10, s13, s12
 80113c2:	eef0 6a40 	vmov.f32	s13, s0
 80113c6:	eee5 6a46 	vfms.f32	s13, s10, s12
 80113ca:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80113ce:	ee20 5a26 	vmul.f32	s10, s0, s13
 80113d2:	bb92      	cbnz	r2, 801143a <__ieee754_expf+0x116>
 80113d4:	ee76 6ac6 	vsub.f32	s13, s13, s12
 80113d8:	eec5 7a26 	vdiv.f32	s15, s10, s13
 80113dc:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80113e0:	ee35 0ac0 	vsub.f32	s0, s11, s0
 80113e4:	4770      	bx	lr
 80113e6:	4b30      	ldr	r3, [pc, #192]	; (80114a8 <__ieee754_expf+0x184>)
 80113e8:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80114ac <__ieee754_expf+0x188>
 80113ec:	eddf 6a30 	vldr	s13, [pc, #192]	; 80114b0 <__ieee754_expf+0x18c>
 80113f0:	4413      	add	r3, r2
 80113f2:	edd3 7a00 	vldr	s15, [r3]
 80113f6:	eee0 7a07 	vfma.f32	s15, s0, s14
 80113fa:	eeb0 7a40 	vmov.f32	s14, s0
 80113fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011402:	ee17 2a90 	vmov	r2, s15
 8011406:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801140a:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801140e:	eddf 6a29 	vldr	s13, [pc, #164]	; 80114b4 <__ieee754_expf+0x190>
 8011412:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011416:	e7be      	b.n	8011396 <__ieee754_expf+0x72>
 8011418:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
 801141c:	d20b      	bcs.n	8011436 <__ieee754_expf+0x112>
 801141e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80114b8 <__ieee754_expf+0x194>
 8011422:	ee70 6a26 	vadd.f32	s13, s0, s13
 8011426:	eef4 6ae5 	vcmpe.f32	s13, s11
 801142a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801142e:	dd02      	ble.n	8011436 <__ieee754_expf+0x112>
 8011430:	ee30 0a25 	vadd.f32	s0, s0, s11
 8011434:	4770      	bx	lr
 8011436:	2200      	movs	r2, #0
 8011438:	e7af      	b.n	801139a <__ieee754_expf+0x76>
 801143a:	ee36 6a66 	vsub.f32	s12, s12, s13
 801143e:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8011442:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8011446:	bfb8      	it	lt
 8011448:	3264      	addlt	r2, #100	; 0x64
 801144a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801144e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011452:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8011456:	ee17 3a90 	vmov	r3, s15
 801145a:	bfab      	itete	ge
 801145c:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8011460:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8011464:	ee00 3a10 	vmovge	s0, r3
 8011468:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 80114bc <__ieee754_expf+0x198>
 801146c:	bfbc      	itt	lt
 801146e:	ee00 3a10 	vmovlt	s0, r3
 8011472:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8011476:	4770      	bx	lr
 8011478:	00000000 	.word	0x00000000
 801147c:	42b17217 	.word	0x42b17217
 8011480:	42cff1b5 	.word	0x42cff1b5
 8011484:	3eb17218 	.word	0x3eb17218
 8011488:	3f851591 	.word	0x3f851591
 801148c:	0801c914 	.word	0x0801c914
 8011490:	0801c91c 	.word	0x0801c91c
 8011494:	3331bb4c 	.word	0x3331bb4c
 8011498:	b5ddea0e 	.word	0xb5ddea0e
 801149c:	388ab355 	.word	0x388ab355
 80114a0:	bb360b61 	.word	0xbb360b61
 80114a4:	3e2aaaab 	.word	0x3e2aaaab
 80114a8:	0801c90c 	.word	0x0801c90c
 80114ac:	3fb8aa3b 	.word	0x3fb8aa3b
 80114b0:	3f317180 	.word	0x3f317180
 80114b4:	3717f7d1 	.word	0x3717f7d1
 80114b8:	7149f2ca 	.word	0x7149f2ca
 80114bc:	0d800000 	.word	0x0d800000

080114c0 <_close>:
 80114c0:	4b02      	ldr	r3, [pc, #8]	; (80114cc <_close+0xc>)
 80114c2:	2258      	movs	r2, #88	; 0x58
 80114c4:	601a      	str	r2, [r3, #0]
 80114c6:	f04f 30ff 	mov.w	r0, #4294967295
 80114ca:	4770      	bx	lr
 80114cc:	20003774 	.word	0x20003774

080114d0 <_fstat>:
 80114d0:	4b02      	ldr	r3, [pc, #8]	; (80114dc <_fstat+0xc>)
 80114d2:	2258      	movs	r2, #88	; 0x58
 80114d4:	601a      	str	r2, [r3, #0]
 80114d6:	f04f 30ff 	mov.w	r0, #4294967295
 80114da:	4770      	bx	lr
 80114dc:	20003774 	.word	0x20003774

080114e0 <_isatty>:
 80114e0:	4b02      	ldr	r3, [pc, #8]	; (80114ec <_isatty+0xc>)
 80114e2:	2258      	movs	r2, #88	; 0x58
 80114e4:	601a      	str	r2, [r3, #0]
 80114e6:	2000      	movs	r0, #0
 80114e8:	4770      	bx	lr
 80114ea:	bf00      	nop
 80114ec:	20003774 	.word	0x20003774

080114f0 <_lseek>:
 80114f0:	4b02      	ldr	r3, [pc, #8]	; (80114fc <_lseek+0xc>)
 80114f2:	2258      	movs	r2, #88	; 0x58
 80114f4:	601a      	str	r2, [r3, #0]
 80114f6:	f04f 30ff 	mov.w	r0, #4294967295
 80114fa:	4770      	bx	lr
 80114fc:	20003774 	.word	0x20003774

08011500 <_read>:
 8011500:	4b02      	ldr	r3, [pc, #8]	; (801150c <_read+0xc>)
 8011502:	2258      	movs	r2, #88	; 0x58
 8011504:	601a      	str	r2, [r3, #0]
 8011506:	f04f 30ff 	mov.w	r0, #4294967295
 801150a:	4770      	bx	lr
 801150c:	20003774 	.word	0x20003774

08011510 <_write>:
 8011510:	4b02      	ldr	r3, [pc, #8]	; (801151c <_write+0xc>)
 8011512:	2258      	movs	r2, #88	; 0x58
 8011514:	601a      	str	r2, [r3, #0]
 8011516:	f04f 30ff 	mov.w	r0, #4294967295
 801151a:	4770      	bx	lr
 801151c:	20003774 	.word	0x20003774

08011520 <_init>:
 8011520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011522:	bf00      	nop
 8011524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011526:	bc08      	pop	{r3}
 8011528:	469e      	mov	lr, r3
 801152a:	4770      	bx	lr

0801152c <_fini>:
 801152c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801152e:	bf00      	nop
 8011530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011532:	bc08      	pop	{r3}
 8011534:	469e      	mov	lr, r3
 8011536:	4770      	bx	lr
