
F446Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f38  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000418  08007100  08007100  00017100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007518  08007518  000203a8  2**0
                  CONTENTS
  4 .ARM          00000008  08007518  08007518  00017518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007520  08007520  000203a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007520  08007520  00017520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007524  08007524  00017524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003a8  20000000  08007528  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001560  200003a8  080078d0  000203a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001908  080078d0  00021908  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000203a8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000203d8  2**0
                  CONTENTS, READONLY
 13 .debug_line   0003d4f5  00000000  00000000  0002041b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 00000064  00000000  00000000  0005d910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   0003821e  00000000  00000000  0005d974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00007d5d  00000000  00000000  00095b92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001ad0  00000000  00000000  0009d8f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f89c7  00000000  00000000  0009f3c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00002965  00000000  00000000  00197d87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loclists 00018174  00000000  00000000  0019a6ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0002c8f1  00000000  00000000  001b2860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00004f04  00000000  00000000  001df154  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200003a8 	.word	0x200003a8
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080070e8 	.word	0x080070e8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200003ac 	.word	0x200003ac
 8000204:	080070e8 	.word	0x080070e8

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b970 	b.w	8000500 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	460d      	mov	r5, r1
 8000240:	4604      	mov	r4, r0
 8000242:	460f      	mov	r7, r1
 8000244:	2b00      	cmp	r3, #0
 8000246:	d14a      	bne.n	80002de <__udivmoddi4+0xa6>
 8000248:	428a      	cmp	r2, r1
 800024a:	4694      	mov	ip, r2
 800024c:	d965      	bls.n	800031a <__udivmoddi4+0xe2>
 800024e:	fab2 f382 	clz	r3, r2
 8000252:	b143      	cbz	r3, 8000266 <__udivmoddi4+0x2e>
 8000254:	fa02 fc03 	lsl.w	ip, r2, r3
 8000258:	f1c3 0220 	rsb	r2, r3, #32
 800025c:	409f      	lsls	r7, r3
 800025e:	fa20 f202 	lsr.w	r2, r0, r2
 8000262:	4317      	orrs	r7, r2
 8000264:	409c      	lsls	r4, r3
 8000266:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800026a:	fa1f f58c 	uxth.w	r5, ip
 800026e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000272:	0c22      	lsrs	r2, r4, #16
 8000274:	fb0e 7711 	mls	r7, lr, r1, r7
 8000278:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800027c:	fb01 f005 	mul.w	r0, r1, r5
 8000280:	4290      	cmp	r0, r2
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x62>
 8000284:	eb1c 0202 	adds.w	r2, ip, r2
 8000288:	f101 37ff 	add.w	r7, r1, #4294967295
 800028c:	f080 811c 	bcs.w	80004c8 <__udivmoddi4+0x290>
 8000290:	4290      	cmp	r0, r2
 8000292:	f240 8119 	bls.w	80004c8 <__udivmoddi4+0x290>
 8000296:	3902      	subs	r1, #2
 8000298:	4462      	add	r2, ip
 800029a:	1a12      	subs	r2, r2, r0
 800029c:	b2a4      	uxth	r4, r4
 800029e:	fbb2 f0fe 	udiv	r0, r2, lr
 80002a2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002aa:	fb00 f505 	mul.w	r5, r0, r5
 80002ae:	42a5      	cmp	r5, r4
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x90>
 80002b2:	eb1c 0404 	adds.w	r4, ip, r4
 80002b6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ba:	f080 8107 	bcs.w	80004cc <__udivmoddi4+0x294>
 80002be:	42a5      	cmp	r5, r4
 80002c0:	f240 8104 	bls.w	80004cc <__udivmoddi4+0x294>
 80002c4:	4464      	add	r4, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002cc:	1b64      	subs	r4, r4, r5
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11e      	cbz	r6, 80002da <__udivmoddi4+0xa2>
 80002d2:	40dc      	lsrs	r4, r3
 80002d4:	2300      	movs	r3, #0
 80002d6:	e9c6 4300 	strd	r4, r3, [r6]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d908      	bls.n	80002f4 <__udivmoddi4+0xbc>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80ed 	beq.w	80004c2 <__udivmoddi4+0x28a>
 80002e8:	2100      	movs	r1, #0
 80002ea:	e9c6 0500 	strd	r0, r5, [r6]
 80002ee:	4608      	mov	r0, r1
 80002f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f4:	fab3 f183 	clz	r1, r3
 80002f8:	2900      	cmp	r1, #0
 80002fa:	d149      	bne.n	8000390 <__udivmoddi4+0x158>
 80002fc:	42ab      	cmp	r3, r5
 80002fe:	d302      	bcc.n	8000306 <__udivmoddi4+0xce>
 8000300:	4282      	cmp	r2, r0
 8000302:	f200 80f8 	bhi.w	80004f6 <__udivmoddi4+0x2be>
 8000306:	1a84      	subs	r4, r0, r2
 8000308:	eb65 0203 	sbc.w	r2, r5, r3
 800030c:	2001      	movs	r0, #1
 800030e:	4617      	mov	r7, r2
 8000310:	2e00      	cmp	r6, #0
 8000312:	d0e2      	beq.n	80002da <__udivmoddi4+0xa2>
 8000314:	e9c6 4700 	strd	r4, r7, [r6]
 8000318:	e7df      	b.n	80002da <__udivmoddi4+0xa2>
 800031a:	b902      	cbnz	r2, 800031e <__udivmoddi4+0xe6>
 800031c:	deff      	udf	#255	; 0xff
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	2b00      	cmp	r3, #0
 8000324:	f040 8090 	bne.w	8000448 <__udivmoddi4+0x210>
 8000328:	1a8a      	subs	r2, r1, r2
 800032a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032e:	fa1f fe8c 	uxth.w	lr, ip
 8000332:	2101      	movs	r1, #1
 8000334:	fbb2 f5f7 	udiv	r5, r2, r7
 8000338:	fb07 2015 	mls	r0, r7, r5, r2
 800033c:	0c22      	lsrs	r2, r4, #16
 800033e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000342:	fb0e f005 	mul.w	r0, lr, r5
 8000346:	4290      	cmp	r0, r2
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x124>
 800034a:	eb1c 0202 	adds.w	r2, ip, r2
 800034e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4290      	cmp	r0, r2
 8000356:	f200 80cb 	bhi.w	80004f0 <__udivmoddi4+0x2b8>
 800035a:	4645      	mov	r5, r8
 800035c:	1a12      	subs	r2, r2, r0
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb2 f0f7 	udiv	r0, r2, r7
 8000364:	fb07 2210 	mls	r2, r7, r0, r2
 8000368:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800036c:	fb0e fe00 	mul.w	lr, lr, r0
 8000370:	45a6      	cmp	lr, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x14e>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f100 32ff 	add.w	r2, r0, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x14c>
 800037e:	45a6      	cmp	lr, r4
 8000380:	f200 80bb 	bhi.w	80004fa <__udivmoddi4+0x2c2>
 8000384:	4610      	mov	r0, r2
 8000386:	eba4 040e 	sub.w	r4, r4, lr
 800038a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038e:	e79f      	b.n	80002d0 <__udivmoddi4+0x98>
 8000390:	f1c1 0720 	rsb	r7, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 fc07 	lsr.w	ip, r2, r7
 800039a:	ea4c 0c03 	orr.w	ip, ip, r3
 800039e:	fa05 f401 	lsl.w	r4, r5, r1
 80003a2:	fa20 f307 	lsr.w	r3, r0, r7
 80003a6:	40fd      	lsrs	r5, r7
 80003a8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ac:	4323      	orrs	r3, r4
 80003ae:	fbb5 f8f9 	udiv	r8, r5, r9
 80003b2:	fa1f fe8c 	uxth.w	lr, ip
 80003b6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ba:	0c1c      	lsrs	r4, r3, #16
 80003bc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c0:	fb08 f50e 	mul.w	r5, r8, lr
 80003c4:	42a5      	cmp	r5, r4
 80003c6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ca:	fa00 f001 	lsl.w	r0, r0, r1
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d8:	f080 8088 	bcs.w	80004ec <__udivmoddi4+0x2b4>
 80003dc:	42a5      	cmp	r5, r4
 80003de:	f240 8085 	bls.w	80004ec <__udivmoddi4+0x2b4>
 80003e2:	f1a8 0802 	sub.w	r8, r8, #2
 80003e6:	4464      	add	r4, ip
 80003e8:	1b64      	subs	r4, r4, r5
 80003ea:	b29d      	uxth	r5, r3
 80003ec:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f0:	fb09 4413 	mls	r4, r9, r3, r4
 80003f4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003fc:	45a6      	cmp	lr, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1c 0404 	adds.w	r4, ip, r4
 8000404:	f103 35ff 	add.w	r5, r3, #4294967295
 8000408:	d26c      	bcs.n	80004e4 <__udivmoddi4+0x2ac>
 800040a:	45a6      	cmp	lr, r4
 800040c:	d96a      	bls.n	80004e4 <__udivmoddi4+0x2ac>
 800040e:	3b02      	subs	r3, #2
 8000410:	4464      	add	r4, ip
 8000412:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000416:	fba3 9502 	umull	r9, r5, r3, r2
 800041a:	eba4 040e 	sub.w	r4, r4, lr
 800041e:	42ac      	cmp	r4, r5
 8000420:	46c8      	mov	r8, r9
 8000422:	46ae      	mov	lr, r5
 8000424:	d356      	bcc.n	80004d4 <__udivmoddi4+0x29c>
 8000426:	d053      	beq.n	80004d0 <__udivmoddi4+0x298>
 8000428:	b156      	cbz	r6, 8000440 <__udivmoddi4+0x208>
 800042a:	ebb0 0208 	subs.w	r2, r0, r8
 800042e:	eb64 040e 	sbc.w	r4, r4, lr
 8000432:	fa04 f707 	lsl.w	r7, r4, r7
 8000436:	40ca      	lsrs	r2, r1
 8000438:	40cc      	lsrs	r4, r1
 800043a:	4317      	orrs	r7, r2
 800043c:	e9c6 7400 	strd	r7, r4, [r6]
 8000440:	4618      	mov	r0, r3
 8000442:	2100      	movs	r1, #0
 8000444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000448:	f1c3 0120 	rsb	r1, r3, #32
 800044c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000450:	fa20 f201 	lsr.w	r2, r0, r1
 8000454:	fa25 f101 	lsr.w	r1, r5, r1
 8000458:	409d      	lsls	r5, r3
 800045a:	432a      	orrs	r2, r5
 800045c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000460:	fa1f fe8c 	uxth.w	lr, ip
 8000464:	fbb1 f0f7 	udiv	r0, r1, r7
 8000468:	fb07 1510 	mls	r5, r7, r0, r1
 800046c:	0c11      	lsrs	r1, r2, #16
 800046e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000472:	fb00 f50e 	mul.w	r5, r0, lr
 8000476:	428d      	cmp	r5, r1
 8000478:	fa04 f403 	lsl.w	r4, r4, r3
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x258>
 800047e:	eb1c 0101 	adds.w	r1, ip, r1
 8000482:	f100 38ff 	add.w	r8, r0, #4294967295
 8000486:	d22f      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 8000488:	428d      	cmp	r5, r1
 800048a:	d92d      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 800048c:	3802      	subs	r0, #2
 800048e:	4461      	add	r1, ip
 8000490:	1b49      	subs	r1, r1, r5
 8000492:	b292      	uxth	r2, r2
 8000494:	fbb1 f5f7 	udiv	r5, r1, r7
 8000498:	fb07 1115 	mls	r1, r7, r5, r1
 800049c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a0:	fb05 f10e 	mul.w	r1, r5, lr
 80004a4:	4291      	cmp	r1, r2
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x282>
 80004a8:	eb1c 0202 	adds.w	r2, ip, r2
 80004ac:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b0:	d216      	bcs.n	80004e0 <__udivmoddi4+0x2a8>
 80004b2:	4291      	cmp	r1, r2
 80004b4:	d914      	bls.n	80004e0 <__udivmoddi4+0x2a8>
 80004b6:	3d02      	subs	r5, #2
 80004b8:	4462      	add	r2, ip
 80004ba:	1a52      	subs	r2, r2, r1
 80004bc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c0:	e738      	b.n	8000334 <__udivmoddi4+0xfc>
 80004c2:	4631      	mov	r1, r6
 80004c4:	4630      	mov	r0, r6
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xa2>
 80004c8:	4639      	mov	r1, r7
 80004ca:	e6e6      	b.n	800029a <__udivmoddi4+0x62>
 80004cc:	4610      	mov	r0, r2
 80004ce:	e6fb      	b.n	80002c8 <__udivmoddi4+0x90>
 80004d0:	4548      	cmp	r0, r9
 80004d2:	d2a9      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d4:	ebb9 0802 	subs.w	r8, r9, r2
 80004d8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004dc:	3b01      	subs	r3, #1
 80004de:	e7a3      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004e0:	4645      	mov	r5, r8
 80004e2:	e7ea      	b.n	80004ba <__udivmoddi4+0x282>
 80004e4:	462b      	mov	r3, r5
 80004e6:	e794      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e8:	4640      	mov	r0, r8
 80004ea:	e7d1      	b.n	8000490 <__udivmoddi4+0x258>
 80004ec:	46d0      	mov	r8, sl
 80004ee:	e77b      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004f0:	3d02      	subs	r5, #2
 80004f2:	4462      	add	r2, ip
 80004f4:	e732      	b.n	800035c <__udivmoddi4+0x124>
 80004f6:	4608      	mov	r0, r1
 80004f8:	e70a      	b.n	8000310 <__udivmoddi4+0xd8>
 80004fa:	4464      	add	r4, ip
 80004fc:	3802      	subs	r0, #2
 80004fe:	e742      	b.n	8000386 <__udivmoddi4+0x14e>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000504:	f8df d034 	ldr.w	sp, [pc, #52]	; 800053c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000508:	480d      	ldr	r0, [pc, #52]	; (8000540 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800050a:	490e      	ldr	r1, [pc, #56]	; (8000544 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800050c:	4a0e      	ldr	r2, [pc, #56]	; (8000548 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800050e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000510:	e002      	b.n	8000518 <LoopCopyDataInit>

08000512 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000512:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000514:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000516:	3304      	adds	r3, #4

08000518 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000518:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800051a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800051c:	d3f9      	bcc.n	8000512 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800051e:	4a0b      	ldr	r2, [pc, #44]	; (800054c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000520:	4c0b      	ldr	r4, [pc, #44]	; (8000550 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000522:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000524:	e001      	b.n	800052a <LoopFillZerobss>

08000526 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000526:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000528:	3204      	adds	r2, #4

0800052a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800052a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800052c:	d3fb      	bcc.n	8000526 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800052e:	f003 fca7 	bl	8003e80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000532:	f006 fda7 	bl	8007084 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000536:	f000 fbd3 	bl	8000ce0 <main>
  bx  lr    
 800053a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800053c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000540:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000544:	200003a8 	.word	0x200003a8
  ldr r2, =_sidata
 8000548:	08007528 	.word	0x08007528
  ldr r2, =_sbss
 800054c:	200003a8 	.word	0x200003a8
  ldr r4, =_ebss
 8000550:	20001908 	.word	0x20001908

08000554 <BusFault_Handler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000554:	e7fe      	b.n	8000554 <BusFault_Handler>
	...

08000558 <ASPEP_start>:
  * @brief  Starts ASPEP communication by configuring UART.
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_start(ASPEP_Handle_t *pHandle)
{
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->fASPEP_HWInit(pHandle->HWIp);
 800055c:	6940      	ldr	r0, [r0, #20]
 800055e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000560:	4798      	blx	r3
    pHandle->ASPEP_State = ASPEP_IDLE;
 8000562:	2300      	movs	r3, #0
    pHandle->ASPEP_TL_State = WAITING_PACKET;
    pHandle->syncPacketCount = 0; /* Sync packet counter is reset only at startup*/

    /* Configure UART to receive first packet*/
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000564:	6d65      	ldr	r5, [r4, #84]	; 0x54
    pHandle->ASPEP_State = ASPEP_IDLE;
 8000566:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
    pHandle->syncPacketCount = 0; /* Sync packet counter is reset only at startup*/
 800056a:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 800056e:	6960      	ldr	r0, [r4, #20]
 8000570:	f104 011c 	add.w	r1, r4, #28
 8000574:	462b      	mov	r3, r5
 8000576:	2204      	movs	r2, #4
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 8000578:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 800057c:	4718      	bx	r3
 800057e:	bf00      	nop

08000580 <ASPEP_sendBeacon>:
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  * @param  *capabilities Matched capabilities between controller and performer
  */
void ASPEP_sendBeacon(ASPEP_Handle_t *pHandle, ASPEP_Capabilities_def *capabilities)
{
 8000580:	b410      	push	{r4}
  {
#endif
    uint32_t *packet = (uint32_t *)pHandle->ctrlBuffer.buffer; //cstat !MISRAC2012-Rule-11.3
    *packet = (BEACON
             | (((uint32_t)capabilities->version) << 4U)
             | (((uint32_t)capabilities->DATA_CRC) << 7U)
 8000582:	780b      	ldrb	r3, [r1, #0]
             | (((uint32_t)capabilities->version) << 4U)
 8000584:	790a      	ldrb	r2, [r1, #4]
             | (((uint32_t)capabilities->RX_maxSize) << 8U)
             | (((uint32_t)capabilities->TXS_maxSize) << 14U)
 8000586:	f891 c002 	ldrb.w	ip, [r1, #2]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 800058a:	4c1e      	ldr	r4, [pc, #120]	; (8000604 <ASPEP_sendBeacon+0x84>)
             | (((uint32_t)capabilities->DATA_CRC) << 7U)
 800058c:	01db      	lsls	r3, r3, #7
             | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 800058e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
             | (((uint32_t)capabilities->RX_maxSize) << 8U)
 8000592:	784a      	ldrb	r2, [r1, #1]
             | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 8000594:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000598:	78ca      	ldrb	r2, [r1, #3]
 800059a:	ea43 338c 	orr.w	r3, r3, ip, lsl #14
 800059e:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 80005a2:	b2da      	uxtb	r2, r3
 80005a4:	f042 0205 	orr.w	r2, r2, #5
  header &= 0x0fffffffU;
 80005a8:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 80005ac:	5ca2      	ldrb	r2, [r4, r2]
 80005ae:	ea82 2211 	eor.w	r2, r2, r1, lsr #8
 80005b2:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 80005b4:	5ca2      	ldrb	r2, [r4, r2]
 80005b6:	ea82 4211 	eor.w	r2, r2, r1, lsr #16
 80005ba:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 80005bc:	5ca2      	ldrb	r2, [r4, r2]
 80005be:	4c12      	ldr	r4, [pc, #72]	; (8000608 <ASPEP_sendBeacon+0x88>)
 80005c0:	ea82 6211 	eor.w	r2, r2, r1, lsr #24
  *headerPtr |= (uint32_t)crc << 28;
 80005c4:	5ca2      	ldrb	r2, [r4, r2]
 80005c6:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80005ca:	f043 0305 	orr.w	r3, r3, #5
 80005ce:	6203      	str	r3, [r0, #32]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005d0:	b672      	cpsid	i
  {
#endif
    /* Insert CRC header in the packet to send */
    ASPEP_ComputeHeaderCRC((uint32_t *)txBuffer); //cstat !MISRAC2012-Rule-11.5
    __disable_irq(); /*TODO: Disable High frequency task is enough */
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 80005d2:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80005d4:	b14b      	cbz	r3, 80005ea <ASPEP_sendBeacon+0x6a>
  __ASM volatile ("cpsie i" : : : "memory");
 80005d6:	b662      	cpsie	i
          pHandle->syncBuffer.length = bufferLength;
        }
      }
      else if(ASPEP_CTRL == dataType)
      {
        if (pHandle->ctrlBuffer.state != available)
 80005d8:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80005dc:	b913      	cbnz	r3, 80005e4 <ASPEP_sendBeacon+0x64>
        {
          result = ASPEP_BUFFER_ERROR;
        }
        else
        {
          pHandle->ctrlBuffer.state = pending;
 80005de:	2302      	movs	r3, #2
 80005e0:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
}
 80005e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80005e8:	4770      	bx	lr
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 80005ea:	f100 0120 	add.w	r1, r0, #32
        pHandle->ctrlBuffer.state = readLock;
 80005ee:	2303      	movs	r3, #3
 80005f0:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 80005f4:	6481      	str	r1, [r0, #72]	; 0x48
 80005f6:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 80005f8:	2204      	movs	r2, #4
 80005fa:	6d83      	ldr	r3, [r0, #88]	; 0x58
}
 80005fc:	f85d 4b04 	ldr.w	r4, [sp], #4
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8000600:	6940      	ldr	r0, [r0, #20]
 8000602:	4718      	bx	r3
 8000604:	08007110 	.word	0x08007110
 8000608:	08007100 	.word	0x08007100

0800060c <ASPEP_sendPing>:
{
 800060c:	b430      	push	{r4, r5}
                   | (uint32_t)((uint32_t)cBit << 5U)
 800060e:	014b      	lsls	r3, r1, #5
    uint8_t Nbit = pHandle->syncPacketCount & 0x1U; /* Keep only LSB */
 8000610:	f890 c060 	ldrb.w	ip, [r0, #96]	; 0x60
    uint8_t ipID = pHandle->liid & 0xFU;
 8000614:	f890 4063 	ldrb.w	r4, [r0, #99]	; 0x63
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000618:	4d1d      	ldr	r5, [pc, #116]	; (8000690 <ASPEP_sendPing+0x84>)
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 800061a:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 800061e:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
                   | (uint32_t)((uint32_t)Nbit << 6U)
 8000622:	f00c 0101 	and.w	r1, ip, #1
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000626:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 800062a:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
                   | (uint32_t)((uint32_t)ipID << 8U)
 800062e:	f004 040f 	and.w	r4, r4, #15
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000632:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000636:	b2d3      	uxtb	r3, r2
 8000638:	4c16      	ldr	r4, [pc, #88]	; (8000694 <ASPEP_sendPing+0x88>)
 800063a:	f043 0306 	orr.w	r3, r3, #6
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 800063e:	f042 0106 	orr.w	r1, r2, #6
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000642:	5ce3      	ldrb	r3, [r4, r3]
 8000644:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
 8000648:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 800064a:	5ce3      	ldrb	r3, [r4, r3]
 800064c:	ea83 4312 	eor.w	r3, r3, r2, lsr #16
 8000650:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000652:	5ce3      	ldrb	r3, [r4, r3]
 8000654:	ea83 6312 	eor.w	r3, r3, r2, lsr #24
  *headerPtr |= (uint32_t)crc << 28;
 8000658:	5ceb      	ldrb	r3, [r5, r3]
 800065a:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
 800065e:	6203      	str	r3, [r0, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8000660:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8000662:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8000664:	b143      	cbz	r3, 8000678 <ASPEP_sendPing+0x6c>
  __ASM volatile ("cpsie i" : : : "memory");
 8000666:	b662      	cpsie	i
        if (pHandle->ctrlBuffer.state != available)
 8000668:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800066c:	b913      	cbnz	r3, 8000674 <ASPEP_sendPing+0x68>
          pHandle->ctrlBuffer.state = pending;
 800066e:	2302      	movs	r3, #2
 8000670:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
}
 8000674:	bc30      	pop	{r4, r5}
 8000676:	4770      	bx	lr
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8000678:	f100 0120 	add.w	r1, r0, #32
        pHandle->ctrlBuffer.state = readLock;
 800067c:	2303      	movs	r3, #3
 800067e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8000682:	6481      	str	r1, [r0, #72]	; 0x48
 8000684:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8000686:	2204      	movs	r2, #4
 8000688:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800068a:	6940      	ldr	r0, [r0, #20]
}
 800068c:	bc30      	pop	{r4, r5}
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 800068e:	4718      	bx	r3
 8000690:	08007100 	.word	0x08007100
 8000694:	08007110 	.word	0x08007110

08000698 <ASPEP_getBuffer>:
    if (MCTL_SYNC == syncAsync)
 8000698:	2a0a      	cmp	r2, #10
{
 800069a:	b410      	push	{r4}
 800069c:	4603      	mov	r3, r0
    if (MCTL_SYNC == syncAsync)
 800069e:	d00b      	beq.n	80006b8 <ASPEP_getBuffer+0x20>
      if ((pHandle->asyncBufferA.state > writeLock) && (pHandle->asyncBufferB.state > writeLock))
 80006a0:	f890 2036 	ldrb.w	r2, [r0, #54]	; 0x36
 80006a4:	2a01      	cmp	r2, #1
 80006a6:	d921      	bls.n	80006ec <ASPEP_getBuffer+0x54>
 80006a8:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 80006ac:	2a01      	cmp	r2, #1
 80006ae:	d911      	bls.n	80006d4 <ASPEP_getBuffer+0x3c>
        result = false;
 80006b0:	2000      	movs	r0, #0
}
 80006b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80006b6:	4770      	bx	lr
      if (pHandle->syncBuffer.state <= writeLock) /* Possible values are free or writeLock*/
 80006b8:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
 80006bc:	2a01      	cmp	r2, #1
 80006be:	d8f7      	bhi.n	80006b0 <ASPEP_getBuffer+0x18>
        *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 80006c0:	6a82      	ldr	r2, [r0, #40]	; 0x28
        pHandle->syncBuffer.state = writeLock;
 80006c2:	2401      	movs	r4, #1
        *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 80006c4:	3204      	adds	r2, #4
 80006c6:	600a      	str	r2, [r1, #0]
        pHandle->syncBuffer.state = writeLock;
 80006c8:	f883 402e 	strb.w	r4, [r3, #46]	; 0x2e
  bool result = true;
 80006cc:	4620      	mov	r0, r4
}
 80006ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80006d2:	4770      	bx	lr
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 80006d4:	6b82      	ldr	r2, [r0, #56]	; 0x38
          pHandle->asyncBufferB.state = writeLock;
 80006d6:	2001      	movs	r0, #1
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferB;
 80006d8:	f103 0438 	add.w	r4, r3, #56	; 0x38
          pHandle->asyncBufferB.state = writeLock;
 80006dc:	f883 003e 	strb.w	r0, [r3, #62]	; 0x3e
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 80006e0:	3204      	adds	r2, #4
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferB;
 80006e2:	641c      	str	r4, [r3, #64]	; 0x40
}
 80006e4:	f85d 4b04 	ldr.w	r4, [sp], #4
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 80006e8:	600a      	str	r2, [r1, #0]
}
 80006ea:	4770      	bx	lr
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 80006ec:	6b02      	ldr	r2, [r0, #48]	; 0x30
          pHandle->asyncBufferA.state = writeLock;
 80006ee:	2001      	movs	r0, #1
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferA;
 80006f0:	f103 0430 	add.w	r4, r3, #48	; 0x30
          pHandle->asyncBufferA.state = writeLock;
 80006f4:	f883 0036 	strb.w	r0, [r3, #54]	; 0x36
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 80006f8:	3204      	adds	r2, #4
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferA;
 80006fa:	641c      	str	r4, [r3, #64]	; 0x40
}
 80006fc:	f85d 4b04 	ldr.w	r4, [sp], #4
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 8000700:	600a      	str	r2, [r1, #0]
}
 8000702:	4770      	bx	lr

08000704 <ASPEP_sendPacket>:
{
 8000704:	4684      	mov	ip, r0
    if (ASPEP_CONNECTED == pHandle-> ASPEP_State)
 8000706:	f890 0064 	ldrb.w	r0, [r0, #100]	; 0x64
 800070a:	2802      	cmp	r0, #2
 800070c:	d001      	beq.n	8000712 <ASPEP_sendPacket+0xe>
      result = ASPEP_NOT_CONNECTED;
 800070e:	2002      	movs	r0, #2
 8000710:	4770      	bx	lr
      tmpHeader = ((uint32_t)((uint32_t)txDataLengthTemp << (uint32_t)4) | (uint32_t)syncAsync);
 8000712:	ea43 1002 	orr.w	r0, r3, r2, lsl #4
      *header = tmpHeader;
 8000716:	f841 0c04 	str.w	r0, [r1, #-4]
      if (1U == pHandle->Capabilities.DATA_CRC)
 800071a:	f89c 006c 	ldrb.w	r0, [ip, #108]	; 0x6c
 800071e:	2801      	cmp	r0, #1
 8000720:	d104      	bne.n	800072c <ASPEP_sendPacket+0x28>
        packet[txDataLengthTemp] = (uint8_t)0xCA; /* Dummy CRC */
 8000722:	f64f 60ca 	movw	r0, #65226	; 0xfeca
 8000726:	5288      	strh	r0, [r1, r2]
        txDataLengthTemp += (uint16_t)ASPEP_DATACRC_SIZE;
 8000728:	3202      	adds	r2, #2
 800072a:	b292      	uxth	r2, r2
      if (MCTL_SYNC == syncAsync)
 800072c:	2b0a      	cmp	r3, #10
 800072e:	d105      	bne.n	800073c <ASPEP_sendPacket+0x38>
        if (pSupHandle->MCP_PacketAvailable)
 8000730:	f89c 0010 	ldrb.w	r0, [ip, #16]
 8000734:	b378      	cbz	r0, 8000796 <ASPEP_sendPacket+0x92>
          pSupHandle->MCP_PacketAvailable = false; /* CMD from controller is processed*/
 8000736:	2000      	movs	r0, #0
 8000738:	f88c 0010 	strb.w	r0, [ip, #16]
  uint32_t header = *headerPtr;
 800073c:	f851 0c04 	ldr.w	r0, [r1, #-4]
{
 8000740:	b570      	push	{r4, r5, r6, lr}
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000742:	4d35      	ldr	r5, [pc, #212]	; (8000818 <ASPEP_sendPacket+0x114>)
 8000744:	b2c4      	uxtb	r4, r0
        result = ASPEP_TXframeProcess(pHandle, syncAsync, header, txDataLengthTemp + (uint16_t)ASPEP_HEADER_SIZE);
 8000746:	3204      	adds	r2, #4
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000748:	5d2e      	ldrb	r6, [r5, r4]
 800074a:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800074e:	4074      	eors	r4, r6
      header--; /* Header ues 4*8 bits on top of txBuffer*/
 8000750:	f1a1 0e04 	sub.w	lr, r1, #4
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000754:	5d2e      	ldrb	r6, [r5, r4]
 8000756:	f3c0 4407 	ubfx	r4, r0, #16, #8
 800075a:	4074      	eors	r4, r6
        result = ASPEP_TXframeProcess(pHandle, syncAsync, header, txDataLengthTemp + (uint16_t)ASPEP_HEADER_SIZE);
 800075c:	b292      	uxth	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 800075e:	5d2c      	ldrb	r4, [r5, r4]
 8000760:	f3c0 6503 	ubfx	r5, r0, #24, #4
 8000764:	406c      	eors	r4, r5
 8000766:	4d2d      	ldr	r5, [pc, #180]	; (800081c <ASPEP_sendPacket+0x118>)
  *headerPtr |= (uint32_t)crc << 28;
 8000768:	5d2c      	ldrb	r4, [r5, r4]
 800076a:	ea40 7004 	orr.w	r0, r0, r4, lsl #28
 800076e:	f841 0c04 	str.w	r0, [r1, #-4]
  __ASM volatile ("cpsid i" : : : "memory");
 8000772:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8000774:	f8dc 1048 	ldr.w	r1, [ip, #72]	; 0x48
 8000778:	b1e9      	cbz	r1, 80007b6 <ASPEP_sendPacket+0xb2>
  __ASM volatile ("cpsie i" : : : "memory");
 800077a:	b662      	cpsie	i
      if (MCTL_ASYNC == dataType)
 800077c:	2b09      	cmp	r3, #9
 800077e:	d00c      	beq.n	800079a <ASPEP_sendPacket+0x96>
      else if (MCTL_SYNC == dataType)
 8000780:	2b0a      	cmp	r3, #10
 8000782:	d031      	beq.n	80007e8 <ASPEP_sendPacket+0xe4>
      else if(ASPEP_CTRL == dataType)
 8000784:	2b00      	cmp	r3, #0
 8000786:	d135      	bne.n	80007f4 <ASPEP_sendPacket+0xf0>
        if (pHandle->ctrlBuffer.state != available)
 8000788:	f89c 0024 	ldrb.w	r0, [ip, #36]	; 0x24
 800078c:	bb80      	cbnz	r0, 80007f0 <ASPEP_sendPacket+0xec>
          pHandle->ctrlBuffer.state = pending;
 800078e:	2302      	movs	r3, #2
 8000790:	f88c 3024 	strb.w	r3, [ip, #36]	; 0x24
}
 8000794:	bd70      	pop	{r4, r5, r6, pc}
          result = MCTL_SYNC_NOT_EXPECTED;
 8000796:	2001      	movs	r0, #1
}
 8000798:	4770      	bx	lr
        if (txBuffer != (uint8_t *)pHandle->lastRequestedAsyncBuff->buffer)
 800079a:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 800079e:	6819      	ldr	r1, [r3, #0]
          result = ASPEP_BUFFER_ERROR;
 80007a0:	458e      	cmp	lr, r1
 80007a2:	bf14      	ite	ne
 80007a4:	2003      	movne	r0, #3
 80007a6:	2000      	moveq	r0, #0
        if (NULL == pHandle->asyncNextBuffer)
 80007a8:	f8dc 1044 	ldr.w	r1, [ip, #68]	; 0x44
 80007ac:	b381      	cbz	r1, 8000810 <ASPEP_sendPacket+0x10c>
        pHandle->lastRequestedAsyncBuff->state = pending;
 80007ae:	2102      	movs	r1, #2
 80007b0:	7199      	strb	r1, [r3, #6]
        pHandle->lastRequestedAsyncBuff->length = bufferLength;
 80007b2:	809a      	strh	r2, [r3, #4]
}
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
      if (MCTL_ASYNC == dataType)
 80007b6:	2b09      	cmp	r3, #9
 80007b8:	d025      	beq.n	8000806 <ASPEP_sendPacket+0x102>
      else if (MCTL_SYNC == dataType)
 80007ba:	2b0a      	cmp	r3, #10
        pHandle->syncBuffer.state = readLock;
 80007bc:	f04f 0303 	mov.w	r3, #3
 80007c0:	bf0b      	itete	eq
 80007c2:	f88c 302e 	strbeq.w	r3, [ip, #46]	; 0x2e
        pHandle->ctrlBuffer.state = readLock;
 80007c6:	f88c 3024 	strbne.w	r3, [ip, #36]	; 0x24
        pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 80007ca:	f10c 0328 	addeq.w	r3, ip, #40	; 0x28
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 80007ce:	f10c 0320 	addne.w	r3, ip, #32
        pHandle->lockBuffer = (void *)pHandle->lastRequestedAsyncBuff;
 80007d2:	f8cc 3048 	str.w	r3, [ip, #72]	; 0x48
 80007d6:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 80007d8:	f8dc 3058 	ldr.w	r3, [ip, #88]	; 0x58
 80007dc:	f8dc 0014 	ldr.w	r0, [ip, #20]
 80007e0:	4671      	mov	r1, lr
 80007e2:	4798      	blx	r3
 80007e4:	2000      	movs	r0, #0
}
 80007e6:	bd70      	pop	{r4, r5, r6, pc}
        if (pHandle -> syncBuffer.state != writeLock)
 80007e8:	f89c 302e 	ldrb.w	r3, [ip, #46]	; 0x2e
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	d003      	beq.n	80007f8 <ASPEP_sendPacket+0xf4>
          result = ASPEP_BUFFER_ERROR;
 80007f0:	2003      	movs	r0, #3
}
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t result = ASPEP_OK;
 80007f4:	2000      	movs	r0, #0
}
 80007f6:	bd70      	pop	{r4, r5, r6, pc}
          pHandle->syncBuffer.state = pending;
 80007f8:	2302      	movs	r3, #2
 80007fa:	f88c 302e 	strb.w	r3, [ip, #46]	; 0x2e
          pHandle->syncBuffer.length = bufferLength;
 80007fe:	f8ac 202c 	strh.w	r2, [ip, #44]	; 0x2c
  uint8_t result = ASPEP_OK;
 8000802:	2000      	movs	r0, #0
}
 8000804:	bd70      	pop	{r4, r5, r6, pc}
        pHandle->lastRequestedAsyncBuff->state = readLock;
 8000806:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 800080a:	2103      	movs	r1, #3
 800080c:	7199      	strb	r1, [r3, #6]
        pHandle->lockBuffer = (void *)pHandle->lastRequestedAsyncBuff;
 800080e:	e7e0      	b.n	80007d2 <ASPEP_sendPacket+0xce>
          pHandle->asyncNextBuffer = pHandle->lastRequestedAsyncBuff;
 8000810:	f8cc 3044 	str.w	r3, [ip, #68]	; 0x44
 8000814:	e7cb      	b.n	80007ae <ASPEP_sendPacket+0xaa>
 8000816:	bf00      	nop
 8000818:	08007110 	.word	0x08007110
 800081c:	08007100 	.word	0x08007100

08000820 <ASPEP_HWDataTransmittedIT>:
  * Therefore, there is no need to protect this ISR against another higher priority ISR (HF Task).
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_HWDataTransmittedIT(ASPEP_Handle_t *pHandle)
{
 8000820:	b510      	push	{r4, lr}
  }
  else
  {
#endif
    /* First free previous readLock buffer */
    if (pHandle->ctrlBuffer.state == readLock)
 8000822:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8000826:	2b03      	cmp	r3, #3
{
 8000828:	4604      	mov	r4, r0
    if (pHandle->ctrlBuffer.state == readLock)
 800082a:	d013      	beq.n	8000854 <ASPEP_HWDataTransmittedIT+0x34>
      pHandle->ctrlBuffer.state = available;
    }
    else /* if previous buffer was not ASPEP_CTRL, then the buffer locked is a MCTL_Buff_t */
    {
      MCTL_Buff_t *tempBuff = (MCTL_Buff_t *)pHandle->lockBuffer; //cstat !MISRAC2012-Rule-11.5
      tempBuff->state = available;
 800082c:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800082e:	2100      	movs	r1, #0
 8000830:	7191      	strb	r1, [r2, #6]
    }
    if (pHandle->syncBuffer.state == pending)
 8000832:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
 8000836:	2a02      	cmp	r2, #2
 8000838:	d013      	beq.n	8000862 <ASPEP_HWDataTransmittedIT+0x42>
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
      pHandle->fASPEP_send(pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
      pHandle->syncBuffer.state = readLock;
    }
    /* Second prepare transfer of pending buffer */
    else if (pHandle->ctrlBuffer.state == pending)
 800083a:	2b02      	cmp	r3, #2
 800083c:	d11d      	bne.n	800087a <ASPEP_HWDataTransmittedIT+0x5a>
    {
      pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 800083e:	f100 0120 	add.w	r1, r0, #32
      pHandle->fASPEP_send(pHandle ->HWIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 8000842:	6d83      	ldr	r3, [r0, #88]	; 0x58
      pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 8000844:	6481      	str	r1, [r0, #72]	; 0x48
      pHandle->fASPEP_send(pHandle ->HWIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 8000846:	2204      	movs	r2, #4
 8000848:	6940      	ldr	r0, [r0, #20]
 800084a:	4798      	blx	r3
      pHandle->ctrlBuffer.state = readLock;
 800084c:	2303      	movs	r3, #3
 800084e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      __enable_irq();
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 8000852:	bd10      	pop	{r4, pc}
    if (pHandle->syncBuffer.state == pending)
 8000854:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
      pHandle->ctrlBuffer.state = available;
 8000858:	2200      	movs	r2, #0
    if (pHandle->syncBuffer.state == pending)
 800085a:	2b02      	cmp	r3, #2
      pHandle->ctrlBuffer.state = available;
 800085c:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    if (pHandle->syncBuffer.state == pending)
 8000860:	d10b      	bne.n	800087a <ASPEP_HWDataTransmittedIT+0x5a>
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 8000862:	f104 0028 	add.w	r0, r4, #40	; 0x28
      pHandle->fASPEP_send(pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 8000866:	6da3      	ldr	r3, [r4, #88]	; 0x58
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 8000868:	64a0      	str	r0, [r4, #72]	; 0x48
      pHandle->fASPEP_send(pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 800086a:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 800086c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800086e:	6960      	ldr	r0, [r4, #20]
 8000870:	4798      	blx	r3
      pHandle->syncBuffer.state = readLock;
 8000872:	2303      	movs	r3, #3
 8000874:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
}
 8000878:	bd10      	pop	{r4, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 800087a:	b672      	cpsid	i
      if (pHandle->asyncNextBuffer != NULL)
 800087c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800087e:	b1cb      	cbz	r3, 80008b4 <ASPEP_HWDataTransmittedIT+0x94>
        pHandle->asyncNextBuffer->state = readLock;
 8000880:	2203      	movs	r2, #3
        pHandle->lockBuffer = (void *)pHandle->asyncNextBuffer;
 8000882:	64a3      	str	r3, [r4, #72]	; 0x48
        pHandle->asyncNextBuffer->state = readLock;
 8000884:	719a      	strb	r2, [r3, #6]
        pHandle->fASPEP_send(pHandle ->HWIp, pHandle->asyncNextBuffer->buffer, pHandle->asyncNextBuffer->length);
 8000886:	6819      	ldr	r1, [r3, #0]
 8000888:	889a      	ldrh	r2, [r3, #4]
 800088a:	6960      	ldr	r0, [r4, #20]
 800088c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800088e:	4798      	blx	r3
        if ((pHandle->asyncBufferA.state == pending) || (pHandle->asyncBufferB.state == pending))
 8000890:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8000894:	2b02      	cmp	r3, #2
 8000896:	d007      	beq.n	80008a8 <ASPEP_HWDataTransmittedIT+0x88>
 8000898:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 800089c:	2b02      	cmp	r3, #2
 800089e:	d003      	beq.n	80008a8 <ASPEP_HWDataTransmittedIT+0x88>
          pHandle->asyncNextBuffer = NULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	6463      	str	r3, [r4, #68]	; 0x44
  __ASM volatile ("cpsie i" : : : "memory");
 80008a4:	b662      	cpsie	i
}
 80008a6:	bd10      	pop	{r4, pc}
          uint32_t temp = (uint32_t)&pHandle->asyncBufferA + (uint32_t)&pHandle->asyncBufferB
 80008a8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80008aa:	0063      	lsls	r3, r4, #1
 80008ac:	3368      	adds	r3, #104	; 0x68
 80008ae:	1a9b      	subs	r3, r3, r2
          pHandle->asyncNextBuffer = (MCTL_Buff_t *) temp; //cstat !MISRAC2012-Rule-11.4
 80008b0:	6463      	str	r3, [r4, #68]	; 0x44
        {
 80008b2:	e7f7      	b.n	80008a4 <ASPEP_HWDataTransmittedIT+0x84>
        pHandle->lockBuffer = NULL;
 80008b4:	64a3      	str	r3, [r4, #72]	; 0x48
 80008b6:	e7f5      	b.n	80008a4 <ASPEP_HWDataTransmittedIT+0x84>

080008b8 <ASPEP_RXframeProcess>:
    uint16_t packetNumber;
#if VALID_CRC_DATA
    bool validCRCData = true;
#endif
    *packetLength = 0;
    if (pHandle->NewPacketAvailable)
 80008b8:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
    uint32_t packetHeader = *((uint32_t *)pHandle->rxHeader); //cstat !MISRAC2012-Rule-11.3
 80008bc:	69c2      	ldr	r2, [r0, #28]
{
 80008be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    *packetLength = 0;
 80008c2:	2500      	movs	r5, #0
{
 80008c4:	4604      	mov	r4, r0
    *packetLength = 0;
 80008c6:	800d      	strh	r5, [r1, #0]
    if (pHandle->NewPacketAvailable)
 80008c8:	b193      	cbz	r3, 80008f0 <ASPEP_RXframeProcess+0x38>
    {
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
      switch (pHandle->ASPEP_State)
 80008ca:	f890 6064 	ldrb.w	r6, [r0, #100]	; 0x64
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
 80008ce:	f880 5061 	strb.w	r5, [r0, #97]	; 0x61
      switch (pHandle->ASPEP_State)
 80008d2:	2e01      	cmp	r6, #1
 80008d4:	d054      	beq.n	8000980 <ASPEP_RXframeProcess+0xc8>
 80008d6:	2e02      	cmp	r6, #2
 80008d8:	d03e      	beq.n	8000958 <ASPEP_RXframeProcess+0xa0>
 80008da:	2e00      	cmp	r6, #0
 80008dc:	d033      	beq.n	8000946 <ASPEP_RXframeProcess+0x8e>

        default:
          break;
      }
      /* The valid received packet is now safely consumes, we are ready to receive a new packet */
      pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 80008de:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80008e0:	6960      	ldr	r0, [r4, #20]
 80008e2:	2204      	movs	r2, #4
 80008e4:	f104 011c 	add.w	r1, r4, #28
 80008e8:	4798      	blx	r3
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
  return (result);
}
 80008ea:	4628      	mov	r0, r5
 80008ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if (pHandle->badPacketFlag > ASPEP_OK)
 80008f0:	f890 5062 	ldrb.w	r5, [r0, #98]	; 0x62
 80008f4:	2d00      	cmp	r5, #0
 80008f6:	d0f8      	beq.n	80008ea <ASPEP_RXframeProcess+0x32>
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 80008f8:	042b      	lsls	r3, r5, #16
 80008fa:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 80008fe:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8000902:	489b      	ldr	r0, [pc, #620]	; (8000b70 <ASPEP_RXframeProcess+0x2b8>)
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000904:	4d9b      	ldr	r5, [pc, #620]	; (8000b74 <ASPEP_RXframeProcess+0x2bc>)
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000906:	f082 0209 	eor.w	r2, r2, #9
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 800090a:	5c81      	ldrb	r1, [r0, r2]
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 800090c:	f043 020f 	orr.w	r2, r3, #15
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000910:	ea81 4313 	eor.w	r3, r1, r3, lsr #16
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000914:	5cc3      	ldrb	r3, [r0, r3]
  *headerPtr |= (uint32_t)crc << 28;
 8000916:	5ceb      	ldrb	r3, [r5, r3]
 8000918:	ea42 7303 	orr.w	r3, r2, r3, lsl #28
 800091c:	6223      	str	r3, [r4, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800091e:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8000920:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000922:	2b00      	cmp	r3, #0
 8000924:	d03a      	beq.n	800099c <ASPEP_RXframeProcess+0xe4>
  __ASM volatile ("cpsie i" : : : "memory");
 8000926:	b662      	cpsie	i
        if (pHandle->ctrlBuffer.state != available)
 8000928:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800092c:	b913      	cbnz	r3, 8000934 <ASPEP_RXframeProcess+0x7c>
          pHandle->ctrlBuffer.state = pending;
 800092e:	2302      	movs	r3, #2
 8000930:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      pHandle->badPacketFlag = ASPEP_OK;
 8000934:	2500      	movs	r5, #0
      pHandle->fASPEP_HWSync(pHandle->HWIp);
 8000936:	6960      	ldr	r0, [r4, #20]
 8000938:	6d23      	ldr	r3, [r4, #80]	; 0x50
      pHandle->badPacketFlag = ASPEP_OK;
 800093a:	f884 5062 	strb.w	r5, [r4, #98]	; 0x62
      pHandle->fASPEP_HWSync(pHandle->HWIp);
 800093e:	4798      	blx	r3
}
 8000940:	4628      	mov	r0, r5
 8000942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if (BEACON == pHandle->rxPacketType)
 8000946:	6e81      	ldr	r1, [r0, #104]	; 0x68
 8000948:	2905      	cmp	r1, #5
 800094a:	f000 809e 	beq.w	8000a8a <ASPEP_RXframeProcess+0x1d2>
          else if (PING == pHandle->rxPacketType)
 800094e:	2906      	cmp	r1, #6
 8000950:	f000 80e3 	beq.w	8000b1a <ASPEP_RXframeProcess+0x262>
  uint8_t *result = NULL; //cstat !MISRAC2012-Rule-8.13
 8000954:	4635      	mov	r5, r6
 8000956:	e7c2      	b.n	80008de <ASPEP_RXframeProcess+0x26>
          if (BEACON == pHandle->rxPacketType)
 8000958:	6e86      	ldr	r6, [r0, #104]	; 0x68
 800095a:	2e05      	cmp	r6, #5
 800095c:	d060      	beq.n	8000a20 <ASPEP_RXframeProcess+0x168>
          else if (PING == pHandle->rxPacketType)
 800095e:	2e06      	cmp	r6, #6
 8000960:	f000 80e2 	beq.w	8000b28 <ASPEP_RXframeProcess+0x270>
          else if (DATA_PACKET == pHandle->rxPacketType)
 8000964:	2e09      	cmp	r6, #9
 8000966:	d1ba      	bne.n	80008de <ASPEP_RXframeProcess+0x26>
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from controller */
 8000968:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
              *packetLength = pHandle->rxLength;
 800096c:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
              result = pHandle->rxBuffer;
 8000970:	69a5      	ldr	r5, [r4, #24]
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from controller */
 8000972:	3301      	adds	r3, #1
              pSupHandle->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 8000974:	2001      	movs	r0, #1
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from controller */
 8000976:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
              pSupHandle->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 800097a:	7420      	strb	r0, [r4, #16]
              *packetLength = pHandle->rxLength;
 800097c:	800a      	strh	r2, [r1, #0]
              result = pHandle->rxBuffer;
 800097e:	e7ae      	b.n	80008de <ASPEP_RXframeProcess+0x26>
          if (BEACON == pHandle->rxPacketType)
 8000980:	6e81      	ldr	r1, [r0, #104]	; 0x68
 8000982:	2905      	cmp	r1, #5
 8000984:	d016      	beq.n	80009b4 <ASPEP_RXframeProcess+0xfc>
          else if (PING == pHandle->rxPacketType)
 8000986:	2906      	cmp	r1, #6
 8000988:	d1a9      	bne.n	80008de <ASPEP_RXframeProcess+0x26>
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 800098a:	f3c2 320f 	ubfx	r2, r2, #12, #16
 800098e:	4631      	mov	r1, r6
 8000990:	f7ff fe3c 	bl	800060c <ASPEP_sendPing>
            pHandle->ASPEP_State = ASPEP_CONNECTED;
 8000994:	2302      	movs	r3, #2
 8000996:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 800099a:	e7a0      	b.n	80008de <ASPEP_RXframeProcess+0x26>
  (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 800099c:	f104 0120 	add.w	r1, r4, #32
        pHandle->ctrlBuffer.state = readLock;
 80009a0:	2303      	movs	r3, #3
 80009a2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 80009a6:	64a1      	str	r1, [r4, #72]	; 0x48
 80009a8:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 80009aa:	2204      	movs	r2, #4
 80009ac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80009ae:	6960      	ldr	r0, [r4, #20]
 80009b0:	4798      	blx	r3
  return (result);
 80009b2:	e7bf      	b.n	8000934 <ASPEP_RXframeProcess+0x7c>
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 80009b4:	7f03      	ldrb	r3, [r0, #28]
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 80009b6:	7f40      	ldrb	r0, [r0, #29]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 80009b8:	f894 106d 	ldrb.w	r1, [r4, #109]	; 0x6d
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80009bc:	f894 606c 	ldrb.w	r6, [r4, #108]	; 0x6c
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80009c0:	f894 706e 	ldrb.w	r7, [r4, #110]	; 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80009c4:	f894 e06f 	ldrb.w	lr, [r4, #111]	; 0x6f
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 80009c8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 80009cc:	09db      	lsrs	r3, r3, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 80009ce:	4281      	cmp	r1, r0
 80009d0:	bf28      	it	cs
 80009d2:	4601      	movcs	r1, r0
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80009d4:	42b3      	cmp	r3, r6
 80009d6:	469c      	mov	ip, r3
 80009d8:	bf28      	it	cs
 80009da:	46b4      	movcs	ip, r6
 80009dc:	f36c 0507 	bfi	r5, ip, #0, #8
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 80009e0:	f3c2 3c86 	ubfx	ip, r2, #14, #7
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 80009e4:	f3c2 5846 	ubfx	r8, r2, #21, #7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80009e8:	45bc      	cmp	ip, r7
 80009ea:	46e1      	mov	r9, ip
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80009ec:	f361 250f 	bfi	r5, r1, #8, #8
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80009f0:	bf28      	it	cs
 80009f2:	46b9      	movcs	r9, r7
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80009f4:	45f0      	cmp	r8, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80009f6:	f369 4517 	bfi	r5, r9, #16, #8
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80009fa:	46c1      	mov	r9, r8
 80009fc:	bf28      	it	cs
 80009fe:	46f1      	movcs	r9, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a00:	f369 651f 	bfi	r5, r9, #24, #8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000a04:	42b3      	cmp	r3, r6
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a06:	66e5      	str	r5, [r4, #108]	; 0x6c
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000a08:	f240 8093 	bls.w	8000b32 <ASPEP_RXframeProcess+0x27a>
              pHandle->ASPEP_State = ASPEP_IDLE;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
 8000a12:	f104 016c 	add.w	r1, r4, #108	; 0x6c
 8000a16:	4620      	mov	r0, r4
 8000a18:	f7ff fdb2 	bl	8000580 <ASPEP_sendBeacon>
  uint8_t *result = NULL; //cstat !MISRAC2012-Rule-8.13
 8000a1c:	2500      	movs	r5, #0
 8000a1e:	e75e      	b.n	80008de <ASPEP_RXframeProcess+0x26>
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000a20:	7f46      	ldrb	r6, [r0, #29]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a22:	f890 c06c 	ldrb.w	ip, [r0, #108]	; 0x6c
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8000a26:	7f03      	ldrb	r3, [r0, #28]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000a28:	f890 006d 	ldrb.w	r0, [r0, #109]	; 0x6d
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a2c:	f894 e06e 	ldrb.w	lr, [r4, #110]	; 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a30:	f894 806f 	ldrb.w	r8, [r4, #111]	; 0x6f
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000a34:	f006 063f 	and.w	r6, r6, #63	; 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8000a38:	09db      	lsrs	r3, r3, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000a3a:	42b0      	cmp	r0, r6
 8000a3c:	bf28      	it	cs
 8000a3e:	4630      	movcs	r0, r6
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a40:	4563      	cmp	r3, ip
 8000a42:	461f      	mov	r7, r3
 8000a44:	4629      	mov	r1, r5
 8000a46:	bf28      	it	cs
 8000a48:	4667      	movcs	r7, ip
 8000a4a:	f367 0107 	bfi	r1, r7, #0, #8
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000a4e:	f3c2 3786 	ubfx	r7, r2, #14, #7
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 8000a52:	f3c2 5946 	ubfx	r9, r2, #21, #7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a56:	4577      	cmp	r7, lr
 8000a58:	46ba      	mov	sl, r7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a5a:	f360 210f 	bfi	r1, r0, #8, #8
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a5e:	bf28      	it	cs
 8000a60:	46f2      	movcs	sl, lr
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a62:	45c1      	cmp	r9, r8
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a64:	f36a 4117 	bfi	r1, sl, #16, #8
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a68:	46ca      	mov	sl, r9
 8000a6a:	bf28      	it	cs
 8000a6c:	46c2      	movcs	sl, r8
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a6e:	f36a 611f 	bfi	r1, sl, #24, #8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000a72:	4563      	cmp	r3, ip
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a74:	66e1      	str	r1, [r4, #108]	; 0x6c
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000a76:	f104 016c 	add.w	r1, r4, #108	; 0x6c
 8000a7a:	d96b      	bls.n	8000b54 <ASPEP_RXframeProcess+0x29c>
 8000a7c:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
 8000a80:	4620      	mov	r0, r4
 8000a82:	f7ff fd7d 	bl	8000580 <ASPEP_sendBeacon>
  uint8_t *result = NULL; //cstat !MISRAC2012-Rule-8.13
 8000a86:	2500      	movs	r5, #0
 8000a88:	e729      	b.n	80008de <ASPEP_RXframeProcess+0x26>
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000a8a:	7f45      	ldrb	r5, [r0, #29]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000a8c:	f890 106d 	ldrb.w	r1, [r0, #109]	; 0x6d
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8000a90:	7f03      	ldrb	r3, [r0, #28]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a92:	f890 e06c 	ldrb.w	lr, [r0, #108]	; 0x6c
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a96:	f890 706e 	ldrb.w	r7, [r0, #110]	; 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a9a:	f894 906f 	ldrb.w	r9, [r4, #111]	; 0x6f
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000a9e:	f005 053f 	and.w	r5, r5, #63	; 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8000aa2:	09db      	lsrs	r3, r3, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000aa4:	42a9      	cmp	r1, r5
 8000aa6:	bf28      	it	cs
 8000aa8:	4629      	movcs	r1, r5
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000aaa:	4573      	cmp	r3, lr
 8000aac:	4618      	mov	r0, r3
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000aae:	f3c2 3886 	ubfx	r8, r2, #14, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000ab2:	bf28      	it	cs
 8000ab4:	4670      	movcs	r0, lr
 8000ab6:	f360 0607 	bfi	r6, r0, #0, #8
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 8000aba:	f3c2 5a46 	ubfx	sl, r2, #21, #7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000abe:	45b8      	cmp	r8, r7
 8000ac0:	4640      	mov	r0, r8
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000ac2:	f361 260f 	bfi	r6, r1, #8, #8
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000ac6:	bf28      	it	cs
 8000ac8:	4638      	movcs	r0, r7
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000aca:	45ca      	cmp	sl, r9
 8000acc:	46d4      	mov	ip, sl
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000ace:	f360 4617 	bfi	r6, r0, #16, #8
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000ad2:	bf28      	it	cs
 8000ad4:	46cc      	movcs	ip, r9
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000ad6:	f36c 661f 	bfi	r6, ip, #24, #8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000ada:	4573      	cmp	r3, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000adc:	66e6      	str	r6, [r4, #108]	; 0x6c
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000ade:	d898      	bhi.n	8000a12 <ASPEP_RXframeProcess+0x15a>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8000ae0:	428d      	cmp	r5, r1
 8000ae2:	d896      	bhi.n	8000a12 <ASPEP_RXframeProcess+0x15a>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8000ae4:	45b8      	cmp	r8, r7
 8000ae6:	d894      	bhi.n	8000a12 <ASPEP_RXframeProcess+0x15a>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8000ae8:	45ca      	cmp	sl, r9
 8000aea:	d892      	bhi.n	8000a12 <ASPEP_RXframeProcess+0x15a>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000aec:	f3c2 1302 	ubfx	r3, r2, #4, #3
 8000af0:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
 8000af4:	429a      	cmp	r2, r3
 8000af6:	d18c      	bne.n	8000a12 <ASPEP_RXframeProcess+0x15a>
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000af8:	1c4b      	adds	r3, r1, #1
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000afa:	1c42      	adds	r2, r0, #1
 8000afc:	b2d2      	uxtb	r2, r2
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000afe:	b2db      	uxtb	r3, r3
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000b00:	0152      	lsls	r2, r2, #5
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
 8000b02:	ea4f 1c8c 	mov.w	ip, ip, lsl #6
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000b06:	015b      	lsls	r3, r3, #5
              pHandle->ASPEP_State = ASPEP_CONFIGURED;
 8000b08:	2101      	movs	r1, #1
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000b0a:	81a2      	strh	r2, [r4, #12]
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
 8000b0c:	f8a4 c00e 	strh.w	ip, [r4, #14]
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000b10:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
              pHandle->ASPEP_State = ASPEP_CONFIGURED;
 8000b14:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
 8000b18:	e77b      	b.n	8000a12 <ASPEP_RXframeProcess+0x15a>
            ASPEP_sendPing(pHandle, ASPEP_PING_RESET, packetNumber);
 8000b1a:	f3c2 320f 	ubfx	r2, r2, #12, #16
 8000b1e:	4631      	mov	r1, r6
 8000b20:	f7ff fd74 	bl	800060c <ASPEP_sendPing>
  uint8_t *result = NULL; //cstat !MISRAC2012-Rule-8.13
 8000b24:	4635      	mov	r5, r6
 8000b26:	e6da      	b.n	80008de <ASPEP_RXframeProcess+0x26>
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 8000b28:	7f42      	ldrb	r2, [r0, #29]
 8000b2a:	2101      	movs	r1, #1
 8000b2c:	f7ff fd6e 	bl	800060c <ASPEP_sendPing>
 8000b30:	e6d5      	b.n	80008de <ASPEP_RXframeProcess+0x26>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8000b32:	4288      	cmp	r0, r1
 8000b34:	f63f af6a 	bhi.w	8000a0c <ASPEP_RXframeProcess+0x154>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8000b38:	45bc      	cmp	ip, r7
 8000b3a:	f63f af67 	bhi.w	8000a0c <ASPEP_RXframeProcess+0x154>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8000b3e:	45f0      	cmp	r8, lr
 8000b40:	f63f af64 	bhi.w	8000a0c <ASPEP_RXframeProcess+0x154>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000b44:	f894 1070 	ldrb.w	r1, [r4, #112]	; 0x70
 8000b48:	f3c2 1302 	ubfx	r3, r2, #4, #3
 8000b4c:	4299      	cmp	r1, r3
 8000b4e:	f47f af5d 	bne.w	8000a0c <ASPEP_RXframeProcess+0x154>
 8000b52:	e75e      	b.n	8000a12 <ASPEP_RXframeProcess+0x15a>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8000b54:	4286      	cmp	r6, r0
 8000b56:	d891      	bhi.n	8000a7c <ASPEP_RXframeProcess+0x1c4>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8000b58:	4577      	cmp	r7, lr
 8000b5a:	d88f      	bhi.n	8000a7c <ASPEP_RXframeProcess+0x1c4>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8000b5c:	45c1      	cmp	r9, r8
 8000b5e:	d88d      	bhi.n	8000a7c <ASPEP_RXframeProcess+0x1c4>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000b60:	f894 5070 	ldrb.w	r5, [r4, #112]	; 0x70
 8000b64:	f3c2 1302 	ubfx	r3, r2, #4, #3
              pHandle->ASPEP_State = ASPEP_IDLE;
 8000b68:	1aeb      	subs	r3, r5, r3
 8000b6a:	425d      	negs	r5, r3
 8000b6c:	415d      	adcs	r5, r3
 8000b6e:	e785      	b.n	8000a7c <ASPEP_RXframeProcess+0x1c4>
 8000b70:	08007110 	.word	0x08007110
 8000b74:	08007100 	.word	0x08007100

08000b78 <ASPEP_HWDataReceivedIT>:
  * If the packet received contains an error in the header, the HW IP will be re-synchronised first, and DMA will be configured after.
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_HWDataReceivedIT(ASPEP_Handle_t *pHandle)
{
 8000b78:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    switch (pHandle->ASPEP_TL_State)
 8000b7a:	f890 3065 	ldrb.w	r3, [r0, #101]	; 0x65
{
 8000b7e:	4604      	mov	r4, r0
    switch (pHandle->ASPEP_TL_State)
 8000b80:	b13b      	cbz	r3, 8000b92 <ASPEP_HWDataReceivedIT+0x1a>
 8000b82:	2b01      	cmp	r3, #1
 8000b84:	d104      	bne.n	8000b90 <ASPEP_HWDataReceivedIT+0x18>
        break;
      }

      case WAITING_PAYLOAD:
      {
        pHandle->ASPEP_TL_State = WAITING_PACKET;
 8000b86:	2200      	movs	r2, #0
 8000b88:	f880 2065 	strb.w	r2, [r0, #101]	; 0x65
        /* Payload received, */
        pHandle->NewPacketAvailable = true;
 8000b8c:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61
        break;
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 8000b90:	bd10      	pop	{r4, pc}
        if (ASPEP_CheckHeaderCRC(*(uint32_t *)pHandle->rxHeader) == true) //cstat !MISRAC2012-Rule-11.3
 8000b92:	69c1      	ldr	r1, [r0, #28]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000b94:	4a1e      	ldr	r2, [pc, #120]	; (8000c10 <ASPEP_HWDataReceivedIT+0x98>)
 8000b96:	b2cb      	uxtb	r3, r1
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000b98:	5cd3      	ldrb	r3, [r2, r3]
 8000b9a:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 8000b9e:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000ba0:	5cd3      	ldrb	r3, [r2, r3]
 8000ba2:	ea83 4311 	eor.w	r3, r3, r1, lsr #16
 8000ba6:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 24U) & 0xffU)];
 8000ba8:	5cd3      	ldrb	r3, [r2, r3]
 8000baa:	ea83 6311 	eor.w	r3, r3, r1, lsr #24
        if (ASPEP_CheckHeaderCRC(*(uint32_t *)pHandle->rxHeader) == true) //cstat !MISRAC2012-Rule-11.3
 8000bae:	5cd3      	ldrb	r3, [r2, r3]
 8000bb0:	b95b      	cbnz	r3, 8000bca <ASPEP_HWDataReceivedIT+0x52>
          pHandle->rxPacketType = (ASPEP_packetType)(((uint32_t)pHandle->rxHeader[0]) & ID_MASK);
 8000bb2:	7f03      	ldrb	r3, [r0, #28]
 8000bb4:	f003 030f 	and.w	r3, r3, #15
 8000bb8:	2b06      	cmp	r3, #6
 8000bba:	6683      	str	r3, [r0, #104]	; 0x68
          switch (pHandle->rxPacketType)
 8000bbc:	d809      	bhi.n	8000bd2 <ASPEP_HWDataReceivedIT+0x5a>
 8000bbe:	2b04      	cmp	r3, #4
 8000bc0:	d81e      	bhi.n	8000c00 <ASPEP_HWDataReceivedIT+0x88>
              pHandle->badPacketFlag = ASPEP_BAD_PACKET_TYPE;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
}
 8000bc8:	bd10      	pop	{r4, pc}
          pHandle->badPacketFlag = ASPEP_BAD_CRC_HEADER;
 8000bca:	2304      	movs	r3, #4
 8000bcc:	f880 3062 	strb.w	r3, [r0, #98]	; 0x62
}
 8000bd0:	bd10      	pop	{r4, pc}
 8000bd2:	2b09      	cmp	r3, #9
 8000bd4:	d1f5      	bne.n	8000bc2 <ASPEP_HWDataReceivedIT+0x4a>
              pHandle->rxLength = (uint16_t)((*((uint16_t *)pHandle->rxHeader) & 0x1FFF0U) >> (uint16_t)4);
 8000bd6:	8b83      	ldrh	r3, [r0, #28]
 8000bd8:	091b      	lsrs	r3, r3, #4
 8000bda:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
              if (0U == pHandle->rxLength) /* data packet with length 0 is a valid packet */
 8000bde:	b17b      	cbz	r3, 8000c00 <ASPEP_HWDataReceivedIT+0x88>
              else if (pHandle->rxLength <= pHandle->maxRXPayload)
 8000be0:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
 8000be4:	429a      	cmp	r2, r3
 8000be6:	d30f      	bcc.n	8000c08 <ASPEP_HWDataReceivedIT+0x90>
                pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxBuffer,  /* need to read + 2 bytes CRC*/
 8000be8:	f890 206c 	ldrb.w	r2, [r0, #108]	; 0x6c
 8000bec:	6981      	ldr	r1, [r0, #24]
 8000bee:	6940      	ldr	r0, [r0, #20]
 8000bf0:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8000bf4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000bf6:	4798      	blx	r3
                pHandle->ASPEP_TL_State = WAITING_PAYLOAD;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
}
 8000bfe:	bd10      	pop	{r4, pc}
              pHandle->NewPacketAvailable = true;
 8000c00:	2301      	movs	r3, #1
 8000c02:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
}
 8000c06:	bd10      	pop	{r4, pc}
                pHandle->badPacketFlag = ASPEP_BAD_PACKET_SIZE;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	f880 3062 	strb.w	r3, [r0, #98]	; 0x62
}
 8000c0e:	bd10      	pop	{r4, pc}
 8000c10:	08007110 	.word	0x08007110

08000c14 <ASPEP_HWDMAReset>:
  * @brief  Resets DMA after debugger has stopped the MCU.
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_HWDMAReset(ASPEP_Handle_t *pHandle)
{
 8000c14:	4601      	mov	r1, r0
  {
#endif
    /* We must reset the RX state machine to be sure to not be in Waiting packet state */
    /* Otherwise the arrival of a new packet will trigger a NewPacketAvailable despite */
    /* the fact that bytes have been lost because of overrun (debugger paused for instance) */
    pHandle->ASPEP_TL_State = WAITING_PACKET;
 8000c16:	2200      	movs	r2, #0
 8000c18:	f880 2065 	strb.w	r2, [r0, #101]	; 0x65
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000c1c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8000c1e:	6940      	ldr	r0, [r0, #20]
 8000c20:	2204      	movs	r2, #4
 8000c22:	311c      	adds	r1, #28
 8000c24:	4718      	bx	r3
 8000c26:	bf00      	nop

08000c28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c28:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c2a:	2300      	movs	r3, #0
{
 8000c2c:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c2e:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8000c32:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c36:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8000c3a:	e9cd 3305 	strd	r3, r3, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c3e:	4926      	ldr	r1, [pc, #152]	; (8000cd8 <SystemClock_Config+0xb0>)
 8000c40:	9301      	str	r3, [sp, #4]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c42:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c44:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c46:	4a25      	ldr	r2, [pc, #148]	; (8000cdc <SystemClock_Config+0xb4>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c48:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8000c4c:	6408      	str	r0, [r1, #64]	; 0x40
 8000c4e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000c50:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8000c54:	9101      	str	r1, [sp, #4]
 8000c56:	9901      	ldr	r1, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c58:	9302      	str	r3, [sp, #8]
 8000c5a:	6813      	ldr	r3, [r2, #0]
 8000c5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c60:	6013      	str	r3, [r2, #0]
 8000c62:	6813      	ldr	r3, [r2, #0]
 8000c64:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c68:	2402      	movs	r4, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c6a:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c6c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c70:	ed9f 7b17 	vldr	d7, [pc, #92]	; 8000cd0 <SystemClock_Config+0xa8>
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c74:	e9cd 410e 	strd	r4, r1, [sp, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c78:	9802      	ldr	r0, [sp, #8]
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 180;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c7a:	9414      	str	r4, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c7c:	2002      	movs	r0, #2
 8000c7e:	2102      	movs	r1, #2
 8000c80:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c84:	2204      	movs	r2, #4
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000c86:	23b4      	movs	r3, #180	; 0xb4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c88:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c8a:	ed8d 7b08 	vstr	d7, [sp, #32]
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c8e:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000c90:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c92:	f003 ff91 	bl	8004bb8 <HAL_RCC_OscConfig>
 8000c96:	b108      	cbz	r0, 8000c9c <SystemClock_Config+0x74>
  __ASM volatile ("cpsid i" : : : "memory");
 8000c98:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c9a:	e7fe      	b.n	8000c9a <SystemClock_Config+0x72>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000c9c:	f003 fe36 	bl	800490c <HAL_PWREx_EnableOverDrive>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	b108      	cbz	r0, 8000ca8 <SystemClock_Config+0x80>
 8000ca4:	b672      	cpsid	i
  while (1)
 8000ca6:	e7fe      	b.n	8000ca6 <SystemClock_Config+0x7e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ca8:	220f      	movs	r2, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000caa:	e9cd 2403 	strd	r2, r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000cae:	f44f 55a0 	mov.w	r5, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000cb2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000cb6:	a803      	add	r0, sp, #12
 8000cb8:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000cba:	e9cd 3505 	strd	r3, r5, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000cbe:	9207      	str	r2, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000cc0:	f003 fe60 	bl	8004984 <HAL_RCC_ClockConfig>
 8000cc4:	b108      	cbz	r0, 8000cca <SystemClock_Config+0xa2>
 8000cc6:	b672      	cpsid	i
  while (1)
 8000cc8:	e7fe      	b.n	8000cc8 <SystemClock_Config+0xa0>
}
 8000cca:	b017      	add	sp, #92	; 0x5c
 8000ccc:	bd30      	pop	{r4, r5, pc}
 8000cce:	bf00      	nop
 8000cd0:	00000001 	.word	0x00000001
 8000cd4:	00010000 	.word	0x00010000
 8000cd8:	40023800 	.word	0x40023800
 8000cdc:	40007000 	.word	0x40007000

08000ce0 <main>:
{
 8000ce0:	b580      	push	{r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce2:	2400      	movs	r4, #0
{
 8000ce4:	b09c      	sub	sp, #112	; 0x70
  HAL_Init();
 8000ce6:	f003 f8f9 	bl	8003edc <HAL_Init>
  SystemClock_Config();
 8000cea:	f7ff ff9d 	bl	8000c28 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cee:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
 8000cf2:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cf6:	4d97      	ldr	r5, [pc, #604]	; (8000f54 <main+0x274>)
 8000cf8:	9401      	str	r4, [sp, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfa:	9417      	str	r4, [sp, #92]	; 0x5c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cfc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|SPI3_CS_Pin, GPIO_PIN_RESET);
 8000cfe:	4896      	ldr	r0, [pc, #600]	; (8000f58 <main+0x278>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d00:	f043 0304 	orr.w	r3, r3, #4
 8000d04:	632b      	str	r3, [r5, #48]	; 0x30
 8000d06:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000d08:	f003 0304 	and.w	r3, r3, #4
 8000d0c:	9301      	str	r3, [sp, #4]
 8000d0e:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d10:	9402      	str	r4, [sp, #8]
 8000d12:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000d14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d18:	632b      	str	r3, [r5, #48]	; 0x30
 8000d1a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000d1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d20:	9302      	str	r3, [sp, #8]
 8000d22:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d24:	9403      	str	r4, [sp, #12]
 8000d26:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000d28:	f043 0301 	orr.w	r3, r3, #1
 8000d2c:	632b      	str	r3, [r5, #48]	; 0x30
 8000d2e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000d30:	f003 0301 	and.w	r3, r3, #1
 8000d34:	9303      	str	r3, [sp, #12]
 8000d36:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d38:	9404      	str	r4, [sp, #16]
 8000d3a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000d3c:	f043 0302 	orr.w	r3, r3, #2
 8000d40:	632b      	str	r3, [r5, #48]	; 0x30
 8000d42:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000d44:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|SPI3_CS_Pin, GPIO_PIN_RESET);
 8000d48:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d4a:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|SPI3_CS_Pin, GPIO_PIN_RESET);
 8000d4c:	f248 0110 	movw	r1, #32784	; 0x8010
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d50:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|SPI3_CS_Pin, GPIO_PIN_RESET);
 8000d52:	f003 fdd7 	bl	8004904 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 8000d56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8000d5a:	4880      	ldr	r0, [pc, #512]	; (8000f5c <main+0x27c>)
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 8000d5c:	9313      	str	r3, [sp, #76]	; 0x4c
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8000d5e:	a913      	add	r1, sp, #76	; 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d60:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d64:	2601      	movs	r6, #1
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d66:	9314      	str	r3, [sp, #80]	; 0x50
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d68:	9415      	str	r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8000d6a:	f003 fcb7 	bl	80046dc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SPI1_CS_Pin|SPI3_CS_Pin;
 8000d6e:	f248 0310 	movw	r3, #32784	; 0x8010
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d72:	4879      	ldr	r0, [pc, #484]	; (8000f58 <main+0x278>)
 8000d74:	a913      	add	r1, sp, #76	; 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d76:	e9cd 3613 	strd	r3, r6, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7a:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d7e:	f003 fcad 	bl	80046dc <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d82:	9400      	str	r4, [sp, #0]
 8000d84:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000d86:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d8a:	632b      	str	r3, [r5, #48]	; 0x30
 8000d8c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  hadc1.Instance = ADC1;
 8000d8e:	4d74      	ldr	r5, [pc, #464]	; (8000f60 <main+0x280>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000d94:	2720      	movs	r7, #32
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d96:	9300      	str	r3, [sp, #0]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000d98:	463a      	mov	r2, r7
 8000d9a:	4621      	mov	r1, r4
 8000d9c:	a813      	add	r0, sp, #76	; 0x4c
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d9e:	9b00      	ldr	r3, [sp, #0]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000da0:	f006 f968 	bl	8007074 <memset>
  hadc1.Instance = ADC1;
 8000da4:	4b6f      	ldr	r3, [pc, #444]	; (8000f64 <main+0x284>)
 8000da6:	602b      	str	r3, [r5, #0]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000da8:	4b6f      	ldr	r3, [pc, #444]	; (8000f68 <main+0x288>)
 8000daa:	62ab      	str	r3, [r5, #40]	; 0x28
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000dac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000db0:	606b      	str	r3, [r5, #4]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000db2:	4628      	mov	r0, r5
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000db4:	f44f 6300 	mov.w	r3, #2048	; 0x800
  ADC_ChannelConfTypeDef sConfig = {0};
 8000db8:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
 8000dbc:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000dc0:	60ac      	str	r4, [r5, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000dc2:	612e      	str	r6, [r5, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000dc4:	762c      	strb	r4, [r5, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dc6:	f885 4020 	strb.w	r4, [r5, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dca:	62ec      	str	r4, [r5, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000dcc:	f885 4030 	strb.w	r4, [r5, #48]	; 0x30
  hadc1.Init.NbrOfConversion = 1;
 8000dd0:	61ee      	str	r6, [r5, #28]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dd2:	616e      	str	r6, [r5, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000dd4:	60eb      	str	r3, [r5, #12]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dd6:	f003 f8ad 	bl	8003f34 <HAL_ADC_Init>
 8000dda:	b108      	cbz	r0, 8000de0 <main+0x100>
 8000ddc:	b672      	cpsid	i
  while (1)
 8000dde:	e7fe      	b.n	8000dde <main+0xfe>
  sConfigInjected.InjectedRank = 1;
 8000de0:	e9cd 0613 	strd	r0, r6, [sp, #76]	; 0x4c
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 8000de4:	9019      	str	r0, [sp, #100]	; 0x64
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000de6:	f8ad 0060 	strh.w	r0, [sp, #96]	; 0x60
  sConfigInjected.InjectedOffset = 0;
 8000dea:	9016      	str	r0, [sp, #88]	; 0x58
  sConfigInjected.InjectedNbrOfConversion = 3;
 8000dec:	2403      	movs	r4, #3
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_RISING;
 8000dee:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000df2:	a913      	add	r1, sp, #76	; 0x4c
 8000df4:	4628      	mov	r0, r5
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000df6:	9615      	str	r6, [sp, #84]	; 0x54
  sConfigInjected.InjectedNbrOfConversion = 3;
 8000df8:	9417      	str	r4, [sp, #92]	; 0x5c
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_RISING;
 8000dfa:	931a      	str	r3, [sp, #104]	; 0x68
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000dfc:	f003 fa02 	bl	8004204 <HAL_ADCEx_InjectedConfigChannel>
 8000e00:	b108      	cbz	r0, 8000e06 <main+0x126>
 8000e02:	b672      	cpsid	i
  while (1)
 8000e04:	e7fe      	b.n	8000e04 <main+0x124>
  sConfigInjected.InjectedRank = 2;
 8000e06:	230b      	movs	r3, #11
 8000e08:	f04f 0802 	mov.w	r8, #2
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000e0c:	a913      	add	r1, sp, #76	; 0x4c
 8000e0e:	4628      	mov	r0, r5
  sConfigInjected.InjectedRank = 2;
 8000e10:	e9cd 3813 	strd	r3, r8, [sp, #76]	; 0x4c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000e14:	f003 f9f6 	bl	8004204 <HAL_ADCEx_InjectedConfigChannel>
 8000e18:	b108      	cbz	r0, 8000e1e <main+0x13e>
 8000e1a:	b672      	cpsid	i
  while (1)
 8000e1c:	e7fe      	b.n	8000e1c <main+0x13c>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_10;
 8000e1e:	230a      	movs	r3, #10
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000e20:	a913      	add	r1, sp, #76	; 0x4c
 8000e22:	4628      	mov	r0, r5
  sConfigInjected.InjectedRank = 3;
 8000e24:	9414      	str	r4, [sp, #80]	; 0x50
  sConfigInjected.InjectedChannel = ADC_CHANNEL_10;
 8000e26:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000e28:	f003 f9ec 	bl	8004204 <HAL_ADCEx_InjectedConfigChannel>
 8000e2c:	b108      	cbz	r0, 8000e32 <main+0x152>
 8000e2e:	b672      	cpsid	i
  while (1)
 8000e30:	e7fe      	b.n	8000e30 <main+0x150>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e32:	4628      	mov	r0, r5
 8000e34:	a90c      	add	r1, sp, #48	; 0x30
  sConfig.Rank = 1;
 8000e36:	e9cd 660c 	strd	r6, r6, [sp, #48]	; 0x30
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000e3a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e3e:	f003 f925 	bl	800408c <HAL_ADC_ConfigChannel>
 8000e42:	4604      	mov	r4, r0
 8000e44:	b108      	cbz	r0, 8000e4a <main+0x16a>
 8000e46:	b672      	cpsid	i
  while (1)
 8000e48:	e7fe      	b.n	8000e48 <main+0x168>
  htim1.Instance = TIM1;
 8000e4a:	4d48      	ldr	r5, [pc, #288]	; (8000f6c <main+0x28c>)
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000e4c:	9007      	str	r0, [sp, #28]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e4e:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
 8000e52:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
 8000e56:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000e5a:	e9cd 0008 	strd	r0, r0, [sp, #32]
 8000e5e:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e62:	9005      	str	r0, [sp, #20]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e64:	9012      	str	r0, [sp, #72]	; 0x48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e66:	9006      	str	r0, [sp, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e68:	4601      	mov	r1, r0
 8000e6a:	463a      	mov	r2, r7
 8000e6c:	a813      	add	r0, sp, #76	; 0x4c
 8000e6e:	f006 f901 	bl	8007074 <memset>
  htim1.Instance = TIM1;
 8000e72:	4b3f      	ldr	r3, [pc, #252]	; (8000f70 <main+0x290>)
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 8000e74:	616e      	str	r6, [r5, #20]
  htim1.Instance = TIM1;
 8000e76:	602b      	str	r3, [r5, #0]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000e78:	f241 56f9 	movw	r6, #5625	; 0x15f9
 8000e7c:	f44f 7380 	mov.w	r3, #256	; 0x100
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e80:	4628      	mov	r0, r5
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000e82:	e9c5 6303 	strd	r6, r3, [r5, #12]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000e86:	60af      	str	r7, [r5, #8]
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 8000e88:	606c      	str	r4, [r5, #4]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e8a:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e8c:	f004 f8fc 	bl	8005088 <HAL_TIM_Base_Init>
 8000e90:	b108      	cbz	r0, 8000e96 <main+0x1b6>
 8000e92:	b672      	cpsid	i
  while (1)
 8000e94:	e7fe      	b.n	8000e94 <main+0x1b4>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e96:	4628      	mov	r0, r5
 8000e98:	f004 f986 	bl	80051a8 <HAL_TIM_PWM_Init>
 8000e9c:	b108      	cbz	r0, 8000ea2 <main+0x1c2>
 8000e9e:	b672      	cpsid	i
  while (1)
 8000ea0:	e7fe      	b.n	8000ea0 <main+0x1c0>
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8000ea2:	2006      	movs	r0, #6
 8000ea4:	2310      	movs	r3, #16
 8000ea6:	e9cd 0307 	strd	r0, r3, [sp, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000eaa:	a907      	add	r1, sp, #28
 8000eac:	4628      	mov	r0, r5
 8000eae:	f004 fbc7 	bl	8005640 <HAL_TIM_SlaveConfigSynchro>
 8000eb2:	b108      	cbz	r0, 8000eb8 <main+0x1d8>
 8000eb4:	b672      	cpsid	i
  while (1)
 8000eb6:	e7fe      	b.n	8000eb6 <main+0x1d6>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eb8:	e9cd 0005 	strd	r0, r0, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ebc:	a905      	add	r1, sp, #20
 8000ebe:	4628      	mov	r0, r5
 8000ec0:	f004 fc4a 	bl	8005758 <HAL_TIMEx_MasterConfigSynchronization>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	b108      	cbz	r0, 8000ecc <main+0x1ec>
 8000ec8:	b672      	cpsid	i
  while (1)
 8000eca:	e7fe      	b.n	8000eca <main+0x1ea>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ecc:	2360      	movs	r3, #96	; 0x60
 8000ece:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ed0:	4628      	mov	r0, r5
  sConfigOC.Pulse = ((PWM_PERIOD_CYCLES) / 4);
 8000ed2:	f640 23fc 	movw	r3, #2812	; 0xafc
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ed6:	a90c      	add	r1, sp, #48	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ed8:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000edc:	e9cd 220f 	strd	r2, r2, [sp, #60]	; 0x3c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ee0:	e9cd 2211 	strd	r2, r2, [sp, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ee4:	f004 fa9c 	bl	8005420 <HAL_TIM_PWM_ConfigChannel>
 8000ee8:	b108      	cbz	r0, 8000eee <main+0x20e>
 8000eea:	b672      	cpsid	i
  while (1)
 8000eec:	e7fe      	b.n	8000eec <main+0x20c>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000eee:	481f      	ldr	r0, [pc, #124]	; (8000f6c <main+0x28c>)
 8000ef0:	2204      	movs	r2, #4
 8000ef2:	a90c      	add	r1, sp, #48	; 0x30
 8000ef4:	f004 fa94 	bl	8005420 <HAL_TIM_PWM_ConfigChannel>
 8000ef8:	b108      	cbz	r0, 8000efe <main+0x21e>
 8000efa:	b672      	cpsid	i
  while (1)
 8000efc:	e7fe      	b.n	8000efc <main+0x21c>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000efe:	481b      	ldr	r0, [pc, #108]	; (8000f6c <main+0x28c>)
 8000f00:	2208      	movs	r2, #8
 8000f02:	a90c      	add	r1, sp, #48	; 0x30
 8000f04:	f004 fa8c 	bl	8005420 <HAL_TIM_PWM_ConfigChannel>
 8000f08:	b108      	cbz	r0, 8000f0e <main+0x22e>
 8000f0a:	b672      	cpsid	i
  while (1)
 8000f0c:	e7fe      	b.n	8000f0c <main+0x22c>
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 8000f0e:	f241 53f8 	movw	r3, #5624	; 0x15f8
 8000f12:	2270      	movs	r2, #112	; 0x70
 8000f14:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f18:	4814      	ldr	r0, [pc, #80]	; (8000f6c <main+0x28c>)
 8000f1a:	220c      	movs	r2, #12
 8000f1c:	a90c      	add	r1, sp, #48	; 0x30
 8000f1e:	f004 fa7f 	bl	8005420 <HAL_TIM_PWM_ConfigChannel>
 8000f22:	4603      	mov	r3, r0
 8000f24:	b108      	cbz	r0, 8000f2a <main+0x24a>
 8000f26:	b672      	cpsid	i
  while (1)
 8000f28:	e7fe      	b.n	8000f28 <main+0x248>
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8000f2a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f32:	e9cd 1213 	strd	r1, r2, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 8000f36:	224c      	movs	r2, #76	; 0x4c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f38:	480c      	ldr	r0, [pc, #48]	; (8000f6c <main+0x28c>)
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f3a:	931a      	str	r3, [sp, #104]	; 0x68
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f3c:	eb0d 0102 	add.w	r1, sp, r2
  sBreakDeadTimeConfig.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 8000f40:	e9cd 3215 	strd	r3, r2, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW;
 8000f44:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f48:	f004 fc46 	bl	80057d8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f4c:	4604      	mov	r4, r0
 8000f4e:	b188      	cbz	r0, 8000f74 <main+0x294>
 8000f50:	b672      	cpsid	i
  while (1)
 8000f52:	e7fe      	b.n	8000f52 <main+0x272>
 8000f54:	40023800 	.word	0x40023800
 8000f58:	40020000 	.word	0x40020000
 8000f5c:	40020800 	.word	0x40020800
 8000f60:	200003c4 	.word	0x200003c4
 8000f64:	40012000 	.word	0x40012000
 8000f68:	0f000001 	.word	0x0f000001
 8000f6c:	200005ec 	.word	0x200005ec
 8000f70:	40010000 	.word	0x40010000
  htim2.Instance = TIM2;
 8000f74:	4d71      	ldr	r5, [pc, #452]	; (800113c <main+0x45c>)
  HAL_TIM_MspPostInit(&htim1);
 8000f76:	4872      	ldr	r0, [pc, #456]	; (8001140 <main+0x460>)
 8000f78:	f002 fcf8 	bl	800396c <HAL_TIM_MspPostInit>
  htim2.Instance = TIM2;
 8000f7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f80:	602b      	str	r3, [r5, #0]
  htim2.Init.Period = M1_PULSE_NBR;
 8000f82:	f240 633f 	movw	r3, #1599	; 0x63f
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f86:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f8a:	e9c5 4401 	strd	r4, r4, [r5, #4]
  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f8e:	9414      	str	r4, [sp, #80]	; 0x50
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f90:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f92:	61ac      	str	r4, [r5, #24]
  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f94:	9416      	str	r4, [sp, #88]	; 0x58
 8000f96:	9418      	str	r4, [sp, #96]	; 0x60
 8000f98:	941a      	str	r4, [sp, #104]	; 0x68
  sConfig.IC1Filter = M1_ENC_IC_FILTER;
 8000f9a:	260c      	movs	r6, #12
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f9c:	2401      	movs	r4, #1
  htim2.Init.Period = M1_PULSE_NBR;
 8000f9e:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000fa0:	a913      	add	r1, sp, #76	; 0x4c
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000fa2:	2303      	movs	r3, #3
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000fa4:	4628      	mov	r0, r5
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000fa6:	9313      	str	r3, [sp, #76]	; 0x4c
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000fa8:	9415      	str	r4, [sp, #84]	; 0x54
  sConfig.IC1Filter = M1_ENC_IC_FILTER;
 8000faa:	9617      	str	r6, [sp, #92]	; 0x5c
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000fac:	9419      	str	r4, [sp, #100]	; 0x64
  sConfig.IC2Filter = M1_ENC_IC_FILTER;
 8000fae:	961b      	str	r6, [sp, #108]	; 0x6c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000fb0:	f004 f988 	bl	80052c4 <HAL_TIM_Encoder_Init>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	b108      	cbz	r0, 8000fbc <main+0x2dc>
 8000fb8:	b672      	cpsid	i
  while (1)
 8000fba:	e7fe      	b.n	8000fba <main+0x2da>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fbc:	a90c      	add	r1, sp, #48	; 0x30
 8000fbe:	4628      	mov	r0, r5
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fc0:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fc4:	f004 fbc8 	bl	8005758 <HAL_TIMEx_MasterConfigSynchronization>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	b108      	cbz	r0, 8000fd0 <main+0x2f0>
 8000fcc:	b672      	cpsid	i
  while (1)
 8000fce:	e7fe      	b.n	8000fce <main+0x2ee>
  huart2.Instance = USART2;
 8000fd0:	485c      	ldr	r0, [pc, #368]	; (8001144 <main+0x464>)
  huart2.Init.BaudRate = 1843200;
 8000fd2:	4b5d      	ldr	r3, [pc, #372]	; (8001148 <main+0x468>)
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fd4:	6102      	str	r2, [r0, #16]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fd6:	e9c0 2202 	strd	r2, r2, [r0, #8]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fda:	e9c0 2206 	strd	r2, r2, [r0, #24]
  huart2.Init.BaudRate = 1843200;
 8000fde:	f44f 12e1 	mov.w	r2, #1843200	; 0x1c2000
 8000fe2:	e9c0 3200 	strd	r3, r2, [r0]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fe6:	6146      	str	r6, [r0, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fe8:	f004 fc20 	bl	800582c <HAL_UART_Init>
 8000fec:	4605      	mov	r5, r0
 8000fee:	b108      	cbz	r0, 8000ff4 <main+0x314>
 8000ff0:	b672      	cpsid	i
  while (1)
 8000ff2:	e7fe      	b.n	8000ff2 <main+0x312>
  MX_MotorControl_Init();
 8000ff4:	f001 f8ea 	bl	80021cc <MX_MotorControl_Init>
  hspi1.Instance = SPI1;
 8000ff8:	4854      	ldr	r0, [pc, #336]	; (800114c <main+0x46c>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ffa:	4b55      	ldr	r3, [pc, #340]	; (8001150 <main+0x470>)
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ffc:	e9c0 5502 	strd	r5, r5, [r0, #8]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001000:	e9c0 5504 	strd	r5, r5, [r0, #16]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001004:	e9c0 5507 	strd	r5, r5, [r0, #28]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001008:	e9c0 5509 	strd	r5, r5, [r0, #36]	; 0x24
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800100c:	f44f 7782 	mov.w	r7, #260	; 0x104
  hspi1.Init.CRCPolynomial = 10;
 8001010:	250a      	movs	r5, #10
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001012:	f44f 7600 	mov.w	r6, #512	; 0x200
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001016:	e9c0 3700 	strd	r3, r7, [r0]
  hspi1.Init.CRCPolynomial = 10;
 800101a:	62c5      	str	r5, [r0, #44]	; 0x2c
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800101c:	6186      	str	r6, [r0, #24]
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800101e:	f003 ffd1 	bl	8004fc4 <HAL_SPI_Init>
 8001022:	b108      	cbz	r0, 8001028 <main+0x348>
 8001024:	b672      	cpsid	i
  while (1)
 8001026:	e7fe      	b.n	8001026 <main+0x346>
  hspi3.Instance = SPI3;
 8001028:	4b4a      	ldr	r3, [pc, #296]	; (8001154 <main+0x474>)
 800102a:	4a4b      	ldr	r2, [pc, #300]	; (8001158 <main+0x478>)
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800102c:	605f      	str	r7, [r3, #4]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800102e:	e9c3 0002 	strd	r0, r0, [r3, #8]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001032:	e9c3 0004 	strd	r0, r0, [r3, #16]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001036:	e9c3 0007 	strd	r0, r0, [r3, #28]
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800103a:	e9c3 0009 	strd	r0, r0, [r3, #36]	; 0x24
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800103e:	4618      	mov	r0, r3
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001040:	619e      	str	r6, [r3, #24]
  hspi3.Init.CRCPolynomial = 10;
 8001042:	62dd      	str	r5, [r3, #44]	; 0x2c
  hspi3.Instance = SPI3;
 8001044:	601a      	str	r2, [r3, #0]
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001046:	f003 ffbd 	bl	8004fc4 <HAL_SPI_Init>
 800104a:	4603      	mov	r3, r0
 800104c:	b108      	cbz	r0, 8001052 <main+0x372>
 800104e:	b672      	cpsid	i
  while (1)
 8001050:	e7fe      	b.n	8001050 <main+0x370>
  hadc2.Instance = ADC2;
 8001052:	4842      	ldr	r0, [pc, #264]	; (800115c <main+0x47c>)
 8001054:	4a42      	ldr	r2, [pc, #264]	; (8001160 <main+0x480>)
 8001056:	6002      	str	r2, [r0, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001058:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800105c:	6042      	str	r2, [r0, #4]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800105e:	4a41      	ldr	r2, [pc, #260]	; (8001164 <main+0x484>)
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001060:	6083      	str	r3, [r0, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001062:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
 8001066:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800106a:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
  hadc2.Init.ScanConvMode = DISABLE;
 800106e:	6103      	str	r3, [r0, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001070:	7603      	strb	r3, [r0, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001072:	f880 3020 	strb.w	r3, [r0, #32]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001076:	60c3      	str	r3, [r0, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001078:	61c4      	str	r4, [r0, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800107a:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800107e:	6144      	str	r4, [r0, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001080:	f002 ff58 	bl	8003f34 <HAL_ADC_Init>
 8001084:	b108      	cbz	r0, 800108a <main+0x3aa>
 8001086:	b672      	cpsid	i
  while (1)
 8001088:	e7fe      	b.n	8001088 <main+0x3a8>
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800108a:	2300      	movs	r3, #0
  sConfig.Channel = ADC_CHANNEL_14;
 800108c:	220e      	movs	r2, #14
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800108e:	4833      	ldr	r0, [pc, #204]	; (800115c <main+0x47c>)
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001090:	9315      	str	r3, [sp, #84]	; 0x54
  sConfig.Rank = 1;
 8001092:	2501      	movs	r5, #1
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001094:	a913      	add	r1, sp, #76	; 0x4c
  sConfig.Rank = 1;
 8001096:	e9cd 2513 	strd	r2, r5, [sp, #76]	; 0x4c
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800109a:	f002 fff7 	bl	800408c <HAL_ADC_ConfigChannel>
 800109e:	4603      	mov	r3, r0
 80010a0:	b108      	cbz	r0, 80010a6 <main+0x3c6>
 80010a2:	b672      	cpsid	i
  while (1)
 80010a4:	e7fe      	b.n	80010a4 <main+0x3c4>
  hcan2.Instance = CAN2;
 80010a6:	4830      	ldr	r0, [pc, #192]	; (8001168 <main+0x488>)
  hcan2.Init.Prescaler = 16;
 80010a8:	4a30      	ldr	r2, [pc, #192]	; (800116c <main+0x48c>)
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80010aa:	6183      	str	r3, [r0, #24]
  hcan2.Init.Prescaler = 16;
 80010ac:	2610      	movs	r6, #16
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80010ae:	8383      	strh	r3, [r0, #28]
  hcan2.Init.Prescaler = 16;
 80010b0:	e9c0 2600 	strd	r2, r6, [r0]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80010b4:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 80010b8:	e9c0 3304 	strd	r3, r3, [r0, #16]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80010bc:	f003 f978 	bl	80043b0 <HAL_CAN_Init>
 80010c0:	4604      	mov	r4, r0
 80010c2:	b108      	cbz	r0, 80010c8 <main+0x3e8>
 80010c4:	b672      	cpsid	i
  while (1)
 80010c6:	e7fe      	b.n	80010c6 <main+0x3e6>
  HAL_NVIC_SetPriority(USART2_IRQn, 3, 1);
 80010c8:	2103      	movs	r1, #3
 80010ca:	462a      	mov	r2, r5
 80010cc:	2026      	movs	r0, #38	; 0x26
 80010ce:	f003 fa01 	bl	80044d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80010d2:	2026      	movs	r0, #38	; 0x26
 80010d4:	f003 fa3c 	bl	8004550 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 3, 0);
 80010d8:	4622      	mov	r2, r4
 80010da:	2103      	movs	r1, #3
 80010dc:	4630      	mov	r0, r6
 80010de:	f003 f9f9 	bl	80044d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80010e2:	4630      	mov	r0, r6
 80010e4:	f003 fa34 	bl	8004550 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(ADC_IRQn, 2, 0);
 80010e8:	4622      	mov	r2, r4
 80010ea:	2102      	movs	r1, #2
 80010ec:	2012      	movs	r0, #18
 80010ee:	f003 f9f1 	bl	80044d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 80010f2:	2012      	movs	r0, #18
 80010f4:	f003 fa2c 	bl	8004550 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80010f8:	4622      	mov	r2, r4
 80010fa:	4621      	mov	r1, r4
 80010fc:	2019      	movs	r0, #25
 80010fe:	f003 f9e9 	bl	80044d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001102:	2019      	movs	r0, #25
 8001104:	f003 fa24 	bl	8004550 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 4, 1);
 8001108:	462a      	mov	r2, r5
 800110a:	2104      	movs	r1, #4
 800110c:	2018      	movs	r0, #24
 800110e:	f003 f9e1 	bl	80044d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001112:	2018      	movs	r0, #24
 8001114:	f003 fa1c 	bl	8004550 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 8001118:	4622      	mov	r2, r4
 800111a:	2103      	movs	r1, #3
 800111c:	201c      	movs	r0, #28
 800111e:	f003 f9d9 	bl	80044d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001122:	201c      	movs	r0, #28
 8001124:	f003 fa14 	bl	8004550 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8001128:	2028      	movs	r0, #40	; 0x28
 800112a:	4622      	mov	r2, r4
 800112c:	2103      	movs	r1, #3
 800112e:	f003 f9d1 	bl	80044d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001132:	2028      	movs	r0, #40	; 0x28
 8001134:	f003 fa0c 	bl	8004550 <HAL_NVIC_EnableIRQ>
  while (1)
 8001138:	e7fe      	b.n	8001138 <main+0x458>
 800113a:	bf00      	nop
 800113c:	20000634 	.word	0x20000634
 8001140:	200005ec 	.word	0x200005ec
 8001144:	2000067c 	.word	0x2000067c
 8001148:	40004400 	.word	0x40004400
 800114c:	2000053c 	.word	0x2000053c
 8001150:	40013000 	.word	0x40013000
 8001154:	20000594 	.word	0x20000594
 8001158:	40003c00 	.word	0x40003c00
 800115c:	2000040c 	.word	0x2000040c
 8001160:	40012100 	.word	0x40012100
 8001164:	0f000001 	.word	0x0f000001
 8001168:	20000454 	.word	0x20000454
 800116c:	40006800 	.word	0x40006800

08001170 <Error_Handler>:
 8001170:	b672      	cpsid	i
  while (1)
 8001172:	e7fe      	b.n	8001172 <Error_Handler+0x2>

08001174 <MC_StartMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StartMotor1(void)
{
  return (MCI_StartMotor(pMCI[M1]));
 8001174:	4b01      	ldr	r3, [pc, #4]	; (800117c <MC_StartMotor1+0x8>)
 8001176:	6818      	ldr	r0, [r3, #0]
 8001178:	f000 b890 	b.w	800129c <MCI_StartMotor>
 800117c:	200018c0 	.word	0x200018c0

08001180 <MC_StopMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StopMotor1(void)
{
  return (MCI_StopMotor(pMCI[M1]));
 8001180:	4b01      	ldr	r3, [pc, #4]	; (8001188 <MC_StopMotor1+0x8>)
 8001182:	6818      	ldr	r0, [r3, #0]
 8001184:	f000 b8ba 	b.w	80012fc <MCI_StopMotor>
 8001188:	200018c0 	.word	0x200018c0

0800118c <MC_GetSTMStateMotor1>:
/**
 * @brief returns the current state of Motor 1 state machine
 */
__weak MCI_State_t MC_GetSTMStateMotor1(void)
{
  return (MCI_GetSTMState(pMCI[M1]));
 800118c:	4b01      	ldr	r3, [pc, #4]	; (8001194 <MC_GetSTMStateMotor1+0x8>)
 800118e:	6818      	ldr	r0, [r3, #0]
 8001190:	f000 b87e 	b.w	8001290 <MCI_GetSTMState>
 8001194:	200018c0 	.word	0x200018c0

08001198 <MC_ProfilerCommand>:
 * @brief Not implemented MC_Profiler function.
 *  */ //cstat !MISRAC2012-Rule-2.7 !RED-unused-param  !MISRAC2012-Rule-2.7  !MISRAC2012-Rule-8.13
__weak uint8_t MC_ProfilerCommand(uint16_t rxLength, uint8_t *rxBuffer, int16_t txSyncFreeSpace, uint16_t *txLength, uint8_t *txBuffer)
{
  return (MCP_CMD_UNKNOWN);
}
 8001198:	2002      	movs	r0, #2
 800119a:	4770      	bx	lr

0800119c <MC_APP_BootHook>:
   */

/* USER CODE BEGIN BootHook */

/* USER CODE END BootHook */
}
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop

080011a0 <MC_APP_PostMediumFrequencyHook_M1>:
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop

080011a4 <MCI_Init>:
  *         (only present if position control is enabled)
  * @param  pPWMHandle pointer to the PWM & current feedback component to be used by the MCI.
  */
__weak void MCI_Init(MCI_Handle_t *pHandle, SpeednTorqCtrl_Handle_t *pSTC, pFOCVars_t pFOCVars,
                     PWMC_Handle_t *pPWMHandle )
{
 80011a4:	b410      	push	{r4}
    pHandle->pSTC = pSTC;
    pHandle->pFOCVars = pFOCVars;
    pHandle->pPWM = pPWMHandle;

    /* Buffer related initialization */
    pHandle->lastCommand = MCI_NOCOMMANDSYET;
 80011a6:	2400      	movs	r4, #0
    pHandle->hFinalTorque = 0;
    pHandle->hDurationms = 0;
    pHandle->CommandState = MCI_BUFFER_EMPTY;
    pHandle->DirectCommand = MCI_NO_COMMAND;
    pHandle->State = IDLE;
    pHandle->CurrentFaults = MC_NO_FAULTS;
 80011a8:	e9c0 4407 	strd	r4, r4, [r0, #28]
    pHandle->lastCommand = MCI_NOCOMMANDSYET;
 80011ac:	7304      	strb	r4, [r0, #12]
    pHandle->hFinalSpeed = 0;
 80011ae:	f8c0 400e 	str.w	r4, [r0, #14]
    pHandle->CommandState = MCI_BUFFER_EMPTY;
 80011b2:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    pHandle->pFOCVars = pFOCVars;
 80011b6:	e9c0 1200 	strd	r1, r2, [r0]
    pHandle->PastFaults = MC_NO_FAULTS;
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 80011ba:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->pPWM = pPWMHandle;
 80011be:	6083      	str	r3, [r0, #8]
}
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop

080011c4 <MCI_ExecSpeedRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
 80011c4:	f04f 0c01 	mov.w	ip, #1
    pHandle->hFinalSpeed = hFinalSpeed;
    pHandle->hDurationms = hDurationms;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80011c8:	f240 3301 	movw	r3, #769	; 0x301
    pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
 80011cc:	f880 c00c 	strb.w	ip, [r0, #12]
    pHandle->hFinalSpeed = hFinalSpeed;
 80011d0:	81c1      	strh	r1, [r0, #14]
    pHandle->hDurationms = hDurationms;
 80011d2:	8382      	strh	r2, [r0, #28]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80011d4:	8483      	strh	r3, [r0, #36]	; 0x24
    pHandle->LastModalitySetByUser = MCM_SPEED_MODE;

#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 80011d6:	4770      	bx	lr

080011d8 <MCI_ExecTorqueRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->lastCommand = MCI_CMD_EXECTORQUERAMP;
 80011d8:	f04f 0c02 	mov.w	ip, #2
    pHandle->hFinalTorque = hFinalTorque;
    pHandle->hDurationms = hDurationms;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80011dc:	f240 4301 	movw	r3, #1025	; 0x401
    pHandle->lastCommand = MCI_CMD_EXECTORQUERAMP;
 80011e0:	f880 c00c 	strb.w	ip, [r0, #12]
    pHandle->hFinalTorque = hFinalTorque;
 80011e4:	8201      	strh	r1, [r0, #16]
    pHandle->hDurationms = hDurationms;
 80011e6:	8382      	strh	r2, [r0, #28]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80011e8:	8483      	strh	r3, [r0, #36]	; 0x24
    pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 80011ea:	4770      	bx	lr

080011ec <MCI_SetCurrentReferences>:
  * function.

  @sa MCI_SetCurrentReferences_F
  */
__weak void MCI_SetCurrentReferences(MCI_Handle_t *pHandle, qd_t Iqdref)
{
 80011ec:	b082      	sub	sp, #8
  }
  else
  {
#endif

    pHandle->lastCommand = MCI_CMD_SETCURRENTREFERENCES;
 80011ee:	2203      	movs	r2, #3
    pHandle->Iqdref.q = Iqdref.q;
    pHandle->Iqdref.d = Iqdref.d;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80011f0:	f240 4301 	movw	r3, #1025	; 0x401
    pHandle->lastCommand = MCI_CMD_SETCURRENTREFERENCES;
 80011f4:	7302      	strb	r2, [r0, #12]
    pHandle->Iqdref.q = Iqdref.q;
 80011f6:	f8c0 1012 	str.w	r1, [r0, #18]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80011fa:	8483      	strh	r3, [r0, #36]	; 0x24
    pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 80011fc:	b002      	add	sp, #8
 80011fe:	4770      	bx	lr

08001200 <MCI_FaultProcessing>:
  }
  else
  {
#endif
    /* Set current errors */
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 8001200:	8c03      	ldrh	r3, [r0, #32]
    pHandle->PastFaults |= hSetErrors;
 8001202:	f8b0 c022 	ldrh.w	ip, [r0, #34]	; 0x22
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 8001206:	430b      	orrs	r3, r1
 8001208:	ea23 0302 	bic.w	r3, r3, r2
    pHandle->PastFaults |= hSetErrors;
 800120c:	ea41 010c 	orr.w	r1, r1, ip
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 8001210:	8403      	strh	r3, [r0, #32]
    pHandle->PastFaults |= hSetErrors;
 8001212:	8441      	strh	r1, [r0, #34]	; 0x22
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop

08001218 <MCI_ExecBufferedCommands>:
    /* Nothing to do */
  }
  else
  {
#endif
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8001218:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800121c:	2b01      	cmp	r3, #1
 800121e:	d000      	beq.n	8001222 <MCI_ExecBufferedCommands+0xa>
 8001220:	4770      	bx	lr
{
 8001222:	b510      	push	{r4, lr}
    {
      bool commandHasBeenExecuted = false;
      switch (pHandle->lastCommand)
 8001224:	7b02      	ldrb	r2, [r0, #12]
 8001226:	2a02      	cmp	r2, #2
 8001228:	4604      	mov	r4, r0
 800122a:	d007      	beq.n	800123c <MCI_ExecBufferedCommands+0x24>
 800122c:	2a03      	cmp	r2, #3
 800122e:	d028      	beq.n	8001282 <MCI_ExecBufferedCommands+0x6a>
 8001230:	2a01      	cmp	r2, #1
 8001232:	d017      	beq.n	8001264 <MCI_ExecBufferedCommands+0x4c>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESSFULLY;
      }
      else
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESSFULLY;
 8001234:	2303      	movs	r3, #3
 8001236:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      }
    }
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 800123a:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 800123c:	6843      	ldr	r3, [r0, #4]
 800123e:	2200      	movs	r2, #0
 8001240:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 8001244:	6800      	ldr	r0, [r0, #0]
 8001246:	2104      	movs	r1, #4
 8001248:	f005 fe22 	bl	8006e90 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms);
 800124c:	8ba2      	ldrh	r2, [r4, #28]
 800124e:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 8001252:	6820      	ldr	r0, [r4, #0]
 8001254:	f005 fe20 	bl	8006e98 <STC_ExecRamp>
      if (commandHasBeenExecuted)
 8001258:	2800      	cmp	r0, #0
 800125a:	d0eb      	beq.n	8001234 <MCI_ExecBufferedCommands+0x1c>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESSFULLY;
 800125c:	2302      	movs	r3, #2
 800125e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8001262:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8001264:	6843      	ldr	r3, [r0, #4]
 8001266:	2200      	movs	r2, #0
 8001268:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode(pHandle->pSTC, MCM_SPEED_MODE);
 800126c:	6800      	ldr	r0, [r0, #0]
 800126e:	2103      	movs	r1, #3
 8001270:	f005 fe0e 	bl	8006e90 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms);
 8001274:	8ba2      	ldrh	r2, [r4, #28]
 8001276:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800127a:	6820      	ldr	r0, [r4, #0]
 800127c:	f005 fe0c 	bl	8006e98 <STC_ExecRamp>
          break;
 8001280:	e7ea      	b.n	8001258 <MCI_ExecBufferedCommands+0x40>
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8001282:	6842      	ldr	r2, [r0, #4]
 8001284:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 8001288:	f8d0 3012 	ldr.w	r3, [r0, #18]
 800128c:	6113      	str	r3, [r2, #16]
      if (commandHasBeenExecuted)
 800128e:	e7e5      	b.n	800125c <MCI_ExecBufferedCommands+0x44>

08001290 <MCI_GetSTMState>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? FAULT_NOW : pHandle->State);
#else
  return (pHandle->State);
#endif
}
 8001290:	7fc0      	ldrb	r0, [r0, #31]
 8001292:	4770      	bx	lr

08001294 <MCI_GetOccurredFaults>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MC_SW_ERROR : (uint16_t)pHandle->PastFaults);
#else
  return ((uint16_t)pHandle->PastFaults);
#endif
}
 8001294:	8c40      	ldrh	r0, [r0, #34]	; 0x22
 8001296:	4770      	bx	lr

08001298 <MCI_GetCurrentFaults>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MC_SW_ERROR : (uint16_t)pHandle->CurrentFaults);
#else
  return ((uint16_t)pHandle->CurrentFaults);
#endif
}
 8001298:	8c00      	ldrh	r0, [r0, #32]
 800129a:	4770      	bx	lr

0800129c <MCI_StartMotor>:
{
 800129c:	b510      	push	{r4, lr}
 800129e:	4604      	mov	r4, r0
    if ((IDLE == MCI_GetSTMState(pHandle)) &&
 80012a0:	f7ff fff6 	bl	8001290 <MCI_GetSTMState>
 80012a4:	b108      	cbz	r0, 80012aa <MCI_StartMotor+0xe>
  bool retVal = false;
 80012a6:	2000      	movs	r0, #0
}
 80012a8:	bd10      	pop	{r4, pc}
        (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80012aa:	4620      	mov	r0, r4
 80012ac:	f7ff fff2 	bl	8001294 <MCI_GetOccurredFaults>
    if ((IDLE == MCI_GetSTMState(pHandle)) &&
 80012b0:	2800      	cmp	r0, #0
 80012b2:	d1f8      	bne.n	80012a6 <MCI_StartMotor+0xa>
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 80012b4:	4620      	mov	r0, r4
 80012b6:	f7ff ffef 	bl	8001298 <MCI_GetCurrentFaults>
        (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80012ba:	2800      	cmp	r0, #0
 80012bc:	d1f3      	bne.n	80012a6 <MCI_StartMotor+0xa>
      pHandle->DirectCommand = MCI_START;
 80012be:	2001      	movs	r0, #1
 80012c0:	77a0      	strb	r0, [r4, #30]
      pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80012c2:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 80012c6:	bd10      	pop	{r4, pc}

080012c8 <MCI_StartWithPolarizationMotor>:
{
 80012c8:	b510      	push	{r4, lr}
 80012ca:	4604      	mov	r4, r0
    if ((IDLE == MCI_GetSTMState(pHandle)) &&
 80012cc:	f7ff ffe0 	bl	8001290 <MCI_GetSTMState>
 80012d0:	b108      	cbz	r0, 80012d6 <MCI_StartWithPolarizationMotor+0xe>
  bool retVal = true;
 80012d2:	2001      	movs	r0, #1
}
 80012d4:	bd10      	pop	{r4, pc}
        (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80012d6:	4620      	mov	r0, r4
 80012d8:	f7ff ffdc 	bl	8001294 <MCI_GetOccurredFaults>
    if ((IDLE == MCI_GetSTMState(pHandle)) &&
 80012dc:	2800      	cmp	r0, #0
 80012de:	d1f8      	bne.n	80012d2 <MCI_StartWithPolarizationMotor+0xa>
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 80012e0:	4620      	mov	r0, r4
 80012e2:	f7ff ffd9 	bl	8001298 <MCI_GetCurrentFaults>
        (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80012e6:	2800      	cmp	r0, #0
 80012e8:	d1f3      	bne.n	80012d2 <MCI_StartWithPolarizationMotor+0xa>
      pHandle->DirectCommand = MCI_START;
 80012ea:	2201      	movs	r2, #1
      pHandle->pPWM->offsetCalibStatus = false;
 80012ec:	68a1      	ldr	r1, [r4, #8]
      pHandle->DirectCommand = MCI_START;
 80012ee:	77a2      	strb	r2, [r4, #30]
      pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80012f0:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
      pHandle->pPWM->offsetCalibStatus = false;
 80012f4:	f881 0081 	strb.w	r0, [r1, #129]	; 0x81
}
 80012f8:	bd10      	pop	{r4, pc}
 80012fa:	bf00      	nop

080012fc <MCI_StopMotor>:
{
 80012fc:	b538      	push	{r3, r4, r5, lr}
 80012fe:	4605      	mov	r5, r0
    State = MCI_GetSTMState(pHandle);
 8001300:	f7ff ffc6 	bl	8001290 <MCI_GetSTMState>
    if ((IDLE == State) || (ICLWAIT == State))
 8001304:	b150      	cbz	r0, 800131c <MCI_StopMotor+0x20>
 8001306:	f1b0 040c 	subs.w	r4, r0, #12
    if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 800130a:	4628      	mov	r0, r5
    if ((IDLE == State) || (ICLWAIT == State))
 800130c:	bf18      	it	ne
 800130e:	2401      	movne	r4, #1
    if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8001310:	f7ff ffc0 	bl	8001294 <MCI_GetOccurredFaults>
 8001314:	b140      	cbz	r0, 8001328 <MCI_StopMotor+0x2c>
  bool retVal = false;
 8001316:	2400      	movs	r4, #0
}
 8001318:	4620      	mov	r0, r4
 800131a:	bd38      	pop	{r3, r4, r5, pc}
      status = false;
 800131c:	4604      	mov	r4, r0
    if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 800131e:	4628      	mov	r0, r5
 8001320:	f7ff ffb8 	bl	8001294 <MCI_GetOccurredFaults>
 8001324:	2800      	cmp	r0, #0
 8001326:	d1f6      	bne.n	8001316 <MCI_StopMotor+0x1a>
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 8001328:	4628      	mov	r0, r5
 800132a:	f7ff ffb5 	bl	8001298 <MCI_GetCurrentFaults>
    if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 800132e:	2800      	cmp	r0, #0
 8001330:	d1f1      	bne.n	8001316 <MCI_StopMotor+0x1a>
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 8001332:	2c00      	cmp	r4, #0
 8001334:	d0ef      	beq.n	8001316 <MCI_StopMotor+0x1a>
      pHandle->DirectCommand = MCI_STOP;
 8001336:	2305      	movs	r3, #5
 8001338:	77ab      	strb	r3, [r5, #30]
      retVal = true;
 800133a:	e7ed      	b.n	8001318 <MCI_StopMotor+0x1c>

0800133c <MCI_FaultAcknowledged>:
{
 800133c:	b510      	push	{r4, lr}
 800133e:	4604      	mov	r4, r0
    if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8001340:	f7ff ffa6 	bl	8001290 <MCI_GetSTMState>
 8001344:	280b      	cmp	r0, #11
 8001346:	d001      	beq.n	800134c <MCI_FaultAcknowledged+0x10>
  bool reVal = false;
 8001348:	2000      	movs	r0, #0
}
 800134a:	bd10      	pop	{r4, pc}
    if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 800134c:	4620      	mov	r0, r4
 800134e:	f7ff ffa3 	bl	8001298 <MCI_GetCurrentFaults>
 8001352:	2800      	cmp	r0, #0
 8001354:	d1f8      	bne.n	8001348 <MCI_FaultAcknowledged+0xc>
      pHandle->DirectCommand = MCI_ACK_FAULTS;
 8001356:	2302      	movs	r3, #2
 8001358:	77a3      	strb	r3, [r4, #30]
      pHandle->PastFaults = MC_NO_FAULTS;
 800135a:	8460      	strh	r0, [r4, #34]	; 0x22
      reVal = true;
 800135c:	2001      	movs	r0, #1
}
 800135e:	bd10      	pop	{r4, pc}

08001360 <MCI_GetFaultState>:
    LocalFaultState = MC_SW_ERROR | (MC_SW_ERROR << 16);
  }
  else
  {
#endif
    LocalFaultState = (uint32_t)(pHandle->PastFaults);
 8001360:	8c43      	ldrh	r3, [r0, #34]	; 0x22
    LocalFaultState |= (uint32_t)(pHandle->CurrentFaults) << 16;
 8001362:	8c00      	ldrh	r0, [r0, #32]
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
  return (LocalFaultState);
}
 8001364:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop

0800136c <MCI_GetControlMode>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MCM_TORQUE_MODE : pHandle->LastModalitySetByUser);
#else
  return (pHandle->LastModalitySetByUser);
#endif
}
 800136c:	f890 0025 	ldrb.w	r0, [r0, #37]	; 0x25
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop

08001374 <MCI_GetLastRampFinalSpeed>:
  }
  return (retVal);
#else
  return (pHandle->hFinalSpeed);
#endif
}
 8001374:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop

0800137c <MCI_GetLastRampFinalTorque>:
  }
  return (retVal);
#else
  return (pHandle->hFinalTorque);
#endif
}
 800137c:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop

08001384 <MCI_GetLastRampFinalDuration>:
  }
  return (retVal);
#else
  return (pHandle->hDurationms);
#endif
}
 8001384:	8b80      	ldrh	r0, [r0, #28]
 8001386:	4770      	bx	lr

08001388 <MCI_StopRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    STC_StopRamp(pHandle->pSTC);
 8001388:	6800      	ldr	r0, [r0, #0]
 800138a:	f005 bdc9 	b.w	8006f20 <STC_StopRamp>
 800138e:	bf00      	nop

08001390 <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit(MCI_Handle_t *pHandle)
{
 8001390:	b508      	push	{r3, lr}
    temp_speed = 0;
  }
  else
  {
#endif
    SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor(pHandle->pSTC);
 8001392:	6800      	ldr	r0, [r0, #0]
 8001394:	f005 fd6a 	bl	8006e6c <STC_GetSpeedSensor>
    temp_speed = SPD_GetAvrgMecSpeedUnit(SpeedSensor);
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
  return (temp_speed);
}
 8001398:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    temp_speed = SPD_GetAvrgMecSpeedUnit(SpeedSensor);
 800139c:	f005 bd0e 	b.w	8006dbc <SPD_GetAvrgMecSpeedUnit>

080013a0 <MCI_GetMecSpeedRefUnit>:
__weak int16_t MCI_GetMecSpeedRefUnit(MCI_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? 0 : STC_GetMecSpeedRefUnit(pHandle->pSTC));
#else
  return (STC_GetMecSpeedRefUnit(pHandle->pSTC));
 80013a0:	6800      	ldr	r0, [r0, #0]
 80013a2:	f005 bd6d 	b.w	8006e80 <STC_GetMecSpeedRefUnit>
 80013a6:	bf00      	nop

080013a8 <MCI_GetIab>:
  {
    tempVal = pHandle->pFOCVars->Iab;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iab);
 80013a8:	6842      	ldr	r2, [r0, #4]
 80013aa:	6810      	ldr	r0, [r2, #0]
 80013ac:	2300      	movs	r3, #0
 80013ae:	b282      	uxth	r2, r0
 80013b0:	f362 030f 	bfi	r3, r2, #0, #16
 80013b4:	0c00      	lsrs	r0, r0, #16
 80013b6:	f360 431f 	bfi	r3, r0, #16, #16
{
 80013ba:	b082      	sub	sp, #8
#endif
}
 80013bc:	4618      	mov	r0, r3
 80013be:	b002      	add	sp, #8
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop

080013c4 <MCI_GetIalphabeta>:
  {
    tempVal = pHandle->pFOCVars->Ialphabeta;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Ialphabeta);
 80013c4:	6842      	ldr	r2, [r0, #4]
 80013c6:	6850      	ldr	r0, [r2, #4]
 80013c8:	2300      	movs	r3, #0
 80013ca:	b282      	uxth	r2, r0
 80013cc:	f362 030f 	bfi	r3, r2, #0, #16
 80013d0:	0c00      	lsrs	r0, r0, #16
 80013d2:	f360 431f 	bfi	r3, r0, #16, #16
{
 80013d6:	b082      	sub	sp, #8
#endif
}
 80013d8:	4618      	mov	r0, r3
 80013da:	b002      	add	sp, #8
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop

080013e0 <MCI_GetIqd>:
  {
    tempVal = pHandle->pFOCVars->Iqd;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iqd);
 80013e0:	6842      	ldr	r2, [r0, #4]
 80013e2:	68d0      	ldr	r0, [r2, #12]
 80013e4:	2300      	movs	r3, #0
 80013e6:	b282      	uxth	r2, r0
 80013e8:	f362 030f 	bfi	r3, r2, #0, #16
 80013ec:	0c00      	lsrs	r0, r0, #16
 80013ee:	f360 431f 	bfi	r3, r0, #16, #16
{
 80013f2:	b082      	sub	sp, #8
#endif
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	b002      	add	sp, #8
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop

080013fc <MCI_GetIqdref>:
  {
    tempVal = pHandle->pFOCVars->Iqdref;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iqdref);
 80013fc:	6842      	ldr	r2, [r0, #4]
 80013fe:	6910      	ldr	r0, [r2, #16]
 8001400:	2300      	movs	r3, #0
 8001402:	b282      	uxth	r2, r0
 8001404:	f362 030f 	bfi	r3, r2, #0, #16
 8001408:	0c00      	lsrs	r0, r0, #16
 800140a:	f360 431f 	bfi	r3, r0, #16, #16
{
 800140e:	b082      	sub	sp, #8
#endif
}
 8001410:	4618      	mov	r0, r3
 8001412:	b002      	add	sp, #8
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop

08001418 <MCI_GetVqd>:
  {
    tempVal = pHandle->pFOCVars->Vqd;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Vqd);
 8001418:	6842      	ldr	r2, [r0, #4]
 800141a:	f8d2 0016 	ldr.w	r0, [r2, #22]
 800141e:	2300      	movs	r3, #0
 8001420:	b282      	uxth	r2, r0
 8001422:	f362 030f 	bfi	r3, r2, #0, #16
 8001426:	0c00      	lsrs	r0, r0, #16
 8001428:	f360 431f 	bfi	r3, r0, #16, #16
{
 800142c:	b082      	sub	sp, #8
#endif
}
 800142e:	4618      	mov	r0, r3
 8001430:	b002      	add	sp, #8
 8001432:	4770      	bx	lr

08001434 <MCI_GetValphabeta>:
  {
    tempVal = pHandle->pFOCVars->Valphabeta;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Valphabeta);
 8001434:	6842      	ldr	r2, [r0, #4]
 8001436:	f8d2 001a 	ldr.w	r0, [r2, #26]
 800143a:	2300      	movs	r3, #0
 800143c:	b282      	uxth	r2, r0
 800143e:	f362 030f 	bfi	r3, r2, #0, #16
 8001442:	0c00      	lsrs	r0, r0, #16
 8001444:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001448:	b082      	sub	sp, #8
#endif
}
 800144a:	4618      	mov	r0, r3
 800144c:	b002      	add	sp, #8
 800144e:	4770      	bx	lr

08001450 <MCI_GetTeref>:
__weak int16_t MCI_GetTeref(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? 0 : pHandle->pFOCVars->hTeref);
#else
  return (pHandle->pFOCVars->hTeref);
 8001450:	6843      	ldr	r3, [r0, #4]
#endif
}
 8001452:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 8001456:	4770      	bx	lr

08001458 <MCI_Clear_Iqdref>:
/**
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_Clear_Iqdref(MCI_Handle_t *pHandle)
{
 8001458:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref(pHandle->pSTC);
 800145a:	e9d0 0400 	ldrd	r0, r4, [r0]
 800145e:	f005 fd91 	bl	8006f84 <STC_GetDefaultIqdref>
 8001462:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8001466:	8220      	strh	r0, [r4, #16]
 8001468:	8263      	strh	r3, [r4, #18]
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 800146a:	bd10      	pop	{r4, pc}

0800146c <MCM_Clarke>:
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.a);

  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 800146c:	f644 11e6 	movw	r1, #18918	; 0x49e6
 8001470:	b203      	sxth	r3, r0
  a_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.a);
 8001472:	fb13 f201 	smulbb	r2, r3, r1
{
 8001476:	f3c0 400f 	ubfx	r0, r0, #16, #16
  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 800147a:	fb10 f001 	smulbb	r0, r0, r1
#ifndef FULL_MISRA_C_COMPLIANCY_MC_MATH
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 800147e:	4252      	negs	r2, r2
 8001480:	eba2 0240 	sub.w	r2, r2, r0, lsl #1
#else
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) / 32768;
#endif

  /* Check saturation of Ibeta */
  if (wbeta_tmp > INT16_MAX)
 8001484:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
{
 8001488:	b084      	sub	sp, #16
  if (wbeta_tmp > INT16_MAX)
 800148a:	da05      	bge.n	8001498 <MCM_Clarke+0x2c>
 800148c:	13d1      	asrs	r1, r2, #15
  {
    hbeta_tmp = INT16_MAX;
  }
  else if (wbeta_tmp < (-32768))
 800148e:	f511 4f00 	cmn.w	r1, #32768	; 0x8000
 8001492:	da0c      	bge.n	80014ae <MCM_Clarke+0x42>
 8001494:	4a09      	ldr	r2, [pc, #36]	; (80014bc <MCM_Clarke+0x50>)
 8001496:	e001      	b.n	800149c <MCM_Clarke+0x30>
 8001498:	f647 72ff 	movw	r2, #32767	; 0x7fff
  else
  {
    /* Nothing to do */
  }

  return (Output);
 800149c:	b29b      	uxth	r3, r3
 800149e:	2000      	movs	r0, #0
 80014a0:	f363 000f 	bfi	r0, r3, #0, #16
 80014a4:	b293      	uxth	r3, r2
 80014a6:	f363 401f 	bfi	r0, r3, #16, #16
}
 80014aa:	b004      	add	sp, #16
 80014ac:	4770      	bx	lr
    hbeta_tmp = ((int16_t)wbeta_tmp);
 80014ae:	4803      	ldr	r0, [pc, #12]	; (80014bc <MCM_Clarke+0x50>)
 80014b0:	b20a      	sxth	r2, r1
 80014b2:	4282      	cmp	r2, r0
 80014b4:	bfb8      	it	lt
 80014b6:	4602      	movlt	r2, r0
 80014b8:	e7f0      	b.n	800149c <MCM_Clarke+0x30>
 80014ba:	bf00      	nop
 80014bc:	ffff8001 	.word	0xffff8001

080014c0 <MCM_Trig_Functions>:
  uint16_t uhindex;

  Trig_Components Local_Components;

  /* 10 bit index computation  */
  shindex = (((int32_t)32768) + ((int32_t)hAngle));
 80014c0:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
  uhindex = (uint16_t)shindex;
  uhindex /= ((uint16_t)64);
 80014c4:	f3c0 1089 	ubfx	r0, r0, #6, #10

  switch (((uint16_t)uhindex) & SIN_MASK)
 80014c8:	f400 7140 	and.w	r1, r0, #768	; 0x300
 80014cc:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
{
 80014d0:	b082      	sub	sp, #8
  switch (((uint16_t)uhindex) & SIN_MASK)
 80014d2:	d028      	beq.n	8001526 <MCM_Trig_Functions+0x66>
 80014d4:	f04f 0300 	mov.w	r3, #0
 80014d8:	461a      	mov	r2, r3
 80014da:	d816      	bhi.n	800150a <MCM_Trig_Functions+0x4a>
 80014dc:	b361      	cbz	r1, 8001538 <MCM_Trig_Functions+0x78>
 80014de:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80014e2:	d109      	bne.n	80014f8 <MCM_Trig_Functions+0x38>
      break;
    }

    case U270_360:
    {
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80014e4:	b2c0      	uxtb	r0, r0
 80014e6:	43c2      	mvns	r2, r0
 80014e8:	491a      	ldr	r1, [pc, #104]	; (8001554 <MCM_Trig_Functions+0x94>)
 80014ea:	b2d2      	uxtb	r2, r2
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
 80014ec:	f931 3010 	ldrsh.w	r3, [r1, r0, lsl #1]
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80014f0:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80014f4:	4252      	negs	r2, r2
 80014f6:	b212      	sxth	r2, r2
    }

    default:
      break;
  }
  return (Local_Components);
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	2000      	movs	r0, #0
 80014fc:	f363 000f 	bfi	r0, r3, #0, #16
 8001500:	b292      	uxth	r2, r2
 8001502:	f362 401f 	bfi	r0, r2, #16, #16
}
 8001506:	b002      	add	sp, #8
 8001508:	4770      	bx	lr
  switch (((uint16_t)uhindex) & SIN_MASK)
 800150a:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 800150e:	d1f3      	bne.n	80014f8 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001510:	4910      	ldr	r1, [pc, #64]	; (8001554 <MCM_Trig_Functions+0x94>)
 8001512:	b2c0      	uxtb	r0, r0
 8001514:	43c2      	mvns	r2, r0
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001516:	f831 3010 	ldrh.w	r3, [r1, r0, lsl #1]
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800151a:	b2d2      	uxtb	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 800151c:	425b      	negs	r3, r3
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800151e:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001522:	b21b      	sxth	r3, r3
      break;
 8001524:	e7e8      	b.n	80014f8 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8001526:	b2c0      	uxtb	r0, r0
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001528:	43c3      	mvns	r3, r0
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 800152a:	490a      	ldr	r1, [pc, #40]	; (8001554 <MCM_Trig_Functions+0x94>)
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800152c:	b2db      	uxtb	r3, r3
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 800152e:	f931 2010 	ldrsh.w	r2, [r1, r0, lsl #1]
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001532:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
      break;
 8001536:	e7df      	b.n	80014f8 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001538:	b2c0      	uxtb	r0, r0
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800153a:	43c3      	mvns	r3, r0
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 800153c:	4905      	ldr	r1, [pc, #20]	; (8001554 <MCM_Trig_Functions+0x94>)
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800153e:	b2db      	uxtb	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001540:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001544:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001548:	4252      	negs	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800154a:	425b      	negs	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 800154c:	b212      	sxth	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800154e:	b21b      	sxth	r3, r3
      break;
 8001550:	e7d2      	b.n	80014f8 <MCM_Trig_Functions+0x38>
 8001552:	bf00      	nop
 8001554:	080072b0 	.word	0x080072b0

08001558 <MCM_Park>:
{
 8001558:	b530      	push	{r4, r5, lr}
 800155a:	b085      	sub	sp, #20
 800155c:	4604      	mov	r4, r0
 800155e:	4605      	mov	r5, r0
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 8001560:	4608      	mov	r0, r1
{
 8001562:	9401      	str	r4, [sp, #4]
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 8001564:	f7ff ffac 	bl	80014c0 <MCM_Trig_Functions>
 8001568:	b22d      	sxth	r5, r5
 800156a:	b201      	sxth	r1, r0
 800156c:	1424      	asrs	r4, r4, #16
 800156e:	1400      	asrs	r0, r0, #16
  q_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hCos);
 8001570:	fb05 f301 	mul.w	r3, r5, r1
  wqd_tmp = (q_tmp_1 - q_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8001574:	fb04 3310 	mls	r3, r4, r0, r3
  if (wqd_tmp > INT16_MAX)
 8001578:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800157c:	da05      	bge.n	800158a <MCM_Park+0x32>
 800157e:	13da      	asrs	r2, r3, #15
  else if (wqd_tmp < (-32768))
 8001580:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
 8001584:	da22      	bge.n	80015cc <MCM_Park+0x74>
 8001586:	4a14      	ldr	r2, [pc, #80]	; (80015d8 <MCM_Park+0x80>)
 8001588:	e001      	b.n	800158e <MCM_Park+0x36>
 800158a:	f647 72ff 	movw	r2, #32767	; 0x7fff
  d_tmp_2 = Input.beta * ((int32_t )Local_Vector_Components.hCos);
 800158e:	fb01 f404 	mul.w	r4, r1, r4
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8001592:	fb05 4400 	mla	r4, r5, r0, r4
  if (wqd_tmp > INT16_MAX)
 8001596:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800159a:	ea4f 33e4 	mov.w	r3, r4, asr #15
  if (wqd_tmp > INT16_MAX)
 800159e:	da04      	bge.n	80015aa <MCM_Park+0x52>
  else if (wqd_tmp < (-32768))
 80015a0:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80015a4:	da0c      	bge.n	80015c0 <MCM_Park+0x68>
 80015a6:	4b0c      	ldr	r3, [pc, #48]	; (80015d8 <MCM_Park+0x80>)
 80015a8:	e001      	b.n	80015ae <MCM_Park+0x56>
 80015aa:	f647 73ff 	movw	r3, #32767	; 0x7fff
  return (Output);
 80015ae:	b292      	uxth	r2, r2
 80015b0:	2000      	movs	r0, #0
 80015b2:	f362 000f 	bfi	r0, r2, #0, #16
 80015b6:	b29b      	uxth	r3, r3
 80015b8:	f363 401f 	bfi	r0, r3, #16, #16
}
 80015bc:	b005      	add	sp, #20
 80015be:	bd30      	pop	{r4, r5, pc}
    hqd_tmp = ((int16_t)wqd_tmp);
 80015c0:	4905      	ldr	r1, [pc, #20]	; (80015d8 <MCM_Park+0x80>)
 80015c2:	b21b      	sxth	r3, r3
 80015c4:	428b      	cmp	r3, r1
 80015c6:	bfb8      	it	lt
 80015c8:	460b      	movlt	r3, r1
 80015ca:	e7f0      	b.n	80015ae <MCM_Park+0x56>
    hqd_tmp = ((int16_t)wqd_tmp);
 80015cc:	4b02      	ldr	r3, [pc, #8]	; (80015d8 <MCM_Park+0x80>)
 80015ce:	b212      	sxth	r2, r2
 80015d0:	429a      	cmp	r2, r3
 80015d2:	bfb8      	it	lt
 80015d4:	461a      	movlt	r2, r3
 80015d6:	e7da      	b.n	800158e <MCM_Park+0x36>
 80015d8:	ffff8001 	.word	0xffff8001

080015dc <MCM_Rev_Park>:
{
 80015dc:	b530      	push	{r4, r5, lr}
 80015de:	b085      	sub	sp, #20
 80015e0:	4604      	mov	r4, r0
 80015e2:	4605      	mov	r5, r0
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 80015e4:	4608      	mov	r0, r1
{
 80015e6:	9401      	str	r4, [sp, #4]
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 80015e8:	f7ff ff6a 	bl	80014c0 <MCM_Trig_Functions>
 80015ec:	1424      	asrs	r4, r4, #16
 80015ee:	1402      	asrs	r2, r0, #16
 80015f0:	b22d      	sxth	r5, r5
 80015f2:	b200      	sxth	r0, r0
  alpha_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hSin);
 80015f4:	fb04 f302 	mul.w	r3, r4, r2
  Output.alpha = (int16_t)(((alpha_tmp1) + (alpha_tmp2)) >> 15);
 80015f8:	fb05 3300 	mla	r3, r5, r0, r3
  beta_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hCos);
 80015fc:	fb00 f404 	mul.w	r4, r0, r4
  Output.beta = (int16_t)((beta_tmp2 - beta_tmp1) >> 15);
 8001600:	fb05 4412 	mls	r4, r5, r2, r4
  return (Output);
 8001604:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 8001608:	2000      	movs	r0, #0
 800160a:	f363 000f 	bfi	r0, r3, #0, #16
 800160e:	f3c4 34cf 	ubfx	r4, r4, #15, #16
 8001612:	f364 401f 	bfi	r0, r4, #16, #16
}
 8001616:	b005      	add	sp, #20
 8001618:	bd30      	pop	{r4, r5, pc}
 800161a:	bf00      	nop

0800161c <MCM_Sqrt>:
  */
__weak int32_t MCM_Sqrt(int32_t wInput)
{
  int32_t wtemprootnew;

  if (wInput > 0)
 800161c:	1e03      	subs	r3, r0, #0
 800161e:	dd35      	ble.n	800168c <MCM_Sqrt+0x70>
  {
  uint8_t biter = 0u;
  int32_t wtemproot;

    if (wInput <= ((int32_t)2097152))
 8001620:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001624:	dd2b      	ble.n	800167e <MCM_Sqrt+0x62>
      wtemproot = ((int32_t)8192);
    }

    do
    {
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 8001626:	135a      	asrs	r2, r3, #13
 8001628:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800162c:	1052      	asrs	r2, r2, #1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 800162e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001632:	d029      	beq.n	8001688 <MCM_Sqrt+0x6c>
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 8001634:	fb93 f1f2 	sdiv	r1, r3, r2
 8001638:	4411      	add	r1, r2
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 800163a:	ebb2 0f61 	cmp.w	r2, r1, asr #1
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 800163e:	ea4f 0061 	mov.w	r0, r1, asr #1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 8001642:	d024      	beq.n	800168e <MCM_Sqrt+0x72>
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 8001644:	fb93 f2f0 	sdiv	r2, r3, r0
 8001648:	4402      	add	r2, r0
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 800164a:	ebb0 0f62 	cmp.w	r0, r2, asr #1
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 800164e:	ea4f 0162 	mov.w	r1, r2, asr #1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 8001652:	d01c      	beq.n	800168e <MCM_Sqrt+0x72>
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 8001654:	fb93 f2f1 	sdiv	r2, r3, r1
 8001658:	440a      	add	r2, r1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 800165a:	ebb1 0f62 	cmp.w	r1, r2, asr #1
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 800165e:	ea4f 0062 	mov.w	r0, r2, asr #1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 8001662:	d014      	beq.n	800168e <MCM_Sqrt+0x72>
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 8001664:	fb93 f2f0 	sdiv	r2, r3, r0
 8001668:	4402      	add	r2, r0
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 800166a:	ebb0 0f62 	cmp.w	r0, r2, asr #1
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 800166e:	ea4f 0162 	mov.w	r1, r2, asr #1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 8001672:	d00c      	beq.n	800168e <MCM_Sqrt+0x72>
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 8001674:	fb93 f3f1 	sdiv	r3, r3, r1
 8001678:	440b      	add	r3, r1
 800167a:	1058      	asrs	r0, r3, #1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 800167c:	4770      	bx	lr
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 800167e:	11da      	asrs	r2, r3, #7
 8001680:	3280      	adds	r2, #128	; 0x80
 8001682:	1052      	asrs	r2, r2, #1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 8001684:	2a80      	cmp	r2, #128	; 0x80
 8001686:	d1d5      	bne.n	8001634 <MCM_Sqrt+0x18>
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 8001688:	4610      	mov	r0, r2
 800168a:	4770      	bx	lr
    while (biter < 6U);

  }
  else
  {
    wtemprootnew = (int32_t)0;
 800168c:	2000      	movs	r0, #0
  }

  return (wtemprootnew);
}
 800168e:	4770      	bx	lr

08001690 <FOC_Clear>:
  ab_t NULL_ab = {((int16_t)0), ((int16_t)0)};
  qd_t NULL_qd = {((int16_t)0), ((int16_t)0)};
  alphabeta_t NULL_alphabeta = {((int16_t)0), ((int16_t)0)};

  FOCVars[bMotor].Iab = NULL_ab;
  FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
 8001690:	2226      	movs	r2, #38	; 0x26
{
 8001692:	b538      	push	{r3, r4, r5, lr}
 8001694:	fb00 f202 	mul.w	r2, r0, r2
 8001698:	4b15      	ldr	r3, [pc, #84]	; (80016f0 <FOC_Clear+0x60>)
  FOCVars[bMotor].Iab = NULL_ab;
 800169a:	2400      	movs	r4, #0
 800169c:	509c      	str	r4, [r3, r2]
{
 800169e:	4605      	mov	r5, r0
 80016a0:	f102 0108 	add.w	r1, r2, #8
 80016a4:	1898      	adds	r0, r3, r2
 80016a6:	3210      	adds	r2, #16
 80016a8:	4419      	add	r1, r3
 80016aa:	4413      	add	r3, r2
  FOCVars[bMotor].hTeref = (int16_t)0;
  FOCVars[bMotor].Vqd = NULL_qd;
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 80016ac:	4a11      	ldr	r2, [pc, #68]	; (80016f4 <FOC_Clear+0x64>)
  FOCVars[bMotor].Iab = NULL_ab;
 80016ae:	6044      	str	r4, [r0, #4]
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 80016b0:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
  FOCVars[bMotor].Iqd = NULL_qd;
 80016b4:	604c      	str	r4, [r1, #4]
 80016b6:	608c      	str	r4, [r1, #8]
  FOCVars[bMotor].Vqd = NULL_qd;
 80016b8:	f8c3 4006 	str.w	r4, [r3, #6]
 80016bc:	f8c3 400a 	str.w	r4, [r3, #10]
 80016c0:	f8c3 400e 	str.w	r4, [r3, #14]
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 80016c4:	4621      	mov	r1, r4
 80016c6:	f004 fcbb 	bl	8006040 <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], ((int32_t)0));
 80016ca:	4b0b      	ldr	r3, [pc, #44]	; (80016f8 <FOC_Clear+0x68>)
 80016cc:	4621      	mov	r1, r4
 80016ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80016d2:	f004 fcb5 	bl	8006040 <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 80016d6:	4b09      	ldr	r3, [pc, #36]	; (80016fc <FOC_Clear+0x6c>)
 80016d8:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80016dc:	f005 fbc8 	bl	8006e70 <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80016e0:	4b07      	ldr	r3, [pc, #28]	; (8001700 <FOC_Clear+0x70>)
 80016e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 80016e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80016ea:	f000 bf21 	b.w	8002530 <PWMC_SwitchOffPWM>
 80016ee:	bf00      	nop
 80016f0:	200006fc 	.word	0x200006fc
 80016f4:	200002ac 	.word	0x200002ac
 80016f8:	200002a8 	.word	0x200002a8
 80016fc:	200002b0 	.word	0x200002b0
 8001700:	20000730 	.word	0x20000730

08001704 <MCboot>:
  if (MC_NULL == pMCIList)
 8001704:	2800      	cmp	r0, #0
 8001706:	d070      	beq.n	80017ea <MCboot+0xe6>
{
 8001708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bMCBootCompleted = (uint8_t )0;
 800170c:	f8df 9124 	ldr.w	r9, [pc, #292]	; 8001834 <MCboot+0x130>
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8001710:	f8df b124 	ldr.w	fp, [pc, #292]	; 8001838 <MCboot+0x134>
    EAC_Init(&EncAlignCtrlM1,pSTC[M1],&VirtualSpeedSensorM1,&ENCODER_M1);
 8001714:	4d35      	ldr	r5, [pc, #212]	; (80017ec <MCboot+0xe8>)
 8001716:	4e36      	ldr	r6, [pc, #216]	; (80017f0 <MCboot+0xec>)
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 8001718:	4f36      	ldr	r7, [pc, #216]	; (80017f4 <MCboot+0xf0>)
{
 800171a:	b083      	sub	sp, #12
    bMCBootCompleted = (uint8_t )0;
 800171c:	f04f 0800 	mov.w	r8, #0
 8001720:	4604      	mov	r4, r0
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8001722:	4835      	ldr	r0, [pc, #212]	; (80017f8 <MCboot+0xf4>)
 8001724:	f8cb 0000 	str.w	r0, [fp]
    bMCBootCompleted = (uint8_t )0;
 8001728:	f889 8000 	strb.w	r8, [r9]
    R3_1_Init(&PWM_Handle_M1);
 800172c:	f004 ffe8 	bl	8006700 <R3_1_Init>
    ASPEP_start(&aspepOverUartA);
 8001730:	4832      	ldr	r0, [pc, #200]	; (80017fc <MCboot+0xf8>)
 8001732:	f7fe ff11 	bl	8000558 <ASPEP_start>
    startTimers();
 8001736:	f004 fd33 	bl	80061a0 <startTimers>
    PID_HandleInit(&PIDSpeedHandle_M1);
 800173a:	4831      	ldr	r0, [pc, #196]	; (8001800 <MCboot+0xfc>)
 800173c:	f004 fc6c 	bl	8006018 <PID_HandleInit>
    ENC_Init (&ENCODER_M1);
 8001740:	4830      	ldr	r0, [pc, #192]	; (8001804 <MCboot+0x100>)
 8001742:	f004 f98f 	bl	8005a64 <ENC_Init>
    EAC_Init(&EncAlignCtrlM1,pSTC[M1],&VirtualSpeedSensorM1,&ENCODER_M1);
 8001746:	6829      	ldr	r1, [r5, #0]
 8001748:	4b2e      	ldr	r3, [pc, #184]	; (8001804 <MCboot+0x100>)
 800174a:	4a2f      	ldr	r2, [pc, #188]	; (8001808 <MCboot+0x104>)
 800174c:	4630      	mov	r0, r6
 800174e:	f004 f93d 	bl	80059cc <EAC_Init>
    pEAC[M1] = &EncAlignCtrlM1;
 8001752:	4b2e      	ldr	r3, [pc, #184]	; (800180c <MCboot+0x108>)
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &ENCODER_M1._Super);
 8001754:	4a2b      	ldr	r2, [pc, #172]	; (8001804 <MCboot+0x100>)
 8001756:	492a      	ldr	r1, [pc, #168]	; (8001800 <MCboot+0xfc>)
    pEAC[M1] = &EncAlignCtrlM1;
 8001758:	601e      	str	r6, [r3, #0]
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &ENCODER_M1._Super);
 800175a:	6828      	ldr	r0, [r5, #0]
    RVBS_Init(&BusVoltageSensor_M1);
 800175c:	4e2c      	ldr	r6, [pc, #176]	; (8001810 <MCboot+0x10c>)
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &ENCODER_M1._Super);
 800175e:	f005 fb6d 	bl	8006e3c <STC_Init>
    VSS_Init(&VirtualSpeedSensorM1);
 8001762:	4829      	ldr	r0, [pc, #164]	; (8001808 <MCboot+0x104>)
 8001764:	f005 fc32 	bl	8006fcc <VSS_Init>
    PID_HandleInit(&PIDIqHandle_M1);
 8001768:	482a      	ldr	r0, [pc, #168]	; (8001814 <MCboot+0x110>)
 800176a:	f004 fc55 	bl	8006018 <PID_HandleInit>
    PID_HandleInit(&PIDIdHandle_M1);
 800176e:	482a      	ldr	r0, [pc, #168]	; (8001818 <MCboot+0x114>)
 8001770:	f004 fc52 	bl	8006018 <PID_HandleInit>
    (void)RCM_RegisterRegConv(&VbusRegConv_M1);
 8001774:	4829      	ldr	r0, [pc, #164]	; (800181c <MCboot+0x118>)
 8001776:	f001 fe29 	bl	80033cc <RCM_RegisterRegConv>
    RVBS_Init(&BusVoltageSensor_M1);
 800177a:	4630      	mov	r0, r6
 800177c:	f005 fab8 	bl	8006cf0 <RVBS_Init>
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 8001780:	4b27      	ldr	r3, [pc, #156]	; (8001820 <MCboot+0x11c>)
    NTC_Init(&TempSensor_M1);
 8001782:	4828      	ldr	r0, [pc, #160]	; (8001824 <MCboot+0x120>)
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	60de      	str	r6, [r3, #12]
    pMPM[M1]->pFOCVars = &FOCVars[M1];
 8001788:	4e27      	ldr	r6, [pc, #156]	; (8001828 <MCboot+0x124>)
 800178a:	609e      	str	r6, [r3, #8]
    NTC_Init(&TempSensor_M1);
 800178c:	f004 fc26 	bl	8005fdc <NTC_Init>
    REMNG_Init(pREMNG[M1]);
 8001790:	4826      	ldr	r0, [pc, #152]	; (800182c <MCboot+0x128>)
 8001792:	f005 fb07 	bl	8006da4 <REMNG_Init>
    FOCVars[M1].bDriveInput = EXTERNAL;
 8001796:	f04f 0a01 	mov.w	sl, #1
    FOC_Clear(M1);
 800179a:	4640      	mov	r0, r8
 800179c:	f7ff ff78 	bl	8001690 <FOC_Clear>
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 80017a0:	6828      	ldr	r0, [r5, #0]
    FOCVars[M1].bDriveInput = EXTERNAL;
 80017a2:	f886 a024 	strb.w	sl, [r6, #36]	; 0x24
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 80017a6:	f005 fbed 	bl	8006f84 <STC_GetDefaultIqdref>
 80017aa:	6130      	str	r0, [r6, #16]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 80017ac:	6828      	ldr	r0, [r5, #0]
 80017ae:	f005 fbe9 	bl	8006f84 <STC_GetDefaultIqdref>
 80017b2:	f3c0 400f 	ubfx	r0, r0, #16, #16
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 80017b6:	6829      	ldr	r1, [r5, #0]
 80017b8:	f8db 3000 	ldr.w	r3, [fp]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 80017bc:	82b0      	strh	r0, [r6, #20]
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 80017be:	4632      	mov	r2, r6
 80017c0:	4638      	mov	r0, r7
 80017c2:	f7ff fcef 	bl	80011a4 <MCI_Init>
   Mci[M1].pScale = &scaleParams_M1;
 80017c6:	4b1a      	ldr	r3, [pc, #104]	; (8001830 <MCboot+0x12c>)
    MCI_ExecSpeedRamp(&Mci[M1],
 80017c8:	6828      	ldr	r0, [r5, #0]
   Mci[M1].pScale = &scaleParams_M1;
 80017ca:	61bb      	str	r3, [r7, #24]
    MCI_ExecSpeedRamp(&Mci[M1],
 80017cc:	f005 fbd6 	bl	8006f7c <STC_GetMecSpeedRefUnitDefault>
 80017d0:	4642      	mov	r2, r8
 80017d2:	4601      	mov	r1, r0
 80017d4:	4638      	mov	r0, r7
 80017d6:	f7ff fcf5 	bl	80011c4 <MCI_ExecSpeedRamp>
    pMCIList[M1] = &Mci[M1];
 80017da:	6027      	str	r7, [r4, #0]
    MC_APP_BootHook();
 80017dc:	f7ff fcde 	bl	800119c <MC_APP_BootHook>
    bMCBootCompleted = 1U;
 80017e0:	f889 a000 	strb.w	sl, [r9]
}
 80017e4:	b003      	add	sp, #12
 80017e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80017ea:	4770      	bx	lr
 80017ec:	200002b0 	.word	0x200002b0
 80017f0:	200000a0 	.word	0x200000a0
 80017f4:	200006c0 	.word	0x200006c0
 80017f8:	20000150 	.word	0x20000150
 80017fc:	20000324 	.word	0x20000324
 8001800:	20000114 	.word	0x20000114
 8001804:	20000020 	.word	0x20000020
 8001808:	2000026c 	.word	0x2000026c
 800180c:	2000072c 	.word	0x2000072c
 8001810:	20000000 	.word	0x20000000
 8001814:	200000e8 	.word	0x200000e8
 8001818:	200000bc 	.word	0x200000bc
 800181c:	2000025c 	.word	0x2000025c
 8001820:	200002a4 	.word	0x200002a4
 8001824:	20000240 	.word	0x20000240
 8001828:	200006fc 	.word	0x200006fc
 800182c:	200001f4 	.word	0x200001f4
 8001830:	200002c4 	.word	0x200002c4
 8001834:	20000722 	.word	0x20000722
 8001838:	20000730 	.word	0x20000730

0800183c <FOC_InitAdditionalMethods>:
    {
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
    }
}
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop

08001840 <FOC_CalcCurrRef>:
  *         MTPA algorithm(s). It must be called with the periodicity specified
  *         in oTSC parameters.
  * @param  bMotor related motor it can be M1 or M2.
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 8001840:	b510      	push	{r4, lr}

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if (INTERNAL == FOCVars[bMotor].bDriveInput)
 8001842:	4c08      	ldr	r4, [pc, #32]	; (8001864 <FOC_CalcCurrRef+0x24>)
 8001844:	2326      	movs	r3, #38	; 0x26
 8001846:	fb03 4400 	mla	r4, r3, r0, r4
 800184a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800184e:	b103      	cbz	r3, 8001852 <FOC_CalcCurrRef+0x12>
    /* Nothing to do */
  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 8001850:	bd10      	pop	{r4, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 8001852:	4b05      	ldr	r3, [pc, #20]	; (8001868 <FOC_CalcCurrRef+0x28>)
 8001854:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001858:	f005 fb66 	bl	8006f28 <STC_CalcTorqueReference>
 800185c:	83e0      	strh	r0, [r4, #30]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 800185e:	8220      	strh	r0, [r4, #16]
}
 8001860:	bd10      	pop	{r4, pc}
 8001862:	bf00      	nop
 8001864:	200006fc 	.word	0x200006fc
 8001868:	200002b0 	.word	0x200002b0

0800186c <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted.
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 800186c:	4b01      	ldr	r3, [pc, #4]	; (8001874 <TSK_SetChargeBootCapDelayM1+0x8>)
 800186e:	8018      	strh	r0, [r3, #0]
}
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	20000724 	.word	0x20000724

08001878 <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise.
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hBootCapDelayCounterM1)
 8001878:	4b03      	ldr	r3, [pc, #12]	; (8001888 <TSK_ChargeBootCapDelayHasElapsedM1+0x10>)
 800187a:	8818      	ldrh	r0, [r3, #0]
 800187c:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 800187e:	fab0 f080 	clz	r0, r0
 8001882:	0940      	lsrs	r0, r0, #5
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	20000724 	.word	0x20000724

0800188c <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted.
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 800188c:	4b01      	ldr	r3, [pc, #4]	; (8001894 <TSK_SetStopPermanencyTimeM1+0x8>)
 800188e:	8018      	strh	r0, [r3, #0]
}
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	20000728 	.word	0x20000728

08001898 <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise.
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hStopPermanencyCounterM1)
 8001898:	4b03      	ldr	r3, [pc, #12]	; (80018a8 <TSK_StopPermanencyTimeHasElapsedM1+0x10>)
 800189a:	8818      	ldrh	r0, [r3, #0]
 800189c:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 800189e:	fab0 f080 	clz	r0, r0
 80018a2:	0940      	lsrs	r0, r0, #5
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	20000728 	.word	0x20000728

080018ac <TSK_MediumFrequencyTaskM1>:
{
 80018ac:	b570      	push	{r4, r5, r6, lr}
  PQD_CalcElMotorPower(pMPM[M1]);
 80018ae:	4d9f      	ldr	r5, [pc, #636]	; (8001b2c <TSK_MediumFrequencyTaskM1+0x280>)
  (void)ENC_CalcAvrgMecSpeedUnit(&ENCODER_M1, &wAux);
 80018b0:	489f      	ldr	r0, [pc, #636]	; (8001b30 <TSK_MediumFrequencyTaskM1+0x284>)
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 80018b2:	4ca0      	ldr	r4, [pc, #640]	; (8001b34 <TSK_MediumFrequencyTaskM1+0x288>)
{
 80018b4:	b082      	sub	sp, #8
  int16_t wAux = 0;
 80018b6:	2300      	movs	r3, #0
  (void)ENC_CalcAvrgMecSpeedUnit(&ENCODER_M1, &wAux);
 80018b8:	f10d 0106 	add.w	r1, sp, #6
  int16_t wAux = 0;
 80018bc:	f8ad 3006 	strh.w	r3, [sp, #6]
  (void)ENC_CalcAvrgMecSpeedUnit(&ENCODER_M1, &wAux);
 80018c0:	f004 f930 	bl	8005b24 <ENC_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower(pMPM[M1]);
 80018c4:	6828      	ldr	r0, [r5, #0]
 80018c6:	f004 fc31 	bl	800612c <PQD_CalcElMotorPower>
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 80018ca:	4620      	mov	r0, r4
 80018cc:	f7ff fce4 	bl	8001298 <MCI_GetCurrentFaults>
 80018d0:	b118      	cbz	r0, 80018da <TSK_MediumFrequencyTaskM1+0x2e>
    Mci[M1].State = FAULT_NOW;
 80018d2:	230a      	movs	r3, #10
 80018d4:	77e3      	strb	r3, [r4, #31]
}
 80018d6:	b002      	add	sp, #8
 80018d8:	bd70      	pop	{r4, r5, r6, pc}
    if (MCI_GetOccurredFaults(&Mci[M1]) == MC_NO_FAULTS)
 80018da:	4620      	mov	r0, r4
 80018dc:	f7ff fcda 	bl	8001294 <MCI_GetOccurredFaults>
 80018e0:	bb80      	cbnz	r0, 8001944 <TSK_MediumFrequencyTaskM1+0x98>
      switch (Mci[M1].State)
 80018e2:	7fe3      	ldrb	r3, [r4, #31]
 80018e4:	2b14      	cmp	r3, #20
 80018e6:	d8f6      	bhi.n	80018d6 <TSK_MediumFrequencyTaskM1+0x2a>
 80018e8:	a201      	add	r2, pc, #4	; (adr r2, 80018f0 <TSK_MediumFrequencyTaskM1+0x44>)
 80018ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018ee:	bf00      	nop
 80018f0:	08001a8f 	.word	0x08001a8f
 80018f4:	080018d7 	.word	0x080018d7
 80018f8:	08001a3d 	.word	0x08001a3d
 80018fc:	080018d7 	.word	0x080018d7
 8001900:	080018d7 	.word	0x080018d7
 8001904:	080018d7 	.word	0x080018d7
 8001908:	08001a29 	.word	0x08001a29
 800190c:	080018d7 	.word	0x080018d7
 8001910:	08001a1d 	.word	0x08001a1d
 8001914:	080018d7 	.word	0x080018d7
 8001918:	08001945 	.word	0x08001945
 800191c:	08001a0f 	.word	0x08001a0f
 8001920:	080018d7 	.word	0x080018d7
 8001924:	080018d7 	.word	0x080018d7
 8001928:	080018d7 	.word	0x080018d7
 800192c:	080018d7 	.word	0x080018d7
 8001930:	080019bd 	.word	0x080019bd
 8001934:	0800198b 	.word	0x0800198b
 8001938:	080018d7 	.word	0x080018d7
 800193c:	080018d7 	.word	0x080018d7
 8001940:	0800194d 	.word	0x0800194d
      Mci[M1].State = FAULT_OVER;
 8001944:	230b      	movs	r3, #11
 8001946:	77e3      	strb	r3, [r4, #31]
}
 8001948:	b002      	add	sp, #8
 800194a:	bd70      	pop	{r4, r5, r6, pc}
          if (MCI_STOP == Mci[M1].DirectCommand)
 800194c:	7fa3      	ldrb	r3, [r4, #30]
 800194e:	2b05      	cmp	r3, #5
 8001950:	f000 80ad 	beq.w	8001aae <TSK_MediumFrequencyTaskM1+0x202>
            if (TSK_StopPermanencyTimeHasElapsedM1())
 8001954:	f7ff ffa0 	bl	8001898 <TSK_StopPermanencyTimeHasElapsedM1>
 8001958:	2800      	cmp	r0, #0
 800195a:	d0bc      	beq.n	80018d6 <TSK_MediumFrequencyTaskM1+0x2a>
              ENC_Clear(&ENCODER_M1);
 800195c:	4874      	ldr	r0, [pc, #464]	; (8001b30 <TSK_MediumFrequencyTaskM1+0x284>)
 800195e:	f004 f8b9 	bl	8005ad4 <ENC_Clear>
              R3_1_SwitchOnPWM(pwmcHandle[M1]);
 8001962:	4b75      	ldr	r3, [pc, #468]	; (8001b38 <TSK_MediumFrequencyTaskM1+0x28c>)
 8001964:	6818      	ldr	r0, [r3, #0]
 8001966:	f004 fd67 	bl	8006438 <R3_1_SwitchOnPWM>
              FOC_InitAdditionalMethods(M1);
 800196a:	2000      	movs	r0, #0
 800196c:	f7ff ff66 	bl	800183c <FOC_InitAdditionalMethods>
              STC_ForceSpeedReferenceToCurrentSpeed(pSTC[M1]); /* Init the reference speed to current speed */
 8001970:	4b72      	ldr	r3, [pc, #456]	; (8001b3c <TSK_MediumFrequencyTaskM1+0x290>)
 8001972:	6818      	ldr	r0, [r3, #0]
 8001974:	f005 fb14 	bl	8006fa0 <STC_ForceSpeedReferenceToCurrentSpeed>
              MCI_ExecBufferedCommands(&Mci[M1]); /* Exec the speed ramp after changing of the speed sensor */
 8001978:	486e      	ldr	r0, [pc, #440]	; (8001b34 <TSK_MediumFrequencyTaskM1+0x288>)
 800197a:	f7ff fc4d 	bl	8001218 <MCI_ExecBufferedCommands>
              FOC_CalcCurrRef(M1);
 800197e:	2000      	movs	r0, #0
 8001980:	f7ff ff5e 	bl	8001840 <FOC_CalcCurrRef>
              Mci[M1].State = RUN;
 8001984:	2306      	movs	r3, #6
 8001986:	77e3      	strb	r3, [r4, #31]
 8001988:	e7a5      	b.n	80018d6 <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_STOP == Mci[M1].DirectCommand)
 800198a:	7fa3      	ldrb	r3, [r4, #30]
 800198c:	2b05      	cmp	r3, #5
 800198e:	f000 808e 	beq.w	8001aae <TSK_MediumFrequencyTaskM1+0x202>
            if (PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC))
 8001992:	4e69      	ldr	r6, [pc, #420]	; (8001b38 <TSK_MediumFrequencyTaskM1+0x28c>)
 8001994:	2101      	movs	r1, #1
 8001996:	6830      	ldr	r0, [r6, #0]
 8001998:	f000 fdce 	bl	8002538 <PWMC_CurrentReadingCalibr>
 800199c:	2800      	cmp	r0, #0
 800199e:	d09a      	beq.n	80018d6 <TSK_MediumFrequencyTaskM1+0x2a>
              if (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand)
 80019a0:	7fa3      	ldrb	r3, [r4, #30]
 80019a2:	2b03      	cmp	r3, #3
 80019a4:	f000 80a3 	beq.w	8001aee <TSK_MediumFrequencyTaskM1+0x242>
                R3_1_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 80019a8:	6830      	ldr	r0, [r6, #0]
 80019aa:	2100      	movs	r1, #0
 80019ac:	f004 fe50 	bl	8006650 <R3_1_TurnOnLowSides>
                TSK_SetChargeBootCapDelayM1(M1_CHARGE_BOOT_CAP_TICKS);
 80019b0:	2014      	movs	r0, #20
 80019b2:	f7ff ff5b 	bl	800186c <TSK_SetChargeBootCapDelayM1>
                Mci[M1].State = CHARGE_BOOT_CAP;
 80019b6:	2310      	movs	r3, #16
 80019b8:	77e3      	strb	r3, [r4, #31]
 80019ba:	e78c      	b.n	80018d6 <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_STOP == Mci[M1].DirectCommand)
 80019bc:	7fa3      	ldrb	r3, [r4, #30]
 80019be:	2b05      	cmp	r3, #5
 80019c0:	d075      	beq.n	8001aae <TSK_MediumFrequencyTaskM1+0x202>
            if (TSK_ChargeBootCapDelayHasElapsedM1())
 80019c2:	f7ff ff59 	bl	8001878 <TSK_ChargeBootCapDelayHasElapsedM1>
 80019c6:	2800      	cmp	r0, #0
 80019c8:	d085      	beq.n	80018d6 <TSK_MediumFrequencyTaskM1+0x2a>
              R3_1_SwitchOffPWM(pwmcHandle[M1]);
 80019ca:	4d5b      	ldr	r5, [pc, #364]	; (8001b38 <TSK_MediumFrequencyTaskM1+0x28c>)
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 80019cc:	4e5b      	ldr	r6, [pc, #364]	; (8001b3c <TSK_MediumFrequencyTaskM1+0x290>)
              R3_1_SwitchOffPWM(pwmcHandle[M1]);
 80019ce:	6828      	ldr	r0, [r5, #0]
 80019d0:	f004 fd82 	bl	80064d8 <R3_1_SwitchOffPWM>
              FOCVars[M1].bDriveInput = EXTERNAL;
 80019d4:	4b5a      	ldr	r3, [pc, #360]	; (8001b40 <TSK_MediumFrequencyTaskM1+0x294>)
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 80019d6:	495b      	ldr	r1, [pc, #364]	; (8001b44 <TSK_MediumFrequencyTaskM1+0x298>)
 80019d8:	6830      	ldr	r0, [r6, #0]
              FOCVars[M1].bDriveInput = EXTERNAL;
 80019da:	2201      	movs	r2, #1
 80019dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 80019e0:	f005 fa42 	bl	8006e68 <STC_SetSpeedSensor>
              ENC_Clear(&ENCODER_M1);
 80019e4:	4852      	ldr	r0, [pc, #328]	; (8001b30 <TSK_MediumFrequencyTaskM1+0x284>)
 80019e6:	f004 f875 	bl	8005ad4 <ENC_Clear>
              FOC_Clear( M1 );
 80019ea:	2000      	movs	r0, #0
 80019ec:	f7ff fe50 	bl	8001690 <FOC_Clear>
              if (EAC_IsAligned(&EncAlignCtrlM1) == false)
 80019f0:	4855      	ldr	r0, [pc, #340]	; (8001b48 <TSK_MediumFrequencyTaskM1+0x29c>)
 80019f2:	f004 f833 	bl	8005a5c <EAC_IsAligned>
 80019f6:	2800      	cmp	r0, #0
 80019f8:	f040 8082 	bne.w	8001b00 <TSK_MediumFrequencyTaskM1+0x254>
                EAC_StartAlignment(&EncAlignCtrlM1);
 80019fc:	4852      	ldr	r0, [pc, #328]	; (8001b48 <TSK_MediumFrequencyTaskM1+0x29c>)
 80019fe:	f003 ffed 	bl	80059dc <EAC_StartAlignment>
                Mci[M1].State = ALIGNMENT;
 8001a02:	2302      	movs	r3, #2
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 8001a04:	6828      	ldr	r0, [r5, #0]
                Mci[M1].State = ALIGNMENT;
 8001a06:	77e3      	strb	r3, [r4, #31]
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 8001a08:	f000 fd94 	bl	8002534 <PWMC_SwitchOnPWM>
 8001a0c:	e763      	b.n	80018d6 <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_ACK_FAULTS == Mci[M1].DirectCommand)
 8001a0e:	7fa3      	ldrb	r3, [r4, #30]
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	f47f af60 	bne.w	80018d6 <TSK_MediumFrequencyTaskM1+0x2a>
            Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8001a16:	2300      	movs	r3, #0
 8001a18:	83e3      	strh	r3, [r4, #30]
 8001a1a:	e75c      	b.n	80018d6 <TSK_MediumFrequencyTaskM1+0x2a>
          if (TSK_StopPermanencyTimeHasElapsedM1())
 8001a1c:	f7ff ff3c 	bl	8001898 <TSK_StopPermanencyTimeHasElapsedM1>
 8001a20:	2800      	cmp	r0, #0
 8001a22:	f43f af58 	beq.w	80018d6 <TSK_MediumFrequencyTaskM1+0x2a>
 8001a26:	e7f6      	b.n	8001a16 <TSK_MediumFrequencyTaskM1+0x16a>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001a28:	7fa3      	ldrb	r3, [r4, #30]
 8001a2a:	2b05      	cmp	r3, #5
 8001a2c:	d03f      	beq.n	8001aae <TSK_MediumFrequencyTaskM1+0x202>
            MCI_ExecBufferedCommands(&Mci[M1]);
 8001a2e:	4841      	ldr	r0, [pc, #260]	; (8001b34 <TSK_MediumFrequencyTaskM1+0x288>)
 8001a30:	f7ff fbf2 	bl	8001218 <MCI_ExecBufferedCommands>
              FOC_CalcCurrRef(M1);
 8001a34:	2000      	movs	r0, #0
 8001a36:	f7ff ff03 	bl	8001840 <FOC_CalcCurrRef>
 8001a3a:	e74c      	b.n	80018d6 <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001a3c:	7fa3      	ldrb	r3, [r4, #30]
 8001a3e:	2b05      	cmp	r3, #5
 8001a40:	d035      	beq.n	8001aae <TSK_MediumFrequencyTaskM1+0x202>
            bool isAligned = EAC_IsAligned(&EncAlignCtrlM1);
 8001a42:	4841      	ldr	r0, [pc, #260]	; (8001b48 <TSK_MediumFrequencyTaskM1+0x29c>)
 8001a44:	f004 f80a 	bl	8005a5c <EAC_IsAligned>
 8001a48:	4605      	mov	r5, r0
            bool EACDone = EAC_Exec(&EncAlignCtrlM1);
 8001a4a:	483f      	ldr	r0, [pc, #252]	; (8001b48 <TSK_MediumFrequencyTaskM1+0x29c>)
 8001a4c:	f003 ffee 	bl	8005a2c <EAC_Exec>
 8001a50:	4606      	mov	r6, r0
            if ((isAligned == false)  && (EACDone == false))
 8001a52:	b90d      	cbnz	r5, 8001a58 <TSK_MediumFrequencyTaskM1+0x1ac>
 8001a54:	2800      	cmp	r0, #0
 8001a56:	d042      	beq.n	8001ade <TSK_MediumFrequencyTaskM1+0x232>
              R3_1_SwitchOffPWM( pwmcHandle[M1] );
 8001a58:	4d37      	ldr	r5, [pc, #220]	; (8001b38 <TSK_MediumFrequencyTaskM1+0x28c>)
              STC_SetControlMode(pSTC[M1], MCM_SPEED_MODE);
 8001a5a:	4e38      	ldr	r6, [pc, #224]	; (8001b3c <TSK_MediumFrequencyTaskM1+0x290>)
              R3_1_SwitchOffPWM( pwmcHandle[M1] );
 8001a5c:	6828      	ldr	r0, [r5, #0]
 8001a5e:	f004 fd3b 	bl	80064d8 <R3_1_SwitchOffPWM>
              STC_SetControlMode(pSTC[M1], MCM_SPEED_MODE);
 8001a62:	6830      	ldr	r0, [r6, #0]
 8001a64:	2103      	movs	r1, #3
 8001a66:	f005 fa13 	bl	8006e90 <STC_SetControlMode>
              STC_SetSpeedSensor(pSTC[M1], &ENCODER_M1._Super);
 8001a6a:	4931      	ldr	r1, [pc, #196]	; (8001b30 <TSK_MediumFrequencyTaskM1+0x284>)
 8001a6c:	6830      	ldr	r0, [r6, #0]
 8001a6e:	f005 f9fb 	bl	8006e68 <STC_SetSpeedSensor>
              FOC_Clear(M1);
 8001a72:	2000      	movs	r0, #0
 8001a74:	f7ff fe0c 	bl	8001690 <FOC_Clear>
              R3_1_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 8001a78:	6828      	ldr	r0, [r5, #0]
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	f004 fde8 	bl	8006650 <R3_1_TurnOnLowSides>
              TSK_SetStopPermanencyTimeM1(STOPPERMANENCY_TICKS);
 8001a80:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001a84:	f7ff ff02 	bl	800188c <TSK_SetStopPermanencyTimeM1>
              Mci[M1].State = WAIT_STOP_MOTOR;
 8001a88:	2314      	movs	r3, #20
 8001a8a:	77e3      	strb	r3, [r4, #31]
 8001a8c:	e723      	b.n	80018d6 <TSK_MediumFrequencyTaskM1+0x2a>
          if ((MCI_START == Mci[M1].DirectCommand) || (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand))
 8001a8e:	7fa3      	ldrb	r3, [r4, #30]
 8001a90:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	f47f af1e 	bne.w	80018d6 <TSK_MediumFrequencyTaskM1+0x2a>
            if (pwmcHandle[M1]->offsetCalibStatus == false)
 8001a9a:	4d27      	ldr	r5, [pc, #156]	; (8001b38 <TSK_MediumFrequencyTaskM1+0x28c>)
 8001a9c:	6828      	ldr	r0, [r5, #0]
 8001a9e:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
 8001aa2:	b9a9      	cbnz	r1, 8001ad0 <TSK_MediumFrequencyTaskM1+0x224>
              (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_START);
 8001aa4:	f000 fd48 	bl	8002538 <PWMC_CurrentReadingCalibr>
              Mci[M1].State = OFFSET_CALIB;
 8001aa8:	2311      	movs	r3, #17
 8001aaa:	77e3      	strb	r3, [r4, #31]
 8001aac:	e713      	b.n	80018d6 <TSK_MediumFrequencyTaskM1+0x2a>
    R3_1_SwitchOffPWM(pwmcHandle[motor]);
 8001aae:	4b22      	ldr	r3, [pc, #136]	; (8001b38 <TSK_MediumFrequencyTaskM1+0x28c>)
 8001ab0:	6818      	ldr	r0, [r3, #0]
 8001ab2:	f004 fd11 	bl	80064d8 <R3_1_SwitchOffPWM>
  FOC_Clear(motor);
 8001ab6:	2000      	movs	r0, #0
 8001ab8:	f7ff fdea 	bl	8001690 <FOC_Clear>
  PQD_Clear(pMPM[motor]);
 8001abc:	6828      	ldr	r0, [r5, #0]
 8001abe:	f004 fb51 	bl	8006164 <PQD_Clear>
  TSK_SetStopPermanencyTimeM1(STOPPERMANENCY_TICKS);
 8001ac2:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001ac6:	f7ff fee1 	bl	800188c <TSK_SetStopPermanencyTimeM1>
  Mci[motor].State = STOP;
 8001aca:	2308      	movs	r3, #8
 8001acc:	77e3      	strb	r3, [r4, #31]
}
 8001ace:	e702      	b.n	80018d6 <TSK_MediumFrequencyTaskM1+0x2a>
              (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 8001ad0:	4619      	mov	r1, r3
              pwmcHandle[M1]->OffCalibrWaitTimeCounter = 1u;
 8001ad2:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
              (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 8001ad6:	f000 fd2f 	bl	8002538 <PWMC_CurrentReadingCalibr>
              R3_1_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 8001ada:	6828      	ldr	r0, [r5, #0]
 8001adc:	e765      	b.n	80019aa <TSK_MediumFrequencyTaskM1+0xfe>
              IqdRef.d = STC_CalcTorqueReference(pSTC[M1]);
 8001ade:	4b17      	ldr	r3, [pc, #92]	; (8001b3c <TSK_MediumFrequencyTaskM1+0x290>)
 8001ae0:	6818      	ldr	r0, [r3, #0]
 8001ae2:	f005 fa21 	bl	8006f28 <STC_CalcTorqueReference>
              FOCVars[M1].Iqdref = IqdRef;
 8001ae6:	4b16      	ldr	r3, [pc, #88]	; (8001b40 <TSK_MediumFrequencyTaskM1+0x294>)
 8001ae8:	821e      	strh	r6, [r3, #16]
 8001aea:	8258      	strh	r0, [r3, #18]
            {
 8001aec:	e6f3      	b.n	80018d6 <TSK_MediumFrequencyTaskM1+0x2a>
                FOC_Clear(M1);
 8001aee:	2000      	movs	r0, #0
 8001af0:	f7ff fdce 	bl	8001690 <FOC_Clear>
                PQD_Clear(pMPM[M1]);
 8001af4:	6828      	ldr	r0, [r5, #0]
 8001af6:	f004 fb35 	bl	8006164 <PQD_Clear>
                Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8001afa:	2300      	movs	r3, #0
 8001afc:	83e3      	strh	r3, [r4, #30]
 8001afe:	e6ea      	b.n	80018d6 <TSK_MediumFrequencyTaskM1+0x2a>
                STC_SetControlMode(pSTC[M1], MCM_SPEED_MODE);
 8001b00:	6830      	ldr	r0, [r6, #0]
 8001b02:	2103      	movs	r1, #3
 8001b04:	f005 f9c4 	bl	8006e90 <STC_SetControlMode>
                STC_SetSpeedSensor(pSTC[M1], &ENCODER_M1._Super);
 8001b08:	4909      	ldr	r1, [pc, #36]	; (8001b30 <TSK_MediumFrequencyTaskM1+0x284>)
 8001b0a:	6830      	ldr	r0, [r6, #0]
 8001b0c:	f005 f9ac 	bl	8006e68 <STC_SetSpeedSensor>
                FOC_InitAdditionalMethods(M1);
 8001b10:	2000      	movs	r0, #0
 8001b12:	f7ff fe93 	bl	800183c <FOC_InitAdditionalMethods>
                FOC_CalcCurrRef(M1);
 8001b16:	2000      	movs	r0, #0
 8001b18:	f7ff fe92 	bl	8001840 <FOC_CalcCurrRef>
                STC_ForceSpeedReferenceToCurrentSpeed(pSTC[M1]); /* Init the reference speed to current speed */
 8001b1c:	6830      	ldr	r0, [r6, #0]
 8001b1e:	f005 fa3f 	bl	8006fa0 <STC_ForceSpeedReferenceToCurrentSpeed>
                MCI_ExecBufferedCommands(&Mci[M1]); /* Exec the speed ramp after changing of the speed sensor */
 8001b22:	4804      	ldr	r0, [pc, #16]	; (8001b34 <TSK_MediumFrequencyTaskM1+0x288>)
 8001b24:	f7ff fb78 	bl	8001218 <MCI_ExecBufferedCommands>
 8001b28:	2306      	movs	r3, #6
 8001b2a:	e76b      	b.n	8001a04 <TSK_MediumFrequencyTaskM1+0x158>
 8001b2c:	200002a4 	.word	0x200002a4
 8001b30:	20000020 	.word	0x20000020
 8001b34:	200006c0 	.word	0x200006c0
 8001b38:	20000730 	.word	0x20000730
 8001b3c:	200002b0 	.word	0x200002b0
 8001b40:	200006fc 	.word	0x200006fc
 8001b44:	2000026c 	.word	0x2000026c
 8001b48:	200000a0 	.word	0x200000a0

08001b4c <MC_Scheduler>:
  if (((uint8_t)1) == bMCBootCompleted)
 8001b4c:	4b1d      	ldr	r3, [pc, #116]	; (8001bc4 <MC_Scheduler+0x78>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d000      	beq.n	8001b56 <MC_Scheduler+0xa>
 8001b54:	4770      	bx	lr
{
 8001b56:	b570      	push	{r4, r5, r6, lr}
    if(hMFTaskCounterM1 > 0u)
 8001b58:	4c1b      	ldr	r4, [pc, #108]	; (8001bc8 <MC_Scheduler+0x7c>)
 8001b5a:	8823      	ldrh	r3, [r4, #0]
 8001b5c:	b19b      	cbz	r3, 8001b86 <MC_Scheduler+0x3a>
      hMFTaskCounterM1--;
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	b29b      	uxth	r3, r3
    if(hBootCapDelayCounterM1 > 0U)
 8001b62:	4a1a      	ldr	r2, [pc, #104]	; (8001bcc <MC_Scheduler+0x80>)
      hMFTaskCounterM1--;
 8001b64:	8023      	strh	r3, [r4, #0]
    if(hBootCapDelayCounterM1 > 0U)
 8001b66:	8813      	ldrh	r3, [r2, #0]
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	b11b      	cbz	r3, 8001b74 <MC_Scheduler+0x28>
      hBootCapDelayCounterM1--;
 8001b6c:	8813      	ldrh	r3, [r2, #0]
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	8013      	strh	r3, [r2, #0]
    if(hStopPermanencyCounterM1 > 0U)
 8001b74:	4a16      	ldr	r2, [pc, #88]	; (8001bd0 <MC_Scheduler+0x84>)
 8001b76:	8813      	ldrh	r3, [r2, #0]
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	b11b      	cbz	r3, 8001b84 <MC_Scheduler+0x38>
      hStopPermanencyCounterM1--;
 8001b7c:	8813      	ldrh	r3, [r2, #0]
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	8013      	strh	r3, [r2, #0]
}
 8001b84:	bd70      	pop	{r4, r5, r6, pc}
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess(MCP_Over_UartA.pTransportLayer,
 8001b86:	4d13      	ldr	r5, [pc, #76]	; (8001bd4 <MC_Scheduler+0x88>)
      TSK_MediumFrequencyTaskM1();
 8001b88:	f7ff fe90 	bl	80018ac <TSK_MediumFrequencyTaskM1>
      MC_APP_PostMediumFrequencyHook_M1();
 8001b8c:	f7ff fb08 	bl	80011a0 <MC_APP_PostMediumFrequencyHook_M1>
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess(MCP_Over_UartA.pTransportLayer,
 8001b90:	4629      	mov	r1, r5
 8001b92:	f851 0b0c 	ldr.w	r0, [r1], #12
 8001b96:	6883      	ldr	r3, [r0, #8]
 8001b98:	4798      	blx	r3
 8001b9a:	6068      	str	r0, [r5, #4]
      if ( 0U == MCP_Over_UartA.rxBuffer)
 8001b9c:	b130      	cbz	r0, 8001bac <MC_Scheduler+0x60>
        if (0U == MCP_Over_UartA.pTransportLayer->fGetBuffer(MCP_Over_UartA.pTransportLayer,
 8001b9e:	4629      	mov	r1, r5
 8001ba0:	220a      	movs	r2, #10
 8001ba2:	f851 0b08 	ldr.w	r0, [r1], #8
 8001ba6:	6803      	ldr	r3, [r0, #0]
 8001ba8:	4798      	blx	r3
 8001baa:	b908      	cbnz	r0, 8001bb0 <MC_Scheduler+0x64>
{
 8001bac:	2301      	movs	r3, #1
 8001bae:	e7d8      	b.n	8001b62 <MC_Scheduler+0x16>
          MCP_ReceivedPacket(&MCP_Over_UartA);
 8001bb0:	4628      	mov	r0, r5
 8001bb2:	f000 fa3f 	bl	8002034 <MCP_ReceivedPacket>
          MCP_Over_UartA.pTransportLayer->fSendPacket(MCP_Over_UartA.pTransportLayer, MCP_Over_UartA.txBuffer,
 8001bb6:	6828      	ldr	r0, [r5, #0]
 8001bb8:	89ea      	ldrh	r2, [r5, #14]
 8001bba:	6846      	ldr	r6, [r0, #4]
 8001bbc:	68a9      	ldr	r1, [r5, #8]
 8001bbe:	230a      	movs	r3, #10
 8001bc0:	47b0      	blx	r6
 8001bc2:	e7f3      	b.n	8001bac <MC_Scheduler+0x60>
 8001bc4:	20000722 	.word	0x20000722
 8001bc8:	20000726 	.word	0x20000726
 8001bcc:	20000724 	.word	0x20000724
 8001bd0:	20000728 	.word	0x20000728
 8001bd4:	20000300 	.word	0x20000300

08001bd8 <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 8001bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t bMotorNbr = 0;
  /* USER CODE BEGIN HighFrequencyTask 0 */

  /* USER CODE END HighFrequencyTask 0 */

  (void)ENC_CalcAngle(&ENCODER_M1);   /* If not sensorless then 2nd parameter is MC_NULL */
 8001bdc:	4833      	ldr	r0, [pc, #204]	; (8001cac <TSK_HighFrequencyTask+0xd4>)
  int16_t hElAngle;
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
  hElAngle = SPD_GetElAngle(speedHandle);
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8001bde:	4f34      	ldr	r7, [pc, #208]	; (8001cb0 <TSK_HighFrequencyTask+0xd8>)
  Ialphabeta = MCM_Clarke(Iab);
  Iqd = MCM_Park(Ialphabeta, hElAngle);
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001be0:	4c34      	ldr	r4, [pc, #208]	; (8001cb4 <TSK_HighFrequencyTask+0xdc>)
{
 8001be2:	b086      	sub	sp, #24
  (void)ENC_CalcAngle(&ENCODER_M1);   /* If not sensorless then 2nd parameter is MC_NULL */
 8001be4:	f003 ff84 	bl	8005af0 <ENC_CalcAngle>
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8001be8:	4b33      	ldr	r3, [pc, #204]	; (8001cb8 <TSK_HighFrequencyTask+0xe0>)
 8001bea:	6818      	ldr	r0, [r3, #0]
 8001bec:	f005 f93e 	bl	8006e6c <STC_GetSpeedSensor>
 8001bf0:	4680      	mov	r8, r0
  hElAngle = SPD_GetElAngle(speedHandle);
 8001bf2:	f005 f8df 	bl	8006db4 <SPD_GetElAngle>
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8001bf6:	a903      	add	r1, sp, #12
  hElAngle = SPD_GetElAngle(speedHandle);
 8001bf8:	4605      	mov	r5, r0
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8001bfa:	6838      	ldr	r0, [r7, #0]
 8001bfc:	f000 fb04 	bl	8002208 <PWMC_GetPhaseCurrents>
  Ialphabeta = MCM_Clarke(Iab);
 8001c00:	9803      	ldr	r0, [sp, #12]
 8001c02:	f7ff fc33 	bl	800146c <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001c06:	4629      	mov	r1, r5
  Ialphabeta = MCM_Clarke(Iab);
 8001c08:	9004      	str	r0, [sp, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001c0a:	f7ff fca5 	bl	8001558 <MCM_Park>
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001c0e:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001c12:	9001      	str	r0, [sp, #4]
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001c14:	b203      	sxth	r3, r0
 8001c16:	1ac9      	subs	r1, r1, r3
 8001c18:	4b28      	ldr	r3, [pc, #160]	; (8001cbc <TSK_HighFrequencyTask+0xe4>)
 8001c1a:	6818      	ldr	r0, [r3, #0]
 8001c1c:	f004 fa42 	bl	80060a4 <PI_Controller>
  Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8001c20:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8001c24:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 8001c28:	1ac9      	subs	r1, r1, r3
 8001c2a:	4b25      	ldr	r3, [pc, #148]	; (8001cc0 <TSK_HighFrequencyTask+0xe8>)
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001c2c:	4606      	mov	r6, r0
  Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8001c2e:	6818      	ldr	r0, [r3, #0]
 8001c30:	f004 fa38 	bl	80060a4 <PI_Controller>
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 8001c34:	f8ad 6008 	strh.w	r6, [sp, #8]
 8001c38:	f8ad 000a 	strh.w	r0, [sp, #10]
 8001c3c:	9902      	ldr	r1, [sp, #8]
 8001c3e:	4821      	ldr	r0, [pc, #132]	; (8001cc4 <TSK_HighFrequencyTask+0xec>)
 8001c40:	f003 fe94 	bl	800596c <Circle_Limitation>
 8001c44:	4606      	mov	r6, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8001c46:	4640      	mov	r0, r8
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 8001c48:	9602      	str	r6, [sp, #8]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8001c4a:	f005 f8bb 	bl	8006dc4 <SPD_GetInstElSpeedDpp>
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8001c4e:	4629      	mov	r1, r5
 8001c50:	9802      	ldr	r0, [sp, #8]
 8001c52:	f7ff fcc3 	bl	80015dc <MCM_Rev_Park>
 8001c56:	4601      	mov	r1, r0
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8001c58:	6838      	ldr	r0, [r7, #0]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8001c5a:	9105      	str	r1, [sp, #20]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8001c5c:	f000 fad6 	bl	800220c <PWMC_SetPhaseVoltage>

  FOCVars[M1].Vqd = Vqd;
  FOCVars[M1].Iab = Iab;
 8001c60:	9b03      	ldr	r3, [sp, #12]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8001c62:	9a04      	ldr	r2, [sp, #16]
  FOCVars[M1].Iab = Iab;
 8001c64:	6023      	str	r3, [r4, #0]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8001c66:	4601      	mov	r1, r0
  FOCVars[M1].Iqd = Iqd;
 8001c68:	9b01      	ldr	r3, [sp, #4]
  FOCVars[M1].Valphabeta = Valphabeta;
 8001c6a:	9805      	ldr	r0, [sp, #20]
  FOCVars[M1].Vqd = Vqd;
 8001c6c:	f8c4 6016 	str.w	r6, [r4, #22]
  if(hFOCreturn == MC_DURATION)
 8001c70:	2901      	cmp	r1, #1
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8001c72:	6062      	str	r2, [r4, #4]
  FOCVars[M1].Iqd = Iqd;
 8001c74:	60e3      	str	r3, [r4, #12]
  FOCVars[M1].Valphabeta = Valphabeta;
 8001c76:	f8c4 001a 	str.w	r0, [r4, #26]
  FOCVars[M1].hElAngle = hElAngle;
 8001c7a:	8425      	strh	r5, [r4, #32]
  if(hFOCreturn == MC_DURATION)
 8001c7c:	d011      	beq.n	8001ca2 <TSK_HighFrequencyTask+0xca>
  GLOBAL_TIMESTAMP++;
 8001c7e:	4a12      	ldr	r2, [pc, #72]	; (8001cc8 <TSK_HighFrequencyTask+0xf0>)
  if (0U == MCPA_UART_A.Mark)
 8001c80:	4812      	ldr	r0, [pc, #72]	; (8001ccc <TSK_HighFrequencyTask+0xf4>)
  GLOBAL_TIMESTAMP++;
 8001c82:	6813      	ldr	r3, [r2, #0]
  if (0U == MCPA_UART_A.Mark)
 8001c84:	f890 1029 	ldrb.w	r1, [r0, #41]	; 0x29
  GLOBAL_TIMESTAMP++;
 8001c88:	3301      	adds	r3, #1
 8001c8a:	6013      	str	r3, [r2, #0]
  if (0U == MCPA_UART_A.Mark)
 8001c8c:	b919      	cbnz	r1, 8001c96 <TSK_HighFrequencyTask+0xbe>
}
 8001c8e:	2000      	movs	r0, #0
 8001c90:	b006      	add	sp, #24
 8001c92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MCPA_dataLog (&MCPA_UART_A);
 8001c96:	f004 f835 	bl	8005d04 <MCPA_dataLog>
}
 8001c9a:	2000      	movs	r0, #0
 8001c9c:	b006      	add	sp, #24
 8001c9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MCI_FaultProcessing(&Mci[M1], MC_DURATION, 0);
 8001ca2:	480b      	ldr	r0, [pc, #44]	; (8001cd0 <TSK_HighFrequencyTask+0xf8>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f7ff faab 	bl	8001200 <MCI_FaultProcessing>
 8001caa:	e7e8      	b.n	8001c7e <TSK_HighFrequencyTask+0xa6>
 8001cac:	20000020 	.word	0x20000020
 8001cb0:	20000730 	.word	0x20000730
 8001cb4:	200006fc 	.word	0x200006fc
 8001cb8:	200002b0 	.word	0x200002b0
 8001cbc:	200002ac 	.word	0x200002ac
 8001cc0:	200002a8 	.word	0x200002a8
 8001cc4:	2000001c 	.word	0x2000001c
 8001cc8:	20001904 	.word	0x20001904
 8001ccc:	200002d4 	.word	0x200002d4
 8001cd0:	200006c0 	.word	0x200006c0

08001cd4 <TSK_SafetyTask_PWMOFF>:
  * @brief  Safety task implementation if  MC.M1_ON_OVER_VOLTAGE == TURN_OFF_PWM.
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink.
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 8001cd4:	b570      	push	{r4, r5, r6, lr}

  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */
  uint16_t CodeReturn = MC_NO_ERROR;
  const uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};
  /* Check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
  CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[bMotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 8001cd6:	4e21      	ldr	r6, [pc, #132]	; (8001d5c <TSK_SafetyTask_PWMOFF+0x88>)
{
 8001cd8:	b082      	sub	sp, #8
 8001cda:	4604      	mov	r4, r0
  CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[bMotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 8001cdc:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8001ce0:	f000 fc5c 	bl	800259c <PWMC_IsFaultOccurred>
 8001ce4:	4605      	mov	r5, r0
                                                    (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  if (M1 == bMotor)
 8001ce6:	b354      	cbz	r4, 8001d3e <TSK_SafetyTask_PWMOFF+0x6a>
  }
  else
  {
    /* Nothing to do */
  }
  MCI_FaultProcessing(&Mci[bMotor], CodeReturn, ~CodeReturn); /* Process faults */
 8001ce8:	481d      	ldr	r0, [pc, #116]	; (8001d60 <TSK_SafetyTask_PWMOFF+0x8c>)
 8001cea:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8001cee:	43ea      	mvns	r2, r5
 8001cf0:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 8001cf4:	b292      	uxth	r2, r2
 8001cf6:	4629      	mov	r1, r5
 8001cf8:	9001      	str	r0, [sp, #4]
 8001cfa:	f7ff fa81 	bl	8001200 <MCI_FaultProcessing>

  if (MCI_GetFaultState(&Mci[bMotor]) != (uint32_t)MC_NO_FAULTS)
 8001cfe:	9801      	ldr	r0, [sp, #4]
 8001d00:	f7ff fb2e 	bl	8001360 <MCI_GetFaultState>
 8001d04:	b1c8      	cbz	r0, 8001d3a <TSK_SafetyTask_PWMOFF+0x66>
  {
    /* Reset Encoder state */
    if (pEAC[bMotor] != MC_NULL)
 8001d06:	4b17      	ldr	r3, [pc, #92]	; (8001d64 <TSK_SafetyTask_PWMOFF+0x90>)
 8001d08:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8001d0c:	b110      	cbz	r0, 8001d14 <TSK_SafetyTask_PWMOFF+0x40>
    {
      EAC_SetRestartState(pEAC[bMotor], false);
 8001d0e:	2100      	movs	r1, #0
 8001d10:	f003 fea6 	bl	8005a60 <EAC_SetRestartState>
    }
    else
    {
      /* Nothing to do */
    }
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001d14:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8001d18:	f000 fc0a 	bl	8002530 <PWMC_SwitchOffPWM>
    if (MCPA_UART_A.Mark != 0U)
 8001d1c:	4812      	ldr	r0, [pc, #72]	; (8001d68 <TSK_SafetyTask_PWMOFF+0x94>)
 8001d1e:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8001d22:	b9c3      	cbnz	r3, 8001d56 <TSK_SafetyTask_PWMOFF+0x82>
    }
    else
    {
      /* Nothing to do */
    }
    FOC_Clear(bMotor);
 8001d24:	4620      	mov	r0, r4
 8001d26:	f7ff fcb3 	bl	8001690 <FOC_Clear>
    PQD_Clear(pMPM[bMotor]); //cstat !MISRAC2012-Rule-11.3
 8001d2a:	4b10      	ldr	r3, [pc, #64]	; (8001d6c <TSK_SafetyTask_PWMOFF+0x98>)
 8001d2c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    /* No errors */
  }
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 8001d30:	b002      	add	sp, #8
 8001d32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    PQD_Clear(pMPM[bMotor]); //cstat !MISRAC2012-Rule-11.3
 8001d36:	f004 ba15 	b.w	8006164 <PQD_Clear>
}
 8001d3a:	b002      	add	sp, #8
 8001d3c:	bd70      	pop	{r4, r5, r6, pc}
    uint16_t rawValueM1 =  RCM_ExecRegularConv(&VbusRegConv_M1);
 8001d3e:	480c      	ldr	r0, [pc, #48]	; (8001d70 <TSK_SafetyTask_PWMOFF+0x9c>)
 8001d40:	f001 fc22 	bl	8003588 <RCM_ExecRegularConv>
 8001d44:	4601      	mov	r1, r0
    CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(&BusVoltageSensor_M1, rawValueM1);
 8001d46:	480b      	ldr	r0, [pc, #44]	; (8001d74 <TSK_SafetyTask_PWMOFF+0xa0>)
 8001d48:	f004 fffe 	bl	8006d48 <RVBS_CalcAvVbus>
 8001d4c:	f020 0008 	bic.w	r0, r0, #8
 8001d50:	4328      	orrs	r0, r5
 8001d52:	b285      	uxth	r5, r0
 8001d54:	e7c8      	b.n	8001ce8 <TSK_SafetyTask_PWMOFF+0x14>
      MCPA_flushDataLog (&MCPA_UART_A);
 8001d56:	f004 f899 	bl	8005e8c <MCPA_flushDataLog>
 8001d5a:	e7e3      	b.n	8001d24 <TSK_SafetyTask_PWMOFF+0x50>
 8001d5c:	20000730 	.word	0x20000730
 8001d60:	200006c0 	.word	0x200006c0
 8001d64:	2000072c 	.word	0x2000072c
 8001d68:	200002d4 	.word	0x200002d4
 8001d6c:	200002a4 	.word	0x200002a4
 8001d70:	2000025c 	.word	0x2000025c
 8001d74:	20000000 	.word	0x20000000

08001d78 <TSK_SafetyTask>:
{
 8001d78:	b508      	push	{r3, lr}
  if (1U == bMCBootCompleted)
 8001d7a:	4b06      	ldr	r3, [pc, #24]	; (8001d94 <TSK_SafetyTask+0x1c>)
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d000      	beq.n	8001d84 <TSK_SafetyTask+0xc>
}
 8001d82:	bd08      	pop	{r3, pc}
    TSK_SafetyTask_PWMOFF(M1);
 8001d84:	2000      	movs	r0, #0
 8001d86:	f7ff ffa5 	bl	8001cd4 <TSK_SafetyTask_PWMOFF>
}
 8001d8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCM_ExecUserConv();
 8001d8e:	f001 bc35 	b.w	80035fc <RCM_ExecUserConv>
 8001d92:	bf00      	nop
 8001d94:	20000722 	.word	0x20000722

08001d98 <MC_RunMotorControlTasks>:
{
 8001d98:	b508      	push	{r3, lr}
  if (0U == bMCBootCompleted)
 8001d9a:	4b04      	ldr	r3, [pc, #16]	; (8001dac <MC_RunMotorControlTasks+0x14>)
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	b903      	cbnz	r3, 8001da2 <MC_RunMotorControlTasks+0xa>
}
 8001da0:	bd08      	pop	{r3, pc}
    MC_Scheduler();
 8001da2:	f7ff fed3 	bl	8001b4c <MC_Scheduler>
    TSK_SafetyTask();
 8001da6:	f7ff ffe7 	bl	8001d78 <TSK_SafetyTask>
}
 8001daa:	bd08      	pop	{r3, pc}
 8001dac:	20000722 	.word	0x20000722

08001db0 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 8001db0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */
  R3_1_SwitchOffPWM(pwmcHandle[M1]);
 8001db2:	4b05      	ldr	r3, [pc, #20]	; (8001dc8 <TSK_HardwareFaultTask+0x18>)
 8001db4:	6818      	ldr	r0, [r3, #0]
 8001db6:	f004 fb8f 	bl	80064d8 <R3_1_SwitchOffPWM>
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);

  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 8001dba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);
 8001dbe:	4803      	ldr	r0, [pc, #12]	; (8001dcc <TSK_HardwareFaultTask+0x1c>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	2180      	movs	r1, #128	; 0x80
 8001dc4:	f7ff ba1c 	b.w	8001200 <MCI_FaultProcessing>
 8001dc8:	20000730 	.word	0x20000730
 8001dcc:	200006c0 	.word	0x200006c0

08001dd0 <UI_HandleStartStopButton_cb>:

__weak void UI_HandleStartStopButton_cb (void)
{
 8001dd0:	b508      	push	{r3, lr}
/* USER CODE BEGIN START_STOP_BTN */
  if (IDLE == MC_GetSTMStateMotor1())
 8001dd2:	f7ff f9db 	bl	800118c <MC_GetSTMStateMotor1>
 8001dd6:	b918      	cbnz	r0, 8001de0 <UI_HandleStartStopButton_cb+0x10>
  else
  {
    (void)MC_StopMotor1();
  }
/* USER CODE END START_STOP_BTN */
}
 8001dd8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    (void)MC_StartMotor1();
 8001ddc:	f7ff b9ca 	b.w	8001174 <MC_StartMotor1>
}
 8001de0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    (void)MC_StopMotor1();
 8001de4:	f7ff b9cc 	b.w	8001180 <MC_StopMotor1>

08001de8 <mc_lock_pins>:

 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration.
  */
__weak void mc_lock_pins (void)
{
 8001de8:	b430      	push	{r4, r5}
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001dea:	4a35      	ldr	r2, [pc, #212]	; (8001ec0 <mc_lock_pins+0xd8>)
 8001dec:	4835      	ldr	r0, [pc, #212]	; (8001ec4 <mc_lock_pins+0xdc>)
 8001dee:	f44f 3181 	mov.w	r1, #66048	; 0x10200
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001df2:	f44f 7400 	mov.w	r4, #512	; 0x200
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001df6:	61d1      	str	r1, [r2, #28]
 8001df8:	b08c      	sub	sp, #48	; 0x30
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001dfa:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001dfc:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001dfe:	69d3      	ldr	r3, [r2, #28]
 8001e00:	930b      	str	r3, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e02:	f44f 7580 	mov.w	r5, #256	; 0x100
  (void) temp;
 8001e06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e08:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e0a:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e0c:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001e0e:	69d3      	ldr	r3, [r2, #28]
 8001e10:	930a      	str	r3, [sp, #40]	; 0x28
  (void) temp;
 8001e12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e14:	4b2c      	ldr	r3, [pc, #176]	; (8001ec8 <mc_lock_pins+0xe0>)
 8001e16:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e18:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e1a:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001e1c:	69d8      	ldr	r0, [r3, #28]
 8001e1e:	9009      	str	r0, [sp, #36]	; 0x24
  (void) temp;
 8001e20:	9809      	ldr	r0, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e22:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e24:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e26:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001e28:	69d9      	ldr	r1, [r3, #28]
 8001e2a:	9108      	str	r1, [sp, #32]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e2c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e30:	f44f 31a0 	mov.w	r1, #81920	; 0x14000
  (void) temp;
 8001e34:	9c08      	ldr	r4, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e36:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e38:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e3a:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001e3c:	69d1      	ldr	r1, [r2, #28]
 8001e3e:	9107      	str	r1, [sp, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e40:	f44f 6080 	mov.w	r0, #1024	; 0x400
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e44:	f44f 3182 	mov.w	r1, #66560	; 0x10400
  (void) temp;
 8001e48:	9c07      	ldr	r4, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e4a:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e4c:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e4e:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001e50:	69d9      	ldr	r1, [r3, #28]
 8001e52:	9106      	str	r1, [sp, #24]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e54:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e58:	f44f 31c0 	mov.w	r1, #98304	; 0x18000
  (void) temp;
 8001e5c:	9c06      	ldr	r4, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e5e:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e60:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e62:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001e64:	69d1      	ldr	r1, [r2, #28]
 8001e66:	9105      	str	r1, [sp, #20]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e68:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e6c:	f44f 3190 	mov.w	r1, #73728	; 0x12000
  (void) temp;
 8001e70:	9c05      	ldr	r4, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e72:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e74:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e76:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001e78:	69d2      	ldr	r2, [r2, #28]
 8001e7a:	9204      	str	r2, [sp, #16]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e7c:	2001      	movs	r0, #1
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e7e:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  (void) temp;
 8001e82:	9904      	ldr	r1, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e84:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e86:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e88:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001e8a:	69d9      	ldr	r1, [r3, #28]
 8001e8c:	9103      	str	r1, [sp, #12]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e8e:	2402      	movs	r4, #2
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e90:	490e      	ldr	r1, [pc, #56]	; (8001ecc <mc_lock_pins+0xe4>)
  (void) temp;
 8001e92:	9d03      	ldr	r5, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e94:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e96:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e98:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001e9a:	69db      	ldr	r3, [r3, #28]
 8001e9c:	9302      	str	r3, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e9e:	4b0c      	ldr	r3, [pc, #48]	; (8001ed0 <mc_lock_pins+0xe8>)
  (void) temp;
 8001ea0:	9d02      	ldr	r5, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001ea2:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001ea4:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001ea6:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001ea8:	69d9      	ldr	r1, [r3, #28]
 8001eaa:	9101      	str	r1, [sp, #4]
  (void) temp;
 8001eac:	9901      	ldr	r1, [sp, #4]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001eae:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001eb0:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001eb2:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	9300      	str	r3, [sp, #0]
  (void) temp;
 8001eb8:	9b00      	ldr	r3, [sp, #0]
LL_GPIO_LockPin(M1_PWM_UL_GPIO_Port, M1_PWM_UL_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_U_GPIO_Port, M1_CURR_AMPL_U_Pin);
LL_GPIO_LockPin(M1_BUS_VOLTAGE_GPIO_Port, M1_BUS_VOLTAGE_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_V_GPIO_Port, M1_CURR_AMPL_V_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_W_GPIO_Port, M1_CURR_AMPL_W_Pin);
}
 8001eba:	b00c      	add	sp, #48	; 0x30
 8001ebc:	bc30      	pop	{r4, r5}
 8001ebe:	4770      	bx	lr
 8001ec0:	40020400 	.word	0x40020400
 8001ec4:	00010100 	.word	0x00010100
 8001ec8:	40020000 	.word	0x40020000
 8001ecc:	00010002 	.word	0x00010002
 8001ed0:	40020800 	.word	0x40020800

08001ed4 <RI_SetRegCommandParser>:
  * @param  txSyncFreeSpace Space available for synchronous transmission
  *
  * @retval Returns #MCP_CMD_OK if the command is acknowledged and #MCP_CMD_NOK if not.
  */
uint8_t RI_SetRegCommandParser (MCP_Handle_t * pHandle, uint16_t txSyncFreeSpace)
{
 8001ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ed8:	b087      	sub	sp, #28
    uint8_t accessResult;

    uint16_t regID;
    uint8_t typeID;
    uint8_t motorID;
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 8001eda:	4b2f      	ldr	r3, [pc, #188]	; (8001f98 <RI_SetRegCommandParser+0xc4>)
 8001edc:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8001ee0:	9304      	str	r3, [sp, #16]
 8001ee2:	4b2e      	ldr	r3, [pc, #184]	; (8001f9c <RI_SetRegCommandParser+0xc8>)
 8001ee4:	9305      	str	r3, [sp, #20]
    uint16_t size = 0U;
 8001ee6:	2600      	movs	r6, #0
    uint8_t * rxData = pHandle->rxBuffer;
 8001ee8:	f8d0 e004 	ldr.w	lr, [r0, #4]
    int16_t rxLength = pHandle->rxLength;
 8001eec:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
    uint16_t size = 0U;
 8001ef0:	f8ad 600e 	strh.w	r6, [sp, #14]
{
 8001ef4:	4607      	mov	r7, r0
    uint8_t number_of_item =0;
    pHandle->txLength = 0;
 8001ef6:	81c6      	strh	r6, [r0, #14]
 8001ef8:	eb08 0901 	add.w	r9, r8, r1
  uint8_t retVal = MCP_CMD_OK;
 8001efc:	46b2      	mov	sl, r6

    while (rxLength > 0)
    {
      number_of_item ++;
 8001efe:	3601      	adds	r6, #1
    while (rxLength > 0)
 8001f00:	2b00      	cmp	r3, #0
      dataElementID = (uint16_t *) rxData;
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8001f02:	f1a3 0c02 	sub.w	ip, r3, #2
      number_of_item ++;
 8001f06:	b2f6      	uxtb	r6, r6
    while (rxLength > 0)
 8001f08:	dd43      	ble.n	8001f92 <RI_SetRegCommandParser+0xbe>
        retVal = MCP_CMD_NOK;
        rxLength = 0;
      }
      else
      {
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 8001f0a:	fa0f f18c 	sxth.w	r1, ip
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8001f0e:	fa1f f48c 	uxth.w	r4, ip
      regID = *dataElementID & REG_MASK;
 8001f12:	f8be c000 	ldrh.w	ip, [lr]
      rxData = rxData+MCP_ID_SIZE; // Shift buffer to the next data
 8001f16:	f10e 0502 	add.w	r5, lr, #2
      if (motorID > NBR_OF_MOTORS)
 8001f1a:	f01c 0f06 	tst.w	ip, #6
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 8001f1e:	f10d 030e 	add.w	r3, sp, #14
 8001f22:	462a      	mov	r2, r5
      regID = *dataElementID & REG_MASK;
 8001f24:	f02c 0007 	bic.w	r0, ip, #7
      typeID = (uint8_t)*dataElementID & TYPE_MASK;
 8001f28:	fa5f fe8c 	uxtb.w	lr, ip
      if (motorID > NBR_OF_MOTORS)
 8001f2c:	d11e      	bne.n	8001f6c <RI_SetRegCommandParser+0x98>
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 8001f2e:	9100      	str	r1, [sp, #0]
 8001f30:	f00e 0c07 	and.w	ip, lr, #7
 8001f34:	a906      	add	r1, sp, #24
 8001f36:	eb01 0c8c 	add.w	ip, r1, ip, lsl #2
 8001f3a:	f00e 0138 	and.w	r1, lr, #56	; 0x38
 8001f3e:	f85c bc08 	ldr.w	fp, [ip, #-8]
 8001f42:	47d8      	blx	fp
        /* Prepare next data*/
        rxLength = (int16_t) (rxLength - size);
 8001f44:	f8bd e00e 	ldrh.w	lr, [sp, #14]
        rxData = rxData+size;
        /* If there is only one CMD in the buffer, we do not store the result */
        if ((1U == number_of_item) && (0 == rxLength))
 8001f48:	2e01      	cmp	r6, #1
        rxLength = (int16_t) (rxLength - size);
 8001f4a:	eba4 0c0e 	sub.w	ip, r4, lr
 8001f4e:	fa0f f38c 	sxth.w	r3, ip
        if ((1U == number_of_item) && (0 == rxLength))
 8001f52:	d013      	beq.n	8001f7c <RI_SetRegCommandParser+0xa8>
        {
          retVal = accessResult;
        }
        else
        {/* Store the result for each access to be able to report failing access */
          if (txSyncFreeSpace !=0 )
 8001f54:	45c1      	cmp	r9, r8
 8001f56:	d00d      	beq.n	8001f74 <RI_SetRegCommandParser+0xa0>
          {
            *txData = accessResult;
 8001f58:	f808 0b01 	strb.w	r0, [r8], #1
            txData = txData+1;
            pHandle->txLength++;
 8001f5c:	89fa      	ldrh	r2, [r7, #14]
 8001f5e:	3201      	adds	r2, #1
        rxData = rxData+size;
 8001f60:	44ae      	add	lr, r5
            pHandle->txLength++;
 8001f62:	81fa      	strh	r2, [r7, #14]
            txSyncFreeSpace--; /* decrement one by one no wraparound possible */
            retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 8001f64:	2800      	cmp	r0, #0
 8001f66:	d0ca      	beq.n	8001efe <RI_SetRegCommandParser+0x2a>
            if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FORMAT))
 8001f68:	2807      	cmp	r0, #7
 8001f6a:	d10d      	bne.n	8001f88 <RI_SetRegCommandParser+0xb4>
            retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 8001f6c:	2001      	movs	r0, #1
    }
  #ifdef NULL_PTR_CHECK_REG_INT
  }
#endif
  return (retVal);
}
 8001f6e:	b007      	add	sp, #28
 8001f70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8001f74:	2008      	movs	r0, #8
}
 8001f76:	b007      	add	sp, #28
 8001f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((1U == number_of_item) && (0 == rxLength))
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d1e9      	bne.n	8001f54 <RI_SetRegCommandParser+0x80>
    if (MCP_CMD_OK == retVal)
 8001f80:	2800      	cmp	r0, #0
 8001f82:	d1f4      	bne.n	8001f6e <RI_SetRegCommandParser+0x9a>
      pHandle->txLength = 0;
 8001f84:	81f8      	strh	r0, [r7, #14]
 8001f86:	e7f2      	b.n	8001f6e <RI_SetRegCommandParser+0x9a>
            if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FORMAT))
 8001f88:	280a      	cmp	r0, #10
 8001f8a:	d0ef      	beq.n	8001f6c <RI_SetRegCommandParser+0x98>
            retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 8001f8c:	f04f 0a01 	mov.w	sl, #1
 8001f90:	e7b5      	b.n	8001efe <RI_SetRegCommandParser+0x2a>
 8001f92:	4650      	mov	r0, sl
 8001f94:	e7f4      	b.n	8001f80 <RI_SetRegCommandParser+0xac>
 8001f96:	bf00      	nop
 8001f98:	080025d5 	.word	0x080025d5
 8001f9c:	080026d1 	.word	0x080026d1

08001fa0 <RI_GetRegCommandParser>:
  * @param  txSyncFreeSpace Space available for synchronous transmission
  *
  * @retval Returns #MCP_CMD_OK if the command is acknowledged and #MCP_CMD_NOK if not.
  */
uint8_t RI_GetRegCommandParser (MCP_Handle_t * pHandle, uint16_t txSyncFreeSpace)
{
 8001fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001fa4:	b086      	sub	sp, #24
  {
#endif
    uint16_t * dataElementID;
    uint8_t * rxData = pHandle->rxBuffer;
    uint8_t * txData = pHandle->txBuffer;
    uint16_t size = 0U;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	f8ad 300e 	strh.w	r3, [sp, #14]

    uint16_t regID;
    uint8_t typeID;
    uint8_t motorID;
    uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_GetRegisterGlobal, &RI_GetRegisterMotor1};
    pHandle->txLength = 0;
 8001fac:	81c3      	strh	r3, [r0, #14]
    uint16_t rxLength = pHandle->rxLength;
 8001fae:	f8b0 800c 	ldrh.w	r8, [r0, #12]
    uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_GetRegisterGlobal, &RI_GetRegisterMotor1};
 8001fb2:	4b1e      	ldr	r3, [pc, #120]	; (800202c <RI_GetRegCommandParser+0x8c>)
 8001fb4:	9304      	str	r3, [sp, #16]
 8001fb6:	4b1e      	ldr	r3, [pc, #120]	; (8002030 <RI_GetRegCommandParser+0x90>)
    uint8_t * rxData = pHandle->rxBuffer;
 8001fb8:	f8d0 9004 	ldr.w	r9, [r0, #4]
    uint8_t * txData = pHandle->txBuffer;
 8001fbc:	6886      	ldr	r6, [r0, #8]
    uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_GetRegisterGlobal, &RI_GetRegisterMotor1};
 8001fbe:	9305      	str	r3, [sp, #20]
    while (rxLength > 0U)
 8001fc0:	f1b8 0f00 	cmp.w	r8, #0
 8001fc4:	d023      	beq.n	800200e <RI_GetRegCommandParser+0x6e>
 8001fc6:	4607      	mov	r7, r0
 8001fc8:	b20d      	sxth	r5, r1
    uint8_t * rxData = pHandle->rxBuffer;
 8001fca:	464c      	mov	r4, r9
    {
      dataElementID = (uint16_t *) rxData;
      rxLength = rxLength - MCP_ID_SIZE;
      rxData = rxData + MCP_ID_SIZE; // Shift buffer to the next MCP_ID

      regID = *dataElementID & REG_MASK;
 8001fcc:	f834 cb02 	ldrh.w	ip, [r4], #2
      typeID = (uint8_t)*dataElementID & TYPE_MASK;
 8001fd0:	fa5f f18c 	uxtb.w	r1, ip
        retVal = MCP_CMD_NOK;
        rxLength = 0;
      }
      else
      {
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 8001fd4:	f001 0e07 	and.w	lr, r1, #7
 8001fd8:	f10d 0a18 	add.w	sl, sp, #24
      if (motorID > NBR_OF_MOTORS)
 8001fdc:	f01c 0f06 	tst.w	ip, #6
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 8001fe0:	4632      	mov	r2, r6
      regID = *dataElementID & REG_MASK;
 8001fe2:	f02c 0007 	bic.w	r0, ip, #7
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 8001fe6:	f10d 030e 	add.w	r3, sp, #14
 8001fea:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 8001fee:	f001 0138 	and.w	r1, r1, #56	; 0x38
      if (motorID > NBR_OF_MOTORS)
 8001ff2:	d10c      	bne.n	800200e <RI_GetRegCommandParser+0x6e>
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 8001ff4:	9500      	str	r5, [sp, #0]
 8001ff6:	f85e ac08 	ldr.w	sl, [lr, #-8]
 8001ffa:	47d0      	blx	sl
        if (retVal == MCP_CMD_OK )
 8001ffc:	eba8 0304 	sub.w	r3, r8, r4
    while (rxLength > 0U)
 8002000:	fa19 f383 	uxtah	r3, r9, r3
 8002004:	b29b      	uxth	r3, r3
        if (retVal == MCP_CMD_OK )
 8002006:	b130      	cbz	r0, 8002016 <RI_GetRegCommandParser+0x76>
    }
#ifdef NULL_PTR_CHECK_REG_INT
  }
#endif
  return (retVal);
}
 8002008:	b006      	add	sp, #24
 800200a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  uint8_t retVal = MCP_CMD_NOK;
 800200e:	2001      	movs	r0, #1
}
 8002010:	b006      	add	sp, #24
 8002012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          txData = txData+size;
 8002016:	f8bd 100e 	ldrh.w	r1, [sp, #14]
          pHandle->txLength += size;
 800201a:	89fa      	ldrh	r2, [r7, #14]
          freeSpaceS16 = freeSpaceS16-size;
 800201c:	1a6d      	subs	r5, r5, r1
          pHandle->txLength += size;
 800201e:	440a      	add	r2, r1
          txData = txData+size;
 8002020:	440e      	add	r6, r1
          pHandle->txLength += size;
 8002022:	81fa      	strh	r2, [r7, #14]
          freeSpaceS16 = freeSpaceS16-size;
 8002024:	b22d      	sxth	r5, r5
    while (rxLength > 0U)
 8002026:	2b00      	cmp	r3, #0
 8002028:	d1d0      	bne.n	8001fcc <RI_GetRegCommandParser+0x2c>
 800202a:	e7ed      	b.n	8002008 <RI_GetRegCommandParser+0x68>
 800202c:	08002b29 	.word	0x08002b29
 8002030:	08002c65 	.word	0x08002c65

08002034 <MCP_ReceivedPacket>:
  * @brief  Parses the header from the received packet and call the required function depending on the command sent by the controller device.
  *
  * @param  pHandle Handler of the current instance of the MCP component
  */
void MCP_ReceivedPacket(MCP_Handle_t *pHandle)
{
 8002034:	b5f0      	push	{r4, r5, r6, r7, lr}
    /* Nothing to do, txBuffer and txLength have not been modified */
  }
  else /* Length is 0, this is a request to send back the last packet */
  {
#endif
    packetHeader = (uint16_t *)pHandle->rxBuffer; //cstat !MISRAC2012-Rule-11.3
 8002036:	6845      	ldr	r5, [r0, #4]
    command = (uint16_t)(*packetHeader & CMD_MASK);
 8002038:	882b      	ldrh	r3, [r5, #0]

    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 800203a:	f403 427f 	and.w	r2, r3, #65280	; 0xff00
    command = (uint16_t)(*packetHeader & CMD_MASK);
 800203e:	f023 0c07 	bic.w	ip, r3, #7
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 8002042:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
{
 8002046:	b083      	sub	sp, #12
 8002048:	4604      	mov	r4, r0
    command = (uint16_t)(*packetHeader & CMD_MASK);
 800204a:	fa1f fc8c 	uxth.w	ip, ip
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 800204e:	d051      	beq.n	80020f4 <MCP_ReceivedPacket+0xc0>
    else
    {
      /* Nothing to do */
    }

    motorID = (uint8_t)((*packetHeader - 1U) & MOTOR_MASK);
 8002050:	3b01      	subs	r3, #1
    MCI_Handle_t *pMCI = &Mci[motorID];
 8002052:	4f5c      	ldr	r7, [pc, #368]	; (80021c4 <MCP_ReceivedPacket+0x190>)
 8002054:	f003 0307 	and.w	r3, r3, #7
 8002058:	eb03 0383 	add.w	r3, r3, r3, lsl #2

    /* Removing MCP Header from RxBuffer */
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 800205c:	3502      	adds	r5, #2
    MCI_Handle_t *pMCI = &Mci[motorID];
 800205e:	eb07 07c3 	add.w	r7, r7, r3, lsl #3

    /* Commands requiering payload response must be aware of space available for the payload */
    /* Last byte is reserved for MCP response*/
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8002062:	6823      	ldr	r3, [r4, #0]
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 8002064:	6045      	str	r5, [r0, #4]
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8002066:	8980      	ldrh	r0, [r0, #12]
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8002068:	899a      	ldrh	r2, [r3, #12]
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 800206a:	3802      	subs	r0, #2
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 800206c:	3a01      	subs	r2, #1
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 800206e:	b280      	uxth	r0, r0

    /* Initialization of the tx length, command which send back data has to increment the txLength
     * (case of Read register) */
    pHandle->txLength = 0U;
 8002070:	2600      	movs	r6, #0

    switch (command)
 8002072:	f1bc 0f38 	cmp.w	ip, #56	; 0x38
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8002076:	b291      	uxth	r1, r2
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8002078:	81a0      	strh	r0, [r4, #12]
    pHandle->txLength = 0U;
 800207a:	81e6      	strh	r6, [r4, #14]
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 800207c:	b212      	sxth	r2, r2
    switch (command)
 800207e:	d82a      	bhi.n	80020d6 <MCP_ReceivedPacket+0xa2>
 8002080:	f1bc 0f38 	cmp.w	ip, #56	; 0x38
 8002084:	d81e      	bhi.n	80020c4 <MCP_ReceivedPacket+0x90>
 8002086:	e8df f00c 	tbb	[pc, ip]
 800208a:	1d63      	.short	0x1d63
 800208c:	1d1d1d1d 	.word	0x1d1d1d1d
 8002090:	1d6b1d1d 	.word	0x1d6b1d1d
 8002094:	1d1d1d1d 	.word	0x1d1d1d1d
 8002098:	1d701d1d 	.word	0x1d701d1d
 800209c:	1d1d1d1d 	.word	0x1d1d1d1d
 80020a0:	1d751d1d 	.word	0x1d751d1d
 80020a4:	1d1d1d1d 	.word	0x1d1d1d1d
 80020a8:	1d4c1d1d 	.word	0x1d4c1d1d
 80020ac:	1d1d1d1d 	.word	0x1d1d1d1d
 80020b0:	1d521d1d 	.word	0x1d521d1d
 80020b4:	1d1d1d1d 	.word	0x1d1d1d1d
 80020b8:	1d471d1d 	.word	0x1d471d1d
 80020bc:	1d1d1d1d 	.word	0x1d1d1d1d
 80020c0:	1d1d      	.short	0x1d1d
 80020c2:	5d          	.byte	0x5d
 80020c3:	00          	.byte	0x00
 80020c4:	2300      	movs	r3, #0
 80020c6:	2002      	movs	r0, #2
      {
        MCPResponse = MCP_CMD_UNKNOWN;
        break;
      }
    }
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80020c8:	68a2      	ldr	r2, [r4, #8]
 80020ca:	54d0      	strb	r0, [r2, r3]
    pHandle->txLength++;
 80020cc:	89e3      	ldrh	r3, [r4, #14]
 80020ce:	3301      	adds	r3, #1
 80020d0:	81e3      	strh	r3, [r4, #14]
#ifdef NULL_PTR_CHECK_MCP
  }
#endif
}
 80020d2:	b003      	add	sp, #12
 80020d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch (command)
 80020d6:	f1bc 0f68 	cmp.w	ip, #104	; 0x68
 80020da:	d05f      	beq.n	800219c <MCP_ReceivedPacket+0x168>
 80020dc:	f5bc 7f80 	cmp.w	ip, #256	; 0x100
 80020e0:	d06d      	beq.n	80021be <MCP_ReceivedPacket+0x18a>
 80020e2:	f1bc 0f48 	cmp.w	ip, #72	; 0x48
 80020e6:	d1ed      	bne.n	80020c4 <MCP_ReceivedPacket+0x90>
        MCI_Clear_Iqdref(pMCI);
 80020e8:	4638      	mov	r0, r7
 80020ea:	f7ff f9b5 	bl	8001458 <MCI_Clear_Iqdref>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80020ee:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 80020f0:	4630      	mov	r0, r6
        break;
 80020f2:	e7e9      	b.n	80020c8 <MCP_ReceivedPacket+0x94>
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 80020f4:	8980      	ldrh	r0, [r0, #12]
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 80020f6:	6823      	ldr	r3, [r4, #0]
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 80020f8:	3802      	subs	r0, #2
      userCommand = ((uint8_t)(command & 0xF8U) >> 3U);
 80020fa:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 80020fe:	899a      	ldrh	r2, [r3, #12]
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8002100:	b280      	uxth	r0, r0
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 8002102:	3502      	adds	r5, #2
    pHandle->txLength = 0U;
 8002104:	2300      	movs	r3, #0
        if ((userCommand < MCP_USER_CALLBACK_MAX) && (MCP_UserCallBack[userCommand] != NULL))
 8002106:	f1bc 0f01 	cmp.w	ip, #1
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 800210a:	81a0      	strh	r0, [r4, #12]
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 800210c:	6065      	str	r5, [r4, #4]
    pHandle->txLength = 0U;
 800210e:	81e3      	strh	r3, [r4, #14]
        if ((userCommand < MCP_USER_CALLBACK_MAX) && (MCP_UserCallBack[userCommand] != NULL))
 8002110:	d935      	bls.n	800217e <MCP_ReceivedPacket+0x14a>
        MCPResponse = MCP_CMD_OK;
 8002112:	2300      	movs	r3, #0
          MCPResponse = MCP_ERROR_CALLBACK_NOT_REGISTRED;
 8002114:	200d      	movs	r0, #13
 8002116:	e7d7      	b.n	80020c8 <MCP_ReceivedPacket+0x94>
        if (IDLE == MCI_GetSTMState(pMCI))
 8002118:	4638      	mov	r0, r7
 800211a:	f7ff f8b9 	bl	8001290 <MCI_GetSTMState>
 800211e:	2800      	cmp	r0, #0
 8002120:	d045      	beq.n	80021ae <MCP_ReceivedPacket+0x17a>
          (void)MCI_StopMotor(pMCI);
 8002122:	4638      	mov	r0, r7
 8002124:	f7ff f8ea 	bl	80012fc <MCI_StopMotor>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8002128:	89e3      	ldrh	r3, [r4, #14]
          MCPResponse = MCP_CMD_OK;
 800212a:	2000      	movs	r0, #0
 800212c:	e7cc      	b.n	80020c8 <MCP_ReceivedPacket+0x94>
        if (RUN == MCI_GetSTMState(pMCI))
 800212e:	4638      	mov	r0, r7
 8002130:	f7ff f8ae 	bl	8001290 <MCI_GetSTMState>
 8002134:	2806      	cmp	r0, #6
 8002136:	d1f7      	bne.n	8002128 <MCP_ReceivedPacket+0xf4>
          MCI_StopRamp(pMCI);
 8002138:	4638      	mov	r0, r7
 800213a:	f7ff f925 	bl	8001388 <MCI_StopRamp>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 800213e:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8002140:	2000      	movs	r0, #0
 8002142:	e7c1      	b.n	80020c8 <MCP_ReceivedPacket+0x94>
        (void)MCI_FaultAcknowledged(pMCI);
 8002144:	4638      	mov	r0, r7
 8002146:	f7ff f8f9 	bl	800133c <MCI_FaultAcknowledged>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 800214a:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 800214c:	2000      	movs	r0, #0
        break;
 800214e:	e7bb      	b.n	80020c8 <MCP_ReceivedPacket+0x94>
        *pHandle->txBuffer = MCP_VERSION;
 8002150:	68a3      	ldr	r3, [r4, #8]
        pHandle->txLength = 4U;
 8002152:	2104      	movs	r1, #4
        *pHandle->txBuffer = MCP_VERSION;
 8002154:	2201      	movs	r2, #1
        pHandle->txLength = 4U;
 8002156:	81e1      	strh	r1, [r4, #14]
        *pHandle->txBuffer = MCP_VERSION;
 8002158:	701a      	strb	r2, [r3, #0]
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 800215a:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 800215c:	2000      	movs	r0, #0
        break;
 800215e:	e7b3      	b.n	80020c8 <MCP_ReceivedPacket+0x94>
        MCPResponse = RI_SetRegCommandParser(pHandle, (uint16_t)txSyncFreeSpace);
 8002160:	4620      	mov	r0, r4
 8002162:	f7ff feb7 	bl	8001ed4 <RI_SetRegCommandParser>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8002166:	89e3      	ldrh	r3, [r4, #14]
        break;
 8002168:	e7ae      	b.n	80020c8 <MCP_ReceivedPacket+0x94>
        MCPResponse = RI_GetRegCommandParser(pHandle, (uint16_t)txSyncFreeSpace);
 800216a:	4620      	mov	r0, r4
 800216c:	f7ff ff18 	bl	8001fa0 <RI_GetRegCommandParser>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8002170:	89e3      	ldrh	r3, [r4, #14]
        break;
 8002172:	e7a9      	b.n	80020c8 <MCP_ReceivedPacket+0x94>
        MCPResponse = (MCI_StartWithPolarizationMotor(pMCI) == false) ? MCP_CMD_OK : MCP_CMD_NOK;
 8002174:	4638      	mov	r0, r7
 8002176:	f7ff f8a7 	bl	80012c8 <MCI_StartWithPolarizationMotor>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 800217a:	89e3      	ldrh	r3, [r4, #14]
 800217c:	e7a4      	b.n	80020c8 <MCP_ReceivedPacket+0x94>
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 800217e:	3a01      	subs	r2, #1
 8002180:	b212      	sxth	r2, r2
        if ((userCommand < MCP_USER_CALLBACK_MAX) && (MCP_UserCallBack[userCommand] != NULL))
 8002182:	4b11      	ldr	r3, [pc, #68]	; (80021c8 <MCP_ReceivedPacket+0x194>)
 8002184:	f853 602c 	ldr.w	r6, [r3, ip, lsl #2]
 8002188:	2e00      	cmp	r6, #0
 800218a:	d0c2      	beq.n	8002112 <MCP_ReceivedPacket+0xde>
          MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace,
 800218c:	68a3      	ldr	r3, [r4, #8]
 800218e:	9300      	str	r3, [sp, #0]
 8002190:	4629      	mov	r1, r5
 8002192:	f104 030e 	add.w	r3, r4, #14
 8002196:	47b0      	blx	r6
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8002198:	89e3      	ldrh	r3, [r4, #14]
          MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace,
 800219a:	e795      	b.n	80020c8 <MCP_ReceivedPacket+0x94>
        MCPResponse = MC_ProfilerCommand(pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace, &pHandle->txLength,
 800219c:	68a3      	ldr	r3, [r4, #8]
 800219e:	9300      	str	r3, [sp, #0]
 80021a0:	4629      	mov	r1, r5
 80021a2:	f104 030e 	add.w	r3, r4, #14
 80021a6:	f7fe fff7 	bl	8001198 <MC_ProfilerCommand>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80021aa:	89e3      	ldrh	r3, [r4, #14]
        break;
 80021ac:	e78c      	b.n	80020c8 <MCP_ReceivedPacket+0x94>
          MCPResponse = (MCI_StartWithPolarizationMotor(pMCI) == true) ? MCP_CMD_OK : MCP_CMD_NOK;
 80021ae:	4638      	mov	r0, r7
 80021b0:	f7ff f88a 	bl	80012c8 <MCI_StartWithPolarizationMotor>
 80021b4:	f080 0001 	eor.w	r0, r0, #1
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80021b8:	89e3      	ldrh	r3, [r4, #14]
          MCPResponse = (MCI_StartWithPolarizationMotor(pMCI) == true) ? MCP_CMD_OK : MCP_CMD_NOK;
 80021ba:	b2c0      	uxtb	r0, r0
 80021bc:	e784      	b.n	80020c8 <MCP_ReceivedPacket+0x94>
    switch (command)
 80021be:	46b4      	mov	ip, r6
 80021c0:	e7df      	b.n	8002182 <MCP_ReceivedPacket+0x14e>
 80021c2:	bf00      	nop
 80021c4:	200006c0 	.word	0x200006c0
 80021c8:	20001850 	.word	0x20001850

080021cc <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 80021cc:	b508      	push	{r3, lr}
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  (void)HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / SYS_TICK_FREQUENCY);
 80021ce:	f002 fc77 	bl	8004ac0 <HAL_RCC_GetHCLKFreq>
 80021d2:	4b0a      	ldr	r3, [pc, #40]	; (80021fc <MX_MotorControl_Init+0x30>)
 80021d4:	fba3 3000 	umull	r3, r0, r3, r0
 80021d8:	09c0      	lsrs	r0, r0, #7
 80021da:	f002 f9c7 	bl	800456c <HAL_SYSTICK_Config>
  HAL_NVIC_SetPriority(SysTick_IRQn, uwTickPrio, 0U);
 80021de:	4b08      	ldr	r3, [pc, #32]	; (8002200 <MX_MotorControl_Init+0x34>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	6819      	ldr	r1, [r3, #0]
 80021e4:	f04f 30ff 	mov.w	r0, #4294967295
 80021e8:	f002 f974 	bl	80044d4 <HAL_NVIC_SetPriority>

  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI);
 80021ec:	4805      	ldr	r0, [pc, #20]	; (8002204 <MX_MotorControl_Init+0x38>)
 80021ee:	f7ff fa89 	bl	8001704 <MCboot>
  mc_lock_pins();
}
 80021f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  mc_lock_pins();
 80021f6:	f7ff bdf7 	b.w	8001de8 <mc_lock_pins>
 80021fa:	bf00      	nop
 80021fc:	10624dd3 	.word	0x10624dd3
 8002200:	200003a4 	.word	0x200003a4
 8002204:	200018c0 	.word	0x200018c0

08002208 <PWMC_GetPhaseCurrents>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctGetPhaseCurrents(pHandle, Iab);
 8002208:	6803      	ldr	r3, [r0, #0]
 800220a:	4718      	bx	r3

0800220c <PWMC_SetPhaseVoltage>:
  * @param  Valfa_beta: Voltage Components expressed in the @f$(\alpha, \beta)@f$ reference frame.
  * @retval #MC_NO_ERROR if no error occurred or #MC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage(PWMC_Handle_t *pHandle, alphabeta_t Valfa_beta)
{
 800220c:	b530      	push	{r4, r5, lr}
    int32_t wTimePhA;
    int32_t wTimePhB;
    int32_t wTimePhC;

    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 800220e:	f8b0 e072 	ldrh.w	lr, [r0, #114]	; 0x72
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 8002212:	f8b0 204e 	ldrh.w	r2, [r0, #78]	; 0x4e
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8002216:	ea4f 4c21 	mov.w	ip, r1, asr #16
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 800221a:	b20b      	sxth	r3, r1
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 800221c:	fb0e fc0c 	mul.w	ip, lr, ip
 8002220:	ebcc 7ccc 	rsb	ip, ip, ip, lsl #31
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 8002224:	fb02 f303 	mul.w	r3, r2, r3
{
 8002228:	b083      	sub	sp, #12

    wX = wUBeta;
    wY = (wUBeta + wUAlpha) / 2;
 800222a:	eb03 024c 	add.w	r2, r3, ip, lsl #1
    wZ = (wUBeta - wUAlpha) / 2;
 800222e:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
{
 8002232:	9101      	str	r1, [sp, #4]
    wZ = (wUBeta - wUAlpha) / 2;
 8002234:	eb03 74d3 	add.w	r4, r3, r3, lsr #31
    wY = (wUBeta + wUAlpha) / 2;
 8002238:	eb02 71d2 	add.w	r1, r2, r2, lsr #31

    /* Sector calculation from wX, wY, wZ */
    if (wY < 0)
 800223c:	1c55      	adds	r5, r2, #1
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 800223e:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    wY = (wUBeta + wUAlpha) / 2;
 8002242:	ea4f 0161 	mov.w	r1, r1, asr #1
    wZ = (wUBeta - wUAlpha) / 2;
 8002246:	ea4f 0464 	mov.w	r4, r4, asr #1
    if (wY < 0)
 800224a:	f2c0 809c 	blt.w	8002386 <PWMC_SetPhaseVoltage+0x17a>
        }
        }
    }
    else /* wY > 0 */
    {
      if (wZ >= 0)
 800224e:	1c5d      	adds	r5, r3, #1
 8002250:	db65      	blt.n	800231e <PWMC_SetPhaseVoltage+0x112>
      {
        pHandle->Sector = SECTOR_2;
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8002252:	1b09      	subs	r1, r1, r4
 8002254:	bf44      	itt	mi
 8002256:	f501 317f 	addmi.w	r1, r1, #261120	; 0x3fc00
 800225a:	f201 31ff 	addwmi	r1, r1, #1023	; 0x3ff
        wTimePhB = wTimePhA + (wZ / 131072);
 800225e:	2b00      	cmp	r3, #0
 8002260:	bfbc      	itt	lt
 8002262:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
 8002266:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
        wTimePhC = wTimePhA - (wY / 131072);
 800226a:	2a00      	cmp	r2, #0
 800226c:	bfb8      	it	lt
 800226e:	f502 327f 	addlt.w	r2, r2, #261120	; 0x3fc00
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8002272:	ea4f 0e9e 	mov.w	lr, lr, lsr #2

        if(true == pHandle->SingleShuntTopology)
 8002276:	f890 4087 	ldrb.w	r4, [r0, #135]	; 0x87
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 800227a:	eb0e 41a1 	add.w	r1, lr, r1, asr #18
        pHandle->Sector = SECTOR_2;
 800227e:	f04f 0c01 	mov.w	ip, #1
        wTimePhC = wTimePhA - (wY / 131072);
 8002282:	bfb8      	it	lt
 8002284:	f202 32ff 	addwlt	r2, r2, #1023	; 0x3ff
        pHandle->Sector = SECTOR_2;
 8002288:	f880 c07c 	strb.w	ip, [r0, #124]	; 0x7c
        wTimePhB = wTimePhA + (wZ / 131072);
 800228c:	eb01 43a3 	add.w	r3, r1, r3, asr #18
        wTimePhC = wTimePhA - (wY / 131072);
 8002290:	eba1 42a2 	sub.w	r2, r1, r2, asr #18
        if(true == pHandle->SingleShuntTopology)
 8002294:	2c00      	cmp	r4, #0
 8002296:	f040 80a0 	bne.w	80023da <PWMC_SetPhaseVoltage+0x1ce>
          pHandle->midDuty = 0U;
          pHandle->highDuty = 1U;
        }
        else
        {
        pHandle->lowDuty = (uint16_t)wTimePhB;
 800229a:	fa1f fe83 	uxth.w	lr, r3
        pHandle->midDuty = (uint16_t)wTimePhA;
 800229e:	fa1f fc81 	uxth.w	ip, r1
        pHandle->highDuty = (uint16_t)wTimePhC;
 80022a2:	b294      	uxth	r4, r2
          pHandle->highDuty = (uint16_t)wTimePhA;
 80022a4:	f8a0 405c 	strh.w	r4, [r0, #92]	; 0x5c

    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));

    if (1U == pHandle->DTTest)
 80022a8:	f8b0 4070 	ldrh.w	r4, [r0, #112]	; 0x70
          pHandle->lowDuty = (uint16_t)wTimePhC;
 80022ac:	f8a0 e058 	strh.w	lr, [r0, #88]	; 0x58
 80022b0:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 80022b4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80022b8:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 80022bc:	b289      	uxth	r1, r1
 80022be:	b29b      	uxth	r3, r3
 80022c0:	b292      	uxth	r2, r2
    if (1U == pHandle->DTTest)
 80022c2:	2c01      	cmp	r4, #1
          pHandle->midDuty = (uint16_t)wTimePhB;
 80022c4:	f8a0 c05a 	strh.w	ip, [r0, #90]	; 0x5a
    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
 80022c8:	f8a0 1050 	strh.w	r1, [r0, #80]	; 0x50
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 80022cc:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));
 80022d0:	f8a0 2054 	strh.w	r2, [r0, #84]	; 0x54
    if (1U == pHandle->DTTest)
 80022d4:	d11e      	bne.n	8002314 <PWMC_SetPhaseVoltage+0x108>
    {
      /* Dead time compensation */
      if (pHandle->Ia > 0)
 80022d6:	f9b0 4062 	ldrsh.w	r4, [r0, #98]	; 0x62
 80022da:	2c00      	cmp	r4, #0
      {
        pHandle->CntPhA += pHandle->DTCompCnt;
 80022dc:	f8b0 4074 	ldrh.w	r4, [r0, #116]	; 0x74
 80022e0:	bfcc      	ite	gt
 80022e2:	1909      	addgt	r1, r1, r4
      }
      else
      {
        pHandle->CntPhA -= pHandle->DTCompCnt;
 80022e4:	1b09      	suble	r1, r1, r4
 80022e6:	b289      	uxth	r1, r1
 80022e8:	f8a0 1050 	strh.w	r1, [r0, #80]	; 0x50
      }

      if (pHandle->Ib > 0)
 80022ec:	f9b0 1064 	ldrsh.w	r1, [r0, #100]	; 0x64
 80022f0:	2900      	cmp	r1, #0
      else
      {
        pHandle->CntPhB -= pHandle->DTCompCnt;
      }

      if (pHandle->Ic > 0)
 80022f2:	f9b0 1066 	ldrsh.w	r1, [r0, #102]	; 0x66
        pHandle->CntPhB += pHandle->DTCompCnt;
 80022f6:	bfcc      	ite	gt
 80022f8:	191b      	addgt	r3, r3, r4
        pHandle->CntPhB -= pHandle->DTCompCnt;
 80022fa:	1b1b      	suble	r3, r3, r4
      if (pHandle->Ic > 0)
 80022fc:	2900      	cmp	r1, #0
        pHandle->CntPhB -= pHandle->DTCompCnt;
 80022fe:	b29b      	uxth	r3, r3
      {
        pHandle->CntPhC += pHandle->DTCompCnt;
 8002300:	bfcc      	ite	gt
 8002302:	18a4      	addgt	r4, r4, r2
      }
      else
      {
        pHandle->CntPhC -= pHandle->DTCompCnt;
 8002304:	1b12      	suble	r2, r2, r4
 8002306:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
        pHandle->CntPhC += pHandle->DTCompCnt;
 800230a:	bfcc      	ite	gt
 800230c:	f8a0 4054 	strhgt.w	r4, [r0, #84]	; 0x54
        pHandle->CntPhC -= pHandle->DTCompCnt;
 8002310:	f8a0 2054 	strhle.w	r2, [r0, #84]	; 0x54
      }
    }
    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 8002314:	6943      	ldr	r3, [r0, #20]
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (returnValue);
}
 8002316:	b003      	add	sp, #12
 8002318:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 800231c:	4718      	bx	r3
        if ( wX <= 0 )
 800231e:	f1bc 0f00 	cmp.w	ip, #0
 8002322:	f340 808c 	ble.w	800243e <PWMC_SetPhaseVoltage+0x232>
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 8002326:	ebbc 0404 	subs.w	r4, ip, r4
 800232a:	bf44      	itt	mi
 800232c:	f504 347f 	addmi.w	r4, r4, #261120	; 0x3fc00
 8002330:	f204 34ff 	addwmi	r4, r4, #1023	; 0x3ff
          wTimePhB = wTimePhA + (wZ / 131072);
 8002334:	2b00      	cmp	r3, #0
 8002336:	bfbc      	itt	lt
 8002338:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
 800233c:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 8002340:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
          wTimePhC = wTimePhB - (wX / 131072);
 8002344:	f1bc 0f00 	cmp.w	ip, #0
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 8002348:	eb0e 41a4 	add.w	r1, lr, r4, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 800234c:	bfb8      	it	lt
 800234e:	f50c 3cff 	addlt.w	ip, ip, #130560	; 0x1fe00
          if((pHandle->DPWM_Mode == true) || (pHandle->SingleShuntTopology == true))
 8002352:	f890 407f 	ldrb.w	r4, [r0, #127]	; 0x7f
          pHandle->Sector = SECTOR_1;
 8002356:	f04f 0200 	mov.w	r2, #0
          wTimePhB = wTimePhA + (wZ / 131072);
 800235a:	eb01 43a3 	add.w	r3, r1, r3, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 800235e:	bfb8      	it	lt
 8002360:	f20c 1cff 	addwlt	ip, ip, #511	; 0x1ff
          pHandle->Sector = SECTOR_1;
 8002364:	f880 207c 	strb.w	r2, [r0, #124]	; 0x7c
          wTimePhC = wTimePhB - (wX / 131072);
 8002368:	eba3 426c 	sub.w	r2, r3, ip, asr #17
          if((pHandle->DPWM_Mode == true) || (pHandle->SingleShuntTopology == true))
 800236c:	2c00      	cmp	r4, #0
 800236e:	f040 80c6 	bne.w	80024fe <PWMC_SetPhaseVoltage+0x2f2>
 8002372:	f890 5087 	ldrb.w	r5, [r0, #135]	; 0x87
 8002376:	2d00      	cmp	r5, #0
 8002378:	f000 80d3 	beq.w	8002522 <PWMC_SetPhaseVoltage+0x316>
 800237c:	f04f 0e02 	mov.w	lr, #2
 8002380:	f04f 0c01 	mov.w	ip, #1
 8002384:	e78e      	b.n	80022a4 <PWMC_SetPhaseVoltage+0x98>
      if (wZ < 0)
 8002386:	1c5d      	adds	r5, r3, #1
 8002388:	f2c0 8085 	blt.w	8002496 <PWMC_SetPhaseVoltage+0x28a>
        if (wX <= 0)
 800238c:	f1bc 0f00 	cmp.w	ip, #0
 8002390:	dd29      	ble.n	80023e6 <PWMC_SetPhaseVoltage+0x1da>
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 8002392:	ebb1 010c 	subs.w	r1, r1, ip
 8002396:	bf44      	itt	mi
 8002398:	f501 317f 	addmi.w	r1, r1, #261120	; 0x3fc00
 800239c:	f201 31ff 	addwmi	r1, r1, #1023	; 0x3ff
          wTimePhC = wTimePhA - (wY / 131072);
 80023a0:	2a00      	cmp	r2, #0
 80023a2:	bfb8      	it	lt
 80023a4:	f502 327f 	addlt.w	r2, r2, #261120	; 0x3fc00
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 80023a8:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
 80023ac:	eb0e 41a1 	add.w	r1, lr, r1, asr #18
          wTimePhC = wTimePhA - (wY / 131072);
 80023b0:	bfb8      	it	lt
 80023b2:	f202 32ff 	addwlt	r2, r2, #1023	; 0x3ff
          if(true == pHandle->SingleShuntTopology)
 80023b6:	f890 4087 	ldrb.w	r4, [r0, #135]	; 0x87
          pHandle->Sector = SECTOR_3;
 80023ba:	2302      	movs	r3, #2
          wTimePhC = wTimePhA - (wY / 131072);
 80023bc:	eba1 42a2 	sub.w	r2, r1, r2, asr #18
          pHandle->Sector = SECTOR_3;
 80023c0:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
          wTimePhB = wTimePhC + (wX / 131072);
 80023c4:	eb02 436c 	add.w	r3, r2, ip, asr #17
          if(true == pHandle->SingleShuntTopology)
 80023c8:	2c00      	cmp	r4, #0
 80023ca:	f040 8092 	bne.w	80024f2 <PWMC_SetPhaseVoltage+0x2e6>
          pHandle->lowDuty = (uint16_t)wTimePhB;
 80023ce:	fa1f fe83 	uxth.w	lr, r3
          pHandle->midDuty = (uint16_t)wTimePhC;
 80023d2:	fa1f fc82 	uxth.w	ip, r2
          pHandle->highDuty = (uint16_t)wTimePhA;
 80023d6:	b28c      	uxth	r4, r1
 80023d8:	e764      	b.n	80022a4 <PWMC_SetPhaseVoltage+0x98>
 80023da:	f04f 0e02 	mov.w	lr, #2
 80023de:	f04f 0c00 	mov.w	ip, #0
 80023e2:	2401      	movs	r4, #1
 80023e4:	e75e      	b.n	80022a4 <PWMC_SetPhaseVoltage+0x98>
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 80023e6:	ebbc 0404 	subs.w	r4, ip, r4
 80023ea:	bf44      	itt	mi
 80023ec:	f504 347f 	addmi.w	r4, r4, #261120	; 0x3fc00
 80023f0:	f204 34ff 	addwmi	r4, r4, #1023	; 0x3ff
          wTimePhB = wTimePhA + (wZ / 131072);
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	bfb8      	it	lt
 80023f8:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
          pHandle->Sector = SECTOR_4;
 80023fc:	f04f 0203 	mov.w	r2, #3
          wTimePhB = wTimePhA + (wZ / 131072);
 8002400:	bfb8      	it	lt
 8002402:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
          pHandle->Sector = SECTOR_4;
 8002406:	f880 207c 	strb.w	r2, [r0, #124]	; 0x7c
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 800240a:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
          wTimePhC = wTimePhB - (wX / 131072);
 800240e:	f1bc 0200 	subs.w	r2, ip, #0
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 8002412:	eb0e 41a4 	add.w	r1, lr, r4, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 8002416:	bfb8      	it	lt
 8002418:	f502 32ff 	addlt.w	r2, r2, #130560	; 0x1fe00
          if(true == pHandle->SingleShuntTopology)
 800241c:	f890 4087 	ldrb.w	r4, [r0, #135]	; 0x87
          wTimePhB = wTimePhA + (wZ / 131072);
 8002420:	eb01 43a3 	add.w	r3, r1, r3, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 8002424:	bfb8      	it	lt
 8002426:	f202 12ff 	addwlt	r2, r2, #511	; 0x1ff
 800242a:	eba3 4262 	sub.w	r2, r3, r2, asr #17
          if(true == pHandle->SingleShuntTopology)
 800242e:	2c00      	cmp	r4, #0
 8002430:	d071      	beq.n	8002516 <PWMC_SetPhaseVoltage+0x30a>
 8002432:	f04f 0e00 	mov.w	lr, #0
 8002436:	f04f 0c01 	mov.w	ip, #1
 800243a:	2402      	movs	r4, #2
 800243c:	e732      	b.n	80022a4 <PWMC_SetPhaseVoltage+0x98>
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 800243e:	ebb1 010c 	subs.w	r1, r1, ip
 8002442:	bf44      	itt	mi
 8002444:	f501 317f 	addmi.w	r1, r1, #261120	; 0x3fc00
 8002448:	f201 31ff 	addwmi	r1, r1, #1023	; 0x3ff
          wTimePhC = wTimePhA - (wY / 131072);
 800244c:	2a00      	cmp	r2, #0
 800244e:	bfb8      	it	lt
 8002450:	f502 327f 	addlt.w	r2, r2, #261120	; 0x3fc00
          pHandle->Sector = SECTOR_6;
 8002454:	f04f 0305 	mov.w	r3, #5
          wTimePhC = wTimePhA - (wY / 131072);
 8002458:	bfb8      	it	lt
 800245a:	f202 32ff 	addwlt	r2, r2, #1023	; 0x3ff
          pHandle->Sector = SECTOR_6;
 800245e:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 8002462:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
          wTimePhB = wTimePhC + (wX / 131072);
 8002466:	f1bc 0300 	subs.w	r3, ip, #0
 800246a:	bfb8      	it	lt
 800246c:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 8002470:	eb0e 41a1 	add.w	r1, lr, r1, asr #18
          if(true == pHandle->SingleShuntTopology)
 8002474:	f890 4087 	ldrb.w	r4, [r0, #135]	; 0x87
          wTimePhC = wTimePhA - (wY / 131072);
 8002478:	eba1 42a2 	sub.w	r2, r1, r2, asr #18
          wTimePhB = wTimePhC + (wX / 131072);
 800247c:	bfb8      	it	lt
 800247e:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 8002482:	eb02 4363 	add.w	r3, r2, r3, asr #17
          if(true == pHandle->SingleShuntTopology)
 8002486:	2c00      	cmp	r4, #0
 8002488:	d03f      	beq.n	800250a <PWMC_SetPhaseVoltage+0x2fe>
 800248a:	f04f 0e01 	mov.w	lr, #1
 800248e:	f04f 0c02 	mov.w	ip, #2
 8002492:	2400      	movs	r4, #0
 8002494:	e706      	b.n	80022a4 <PWMC_SetPhaseVoltage+0x98>
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8002496:	1b09      	subs	r1, r1, r4
 8002498:	bf44      	itt	mi
 800249a:	f501 317f 	addmi.w	r1, r1, #261120	; 0x3fc00
 800249e:	f201 31ff 	addwmi	r1, r1, #1023	; 0x3ff
        wTimePhB = wTimePhA + (wZ / 131072);
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	bfbc      	itt	lt
 80024a6:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
 80024aa:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
        wTimePhC = wTimePhA - (wY / 131072) ;
 80024ae:	2a00      	cmp	r2, #0
 80024b0:	bfb8      	it	lt
 80024b2:	f502 327f 	addlt.w	r2, r2, #261120	; 0x3fc00
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 80024b6:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
        if(true == pHandle->SingleShuntTopology)
 80024ba:	f890 4087 	ldrb.w	r4, [r0, #135]	; 0x87
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 80024be:	eb0e 41a1 	add.w	r1, lr, r1, asr #18
        pHandle->Sector = SECTOR_5;
 80024c2:	f04f 0c04 	mov.w	ip, #4
        wTimePhC = wTimePhA - (wY / 131072) ;
 80024c6:	bfb8      	it	lt
 80024c8:	f202 32ff 	addwlt	r2, r2, #1023	; 0x3ff
        pHandle->Sector = SECTOR_5;
 80024cc:	f880 c07c 	strb.w	ip, [r0, #124]	; 0x7c
        wTimePhB = wTimePhA + (wZ / 131072);
 80024d0:	eb01 43a3 	add.w	r3, r1, r3, asr #18
        wTimePhC = wTimePhA - (wY / 131072) ;
 80024d4:	eba1 42a2 	sub.w	r2, r1, r2, asr #18
        if(true == pHandle->SingleShuntTopology)
 80024d8:	b92c      	cbnz	r4, 80024e6 <PWMC_SetPhaseVoltage+0x2da>
          pHandle->lowDuty = (uint16_t)wTimePhC;
 80024da:	fa1f fe82 	uxth.w	lr, r2
          pHandle->midDuty = (uint16_t)wTimePhA;
 80024de:	fa1f fc81 	uxth.w	ip, r1
          pHandle->highDuty = (uint16_t)wTimePhB;
 80024e2:	b29c      	uxth	r4, r3
 80024e4:	e6de      	b.n	80022a4 <PWMC_SetPhaseVoltage+0x98>
 80024e6:	f04f 0e01 	mov.w	lr, #1
 80024ea:	f04f 0c00 	mov.w	ip, #0
 80024ee:	2402      	movs	r4, #2
 80024f0:	e6d8      	b.n	80022a4 <PWMC_SetPhaseVoltage+0x98>
 80024f2:	f04f 0e00 	mov.w	lr, #0
 80024f6:	f04f 0c02 	mov.w	ip, #2
 80024fa:	2401      	movs	r4, #1
 80024fc:	e6d2      	b.n	80022a4 <PWMC_SetPhaseVoltage+0x98>
 80024fe:	f04f 0e02 	mov.w	lr, #2
 8002502:	f04f 0c01 	mov.w	ip, #1
 8002506:	2400      	movs	r4, #0
 8002508:	e6cc      	b.n	80022a4 <PWMC_SetPhaseVoltage+0x98>
            pHandle->lowDuty = (uint16_t)wTimePhA;
 800250a:	fa1f fe81 	uxth.w	lr, r1
            pHandle->midDuty = (uint16_t)wTimePhC;
 800250e:	fa1f fc82 	uxth.w	ip, r2
            pHandle->highDuty = (uint16_t)wTimePhB;
 8002512:	b29c      	uxth	r4, r3
 8002514:	e6c6      	b.n	80022a4 <PWMC_SetPhaseVoltage+0x98>
          pHandle->lowDuty = (uint16_t)wTimePhC;
 8002516:	fa1f fe82 	uxth.w	lr, r2
          pHandle->midDuty = (uint16_t)wTimePhB;
 800251a:	fa1f fc83 	uxth.w	ip, r3
          pHandle->highDuty = (uint16_t)wTimePhA;
 800251e:	b28c      	uxth	r4, r1
 8002520:	e6c0      	b.n	80022a4 <PWMC_SetPhaseVoltage+0x98>
            pHandle->lowDuty = (uint16_t)wTimePhA;
 8002522:	fa1f fe81 	uxth.w	lr, r1
            pHandle->midDuty = (uint16_t)wTimePhB;
 8002526:	fa1f fc83 	uxth.w	ip, r3
            pHandle->highDuty = (uint16_t)wTimePhC;
 800252a:	b294      	uxth	r4, r2
 800252c:	e6ba      	b.n	80022a4 <PWMC_SetPhaseVoltage+0x98>
 800252e:	bf00      	nop

08002530 <PWMC_SwitchOffPWM>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOffPwm(pHandle);
 8002530:	6843      	ldr	r3, [r0, #4]
 8002532:	4718      	bx	r3

08002534 <PWMC_SwitchOnPWM>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOnPwm(pHandle);
 8002534:	6883      	ldr	r3, [r0, #8]
 8002536:	4718      	bx	r3

08002538 <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, **false** if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr(PWMC_Handle_t *pHandle, CRCAction_t action)
{
 8002538:	b510      	push	{r4, lr}
 800253a:	4604      	mov	r4, r0
 800253c:	b082      	sub	sp, #8
    /* Nothing to do */
  }
  else
  {
#endif
    if (CRC_START == action)
 800253e:	b199      	cbz	r1, 8002568 <PWMC_CurrentReadingCalibr+0x30>
    {
      PWMC_SwitchOffPWM(pHandle);
      pHandle->pFctCurrReadingCalib(pHandle);
      retVal = true;
    }
    else if (CRC_EXEC == action)
 8002540:	2901      	cmp	r1, #1
 8002542:	d002      	beq.n	800254a <PWMC_CurrentReadingCalibr+0x12>
  bool retVal = false;
 8002544:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (retVal);
}
 8002546:	b002      	add	sp, #8
 8002548:	bd10      	pop	{r4, pc}
      if (pHandle->OffCalibrWaitTimeCounter > 0u)
 800254a:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 800254e:	b19b      	cbz	r3, 8002578 <PWMC_CurrentReadingCalibr+0x40>
        pHandle->OffCalibrWaitTimeCounter--;
 8002550:	3b01      	subs	r3, #1
 8002552:	b29b      	uxth	r3, r3
 8002554:	9101      	str	r1, [sp, #4]
 8002556:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
        if (0U == pHandle->OffCalibrWaitTimeCounter)
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1f2      	bne.n	8002544 <PWMC_CurrentReadingCalibr+0xc>
          pHandle->pFctCurrReadingCalib(pHandle);
 800255e:	68c3      	ldr	r3, [r0, #12]
 8002560:	4798      	blx	r3
          retVal = true;
 8002562:	9901      	ldr	r1, [sp, #4]
 8002564:	4608      	mov	r0, r1
 8002566:	e7ee      	b.n	8002546 <PWMC_CurrentReadingCalibr+0xe>
      PWMC_SwitchOffPWM(pHandle);
 8002568:	f7ff ffe2 	bl	8002530 <PWMC_SwitchOffPWM>
      pHandle->pFctCurrReadingCalib(pHandle);
 800256c:	4620      	mov	r0, r4
 800256e:	68e3      	ldr	r3, [r4, #12]
 8002570:	4798      	blx	r3
      retVal = true;
 8002572:	2001      	movs	r0, #1
}
 8002574:	b002      	add	sp, #8
 8002576:	bd10      	pop	{r4, pc}
        retVal = true;
 8002578:	4608      	mov	r0, r1
}
 800257a:	b002      	add	sp, #8
 800257c:	bd10      	pop	{r4, pc}
 800257e:	bf00      	nop

08002580 <PWMC_OVP_Handler>:
    tempPointer = MC_NULL;
  }
  else
  {
#endif
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8002580:	6c4a      	ldr	r2, [r1, #68]	; 0x44
{
 8002582:	4603      	mov	r3, r0
    pHandle->OverVoltageFlag = true;
 8002584:	f04f 0c01 	mov.w	ip, #1
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8002588:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800258c:	644a      	str	r2, [r1, #68]	; 0x44
    tempPointer = &(pHandle->Motor);
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (tempPointer);
}
 800258e:	307a      	adds	r0, #122	; 0x7a
    pHandle->OverVoltageFlag = true;
 8002590:	f883 c083 	strb.w	ip, [r3, #131]	; 0x83
    pHandle->BrakeActionLock = true;
 8002594:	f883 c085 	strb.w	ip, [r3, #133]	; 0x85
}
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop

0800259c <PWMC_IsFaultOccurred>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  * @retval uint16_t Returns #MC_OVER_CURR if an overcurrent has been
  *                  detected since last method call, #MC_NO_FAULTS otherwise.
  */
__weak uint16_t PWMC_IsFaultOccurred(PWMC_Handle_t *pHandle)
{
 800259c:	4603      	mov	r3, r0
  uint16_t retVal = MC_NO_FAULTS;

  if (true == pHandle->OverVoltageFlag)
 800259e:	f890 0083 	ldrb.w	r0, [r0, #131]	; 0x83
 80025a2:	b1a8      	cbz	r0, 80025d0 <PWMC_IsFaultOccurred+0x34>
  {
    retVal = MC_OVER_VOLT;
    pHandle->OverVoltageFlag = false;
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
 80025aa:	2142      	movs	r1, #66	; 0x42
    retVal = MC_OVER_VOLT;
 80025ac:	2002      	movs	r0, #2
  else
  {
    /* Nothing to do */
  }

  if (true == pHandle->OverCurrentFlag)
 80025ae:	f893 2082 	ldrb.w	r2, [r3, #130]	; 0x82
 80025b2:	b11a      	cbz	r2, 80025bc <PWMC_IsFaultOccurred+0x20>
  {
    retVal |= MC_OVER_CURR;
    pHandle->OverCurrentFlag = false;
 80025b4:	2200      	movs	r2, #0
 80025b6:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
    retVal |= MC_OVER_CURR;
 80025ba:	4608      	mov	r0, r1
  else
  {
    /* Nothing to do */
  }

  if (true == pHandle->driverProtectionFlag)
 80025bc:	f893 2084 	ldrb.w	r2, [r3, #132]	; 0x84
 80025c0:	b12a      	cbz	r2, 80025ce <PWMC_IsFaultOccurred+0x32>
  {
    retVal |= MC_DP_FAULT;
 80025c2:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    pHandle->driverProtectionFlag = false;
 80025c6:	2200      	movs	r2, #0
    retVal |= MC_DP_FAULT;
 80025c8:	b280      	uxth	r0, r0
    pHandle->driverProtectionFlag = false;
 80025ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
  {
    /* Nothing to do */
  }

  return (retVal);
}
 80025ce:	4770      	bx	lr
 80025d0:	2140      	movs	r1, #64	; 0x40
 80025d2:	e7ec      	b.n	80025ae <PWMC_IsFaultOccurred+0x12>

080025d4 <RI_SetRegisterGlobal>:
#include "mcp_config.h"
#include "mcpa.h"
#include "mc_configuration_registers.h"

uint8_t RI_SetRegisterGlobal(uint16_t regID, uint8_t typeID, uint8_t *data, uint16_t *size, int16_t dataAvailable)
{
 80025d4:	b510      	push	{r4, lr}
  uint8_t retVal = MCP_CMD_OK;
  switch(typeID)
 80025d6:	3908      	subs	r1, #8
{
 80025d8:	f9bd c008 	ldrsh.w	ip, [sp, #8]
  switch(typeID)
 80025dc:	2920      	cmp	r1, #32
 80025de:	d812      	bhi.n	8002606 <RI_SetRegisterGlobal+0x32>
 80025e0:	e8df f001 	tbb	[pc, r1]
 80025e4:	11111115 	.word	0x11111115
 80025e8:	11111111 	.word	0x11111111
 80025ec:	1111111d 	.word	0x1111111d
 80025f0:	11111111 	.word	0x11111111
 80025f4:	1111112d 	.word	0x1111112d
 80025f8:	11111111 	.word	0x11111111
 80025fc:	11111135 	.word	0x11111135
 8002600:	11111111 	.word	0x11111111
 8002604:	4c          	.byte	0x4c
 8002605:	00          	.byte	0x00
    }

    default:
    {
      retVal = MCP_ERROR_BAD_DATA_TYPE;
      *size =0; /* From this point we are not able anymore to decode the RX buffer */
 8002606:	2200      	movs	r2, #0
 8002608:	801a      	strh	r2, [r3, #0]
      retVal = MCP_ERROR_BAD_DATA_TYPE;
 800260a:	2007      	movs	r0, #7
      break;
    }
  }
  return (retVal);
}
 800260c:	bd10      	pop	{r4, pc}
          retVal = MCP_ERROR_UNKNOWN_REG;
 800260e:	2848      	cmp	r0, #72	; 0x48
      *size = 1;
 8002610:	f04f 0201 	mov.w	r2, #1
          retVal = MCP_ERROR_UNKNOWN_REG;
 8002614:	bf0c      	ite	eq
 8002616:	2004      	moveq	r0, #4
 8002618:	2005      	movne	r0, #5
      *size = 1;
 800261a:	801a      	strh	r2, [r3, #0]
}
 800261c:	bd10      	pop	{r4, pc}
      switch (regID)
 800261e:	f5b0 6f65 	cmp.w	r0, #3664	; 0xe50
 8002622:	d04e      	beq.n	80026c2 <RI_SetRegisterGlobal+0xee>
 8002624:	d93c      	bls.n	80026a0 <RI_SetRegisterGlobal+0xcc>
 8002626:	f5b0 6f69 	cmp.w	r0, #3728	; 0xe90
 800262a:	d04a      	beq.n	80026c2 <RI_SetRegisterGlobal+0xee>
 800262c:	f641 3258 	movw	r2, #7000	; 0x1b58
 8002630:	4290      	cmp	r0, r2
 8002632:	bf14      	ite	ne
 8002634:	2005      	movne	r0, #5
 8002636:	2004      	moveq	r0, #4
      *size = 2;
 8002638:	2202      	movs	r2, #2
 800263a:	801a      	strh	r2, [r3, #0]
}
 800263c:	bd10      	pop	{r4, pc}
          retVal = MCP_ERROR_UNKNOWN_REG;
 800263e:	2818      	cmp	r0, #24
      *size = 4;
 8002640:	f04f 0204 	mov.w	r2, #4
          retVal = MCP_ERROR_UNKNOWN_REG;
 8002644:	bf0c      	ite	eq
 8002646:	4610      	moveq	r0, r2
 8002648:	2005      	movne	r0, #5
      *size = 4;
 800264a:	801a      	strh	r2, [r3, #0]
}
 800264c:	bd10      	pop	{r4, pc}
uint8_t RI_MovString(const char_t *srcString, char_t *destString, uint16_t *size, int16_t maxSize)
{
  uint8_t retVal = MCP_CMD_OK;
  const char_t *tempsrcString = srcString;
  char_t *tempdestString = destString;
  *size= 1U ; /* /0 is the min String size */
 800264e:	2101      	movs	r1, #1
 8002650:	8019      	strh	r1, [r3, #0]

  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002652:	f992 0000 	ldrsb.w	r0, [r2]
 8002656:	b358      	cbz	r0, 80026b0 <RI_SetRegisterGlobal+0xdc>
 8002658:	fa1f fc8c 	uxth.w	ip, ip
 800265c:	1850      	adds	r0, r2, r1
 800265e:	e004      	b.n	800266a <RI_SetRegisterGlobal+0x96>
  {
    *tempdestString = *tempsrcString;
    tempdestString++;
    tempsrcString++;
    *size = *size + 1U;
 8002660:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002662:	f992 4000 	ldrsb.w	r4, [r2]
 8002666:	3001      	adds	r0, #1
 8002668:	b314      	cbz	r4, 80026b0 <RI_SetRegisterGlobal+0xdc>
    *size = *size + 1U;
 800266a:	f101 0e01 	add.w	lr, r1, #1
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 800266e:	4561      	cmp	r1, ip
    tempdestString++;
 8002670:	4602      	mov	r2, r0
    *size = *size + 1U;
 8002672:	fa1f f18e 	uxth.w	r1, lr
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002676:	d3f3      	bcc.n	8002660 <RI_SetRegisterGlobal+0x8c>
      retVal = MCP_ERROR_RO_REG;
 8002678:	2004      	movs	r0, #4
}
 800267a:	bd10      	pop	{r4, pc}
      *size = rawSize + 2U;
 800267c:	8812      	ldrh	r2, [r2, #0]
 800267e:	3202      	adds	r2, #2
 8002680:	b292      	uxth	r2, r2
      if (*size > (uint16_t)dataAvailable)
 8002682:	fa1f fc8c 	uxth.w	ip, ip
 8002686:	4562      	cmp	r2, ip
      *size = rawSize + 2U;
 8002688:	801a      	strh	r2, [r3, #0]
      if (*size > (uint16_t)dataAvailable)
 800268a:	d81c      	bhi.n	80026c6 <RI_SetRegisterGlobal+0xf2>
        switch (regID)
 800268c:	28a8      	cmp	r0, #168	; 0xa8
 800268e:	d0f3      	beq.n	8002678 <RI_SetRegisterGlobal+0xa4>
 8002690:	d812      	bhi.n	80026b8 <RI_SetRegisterGlobal+0xe4>
 8002692:	f020 0040 	bic.w	r0, r0, #64	; 0x40
            retVal = MCP_ERROR_RO_REG;
 8002696:	2828      	cmp	r0, #40	; 0x28
 8002698:	bf14      	ite	ne
 800269a:	2005      	movne	r0, #5
 800269c:	2004      	moveq	r0, #4
}
 800269e:	bd10      	pop	{r4, pc}
 80026a0:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 80026a4:	f5b0 6fb2 	cmp.w	r0, #1424	; 0x590
 80026a8:	bf14      	ite	ne
 80026aa:	2005      	movne	r0, #5
 80026ac:	2004      	moveq	r0, #4
 80026ae:	e7c3      	b.n	8002638 <RI_SetRegisterGlobal+0x64>
  { /* Last string char must be 0 */
    retVal = MCP_ERROR_STRING_FORMAT;
  }
  else
  {
    *tempdestString = (int8_t)0;
 80026b0:	2300      	movs	r3, #0
 80026b2:	7013      	strb	r3, [r2, #0]
      retVal = MCP_ERROR_RO_REG;
 80026b4:	2004      	movs	r0, #4
  return (retVal);
 80026b6:	e7e0      	b.n	800267a <RI_SetRegisterGlobal+0xa6>
            retVal = MCP_ERROR_RO_REG;
 80026b8:	28e8      	cmp	r0, #232	; 0xe8
 80026ba:	bf14      	ite	ne
 80026bc:	2005      	movne	r0, #5
 80026be:	2004      	moveq	r0, #4
}
 80026c0:	bd10      	pop	{r4, pc}
  uint8_t retVal = MCP_CMD_OK;
 80026c2:	2000      	movs	r0, #0
 80026c4:	e7b8      	b.n	8002638 <RI_SetRegisterGlobal+0x64>
        *size = 0;
 80026c6:	2200      	movs	r2, #0
 80026c8:	801a      	strh	r2, [r3, #0]
        retVal = MCP_ERROR_BAD_RAW_FORMAT; /* This error stop the parsing of the CMD buffer */
 80026ca:	200a      	movs	r0, #10
}
 80026cc:	bd10      	pop	{r4, pc}
 80026ce:	bf00      	nop

080026d0 <RI_SetRegisterMotor1>:
{
 80026d0:	b510      	push	{r4, lr}
 80026d2:	b084      	sub	sp, #16
  switch(typeID)
 80026d4:	3908      	subs	r1, #8
{
 80026d6:	f9bd e018 	ldrsh.w	lr, [sp, #24]
 80026da:	4694      	mov	ip, r2
 80026dc:	461c      	mov	r4, r3
  switch(typeID)
 80026de:	2920      	cmp	r1, #32
 80026e0:	d812      	bhi.n	8002708 <RI_SetRegisterMotor1+0x38>
 80026e2:	e8df f001 	tbb	[pc, r1]
 80026e6:	1116      	.short	0x1116
 80026e8:	11111111 	.word	0x11111111
 80026ec:	11251111 	.word	0x11251111
 80026f0:	11111111 	.word	0x11111111
 80026f4:	11531111 	.word	0x11531111
 80026f8:	11111111 	.word	0x11111111
 80026fc:	11611111 	.word	0x11611111
 8002700:	11111111 	.word	0x11111111
 8002704:	1111      	.short	0x1111
 8002706:	7c          	.byte	0x7c
 8002707:	00          	.byte	0x00
      *size =0; /* From this point we are not able anymore to decode the RX buffer */
 8002708:	2300      	movs	r3, #0
 800270a:	8023      	strh	r3, [r4, #0]
      retVal = MCP_ERROR_BAD_DATA_TYPE;
 800270c:	2007      	movs	r0, #7
}
 800270e:	b004      	add	sp, #16
 8002710:	bd10      	pop	{r4, pc}
      switch (regID)
 8002712:	2848      	cmp	r0, #72	; 0x48
 8002714:	f000 815c 	beq.w	80029d0 <RI_SetRegisterMotor1+0x300>
 8002718:	2888      	cmp	r0, #136	; 0x88
 800271a:	f040 814e 	bne.w	80029ba <RI_SetRegisterMotor1+0x2ea>
          uint8_t regdata8 = *data;
 800271e:	7813      	ldrb	r3, [r2, #0]
          if ((uint8_t)MCM_TORQUE_MODE == regdata8)
 8002720:	2b04      	cmp	r3, #4
 8002722:	f000 8165 	beq.w	80029f0 <RI_SetRegisterMotor1+0x320>
          if ((uint8_t)MCM_SPEED_MODE == regdata8)
 8002726:	2b03      	cmp	r3, #3
 8002728:	f000 8198 	beq.w	8002a5c <RI_SetRegisterMotor1+0x38c>
  uint8_t retVal = MCP_CMD_OK;
 800272c:	2000      	movs	r0, #0
 800272e:	e145      	b.n	80029bc <RI_SetRegisterMotor1+0x2ec>
      uint16_t regdata16 = *(uint16_t *)data; //cstat !MISRAC2012-Rule-11.3
 8002730:	f5b0 6f19 	cmp.w	r0, #2448	; 0x990
 8002734:	8811      	ldrh	r1, [r2, #0]
      switch (regID)
 8002736:	f000 81dd 	beq.w	8002af4 <RI_SetRegisterMotor1+0x424>
 800273a:	d867      	bhi.n	800280c <RI_SetRegisterMotor1+0x13c>
 800273c:	f5b0 7f04 	cmp.w	r0, #528	; 0x210
 8002740:	f000 81d2 	beq.w	8002ae8 <RI_SetRegisterMotor1+0x418>
 8002744:	f240 8089 	bls.w	800285a <RI_SetRegisterMotor1+0x18a>
 8002748:	f5b0 7f44 	cmp.w	r0, #784	; 0x310
 800274c:	f000 81c6 	beq.w	8002adc <RI_SetRegisterMotor1+0x40c>
 8002750:	d975      	bls.n	800283e <RI_SetRegisterMotor1+0x16e>
 8002752:	f5b0 6f0d 	cmp.w	r0, #2256	; 0x8d0
 8002756:	d06e      	beq.n	8002836 <RI_SetRegisterMotor1+0x166>
 8002758:	f240 80cc 	bls.w	80028f4 <RI_SetRegisterMotor1+0x224>
 800275c:	f5b0 6f11 	cmp.w	r0, #2320	; 0x910
 8002760:	d069      	beq.n	8002836 <RI_SetRegisterMotor1+0x166>
 8002762:	f5b0 6f15 	cmp.w	r0, #2384	; 0x950
 8002766:	f040 81d3 	bne.w	8002b10 <RI_SetRegisterMotor1+0x440>
          currComp = MCI_GetIqdref(pMCIN);
 800276a:	48ab      	ldr	r0, [pc, #684]	; (8002a18 <RI_SetRegisterMotor1+0x348>)
 800276c:	9101      	str	r1, [sp, #4]
 800276e:	f7fe fe45 	bl	80013fc <MCI_GetIqdref>
          currComp.q = (int16_t)regdata16;
 8002772:	9901      	ldr	r1, [sp, #4]
          currComp = MCI_GetIqdref(pMCIN);
 8002774:	9003      	str	r0, [sp, #12]
          currComp.q = (int16_t)regdata16;
 8002776:	f8ad 100c 	strh.w	r1, [sp, #12]
          MCI_SetCurrentReferences(pMCIN,currComp);
 800277a:	48a7      	ldr	r0, [pc, #668]	; (8002a18 <RI_SetRegisterMotor1+0x348>)
 800277c:	9903      	ldr	r1, [sp, #12]
 800277e:	f7fe fd35 	bl	80011ec <MCI_SetCurrentReferences>
  uint8_t retVal = MCP_CMD_OK;
 8002782:	2000      	movs	r0, #0
      *size = 2;
 8002784:	2302      	movs	r3, #2
 8002786:	8023      	strh	r3, [r4, #0]
}
 8002788:	b004      	add	sp, #16
 800278a:	bd10      	pop	{r4, pc}
      switch (regID)
 800278c:	2858      	cmp	r0, #88	; 0x58
 800278e:	f000 8139 	beq.w	8002a04 <RI_SetRegisterMotor1+0x334>
 8002792:	2898      	cmp	r0, #152	; 0x98
 8002794:	f000 811e 	beq.w	80029d4 <RI_SetRegisterMotor1+0x304>
          retVal = MCP_ERROR_RO_REG;
 8002798:	2818      	cmp	r0, #24
 800279a:	bf14      	ite	ne
 800279c:	2005      	movne	r0, #5
 800279e:	2004      	moveq	r0, #4
      *size = 4;
 80027a0:	2304      	movs	r3, #4
 80027a2:	8023      	strh	r3, [r4, #0]
}
 80027a4:	b004      	add	sp, #16
 80027a6:	bd10      	pop	{r4, pc}
  *size= 1U ; /* /0 is the min String size */
 80027a8:	2201      	movs	r2, #1
 80027aa:	8022      	strh	r2, [r4, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80027ac:	f99c 3000 	ldrsb.w	r3, [ip]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	f000 80f5 	beq.w	80029a0 <RI_SetRegisterMotor1+0x2d0>
 80027b6:	fa1f f18e 	uxth.w	r1, lr
 80027ba:	eb0c 0302 	add.w	r3, ip, r2
 80027be:	e006      	b.n	80027ce <RI_SetRegisterMotor1+0xfe>
    *size = *size + 1U;
 80027c0:	8022      	strh	r2, [r4, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80027c2:	f99c 0000 	ldrsb.w	r0, [ip]
 80027c6:	3301      	adds	r3, #1
 80027c8:	2800      	cmp	r0, #0
 80027ca:	f000 80e9 	beq.w	80029a0 <RI_SetRegisterMotor1+0x2d0>
    *size = *size + 1U;
 80027ce:	1c50      	adds	r0, r2, #1
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80027d0:	4291      	cmp	r1, r2
    tempdestString++;
 80027d2:	469c      	mov	ip, r3
    *size = *size + 1U;
 80027d4:	b282      	uxth	r2, r0
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80027d6:	d8f3      	bhi.n	80027c0 <RI_SetRegisterMotor1+0xf0>
      retVal = MCP_ERROR_RO_REG;
 80027d8:	2004      	movs	r0, #4
}
 80027da:	b004      	add	sp, #16
 80027dc:	bd10      	pop	{r4, pc}
      *size = rawSize + 2U;
 80027de:	8813      	ldrh	r3, [r2, #0]
 80027e0:	3302      	adds	r3, #2
 80027e2:	b29b      	uxth	r3, r3
      if (*size > (uint16_t)dataAvailable)
 80027e4:	fa1f f18e 	uxth.w	r1, lr
 80027e8:	428b      	cmp	r3, r1
      *size = rawSize + 2U;
 80027ea:	8023      	strh	r3, [r4, #0]
      if (*size > (uint16_t)dataAvailable)
 80027ec:	f200 80ec 	bhi.w	80029c8 <RI_SetRegisterMotor1+0x2f8>
        switch (regID)
 80027f0:	f5b0 7ff4 	cmp.w	r0, #488	; 0x1e8
 80027f4:	f000 8108 	beq.w	8002a08 <RI_SetRegisterMotor1+0x338>
 80027f8:	f200 80c4 	bhi.w	8002984 <RI_SetRegisterMotor1+0x2b4>
 80027fc:	f5b0 7fd4 	cmp.w	r0, #424	; 0x1a8
 8002800:	f000 8116 	beq.w	8002a30 <RI_SetRegisterMotor1+0x360>
 8002804:	f240 80b4 	bls.w	8002970 <RI_SetRegisterMotor1+0x2a0>
 8002808:	2005      	movs	r0, #5
 800280a:	e780      	b.n	800270e <RI_SetRegisterMotor1+0x3e>
 800280c:	f241 5310 	movw	r3, #5392	; 0x1510
 8002810:	4298      	cmp	r0, r3
 8002812:	f000 8132 	beq.w	8002a7a <RI_SetRegisterMotor1+0x3aa>
 8002816:	d958      	bls.n	80028ca <RI_SetRegisterMotor1+0x1fa>
 8002818:	f241 53d0 	movw	r3, #5584	; 0x15d0
 800281c:	4298      	cmp	r0, r3
 800281e:	f000 8127 	beq.w	8002a70 <RI_SetRegisterMotor1+0x3a0>
 8002822:	d943      	bls.n	80028ac <RI_SetRegisterMotor1+0x1dc>
 8002824:	f241 6350 	movw	r3, #5712	; 0x1650
 8002828:	4298      	cmp	r0, r3
 800282a:	f000 8152 	beq.w	8002ad2 <RI_SetRegisterMotor1+0x402>
 800282e:	f641 3358 	movw	r3, #7000	; 0x1b58
 8002832:	4298      	cmp	r0, r3
 8002834:	d130      	bne.n	8002898 <RI_SetRegisterMotor1+0x1c8>
      *size = 2;
 8002836:	2302      	movs	r3, #2
 8002838:	2004      	movs	r0, #4
 800283a:	8023      	strh	r3, [r4, #0]
      break;
 800283c:	e7a4      	b.n	8002788 <RI_SetRegisterMotor1+0xb8>
 800283e:	f5b0 7f24 	cmp.w	r0, #656	; 0x290
 8002842:	f000 8125 	beq.w	8002a90 <RI_SetRegisterMotor1+0x3c0>
 8002846:	f5b0 7f34 	cmp.w	r0, #720	; 0x2d0
 800284a:	f040 8161 	bne.w	8002b10 <RI_SetRegisterMotor1+0x440>
          PID_SetKI(&PIDIdHandle_M1, (int16_t)regdata16);
 800284e:	4873      	ldr	r0, [pc, #460]	; (8002a1c <RI_SetRegisterMotor1+0x34c>)
 8002850:	b209      	sxth	r1, r1
 8002852:	f003 fbeb 	bl	800602c <PID_SetKI>
  uint8_t retVal = MCP_CMD_OK;
 8002856:	2000      	movs	r0, #0
          break;
 8002858:	e794      	b.n	8002784 <RI_SetRegisterMotor1+0xb4>
 800285a:	f5b0 7f88 	cmp.w	r0, #272	; 0x110
 800285e:	f000 812c 	beq.w	8002aba <RI_SetRegisterMotor1+0x3ea>
 8002862:	d90d      	bls.n	8002880 <RI_SetRegisterMotor1+0x1b0>
 8002864:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
 8002868:	f000 810c 	beq.w	8002a84 <RI_SetRegisterMotor1+0x3b4>
 800286c:	f5b0 7fe8 	cmp.w	r0, #464	; 0x1d0
 8002870:	f040 814e 	bne.w	8002b10 <RI_SetRegisterMotor1+0x440>
          PID_SetKI(&PIDIqHandle_M1, (int16_t)regdata16);
 8002874:	486a      	ldr	r0, [pc, #424]	; (8002a20 <RI_SetRegisterMotor1+0x350>)
 8002876:	b209      	sxth	r1, r1
 8002878:	f003 fbd8 	bl	800602c <PID_SetKI>
  uint8_t retVal = MCP_CMD_OK;
 800287c:	2000      	movs	r0, #0
          break;
 800287e:	e781      	b.n	8002784 <RI_SetRegisterMotor1+0xb4>
 8002880:	2890      	cmp	r0, #144	; 0x90
 8002882:	f000 8120 	beq.w	8002ac6 <RI_SetRegisterMotor1+0x3f6>
 8002886:	28d0      	cmp	r0, #208	; 0xd0
 8002888:	f040 8142 	bne.w	8002b10 <RI_SetRegisterMotor1+0x440>
          PID_SetKI(&PIDSpeedHandle_M1, (int16_t)regdata16);
 800288c:	4865      	ldr	r0, [pc, #404]	; (8002a24 <RI_SetRegisterMotor1+0x354>)
 800288e:	b209      	sxth	r1, r1
 8002890:	f003 fbcc 	bl	800602c <PID_SetKI>
  uint8_t retVal = MCP_CMD_OK;
 8002894:	2000      	movs	r0, #0
          break;
 8002896:	e775      	b.n	8002784 <RI_SetRegisterMotor1+0xb4>
 8002898:	f241 6310 	movw	r3, #5648	; 0x1610
 800289c:	4298      	cmp	r0, r3
 800289e:	f040 8137 	bne.w	8002b10 <RI_SetRegisterMotor1+0x440>
          PID_SetKIDivisorPOW2(&PIDIqHandle_M1, regdata16);
 80028a2:	485f      	ldr	r0, [pc, #380]	; (8002a20 <RI_SetRegisterMotor1+0x350>)
 80028a4:	f003 fbdc 	bl	8006060 <PID_SetKIDivisorPOW2>
  uint8_t retVal = MCP_CMD_OK;
 80028a8:	2000      	movs	r0, #0
          break;
 80028aa:	e76b      	b.n	8002784 <RI_SetRegisterMotor1+0xb4>
 80028ac:	f241 5350 	movw	r3, #5456	; 0x1550
 80028b0:	4298      	cmp	r0, r3
 80028b2:	f000 80f3 	beq.w	8002a9c <RI_SetRegisterMotor1+0x3cc>
 80028b6:	f241 5390 	movw	r3, #5520	; 0x1590
 80028ba:	4298      	cmp	r0, r3
 80028bc:	f040 8128 	bne.w	8002b10 <RI_SetRegisterMotor1+0x440>
          PID_SetKDDivisorPOW2(&PIDIdHandle_M1, regdata16);
 80028c0:	4856      	ldr	r0, [pc, #344]	; (8002a1c <RI_SetRegisterMotor1+0x34c>)
 80028c2:	f003 fbe9 	bl	8006098 <PID_SetKDDivisorPOW2>
  uint8_t retVal = MCP_CMD_OK;
 80028c6:	2000      	movs	r0, #0
          break;
 80028c8:	e75c      	b.n	8002784 <RI_SetRegisterMotor1+0xb4>
 80028ca:	f241 4350 	movw	r3, #5200	; 0x1450
 80028ce:	4298      	cmp	r0, r3
 80028d0:	f000 80ee 	beq.w	8002ab0 <RI_SetRegisterMotor1+0x3e0>
 80028d4:	d91d      	bls.n	8002912 <RI_SetRegisterMotor1+0x242>
 80028d6:	f241 4390 	movw	r3, #5264	; 0x1490
 80028da:	4298      	cmp	r0, r3
 80028dc:	f000 80e3 	beq.w	8002aa6 <RI_SetRegisterMotor1+0x3d6>
 80028e0:	f241 43d0 	movw	r3, #5328	; 0x14d0
 80028e4:	4298      	cmp	r0, r3
 80028e6:	f040 8113 	bne.w	8002b10 <RI_SetRegisterMotor1+0x440>
          PID_SetKDDivisorPOW2(&PIDSpeedHandle_M1, regdata16);
 80028ea:	484e      	ldr	r0, [pc, #312]	; (8002a24 <RI_SetRegisterMotor1+0x354>)
 80028ec:	f003 fbd4 	bl	8006098 <PID_SetKDDivisorPOW2>
  uint8_t retVal = MCP_CMD_OK;
 80028f0:	2000      	movs	r0, #0
          break;
 80028f2:	e747      	b.n	8002784 <RI_SetRegisterMotor1+0xb4>
 80028f4:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 80028f8:	d09d      	beq.n	8002836 <RI_SetRegisterMotor1+0x166>
 80028fa:	d917      	bls.n	800292c <RI_SetRegisterMotor1+0x25c>
 80028fc:	f5b0 6f09 	cmp.w	r0, #2192	; 0x890
 8002900:	d099      	beq.n	8002836 <RI_SetRegisterMotor1+0x166>
 8002902:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8002906:	f5b0 6f01 	cmp.w	r0, #2064	; 0x810
 800290a:	bf14      	ite	ne
 800290c:	2005      	movne	r0, #5
 800290e:	2004      	moveq	r0, #4
 8002910:	e738      	b.n	8002784 <RI_SetRegisterMotor1+0xb4>
 8002912:	f5b0 6f31 	cmp.w	r0, #2832	; 0xb10
 8002916:	d08e      	beq.n	8002836 <RI_SetRegisterMotor1+0x166>
 8002918:	d913      	bls.n	8002942 <RI_SetRegisterMotor1+0x272>
 800291a:	f5b0 6f65 	cmp.w	r0, #3664	; 0xe50
 800291e:	d051      	beq.n	80029c4 <RI_SetRegisterMotor1+0x2f4>
  uint8_t retVal = MCP_CMD_OK;
 8002920:	f5b0 6f69 	cmp.w	r0, #3728	; 0xe90
 8002924:	bf14      	ite	ne
 8002926:	2005      	movne	r0, #5
 8002928:	2000      	moveq	r0, #0
 800292a:	e72b      	b.n	8002784 <RI_SetRegisterMotor1+0xb4>
 800292c:	f5b0 6ff2 	cmp.w	r0, #1936	; 0x790
 8002930:	d081      	beq.n	8002836 <RI_SetRegisterMotor1+0x166>
 8002932:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8002936:	f5b0 6fb2 	cmp.w	r0, #1424	; 0x590
 800293a:	bf14      	ite	ne
 800293c:	2005      	movne	r0, #5
 800293e:	2004      	moveq	r0, #4
 8002940:	e720      	b.n	8002784 <RI_SetRegisterMotor1+0xb4>
 8002942:	f5b0 6f25 	cmp.w	r0, #2640	; 0xa50
 8002946:	f43f af76 	beq.w	8002836 <RI_SetRegisterMotor1+0x166>
 800294a:	d907      	bls.n	800295c <RI_SetRegisterMotor1+0x28c>
 800294c:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8002950:	f5b0 6f29 	cmp.w	r0, #2704	; 0xa90
 8002954:	bf14      	ite	ne
 8002956:	2005      	movne	r0, #5
 8002958:	2004      	moveq	r0, #4
 800295a:	e713      	b.n	8002784 <RI_SetRegisterMotor1+0xb4>
 800295c:	f5b0 6f1d 	cmp.w	r0, #2512	; 0x9d0
 8002960:	f43f af69 	beq.w	8002836 <RI_SetRegisterMotor1+0x166>
 8002964:	f5b0 6f21 	cmp.w	r0, #2576	; 0xa10
 8002968:	bf14      	ite	ne
 800296a:	2005      	movne	r0, #5
 800296c:	2004      	moveq	r0, #4
 800296e:	e709      	b.n	8002784 <RI_SetRegisterMotor1+0xb4>
 8002970:	28a8      	cmp	r0, #168	; 0xa8
 8002972:	f43f af31 	beq.w	80027d8 <RI_SetRegisterMotor1+0x108>
 8002976:	d918      	bls.n	80029aa <RI_SetRegisterMotor1+0x2da>
            retVal = MCP_ERROR_RO_REG;
 8002978:	28e8      	cmp	r0, #232	; 0xe8
 800297a:	bf14      	ite	ne
 800297c:	2005      	movne	r0, #5
 800297e:	2004      	moveq	r0, #4
}
 8002980:	b004      	add	sp, #16
 8002982:	bd10      	pop	{r4, pc}
 8002984:	f5b0 7f5a 	cmp.w	r0, #872	; 0x368
 8002988:	d060      	beq.n	8002a4c <RI_SetRegisterMotor1+0x37c>
 800298a:	f5b0 6fa5 	cmp.w	r0, #1320	; 0x528
 800298e:	f47f af3b 	bne.w	8002808 <RI_SetRegisterMotor1+0x138>
            retVal =  MCPA_cfgLog (&MCPA_UART_A, rawData);
 8002992:	4825      	ldr	r0, [pc, #148]	; (8002a28 <RI_SetRegisterMotor1+0x358>)
 8002994:	1c91      	adds	r1, r2, #2
}
 8002996:	b004      	add	sp, #16
 8002998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            retVal =  MCPA_cfgLog (&MCPA_UART_A, rawData);
 800299c:	f003 baa4 	b.w	8005ee8 <MCPA_cfgLog>
    *tempdestString = (int8_t)0;
 80029a0:	2300      	movs	r3, #0
 80029a2:	f88c 3000 	strb.w	r3, [ip]
      retVal = MCP_ERROR_RO_REG;
 80029a6:	2004      	movs	r0, #4
  return (retVal);
 80029a8:	e717      	b.n	80027da <RI_SetRegisterMotor1+0x10a>
 80029aa:	f020 0040 	bic.w	r0, r0, #64	; 0x40
            retVal = MCP_ERROR_RO_REG;
 80029ae:	2828      	cmp	r0, #40	; 0x28
 80029b0:	bf14      	ite	ne
 80029b2:	2005      	movne	r0, #5
 80029b4:	2004      	moveq	r0, #4
}
 80029b6:	b004      	add	sp, #16
 80029b8:	bd10      	pop	{r4, pc}
 80029ba:	2005      	movs	r0, #5
      *size = 1;
 80029bc:	2301      	movs	r3, #1
 80029be:	8023      	strh	r3, [r4, #0]
}
 80029c0:	b004      	add	sp, #16
 80029c2:	bd10      	pop	{r4, pc}
  uint8_t retVal = MCP_CMD_OK;
 80029c4:	2000      	movs	r0, #0
 80029c6:	e6dd      	b.n	8002784 <RI_SetRegisterMotor1+0xb4>
        *size = 0;
 80029c8:	2300      	movs	r3, #0
 80029ca:	8023      	strh	r3, [r4, #0]
        retVal = MCP_ERROR_BAD_RAW_FORMAT; /* This error stop the parsing of the CMD buffer */
 80029cc:	200a      	movs	r0, #10
 80029ce:	e69e      	b.n	800270e <RI_SetRegisterMotor1+0x3e>
            retVal = MCP_ERROR_RO_REG;
 80029d0:	2004      	movs	r0, #4
 80029d2:	e7f3      	b.n	80029bc <RI_SetRegisterMotor1+0x2ec>
          MCI_ExecSpeedRamp(pMCIN,((((int16_t)regdata32) * ((int16_t)SPEED_UNIT)) / (int16_t)U_RPM), 0);
 80029d4:	f9b2 3000 	ldrsh.w	r3, [r2]
 80029d8:	4914      	ldr	r1, [pc, #80]	; (8002a2c <RI_SetRegisterMotor1+0x35c>)
 80029da:	480f      	ldr	r0, [pc, #60]	; (8002a18 <RI_SetRegisterMotor1+0x348>)
 80029dc:	fb81 2103 	smull	r2, r1, r1, r3
 80029e0:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 80029e4:	2200      	movs	r2, #0
 80029e6:	b209      	sxth	r1, r1
 80029e8:	f7fe fbec 	bl	80011c4 <MCI_ExecSpeedRamp>
  uint8_t retVal = MCP_CMD_OK;
 80029ec:	2000      	movs	r0, #0
          break;
 80029ee:	e6d7      	b.n	80027a0 <RI_SetRegisterMotor1+0xd0>
            MCI_ExecTorqueRamp(pMCIN, MCI_GetTeref(pMCIN), 0);
 80029f0:	4809      	ldr	r0, [pc, #36]	; (8002a18 <RI_SetRegisterMotor1+0x348>)
 80029f2:	f7fe fd2d 	bl	8001450 <MCI_GetTeref>
 80029f6:	2200      	movs	r2, #0
 80029f8:	4601      	mov	r1, r0
 80029fa:	4807      	ldr	r0, [pc, #28]	; (8002a18 <RI_SetRegisterMotor1+0x348>)
 80029fc:	f7fe fbec 	bl	80011d8 <MCI_ExecTorqueRamp>
  uint8_t retVal = MCP_CMD_OK;
 8002a00:	2000      	movs	r0, #0
 8002a02:	e7db      	b.n	80029bc <RI_SetRegisterMotor1+0x2ec>
          retVal = MCP_ERROR_RO_REG;
 8002a04:	2004      	movs	r0, #4
 8002a06:	e6cb      	b.n	80027a0 <RI_SetRegisterMotor1+0xd0>
            MCI_ExecTorqueRamp(pMCIN, (int16_t)torque, duration);
 8002a08:	4803      	ldr	r0, [pc, #12]	; (8002a18 <RI_SetRegisterMotor1+0x348>)
 8002a0a:	88d2      	ldrh	r2, [r2, #6]
 8002a0c:	f9bc 1002 	ldrsh.w	r1, [ip, #2]
 8002a10:	f7fe fbe2 	bl	80011d8 <MCI_ExecTorqueRamp>
  uint8_t retVal = MCP_CMD_OK;
 8002a14:	2000      	movs	r0, #0
            break;
 8002a16:	e67a      	b.n	800270e <RI_SetRegisterMotor1+0x3e>
 8002a18:	200006c0 	.word	0x200006c0
 8002a1c:	200000bc 	.word	0x200000bc
 8002a20:	200000e8 	.word	0x200000e8
 8002a24:	20000114 	.word	0x20000114
 8002a28:	200002d4 	.word	0x200002d4
 8002a2c:	2aaaaaab 	.word	0x2aaaaaab
            MCI_ExecSpeedRamp(pMCIN, (int16_t)((rpm * SPEED_UNIT) / U_RPM), duration);
 8002a30:	f8d2 1002 	ldr.w	r1, [r2, #2]
 8002a34:	4b37      	ldr	r3, [pc, #220]	; (8002b14 <RI_SetRegisterMotor1+0x444>)
 8002a36:	88d2      	ldrh	r2, [r2, #6]
 8002a38:	fb83 0301 	smull	r0, r3, r3, r1
 8002a3c:	eba3 71e1 	sub.w	r1, r3, r1, asr #31
 8002a40:	4835      	ldr	r0, [pc, #212]	; (8002b18 <RI_SetRegisterMotor1+0x448>)
 8002a42:	b209      	sxth	r1, r1
 8002a44:	f7fe fbbe 	bl	80011c4 <MCI_ExecSpeedRamp>
  uint8_t retVal = MCP_CMD_OK;
 8002a48:	2000      	movs	r0, #0
            break;
 8002a4a:	e660      	b.n	800270e <RI_SetRegisterMotor1+0x3e>
            currComp.q = *((int16_t *) rawData); //cstat !MISRAC2012-Rule-11.3
 8002a4c:	f8d2 1002 	ldr.w	r1, [r2, #2]
            MCI_SetCurrentReferences(pMCIN, currComp);
 8002a50:	4831      	ldr	r0, [pc, #196]	; (8002b18 <RI_SetRegisterMotor1+0x448>)
            currComp.q = *((int16_t *) rawData); //cstat !MISRAC2012-Rule-11.3
 8002a52:	9103      	str	r1, [sp, #12]
            MCI_SetCurrentReferences(pMCIN, currComp);
 8002a54:	f7fe fbca 	bl	80011ec <MCI_SetCurrentReferences>
  uint8_t retVal = MCP_CMD_OK;
 8002a58:	2000      	movs	r0, #0
 8002a5a:	e658      	b.n	800270e <RI_SetRegisterMotor1+0x3e>
            MCI_ExecSpeedRamp(pMCIN, MCI_GetMecSpeedRefUnit(pMCIN), 0);
 8002a5c:	482e      	ldr	r0, [pc, #184]	; (8002b18 <RI_SetRegisterMotor1+0x448>)
 8002a5e:	f7fe fc9f 	bl	80013a0 <MCI_GetMecSpeedRefUnit>
 8002a62:	2200      	movs	r2, #0
 8002a64:	4601      	mov	r1, r0
 8002a66:	482c      	ldr	r0, [pc, #176]	; (8002b18 <RI_SetRegisterMotor1+0x448>)
 8002a68:	f7fe fbac 	bl	80011c4 <MCI_ExecSpeedRamp>
  uint8_t retVal = MCP_CMD_OK;
 8002a6c:	2000      	movs	r0, #0
 8002a6e:	e7a5      	b.n	80029bc <RI_SetRegisterMotor1+0x2ec>
          PID_SetKPDivisorPOW2(&PIDIqHandle_M1, regdata16);
 8002a70:	482a      	ldr	r0, [pc, #168]	; (8002b1c <RI_SetRegisterMotor1+0x44c>)
 8002a72:	f003 fae9 	bl	8006048 <PID_SetKPDivisorPOW2>
  uint8_t retVal = MCP_CMD_OK;
 8002a76:	2000      	movs	r0, #0
          break;
 8002a78:	e684      	b.n	8002784 <RI_SetRegisterMotor1+0xb4>
          PID_SetKPDivisorPOW2(&PIDIdHandle_M1, regdata16);
 8002a7a:	4829      	ldr	r0, [pc, #164]	; (8002b20 <RI_SetRegisterMotor1+0x450>)
 8002a7c:	f003 fae4 	bl	8006048 <PID_SetKPDivisorPOW2>
  uint8_t retVal = MCP_CMD_OK;
 8002a80:	2000      	movs	r0, #0
          break;
 8002a82:	e67f      	b.n	8002784 <RI_SetRegisterMotor1+0xb4>
          PID_SetKP(&PIDIqHandle_M1, (int16_t)regdata16);
 8002a84:	4825      	ldr	r0, [pc, #148]	; (8002b1c <RI_SetRegisterMotor1+0x44c>)
 8002a86:	b209      	sxth	r1, r1
 8002a88:	f003 face 	bl	8006028 <PID_SetKP>
  uint8_t retVal = MCP_CMD_OK;
 8002a8c:	2000      	movs	r0, #0
          break;
 8002a8e:	e679      	b.n	8002784 <RI_SetRegisterMotor1+0xb4>
          PID_SetKP(&PIDIdHandle_M1, (int16_t)regdata16);
 8002a90:	4823      	ldr	r0, [pc, #140]	; (8002b20 <RI_SetRegisterMotor1+0x450>)
 8002a92:	b209      	sxth	r1, r1
 8002a94:	f003 fac8 	bl	8006028 <PID_SetKP>
  uint8_t retVal = MCP_CMD_OK;
 8002a98:	2000      	movs	r0, #0
          break;
 8002a9a:	e673      	b.n	8002784 <RI_SetRegisterMotor1+0xb4>
          PID_SetKIDivisorPOW2(&PIDIdHandle_M1, regdata16);
 8002a9c:	4820      	ldr	r0, [pc, #128]	; (8002b20 <RI_SetRegisterMotor1+0x450>)
 8002a9e:	f003 fadf 	bl	8006060 <PID_SetKIDivisorPOW2>
  uint8_t retVal = MCP_CMD_OK;
 8002aa2:	2000      	movs	r0, #0
          break;
 8002aa4:	e66e      	b.n	8002784 <RI_SetRegisterMotor1+0xb4>
          PID_SetKIDivisorPOW2(&PIDSpeedHandle_M1, regdata16);
 8002aa6:	481f      	ldr	r0, [pc, #124]	; (8002b24 <RI_SetRegisterMotor1+0x454>)
 8002aa8:	f003 fada 	bl	8006060 <PID_SetKIDivisorPOW2>
  uint8_t retVal = MCP_CMD_OK;
 8002aac:	2000      	movs	r0, #0
          break;
 8002aae:	e669      	b.n	8002784 <RI_SetRegisterMotor1+0xb4>
          PID_SetKPDivisorPOW2(&PIDSpeedHandle_M1, regdata16);
 8002ab0:	481c      	ldr	r0, [pc, #112]	; (8002b24 <RI_SetRegisterMotor1+0x454>)
 8002ab2:	f003 fac9 	bl	8006048 <PID_SetKPDivisorPOW2>
  uint8_t retVal = MCP_CMD_OK;
 8002ab6:	2000      	movs	r0, #0
          break;
 8002ab8:	e664      	b.n	8002784 <RI_SetRegisterMotor1+0xb4>
          PID_SetKD(&PIDSpeedHandle_M1, (int16_t)regdata16);
 8002aba:	481a      	ldr	r0, [pc, #104]	; (8002b24 <RI_SetRegisterMotor1+0x454>)
 8002abc:	b209      	sxth	r1, r1
 8002abe:	f003 fae3 	bl	8006088 <PID_SetKD>
  uint8_t retVal = MCP_CMD_OK;
 8002ac2:	2000      	movs	r0, #0
          break;
 8002ac4:	e65e      	b.n	8002784 <RI_SetRegisterMotor1+0xb4>
          PID_SetKP(&PIDSpeedHandle_M1, (int16_t)regdata16);
 8002ac6:	4817      	ldr	r0, [pc, #92]	; (8002b24 <RI_SetRegisterMotor1+0x454>)
 8002ac8:	b209      	sxth	r1, r1
 8002aca:	f003 faad 	bl	8006028 <PID_SetKP>
  uint8_t retVal = MCP_CMD_OK;
 8002ace:	2000      	movs	r0, #0
          break;
 8002ad0:	e658      	b.n	8002784 <RI_SetRegisterMotor1+0xb4>
          PID_SetKDDivisorPOW2(&PIDIqHandle_M1, regdata16);
 8002ad2:	4812      	ldr	r0, [pc, #72]	; (8002b1c <RI_SetRegisterMotor1+0x44c>)
 8002ad4:	f003 fae0 	bl	8006098 <PID_SetKDDivisorPOW2>
  uint8_t retVal = MCP_CMD_OK;
 8002ad8:	2000      	movs	r0, #0
          break;
 8002ada:	e653      	b.n	8002784 <RI_SetRegisterMotor1+0xb4>
          PID_SetKD(&PIDIdHandle_M1, (int16_t)regdata16);
 8002adc:	4810      	ldr	r0, [pc, #64]	; (8002b20 <RI_SetRegisterMotor1+0x450>)
 8002ade:	b209      	sxth	r1, r1
 8002ae0:	f003 fad2 	bl	8006088 <PID_SetKD>
  uint8_t retVal = MCP_CMD_OK;
 8002ae4:	2000      	movs	r0, #0
          break;
 8002ae6:	e64d      	b.n	8002784 <RI_SetRegisterMotor1+0xb4>
          PID_SetKD(&PIDIqHandle_M1, (int16_t)regdata16);
 8002ae8:	480c      	ldr	r0, [pc, #48]	; (8002b1c <RI_SetRegisterMotor1+0x44c>)
 8002aea:	b209      	sxth	r1, r1
 8002aec:	f003 facc 	bl	8006088 <PID_SetKD>
  uint8_t retVal = MCP_CMD_OK;
 8002af0:	2000      	movs	r0, #0
          break;
 8002af2:	e647      	b.n	8002784 <RI_SetRegisterMotor1+0xb4>
          currComp = MCI_GetIqdref(pMCIN);
 8002af4:	4808      	ldr	r0, [pc, #32]	; (8002b18 <RI_SetRegisterMotor1+0x448>)
 8002af6:	9101      	str	r1, [sp, #4]
 8002af8:	f7fe fc80 	bl	80013fc <MCI_GetIqdref>
          currComp.d = (int16_t)regdata16;
 8002afc:	9901      	ldr	r1, [sp, #4]
          currComp = MCI_GetIqdref(pMCIN);
 8002afe:	9003      	str	r0, [sp, #12]
          currComp.d = (int16_t)regdata16;
 8002b00:	f8ad 100e 	strh.w	r1, [sp, #14]
          MCI_SetCurrentReferences(pMCIN,currComp);
 8002b04:	4804      	ldr	r0, [pc, #16]	; (8002b18 <RI_SetRegisterMotor1+0x448>)
 8002b06:	9903      	ldr	r1, [sp, #12]
 8002b08:	f7fe fb70 	bl	80011ec <MCI_SetCurrentReferences>
  uint8_t retVal = MCP_CMD_OK;
 8002b0c:	2000      	movs	r0, #0
 8002b0e:	e639      	b.n	8002784 <RI_SetRegisterMotor1+0xb4>
          retVal = MCP_ERROR_UNKNOWN_REG;
 8002b10:	2005      	movs	r0, #5
 8002b12:	e637      	b.n	8002784 <RI_SetRegisterMotor1+0xb4>
 8002b14:	2aaaaaab 	.word	0x2aaaaaab
 8002b18:	200006c0 	.word	0x200006c0
 8002b1c:	200000e8 	.word	0x200000e8
 8002b20:	200000bc 	.word	0x200000bc
 8002b24:	20000114 	.word	0x20000114

08002b28 <RI_GetRegisterGlobal>:
uint8_t RI_GetRegisterGlobal(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace){
 8002b28:	b510      	push	{r4, lr}
    switch (typeID)
 8002b2a:	f1a1 0c08 	sub.w	ip, r1, #8
uint8_t RI_GetRegisterGlobal(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace){
 8002b2e:	f9bd e008 	ldrsh.w	lr, [sp, #8]
    switch (typeID)
 8002b32:	f1bc 0f20 	cmp.w	ip, #32
 8002b36:	d812      	bhi.n	8002b5e <RI_GetRegisterGlobal+0x36>
 8002b38:	e8df f00c 	tbb	[pc, ip]
 8002b3c:	1111111b 	.word	0x1111111b
 8002b40:	11111111 	.word	0x11111111
 8002b44:	11111129 	.word	0x11111129
 8002b48:	11111111 	.word	0x11111111
 8002b4c:	11111122 	.word	0x11111122
 8002b50:	11111111 	.word	0x11111111
 8002b54:	11111137 	.word	0x11111137
 8002b58:	11111111 	.word	0x11111111
 8002b5c:	13          	.byte	0x13
 8002b5d:	00          	.byte	0x00
 8002b5e:	2007      	movs	r0, #7
}
 8002b60:	bd10      	pop	{r4, pc}
        switch (regID)
 8002b62:	2828      	cmp	r0, #40	; 0x28
 8002b64:	d02d      	beq.n	8002bc2 <RI_GetRegisterGlobal+0x9a>
        *size = (*rawSize) + 2U;
 8002b66:	8812      	ldrh	r2, [r2, #0]
 8002b68:	3202      	adds	r2, #2
            retVal = MCP_ERROR_UNKNOWN_REG;
 8002b6a:	2005      	movs	r0, #5
        *size = (*rawSize) + 2U;
 8002b6c:	b292      	uxth	r2, r2
 8002b6e:	801a      	strh	r2, [r3, #0]
}
 8002b70:	bd10      	pop	{r4, pc}
        if (freeSpace > 0)
 8002b72:	f1be 0f00 	cmp.w	lr, #0
 8002b76:	dd22      	ble.n	8002bbe <RI_GetRegisterGlobal+0x96>
          *size = 1;
 8002b78:	2201      	movs	r2, #1
 8002b7a:	801a      	strh	r2, [r3, #0]
              retVal = MCP_ERROR_UNKNOWN_REG;
 8002b7c:	2005      	movs	r0, #5
}
 8002b7e:	bd10      	pop	{r4, pc}
        if (freeSpace >= 4)
 8002b80:	f1be 0f03 	cmp.w	lr, #3
 8002b84:	dd19      	ble.n	8002bba <RI_GetRegisterGlobal+0x92>
          *size = 4;
 8002b86:	2204      	movs	r2, #4
 8002b88:	801a      	strh	r2, [r3, #0]
              retVal = MCP_ERROR_UNKNOWN_REG;
 8002b8a:	2005      	movs	r0, #5
}
 8002b8c:	bd10      	pop	{r4, pc}
        if (freeSpace >= 2)
 8002b8e:	f1be 0f01 	cmp.w	lr, #1
 8002b92:	dd12      	ble.n	8002bba <RI_GetRegisterGlobal+0x92>
          switch (regID)
 8002b94:	f5b0 6f65 	cmp.w	r0, #3664	; 0xe50
 8002b98:	d05b      	beq.n	8002c52 <RI_GetRegisterGlobal+0x12a>
    uint8_t retVal = MCP_CMD_OK;
 8002b9a:	f5b0 6f69 	cmp.w	r0, #3728	; 0xe90
 8002b9e:	bf14      	ite	ne
 8002ba0:	2005      	movne	r0, #5
 8002ba2:	2000      	moveq	r0, #0
          *size = 2;
 8002ba4:	2202      	movs	r2, #2
 8002ba6:	801a      	strh	r2, [r3, #0]
}
 8002ba8:	bd10      	pop	{r4, pc}
        switch (regID)
 8002baa:	2820      	cmp	r0, #32
 8002bac:	d02d      	beq.n	8002c0a <RI_GetRegisterGlobal+0xe2>
 8002bae:	2860      	cmp	r0, #96	; 0x60
 8002bb0:	d011      	beq.n	8002bd6 <RI_GetRegisterGlobal+0xae>
            *size= 0 ; /* */
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	801a      	strh	r2, [r3, #0]
            retVal = MCP_ERROR_UNKNOWN_REG;
 8002bb6:	2005      	movs	r0, #5
}
 8002bb8:	bd10      	pop	{r4, pc}
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002bba:	2008      	movs	r0, #8
}
 8002bbc:	bd10      	pop	{r4, pc}
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002bbe:	4608      	mov	r0, r1
}
 8002bc0:	bd10      	pop	{r4, pc}
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002bc2:	fa1f fe8e 	uxth.w	lr, lr
            *rawSize = (uint16_t)sizeof(GlobalConfig_reg_t);
 8002bc6:	210a      	movs	r1, #10
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002bc8:	f1be 0f0b 	cmp.w	lr, #11
            *rawSize = (uint16_t)sizeof(GlobalConfig_reg_t);
 8002bcc:	8011      	strh	r1, [r2, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002bce:	d834      	bhi.n	8002c3a <RI_GetRegisterGlobal+0x112>
 8002bd0:	220c      	movs	r2, #12
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002bd2:	2008      	movs	r0, #8
 8002bd4:	e7cb      	b.n	8002b6e <RI_GetRegisterGlobal+0x46>
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002bd6:	4c20      	ldr	r4, [pc, #128]	; (8002c58 <RI_GetRegisterGlobal+0x130>)
 8002bd8:	f994 0000 	ldrsb.w	r0, [r4]
  *size= 1U ; /* /0 is the min String size */
 8002bdc:	2101      	movs	r1, #1
 8002bde:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002be0:	b180      	cbz	r0, 8002c04 <RI_GetRegisterGlobal+0xdc>
 8002be2:	fa1f fe8e 	uxth.w	lr, lr
  const char_t *tempsrcString = srcString;
 8002be6:	46a4      	mov	ip, r4
 8002be8:	e008      	b.n	8002bfc <RI_GetRegisterGlobal+0xd4>
    *tempdestString = *tempsrcString;
 8002bea:	f802 0b01 	strb.w	r0, [r2], #1
    *size = *size + 1U;
 8002bee:	8819      	ldrh	r1, [r3, #0]
 8002bf0:	3101      	adds	r1, #1
 8002bf2:	b289      	uxth	r1, r1
 8002bf4:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002bf6:	f91c 0f01 	ldrsb.w	r0, [ip, #1]!
 8002bfa:	b118      	cbz	r0, 8002c04 <RI_GetRegisterGlobal+0xdc>
 8002bfc:	458e      	cmp	lr, r1
 8002bfe:	d8f4      	bhi.n	8002bea <RI_GetRegisterGlobal+0xc2>
    retVal = MCP_ERROR_STRING_FORMAT;
 8002c00:	2006      	movs	r0, #6
}
 8002c02:	bd10      	pop	{r4, pc}
    *tempdestString = (int8_t)0;
 8002c04:	2000      	movs	r0, #0
 8002c06:	7010      	strb	r0, [r2, #0]
}
 8002c08:	bd10      	pop	{r4, pc}
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002c0a:	4c14      	ldr	r4, [pc, #80]	; (8002c5c <RI_GetRegisterGlobal+0x134>)
 8002c0c:	f994 0000 	ldrsb.w	r0, [r4]
  *size= 1U ; /* /0 is the min String size */
 8002c10:	2101      	movs	r1, #1
 8002c12:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002c14:	2800      	cmp	r0, #0
 8002c16:	d0f5      	beq.n	8002c04 <RI_GetRegisterGlobal+0xdc>
 8002c18:	fa1f fe8e 	uxth.w	lr, lr
  const char_t *tempsrcString = srcString;
 8002c1c:	46a4      	mov	ip, r4
 8002c1e:	e009      	b.n	8002c34 <RI_GetRegisterGlobal+0x10c>
    *tempdestString = *tempsrcString;
 8002c20:	f802 0b01 	strb.w	r0, [r2], #1
    *size = *size + 1U;
 8002c24:	8819      	ldrh	r1, [r3, #0]
 8002c26:	3101      	adds	r1, #1
 8002c28:	b289      	uxth	r1, r1
 8002c2a:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002c2c:	f91c 0f01 	ldrsb.w	r0, [ip, #1]!
 8002c30:	2800      	cmp	r0, #0
 8002c32:	d0e7      	beq.n	8002c04 <RI_GetRegisterGlobal+0xdc>
 8002c34:	458e      	cmp	lr, r1
 8002c36:	d8f3      	bhi.n	8002c20 <RI_GetRegisterGlobal+0xf8>
 8002c38:	e7e2      	b.n	8002c00 <RI_GetRegisterGlobal+0xd8>
              (void)memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t));
 8002c3a:	4909      	ldr	r1, [pc, #36]	; (8002c60 <RI_GetRegisterGlobal+0x138>)
 8002c3c:	6848      	ldr	r0, [r1, #4]
 8002c3e:	680c      	ldr	r4, [r1, #0]
 8002c40:	8909      	ldrh	r1, [r1, #8]
 8002c42:	f8c2 0006 	str.w	r0, [r2, #6]
 8002c46:	f8c2 4002 	str.w	r4, [r2, #2]
 8002c4a:	8151      	strh	r1, [r2, #10]
    uint8_t retVal = MCP_CMD_OK;
 8002c4c:	2000      	movs	r0, #0
              (void)memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t));
 8002c4e:	220c      	movs	r2, #12
 8002c50:	e78d      	b.n	8002b6e <RI_GetRegisterGlobal+0x46>
    uint8_t retVal = MCP_CMD_OK;
 8002c52:	2000      	movs	r0, #0
 8002c54:	e7a6      	b.n	8002ba4 <RI_GetRegisterGlobal+0x7c>
 8002c56:	bf00      	nop
 8002c58:	08007210 	.word	0x08007210
 8002c5c:	08007220 	.word	0x08007220
 8002c60:	080072a4 	.word	0x080072a4

08002c64 <RI_GetRegisterMotor1>:
  uint8_t RI_GetRegisterMotor1(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace) {
 8002c64:	b530      	push	{r4, r5, lr}
 8002c66:	b091      	sub	sp, #68	; 0x44
 8002c68:	461d      	mov	r5, r3
    switch (typeID)
 8002c6a:	f1a1 0308 	sub.w	r3, r1, #8
  uint8_t RI_GetRegisterMotor1(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace) {
 8002c6e:	f9bd c050 	ldrsh.w	ip, [sp, #80]	; 0x50
 8002c72:	4614      	mov	r4, r2
    switch (typeID)
 8002c74:	2b20      	cmp	r3, #32
 8002c76:	d812      	bhi.n	8002c9e <RI_GetRegisterMotor1+0x3a>
 8002c78:	e8df f003 	tbb	[pc, r3]
 8002c7c:	1111112d 	.word	0x1111112d
 8002c80:	11111111 	.word	0x11111111
 8002c84:	11111140 	.word	0x11111140
 8002c88:	11111111 	.word	0x11111111
 8002c8c:	11111167 	.word	0x11111167
 8002c90:	11111111 	.word	0x11111111
 8002c94:	11111182 	.word	0x11111182
 8002c98:	11111111 	.word	0x11111111
 8002c9c:	14          	.byte	0x14
 8002c9d:	00          	.byte	0x00
 8002c9e:	2007      	movs	r0, #7
  }
 8002ca0:	b011      	add	sp, #68	; 0x44
 8002ca2:	bd30      	pop	{r4, r5, pc}
        rawData++;
 8002ca4:	f5b0 7f94 	cmp.w	r0, #296	; 0x128
 8002ca8:	f104 0302 	add.w	r3, r4, #2
        switch (regID)
 8002cac:	f000 8264 	beq.w	8003178 <RI_GetRegisterMotor1+0x514>
 8002cb0:	d87e      	bhi.n	8002db0 <RI_GetRegisterMotor1+0x14c>
 8002cb2:	28a8      	cmp	r0, #168	; 0xa8
 8002cb4:	f000 8256 	beq.w	8003164 <RI_GetRegisterMotor1+0x500>
 8002cb8:	28e8      	cmp	r0, #232	; 0xe8
 8002cba:	d16b      	bne.n	8002d94 <RI_GetRegisterMotor1+0x130>
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002cbc:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = (uint16_t)sizeof(FOCFwConfig_reg_t);
 8002cc0:	220e      	movs	r2, #14
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002cc2:	f1bc 0f0f 	cmp.w	ip, #15
            *rawSize = (uint16_t)sizeof(FOCFwConfig_reg_t);
 8002cc6:	8022      	strh	r2, [r4, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002cc8:	f200 81f4 	bhi.w	80030b4 <RI_GetRegisterMotor1+0x450>
 8002ccc:	2310      	movs	r3, #16
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002cce:	2008      	movs	r0, #8
        *size = (*rawSize) + 2U;
 8002cd0:	802b      	strh	r3, [r5, #0]
  }
 8002cd2:	b011      	add	sp, #68	; 0x44
 8002cd4:	bd30      	pop	{r4, r5, pc}
        if (freeSpace > 0)
 8002cd6:	f1bc 0f00 	cmp.w	ip, #0
 8002cda:	f340 8214 	ble.w	8003106 <RI_GetRegisterMotor1+0x4a2>
          switch (regID)
 8002cde:	2848      	cmp	r0, #72	; 0x48
 8002ce0:	f000 8213 	beq.w	800310a <RI_GetRegisterMotor1+0x4a6>
 8002ce4:	2888      	cmp	r0, #136	; 0x88
 8002ce6:	f040 81ad 	bne.w	8003044 <RI_GetRegisterMotor1+0x3e0>
              *data = (uint8_t)MCI_GetControlMode(pMCIN);
 8002cea:	48b0      	ldr	r0, [pc, #704]	; (8002fac <RI_GetRegisterMotor1+0x348>)
 8002cec:	f7fe fb3e 	bl	800136c <MCI_GetControlMode>
 8002cf0:	7020      	strb	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002cf2:	2000      	movs	r0, #0
          *size = 1;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	802b      	strh	r3, [r5, #0]
  }
 8002cf8:	b011      	add	sp, #68	; 0x44
 8002cfa:	bd30      	pop	{r4, r5, pc}
        if (freeSpace >= 2)
 8002cfc:	f1bc 0f01 	cmp.w	ip, #1
 8002d00:	f340 819d 	ble.w	800303e <RI_GetRegisterMotor1+0x3da>
          switch (regID)
 8002d04:	f5b0 6f15 	cmp.w	r0, #2384	; 0x950
 8002d08:	f000 82b1 	beq.w	800326e <RI_GetRegisterMotor1+0x60a>
 8002d0c:	f200 80bf 	bhi.w	8002e8e <RI_GetRegisterMotor1+0x22a>
 8002d10:	f5b0 7f44 	cmp.w	r0, #784	; 0x310
 8002d14:	f000 82a5 	beq.w	8003262 <RI_GetRegisterMotor1+0x5fe>
 8002d18:	f240 8094 	bls.w	8002e44 <RI_GetRegisterMotor1+0x1e0>
 8002d1c:	f5b0 6f05 	cmp.w	r0, #2128	; 0x850
 8002d20:	f000 8299 	beq.w	8003256 <RI_GetRegisterMotor1+0x5f2>
 8002d24:	d97d      	bls.n	8002e22 <RI_GetRegisterMotor1+0x1be>
 8002d26:	f5b0 6f0d 	cmp.w	r0, #2256	; 0x8d0
 8002d2a:	f000 828e 	beq.w	800324a <RI_GetRegisterMotor1+0x5e6>
 8002d2e:	f5b0 6f11 	cmp.w	r0, #2320	; 0x910
 8002d32:	d16a      	bne.n	8002e0a <RI_GetRegisterMotor1+0x1a6>
              *regdata16 = MCI_GetIqd(pMCIN).d;
 8002d34:	489d      	ldr	r0, [pc, #628]	; (8002fac <RI_GetRegisterMotor1+0x348>)
 8002d36:	f7fe fb53 	bl	80013e0 <MCI_GetIqd>
 8002d3a:	f3c0 400f 	ubfx	r0, r0, #16, #16
 8002d3e:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002d40:	2000      	movs	r0, #0
          *size = 2;
 8002d42:	2302      	movs	r3, #2
 8002d44:	802b      	strh	r3, [r5, #0]
  }
 8002d46:	b011      	add	sp, #68	; 0x44
 8002d48:	bd30      	pop	{r4, r5, pc}
        if (freeSpace >= 4)
 8002d4a:	f1bc 0f03 	cmp.w	ip, #3
 8002d4e:	f340 8176 	ble.w	800303e <RI_GetRegisterMotor1+0x3da>
          switch (regID)
 8002d52:	2898      	cmp	r0, #152	; 0x98
 8002d54:	f000 81e9 	beq.w	800312a <RI_GetRegisterMotor1+0x4c6>
 8002d58:	f200 8163 	bhi.w	8003022 <RI_GetRegisterMotor1+0x3be>
 8002d5c:	2818      	cmp	r0, #24
 8002d5e:	f000 81de 	beq.w	800311e <RI_GetRegisterMotor1+0x4ba>
 8002d62:	2858      	cmp	r0, #88	; 0x58
 8002d64:	f040 81d7 	bne.w	8003116 <RI_GetRegisterMotor1+0x4b2>
              *regdata32 = (((int32_t)MCI_GetAvrgMecSpeedUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 8002d68:	4890      	ldr	r0, [pc, #576]	; (8002fac <RI_GetRegisterMotor1+0x348>)
 8002d6a:	f7fe fb11 	bl	8001390 <MCI_GetAvrgMecSpeedUnit>
 8002d6e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002d72:	0040      	lsls	r0, r0, #1
 8002d74:	6020      	str	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002d76:	2000      	movs	r0, #0
          *size = 4;
 8002d78:	2304      	movs	r3, #4
 8002d7a:	802b      	strh	r3, [r5, #0]
  }
 8002d7c:	b011      	add	sp, #68	; 0x44
 8002d7e:	bd30      	pop	{r4, r5, pc}
        switch (regID)
 8002d80:	28a0      	cmp	r0, #160	; 0xa0
 8002d82:	f000 817f 	beq.w	8003084 <RI_GetRegisterMotor1+0x420>
 8002d86:	28e0      	cmp	r0, #224	; 0xe0
 8002d88:	f000 8160 	beq.w	800304c <RI_GetRegisterMotor1+0x3e8>
            *size= 0 ; /* */
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	802b      	strh	r3, [r5, #0]
            retVal = MCP_ERROR_UNKNOWN_REG;
 8002d90:	2005      	movs	r0, #5
            break;
 8002d92:	e785      	b.n	8002ca0 <RI_GetRegisterMotor1+0x3c>
 8002d94:	2868      	cmp	r0, #104	; 0x68
 8002d96:	f040 81e0 	bne.w	800315a <RI_GetRegisterMotor1+0x4f6>
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002d9a:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = (uint16_t)sizeof(MotorConfig_reg_t);
 8002d9e:	223c      	movs	r2, #60	; 0x3c
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002da0:	f1bc 0f3d 	cmp.w	ip, #61	; 0x3d
            *rawSize = (uint16_t)sizeof(MotorConfig_reg_t);
 8002da4:	8022      	strh	r2, [r4, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002da6:	f200 8192 	bhi.w	80030ce <RI_GetRegisterMotor1+0x46a>
 8002daa:	233e      	movs	r3, #62	; 0x3e
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002dac:	2008      	movs	r0, #8
 8002dae:	e78f      	b.n	8002cd0 <RI_GetRegisterMotor1+0x6c>
 8002db0:	f5b0 7ff4 	cmp.w	r0, #488	; 0x1e8
 8002db4:	f000 81c2 	beq.w	800313c <RI_GetRegisterMotor1+0x4d8>
 8002db8:	f5b0 7f5a 	cmp.w	r0, #872	; 0x368
 8002dbc:	d110      	bne.n	8002de0 <RI_GetRegisterMotor1+0x17c>
            *rawSize = 4;
 8002dbe:	2304      	movs	r3, #4
 8002dc0:	8023      	strh	r3, [r4, #0]
            *iqref = (uint16_t)MCI_GetIqdref(pMCIN).q;
 8002dc2:	487a      	ldr	r0, [pc, #488]	; (8002fac <RI_GetRegisterMotor1+0x348>)
 8002dc4:	f7fe fb1a 	bl	80013fc <MCI_GetIqdref>
 8002dc8:	8060      	strh	r0, [r4, #2]
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 8002dca:	4878      	ldr	r0, [pc, #480]	; (8002fac <RI_GetRegisterMotor1+0x348>)
 8002dcc:	f7fe fb16 	bl	80013fc <MCI_GetIqdref>
        *size = (*rawSize) + 2U;
 8002dd0:	8823      	ldrh	r3, [r4, #0]
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 8002dd2:	f3c0 400f 	ubfx	r0, r0, #16, #16
        *size = (*rawSize) + 2U;
 8002dd6:	3302      	adds	r3, #2
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 8002dd8:	80a0      	strh	r0, [r4, #4]
        *size = (*rawSize) + 2U;
 8002dda:	b29b      	uxth	r3, r3
    uint8_t retVal = MCP_CMD_OK;
 8002ddc:	2000      	movs	r0, #0
            break;
 8002dde:	e777      	b.n	8002cd0 <RI_GetRegisterMotor1+0x6c>
 8002de0:	f5b0 7fd4 	cmp.w	r0, #424	; 0x1a8
 8002de4:	f040 81b9 	bne.w	800315a <RI_GetRegisterMotor1+0x4f6>
            *rpm = (((int32_t)MCI_GetLastRampFinalSpeed(pMCIN) * U_RPM) / (int32_t)SPEED_UNIT);
 8002de8:	4870      	ldr	r0, [pc, #448]	; (8002fac <RI_GetRegisterMotor1+0x348>)
 8002dea:	f7fe fac3 	bl	8001374 <MCI_GetLastRampFinalSpeed>
 8002dee:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002df2:	0043      	lsls	r3, r0, #1
 8002df4:	f8c4 3002 	str.w	r3, [r4, #2]
            *duration = MCI_GetLastRampFinalDuration(pMCIN);
 8002df8:	486c      	ldr	r0, [pc, #432]	; (8002fac <RI_GetRegisterMotor1+0x348>)
 8002dfa:	f7fe fac3 	bl	8001384 <MCI_GetLastRampFinalDuration>
            *rawSize = 6;
 8002dfe:	2306      	movs	r3, #6
            *duration = MCI_GetLastRampFinalDuration(pMCIN);
 8002e00:	80e0      	strh	r0, [r4, #6]
            *rawSize = 6;
 8002e02:	8023      	strh	r3, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002e04:	2000      	movs	r0, #0
            break;
 8002e06:	2308      	movs	r3, #8
 8002e08:	e762      	b.n	8002cd0 <RI_GetRegisterMotor1+0x6c>
 8002e0a:	f5b0 6f09 	cmp.w	r0, #2192	; 0x890
 8002e0e:	f040 8184 	bne.w	800311a <RI_GetRegisterMotor1+0x4b6>
              *regdata16 = MCI_GetIalphabeta(pMCIN).beta;
 8002e12:	4866      	ldr	r0, [pc, #408]	; (8002fac <RI_GetRegisterMotor1+0x348>)
 8002e14:	f7fe fad6 	bl	80013c4 <MCI_GetIalphabeta>
 8002e18:	f3c0 400f 	ubfx	r0, r0, #16, #16
 8002e1c:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002e1e:	2000      	movs	r0, #0
              break;
 8002e20:	e78f      	b.n	8002d42 <RI_GetRegisterMotor1+0xde>
 8002e22:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8002e26:	f000 81ca 	beq.w	80031be <RI_GetRegisterMotor1+0x55a>
 8002e2a:	d91d      	bls.n	8002e68 <RI_GetRegisterMotor1+0x204>
 8002e2c:	f5b0 6f01 	cmp.w	r0, #2064	; 0x810
 8002e30:	f040 8173 	bne.w	800311a <RI_GetRegisterMotor1+0x4b6>
              *regdata16 = MCI_GetIab(pMCIN).b;
 8002e34:	485d      	ldr	r0, [pc, #372]	; (8002fac <RI_GetRegisterMotor1+0x348>)
 8002e36:	f7fe fab7 	bl	80013a8 <MCI_GetIab>
 8002e3a:	f3c0 400f 	ubfx	r0, r0, #16, #16
 8002e3e:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002e40:	2000      	movs	r0, #0
              break;
 8002e42:	e77e      	b.n	8002d42 <RI_GetRegisterMotor1+0xde>
 8002e44:	f5b0 7fe8 	cmp.w	r0, #464	; 0x1d0
 8002e48:	f000 81f9 	beq.w	800323e <RI_GetRegisterMotor1+0x5da>
 8002e4c:	d93a      	bls.n	8002ec4 <RI_GetRegisterMotor1+0x260>
 8002e4e:	f5b0 7f24 	cmp.w	r0, #656	; 0x290
 8002e52:	f000 81ee 	beq.w	8003232 <RI_GetRegisterMotor1+0x5ce>
 8002e56:	f5b0 7f34 	cmp.w	r0, #720	; 0x2d0
 8002e5a:	d10e      	bne.n	8002e7a <RI_GetRegisterMotor1+0x216>
              *regdata16 = PID_GetKI(&PIDIdHandle_M1);
 8002e5c:	4854      	ldr	r0, [pc, #336]	; (8002fb0 <RI_GetRegisterMotor1+0x34c>)
 8002e5e:	f003 f8eb 	bl	8006038 <PID_GetKI>
 8002e62:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002e64:	2000      	movs	r0, #0
              break;
 8002e66:	e76c      	b.n	8002d42 <RI_GetRegisterMotor1+0xde>
 8002e68:	f5b0 6fb2 	cmp.w	r0, #1424	; 0x590
 8002e6c:	d139      	bne.n	8002ee2 <RI_GetRegisterMotor1+0x27e>
              *regdataU16 = VBS_GetAvBusVoltage_V(BusVoltageSensor);
 8002e6e:	4851      	ldr	r0, [pc, #324]	; (8002fb4 <RI_GetRegisterMotor1+0x350>)
 8002e70:	f002 fd76 	bl	8005960 <VBS_GetAvBusVoltage_V>
 8002e74:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002e76:	2000      	movs	r0, #0
              break;
 8002e78:	e763      	b.n	8002d42 <RI_GetRegisterMotor1+0xde>
 8002e7a:	f5b0 7f04 	cmp.w	r0, #528	; 0x210
 8002e7e:	f040 814c 	bne.w	800311a <RI_GetRegisterMotor1+0x4b6>
              *regdata16 = PID_GetKD(&PIDIqHandle_M1);
 8002e82:	484d      	ldr	r0, [pc, #308]	; (8002fb8 <RI_GetRegisterMotor1+0x354>)
 8002e84:	f003 f902 	bl	800608c <PID_GetKD>
 8002e88:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002e8a:	2000      	movs	r0, #0
              break;
 8002e8c:	e759      	b.n	8002d42 <RI_GetRegisterMotor1+0xde>
 8002e8e:	f241 4350 	movw	r3, #5200	; 0x1450
 8002e92:	4298      	cmp	r0, r3
 8002e94:	f000 81c7 	beq.w	8003226 <RI_GetRegisterMotor1+0x5c2>
 8002e98:	d93e      	bls.n	8002f18 <RI_GetRegisterMotor1+0x2b4>
 8002e9a:	f241 5390 	movw	r3, #5520	; 0x1590
 8002e9e:	4298      	cmp	r0, r3
 8002ea0:	f000 81bb 	beq.w	800321a <RI_GetRegisterMotor1+0x5b6>
 8002ea4:	d927      	bls.n	8002ef6 <RI_GetRegisterMotor1+0x292>
 8002ea6:	f241 6310 	movw	r3, #5648	; 0x1610
 8002eaa:	4298      	cmp	r0, r3
 8002eac:	f000 81af 	beq.w	800320e <RI_GetRegisterMotor1+0x5aa>
 8002eb0:	f241 6350 	movw	r3, #5712	; 0x1650
 8002eb4:	4298      	cmp	r0, r3
 8002eb6:	d146      	bne.n	8002f46 <RI_GetRegisterMotor1+0x2e2>
              *regdataU16 = PID_GetKDDivisorPOW2(&PIDIqHandle_M1);
 8002eb8:	483f      	ldr	r0, [pc, #252]	; (8002fb8 <RI_GetRegisterMotor1+0x354>)
 8002eba:	f003 f8eb 	bl	8006094 <PID_GetKDDivisorPOW2>
 8002ebe:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002ec0:	2000      	movs	r0, #0
              break;
 8002ec2:	e73e      	b.n	8002d42 <RI_GetRegisterMotor1+0xde>
 8002ec4:	f5b0 7f88 	cmp.w	r0, #272	; 0x110
 8002ec8:	f000 819b 	beq.w	8003202 <RI_GetRegisterMotor1+0x59e>
 8002ecc:	d950      	bls.n	8002f70 <RI_GetRegisterMotor1+0x30c>
 8002ece:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
 8002ed2:	f040 8122 	bne.w	800311a <RI_GetRegisterMotor1+0x4b6>
              *regdata16 = PID_GetKP(&PIDIqHandle_M1);
 8002ed6:	4838      	ldr	r0, [pc, #224]	; (8002fb8 <RI_GetRegisterMotor1+0x354>)
 8002ed8:	f003 f8aa 	bl	8006030 <PID_GetKP>
 8002edc:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002ede:	2000      	movs	r0, #0
              break;
 8002ee0:	e72f      	b.n	8002d42 <RI_GetRegisterMotor1+0xde>
 8002ee2:	f5b0 6fba 	cmp.w	r0, #1488	; 0x5d0
 8002ee6:	f040 8118 	bne.w	800311a <RI_GetRegisterMotor1+0x4b6>
              *regdata16 = NTC_GetAvTemp_C(&TempSensor_M1);
 8002eea:	4834      	ldr	r0, [pc, #208]	; (8002fbc <RI_GetRegisterMotor1+0x358>)
 8002eec:	f003 f882 	bl	8005ff4 <NTC_GetAvTemp_C>
 8002ef0:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002ef2:	2000      	movs	r0, #0
              break;
 8002ef4:	e725      	b.n	8002d42 <RI_GetRegisterMotor1+0xde>
 8002ef6:	f241 5310 	movw	r3, #5392	; 0x1510
 8002efa:	4298      	cmp	r0, r3
 8002efc:	f000 817b 	beq.w	80031f6 <RI_GetRegisterMotor1+0x592>
 8002f00:	d92c      	bls.n	8002f5c <RI_GetRegisterMotor1+0x2f8>
 8002f02:	f241 5350 	movw	r3, #5456	; 0x1550
 8002f06:	4298      	cmp	r0, r3
 8002f08:	f040 8107 	bne.w	800311a <RI_GetRegisterMotor1+0x4b6>
              *regdataU16 = PID_GetKIDivisorPOW2(&PIDIdHandle_M1);
 8002f0c:	4828      	ldr	r0, [pc, #160]	; (8002fb0 <RI_GetRegisterMotor1+0x34c>)
 8002f0e:	f003 f8a1 	bl	8006054 <PID_GetKIDivisorPOW2>
 8002f12:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002f14:	2000      	movs	r0, #0
              break;
 8002f16:	e714      	b.n	8002d42 <RI_GetRegisterMotor1+0xde>
 8002f18:	f5b0 6f29 	cmp.w	r0, #2704	; 0xa90
 8002f1c:	f000 8163 	beq.w	80031e6 <RI_GetRegisterMotor1+0x582>
 8002f20:	d952      	bls.n	8002fc8 <RI_GetRegisterMotor1+0x364>
 8002f22:	f5b0 6f31 	cmp.w	r0, #2832	; 0xb10
 8002f26:	f000 8158 	beq.w	80031da <RI_GetRegisterMotor1+0x576>
 8002f2a:	d929      	bls.n	8002f80 <RI_GetRegisterMotor1+0x31c>
 8002f2c:	f5b0 6f65 	cmp.w	r0, #3664	; 0xe50
 8002f30:	f000 808a 	beq.w	8003048 <RI_GetRegisterMotor1+0x3e4>
    uint8_t retVal = MCP_CMD_OK;
 8002f34:	f5b0 6f69 	cmp.w	r0, #3728	; 0xe90
          *size = 2;
 8002f38:	f04f 0302 	mov.w	r3, #2
    uint8_t retVal = MCP_CMD_OK;
 8002f3c:	bf14      	ite	ne
 8002f3e:	2005      	movne	r0, #5
 8002f40:	2000      	moveq	r0, #0
          *size = 2;
 8002f42:	802b      	strh	r3, [r5, #0]
 8002f44:	e6ff      	b.n	8002d46 <RI_GetRegisterMotor1+0xe2>
 8002f46:	f241 53d0 	movw	r3, #5584	; 0x15d0
 8002f4a:	4298      	cmp	r0, r3
 8002f4c:	f040 80e5 	bne.w	800311a <RI_GetRegisterMotor1+0x4b6>
              *regdataU16 = PID_GetKPDivisorPOW2(&PIDIqHandle_M1);
 8002f50:	4819      	ldr	r0, [pc, #100]	; (8002fb8 <RI_GetRegisterMotor1+0x354>)
 8002f52:	f003 f877 	bl	8006044 <PID_GetKPDivisorPOW2>
 8002f56:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002f58:	2000      	movs	r0, #0
              break;
 8002f5a:	e6f2      	b.n	8002d42 <RI_GetRegisterMotor1+0xde>
 8002f5c:	f241 4390 	movw	r3, #5264	; 0x1490
 8002f60:	4298      	cmp	r0, r3
 8002f62:	d117      	bne.n	8002f94 <RI_GetRegisterMotor1+0x330>
              *regdataU16 = (uint16_t)PID_GetKIDivisorPOW2(&PIDSpeedHandle_M1);
 8002f64:	4816      	ldr	r0, [pc, #88]	; (8002fc0 <RI_GetRegisterMotor1+0x35c>)
 8002f66:	f003 f875 	bl	8006054 <PID_GetKIDivisorPOW2>
 8002f6a:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002f6c:	2000      	movs	r0, #0
              break;
 8002f6e:	e6e8      	b.n	8002d42 <RI_GetRegisterMotor1+0xde>
 8002f70:	2890      	cmp	r0, #144	; 0x90
 8002f72:	d138      	bne.n	8002fe6 <RI_GetRegisterMotor1+0x382>
              *regdata16 = PID_GetKP(&PIDSpeedHandle_M1);
 8002f74:	4812      	ldr	r0, [pc, #72]	; (8002fc0 <RI_GetRegisterMotor1+0x35c>)
 8002f76:	f003 f85b 	bl	8006030 <PID_GetKP>
 8002f7a:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002f7c:	2000      	movs	r0, #0
              break;
 8002f7e:	e6e0      	b.n	8002d42 <RI_GetRegisterMotor1+0xde>
 8002f80:	f5b0 6f2d 	cmp.w	r0, #2768	; 0xad0
 8002f84:	f040 80c9 	bne.w	800311a <RI_GetRegisterMotor1+0x4b6>
              *regdata16 = SPD_GetElAngle ((SpeednPosFdbk_Handle_t*) &ENCODER_M1); //cstat !MISRAC2012-Rule-11.3
 8002f88:	480e      	ldr	r0, [pc, #56]	; (8002fc4 <RI_GetRegisterMotor1+0x360>)
 8002f8a:	f003 ff13 	bl	8006db4 <SPD_GetElAngle>
 8002f8e:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002f90:	2000      	movs	r0, #0
              break;
 8002f92:	e6d6      	b.n	8002d42 <RI_GetRegisterMotor1+0xde>
 8002f94:	f241 43d0 	movw	r3, #5328	; 0x14d0
 8002f98:	4298      	cmp	r0, r3
 8002f9a:	f040 80be 	bne.w	800311a <RI_GetRegisterMotor1+0x4b6>
              *regdataU16 = PID_GetKDDivisorPOW2(&PIDSpeedHandle_M1);
 8002f9e:	4808      	ldr	r0, [pc, #32]	; (8002fc0 <RI_GetRegisterMotor1+0x35c>)
 8002fa0:	f003 f878 	bl	8006094 <PID_GetKDDivisorPOW2>
 8002fa4:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002fa6:	2000      	movs	r0, #0
              break;
 8002fa8:	e6cb      	b.n	8002d42 <RI_GetRegisterMotor1+0xde>
 8002faa:	bf00      	nop
 8002fac:	200006c0 	.word	0x200006c0
 8002fb0:	200000bc 	.word	0x200000bc
 8002fb4:	20000000 	.word	0x20000000
 8002fb8:	200000e8 	.word	0x200000e8
 8002fbc:	20000240 	.word	0x20000240
 8002fc0:	20000114 	.word	0x20000114
 8002fc4:	20000020 	.word	0x20000020
 8002fc8:	f5b0 6f21 	cmp.w	r0, #2576	; 0xa10
 8002fcc:	f000 80fd 	beq.w	80031ca <RI_GetRegisterMotor1+0x566>
 8002fd0:	d912      	bls.n	8002ff8 <RI_GetRegisterMotor1+0x394>
 8002fd2:	f5b0 6f25 	cmp.w	r0, #2640	; 0xa50
 8002fd6:	f040 80a0 	bne.w	800311a <RI_GetRegisterMotor1+0x4b6>
              *regdata16 = MCI_GetValphabeta(pMCIN).alpha;
 8002fda:	48a8      	ldr	r0, [pc, #672]	; (800327c <RI_GetRegisterMotor1+0x618>)
 8002fdc:	f7fe fa2a 	bl	8001434 <MCI_GetValphabeta>
 8002fe0:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002fe2:	2000      	movs	r0, #0
              break;
 8002fe4:	e6ad      	b.n	8002d42 <RI_GetRegisterMotor1+0xde>
 8002fe6:	28d0      	cmp	r0, #208	; 0xd0
 8002fe8:	f040 8097 	bne.w	800311a <RI_GetRegisterMotor1+0x4b6>
              *regdata16 = PID_GetKI(&PIDSpeedHandle_M1);
 8002fec:	48a4      	ldr	r0, [pc, #656]	; (8003280 <RI_GetRegisterMotor1+0x61c>)
 8002fee:	f003 f823 	bl	8006038 <PID_GetKI>
 8002ff2:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002ff4:	2000      	movs	r0, #0
              break;
 8002ff6:	e6a4      	b.n	8002d42 <RI_GetRegisterMotor1+0xde>
 8002ff8:	f5b0 6f19 	cmp.w	r0, #2448	; 0x990
 8002ffc:	d107      	bne.n	800300e <RI_GetRegisterMotor1+0x3aa>
              *regdata16 = MCI_GetIqdref(pMCIN).d;
 8002ffe:	489f      	ldr	r0, [pc, #636]	; (800327c <RI_GetRegisterMotor1+0x618>)
 8003000:	f7fe f9fc 	bl	80013fc <MCI_GetIqdref>
 8003004:	f3c0 400f 	ubfx	r0, r0, #16, #16
 8003008:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 800300a:	2000      	movs	r0, #0
              break;
 800300c:	e699      	b.n	8002d42 <RI_GetRegisterMotor1+0xde>
 800300e:	f5b0 6f1d 	cmp.w	r0, #2512	; 0x9d0
 8003012:	f040 8082 	bne.w	800311a <RI_GetRegisterMotor1+0x4b6>
              *regdata16 = MCI_GetVqd(pMCIN).q;
 8003016:	4899      	ldr	r0, [pc, #612]	; (800327c <RI_GetRegisterMotor1+0x618>)
 8003018:	f7fe f9fe 	bl	8001418 <MCI_GetVqd>
 800301c:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 800301e:	2000      	movs	r0, #0
              break;
 8003020:	e68f      	b.n	8002d42 <RI_GetRegisterMotor1+0xde>
 8003022:	f641 3358 	movw	r3, #7000	; 0x1b58
 8003026:	4298      	cmp	r0, r3
 8003028:	d175      	bne.n	8003116 <RI_GetRegisterMotor1+0x4b2>
              ReadVal.Float_Val = PQD_GetAvrgElMotorPowerW(pMPM[M1]);
 800302a:	4b96      	ldr	r3, [pc, #600]	; (8003284 <RI_GetRegisterMotor1+0x620>)
 800302c:	6818      	ldr	r0, [r3, #0]
 800302e:	f003 f89d 	bl	800616c <PQD_GetAvrgElMotorPowerW>
 8003032:	ed8d 0a01 	vstr	s0, [sp, #4]
              *regdataU32 = ReadVal.U32_Val; //cstat !UNION-type-punning
 8003036:	9b01      	ldr	r3, [sp, #4]
 8003038:	6023      	str	r3, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 800303a:	2000      	movs	r0, #0
 800303c:	e69c      	b.n	8002d78 <RI_GetRegisterMotor1+0x114>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 800303e:	2008      	movs	r0, #8
  }
 8003040:	b011      	add	sp, #68	; 0x44
 8003042:	bd30      	pop	{r4, r5, pc}
 8003044:	2005      	movs	r0, #5
 8003046:	e655      	b.n	8002cf4 <RI_GetRegisterMotor1+0x90>
    uint8_t retVal = MCP_CMD_OK;
 8003048:	2000      	movs	r0, #0
 800304a:	e67a      	b.n	8002d42 <RI_GetRegisterMotor1+0xde>
            retVal = RI_MovString (MotorConfig_reg[motorID]->name ,charData, size, freeSpace);
 800304c:	4b8e      	ldr	r3, [pc, #568]	; (8003288 <RI_GetRegisterMotor1+0x624>)
 800304e:	681a      	ldr	r2, [r3, #0]
  *size= 1U ; /* /0 is the min String size */
 8003050:	2301      	movs	r3, #1
 8003052:	802b      	strh	r3, [r5, #0]
            retVal = RI_MovString (MotorConfig_reg[motorID]->name ,charData, size, freeSpace);
 8003054:	f102 0124 	add.w	r1, r2, #36	; 0x24
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8003058:	f992 2024 	ldrsb.w	r2, [r2, #36]	; 0x24
 800305c:	b17a      	cbz	r2, 800307e <RI_GetRegisterMotor1+0x41a>
 800305e:	fa1f fc8c 	uxth.w	ip, ip
 8003062:	e008      	b.n	8003076 <RI_GetRegisterMotor1+0x412>
    *tempdestString = *tempsrcString;
 8003064:	f804 2b01 	strb.w	r2, [r4], #1
    *size = *size + 1U;
 8003068:	882b      	ldrh	r3, [r5, #0]
 800306a:	3301      	adds	r3, #1
 800306c:	b29b      	uxth	r3, r3
 800306e:	802b      	strh	r3, [r5, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8003070:	f911 2f01 	ldrsb.w	r2, [r1, #1]!
 8003074:	b11a      	cbz	r2, 800307e <RI_GetRegisterMotor1+0x41a>
 8003076:	4563      	cmp	r3, ip
 8003078:	d3f4      	bcc.n	8003064 <RI_GetRegisterMotor1+0x400>
    retVal = MCP_ERROR_STRING_FORMAT;
 800307a:	2006      	movs	r0, #6
 800307c:	e610      	b.n	8002ca0 <RI_GetRegisterMotor1+0x3c>
    *tempdestString = (int8_t)0;
 800307e:	2000      	movs	r0, #0
 8003080:	7020      	strb	r0, [r4, #0]
    return (retVal);
 8003082:	e60d      	b.n	8002ca0 <RI_GetRegisterMotor1+0x3c>
            retVal = RI_MovString (PWR_BOARD_NAME[motorID], charData, size, freeSpace);
 8003084:	4a81      	ldr	r2, [pc, #516]	; (800328c <RI_GetRegisterMotor1+0x628>)
  *size= 1U ; /* /0 is the min String size */
 8003086:	2301      	movs	r3, #1
            retVal = RI_MovString (PWR_BOARD_NAME[motorID], charData, size, freeSpace);
 8003088:	6811      	ldr	r1, [r2, #0]
  *size= 1U ; /* /0 is the min String size */
 800308a:	802b      	strh	r3, [r5, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 800308c:	f991 2000 	ldrsb.w	r2, [r1]
 8003090:	2a00      	cmp	r2, #0
 8003092:	d0f4      	beq.n	800307e <RI_GetRegisterMotor1+0x41a>
 8003094:	fa1f fc8c 	uxth.w	ip, ip
 8003098:	e009      	b.n	80030ae <RI_GetRegisterMotor1+0x44a>
    *tempdestString = *tempsrcString;
 800309a:	f804 2b01 	strb.w	r2, [r4], #1
    *size = *size + 1U;
 800309e:	882b      	ldrh	r3, [r5, #0]
 80030a0:	3301      	adds	r3, #1
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	802b      	strh	r3, [r5, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80030a6:	f911 2f01 	ldrsb.w	r2, [r1, #1]!
 80030aa:	2a00      	cmp	r2, #0
 80030ac:	d0e7      	beq.n	800307e <RI_GetRegisterMotor1+0x41a>
 80030ae:	4563      	cmp	r3, ip
 80030b0:	d3f3      	bcc.n	800309a <RI_GetRegisterMotor1+0x436>
 80030b2:	e7e2      	b.n	800307a <RI_GetRegisterMotor1+0x416>
              FOCFwConfig_reg_t const *pFOCConfig_reg = FOCConfig_reg[motorID];
 80030b4:	4a76      	ldr	r2, [pc, #472]	; (8003290 <RI_GetRegisterMotor1+0x62c>)
              (void)memcpy(rawData, (const uint8_t *)pFOCConfig_reg, sizeof(FOCFwConfig_reg_t));
 80030b6:	6812      	ldr	r2, [r2, #0]
 80030b8:	6810      	ldr	r0, [r2, #0]
 80030ba:	6851      	ldr	r1, [r2, #4]
 80030bc:	6894      	ldr	r4, [r2, #8]
 80030be:	609c      	str	r4, [r3, #8]
 80030c0:	6018      	str	r0, [r3, #0]
 80030c2:	6059      	str	r1, [r3, #4]
 80030c4:	8992      	ldrh	r2, [r2, #12]
 80030c6:	819a      	strh	r2, [r3, #12]
    uint8_t retVal = MCP_CMD_OK;
 80030c8:	2000      	movs	r0, #0
              (void)memcpy(rawData, (const uint8_t *)pFOCConfig_reg, sizeof(FOCFwConfig_reg_t));
 80030ca:	2310      	movs	r3, #16
 80030cc:	e600      	b.n	8002cd0 <RI_GetRegisterMotor1+0x6c>
              MotorConfig_reg_t const *pMotorConfig_reg = MotorConfig_reg[motorID];
 80030ce:	4a6e      	ldr	r2, [pc, #440]	; (8003288 <RI_GetRegisterMotor1+0x624>)
              (void)memcpy(rawData, (const uint8_t *)pMotorConfig_reg, sizeof(MotorConfig_reg_t));
 80030d0:	6812      	ldr	r2, [r2, #0]
 80030d2:	f102 0e30 	add.w	lr, r2, #48	; 0x30
 80030d6:	6814      	ldr	r4, [r2, #0]
 80030d8:	6850      	ldr	r0, [r2, #4]
 80030da:	6891      	ldr	r1, [r2, #8]
 80030dc:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 80030e0:	f8c3 c00c 	str.w	ip, [r3, #12]
 80030e4:	3210      	adds	r2, #16
 80030e6:	4572      	cmp	r2, lr
 80030e8:	601c      	str	r4, [r3, #0]
 80030ea:	6058      	str	r0, [r3, #4]
 80030ec:	6099      	str	r1, [r3, #8]
 80030ee:	f103 0310 	add.w	r3, r3, #16
 80030f2:	d1f0      	bne.n	80030d6 <RI_GetRegisterMotor1+0x472>
 80030f4:	6810      	ldr	r0, [r2, #0]
 80030f6:	6851      	ldr	r1, [r2, #4]
 80030f8:	6892      	ldr	r2, [r2, #8]
 80030fa:	609a      	str	r2, [r3, #8]
 80030fc:	6018      	str	r0, [r3, #0]
 80030fe:	6059      	str	r1, [r3, #4]
    uint8_t retVal = MCP_CMD_OK;
 8003100:	2000      	movs	r0, #0
              (void)memcpy(rawData, (const uint8_t *)pMotorConfig_reg, sizeof(MotorConfig_reg_t));
 8003102:	233e      	movs	r3, #62	; 0x3e
 8003104:	e5e4      	b.n	8002cd0 <RI_GetRegisterMotor1+0x6c>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8003106:	4608      	mov	r0, r1
 8003108:	e5ca      	b.n	8002ca0 <RI_GetRegisterMotor1+0x3c>
              *data = (uint8_t)MCI_GetSTMState(pMCIN);
 800310a:	485c      	ldr	r0, [pc, #368]	; (800327c <RI_GetRegisterMotor1+0x618>)
 800310c:	f7fe f8c0 	bl	8001290 <MCI_GetSTMState>
 8003110:	7020      	strb	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8003112:	2000      	movs	r0, #0
              break;
 8003114:	e5ee      	b.n	8002cf4 <RI_GetRegisterMotor1+0x90>
 8003116:	2005      	movs	r0, #5
 8003118:	e62e      	b.n	8002d78 <RI_GetRegisterMotor1+0x114>
 800311a:	2005      	movs	r0, #5
 800311c:	e611      	b.n	8002d42 <RI_GetRegisterMotor1+0xde>
              *regdataU32 = MCI_GetFaultState(pMCIN);
 800311e:	4857      	ldr	r0, [pc, #348]	; (800327c <RI_GetRegisterMotor1+0x618>)
 8003120:	f7fe f91e 	bl	8001360 <MCI_GetFaultState>
 8003124:	6020      	str	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8003126:	2000      	movs	r0, #0
              break;
 8003128:	e626      	b.n	8002d78 <RI_GetRegisterMotor1+0x114>
              *regdata32 = (((int32_t)MCI_GetMecSpeedRefUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 800312a:	4854      	ldr	r0, [pc, #336]	; (800327c <RI_GetRegisterMotor1+0x618>)
 800312c:	f7fe f938 	bl	80013a0 <MCI_GetMecSpeedRefUnit>
 8003130:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003134:	0040      	lsls	r0, r0, #1
 8003136:	6020      	str	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8003138:	2000      	movs	r0, #0
              break;
 800313a:	e61d      	b.n	8002d78 <RI_GetRegisterMotor1+0x114>
            *rawSize = 4;
 800313c:	2304      	movs	r3, #4
 800313e:	8023      	strh	r3, [r4, #0]
            *torque = MCI_GetLastRampFinalTorque(pMCIN);
 8003140:	484e      	ldr	r0, [pc, #312]	; (800327c <RI_GetRegisterMotor1+0x618>)
 8003142:	f7fe f91b 	bl	800137c <MCI_GetLastRampFinalTorque>
 8003146:	8060      	strh	r0, [r4, #2]
            *duration = MCI_GetLastRampFinalDuration(pMCIN) ;
 8003148:	484c      	ldr	r0, [pc, #304]	; (800327c <RI_GetRegisterMotor1+0x618>)
 800314a:	f7fe f91b 	bl	8001384 <MCI_GetLastRampFinalDuration>
        *size = (*rawSize) + 2U;
 800314e:	8823      	ldrh	r3, [r4, #0]
            *duration = MCI_GetLastRampFinalDuration(pMCIN) ;
 8003150:	80a0      	strh	r0, [r4, #4]
        *size = (*rawSize) + 2U;
 8003152:	3302      	adds	r3, #2
 8003154:	b29b      	uxth	r3, r3
    uint8_t retVal = MCP_CMD_OK;
 8003156:	2000      	movs	r0, #0
            break;
 8003158:	e5ba      	b.n	8002cd0 <RI_GetRegisterMotor1+0x6c>
        *size = (*rawSize) + 2U;
 800315a:	8823      	ldrh	r3, [r4, #0]
 800315c:	3302      	adds	r3, #2
            retVal = MCP_ERROR_UNKNOWN_REG;
 800315e:	2005      	movs	r0, #5
        *size = (*rawSize) + 2U;
 8003160:	b29b      	uxth	r3, r3
 8003162:	e5b5      	b.n	8002cd0 <RI_GetRegisterMotor1+0x6c>
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8003164:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = (uint16_t)sizeof(ApplicationConfig_reg_t);
 8003168:	2210      	movs	r2, #16
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 800316a:	f1bc 0f11 	cmp.w	ip, #17
            *rawSize = (uint16_t)sizeof(ApplicationConfig_reg_t);
 800316e:	8022      	strh	r2, [r4, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8003170:	d818      	bhi.n	80031a4 <RI_GetRegisterMotor1+0x540>
 8003172:	2312      	movs	r3, #18
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8003174:	2008      	movs	r0, #8
 8003176:	e5ab      	b.n	8002cd0 <RI_GetRegisterMotor1+0x6c>
            if ((*rawSize) +2U > (uint16_t)freeSpace)
 8003178:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = 12;
 800317c:	220c      	movs	r2, #12
            if ((*rawSize) +2U > (uint16_t)freeSpace)
 800317e:	f1bc 0f0d 	cmp.w	ip, #13
            *rawSize = 12;
 8003182:	8022      	strh	r2, [r4, #0]
            if ((*rawSize) +2U > (uint16_t)freeSpace)
 8003184:	d90b      	bls.n	800319e <RI_GetRegisterMotor1+0x53a>
              memcpy(rawData, &scaleParams_M1, sizeof(ScaleParams_t) );
 8003186:	4a43      	ldr	r2, [pc, #268]	; (8003294 <RI_GetRegisterMotor1+0x630>)
 8003188:	6850      	ldr	r0, [r2, #4]
 800318a:	6814      	ldr	r4, [r2, #0]
 800318c:	6891      	ldr	r1, [r2, #8]
 800318e:	68d2      	ldr	r2, [r2, #12]
 8003190:	60da      	str	r2, [r3, #12]
 8003192:	6058      	str	r0, [r3, #4]
 8003194:	601c      	str	r4, [r3, #0]
 8003196:	6099      	str	r1, [r3, #8]
    uint8_t retVal = MCP_CMD_OK;
 8003198:	2000      	movs	r0, #0
              memcpy(rawData, &scaleParams_M1, sizeof(ScaleParams_t) );
 800319a:	230e      	movs	r3, #14
 800319c:	e598      	b.n	8002cd0 <RI_GetRegisterMotor1+0x6c>
 800319e:	230e      	movs	r3, #14
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 80031a0:	2008      	movs	r0, #8
 80031a2:	e595      	b.n	8002cd0 <RI_GetRegisterMotor1+0x6c>
              ApplicationConfig_reg_t const *pApplicationConfig_reg = ApplicationConfig_reg[motorID];
 80031a4:	4a3c      	ldr	r2, [pc, #240]	; (8003298 <RI_GetRegisterMotor1+0x634>)
              (void)memcpy(rawData, (const uint8_t *)pApplicationConfig_reg, sizeof(ApplicationConfig_reg_t));
 80031a6:	6812      	ldr	r2, [r2, #0]
 80031a8:	6850      	ldr	r0, [r2, #4]
 80031aa:	6814      	ldr	r4, [r2, #0]
 80031ac:	6891      	ldr	r1, [r2, #8]
 80031ae:	68d2      	ldr	r2, [r2, #12]
 80031b0:	60da      	str	r2, [r3, #12]
 80031b2:	6058      	str	r0, [r3, #4]
 80031b4:	601c      	str	r4, [r3, #0]
 80031b6:	6099      	str	r1, [r3, #8]
    uint8_t retVal = MCP_CMD_OK;
 80031b8:	2000      	movs	r0, #0
              (void)memcpy(rawData, (const uint8_t *)pApplicationConfig_reg, sizeof(ApplicationConfig_reg_t));
 80031ba:	2312      	movs	r3, #18
 80031bc:	e588      	b.n	8002cd0 <RI_GetRegisterMotor1+0x6c>
              *regdata16 = MCI_GetIab(pMCIN).a;
 80031be:	482f      	ldr	r0, [pc, #188]	; (800327c <RI_GetRegisterMotor1+0x618>)
 80031c0:	f7fe f8f2 	bl	80013a8 <MCI_GetIab>
 80031c4:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 80031c6:	2000      	movs	r0, #0
              break;
 80031c8:	e5bb      	b.n	8002d42 <RI_GetRegisterMotor1+0xde>
              *regdata16 = MCI_GetVqd(pMCIN).d;
 80031ca:	482c      	ldr	r0, [pc, #176]	; (800327c <RI_GetRegisterMotor1+0x618>)
 80031cc:	f7fe f924 	bl	8001418 <MCI_GetVqd>
 80031d0:	f3c0 400f 	ubfx	r0, r0, #16, #16
 80031d4:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 80031d6:	2000      	movs	r0, #0
              break;
 80031d8:	e5b3      	b.n	8002d42 <RI_GetRegisterMotor1+0xde>
              *regdata16 = SPD_GetS16Speed ((SpeednPosFdbk_Handle_t*) &ENCODER_M1); //cstat !MISRAC2012-Rule-11.3
 80031da:	4830      	ldr	r0, [pc, #192]	; (800329c <RI_GetRegisterMotor1+0x638>)
 80031dc:	f003 fe24 	bl	8006e28 <SPD_GetS16Speed>
 80031e0:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 80031e2:	2000      	movs	r0, #0
              break;
 80031e4:	e5ad      	b.n	8002d42 <RI_GetRegisterMotor1+0xde>
              *regdata16 = MCI_GetValphabeta(pMCIN).beta;
 80031e6:	4825      	ldr	r0, [pc, #148]	; (800327c <RI_GetRegisterMotor1+0x618>)
 80031e8:	f7fe f924 	bl	8001434 <MCI_GetValphabeta>
 80031ec:	f3c0 400f 	ubfx	r0, r0, #16, #16
 80031f0:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 80031f2:	2000      	movs	r0, #0
              break;
 80031f4:	e5a5      	b.n	8002d42 <RI_GetRegisterMotor1+0xde>
              *regdataU16 = PID_GetKPDivisorPOW2(&PIDIdHandle_M1);
 80031f6:	482a      	ldr	r0, [pc, #168]	; (80032a0 <RI_GetRegisterMotor1+0x63c>)
 80031f8:	f002 ff24 	bl	8006044 <PID_GetKPDivisorPOW2>
 80031fc:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 80031fe:	2000      	movs	r0, #0
              break;
 8003200:	e59f      	b.n	8002d42 <RI_GetRegisterMotor1+0xde>
              *regdata16 = PID_GetKD(&PIDSpeedHandle_M1);
 8003202:	481f      	ldr	r0, [pc, #124]	; (8003280 <RI_GetRegisterMotor1+0x61c>)
 8003204:	f002 ff42 	bl	800608c <PID_GetKD>
 8003208:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 800320a:	2000      	movs	r0, #0
              break;
 800320c:	e599      	b.n	8002d42 <RI_GetRegisterMotor1+0xde>
              *regdataU16 = PID_GetKIDivisorPOW2(&PIDIqHandle_M1);
 800320e:	4825      	ldr	r0, [pc, #148]	; (80032a4 <RI_GetRegisterMotor1+0x640>)
 8003210:	f002 ff20 	bl	8006054 <PID_GetKIDivisorPOW2>
 8003214:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8003216:	2000      	movs	r0, #0
              break;
 8003218:	e593      	b.n	8002d42 <RI_GetRegisterMotor1+0xde>
              *regdataU16 = PID_GetKDDivisorPOW2(&PIDIdHandle_M1);
 800321a:	4821      	ldr	r0, [pc, #132]	; (80032a0 <RI_GetRegisterMotor1+0x63c>)
 800321c:	f002 ff3a 	bl	8006094 <PID_GetKDDivisorPOW2>
 8003220:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8003222:	2000      	movs	r0, #0
              break;
 8003224:	e58d      	b.n	8002d42 <RI_GetRegisterMotor1+0xde>
              *regdataU16 = (uint16_t)PID_GetKPDivisorPOW2(&PIDSpeedHandle_M1);
 8003226:	4816      	ldr	r0, [pc, #88]	; (8003280 <RI_GetRegisterMotor1+0x61c>)
 8003228:	f002 ff0c 	bl	8006044 <PID_GetKPDivisorPOW2>
 800322c:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 800322e:	2000      	movs	r0, #0
              break;
 8003230:	e587      	b.n	8002d42 <RI_GetRegisterMotor1+0xde>
              *regdata16 = PID_GetKP(&PIDIdHandle_M1);
 8003232:	481b      	ldr	r0, [pc, #108]	; (80032a0 <RI_GetRegisterMotor1+0x63c>)
 8003234:	f002 fefc 	bl	8006030 <PID_GetKP>
 8003238:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 800323a:	2000      	movs	r0, #0
              break;
 800323c:	e581      	b.n	8002d42 <RI_GetRegisterMotor1+0xde>
              *regdata16 = PID_GetKI(&PIDIqHandle_M1);
 800323e:	4819      	ldr	r0, [pc, #100]	; (80032a4 <RI_GetRegisterMotor1+0x640>)
 8003240:	f002 fefa 	bl	8006038 <PID_GetKI>
 8003244:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8003246:	2000      	movs	r0, #0
              break;
 8003248:	e57b      	b.n	8002d42 <RI_GetRegisterMotor1+0xde>
              *regdata16 = MCI_GetIqd(pMCIN).q;
 800324a:	480c      	ldr	r0, [pc, #48]	; (800327c <RI_GetRegisterMotor1+0x618>)
 800324c:	f7fe f8c8 	bl	80013e0 <MCI_GetIqd>
 8003250:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8003252:	2000      	movs	r0, #0
              break;
 8003254:	e575      	b.n	8002d42 <RI_GetRegisterMotor1+0xde>
              *regdata16 = MCI_GetIalphabeta(pMCIN).alpha;
 8003256:	4809      	ldr	r0, [pc, #36]	; (800327c <RI_GetRegisterMotor1+0x618>)
 8003258:	f7fe f8b4 	bl	80013c4 <MCI_GetIalphabeta>
 800325c:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 800325e:	2000      	movs	r0, #0
              break;
 8003260:	e56f      	b.n	8002d42 <RI_GetRegisterMotor1+0xde>
              *regdata16 = PID_GetKD(&PIDIdHandle_M1);
 8003262:	480f      	ldr	r0, [pc, #60]	; (80032a0 <RI_GetRegisterMotor1+0x63c>)
 8003264:	f002 ff12 	bl	800608c <PID_GetKD>
 8003268:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 800326a:	2000      	movs	r0, #0
              break;
 800326c:	e569      	b.n	8002d42 <RI_GetRegisterMotor1+0xde>
              *regdata16 = MCI_GetIqdref(pMCIN).q;
 800326e:	4803      	ldr	r0, [pc, #12]	; (800327c <RI_GetRegisterMotor1+0x618>)
 8003270:	f7fe f8c4 	bl	80013fc <MCI_GetIqdref>
 8003274:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8003276:	2000      	movs	r0, #0
              break;
 8003278:	e563      	b.n	8002d42 <RI_GetRegisterMotor1+0xde>
 800327a:	bf00      	nop
 800327c:	200006c0 	.word	0x200006c0
 8003280:	20000114 	.word	0x20000114
 8003284:	200002a4 	.word	0x200002a4
 8003288:	200002bc 	.word	0x200002bc
 800328c:	200002c0 	.word	0x200002c0
 8003290:	200002b8 	.word	0x200002b8
 8003294:	200002c4 	.word	0x200002c4
 8003298:	200002b4 	.word	0x200002b4
 800329c:	20000020 	.word	0x20000020
 80032a0:	200000bc 	.word	0x200000bc
 80032a4:	200000e8 	.word	0x200000e8

080032a8 <RI_GetIDSize>:
  return (retVal);
}

uint8_t RI_GetIDSize(uint16_t dataID)
{
  uint8_t typeID = ((uint8_t)dataID) & TYPE_MASK;
 80032a8:	f000 0038 	and.w	r0, r0, #56	; 0x38
 80032ac:	3808      	subs	r0, #8
 80032ae:	b2c0      	uxtb	r0, r0
 80032b0:	2810      	cmp	r0, #16
 80032b2:	bf9a      	itte	ls
 80032b4:	4b01      	ldrls	r3, [pc, #4]	; (80032bc <RI_GetIDSize+0x14>)
 80032b6:	5c18      	ldrbls	r0, [r3, r0]
 80032b8:	2000      	movhi	r0, #0
      break;
    }
  }

  return (result);
}
 80032ba:	4770      	bx	lr
 80032bc:	080074dc 	.word	0x080074dc

080032c0 <RI_GetPtrReg>:

    MCI_Handle_t *pMCIN = &Mci[0];
    uint16_t regID = dataID & REG_MASK;
    uint8_t typeID = ((uint8_t)dataID) & TYPE_MASK;

    switch (typeID)
 80032c0:	f000 0338 	and.w	r3, r0, #56	; 0x38
 80032c4:	2b10      	cmp	r3, #16
 80032c6:	d003      	beq.n	80032d0 <RI_GetPtrReg+0x10>
 80032c8:	4a3c      	ldr	r2, [pc, #240]	; (80033bc <RI_GetPtrReg+0xfc>)
          }

          default:
          {
            *dataPtr = &nullData16;
            retVal = MCP_ERROR_UNKNOWN_REG;
 80032ca:	2005      	movs	r0, #5
            *dataPtr = &(pMCIN->pFOCVars->Iab.b);
 80032cc:	600a      	str	r2, [r1, #0]
    }
#ifdef NULL_PTR_CHECK_REG_INT
  }
#endif
  return (retVal);
}
 80032ce:	4770      	bx	lr
    uint16_t regID = dataID & REG_MASK;
 80032d0:	f020 0007 	bic.w	r0, r0, #7
 80032d4:	f5b0 6f19 	cmp.w	r0, #2448	; 0x990
 80032d8:	b283      	uxth	r3, r0
 80032da:	d051      	beq.n	8003380 <RI_GetPtrReg+0xc0>
 80032dc:	d80e      	bhi.n	80032fc <RI_GetPtrReg+0x3c>
 80032de:	f5b3 6f09 	cmp.w	r3, #2192	; 0x890
 80032e2:	d052      	beq.n	800338a <RI_GetPtrReg+0xca>
 80032e4:	d923      	bls.n	800332e <RI_GetPtrReg+0x6e>
 80032e6:	f5b3 6f11 	cmp.w	r3, #2320	; 0x910
 80032ea:	d053      	beq.n	8003394 <RI_GetPtrReg+0xd4>
 80032ec:	f5b3 6f15 	cmp.w	r3, #2384	; 0x950
 80032f0:	d115      	bne.n	800331e <RI_GetPtrReg+0x5e>
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.q);
 80032f2:	4b33      	ldr	r3, [pc, #204]	; (80033c0 <RI_GetPtrReg+0x100>)
 80032f4:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 80032f6:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.q);
 80032f8:	3210      	adds	r2, #16
            break;
 80032fa:	e7e7      	b.n	80032cc <RI_GetPtrReg+0xc>
 80032fc:	f5b3 6f29 	cmp.w	r3, #2704	; 0xa90
 8003300:	d04d      	beq.n	800339e <RI_GetPtrReg+0xde>
 8003302:	d91f      	bls.n	8003344 <RI_GetPtrReg+0x84>
 8003304:	f5b3 6f2d 	cmp.w	r3, #2768	; 0xad0
 8003308:	d036      	beq.n	8003378 <RI_GetPtrReg+0xb8>
 800330a:	482e      	ldr	r0, [pc, #184]	; (80033c4 <RI_GetPtrReg+0x104>)
 800330c:	4a2b      	ldr	r2, [pc, #172]	; (80033bc <RI_GetPtrReg+0xfc>)
 800330e:	f5b3 6f31 	cmp.w	r3, #2832	; 0xb10
 8003312:	bf0a      	itet	eq
 8003314:	4602      	moveq	r2, r0
 8003316:	2005      	movne	r0, #5
 8003318:	2000      	moveq	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iab.b);
 800331a:	600a      	str	r2, [r1, #0]
}
 800331c:	4770      	bx	lr
 800331e:	f5b3 6f0d 	cmp.w	r3, #2256	; 0x8d0
 8003322:	d1d1      	bne.n	80032c8 <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Iqd.q);
 8003324:	4b26      	ldr	r3, [pc, #152]	; (80033c0 <RI_GetPtrReg+0x100>)
 8003326:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8003328:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqd.q);
 800332a:	320c      	adds	r2, #12
            break;
 800332c:	e7ce      	b.n	80032cc <RI_GetPtrReg+0xc>
 800332e:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 8003332:	d039      	beq.n	80033a8 <RI_GetPtrReg+0xe8>
 8003334:	f5b3 6f05 	cmp.w	r3, #2128	; 0x850
 8003338:	d10f      	bne.n	800335a <RI_GetPtrReg+0x9a>
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.alpha);
 800333a:	4b21      	ldr	r3, [pc, #132]	; (80033c0 <RI_GetPtrReg+0x100>)
 800333c:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 800333e:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.alpha);
 8003340:	3204      	adds	r2, #4
            break;
 8003342:	e7c3      	b.n	80032cc <RI_GetPtrReg+0xc>
 8003344:	f5b3 6f21 	cmp.w	r3, #2576	; 0xa10
 8003348:	d033      	beq.n	80033b2 <RI_GetPtrReg+0xf2>
 800334a:	f5b3 6f25 	cmp.w	r3, #2640	; 0xa50
 800334e:	d10b      	bne.n	8003368 <RI_GetPtrReg+0xa8>
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.alpha);
 8003350:	4b1b      	ldr	r3, [pc, #108]	; (80033c0 <RI_GetPtrReg+0x100>)
 8003352:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8003354:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.alpha);
 8003356:	321a      	adds	r2, #26
            break;
 8003358:	e7b8      	b.n	80032cc <RI_GetPtrReg+0xc>
 800335a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800335e:	d1b3      	bne.n	80032c8 <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 8003360:	4b17      	ldr	r3, [pc, #92]	; (80033c0 <RI_GetPtrReg+0x100>)
  uint8_t retVal = MCP_CMD_OK;
 8003362:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 8003364:	685a      	ldr	r2, [r3, #4]
             break;
 8003366:	e7b1      	b.n	80032cc <RI_GetPtrReg+0xc>
 8003368:	f5b3 6f1d 	cmp.w	r3, #2512	; 0x9d0
 800336c:	d1ac      	bne.n	80032c8 <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Vqd.q);
 800336e:	4b14      	ldr	r3, [pc, #80]	; (80033c0 <RI_GetPtrReg+0x100>)
 8003370:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8003372:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Vqd.q);
 8003374:	3216      	adds	r2, #22
            break;
 8003376:	e7a9      	b.n	80032cc <RI_GetPtrReg+0xc>
 8003378:	4a13      	ldr	r2, [pc, #76]	; (80033c8 <RI_GetPtrReg+0x108>)
            *dataPtr = &(pMCIN->pFOCVars->Iab.b);
 800337a:	600a      	str	r2, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 800337c:	2000      	movs	r0, #0
}
 800337e:	4770      	bx	lr
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.d);
 8003380:	4b0f      	ldr	r3, [pc, #60]	; (80033c0 <RI_GetPtrReg+0x100>)
 8003382:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8003384:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.d);
 8003386:	3212      	adds	r2, #18
            break;
 8003388:	e7a0      	b.n	80032cc <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.beta);
 800338a:	4b0d      	ldr	r3, [pc, #52]	; (80033c0 <RI_GetPtrReg+0x100>)
 800338c:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 800338e:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.beta);
 8003390:	3206      	adds	r2, #6
            break;
 8003392:	e79b      	b.n	80032cc <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Iqd.d);
 8003394:	4b0a      	ldr	r3, [pc, #40]	; (80033c0 <RI_GetPtrReg+0x100>)
 8003396:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8003398:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqd.d);
 800339a:	320e      	adds	r2, #14
            break;
 800339c:	e796      	b.n	80032cc <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.beta);
 800339e:	4b08      	ldr	r3, [pc, #32]	; (80033c0 <RI_GetPtrReg+0x100>)
 80033a0:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 80033a2:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.beta);
 80033a4:	321c      	adds	r2, #28
            break;
 80033a6:	e791      	b.n	80032cc <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Iab.b);
 80033a8:	4b05      	ldr	r3, [pc, #20]	; (80033c0 <RI_GetPtrReg+0x100>)
 80033aa:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 80033ac:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iab.b);
 80033ae:	3202      	adds	r2, #2
            break;
 80033b0:	e78c      	b.n	80032cc <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Vqd.d);
 80033b2:	4b03      	ldr	r3, [pc, #12]	; (80033c0 <RI_GetPtrReg+0x100>)
 80033b4:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 80033b6:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Vqd.d);
 80033b8:	3218      	adds	r2, #24
            break;
 80033ba:	e787      	b.n	80032cc <RI_GetPtrReg+0xc>
 80033bc:	200018c4 	.word	0x200018c4
 80033c0:	200006c0 	.word	0x200006c0
 80033c4:	2000002c 	.word	0x2000002c
 80033c8:	20000024 	.word	0x20000024

080033cc <RCM_RegisterRegConv>:

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80033cc:	4a6c      	ldr	r2, [pc, #432]	; (8003580 <RCM_RegisterRegConv+0x1b4>)
 80033ce:	6813      	ldr	r3, [r2, #0]
{
 80033d0:	b570      	push	{r4, r5, r6, lr}
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d030      	beq.n	8003438 <RCM_RegisterRegConv+0x6c>
        /* Nothing to do */
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault */
      if (RCM_handle_array [i] != 0)
      {
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80033d6:	f890 c004 	ldrb.w	ip, [r0, #4]
 80033da:	7919      	ldrb	r1, [r3, #4]
 80033dc:	458c      	cmp	ip, r1
 80033de:	d01e      	beq.n	800341e <RCM_RegisterRegConv+0x52>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80033e0:	6854      	ldr	r4, [r2, #4]
 80033e2:	2c00      	cmp	r4, #0
 80033e4:	f000 80ae 	beq.w	8003544 <RCM_RegisterRegConv+0x178>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80033e8:	7921      	ldrb	r1, [r4, #4]
 80033ea:	4561      	cmp	r1, ip
  uint8_t handle = 255U;
 80033ec:	f04f 03ff 	mov.w	r3, #255	; 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80033f0:	d02b      	beq.n	800344a <RCM_RegisterRegConv+0x7e>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80033f2:	6894      	ldr	r4, [r2, #8]
 80033f4:	2c00      	cmp	r4, #0
 80033f6:	f000 8091 	beq.w	800351c <RCM_RegisterRegConv+0x150>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80033fa:	7921      	ldrb	r1, [r4, #4]
 80033fc:	4561      	cmp	r1, ip
 80033fe:	d02a      	beq.n	8003456 <RCM_RegisterRegConv+0x8a>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003400:	68d4      	ldr	r4, [r2, #12]
 8003402:	2c00      	cmp	r4, #0
 8003404:	f000 8093 	beq.w	800352e <RCM_RegisterRegConv+0x162>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003408:	7921      	ldrb	r1, [r4, #4]
 800340a:	4561      	cmp	r1, ip
 800340c:	f000 8094 	beq.w	8003538 <RCM_RegisterRegConv+0x16c>
      {
        /* Nothing to do */
      }
      i++;
    }
    if (handle < RCM_MAX_CONV)
 8003410:	2b03      	cmp	r3, #3
 8003412:	bf88      	it	hi
 8003414:	23ff      	movhi	r3, #255	; 0xff
 8003416:	f240 80a3 	bls.w	8003560 <RCM_RegisterRegConv+0x194>
      /* Nothing to do handle is already set to error value : 255 */
    }
#ifdef NULL_PTR_CHECK_REG_CON_MNG
  }
#endif
  regConv->convHandle = handle;
 800341a:	7303      	strb	r3, [r0, #12]
}
 800341c:	bd70      	pop	{r4, r5, r6, pc}
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	6801      	ldr	r1, [r0, #0]
 8003422:	428b      	cmp	r3, r1
 8003424:	d01d      	beq.n	8003462 <RCM_RegisterRegConv+0x96>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003426:	6854      	ldr	r4, [r2, #4]
 8003428:	2c00      	cmp	r4, #0
 800342a:	d1dd      	bne.n	80033e8 <RCM_RegisterRegConv+0x1c>
 800342c:	6894      	ldr	r4, [r2, #8]
 800342e:	2c00      	cmp	r4, #0
 8003430:	f000 809b 	beq.w	800356a <RCM_RegisterRegConv+0x19e>
      i++;
 8003434:	2301      	movs	r3, #1
 8003436:	e7e0      	b.n	80033fa <RCM_RegisterRegConv+0x2e>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003438:	6854      	ldr	r4, [r2, #4]
 800343a:	2c00      	cmp	r4, #0
 800343c:	f000 808e 	beq.w	800355c <RCM_RegisterRegConv+0x190>
 8003440:	f890 c004 	ldrb.w	ip, [r0, #4]
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003444:	7921      	ldrb	r1, [r4, #4]
 8003446:	4561      	cmp	r1, ip
 8003448:	d1d3      	bne.n	80033f2 <RCM_RegisterRegConv+0x26>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 800344a:	6824      	ldr	r4, [r4, #0]
 800344c:	6801      	ldr	r1, [r0, #0]
 800344e:	428c      	cmp	r4, r1
 8003450:	d1cf      	bne.n	80033f2 <RCM_RegisterRegConv+0x26>
      i++;
 8003452:	2301      	movs	r3, #1
 8003454:	e006      	b.n	8003464 <RCM_RegisterRegConv+0x98>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8003456:	6824      	ldr	r4, [r4, #0]
 8003458:	6801      	ldr	r1, [r0, #0]
 800345a:	428c      	cmp	r4, r1
 800345c:	d1d0      	bne.n	8003400 <RCM_RegisterRegConv+0x34>
      i++;
 800345e:	2302      	movs	r3, #2
 8003460:	e000      	b.n	8003464 <RCM_RegisterRegConv+0x98>
    uint8_t i = 0;
 8003462:	2300      	movs	r3, #0
      RCM_handle_array [handle] = regConv;
 8003464:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8003468:	688a      	ldr	r2, [r1, #8]
      RCM_CB_array [handle].cb = NULL; /* If a previous callback was attached, it is cleared */
 800346a:	4c46      	ldr	r4, [pc, #280]	; (8003584 <RCM_RegisterRegConv+0x1b8>)
 800346c:	2500      	movs	r5, #0
      if (0U == LL_ADC_IsEnabled(regConv->regADC))
 800346e:	07d2      	lsls	r2, r2, #31
      RCM_CB_array [handle].cb = NULL; /* If a previous callback was attached, it is cleared */
 8003470:	f844 5033 	str.w	r5, [r4, r3, lsl #3]
      if (0U == LL_ADC_IsEnabled(regConv->regADC))
 8003474:	d411      	bmi.n	800349a <RCM_RegisterRegConv+0xce>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOCS(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 8003476:	684a      	ldr	r2, [r1, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 8003478:	f06f 0402 	mvn.w	r4, #2
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 800347c:	f022 0220 	bic.w	r2, r2, #32
 8003480:	604a      	str	r2, [r1, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 8003482:	600c      	str	r4, [r1, #0]
{
  /* Note: on this STM32 series, there is no flag ADC group injected          */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "JEOC" is corresponding to flag "JEOS"               */
  /*       in other STM32 families).                                          */
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8003484:	684a      	ldr	r2, [r1, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8003486:	f06f 0404 	mvn.w	r4, #4
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 800348a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800348e:	604a      	str	r2, [r1, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8003490:	600c      	str	r4, [r1, #0]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8003492:	688a      	ldr	r2, [r1, #8]
 8003494:	f042 0201 	orr.w	r2, r2, #1
 8003498:	608a      	str	r2, [r1, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 800349a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800349c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80034a0:	62ca      	str	r2, [r1, #44]	; 0x2c
      LL_ADC_SetChannelSamplingTime (regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 80034a2:	7902      	ldrb	r2, [r0, #4]
 80034a4:	2a09      	cmp	r2, #9
 80034a6:	d82f      	bhi.n	8003508 <RCM_RegisterRegConv+0x13c>
 80034a8:	eb02 0442 	add.w	r4, r2, r2, lsl #1
 80034ac:	ea42 5204 	orr.w	r2, r2, r4, lsl #20
 80034b0:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80034b4:	f04f 7e00 	mov.w	lr, #33554432	; 0x2000000
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b8:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 80034bc:	fa94 f4a4 	rbit	r4, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 80034c0:	fab4 f484 	clz	r4, r4
 80034c4:	fa2e fe04 	lsr.w	lr, lr, r4
 80034c8:	310c      	adds	r1, #12
  MODIFY_REG(*preg,
 80034ca:	f002 72f8 	and.w	r2, r2, #32505856	; 0x1f00000
 80034ce:	f851 402e 	ldr.w	r4, [r1, lr, lsl #2]
 80034d2:	f04f 7cf8 	mov.w	ip, #32505856	; 0x1f00000
 80034d6:	fa9c f5ac 	rbit	r5, ip
 80034da:	fab5 f585 	clz	r5, r5
 80034de:	fa9c fcac 	rbit	ip, ip
 80034e2:	6886      	ldr	r6, [r0, #8]
 80034e4:	fabc fc8c 	clz	ip, ip
 80034e8:	fa22 f505 	lsr.w	r5, r2, r5
 80034ec:	fa22 f20c 	lsr.w	r2, r2, ip
 80034f0:	fa06 fc02 	lsl.w	ip, r6, r2
 80034f4:	2207      	movs	r2, #7
 80034f6:	40aa      	lsls	r2, r5
 80034f8:	ea24 0202 	bic.w	r2, r4, r2
 80034fc:	ea42 020c 	orr.w	r2, r2, ip
 8003500:	f841 202e 	str.w	r2, [r1, lr, lsl #2]
  regConv->convHandle = handle;
 8003504:	7303      	strb	r3, [r0, #12]
}
 8003506:	bd70      	pop	{r4, r5, r6, pc}
      LL_ADC_SetChannelSamplingTime (regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 8003508:	2403      	movs	r4, #3
 800350a:	f06f 051d 	mvn.w	r5, #29
 800350e:	fb14 5402 	smlabb	r4, r4, r2, r5
 8003512:	ea42 5204 	orr.w	r2, r2, r4, lsl #20
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8003516:	f002 7e00 	and.w	lr, r2, #33554432	; 0x2000000
 800351a:	e7cd      	b.n	80034b8 <RCM_RegisterRegConv+0xec>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800351c:	2b04      	cmp	r3, #4
 800351e:	d917      	bls.n	8003550 <RCM_RegisterRegConv+0x184>
 8003520:	68d4      	ldr	r4, [r2, #12]
 8003522:	b114      	cbz	r4, 800352a <RCM_RegisterRegConv+0x15e>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003524:	7923      	ldrb	r3, [r4, #4]
 8003526:	459c      	cmp	ip, r3
 8003528:	d01c      	beq.n	8003564 <RCM_RegisterRegConv+0x198>
 800352a:	6801      	ldr	r1, [r0, #0]
 800352c:	e797      	b.n	800345e <RCM_RegisterRegConv+0x92>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800352e:	2b04      	cmp	r3, #4
 8003530:	6801      	ldr	r1, [r0, #0]
 8003532:	d997      	bls.n	8003464 <RCM_RegisterRegConv+0x98>
      i++;
 8003534:	2303      	movs	r3, #3
 8003536:	e795      	b.n	8003464 <RCM_RegisterRegConv+0x98>
 8003538:	6801      	ldr	r1, [r0, #0]
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 800353a:	6824      	ldr	r4, [r4, #0]
 800353c:	428c      	cmp	r4, r1
 800353e:	f47f af67 	bne.w	8003410 <RCM_RegisterRegConv+0x44>
 8003542:	e7f7      	b.n	8003534 <RCM_RegisterRegConv+0x168>
      i++;
 8003544:	2301      	movs	r3, #1
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003546:	6894      	ldr	r4, [r2, #8]
 8003548:	b11c      	cbz	r4, 8003552 <RCM_RegisterRegConv+0x186>
 800354a:	f890 c004 	ldrb.w	ip, [r0, #4]
 800354e:	e754      	b.n	80033fa <RCM_RegisterRegConv+0x2e>
 8003550:	4623      	mov	r3, r4
 8003552:	68d4      	ldr	r4, [r2, #12]
 8003554:	b124      	cbz	r4, 8003560 <RCM_RegisterRegConv+0x194>
 8003556:	f890 c004 	ldrb.w	ip, [r0, #4]
 800355a:	e755      	b.n	8003408 <RCM_RegisterRegConv+0x3c>
    uint8_t i = 0;
 800355c:	4623      	mov	r3, r4
 800355e:	e7f2      	b.n	8003546 <RCM_RegisterRegConv+0x17a>
 8003560:	6801      	ldr	r1, [r0, #0]
 8003562:	e77f      	b.n	8003464 <RCM_RegisterRegConv+0x98>
 8003564:	6801      	ldr	r1, [r0, #0]
      i++;
 8003566:	2302      	movs	r3, #2
 8003568:	e7e7      	b.n	800353a <RCM_RegisterRegConv+0x16e>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800356a:	68d4      	ldr	r4, [r2, #12]
 800356c:	2c00      	cmp	r4, #0
 800356e:	f43f af70 	beq.w	8003452 <RCM_RegisterRegConv+0x86>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003572:	7923      	ldrb	r3, [r4, #4]
 8003574:	4563      	cmp	r3, ip
      i++;
 8003576:	bf08      	it	eq
 8003578:	2301      	moveq	r3, #1
        if ((RCM_handle_array [i]->channel == regConv->channel)
 800357a:	d0de      	beq.n	800353a <RCM_RegisterRegConv+0x16e>
 800357c:	e769      	b.n	8003452 <RCM_RegisterRegConv+0x86>
 800357e:	bf00      	nop
 8003580:	200018f0 	.word	0x200018f0
 8003584:	200018c8 	.word	0x200018c8

08003588 <RCM_ExecRegularConv>:
 */
uint16_t RCM_ExecRegularConv (RegConv_t *regConv)
{
  uint16_t retVal;
  uint8_t handle = regConv->convHandle;
  LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8003588:	4b1b      	ldr	r3, [pc, #108]	; (80035f8 <RCM_ExecRegularConv+0x70>)
 800358a:	7b02      	ldrb	r2, [r0, #12]
 800358c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
                               LL_ADC_REG_RANK_1,
                               __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 8003590:	7913      	ldrb	r3, [r2, #4]
  LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8003592:	6812      	ldr	r2, [r2, #0]
 8003594:	2b09      	cmp	r3, #9
 8003596:	d827      	bhi.n	80035e8 <RCM_ExecRegularConv+0x60>
                               __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 8003598:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800359c:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
  LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 80035a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80035a4:	f44f 7140 	mov.w	r1, #768	; 0x300
 80035a8:	fa91 f1a1 	rbit	r1, r1
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 80035ac:	f44f 7c00 	mov.w	ip, #512	; 0x200
 80035b0:	fab1 f181 	clz	r1, r1
 80035b4:	f102 002c 	add.w	r0, r2, #44	; 0x2c
 80035b8:	fa2c fc01 	lsr.w	ip, ip, r1
  MODIFY_REG(*preg,
 80035bc:	f003 031f 	and.w	r3, r3, #31
 80035c0:	f850 102c 	ldr.w	r1, [r0, ip, lsl #2]
 80035c4:	f021 011f 	bic.w	r1, r1, #31
 80035c8:	4319      	orrs	r1, r3

  (void)LL_ADC_REG_ReadConversionData12(RCM_handle_array[handle]->regADC);

  /* Bit banding access equivalent to LL_ADC_REG_StartConversionSWStart */
  BB_REG_BIT_SET(&RCM_handle_array[handle]->regADC->CR2, ADC_CR2_SWSTART_Pos);
 80035ca:	0153      	lsls	r3, r2, #5
 80035cc:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
 80035d0:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80035d4:	2101      	movs	r1, #1
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 80035d6:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 80035d8:	f8c3 1178 	str.w	r1, [r3, #376]	; 0x178
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_EOCS) == (LL_ADC_FLAG_EOCS));
 80035dc:	6813      	ldr	r3, [r2, #0]
  /* Wait until end of regular conversion */
  while (LL_ADC_IsActiveFlag_EOCS(RCM_handle_array[handle]->regADC) == 0u)
 80035de:	079b      	lsls	r3, r3, #30
 80035e0:	d5fc      	bpl.n	80035dc <RCM_ExecRegularConv+0x54>
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 80035e2:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
  {
    /* Nothing to do */
  }
  retVal = LL_ADC_REG_ReadConversionData12(RCM_handle_array[handle]->regADC);
  return (retVal);
}
 80035e4:	b280      	uxth	r0, r0
 80035e6:	4770      	bx	lr
                               __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 80035e8:	2103      	movs	r1, #3
 80035ea:	f06f 001d 	mvn.w	r0, #29
 80035ee:	fb11 0103 	smlabb	r1, r1, r3, r0
  LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 80035f2:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 80035f6:	e7d5      	b.n	80035a4 <RCM_ExecRegularConv+0x1c>
 80035f8:	200018f0 	.word	0x200018f0

080035fc <RCM_ExecUserConv>:
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv()
{
  uint8_t handle;
  if (RCM_UserConvHandle != NULL)
 80035fc:	4b11      	ldr	r3, [pc, #68]	; (8003644 <RCM_ExecUserConv+0x48>)
{
 80035fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (RCM_UserConvHandle != NULL)
 8003602:	681c      	ldr	r4, [r3, #0]
 8003604:	b124      	cbz	r4, 8003610 <RCM_ExecUserConv+0x14>
  {
    handle = RCM_UserConvHandle->convHandle;
    if (RCM_USERCONV_REQUESTED == RCM_UserConvState)
 8003606:	4d10      	ldr	r5, [pc, #64]	; (8003648 <RCM_ExecUserConv+0x4c>)
    handle = RCM_UserConvHandle->convHandle;
 8003608:	7b26      	ldrb	r6, [r4, #12]
    if (RCM_USERCONV_REQUESTED == RCM_UserConvState)
 800360a:	782b      	ldrb	r3, [r5, #0]
 800360c:	2b01      	cmp	r3, #1
 800360e:	d001      	beq.n	8003614 <RCM_ExecUserConv+0x18>
  }
  else
  {
     /* Nothing to do */
  }
}
 8003610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8003614:	4620      	mov	r0, r4
 8003616:	f7ff ffb7 	bl	8003588 <RCM_ExecRegularConv>
 800361a:	4b0c      	ldr	r3, [pc, #48]	; (800364c <RCM_ExecUserConv+0x50>)
 800361c:	8018      	strh	r0, [r3, #0]
      RCM_UserConvState = RCM_USERCONV_EOC;
 800361e:	2302      	movs	r3, #2
 8003620:	702b      	strb	r3, [r5, #0]
      if (RCM_CB_array[handle].cb != NULL)
 8003622:	4b0b      	ldr	r3, [pc, #44]	; (8003650 <RCM_ExecUserConv+0x54>)
 8003624:	f853 7036 	ldr.w	r7, [r3, r6, lsl #3]
      RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8003628:	4601      	mov	r1, r0
      if (RCM_CB_array[handle].cb != NULL)
 800362a:	2f00      	cmp	r7, #0
 800362c:	d0f0      	beq.n	8003610 <RCM_ExecUserConv+0x14>
        RCM_CB_array[handle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 800362e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003632:	4620      	mov	r0, r4
 8003634:	685a      	ldr	r2, [r3, #4]
        RCM_UserConvState = RCM_USERCONV_IDLE;
 8003636:	2300      	movs	r3, #0
 8003638:	702b      	strb	r3, [r5, #0]
        RCM_CB_array[handle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 800363a:	463b      	mov	r3, r7
}
 800363c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        RCM_CB_array[handle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 8003640:	4718      	bx	r3
 8003642:	bf00      	nop
 8003644:	200018e8 	.word	0x200018e8
 8003648:	200018ec 	.word	0x200018ec
 800364c:	200018ee 	.word	0x200018ee
 8003650:	200018c8 	.word	0x200018c8

08003654 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003654:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003656:	4b0d      	ldr	r3, [pc, #52]	; (800368c <HAL_MspInit+0x38>)
 8003658:	2100      	movs	r1, #0
 800365a:	9100      	str	r1, [sp, #0]
 800365c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800365e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003662:	645a      	str	r2, [r3, #68]	; 0x44
 8003664:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003666:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800366a:	9200      	str	r2, [sp, #0]
 800366c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800366e:	9101      	str	r1, [sp, #4]
 8003670:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003672:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003676:	641a      	str	r2, [r3, #64]	; 0x40
 8003678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800367e:	9301      	str	r3, [sp, #4]
 8003680:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8003682:	2004      	movs	r0, #4
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003684:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8003686:	f000 bf13 	b.w	80044b0 <HAL_NVIC_SetPriorityGrouping>
 800368a:	bf00      	nop
 800368c:	40023800 	.word	0x40023800

08003690 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003690:	b5d0      	push	{r4, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8003692:	6803      	ldr	r3, [r0, #0]
 8003694:	4a2e      	ldr	r2, [pc, #184]	; (8003750 <HAL_ADC_MspInit+0xc0>)
{
 8003696:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003698:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 800369a:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800369c:	e9cd 4406 	strd	r4, r4, [sp, #24]
 80036a0:	e9cd 4408 	strd	r4, r4, [sp, #32]
 80036a4:	940a      	str	r4, [sp, #40]	; 0x28
  if(hadc->Instance==ADC1)
 80036a6:	d004      	beq.n	80036b2 <HAL_ADC_MspInit+0x22>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 80036a8:	4a2a      	ldr	r2, [pc, #168]	; (8003754 <HAL_ADC_MspInit+0xc4>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d031      	beq.n	8003712 <HAL_ADC_MspInit+0x82>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80036ae:	b00c      	add	sp, #48	; 0x30
 80036b0:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 80036b2:	4b29      	ldr	r3, [pc, #164]	; (8003758 <HAL_ADC_MspInit+0xc8>)
 80036b4:	9401      	str	r4, [sp, #4]
 80036b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036b8:	4828      	ldr	r0, [pc, #160]	; (800375c <HAL_ADC_MspInit+0xcc>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80036ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036be:	645a      	str	r2, [r3, #68]	; 0x44
 80036c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036c2:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80036c6:	9201      	str	r2, [sp, #4]
 80036c8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80036ca:	9402      	str	r4, [sp, #8]
 80036cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036ce:	f042 0204 	orr.w	r2, r2, #4
 80036d2:	631a      	str	r2, [r3, #48]	; 0x30
 80036d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036d6:	f002 0204 	and.w	r2, r2, #4
 80036da:	9202      	str	r2, [sp, #8]
 80036dc:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036de:	9403      	str	r4, [sp, #12]
 80036e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036e2:	f042 0201 	orr.w	r2, r2, #1
 80036e6:	631a      	str	r2, [r3, #48]	; 0x30
 80036e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ea:	f003 0301 	and.w	r3, r3, #1
 80036ee:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin|M1_CURR_AMPL_V_Pin;
 80036f0:	2603      	movs	r6, #3
 80036f2:	2703      	movs	r7, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036f4:	a906      	add	r1, sp, #24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036f6:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin|M1_CURR_AMPL_V_Pin;
 80036f8:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036fc:	f000 ffee 	bl	80046dc <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003700:	4817      	ldr	r0, [pc, #92]	; (8003760 <HAL_ADC_MspInit+0xd0>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003702:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003704:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin|M1_BUS_VOLTAGE_Pin;
 8003706:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800370a:	f000 ffe7 	bl	80046dc <HAL_GPIO_Init>
}
 800370e:	b00c      	add	sp, #48	; 0x30
 8003710:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003712:	4b11      	ldr	r3, [pc, #68]	; (8003758 <HAL_ADC_MspInit+0xc8>)
 8003714:	9404      	str	r4, [sp, #16]
 8003716:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003718:	4810      	ldr	r0, [pc, #64]	; (800375c <HAL_ADC_MspInit+0xcc>)
    __HAL_RCC_ADC2_CLK_ENABLE();
 800371a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800371e:	645a      	str	r2, [r3, #68]	; 0x44
 8003720:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003722:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8003726:	9204      	str	r2, [sp, #16]
 8003728:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800372a:	9405      	str	r4, [sp, #20]
 800372c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800372e:	f042 0204 	orr.w	r2, r2, #4
 8003732:	631a      	str	r2, [r3, #48]	; 0x30
 8003734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003736:	f003 0304 	and.w	r3, r3, #4
 800373a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800373c:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800373e:	2638      	movs	r6, #56	; 0x38
 8003740:	2703      	movs	r7, #3
 8003742:	e9cd 6706 	strd	r6, r7, [sp, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003746:	9b05      	ldr	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003748:	f000 ffc8 	bl	80046dc <HAL_GPIO_Init>
}
 800374c:	b00c      	add	sp, #48	; 0x30
 800374e:	bdd0      	pop	{r4, r6, r7, pc}
 8003750:	40012000 	.word	0x40012000
 8003754:	40012100 	.word	0x40012100
 8003758:	40023800 	.word	0x40023800
 800375c:	40020800 	.word	0x40020800
 8003760:	40020000 	.word	0x40020000
 8003764:	00000000 	.word	0x00000000

08003768 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003768:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hcan->Instance==CAN2)
 800376a:	4a1f      	ldr	r2, [pc, #124]	; (80037e8 <HAL_CAN_MspInit+0x80>)
 800376c:	6801      	ldr	r1, [r0, #0]
{
 800376e:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003770:	2300      	movs	r3, #0
  if(hcan->Instance==CAN2)
 8003772:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003774:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003778:	e9cd 3306 	strd	r3, r3, [sp, #24]
 800377c:	9308      	str	r3, [sp, #32]
  if(hcan->Instance==CAN2)
 800377e:	d001      	beq.n	8003784 <HAL_CAN_MspInit+0x1c>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8003780:	b00a      	add	sp, #40	; 0x28
 8003782:	bd10      	pop	{r4, pc}
    __HAL_RCC_CAN2_CLK_ENABLE();
 8003784:	f502 32e8 	add.w	r2, r2, #118784	; 0x1d000
 8003788:	9301      	str	r3, [sp, #4]
 800378a:	6c10      	ldr	r0, [r2, #64]	; 0x40
 800378c:	f040 6080 	orr.w	r0, r0, #67108864	; 0x4000000
 8003790:	6410      	str	r0, [r2, #64]	; 0x40
 8003792:	6c10      	ldr	r0, [r2, #64]	; 0x40
 8003794:	f000 6080 	and.w	r0, r0, #67108864	; 0x4000000
 8003798:	9001      	str	r0, [sp, #4]
 800379a:	9801      	ldr	r0, [sp, #4]
    __HAL_RCC_CAN1_CLK_ENABLE();
 800379c:	9302      	str	r3, [sp, #8]
 800379e:	6c10      	ldr	r0, [r2, #64]	; 0x40
 80037a0:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 80037a4:	6410      	str	r0, [r2, #64]	; 0x40
 80037a6:	6c10      	ldr	r0, [r2, #64]	; 0x40
 80037a8:	f000 7000 	and.w	r0, r0, #33554432	; 0x2000000
 80037ac:	9002      	str	r0, [sp, #8]
 80037ae:	9802      	ldr	r0, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037b0:	9303      	str	r3, [sp, #12]
 80037b2:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037b4:	480d      	ldr	r0, [pc, #52]	; (80037ec <HAL_CAN_MspInit+0x84>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037b6:	f043 0302 	orr.w	r3, r3, #2
 80037ba:	6313      	str	r3, [r2, #48]	; 0x30
 80037bc:	6b13      	ldr	r3, [r2, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80037be:	ed9f 7b08 	vldr	d7, [pc, #32]	; 80037e0 <HAL_CAN_MspInit+0x78>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037c2:	f003 0302 	and.w	r3, r3, #2
 80037c6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037c8:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80037ca:	2309      	movs	r3, #9
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037cc:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80037ce:	ed8d 7b04 	vstr	d7, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80037d2:	e9cd 2307 	strd	r2, r3, [sp, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037d6:	9c03      	ldr	r4, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037d8:	f000 ff80 	bl	80046dc <HAL_GPIO_Init>
}
 80037dc:	b00a      	add	sp, #40	; 0x28
 80037de:	bd10      	pop	{r4, pc}
 80037e0:	00000060 	.word	0x00000060
 80037e4:	00000002 	.word	0x00000002
 80037e8:	40006800 	.word	0x40006800
 80037ec:	40020400 	.word	0x40020400

080037f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80037f0:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hspi->Instance==SPI1)
 80037f2:	6802      	ldr	r2, [r0, #0]
 80037f4:	492e      	ldr	r1, [pc, #184]	; (80038b0 <HAL_SPI_MspInit+0xc0>)
{
 80037f6:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037f8:	2300      	movs	r3, #0
  if(hspi->Instance==SPI1)
 80037fa:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037fc:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003800:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8003804:	9308      	str	r3, [sp, #32]
  if(hspi->Instance==SPI1)
 8003806:	d004      	beq.n	8003812 <HAL_SPI_MspInit+0x22>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(hspi->Instance==SPI3)
 8003808:	492a      	ldr	r1, [pc, #168]	; (80038b4 <HAL_SPI_MspInit+0xc4>)
 800380a:	428a      	cmp	r2, r1
 800380c:	d024      	beq.n	8003858 <HAL_SPI_MspInit+0x68>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800380e:	b00a      	add	sp, #40	; 0x28
 8003810:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003812:	4a29      	ldr	r2, [pc, #164]	; (80038b8 <HAL_SPI_MspInit+0xc8>)
 8003814:	9300      	str	r3, [sp, #0]
 8003816:	6c50      	ldr	r0, [r2, #68]	; 0x44
 8003818:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 800381c:	6450      	str	r0, [r2, #68]	; 0x44
 800381e:	6c50      	ldr	r0, [r2, #68]	; 0x44
 8003820:	f400 5080 	and.w	r0, r0, #4096	; 0x1000
 8003824:	9000      	str	r0, [sp, #0]
 8003826:	9800      	ldr	r0, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003828:	9301      	str	r3, [sp, #4]
 800382a:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800382c:	4823      	ldr	r0, [pc, #140]	; (80038bc <HAL_SPI_MspInit+0xcc>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800382e:	f043 0301 	orr.w	r3, r3, #1
 8003832:	6313      	str	r3, [r2, #48]	; 0x30
 8003834:	6b13      	ldr	r3, [r2, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003836:	ed9f 7b1a 	vldr	d7, [pc, #104]	; 80038a0 <HAL_SPI_MspInit+0xb0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800383a:	f003 0301 	and.w	r3, r3, #1
 800383e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003840:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003842:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003844:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003846:	ed8d 7b04 	vstr	d7, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800384a:	e9cd 2307 	strd	r2, r3, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800384e:	9c01      	ldr	r4, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003850:	f000 ff44 	bl	80046dc <HAL_GPIO_Init>
}
 8003854:	b00a      	add	sp, #40	; 0x28
 8003856:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003858:	4a17      	ldr	r2, [pc, #92]	; (80038b8 <HAL_SPI_MspInit+0xc8>)
 800385a:	9302      	str	r3, [sp, #8]
 800385c:	6c10      	ldr	r0, [r2, #64]	; 0x40
 800385e:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8003862:	6410      	str	r0, [r2, #64]	; 0x40
 8003864:	6c10      	ldr	r0, [r2, #64]	; 0x40
 8003866:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
 800386a:	9002      	str	r0, [sp, #8]
 800386c:	9802      	ldr	r0, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800386e:	9303      	str	r3, [sp, #12]
 8003870:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003872:	4813      	ldr	r0, [pc, #76]	; (80038c0 <HAL_SPI_MspInit+0xd0>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003874:	f043 0304 	orr.w	r3, r3, #4
 8003878:	6313      	str	r3, [r2, #48]	; 0x30
 800387a:	6b13      	ldr	r3, [r2, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800387c:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 80038a8 <HAL_SPI_MspInit+0xb8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003880:	f003 0304 	and.w	r3, r3, #4
 8003884:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003886:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003888:	2306      	movs	r3, #6
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800388a:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800388c:	ed8d 7b04 	vstr	d7, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003890:	e9cd 2307 	strd	r2, r3, [sp, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003894:	9c03      	ldr	r4, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003896:	f000 ff21 	bl	80046dc <HAL_GPIO_Init>
}
 800389a:	b00a      	add	sp, #40	; 0x28
 800389c:	bd10      	pop	{r4, pc}
 800389e:	bf00      	nop
 80038a0:	000000e0 	.word	0x000000e0
 80038a4:	00000002 	.word	0x00000002
 80038a8:	00001c00 	.word	0x00001c00
 80038ac:	00000002 	.word	0x00000002
 80038b0:	40013000 	.word	0x40013000
 80038b4:	40003c00 	.word	0x40003c00
 80038b8:	40023800 	.word	0x40023800
 80038bc:	40020000 	.word	0x40020000
 80038c0:	40020800 	.word	0x40020800

080038c4 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 80038c4:	4b0a      	ldr	r3, [pc, #40]	; (80038f0 <HAL_TIM_Base_MspInit+0x2c>)
 80038c6:	6802      	ldr	r2, [r0, #0]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d000      	beq.n	80038ce <HAL_TIM_Base_MspInit+0xa>
 80038cc:	4770      	bx	lr
{
 80038ce:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80038d0:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 80038d4:	2200      	movs	r2, #0
 80038d6:	9201      	str	r2, [sp, #4]
 80038d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038da:	f042 0201 	orr.w	r2, r2, #1
 80038de:	645a      	str	r2, [r3, #68]	; 0x44
 80038e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	9301      	str	r3, [sp, #4]
 80038e8:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80038ea:	b002      	add	sp, #8
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	40010000 	.word	0x40010000
 80038f4:	00000000 	.word	0x00000000

080038f8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80038f8:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_encoder->Instance==TIM2)
 80038fa:	6802      	ldr	r2, [r0, #0]
{
 80038fc:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038fe:	2300      	movs	r3, #0
  if(htim_encoder->Instance==TIM2)
 8003900:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003904:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003908:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800390c:	9306      	str	r3, [sp, #24]
  if(htim_encoder->Instance==TIM2)
 800390e:	d002      	beq.n	8003916 <HAL_TIM_Encoder_MspInit+0x1e>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003910:	b009      	add	sp, #36	; 0x24
 8003912:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003916:	f502 320e 	add.w	r2, r2, #145408	; 0x23800
 800391a:	9300      	str	r3, [sp, #0]
 800391c:	6c10      	ldr	r0, [r2, #64]	; 0x40
 800391e:	f040 0001 	orr.w	r0, r0, #1
 8003922:	6410      	str	r0, [r2, #64]	; 0x40
 8003924:	6c10      	ldr	r0, [r2, #64]	; 0x40
 8003926:	f000 0001 	and.w	r0, r0, #1
 800392a:	9000      	str	r0, [sp, #0]
 800392c:	9800      	ldr	r0, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800392e:	9301      	str	r3, [sp, #4]
 8003930:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003932:	480d      	ldr	r0, [pc, #52]	; (8003968 <HAL_TIM_Encoder_MspInit+0x70>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003934:	f043 0302 	orr.w	r3, r3, #2
 8003938:	6313      	str	r3, [r2, #48]	; 0x30
 800393a:	6b13      	ldr	r3, [r2, #48]	; 0x30
    GPIO_InitStruct.Pin = M1_ENCODER_A_Pin|M1_ENCODER_B_Pin;
 800393c:	ed9f 7b08 	vldr	d7, [pc, #32]	; 8003960 <HAL_TIM_Encoder_MspInit+0x68>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003940:	f003 0302 	and.w	r3, r3, #2
 8003944:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003946:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003948:	2301      	movs	r3, #1
    GPIO_InitStruct.Pin = M1_ENCODER_A_Pin|M1_ENCODER_B_Pin;
 800394a:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800394e:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003950:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003952:	f000 fec3 	bl	80046dc <HAL_GPIO_Init>
}
 8003956:	b009      	add	sp, #36	; 0x24
 8003958:	f85d fb04 	ldr.w	pc, [sp], #4
 800395c:	f3af 8000 	nop.w
 8003960:	00000300 	.word	0x00000300
 8003964:	00000002 	.word	0x00000002
 8003968:	40020400 	.word	0x40020400

0800396c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800396c:	b5d0      	push	{r4, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 800396e:	4a1f      	ldr	r2, [pc, #124]	; (80039ec <HAL_TIM_MspPostInit+0x80>)
 8003970:	6801      	ldr	r1, [r0, #0]
{
 8003972:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003974:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 8003976:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003978:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800397c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003980:	9306      	str	r3, [sp, #24]
  if(htim->Instance==TIM1)
 8003982:	d001      	beq.n	8003988 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003984:	b008      	add	sp, #32
 8003986:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003988:	f502 329c 	add.w	r2, r2, #79872	; 0x13800
 800398c:	9300      	str	r3, [sp, #0]
 800398e:	6b11      	ldr	r1, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003990:	4817      	ldr	r0, [pc, #92]	; (80039f0 <HAL_TIM_MspPostInit+0x84>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003992:	f041 0102 	orr.w	r1, r1, #2
 8003996:	6311      	str	r1, [r2, #48]	; 0x30
 8003998:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800399a:	f001 0102 	and.w	r1, r1, #2
 800399e:	9100      	str	r1, [sp, #0]
 80039a0:	9900      	ldr	r1, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039a2:	9301      	str	r3, [sp, #4]
 80039a4:	6b13      	ldr	r3, [r2, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80039a6:	2401      	movs	r4, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039a8:	4323      	orrs	r3, r4
 80039aa:	6313      	str	r3, [r2, #48]	; 0x30
 80039ac:	6b13      	ldr	r3, [r2, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80039ae:	9406      	str	r4, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039b0:	4023      	ands	r3, r4
 80039b2:	9301      	str	r3, [sp, #4]
 80039b4:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039b6:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 80039b8:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80039bc:	2302      	movs	r3, #2
 80039be:	2602      	movs	r6, #2
 80039c0:	2702      	movs	r7, #2
 80039c2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80039c6:	e9cd 6704 	strd	r6, r7, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039ca:	f000 fe87 	bl	80046dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 80039ce:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80039d2:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039d4:	4807      	ldr	r0, [pc, #28]	; (80039f4 <HAL_TIM_MspPostInit+0x88>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80039d6:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039d8:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 80039da:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80039de:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039e2:	f000 fe7b 	bl	80046dc <HAL_GPIO_Init>
}
 80039e6:	b008      	add	sp, #32
 80039e8:	bdd0      	pop	{r4, r6, r7, pc}
 80039ea:	bf00      	nop
 80039ec:	40010000 	.word	0x40010000
 80039f0:	40020400 	.word	0x40020400
 80039f4:	40020000 	.word	0x40020000

080039f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80039f8:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART2)
 80039fa:	4b32      	ldr	r3, [pc, #200]	; (8003ac4 <HAL_UART_MspInit+0xcc>)
 80039fc:	6802      	ldr	r2, [r0, #0]
{
 80039fe:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a00:	2400      	movs	r4, #0
  if(huart->Instance==USART2)
 8003a02:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a04:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8003a08:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8003a0c:	9406      	str	r4, [sp, #24]
  if(huart->Instance==USART2)
 8003a0e:	d001      	beq.n	8003a14 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003a10:	b008      	add	sp, #32
 8003a12:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8003a14:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8003a18:	9400      	str	r4, [sp, #0]
 8003a1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003a1c:	4e2a      	ldr	r6, [pc, #168]	; (8003ac8 <HAL_UART_MspInit+0xd0>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8003a1e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003a22:	641a      	str	r2, [r3, #64]	; 0x40
 8003a24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a26:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8003a2a:	9200      	str	r2, [sp, #0]
 8003a2c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a2e:	9401      	str	r4, [sp, #4]
 8003a30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a32:	f042 0201 	orr.w	r2, r2, #1
 8003a36:	631a      	str	r2, [r3, #48]	; 0x30
 8003a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3a:	f003 0301 	and.w	r3, r3, #1
 8003a3e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8003a40:	220c      	movs	r2, #12
 8003a42:	2302      	movs	r3, #2
 8003a44:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003a48:	4605      	mov	r5, r0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003a4a:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a4c:	481f      	ldr	r0, [pc, #124]	; (8003acc <HAL_UART_MspInit+0xd4>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003a4e:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a50:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a52:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a54:	f000 fe42 	bl	80046dc <HAL_GPIO_Init>
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003a58:	4a1d      	ldr	r2, [pc, #116]	; (8003ad0 <HAL_UART_MspInit+0xd8>)
 8003a5a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003a5e:	e9c6 2300 	strd	r2, r3, [r6]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003a62:	4630      	mov	r0, r6
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003a64:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a68:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a6c:	e9c6 3404 	strd	r3, r4, [r6, #16]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003a70:	e9c6 4406 	strd	r4, r4, [r6, #24]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a74:	e9c6 4408 	strd	r4, r4, [r6, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003a78:	f000 fd98 	bl	80045ac <HAL_DMA_Init>
 8003a7c:	b9d8      	cbnz	r0, 8003ab6 <HAL_UART_MspInit+0xbe>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003a7e:	4c15      	ldr	r4, [pc, #84]	; (8003ad4 <HAL_UART_MspInit+0xdc>)
 8003a80:	4915      	ldr	r1, [pc, #84]	; (8003ad8 <HAL_UART_MspInit+0xe0>)
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003a82:	63ae      	str	r6, [r5, #56]	; 0x38
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003a84:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a88:	2300      	movs	r3, #0
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003a8a:	e9c4 1200 	strd	r1, r2, [r4]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003a8e:	4620      	mov	r0, r4
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003a90:	2140      	movs	r1, #64	; 0x40
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003a92:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a96:	e9c4 1302 	strd	r1, r3, [r4, #8]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a9a:	e9c4 3305 	strd	r3, r3, [r4, #20]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003a9e:	e9c4 3307 	strd	r3, r3, [r4, #28]
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003aa2:	63b5      	str	r5, [r6, #56]	; 0x38
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003aa4:	6122      	str	r2, [r4, #16]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003aa6:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003aa8:	f000 fd80 	bl	80045ac <HAL_DMA_Init>
 8003aac:	b930      	cbnz	r0, 8003abc <HAL_UART_MspInit+0xc4>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003aae:	636c      	str	r4, [r5, #52]	; 0x34
 8003ab0:	63a5      	str	r5, [r4, #56]	; 0x38
}
 8003ab2:	b008      	add	sp, #32
 8003ab4:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8003ab6:	f7fd fb5b 	bl	8001170 <Error_Handler>
 8003aba:	e7e0      	b.n	8003a7e <HAL_UART_MspInit+0x86>
      Error_Handler();
 8003abc:	f7fd fb58 	bl	8001170 <Error_Handler>
 8003ac0:	e7f5      	b.n	8003aae <HAL_UART_MspInit+0xb6>
 8003ac2:	bf00      	nop
 8003ac4:	40004400 	.word	0x40004400
 8003ac8:	2000047c 	.word	0x2000047c
 8003acc:	40020000 	.word	0x40020000
 8003ad0:	40026088 	.word	0x40026088
 8003ad4:	200004dc 	.word	0x200004dc
 8003ad8:	400260a0 	.word	0x400260a0

08003adc <ADC_IRQHandler>:
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_JEOS) == (LL_ADC_FLAG_JEOS));
 8003adc:	4b05      	ldr	r3, [pc, #20]	; (8003af4 <ADC_IRQHandler+0x18>)
 8003ade:	681a      	ldr	r2, [r3, #0]
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  if(LL_ADC_IsActiveFlag_JEOS(ADC1))
 8003ae0:	0752      	lsls	r2, r2, #29
 8003ae2:	d400      	bmi.n	8003ae6 <ADC_IRQHandler+0xa>
    TSK_HighFrequencyTask();          /*GUI, this section is present only if DAC is disabled*/
  }
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003ae4:	4770      	bx	lr
    ADC1->SR &= ~(uint32_t)(LL_ADC_FLAG_JEOS | LL_ADC_FLAG_JSTRT);
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	f022 020c 	bic.w	r2, r2, #12
 8003aec:	601a      	str	r2, [r3, #0]
    TSK_HighFrequencyTask();          /*GUI, this section is present only if DAC is disabled*/
 8003aee:	f7fe b873 	b.w	8001bd8 <TSK_HighFrequencyTask>
 8003af2:	bf00      	nop
 8003af4:	40012000 	.word	0x40012000

08003af8 <TIM1_UP_TIM10_IRQHandler>:
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8003af8:	4b03      	ldr	r3, [pc, #12]	; (8003b08 <TIM1_UP_TIM10_IRQHandler+0x10>)
  /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

  /* USER CODE END TIMx_UP_M1_IRQn 0 */

  LL_TIM_ClearFlag_UPDATE(TIM1);
  R3_1_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 8003afa:	4804      	ldr	r0, [pc, #16]	; (8003b0c <TIM1_UP_TIM10_IRQHandler+0x14>)
 8003afc:	f06f 0201 	mvn.w	r2, #1
 8003b00:	611a      	str	r2, [r3, #16]
 8003b02:	f002 bf5d 	b.w	80069c0 <R3_1_TIMx_UP_IRQHandler>
 8003b06:	bf00      	nop
 8003b08:	40010000 	.word	0x40010000
 8003b0c:	20000150 	.word	0x20000150

08003b10 <TIM1_BRK_TIM9_IRQHandler>:
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 8003b10:	4907      	ldr	r1, [pc, #28]	; (8003b30 <TIM1_BRK_TIM9_IRQHandler+0x20>)
/**
  * @brief  This function handles first motor BRK interrupt.
  * @param  None
  */
void TIMx_BRK_M1_IRQHandler(void)
{
 8003b12:	b508      	push	{r3, lr}
 8003b14:	690b      	ldr	r3, [r1, #16]
 8003b16:	061b      	lsls	r3, r3, #24
 8003b18:	d505      	bpl.n	8003b26 <TIM1_BRK_TIM9_IRQHandler+0x16>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8003b1a:	f06f 0380 	mvn.w	r3, #128	; 0x80

  /* USER CODE END TIMx_BRK_M1_IRQn 0 */
  if (LL_TIM_IsActiveFlag_BRK(TIM1))
  {
    LL_TIM_ClearFlag_BRK(TIM1);
    PWMC_OVP_Handler(&PWM_Handle_M1._Super, TIM1);
 8003b1e:	4805      	ldr	r0, [pc, #20]	; (8003b34 <TIM1_BRK_TIM9_IRQHandler+0x24>)
 8003b20:	610b      	str	r3, [r1, #16]
 8003b22:	f7fe fd2d 	bl	8002580 <PWMC_OVP_Handler>
  MC_Scheduler();

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 8003b26:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_Scheduler();
 8003b2a:	f7fe b80f 	b.w	8001b4c <MC_Scheduler>
 8003b2e:	bf00      	nop
 8003b30:	40010000 	.word	0x40010000
 8003b34:	20000150 	.word	0x20000150

08003b38 <TIM2_IRQHandler>:
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 0 */

  /* USER CODE END SPD_TIM_M1_IRQn 0 */

 /* Encoder Timer UPDATE IT is dynamicaly enabled/disabled, checking enable state is required */
  if (LL_TIM_IsEnabledIT_UPDATE (ENCODER_M1.TIMx) && LL_TIM_IsActiveFlag_UPDATE (ENCODER_M1.TIMx))
 8003b38:	4806      	ldr	r0, [pc, #24]	; (8003b54 <TIM2_IRQHandler+0x1c>)
 8003b3a:	6a03      	ldr	r3, [r0, #32]
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsEnabledIT_UPDATE(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->DIER, TIM_DIER_UIE) == (TIM_DIER_UIE)) ? 1UL : 0UL);
 8003b3c:	68da      	ldr	r2, [r3, #12]
 8003b3e:	07d1      	lsls	r1, r2, #31
 8003b40:	d507      	bpl.n	8003b52 <TIM2_IRQHandler+0x1a>
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8003b42:	691a      	ldr	r2, [r3, #16]
 8003b44:	07d2      	lsls	r2, r2, #31
 8003b46:	d504      	bpl.n	8003b52 <TIM2_IRQHandler+0x1a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8003b48:	f06f 0201 	mvn.w	r2, #1
 8003b4c:	611a      	str	r2, [r3, #16]
  {
    LL_TIM_ClearFlag_UPDATE(ENCODER_M1.TIMx);
    ENC_IRQHandler(&ENCODER_M1);
 8003b4e:	f002 b8cf 	b.w	8005cf0 <ENC_IRQHandler>
  /* No other IT to manage for encoder config */
  }
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 1 */

  /* USER CODE END SPD_TIM_M1_IRQn 1 */
}
 8003b52:	4770      	bx	lr
 8003b54:	20000020 	.word	0x20000020

08003b58 <DMA1_Stream5_IRQHandler>:
    retVal = 0;
  }
  else
  {
    register __IO uint32_t *preg = __DMA_PTR_REG_OFFSET(DMAx->LISR,(Stream<=3)?0:1);
    retVal = ((READ_BIT(*preg, 1 << __LL_DMA_IT_TC_BIT(Stream)) == (1 << __LL_DMA_IT_TC_BIT(Stream))) ? 1UL : 0UL);
 8003b58:	4b05      	ldr	r3, [pc, #20]	; (8003b70 <DMA1_Stream5_IRQHandler+0x18>)
 8003b5a:	685a      	ldr	r2, [r3, #4]
 8003b5c:	0512      	lsls	r2, r2, #20
 8003b5e:	d400      	bmi.n	8003b62 <DMA1_Stream5_IRQHandler+0xa>
  }
  /* USER CODE BEGIN DMA1_Stream5_IRQHandler 1 */

  /* USER CODE BEGIN DMA1_Stream5_IRQHandler 1 */

}
 8003b60:	4770      	bx	lr
    WRITE_REG (*preg, 1 << __LL_DMA_IT_TC_BIT(Stream));
 8003b62:	f44f 6200 	mov.w	r2, #2048	; 0x800
    ASPEP_HWDataReceivedIT (&aspepOverUartA);
 8003b66:	4803      	ldr	r0, [pc, #12]	; (8003b74 <DMA1_Stream5_IRQHandler+0x1c>)
 8003b68:	60da      	str	r2, [r3, #12]
 8003b6a:	f7fd b805 	b.w	8000b78 <ASPEP_HWDataReceivedIT>
 8003b6e:	bf00      	nop
 8003b70:	40026000 	.word	0x40026000
 8003b74:	20000324 	.word	0x20000324

08003b78 <USART2_IRQHandler>:
/**
  * @brief  This function handles USART interrupt request.
  * @param  None
  */
void USART2_IRQHandler(void)
{
 8003b78:	b510      	push	{r4, lr}
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8003b7a:	4b51      	ldr	r3, [pc, #324]	; (8003cc0 <USART2_IRQHandler+0x148>)
 8003b7c:	681a      	ldr	r2, [r3, #0]
  /* USER CODE BEGIN USART2_IRQHandler 0 */

  /* USER CODE END UUSART2_IRQHandler 0 */

  if ( LL_USART_IsActiveFlag_TC (USARTA) )
 8003b7e:	0651      	lsls	r1, r2, #25
{
 8003b80:	b084      	sub	sp, #16
  if ( LL_USART_IsActiveFlag_TC (USARTA) )
 8003b82:	f100 808e 	bmi.w	8003ca2 <USART2_IRQHandler+0x12a>
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8003b86:	4b4e      	ldr	r3, [pc, #312]	; (8003cc0 <USART2_IRQHandler+0x148>)
 8003b88:	681a      	ldr	r2, [r3, #0]
    LL_USART_ClearFlag_TC (USARTA);
    /* Data Sent by UART*/
    /* Need to free the buffer, and to check pending transfer*/
    ASPEP_HWDataTransmittedIT (&aspepOverUartA);
  }
  if ( (LL_USART_IsActiveFlag_ORE (USARTA) || LL_USART_IsActiveFlag_FE (USARTA) || LL_USART_IsActiveFlag_NE (USARTA))
 8003b8a:	0712      	lsls	r2, r2, #28
 8003b8c:	d402      	bmi.n	8003b94 <USART2_IRQHandler+0x1c>
  return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	0794      	lsls	r4, r2, #30
 8003b92:	d57e      	bpl.n	8003c92 <USART2_IRQHandler+0x11a>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_ERROR(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE));
 8003b94:	4b4a      	ldr	r3, [pc, #296]	; (8003cc0 <USART2_IRQHandler+0x148>)
 8003b96:	695a      	ldr	r2, [r3, #20]
        && LL_USART_IsEnabledIT_ERROR (USARTA) )
 8003b98:	07d1      	lsls	r1, r2, #31
 8003b9a:	d52d      	bpl.n	8003bf8 <USART2_IRQHandler+0x80>
  tmpreg = USARTx->SR;
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	9203      	str	r2, [sp, #12]
  (void) tmpreg;
 8003ba0:	9a03      	ldr	r2, [sp, #12]
  tmpreg = USARTx->DR;
 8003ba2:	685a      	ldr	r2, [r3, #4]
 8003ba4:	9203      	str	r2, [sp, #12]
  (void) tmpreg;
 8003ba6:	9a03      	ldr	r2, [sp, #12]
  tmpreg = USARTx->SR;
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	9202      	str	r2, [sp, #8]
  (void) tmpreg;
 8003bac:	9a02      	ldr	r2, [sp, #8]
  tmpreg = USARTx->DR;
 8003bae:	685a      	ldr	r2, [r3, #4]
 8003bb0:	9202      	str	r2, [sp, #8]
  (void) tmpreg;
 8003bb2:	9a02      	ldr	r2, [sp, #8]
  tmpreg = USARTx->SR;
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 8003bb8:	9a01      	ldr	r2, [sp, #4]
  tmpreg = USARTx->DR;
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8003bbe:	9b01      	ldr	r3, [sp, #4]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003bc4:	f202 4314 	addw	r3, r2, #1044	; 0x414
 8003bc8:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
 8003bcc:	f023 0301 	bic.w	r3, r3, #1
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd0:	f202 4014 	addw	r0, r2, #1044	; 0x414
 8003bd4:	e840 3100 	strex	r1, r3, [r0]
 8003bd8:	2900      	cmp	r1, #0
 8003bda:	d1f3      	bne.n	8003bc4 <USART2_IRQHandler+0x4c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bdc:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003be0:	f202 430c 	addw	r3, r2, #1036	; 0x40c
 8003be4:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8003be8:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bec:	f202 400c 	addw	r0, r2, #1036	; 0x40c
 8003bf0:	e840 3100 	strex	r1, r3, [r0]
 8003bf4:	2900      	cmp	r1, #0
 8003bf6:	d1f3      	bne.n	8003be0 <USART2_IRQHandler+0x68>
  return (READ_BIT(USARTx->SR, USART_SR_IDLE) == (USART_SR_IDLE));
 8003bf8:	4b31      	ldr	r3, [pc, #196]	; (8003cc0 <USART2_IRQHandler+0x148>)
 8003bfa:	681a      	ldr	r2, [r3, #0]
    LL_USART_ClearFlag_NE(USARTA);
    /* We disable ERROR interrupt to avoid to trig one Overrun IT per additional byte recevied*/
    LL_USART_DisableIT_ERROR (USARTA);
    LL_USART_EnableIT_IDLE (USARTA);
  }
  if ( LL_USART_IsActiveFlag_IDLE (USARTA) && LL_USART_IsEnabledIT_IDLE (USARTA) )
 8003bfc:	06d2      	lsls	r2, r2, #27
 8003bfe:	d546      	bpl.n	8003c8e <USART2_IRQHandler+0x116>
  return (READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE));
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	06db      	lsls	r3, r3, #27
 8003c04:	d543      	bpl.n	8003c8e <USART2_IRQHandler+0x116>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c06:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003c0a:	f202 430c 	addw	r3, r2, #1036	; 0x40c
 8003c0e:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8003c12:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c16:	f202 400c 	addw	r0, r2, #1036	; 0x40c
 8003c1a:	e840 3100 	strex	r1, r3, [r0]
 8003c1e:	2900      	cmp	r1, #0
 8003c20:	d1f3      	bne.n	8003c0a <USART2_IRQHandler+0x92>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c22:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003c26:	f202 4314 	addw	r3, r2, #1044	; 0x414
 8003c2a:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8003c2e:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c32:	f202 4014 	addw	r0, r2, #1044	; 0x414
 8003c36:	e840 3100 	strex	r1, r3, [r0]
 8003c3a:	2900      	cmp	r1, #0
 8003c3c:	d1f3      	bne.n	8003c26 <USART2_IRQHandler+0xae>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c3e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003c42:	f202 4314 	addw	r3, r2, #1044	; 0x414
 8003c46:	e853 3f00 	ldrex	r3, [r3]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableDMAReq_RX(USART_TypeDef *USARTx)
{
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_DMAR);
 8003c4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c4e:	f202 4014 	addw	r0, r2, #1044	; 0x414
 8003c52:	e840 3100 	strex	r1, r3, [r0]
 8003c56:	2900      	cmp	r1, #0
 8003c58:	d1f3      	bne.n	8003c42 <USART2_IRQHandler+0xca>
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8003c5a:	4b19      	ldr	r3, [pc, #100]	; (8003cc0 <USART2_IRQHandler+0x148>)
 8003c5c:	685b      	ldr	r3, [r3, #4]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c5e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003c62:	f202 4314 	addw	r3, r2, #1044	; 0x414
 8003c66:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8003c6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c6e:	f202 4014 	addw	r0, r2, #1044	; 0x414
 8003c72:	e840 3100 	strex	r1, r3, [r0]
 8003c76:	2900      	cmp	r1, #0
 8003c78:	d1f3      	bne.n	8003c62 <USART2_IRQHandler+0xea>
    WRITE_REG (*preg, 1 << __LL_DMA_IT_TE_BIT(Stream));
 8003c7a:	4b12      	ldr	r3, [pc, #72]	; (8003cc4 <USART2_IRQHandler+0x14c>)
    /* We disable the DMA request, Read the dummy data, endable back the DMA request */
    LL_USART_DisableDMAReq_RX (USARTA);
    LL_USART_ReceiveData8(USARTA);
    LL_USART_EnableDMAReq_RX (USARTA);
    LL_DMA_ClearFlag_TE (DMA_RX_A, DMACH_RX_A );
    ASPEP_HWDMAReset (&aspepOverUartA);
 8003c7c:	4812      	ldr	r0, [pc, #72]	; (8003cc8 <USART2_IRQHandler+0x150>)
 8003c7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c82:	60da      	str	r2, [r3, #12]
  }

  /* USER CODE BEGIN USART2_IRQHandler 1 */

  /* USER CODE END USART2_IRQHandler 1 */
}
 8003c84:	b004      	add	sp, #16
 8003c86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ASPEP_HWDMAReset (&aspepOverUartA);
 8003c8a:	f7fc bfc3 	b.w	8000c14 <ASPEP_HWDMAReset>
}
 8003c8e:	b004      	add	sp, #16
 8003c90:	bd10      	pop	{r4, pc}
  return (READ_BIT(USARTx->SR, USART_SR_NE) == (USART_SR_NE));
 8003c92:	681b      	ldr	r3, [r3, #0]
  if ( (LL_USART_IsActiveFlag_ORE (USARTA) || LL_USART_IsActiveFlag_FE (USARTA) || LL_USART_IsActiveFlag_NE (USARTA))
 8003c94:	0758      	lsls	r0, r3, #29
 8003c96:	d5af      	bpl.n	8003bf8 <USART2_IRQHandler+0x80>
  return (READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE));
 8003c98:	4b09      	ldr	r3, [pc, #36]	; (8003cc0 <USART2_IRQHandler+0x148>)
 8003c9a:	695a      	ldr	r2, [r3, #20]
        && LL_USART_IsEnabledIT_ERROR (USARTA) )
 8003c9c:	07d1      	lsls	r1, r2, #31
 8003c9e:	d5ab      	bpl.n	8003bf8 <USART2_IRQHandler+0x80>
 8003ca0:	e77c      	b.n	8003b9c <USART2_IRQHandler+0x24>
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8003ca2:	4908      	ldr	r1, [pc, #32]	; (8003cc4 <USART2_IRQHandler+0x14c>)
    ASPEP_HWDataTransmittedIT (&aspepOverUartA);
 8003ca4:	4808      	ldr	r0, [pc, #32]	; (8003cc8 <USART2_IRQHandler+0x150>)
 8003ca6:	f8d1 20a0 	ldr.w	r2, [r1, #160]	; 0xa0
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 8003caa:	f06f 0440 	mvn.w	r4, #64	; 0x40
 8003cae:	f022 0201 	bic.w	r2, r2, #1
 8003cb2:	f8c1 20a0 	str.w	r2, [r1, #160]	; 0xa0
 8003cb6:	601c      	str	r4, [r3, #0]
 8003cb8:	f7fc fdb2 	bl	8000820 <ASPEP_HWDataTransmittedIT>
 8003cbc:	e763      	b.n	8003b86 <USART2_IRQHandler+0xe>
 8003cbe:	bf00      	nop
 8003cc0:	40004400 	.word	0x40004400
 8003cc4:	40026000 	.word	0x40026000
 8003cc8:	20000324 	.word	0x20000324

08003ccc <HardFault_Handler>:
/**
  * @brief  This function handles Hard Fault exception.
  * @param  None
  */
void HardFault_Handler(void)
{
 8003ccc:	b508      	push	{r3, lr}
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 8003cce:	f7fe f86f 	bl	8001db0 <TSK_HardwareFaultTask>

  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8003cd2:	e7fe      	b.n	8003cd2 <HardFault_Handler+0x6>

08003cd4 <SysTick_Handler>:
 /* USER CODE END HardFault_IRQn 1 */

}

void SysTick_Handler(void)
{
 8003cd4:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 8003cd6:	4c0a      	ldr	r4, [pc, #40]	; (8003d00 <SysTick_Handler+0x2c>)
 8003cd8:	7823      	ldrb	r3, [r4, #0]
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d006      	beq.n	8003cec <SysTick_Handler+0x18>
  {
    HAL_IncTick();
    HAL_SYSTICK_IRQHandler();
    SystickDividerCounter = 0;
  }
  SystickDividerCounter ++;
 8003cde:	3301      	adds	r3, #1
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	7023      	strb	r3, [r4, #0]
  /* USER CODE END SysTick_IRQn 1 */
    MC_RunMotorControlTasks();

  /* USER CODE BEGIN SysTick_IRQn 2 */
  /* USER CODE END SysTick_IRQn 2 */
}
 8003ce4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 8003ce8:	f7fe b856 	b.w	8001d98 <MC_RunMotorControlTasks>
    HAL_IncTick();
 8003cec:	f000 f910 	bl	8003f10 <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 8003cf0:	f000 fc58 	bl	80045a4 <HAL_SYSTICK_IRQHandler>
 8003cf4:	2301      	movs	r3, #1
  SystickDividerCounter ++;
 8003cf6:	7023      	strb	r3, [r4, #0]
}
 8003cf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 8003cfc:	f7fe b84c 	b.w	8001d98 <MC_RunMotorControlTasks>
 8003d00:	20000398 	.word	0x20000398

08003d04 <EXTI15_10_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
  return (uint32_t)(READ_BIT(EXTI->PR, ExtiLine));
 8003d04:	4b04      	ldr	r3, [pc, #16]	; (8003d18 <EXTI15_10_IRQHandler+0x14>)
 8003d06:	695a      	ldr	r2, [r3, #20]
  * @brief  This function handles Button IRQ on PIN PC13.
  */
void EXTI15_10_IRQHandler (void)
{
	/* USER CODE BEGIN START_STOP_BTN */
  if ( LL_EXTI_ReadFlag_0_31(LL_EXTI_LINE_13) )
 8003d08:	0492      	lsls	r2, r2, #18
 8003d0a:	d400      	bmi.n	8003d0e <EXTI15_10_IRQHandler+0xa>
  {
    LL_EXTI_ClearFlag_0_31 (LL_EXTI_LINE_13);
    UI_HandleStartStopButton_cb ();
  }

}
 8003d0c:	4770      	bx	lr
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 8003d0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003d12:	615a      	str	r2, [r3, #20]
    UI_HandleStartStopButton_cb ();
 8003d14:	f7fe b85c 	b.w	8001dd0 <UI_HandleStartStopButton_cb>
 8003d18:	40013c00 	.word	0x40013c00

08003d1c <UASPEP_INIT>:
  }
  else
  {
#endif
    /* Enable DMA UART */
    LL_USART_ClearFlag_TC(pHandle->USARTx);
 8003d1c:	6802      	ldr	r2, [r0, #0]
 8003d1e:	4611      	mov	r1, r2
 8003d20:	f06f 0340 	mvn.w	r3, #64	; 0x40
{
 8003d24:	b470      	push	{r4, r5, r6}
 8003d26:	f841 3b0c 	str.w	r3, [r1], #12
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d2a:	e851 3f00 	ldrex	r3, [r1]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 8003d2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d32:	e841 3400 	strex	r4, r3, [r1]
 8003d36:	2c00      	cmp	r4, #0
 8003d38:	d1f7      	bne.n	8003d2a <UASPEP_INIT+0xe>
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8003d3a:	f102 0114 	add.w	r1, r2, #20
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d3e:	e851 3f00 	ldrex	r3, [r1]
 8003d42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d46:	e841 3400 	strex	r4, r3, [r1]
 8003d4a:	2c00      	cmp	r4, #0
 8003d4c:	d1f7      	bne.n	8003d3e <UASPEP_INIT+0x22>
  * @param  PeriphAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t PeriphAddress)
{
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 8003d4e:	6901      	ldr	r1, [r0, #16]
 8003d50:	4e16      	ldr	r6, [pc, #88]	; (8003dac <UASPEP_INIT+0x90>)
 8003d52:	6883      	ldr	r3, [r0, #8]
 8003d54:	5c74      	ldrb	r4, [r6, r1]
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 8003d56:	6845      	ldr	r5, [r0, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 8003d58:	4423      	add	r3, r4
    LL_USART_EnableDMAReq_TX(pHandle->USARTx);

    /* Write the USART_TDR register address in the DMA control register to configure it as
     * the destination of the transfer */
    //cstat !MISRAC2012-Rule-11.4
    LL_DMA_SetPeriphAddress(pHandle->txDMA, pHandle->txChannel, (uint32_t)&pHandle->USARTx->DR);
 8003d5a:	1d11      	adds	r1, r2, #4
 8003d5c:	6099      	str	r1, [r3, #8]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 8003d5e:	68c3      	ldr	r3, [r0, #12]
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 8003d60:	4611      	mov	r1, r2
 8003d62:	f06f 0440 	mvn.w	r4, #64	; 0x40
 8003d66:	f841 4b14 	str.w	r4, [r1], #20
 8003d6a:	5cf4      	ldrb	r4, [r6, r3]
 8003d6c:	592b      	ldr	r3, [r5, r4]
 8003d6e:	f043 0310 	orr.w	r3, r3, #16
 8003d72:	512b      	str	r3, [r5, r4]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d74:	e851 3f00 	ldrex	r3, [r1]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8003d78:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d7c:	e841 3400 	strex	r4, r3, [r1]
 8003d80:	2c00      	cmp	r4, #0
 8003d82:	d1f7      	bne.n	8003d74 <UASPEP_INIT+0x58>
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 8003d84:	68c3      	ldr	r3, [r0, #12]
 8003d86:	5cf3      	ldrb	r3, [r6, r3]
 8003d88:	441d      	add	r5, r3
    LL_USART_EnableIT_ERROR(pHandle->USARTx);

    /* Write the USART_RDR register address in the DMA control register to configure it as
     * the source of the transfer */
    //cstat !MISRAC2012-Rule-11.4
    LL_DMA_SetPeriphAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)&pHandle->USARTx->DR);
 8003d8a:	1d11      	adds	r1, r2, #4
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 8003d8c:	f06f 0340 	mvn.w	r3, #64	; 0x40
 8003d90:	60a9      	str	r1, [r5, #8]
 8003d92:	f842 3b14 	str.w	r3, [r2], #20
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d96:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8003d9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d9e:	e842 3100 	strex	r1, r3, [r2]
 8003da2:	2900      	cmp	r1, #0
 8003da4:	d1f7      	bne.n	8003d96 <UASPEP_INIT+0x7a>
}
 8003da6:	bc70      	pop	{r4, r5, r6}
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop
 8003dac:	080074f0 	.word	0x080074f0

08003db0 <UASPEP_SEND_PACKET>:
  * @param  pHWHandle Hardware components chosen for communication
  * @param  data Data to be transmitted to controller
  * @param  length Length of the data to be transmitted
  */
bool UASPEP_SEND_PACKET(void *pHWHandle, void *data, uint16_t length)
{
 8003db0:	b4f0      	push	{r4, r5, r6, r7}
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *)pHWHandle; //cstat !MISRAC2012-Rule-11.5
  bool result;
  if (0U == LL_DMA_IsEnabledStream(pHandle->txDMA, pHandle->txChannel))
 8003db2:	6905      	ldr	r5, [r0, #16]
  return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN) == (DMA_SxCR_EN));
 8003db4:	4e1b      	ldr	r6, [pc, #108]	; (8003e24 <UASPEP_SEND_PACKET+0x74>)
 8003db6:	6884      	ldr	r4, [r0, #8]
 8003db8:	5d73      	ldrb	r3, [r6, r5]
 8003dba:	58e7      	ldr	r7, [r4, r3]
 8003dbc:	07ff      	lsls	r7, r7, #31
 8003dbe:	4423      	add	r3, r4
 8003dc0:	d422      	bmi.n	8003e08 <UASPEP_SEND_PACKET+0x58>
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 8003dc2:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 8003dc4:	6859      	ldr	r1, [r3, #4]
 8003dc6:	0c09      	lsrs	r1, r1, #16
 8003dc8:	0409      	lsls	r1, r1, #16
 8003dca:	430a      	orrs	r2, r1
 8003dcc:	605a      	str	r2, [r3, #4]
  if (NULL == DMAx)
 8003dce:	b1ac      	cbz	r4, 8003dfc <UASPEP_SEND_PACKET+0x4c>
    register __IO uint32_t *preg = __DMA_PTR_REG_OFFSET(DMAx->LIFCR,(Stream<=3)?0:1);
 8003dd0:	2d03      	cmp	r5, #3
 8003dd2:	bf94      	ite	ls
 8003dd4:	2200      	movls	r2, #0
 8003dd6:	2201      	movhi	r2, #1
    WRITE_REG (*preg, 1 << __LL_DMA_IT_TC_BIT(Stream));
 8003dd8:	f015 0503 	ands.w	r5, r5, #3
    register __IO uint32_t *preg = __DMA_PTR_REG_OFFSET(DMAx->LIFCR,(Stream<=3)?0:1);
 8003ddc:	f104 0308 	add.w	r3, r4, #8
    WRITE_REG (*preg, 1 << __LL_DMA_IT_TC_BIT(Stream));
 8003de0:	d015      	beq.n	8003e0e <UASPEP_SEND_PACKET+0x5e>
 8003de2:	2d01      	cmp	r5, #1
 8003de4:	d01a      	beq.n	8003e1c <UASPEP_SEND_PACKET+0x6c>
 8003de6:	2d02      	cmp	r5, #2
 8003de8:	bf0c      	ite	eq
 8003dea:	f44f 1100 	moveq.w	r1, #2097152	; 0x200000
 8003dee:	f04f 6100 	movne.w	r1, #134217728	; 0x8000000
 8003df2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8003df6:	6903      	ldr	r3, [r0, #16]
 8003df8:	5cf3      	ldrb	r3, [r6, r3]
 8003dfa:	4423      	add	r3, r4
 8003dfc:	681a      	ldr	r2, [r3, #0]
    //cstat !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6
    LL_DMA_SetMemoryAddress(pHandle->txDMA, pHandle->txChannel, (uint32_t)data);
    LL_DMA_SetDataLength(pHandle->txDMA, pHandle->txChannel, length);
    LL_DMA_ClearFlag_TC(pHandle->txDMA, pHandle->txChannel);
    LL_DMA_EnableStream(pHandle->txDMA, pHandle->txChannel);
    result = true;
 8003dfe:	2001      	movs	r0, #1
 8003e00:	4302      	orrs	r2, r0
  else
  {
    result = false;
  }
  return (result);
}
 8003e02:	bcf0      	pop	{r4, r5, r6, r7}
 8003e04:	601a      	str	r2, [r3, #0]
 8003e06:	4770      	bx	lr
    result = false;
 8003e08:	2000      	movs	r0, #0
}
 8003e0a:	bcf0      	pop	{r4, r5, r6, r7}
 8003e0c:	4770      	bx	lr
 8003e0e:	2120      	movs	r1, #32
 8003e10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003e14:	6903      	ldr	r3, [r0, #16]
 8003e16:	5cf3      	ldrb	r3, [r6, r3]
 8003e18:	4423      	add	r3, r4
 8003e1a:	e7ef      	b.n	8003dfc <UASPEP_SEND_PACKET+0x4c>
 8003e1c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003e20:	e7f6      	b.n	8003e10 <UASPEP_SEND_PACKET+0x60>
 8003e22:	bf00      	nop
 8003e24:	080074f0 	.word	0x080074f0

08003e28 <UASPEP_RECEIVE_BUFFER>:
  * @param  pHWHandle Hardware components chosen for communication
  * @param  buffer Buffer which will receive the communicated data
  * @param  length Length of the received data
  */
void UASPEP_RECEIVE_BUFFER(void *pHWHandle, void* buffer, uint16_t length)
{
 8003e28:	b430      	push	{r4, r5}
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 8003e2a:	68c3      	ldr	r3, [r0, #12]
 8003e2c:	4d09      	ldr	r5, [pc, #36]	; (8003e54 <UASPEP_RECEIVE_BUFFER+0x2c>)
 8003e2e:	6844      	ldr	r4, [r0, #4]
 8003e30:	5ce8      	ldrb	r0, [r5, r3]
 8003e32:	eb04 0c00 	add.w	ip, r4, r0
 8003e36:	f8cc 100c 	str.w	r1, [ip, #12]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 8003e3a:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8003e3e:	0c1b      	lsrs	r3, r3, #16
 8003e40:	041b      	lsls	r3, r3, #16
 8003e42:	431a      	orrs	r2, r3
 8003e44:	f8cc 2004 	str.w	r2, [ip, #4]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8003e48:	5823      	ldr	r3, [r4, r0]
 8003e4a:	f043 0301 	orr.w	r3, r3, #1
 8003e4e:	5023      	str	r3, [r4, r0]
  //cstat !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6
  LL_DMA_SetMemoryAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)buffer);
  LL_DMA_SetDataLength(pHandle->rxDMA, pHandle->rxChannel, length);

  LL_DMA_EnableStream(pHandle->rxDMA, pHandle->rxChannel);
}
 8003e50:	bc30      	pop	{r4, r5}
 8003e52:	4770      	bx	lr
 8003e54:	080074f0 	.word	0x080074f0

08003e58 <UASPEP_IDLE_ENABLE>:
  * @param  pHandle Handler of the current instance of the UASPEP component
  */
void UASPEP_IDLE_ENABLE(void *pHWHandle)
{
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *)pHWHandle; //cstat !MISRAC2012-Rule-11.5
  LL_USART_ClearFlag_IDLE(pHandle->USARTx);
 8003e58:	6802      	ldr	r2, [r0, #0]
{
 8003e5a:	b082      	sub	sp, #8
  tmpreg = USARTx->SR;
 8003e5c:	6813      	ldr	r3, [r2, #0]
 8003e5e:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8003e60:	9b01      	ldr	r3, [sp, #4]
  tmpreg = USARTx->DR;
 8003e62:	6853      	ldr	r3, [r2, #4]
 8003e64:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8003e66:	9b01      	ldr	r3, [sp, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8003e68:	320c      	adds	r2, #12
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e6a:	e852 3f00 	ldrex	r3, [r2]
 8003e6e:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e72:	e842 3100 	strex	r1, r3, [r2]
 8003e76:	2900      	cmp	r1, #0
 8003e78:	d1f7      	bne.n	8003e6a <UASPEP_IDLE_ENABLE+0x12>
  LL_USART_EnableIT_IDLE(pHandle->USARTx);
}
 8003e7a:	b002      	add	sp, #8
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop

08003e80 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003e80:	4a03      	ldr	r2, [pc, #12]	; (8003e90 <SystemInit+0x10>)
 8003e82:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003e86:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e8a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003e8e:	4770      	bx	lr
 8003e90:	e000ed00 	.word	0xe000ed00

08003e94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e94:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003e96:	4a0e      	ldr	r2, [pc, #56]	; (8003ed0 <HAL_InitTick+0x3c>)
 8003e98:	4b0e      	ldr	r3, [pc, #56]	; (8003ed4 <HAL_InitTick+0x40>)
 8003e9a:	7812      	ldrb	r2, [r2, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
{
 8003e9e:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003ea0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003ea4:	fbb0 f0f2 	udiv	r0, r0, r2
 8003ea8:	fbb3 f0f0 	udiv	r0, r3, r0
 8003eac:	f000 fb5e 	bl	800456c <HAL_SYSTICK_Config>
 8003eb0:	b908      	cbnz	r0, 8003eb6 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003eb2:	2d0f      	cmp	r5, #15
 8003eb4:	d901      	bls.n	8003eba <HAL_InitTick+0x26>
    return HAL_ERROR;
 8003eb6:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8003eb8:	bd38      	pop	{r3, r4, r5, pc}
 8003eba:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	4629      	mov	r1, r5
 8003ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ec4:	f000 fb06 	bl	80044d4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ec8:	4b03      	ldr	r3, [pc, #12]	; (8003ed8 <HAL_InitTick+0x44>)
 8003eca:	4620      	mov	r0, r4
 8003ecc:	601d      	str	r5, [r3, #0]
}
 8003ece:	bd38      	pop	{r3, r4, r5, pc}
 8003ed0:	200003a0 	.word	0x200003a0
 8003ed4:	2000039c 	.word	0x2000039c
 8003ed8:	200003a4 	.word	0x200003a4

08003edc <HAL_Init>:
{
 8003edc:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003ede:	4b0b      	ldr	r3, [pc, #44]	; (8003f0c <HAL_Init+0x30>)
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ee6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003eee:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ef6:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ef8:	2003      	movs	r0, #3
 8003efa:	f000 fad9 	bl	80044b0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8003efe:	2004      	movs	r0, #4
 8003f00:	f7ff ffc8 	bl	8003e94 <HAL_InitTick>
  HAL_MspInit();
 8003f04:	f7ff fba6 	bl	8003654 <HAL_MspInit>
}
 8003f08:	2000      	movs	r0, #0
 8003f0a:	bd08      	pop	{r3, pc}
 8003f0c:	40023c00 	.word	0x40023c00

08003f10 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003f10:	4a03      	ldr	r2, [pc, #12]	; (8003f20 <HAL_IncTick+0x10>)
 8003f12:	4b04      	ldr	r3, [pc, #16]	; (8003f24 <HAL_IncTick+0x14>)
 8003f14:	6811      	ldr	r1, [r2, #0]
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	440b      	add	r3, r1
 8003f1a:	6013      	str	r3, [r2, #0]
}
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	20001900 	.word	0x20001900
 8003f24:	200003a0 	.word	0x200003a0

08003f28 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003f28:	4b01      	ldr	r3, [pc, #4]	; (8003f30 <HAL_GetTick+0x8>)
 8003f2a:	6818      	ldr	r0, [r3, #0]
}
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	20001900 	.word	0x20001900

08003f34 <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003f34:	2800      	cmp	r0, #0
 8003f36:	f000 809e 	beq.w	8004076 <HAL_ADC_Init+0x142>
{
 8003f3a:	b538      	push	{r3, r4, r5, lr}
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003f3c:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8003f3e:	4604      	mov	r4, r0
 8003f40:	b13d      	cbz	r5, 8003f52 <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003f42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003f44:	06db      	lsls	r3, r3, #27
 8003f46:	d50c      	bpl.n	8003f62 <HAL_ADC_Init+0x2e>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003f48:	2300      	movs	r3, #0
 8003f4a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    tmp_hal_status = HAL_ERROR;
 8003f4e:	2001      	movs	r0, #1

  /* Return function status */
  return tmp_hal_status;
}
 8003f50:	bd38      	pop	{r3, r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 8003f52:	f7ff fb9d 	bl	8003690 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8003f56:	6465      	str	r5, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003f58:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hadc->Lock = HAL_UNLOCKED;
 8003f5a:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003f5e:	06db      	lsls	r3, r3, #27
 8003f60:	d4f2      	bmi.n	8003f48 <HAL_ADC_Init+0x14>
    ADC_STATE_CLR_SET(hadc->State,
 8003f62:	6c23      	ldr	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003f64:	4a47      	ldr	r2, [pc, #284]	; (8004084 <HAL_ADC_Init+0x150>)
    ADC_STATE_CLR_SET(hadc->State,
 8003f66:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003f6a:	f023 0302 	bic.w	r3, r3, #2
 8003f6e:	f043 0302 	orr.w	r3, r3, #2
 8003f72:	6423      	str	r3, [r4, #64]	; 0x40
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003f74:	6851      	ldr	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003f76:	6823      	ldr	r3, [r4, #0]
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003f78:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 8003f7c:	6051      	str	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003f7e:	6851      	ldr	r1, [r2, #4]
 8003f80:	6860      	ldr	r0, [r4, #4]
 8003f82:	4301      	orrs	r1, r0
 8003f84:	6051      	str	r1, [r2, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003f86:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003f88:	6920      	ldr	r0, [r4, #16]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003f8a:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003f8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f90:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003f92:	685a      	ldr	r2, [r3, #4]
 8003f94:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8003f98:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003f9a:	685a      	ldr	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003f9c:	68e0      	ldr	r0, [r4, #12]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003f9e:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003fa2:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003fa4:	685a      	ldr	r2, [r3, #4]
 8003fa6:	430a      	orrs	r2, r1
 8003fa8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003faa:	689a      	ldr	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003fac:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003fae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fb2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003fb4:	689a      	ldr	r2, [r3, #8]
 8003fb6:	4302      	orrs	r2, r0
 8003fb8:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003fba:	4a33      	ldr	r2, [pc, #204]	; (8004088 <HAL_ADC_Init+0x154>)
 8003fbc:	4291      	cmp	r1, r2
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003fbe:	689a      	ldr	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003fc0:	d051      	beq.n	8004066 <HAL_ADC_Init+0x132>
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003fc2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003fc6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003fc8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003fca:	689a      	ldr	r2, [r3, #8]
 8003fcc:	4311      	orrs	r1, r2
 8003fce:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003fd0:	689a      	ldr	r2, [r3, #8]
 8003fd2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003fd6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003fd8:	689a      	ldr	r2, [r3, #8]
 8003fda:	4302      	orrs	r2, r0
 8003fdc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003fde:	689a      	ldr	r2, [r3, #8]
 8003fe0:	f022 0202 	bic.w	r2, r2, #2
 8003fe4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003fe6:	689a      	ldr	r2, [r3, #8]
 8003fe8:	7e21      	ldrb	r1, [r4, #24]
 8003fea:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8003fee:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003ff0:	f894 2020 	ldrb.w	r2, [r4, #32]
 8003ff4:	2a00      	cmp	r2, #0
 8003ff6:	d040      	beq.n	800407a <HAL_ADC_Init+0x146>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003ff8:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003ffa:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003ffc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004000:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004002:	685a      	ldr	r2, [r3, #4]
 8004004:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004008:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800400a:	685a      	ldr	r2, [r3, #4]
 800400c:	3901      	subs	r1, #1
 800400e:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8004012:	605a      	str	r2, [r3, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004014:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004016:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004018:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800401c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800401e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004020:	3901      	subs	r1, #1
 8004022:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8004026:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004028:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800402a:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800402c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004030:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004032:	689a      	ldr	r2, [r3, #8]
 8004034:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
 8004038:	ea42 2240 	orr.w	r2, r2, r0, lsl #9
 800403c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800403e:	689a      	ldr	r2, [r3, #8]
 8004040:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004044:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004046:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8004048:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800404a:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 800404e:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8004050:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8004052:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004054:	f023 0303 	bic.w	r3, r3, #3
 8004058:	f043 0301 	orr.w	r3, r3, #1
 800405c:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 800405e:	2300      	movs	r3, #0
 8004060:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8004064:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004066:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800406a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800406c:	689a      	ldr	r2, [r3, #8]
 800406e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004072:	609a      	str	r2, [r3, #8]
 8004074:	e7b3      	b.n	8003fde <HAL_ADC_Init+0xaa>
    return HAL_ERROR;
 8004076:	2001      	movs	r0, #1
}
 8004078:	4770      	bx	lr
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800407a:	685a      	ldr	r2, [r3, #4]
 800407c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004080:	605a      	str	r2, [r3, #4]
 8004082:	e7c7      	b.n	8004014 <HAL_ADC_Init+0xe0>
 8004084:	40012300 	.word	0x40012300
 8004088:	0f000001 	.word	0x0f000001

0800408c <HAL_ADC_ConfigChannel>:
{
 800408c:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hadc);
 800408e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8004092:	b083      	sub	sp, #12
  __IO uint32_t counter = 0U;
 8004094:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8004096:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 8004098:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 800409a:	f000 809a 	beq.w	80041d2 <HAL_ADC_ConfigChannel+0x146>
 800409e:	2301      	movs	r3, #1
 80040a0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 80040a4:	680c      	ldr	r4, [r1, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80040a6:	6803      	ldr	r3, [r0, #0]
  if (sConfig->Channel > ADC_CHANNEL_9)
 80040a8:	2c09      	cmp	r4, #9
 80040aa:	d82c      	bhi.n	8004106 <HAL_ADC_ConfigChannel+0x7a>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80040ac:	691a      	ldr	r2, [r3, #16]
 80040ae:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 80040b2:	f04f 0c07 	mov.w	ip, #7
 80040b6:	fa0c fc05 	lsl.w	ip, ip, r5
 80040ba:	ea22 020c 	bic.w	r2, r2, ip
 80040be:	611a      	str	r2, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80040c0:	688a      	ldr	r2, [r1, #8]
 80040c2:	40aa      	lsls	r2, r5
 80040c4:	691d      	ldr	r5, [r3, #16]
 80040c6:	432a      	orrs	r2, r5
 80040c8:	611a      	str	r2, [r3, #16]
  if (sConfig->Rank < 7U)
 80040ca:	684a      	ldr	r2, [r1, #4]
 80040cc:	2a06      	cmp	r2, #6
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80040ce:	46a4      	mov	ip, r4
  if (sConfig->Rank < 7U)
 80040d0:	d82f      	bhi.n	8004132 <HAL_ADC_ConfigChannel+0xa6>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80040d2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80040d6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80040d8:	3a05      	subs	r2, #5
 80040da:	f04f 0e1f 	mov.w	lr, #31
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80040de:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80040e2:	fa0e f202 	lsl.w	r2, lr, r2
 80040e6:	ea21 0202 	bic.w	r2, r1, r2
 80040ea:	635a      	str	r2, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80040ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040ee:	ea4c 0202 	orr.w	r2, ip, r2
 80040f2:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80040f4:	4a3e      	ldr	r2, [pc, #248]	; (80041f0 <HAL_ADC_ConfigChannel+0x164>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d030      	beq.n	800415c <HAL_ADC_ConfigChannel+0xd0>
  __HAL_UNLOCK(hadc);
 80040fa:	2300      	movs	r3, #0
 80040fc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8004100:	4618      	mov	r0, r3
}
 8004102:	b003      	add	sp, #12
 8004104:	bd30      	pop	{r4, r5, pc}
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004106:	fa1f fc84 	uxth.w	ip, r4
 800410a:	eb0c 0e4c 	add.w	lr, ip, ip, lsl #1
 800410e:	68da      	ldr	r2, [r3, #12]
 8004110:	f1ae 0e1e 	sub.w	lr, lr, #30
 8004114:	2507      	movs	r5, #7
 8004116:	fa05 f50e 	lsl.w	r5, r5, lr
 800411a:	ea22 0205 	bic.w	r2, r2, r5
 800411e:	60da      	str	r2, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004120:	688a      	ldr	r2, [r1, #8]
 8004122:	68dd      	ldr	r5, [r3, #12]
 8004124:	fa02 f20e 	lsl.w	r2, r2, lr
 8004128:	432a      	orrs	r2, r5
 800412a:	60da      	str	r2, [r3, #12]
  if (sConfig->Rank < 7U)
 800412c:	684a      	ldr	r2, [r1, #4]
 800412e:	2a06      	cmp	r2, #6
 8004130:	d9cf      	bls.n	80040d2 <HAL_ADC_ConfigChannel+0x46>
  else if (sConfig->Rank < 13U)
 8004132:	2a0c      	cmp	r2, #12
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004134:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  else if (sConfig->Rank < 13U)
 8004138:	d832      	bhi.n	80041a0 <HAL_ADC_ConfigChannel+0x114>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800413a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800413c:	3a23      	subs	r2, #35	; 0x23
 800413e:	251f      	movs	r5, #31
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004140:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004144:	fa05 f202 	lsl.w	r2, r5, r2
 8004148:	ea21 0202 	bic.w	r2, r1, r2
 800414c:	631a      	str	r2, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800414e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004150:	ea4c 0202 	orr.w	r2, ip, r2
 8004154:	631a      	str	r2, [r3, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004156:	4a26      	ldr	r2, [pc, #152]	; (80041f0 <HAL_ADC_ConfigChannel+0x164>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d1ce      	bne.n	80040fa <HAL_ADC_ConfigChannel+0x6e>
 800415c:	2c12      	cmp	r4, #18
 800415e:	d02e      	beq.n	80041be <HAL_ADC_ConfigChannel+0x132>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004160:	4b24      	ldr	r3, [pc, #144]	; (80041f4 <HAL_ADC_ConfigChannel+0x168>)
 8004162:	429c      	cmp	r4, r3
 8004164:	d138      	bne.n	80041d8 <HAL_ADC_ConfigChannel+0x14c>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004166:	4b24      	ldr	r3, [pc, #144]	; (80041f8 <HAL_ADC_ConfigChannel+0x16c>)
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004168:	4c24      	ldr	r4, [pc, #144]	; (80041fc <HAL_ADC_ConfigChannel+0x170>)
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800416a:	685a      	ldr	r2, [r3, #4]
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800416c:	4924      	ldr	r1, [pc, #144]	; (8004200 <HAL_ADC_ConfigChannel+0x174>)
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800416e:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8004172:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004174:	685a      	ldr	r2, [r3, #4]
 8004176:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800417a:	605a      	str	r2, [r3, #4]
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800417c:	6823      	ldr	r3, [r4, #0]
 800417e:	fba1 1303 	umull	r1, r3, r1, r3
 8004182:	0c9b      	lsrs	r3, r3, #18
 8004184:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004188:	005b      	lsls	r3, r3, #1
 800418a:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 800418c:	9b01      	ldr	r3, [sp, #4]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d0b3      	beq.n	80040fa <HAL_ADC_ConfigChannel+0x6e>
        counter--;
 8004192:	9b01      	ldr	r3, [sp, #4]
 8004194:	3b01      	subs	r3, #1
 8004196:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8004198:	9b01      	ldr	r3, [sp, #4]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1f9      	bne.n	8004192 <HAL_ADC_ConfigChannel+0x106>
 800419e:	e7ac      	b.n	80040fa <HAL_ADC_ConfigChannel+0x6e>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80041a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80041a2:	3a41      	subs	r2, #65	; 0x41
 80041a4:	251f      	movs	r5, #31
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80041a6:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80041aa:	fa05 f202 	lsl.w	r2, r5, r2
 80041ae:	ea21 0202 	bic.w	r2, r1, r2
 80041b2:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80041b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041b6:	ea4c 0202 	orr.w	r2, ip, r2
 80041ba:	62da      	str	r2, [r3, #44]	; 0x2c
 80041bc:	e79a      	b.n	80040f4 <HAL_ADC_ConfigChannel+0x68>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80041be:	4b0e      	ldr	r3, [pc, #56]	; (80041f8 <HAL_ADC_ConfigChannel+0x16c>)
 80041c0:	685a      	ldr	r2, [r3, #4]
 80041c2:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80041c6:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80041c8:	685a      	ldr	r2, [r3, #4]
 80041ca:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80041ce:	605a      	str	r2, [r3, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80041d0:	e793      	b.n	80040fa <HAL_ADC_ConfigChannel+0x6e>
  __HAL_LOCK(hadc);
 80041d2:	2002      	movs	r0, #2
}
 80041d4:	b003      	add	sp, #12
 80041d6:	bd30      	pop	{r4, r5, pc}
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80041d8:	2c11      	cmp	r4, #17
 80041da:	d18e      	bne.n	80040fa <HAL_ADC_ConfigChannel+0x6e>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80041dc:	4b06      	ldr	r3, [pc, #24]	; (80041f8 <HAL_ADC_ConfigChannel+0x16c>)
 80041de:	685a      	ldr	r2, [r3, #4]
 80041e0:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 80041e4:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80041e6:	685a      	ldr	r2, [r3, #4]
 80041e8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80041ec:	605a      	str	r2, [r3, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80041ee:	e784      	b.n	80040fa <HAL_ADC_ConfigChannel+0x6e>
 80041f0:	40012000 	.word	0x40012000
 80041f4:	10000012 	.word	0x10000012
 80041f8:	40012300 	.word	0x40012300
 80041fc:	2000039c 	.word	0x2000039c
 8004200:	431bde83 	.word	0x431bde83

08004204 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8004204:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004206:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800420a:	698e      	ldr	r6, [r1, #24]
  __HAL_LOCK(hadc);
 800420c:	2b01      	cmp	r3, #1
 800420e:	f000 80c5 	beq.w	800439c <HAL_ADCEx_InjectedConfigChannel+0x198>
 8004212:	2301      	movs	r3, #1
 8004214:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8004218:	680d      	ldr	r5, [r1, #0]
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 800421a:	6803      	ldr	r3, [r0, #0]
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 800421c:	2d09      	cmp	r5, #9
 800421e:	d864      	bhi.n	80042ea <HAL_ADCEx_InjectedConfigChannel+0xe6>
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8004220:	691a      	ldr	r2, [r3, #16]
 8004222:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 8004226:	2407      	movs	r4, #7
 8004228:	40bc      	lsls	r4, r7
 800422a:	ea22 0204 	bic.w	r2, r2, r4
 800422e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8004230:	688a      	ldr	r2, [r1, #8]
 8004232:	691c      	ldr	r4, [r3, #16]
 8004234:	40ba      	lsls	r2, r7
 8004236:	4322      	orrs	r2, r4
 8004238:	611a      	str	r2, [r3, #16]
 800423a:	46ac      	mov	ip, r5
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 800423c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 800423e:	690f      	ldr	r7, [r1, #16]
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8004240:	684c      	ldr	r4, [r1, #4]
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8004242:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8004246:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8004248:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800424a:	f107 3eff 	add.w	lr, r7, #4294967295
 800424e:	ea42 520e 	orr.w	r2, r2, lr, lsl #20
 8004252:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8004254:	1ce2      	adds	r2, r4, #3
 8004256:	1bd2      	subs	r2, r2, r7
 8004258:	b2d2      	uxtb	r2, r2
 800425a:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 800425c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004260:	f04f 0e1f 	mov.w	lr, #31
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8004264:	fa0c fc02 	lsl.w	ip, ip, r2
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8004268:	fa0e f202 	lsl.w	r2, lr, r2
 800426c:	ea27 0202 	bic.w	r2, r7, r2
 8004270:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8004272:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004274:	ea4c 0202 	orr.w	r2, ip, r2
 8004278:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800427a:	4a49      	ldr	r2, [pc, #292]	; (80043a0 <HAL_ADCEx_InjectedConfigChannel+0x19c>)
 800427c:	4296      	cmp	r6, r2
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 800427e:	689a      	ldr	r2, [r3, #8]
 8004280:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8004284:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8004286:	689a      	ldr	r2, [r3, #8]
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004288:	d067      	beq.n	800435a <HAL_ADCEx_InjectedConfigChannel+0x156>
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 800428a:	4316      	orrs	r6, r2
 800428c:	609e      	str	r6, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 800428e:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8004290:	69ce      	ldr	r6, [r1, #28]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8004292:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8004296:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8004298:	689a      	ldr	r2, [r3, #8]
 800429a:	4332      	orrs	r2, r6
 800429c:	609a      	str	r2, [r3, #8]
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 800429e:	7d4a      	ldrb	r2, [r1, #21]
 80042a0:	2a00      	cmp	r2, #0
 80042a2:	d033      	beq.n	800430c <HAL_ADCEx_InjectedConfigChannel+0x108>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 80042a4:	685a      	ldr	r2, [r3, #4]
 80042a6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80042aa:	605a      	str	r2, [r3, #4]
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 80042ac:	7d0a      	ldrb	r2, [r1, #20]
 80042ae:	2a00      	cmp	r2, #0
 80042b0:	d033      	beq.n	800431a <HAL_ADCEx_InjectedConfigChannel+0x116>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 80042b2:	685a      	ldr	r2, [r3, #4]
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
  }
  
  switch(sConfigInjected->InjectedRank)
 80042b4:	2c02      	cmp	r4, #2
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 80042b6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80042ba:	605a      	str	r2, [r3, #4]
  switch(sConfigInjected->InjectedRank)
 80042bc:	d033      	beq.n	8004326 <HAL_ADCEx_InjectedConfigChannel+0x122>
 80042be:	2c03      	cmp	r4, #3
 80042c0:	d05a      	beq.n	8004378 <HAL_ADCEx_InjectedConfigChannel+0x174>
 80042c2:	2c01      	cmp	r4, #1
 80042c4:	d04d      	beq.n	8004362 <HAL_ADCEx_InjectedConfigChannel+0x15e>
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
      break;
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 80042c6:	6a1a      	ldr	r2, [r3, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 80042c8:	68c9      	ldr	r1, [r1, #12]
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 80042ca:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 80042ce:	f022 020f 	bic.w	r2, r2, #15
 80042d2:	621a      	str	r2, [r3, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 80042d4:	6a1a      	ldr	r2, [r3, #32]
 80042d6:	430a      	orrs	r2, r1
 80042d8:	621a      	str	r2, [r3, #32]
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 80042da:	4a32      	ldr	r2, [pc, #200]	; (80043a4 <HAL_ADCEx_InjectedConfigChannel+0x1a0>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d02f      	beq.n	8004340 <HAL_ADCEx_InjectedConfigChannel+0x13c>
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80042e0:	2300      	movs	r3, #0
 80042e2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80042e6:	4618      	mov	r0, r3
}
 80042e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 80042ea:	fa1f fc85 	uxth.w	ip, r5
 80042ee:	eb0c 044c 	add.w	r4, ip, ip, lsl #1
 80042f2:	68da      	ldr	r2, [r3, #12]
 80042f4:	3c1e      	subs	r4, #30
 80042f6:	2707      	movs	r7, #7
 80042f8:	40a7      	lsls	r7, r4
 80042fa:	ea22 0207 	bic.w	r2, r2, r7
 80042fe:	60da      	str	r2, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8004300:	688a      	ldr	r2, [r1, #8]
 8004302:	40a2      	lsls	r2, r4
 8004304:	68dc      	ldr	r4, [r3, #12]
 8004306:	4322      	orrs	r2, r4
 8004308:	60da      	str	r2, [r3, #12]
 800430a:	e797      	b.n	800423c <HAL_ADCEx_InjectedConfigChannel+0x38>
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 800430c:	685a      	ldr	r2, [r3, #4]
 800430e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004312:	605a      	str	r2, [r3, #4]
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8004314:	7d0a      	ldrb	r2, [r1, #20]
 8004316:	2a00      	cmp	r2, #0
 8004318:	d1cb      	bne.n	80042b2 <HAL_ADCEx_InjectedConfigChannel+0xae>
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 800431a:	685a      	ldr	r2, [r3, #4]
  switch(sConfigInjected->InjectedRank)
 800431c:	2c02      	cmp	r4, #2
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 800431e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004322:	605a      	str	r2, [r3, #4]
  switch(sConfigInjected->InjectedRank)
 8004324:	d1cb      	bne.n	80042be <HAL_ADCEx_InjectedConfigChannel+0xba>
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8004326:	699a      	ldr	r2, [r3, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8004328:	68c9      	ldr	r1, [r1, #12]
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 800432a:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 800432e:	f022 020f 	bic.w	r2, r2, #15
 8004332:	619a      	str	r2, [r3, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8004334:	699a      	ldr	r2, [r3, #24]
 8004336:	430a      	orrs	r2, r1
 8004338:	619a      	str	r2, [r3, #24]
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 800433a:	4a1a      	ldr	r2, [pc, #104]	; (80043a4 <HAL_ADCEx_InjectedConfigChannel+0x1a0>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d1cf      	bne.n	80042e0 <HAL_ADCEx_InjectedConfigChannel+0xdc>
 8004340:	2d12      	cmp	r5, #18
 8004342:	d024      	beq.n	800438e <HAL_ADCEx_InjectedConfigChannel+0x18a>
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8004344:	4b18      	ldr	r3, [pc, #96]	; (80043a8 <HAL_ADCEx_InjectedConfigChannel+0x1a4>)
 8004346:	429d      	cmp	r5, r3
 8004348:	d001      	beq.n	800434e <HAL_ADCEx_InjectedConfigChannel+0x14a>
 800434a:	2d11      	cmp	r5, #17
 800434c:	d1c8      	bne.n	80042e0 <HAL_ADCEx_InjectedConfigChannel+0xdc>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800434e:	4a17      	ldr	r2, [pc, #92]	; (80043ac <HAL_ADCEx_InjectedConfigChannel+0x1a8>)
 8004350:	6853      	ldr	r3, [r2, #4]
 8004352:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004356:	6053      	str	r3, [r2, #4]
 8004358:	e7c2      	b.n	80042e0 <HAL_ADCEx_InjectedConfigChannel+0xdc>
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 800435a:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800435e:	609a      	str	r2, [r3, #8]
 8004360:	e79d      	b.n	800429e <HAL_ADCEx_InjectedConfigChannel+0x9a>
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8004362:	695a      	ldr	r2, [r3, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8004364:	68c9      	ldr	r1, [r1, #12]
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8004366:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 800436a:	f022 020f 	bic.w	r2, r2, #15
 800436e:	615a      	str	r2, [r3, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8004370:	695a      	ldr	r2, [r3, #20]
 8004372:	430a      	orrs	r2, r1
 8004374:	615a      	str	r2, [r3, #20]
      break;
 8004376:	e7b0      	b.n	80042da <HAL_ADCEx_InjectedConfigChannel+0xd6>
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8004378:	69da      	ldr	r2, [r3, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 800437a:	68c9      	ldr	r1, [r1, #12]
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 800437c:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8004380:	f022 020f 	bic.w	r2, r2, #15
 8004384:	61da      	str	r2, [r3, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8004386:	69da      	ldr	r2, [r3, #28]
 8004388:	430a      	orrs	r2, r1
 800438a:	61da      	str	r2, [r3, #28]
      break;
 800438c:	e7a5      	b.n	80042da <HAL_ADCEx_InjectedConfigChannel+0xd6>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800438e:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 8004392:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004396:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 800439a:	e7a1      	b.n	80042e0 <HAL_ADCEx_InjectedConfigChannel+0xdc>
  __HAL_LOCK(hadc);
 800439c:	2002      	movs	r0, #2
}
 800439e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043a0:	000f0001 	.word	0x000f0001
 80043a4:	40012000 	.word	0x40012000
 80043a8:	10000012 	.word	0x10000012
 80043ac:	40012300 	.word	0x40012300

080043b0 <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80043b0:	2800      	cmp	r0, #0
 80043b2:	d07b      	beq.n	80044ac <HAL_CAN_Init+0xfc>
{
 80043b4:	b538      	push	{r3, r4, r5, lr}
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80043b6:	f890 3020 	ldrb.w	r3, [r0, #32]
 80043ba:	4604      	mov	r4, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d072      	beq.n	80044a6 <HAL_CAN_Init+0xf6>
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80043c0:	6822      	ldr	r2, [r4, #0]
 80043c2:	6813      	ldr	r3, [r2, #0]
 80043c4:	f043 0301 	orr.w	r3, r3, #1
 80043c8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80043ca:	f7ff fdad 	bl	8003f28 <HAL_GetTick>
 80043ce:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80043d0:	e004      	b.n	80043dc <HAL_CAN_Init+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80043d2:	f7ff fda9 	bl	8003f28 <HAL_GetTick>
 80043d6:	1b43      	subs	r3, r0, r5
 80043d8:	2b0a      	cmp	r3, #10
 80043da:	d85b      	bhi.n	8004494 <HAL_CAN_Init+0xe4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80043dc:	6823      	ldr	r3, [r4, #0]
 80043de:	685a      	ldr	r2, [r3, #4]
 80043e0:	07d1      	lsls	r1, r2, #31
 80043e2:	d5f6      	bpl.n	80043d2 <HAL_CAN_Init+0x22>
      return HAL_ERROR;
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	f022 0202 	bic.w	r2, r2, #2
 80043ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80043ec:	f7ff fd9c 	bl	8003f28 <HAL_GetTick>
 80043f0:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80043f2:	e004      	b.n	80043fe <HAL_CAN_Init+0x4e>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80043f4:	f7ff fd98 	bl	8003f28 <HAL_GetTick>
 80043f8:	1b40      	subs	r0, r0, r5
 80043fa:	280a      	cmp	r0, #10
 80043fc:	d84a      	bhi.n	8004494 <HAL_CAN_Init+0xe4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80043fe:	6823      	ldr	r3, [r4, #0]
 8004400:	685a      	ldr	r2, [r3, #4]
 8004402:	0792      	lsls	r2, r2, #30
 8004404:	d4f6      	bmi.n	80043f4 <HAL_CAN_Init+0x44>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004406:	7e22      	ldrb	r2, [r4, #24]
 8004408:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	bf0c      	ite	eq
 800440e:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004412:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 8004416:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004418:	7e62      	ldrb	r2, [r4, #25]
 800441a:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	bf0c      	ite	eq
 8004420:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004424:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 8004428:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800442a:	7ea2      	ldrb	r2, [r4, #26]
 800442c:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	bf0c      	ite	eq
 8004432:	f042 0220 	orreq.w	r2, r2, #32
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004436:	f022 0220 	bicne.w	r2, r2, #32
 800443a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800443c:	7ee2      	ldrb	r2, [r4, #27]
 800443e:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	bf0c      	ite	eq
 8004444:	f022 0210 	biceq.w	r2, r2, #16
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004448:	f042 0210 	orrne.w	r2, r2, #16
 800444c:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800444e:	7f22      	ldrb	r2, [r4, #28]
 8004450:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	bf0c      	ite	eq
 8004456:	f042 0208 	orreq.w	r2, r2, #8
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800445a:	f022 0208 	bicne.w	r2, r2, #8
 800445e:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004460:	7f62      	ldrb	r2, [r4, #29]
 8004462:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	bf0c      	ite	eq
 8004468:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800446c:	f022 0204 	bicne.w	r2, r2, #4
 8004470:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004472:	e9d4 2002 	ldrd	r2, r0, [r4, #8]
 8004476:	6921      	ldr	r1, [r4, #16]
 8004478:	4302      	orrs	r2, r0
 800447a:	430a      	orrs	r2, r1
 800447c:	6960      	ldr	r0, [r4, #20]
 800447e:	6861      	ldr	r1, [r4, #4]
 8004480:	4302      	orrs	r2, r0
 8004482:	3901      	subs	r1, #1
 8004484:	430a      	orrs	r2, r1
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004486:	2000      	movs	r0, #0

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004488:	2101      	movs	r1, #1
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800448a:	61da      	str	r2, [r3, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800448c:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 800448e:	f884 1020 	strb.w	r1, [r4, #32]

  /* Return function status */
  return HAL_OK;
}
 8004492:	bd38      	pop	{r3, r4, r5, pc}
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004494:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8004496:	2205      	movs	r2, #5
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004498:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800449c:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 800449e:	f884 2020 	strb.w	r2, [r4, #32]
      return HAL_ERROR;
 80044a2:	2001      	movs	r0, #1
}
 80044a4:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 80044a6:	f7ff f95f 	bl	8003768 <HAL_CAN_MspInit>
 80044aa:	e789      	b.n	80043c0 <HAL_CAN_Init+0x10>
    return HAL_ERROR;
 80044ac:	2001      	movs	r0, #1
}
 80044ae:	4770      	bx	lr

080044b0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044b0:	4907      	ldr	r1, [pc, #28]	; (80044d0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80044b2:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044b4:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044b6:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044ba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044be:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044c0:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044c2:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80044c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80044ca:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop
 80044d0:	e000ed00 	.word	0xe000ed00

080044d4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044d4:	4b1c      	ldr	r3, [pc, #112]	; (8004548 <HAL_NVIC_SetPriority+0x74>)
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80044dc:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80044de:	f1c3 0e07 	rsb	lr, r3, #7
 80044e2:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044e6:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80044ea:	bf28      	it	cs
 80044ec:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044f0:	f1bc 0f06 	cmp.w	ip, #6
 80044f4:	d91b      	bls.n	800452e <HAL_NVIC_SetPriority+0x5a>
 80044f6:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80044f8:	f04f 3cff 	mov.w	ip, #4294967295
 80044fc:	fa0c fc03 	lsl.w	ip, ip, r3
 8004500:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004504:	f04f 3cff 	mov.w	ip, #4294967295
 8004508:	fa0c fc0e 	lsl.w	ip, ip, lr
 800450c:	ea21 010c 	bic.w	r1, r1, ip
 8004510:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8004512:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004514:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8004518:	db0c      	blt.n	8004534 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800451a:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800451e:	0109      	lsls	r1, r1, #4
 8004520:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8004524:	b2c9      	uxtb	r1, r1
 8004526:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800452a:	f85d fb04 	ldr.w	pc, [sp], #4
 800452e:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004530:	4613      	mov	r3, r2
 8004532:	e7e7      	b.n	8004504 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004534:	4b05      	ldr	r3, [pc, #20]	; (800454c <HAL_NVIC_SetPriority+0x78>)
 8004536:	f000 000f 	and.w	r0, r0, #15
 800453a:	0109      	lsls	r1, r1, #4
 800453c:	4403      	add	r3, r0
 800453e:	b2c9      	uxtb	r1, r1
 8004540:	7619      	strb	r1, [r3, #24]
 8004542:	f85d fb04 	ldr.w	pc, [sp], #4
 8004546:	bf00      	nop
 8004548:	e000ed00 	.word	0xe000ed00
 800454c:	e000ecfc 	.word	0xe000ecfc

08004550 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004550:	2800      	cmp	r0, #0
 8004552:	db07      	blt.n	8004564 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004554:	0941      	lsrs	r1, r0, #5
 8004556:	4a04      	ldr	r2, [pc, #16]	; (8004568 <HAL_NVIC_EnableIRQ+0x18>)
 8004558:	f000 001f 	and.w	r0, r0, #31
 800455c:	2301      	movs	r3, #1
 800455e:	4083      	lsls	r3, r0
 8004560:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	e000e100 	.word	0xe000e100

0800456c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800456c:	3801      	subs	r0, #1
 800456e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8004572:	d210      	bcs.n	8004596 <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004574:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004576:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800457a:	4c08      	ldr	r4, [pc, #32]	; (800459c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800457c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800457e:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 8004582:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004586:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004588:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800458a:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800458c:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 800458e:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004592:	6119      	str	r1, [r3, #16]
 8004594:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8004596:	2001      	movs	r0, #1
 8004598:	4770      	bx	lr
 800459a:	bf00      	nop
 800459c:	e000ed00 	.word	0xe000ed00

080045a0 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80045a0:	4770      	bx	lr
 80045a2:	bf00      	nop

080045a4 <HAL_SYSTICK_IRQHandler>:
{
 80045a4:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80045a6:	f7ff fffb 	bl	80045a0 <HAL_SYSTICK_Callback>
}
 80045aa:	bd08      	pop	{r3, pc}

080045ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80045ac:	b538      	push	{r3, r4, r5, lr}
 80045ae:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 80045b0:	f7ff fcba 	bl	8003f28 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80045b4:	2c00      	cmp	r4, #0
 80045b6:	d052      	beq.n	800465e <HAL_DMA_Init+0xb2>

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80045b8:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 80045ba:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_BUSY;
 80045bc:	2102      	movs	r1, #2
 80045be:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 80045c2:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	f022 0201 	bic.w	r2, r2, #1
 80045cc:	4605      	mov	r5, r0
 80045ce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80045d0:	e005      	b.n	80045de <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80045d2:	f7ff fca9 	bl	8003f28 <HAL_GetTick>
 80045d6:	1b43      	subs	r3, r0, r5
 80045d8:	2b05      	cmp	r3, #5
 80045da:	d839      	bhi.n	8004650 <HAL_DMA_Init+0xa4>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80045dc:	6823      	ldr	r3, [r4, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	07d1      	lsls	r1, r2, #31
 80045e2:	d4f6      	bmi.n	80045d2 <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80045e4:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 80045e8:	68e1      	ldr	r1, [r4, #12]
 80045ea:	4302      	orrs	r2, r0
 80045ec:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045ee:	e9d4 5104 	ldrd	r5, r1, [r4, #16]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045f2:	69a0      	ldr	r0, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045f4:	432a      	orrs	r2, r5
 80045f6:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045f8:	69e1      	ldr	r1, [r4, #28]
  tmp = hdma->Instance->CR;
 80045fa:	681d      	ldr	r5, [r3, #0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045fc:	4302      	orrs	r2, r0
 80045fe:	430a      	orrs	r2, r1
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004600:	4933      	ldr	r1, [pc, #204]	; (80046d0 <HAL_DMA_Init+0x124>)
 8004602:	4029      	ands	r1, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8004604:	6a25      	ldr	r5, [r4, #32]
 8004606:	432a      	orrs	r2, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004608:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800460a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800460c:	2904      	cmp	r1, #4
 800460e:	d028      	beq.n	8004662 <HAL_DMA_Init+0xb6>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004610:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004612:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004614:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004618:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800461a:	b2d8      	uxtb	r0, r3
 800461c:	4a2d      	ldr	r2, [pc, #180]	; (80046d4 <HAL_DMA_Init+0x128>)
  hdma->Instance->FCR = tmp;
 800461e:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004620:	3810      	subs	r0, #16
 8004622:	fba2 5200 	umull	r5, r2, r2, r0
 8004626:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004628:	492b      	ldr	r1, [pc, #172]	; (80046d8 <HAL_DMA_Init+0x12c>)
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800462a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800462e:	5c89      	ldrb	r1, [r1, r2]
 8004630:	65e1      	str	r1, [r4, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004632:	f023 0303 	bic.w	r3, r3, #3
  if (stream_number > 3U)
 8004636:	285f      	cmp	r0, #95	; 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004638:	bf88      	it	hi
 800463a:	3304      	addhi	r3, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800463c:	223f      	movs	r2, #63	; 0x3f
 800463e:	408a      	lsls	r2, r1
 8004640:	65a3      	str	r3, [r4, #88]	; 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004642:	2000      	movs	r0, #0
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004644:	609a      	str	r2, [r3, #8]
  hdma->State = HAL_DMA_STATE_READY;
 8004646:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004648:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800464a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800464e:	bd38      	pop	{r3, r4, r5, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004650:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004652:	2220      	movs	r2, #32
 8004654:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004656:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      return HAL_TIMEOUT;
 800465a:	4618      	mov	r0, r3
}
 800465c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800465e:	2001      	movs	r0, #1
}
 8004660:	bd38      	pop	{r3, r4, r5, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004662:	e9d4 510b 	ldrd	r5, r1, [r4, #44]	; 0x2c
 8004666:	4329      	orrs	r1, r5
 8004668:	4311      	orrs	r1, r2
  hdma->Instance->CR = tmp;  
 800466a:	6019      	str	r1, [r3, #0]
  tmp = hdma->Instance->FCR;
 800466c:	6959      	ldr	r1, [r3, #20]
    tmp |= hdma->Init.FIFOThreshold;
 800466e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004670:	f021 0107 	bic.w	r1, r1, #7
 8004674:	4311      	orrs	r1, r2
    tmp |= hdma->Init.FIFOThreshold;
 8004676:	f041 0104 	orr.w	r1, r1, #4
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800467a:	2d00      	cmp	r5, #0
 800467c:	d0cd      	beq.n	800461a <HAL_DMA_Init+0x6e>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800467e:	b178      	cbz	r0, 80046a0 <HAL_DMA_Init+0xf4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004680:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8004684:	d016      	beq.n	80046b4 <HAL_DMA_Init+0x108>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004686:	2a02      	cmp	r2, #2
 8004688:	d903      	bls.n	8004692 <HAL_DMA_Init+0xe6>
 800468a:	2a03      	cmp	r2, #3
 800468c:	d1c5      	bne.n	800461a <HAL_DMA_Init+0x6e>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800468e:	01ea      	lsls	r2, r5, #7
 8004690:	d5c3      	bpl.n	800461a <HAL_DMA_Init+0x6e>
        hdma->State = HAL_DMA_STATE_READY;
 8004692:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004694:	2240      	movs	r2, #64	; 0x40
 8004696:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8004698:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        return HAL_ERROR; 
 800469c:	4618      	mov	r0, r3
}
 800469e:	bd38      	pop	{r3, r4, r5, pc}
    switch (tmp)
 80046a0:	2a01      	cmp	r2, #1
 80046a2:	d003      	beq.n	80046ac <HAL_DMA_Init+0x100>
 80046a4:	f032 0202 	bics.w	r2, r2, #2
 80046a8:	d1b7      	bne.n	800461a <HAL_DMA_Init+0x6e>
 80046aa:	e7f0      	b.n	800468e <HAL_DMA_Init+0xe2>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80046ac:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 80046b0:	d1b3      	bne.n	800461a <HAL_DMA_Init+0x6e>
 80046b2:	e7ee      	b.n	8004692 <HAL_DMA_Init+0xe6>
    switch (tmp)
 80046b4:	2a03      	cmp	r2, #3
 80046b6:	d8b0      	bhi.n	800461a <HAL_DMA_Init+0x6e>
 80046b8:	a001      	add	r0, pc, #4	; (adr r0, 80046c0 <HAL_DMA_Init+0x114>)
 80046ba:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 80046be:	bf00      	nop
 80046c0:	08004693 	.word	0x08004693
 80046c4:	0800468f 	.word	0x0800468f
 80046c8:	08004693 	.word	0x08004693
 80046cc:	080046ad 	.word	0x080046ad
 80046d0:	f010803f 	.word	0xf010803f
 80046d4:	aaaaaaab 	.word	0xaaaaaaab
 80046d8:	08007510 	.word	0x08007510

080046dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80046e0:	2200      	movs	r2, #0
 80046e2:	680c      	ldr	r4, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046e4:	f8df a218 	ldr.w	sl, [pc, #536]	; 8004900 <HAL_GPIO_Init+0x224>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80046e8:	4e7e      	ldr	r6, [pc, #504]	; (80048e4 <HAL_GPIO_Init+0x208>)
{
 80046ea:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046ec:	4613      	mov	r3, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80046ee:	4689      	mov	r9, r1
 80046f0:	e005      	b.n	80046fe <HAL_GPIO_Init+0x22>
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046f2:	3301      	adds	r3, #1
 80046f4:	2b10      	cmp	r3, #16
 80046f6:	f102 0202 	add.w	r2, r2, #2
 80046fa:	f000 8085 	beq.w	8004808 <HAL_GPIO_Init+0x12c>
    ioposition = 0x01U << position;
 80046fe:	2101      	movs	r1, #1
 8004700:	4099      	lsls	r1, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004702:	ea01 0b04 	and.w	fp, r1, r4
    if(iocurrent == ioposition)
 8004706:	43a1      	bics	r1, r4
 8004708:	d1f3      	bne.n	80046f2 <HAL_GPIO_Init+0x16>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800470a:	f8d9 c004 	ldr.w	ip, [r9, #4]
 800470e:	f00c 0103 	and.w	r1, ip, #3
 8004712:	1e4d      	subs	r5, r1, #1
 8004714:	2d01      	cmp	r5, #1
 8004716:	d97a      	bls.n	800480e <HAL_GPIO_Init+0x132>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004718:	2903      	cmp	r1, #3
 800471a:	f040 80bb 	bne.w	8004894 <HAL_GPIO_Init+0x1b8>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800471e:	4091      	lsls	r1, r2
 8004720:	43cd      	mvns	r5, r1
      temp = GPIOx->MODER;
 8004722:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004724:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004726:	4329      	orrs	r1, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004728:	f41c 3f40 	tst.w	ip, #196608	; 0x30000
      GPIOx->MODER = temp;
 800472c:	6001      	str	r1, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800472e:	d0e0      	beq.n	80046f2 <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004730:	2100      	movs	r1, #0
 8004732:	9103      	str	r1, [sp, #12]
 8004734:	f8da 1044 	ldr.w	r1, [sl, #68]	; 0x44
 8004738:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800473c:	f8ca 1044 	str.w	r1, [sl, #68]	; 0x44
 8004740:	f8da 1044 	ldr.w	r1, [sl, #68]	; 0x44
 8004744:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8004748:	9103      	str	r1, [sp, #12]
 800474a:	9903      	ldr	r1, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 800474c:	f023 0103 	bic.w	r1, r3, #3
 8004750:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8004754:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004758:	f003 0703 	and.w	r7, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 800475c:	688d      	ldr	r5, [r1, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800475e:	00bf      	lsls	r7, r7, #2
 8004760:	f04f 0e0f 	mov.w	lr, #15
 8004764:	fa0e fe07 	lsl.w	lr, lr, r7
 8004768:	ea25 080e 	bic.w	r8, r5, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800476c:	4d5e      	ldr	r5, [pc, #376]	; (80048e8 <HAL_GPIO_Init+0x20c>)
 800476e:	42a8      	cmp	r0, r5
 8004770:	d01f      	beq.n	80047b2 <HAL_GPIO_Init+0xd6>
 8004772:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004776:	42a8      	cmp	r0, r5
 8004778:	f000 8090 	beq.w	800489c <HAL_GPIO_Init+0x1c0>
 800477c:	4d5b      	ldr	r5, [pc, #364]	; (80048ec <HAL_GPIO_Init+0x210>)
 800477e:	42a8      	cmp	r0, r5
 8004780:	f000 8093 	beq.w	80048aa <HAL_GPIO_Init+0x1ce>
 8004784:	4d5a      	ldr	r5, [pc, #360]	; (80048f0 <HAL_GPIO_Init+0x214>)
 8004786:	42a8      	cmp	r0, r5
 8004788:	f000 8096 	beq.w	80048b8 <HAL_GPIO_Init+0x1dc>
 800478c:	4d59      	ldr	r5, [pc, #356]	; (80048f4 <HAL_GPIO_Init+0x218>)
 800478e:	42a8      	cmp	r0, r5
 8004790:	f000 8099 	beq.w	80048c6 <HAL_GPIO_Init+0x1ea>
 8004794:	4d58      	ldr	r5, [pc, #352]	; (80048f8 <HAL_GPIO_Init+0x21c>)
 8004796:	42a8      	cmp	r0, r5
 8004798:	f000 809c 	beq.w	80048d4 <HAL_GPIO_Init+0x1f8>
 800479c:	4d57      	ldr	r5, [pc, #348]	; (80048fc <HAL_GPIO_Init+0x220>)
 800479e:	42a8      	cmp	r0, r5
 80047a0:	bf0c      	ite	eq
 80047a2:	f04f 0e06 	moveq.w	lr, #6
 80047a6:	f04f 0e07 	movne.w	lr, #7
 80047aa:	fa0e f707 	lsl.w	r7, lr, r7
 80047ae:	ea48 0807 	orr.w	r8, r8, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80047b2:	f8c1 8008 	str.w	r8, [r1, #8]
        temp = EXTI->RTSR;
 80047b6:	68b1      	ldr	r1, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 80047b8:	ea6f 050b 	mvn.w	r5, fp
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80047bc:	f41c 1f80 	tst.w	ip, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80047c0:	bf0c      	ite	eq
 80047c2:	4029      	andeq	r1, r5
        {
          temp |= iocurrent;
 80047c4:	ea4b 0101 	orrne.w	r1, fp, r1
        }
        EXTI->RTSR = temp;
 80047c8:	60b1      	str	r1, [r6, #8]

        temp = EXTI->FTSR;
 80047ca:	68f1      	ldr	r1, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80047cc:	f41c 1f00 	tst.w	ip, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 80047d0:	bf0c      	ite	eq
 80047d2:	4029      	andeq	r1, r5
        {
          temp |= iocurrent;
 80047d4:	ea4b 0101 	orrne.w	r1, fp, r1
        }
        EXTI->FTSR = temp;
 80047d8:	60f1      	str	r1, [r6, #12]

        temp = EXTI->EMR;
 80047da:	6871      	ldr	r1, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80047dc:	f41c 3f00 	tst.w	ip, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80047e0:	bf0c      	ite	eq
 80047e2:	4029      	andeq	r1, r5
        {
          temp |= iocurrent;
 80047e4:	ea4b 0101 	orrne.w	r1, fp, r1
        }
        EXTI->EMR = temp;
 80047e8:	6071      	str	r1, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80047ea:	6831      	ldr	r1, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80047ec:	f41c 3f80 	tst.w	ip, #65536	; 0x10000
  for(position = 0U; position < GPIO_NUMBER; position++)
 80047f0:	f103 0301 	add.w	r3, r3, #1
        temp &= ~((uint32_t)iocurrent);
 80047f4:	bf0c      	ite	eq
 80047f6:	4029      	andeq	r1, r5
        {
          temp |= iocurrent;
 80047f8:	ea4b 0101 	orrne.w	r1, fp, r1
  for(position = 0U; position < GPIO_NUMBER; position++)
 80047fc:	2b10      	cmp	r3, #16
        }
        EXTI->IMR = temp;
 80047fe:	6031      	str	r1, [r6, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004800:	f102 0202 	add.w	r2, r2, #2
 8004804:	f47f af7b 	bne.w	80046fe <HAL_GPIO_Init+0x22>
      }
    }
  }
}
 8004808:	b005      	add	sp, #20
 800480a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= (GPIO_Init->Speed << (position * 2U));
 800480e:	f8d9 500c 	ldr.w	r5, [r9, #12]
        temp = GPIOx->OSPEEDR; 
 8004812:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004816:	fa05 f702 	lsl.w	r7, r5, r2
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800481a:	2503      	movs	r5, #3
 800481c:	fa05 f802 	lsl.w	r8, r5, r2
 8004820:	ea2e 0e08 	bic.w	lr, lr, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004824:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8004828:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800482a:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800482c:	ea27 0e0b 	bic.w	lr, r7, fp
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004830:	f3cc 1700 	ubfx	r7, ip, #4, #1
 8004834:	409f      	lsls	r7, r3
 8004836:	ea47 070e 	orr.w	r7, r7, lr
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800483a:	ea6f 0508 	mvn.w	r5, r8
        GPIOx->OTYPER = temp;
 800483e:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8004840:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004842:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004846:	f8d9 7008 	ldr.w	r7, [r9, #8]
 800484a:	4097      	lsls	r7, r2
 800484c:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004850:	2902      	cmp	r1, #2
        GPIOx->PUPDR = temp;
 8004852:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004854:	fa01 f102 	lsl.w	r1, r1, r2
 8004858:	f47f af63 	bne.w	8004722 <HAL_GPIO_Init+0x46>
        temp = GPIOx->AFR[position >> 3U];
 800485c:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8004860:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004864:	f003 0807 	and.w	r8, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8004868:	f8de 7020 	ldr.w	r7, [lr, #32]
 800486c:	9700      	str	r7, [sp, #0]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800486e:	f8d9 7010 	ldr.w	r7, [r9, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004872:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004876:	fa07 f708 	lsl.w	r7, r7, r8
 800487a:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800487c:	270f      	movs	r7, #15
 800487e:	fa07 f808 	lsl.w	r8, r7, r8
 8004882:	9f00      	ldr	r7, [sp, #0]
 8004884:	ea27 0808 	bic.w	r8, r7, r8
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004888:	9f01      	ldr	r7, [sp, #4]
 800488a:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->AFR[position >> 3U] = temp;
 800488e:	f8ce 7020 	str.w	r7, [lr, #32]
 8004892:	e746      	b.n	8004722 <HAL_GPIO_Init+0x46>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004894:	2503      	movs	r5, #3
 8004896:	4095      	lsls	r5, r2
 8004898:	43ed      	mvns	r5, r5
 800489a:	e7d1      	b.n	8004840 <HAL_GPIO_Init+0x164>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800489c:	f04f 0e01 	mov.w	lr, #1
 80048a0:	fa0e f707 	lsl.w	r7, lr, r7
 80048a4:	ea48 0807 	orr.w	r8, r8, r7
 80048a8:	e783      	b.n	80047b2 <HAL_GPIO_Init+0xd6>
 80048aa:	f04f 0e02 	mov.w	lr, #2
 80048ae:	fa0e f707 	lsl.w	r7, lr, r7
 80048b2:	ea48 0807 	orr.w	r8, r8, r7
 80048b6:	e77c      	b.n	80047b2 <HAL_GPIO_Init+0xd6>
 80048b8:	f04f 0e03 	mov.w	lr, #3
 80048bc:	fa0e f707 	lsl.w	r7, lr, r7
 80048c0:	ea48 0807 	orr.w	r8, r8, r7
 80048c4:	e775      	b.n	80047b2 <HAL_GPIO_Init+0xd6>
 80048c6:	f04f 0e04 	mov.w	lr, #4
 80048ca:	fa0e f707 	lsl.w	r7, lr, r7
 80048ce:	ea48 0807 	orr.w	r8, r8, r7
 80048d2:	e76e      	b.n	80047b2 <HAL_GPIO_Init+0xd6>
 80048d4:	f04f 0e05 	mov.w	lr, #5
 80048d8:	fa0e f707 	lsl.w	r7, lr, r7
 80048dc:	ea48 0807 	orr.w	r8, r8, r7
 80048e0:	e767      	b.n	80047b2 <HAL_GPIO_Init+0xd6>
 80048e2:	bf00      	nop
 80048e4:	40013c00 	.word	0x40013c00
 80048e8:	40020000 	.word	0x40020000
 80048ec:	40020800 	.word	0x40020800
 80048f0:	40020c00 	.word	0x40020c00
 80048f4:	40021000 	.word	0x40021000
 80048f8:	40021400 	.word	0x40021400
 80048fc:	40021800 	.word	0x40021800
 8004900:	40023800 	.word	0x40023800

08004904 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004904:	b902      	cbnz	r2, 8004908 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004906:	0409      	lsls	r1, r1, #16
 8004908:	6181      	str	r1, [r0, #24]
  }
}
 800490a:	4770      	bx	lr

0800490c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800490c:	b530      	push	{r4, r5, lr}
 800490e:	b083      	sub	sp, #12
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 8004910:	4b19      	ldr	r3, [pc, #100]	; (8004978 <HAL_PWREx_EnableOverDrive+0x6c>)
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004912:	491a      	ldr	r1, [pc, #104]	; (800497c <HAL_PWREx_EnableOverDrive+0x70>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004914:	4d1a      	ldr	r5, [pc, #104]	; (8004980 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8004916:	2200      	movs	r2, #0
 8004918:	9201      	str	r2, [sp, #4]
 800491a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800491c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004920:	641a      	str	r2, [r3, #64]	; 0x40
 8004922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004924:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004928:	9301      	str	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 800492a:	2201      	movs	r2, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 800492c:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 800492e:	640a      	str	r2, [r1, #64]	; 0x40
  tickstart = HAL_GetTick();
 8004930:	f7ff fafa 	bl	8003f28 <HAL_GetTick>
 8004934:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004936:	e005      	b.n	8004944 <HAL_PWREx_EnableOverDrive+0x38>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004938:	f7ff faf6 	bl	8003f28 <HAL_GetTick>
 800493c:	1b00      	subs	r0, r0, r4
 800493e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004942:	d816      	bhi.n	8004972 <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004944:	686b      	ldr	r3, [r5, #4]
 8004946:	03da      	lsls	r2, r3, #15
 8004948:	d5f6      	bpl.n	8004938 <HAL_PWREx_EnableOverDrive+0x2c>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800494a:	4b0c      	ldr	r3, [pc, #48]	; (800497c <HAL_PWREx_EnableOverDrive+0x70>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800494c:	4d0c      	ldr	r5, [pc, #48]	; (8004980 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800494e:	2201      	movs	r2, #1
 8004950:	645a      	str	r2, [r3, #68]	; 0x44
  tickstart = HAL_GetTick();
 8004952:	f7ff fae9 	bl	8003f28 <HAL_GetTick>
 8004956:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004958:	e005      	b.n	8004966 <HAL_PWREx_EnableOverDrive+0x5a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800495a:	f7ff fae5 	bl	8003f28 <HAL_GetTick>
 800495e:	1b00      	subs	r0, r0, r4
 8004960:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004964:	d805      	bhi.n	8004972 <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004966:	686b      	ldr	r3, [r5, #4]
 8004968:	039b      	lsls	r3, r3, #14
 800496a:	d5f6      	bpl.n	800495a <HAL_PWREx_EnableOverDrive+0x4e>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 800496c:	2000      	movs	r0, #0
}
 800496e:	b003      	add	sp, #12
 8004970:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 8004972:	2003      	movs	r0, #3
}
 8004974:	b003      	add	sp, #12
 8004976:	bd30      	pop	{r4, r5, pc}
 8004978:	40023800 	.word	0x40023800
 800497c:	420e0000 	.word	0x420e0000
 8004980:	40007000 	.word	0x40007000

08004984 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004984:	2800      	cmp	r0, #0
 8004986:	f000 8087 	beq.w	8004a98 <HAL_RCC_ClockConfig+0x114>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800498a:	4a48      	ldr	r2, [pc, #288]	; (8004aac <HAL_RCC_ClockConfig+0x128>)
 800498c:	6813      	ldr	r3, [r2, #0]
 800498e:	f003 030f 	and.w	r3, r3, #15
 8004992:	428b      	cmp	r3, r1
{
 8004994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004998:	460d      	mov	r5, r1
 800499a:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800499c:	d209      	bcs.n	80049b2 <HAL_RCC_ClockConfig+0x2e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800499e:	b2cb      	uxtb	r3, r1
 80049a0:	7013      	strb	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049a2:	6813      	ldr	r3, [r2, #0]
 80049a4:	f003 030f 	and.w	r3, r3, #15
 80049a8:	428b      	cmp	r3, r1
 80049aa:	d002      	beq.n	80049b2 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80049ac:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);

  return HAL_OK;
}
 80049ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049b2:	6823      	ldr	r3, [r4, #0]
 80049b4:	0798      	lsls	r0, r3, #30
 80049b6:	d514      	bpl.n	80049e2 <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049b8:	0759      	lsls	r1, r3, #29
 80049ba:	d504      	bpl.n	80049c6 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049bc:	493c      	ldr	r1, [pc, #240]	; (8004ab0 <HAL_RCC_ClockConfig+0x12c>)
 80049be:	688a      	ldr	r2, [r1, #8]
 80049c0:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 80049c4:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049c6:	071a      	lsls	r2, r3, #28
 80049c8:	d504      	bpl.n	80049d4 <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049ca:	4939      	ldr	r1, [pc, #228]	; (8004ab0 <HAL_RCC_ClockConfig+0x12c>)
 80049cc:	688a      	ldr	r2, [r1, #8]
 80049ce:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 80049d2:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049d4:	4936      	ldr	r1, [pc, #216]	; (8004ab0 <HAL_RCC_ClockConfig+0x12c>)
 80049d6:	68a0      	ldr	r0, [r4, #8]
 80049d8:	688a      	ldr	r2, [r1, #8]
 80049da:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80049de:	4302      	orrs	r2, r0
 80049e0:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049e2:	07df      	lsls	r7, r3, #31
 80049e4:	d521      	bpl.n	8004a2a <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049e6:	6862      	ldr	r2, [r4, #4]
 80049e8:	2a01      	cmp	r2, #1
 80049ea:	d057      	beq.n	8004a9c <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049ec:	1e93      	subs	r3, r2, #2
 80049ee:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049f0:	4b2f      	ldr	r3, [pc, #188]	; (8004ab0 <HAL_RCC_ClockConfig+0x12c>)
 80049f2:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049f4:	d94d      	bls.n	8004a92 <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049f6:	0799      	lsls	r1, r3, #30
 80049f8:	d5d8      	bpl.n	80049ac <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049fa:	4e2d      	ldr	r6, [pc, #180]	; (8004ab0 <HAL_RCC_ClockConfig+0x12c>)
 80049fc:	68b3      	ldr	r3, [r6, #8]
 80049fe:	f023 0303 	bic.w	r3, r3, #3
 8004a02:	4313      	orrs	r3, r2
 8004a04:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8004a06:	f7ff fa8f 	bl	8003f28 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a0a:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8004a0e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a10:	e004      	b.n	8004a1c <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a12:	f7ff fa89 	bl	8003f28 <HAL_GetTick>
 8004a16:	1bc0      	subs	r0, r0, r7
 8004a18:	4540      	cmp	r0, r8
 8004a1a:	d844      	bhi.n	8004aa6 <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a1c:	68b3      	ldr	r3, [r6, #8]
 8004a1e:	6862      	ldr	r2, [r4, #4]
 8004a20:	f003 030c 	and.w	r3, r3, #12
 8004a24:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004a28:	d1f3      	bne.n	8004a12 <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a2a:	4a20      	ldr	r2, [pc, #128]	; (8004aac <HAL_RCC_ClockConfig+0x128>)
 8004a2c:	6813      	ldr	r3, [r2, #0]
 8004a2e:	f003 030f 	and.w	r3, r3, #15
 8004a32:	42ab      	cmp	r3, r5
 8004a34:	d906      	bls.n	8004a44 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a36:	b2eb      	uxtb	r3, r5
 8004a38:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a3a:	6813      	ldr	r3, [r2, #0]
 8004a3c:	f003 030f 	and.w	r3, r3, #15
 8004a40:	42ab      	cmp	r3, r5
 8004a42:	d1b3      	bne.n	80049ac <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a44:	6823      	ldr	r3, [r4, #0]
 8004a46:	075a      	lsls	r2, r3, #29
 8004a48:	d506      	bpl.n	8004a58 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a4a:	4919      	ldr	r1, [pc, #100]	; (8004ab0 <HAL_RCC_ClockConfig+0x12c>)
 8004a4c:	68e0      	ldr	r0, [r4, #12]
 8004a4e:	688a      	ldr	r2, [r1, #8]
 8004a50:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8004a54:	4302      	orrs	r2, r0
 8004a56:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a58:	071b      	lsls	r3, r3, #28
 8004a5a:	d507      	bpl.n	8004a6c <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a5c:	4a14      	ldr	r2, [pc, #80]	; (8004ab0 <HAL_RCC_ClockConfig+0x12c>)
 8004a5e:	6921      	ldr	r1, [r4, #16]
 8004a60:	6893      	ldr	r3, [r2, #8]
 8004a62:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004a66:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004a6a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a6c:	f000 f84e 	bl	8004b0c <HAL_RCC_GetSysClockFreq>
 8004a70:	4a0f      	ldr	r2, [pc, #60]	; (8004ab0 <HAL_RCC_ClockConfig+0x12c>)
 8004a72:	4c10      	ldr	r4, [pc, #64]	; (8004ab4 <HAL_RCC_ClockConfig+0x130>)
 8004a74:	6892      	ldr	r2, [r2, #8]
 8004a76:	4910      	ldr	r1, [pc, #64]	; (8004ab8 <HAL_RCC_ClockConfig+0x134>)
 8004a78:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 8004a80:	480e      	ldr	r0, [pc, #56]	; (8004abc <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a82:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 8004a84:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a86:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 8004a88:	f7ff fa04 	bl	8003e94 <HAL_InitTick>
  return HAL_OK;
 8004a8c:	2000      	movs	r0, #0
}
 8004a8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a92:	0198      	lsls	r0, r3, #6
 8004a94:	d4b1      	bmi.n	80049fa <HAL_RCC_ClockConfig+0x76>
 8004a96:	e789      	b.n	80049ac <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8004a98:	2001      	movs	r0, #1
}
 8004a9a:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a9c:	4b04      	ldr	r3, [pc, #16]	; (8004ab0 <HAL_RCC_ClockConfig+0x12c>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	039e      	lsls	r6, r3, #14
 8004aa2:	d4aa      	bmi.n	80049fa <HAL_RCC_ClockConfig+0x76>
 8004aa4:	e782      	b.n	80049ac <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 8004aa6:	2003      	movs	r0, #3
 8004aa8:	e781      	b.n	80049ae <HAL_RCC_ClockConfig+0x2a>
 8004aaa:	bf00      	nop
 8004aac:	40023c00 	.word	0x40023c00
 8004ab0:	40023800 	.word	0x40023800
 8004ab4:	080074f8 	.word	0x080074f8
 8004ab8:	2000039c 	.word	0x2000039c
 8004abc:	200003a4 	.word	0x200003a4

08004ac0 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8004ac0:	4b01      	ldr	r3, [pc, #4]	; (8004ac8 <HAL_RCC_GetHCLKFreq+0x8>)
}
 8004ac2:	6818      	ldr	r0, [r3, #0]
 8004ac4:	4770      	bx	lr
 8004ac6:	bf00      	nop
 8004ac8:	2000039c 	.word	0x2000039c

08004acc <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004acc:	4b04      	ldr	r3, [pc, #16]	; (8004ae0 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8004ace:	4905      	ldr	r1, [pc, #20]	; (8004ae4 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	4a05      	ldr	r2, [pc, #20]	; (8004ae8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004ad4:	6808      	ldr	r0, [r1, #0]
 8004ad6:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8004ada:	5cd3      	ldrb	r3, [r2, r3]
}
 8004adc:	40d8      	lsrs	r0, r3
 8004ade:	4770      	bx	lr
 8004ae0:	40023800 	.word	0x40023800
 8004ae4:	2000039c 	.word	0x2000039c
 8004ae8:	08007508 	.word	0x08007508

08004aec <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004aec:	4b04      	ldr	r3, [pc, #16]	; (8004b00 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 8004aee:	4905      	ldr	r1, [pc, #20]	; (8004b04 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	4a05      	ldr	r2, [pc, #20]	; (8004b08 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004af4:	6808      	ldr	r0, [r1, #0]
 8004af6:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8004afa:	5cd3      	ldrb	r3, [r2, r3]
}
 8004afc:	40d8      	lsrs	r0, r3
 8004afe:	4770      	bx	lr
 8004b00:	40023800 	.word	0x40023800
 8004b04:	2000039c 	.word	0x2000039c
 8004b08:	08007508 	.word	0x08007508

08004b0c <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b0c:	4927      	ldr	r1, [pc, #156]	; (8004bac <HAL_RCC_GetSysClockFreq+0xa0>)
{
 8004b0e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b10:	688b      	ldr	r3, [r1, #8]
 8004b12:	f003 030c 	and.w	r3, r3, #12
 8004b16:	2b08      	cmp	r3, #8
 8004b18:	d007      	beq.n	8004b2a <HAL_RCC_GetSysClockFreq+0x1e>
 8004b1a:	2b0c      	cmp	r3, #12
 8004b1c:	d01d      	beq.n	8004b5a <HAL_RCC_GetSysClockFreq+0x4e>
 8004b1e:	4a24      	ldr	r2, [pc, #144]	; (8004bb0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004b20:	4824      	ldr	r0, [pc, #144]	; (8004bb4 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004b22:	2b04      	cmp	r3, #4
 8004b24:	bf08      	it	eq
 8004b26:	4610      	moveq	r0, r2
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8004b28:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b2a:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b2c:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b2e:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b30:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b34:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b38:	d12e      	bne.n	8004b98 <HAL_RCC_GetSysClockFreq+0x8c>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b3a:	481e      	ldr	r0, [pc, #120]	; (8004bb4 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004b3c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8004b40:	fba1 0100 	umull	r0, r1, r1, r0
 8004b44:	f7fb fb60 	bl	8000208 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b48:	4b18      	ldr	r3, [pc, #96]	; (8004bac <HAL_RCC_GetSysClockFreq+0xa0>)
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8004b50:	3301      	adds	r3, #1
 8004b52:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8004b54:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8004b58:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b5a:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b5c:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b5e:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b60:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b64:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b68:	d10d      	bne.n	8004b86 <HAL_RCC_GetSysClockFreq+0x7a>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b6a:	4812      	ldr	r0, [pc, #72]	; (8004bb4 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004b6c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8004b70:	fba1 0100 	umull	r0, r1, r1, r0
 8004b74:	f7fb fb48 	bl	8000208 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004b78:	4b0c      	ldr	r3, [pc, #48]	; (8004bac <HAL_RCC_GetSysClockFreq+0xa0>)
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	f3c3 7302 	ubfx	r3, r3, #28, #3
      sysclockfreq = pllvco/pllr;
 8004b80:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8004b84:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b86:	480a      	ldr	r0, [pc, #40]	; (8004bb0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004b88:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	fba1 0100 	umull	r0, r1, r1, r0
 8004b92:	f7fb fb39 	bl	8000208 <__aeabi_uldivmod>
 8004b96:	e7ef      	b.n	8004b78 <HAL_RCC_GetSysClockFreq+0x6c>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b98:	4805      	ldr	r0, [pc, #20]	; (8004bb0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004b9a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	fba1 0100 	umull	r0, r1, r1, r0
 8004ba4:	f7fb fb30 	bl	8000208 <__aeabi_uldivmod>
 8004ba8:	e7ce      	b.n	8004b48 <HAL_RCC_GetSysClockFreq+0x3c>
 8004baa:	bf00      	nop
 8004bac:	40023800 	.word	0x40023800
 8004bb0:	007a1200 	.word	0x007a1200
 8004bb4:	00f42400 	.word	0x00f42400

08004bb8 <HAL_RCC_OscConfig>:
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004bb8:	2800      	cmp	r0, #0
 8004bba:	f000 81b3 	beq.w	8004f24 <HAL_RCC_OscConfig+0x36c>
{
 8004bbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bc2:	6803      	ldr	r3, [r0, #0]
 8004bc4:	07da      	lsls	r2, r3, #31
{
 8004bc6:	b082      	sub	sp, #8
 8004bc8:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bca:	d536      	bpl.n	8004c3a <HAL_RCC_OscConfig+0x82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004bcc:	49a2      	ldr	r1, [pc, #648]	; (8004e58 <HAL_RCC_OscConfig+0x2a0>)
 8004bce:	688a      	ldr	r2, [r1, #8]
 8004bd0:	f002 020c 	and.w	r2, r2, #12
 8004bd4:	2a04      	cmp	r2, #4
 8004bd6:	f000 80df 	beq.w	8004d98 <HAL_RCC_OscConfig+0x1e0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004bda:	688a      	ldr	r2, [r1, #8]
 8004bdc:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004be0:	2a08      	cmp	r2, #8
 8004be2:	f000 80d5 	beq.w	8004d90 <HAL_RCC_OscConfig+0x1d8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004be6:	499c      	ldr	r1, [pc, #624]	; (8004e58 <HAL_RCC_OscConfig+0x2a0>)
 8004be8:	688a      	ldr	r2, [r1, #8]
 8004bea:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004bee:	2a0c      	cmp	r2, #12
 8004bf0:	f000 8105 	beq.w	8004dfe <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bf4:	6863      	ldr	r3, [r4, #4]
 8004bf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bfa:	f000 8119 	beq.w	8004e30 <HAL_RCC_OscConfig+0x278>
 8004bfe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c02:	f000 8196 	beq.w	8004f32 <HAL_RCC_OscConfig+0x37a>
 8004c06:	4d94      	ldr	r5, [pc, #592]	; (8004e58 <HAL_RCC_OscConfig+0x2a0>)
 8004c08:	682a      	ldr	r2, [r5, #0]
 8004c0a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004c0e:	602a      	str	r2, [r5, #0]
 8004c10:	682a      	ldr	r2, [r5, #0]
 8004c12:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004c16:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	f040 810e 	bne.w	8004e3a <HAL_RCC_OscConfig+0x282>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c1e:	f7ff f983 	bl	8003f28 <HAL_GetTick>
 8004c22:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c24:	e005      	b.n	8004c32 <HAL_RCC_OscConfig+0x7a>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c26:	f7ff f97f 	bl	8003f28 <HAL_GetTick>
 8004c2a:	1b80      	subs	r0, r0, r6
 8004c2c:	2864      	cmp	r0, #100	; 0x64
 8004c2e:	f200 80fb 	bhi.w	8004e28 <HAL_RCC_OscConfig+0x270>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c32:	682b      	ldr	r3, [r5, #0]
 8004c34:	0399      	lsls	r1, r3, #14
 8004c36:	d4f6      	bmi.n	8004c26 <HAL_RCC_OscConfig+0x6e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c38:	6823      	ldr	r3, [r4, #0]
 8004c3a:	079a      	lsls	r2, r3, #30
 8004c3c:	d52f      	bpl.n	8004c9e <HAL_RCC_OscConfig+0xe6>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004c3e:	4a86      	ldr	r2, [pc, #536]	; (8004e58 <HAL_RCC_OscConfig+0x2a0>)
 8004c40:	6891      	ldr	r1, [r2, #8]
 8004c42:	f011 0f0c 	tst.w	r1, #12
 8004c46:	f000 8098 	beq.w	8004d7a <HAL_RCC_OscConfig+0x1c2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004c4a:	6891      	ldr	r1, [r2, #8]
 8004c4c:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004c50:	2908      	cmp	r1, #8
 8004c52:	f000 808e 	beq.w	8004d72 <HAL_RCC_OscConfig+0x1ba>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c56:	4980      	ldr	r1, [pc, #512]	; (8004e58 <HAL_RCC_OscConfig+0x2a0>)
 8004c58:	688a      	ldr	r2, [r1, #8]
 8004c5a:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004c5e:	2a0c      	cmp	r2, #12
 8004c60:	f000 8162 	beq.w	8004f28 <HAL_RCC_OscConfig+0x370>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c64:	68e3      	ldr	r3, [r4, #12]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	f000 8114 	beq.w	8004e94 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c6c:	4b7b      	ldr	r3, [pc, #492]	; (8004e5c <HAL_RCC_OscConfig+0x2a4>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c6e:	4e7a      	ldr	r6, [pc, #488]	; (8004e58 <HAL_RCC_OscConfig+0x2a0>)
        __HAL_RCC_HSI_ENABLE();
 8004c70:	2201      	movs	r2, #1
 8004c72:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004c74:	f7ff f958 	bl	8003f28 <HAL_GetTick>
 8004c78:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c7a:	e005      	b.n	8004c88 <HAL_RCC_OscConfig+0xd0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c7c:	f7ff f954 	bl	8003f28 <HAL_GetTick>
 8004c80:	1b40      	subs	r0, r0, r5
 8004c82:	2802      	cmp	r0, #2
 8004c84:	f200 80d0 	bhi.w	8004e28 <HAL_RCC_OscConfig+0x270>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c88:	6833      	ldr	r3, [r6, #0]
 8004c8a:	0798      	lsls	r0, r3, #30
 8004c8c:	d5f6      	bpl.n	8004c7c <HAL_RCC_OscConfig+0xc4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c8e:	6833      	ldr	r3, [r6, #0]
 8004c90:	6922      	ldr	r2, [r4, #16]
 8004c92:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004c96:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004c9a:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c9c:	6823      	ldr	r3, [r4, #0]
 8004c9e:	071a      	lsls	r2, r3, #28
 8004ca0:	d451      	bmi.n	8004d46 <HAL_RCC_OscConfig+0x18e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ca2:	0758      	lsls	r0, r3, #29
 8004ca4:	d530      	bpl.n	8004d08 <HAL_RCC_OscConfig+0x150>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ca6:	4a6c      	ldr	r2, [pc, #432]	; (8004e58 <HAL_RCC_OscConfig+0x2a0>)
 8004ca8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004caa:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8004cae:	f000 809a 	beq.w	8004de6 <HAL_RCC_OscConfig+0x22e>
    FlagStatus       pwrclkchanged = RESET;
 8004cb2:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cb4:	4e6a      	ldr	r6, [pc, #424]	; (8004e60 <HAL_RCC_OscConfig+0x2a8>)
 8004cb6:	6833      	ldr	r3, [r6, #0]
 8004cb8:	05d9      	lsls	r1, r3, #23
 8004cba:	f140 80a5 	bpl.w	8004e08 <HAL_RCC_OscConfig+0x250>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cbe:	68a3      	ldr	r3, [r4, #8]
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	f000 80cf 	beq.w	8004e64 <HAL_RCC_OscConfig+0x2ac>
 8004cc6:	2b05      	cmp	r3, #5
 8004cc8:	f000 813d 	beq.w	8004f46 <HAL_RCC_OscConfig+0x38e>
 8004ccc:	4e62      	ldr	r6, [pc, #392]	; (8004e58 <HAL_RCC_OscConfig+0x2a0>)
 8004cce:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8004cd0:	f022 0201 	bic.w	r2, r2, #1
 8004cd4:	6732      	str	r2, [r6, #112]	; 0x70
 8004cd6:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8004cd8:	f022 0204 	bic.w	r2, r2, #4
 8004cdc:	6732      	str	r2, [r6, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	f040 80c5 	bne.w	8004e6e <HAL_RCC_OscConfig+0x2b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ce4:	f7ff f920 	bl	8003f28 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ce8:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8004cec:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cee:	e005      	b.n	8004cfc <HAL_RCC_OscConfig+0x144>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cf0:	f7ff f91a 	bl	8003f28 <HAL_GetTick>
 8004cf4:	1bc0      	subs	r0, r0, r7
 8004cf6:	4540      	cmp	r0, r8
 8004cf8:	f200 8096 	bhi.w	8004e28 <HAL_RCC_OscConfig+0x270>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cfc:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8004cfe:	0798      	lsls	r0, r3, #30
 8004d00:	d4f6      	bmi.n	8004cf0 <HAL_RCC_OscConfig+0x138>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d02:	2d00      	cmp	r5, #0
 8004d04:	f040 8108 	bne.w	8004f18 <HAL_RCC_OscConfig+0x360>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d08:	69a0      	ldr	r0, [r4, #24]
 8004d0a:	b1c0      	cbz	r0, 8004d3e <HAL_RCC_OscConfig+0x186>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d0c:	4d52      	ldr	r5, [pc, #328]	; (8004e58 <HAL_RCC_OscConfig+0x2a0>)
 8004d0e:	68ab      	ldr	r3, [r5, #8]
 8004d10:	f003 030c 	and.w	r3, r3, #12
 8004d14:	2b08      	cmp	r3, #8
 8004d16:	f000 80ce 	beq.w	8004eb6 <HAL_RCC_OscConfig+0x2fe>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d1a:	4b50      	ldr	r3, [pc, #320]	; (8004e5c <HAL_RCC_OscConfig+0x2a4>)
 8004d1c:	2200      	movs	r2, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d1e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8004d20:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d22:	f000 811a 	beq.w	8004f5a <HAL_RCC_OscConfig+0x3a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d26:	f7ff f8ff 	bl	8003f28 <HAL_GetTick>
 8004d2a:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d2c:	e004      	b.n	8004d38 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d2e:	f7ff f8fb 	bl	8003f28 <HAL_GetTick>
 8004d32:	1b00      	subs	r0, r0, r4
 8004d34:	2802      	cmp	r0, #2
 8004d36:	d877      	bhi.n	8004e28 <HAL_RCC_OscConfig+0x270>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d38:	682b      	ldr	r3, [r5, #0]
 8004d3a:	019b      	lsls	r3, r3, #6
 8004d3c:	d4f7      	bmi.n	8004d2e <HAL_RCC_OscConfig+0x176>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8004d3e:	2000      	movs	r0, #0
}
 8004d40:	b002      	add	sp, #8
 8004d42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004d46:	6963      	ldr	r3, [r4, #20]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d02f      	beq.n	8004dac <HAL_RCC_OscConfig+0x1f4>
      __HAL_RCC_LSI_ENABLE();
 8004d4c:	4b43      	ldr	r3, [pc, #268]	; (8004e5c <HAL_RCC_OscConfig+0x2a4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d4e:	4e42      	ldr	r6, [pc, #264]	; (8004e58 <HAL_RCC_OscConfig+0x2a0>)
      __HAL_RCC_LSI_ENABLE();
 8004d50:	2201      	movs	r2, #1
 8004d52:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8004d56:	f7ff f8e7 	bl	8003f28 <HAL_GetTick>
 8004d5a:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d5c:	e004      	b.n	8004d68 <HAL_RCC_OscConfig+0x1b0>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d5e:	f7ff f8e3 	bl	8003f28 <HAL_GetTick>
 8004d62:	1b40      	subs	r0, r0, r5
 8004d64:	2802      	cmp	r0, #2
 8004d66:	d85f      	bhi.n	8004e28 <HAL_RCC_OscConfig+0x270>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d68:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8004d6a:	079b      	lsls	r3, r3, #30
 8004d6c:	d5f7      	bpl.n	8004d5e <HAL_RCC_OscConfig+0x1a6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d6e:	6823      	ldr	r3, [r4, #0]
 8004d70:	e797      	b.n	8004ca2 <HAL_RCC_OscConfig+0xea>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004d72:	6852      	ldr	r2, [r2, #4]
 8004d74:	0257      	lsls	r7, r2, #9
 8004d76:	f53f af6e 	bmi.w	8004c56 <HAL_RCC_OscConfig+0x9e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d7a:	4a37      	ldr	r2, [pc, #220]	; (8004e58 <HAL_RCC_OscConfig+0x2a0>)
 8004d7c:	6812      	ldr	r2, [r2, #0]
 8004d7e:	0795      	lsls	r5, r2, #30
 8004d80:	d525      	bpl.n	8004dce <HAL_RCC_OscConfig+0x216>
 8004d82:	68e2      	ldr	r2, [r4, #12]
 8004d84:	2a01      	cmp	r2, #1
 8004d86:	d022      	beq.n	8004dce <HAL_RCC_OscConfig+0x216>
        return HAL_ERROR;
 8004d88:	2001      	movs	r0, #1
}
 8004d8a:	b002      	add	sp, #8
 8004d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004d90:	684a      	ldr	r2, [r1, #4]
 8004d92:	0257      	lsls	r7, r2, #9
 8004d94:	f57f af27 	bpl.w	8004be6 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d98:	4a2f      	ldr	r2, [pc, #188]	; (8004e58 <HAL_RCC_OscConfig+0x2a0>)
 8004d9a:	6812      	ldr	r2, [r2, #0]
 8004d9c:	0395      	lsls	r5, r2, #14
 8004d9e:	f57f af4c 	bpl.w	8004c3a <HAL_RCC_OscConfig+0x82>
 8004da2:	6862      	ldr	r2, [r4, #4]
 8004da4:	2a00      	cmp	r2, #0
 8004da6:	f47f af48 	bne.w	8004c3a <HAL_RCC_OscConfig+0x82>
 8004daa:	e7ed      	b.n	8004d88 <HAL_RCC_OscConfig+0x1d0>
      __HAL_RCC_LSI_DISABLE();
 8004dac:	4a2b      	ldr	r2, [pc, #172]	; (8004e5c <HAL_RCC_OscConfig+0x2a4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dae:	4e2a      	ldr	r6, [pc, #168]	; (8004e58 <HAL_RCC_OscConfig+0x2a0>)
      __HAL_RCC_LSI_DISABLE();
 8004db0:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8004db4:	f7ff f8b8 	bl	8003f28 <HAL_GetTick>
 8004db8:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dba:	e004      	b.n	8004dc6 <HAL_RCC_OscConfig+0x20e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004dbc:	f7ff f8b4 	bl	8003f28 <HAL_GetTick>
 8004dc0:	1b40      	subs	r0, r0, r5
 8004dc2:	2802      	cmp	r0, #2
 8004dc4:	d830      	bhi.n	8004e28 <HAL_RCC_OscConfig+0x270>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dc6:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8004dc8:	079f      	lsls	r7, r3, #30
 8004dca:	d4f7      	bmi.n	8004dbc <HAL_RCC_OscConfig+0x204>
 8004dcc:	e7cf      	b.n	8004d6e <HAL_RCC_OscConfig+0x1b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dce:	4922      	ldr	r1, [pc, #136]	; (8004e58 <HAL_RCC_OscConfig+0x2a0>)
 8004dd0:	6920      	ldr	r0, [r4, #16]
 8004dd2:	680a      	ldr	r2, [r1, #0]
 8004dd4:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8004dd8:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8004ddc:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004dde:	071a      	lsls	r2, r3, #28
 8004de0:	f57f af5f 	bpl.w	8004ca2 <HAL_RCC_OscConfig+0xea>
 8004de4:	e7af      	b.n	8004d46 <HAL_RCC_OscConfig+0x18e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004de6:	9301      	str	r3, [sp, #4]
 8004de8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004dea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dee:	6413      	str	r3, [r2, #64]	; 0x40
 8004df0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004df6:	9301      	str	r3, [sp, #4]
 8004df8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004dfa:	2501      	movs	r5, #1
 8004dfc:	e75a      	b.n	8004cb4 <HAL_RCC_OscConfig+0xfc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004dfe:	684a      	ldr	r2, [r1, #4]
 8004e00:	0256      	lsls	r6, r2, #9
 8004e02:	f57f aef7 	bpl.w	8004bf4 <HAL_RCC_OscConfig+0x3c>
 8004e06:	e7c7      	b.n	8004d98 <HAL_RCC_OscConfig+0x1e0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e08:	6833      	ldr	r3, [r6, #0]
 8004e0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e0e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004e10:	f7ff f88a 	bl	8003f28 <HAL_GetTick>
 8004e14:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e16:	6833      	ldr	r3, [r6, #0]
 8004e18:	05da      	lsls	r2, r3, #23
 8004e1a:	f53f af50 	bmi.w	8004cbe <HAL_RCC_OscConfig+0x106>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e1e:	f7ff f883 	bl	8003f28 <HAL_GetTick>
 8004e22:	1bc0      	subs	r0, r0, r7
 8004e24:	2802      	cmp	r0, #2
 8004e26:	d9f6      	bls.n	8004e16 <HAL_RCC_OscConfig+0x25e>
            return HAL_TIMEOUT;
 8004e28:	2003      	movs	r0, #3
}
 8004e2a:	b002      	add	sp, #8
 8004e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e30:	4a09      	ldr	r2, [pc, #36]	; (8004e58 <HAL_RCC_OscConfig+0x2a0>)
 8004e32:	6813      	ldr	r3, [r2, #0]
 8004e34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e38:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004e3a:	f7ff f875 	bl	8003f28 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e3e:	4e06      	ldr	r6, [pc, #24]	; (8004e58 <HAL_RCC_OscConfig+0x2a0>)
        tickstart = HAL_GetTick();
 8004e40:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e42:	e004      	b.n	8004e4e <HAL_RCC_OscConfig+0x296>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e44:	f7ff f870 	bl	8003f28 <HAL_GetTick>
 8004e48:	1b40      	subs	r0, r0, r5
 8004e4a:	2864      	cmp	r0, #100	; 0x64
 8004e4c:	d8ec      	bhi.n	8004e28 <HAL_RCC_OscConfig+0x270>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e4e:	6833      	ldr	r3, [r6, #0]
 8004e50:	0398      	lsls	r0, r3, #14
 8004e52:	d5f7      	bpl.n	8004e44 <HAL_RCC_OscConfig+0x28c>
 8004e54:	e6f0      	b.n	8004c38 <HAL_RCC_OscConfig+0x80>
 8004e56:	bf00      	nop
 8004e58:	40023800 	.word	0x40023800
 8004e5c:	42470000 	.word	0x42470000
 8004e60:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e64:	4a55      	ldr	r2, [pc, #340]	; (8004fbc <HAL_RCC_OscConfig+0x404>)
 8004e66:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8004e68:	f043 0301 	orr.w	r3, r3, #1
 8004e6c:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 8004e6e:	f7ff f85b 	bl	8003f28 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e72:	4f52      	ldr	r7, [pc, #328]	; (8004fbc <HAL_RCC_OscConfig+0x404>)
      tickstart = HAL_GetTick();
 8004e74:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e76:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e7a:	e004      	b.n	8004e86 <HAL_RCC_OscConfig+0x2ce>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e7c:	f7ff f854 	bl	8003f28 <HAL_GetTick>
 8004e80:	1b80      	subs	r0, r0, r6
 8004e82:	4540      	cmp	r0, r8
 8004e84:	d8d0      	bhi.n	8004e28 <HAL_RCC_OscConfig+0x270>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e88:	079b      	lsls	r3, r3, #30
 8004e8a:	d5f7      	bpl.n	8004e7c <HAL_RCC_OscConfig+0x2c4>
    if(pwrclkchanged == SET)
 8004e8c:	2d00      	cmp	r5, #0
 8004e8e:	f43f af3b 	beq.w	8004d08 <HAL_RCC_OscConfig+0x150>
 8004e92:	e041      	b.n	8004f18 <HAL_RCC_OscConfig+0x360>
        __HAL_RCC_HSI_DISABLE();
 8004e94:	4a4a      	ldr	r2, [pc, #296]	; (8004fc0 <HAL_RCC_OscConfig+0x408>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e96:	4e49      	ldr	r6, [pc, #292]	; (8004fbc <HAL_RCC_OscConfig+0x404>)
        __HAL_RCC_HSI_DISABLE();
 8004e98:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004e9a:	f7ff f845 	bl	8003f28 <HAL_GetTick>
 8004e9e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ea0:	e004      	b.n	8004eac <HAL_RCC_OscConfig+0x2f4>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ea2:	f7ff f841 	bl	8003f28 <HAL_GetTick>
 8004ea6:	1b40      	subs	r0, r0, r5
 8004ea8:	2802      	cmp	r0, #2
 8004eaa:	d8bd      	bhi.n	8004e28 <HAL_RCC_OscConfig+0x270>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004eac:	6833      	ldr	r3, [r6, #0]
 8004eae:	0799      	lsls	r1, r3, #30
 8004eb0:	d4f7      	bmi.n	8004ea2 <HAL_RCC_OscConfig+0x2ea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004eb2:	6823      	ldr	r3, [r4, #0]
 8004eb4:	e6f3      	b.n	8004c9e <HAL_RCC_OscConfig+0xe6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004eb6:	2801      	cmp	r0, #1
 8004eb8:	f43f af42 	beq.w	8004d40 <HAL_RCC_OscConfig+0x188>
        pll_config = RCC->PLLCFGR;
 8004ebc:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ebe:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ec0:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ec4:	4291      	cmp	r1, r2
 8004ec6:	f47f af5f 	bne.w	8004d88 <HAL_RCC_OscConfig+0x1d0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eca:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ecc:	f003 013f 	and.w	r1, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ed0:	4291      	cmp	r1, r2
 8004ed2:	f47f af59 	bne.w	8004d88 <HAL_RCC_OscConfig+0x1d0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ed6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004ed8:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8004edc:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ede:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8004ee2:	f47f af51 	bne.w	8004d88 <HAL_RCC_OscConfig+0x1d0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ee6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004ee8:	0852      	lsrs	r2, r2, #1
 8004eea:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8004eee:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ef0:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8004ef4:	f47f af48 	bne.w	8004d88 <HAL_RCC_OscConfig+0x1d0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ef8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004efa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004efe:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 8004f02:	f47f af41 	bne.w	8004d88 <HAL_RCC_OscConfig+0x1d0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004f06:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004f08:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f0c:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
    return HAL_ERROR;
 8004f10:	bf14      	ite	ne
 8004f12:	2001      	movne	r0, #1
 8004f14:	2000      	moveq	r0, #0
 8004f16:	e713      	b.n	8004d40 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f18:	4a28      	ldr	r2, [pc, #160]	; (8004fbc <HAL_RCC_OscConfig+0x404>)
 8004f1a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004f1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f20:	6413      	str	r3, [r2, #64]	; 0x40
 8004f22:	e6f1      	b.n	8004d08 <HAL_RCC_OscConfig+0x150>
    return HAL_ERROR;
 8004f24:	2001      	movs	r0, #1
}
 8004f26:	4770      	bx	lr
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f28:	684a      	ldr	r2, [r1, #4]
 8004f2a:	0256      	lsls	r6, r2, #9
 8004f2c:	f53f ae9a 	bmi.w	8004c64 <HAL_RCC_OscConfig+0xac>
 8004f30:	e723      	b.n	8004d7a <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f32:	4b22      	ldr	r3, [pc, #136]	; (8004fbc <HAL_RCC_OscConfig+0x404>)
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004f3a:	601a      	str	r2, [r3, #0]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004f42:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f44:	e779      	b.n	8004e3a <HAL_RCC_OscConfig+0x282>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f46:	4b1d      	ldr	r3, [pc, #116]	; (8004fbc <HAL_RCC_OscConfig+0x404>)
 8004f48:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004f4a:	f042 0204 	orr.w	r2, r2, #4
 8004f4e:	671a      	str	r2, [r3, #112]	; 0x70
 8004f50:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004f52:	f042 0201 	orr.w	r2, r2, #1
 8004f56:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f58:	e789      	b.n	8004e6e <HAL_RCC_OscConfig+0x2b6>
        tickstart = HAL_GetTick();
 8004f5a:	f7fe ffe5 	bl	8003f28 <HAL_GetTick>
 8004f5e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f60:	e005      	b.n	8004f6e <HAL_RCC_OscConfig+0x3b6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f62:	f7fe ffe1 	bl	8003f28 <HAL_GetTick>
 8004f66:	1b80      	subs	r0, r0, r6
 8004f68:	2802      	cmp	r0, #2
 8004f6a:	f63f af5d 	bhi.w	8004e28 <HAL_RCC_OscConfig+0x270>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f6e:	682b      	ldr	r3, [r5, #0]
 8004f70:	0199      	lsls	r1, r3, #6
 8004f72:	d4f6      	bmi.n	8004f62 <HAL_RCC_OscConfig+0x3aa>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f74:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8004f78:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004f7a:	430b      	orrs	r3, r1
 8004f7c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8004f80:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	; 0x28
 8004f84:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004f86:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8004f8a:	0852      	lsrs	r2, r2, #1
 8004f8c:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8004f90:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8004f92:	490b      	ldr	r1, [pc, #44]	; (8004fc0 <HAL_RCC_OscConfig+0x408>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f94:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8004f98:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f9a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8004f9c:	660a      	str	r2, [r1, #96]	; 0x60
        tickstart = HAL_GetTick();
 8004f9e:	f7fe ffc3 	bl	8003f28 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fa2:	4d06      	ldr	r5, [pc, #24]	; (8004fbc <HAL_RCC_OscConfig+0x404>)
        tickstart = HAL_GetTick();
 8004fa4:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fa6:	e005      	b.n	8004fb4 <HAL_RCC_OscConfig+0x3fc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fa8:	f7fe ffbe 	bl	8003f28 <HAL_GetTick>
 8004fac:	1b00      	subs	r0, r0, r4
 8004fae:	2802      	cmp	r0, #2
 8004fb0:	f63f af3a 	bhi.w	8004e28 <HAL_RCC_OscConfig+0x270>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fb4:	682b      	ldr	r3, [r5, #0]
 8004fb6:	019a      	lsls	r2, r3, #6
 8004fb8:	d5f6      	bpl.n	8004fa8 <HAL_RCC_OscConfig+0x3f0>
 8004fba:	e6c0      	b.n	8004d3e <HAL_RCC_OscConfig+0x186>
 8004fbc:	40023800 	.word	0x40023800
 8004fc0:	42470000 	.word	0x42470000

08004fc4 <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004fc4:	2800      	cmp	r0, #0
 8004fc6:	d05c      	beq.n	8005082 <HAL_SPI_Init+0xbe>
{
 8004fc8:	b570      	push	{r4, r5, r6, lr}
 8004fca:	4604      	mov	r4, r0
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004fcc:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8004fce:	2800      	cmp	r0, #0
 8004fd0:	d047      	beq.n	8005062 <HAL_SPI_Init+0x9e>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004fd2:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004fd4:	e9c4 3304 	strd	r3, r3, [r4, #16]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004fd8:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004fdc:	2200      	movs	r2, #0
 8004fde:	62a2      	str	r2, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004fe0:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d042      	beq.n	800506e <HAL_SPI_Init+0xaa>
 8004fe8:	4694      	mov	ip, r2
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004fea:	6821      	ldr	r1, [r4, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004fec:	68a5      	ldr	r5, [r4, #8]
 8004fee:	69a2      	ldr	r2, [r4, #24]
 8004ff0:	6a26      	ldr	r6, [r4, #32]
  hspi->State = HAL_SPI_STATE_BUSY;
 8004ff2:	2302      	movs	r3, #2
 8004ff4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8004ff8:	680b      	ldr	r3, [r1, #0]
 8004ffa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ffe:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005000:	6863      	ldr	r3, [r4, #4]
 8005002:	f405 4504 	and.w	r5, r5, #33792	; 0x8400
 8005006:	f403 7382 	and.w	r3, r3, #260	; 0x104
 800500a:	432b      	orrs	r3, r5
 800500c:	68e5      	ldr	r5, [r4, #12]
 800500e:	f405 6500 	and.w	r5, r5, #2048	; 0x800
 8005012:	432b      	orrs	r3, r5
 8005014:	6925      	ldr	r5, [r4, #16]
 8005016:	f005 0502 	and.w	r5, r5, #2
 800501a:	432b      	orrs	r3, r5
 800501c:	6965      	ldr	r5, [r4, #20]
 800501e:	f005 0501 	and.w	r5, r5, #1
 8005022:	432b      	orrs	r3, r5
 8005024:	69e5      	ldr	r5, [r4, #28]
 8005026:	f006 0e80 	and.w	lr, r6, #128	; 0x80
 800502a:	f402 7600 	and.w	r6, r2, #512	; 0x200
 800502e:	f005 0538 	and.w	r5, r5, #56	; 0x38
 8005032:	4333      	orrs	r3, r6
 8005034:	432b      	orrs	r3, r5
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005036:	0c12      	lsrs	r2, r2, #16
 8005038:	f000 0010 	and.w	r0, r0, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800503c:	ea43 030e 	orr.w	r3, r3, lr
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005040:	f002 0204 	and.w	r2, r2, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005044:	ea43 030c 	orr.w	r3, r3, ip
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005048:	4302      	orrs	r2, r0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800504a:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800504c:	604a      	str	r2, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800504e:	69cb      	ldr	r3, [r1, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005050:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005052:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 8005056:	2201      	movs	r2, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005058:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800505a:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800505c:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51

  return HAL_OK;
}
 8005060:	bd70      	pop	{r4, r5, r6, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005062:	6863      	ldr	r3, [r4, #4]
 8005064:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005068:	d0b6      	beq.n	8004fd8 <HAL_SPI_Init+0x14>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800506a:	61e0      	str	r0, [r4, #28]
 800506c:	e7b4      	b.n	8004fd8 <HAL_SPI_Init+0x14>
    HAL_SPI_MspInit(hspi);
 800506e:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8005070:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8005074:	f7fe fbbc 	bl	80037f0 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005078:	e9d4 0309 	ldrd	r0, r3, [r4, #36]	; 0x24
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800507c:	f403 5c00 	and.w	ip, r3, #8192	; 0x2000
 8005080:	e7b3      	b.n	8004fea <HAL_SPI_Init+0x26>
    return HAL_ERROR;
 8005082:	2001      	movs	r0, #1
}
 8005084:	4770      	bx	lr
 8005086:	bf00      	nop

08005088 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005088:	2800      	cmp	r0, #0
 800508a:	f000 8087 	beq.w	800519c <HAL_TIM_Base_Init+0x114>
{
 800508e:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005090:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005094:	4604      	mov	r4, r0
 8005096:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800509a:	2b00      	cmp	r3, #0
 800509c:	d079      	beq.n	8005192 <HAL_TIM_Base_Init+0x10a>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800509e:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050a0:	493f      	ldr	r1, [pc, #252]	; (80051a0 <HAL_TIM_Base_Init+0x118>)
  htim->State = HAL_TIM_STATE_BUSY;
 80050a2:	2302      	movs	r3, #2
 80050a4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050a8:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 80050aa:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050ac:	d05d      	beq.n	800516a <HAL_TIM_Base_Init+0xe2>
 80050ae:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80050b2:	d031      	beq.n	8005118 <HAL_TIM_Base_Init+0x90>
 80050b4:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 80050b8:	428a      	cmp	r2, r1
 80050ba:	d02d      	beq.n	8005118 <HAL_TIM_Base_Init+0x90>
 80050bc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80050c0:	428a      	cmp	r2, r1
 80050c2:	d029      	beq.n	8005118 <HAL_TIM_Base_Init+0x90>
 80050c4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80050c8:	428a      	cmp	r2, r1
 80050ca:	d025      	beq.n	8005118 <HAL_TIM_Base_Init+0x90>
 80050cc:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 80050d0:	428a      	cmp	r2, r1
 80050d2:	d04a      	beq.n	800516a <HAL_TIM_Base_Init+0xe2>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050d4:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 80050d8:	428a      	cmp	r2, r1
 80050da:	d021      	beq.n	8005120 <HAL_TIM_Base_Init+0x98>
 80050dc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80050e0:	428a      	cmp	r2, r1
 80050e2:	d01d      	beq.n	8005120 <HAL_TIM_Base_Init+0x98>
 80050e4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80050e8:	428a      	cmp	r2, r1
 80050ea:	d019      	beq.n	8005120 <HAL_TIM_Base_Init+0x98>
 80050ec:	f5a1 3198 	sub.w	r1, r1, #77824	; 0x13000
 80050f0:	428a      	cmp	r2, r1
 80050f2:	d015      	beq.n	8005120 <HAL_TIM_Base_Init+0x98>
 80050f4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80050f8:	428a      	cmp	r2, r1
 80050fa:	d011      	beq.n	8005120 <HAL_TIM_Base_Init+0x98>
 80050fc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005100:	428a      	cmp	r2, r1
 8005102:	d00d      	beq.n	8005120 <HAL_TIM_Base_Init+0x98>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005104:	69a0      	ldr	r0, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005106:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005108:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800510c:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 800510e:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005110:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005112:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005114:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005116:	e010      	b.n	800513a <HAL_TIM_Base_Init+0xb2>
    tmpcr1 |= Structure->CounterMode;
 8005118:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800511a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800511e:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005120:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005122:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005124:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005128:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800512a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 800512e:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005130:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8005132:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8005134:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005136:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005138:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800513a:	2301      	movs	r3, #1
 800513c:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800513e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005142:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005146:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800514a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800514e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005152:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005156:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800515a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800515e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8005162:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005166:	2000      	movs	r0, #0
}
 8005168:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 800516a:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800516c:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800516e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005172:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8005174:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005178:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800517a:	69a1      	ldr	r1, [r4, #24]
 800517c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005180:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8005182:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005184:	68e3      	ldr	r3, [r4, #12]
 8005186:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005188:	6863      	ldr	r3, [r4, #4]
 800518a:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800518c:	6963      	ldr	r3, [r4, #20]
 800518e:	6313      	str	r3, [r2, #48]	; 0x30
 8005190:	e7d3      	b.n	800513a <HAL_TIM_Base_Init+0xb2>
    htim->Lock = HAL_UNLOCKED;
 8005192:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005196:	f7fe fb95 	bl	80038c4 <HAL_TIM_Base_MspInit>
 800519a:	e780      	b.n	800509e <HAL_TIM_Base_Init+0x16>
    return HAL_ERROR;
 800519c:	2001      	movs	r0, #1
}
 800519e:	4770      	bx	lr
 80051a0:	40010000 	.word	0x40010000

080051a4 <HAL_TIM_PWM_MspInit>:
 80051a4:	4770      	bx	lr
 80051a6:	bf00      	nop

080051a8 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80051a8:	2800      	cmp	r0, #0
 80051aa:	f000 8087 	beq.w	80052bc <HAL_TIM_PWM_Init+0x114>
{
 80051ae:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80051b0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80051b4:	4604      	mov	r4, r0
 80051b6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d079      	beq.n	80052b2 <HAL_TIM_PWM_Init+0x10a>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051be:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051c0:	493f      	ldr	r1, [pc, #252]	; (80052c0 <HAL_TIM_PWM_Init+0x118>)
  htim->State = HAL_TIM_STATE_BUSY;
 80051c2:	2302      	movs	r3, #2
 80051c4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051c8:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 80051ca:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051cc:	d05d      	beq.n	800528a <HAL_TIM_PWM_Init+0xe2>
 80051ce:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80051d2:	d031      	beq.n	8005238 <HAL_TIM_PWM_Init+0x90>
 80051d4:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 80051d8:	428a      	cmp	r2, r1
 80051da:	d02d      	beq.n	8005238 <HAL_TIM_PWM_Init+0x90>
 80051dc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80051e0:	428a      	cmp	r2, r1
 80051e2:	d029      	beq.n	8005238 <HAL_TIM_PWM_Init+0x90>
 80051e4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80051e8:	428a      	cmp	r2, r1
 80051ea:	d025      	beq.n	8005238 <HAL_TIM_PWM_Init+0x90>
 80051ec:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 80051f0:	428a      	cmp	r2, r1
 80051f2:	d04a      	beq.n	800528a <HAL_TIM_PWM_Init+0xe2>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051f4:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 80051f8:	428a      	cmp	r2, r1
 80051fa:	d021      	beq.n	8005240 <HAL_TIM_PWM_Init+0x98>
 80051fc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005200:	428a      	cmp	r2, r1
 8005202:	d01d      	beq.n	8005240 <HAL_TIM_PWM_Init+0x98>
 8005204:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005208:	428a      	cmp	r2, r1
 800520a:	d019      	beq.n	8005240 <HAL_TIM_PWM_Init+0x98>
 800520c:	f5a1 3198 	sub.w	r1, r1, #77824	; 0x13000
 8005210:	428a      	cmp	r2, r1
 8005212:	d015      	beq.n	8005240 <HAL_TIM_PWM_Init+0x98>
 8005214:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005218:	428a      	cmp	r2, r1
 800521a:	d011      	beq.n	8005240 <HAL_TIM_PWM_Init+0x98>
 800521c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005220:	428a      	cmp	r2, r1
 8005222:	d00d      	beq.n	8005240 <HAL_TIM_PWM_Init+0x98>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005224:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005226:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005228:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800522c:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 800522e:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 8005230:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005232:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005234:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005236:	e010      	b.n	800525a <HAL_TIM_PWM_Init+0xb2>
    tmpcr1 |= Structure->CounterMode;
 8005238:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800523a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800523e:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005240:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005242:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005244:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005248:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800524a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 800524e:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005250:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8005252:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8005254:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005256:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005258:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 800525a:	2301      	movs	r3, #1
 800525c:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800525e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005262:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005266:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800526a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800526e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005272:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005276:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800527a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800527e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8005282:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005286:	2000      	movs	r0, #0
}
 8005288:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 800528a:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800528c:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800528e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005292:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8005294:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005298:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800529a:	69a1      	ldr	r1, [r4, #24]
 800529c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052a0:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 80052a2:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052a4:	68e3      	ldr	r3, [r4, #12]
 80052a6:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80052a8:	6863      	ldr	r3, [r4, #4]
 80052aa:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80052ac:	6963      	ldr	r3, [r4, #20]
 80052ae:	6313      	str	r3, [r2, #48]	; 0x30
 80052b0:	e7d3      	b.n	800525a <HAL_TIM_PWM_Init+0xb2>
    htim->Lock = HAL_UNLOCKED;
 80052b2:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80052b6:	f7ff ff75 	bl	80051a4 <HAL_TIM_PWM_MspInit>
 80052ba:	e780      	b.n	80051be <HAL_TIM_PWM_Init+0x16>
    return HAL_ERROR;
 80052bc:	2001      	movs	r0, #1
}
 80052be:	4770      	bx	lr
 80052c0:	40010000 	.word	0x40010000

080052c4 <HAL_TIM_Encoder_Init>:
  if (htim == NULL)
 80052c4:	2800      	cmp	r0, #0
 80052c6:	f000 80a7 	beq.w	8005418 <HAL_TIM_Encoder_Init+0x154>
{
 80052ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80052cc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80052d0:	460d      	mov	r5, r1
 80052d2:	4604      	mov	r4, r0
 80052d4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80052d8:	2b00      	cmp	r3, #0
 80052da:	f000 8098 	beq.w	800540e <HAL_TIM_Encoder_Init+0x14a>
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80052de:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052e0:	494e      	ldr	r1, [pc, #312]	; (800541c <HAL_TIM_Encoder_Init+0x158>)
  htim->State = HAL_TIM_STATE_BUSY;
 80052e2:	2202      	movs	r2, #2
 80052e4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80052e8:	689a      	ldr	r2, [r3, #8]
 80052ea:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80052ee:	f022 0207 	bic.w	r2, r2, #7
 80052f2:	609a      	str	r2, [r3, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052f4:	428b      	cmp	r3, r1
  tmpcr1 = TIMx->CR1;
 80052f6:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052f8:	d075      	beq.n	80053e6 <HAL_TIM_Encoder_Init+0x122>
 80052fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052fe:	d028      	beq.n	8005352 <HAL_TIM_Encoder_Init+0x8e>
 8005300:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 8005304:	428b      	cmp	r3, r1
 8005306:	d024      	beq.n	8005352 <HAL_TIM_Encoder_Init+0x8e>
 8005308:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800530c:	428b      	cmp	r3, r1
 800530e:	d020      	beq.n	8005352 <HAL_TIM_Encoder_Init+0x8e>
 8005310:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005314:	428b      	cmp	r3, r1
 8005316:	d01c      	beq.n	8005352 <HAL_TIM_Encoder_Init+0x8e>
 8005318:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 800531c:	428b      	cmp	r3, r1
 800531e:	d062      	beq.n	80053e6 <HAL_TIM_Encoder_Init+0x122>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005320:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 8005324:	428b      	cmp	r3, r1
 8005326:	d018      	beq.n	800535a <HAL_TIM_Encoder_Init+0x96>
 8005328:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800532c:	428b      	cmp	r3, r1
 800532e:	d014      	beq.n	800535a <HAL_TIM_Encoder_Init+0x96>
 8005330:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005334:	428b      	cmp	r3, r1
 8005336:	d010      	beq.n	800535a <HAL_TIM_Encoder_Init+0x96>
 8005338:	f5a1 3198 	sub.w	r1, r1, #77824	; 0x13000
 800533c:	428b      	cmp	r3, r1
 800533e:	d00c      	beq.n	800535a <HAL_TIM_Encoder_Init+0x96>
 8005340:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005344:	428b      	cmp	r3, r1
 8005346:	d008      	beq.n	800535a <HAL_TIM_Encoder_Init+0x96>
 8005348:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800534c:	428b      	cmp	r3, r1
 800534e:	d108      	bne.n	8005362 <HAL_TIM_Encoder_Init+0x9e>
 8005350:	e003      	b.n	800535a <HAL_TIM_Encoder_Init+0x96>
    tmpcr1 |= Structure->CounterMode;
 8005352:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005354:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005358:	430a      	orrs	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800535a:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800535c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005360:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005362:	69a1      	ldr	r1, [r4, #24]
 8005364:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005368:	430a      	orrs	r2, r1
  TIMx->ARR = (uint32_t)Structure->Period ;
 800536a:	68e1      	ldr	r1, [r4, #12]
  TIMx->CR1 = tmpcr1;
 800536c:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800536e:	62d9      	str	r1, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005370:	6862      	ldr	r2, [r4, #4]
 8005372:	629a      	str	r2, [r3, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8005374:	2601      	movs	r6, #1
 8005376:	615e      	str	r6, [r3, #20]
  tmpsmcr = htim->Instance->SMCR;
 8005378:	6898      	ldr	r0, [r3, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 800537a:	6999      	ldr	r1, [r3, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800537c:	69af      	ldr	r7, [r5, #24]
 800537e:	68aa      	ldr	r2, [r5, #8]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005380:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8005384:	f021 0103 	bic.w	r1, r1, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005388:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 800538c:	430a      	orrs	r2, r1
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800538e:	f422 4e7c 	bic.w	lr, r2, #64512	; 0xfc00
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005392:	692a      	ldr	r2, [r5, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005394:	69e9      	ldr	r1, [r5, #28]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005396:	696f      	ldr	r7, [r5, #20]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005398:	0112      	lsls	r2, r2, #4
 800539a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800539e:	68e9      	ldr	r1, [r5, #12]
 80053a0:	430a      	orrs	r2, r1
  tmpccer = htim->Instance->CCER;
 80053a2:	6a19      	ldr	r1, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80053a4:	f021 0caa 	bic.w	ip, r1, #170	; 0xaa
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80053a8:	6a29      	ldr	r1, [r5, #32]
 80053aa:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80053ae:	6869      	ldr	r1, [r5, #4]
  tmpsmcr |= sConfig->EncoderMode;
 80053b0:	682d      	ldr	r5, [r5, #0]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80053b2:	f02e 0efc 	bic.w	lr, lr, #252	; 0xfc
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80053b6:	ea41 1107 	orr.w	r1, r1, r7, lsl #4
  tmpsmcr |= sConfig->EncoderMode;
 80053ba:	4328      	orrs	r0, r5
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80053bc:	ea42 020e 	orr.w	r2, r2, lr
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80053c0:	ea41 010c 	orr.w	r1, r1, ip
  htim->Instance->SMCR = tmpsmcr;
 80053c4:	6098      	str	r0, [r3, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 80053c6:	619a      	str	r2, [r3, #24]
  htim->Instance->CCER = tmpccer;
 80053c8:	6219      	str	r1, [r3, #32]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053ca:	f884 6046 	strb.w	r6, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80053ce:	f884 603e 	strb.w	r6, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80053d2:	f884 603f 	strb.w	r6, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80053d6:	f884 6042 	strb.w	r6, [r4, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80053da:	f884 6043 	strb.w	r6, [r4, #67]	; 0x43
  htim->State = HAL_TIM_STATE_READY;
 80053de:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
  return HAL_OK;
 80053e2:	2000      	movs	r0, #0
}
 80053e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 |= Structure->CounterMode;
 80053e6:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053e8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80053ec:	430a      	orrs	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053ee:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80053f0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053f4:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053f6:	69a1      	ldr	r1, [r4, #24]
 80053f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053fc:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 80053fe:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005400:	68e2      	ldr	r2, [r4, #12]
 8005402:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005404:	6862      	ldr	r2, [r4, #4]
 8005406:	629a      	str	r2, [r3, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8005408:	6962      	ldr	r2, [r4, #20]
 800540a:	631a      	str	r2, [r3, #48]	; 0x30
 800540c:	e7b2      	b.n	8005374 <HAL_TIM_Encoder_Init+0xb0>
    htim->Lock = HAL_UNLOCKED;
 800540e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 8005412:	f7fe fa71 	bl	80038f8 <HAL_TIM_Encoder_MspInit>
 8005416:	e762      	b.n	80052de <HAL_TIM_Encoder_Init+0x1a>
    return HAL_ERROR;
 8005418:	2001      	movs	r0, #1
}
 800541a:	4770      	bx	lr
 800541c:	40010000 	.word	0x40010000

08005420 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8005420:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005424:	2b01      	cmp	r3, #1
 8005426:	f000 80d2 	beq.w	80055ce <HAL_TIM_PWM_ConfigChannel+0x1ae>
 800542a:	2301      	movs	r3, #1
{
 800542c:	b570      	push	{r4, r5, r6, lr}
 800542e:	4684      	mov	ip, r0
  __HAL_LOCK(htim);
 8005430:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8005434:	2a0c      	cmp	r2, #12
 8005436:	d808      	bhi.n	800544a <HAL_TIM_PWM_ConfigChannel+0x2a>
 8005438:	e8df f002 	tbb	[pc, r2]
 800543c:	0707073e 	.word	0x0707073e
 8005440:	0707076b 	.word	0x0707076b
 8005444:	0707079b 	.word	0x0707079b
 8005448:	0c          	.byte	0x0c
 8005449:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 800544a:	2300      	movs	r3, #0
 800544c:	f88c 303c 	strb.w	r3, [ip, #60]	; 0x3c
  switch (Channel)
 8005450:	2001      	movs	r0, #1
}
 8005452:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005454:	6803      	ldr	r3, [r0, #0]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005456:	680d      	ldr	r5, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005458:	6a1a      	ldr	r2, [r3, #32]
 800545a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800545e:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8005460:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005462:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8005464:	69d8      	ldr	r0, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005466:	f420 40e6 	bic.w	r0, r0, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800546a:	ea40 2005 	orr.w	r0, r0, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800546e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8005470:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005474:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005478:	4d70      	ldr	r5, [pc, #448]	; (800563c <HAL_TIM_PWM_ConfigChannel+0x21c>)
 800547a:	42ab      	cmp	r3, r5
 800547c:	f000 80c8 	beq.w	8005610 <HAL_TIM_PWM_ConfigChannel+0x1f0>
 8005480:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005484:	42ab      	cmp	r3, r5
 8005486:	f000 80c3 	beq.w	8005610 <HAL_TIM_PWM_ConfigChannel+0x1f0>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800548a:	605c      	str	r4, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800548c:	61d8      	str	r0, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800548e:	6848      	ldr	r0, [r1, #4]
 8005490:	6418      	str	r0, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005492:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005494:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005496:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005498:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800549c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800549e:	69da      	ldr	r2, [r3, #28]
 80054a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80054a6:	69da      	ldr	r2, [r3, #28]
 80054a8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80054ac:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 80054ae:	2300      	movs	r3, #0
 80054b0:	f88c 303c 	strb.w	r3, [ip, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 80054b4:	2000      	movs	r0, #0
}
 80054b6:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80054b8:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 80054ba:	680d      	ldr	r5, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054bc:	6a1a      	ldr	r2, [r3, #32]
 80054be:	f022 0201 	bic.w	r2, r2, #1
 80054c2:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 80054c4:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80054c6:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 80054c8:	6998      	ldr	r0, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80054ca:	f020 0073 	bic.w	r0, r0, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80054ce:	4328      	orrs	r0, r5
  tmpccer |= OC_Config->OCPolarity;
 80054d0:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80054d2:	f022 0202 	bic.w	r2, r2, #2
  tmpccer |= OC_Config->OCPolarity;
 80054d6:	432a      	orrs	r2, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80054d8:	4d58      	ldr	r5, [pc, #352]	; (800563c <HAL_TIM_PWM_ConfigChannel+0x21c>)
 80054da:	42ab      	cmp	r3, r5
 80054dc:	d079      	beq.n	80055d2 <HAL_TIM_PWM_ConfigChannel+0x1b2>
 80054de:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80054e2:	42ab      	cmp	r3, r5
 80054e4:	d075      	beq.n	80055d2 <HAL_TIM_PWM_ConfigChannel+0x1b2>
  TIMx->CR2 = tmpcr2;
 80054e6:	605c      	str	r4, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 80054e8:	6198      	str	r0, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 80054ea:	6848      	ldr	r0, [r1, #4]
 80054ec:	6358      	str	r0, [r3, #52]	; 0x34
  TIMx->CCER = tmpccer;
 80054ee:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80054f0:	699a      	ldr	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80054f2:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80054f4:	f042 0208 	orr.w	r2, r2, #8
 80054f8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80054fa:	699a      	ldr	r2, [r3, #24]
 80054fc:	f022 0204 	bic.w	r2, r2, #4
 8005500:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005502:	699a      	ldr	r2, [r3, #24]
 8005504:	430a      	orrs	r2, r1
 8005506:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8005508:	2300      	movs	r3, #0
 800550a:	f88c 303c 	strb.w	r3, [ip, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 800550e:	2000      	movs	r0, #0
}
 8005510:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005512:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005514:	680d      	ldr	r5, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005516:	6a1a      	ldr	r2, [r3, #32]
 8005518:	f022 0210 	bic.w	r2, r2, #16
 800551c:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 800551e:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005520:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8005522:	6998      	ldr	r0, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005524:	f420 40e6 	bic.w	r0, r0, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005528:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800552c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 800552e:	f022 0220 	bic.w	r2, r2, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005532:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005536:	4d41      	ldr	r5, [pc, #260]	; (800563c <HAL_TIM_PWM_ConfigChannel+0x21c>)
 8005538:	42ab      	cmp	r3, r5
 800553a:	d059      	beq.n	80055f0 <HAL_TIM_PWM_ConfigChannel+0x1d0>
 800553c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005540:	42ab      	cmp	r3, r5
 8005542:	d055      	beq.n	80055f0 <HAL_TIM_PWM_ConfigChannel+0x1d0>
  TIMx->CR2 = tmpcr2;
 8005544:	605c      	str	r4, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005546:	6198      	str	r0, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8005548:	6848      	ldr	r0, [r1, #4]
 800554a:	6398      	str	r0, [r3, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800554c:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800554e:	699a      	ldr	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005550:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005552:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005556:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005558:	699a      	ldr	r2, [r3, #24]
 800555a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800555e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005560:	699a      	ldr	r2, [r3, #24]
 8005562:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005566:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8005568:	2300      	movs	r3, #0
 800556a:	f88c 303c 	strb.w	r3, [ip, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 800556e:	2000      	movs	r0, #0
}
 8005570:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005572:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8005574:	680d      	ldr	r5, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005576:	6a1a      	ldr	r2, [r3, #32]
 8005578:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800557c:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 800557e:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005580:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8005582:	69d8      	ldr	r0, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005584:	f020 0073 	bic.w	r0, r0, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8005588:	4328      	orrs	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800558a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 800558c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005590:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005594:	4d29      	ldr	r5, [pc, #164]	; (800563c <HAL_TIM_PWM_ConfigChannel+0x21c>)
 8005596:	42ab      	cmp	r3, r5
 8005598:	d040      	beq.n	800561c <HAL_TIM_PWM_ConfigChannel+0x1fc>
 800559a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800559e:	42ab      	cmp	r3, r5
 80055a0:	d03c      	beq.n	800561c <HAL_TIM_PWM_ConfigChannel+0x1fc>
  TIMx->CR2 = tmpcr2;
 80055a2:	605c      	str	r4, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 80055a4:	61d8      	str	r0, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80055a6:	6848      	ldr	r0, [r1, #4]
 80055a8:	63d8      	str	r0, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 80055aa:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80055ac:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80055ae:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80055b0:	f042 0208 	orr.w	r2, r2, #8
 80055b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80055b6:	69da      	ldr	r2, [r3, #28]
 80055b8:	f022 0204 	bic.w	r2, r2, #4
 80055bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80055be:	69da      	ldr	r2, [r3, #28]
 80055c0:	430a      	orrs	r2, r1
 80055c2:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 80055c4:	2300      	movs	r3, #0
 80055c6:	f88c 303c 	strb.w	r3, [ip, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 80055ca:	2000      	movs	r0, #0
}
 80055cc:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 80055ce:	2002      	movs	r0, #2
}
 80055d0:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 80055d2:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80055d4:	f022 0208 	bic.w	r2, r2, #8
    tmpccer |= OC_Config->OCNPolarity;
 80055d8:	432a      	orrs	r2, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 80055da:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80055de:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80055e2:	ea46 0e05 	orr.w	lr, r6, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80055e6:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80055ea:	ea4e 0404 	orr.w	r4, lr, r4
 80055ee:	e77a      	b.n	80054e6 <HAL_TIM_PWM_ConfigChannel+0xc6>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80055f0:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80055f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80055f6:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80055fa:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80055fe:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005602:	ea46 0e05 	orr.w	lr, r6, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8005606:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800560a:	ea44 048e 	orr.w	r4, r4, lr, lsl #2
 800560e:	e799      	b.n	8005544 <HAL_TIM_PWM_ConfigChannel+0x124>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005610:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005612:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005616:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 800561a:	e736      	b.n	800548a <HAL_TIM_PWM_ConfigChannel+0x6a>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800561c:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800561e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005622:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005626:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800562a:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800562e:	ea46 0e05 	orr.w	lr, r6, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 8005632:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005636:	ea44 140e 	orr.w	r4, r4, lr, lsl #4
 800563a:	e7b2      	b.n	80055a2 <HAL_TIM_PWM_ConfigChannel+0x182>
 800563c:	40010000 	.word	0x40010000

08005640 <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 8005640:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8005644:	2a01      	cmp	r2, #1
 8005646:	d050      	beq.n	80056ea <HAL_TIM_SlaveConfigSynchro+0xaa>
 8005648:	4603      	mov	r3, r0
{
 800564a:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 800564c:	2202      	movs	r2, #2
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800564e:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  __HAL_LOCK(htim);
 8005654:	2001      	movs	r0, #1
 8005656:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 800565a:	68a2      	ldr	r2, [r4, #8]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800565c:	6848      	ldr	r0, [r1, #4]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800565e:	680d      	ldr	r5, [r1, #0]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005660:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005664:	4302      	orrs	r2, r0
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005666:	f022 0207 	bic.w	r2, r2, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800566a:	432a      	orrs	r2, r5

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800566c:	2850      	cmp	r0, #80	; 0x50
  htim->Instance->SMCR = tmpsmcr;
 800566e:	60a2      	str	r2, [r4, #8]
  switch (sSlaveConfig->InputTrigger)
 8005670:	d060      	beq.n	8005734 <HAL_TIM_SlaveConfigSynchro+0xf4>
 8005672:	d90f      	bls.n	8005694 <HAL_TIM_SlaveConfigSynchro+0x54>
 8005674:	2860      	cmp	r0, #96	; 0x60
 8005676:	d03a      	beq.n	80056ee <HAL_TIM_SlaveConfigSynchro+0xae>
 8005678:	2870      	cmp	r0, #112	; 0x70
 800567a:	d10e      	bne.n	800569a <HAL_TIM_SlaveConfigSynchro+0x5a>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800567c:	e9d1 5202 	ldrd	r5, r2, [r1, #8]
  tmpsmcr = TIMx->SMCR;
 8005680:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005682:	432a      	orrs	r2, r5
 8005684:	690d      	ldr	r5, [r1, #16]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005686:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800568a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 800568e:	430a      	orrs	r2, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005690:	60a2      	str	r2, [r4, #8]
 8005692:	e00f      	b.n	80056b4 <HAL_TIM_SlaveConfigSynchro+0x74>
  switch (sSlaveConfig->InputTrigger)
 8005694:	2840      	cmp	r0, #64	; 0x40
 8005696:	d03d      	beq.n	8005714 <HAL_TIM_SlaveConfigSynchro+0xd4>
 8005698:	d907      	bls.n	80056aa <HAL_TIM_SlaveConfigSynchro+0x6a>
    htim->State = HAL_TIM_STATE_READY;
 800569a:	2001      	movs	r0, #1
    __HAL_UNLOCK(htim);
 800569c:	2200      	movs	r2, #0
    htim->State = HAL_TIM_STATE_READY;
 800569e:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80056a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80056a6:	bc30      	pop	{r4, r5}
 80056a8:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 80056aa:	2820      	cmp	r0, #32
 80056ac:	d002      	beq.n	80056b4 <HAL_TIM_SlaveConfigSynchro+0x74>
 80056ae:	d912      	bls.n	80056d6 <HAL_TIM_SlaveConfigSynchro+0x96>
 80056b0:	2830      	cmp	r0, #48	; 0x30
 80056b2:	d1f2      	bne.n	800569a <HAL_TIM_SlaveConfigSynchro+0x5a>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80056b4:	68e2      	ldr	r2, [r4, #12]
 80056b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056ba:	60e2      	str	r2, [r4, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80056bc:	68e2      	ldr	r2, [r4, #12]
  __HAL_UNLOCK(htim);
 80056be:	2100      	movs	r1, #0
  htim->State = HAL_TIM_STATE_READY;
 80056c0:	2501      	movs	r5, #1
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80056c2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80056c6:	60e2      	str	r2, [r4, #12]
  htim->State = HAL_TIM_STATE_READY;
 80056c8:	f883 503d 	strb.w	r5, [r3, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80056cc:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
  return HAL_OK;
 80056d0:	4608      	mov	r0, r1
}
 80056d2:	bc30      	pop	{r4, r5}
 80056d4:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 80056d6:	f030 0210 	bics.w	r2, r0, #16
 80056da:	d0eb      	beq.n	80056b4 <HAL_TIM_SlaveConfigSynchro+0x74>
    htim->State = HAL_TIM_STATE_READY;
 80056dc:	2001      	movs	r0, #1
    __HAL_UNLOCK(htim);
 80056de:	2200      	movs	r2, #0
    htim->State = HAL_TIM_STATE_READY;
 80056e0:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80056e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80056e8:	e7dd      	b.n	80056a6 <HAL_TIM_SlaveConfigSynchro+0x66>
  __HAL_LOCK(htim);
 80056ea:	2002      	movs	r0, #2
}
 80056ec:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056ee:	6a22      	ldr	r2, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80056f0:	6888      	ldr	r0, [r1, #8]
 80056f2:	690d      	ldr	r5, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056f4:	f022 0210 	bic.w	r2, r2, #16
 80056f8:	6222      	str	r2, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056fa:	69a1      	ldr	r1, [r4, #24]
  tmpccer = TIMx->CCER;
 80056fc:	6a22      	ldr	r2, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056fe:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005702:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005706:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 800570a:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800570e:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 8005710:	6222      	str	r2, [r4, #32]
 8005712:	e7cf      	b.n	80056b4 <HAL_TIM_SlaveConfigSynchro+0x74>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005714:	2d05      	cmp	r5, #5
 8005716:	d0c0      	beq.n	800569a <HAL_TIM_SlaveConfigSynchro+0x5a>
      tmpccer = htim->Instance->CCER;
 8005718:	6a20      	ldr	r0, [r4, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800571a:	6a22      	ldr	r2, [r4, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800571c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800571e:	f022 0201 	bic.w	r2, r2, #1
 8005722:	6222      	str	r2, [r4, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005724:	69a2      	ldr	r2, [r4, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005726:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800572a:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 800572e:	61a2      	str	r2, [r4, #24]
      htim->Instance->CCER = tmpccer;
 8005730:	6220      	str	r0, [r4, #32]
      break;
 8005732:	e7bf      	b.n	80056b4 <HAL_TIM_SlaveConfigSynchro+0x74>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005734:	688a      	ldr	r2, [r1, #8]
 8005736:	6908      	ldr	r0, [r1, #16]
  tmpccer = TIMx->CCER;
 8005738:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800573a:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 800573e:	4311      	orrs	r1, r2
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005740:	6a22      	ldr	r2, [r4, #32]
 8005742:	f022 0201 	bic.w	r2, r2, #1
 8005746:	6222      	str	r2, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005748:	69a2      	ldr	r2, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800574a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800574e:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8005752:	61a2      	str	r2, [r4, #24]
  TIMx->CCER = tmpccer;
 8005754:	6221      	str	r1, [r4, #32]
 8005756:	e7ad      	b.n	80056b4 <HAL_TIM_SlaveConfigSynchro+0x74>

08005758 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005758:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800575c:	2b01      	cmp	r3, #1
 800575e:	d037      	beq.n	80057d0 <HAL_TIMEx_MasterConfigSynchronization+0x78>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005760:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005762:	2202      	movs	r2, #2
{
 8005764:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8005766:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 800576a:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800576c:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 800576e:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8005770:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005774:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005776:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005778:	4a16      	ldr	r2, [pc, #88]	; (80057d4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d01a      	beq.n	80057b4 <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 800577e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005782:	d017      	beq.n	80057b4 <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 8005784:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8005788:	4293      	cmp	r3, r2
 800578a:	d013      	beq.n	80057b4 <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 800578c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005790:	4293      	cmp	r3, r2
 8005792:	d00f      	beq.n	80057b4 <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 8005794:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005798:	4293      	cmp	r3, r2
 800579a:	d00b      	beq.n	80057b4 <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 800579c:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d007      	beq.n	80057b4 <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 80057a4:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d003      	beq.n	80057b4 <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 80057ac:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d104      	bne.n	80057be <HAL_TIMEx_MasterConfigSynchronization+0x66>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057b4:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057b6:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057ba:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057bc:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80057be:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80057c0:	2201      	movs	r2, #1
 80057c2:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80057c6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 80057ca:	bc30      	pop	{r4, r5}
  return HAL_OK;
 80057cc:	4618      	mov	r0, r3
}
 80057ce:	4770      	bx	lr
  __HAL_LOCK(htim);
 80057d0:	2002      	movs	r0, #2
}
 80057d2:	4770      	bx	lr
 80057d4:	40010000 	.word	0x40010000

080057d8 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80057d8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d023      	beq.n	8005828 <HAL_TIMEx_ConfigBreakDeadTime+0x50>
{
 80057e0:	b410      	push	{r4}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80057e2:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 80057e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057ea:	4602      	mov	r2, r0
 80057ec:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80057ee:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80057f0:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80057f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80057f6:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80057f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80057fc:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80057fe:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005800:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005804:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005806:	6948      	ldr	r0, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005808:	69cc      	ldr	r4, [r1, #28]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800580a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800580e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005810:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005814:	6810      	ldr	r0, [r2, #0]

  __HAL_UNLOCK(htim);
 8005816:	2100      	movs	r1, #0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005818:	4323      	orrs	r3, r4
  htim->Instance->BDTR = tmpbdtr;
 800581a:	6443      	str	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(htim);
 800581c:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c

  return HAL_OK;
 8005820:	4608      	mov	r0, r1
}
 8005822:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005826:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005828:	2002      	movs	r0, #2
}
 800582a:	4770      	bx	lr

0800582c <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 800582c:	2800      	cmp	r0, #0
 800582e:	f000 808f 	beq.w	8005950 <HAL_UART_Init+0x124>
{
 8005832:	b538      	push	{r3, r4, r5, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005834:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005838:	4604      	mov	r4, r0
 800583a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800583e:	2b00      	cmp	r3, #0
 8005840:	f000 8081 	beq.w	8005946 <HAL_UART_Init+0x11a>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005844:	6823      	ldr	r3, [r4, #0]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005846:	68e0      	ldr	r0, [r4, #12]
  huart->gState = HAL_UART_STATE_BUSY;
 8005848:	2224      	movs	r2, #36	; 0x24
 800584a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 800584e:	68da      	ldr	r2, [r3, #12]
 8005850:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005854:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005856:	6919      	ldr	r1, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005858:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800585a:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 800585e:	4301      	orrs	r1, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005860:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005862:	6119      	str	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005864:	4302      	orrs	r2, r0
 8005866:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8005868:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800586a:	4302      	orrs	r2, r0
 800586c:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 800586e:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 8005872:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005876:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8005878:	430a      	orrs	r2, r1
 800587a:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800587c:	695a      	ldr	r2, [r3, #20]
 800587e:	69a0      	ldr	r0, [r4, #24]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005880:	4934      	ldr	r1, [pc, #208]	; (8005954 <HAL_UART_Init+0x128>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005882:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005886:	4302      	orrs	r2, r0
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005888:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800588a:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800588c:	d035      	beq.n	80058fa <HAL_UART_Init+0xce>
 800588e:	4a32      	ldr	r2, [pc, #200]	; (8005958 <HAL_UART_Init+0x12c>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d032      	beq.n	80058fa <HAL_UART_Init+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005894:	f7ff f91a 	bl	8004acc <HAL_RCC_GetPCLK1Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005898:	69e3      	ldr	r3, [r4, #28]
 800589a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800589e:	d032      	beq.n	8005906 <HAL_UART_Init+0xda>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80058a0:	6863      	ldr	r3, [r4, #4]
 80058a2:	2119      	movs	r1, #25
 80058a4:	009a      	lsls	r2, r3, #2
 80058a6:	fba0 0101 	umull	r0, r1, r0, r1
 80058aa:	0f9b      	lsrs	r3, r3, #30
 80058ac:	f7fa fcac 	bl	8000208 <__aeabi_uldivmod>
 80058b0:	492a      	ldr	r1, [pc, #168]	; (800595c <HAL_UART_Init+0x130>)
 80058b2:	fba1 3200 	umull	r3, r2, r1, r0
 80058b6:	0952      	lsrs	r2, r2, #5
 80058b8:	2564      	movs	r5, #100	; 0x64
 80058ba:	fb05 0012 	mls	r0, r5, r2, r0
 80058be:	0100      	lsls	r0, r0, #4
 80058c0:	3032      	adds	r0, #50	; 0x32
 80058c2:	6823      	ldr	r3, [r4, #0]
 80058c4:	fba1 1000 	umull	r1, r0, r1, r0
 80058c8:	0112      	lsls	r2, r2, #4
 80058ca:	eb02 1250 	add.w	r2, r2, r0, lsr #5
 80058ce:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058d0:	691a      	ldr	r2, [r3, #16]
 80058d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80058d6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058d8:	695a      	ldr	r2, [r3, #20]
 80058da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80058de:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80058e0:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058e2:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 80058e4:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 80058e6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058ea:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058ec:	6425      	str	r5, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80058ee:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80058f2:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  return HAL_OK;
 80058f6:	4628      	mov	r0, r5
}
 80058f8:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 80058fa:	f7ff f8f7 	bl	8004aec <HAL_RCC_GetPCLK2Freq>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058fe:	69e3      	ldr	r3, [r4, #28]
 8005900:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005904:	d1cc      	bne.n	80058a0 <HAL_UART_Init+0x74>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005906:	6862      	ldr	r2, [r4, #4]
 8005908:	2119      	movs	r1, #25
 800590a:	1892      	adds	r2, r2, r2
 800590c:	f04f 0300 	mov.w	r3, #0
 8005910:	415b      	adcs	r3, r3
 8005912:	fba0 0101 	umull	r0, r1, r0, r1
 8005916:	f7fa fc77 	bl	8000208 <__aeabi_uldivmod>
 800591a:	4b10      	ldr	r3, [pc, #64]	; (800595c <HAL_UART_Init+0x130>)
 800591c:	fba3 2500 	umull	r2, r5, r3, r0
 8005920:	096d      	lsrs	r5, r5, #5
 8005922:	2264      	movs	r2, #100	; 0x64
 8005924:	fb02 0215 	mls	r2, r2, r5, r0
 8005928:	00d2      	lsls	r2, r2, #3
 800592a:	3232      	adds	r2, #50	; 0x32
 800592c:	fba3 3202 	umull	r3, r2, r3, r2
 8005930:	f3c2 1142 	ubfx	r1, r2, #5, #3
 8005934:	0912      	lsrs	r2, r2, #4
 8005936:	6823      	ldr	r3, [r4, #0]
 8005938:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 800593c:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8005940:	440a      	add	r2, r1
 8005942:	609a      	str	r2, [r3, #8]
 8005944:	e7c4      	b.n	80058d0 <HAL_UART_Init+0xa4>
    huart->Lock = HAL_UNLOCKED;
 8005946:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 800594a:	f7fe f855 	bl	80039f8 <HAL_UART_MspInit>
 800594e:	e779      	b.n	8005844 <HAL_UART_Init+0x18>
    return HAL_ERROR;
 8005950:	2001      	movs	r0, #1
}
 8005952:	4770      	bx	lr
 8005954:	40011000 	.word	0x40011000
 8005958:	40011400 	.word	0x40011400
 800595c:	51eb851f 	.word	0x51eb851f

08005960 <VBS_GetAvBusVoltage_V>:
    temp = 0U;
  }
  else
  {
#endif
    temp = (uint32_t)(pHandle->AvBusVoltage_d);
 8005960:	88c3      	ldrh	r3, [r0, #6]
    temp *= pHandle->ConversionFactor;
 8005962:	8840      	ldrh	r0, [r0, #2]
 8005964:	fb03 f000 	mul.w	r0, r3, r0
    temp /= 65536U;
#ifdef NULL_PTR_CHECK_BUS_VOLT
  }
#endif
  return ((uint16_t)temp);
}
 8005968:	0c00      	lsrs	r0, r0, #16
 800596a:	4770      	bx	lr

0800596c <Circle_Limitation>:
  *  @f$v_q = \sqrt(MaxModule^2-v_d^2\ ) @f$

  *
  */
__weak qd_t Circle_Limitation(const CircleLimitation_Handle_t *pHandle, qd_t Vqd)
{
 800596c:	b570      	push	{r4, r5, r6, lr}
    int32_t square_limit;
    int32_t vd_square_limit;
    int32_t new_q;
    int32_t new_d;

    maxModule = (int32_t)pHandle->MaxModule;
 800596e:	8803      	ldrh	r3, [r0, #0]
 8005970:	140d      	asrs	r5, r1, #16
{
 8005972:	b084      	sub	sp, #16
 8005974:	b20c      	sxth	r4, r1

    square_q = ((int32_t)(Vqd.q)) * Vqd.q;
    square_d = ((int32_t)(Vqd.d)) * Vqd.d;
 8005976:	fb05 f205 	mul.w	r2, r5, r5
    square_limit = maxModule * maxModule;
 800597a:	fb03 f303 	mul.w	r3, r3, r3
{
 800597e:	9101      	str	r1, [sp, #4]
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
    square_sum = square_q + square_d;
 8005980:	fb04 2104 	mla	r1, r4, r4, r2

    if (square_sum > square_limit)
 8005984:	428b      	cmp	r3, r1
 8005986:	da10      	bge.n	80059aa <Circle_Limitation+0x3e>
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
 8005988:	8846      	ldrh	r6, [r0, #2]
 800598a:	fb06 f006 	mul.w	r0, r6, r6
    {
      if (square_d <= vd_square_limit)
 800598e:	4282      	cmp	r2, r0
 8005990:	dd14      	ble.n	80059bc <Circle_Limitation+0x50>
        new_d = Vqd.d;
      }
      else
      {
        new_d = (int32_t)pHandle->MaxVd;
        if (Vqd.d < 0)
 8005992:	2d00      	cmp	r5, #0
#if defined CIRCLE_LIMITATION_SQRT_M0
        square_temp = (square_limit - vd_square_limit) / 1048576;
        new_q = SqrtTable[square_temp];
#else
        square_temp = square_limit - vd_square_limit;
        new_q = MCM_Sqrt(square_temp);
 8005994:	eba3 0000 	sub.w	r0, r3, r0
          new_d = -new_d;
 8005998:	bfb8      	it	lt
 800599a:	4276      	neglt	r6, r6
        new_q = MCM_Sqrt(square_temp);
 800599c:	f7fb fe3e 	bl	800161c <MCM_Sqrt>
#endif
        if (Vqd.q < 0)
 80059a0:	2c00      	cmp	r4, #0
        {
          new_q = - new_q;
 80059a2:	bfb8      	it	lt
 80059a4:	4240      	neglt	r0, r0
        {
          /* Nothing to do */
        }
      }
      local_vqd.q = (int16_t)new_q;
      local_vqd.d = (int16_t)new_d;
 80059a6:	b235      	sxth	r5, r6
      local_vqd.q = (int16_t)new_q;
 80059a8:	b204      	sxth	r4, r0
    }
#ifdef NULL_PTR_CHECK_CRC_LIM
  }
#endif
  return (local_vqd);
 80059aa:	b2a4      	uxth	r4, r4
 80059ac:	2000      	movs	r0, #0
 80059ae:	f364 000f 	bfi	r0, r4, #0, #16
 80059b2:	b2ad      	uxth	r5, r5
 80059b4:	f365 401f 	bfi	r0, r5, #16, #16
}
 80059b8:	b004      	add	sp, #16
 80059ba:	bd70      	pop	{r4, r5, r6, pc}
        new_q = MCM_Sqrt(square_temp);
 80059bc:	1a98      	subs	r0, r3, r2
 80059be:	f7fb fe2d 	bl	800161c <MCM_Sqrt>
        if (Vqd.q < 0)
 80059c2:	2c00      	cmp	r4, #0
 80059c4:	daf0      	bge.n	80059a8 <Circle_Limitation+0x3c>
          new_q = -new_q;
 80059c6:	4240      	negs	r0, r0
 80059c8:	e7ee      	b.n	80059a8 <Circle_Limitation+0x3c>
 80059ca:	bf00      	nop

080059cc <EAC_Init>:
  {
#endif
    pHandle->pSTC = pSTC;
    pHandle->pVSS = pVSS;
    pHandle->pENC = pENC;
    pHandle->EncAligned = false;
 80059cc:	f04f 0c00 	mov.w	ip, #0
    pHandle->pVSS = pVSS;
 80059d0:	e9c0 1200 	strd	r1, r2, [r0]
    pHandle->pENC = pENC;
 80059d4:	6083      	str	r3, [r0, #8]
    pHandle->EncAligned = false;
 80059d6:	f8a0 c00e 	strh.w	ip, [r0, #14]
    pHandle->EncRestart = false;
#ifdef NULL_PTR_CHECK_ENC_ALI_CTRL
  }
#endif
}
 80059da:	4770      	bx	lr

080059dc <EAC_StartAlignment>:
  * It configures the VSS (Virtual Speed Sensor) with the required angle and sets the
  * STC (Speed and Torque Controller) to execute the required torque ramp.
  * @param  pHandle: handler of the current instance of the EncAlignCtrl component.
  */
__weak void EAC_StartAlignment(EncAlign_Handle_t *pHandle)
{
 80059dc:	b510      	push	{r4, lr}
  {
#endif
    uint32_t wAux;

    /* Set pVSS mechanical speed to zero */
    VSS_SetMecAcceleration(pHandle->pVSS, 0, 0U);
 80059de:	2200      	movs	r2, #0
{
 80059e0:	4604      	mov	r4, r0
    VSS_SetMecAcceleration(pHandle->pVSS, 0, 0U);
 80059e2:	4611      	mov	r1, r2
 80059e4:	6840      	ldr	r0, [r0, #4]
 80059e6:	f001 fafd 	bl	8006fe4 <VSS_SetMecAcceleration>

    /* Set pVSS mechanical angle */
    VSS_SetMecAngle(pHandle->pVSS, pHandle->hElAngle);
 80059ea:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 80059ee:	6860      	ldr	r0, [r4, #4]
 80059f0:	f001 faf0 	bl	8006fd4 <VSS_SetMecAngle>

    /* Set pSTC in MCM_TORQUE_MODE */
    STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 80059f4:	6820      	ldr	r0, [r4, #0]
 80059f6:	2104      	movs	r1, #4
 80059f8:	f001 fa4a 	bl	8006e90 <STC_SetControlMode>

    /* Set starting torque to Zero */
    (void)STC_ExecRamp(pHandle->pSTC, 0, 0U);
 80059fc:	2200      	movs	r2, #0
 80059fe:	4611      	mov	r1, r2
 8005a00:	6820      	ldr	r0, [r4, #0]
 8005a02:	f001 fa49 	bl	8006e98 <STC_ExecRamp>

    /* Execute the torque ramp */
    (void)STC_ExecRamp(pHandle->pSTC, pHandle->hFinalTorque, (uint32_t)pHandle->hDurationms);
 8005a06:	8ae2      	ldrh	r2, [r4, #22]
 8005a08:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 8005a0c:	6820      	ldr	r0, [r4, #0]
 8005a0e:	f001 fa43 	bl	8006e98 <STC_ExecRamp>
    /* Compute hRemainingTicks, the number of thick of alignment phase */
    wAux = ((uint32_t)pHandle->hDurationms) * ((uint32_t)pHandle->hEACFrequencyHz);
 8005a12:	8ae3      	ldrh	r3, [r4, #22]
 8005a14:	8a21      	ldrh	r1, [r4, #16]
    wAux /= 1000U;
 8005a16:	4a04      	ldr	r2, [pc, #16]	; (8005a28 <EAC_StartAlignment+0x4c>)
    wAux = ((uint32_t)pHandle->hDurationms) * ((uint32_t)pHandle->hEACFrequencyHz);
 8005a18:	fb01 f303 	mul.w	r3, r1, r3
    wAux /= 1000U;
 8005a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a20:	099b      	lsrs	r3, r3, #6
    pHandle->hRemainingTicks = (uint16_t)wAux;
    pHandle->hRemainingTicks++;
 8005a22:	3301      	adds	r3, #1
 8005a24:	81a3      	strh	r3, [r4, #12]
#ifdef NULL_PTR_CHECK_ENC_ALI_CTRL
  }
#endif
}
 8005a26:	bd10      	pop	{r4, pc}
 8005a28:	10624dd3 	.word	0x10624dd3

08005a2c <EAC_Exec>:
    retVal = false;
  }
  else
  {
#endif
    if (pHandle->hRemainingTicks > 0U)
 8005a2c:	8983      	ldrh	r3, [r0, #12]
 8005a2e:	b13b      	cbz	r3, 8005a40 <EAC_Exec+0x14>
    {
      pHandle->hRemainingTicks--;
 8005a30:	3b01      	subs	r3, #1
 8005a32:	b29b      	uxth	r3, r3
{
 8005a34:	b510      	push	{r4, lr}
 8005a36:	4604      	mov	r4, r0
      pHandle->hRemainingTicks--;
 8005a38:	8183      	strh	r3, [r0, #12]

      if (0U == pHandle->hRemainingTicks)
 8005a3a:	b11b      	cbz	r3, 8005a44 <EAC_Exec+0x18>
        pHandle->EncAligned = true;
        retVal = true;
      }
      else
      {
        retVal = false;
 8005a3c:	2000      	movs	r0, #0
#ifdef NULL_PTR_CHECK_ENC_ALI_CTRL
  }
#endif

  return (retVal);
}
 8005a3e:	bd10      	pop	{r4, pc}
  bool retVal = true;
 8005a40:	2001      	movs	r0, #1
}
 8005a42:	4770      	bx	lr
        ENC_SetMecAngle(pHandle->pENC, pHandle->hElAngle / ((int16_t)pHandle->bElToMecRatio));
 8005a44:	7e03      	ldrb	r3, [r0, #24]
 8005a46:	f9b0 1014 	ldrsh.w	r1, [r0, #20]
 8005a4a:	6880      	ldr	r0, [r0, #8]
 8005a4c:	fb91 f1f3 	sdiv	r1, r1, r3
 8005a50:	f000 f932 	bl	8005cb8 <ENC_SetMecAngle>
        pHandle->EncAligned = true;
 8005a54:	2001      	movs	r0, #1
 8005a56:	73a0      	strb	r0, [r4, #14]
}
 8005a58:	bd10      	pop	{r4, pc}
 8005a5a:	bf00      	nop

08005a5c <EAC_IsAligned>:
#ifdef NULL_PTR_CHECK_ENC_ALI_CTRL
  return ((NULL == pHandle) ? false : pHandle->EncAligned);
#else
  return (pHandle->EncAligned);
#endif
}
 8005a5c:	7b80      	ldrb	r0, [r0, #14]
 8005a5e:	4770      	bx	lr

08005a60 <EAC_SetRestartState>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->EncRestart = restart;
 8005a60:	73c1      	strb	r1, [r0, #15]
#ifdef NULL_PTR_CHECK_ENC_ALI_CTRL
  }
#endif
}
 8005a62:	4770      	bx	lr

08005a64 <ENC_Init>:
    /* Reset counter */
    LL_TIM_SetCounter(TIMx, 0);

    /*Calculations of convenience*/
    pHandle->U32MAXdivPulseNumber = UINT32_MAX / ((uint32_t) pHandle->PulseNumber);
    pHandle->SpeedSamplingFreqUnit = ((uint32_t)pHandle->SpeedSamplingFreqHz * (uint32_t)SPEED_UNIT);
 8005a64:	f8b0 206c 	ldrh.w	r2, [r0, #108]	; 0x6c
    TIM_TypeDef *TIMx = pHandle->TIMx;
 8005a68:	6a03      	ldr	r3, [r0, #32]
    pHandle->SpeedSamplingFreqUnit = ((uint32_t)pHandle->SpeedSamplingFreqHz * (uint32_t)SPEED_UNIT);
 8005a6a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005a6e:	0052      	lsls	r2, r2, #1
  WRITE_REG(TIMx->CNT, Counter);
 8005a70:	2100      	movs	r1, #0
{
 8005a72:	b410      	push	{r4}
 8005a74:	6259      	str	r1, [r3, #36]	; 0x24
    pHandle->U32MAXdivPulseNumber = UINT32_MAX / ((uint32_t) pHandle->PulseNumber);
 8005a76:	f8b0 406e 	ldrh.w	r4, [r0, #110]	; 0x6e
    pHandle->SpeedSamplingFreqUnit = ((uint32_t)pHandle->SpeedSamplingFreqHz * (uint32_t)SPEED_UNIT);
 8005a7a:	6242      	str	r2, [r0, #36]	; 0x24
    pHandle->U32MAXdivPulseNumber = UINT32_MAX / ((uint32_t) pHandle->PulseNumber);
 8005a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8005a80:	fbb2 f2f4 	udiv	r2, r2, r4
 8005a84:	6682      	str	r2, [r0, #104]	; 0x68
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8005a86:	699c      	ldr	r4, [r3, #24]
 8005a88:	f8b0 207a 	ldrh.w	r2, [r0, #122]	; 0x7a
 8005a8c:	f024 0cf0 	bic.w	ip, r4, #240	; 0xf0
 8005a90:	ea42 020c 	orr.w	r2, r2, ip
 8005a94:	619a      	str	r2, [r3, #24]
 8005a96:	699a      	ldr	r2, [r3, #24]
 8005a98:	f8b0 407a 	ldrh.w	r4, [r0, #122]	; 0x7a
 8005a9c:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 8005aa0:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005aa4:	f06f 0401 	mvn.w	r4, #1
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8005aa8:	619a      	str	r2, [r3, #24]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005aaa:	611c      	str	r4, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8005aac:	68da      	ldr	r2, [r3, #12]
 8005aae:	f042 0201 	orr.w	r2, r2, #1
 8005ab2:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	f042 0201 	orr.w	r2, r2, #1
 8005aba:	601a      	str	r2, [r3, #0]

    /* Enable the counting timer */
    LL_TIM_EnableCounter(TIMx);

    /* Erase speed buffer */
    bufferSize = pHandle->SpeedBufferSize;
 8005abc:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74

    for (index = 0U; index < bufferSize; index++)
 8005ac0:	b12a      	cbz	r2, 8005ace <ENC_Init+0x6a>
      pHandle->DeltaCapturesBuffer[index] = 0;
    }
#ifdef NULL_PTR_CHECK_ENC_SPD_POS_FDB
  }
#endif
}
 8005ac2:	f85d 4b04 	ldr.w	r4, [sp], #4
      pHandle->DeltaCapturesBuffer[index] = 0;
 8005ac6:	0092      	lsls	r2, r2, #2
 8005ac8:	3028      	adds	r0, #40	; 0x28
 8005aca:	f001 bad3 	b.w	8007074 <memset>
}
 8005ace:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ad2:	4770      	bx	lr

08005ad4 <ENC_Clear>:
  *         This function must be called before starting the motor to initialize
  *         the speed measurement process.
  * @param  pHandle: handler of the current instance of the encoder component
  */
__weak void ENC_Clear(ENCODER_Handle_t *pHandle)
{
 8005ad4:	b510      	push	{r4, lr}
  else
  {
#endif
    uint8_t index;

    for (index = 0u; index < pHandle->SpeedBufferSize; index++)
 8005ad6:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
{
 8005ada:	4604      	mov	r4, r0
    for (index = 0u; index < pHandle->SpeedBufferSize; index++)
 8005adc:	b122      	cbz	r2, 8005ae8 <ENC_Clear+0x14>
    {
      pHandle->DeltaCapturesBuffer[index] = 0;
 8005ade:	0092      	lsls	r2, r2, #2
 8005ae0:	2100      	movs	r1, #0
 8005ae2:	3028      	adds	r0, #40	; 0x28
 8005ae4:	f001 fac6 	bl	8007074 <memset>
    }
    pHandle->SensorIsReliable = true;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
#ifdef NULL_PTR_CHECK_ENC_SPD_POS_FDB
  }
#endif
}
 8005aee:	bd10      	pop	{r4, pc}

08005af0 <ENC_CalcAngle>:
  *         of the instantaneous value of the timer counter.
  * @param  pHandle: handler of the current instance of the encoder component
  * @retval Measured electrical angle in [s16degree](measurement_units.md) format.
  */
__weak int16_t ENC_CalcAngle(ENCODER_Handle_t *pHandle)
{
 8005af0:	b410      	push	{r4}
    int16_t mecAngle; /* s16degree format */
    uint32_t uwtemp1;
    int32_t wtemp1;
    /* PR 52926 We need to keep only the 16 LSB, bit 31 could be at 1
     if the overflow occurs just after the entry in the High frequency task */
    uwtemp1 = (LL_TIM_GetCounter(pHandle->TIMx) & 0xffffU) * (pHandle->U32MAXdivPulseNumber);
 8005af2:	6a03      	ldr	r3, [r0, #32]
 8005af4:	6e84      	ldr	r4, [r0, #104]	; 0x68
  return (uint32_t)(READ_REG(TIMx->CNT));
 8005af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    wtemp1 = (int32_t)uwtemp1 / 65536;
#endif
    /* Computes and stores the rotor mechanical angle */
    mecAngle = (int16_t)wtemp1;

    int16_t hMecAnglePrev = pHandle->_Super.hMecAngle;
 8005af8:	f9b0 1006 	ldrsh.w	r1, [r0, #6]

    pHandle->_Super.hMecAngle = mecAngle;

    /* Computes and stores the rotor electrical angle */
    elAngle = mecAngle * (int16_t)(pHandle->_Super.bElToMecRatio);
 8005afc:	7842      	ldrb	r2, [r0, #1]
    uwtemp1 = (LL_TIM_GetCounter(pHandle->TIMx) & 0xffffU) * (pHandle->U32MAXdivPulseNumber);
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	fb04 f303 	mul.w	r3, r4, r3
    wtemp1 = (int32_t)uwtemp1 >> 16U;  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8005b04:	141b      	asrs	r3, r3, #16
    elAngle = mecAngle * (int16_t)(pHandle->_Super.bElToMecRatio);
 8005b06:	fb03 f202 	mul.w	r2, r3, r2

    pHandle->_Super.hElAngle = elAngle;

    int16_t hMecSpeedDpp = mecAngle - hMecAnglePrev;
 8005b0a:	1a59      	subs	r1, r3, r1
    mecAngle = (int16_t)wtemp1;
 8005b0c:	80c3      	strh	r3, [r0, #6]
    pHandle->_Super.wMecAngle += ((int32_t)hMecSpeedDpp);
 8005b0e:	6883      	ldr	r3, [r0, #8]
#ifdef NULL_PTR_CHECK_ENC_SPD_POS_FDB
  }
#endif
  /*Returns rotor electrical angle*/
  return (elAngle);
}
 8005b10:	f85d 4b04 	ldr.w	r4, [sp], #4
    elAngle = mecAngle * (int16_t)(pHandle->_Super.bElToMecRatio);
 8005b14:	b212      	sxth	r2, r2
    pHandle->_Super.wMecAngle += ((int32_t)hMecSpeedDpp);
 8005b16:	fa03 f381 	sxtah	r3, r3, r1
    pHandle->_Super.hElAngle = elAngle;
 8005b1a:	8082      	strh	r2, [r0, #4]
    pHandle->_Super.wMecAngle += ((int32_t)hMecSpeedDpp);
 8005b1c:	6083      	str	r3, [r0, #8]
}
 8005b1e:	4610      	mov	r0, r2
 8005b20:	4770      	bx	lr
 8005b22:	bf00      	nop

08005b24 <ENC_CalcAvrgMecSpeedUnit>:
    int32_t wtemp2;
    uint32_t OverflowCntSample;
    uint32_t CntCapture;
    uint32_t directionSample;
    int32_t wOverallAngleVariation = 0;
    TIM_TypeDef *TIMx = pHandle->TIMx;
 8005b24:	6a03      	ldr	r3, [r0, #32]
#ifndef TIM_CNT_UIFCPY
      OverflowCntSample = (CntCapture > pHandle->PreviousCapture) ? 1 : 0;
#endif
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
        ((int32_t)CntCapture) - ((int32_t)pHandle->PreviousCapture)
        - ((((int32_t)OverflowCntSample) + (int32_t)OFbit) * ((int32_t)pHandle->PulseNumber));
 8005b26:	f8b0 c06e 	ldrh.w	ip, [r0, #110]	; 0x6e
{
 8005b2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b2c:	6a5d      	ldr	r5, [r3, #36]	; 0x24
    OverflowCntSample = pHandle->TimerOverflowNb;
 8005b2e:	f8b0 4070 	ldrh.w	r4, [r0, #112]	; 0x70
    uint8_t bBufferSize = pHandle->SpeedBufferSize;
 8005b32:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
      OverflowCntSample = (CntCapture > pHandle->PreviousCapture) ? 1 : 0;
 8005b36:	f8b0 7072 	ldrh.w	r7, [r0, #114]	; 0x72
    pHandle->TimerOverflowNb = 0;
 8005b3a:	2600      	movs	r6, #0
 8005b3c:	f8a0 6070 	strh.w	r6, [r0, #112]	; 0x70
    OverflowCntSample = pHandle->TimerOverflowNb;
 8005b40:	b2a4      	uxth	r4, r4
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 8005b42:	681b      	ldr	r3, [r3, #0]
    if ((OverflowCntSample + OFbit) > ENC_MAX_OVERFLOW_NB)
 8005b44:	2c01      	cmp	r4, #1
      pHandle->TimerOverflowError = true;
 8005b46:	bf88      	it	hi
 8005b48:	2401      	movhi	r4, #1
 8005b4a:	f003 0310 	and.w	r3, r3, #16
    {
      /* Nothing to do */
    }

    /* Checks the reliability status, then stores and returns it */
    if (pHandle->TimerOverflowError)
 8005b4e:	bf94      	ite	ls
 8005b50:	f890 407d 	ldrbls.w	r4, [r0, #125]	; 0x7d
      pHandle->TimerOverflowError = true;
 8005b54:	f880 407d 	strbhi.w	r4, [r0, #125]	; 0x7d
    if (LL_TIM_COUNTERDIRECTION_DOWN == directionSample)
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	f000 8096 	beq.w	8005c8a <ENC_CalcAvrgMecSpeedUnit+0x166>
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8005b5e:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
        ((int32_t)CntCapture) - ((int32_t)pHandle->PreviousCapture)
 8005b62:	1bee      	subs	r6, r5, r7
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8005b64:	330a      	adds	r3, #10
        - ((((int32_t)OverflowCntSample) + (int32_t)OFbit) * ((int32_t)pHandle->PulseNumber));
 8005b66:	42af      	cmp	r7, r5
 8005b68:	bf34      	ite	cc
 8005b6a:	46e6      	movcc	lr, ip
 8005b6c:	f04f 0e00 	movcs.w	lr, #0
 8005b70:	eba6 060e 	sub.w	r6, r6, lr
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8005b74:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8005b78:	2a00      	cmp	r2, #0
 8005b7a:	f000 8095 	beq.w	8005ca8 <ENC_CalcAvrgMecSpeedUnit+0x184>
 8005b7e:	2a01      	cmp	r2, #1
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8005b80:	6a83      	ldr	r3, [r0, #40]	; 0x28
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8005b82:	d039      	beq.n	8005bf8 <ENC_CalcAvrgMecSpeedUnit+0xd4>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8005b84:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8005b86:	2a02      	cmp	r2, #2
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8005b88:	4433      	add	r3, r6
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8005b8a:	d035      	beq.n	8005bf8 <ENC_CalcAvrgMecSpeedUnit+0xd4>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8005b8c:	6b06      	ldr	r6, [r0, #48]	; 0x30
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8005b8e:	2a03      	cmp	r2, #3
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8005b90:	4433      	add	r3, r6
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8005b92:	d031      	beq.n	8005bf8 <ENC_CalcAvrgMecSpeedUnit+0xd4>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8005b94:	6b46      	ldr	r6, [r0, #52]	; 0x34
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8005b96:	2a04      	cmp	r2, #4
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8005b98:	4433      	add	r3, r6
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8005b9a:	d02d      	beq.n	8005bf8 <ENC_CalcAvrgMecSpeedUnit+0xd4>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8005b9c:	6b86      	ldr	r6, [r0, #56]	; 0x38
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8005b9e:	2a05      	cmp	r2, #5
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8005ba0:	4433      	add	r3, r6
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8005ba2:	d029      	beq.n	8005bf8 <ENC_CalcAvrgMecSpeedUnit+0xd4>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8005ba4:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8005ba6:	2a06      	cmp	r2, #6
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8005ba8:	4433      	add	r3, r6
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8005baa:	d025      	beq.n	8005bf8 <ENC_CalcAvrgMecSpeedUnit+0xd4>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8005bac:	6c06      	ldr	r6, [r0, #64]	; 0x40
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8005bae:	2a07      	cmp	r2, #7
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8005bb0:	4433      	add	r3, r6
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8005bb2:	d021      	beq.n	8005bf8 <ENC_CalcAvrgMecSpeedUnit+0xd4>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8005bb4:	6c46      	ldr	r6, [r0, #68]	; 0x44
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8005bb6:	2a08      	cmp	r2, #8
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8005bb8:	4433      	add	r3, r6
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8005bba:	d01d      	beq.n	8005bf8 <ENC_CalcAvrgMecSpeedUnit+0xd4>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8005bbc:	6c86      	ldr	r6, [r0, #72]	; 0x48
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8005bbe:	2a09      	cmp	r2, #9
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8005bc0:	4433      	add	r3, r6
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8005bc2:	d019      	beq.n	8005bf8 <ENC_CalcAvrgMecSpeedUnit+0xd4>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8005bc4:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8005bc6:	2a0a      	cmp	r2, #10
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8005bc8:	4433      	add	r3, r6
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8005bca:	d015      	beq.n	8005bf8 <ENC_CalcAvrgMecSpeedUnit+0xd4>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8005bcc:	6d06      	ldr	r6, [r0, #80]	; 0x50
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8005bce:	2a0b      	cmp	r2, #11
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8005bd0:	4433      	add	r3, r6
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8005bd2:	d011      	beq.n	8005bf8 <ENC_CalcAvrgMecSpeedUnit+0xd4>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8005bd4:	6d46      	ldr	r6, [r0, #84]	; 0x54
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8005bd6:	2a0c      	cmp	r2, #12
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8005bd8:	4433      	add	r3, r6
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8005bda:	d00d      	beq.n	8005bf8 <ENC_CalcAvrgMecSpeedUnit+0xd4>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8005bdc:	6d86      	ldr	r6, [r0, #88]	; 0x58
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8005bde:	2a0d      	cmp	r2, #13
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8005be0:	4433      	add	r3, r6
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8005be2:	d009      	beq.n	8005bf8 <ENC_CalcAvrgMecSpeedUnit+0xd4>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8005be4:	6dc6      	ldr	r6, [r0, #92]	; 0x5c
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8005be6:	2a0e      	cmp	r2, #14
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8005be8:	4433      	add	r3, r6
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8005bea:	d005      	beq.n	8005bf8 <ENC_CalcAvrgMecSpeedUnit+0xd4>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8005bec:	6e06      	ldr	r6, [r0, #96]	; 0x60
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8005bee:	2a0f      	cmp	r2, #15
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8005bf0:	4433      	add	r3, r6
 8005bf2:	bf1c      	itt	ne
 8005bf4:	6e46      	ldrne	r6, [r0, #100]	; 0x64
 8005bf6:	199b      	addne	r3, r3, r6
    wtemp1 = wOverallAngleVariation * ((int32_t)pHandle->SpeedSamplingFreqUnit);
 8005bf8:	6a47      	ldr	r7, [r0, #36]	; 0x24
    wtemp2 = ((int32_t)pHandle->PulseNumber) * ((int32_t)pHandle->SpeedBufferSize);
 8005bfa:	fb0c f602 	mul.w	r6, ip, r2
    wtemp1 = wOverallAngleVariation * ((int32_t)pHandle->SpeedSamplingFreqUnit);
 8005bfe:	fb07 f303 	mul.w	r3, r7, r3
    wtemp1 = ((0 == wtemp2) ? wtemp1 : (wtemp1 / wtemp2));
 8005c02:	b10e      	cbz	r6, 8005c08 <ENC_CalcAvrgMecSpeedUnit+0xe4>
 8005c04:	fb93 f3f6 	sdiv	r3, r3, r6
    *pMecSpeedUnit = (int16_t)wtemp1;
 8005c08:	fa0f fe83 	sxth.w	lr, r3
    pHandle->_Super.hMecAccelUnitP = (int16_t)(wtemp1 - pHandle->_Super.hAvrMecSpeedUnit);
 8005c0c:	b29b      	uxth	r3, r3
    *pMecSpeedUnit = (int16_t)wtemp1;
 8005c0e:	f8a1 e000 	strh.w	lr, [r1]
    wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] * ((int32_t)pHandle->SpeedSamplingFreqHz)
 8005c12:	f890 607c 	ldrb.w	r6, [r0, #124]	; 0x7c
    pHandle->_Super.hMecAccelUnitP = (int16_t)(wtemp1 - pHandle->_Super.hAvrMecSpeedUnit);
 8005c16:	8987      	ldrh	r7, [r0, #12]
    pHandle->DeltaCapturesIndex++;
 8005c18:	f890 c07c 	ldrb.w	ip, [r0, #124]	; 0x7c
    wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] * ((int32_t)pHandle->SpeedSamplingFreqHz)
 8005c1c:	360a      	adds	r6, #10
    pHandle->_Super.hMecAccelUnitP = (int16_t)(wtemp1 - pHandle->_Super.hAvrMecSpeedUnit);
 8005c1e:	1bdb      	subs	r3, r3, r7
    wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] * ((int32_t)pHandle->SpeedSamplingFreqHz)
 8005c20:	f850 6026 	ldr.w	r6, [r0, r6, lsl #2]
    pHandle->_Super.hMecAccelUnitP = (int16_t)(wtemp1 - pHandle->_Super.hAvrMecSpeedUnit);
 8005c24:	8243      	strh	r3, [r0, #18]
    pHandle->DeltaCapturesIndex++;
 8005c26:	f10c 0c01 	add.w	ip, ip, #1
    wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] * ((int32_t)pHandle->SpeedSamplingFreqHz)
 8005c2a:	f8b0 306c 	ldrh.w	r3, [r0, #108]	; 0x6c
    pHandle->_Super.hAvrMecSpeedUnit = (int16_t)wtemp1;
 8005c2e:	f8a0 e00c 	strh.w	lr, [r0, #12]
    pHandle->DeltaCapturesIndex++;
 8005c32:	fa5f fc8c 	uxtb.w	ip, ip
 8005c36:	f880 c07c 	strb.w	ip, [r0, #124]	; 0x7c
    wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] * ((int32_t)pHandle->SpeedSamplingFreqHz)
 8005c3a:	fb06 f303 	mul.w	r3, r6, r3
             * ((int32_t)pHandle->_Super.bElToMecRatio);
 8005c3e:	7846      	ldrb	r6, [r0, #1]
    if (pHandle->DeltaCapturesIndex >= pHandle->SpeedBufferSize)
 8005c40:	f890 c07c 	ldrb.w	ip, [r0, #124]	; 0x7c
    wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] * ((int32_t)pHandle->SpeedSamplingFreqHz)
 8005c44:	fb06 f303 	mul.w	r3, r6, r3
    pHandle->PreviousCapture = (CntCapture >= (uint32_t)65535) ? 65535U : (uint16_t)CntCapture;
 8005c48:	f64f 77fe 	movw	r7, #65534	; 0xfffe
    wtemp1 *= ((int32_t)pHandle->_Super.DPPConvFactor);
 8005c4c:	69c6      	ldr	r6, [r0, #28]
    pHandle->PreviousCapture = (CntCapture >= (uint32_t)65535) ? 65535U : (uint16_t)CntCapture;
 8005c4e:	f64f 7eff 	movw	lr, #65535	; 0xffff
 8005c52:	42bd      	cmp	r5, r7
 8005c54:	bf88      	it	hi
 8005c56:	4675      	movhi	r5, lr
    if (pHandle->DeltaCapturesIndex >= pHandle->SpeedBufferSize)
 8005c58:	4594      	cmp	ip, r2
    pHandle->PreviousCapture = (CntCapture >= (uint32_t)65535) ? 65535U : (uint16_t)CntCapture;
 8005c5a:	f8a0 5072 	strh.w	r5, [r0, #114]	; 0x72
    wtemp1 /= ((int32_t)pHandle->PulseNumber);
 8005c5e:	f8b0 506e 	ldrh.w	r5, [r0, #110]	; 0x6e
 8005c62:	fb93 f3f5 	sdiv	r3, r3, r5
    wtemp1 /= ((int32_t)pHandle->_Super.hMeasurementFrequency);
 8005c66:	8b45      	ldrh	r5, [r0, #26]
    wtemp1 *= ((int32_t)pHandle->_Super.DPPConvFactor);
 8005c68:	fb06 f303 	mul.w	r3, r6, r3
    wtemp1 /= ((int32_t)pHandle->_Super.hMeasurementFrequency);
 8005c6c:	fb93 f3f5 	sdiv	r3, r3, r5
    pHandle->_Super.hElSpeedDpp = (int16_t)wtemp1;
 8005c70:	81c3      	strh	r3, [r0, #14]
      pHandle->DeltaCapturesIndex = 0U;
 8005c72:	bf24      	itt	cs
 8005c74:	2300      	movcs	r3, #0
 8005c76:	f880 307c 	strbcs.w	r3, [r0, #124]	; 0x7c
    if (pHandle->TimerOverflowError)
 8005c7a:	b1c4      	cbz	r4, 8005cae <ENC_CalcAvrgMecSpeedUnit+0x18a>
    {
      bReliability = false;
      pHandle->SensorIsReliable = false;
      pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 8005c7c:	78c2      	ldrb	r2, [r0, #3]
 8005c7e:	7002      	strb	r2, [r0, #0]
      pHandle->SensorIsReliable = false;
 8005c80:	2300      	movs	r3, #0
 8005c82:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    }
#ifdef NULL_PTR_CHECK_ENC_SPD_POS_FDB
  }
#endif
  return (bReliability);
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8005c8a:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
        ((int32_t)CntCapture) - ((int32_t)pHandle->PreviousCapture)
 8005c8e:	1bee      	subs	r6, r5, r7
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8005c90:	330a      	adds	r3, #10
        + ((((int32_t)OverflowCntSample) + (int32_t)OFbit) * ((int32_t)pHandle->PulseNumber));
 8005c92:	42af      	cmp	r7, r5
 8005c94:	bf8c      	ite	hi
 8005c96:	46e6      	movhi	lr, ip
 8005c98:	f04f 0e00 	movls.w	lr, #0
 8005c9c:	4476      	add	r6, lr
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8005c9e:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8005ca2:	2a00      	cmp	r2, #0
 8005ca4:	f47f af6b 	bne.w	8005b7e <ENC_CalcAvrgMecSpeedUnit+0x5a>
 8005ca8:	4613      	mov	r3, r2
 8005caa:	4696      	mov	lr, r2
 8005cac:	e7af      	b.n	8005c0e <ENC_CalcAvrgMecSpeedUnit+0xea>
}
 8005cae:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      bReliability = SPD_IsMecSpeedReliable(&pHandle->_Super, pMecSpeedUnit);
 8005cb2:	f001 b88b 	b.w	8006dcc <SPD_IsMecSpeedReliable>
 8005cb6:	bf00      	nop

08005cb8 <ENC_SetMecAngle>:
    uint16_t hAngleCounts;
    uint16_t hMecAngleuint;
    int16_t localhMecAngle = hMecAngle;

    pHandle->_Super.hMecAngle = localhMecAngle;
    pHandle->_Super.hElAngle = localhMecAngle * (int16_t)pHandle->_Super.bElToMecRatio;
 8005cb8:	7843      	ldrb	r3, [r0, #1]
    pHandle->_Super.hMecAngle = localhMecAngle;
 8005cba:	80c1      	strh	r1, [r0, #6]
    pHandle->_Super.hElAngle = localhMecAngle * (int16_t)pHandle->_Super.bElToMecRatio;
 8005cbc:	b28a      	uxth	r2, r1
 8005cbe:	fb01 f303 	mul.w	r3, r1, r3
    if (localhMecAngle < 0)
 8005cc2:	2900      	cmp	r1, #0
    pHandle->_Super.hElAngle = localhMecAngle * (int16_t)pHandle->_Super.bElToMecRatio;
 8005cc4:	8083      	strh	r3, [r0, #4]
 8005cc6:	bfb8      	it	lt
 8005cc8:	f102 32ff 	addlt.w	r2, r2, #4294967295
    else
    {
      hMecAngleuint = (uint16_t)localhMecAngle;
    }

    hAngleCounts = (uint16_t)((((uint32_t)hMecAngleuint) * ((uint32_t)pHandle->PulseNumber)) / 65535U);
 8005ccc:	f8b0 306e 	ldrh.w	r3, [r0, #110]	; 0x6e
 8005cd0:	4906      	ldr	r1, [pc, #24]	; (8005cec <ENC_SetMecAngle+0x34>)
 8005cd2:	bfb8      	it	lt
 8005cd4:	b292      	uxthlt	r2, r2
 8005cd6:	fb02 f303 	mul.w	r3, r2, r3
{
 8005cda:	b410      	push	{r4}
    hAngleCounts = (uint16_t)((((uint32_t)hMecAngleuint) * ((uint32_t)pHandle->PulseNumber)) / 65535U);
 8005cdc:	fba1 1303 	umull	r1, r3, r1, r3
    TIM_TypeDef *TIMx = pHandle->TIMx;
 8005ce0:	6a04      	ldr	r4, [r0, #32]
    hAngleCounts = (uint16_t)((((uint32_t)hMecAngleuint) * ((uint32_t)pHandle->PulseNumber)) / 65535U);
 8005ce2:	0bdb      	lsrs	r3, r3, #15

    TIMx->CNT = (uint16_t)hAngleCounts;
 8005ce4:	6263      	str	r3, [r4, #36]	; 0x24
#ifdef NULL_PTR_CHECK_ENC_SPD_POS_FDB
  }
#endif
}
 8005ce6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005cea:	4770      	bx	lr
 8005cec:	80008001 	.word	0x80008001

08005cf0 <ENC_IRQHandler>:
/**
  * @brief  TIMER ENCODER Overflow interrupt counter update
  * @param  pHandleVoid: handler of the current instance of the encoder component
  */
__weak void *ENC_IRQHandler(void *pHandleVoid)
{
 8005cf0:	4602      	mov	r2, r0
  /* Updates the number of overflows occurred */
  /* The handling of overflow error is done in ENC_CalcAvrgMecSpeedUnit */
  pHandle->TimerOverflowNb += 1U;

  return (MC_NULL);
}
 8005cf2:	2000      	movs	r0, #0
  pHandle->TimerOverflowNb += 1U;
 8005cf4:	f8b2 3070 	ldrh.w	r3, [r2, #112]	; 0x70
 8005cf8:	3301      	adds	r3, #1
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	f8a2 3070 	strh.w	r3, [r2, #112]	; 0x70
}
 8005d00:	4770      	bx	lr
 8005d02:	bf00      	nop

08005d04 <MCPA_dataLog>:
  * @brief  Allocates and fills buffer with asynchronous data to be sent to controller
  *
  * @param  *pHandle Pointer to the MCPA Handle
  */
void MCPA_dataLog(MCPA_Handle_t *pHandle)
{
 8005d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif
    uint32_t *logValue;
    uint16_t *logValue16;
    uint8_t i;

    if (pHandle->HFIndex == pHandle->HFRateBuff) /*  */
 8005d06:	7fc3      	ldrb	r3, [r0, #31]
 8005d08:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
 8005d0c:	429a      	cmp	r2, r3
{
 8005d0e:	4604      	mov	r4, r0
    if (pHandle->HFIndex == pHandle->HFRateBuff) /*  */
 8005d10:	d002      	beq.n	8005d18 <MCPA_dataLog+0x14>
      }
    }
    else
    {
      /* Nothing to log just waiting next call to MCPA_datalog */
      pHandle->HFIndex++;
 8005d12:	3301      	adds	r3, #1
 8005d14:	77c3      	strb	r3, [r0, #31]
    }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
}
 8005d16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (0U == pHandle->bufferIndex)
 8005d18:	8b05      	ldrh	r5, [r0, #24]
      pHandle->HFIndex = 0U;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	77c3      	strb	r3, [r0, #31]
      if (0U == pHandle->bufferIndex)
 8005d1e:	b1a5      	cbz	r5, 8005d4a <MCPA_dataLog+0x46>
 8005d20:	6961      	ldr	r1, [r4, #20]
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 8005d22:	8ba2      	ldrh	r2, [r4, #28]
 8005d24:	42aa      	cmp	r2, r5
 8005d26:	d24e      	bcs.n	8005dc6 <MCPA_dataLog+0xc2>
 8005d28:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
        if (pHandle->MFRateBuff == 254U) /* MFRateBuff = 254 means we dump MF data once per buffer */
 8005d2c:	2bfe      	cmp	r3, #254	; 0xfe
 8005d2e:	d066      	beq.n	8005dfe <MCPA_dataLog+0xfa>
        *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after
 8005d30:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8005d34:	534b      	strh	r3, [r1, r5]
        pHandle->pTransportLayer->fSendPacket(pHandle->pTransportLayer, pHandle->currentBuffer,
 8005d36:	8b22      	ldrh	r2, [r4, #24]
 8005d38:	6820      	ldr	r0, [r4, #0]
 8005d3a:	3202      	adds	r2, #2
 8005d3c:	2309      	movs	r3, #9
 8005d3e:	6845      	ldr	r5, [r0, #4]
 8005d40:	b292      	uxth	r2, r2
 8005d42:	47a8      	blx	r5
        pHandle->bufferIndex = 0U;
 8005d44:	2300      	movs	r3, #0
 8005d46:	8323      	strh	r3, [r4, #24]
}
 8005d48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (0U == pHandle->pTransportLayer->fGetBuffer (pHandle->pTransportLayer,
 8005d4a:	4601      	mov	r1, r0
 8005d4c:	2209      	movs	r2, #9
 8005d4e:	f851 0b14 	ldr.w	r0, [r1], #20
 8005d52:	6803      	ldr	r3, [r0, #0]
 8005d54:	4798      	blx	r3
 8005d56:	b390      	cbz	r0, 8005dbe <MCPA_dataLog+0xba>
          *logValue = GLOBAL_TIMESTAMP; /* 32 first bits is used to store Timestamp */
 8005d58:	4b4b      	ldr	r3, [pc, #300]	; (8005e88 <MCPA_dataLog+0x184>)
 8005d5a:	6961      	ldr	r1, [r4, #20]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	600b      	str	r3, [r1, #0]
          if (pHandle->Mark == pHandle->MarkBuff)
 8005d60:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
 8005d64:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
          pHandle->MFIndex = 0U; /* Restart the motif from scratch at each buffer */
 8005d68:	f884 5020 	strb.w	r5, [r4, #32]
          pHandle->bufferIndex = 4U;
 8005d6c:	2304      	movs	r3, #4
          if (pHandle->Mark == pHandle->MarkBuff)
 8005d6e:	4282      	cmp	r2, r0
          pHandle->bufferIndex = 4U;
 8005d70:	8323      	strh	r3, [r4, #24]
          if (pHandle->Mark == pHandle->MarkBuff)
 8005d72:	d101      	bne.n	8005d78 <MCPA_dataLog+0x74>
 8005d74:	461d      	mov	r5, r3
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 8005d76:	e7d4      	b.n	8005d22 <MCPA_dataLog+0x1e>
            pHandle->MFNumBuff           = pHandle->MFNum;
 8005d78:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
            pHandle->HFNumBuff           = pHandle->HFNum;
 8005d7c:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
            pHandle->MFRateBuff          = pHandle->MFRate;
 8005d80:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
            pHandle->HFRateBuff          = pHandle->HFRate;
 8005d84:	f894 5021 	ldrb.w	r5, [r4, #33]	; 0x21
            pHandle->HFNumBuff           = pHandle->HFNum;
 8005d88:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
            pHandle->MFNumBuff           = pHandle->MFNum;
 8005d8c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
                         ((uint32_t)pHandle->HFNum + (uint32_t)pHandle->MFNum) * 4U); /* We store pointer here,
 8005d90:	441a      	add	r2, r3
            pHandle->bufferTxTriggerBuff = pHandle->bufferTxTrigger;
 8005d92:	8b63      	ldrh	r3, [r4, #26]
            pHandle->MarkBuff            = pHandle->Mark;
 8005d94:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
            (void)memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable,
 8005d98:	0092      	lsls	r2, r2, #2
            pHandle->MFRateBuff          = pHandle->MFRate;
 8005d9a:	f884 1026 	strb.w	r1, [r4, #38]	; 0x26
            pHandle->bufferTxTriggerBuff = pHandle->bufferTxTrigger;
 8005d9e:	83a3      	strh	r3, [r4, #28]
            (void)memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable,
 8005da0:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
            pHandle->HFRateBuff          = pHandle->HFRate;
 8005da4:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
            (void)memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable,
 8005da8:	f001 f990 	bl	80070cc <memcpy>
                         (uint32_t)pHandle->HFNum + (uint32_t)pHandle->MFNum); /* 1 size byte per ID */
 8005dac:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 8005db0:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
            (void)memcpy(pHandle->dataSizeTableBuff, pHandle->dataSizeTable,
 8005db4:	e9d4 1003 	ldrd	r1, r0, [r4, #12]
 8005db8:	441a      	add	r2, r3
 8005dba:	f001 f987 	bl	80070cc <memcpy>
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 8005dbe:	8b25      	ldrh	r5, [r4, #24]
 8005dc0:	2d00      	cmp	r5, #0
 8005dc2:	d1ad      	bne.n	8005d20 <MCPA_dataLog+0x1c>
}
 8005dc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8005dc6:	f894 6024 	ldrb.w	r6, [r4, #36]	; 0x24
        logValue16 = (uint16_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 8005dca:	194b      	adds	r3, r1, r5
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8005dcc:	b36e      	cbz	r6, 8005e2a <MCPA_dataLog+0x126>
 8005dce:	68a2      	ldr	r2, [r4, #8]
 8005dd0:	eb03 0c46 	add.w	ip, r3, r6, lsl #1
 8005dd4:	3a04      	subs	r2, #4
          *logValue16 = *((uint16_t *) pHandle->dataPtrTableBuff[i]) ; //cstat !MISRAC2012-Rule-11.5
 8005dd6:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8005dda:	8800      	ldrh	r0, [r0, #0]
 8005ddc:	f823 0b02 	strh.w	r0, [r3], #2
          pHandle->bufferIndex = pHandle->bufferIndex + 2U;
 8005de0:	8b25      	ldrh	r5, [r4, #24]
 8005de2:	3502      	adds	r5, #2
 8005de4:	b2ad      	uxth	r5, r5
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8005de6:	4563      	cmp	r3, ip
          pHandle->bufferIndex = pHandle->bufferIndex + 2U;
 8005de8:	8325      	strh	r5, [r4, #24]
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8005dea:	d1f4      	bne.n	8005dd6 <MCPA_dataLog+0xd2>
        if (pHandle->MFRateBuff < 254U)
 8005dec:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8005df0:	8ba2      	ldrh	r2, [r4, #28]
        if (pHandle->MFRateBuff < 254U)
 8005df2:	2bfd      	cmp	r3, #253	; 0xfd
 8005df4:	4618      	mov	r0, r3
 8005df6:	d91d      	bls.n	8005e34 <MCPA_dataLog+0x130>
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8005df8:	4295      	cmp	r5, r2
 8005dfa:	d897      	bhi.n	8005d2c <MCPA_dataLog+0x28>
}
 8005dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8005dfe:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8005e02:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
 8005e06:	4418      	add	r0, r3
 8005e08:	4298      	cmp	r0, r3
 8005e0a:	dd91      	ble.n	8005d30 <MCPA_dataLog+0x2c>
            *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8005e0c:	68a7      	ldr	r7, [r4, #8]
            pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 8005e0e:	6926      	ldr	r6, [r4, #16]
            *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8005e10:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
 8005e14:	6812      	ldr	r2, [r2, #0]
 8005e16:	514a      	str	r2, [r1, r5]
          for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8005e18:	1c5a      	adds	r2, r3, #1
            pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 8005e1a:	5cf3      	ldrb	r3, [r6, r3]
 8005e1c:	442b      	add	r3, r5
 8005e1e:	b29d      	uxth	r5, r3
          for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8005e20:	b2d3      	uxtb	r3, r2
 8005e22:	4283      	cmp	r3, r0
            pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 8005e24:	8325      	strh	r5, [r4, #24]
          for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8005e26:	dbf3      	blt.n	8005e10 <MCPA_dataLog+0x10c>
 8005e28:	e782      	b.n	8005d30 <MCPA_dataLog+0x2c>
        if (pHandle->MFRateBuff < 254U)
 8005e2a:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
 8005e2e:	28fd      	cmp	r0, #253	; 0xfd
 8005e30:	f63f af71 	bhi.w	8005d16 <MCPA_dataLog+0x12>
          if (pHandle->MFIndex == pHandle->MFRateBuff)
 8005e34:	f894 3020 	ldrb.w	r3, [r4, #32]
 8005e38:	4283      	cmp	r3, r0
 8005e3a:	d007      	beq.n	8005e4c <MCPA_dataLog+0x148>
            pHandle->MFIndex ++;
 8005e3c:	3301      	adds	r3, #1
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8005e3e:	8b25      	ldrh	r5, [r4, #24]
            pHandle->MFIndex ++;
 8005e40:	f884 3020 	strb.w	r3, [r4, #32]
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8005e44:	42aa      	cmp	r2, r5
 8005e46:	f4ff af73 	bcc.w	8005d30 <MCPA_dataLog+0x2c>
}
 8005e4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8005e4c:	f894 7028 	ldrb.w	r7, [r4, #40]	; 0x28
 8005e50:	4437      	add	r7, r6
            pHandle->MFIndex = 0U;
 8005e52:	2300      	movs	r3, #0
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8005e54:	42b7      	cmp	r7, r6
            pHandle->MFIndex = 0U;
 8005e56:	f884 3020 	strb.w	r3, [r4, #32]
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8005e5a:	dd12      	ble.n	8005e82 <MCPA_dataLog+0x17e>
              *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8005e5c:	f8d4 e008 	ldr.w	lr, [r4, #8]
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8005e60:	f8d4 c010 	ldr.w	ip, [r4, #16]
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8005e64:	8b25      	ldrh	r5, [r4, #24]
              *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8005e66:	f85e 3026 	ldr.w	r3, [lr, r6, lsl #2]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	514b      	str	r3, [r1, r5]
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8005e6e:	f81c 3006 	ldrb.w	r3, [ip, r6]
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8005e72:	1c70      	adds	r0, r6, #1
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8005e74:	442b      	add	r3, r5
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8005e76:	b2c6      	uxtb	r6, r0
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8005e78:	b29d      	uxth	r5, r3
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8005e7a:	42be      	cmp	r6, r7
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8005e7c:	8325      	strh	r5, [r4, #24]
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8005e7e:	dbf2      	blt.n	8005e66 <MCPA_dataLog+0x162>
 8005e80:	e7e0      	b.n	8005e44 <MCPA_dataLog+0x140>
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8005e82:	8b25      	ldrh	r5, [r4, #24]
 8005e84:	e7de      	b.n	8005e44 <MCPA_dataLog+0x140>
 8005e86:	bf00      	nop
 8005e88:	20001904 	.word	0x20001904

08005e8c <MCPA_flushDataLog>:
#endif
    uint32_t *logValue;
    uint16_t *logValue16;
    uint8_t i;

    if (pHandle->bufferIndex > 0U)
 8005e8c:	8b03      	ldrh	r3, [r0, #24]
 8005e8e:	b19b      	cbz	r3, 8005eb8 <MCPA_flushDataLog+0x2c>
{
 8005e90:	b570      	push	{r4, r5, r6, lr}
    {  /* If buffer is allocated, we must send it */
      if (pHandle->MFRateBuff == 254U) /* In case of flush, we must respect the packet format to allow
 8005e92:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 8005e96:	2afe      	cmp	r2, #254	; 0xfe
 8005e98:	4604      	mov	r4, r0
 8005e9a:	d00e      	beq.n	8005eba <MCPA_flushDataLog+0x2e>
                                          proper decoding */
      {
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
        {
         logValue = (uint32_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 8005e9c:	6941      	ldr	r1, [r0, #20]
      else
      {
        /* Nothing to do */
      }
      logValue16 = (uint16_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
      *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after
 8005e9e:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 8005ea2:	52ca      	strh	r2, [r1, r3]
                                          the MARK */
      pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer,
 8005ea4:	8b22      	ldrh	r2, [r4, #24]
 8005ea6:	6820      	ldr	r0, [r4, #0]
 8005ea8:	3202      	adds	r2, #2
 8005eaa:	2309      	movs	r3, #9
 8005eac:	6845      	ldr	r5, [r0, #4]
 8005eae:	b292      	uxth	r2, r2
 8005eb0:	47a8      	blx	r5
                                             pHandle->bufferIndex + 2U, MCTL_ASYNC);
      pHandle->bufferIndex = 0U;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	8323      	strh	r3, [r4, #24]
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
}
 8005eb6:	bd70      	pop	{r4, r5, r6, pc}
 8005eb8:	4770      	bx	lr
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8005eba:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 8005ebe:	f890 c028 	ldrb.w	ip, [r0, #40]	; 0x28
         logValue = (uint32_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 8005ec2:	6941      	ldr	r1, [r0, #20]
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8005ec4:	4494      	add	ip, r2
 8005ec6:	4562      	cmp	r2, ip
 8005ec8:	dae9      	bge.n	8005e9e <MCPA_flushDataLog+0x12>
         *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8005eca:	6886      	ldr	r6, [r0, #8]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8005ecc:	6905      	ldr	r5, [r0, #16]
         *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8005ece:	f856 0022 	ldr.w	r0, [r6, r2, lsl #2]
 8005ed2:	6800      	ldr	r0, [r0, #0]
 8005ed4:	50c8      	str	r0, [r1, r3]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8005ed6:	5ca8      	ldrb	r0, [r5, r2]
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8005ed8:	3201      	adds	r2, #1
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8005eda:	4403      	add	r3, r0
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8005edc:	b2d2      	uxtb	r2, r2
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8005ede:	b29b      	uxth	r3, r3
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8005ee0:	4562      	cmp	r2, ip
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8005ee2:	8323      	strh	r3, [r4, #24]
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8005ee4:	dbf3      	blt.n	8005ece <MCPA_flushDataLog+0x42>
 8005ee6:	e7da      	b.n	8005e9e <MCPA_flushDataLog+0x12>

08005ee8 <MCPA_cfgLog>:
  *
  * @param  *pHandle Pointer to the MCPA Handle
  * @param  *cfgdata Configuration of the Async communication
  */
uint8_t MCPA_cfgLog(MCPA_Handle_t *pHandle, uint8_t *cfgdata)
{
 8005ee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint8_t i;
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF) */
    uint16_t newID, buffSize;
    uint8_t *pCfgData = cfgdata;

    buffSize = *((uint16_t *)pCfgData); //cstat !MISRAC2012-Rule-11.3
 8005eec:	880f      	ldrh	r7, [r1, #0]
{
 8005eee:	4604      	mov	r4, r0

    if (buffSize == 0U)
 8005ef0:	2f00      	cmp	r7, #0
 8005ef2:	d044      	beq.n	8005f7e <MCPA_cfgLog+0x96>
    { 
      /* Switch Off condition */
      MCPA_stopDataLog(pHandle);
    }
    else if (buffSize > pHandle->pTransportLayer->txAsyncMaxPayload)
 8005ef4:	6803      	ldr	r3, [r0, #0]
 8005ef6:	89db      	ldrh	r3, [r3, #14]
 8005ef8:	42bb      	cmp	r3, r7
 8005efa:	d33d      	bcc.n	8005f78 <MCPA_cfgLog+0x90>
    {
      result = MCP_ERROR_NO_TXASYNC_SPACE;
    }
    else
    {
      pHandle->HFRate = *((uint8_t *)&pCfgData[2]);
 8005efc:	788b      	ldrb	r3, [r1, #2]
 8005efe:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
      pHandle->HFNum  = *((uint8_t *)&pCfgData[3]);
 8005f02:	78ce      	ldrb	r6, [r1, #3]
 8005f04:	f880 6023 	strb.w	r6, [r0, #35]	; 0x23
      pHandle->MFRate = *((uint8_t *)&pCfgData[4]);
 8005f08:	790b      	ldrb	r3, [r1, #4]
 8005f0a:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
      pHandle->MFNum  = *((uint8_t *)&pCfgData[5]);
 8005f0e:	794b      	ldrb	r3, [r1, #5]
 8005f10:	f880 3027 	strb.w	r3, [r0, #39]	; 0x27
      pCfgData = &pCfgData[6]; /* Start of the HF IDs */

      if ((pHandle->HFNum + pHandle->MFNum) <= pHandle->nbrOfDataLog)
 8005f14:	441e      	add	r6, r3
 8005f16:	7f83      	ldrb	r3, [r0, #30]
 8005f18:	429e      	cmp	r6, r3
 8005f1a:	dc52      	bgt.n	8005fc2 <MCPA_cfgLog+0xda>
      pCfgData = &pCfgData[6]; /* Start of the HF IDs */
 8005f1c:	3106      	adds	r1, #6
      {
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8005f1e:	2e00      	cmp	r6, #0
 8005f20:	d056      	beq.n	8005fd0 <MCPA_cfgLog+0xe8>
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF) */
 8005f22:	2600      	movs	r6, #0
 8005f24:	4688      	mov	r8, r1
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8005f26:	4635      	mov	r5, r6
 8005f28:	e011      	b.n	8005f4e <MCPA_cfgLog+0x66>
        {
          newID = *((uint16_t *)pCfgData); //cstat !MISRAC2012-Rule-11.3
          (void)RI_GetPtrReg(newID, &pHandle->dataPtrTable[i]);
          /* HF Data are fixed to 2 bytes */
          pHandle->dataSizeTable[i] = (i < pHandle->HFNum ) ? 2U : RI_GetIDSize(newID);
 8005f2a:	68e3      	ldr	r3, [r4, #12]
 8005f2c:	5558      	strb	r0, [r3, r5]
          pCfgData++; /* Point to the next UID */
          pCfgData++;
          logSize = logSize+pHandle->dataSizeTable[i];
 8005f2e:	68e2      	ldr	r2, [r4, #12]
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8005f30:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8005f34:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
          logSize = logSize+pHandle->dataSizeTable[i];
 8005f38:	5d52      	ldrb	r2, [r2, r5]
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8005f3a:	f105 0c01 	add.w	ip, r5, #1
 8005f3e:	fa5f f58c 	uxtb.w	r5, ip
 8005f42:	4403      	add	r3, r0
          logSize = logSize+pHandle->dataSizeTable[i];
 8005f44:	4432      	add	r2, r6
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8005f46:	429d      	cmp	r5, r3
          pCfgData++;
 8005f48:	4641      	mov	r1, r8
          logSize = logSize+pHandle->dataSizeTable[i];
 8005f4a:	b296      	uxth	r6, r2
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8005f4c:	da11      	bge.n	8005f72 <MCPA_cfgLog+0x8a>
          newID = *((uint16_t *)pCfgData); //cstat !MISRAC2012-Rule-11.3
 8005f4e:	f838 9b02 	ldrh.w	r9, [r8], #2
          (void)RI_GetPtrReg(newID, &pHandle->dataPtrTable[i]);
 8005f52:	6861      	ldr	r1, [r4, #4]
 8005f54:	4648      	mov	r0, r9
 8005f56:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8005f5a:	f7fd f9b1 	bl	80032c0 <RI_GetPtrReg>
          pHandle->dataSizeTable[i] = (i < pHandle->HFNum ) ? 2U : RI_GetIDSize(newID);
 8005f5e:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8005f62:	42ab      	cmp	r3, r5
 8005f64:	f04f 0002 	mov.w	r0, #2
 8005f68:	d8df      	bhi.n	8005f2a <MCPA_cfgLog+0x42>
 8005f6a:	4648      	mov	r0, r9
 8005f6c:	f7fd f99c 	bl	80032a8 <RI_GetIDSize>
 8005f70:	e7db      	b.n	8005f2a <MCPA_cfgLog+0x42>
        }

        /* Smallest packet must be able to contain logSize Markbyte AsyncID and TimeStamp */
        if (buffSize < (logSize + 2U + 4U))
 8005f72:	1db3      	adds	r3, r6, #6
 8005f74:	429f      	cmp	r7, r3
 8005f76:	d21a      	bcs.n	8005fae <MCPA_cfgLog+0xc6>
      result = MCP_ERROR_NO_TXASYNC_SPACE;
 8005f78:	2009      	movs	r0, #9
    }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
  return (result);
}
 8005f7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (pHandle->bufferIndex > 0U)
 8005f7e:	8b03      	ldrh	r3, [r0, #24]
  pHandle->Mark = 0U;
 8005f80:	f880 7029 	strb.w	r7, [r0, #41]	; 0x29
  if (pHandle->bufferIndex > 0U)
 8005f84:	b153      	cbz	r3, 8005f9c <MCPA_cfgLog+0xb4>
    logValue16 = (uint16_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 8005f86:	6961      	ldr	r1, [r4, #20]
    *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after
 8005f88:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 8005f8c:	52ca      	strh	r2, [r1, r3]
    pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer,
 8005f8e:	8b22      	ldrh	r2, [r4, #24]
 8005f90:	6820      	ldr	r0, [r4, #0]
 8005f92:	3202      	adds	r2, #2
 8005f94:	6845      	ldr	r5, [r0, #4]
 8005f96:	b292      	uxth	r2, r2
 8005f98:	2309      	movs	r3, #9
 8005f9a:	47a8      	blx	r5
  pHandle->bufferIndex = 0U;
 8005f9c:	2000      	movs	r0, #0
  pHandle->MarkBuff    = 0U;
 8005f9e:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
  pHandle->HFIndex     = 0U;
 8005fa2:	77e0      	strb	r0, [r4, #31]
  pHandle->HFRateBuff  = 0U; /* We do not want to miss any sample at the restart */
 8005fa4:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
  pHandle->bufferIndex = 0U;
 8005fa8:	8320      	strh	r0, [r4, #24]
}
 8005faa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          pHandle->bufferTxTrigger = buffSize-logSize - 2U; /* 2 is required to add the last Mark byte and NUL
 8005fae:	3f02      	subs	r7, #2
 8005fb0:	1bbf      	subs	r7, r7, r6
 8005fb2:	8367      	strh	r7, [r4, #26]
          pHandle->Mark = *((uint8_t *)pCfgData);
 8005fb4:	780b      	ldrb	r3, [r1, #0]
 8005fb6:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
          if (0U == pHandle->Mark)
 8005fba:	b12b      	cbz	r3, 8005fc8 <MCPA_cfgLog+0xe0>
  uint8_t result = MCP_CMD_OK;
 8005fbc:	2000      	movs	r0, #0
}
 8005fbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        result = MCP_ERROR_BAD_RAW_FORMAT;
 8005fc2:	200a      	movs	r0, #10
}
 8005fc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (pHandle->bufferIndex > 0U)
 8005fc8:	8b23      	ldrh	r3, [r4, #24]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d0e6      	beq.n	8005f9c <MCPA_cfgLog+0xb4>
 8005fce:	e7da      	b.n	8005f86 <MCPA_cfgLog+0x9e>
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8005fd0:	2306      	movs	r3, #6
 8005fd2:	e7cf      	b.n	8005f74 <MCPA_cfgLog+0x8c>

08005fd4 <NTC_Clear>:
    /* nothing to do */
  }
  else
  {
#endif
    pHandle->hAvTemp_d = 0U;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	8043      	strh	r3, [r0, #2]
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
}
 8005fd8:	4770      	bx	lr
 8005fda:	bf00      	nop

08005fdc <NTC_Init>:
    if (REAL_SENSOR == pHandle->bSensorType)
 8005fdc:	7802      	ldrb	r2, [r0, #0]
{
 8005fde:	b508      	push	{r3, lr}
    if (REAL_SENSOR == pHandle->bSensorType)
 8005fe0:	b122      	cbz	r2, 8005fec <NTC_Init+0x10>
      pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 8005fe2:	8882      	ldrh	r2, [r0, #4]
 8005fe4:	8042      	strh	r2, [r0, #2]
      pHandle->hFaultState = MC_NO_ERROR;
 8005fe6:	2100      	movs	r1, #0
 8005fe8:	8101      	strh	r1, [r0, #8]
}
 8005fea:	bd08      	pop	{r3, pc}
      NTC_Clear(pHandle);
 8005fec:	f7ff fff2 	bl	8005fd4 <NTC_Clear>
}
 8005ff0:	bd08      	pop	{r3, pc}
 8005ff2:	bf00      	nop

08005ff4 <NTC_GetAvTemp_C>:
  else
  {
#endif
    int32_t wTemp;

    if (REAL_SENSOR == pHandle->bSensorType)
 8005ff4:	7803      	ldrb	r3, [r0, #0]
 8005ff6:	b95b      	cbnz	r3, 8006010 <NTC_GetAvTemp_C+0x1c>
    {
      wTemp = (int32_t)pHandle->hAvTemp_d;
 8005ff8:	8842      	ldrh	r2, [r0, #2]
      wTemp -= ((int32_t)pHandle->wV0);
 8005ffa:	6941      	ldr	r1, [r0, #20]
      wTemp *= pHandle->hSensitivity;
 8005ffc:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
#ifndef FULL_MISRA_C_COMPLIANCY_NTC_TEMP
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      wTemp = (wTemp >> 16) + (int32_t)pHandle->hT0;
 8006000:	8b00      	ldrh	r0, [r0, #24]
      wTemp -= ((int32_t)pHandle->wV0);
 8006002:	1a52      	subs	r2, r2, r1
      wTemp *= pHandle->hSensitivity;
 8006004:	fb02 f303 	mul.w	r3, r2, r3
      wTemp = (wTemp >> 16) + (int32_t)pHandle->hT0;
 8006008:	eb00 4023 	add.w	r0, r0, r3, asr #16
    returnValue = (int16_t)wTemp;
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (returnValue);
}
 800600c:	b200      	sxth	r0, r0
 800600e:	4770      	bx	lr
      wTemp = (int32_t)pHandle->hExpectedTemp_C;
 8006010:	88c0      	ldrh	r0, [r0, #6]
}
 8006012:	b200      	sxth	r0, r0
 8006014:	4770      	bx	lr
 8006016:	bf00      	nop

08006018 <PID_HandleInit>:
  {
#endif
    pHandle->hKpGain =  pHandle->hDefKpGain;
    pHandle->hKiGain =  pHandle->hDefKiGain;
    pHandle->hKdGain =  pHandle->hDefKdGain;
    pHandle->wIntegralTerm = 0;
 8006018:	2300      	movs	r3, #0
    pHandle->hKpGain =  pHandle->hDefKpGain;
 800601a:	6801      	ldr	r1, [r0, #0]
    pHandle->hKdGain =  pHandle->hDefKdGain;
 800601c:	8c02      	ldrh	r2, [r0, #32]
    pHandle->hKpGain =  pHandle->hDefKpGain;
 800601e:	6041      	str	r1, [r0, #4]
    pHandle->hKdGain =  pHandle->hDefKdGain;
 8006020:	8442      	strh	r2, [r0, #34]	; 0x22
    pHandle->wIntegralTerm = 0;
 8006022:	6083      	str	r3, [r0, #8]
    pHandle->wPrevProcessVarError = 0;
 8006024:	6283      	str	r3, [r0, #40]	; 0x28
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8006026:	4770      	bx	lr

08006028 <PID_SetKP>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKpGain = hKpGain;
 8006028:	8081      	strh	r1, [r0, #4]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 800602a:	4770      	bx	lr

0800602c <PID_SetKI>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKiGain = hKiGain;
 800602c:	80c1      	strh	r1, [r0, #6]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 800602e:	4770      	bx	lr

08006030 <PID_GetKP>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKpGain);
#else
  return (pHandle->hKpGain);
#endif
}
 8006030:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8006034:	4770      	bx	lr
 8006036:	bf00      	nop

08006038 <PID_GetKI>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKiGain);
#else
  return (pHandle->hKiGain);
#endif
}
 8006038:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800603c:	4770      	bx	lr
 800603e:	bf00      	nop

08006040 <PID_SetIntegralTerm>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wIntegralTerm = wIntegralTermValue;
 8006040:	6081      	str	r1, [r0, #8]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return;
}
 8006042:	4770      	bx	lr

08006044 <PID_GetKPDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKpDivisorPOW2);
#else
  return (pHandle->hKpDivisorPOW2);
#endif
}
 8006044:	8b80      	ldrh	r0, [r0, #28]
 8006046:	4770      	bx	lr

08006048 <PID_SetKPDivisorPOW2>:
  }
  else
  {
#endif
    pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
    pHandle->hKpDivisor = (((uint16_t)1) << hKpDivisorPOW2);
 8006048:	2301      	movs	r3, #1
 800604a:	408b      	lsls	r3, r1
    pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
 800604c:	8381      	strh	r1, [r0, #28]
    pHandle->hKpDivisor = (((uint16_t)1) << hKpDivisorPOW2);
 800604e:	8303      	strh	r3, [r0, #24]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8006050:	4770      	bx	lr
 8006052:	bf00      	nop

08006054 <PID_GetKIDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKiDivisorPOW2);
#else
  return (pHandle->hKiDivisorPOW2);
#endif
}
 8006054:	8bc0      	ldrh	r0, [r0, #30]
 8006056:	4770      	bx	lr

08006058 <PID_SetLowerIntegralTermLimit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wLowerIntegralLimit = wLowerLimit;
 8006058:	6101      	str	r1, [r0, #16]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 800605a:	4770      	bx	lr

0800605c <PID_SetUpperIntegralTermLimit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wUpperIntegralLimit = wUpperLimit;
 800605c:	60c1      	str	r1, [r0, #12]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 800605e:	4770      	bx	lr

08006060 <PID_SetKIDivisorPOW2>:
{
 8006060:	b538      	push	{r3, r4, r5, lr}
    uint32_t wKiDiv = (((uint32_t)1) << hKiDivisorPOW2);
 8006062:	2301      	movs	r3, #1
{
 8006064:	460c      	mov	r4, r1
    uint32_t wKiDiv = (((uint32_t)1) << hKiDivisorPOW2);
 8006066:	408b      	lsls	r3, r1
    PID_SetUpperIntegralTermLimit(pHandle, (int32_t)INT16_MAX * (int32_t)wKiDiv);
 8006068:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800606c:	40a1      	lsls	r1, r4
    pHandle->hKiDivisorPOW2 = hKiDivisorPOW2;
 800606e:	83c4      	strh	r4, [r0, #30]
    pHandle->hKiDivisor = (uint16_t)wKiDiv;
 8006070:	8343      	strh	r3, [r0, #26]
{
 8006072:	4605      	mov	r5, r0
    PID_SetUpperIntegralTermLimit(pHandle, (int32_t)INT16_MAX * (int32_t)wKiDiv);
 8006074:	f7ff fff2 	bl	800605c <PID_SetUpperIntegralTermLimit>
    PID_SetLowerIntegralTermLimit(pHandle, (int32_t)(-INT16_MAX) * (int32_t)wKiDiv);
 8006078:	4902      	ldr	r1, [pc, #8]	; (8006084 <PID_SetKIDivisorPOW2+0x24>)
 800607a:	4628      	mov	r0, r5
 800607c:	40a1      	lsls	r1, r4
 800607e:	f7ff ffeb 	bl	8006058 <PID_SetLowerIntegralTermLimit>
}
 8006082:	bd38      	pop	{r3, r4, r5, pc}
 8006084:	ffff8001 	.word	0xffff8001

08006088 <PID_SetKD>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKdGain = hKdGain;
 8006088:	8441      	strh	r1, [r0, #34]	; 0x22
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 800608a:	4770      	bx	lr

0800608c <PID_GetKD>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKdGain);
#else
  return (pHandle->hKdGain);
#endif
}
 800608c:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	; 0x22
 8006090:	4770      	bx	lr
 8006092:	bf00      	nop

08006094 <PID_GetKDDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKdDivisorPOW2);
#else
  return (pHandle->hKdDivisorPOW2);
#endif
}
 8006094:	8cc0      	ldrh	r0, [r0, #38]	; 0x26
 8006096:	4770      	bx	lr

08006098 <PID_SetKDDivisorPOW2>:
  }
  else
  {
#endif
    pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
    pHandle->hKdDivisor = (((uint16_t)1) << hKdDivisorPOW2);
 8006098:	2301      	movs	r3, #1
 800609a:	408b      	lsls	r3, r1
    pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
 800609c:	84c1      	strh	r1, [r0, #38]	; 0x26
    pHandle->hKdDivisor = (((uint16_t)1) << hKdDivisorPOW2);
 800609e:	8483      	strh	r3, [r0, #36]	; 0x24
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 80060a0:	4770      	bx	lr
 80060a2:	bf00      	nop

080060a4 <PI_Controller>:
    int32_t wDischarge = 0;
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

    /* Proportional term computation*/
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 80060a4:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
{
 80060a8:	4603      	mov	r3, r0
 80060aa:	b510      	push	{r4, lr}

    /* Integral term computation */
    if (0 == pHandle->hKiGain)
 80060ac:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 80060b0:	f9b3 c016 	ldrsh.w	ip, [r3, #22]
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 80060b4:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 80060b8:	fb01 f202 	mul.w	r2, r1, r2
    if (0 == pHandle->hKiGain)
 80060bc:	b18c      	cbz	r4, 80060e2 <PI_Controller+0x3e>
    {
      pHandle->wIntegralTerm = 0;
    }
    else
    {
      wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 80060be:	fb04 f101 	mul.w	r1, r4, r1
      wIntegral_sum_temp = pHandle->wIntegralTerm + wIntegral_Term;
 80060c2:	689c      	ldr	r4, [r3, #8]

      if (wIntegral_sum_temp < 0)
 80060c4:	eb14 0e01 	adds.w	lr, r4, r1
 80060c8:	d421      	bmi.n	800610e <PI_Controller+0x6a>
      {
        if (pHandle->wIntegralTerm < 0)
        {
          if (wIntegral_Term < 0)
          {
            wIntegral_sum_temp = -INT32_MAX;
 80060ca:	420c      	tst	r4, r1
 80060cc:	4916      	ldr	r1, [pc, #88]	; (8006128 <PI_Controller+0x84>)
 80060ce:	bf48      	it	mi
 80060d0:	468e      	movmi	lr, r1
        {
          /* Nothing to do */
        }
      }

      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 80060d2:	68d9      	ldr	r1, [r3, #12]
 80060d4:	4571      	cmp	r1, lr
 80060d6:	db05      	blt.n	80060e4 <PI_Controller+0x40>
      {
        pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
      }
      else if (wIntegral_sum_temp < pHandle->wLowerIntegralLimit)
 80060d8:	6919      	ldr	r1, [r3, #16]
 80060da:	4571      	cmp	r1, lr
 80060dc:	dc02      	bgt.n	80060e4 <PI_Controller+0x40>
      {
        pHandle->wIntegralTerm = pHandle->wLowerIntegralLimit;
      }
      else
      {
        pHandle->wIntegralTerm = wIntegral_sum_temp;
 80060de:	4671      	mov	r1, lr
 80060e0:	e000      	b.n	80060e4 <PI_Controller+0x40>
 80060e2:	4621      	mov	r1, r4
    /* WARNING: the below instruction is not MISRA compliant, user should verify
               that Cortex-M3 assembly instruction ASR (arithmetic shift right)
               is used by the compiler to perform the shifts (instead of LSR
               logical shift right)*/
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    wOutput_32 = (wProportional_Term >> pHandle->hKpDivisorPOW2) + (pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2);
 80060e4:	8b9c      	ldrh	r4, [r3, #28]
 80060e6:	4122      	asrs	r2, r4
 80060e8:	8bdc      	ldrh	r4, [r3, #30]
 80060ea:	fa41 f404 	asr.w	r4, r1, r4
 80060ee:	4422      	add	r2, r4
#else
    wOutput_32 = (wProportional_Term / (int32_t)pHandle->hKpDivisor)
              + (pHandle->wIntegralTerm / (int32_t)pHandle->hKiDivisor);
#endif

    if (wOutput_32 > hUpperOutputLimit)
 80060f0:	4290      	cmp	r0, r2
 80060f2:	da03      	bge.n	80060fc <PI_Controller+0x58>
    {
      wDischarge = hUpperOutputLimit - wOutput_32;
 80060f4:	1a82      	subs	r2, r0, r2
    else
    {
      /* Nothing to do here */
    }

    pHandle->wIntegralTerm += wDischarge;
 80060f6:	4411      	add	r1, r2
 80060f8:	6099      	str	r1, [r3, #8]
    returnValue = (int16_t)wOutput_32;
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return (returnValue);
}
 80060fa:	bd10      	pop	{r4, pc}
    else if (wOutput_32 < hLowerOutputLimit)
 80060fc:	4594      	cmp	ip, r2
      wDischarge = hLowerOutputLimit - wOutput_32;
 80060fe:	bfc5      	ittet	gt
 8006100:	ebac 0202 	subgt.w	r2, ip, r2
    pHandle->wIntegralTerm += wDischarge;
 8006104:	1889      	addgt	r1, r1, r2
    returnValue = (int16_t)wOutput_32;
 8006106:	b210      	sxthle	r0, r2
      wOutput_32 = hLowerOutputLimit;
 8006108:	4660      	movgt	r0, ip
    pHandle->wIntegralTerm += wDischarge;
 800610a:	6099      	str	r1, [r3, #8]
}
 800610c:	bd10      	pop	{r4, pc}
        if (pHandle->wIntegralTerm > 0)
 800610e:	2c00      	cmp	r4, #0
 8006110:	dddf      	ble.n	80060d2 <PI_Controller+0x2e>
          if (wIntegral_Term > 0)
 8006112:	2900      	cmp	r1, #0
 8006114:	dddd      	ble.n	80060d2 <PI_Controller+0x2e>
      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 8006116:	68d9      	ldr	r1, [r3, #12]
 8006118:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 800611c:	42a1      	cmp	r1, r4
 800611e:	d1e1      	bne.n	80060e4 <PI_Controller+0x40>
            wIntegral_sum_temp = INT32_MAX;
 8006120:	468e      	mov	lr, r1
        pHandle->wIntegralTerm = wIntegral_sum_temp;
 8006122:	4671      	mov	r1, lr
 8006124:	e7de      	b.n	80060e4 <PI_Controller+0x40>
 8006126:	bf00      	nop
 8006128:	80000001 	.word	0x80000001

0800612c <PQD_CalcElMotorPower>:
  }
  else
  {
#endif
    int32_t wAux;
    qd_t Iqd = pHandle->pFOCVars->Iqd;
 800612c:	6882      	ldr	r2, [r0, #8]
{
 800612e:	b500      	push	{lr}
    qd_t Vqd = pHandle->pFOCVars->Vqd;

    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 8006130:	89d1      	ldrh	r1, [r2, #14]
 8006132:	f8b2 e018 	ldrh.w	lr, [r2, #24]
    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
 8006136:	8993      	ldrh	r3, [r2, #12]
 8006138:	f8b2 c016 	ldrh.w	ip, [r2, #22]
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 800613c:	fb11 f20e 	smulbb	r2, r1, lr
    wAux /= 65536;
 8006140:	fb13 230c 	smlabb	r3, r3, ip, r2
 8006144:	2b00      	cmp	r3, #0

    /* pHandle->hAvrgElMotorPower += (wAux - pHandle->hAvrgElMotorPower) >> 4 */
    pHandle->hAvrgElMotorPower += (int16_t)((wAux - (int32_t)pHandle->hAvrgElMotorPower) / 16);
 8006146:	f9b0 2000 	ldrsh.w	r2, [r0]
    wAux /= 65536;
 800614a:	bfbc      	itt	lt
 800614c:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00
 8006150:	33ff      	addlt	r3, #255	; 0xff
    pHandle->hAvrgElMotorPower += (int16_t)((wAux - (int32_t)pHandle->hAvrgElMotorPower) / 16);
 8006152:	ebd2 4323 	rsbs	r3, r2, r3, asr #16
 8006156:	bf48      	it	mi
 8006158:	330f      	addmi	r3, #15
 800615a:	eb02 1223 	add.w	r2, r2, r3, asr #4
 800615e:	8002      	strh	r2, [r0, #0]

#ifdef NULL_PTR_CHECK_PQD_MOT_POW_MEAS
  }
#endif
}
 8006160:	f85d fb04 	ldr.w	pc, [sp], #4

08006164 <PQD_Clear>:
    /* nothing to do */
  }
  else
  {
#endif
    pHandle->hAvrgElMotorPower = 0;
 8006164:	2300      	movs	r3, #0
 8006166:	8003      	strh	r3, [r0, #0]
#ifdef NULL_PTR_CHECK_MOT_POW_MES
  }
#endif
}
 8006168:	4770      	bx	lr
 800616a:	bf00      	nop

0800616c <PQD_GetAvrgElMotorPowerW>:
  * 
  * @param pHandle pointer on the related component instance.
  * @retval float_t The average measured motor power expressed in Watts.
  */
__weak float_t PQD_GetAvrgElMotorPowerW(const PQD_MotorPowMeas_Handle_t *pHandle)
{
 800616c:	b510      	push	{r4, lr}
  else
  {
#endif

  /* First perform an integer multiplication, then a float one. */
  PowerW = ((float_t)pHandle->hAvrgElMotorPower * (float_t)VBS_GetAvBusVoltage_V(pHandle->pVBS)) * pHandle->ConvFact;
 800616e:	f9b0 3000 	ldrsh.w	r3, [r0]
{
 8006172:	ed2d 8b02 	vpush	{d8}
 8006176:	4604      	mov	r4, r0
  PowerW = ((float_t)pHandle->hAvrgElMotorPower * (float_t)VBS_GetAvBusVoltage_V(pHandle->pVBS)) * pHandle->ConvFact;
 8006178:	68c0      	ldr	r0, [r0, #12]
 800617a:	ee08 3a10 	vmov	s16, r3
 800617e:	f7ff fbef 	bl	8005960 <VBS_GetAvBusVoltage_V>
 8006182:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8006186:	edd4 7a01 	vldr	s15, [r4, #4]
 800618a:	ee07 0a10 	vmov	s14, r0
 800618e:	ee28 8a27 	vmul.f32	s16, s16, s15
 8006192:	eeb8 0a47 	vcvt.f32.u32	s0, s14

#ifdef NULL_PTR_CHECK_PQD_MOT_POW_MEAS
  }
#endif
  return (PowerW);
}
 8006196:	ee28 0a00 	vmul.f32	s0, s16, s0
 800619a:	ecbd 8b02 	vpop	{d8}
 800619e:	bd10      	pop	{r4, pc}

080061a0 <startTimers>:
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
*/
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return (READ_BIT(RCC->APB1ENR, Periphs) == Periphs);
 80061a0:	4b17      	ldr	r3, [pc, #92]	; (8006200 <startTimers+0x60>)
 80061a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
  uint32_t isTIM2ClockOn;
  uint32_t trigOut;

  isTIM2ClockOn = LL_APB1_GRP1_IsEnabledClock(LL_APB1_GRP1_PERIPH_TIM2);
  if ((uint32_t)0 == isTIM2ClockOn)
 80061a4:	07d2      	lsls	r2, r2, #31
 80061a6:	d415      	bmi.n	80061d4 <startTimers+0x34>
  SET_BIT(RCC->APB1ENR, Periphs);
 80061a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061aa:	f042 0201 	orr.w	r2, r2, #1
 80061ae:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80061b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 80061b2:	b082      	sub	sp, #8
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80061b4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80061b8:	f002 0201 	and.w	r2, r2, #1
 80061bc:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 80061be:	9a01      	ldr	r2, [sp, #4]
 80061c0:	694a      	ldr	r2, [r1, #20]
 80061c2:	f042 0201 	orr.w	r2, r2, #1
 80061c6:	614a      	str	r2, [r1, #20]
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 80061c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061ca:	f022 0201 	bic.w	r2, r2, #1
 80061ce:	641a      	str	r2, [r3, #64]	; 0x40
    trigOut = LL_TIM_ReadReg(TIM2, CR2) & TIM_CR2_MMS;
    LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_UPDATE);
    LL_TIM_GenerateEvent_UPDATE(TIM2);
    LL_TIM_SetTriggerOutput(TIM2, trigOut);
  }
}
 80061d0:	b002      	add	sp, #8
 80061d2:	4770      	bx	lr
    trigOut = LL_TIM_ReadReg(TIM2, CR2) & TIM_CR2_MMS;
 80061d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80061d8:	685a      	ldr	r2, [r3, #4]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80061da:	6859      	ldr	r1, [r3, #4]
 80061dc:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80061e0:	f041 0120 	orr.w	r1, r1, #32
 80061e4:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80061e6:	6959      	ldr	r1, [r3, #20]
 80061e8:	f041 0101 	orr.w	r1, r1, #1
 80061ec:	6159      	str	r1, [r3, #20]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80061ee:	6859      	ldr	r1, [r3, #4]
 80061f0:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80061f4:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80061f8:	430a      	orrs	r2, r1
 80061fa:	605a      	str	r2, [r3, #4]
 80061fc:	4770      	bx	lr
 80061fe:	bf00      	nop
 8006200:	40023800 	.word	0x40023800

08006204 <waitForPolarizationEnd>:
  {
#endif
    uint16_t hCalibrationPeriodCounter;
    uint16_t hMaxPeriodsNumber;

    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 8006204:	3201      	adds	r2, #1
{
 8006206:	b570      	push	{r4, r5, r6, lr}
    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 8006208:	0852      	lsrs	r2, r2, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 800620a:	f06f 0602 	mvn.w	r6, #2
 800620e:	0155      	lsls	r5, r2, #5
 8006210:	6106      	str	r6, [r0, #16]

    /* Wait for NB_CONVERSIONS to be executed */
    LL_TIM_ClearFlag_CC1(TIMx);
    hCalibrationPeriodCounter = 0u;
 8006212:	2200      	movs	r2, #0
    while (*cnt < NB_CONVERSIONS)
 8006214:	f893 c000 	ldrb.w	ip, [r3]
 8006218:	f1bc 0f0f 	cmp.w	ip, #15
    {
      if ((uint32_t)ERROR == LL_TIM_IsActiveFlag_CC1(TIMx))
      {
        LL_TIM_ClearFlag_CC1(TIMx);
        hCalibrationPeriodCounter++;
 800621c:	f102 0e01 	add.w	lr, r2, #1
    while (*cnt < NB_CONVERSIONS)
 8006220:	d80c      	bhi.n	800623c <waitForPolarizationEnd+0x38>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8006222:	6904      	ldr	r4, [r0, #16]
 8006224:	07a4      	lsls	r4, r4, #30
 8006226:	d5f5      	bpl.n	8006214 <waitForPolarizationEnd+0x10>
        hCalibrationPeriodCounter++;
 8006228:	fa1f f28e 	uxth.w	r2, lr
        if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 800622c:	4295      	cmp	r5, r2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 800622e:	6106      	str	r6, [r0, #16]
 8006230:	d8f0      	bhi.n	8006214 <waitForPolarizationEnd+0x10>
        {
          if (*cnt < NB_CONVERSIONS)
 8006232:	781c      	ldrb	r4, [r3, #0]
 8006234:	2c0f      	cmp	r4, #15
 8006236:	d8ed      	bhi.n	8006214 <waitForPolarizationEnd+0x10>
          {
            *SWerror = 1u;
 8006238:	2301      	movs	r3, #1
 800623a:	800b      	strh	r3, [r1, #0]
      }
    }
#ifdef NULL_PTR_CHECK_POW_COM
  }
#endif
  }
 800623c:	bd70      	pop	{r4, r5, r6, pc}
 800623e:	bf00      	nop

08006240 <R3_1_GetPhaseCurrents>:
  *
  */
__weak void R3_1_GetPhaseCurrents(PWMC_Handle_t *pHdl, ab_t* pStator_Currents)
{
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006240:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
{
 8006244:	b570      	push	{r4, r5, r6, lr}
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 8006246:	e9d3 2400 	ldrd	r2, r4, [r3]
  CLEAR_BIT(TIMx->CCER, Channels);
 800624a:	6a23      	ldr	r3, [r4, #32]
 800624c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006250:	6223      	str	r3, [r4, #32]
  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);

  bSector = ( uint8_t )( pHandle->_Super.Sector );

  hReg1 =  (ADCx->JDR1)*2;
 8006252:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
  hReg2 =  (ADCx->JDR2)*2;
 8006254:	6c12      	ldr	r2, [r2, #64]	; 0x40

  switch ( bSector )
 8006256:	f890 c07c 	ldrb.w	ip, [r0, #124]	; 0x7c
  hReg1 =  (ADCx->JDR1)*2;
 800625a:	005b      	lsls	r3, r3, #1
  hReg2 =  (ADCx->JDR2)*2;
 800625c:	0052      	lsls	r2, r2, #1
  hReg1 =  (ADCx->JDR1)*2;
 800625e:	b29b      	uxth	r3, r3
  hReg2 =  (ADCx->JDR2)*2;
 8006260:	b292      	uxth	r2, r2
  switch ( bSector )
 8006262:	f1bc 0f05 	cmp.w	ip, #5
 8006266:	f200 809c 	bhi.w	80063a2 <R3_1_GetPhaseCurrents+0x162>
 800626a:	e8df f00c 	tbb	[pc, ip]
 800626e:	233c      	.short	0x233c
 8006270:	3c030323 	.word	0x3c030323
    case SECTOR_4:
    case SECTOR_5:
    {
      /* Current on Phase C is not accessible     */
      /* Ia = PhaseAOffset - ADC converted value) */
      wAux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( hReg1 );
 8006274:	f8d0 4088 	ldr.w	r4, [r0, #136]	; 0x88
      /* Saturation of Ia */
      if ( wAux < -INT16_MAX )
 8006278:	4d4e      	ldr	r5, [pc, #312]	; (80063b4 <R3_1_GetPhaseCurrents+0x174>)
      wAux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( hReg1 );
 800627a:	1ae3      	subs	r3, r4, r3
      if ( wAux < -INT16_MAX )
 800627c:	42ab      	cmp	r3, r5
 800627e:	da5d      	bge.n	800633c <R3_1_GetPhaseCurrents+0xfc>
      {
        pStator_Currents->a = ( int16_t )wAux;
      }

      /* Ib = PhaseBOffset - ADC converted value) */
        wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg2 );
 8006280:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
        pStator_Currents->a = -INT16_MAX;
 8006284:	800d      	strh	r5, [r1, #0]
        wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg2 );
 8006286:	eba3 0c02 	sub.w	ip, r3, r2

      /* Saturation of Ib */
      if ( wAux < -INT16_MAX )
 800628a:	4a4a      	ldr	r2, [pc, #296]	; (80063b4 <R3_1_GetPhaseCurrents+0x174>)
 800628c:	4594      	cmp	ip, r2
 800628e:	db45      	blt.n	800631c <R3_1_GetPhaseCurrents+0xdc>
      {
        pStator_Currents->b = -INT16_MAX;
      }
      else  if ( wAux > INT16_MAX )
 8006290:	f5bc 4f00 	cmp.w	ip, #32768	; 0x8000
 8006294:	db74      	blt.n	8006380 <R3_1_GetPhaseCurrents+0x140>
      {
        pStator_Currents->b = INT16_MAX;
 8006296:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800629a:	469c      	mov	ip, r3
 800629c:	804b      	strh	r3, [r1, #2]
 800629e:	46e6      	mov	lr, ip
    }
    break;
  }
  pHandle->_Super.Ia = pStator_Currents->a;
  pHandle->_Super.Ib = pStator_Currents->b;
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 80062a0:	b2ab      	uxth	r3, r5
 80062a2:	4463      	add	r3, ip
 80062a4:	425b      	negs	r3, r3
  pHandle->_Super.Ia = pStator_Currents->a;
 80062a6:	f8a0 5062 	strh.w	r5, [r0, #98]	; 0x62
  pHandle->_Super.Ib = pStator_Currents->b;
 80062aa:	f8a0 e064 	strh.w	lr, [r0, #100]	; 0x64
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 80062ae:	f8a0 3066 	strh.w	r3, [r0, #102]	; 0x66
}
 80062b2:	bd70      	pop	{r4, r5, r6, pc}
      wAux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( hReg1 );
 80062b4:	f8d0 4088 	ldr.w	r4, [r0, #136]	; 0x88
 80062b8:	1ae4      	subs	r4, r4, r3
      if ( wAux < -INT16_MAX )
 80062ba:	4b3e      	ldr	r3, [pc, #248]	; (80063b4 <R3_1_GetPhaseCurrents+0x174>)
 80062bc:	429c      	cmp	r4, r3
 80062be:	db38      	blt.n	8006332 <R3_1_GetPhaseCurrents+0xf2>
      else  if ( wAux > INT16_MAX )
 80062c0:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 80062c4:	da64      	bge.n	8006390 <R3_1_GetPhaseCurrents+0x150>
        pStator_Currents->a = ( int16_t )wAux;
 80062c6:	b225      	sxth	r5, r4
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 80062c8:	b2a3      	uxth	r3, r4
      wAux = -wAux -  ( int32_t )pStator_Currents->a;
 80062ca:	f8d0 6090 	ldr.w	r6, [r0, #144]	; 0x90
        pStator_Currents->a = -INT16_MAX;
 80062ce:	800d      	strh	r5, [r1, #0]
      wAux = -wAux -  ( int32_t )pStator_Currents->a;
 80062d0:	1b92      	subs	r2, r2, r6
 80062d2:	1b12      	subs	r2, r2, r4
      if ( wAux > INT16_MAX )
 80062d4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80062d8:	db3e      	blt.n	8006358 <R3_1_GetPhaseCurrents+0x118>
        pStator_Currents->b = INT16_MAX;
 80062da:	f647 7cff 	movw	ip, #32767	; 0x7fff
 80062de:	f8a1 c002 	strh.w	ip, [r1, #2]
 80062e2:	46e6      	mov	lr, ip
 80062e4:	e7dd      	b.n	80062a2 <R3_1_GetPhaseCurrents+0x62>
      wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg1 );
 80062e6:	f8d0 408c 	ldr.w	r4, [r0, #140]	; 0x8c
 80062ea:	1ae4      	subs	r4, r4, r3
      if ( wAux < -INT16_MAX )
 80062ec:	4b31      	ldr	r3, [pc, #196]	; (80063b4 <R3_1_GetPhaseCurrents+0x174>)
 80062ee:	429c      	cmp	r4, r3
 80062f0:	db1a      	blt.n	8006328 <R3_1_GetPhaseCurrents+0xe8>
      else  if ( wAux > INT16_MAX )
 80062f2:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 80062f6:	da37      	bge.n	8006368 <R3_1_GetPhaseCurrents+0x128>
        pStator_Currents->b = ( int16_t )wAux;
 80062f8:	fa0f fe84 	sxth.w	lr, r4
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 80062fc:	fa1f fc84 	uxth.w	ip, r4
      wAux = -wAux - ( int32_t )pStator_Currents->b;
 8006300:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
        pStator_Currents->b = -INT16_MAX;
 8006304:	f8a1 e002 	strh.w	lr, [r1, #2]
      wAux = -wAux - ( int32_t )pStator_Currents->b;
 8006308:	1ad3      	subs	r3, r2, r3
 800630a:	1b1b      	subs	r3, r3, r4
      if ( wAux > INT16_MAX )
 800630c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006310:	db1b      	blt.n	800634a <R3_1_GetPhaseCurrents+0x10a>
        pStator_Currents->a = INT16_MAX;
 8006312:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8006316:	800b      	strh	r3, [r1, #0]
 8006318:	461d      	mov	r5, r3
 800631a:	e7c2      	b.n	80062a2 <R3_1_GetPhaseCurrents+0x62>
        pStator_Currents->b = -INT16_MAX;
 800631c:	804a      	strh	r2, [r1, #2]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 800631e:	b2ab      	uxth	r3, r5
 8006320:	f248 0c01 	movw	ip, #32769	; 0x8001
 8006324:	4696      	mov	lr, r2
 8006326:	e7bc      	b.n	80062a2 <R3_1_GetPhaseCurrents+0x62>
 8006328:	461c      	mov	r4, r3
 800632a:	f248 0c01 	movw	ip, #32769	; 0x8001
 800632e:	469e      	mov	lr, r3
 8006330:	e7e6      	b.n	8006300 <R3_1_GetPhaseCurrents+0xc0>
 8006332:	461c      	mov	r4, r3
 8006334:	4625      	mov	r5, r4
 8006336:	f248 0301 	movw	r3, #32769	; 0x8001
 800633a:	e7c6      	b.n	80062ca <R3_1_GetPhaseCurrents+0x8a>
      else  if ( wAux > INT16_MAX )
 800633c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
        pStator_Currents->a = ( int16_t )wAux;
 8006340:	bfb4      	ite	lt
 8006342:	b21d      	sxthlt	r5, r3
 8006344:	f647 75ff 	movwge	r5, #32767	; 0x7fff
 8006348:	e79a      	b.n	8006280 <R3_1_GetPhaseCurrents+0x40>
      else  if ( wAux < -INT16_MAX )
 800634a:	4d1a      	ldr	r5, [pc, #104]	; (80063b4 <R3_1_GetPhaseCurrents+0x174>)
 800634c:	42ab      	cmp	r3, r5
 800634e:	da24      	bge.n	800639a <R3_1_GetPhaseCurrents+0x15a>
        pStator_Currents->a = -INT16_MAX;
 8006350:	800d      	strh	r5, [r1, #0]
 8006352:	f248 0301 	movw	r3, #32769	; 0x8001
 8006356:	e7a4      	b.n	80062a2 <R3_1_GetPhaseCurrents+0x62>
      else  if ( wAux < -INT16_MAX )
 8006358:	4c16      	ldr	r4, [pc, #88]	; (80063b4 <R3_1_GetPhaseCurrents+0x174>)
 800635a:	42a2      	cmp	r2, r4
 800635c:	da09      	bge.n	8006372 <R3_1_GetPhaseCurrents+0x132>
        pStator_Currents->b = -INT16_MAX;
 800635e:	804c      	strh	r4, [r1, #2]
 8006360:	f248 0c01 	movw	ip, #32769	; 0x8001
 8006364:	46a6      	mov	lr, r4
 8006366:	e79c      	b.n	80062a2 <R3_1_GetPhaseCurrents+0x62>
 8006368:	f647 7cff 	movw	ip, #32767	; 0x7fff
 800636c:	4664      	mov	r4, ip
 800636e:	46e6      	mov	lr, ip
 8006370:	e7c6      	b.n	8006300 <R3_1_GetPhaseCurrents+0xc0>
        pStator_Currents->b = ( int16_t )wAux;
 8006372:	fa0f fe82 	sxth.w	lr, r2
 8006376:	f8a1 e002 	strh.w	lr, [r1, #2]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 800637a:	fa1f fc82 	uxth.w	ip, r2
 800637e:	e790      	b.n	80062a2 <R3_1_GetPhaseCurrents+0x62>
        pStator_Currents->b = ( int16_t )wAux;
 8006380:	fa0f fe8c 	sxth.w	lr, ip
 8006384:	f8a1 e002 	strh.w	lr, [r1, #2]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8006388:	b2ab      	uxth	r3, r5
 800638a:	fa1f fc8c 	uxth.w	ip, ip
 800638e:	e788      	b.n	80062a2 <R3_1_GetPhaseCurrents+0x62>
 8006390:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8006394:	461c      	mov	r4, r3
 8006396:	461d      	mov	r5, r3
 8006398:	e797      	b.n	80062ca <R3_1_GetPhaseCurrents+0x8a>
        pStator_Currents->a = ( int16_t )wAux;
 800639a:	b21d      	sxth	r5, r3
 800639c:	800d      	strh	r5, [r1, #0]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 800639e:	b29b      	uxth	r3, r3
 80063a0:	e77f      	b.n	80062a2 <R3_1_GetPhaseCurrents+0x62>
  pHandle->_Super.Ia = pStator_Currents->a;
 80063a2:	f9b1 5000 	ldrsh.w	r5, [r1]
  pHandle->_Super.Ib = pStator_Currents->b;
 80063a6:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 80063aa:	880b      	ldrh	r3, [r1, #0]
 80063ac:	f8b1 c002 	ldrh.w	ip, [r1, #2]
 80063b0:	e777      	b.n	80062a2 <R3_1_GetPhaseCurrents+0x62>
 80063b2:	bf00      	nop
 80063b4:	ffff8001 	.word	0xffff8001

080063b8 <R3_1_HFCurrentsCalibrationAB>:
  *         of phase A and B in ab_t format.
  */
__weak void R3_1_HFCurrentsCalibrationAB( PWMC_Handle_t * pHdl, ab_t * pStator_Currents )
{
  PWMC_R3_1_Handle_t * pHandle = (PWMC_R3_1_Handle_t *) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80063b8:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
{
 80063bc:	b430      	push	{r4, r5}
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 80063be:	e9d3 4200 	ldrd	r4, r2, [r3]
 80063c2:	6a13      	ldr	r3, [r2, #32]
 80063c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80063c8:	6213      	str	r3, [r2, #32]
  
  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 80063ca:	f890 309f 	ldrb.w	r3, [r0, #159]	; 0x9f
 80063ce:	2b0f      	cmp	r3, #15
 80063d0:	d80f      	bhi.n	80063f2 <R3_1_HFCurrentsCalibrationAB+0x3a>
  {
    pHandle->PhaseAOffset += ADCx->JDR1;
 80063d2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80063d4:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
    pHandle->PhaseBOffset += ADCx->JDR2;
 80063d8:	6c25      	ldr	r5, [r4, #64]	; 0x40
    pHandle->PhaseAOffset += ADCx->JDR1;
 80063da:	189c      	adds	r4, r3, r2
    pHandle->PhaseBOffset += ADCx->JDR2;
 80063dc:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
    pHandle->PolarizationCounter++;
 80063e0:	f890 309f 	ldrb.w	r3, [r0, #159]	; 0x9f
    pHandle->PhaseBOffset += ADCx->JDR2;
 80063e4:	442a      	add	r2, r5
    pHandle->PolarizationCounter++;
 80063e6:	3301      	adds	r3, #1
    pHandle->PhaseBOffset += ADCx->JDR2;
 80063e8:	e9c0 4222 	strd	r4, r2, [r0, #136]	; 0x88
    pHandle->PolarizationCounter++;
 80063ec:	b2db      	uxtb	r3, r3
 80063ee:	f880 309f 	strb.w	r3, [r0, #159]	; 0x9f
  }

  /* during offset calibration no current is flowing in the phases */
  pStator_Currents->a = 0;
 80063f2:	2300      	movs	r3, #0
  pStator_Currents->b = 0;
}
 80063f4:	bc30      	pop	{r4, r5}
  pStator_Currents->a = 0;
 80063f6:	600b      	str	r3, [r1, #0]
}
 80063f8:	4770      	bx	lr
 80063fa:	bf00      	nop

080063fc <R3_1_HFCurrentsCalibrationC>:
  *         of phase A and B in ab_t format.
  */
__weak void R3_1_HFCurrentsCalibrationC(PWMC_Handle_t *pHdl, ab_t* pStator_Currents)
{
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80063fc:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
{
 8006400:	b410      	push	{r4}
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 8006402:	e9d3 4200 	ldrd	r4, r2, [r3]
 8006406:	6a13      	ldr	r3, [r2, #32]
 8006408:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800640c:	6213      	str	r3, [r2, #32]

  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 800640e:	f890 309f 	ldrb.w	r3, [r0, #159]	; 0x9f
 8006412:	2b0f      	cmp	r3, #15
 8006414:	d80b      	bhi.n	800642e <R3_1_HFCurrentsCalibrationC+0x32>
  {
    pHandle->PhaseCOffset += ADCx->JDR2;
 8006416:	6c24      	ldr	r4, [r4, #64]	; 0x40
    pHandle->PolarizationCounter++;
 8006418:	f890 309f 	ldrb.w	r3, [r0, #159]	; 0x9f
    pHandle->PhaseCOffset += ADCx->JDR2;
 800641c:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
    pHandle->PolarizationCounter++;
 8006420:	3301      	adds	r3, #1
    pHandle->PhaseCOffset += ADCx->JDR2;
 8006422:	4422      	add	r2, r4
    pHandle->PolarizationCounter++;
 8006424:	b2db      	uxtb	r3, r3
    pHandle->PhaseCOffset += ADCx->JDR2;
 8006426:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
    pHandle->PolarizationCounter++;
 800642a:	f880 309f 	strb.w	r3, [r0, #159]	; 0x9f
  }

  /* during offset calibration no current is flowing in the phases */
  pStator_Currents->a = 0;
 800642e:	2300      	movs	r3, #0
  pStator_Currents->b = 0;
}
 8006430:	f85d 4b04 	ldr.w	r4, [sp], #4
  pStator_Currents->a = 0;
 8006434:	600b      	str	r3, [r1, #0]
}
 8006436:	4770      	bx	lr

08006438 <R3_1_SwitchOnPWM>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  */
__weak void R3_1_SwitchOnPWM(PWMC_Handle_t *pHdl)
{  
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8006438:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0

  pHandle->_Super.TurnOnLowSidesAction = false;
  
  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
 800643c:	f8b0 209c 	ldrh.w	r2, [r0, #156]	; 0x9c
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8006440:	685b      	ldr	r3, [r3, #4]
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
 8006442:	0851      	lsrs	r1, r2, #1
  pHandle->_Super.TurnOnLowSidesAction = false;
 8006444:	f04f 0c00 	mov.w	ip, #0
{  
 8006448:	b430      	push	{r4, r5}
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
  LL_TIM_OC_SetCompareCH4(TIMx, (uint32_t)(pHandle->Half_PWMPeriod - 5u));
 800644a:	3a05      	subs	r2, #5
  pHandle->_Super.TurnOnLowSidesAction = false;
 800644c:	f880 c07e 	strb.w	ip, [r0, #126]	; 0x7e
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006450:	6359      	str	r1, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006452:	6399      	str	r1, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8006454:	63d9      	str	r1, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006456:	f06f 0101 	mvn.w	r1, #1
  WRITE_REG(TIMx->CCR4, CompareValue);
 800645a:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800645c:	6119      	str	r1, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800645e:	691a      	ldr	r2, [r3, #16]
 8006460:	07d2      	lsls	r2, r2, #31
 8006462:	d5fc      	bpl.n	800645e <R3_1_SwitchOnPWM+0x26>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006464:	f06f 0201 	mvn.w	r2, #1
 8006468:	611a      	str	r2, [r3, #16]
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE(TIMx);

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 800646a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800646c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006470:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8006472:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006474:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006478:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->_Super.LowSideOutputs ) == ES_GPIO )
 800647a:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
 800647e:	2a02      	cmp	r2, #2
 8006480:	d008      	beq.n	8006494 <R3_1_SwitchOnPWM+0x5c>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006482:	f06f 0201 	mvn.w	r2, #1
 8006486:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8006488:	68da      	ldr	r2, [r3, #12]
 800648a:	f042 0201 	orr.w	r2, r2, #1
  LL_TIM_ClearFlag_UPDATE( TIMx );
  /* Enable Update IRQ */
  LL_TIM_EnableIT_UPDATE( TIMx );

  return; 
}
 800648e:	bc30      	pop	{r4, r5}
 8006490:	60da      	str	r2, [r3, #12]
 8006492:	4770      	bx	lr
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0u)
 8006494:	6a19      	ldr	r1, [r3, #32]
 8006496:	f240 5255 	movw	r2, #1365	; 0x555
 800649a:	4211      	tst	r1, r2
 800649c:	d00c      	beq.n	80064b8 <R3_1_SwitchOnPWM+0x80>
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800649e:	e9d0 140f 	ldrd	r1, r4, [r0, #60]	; 0x3c
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 80064a2:	f8b0 5048 	ldrh.w	r5, [r0, #72]	; 0x48
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 80064a6:	6c42      	ldr	r2, [r0, #68]	; 0x44
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 80064a8:	618d      	str	r5, [r1, #24]
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 80064aa:	f8b0 504a 	ldrh.w	r5, [r0, #74]	; 0x4a
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 80064ae:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
 80064b2:	61a5      	str	r5, [r4, #24]
 80064b4:	6191      	str	r1, [r2, #24]
}
 80064b6:	e7e4      	b.n	8006482 <R3_1_SwitchOnPWM+0x4a>
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 80064b8:	f8b0 4048 	ldrh.w	r4, [r0, #72]	; 0x48
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80064bc:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 80064be:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 80064c2:	f8b0 204c 	ldrh.w	r2, [r0, #76]	; 0x4c
 80064c6:	0424      	lsls	r4, r4, #16
 80064c8:	61ac      	str	r4, [r5, #24]
 80064ca:	e9d0 4010 	ldrd	r4, r0, [r0, #64]	; 0x40
 80064ce:	0409      	lsls	r1, r1, #16
 80064d0:	0412      	lsls	r2, r2, #16
 80064d2:	61a1      	str	r1, [r4, #24]
 80064d4:	6182      	str	r2, [r0, #24]
}
 80064d6:	e7d4      	b.n	8006482 <R3_1_SwitchOnPWM+0x4a>

080064d8 <R3_1_SwitchOffPWM>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  */
__weak void R3_1_SwitchOffPWM(PWMC_Handle_t *pHdl)
{
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 80064d8:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0

  pHandle->_Super.TurnOnLowSidesAction = false;

  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs(TIMx);
  if (pHandle->_Super.BrakeActionLock == true)
 80064dc:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 80064e0:	685b      	ldr	r3, [r3, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 80064e2:	68da      	ldr	r2, [r3, #12]
 80064e4:	f022 0201 	bic.w	r2, r2, #1
 80064e8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80064ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  pHandle->_Super.TurnOnLowSidesAction = false;
 80064ec:	f04f 0c00 	mov.w	ip, #0
 80064f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80064f4:	f880 c07e 	strb.w	ip, [r0, #126]	; 0x7e
 80064f8:	645a      	str	r2, [r3, #68]	; 0x44
  if (pHandle->_Super.BrakeActionLock == true)
 80064fa:	b919      	cbnz	r1, 8006504 <R3_1_SwitchOffPWM+0x2c>
  {
  }
  else
  {
    if ( ( pHandle->_Super.LowSideOutputs ) == ES_GPIO )
 80064fc:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
 8006500:	2a02      	cmp	r2, #2
 8006502:	d009      	beq.n	8006518 <R3_1_SwitchOffPWM+0x40>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006504:	f06f 0201 	mvn.w	r2, #1
 8006508:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800650a:	691a      	ldr	r2, [r3, #16]
 800650c:	07d2      	lsls	r2, r2, #31
 800650e:	d5fc      	bpl.n	800650a <R3_1_SwitchOffPWM+0x32>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006510:	f06f 0201 	mvn.w	r2, #1
 8006514:	611a      	str	r2, [r3, #16]
 8006516:	4770      	bx	lr
{
 8006518:	b430      	push	{r4, r5}
    {
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 800651a:	f8b0 4048 	ldrh.w	r4, [r0, #72]	; 0x48
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800651e:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 8006520:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8006524:	f8b0 204c 	ldrh.w	r2, [r0, #76]	; 0x4c
 8006528:	0424      	lsls	r4, r4, #16
 800652a:	61ac      	str	r4, [r5, #24]
 800652c:	e9d0 4010 	ldrd	r4, r0, [r0, #64]	; 0x40
 8006530:	0412      	lsls	r2, r2, #16
 8006532:	0409      	lsls	r1, r1, #16
 8006534:	61a1      	str	r1, [r4, #24]
 8006536:	6182      	str	r2, [r0, #24]
 8006538:	f06f 0201 	mvn.w	r2, #1
 800653c:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800653e:	691a      	ldr	r2, [r3, #16]
 8006540:	07d1      	lsls	r1, r2, #31
 8006542:	d5fc      	bpl.n	800653e <R3_1_SwitchOffPWM+0x66>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006544:	f06f 0201 	mvn.w	r2, #1
  while (LL_TIM_IsActiveFlag_UPDATE(TIMx) == 0)
  {}
  LL_TIM_ClearFlag_UPDATE(TIMx);

  return;
}
 8006548:	bc30      	pop	{r4, r5}
 800654a:	611a      	str	r2, [r3, #16]
 800654c:	4770      	bx	lr
 800654e:	bf00      	nop

08006550 <R3_1_RLGetPhaseCurrents>:
  */
void R3_1_RLGetPhaseCurrents(PWMC_Handle_t *pHdl,ab_t* pStator_Currents)
{

  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006550:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
  int32_t wAux;
  
  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);
  
  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t)((ADCx->JDR2)*2u);
 8006554:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
{
 8006558:	b410      	push	{r4}
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 800655a:	e9d2 4000 	ldrd	r4, r0, [r2]
  CLEAR_BIT(TIMx->CCER, Channels);
 800655e:	6a02      	ldr	r2, [r0, #32]
 8006560:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006564:	6202      	str	r2, [r0, #32]
  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t)((ADCx->JDR2)*2u);
 8006566:	6c20      	ldr	r0, [r4, #64]	; 0x40
  
  /* Check saturation */
  if (wAux > -INT16_MAX)
 8006568:	4a0b      	ldr	r2, [pc, #44]	; (8006598 <R3_1_RLGetPhaseCurrents+0x48>)
  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t)((ADCx->JDR2)*2u);
 800656a:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
  if (wAux > -INT16_MAX)
 800656e:	4293      	cmp	r3, r2
 8006570:	db05      	blt.n	800657e <R3_1_RLGetPhaseCurrents+0x2e>
  {
    if (wAux < INT16_MAX)
 8006572:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8006576:	4293      	cmp	r3, r2
 8006578:	dc0b      	bgt.n	8006592 <R3_1_RLGetPhaseCurrents+0x42>
  else
  {
    wAux = -INT16_MAX;
  }
  /* First value read of Phase B*/
  pStator_Currents->a = ( int16_t )( wAux );
 800657a:	b21b      	sxth	r3, r3
 800657c:	e000      	b.n	8006580 <R3_1_RLGetPhaseCurrents+0x30>
 800657e:	4b07      	ldr	r3, [pc, #28]	; (800659c <R3_1_RLGetPhaseCurrents+0x4c>)
  pStator_Currents->b = ( int16_t )( wAux );

}
 8006580:	f85d 4b04 	ldr.w	r4, [sp], #4
  pStator_Currents->a = ( int16_t )( wAux );
 8006584:	2200      	movs	r2, #0
 8006586:	f363 020f 	bfi	r2, r3, #0, #16
 800658a:	f363 421f 	bfi	r2, r3, #16, #16
 800658e:	600a      	str	r2, [r1, #0]
}
 8006590:	4770      	bx	lr
 8006592:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8006596:	e7f3      	b.n	8006580 <R3_1_RLGetPhaseCurrents+0x30>
 8006598:	ffff8002 	.word	0xffff8002
 800659c:	ffff8001 	.word	0xffff8001

080065a0 <R3_1_RLSwitchOnPWM>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  */
void R3_1_RLSwitchOnPWM(PWMC_Handle_t *pHdl)
{
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 80065a0:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
{
 80065a4:	b430      	push	{r4, r5}
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
  
  pHandle->_Super.TurnOnLowSidesAction = false;
 80065a6:	2400      	movs	r4, #0
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 80065a8:	e9d2 1300 	ldrd	r1, r3, [r2]
  pHandle->_Super.TurnOnLowSidesAction = false;
 80065ac:	f880 407e 	strb.w	r4, [r0, #126]	; 0x7e
  /* The following while cycles ensure the identification of the nergative counting mode of TIM1
   * for correct modification of Repetition Counter value of TIM1.*/

  /* Wait the change of Counter Direction of TIM1 from Down-Direction to Up-Direction*/

  while ( ( TIMx->CR1 & DIR_MASK ) == DIR_MASK )
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	06d5      	lsls	r5, r2, #27
 80065b4:	d4fc      	bmi.n	80065b0 <R3_1_RLSwitchOnPWM+0x10>
  {
  }
  /* Wait the change of Counter Direction of TIM1 from Up-Direction to Down-Direction*/
  while ( ( TIMx->CR1 & DIR_MASK ) == 0u )
 80065b6:	681a      	ldr	r2, [r3, #0]
 80065b8:	06d4      	lsls	r4, r2, #27
 80065ba:	d5fc      	bpl.n	80065b6 <R3_1_RLSwitchOnPWM+0x16>
  /* Set channel 1 Compare/Capture register to 1 */
  LL_TIM_OC_SetCompareCH1(TIMx, 1u);

  /* Set channel 4 Compare/Capture register to trig ADC in the middle 
     of the PWM period */
  LL_TIM_OC_SetCompareCH4(TIMx,(( uint32_t )( pHandle->Half_PWMPeriod ) - 5u));
 80065bc:	f8b0 209c 	ldrh.w	r2, [r0, #156]	; 0x9c
  WRITE_REG(TIMx->CCR1, CompareValue);
 80065c0:	2401      	movs	r4, #1
 80065c2:	3a05      	subs	r2, #5
 80065c4:	635c      	str	r4, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR4, CompareValue);
 80065c6:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80065c8:	f06f 0201 	mvn.w	r2, #1
 80065cc:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80065ce:	691a      	ldr	r2, [r3, #16]
 80065d0:	07d2      	lsls	r2, r2, #31
 80065d2:	d5fc      	bpl.n	80065ce <R3_1_RLSwitchOnPWM+0x2e>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80065d4:	f06f 0201 	mvn.w	r2, #1
 80065d8:	611a      	str	r2, [r3, #16]
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
  {}
  LL_TIM_ClearFlag_UPDATE( TIMx );
  
  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 80065da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80065e0:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80065e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80065e8:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs(TIMx);

  if ( ( pHandle->_Super.LowSideOutputs ) == ES_GPIO )
 80065ea:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
 80065ee:	2a02      	cmp	r2, #2
 80065f0:	d00b      	beq.n	800660a <R3_1_RLSwitchOnPWM+0x6a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80065f2:	f06f 0201 	mvn.w	r2, #1
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 80065f6:	f06f 0004 	mvn.w	r0, #4
 80065fa:	6008      	str	r0, [r1, #0]
 80065fc:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80065fe:	68da      	ldr	r2, [r3, #12]
 8006600:	f042 0201 	orr.w	r2, r2, #1

  /* enable TIMx update interrupt*/
  LL_TIM_EnableIT_UPDATE( TIMx );

  return; 
}
 8006604:	bc30      	pop	{r4, r5}
 8006606:	60da      	str	r2, [r3, #12]
 8006608:	4770      	bx	lr
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0u)
 800660a:	6a1c      	ldr	r4, [r3, #32]
 800660c:	f240 5255 	movw	r2, #1365	; 0x555
 8006610:	4214      	tst	r4, r2
 8006612:	d00d      	beq.n	8006630 <R3_1_RLSwitchOnPWM+0x90>
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 8006614:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006616:	f8b0 4048 	ldrh.w	r4, [r0, #72]	; 0x48
  WRITE_REG(GPIOx->BSRR, PinMask);
 800661a:	6194      	str	r4, [r2, #24]
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800661c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800661e:	f8b0 404a 	ldrh.w	r4, [r0, #74]	; 0x4a
 8006622:	6194      	str	r4, [r2, #24]
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8006624:	f8b0 204c 	ldrh.w	r2, [r0, #76]	; 0x4c
 8006628:	6c40      	ldr	r0, [r0, #68]	; 0x44
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800662a:	0412      	lsls	r2, r2, #16
 800662c:	6182      	str	r2, [r0, #24]
}
 800662e:	e7e0      	b.n	80065f2 <R3_1_RLSwitchOnPWM+0x52>
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 8006630:	f8b0 4048 	ldrh.w	r4, [r0, #72]	; 0x48
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8006634:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 8006636:	f8b0 204a 	ldrh.w	r2, [r0, #74]	; 0x4a
 800663a:	0424      	lsls	r4, r4, #16
 800663c:	61ac      	str	r4, [r5, #24]
 800663e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8006640:	0412      	lsls	r2, r2, #16
 8006642:	61a2      	str	r2, [r4, #24]
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8006644:	f8b0 204c 	ldrh.w	r2, [r0, #76]	; 0x4c
 8006648:	6c40      	ldr	r0, [r0, #68]	; 0x44
 800664a:	0412      	lsls	r2, r2, #16
 800664c:	6182      	str	r2, [r0, #24]
}
 800664e:	e7d0      	b.n	80065f2 <R3_1_RLSwitchOnPWM+0x52>

08006650 <R3_1_TurnOnLowSides>:
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8006650:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
 8006654:	685b      	ldr	r3, [r3, #4]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006656:	2200      	movs	r2, #0
  pHandle->_Super.TurnOnLowSidesAction = true;
 8006658:	f04f 0c01 	mov.w	ip, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800665c:	f06f 0101 	mvn.w	r1, #1
 8006660:	f880 c07e 	strb.w	ip, [r0, #126]	; 0x7e
 8006664:	6119      	str	r1, [r3, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006666:	635a      	str	r2, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006668:	639a      	str	r2, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800666a:	63da      	str	r2, [r3, #60]	; 0x3c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800666c:	691a      	ldr	r2, [r3, #16]
 800666e:	07d2      	lsls	r2, r2, #31
 8006670:	d5fc      	bpl.n	800666c <R3_1_TurnOnLowSides+0x1c>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006672:	f06f 0201 	mvn.w	r2, #1
 8006676:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8006678:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800667a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800667e:	645a      	str	r2, [r3, #68]	; 0x44
  if ((pHandle->_Super.LowSideOutputs)== ES_GPIO)
 8006680:	f890 307d 	ldrb.w	r3, [r0, #125]	; 0x7d
 8006684:	2b02      	cmp	r3, #2
 8006686:	d000      	beq.n	800668a <R3_1_TurnOnLowSides+0x3a>
 8006688:	4770      	bx	lr
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800668a:	e9d0 210f 	ldrd	r2, r1, [r0, #60]	; 0x3c
{
 800668e:	b410      	push	{r4}
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8006690:	6c43      	ldr	r3, [r0, #68]	; 0x44
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 8006692:	f8b0 4048 	ldrh.w	r4, [r0, #72]	; 0x48
  WRITE_REG(GPIOx->BSRR, PinMask);
 8006696:	6194      	str	r4, [r2, #24]
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 8006698:	f8b0 404a 	ldrh.w	r4, [r0, #74]	; 0x4a
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800669c:	f8b0 204c 	ldrh.w	r2, [r0, #76]	; 0x4c
 80066a0:	618c      	str	r4, [r1, #24]
}
 80066a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80066a6:	619a      	str	r2, [r3, #24]
 80066a8:	4770      	bx	lr
 80066aa:	bf00      	nop

080066ac <R3_1_RLTurnOnLowSides>:
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 80066ac:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
 80066b0:	685b      	ldr	r3, [r3, #4]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80066b2:	2100      	movs	r1, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80066b4:	f06f 0201 	mvn.w	r2, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 80066b8:	6359      	str	r1, [r3, #52]	; 0x34
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80066ba:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80066bc:	691a      	ldr	r2, [r3, #16]
 80066be:	07d2      	lsls	r2, r2, #31
 80066c0:	d5fc      	bpl.n	80066bc <R3_1_RLTurnOnLowSides+0x10>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80066c2:	f06f 0201 	mvn.w	r2, #1
 80066c6:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80066c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80066ce:	645a      	str	r2, [r3, #68]	; 0x44
  if ( ( pHandle->_Super.LowSideOutputs ) == ES_GPIO )
 80066d0:	f890 307d 	ldrb.w	r3, [r0, #125]	; 0x7d
 80066d4:	2b02      	cmp	r3, #2
 80066d6:	d000      	beq.n	80066da <R3_1_RLTurnOnLowSides+0x2e>
 80066d8:	4770      	bx	lr
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 80066da:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 80066dc:	f8b0 204a 	ldrh.w	r2, [r0, #74]	; 0x4a
    LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 80066e0:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
{  
 80066e4:	b410      	push	{r4}
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 80066e6:	f8b0 4048 	ldrh.w	r4, [r0, #72]	; 0x48
 80066ea:	618c      	str	r4, [r1, #24]
    LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 80066ec:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	; 0x40
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80066f0:	0412      	lsls	r2, r2, #16
 80066f2:	041b      	lsls	r3, r3, #16
 80066f4:	61a2      	str	r2, [r4, #24]
}
 80066f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80066fa:	618b      	str	r3, [r1, #24]
 80066fc:	4770      	bx	lr
 80066fe:	bf00      	nop

08006700 <R3_1_Init>:
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8006700:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
  ADC_TypeDef* ADCx  = pHandle->pParams_str->ADCx;
 8006704:	6813      	ldr	r3, [r2, #0]
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8006706:	6852      	ldr	r2, [r2, #4]
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 8006708:	6859      	ldr	r1, [r3, #4]
{
 800670a:	b430      	push	{r4, r5}
 800670c:	f021 0120 	bic.w	r1, r1, #32
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 8006710:	f06f 0402 	mvn.w	r4, #2
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 8006714:	6059      	str	r1, [r3, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 8006716:	601c      	str	r4, [r3, #0]
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8006718:	6859      	ldr	r1, [r3, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 800671a:	f06f 0404 	mvn.w	r4, #4
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 800671e:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006722:	6059      	str	r1, [r3, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8006724:	601c      	str	r4, [r3, #0]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8006726:	6811      	ldr	r1, [r2, #0]
    if ( TIMx == TIM1 )
 8006728:	4c1e      	ldr	r4, [pc, #120]	; (80067a4 <R3_1_Init+0xa4>)
 800672a:	f021 0101 	bic.w	r1, r1, #1
 800672e:	42a2      	cmp	r2, r4
 8006730:	6011      	str	r1, [r2, #0]
 8006732:	d031      	beq.n	8006798 <R3_1_Init+0x98>
    else if ( TIMx == TIM8 )
 8006734:	491c      	ldr	r1, [pc, #112]	; (80067a8 <R3_1_Init+0xa8>)
 8006736:	428a      	cmp	r2, r1
 8006738:	d028      	beq.n	800678c <R3_1_Init+0x8c>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 800673a:	f06f 0180 	mvn.w	r1, #128	; 0x80
 800673e:	6111      	str	r1, [r2, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 8006740:	68d1      	ldr	r1, [r2, #12]
 8006742:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8006746:	60d1      	str	r1, [r2, #12]
  SET_BIT(TIMx->CCER, Channels);
 8006748:	6a11      	ldr	r1, [r2, #32]
 800674a:	f441 61aa 	orr.w	r1, r1, #1360	; 0x550
 800674e:	f041 0105 	orr.w	r1, r1, #5
 8006752:	6211      	str	r1, [r2, #32]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8006754:	689a      	ldr	r2, [r3, #8]
 8006756:	f042 0201 	orr.w	r2, r2, #1
 800675a:	609a      	str	r2, [r3, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 800675c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 800675e:	f06f 0504 	mvn.w	r5, #4
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8006762:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006766:	62da      	str	r2, [r3, #44]	; 0x2c
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8006768:	601d      	str	r5, [r3, #0]
  SET_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 800676a:	685a      	ldr	r2, [r3, #4]
 800676c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006770:	605a      	str	r2, [r3, #4]
  MODIFY_REG(ADCx->JSQR, ADC_JSQR_JL, SequencerNbRanks);
 8006772:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 8006774:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
    pHandle->_Super.DTTest = 0u;
 8006778:	2100      	movs	r1, #0
 800677a:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
    pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 800677e:	f8c0 4098 	str.w	r4, [r0, #152]	; 0x98
 8006782:	639a      	str	r2, [r3, #56]	; 0x38
}
 8006784:	bc30      	pop	{r4, r5}
    pHandle->_Super.DTTest = 0u;
 8006786:	f8a0 1070 	strh.w	r1, [r0, #112]	; 0x70
}
 800678a:	4770      	bx	lr
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 800678c:	4c07      	ldr	r4, [pc, #28]	; (80067ac <R3_1_Init+0xac>)
 800678e:	68e1      	ldr	r1, [r4, #12]
 8006790:	f041 0102 	orr.w	r1, r1, #2
 8006794:	60e1      	str	r1, [r4, #12]
}
 8006796:	e7d0      	b.n	800673a <R3_1_Init+0x3a>
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 8006798:	4c04      	ldr	r4, [pc, #16]	; (80067ac <R3_1_Init+0xac>)
 800679a:	68e1      	ldr	r1, [r4, #12]
 800679c:	f041 0101 	orr.w	r1, r1, #1
 80067a0:	60e1      	str	r1, [r4, #12]
}
 80067a2:	e7ca      	b.n	800673a <R3_1_Init+0x3a>
 80067a4:	40010000 	.word	0x40010000
 80067a8:	40010400 	.word	0x40010400
 80067ac:	e0042000 	.word	0xe0042000

080067b0 <R3_1_SetOffsetCalib>:
{
 80067b0:	b410      	push	{r4}
  pHandle->PhaseAOffset = offsets->phaseAOffset;
 80067b2:	e9d1 4201 	ldrd	r4, r2, [r1, #4]
 80067b6:	680b      	ldr	r3, [r1, #0]
 80067b8:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  pHdl->offsetCalibStatus = true;
 80067bc:	2301      	movs	r3, #1
  pHandle->PhaseAOffset = offsets->phaseAOffset;
 80067be:	e9c0 4223 	strd	r4, r2, [r0, #140]	; 0x8c
  pHdl->offsetCalibStatus = true;
 80067c2:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
}
 80067c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80067ca:	4770      	bx	lr

080067cc <R3_1_GetOffsetCalib>:
  offsets->phaseAOffset = pHandle->PhaseAOffset;
 80067cc:	e9d0 2323 	ldrd	r2, r3, [r0, #140]	; 0x8c
 80067d0:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
 80067d4:	608b      	str	r3, [r1, #8]
 80067d6:	e9c1 0200 	strd	r0, r2, [r1]
}
 80067da:	4770      	bx	lr

080067dc <R3_1_CurrentReadingCalibration>:
{
 80067dc:	b570      	push	{r4, r5, r6, lr}
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 80067de:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
  if (false == pHandle->_Super.offsetCalibStatus)
 80067e2:	f890 6081 	ldrb.w	r6, [r0, #129]	; 0x81
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 80067e6:	685c      	ldr	r4, [r3, #4]
{
 80067e8:	b084      	sub	sp, #16
 80067ea:	4605      	mov	r5, r0
  if (false == pHandle->_Super.offsetCalibStatus)
 80067ec:	b356      	cbz	r6, 8006844 <R3_1_CurrentReadingCalibration+0x68>
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80067ee:	69a2      	ldr	r2, [r4, #24]
  LL_TIM_OC_SetCompareCH1 (TIMx,pHandle->Half_PWMPeriod);
 80067f0:	f8b5 309c 	ldrh.w	r3, [r5, #156]	; 0x9c
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80067f4:	f022 0208 	bic.w	r2, r2, #8
 80067f8:	61a2      	str	r2, [r4, #24]
 80067fa:	69a2      	ldr	r2, [r4, #24]
 80067fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006800:	61a2      	str	r2, [r4, #24]
 8006802:	69e2      	ldr	r2, [r4, #28]
 8006804:	f022 0208 	bic.w	r2, r2, #8
 8006808:	61e2      	str	r2, [r4, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800680a:	6363      	str	r3, [r4, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800680c:	63a3      	str	r3, [r4, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800680e:	63e3      	str	r3, [r4, #60]	; 0x3c
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8006810:	69a3      	ldr	r3, [r4, #24]
 8006812:	f043 0308 	orr.w	r3, r3, #8
 8006816:	61a3      	str	r3, [r4, #24]
 8006818:	69a3      	ldr	r3, [r4, #24]
 800681a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800681e:	61a3      	str	r3, [r4, #24]
 8006820:	69e3      	ldr	r3, [r4, #28]
 8006822:	f043 0308 	orr.w	r3, r3, #8
 8006826:	61e3      	str	r3, [r4, #28]
  SET_BIT(TIMx->CCER, Channels);
 8006828:	6a23      	ldr	r3, [r4, #32]
 800682a:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
  pHandle->_Super.Sector = SECTOR_5;
 800682e:	2104      	movs	r1, #4
  pHandle->_Super.BrakeActionLock = false;
 8006830:	2200      	movs	r2, #0
 8006832:	f043 0305 	orr.w	r3, r3, #5
 8006836:	6223      	str	r3, [r4, #32]
  pHandle->_Super.Sector = SECTOR_5;
 8006838:	f885 107c 	strb.w	r1, [r5, #124]	; 0x7c
  pHandle->_Super.BrakeActionLock = false;
 800683c:	f885 2085 	strb.w	r2, [r5, #133]	; 0x85
}
 8006840:	b004      	add	sp, #16
 8006842:	bd70      	pop	{r4, r5, r6, pc}
    GetPhaseCurrCbSave = pHandle->_Super.pFctGetPhaseCurrents;
 8006844:	6803      	ldr	r3, [r0, #0]
 8006846:	9302      	str	r3, [sp, #8]
    SetSampPointSectXCbSave = pHandle->_Super.pFctSetADCSampPointSectX;
 8006848:	6943      	ldr	r3, [r0, #20]
 800684a:	9303      	str	r3, [sp, #12]
    pHandle->PolarizationCounter = 0u;
 800684c:	f880 609f 	strb.w	r6, [r0, #159]	; 0x9f
  CLEAR_BIT(TIMx->CCER, Channels);
 8006850:	6a23      	ldr	r3, [r4, #32]
    pHandle->PhaseAOffset = 0u;
 8006852:	f8c0 6088 	str.w	r6, [r0, #136]	; 0x88
 8006856:	f423 63aa 	bic.w	r3, r3, #1360	; 0x550
 800685a:	f023 0305 	bic.w	r3, r3, #5
    pHandle->PhaseCOffset = 0u;
 800685e:	e9c0 6623 	strd	r6, r6, [r0, #140]	; 0x8c
 8006862:	6223      	str	r3, [r4, #32]
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsCalibrationAB;
 8006864:	4b23      	ldr	r3, [pc, #140]	; (80068f4 <R3_1_CurrentReadingCalibration+0x118>)
 8006866:	6003      	str	r3, [r0, #0]
    pHandle->_Super.pFctSetADCSampPointSectX = &R3_1_SetADCSampPointCalibration;
 8006868:	4b23      	ldr	r3, [pc, #140]	; (80068f8 <R3_1_CurrentReadingCalibration+0x11c>)
 800686a:	6143      	str	r3, [r0, #20]
    pHandle->CalibSector = SECTOR_5;
 800686c:	2304      	movs	r3, #4
 800686e:	f880 309e 	strb.w	r3, [r0, #158]	; 0x9e
    pHandle->_Super.Sector = SECTOR_5;
 8006872:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    R3_1_SwitchOnPWM( &pHandle->_Super );
 8006876:	f7ff fddf 	bl	8006438 <R3_1_SwitchOnPWM>
                            pHandle->pParams_str->RepetitionCounter,
 800687a:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
    waitForPolarizationEnd( TIMx,
 800687e:	f105 0156 	add.w	r1, r5, #86	; 0x56
 8006882:	f105 039f 	add.w	r3, r5, #159	; 0x9f
 8006886:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
 800688a:	4620      	mov	r0, r4
 800688c:	e9cd 1300 	strd	r1, r3, [sp]
 8006890:	f7ff fcb8 	bl	8006204 <waitForPolarizationEnd>
    R3_1_SwitchOffPWM( &pHandle->_Super );
 8006894:	4628      	mov	r0, r5
 8006896:	f7ff fe1f 	bl	80064d8 <R3_1_SwitchOffPWM>
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsCalibrationC;
 800689a:	4a18      	ldr	r2, [pc, #96]	; (80068fc <R3_1_CurrentReadingCalibration+0x120>)
 800689c:	602a      	str	r2, [r5, #0]
    R3_1_SwitchOnPWM( &pHandle->_Super );
 800689e:	4628      	mov	r0, r5
    pHandle->PolarizationCounter = 0u;
 80068a0:	f885 609f 	strb.w	r6, [r5, #159]	; 0x9f
    pHandle->CalibSector = SECTOR_1;
 80068a4:	f885 609e 	strb.w	r6, [r5, #158]	; 0x9e
    pHandle->_Super.Sector = SECTOR_1;
 80068a8:	f885 607c 	strb.w	r6, [r5, #124]	; 0x7c
    R3_1_SwitchOnPWM( &pHandle->_Super );
 80068ac:	f7ff fdc4 	bl	8006438 <R3_1_SwitchOnPWM>
                            pHandle->pParams_str->RepetitionCounter,
 80068b0:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
    waitForPolarizationEnd( TIMx,
 80068b4:	9b01      	ldr	r3, [sp, #4]
 80068b6:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
 80068ba:	9900      	ldr	r1, [sp, #0]
 80068bc:	4620      	mov	r0, r4
 80068be:	f7ff fca1 	bl	8006204 <waitForPolarizationEnd>
    R3_1_SwitchOffPWM( &pHandle->_Super );
 80068c2:	4628      	mov	r0, r5
 80068c4:	f7ff fe08 	bl	80064d8 <R3_1_SwitchOffPWM>
    pHandle->PhaseBOffset >>= 3;
 80068c8:	e9d5 1222 	ldrd	r1, r2, [r5, #136]	; 0x88
    pHandle->PhaseCOffset >>= 3;
 80068cc:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
    pHandle->PhaseBOffset >>= 3;
 80068d0:	08d2      	lsrs	r2, r2, #3
    pHandle->PhaseAOffset >>= 3;
 80068d2:	08c9      	lsrs	r1, r1, #3
    pHandle->PhaseBOffset >>= 3;
 80068d4:	e9c5 1222 	strd	r1, r2, [r5, #136]	; 0x88
    if (0U == pHandle->_Super.SWerror)
 80068d8:	f8b5 2056 	ldrh.w	r2, [r5, #86]	; 0x56
    pHandle->PhaseCOffset >>= 3;
 80068dc:	08db      	lsrs	r3, r3, #3
 80068de:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
    if (0U == pHandle->_Super.SWerror)
 80068e2:	b912      	cbnz	r2, 80068ea <R3_1_CurrentReadingCalibration+0x10e>
      pHandle->_Super.offsetCalibStatus = true;
 80068e4:	2301      	movs	r3, #1
 80068e6:	f885 3081 	strb.w	r3, [r5, #129]	; 0x81
    pHandle->_Super.pFctGetPhaseCurrents = GetPhaseCurrCbSave;
 80068ea:	9a02      	ldr	r2, [sp, #8]
    pHandle->_Super.pFctSetADCSampPointSectX = SetSampPointSectXCbSave;
 80068ec:	9b03      	ldr	r3, [sp, #12]
    pHandle->_Super.pFctGetPhaseCurrents = GetPhaseCurrCbSave;
 80068ee:	602a      	str	r2, [r5, #0]
    pHandle->_Super.pFctSetADCSampPointSectX = SetSampPointSectXCbSave;
 80068f0:	616b      	str	r3, [r5, #20]
 80068f2:	e77c      	b.n	80067ee <R3_1_CurrentReadingCalibration+0x12>
 80068f4:	080063b9 	.word	0x080063b9
 80068f8:	08006939 	.word	0x08006939
 80068fc:	080063fd 	.word	0x080063fd

08006900 <R3_1_WriteTIMRegisters>:
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8006900:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
  LL_TIM_OC_SetCompareCH2 (TIMx,pHandle->_Super.CntPhB);
 8006904:	f8b0 2052 	ldrh.w	r2, [r0, #82]	; 0x52
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8006908:	685b      	ldr	r3, [r3, #4]
{
 800690a:	b410      	push	{r4}
  LL_TIM_OC_SetCompareCH1 (TIMx,pHandle->_Super.CntPhA);
 800690c:	f8b0 4050 	ldrh.w	r4, [r0, #80]	; 0x50
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006910:	635c      	str	r4, [r3, #52]	; 0x34
  LL_TIM_OC_SetCompareCH3 (TIMx,pHandle->_Super.CntPhC);
 8006912:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006916:	639a      	str	r2, [r3, #56]	; 0x38
  if ( pHandle->_Super.SWerror == 1u )
 8006918:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
  WRITE_REG(TIMx->CCR3, CompareValue);
 800691c:	63dc      	str	r4, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 800691e:	6419      	str	r1, [r3, #64]	; 0x40
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 8006920:	6a1b      	ldr	r3, [r3, #32]
}
 8006922:	f85d 4b04 	ldr.w	r4, [sp], #4
  if ( pHandle->_Super.SWerror == 1u )
 8006926:	2a01      	cmp	r2, #1
    hAux = MC_DURATION;
 8006928:	bf12      	itee	ne
 800692a:	f3c3 3200 	ubfxne	r2, r3, #12, #1
    pHandle->_Super.SWerror = 0u;
 800692e:	2300      	moveq	r3, #0
 8006930:	f8a0 3056 	strheq.w	r3, [r0, #86]	; 0x56
}
 8006934:	4610      	mov	r0, r2
 8006936:	4770      	bx	lr

08006938 <R3_1_SetADCSampPointCalibration>:
{
 8006938:	b510      	push	{r4, lr}
  return R3_1_WriteTIMRegisters(&pHandle->_Super, (uint16_t)(pHandle->Half_PWMPeriod) - 1u);
 800693a:	f8b0 109c 	ldrh.w	r1, [r0, #156]	; 0x9c
  pHandle->_Super.Sector = pHandle->CalibSector;
 800693e:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
 8006942:	f880 207c 	strb.w	r2, [r0, #124]	; 0x7c
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 8006946:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
  return R3_1_WriteTIMRegisters(&pHandle->_Super, (uint16_t)(pHandle->Half_PWMPeriod) - 1u);
 800694a:	3901      	subs	r1, #1
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 800694c:	f8c0 4098 	str.w	r4, [r0, #152]	; 0x98
  return R3_1_WriteTIMRegisters(&pHandle->_Super, (uint16_t)(pHandle->Half_PWMPeriod) - 1u);
 8006950:	b289      	uxth	r1, r1
 8006952:	f7ff ffd5 	bl	8006900 <R3_1_WriteTIMRegisters>
}
 8006956:	bd10      	pop	{r4, pc}

08006958 <R3_1_SetADCSampPointSectX>:
{
 8006958:	b510      	push	{r4, lr}
  register uint16_t lowDuty = pHdl->lowDuty;
 800695a:	f8b0 2058 	ldrh.w	r2, [r0, #88]	; 0x58
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) > pHandle->pParams_str->hTafter )
 800695e:	f8b0 e09c 	ldrh.w	lr, [r0, #156]	; 0x9c
 8006962:	f8d0 40a0 	ldr.w	r4, [r0, #160]	; 0xa0
  register uint16_t midDuty = pHdl->midDuty;
 8006966:	f8b0 c05a 	ldrh.w	ip, [r0, #90]	; 0x5a
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) > pHandle->pParams_str->hTafter )
 800696a:	8c21      	ldrh	r1, [r4, #32]
 800696c:	ebae 0302 	sub.w	r3, lr, r2
 8006970:	b29b      	uxth	r3, r3
 8006972:	428b      	cmp	r3, r1
 8006974:	d908      	bls.n	8006988 <R3_1_SetADCSampPointSectX+0x30>
    pHandle->_Super.Sector = SECTOR_5;
 8006976:	2304      	movs	r3, #4
    hCntSmp = ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u;
 8006978:	f10e 31ff 	add.w	r1, lr, #4294967295
    pHandle->_Super.Sector = SECTOR_5;
 800697c:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    hCntSmp = ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u;
 8006980:	b289      	uxth	r1, r1
  return R3_1_WriteTIMRegisters( &pHandle->_Super, hCntSmp);
 8006982:	f7ff ffbd 	bl	8006900 <R3_1_WriteTIMRegisters>
}
 8006986:	bd10      	pop	{r4, pc}
    hDeltaDuty = ( uint16_t )( lowDuty - midDuty );
 8006988:	eba2 0c0c 	sub.w	ip, r2, ip
    if ( hDeltaDuty > ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) * 2u )
 800698c:	fa1f fc8c 	uxth.w	ip, ip
 8006990:	ebbc 0f43 	cmp.w	ip, r3, lsl #1
 8006994:	d905      	bls.n	80069a2 <R3_1_SetADCSampPointSectX+0x4a>
      hCntSmp = lowDuty - pHandle->pParams_str->hTbefore;
 8006996:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8006998:	1ad2      	subs	r2, r2, r3
 800699a:	b291      	uxth	r1, r2
  return R3_1_WriteTIMRegisters( &pHandle->_Super, hCntSmp);
 800699c:	f7ff ffb0 	bl	8006900 <R3_1_WriteTIMRegisters>
}
 80069a0:	bd10      	pop	{r4, pc}
      hCntSmp = lowDuty + pHandle->pParams_str->hTafter;
 80069a2:	4411      	add	r1, r2
 80069a4:	b289      	uxth	r1, r1
      if ( hCntSmp >= pHandle->Half_PWMPeriod )
 80069a6:	458e      	cmp	lr, r1
 80069a8:	d8eb      	bhi.n	8006982 <R3_1_SetADCSampPointSectX+0x2a>
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 80069aa:	43c9      	mvns	r1, r1
        pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_FALLING;
 80069ac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 80069b0:	eb01 014e 	add.w	r1, r1, lr, lsl #1
        pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_FALLING;
 80069b4:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 80069b8:	b289      	uxth	r1, r1
  return R3_1_WriteTIMRegisters( &pHandle->_Super, hCntSmp);
 80069ba:	f7ff ffa1 	bl	8006900 <R3_1_WriteTIMRegisters>
}
 80069be:	bd10      	pop	{r4, pc}

080069c0 <R3_1_TIMx_UP_IRQHandler>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80069c0:	f8d0 10a0 	ldr.w	r1, [r0, #160]	; 0xa0
{
 80069c4:	b410      	push	{r4}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80069c6:	e9d1 2400 	ldrd	r2, r4, [r1]
{
 80069ca:	4603      	mov	r3, r0
  CLEAR_BIT(ADCx->CR2, ADC_CR2_JEXTEN);
 80069cc:	6890      	ldr	r0, [r2, #8]
 80069ce:	f420 1040 	bic.w	r0, r0, #3145728	; 0x300000
 80069d2:	6090      	str	r0, [r2, #8]
  ADCx->JSQR = pHandle->pParams_str->ADCConfig[pHandle->_Super.Sector];
 80069d4:	f893 007c 	ldrb.w	r0, [r3, #124]	; 0x7c
 80069d8:	3002      	adds	r0, #2
 80069da:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80069de:	6391      	str	r1, [r2, #56]	; 0x38
  SET_BIT(TIMx->CCER, Channels);
 80069e0:	6a21      	ldr	r1, [r4, #32]
  SET_BIT(ADCx->CR2, ExternalTriggerEdge);
 80069e2:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 80069e6:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 80069ea:	6221      	str	r1, [r4, #32]
 80069ec:	6891      	ldr	r1, [r2, #8]
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 80069ee:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
 80069f2:	4301      	orrs	r1, r0
 80069f4:	6091      	str	r1, [r2, #8]
}
 80069f6:	f103 007a 	add.w	r0, r3, #122	; 0x7a
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 80069fa:	f8c3 4098 	str.w	r4, [r3, #152]	; 0x98
}
 80069fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a02:	4770      	bx	lr

08006a04 <R3_1_RLDetectionModeEnable>:
  if (pHandle->_Super.RLDetectionMode == false)
 8006a04:	f890 1080 	ldrb.w	r1, [r0, #128]	; 0x80
{
 8006a08:	b410      	push	{r4}
  if (pHandle->_Super.RLDetectionMode == false)
 8006a0a:	2900      	cmp	r1, #0
 8006a0c:	d135      	bne.n	8006a7a <R3_1_RLDetectionModeEnable+0x76>
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8006a0e:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
 8006a12:	685b      	ldr	r3, [r3, #4]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8006a14:	699a      	ldr	r2, [r3, #24]
 8006a16:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8006a1a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8006a1e:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8006a20:	6a1a      	ldr	r2, [r3, #32]
 8006a22:	f042 0201 	orr.w	r2, r2, #1
 8006a26:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8006a28:	6a1a      	ldr	r2, [r3, #32]
 8006a2a:	f022 0204 	bic.w	r2, r2, #4
 8006a2e:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006a30:	6359      	str	r1, [r3, #52]	; 0x34
    if ((pHandle->_Super.LowSideOutputs)== LS_PWM_TIMER)
 8006a32:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
 8006a36:	2a01      	cmp	r2, #1
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8006a38:	f103 0418 	add.w	r4, r3, #24
 8006a3c:	d02b      	beq.n	8006a96 <R3_1_RLDetectionModeEnable+0x92>
    else if ((pHandle->_Super.LowSideOutputs)== ES_GPIO)
 8006a3e:	2a02      	cmp	r2, #2
 8006a40:	d10d      	bne.n	8006a5e <R3_1_RLDetectionModeEnable+0x5a>
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8006a42:	699a      	ldr	r2, [r3, #24]
 8006a44:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8006a48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a4c:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8006a4e:	6a1a      	ldr	r2, [r3, #32]
 8006a50:	f042 0210 	orr.w	r2, r2, #16
 8006a54:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8006a56:	6a1a      	ldr	r2, [r3, #32]
 8006a58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a5c:	621a      	str	r2, [r3, #32]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8006a5e:	6862      	ldr	r2, [r4, #4]
 8006a60:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8006a64:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 8006a68:	6062      	str	r2, [r4, #4]
  CLEAR_BIT(TIMx->CCER, Channels);
 8006a6a:	6a1a      	ldr	r2, [r3, #32]
 8006a6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a70:	621a      	str	r2, [r3, #32]
 8006a72:	6a1a      	ldr	r2, [r3, #32]
 8006a74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a78:	621a      	str	r2, [r3, #32]
  pHandle->_Super.pFctTurnOnLowSides = &R3_1_RLTurnOnLowSides;
 8006a7a:	4b0e      	ldr	r3, [pc, #56]	; (8006ab4 <R3_1_RLDetectionModeEnable+0xb0>)
  pHandle->_Super.pFctSwitchOnPwm = &R3_1_RLSwitchOnPWM;
 8006a7c:	490e      	ldr	r1, [pc, #56]	; (8006ab8 <R3_1_RLDetectionModeEnable+0xb4>)
  pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 8006a7e:	4a0f      	ldr	r2, [pc, #60]	; (8006abc <R3_1_RLDetectionModeEnable+0xb8>)
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_RLGetPhaseCurrents;
 8006a80:	4c0f      	ldr	r4, [pc, #60]	; (8006ac0 <R3_1_RLDetectionModeEnable+0xbc>)
  pHandle->_Super.pFctTurnOnLowSides = &R3_1_RLTurnOnLowSides;
 8006a82:	6103      	str	r3, [r0, #16]
  pHandle->_Super.RLDetectionMode = true;
 8006a84:	2301      	movs	r3, #1
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_RLGetPhaseCurrents;
 8006a86:	6004      	str	r4, [r0, #0]
  pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 8006a88:	e9c0 2101 	strd	r2, r1, [r0, #4]
}
 8006a8c:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->_Super.RLDetectionMode = true;
 8006a90:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
}
 8006a94:	4770      	bx	lr
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8006a96:	699a      	ldr	r2, [r3, #24]
 8006a98:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8006a9c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006aa0:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(TIMx->CCER, Channels);
 8006aa2:	6a1a      	ldr	r2, [r3, #32]
 8006aa4:	f022 0210 	bic.w	r2, r2, #16
 8006aa8:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CCER, Channels);
 8006aaa:	6a1a      	ldr	r2, [r3, #32]
 8006aac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ab0:	621a      	str	r2, [r3, #32]
}
 8006ab2:	e7d4      	b.n	8006a5e <R3_1_RLDetectionModeEnable+0x5a>
 8006ab4:	080066ad 	.word	0x080066ad
 8006ab8:	080065a1 	.word	0x080065a1
 8006abc:	080064d9 	.word	0x080064d9
 8006ac0:	08006551 	.word	0x08006551

08006ac4 <R3_1_RLDetectionModeDisable>:
  if (pHandle->_Super.RLDetectionMode == true)
 8006ac4:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d049      	beq.n	8006b60 <R3_1_RLDetectionModeDisable+0x9c>
{
 8006acc:	b410      	push	{r4}
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8006ace:	f8d0 10a0 	ldr.w	r1, [r0, #160]	; 0xa0
 8006ad2:	684b      	ldr	r3, [r1, #4]
    while ((TIMx->CR1 & DIR_MASK) == 0u)
 8006ad4:	681a      	ldr	r2, [r3, #0]
 8006ad6:	06d4      	lsls	r4, r2, #27
 8006ad8:	d5fc      	bpl.n	8006ad4 <R3_1_RLDetectionModeDisable+0x10>
    while ((TIMx->CR1 & DIR_MASK) == DIR_MASK)
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	06d2      	lsls	r2, r2, #27
 8006ade:	d4fc      	bmi.n	8006ada <R3_1_RLDetectionModeDisable+0x16>
    TIMx->RCR = pHandle->pParams_str->RepetitionCounter;
 8006ae0:	f891 202a 	ldrb.w	r2, [r1, #42]	; 0x2a
 8006ae4:	631a      	str	r2, [r3, #48]	; 0x30
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8006ae6:	699a      	ldr	r2, [r3, #24]
 8006ae8:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8006aec:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8006af0:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8006af2:	6a1a      	ldr	r2, [r3, #32]
 8006af4:	f042 0201 	orr.w	r2, r2, #1
 8006af8:	621a      	str	r2, [r3, #32]
    if ((pHandle->_Super.LowSideOutputs)== LS_PWM_TIMER)
 8006afa:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
 8006afe:	2a01      	cmp	r2, #1
 8006b00:	d02f      	beq.n	8006b62 <R3_1_RLDetectionModeDisable+0x9e>
    else if ((pHandle->_Super.LowSideOutputs)== ES_GPIO)
 8006b02:	2a02      	cmp	r2, #2
 8006b04:	d053      	beq.n	8006bae <R3_1_RLDetectionModeDisable+0xea>
    LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod) >> 1);
 8006b06:	f8b0 209c 	ldrh.w	r2, [r0, #156]	; 0x9c
 8006b0a:	0852      	lsrs	r2, r2, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006b0c:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8006b0e:	699c      	ldr	r4, [r3, #24]
 8006b10:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
 8006b14:	f444 44c0 	orr.w	r4, r4, #24576	; 0x6000
 8006b18:	619c      	str	r4, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8006b1a:	6a1c      	ldr	r4, [r3, #32]
 8006b1c:	f044 0410 	orr.w	r4, r4, #16
 8006b20:	621c      	str	r4, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006b22:	639a      	str	r2, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8006b24:	69dc      	ldr	r4, [r3, #28]
 8006b26:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 8006b2a:	f044 0460 	orr.w	r4, r4, #96	; 0x60
 8006b2e:	61dc      	str	r4, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8006b30:	6a1c      	ldr	r4, [r3, #32]
 8006b32:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 8006b36:	621c      	str	r4, [r3, #32]
    LL_ADC_INJ_SetSequencerDiscont(pHandle->pParams_str->ADCx,
 8006b38:	6809      	ldr	r1, [r1, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8006b3a:	63da      	str	r2, [r3, #60]	; 0x3c
  MODIFY_REG(ADCx->CR1, ADC_CR1_JDISCEN, SeqDiscont);
 8006b3c:	684b      	ldr	r3, [r1, #4]
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_GetPhaseCurrents;
 8006b3e:	4a2f      	ldr	r2, [pc, #188]	; (8006bfc <R3_1_RLDetectionModeDisable+0x138>)
    pHandle->_Super.pFctTurnOnLowSides = &R3_1_TurnOnLowSides;
 8006b40:	4c2f      	ldr	r4, [pc, #188]	; (8006c00 <R3_1_RLDetectionModeDisable+0x13c>)
 8006b42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b46:	604b      	str	r3, [r1, #4]
    pHandle->_Super.pFctSwitchOnPwm = &R3_1_SwitchOnPWM;
 8006b48:	492e      	ldr	r1, [pc, #184]	; (8006c04 <R3_1_RLDetectionModeDisable+0x140>)
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_GetPhaseCurrents;
 8006b4a:	6002      	str	r2, [r0, #0]
    pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 8006b4c:	4a2e      	ldr	r2, [pc, #184]	; (8006c08 <R3_1_RLDetectionModeDisable+0x144>)
    pHandle->_Super.pFctTurnOnLowSides = &R3_1_TurnOnLowSides;
 8006b4e:	6104      	str	r4, [r0, #16]
    pHandle->_Super.RLDetectionMode = false;
 8006b50:	2300      	movs	r3, #0
    pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 8006b52:	e9c0 2101 	strd	r2, r1, [r0, #4]
}
 8006b56:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->_Super.RLDetectionMode = false;
 8006b5a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
}
 8006b5e:	4770      	bx	lr
 8006b60:	4770      	bx	lr
  SET_BIT(TIMx->CCER, Channels);
 8006b62:	6a1c      	ldr	r4, [r3, #32]
    LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod) >> 1);
 8006b64:	f8b0 209c 	ldrh.w	r2, [r0, #156]	; 0x9c
 8006b68:	f044 0404 	orr.w	r4, r4, #4
 8006b6c:	0852      	lsrs	r2, r2, #1
 8006b6e:	621c      	str	r4, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006b70:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8006b72:	699c      	ldr	r4, [r3, #24]
 8006b74:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
 8006b78:	f444 44c0 	orr.w	r4, r4, #24576	; 0x6000
 8006b7c:	619c      	str	r4, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8006b7e:	6a1c      	ldr	r4, [r3, #32]
 8006b80:	f044 0410 	orr.w	r4, r4, #16
 8006b84:	621c      	str	r4, [r3, #32]
 8006b86:	6a1c      	ldr	r4, [r3, #32]
 8006b88:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 8006b8c:	621c      	str	r4, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006b8e:	639a      	str	r2, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8006b90:	69dc      	ldr	r4, [r3, #28]
 8006b92:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 8006b96:	f044 0460 	orr.w	r4, r4, #96	; 0x60
 8006b9a:	61dc      	str	r4, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8006b9c:	6a1c      	ldr	r4, [r3, #32]
 8006b9e:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 8006ba2:	621c      	str	r4, [r3, #32]
 8006ba4:	6a1c      	ldr	r4, [r3, #32]
 8006ba6:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 8006baa:	621c      	str	r4, [r3, #32]
}
 8006bac:	e7c4      	b.n	8006b38 <R3_1_RLDetectionModeDisable+0x74>
  CLEAR_BIT(TIMx->CCER, Channels);
 8006bae:	6a1c      	ldr	r4, [r3, #32]
 8006bb0:	f8b0 209c 	ldrh.w	r2, [r0, #156]	; 0x9c
 8006bb4:	f024 0404 	bic.w	r4, r4, #4
 8006bb8:	0852      	lsrs	r2, r2, #1
 8006bba:	621c      	str	r4, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006bbc:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8006bbe:	699c      	ldr	r4, [r3, #24]
 8006bc0:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
 8006bc4:	f444 44c0 	orr.w	r4, r4, #24576	; 0x6000
 8006bc8:	619c      	str	r4, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8006bca:	6a1c      	ldr	r4, [r3, #32]
 8006bcc:	f044 0410 	orr.w	r4, r4, #16
 8006bd0:	621c      	str	r4, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8006bd2:	6a1c      	ldr	r4, [r3, #32]
 8006bd4:	f024 0440 	bic.w	r4, r4, #64	; 0x40
 8006bd8:	621c      	str	r4, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006bda:	639a      	str	r2, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8006bdc:	69dc      	ldr	r4, [r3, #28]
 8006bde:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 8006be2:	f044 0460 	orr.w	r4, r4, #96	; 0x60
 8006be6:	61dc      	str	r4, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8006be8:	6a1c      	ldr	r4, [r3, #32]
 8006bea:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 8006bee:	621c      	str	r4, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8006bf0:	6a1c      	ldr	r4, [r3, #32]
 8006bf2:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 8006bf6:	621c      	str	r4, [r3, #32]
}
 8006bf8:	e79e      	b.n	8006b38 <R3_1_RLDetectionModeDisable+0x74>
 8006bfa:	bf00      	nop
 8006bfc:	08006241 	.word	0x08006241
 8006c00:	08006651 	.word	0x08006651
 8006c04:	08006439 	.word	0x08006439
 8006c08:	080064d9 	.word	0x080064d9

08006c0c <R3_1_RLDetectionModeSetDuty>:
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8006c0c:	f8b0 309c 	ldrh.w	r3, [r0, #156]	; 0x9c
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006c10:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8006c14:	fb03 f101 	mul.w	r1, r3, r1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006c18:	6852      	ldr	r2, [r2, #4]
  if (pHandle->_Super.SWerror == 1u)
 8006c1a:	f8b0 3056 	ldrh.w	r3, [r0, #86]	; 0x56
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8006c1e:	0c09      	lsrs	r1, r1, #16
  pHandle->_Super.Sector = SECTOR_4;
 8006c20:	f04f 0c03 	mov.w	ip, #3
 8006c24:	f880 c07c 	strb.w	ip, [r0, #124]	; 0x7c
  pHandle->_Super.CntPhA = ( uint16_t )( val );
 8006c28:	f8a0 1050 	strh.w	r1, [r0, #80]	; 0x50
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006c2c:	6351      	str	r1, [r2, #52]	; 0x34
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 8006c2e:	6a12      	ldr	r2, [r2, #32]
  if (pHandle->_Super.SWerror == 1u)
 8006c30:	2b01      	cmp	r3, #1
    hAux = MC_DURATION;
 8006c32:	bf12      	itee	ne
 8006c34:	f3c2 3300 	ubfxne	r3, r2, #12, #1
    pHandle->_Super.SWerror = 0u;
 8006c38:	2200      	moveq	r2, #0
 8006c3a:	f8a0 2056 	strheq.w	r2, [r0, #86]	; 0x56
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	4770      	bx	lr
 8006c42:	bf00      	nop

08006c44 <R3_1_RLTurnOnLowSidesAndStart>:
 * @param  pHdl: Handler of the current instance of the PWM component.
 */
void R3_1_RLTurnOnLowSidesAndStart( PWMC_Handle_t * pHdl )
{
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006c44:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
{
 8006c48:	b430      	push	{r4, r5}
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 8006c4a:	e9d2 4300 	ldrd	r4, r3, [r2]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006c4e:	f06f 0101 	mvn.w	r1, #1
 8006c52:	6119      	str	r1, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8006c54:	691a      	ldr	r2, [r3, #16]
 8006c56:	07d1      	lsls	r1, r2, #31
 8006c58:	d5fc      	bpl.n	8006c54 <R3_1_RLTurnOnLowSidesAndStart+0x10>

  LL_TIM_OC_SetCompareCH1 ( TIMx, 0x0u );
  LL_TIM_OC_SetCompareCH2 ( TIMx, 0x0u );
  LL_TIM_OC_SetCompareCH3 ( TIMx, 0x0u );

  LL_TIM_OC_SetCompareCH4( TIMx, ( pHandle->Half_PWMPeriod - 5u));
 8006c5a:	f8b0 209c 	ldrh.w	r2, [r0, #156]	; 0x9c
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006c5e:	2100      	movs	r1, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006c60:	f06f 0501 	mvn.w	r5, #1
 8006c64:	3a05      	subs	r2, #5
 8006c66:	611d      	str	r5, [r3, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006c68:	6359      	str	r1, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006c6a:	6399      	str	r1, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8006c6c:	63d9      	str	r1, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 8006c6e:	641a      	str	r2, [r3, #64]	; 0x40
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8006c70:	691a      	ldr	r2, [r3, #16]
 8006c72:	07d2      	lsls	r2, r2, #31
 8006c74:	d5fc      	bpl.n	8006c70 <R3_1_RLTurnOnLowSidesAndStart+0x2c>

  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
  {}

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE ;
 8006c76:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c78:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006c7c:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8006c7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c80:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006c84:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs ( TIMx );

  if ( ( pHandle->_Super.LowSideOutputs ) == ES_GPIO )
 8006c86:	f890 307d 	ldrb.w	r3, [r0, #125]	; 0x7d
 8006c8a:	2b02      	cmp	r3, #2
 8006c8c:	d10b      	bne.n	8006ca6 <R3_1_RLTurnOnLowSidesAndStart+0x62>
  {
      /* It is executed during calibration phase the EN signal shall stay off */
      LL_GPIO_SetOutputPin( pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin );
      LL_GPIO_SetOutputPin( pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin );
 8006c8e:	e9d0 210f 	ldrd	r2, r1, [r0, #60]	; 0x3c
      LL_GPIO_SetOutputPin( pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin );
 8006c92:	f8b0 5048 	ldrh.w	r5, [r0, #72]	; 0x48
      LL_GPIO_SetOutputPin( pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin );
 8006c96:	6c43      	ldr	r3, [r0, #68]	; 0x44
  WRITE_REG(GPIOx->BSRR, PinMask);
 8006c98:	6195      	str	r5, [r2, #24]
      LL_GPIO_SetOutputPin( pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin );
 8006c9a:	f8b0 504a 	ldrh.w	r5, [r0, #74]	; 0x4a
      LL_GPIO_SetOutputPin( pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin );
 8006c9e:	f8b0 204c 	ldrh.w	r2, [r0, #76]	; 0x4c
 8006ca2:	618d      	str	r5, [r1, #24]
 8006ca4:	619a      	str	r2, [r3, #24]
  SET_BIT(ADCx->CR2, ExternalTriggerEdge);
 8006ca6:	68a3      	ldr	r3, [r4, #8]
 8006ca8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006cac:	60a3      	str	r3, [r4, #8]

//  ADCx->JSQR = pHandle->wADC_JSQR_phAB;
  LL_ADC_INJ_StartConversionExtTrig(ADCx,LL_ADC_INJ_TRIG_EXT_RISING);

  return;
}
 8006cae:	bc30      	pop	{r4, r5}
 8006cb0:	4770      	bx	lr
 8006cb2:	bf00      	nop

08006cb4 <RVBS_Clear>:
  {
#endif
    uint16_t aux;
    uint16_t index;

    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 8006cb4:	f8b0 c00c 	ldrh.w	ip, [r0, #12]
 8006cb8:	8a42      	ldrh	r2, [r0, #18]
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8006cba:	8943      	ldrh	r3, [r0, #10]
    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 8006cbc:	4494      	add	ip, r2
 8006cbe:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
{
 8006cc2:	b430      	push	{r4, r5}
 8006cc4:	2500      	movs	r5, #0
 8006cc6:	f36c 050f 	bfi	r5, ip, #0, #16
 8006cca:	f36c 451f 	bfi	r5, ip, #16, #16
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8006cce:	b14b      	cbz	r3, 8006ce4 <RVBS_Clear+0x30>
    {
      pHandle->aBuffer[index] = aux;
 8006cd0:	6944      	ldr	r4, [r0, #20]
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	b29a      	uxth	r2, r3
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8006cd6:	3301      	adds	r3, #1
      pHandle->aBuffer[index] = aux;
 8006cd8:	f824 c012 	strh.w	ip, [r4, r2, lsl #1]
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8006cdc:	8941      	ldrh	r1, [r0, #10]
 8006cde:	b29a      	uxth	r2, r3
 8006ce0:	4291      	cmp	r1, r2
 8006ce2:	d8f7      	bhi.n	8006cd4 <RVBS_Clear+0x20>
    }
    pHandle->_Super.LatestConv = aux;
    pHandle->_Super.AvBusVoltage_d = aux;
    pHandle->index = 0U;
 8006ce4:	2300      	movs	r3, #0
    pHandle->_Super.LatestConv = aux;
 8006ce6:	6045      	str	r5, [r0, #4]
    pHandle->index = 0U;
 8006ce8:	7643      	strb	r3, [r0, #25]
#ifdef NULL_PTR_CHECK_RDIV_BUS_VLT_SNS
  }
#endif
}
 8006cea:	bc30      	pop	{r4, r5}
 8006cec:	4770      	bx	lr
 8006cee:	bf00      	nop

08006cf0 <RVBS_Init>:
{
 8006cf0:	b508      	push	{r3, lr}
    RVBS_Clear(pHandle);
 8006cf2:	f7ff ffdf 	bl	8006cb4 <RVBS_Clear>
}
 8006cf6:	bd08      	pop	{r3, pc}

08006cf8 <RVBS_CheckFaultState>:
  }
  else
  {
#endif
	/* If both thresholds are equal, single threshold feature is used */
	if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 8006cf8:	8982      	ldrh	r2, [r0, #12]
 8006cfa:	89c1      	ldrh	r1, [r0, #14]
 8006cfc:	428a      	cmp	r2, r1
 8006cfe:	d00e      	beq.n	8006d1e <RVBS_CheckFaultState+0x26>
      }
	}
    else
    {
      /* If both thresholds are different, hysteresis feature is used (Brake mode) */
      if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 8006d00:	f8b0 c006 	ldrh.w	ip, [r0, #6]
 8006d04:	8a43      	ldrh	r3, [r0, #18]
 8006d06:	4563      	cmp	r3, ip
 8006d08:	d807      	bhi.n	8006d1a <RVBS_CheckFaultState+0x22>
      {
        fault = MC_UNDER_VOLT;
      }
      else if ( false == pHandle->OverVoltageHysteresisUpDir )
 8006d0a:	7c03      	ldrb	r3, [r0, #16]
 8006d0c:	b98b      	cbnz	r3, 8006d32 <RVBS_CheckFaultState+0x3a>
      {
        if (pHandle->_Super.AvBusVoltage_d < pHandle->OverVoltageThresholdLow)
 8006d0e:	4561      	cmp	r1, ip
 8006d10:	d913      	bls.n	8006d3a <RVBS_CheckFaultState+0x42>
        {
          pHandle->OverVoltageHysteresisUpDir = true;
 8006d12:	2201      	movs	r2, #1
 8006d14:	7402      	strb	r2, [r0, #16]
          fault = MC_NO_ERROR;
 8006d16:	4618      	mov	r0, r3
 8006d18:	4770      	bx	lr
        fault = MC_UNDER_VOLT;
 8006d1a:	2004      	movs	r0, #4
 8006d1c:	4770      	bx	lr
      if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 8006d1e:	88c3      	ldrh	r3, [r0, #6]
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d30a      	bcc.n	8006d3a <RVBS_CheckFaultState+0x42>
      else if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 8006d24:	8a40      	ldrh	r0, [r0, #18]
 8006d26:	4298      	cmp	r0, r3
 8006d28:	bf94      	ite	ls
 8006d2a:	2000      	movls	r0, #0
 8006d2c:	2001      	movhi	r0, #1
 8006d2e:	0080      	lsls	r0, r0, #2
 8006d30:	4770      	bx	lr
          fault = MC_OVER_VOLT;
        }
      }
      else
      {
        if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 8006d32:	4562      	cmp	r2, ip
 8006d34:	d303      	bcc.n	8006d3e <RVBS_CheckFaultState+0x46>
        {
          pHandle->OverVoltageHysteresisUpDir = false;
          fault = MC_OVER_VOLT;
        }
        else{
          fault = MC_NO_ERROR;
 8006d36:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_RDIV_BUS_VLT_SNS
  }
#endif
  return (fault);
}
 8006d38:	4770      	bx	lr
        fault = MC_OVER_VOLT;
 8006d3a:	2002      	movs	r0, #2
 8006d3c:	4770      	bx	lr
          pHandle->OverVoltageHysteresisUpDir = false;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	7403      	strb	r3, [r0, #16]
          fault = MC_OVER_VOLT;
 8006d42:	2002      	movs	r0, #2
 8006d44:	4770      	bx	lr
 8006d46:	bf00      	nop

08006d48 <RVBS_CalcAvVbus>:
{
 8006d48:	b538      	push	{r3, r4, r5, lr}
    if (0xFFFFU == hAux)
 8006d4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006d4e:	4299      	cmp	r1, r3
{
 8006d50:	4604      	mov	r4, r0
    if (0xFFFFU == hAux)
 8006d52:	d021      	beq.n	8006d98 <RVBS_CalcAvVbus+0x50>
      pHandle->aBuffer[pHandle->index] = hAux;
 8006d54:	6943      	ldr	r3, [r0, #20]
 8006d56:	7e45      	ldrb	r5, [r0, #25]
 8006d58:	f823 1015 	strh.w	r1, [r3, r5, lsl #1]
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 8006d5c:	f8b0 e00a 	ldrh.w	lr, [r0, #10]
 8006d60:	f01e 02ff 	ands.w	r2, lr, #255	; 0xff
 8006d64:	d00d      	beq.n	8006d82 <RVBS_CalcAvVbus+0x3a>
 8006d66:	3a01      	subs	r2, #1
 8006d68:	b2d2      	uxtb	r2, r2
 8006d6a:	eb03 0042 	add.w	r0, r3, r2, lsl #1
 8006d6e:	3b02      	subs	r3, #2
      wtemp = 0u;
 8006d70:	2200      	movs	r2, #0
        wtemp += pHandle->aBuffer[i];
 8006d72:	f833 cf02 	ldrh.w	ip, [r3, #2]!
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 8006d76:	4298      	cmp	r0, r3
        wtemp += pHandle->aBuffer[i];
 8006d78:	4462      	add	r2, ip
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 8006d7a:	d1fa      	bne.n	8006d72 <RVBS_CalcAvVbus+0x2a>
      wtemp /= pHandle->LowPassFilterBW;
 8006d7c:	fbb2 f2fe 	udiv	r2, r2, lr
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 8006d80:	b292      	uxth	r2, r2
      if ((uint16_t)pHandle->index < (pHandle->LowPassFilterBW - 1U))
 8006d82:	f10e 3eff 	add.w	lr, lr, #4294967295
 8006d86:	4575      	cmp	r5, lr
        pHandle->index++;
 8006d88:	bf34      	ite	cc
 8006d8a:	3501      	addcc	r5, #1
        pHandle->index = 0U;
 8006d8c:	2300      	movcs	r3, #0
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 8006d8e:	80e2      	strh	r2, [r4, #6]
      pHandle->_Super.LatestConv = hAux;
 8006d90:	80a1      	strh	r1, [r4, #4]
        pHandle->index++;
 8006d92:	bf34      	ite	cc
 8006d94:	7665      	strbcc	r5, [r4, #25]
        pHandle->index = 0U;
 8006d96:	7663      	strbcs	r3, [r4, #25]
    pHandle->_Super.FaultState = RVBS_CheckFaultState(pHandle);
 8006d98:	4620      	mov	r0, r4
 8006d9a:	f7ff ffad 	bl	8006cf8 <RVBS_CheckFaultState>
 8006d9e:	8120      	strh	r0, [r4, #8]
}
 8006da0:	bd38      	pop	{r3, r4, r5, pc}
 8006da2:	bf00      	nop

08006da4 <REMNG_Init>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->Ext = 0;
 8006da4:	2300      	movs	r3, #0
    pHandle->TargetFinal = 0;
    pHandle->RampRemainingStep = 0U;
    pHandle->IncDecAmount = 0;
    pHandle->ScalingFactor = 1U;
 8006da6:	2201      	movs	r2, #1
    pHandle->TargetFinal = 0;
 8006da8:	e9c0 3301 	strd	r3, r3, [r0, #4]
    pHandle->IncDecAmount = 0;
 8006dac:	e9c0 3303 	strd	r3, r3, [r0, #12]
    pHandle->ScalingFactor = 1U;
 8006db0:	6142      	str	r2, [r0, #20]
#ifdef NULL_PTR_CHECK_RMP_EXT_MNG
  }
#endif
}
 8006db2:	4770      	bx	lr

08006db4 <SPD_GetElAngle>:
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hElAngle);
#else
  return (pHandle->hElAngle);
#endif
}
 8006db4:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8006db8:	4770      	bx	lr
 8006dba:	bf00      	nop

08006dbc <SPD_GetAvrgMecSpeedUnit>:
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hAvrMecSpeedUnit);
#else
  return (pHandle->hAvrMecSpeedUnit);
#endif
}
 8006dbc:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 8006dc0:	4770      	bx	lr
 8006dc2:	bf00      	nop

08006dc4 <SPD_GetInstElSpeedDpp>:
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->InstantaneousElSpeedDpp);
#else
  return (pHandle->InstantaneousElSpeedDpp);
#endif
}
 8006dc4:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 8006dc8:	4770      	bx	lr
 8006dca:	bf00      	nop

08006dcc <SPD_IsMecSpeedReliable>:
    bool SpeedError = false;

    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

    /* Compute absoulte value of mechanical speed */
    if (*pMecSpeedUnit < 0)
 8006dcc:	f9b1 3000 	ldrsh.w	r3, [r1]
    else
    {
      /* Nothing to do */
    }

    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 8006dd0:	f8b0 c016 	ldrh.w	ip, [r0, #22]
{
 8006dd4:	b410      	push	{r4}
    if (*pMecSpeedUnit < 0)
 8006dd6:	2b00      	cmp	r3, #0
      hAux = -(*pMecSpeedUnit);
 8006dd8:	bfb8      	it	lt
 8006dda:	425b      	neglt	r3, r3
      hAbsMecSpeedUnit = (uint16_t)(*pMecSpeedUnit);
 8006ddc:	b29b      	uxth	r3, r3
    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 8006dde:	459c      	cmp	ip, r3
    uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 8006de0:	78c1      	ldrb	r1, [r0, #3]
    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 8006de2:	7802      	ldrb	r2, [r0, #0]
    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
 8006de4:	8a84      	ldrh	r4, [r0, #20]
    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 8006de6:	d819      	bhi.n	8006e1c <SPD_IsMecSpeedReliable+0x50>
    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
 8006de8:	429c      	cmp	r4, r3
 8006dea:	bf2c      	ite	cs
 8006dec:	2400      	movcs	r4, #0
 8006dee:	2401      	movcc	r4, #1
    {
      /* Nothing to do */
    }

    /* Compute absoulte value of mechanical acceleration */
    if (pHandle->hMecAccelUnitP < 0)
 8006df0:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
    else
    {
      hAbsMecAccelUnitP = (uint16_t)pHandle->hMecAccelUnitP;
    }

    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 8006df4:	f8b0 c018 	ldrh.w	ip, [r0, #24]
    if (pHandle->hMecAccelUnitP < 0)
 8006df8:	2b00      	cmp	r3, #0
      hAux = -(pHandle->hMecAccelUnitP);
 8006dfa:	bfb8      	it	lt
 8006dfc:	425b      	neglt	r3, r3
      hAbsMecAccelUnitP = (uint16_t)pHandle->hMecAccelUnitP;
 8006dfe:	b29b      	uxth	r3, r3
    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 8006e00:	459c      	cmp	ip, r3
 8006e02:	d300      	bcc.n	8006e06 <SPD_IsMecSpeedReliable+0x3a>
    else
    {
      /* Nothing to do */
    }

    if (true == SpeedError)
 8006e04:	b164      	cbz	r4, 8006e20 <SPD_IsMecSpeedReliable+0x54>
    {
      if (bSpeedErrorNumber < bMaximumSpeedErrorsNumber)
 8006e06:	4291      	cmp	r1, r2
 8006e08:	d901      	bls.n	8006e0e <SPD_IsMecSpeedReliable+0x42>
      {
        bSpeedErrorNumber++;
 8006e0a:	3201      	adds	r2, #1
 8006e0c:	b2d2      	uxtb	r2, r2
    else
    {
      /* Nothing to do */
    }

    pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 8006e0e:	7002      	strb	r2, [r0, #0]
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  }
#endif
  return (SpeedSensorReliability);
}
 8006e10:	1a50      	subs	r0, r2, r1
 8006e12:	bf18      	it	ne
 8006e14:	2001      	movne	r0, #1
 8006e16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e1a:	4770      	bx	lr
      SpeedError = true;
 8006e1c:	2401      	movs	r4, #1
 8006e1e:	e7e7      	b.n	8006df0 <SPD_IsMecSpeedReliable+0x24>
        bSpeedErrorNumber = 0u;
 8006e20:	4291      	cmp	r1, r2
 8006e22:	bf88      	it	hi
 8006e24:	2200      	movhi	r2, #0
 8006e26:	e7f2      	b.n	8006e0e <SPD_IsMecSpeedReliable+0x42>

08006e28 <SPD_GetS16Speed>:
  }
  else
  {
#endif
    int32_t wAux = (int32_t)pHandle->hAvrMecSpeedUnit;
    wAux *= INT16_MAX;
 8006e28:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
    wAux /= (int16_t)pHandle->hMaxReliableMecSpeedUnit;
 8006e2c:	f9b0 2014 	ldrsh.w	r2, [r0, #20]
    wAux *= INT16_MAX;
 8006e30:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
    wAux /= (int16_t)pHandle->hMaxReliableMecSpeedUnit;
 8006e34:	fb93 f0f2 	sdiv	r0, r3, r2
    tempValue = (int16_t)wAux;
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  }
#endif
  return (tempValue);
}
 8006e38:	b200      	sxth	r0, r0
 8006e3a:	4770      	bx	lr

08006e3c <STC_Init>:
  {
#endif
    pHandle->PISpeed = pPI;
    pHandle->SPD = SPD_Handle;
    pHandle->Mode = pHandle->ModeDefault;
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 8006e3c:	f9b0 c02c 	ldrsh.w	ip, [r0, #44]	; 0x2c
    pHandle->PISpeed = pPI;
 8006e40:	6101      	str	r1, [r0, #16]
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 8006e42:	f9b0 102e 	ldrsh.w	r1, [r0, #46]	; 0x2e
    pHandle->SPD = SPD_Handle;
 8006e46:	6142      	str	r2, [r0, #20]
{
 8006e48:	b410      	push	{r4}
    pHandle->Mode = pHandle->ModeDefault;
 8006e4a:	f890 402a 	ldrb.w	r4, [r0, #42]	; 0x2a
 8006e4e:	7004      	strb	r4, [r0, #0]
    pHandle->TargetFinal = 0;
 8006e50:	2300      	movs	r3, #0
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 8006e52:	ea4f 440c 	mov.w	r4, ip, lsl #16
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 8006e56:	0409      	lsls	r1, r1, #16
 8006e58:	e9c0 4101 	strd	r4, r1, [r0, #4]
    pHandle->TargetFinal = 0;
 8006e5c:	8043      	strh	r3, [r0, #2]
    pHandle->RampRemainingStep = 0U;
    pHandle->IncDecAmount = 0;
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 8006e5e:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->RampRemainingStep = 0U;
 8006e62:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 8006e64:	6183      	str	r3, [r0, #24]
}
 8006e66:	4770      	bx	lr

08006e68 <STC_SetSpeedSensor>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SPD = SPD_Handle;
 8006e68:	6141      	str	r1, [r0, #20]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 8006e6a:	4770      	bx	lr

08006e6c <STC_GetSpeedSensor>:
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  return ((MC_NULL ==  pHandle) ? MC_NULL : pHandle->SPD);
#else
  return (pHandle->SPD);
#endif
}
 8006e6c:	6940      	ldr	r0, [r0, #20]
 8006e6e:	4770      	bx	lr

08006e70 <STC_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (MCM_SPEED_MODE == pHandle->Mode)
 8006e70:	7803      	ldrb	r3, [r0, #0]
 8006e72:	2b03      	cmp	r3, #3
 8006e74:	d000      	beq.n	8006e78 <STC_Clear+0x8>
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 8006e76:	4770      	bx	lr
      PID_SetIntegralTerm(pHandle->PISpeed, 0);
 8006e78:	6900      	ldr	r0, [r0, #16]
 8006e7a:	2100      	movs	r1, #0
 8006e7c:	f7ff b8e0 	b.w	8006040 <PID_SetIntegralTerm>

08006e80 <STC_GetMecSpeedRefUnit>:
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->SpeedRefUnitExt / 65536));
#else
  return ((int16_t)(pHandle->SpeedRefUnitExt / 65536));
#endif
#endif
}
 8006e80:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8006e84:	4770      	bx	lr
 8006e86:	bf00      	nop

08006e88 <STC_GetTorqueRef>:
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->TorqueRef / 65536));
#else
  return ((int16_t)(pHandle->TorqueRef / 65536));
#endif
#endif
}
 8006e88:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
 8006e8c:	4770      	bx	lr
 8006e8e:	bf00      	nop

08006e90 <STC_SetControlMode>:
  }
  else
  {
#endif
    pHandle->Mode = bMode;
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp */
 8006e90:	2300      	movs	r3, #0
    pHandle->Mode = bMode;
 8006e92:	7001      	strb	r1, [r0, #0]
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp */
 8006e94:	60c3      	str	r3, [r0, #12]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 8006e96:	4770      	bx	lr

08006e98 <STC_ExecRamp>:
  * @ref EncAlignCtrl "Encoder Alignment Control",
  * @ref PositionControl "Position Control" loop or
  * speed regulation with @ref SpeedRegulatorPotentiometer Speed potentiometer.
  */
__weak bool STC_ExecRamp(SpeednTorqCtrl_Handle_t *pHandle, int16_t hTargetFinal, uint32_t hDurationms)
{
 8006e98:	b570      	push	{r4, r5, r6, lr}
    uint32_t wAux;
    int32_t wAux1;
    int16_t hCurrentReference;

    /* Check if the hTargetFinal is out of the bound of application */
    if (MCM_TORQUE_MODE == pHandle->Mode)
 8006e9a:	7803      	ldrb	r3, [r0, #0]
 8006e9c:	2b04      	cmp	r3, #4
{
 8006e9e:	4604      	mov	r4, r0
 8006ea0:	460d      	mov	r5, r1
 8006ea2:	4616      	mov	r6, r2
    if (MCM_TORQUE_MODE == pHandle->Mode)
 8006ea4:	d01e      	beq.n	8006ee4 <STC_ExecRamp+0x4c>
#else
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt / 65536);
#endif

#ifdef CHECK_BOUNDARY
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxAppPositiveMecSpeedUnit)
 8006ea6:	8bc3      	ldrh	r3, [r0, #30]
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt >> 16);
 8006ea8:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxAppPositiveMecSpeedUnit)
 8006eac:	4299      	cmp	r1, r3
 8006eae:	dd01      	ble.n	8006eb4 <STC_ExecRamp+0x1c>
        allowedRange = false;
 8006eb0:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (allowedRange);
}
 8006eb2:	bd70      	pop	{r4, r5, r6, pc}
      else if (hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit)
 8006eb4:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	; 0x24
 8006eb8:	428b      	cmp	r3, r1
 8006eba:	dcf9      	bgt.n	8006eb0 <STC_ExecRamp+0x18>
      else if ((int32_t)hTargetFinal < (int32_t)pHandle->MinAppPositiveMecSpeedUnit)
 8006ebc:	8c23      	ldrh	r3, [r4, #32]
 8006ebe:	4299      	cmp	r1, r3
 8006ec0:	da03      	bge.n	8006eca <STC_ExecRamp+0x32>
        if (hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit)
 8006ec2:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
 8006ec6:	428b      	cmp	r3, r1
 8006ec8:	dbf2      	blt.n	8006eb0 <STC_ExecRamp+0x18>
      if (0U == hDurationms)
 8006eca:	b9ae      	cbnz	r6, 8006ef8 <STC_ExecRamp+0x60>
        if (MCM_SPEED_MODE == pHandle->Mode)
 8006ecc:	7823      	ldrb	r3, [r4, #0]
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 8006ece:	042d      	lsls	r5, r5, #16
        if (MCM_SPEED_MODE == pHandle->Mode)
 8006ed0:	2b03      	cmp	r3, #3
        pHandle->RampRemainingStep = 0U;
 8006ed2:	f04f 0300 	mov.w	r3, #0
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 8006ed6:	bf0c      	ite	eq
 8006ed8:	6065      	streq	r5, [r4, #4]
          pHandle->TorqueRef = ((int32_t)hTargetFinal) * 65536;
 8006eda:	60a5      	strne	r5, [r4, #8]
        pHandle->RampRemainingStep = 0U;
 8006edc:	60e3      	str	r3, [r4, #12]
        pHandle->IncDecAmount = 0;
 8006ede:	61a3      	str	r3, [r4, #24]
 8006ee0:	2001      	movs	r0, #1
}
 8006ee2:	bd70      	pop	{r4, r5, r6, pc}
      hCurrentReference = STC_GetTorqueRef(pHandle);
 8006ee4:	f7ff ffd0 	bl	8006e88 <STC_GetTorqueRef>
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxPositiveTorque)
 8006ee8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8006eea:	429d      	cmp	r5, r3
 8006eec:	dce0      	bgt.n	8006eb0 <STC_ExecRamp+0x18>
      if ((int32_t)hTargetFinal < (int32_t)pHandle->MinNegativeTorque)
 8006eee:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 8006ef2:	42ab      	cmp	r3, r5
 8006ef4:	dcdc      	bgt.n	8006eb0 <STC_ExecRamp+0x18>
 8006ef6:	e7e8      	b.n	8006eca <STC_ExecRamp+0x32>
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 8006ef8:	8ba3      	ldrh	r3, [r4, #28]
        wAux /= 1000U;
 8006efa:	4a08      	ldr	r2, [pc, #32]	; (8006f1c <STC_ExecRamp+0x84>)
        pHandle->TargetFinal = hTargetFinal;
 8006efc:	8065      	strh	r5, [r4, #2]
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 8006efe:	fb06 f303 	mul.w	r3, r6, r3
        wAux /= 1000U;
 8006f02:	fba2 2303 	umull	r2, r3, r2, r3
 8006f06:	099b      	lsrs	r3, r3, #6
        pHandle->RampRemainingStep++;
 8006f08:	3301      	adds	r3, #1
        wAux1 = (((int32_t)hTargetFinal) - ((int32_t)hCurrentReference)) * 65536;
 8006f0a:	1a28      	subs	r0, r5, r0
 8006f0c:	0400      	lsls	r0, r0, #16
        pHandle->RampRemainingStep++;
 8006f0e:	60e3      	str	r3, [r4, #12]
        wAux1 /= ((int32_t)pHandle->RampRemainingStep);
 8006f10:	fb90 f0f3 	sdiv	r0, r0, r3
        pHandle->IncDecAmount = wAux1;
 8006f14:	61a0      	str	r0, [r4, #24]
 8006f16:	2001      	movs	r0, #1
}
 8006f18:	bd70      	pop	{r4, r5, r6, pc}
 8006f1a:	bf00      	nop
 8006f1c:	10624dd3 	.word	0x10624dd3

08006f20 <STC_StopRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->RampRemainingStep = 0U;
 8006f20:	2300      	movs	r3, #0
 8006f22:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 8006f24:	6183      	str	r3, [r0, #24]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 8006f26:	4770      	bx	lr

08006f28 <STC_CalcTorqueReference>:
  * - Must be called at fixed time equal to hSTCFrequencyHz. It is called
  * passing as parameter the speed sensor used to perform the speed regulation.
  * - Called during START and ALIGNEMENT states of the MC state machine into MediumFrequencyTask.
  */
__weak int16_t STC_CalcTorqueReference(SpeednTorqCtrl_Handle_t *pHandle)
{
 8006f28:	b538      	push	{r3, r4, r5, lr}
    int16_t hTargetSpeed;
    int16_t hError;

    if (MCM_TORQUE_MODE == pHandle->Mode)
    {
      wCurrentReference = pHandle->TorqueRef;
 8006f2a:	e9d0 5101 	ldrd	r5, r1, [r0, #4]
    if (MCM_TORQUE_MODE == pHandle->Mode)
 8006f2e:	7802      	ldrb	r2, [r0, #0]
      wCurrentReference = pHandle->SpeedRefUnitExt;
    }

    /* Update the speed reference or the torque reference according to the mode
       and terminates the ramp if needed */
    if (pHandle->RampRemainingStep > 1U)
 8006f30:	68c3      	ldr	r3, [r0, #12]
      wCurrentReference = pHandle->TorqueRef;
 8006f32:	2a04      	cmp	r2, #4
 8006f34:	bf08      	it	eq
 8006f36:	460d      	moveq	r5, r1
    if (pHandle->RampRemainingStep > 1U)
 8006f38:	2b01      	cmp	r3, #1
{
 8006f3a:	4604      	mov	r4, r0
    if (pHandle->RampRemainingStep > 1U)
 8006f3c:	d908      	bls.n	8006f50 <STC_CalcTorqueReference+0x28>
    {
      /* Increment/decrement the reference value */
      wCurrentReference += pHandle->IncDecAmount;
 8006f3e:	6981      	ldr	r1, [r0, #24]

      /* Decrement the number of remaining steps */
      pHandle->RampRemainingStep--;
 8006f40:	3b01      	subs	r3, #1
      wCurrentReference += pHandle->IncDecAmount;
 8006f42:	440d      	add	r5, r1
      pHandle->RampRemainingStep--;
 8006f44:	60c3      	str	r3, [r0, #12]
    else
    {
      /* Do nothing */
    }

    if (MCM_SPEED_MODE == pHandle->Mode)
 8006f46:	2a03      	cmp	r2, #3
 8006f48:	d00b      	beq.n	8006f62 <STC_CalcTorqueReference+0x3a>
    else
    {
      pHandle->TorqueRef = wCurrentReference;
#ifndef FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hTorqueReference = (int16_t)(wCurrentReference >> 16);
 8006f4a:	1428      	asrs	r0, r5, #16
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
 8006f4c:	60a5      	str	r5, [r4, #8]
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (hTorqueReference);
}
 8006f4e:	bd38      	pop	{r3, r4, r5, pc}
    else if (1U == pHandle->RampRemainingStep)
 8006f50:	d1f9      	bne.n	8006f46 <STC_CalcTorqueReference+0x1e>
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 8006f52:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
      pHandle->RampRemainingStep = 0U;
 8006f56:	2300      	movs	r3, #0
    if (MCM_SPEED_MODE == pHandle->Mode)
 8006f58:	2a03      	cmp	r2, #3
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 8006f5a:	ea4f 4505 	mov.w	r5, r5, lsl #16
      pHandle->RampRemainingStep = 0U;
 8006f5e:	60c3      	str	r3, [r0, #12]
    if (MCM_SPEED_MODE == pHandle->Mode)
 8006f60:	d1f3      	bne.n	8006f4a <STC_CalcTorqueReference+0x22>
      hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit(pHandle->SPD);
 8006f62:	6960      	ldr	r0, [r4, #20]
 8006f64:	f7ff ff2a 	bl	8006dbc <SPD_GetAvrgMecSpeedUnit>
      hError = hTargetSpeed - hMeasuredSpeed;
 8006f68:	ebc0 4125 	rsb	r1, r0, r5, asr #16
      hTorqueReference = PI_Controller(pHandle->PISpeed, (int32_t)hError);
 8006f6c:	b209      	sxth	r1, r1
 8006f6e:	6920      	ldr	r0, [r4, #16]
 8006f70:	f7ff f898 	bl	80060a4 <PI_Controller>
      pHandle->SpeedRefUnitExt = wCurrentReference;
 8006f74:	6065      	str	r5, [r4, #4]
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
 8006f76:	0405      	lsls	r5, r0, #16
 8006f78:	60a5      	str	r5, [r4, #8]
}
 8006f7a:	bd38      	pop	{r3, r4, r5, pc}

08006f7c <STC_GetMecSpeedRefUnitDefault>:
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  return ((MC_NULL == pHandle) ? 0 : pHandle->MecSpeedRefUnitDefault);
#else
  return (pHandle->MecSpeedRefUnitDefault);
#endif
}
 8006f7c:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
 8006f80:	4770      	bx	lr
 8006f82:	bf00      	nop

08006f84 <STC_GetDefaultIqdref>:
    IqdRefDefault.d = 0;
  }
  else
  {
#endif
    IqdRefDefault.q = pHandle->TorqueRefDefault;
 8006f84:	f8d0 302e 	ldr.w	r3, [r0, #46]	; 0x2e
    IqdRefDefault.d = pHandle->IdrefDefault;
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (IqdRefDefault);
 8006f88:	2200      	movs	r2, #0
 8006f8a:	b299      	uxth	r1, r3
 8006f8c:	f361 020f 	bfi	r2, r1, #0, #16
 8006f90:	0c1b      	lsrs	r3, r3, #16
 8006f92:	f363 421f 	bfi	r2, r3, #16, #16
{
 8006f96:	b082      	sub	sp, #8
}
 8006f98:	4610      	mov	r0, r2
 8006f9a:	b002      	add	sp, #8
 8006f9c:	4770      	bx	lr
 8006f9e:	bf00      	nop

08006fa0 <STC_ForceSpeedReferenceToCurrentSpeed>:
  *
  * - Called during the CHARGE_BOOT_CAP, SWITCH_OVER and WAIT_STOP_MOTOR states of the MC state machine
  * into MediumFrequencyTask to initialize the speed reference.
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed(SpeednTorqCtrl_Handle_t *pHandle)
{
 8006fa0:	b510      	push	{r4, lr}
 8006fa2:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SpeedRefUnitExt = ((int32_t)SPD_GetAvrgMecSpeedUnit(pHandle->SPD)) * (int32_t)65536;
 8006fa4:	6940      	ldr	r0, [r0, #20]
 8006fa6:	f7ff ff09 	bl	8006dbc <SPD_GetAvrgMecSpeedUnit>
 8006faa:	0400      	lsls	r0, r0, #16
 8006fac:	6060      	str	r0, [r4, #4]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 8006fae:	bd10      	pop	{r4, pc}

08006fb0 <VSS_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->_Super.bSpeedErrorNumber = 0U;
 8006fb0:	2300      	movs	r3, #0
    pHandle->hRemainingStep = 0U;
    pHandle->hElAngleAccu = 0;

    pHandle->bTransitionStarted = false;
    pHandle->bTransitionEnded = false;
    pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 8006fb2:	8ec2      	ldrh	r2, [r0, #54]	; 0x36
    pHandle->_Super.bSpeedErrorNumber = 0U;
 8006fb4:	7003      	strb	r3, [r0, #0]
    pHandle->wElSpeedDpp32 = 0;
 8006fb6:	e9c0 3308 	strd	r3, r3, [r0, #32]
    pHandle->_Super.hElAngle = 0;
 8006fba:	6043      	str	r3, [r0, #4]
    pHandle->_Super.hAvrMecSpeedUnit = 0;
 8006fbc:	60c3      	str	r3, [r0, #12]
    pHandle->_Super.hMecAccelUnitP = 0;
 8006fbe:	8243      	strh	r3, [r0, #18]
    pHandle->hRemainingStep = 0U;
 8006fc0:	8503      	strh	r3, [r0, #40]	; 0x28
    pHandle->bTransitionStarted = false;
 8006fc2:	8583      	strh	r3, [r0, #44]	; 0x2c
    pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 8006fc4:	85c2      	strh	r2, [r0, #46]	; 0x2e
    pHandle->hElAngleAccu = 0;
 8006fc6:	6303      	str	r3, [r0, #48]	; 0x30

    pHandle->bCopyObserver = false;
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
}
 8006fc8:	4770      	bx	lr
 8006fca:	bf00      	nop

08006fcc <VSS_Init>:
{
 8006fcc:	b508      	push	{r3, lr}
  VSS_Clear(pHandle);
 8006fce:	f7ff ffef 	bl	8006fb0 <VSS_Clear>
}
 8006fd2:	bd08      	pop	{r3, pc}

08006fd4 <VSS_SetMecAngle>:
  }
  else
  {
#endif
    pHandle->hElAngleAccu = hMecAngle;
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 8006fd4:	7843      	ldrb	r3, [r0, #1]
    pHandle->hElAngleAccu = hMecAngle;
 8006fd6:	8601      	strh	r1, [r0, #48]	; 0x30
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 8006fd8:	fb91 f3f3 	sdiv	r3, r1, r3
    pHandle->_Super.hElAngle = hMecAngle;
 8006fdc:	8081      	strh	r1, [r0, #4]
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 8006fde:	80c3      	strh	r3, [r0, #6]
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
}
 8006fe0:	4770      	bx	lr
 8006fe2:	bf00      	nop

08006fe4 <VSS_SetMecAcceleration>:
    int32_t wMecAccDppP32;
    uint16_t hNbrStep;
    int16_t hCurrentMecSpeedDpp;
    int16_t hFinalMecSpeedDpp;

    if (false == pHandle->bTransitionStarted)
 8006fe4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8006fe8:	b99b      	cbnz	r3, 8007012 <VSS_SetMecAcceleration+0x2e>
{
 8006fea:	b510      	push	{r4, lr}
    {
      if (0U == hDurationms)
 8006fec:	b992      	cbnz	r2, 8007014 <VSS_SetMecAcceleration+0x30>
        pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;

        pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)hFinalMecSpeedUnit)
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
                                              / (((int32_t)SPEED_UNIT)
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 8006fee:	8b43      	ldrh	r3, [r0, #26]
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
 8006ff0:	69c4      	ldr	r4, [r0, #28]
        pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;
 8006ff2:	8181      	strh	r1, [r0, #12]
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 8006ff4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
 8006ff8:	fb04 fc01 	mul.w	ip, r4, r1
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 8006ffc:	005b      	lsls	r3, r3, #1
                                              / (((int32_t)SPEED_UNIT)
 8006ffe:	fb9c f3f3 	sdiv	r3, ip, r3

        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 8007002:	f890 c001 	ldrb.w	ip, [r0, #1]

        pHandle->hRemainingStep = 0U;
 8007006:	8502      	strh	r2, [r0, #40]	; 0x28
        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 8007008:	fb1c f303 	smulbb	r3, ip, r3
 800700c:	81c3      	strh	r3, [r0, #14]

        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800700e:	8541      	strh	r1, [r0, #42]	; 0x2a
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
}
 8007010:	bd10      	pop	{r4, pc}
 8007012:	4770      	bx	lr
        hNbrStep = (uint16_t)((((uint32_t)hDurationms) * ((uint32_t)pHandle->hSpeedSamplingFreqHz)) / 1000U);
 8007014:	8e83      	ldrh	r3, [r0, #52]	; 0x34
 8007016:	4c16      	ldr	r4, [pc, #88]	; (8007070 <VSS_SetMecAcceleration+0x8c>)
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 8007018:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
        hNbrStep = (uint16_t)((((uint32_t)hDurationms) * ((uint32_t)pHandle->hSpeedSamplingFreqHz)) / 1000U);
 800701c:	fb02 f303 	mul.w	r3, r2, r3
 8007020:	fba4 4303 	umull	r4, r3, r4, r3
 8007024:	f3c3 138f 	ubfx	r3, r3, #6, #16
        hNbrStep++;
 8007028:	3301      	adds	r3, #1
 800702a:	b29b      	uxth	r3, r3
        pHandle->hRemainingStep = hNbrStep;
 800702c:	8503      	strh	r3, [r0, #40]	; 0x28
        if (0U == hNbrStep)
 800702e:	b923      	cbnz	r3, 800703a <VSS_SetMecAcceleration+0x56>
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 8007030:	ea4f 430c 	mov.w	r3, ip, lsl #16
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8007034:	8541      	strh	r1, [r0, #42]	; 0x2a
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 8007036:	6243      	str	r3, [r0, #36]	; 0x24
}
 8007038:	bd10      	pop	{r4, pc}
                                    / (((int32_t )SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800703a:	8b42      	ldrh	r2, [r0, #26]
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 800703c:	7844      	ldrb	r4, [r0, #1]
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800703e:	8541      	strh	r1, [r0, #42]	; 0x2a
                                    / (((int32_t )SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 8007040:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8007044:	ea4f 0e42 	mov.w	lr, r2, lsl #1
        hFinalMecSpeedDpp = (int16_t)((((int32_t )hFinalMecSpeedUnit) * ((int32_t)pHandle->_Super.DPPConvFactor))
 8007048:	69c2      	ldr	r2, [r0, #28]
 800704a:	fb01 f202 	mul.w	r2, r1, r2
                                    / (((int32_t )SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800704e:	fb92 f2fe 	sdiv	r2, r2, lr
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 8007052:	fb9c fef4 	sdiv	lr, ip, r4
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 8007056:	eba2 020e 	sub.w	r2, r2, lr
                         * ((int32_t)65536)) / ((int32_t )hNbrStep);
 800705a:	0412      	lsls	r2, r2, #16
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 800705c:	fb92 f3f3 	sdiv	r3, r2, r3
          pHandle->wElAccDppP32 = wMecAccDppP32 * ((int16_t)pHandle->_Super.bElToMecRatio);
 8007060:	fb04 f303 	mul.w	r3, r4, r3
 8007064:	6203      	str	r3, [r0, #32]
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 8007066:	ea4f 430c 	mov.w	r3, ip, lsl #16
 800706a:	6243      	str	r3, [r0, #36]	; 0x24
    }
 800706c:	e7e4      	b.n	8007038 <VSS_SetMecAcceleration+0x54>
 800706e:	bf00      	nop
 8007070:	10624dd3 	.word	0x10624dd3

08007074 <memset>:
 8007074:	4402      	add	r2, r0
 8007076:	4603      	mov	r3, r0
 8007078:	4293      	cmp	r3, r2
 800707a:	d100      	bne.n	800707e <memset+0xa>
 800707c:	4770      	bx	lr
 800707e:	f803 1b01 	strb.w	r1, [r3], #1
 8007082:	e7f9      	b.n	8007078 <memset+0x4>

08007084 <__libc_init_array>:
 8007084:	b570      	push	{r4, r5, r6, lr}
 8007086:	4d0d      	ldr	r5, [pc, #52]	; (80070bc <__libc_init_array+0x38>)
 8007088:	4c0d      	ldr	r4, [pc, #52]	; (80070c0 <__libc_init_array+0x3c>)
 800708a:	1b64      	subs	r4, r4, r5
 800708c:	10a4      	asrs	r4, r4, #2
 800708e:	2600      	movs	r6, #0
 8007090:	42a6      	cmp	r6, r4
 8007092:	d109      	bne.n	80070a8 <__libc_init_array+0x24>
 8007094:	4d0b      	ldr	r5, [pc, #44]	; (80070c4 <__libc_init_array+0x40>)
 8007096:	4c0c      	ldr	r4, [pc, #48]	; (80070c8 <__libc_init_array+0x44>)
 8007098:	f000 f826 	bl	80070e8 <_init>
 800709c:	1b64      	subs	r4, r4, r5
 800709e:	10a4      	asrs	r4, r4, #2
 80070a0:	2600      	movs	r6, #0
 80070a2:	42a6      	cmp	r6, r4
 80070a4:	d105      	bne.n	80070b2 <__libc_init_array+0x2e>
 80070a6:	bd70      	pop	{r4, r5, r6, pc}
 80070a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80070ac:	4798      	blx	r3
 80070ae:	3601      	adds	r6, #1
 80070b0:	e7ee      	b.n	8007090 <__libc_init_array+0xc>
 80070b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80070b6:	4798      	blx	r3
 80070b8:	3601      	adds	r6, #1
 80070ba:	e7f2      	b.n	80070a2 <__libc_init_array+0x1e>
 80070bc:	08007520 	.word	0x08007520
 80070c0:	08007520 	.word	0x08007520
 80070c4:	08007520 	.word	0x08007520
 80070c8:	08007524 	.word	0x08007524

080070cc <memcpy>:
 80070cc:	440a      	add	r2, r1
 80070ce:	4291      	cmp	r1, r2
 80070d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80070d4:	d100      	bne.n	80070d8 <memcpy+0xc>
 80070d6:	4770      	bx	lr
 80070d8:	b510      	push	{r4, lr}
 80070da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070e2:	4291      	cmp	r1, r2
 80070e4:	d1f9      	bne.n	80070da <memcpy+0xe>
 80070e6:	bd10      	pop	{r4, pc}

080070e8 <_init>:
 80070e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ea:	bf00      	nop
 80070ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070ee:	bc08      	pop	{r3}
 80070f0:	469e      	mov	lr, r3
 80070f2:	4770      	bx	lr

080070f4 <_fini>:
 80070f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070f6:	bf00      	nop
 80070f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070fa:	bc08      	pop	{r3}
 80070fc:	469e      	mov	lr, r3
 80070fe:	4770      	bx	lr
