
SpeedMode-10VV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000882c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000450  080089fc  080089fc  000099fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e4c  08008e4c  0000a51c  2**0
                  CONTENTS
  4 .ARM          00000008  08008e4c  08008e4c  00009e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e54  08008e54  0000a51c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e54  08008e54  00009e54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e58  08008e58  00009e58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000051c  20000000  08008e5c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015ac  20000520  08009378  0000a520  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001acc  08009378  0000aacc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a51c  2**0
                  CONTENTS, READONLY
 12 .debug_line   00042475  00000000  00000000  0000a54c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 00000089  00000000  00000000  0004c9c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   0003aba7  00000000  00000000  0004ca4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00008a5a  00000000  00000000  000875f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001ec0  00000000  00000000  00090050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000fa0c1  00000000  00000000  00091f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000029cb  00000000  00000000  0018bfd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loclists 0001840d  00000000  00000000  0018e99c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002edae  00000000  00000000  001a6da9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001d5b57  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000582c  00000000  00000000  001d5b9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000520 	.word	0x20000520
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080089e4 	.word	0x080089e4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000524 	.word	0x20000524
 800020c:	080089e4 	.word	0x080089e4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80005a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80005d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80005a4:	480d      	ldr	r0, [pc, #52]	@ (80005dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80005a6:	490e      	ldr	r1, [pc, #56]	@ (80005e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80005a8:	4a0e      	ldr	r2, [pc, #56]	@ (80005e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80005aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005ac:	e002      	b.n	80005b4 <LoopCopyDataInit>

080005ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005b2:	3304      	adds	r3, #4

080005b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005b8:	d3f9      	bcc.n	80005ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ba:	4a0b      	ldr	r2, [pc, #44]	@ (80005e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80005bc:	4c0b      	ldr	r4, [pc, #44]	@ (80005ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80005be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005c0:	e001      	b.n	80005c6 <LoopFillZerobss>

080005c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005c4:	3204      	adds	r2, #4

080005c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005c8:	d3fb      	bcc.n	80005c2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80005ca:	f003 fd65 	bl	8004098 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005ce:	f007 fc37 	bl	8007e40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80005d2:	f000 fcf1 	bl	8000fb8 <main>
  bx  lr    
 80005d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80005d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005e0:	2000051c 	.word	0x2000051c
  ldr r2, =_sidata
 80005e4:	08008e5c 	.word	0x08008e5c
  ldr r2, =_sbss
 80005e8:	20000520 	.word	0x20000520
  ldr r4, =_ebss
 80005ec:	20001acc 	.word	0x20001acc

080005f0 <BusFault_Handler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80005f0:	e7fe      	b.n	80005f0 <BusFault_Handler>
	...

080005f4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005f4:	b510      	push	{r4, lr}
 80005f6:	b08c      	sub	sp, #48	@ 0x30

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80005f8:	2220      	movs	r2, #32
 80005fa:	2100      	movs	r1, #0
 80005fc:	a804      	add	r0, sp, #16
 80005fe:	f007 fbca 	bl	8007d96 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000602:	4830      	ldr	r0, [pc, #192]	@ (80006c4 <MX_ADC1_Init+0xd0>)
 8000604:	4a30      	ldr	r2, [pc, #192]	@ (80006c8 <MX_ADC1_Init+0xd4>)
 8000606:	6002      	str	r2, [r0, #0]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000608:	2300      	movs	r3, #0
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800060a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
  ADC_ChannelConfTypeDef sConfig = {0};
 800060e:	e9cd 3300 	strd	r3, r3, [sp]
 8000612:	e9cd 3302 	strd	r3, r3, [sp, #8]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000616:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = ENABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000618:	7603      	strb	r3, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800061a:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800061e:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
  hadc1.Init.NbrOfConversion = 1;
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000620:	f880 3030 	strb.w	r3, [r0, #48]	@ 0x30
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000624:	4b29      	ldr	r3, [pc, #164]	@ (80006cc <MX_ADC1_Init+0xd8>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000626:	6042      	str	r2, [r0, #4]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000628:	6283      	str	r3, [r0, #40]	@ 0x28
  hadc1.Init.ScanConvMode = ENABLE;
 800062a:	2201      	movs	r2, #1
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 800062c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  hadc1.Init.ScanConvMode = ENABLE;
 8000630:	6102      	str	r2, [r0, #16]
  hadc1.Init.NbrOfConversion = 1;
 8000632:	61c2      	str	r2, [r0, #28]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000634:	6142      	str	r2, [r0, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000636:	60c3      	str	r3, [r0, #12]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000638:	f003 fd9a 	bl	8004170 <HAL_ADC_Init>
 800063c:	bb90      	cbnz	r0, 80006a4 <MX_ADC1_Init+0xb0>

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_0;
  sConfigInjected.InjectedRank = 1;
  sConfigInjected.InjectedNbrOfConversion = 3;
 800063e:	2103      	movs	r1, #3
 8000640:	9108      	str	r1, [sp, #32]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_15CYCLES;
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_RISING;
 8000642:	f44f 1180 	mov.w	r1, #1048576	@ 0x100000
  sConfigInjected.InjectedChannel = ADC_CHANNEL_0;
 8000646:	2300      	movs	r3, #0
  sConfigInjected.InjectedRank = 1;
 8000648:	2201      	movs	r2, #1
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_RISING;
 800064a:	910b      	str	r1, [sp, #44]	@ 0x2c
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
  sConfigInjected.AutoInjectedConv = DISABLE;
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
  sConfigInjected.InjectedOffset = 0;
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800064c:	481d      	ldr	r0, [pc, #116]	@ (80006c4 <MX_ADC1_Init+0xd0>)
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_15CYCLES;
 800064e:	9206      	str	r2, [sp, #24]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000650:	a904      	add	r1, sp, #16
  sConfigInjected.InjectedRank = 1;
 8000652:	e9cd 3204 	strd	r3, r2, [sp, #16]
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 8000656:	930a      	str	r3, [sp, #40]	@ 0x28
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000658:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
  sConfigInjected.InjectedOffset = 0;
 800065c:	9307      	str	r3, [sp, #28]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800065e:	f003 fee9 	bl	8004434 <HAL_ADCEx_InjectedConfigChannel>
 8000662:	bb60      	cbnz	r0, 80006be <MX_ADC1_Init+0xca>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_11;
  sConfigInjected.InjectedRank = 2;
 8000664:	220b      	movs	r2, #11
 8000666:	2302      	movs	r3, #2
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000668:	4816      	ldr	r0, [pc, #88]	@ (80006c4 <MX_ADC1_Init+0xd0>)
 800066a:	a904      	add	r1, sp, #16
  sConfigInjected.InjectedRank = 2;
 800066c:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000670:	f003 fee0 	bl	8004434 <HAL_ADCEx_InjectedConfigChannel>
 8000674:	bb00      	cbnz	r0, 80006b8 <MX_ADC1_Init+0xc4>
    Error_Handler();
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_10;
 8000676:	220a      	movs	r2, #10
  sConfigInjected.InjectedRank = 3;
 8000678:	2303      	movs	r3, #3
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800067a:	4812      	ldr	r0, [pc, #72]	@ (80006c4 <MX_ADC1_Init+0xd0>)
 800067c:	a904      	add	r1, sp, #16
  sConfigInjected.InjectedRank = 3;
 800067e:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000682:	f003 fed7 	bl	8004434 <HAL_ADCEx_InjectedConfigChannel>
 8000686:	b9a0      	cbnz	r0, 80006b2 <MX_ADC1_Init+0xbe>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000688:	2301      	movs	r3, #1
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 800068a:	2402      	movs	r4, #2
  sConfig.Offset = 0;
 800068c:	2200      	movs	r2, #0

  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800068e:	480d      	ldr	r0, [pc, #52]	@ (80006c4 <MX_ADC1_Init+0xd0>)
 8000690:	4669      	mov	r1, sp
  sConfig.Rank = 1;
 8000692:	e9cd 3300 	strd	r3, r3, [sp]
  sConfig.Offset = 0;
 8000696:	e9cd 4202 	strd	r4, r2, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800069a:	f003 fe15 	bl	80042c8 <HAL_ADC_ConfigChannel>
 800069e:	b920      	cbnz	r0, 80006aa <MX_ADC1_Init+0xb6>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006a0:	b00c      	add	sp, #48	@ 0x30
 80006a2:	bd10      	pop	{r4, pc}
    Error_Handler();
 80006a4:	f000 fcf0 	bl	8001088 <Error_Handler>
 80006a8:	e7c9      	b.n	800063e <MX_ADC1_Init+0x4a>
    Error_Handler();
 80006aa:	f000 fced 	bl	8001088 <Error_Handler>
}
 80006ae:	b00c      	add	sp, #48	@ 0x30
 80006b0:	bd10      	pop	{r4, pc}
    Error_Handler();
 80006b2:	f000 fce9 	bl	8001088 <Error_Handler>
 80006b6:	e7e7      	b.n	8000688 <MX_ADC1_Init+0x94>
    Error_Handler();
 80006b8:	f000 fce6 	bl	8001088 <Error_Handler>
 80006bc:	e7db      	b.n	8000676 <MX_ADC1_Init+0x82>
    Error_Handler();
 80006be:	f000 fce3 	bl	8001088 <Error_Handler>
 80006c2:	e7cf      	b.n	8000664 <MX_ADC1_Init+0x70>
 80006c4:	2000053c 	.word	0x2000053c
 80006c8:	40012000 	.word	0x40012000
 80006cc:	0f000001 	.word	0x0f000001

080006d0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006d0:	b5d0      	push	{r4, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(adcHandle->Instance==ADC1)
 80006d2:	4b1f      	ldr	r3, [pc, #124]	@ (8000750 <HAL_ADC_MspInit+0x80>)
 80006d4:	6802      	ldr	r2, [r0, #0]
{
 80006d6:	b08a      	sub	sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d8:	2400      	movs	r4, #0
  if(adcHandle->Instance==ADC1)
 80006da:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006dc:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80006e0:	e9cd 4406 	strd	r4, r4, [sp, #24]
 80006e4:	9408      	str	r4, [sp, #32]
  if(adcHandle->Instance==ADC1)
 80006e6:	d001      	beq.n	80006ec <HAL_ADC_MspInit+0x1c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006e8:	b00a      	add	sp, #40	@ 0x28
 80006ea:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006ec:	f503 338c 	add.w	r3, r3, #71680	@ 0x11800
 80006f0:	9401      	str	r4, [sp, #4]
 80006f2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006f4:	4817      	ldr	r0, [pc, #92]	@ (8000754 <HAL_ADC_MspInit+0x84>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80006fa:	645a      	str	r2, [r3, #68]	@ 0x44
 80006fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80006fe:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8000702:	9201      	str	r2, [sp, #4]
 8000704:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000706:	9402      	str	r4, [sp, #8]
 8000708:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800070a:	f042 0204 	orr.w	r2, r2, #4
 800070e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000710:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000712:	f002 0204 	and.w	r2, r2, #4
 8000716:	9202      	str	r2, [sp, #8]
 8000718:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800071a:	9403      	str	r4, [sp, #12]
 800071c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800071e:	f042 0201 	orr.w	r2, r2, #1
 8000722:	631a      	str	r2, [r3, #48]	@ 0x30
 8000724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin|M1_CURR_AMPL_V_Pin;
 800072c:	2603      	movs	r6, #3
 800072e:	2703      	movs	r7, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000730:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000732:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin|M1_CURR_AMPL_V_Pin;
 8000734:	e9cd 6704 	strd	r6, r7, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000738:	f004 f862 	bl	8004800 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800073c:	4806      	ldr	r0, [pc, #24]	@ (8000758 <HAL_ADC_MspInit+0x88>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073e:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000740:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin|M1_BUS_VOLTAGE_Pin;
 8000742:	e9cd 6704 	strd	r6, r7, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000746:	f004 f85b 	bl	8004800 <HAL_GPIO_Init>
}
 800074a:	b00a      	add	sp, #40	@ 0x28
 800074c:	bdd0      	pop	{r4, r6, r7, pc}
 800074e:	bf00      	nop
 8000750:	40012000 	.word	0x40012000
 8000754:	40020800 	.word	0x40020800
 8000758:	40020000 	.word	0x40020000

0800075c <ASPEP_start>:
  * @brief  Starts ASPEP communication by configuring UART.
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_start(ASPEP_Handle_t *pHandle)
{
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->fASPEP_HWInit(pHandle->HWIp);
 8000760:	6940      	ldr	r0, [r0, #20]
 8000762:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8000764:	4798      	blx	r3
    pHandle->ASPEP_State = ASPEP_IDLE;
 8000766:	2300      	movs	r3, #0
    pHandle->ASPEP_TL_State = WAITING_PACKET;
    pHandle->syncPacketCount = 0; /* Sync packet counter is reset only at startup*/

    /* Configure UART to receive first packet*/
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000768:	6d65      	ldr	r5, [r4, #84]	@ 0x54
    pHandle->ASPEP_State = ASPEP_IDLE;
 800076a:	f8a4 3064 	strh.w	r3, [r4, #100]	@ 0x64
    pHandle->syncPacketCount = 0; /* Sync packet counter is reset only at startup*/
 800076e:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000772:	6960      	ldr	r0, [r4, #20]
 8000774:	f104 011c 	add.w	r1, r4, #28
 8000778:	462b      	mov	r3, r5
 800077a:	2204      	movs	r2, #4
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 800077c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000780:	4718      	bx	r3
 8000782:	bf00      	nop

08000784 <ASPEP_sendBeacon>:
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  * @param  *capabilities Matched capabilities between controller and performer
  */
void ASPEP_sendBeacon(ASPEP_Handle_t *pHandle, ASPEP_Capabilities_def *capabilities)
{
 8000784:	b410      	push	{r4}
  {
#endif
    uint32_t *packet = (uint32_t *)pHandle->ctrlBuffer.buffer; //cstat !MISRAC2012-Rule-11.3
    *packet = (BEACON
             | (((uint32_t)capabilities->version) << 4U)
             | (((uint32_t)capabilities->DATA_CRC) << 7U)
 8000786:	780b      	ldrb	r3, [r1, #0]
             | (((uint32_t)capabilities->version) << 4U)
 8000788:	790a      	ldrb	r2, [r1, #4]
             | (((uint32_t)capabilities->RX_maxSize) << 8U)
             | (((uint32_t)capabilities->TXS_maxSize) << 14U)
 800078a:	f891 c002 	ldrb.w	ip, [r1, #2]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 800078e:	4c1e      	ldr	r4, [pc, #120]	@ (8000808 <ASPEP_sendBeacon+0x84>)
             | (((uint32_t)capabilities->DATA_CRC) << 7U)
 8000790:	01db      	lsls	r3, r3, #7
 8000792:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
             | (((uint32_t)capabilities->RX_maxSize) << 8U)
 8000796:	784a      	ldrb	r2, [r1, #1]
 8000798:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
             | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 800079c:	78ca      	ldrb	r2, [r1, #3]
             | (((uint32_t)capabilities->TXS_maxSize) << 14U)
 800079e:	ea43 338c 	orr.w	r3, r3, ip, lsl #14
             | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 80007a2:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 80007a6:	b2da      	uxtb	r2, r3
 80007a8:	f042 0205 	orr.w	r2, r2, #5
  header &= 0x0fffffffU;
 80007ac:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 80007b0:	5ca2      	ldrb	r2, [r4, r2]
 80007b2:	ea82 2211 	eor.w	r2, r2, r1, lsr #8
 80007b6:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 80007b8:	5ca2      	ldrb	r2, [r4, r2]
 80007ba:	ea82 4211 	eor.w	r2, r2, r1, lsr #16
 80007be:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 80007c0:	5ca2      	ldrb	r2, [r4, r2]
 80007c2:	4c12      	ldr	r4, [pc, #72]	@ (800080c <ASPEP_sendBeacon+0x88>)
 80007c4:	ea82 6211 	eor.w	r2, r2, r1, lsr #24
  *headerPtr |= (uint32_t)crc << 28;
 80007c8:	5ca2      	ldrb	r2, [r4, r2]
 80007ca:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80007ce:	f043 0305 	orr.w	r3, r3, #5
 80007d2:	6203      	str	r3, [r0, #32]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d4:	b672      	cpsid	i
  {
#endif
    /* Insert CRC header in the packet to send */
    ASPEP_ComputeHeaderCRC((uint32_t *)txBuffer); //cstat !MISRAC2012-Rule-11.5
    __disable_irq(); /*TODO: Disable High frequency task is enough */
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 80007d6:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 80007d8:	b14b      	cbz	r3, 80007ee <ASPEP_sendBeacon+0x6a>
  __ASM volatile ("cpsie i" : : : "memory");
 80007da:	b662      	cpsie	i
          pHandle->syncBuffer.length = bufferLength;
        }
      }
      else if(ASPEP_CTRL == dataType)
      {
        if (pHandle->ctrlBuffer.state != available)
 80007dc:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 80007e0:	b913      	cbnz	r3, 80007e8 <ASPEP_sendBeacon+0x64>
        {
          result = ASPEP_BUFFER_ERROR;
        }
        else
        {
          pHandle->ctrlBuffer.state = pending;
 80007e2:	2302      	movs	r3, #2
 80007e4:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
}
 80007e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80007ec:	4770      	bx	lr
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 80007ee:	f100 0120 	add.w	r1, r0, #32
        pHandle->ctrlBuffer.state = readLock;
 80007f2:	2303      	movs	r3, #3
 80007f4:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 80007f8:	6481      	str	r1, [r0, #72]	@ 0x48
 80007fa:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 80007fc:	2204      	movs	r2, #4
 80007fe:	6d83      	ldr	r3, [r0, #88]	@ 0x58
}
 8000800:	f85d 4b04 	ldr.w	r4, [sp], #4
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8000804:	6940      	ldr	r0, [r0, #20]
 8000806:	4718      	bx	r3
 8000808:	08008a0c 	.word	0x08008a0c
 800080c:	080089fc 	.word	0x080089fc

08000810 <ASPEP_sendPing>:
{
 8000810:	b430      	push	{r4, r5}
                   | (uint32_t)((uint32_t)cBit << 5U)
 8000812:	014b      	lsls	r3, r1, #5
    uint8_t Nbit = pHandle->syncPacketCount & 0x1U; /* Keep only LSB */
 8000814:	f890 c060 	ldrb.w	ip, [r0, #96]	@ 0x60
    uint8_t ipID = pHandle->liid & 0xFU;
 8000818:	f890 4063 	ldrb.w	r4, [r0, #99]	@ 0x63
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 800081c:	4d1d      	ldr	r5, [pc, #116]	@ (8000894 <ASPEP_sendPing+0x84>)
                   | (uint32_t)((uint32_t)cBit << 5U)
 800081e:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000822:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
                   | (uint32_t)((uint32_t)Nbit << 6U)
 8000826:	f00c 0101 	and.w	r1, ip, #1
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 800082a:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800082e:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
                   | (uint32_t)((uint32_t)ipID << 8U)
 8000832:	f004 040f 	and.w	r4, r4, #15
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000836:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 800083a:	b2da      	uxtb	r2, r3
 800083c:	4c16      	ldr	r4, [pc, #88]	@ (8000898 <ASPEP_sendPing+0x88>)
 800083e:	f042 0206 	orr.w	r2, r2, #6
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000842:	f043 0106 	orr.w	r1, r3, #6
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000846:	5ca2      	ldrb	r2, [r4, r2]
 8000848:	ea82 2213 	eor.w	r2, r2, r3, lsr #8
 800084c:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 800084e:	5ca2      	ldrb	r2, [r4, r2]
 8000850:	ea82 4213 	eor.w	r2, r2, r3, lsr #16
 8000854:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000856:	5ca2      	ldrb	r2, [r4, r2]
 8000858:	ea82 6313 	eor.w	r3, r2, r3, lsr #24
  *headerPtr |= (uint32_t)crc << 28;
 800085c:	5ceb      	ldrb	r3, [r5, r3]
 800085e:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
 8000862:	6203      	str	r3, [r0, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8000864:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8000866:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8000868:	b143      	cbz	r3, 800087c <ASPEP_sendPing+0x6c>
  __ASM volatile ("cpsie i" : : : "memory");
 800086a:	b662      	cpsie	i
        if (pHandle->ctrlBuffer.state != available)
 800086c:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8000870:	b913      	cbnz	r3, 8000878 <ASPEP_sendPing+0x68>
          pHandle->ctrlBuffer.state = pending;
 8000872:	2302      	movs	r3, #2
 8000874:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
}
 8000878:	bc30      	pop	{r4, r5}
 800087a:	4770      	bx	lr
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 800087c:	f100 0120 	add.w	r1, r0, #32
        pHandle->ctrlBuffer.state = readLock;
 8000880:	2303      	movs	r3, #3
 8000882:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8000886:	6481      	str	r1, [r0, #72]	@ 0x48
 8000888:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 800088a:	2204      	movs	r2, #4
 800088c:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 800088e:	6940      	ldr	r0, [r0, #20]
}
 8000890:	bc30      	pop	{r4, r5}
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8000892:	4718      	bx	r3
 8000894:	080089fc 	.word	0x080089fc
 8000898:	08008a0c 	.word	0x08008a0c

0800089c <ASPEP_getBuffer>:
    if (MCTL_SYNC == syncAsync)
 800089c:	2a0a      	cmp	r2, #10
 800089e:	d009      	beq.n	80008b4 <ASPEP_getBuffer+0x18>
      if ((pHandle->asyncBufferA.state > writeLock) && (pHandle->asyncBufferB.state > writeLock))
 80008a0:	f890 3036 	ldrb.w	r3, [r0, #54]	@ 0x36
 80008a4:	2b01      	cmp	r3, #1
 80008a6:	d91d      	bls.n	80008e4 <ASPEP_getBuffer+0x48>
 80008a8:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 80008ac:	2b01      	cmp	r3, #1
 80008ae:	d90d      	bls.n	80008cc <ASPEP_getBuffer+0x30>
        result = false;
 80008b0:	2000      	movs	r0, #0
}
 80008b2:	4770      	bx	lr
      if (pHandle->syncBuffer.state <= writeLock) /* Possible values are free or writeLock*/
 80008b4:	f890 302e 	ldrb.w	r3, [r0, #46]	@ 0x2e
 80008b8:	2b01      	cmp	r3, #1
 80008ba:	d8f9      	bhi.n	80008b0 <ASPEP_getBuffer+0x14>
        *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 80008bc:	6a83      	ldr	r3, [r0, #40]	@ 0x28
        pHandle->syncBuffer.state = writeLock;
 80008be:	2201      	movs	r2, #1
        *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 80008c0:	3304      	adds	r3, #4
 80008c2:	600b      	str	r3, [r1, #0]
        pHandle->syncBuffer.state = writeLock;
 80008c4:	f880 202e 	strb.w	r2, [r0, #46]	@ 0x2e
  bool result = true;
 80008c8:	2001      	movs	r0, #1
 80008ca:	4770      	bx	lr
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 80008cc:	6b83      	ldr	r3, [r0, #56]	@ 0x38
          pHandle->asyncBufferB.state = writeLock;
 80008ce:	f04f 0c01 	mov.w	ip, #1
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferB;
 80008d2:	f100 0238 	add.w	r2, r0, #56	@ 0x38
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 80008d6:	3304      	adds	r3, #4
          pHandle->asyncBufferB.state = writeLock;
 80008d8:	f880 c03e 	strb.w	ip, [r0, #62]	@ 0x3e
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferB;
 80008dc:	6402      	str	r2, [r0, #64]	@ 0x40
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 80008de:	600b      	str	r3, [r1, #0]
  bool result = true;
 80008e0:	2001      	movs	r0, #1
 80008e2:	4770      	bx	lr
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 80008e4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
          pHandle->asyncBufferA.state = writeLock;
 80008e6:	f04f 0c01 	mov.w	ip, #1
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferA;
 80008ea:	f100 0230 	add.w	r2, r0, #48	@ 0x30
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 80008ee:	3304      	adds	r3, #4
          pHandle->asyncBufferA.state = writeLock;
 80008f0:	f880 c036 	strb.w	ip, [r0, #54]	@ 0x36
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferA;
 80008f4:	6402      	str	r2, [r0, #64]	@ 0x40
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 80008f6:	600b      	str	r3, [r1, #0]
 80008f8:	e7f2      	b.n	80008e0 <ASPEP_getBuffer+0x44>
 80008fa:	bf00      	nop

080008fc <ASPEP_sendPacket>:
{
 80008fc:	4684      	mov	ip, r0
    if (ASPEP_CONNECTED == pHandle-> ASPEP_State)
 80008fe:	f890 0064 	ldrb.w	r0, [r0, #100]	@ 0x64
 8000902:	2802      	cmp	r0, #2
 8000904:	d001      	beq.n	800090a <ASPEP_sendPacket+0xe>
      result = ASPEP_NOT_CONNECTED;
 8000906:	2002      	movs	r0, #2
 8000908:	4770      	bx	lr
      tmpHeader = ((uint32_t)((uint32_t)txDataLengthTemp << (uint32_t)4) | (uint32_t)syncAsync);
 800090a:	ea43 1002 	orr.w	r0, r3, r2, lsl #4
      *header = tmpHeader;
 800090e:	f841 0c04 	str.w	r0, [r1, #-4]
      if (1U == pHandle->Capabilities.DATA_CRC)
 8000912:	f89c 006c 	ldrb.w	r0, [ip, #108]	@ 0x6c
 8000916:	2801      	cmp	r0, #1
 8000918:	d104      	bne.n	8000924 <ASPEP_sendPacket+0x28>
        packet[txDataLengthTemp] = (uint8_t)0xCA; /* Dummy CRC */
 800091a:	f64f 60ca 	movw	r0, #65226	@ 0xfeca
 800091e:	5288      	strh	r0, [r1, r2]
        txDataLengthTemp += (uint16_t)ASPEP_DATACRC_SIZE;
 8000920:	3202      	adds	r2, #2
 8000922:	b292      	uxth	r2, r2
      if (MCTL_SYNC == syncAsync)
 8000924:	2b0a      	cmp	r3, #10
 8000926:	d105      	bne.n	8000934 <ASPEP_sendPacket+0x38>
        if (pSupHandle->MCP_PacketAvailable)
 8000928:	f89c 0010 	ldrb.w	r0, [ip, #16]
 800092c:	b348      	cbz	r0, 8000982 <ASPEP_sendPacket+0x86>
          pSupHandle->MCP_PacketAvailable = false; /* CMD from controller is processed*/
 800092e:	2000      	movs	r0, #0
 8000930:	f88c 0010 	strb.w	r0, [ip, #16]
  uint32_t header = *headerPtr;
 8000934:	f851 0c04 	ldr.w	r0, [r1, #-4]
{
 8000938:	b570      	push	{r4, r5, r6, lr}
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 800093a:	4d34      	ldr	r5, [pc, #208]	@ (8000a0c <ASPEP_sendPacket+0x110>)
 800093c:	b2c4      	uxtb	r4, r0
        result = ASPEP_TXframeProcess(pHandle, syncAsync, header, txDataLengthTemp + (uint16_t)ASPEP_HEADER_SIZE);
 800093e:	3204      	adds	r2, #4
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000940:	5d2e      	ldrb	r6, [r5, r4]
 8000942:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8000946:	4074      	eors	r4, r6
      header--; /* Header ues 4*8 bits on top of txBuffer*/
 8000948:	f1a1 0e04 	sub.w	lr, r1, #4
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 800094c:	5d2e      	ldrb	r6, [r5, r4]
 800094e:	f3c0 4407 	ubfx	r4, r0, #16, #8
 8000952:	4074      	eors	r4, r6
        result = ASPEP_TXframeProcess(pHandle, syncAsync, header, txDataLengthTemp + (uint16_t)ASPEP_HEADER_SIZE);
 8000954:	b292      	uxth	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000956:	5d2c      	ldrb	r4, [r5, r4]
 8000958:	f3c0 6503 	ubfx	r5, r0, #24, #4
 800095c:	406c      	eors	r4, r5
 800095e:	4d2c      	ldr	r5, [pc, #176]	@ (8000a10 <ASPEP_sendPacket+0x114>)
  *headerPtr |= (uint32_t)crc << 28;
 8000960:	5d2c      	ldrb	r4, [r5, r4]
 8000962:	ea40 7004 	orr.w	r0, r0, r4, lsl #28
 8000966:	f841 0c04 	str.w	r0, [r1, #-4]
  __ASM volatile ("cpsid i" : : : "memory");
 800096a:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 800096c:	f8dc 1048 	ldr.w	r1, [ip, #72]	@ 0x48
 8000970:	b1b9      	cbz	r1, 80009a2 <ASPEP_sendPacket+0xa6>
  __ASM volatile ("cpsie i" : : : "memory");
 8000972:	b662      	cpsie	i
      if (MCTL_ASYNC == dataType)
 8000974:	2b09      	cmp	r3, #9
 8000976:	d006      	beq.n	8000986 <ASPEP_sendPacket+0x8a>
      else if (MCTL_SYNC == dataType)
 8000978:	2b0a      	cmp	r3, #10
 800097a:	d02a      	beq.n	80009d2 <ASPEP_sendPacket+0xd6>
      else if(ASPEP_CTRL == dataType)
 800097c:	b37b      	cbz	r3, 80009de <ASPEP_sendPacket+0xe2>
  uint8_t result = ASPEP_OK;
 800097e:	2000      	movs	r0, #0
}
 8000980:	bd70      	pop	{r4, r5, r6, pc}
          result = MCTL_SYNC_NOT_EXPECTED;
 8000982:	2001      	movs	r0, #1
}
 8000984:	4770      	bx	lr
        if (txBuffer != (uint8_t *)pHandle->lastRequestedAsyncBuff->buffer)
 8000986:	f8dc 3040 	ldr.w	r3, [ip, #64]	@ 0x40
 800098a:	6819      	ldr	r1, [r3, #0]
  uint8_t result = ASPEP_OK;
 800098c:	458e      	cmp	lr, r1
 800098e:	bf14      	ite	ne
 8000990:	2003      	movne	r0, #3
 8000992:	2000      	moveq	r0, #0
        if (NULL == pHandle->asyncNextBuffer)
 8000994:	f8dc 1044 	ldr.w	r1, [ip, #68]	@ 0x44
 8000998:	b3a1      	cbz	r1, 8000a04 <ASPEP_sendPacket+0x108>
        pHandle->lastRequestedAsyncBuff->state = pending;
 800099a:	2102      	movs	r1, #2
 800099c:	7199      	strb	r1, [r3, #6]
        pHandle->lastRequestedAsyncBuff->length = bufferLength;
 800099e:	809a      	strh	r2, [r3, #4]
}
 80009a0:	bd70      	pop	{r4, r5, r6, pc}
      if (MCTL_ASYNC == dataType)
 80009a2:	2b09      	cmp	r3, #9
 80009a4:	d029      	beq.n	80009fa <ASPEP_sendPacket+0xfe>
      else if (MCTL_SYNC == dataType)
 80009a6:	2b0a      	cmp	r3, #10
        pHandle->syncBuffer.state = readLock;
 80009a8:	f04f 0303 	mov.w	r3, #3
 80009ac:	bf0b      	itete	eq
 80009ae:	f88c 302e 	strbeq.w	r3, [ip, #46]	@ 0x2e
        pHandle->ctrlBuffer.state = readLock;
 80009b2:	f88c 3024 	strbne.w	r3, [ip, #36]	@ 0x24
        pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 80009b6:	f10c 0328 	addeq.w	r3, ip, #40	@ 0x28
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 80009ba:	f10c 0320 	addne.w	r3, ip, #32
        pHandle->lockBuffer = (void *)pHandle->lastRequestedAsyncBuff;
 80009be:	f8cc 3048 	str.w	r3, [ip, #72]	@ 0x48
 80009c2:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 80009c4:	f8dc 3058 	ldr.w	r3, [ip, #88]	@ 0x58
 80009c8:	f8dc 0014 	ldr.w	r0, [ip, #20]
 80009cc:	4671      	mov	r1, lr
 80009ce:	4798      	blx	r3
 80009d0:	e7d5      	b.n	800097e <ASPEP_sendPacket+0x82>
        if (pHandle -> syncBuffer.state != writeLock)
 80009d2:	f89c 302e 	ldrb.w	r3, [ip, #46]	@ 0x2e
 80009d6:	2b01      	cmp	r3, #1
 80009d8:	d009      	beq.n	80009ee <ASPEP_sendPacket+0xf2>
          result = ASPEP_BUFFER_ERROR;
 80009da:	2003      	movs	r0, #3
}
 80009dc:	bd70      	pop	{r4, r5, r6, pc}
        if (pHandle->ctrlBuffer.state != available)
 80009de:	f89c 3024 	ldrb.w	r3, [ip, #36]	@ 0x24
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d1f9      	bne.n	80009da <ASPEP_sendPacket+0xde>
          pHandle->ctrlBuffer.state = pending;
 80009e6:	2302      	movs	r3, #2
 80009e8:	f88c 3024 	strb.w	r3, [ip, #36]	@ 0x24
 80009ec:	e7c7      	b.n	800097e <ASPEP_sendPacket+0x82>
          pHandle->syncBuffer.state = pending;
 80009ee:	2302      	movs	r3, #2
 80009f0:	f88c 302e 	strb.w	r3, [ip, #46]	@ 0x2e
          pHandle->syncBuffer.length = bufferLength;
 80009f4:	f8ac 202c 	strh.w	r2, [ip, #44]	@ 0x2c
 80009f8:	e7c1      	b.n	800097e <ASPEP_sendPacket+0x82>
        pHandle->lastRequestedAsyncBuff->state = readLock;
 80009fa:	f8dc 3040 	ldr.w	r3, [ip, #64]	@ 0x40
 80009fe:	2103      	movs	r1, #3
 8000a00:	7199      	strb	r1, [r3, #6]
        pHandle->lockBuffer = (void *)pHandle->lastRequestedAsyncBuff;
 8000a02:	e7dc      	b.n	80009be <ASPEP_sendPacket+0xc2>
          pHandle->asyncNextBuffer = pHandle->lastRequestedAsyncBuff;
 8000a04:	f8cc 3044 	str.w	r3, [ip, #68]	@ 0x44
 8000a08:	e7c7      	b.n	800099a <ASPEP_sendPacket+0x9e>
 8000a0a:	bf00      	nop
 8000a0c:	08008a0c 	.word	0x08008a0c
 8000a10:	080089fc 	.word	0x080089fc

08000a14 <ASPEP_HWDataTransmittedIT>:
  * Therefore, there is no need to protect this ISR against another higher priority ISR (HF Task).
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_HWDataTransmittedIT(ASPEP_Handle_t *pHandle)
{
 8000a14:	b510      	push	{r4, lr}
  }
  else
  {
#endif
    /* First free previous readLock buffer */
    if (pHandle->ctrlBuffer.state == readLock)
 8000a16:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8000a1a:	2b03      	cmp	r3, #3
{
 8000a1c:	4604      	mov	r4, r0
    if (pHandle->ctrlBuffer.state == readLock)
 8000a1e:	d013      	beq.n	8000a48 <ASPEP_HWDataTransmittedIT+0x34>
      pHandle->ctrlBuffer.state = available;
    }
    else /* if previous buffer was not ASPEP_CTRL, then the buffer locked is a MCTL_Buff_t */
    {
      MCTL_Buff_t *tempBuff = (MCTL_Buff_t *)pHandle->lockBuffer; //cstat !MISRAC2012-Rule-11.5
      tempBuff->state = available;
 8000a20:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 8000a22:	2100      	movs	r1, #0
 8000a24:	7191      	strb	r1, [r2, #6]
    }
    if (pHandle->syncBuffer.state == pending)
 8000a26:	f890 202e 	ldrb.w	r2, [r0, #46]	@ 0x2e
 8000a2a:	2a02      	cmp	r2, #2
 8000a2c:	d013      	beq.n	8000a56 <ASPEP_HWDataTransmittedIT+0x42>
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
      pHandle->fASPEP_send(pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
      pHandle->syncBuffer.state = readLock;
    }
    /* Second prepare transfer of pending buffer */
    else if (pHandle->ctrlBuffer.state == pending)
 8000a2e:	2b02      	cmp	r3, #2
 8000a30:	d11d      	bne.n	8000a6e <ASPEP_HWDataTransmittedIT+0x5a>
    {
      pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 8000a32:	f100 0120 	add.w	r1, r0, #32
      pHandle->fASPEP_send(pHandle ->HWIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 8000a36:	6d83      	ldr	r3, [r0, #88]	@ 0x58
      pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 8000a38:	6481      	str	r1, [r0, #72]	@ 0x48
      pHandle->fASPEP_send(pHandle ->HWIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 8000a3a:	2204      	movs	r2, #4
 8000a3c:	6940      	ldr	r0, [r0, #20]
 8000a3e:	4798      	blx	r3
      pHandle->ctrlBuffer.state = readLock;
 8000a40:	2303      	movs	r3, #3
 8000a42:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
      __enable_irq();
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 8000a46:	bd10      	pop	{r4, pc}
    if (pHandle->syncBuffer.state == pending)
 8000a48:	f890 302e 	ldrb.w	r3, [r0, #46]	@ 0x2e
      pHandle->ctrlBuffer.state = available;
 8000a4c:	2200      	movs	r2, #0
    if (pHandle->syncBuffer.state == pending)
 8000a4e:	2b02      	cmp	r3, #2
      pHandle->ctrlBuffer.state = available;
 8000a50:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
    if (pHandle->syncBuffer.state == pending)
 8000a54:	d10b      	bne.n	8000a6e <ASPEP_HWDataTransmittedIT+0x5a>
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 8000a56:	f104 0028 	add.w	r0, r4, #40	@ 0x28
      pHandle->fASPEP_send(pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 8000a5a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 8000a5c:	64a0      	str	r0, [r4, #72]	@ 0x48
      pHandle->fASPEP_send(pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 8000a5e:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8000a60:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8000a62:	6960      	ldr	r0, [r4, #20]
 8000a64:	4798      	blx	r3
      pHandle->syncBuffer.state = readLock;
 8000a66:	2303      	movs	r3, #3
 8000a68:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
}
 8000a6c:	bd10      	pop	{r4, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 8000a6e:	b672      	cpsid	i
      if (pHandle->asyncNextBuffer != NULL)
 8000a70:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8000a72:	b1cb      	cbz	r3, 8000aa8 <ASPEP_HWDataTransmittedIT+0x94>
        pHandle->asyncNextBuffer->state = readLock;
 8000a74:	2203      	movs	r2, #3
        pHandle->lockBuffer = (void *)pHandle->asyncNextBuffer;
 8000a76:	64a3      	str	r3, [r4, #72]	@ 0x48
        pHandle->asyncNextBuffer->state = readLock;
 8000a78:	719a      	strb	r2, [r3, #6]
        pHandle->fASPEP_send(pHandle ->HWIp, pHandle->asyncNextBuffer->buffer, pHandle->asyncNextBuffer->length);
 8000a7a:	6819      	ldr	r1, [r3, #0]
 8000a7c:	889a      	ldrh	r2, [r3, #4]
 8000a7e:	6960      	ldr	r0, [r4, #20]
 8000a80:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8000a82:	4798      	blx	r3
        if ((pHandle->asyncBufferA.state == pending) || (pHandle->asyncBufferB.state == pending))
 8000a84:	f894 3036 	ldrb.w	r3, [r4, #54]	@ 0x36
 8000a88:	2b02      	cmp	r3, #2
 8000a8a:	d007      	beq.n	8000a9c <ASPEP_HWDataTransmittedIT+0x88>
 8000a8c:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8000a90:	2b02      	cmp	r3, #2
 8000a92:	d003      	beq.n	8000a9c <ASPEP_HWDataTransmittedIT+0x88>
          pHandle->asyncNextBuffer = NULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	6463      	str	r3, [r4, #68]	@ 0x44
  __ASM volatile ("cpsie i" : : : "memory");
 8000a98:	b662      	cpsie	i
}
 8000a9a:	bd10      	pop	{r4, pc}
          uint32_t temp = (uint32_t)&pHandle->asyncBufferA + (uint32_t)&pHandle->asyncBufferB
 8000a9c:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8000a9e:	0063      	lsls	r3, r4, #1
 8000aa0:	3368      	adds	r3, #104	@ 0x68
 8000aa2:	1a9b      	subs	r3, r3, r2
          pHandle->asyncNextBuffer = (MCTL_Buff_t *) temp; //cstat !MISRAC2012-Rule-11.4
 8000aa4:	6463      	str	r3, [r4, #68]	@ 0x44
        {
 8000aa6:	e7f7      	b.n	8000a98 <ASPEP_HWDataTransmittedIT+0x84>
        pHandle->lockBuffer = NULL;
 8000aa8:	64a3      	str	r3, [r4, #72]	@ 0x48
 8000aaa:	e7f5      	b.n	8000a98 <ASPEP_HWDataTransmittedIT+0x84>

08000aac <ASPEP_RXframeProcess>:
    uint16_t packetNumber;
#if VALID_CRC_DATA
    bool validCRCData = true;
#endif
    *packetLength = 0;
    if (pHandle->NewPacketAvailable)
 8000aac:	f890 3061 	ldrb.w	r3, [r0, #97]	@ 0x61
    uint32_t packetHeader = *((uint32_t *)pHandle->rxHeader); //cstat !MISRAC2012-Rule-11.3
 8000ab0:	69c2      	ldr	r2, [r0, #28]
    *packetLength = 0;
 8000ab2:	f04f 0c00 	mov.w	ip, #0
{
 8000ab6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aba:	4604      	mov	r4, r0
    *packetLength = 0;
 8000abc:	f8a1 c000 	strh.w	ip, [r1]
    if (pHandle->NewPacketAvailable)
 8000ac0:	b1cb      	cbz	r3, 8000af6 <ASPEP_RXframeProcess+0x4a>
    {
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
      switch (pHandle->ASPEP_State)
 8000ac2:	f890 3064 	ldrb.w	r3, [r0, #100]	@ 0x64
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
 8000ac6:	f880 c061 	strb.w	ip, [r0, #97]	@ 0x61
      switch (pHandle->ASPEP_State)
 8000aca:	2b01      	cmp	r3, #1
 8000acc:	d055      	beq.n	8000b7a <ASPEP_RXframeProcess+0xce>
 8000ace:	2b02      	cmp	r3, #2
 8000ad0:	d018      	beq.n	8000b04 <ASPEP_RXframeProcess+0x58>
 8000ad2:	b933      	cbnz	r3, 8000ae2 <ASPEP_RXframeProcess+0x36>
      {
        case ASPEP_IDLE:
        {
          if (BEACON == pHandle->rxPacketType)
 8000ad4:	6e81      	ldr	r1, [r0, #104]	@ 0x68
 8000ad6:	2905      	cmp	r1, #5
 8000ad8:	f000 80e3 	beq.w	8000ca2 <ASPEP_RXframeProcess+0x1f6>
              /* Nothing to do, controller has to send back new beacon with matching capabilities */
            }
            /* Beacon Packet must be answered*/
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
          }
          else if (PING == pHandle->rxPacketType)
 8000adc:	2906      	cmp	r1, #6
 8000ade:	f000 8129 	beq.w	8000d34 <ASPEP_RXframeProcess+0x288>
  uint8_t *result = NULL; //cstat !MISRAC2012-Rule-8.13
 8000ae2:	2500      	movs	r5, #0

        default:
          break;
      }
      /* The valid received packet is now safely consumes, we are ready to receive a new packet */
      pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000ae4:	6960      	ldr	r0, [r4, #20]
 8000ae6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8000ae8:	2204      	movs	r2, #4
 8000aea:	f104 011c 	add.w	r1, r4, #28
 8000aee:	4798      	blx	r3
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
  return (result);
}
 8000af0:	4628      	mov	r0, r5
 8000af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if (pHandle->badPacketFlag > ASPEP_OK)
 8000af6:	f890 3062 	ldrb.w	r3, [r0, #98]	@ 0x62
 8000afa:	b9bb      	cbnz	r3, 8000b2c <ASPEP_RXframeProcess+0x80>
  uint8_t *result = NULL; //cstat !MISRAC2012-Rule-8.13
 8000afc:	2500      	movs	r5, #0
}
 8000afe:	4628      	mov	r0, r5
 8000b00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if (BEACON == pHandle->rxPacketType)
 8000b04:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8000b06:	2b05      	cmp	r3, #5
 8000b08:	d045      	beq.n	8000b96 <ASPEP_RXframeProcess+0xea>
          else if (PING == pHandle->rxPacketType)
 8000b0a:	2b06      	cmp	r3, #6
 8000b0c:	f000 8118 	beq.w	8000d40 <ASPEP_RXframeProcess+0x294>
          else if (DATA_PACKET == pHandle->rxPacketType)
 8000b10:	2b09      	cmp	r3, #9
 8000b12:	d1e6      	bne.n	8000ae2 <ASPEP_RXframeProcess+0x36>
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from controller */
 8000b14:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
              *packetLength = pHandle->rxLength;
 8000b18:	f8b0 205c 	ldrh.w	r2, [r0, #92]	@ 0x5c
              result = pHandle->rxBuffer;
 8000b1c:	69a5      	ldr	r5, [r4, #24]
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from controller */
 8000b1e:	3301      	adds	r3, #1
              pSupHandle->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 8000b20:	2001      	movs	r0, #1
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from controller */
 8000b22:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
              pSupHandle->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 8000b26:	7420      	strb	r0, [r4, #16]
              *packetLength = pHandle->rxLength;
 8000b28:	800a      	strh	r2, [r1, #0]
              result = pHandle->rxBuffer;
 8000b2a:	e7db      	b.n	8000ae4 <ASPEP_RXframeProcess+0x38>
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 8000b2c:	eb03 2303 	add.w	r3, r3, r3, lsl #8
 8000b30:	021b      	lsls	r3, r3, #8
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000b32:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8000b36:	488b      	ldr	r0, [pc, #556]	@ (8000d64 <ASPEP_RXframeProcess+0x2b8>)
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000b38:	4d8b      	ldr	r5, [pc, #556]	@ (8000d68 <ASPEP_RXframeProcess+0x2bc>)
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000b3a:	f082 0209 	eor.w	r2, r2, #9
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 8000b3e:	f043 010f 	orr.w	r1, r3, #15
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000b42:	5c82      	ldrb	r2, [r0, r2]
 8000b44:	ea82 4313 	eor.w	r3, r2, r3, lsr #16
 8000b48:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000b4a:	5cc3      	ldrb	r3, [r0, r3]
  *headerPtr |= (uint32_t)crc << 28;
 8000b4c:	5ceb      	ldrb	r3, [r5, r3]
 8000b4e:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
 8000b52:	6223      	str	r3, [r4, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8000b54:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8000b56:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	f000 80f6 	beq.w	8000d4a <ASPEP_RXframeProcess+0x29e>
  __ASM volatile ("cpsie i" : : : "memory");
 8000b5e:	b662      	cpsie	i
        if (pHandle->ctrlBuffer.state != available)
 8000b60:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 8000b64:	b913      	cbnz	r3, 8000b6c <ASPEP_RXframeProcess+0xc0>
          pHandle->ctrlBuffer.state = pending;
 8000b66:	2302      	movs	r3, #2
 8000b68:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
      pHandle->badPacketFlag = ASPEP_OK;
 8000b6c:	2200      	movs	r2, #0
      pHandle->fASPEP_HWSync(pHandle->HWIp);
 8000b6e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8000b70:	6960      	ldr	r0, [r4, #20]
      pHandle->badPacketFlag = ASPEP_OK;
 8000b72:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
      pHandle->fASPEP_HWSync(pHandle->HWIp);
 8000b76:	4798      	blx	r3
 8000b78:	e7c0      	b.n	8000afc <ASPEP_RXframeProcess+0x50>
          if (BEACON == pHandle->rxPacketType)
 8000b7a:	6e81      	ldr	r1, [r0, #104]	@ 0x68
 8000b7c:	2905      	cmp	r1, #5
 8000b7e:	d04f      	beq.n	8000c20 <ASPEP_RXframeProcess+0x174>
          else if (PING == pHandle->rxPacketType)
 8000b80:	2906      	cmp	r1, #6
 8000b82:	d1ae      	bne.n	8000ae2 <ASPEP_RXframeProcess+0x36>
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 8000b84:	4619      	mov	r1, r3
 8000b86:	f3c2 320f 	ubfx	r2, r2, #12, #16
 8000b8a:	f7ff fe41 	bl	8000810 <ASPEP_sendPing>
            pHandle->ASPEP_State = ASPEP_CONNECTED;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	f884 3064 	strb.w	r3, [r4, #100]	@ 0x64
 8000b94:	e7a5      	b.n	8000ae2 <ASPEP_RXframeProcess+0x36>
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000b96:	f894 e01d 	ldrb.w	lr, [r4, #29]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000b9a:	f894 506d 	ldrb.w	r5, [r4, #109]	@ 0x6d
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8000b9e:	7f00      	ldrb	r0, [r0, #28]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000ba0:	f894 606c 	ldrb.w	r6, [r4, #108]	@ 0x6c
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000ba4:	f894 706e 	ldrb.w	r7, [r4, #110]	@ 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000ba8:	f894 906f 	ldrb.w	r9, [r4, #111]	@ 0x6f
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000bac:	f00e 0e3f 	and.w	lr, lr, #63	@ 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8000bb0:	09c0      	lsrs	r0, r0, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000bb2:	4575      	cmp	r5, lr
 8000bb4:	bf28      	it	cs
 8000bb6:	4675      	movcs	r5, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000bb8:	42b0      	cmp	r0, r6
 8000bba:	4601      	mov	r1, r0
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000bbc:	f3c2 3886 	ubfx	r8, r2, #14, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000bc0:	bf28      	it	cs
 8000bc2:	4631      	movcs	r1, r6
 8000bc4:	4663      	mov	r3, ip
 8000bc6:	f361 0307 	bfi	r3, r1, #0, #8
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 8000bca:	f3c2 5a46 	ubfx	sl, r2, #21, #7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000bce:	45b8      	cmp	r8, r7
 8000bd0:	4641      	mov	r1, r8
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000bd2:	f365 230f 	bfi	r3, r5, #8, #8
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000bd6:	bf28      	it	cs
 8000bd8:	4639      	movcs	r1, r7
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000bda:	45ca      	cmp	sl, r9
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000bdc:	f361 4317 	bfi	r3, r1, #16, #8
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000be0:	4651      	mov	r1, sl
 8000be2:	bf28      	it	cs
 8000be4:	4649      	movcs	r1, r9
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000be6:	f361 631f 	bfi	r3, r1, #24, #8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000bea:	42b0      	cmp	r0, r6
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000bec:	66e3      	str	r3, [r4, #108]	@ 0x6c
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000bee:	f104 016c 	add.w	r1, r4, #108	@ 0x6c
 8000bf2:	d80f      	bhi.n	8000c14 <ASPEP_RXframeProcess+0x168>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8000bf4:	45ae      	cmp	lr, r5
 8000bf6:	d80d      	bhi.n	8000c14 <ASPEP_RXframeProcess+0x168>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8000bf8:	45b8      	cmp	r8, r7
 8000bfa:	d80b      	bhi.n	8000c14 <ASPEP_RXframeProcess+0x168>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8000bfc:	45ca      	cmp	sl, r9
 8000bfe:	d809      	bhi.n	8000c14 <ASPEP_RXframeProcess+0x168>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000c00:	f894 c070 	ldrb.w	ip, [r4, #112]	@ 0x70
 8000c04:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8000c08:	ebac 0c02 	sub.w	ip, ip, r2
 8000c0c:	fabc fc8c 	clz	ip, ip
 8000c10:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8000c14:	f884 c064 	strb.w	ip, [r4, #100]	@ 0x64
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
 8000c18:	4620      	mov	r0, r4
 8000c1a:	f7ff fdb3 	bl	8000784 <ASPEP_sendBeacon>
 8000c1e:	e760      	b.n	8000ae2 <ASPEP_RXframeProcess+0x36>
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000c20:	7f45      	ldrb	r5, [r0, #29]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000c22:	f890 606c 	ldrb.w	r6, [r0, #108]	@ 0x6c
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8000c26:	7f01      	ldrb	r1, [r0, #28]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000c28:	f890 006d 	ldrb.w	r0, [r0, #109]	@ 0x6d
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000c2c:	f894 706e 	ldrb.w	r7, [r4, #110]	@ 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000c30:	f894 e06f 	ldrb.w	lr, [r4, #111]	@ 0x6f
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000c34:	f005 053f 	and.w	r5, r5, #63	@ 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8000c38:	09c9      	lsrs	r1, r1, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000c3a:	42a8      	cmp	r0, r5
 8000c3c:	bf28      	it	cs
 8000c3e:	4628      	movcs	r0, r5
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000c40:	42b1      	cmp	r1, r6
 8000c42:	4663      	mov	r3, ip
 8000c44:	468c      	mov	ip, r1
 8000c46:	bf28      	it	cs
 8000c48:	46b4      	movcs	ip, r6
 8000c4a:	f36c 0307 	bfi	r3, ip, #0, #8
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000c4e:	f3c2 3c86 	ubfx	ip, r2, #14, #7
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 8000c52:	f3c2 5846 	ubfx	r8, r2, #21, #7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000c56:	45bc      	cmp	ip, r7
 8000c58:	46e1      	mov	r9, ip
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000c5a:	f360 230f 	bfi	r3, r0, #8, #8
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000c5e:	bf28      	it	cs
 8000c60:	46b9      	movcs	r9, r7
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000c62:	45f0      	cmp	r8, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000c64:	f369 4317 	bfi	r3, r9, #16, #8
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000c68:	46c1      	mov	r9, r8
 8000c6a:	bf28      	it	cs
 8000c6c:	46f1      	movcs	r9, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000c6e:	f369 631f 	bfi	r3, r9, #24, #8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000c72:	42b1      	cmp	r1, r6
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000c74:	66e3      	str	r3, [r4, #108]	@ 0x6c
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000c76:	d80b      	bhi.n	8000c90 <ASPEP_RXframeProcess+0x1e4>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8000c78:	4285      	cmp	r5, r0
 8000c7a:	d809      	bhi.n	8000c90 <ASPEP_RXframeProcess+0x1e4>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8000c7c:	45bc      	cmp	ip, r7
 8000c7e:	d807      	bhi.n	8000c90 <ASPEP_RXframeProcess+0x1e4>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8000c80:	45f0      	cmp	r8, lr
 8000c82:	d805      	bhi.n	8000c90 <ASPEP_RXframeProcess+0x1e4>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000c84:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 8000c88:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d002      	beq.n	8000c96 <ASPEP_RXframeProcess+0x1ea>
              pHandle->ASPEP_State = ASPEP_IDLE;
 8000c90:	2300      	movs	r3, #0
 8000c92:	f884 3064 	strb.w	r3, [r4, #100]	@ 0x64
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
 8000c96:	f104 016c 	add.w	r1, r4, #108	@ 0x6c
 8000c9a:	4620      	mov	r0, r4
 8000c9c:	f7ff fd72 	bl	8000784 <ASPEP_sendBeacon>
 8000ca0:	e71f      	b.n	8000ae2 <ASPEP_RXframeProcess+0x36>
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000ca2:	f890 c01d 	ldrb.w	ip, [r0, #29]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000ca6:	f890 106d 	ldrb.w	r1, [r0, #109]	@ 0x6d
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8000caa:	7f05      	ldrb	r5, [r0, #28]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000cac:	f890 606c 	ldrb.w	r6, [r0, #108]	@ 0x6c
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000cb0:	f890 706e 	ldrb.w	r7, [r0, #110]	@ 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000cb4:	f894 906f 	ldrb.w	r9, [r4, #111]	@ 0x6f
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000cb8:	f00c 0c3f 	and.w	ip, ip, #63	@ 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8000cbc:	09ed      	lsrs	r5, r5, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000cbe:	4561      	cmp	r1, ip
 8000cc0:	bf28      	it	cs
 8000cc2:	4661      	movcs	r1, ip
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000cc4:	42b5      	cmp	r5, r6
 8000cc6:	4628      	mov	r0, r5
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000cc8:	f3c2 3886 	ubfx	r8, r2, #14, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000ccc:	bf28      	it	cs
 8000cce:	4630      	movcs	r0, r6
 8000cd0:	f360 0307 	bfi	r3, r0, #0, #8
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 8000cd4:	f3c2 5a46 	ubfx	sl, r2, #21, #7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000cd8:	45b8      	cmp	r8, r7
 8000cda:	4640      	mov	r0, r8
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000cdc:	f361 230f 	bfi	r3, r1, #8, #8
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000ce0:	bf28      	it	cs
 8000ce2:	4638      	movcs	r0, r7
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000ce4:	45ca      	cmp	sl, r9
 8000ce6:	46d6      	mov	lr, sl
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000ce8:	f360 4317 	bfi	r3, r0, #16, #8
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000cec:	bf28      	it	cs
 8000cee:	46ce      	movcs	lr, r9
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000cf0:	f36e 631f 	bfi	r3, lr, #24, #8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000cf4:	42b5      	cmp	r5, r6
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000cf6:	66e3      	str	r3, [r4, #108]	@ 0x6c
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000cf8:	d8cd      	bhi.n	8000c96 <ASPEP_RXframeProcess+0x1ea>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8000cfa:	458c      	cmp	ip, r1
 8000cfc:	d8cb      	bhi.n	8000c96 <ASPEP_RXframeProcess+0x1ea>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8000cfe:	45b8      	cmp	r8, r7
 8000d00:	d8c9      	bhi.n	8000c96 <ASPEP_RXframeProcess+0x1ea>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8000d02:	45ca      	cmp	sl, r9
 8000d04:	d8c7      	bhi.n	8000c96 <ASPEP_RXframeProcess+0x1ea>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000d06:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 8000d0a:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d1c1      	bne.n	8000c96 <ASPEP_RXframeProcess+0x1ea>
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000d12:	1c4b      	adds	r3, r1, #1
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000d14:	1c42      	adds	r2, r0, #1
 8000d16:	b2d2      	uxtb	r2, r2
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000d18:	b2db      	uxtb	r3, r3
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000d1a:	0152      	lsls	r2, r2, #5
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
 8000d1c:	ea4f 1e8e 	mov.w	lr, lr, lsl #6
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000d20:	015b      	lsls	r3, r3, #5
              pHandle->ASPEP_State = ASPEP_CONFIGURED;
 8000d22:	2101      	movs	r1, #1
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000d24:	81a2      	strh	r2, [r4, #12]
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
 8000d26:	f8a4 e00e 	strh.w	lr, [r4, #14]
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000d2a:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
              pHandle->ASPEP_State = ASPEP_CONFIGURED;
 8000d2e:	f884 1064 	strb.w	r1, [r4, #100]	@ 0x64
 8000d32:	e7b0      	b.n	8000c96 <ASPEP_RXframeProcess+0x1ea>
            ASPEP_sendPing(pHandle, ASPEP_PING_RESET, packetNumber);
 8000d34:	f3c2 320f 	ubfx	r2, r2, #12, #16
 8000d38:	4619      	mov	r1, r3
 8000d3a:	f7ff fd69 	bl	8000810 <ASPEP_sendPing>
 8000d3e:	e6d0      	b.n	8000ae2 <ASPEP_RXframeProcess+0x36>
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 8000d40:	7f42      	ldrb	r2, [r0, #29]
 8000d42:	2101      	movs	r1, #1
 8000d44:	f7ff fd64 	bl	8000810 <ASPEP_sendPing>
 8000d48:	e6cb      	b.n	8000ae2 <ASPEP_RXframeProcess+0x36>
  (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8000d4a:	f104 0120 	add.w	r1, r4, #32
        pHandle->ctrlBuffer.state = readLock;
 8000d4e:	2303      	movs	r3, #3
 8000d50:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8000d54:	64a1      	str	r1, [r4, #72]	@ 0x48
 8000d56:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8000d58:	2204      	movs	r2, #4
 8000d5a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8000d5c:	6960      	ldr	r0, [r4, #20]
 8000d5e:	4798      	blx	r3
 8000d60:	e704      	b.n	8000b6c <ASPEP_RXframeProcess+0xc0>
 8000d62:	bf00      	nop
 8000d64:	08008a0c 	.word	0x08008a0c
 8000d68:	080089fc 	.word	0x080089fc

08000d6c <ASPEP_HWDataReceivedIT>:
  * If the packet received contains an error in the header, the HW IP will be re-synchronised first, and DMA will be configured after.
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_HWDataReceivedIT(ASPEP_Handle_t *pHandle)
{
 8000d6c:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    switch (pHandle->ASPEP_TL_State)
 8000d6e:	f890 3065 	ldrb.w	r3, [r0, #101]	@ 0x65
{
 8000d72:	4604      	mov	r4, r0
    switch (pHandle->ASPEP_TL_State)
 8000d74:	b13b      	cbz	r3, 8000d86 <ASPEP_HWDataReceivedIT+0x1a>
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d104      	bne.n	8000d84 <ASPEP_HWDataReceivedIT+0x18>
        break;
      }

      case WAITING_PAYLOAD:
      {
        pHandle->ASPEP_TL_State = WAITING_PACKET;
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	f880 2065 	strb.w	r2, [r0, #101]	@ 0x65
        /* Payload received, */
        pHandle->NewPacketAvailable = true;
 8000d80:	f880 3061 	strb.w	r3, [r0, #97]	@ 0x61
        break;
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 8000d84:	bd10      	pop	{r4, pc}
        if (ASPEP_CheckHeaderCRC(*(uint32_t *)pHandle->rxHeader) == true) //cstat !MISRAC2012-Rule-11.3
 8000d86:	69c1      	ldr	r1, [r0, #28]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000d88:	4a1e      	ldr	r2, [pc, #120]	@ (8000e04 <ASPEP_HWDataReceivedIT+0x98>)
 8000d8a:	b2cb      	uxtb	r3, r1
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000d8c:	5cd3      	ldrb	r3, [r2, r3]
 8000d8e:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 8000d92:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000d94:	5cd3      	ldrb	r3, [r2, r3]
 8000d96:	ea83 4311 	eor.w	r3, r3, r1, lsr #16
 8000d9a:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 24U) & 0xffU)];
 8000d9c:	5cd3      	ldrb	r3, [r2, r3]
 8000d9e:	ea83 6311 	eor.w	r3, r3, r1, lsr #24
        if (ASPEP_CheckHeaderCRC(*(uint32_t *)pHandle->rxHeader) == true) //cstat !MISRAC2012-Rule-11.3
 8000da2:	5cd3      	ldrb	r3, [r2, r3]
 8000da4:	b95b      	cbnz	r3, 8000dbe <ASPEP_HWDataReceivedIT+0x52>
          pHandle->rxPacketType = (ASPEP_packetType)(((uint32_t)pHandle->rxHeader[0]) & ID_MASK);
 8000da6:	7f03      	ldrb	r3, [r0, #28]
 8000da8:	f003 030f 	and.w	r3, r3, #15
 8000dac:	2b06      	cmp	r3, #6
 8000dae:	6683      	str	r3, [r0, #104]	@ 0x68
          switch (pHandle->rxPacketType)
 8000db0:	d809      	bhi.n	8000dc6 <ASPEP_HWDataReceivedIT+0x5a>
 8000db2:	2b04      	cmp	r3, #4
 8000db4:	d81e      	bhi.n	8000df4 <ASPEP_HWDataReceivedIT+0x88>
              pHandle->badPacketFlag = ASPEP_BAD_PACKET_TYPE;
 8000db6:	2301      	movs	r3, #1
 8000db8:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
}
 8000dbc:	bd10      	pop	{r4, pc}
          pHandle->badPacketFlag = ASPEP_BAD_CRC_HEADER;
 8000dbe:	2304      	movs	r3, #4
 8000dc0:	f880 3062 	strb.w	r3, [r0, #98]	@ 0x62
}
 8000dc4:	bd10      	pop	{r4, pc}
 8000dc6:	2b09      	cmp	r3, #9
 8000dc8:	d1f5      	bne.n	8000db6 <ASPEP_HWDataReceivedIT+0x4a>
              pHandle->rxLength = (uint16_t)((*((uint16_t *)pHandle->rxHeader) & 0x1FFF0U) >> (uint16_t)4);
 8000dca:	8b83      	ldrh	r3, [r0, #28]
 8000dcc:	091b      	lsrs	r3, r3, #4
 8000dce:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
              if (0U == pHandle->rxLength) /* data packet with length 0 is a valid packet */
 8000dd2:	b17b      	cbz	r3, 8000df4 <ASPEP_HWDataReceivedIT+0x88>
              else if (pHandle->rxLength <= pHandle->maxRXPayload)
 8000dd4:	f8b0 205e 	ldrh.w	r2, [r0, #94]	@ 0x5e
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d30f      	bcc.n	8000dfc <ASPEP_HWDataReceivedIT+0x90>
                pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxBuffer,  /* need to read + 2 bytes CRC*/
 8000ddc:	f890 206c 	ldrb.w	r2, [r0, #108]	@ 0x6c
 8000de0:	6981      	ldr	r1, [r0, #24]
 8000de2:	6940      	ldr	r0, [r0, #20]
 8000de4:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8000de8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8000dea:	4798      	blx	r3
                pHandle->ASPEP_TL_State = WAITING_PAYLOAD;
 8000dec:	2301      	movs	r3, #1
 8000dee:	f884 3065 	strb.w	r3, [r4, #101]	@ 0x65
}
 8000df2:	bd10      	pop	{r4, pc}
              pHandle->NewPacketAvailable = true;
 8000df4:	2301      	movs	r3, #1
 8000df6:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
}
 8000dfa:	bd10      	pop	{r4, pc}
                pHandle->badPacketFlag = ASPEP_BAD_PACKET_SIZE;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	f880 3062 	strb.w	r3, [r0, #98]	@ 0x62
}
 8000e02:	bd10      	pop	{r4, pc}
 8000e04:	08008a0c 	.word	0x08008a0c

08000e08 <ASPEP_HWDMAReset>:
  * @brief  Resets DMA after debugger has stopped the MCU.
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_HWDMAReset(ASPEP_Handle_t *pHandle)
{
 8000e08:	4601      	mov	r1, r0
  {
#endif
    /* We must reset the RX state machine to be sure to not be in Waiting packet state */
    /* Otherwise the arrival of a new packet will trigger a NewPacketAvailable despite */
    /* the fact that bytes have been lost because of overrun (debugger paused for instance) */
    pHandle->ASPEP_TL_State = WAITING_PACKET;
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	f880 2065 	strb.w	r2, [r0, #101]	@ 0x65
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000e10:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8000e12:	6940      	ldr	r0, [r0, #20]
 8000e14:	2204      	movs	r2, #4
 8000e16:	311c      	adds	r1, #28
 8000e18:	4718      	bx	r3
 8000e1a:	bf00      	nop

08000e1c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e1c:	b082      	sub	sp, #8

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e1e:	4b07      	ldr	r3, [pc, #28]	@ (8000e3c <MX_DMA_Init+0x20>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	9201      	str	r2, [sp, #4]
 8000e24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000e26:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8000e2a:	631a      	str	r2, [r3, #48]	@ 0x30
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e32:	9301      	str	r3, [sp, #4]
 8000e34:	9b01      	ldr	r3, [sp, #4]

}
 8000e36:	b002      	add	sp, #8
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	40023800 	.word	0x40023800

08000e40 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e40:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e42:	2400      	movs	r4, #0
{
 8000e44:	b08a      	sub	sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e46:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8000e4a:	e9cd 4406 	strd	r4, r4, [sp, #24]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e4e:	4b29      	ldr	r3, [pc, #164]	@ (8000ef4 <MX_GPIO_Init+0xb4>)
 8000e50:	9400      	str	r4, [sp, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e52:	9408      	str	r4, [sp, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e54:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 8000e56:	4d28      	ldr	r5, [pc, #160]	@ (8000ef8 <MX_GPIO_Init+0xb8>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000e58:	4e28      	ldr	r6, [pc, #160]	@ (8000efc <MX_GPIO_Init+0xbc>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e5a:	f042 0204 	orr.w	r2, r2, #4
 8000e5e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000e60:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000e62:	f002 0204 	and.w	r2, r2, #4
 8000e66:	9200      	str	r2, [sp, #0]
 8000e68:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e6a:	9401      	str	r4, [sp, #4]
 8000e6c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000e6e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000e72:	631a      	str	r2, [r3, #48]	@ 0x30
 8000e74:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000e76:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8000e7a:	9201      	str	r2, [sp, #4]
 8000e7c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7e:	9402      	str	r4, [sp, #8]
 8000e80:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000e82:	f042 0201 	orr.w	r2, r2, #1
 8000e86:	631a      	str	r2, [r3, #48]	@ 0x30
 8000e88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000e8a:	f002 0201 	and.w	r2, r2, #1
 8000e8e:	9202      	str	r2, [sp, #8]
 8000e90:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e92:	9403      	str	r4, [sp, #12]
 8000e94:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000e96:	f042 0202 	orr.w	r2, r2, #2
 8000e9a:	631a      	str	r2, [r3, #48]	@ 0x30
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9e:	f003 0302 	and.w	r3, r3, #2
 8000ea2:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 8000ea4:	4622      	mov	r2, r4
 8000ea6:	4628      	mov	r0, r5
 8000ea8:	f244 11c0 	movw	r1, #16832	@ 0x41c0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eac:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 8000eae:	f003 fdb7 	bl	8004a20 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000eb2:	4622      	mov	r2, r4
 8000eb4:	4630      	mov	r0, r6
 8000eb6:	2110      	movs	r1, #16
 8000eb8:	f003 fdb2 	bl	8004a20 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC6 PC7 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8000ebc:	f244 12c0 	movw	r2, #16832	@ 0x41c0
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	e9cd 2304 	strd	r2, r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ec6:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8000ec8:	2200      	movs	r2, #0
 8000eca:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ecc:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8000ece:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ed2:	f003 fc95 	bl	8004800 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000ed6:	2210      	movs	r2, #16
 8000ed8:	2301      	movs	r3, #1
 8000eda:	e9cd 2304 	strd	r2, r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000ede:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	2303      	movs	r3, #3
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000ee4:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000ee6:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000eea:	f003 fc89 	bl	8004800 <HAL_GPIO_Init>

}
 8000eee:	b00a      	add	sp, #40	@ 0x28
 8000ef0:	bd70      	pop	{r4, r5, r6, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40023800 	.word	0x40023800
 8000ef8:	40020800 	.word	0x40020800
 8000efc:	40020000 	.word	0x40020000

08000f00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f00:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f02:	2300      	movs	r3, #0
{
 8000f04:	b097      	sub	sp, #92	@ 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f06:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
 8000f0a:	e9cd 330c 	strd	r3, r3, [sp, #48]	@ 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f0e:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8000f12:	e9cd 3305 	strd	r3, r3, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f16:	4926      	ldr	r1, [pc, #152]	@ (8000fb0 <SystemClock_Config+0xb0>)
 8000f18:	9301      	str	r3, [sp, #4]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f1a:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f1c:	6c08      	ldr	r0, [r1, #64]	@ 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f1e:	4a25      	ldr	r2, [pc, #148]	@ (8000fb4 <SystemClock_Config+0xb4>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f20:	f040 5080 	orr.w	r0, r0, #268435456	@ 0x10000000
 8000f24:	6408      	str	r0, [r1, #64]	@ 0x40
 8000f26:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8000f28:	f001 5180 	and.w	r1, r1, #268435456	@ 0x10000000
 8000f2c:	9101      	str	r1, [sp, #4]
 8000f2e:	9901      	ldr	r1, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f30:	9302      	str	r3, [sp, #8]
 8000f32:	6813      	ldr	r3, [r2, #0]
 8000f34:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000f38:	6013      	str	r3, [r2, #0]
 8000f3a:	6813      	ldr	r3, [r2, #0]
 8000f3c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f40:	2402      	movs	r4, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f42:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f44:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f48:	ed9f 7b17 	vldr	d7, [pc, #92]	@ 8000fa8 <SystemClock_Config+0xa8>
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f4c:	e9cd 410e 	strd	r4, r1, [sp, #56]	@ 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f50:	9802      	ldr	r0, [sp, #8]
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 180;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f52:	9414      	str	r4, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f54:	2002      	movs	r0, #2
 8000f56:	2102      	movs	r1, #2
 8000f58:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f5c:	2204      	movs	r2, #4
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000f5e:	23b4      	movs	r3, #180	@ 0xb4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f60:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f62:	ed8d 7b08 	vstr	d7, [sp, #32]
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f66:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000f68:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f6a:	f003 febd 	bl	8004ce8 <HAL_RCC_OscConfig>
 8000f6e:	b108      	cbz	r0, 8000f74 <SystemClock_Config+0x74>
  __ASM volatile ("cpsid i" : : : "memory");
 8000f70:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f72:	e7fe      	b.n	8000f72 <SystemClock_Config+0x72>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000f74:	f003 fd62 	bl	8004a3c <HAL_PWREx_EnableOverDrive>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	b108      	cbz	r0, 8000f80 <SystemClock_Config+0x80>
 8000f7c:	b672      	cpsid	i
  while (1)
 8000f7e:	e7fe      	b.n	8000f7e <SystemClock_Config+0x7e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f80:	220f      	movs	r2, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f82:	e9cd 2403 	strd	r2, r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f86:	f44f 55a0 	mov.w	r5, #5120	@ 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f8a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f8e:	a803      	add	r0, sp, #12
 8000f90:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f92:	e9cd 3505 	strd	r3, r5, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f96:	9207      	str	r2, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f98:	f003 fd8c 	bl	8004ab4 <HAL_RCC_ClockConfig>
 8000f9c:	b108      	cbz	r0, 8000fa2 <SystemClock_Config+0xa2>
 8000f9e:	b672      	cpsid	i
  while (1)
 8000fa0:	e7fe      	b.n	8000fa0 <SystemClock_Config+0xa0>
}
 8000fa2:	b017      	add	sp, #92	@ 0x5c
 8000fa4:	bd30      	pop	{r4, r5, pc}
 8000fa6:	bf00      	nop
 8000fa8:	00000001 	.word	0x00000001
 8000fac:	00010000 	.word	0x00010000
 8000fb0:	40023800 	.word	0x40023800
 8000fb4:	40007000 	.word	0x40007000

08000fb8 <main>:
{
 8000fb8:	b508      	push	{r3, lr}
  HAL_Init();
 8000fba:	f003 f89b 	bl	80040f4 <HAL_Init>
  SystemClock_Config();
 8000fbe:	f7ff ff9f 	bl	8000f00 <SystemClock_Config>
  MX_GPIO_Init();
 8000fc2:	f7ff ff3d 	bl	8000e40 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fc6:	f7ff ff29 	bl	8000e1c <MX_DMA_Init>
  MX_ADC1_Init();
 8000fca:	f7ff fb13 	bl	80005f4 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000fce:	f002 fe75 	bl	8003cbc <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000fd2:	f002 ff21 	bl	8003e18 <MX_USART2_UART_Init>
  MX_MotorControl_Init();
 8000fd6:	f001 f8db 	bl	8002190 <MX_MotorControl_Init>
  MX_SPI1_Init();
 8000fda:	f002 fc3b 	bl	8003854 <MX_SPI1_Init>
  HAL_NVIC_SetPriority(USART2_IRQn, 3, 1);
 8000fde:	2201      	movs	r2, #1
 8000fe0:	2103      	movs	r1, #3
 8000fe2:	2026      	movs	r0, #38	@ 0x26
 8000fe4:	f003 fb0c 	bl	8004600 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000fe8:	2026      	movs	r0, #38	@ 0x26
 8000fea:	f003 fb45 	bl	8004678 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 3, 0);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	2103      	movs	r1, #3
 8000ff2:	2010      	movs	r0, #16
 8000ff4:	f003 fb04 	bl	8004600 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000ff8:	2010      	movs	r0, #16
 8000ffa:	f003 fb3d 	bl	8004678 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(ADC_IRQn, 2, 0);
 8000ffe:	2200      	movs	r2, #0
 8001000:	2102      	movs	r1, #2
 8001002:	2012      	movs	r0, #18
 8001004:	f003 fafc 	bl	8004600 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001008:	2012      	movs	r0, #18
 800100a:	f003 fb35 	bl	8004678 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800100e:	2200      	movs	r2, #0
 8001010:	4611      	mov	r1, r2
 8001012:	2019      	movs	r0, #25
 8001014:	f003 faf4 	bl	8004600 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001018:	2019      	movs	r0, #25
 800101a:	f003 fb2d 	bl	8004678 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 4, 1);
 800101e:	2201      	movs	r2, #1
 8001020:	2104      	movs	r1, #4
 8001022:	2018      	movs	r0, #24
 8001024:	f003 faec 	bl	8004600 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001028:	2018      	movs	r0, #24
 800102a:	f003 fb25 	bl	8004678 <HAL_NVIC_EnableIRQ>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);   //B
 800102e:	4813      	ldr	r0, [pc, #76]	@ (800107c <main+0xc4>)
 8001030:	2200      	movs	r2, #0
 8001032:	2140      	movs	r1, #64	@ 0x40
 8001034:	f003 fcf4 	bl	8004a20 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET); //G
 8001038:	4810      	ldr	r0, [pc, #64]	@ (800107c <main+0xc4>)
 800103a:	2200      	movs	r2, #0
 800103c:	2180      	movs	r1, #128	@ 0x80
 800103e:	f003 fcef 	bl	8004a20 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);   //R
 8001042:	480e      	ldr	r0, [pc, #56]	@ (800107c <main+0xc4>)
 8001044:	2201      	movs	r2, #1
 8001046:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800104a:	f003 fce9 	bl	8004a20 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);   // DRV Enable
 800104e:	480b      	ldr	r0, [pc, #44]	@ (800107c <main+0xc4>)
 8001050:	2201      	movs	r2, #1
 8001052:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001056:	f003 fce3 	bl	8004a20 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); // Pull nSCS high
 800105a:	4809      	ldr	r0, [pc, #36]	@ (8001080 <main+0xc8>)
 800105c:	2201      	movs	r2, #1
 800105e:	2110      	movs	r1, #16
 8001060:	f003 fcde 	bl	8004a20 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001064:	2001      	movs	r0, #1
 8001066:	f003 f871 	bl	800414c <HAL_Delay>
  if(Set_CSA_Gain(CSA_GAIN_10_VV))
 800106a:	2001      	movs	r0, #1
 800106c:	f006 fd08 	bl	8007a80 <Set_CSA_Gain>
 8001070:	b900      	cbnz	r0, 8001074 <main+0xbc>
  while (1)
 8001072:	e7fe      	b.n	8001072 <main+0xba>
	  printf('Failed to change DRV8323 Settings');
 8001074:	4803      	ldr	r0, [pc, #12]	@ (8001084 <main+0xcc>)
 8001076:	f006 fe39 	bl	8007cec <iprintf>
 800107a:	e7fa      	b.n	8001072 <main+0xba>
 800107c:	40020800 	.word	0x40020800
 8001080:	40020000 	.word	0x40020000
 8001084:	696e6773 	.word	0x696e6773

08001088 <Error_Handler>:
 8001088:	b672      	cpsid	i
  while (1)
 800108a:	e7fe      	b.n	800108a <Error_Handler+0x2>

0800108c <MC_ProfilerCommand>:
 * @brief Not implemented MC_Profiler function.
 *  */ //cstat !MISRAC2012-Rule-2.7 !RED-unused-param  !MISRAC2012-Rule-2.7  !MISRAC2012-Rule-8.13
__weak uint8_t MC_ProfilerCommand(uint16_t rxLength, uint8_t *rxBuffer, int16_t txSyncFreeSpace, uint16_t *txLength, uint8_t *txBuffer)
{
  return (MCP_CMD_UNKNOWN);
}
 800108c:	2002      	movs	r0, #2
 800108e:	4770      	bx	lr

08001090 <MC_APP_BootHook>:
   */

/* USER CODE BEGIN BootHook */

/* USER CODE END BootHook */
}
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <MC_APP_PostMediumFrequencyHook_M1>:
 * @brief Hook function called right after the Medium Frequency Task for Motor 1.
 *
 *
 *
 */
__weak void MC_APP_PostMediumFrequencyHook_M1(void)
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop

08001098 <MCI_Init>:
  *         (only present if position control is enabled)
  * @param  pPWMHandle pointer to the PWM & current feedback component to be used by the MCI.
  */
__weak void MCI_Init(MCI_Handle_t *pHandle, SpeednTorqCtrl_Handle_t *pSTC, pFOCVars_t pFOCVars,
                     PWMC_Handle_t *pPWMHandle )
{
 8001098:	b410      	push	{r4}
    pHandle->pSTC = pSTC;
    pHandle->pFOCVars = pFOCVars;
    pHandle->pPWM = pPWMHandle;

    /* Buffer related initialization */
    pHandle->lastCommand = MCI_NOCOMMANDSYET;
 800109a:	2400      	movs	r4, #0
    pHandle->hFinalTorque = 0;
    pHandle->hDurationms = 0;
    pHandle->CommandState = MCI_BUFFER_EMPTY;
    pHandle->DirectCommand = MCI_NO_COMMAND;
    pHandle->State = IDLE;
    pHandle->CurrentFaults = MC_NO_FAULTS;
 800109c:	e9c0 4407 	strd	r4, r4, [r0, #28]
    pHandle->lastCommand = MCI_NOCOMMANDSYET;
 80010a0:	7304      	strb	r4, [r0, #12]
    pHandle->hFinalSpeed = 0;
 80010a2:	f8c0 400e 	str.w	r4, [r0, #14]
    pHandle->CommandState = MCI_BUFFER_EMPTY;
 80010a6:	f880 4024 	strb.w	r4, [r0, #36]	@ 0x24
    pHandle->pFOCVars = pFOCVars;
 80010aa:	e9c0 1200 	strd	r1, r2, [r0]
    pHandle->PastFaults = MC_NO_FAULTS;
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 80010ae:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->pPWM = pPWMHandle;
 80010b2:	6083      	str	r3, [r0, #8]
}
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop

080010b8 <MCI_ExecSpeedRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
 80010b8:	f04f 0c01 	mov.w	ip, #1
    pHandle->hFinalSpeed = hFinalSpeed;
    pHandle->hDurationms = hDurationms;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80010bc:	f240 3301 	movw	r3, #769	@ 0x301
    pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
 80010c0:	f880 c00c 	strb.w	ip, [r0, #12]
    pHandle->hFinalSpeed = hFinalSpeed;
 80010c4:	81c1      	strh	r1, [r0, #14]
    pHandle->hDurationms = hDurationms;
 80010c6:	8382      	strh	r2, [r0, #28]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80010c8:	8483      	strh	r3, [r0, #36]	@ 0x24
    pHandle->LastModalitySetByUser = MCM_SPEED_MODE;

#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 80010ca:	4770      	bx	lr

080010cc <MCI_ExecTorqueRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->lastCommand = MCI_CMD_EXECTORQUERAMP;
 80010cc:	f04f 0c02 	mov.w	ip, #2
    pHandle->hFinalTorque = hFinalTorque;
    pHandle->hDurationms = hDurationms;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80010d0:	f240 4301 	movw	r3, #1025	@ 0x401
    pHandle->lastCommand = MCI_CMD_EXECTORQUERAMP;
 80010d4:	f880 c00c 	strb.w	ip, [r0, #12]
    pHandle->hFinalTorque = hFinalTorque;
 80010d8:	8201      	strh	r1, [r0, #16]
    pHandle->hDurationms = hDurationms;
 80010da:	8382      	strh	r2, [r0, #28]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80010dc:	8483      	strh	r3, [r0, #36]	@ 0x24
    pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 80010de:	4770      	bx	lr

080010e0 <MCI_SetCurrentReferences>:
  * function.

  @sa MCI_SetCurrentReferences_F
  */
__weak void MCI_SetCurrentReferences(MCI_Handle_t *pHandle, qd_t Iqdref)
{
 80010e0:	b082      	sub	sp, #8
  }
  else
  {
#endif

    pHandle->lastCommand = MCI_CMD_SETCURRENTREFERENCES;
 80010e2:	2203      	movs	r2, #3
    pHandle->Iqdref.q = Iqdref.q;
    pHandle->Iqdref.d = Iqdref.d;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80010e4:	f240 4301 	movw	r3, #1025	@ 0x401
    pHandle->lastCommand = MCI_CMD_SETCURRENTREFERENCES;
 80010e8:	7302      	strb	r2, [r0, #12]
    pHandle->Iqdref.q = Iqdref.q;
 80010ea:	f8c0 1012 	str.w	r1, [r0, #18]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80010ee:	8483      	strh	r3, [r0, #36]	@ 0x24
    pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 80010f0:	b002      	add	sp, #8
 80010f2:	4770      	bx	lr

080010f4 <MCI_FaultProcessing>:
  }
  else
  {
#endif
    /* Set current errors */
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 80010f4:	8c03      	ldrh	r3, [r0, #32]
    pHandle->PastFaults |= hSetErrors;
 80010f6:	f8b0 c022 	ldrh.w	ip, [r0, #34]	@ 0x22
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 80010fa:	430b      	orrs	r3, r1
 80010fc:	ea23 0302 	bic.w	r3, r3, r2
    pHandle->PastFaults |= hSetErrors;
 8001100:	ea41 010c 	orr.w	r1, r1, ip
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 8001104:	8403      	strh	r3, [r0, #32]
    pHandle->PastFaults |= hSetErrors;
 8001106:	8441      	strh	r1, [r0, #34]	@ 0x22
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop

0800110c <MCI_ExecBufferedCommands>:
    /* Nothing to do */
  }
  else
  {
#endif
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 800110c:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8001110:	2b01      	cmp	r3, #1
 8001112:	d000      	beq.n	8001116 <MCI_ExecBufferedCommands+0xa>
 8001114:	4770      	bx	lr
{
 8001116:	b510      	push	{r4, lr}
    {
      bool commandHasBeenExecuted = false;
      switch (pHandle->lastCommand)
 8001118:	7b02      	ldrb	r2, [r0, #12]
 800111a:	2a02      	cmp	r2, #2
 800111c:	4604      	mov	r4, r0
 800111e:	d007      	beq.n	8001130 <MCI_ExecBufferedCommands+0x24>
 8001120:	2a03      	cmp	r2, #3
 8001122:	d028      	beq.n	8001176 <MCI_ExecBufferedCommands+0x6a>
 8001124:	2a01      	cmp	r2, #1
 8001126:	d017      	beq.n	8001158 <MCI_ExecBufferedCommands+0x4c>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESSFULLY;
      }
      else
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESSFULLY;
 8001128:	2303      	movs	r3, #3
 800112a:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
      }
    }
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 800112e:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8001130:	6843      	ldr	r3, [r0, #4]
 8001132:	2200      	movs	r2, #0
 8001134:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 8001138:	6800      	ldr	r0, [r0, #0]
 800113a:	2104      	movs	r1, #4
 800113c:	f006 f826 	bl	800718c <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms);
 8001140:	8ba2      	ldrh	r2, [r4, #28]
 8001142:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 8001146:	6820      	ldr	r0, [r4, #0]
 8001148:	f006 f824 	bl	8007194 <STC_ExecRamp>
      if (commandHasBeenExecuted)
 800114c:	2800      	cmp	r0, #0
 800114e:	d0eb      	beq.n	8001128 <MCI_ExecBufferedCommands+0x1c>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESSFULLY;
 8001150:	2302      	movs	r3, #2
 8001152:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
}
 8001156:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8001158:	6843      	ldr	r3, [r0, #4]
 800115a:	2200      	movs	r2, #0
 800115c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          STC_SetControlMode(pHandle->pSTC, MCM_SPEED_MODE);
 8001160:	6800      	ldr	r0, [r0, #0]
 8001162:	2103      	movs	r1, #3
 8001164:	f006 f812 	bl	800718c <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms);
 8001168:	8ba2      	ldrh	r2, [r4, #28]
 800116a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800116e:	6820      	ldr	r0, [r4, #0]
 8001170:	f006 f810 	bl	8007194 <STC_ExecRamp>
          break;
 8001174:	e7ea      	b.n	800114c <MCI_ExecBufferedCommands+0x40>
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8001176:	6842      	ldr	r2, [r0, #4]
 8001178:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 800117c:	f8d0 3012 	ldr.w	r3, [r0, #18]
 8001180:	6113      	str	r3, [r2, #16]
      if (commandHasBeenExecuted)
 8001182:	e7e5      	b.n	8001150 <MCI_ExecBufferedCommands+0x44>

08001184 <MCI_GetSTMState>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? FAULT_NOW : pHandle->State);
#else
  return (pHandle->State);
#endif
}
 8001184:	7fc0      	ldrb	r0, [r0, #31]
 8001186:	4770      	bx	lr

08001188 <MCI_GetOccurredFaults>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MC_SW_ERROR : (uint16_t)pHandle->PastFaults);
#else
  return ((uint16_t)pHandle->PastFaults);
#endif
}
 8001188:	8c40      	ldrh	r0, [r0, #34]	@ 0x22
 800118a:	4770      	bx	lr

0800118c <MCI_GetCurrentFaults>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MC_SW_ERROR : (uint16_t)pHandle->CurrentFaults);
#else
  return ((uint16_t)pHandle->CurrentFaults);
#endif
}
 800118c:	8c00      	ldrh	r0, [r0, #32]
 800118e:	4770      	bx	lr

08001190 <MCI_StartWithPolarizationMotor>:
{
 8001190:	b510      	push	{r4, lr}
 8001192:	4604      	mov	r4, r0
    if ((IDLE == MCI_GetSTMState(pHandle)) &&
 8001194:	f7ff fff6 	bl	8001184 <MCI_GetSTMState>
 8001198:	b108      	cbz	r0, 800119e <MCI_StartWithPolarizationMotor+0xe>
  bool retVal = true;
 800119a:	2001      	movs	r0, #1
}
 800119c:	bd10      	pop	{r4, pc}
        (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 800119e:	4620      	mov	r0, r4
 80011a0:	f7ff fff2 	bl	8001188 <MCI_GetOccurredFaults>
    if ((IDLE == MCI_GetSTMState(pHandle)) &&
 80011a4:	2800      	cmp	r0, #0
 80011a6:	d1f8      	bne.n	800119a <MCI_StartWithPolarizationMotor+0xa>
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 80011a8:	4620      	mov	r0, r4
 80011aa:	f7ff ffef 	bl	800118c <MCI_GetCurrentFaults>
        (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80011ae:	2800      	cmp	r0, #0
 80011b0:	d1f3      	bne.n	800119a <MCI_StartWithPolarizationMotor+0xa>
      pHandle->DirectCommand = MCI_START;
 80011b2:	2201      	movs	r2, #1
      pHandle->pPWM->offsetCalibStatus = false;
 80011b4:	68a1      	ldr	r1, [r4, #8]
      pHandle->DirectCommand = MCI_START;
 80011b6:	77a2      	strb	r2, [r4, #30]
      pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80011b8:	f884 2024 	strb.w	r2, [r4, #36]	@ 0x24
      pHandle->pPWM->offsetCalibStatus = false;
 80011bc:	f881 0081 	strb.w	r0, [r1, #129]	@ 0x81
}
 80011c0:	bd10      	pop	{r4, pc}
 80011c2:	bf00      	nop

080011c4 <MCI_StopMotor>:
{
 80011c4:	b538      	push	{r3, r4, r5, lr}
 80011c6:	4605      	mov	r5, r0
    State = MCI_GetSTMState(pHandle);
 80011c8:	f7ff ffdc 	bl	8001184 <MCI_GetSTMState>
    if ((IDLE == State) || (ICLWAIT == State))
 80011cc:	4604      	mov	r4, r0
 80011ce:	b118      	cbz	r0, 80011d8 <MCI_StopMotor+0x14>
 80011d0:	f1b0 040c 	subs.w	r4, r0, #12
 80011d4:	bf18      	it	ne
 80011d6:	2401      	movne	r4, #1
    if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80011d8:	4628      	mov	r0, r5
 80011da:	f7ff ffd5 	bl	8001188 <MCI_GetOccurredFaults>
 80011de:	b110      	cbz	r0, 80011e6 <MCI_StopMotor+0x22>
  bool retVal = false;
 80011e0:	2400      	movs	r4, #0
}
 80011e2:	4620      	mov	r0, r4
 80011e4:	bd38      	pop	{r3, r4, r5, pc}
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 80011e6:	4628      	mov	r0, r5
 80011e8:	f7ff ffd0 	bl	800118c <MCI_GetCurrentFaults>
    if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80011ec:	2800      	cmp	r0, #0
 80011ee:	d1f7      	bne.n	80011e0 <MCI_StopMotor+0x1c>
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 80011f0:	2c00      	cmp	r4, #0
 80011f2:	d0f5      	beq.n	80011e0 <MCI_StopMotor+0x1c>
      pHandle->DirectCommand = MCI_STOP;
 80011f4:	2305      	movs	r3, #5
 80011f6:	77ab      	strb	r3, [r5, #30]
      retVal = true;
 80011f8:	e7f3      	b.n	80011e2 <MCI_StopMotor+0x1e>
 80011fa:	bf00      	nop

080011fc <MCI_FaultAcknowledged>:
{
 80011fc:	b510      	push	{r4, lr}
 80011fe:	4604      	mov	r4, r0
    if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8001200:	f7ff ffc0 	bl	8001184 <MCI_GetSTMState>
 8001204:	280b      	cmp	r0, #11
 8001206:	d001      	beq.n	800120c <MCI_FaultAcknowledged+0x10>
  bool reVal = false;
 8001208:	2000      	movs	r0, #0
}
 800120a:	bd10      	pop	{r4, pc}
    if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 800120c:	4620      	mov	r0, r4
 800120e:	f7ff ffbd 	bl	800118c <MCI_GetCurrentFaults>
 8001212:	2800      	cmp	r0, #0
 8001214:	d1f8      	bne.n	8001208 <MCI_FaultAcknowledged+0xc>
      pHandle->DirectCommand = MCI_ACK_FAULTS;
 8001216:	2302      	movs	r3, #2
 8001218:	77a3      	strb	r3, [r4, #30]
      pHandle->PastFaults = MC_NO_FAULTS;
 800121a:	8460      	strh	r0, [r4, #34]	@ 0x22
      reVal = true;
 800121c:	2001      	movs	r0, #1
}
 800121e:	bd10      	pop	{r4, pc}

08001220 <MCI_GetFaultState>:
    LocalFaultState = MC_SW_ERROR | (MC_SW_ERROR << 16);
  }
  else
  {
#endif
    LocalFaultState = (uint32_t)(pHandle->PastFaults);
 8001220:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
    LocalFaultState |= (uint32_t)(pHandle->CurrentFaults) << 16;
 8001222:	8c00      	ldrh	r0, [r0, #32]
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
  return (LocalFaultState);
}
 8001224:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop

0800122c <MCI_GetControlMode>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MCM_TORQUE_MODE : pHandle->LastModalitySetByUser);
#else
  return (pHandle->LastModalitySetByUser);
#endif
}
 800122c:	f890 0025 	ldrb.w	r0, [r0, #37]	@ 0x25
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop

08001234 <MCI_GetImposedMotorDirection>:
    /* Nothing to do */
  }
  else
  {
#endif
    switch (pHandle->lastCommand)
 8001234:	7b03      	ldrb	r3, [r0, #12]
 8001236:	2b02      	cmp	r3, #2
 8001238:	d005      	beq.n	8001246 <MCI_GetImposedMotorDirection+0x12>
 800123a:	2b03      	cmp	r3, #3
 800123c:	d013      	beq.n	8001266 <MCI_GetImposedMotorDirection+0x32>
 800123e:	2b01      	cmp	r3, #1
 8001240:	d009      	beq.n	8001256 <MCI_GetImposedMotorDirection+0x22>
  int16_t retVal = 1;
 8001242:	2001      	movs	r0, #1
    }
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
  return (retVal);
}
 8001244:	4770      	bx	lr
        if (pHandle->hFinalTorque < 0)
 8001246:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
          retVal = -1;
 800124a:	2b00      	cmp	r3, #0
 800124c:	bfac      	ite	ge
 800124e:	2001      	movge	r0, #1
 8001250:	f04f 30ff 	movlt.w	r0, #4294967295
 8001254:	4770      	bx	lr
        if (pHandle->hFinalSpeed < 0)
 8001256:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
          retVal = -1;
 800125a:	2b00      	cmp	r3, #0
 800125c:	bfac      	ite	ge
 800125e:	2001      	movge	r0, #1
 8001260:	f04f 30ff 	movlt.w	r0, #4294967295
 8001264:	4770      	bx	lr
        if (pHandle->Iqdref.q < 0)
 8001266:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
          retVal = -1;
 800126a:	2b00      	cmp	r3, #0
 800126c:	bfac      	ite	ge
 800126e:	2001      	movge	r0, #1
 8001270:	f04f 30ff 	movlt.w	r0, #4294967295
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop

08001278 <MCI_GetLastRampFinalSpeed>:
  }
  return (retVal);
#else
  return (pHandle->hFinalSpeed);
#endif
}
 8001278:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop

08001280 <MCI_GetLastRampFinalTorque>:
  }
  return (retVal);
#else
  return (pHandle->hFinalTorque);
#endif
}
 8001280:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop

08001288 <MCI_GetLastRampFinalDuration>:
  }
  return (retVal);
#else
  return (pHandle->hDurationms);
#endif
}
 8001288:	8b80      	ldrh	r0, [r0, #28]
 800128a:	4770      	bx	lr

0800128c <MCI_StopRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    STC_StopRamp(pHandle->pSTC);
 800128c:	6800      	ldr	r0, [r0, #0]
 800128e:	f005 bfc1 	b.w	8007214 <STC_StopRamp>
 8001292:	bf00      	nop

08001294 <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit(MCI_Handle_t *pHandle)
{
 8001294:	b508      	push	{r3, lr}
    temp_speed = 0;
  }
  else
  {
#endif
    SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor(pHandle->pSTC);
 8001296:	6800      	ldr	r0, [r0, #0]
 8001298:	f005 ff66 	bl	8007168 <STC_GetSpeedSensor>
    temp_speed = SPD_GetAvrgMecSpeedUnit(SpeedSensor);
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
  return (temp_speed);
}
 800129c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    temp_speed = SPD_GetAvrgMecSpeedUnit(SpeedSensor);
 80012a0:	f005 bf02 	b.w	80070a8 <SPD_GetAvrgMecSpeedUnit>

080012a4 <MCI_GetMecSpeedRefUnit>:
__weak int16_t MCI_GetMecSpeedRefUnit(MCI_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? 0 : STC_GetMecSpeedRefUnit(pHandle->pSTC));
#else
  return (STC_GetMecSpeedRefUnit(pHandle->pSTC));
 80012a4:	6800      	ldr	r0, [r0, #0]
 80012a6:	f005 bf69 	b.w	800717c <STC_GetMecSpeedRefUnit>
 80012aa:	bf00      	nop

080012ac <MCI_GetIab>:
  {
    tempVal = pHandle->pFOCVars->Iab;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iab);
 80012ac:	6842      	ldr	r2, [r0, #4]
 80012ae:	6810      	ldr	r0, [r2, #0]
 80012b0:	2300      	movs	r3, #0
 80012b2:	b282      	uxth	r2, r0
 80012b4:	f362 030f 	bfi	r3, r2, #0, #16
 80012b8:	0c00      	lsrs	r0, r0, #16
 80012ba:	f360 431f 	bfi	r3, r0, #16, #16
{
 80012be:	b082      	sub	sp, #8
#endif
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	b002      	add	sp, #8
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop

080012c8 <MCI_GetIalphabeta>:
  {
    tempVal = pHandle->pFOCVars->Ialphabeta;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Ialphabeta);
 80012c8:	6842      	ldr	r2, [r0, #4]
 80012ca:	6850      	ldr	r0, [r2, #4]
 80012cc:	2300      	movs	r3, #0
 80012ce:	b282      	uxth	r2, r0
 80012d0:	f362 030f 	bfi	r3, r2, #0, #16
 80012d4:	0c00      	lsrs	r0, r0, #16
 80012d6:	f360 431f 	bfi	r3, r0, #16, #16
{
 80012da:	b082      	sub	sp, #8
#endif
}
 80012dc:	4618      	mov	r0, r3
 80012de:	b002      	add	sp, #8
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop

080012e4 <MCI_GetIqd>:
  {
    tempVal = pHandle->pFOCVars->Iqd;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iqd);
 80012e4:	6842      	ldr	r2, [r0, #4]
 80012e6:	68d0      	ldr	r0, [r2, #12]
 80012e8:	2300      	movs	r3, #0
 80012ea:	b282      	uxth	r2, r0
 80012ec:	f362 030f 	bfi	r3, r2, #0, #16
 80012f0:	0c00      	lsrs	r0, r0, #16
 80012f2:	f360 431f 	bfi	r3, r0, #16, #16
{
 80012f6:	b082      	sub	sp, #8
#endif
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	b002      	add	sp, #8
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop

08001300 <MCI_GetIqdref>:
  {
    tempVal = pHandle->pFOCVars->Iqdref;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iqdref);
 8001300:	6842      	ldr	r2, [r0, #4]
 8001302:	6910      	ldr	r0, [r2, #16]
 8001304:	2300      	movs	r3, #0
 8001306:	b282      	uxth	r2, r0
 8001308:	f362 030f 	bfi	r3, r2, #0, #16
 800130c:	0c00      	lsrs	r0, r0, #16
 800130e:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001312:	b082      	sub	sp, #8
#endif
}
 8001314:	4618      	mov	r0, r3
 8001316:	b002      	add	sp, #8
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop

0800131c <MCI_GetVqd>:
  {
    tempVal = pHandle->pFOCVars->Vqd;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Vqd);
 800131c:	6842      	ldr	r2, [r0, #4]
 800131e:	f8d2 0016 	ldr.w	r0, [r2, #22]
 8001322:	2300      	movs	r3, #0
 8001324:	b282      	uxth	r2, r0
 8001326:	f362 030f 	bfi	r3, r2, #0, #16
 800132a:	0c00      	lsrs	r0, r0, #16
 800132c:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001330:	b082      	sub	sp, #8
#endif
}
 8001332:	4618      	mov	r0, r3
 8001334:	b002      	add	sp, #8
 8001336:	4770      	bx	lr

08001338 <MCI_GetValphabeta>:
  {
    tempVal = pHandle->pFOCVars->Valphabeta;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Valphabeta);
 8001338:	6842      	ldr	r2, [r0, #4]
 800133a:	f8d2 001a 	ldr.w	r0, [r2, #26]
 800133e:	2300      	movs	r3, #0
 8001340:	b282      	uxth	r2, r0
 8001342:	f362 030f 	bfi	r3, r2, #0, #16
 8001346:	0c00      	lsrs	r0, r0, #16
 8001348:	f360 431f 	bfi	r3, r0, #16, #16
{
 800134c:	b082      	sub	sp, #8
#endif
}
 800134e:	4618      	mov	r0, r3
 8001350:	b002      	add	sp, #8
 8001352:	4770      	bx	lr

08001354 <MCI_GetTeref>:
__weak int16_t MCI_GetTeref(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? 0 : pHandle->pFOCVars->hTeref);
#else
  return (pHandle->pFOCVars->hTeref);
 8001354:	6843      	ldr	r3, [r0, #4]
#endif
}
 8001356:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 800135a:	4770      	bx	lr

0800135c <MCI_Clear_Iqdref>:
/**
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_Clear_Iqdref(MCI_Handle_t *pHandle)
{
 800135c:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref(pHandle->pSTC);
 800135e:	e9d0 0400 	ldrd	r0, r4, [r0]
 8001362:	f005 ff95 	bl	8007290 <STC_GetDefaultIqdref>
 8001366:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800136a:	8220      	strh	r0, [r4, #16]
 800136c:	8263      	strh	r3, [r4, #18]
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 800136e:	bd10      	pop	{r4, pc}

08001370 <MCM_Clarke>:
  *                       beta = -(2*b+a)/sqrt(3)
  * @param  Input: stator values a and b in ab_t format.
  * @retval Stator values alpha and beta in alphabeta_t format.
  */
__weak alphabeta_t MCM_Clarke(ab_t Input)
{
 8001370:	f3c0 430f 	ubfx	r3, r0, #16, #16
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.a);

  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 8001374:	f644 11e6 	movw	r1, #18918	@ 0x49e6
#ifndef FULL_MISRA_C_COMPLIANCY_MC_MATH
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 8001378:	f24b 621a 	movw	r2, #46618	@ 0xb61a
  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 800137c:	fb13 f301 	smulbb	r3, r3, r1
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 8001380:	fb10 f202 	smulbb	r2, r0, r2
 8001384:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
#else
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) / 32768;
#endif

  /* Check saturation of Ibeta */
  if (wbeta_tmp > INT16_MAX)
 8001388:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
{
 800138c:	b084      	sub	sp, #16
 800138e:	b203      	sxth	r3, r0
  if (wbeta_tmp > INT16_MAX)
 8001390:	da05      	bge.n	800139e <MCM_Clarke+0x2e>
 8001392:	13d1      	asrs	r1, r2, #15
  {
    hbeta_tmp = INT16_MAX;
  }
  else if (wbeta_tmp < (-32768))
 8001394:	f511 4f00 	cmn.w	r1, #32768	@ 0x8000
 8001398:	da0c      	bge.n	80013b4 <MCM_Clarke+0x44>
 800139a:	4a09      	ldr	r2, [pc, #36]	@ (80013c0 <MCM_Clarke+0x50>)
 800139c:	e001      	b.n	80013a2 <MCM_Clarke+0x32>
 800139e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
  else
  {
    /* Nothing to do */
  }

  return (Output);
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	2000      	movs	r0, #0
 80013a6:	f363 000f 	bfi	r0, r3, #0, #16
 80013aa:	b293      	uxth	r3, r2
 80013ac:	f363 401f 	bfi	r0, r3, #16, #16
}
 80013b0:	b004      	add	sp, #16
 80013b2:	4770      	bx	lr
    hbeta_tmp = ((int16_t)wbeta_tmp);
 80013b4:	4802      	ldr	r0, [pc, #8]	@ (80013c0 <MCM_Clarke+0x50>)
 80013b6:	b20a      	sxth	r2, r1
 80013b8:	4282      	cmp	r2, r0
 80013ba:	bfb8      	it	lt
 80013bc:	4602      	movlt	r2, r0
 80013be:	e7f0      	b.n	80013a2 <MCM_Clarke+0x32>
 80013c0:	ffff8001 	.word	0xffff8001

080013c4 <MCM_Trig_Functions>:
  uint16_t uhindex;

  Trig_Components Local_Components;

  /* 10 bit index computation  */
  shindex = (((int32_t)32768) + ((int32_t)hAngle));
 80013c4:	f500 4000 	add.w	r0, r0, #32768	@ 0x8000
  uhindex = (uint16_t)shindex;
  uhindex /= ((uint16_t)64);
 80013c8:	f3c0 1089 	ubfx	r0, r0, #6, #10

  switch (((uint16_t)uhindex) & SIN_MASK)
 80013cc:	f400 7140 	and.w	r1, r0, #768	@ 0x300
 80013d0:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
{
 80013d4:	b082      	sub	sp, #8
  switch (((uint16_t)uhindex) & SIN_MASK)
 80013d6:	d028      	beq.n	800142a <MCM_Trig_Functions+0x66>
 80013d8:	f04f 0300 	mov.w	r3, #0
 80013dc:	461a      	mov	r2, r3
 80013de:	d816      	bhi.n	800140e <MCM_Trig_Functions+0x4a>
 80013e0:	b361      	cbz	r1, 800143c <MCM_Trig_Functions+0x78>
 80013e2:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 80013e6:	d109      	bne.n	80013fc <MCM_Trig_Functions+0x38>
      break;
    }

    case U270_360:
    {
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80013e8:	b2c0      	uxtb	r0, r0
 80013ea:	43c2      	mvns	r2, r0
 80013ec:	491a      	ldr	r1, [pc, #104]	@ (8001458 <MCM_Trig_Functions+0x94>)
 80013ee:	b2d2      	uxtb	r2, r2
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
 80013f0:	f931 3010 	ldrsh.w	r3, [r1, r0, lsl #1]
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80013f4:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80013f8:	4252      	negs	r2, r2
 80013fa:	b212      	sxth	r2, r2
    }

    default:
      break;
  }
  return (Local_Components);
 80013fc:	b29b      	uxth	r3, r3
 80013fe:	2000      	movs	r0, #0
 8001400:	f363 000f 	bfi	r0, r3, #0, #16
 8001404:	b292      	uxth	r2, r2
 8001406:	f362 401f 	bfi	r0, r2, #16, #16
}
 800140a:	b002      	add	sp, #8
 800140c:	4770      	bx	lr
  switch (((uint16_t)uhindex) & SIN_MASK)
 800140e:	f5b1 7f40 	cmp.w	r1, #768	@ 0x300
 8001412:	d1f3      	bne.n	80013fc <MCM_Trig_Functions+0x38>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001414:	4910      	ldr	r1, [pc, #64]	@ (8001458 <MCM_Trig_Functions+0x94>)
 8001416:	b2c0      	uxtb	r0, r0
 8001418:	43c2      	mvns	r2, r0
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 800141a:	f831 3010 	ldrh.w	r3, [r1, r0, lsl #1]
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800141e:	b2d2      	uxtb	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001420:	425b      	negs	r3, r3
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001422:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001426:	b21b      	sxth	r3, r3
      break;
 8001428:	e7e8      	b.n	80013fc <MCM_Trig_Functions+0x38>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 800142a:	b2c0      	uxtb	r0, r0
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800142c:	43c3      	mvns	r3, r0
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 800142e:	490a      	ldr	r1, [pc, #40]	@ (8001458 <MCM_Trig_Functions+0x94>)
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001430:	b2db      	uxtb	r3, r3
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8001432:	f931 2010 	ldrsh.w	r2, [r1, r0, lsl #1]
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001436:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
      break;
 800143a:	e7df      	b.n	80013fc <MCM_Trig_Functions+0x38>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 800143c:	b2c0      	uxtb	r0, r0
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800143e:	43c3      	mvns	r3, r0
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001440:	4905      	ldr	r1, [pc, #20]	@ (8001458 <MCM_Trig_Functions+0x94>)
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001442:	b2db      	uxtb	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001444:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001448:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 800144c:	4252      	negs	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800144e:	425b      	negs	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001450:	b212      	sxth	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001452:	b21b      	sxth	r3, r3
      break;
 8001454:	e7d2      	b.n	80013fc <MCM_Trig_Functions+0x38>
 8001456:	bf00      	nop
 8001458:	08008bb0 	.word	0x08008bb0

0800145c <MCM_Park>:
{
 800145c:	b530      	push	{r4, r5, lr}
 800145e:	4605      	mov	r5, r0
 8001460:	4604      	mov	r4, r0
 8001462:	b085      	sub	sp, #20
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 8001464:	4608      	mov	r0, r1
 8001466:	f7ff ffad 	bl	80013c4 <MCM_Trig_Functions>
 800146a:	b22d      	sxth	r5, r5
 800146c:	b201      	sxth	r1, r0
 800146e:	1424      	asrs	r4, r4, #16
 8001470:	1400      	asrs	r0, r0, #16
  q_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hCos);
 8001472:	fb05 f301 	mul.w	r3, r5, r1
  wqd_tmp = (q_tmp_1 - q_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8001476:	fb04 3310 	mls	r3, r4, r0, r3
  if (wqd_tmp > INT16_MAX)
 800147a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800147e:	da05      	bge.n	800148c <MCM_Park+0x30>
 8001480:	13da      	asrs	r2, r3, #15
  else if (wqd_tmp < (-32768))
 8001482:	f512 4f00 	cmn.w	r2, #32768	@ 0x8000
 8001486:	da22      	bge.n	80014ce <MCM_Park+0x72>
 8001488:	4a14      	ldr	r2, [pc, #80]	@ (80014dc <MCM_Park+0x80>)
 800148a:	e001      	b.n	8001490 <MCM_Park+0x34>
 800148c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
  d_tmp_2 = Input.beta * ((int32_t )Local_Vector_Components.hCos);
 8001490:	fb01 f404 	mul.w	r4, r1, r4
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8001494:	fb05 4400 	mla	r4, r5, r0, r4
  if (wqd_tmp > INT16_MAX)
 8001498:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800149c:	ea4f 33e4 	mov.w	r3, r4, asr #15
  if (wqd_tmp > INT16_MAX)
 80014a0:	da04      	bge.n	80014ac <MCM_Park+0x50>
  else if (wqd_tmp < (-32768))
 80014a2:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 80014a6:	da0c      	bge.n	80014c2 <MCM_Park+0x66>
 80014a8:	4b0c      	ldr	r3, [pc, #48]	@ (80014dc <MCM_Park+0x80>)
 80014aa:	e001      	b.n	80014b0 <MCM_Park+0x54>
 80014ac:	f647 73ff 	movw	r3, #32767	@ 0x7fff
  return (Output);
 80014b0:	b292      	uxth	r2, r2
 80014b2:	2000      	movs	r0, #0
 80014b4:	f362 000f 	bfi	r0, r2, #0, #16
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	f363 401f 	bfi	r0, r3, #16, #16
}
 80014be:	b005      	add	sp, #20
 80014c0:	bd30      	pop	{r4, r5, pc}
    hqd_tmp = ((int16_t)wqd_tmp);
 80014c2:	4906      	ldr	r1, [pc, #24]	@ (80014dc <MCM_Park+0x80>)
 80014c4:	b21b      	sxth	r3, r3
 80014c6:	428b      	cmp	r3, r1
 80014c8:	bfb8      	it	lt
 80014ca:	460b      	movlt	r3, r1
 80014cc:	e7f0      	b.n	80014b0 <MCM_Park+0x54>
    hqd_tmp = ((int16_t)wqd_tmp);
 80014ce:	4b03      	ldr	r3, [pc, #12]	@ (80014dc <MCM_Park+0x80>)
 80014d0:	b212      	sxth	r2, r2
 80014d2:	429a      	cmp	r2, r3
 80014d4:	bfb8      	it	lt
 80014d6:	461a      	movlt	r2, r3
 80014d8:	e7da      	b.n	8001490 <MCM_Park+0x34>
 80014da:	bf00      	nop
 80014dc:	ffff8001 	.word	0xffff8001

080014e0 <MCM_Rev_Park>:
{
 80014e0:	b530      	push	{r4, r5, lr}
 80014e2:	4605      	mov	r5, r0
 80014e4:	b085      	sub	sp, #20
 80014e6:	4604      	mov	r4, r0
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 80014e8:	4608      	mov	r0, r1
 80014ea:	f7ff ff6b 	bl	80013c4 <MCM_Trig_Functions>
 80014ee:	1424      	asrs	r4, r4, #16
 80014f0:	1402      	asrs	r2, r0, #16
 80014f2:	b22d      	sxth	r5, r5
 80014f4:	b200      	sxth	r0, r0
  alpha_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hSin);
 80014f6:	fb04 f302 	mul.w	r3, r4, r2
  Output.alpha = (int16_t)(((alpha_tmp1) + (alpha_tmp2)) >> 15);
 80014fa:	fb05 3300 	mla	r3, r5, r0, r3
  beta_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hCos);
 80014fe:	fb00 f404 	mul.w	r4, r0, r4
  Output.beta = (int16_t)((beta_tmp2 - beta_tmp1) >> 15);
 8001502:	fb05 4412 	mls	r4, r5, r2, r4
  return (Output);
 8001506:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 800150a:	2000      	movs	r0, #0
 800150c:	f363 000f 	bfi	r0, r3, #0, #16
 8001510:	f3c4 34cf 	ubfx	r4, r4, #15, #16
 8001514:	f364 401f 	bfi	r0, r4, #16, #16
}
 8001518:	b005      	add	sp, #20
 800151a:	bd30      	pop	{r4, r5, pc}

0800151c <MCM_Sqrt>:
  */
__weak int32_t MCM_Sqrt(int32_t wInput)
{
  int32_t wtemprootnew;

  if (wInput > 0)
 800151c:	1e03      	subs	r3, r0, #0
 800151e:	dd32      	ble.n	8001586 <MCM_Sqrt+0x6a>
    {
      wtemproot = ((int32_t)128);
    }
    else
    {
      wtemproot = ((int32_t)8192);
 8001520:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001524:	bfd4      	ite	le
 8001526:	2180      	movle	r1, #128	@ 0x80
 8001528:	f44f 5100 	movgt.w	r1, #8192	@ 0x2000
    }

    do
    {
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 800152c:	fb93 f2f1 	sdiv	r2, r3, r1
 8001530:	440a      	add	r2, r1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 8001532:	ebb1 0f62 	cmp.w	r1, r2, asr #1
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 8001536:	ea4f 0062 	mov.w	r0, r2, asr #1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 800153a:	d025      	beq.n	8001588 <MCM_Sqrt+0x6c>
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 800153c:	fb93 f2f0 	sdiv	r2, r3, r0
 8001540:	4402      	add	r2, r0
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 8001542:	ebb0 0f62 	cmp.w	r0, r2, asr #1
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 8001546:	ea4f 0162 	mov.w	r1, r2, asr #1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 800154a:	d01d      	beq.n	8001588 <MCM_Sqrt+0x6c>
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 800154c:	fb93 f2f1 	sdiv	r2, r3, r1
 8001550:	440a      	add	r2, r1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 8001552:	ebb1 0f62 	cmp.w	r1, r2, asr #1
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 8001556:	ea4f 0062 	mov.w	r0, r2, asr #1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 800155a:	d015      	beq.n	8001588 <MCM_Sqrt+0x6c>
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 800155c:	fb93 f2f0 	sdiv	r2, r3, r0
 8001560:	4402      	add	r2, r0
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 8001562:	ebb0 0f62 	cmp.w	r0, r2, asr #1
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 8001566:	ea4f 0162 	mov.w	r1, r2, asr #1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 800156a:	d00d      	beq.n	8001588 <MCM_Sqrt+0x6c>
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 800156c:	fb93 f2f1 	sdiv	r2, r3, r1
 8001570:	440a      	add	r2, r1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 8001572:	ebb1 0f62 	cmp.w	r1, r2, asr #1
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 8001576:	ea4f 0062 	mov.w	r0, r2, asr #1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 800157a:	d005      	beq.n	8001588 <MCM_Sqrt+0x6c>
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 800157c:	fb93 f3f0 	sdiv	r3, r3, r0
 8001580:	4418      	add	r0, r3
 8001582:	1040      	asrs	r0, r0, #1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 8001584:	4770      	bx	lr
    while (biter < 6U);

  }
  else
  {
    wtemprootnew = (int32_t)0;
 8001586:	2000      	movs	r0, #0
  }

  return (wtemprootnew);
}
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop

0800158c <FOC_Clear>:
  *         controller. It must be called before each motor restart.
  *         It does not clear speed sensor.
  * @param  bMotor related motor it can be M1 or M2.
  */
__weak void FOC_Clear(uint8_t bMotor)
{
 800158c:	b538      	push	{r3, r4, r5, lr}
 800158e:	2326      	movs	r3, #38	@ 0x26
 8001590:	4916      	ldr	r1, [pc, #88]	@ (80015ec <FOC_Clear+0x60>)
 8001592:	fb00 f303 	mul.w	r3, r0, r3

  ab_t NULL_ab = {((int16_t)0), ((int16_t)0)};
  qd_t NULL_qd = {((int16_t)0), ((int16_t)0)};
  alphabeta_t NULL_alphabeta = {((int16_t)0), ((int16_t)0)};

  FOCVars[bMotor].Iab = NULL_ab;
 8001596:	2400      	movs	r4, #0
 8001598:	50cc      	str	r4, [r1, r3]
{
 800159a:	4605      	mov	r5, r0
 800159c:	f103 0208 	add.w	r2, r3, #8
 80015a0:	1858      	adds	r0, r3, r1
 80015a2:	3310      	adds	r3, #16
 80015a4:	440a      	add	r2, r1
 80015a6:	440b      	add	r3, r1
  FOCVars[bMotor].hTeref = (int16_t)0;
  FOCVars[bMotor].Vqd = NULL_qd;
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 80015a8:	4911      	ldr	r1, [pc, #68]	@ (80015f0 <FOC_Clear+0x64>)
  FOCVars[bMotor].Iab = NULL_ab;
 80015aa:	6044      	str	r4, [r0, #4]
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 80015ac:	f851 0025 	ldr.w	r0, [r1, r5, lsl #2]
  FOCVars[bMotor].Iqd = NULL_qd;
 80015b0:	6054      	str	r4, [r2, #4]
 80015b2:	6094      	str	r4, [r2, #8]
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 80015b4:	4621      	mov	r1, r4
  FOCVars[bMotor].Vqd = NULL_qd;
 80015b6:	f8c3 4006 	str.w	r4, [r3, #6]
 80015ba:	f8c3 400a 	str.w	r4, [r3, #10]
 80015be:	f8c3 400e 	str.w	r4, [r3, #14]
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 80015c2:	f004 fd5f 	bl	8006084 <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], ((int32_t)0));
 80015c6:	4b0b      	ldr	r3, [pc, #44]	@ (80015f4 <FOC_Clear+0x68>)
 80015c8:	4621      	mov	r1, r4
 80015ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80015ce:	f004 fd59 	bl	8006084 <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 80015d2:	4b09      	ldr	r3, [pc, #36]	@ (80015f8 <FOC_Clear+0x6c>)
 80015d4:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80015d8:	f005 fdc8 	bl	800716c <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80015dc:	4b07      	ldr	r3, [pc, #28]	@ (80015fc <FOC_Clear+0x70>)
 80015de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 80015e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80015e6:	f000 bf6d 	b.w	80024c4 <PWMC_SwitchOffPWM>
 80015ea:	bf00      	nop
 80015ec:	200005d0 	.word	0x200005d0
 80015f0:	20000008 	.word	0x20000008
 80015f4:	20000004 	.word	0x20000004
 80015f8:	2000000c 	.word	0x2000000c
 80015fc:	200005cc 	.word	0x200005cc

08001600 <MCboot>:
  if (MC_NULL == pMCIList)
 8001600:	2800      	cmp	r0, #0
 8001602:	d072      	beq.n	80016ea <MCboot+0xea>
{
 8001604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8001608:	f8df b12c 	ldr.w	fp, [pc, #300]	@ 8001738 <MCboot+0x138>
    bMCBootCompleted = (uint8_t )0;
 800160c:	f8df 912c 	ldr.w	r9, [pc, #300]	@ 800173c <MCboot+0x13c>
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &STO_PLL_M1._Super);
 8001610:	4d36      	ldr	r5, [pc, #216]	@ (80016ec <MCboot+0xec>)
    RVBS_Init(&BusVoltageSensor_M1);
 8001612:	4e37      	ldr	r6, [pc, #220]	@ (80016f0 <MCboot+0xf0>)
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 8001614:	4f37      	ldr	r7, [pc, #220]	@ (80016f4 <MCboot+0xf4>)
{
 8001616:	b085      	sub	sp, #20
    bMCBootCompleted = (uint8_t )0;
 8001618:	f04f 0800 	mov.w	r8, #0
 800161c:	4604      	mov	r4, r0
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 800161e:	4836      	ldr	r0, [pc, #216]	@ (80016f8 <MCboot+0xf8>)
 8001620:	f8cb 0000 	str.w	r0, [fp]
    bMCBootCompleted = (uint8_t )0;
 8001624:	f889 8000 	strb.w	r8, [r9]
    R3_1_Init(&PWM_Handle_M1);
 8001628:	f005 f874 	bl	8006714 <R3_1_Init>
    ASPEP_start(&aspepOverUartA);
 800162c:	4833      	ldr	r0, [pc, #204]	@ (80016fc <MCboot+0xfc>)
 800162e:	f7ff f895 	bl	800075c <ASPEP_start>
    startTimers();
 8001632:	f004 fdd5 	bl	80061e0 <startTimers>
    PID_HandleInit(&PIDSpeedHandle_M1);
 8001636:	4832      	ldr	r0, [pc, #200]	@ (8001700 <MCboot+0x100>)
 8001638:	f004 fd10 	bl	800605c <PID_HandleInit>
    STO_PLL_Init (&STO_PLL_M1);
 800163c:	4831      	ldr	r0, [pc, #196]	@ (8001704 <MCboot+0x104>)
 800163e:	f006 f823 	bl	8007688 <STO_PLL_Init>
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &STO_PLL_M1._Super);
 8001642:	4a30      	ldr	r2, [pc, #192]	@ (8001704 <MCboot+0x104>)
 8001644:	492e      	ldr	r1, [pc, #184]	@ (8001700 <MCboot+0x100>)
 8001646:	6828      	ldr	r0, [r5, #0]
 8001648:	f005 fd76 	bl	8007138 <STC_Init>
    VSS_Init(&VirtualSpeedSensorM1);
 800164c:	482e      	ldr	r0, [pc, #184]	@ (8001708 <MCboot+0x108>)
 800164e:	f006 f919 	bl	8007884 <VSS_Init>
    RUC_Init(&RevUpControlM1, pSTC[M1], &VirtualSpeedSensorM1, &STO_M1, pwmcHandle[M1]);
 8001652:	f8db 3000 	ldr.w	r3, [fp]
 8001656:	9300      	str	r3, [sp, #0]
 8001658:	6829      	ldr	r1, [r5, #0]
 800165a:	4a2b      	ldr	r2, [pc, #172]	@ (8001708 <MCboot+0x108>)
 800165c:	4b2b      	ldr	r3, [pc, #172]	@ (800170c <MCboot+0x10c>)
 800165e:	482c      	ldr	r0, [pc, #176]	@ (8001710 <MCboot+0x110>)
 8001660:	f005 fc3a 	bl	8006ed8 <RUC_Init>
    PID_HandleInit(&PIDIqHandle_M1);
 8001664:	482b      	ldr	r0, [pc, #172]	@ (8001714 <MCboot+0x114>)
 8001666:	f004 fcf9 	bl	800605c <PID_HandleInit>
    PID_HandleInit(&PIDIdHandle_M1);
 800166a:	482b      	ldr	r0, [pc, #172]	@ (8001718 <MCboot+0x118>)
 800166c:	f004 fcf6 	bl	800605c <PID_HandleInit>
    (void)RCM_RegisterRegConv(&VbusRegConv_M1);
 8001670:	482a      	ldr	r0, [pc, #168]	@ (800171c <MCboot+0x11c>)
 8001672:	f001 ffad 	bl	80035d0 <RCM_RegisterRegConv>
    RVBS_Init(&BusVoltageSensor_M1);
 8001676:	4630      	mov	r0, r6
 8001678:	f005 fb42 	bl	8006d00 <RVBS_Init>
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 800167c:	4b28      	ldr	r3, [pc, #160]	@ (8001720 <MCboot+0x120>)
    NTC_Init(&TempSensor_M1);
 800167e:	4829      	ldr	r0, [pc, #164]	@ (8001724 <MCboot+0x124>)
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	60de      	str	r6, [r3, #12]
    pMPM[M1]->pFOCVars = &FOCVars[M1];
 8001684:	4e28      	ldr	r6, [pc, #160]	@ (8001728 <MCboot+0x128>)
 8001686:	609e      	str	r6, [r3, #8]
    NTC_Init(&TempSensor_M1);
 8001688:	f004 fcca 	bl	8006020 <NTC_Init>
    pREMNG[M1] = &RampExtMngrHFParamsM1;
 800168c:	4b27      	ldr	r3, [pc, #156]	@ (800172c <MCboot+0x12c>)
 800168e:	4828      	ldr	r0, [pc, #160]	@ (8001730 <MCboot+0x130>)
 8001690:	6018      	str	r0, [r3, #0]
    REMNG_Init(pREMNG[M1]);
 8001692:	f005 fb8f 	bl	8006db4 <REMNG_Init>
    FOC_Clear(M1);
 8001696:	4640      	mov	r0, r8
 8001698:	f7ff ff78 	bl	800158c <FOC_Clear>
    FOCVars[M1].bDriveInput = EXTERNAL;
 800169c:	f04f 0a01 	mov.w	sl, #1
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 80016a0:	6828      	ldr	r0, [r5, #0]
    FOCVars[M1].bDriveInput = EXTERNAL;
 80016a2:	f886 a024 	strb.w	sl, [r6, #36]	@ 0x24
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 80016a6:	f005 fdf3 	bl	8007290 <STC_GetDefaultIqdref>
 80016aa:	6130      	str	r0, [r6, #16]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 80016ac:	6828      	ldr	r0, [r5, #0]
 80016ae:	f005 fdef 	bl	8007290 <STC_GetDefaultIqdref>
 80016b2:	f3c0 400f 	ubfx	r0, r0, #16, #16
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 80016b6:	6829      	ldr	r1, [r5, #0]
 80016b8:	f8db 3000 	ldr.w	r3, [fp]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 80016bc:	82b0      	strh	r0, [r6, #20]
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 80016be:	4632      	mov	r2, r6
 80016c0:	4638      	mov	r0, r7
 80016c2:	f7ff fce9 	bl	8001098 <MCI_Init>
   Mci[M1].pScale = &scaleParams_M1;
 80016c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001734 <MCboot+0x134>)
    MCI_ExecSpeedRamp(&Mci[M1],
 80016c8:	6828      	ldr	r0, [r5, #0]
   Mci[M1].pScale = &scaleParams_M1;
 80016ca:	61bb      	str	r3, [r7, #24]
    MCI_ExecSpeedRamp(&Mci[M1],
 80016cc:	f005 fddc 	bl	8007288 <STC_GetMecSpeedRefUnitDefault>
 80016d0:	4642      	mov	r2, r8
 80016d2:	4601      	mov	r1, r0
 80016d4:	4638      	mov	r0, r7
 80016d6:	f7ff fcef 	bl	80010b8 <MCI_ExecSpeedRamp>
    pMCIList[M1] = &Mci[M1];
 80016da:	6027      	str	r7, [r4, #0]
    MC_APP_BootHook();
 80016dc:	f7ff fcd8 	bl	8001090 <MC_APP_BootHook>
    bMCBootCompleted = 1U;
 80016e0:	f889 a000 	strb.w	sl, [r9]
}
 80016e4:	b005      	add	sp, #20
 80016e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80016ea:	4770      	bx	lr
 80016ec:	2000000c 	.word	0x2000000c
 80016f0:	2000002c 	.word	0x2000002c
 80016f4:	20000584 	.word	0x20000584
 80016f8:	200001e8 	.word	0x200001e8
 80016fc:	20000428 	.word	0x20000428
 8001700:	20000390 	.word	0x20000390
 8001704:	20000088 	.word	0x20000088
 8001708:	200001b0 	.word	0x200001b0
 800170c:	20000074 	.word	0x20000074
 8001710:	2000028c 	.word	0x2000028c
 8001714:	20000364 	.word	0x20000364
 8001718:	20000338 	.word	0x20000338
 800171c:	20000048 	.word	0x20000048
 8001720:	20000000 	.word	0x20000000
 8001724:	20000058 	.word	0x20000058
 8001728:	200005d0 	.word	0x200005d0
 800172c:	200005c8 	.word	0x200005c8
 8001730:	20000014 	.word	0x20000014
 8001734:	200003dc 	.word	0x200003dc
 8001738:	200005cc 	.word	0x200005cc
 800173c:	200005c0 	.word	0x200005c0

08001740 <FOC_InitAdditionalMethods>:
    {
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
    }
}
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop

08001744 <FOC_CalcCurrRef>:
  *         MTPA algorithm(s). It must be called with the periodicity specified
  *         in oTSC parameters.
  * @param  bMotor related motor it can be M1 or M2.
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 8001744:	b510      	push	{r4, lr}

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if (INTERNAL == FOCVars[bMotor].bDriveInput)
 8001746:	4c08      	ldr	r4, [pc, #32]	@ (8001768 <FOC_CalcCurrRef+0x24>)
 8001748:	2326      	movs	r3, #38	@ 0x26
 800174a:	fb03 4400 	mla	r4, r3, r0, r4
 800174e:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 8001752:	b103      	cbz	r3, 8001756 <FOC_CalcCurrRef+0x12>
    /* Nothing to do */
  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 8001754:	bd10      	pop	{r4, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 8001756:	4b05      	ldr	r3, [pc, #20]	@ (800176c <FOC_CalcCurrRef+0x28>)
 8001758:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800175c:	f005 fd5e 	bl	800721c <STC_CalcTorqueReference>
 8001760:	83e0      	strh	r0, [r4, #30]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 8001762:	8220      	strh	r0, [r4, #16]
}
 8001764:	bd10      	pop	{r4, pc}
 8001766:	bf00      	nop
 8001768:	200005d0 	.word	0x200005d0
 800176c:	2000000c 	.word	0x2000000c

08001770 <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted.
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 8001770:	4b01      	ldr	r3, [pc, #4]	@ (8001778 <TSK_SetChargeBootCapDelayM1+0x8>)
 8001772:	8018      	strh	r0, [r3, #0]
}
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	200005c4 	.word	0x200005c4

0800177c <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise.
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hBootCapDelayCounterM1)
 800177c:	4b03      	ldr	r3, [pc, #12]	@ (800178c <TSK_ChargeBootCapDelayHasElapsedM1+0x10>)
 800177e:	8818      	ldrh	r0, [r3, #0]
 8001780:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8001782:	fab0 f080 	clz	r0, r0
 8001786:	0940      	lsrs	r0, r0, #5
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	200005c4 	.word	0x200005c4

08001790 <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted.
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 8001790:	4b01      	ldr	r3, [pc, #4]	@ (8001798 <TSK_SetStopPermanencyTimeM1+0x8>)
 8001792:	8018      	strh	r0, [r3, #0]
}
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	200005c2 	.word	0x200005c2

0800179c <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise.
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hStopPermanencyCounterM1)
 800179c:	4b03      	ldr	r3, [pc, #12]	@ (80017ac <TSK_StopPermanencyTimeHasElapsedM1+0x10>)
 800179e:	8818      	ldrh	r0, [r3, #0]
 80017a0:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 80017a2:	fab0 f080 	clz	r0, r0
 80017a6:	0940      	lsrs	r0, r0, #5
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	200005c2 	.word	0x200005c2

080017b0 <TSK_MediumFrequencyTaskM1>:
{
 80017b0:	b570      	push	{r4, r5, r6, lr}
 80017b2:	b082      	sub	sp, #8
  int16_t wAux = 0;
 80017b4:	2300      	movs	r3, #0
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit(&STO_PLL_M1, &wAux);
 80017b6:	4669      	mov	r1, sp
 80017b8:	48ba      	ldr	r0, [pc, #744]	@ (8001aa4 <TSK_MediumFrequencyTaskM1+0x2f4>)
  int16_t wAux = 0;
 80017ba:	f8ad 3000 	strh.w	r3, [sp]
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit(&STO_PLL_M1, &wAux);
 80017be:	f005 fe6f 	bl	80074a0 <STO_PLL_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower(pMPM[M1]);
 80017c2:	4eb9      	ldr	r6, [pc, #740]	@ (8001aa8 <TSK_MediumFrequencyTaskM1+0x2f8>)
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 80017c4:	4cb9      	ldr	r4, [pc, #740]	@ (8001aac <TSK_MediumFrequencyTaskM1+0x2fc>)
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit(&STO_PLL_M1, &wAux);
 80017c6:	4605      	mov	r5, r0
  PQD_CalcElMotorPower(pMPM[M1]);
 80017c8:	6830      	ldr	r0, [r6, #0]
 80017ca:	f004 fccf 	bl	800616c <PQD_CalcElMotorPower>
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 80017ce:	4620      	mov	r0, r4
 80017d0:	f7ff fcdc 	bl	800118c <MCI_GetCurrentFaults>
 80017d4:	b118      	cbz	r0, 80017de <TSK_MediumFrequencyTaskM1+0x2e>
    Mci[M1].State = FAULT_NOW;
 80017d6:	230a      	movs	r3, #10
 80017d8:	77e3      	strb	r3, [r4, #31]
}
 80017da:	b002      	add	sp, #8
 80017dc:	bd70      	pop	{r4, r5, r6, pc}
    if (MCI_GetOccurredFaults(&Mci[M1]) == MC_NO_FAULTS)
 80017de:	4620      	mov	r0, r4
 80017e0:	f7ff fcd2 	bl	8001188 <MCI_GetOccurredFaults>
 80017e4:	bb70      	cbnz	r0, 8001844 <TSK_MediumFrequencyTaskM1+0x94>
      switch (Mci[M1].State)
 80017e6:	7fe3      	ldrb	r3, [r4, #31]
 80017e8:	2b13      	cmp	r3, #19
 80017ea:	d8f6      	bhi.n	80017da <TSK_MediumFrequencyTaskM1+0x2a>
 80017ec:	a201      	add	r2, pc, #4	@ (adr r2, 80017f4 <TSK_MediumFrequencyTaskM1+0x44>)
 80017ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017f2:	bf00      	nop
 80017f4:	080019c5 	.word	0x080019c5
 80017f8:	080017db 	.word	0x080017db
 80017fc:	080017db 	.word	0x080017db
 8001800:	080017db 	.word	0x080017db
 8001804:	08001933 	.word	0x08001933
 8001808:	080017db 	.word	0x080017db
 800180c:	0800190f 	.word	0x0800190f
 8001810:	080017db 	.word	0x080017db
 8001814:	080018ef 	.word	0x080018ef
 8001818:	080017db 	.word	0x080017db
 800181c:	08001845 	.word	0x08001845
 8001820:	080018e1 	.word	0x080018e1
 8001824:	080017db 	.word	0x080017db
 8001828:	080017db 	.word	0x080017db
 800182c:	080017db 	.word	0x080017db
 8001830:	080017db 	.word	0x080017db
 8001834:	0800189f 	.word	0x0800189f
 8001838:	0800186d 	.word	0x0800186d
 800183c:	080017db 	.word	0x080017db
 8001840:	0800184d 	.word	0x0800184d
      Mci[M1].State = FAULT_OVER;
 8001844:	230b      	movs	r3, #11
 8001846:	77e3      	strb	r3, [r4, #31]
}
 8001848:	b002      	add	sp, #8
 800184a:	bd70      	pop	{r4, r5, r6, pc}
          if (MCI_STOP == Mci[M1].DirectCommand)
 800184c:	7fa3      	ldrb	r3, [r4, #30]
 800184e:	2b05      	cmp	r3, #5
 8001850:	f000 80d0 	beq.w	80019f4 <TSK_MediumFrequencyTaskM1+0x244>
            if (! RUC_Exec(&RevUpControlM1))
 8001854:	4896      	ldr	r0, [pc, #600]	@ (8001ab0 <TSK_MediumFrequencyTaskM1+0x300>)
 8001856:	f005 fbc1 	bl	8006fdc <RUC_Exec>
 800185a:	4602      	mov	r2, r0
 800185c:	2800      	cmp	r0, #0
 800185e:	f040 80e4 	bne.w	8001a2a <TSK_MediumFrequencyTaskM1+0x27a>
              MCI_FaultProcessing(&Mci[M1], MC_START_UP, 0);
 8001862:	4892      	ldr	r0, [pc, #584]	@ (8001aac <TSK_MediumFrequencyTaskM1+0x2fc>)
 8001864:	2110      	movs	r1, #16
 8001866:	f7ff fc45 	bl	80010f4 <MCI_FaultProcessing>
 800186a:	e7b6      	b.n	80017da <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_STOP == Mci[M1].DirectCommand)
 800186c:	7fa3      	ldrb	r3, [r4, #30]
    R3_1_SwitchOffPWM(pwmcHandle[motor]);
 800186e:	4d91      	ldr	r5, [pc, #580]	@ (8001ab4 <TSK_MediumFrequencyTaskM1+0x304>)
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001870:	2b05      	cmp	r3, #5
    R3_1_SwitchOffPWM(pwmcHandle[motor]);
 8001872:	6828      	ldr	r0, [r5, #0]
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001874:	f000 80c0 	beq.w	80019f8 <TSK_MediumFrequencyTaskM1+0x248>
            if (PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC))
 8001878:	2101      	movs	r1, #1
 800187a:	f000 fe27 	bl	80024cc <PWMC_CurrentReadingCalibr>
 800187e:	2800      	cmp	r0, #0
 8001880:	d0ab      	beq.n	80017da <TSK_MediumFrequencyTaskM1+0x2a>
              if (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand)
 8001882:	7fa3      	ldrb	r3, [r4, #30]
 8001884:	2b03      	cmp	r3, #3
 8001886:	f000 8103 	beq.w	8001a90 <TSK_MediumFrequencyTaskM1+0x2e0>
                R3_1_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 800188a:	6828      	ldr	r0, [r5, #0]
 800188c:	2100      	movs	r1, #0
 800188e:	f004 fee9 	bl	8006664 <R3_1_TurnOnLowSides>
                TSK_SetChargeBootCapDelayM1(M1_CHARGE_BOOT_CAP_TICKS);
 8001892:	2014      	movs	r0, #20
 8001894:	f7ff ff6c 	bl	8001770 <TSK_SetChargeBootCapDelayM1>
                Mci[M1].State = CHARGE_BOOT_CAP;
 8001898:	2310      	movs	r3, #16
 800189a:	77e3      	strb	r3, [r4, #31]
 800189c:	e79d      	b.n	80017da <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_STOP == Mci[M1].DirectCommand)
 800189e:	7fa3      	ldrb	r3, [r4, #30]
 80018a0:	2b05      	cmp	r3, #5
 80018a2:	f000 80a7 	beq.w	80019f4 <TSK_MediumFrequencyTaskM1+0x244>
            if (TSK_ChargeBootCapDelayHasElapsedM1())
 80018a6:	f7ff ff69 	bl	800177c <TSK_ChargeBootCapDelayHasElapsedM1>
 80018aa:	2800      	cmp	r0, #0
 80018ac:	d095      	beq.n	80017da <TSK_MediumFrequencyTaskM1+0x2a>
              R3_1_SwitchOffPWM(pwmcHandle[M1]);
 80018ae:	4d81      	ldr	r5, [pc, #516]	@ (8001ab4 <TSK_MediumFrequencyTaskM1+0x304>)
 80018b0:	6828      	ldr	r0, [r5, #0]
 80018b2:	f004 fe29 	bl	8006508 <R3_1_SwitchOffPWM>
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 80018b6:	4a80      	ldr	r2, [pc, #512]	@ (8001ab8 <TSK_MediumFrequencyTaskM1+0x308>)
              FOCVars[M1].bDriveInput = EXTERNAL;
 80018b8:	4b80      	ldr	r3, [pc, #512]	@ (8001abc <TSK_MediumFrequencyTaskM1+0x30c>)
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 80018ba:	4981      	ldr	r1, [pc, #516]	@ (8001ac0 <TSK_MediumFrequencyTaskM1+0x310>)
 80018bc:	6810      	ldr	r0, [r2, #0]
              FOCVars[M1].bDriveInput = EXTERNAL;
 80018be:	2201      	movs	r2, #1
 80018c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 80018c4:	f005 fc4e 	bl	8007164 <STC_SetSpeedSensor>
              STO_PLL_Clear(&STO_PLL_M1);
 80018c8:	4876      	ldr	r0, [pc, #472]	@ (8001aa4 <TSK_MediumFrequencyTaskM1+0x2f4>)
 80018ca:	f005 feb7 	bl	800763c <STO_PLL_Clear>
              FOC_Clear( M1 );
 80018ce:	2000      	movs	r0, #0
 80018d0:	f7ff fe5c 	bl	800158c <FOC_Clear>
                Mci[M1].State = START;
 80018d4:	2304      	movs	r3, #4
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 80018d6:	6828      	ldr	r0, [r5, #0]
                Mci[M1].State = START;
 80018d8:	77e3      	strb	r3, [r4, #31]
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 80018da:	f000 fdf5 	bl	80024c8 <PWMC_SwitchOnPWM>
 80018de:	e77c      	b.n	80017da <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_ACK_FAULTS == Mci[M1].DirectCommand)
 80018e0:	7fa3      	ldrb	r3, [r4, #30]
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	f47f af79 	bne.w	80017da <TSK_MediumFrequencyTaskM1+0x2a>
            Mci[M1].DirectCommand = MCI_NO_COMMAND;
 80018e8:	2300      	movs	r3, #0
 80018ea:	83e3      	strh	r3, [r4, #30]
 80018ec:	e775      	b.n	80017da <TSK_MediumFrequencyTaskM1+0x2a>
          if (TSK_StopPermanencyTimeHasElapsedM1())
 80018ee:	f7ff ff55 	bl	800179c <TSK_StopPermanencyTimeHasElapsedM1>
 80018f2:	2800      	cmp	r0, #0
 80018f4:	f43f af71 	beq.w	80017da <TSK_MediumFrequencyTaskM1+0x2a>
            STC_SetSpeedSensor(pSTC[M1], &VirtualSpeedSensorM1._Super);    /* Sensor-less */
 80018f8:	4b6f      	ldr	r3, [pc, #444]	@ (8001ab8 <TSK_MediumFrequencyTaskM1+0x308>)
 80018fa:	4971      	ldr	r1, [pc, #452]	@ (8001ac0 <TSK_MediumFrequencyTaskM1+0x310>)
 80018fc:	6818      	ldr	r0, [r3, #0]
 80018fe:	f005 fc31 	bl	8007164 <STC_SetSpeedSensor>
            VSS_Clear(&VirtualSpeedSensorM1); /* Reset measured speed in IDLE */
 8001902:	486f      	ldr	r0, [pc, #444]	@ (8001ac0 <TSK_MediumFrequencyTaskM1+0x310>)
 8001904:	f005 ffb0 	bl	8007868 <VSS_Clear>
            Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8001908:	2300      	movs	r3, #0
 800190a:	83e3      	strh	r3, [r4, #30]
 800190c:	e765      	b.n	80017da <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_STOP == Mci[M1].DirectCommand)
 800190e:	7fa3      	ldrb	r3, [r4, #30]
 8001910:	2b05      	cmp	r3, #5
 8001912:	d06f      	beq.n	80019f4 <TSK_MediumFrequencyTaskM1+0x244>
            MCI_ExecBufferedCommands(&Mci[M1]);
 8001914:	4865      	ldr	r0, [pc, #404]	@ (8001aac <TSK_MediumFrequencyTaskM1+0x2fc>)
 8001916:	f7ff fbf9 	bl	800110c <MCI_ExecBufferedCommands>
              FOC_CalcCurrRef(M1);
 800191a:	2000      	movs	r0, #0
 800191c:	f7ff ff12 	bl	8001744 <FOC_CalcCurrRef>
              if(!IsSpeedReliable)
 8001920:	2d00      	cmp	r5, #0
 8001922:	f47f af5a 	bne.w	80017da <TSK_MediumFrequencyTaskM1+0x2a>
                MCI_FaultProcessing(&Mci[M1], MC_SPEED_FDBK, 0);
 8001926:	4861      	ldr	r0, [pc, #388]	@ (8001aac <TSK_MediumFrequencyTaskM1+0x2fc>)
 8001928:	462a      	mov	r2, r5
 800192a:	2120      	movs	r1, #32
 800192c:	f7ff fbe2 	bl	80010f4 <MCI_FaultProcessing>
 8001930:	e753      	b.n	80017da <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001932:	7fa3      	ldrb	r3, [r4, #30]
 8001934:	2b05      	cmp	r3, #5
 8001936:	d05d      	beq.n	80019f4 <TSK_MediumFrequencyTaskM1+0x244>
            if(! RUC_Exec(&RevUpControlM1))
 8001938:	485d      	ldr	r0, [pc, #372]	@ (8001ab0 <TSK_MediumFrequencyTaskM1+0x300>)
 800193a:	f005 fb4f 	bl	8006fdc <RUC_Exec>
 800193e:	4602      	mov	r2, r0
 8001940:	2800      	cmp	r0, #0
 8001942:	d168      	bne.n	8001a16 <TSK_MediumFrequencyTaskM1+0x266>
              MCI_FaultProcessing(&Mci[M1], MC_START_UP, 0);
 8001944:	4859      	ldr	r0, [pc, #356]	@ (8001aac <TSK_MediumFrequencyTaskM1+0x2fc>)
 8001946:	2110      	movs	r1, #16
 8001948:	f7ff fbd4 	bl	80010f4 <MCI_FaultProcessing>
            (void)VSS_CalcAvrgMecSpeedUnit(&VirtualSpeedSensorM1, &hForcedMecSpeedUnit);
 800194c:	485c      	ldr	r0, [pc, #368]	@ (8001ac0 <TSK_MediumFrequencyTaskM1+0x310>)
 800194e:	f10d 0102 	add.w	r1, sp, #2
 8001952:	f005 ffed 	bl	8007930 <VSS_CalcAvrgMecSpeedUnit>
            if (true == RUC_FirstAccelerationStageReached(&RevUpControlM1))
 8001956:	4856      	ldr	r0, [pc, #344]	@ (8001ab0 <TSK_MediumFrequencyTaskM1+0x300>)
 8001958:	f005 fb76 	bl	8007048 <RUC_FirstAccelerationStageReached>
 800195c:	2800      	cmp	r0, #0
 800195e:	f43f af3c 	beq.w	80017da <TSK_MediumFrequencyTaskM1+0x2a>
              ObserverConverged = STO_PLL_IsObserverConverged(&STO_PLL_M1, &hForcedMecSpeedUnit);
 8001962:	f10d 0102 	add.w	r1, sp, #2
 8001966:	484f      	ldr	r0, [pc, #316]	@ (8001aa4 <TSK_MediumFrequencyTaskM1+0x2f4>)
 8001968:	f005 fec8 	bl	80076fc <STO_PLL_IsObserverConverged>
 800196c:	4605      	mov	r5, r0
              STO_SetDirection(&STO_PLL_M1, (int8_t)MCI_GetImposedMotorDirection(&Mci[M1]));
 800196e:	484f      	ldr	r0, [pc, #316]	@ (8001aac <TSK_MediumFrequencyTaskM1+0x2fc>)
 8001970:	f7ff fc60 	bl	8001234 <MCI_GetImposedMotorDirection>
 8001974:	b241      	sxtb	r1, r0
 8001976:	484b      	ldr	r0, [pc, #300]	@ (8001aa4 <TSK_MediumFrequencyTaskM1+0x2f4>)
 8001978:	f005 ff72 	bl	8007860 <STO_SetDirection>
              (void)VSS_SetStartTransition(&VirtualSpeedSensorM1, ObserverConverged);
 800197c:	4850      	ldr	r0, [pc, #320]	@ (8001ac0 <TSK_MediumFrequencyTaskM1+0x310>)
 800197e:	4629      	mov	r1, r5
 8001980:	f006 f86c 	bl	8007a5c <VSS_SetStartTransition>
            if (ObserverConverged)
 8001984:	2d00      	cmp	r5, #0
 8001986:	f43f af28 	beq.w	80017da <TSK_MediumFrequencyTaskM1+0x2a>
              qd_t StatorCurrent = MCM_Park(FOCVars[M1].Ialphabeta, SPD_GetElAngle(&STO_PLL_M1._Super));
 800198a:	4846      	ldr	r0, [pc, #280]	@ (8001aa4 <TSK_MediumFrequencyTaskM1+0x2f4>)
 800198c:	4e4b      	ldr	r6, [pc, #300]	@ (8001abc <TSK_MediumFrequencyTaskM1+0x30c>)
              REMNG_Init(pREMNG[M1]);
 800198e:	4d4d      	ldr	r5, [pc, #308]	@ (8001ac4 <TSK_MediumFrequencyTaskM1+0x314>)
              qd_t StatorCurrent = MCM_Park(FOCVars[M1].Ialphabeta, SPD_GetElAngle(&STO_PLL_M1._Super));
 8001990:	f005 fb86 	bl	80070a0 <SPD_GetElAngle>
 8001994:	4601      	mov	r1, r0
 8001996:	6870      	ldr	r0, [r6, #4]
 8001998:	f7ff fd60 	bl	800145c <MCM_Park>
 800199c:	4603      	mov	r3, r0
              REMNG_Init(pREMNG[M1]);
 800199e:	6828      	ldr	r0, [r5, #0]
              qd_t StatorCurrent = MCM_Park(FOCVars[M1].Ialphabeta, SPD_GetElAngle(&STO_PLL_M1._Super));
 80019a0:	9301      	str	r3, [sp, #4]
              REMNG_Init(pREMNG[M1]);
 80019a2:	f005 fa07 	bl	8006db4 <REMNG_Init>
              (void)REMNG_ExecRamp(pREMNG[M1], FOCVars[M1].Iqdref.q, 0);
 80019a6:	f9b6 1010 	ldrsh.w	r1, [r6, #16]
 80019aa:	6828      	ldr	r0, [r5, #0]
 80019ac:	2200      	movs	r2, #0
 80019ae:	f005 fa4d 	bl	8006e4c <REMNG_ExecRamp>
              (void)REMNG_ExecRamp(pREMNG[M1], StatorCurrent.q, TRANSITION_DURATION);
 80019b2:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 80019b6:	6828      	ldr	r0, [r5, #0]
 80019b8:	2219      	movs	r2, #25
 80019ba:	f005 fa47 	bl	8006e4c <REMNG_ExecRamp>
              Mci[M1].State = SWITCH_OVER;
 80019be:	2313      	movs	r3, #19
 80019c0:	77e3      	strb	r3, [r4, #31]
 80019c2:	e70a      	b.n	80017da <TSK_MediumFrequencyTaskM1+0x2a>
          if ((MCI_START == Mci[M1].DirectCommand) || (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand))
 80019c4:	7fa5      	ldrb	r5, [r4, #30]
 80019c6:	f005 05fd 	and.w	r5, r5, #253	@ 0xfd
 80019ca:	2d01      	cmp	r5, #1
 80019cc:	f47f af05 	bne.w	80017da <TSK_MediumFrequencyTaskM1+0x2a>
              RUC_Clear(&RevUpControlM1, MCI_GetImposedMotorDirection(&Mci[M1]));
 80019d0:	4836      	ldr	r0, [pc, #216]	@ (8001aac <TSK_MediumFrequencyTaskM1+0x2fc>)
            if (pwmcHandle[M1]->offsetCalibStatus == false)
 80019d2:	4e38      	ldr	r6, [pc, #224]	@ (8001ab4 <TSK_MediumFrequencyTaskM1+0x304>)
              RUC_Clear(&RevUpControlM1, MCI_GetImposedMotorDirection(&Mci[M1]));
 80019d4:	f7ff fc2e 	bl	8001234 <MCI_GetImposedMotorDirection>
 80019d8:	4601      	mov	r1, r0
 80019da:	4835      	ldr	r0, [pc, #212]	@ (8001ab0 <TSK_MediumFrequencyTaskM1+0x300>)
 80019dc:	f005 faba 	bl	8006f54 <RUC_Clear>
            if (pwmcHandle[M1]->offsetCalibStatus == false)
 80019e0:	6830      	ldr	r0, [r6, #0]
 80019e2:	f890 1081 	ldrb.w	r1, [r0, #129]	@ 0x81
 80019e6:	2900      	cmp	r1, #0
 80019e8:	d14b      	bne.n	8001a82 <TSK_MediumFrequencyTaskM1+0x2d2>
              (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_START);
 80019ea:	f000 fd6f 	bl	80024cc <PWMC_CurrentReadingCalibr>
              Mci[M1].State = OFFSET_CALIB;
 80019ee:	2311      	movs	r3, #17
 80019f0:	77e3      	strb	r3, [r4, #31]
 80019f2:	e6f2      	b.n	80017da <TSK_MediumFrequencyTaskM1+0x2a>
    R3_1_SwitchOffPWM(pwmcHandle[motor]);
 80019f4:	4b2f      	ldr	r3, [pc, #188]	@ (8001ab4 <TSK_MediumFrequencyTaskM1+0x304>)
 80019f6:	6818      	ldr	r0, [r3, #0]
 80019f8:	f004 fd86 	bl	8006508 <R3_1_SwitchOffPWM>
  FOC_Clear(motor);
 80019fc:	2000      	movs	r0, #0
 80019fe:	f7ff fdc5 	bl	800158c <FOC_Clear>
  PQD_Clear(pMPM[motor]);
 8001a02:	6830      	ldr	r0, [r6, #0]
 8001a04:	f004 fbce 	bl	80061a4 <PQD_Clear>
  TSK_SetStopPermanencyTimeM1(STOPPERMANENCY_TICKS);
 8001a08:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001a0c:	f7ff fec0 	bl	8001790 <TSK_SetStopPermanencyTimeM1>
  Mci[motor].State = STOP;
 8001a10:	2308      	movs	r3, #8
 8001a12:	77e3      	strb	r3, [r4, #31]
}
 8001a14:	e6e1      	b.n	80017da <TSK_MediumFrequencyTaskM1+0x2a>
              IqdRef.q = STC_CalcTorqueReference(pSTC[M1]);
 8001a16:	4b28      	ldr	r3, [pc, #160]	@ (8001ab8 <TSK_MediumFrequencyTaskM1+0x308>)
 8001a18:	6818      	ldr	r0, [r3, #0]
 8001a1a:	f005 fbff 	bl	800721c <STC_CalcTorqueReference>
              IqdRef.d = FOCVars[M1].UserIdref;
 8001a1e:	4b27      	ldr	r3, [pc, #156]	@ (8001abc <TSK_MediumFrequencyTaskM1+0x30c>)
 8001a20:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
              FOCVars[M1].Iqdref = IqdRef;
 8001a24:	8218      	strh	r0, [r3, #16]
 8001a26:	825a      	strh	r2, [r3, #18]
 8001a28:	e790      	b.n	800194c <TSK_MediumFrequencyTaskM1+0x19c>
              LoopClosed = VSS_CalcAvrgMecSpeedUnit(&VirtualSpeedSensorM1, &hForcedMecSpeedUnit);
 8001a2a:	4825      	ldr	r0, [pc, #148]	@ (8001ac0 <TSK_MediumFrequencyTaskM1+0x310>)
 8001a2c:	a901      	add	r1, sp, #4
 8001a2e:	f005 ff7f 	bl	8007930 <VSS_CalcAvrgMecSpeedUnit>
 8001a32:	4605      	mov	r5, r0
              tempBool = VSS_TransitionEnded(&VirtualSpeedSensorM1);
 8001a34:	4822      	ldr	r0, [pc, #136]	@ (8001ac0 <TSK_MediumFrequencyTaskM1+0x310>)
 8001a36:	f006 f81f 	bl	8007a78 <VSS_TransitionEnded>
              LoopClosed = LoopClosed || tempBool;
 8001a3a:	b915      	cbnz	r5, 8001a42 <TSK_MediumFrequencyTaskM1+0x292>
 8001a3c:	2800      	cmp	r0, #0
 8001a3e:	f43f aecc 	beq.w	80017da <TSK_MediumFrequencyTaskM1+0x2a>
                                    (((int32_t)FOCVars[M1].Iqdref.q * (int16_t)PID_GetKIDivisor(&PIDSpeedHandle_M1))
 8001a42:	4b1e      	ldr	r3, [pc, #120]	@ (8001abc <TSK_MediumFrequencyTaskM1+0x30c>)
 8001a44:	4820      	ldr	r0, [pc, #128]	@ (8001ac8 <TSK_MediumFrequencyTaskM1+0x318>)
 8001a46:	f9b3 6010 	ldrsh.w	r6, [r3, #16]
                STC_SetSpeedSensor(pSTC[M1], &STO_PLL_M1._Super); /* Observer has converged */
 8001a4a:	4d1b      	ldr	r5, [pc, #108]	@ (8001ab8 <TSK_MediumFrequencyTaskM1+0x308>)
                                    (((int32_t)FOCVars[M1].Iqdref.q * (int16_t)PID_GetKIDivisor(&PIDSpeedHandle_M1))
 8001a4c:	f004 fb24 	bl	8006098 <PID_GetKIDivisor>
                PID_SetIntegralTerm(&PIDSpeedHandle_M1,
 8001a50:	b201      	sxth	r1, r0
 8001a52:	fb06 f101 	mul.w	r1, r6, r1
 8001a56:	481c      	ldr	r0, [pc, #112]	@ (8001ac8 <TSK_MediumFrequencyTaskM1+0x318>)
 8001a58:	f004 fb14 	bl	8006084 <PID_SetIntegralTerm>
                STC_SetSpeedSensor(pSTC[M1], &STO_PLL_M1._Super); /* Observer has converged */
 8001a5c:	4911      	ldr	r1, [pc, #68]	@ (8001aa4 <TSK_MediumFrequencyTaskM1+0x2f4>)
 8001a5e:	6828      	ldr	r0, [r5, #0]
 8001a60:	f005 fb80 	bl	8007164 <STC_SetSpeedSensor>
                FOC_InitAdditionalMethods(M1);
 8001a64:	2000      	movs	r0, #0
 8001a66:	f7ff fe6b 	bl	8001740 <FOC_InitAdditionalMethods>
                FOC_CalcCurrRef(M1);
 8001a6a:	2000      	movs	r0, #0
 8001a6c:	f7ff fe6a 	bl	8001744 <FOC_CalcCurrRef>
                STC_ForceSpeedReferenceToCurrentSpeed(pSTC[M1]); /* Init the reference speed to current speed */
 8001a70:	6828      	ldr	r0, [r5, #0]
 8001a72:	f005 fc1b 	bl	80072ac <STC_ForceSpeedReferenceToCurrentSpeed>
                MCI_ExecBufferedCommands(&Mci[M1]); /* Exec the speed ramp after changing of the speed sensor */
 8001a76:	480d      	ldr	r0, [pc, #52]	@ (8001aac <TSK_MediumFrequencyTaskM1+0x2fc>)
 8001a78:	f7ff fb48 	bl	800110c <MCI_ExecBufferedCommands>
                Mci[M1].State = RUN;
 8001a7c:	2306      	movs	r3, #6
 8001a7e:	77e3      	strb	r3, [r4, #31]
 8001a80:	e6ab      	b.n	80017da <TSK_MediumFrequencyTaskM1+0x2a>
              (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 8001a82:	4629      	mov	r1, r5
              pwmcHandle[M1]->OffCalibrWaitTimeCounter = 1u;
 8001a84:	f8a0 5060 	strh.w	r5, [r0, #96]	@ 0x60
              (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 8001a88:	f000 fd20 	bl	80024cc <PWMC_CurrentReadingCalibr>
              R3_1_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 8001a8c:	6830      	ldr	r0, [r6, #0]
 8001a8e:	e6fd      	b.n	800188c <TSK_MediumFrequencyTaskM1+0xdc>
                FOC_Clear(M1);
 8001a90:	2000      	movs	r0, #0
 8001a92:	f7ff fd7b 	bl	800158c <FOC_Clear>
                PQD_Clear(pMPM[M1]);
 8001a96:	6830      	ldr	r0, [r6, #0]
 8001a98:	f004 fb84 	bl	80061a4 <PQD_Clear>
                Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	83e3      	strh	r3, [r4, #30]
 8001aa0:	e69b      	b.n	80017da <TSK_MediumFrequencyTaskM1+0x2a>
 8001aa2:	bf00      	nop
 8001aa4:	20000088 	.word	0x20000088
 8001aa8:	20000000 	.word	0x20000000
 8001aac:	20000584 	.word	0x20000584
 8001ab0:	2000028c 	.word	0x2000028c
 8001ab4:	200005cc 	.word	0x200005cc
 8001ab8:	2000000c 	.word	0x2000000c
 8001abc:	200005d0 	.word	0x200005d0
 8001ac0:	200001b0 	.word	0x200001b0
 8001ac4:	200005c8 	.word	0x200005c8
 8001ac8:	20000390 	.word	0x20000390

08001acc <MC_Scheduler>:
  if (((uint8_t)1) == bMCBootCompleted)
 8001acc:	4b1d      	ldr	r3, [pc, #116]	@ (8001b44 <MC_Scheduler+0x78>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d000      	beq.n	8001ad6 <MC_Scheduler+0xa>
 8001ad4:	4770      	bx	lr
{
 8001ad6:	b570      	push	{r4, r5, r6, lr}
    if(hMFTaskCounterM1 > 0u)
 8001ad8:	4c1b      	ldr	r4, [pc, #108]	@ (8001b48 <MC_Scheduler+0x7c>)
 8001ada:	8823      	ldrh	r3, [r4, #0]
 8001adc:	b19b      	cbz	r3, 8001b06 <MC_Scheduler+0x3a>
      hMFTaskCounterM1--;
 8001ade:	3b01      	subs	r3, #1
 8001ae0:	b29b      	uxth	r3, r3
    if(hBootCapDelayCounterM1 > 0U)
 8001ae2:	4a1a      	ldr	r2, [pc, #104]	@ (8001b4c <MC_Scheduler+0x80>)
      hMFTaskCounterM1--;
 8001ae4:	8023      	strh	r3, [r4, #0]
    if(hBootCapDelayCounterM1 > 0U)
 8001ae6:	8813      	ldrh	r3, [r2, #0]
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	b11b      	cbz	r3, 8001af4 <MC_Scheduler+0x28>
      hBootCapDelayCounterM1--;
 8001aec:	8813      	ldrh	r3, [r2, #0]
 8001aee:	3b01      	subs	r3, #1
 8001af0:	b29b      	uxth	r3, r3
 8001af2:	8013      	strh	r3, [r2, #0]
    if(hStopPermanencyCounterM1 > 0U)
 8001af4:	4a16      	ldr	r2, [pc, #88]	@ (8001b50 <MC_Scheduler+0x84>)
 8001af6:	8813      	ldrh	r3, [r2, #0]
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	b11b      	cbz	r3, 8001b04 <MC_Scheduler+0x38>
      hStopPermanencyCounterM1--;
 8001afc:	8813      	ldrh	r3, [r2, #0]
 8001afe:	3b01      	subs	r3, #1
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	8013      	strh	r3, [r2, #0]
}
 8001b04:	bd70      	pop	{r4, r5, r6, pc}
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess(MCP_Over_UartA.pTransportLayer,
 8001b06:	4d13      	ldr	r5, [pc, #76]	@ (8001b54 <MC_Scheduler+0x88>)
      TSK_MediumFrequencyTaskM1();
 8001b08:	f7ff fe52 	bl	80017b0 <TSK_MediumFrequencyTaskM1>
      MC_APP_PostMediumFrequencyHook_M1();
 8001b0c:	f7ff fac2 	bl	8001094 <MC_APP_PostMediumFrequencyHook_M1>
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess(MCP_Over_UartA.pTransportLayer,
 8001b10:	4629      	mov	r1, r5
 8001b12:	f851 0b0c 	ldr.w	r0, [r1], #12
 8001b16:	6883      	ldr	r3, [r0, #8]
 8001b18:	4798      	blx	r3
 8001b1a:	6068      	str	r0, [r5, #4]
      if ( 0U == MCP_Over_UartA.rxBuffer)
 8001b1c:	b130      	cbz	r0, 8001b2c <MC_Scheduler+0x60>
        if (0U == MCP_Over_UartA.pTransportLayer->fGetBuffer(MCP_Over_UartA.pTransportLayer,
 8001b1e:	4629      	mov	r1, r5
 8001b20:	220a      	movs	r2, #10
 8001b22:	f851 0b08 	ldr.w	r0, [r1], #8
 8001b26:	6803      	ldr	r3, [r0, #0]
 8001b28:	4798      	blx	r3
 8001b2a:	b908      	cbnz	r0, 8001b30 <MC_Scheduler+0x64>
{
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e7d8      	b.n	8001ae2 <MC_Scheduler+0x16>
          MCP_ReceivedPacket(&MCP_Over_UartA);
 8001b30:	4628      	mov	r0, r5
 8001b32:	f000 fa6f 	bl	8002014 <MCP_ReceivedPacket>
          MCP_Over_UartA.pTransportLayer->fSendPacket(MCP_Over_UartA.pTransportLayer, MCP_Over_UartA.txBuffer,
 8001b36:	6828      	ldr	r0, [r5, #0]
 8001b38:	89ea      	ldrh	r2, [r5, #14]
 8001b3a:	6846      	ldr	r6, [r0, #4]
 8001b3c:	68a9      	ldr	r1, [r5, #8]
 8001b3e:	230a      	movs	r3, #10
 8001b40:	47b0      	blx	r6
 8001b42:	e7f3      	b.n	8001b2c <MC_Scheduler+0x60>
 8001b44:	200005c0 	.word	0x200005c0
 8001b48:	200005c6 	.word	0x200005c6
 8001b4c:	200005c4 	.word	0x200005c4
 8001b50:	200005c2 	.word	0x200005c2
 8001b54:	20000418 	.word	0x20000418

08001b58 <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 8001b58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  /* USER CODE END HighFrequencyTask 0 */

  Observer_Inputs_t STO_Inputs; /* Only if sensorless main */

  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* Only if sensorless */
  if (SWITCH_OVER == Mci[M1].State)
 8001b5c:	f8df 8184 	ldr.w	r8, [pc, #388]	@ 8001ce4 <TSK_HighFrequencyTask+0x18c>
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* Only if sensorless */
 8001b60:	4c55      	ldr	r4, [pc, #340]	@ (8001cb8 <TSK_HighFrequencyTask+0x160>)
  if (SWITCH_OVER == Mci[M1].State)
 8001b62:	f898 301f 	ldrb.w	r3, [r8, #31]
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* Only if sensorless */
 8001b66:	f8d4 001a 	ldr.w	r0, [r4, #26]
{
 8001b6a:	b089      	sub	sp, #36	@ 0x24
  if (SWITCH_OVER == Mci[M1].State)
 8001b6c:	2b13      	cmp	r3, #19
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* Only if sensorless */
 8001b6e:	9005      	str	r0, [sp, #20]
  if (SWITCH_OVER == Mci[M1].State)
 8001b70:	f000 8096 	beq.w	8001ca0 <TSK_HighFrequencyTask+0x148>
  ab_t Iab;
  alphabeta_t Ialphabeta, Valphabeta;
  int16_t hElAngle;
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8001b74:	4b51      	ldr	r3, [pc, #324]	@ (8001cbc <TSK_HighFrequencyTask+0x164>)
  hElAngle = SPD_GetElAngle(speedHandle);
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*PARK_ANGLE_COMPENSATION_FACTOR;
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8001b76:	f8df 9174 	ldr.w	r9, [pc, #372]	@ 8001cec <TSK_HighFrequencyTask+0x194>
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8001b7a:	6818      	ldr	r0, [r3, #0]
 8001b7c:	f005 faf4 	bl	8007168 <STC_GetSpeedSensor>
 8001b80:	4607      	mov	r7, r0
  hElAngle = SPD_GetElAngle(speedHandle);
 8001b82:	f005 fa8d 	bl	80070a0 <SPD_GetElAngle>
 8001b86:	4605      	mov	r5, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*PARK_ANGLE_COMPENSATION_FACTOR;
 8001b88:	4638      	mov	r0, r7
 8001b8a:	f005 fa91 	bl	80070b0 <SPD_GetInstElSpeedDpp>
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8001b8e:	a902      	add	r1, sp, #8
 8001b90:	f8d9 0000 	ldr.w	r0, [r9]
 8001b94:	f000 fb1a 	bl	80021cc <PWMC_GetPhaseCurrents>
  Ialphabeta = MCM_Clarke(Iab);
 8001b98:	9802      	ldr	r0, [sp, #8]
 8001b9a:	f7ff fbe9 	bl	8001370 <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001b9e:	4629      	mov	r1, r5
  Ialphabeta = MCM_Clarke(Iab);
 8001ba0:	9003      	str	r0, [sp, #12]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001ba2:	f7ff fc5b 	bl	800145c <MCM_Park>
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001ba6:	4b46      	ldr	r3, [pc, #280]	@ (8001cc0 <TSK_HighFrequencyTask+0x168>)
 8001ba8:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001bac:	9000      	str	r0, [sp, #0]
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001bae:	b200      	sxth	r0, r0
 8001bb0:	1a09      	subs	r1, r1, r0
 8001bb2:	6818      	ldr	r0, [r3, #0]
 8001bb4:	f004 fa9a 	bl	80060ec <PI_Controller>
  Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8001bb8:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8001bbc:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 8001bc0:	1ac9      	subs	r1, r1, r3
 8001bc2:	4b40      	ldr	r3, [pc, #256]	@ (8001cc4 <TSK_HighFrequencyTask+0x16c>)
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001bc4:	4606      	mov	r6, r0
  Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8001bc6:	6818      	ldr	r0, [r3, #0]
 8001bc8:	f004 fa90 	bl	80060ec <PI_Controller>
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 8001bcc:	f8ad 6004 	strh.w	r6, [sp, #4]
 8001bd0:	f8ad 0006 	strh.w	r0, [sp, #6]
 8001bd4:	9901      	ldr	r1, [sp, #4]
 8001bd6:	483c      	ldr	r0, [pc, #240]	@ (8001cc8 <TSK_HighFrequencyTask+0x170>)
 8001bd8:	f004 f888 	bl	8005cec <Circle_Limitation>
 8001bdc:	4606      	mov	r6, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8001bde:	4638      	mov	r0, r7
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 8001be0:	9601      	str	r6, [sp, #4]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8001be2:	f005 fa65 	bl	80070b0 <SPD_GetInstElSpeedDpp>
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8001be6:	4629      	mov	r1, r5
 8001be8:	9801      	ldr	r0, [sp, #4]
 8001bea:	f7ff fc79 	bl	80014e0 <MCM_Rev_Park>
 8001bee:	4601      	mov	r1, r0
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8001bf0:	f8d9 0000 	ldr.w	r0, [r9]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8001bf4:	9104      	str	r1, [sp, #16]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8001bf6:	f000 faeb 	bl	80021d0 <PWMC_SetPhaseVoltage>

  FOCVars[M1].Vqd = Vqd;
  FOCVars[M1].Iab = Iab;
 8001bfa:	9b02      	ldr	r3, [sp, #8]
 8001bfc:	6023      	str	r3, [r4, #0]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8001bfe:	4601      	mov	r1, r0
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8001c00:	9b03      	ldr	r3, [sp, #12]
  FOCVars[M1].Iqd = Iqd;
  FOCVars[M1].Valphabeta = Valphabeta;
 8001c02:	9804      	ldr	r0, [sp, #16]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8001c04:	6063      	str	r3, [r4, #4]
  if(hFOCreturn == MC_DURATION)
 8001c06:	2901      	cmp	r1, #1
  FOCVars[M1].Iqd = Iqd;
 8001c08:	9b00      	ldr	r3, [sp, #0]
  FOCVars[M1].Vqd = Vqd;
 8001c0a:	f8c4 6016 	str.w	r6, [r4, #22]
  FOCVars[M1].Iqd = Iqd;
 8001c0e:	60e3      	str	r3, [r4, #12]
  FOCVars[M1].Valphabeta = Valphabeta;
 8001c10:	f8c4 001a 	str.w	r0, [r4, #26]
  FOCVars[M1].hElAngle = hElAngle;
 8001c14:	8425      	strh	r5, [r4, #32]
  if(hFOCreturn == MC_DURATION)
 8001c16:	d038      	beq.n	8001c8a <TSK_HighFrequencyTask+0x132>
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 8001c18:	482c      	ldr	r0, [pc, #176]	@ (8001ccc <TSK_HighFrequencyTask+0x174>)
 8001c1a:	f005 fa15 	bl	8007048 <RUC_FirstAccelerationStageReached>
    STO_Inputs.Ialfa_beta = FOCVars[M1].Ialphabeta; /* Only if sensorless */
 8001c1e:	6862      	ldr	r2, [r4, #4]
 8001c20:	9206      	str	r2, [sp, #24]
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 8001c22:	4603      	mov	r3, r0
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /* Only for sensorless */
 8001c24:	482a      	ldr	r0, [pc, #168]	@ (8001cd0 <TSK_HighFrequencyTask+0x178>)
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 8001c26:	461c      	mov	r4, r3
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /* Only for sensorless */
 8001c28:	f004 f858 	bl	8005cdc <VBS_GetAvBusVoltage_d>
    (void)( void )STO_PLL_CalcElAngle(&STO_PLL_M1, &STO_Inputs);
 8001c2c:	a905      	add	r1, sp, #20
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /* Only for sensorless */
 8001c2e:	4603      	mov	r3, r0
    (void)( void )STO_PLL_CalcElAngle(&STO_PLL_M1, &STO_Inputs);
 8001c30:	4828      	ldr	r0, [pc, #160]	@ (8001cd4 <TSK_HighFrequencyTask+0x17c>)
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /* Only for sensorless */
 8001c32:	f8ad 301c 	strh.w	r3, [sp, #28]
    (void)( void )STO_PLL_CalcElAngle(&STO_PLL_M1, &STO_Inputs);
 8001c36:	f005 fb41 	bl	80072bc <STO_PLL_CalcElAngle>
    STO_PLL_CalcAvrgElSpeedDpp(&STO_PLL_M1); /* Only in case of Sensor-less */
 8001c3a:	4826      	ldr	r0, [pc, #152]	@ (8001cd4 <TSK_HighFrequencyTask+0x17c>)
 8001c3c:	f005 fcd2 	bl	80075e4 <STO_PLL_CalcAvrgElSpeedDpp>
    if (false == IsAccelerationStageReached)
 8001c40:	b18c      	cbz	r4, 8001c66 <TSK_HighFrequencyTask+0x10e>
    if((START == Mci[M1].State) || (SWITCH_OVER == Mci[M1].State))
 8001c42:	f898 301f 	ldrb.w	r3, [r8, #31]
 8001c46:	2b04      	cmp	r3, #4
 8001c48:	d014      	beq.n	8001c74 <TSK_HighFrequencyTask+0x11c>
 8001c4a:	2b13      	cmp	r3, #19
 8001c4c:	d012      	beq.n	8001c74 <TSK_HighFrequencyTask+0x11c>
  GLOBAL_TIMESTAMP++;
 8001c4e:	4a22      	ldr	r2, [pc, #136]	@ (8001cd8 <TSK_HighFrequencyTask+0x180>)
  if (0U == MCPA_UART_A.Mark)
 8001c50:	4822      	ldr	r0, [pc, #136]	@ (8001cdc <TSK_HighFrequencyTask+0x184>)
  GLOBAL_TIMESTAMP++;
 8001c52:	6813      	ldr	r3, [r2, #0]
  if (0U == MCPA_UART_A.Mark)
 8001c54:	f890 1029 	ldrb.w	r1, [r0, #41]	@ 0x29
  GLOBAL_TIMESTAMP++;
 8001c58:	3301      	adds	r3, #1
 8001c5a:	6013      	str	r3, [r2, #0]
  if (0U == MCPA_UART_A.Mark)
 8001c5c:	b9d1      	cbnz	r1, 8001c94 <TSK_HighFrequencyTask+0x13c>
}
 8001c5e:	2000      	movs	r0, #0
 8001c60:	b009      	add	sp, #36	@ 0x24
 8001c62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      STO_ResetPLL(&STO_PLL_M1);
 8001c66:	481b      	ldr	r0, [pc, #108]	@ (8001cd4 <TSK_HighFrequencyTask+0x17c>)
 8001c68:	f005 fdde 	bl	8007828 <STO_ResetPLL>
    if((START == Mci[M1].State) || (SWITCH_OVER == Mci[M1].State))
 8001c6c:	f898 301f 	ldrb.w	r3, [r8, #31]
 8001c70:	2b04      	cmp	r3, #4
 8001c72:	d1ea      	bne.n	8001c4a <TSK_HighFrequencyTask+0xf2>
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 8001c74:	4817      	ldr	r0, [pc, #92]	@ (8001cd4 <TSK_HighFrequencyTask+0x17c>)
 8001c76:	f005 fa13 	bl	80070a0 <SPD_GetElAngle>
      (void)VSS_CalcElAngle(&VirtualSpeedSensorM1, &hObsAngle);
 8001c7a:	a904      	add	r1, sp, #16
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 8001c7c:	4603      	mov	r3, r0
      (void)VSS_CalcElAngle(&VirtualSpeedSensorM1, &hObsAngle);
 8001c7e:	4818      	ldr	r0, [pc, #96]	@ (8001ce0 <TSK_HighFrequencyTask+0x188>)
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 8001c80:	f8ad 3010 	strh.w	r3, [sp, #16]
      (void)VSS_CalcElAngle(&VirtualSpeedSensorM1, &hObsAngle);
 8001c84:	f005 fe02 	bl	800788c <VSS_CalcElAngle>
 8001c88:	e7e1      	b.n	8001c4e <TSK_HighFrequencyTask+0xf6>
    MCI_FaultProcessing(&Mci[M1], MC_DURATION, 0);
 8001c8a:	4816      	ldr	r0, [pc, #88]	@ (8001ce4 <TSK_HighFrequencyTask+0x18c>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f7ff fa31 	bl	80010f4 <MCI_FaultProcessing>
 8001c92:	e7dc      	b.n	8001c4e <TSK_HighFrequencyTask+0xf6>
    MCPA_dataLog (&MCPA_UART_A);
 8001c94:	f004 f858 	bl	8005d48 <MCPA_dataLog>
}
 8001c98:	2000      	movs	r0, #0
 8001c9a:	b009      	add	sp, #36	@ 0x24
 8001c9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (!REMNG_RampCompleted(pREMNG[M1]))
 8001ca0:	4d11      	ldr	r5, [pc, #68]	@ (8001ce8 <TSK_HighFrequencyTask+0x190>)
 8001ca2:	6828      	ldr	r0, [r5, #0]
 8001ca4:	f005 f8b0 	bl	8006e08 <REMNG_RampCompleted>
 8001ca8:	2800      	cmp	r0, #0
 8001caa:	f47f af63 	bne.w	8001b74 <TSK_HighFrequencyTask+0x1c>
      FOCVars[M1].Iqdref.q = (int16_t)REMNG_Calc(pREMNG[M1]);
 8001cae:	6828      	ldr	r0, [r5, #0]
 8001cb0:	f005 f888 	bl	8006dc4 <REMNG_Calc>
 8001cb4:	8220      	strh	r0, [r4, #16]
 8001cb6:	e75d      	b.n	8001b74 <TSK_HighFrequencyTask+0x1c>
 8001cb8:	200005d0 	.word	0x200005d0
 8001cbc:	2000000c 	.word	0x2000000c
 8001cc0:	20000008 	.word	0x20000008
 8001cc4:	20000004 	.word	0x20000004
 8001cc8:	20000010 	.word	0x20000010
 8001ccc:	2000028c 	.word	0x2000028c
 8001cd0:	2000002c 	.word	0x2000002c
 8001cd4:	20000088 	.word	0x20000088
 8001cd8:	2000197c 	.word	0x2000197c
 8001cdc:	200003ec 	.word	0x200003ec
 8001ce0:	200001b0 	.word	0x200001b0
 8001ce4:	20000584 	.word	0x20000584
 8001ce8:	200005c8 	.word	0x200005c8
 8001cec:	200005cc 	.word	0x200005cc

08001cf0 <TSK_SafetyTask_PWMOFF>:
  * @brief  Safety task implementation if  MC.M1_ON_OVER_VOLTAGE == TURN_OFF_PWM.
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink.
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 8001cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */
  uint16_t CodeReturn = MC_NO_ERROR;
  const uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};
  /* Check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
  CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[bMotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 8001cf2:	4f1c      	ldr	r7, [pc, #112]	@ (8001d64 <TSK_SafetyTask_PWMOFF+0x74>)
{
 8001cf4:	4604      	mov	r4, r0
  CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[bMotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 8001cf6:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 8001cfa:	f000 fc0f 	bl	800251c <PWMC_IsFaultOccurred>
 8001cfe:	4605      	mov	r5, r0
                                                    (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  if (M1 == bMotor)
 8001d00:	b17c      	cbz	r4, 8001d22 <TSK_SafetyTask_PWMOFF+0x32>
  }
  else
  {
    /* Nothing to do */
  }
  MCI_FaultProcessing(&Mci[bMotor], CodeReturn, ~CodeReturn); /* Process faults */
 8001d02:	4e19      	ldr	r6, [pc, #100]	@ (8001d68 <TSK_SafetyTask_PWMOFF+0x78>)
 8001d04:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8001d08:	eb06 06c3 	add.w	r6, r6, r3, lsl #3
 8001d0c:	43ea      	mvns	r2, r5
 8001d0e:	4630      	mov	r0, r6
 8001d10:	b292      	uxth	r2, r2
 8001d12:	4629      	mov	r1, r5
 8001d14:	f7ff f9ee 	bl	80010f4 <MCI_FaultProcessing>

  if (MCI_GetFaultState(&Mci[bMotor]) != (uint32_t)MC_NO_FAULTS)
 8001d18:	4630      	mov	r0, r6
 8001d1a:	f7ff fa81 	bl	8001220 <MCI_GetFaultState>
 8001d1e:	b960      	cbnz	r0, 8001d3a <TSK_SafetyTask_PWMOFF+0x4a>
    /* No errors */
  }
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 8001d20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    uint16_t rawValueM1 =  RCM_ExecRegularConv(&VbusRegConv_M1);
 8001d22:	4812      	ldr	r0, [pc, #72]	@ (8001d6c <TSK_SafetyTask_PWMOFF+0x7c>)
 8001d24:	f001 fd32 	bl	800378c <RCM_ExecRegularConv>
 8001d28:	4601      	mov	r1, r0
    CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(&BusVoltageSensor_M1, rawValueM1);
 8001d2a:	4811      	ldr	r0, [pc, #68]	@ (8001d70 <TSK_SafetyTask_PWMOFF+0x80>)
 8001d2c:	f005 f814 	bl	8006d58 <RVBS_CalcAvVbus>
 8001d30:	f020 0008 	bic.w	r0, r0, #8
 8001d34:	4328      	orrs	r0, r5
 8001d36:	b285      	uxth	r5, r0
 8001d38:	e7e3      	b.n	8001d02 <TSK_SafetyTask_PWMOFF+0x12>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001d3a:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
 8001d3e:	f000 fbc1 	bl	80024c4 <PWMC_SwitchOffPWM>
    if (MCPA_UART_A.Mark != 0U)
 8001d42:	480c      	ldr	r0, [pc, #48]	@ (8001d74 <TSK_SafetyTask_PWMOFF+0x84>)
 8001d44:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
 8001d48:	b94b      	cbnz	r3, 8001d5e <TSK_SafetyTask_PWMOFF+0x6e>
    FOC_Clear(bMotor);
 8001d4a:	4620      	mov	r0, r4
 8001d4c:	f7ff fc1e 	bl	800158c <FOC_Clear>
    PQD_Clear(pMPM[bMotor]); //cstat !MISRAC2012-Rule-11.3
 8001d50:	4b09      	ldr	r3, [pc, #36]	@ (8001d78 <TSK_SafetyTask_PWMOFF+0x88>)
 8001d52:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
 8001d56:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    PQD_Clear(pMPM[bMotor]); //cstat !MISRAC2012-Rule-11.3
 8001d5a:	f004 ba23 	b.w	80061a4 <PQD_Clear>
      MCPA_flushDataLog (&MCPA_UART_A);
 8001d5e:	f004 f8b3 	bl	8005ec8 <MCPA_flushDataLog>
 8001d62:	e7f2      	b.n	8001d4a <TSK_SafetyTask_PWMOFF+0x5a>
 8001d64:	200005cc 	.word	0x200005cc
 8001d68:	20000584 	.word	0x20000584
 8001d6c:	20000048 	.word	0x20000048
 8001d70:	2000002c 	.word	0x2000002c
 8001d74:	200003ec 	.word	0x200003ec
 8001d78:	20000000 	.word	0x20000000

08001d7c <TSK_SafetyTask>:
{
 8001d7c:	b508      	push	{r3, lr}
  if (1U == bMCBootCompleted)
 8001d7e:	4b06      	ldr	r3, [pc, #24]	@ (8001d98 <TSK_SafetyTask+0x1c>)
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d000      	beq.n	8001d88 <TSK_SafetyTask+0xc>
}
 8001d86:	bd08      	pop	{r3, pc}
    TSK_SafetyTask_PWMOFF(M1);
 8001d88:	2000      	movs	r0, #0
 8001d8a:	f7ff ffb1 	bl	8001cf0 <TSK_SafetyTask_PWMOFF>
}
 8001d8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCM_ExecUserConv();
 8001d92:	f001 bd33 	b.w	80037fc <RCM_ExecUserConv>
 8001d96:	bf00      	nop
 8001d98:	200005c0 	.word	0x200005c0

08001d9c <MC_RunMotorControlTasks>:
{
 8001d9c:	b508      	push	{r3, lr}
  if (0U == bMCBootCompleted)
 8001d9e:	4b04      	ldr	r3, [pc, #16]	@ (8001db0 <MC_RunMotorControlTasks+0x14>)
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	b903      	cbnz	r3, 8001da6 <MC_RunMotorControlTasks+0xa>
}
 8001da4:	bd08      	pop	{r3, pc}
    MC_Scheduler();
 8001da6:	f7ff fe91 	bl	8001acc <MC_Scheduler>
    TSK_SafetyTask();
 8001daa:	f7ff ffe7 	bl	8001d7c <TSK_SafetyTask>
}
 8001dae:	bd08      	pop	{r3, pc}
 8001db0:	200005c0 	.word	0x200005c0

08001db4 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 8001db4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */
  R3_1_SwitchOffPWM(pwmcHandle[M1]);
 8001db6:	4b05      	ldr	r3, [pc, #20]	@ (8001dcc <TSK_HardwareFaultTask+0x18>)
 8001db8:	6818      	ldr	r0, [r3, #0]
 8001dba:	f004 fba5 	bl	8006508 <R3_1_SwitchOffPWM>
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);

  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 8001dbe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);
 8001dc2:	4803      	ldr	r0, [pc, #12]	@ (8001dd0 <TSK_HardwareFaultTask+0x1c>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	2180      	movs	r1, #128	@ 0x80
 8001dc8:	f7ff b994 	b.w	80010f4 <MCI_FaultProcessing>
 8001dcc:	200005cc 	.word	0x200005cc
 8001dd0:	20000584 	.word	0x20000584

08001dd4 <mc_lock_pins>:

 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration.
  */
__weak void mc_lock_pins (void)
{
 8001dd4:	b430      	push	{r4, r5}
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001dd6:	4b31      	ldr	r3, [pc, #196]	@ (8001e9c <mc_lock_pins+0xc8>)
 8001dd8:	4a31      	ldr	r2, [pc, #196]	@ (8001ea0 <mc_lock_pins+0xcc>)
 8001dda:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001ddc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001de0:	61d9      	str	r1, [r3, #28]
 8001de2:	b08a      	sub	sp, #40	@ 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001de4:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001de6:	69da      	ldr	r2, [r3, #28]
 8001de8:	9209      	str	r2, [sp, #36]	@ 0x24
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001dea:	f44f 7100 	mov.w	r1, #512	@ 0x200
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001dee:	f44f 3281 	mov.w	r2, #66048	@ 0x10200
  (void) temp;
 8001df2:	9809      	ldr	r0, [sp, #36]	@ 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001df4:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001df6:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001df8:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001dfa:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
  temp = READ_REG(GPIOx->LCKR);
 8001dfe:	69d9      	ldr	r1, [r3, #28]
 8001e00:	9108      	str	r1, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e02:	f502 3281 	add.w	r2, r2, #66048	@ 0x10200
 8001e06:	f44f 31a0 	mov.w	r1, #81920	@ 0x14000
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e0a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
  (void) temp;
 8001e0e:	9c08      	ldr	r4, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e10:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e12:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e14:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001e16:	69d1      	ldr	r1, [r2, #28]
 8001e18:	9107      	str	r1, [sp, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e1a:	f44f 6080 	mov.w	r0, #1024	@ 0x400
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e1e:	f44f 3182 	mov.w	r1, #66560	@ 0x10400
  (void) temp;
 8001e22:	9c07      	ldr	r4, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e24:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e26:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e28:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001e2a:	69d9      	ldr	r1, [r3, #28]
 8001e2c:	9106      	str	r1, [sp, #24]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e2e:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e32:	f44f 31c0 	mov.w	r1, #98304	@ 0x18000
  (void) temp;
 8001e36:	9c06      	ldr	r4, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e38:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e3a:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e3c:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001e3e:	69d1      	ldr	r1, [r2, #28]
 8001e40:	9105      	str	r1, [sp, #20]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e42:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e46:	f44f 3190 	mov.w	r1, #73728	@ 0x12000
  (void) temp;
 8001e4a:	9c05      	ldr	r4, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e4c:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e4e:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e50:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001e52:	69d2      	ldr	r2, [r2, #28]
 8001e54:	9204      	str	r2, [sp, #16]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e56:	2001      	movs	r0, #1
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e58:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
  (void) temp;
 8001e5c:	9904      	ldr	r1, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e5e:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e60:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e62:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001e64:	69d9      	ldr	r1, [r3, #28]
 8001e66:	9103      	str	r1, [sp, #12]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e68:	2402      	movs	r4, #2
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e6a:	490e      	ldr	r1, [pc, #56]	@ (8001ea4 <mc_lock_pins+0xd0>)
  (void) temp;
 8001e6c:	9d03      	ldr	r5, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e6e:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e70:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e72:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001e74:	69db      	ldr	r3, [r3, #28]
 8001e76:	9302      	str	r3, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e78:	4b0b      	ldr	r3, [pc, #44]	@ (8001ea8 <mc_lock_pins+0xd4>)
  (void) temp;
 8001e7a:	9d02      	ldr	r5, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e7c:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e7e:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e80:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001e82:	69d9      	ldr	r1, [r3, #28]
 8001e84:	9101      	str	r1, [sp, #4]
  (void) temp;
 8001e86:	9901      	ldr	r1, [sp, #4]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e88:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e8a:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e8c:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001e8e:	69db      	ldr	r3, [r3, #28]
 8001e90:	9300      	str	r3, [sp, #0]
  (void) temp;
 8001e92:	9b00      	ldr	r3, [sp, #0]
LL_GPIO_LockPin(M1_PWM_UL_GPIO_Port, M1_PWM_UL_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_U_GPIO_Port, M1_CURR_AMPL_U_Pin);
LL_GPIO_LockPin(M1_BUS_VOLTAGE_GPIO_Port, M1_BUS_VOLTAGE_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_V_GPIO_Port, M1_CURR_AMPL_V_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_W_GPIO_Port, M1_CURR_AMPL_W_Pin);
}
 8001e94:	b00a      	add	sp, #40	@ 0x28
 8001e96:	bc30      	pop	{r4, r5}
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	40020000 	.word	0x40020000
 8001ea0:	00010100 	.word	0x00010100
 8001ea4:	00010002 	.word	0x00010002
 8001ea8:	40020800 	.word	0x40020800

08001eac <RI_SetRegCommandParser>:
  * @param  txSyncFreeSpace Space available for synchronous transmission
  *
  * @retval Returns #MCP_CMD_OK if the command is acknowledged and #MCP_CMD_NOK if not.
  */
uint8_t RI_SetRegCommandParser (MCP_Handle_t * pHandle, uint16_t txSyncFreeSpace)
{
 8001eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  {
#endif
    uint16_t * dataElementID;
    uint8_t * rxData = pHandle->rxBuffer;
    uint8_t * txData = pHandle->txBuffer;
    int16_t rxLength = pHandle->rxLength;
 8001eb0:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
    uint8_t accessResult;

    uint16_t regID;
    uint8_t typeID;
    uint8_t motorID;
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 8001eb4:	4b31      	ldr	r3, [pc, #196]	@ (8001f7c <RI_SetRegCommandParser+0xd0>)
{
 8001eb6:	b089      	sub	sp, #36	@ 0x24
    uint16_t size = 0U;
 8001eb8:	f04f 0900 	mov.w	r9, #0
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 8001ebc:	9306      	str	r3, [sp, #24]
    uint8_t number_of_item =0;
    pHandle->txLength = 0;

    while (rxLength > 0)
 8001ebe:	454c      	cmp	r4, r9
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 8001ec0:	4b2f      	ldr	r3, [pc, #188]	@ (8001f80 <RI_SetRegCommandParser+0xd4>)
    uint16_t size = 0U;
 8001ec2:	f8ad 9016 	strh.w	r9, [sp, #22]
    uint8_t * txData = pHandle->txBuffer;
 8001ec6:	e9d0 c601 	ldrd	ip, r6, [r0, #4]
{
 8001eca:	4607      	mov	r7, r0
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 8001ecc:	9307      	str	r3, [sp, #28]
    pHandle->txLength = 0;
 8001ece:	f8a0 900e 	strh.w	r9, [r0, #14]
    while (rxLength > 0)
 8001ed2:	dd47      	ble.n	8001f64 <RI_SetRegCommandParser+0xb8>
 8001ed4:	eb06 0801 	add.w	r8, r6, r1
  uint8_t retVal = MCP_CMD_OK;
 8001ed8:	f8cd 900c 	str.w	r9, [sp, #12]
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
        /* Prepare next data*/
        rxLength = (int16_t) (rxLength - size);
        rxData = rxData+size;
        /* If there is only one CMD in the buffer, we do not store the result */
        if ((1U == number_of_item) && (0 == rxLength))
 8001edc:	f1c6 0a01 	rsb	sl, r6, #1
      rxData = rxData+MCP_ID_SIZE; // Shift buffer to the next data
 8001ee0:	f10c 0502 	add.w	r5, ip, #2
      regID = *dataElementID & REG_MASK;
 8001ee4:	f8bc c000 	ldrh.w	ip, [ip]
      typeID = (uint8_t)*dataElementID & TYPE_MASK;
 8001ee8:	fa5f f18c 	uxtb.w	r1, ip
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8001eec:	3c02      	subs	r4, #2
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 8001eee:	f001 0b07 	and.w	fp, r1, #7
 8001ef2:	f10d 0920 	add.w	r9, sp, #32
      if (motorID > NBR_OF_MOTORS)
 8001ef6:	f01c 0f06 	tst.w	ip, #6
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 8001efa:	fa0f fe84 	sxth.w	lr, r4
 8001efe:	f10d 0316 	add.w	r3, sp, #22
 8001f02:	462a      	mov	r2, r5
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8001f04:	b2a4      	uxth	r4, r4
      regID = *dataElementID & REG_MASK;
 8001f06:	f02c 0007 	bic.w	r0, ip, #7
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 8001f0a:	eb09 0b8b 	add.w	fp, r9, fp, lsl #2
 8001f0e:	f001 0138 	and.w	r1, r1, #56	@ 0x38
      if (motorID > NBR_OF_MOTORS)
 8001f12:	d11b      	bne.n	8001f4c <RI_SetRegCommandParser+0xa0>
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 8001f14:	f8cd e000 	str.w	lr, [sp]
 8001f18:	f85b bc08 	ldr.w	fp, [fp, #-8]
 8001f1c:	47d8      	blx	fp
        rxLength = (int16_t) (rxLength - size);
 8001f1e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
        if ((1U == number_of_item) && (0 == rxLength))
 8001f22:	eb06 030a 	add.w	r3, r6, sl
 8001f26:	b2db      	uxtb	r3, r3
        rxLength = (int16_t) (rxLength - size);
 8001f28:	1aa4      	subs	r4, r4, r2
        if ((1U == number_of_item) && (0 == rxLength))
 8001f2a:	2b01      	cmp	r3, #1
        rxLength = (int16_t) (rxLength - size);
 8001f2c:	b224      	sxth	r4, r4
        rxData = rxData+size;
 8001f2e:	eb05 0c02 	add.w	ip, r5, r2
        if ((1U == number_of_item) && (0 == rxLength))
 8001f32:	d013      	beq.n	8001f5c <RI_SetRegCommandParser+0xb0>
        {
          retVal = accessResult;
        }
        else
        {/* Store the result for each access to be able to report failing access */
          if (txSyncFreeSpace !=0 )
 8001f34:	4546      	cmp	r6, r8
 8001f36:	d00d      	beq.n	8001f54 <RI_SetRegCommandParser+0xa8>
          {
            *txData = accessResult;
 8001f38:	f806 0b01 	strb.w	r0, [r6], #1
            txData = txData+1;
            pHandle->txLength++;
 8001f3c:	89fb      	ldrh	r3, [r7, #14]
 8001f3e:	3301      	adds	r3, #1
 8001f40:	81fb      	strh	r3, [r7, #14]
            txSyncFreeSpace--; /* decrement one by one no wraparound possible */
            retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 8001f42:	b1a0      	cbz	r0, 8001f6e <RI_SetRegCommandParser+0xc2>
            if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FORMAT))
 8001f44:	2807      	cmp	r0, #7
 8001f46:	d001      	beq.n	8001f4c <RI_SetRegCommandParser+0xa0>
 8001f48:	280a      	cmp	r0, #10
 8001f4a:	d10e      	bne.n	8001f6a <RI_SetRegCommandParser+0xbe>
        retVal = MCP_CMD_NOK;
 8001f4c:	2001      	movs	r0, #1
    }
  #ifdef NULL_PTR_CHECK_REG_INT
  }
#endif
  return (retVal);
}
 8001f4e:	b009      	add	sp, #36	@ 0x24
 8001f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8001f54:	2008      	movs	r0, #8
}
 8001f56:	b009      	add	sp, #36	@ 0x24
 8001f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((1U == number_of_item) && (0 == rxLength))
 8001f5c:	2c00      	cmp	r4, #0
 8001f5e:	d1e9      	bne.n	8001f34 <RI_SetRegCommandParser+0x88>
    if (MCP_CMD_OK == retVal)
 8001f60:	2800      	cmp	r0, #0
 8001f62:	d1f4      	bne.n	8001f4e <RI_SetRegCommandParser+0xa2>
      pHandle->txLength = 0;
 8001f64:	2000      	movs	r0, #0
 8001f66:	81f8      	strh	r0, [r7, #14]
 8001f68:	e7f1      	b.n	8001f4e <RI_SetRegCommandParser+0xa2>
            retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	9303      	str	r3, [sp, #12]
    while (rxLength > 0)
 8001f6e:	2c00      	cmp	r4, #0
 8001f70:	dcb6      	bgt.n	8001ee0 <RI_SetRegCommandParser+0x34>
 8001f72:	9803      	ldr	r0, [sp, #12]
    if (MCP_CMD_OK == retVal)
 8001f74:	2800      	cmp	r0, #0
 8001f76:	d0f5      	beq.n	8001f64 <RI_SetRegCommandParser+0xb8>
 8001f78:	e7e9      	b.n	8001f4e <RI_SetRegCommandParser+0xa2>
 8001f7a:	bf00      	nop
 8001f7c:	08002555 	.word	0x08002555
 8001f80:	08002659 	.word	0x08002659

08001f84 <RI_GetRegCommandParser>:
  * @param  txSyncFreeSpace Space available for synchronous transmission
  *
  * @retval Returns #MCP_CMD_OK if the command is acknowledged and #MCP_CMD_NOK if not.
  */
uint8_t RI_GetRegCommandParser (MCP_Handle_t * pHandle, uint16_t txSyncFreeSpace)
{
 8001f84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f88:	b086      	sub	sp, #24
  {
#endif
    uint16_t * dataElementID;
    uint8_t * rxData = pHandle->rxBuffer;
    uint8_t * txData = pHandle->txBuffer;
    uint16_t size = 0U;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	f8ad 300e 	strh.w	r3, [sp, #14]

    uint16_t regID;
    uint8_t typeID;
    uint8_t motorID;
    uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_GetRegisterGlobal, &RI_GetRegisterMotor1};
    pHandle->txLength = 0;
 8001f90:	81c3      	strh	r3, [r0, #14]
    uint16_t rxLength = pHandle->rxLength;
 8001f92:	f8b0 800c 	ldrh.w	r8, [r0, #12]
    uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_GetRegisterGlobal, &RI_GetRegisterMotor1};
 8001f96:	4b1d      	ldr	r3, [pc, #116]	@ (800200c <RI_GetRegCommandParser+0x88>)
 8001f98:	9304      	str	r3, [sp, #16]
 8001f9a:	4b1d      	ldr	r3, [pc, #116]	@ (8002010 <RI_GetRegCommandParser+0x8c>)
    uint8_t * rxData = pHandle->rxBuffer;
 8001f9c:	f8d0 9004 	ldr.w	r9, [r0, #4]
    uint8_t * txData = pHandle->txBuffer;
 8001fa0:	6886      	ldr	r6, [r0, #8]
    uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_GetRegisterGlobal, &RI_GetRegisterMotor1};
 8001fa2:	9305      	str	r3, [sp, #20]
    while (rxLength > 0U)
 8001fa4:	f1b8 0f00 	cmp.w	r8, #0
 8001fa8:	d016      	beq.n	8001fd8 <RI_GetRegCommandParser+0x54>
 8001faa:	4607      	mov	r7, r0
 8001fac:	b20d      	sxth	r5, r1
    uint8_t * rxData = pHandle->rxBuffer;
 8001fae:	464c      	mov	r4, r9
    {
      dataElementID = (uint16_t *) rxData;
      rxLength = rxLength - MCP_ID_SIZE;
      rxData = rxData + MCP_ID_SIZE; // Shift buffer to the next MCP_ID

      regID = *dataElementID & REG_MASK;
 8001fb0:	f834 cb02 	ldrh.w	ip, [r4], #2
      typeID = (uint8_t)*dataElementID & TYPE_MASK;
 8001fb4:	fa5f f18c 	uxtb.w	r1, ip
        retVal = MCP_CMD_NOK;
        rxLength = 0;
      }
      else
      {
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 8001fb8:	f001 0e07 	and.w	lr, r1, #7
 8001fbc:	f10d 0a18 	add.w	sl, sp, #24
      if (motorID > NBR_OF_MOTORS)
 8001fc0:	f01c 0f06 	tst.w	ip, #6
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 8001fc4:	4632      	mov	r2, r6
      regID = *dataElementID & REG_MASK;
 8001fc6:	f02c 0007 	bic.w	r0, ip, #7
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 8001fca:	f10d 030e 	add.w	r3, sp, #14
 8001fce:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 8001fd2:	f001 0138 	and.w	r1, r1, #56	@ 0x38
      if (motorID > NBR_OF_MOTORS)
 8001fd6:	d003      	beq.n	8001fe0 <RI_GetRegCommandParser+0x5c>
        retVal = MCP_CMD_NOK;
 8001fd8:	2001      	movs	r0, #1
    }
#ifdef NULL_PTR_CHECK_REG_INT
  }
#endif
  return (retVal);
}
 8001fda:	b006      	add	sp, #24
 8001fdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 8001fe0:	9500      	str	r5, [sp, #0]
 8001fe2:	f85e ac08 	ldr.w	sl, [lr, #-8]
 8001fe6:	47d0      	blx	sl
        if (retVal == MCP_CMD_OK )
 8001fe8:	eba8 0304 	sub.w	r3, r8, r4
    while (rxLength > 0U)
 8001fec:	fa19 f383 	uxtah	r3, r9, r3
 8001ff0:	b29b      	uxth	r3, r3
        if (retVal == MCP_CMD_OK )
 8001ff2:	2800      	cmp	r0, #0
 8001ff4:	d1f1      	bne.n	8001fda <RI_GetRegCommandParser+0x56>
          txData = txData+size;
 8001ff6:	f8bd 100e 	ldrh.w	r1, [sp, #14]
          pHandle->txLength += size;
 8001ffa:	89fa      	ldrh	r2, [r7, #14]
          freeSpaceS16 = freeSpaceS16-size;
 8001ffc:	1a6d      	subs	r5, r5, r1
          pHandle->txLength += size;
 8001ffe:	440a      	add	r2, r1
          txData = txData+size;
 8002000:	440e      	add	r6, r1
          pHandle->txLength += size;
 8002002:	81fa      	strh	r2, [r7, #14]
          freeSpaceS16 = freeSpaceS16-size;
 8002004:	b22d      	sxth	r5, r5
    while (rxLength > 0U)
 8002006:	2b00      	cmp	r3, #0
 8002008:	d1d2      	bne.n	8001fb0 <RI_GetRegCommandParser+0x2c>
 800200a:	e7e6      	b.n	8001fda <RI_GetRegCommandParser+0x56>
 800200c:	08002be1 	.word	0x08002be1
 8002010:	08002d15 	.word	0x08002d15

08002014 <MCP_ReceivedPacket>:
  * @brief  Parses the header from the received packet and call the required function depending on the command sent by the controller device.
  *
  * @param  pHandle Handler of the current instance of the MCP component
  */
void MCP_ReceivedPacket(MCP_Handle_t *pHandle)
{
 8002014:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002016:	4604      	mov	r4, r0
  }
  else /* Length is 0, this is a request to send back the last packet */
  {
#endif
    packetHeader = (uint16_t *)pHandle->rxBuffer; //cstat !MISRAC2012-Rule-11.3
    command = (uint16_t)(*packetHeader & CMD_MASK);
 8002018:	6846      	ldr	r6, [r0, #4]
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;

    /* Commands requiering payload response must be aware of space available for the payload */
    /* Last byte is reserved for MCP response*/
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 800201a:	6822      	ldr	r2, [r4, #0]
    command = (uint16_t)(*packetHeader & CMD_MASK);
 800201c:	f836 3b02 	ldrh.w	r3, [r6], #2
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8002020:	8980      	ldrh	r0, [r0, #12]
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8002022:	8992      	ldrh	r2, [r2, #12]
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 8002024:	f403 457f 	and.w	r5, r3, #65280	@ 0xff00
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8002028:	3a01      	subs	r2, #1
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 800202a:	3802      	subs	r0, #2
    command = (uint16_t)(*packetHeader & CMD_MASK);
 800202c:	f023 0c07 	bic.w	ip, r3, #7
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 8002030:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8002034:	b291      	uxth	r1, r2
{
 8002036:	b083      	sub	sp, #12
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8002038:	b280      	uxth	r0, r0
    command = (uint16_t)(*packetHeader & CMD_MASK);
 800203a:	fa1f fc8c 	uxth.w	ip, ip
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 800203e:	b212      	sxth	r2, r2
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 8002040:	d045      	beq.n	80020ce <MCP_ReceivedPacket+0xba>
    motorID = (uint8_t)((*packetHeader - 1U) & MOTOR_MASK);
 8002042:	3b01      	subs	r3, #1
    MCI_Handle_t *pMCI = &Mci[motorID];
 8002044:	4f50      	ldr	r7, [pc, #320]	@ (8002188 <MCP_ReceivedPacket+0x174>)
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8002046:	81a0      	strh	r0, [r4, #12]
    MCI_Handle_t *pMCI = &Mci[motorID];
 8002048:	f003 0307 	and.w	r3, r3, #7
 800204c:	eb03 0383 	add.w	r3, r3, r3, lsl #2

    /* Initialization of the tx length, command which send back data has to increment the txLength
     * (case of Read register) */
    pHandle->txLength = 0U;
 8002050:	2500      	movs	r5, #0

    switch (command)
 8002052:	f1bc 0f38 	cmp.w	ip, #56	@ 0x38
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 8002056:	6066      	str	r6, [r4, #4]
    MCI_Handle_t *pMCI = &Mci[motorID];
 8002058:	eb07 07c3 	add.w	r7, r7, r3, lsl #3
    pHandle->txLength = 0U;
 800205c:	81e5      	strh	r5, [r4, #14]
    switch (command)
 800205e:	d82a      	bhi.n	80020b6 <MCP_ReceivedPacket+0xa2>
 8002060:	f1bc 0f38 	cmp.w	ip, #56	@ 0x38
 8002064:	d81e      	bhi.n	80020a4 <MCP_ReceivedPacket+0x90>
 8002066:	e8df f00c 	tbb	[pc, ip]
 800206a:	1d55      	.short	0x1d55
 800206c:	1d1d1d1d 	.word	0x1d1d1d1d
 8002070:	1d5d1d1d 	.word	0x1d5d1d1d
 8002074:	1d1d1d1d 	.word	0x1d1d1d1d
 8002078:	1d621d1d 	.word	0x1d621d1d
 800207c:	1d1d1d1d 	.word	0x1d1d1d1d
 8002080:	1d671d1d 	.word	0x1d671d1d
 8002084:	1d1d1d1d 	.word	0x1d1d1d1d
 8002088:	1d411d1d 	.word	0x1d411d1d
 800208c:	1d1d1d1d 	.word	0x1d1d1d1d
 8002090:	1d471d1d 	.word	0x1d471d1d
 8002094:	1d1d1d1d 	.word	0x1d1d1d1d
 8002098:	1d3d1d1d 	.word	0x1d3d1d1d
 800209c:	1d1d1d1d 	.word	0x1d1d1d1d
 80020a0:	1d1d      	.short	0x1d1d
 80020a2:	4f          	.byte	0x4f
 80020a3:	00          	.byte	0x00
 80020a4:	2300      	movs	r3, #0
 80020a6:	2002      	movs	r0, #2
      {
        MCPResponse = MCP_CMD_UNKNOWN;
        break;
      }
    }
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80020a8:	68a2      	ldr	r2, [r4, #8]
 80020aa:	54d0      	strb	r0, [r2, r3]
    pHandle->txLength++;
 80020ac:	89e3      	ldrh	r3, [r4, #14]
 80020ae:	3301      	adds	r3, #1
 80020b0:	81e3      	strh	r3, [r4, #14]
#ifdef NULL_PTR_CHECK_MCP
  }
#endif
}
 80020b2:	b003      	add	sp, #12
 80020b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch (command)
 80020b6:	f1bc 0f68 	cmp.w	ip, #104	@ 0x68
 80020ba:	d042      	beq.n	8002142 <MCP_ReceivedPacket+0x12e>
 80020bc:	f1bc 0f48 	cmp.w	ip, #72	@ 0x48
 80020c0:	d1f0      	bne.n	80020a4 <MCP_ReceivedPacket+0x90>
        MCI_Clear_Iqdref(pMCI);
 80020c2:	4638      	mov	r0, r7
 80020c4:	f7ff f94a 	bl	800135c <MCI_Clear_Iqdref>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80020c8:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 80020ca:	4628      	mov	r0, r5
        break;
 80020cc:	e7ec      	b.n	80020a8 <MCP_ReceivedPacket+0x94>
      userCommand = ((uint8_t)(command & 0xF8U) >> 3U);
 80020ce:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
    pHandle->txLength = 0U;
 80020d2:	2300      	movs	r3, #0
        if ((userCommand < MCP_USER_CALLBACK_MAX) && (MCP_UserCallBack[userCommand] != NULL))
 80020d4:	f1bc 0f01 	cmp.w	ip, #1
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 80020d8:	81a0      	strh	r0, [r4, #12]
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 80020da:	6066      	str	r6, [r4, #4]
    pHandle->txLength = 0U;
 80020dc:	81e3      	strh	r3, [r4, #14]
        if ((userCommand < MCP_USER_CALLBACK_MAX) && (MCP_UserCallBack[userCommand] != NULL))
 80020de:	d941      	bls.n	8002164 <MCP_ReceivedPacket+0x150>
          MCPResponse = MCP_ERROR_CALLBACK_NOT_REGISTRED;
 80020e0:	200d      	movs	r0, #13
 80020e2:	e7e1      	b.n	80020a8 <MCP_ReceivedPacket+0x94>
        if (IDLE == MCI_GetSTMState(pMCI))
 80020e4:	4638      	mov	r0, r7
 80020e6:	f7ff f84d 	bl	8001184 <MCI_GetSTMState>
 80020ea:	b398      	cbz	r0, 8002154 <MCP_ReceivedPacket+0x140>
          (void)MCI_StopMotor(pMCI);
 80020ec:	4638      	mov	r0, r7
 80020ee:	f7ff f869 	bl	80011c4 <MCI_StopMotor>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80020f2:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 80020f4:	2000      	movs	r0, #0
 80020f6:	e7d7      	b.n	80020a8 <MCP_ReceivedPacket+0x94>
        if (RUN == MCI_GetSTMState(pMCI))
 80020f8:	4638      	mov	r0, r7
 80020fa:	f7ff f843 	bl	8001184 <MCI_GetSTMState>
 80020fe:	2806      	cmp	r0, #6
 8002100:	d03c      	beq.n	800217c <MCP_ReceivedPacket+0x168>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8002102:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8002104:	2000      	movs	r0, #0
 8002106:	e7cf      	b.n	80020a8 <MCP_ReceivedPacket+0x94>
        (void)MCI_FaultAcknowledged(pMCI);
 8002108:	4638      	mov	r0, r7
 800210a:	f7ff f877 	bl	80011fc <MCI_FaultAcknowledged>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 800210e:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8002110:	2000      	movs	r0, #0
        break;
 8002112:	e7c9      	b.n	80020a8 <MCP_ReceivedPacket+0x94>
        *pHandle->txBuffer = MCP_VERSION;
 8002114:	68a3      	ldr	r3, [r4, #8]
        pHandle->txLength = 4U;
 8002116:	2104      	movs	r1, #4
        *pHandle->txBuffer = MCP_VERSION;
 8002118:	2201      	movs	r2, #1
        pHandle->txLength = 4U;
 800211a:	81e1      	strh	r1, [r4, #14]
        *pHandle->txBuffer = MCP_VERSION;
 800211c:	701a      	strb	r2, [r3, #0]
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 800211e:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8002120:	2000      	movs	r0, #0
        break;
 8002122:	e7c1      	b.n	80020a8 <MCP_ReceivedPacket+0x94>
        MCPResponse = RI_SetRegCommandParser(pHandle, (uint16_t)txSyncFreeSpace);
 8002124:	4620      	mov	r0, r4
 8002126:	f7ff fec1 	bl	8001eac <RI_SetRegCommandParser>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 800212a:	89e3      	ldrh	r3, [r4, #14]
        break;
 800212c:	e7bc      	b.n	80020a8 <MCP_ReceivedPacket+0x94>
        MCPResponse = RI_GetRegCommandParser(pHandle, (uint16_t)txSyncFreeSpace);
 800212e:	4620      	mov	r0, r4
 8002130:	f7ff ff28 	bl	8001f84 <RI_GetRegCommandParser>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8002134:	89e3      	ldrh	r3, [r4, #14]
        break;
 8002136:	e7b7      	b.n	80020a8 <MCP_ReceivedPacket+0x94>
        MCPResponse = (MCI_StartWithPolarizationMotor(pMCI) == false) ? MCP_CMD_OK : MCP_CMD_NOK;
 8002138:	4638      	mov	r0, r7
 800213a:	f7ff f829 	bl	8001190 <MCI_StartWithPolarizationMotor>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 800213e:	89e3      	ldrh	r3, [r4, #14]
 8002140:	e7b2      	b.n	80020a8 <MCP_ReceivedPacket+0x94>
        MCPResponse = MC_ProfilerCommand(pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace, &pHandle->txLength,
 8002142:	68a3      	ldr	r3, [r4, #8]
 8002144:	9300      	str	r3, [sp, #0]
 8002146:	4631      	mov	r1, r6
 8002148:	f104 030e 	add.w	r3, r4, #14
 800214c:	f7fe ff9e 	bl	800108c <MC_ProfilerCommand>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8002150:	89e3      	ldrh	r3, [r4, #14]
        break;
 8002152:	e7a9      	b.n	80020a8 <MCP_ReceivedPacket+0x94>
          MCPResponse = (MCI_StartWithPolarizationMotor(pMCI) == true) ? MCP_CMD_OK : MCP_CMD_NOK;
 8002154:	4638      	mov	r0, r7
 8002156:	f7ff f81b 	bl	8001190 <MCI_StartWithPolarizationMotor>
 800215a:	f080 0001 	eor.w	r0, r0, #1
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 800215e:	89e3      	ldrh	r3, [r4, #14]
          MCPResponse = (MCI_StartWithPolarizationMotor(pMCI) == true) ? MCP_CMD_OK : MCP_CMD_NOK;
 8002160:	b2c0      	uxtb	r0, r0
 8002162:	e7a1      	b.n	80020a8 <MCP_ReceivedPacket+0x94>
        if ((userCommand < MCP_USER_CALLBACK_MAX) && (MCP_UserCallBack[userCommand] != NULL))
 8002164:	4b09      	ldr	r3, [pc, #36]	@ (800218c <MCP_ReceivedPacket+0x178>)
 8002166:	f853 502c 	ldr.w	r5, [r3, ip, lsl #2]
 800216a:	b15d      	cbz	r5, 8002184 <MCP_ReceivedPacket+0x170>
          MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace,
 800216c:	68a3      	ldr	r3, [r4, #8]
 800216e:	9300      	str	r3, [sp, #0]
 8002170:	4631      	mov	r1, r6
 8002172:	f104 030e 	add.w	r3, r4, #14
 8002176:	47a8      	blx	r5
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8002178:	89e3      	ldrh	r3, [r4, #14]
          MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace,
 800217a:	e795      	b.n	80020a8 <MCP_ReceivedPacket+0x94>
          MCI_StopRamp(pMCI);
 800217c:	4638      	mov	r0, r7
 800217e:	f7ff f885 	bl	800128c <MCI_StopRamp>
 8002182:	e7be      	b.n	8002102 <MCP_ReceivedPacket+0xee>
 8002184:	462b      	mov	r3, r5
 8002186:	e7ab      	b.n	80020e0 <MCP_ReceivedPacket+0xcc>
 8002188:	20000584 	.word	0x20000584
 800218c:	200005f8 	.word	0x200005f8

08002190 <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 8002190:	b508      	push	{r3, lr}
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  (void)HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / SYS_TICK_FREQUENCY);
 8002192:	f002 fd2d 	bl	8004bf0 <HAL_RCC_GetHCLKFreq>
 8002196:	4b0a      	ldr	r3, [pc, #40]	@ (80021c0 <MX_MotorControl_Init+0x30>)
 8002198:	fba3 3000 	umull	r3, r0, r3, r0
 800219c:	09c0      	lsrs	r0, r0, #7
 800219e:	f002 fa79 	bl	8004694 <HAL_SYSTICK_Config>
  HAL_NVIC_SetPriority(SysTick_IRQn, uwTickPrio, 0U);
 80021a2:	4b08      	ldr	r3, [pc, #32]	@ (80021c4 <MX_MotorControl_Init+0x34>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	6819      	ldr	r1, [r3, #0]
 80021a8:	f04f 30ff 	mov.w	r0, #4294967295
 80021ac:	f002 fa28 	bl	8004600 <HAL_NVIC_SetPriority>

  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI);
 80021b0:	4805      	ldr	r0, [pc, #20]	@ (80021c8 <MX_MotorControl_Init+0x38>)
 80021b2:	f7ff fa25 	bl	8001600 <MCboot>
  mc_lock_pins();
}
 80021b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  mc_lock_pins();
 80021ba:	f7ff be0b 	b.w	8001dd4 <mc_lock_pins>
 80021be:	bf00      	nop
 80021c0:	10624dd3 	.word	0x10624dd3
 80021c4:	200004bc 	.word	0x200004bc
 80021c8:	20001784 	.word	0x20001784

080021cc <PWMC_GetPhaseCurrents>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctGetPhaseCurrents(pHandle, Iab);
 80021cc:	6803      	ldr	r3, [r0, #0]
 80021ce:	4718      	bx	r3

080021d0 <PWMC_SetPhaseVoltage>:
  * @param  Valfa_beta: Voltage Components expressed in the @f$(\alpha, \beta)@f$ reference frame.
  * @retval #MC_NO_ERROR if no error occurred or #MC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage(PWMC_Handle_t *pHandle, alphabeta_t Valfa_beta)
{
 80021d0:	b530      	push	{r4, r5, lr}
    int32_t wTimePhA;
    int32_t wTimePhB;
    int32_t wTimePhC;

    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 80021d2:	f8b0 4072 	ldrh.w	r4, [r0, #114]	@ 0x72
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 80021d6:	f8b0 204e 	ldrh.w	r2, [r0, #78]	@ 0x4e
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 80021da:	ea4f 4c21 	mov.w	ip, r1, asr #16
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 80021de:	b20b      	sxth	r3, r1
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 80021e0:	fb04 fc0c 	mul.w	ip, r4, ip
 80021e4:	ebcc 7ccc 	rsb	ip, ip, ip, lsl #31
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 80021e8:	fb02 f303 	mul.w	r3, r2, r3

    wX = wUBeta;
    wY = (wUBeta + wUAlpha) / 2;
 80021ec:	eb03 024c 	add.w	r2, r3, ip, lsl #1
    wZ = (wUBeta - wUAlpha) / 2;
 80021f0:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
    wY = (wUBeta + wUAlpha) / 2;
 80021f4:	eb02 71d2 	add.w	r1, r2, r2, lsr #31
    wZ = (wUBeta - wUAlpha) / 2;
 80021f8:	eb03 7ed3 	add.w	lr, r3, r3, lsr #31

    /* Sector calculation from wX, wY, wZ */
    if (wY < 0)
 80021fc:	1c55      	adds	r5, r2, #1
{
 80021fe:	b083      	sub	sp, #12
    {
      if (wZ < 0)
      {
        pHandle->Sector = SECTOR_5;
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8002200:	ea4f 0494 	mov.w	r4, r4, lsr #2
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8002204:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    wY = (wUBeta + wUAlpha) / 2;
 8002208:	ea4f 0161 	mov.w	r1, r1, asr #1
    wZ = (wUBeta - wUAlpha) / 2;
 800220c:	ea4f 0e6e 	mov.w	lr, lr, asr #1
    if (wY < 0)
 8002210:	f2c0 8094 	blt.w	800233c <PWMC_SetPhaseVoltage+0x16c>
        }
        }
    }
    else /* wY > 0 */
    {
      if (wZ >= 0)
 8002214:	1c5d      	adds	r5, r3, #1
 8002216:	db64      	blt.n	80022e2 <PWMC_SetPhaseVoltage+0x112>
      {
        pHandle->Sector = SECTOR_2;
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8002218:	ebb1 010e 	subs.w	r1, r1, lr
 800221c:	bf44      	itt	mi
 800221e:	f501 317f 	addmi.w	r1, r1, #261120	@ 0x3fc00
 8002222:	f201 31ff 	addwmi	r1, r1, #1023	@ 0x3ff
        wTimePhB = wTimePhA + (wZ / 131072);
 8002226:	2b00      	cmp	r3, #0
 8002228:	bfbc      	itt	lt
 800222a:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
 800222e:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
        wTimePhC = wTimePhA - (wY / 131072);
 8002232:	2a00      	cmp	r2, #0
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8002234:	eb04 41a1 	add.w	r1, r4, r1, asr #18
        wTimePhC = wTimePhA - (wY / 131072);
 8002238:	bfb8      	it	lt
 800223a:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00

        if(true == pHandle->SingleShuntTopology)
 800223e:	f890 4087 	ldrb.w	r4, [r0, #135]	@ 0x87
        pHandle->Sector = SECTOR_2;
 8002242:	f04f 0501 	mov.w	r5, #1
        wTimePhC = wTimePhA - (wY / 131072);
 8002246:	bfb8      	it	lt
 8002248:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
        pHandle->Sector = SECTOR_2;
 800224c:	f880 507c 	strb.w	r5, [r0, #124]	@ 0x7c
        wTimePhB = wTimePhA + (wZ / 131072);
 8002250:	eb01 43a3 	add.w	r3, r1, r3, asr #18
        wTimePhC = wTimePhA - (wY / 131072);
 8002254:	eba1 42a2 	sub.w	r2, r1, r2, asr #18
        if(true == pHandle->SingleShuntTopology)
 8002258:	2c00      	cmp	r4, #0
 800225a:	f040 8097 	bne.w	800238c <PWMC_SetPhaseVoltage+0x1bc>
          pHandle->midDuty = 0U;
          pHandle->highDuty = 1U;
        }
        else
        {
        pHandle->lowDuty = (uint16_t)wTimePhB;
 800225e:	fa1f fe83 	uxth.w	lr, r3
        pHandle->midDuty = (uint16_t)wTimePhA;
 8002262:	fa1f fc81 	uxth.w	ip, r1
        pHandle->highDuty = (uint16_t)wTimePhC;
 8002266:	b294      	uxth	r4, r2
            pHandle->highDuty = 2U;
 8002268:	f8a0 405c 	strh.w	r4, [r0, #92]	@ 0x5c

    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));

    if (1U == pHandle->DTTest)
 800226c:	f8b0 4070 	ldrh.w	r4, [r0, #112]	@ 0x70
            pHandle->lowDuty = 0U;
 8002270:	f8a0 e058 	strh.w	lr, [r0, #88]	@ 0x58
    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
 8002274:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 8002278:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));
 800227c:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8002280:	b289      	uxth	r1, r1
 8002282:	b29b      	uxth	r3, r3
 8002284:	b292      	uxth	r2, r2
    if (1U == pHandle->DTTest)
 8002286:	2c01      	cmp	r4, #1
            pHandle->midDuty = 1U;
 8002288:	f8a0 c05a 	strh.w	ip, [r0, #90]	@ 0x5a
    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
 800228c:	f8a0 1050 	strh.w	r1, [r0, #80]	@ 0x50
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 8002290:	f8a0 3052 	strh.w	r3, [r0, #82]	@ 0x52
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));
 8002294:	f8a0 2054 	strh.w	r2, [r0, #84]	@ 0x54
    if (1U == pHandle->DTTest)
 8002298:	d11e      	bne.n	80022d8 <PWMC_SetPhaseVoltage+0x108>
    {
      /* Dead time compensation */
      if (pHandle->Ia > 0)
 800229a:	f9b0 5062 	ldrsh.w	r5, [r0, #98]	@ 0x62
      {
        pHandle->CntPhA += pHandle->DTCompCnt;
 800229e:	f8b0 4074 	ldrh.w	r4, [r0, #116]	@ 0x74
      if (pHandle->Ia > 0)
 80022a2:	2d00      	cmp	r5, #0
        pHandle->CntPhA += pHandle->DTCompCnt;
 80022a4:	bfcc      	ite	gt
 80022a6:	1909      	addgt	r1, r1, r4
      }
      else
      {
        pHandle->CntPhA -= pHandle->DTCompCnt;
 80022a8:	1b09      	suble	r1, r1, r4
 80022aa:	b289      	uxth	r1, r1
 80022ac:	f8a0 1050 	strh.w	r1, [r0, #80]	@ 0x50
      }

      if (pHandle->Ib > 0)
 80022b0:	f9b0 1064 	ldrsh.w	r1, [r0, #100]	@ 0x64
 80022b4:	2900      	cmp	r1, #0
      else
      {
        pHandle->CntPhB -= pHandle->DTCompCnt;
      }

      if (pHandle->Ic > 0)
 80022b6:	f9b0 1066 	ldrsh.w	r1, [r0, #102]	@ 0x66
        pHandle->CntPhB += pHandle->DTCompCnt;
 80022ba:	bfcc      	ite	gt
 80022bc:	191b      	addgt	r3, r3, r4
        pHandle->CntPhB -= pHandle->DTCompCnt;
 80022be:	1b1b      	suble	r3, r3, r4
      if (pHandle->Ic > 0)
 80022c0:	2900      	cmp	r1, #0
        pHandle->CntPhB -= pHandle->DTCompCnt;
 80022c2:	b29b      	uxth	r3, r3
      {
        pHandle->CntPhC += pHandle->DTCompCnt;
 80022c4:	bfcc      	ite	gt
 80022c6:	18a4      	addgt	r4, r4, r2
      }
      else
      {
        pHandle->CntPhC -= pHandle->DTCompCnt;
 80022c8:	1b12      	suble	r2, r2, r4
 80022ca:	f8a0 3052 	strh.w	r3, [r0, #82]	@ 0x52
        pHandle->CntPhC += pHandle->DTCompCnt;
 80022ce:	bfcc      	ite	gt
 80022d0:	f8a0 4054 	strhgt.w	r4, [r0, #84]	@ 0x54
        pHandle->CntPhC -= pHandle->DTCompCnt;
 80022d4:	f8a0 2054 	strhle.w	r2, [r0, #84]	@ 0x54
      }
    }
    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 80022d8:	6943      	ldr	r3, [r0, #20]
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (returnValue);
}
 80022da:	b003      	add	sp, #12
 80022dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 80022e0:	4718      	bx	r3
        if ( wX <= 0 )
 80022e2:	f1bc 0f00 	cmp.w	ip, #0
 80022e6:	dd7f      	ble.n	80023e8 <PWMC_SetPhaseVoltage+0x218>
          wTimePhB = wTimePhA + (wZ / 131072);
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	bfb8      	it	lt
 80022ec:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 80022f0:	ebac 0e0e 	sub.w	lr, ip, lr
          wTimePhB = wTimePhA + (wZ / 131072);
 80022f4:	bfb8      	it	lt
 80022f6:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
          wTimePhC = wTimePhB - (wX / 131072);
 80022fa:	f1bc 0f00 	cmp.w	ip, #0
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 80022fe:	eb04 41ae 	add.w	r1, r4, lr, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 8002302:	bfb8      	it	lt
 8002304:	f50c 3cff 	addlt.w	ip, ip, #130560	@ 0x1fe00
          if((pHandle->DPWM_Mode == true) || (pHandle->SingleShuntTopology == true))
 8002308:	f890 407f 	ldrb.w	r4, [r0, #127]	@ 0x7f
          pHandle->Sector = SECTOR_1;
 800230c:	f04f 0200 	mov.w	r2, #0
          wTimePhB = wTimePhA + (wZ / 131072);
 8002310:	eb01 43a3 	add.w	r3, r1, r3, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 8002314:	bfb8      	it	lt
 8002316:	f20c 1cff 	addwlt	ip, ip, #511	@ 0x1ff
          pHandle->Sector = SECTOR_1;
 800231a:	f880 207c 	strb.w	r2, [r0, #124]	@ 0x7c
          wTimePhC = wTimePhB - (wX / 131072);
 800231e:	eba3 426c 	sub.w	r2, r3, ip, asr #17
          if((pHandle->DPWM_Mode == true) || (pHandle->SingleShuntTopology == true))
 8002322:	2c00      	cmp	r4, #0
 8002324:	f040 80b5 	bne.w	8002492 <PWMC_SetPhaseVoltage+0x2c2>
 8002328:	f890 5087 	ldrb.w	r5, [r0, #135]	@ 0x87
 800232c:	2d00      	cmp	r5, #0
 800232e:	f000 80c2 	beq.w	80024b6 <PWMC_SetPhaseVoltage+0x2e6>
 8002332:	f04f 0e02 	mov.w	lr, #2
 8002336:	f04f 0c01 	mov.w	ip, #1
 800233a:	e795      	b.n	8002268 <PWMC_SetPhaseVoltage+0x98>
      if (wZ < 0)
 800233c:	f1b3 3fff 	cmp.w	r3, #4294967295
        if(true == pHandle->SingleShuntTopology)
 8002340:	f890 5087 	ldrb.w	r5, [r0, #135]	@ 0x87
      if (wZ < 0)
 8002344:	db74      	blt.n	8002430 <PWMC_SetPhaseVoltage+0x260>
        if (wX <= 0)
 8002346:	f1bc 0f00 	cmp.w	ip, #0
 800234a:	dd25      	ble.n	8002398 <PWMC_SetPhaseVoltage+0x1c8>
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 800234c:	ebb1 010c 	subs.w	r1, r1, ip
 8002350:	bf44      	itt	mi
 8002352:	f501 317f 	addmi.w	r1, r1, #261120	@ 0x3fc00
 8002356:	f201 31ff 	addwmi	r1, r1, #1023	@ 0x3ff
          wTimePhC = wTimePhA - (wY / 131072);
 800235a:	2a00      	cmp	r2, #0
 800235c:	bfb8      	it	lt
 800235e:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 8002362:	eb04 41a1 	add.w	r1, r4, r1, asr #18
          wTimePhC = wTimePhA - (wY / 131072);
 8002366:	bfb8      	it	lt
 8002368:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
          pHandle->Sector = SECTOR_3;
 800236c:	2302      	movs	r3, #2
          wTimePhC = wTimePhA - (wY / 131072);
 800236e:	eba1 42a2 	sub.w	r2, r1, r2, asr #18
          pHandle->Sector = SECTOR_3;
 8002372:	f880 307c 	strb.w	r3, [r0, #124]	@ 0x7c
          wTimePhB = wTimePhC + (wX / 131072);
 8002376:	eb02 436c 	add.w	r3, r2, ip, asr #17
          if(true == pHandle->SingleShuntTopology)
 800237a:	2d00      	cmp	r5, #0
 800237c:	f040 8083 	bne.w	8002486 <PWMC_SetPhaseVoltage+0x2b6>
          pHandle->lowDuty = (uint16_t)wTimePhB;
 8002380:	fa1f fe83 	uxth.w	lr, r3
          pHandle->midDuty = (uint16_t)wTimePhC;
 8002384:	fa1f fc82 	uxth.w	ip, r2
          pHandle->highDuty = (uint16_t)wTimePhA;
 8002388:	b28c      	uxth	r4, r1
 800238a:	e76d      	b.n	8002268 <PWMC_SetPhaseVoltage+0x98>
 800238c:	f04f 0e02 	mov.w	lr, #2
 8002390:	f04f 0c00 	mov.w	ip, #0
 8002394:	2401      	movs	r4, #1
 8002396:	e767      	b.n	8002268 <PWMC_SetPhaseVoltage+0x98>
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 8002398:	ebbc 0e0e 	subs.w	lr, ip, lr
 800239c:	bf44      	itt	mi
 800239e:	f50e 3e7f 	addmi.w	lr, lr, #261120	@ 0x3fc00
 80023a2:	f20e 3eff 	addwmi	lr, lr, #1023	@ 0x3ff
          wTimePhB = wTimePhA + (wZ / 131072);
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	bfb8      	it	lt
 80023aa:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
          pHandle->Sector = SECTOR_4;
 80023ae:	f04f 0203 	mov.w	r2, #3
          wTimePhB = wTimePhA + (wZ / 131072);
 80023b2:	bfb8      	it	lt
 80023b4:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
          pHandle->Sector = SECTOR_4;
 80023b8:	f880 207c 	strb.w	r2, [r0, #124]	@ 0x7c
          wTimePhC = wTimePhB - (wX / 131072);
 80023bc:	f1bc 0200 	subs.w	r2, ip, #0
 80023c0:	bfb8      	it	lt
 80023c2:	f502 32ff 	addlt.w	r2, r2, #130560	@ 0x1fe00
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 80023c6:	eb04 41ae 	add.w	r1, r4, lr, asr #18
          wTimePhB = wTimePhA + (wZ / 131072);
 80023ca:	eb01 43a3 	add.w	r3, r1, r3, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 80023ce:	bfb8      	it	lt
 80023d0:	f202 12ff 	addwlt	r2, r2, #511	@ 0x1ff
 80023d4:	eba3 4262 	sub.w	r2, r3, r2, asr #17
          if(true == pHandle->SingleShuntTopology)
 80023d8:	2d00      	cmp	r5, #0
 80023da:	d066      	beq.n	80024aa <PWMC_SetPhaseVoltage+0x2da>
 80023dc:	f04f 0e00 	mov.w	lr, #0
 80023e0:	f04f 0c01 	mov.w	ip, #1
 80023e4:	2402      	movs	r4, #2
 80023e6:	e73f      	b.n	8002268 <PWMC_SetPhaseVoltage+0x98>
          wTimePhC = wTimePhA - (wY / 131072);
 80023e8:	2a00      	cmp	r2, #0
 80023ea:	bfb8      	it	lt
 80023ec:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00
          pHandle->Sector = SECTOR_6;
 80023f0:	f04f 0305 	mov.w	r3, #5
          wTimePhC = wTimePhA - (wY / 131072);
 80023f4:	bfb8      	it	lt
 80023f6:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 80023fa:	eba1 010c 	sub.w	r1, r1, ip
          pHandle->Sector = SECTOR_6;
 80023fe:	f880 307c 	strb.w	r3, [r0, #124]	@ 0x7c
          wTimePhB = wTimePhC + (wX / 131072);
 8002402:	f1bc 0300 	subs.w	r3, ip, #0
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 8002406:	eb04 41a1 	add.w	r1, r4, r1, asr #18
          wTimePhB = wTimePhC + (wX / 131072);
 800240a:	bfb8      	it	lt
 800240c:	f503 33ff 	addlt.w	r3, r3, #130560	@ 0x1fe00
          if(true == pHandle->SingleShuntTopology)
 8002410:	f890 4087 	ldrb.w	r4, [r0, #135]	@ 0x87
          wTimePhC = wTimePhA - (wY / 131072);
 8002414:	eba1 42a2 	sub.w	r2, r1, r2, asr #18
          wTimePhB = wTimePhC + (wX / 131072);
 8002418:	bfb8      	it	lt
 800241a:	f203 13ff 	addwlt	r3, r3, #511	@ 0x1ff
 800241e:	eb02 4363 	add.w	r3, r2, r3, asr #17
          if(true == pHandle->SingleShuntTopology)
 8002422:	b3e4      	cbz	r4, 800249e <PWMC_SetPhaseVoltage+0x2ce>
 8002424:	f04f 0e01 	mov.w	lr, #1
 8002428:	f04f 0c02 	mov.w	ip, #2
 800242c:	2400      	movs	r4, #0
 800242e:	e71b      	b.n	8002268 <PWMC_SetPhaseVoltage+0x98>
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8002430:	ebb1 010e 	subs.w	r1, r1, lr
 8002434:	bf44      	itt	mi
 8002436:	f501 317f 	addmi.w	r1, r1, #261120	@ 0x3fc00
 800243a:	f201 31ff 	addwmi	r1, r1, #1023	@ 0x3ff
        wTimePhB = wTimePhA + (wZ / 131072);
 800243e:	2b00      	cmp	r3, #0
 8002440:	bfbc      	itt	lt
 8002442:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
 8002446:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
        wTimePhC = wTimePhA - (wY / 131072) ;
 800244a:	2a00      	cmp	r2, #0
 800244c:	bfb8      	it	lt
 800244e:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8002452:	eb04 41a1 	add.w	r1, r4, r1, asr #18
        pHandle->Sector = SECTOR_5;
 8002456:	f04f 0c04 	mov.w	ip, #4
        wTimePhC = wTimePhA - (wY / 131072) ;
 800245a:	bfb8      	it	lt
 800245c:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
        pHandle->Sector = SECTOR_5;
 8002460:	f880 c07c 	strb.w	ip, [r0, #124]	@ 0x7c
        wTimePhB = wTimePhA + (wZ / 131072);
 8002464:	eb01 43a3 	add.w	r3, r1, r3, asr #18
        wTimePhC = wTimePhA - (wY / 131072) ;
 8002468:	eba1 42a2 	sub.w	r2, r1, r2, asr #18
        if(true == pHandle->SingleShuntTopology)
 800246c:	b92d      	cbnz	r5, 800247a <PWMC_SetPhaseVoltage+0x2aa>
          pHandle->lowDuty = (uint16_t)wTimePhC;
 800246e:	fa1f fe82 	uxth.w	lr, r2
          pHandle->midDuty = (uint16_t)wTimePhA;
 8002472:	fa1f fc81 	uxth.w	ip, r1
          pHandle->highDuty = (uint16_t)wTimePhB;
 8002476:	b29c      	uxth	r4, r3
 8002478:	e6f6      	b.n	8002268 <PWMC_SetPhaseVoltage+0x98>
 800247a:	f04f 0e01 	mov.w	lr, #1
 800247e:	f04f 0c00 	mov.w	ip, #0
 8002482:	2402      	movs	r4, #2
 8002484:	e6f0      	b.n	8002268 <PWMC_SetPhaseVoltage+0x98>
 8002486:	f04f 0e00 	mov.w	lr, #0
 800248a:	f04f 0c02 	mov.w	ip, #2
 800248e:	2401      	movs	r4, #1
 8002490:	e6ea      	b.n	8002268 <PWMC_SetPhaseVoltage+0x98>
 8002492:	f04f 0e02 	mov.w	lr, #2
 8002496:	f04f 0c01 	mov.w	ip, #1
 800249a:	2400      	movs	r4, #0
 800249c:	e6e4      	b.n	8002268 <PWMC_SetPhaseVoltage+0x98>
            pHandle->lowDuty = (uint16_t)wTimePhA;
 800249e:	fa1f fe81 	uxth.w	lr, r1
            pHandle->midDuty = (uint16_t)wTimePhC;
 80024a2:	fa1f fc82 	uxth.w	ip, r2
            pHandle->highDuty = (uint16_t)wTimePhB;
 80024a6:	b29c      	uxth	r4, r3
 80024a8:	e6de      	b.n	8002268 <PWMC_SetPhaseVoltage+0x98>
          pHandle->lowDuty = (uint16_t)wTimePhC;
 80024aa:	fa1f fe82 	uxth.w	lr, r2
          pHandle->midDuty = (uint16_t)wTimePhB;
 80024ae:	fa1f fc83 	uxth.w	ip, r3
          pHandle->highDuty = (uint16_t)wTimePhA;
 80024b2:	b28c      	uxth	r4, r1
 80024b4:	e6d8      	b.n	8002268 <PWMC_SetPhaseVoltage+0x98>
            pHandle->lowDuty = (uint16_t)wTimePhA;
 80024b6:	fa1f fe81 	uxth.w	lr, r1
            pHandle->midDuty = (uint16_t)wTimePhB;
 80024ba:	fa1f fc83 	uxth.w	ip, r3
            pHandle->highDuty = (uint16_t)wTimePhC;
 80024be:	b294      	uxth	r4, r2
 80024c0:	e6d2      	b.n	8002268 <PWMC_SetPhaseVoltage+0x98>
 80024c2:	bf00      	nop

080024c4 <PWMC_SwitchOffPWM>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOffPwm(pHandle);
 80024c4:	6843      	ldr	r3, [r0, #4]
 80024c6:	4718      	bx	r3

080024c8 <PWMC_SwitchOnPWM>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOnPwm(pHandle);
 80024c8:	6883      	ldr	r3, [r0, #8]
 80024ca:	4718      	bx	r3

080024cc <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, **false** if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr(PWMC_Handle_t *pHandle, CRCAction_t action)
{
 80024cc:	b510      	push	{r4, lr}
 80024ce:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    if (CRC_START == action)
 80024d0:	b179      	cbz	r1, 80024f2 <PWMC_CurrentReadingCalibr+0x26>
    {
      PWMC_SwitchOffPWM(pHandle);
      pHandle->pFctCurrReadingCalib(pHandle);
      retVal = true;
    }
    else if (CRC_EXEC == action)
 80024d2:	2901      	cmp	r1, #1
 80024d4:	d001      	beq.n	80024da <PWMC_CurrentReadingCalibr+0xe>
  bool retVal = false;
 80024d6:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (retVal);
}
 80024d8:	bd10      	pop	{r4, pc}
      if (pHandle->OffCalibrWaitTimeCounter > 0u)
 80024da:	f8b0 3060 	ldrh.w	r3, [r0, #96]	@ 0x60
 80024de:	b16b      	cbz	r3, 80024fc <PWMC_CurrentReadingCalibr+0x30>
        pHandle->OffCalibrWaitTimeCounter--;
 80024e0:	3b01      	subs	r3, #1
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
        if (0U == pHandle->OffCalibrWaitTimeCounter)
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d1f4      	bne.n	80024d6 <PWMC_CurrentReadingCalibr+0xa>
          pHandle->pFctCurrReadingCalib(pHandle);
 80024ec:	68c3      	ldr	r3, [r0, #12]
 80024ee:	4798      	blx	r3
          retVal = true;
 80024f0:	e004      	b.n	80024fc <PWMC_CurrentReadingCalibr+0x30>
      PWMC_SwitchOffPWM(pHandle);
 80024f2:	f7ff ffe7 	bl	80024c4 <PWMC_SwitchOffPWM>
      pHandle->pFctCurrReadingCalib(pHandle);
 80024f6:	68e3      	ldr	r3, [r4, #12]
 80024f8:	4620      	mov	r0, r4
 80024fa:	4798      	blx	r3
      retVal = true;
 80024fc:	2001      	movs	r0, #1
}
 80024fe:	bd10      	pop	{r4, pc}

08002500 <PWMC_OVP_Handler>:
    tempPointer = MC_NULL;
  }
  else
  {
#endif
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8002500:	6c4a      	ldr	r2, [r1, #68]	@ 0x44
{
 8002502:	4603      	mov	r3, r0
    pHandle->OverVoltageFlag = true;
 8002504:	f04f 0c01 	mov.w	ip, #1
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8002508:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800250c:	644a      	str	r2, [r1, #68]	@ 0x44
    tempPointer = &(pHandle->Motor);
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (tempPointer);
}
 800250e:	307a      	adds	r0, #122	@ 0x7a
    pHandle->OverVoltageFlag = true;
 8002510:	f883 c083 	strb.w	ip, [r3, #131]	@ 0x83
    pHandle->BrakeActionLock = true;
 8002514:	f883 c085 	strb.w	ip, [r3, #133]	@ 0x85
}
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop

0800251c <PWMC_IsFaultOccurred>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  * @retval uint16_t Returns #MC_OVER_CURR if an overcurrent has been
  *                  detected since last method call, #MC_NO_FAULTS otherwise.
  */
__weak uint16_t PWMC_IsFaultOccurred(PWMC_Handle_t *pHandle)
{
 800251c:	4603      	mov	r3, r0
  uint16_t retVal = MC_NO_FAULTS;

  if (true == pHandle->OverVoltageFlag)
 800251e:	f890 0083 	ldrb.w	r0, [r0, #131]	@ 0x83
 8002522:	b1a8      	cbz	r0, 8002550 <PWMC_IsFaultOccurred+0x34>
  {
    retVal = MC_OVER_VOLT;
    pHandle->OverVoltageFlag = false;
 8002524:	2200      	movs	r2, #0
 8002526:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
 800252a:	2142      	movs	r1, #66	@ 0x42
    retVal = MC_OVER_VOLT;
 800252c:	2002      	movs	r0, #2
  else
  {
    /* Nothing to do */
  }

  if (true == pHandle->OverCurrentFlag)
 800252e:	f893 2082 	ldrb.w	r2, [r3, #130]	@ 0x82
 8002532:	b11a      	cbz	r2, 800253c <PWMC_IsFaultOccurred+0x20>
  {
    retVal |= MC_OVER_CURR;
    pHandle->OverCurrentFlag = false;
 8002534:	2200      	movs	r2, #0
 8002536:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
    retVal |= MC_OVER_CURR;
 800253a:	4608      	mov	r0, r1
  else
  {
    /* Nothing to do */
  }

  if (true == pHandle->driverProtectionFlag)
 800253c:	f893 2084 	ldrb.w	r2, [r3, #132]	@ 0x84
 8002540:	b12a      	cbz	r2, 800254e <PWMC_IsFaultOccurred+0x32>
  {
    retVal |= MC_DP_FAULT;
 8002542:	f440 6080 	orr.w	r0, r0, #1024	@ 0x400
    pHandle->driverProtectionFlag = false;
 8002546:	2200      	movs	r2, #0
    retVal |= MC_DP_FAULT;
 8002548:	b280      	uxth	r0, r0
    pHandle->driverProtectionFlag = false;
 800254a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
  {
    /* Nothing to do */
  }

  return (retVal);
}
 800254e:	4770      	bx	lr
 8002550:	2140      	movs	r1, #64	@ 0x40
 8002552:	e7ec      	b.n	800252e <PWMC_IsFaultOccurred+0x12>

08002554 <RI_SetRegisterGlobal>:
#include "mcp_config.h"
#include "mcpa.h"
#include "mc_configuration_registers.h"

uint8_t RI_SetRegisterGlobal(uint16_t regID, uint8_t typeID, uint8_t *data, uint16_t *size, int16_t dataAvailable)
{
 8002554:	b410      	push	{r4}
  uint8_t retVal = MCP_CMD_OK;
  switch(typeID)
 8002556:	3908      	subs	r1, #8
{
 8002558:	f9bd c004 	ldrsh.w	ip, [sp, #4]
  switch(typeID)
 800255c:	2920      	cmp	r1, #32
 800255e:	d812      	bhi.n	8002586 <RI_SetRegisterGlobal+0x32>
 8002560:	e8df f001 	tbb	[pc, r1]
 8002564:	11111117 	.word	0x11111117
 8002568:	11111111 	.word	0x11111111
 800256c:	11111121 	.word	0x11111121
 8002570:	11111111 	.word	0x11111111
 8002574:	11111133 	.word	0x11111133
 8002578:	11111111 	.word	0x11111111
 800257c:	1111113d 	.word	0x1111113d
 8002580:	11111111 	.word	0x11111111
 8002584:	51          	.byte	0x51
 8002585:	00          	.byte	0x00
    }

    default:
    {
      retVal = MCP_ERROR_BAD_DATA_TYPE;
      *size =0; /* From this point we are not able anymore to decode the RX buffer */
 8002586:	2200      	movs	r2, #0
 8002588:	801a      	strh	r2, [r3, #0]
      retVal = MCP_ERROR_BAD_DATA_TYPE;
 800258a:	2007      	movs	r0, #7
      break;
    }
  }
  return (retVal);
}
 800258c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002590:	4770      	bx	lr
          retVal = MCP_ERROR_RO_REG;
 8002592:	2848      	cmp	r0, #72	@ 0x48
      *size = 1;
 8002594:	f04f 0201 	mov.w	r2, #1
          retVal = MCP_ERROR_RO_REG;
 8002598:	bf14      	ite	ne
 800259a:	2005      	movne	r0, #5
 800259c:	2004      	moveq	r0, #4
}
 800259e:	f85d 4b04 	ldr.w	r4, [sp], #4
      *size = 1;
 80025a2:	801a      	strh	r2, [r3, #0]
}
 80025a4:	4770      	bx	lr
      switch (regID)
 80025a6:	f5b0 6f65 	cmp.w	r0, #3664	@ 0xe50
 80025aa:	d04e      	beq.n	800264a <RI_SetRegisterGlobal+0xf6>
 80025ac:	d93e      	bls.n	800262c <RI_SetRegisterGlobal+0xd8>
 80025ae:	f5b0 6f69 	cmp.w	r0, #3728	@ 0xe90
 80025b2:	d04a      	beq.n	800264a <RI_SetRegisterGlobal+0xf6>
 80025b4:	f641 3258 	movw	r2, #7000	@ 0x1b58
          retVal = MCP_ERROR_UNKNOWN_REG;
 80025b8:	4290      	cmp	r0, r2
 80025ba:	bf0c      	ite	eq
 80025bc:	2004      	moveq	r0, #4
 80025be:	2005      	movne	r0, #5
      *size = 2;
 80025c0:	2202      	movs	r2, #2
}
 80025c2:	f85d 4b04 	ldr.w	r4, [sp], #4
      *size = 2;
 80025c6:	801a      	strh	r2, [r3, #0]
}
 80025c8:	4770      	bx	lr
          retVal = MCP_ERROR_RO_REG;
 80025ca:	2818      	cmp	r0, #24
      *size = 4;
 80025cc:	f04f 0204 	mov.w	r2, #4
          retVal = MCP_ERROR_RO_REG;
 80025d0:	bf14      	ite	ne
 80025d2:	2005      	movne	r0, #5
 80025d4:	4610      	moveq	r0, r2
}
 80025d6:	f85d 4b04 	ldr.w	r4, [sp], #4
      *size = 4;
 80025da:	801a      	strh	r2, [r3, #0]
}
 80025dc:	4770      	bx	lr
uint8_t RI_MovString(const char_t *srcString, char_t *destString, uint16_t *size, int16_t maxSize)
{
  uint8_t retVal = MCP_CMD_OK;
  const char_t *tempsrcString = srcString;
  char_t *tempdestString = destString;
  *size= 1U ; /* /0 is the min String size */
 80025de:	2101      	movs	r1, #1
 80025e0:	8019      	strh	r1, [r3, #0]

  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80025e2:	f992 0000 	ldrsb.w	r0, [r2]
 80025e6:	b348      	cbz	r0, 800263c <RI_SetRegisterGlobal+0xe8>
 80025e8:	fa1f f08c 	uxth.w	r0, ip
 80025ec:	e003      	b.n	80025f6 <RI_SetRegisterGlobal+0xa2>
  {
    *tempdestString = *tempsrcString;
    tempdestString++;
    tempsrcString++;
    *size = *size + 1U;
 80025ee:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80025f0:	f912 4f01 	ldrsb.w	r4, [r2, #1]!
 80025f4:	b314      	cbz	r4, 800263c <RI_SetRegisterGlobal+0xe8>
    *size = *size + 1U;
 80025f6:	f101 0c01 	add.w	ip, r1, #1
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80025fa:	4281      	cmp	r1, r0
    *size = *size + 1U;
 80025fc:	fa1f f18c 	uxth.w	r1, ip
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002600:	d3f5      	bcc.n	80025ee <RI_SetRegisterGlobal+0x9a>
      retVal = MCP_ERROR_RO_REG;
 8002602:	2004      	movs	r0, #4
 8002604:	e7c2      	b.n	800258c <RI_SetRegisterGlobal+0x38>
      *size = rawSize + 2U;
 8002606:	8812      	ldrh	r2, [r2, #0]
 8002608:	3202      	adds	r2, #2
 800260a:	b292      	uxth	r2, r2
      if (*size > (uint16_t)dataAvailable)
 800260c:	fa1f fc8c 	uxth.w	ip, ip
 8002610:	4562      	cmp	r2, ip
      *size = rawSize + 2U;
 8002612:	801a      	strh	r2, [r3, #0]
      if (*size > (uint16_t)dataAvailable)
 8002614:	d81b      	bhi.n	800264e <RI_SetRegisterGlobal+0xfa>
        switch (regID)
 8002616:	28a8      	cmp	r0, #168	@ 0xa8
 8002618:	d0f3      	beq.n	8002602 <RI_SetRegisterGlobal+0xae>
 800261a:	d813      	bhi.n	8002644 <RI_SetRegisterGlobal+0xf0>
 800261c:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 8002620:	2828      	cmp	r0, #40	@ 0x28
 8002622:	d0ee      	beq.n	8002602 <RI_SetRegisterGlobal+0xae>
 8002624:	2005      	movs	r0, #5
}
 8002626:	f85d 4b04 	ldr.w	r4, [sp], #4
 800262a:	4770      	bx	lr
 800262c:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
          retVal = MCP_ERROR_UNKNOWN_REG;
 8002630:	f5b0 6fb2 	cmp.w	r0, #1424	@ 0x590
 8002634:	bf0c      	ite	eq
 8002636:	2004      	moveq	r0, #4
 8002638:	2005      	movne	r0, #5
 800263a:	e7c1      	b.n	80025c0 <RI_SetRegisterGlobal+0x6c>
  { /* Last string char must be 0 */
    retVal = MCP_ERROR_STRING_FORMAT;
  }
  else
  {
    *tempdestString = (int8_t)0;
 800263c:	2300      	movs	r3, #0
 800263e:	7013      	strb	r3, [r2, #0]
      retVal = MCP_ERROR_RO_REG;
 8002640:	2004      	movs	r0, #4
 8002642:	e7a3      	b.n	800258c <RI_SetRegisterGlobal+0x38>
 8002644:	28e8      	cmp	r0, #232	@ 0xe8
 8002646:	d1ed      	bne.n	8002624 <RI_SetRegisterGlobal+0xd0>
 8002648:	e7db      	b.n	8002602 <RI_SetRegisterGlobal+0xae>
  uint8_t retVal = MCP_CMD_OK;
 800264a:	2000      	movs	r0, #0
 800264c:	e7b8      	b.n	80025c0 <RI_SetRegisterGlobal+0x6c>
        *size = 0;
 800264e:	2200      	movs	r2, #0
 8002650:	801a      	strh	r2, [r3, #0]
        retVal = MCP_ERROR_BAD_RAW_FORMAT; /* This error stop the parsing of the CMD buffer */
 8002652:	200a      	movs	r0, #10
 8002654:	e79a      	b.n	800258c <RI_SetRegisterGlobal+0x38>
 8002656:	bf00      	nop

08002658 <RI_SetRegisterMotor1>:
{
 8002658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800265c:	b084      	sub	sp, #16
  switch(typeID)
 800265e:	3908      	subs	r1, #8
{
 8002660:	f9bd c028 	ldrsh.w	ip, [sp, #40]	@ 0x28
 8002664:	4615      	mov	r5, r2
 8002666:	461c      	mov	r4, r3
  switch(typeID)
 8002668:	2920      	cmp	r1, #32
 800266a:	d812      	bhi.n	8002692 <RI_SetRegisterMotor1+0x3a>
 800266c:	e8df f001 	tbb	[pc, r1]
 8002670:	11111117 	.word	0x11111117
 8002674:	11111111 	.word	0x11111111
 8002678:	11111125 	.word	0x11111125
 800267c:	11111111 	.word	0x11111111
 8002680:	11111186 	.word	0x11111186
 8002684:	11111111 	.word	0x11111111
 8002688:	1111114e 	.word	0x1111114e
 800268c:	11111111 	.word	0x11111111
 8002690:	65          	.byte	0x65
 8002691:	00          	.byte	0x00
      *size =0; /* From this point we are not able anymore to decode the RX buffer */
 8002692:	2300      	movs	r3, #0
 8002694:	8023      	strh	r3, [r4, #0]
      retVal = MCP_ERROR_BAD_DATA_TYPE;
 8002696:	2007      	movs	r0, #7
}
 8002698:	b004      	add	sp, #16
 800269a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      switch (regID)
 800269e:	2888      	cmp	r0, #136	@ 0x88
 80026a0:	f000 81d2 	beq.w	8002a48 <RI_SetRegisterMotor1+0x3f0>
 80026a4:	f020 0080 	bic.w	r0, r0, #128	@ 0x80
 80026a8:	2848      	cmp	r0, #72	@ 0x48
 80026aa:	bf0c      	ite	eq
 80026ac:	2004      	moveq	r0, #4
 80026ae:	2005      	movne	r0, #5
      *size = 1;
 80026b0:	2301      	movs	r3, #1
 80026b2:	8023      	strh	r3, [r4, #0]
}
 80026b4:	b004      	add	sp, #16
 80026b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      uint16_t regdata16 = *(uint16_t *)data; //cstat !MISRAC2012-Rule-11.3
 80026ba:	f5b0 6f15 	cmp.w	r0, #2384	@ 0x950
 80026be:	8815      	ldrh	r5, [r2, #0]
      switch (regID)
 80026c0:	f000 8232 	beq.w	8002b28 <RI_SetRegisterMotor1+0x4d0>
 80026c4:	f200 80b7 	bhi.w	8002836 <RI_SetRegisterMotor1+0x1de>
 80026c8:	f5b0 7f24 	cmp.w	r0, #656	@ 0x290
 80026cc:	f000 8253 	beq.w	8002b76 <RI_SetRegisterMotor1+0x51e>
 80026d0:	f240 8096 	bls.w	8002800 <RI_SetRegisterMotor1+0x1a8>
 80026d4:	f5b0 7f64 	cmp.w	r0, #912	@ 0x390
 80026d8:	f000 8240 	beq.w	8002b5c <RI_SetRegisterMotor1+0x504>
 80026dc:	d969      	bls.n	80027b2 <RI_SetRegisterMotor1+0x15a>
 80026de:	f5b0 6f92 	cmp.w	r0, #1168	@ 0x490
 80026e2:	f000 8217 	beq.w	8002b14 <RI_SetRegisterMotor1+0x4bc>
 80026e6:	d95a      	bls.n	800279e <RI_SetRegisterMotor1+0x146>
 80026e8:	f5b0 6f01 	cmp.w	r0, #2064	@ 0x810
 80026ec:	d055      	beq.n	800279a <RI_SetRegisterMotor1+0x142>
 80026ee:	d97d      	bls.n	80027ec <RI_SetRegisterMotor1+0x194>
 80026f0:	f5b0 6f0d 	cmp.w	r0, #2256	@ 0x8d0
 80026f4:	d051      	beq.n	800279a <RI_SetRegisterMotor1+0x142>
 80026f6:	d970      	bls.n	80027da <RI_SetRegisterMotor1+0x182>
          retVal = MCP_ERROR_UNKNOWN_REG;
 80026f8:	f5b0 6f11 	cmp.w	r0, #2320	@ 0x910
 80026fc:	bf0c      	ite	eq
 80026fe:	2004      	moveq	r0, #4
 8002700:	2005      	movne	r0, #5
      *size = 2;
 8002702:	2302      	movs	r3, #2
 8002704:	8023      	strh	r3, [r4, #0]
}
 8002706:	b004      	add	sp, #16
 8002708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  *size= 1U ; /* /0 is the min String size */
 800270c:	2001      	movs	r0, #1
 800270e:	8020      	strh	r0, [r4, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002710:	f992 3000 	ldrsb.w	r3, [r2]
 8002714:	2b00      	cmp	r3, #0
 8002716:	f000 8190 	beq.w	8002a3a <RI_SetRegisterMotor1+0x3e2>
 800271a:	fa1f f38c 	uxth.w	r3, ip
 800271e:	e005      	b.n	800272c <RI_SetRegisterMotor1+0xd4>
    *size = *size + 1U;
 8002720:	8020      	strh	r0, [r4, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002722:	f915 1f01 	ldrsb.w	r1, [r5, #1]!
 8002726:	2900      	cmp	r1, #0
 8002728:	f000 8187 	beq.w	8002a3a <RI_SetRegisterMotor1+0x3e2>
    *size = *size + 1U;
 800272c:	f100 0c01 	add.w	ip, r0, #1
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002730:	4283      	cmp	r3, r0
    *size = *size + 1U;
 8002732:	fa1f f08c 	uxth.w	r0, ip
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002736:	d8f3      	bhi.n	8002720 <RI_SetRegisterMotor1+0xc8>
 8002738:	e164      	b.n	8002a04 <RI_SetRegisterMotor1+0x3ac>
      uint16_t rawSize = *(uint16_t *)data; //cstat !MISRAC2012-Rule-11.3
 800273a:	8811      	ldrh	r1, [r2, #0]
      *size = rawSize + 2U;
 800273c:	1c8a      	adds	r2, r1, #2
 800273e:	b292      	uxth	r2, r2
      if (*size > (uint16_t)dataAvailable)
 8002740:	fa1f f38c 	uxth.w	r3, ip
 8002744:	429a      	cmp	r2, r3
      *size = rawSize + 2U;
 8002746:	8022      	strh	r2, [r4, #0]
      if (*size > (uint16_t)dataAvailable)
 8002748:	f200 817a 	bhi.w	8002a40 <RI_SetRegisterMotor1+0x3e8>
        switch (regID)
 800274c:	f5b0 7f0a 	cmp.w	r0, #552	@ 0x228
 8002750:	f000 81ae 	beq.w	8002ab0 <RI_SetRegisterMotor1+0x458>
 8002754:	f200 8164 	bhi.w	8002a20 <RI_SetRegisterMotor1+0x3c8>
 8002758:	f5b0 7fd4 	cmp.w	r0, #424	@ 0x1a8
 800275c:	f000 819b 	beq.w	8002a96 <RI_SetRegisterMotor1+0x43e>
 8002760:	f240 814b 	bls.w	80029fa <RI_SetRegisterMotor1+0x3a2>
 8002764:	f5b0 7ff4 	cmp.w	r0, #488	@ 0x1e8
 8002768:	f040 8143 	bne.w	80029f2 <RI_SetRegisterMotor1+0x39a>
            MCI_ExecTorqueRamp(pMCIN, (int16_t)torque, duration);
 800276c:	88ea      	ldrh	r2, [r5, #6]
 800276e:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8002772:	48a5      	ldr	r0, [pc, #660]	@ (8002a08 <RI_SetRegisterMotor1+0x3b0>)
 8002774:	f7fe fcaa 	bl	80010cc <MCI_ExecTorqueRamp>
  uint8_t retVal = MCP_CMD_OK;
 8002778:	2000      	movs	r0, #0
 800277a:	e78d      	b.n	8002698 <RI_SetRegisterMotor1+0x40>
      switch (regID)
 800277c:	2898      	cmp	r0, #152	@ 0x98
 800277e:	f000 816a 	beq.w	8002a56 <RI_SetRegisterMotor1+0x3fe>
 8002782:	d84f      	bhi.n	8002824 <RI_SetRegisterMotor1+0x1cc>
 8002784:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 8002788:	2818      	cmp	r0, #24
 800278a:	bf0c      	ite	eq
 800278c:	2004      	moveq	r0, #4
 800278e:	2005      	movne	r0, #5
      *size = 4;
 8002790:	2304      	movs	r3, #4
 8002792:	8023      	strh	r3, [r4, #0]
}
 8002794:	b004      	add	sp, #16
 8002796:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800279a:	2004      	movs	r0, #4
 800279c:	e7b1      	b.n	8002702 <RI_SetRegisterMotor1+0xaa>
 800279e:	f5b0 6f8a 	cmp.w	r0, #1104	@ 0x450
 80027a2:	f040 80e3 	bne.w	800296c <RI_SetRegisterMotor1+0x314>
          PID_SetKI (&(&STO_PLL_M1)->PIRegulator, (int16_t)regdata16);
 80027a6:	4899      	ldr	r0, [pc, #612]	@ (8002a0c <RI_SetRegisterMotor1+0x3b4>)
 80027a8:	b229      	sxth	r1, r5
 80027aa:	f003 fc61 	bl	8006070 <PID_SetKI>
  uint8_t retVal = MCP_CMD_OK;
 80027ae:	2000      	movs	r0, #0
 80027b0:	e7a7      	b.n	8002702 <RI_SetRegisterMotor1+0xaa>
 80027b2:	f5b0 7f44 	cmp.w	r0, #784	@ 0x310
 80027b6:	f000 81f7 	beq.w	8002ba8 <RI_SetRegisterMotor1+0x550>
 80027ba:	f5b0 7f54 	cmp.w	r0, #848	@ 0x350
 80027be:	d162      	bne.n	8002886 <RI_SetRegisterMotor1+0x22e>
          STO_PLL_GetObserverGains(&STO_PLL_M1, &hC1, &hC2);
 80027c0:	aa01      	add	r2, sp, #4
 80027c2:	f10d 0102 	add.w	r1, sp, #2
 80027c6:	4892      	ldr	r0, [pc, #584]	@ (8002a10 <RI_SetRegisterMotor1+0x3b8>)
 80027c8:	f005 f81c 	bl	8007804 <STO_PLL_GetObserverGains>
          STO_PLL_SetObserverGains(&STO_PLL_M1, (int16_t)regdata16, hC2);
 80027cc:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 80027d0:	488f      	ldr	r0, [pc, #572]	@ (8002a10 <RI_SetRegisterMotor1+0x3b8>)
 80027d2:	b229      	sxth	r1, r5
 80027d4:	f005 f81e 	bl	8007814 <STO_PLL_SetObserverGains>
          break;
 80027d8:	e7e9      	b.n	80027ae <RI_SetRegisterMotor1+0x156>
 80027da:	f5b0 6f05 	cmp.w	r0, #2128	@ 0x850
 80027de:	d0dc      	beq.n	800279a <RI_SetRegisterMotor1+0x142>
          retVal = MCP_ERROR_UNKNOWN_REG;
 80027e0:	f5b0 6f09 	cmp.w	r0, #2192	@ 0x890
 80027e4:	bf0c      	ite	eq
 80027e6:	2004      	moveq	r0, #4
 80027e8:	2005      	movne	r0, #5
 80027ea:	e78a      	b.n	8002702 <RI_SetRegisterMotor1+0xaa>
 80027ec:	f5b0 6ff2 	cmp.w	r0, #1936	@ 0x790
 80027f0:	d0d3      	beq.n	800279a <RI_SetRegisterMotor1+0x142>
 80027f2:	d940      	bls.n	8002876 <RI_SetRegisterMotor1+0x21e>
 80027f4:	f5b0 6ffa 	cmp.w	r0, #2000	@ 0x7d0
 80027f8:	bf0c      	ite	eq
 80027fa:	2004      	moveq	r0, #4
 80027fc:	2005      	movne	r0, #5
 80027fe:	e780      	b.n	8002702 <RI_SetRegisterMotor1+0xaa>
 8002800:	f5b0 7fc8 	cmp.w	r0, #400	@ 0x190
 8002804:	f000 818b 	beq.w	8002b1e <RI_SetRegisterMotor1+0x4c6>
 8002808:	d945      	bls.n	8002896 <RI_SetRegisterMotor1+0x23e>
 800280a:	f5b0 7fe8 	cmp.w	r0, #464	@ 0x1d0
 800280e:	f000 81c6 	beq.w	8002b9e <RI_SetRegisterMotor1+0x546>
 8002812:	f5b0 7f04 	cmp.w	r0, #528	@ 0x210
 8002816:	f040 80a9 	bne.w	800296c <RI_SetRegisterMotor1+0x314>
          PID_SetKD(&PIDIqHandle_M1, (int16_t)regdata16);
 800281a:	487e      	ldr	r0, [pc, #504]	@ (8002a14 <RI_SetRegisterMotor1+0x3bc>)
 800281c:	b229      	sxth	r1, r5
 800281e:	f003 fc57 	bl	80060d0 <PID_SetKD>
          break;
 8002822:	e7c4      	b.n	80027ae <RI_SetRegisterMotor1+0x156>
 8002824:	28d8      	cmp	r0, #216	@ 0xd8
 8002826:	f000 812d 	beq.w	8002a84 <RI_SetRegisterMotor1+0x42c>
 800282a:	f5b0 7f8c 	cmp.w	r0, #280	@ 0x118
 800282e:	bf0c      	ite	eq
 8002830:	2004      	moveq	r0, #4
 8002832:	2005      	movne	r0, #5
 8002834:	e7ac      	b.n	8002790 <RI_SetRegisterMotor1+0x138>
 8002836:	f241 5350 	movw	r3, #5456	@ 0x1550
 800283a:	4298      	cmp	r0, r3
 800283c:	f000 8189 	beq.w	8002b52 <RI_SetRegisterMotor1+0x4fa>
 8002840:	d959      	bls.n	80028f6 <RI_SetRegisterMotor1+0x29e>
 8002842:	f241 6350 	movw	r3, #5712	@ 0x1650
 8002846:	4298      	cmp	r0, r3
 8002848:	f000 817e 	beq.w	8002b48 <RI_SetRegisterMotor1+0x4f0>
 800284c:	d945      	bls.n	80028da <RI_SetRegisterMotor1+0x282>
 800284e:	f641 1310 	movw	r3, #6416	@ 0x1910
 8002852:	4298      	cmp	r0, r3
 8002854:	f000 81ad 	beq.w	8002bb2 <RI_SetRegisterMotor1+0x55a>
 8002858:	d936      	bls.n	80028c8 <RI_SetRegisterMotor1+0x270>
 800285a:	f641 3358 	movw	r3, #7000	@ 0x1b58
 800285e:	4298      	cmp	r0, r3
 8002860:	d09b      	beq.n	800279a <RI_SetRegisterMotor1+0x142>
 8002862:	d923      	bls.n	80028ac <RI_SetRegisterMotor1+0x254>
 8002864:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 8002868:	f641 3390 	movw	r3, #7056	@ 0x1b90
          retVal = MCP_ERROR_UNKNOWN_REG;
 800286c:	4298      	cmp	r0, r3
 800286e:	bf0c      	ite	eq
 8002870:	2004      	moveq	r0, #4
 8002872:	2005      	movne	r0, #5
 8002874:	e745      	b.n	8002702 <RI_SetRegisterMotor1+0xaa>
 8002876:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 800287a:	f5b0 6fb2 	cmp.w	r0, #1424	@ 0x590
 800287e:	bf0c      	ite	eq
 8002880:	2004      	moveq	r0, #4
 8002882:	2005      	movne	r0, #5
 8002884:	e73d      	b.n	8002702 <RI_SetRegisterMotor1+0xaa>
 8002886:	f5b0 7f34 	cmp.w	r0, #720	@ 0x2d0
 800288a:	d16f      	bne.n	800296c <RI_SetRegisterMotor1+0x314>
          PID_SetKI(&PIDIdHandle_M1, (int16_t)regdata16);
 800288c:	4862      	ldr	r0, [pc, #392]	@ (8002a18 <RI_SetRegisterMotor1+0x3c0>)
 800288e:	b229      	sxth	r1, r5
 8002890:	f003 fbee 	bl	8006070 <PID_SetKI>
          break;
 8002894:	e78b      	b.n	80027ae <RI_SetRegisterMotor1+0x156>
 8002896:	28d0      	cmp	r0, #208	@ 0xd0
 8002898:	f000 817c 	beq.w	8002b94 <RI_SetRegisterMotor1+0x53c>
 800289c:	f5b0 7f88 	cmp.w	r0, #272	@ 0x110
 80028a0:	d146      	bne.n	8002930 <RI_SetRegisterMotor1+0x2d8>
          PID_SetKD(&PIDSpeedHandle_M1, (int16_t)regdata16);
 80028a2:	485e      	ldr	r0, [pc, #376]	@ (8002a1c <RI_SetRegisterMotor1+0x3c4>)
 80028a4:	b229      	sxth	r1, r5
 80028a6:	f003 fc13 	bl	80060d0 <PID_SetKD>
          break;
 80028aa:	e780      	b.n	80027ae <RI_SetRegisterMotor1+0x156>
 80028ac:	f020 0340 	bic.w	r3, r0, #64	@ 0x40
 80028b0:	f641 3210 	movw	r2, #6928	@ 0x1b10
 80028b4:	4293      	cmp	r3, r2
 80028b6:	f43f af70 	beq.w	800279a <RI_SetRegisterMotor1+0x142>
 80028ba:	f641 2390 	movw	r3, #6800	@ 0x1a90
          retVal = MCP_ERROR_UNKNOWN_REG;
 80028be:	4298      	cmp	r0, r3
 80028c0:	bf0c      	ite	eq
 80028c2:	2004      	moveq	r0, #4
 80028c4:	2005      	movne	r0, #5
 80028c6:	e71c      	b.n	8002702 <RI_SetRegisterMotor1+0xaa>
 80028c8:	f641 03d0 	movw	r3, #6352	@ 0x18d0
 80028cc:	4298      	cmp	r0, r3
 80028ce:	d14d      	bne.n	800296c <RI_SetRegisterMotor1+0x314>
          PID_SetKIDivisorPOW2 (&(&STO_PLL_M1)->PIRegulator,regdata16);
 80028d0:	484e      	ldr	r0, [pc, #312]	@ (8002a0c <RI_SetRegisterMotor1+0x3b4>)
 80028d2:	4629      	mov	r1, r5
 80028d4:	f003 fbe8 	bl	80060a8 <PID_SetKIDivisorPOW2>
          break;
 80028d8:	e769      	b.n	80027ae <RI_SetRegisterMotor1+0x156>
 80028da:	f241 53d0 	movw	r3, #5584	@ 0x15d0
 80028de:	4298      	cmp	r0, r3
 80028e0:	f000 8153 	beq.w	8002b8a <RI_SetRegisterMotor1+0x532>
 80028e4:	f241 6310 	movw	r3, #5648	@ 0x1610
 80028e8:	4298      	cmp	r0, r3
 80028ea:	d118      	bne.n	800291e <RI_SetRegisterMotor1+0x2c6>
          PID_SetKIDivisorPOW2(&PIDIqHandle_M1, regdata16);
 80028ec:	4849      	ldr	r0, [pc, #292]	@ (8002a14 <RI_SetRegisterMotor1+0x3bc>)
 80028ee:	4629      	mov	r1, r5
 80028f0:	f003 fbda 	bl	80060a8 <PID_SetKIDivisorPOW2>
          break;
 80028f4:	e75b      	b.n	80027ae <RI_SetRegisterMotor1+0x156>
 80028f6:	f241 4350 	movw	r3, #5200	@ 0x1450
 80028fa:	4298      	cmp	r0, r3
 80028fc:	f000 811f 	beq.w	8002b3e <RI_SetRegisterMotor1+0x4e6>
 8002900:	d926      	bls.n	8002950 <RI_SetRegisterMotor1+0x2f8>
 8002902:	f241 43d0 	movw	r3, #5328	@ 0x14d0
 8002906:	4298      	cmp	r0, r3
 8002908:	f000 813a 	beq.w	8002b80 <RI_SetRegisterMotor1+0x528>
 800290c:	f241 5310 	movw	r3, #5392	@ 0x1510
 8002910:	4298      	cmp	r0, r3
 8002912:	d114      	bne.n	800293e <RI_SetRegisterMotor1+0x2e6>
          PID_SetKPDivisorPOW2(&PIDIdHandle_M1, regdata16);
 8002914:	4840      	ldr	r0, [pc, #256]	@ (8002a18 <RI_SetRegisterMotor1+0x3c0>)
 8002916:	4629      	mov	r1, r5
 8002918:	f003 fbb8 	bl	800608c <PID_SetKPDivisorPOW2>
          break;
 800291c:	e747      	b.n	80027ae <RI_SetRegisterMotor1+0x156>
 800291e:	f241 5390 	movw	r3, #5520	@ 0x1590
 8002922:	4298      	cmp	r0, r3
 8002924:	d122      	bne.n	800296c <RI_SetRegisterMotor1+0x314>
          PID_SetKDDivisorPOW2(&PIDIdHandle_M1, regdata16);
 8002926:	483c      	ldr	r0, [pc, #240]	@ (8002a18 <RI_SetRegisterMotor1+0x3c0>)
 8002928:	4629      	mov	r1, r5
 800292a:	f003 fbd9 	bl	80060e0 <PID_SetKDDivisorPOW2>
          break;
 800292e:	e73e      	b.n	80027ae <RI_SetRegisterMotor1+0x156>
 8002930:	2890      	cmp	r0, #144	@ 0x90
 8002932:	d11b      	bne.n	800296c <RI_SetRegisterMotor1+0x314>
          PID_SetKP(&PIDSpeedHandle_M1, (int16_t)regdata16);
 8002934:	4839      	ldr	r0, [pc, #228]	@ (8002a1c <RI_SetRegisterMotor1+0x3c4>)
 8002936:	b229      	sxth	r1, r5
 8002938:	f003 fb98 	bl	800606c <PID_SetKP>
          break;
 800293c:	e737      	b.n	80027ae <RI_SetRegisterMotor1+0x156>
 800293e:	f241 4390 	movw	r3, #5264	@ 0x1490
 8002942:	4298      	cmp	r0, r3
 8002944:	d112      	bne.n	800296c <RI_SetRegisterMotor1+0x314>
          PID_SetKIDivisorPOW2(&PIDSpeedHandle_M1, regdata16);
 8002946:	4835      	ldr	r0, [pc, #212]	@ (8002a1c <RI_SetRegisterMotor1+0x3c4>)
 8002948:	4629      	mov	r1, r5
 800294a:	f003 fbad 	bl	80060a8 <PID_SetKIDivisorPOW2>
          break;
 800294e:	e72e      	b.n	80027ae <RI_SetRegisterMotor1+0x156>
 8002950:	f5b0 6f39 	cmp.w	r0, #2960	@ 0xb90
 8002954:	f43f af21 	beq.w	800279a <RI_SetRegisterMotor1+0x142>
 8002958:	d915      	bls.n	8002986 <RI_SetRegisterMotor1+0x32e>
 800295a:	f5b0 6f65 	cmp.w	r0, #3664	@ 0xe50
 800295e:	f43f af26 	beq.w	80027ae <RI_SetRegisterMotor1+0x156>
 8002962:	d905      	bls.n	8002970 <RI_SetRegisterMotor1+0x318>
 8002964:	f5b0 6f69 	cmp.w	r0, #3728	@ 0xe90
 8002968:	f43f af21 	beq.w	80027ae <RI_SetRegisterMotor1+0x156>
          retVal = MCP_ERROR_UNKNOWN_REG;
 800296c:	2005      	movs	r0, #5
 800296e:	e6c8      	b.n	8002702 <RI_SetRegisterMotor1+0xaa>
 8002970:	f5b0 6f45 	cmp.w	r0, #3152	@ 0xc50
 8002974:	f43f af11 	beq.w	800279a <RI_SetRegisterMotor1+0x142>
 8002978:	d913      	bls.n	80029a2 <RI_SetRegisterMotor1+0x34a>
 800297a:	f5b0 6f49 	cmp.w	r0, #3216	@ 0xc90
 800297e:	bf0c      	ite	eq
 8002980:	2004      	moveq	r0, #4
 8002982:	2005      	movne	r0, #5
 8002984:	e6bd      	b.n	8002702 <RI_SetRegisterMotor1+0xaa>
 8002986:	f5b0 6f19 	cmp.w	r0, #2448	@ 0x990
 800298a:	d114      	bne.n	80029b6 <RI_SetRegisterMotor1+0x35e>
          currComp = MCI_GetIqdref(pMCIN);
 800298c:	481e      	ldr	r0, [pc, #120]	@ (8002a08 <RI_SetRegisterMotor1+0x3b0>)
 800298e:	f7fe fcb7 	bl	8001300 <MCI_GetIqdref>
 8002992:	9001      	str	r0, [sp, #4]
          currComp.d = (int16_t)regdata16;
 8002994:	f8ad 5006 	strh.w	r5, [sp, #6]
          MCI_SetCurrentReferences(pMCIN,currComp);
 8002998:	9901      	ldr	r1, [sp, #4]
 800299a:	481b      	ldr	r0, [pc, #108]	@ (8002a08 <RI_SetRegisterMotor1+0x3b0>)
 800299c:	f7fe fba0 	bl	80010e0 <MCI_SetCurrentReferences>
          break;
 80029a0:	e705      	b.n	80027ae <RI_SetRegisterMotor1+0x156>
 80029a2:	f5b0 6f3d 	cmp.w	r0, #3024	@ 0xbd0
 80029a6:	f43f aef8 	beq.w	800279a <RI_SetRegisterMotor1+0x142>
          retVal = MCP_ERROR_UNKNOWN_REG;
 80029aa:	f5b0 6f41 	cmp.w	r0, #3088	@ 0xc10
 80029ae:	bf0c      	ite	eq
 80029b0:	2004      	moveq	r0, #4
 80029b2:	2005      	movne	r0, #5
 80029b4:	e6a5      	b.n	8002702 <RI_SetRegisterMotor1+0xaa>
 80029b6:	d3d9      	bcc.n	800296c <RI_SetRegisterMotor1+0x314>
 80029b8:	f5b0 6f25 	cmp.w	r0, #2640	@ 0xa50
 80029bc:	f43f aeed 	beq.w	800279a <RI_SetRegisterMotor1+0x142>
 80029c0:	d909      	bls.n	80029d6 <RI_SetRegisterMotor1+0x37e>
 80029c2:	f5b0 6f29 	cmp.w	r0, #2704	@ 0xa90
 80029c6:	f43f aee8 	beq.w	800279a <RI_SetRegisterMotor1+0x142>
 80029ca:	f5b0 6f35 	cmp.w	r0, #2896	@ 0xb50
 80029ce:	bf0c      	ite	eq
 80029d0:	2004      	moveq	r0, #4
 80029d2:	2005      	movne	r0, #5
 80029d4:	e695      	b.n	8002702 <RI_SetRegisterMotor1+0xaa>
 80029d6:	f5b0 6f1d 	cmp.w	r0, #2512	@ 0x9d0
 80029da:	f43f aede 	beq.w	800279a <RI_SetRegisterMotor1+0x142>
 80029de:	f5b0 6f21 	cmp.w	r0, #2576	@ 0xa10
 80029e2:	bf0c      	ite	eq
 80029e4:	2004      	moveq	r0, #4
 80029e6:	2005      	movne	r0, #5
 80029e8:	e68b      	b.n	8002702 <RI_SetRegisterMotor1+0xaa>
 80029ea:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 80029ee:	2828      	cmp	r0, #40	@ 0x28
 80029f0:	d008      	beq.n	8002a04 <RI_SetRegisterMotor1+0x3ac>
 80029f2:	2005      	movs	r0, #5
}
 80029f4:	b004      	add	sp, #16
 80029f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80029fa:	28a8      	cmp	r0, #168	@ 0xa8
 80029fc:	d002      	beq.n	8002a04 <RI_SetRegisterMotor1+0x3ac>
 80029fe:	d9f4      	bls.n	80029ea <RI_SetRegisterMotor1+0x392>
 8002a00:	28e8      	cmp	r0, #232	@ 0xe8
 8002a02:	d1f6      	bne.n	80029f2 <RI_SetRegisterMotor1+0x39a>
      retVal = MCP_ERROR_RO_REG;
 8002a04:	2004      	movs	r0, #4
 8002a06:	e647      	b.n	8002698 <RI_SetRegisterMotor1+0x40>
 8002a08:	20000584 	.word	0x20000584
 8002a0c:	200000bc 	.word	0x200000bc
 8002a10:	20000088 	.word	0x20000088
 8002a14:	20000364 	.word	0x20000364
 8002a18:	20000338 	.word	0x20000338
 8002a1c:	20000390 	.word	0x20000390
 8002a20:	f5b0 7f5a 	cmp.w	r0, #872	@ 0x368
 8002a24:	d030      	beq.n	8002a88 <RI_SetRegisterMotor1+0x430>
 8002a26:	f5b0 6fa5 	cmp.w	r0, #1320	@ 0x528
 8002a2a:	d1e2      	bne.n	80029f2 <RI_SetRegisterMotor1+0x39a>
            retVal =  MCPA_cfgLog (&MCPA_UART_A, rawData);
 8002a2c:	4863      	ldr	r0, [pc, #396]	@ (8002bbc <RI_SetRegisterMotor1+0x564>)
 8002a2e:	1ca9      	adds	r1, r5, #2
}
 8002a30:	b004      	add	sp, #16
 8002a32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            retVal =  MCPA_cfgLog (&MCPA_UART_A, rawData);
 8002a36:	f003 ba75 	b.w	8005f24 <MCPA_cfgLog>
    *tempdestString = (int8_t)0;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	702b      	strb	r3, [r5, #0]
 8002a3e:	e7e1      	b.n	8002a04 <RI_SetRegisterMotor1+0x3ac>
        *size = 0;
 8002a40:	2300      	movs	r3, #0
 8002a42:	8023      	strh	r3, [r4, #0]
        retVal = MCP_ERROR_BAD_RAW_FORMAT; /* This error stop the parsing of the CMD buffer */
 8002a44:	200a      	movs	r0, #10
 8002a46:	e627      	b.n	8002698 <RI_SetRegisterMotor1+0x40>
          uint8_t regdata8 = *data;
 8002a48:	7813      	ldrb	r3, [r2, #0]
          if ((uint8_t)MCM_TORQUE_MODE == regdata8)
 8002a4a:	2b04      	cmp	r3, #4
 8002a4c:	d011      	beq.n	8002a72 <RI_SetRegisterMotor1+0x41a>
          if ((uint8_t)MCM_SPEED_MODE == regdata8)
 8002a4e:	2b03      	cmp	r3, #3
 8002a50:	d057      	beq.n	8002b02 <RI_SetRegisterMotor1+0x4aa>
  uint8_t retVal = MCP_CMD_OK;
 8002a52:	2000      	movs	r0, #0
 8002a54:	e62c      	b.n	80026b0 <RI_SetRegisterMotor1+0x58>
          MCI_ExecSpeedRamp(pMCIN,((((int16_t)regdata32) * ((int16_t)SPEED_UNIT)) / (int16_t)U_RPM), 0);
 8002a56:	f9b2 3000 	ldrsh.w	r3, [r2]
 8002a5a:	4959      	ldr	r1, [pc, #356]	@ (8002bc0 <RI_SetRegisterMotor1+0x568>)
 8002a5c:	4859      	ldr	r0, [pc, #356]	@ (8002bc4 <RI_SetRegisterMotor1+0x56c>)
 8002a5e:	fb81 2103 	smull	r2, r1, r1, r3
 8002a62:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8002a66:	2200      	movs	r2, #0
 8002a68:	b209      	sxth	r1, r1
 8002a6a:	f7fe fb25 	bl	80010b8 <MCI_ExecSpeedRamp>
  uint8_t retVal = MCP_CMD_OK;
 8002a6e:	2000      	movs	r0, #0
          break;
 8002a70:	e68e      	b.n	8002790 <RI_SetRegisterMotor1+0x138>
            MCI_ExecTorqueRamp(pMCIN, MCI_GetTeref(pMCIN), 0);
 8002a72:	4854      	ldr	r0, [pc, #336]	@ (8002bc4 <RI_SetRegisterMotor1+0x56c>)
 8002a74:	f7fe fc6e 	bl	8001354 <MCI_GetTeref>
 8002a78:	2200      	movs	r2, #0
 8002a7a:	4601      	mov	r1, r0
 8002a7c:	4851      	ldr	r0, [pc, #324]	@ (8002bc4 <RI_SetRegisterMotor1+0x56c>)
 8002a7e:	f7fe fb25 	bl	80010cc <MCI_ExecTorqueRamp>
          if ((uint8_t)MCM_SPEED_MODE == regdata8)
 8002a82:	e7e6      	b.n	8002a52 <RI_SetRegisterMotor1+0x3fa>
          retVal = MCP_ERROR_RO_REG;
 8002a84:	2004      	movs	r0, #4
 8002a86:	e683      	b.n	8002790 <RI_SetRegisterMotor1+0x138>
            currComp.q = *((int16_t *) rawData); //cstat !MISRAC2012-Rule-11.3
 8002a88:	f8d5 1002 	ldr.w	r1, [r5, #2]
            MCI_SetCurrentReferences(pMCIN, currComp);
 8002a8c:	484d      	ldr	r0, [pc, #308]	@ (8002bc4 <RI_SetRegisterMotor1+0x56c>)
            currComp.q = *((int16_t *) rawData); //cstat !MISRAC2012-Rule-11.3
 8002a8e:	9101      	str	r1, [sp, #4]
            MCI_SetCurrentReferences(pMCIN, currComp);
 8002a90:	f7fe fb26 	bl	80010e0 <MCI_SetCurrentReferences>
            break;
 8002a94:	e670      	b.n	8002778 <RI_SetRegisterMotor1+0x120>
            MCI_ExecSpeedRamp(pMCIN, (int16_t)((rpm * SPEED_UNIT) / U_RPM), duration);
 8002a96:	f8d5 1002 	ldr.w	r1, [r5, #2]
 8002a9a:	4b49      	ldr	r3, [pc, #292]	@ (8002bc0 <RI_SetRegisterMotor1+0x568>)
 8002a9c:	88ea      	ldrh	r2, [r5, #6]
 8002a9e:	fb83 0301 	smull	r0, r3, r3, r1
 8002aa2:	eba3 71e1 	sub.w	r1, r3, r1, asr #31
 8002aa6:	4847      	ldr	r0, [pc, #284]	@ (8002bc4 <RI_SetRegisterMotor1+0x56c>)
 8002aa8:	b209      	sxth	r1, r1
 8002aaa:	f7fe fb05 	bl	80010b8 <MCI_ExecSpeedRamp>
            break;
 8002aae:	e663      	b.n	8002778 <RI_SetRegisterMotor1+0x120>
            if (((0U != ((rawSize) % 8U))) || ((nbrOfPhase > RUC_MAX_PHASE_NUMBER) != 0))
 8002ab0:	f011 0607 	ands.w	r6, r1, #7
 8002ab4:	d123      	bne.n	8002afe <RI_SetRegisterMotor1+0x4a6>
            uint8_t nbrOfPhase = (((uint8_t)rawSize) / 8U);
 8002ab6:	b2c9      	uxtb	r1, r1
            if (((0U != ((rawSize) % 8U))) || ((nbrOfPhase > RUC_MAX_PHASE_NUMBER) != 0))
 8002ab8:	292f      	cmp	r1, #47	@ 0x2f
 8002aba:	d820      	bhi.n	8002afe <RI_SetRegisterMotor1+0x4a6>
              for (i = 0; i <nbrOfPhase; i++)
 8002abc:	08c9      	lsrs	r1, r1, #3
 8002abe:	f43f ae5b 	beq.w	8002778 <RI_SetRegisterMotor1+0x120>
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8002ac2:	f8df 80fc 	ldr.w	r8, [pc, #252]	@ 8002bc0 <RI_SetRegisterMotor1+0x568>
              (void)RUC_SetPhase(&RevUpControlM1, i, &revUpPhase);
 8002ac6:	4f40      	ldr	r7, [pc, #256]	@ (8002bc8 <RI_SetRegisterMotor1+0x570>)
 8002ac8:	eb05 04c1 	add.w	r4, r5, r1, lsl #3
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8002acc:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
              revUpPhase.hFinalTorque = *((int16_t *) &rawData[4U + (i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 8002ad0:	88eb      	ldrh	r3, [r5, #6]
 8002ad2:	f8ad 3008 	strh.w	r3, [sp, #8]
              revUpPhase.hDurationms  = *((uint16_t *) &rawData[6U +(i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 8002ad6:	f835 3f08 	ldrh.w	r3, [r5, #8]!
 8002ada:	f8ad 3004 	strh.w	r3, [sp, #4]
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8002ade:	fb88 1302 	smull	r1, r3, r8, r2
 8002ae2:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
              (void)RUC_SetPhase(&RevUpControlM1, i, &revUpPhase);
 8002ae6:	b2f1      	uxtb	r1, r6
 8002ae8:	aa01      	add	r2, sp, #4
 8002aea:	4638      	mov	r0, r7
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8002aec:	f8ad 3006 	strh.w	r3, [sp, #6]
              (void)RUC_SetPhase(&RevUpControlM1, i, &revUpPhase);
 8002af0:	f004 fab4 	bl	800705c <RUC_SetPhase>
              for (i = 0; i <nbrOfPhase; i++)
 8002af4:	42a5      	cmp	r5, r4
 8002af6:	f106 0601 	add.w	r6, r6, #1
 8002afa:	d1e7      	bne.n	8002acc <RI_SetRegisterMotor1+0x474>
 8002afc:	e63c      	b.n	8002778 <RI_SetRegisterMotor1+0x120>
              retVal = MCP_ERROR_BAD_RAW_FORMAT;
 8002afe:	200a      	movs	r0, #10
            break;
 8002b00:	e5ca      	b.n	8002698 <RI_SetRegisterMotor1+0x40>
            MCI_ExecSpeedRamp(pMCIN, MCI_GetMecSpeedRefUnit(pMCIN), 0);
 8002b02:	4830      	ldr	r0, [pc, #192]	@ (8002bc4 <RI_SetRegisterMotor1+0x56c>)
 8002b04:	f7fe fbce 	bl	80012a4 <MCI_GetMecSpeedRefUnit>
 8002b08:	2200      	movs	r2, #0
 8002b0a:	4601      	mov	r1, r0
 8002b0c:	482d      	ldr	r0, [pc, #180]	@ (8002bc4 <RI_SetRegisterMotor1+0x56c>)
 8002b0e:	f7fe fad3 	bl	80010b8 <MCI_ExecSpeedRamp>
 8002b12:	e79e      	b.n	8002a52 <RI_SetRegisterMotor1+0x3fa>
          PID_SetKP (&(&STO_PLL_M1)->PIRegulator, (int16_t)regdata16);
 8002b14:	482d      	ldr	r0, [pc, #180]	@ (8002bcc <RI_SetRegisterMotor1+0x574>)
 8002b16:	b229      	sxth	r1, r5
 8002b18:	f003 faa8 	bl	800606c <PID_SetKP>
          break;
 8002b1c:	e647      	b.n	80027ae <RI_SetRegisterMotor1+0x156>
          PID_SetKP(&PIDIqHandle_M1, (int16_t)regdata16);
 8002b1e:	482c      	ldr	r0, [pc, #176]	@ (8002bd0 <RI_SetRegisterMotor1+0x578>)
 8002b20:	b229      	sxth	r1, r5
 8002b22:	f003 faa3 	bl	800606c <PID_SetKP>
          break;
 8002b26:	e642      	b.n	80027ae <RI_SetRegisterMotor1+0x156>
          currComp = MCI_GetIqdref(pMCIN);
 8002b28:	4826      	ldr	r0, [pc, #152]	@ (8002bc4 <RI_SetRegisterMotor1+0x56c>)
 8002b2a:	f7fe fbe9 	bl	8001300 <MCI_GetIqdref>
 8002b2e:	9001      	str	r0, [sp, #4]
          currComp.q = (int16_t)regdata16;
 8002b30:	f8ad 5004 	strh.w	r5, [sp, #4]
          MCI_SetCurrentReferences(pMCIN,currComp);
 8002b34:	9901      	ldr	r1, [sp, #4]
 8002b36:	4823      	ldr	r0, [pc, #140]	@ (8002bc4 <RI_SetRegisterMotor1+0x56c>)
 8002b38:	f7fe fad2 	bl	80010e0 <MCI_SetCurrentReferences>
          break;
 8002b3c:	e637      	b.n	80027ae <RI_SetRegisterMotor1+0x156>
          PID_SetKPDivisorPOW2(&PIDSpeedHandle_M1, regdata16);
 8002b3e:	4825      	ldr	r0, [pc, #148]	@ (8002bd4 <RI_SetRegisterMotor1+0x57c>)
 8002b40:	4629      	mov	r1, r5
 8002b42:	f003 faa3 	bl	800608c <PID_SetKPDivisorPOW2>
          break;
 8002b46:	e632      	b.n	80027ae <RI_SetRegisterMotor1+0x156>
          PID_SetKDDivisorPOW2(&PIDIqHandle_M1, regdata16);
 8002b48:	4821      	ldr	r0, [pc, #132]	@ (8002bd0 <RI_SetRegisterMotor1+0x578>)
 8002b4a:	4629      	mov	r1, r5
 8002b4c:	f003 fac8 	bl	80060e0 <PID_SetKDDivisorPOW2>
          break;
 8002b50:	e62d      	b.n	80027ae <RI_SetRegisterMotor1+0x156>
          PID_SetKIDivisorPOW2(&PIDIdHandle_M1, regdata16);
 8002b52:	4821      	ldr	r0, [pc, #132]	@ (8002bd8 <RI_SetRegisterMotor1+0x580>)
 8002b54:	4629      	mov	r1, r5
 8002b56:	f003 faa7 	bl	80060a8 <PID_SetKIDivisorPOW2>
          break;
 8002b5a:	e628      	b.n	80027ae <RI_SetRegisterMotor1+0x156>
          STO_PLL_GetObserverGains(&STO_PLL_M1, &hC1, &hC2);
 8002b5c:	aa01      	add	r2, sp, #4
 8002b5e:	f10d 0102 	add.w	r1, sp, #2
 8002b62:	481e      	ldr	r0, [pc, #120]	@ (8002bdc <RI_SetRegisterMotor1+0x584>)
 8002b64:	f004 fe4e 	bl	8007804 <STO_PLL_GetObserverGains>
          STO_PLL_SetObserverGains(&STO_PLL_M1, hC1, (int16_t)regdata16);
 8002b68:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 8002b6c:	481b      	ldr	r0, [pc, #108]	@ (8002bdc <RI_SetRegisterMotor1+0x584>)
 8002b6e:	b22a      	sxth	r2, r5
 8002b70:	f004 fe50 	bl	8007814 <STO_PLL_SetObserverGains>
          break;
 8002b74:	e61b      	b.n	80027ae <RI_SetRegisterMotor1+0x156>
          PID_SetKP(&PIDIdHandle_M1, (int16_t)regdata16);
 8002b76:	4818      	ldr	r0, [pc, #96]	@ (8002bd8 <RI_SetRegisterMotor1+0x580>)
 8002b78:	b229      	sxth	r1, r5
 8002b7a:	f003 fa77 	bl	800606c <PID_SetKP>
          break;
 8002b7e:	e616      	b.n	80027ae <RI_SetRegisterMotor1+0x156>
          PID_SetKDDivisorPOW2(&PIDSpeedHandle_M1, regdata16);
 8002b80:	4814      	ldr	r0, [pc, #80]	@ (8002bd4 <RI_SetRegisterMotor1+0x57c>)
 8002b82:	4629      	mov	r1, r5
 8002b84:	f003 faac 	bl	80060e0 <PID_SetKDDivisorPOW2>
          break;
 8002b88:	e611      	b.n	80027ae <RI_SetRegisterMotor1+0x156>
          PID_SetKPDivisorPOW2(&PIDIqHandle_M1, regdata16);
 8002b8a:	4811      	ldr	r0, [pc, #68]	@ (8002bd0 <RI_SetRegisterMotor1+0x578>)
 8002b8c:	4629      	mov	r1, r5
 8002b8e:	f003 fa7d 	bl	800608c <PID_SetKPDivisorPOW2>
          break;
 8002b92:	e60c      	b.n	80027ae <RI_SetRegisterMotor1+0x156>
          PID_SetKI(&PIDSpeedHandle_M1, (int16_t)regdata16);
 8002b94:	480f      	ldr	r0, [pc, #60]	@ (8002bd4 <RI_SetRegisterMotor1+0x57c>)
 8002b96:	b229      	sxth	r1, r5
 8002b98:	f003 fa6a 	bl	8006070 <PID_SetKI>
          break;
 8002b9c:	e607      	b.n	80027ae <RI_SetRegisterMotor1+0x156>
          PID_SetKI(&PIDIqHandle_M1, (int16_t)regdata16);
 8002b9e:	480c      	ldr	r0, [pc, #48]	@ (8002bd0 <RI_SetRegisterMotor1+0x578>)
 8002ba0:	b229      	sxth	r1, r5
 8002ba2:	f003 fa65 	bl	8006070 <PID_SetKI>
          break;
 8002ba6:	e602      	b.n	80027ae <RI_SetRegisterMotor1+0x156>
          PID_SetKD(&PIDIdHandle_M1, (int16_t)regdata16);
 8002ba8:	480b      	ldr	r0, [pc, #44]	@ (8002bd8 <RI_SetRegisterMotor1+0x580>)
 8002baa:	b229      	sxth	r1, r5
 8002bac:	f003 fa90 	bl	80060d0 <PID_SetKD>
          break;
 8002bb0:	e5fd      	b.n	80027ae <RI_SetRegisterMotor1+0x156>
          PID_SetKPDivisorPOW2 (&(&STO_PLL_M1)->PIRegulator,regdata16);
 8002bb2:	4806      	ldr	r0, [pc, #24]	@ (8002bcc <RI_SetRegisterMotor1+0x574>)
 8002bb4:	4629      	mov	r1, r5
 8002bb6:	f003 fa69 	bl	800608c <PID_SetKPDivisorPOW2>
          break;
 8002bba:	e5f8      	b.n	80027ae <RI_SetRegisterMotor1+0x156>
 8002bbc:	200003ec 	.word	0x200003ec
 8002bc0:	2aaaaaab 	.word	0x2aaaaaab
 8002bc4:	20000584 	.word	0x20000584
 8002bc8:	2000028c 	.word	0x2000028c
 8002bcc:	200000bc 	.word	0x200000bc
 8002bd0:	20000364 	.word	0x20000364
 8002bd4:	20000390 	.word	0x20000390
 8002bd8:	20000338 	.word	0x20000338
 8002bdc:	20000088 	.word	0x20000088

08002be0 <RI_GetRegisterGlobal>:
uint8_t RI_GetRegisterGlobal(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace){
 8002be0:	b510      	push	{r4, lr}
    switch (typeID)
 8002be2:	f1a1 0c08 	sub.w	ip, r1, #8
uint8_t RI_GetRegisterGlobal(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace){
 8002be6:	f9bd e008 	ldrsh.w	lr, [sp, #8]
    switch (typeID)
 8002bea:	f1bc 0f20 	cmp.w	ip, #32
 8002bee:	d812      	bhi.n	8002c16 <RI_GetRegisterGlobal+0x36>
 8002bf0:	e8df f00c 	tbb	[pc, ip]
 8002bf4:	1111111b 	.word	0x1111111b
 8002bf8:	11111111 	.word	0x11111111
 8002bfc:	11111127 	.word	0x11111127
 8002c00:	11111111 	.word	0x11111111
 8002c04:	11111122 	.word	0x11111122
 8002c08:	11111111 	.word	0x11111111
 8002c0c:	11111135 	.word	0x11111135
 8002c10:	11111111 	.word	0x11111111
 8002c14:	13          	.byte	0x13
 8002c15:	00          	.byte	0x00
 8002c16:	2007      	movs	r0, #7
}
 8002c18:	bd10      	pop	{r4, pc}
        switch (regID)
 8002c1a:	2828      	cmp	r0, #40	@ 0x28
 8002c1c:	d044      	beq.n	8002ca8 <RI_GetRegisterGlobal+0xc8>
        *size = (*rawSize) + 2U;
 8002c1e:	8812      	ldrh	r2, [r2, #0]
 8002c20:	3202      	adds	r2, #2
            retVal = MCP_ERROR_UNKNOWN_REG;
 8002c22:	2005      	movs	r0, #5
        *size = (*rawSize) + 2U;
 8002c24:	b292      	uxth	r2, r2
 8002c26:	801a      	strh	r2, [r3, #0]
}
 8002c28:	bd10      	pop	{r4, pc}
        if (freeSpace > 0)
 8002c2a:	f1be 0f00 	cmp.w	lr, #0
 8002c2e:	dd39      	ble.n	8002ca4 <RI_GetRegisterGlobal+0xc4>
 8002c30:	2201      	movs	r2, #1
            *size= 0 ; /* */
 8002c32:	801a      	strh	r2, [r3, #0]
              retVal = MCP_ERROR_UNKNOWN_REG;
 8002c34:	2005      	movs	r0, #5
}
 8002c36:	bd10      	pop	{r4, pc}
        if (freeSpace >= 4)
 8002c38:	f1be 0f03 	cmp.w	lr, #3
 8002c3c:	dd2a      	ble.n	8002c94 <RI_GetRegisterGlobal+0xb4>
 8002c3e:	2204      	movs	r2, #4
 8002c40:	e7f7      	b.n	8002c32 <RI_GetRegisterGlobal+0x52>
        if (freeSpace >= 2)
 8002c42:	f1be 0f01 	cmp.w	lr, #1
 8002c46:	dd25      	ble.n	8002c94 <RI_GetRegisterGlobal+0xb4>
          switch (regID)
 8002c48:	f5b0 6f65 	cmp.w	r0, #3664	@ 0xe50
 8002c4c:	d05a      	beq.n	8002d04 <RI_GetRegisterGlobal+0x124>
 8002c4e:	f5b0 6f69 	cmp.w	r0, #3728	@ 0xe90
 8002c52:	bf0c      	ite	eq
 8002c54:	2000      	moveq	r0, #0
 8002c56:	2005      	movne	r0, #5
          *size = 2;
 8002c58:	2202      	movs	r2, #2
 8002c5a:	801a      	strh	r2, [r3, #0]
}
 8002c5c:	bd10      	pop	{r4, pc}
        switch (regID)
 8002c5e:	2820      	cmp	r0, #32
 8002c60:	d02c      	beq.n	8002cbc <RI_GetRegisterGlobal+0xdc>
 8002c62:	2860      	cmp	r0, #96	@ 0x60
 8002c64:	d118      	bne.n	8002c98 <RI_GetRegisterGlobal+0xb8>
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002c66:	4c28      	ldr	r4, [pc, #160]	@ (8002d08 <RI_GetRegisterGlobal+0x128>)
 8002c68:	f994 0000 	ldrsb.w	r0, [r4]
  *size= 1U ; /* /0 is the min String size */
 8002c6c:	2101      	movs	r1, #1
 8002c6e:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002c70:	b1a0      	cbz	r0, 8002c9c <RI_GetRegisterGlobal+0xbc>
 8002c72:	fa1f fe8e 	uxth.w	lr, lr
  const char_t *tempsrcString = srcString;
 8002c76:	46a4      	mov	ip, r4
 8002c78:	e008      	b.n	8002c8c <RI_GetRegisterGlobal+0xac>
    *tempdestString = *tempsrcString;
 8002c7a:	f802 0b01 	strb.w	r0, [r2], #1
    *size = *size + 1U;
 8002c7e:	8819      	ldrh	r1, [r3, #0]
 8002c80:	3101      	adds	r1, #1
 8002c82:	b289      	uxth	r1, r1
 8002c84:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002c86:	f91c 0f01 	ldrsb.w	r0, [ip, #1]!
 8002c8a:	b138      	cbz	r0, 8002c9c <RI_GetRegisterGlobal+0xbc>
 8002c8c:	4571      	cmp	r1, lr
 8002c8e:	d3f4      	bcc.n	8002c7a <RI_GetRegisterGlobal+0x9a>
    retVal = MCP_ERROR_STRING_FORMAT;
 8002c90:	2006      	movs	r0, #6
}
 8002c92:	bd10      	pop	{r4, pc}
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002c94:	2008      	movs	r0, #8
}
 8002c96:	bd10      	pop	{r4, pc}
 8002c98:	2200      	movs	r2, #0
 8002c9a:	e7ca      	b.n	8002c32 <RI_GetRegisterGlobal+0x52>
    *tempdestString = (int8_t)0;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	7013      	strb	r3, [r2, #0]
  uint8_t retVal = MCP_CMD_OK;
 8002ca0:	2000      	movs	r0, #0
}
 8002ca2:	bd10      	pop	{r4, pc}
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002ca4:	4608      	mov	r0, r1
}
 8002ca6:	bd10      	pop	{r4, pc}
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002ca8:	fa1f fe8e 	uxth.w	lr, lr
            *rawSize = (uint16_t)sizeof(GlobalConfig_reg_t);
 8002cac:	210a      	movs	r1, #10
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002cae:	f1be 0f0b 	cmp.w	lr, #11
            *rawSize = (uint16_t)sizeof(GlobalConfig_reg_t);
 8002cb2:	8011      	strh	r1, [r2, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002cb4:	d81a      	bhi.n	8002cec <RI_GetRegisterGlobal+0x10c>
 8002cb6:	220c      	movs	r2, #12
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002cb8:	2008      	movs	r0, #8
 8002cba:	e7b4      	b.n	8002c26 <RI_GetRegisterGlobal+0x46>
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002cbc:	4c13      	ldr	r4, [pc, #76]	@ (8002d0c <RI_GetRegisterGlobal+0x12c>)
 8002cbe:	f994 0000 	ldrsb.w	r0, [r4]
  *size= 1U ; /* /0 is the min String size */
 8002cc2:	2101      	movs	r1, #1
 8002cc4:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002cc6:	2800      	cmp	r0, #0
 8002cc8:	d0e8      	beq.n	8002c9c <RI_GetRegisterGlobal+0xbc>
 8002cca:	fa1f fe8e 	uxth.w	lr, lr
  const char_t *tempsrcString = srcString;
 8002cce:	46a4      	mov	ip, r4
 8002cd0:	e009      	b.n	8002ce6 <RI_GetRegisterGlobal+0x106>
    *tempdestString = *tempsrcString;
 8002cd2:	f802 0b01 	strb.w	r0, [r2], #1
    *size = *size + 1U;
 8002cd6:	8819      	ldrh	r1, [r3, #0]
 8002cd8:	3101      	adds	r1, #1
 8002cda:	b289      	uxth	r1, r1
 8002cdc:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002cde:	f91c 0f01 	ldrsb.w	r0, [ip, #1]!
 8002ce2:	2800      	cmp	r0, #0
 8002ce4:	d0da      	beq.n	8002c9c <RI_GetRegisterGlobal+0xbc>
 8002ce6:	458e      	cmp	lr, r1
 8002ce8:	d8f3      	bhi.n	8002cd2 <RI_GetRegisterGlobal+0xf2>
 8002cea:	e7d1      	b.n	8002c90 <RI_GetRegisterGlobal+0xb0>
              (void)memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t));
 8002cec:	4908      	ldr	r1, [pc, #32]	@ (8002d10 <RI_GetRegisterGlobal+0x130>)
 8002cee:	6848      	ldr	r0, [r1, #4]
 8002cf0:	680c      	ldr	r4, [r1, #0]
 8002cf2:	8909      	ldrh	r1, [r1, #8]
 8002cf4:	f8c2 0006 	str.w	r0, [r2, #6]
 8002cf8:	f8c2 4002 	str.w	r4, [r2, #2]
 8002cfc:	8151      	strh	r1, [r2, #10]
    uint8_t retVal = MCP_CMD_OK;
 8002cfe:	2000      	movs	r0, #0
              (void)memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t));
 8002d00:	220c      	movs	r2, #12
 8002d02:	e790      	b.n	8002c26 <RI_GetRegisterGlobal+0x46>
    uint8_t retVal = MCP_CMD_OK;
 8002d04:	2000      	movs	r0, #0
 8002d06:	e7a7      	b.n	8002c58 <RI_GetRegisterGlobal+0x78>
 8002d08:	08008ba0 	.word	0x08008ba0
 8002d0c:	08008b74 	.word	0x08008b74
 8002d10:	08008b68 	.word	0x08008b68

08002d14 <RI_GetRegisterMotor1>:
  uint8_t RI_GetRegisterMotor1(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace) {
 8002d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d18:	b096      	sub	sp, #88	@ 0x58
 8002d1a:	461d      	mov	r5, r3
    switch (typeID)
 8002d1c:	f1a1 0308 	sub.w	r3, r1, #8
  uint8_t RI_GetRegisterMotor1(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace) {
 8002d20:	f9bd c070 	ldrsh.w	ip, [sp, #112]	@ 0x70
 8002d24:	4614      	mov	r4, r2
    switch (typeID)
 8002d26:	2b20      	cmp	r3, #32
 8002d28:	d812      	bhi.n	8002d50 <RI_GetRegisterMotor1+0x3c>
 8002d2a:	e8df f003 	tbb	[pc, r3]
 8002d2e:	1135      	.short	0x1135
 8002d30:	11111111 	.word	0x11111111
 8002d34:	116e1111 	.word	0x116e1111
 8002d38:	11111111 	.word	0x11111111
 8002d3c:	11481111 	.word	0x11481111
 8002d40:	11111111 	.word	0x11111111
 8002d44:	11641111 	.word	0x11641111
 8002d48:	11111111 	.word	0x11111111
 8002d4c:	1111      	.short	0x1111
 8002d4e:	15          	.byte	0x15
 8002d4f:	00          	.byte	0x00
 8002d50:	2007      	movs	r0, #7
  }
 8002d52:	b016      	add	sp, #88	@ 0x58
 8002d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rawData++;
 8002d58:	f5b0 7fd4 	cmp.w	r0, #424	@ 0x1a8
 8002d5c:	f104 0302 	add.w	r3, r4, #2
        switch (regID)
 8002d60:	f000 82c4 	beq.w	80032ec <RI_GetRegisterMotor1+0x5d8>
 8002d64:	f200 8086 	bhi.w	8002e74 <RI_GetRegisterMotor1+0x160>
 8002d68:	28e8      	cmp	r0, #232	@ 0xe8
 8002d6a:	f000 82b5 	beq.w	80032d8 <RI_GetRegisterMotor1+0x5c4>
 8002d6e:	d872      	bhi.n	8002e56 <RI_GetRegisterMotor1+0x142>
 8002d70:	2868      	cmp	r0, #104	@ 0x68
 8002d72:	f000 82cc 	beq.w	800330e <RI_GetRegisterMotor1+0x5fa>
 8002d76:	28a8      	cmp	r0, #168	@ 0xa8
 8002d78:	f040 82a9 	bne.w	80032ce <RI_GetRegisterMotor1+0x5ba>
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002d7c:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = (uint16_t)sizeof(ApplicationConfig_reg_t);
 8002d80:	2210      	movs	r2, #16
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002d82:	f1bc 0f11 	cmp.w	ip, #17
            *rawSize = (uint16_t)sizeof(ApplicationConfig_reg_t);
 8002d86:	8022      	strh	r2, [r4, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002d88:	f200 825c 	bhi.w	8003244 <RI_GetRegisterMotor1+0x530>
 8002d8c:	2312      	movs	r3, #18
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002d8e:	2008      	movs	r0, #8
        *size = (*rawSize) + 2U;
 8002d90:	802b      	strh	r3, [r5, #0]
  }
 8002d92:	b016      	add	sp, #88	@ 0x58
 8002d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (freeSpace > 0)
 8002d98:	f1bc 0f00 	cmp.w	ip, #0
 8002d9c:	f340 825f 	ble.w	800325e <RI_GetRegisterMotor1+0x54a>
          switch (regID)
 8002da0:	2888      	cmp	r0, #136	@ 0x88
 8002da2:	f000 8260 	beq.w	8003266 <RI_GetRegisterMotor1+0x552>
 8002da6:	28c8      	cmp	r0, #200	@ 0xc8
 8002da8:	f000 8267 	beq.w	800327a <RI_GetRegisterMotor1+0x566>
 8002dac:	2848      	cmp	r0, #72	@ 0x48
 8002dae:	f000 8260 	beq.w	8003272 <RI_GetRegisterMotor1+0x55e>
 8002db2:	2005      	movs	r0, #5
          *size = 1;
 8002db4:	2301      	movs	r3, #1
 8002db6:	802b      	strh	r3, [r5, #0]
  }
 8002db8:	b016      	add	sp, #88	@ 0x58
 8002dba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (freeSpace >= 4)
 8002dbe:	f1bc 0f03 	cmp.w	ip, #3
 8002dc2:	f340 81fa 	ble.w	80031ba <RI_GetRegisterMotor1+0x4a6>
          switch (regID)
 8002dc6:	28d8      	cmp	r0, #216	@ 0xd8
 8002dc8:	f000 82b8 	beq.w	800333c <RI_GetRegisterMotor1+0x628>
 8002dcc:	f200 81dd 	bhi.w	800318a <RI_GetRegisterMotor1+0x476>
 8002dd0:	2858      	cmp	r0, #88	@ 0x58
 8002dd2:	f000 82ab 	beq.w	800332c <RI_GetRegisterMotor1+0x618>
 8002dd6:	2898      	cmp	r0, #152	@ 0x98
 8002dd8:	f040 81e8 	bne.w	80031ac <RI_GetRegisterMotor1+0x498>
              *regdata32 = (((int32_t)MCI_GetMecSpeedRefUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 8002ddc:	48aa      	ldr	r0, [pc, #680]	@ (8003088 <RI_GetRegisterMotor1+0x374>)
 8002dde:	f7fe fa61 	bl	80012a4 <MCI_GetMecSpeedRefUnit>
 8002de2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002de6:	0040      	lsls	r0, r0, #1
 8002de8:	6020      	str	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002dea:	2000      	movs	r0, #0
          *size = 4;
 8002dec:	2304      	movs	r3, #4
 8002dee:	802b      	strh	r3, [r5, #0]
  }
 8002df0:	b016      	add	sp, #88	@ 0x58
 8002df2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        switch (regID)
 8002df6:	28a0      	cmp	r0, #160	@ 0xa0
 8002df8:	f000 8200 	beq.w	80031fc <RI_GetRegisterMotor1+0x4e8>
 8002dfc:	28e0      	cmp	r0, #224	@ 0xe0
 8002dfe:	f000 81e0 	beq.w	80031c2 <RI_GetRegisterMotor1+0x4ae>
            *size= 0 ; /* */
 8002e02:	2300      	movs	r3, #0
 8002e04:	802b      	strh	r3, [r5, #0]
            retVal = MCP_ERROR_UNKNOWN_REG;
 8002e06:	2005      	movs	r0, #5
            break;
 8002e08:	e7a3      	b.n	8002d52 <RI_GetRegisterMotor1+0x3e>
        if (freeSpace >= 2)
 8002e0a:	f1bc 0f01 	cmp.w	ip, #1
 8002e0e:	f340 81d4 	ble.w	80031ba <RI_GetRegisterMotor1+0x4a6>
          switch (regID)
 8002e12:	f5b0 6f19 	cmp.w	r0, #2448	@ 0x990
 8002e16:	f000 8300 	beq.w	800341a <RI_GetRegisterMotor1+0x706>
 8002e1a:	f200 80a8 	bhi.w	8002f6e <RI_GetRegisterMotor1+0x25a>
 8002e1e:	f5b0 6f8a 	cmp.w	r0, #1104	@ 0x450
 8002e22:	f000 8306 	beq.w	8003432 <RI_GetRegisterMotor1+0x71e>
 8002e26:	f200 808d 	bhi.w	8002f44 <RI_GetRegisterMotor1+0x230>
 8002e2a:	f5b0 7f04 	cmp.w	r0, #528	@ 0x210
 8002e2e:	f000 82fb 	beq.w	8003428 <RI_GetRegisterMotor1+0x714>
 8002e32:	d961      	bls.n	8002ef8 <RI_GetRegisterMotor1+0x1e4>
 8002e34:	f5b0 7f44 	cmp.w	r0, #784	@ 0x310
 8002e38:	f000 82ea 	beq.w	8003410 <RI_GetRegisterMotor1+0x6fc>
 8002e3c:	d954      	bls.n	8002ee8 <RI_GetRegisterMotor1+0x1d4>
 8002e3e:	f5b0 7f54 	cmp.w	r0, #848	@ 0x350
 8002e42:	d144      	bne.n	8002ece <RI_GetRegisterMotor1+0x1ba>
              STO_PLL_GetObserverGains(&STO_PLL_M1, &hC1, &hC2);
 8002e44:	4891      	ldr	r0, [pc, #580]	@ (800308c <RI_GetRegisterMotor1+0x378>)
 8002e46:	aa13      	add	r2, sp, #76	@ 0x4c
 8002e48:	a912      	add	r1, sp, #72	@ 0x48
 8002e4a:	f004 fcdb 	bl	8007804 <STO_PLL_GetObserverGains>
              *regdata16 = hC1;
 8002e4e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8002e52:	8023      	strh	r3, [r4, #0]
              break;
 8002e54:	e0af      	b.n	8002fb6 <RI_GetRegisterMotor1+0x2a2>
 8002e56:	f5b0 7f94 	cmp.w	r0, #296	@ 0x128
 8002e5a:	f040 8238 	bne.w	80032ce <RI_GetRegisterMotor1+0x5ba>
            if ((*rawSize) +2U > (uint16_t)freeSpace)
 8002e5e:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = 12;
 8002e62:	220c      	movs	r2, #12
            if ((*rawSize) +2U > (uint16_t)freeSpace)
 8002e64:	f1bc 0f0d 	cmp.w	ip, #13
            *rawSize = 12;
 8002e68:	8022      	strh	r2, [r4, #0]
            if ((*rawSize) +2U > (uint16_t)freeSpace)
 8002e6a:	f200 81df 	bhi.w	800322c <RI_GetRegisterMotor1+0x518>
 8002e6e:	230e      	movs	r3, #14
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002e70:	2008      	movs	r0, #8
 8002e72:	e78d      	b.n	8002d90 <RI_GetRegisterMotor1+0x7c>
 8002e74:	f5b0 7f0a 	cmp.w	r0, #552	@ 0x228
 8002e78:	f000 8203 	beq.w	8003282 <RI_GetRegisterMotor1+0x56e>
 8002e7c:	f5b0 7f5a 	cmp.w	r0, #872	@ 0x368
 8002e80:	d112      	bne.n	8002ea8 <RI_GetRegisterMotor1+0x194>
            *rawSize = 4;
 8002e82:	2304      	movs	r3, #4
 8002e84:	8023      	strh	r3, [r4, #0]
            *iqref = (uint16_t)MCI_GetIqdref(pMCIN).q;
 8002e86:	4880      	ldr	r0, [pc, #512]	@ (8003088 <RI_GetRegisterMotor1+0x374>)
 8002e88:	f7fe fa3a 	bl	8001300 <MCI_GetIqdref>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	8063      	strh	r3, [r4, #2]
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 8002e90:	487d      	ldr	r0, [pc, #500]	@ (8003088 <RI_GetRegisterMotor1+0x374>)
            *iqref = (uint16_t)MCI_GetIqdref(pMCIN).q;
 8002e92:	9312      	str	r3, [sp, #72]	@ 0x48
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 8002e94:	f7fe fa34 	bl	8001300 <MCI_GetIqdref>
        *size = (*rawSize) + 2U;
 8002e98:	8823      	ldrh	r3, [r4, #0]
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 8002e9a:	f3c0 400f 	ubfx	r0, r0, #16, #16
        *size = (*rawSize) + 2U;
 8002e9e:	3302      	adds	r3, #2
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 8002ea0:	80a0      	strh	r0, [r4, #4]
        *size = (*rawSize) + 2U;
 8002ea2:	b29b      	uxth	r3, r3
    uint8_t retVal = MCP_CMD_OK;
 8002ea4:	2000      	movs	r0, #0
            break;
 8002ea6:	e773      	b.n	8002d90 <RI_GetRegisterMotor1+0x7c>
 8002ea8:	f5b0 7ff4 	cmp.w	r0, #488	@ 0x1e8
 8002eac:	f040 820f 	bne.w	80032ce <RI_GetRegisterMotor1+0x5ba>
            *rawSize = 4;
 8002eb0:	2304      	movs	r3, #4
 8002eb2:	8023      	strh	r3, [r4, #0]
            *torque = MCI_GetLastRampFinalTorque(pMCIN);
 8002eb4:	4874      	ldr	r0, [pc, #464]	@ (8003088 <RI_GetRegisterMotor1+0x374>)
 8002eb6:	f7fe f9e3 	bl	8001280 <MCI_GetLastRampFinalTorque>
 8002eba:	8060      	strh	r0, [r4, #2]
            *duration = MCI_GetLastRampFinalDuration(pMCIN) ;
 8002ebc:	4872      	ldr	r0, [pc, #456]	@ (8003088 <RI_GetRegisterMotor1+0x374>)
 8002ebe:	f7fe f9e3 	bl	8001288 <MCI_GetLastRampFinalDuration>
        *size = (*rawSize) + 2U;
 8002ec2:	8823      	ldrh	r3, [r4, #0]
            *duration = MCI_GetLastRampFinalDuration(pMCIN) ;
 8002ec4:	80a0      	strh	r0, [r4, #4]
        *size = (*rawSize) + 2U;
 8002ec6:	3302      	adds	r3, #2
 8002ec8:	b29b      	uxth	r3, r3
    uint8_t retVal = MCP_CMD_OK;
 8002eca:	2000      	movs	r0, #0
            break;
 8002ecc:	e760      	b.n	8002d90 <RI_GetRegisterMotor1+0x7c>
 8002ece:	f5b0 7f64 	cmp.w	r0, #912	@ 0x390
 8002ed2:	f040 823b 	bne.w	800334c <RI_GetRegisterMotor1+0x638>
              STO_PLL_GetObserverGains(&STO_PLL_M1, &hC1, &hC2);
 8002ed6:	486d      	ldr	r0, [pc, #436]	@ (800308c <RI_GetRegisterMotor1+0x378>)
 8002ed8:	aa13      	add	r2, sp, #76	@ 0x4c
 8002eda:	a912      	add	r1, sp, #72	@ 0x48
 8002edc:	f004 fc92 	bl	8007804 <STO_PLL_GetObserverGains>
              *regdata16 = hC2;
 8002ee0:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8002ee4:	8023      	strh	r3, [r4, #0]
              break;
 8002ee6:	e066      	b.n	8002fb6 <RI_GetRegisterMotor1+0x2a2>
 8002ee8:	f5b0 7f24 	cmp.w	r0, #656	@ 0x290
 8002eec:	d111      	bne.n	8002f12 <RI_GetRegisterMotor1+0x1fe>
              *regdata16 = PID_GetKP(&PIDIdHandle_M1);
 8002eee:	4868      	ldr	r0, [pc, #416]	@ (8003090 <RI_GetRegisterMotor1+0x37c>)
 8002ef0:	f003 f8c0 	bl	8006074 <PID_GetKP>
 8002ef4:	8020      	strh	r0, [r4, #0]
              break;
 8002ef6:	e05e      	b.n	8002fb6 <RI_GetRegisterMotor1+0x2a2>
 8002ef8:	f5b0 7f88 	cmp.w	r0, #272	@ 0x110
 8002efc:	f000 82af 	beq.w	800345e <RI_GetRegisterMotor1+0x74a>
 8002f00:	d919      	bls.n	8002f36 <RI_GetRegisterMotor1+0x222>
 8002f02:	f5b0 7fc8 	cmp.w	r0, #400	@ 0x190
 8002f06:	d10d      	bne.n	8002f24 <RI_GetRegisterMotor1+0x210>
              *regdata16 = PID_GetKP(&PIDIqHandle_M1);
 8002f08:	4862      	ldr	r0, [pc, #392]	@ (8003094 <RI_GetRegisterMotor1+0x380>)
 8002f0a:	f003 f8b3 	bl	8006074 <PID_GetKP>
 8002f0e:	8020      	strh	r0, [r4, #0]
              break;
 8002f10:	e051      	b.n	8002fb6 <RI_GetRegisterMotor1+0x2a2>
 8002f12:	f5b0 7f34 	cmp.w	r0, #720	@ 0x2d0
 8002f16:	f040 8219 	bne.w	800334c <RI_GetRegisterMotor1+0x638>
              *regdata16 = PID_GetKI(&PIDIdHandle_M1);
 8002f1a:	485d      	ldr	r0, [pc, #372]	@ (8003090 <RI_GetRegisterMotor1+0x37c>)
 8002f1c:	f003 f8ae 	bl	800607c <PID_GetKI>
 8002f20:	8020      	strh	r0, [r4, #0]
              break;
 8002f22:	e048      	b.n	8002fb6 <RI_GetRegisterMotor1+0x2a2>
 8002f24:	f5b0 7fe8 	cmp.w	r0, #464	@ 0x1d0
 8002f28:	f040 8210 	bne.w	800334c <RI_GetRegisterMotor1+0x638>
              *regdata16 = PID_GetKI(&PIDIqHandle_M1);
 8002f2c:	4859      	ldr	r0, [pc, #356]	@ (8003094 <RI_GetRegisterMotor1+0x380>)
 8002f2e:	f003 f8a5 	bl	800607c <PID_GetKI>
 8002f32:	8020      	strh	r0, [r4, #0]
              break;
 8002f34:	e03f      	b.n	8002fb6 <RI_GetRegisterMotor1+0x2a2>
 8002f36:	2890      	cmp	r0, #144	@ 0x90
 8002f38:	d131      	bne.n	8002f9e <RI_GetRegisterMotor1+0x28a>
              *regdata16 = PID_GetKP(&PIDSpeedHandle_M1);
 8002f3a:	4857      	ldr	r0, [pc, #348]	@ (8003098 <RI_GetRegisterMotor1+0x384>)
 8002f3c:	f003 f89a 	bl	8006074 <PID_GetKP>
 8002f40:	8020      	strh	r0, [r4, #0]
              break;
 8002f42:	e038      	b.n	8002fb6 <RI_GetRegisterMotor1+0x2a2>
 8002f44:	f5b0 6f05 	cmp.w	r0, #2128	@ 0x850
 8002f48:	f000 8284 	beq.w	8003454 <RI_GetRegisterMotor1+0x740>
 8002f4c:	f240 80eb 	bls.w	8003126 <RI_GetRegisterMotor1+0x412>
 8002f50:	f5b0 6f11 	cmp.w	r0, #2320	@ 0x910
 8002f54:	f000 8277 	beq.w	8003446 <RI_GetRegisterMotor1+0x732>
 8002f58:	f240 80db 	bls.w	8003112 <RI_GetRegisterMotor1+0x3fe>
 8002f5c:	f5b0 6f15 	cmp.w	r0, #2384	@ 0x950
 8002f60:	f040 81f4 	bne.w	800334c <RI_GetRegisterMotor1+0x638>
              *regdata16 = MCI_GetIqdref(pMCIN).q;
 8002f64:	4848      	ldr	r0, [pc, #288]	@ (8003088 <RI_GetRegisterMotor1+0x374>)
 8002f66:	f7fe f9cb 	bl	8001300 <MCI_GetIqdref>
 8002f6a:	8020      	strh	r0, [r4, #0]
              break;
 8002f6c:	e023      	b.n	8002fb6 <RI_GetRegisterMotor1+0x2a2>
 8002f6e:	f5b0 6f69 	cmp.w	r0, #3728	@ 0xe90
 8002f72:	d020      	beq.n	8002fb6 <RI_GetRegisterMotor1+0x2a2>
 8002f74:	d83c      	bhi.n	8002ff0 <RI_GetRegisterMotor1+0x2dc>
 8002f76:	f5b0 6f39 	cmp.w	r0, #2960	@ 0xb90
 8002f7a:	f000 825f 	beq.w	800343c <RI_GetRegisterMotor1+0x728>
 8002f7e:	d928      	bls.n	8002fd2 <RI_GetRegisterMotor1+0x2be>
 8002f80:	f5b0 6f45 	cmp.w	r0, #3152	@ 0xc50
 8002f84:	f000 8230 	beq.w	80033e8 <RI_GetRegisterMotor1+0x6d4>
 8002f88:	d91b      	bls.n	8002fc2 <RI_GetRegisterMotor1+0x2ae>
 8002f8a:	f5b0 6f49 	cmp.w	r0, #3216	@ 0xc90
 8002f8e:	d10e      	bne.n	8002fae <RI_GetRegisterMotor1+0x29a>
              *regdata16 = STO_PLL_GetEstimatedBemf(&STO_PLL_M1).beta;
 8002f90:	483e      	ldr	r0, [pc, #248]	@ (800308c <RI_GetRegisterMotor1+0x378>)
 8002f92:	f004 fc19 	bl	80077c8 <STO_PLL_GetEstimatedBemf>
 8002f96:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8002f9a:	8023      	strh	r3, [r4, #0]
              break;
 8002f9c:	e00b      	b.n	8002fb6 <RI_GetRegisterMotor1+0x2a2>
 8002f9e:	28d0      	cmp	r0, #208	@ 0xd0
 8002fa0:	f040 81d4 	bne.w	800334c <RI_GetRegisterMotor1+0x638>
              *regdata16 = PID_GetKI(&PIDSpeedHandle_M1);
 8002fa4:	483c      	ldr	r0, [pc, #240]	@ (8003098 <RI_GetRegisterMotor1+0x384>)
 8002fa6:	f003 f869 	bl	800607c <PID_GetKI>
 8002faa:	8020      	strh	r0, [r4, #0]
              break;
 8002fac:	e003      	b.n	8002fb6 <RI_GetRegisterMotor1+0x2a2>
 8002fae:	f5b0 6f65 	cmp.w	r0, #3664	@ 0xe50
 8002fb2:	f040 81cb 	bne.w	800334c <RI_GetRegisterMotor1+0x638>
    uint8_t retVal = MCP_CMD_OK;
 8002fb6:	2000      	movs	r0, #0
          *size = 2;
 8002fb8:	2302      	movs	r3, #2
 8002fba:	802b      	strh	r3, [r5, #0]
  }
 8002fbc:	b016      	add	sp, #88	@ 0x58
 8002fbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002fc2:	f5b0 6f3d 	cmp.w	r0, #3024	@ 0xbd0
 8002fc6:	d128      	bne.n	800301a <RI_GetRegisterMotor1+0x306>
              *regdata16 = STO_PLL_GetEstimatedCurrent(&STO_PLL_M1).alpha;
 8002fc8:	4830      	ldr	r0, [pc, #192]	@ (800308c <RI_GetRegisterMotor1+0x378>)
 8002fca:	f004 fc09 	bl	80077e0 <STO_PLL_GetEstimatedCurrent>
 8002fce:	8020      	strh	r0, [r4, #0]
              break;
 8002fd0:	e7f1      	b.n	8002fb6 <RI_GetRegisterMotor1+0x2a2>
 8002fd2:	f5b0 6f25 	cmp.w	r0, #2640	@ 0xa50
 8002fd6:	f000 8202 	beq.w	80033de <RI_GetRegisterMotor1+0x6ca>
 8002fda:	d97d      	bls.n	80030d8 <RI_GetRegisterMotor1+0x3c4>
 8002fdc:	f5b0 6f29 	cmp.w	r0, #2704	@ 0xa90
 8002fe0:	d171      	bne.n	80030c6 <RI_GetRegisterMotor1+0x3b2>
              *regdata16 = MCI_GetValphabeta(pMCIN).beta;
 8002fe2:	4829      	ldr	r0, [pc, #164]	@ (8003088 <RI_GetRegisterMotor1+0x374>)
 8002fe4:	f7fe f9a8 	bl	8001338 <MCI_GetValphabeta>
 8002fe8:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8002fec:	8023      	strh	r3, [r4, #0]
              break;
 8002fee:	e7e2      	b.n	8002fb6 <RI_GetRegisterMotor1+0x2a2>
 8002ff0:	f241 5390 	movw	r3, #5520	@ 0x1590
 8002ff4:	4298      	cmp	r0, r3
 8002ff6:	f000 81ed 	beq.w	80033d4 <RI_GetRegisterMotor1+0x6c0>
 8002ffa:	d92c      	bls.n	8003056 <RI_GetRegisterMotor1+0x342>
 8002ffc:	f241 6350 	movw	r3, #5712	@ 0x1650
 8003000:	4298      	cmp	r0, r3
 8003002:	f000 8200 	beq.w	8003406 <RI_GetRegisterMotor1+0x6f2>
 8003006:	d91d      	bls.n	8003044 <RI_GetRegisterMotor1+0x330>
 8003008:	f641 03d0 	movw	r3, #6352	@ 0x18d0
 800300c:	4298      	cmp	r0, r3
 800300e:	d10f      	bne.n	8003030 <RI_GetRegisterMotor1+0x31c>
              *regdataU16 = PID_GetKIDivisorPOW2(&(&STO_PLL_M1)->PIRegulator);
 8003010:	4822      	ldr	r0, [pc, #136]	@ (800309c <RI_GetRegisterMotor1+0x388>)
 8003012:	f003 f843 	bl	800609c <PID_GetKIDivisorPOW2>
 8003016:	8020      	strh	r0, [r4, #0]
              break;
 8003018:	e7cd      	b.n	8002fb6 <RI_GetRegisterMotor1+0x2a2>
 800301a:	f5b0 6f41 	cmp.w	r0, #3088	@ 0xc10
 800301e:	f040 8195 	bne.w	800334c <RI_GetRegisterMotor1+0x638>
              *regdata16 = STO_PLL_GetEstimatedCurrent(&STO_PLL_M1).beta;
 8003022:	481a      	ldr	r0, [pc, #104]	@ (800308c <RI_GetRegisterMotor1+0x378>)
 8003024:	f004 fbdc 	bl	80077e0 <STO_PLL_GetEstimatedCurrent>
 8003028:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800302c:	8023      	strh	r3, [r4, #0]
              break;
 800302e:	e7c2      	b.n	8002fb6 <RI_GetRegisterMotor1+0x2a2>
 8003030:	f641 1310 	movw	r3, #6416	@ 0x1910
 8003034:	4298      	cmp	r0, r3
 8003036:	f040 8189 	bne.w	800334c <RI_GetRegisterMotor1+0x638>
              *regdataU16 = PID_GetKPDivisorPOW2(&(&STO_PLL_M1)->PIRegulator);
 800303a:	4818      	ldr	r0, [pc, #96]	@ (800309c <RI_GetRegisterMotor1+0x388>)
 800303c:	f003 f824 	bl	8006088 <PID_GetKPDivisorPOW2>
 8003040:	8020      	strh	r0, [r4, #0]
              break;
 8003042:	e7b8      	b.n	8002fb6 <RI_GetRegisterMotor1+0x2a2>
 8003044:	f241 53d0 	movw	r3, #5584	@ 0x15d0
 8003048:	4298      	cmp	r0, r3
 800304a:	d113      	bne.n	8003074 <RI_GetRegisterMotor1+0x360>
              *regdataU16 = PID_GetKPDivisorPOW2(&PIDIqHandle_M1);
 800304c:	4811      	ldr	r0, [pc, #68]	@ (8003094 <RI_GetRegisterMotor1+0x380>)
 800304e:	f003 f81b 	bl	8006088 <PID_GetKPDivisorPOW2>
 8003052:	8020      	strh	r0, [r4, #0]
              break;
 8003054:	e7af      	b.n	8002fb6 <RI_GetRegisterMotor1+0x2a2>
 8003056:	f241 43d0 	movw	r3, #5328	@ 0x14d0
 800305a:	4298      	cmp	r0, r3
 800305c:	f000 81ce 	beq.w	80033fc <RI_GetRegisterMotor1+0x6e8>
 8003060:	d928      	bls.n	80030b4 <RI_GetRegisterMotor1+0x3a0>
 8003062:	f241 5310 	movw	r3, #5392	@ 0x1510
 8003066:	4298      	cmp	r0, r3
 8003068:	d11a      	bne.n	80030a0 <RI_GetRegisterMotor1+0x38c>
              *regdataU16 = PID_GetKPDivisorPOW2(&PIDIdHandle_M1);
 800306a:	4809      	ldr	r0, [pc, #36]	@ (8003090 <RI_GetRegisterMotor1+0x37c>)
 800306c:	f003 f80c 	bl	8006088 <PID_GetKPDivisorPOW2>
 8003070:	8020      	strh	r0, [r4, #0]
              break;
 8003072:	e7a0      	b.n	8002fb6 <RI_GetRegisterMotor1+0x2a2>
 8003074:	f241 6310 	movw	r3, #5648	@ 0x1610
 8003078:	4298      	cmp	r0, r3
 800307a:	f040 8167 	bne.w	800334c <RI_GetRegisterMotor1+0x638>
              *regdataU16 = PID_GetKIDivisorPOW2(&PIDIqHandle_M1);
 800307e:	4805      	ldr	r0, [pc, #20]	@ (8003094 <RI_GetRegisterMotor1+0x380>)
 8003080:	f003 f80c 	bl	800609c <PID_GetKIDivisorPOW2>
 8003084:	8020      	strh	r0, [r4, #0]
              break;
 8003086:	e796      	b.n	8002fb6 <RI_GetRegisterMotor1+0x2a2>
 8003088:	20000584 	.word	0x20000584
 800308c:	20000088 	.word	0x20000088
 8003090:	20000338 	.word	0x20000338
 8003094:	20000364 	.word	0x20000364
 8003098:	20000390 	.word	0x20000390
 800309c:	200000bc 	.word	0x200000bc
 80030a0:	f241 5350 	movw	r3, #5456	@ 0x1550
 80030a4:	4298      	cmp	r0, r3
 80030a6:	f040 8151 	bne.w	800334c <RI_GetRegisterMotor1+0x638>
              *regdataU16 = PID_GetKIDivisorPOW2(&PIDIdHandle_M1);
 80030aa:	48b0      	ldr	r0, [pc, #704]	@ (800336c <RI_GetRegisterMotor1+0x658>)
 80030ac:	f002 fff6 	bl	800609c <PID_GetKIDivisorPOW2>
 80030b0:	8020      	strh	r0, [r4, #0]
              break;
 80030b2:	e780      	b.n	8002fb6 <RI_GetRegisterMotor1+0x2a2>
 80030b4:	f241 4350 	movw	r3, #5200	@ 0x1450
 80030b8:	4298      	cmp	r0, r3
 80030ba:	d115      	bne.n	80030e8 <RI_GetRegisterMotor1+0x3d4>
              *regdataU16 = (uint16_t)PID_GetKPDivisorPOW2(&PIDSpeedHandle_M1);
 80030bc:	48ac      	ldr	r0, [pc, #688]	@ (8003370 <RI_GetRegisterMotor1+0x65c>)
 80030be:	f002 ffe3 	bl	8006088 <PID_GetKPDivisorPOW2>
 80030c2:	8020      	strh	r0, [r4, #0]
              break;
 80030c4:	e777      	b.n	8002fb6 <RI_GetRegisterMotor1+0x2a2>
 80030c6:	f5b0 6f35 	cmp.w	r0, #2896	@ 0xb50
 80030ca:	f040 813f 	bne.w	800334c <RI_GetRegisterMotor1+0x638>
              *regdata16 = SPD_GetElAngle((SpeednPosFdbk_Handle_t *)&STO_PLL_M1);
 80030ce:	48a9      	ldr	r0, [pc, #676]	@ (8003374 <RI_GetRegisterMotor1+0x660>)
 80030d0:	f003 ffe6 	bl	80070a0 <SPD_GetElAngle>
 80030d4:	8020      	strh	r0, [r4, #0]
              break;
 80030d6:	e76e      	b.n	8002fb6 <RI_GetRegisterMotor1+0x2a2>
 80030d8:	f5b0 6f1d 	cmp.w	r0, #2512	@ 0x9d0
 80030dc:	d10e      	bne.n	80030fc <RI_GetRegisterMotor1+0x3e8>
              *regdata16 = MCI_GetVqd(pMCIN).q;
 80030de:	48a6      	ldr	r0, [pc, #664]	@ (8003378 <RI_GetRegisterMotor1+0x664>)
 80030e0:	f7fe f91c 	bl	800131c <MCI_GetVqd>
 80030e4:	8020      	strh	r0, [r4, #0]
              break;
 80030e6:	e766      	b.n	8002fb6 <RI_GetRegisterMotor1+0x2a2>
 80030e8:	f241 4390 	movw	r3, #5264	@ 0x1490
 80030ec:	4298      	cmp	r0, r3
 80030ee:	f040 812d 	bne.w	800334c <RI_GetRegisterMotor1+0x638>
              *regdataU16 = (uint16_t)PID_GetKIDivisorPOW2(&PIDSpeedHandle_M1);
 80030f2:	489f      	ldr	r0, [pc, #636]	@ (8003370 <RI_GetRegisterMotor1+0x65c>)
 80030f4:	f002 ffd2 	bl	800609c <PID_GetKIDivisorPOW2>
 80030f8:	8020      	strh	r0, [r4, #0]
              break;
 80030fa:	e75c      	b.n	8002fb6 <RI_GetRegisterMotor1+0x2a2>
 80030fc:	f5b0 6f21 	cmp.w	r0, #2576	@ 0xa10
 8003100:	f040 8124 	bne.w	800334c <RI_GetRegisterMotor1+0x638>
              *regdata16 = MCI_GetVqd(pMCIN).d;
 8003104:	489c      	ldr	r0, [pc, #624]	@ (8003378 <RI_GetRegisterMotor1+0x664>)
 8003106:	f7fe f909 	bl	800131c <MCI_GetVqd>
 800310a:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800310e:	8023      	strh	r3, [r4, #0]
              break;
 8003110:	e751      	b.n	8002fb6 <RI_GetRegisterMotor1+0x2a2>
 8003112:	f5b0 6f09 	cmp.w	r0, #2192	@ 0x890
 8003116:	d113      	bne.n	8003140 <RI_GetRegisterMotor1+0x42c>
              *regdata16 = MCI_GetIalphabeta(pMCIN).beta;
 8003118:	4897      	ldr	r0, [pc, #604]	@ (8003378 <RI_GetRegisterMotor1+0x664>)
 800311a:	f7fe f8d5 	bl	80012c8 <MCI_GetIalphabeta>
 800311e:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8003122:	8023      	strh	r3, [r4, #0]
              break;
 8003124:	e747      	b.n	8002fb6 <RI_GetRegisterMotor1+0x2a2>
 8003126:	f5b0 6fba 	cmp.w	r0, #1488	@ 0x5d0
 800312a:	f000 8162 	beq.w	80033f2 <RI_GetRegisterMotor1+0x6de>
 800312e:	d91b      	bls.n	8003168 <RI_GetRegisterMotor1+0x454>
 8003130:	f5b0 6ffa 	cmp.w	r0, #2000	@ 0x7d0
 8003134:	d10d      	bne.n	8003152 <RI_GetRegisterMotor1+0x43e>
              *regdata16 = MCI_GetIab(pMCIN).a;
 8003136:	4890      	ldr	r0, [pc, #576]	@ (8003378 <RI_GetRegisterMotor1+0x664>)
 8003138:	f7fe f8b8 	bl	80012ac <MCI_GetIab>
 800313c:	8020      	strh	r0, [r4, #0]
              break;
 800313e:	e73a      	b.n	8002fb6 <RI_GetRegisterMotor1+0x2a2>
 8003140:	f5b0 6f0d 	cmp.w	r0, #2256	@ 0x8d0
 8003144:	f040 8102 	bne.w	800334c <RI_GetRegisterMotor1+0x638>
              *regdata16 = MCI_GetIqd(pMCIN).q;
 8003148:	488b      	ldr	r0, [pc, #556]	@ (8003378 <RI_GetRegisterMotor1+0x664>)
 800314a:	f7fe f8cb 	bl	80012e4 <MCI_GetIqd>
 800314e:	8020      	strh	r0, [r4, #0]
              break;
 8003150:	e731      	b.n	8002fb6 <RI_GetRegisterMotor1+0x2a2>
 8003152:	f5b0 6f01 	cmp.w	r0, #2064	@ 0x810
 8003156:	f040 80f9 	bne.w	800334c <RI_GetRegisterMotor1+0x638>
              *regdata16 = MCI_GetIab(pMCIN).b;
 800315a:	4887      	ldr	r0, [pc, #540]	@ (8003378 <RI_GetRegisterMotor1+0x664>)
 800315c:	f7fe f8a6 	bl	80012ac <MCI_GetIab>
 8003160:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8003164:	8023      	strh	r3, [r4, #0]
              break;
 8003166:	e726      	b.n	8002fb6 <RI_GetRegisterMotor1+0x2a2>
 8003168:	f5b0 6f92 	cmp.w	r0, #1168	@ 0x490
 800316c:	d104      	bne.n	8003178 <RI_GetRegisterMotor1+0x464>
              *regdata16 = PID_GetKP (&(&STO_PLL_M1)->PIRegulator);
 800316e:	4883      	ldr	r0, [pc, #524]	@ (800337c <RI_GetRegisterMotor1+0x668>)
 8003170:	f002 ff80 	bl	8006074 <PID_GetKP>
 8003174:	8020      	strh	r0, [r4, #0]
              break;
 8003176:	e71e      	b.n	8002fb6 <RI_GetRegisterMotor1+0x2a2>
 8003178:	f5b0 6fb2 	cmp.w	r0, #1424	@ 0x590
 800317c:	f040 80e6 	bne.w	800334c <RI_GetRegisterMotor1+0x638>
              *regdataU16 = VBS_GetAvBusVoltage_V(BusVoltageSensor);
 8003180:	487f      	ldr	r0, [pc, #508]	@ (8003380 <RI_GetRegisterMotor1+0x66c>)
 8003182:	f002 fdad 	bl	8005ce0 <VBS_GetAvBusVoltage_V>
 8003186:	8020      	strh	r0, [r4, #0]
              break;
 8003188:	e715      	b.n	8002fb6 <RI_GetRegisterMotor1+0x2a2>
 800318a:	f5b0 7f8c 	cmp.w	r0, #280	@ 0x118
 800318e:	f000 80c8 	beq.w	8003322 <RI_GetRegisterMotor1+0x60e>
 8003192:	f641 3358 	movw	r3, #7000	@ 0x1b58
 8003196:	4298      	cmp	r0, r3
 8003198:	d163      	bne.n	8003262 <RI_GetRegisterMotor1+0x54e>
              ReadVal.Float_Val = PQD_GetAvrgElMotorPowerW(pMPM[M1]);
 800319a:	4b7a      	ldr	r3, [pc, #488]	@ (8003384 <RI_GetRegisterMotor1+0x670>)
 800319c:	6818      	ldr	r0, [r3, #0]
 800319e:	f003 f805 	bl	80061ac <PQD_GetAvrgElMotorPowerW>
 80031a2:	ed8d 0a01 	vstr	s0, [sp, #4]
              *regdataU32 = ReadVal.U32_Val; //cstat !UNION-type-punning
 80031a6:	9b01      	ldr	r3, [sp, #4]
 80031a8:	6023      	str	r3, [r4, #0]
              break;
 80031aa:	e61e      	b.n	8002dea <RI_GetRegisterMotor1+0xd6>
 80031ac:	2818      	cmp	r0, #24
 80031ae:	d158      	bne.n	8003262 <RI_GetRegisterMotor1+0x54e>
              *regdataU32 = MCI_GetFaultState(pMCIN);
 80031b0:	4871      	ldr	r0, [pc, #452]	@ (8003378 <RI_GetRegisterMotor1+0x664>)
 80031b2:	f7fe f835 	bl	8001220 <MCI_GetFaultState>
 80031b6:	6020      	str	r0, [r4, #0]
              break;
 80031b8:	e617      	b.n	8002dea <RI_GetRegisterMotor1+0xd6>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 80031ba:	2008      	movs	r0, #8
  }
 80031bc:	b016      	add	sp, #88	@ 0x58
 80031be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            retVal = RI_MovString (MotorConfig_reg[motorID]->name ,charData, size, freeSpace);
 80031c2:	4b71      	ldr	r3, [pc, #452]	@ (8003388 <RI_GetRegisterMotor1+0x674>)
 80031c4:	681a      	ldr	r2, [r3, #0]
  *size= 1U ; /* /0 is the min String size */
 80031c6:	2301      	movs	r3, #1
 80031c8:	802b      	strh	r3, [r5, #0]
            retVal = RI_MovString (MotorConfig_reg[motorID]->name ,charData, size, freeSpace);
 80031ca:	f102 0124 	add.w	r1, r2, #36	@ 0x24
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80031ce:	f992 2024 	ldrsb.w	r2, [r2, #36]	@ 0x24
 80031d2:	b17a      	cbz	r2, 80031f4 <RI_GetRegisterMotor1+0x4e0>
 80031d4:	fa1f fc8c 	uxth.w	ip, ip
 80031d8:	e008      	b.n	80031ec <RI_GetRegisterMotor1+0x4d8>
    *tempdestString = *tempsrcString;
 80031da:	f804 2b01 	strb.w	r2, [r4], #1
    *size = *size + 1U;
 80031de:	882b      	ldrh	r3, [r5, #0]
 80031e0:	3301      	adds	r3, #1
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	802b      	strh	r3, [r5, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80031e6:	f911 2f01 	ldrsb.w	r2, [r1, #1]!
 80031ea:	b11a      	cbz	r2, 80031f4 <RI_GetRegisterMotor1+0x4e0>
 80031ec:	459c      	cmp	ip, r3
 80031ee:	d8f4      	bhi.n	80031da <RI_GetRegisterMotor1+0x4c6>
    retVal = MCP_ERROR_STRING_FORMAT;
 80031f0:	2006      	movs	r0, #6
 80031f2:	e5ae      	b.n	8002d52 <RI_GetRegisterMotor1+0x3e>
    *tempdestString = (int8_t)0;
 80031f4:	2300      	movs	r3, #0
 80031f6:	7023      	strb	r3, [r4, #0]
  uint8_t retVal = MCP_CMD_OK;
 80031f8:	2000      	movs	r0, #0
 80031fa:	e5aa      	b.n	8002d52 <RI_GetRegisterMotor1+0x3e>
            retVal = RI_MovString (PWR_BOARD_NAME[motorID], charData, size, freeSpace);
 80031fc:	4a63      	ldr	r2, [pc, #396]	@ (800338c <RI_GetRegisterMotor1+0x678>)
  *size= 1U ; /* /0 is the min String size */
 80031fe:	2301      	movs	r3, #1
            retVal = RI_MovString (PWR_BOARD_NAME[motorID], charData, size, freeSpace);
 8003200:	6811      	ldr	r1, [r2, #0]
  *size= 1U ; /* /0 is the min String size */
 8003202:	802b      	strh	r3, [r5, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8003204:	f991 2000 	ldrsb.w	r2, [r1]
 8003208:	2a00      	cmp	r2, #0
 800320a:	d0f3      	beq.n	80031f4 <RI_GetRegisterMotor1+0x4e0>
 800320c:	fa1f fc8c 	uxth.w	ip, ip
 8003210:	e009      	b.n	8003226 <RI_GetRegisterMotor1+0x512>
    *tempdestString = *tempsrcString;
 8003212:	f804 2b01 	strb.w	r2, [r4], #1
    *size = *size + 1U;
 8003216:	882b      	ldrh	r3, [r5, #0]
 8003218:	3301      	adds	r3, #1
 800321a:	b29b      	uxth	r3, r3
 800321c:	802b      	strh	r3, [r5, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 800321e:	f911 2f01 	ldrsb.w	r2, [r1, #1]!
 8003222:	2a00      	cmp	r2, #0
 8003224:	d0e6      	beq.n	80031f4 <RI_GetRegisterMotor1+0x4e0>
 8003226:	459c      	cmp	ip, r3
 8003228:	d8f3      	bhi.n	8003212 <RI_GetRegisterMotor1+0x4fe>
 800322a:	e7e1      	b.n	80031f0 <RI_GetRegisterMotor1+0x4dc>
              memcpy(rawData, &scaleParams_M1, sizeof(ScaleParams_t) );
 800322c:	4a58      	ldr	r2, [pc, #352]	@ (8003390 <RI_GetRegisterMotor1+0x67c>)
 800322e:	6850      	ldr	r0, [r2, #4]
 8003230:	6814      	ldr	r4, [r2, #0]
 8003232:	6891      	ldr	r1, [r2, #8]
 8003234:	68d2      	ldr	r2, [r2, #12]
 8003236:	60da      	str	r2, [r3, #12]
 8003238:	6058      	str	r0, [r3, #4]
 800323a:	601c      	str	r4, [r3, #0]
 800323c:	6099      	str	r1, [r3, #8]
    uint8_t retVal = MCP_CMD_OK;
 800323e:	2000      	movs	r0, #0
              memcpy(rawData, &scaleParams_M1, sizeof(ScaleParams_t) );
 8003240:	230e      	movs	r3, #14
 8003242:	e5a5      	b.n	8002d90 <RI_GetRegisterMotor1+0x7c>
              ApplicationConfig_reg_t const *pApplicationConfig_reg = ApplicationConfig_reg[motorID];
 8003244:	4a53      	ldr	r2, [pc, #332]	@ (8003394 <RI_GetRegisterMotor1+0x680>)
              (void)memcpy(rawData, (const uint8_t *)pApplicationConfig_reg, sizeof(ApplicationConfig_reg_t));
 8003246:	6812      	ldr	r2, [r2, #0]
 8003248:	6850      	ldr	r0, [r2, #4]
 800324a:	6814      	ldr	r4, [r2, #0]
 800324c:	6891      	ldr	r1, [r2, #8]
 800324e:	68d2      	ldr	r2, [r2, #12]
 8003250:	60da      	str	r2, [r3, #12]
 8003252:	6058      	str	r0, [r3, #4]
 8003254:	601c      	str	r4, [r3, #0]
 8003256:	6099      	str	r1, [r3, #8]
    uint8_t retVal = MCP_CMD_OK;
 8003258:	2000      	movs	r0, #0
              (void)memcpy(rawData, (const uint8_t *)pApplicationConfig_reg, sizeof(ApplicationConfig_reg_t));
 800325a:	2312      	movs	r3, #18
 800325c:	e598      	b.n	8002d90 <RI_GetRegisterMotor1+0x7c>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 800325e:	4608      	mov	r0, r1
 8003260:	e577      	b.n	8002d52 <RI_GetRegisterMotor1+0x3e>
 8003262:	2005      	movs	r0, #5
 8003264:	e5c2      	b.n	8002dec <RI_GetRegisterMotor1+0xd8>
              *data = (uint8_t)MCI_GetControlMode(pMCIN);
 8003266:	4844      	ldr	r0, [pc, #272]	@ (8003378 <RI_GetRegisterMotor1+0x664>)
 8003268:	f7fd ffe0 	bl	800122c <MCI_GetControlMode>
 800326c:	7020      	strb	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 800326e:	2000      	movs	r0, #0
 8003270:	e5a0      	b.n	8002db4 <RI_GetRegisterMotor1+0xa0>
              *data = (uint8_t)MCI_GetSTMState(pMCIN);
 8003272:	4841      	ldr	r0, [pc, #260]	@ (8003378 <RI_GetRegisterMotor1+0x664>)
 8003274:	f7fd ff86 	bl	8001184 <MCI_GetSTMState>
              break;
 8003278:	e7f8      	b.n	800326c <RI_GetRegisterMotor1+0x558>
              *data = (uint8_t)RUC_GetNumberOfPhases(&RevUpControlM1);
 800327a:	4847      	ldr	r0, [pc, #284]	@ (8003398 <RI_GetRegisterMotor1+0x684>)
 800327c:	f003 fefc 	bl	8007078 <RUC_GetNumberOfPhases>
              break;
 8003280:	e7f4      	b.n	800326c <RI_GetRegisterMotor1+0x558>
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8003282:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = (uint16_t)RUC_MAX_PHASE_NUMBER*8U;
 8003286:	2328      	movs	r3, #40	@ 0x28
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8003288:	f1bc 0f29 	cmp.w	ip, #41	@ 0x29
            *rawSize = (uint16_t)RUC_MAX_PHASE_NUMBER*8U;
 800328c:	8023      	strh	r3, [r4, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 800328e:	d95a      	bls.n	8003346 <RI_GetRegisterMotor1+0x632>
                (void)RUC_GetPhase( &RevUpControlM1 ,i, &revUpPhase);
 8003290:	f8df 8104 	ldr.w	r8, [pc, #260]	@ 8003398 <RI_GetRegisterMotor1+0x684>
 8003294:	4627      	mov	r7, r4
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8003296:	2600      	movs	r6, #0
                (void)RUC_GetPhase( &RevUpControlM1 ,i, &revUpPhase);
 8003298:	b2f1      	uxtb	r1, r6
 800329a:	aa13      	add	r2, sp, #76	@ 0x4c
 800329c:	4640      	mov	r0, r8
 800329e:	f003 feef 	bl	8007080 <RUC_GetPhase>
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 80032a2:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	@ 0x4e
 80032a6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80032aa:	005b      	lsls	r3, r3, #1
 80032ac:	f8c7 3002 	str.w	r3, [r7, #2]
              for (i = 0; i <RUC_MAX_PHASE_NUMBER; i++)
 80032b0:	3601      	adds	r6, #1
                *finalTorque = (uint16_t)revUpPhase.hFinalTorque; //cstat !MISRAC2012-Rule-11.3
 80032b2:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 80032b6:	80fb      	strh	r3, [r7, #6]
              for (i = 0; i <RUC_MAX_PHASE_NUMBER; i++)
 80032b8:	2e05      	cmp	r6, #5
                *durationms  = revUpPhase.hDurationms;
 80032ba:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 80032be:	f827 3f08 	strh.w	r3, [r7, #8]!
              for (i = 0; i <RUC_MAX_PHASE_NUMBER; i++)
 80032c2:	d1e9      	bne.n	8003298 <RI_GetRegisterMotor1+0x584>
        *size = (*rawSize) + 2U;
 80032c4:	8823      	ldrh	r3, [r4, #0]
 80032c6:	3302      	adds	r3, #2
    uint8_t retVal = MCP_CMD_OK;
 80032c8:	2000      	movs	r0, #0
        *size = (*rawSize) + 2U;
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	e560      	b.n	8002d90 <RI_GetRegisterMotor1+0x7c>
 80032ce:	8823      	ldrh	r3, [r4, #0]
 80032d0:	3302      	adds	r3, #2
            retVal = MCP_ERROR_UNKNOWN_REG;
 80032d2:	2005      	movs	r0, #5
        *size = (*rawSize) + 2U;
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	e55b      	b.n	8002d90 <RI_GetRegisterMotor1+0x7c>
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 80032d8:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = (uint16_t)sizeof(FOCFwConfig_reg_t);
 80032dc:	220e      	movs	r2, #14
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 80032de:	f1bc 0f0f 	cmp.w	ip, #15
            *rawSize = (uint16_t)sizeof(FOCFwConfig_reg_t);
 80032e2:	8022      	strh	r2, [r4, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 80032e4:	d834      	bhi.n	8003350 <RI_GetRegisterMotor1+0x63c>
 80032e6:	2310      	movs	r3, #16
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 80032e8:	2008      	movs	r0, #8
 80032ea:	e551      	b.n	8002d90 <RI_GetRegisterMotor1+0x7c>
            *rpm = (((int32_t)MCI_GetLastRampFinalSpeed(pMCIN) * U_RPM) / (int32_t)SPEED_UNIT);
 80032ec:	4822      	ldr	r0, [pc, #136]	@ (8003378 <RI_GetRegisterMotor1+0x664>)
 80032ee:	f7fd ffc3 	bl	8001278 <MCI_GetLastRampFinalSpeed>
 80032f2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80032f6:	0043      	lsls	r3, r0, #1
 80032f8:	f8c4 3002 	str.w	r3, [r4, #2]
            *duration = MCI_GetLastRampFinalDuration(pMCIN);
 80032fc:	481e      	ldr	r0, [pc, #120]	@ (8003378 <RI_GetRegisterMotor1+0x664>)
 80032fe:	f7fd ffc3 	bl	8001288 <MCI_GetLastRampFinalDuration>
            *rawSize = 6;
 8003302:	2306      	movs	r3, #6
            *duration = MCI_GetLastRampFinalDuration(pMCIN);
 8003304:	80e0      	strh	r0, [r4, #6]
            *rawSize = 6;
 8003306:	8023      	strh	r3, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8003308:	2000      	movs	r0, #0
            break;
 800330a:	2308      	movs	r3, #8
 800330c:	e540      	b.n	8002d90 <RI_GetRegisterMotor1+0x7c>
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 800330e:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = (uint16_t)sizeof(MotorConfig_reg_t);
 8003312:	223c      	movs	r2, #60	@ 0x3c
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8003314:	f1bc 0f3d 	cmp.w	ip, #61	@ 0x3d
            *rawSize = (uint16_t)sizeof(MotorConfig_reg_t);
 8003318:	8022      	strh	r2, [r4, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 800331a:	d841      	bhi.n	80033a0 <RI_GetRegisterMotor1+0x68c>
 800331c:	233e      	movs	r3, #62	@ 0x3e
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 800331e:	2008      	movs	r0, #8
 8003320:	e536      	b.n	8002d90 <RI_GetRegisterMotor1+0x7c>
              *regdata32 = STO_PLL_GetObservedBemfLevel(&STO_PLL_M1);
 8003322:	4814      	ldr	r0, [pc, #80]	@ (8003374 <RI_GetRegisterMotor1+0x660>)
 8003324:	f004 fa88 	bl	8007838 <STO_PLL_GetObservedBemfLevel>
 8003328:	6020      	str	r0, [r4, #0]
              break;
 800332a:	e55e      	b.n	8002dea <RI_GetRegisterMotor1+0xd6>
              *regdata32 = (((int32_t)MCI_GetAvrgMecSpeedUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 800332c:	4812      	ldr	r0, [pc, #72]	@ (8003378 <RI_GetRegisterMotor1+0x664>)
 800332e:	f7fd ffb1 	bl	8001294 <MCI_GetAvrgMecSpeedUnit>
 8003332:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003336:	0040      	lsls	r0, r0, #1
 8003338:	6020      	str	r0, [r4, #0]
              break;
 800333a:	e556      	b.n	8002dea <RI_GetRegisterMotor1+0xd6>
              *regdata32 = STO_PLL_GetEstimatedBemfLevel(&STO_PLL_M1);
 800333c:	480d      	ldr	r0, [pc, #52]	@ (8003374 <RI_GetRegisterMotor1+0x660>)
 800333e:	f004 fa77 	bl	8007830 <STO_PLL_GetEstimatedBemfLevel>
 8003342:	6020      	str	r0, [r4, #0]
              break;
 8003344:	e551      	b.n	8002dea <RI_GetRegisterMotor1+0xd6>
 8003346:	232a      	movs	r3, #42	@ 0x2a
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8003348:	2008      	movs	r0, #8
            break;
 800334a:	e521      	b.n	8002d90 <RI_GetRegisterMotor1+0x7c>
 800334c:	2005      	movs	r0, #5
 800334e:	e633      	b.n	8002fb8 <RI_GetRegisterMotor1+0x2a4>
              FOCFwConfig_reg_t const *pFOCConfig_reg = FOCConfig_reg[motorID];
 8003350:	4a12      	ldr	r2, [pc, #72]	@ (800339c <RI_GetRegisterMotor1+0x688>)
              (void)memcpy(rawData, (const uint8_t *)pFOCConfig_reg, sizeof(FOCFwConfig_reg_t));
 8003352:	6812      	ldr	r2, [r2, #0]
 8003354:	6810      	ldr	r0, [r2, #0]
 8003356:	6851      	ldr	r1, [r2, #4]
 8003358:	6894      	ldr	r4, [r2, #8]
 800335a:	609c      	str	r4, [r3, #8]
 800335c:	6018      	str	r0, [r3, #0]
 800335e:	6059      	str	r1, [r3, #4]
 8003360:	8992      	ldrh	r2, [r2, #12]
 8003362:	819a      	strh	r2, [r3, #12]
    uint8_t retVal = MCP_CMD_OK;
 8003364:	2000      	movs	r0, #0
              (void)memcpy(rawData, (const uint8_t *)pFOCConfig_reg, sizeof(FOCFwConfig_reg_t));
 8003366:	2310      	movs	r3, #16
 8003368:	e512      	b.n	8002d90 <RI_GetRegisterMotor1+0x7c>
 800336a:	bf00      	nop
 800336c:	20000338 	.word	0x20000338
 8003370:	20000390 	.word	0x20000390
 8003374:	20000088 	.word	0x20000088
 8003378:	20000584 	.word	0x20000584
 800337c:	200000bc 	.word	0x200000bc
 8003380:	2000002c 	.word	0x2000002c
 8003384:	20000000 	.word	0x20000000
 8003388:	200003d0 	.word	0x200003d0
 800338c:	200003d8 	.word	0x200003d8
 8003390:	200003dc 	.word	0x200003dc
 8003394:	200003cc 	.word	0x200003cc
 8003398:	2000028c 	.word	0x2000028c
 800339c:	200003d4 	.word	0x200003d4
              MotorConfig_reg_t const *pMotorConfig_reg = MotorConfig_reg[motorID];
 80033a0:	4a31      	ldr	r2, [pc, #196]	@ (8003468 <RI_GetRegisterMotor1+0x754>)
              (void)memcpy(rawData, (const uint8_t *)pMotorConfig_reg, sizeof(MotorConfig_reg_t));
 80033a2:	6812      	ldr	r2, [r2, #0]
 80033a4:	f102 0730 	add.w	r7, r2, #48	@ 0x30
 80033a8:	6814      	ldr	r4, [r2, #0]
 80033aa:	6850      	ldr	r0, [r2, #4]
 80033ac:	6891      	ldr	r1, [r2, #8]
 80033ae:	68d6      	ldr	r6, [r2, #12]
 80033b0:	60de      	str	r6, [r3, #12]
 80033b2:	3210      	adds	r2, #16
 80033b4:	42ba      	cmp	r2, r7
 80033b6:	601c      	str	r4, [r3, #0]
 80033b8:	6058      	str	r0, [r3, #4]
 80033ba:	6099      	str	r1, [r3, #8]
 80033bc:	f103 0310 	add.w	r3, r3, #16
 80033c0:	d1f2      	bne.n	80033a8 <RI_GetRegisterMotor1+0x694>
 80033c2:	6810      	ldr	r0, [r2, #0]
 80033c4:	6851      	ldr	r1, [r2, #4]
 80033c6:	6892      	ldr	r2, [r2, #8]
 80033c8:	609a      	str	r2, [r3, #8]
 80033ca:	6018      	str	r0, [r3, #0]
 80033cc:	6059      	str	r1, [r3, #4]
    uint8_t retVal = MCP_CMD_OK;
 80033ce:	2000      	movs	r0, #0
              (void)memcpy(rawData, (const uint8_t *)pMotorConfig_reg, sizeof(MotorConfig_reg_t));
 80033d0:	233e      	movs	r3, #62	@ 0x3e
 80033d2:	e4dd      	b.n	8002d90 <RI_GetRegisterMotor1+0x7c>
              *regdataU16 = PID_GetKDDivisorPOW2(&PIDIdHandle_M1);
 80033d4:	4825      	ldr	r0, [pc, #148]	@ (800346c <RI_GetRegisterMotor1+0x758>)
 80033d6:	f002 fe81 	bl	80060dc <PID_GetKDDivisorPOW2>
 80033da:	8020      	strh	r0, [r4, #0]
              break;
 80033dc:	e5eb      	b.n	8002fb6 <RI_GetRegisterMotor1+0x2a2>
              *regdata16 = MCI_GetValphabeta(pMCIN).alpha;
 80033de:	4824      	ldr	r0, [pc, #144]	@ (8003470 <RI_GetRegisterMotor1+0x75c>)
 80033e0:	f7fd ffaa 	bl	8001338 <MCI_GetValphabeta>
 80033e4:	8020      	strh	r0, [r4, #0]
              break;
 80033e6:	e5e6      	b.n	8002fb6 <RI_GetRegisterMotor1+0x2a2>
              *regdata16 = STO_PLL_GetEstimatedBemf(&STO_PLL_M1).alpha;
 80033e8:	4822      	ldr	r0, [pc, #136]	@ (8003474 <RI_GetRegisterMotor1+0x760>)
 80033ea:	f004 f9ed 	bl	80077c8 <STO_PLL_GetEstimatedBemf>
 80033ee:	8020      	strh	r0, [r4, #0]
              break;
 80033f0:	e5e1      	b.n	8002fb6 <RI_GetRegisterMotor1+0x2a2>
              *regdata16 = NTC_GetAvTemp_C(&TempSensor_M1);
 80033f2:	4821      	ldr	r0, [pc, #132]	@ (8003478 <RI_GetRegisterMotor1+0x764>)
 80033f4:	f002 fe20 	bl	8006038 <NTC_GetAvTemp_C>
 80033f8:	8020      	strh	r0, [r4, #0]
              break;
 80033fa:	e5dc      	b.n	8002fb6 <RI_GetRegisterMotor1+0x2a2>
              *regdataU16 = PID_GetKDDivisorPOW2(&PIDSpeedHandle_M1);
 80033fc:	481f      	ldr	r0, [pc, #124]	@ (800347c <RI_GetRegisterMotor1+0x768>)
 80033fe:	f002 fe6d 	bl	80060dc <PID_GetKDDivisorPOW2>
 8003402:	8020      	strh	r0, [r4, #0]
              break;
 8003404:	e5d7      	b.n	8002fb6 <RI_GetRegisterMotor1+0x2a2>
              *regdataU16 = PID_GetKDDivisorPOW2(&PIDIqHandle_M1);
 8003406:	481e      	ldr	r0, [pc, #120]	@ (8003480 <RI_GetRegisterMotor1+0x76c>)
 8003408:	f002 fe68 	bl	80060dc <PID_GetKDDivisorPOW2>
 800340c:	8020      	strh	r0, [r4, #0]
              break;
 800340e:	e5d2      	b.n	8002fb6 <RI_GetRegisterMotor1+0x2a2>
              *regdata16 = PID_GetKD(&PIDIdHandle_M1);
 8003410:	4816      	ldr	r0, [pc, #88]	@ (800346c <RI_GetRegisterMotor1+0x758>)
 8003412:	f002 fe5f 	bl	80060d4 <PID_GetKD>
 8003416:	8020      	strh	r0, [r4, #0]
              break;
 8003418:	e5cd      	b.n	8002fb6 <RI_GetRegisterMotor1+0x2a2>
              *regdata16 = MCI_GetIqdref(pMCIN).d;
 800341a:	4815      	ldr	r0, [pc, #84]	@ (8003470 <RI_GetRegisterMotor1+0x75c>)
 800341c:	f7fd ff70 	bl	8001300 <MCI_GetIqdref>
 8003420:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8003424:	8023      	strh	r3, [r4, #0]
              break;
 8003426:	e5c6      	b.n	8002fb6 <RI_GetRegisterMotor1+0x2a2>
              *regdata16 = PID_GetKD(&PIDIqHandle_M1);
 8003428:	4815      	ldr	r0, [pc, #84]	@ (8003480 <RI_GetRegisterMotor1+0x76c>)
 800342a:	f002 fe53 	bl	80060d4 <PID_GetKD>
 800342e:	8020      	strh	r0, [r4, #0]
              break;
 8003430:	e5c1      	b.n	8002fb6 <RI_GetRegisterMotor1+0x2a2>
              *regdata16 = PID_GetKI (&(&STO_PLL_M1)->PIRegulator);
 8003432:	4814      	ldr	r0, [pc, #80]	@ (8003484 <RI_GetRegisterMotor1+0x770>)
 8003434:	f002 fe22 	bl	800607c <PID_GetKI>
 8003438:	8020      	strh	r0, [r4, #0]
              break;
 800343a:	e5bc      	b.n	8002fb6 <RI_GetRegisterMotor1+0x2a2>
              *regdata16 = SPD_GetS16Speed((SpeednPosFdbk_Handle_t *)&STO_PLL_M1);
 800343c:	480d      	ldr	r0, [pc, #52]	@ (8003474 <RI_GetRegisterMotor1+0x760>)
 800343e:	f003 fe71 	bl	8007124 <SPD_GetS16Speed>
 8003442:	8020      	strh	r0, [r4, #0]
              break;
 8003444:	e5b7      	b.n	8002fb6 <RI_GetRegisterMotor1+0x2a2>
              *regdata16 = MCI_GetIqd(pMCIN).d;
 8003446:	480a      	ldr	r0, [pc, #40]	@ (8003470 <RI_GetRegisterMotor1+0x75c>)
 8003448:	f7fd ff4c 	bl	80012e4 <MCI_GetIqd>
 800344c:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8003450:	8023      	strh	r3, [r4, #0]
              break;
 8003452:	e5b0      	b.n	8002fb6 <RI_GetRegisterMotor1+0x2a2>
              *regdata16 = MCI_GetIalphabeta(pMCIN).alpha;
 8003454:	4806      	ldr	r0, [pc, #24]	@ (8003470 <RI_GetRegisterMotor1+0x75c>)
 8003456:	f7fd ff37 	bl	80012c8 <MCI_GetIalphabeta>
 800345a:	8020      	strh	r0, [r4, #0]
              break;
 800345c:	e5ab      	b.n	8002fb6 <RI_GetRegisterMotor1+0x2a2>
              *regdata16 = PID_GetKD(&PIDSpeedHandle_M1);
 800345e:	4807      	ldr	r0, [pc, #28]	@ (800347c <RI_GetRegisterMotor1+0x768>)
 8003460:	f002 fe38 	bl	80060d4 <PID_GetKD>
 8003464:	8020      	strh	r0, [r4, #0]
              break;
 8003466:	e5a6      	b.n	8002fb6 <RI_GetRegisterMotor1+0x2a2>
 8003468:	200003d0 	.word	0x200003d0
 800346c:	20000338 	.word	0x20000338
 8003470:	20000584 	.word	0x20000584
 8003474:	20000088 	.word	0x20000088
 8003478:	20000058 	.word	0x20000058
 800347c:	20000390 	.word	0x20000390
 8003480:	20000364 	.word	0x20000364
 8003484:	200000bc 	.word	0x200000bc

08003488 <RI_GetIDSize>:
  return (retVal);
}

uint8_t RI_GetIDSize(uint16_t dataID)
{
  uint8_t typeID = ((uint8_t)dataID) & TYPE_MASK;
 8003488:	f000 0038 	and.w	r0, r0, #56	@ 0x38
 800348c:	3808      	subs	r0, #8
 800348e:	b2c0      	uxtb	r0, r0
 8003490:	2810      	cmp	r0, #16
 8003492:	bf9a      	itte	ls
 8003494:	4b01      	ldrls	r3, [pc, #4]	@ (800349c <RI_GetIDSize+0x14>)
 8003496:	5c18      	ldrbls	r0, [r3, r0]
 8003498:	2000      	movhi	r0, #0
      break;
    }
  }

  return (result);
}
 800349a:	4770      	bx	lr
 800349c:	08008ddc 	.word	0x08008ddc

080034a0 <RI_GetPtrReg>:

    MCI_Handle_t *pMCIN = &Mci[0];
    uint16_t regID = dataID & REG_MASK;
    uint8_t typeID = ((uint8_t)dataID) & TYPE_MASK;

    switch (typeID)
 80034a0:	f000 0338 	and.w	r3, r0, #56	@ 0x38
 80034a4:	2b10      	cmp	r3, #16
 80034a6:	d003      	beq.n	80034b0 <RI_GetPtrReg+0x10>
 80034a8:	4a43      	ldr	r2, [pc, #268]	@ (80035b8 <RI_GetPtrReg+0x118>)
      }

      default:
      {
        *dataPtr = &nullData16;
        retVal = MCP_ERROR_UNKNOWN_REG;
 80034aa:	2005      	movs	r0, #5
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 80034ac:	600a      	str	r2, [r1, #0]
    }
#ifdef NULL_PTR_CHECK_REG_INT
  }
#endif
  return (retVal);
}
 80034ae:	4770      	bx	lr
    uint16_t regID = dataID & REG_MASK;
 80034b0:	f020 0007 	bic.w	r0, r0, #7
 80034b4:	f5b0 6f1d 	cmp.w	r0, #2512	@ 0x9d0
 80034b8:	b283      	uxth	r3, r0
 80034ba:	d073      	beq.n	80035a4 <RI_GetPtrReg+0x104>
 80034bc:	d80f      	bhi.n	80034de <RI_GetPtrReg+0x3e>
 80034be:	f5b3 6f0d 	cmp.w	r3, #2256	@ 0x8d0
 80034c2:	d074      	beq.n	80035ae <RI_GetPtrReg+0x10e>
 80034c4:	d824      	bhi.n	8003510 <RI_GetPtrReg+0x70>
 80034c6:	f5b3 6f05 	cmp.w	r3, #2128	@ 0x850
 80034ca:	d058      	beq.n	800357e <RI_GetPtrReg+0xde>
 80034cc:	d915      	bls.n	80034fa <RI_GetPtrReg+0x5a>
 80034ce:	f5b3 6f09 	cmp.w	r3, #2192	@ 0x890
 80034d2:	d1e9      	bne.n	80034a8 <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.beta);
 80034d4:	4b39      	ldr	r3, [pc, #228]	@ (80035bc <RI_GetPtrReg+0x11c>)
 80034d6:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 80034d8:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.beta);
 80034da:	3206      	adds	r2, #6
            break;
 80034dc:	e7e6      	b.n	80034ac <RI_GetPtrReg+0xc>
 80034de:	f5b3 6f35 	cmp.w	r3, #2896	@ 0xb50
 80034e2:	d049      	beq.n	8003578 <RI_GetPtrReg+0xd8>
 80034e4:	d929      	bls.n	800353a <RI_GetPtrReg+0x9a>
 80034e6:	f5b3 6f45 	cmp.w	r3, #3152	@ 0xc50
 80034ea:	d041      	beq.n	8003570 <RI_GetPtrReg+0xd0>
 80034ec:	f5b3 6f49 	cmp.w	r3, #3216	@ 0xc90
 80034f0:	d119      	bne.n	8003526 <RI_GetPtrReg+0x86>
 80034f2:	4a33      	ldr	r2, [pc, #204]	@ (80035c0 <RI_GetPtrReg+0x120>)
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 80034f4:	600a      	str	r2, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 80034f6:	2000      	movs	r0, #0
}
 80034f8:	4770      	bx	lr
 80034fa:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80034fe:	d04d      	beq.n	800359c <RI_GetPtrReg+0xfc>
 8003500:	f5b3 6f01 	cmp.w	r3, #2064	@ 0x810
 8003504:	d1d0      	bne.n	80034a8 <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Iab.b);
 8003506:	4b2d      	ldr	r3, [pc, #180]	@ (80035bc <RI_GetPtrReg+0x11c>)
 8003508:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 800350a:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iab.b);
 800350c:	3202      	adds	r2, #2
            break;
 800350e:	e7cd      	b.n	80034ac <RI_GetPtrReg+0xc>
 8003510:	f5b3 6f15 	cmp.w	r3, #2384	@ 0x950
 8003514:	d038      	beq.n	8003588 <RI_GetPtrReg+0xe8>
 8003516:	f5b3 6f19 	cmp.w	r3, #2448	@ 0x990
 800351a:	d119      	bne.n	8003550 <RI_GetPtrReg+0xb0>
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.d);
 800351c:	4b27      	ldr	r3, [pc, #156]	@ (80035bc <RI_GetPtrReg+0x11c>)
 800351e:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8003520:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.d);
 8003522:	3212      	adds	r2, #18
            break;
 8003524:	e7c2      	b.n	80034ac <RI_GetPtrReg+0xc>
 8003526:	4824      	ldr	r0, [pc, #144]	@ (80035b8 <RI_GetPtrReg+0x118>)
 8003528:	4a26      	ldr	r2, [pc, #152]	@ (80035c4 <RI_GetPtrReg+0x124>)
 800352a:	f5b3 6f39 	cmp.w	r3, #2960	@ 0xb90
 800352e:	bf16      	itet	ne
 8003530:	4602      	movne	r2, r0
 8003532:	2000      	moveq	r0, #0
 8003534:	2005      	movne	r0, #5
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 8003536:	600a      	str	r2, [r1, #0]
}
 8003538:	4770      	bx	lr
 800353a:	f5b3 6f25 	cmp.w	r3, #2640	@ 0xa50
 800353e:	d028      	beq.n	8003592 <RI_GetPtrReg+0xf2>
 8003540:	f5b3 6f29 	cmp.w	r3, #2704	@ 0xa90
 8003544:	d10c      	bne.n	8003560 <RI_GetPtrReg+0xc0>
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.beta);
 8003546:	4b1d      	ldr	r3, [pc, #116]	@ (80035bc <RI_GetPtrReg+0x11c>)
 8003548:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 800354a:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.beta);
 800354c:	321c      	adds	r2, #28
            break;
 800354e:	e7ad      	b.n	80034ac <RI_GetPtrReg+0xc>
 8003550:	f5b3 6f11 	cmp.w	r3, #2320	@ 0x910
 8003554:	d1a8      	bne.n	80034a8 <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Iqd.d);
 8003556:	4b19      	ldr	r3, [pc, #100]	@ (80035bc <RI_GetPtrReg+0x11c>)
 8003558:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 800355a:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqd.d);
 800355c:	320e      	adds	r2, #14
            break;
 800355e:	e7a5      	b.n	80034ac <RI_GetPtrReg+0xc>
 8003560:	f5b3 6f21 	cmp.w	r3, #2576	@ 0xa10
 8003564:	d1a0      	bne.n	80034a8 <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Vqd.d);
 8003566:	4b15      	ldr	r3, [pc, #84]	@ (80035bc <RI_GetPtrReg+0x11c>)
 8003568:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 800356a:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Vqd.d);
 800356c:	3218      	adds	r2, #24
            break;
 800356e:	e79d      	b.n	80034ac <RI_GetPtrReg+0xc>
 8003570:	4a15      	ldr	r2, [pc, #84]	@ (80035c8 <RI_GetPtrReg+0x128>)
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 8003572:	600a      	str	r2, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 8003574:	2000      	movs	r0, #0
}
 8003576:	4770      	bx	lr
 8003578:	4a14      	ldr	r2, [pc, #80]	@ (80035cc <RI_GetPtrReg+0x12c>)
  uint8_t retVal = MCP_CMD_OK;
 800357a:	2000      	movs	r0, #0
 800357c:	e796      	b.n	80034ac <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.alpha);
 800357e:	4b0f      	ldr	r3, [pc, #60]	@ (80035bc <RI_GetPtrReg+0x11c>)
 8003580:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8003582:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.alpha);
 8003584:	3204      	adds	r2, #4
            break;
 8003586:	e791      	b.n	80034ac <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.q);
 8003588:	4b0c      	ldr	r3, [pc, #48]	@ (80035bc <RI_GetPtrReg+0x11c>)
 800358a:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 800358c:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.q);
 800358e:	3210      	adds	r2, #16
            break;
 8003590:	e78c      	b.n	80034ac <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.alpha);
 8003592:	4b0a      	ldr	r3, [pc, #40]	@ (80035bc <RI_GetPtrReg+0x11c>)
 8003594:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8003596:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.alpha);
 8003598:	321a      	adds	r2, #26
            break;
 800359a:	e787      	b.n	80034ac <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 800359c:	4b07      	ldr	r3, [pc, #28]	@ (80035bc <RI_GetPtrReg+0x11c>)
  uint8_t retVal = MCP_CMD_OK;
 800359e:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 80035a0:	685a      	ldr	r2, [r3, #4]
             break;
 80035a2:	e783      	b.n	80034ac <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Vqd.q);
 80035a4:	4b05      	ldr	r3, [pc, #20]	@ (80035bc <RI_GetPtrReg+0x11c>)
 80035a6:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 80035a8:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Vqd.q);
 80035aa:	3216      	adds	r2, #22
            break;
 80035ac:	e77e      	b.n	80034ac <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Iqd.q);
 80035ae:	4b03      	ldr	r3, [pc, #12]	@ (80035bc <RI_GetPtrReg+0x11c>)
 80035b0:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 80035b2:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqd.q);
 80035b4:	320c      	adds	r2, #12
            break;
 80035b6:	e779      	b.n	80034ac <RI_GetPtrReg+0xc>
 80035b8:	20001788 	.word	0x20001788
 80035bc:	20000584 	.word	0x20000584
 80035c0:	200000fa 	.word	0x200000fa
 80035c4:	20000094 	.word	0x20000094
 80035c8:	200000f8 	.word	0x200000f8
 80035cc:	2000008c 	.word	0x2000008c

080035d0 <RCM_RegisterRegConv>:

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80035d0:	4a6c      	ldr	r2, [pc, #432]	@ (8003784 <RCM_RegisterRegConv+0x1b4>)
 80035d2:	6813      	ldr	r3, [r2, #0]
{
 80035d4:	b530      	push	{r4, r5, lr}
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d036      	beq.n	8003648 <RCM_RegisterRegConv+0x78>
        /* Nothing to do */
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault */
      if (RCM_handle_array [i] != 0)
      {
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80035da:	f890 c004 	ldrb.w	ip, [r0, #4]
 80035de:	7919      	ldrb	r1, [r3, #4]
 80035e0:	458c      	cmp	ip, r1
 80035e2:	d01e      	beq.n	8003622 <RCM_RegisterRegConv+0x52>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80035e4:	6854      	ldr	r4, [r2, #4]
 80035e6:	2c00      	cmp	r4, #0
 80035e8:	f000 80ab 	beq.w	8003742 <RCM_RegisterRegConv+0x172>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80035ec:	7921      	ldrb	r1, [r4, #4]
 80035ee:	458c      	cmp	ip, r1
  uint8_t handle = 255U;
 80035f0:	f04f 03ff 	mov.w	r3, #255	@ 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80035f4:	d031      	beq.n	800365a <RCM_RegisterRegConv+0x8a>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80035f6:	6895      	ldr	r5, [r2, #8]
 80035f8:	2d00      	cmp	r5, #0
 80035fa:	f000 808f 	beq.w	800371c <RCM_RegisterRegConv+0x14c>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80035fe:	7929      	ldrb	r1, [r5, #4]
 8003600:	4561      	cmp	r1, ip
 8003602:	d030      	beq.n	8003666 <RCM_RegisterRegConv+0x96>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003604:	68d4      	ldr	r4, [r2, #12]
 8003606:	2c00      	cmp	r4, #0
 8003608:	f000 8096 	beq.w	8003738 <RCM_RegisterRegConv+0x168>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 800360c:	7921      	ldrb	r1, [r4, #4]
 800360e:	4561      	cmp	r1, ip
 8003610:	f000 80a3 	beq.w	800375a <RCM_RegisterRegConv+0x18a>
      {
        /* Nothing to do */
      }
      i++;
    }
    if (handle < RCM_MAX_CONV)
 8003614:	2b03      	cmp	r3, #3
 8003616:	bf88      	it	hi
 8003618:	23ff      	movhi	r3, #255	@ 0xff
 800361a:	f240 80aa 	bls.w	8003772 <RCM_RegisterRegConv+0x1a2>
      /* Nothing to do handle is already set to error value : 255 */
    }
#ifdef NULL_PTR_CHECK_REG_CON_MNG
  }
#endif
  regConv->convHandle = handle;
 800361e:	7303      	strb	r3, [r0, #12]
}
 8003620:	bd30      	pop	{r4, r5, pc}
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8003622:	6801      	ldr	r1, [r0, #0]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4299      	cmp	r1, r3
 8003628:	d023      	beq.n	8003672 <RCM_RegisterRegConv+0xa2>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800362a:	6854      	ldr	r4, [r2, #4]
 800362c:	2c00      	cmp	r4, #0
 800362e:	d1dd      	bne.n	80035ec <RCM_RegisterRegConv+0x1c>
 8003630:	6895      	ldr	r5, [r2, #8]
      i++;
 8003632:	2301      	movs	r3, #1
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003634:	2d00      	cmp	r5, #0
 8003636:	d1e2      	bne.n	80035fe <RCM_RegisterRegConv+0x2e>
 8003638:	68d4      	ldr	r4, [r2, #12]
 800363a:	b1dc      	cbz	r4, 8003674 <RCM_RegisterRegConv+0xa4>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 800363c:	f894 c004 	ldrb.w	ip, [r4, #4]
 8003640:	7905      	ldrb	r5, [r0, #4]
 8003642:	45ac      	cmp	ip, r5
 8003644:	d116      	bne.n	8003674 <RCM_RegisterRegConv+0xa4>
 8003646:	e089      	b.n	800375c <RCM_RegisterRegConv+0x18c>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003648:	6854      	ldr	r4, [r2, #4]
 800364a:	2c00      	cmp	r4, #0
 800364c:	f000 808b 	beq.w	8003766 <RCM_RegisterRegConv+0x196>
 8003650:	f890 c004 	ldrb.w	ip, [r0, #4]
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003654:	7921      	ldrb	r1, [r4, #4]
 8003656:	458c      	cmp	ip, r1
 8003658:	d1cd      	bne.n	80035f6 <RCM_RegisterRegConv+0x26>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 800365a:	6824      	ldr	r4, [r4, #0]
 800365c:	6801      	ldr	r1, [r0, #0]
 800365e:	42a1      	cmp	r1, r4
 8003660:	d1c9      	bne.n	80035f6 <RCM_RegisterRegConv+0x26>
      i++;
 8003662:	2301      	movs	r3, #1
 8003664:	e006      	b.n	8003674 <RCM_RegisterRegConv+0xa4>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8003666:	682c      	ldr	r4, [r5, #0]
 8003668:	6801      	ldr	r1, [r0, #0]
 800366a:	428c      	cmp	r4, r1
 800366c:	d1ca      	bne.n	8003604 <RCM_RegisterRegConv+0x34>
      i++;
 800366e:	2302      	movs	r3, #2
 8003670:	e000      	b.n	8003674 <RCM_RegisterRegConv+0xa4>
    uint8_t i = 0;
 8003672:	2300      	movs	r3, #0
      RCM_handle_array [handle] = regConv;
 8003674:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8003678:	688a      	ldr	r2, [r1, #8]
      RCM_CB_array [handle].cb = NULL; /* If a previous callback was attached, it is cleared */
 800367a:	4c43      	ldr	r4, [pc, #268]	@ (8003788 <RCM_RegisterRegConv+0x1b8>)
 800367c:	2500      	movs	r5, #0
      if (0U == LL_ADC_IsEnabled(regConv->regADC))
 800367e:	07d2      	lsls	r2, r2, #31
      RCM_CB_array [handle].cb = NULL; /* If a previous callback was attached, it is cleared */
 8003680:	f844 5033 	str.w	r5, [r4, r3, lsl #3]
      if (0U == LL_ADC_IsEnabled(regConv->regADC))
 8003684:	d411      	bmi.n	80036aa <RCM_RegisterRegConv+0xda>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOCS(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 8003686:	684a      	ldr	r2, [r1, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 8003688:	f06f 0402 	mvn.w	r4, #2
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 800368c:	f022 0220 	bic.w	r2, r2, #32
 8003690:	604a      	str	r2, [r1, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 8003692:	600c      	str	r4, [r1, #0]
{
  /* Note: on this STM32 series, there is no flag ADC group injected          */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "JEOC" is corresponding to flag "JEOS"               */
  /*       in other STM32 families).                                          */
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8003694:	684a      	ldr	r2, [r1, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8003696:	f06f 0404 	mvn.w	r4, #4
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 800369a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800369e:	604a      	str	r2, [r1, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 80036a0:	600c      	str	r4, [r1, #0]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 80036a2:	688a      	ldr	r2, [r1, #8]
 80036a4:	f042 0201 	orr.w	r2, r2, #1
 80036a8:	608a      	str	r2, [r1, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80036aa:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 80036ac:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80036b0:	62ca      	str	r2, [r1, #44]	@ 0x2c
      LL_ADC_SetChannelSamplingTime (regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 80036b2:	7902      	ldrb	r2, [r0, #4]
 80036b4:	2a09      	cmp	r2, #9
 80036b6:	eb02 0442 	add.w	r4, r2, r2, lsl #1
 80036ba:	d829      	bhi.n	8003710 <RCM_RegisterRegConv+0x140>
 80036bc:	ea42 5204 	orr.w	r2, r2, r4, lsl #20
 80036c0:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 80036c4:	f04f 7400 	mov.w	r4, #33554432	@ 0x2000000
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c8:	f04f 7c00 	mov.w	ip, #33554432	@ 0x2000000
 80036cc:	fa9c fcac 	rbit	ip, ip
 80036d0:	fabc fc8c 	clz	ip, ip
  MODIFY_REG(*preg,
 80036d4:	6885      	ldr	r5, [r0, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 80036d6:	fa24 f40c 	lsr.w	r4, r4, ip
 80036da:	310c      	adds	r1, #12
  MODIFY_REG(*preg,
 80036dc:	f002 72f8 	and.w	r2, r2, #32505856	@ 0x1f00000
 80036e0:	f04f 7cf8 	mov.w	ip, #32505856	@ 0x1f00000
 80036e4:	fa9c fcac 	rbit	ip, ip
  return result;
 80036e8:	fabc fc8c 	clz	ip, ip
 80036ec:	fa22 f20c 	lsr.w	r2, r2, ip
 80036f0:	fa05 fc02 	lsl.w	ip, r5, r2
 80036f4:	f04f 0e07 	mov.w	lr, #7
 80036f8:	f851 5024 	ldr.w	r5, [r1, r4, lsl #2]
 80036fc:	fa0e f202 	lsl.w	r2, lr, r2
 8003700:	ea25 0202 	bic.w	r2, r5, r2
 8003704:	ea4c 0202 	orr.w	r2, ip, r2
 8003708:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
  regConv->convHandle = handle;
 800370c:	7303      	strb	r3, [r0, #12]
}
 800370e:	bd30      	pop	{r4, r5, pc}
      LL_ADC_SetChannelSamplingTime (regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 8003710:	3c1e      	subs	r4, #30
 8003712:	ea42 5204 	orr.w	r2, r2, r4, lsl #20
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8003716:	f002 7400 	and.w	r4, r2, #33554432	@ 0x2000000
 800371a:	e7d5      	b.n	80036c8 <RCM_RegisterRegConv+0xf8>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800371c:	2b04      	cmp	r3, #4
 800371e:	d92a      	bls.n	8003776 <RCM_RegisterRegConv+0x1a6>
 8003720:	68d3      	ldr	r3, [r2, #12]
 8003722:	b353      	cbz	r3, 800377a <RCM_RegisterRegConv+0x1aa>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003724:	7919      	ldrb	r1, [r3, #4]
 8003726:	4561      	cmp	r1, ip
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8003728:	6801      	ldr	r1, [r0, #0]
        if ((RCM_handle_array [i]->channel == regConv->channel)
 800372a:	d1a0      	bne.n	800366e <RCM_RegisterRegConv+0x9e>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 800372c:	681b      	ldr	r3, [r3, #0]
      i++;
 800372e:	4299      	cmp	r1, r3
 8003730:	bf0c      	ite	eq
 8003732:	2303      	moveq	r3, #3
 8003734:	2302      	movne	r3, #2
 8003736:	e79d      	b.n	8003674 <RCM_RegisterRegConv+0xa4>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003738:	2b04      	cmp	r3, #4
 800373a:	6801      	ldr	r1, [r0, #0]
 800373c:	d99a      	bls.n	8003674 <RCM_RegisterRegConv+0xa4>
 800373e:	2303      	movs	r3, #3
 8003740:	e798      	b.n	8003674 <RCM_RegisterRegConv+0xa4>
 8003742:	6895      	ldr	r5, [r2, #8]
      i++;
 8003744:	2301      	movs	r3, #1
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003746:	2d00      	cmp	r5, #0
 8003748:	f47f af59 	bne.w	80035fe <RCM_RegisterRegConv+0x2e>
 800374c:	68d4      	ldr	r4, [r2, #12]
 800374e:	b184      	cbz	r4, 8003772 <RCM_RegisterRegConv+0x1a2>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003750:	7921      	ldrb	r1, [r4, #4]
 8003752:	4561      	cmp	r1, ip
 8003754:	6801      	ldr	r1, [r0, #0]
 8003756:	d18d      	bne.n	8003674 <RCM_RegisterRegConv+0xa4>
 8003758:	e000      	b.n	800375c <RCM_RegisterRegConv+0x18c>
 800375a:	6801      	ldr	r1, [r0, #0]
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 800375c:	6824      	ldr	r4, [r4, #0]
 800375e:	428c      	cmp	r4, r1
 8003760:	f47f af58 	bne.w	8003614 <RCM_RegisterRegConv+0x44>
 8003764:	e7eb      	b.n	800373e <RCM_RegisterRegConv+0x16e>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003766:	6895      	ldr	r5, [r2, #8]
 8003768:	b14d      	cbz	r5, 800377e <RCM_RegisterRegConv+0x1ae>
 800376a:	f890 c004 	ldrb.w	ip, [r0, #4]
    uint8_t i = 0;
 800376e:	4623      	mov	r3, r4
 8003770:	e745      	b.n	80035fe <RCM_RegisterRegConv+0x2e>
 8003772:	6801      	ldr	r1, [r0, #0]
 8003774:	e77e      	b.n	8003674 <RCM_RegisterRegConv+0xa4>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003776:	462b      	mov	r3, r5
 8003778:	e7e8      	b.n	800374c <RCM_RegisterRegConv+0x17c>
 800377a:	6801      	ldr	r1, [r0, #0]
 800377c:	e777      	b.n	800366e <RCM_RegisterRegConv+0x9e>
 800377e:	6801      	ldr	r1, [r0, #0]
    uint8_t i = 0;
 8003780:	462b      	mov	r3, r5
 8003782:	e759      	b.n	8003638 <RCM_RegisterRegConv+0x68>
 8003784:	200017b4 	.word	0x200017b4
 8003788:	20001794 	.word	0x20001794

0800378c <RCM_ExecRegularConv>:
 */
uint16_t RCM_ExecRegularConv (RegConv_t *regConv)
{
  uint16_t retVal;
  uint8_t handle = regConv->convHandle;
  LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 800378c:	4b1a      	ldr	r3, [pc, #104]	@ (80037f8 <RCM_ExecRegularConv+0x6c>)
 800378e:	7b02      	ldrb	r2, [r0, #12]
 8003790:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
                               LL_ADC_REG_RANK_1,
                               __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 8003794:	7913      	ldrb	r3, [r2, #4]
  LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8003796:	6812      	ldr	r2, [r2, #0]
                               __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 8003798:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 800379c:	2b09      	cmp	r3, #9
                               __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 800379e:	bf93      	iteet	ls
 80037a0:	ea43 5301 	orrls.w	r3, r3, r1, lsl #20
 80037a4:	391e      	subhi	r1, #30
  LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 80037a6:	ea43 5301 	orrhi.w	r3, r3, r1, lsl #20
 80037aa:	f043 7300 	orrls.w	r3, r3, #33554432	@ 0x2000000
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ae:	f44f 7140 	mov.w	r1, #768	@ 0x300
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 80037b2:	f102 0c2c 	add.w	ip, r2, #44	@ 0x2c
 80037b6:	fa91 f1a1 	rbit	r1, r1
  if (value == 0U)
 80037ba:	b139      	cbz	r1, 80037cc <RCM_ExecRegularConv+0x40>
  return __builtin_clz(value);
 80037bc:	fab1 f181 	clz	r1, r1
 80037c0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80037c4:	fa20 f101 	lsr.w	r1, r0, r1
 80037c8:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
  MODIFY_REG(*preg,
 80037cc:	f8dc 0000 	ldr.w	r0, [ip]

  (void)LL_ADC_REG_ReadConversionData12(RCM_handle_array[handle]->regADC);

  /* Bit banding access equivalent to LL_ADC_REG_StartConversionSWStart */
  BB_REG_BIT_SET(&RCM_handle_array[handle]->regADC->CR2, ADC_CR2_SWSTART_Pos);
 80037d0:	0151      	lsls	r1, r2, #5
 80037d2:	f020 001f 	bic.w	r0, r0, #31
 80037d6:	f003 031f 	and.w	r3, r3, #31
 80037da:	4303      	orrs	r3, r0
 80037dc:	f101 4184 	add.w	r1, r1, #1107296256	@ 0x42000000
 80037e0:	f8cc 3000 	str.w	r3, [ip]
 80037e4:	2301      	movs	r3, #1
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 80037e6:	6cd0      	ldr	r0, [r2, #76]	@ 0x4c
 80037e8:	f8c1 3178 	str.w	r3, [r1, #376]	@ 0x178
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_EOCS) == (LL_ADC_FLAG_EOCS));
 80037ec:	6813      	ldr	r3, [r2, #0]
  /* Wait until end of regular conversion */
  while (LL_ADC_IsActiveFlag_EOCS(RCM_handle_array[handle]->regADC) == 0u)
 80037ee:	079b      	lsls	r3, r3, #30
 80037f0:	d5fc      	bpl.n	80037ec <RCM_ExecRegularConv+0x60>
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 80037f2:	6cd0      	ldr	r0, [r2, #76]	@ 0x4c
  {
    /* Nothing to do */
  }
  retVal = LL_ADC_REG_ReadConversionData12(RCM_handle_array[handle]->regADC);
  return (retVal);
}
 80037f4:	b280      	uxth	r0, r0
 80037f6:	4770      	bx	lr
 80037f8:	200017b4 	.word	0x200017b4

080037fc <RCM_ExecUserConv>:
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv()
{
  uint8_t handle;
  if (RCM_UserConvHandle != NULL)
 80037fc:	4b11      	ldr	r3, [pc, #68]	@ (8003844 <RCM_ExecUserConv+0x48>)
{
 80037fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (RCM_UserConvHandle != NULL)
 8003802:	681c      	ldr	r4, [r3, #0]
 8003804:	b124      	cbz	r4, 8003810 <RCM_ExecUserConv+0x14>
  {
    handle = RCM_UserConvHandle->convHandle;
    if (RCM_USERCONV_REQUESTED == RCM_UserConvState)
 8003806:	4d10      	ldr	r5, [pc, #64]	@ (8003848 <RCM_ExecUserConv+0x4c>)
    handle = RCM_UserConvHandle->convHandle;
 8003808:	7b26      	ldrb	r6, [r4, #12]
    if (RCM_USERCONV_REQUESTED == RCM_UserConvState)
 800380a:	782b      	ldrb	r3, [r5, #0]
 800380c:	2b01      	cmp	r3, #1
 800380e:	d001      	beq.n	8003814 <RCM_ExecUserConv+0x18>
  }
  else
  {
     /* Nothing to do */
  }
}
 8003810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8003814:	4620      	mov	r0, r4
 8003816:	f7ff ffb9 	bl	800378c <RCM_ExecRegularConv>
 800381a:	4b0c      	ldr	r3, [pc, #48]	@ (800384c <RCM_ExecUserConv+0x50>)
 800381c:	8018      	strh	r0, [r3, #0]
      RCM_UserConvState = RCM_USERCONV_EOC;
 800381e:	2302      	movs	r3, #2
 8003820:	702b      	strb	r3, [r5, #0]
      if (RCM_CB_array[handle].cb != NULL)
 8003822:	4b0b      	ldr	r3, [pc, #44]	@ (8003850 <RCM_ExecUserConv+0x54>)
 8003824:	f853 7036 	ldr.w	r7, [r3, r6, lsl #3]
      RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8003828:	4601      	mov	r1, r0
      if (RCM_CB_array[handle].cb != NULL)
 800382a:	2f00      	cmp	r7, #0
 800382c:	d0f0      	beq.n	8003810 <RCM_ExecUserConv+0x14>
        RCM_CB_array[handle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 800382e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003832:	4620      	mov	r0, r4
 8003834:	685a      	ldr	r2, [r3, #4]
        RCM_UserConvState = RCM_USERCONV_IDLE;
 8003836:	2300      	movs	r3, #0
 8003838:	702b      	strb	r3, [r5, #0]
        RCM_CB_array[handle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 800383a:	463b      	mov	r3, r7
}
 800383c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        RCM_CB_array[handle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 8003840:	4718      	bx	r3
 8003842:	bf00      	nop
 8003844:	2000178c 	.word	0x2000178c
 8003848:	20001790 	.word	0x20001790
 800384c:	20001792 	.word	0x20001792
 8003850:	20001794 	.word	0x20001794

08003854 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003854:	b510      	push	{r4, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003856:	4810      	ldr	r0, [pc, #64]	@ (8003898 <MX_SPI1_Init+0x44>)
 8003858:	4c10      	ldr	r4, [pc, #64]	@ (800389c <MX_SPI1_Init+0x48>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800385a:	f44f 7282 	mov.w	r2, #260	@ 0x104
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800385e:	2300      	movs	r3, #0
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003860:	e9c0 4200 	strd	r4, r2, [r0]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8003864:	f44f 6100 	mov.w	r1, #2048	@ 0x800
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003868:	2201      	movs	r2, #1
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800386a:	e9c0 3102 	strd	r3, r1, [r0, #8]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800386e:	e9c0 3204 	strd	r3, r2, [r0, #16]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003872:	f44f 7400 	mov.w	r4, #512	@ 0x200
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8003876:	2130      	movs	r1, #48	@ 0x30
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 10;
 8003878:	220a      	movs	r2, #10
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800387a:	e9c0 4106 	strd	r4, r1, [r0, #24]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800387e:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi1.Init.CRCPolynomial = 10;
 8003882:	e9c0 320a 	strd	r3, r2, [r0, #40]	@ 0x28
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003886:	f001 fce1 	bl	800524c <HAL_SPI_Init>
 800388a:	b900      	cbnz	r0, 800388e <MX_SPI1_Init+0x3a>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800388c:	bd10      	pop	{r4, pc}
 800388e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8003892:	f7fd bbf9 	b.w	8001088 <Error_Handler>
 8003896:	bf00      	nop
 8003898:	200017c8 	.word	0x200017c8
 800389c:	40013000 	.word	0x40013000

080038a0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80038a0:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(spiHandle->Instance==SPI1)
 80038a2:	4a1e      	ldr	r2, [pc, #120]	@ (800391c <HAL_SPI_MspInit+0x7c>)
 80038a4:	6801      	ldr	r1, [r0, #0]
{
 80038a6:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038a8:	2300      	movs	r3, #0
  if(spiHandle->Instance==SPI1)
 80038aa:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038ac:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80038b0:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80038b4:	9306      	str	r3, [sp, #24]
  if(spiHandle->Instance==SPI1)
 80038b6:	d001      	beq.n	80038bc <HAL_SPI_MspInit+0x1c>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80038b8:	b009      	add	sp, #36	@ 0x24
 80038ba:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 80038bc:	f502 3284 	add.w	r2, r2, #67584	@ 0x10800
 80038c0:	9300      	str	r3, [sp, #0]
 80038c2:	6c51      	ldr	r1, [r2, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038c4:	4816      	ldr	r0, [pc, #88]	@ (8003920 <HAL_SPI_MspInit+0x80>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 80038c6:	f441 5180 	orr.w	r1, r1, #4096	@ 0x1000
 80038ca:	6451      	str	r1, [r2, #68]	@ 0x44
 80038cc:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80038ce:	f401 5180 	and.w	r1, r1, #4096	@ 0x1000
 80038d2:	9100      	str	r1, [sp, #0]
 80038d4:	9900      	ldr	r1, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038d6:	9301      	str	r3, [sp, #4]
 80038d8:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80038da:	f043 0301 	orr.w	r3, r3, #1
 80038de:	6313      	str	r3, [r2, #48]	@ 0x30
 80038e0:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038e8:	2503      	movs	r5, #3
 80038ea:	2405      	movs	r4, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038ec:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80038ee:	22a0      	movs	r2, #160	@ 0xa0
 80038f0:	2302      	movs	r3, #2
 80038f2:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038f6:	e9cd 5405 	strd	r5, r4, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038fa:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038fc:	f000 ff80 	bl	8004800 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003900:	2240      	movs	r2, #64	@ 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003902:	2302      	movs	r3, #2
 8003904:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003908:	4805      	ldr	r0, [pc, #20]	@ (8003920 <HAL_SPI_MspInit+0x80>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800390a:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800390c:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800390e:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003910:	e9cd 3504 	strd	r3, r5, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003914:	f000 ff74 	bl	8004800 <HAL_GPIO_Init>
}
 8003918:	b009      	add	sp, #36	@ 0x24
 800391a:	bd30      	pop	{r4, r5, pc}
 800391c:	40013000 	.word	0x40013000
 8003920:	40020000 	.word	0x40020000

08003924 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003924:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003926:	4b0d      	ldr	r3, [pc, #52]	@ (800395c <HAL_MspInit+0x38>)
 8003928:	2100      	movs	r1, #0
 800392a:	9100      	str	r1, [sp, #0]
 800392c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800392e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003932:	645a      	str	r2, [r3, #68]	@ 0x44
 8003934:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003936:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800393a:	9200      	str	r2, [sp, #0]
 800393c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800393e:	9101      	str	r1, [sp, #4]
 8003940:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003942:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003946:	641a      	str	r2, [r3, #64]	@ 0x40
 8003948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800394a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800394e:	9301      	str	r3, [sp, #4]
 8003950:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8003952:	2004      	movs	r0, #4
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003954:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8003956:	f000 be41 	b.w	80045dc <HAL_NVIC_SetPriorityGrouping>
 800395a:	bf00      	nop
 800395c:	40023800 	.word	0x40023800

08003960 <ADC_IRQHandler>:
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_JEOS) == (LL_ADC_FLAG_JEOS));
 8003960:	4b05      	ldr	r3, [pc, #20]	@ (8003978 <ADC_IRQHandler+0x18>)
 8003962:	681a      	ldr	r2, [r3, #0]
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  if(LL_ADC_IsActiveFlag_JEOS(ADC1))
 8003964:	0752      	lsls	r2, r2, #29
 8003966:	d400      	bmi.n	800396a <ADC_IRQHandler+0xa>
    TSK_HighFrequencyTask();          /*GUI, this section is present only if DAC is disabled*/
  }
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003968:	4770      	bx	lr
    ADC1->SR &= ~(uint32_t)(LL_ADC_FLAG_JEOS | LL_ADC_FLAG_JSTRT);
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	f022 020c 	bic.w	r2, r2, #12
 8003970:	601a      	str	r2, [r3, #0]
    TSK_HighFrequencyTask();          /*GUI, this section is present only if DAC is disabled*/
 8003972:	f7fe b8f1 	b.w	8001b58 <TSK_HighFrequencyTask>
 8003976:	bf00      	nop
 8003978:	40012000 	.word	0x40012000

0800397c <TIM1_UP_TIM10_IRQHandler>:
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800397c:	4b03      	ldr	r3, [pc, #12]	@ (800398c <TIM1_UP_TIM10_IRQHandler+0x10>)
  /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

  /* USER CODE END TIMx_UP_M1_IRQn 0 */

  LL_TIM_ClearFlag_UPDATE(TIM1);
  R3_1_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 800397e:	4804      	ldr	r0, [pc, #16]	@ (8003990 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8003980:	f06f 0201 	mvn.w	r2, #1
 8003984:	611a      	str	r2, [r3, #16]
 8003986:	f003 b827 	b.w	80069d8 <R3_1_TIMx_UP_IRQHandler>
 800398a:	bf00      	nop
 800398c:	40010000 	.word	0x40010000
 8003990:	200001e8 	.word	0x200001e8

08003994 <TIM1_BRK_TIM9_IRQHandler>:
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK(const TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 8003994:	4907      	ldr	r1, [pc, #28]	@ (80039b4 <TIM1_BRK_TIM9_IRQHandler+0x20>)
/**
  * @brief  This function handles first motor BRK interrupt.
  * @param  None
  */
void TIMx_BRK_M1_IRQHandler(void)
{
 8003996:	b508      	push	{r3, lr}
 8003998:	690b      	ldr	r3, [r1, #16]
 800399a:	061b      	lsls	r3, r3, #24
 800399c:	d505      	bpl.n	80039aa <TIM1_BRK_TIM9_IRQHandler+0x16>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 800399e:	f06f 0380 	mvn.w	r3, #128	@ 0x80

  /* USER CODE END TIMx_BRK_M1_IRQn 0 */
  if (LL_TIM_IsActiveFlag_BRK(TIM1))
  {
    LL_TIM_ClearFlag_BRK(TIM1);
    PWMC_OVP_Handler(&PWM_Handle_M1._Super, TIM1);
 80039a2:	4805      	ldr	r0, [pc, #20]	@ (80039b8 <TIM1_BRK_TIM9_IRQHandler+0x24>)
 80039a4:	610b      	str	r3, [r1, #16]
 80039a6:	f7fe fdab 	bl	8002500 <PWMC_OVP_Handler>
  MC_Scheduler();

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 80039aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_Scheduler();
 80039ae:	f7fe b88d 	b.w	8001acc <MC_Scheduler>
 80039b2:	bf00      	nop
 80039b4:	40010000 	.word	0x40010000
 80039b8:	200001e8 	.word	0x200001e8

080039bc <DMA1_Stream5_IRQHandler>:
    retVal = 0;
  }
  else
  {
    register __IO uint32_t *preg = __DMA_PTR_REG_OFFSET(DMAx->LISR,(Stream<=3)?0:1);
    retVal = ((READ_BIT(*preg, 1 << __LL_DMA_IT_TC_BIT(Stream)) == (1 << __LL_DMA_IT_TC_BIT(Stream))) ? 1UL : 0UL);
 80039bc:	4b05      	ldr	r3, [pc, #20]	@ (80039d4 <DMA1_Stream5_IRQHandler+0x18>)
 80039be:	685a      	ldr	r2, [r3, #4]
 80039c0:	0512      	lsls	r2, r2, #20
 80039c2:	d400      	bmi.n	80039c6 <DMA1_Stream5_IRQHandler+0xa>
  }
  /* USER CODE BEGIN DMA1_Stream5_IRQHandler 1 */

  /* USER CODE BEGIN DMA1_Stream5_IRQHandler 1 */

}
 80039c4:	4770      	bx	lr
    WRITE_REG (*preg, 1 << __LL_DMA_IT_TC_BIT(Stream));
 80039c6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
    ASPEP_HWDataReceivedIT (&aspepOverUartA);
 80039ca:	4803      	ldr	r0, [pc, #12]	@ (80039d8 <DMA1_Stream5_IRQHandler+0x1c>)
 80039cc:	60da      	str	r2, [r3, #12]
 80039ce:	f7fd b9cd 	b.w	8000d6c <ASPEP_HWDataReceivedIT>
 80039d2:	bf00      	nop
 80039d4:	40026000 	.word	0x40026000
 80039d8:	20000428 	.word	0x20000428

080039dc <USART2_IRQHandler>:
/**
  * @brief  This function handles USART interrupt request.
  * @param  None
  */
void USART2_IRQHandler(void)
{
 80039dc:	b510      	push	{r4, lr}
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 80039de:	4b51      	ldr	r3, [pc, #324]	@ (8003b24 <USART2_IRQHandler+0x148>)
 80039e0:	681a      	ldr	r2, [r3, #0]
  /* USER CODE BEGIN USART2_IRQHandler 0 */

  /* USER CODE END UUSART2_IRQHandler 0 */

  if ( LL_USART_IsActiveFlag_TC (USARTA) )
 80039e2:	0651      	lsls	r1, r2, #25
{
 80039e4:	b084      	sub	sp, #16
  if ( LL_USART_IsActiveFlag_TC (USARTA) )
 80039e6:	f100 808e 	bmi.w	8003b06 <USART2_IRQHandler+0x12a>
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 80039ea:	4b4e      	ldr	r3, [pc, #312]	@ (8003b24 <USART2_IRQHandler+0x148>)
 80039ec:	681a      	ldr	r2, [r3, #0]
    LL_USART_ClearFlag_TC (USARTA);
    /* Data Sent by UART*/
    /* Need to free the buffer, and to check pending transfer*/
    ASPEP_HWDataTransmittedIT (&aspepOverUartA);
  }
  if ( (LL_USART_IsActiveFlag_ORE (USARTA) || LL_USART_IsActiveFlag_FE (USARTA) || LL_USART_IsActiveFlag_NE (USARTA))
 80039ee:	0712      	lsls	r2, r2, #28
 80039f0:	d402      	bmi.n	80039f8 <USART2_IRQHandler+0x1c>
  return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	0794      	lsls	r4, r2, #30
 80039f6:	d57e      	bpl.n	8003af6 <USART2_IRQHandler+0x11a>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_ERROR(const USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE));
 80039f8:	4b4a      	ldr	r3, [pc, #296]	@ (8003b24 <USART2_IRQHandler+0x148>)
 80039fa:	695a      	ldr	r2, [r3, #20]
        && LL_USART_IsEnabledIT_ERROR (USARTA) )
 80039fc:	07d1      	lsls	r1, r2, #31
 80039fe:	d52d      	bpl.n	8003a5c <USART2_IRQHandler+0x80>
  tmpreg = USARTx->SR;
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	9203      	str	r2, [sp, #12]
  (void) tmpreg;
 8003a04:	9a03      	ldr	r2, [sp, #12]
  tmpreg = USARTx->DR;
 8003a06:	685a      	ldr	r2, [r3, #4]
 8003a08:	9203      	str	r2, [sp, #12]
  (void) tmpreg;
 8003a0a:	9a03      	ldr	r2, [sp, #12]
  tmpreg = USARTx->SR;
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	9202      	str	r2, [sp, #8]
  (void) tmpreg;
 8003a10:	9a02      	ldr	r2, [sp, #8]
  tmpreg = USARTx->DR;
 8003a12:	685a      	ldr	r2, [r3, #4]
 8003a14:	9202      	str	r2, [sp, #8]
  (void) tmpreg;
 8003a16:	9a02      	ldr	r2, [sp, #8]
  tmpreg = USARTx->SR;
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 8003a1c:	9a01      	ldr	r2, [sp, #4]
  tmpreg = USARTx->DR;
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8003a22:	9b01      	ldr	r3, [sp, #4]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a24:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003a28:	f202 4314 	addw	r3, r2, #1044	@ 0x414
 8003a2c:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
 8003a30:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a34:	f202 4014 	addw	r0, r2, #1044	@ 0x414
 8003a38:	e840 3100 	strex	r1, r3, [r0]
 8003a3c:	2900      	cmp	r1, #0
 8003a3e:	d1f3      	bne.n	8003a28 <USART2_IRQHandler+0x4c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a40:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003a44:	f202 430c 	addw	r3, r2, #1036	@ 0x40c
 8003a48:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8003a4c:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a50:	f202 400c 	addw	r0, r2, #1036	@ 0x40c
 8003a54:	e840 3100 	strex	r1, r3, [r0]
 8003a58:	2900      	cmp	r1, #0
 8003a5a:	d1f3      	bne.n	8003a44 <USART2_IRQHandler+0x68>
  return (READ_BIT(USARTx->SR, USART_SR_IDLE) == (USART_SR_IDLE));
 8003a5c:	4b31      	ldr	r3, [pc, #196]	@ (8003b24 <USART2_IRQHandler+0x148>)
 8003a5e:	681a      	ldr	r2, [r3, #0]
    LL_USART_ClearFlag_NE(USARTA);
    /* We disable ERROR interrupt to avoid to trig one Overrun IT per additional byte recevied*/
    LL_USART_DisableIT_ERROR (USARTA);
    LL_USART_EnableIT_IDLE (USARTA);
  }
  if ( LL_USART_IsActiveFlag_IDLE (USARTA) && LL_USART_IsEnabledIT_IDLE (USARTA) )
 8003a60:	06d2      	lsls	r2, r2, #27
 8003a62:	d546      	bpl.n	8003af2 <USART2_IRQHandler+0x116>
  return (READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE));
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	06db      	lsls	r3, r3, #27
 8003a68:	d543      	bpl.n	8003af2 <USART2_IRQHandler+0x116>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a6a:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003a6e:	f202 430c 	addw	r3, r2, #1036	@ 0x40c
 8003a72:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8003a76:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a7a:	f202 400c 	addw	r0, r2, #1036	@ 0x40c
 8003a7e:	e840 3100 	strex	r1, r3, [r0]
 8003a82:	2900      	cmp	r1, #0
 8003a84:	d1f3      	bne.n	8003a6e <USART2_IRQHandler+0x92>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a86:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003a8a:	f202 4314 	addw	r3, r2, #1044	@ 0x414
 8003a8e:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8003a92:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a96:	f202 4014 	addw	r0, r2, #1044	@ 0x414
 8003a9a:	e840 3100 	strex	r1, r3, [r0]
 8003a9e:	2900      	cmp	r1, #0
 8003aa0:	d1f3      	bne.n	8003a8a <USART2_IRQHandler+0xae>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa2:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003aa6:	f202 4314 	addw	r3, r2, #1044	@ 0x414
 8003aaa:	e853 3f00 	ldrex	r3, [r3]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableDMAReq_RX(USART_TypeDef *USARTx)
{
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_DMAR);
 8003aae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab2:	f202 4014 	addw	r0, r2, #1044	@ 0x414
 8003ab6:	e840 3100 	strex	r1, r3, [r0]
 8003aba:	2900      	cmp	r1, #0
 8003abc:	d1f3      	bne.n	8003aa6 <USART2_IRQHandler+0xca>
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8003abe:	4b19      	ldr	r3, [pc, #100]	@ (8003b24 <USART2_IRQHandler+0x148>)
 8003ac0:	685b      	ldr	r3, [r3, #4]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac2:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003ac6:	f202 4314 	addw	r3, r2, #1044	@ 0x414
 8003aca:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8003ace:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ad2:	f202 4014 	addw	r0, r2, #1044	@ 0x414
 8003ad6:	e840 3100 	strex	r1, r3, [r0]
 8003ada:	2900      	cmp	r1, #0
 8003adc:	d1f3      	bne.n	8003ac6 <USART2_IRQHandler+0xea>
    WRITE_REG (*preg, 1 << __LL_DMA_IT_TE_BIT(Stream));
 8003ade:	4b12      	ldr	r3, [pc, #72]	@ (8003b28 <USART2_IRQHandler+0x14c>)
    /* We disable the DMA request, Read the dummy data, endable back the DMA request */
    LL_USART_DisableDMAReq_RX (USARTA);
    LL_USART_ReceiveData8(USARTA);
    LL_USART_EnableDMAReq_RX (USARTA);
    LL_DMA_ClearFlag_TE (DMA_RX_A, DMACH_RX_A );
    ASPEP_HWDMAReset (&aspepOverUartA);
 8003ae0:	4812      	ldr	r0, [pc, #72]	@ (8003b2c <USART2_IRQHandler+0x150>)
 8003ae2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ae6:	60da      	str	r2, [r3, #12]
  }

  /* USER CODE BEGIN USART2_IRQHandler 1 */

  /* USER CODE END USART2_IRQHandler 1 */
}
 8003ae8:	b004      	add	sp, #16
 8003aea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ASPEP_HWDMAReset (&aspepOverUartA);
 8003aee:	f7fd b98b 	b.w	8000e08 <ASPEP_HWDMAReset>
}
 8003af2:	b004      	add	sp, #16
 8003af4:	bd10      	pop	{r4, pc}
  return (READ_BIT(USARTx->SR, USART_SR_NE) == (USART_SR_NE));
 8003af6:	681b      	ldr	r3, [r3, #0]
  if ( (LL_USART_IsActiveFlag_ORE (USARTA) || LL_USART_IsActiveFlag_FE (USARTA) || LL_USART_IsActiveFlag_NE (USARTA))
 8003af8:	0758      	lsls	r0, r3, #29
 8003afa:	d5af      	bpl.n	8003a5c <USART2_IRQHandler+0x80>
  return (READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE));
 8003afc:	4b09      	ldr	r3, [pc, #36]	@ (8003b24 <USART2_IRQHandler+0x148>)
 8003afe:	695a      	ldr	r2, [r3, #20]
        && LL_USART_IsEnabledIT_ERROR (USARTA) )
 8003b00:	07d1      	lsls	r1, r2, #31
 8003b02:	d5ab      	bpl.n	8003a5c <USART2_IRQHandler+0x80>
 8003b04:	e77c      	b.n	8003a00 <USART2_IRQHandler+0x24>
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8003b06:	4908      	ldr	r1, [pc, #32]	@ (8003b28 <USART2_IRQHandler+0x14c>)
    ASPEP_HWDataTransmittedIT (&aspepOverUartA);
 8003b08:	4808      	ldr	r0, [pc, #32]	@ (8003b2c <USART2_IRQHandler+0x150>)
 8003b0a:	f8d1 20a0 	ldr.w	r2, [r1, #160]	@ 0xa0
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 8003b0e:	f06f 0440 	mvn.w	r4, #64	@ 0x40
 8003b12:	f022 0201 	bic.w	r2, r2, #1
 8003b16:	f8c1 20a0 	str.w	r2, [r1, #160]	@ 0xa0
 8003b1a:	601c      	str	r4, [r3, #0]
 8003b1c:	f7fc ff7a 	bl	8000a14 <ASPEP_HWDataTransmittedIT>
 8003b20:	e763      	b.n	80039ea <USART2_IRQHandler+0xe>
 8003b22:	bf00      	nop
 8003b24:	40004400 	.word	0x40004400
 8003b28:	40026000 	.word	0x40026000
 8003b2c:	20000428 	.word	0x20000428

08003b30 <HardFault_Handler>:
/**
  * @brief  This function handles Hard Fault exception.
  * @param  None
  */
void HardFault_Handler(void)
{
 8003b30:	b508      	push	{r3, lr}
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 8003b32:	f7fe f93f 	bl	8001db4 <TSK_HardwareFaultTask>

  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8003b36:	e7fe      	b.n	8003b36 <HardFault_Handler+0x6>

08003b38 <SysTick_Handler>:
 /* USER CODE END HardFault_IRQn 1 */

}

void SysTick_Handler(void)
{
 8003b38:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 8003b3a:	4c0a      	ldr	r4, [pc, #40]	@ (8003b64 <SysTick_Handler+0x2c>)
 8003b3c:	7823      	ldrb	r3, [r4, #0]
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d006      	beq.n	8003b50 <SysTick_Handler+0x18>
  {
    HAL_IncTick();
    HAL_SYSTICK_IRQHandler();
    SystickDividerCounter = 0;
  }
  SystickDividerCounter ++;
 8003b42:	3301      	adds	r3, #1
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	7023      	strb	r3, [r4, #0]
  /* USER CODE END SysTick_IRQn 1 */
    MC_RunMotorControlTasks();

  /* USER CODE BEGIN SysTick_IRQn 2 */
  /* USER CODE END SysTick_IRQn 2 */
}
 8003b48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 8003b4c:	f7fe b926 	b.w	8001d9c <MC_RunMotorControlTasks>
    HAL_IncTick();
 8003b50:	f000 faea 	bl	8004128 <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 8003b54:	f000 fdba 	bl	80046cc <HAL_SYSTICK_IRQHandler>
 8003b58:	2301      	movs	r3, #1
  SystickDividerCounter ++;
 8003b5a:	7023      	strb	r3, [r4, #0]
}
 8003b5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 8003b60:	f7fe b91c 	b.w	8001d9c <MC_RunMotorControlTasks>
 8003b64:	200004b0 	.word	0x200004b0

08003b68 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003b68:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b6a:	1e16      	subs	r6, r2, #0
 8003b6c:	dd07      	ble.n	8003b7e <_read+0x16>
 8003b6e:	460c      	mov	r4, r1
 8003b70:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8003b72:	f3af 8000 	nop.w
 8003b76:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b7a:	42a5      	cmp	r5, r4
 8003b7c:	d1f9      	bne.n	8003b72 <_read+0xa>
	}

return len;
}
 8003b7e:	4630      	mov	r0, r6
 8003b80:	bd70      	pop	{r4, r5, r6, pc}
 8003b82:	bf00      	nop

08003b84 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003b84:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b86:	1e16      	subs	r6, r2, #0
 8003b88:	dd07      	ble.n	8003b9a <_write+0x16>
 8003b8a:	460c      	mov	r4, r1
 8003b8c:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 8003b8e:	f814 0b01 	ldrb.w	r0, [r4], #1
 8003b92:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b96:	42ac      	cmp	r4, r5
 8003b98:	d1f9      	bne.n	8003b8e <_write+0xa>
	}
	return len;
}
 8003b9a:	4630      	mov	r0, r6
 8003b9c:	bd70      	pop	{r4, r5, r6, pc}
 8003b9e:	bf00      	nop

08003ba0 <_close>:

int _close(int file)
{
	return -1;
}
 8003ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop

08003ba8 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8003ba8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003bac:	604b      	str	r3, [r1, #4]
	return 0;
}
 8003bae:	2000      	movs	r0, #0
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop

08003bb4 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8003bb4:	2001      	movs	r0, #1
 8003bb6:	4770      	bx	lr

08003bb8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8003bb8:	2000      	movs	r0, #0
 8003bba:	4770      	bx	lr

08003bbc <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003bbc:	490c      	ldr	r1, [pc, #48]	@ (8003bf0 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003bbe:	4a0d      	ldr	r2, [pc, #52]	@ (8003bf4 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 8003bc0:	680b      	ldr	r3, [r1, #0]
{
 8003bc2:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003bc4:	4c0c      	ldr	r4, [pc, #48]	@ (8003bf8 <_sbrk+0x3c>)
 8003bc6:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8003bc8:	b12b      	cbz	r3, 8003bd6 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003bca:	4418      	add	r0, r3
 8003bcc:	4290      	cmp	r0, r2
 8003bce:	d807      	bhi.n	8003be0 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8003bd0:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8003bd6:	4b09      	ldr	r3, [pc, #36]	@ (8003bfc <_sbrk+0x40>)
 8003bd8:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8003bda:	4418      	add	r0, r3
 8003bdc:	4290      	cmp	r0, r2
 8003bde:	d9f7      	bls.n	8003bd0 <_sbrk+0x14>
    errno = ENOMEM;
 8003be0:	f004 f928 	bl	8007e34 <__errno>
 8003be4:	230c      	movs	r3, #12
 8003be6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8003be8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	bd10      	pop	{r4, pc}
 8003bf0:	20001820 	.word	0x20001820
 8003bf4:	20020000 	.word	0x20020000
 8003bf8:	00000400 	.word	0x00000400
 8003bfc:	20001ad0 	.word	0x20001ad0

08003c00 <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM1)
 8003c00:	4b0a      	ldr	r3, [pc, #40]	@ (8003c2c <HAL_TIM_Base_MspInit+0x2c>)
 8003c02:	6802      	ldr	r2, [r0, #0]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d000      	beq.n	8003c0a <HAL_TIM_Base_MspInit+0xa>
 8003c08:	4770      	bx	lr
{
 8003c0a:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003c0c:	f503 339c 	add.w	r3, r3, #79872	@ 0x13800
 8003c10:	2200      	movs	r2, #0
 8003c12:	9201      	str	r2, [sp, #4]
 8003c14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003c16:	f042 0201 	orr.w	r2, r2, #1
 8003c1a:	645a      	str	r2, [r3, #68]	@ 0x44
 8003c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c1e:	f003 0301 	and.w	r3, r3, #1
 8003c22:	9301      	str	r3, [sp, #4]
 8003c24:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8003c26:	b002      	add	sp, #8
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop
 8003c2c:	40010000 	.word	0x40010000

08003c30 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003c30:	b5d0      	push	{r4, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(timHandle->Instance==TIM1)
 8003c32:	4a1f      	ldr	r2, [pc, #124]	@ (8003cb0 <HAL_TIM_MspPostInit+0x80>)
 8003c34:	6801      	ldr	r1, [r0, #0]
{
 8003c36:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c38:	2300      	movs	r3, #0
  if(timHandle->Instance==TIM1)
 8003c3a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c3c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003c40:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003c44:	9306      	str	r3, [sp, #24]
  if(timHandle->Instance==TIM1)
 8003c46:	d001      	beq.n	8003c4c <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003c48:	b008      	add	sp, #32
 8003c4a:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c4c:	f502 329c 	add.w	r2, r2, #79872	@ 0x13800
 8003c50:	9300      	str	r3, [sp, #0]
 8003c52:	6b11      	ldr	r1, [r2, #48]	@ 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c54:	4817      	ldr	r0, [pc, #92]	@ (8003cb4 <HAL_TIM_MspPostInit+0x84>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c56:	f041 0102 	orr.w	r1, r1, #2
 8003c5a:	6311      	str	r1, [r2, #48]	@ 0x30
 8003c5c:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8003c5e:	f001 0102 	and.w	r1, r1, #2
 8003c62:	9100      	str	r1, [sp, #0]
 8003c64:	9900      	ldr	r1, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c66:	9301      	str	r3, [sp, #4]
 8003c68:	6b13      	ldr	r3, [r2, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003c6a:	2401      	movs	r4, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c6c:	4323      	orrs	r3, r4
 8003c6e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c70:	6b13      	ldr	r3, [r2, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003c72:	9406      	str	r4, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c74:	4023      	ands	r3, r4
 8003c76:	9301      	str	r3, [sp, #4]
 8003c78:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c7a:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8003c7c:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 8003c80:	2302      	movs	r3, #2
 8003c82:	2602      	movs	r6, #2
 8003c84:	2702      	movs	r7, #2
 8003c86:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003c8a:	e9cd 6704 	strd	r6, r7, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c8e:	f000 fdb7 	bl	8004800 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8003c92:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003c96:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c98:	4807      	ldr	r0, [pc, #28]	@ (8003cb8 <HAL_TIM_MspPostInit+0x88>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003c9a:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c9c:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8003c9e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003ca2:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ca6:	f000 fdab 	bl	8004800 <HAL_GPIO_Init>
}
 8003caa:	b008      	add	sp, #32
 8003cac:	bdd0      	pop	{r4, r6, r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	40010000 	.word	0x40010000
 8003cb4:	40020400 	.word	0x40020400
 8003cb8:	40020000 	.word	0x40020000

08003cbc <MX_TIM1_Init>:
{
 8003cbc:	b530      	push	{r4, r5, lr}
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8003cbe:	2400      	movs	r4, #0
{
 8003cc0:	b099      	sub	sp, #100	@ 0x64
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003cc2:	2520      	movs	r5, #32
 8003cc4:	4621      	mov	r1, r4
 8003cc6:	462a      	mov	r2, r5
 8003cc8:	a810      	add	r0, sp, #64	@ 0x40
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8003cca:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003cce:	e9cd 4405 	strd	r4, r4, [sp, #20]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003cd2:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
 8003cd6:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8003cda:	e9cd 440d 	strd	r4, r4, [sp, #52]	@ 0x34
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8003cde:	9402      	str	r4, [sp, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ce0:	9400      	str	r4, [sp, #0]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003ce2:	9408      	str	r4, [sp, #32]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ce4:	9401      	str	r4, [sp, #4]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003ce6:	f004 f856 	bl	8007d96 <memset>
  htim1.Instance = TIM1;
 8003cea:	4849      	ldr	r0, [pc, #292]	@ (8003e10 <MX_TIM1_Init+0x154>)
 8003cec:	4b49      	ldr	r3, [pc, #292]	@ (8003e14 <MX_TIM1_Init+0x158>)
 8003cee:	6003      	str	r3, [r0, #0]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8003cf0:	f640 01ca 	movw	r1, #2250	@ 0x8ca
 8003cf4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003cf8:	e9c0 1303 	strd	r1, r3, [r0, #12]
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 8003cfc:	2301      	movs	r3, #1
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 8003cfe:	e9c0 4501 	strd	r4, r5, [r0, #4]
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 8003d02:	6184      	str	r4, [r0, #24]
 8003d04:	6143      	str	r3, [r0, #20]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003d06:	f001 fc2b 	bl	8005560 <HAL_TIM_Base_Init>
 8003d0a:	2800      	cmp	r0, #0
 8003d0c:	d15d      	bne.n	8003dca <MX_TIM1_Init+0x10e>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003d0e:	4840      	ldr	r0, [pc, #256]	@ (8003e10 <MX_TIM1_Init+0x154>)
 8003d10:	f001 fcc0 	bl	8005694 <HAL_TIM_PWM_Init>
 8003d14:	2800      	cmp	r0, #0
 8003d16:	d15f      	bne.n	8003dd8 <MX_TIM1_Init+0x11c>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8003d18:	2206      	movs	r2, #6
 8003d1a:	2310      	movs	r3, #16
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8003d1c:	483c      	ldr	r0, [pc, #240]	@ (8003e10 <MX_TIM1_Init+0x154>)
 8003d1e:	a902      	add	r1, sp, #8
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8003d20:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8003d24:	f001 fe52 	bl	80059cc <HAL_TIM_SlaveConfigSynchro>
 8003d28:	2800      	cmp	r0, #0
 8003d2a:	d16e      	bne.n	8003e0a <MX_TIM1_Init+0x14e>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003d30:	4837      	ldr	r0, [pc, #220]	@ (8003e10 <MX_TIM1_Init+0x154>)
 8003d32:	4669      	mov	r1, sp
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d34:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003d38:	f001 fed4 	bl	8005ae4 <HAL_TIMEx_MasterConfigSynchronization>
 8003d3c:	2800      	cmp	r0, #0
 8003d3e:	d161      	bne.n	8003e04 <MX_TIM1_Init+0x148>
  sConfigOC.Pulse = ((PWM_PERIOD_CYCLES) / 4);
 8003d40:	2160      	movs	r1, #96	@ 0x60
 8003d42:	f240 4365 	movw	r3, #1125	@ 0x465
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003d46:	2000      	movs	r0, #0
  sConfigOC.Pulse = ((PWM_PERIOD_CYCLES) / 4);
 8003d48:	e9cd 1308 	strd	r1, r3, [sp, #32]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003d4c:	2100      	movs	r1, #0
 8003d4e:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003d52:	2200      	movs	r2, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003d54:	482e      	ldr	r0, [pc, #184]	@ (8003e10 <MX_TIM1_Init+0x154>)
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003d56:	920e      	str	r2, [sp, #56]	@ 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003d58:	a908      	add	r1, sp, #32
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003d5a:	e9cd 220a 	strd	r2, r2, [sp, #40]	@ 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003d5e:	f001 fd31 	bl	80057c4 <HAL_TIM_PWM_ConfigChannel>
 8003d62:	2800      	cmp	r0, #0
 8003d64:	d14b      	bne.n	8003dfe <MX_TIM1_Init+0x142>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003d66:	482a      	ldr	r0, [pc, #168]	@ (8003e10 <MX_TIM1_Init+0x154>)
 8003d68:	2204      	movs	r2, #4
 8003d6a:	a908      	add	r1, sp, #32
 8003d6c:	f001 fd2a 	bl	80057c4 <HAL_TIM_PWM_ConfigChannel>
 8003d70:	2800      	cmp	r0, #0
 8003d72:	d141      	bne.n	8003df8 <MX_TIM1_Init+0x13c>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003d74:	4826      	ldr	r0, [pc, #152]	@ (8003e10 <MX_TIM1_Init+0x154>)
 8003d76:	2208      	movs	r2, #8
 8003d78:	a908      	add	r1, sp, #32
 8003d7a:	f001 fd23 	bl	80057c4 <HAL_TIM_PWM_ConfigChannel>
 8003d7e:	2800      	cmp	r0, #0
 8003d80:	d137      	bne.n	8003df2 <MX_TIM1_Init+0x136>
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8003d82:	2270      	movs	r2, #112	@ 0x70
 8003d84:	f640 03c9 	movw	r3, #2249	@ 0x8c9
 8003d88:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003d8c:	4820      	ldr	r0, [pc, #128]	@ (8003e10 <MX_TIM1_Init+0x154>)
 8003d8e:	a908      	add	r1, sp, #32
 8003d90:	220c      	movs	r2, #12
 8003d92:	f001 fd17 	bl	80057c4 <HAL_TIM_PWM_ConfigChannel>
 8003d96:	bb48      	cbnz	r0, 8003dec <MX_TIM1_Init+0x130>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8003d98:	f44f 6400 	mov.w	r4, #2048	@ 0x800
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8003d9c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003da0:	e9cd 4210 	strd	r4, r2, [sp, #64]	@ 0x40
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003da4:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 8003da6:	224c      	movs	r2, #76	@ 0x4c
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003da8:	2400      	movs	r4, #0
 8003daa:	2500      	movs	r5, #0
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003dac:	4818      	ldr	r0, [pc, #96]	@ (8003e10 <MX_TIM1_Init+0x154>)
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003dae:	9317      	str	r3, [sp, #92]	@ 0x5c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003db0:	a910      	add	r1, sp, #64	@ 0x40
  sBreakDeadTimeConfig.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 8003db2:	e9cd 3212 	strd	r3, r2, [sp, #72]	@ 0x48
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003db6:	e9cd 4514 	strd	r4, r5, [sp, #80]	@ 0x50
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003dba:	f001 fed3 	bl	8005b64 <HAL_TIMEx_ConfigBreakDeadTime>
 8003dbe:	b970      	cbnz	r0, 8003dde <MX_TIM1_Init+0x122>
  HAL_TIM_MspPostInit(&htim1);
 8003dc0:	4813      	ldr	r0, [pc, #76]	@ (8003e10 <MX_TIM1_Init+0x154>)
 8003dc2:	f7ff ff35 	bl	8003c30 <HAL_TIM_MspPostInit>
}
 8003dc6:	b019      	add	sp, #100	@ 0x64
 8003dc8:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8003dca:	f7fd f95d 	bl	8001088 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003dce:	4810      	ldr	r0, [pc, #64]	@ (8003e10 <MX_TIM1_Init+0x154>)
 8003dd0:	f001 fc60 	bl	8005694 <HAL_TIM_PWM_Init>
 8003dd4:	2800      	cmp	r0, #0
 8003dd6:	d09f      	beq.n	8003d18 <MX_TIM1_Init+0x5c>
    Error_Handler();
 8003dd8:	f7fd f956 	bl	8001088 <Error_Handler>
 8003ddc:	e79c      	b.n	8003d18 <MX_TIM1_Init+0x5c>
    Error_Handler();
 8003dde:	f7fd f953 	bl	8001088 <Error_Handler>
  HAL_TIM_MspPostInit(&htim1);
 8003de2:	480b      	ldr	r0, [pc, #44]	@ (8003e10 <MX_TIM1_Init+0x154>)
 8003de4:	f7ff ff24 	bl	8003c30 <HAL_TIM_MspPostInit>
}
 8003de8:	b019      	add	sp, #100	@ 0x64
 8003dea:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8003dec:	f7fd f94c 	bl	8001088 <Error_Handler>
 8003df0:	e7d2      	b.n	8003d98 <MX_TIM1_Init+0xdc>
    Error_Handler();
 8003df2:	f7fd f949 	bl	8001088 <Error_Handler>
 8003df6:	e7c4      	b.n	8003d82 <MX_TIM1_Init+0xc6>
    Error_Handler();
 8003df8:	f7fd f946 	bl	8001088 <Error_Handler>
 8003dfc:	e7ba      	b.n	8003d74 <MX_TIM1_Init+0xb8>
    Error_Handler();
 8003dfe:	f7fd f943 	bl	8001088 <Error_Handler>
 8003e02:	e7b0      	b.n	8003d66 <MX_TIM1_Init+0xaa>
    Error_Handler();
 8003e04:	f7fd f940 	bl	8001088 <Error_Handler>
 8003e08:	e79a      	b.n	8003d40 <MX_TIM1_Init+0x84>
    Error_Handler();
 8003e0a:	f7fd f93d 	bl	8001088 <Error_Handler>
 8003e0e:	e78d      	b.n	8003d2c <MX_TIM1_Init+0x70>
 8003e10:	20001828 	.word	0x20001828
 8003e14:	40010000 	.word	0x40010000

08003e18 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003e18:	b510      	push	{r4, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003e1a:	480b      	ldr	r0, [pc, #44]	@ (8003e48 <MX_USART2_UART_Init+0x30>)
 8003e1c:	4c0b      	ldr	r4, [pc, #44]	@ (8003e4c <MX_USART2_UART_Init+0x34>)
  huart2.Init.BaudRate = 921600;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003e1e:	2300      	movs	r3, #0
  huart2.Init.BaudRate = 921600;
 8003e20:	f44f 2161 	mov.w	r1, #921600	@ 0xe1000
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003e24:	220c      	movs	r2, #12
  huart2.Init.BaudRate = 921600;
 8003e26:	e9c0 4100 	strd	r4, r1, [r0]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003e2a:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003e2e:	e9c0 3204 	strd	r3, r2, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e32:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003e36:	f001 febf 	bl	8005bb8 <HAL_UART_Init>
 8003e3a:	b900      	cbnz	r0, 8003e3e <MX_USART2_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003e3c:	bd10      	pop	{r4, pc}
 8003e3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8003e42:	f7fd b921 	b.w	8001088 <Error_Handler>
 8003e46:	bf00      	nop
 8003e48:	20001930 	.word	0x20001930
 8003e4c:	40004400 	.word	0x40004400

08003e50 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003e50:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(uartHandle->Instance==USART2)
 8003e52:	4b32      	ldr	r3, [pc, #200]	@ (8003f1c <HAL_UART_MspInit+0xcc>)
 8003e54:	6802      	ldr	r2, [r0, #0]
{
 8003e56:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e58:	2400      	movs	r4, #0
  if(uartHandle->Instance==USART2)
 8003e5a:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e5c:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8003e60:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8003e64:	9406      	str	r4, [sp, #24]
  if(uartHandle->Instance==USART2)
 8003e66:	d001      	beq.n	8003e6c <HAL_UART_MspInit+0x1c>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003e68:	b008      	add	sp, #32
 8003e6a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8003e6c:	f503 33fa 	add.w	r3, r3, #128000	@ 0x1f400
 8003e70:	9400      	str	r4, [sp, #0]
 8003e72:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003e74:	4e2a      	ldr	r6, [pc, #168]	@ (8003f20 <HAL_UART_MspInit+0xd0>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8003e76:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8003e7a:	641a      	str	r2, [r3, #64]	@ 0x40
 8003e7c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e7e:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8003e82:	9200      	str	r2, [sp, #0]
 8003e84:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e86:	9401      	str	r4, [sp, #4]
 8003e88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e8a:	f042 0201 	orr.w	r2, r2, #1
 8003e8e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e92:	f003 0301 	and.w	r3, r3, #1
 8003e96:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8003e98:	220c      	movs	r2, #12
 8003e9a:	2302      	movs	r3, #2
 8003e9c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003ea0:	4605      	mov	r5, r0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003ea2:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ea4:	481f      	ldr	r0, [pc, #124]	@ (8003f24 <HAL_UART_MspInit+0xd4>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003ea6:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ea8:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003eaa:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003eac:	f000 fca8 	bl	8004800 <HAL_GPIO_Init>
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003eb0:	4a1d      	ldr	r2, [pc, #116]	@ (8003f28 <HAL_UART_MspInit+0xd8>)
 8003eb2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003eb6:	e9c6 2300 	strd	r2, r3, [r6]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003eba:	4630      	mov	r0, r6
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003ebc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ec0:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003ec4:	e9c6 3404 	strd	r3, r4, [r6, #16]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003ec8:	e9c6 4406 	strd	r4, r4, [r6, #24]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003ecc:	e9c6 4408 	strd	r4, r4, [r6, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003ed0:	f000 fc00 	bl	80046d4 <HAL_DMA_Init>
 8003ed4:	b9d8      	cbnz	r0, 8003f0e <HAL_UART_MspInit+0xbe>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003ed6:	4c15      	ldr	r4, [pc, #84]	@ (8003f2c <HAL_UART_MspInit+0xdc>)
 8003ed8:	4915      	ldr	r1, [pc, #84]	@ (8003f30 <HAL_UART_MspInit+0xe0>)
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8003eda:	63ee      	str	r6, [r5, #60]	@ 0x3c
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003edc:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ee0:	2300      	movs	r3, #0
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003ee2:	e9c4 1200 	strd	r1, r2, [r4]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003ee6:	4620      	mov	r0, r4
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003ee8:	2140      	movs	r1, #64	@ 0x40
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003eea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003eee:	e9c4 1302 	strd	r1, r3, [r4, #8]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003ef2:	e9c4 3305 	strd	r3, r3, [r4, #20]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003ef6:	e9c4 3307 	strd	r3, r3, [r4, #28]
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8003efa:	63b5      	str	r5, [r6, #56]	@ 0x38
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003efc:	6122      	str	r2, [r4, #16]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003efe:	6263      	str	r3, [r4, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003f00:	f000 fbe8 	bl	80046d4 <HAL_DMA_Init>
 8003f04:	b930      	cbnz	r0, 8003f14 <HAL_UART_MspInit+0xc4>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8003f06:	63ac      	str	r4, [r5, #56]	@ 0x38
 8003f08:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 8003f0a:	b008      	add	sp, #32
 8003f0c:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8003f0e:	f7fd f8bb 	bl	8001088 <Error_Handler>
 8003f12:	e7e0      	b.n	8003ed6 <HAL_UART_MspInit+0x86>
      Error_Handler();
 8003f14:	f7fd f8b8 	bl	8001088 <Error_Handler>
 8003f18:	e7f5      	b.n	8003f06 <HAL_UART_MspInit+0xb6>
 8003f1a:	bf00      	nop
 8003f1c:	40004400 	.word	0x40004400
 8003f20:	200018d0 	.word	0x200018d0
 8003f24:	40020000 	.word	0x40020000
 8003f28:	40026088 	.word	0x40026088
 8003f2c:	20001870 	.word	0x20001870
 8003f30:	400260a0 	.word	0x400260a0

08003f34 <UASPEP_INIT>:
  }
  else
  {
#endif
    /* Enable DMA UART */
    LL_USART_ClearFlag_TC(pHandle->USARTx);
 8003f34:	6802      	ldr	r2, [r0, #0]
 8003f36:	4611      	mov	r1, r2
 8003f38:	f06f 0340 	mvn.w	r3, #64	@ 0x40
{
 8003f3c:	b470      	push	{r4, r5, r6}
 8003f3e:	f841 3b0c 	str.w	r3, [r1], #12
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f42:	e851 3f00 	ldrex	r3, [r1]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 8003f46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f4a:	e841 3400 	strex	r4, r3, [r1]
 8003f4e:	2c00      	cmp	r4, #0
 8003f50:	d1f7      	bne.n	8003f42 <UASPEP_INIT+0xe>
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8003f52:	f102 0114 	add.w	r1, r2, #20
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f56:	e851 3f00 	ldrex	r3, [r1]
 8003f5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f5e:	e841 3400 	strex	r4, r3, [r1]
 8003f62:	2c00      	cmp	r4, #0
 8003f64:	d1f7      	bne.n	8003f56 <UASPEP_INIT+0x22>
  * @param  PeriphAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t PeriphAddress)
{
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 8003f66:	6901      	ldr	r1, [r0, #16]
 8003f68:	4e16      	ldr	r6, [pc, #88]	@ (8003fc4 <UASPEP_INIT+0x90>)
 8003f6a:	6883      	ldr	r3, [r0, #8]
 8003f6c:	5c74      	ldrb	r4, [r6, r1]
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 8003f6e:	6845      	ldr	r5, [r0, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 8003f70:	4423      	add	r3, r4
    LL_USART_EnableDMAReq_TX(pHandle->USARTx);

    /* Write the USART_TDR register address in the DMA control register to configure it as
     * the destination of the transfer */
    //cstat !MISRAC2012-Rule-11.4
    LL_DMA_SetPeriphAddress(pHandle->txDMA, pHandle->txChannel, (uint32_t)&pHandle->USARTx->DR);
 8003f72:	1d11      	adds	r1, r2, #4
 8003f74:	6099      	str	r1, [r3, #8]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 8003f76:	68c3      	ldr	r3, [r0, #12]
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 8003f78:	4611      	mov	r1, r2
 8003f7a:	f06f 0440 	mvn.w	r4, #64	@ 0x40
 8003f7e:	f841 4b14 	str.w	r4, [r1], #20
 8003f82:	5cf4      	ldrb	r4, [r6, r3]
 8003f84:	592b      	ldr	r3, [r5, r4]
 8003f86:	f043 0310 	orr.w	r3, r3, #16
 8003f8a:	512b      	str	r3, [r5, r4]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f8c:	e851 3f00 	ldrex	r3, [r1]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8003f90:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f94:	e841 3400 	strex	r4, r3, [r1]
 8003f98:	2c00      	cmp	r4, #0
 8003f9a:	d1f7      	bne.n	8003f8c <UASPEP_INIT+0x58>
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 8003f9c:	68c3      	ldr	r3, [r0, #12]
 8003f9e:	5cf3      	ldrb	r3, [r6, r3]
 8003fa0:	441d      	add	r5, r3
    LL_USART_EnableIT_ERROR(pHandle->USARTx);

    /* Write the USART_RDR register address in the DMA control register to configure it as
     * the source of the transfer */
    //cstat !MISRAC2012-Rule-11.4
    LL_DMA_SetPeriphAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)&pHandle->USARTx->DR);
 8003fa2:	1d11      	adds	r1, r2, #4
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 8003fa4:	f06f 0340 	mvn.w	r3, #64	@ 0x40
 8003fa8:	60a9      	str	r1, [r5, #8]
 8003faa:	f842 3b14 	str.w	r3, [r2], #20
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fae:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8003fb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb6:	e842 3100 	strex	r1, r3, [r2]
 8003fba:	2900      	cmp	r1, #0
 8003fbc:	d1f7      	bne.n	8003fae <UASPEP_INIT+0x7a>
}
 8003fbe:	bc70      	pop	{r4, r5, r6}
 8003fc0:	4770      	bx	lr
 8003fc2:	bf00      	nop
 8003fc4:	08008df0 	.word	0x08008df0

08003fc8 <UASPEP_SEND_PACKET>:
  * @param  pHWHandle Hardware components chosen for communication
  * @param  data Data to be transmitted to controller
  * @param  length Length of the data to be transmitted
  */
bool UASPEP_SEND_PACKET(void *pHWHandle, void *data, uint16_t length)
{
 8003fc8:	b4f0      	push	{r4, r5, r6, r7}
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *)pHWHandle; //cstat !MISRAC2012-Rule-11.5
  bool result;
  if (0U == LL_DMA_IsEnabledStream(pHandle->txDMA, pHandle->txChannel))
 8003fca:	6905      	ldr	r5, [r0, #16]
  return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN) == (DMA_SxCR_EN));
 8003fcc:	4e1b      	ldr	r6, [pc, #108]	@ (800403c <UASPEP_SEND_PACKET+0x74>)
 8003fce:	6884      	ldr	r4, [r0, #8]
 8003fd0:	5d73      	ldrb	r3, [r6, r5]
 8003fd2:	58e7      	ldr	r7, [r4, r3]
 8003fd4:	07ff      	lsls	r7, r7, #31
 8003fd6:	4423      	add	r3, r4
 8003fd8:	d422      	bmi.n	8004020 <UASPEP_SEND_PACKET+0x58>
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 8003fda:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 8003fdc:	6859      	ldr	r1, [r3, #4]
 8003fde:	0c09      	lsrs	r1, r1, #16
 8003fe0:	0409      	lsls	r1, r1, #16
 8003fe2:	430a      	orrs	r2, r1
 8003fe4:	605a      	str	r2, [r3, #4]
  if (NULL == DMAx)
 8003fe6:	b1ac      	cbz	r4, 8004014 <UASPEP_SEND_PACKET+0x4c>
    register __IO uint32_t *preg = __DMA_PTR_REG_OFFSET(DMAx->LIFCR,(Stream<=3)?0:1);
 8003fe8:	2d03      	cmp	r5, #3
 8003fea:	bf94      	ite	ls
 8003fec:	2200      	movls	r2, #0
 8003fee:	2201      	movhi	r2, #1
    WRITE_REG (*preg, 1 << __LL_DMA_IT_TC_BIT(Stream));
 8003ff0:	f015 0503 	ands.w	r5, r5, #3
    register __IO uint32_t *preg = __DMA_PTR_REG_OFFSET(DMAx->LIFCR,(Stream<=3)?0:1);
 8003ff4:	f104 0308 	add.w	r3, r4, #8
    WRITE_REG (*preg, 1 << __LL_DMA_IT_TC_BIT(Stream));
 8003ff8:	d015      	beq.n	8004026 <UASPEP_SEND_PACKET+0x5e>
 8003ffa:	2d01      	cmp	r5, #1
 8003ffc:	d01a      	beq.n	8004034 <UASPEP_SEND_PACKET+0x6c>
 8003ffe:	2d02      	cmp	r5, #2
 8004000:	bf14      	ite	ne
 8004002:	f04f 6100 	movne.w	r1, #134217728	@ 0x8000000
 8004006:	f44f 1100 	moveq.w	r1, #2097152	@ 0x200000
 800400a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 800400e:	6903      	ldr	r3, [r0, #16]
 8004010:	5cf3      	ldrb	r3, [r6, r3]
 8004012:	4423      	add	r3, r4
 8004014:	681a      	ldr	r2, [r3, #0]
    //cstat !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6
    LL_DMA_SetMemoryAddress(pHandle->txDMA, pHandle->txChannel, (uint32_t)data);
    LL_DMA_SetDataLength(pHandle->txDMA, pHandle->txChannel, length);
    LL_DMA_ClearFlag_TC(pHandle->txDMA, pHandle->txChannel);
    LL_DMA_EnableStream(pHandle->txDMA, pHandle->txChannel);
    result = true;
 8004016:	2001      	movs	r0, #1
 8004018:	4302      	orrs	r2, r0
  else
  {
    result = false;
  }
  return (result);
}
 800401a:	bcf0      	pop	{r4, r5, r6, r7}
 800401c:	601a      	str	r2, [r3, #0]
 800401e:	4770      	bx	lr
    result = false;
 8004020:	2000      	movs	r0, #0
}
 8004022:	bcf0      	pop	{r4, r5, r6, r7}
 8004024:	4770      	bx	lr
 8004026:	2120      	movs	r1, #32
 8004028:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800402c:	6903      	ldr	r3, [r0, #16]
 800402e:	5cf3      	ldrb	r3, [r6, r3]
 8004030:	4423      	add	r3, r4
 8004032:	e7ef      	b.n	8004014 <UASPEP_SEND_PACKET+0x4c>
 8004034:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004038:	e7f6      	b.n	8004028 <UASPEP_SEND_PACKET+0x60>
 800403a:	bf00      	nop
 800403c:	08008df0 	.word	0x08008df0

08004040 <UASPEP_RECEIVE_BUFFER>:
  * @param  pHWHandle Hardware components chosen for communication
  * @param  buffer Buffer which will receive the communicated data
  * @param  length Length of the received data
  */
void UASPEP_RECEIVE_BUFFER(void *pHWHandle, void* buffer, uint16_t length)
{
 8004040:	b430      	push	{r4, r5}
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 8004042:	68c3      	ldr	r3, [r0, #12]
 8004044:	4d09      	ldr	r5, [pc, #36]	@ (800406c <UASPEP_RECEIVE_BUFFER+0x2c>)
 8004046:	6844      	ldr	r4, [r0, #4]
 8004048:	5ce8      	ldrb	r0, [r5, r3]
 800404a:	eb04 0c00 	add.w	ip, r4, r0
 800404e:	f8cc 100c 	str.w	r1, [ip, #12]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 8004052:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8004056:	0c1b      	lsrs	r3, r3, #16
 8004058:	041b      	lsls	r3, r3, #16
 800405a:	4313      	orrs	r3, r2
 800405c:	f8cc 3004 	str.w	r3, [ip, #4]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8004060:	5823      	ldr	r3, [r4, r0]
 8004062:	f043 0301 	orr.w	r3, r3, #1
 8004066:	5023      	str	r3, [r4, r0]
  //cstat !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6
  LL_DMA_SetMemoryAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)buffer);
  LL_DMA_SetDataLength(pHandle->rxDMA, pHandle->rxChannel, length);

  LL_DMA_EnableStream(pHandle->rxDMA, pHandle->rxChannel);
}
 8004068:	bc30      	pop	{r4, r5}
 800406a:	4770      	bx	lr
 800406c:	08008df0 	.word	0x08008df0

08004070 <UASPEP_IDLE_ENABLE>:
  * @param  pHandle Handler of the current instance of the UASPEP component
  */
void UASPEP_IDLE_ENABLE(void *pHWHandle)
{
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *)pHWHandle; //cstat !MISRAC2012-Rule-11.5
  LL_USART_ClearFlag_IDLE(pHandle->USARTx);
 8004070:	6802      	ldr	r2, [r0, #0]
{
 8004072:	b082      	sub	sp, #8
  tmpreg = USARTx->SR;
 8004074:	6813      	ldr	r3, [r2, #0]
 8004076:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8004078:	9b01      	ldr	r3, [sp, #4]
  tmpreg = USARTx->DR;
 800407a:	6853      	ldr	r3, [r2, #4]
 800407c:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 800407e:	9b01      	ldr	r3, [sp, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8004080:	320c      	adds	r2, #12
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004082:	e852 3f00 	ldrex	r3, [r2]
 8004086:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800408a:	e842 3100 	strex	r1, r3, [r2]
 800408e:	2900      	cmp	r1, #0
 8004090:	d1f7      	bne.n	8004082 <UASPEP_IDLE_ENABLE+0x12>
  LL_USART_EnableIT_IDLE(pHandle->USARTx);
}
 8004092:	b002      	add	sp, #8
 8004094:	4770      	bx	lr
 8004096:	bf00      	nop

08004098 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004098:	4a03      	ldr	r2, [pc, #12]	@ (80040a8 <SystemInit+0x10>)
 800409a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800409e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80040a2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80040a6:	4770      	bx	lr
 80040a8:	e000ed00 	.word	0xe000ed00

080040ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80040ac:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80040ae:	4a0e      	ldr	r2, [pc, #56]	@ (80040e8 <HAL_InitTick+0x3c>)
 80040b0:	4b0e      	ldr	r3, [pc, #56]	@ (80040ec <HAL_InitTick+0x40>)
 80040b2:	7812      	ldrb	r2, [r2, #0]
 80040b4:	681b      	ldr	r3, [r3, #0]
{
 80040b6:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80040b8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80040bc:	fbb0 f0f2 	udiv	r0, r0, r2
 80040c0:	fbb3 f0f0 	udiv	r0, r3, r0
 80040c4:	f000 fae6 	bl	8004694 <HAL_SYSTICK_Config>
 80040c8:	b908      	cbnz	r0, 80040ce <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80040ca:	2d0f      	cmp	r5, #15
 80040cc:	d901      	bls.n	80040d2 <HAL_InitTick+0x26>
    return HAL_ERROR;
 80040ce:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80040d0:	bd38      	pop	{r3, r4, r5, pc}
 80040d2:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80040d4:	4602      	mov	r2, r0
 80040d6:	4629      	mov	r1, r5
 80040d8:	f04f 30ff 	mov.w	r0, #4294967295
 80040dc:	f000 fa90 	bl	8004600 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80040e0:	4b03      	ldr	r3, [pc, #12]	@ (80040f0 <HAL_InitTick+0x44>)
 80040e2:	4620      	mov	r0, r4
 80040e4:	601d      	str	r5, [r3, #0]
}
 80040e6:	bd38      	pop	{r3, r4, r5, pc}
 80040e8:	200004b8 	.word	0x200004b8
 80040ec:	200004b4 	.word	0x200004b4
 80040f0:	200004bc 	.word	0x200004bc

080040f4 <HAL_Init>:
{
 80040f4:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80040f6:	4b0b      	ldr	r3, [pc, #44]	@ (8004124 <HAL_Init+0x30>)
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040fe:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004106:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800410e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004110:	2003      	movs	r0, #3
 8004112:	f000 fa63 	bl	80045dc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8004116:	2004      	movs	r0, #4
 8004118:	f7ff ffc8 	bl	80040ac <HAL_InitTick>
  HAL_MspInit();
 800411c:	f7ff fc02 	bl	8003924 <HAL_MspInit>
}
 8004120:	2000      	movs	r0, #0
 8004122:	bd08      	pop	{r3, pc}
 8004124:	40023c00 	.word	0x40023c00

08004128 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004128:	4a03      	ldr	r2, [pc, #12]	@ (8004138 <HAL_IncTick+0x10>)
 800412a:	4b04      	ldr	r3, [pc, #16]	@ (800413c <HAL_IncTick+0x14>)
 800412c:	6811      	ldr	r1, [r2, #0]
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	440b      	add	r3, r1
 8004132:	6013      	str	r3, [r2, #0]
}
 8004134:	4770      	bx	lr
 8004136:	bf00      	nop
 8004138:	20001978 	.word	0x20001978
 800413c:	200004b8 	.word	0x200004b8

08004140 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004140:	4b01      	ldr	r3, [pc, #4]	@ (8004148 <HAL_GetTick+0x8>)
 8004142:	6818      	ldr	r0, [r3, #0]
}
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	20001978 	.word	0x20001978

0800414c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800414c:	b538      	push	{r3, r4, r5, lr}
 800414e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004150:	f7ff fff6 	bl	8004140 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004154:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8004156:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8004158:	d002      	beq.n	8004160 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800415a:	4b04      	ldr	r3, [pc, #16]	@ (800416c <HAL_Delay+0x20>)
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004160:	f7ff ffee 	bl	8004140 <HAL_GetTick>
 8004164:	1b40      	subs	r0, r0, r5
 8004166:	42a0      	cmp	r0, r4
 8004168:	d3fa      	bcc.n	8004160 <HAL_Delay+0x14>
  {
  }
}
 800416a:	bd38      	pop	{r3, r4, r5, pc}
 800416c:	200004b8 	.word	0x200004b8

08004170 <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;

  /* Check ADC handle */
  if (hadc == NULL)
 8004170:	2800      	cmp	r0, #0
 8004172:	f000 809e 	beq.w	80042b2 <HAL_ADC_Init+0x142>
{
 8004176:	b538      	push	{r3, r4, r5, lr}
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8004178:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 800417a:	4604      	mov	r4, r0
 800417c:	b13d      	cbz	r5, 800418e <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800417e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004180:	06db      	lsls	r3, r3, #27
 8004182:	d50c      	bpl.n	800419e <HAL_ADC_Init+0x2e>
  {
    tmp_hal_status = HAL_ERROR;
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004184:	2300      	movs	r3, #0
 8004186:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    tmp_hal_status = HAL_ERROR;
 800418a:	2001      	movs	r0, #1

  /* Return function status */
  return tmp_hal_status;
}
 800418c:	bd38      	pop	{r3, r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 800418e:	f7fc fa9f 	bl	80006d0 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8004192:	6465      	str	r5, [r4, #68]	@ 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004194:	6c23      	ldr	r3, [r4, #64]	@ 0x40
    hadc->Lock = HAL_UNLOCKED;
 8004196:	f884 503c 	strb.w	r5, [r4, #60]	@ 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800419a:	06db      	lsls	r3, r3, #27
 800419c:	d4f2      	bmi.n	8004184 <HAL_ADC_Init+0x14>
    ADC_STATE_CLR_SET(hadc->State,
 800419e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80041a0:	4a47      	ldr	r2, [pc, #284]	@ (80042c0 <HAL_ADC_Init+0x150>)
    ADC_STATE_CLR_SET(hadc->State,
 80041a2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80041a6:	f023 0302 	bic.w	r3, r3, #2
 80041aa:	f043 0302 	orr.w	r3, r3, #2
 80041ae:	6423      	str	r3, [r4, #64]	@ 0x40
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80041b0:	6851      	ldr	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80041b2:	6823      	ldr	r3, [r4, #0]
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80041b4:	f421 3140 	bic.w	r1, r1, #196608	@ 0x30000
 80041b8:	6051      	str	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80041ba:	6851      	ldr	r1, [r2, #4]
 80041bc:	6860      	ldr	r0, [r4, #4]
 80041be:	4301      	orrs	r1, r0
 80041c0:	6051      	str	r1, [r2, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80041c2:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80041c4:	6920      	ldr	r0, [r4, #16]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80041c6:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80041c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80041cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80041ce:	685a      	ldr	r2, [r3, #4]
 80041d0:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80041d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80041d6:	685a      	ldr	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80041d8:	68e0      	ldr	r0, [r4, #12]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80041da:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80041de:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80041e0:	685a      	ldr	r2, [r3, #4]
 80041e2:	430a      	orrs	r2, r1
 80041e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80041e6:	689a      	ldr	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80041e8:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80041ea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80041ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80041f0:	689a      	ldr	r2, [r3, #8]
 80041f2:	4302      	orrs	r2, r0
 80041f4:	609a      	str	r2, [r3, #8]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80041f6:	4a33      	ldr	r2, [pc, #204]	@ (80042c4 <HAL_ADC_Init+0x154>)
 80041f8:	4291      	cmp	r1, r2
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80041fa:	689a      	ldr	r2, [r3, #8]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80041fc:	d051      	beq.n	80042a2 <HAL_ADC_Init+0x132>
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80041fe:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004202:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004204:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004206:	689a      	ldr	r2, [r3, #8]
 8004208:	4311      	orrs	r1, r2
 800420a:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800420c:	689a      	ldr	r2, [r3, #8]
 800420e:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004212:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004214:	689a      	ldr	r2, [r3, #8]
 8004216:	4302      	orrs	r2, r0
 8004218:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800421a:	689a      	ldr	r2, [r3, #8]
 800421c:	f022 0202 	bic.w	r2, r2, #2
 8004220:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004222:	689a      	ldr	r2, [r3, #8]
 8004224:	7e21      	ldrb	r1, [r4, #24]
 8004226:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800422a:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800422c:	f894 2020 	ldrb.w	r2, [r4, #32]
 8004230:	2a00      	cmp	r2, #0
 8004232:	d040      	beq.n	80042b6 <HAL_ADC_Init+0x146>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004234:	685a      	ldr	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004236:	6a61      	ldr	r1, [r4, #36]	@ 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004238:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800423c:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800423e:	685a      	ldr	r2, [r3, #4]
 8004240:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004244:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004246:	685a      	ldr	r2, [r3, #4]
 8004248:	3901      	subs	r1, #1
 800424a:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800424e:	605a      	str	r2, [r3, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004250:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004252:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004254:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004258:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800425a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800425c:	3901      	subs	r1, #1
 800425e:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8004262:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004264:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004266:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004268:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800426c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800426e:	689a      	ldr	r2, [r3, #8]
 8004270:	f894 0030 	ldrb.w	r0, [r4, #48]	@ 0x30
 8004274:	ea42 2240 	orr.w	r2, r2, r0, lsl #9
 8004278:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800427a:	689a      	ldr	r2, [r3, #8]
 800427c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004280:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004282:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8004284:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004286:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 800428a:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800428c:	6460      	str	r0, [r4, #68]	@ 0x44
    ADC_STATE_CLR_SET(hadc->State,
 800428e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004290:	f023 0303 	bic.w	r3, r3, #3
 8004294:	f043 0301 	orr.w	r3, r3, #1
 8004298:	6423      	str	r3, [r4, #64]	@ 0x40
  __HAL_UNLOCK(hadc);
 800429a:	2300      	movs	r3, #0
 800429c:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 80042a0:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80042a2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80042a6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80042a8:	689a      	ldr	r2, [r3, #8]
 80042aa:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80042ae:	609a      	str	r2, [r3, #8]
 80042b0:	e7b3      	b.n	800421a <HAL_ADC_Init+0xaa>
    return HAL_ERROR;
 80042b2:	2001      	movs	r0, #1
}
 80042b4:	4770      	bx	lr
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80042b6:	685a      	ldr	r2, [r3, #4]
 80042b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80042bc:	605a      	str	r2, [r3, #4]
 80042be:	e7c7      	b.n	8004250 <HAL_ADC_Init+0xe0>
 80042c0:	40012300 	.word	0x40012300
 80042c4:	0f000001 	.word	0x0f000001

080042c8 <HAL_ADC_ConfigChannel>:
{
 80042c8:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 80042ca:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 80042ce:	b082      	sub	sp, #8
 80042d0:	4602      	mov	r2, r0
  __HAL_LOCK(hadc);
 80042d2:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 80042d4:	f04f 0000 	mov.w	r0, #0
 80042d8:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 80042da:	f000 809e 	beq.w	800441a <HAL_ADC_ConfigChannel+0x152>
 80042de:	2301      	movs	r3, #1
 80042e0:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 80042e4:	680d      	ldr	r5, [r1, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80042e6:	6813      	ldr	r3, [r2, #0]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80042e8:	688c      	ldr	r4, [r1, #8]
  if (sConfig->Channel > ADC_CHANNEL_9)
 80042ea:	2d09      	cmp	r5, #9
 80042ec:	b2a8      	uxth	r0, r5
 80042ee:	d828      	bhi.n	8004342 <HAL_ADC_ConfigChannel+0x7a>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80042f0:	691e      	ldr	r6, [r3, #16]
 80042f2:	eb05 0e45 	add.w	lr, r5, r5, lsl #1
 80042f6:	f04f 0c07 	mov.w	ip, #7
 80042fa:	fa0c fc0e 	lsl.w	ip, ip, lr
 80042fe:	ea26 060c 	bic.w	r6, r6, ip
 8004302:	611e      	str	r6, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004304:	691e      	ldr	r6, [r3, #16]
 8004306:	fa04 f40e 	lsl.w	r4, r4, lr
 800430a:	4334      	orrs	r4, r6
 800430c:	611c      	str	r4, [r3, #16]
  if (sConfig->Rank < 7U)
 800430e:	684c      	ldr	r4, [r1, #4]
 8004310:	2c06      	cmp	r4, #6
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004312:	eb04 0184 	add.w	r1, r4, r4, lsl #2
  if (sConfig->Rank < 7U)
 8004316:	d82a      	bhi.n	800436e <HAL_ADC_ConfigChannel+0xa6>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004318:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 800431a:	3905      	subs	r1, #5
 800431c:	f04f 0c1f 	mov.w	ip, #31
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004320:	4088      	lsls	r0, r1
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004322:	fa0c f101 	lsl.w	r1, ip, r1
 8004326:	ea24 0101 	bic.w	r1, r4, r1
 800432a:	6359      	str	r1, [r3, #52]	@ 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800432c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800432e:	4308      	orrs	r0, r1
 8004330:	6358      	str	r0, [r3, #52]	@ 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004332:	493b      	ldr	r1, [pc, #236]	@ (8004420 <HAL_ADC_ConfigChannel+0x158>)
 8004334:	428b      	cmp	r3, r1
 8004336:	d02b      	beq.n	8004390 <HAL_ADC_ConfigChannel+0xc8>
  __HAL_UNLOCK(hadc);
 8004338:	2000      	movs	r0, #0
 800433a:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c
}
 800433e:	b002      	add	sp, #8
 8004340:	bd70      	pop	{r4, r5, r6, pc}
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004342:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
 8004346:	68de      	ldr	r6, [r3, #12]
 8004348:	f1ac 0c1e 	sub.w	ip, ip, #30
 800434c:	f04f 0e07 	mov.w	lr, #7
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004350:	fa04 f40c 	lsl.w	r4, r4, ip
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004354:	fa0e fc0c 	lsl.w	ip, lr, ip
 8004358:	ea26 060c 	bic.w	r6, r6, ip
 800435c:	60de      	str	r6, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800435e:	68de      	ldr	r6, [r3, #12]
 8004360:	4334      	orrs	r4, r6
 8004362:	60dc      	str	r4, [r3, #12]
  if (sConfig->Rank < 7U)
 8004364:	684c      	ldr	r4, [r1, #4]
 8004366:	2c06      	cmp	r4, #6
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004368:	eb04 0184 	add.w	r1, r4, r4, lsl #2
  if (sConfig->Rank < 7U)
 800436c:	d9d4      	bls.n	8004318 <HAL_ADC_ConfigChannel+0x50>
  else if (sConfig->Rank < 13U)
 800436e:	2c0c      	cmp	r4, #12
 8004370:	d81f      	bhi.n	80043b2 <HAL_ADC_ConfigChannel+0xea>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004372:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 8004374:	3923      	subs	r1, #35	@ 0x23
 8004376:	261f      	movs	r6, #31
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004378:	4088      	lsls	r0, r1
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800437a:	fa06 f101 	lsl.w	r1, r6, r1
 800437e:	ea24 0101 	bic.w	r1, r4, r1
 8004382:	6319      	str	r1, [r3, #48]	@ 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004384:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004386:	4308      	orrs	r0, r1
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004388:	4925      	ldr	r1, [pc, #148]	@ (8004420 <HAL_ADC_ConfigChannel+0x158>)
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800438a:	6318      	str	r0, [r3, #48]	@ 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800438c:	428b      	cmp	r3, r1
 800438e:	d1d3      	bne.n	8004338 <HAL_ADC_ConfigChannel+0x70>
 8004390:	2d12      	cmp	r5, #18
 8004392:	d01b      	beq.n	80043cc <HAL_ADC_ConfigChannel+0x104>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004394:	4b23      	ldr	r3, [pc, #140]	@ (8004424 <HAL_ADC_ConfigChannel+0x15c>)
 8004396:	429d      	cmp	r5, r3
 8004398:	d022      	beq.n	80043e0 <HAL_ADC_ConfigChannel+0x118>
 800439a:	2d11      	cmp	r5, #17
 800439c:	d1cc      	bne.n	8004338 <HAL_ADC_ConfigChannel+0x70>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800439e:	4b22      	ldr	r3, [pc, #136]	@ (8004428 <HAL_ADC_ConfigChannel+0x160>)
 80043a0:	6859      	ldr	r1, [r3, #4]
 80043a2:	f421 0180 	bic.w	r1, r1, #4194304	@ 0x400000
 80043a6:	6059      	str	r1, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80043a8:	6859      	ldr	r1, [r3, #4]
 80043aa:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80043ae:	6059      	str	r1, [r3, #4]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80043b0:	e7c2      	b.n	8004338 <HAL_ADC_ConfigChannel+0x70>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80043b2:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 80043b4:	3941      	subs	r1, #65	@ 0x41
 80043b6:	261f      	movs	r6, #31
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80043b8:	4088      	lsls	r0, r1
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80043ba:	fa06 f101 	lsl.w	r1, r6, r1
 80043be:	ea24 0101 	bic.w	r1, r4, r1
 80043c2:	62d9      	str	r1, [r3, #44]	@ 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80043c4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80043c6:	4308      	orrs	r0, r1
 80043c8:	62d8      	str	r0, [r3, #44]	@ 0x2c
 80043ca:	e7b2      	b.n	8004332 <HAL_ADC_ConfigChannel+0x6a>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80043cc:	4b16      	ldr	r3, [pc, #88]	@ (8004428 <HAL_ADC_ConfigChannel+0x160>)
 80043ce:	6859      	ldr	r1, [r3, #4]
 80043d0:	f421 0100 	bic.w	r1, r1, #8388608	@ 0x800000
 80043d4:	6059      	str	r1, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80043d6:	6859      	ldr	r1, [r3, #4]
 80043d8:	f441 0180 	orr.w	r1, r1, #4194304	@ 0x400000
 80043dc:	6059      	str	r1, [r3, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80043de:	e7ab      	b.n	8004338 <HAL_ADC_ConfigChannel+0x70>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80043e0:	4b11      	ldr	r3, [pc, #68]	@ (8004428 <HAL_ADC_ConfigChannel+0x160>)
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80043e2:	4c12      	ldr	r4, [pc, #72]	@ (800442c <HAL_ADC_ConfigChannel+0x164>)
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80043e4:	6859      	ldr	r1, [r3, #4]
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80043e6:	4812      	ldr	r0, [pc, #72]	@ (8004430 <HAL_ADC_ConfigChannel+0x168>)
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80043e8:	f421 0180 	bic.w	r1, r1, #4194304	@ 0x400000
 80043ec:	6059      	str	r1, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80043ee:	6859      	ldr	r1, [r3, #4]
 80043f0:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80043f4:	6059      	str	r1, [r3, #4]
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80043f6:	6823      	ldr	r3, [r4, #0]
 80043f8:	fba0 0303 	umull	r0, r3, r0, r3
 80043fc:	0c9b      	lsrs	r3, r3, #18
 80043fe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004402:	005b      	lsls	r3, r3, #1
 8004404:	9301      	str	r3, [sp, #4]
      while (counter != 0U)
 8004406:	9b01      	ldr	r3, [sp, #4]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d095      	beq.n	8004338 <HAL_ADC_ConfigChannel+0x70>
        counter--;
 800440c:	9b01      	ldr	r3, [sp, #4]
 800440e:	3b01      	subs	r3, #1
 8004410:	9301      	str	r3, [sp, #4]
      while (counter != 0U)
 8004412:	9b01      	ldr	r3, [sp, #4]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d1f9      	bne.n	800440c <HAL_ADC_ConfigChannel+0x144>
 8004418:	e78e      	b.n	8004338 <HAL_ADC_ConfigChannel+0x70>
  __HAL_LOCK(hadc);
 800441a:	2002      	movs	r0, #2
}
 800441c:	b002      	add	sp, #8
 800441e:	bd70      	pop	{r4, r5, r6, pc}
 8004420:	40012000 	.word	0x40012000
 8004424:	10000012 	.word	0x10000012
 8004428:	40012300 	.word	0x40012300
 800442c:	200004b4 	.word	0x200004b4
 8004430:	431bde83 	.word	0x431bde83

08004434 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8004434:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004436:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
  if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800443a:	698d      	ldr	r5, [r1, #24]
  __HAL_LOCK(hadc);
 800443c:	2b01      	cmp	r3, #1
 800443e:	f000 80c2 	beq.w	80045c6 <HAL_ADCEx_InjectedConfigChannel+0x192>
 8004442:	2301      	movs	r3, #1
 8004444:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8004448:	680c      	ldr	r4, [r1, #0]
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 800444a:	6803      	ldr	r3, [r0, #0]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 800444c:	688a      	ldr	r2, [r1, #8]
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 800444e:	2c09      	cmp	r4, #9
 8004450:	4684      	mov	ip, r0
 8004452:	b2a0      	uxth	r0, r4
 8004454:	d861      	bhi.n	800451a <HAL_ADCEx_InjectedConfigChannel+0xe6>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8004456:	691e      	ldr	r6, [r3, #16]
 8004458:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 800445c:	2707      	movs	r7, #7
 800445e:	fa07 f70e 	lsl.w	r7, r7, lr
 8004462:	ea26 0607 	bic.w	r6, r6, r7
 8004466:	611e      	str	r6, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8004468:	691e      	ldr	r6, [r3, #16]
 800446a:	fa02 f20e 	lsl.w	r2, r2, lr
 800446e:	4332      	orrs	r2, r6
 8004470:	611a      	str	r2, [r3, #16]
  }

  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8004472:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8004474:	690f      	ldr	r7, [r1, #16]

  /* Rank configuration */

  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 8004476:	684e      	ldr	r6, [r1, #4]
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8004478:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 800447c:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 800447e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004480:	f107 3eff 	add.w	lr, r7, #4294967295
 8004484:	ea42 520e 	orr.w	r2, r2, lr, lsl #20
 8004488:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 800448a:	1cf2      	adds	r2, r6, #3
 800448c:	1bd2      	subs	r2, r2, r7
 800448e:	b2d2      	uxtb	r2, r2
 8004490:	6b9f      	ldr	r7, [r3, #56]	@ 0x38
 8004492:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004496:	f04f 0e1f 	mov.w	lr, #31

  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 800449a:	4090      	lsls	r0, r2
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 800449c:	fa0e f202 	lsl.w	r2, lr, r2
 80044a0:	ea27 0202 	bic.w	r2, r7, r2
 80044a4:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 80044a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80044a8:	4310      	orrs	r0, r2
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80044aa:	4a48      	ldr	r2, [pc, #288]	@ (80045cc <HAL_ADCEx_InjectedConfigChannel+0x198>)
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 80044ac:	6398      	str	r0, [r3, #56]	@ 0x38
  if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80044ae:	4295      	cmp	r5, r2
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 80044b0:	689a      	ldr	r2, [r3, #8]
 80044b2:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
 80044b6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 80044b8:	689a      	ldr	r2, [r3, #8]
  if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80044ba:	d065      	beq.n	8004588 <HAL_ADCEx_InjectedConfigChannel+0x154>
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 80044bc:	4315      	orrs	r5, r2
 80044be:	609d      	str	r5, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 80044c0:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 80044c2:	69c8      	ldr	r0, [r1, #28]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 80044c4:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 80044c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 80044ca:	689a      	ldr	r2, [r3, #8]
 80044cc:	4302      	orrs	r2, r0
 80044ce:	609a      	str	r2, [r3, #8]
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
  }

  if (sConfigInjected->AutoInjectedConv != DISABLE)
 80044d0:	7d4a      	ldrb	r2, [r1, #21]
 80044d2:	2a00      	cmp	r2, #0
 80044d4:	d031      	beq.n	800453a <HAL_ADCEx_InjectedConfigChannel+0x106>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 80044d6:	685a      	ldr	r2, [r3, #4]
 80044d8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80044dc:	605a      	str	r2, [r3, #4]
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
  }

  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 80044de:	7d0a      	ldrb	r2, [r1, #20]
 80044e0:	2a00      	cmp	r2, #0
 80044e2:	d031      	beq.n	8004548 <HAL_ADCEx_InjectedConfigChannel+0x114>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 80044e4:	685a      	ldr	r2, [r3, #4]
 80044e6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80044ea:	605a      	str	r2, [r3, #4]
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
  }

  switch (sConfigInjected->InjectedRank)
 80044ec:	2e02      	cmp	r6, #2
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 80044ee:	68ca      	ldr	r2, [r1, #12]
  switch (sConfigInjected->InjectedRank)
 80044f0:	d031      	beq.n	8004556 <HAL_ADCEx_InjectedConfigChannel+0x122>
 80044f2:	2e03      	cmp	r6, #3
 80044f4:	d056      	beq.n	80045a4 <HAL_ADCEx_InjectedConfigChannel+0x170>
 80044f6:	2e01      	cmp	r6, #1
 80044f8:	d04a      	beq.n	8004590 <HAL_ADCEx_InjectedConfigChannel+0x15c>
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
      break;
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 80044fa:	6a19      	ldr	r1, [r3, #32]
 80044fc:	f421 617f 	bic.w	r1, r1, #4080	@ 0xff0
 8004500:	f021 010f 	bic.w	r1, r1, #15
 8004504:	6219      	str	r1, [r3, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8004506:	6a19      	ldr	r1, [r3, #32]
 8004508:	430a      	orrs	r2, r1
 800450a:	621a      	str	r2, [r3, #32]
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 800450c:	4a30      	ldr	r2, [pc, #192]	@ (80045d0 <HAL_ADCEx_InjectedConfigChannel+0x19c>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d02d      	beq.n	800456e <HAL_ADCEx_InjectedConfigChannel+0x13a>
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004512:	2000      	movs	r0, #0
 8004514:	f88c 003c 	strb.w	r0, [ip, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
}
 8004518:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 800451a:	eb00 0640 	add.w	r6, r0, r0, lsl #1
 800451e:	68df      	ldr	r7, [r3, #12]
 8004520:	3e1e      	subs	r6, #30
 8004522:	f04f 0e07 	mov.w	lr, #7
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8004526:	40b2      	lsls	r2, r6
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8004528:	fa0e f606 	lsl.w	r6, lr, r6
 800452c:	ea27 0606 	bic.w	r6, r7, r6
 8004530:	60de      	str	r6, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8004532:	68de      	ldr	r6, [r3, #12]
 8004534:	4332      	orrs	r2, r6
 8004536:	60da      	str	r2, [r3, #12]
 8004538:	e79b      	b.n	8004472 <HAL_ADCEx_InjectedConfigChannel+0x3e>
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 800453a:	685a      	ldr	r2, [r3, #4]
 800453c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004540:	605a      	str	r2, [r3, #4]
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8004542:	7d0a      	ldrb	r2, [r1, #20]
 8004544:	2a00      	cmp	r2, #0
 8004546:	d1cd      	bne.n	80044e4 <HAL_ADCEx_InjectedConfigChannel+0xb0>
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8004548:	685a      	ldr	r2, [r3, #4]
 800454a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800454e:	605a      	str	r2, [r3, #4]
  switch (sConfigInjected->InjectedRank)
 8004550:	2e02      	cmp	r6, #2
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8004552:	68ca      	ldr	r2, [r1, #12]
  switch (sConfigInjected->InjectedRank)
 8004554:	d1cd      	bne.n	80044f2 <HAL_ADCEx_InjectedConfigChannel+0xbe>
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8004556:	6999      	ldr	r1, [r3, #24]
 8004558:	f421 617f 	bic.w	r1, r1, #4080	@ 0xff0
 800455c:	f021 010f 	bic.w	r1, r1, #15
 8004560:	6199      	str	r1, [r3, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8004562:	6999      	ldr	r1, [r3, #24]
 8004564:	430a      	orrs	r2, r1
 8004566:	619a      	str	r2, [r3, #24]
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8004568:	4a19      	ldr	r2, [pc, #100]	@ (80045d0 <HAL_ADCEx_InjectedConfigChannel+0x19c>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d1d1      	bne.n	8004512 <HAL_ADCEx_InjectedConfigChannel+0xde>
 800456e:	2c12      	cmp	r4, #18
 8004570:	d022      	beq.n	80045b8 <HAL_ADCEx_InjectedConfigChannel+0x184>
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8004572:	4b18      	ldr	r3, [pc, #96]	@ (80045d4 <HAL_ADCEx_InjectedConfigChannel+0x1a0>)
 8004574:	429c      	cmp	r4, r3
 8004576:	d001      	beq.n	800457c <HAL_ADCEx_InjectedConfigChannel+0x148>
 8004578:	2c11      	cmp	r4, #17
 800457a:	d1ca      	bne.n	8004512 <HAL_ADCEx_InjectedConfigChannel+0xde>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800457c:	4a16      	ldr	r2, [pc, #88]	@ (80045d8 <HAL_ADCEx_InjectedConfigChannel+0x1a4>)
 800457e:	6853      	ldr	r3, [r2, #4]
 8004580:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004584:	6053      	str	r3, [r2, #4]
 8004586:	e7c4      	b.n	8004512 <HAL_ADCEx_InjectedConfigChannel+0xde>
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8004588:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 800458c:	609a      	str	r2, [r3, #8]
 800458e:	e79f      	b.n	80044d0 <HAL_ADCEx_InjectedConfigChannel+0x9c>
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8004590:	6959      	ldr	r1, [r3, #20]
 8004592:	f421 617f 	bic.w	r1, r1, #4080	@ 0xff0
 8004596:	f021 010f 	bic.w	r1, r1, #15
 800459a:	6159      	str	r1, [r3, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 800459c:	6959      	ldr	r1, [r3, #20]
 800459e:	430a      	orrs	r2, r1
 80045a0:	615a      	str	r2, [r3, #20]
      break;
 80045a2:	e7b3      	b.n	800450c <HAL_ADCEx_InjectedConfigChannel+0xd8>
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 80045a4:	69d9      	ldr	r1, [r3, #28]
 80045a6:	f421 617f 	bic.w	r1, r1, #4080	@ 0xff0
 80045aa:	f021 010f 	bic.w	r1, r1, #15
 80045ae:	61d9      	str	r1, [r3, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 80045b0:	69d9      	ldr	r1, [r3, #28]
 80045b2:	430a      	orrs	r2, r1
 80045b4:	61da      	str	r2, [r3, #28]
      break;
 80045b6:	e7a9      	b.n	800450c <HAL_ADCEx_InjectedConfigChannel+0xd8>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80045b8:	f8d2 3304 	ldr.w	r3, [r2, #772]	@ 0x304
 80045bc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80045c0:	f8c2 3304 	str.w	r3, [r2, #772]	@ 0x304
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 80045c4:	e7a5      	b.n	8004512 <HAL_ADCEx_InjectedConfigChannel+0xde>
  __HAL_LOCK(hadc);
 80045c6:	2002      	movs	r0, #2
}
 80045c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045ca:	bf00      	nop
 80045cc:	000f0001 	.word	0x000f0001
 80045d0:	40012000 	.word	0x40012000
 80045d4:	10000012 	.word	0x10000012
 80045d8:	40012300 	.word	0x40012300

080045dc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80045dc:	4907      	ldr	r1, [pc, #28]	@ (80045fc <HAL_NVIC_SetPriorityGrouping+0x20>)
 80045de:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80045e0:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80045e2:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80045e6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80045ea:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80045ec:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80045ee:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80045f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80045f6:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	e000ed00 	.word	0xe000ed00

08004600 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004600:	4b1b      	ldr	r3, [pc, #108]	@ (8004670 <HAL_NVIC_SetPriority+0x70>)
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004608:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800460a:	f1c3 0e07 	rsb	lr, r3, #7
 800460e:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004612:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004616:	bf28      	it	cs
 8004618:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800461c:	f1bc 0f06 	cmp.w	ip, #6
 8004620:	d91c      	bls.n	800465c <HAL_NVIC_SetPriority+0x5c>
 8004622:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004626:	f04f 33ff 	mov.w	r3, #4294967295
 800462a:	fa03 f30c 	lsl.w	r3, r3, ip
 800462e:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004632:	f04f 33ff 	mov.w	r3, #4294967295
 8004636:	fa03 f30e 	lsl.w	r3, r3, lr
 800463a:	ea21 0303 	bic.w	r3, r1, r3
 800463e:	fa03 f30c 	lsl.w	r3, r3, ip
 8004642:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004644:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 8004646:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004648:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 800464a:	db0a      	blt.n	8004662 <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800464c:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8004650:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8004654:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8004658:	f85d fb04 	ldr.w	pc, [sp], #4
 800465c:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800465e:	4694      	mov	ip, r2
 8004660:	e7e7      	b.n	8004632 <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004662:	4a04      	ldr	r2, [pc, #16]	@ (8004674 <HAL_NVIC_SetPriority+0x74>)
 8004664:	f000 000f 	and.w	r0, r0, #15
 8004668:	4402      	add	r2, r0
 800466a:	7613      	strb	r3, [r2, #24]
 800466c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004670:	e000ed00 	.word	0xe000ed00
 8004674:	e000ecfc 	.word	0xe000ecfc

08004678 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004678:	2800      	cmp	r0, #0
 800467a:	db07      	blt.n	800468c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800467c:	4a04      	ldr	r2, [pc, #16]	@ (8004690 <HAL_NVIC_EnableIRQ+0x18>)
 800467e:	0941      	lsrs	r1, r0, #5
 8004680:	2301      	movs	r3, #1
 8004682:	f000 001f 	and.w	r0, r0, #31
 8004686:	4083      	lsls	r3, r0
 8004688:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800468c:	4770      	bx	lr
 800468e:	bf00      	nop
 8004690:	e000e100 	.word	0xe000e100

08004694 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004694:	3801      	subs	r0, #1
 8004696:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800469a:	d301      	bcc.n	80046a0 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 800469c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800469e:	4770      	bx	lr
{
 80046a0:	b410      	push	{r4}
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80046a2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046a6:	4c07      	ldr	r4, [pc, #28]	@ (80046c4 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80046a8:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046aa:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 80046ae:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80046b2:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80046b4:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80046b6:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80046b8:	619a      	str	r2, [r3, #24]
}
 80046ba:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80046be:	6119      	str	r1, [r3, #16]
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop
 80046c4:	e000ed00 	.word	0xe000ed00

080046c8 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop

080046cc <HAL_SYSTICK_IRQHandler>:
{
 80046cc:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80046ce:	f7ff fffb 	bl	80046c8 <HAL_SYSTICK_Callback>
}
 80046d2:	bd08      	pop	{r3, pc}

080046d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80046d4:	b538      	push	{r3, r4, r5, lr}
 80046d6:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 80046d8:	f7ff fd32 	bl	8004140 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80046dc:	2c00      	cmp	r4, #0
 80046de:	d06f      	beq.n	80047c0 <HAL_DMA_Init+0xec>

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80046e0:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 80046e2:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_BUSY;
 80046e4:	2102      	movs	r1, #2
 80046e6:	f884 1035 	strb.w	r1, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 80046ea:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	f022 0201 	bic.w	r2, r2, #1
 80046f4:	4605      	mov	r5, r0
 80046f6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80046f8:	e005      	b.n	8004706 <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80046fa:	f7ff fd21 	bl	8004140 <HAL_GetTick>
 80046fe:	1b43      	subs	r3, r0, r5
 8004700:	2b05      	cmp	r3, #5
 8004702:	d839      	bhi.n	8004778 <HAL_DMA_Init+0xa4>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004704:	6823      	ldr	r3, [r4, #0]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	07d1      	lsls	r1, r2, #31
 800470a:	d4f6      	bmi.n	80046fa <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800470c:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8004710:	68e1      	ldr	r1, [r4, #12]
 8004712:	4302      	orrs	r2, r0
 8004714:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004716:	e9d4 5104 	ldrd	r5, r1, [r4, #16]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800471a:	69a0      	ldr	r0, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800471c:	432a      	orrs	r2, r5
 800471e:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004720:	69e1      	ldr	r1, [r4, #28]
  tmp = hdma->Instance->CR;
 8004722:	681d      	ldr	r5, [r3, #0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004724:	4302      	orrs	r2, r0
 8004726:	430a      	orrs	r2, r1
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004728:	4932      	ldr	r1, [pc, #200]	@ (80047f4 <HAL_DMA_Init+0x120>)
 800472a:	4029      	ands	r1, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 800472c:	6a25      	ldr	r5, [r4, #32]
 800472e:	432a      	orrs	r2, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004730:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004732:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8004734:	2904      	cmp	r1, #4
 8004736:	d026      	beq.n	8004786 <HAL_DMA_Init+0xb2>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004738:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800473a:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800473c:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004740:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004742:	b2d8      	uxtb	r0, r3
 8004744:	4a2c      	ldr	r2, [pc, #176]	@ (80047f8 <HAL_DMA_Init+0x124>)
  hdma->Instance->FCR = tmp;
 8004746:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004748:	3810      	subs	r0, #16
 800474a:	fba2 5200 	umull	r5, r2, r2, r0
 800474e:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004750:	492a      	ldr	r1, [pc, #168]	@ (80047fc <HAL_DMA_Init+0x128>)
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004752:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004756:	5c89      	ldrb	r1, [r1, r2]
 8004758:	65e1      	str	r1, [r4, #92]	@ 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800475a:	f023 0303 	bic.w	r3, r3, #3
  if (stream_number > 3U)
 800475e:	285f      	cmp	r0, #95	@ 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004760:	bf88      	it	hi
 8004762:	3304      	addhi	r3, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004764:	223f      	movs	r2, #63	@ 0x3f
 8004766:	408a      	lsls	r2, r1
 8004768:	65a3      	str	r3, [r4, #88]	@ 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800476a:	2000      	movs	r0, #0
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800476c:	609a      	str	r2, [r3, #8]
  hdma->State = HAL_DMA_STATE_READY;
 800476e:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004770:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8004772:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
}
 8004776:	bd38      	pop	{r3, r4, r5, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004778:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800477a:	2220      	movs	r2, #32
 800477c:	6562      	str	r2, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800477e:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      return HAL_TIMEOUT;
 8004782:	4618      	mov	r0, r3
}
 8004784:	bd38      	pop	{r3, r4, r5, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004786:	e9d4 510b 	ldrd	r5, r1, [r4, #44]	@ 0x2c
 800478a:	4329      	orrs	r1, r5
 800478c:	4311      	orrs	r1, r2
  hdma->Instance->CR = tmp;  
 800478e:	6019      	str	r1, [r3, #0]
  tmp = hdma->Instance->FCR;
 8004790:	6959      	ldr	r1, [r3, #20]
    tmp |= hdma->Init.FIFOThreshold;
 8004792:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004794:	f021 0107 	bic.w	r1, r1, #7
 8004798:	4311      	orrs	r1, r2
    tmp |= hdma->Init.FIFOThreshold;
 800479a:	f041 0104 	orr.w	r1, r1, #4
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800479e:	2d00      	cmp	r5, #0
 80047a0:	d0cf      	beq.n	8004742 <HAL_DMA_Init+0x6e>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80047a2:	b178      	cbz	r0, 80047c4 <HAL_DMA_Init+0xf0>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80047a4:	f5b0 5f00 	cmp.w	r0, #8192	@ 0x2000
 80047a8:	d016      	beq.n	80047d8 <HAL_DMA_Init+0x104>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80047aa:	2a02      	cmp	r2, #2
 80047ac:	d903      	bls.n	80047b6 <HAL_DMA_Init+0xe2>
 80047ae:	2a03      	cmp	r2, #3
 80047b0:	d1c7      	bne.n	8004742 <HAL_DMA_Init+0x6e>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80047b2:	01ea      	lsls	r2, r5, #7
 80047b4:	d5c5      	bpl.n	8004742 <HAL_DMA_Init+0x6e>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80047b6:	2240      	movs	r2, #64	@ 0x40
        hdma->State = HAL_DMA_STATE_READY;
 80047b8:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80047ba:	6562      	str	r2, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80047bc:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    return HAL_ERROR;
 80047c0:	2001      	movs	r0, #1
}
 80047c2:	bd38      	pop	{r3, r4, r5, pc}
    switch (tmp)
 80047c4:	2a01      	cmp	r2, #1
 80047c6:	d003      	beq.n	80047d0 <HAL_DMA_Init+0xfc>
 80047c8:	f032 0202 	bics.w	r2, r2, #2
 80047cc:	d1b9      	bne.n	8004742 <HAL_DMA_Init+0x6e>
 80047ce:	e7f0      	b.n	80047b2 <HAL_DMA_Init+0xde>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80047d0:	f1b5 7fc0 	cmp.w	r5, #25165824	@ 0x1800000
 80047d4:	d1b5      	bne.n	8004742 <HAL_DMA_Init+0x6e>
 80047d6:	e7ee      	b.n	80047b6 <HAL_DMA_Init+0xe2>
    switch (tmp)
 80047d8:	2a03      	cmp	r2, #3
 80047da:	d8b2      	bhi.n	8004742 <HAL_DMA_Init+0x6e>
 80047dc:	a001      	add	r0, pc, #4	@ (adr r0, 80047e4 <HAL_DMA_Init+0x110>)
 80047de:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 80047e2:	bf00      	nop
 80047e4:	080047b7 	.word	0x080047b7
 80047e8:	080047b3 	.word	0x080047b3
 80047ec:	080047b7 	.word	0x080047b7
 80047f0:	080047d1 	.word	0x080047d1
 80047f4:	f010803f 	.word	0xf010803f
 80047f8:	aaaaaaab 	.word	0xaaaaaaab
 80047fc:	08008e10 	.word	0x08008e10

08004800 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004804:	2300      	movs	r3, #0
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004806:	680c      	ldr	r4, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004808:	f8df a200 	ldr.w	sl, [pc, #512]	@ 8004a0c <HAL_GPIO_Init+0x20c>
{
 800480c:	b085      	sub	sp, #20
    ioposition = 0x01U << position;
 800480e:	f04f 0b01 	mov.w	fp, #1

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004812:	4689      	mov	r9, r1
 8004814:	e003      	b.n	800481e <HAL_GPIO_Init+0x1e>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004816:	3301      	adds	r3, #1
 8004818:	2b10      	cmp	r3, #16
 800481a:	f000 808c 	beq.w	8004936 <HAL_GPIO_Init+0x136>
    ioposition = 0x01U << position;
 800481e:	fa0b f203 	lsl.w	r2, fp, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004822:	ea02 0804 	and.w	r8, r2, r4
    if(iocurrent == ioposition)
 8004826:	43a2      	bics	r2, r4
 8004828:	d1f5      	bne.n	8004816 <HAL_GPIO_Init+0x16>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800482a:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800482e:	f001 0203 	and.w	r2, r1, #3
 8004832:	ea4f 0c43 	mov.w	ip, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004836:	2503      	movs	r5, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004838:	1e57      	subs	r7, r2, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800483a:	fa05 f50c 	lsl.w	r5, r5, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800483e:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004840:	ea6f 0505 	mvn.w	r5, r5
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004844:	d97a      	bls.n	800493c <HAL_GPIO_Init+0x13c>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004846:	2a03      	cmp	r2, #3
 8004848:	f040 80b1 	bne.w	80049ae <HAL_GPIO_Init+0x1ae>
      temp = GPIOx->MODER;
 800484c:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800484e:	fa02 f20c 	lsl.w	r2, r2, ip
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004852:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004854:	432a      	orrs	r2, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004856:	f411 3f40 	tst.w	r1, #196608	@ 0x30000
      GPIOx->MODER = temp;
 800485a:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800485c:	d0db      	beq.n	8004816 <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800485e:	2200      	movs	r2, #0
 8004860:	9203      	str	r2, [sp, #12]
 8004862:	f8da 2044 	ldr.w	r2, [sl, #68]	@ 0x44
 8004866:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800486a:	f8ca 2044 	str.w	r2, [sl, #68]	@ 0x44
 800486e:	f8da 2044 	ldr.w	r2, [sl, #68]	@ 0x44
 8004872:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8004876:	9203      	str	r2, [sp, #12]
 8004878:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 800487a:	f023 0203 	bic.w	r2, r3, #3
 800487e:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004882:	f003 0703 	and.w	r7, r3, #3
 8004886:	260f      	movs	r6, #15
 8004888:	f502 329c 	add.w	r2, r2, #79872	@ 0x13800
 800488c:	00bf      	lsls	r7, r7, #2
 800488e:	fa06 fc07 	lsl.w	ip, r6, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004892:	4e5b      	ldr	r6, [pc, #364]	@ (8004a00 <HAL_GPIO_Init+0x200>)
        temp = SYSCFG->EXTICR[position >> 2U];
 8004894:	6895      	ldr	r5, [r2, #8]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004896:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004898:	ea25 050c 	bic.w	r5, r5, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800489c:	d022      	beq.n	80048e4 <HAL_GPIO_Init+0xe4>
 800489e:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 80048a2:	42b0      	cmp	r0, r6
 80048a4:	f000 808e 	beq.w	80049c4 <HAL_GPIO_Init+0x1c4>
 80048a8:	4e56      	ldr	r6, [pc, #344]	@ (8004a04 <HAL_GPIO_Init+0x204>)
 80048aa:	42b0      	cmp	r0, r6
 80048ac:	f000 8090 	beq.w	80049d0 <HAL_GPIO_Init+0x1d0>
 80048b0:	f8df c15c 	ldr.w	ip, [pc, #348]	@ 8004a10 <HAL_GPIO_Init+0x210>
 80048b4:	4560      	cmp	r0, ip
 80048b6:	f000 8091 	beq.w	80049dc <HAL_GPIO_Init+0x1dc>
 80048ba:	f8df c158 	ldr.w	ip, [pc, #344]	@ 8004a14 <HAL_GPIO_Init+0x214>
 80048be:	4560      	cmp	r0, ip
 80048c0:	f000 8092 	beq.w	80049e8 <HAL_GPIO_Init+0x1e8>
 80048c4:	f8df c150 	ldr.w	ip, [pc, #336]	@ 8004a18 <HAL_GPIO_Init+0x218>
 80048c8:	4560      	cmp	r0, ip
 80048ca:	f000 8093 	beq.w	80049f4 <HAL_GPIO_Init+0x1f4>
 80048ce:	f8df c14c 	ldr.w	ip, [pc, #332]	@ 8004a1c <HAL_GPIO_Init+0x21c>
 80048d2:	4560      	cmp	r0, ip
 80048d4:	bf0c      	ite	eq
 80048d6:	f04f 0c06 	moveq.w	ip, #6
 80048da:	f04f 0c07 	movne.w	ip, #7
 80048de:	fa0c f707 	lsl.w	r7, ip, r7
 80048e2:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80048e4:	6095      	str	r5, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80048e6:	4a48      	ldr	r2, [pc, #288]	@ (8004a08 <HAL_GPIO_Init+0x208>)
 80048e8:	6892      	ldr	r2, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80048ea:	02ce      	lsls	r6, r1, #11
        temp &= ~((uint32_t)iocurrent);
 80048ec:	ea6f 0508 	mvn.w	r5, r8
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 80048f0:	4e45      	ldr	r6, [pc, #276]	@ (8004a08 <HAL_GPIO_Init+0x208>)
        temp &= ~((uint32_t)iocurrent);
 80048f2:	bf54      	ite	pl
 80048f4:	402a      	andpl	r2, r5
          temp |= iocurrent;
 80048f6:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->RTSR = temp;
 80048fa:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR;
 80048fc:	68f2      	ldr	r2, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 80048fe:	4e42      	ldr	r6, [pc, #264]	@ (8004a08 <HAL_GPIO_Init+0x208>)
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004900:	028f      	lsls	r7, r1, #10
        temp &= ~((uint32_t)iocurrent);
 8004902:	bf54      	ite	pl
 8004904:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8004906:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->FTSR = temp;
 800490a:	60f2      	str	r2, [r6, #12]

        temp = EXTI->EMR;
 800490c:	6872      	ldr	r2, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800490e:	038e      	lsls	r6, r1, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8004910:	4e3d      	ldr	r6, [pc, #244]	@ (8004a08 <HAL_GPIO_Init+0x208>)
        temp &= ~((uint32_t)iocurrent);
 8004912:	bf54      	ite	pl
 8004914:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8004916:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->EMR = temp;
 800491a:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800491c:	6832      	ldr	r2, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800491e:	03c9      	lsls	r1, r1, #15
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004920:	f103 0301 	add.w	r3, r3, #1
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8004924:	4938      	ldr	r1, [pc, #224]	@ (8004a08 <HAL_GPIO_Init+0x208>)
        temp &= ~((uint32_t)iocurrent);
 8004926:	bf54      	ite	pl
 8004928:	402a      	andpl	r2, r5
          temp |= iocurrent;
 800492a:	ea48 0202 	orrmi.w	r2, r8, r2
  for(position = 0U; position < GPIO_NUMBER; position++)
 800492e:	2b10      	cmp	r3, #16
        EXTI->IMR = temp;
 8004930:	600a      	str	r2, [r1, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004932:	f47f af74 	bne.w	800481e <HAL_GPIO_Init+0x1e>
      }
    }
  }
}
 8004936:	b005      	add	sp, #20
 8004938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 800493c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800493e:	ea07 0e05 	and.w	lr, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004942:	f8d9 700c 	ldr.w	r7, [r9, #12]
 8004946:	fa07 f70c 	lsl.w	r7, r7, ip
 800494a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 800494e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8004950:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004952:	ea27 0e08 	bic.w	lr, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004956:	f3c1 1700 	ubfx	r7, r1, #4, #1
 800495a:	409f      	lsls	r7, r3
 800495c:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8004960:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8004962:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004964:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004968:	f8d9 7008 	ldr.w	r7, [r9, #8]
 800496c:	fa07 f70c 	lsl.w	r7, r7, ip
 8004970:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004974:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8004976:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004978:	f47f af68 	bne.w	800484c <HAL_GPIO_Init+0x4c>
        temp = GPIOx->AFR[position >> 3U];
 800497c:	08df      	lsrs	r7, r3, #3
 800497e:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8004982:	9701      	str	r7, [sp, #4]
 8004984:	6a3e      	ldr	r6, [r7, #32]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004986:	f8d9 7010 	ldr.w	r7, [r9, #16]
        temp = GPIOx->AFR[position >> 3U];
 800498a:	9600      	str	r6, [sp, #0]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800498c:	f003 0e07 	and.w	lr, r3, #7
 8004990:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8004994:	260f      	movs	r6, #15
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004996:	fa07 f70e 	lsl.w	r7, r7, lr
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800499a:	fa06 fe0e 	lsl.w	lr, r6, lr
 800499e:	9e00      	ldr	r6, [sp, #0]
 80049a0:	ea26 0e0e 	bic.w	lr, r6, lr
        GPIOx->AFR[position >> 3U] = temp;
 80049a4:	9e01      	ldr	r6, [sp, #4]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80049a6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 80049aa:	6237      	str	r7, [r6, #32]
 80049ac:	e74e      	b.n	800484c <HAL_GPIO_Init+0x4c>
        temp = GPIOx->PUPDR;
 80049ae:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80049b0:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80049b4:	f8d9 7008 	ldr.w	r7, [r9, #8]
 80049b8:	fa07 f70c 	lsl.w	r7, r7, ip
 80049bc:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 80049c0:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049c2:	e743      	b.n	800484c <HAL_GPIO_Init+0x4c>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80049c4:	f04f 0c01 	mov.w	ip, #1
 80049c8:	fa0c f707 	lsl.w	r7, ip, r7
 80049cc:	433d      	orrs	r5, r7
 80049ce:	e789      	b.n	80048e4 <HAL_GPIO_Init+0xe4>
 80049d0:	f04f 0c02 	mov.w	ip, #2
 80049d4:	fa0c f707 	lsl.w	r7, ip, r7
 80049d8:	433d      	orrs	r5, r7
 80049da:	e783      	b.n	80048e4 <HAL_GPIO_Init+0xe4>
 80049dc:	f04f 0c03 	mov.w	ip, #3
 80049e0:	fa0c f707 	lsl.w	r7, ip, r7
 80049e4:	433d      	orrs	r5, r7
 80049e6:	e77d      	b.n	80048e4 <HAL_GPIO_Init+0xe4>
 80049e8:	f04f 0c04 	mov.w	ip, #4
 80049ec:	fa0c f707 	lsl.w	r7, ip, r7
 80049f0:	433d      	orrs	r5, r7
 80049f2:	e777      	b.n	80048e4 <HAL_GPIO_Init+0xe4>
 80049f4:	f04f 0c05 	mov.w	ip, #5
 80049f8:	fa0c f707 	lsl.w	r7, ip, r7
 80049fc:	433d      	orrs	r5, r7
 80049fe:	e771      	b.n	80048e4 <HAL_GPIO_Init+0xe4>
 8004a00:	40020000 	.word	0x40020000
 8004a04:	40020800 	.word	0x40020800
 8004a08:	40013c00 	.word	0x40013c00
 8004a0c:	40023800 	.word	0x40023800
 8004a10:	40020c00 	.word	0x40020c00
 8004a14:	40021000 	.word	0x40021000
 8004a18:	40021400 	.word	0x40021400
 8004a1c:	40021800 	.word	0x40021800

08004a20 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a20:	b902      	cbnz	r2, 8004a24 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004a22:	0409      	lsls	r1, r1, #16
 8004a24:	6181      	str	r1, [r0, #24]
  }
}
 8004a26:	4770      	bx	lr

08004a28 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004a28:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004a2a:	ea01 0203 	and.w	r2, r1, r3
 8004a2e:	ea21 0103 	bic.w	r1, r1, r3
 8004a32:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004a36:	6181      	str	r1, [r0, #24]
}
 8004a38:	4770      	bx	lr
 8004a3a:	bf00      	nop

08004a3c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004a3c:	b530      	push	{r4, r5, lr}
 8004a3e:	b083      	sub	sp, #12
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 8004a40:	4b19      	ldr	r3, [pc, #100]	@ (8004aa8 <HAL_PWREx_EnableOverDrive+0x6c>)
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004a42:	491a      	ldr	r1, [pc, #104]	@ (8004aac <HAL_PWREx_EnableOverDrive+0x70>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004a44:	4d1a      	ldr	r5, [pc, #104]	@ (8004ab0 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8004a46:	2200      	movs	r2, #0
 8004a48:	9201      	str	r2, [sp, #4]
 8004a4a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004a4c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8004a50:	641a      	str	r2, [r3, #64]	@ 0x40
 8004a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a58:	9301      	str	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004a5a:	2201      	movs	r2, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8004a5c:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004a5e:	640a      	str	r2, [r1, #64]	@ 0x40
  tickstart = HAL_GetTick();
 8004a60:	f7ff fb6e 	bl	8004140 <HAL_GetTick>
 8004a64:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004a66:	e005      	b.n	8004a74 <HAL_PWREx_EnableOverDrive+0x38>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004a68:	f7ff fb6a 	bl	8004140 <HAL_GetTick>
 8004a6c:	1b00      	subs	r0, r0, r4
 8004a6e:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8004a72:	d816      	bhi.n	8004aa2 <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004a74:	686b      	ldr	r3, [r5, #4]
 8004a76:	03da      	lsls	r2, r3, #15
 8004a78:	d5f6      	bpl.n	8004a68 <HAL_PWREx_EnableOverDrive+0x2c>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004a7a:	4b0c      	ldr	r3, [pc, #48]	@ (8004aac <HAL_PWREx_EnableOverDrive+0x70>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004a7c:	4d0c      	ldr	r5, [pc, #48]	@ (8004ab0 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004a7e:	2201      	movs	r2, #1
 8004a80:	645a      	str	r2, [r3, #68]	@ 0x44
  tickstart = HAL_GetTick();
 8004a82:	f7ff fb5d 	bl	8004140 <HAL_GetTick>
 8004a86:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004a88:	e005      	b.n	8004a96 <HAL_PWREx_EnableOverDrive+0x5a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004a8a:	f7ff fb59 	bl	8004140 <HAL_GetTick>
 8004a8e:	1b00      	subs	r0, r0, r4
 8004a90:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8004a94:	d805      	bhi.n	8004aa2 <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004a96:	686b      	ldr	r3, [r5, #4]
 8004a98:	039b      	lsls	r3, r3, #14
 8004a9a:	d5f6      	bpl.n	8004a8a <HAL_PWREx_EnableOverDrive+0x4e>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8004a9c:	2000      	movs	r0, #0
}
 8004a9e:	b003      	add	sp, #12
 8004aa0:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 8004aa2:	2003      	movs	r0, #3
}
 8004aa4:	b003      	add	sp, #12
 8004aa6:	bd30      	pop	{r4, r5, pc}
 8004aa8:	40023800 	.word	0x40023800
 8004aac:	420e0000 	.word	0x420e0000
 8004ab0:	40007000 	.word	0x40007000

08004ab4 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ab4:	2800      	cmp	r0, #0
 8004ab6:	f000 8087 	beq.w	8004bc8 <HAL_RCC_ClockConfig+0x114>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004aba:	4a48      	ldr	r2, [pc, #288]	@ (8004bdc <HAL_RCC_ClockConfig+0x128>)
 8004abc:	6813      	ldr	r3, [r2, #0]
 8004abe:	f003 030f 	and.w	r3, r3, #15
 8004ac2:	428b      	cmp	r3, r1
{
 8004ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ac8:	460d      	mov	r5, r1
 8004aca:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004acc:	d209      	bcs.n	8004ae2 <HAL_RCC_ClockConfig+0x2e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ace:	b2cb      	uxtb	r3, r1
 8004ad0:	7013      	strb	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ad2:	6813      	ldr	r3, [r2, #0]
 8004ad4:	f003 030f 	and.w	r3, r3, #15
 8004ad8:	428b      	cmp	r3, r1
 8004ada:	d002      	beq.n	8004ae2 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8004adc:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);

  return HAL_OK;
}
 8004ade:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ae2:	6823      	ldr	r3, [r4, #0]
 8004ae4:	0798      	lsls	r0, r3, #30
 8004ae6:	d514      	bpl.n	8004b12 <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ae8:	0759      	lsls	r1, r3, #29
 8004aea:	d504      	bpl.n	8004af6 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004aec:	493c      	ldr	r1, [pc, #240]	@ (8004be0 <HAL_RCC_ClockConfig+0x12c>)
 8004aee:	688a      	ldr	r2, [r1, #8]
 8004af0:	f442 52e0 	orr.w	r2, r2, #7168	@ 0x1c00
 8004af4:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004af6:	071a      	lsls	r2, r3, #28
 8004af8:	d504      	bpl.n	8004b04 <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004afa:	4939      	ldr	r1, [pc, #228]	@ (8004be0 <HAL_RCC_ClockConfig+0x12c>)
 8004afc:	688a      	ldr	r2, [r1, #8]
 8004afe:	f442 4260 	orr.w	r2, r2, #57344	@ 0xe000
 8004b02:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b04:	4936      	ldr	r1, [pc, #216]	@ (8004be0 <HAL_RCC_ClockConfig+0x12c>)
 8004b06:	68a0      	ldr	r0, [r4, #8]
 8004b08:	688a      	ldr	r2, [r1, #8]
 8004b0a:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8004b0e:	4302      	orrs	r2, r0
 8004b10:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b12:	07df      	lsls	r7, r3, #31
 8004b14:	d521      	bpl.n	8004b5a <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b16:	6862      	ldr	r2, [r4, #4]
 8004b18:	2a01      	cmp	r2, #1
 8004b1a:	d057      	beq.n	8004bcc <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b1c:	1e93      	subs	r3, r2, #2
 8004b1e:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b20:	4b2f      	ldr	r3, [pc, #188]	@ (8004be0 <HAL_RCC_ClockConfig+0x12c>)
 8004b22:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b24:	d94d      	bls.n	8004bc2 <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b26:	0799      	lsls	r1, r3, #30
 8004b28:	d5d8      	bpl.n	8004adc <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b2a:	4e2d      	ldr	r6, [pc, #180]	@ (8004be0 <HAL_RCC_ClockConfig+0x12c>)
 8004b2c:	68b3      	ldr	r3, [r6, #8]
 8004b2e:	f023 0303 	bic.w	r3, r3, #3
 8004b32:	4313      	orrs	r3, r2
 8004b34:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8004b36:	f7ff fb03 	bl	8004140 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b3a:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8004b3e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b40:	e004      	b.n	8004b4c <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b42:	f7ff fafd 	bl	8004140 <HAL_GetTick>
 8004b46:	1bc0      	subs	r0, r0, r7
 8004b48:	4540      	cmp	r0, r8
 8004b4a:	d844      	bhi.n	8004bd6 <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b4c:	68b3      	ldr	r3, [r6, #8]
 8004b4e:	6862      	ldr	r2, [r4, #4]
 8004b50:	f003 030c 	and.w	r3, r3, #12
 8004b54:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004b58:	d1f3      	bne.n	8004b42 <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b5a:	4a20      	ldr	r2, [pc, #128]	@ (8004bdc <HAL_RCC_ClockConfig+0x128>)
 8004b5c:	6813      	ldr	r3, [r2, #0]
 8004b5e:	f003 030f 	and.w	r3, r3, #15
 8004b62:	42ab      	cmp	r3, r5
 8004b64:	d906      	bls.n	8004b74 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b66:	b2eb      	uxtb	r3, r5
 8004b68:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b6a:	6813      	ldr	r3, [r2, #0]
 8004b6c:	f003 030f 	and.w	r3, r3, #15
 8004b70:	42ab      	cmp	r3, r5
 8004b72:	d1b3      	bne.n	8004adc <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b74:	6823      	ldr	r3, [r4, #0]
 8004b76:	075a      	lsls	r2, r3, #29
 8004b78:	d506      	bpl.n	8004b88 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b7a:	4919      	ldr	r1, [pc, #100]	@ (8004be0 <HAL_RCC_ClockConfig+0x12c>)
 8004b7c:	68e0      	ldr	r0, [r4, #12]
 8004b7e:	688a      	ldr	r2, [r1, #8]
 8004b80:	f422 52e0 	bic.w	r2, r2, #7168	@ 0x1c00
 8004b84:	4302      	orrs	r2, r0
 8004b86:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b88:	071b      	lsls	r3, r3, #28
 8004b8a:	d507      	bpl.n	8004b9c <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b8c:	4a14      	ldr	r2, [pc, #80]	@ (8004be0 <HAL_RCC_ClockConfig+0x12c>)
 8004b8e:	6921      	ldr	r1, [r4, #16]
 8004b90:	6893      	ldr	r3, [r2, #8]
 8004b92:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8004b96:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004b9a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b9c:	f000 f84e 	bl	8004c3c <HAL_RCC_GetSysClockFreq>
 8004ba0:	4a0f      	ldr	r2, [pc, #60]	@ (8004be0 <HAL_RCC_ClockConfig+0x12c>)
 8004ba2:	4c10      	ldr	r4, [pc, #64]	@ (8004be4 <HAL_RCC_ClockConfig+0x130>)
 8004ba4:	6892      	ldr	r2, [r2, #8]
 8004ba6:	4910      	ldr	r1, [pc, #64]	@ (8004be8 <HAL_RCC_ClockConfig+0x134>)
 8004ba8:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8004bac:	4603      	mov	r3, r0
 8004bae:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 8004bb0:	480e      	ldr	r0, [pc, #56]	@ (8004bec <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004bb2:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 8004bb4:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004bb6:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 8004bb8:	f7ff fa78 	bl	80040ac <HAL_InitTick>
  return HAL_OK;
 8004bbc:	2000      	movs	r0, #0
}
 8004bbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bc2:	0198      	lsls	r0, r3, #6
 8004bc4:	d4b1      	bmi.n	8004b2a <HAL_RCC_ClockConfig+0x76>
 8004bc6:	e789      	b.n	8004adc <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8004bc8:	2001      	movs	r0, #1
}
 8004bca:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bcc:	4b04      	ldr	r3, [pc, #16]	@ (8004be0 <HAL_RCC_ClockConfig+0x12c>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	039e      	lsls	r6, r3, #14
 8004bd2:	d4aa      	bmi.n	8004b2a <HAL_RCC_ClockConfig+0x76>
 8004bd4:	e782      	b.n	8004adc <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 8004bd6:	2003      	movs	r0, #3
 8004bd8:	e781      	b.n	8004ade <HAL_RCC_ClockConfig+0x2a>
 8004bda:	bf00      	nop
 8004bdc:	40023c00 	.word	0x40023c00
 8004be0:	40023800 	.word	0x40023800
 8004be4:	08008e00 	.word	0x08008e00
 8004be8:	200004b4 	.word	0x200004b4
 8004bec:	200004bc 	.word	0x200004bc

08004bf0 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8004bf0:	4b01      	ldr	r3, [pc, #4]	@ (8004bf8 <HAL_RCC_GetHCLKFreq+0x8>)
}
 8004bf2:	6818      	ldr	r0, [r3, #0]
 8004bf4:	4770      	bx	lr
 8004bf6:	bf00      	nop
 8004bf8:	200004b4 	.word	0x200004b4

08004bfc <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004bfc:	4b04      	ldr	r3, [pc, #16]	@ (8004c10 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8004bfe:	4905      	ldr	r1, [pc, #20]	@ (8004c14 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	4a05      	ldr	r2, [pc, #20]	@ (8004c18 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004c04:	6808      	ldr	r0, [r1, #0]
 8004c06:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8004c0a:	5cd3      	ldrb	r3, [r2, r3]
}
 8004c0c:	40d8      	lsrs	r0, r3
 8004c0e:	4770      	bx	lr
 8004c10:	40023800 	.word	0x40023800
 8004c14:	200004b4 	.word	0x200004b4
 8004c18:	08008df8 	.word	0x08008df8

08004c1c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004c1c:	4b04      	ldr	r3, [pc, #16]	@ (8004c30 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 8004c1e:	4905      	ldr	r1, [pc, #20]	@ (8004c34 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	4a05      	ldr	r2, [pc, #20]	@ (8004c38 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004c24:	6808      	ldr	r0, [r1, #0]
 8004c26:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8004c2a:	5cd3      	ldrb	r3, [r2, r3]
}
 8004c2c:	40d8      	lsrs	r0, r3
 8004c2e:	4770      	bx	lr
 8004c30:	40023800 	.word	0x40023800
 8004c34:	200004b4 	.word	0x200004b4
 8004c38:	08008df8 	.word	0x08008df8

08004c3c <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c3c:	4927      	ldr	r1, [pc, #156]	@ (8004cdc <HAL_RCC_GetSysClockFreq+0xa0>)
{
 8004c3e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c40:	688b      	ldr	r3, [r1, #8]
 8004c42:	f003 030c 	and.w	r3, r3, #12
 8004c46:	2b08      	cmp	r3, #8
 8004c48:	d007      	beq.n	8004c5a <HAL_RCC_GetSysClockFreq+0x1e>
 8004c4a:	2b0c      	cmp	r3, #12
 8004c4c:	d01d      	beq.n	8004c8a <HAL_RCC_GetSysClockFreq+0x4e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c4e:	4a24      	ldr	r2, [pc, #144]	@ (8004ce0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004c50:	4824      	ldr	r0, [pc, #144]	@ (8004ce4 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004c52:	2b04      	cmp	r3, #4
 8004c54:	bf18      	it	ne
 8004c56:	4610      	movne	r0, r2
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8004c58:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c5a:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c5c:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c5e:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c60:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c64:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c68:	d12e      	bne.n	8004cc8 <HAL_RCC_GetSysClockFreq+0x8c>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c6a:	481d      	ldr	r0, [pc, #116]	@ (8004ce0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004c6c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8004c70:	fba1 0100 	umull	r0, r1, r1, r0
 8004c74:	f7fb fb1c 	bl	80002b0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c78:	4b18      	ldr	r3, [pc, #96]	@ (8004cdc <HAL_RCC_GetSysClockFreq+0xa0>)
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8004c80:	3301      	adds	r3, #1
 8004c82:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8004c84:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8004c88:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c8a:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c8c:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c8e:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c90:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c94:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c98:	d10d      	bne.n	8004cb6 <HAL_RCC_GetSysClockFreq+0x7a>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c9a:	4811      	ldr	r0, [pc, #68]	@ (8004ce0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004c9c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8004ca0:	fba1 0100 	umull	r0, r1, r1, r0
 8004ca4:	f7fb fb04 	bl	80002b0 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004ca8:	4b0c      	ldr	r3, [pc, #48]	@ (8004cdc <HAL_RCC_GetSysClockFreq+0xa0>)
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	f3c3 7302 	ubfx	r3, r3, #28, #3
      sysclockfreq = pllvco/pllr;
 8004cb0:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8004cb4:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cb6:	480b      	ldr	r0, [pc, #44]	@ (8004ce4 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004cb8:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	fba1 0100 	umull	r0, r1, r1, r0
 8004cc2:	f7fb faf5 	bl	80002b0 <__aeabi_uldivmod>
 8004cc6:	e7ef      	b.n	8004ca8 <HAL_RCC_GetSysClockFreq+0x6c>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cc8:	4806      	ldr	r0, [pc, #24]	@ (8004ce4 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004cca:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8004cce:	2300      	movs	r3, #0
 8004cd0:	fba1 0100 	umull	r0, r1, r1, r0
 8004cd4:	f7fb faec 	bl	80002b0 <__aeabi_uldivmod>
 8004cd8:	e7ce      	b.n	8004c78 <HAL_RCC_GetSysClockFreq+0x3c>
 8004cda:	bf00      	nop
 8004cdc:	40023800 	.word	0x40023800
 8004ce0:	00f42400 	.word	0x00f42400
 8004ce4:	007a1200 	.word	0x007a1200

08004ce8 <HAL_RCC_OscConfig>:
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ce8:	2800      	cmp	r0, #0
 8004cea:	f000 81fb 	beq.w	80050e4 <HAL_RCC_OscConfig+0x3fc>
{
 8004cee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cf2:	6803      	ldr	r3, [r0, #0]
 8004cf4:	07de      	lsls	r6, r3, #31
{
 8004cf6:	b082      	sub	sp, #8
 8004cf8:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cfa:	d536      	bpl.n	8004d6a <HAL_RCC_OscConfig+0x82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004cfc:	49a1      	ldr	r1, [pc, #644]	@ (8004f84 <HAL_RCC_OscConfig+0x29c>)
 8004cfe:	688a      	ldr	r2, [r1, #8]
 8004d00:	f002 020c 	and.w	r2, r2, #12
 8004d04:	2a04      	cmp	r2, #4
 8004d06:	f000 80de 	beq.w	8004ec6 <HAL_RCC_OscConfig+0x1de>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004d0a:	688a      	ldr	r2, [r1, #8]
 8004d0c:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004d10:	2a08      	cmp	r2, #8
 8004d12:	f000 80d4 	beq.w	8004ebe <HAL_RCC_OscConfig+0x1d6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d16:	499b      	ldr	r1, [pc, #620]	@ (8004f84 <HAL_RCC_OscConfig+0x29c>)
 8004d18:	688a      	ldr	r2, [r1, #8]
 8004d1a:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004d1e:	2a0c      	cmp	r2, #12
 8004d20:	f000 8104 	beq.w	8004f2c <HAL_RCC_OscConfig+0x244>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d24:	6863      	ldr	r3, [r4, #4]
 8004d26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d2a:	f000 8118 	beq.w	8004f5e <HAL_RCC_OscConfig+0x276>
 8004d2e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d32:	f000 8192 	beq.w	800505a <HAL_RCC_OscConfig+0x372>
 8004d36:	4d93      	ldr	r5, [pc, #588]	@ (8004f84 <HAL_RCC_OscConfig+0x29c>)
 8004d38:	682a      	ldr	r2, [r5, #0]
 8004d3a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004d3e:	602a      	str	r2, [r5, #0]
 8004d40:	682a      	ldr	r2, [r5, #0]
 8004d42:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004d46:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	f040 810d 	bne.w	8004f68 <HAL_RCC_OscConfig+0x280>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d4e:	f7ff f9f7 	bl	8004140 <HAL_GetTick>
 8004d52:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d54:	e005      	b.n	8004d62 <HAL_RCC_OscConfig+0x7a>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d56:	f7ff f9f3 	bl	8004140 <HAL_GetTick>
 8004d5a:	1b80      	subs	r0, r0, r6
 8004d5c:	2864      	cmp	r0, #100	@ 0x64
 8004d5e:	f200 80fa 	bhi.w	8004f56 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d62:	682b      	ldr	r3, [r5, #0]
 8004d64:	039f      	lsls	r7, r3, #14
 8004d66:	d4f6      	bmi.n	8004d56 <HAL_RCC_OscConfig+0x6e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d68:	6823      	ldr	r3, [r4, #0]
 8004d6a:	079d      	lsls	r5, r3, #30
 8004d6c:	d52f      	bpl.n	8004dce <HAL_RCC_OscConfig+0xe6>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004d6e:	4a85      	ldr	r2, [pc, #532]	@ (8004f84 <HAL_RCC_OscConfig+0x29c>)
 8004d70:	6891      	ldr	r1, [r2, #8]
 8004d72:	f011 0f0c 	tst.w	r1, #12
 8004d76:	f000 8099 	beq.w	8004eac <HAL_RCC_OscConfig+0x1c4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004d7a:	6891      	ldr	r1, [r2, #8]
 8004d7c:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004d80:	2908      	cmp	r1, #8
 8004d82:	f000 808f 	beq.w	8004ea4 <HAL_RCC_OscConfig+0x1bc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d86:	497f      	ldr	r1, [pc, #508]	@ (8004f84 <HAL_RCC_OscConfig+0x29c>)
 8004d88:	688a      	ldr	r2, [r1, #8]
 8004d8a:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004d8e:	2a0c      	cmp	r2, #12
 8004d90:	f000 815e 	beq.w	8005050 <HAL_RCC_OscConfig+0x368>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d94:	68e3      	ldr	r3, [r4, #12]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	f000 8112 	beq.w	8004fc0 <HAL_RCC_OscConfig+0x2d8>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d9c:	4b7a      	ldr	r3, [pc, #488]	@ (8004f88 <HAL_RCC_OscConfig+0x2a0>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d9e:	4e79      	ldr	r6, [pc, #484]	@ (8004f84 <HAL_RCC_OscConfig+0x29c>)
        __HAL_RCC_HSI_ENABLE();
 8004da0:	2201      	movs	r2, #1
 8004da2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004da4:	f7ff f9cc 	bl	8004140 <HAL_GetTick>
 8004da8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004daa:	e005      	b.n	8004db8 <HAL_RCC_OscConfig+0xd0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004dac:	f7ff f9c8 	bl	8004140 <HAL_GetTick>
 8004db0:	1b40      	subs	r0, r0, r5
 8004db2:	2802      	cmp	r0, #2
 8004db4:	f200 80cf 	bhi.w	8004f56 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004db8:	6833      	ldr	r3, [r6, #0]
 8004dba:	079f      	lsls	r7, r3, #30
 8004dbc:	d5f6      	bpl.n	8004dac <HAL_RCC_OscConfig+0xc4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dbe:	6833      	ldr	r3, [r6, #0]
 8004dc0:	6922      	ldr	r2, [r4, #16]
 8004dc2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8004dc6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004dca:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004dcc:	6823      	ldr	r3, [r4, #0]
 8004dce:	071a      	lsls	r2, r3, #28
 8004dd0:	d452      	bmi.n	8004e78 <HAL_RCC_OscConfig+0x190>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004dd2:	075d      	lsls	r5, r3, #29
 8004dd4:	d530      	bpl.n	8004e38 <HAL_RCC_OscConfig+0x150>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004dd6:	4a6b      	ldr	r2, [pc, #428]	@ (8004f84 <HAL_RCC_OscConfig+0x29c>)
 8004dd8:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8004dda:	f013 5380 	ands.w	r3, r3, #268435456	@ 0x10000000
 8004dde:	f000 8099 	beq.w	8004f14 <HAL_RCC_OscConfig+0x22c>
    FlagStatus       pwrclkchanged = RESET;
 8004de2:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004de4:	4e69      	ldr	r6, [pc, #420]	@ (8004f8c <HAL_RCC_OscConfig+0x2a4>)
 8004de6:	6833      	ldr	r3, [r6, #0]
 8004de8:	05d8      	lsls	r0, r3, #23
 8004dea:	f140 80a4 	bpl.w	8004f36 <HAL_RCC_OscConfig+0x24e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004dee:	68a3      	ldr	r3, [r4, #8]
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	f000 80cd 	beq.w	8004f90 <HAL_RCC_OscConfig+0x2a8>
 8004df6:	2b05      	cmp	r3, #5
 8004df8:	f000 8139 	beq.w	800506e <HAL_RCC_OscConfig+0x386>
 8004dfc:	4e61      	ldr	r6, [pc, #388]	@ (8004f84 <HAL_RCC_OscConfig+0x29c>)
 8004dfe:	6f32      	ldr	r2, [r6, #112]	@ 0x70
 8004e00:	f022 0201 	bic.w	r2, r2, #1
 8004e04:	6732      	str	r2, [r6, #112]	@ 0x70
 8004e06:	6f32      	ldr	r2, [r6, #112]	@ 0x70
 8004e08:	f022 0204 	bic.w	r2, r2, #4
 8004e0c:	6732      	str	r2, [r6, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	f040 80c3 	bne.w	8004f9a <HAL_RCC_OscConfig+0x2b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e14:	f7ff f994 	bl	8004140 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e18:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8004e1c:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e1e:	e005      	b.n	8004e2c <HAL_RCC_OscConfig+0x144>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e20:	f7ff f98e 	bl	8004140 <HAL_GetTick>
 8004e24:	1bc0      	subs	r0, r0, r7
 8004e26:	4540      	cmp	r0, r8
 8004e28:	f200 8095 	bhi.w	8004f56 <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e2c:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8004e2e:	079b      	lsls	r3, r3, #30
 8004e30:	d4f6      	bmi.n	8004e20 <HAL_RCC_OscConfig+0x138>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e32:	2d00      	cmp	r5, #0
 8004e34:	f040 8106 	bne.w	8005044 <HAL_RCC_OscConfig+0x35c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e38:	69a3      	ldr	r3, [r4, #24]
 8004e3a:	b1cb      	cbz	r3, 8004e70 <HAL_RCC_OscConfig+0x188>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e3c:	4d51      	ldr	r5, [pc, #324]	@ (8004f84 <HAL_RCC_OscConfig+0x29c>)
 8004e3e:	68aa      	ldr	r2, [r5, #8]
 8004e40:	f002 020c 	and.w	r2, r2, #12
 8004e44:	2a08      	cmp	r2, #8
 8004e46:	f000 80cc 	beq.w	8004fe2 <HAL_RCC_OscConfig+0x2fa>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e4a:	2b02      	cmp	r3, #2
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e4c:	4b4e      	ldr	r3, [pc, #312]	@ (8004f88 <HAL_RCC_OscConfig+0x2a0>)
 8004e4e:	f04f 0200 	mov.w	r2, #0
 8004e52:	661a      	str	r2, [r3, #96]	@ 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e54:	f000 8115 	beq.w	8005082 <HAL_RCC_OscConfig+0x39a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e58:	f7ff f972 	bl	8004140 <HAL_GetTick>
 8004e5c:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e5e:	e004      	b.n	8004e6a <HAL_RCC_OscConfig+0x182>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e60:	f7ff f96e 	bl	8004140 <HAL_GetTick>
 8004e64:	1b00      	subs	r0, r0, r4
 8004e66:	2802      	cmp	r0, #2
 8004e68:	d875      	bhi.n	8004f56 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e6a:	682b      	ldr	r3, [r5, #0]
 8004e6c:	019b      	lsls	r3, r3, #6
 8004e6e:	d4f7      	bmi.n	8004e60 <HAL_RCC_OscConfig+0x178>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8004e70:	2000      	movs	r0, #0
}
 8004e72:	b002      	add	sp, #8
 8004e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004e78:	6963      	ldr	r3, [r4, #20]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d02d      	beq.n	8004eda <HAL_RCC_OscConfig+0x1f2>
      __HAL_RCC_LSI_ENABLE();
 8004e7e:	4b42      	ldr	r3, [pc, #264]	@ (8004f88 <HAL_RCC_OscConfig+0x2a0>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e80:	4e40      	ldr	r6, [pc, #256]	@ (8004f84 <HAL_RCC_OscConfig+0x29c>)
      __HAL_RCC_LSI_ENABLE();
 8004e82:	2201      	movs	r2, #1
 8004e84:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 8004e88:	f7ff f95a 	bl	8004140 <HAL_GetTick>
 8004e8c:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e8e:	e004      	b.n	8004e9a <HAL_RCC_OscConfig+0x1b2>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e90:	f7ff f956 	bl	8004140 <HAL_GetTick>
 8004e94:	1b40      	subs	r0, r0, r5
 8004e96:	2802      	cmp	r0, #2
 8004e98:	d85d      	bhi.n	8004f56 <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e9a:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8004e9c:	079b      	lsls	r3, r3, #30
 8004e9e:	d5f7      	bpl.n	8004e90 <HAL_RCC_OscConfig+0x1a8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ea0:	6823      	ldr	r3, [r4, #0]
 8004ea2:	e796      	b.n	8004dd2 <HAL_RCC_OscConfig+0xea>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004ea4:	6852      	ldr	r2, [r2, #4]
 8004ea6:	0250      	lsls	r0, r2, #9
 8004ea8:	f53f af6d 	bmi.w	8004d86 <HAL_RCC_OscConfig+0x9e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004eac:	4a35      	ldr	r2, [pc, #212]	@ (8004f84 <HAL_RCC_OscConfig+0x29c>)
 8004eae:	6812      	ldr	r2, [r2, #0]
 8004eb0:	0792      	lsls	r2, r2, #30
 8004eb2:	d523      	bpl.n	8004efc <HAL_RCC_OscConfig+0x214>
 8004eb4:	68e2      	ldr	r2, [r4, #12]
 8004eb6:	2a01      	cmp	r2, #1
 8004eb8:	d020      	beq.n	8004efc <HAL_RCC_OscConfig+0x214>
    return HAL_ERROR;
 8004eba:	2001      	movs	r0, #1
 8004ebc:	e7d9      	b.n	8004e72 <HAL_RCC_OscConfig+0x18a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004ebe:	684a      	ldr	r2, [r1, #4]
 8004ec0:	0255      	lsls	r5, r2, #9
 8004ec2:	f57f af28 	bpl.w	8004d16 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ec6:	4a2f      	ldr	r2, [pc, #188]	@ (8004f84 <HAL_RCC_OscConfig+0x29c>)
 8004ec8:	6812      	ldr	r2, [r2, #0]
 8004eca:	0392      	lsls	r2, r2, #14
 8004ecc:	f57f af4d 	bpl.w	8004d6a <HAL_RCC_OscConfig+0x82>
 8004ed0:	6862      	ldr	r2, [r4, #4]
 8004ed2:	2a00      	cmp	r2, #0
 8004ed4:	f47f af49 	bne.w	8004d6a <HAL_RCC_OscConfig+0x82>
 8004ed8:	e7ef      	b.n	8004eba <HAL_RCC_OscConfig+0x1d2>
      __HAL_RCC_LSI_DISABLE();
 8004eda:	4a2b      	ldr	r2, [pc, #172]	@ (8004f88 <HAL_RCC_OscConfig+0x2a0>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004edc:	4e29      	ldr	r6, [pc, #164]	@ (8004f84 <HAL_RCC_OscConfig+0x29c>)
      __HAL_RCC_LSI_DISABLE();
 8004ede:	f8c2 3e80 	str.w	r3, [r2, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 8004ee2:	f7ff f92d 	bl	8004140 <HAL_GetTick>
 8004ee6:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ee8:	e004      	b.n	8004ef4 <HAL_RCC_OscConfig+0x20c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004eea:	f7ff f929 	bl	8004140 <HAL_GetTick>
 8004eee:	1b40      	subs	r0, r0, r5
 8004ef0:	2802      	cmp	r0, #2
 8004ef2:	d830      	bhi.n	8004f56 <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ef4:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8004ef6:	079f      	lsls	r7, r3, #30
 8004ef8:	d4f7      	bmi.n	8004eea <HAL_RCC_OscConfig+0x202>
 8004efa:	e7d1      	b.n	8004ea0 <HAL_RCC_OscConfig+0x1b8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004efc:	4921      	ldr	r1, [pc, #132]	@ (8004f84 <HAL_RCC_OscConfig+0x29c>)
 8004efe:	6920      	ldr	r0, [r4, #16]
 8004f00:	680a      	ldr	r2, [r1, #0]
 8004f02:	f022 02f8 	bic.w	r2, r2, #248	@ 0xf8
 8004f06:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8004f0a:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f0c:	071a      	lsls	r2, r3, #28
 8004f0e:	f57f af60 	bpl.w	8004dd2 <HAL_RCC_OscConfig+0xea>
 8004f12:	e7b1      	b.n	8004e78 <HAL_RCC_OscConfig+0x190>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f14:	9301      	str	r3, [sp, #4]
 8004f16:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8004f18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f1e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8004f20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f24:	9301      	str	r3, [sp, #4]
 8004f26:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004f28:	2501      	movs	r5, #1
 8004f2a:	e75b      	b.n	8004de4 <HAL_RCC_OscConfig+0xfc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f2c:	684a      	ldr	r2, [r1, #4]
 8004f2e:	0251      	lsls	r1, r2, #9
 8004f30:	f57f aef8 	bpl.w	8004d24 <HAL_RCC_OscConfig+0x3c>
 8004f34:	e7c7      	b.n	8004ec6 <HAL_RCC_OscConfig+0x1de>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f36:	6833      	ldr	r3, [r6, #0]
 8004f38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f3c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004f3e:	f7ff f8ff 	bl	8004140 <HAL_GetTick>
 8004f42:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f44:	6833      	ldr	r3, [r6, #0]
 8004f46:	05d9      	lsls	r1, r3, #23
 8004f48:	f53f af51 	bmi.w	8004dee <HAL_RCC_OscConfig+0x106>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f4c:	f7ff f8f8 	bl	8004140 <HAL_GetTick>
 8004f50:	1bc0      	subs	r0, r0, r7
 8004f52:	2802      	cmp	r0, #2
 8004f54:	d9f6      	bls.n	8004f44 <HAL_RCC_OscConfig+0x25c>
            return HAL_TIMEOUT;
 8004f56:	2003      	movs	r0, #3
}
 8004f58:	b002      	add	sp, #8
 8004f5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f5e:	4a09      	ldr	r2, [pc, #36]	@ (8004f84 <HAL_RCC_OscConfig+0x29c>)
 8004f60:	6813      	ldr	r3, [r2, #0]
 8004f62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f66:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004f68:	f7ff f8ea 	bl	8004140 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f6c:	4e05      	ldr	r6, [pc, #20]	@ (8004f84 <HAL_RCC_OscConfig+0x29c>)
        tickstart = HAL_GetTick();
 8004f6e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f70:	e004      	b.n	8004f7c <HAL_RCC_OscConfig+0x294>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f72:	f7ff f8e5 	bl	8004140 <HAL_GetTick>
 8004f76:	1b40      	subs	r0, r0, r5
 8004f78:	2864      	cmp	r0, #100	@ 0x64
 8004f7a:	d8ec      	bhi.n	8004f56 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f7c:	6833      	ldr	r3, [r6, #0]
 8004f7e:	039b      	lsls	r3, r3, #14
 8004f80:	d5f7      	bpl.n	8004f72 <HAL_RCC_OscConfig+0x28a>
 8004f82:	e6f1      	b.n	8004d68 <HAL_RCC_OscConfig+0x80>
 8004f84:	40023800 	.word	0x40023800
 8004f88:	42470000 	.word	0x42470000
 8004f8c:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f90:	4a55      	ldr	r2, [pc, #340]	@ (80050e8 <HAL_RCC_OscConfig+0x400>)
 8004f92:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8004f94:	f043 0301 	orr.w	r3, r3, #1
 8004f98:	6713      	str	r3, [r2, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8004f9a:	f7ff f8d1 	bl	8004140 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f9e:	4f52      	ldr	r7, [pc, #328]	@ (80050e8 <HAL_RCC_OscConfig+0x400>)
      tickstart = HAL_GetTick();
 8004fa0:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fa2:	f241 3888 	movw	r8, #5000	@ 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fa6:	e004      	b.n	8004fb2 <HAL_RCC_OscConfig+0x2ca>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fa8:	f7ff f8ca 	bl	8004140 <HAL_GetTick>
 8004fac:	1b80      	subs	r0, r0, r6
 8004fae:	4540      	cmp	r0, r8
 8004fb0:	d8d1      	bhi.n	8004f56 <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fb2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004fb4:	079a      	lsls	r2, r3, #30
 8004fb6:	d5f7      	bpl.n	8004fa8 <HAL_RCC_OscConfig+0x2c0>
    if(pwrclkchanged == SET)
 8004fb8:	2d00      	cmp	r5, #0
 8004fba:	f43f af3d 	beq.w	8004e38 <HAL_RCC_OscConfig+0x150>
 8004fbe:	e041      	b.n	8005044 <HAL_RCC_OscConfig+0x35c>
        __HAL_RCC_HSI_DISABLE();
 8004fc0:	4a4a      	ldr	r2, [pc, #296]	@ (80050ec <HAL_RCC_OscConfig+0x404>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fc2:	4e49      	ldr	r6, [pc, #292]	@ (80050e8 <HAL_RCC_OscConfig+0x400>)
        __HAL_RCC_HSI_DISABLE();
 8004fc4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004fc6:	f7ff f8bb 	bl	8004140 <HAL_GetTick>
 8004fca:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fcc:	e004      	b.n	8004fd8 <HAL_RCC_OscConfig+0x2f0>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fce:	f7ff f8b7 	bl	8004140 <HAL_GetTick>
 8004fd2:	1b40      	subs	r0, r0, r5
 8004fd4:	2802      	cmp	r0, #2
 8004fd6:	d8be      	bhi.n	8004f56 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fd8:	6833      	ldr	r3, [r6, #0]
 8004fda:	0799      	lsls	r1, r3, #30
 8004fdc:	d4f7      	bmi.n	8004fce <HAL_RCC_OscConfig+0x2e6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fde:	6823      	ldr	r3, [r4, #0]
 8004fe0:	e6f5      	b.n	8004dce <HAL_RCC_OscConfig+0xe6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	f43f af69 	beq.w	8004eba <HAL_RCC_OscConfig+0x1d2>
        pll_config = RCC->PLLCFGR;
 8004fe8:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fea:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fec:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ff0:	4291      	cmp	r1, r2
 8004ff2:	f47f af62 	bne.w	8004eba <HAL_RCC_OscConfig+0x1d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ff6:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ff8:	f003 013f 	and.w	r1, r3, #63	@ 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ffc:	4291      	cmp	r1, r2
 8004ffe:	f47f af5c 	bne.w	8004eba <HAL_RCC_OscConfig+0x1d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005002:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005004:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8005008:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800500a:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 800500e:	f47f af54 	bne.w	8004eba <HAL_RCC_OscConfig+0x1d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005012:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8005014:	0852      	lsrs	r2, r2, #1
 8005016:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 800501a:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800501c:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8005020:	f47f af4b 	bne.w	8004eba <HAL_RCC_OscConfig+0x1d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005024:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005026:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800502a:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 800502e:	f47f af44 	bne.w	8004eba <HAL_RCC_OscConfig+0x1d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005032:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8005034:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005038:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 800503c:	bf14      	ite	ne
 800503e:	2001      	movne	r0, #1
 8005040:	2000      	moveq	r0, #0
 8005042:	e716      	b.n	8004e72 <HAL_RCC_OscConfig+0x18a>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005044:	4a28      	ldr	r2, [pc, #160]	@ (80050e8 <HAL_RCC_OscConfig+0x400>)
 8005046:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8005048:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800504c:	6413      	str	r3, [r2, #64]	@ 0x40
 800504e:	e6f3      	b.n	8004e38 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005050:	684a      	ldr	r2, [r1, #4]
 8005052:	0251      	lsls	r1, r2, #9
 8005054:	f53f ae9e 	bmi.w	8004d94 <HAL_RCC_OscConfig+0xac>
 8005058:	e728      	b.n	8004eac <HAL_RCC_OscConfig+0x1c4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800505a:	4b23      	ldr	r3, [pc, #140]	@ (80050e8 <HAL_RCC_OscConfig+0x400>)
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8005062:	601a      	str	r2, [r3, #0]
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800506a:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800506c:	e77c      	b.n	8004f68 <HAL_RCC_OscConfig+0x280>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800506e:	4b1e      	ldr	r3, [pc, #120]	@ (80050e8 <HAL_RCC_OscConfig+0x400>)
 8005070:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005072:	f042 0204 	orr.w	r2, r2, #4
 8005076:	671a      	str	r2, [r3, #112]	@ 0x70
 8005078:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800507a:	f042 0201 	orr.w	r2, r2, #1
 800507e:	671a      	str	r2, [r3, #112]	@ 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005080:	e78b      	b.n	8004f9a <HAL_RCC_OscConfig+0x2b2>
        tickstart = HAL_GetTick();
 8005082:	f7ff f85d 	bl	8004140 <HAL_GetTick>
 8005086:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005088:	e005      	b.n	8005096 <HAL_RCC_OscConfig+0x3ae>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800508a:	f7ff f859 	bl	8004140 <HAL_GetTick>
 800508e:	1b80      	subs	r0, r0, r6
 8005090:	2802      	cmp	r0, #2
 8005092:	f63f af60 	bhi.w	8004f56 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005096:	682b      	ldr	r3, [r5, #0]
 8005098:	0199      	lsls	r1, r3, #6
 800509a:	d4f6      	bmi.n	800508a <HAL_RCC_OscConfig+0x3a2>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800509c:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 80050a0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80050a2:	430b      	orrs	r3, r1
 80050a4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80050a8:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	@ 0x28
 80050ac:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80050ae:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80050b2:	0852      	lsrs	r2, r2, #1
 80050b4:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 80050b8:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 80050ba:	490c      	ldr	r1, [pc, #48]	@ (80050ec <HAL_RCC_OscConfig+0x404>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80050bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 80050c0:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80050c2:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80050c4:	660a      	str	r2, [r1, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80050c6:	f7ff f83b 	bl	8004140 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050ca:	4d07      	ldr	r5, [pc, #28]	@ (80050e8 <HAL_RCC_OscConfig+0x400>)
        tickstart = HAL_GetTick();
 80050cc:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050ce:	e005      	b.n	80050dc <HAL_RCC_OscConfig+0x3f4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050d0:	f7ff f836 	bl	8004140 <HAL_GetTick>
 80050d4:	1b00      	subs	r0, r0, r4
 80050d6:	2802      	cmp	r0, #2
 80050d8:	f63f af3d 	bhi.w	8004f56 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050dc:	682b      	ldr	r3, [r5, #0]
 80050de:	019a      	lsls	r2, r3, #6
 80050e0:	d5f6      	bpl.n	80050d0 <HAL_RCC_OscConfig+0x3e8>
 80050e2:	e6c5      	b.n	8004e70 <HAL_RCC_OscConfig+0x188>
    return HAL_ERROR;
 80050e4:	2001      	movs	r0, #1
}
 80050e6:	4770      	bx	lr
 80050e8:	40023800 	.word	0x40023800
 80050ec:	42470000 	.word	0x42470000

080050f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80050f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80050f4:	b083      	sub	sp, #12
 80050f6:	4698      	mov	r8, r3
 80050f8:	4615      	mov	r5, r2
 80050fa:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80050fc:	4607      	mov	r7, r0
 80050fe:	460c      	mov	r4, r1
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005100:	f7ff f81e 	bl	8004140 <HAL_GetTick>
 8005104:	4446      	add	r6, r8
 8005106:	1a36      	subs	r6, r6, r0
  tmp_tickstart = HAL_GetTick();
 8005108:	f7ff f81a 	bl	8004140 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800510c:	4b2c      	ldr	r3, [pc, #176]	@ (80051c0 <SPI_WaitFlagStateUntilTimeout+0xd0>)
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	f3c2 32cb 	ubfx	r2, r2, #15, #12
 8005114:	fb06 f202 	mul.w	r2, r6, r2
 8005118:	f1b8 3fff 	cmp.w	r8, #4294967295
 800511c:	9201      	str	r2, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800511e:	bf18      	it	ne
 8005120:	4681      	movne	r9, r0
 8005122:	683a      	ldr	r2, [r7, #0]
 8005124:	d11a      	bne.n	800515c <SPI_WaitFlagStateUntilTimeout+0x6c>
 8005126:	6893      	ldr	r3, [r2, #8]
 8005128:	ea34 0303 	bics.w	r3, r4, r3
 800512c:	bf0c      	ite	eq
 800512e:	2301      	moveq	r3, #1
 8005130:	2300      	movne	r3, #0
 8005132:	429d      	cmp	r5, r3
 8005134:	d1f7      	bne.n	8005126 <SPI_WaitFlagStateUntilTimeout+0x36>
      }
      count--;
    }
  }

  return HAL_OK;
 8005136:	2000      	movs	r0, #0
}
 8005138:	b003      	add	sp, #12
 800513a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800513e:	f7fe ffff 	bl	8004140 <HAL_GetTick>
 8005142:	eba0 0009 	sub.w	r0, r0, r9
 8005146:	42b0      	cmp	r0, r6
 8005148:	d211      	bcs.n	800516e <SPI_WaitFlagStateUntilTimeout+0x7e>
      if (count == 0U)
 800514a:	9b01      	ldr	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800514c:	683a      	ldr	r2, [r7, #0]
        tmp_timeout = 0U;
 800514e:	2b00      	cmp	r3, #0
      count--;
 8005150:	9b01      	ldr	r3, [sp, #4]
 8005152:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 8005156:	bf08      	it	eq
 8005158:	2600      	moveq	r6, #0
      count--;
 800515a:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800515c:	6893      	ldr	r3, [r2, #8]
 800515e:	ea34 0303 	bics.w	r3, r4, r3
 8005162:	bf0c      	ite	eq
 8005164:	2301      	moveq	r3, #1
 8005166:	2300      	movne	r3, #0
 8005168:	42ab      	cmp	r3, r5
 800516a:	d1e8      	bne.n	800513e <SPI_WaitFlagStateUntilTimeout+0x4e>
 800516c:	e7e3      	b.n	8005136 <SPI_WaitFlagStateUntilTimeout+0x46>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800516e:	e9d7 3100 	ldrd	r3, r1, [r7]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005172:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005174:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005178:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800517c:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800517e:	d013      	beq.n	80051a8 <SPI_WaitFlagStateUntilTimeout+0xb8>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005180:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005182:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8005186:	d107      	bne.n	8005198 <SPI_WaitFlagStateUntilTimeout+0xa8>
          SPI_RESET_CRC(hspi);
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800518e:	601a      	str	r2, [r3, #0]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005196:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8005198:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 800519a:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 800519c:	f887 2051 	strb.w	r2, [r7, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80051a0:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
 80051a4:	2003      	movs	r0, #3
 80051a6:	e7c7      	b.n	8005138 <SPI_WaitFlagStateUntilTimeout+0x48>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051a8:	68ba      	ldr	r2, [r7, #8]
 80051aa:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 80051ae:	d002      	beq.n	80051b6 <SPI_WaitFlagStateUntilTimeout+0xc6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051b0:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 80051b4:	d1e4      	bne.n	8005180 <SPI_WaitFlagStateUntilTimeout+0x90>
          __HAL_SPI_DISABLE(hspi);
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051bc:	601a      	str	r2, [r3, #0]
 80051be:	e7df      	b.n	8005180 <SPI_WaitFlagStateUntilTimeout+0x90>
 80051c0:	200004b4 	.word	0x200004b4

080051c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80051c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051c8:	b084      	sub	sp, #16
 80051ca:	460f      	mov	r7, r1
 80051cc:	4690      	mov	r8, r2
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80051ce:	9200      	str	r2, [sp, #0]
 80051d0:	460b      	mov	r3, r1
 80051d2:	2201      	movs	r2, #1
 80051d4:	2102      	movs	r1, #2
{
 80051d6:	4604      	mov	r4, r0
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80051d8:	f7ff ff8a 	bl	80050f0 <SPI_WaitFlagStateUntilTimeout>
 80051dc:	bb40      	cbnz	r0, 8005230 <SPI_EndRxTxTransaction+0x6c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80051de:	4b19      	ldr	r3, [pc, #100]	@ (8005244 <SPI_EndRxTxTransaction+0x80>)
 80051e0:	681d      	ldr	r5, [r3, #0]
 80051e2:	4b19      	ldr	r3, [pc, #100]	@ (8005248 <SPI_EndRxTxTransaction+0x84>)
 80051e4:	fba3 3505 	umull	r3, r5, r3, r5
 80051e8:	0d6d      	lsrs	r5, r5, #21
 80051ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80051ee:	fb03 f505 	mul.w	r5, r3, r5
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80051f2:	6863      	ldr	r3, [r4, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80051f4:	9503      	str	r5, [sp, #12]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80051f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80051fa:	4606      	mov	r6, r0
 80051fc:	d107      	bne.n	800520e <SPI_EndRxTxTransaction+0x4a>
 80051fe:	e00d      	b.n	800521c <SPI_EndRxTxTransaction+0x58>
    {
      if (count == 0U)
      {
        break;
      }
      count--;
 8005200:	9b03      	ldr	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005202:	6821      	ldr	r1, [r4, #0]
      count--;
 8005204:	3b01      	subs	r3, #1
 8005206:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005208:	688b      	ldr	r3, [r1, #8]
 800520a:	061b      	lsls	r3, r3, #24
 800520c:	d502      	bpl.n	8005214 <SPI_EndRxTxTransaction+0x50>
      if (count == 0U)
 800520e:	9b03      	ldr	r3, [sp, #12]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d1f5      	bne.n	8005200 <SPI_EndRxTxTransaction+0x3c>
  }

  return HAL_OK;
}
 8005214:	4630      	mov	r0, r6
 8005216:	b004      	add	sp, #16
 8005218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800521c:	4602      	mov	r2, r0
 800521e:	f8cd 8000 	str.w	r8, [sp]
 8005222:	463b      	mov	r3, r7
 8005224:	2180      	movs	r1, #128	@ 0x80
 8005226:	4620      	mov	r0, r4
 8005228:	f7ff ff62 	bl	80050f0 <SPI_WaitFlagStateUntilTimeout>
 800522c:	2800      	cmp	r0, #0
 800522e:	d0f1      	beq.n	8005214 <SPI_EndRxTxTransaction+0x50>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005230:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005232:	2603      	movs	r6, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005234:	f043 0320 	orr.w	r3, r3, #32
}
 8005238:	4630      	mov	r0, r6
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800523a:	6563      	str	r3, [r4, #84]	@ 0x54
}
 800523c:	b004      	add	sp, #16
 800523e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005242:	bf00      	nop
 8005244:	200004b4 	.word	0x200004b4
 8005248:	165e9f81 	.word	0x165e9f81

0800524c <HAL_SPI_Init>:
  if (hspi == NULL)
 800524c:	2800      	cmp	r0, #0
 800524e:	d05c      	beq.n	800530a <HAL_SPI_Init+0xbe>
{
 8005250:	b570      	push	{r4, r5, r6, lr}
 8005252:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005254:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8005256:	2800      	cmp	r0, #0
 8005258:	d047      	beq.n	80052ea <HAL_SPI_Init+0x9e>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800525a:	2300      	movs	r3, #0
 800525c:	e9c4 3304 	strd	r3, r3, [r4, #16]
  if (hspi->State == HAL_SPI_STATE_RESET)
 8005260:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005264:	2200      	movs	r2, #0
 8005266:	62a2      	str	r2, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8005268:	f003 01ff 	and.w	r1, r3, #255	@ 0xff
 800526c:	2b00      	cmp	r3, #0
 800526e:	d042      	beq.n	80052f6 <HAL_SPI_Init+0xaa>
 8005270:	4694      	mov	ip, r2
  __HAL_SPI_DISABLE(hspi);
 8005272:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005274:	68a5      	ldr	r5, [r4, #8]
 8005276:	69a2      	ldr	r2, [r4, #24]
 8005278:	6a26      	ldr	r6, [r4, #32]
  hspi->State = HAL_SPI_STATE_BUSY;
 800527a:	2302      	movs	r3, #2
 800527c:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_SPI_DISABLE(hspi);
 8005280:	680b      	ldr	r3, [r1, #0]
 8005282:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005286:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005288:	6863      	ldr	r3, [r4, #4]
 800528a:	f405 4504 	and.w	r5, r5, #33792	@ 0x8400
 800528e:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8005292:	432b      	orrs	r3, r5
 8005294:	68e5      	ldr	r5, [r4, #12]
 8005296:	f405 6500 	and.w	r5, r5, #2048	@ 0x800
 800529a:	432b      	orrs	r3, r5
 800529c:	6925      	ldr	r5, [r4, #16]
 800529e:	f005 0502 	and.w	r5, r5, #2
 80052a2:	432b      	orrs	r3, r5
 80052a4:	6965      	ldr	r5, [r4, #20]
 80052a6:	f005 0501 	and.w	r5, r5, #1
 80052aa:	432b      	orrs	r3, r5
 80052ac:	69e5      	ldr	r5, [r4, #28]
 80052ae:	f006 0e80 	and.w	lr, r6, #128	@ 0x80
 80052b2:	f402 7600 	and.w	r6, r2, #512	@ 0x200
 80052b6:	f005 0538 	and.w	r5, r5, #56	@ 0x38
 80052ba:	4333      	orrs	r3, r6
 80052bc:	432b      	orrs	r3, r5
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80052be:	0c12      	lsrs	r2, r2, #16
 80052c0:	f000 0010 	and.w	r0, r0, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80052c4:	ea43 030e 	orr.w	r3, r3, lr
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80052c8:	f002 0204 	and.w	r2, r2, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80052cc:	ea43 030c 	orr.w	r3, r3, ip
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80052d0:	4302      	orrs	r2, r0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80052d2:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80052d4:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80052d6:	69cb      	ldr	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80052d8:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80052da:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 80052de:	2201      	movs	r2, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80052e0:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80052e2:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80052e4:	f884 2051 	strb.w	r2, [r4, #81]	@ 0x51
}
 80052e8:	bd70      	pop	{r4, r5, r6, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052ea:	6863      	ldr	r3, [r4, #4]
 80052ec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80052f0:	d0b6      	beq.n	8005260 <HAL_SPI_Init+0x14>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80052f2:	61e0      	str	r0, [r4, #28]
 80052f4:	e7b4      	b.n	8005260 <HAL_SPI_Init+0x14>
    HAL_SPI_MspInit(hspi);
 80052f6:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 80052f8:	f884 1050 	strb.w	r1, [r4, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 80052fc:	f7fe fad0 	bl	80038a0 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005300:	e9d4 0309 	ldrd	r0, r3, [r4, #36]	@ 0x24
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005304:	f403 5c00 	and.w	ip, r3, #8192	@ 0x2000
 8005308:	e7b3      	b.n	8005272 <HAL_SPI_Init+0x26>
    return HAL_ERROR;
 800530a:	2001      	movs	r0, #1
}
 800530c:	4770      	bx	lr
 800530e:	bf00      	nop

08005310 <HAL_SPI_TransmitReceive>:
{
 8005310:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005314:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8005316:	f890 0050 	ldrb.w	r0, [r0, #80]	@ 0x50
{
 800531a:	b083      	sub	sp, #12
  __HAL_LOCK(hspi);
 800531c:	2801      	cmp	r0, #1
{
 800531e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
  __HAL_LOCK(hspi);
 8005320:	f000 8086 	beq.w	8005430 <HAL_SPI_TransmitReceive+0x120>
 8005324:	461f      	mov	r7, r3
 8005326:	2301      	movs	r3, #1
 8005328:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  tickstart = HAL_GetTick();
 800532c:	4689      	mov	r9, r1
 800532e:	4690      	mov	r8, r2
 8005330:	f7fe ff06 	bl	8004140 <HAL_GetTick>
 8005334:	4605      	mov	r5, r0
  tmp_state           = hspi->State;
 8005336:	f894 0051 	ldrb.w	r0, [r4, #81]	@ 0x51
  tmp_mode            = hspi->Init.Mode;
 800533a:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800533c:	2801      	cmp	r0, #1
  tmp_state           = hspi->State;
 800533e:	b2c1      	uxtb	r1, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005340:	d00e      	beq.n	8005360 <HAL_SPI_TransmitReceive+0x50>
 8005342:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005346:	d006      	beq.n	8005356 <HAL_SPI_TransmitReceive+0x46>
    errorcode = HAL_BUSY;
 8005348:	2002      	movs	r0, #2
  __HAL_UNLOCK(hspi);
 800534a:	2300      	movs	r3, #0
 800534c:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 8005350:	b003      	add	sp, #12
 8005352:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005356:	68a2      	ldr	r2, [r4, #8]
 8005358:	2a00      	cmp	r2, #0
 800535a:	d1f5      	bne.n	8005348 <HAL_SPI_TransmitReceive+0x38>
 800535c:	2904      	cmp	r1, #4
 800535e:	d1f3      	bne.n	8005348 <HAL_SPI_TransmitReceive+0x38>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005360:	f1b9 0f00 	cmp.w	r9, #0
 8005364:	f000 80c7 	beq.w	80054f6 <HAL_SPI_TransmitReceive+0x1e6>
 8005368:	f1b8 0f00 	cmp.w	r8, #0
 800536c:	f000 80c3 	beq.w	80054f6 <HAL_SPI_TransmitReceive+0x1e6>
 8005370:	2f00      	cmp	r7, #0
 8005372:	f000 80c0 	beq.w	80054f6 <HAL_SPI_TransmitReceive+0x1e6>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005376:	f894 2051 	ldrb.w	r2, [r4, #81]	@ 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800537a:	f8c4 8038 	str.w	r8, [r4, #56]	@ 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800537e:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005380:	bf1c      	itt	ne
 8005382:	2205      	movne	r2, #5
 8005384:	f884 2051 	strbne.w	r2, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005388:	2200      	movs	r2, #0
 800538a:	6562      	str	r2, [r4, #84]	@ 0x54
  hspi->RxISR       = NULL;
 800538c:	e9c4 2210 	strd	r2, r2, [r4, #64]	@ 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005390:	6822      	ldr	r2, [r4, #0]
  hspi->RxXferCount = Size;
 8005392:	87e7      	strh	r7, [r4, #62]	@ 0x3e
  hspi->TxXferCount = Size;
 8005394:	86e7      	strh	r7, [r4, #54]	@ 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005396:	6811      	ldr	r1, [r2, #0]
  hspi->RxXferSize  = Size;
 8005398:	87a7      	strh	r7, [r4, #60]	@ 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800539a:	0649      	lsls	r1, r1, #25
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800539c:	f8c4 9030 	str.w	r9, [r4, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80053a0:	86a7      	strh	r7, [r4, #52]	@ 0x34
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80053a2:	d403      	bmi.n	80053ac <HAL_SPI_TransmitReceive+0x9c>
    __HAL_SPI_ENABLE(hspi);
 80053a4:	6811      	ldr	r1, [r2, #0]
 80053a6:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
 80053aa:	6011      	str	r1, [r2, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80053ac:	68e1      	ldr	r1, [r4, #12]
 80053ae:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 80053b2:	d04c      	beq.n	800544e <HAL_SPI_TransmitReceive+0x13e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d03f      	beq.n	8005438 <HAL_SPI_TransmitReceive+0x128>
 80053b8:	2f01      	cmp	r7, #1
 80053ba:	d03d      	beq.n	8005438 <HAL_SPI_TransmitReceive+0x128>
        txallowed = 1U;
 80053bc:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80053be:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	b91b      	cbnz	r3, 80053cc <HAL_SPI_TransmitReceive+0xbc>
 80053c4:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d07d      	beq.n	80054c8 <HAL_SPI_TransmitReceive+0x1b8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80053cc:	6822      	ldr	r2, [r4, #0]
 80053ce:	6893      	ldr	r3, [r2, #8]
 80053d0:	0799      	lsls	r1, r3, #30
 80053d2:	d50f      	bpl.n	80053f4 <HAL_SPI_TransmitReceive+0xe4>
 80053d4:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	b163      	cbz	r3, 80053f4 <HAL_SPI_TransmitReceive+0xe4>
 80053da:	b15f      	cbz	r7, 80053f4 <HAL_SPI_TransmitReceive+0xe4>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80053dc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80053de:	781b      	ldrb	r3, [r3, #0]
 80053e0:	7313      	strb	r3, [r2, #12]
        hspi->TxXferCount--;
 80053e2:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
        hspi->pTxBuffPtr++;
 80053e4:	6b22      	ldr	r2, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 80053e6:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr++;
 80053e8:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 80053ea:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr++;
 80053ec:	6322      	str	r2, [r4, #48]	@ 0x30
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80053ee:	6822      	ldr	r2, [r4, #0]
        hspi->TxXferCount--;
 80053f0:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 80053f2:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80053f4:	6893      	ldr	r3, [r2, #8]
 80053f6:	f013 0301 	ands.w	r3, r3, #1
 80053fa:	d00d      	beq.n	8005418 <HAL_SPI_TransmitReceive+0x108>
 80053fc:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
 80053fe:	b289      	uxth	r1, r1
 8005400:	b151      	cbz	r1, 8005418 <HAL_SPI_TransmitReceive+0x108>
        txallowed = 1U;
 8005402:	461f      	mov	r7, r3
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005404:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8005406:	68d2      	ldr	r2, [r2, #12]
 8005408:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800540a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800540c:	3301      	adds	r3, #1
 800540e:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8005410:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005412:	3b01      	subs	r3, #1
 8005414:	b29b      	uxth	r3, r3
 8005416:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005418:	f7fe fe92 	bl	8004140 <HAL_GetTick>
 800541c:	1b40      	subs	r0, r0, r5
 800541e:	42b0      	cmp	r0, r6
 8005420:	d3cd      	bcc.n	80053be <HAL_SPI_TransmitReceive+0xae>
 8005422:	1c73      	adds	r3, r6, #1
 8005424:	d0cb      	beq.n	80053be <HAL_SPI_TransmitReceive+0xae>
        hspi->State = HAL_SPI_STATE_READY;
 8005426:	2301      	movs	r3, #1
 8005428:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        errorcode = HAL_TIMEOUT;
 800542c:	2003      	movs	r0, #3
 800542e:	e78c      	b.n	800534a <HAL_SPI_TransmitReceive+0x3a>
  __HAL_LOCK(hspi);
 8005430:	2002      	movs	r0, #2
}
 8005432:	b003      	add	sp, #12
 8005434:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005438:	f899 3000 	ldrb.w	r3, [r9]
 800543c:	7313      	strb	r3, [r2, #12]
      hspi->TxXferCount--;
 800543e:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005440:	6b22      	ldr	r2, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8005442:	3b01      	subs	r3, #1
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005444:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 8005446:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005448:	6322      	str	r2, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 800544a:	86e3      	strh	r3, [r4, #54]	@ 0x36
 800544c:	e7b6      	b.n	80053bc <HAL_SPI_TransmitReceive+0xac>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800544e:	2b00      	cmp	r3, #0
 8005450:	d153      	bne.n	80054fa <HAL_SPI_TransmitReceive+0x1ea>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005452:	4649      	mov	r1, r9
 8005454:	f831 3b02 	ldrh.w	r3, [r1], #2
 8005458:	60d3      	str	r3, [r2, #12]
      hspi->TxXferCount--;
 800545a:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800545c:	6321      	str	r1, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 800545e:	3b01      	subs	r3, #1
 8005460:	b29b      	uxth	r3, r3
 8005462:	86e3      	strh	r3, [r4, #54]	@ 0x36
 8005464:	1c72      	adds	r2, r6, #1
{
 8005466:	f04f 0701 	mov.w	r7, #1
 800546a:	d025      	beq.n	80054b8 <HAL_SPI_TransmitReceive+0x1a8>
 800546c:	e048      	b.n	8005500 <HAL_SPI_TransmitReceive+0x1f0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800546e:	6822      	ldr	r2, [r4, #0]
 8005470:	6893      	ldr	r3, [r2, #8]
 8005472:	079b      	lsls	r3, r3, #30
 8005474:	d50d      	bpl.n	8005492 <HAL_SPI_TransmitReceive+0x182>
 8005476:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8005478:	b29b      	uxth	r3, r3
 800547a:	b153      	cbz	r3, 8005492 <HAL_SPI_TransmitReceive+0x182>
 800547c:	b147      	cbz	r7, 8005490 <HAL_SPI_TransmitReceive+0x180>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800547e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005480:	f833 1b02 	ldrh.w	r1, [r3], #2
 8005484:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005486:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8005488:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800548a:	3b01      	subs	r3, #1
 800548c:	b29b      	uxth	r3, r3
 800548e:	86e3      	strh	r3, [r4, #54]	@ 0x36
{
 8005490:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005492:	6893      	ldr	r3, [r2, #8]
 8005494:	f013 0301 	ands.w	r3, r3, #1
 8005498:	d00c      	beq.n	80054b4 <HAL_SPI_TransmitReceive+0x1a4>
 800549a:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
 800549c:	b289      	uxth	r1, r1
 800549e:	b149      	cbz	r1, 80054b4 <HAL_SPI_TransmitReceive+0x1a4>
        txallowed = 1U;
 80054a0:	461f      	mov	r7, r3
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80054a2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80054a4:	68d2      	ldr	r2, [r2, #12]
 80054a6:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80054aa:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 80054ac:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80054ae:	3b01      	subs	r3, #1
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80054b4:	f7fe fe44 	bl	8004140 <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054b8:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d1d6      	bne.n	800546e <HAL_SPI_TransmitReceive+0x15e>
 80054c0:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d1d2      	bne.n	800546e <HAL_SPI_TransmitReceive+0x15e>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80054c8:	462a      	mov	r2, r5
 80054ca:	4631      	mov	r1, r6
 80054cc:	4620      	mov	r0, r4
 80054ce:	f7ff fe79 	bl	80051c4 <SPI_EndRxTxTransaction>
 80054d2:	b970      	cbnz	r0, 80054f2 <HAL_SPI_TransmitReceive+0x1e2>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80054d4:	68a3      	ldr	r3, [r4, #8]
 80054d6:	b933      	cbnz	r3, 80054e6 <HAL_SPI_TransmitReceive+0x1d6>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80054d8:	6823      	ldr	r3, [r4, #0]
 80054da:	9001      	str	r0, [sp, #4]
 80054dc:	68da      	ldr	r2, [r3, #12]
 80054de:	9201      	str	r2, [sp, #4]
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	9301      	str	r3, [sp, #4]
 80054e4:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80054e6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80054e8:	b92b      	cbnz	r3, 80054f6 <HAL_SPI_TransmitReceive+0x1e6>
    hspi->State = HAL_SPI_STATE_READY;
 80054ea:	2301      	movs	r3, #1
 80054ec:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
 80054f0:	e72b      	b.n	800534a <HAL_SPI_TransmitReceive+0x3a>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80054f2:	2320      	movs	r3, #32
 80054f4:	6563      	str	r3, [r4, #84]	@ 0x54
    errorcode = HAL_ERROR;
 80054f6:	2001      	movs	r0, #1
 80054f8:	e727      	b.n	800534a <HAL_SPI_TransmitReceive+0x3a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054fa:	2f01      	cmp	r7, #1
 80054fc:	d1b2      	bne.n	8005464 <HAL_SPI_TransmitReceive+0x154>
 80054fe:	e7a8      	b.n	8005452 <HAL_SPI_TransmitReceive+0x142>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005500:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8005502:	b29b      	uxth	r3, r3
 8005504:	b91b      	cbnz	r3, 800550e <HAL_SPI_TransmitReceive+0x1fe>
 8005506:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005508:	b29b      	uxth	r3, r3
 800550a:	2b00      	cmp	r3, #0
 800550c:	d0dc      	beq.n	80054c8 <HAL_SPI_TransmitReceive+0x1b8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800550e:	6822      	ldr	r2, [r4, #0]
 8005510:	6893      	ldr	r3, [r2, #8]
 8005512:	0798      	lsls	r0, r3, #30
 8005514:	d50d      	bpl.n	8005532 <HAL_SPI_TransmitReceive+0x222>
 8005516:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8005518:	b29b      	uxth	r3, r3
 800551a:	b153      	cbz	r3, 8005532 <HAL_SPI_TransmitReceive+0x222>
 800551c:	b147      	cbz	r7, 8005530 <HAL_SPI_TransmitReceive+0x220>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800551e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005520:	f833 1b02 	ldrh.w	r1, [r3], #2
 8005524:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005526:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8005528:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800552a:	3b01      	subs	r3, #1
 800552c:	b29b      	uxth	r3, r3
 800552e:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 8005530:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005532:	6893      	ldr	r3, [r2, #8]
 8005534:	f013 0301 	ands.w	r3, r3, #1
 8005538:	d00c      	beq.n	8005554 <HAL_SPI_TransmitReceive+0x244>
 800553a:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
 800553c:	b289      	uxth	r1, r1
 800553e:	b149      	cbz	r1, 8005554 <HAL_SPI_TransmitReceive+0x244>
        txallowed = 1U;
 8005540:	461f      	mov	r7, r3
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005542:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8005544:	68d2      	ldr	r2, [r2, #12]
 8005546:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800554a:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 800554c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800554e:	3b01      	subs	r3, #1
 8005550:	b29b      	uxth	r3, r3
 8005552:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005554:	f7fe fdf4 	bl	8004140 <HAL_GetTick>
 8005558:	1b40      	subs	r0, r0, r5
 800555a:	42b0      	cmp	r0, r6
 800555c:	d3d0      	bcc.n	8005500 <HAL_SPI_TransmitReceive+0x1f0>
 800555e:	e762      	b.n	8005426 <HAL_SPI_TransmitReceive+0x116>

08005560 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005560:	2800      	cmp	r0, #0
 8005562:	f000 808f 	beq.w	8005684 <HAL_TIM_Base_Init+0x124>
{
 8005566:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005568:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800556c:	4604      	mov	r4, r0
 800556e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8005572:	2b00      	cmp	r3, #0
 8005574:	f000 8081 	beq.w	800567a <HAL_TIM_Base_Init+0x11a>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005578:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800557a:	4943      	ldr	r1, [pc, #268]	@ (8005688 <HAL_TIM_Base_Init+0x128>)
  htim->State = HAL_TIM_STATE_BUSY;
 800557c:	2302      	movs	r3, #2
 800557e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005582:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8005584:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005586:	d064      	beq.n	8005652 <HAL_TIM_Base_Init+0xf2>
 8005588:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800558c:	d030      	beq.n	80055f0 <HAL_TIM_Base_Init+0x90>
 800558e:	f5a1 417c 	sub.w	r1, r1, #64512	@ 0xfc00
 8005592:	428a      	cmp	r2, r1
 8005594:	d02c      	beq.n	80055f0 <HAL_TIM_Base_Init+0x90>
 8005596:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800559a:	428a      	cmp	r2, r1
 800559c:	d028      	beq.n	80055f0 <HAL_TIM_Base_Init+0x90>
 800559e:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80055a2:	428a      	cmp	r2, r1
 80055a4:	d024      	beq.n	80055f0 <HAL_TIM_Base_Init+0x90>
 80055a6:	f501 4178 	add.w	r1, r1, #63488	@ 0xf800
 80055aa:	428a      	cmp	r2, r1
 80055ac:	d051      	beq.n	8005652 <HAL_TIM_Base_Init+0xf2>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055ae:	f501 5170 	add.w	r1, r1, #15360	@ 0x3c00
 80055b2:	428a      	cmp	r2, r1
 80055b4:	d020      	beq.n	80055f8 <HAL_TIM_Base_Init+0x98>
 80055b6:	4935      	ldr	r1, [pc, #212]	@ (800568c <HAL_TIM_Base_Init+0x12c>)
 80055b8:	428a      	cmp	r2, r1
 80055ba:	d01d      	beq.n	80055f8 <HAL_TIM_Base_Init+0x98>
 80055bc:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80055c0:	428a      	cmp	r2, r1
 80055c2:	d019      	beq.n	80055f8 <HAL_TIM_Base_Init+0x98>
 80055c4:	f5a1 3198 	sub.w	r1, r1, #77824	@ 0x13000
 80055c8:	428a      	cmp	r2, r1
 80055ca:	d015      	beq.n	80055f8 <HAL_TIM_Base_Init+0x98>
 80055cc:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80055d0:	428a      	cmp	r2, r1
 80055d2:	d011      	beq.n	80055f8 <HAL_TIM_Base_Init+0x98>
 80055d4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80055d8:	428a      	cmp	r2, r1
 80055da:	d00d      	beq.n	80055f8 <HAL_TIM_Base_Init+0x98>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055dc:	69a5      	ldr	r5, [r4, #24]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055de:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055e0:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80055e6:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80055e8:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055ea:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80055ec:	6291      	str	r1, [r2, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055ee:	e010      	b.n	8005612 <HAL_TIM_Base_Init+0xb2>
    tmpcr1 |= Structure->CounterMode;
 80055f0:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80055f6:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055f8:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055fa:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 80055fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005600:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005602:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005606:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005608:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 800560a:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800560c:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800560e:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005610:	6291      	str	r1, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005612:	2301      	movs	r3, #1
 8005614:	6153      	str	r3, [r2, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005616:	6913      	ldr	r3, [r2, #16]
 8005618:	07db      	lsls	r3, r3, #31
 800561a:	d503      	bpl.n	8005624 <HAL_TIM_Base_Init+0xc4>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800561c:	6913      	ldr	r3, [r2, #16]
 800561e:	f023 0301 	bic.w	r3, r3, #1
 8005622:	6113      	str	r3, [r2, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005624:	2301      	movs	r3, #1
 8005626:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800562a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800562e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8005632:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8005636:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800563a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800563e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005642:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8005646:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 800564a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800564e:	2000      	movs	r0, #0
}
 8005650:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8005652:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005654:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005656:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800565a:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 800565c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005660:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005662:	69a1      	ldr	r1, [r4, #24]
 8005664:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005668:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 800566a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800566c:	68e3      	ldr	r3, [r4, #12]
 800566e:	62d3      	str	r3, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005670:	6863      	ldr	r3, [r4, #4]
 8005672:	6293      	str	r3, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8005674:	6963      	ldr	r3, [r4, #20]
 8005676:	6313      	str	r3, [r2, #48]	@ 0x30
 8005678:	e7cb      	b.n	8005612 <HAL_TIM_Base_Init+0xb2>
    htim->Lock = HAL_UNLOCKED;
 800567a:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800567e:	f7fe fabf 	bl	8003c00 <HAL_TIM_Base_MspInit>
 8005682:	e779      	b.n	8005578 <HAL_TIM_Base_Init+0x18>
    return HAL_ERROR;
 8005684:	2001      	movs	r0, #1
}
 8005686:	4770      	bx	lr
 8005688:	40010000 	.word	0x40010000
 800568c:	40014400 	.word	0x40014400

08005690 <HAL_TIM_PWM_MspInit>:
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
 8005690:	4770      	bx	lr
 8005692:	bf00      	nop

08005694 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8005694:	2800      	cmp	r0, #0
 8005696:	f000 808f 	beq.w	80057b8 <HAL_TIM_PWM_Init+0x124>
{
 800569a:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800569c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80056a0:	4604      	mov	r4, r0
 80056a2:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	f000 8081 	beq.w	80057ae <HAL_TIM_PWM_Init+0x11a>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056ac:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056ae:	4943      	ldr	r1, [pc, #268]	@ (80057bc <HAL_TIM_PWM_Init+0x128>)
  htim->State = HAL_TIM_STATE_BUSY;
 80056b0:	2302      	movs	r3, #2
 80056b2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056b6:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 80056b8:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056ba:	d064      	beq.n	8005786 <HAL_TIM_PWM_Init+0xf2>
 80056bc:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80056c0:	d030      	beq.n	8005724 <HAL_TIM_PWM_Init+0x90>
 80056c2:	f5a1 417c 	sub.w	r1, r1, #64512	@ 0xfc00
 80056c6:	428a      	cmp	r2, r1
 80056c8:	d02c      	beq.n	8005724 <HAL_TIM_PWM_Init+0x90>
 80056ca:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80056ce:	428a      	cmp	r2, r1
 80056d0:	d028      	beq.n	8005724 <HAL_TIM_PWM_Init+0x90>
 80056d2:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80056d6:	428a      	cmp	r2, r1
 80056d8:	d024      	beq.n	8005724 <HAL_TIM_PWM_Init+0x90>
 80056da:	f501 4178 	add.w	r1, r1, #63488	@ 0xf800
 80056de:	428a      	cmp	r2, r1
 80056e0:	d051      	beq.n	8005786 <HAL_TIM_PWM_Init+0xf2>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056e2:	f501 5170 	add.w	r1, r1, #15360	@ 0x3c00
 80056e6:	428a      	cmp	r2, r1
 80056e8:	d020      	beq.n	800572c <HAL_TIM_PWM_Init+0x98>
 80056ea:	4935      	ldr	r1, [pc, #212]	@ (80057c0 <HAL_TIM_PWM_Init+0x12c>)
 80056ec:	428a      	cmp	r2, r1
 80056ee:	d01d      	beq.n	800572c <HAL_TIM_PWM_Init+0x98>
 80056f0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80056f4:	428a      	cmp	r2, r1
 80056f6:	d019      	beq.n	800572c <HAL_TIM_PWM_Init+0x98>
 80056f8:	f5a1 3198 	sub.w	r1, r1, #77824	@ 0x13000
 80056fc:	428a      	cmp	r2, r1
 80056fe:	d015      	beq.n	800572c <HAL_TIM_PWM_Init+0x98>
 8005700:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005704:	428a      	cmp	r2, r1
 8005706:	d011      	beq.n	800572c <HAL_TIM_PWM_Init+0x98>
 8005708:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800570c:	428a      	cmp	r2, r1
 800570e:	d00d      	beq.n	800572c <HAL_TIM_PWM_Init+0x98>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005710:	69a5      	ldr	r5, [r4, #24]
  TIMx->PSC = Structure->Prescaler;
 8005712:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005714:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005716:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800571a:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800571c:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800571e:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005720:	6291      	str	r1, [r2, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005722:	e010      	b.n	8005746 <HAL_TIM_PWM_Init+0xb2>
    tmpcr1 |= Structure->CounterMode;
 8005724:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005726:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800572a:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800572c:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800572e:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005730:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005734:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005736:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 800573a:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800573c:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 800573e:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8005740:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005742:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005744:	6291      	str	r1, [r2, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 8005746:	2301      	movs	r3, #1
 8005748:	6153      	str	r3, [r2, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800574a:	6913      	ldr	r3, [r2, #16]
 800574c:	07db      	lsls	r3, r3, #31
 800574e:	d503      	bpl.n	8005758 <HAL_TIM_PWM_Init+0xc4>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005750:	6913      	ldr	r3, [r2, #16]
 8005752:	f023 0301 	bic.w	r3, r3, #1
 8005756:	6113      	str	r3, [r2, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005758:	2301      	movs	r3, #1
 800575a:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800575e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8005762:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8005766:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800576a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800576e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005772:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005776:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800577a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 800577e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8005782:	2000      	movs	r0, #0
}
 8005784:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8005786:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005788:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800578a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800578e:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8005790:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005794:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005796:	69a1      	ldr	r1, [r4, #24]
 8005798:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800579c:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 800579e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057a0:	68e3      	ldr	r3, [r4, #12]
 80057a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80057a4:	6863      	ldr	r3, [r4, #4]
 80057a6:	6293      	str	r3, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80057a8:	6963      	ldr	r3, [r4, #20]
 80057aa:	6313      	str	r3, [r2, #48]	@ 0x30
 80057ac:	e7cb      	b.n	8005746 <HAL_TIM_PWM_Init+0xb2>
    htim->Lock = HAL_UNLOCKED;
 80057ae:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80057b2:	f7ff ff6d 	bl	8005690 <HAL_TIM_PWM_MspInit>
 80057b6:	e779      	b.n	80056ac <HAL_TIM_PWM_Init+0x18>
    return HAL_ERROR;
 80057b8:	2001      	movs	r0, #1
}
 80057ba:	4770      	bx	lr
 80057bc:	40010000 	.word	0x40010000
 80057c0:	40014400 	.word	0x40014400

080057c4 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 80057c4:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	f000 80c6 	beq.w	800595a <HAL_TIM_PWM_ConfigChannel+0x196>
 80057ce:	2301      	movs	r3, #1
{
 80057d0:	b570      	push	{r4, r5, r6, lr}
 80057d2:	4684      	mov	ip, r0
  __HAL_LOCK(htim);
 80057d4:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 80057d8:	2a0c      	cmp	r2, #12
 80057da:	d808      	bhi.n	80057ee <HAL_TIM_PWM_ConfigChannel+0x2a>
 80057dc:	e8df f002 	tbb	[pc, r2]
 80057e0:	0707073e 	.word	0x0707073e
 80057e4:	07070767 	.word	0x07070767
 80057e8:	07070793 	.word	0x07070793
 80057ec:	0c          	.byte	0x0c
 80057ed:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 80057ee:	2300      	movs	r3, #0
 80057f0:	f88c 303c 	strb.w	r3, [ip, #60]	@ 0x3c
  switch (Channel)
 80057f4:	2001      	movs	r0, #1
}
 80057f6:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80057f8:	6803      	ldr	r3, [r0, #0]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057fa:	680d      	ldr	r5, [r1, #0]
  tmpccer = TIMx->CCER;
 80057fc:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80057fe:	6a18      	ldr	r0, [r3, #32]
 8005800:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 8005804:	6218      	str	r0, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005806:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8005808:	69d8      	ldr	r0, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800580a:	f420 40e6 	bic.w	r0, r0, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800580e:	ea40 2005 	orr.w	r0, r0, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005812:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8005814:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005818:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800581c:	4d6a      	ldr	r5, [pc, #424]	@ (80059c8 <HAL_TIM_PWM_ConfigChannel+0x204>)
 800581e:	42ab      	cmp	r3, r5
 8005820:	f000 80bc 	beq.w	800599c <HAL_TIM_PWM_ConfigChannel+0x1d8>
 8005824:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8005828:	42ab      	cmp	r3, r5
 800582a:	f000 80b7 	beq.w	800599c <HAL_TIM_PWM_ConfigChannel+0x1d8>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800582e:	605c      	str	r4, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005830:	61d8      	str	r0, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005832:	6848      	ldr	r0, [r1, #4]
 8005834:	6418      	str	r0, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005836:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005838:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800583a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800583c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005840:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005842:	69da      	ldr	r2, [r3, #28]
 8005844:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005848:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800584a:	69da      	ldr	r2, [r3, #28]
 800584c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005850:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8005852:	2300      	movs	r3, #0
 8005854:	f88c 303c 	strb.w	r3, [ip, #60]	@ 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8005858:	2000      	movs	r0, #0
}
 800585a:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800585c:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 800585e:	680d      	ldr	r5, [r1, #0]
  tmpccer = TIMx->CCER;
 8005860:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005862:	6a18      	ldr	r0, [r3, #32]
 8005864:	f020 0001 	bic.w	r0, r0, #1
 8005868:	6218      	str	r0, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800586a:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 800586c:	6998      	ldr	r0, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800586e:	f020 0073 	bic.w	r0, r0, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 8005872:	4328      	orrs	r0, r5
  tmpccer |= OC_Config->OCPolarity;
 8005874:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8005876:	f022 0202 	bic.w	r2, r2, #2
  tmpccer |= OC_Config->OCPolarity;
 800587a:	432a      	orrs	r2, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800587c:	4d52      	ldr	r5, [pc, #328]	@ (80059c8 <HAL_TIM_PWM_ConfigChannel+0x204>)
 800587e:	42ab      	cmp	r3, r5
 8005880:	d06d      	beq.n	800595e <HAL_TIM_PWM_ConfigChannel+0x19a>
 8005882:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8005886:	42ab      	cmp	r3, r5
 8005888:	d069      	beq.n	800595e <HAL_TIM_PWM_ConfigChannel+0x19a>
  TIMx->CR2 = tmpcr2;
 800588a:	605c      	str	r4, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 800588c:	6198      	str	r0, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 800588e:	6848      	ldr	r0, [r1, #4]
 8005890:	6358      	str	r0, [r3, #52]	@ 0x34
  TIMx->CCER = tmpccer;
 8005892:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005894:	699a      	ldr	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005896:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005898:	f042 0208 	orr.w	r2, r2, #8
 800589c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800589e:	699a      	ldr	r2, [r3, #24]
 80058a0:	f022 0204 	bic.w	r2, r2, #4
 80058a4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80058a6:	699a      	ldr	r2, [r3, #24]
 80058a8:	430a      	orrs	r2, r1
 80058aa:	619a      	str	r2, [r3, #24]
      break;
 80058ac:	e7d1      	b.n	8005852 <HAL_TIM_PWM_ConfigChannel+0x8e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80058ae:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058b0:	680d      	ldr	r5, [r1, #0]
  tmpccer = TIMx->CCER;
 80058b2:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058b4:	6a18      	ldr	r0, [r3, #32]
 80058b6:	f020 0010 	bic.w	r0, r0, #16
 80058ba:	6218      	str	r0, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80058bc:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 80058be:	6998      	ldr	r0, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80058c0:	f420 40e6 	bic.w	r0, r0, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058c4:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80058c8:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80058ca:	f022 0220 	bic.w	r2, r2, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80058ce:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80058d2:	4d3d      	ldr	r5, [pc, #244]	@ (80059c8 <HAL_TIM_PWM_ConfigChannel+0x204>)
 80058d4:	42ab      	cmp	r3, r5
 80058d6:	d051      	beq.n	800597c <HAL_TIM_PWM_ConfigChannel+0x1b8>
 80058d8:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80058dc:	42ab      	cmp	r3, r5
 80058de:	d04d      	beq.n	800597c <HAL_TIM_PWM_ConfigChannel+0x1b8>
  TIMx->CR2 = tmpcr2;
 80058e0:	605c      	str	r4, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 80058e2:	6198      	str	r0, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80058e4:	6848      	ldr	r0, [r1, #4]
 80058e6:	6398      	str	r0, [r3, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 80058e8:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80058ea:	699a      	ldr	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80058ec:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80058ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80058f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80058f4:	699a      	ldr	r2, [r3, #24]
 80058f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80058fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80058fc:	699a      	ldr	r2, [r3, #24]
 80058fe:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005902:	619a      	str	r2, [r3, #24]
      break;
 8005904:	e7a5      	b.n	8005852 <HAL_TIM_PWM_ConfigChannel+0x8e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005906:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8005908:	680d      	ldr	r5, [r1, #0]
  tmpccer = TIMx->CCER;
 800590a:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800590c:	6a18      	ldr	r0, [r3, #32]
 800590e:	f420 7080 	bic.w	r0, r0, #256	@ 0x100
 8005912:	6218      	str	r0, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005914:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8005916:	69d8      	ldr	r0, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005918:	f020 0073 	bic.w	r0, r0, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 800591c:	4328      	orrs	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800591e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8005920:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005924:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005928:	4d27      	ldr	r5, [pc, #156]	@ (80059c8 <HAL_TIM_PWM_ConfigChannel+0x204>)
 800592a:	42ab      	cmp	r3, r5
 800592c:	d03c      	beq.n	80059a8 <HAL_TIM_PWM_ConfigChannel+0x1e4>
 800592e:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8005932:	42ab      	cmp	r3, r5
 8005934:	d038      	beq.n	80059a8 <HAL_TIM_PWM_ConfigChannel+0x1e4>
  TIMx->CR2 = tmpcr2;
 8005936:	605c      	str	r4, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8005938:	61d8      	str	r0, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800593a:	6848      	ldr	r0, [r1, #4]
 800593c:	63d8      	str	r0, [r3, #60]	@ 0x3c
  TIMx->CCER = tmpccer;
 800593e:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005940:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005942:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005944:	f042 0208 	orr.w	r2, r2, #8
 8005948:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800594a:	69da      	ldr	r2, [r3, #28]
 800594c:	f022 0204 	bic.w	r2, r2, #4
 8005950:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005952:	69da      	ldr	r2, [r3, #28]
 8005954:	430a      	orrs	r2, r1
 8005956:	61da      	str	r2, [r3, #28]
      break;
 8005958:	e77b      	b.n	8005852 <HAL_TIM_PWM_ConfigChannel+0x8e>
  __HAL_LOCK(htim);
 800595a:	2002      	movs	r0, #2
}
 800595c:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 800595e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8005960:	f022 0208 	bic.w	r2, r2, #8
    tmpccer |= OC_Config->OCNPolarity;
 8005964:	432a      	orrs	r2, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8005966:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800596a:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 800596e:	ea46 0e05 	orr.w	lr, r6, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8005972:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8005976:	ea4e 0404 	orr.w	r4, lr, r4
 800597a:	e786      	b.n	800588a <HAL_TIM_PWM_ConfigChannel+0xc6>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800597c:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800597e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005982:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005986:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800598a:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800598e:	ea46 0e05 	orr.w	lr, r6, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8005992:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005996:	ea44 048e 	orr.w	r4, r4, lr, lsl #2
 800599a:	e7a1      	b.n	80058e0 <HAL_TIM_PWM_ConfigChannel+0x11c>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800599c:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 800599e:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80059a2:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 80059a6:	e742      	b.n	800582e <HAL_TIM_PWM_ConfigChannel+0x6a>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80059a8:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80059aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80059ae:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80059b2:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80059b6:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80059ba:	ea46 0e05 	orr.w	lr, r6, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 80059be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80059c2:	ea44 140e 	orr.w	r4, r4, lr, lsl #4
 80059c6:	e7b6      	b.n	8005936 <HAL_TIM_PWM_ConfigChannel+0x172>
 80059c8:	40010000 	.word	0x40010000

080059cc <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 80059cc:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 80059d0:	2a01      	cmp	r2, #1
 80059d2:	d050      	beq.n	8005a76 <HAL_TIM_SlaveConfigSynchro+0xaa>
 80059d4:	4603      	mov	r3, r0
{
 80059d6:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 80059d8:	2202      	movs	r2, #2
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059da:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80059dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  __HAL_LOCK(htim);
 80059e0:	2001      	movs	r0, #1
 80059e2:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80059e6:	68a2      	ldr	r2, [r4, #8]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80059e8:	6848      	ldr	r0, [r1, #4]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80059ea:	680d      	ldr	r5, [r1, #0]
  tmpsmcr &= ~TIM_SMCR_TS;
 80059ec:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80059f0:	4302      	orrs	r2, r0
  tmpsmcr &= ~TIM_SMCR_SMS;
 80059f2:	f022 0207 	bic.w	r2, r2, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80059f6:	432a      	orrs	r2, r5

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80059f8:	2850      	cmp	r0, #80	@ 0x50
  htim->Instance->SMCR = tmpsmcr;
 80059fa:	60a2      	str	r2, [r4, #8]
  switch (sSlaveConfig->InputTrigger)
 80059fc:	d060      	beq.n	8005ac0 <HAL_TIM_SlaveConfigSynchro+0xf4>
 80059fe:	d90f      	bls.n	8005a20 <HAL_TIM_SlaveConfigSynchro+0x54>
 8005a00:	2860      	cmp	r0, #96	@ 0x60
 8005a02:	d03a      	beq.n	8005a7a <HAL_TIM_SlaveConfigSynchro+0xae>
 8005a04:	2870      	cmp	r0, #112	@ 0x70
 8005a06:	d10e      	bne.n	8005a26 <HAL_TIM_SlaveConfigSynchro+0x5a>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a08:	e9d1 5202 	ldrd	r5, r2, [r1, #8]
  tmpsmcr = TIMx->SMCR;
 8005a0c:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a0e:	432a      	orrs	r2, r5
 8005a10:	690d      	ldr	r5, [r1, #16]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a12:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a16:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8005a1a:	430a      	orrs	r2, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a1c:	60a2      	str	r2, [r4, #8]
 8005a1e:	e00f      	b.n	8005a40 <HAL_TIM_SlaveConfigSynchro+0x74>
  switch (sSlaveConfig->InputTrigger)
 8005a20:	2840      	cmp	r0, #64	@ 0x40
 8005a22:	d03d      	beq.n	8005aa0 <HAL_TIM_SlaveConfigSynchro+0xd4>
 8005a24:	d907      	bls.n	8005a36 <HAL_TIM_SlaveConfigSynchro+0x6a>
    htim->State = HAL_TIM_STATE_READY;
 8005a26:	2001      	movs	r0, #1
    __HAL_UNLOCK(htim);
 8005a28:	2200      	movs	r2, #0
    htim->State = HAL_TIM_STATE_READY;
 8005a2a:	f883 003d 	strb.w	r0, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8005a2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8005a32:	bc30      	pop	{r4, r5}
 8005a34:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 8005a36:	2820      	cmp	r0, #32
 8005a38:	d002      	beq.n	8005a40 <HAL_TIM_SlaveConfigSynchro+0x74>
 8005a3a:	d912      	bls.n	8005a62 <HAL_TIM_SlaveConfigSynchro+0x96>
 8005a3c:	2830      	cmp	r0, #48	@ 0x30
 8005a3e:	d1f2      	bne.n	8005a26 <HAL_TIM_SlaveConfigSynchro+0x5a>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005a40:	68e2      	ldr	r2, [r4, #12]
 8005a42:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a46:	60e2      	str	r2, [r4, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005a48:	68e2      	ldr	r2, [r4, #12]
  __HAL_UNLOCK(htim);
 8005a4a:	2100      	movs	r1, #0
  htim->State = HAL_TIM_STATE_READY;
 8005a4c:	2501      	movs	r5, #1
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005a4e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005a52:	60e2      	str	r2, [r4, #12]
  htim->State = HAL_TIM_STATE_READY;
 8005a54:	f883 503d 	strb.w	r5, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8005a58:	f883 103c 	strb.w	r1, [r3, #60]	@ 0x3c
  return HAL_OK;
 8005a5c:	4608      	mov	r0, r1
}
 8005a5e:	bc30      	pop	{r4, r5}
 8005a60:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 8005a62:	f030 0210 	bics.w	r2, r0, #16
 8005a66:	d0eb      	beq.n	8005a40 <HAL_TIM_SlaveConfigSynchro+0x74>
    htim->State = HAL_TIM_STATE_READY;
 8005a68:	2001      	movs	r0, #1
    __HAL_UNLOCK(htim);
 8005a6a:	2200      	movs	r2, #0
    htim->State = HAL_TIM_STATE_READY;
 8005a6c:	f883 003d 	strb.w	r0, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8005a70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8005a74:	e7dd      	b.n	8005a32 <HAL_TIM_SlaveConfigSynchro+0x66>
  __HAL_LOCK(htim);
 8005a76:	2002      	movs	r0, #2
}
 8005a78:	4770      	bx	lr
  tmpccer = TIMx->CCER;
 8005a7a:	6a22      	ldr	r2, [r4, #32]
                               sSlaveConfig->TriggerPolarity,
 8005a7c:	688d      	ldr	r5, [r1, #8]
                               sSlaveConfig->TriggerFilter);
 8005a7e:	6908      	ldr	r0, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a80:	6a21      	ldr	r1, [r4, #32]
 8005a82:	f021 0110 	bic.w	r1, r1, #16
 8005a86:	6221      	str	r1, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a88:	69a1      	ldr	r1, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a8a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a8e:	f421 4170 	bic.w	r1, r1, #61440	@ 0xf000
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a92:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a96:	ea41 3100 	orr.w	r1, r1, r0, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8005a9a:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 8005a9c:	6222      	str	r2, [r4, #32]
 8005a9e:	e7cf      	b.n	8005a40 <HAL_TIM_SlaveConfigSynchro+0x74>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005aa0:	2d05      	cmp	r5, #5
 8005aa2:	d0c0      	beq.n	8005a26 <HAL_TIM_SlaveConfigSynchro+0x5a>
      tmpccer = htim->Instance->CCER;
 8005aa4:	6a20      	ldr	r0, [r4, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005aa6:	6a22      	ldr	r2, [r4, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005aa8:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005aaa:	f022 0201 	bic.w	r2, r2, #1
 8005aae:	6222      	str	r2, [r4, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005ab0:	69a2      	ldr	r2, [r4, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ab2:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005ab6:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 8005aba:	61a2      	str	r2, [r4, #24]
      htim->Instance->CCER = tmpccer;
 8005abc:	6220      	str	r0, [r4, #32]
      break;
 8005abe:	e7bf      	b.n	8005a40 <HAL_TIM_SlaveConfigSynchro+0x74>
                               sSlaveConfig->TriggerPolarity,
 8005ac0:	688a      	ldr	r2, [r1, #8]
                               sSlaveConfig->TriggerFilter);
 8005ac2:	6908      	ldr	r0, [r1, #16]
  tmpccer = TIMx->CCER;
 8005ac4:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ac6:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8005aca:	4311      	orrs	r1, r2
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005acc:	6a22      	ldr	r2, [r4, #32]
 8005ace:	f022 0201 	bic.w	r2, r2, #1
 8005ad2:	6222      	str	r2, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ad4:	69a2      	ldr	r2, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ad6:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ada:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8005ade:	61a2      	str	r2, [r4, #24]
  TIMx->CCER = tmpccer;
 8005ae0:	6221      	str	r1, [r4, #32]
 8005ae2:	e7ad      	b.n	8005a40 <HAL_TIM_SlaveConfigSynchro+0x74>

08005ae4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ae4:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8005ae8:	2a01      	cmp	r2, #1
 8005aea:	d037      	beq.n	8005b5c <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8005aec:	4603      	mov	r3, r0

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005aee:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005af0:	2002      	movs	r0, #2
{
 8005af2:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8005af4:	f883 003d 	strb.w	r0, [r3, #61]	@ 0x3d
  tmpcr2 = htim->Instance->CR2;
 8005af8:	6850      	ldr	r0, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005afa:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 8005afc:	6894      	ldr	r4, [r2, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8005afe:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b02:	4328      	orrs	r0, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b04:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b06:	4816      	ldr	r0, [pc, #88]	@ (8005b60 <HAL_TIMEx_MasterConfigSynchronization+0x7c>)
 8005b08:	4282      	cmp	r2, r0
 8005b0a:	d01a      	beq.n	8005b42 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8005b0c:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8005b10:	d017      	beq.n	8005b42 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8005b12:	f5a0 407c 	sub.w	r0, r0, #64512	@ 0xfc00
 8005b16:	4282      	cmp	r2, r0
 8005b18:	d013      	beq.n	8005b42 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8005b1a:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8005b1e:	4282      	cmp	r2, r0
 8005b20:	d00f      	beq.n	8005b42 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8005b22:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8005b26:	4282      	cmp	r2, r0
 8005b28:	d00b      	beq.n	8005b42 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8005b2a:	f500 4078 	add.w	r0, r0, #63488	@ 0xf800
 8005b2e:	4282      	cmp	r2, r0
 8005b30:	d007      	beq.n	8005b42 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8005b32:	f500 5070 	add.w	r0, r0, #15360	@ 0x3c00
 8005b36:	4282      	cmp	r2, r0
 8005b38:	d003      	beq.n	8005b42 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8005b3a:	f5a0 3094 	sub.w	r0, r0, #75776	@ 0x12800
 8005b3e:	4282      	cmp	r2, r0
 8005b40:	d104      	bne.n	8005b4c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b42:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b44:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b48:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b4a:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8005b4c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005b4e:	2201      	movs	r2, #1
 8005b50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8005b54:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8005b58:	bc30      	pop	{r4, r5}
 8005b5a:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005b5c:	2002      	movs	r0, #2
}
 8005b5e:	4770      	bx	lr
 8005b60:	40010000 	.word	0x40010000

08005b64 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b64:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d023      	beq.n	8005bb4 <HAL_TIMEx_ConfigBreakDeadTime+0x50>
{
 8005b6c:	b410      	push	{r4}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005b6e:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 8005b72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b76:	4602      	mov	r2, r0
 8005b78:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005b7a:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005b7c:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005b7e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005b82:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005b84:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005b88:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005b8a:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005b8c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005b90:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005b92:	6948      	ldr	r0, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005b94:	69cc      	ldr	r4, [r1, #28]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005b96:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005b9a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005b9c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005ba0:	6810      	ldr	r0, [r2, #0]

  __HAL_UNLOCK(htim);
 8005ba2:	2100      	movs	r1, #0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005ba4:	4323      	orrs	r3, r4
  htim->Instance->BDTR = tmpbdtr;
 8005ba6:	6443      	str	r3, [r0, #68]	@ 0x44
  __HAL_UNLOCK(htim);
 8005ba8:	f882 103c 	strb.w	r1, [r2, #60]	@ 0x3c

  return HAL_OK;
 8005bac:	4608      	mov	r0, r1
}
 8005bae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005bb2:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005bb4:	2002      	movs	r0, #2
}
 8005bb6:	4770      	bx	lr

08005bb8 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bb8:	2800      	cmp	r0, #0
 8005bba:	f000 8087 	beq.w	8005ccc <HAL_UART_Init+0x114>
{
 8005bbe:	b538      	push	{r3, r4, r5, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005bc0:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8005bc4:	4604      	mov	r4, r0
 8005bc6:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d079      	beq.n	8005cc2 <HAL_UART_Init+0x10a>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005bce:	6823      	ldr	r3, [r4, #0]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bd0:	68e0      	ldr	r0, [r4, #12]
  huart->gState = HAL_UART_STATE_BUSY;
 8005bd2:	2224      	movs	r2, #36	@ 0x24
 8005bd4:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8005bd8:	68da      	ldr	r2, [r3, #12]
 8005bda:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005bde:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005be0:	6919      	ldr	r1, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005be2:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005be4:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 8005be8:	4301      	orrs	r1, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005bea:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bec:	6119      	str	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005bee:	4302      	orrs	r2, r0
 8005bf0:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8005bf2:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005bf4:	4302      	orrs	r2, r0
 8005bf6:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 8005bf8:	f421 4116 	bic.w	r1, r1, #38400	@ 0x9600
 8005bfc:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005c00:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8005c02:	430a      	orrs	r2, r1
 8005c04:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c06:	695a      	ldr	r2, [r3, #20]
 8005c08:	69a0      	ldr	r0, [r4, #24]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005c0a:	4931      	ldr	r1, [pc, #196]	@ (8005cd0 <HAL_UART_Init+0x118>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c0c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005c10:	4302      	orrs	r2, r0
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005c12:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c14:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005c16:	d036      	beq.n	8005c86 <HAL_UART_Init+0xce>
 8005c18:	4a2e      	ldr	r2, [pc, #184]	@ (8005cd4 <HAL_UART_Init+0x11c>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d033      	beq.n	8005c86 <HAL_UART_Init+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005c1e:	f7fe ffed 	bl	8004bfc <HAL_RCC_GetPCLK1Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c22:	69e2      	ldr	r2, [r4, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005c24:	2119      	movs	r1, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c26:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005c2a:	e9d4 5300 	ldrd	r5, r3, [r4]
 8005c2e:	fba0 0101 	umull	r0, r1, r0, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c32:	d02b      	beq.n	8005c8c <HAL_UART_Init+0xd4>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c34:	009a      	lsls	r2, r3, #2
 8005c36:	0f9b      	lsrs	r3, r3, #30
 8005c38:	f7fa fb3a 	bl	80002b0 <__aeabi_uldivmod>
 8005c3c:	4a26      	ldr	r2, [pc, #152]	@ (8005cd8 <HAL_UART_Init+0x120>)
 8005c3e:	fba2 1300 	umull	r1, r3, r2, r0
 8005c42:	095b      	lsrs	r3, r3, #5
 8005c44:	2164      	movs	r1, #100	@ 0x64
 8005c46:	fb01 0013 	mls	r0, r1, r3, r0
 8005c4a:	0100      	lsls	r0, r0, #4
 8005c4c:	3032      	adds	r0, #50	@ 0x32
 8005c4e:	fba2 2000 	umull	r2, r0, r2, r0
 8005c52:	011b      	lsls	r3, r3, #4
 8005c54:	eb03 1350 	add.w	r3, r3, r0, lsr #5
 8005c58:	60ab      	str	r3, [r5, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c5a:	692a      	ldr	r2, [r5, #16]
 8005c5c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005c60:	612a      	str	r2, [r5, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c62:	696a      	ldr	r2, [r5, #20]
 8005c64:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005c68:	616a      	str	r2, [r5, #20]
  __HAL_UART_ENABLE(huart);
 8005c6a:	68ea      	ldr	r2, [r5, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c6c:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8005c6e:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 8005c70:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005c74:	60ea      	str	r2, [r5, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c76:	6463      	str	r3, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005c78:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005c7c:	f884 1042 	strb.w	r1, [r4, #66]	@ 0x42
  return HAL_OK;
 8005c80:	4618      	mov	r0, r3
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c82:	6363      	str	r3, [r4, #52]	@ 0x34
}
 8005c84:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 8005c86:	f7fe ffc9 	bl	8004c1c <HAL_RCC_GetPCLK2Freq>
 8005c8a:	e7ca      	b.n	8005c22 <HAL_UART_Init+0x6a>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005c8c:	18da      	adds	r2, r3, r3
 8005c8e:	f04f 0300 	mov.w	r3, #0
 8005c92:	415b      	adcs	r3, r3
 8005c94:	f7fa fb0c 	bl	80002b0 <__aeabi_uldivmod>
 8005c98:	4a0f      	ldr	r2, [pc, #60]	@ (8005cd8 <HAL_UART_Init+0x120>)
 8005c9a:	fba2 3100 	umull	r3, r1, r2, r0
 8005c9e:	0949      	lsrs	r1, r1, #5
 8005ca0:	2364      	movs	r3, #100	@ 0x64
 8005ca2:	fb03 0311 	mls	r3, r3, r1, r0
 8005ca6:	00db      	lsls	r3, r3, #3
 8005ca8:	3332      	adds	r3, #50	@ 0x32
 8005caa:	fba2 2303 	umull	r2, r3, r2, r3
 8005cae:	f3c3 1242 	ubfx	r2, r3, #5, #3
 8005cb2:	091b      	lsrs	r3, r3, #4
 8005cb4:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8005cb8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005cbc:	4413      	add	r3, r2
 8005cbe:	60ab      	str	r3, [r5, #8]
 8005cc0:	e7cb      	b.n	8005c5a <HAL_UART_Init+0xa2>
    huart->Lock = HAL_UNLOCKED;
 8005cc2:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8005cc6:	f7fe f8c3 	bl	8003e50 <HAL_UART_MspInit>
 8005cca:	e780      	b.n	8005bce <HAL_UART_Init+0x16>
    return HAL_ERROR;
 8005ccc:	2001      	movs	r0, #1
}
 8005cce:	4770      	bx	lr
 8005cd0:	40011000 	.word	0x40011000
 8005cd4:	40011400 	.word	0x40011400
 8005cd8:	51eb851f 	.word	0x51eb851f

08005cdc <VBS_GetAvBusVoltage_d>:
  }
  return (temp_avBusVoltage_d);
#else
  return (pHandle->AvBusVoltage_d);
#endif
}
 8005cdc:	88c0      	ldrh	r0, [r0, #6]
 8005cde:	4770      	bx	lr

08005ce0 <VBS_GetAvBusVoltage_V>:
    temp = 0U;
  }
  else
  {
#endif
    temp = (uint32_t)(pHandle->AvBusVoltage_d);
 8005ce0:	88c3      	ldrh	r3, [r0, #6]
    temp *= pHandle->ConversionFactor;
 8005ce2:	8840      	ldrh	r0, [r0, #2]
 8005ce4:	fb03 f000 	mul.w	r0, r3, r0
    temp /= 65536U;
#ifdef NULL_PTR_CHECK_BUS_VOLT
  }
#endif
  return ((uint16_t)temp);
}
 8005ce8:	0c00      	lsrs	r0, r0, #16
 8005cea:	4770      	bx	lr

08005cec <Circle_Limitation>:
  *  @f$v_q = \sqrt(MaxModule^2-v_d^2\ ) @f$

  *
  */
__weak qd_t Circle_Limitation(const CircleLimitation_Handle_t *pHandle, qd_t Vqd)
{
 8005cec:	b570      	push	{r4, r5, r6, lr}
    int32_t square_limit;
    int32_t vd_square_limit;
    int32_t new_q;
    int32_t new_d;

    maxModule = (int32_t)pHandle->MaxModule;
 8005cee:	8803      	ldrh	r3, [r0, #0]
 8005cf0:	140d      	asrs	r5, r1, #16
 8005cf2:	b20c      	sxth	r4, r1

    square_q = ((int32_t)(Vqd.q)) * Vqd.q;
    square_d = ((int32_t)(Vqd.d)) * Vqd.d;
 8005cf4:	fb05 f205 	mul.w	r2, r5, r5
    square_limit = maxModule * maxModule;
 8005cf8:	fb03 f303 	mul.w	r3, r3, r3
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
    square_sum = square_q + square_d;
 8005cfc:	fb04 2104 	mla	r1, r4, r4, r2

    if (square_sum > square_limit)
 8005d00:	428b      	cmp	r3, r1
{
 8005d02:	b084      	sub	sp, #16
    if (square_sum > square_limit)
 8005d04:	da0f      	bge.n	8005d26 <Circle_Limitation+0x3a>
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
 8005d06:	8846      	ldrh	r6, [r0, #2]
 8005d08:	fb06 f006 	mul.w	r0, r6, r6
    {
      if (square_d <= vd_square_limit)
 8005d0c:	4282      	cmp	r2, r0
 8005d0e:	dd13      	ble.n	8005d38 <Circle_Limitation+0x4c>
        new_d = Vqd.d;
      }
      else
      {
        new_d = (int32_t)pHandle->MaxVd;
        if (Vqd.d < 0)
 8005d10:	2d00      	cmp	r5, #0
#if defined CIRCLE_LIMITATION_SQRT_M0
        square_temp = (square_limit - vd_square_limit) / 1048576;
        new_q = SqrtTable[square_temp];
#else
        square_temp = square_limit - vd_square_limit;
        new_q = MCM_Sqrt(square_temp);
 8005d12:	eba3 0000 	sub.w	r0, r3, r0
          new_d = -new_d;
 8005d16:	bfb8      	it	lt
 8005d18:	4276      	neglt	r6, r6
        new_q = MCM_Sqrt(square_temp);
 8005d1a:	f7fb fbff 	bl	800151c <MCM_Sqrt>
#endif
        if (Vqd.q < 0)
 8005d1e:	2c00      	cmp	r4, #0
        {
          /* Nothing to do */
        }
      }
      local_vqd.q = (int16_t)new_q;
      local_vqd.d = (int16_t)new_d;
 8005d20:	b235      	sxth	r5, r6
        if (Vqd.q < 0)
 8005d22:	db0e      	blt.n	8005d42 <Circle_Limitation+0x56>
      local_vqd.q = (int16_t)new_q;
 8005d24:	b204      	sxth	r4, r0
    }
#ifdef NULL_PTR_CHECK_CRC_LIM
  }
#endif
  return (local_vqd);
 8005d26:	b2a4      	uxth	r4, r4
 8005d28:	2000      	movs	r0, #0
 8005d2a:	f364 000f 	bfi	r0, r4, #0, #16
 8005d2e:	b2ad      	uxth	r5, r5
 8005d30:	f365 401f 	bfi	r0, r5, #16, #16
}
 8005d34:	b004      	add	sp, #16
 8005d36:	bd70      	pop	{r4, r5, r6, pc}
        new_q = MCM_Sqrt(square_temp);
 8005d38:	1a98      	subs	r0, r3, r2
 8005d3a:	f7fb fbef 	bl	800151c <MCM_Sqrt>
        if (Vqd.q < 0)
 8005d3e:	2c00      	cmp	r4, #0
 8005d40:	daf0      	bge.n	8005d24 <Circle_Limitation+0x38>
          new_q = - new_q;
 8005d42:	4240      	negs	r0, r0
      local_vqd.q = (int16_t)new_q;
 8005d44:	b204      	sxth	r4, r0
      local_vqd.d = (int16_t)new_d;
 8005d46:	e7ee      	b.n	8005d26 <Circle_Limitation+0x3a>

08005d48 <MCPA_dataLog>:
  * @brief  Allocates and fills buffer with asynchronous data to be sent to controller
  *
  * @param  *pHandle Pointer to the MCPA Handle
  */
void MCPA_dataLog(MCPA_Handle_t *pHandle)
{
 8005d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif
    uint32_t *logValue;
    uint16_t *logValue16;
    uint8_t i;

    if (pHandle->HFIndex == pHandle->HFRateBuff) /*  */
 8005d4a:	7fc3      	ldrb	r3, [r0, #31]
 8005d4c:	f890 2022 	ldrb.w	r2, [r0, #34]	@ 0x22
 8005d50:	429a      	cmp	r2, r3
{
 8005d52:	4604      	mov	r4, r0
    if (pHandle->HFIndex == pHandle->HFRateBuff) /*  */
 8005d54:	d002      	beq.n	8005d5c <MCPA_dataLog+0x14>
      }
    }
    else
    {
      /* Nothing to log just waiting next call to MCPA_datalog */
      pHandle->HFIndex++;
 8005d56:	3301      	adds	r3, #1
 8005d58:	77c3      	strb	r3, [r0, #31]
    }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
}
 8005d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (0U == pHandle->bufferIndex)
 8005d5c:	8b05      	ldrh	r5, [r0, #24]
      pHandle->HFIndex = 0U;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	77c3      	strb	r3, [r0, #31]
      if (0U == pHandle->bufferIndex)
 8005d62:	b1a5      	cbz	r5, 8005d8e <MCPA_dataLog+0x46>
 8005d64:	6961      	ldr	r1, [r4, #20]
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 8005d66:	8ba2      	ldrh	r2, [r4, #28]
 8005d68:	42aa      	cmp	r2, r5
 8005d6a:	d24e      	bcs.n	8005e0a <MCPA_dataLog+0xc2>
 8005d6c:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
        if (pHandle->MFRateBuff == 254U) /* MFRateBuff = 254 means we dump MF data once per buffer */
 8005d70:	2bfe      	cmp	r3, #254	@ 0xfe
 8005d72:	d066      	beq.n	8005e42 <MCPA_dataLog+0xfa>
        *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after
 8005d74:	f894 302a 	ldrb.w	r3, [r4, #42]	@ 0x2a
 8005d78:	534b      	strh	r3, [r1, r5]
        pHandle->pTransportLayer->fSendPacket(pHandle->pTransportLayer, pHandle->currentBuffer,
 8005d7a:	8b22      	ldrh	r2, [r4, #24]
 8005d7c:	6820      	ldr	r0, [r4, #0]
 8005d7e:	3202      	adds	r2, #2
 8005d80:	2309      	movs	r3, #9
 8005d82:	6845      	ldr	r5, [r0, #4]
 8005d84:	b292      	uxth	r2, r2
 8005d86:	47a8      	blx	r5
        pHandle->bufferIndex = 0U;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	8323      	strh	r3, [r4, #24]
}
 8005d8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (0U == pHandle->pTransportLayer->fGetBuffer (pHandle->pTransportLayer,
 8005d8e:	4601      	mov	r1, r0
 8005d90:	2209      	movs	r2, #9
 8005d92:	f851 0b14 	ldr.w	r0, [r1], #20
 8005d96:	6803      	ldr	r3, [r0, #0]
 8005d98:	4798      	blx	r3
 8005d9a:	b390      	cbz	r0, 8005e02 <MCPA_dataLog+0xba>
          *logValue = GLOBAL_TIMESTAMP; /* 32 first bits is used to store Timestamp */
 8005d9c:	4b49      	ldr	r3, [pc, #292]	@ (8005ec4 <MCPA_dataLog+0x17c>)
 8005d9e:	6961      	ldr	r1, [r4, #20]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	600b      	str	r3, [r1, #0]
          if (pHandle->Mark == pHandle->MarkBuff)
 8005da4:	f894 0029 	ldrb.w	r0, [r4, #41]	@ 0x29
 8005da8:	f894 202a 	ldrb.w	r2, [r4, #42]	@ 0x2a
          pHandle->MFIndex = 0U; /* Restart the motif from scratch at each buffer */
 8005dac:	f884 5020 	strb.w	r5, [r4, #32]
          pHandle->bufferIndex = 4U;
 8005db0:	2304      	movs	r3, #4
          if (pHandle->Mark == pHandle->MarkBuff)
 8005db2:	4282      	cmp	r2, r0
          pHandle->bufferIndex = 4U;
 8005db4:	8323      	strh	r3, [r4, #24]
          if (pHandle->Mark == pHandle->MarkBuff)
 8005db6:	d101      	bne.n	8005dbc <MCPA_dataLog+0x74>
 8005db8:	461d      	mov	r5, r3
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 8005dba:	e7d4      	b.n	8005d66 <MCPA_dataLog+0x1e>
            pHandle->MFNumBuff           = pHandle->MFNum;
 8005dbc:	f894 3027 	ldrb.w	r3, [r4, #39]	@ 0x27
            pHandle->HFNumBuff           = pHandle->HFNum;
 8005dc0:	f894 2023 	ldrb.w	r2, [r4, #35]	@ 0x23
            pHandle->MFRateBuff          = pHandle->MFRate;
 8005dc4:	f894 1025 	ldrb.w	r1, [r4, #37]	@ 0x25
            pHandle->HFRateBuff          = pHandle->HFRate;
 8005dc8:	f894 5021 	ldrb.w	r5, [r4, #33]	@ 0x21
            pHandle->HFNumBuff           = pHandle->HFNum;
 8005dcc:	f884 2024 	strb.w	r2, [r4, #36]	@ 0x24
            pHandle->MFNumBuff           = pHandle->MFNum;
 8005dd0:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
                         ((uint32_t)pHandle->HFNum + (uint32_t)pHandle->MFNum) * 4U); /* We store pointer here,
 8005dd4:	441a      	add	r2, r3
            pHandle->bufferTxTriggerBuff = pHandle->bufferTxTrigger;
 8005dd6:	8b63      	ldrh	r3, [r4, #26]
            pHandle->MarkBuff            = pHandle->Mark;
 8005dd8:	f884 002a 	strb.w	r0, [r4, #42]	@ 0x2a
            (void)memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable,
 8005ddc:	0092      	lsls	r2, r2, #2
            pHandle->MFRateBuff          = pHandle->MFRate;
 8005dde:	f884 1026 	strb.w	r1, [r4, #38]	@ 0x26
            pHandle->bufferTxTriggerBuff = pHandle->bufferTxTrigger;
 8005de2:	83a3      	strh	r3, [r4, #28]
            (void)memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable,
 8005de4:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
            pHandle->HFRateBuff          = pHandle->HFRate;
 8005de8:	f884 5022 	strb.w	r5, [r4, #34]	@ 0x22
            (void)memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable,
 8005dec:	f002 f84f 	bl	8007e8e <memcpy>
                         (uint32_t)pHandle->HFNum + (uint32_t)pHandle->MFNum); /* 1 size byte per ID */
 8005df0:	f894 2023 	ldrb.w	r2, [r4, #35]	@ 0x23
 8005df4:	f894 3027 	ldrb.w	r3, [r4, #39]	@ 0x27
            (void)memcpy(pHandle->dataSizeTableBuff, pHandle->dataSizeTable,
 8005df8:	e9d4 1003 	ldrd	r1, r0, [r4, #12]
 8005dfc:	441a      	add	r2, r3
 8005dfe:	f002 f846 	bl	8007e8e <memcpy>
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 8005e02:	8b25      	ldrh	r5, [r4, #24]
 8005e04:	2d00      	cmp	r5, #0
 8005e06:	d1ad      	bne.n	8005d64 <MCPA_dataLog+0x1c>
}
 8005e08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8005e0a:	f894 6024 	ldrb.w	r6, [r4, #36]	@ 0x24
        logValue16 = (uint16_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 8005e0e:	194b      	adds	r3, r1, r5
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8005e10:	b36e      	cbz	r6, 8005e6e <MCPA_dataLog+0x126>
 8005e12:	68a2      	ldr	r2, [r4, #8]
 8005e14:	eb03 0c46 	add.w	ip, r3, r6, lsl #1
 8005e18:	3a04      	subs	r2, #4
          *logValue16 = *((uint16_t *) pHandle->dataPtrTableBuff[i]) ; //cstat !MISRAC2012-Rule-11.5
 8005e1a:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8005e1e:	8800      	ldrh	r0, [r0, #0]
 8005e20:	f823 0b02 	strh.w	r0, [r3], #2
          pHandle->bufferIndex = pHandle->bufferIndex + 2U;
 8005e24:	8b25      	ldrh	r5, [r4, #24]
 8005e26:	3502      	adds	r5, #2
 8005e28:	b2ad      	uxth	r5, r5
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8005e2a:	459c      	cmp	ip, r3
          pHandle->bufferIndex = pHandle->bufferIndex + 2U;
 8005e2c:	8325      	strh	r5, [r4, #24]
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8005e2e:	d1f4      	bne.n	8005e1a <MCPA_dataLog+0xd2>
        if (pHandle->MFRateBuff < 254U)
 8005e30:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8005e34:	8ba2      	ldrh	r2, [r4, #28]
        if (pHandle->MFRateBuff < 254U)
 8005e36:	2bfd      	cmp	r3, #253	@ 0xfd
 8005e38:	4618      	mov	r0, r3
 8005e3a:	d91d      	bls.n	8005e78 <MCPA_dataLog+0x130>
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8005e3c:	4295      	cmp	r5, r2
 8005e3e:	d897      	bhi.n	8005d70 <MCPA_dataLog+0x28>
}
 8005e40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8005e42:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 8005e46:	f894 0028 	ldrb.w	r0, [r4, #40]	@ 0x28
 8005e4a:	4418      	add	r0, r3
 8005e4c:	4298      	cmp	r0, r3
 8005e4e:	dd91      	ble.n	8005d74 <MCPA_dataLog+0x2c>
            *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8005e50:	68a7      	ldr	r7, [r4, #8]
            pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 8005e52:	6926      	ldr	r6, [r4, #16]
            *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8005e54:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
 8005e58:	6812      	ldr	r2, [r2, #0]
 8005e5a:	514a      	str	r2, [r1, r5]
          for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8005e5c:	1c5a      	adds	r2, r3, #1
            pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 8005e5e:	5cf3      	ldrb	r3, [r6, r3]
 8005e60:	442b      	add	r3, r5
 8005e62:	b29d      	uxth	r5, r3
          for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8005e64:	b2d3      	uxtb	r3, r2
 8005e66:	4283      	cmp	r3, r0
            pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 8005e68:	8325      	strh	r5, [r4, #24]
          for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8005e6a:	dbf3      	blt.n	8005e54 <MCPA_dataLog+0x10c>
 8005e6c:	e782      	b.n	8005d74 <MCPA_dataLog+0x2c>
        if (pHandle->MFRateBuff < 254U)
 8005e6e:	f894 0026 	ldrb.w	r0, [r4, #38]	@ 0x26
 8005e72:	28fd      	cmp	r0, #253	@ 0xfd
 8005e74:	f63f af71 	bhi.w	8005d5a <MCPA_dataLog+0x12>
          if (pHandle->MFIndex == pHandle->MFRateBuff)
 8005e78:	f894 3020 	ldrb.w	r3, [r4, #32]
 8005e7c:	4283      	cmp	r3, r0
 8005e7e:	d006      	beq.n	8005e8e <MCPA_dataLog+0x146>
            pHandle->MFIndex ++;
 8005e80:	3301      	adds	r3, #1
 8005e82:	f884 3020 	strb.w	r3, [r4, #32]
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8005e86:	4295      	cmp	r5, r2
 8005e88:	f63f af74 	bhi.w	8005d74 <MCPA_dataLog+0x2c>
}
 8005e8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8005e8e:	f894 7028 	ldrb.w	r7, [r4, #40]	@ 0x28
 8005e92:	4437      	add	r7, r6
            pHandle->MFIndex = 0U;
 8005e94:	2300      	movs	r3, #0
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8005e96:	42b7      	cmp	r7, r6
            pHandle->MFIndex = 0U;
 8005e98:	f884 3020 	strb.w	r3, [r4, #32]
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8005e9c:	ddf3      	ble.n	8005e86 <MCPA_dataLog+0x13e>
              *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8005e9e:	f8d4 e008 	ldr.w	lr, [r4, #8]
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8005ea2:	f8d4 c010 	ldr.w	ip, [r4, #16]
              *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8005ea6:	f85e 3026 	ldr.w	r3, [lr, r6, lsl #2]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	514b      	str	r3, [r1, r5]
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8005eae:	f81c 3006 	ldrb.w	r3, [ip, r6]
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8005eb2:	1c70      	adds	r0, r6, #1
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8005eb4:	442b      	add	r3, r5
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8005eb6:	b2c6      	uxtb	r6, r0
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8005eb8:	b29d      	uxth	r5, r3
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8005eba:	42be      	cmp	r6, r7
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8005ebc:	8325      	strh	r5, [r4, #24]
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8005ebe:	dbf2      	blt.n	8005ea6 <MCPA_dataLog+0x15e>
 8005ec0:	e7e1      	b.n	8005e86 <MCPA_dataLog+0x13e>
 8005ec2:	bf00      	nop
 8005ec4:	2000197c 	.word	0x2000197c

08005ec8 <MCPA_flushDataLog>:
#endif
    uint32_t *logValue;
    uint16_t *logValue16;
    uint8_t i;

    if (pHandle->bufferIndex > 0U)
 8005ec8:	8b03      	ldrh	r3, [r0, #24]
 8005eca:	b19b      	cbz	r3, 8005ef4 <MCPA_flushDataLog+0x2c>
{
 8005ecc:	b570      	push	{r4, r5, r6, lr}
    {  /* If buffer is allocated, we must send it */
      if (pHandle->MFRateBuff == 254U) /* In case of flush, we must respect the packet format to allow
 8005ece:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
                                          proper decoding */
      {
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
        {
         logValue = (uint32_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 8005ed2:	6941      	ldr	r1, [r0, #20]
      if (pHandle->MFRateBuff == 254U) /* In case of flush, we must respect the packet format to allow
 8005ed4:	2afe      	cmp	r2, #254	@ 0xfe
 8005ed6:	4604      	mov	r4, r0
 8005ed8:	d00d      	beq.n	8005ef6 <MCPA_flushDataLog+0x2e>
      else
      {
        /* Nothing to do */
      }
      logValue16 = (uint16_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
      *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after
 8005eda:	f894 202a 	ldrb.w	r2, [r4, #42]	@ 0x2a
 8005ede:	52ca      	strh	r2, [r1, r3]
                                          the MARK */
      pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer,
 8005ee0:	8b22      	ldrh	r2, [r4, #24]
 8005ee2:	6820      	ldr	r0, [r4, #0]
 8005ee4:	3202      	adds	r2, #2
 8005ee6:	2309      	movs	r3, #9
 8005ee8:	6845      	ldr	r5, [r0, #4]
 8005eea:	b292      	uxth	r2, r2
 8005eec:	47a8      	blx	r5
                                             pHandle->bufferIndex + 2U, MCTL_ASYNC);
      pHandle->bufferIndex = 0U;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	8323      	strh	r3, [r4, #24]
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
}
 8005ef2:	bd70      	pop	{r4, r5, r6, pc}
 8005ef4:	4770      	bx	lr
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8005ef6:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 8005efa:	f890 c028 	ldrb.w	ip, [r0, #40]	@ 0x28
 8005efe:	4494      	add	ip, r2
 8005f00:	4562      	cmp	r2, ip
 8005f02:	daea      	bge.n	8005eda <MCPA_flushDataLog+0x12>
         *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8005f04:	6886      	ldr	r6, [r0, #8]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8005f06:	6905      	ldr	r5, [r0, #16]
         *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8005f08:	f856 0022 	ldr.w	r0, [r6, r2, lsl #2]
 8005f0c:	6800      	ldr	r0, [r0, #0]
 8005f0e:	50c8      	str	r0, [r1, r3]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8005f10:	5ca8      	ldrb	r0, [r5, r2]
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8005f12:	3201      	adds	r2, #1
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8005f14:	4403      	add	r3, r0
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8005f16:	b2d2      	uxtb	r2, r2
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8005f18:	b29b      	uxth	r3, r3
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8005f1a:	4562      	cmp	r2, ip
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8005f1c:	8323      	strh	r3, [r4, #24]
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8005f1e:	dbf3      	blt.n	8005f08 <MCPA_flushDataLog+0x40>
 8005f20:	e7db      	b.n	8005eda <MCPA_flushDataLog+0x12>
 8005f22:	bf00      	nop

08005f24 <MCPA_cfgLog>:
  *
  * @param  *pHandle Pointer to the MCPA Handle
  * @param  *cfgdata Configuration of the Async communication
  */
uint8_t MCPA_cfgLog(MCPA_Handle_t *pHandle, uint8_t *cfgdata)
{
 8005f24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint8_t i;
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF) */
    uint16_t newID, buffSize;
    uint8_t *pCfgData = cfgdata;

    buffSize = *((uint16_t *)pCfgData); //cstat !MISRAC2012-Rule-11.3
 8005f28:	880f      	ldrh	r7, [r1, #0]
{
 8005f2a:	4604      	mov	r4, r0

    if (buffSize == 0U)
 8005f2c:	2f00      	cmp	r7, #0
 8005f2e:	d046      	beq.n	8005fbe <MCPA_cfgLog+0x9a>
    { 
      /* Switch Off condition */
      MCPA_stopDataLog(pHandle);
    }
    else if (buffSize > pHandle->pTransportLayer->txAsyncMaxPayload)
 8005f30:	6803      	ldr	r3, [r0, #0]
 8005f32:	89db      	ldrh	r3, [r3, #14]
 8005f34:	42bb      	cmp	r3, r7
 8005f36:	d33f      	bcc.n	8005fb8 <MCPA_cfgLog+0x94>
    {
      result = MCP_ERROR_NO_TXASYNC_SPACE;
    }
    else
    {
      pHandle->HFRate = *((uint8_t *)&pCfgData[2]);
 8005f38:	788b      	ldrb	r3, [r1, #2]
 8005f3a:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
      pHandle->HFNum  = *((uint8_t *)&pCfgData[3]);
 8005f3e:	f891 8003 	ldrb.w	r8, [r1, #3]
 8005f42:	f880 8023 	strb.w	r8, [r0, #35]	@ 0x23
      pHandle->MFRate = *((uint8_t *)&pCfgData[4]);
 8005f46:	790b      	ldrb	r3, [r1, #4]
 8005f48:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
      pHandle->MFNum  = *((uint8_t *)&pCfgData[5]);
 8005f4c:	794b      	ldrb	r3, [r1, #5]
      pCfgData = &pCfgData[6]; /* Start of the HF IDs */

      if ((pHandle->HFNum + pHandle->MFNum) <= pHandle->nbrOfDataLog)
 8005f4e:	7f82      	ldrb	r2, [r0, #30]
      pHandle->MFNum  = *((uint8_t *)&pCfgData[5]);
 8005f50:	f880 3027 	strb.w	r3, [r0, #39]	@ 0x27
      if ((pHandle->HFNum + pHandle->MFNum) <= pHandle->nbrOfDataLog)
 8005f54:	4443      	add	r3, r8
 8005f56:	4293      	cmp	r3, r2
 8005f58:	dc57      	bgt.n	800600a <MCPA_cfgLog+0xe6>
      pCfgData = &pCfgData[6]; /* Start of the HF IDs */
 8005f5a:	1d8e      	adds	r6, r1, #6
      {
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d057      	beq.n	8006010 <MCPA_cfgLog+0xec>
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF) */
 8005f60:	f04f 0800 	mov.w	r8, #0
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8005f64:	4645      	mov	r5, r8
 8005f66:	e011      	b.n	8005f8c <MCPA_cfgLog+0x68>
        {
          newID = *((uint16_t *)pCfgData); //cstat !MISRAC2012-Rule-11.3
          (void)RI_GetPtrReg(newID, &pHandle->dataPtrTable[i]);
          /* HF Data are fixed to 2 bytes */
          pHandle->dataSizeTable[i] = (i < pHandle->HFNum ) ? 2U : RI_GetIDSize(newID);
 8005f68:	68e3      	ldr	r3, [r4, #12]
 8005f6a:	5558      	strb	r0, [r3, r5]
          pCfgData++; /* Point to the next UID */
          pCfgData++;
          logSize = logSize+pHandle->dataSizeTable[i];
 8005f6c:	68e2      	ldr	r2, [r4, #12]
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8005f6e:	f894 3023 	ldrb.w	r3, [r4, #35]	@ 0x23
 8005f72:	f894 1027 	ldrb.w	r1, [r4, #39]	@ 0x27
          logSize = logSize+pHandle->dataSizeTable[i];
 8005f76:	5d52      	ldrb	r2, [r2, r5]
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8005f78:	f105 0c01 	add.w	ip, r5, #1
 8005f7c:	fa5f f58c 	uxtb.w	r5, ip
 8005f80:	440b      	add	r3, r1
          logSize = logSize+pHandle->dataSizeTable[i];
 8005f82:	4442      	add	r2, r8
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8005f84:	429d      	cmp	r5, r3
          logSize = logSize+pHandle->dataSizeTable[i];
 8005f86:	fa1f f882 	uxth.w	r8, r2
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8005f8a:	da11      	bge.n	8005fb0 <MCPA_cfgLog+0x8c>
          newID = *((uint16_t *)pCfgData); //cstat !MISRAC2012-Rule-11.3
 8005f8c:	f836 9b02 	ldrh.w	r9, [r6], #2
          (void)RI_GetPtrReg(newID, &pHandle->dataPtrTable[i]);
 8005f90:	6861      	ldr	r1, [r4, #4]
 8005f92:	4648      	mov	r0, r9
 8005f94:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8005f98:	f7fd fa82 	bl	80034a0 <RI_GetPtrReg>
          pHandle->dataSizeTable[i] = (i < pHandle->HFNum ) ? 2U : RI_GetIDSize(newID);
 8005f9c:	f894 3023 	ldrb.w	r3, [r4, #35]	@ 0x23
 8005fa0:	42ab      	cmp	r3, r5
 8005fa2:	f04f 0002 	mov.w	r0, #2
 8005fa6:	d8df      	bhi.n	8005f68 <MCPA_cfgLog+0x44>
 8005fa8:	4648      	mov	r0, r9
 8005faa:	f7fd fa6d 	bl	8003488 <RI_GetIDSize>
 8005fae:	e7db      	b.n	8005f68 <MCPA_cfgLog+0x44>
        }

        /* Smallest packet must be able to contain logSize Markbyte AsyncID and TimeStamp */
        if (buffSize < (logSize + 2U + 4U))
 8005fb0:	f108 0206 	add.w	r2, r8, #6
 8005fb4:	4297      	cmp	r7, r2
 8005fb6:	d210      	bcs.n	8005fda <MCPA_cfgLog+0xb6>
      result = MCP_ERROR_NO_TXASYNC_SPACE;
 8005fb8:	2009      	movs	r0, #9
    }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
  return (result);
}
 8005fba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (pHandle->bufferIndex > 0U)
 8005fbe:	8b03      	ldrh	r3, [r0, #24]
  pHandle->Mark = 0U;
 8005fc0:	f880 7029 	strb.w	r7, [r0, #41]	@ 0x29
  if (pHandle->bufferIndex > 0U)
 8005fc4:	b9ab      	cbnz	r3, 8005ff2 <MCPA_cfgLog+0xce>
  pHandle->bufferIndex = 0U;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	8323      	strh	r3, [r4, #24]
  pHandle->MarkBuff    = 0U;
 8005fca:	f884 302a 	strb.w	r3, [r4, #42]	@ 0x2a
  pHandle->HFIndex     = 0U;
 8005fce:	77e3      	strb	r3, [r4, #31]
  pHandle->HFRateBuff  = 0U; /* We do not want to miss any sample at the restart */
 8005fd0:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
  uint8_t result = MCP_CMD_OK;
 8005fd4:	2000      	movs	r0, #0
}
 8005fd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          pHandle->bufferTxTrigger = buffSize-logSize - 2U; /* 2 is required to add the last Mark byte and NUL
 8005fda:	3f02      	subs	r7, #2
 8005fdc:	eba7 0708 	sub.w	r7, r7, r8
 8005fe0:	8367      	strh	r7, [r4, #26]
          pHandle->Mark = *((uint8_t *)pCfgData);
 8005fe2:	7833      	ldrb	r3, [r6, #0]
 8005fe4:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
          if (0U == pHandle->Mark)
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d1f3      	bne.n	8005fd4 <MCPA_cfgLog+0xb0>
  if (pHandle->bufferIndex > 0U)
 8005fec:	8b23      	ldrh	r3, [r4, #24]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d0e9      	beq.n	8005fc6 <MCPA_cfgLog+0xa2>
    logValue16 = (uint16_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 8005ff2:	6961      	ldr	r1, [r4, #20]
    *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after
 8005ff4:	f894 202a 	ldrb.w	r2, [r4, #42]	@ 0x2a
 8005ff8:	52ca      	strh	r2, [r1, r3]
    pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer,
 8005ffa:	8b22      	ldrh	r2, [r4, #24]
 8005ffc:	6820      	ldr	r0, [r4, #0]
 8005ffe:	3202      	adds	r2, #2
 8006000:	6845      	ldr	r5, [r0, #4]
 8006002:	b292      	uxth	r2, r2
 8006004:	2309      	movs	r3, #9
 8006006:	47a8      	blx	r5
 8006008:	e7dd      	b.n	8005fc6 <MCPA_cfgLog+0xa2>
        result = MCP_ERROR_BAD_RAW_FORMAT;
 800600a:	200a      	movs	r0, #10
}
 800600c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8006010:	2206      	movs	r2, #6
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF) */
 8006012:	4698      	mov	r8, r3
 8006014:	e7ce      	b.n	8005fb4 <MCPA_cfgLog+0x90>
 8006016:	bf00      	nop

08006018 <NTC_Clear>:
    /* nothing to do */
  }
  else
  {
#endif
    pHandle->hAvTemp_d = 0U;
 8006018:	2300      	movs	r3, #0
 800601a:	8043      	strh	r3, [r0, #2]
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
}
 800601c:	4770      	bx	lr
 800601e:	bf00      	nop

08006020 <NTC_Init>:
    if (REAL_SENSOR == pHandle->bSensorType)
 8006020:	7802      	ldrb	r2, [r0, #0]
{
 8006022:	b508      	push	{r3, lr}
    if (REAL_SENSOR == pHandle->bSensorType)
 8006024:	b122      	cbz	r2, 8006030 <NTC_Init+0x10>
      pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 8006026:	8882      	ldrh	r2, [r0, #4]
 8006028:	8042      	strh	r2, [r0, #2]
      pHandle->hFaultState = MC_NO_ERROR;
 800602a:	2100      	movs	r1, #0
 800602c:	8101      	strh	r1, [r0, #8]
}
 800602e:	bd08      	pop	{r3, pc}
      NTC_Clear(pHandle);
 8006030:	f7ff fff2 	bl	8006018 <NTC_Clear>
}
 8006034:	bd08      	pop	{r3, pc}
 8006036:	bf00      	nop

08006038 <NTC_GetAvTemp_C>:
  else
  {
#endif
    int32_t wTemp;

    if (REAL_SENSOR == pHandle->bSensorType)
 8006038:	7803      	ldrb	r3, [r0, #0]
 800603a:	b95b      	cbnz	r3, 8006054 <NTC_GetAvTemp_C+0x1c>
    {
      wTemp = (int32_t)pHandle->hAvTemp_d;
 800603c:	8842      	ldrh	r2, [r0, #2]
      wTemp -= ((int32_t)pHandle->wV0);
 800603e:	6941      	ldr	r1, [r0, #20]
      wTemp *= pHandle->hSensitivity;
 8006040:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
#ifndef FULL_MISRA_C_COMPLIANCY_NTC_TEMP
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      wTemp = (wTemp >> 16) + (int32_t)pHandle->hT0;
 8006044:	8b00      	ldrh	r0, [r0, #24]
      wTemp -= ((int32_t)pHandle->wV0);
 8006046:	1a52      	subs	r2, r2, r1
      wTemp *= pHandle->hSensitivity;
 8006048:	fb02 f303 	mul.w	r3, r2, r3
      wTemp = (wTemp >> 16) + (int32_t)pHandle->hT0;
 800604c:	eb00 4023 	add.w	r0, r0, r3, asr #16
    returnValue = (int16_t)wTemp;
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (returnValue);
}
 8006050:	b200      	sxth	r0, r0
 8006052:	4770      	bx	lr
      wTemp = (int32_t)pHandle->hExpectedTemp_C;
 8006054:	88c0      	ldrh	r0, [r0, #6]
}
 8006056:	b200      	sxth	r0, r0
 8006058:	4770      	bx	lr
 800605a:	bf00      	nop

0800605c <PID_HandleInit>:
  {
#endif
    pHandle->hKpGain =  pHandle->hDefKpGain;
    pHandle->hKiGain =  pHandle->hDefKiGain;
    pHandle->hKdGain =  pHandle->hDefKdGain;
    pHandle->wIntegralTerm = 0;
 800605c:	2300      	movs	r3, #0
    pHandle->hKpGain =  pHandle->hDefKpGain;
 800605e:	6801      	ldr	r1, [r0, #0]
    pHandle->hKdGain =  pHandle->hDefKdGain;
 8006060:	8c02      	ldrh	r2, [r0, #32]
    pHandle->hKpGain =  pHandle->hDefKpGain;
 8006062:	6041      	str	r1, [r0, #4]
    pHandle->hKdGain =  pHandle->hDefKdGain;
 8006064:	8442      	strh	r2, [r0, #34]	@ 0x22
    pHandle->wIntegralTerm = 0;
 8006066:	6083      	str	r3, [r0, #8]
    pHandle->wPrevProcessVarError = 0;
 8006068:	6283      	str	r3, [r0, #40]	@ 0x28
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 800606a:	4770      	bx	lr

0800606c <PID_SetKP>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKpGain = hKpGain;
 800606c:	8081      	strh	r1, [r0, #4]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 800606e:	4770      	bx	lr

08006070 <PID_SetKI>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKiGain = hKiGain;
 8006070:	80c1      	strh	r1, [r0, #6]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8006072:	4770      	bx	lr

08006074 <PID_GetKP>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKpGain);
#else
  return (pHandle->hKpGain);
#endif
}
 8006074:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8006078:	4770      	bx	lr
 800607a:	bf00      	nop

0800607c <PID_GetKI>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKiGain);
#else
  return (pHandle->hKiGain);
#endif
}
 800607c:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8006080:	4770      	bx	lr
 8006082:	bf00      	nop

08006084 <PID_SetIntegralTerm>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wIntegralTerm = wIntegralTermValue;
 8006084:	6081      	str	r1, [r0, #8]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return;
}
 8006086:	4770      	bx	lr

08006088 <PID_GetKPDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKpDivisorPOW2);
#else
  return (pHandle->hKpDivisorPOW2);
#endif
}
 8006088:	8b80      	ldrh	r0, [r0, #28]
 800608a:	4770      	bx	lr

0800608c <PID_SetKPDivisorPOW2>:
  }
  else
  {
#endif
    pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
    pHandle->hKpDivisor = (((uint16_t)1) << hKpDivisorPOW2);
 800608c:	2301      	movs	r3, #1
 800608e:	408b      	lsls	r3, r1
    pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
 8006090:	8381      	strh	r1, [r0, #28]
    pHandle->hKpDivisor = (((uint16_t)1) << hKpDivisorPOW2);
 8006092:	8303      	strh	r3, [r0, #24]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8006094:	4770      	bx	lr
 8006096:	bf00      	nop

08006098 <PID_GetKIDivisor>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKiDivisor);
#else
  return (pHandle->hKiDivisor);
#endif
}
 8006098:	8b40      	ldrh	r0, [r0, #26]
 800609a:	4770      	bx	lr

0800609c <PID_GetKIDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKiDivisorPOW2);
#else
  return (pHandle->hKiDivisorPOW2);
#endif
}
 800609c:	8bc0      	ldrh	r0, [r0, #30]
 800609e:	4770      	bx	lr

080060a0 <PID_SetLowerIntegralTermLimit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wLowerIntegralLimit = wLowerLimit;
 80060a0:	6101      	str	r1, [r0, #16]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 80060a2:	4770      	bx	lr

080060a4 <PID_SetUpperIntegralTermLimit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wUpperIntegralLimit = wUpperLimit;
 80060a4:	60c1      	str	r1, [r0, #12]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 80060a6:	4770      	bx	lr

080060a8 <PID_SetKIDivisorPOW2>:
{
 80060a8:	b538      	push	{r3, r4, r5, lr}
    uint32_t wKiDiv = (((uint32_t)1) << hKiDivisorPOW2);
 80060aa:	2301      	movs	r3, #1
{
 80060ac:	460c      	mov	r4, r1
    uint32_t wKiDiv = (((uint32_t)1) << hKiDivisorPOW2);
 80060ae:	408b      	lsls	r3, r1
    PID_SetUpperIntegralTermLimit(pHandle, (int32_t)INT16_MAX * (int32_t)wKiDiv);
 80060b0:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80060b4:	40a1      	lsls	r1, r4
    pHandle->hKiDivisorPOW2 = hKiDivisorPOW2;
 80060b6:	83c4      	strh	r4, [r0, #30]
    pHandle->hKiDivisor = (uint16_t)wKiDiv;
 80060b8:	8343      	strh	r3, [r0, #26]
{
 80060ba:	4605      	mov	r5, r0
    PID_SetUpperIntegralTermLimit(pHandle, (int32_t)INT16_MAX * (int32_t)wKiDiv);
 80060bc:	f7ff fff2 	bl	80060a4 <PID_SetUpperIntegralTermLimit>
    PID_SetLowerIntegralTermLimit(pHandle, (int32_t)(-INT16_MAX) * (int32_t)wKiDiv);
 80060c0:	4902      	ldr	r1, [pc, #8]	@ (80060cc <PID_SetKIDivisorPOW2+0x24>)
 80060c2:	4628      	mov	r0, r5
 80060c4:	40a1      	lsls	r1, r4
 80060c6:	f7ff ffeb 	bl	80060a0 <PID_SetLowerIntegralTermLimit>
}
 80060ca:	bd38      	pop	{r3, r4, r5, pc}
 80060cc:	ffff8001 	.word	0xffff8001

080060d0 <PID_SetKD>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKdGain = hKdGain;
 80060d0:	8441      	strh	r1, [r0, #34]	@ 0x22
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 80060d2:	4770      	bx	lr

080060d4 <PID_GetKD>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKdGain);
#else
  return (pHandle->hKdGain);
#endif
}
 80060d4:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	@ 0x22
 80060d8:	4770      	bx	lr
 80060da:	bf00      	nop

080060dc <PID_GetKDDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKdDivisorPOW2);
#else
  return (pHandle->hKdDivisorPOW2);
#endif
}
 80060dc:	8cc0      	ldrh	r0, [r0, #38]	@ 0x26
 80060de:	4770      	bx	lr

080060e0 <PID_SetKDDivisorPOW2>:
  }
  else
  {
#endif
    pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
    pHandle->hKdDivisor = (((uint16_t)1) << hKdDivisorPOW2);
 80060e0:	2301      	movs	r3, #1
 80060e2:	408b      	lsls	r3, r1
    pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
 80060e4:	84c1      	strh	r1, [r0, #38]	@ 0x26
    pHandle->hKdDivisor = (((uint16_t)1) << hKdDivisorPOW2);
 80060e6:	8483      	strh	r3, [r0, #36]	@ 0x24
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 80060e8:	4770      	bx	lr
 80060ea:	bf00      	nop

080060ec <PI_Controller>:
    int32_t wDischarge = 0;
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

    /* Proportional term computation*/
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 80060ec:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
{
 80060f0:	4603      	mov	r3, r0
 80060f2:	b530      	push	{r4, r5, lr}

    /* Integral term computation */
    if (0 == pHandle->hKiGain)
 80060f4:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 80060f8:	f9b3 c016 	ldrsh.w	ip, [r3, #22]
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 80060fc:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8006100:	fb01 f202 	mul.w	r2, r1, r2
    if (0 == pHandle->hKiGain)
 8006104:	b17c      	cbz	r4, 8006126 <PI_Controller+0x3a>
    {
      pHandle->wIntegralTerm = 0;
    }
    else
    {
      wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 8006106:	fb04 f101 	mul.w	r1, r4, r1
        {
          /* Nothing to do */
        }
      }

      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 800610a:	e9d3 5402 	ldrd	r5, r4, [r3, #8]
      if (wIntegral_sum_temp < 0)
 800610e:	eb15 0e01 	adds.w	lr, r5, r1
 8006112:	d41d      	bmi.n	8006150 <PI_Controller+0x64>
            wIntegral_sum_temp = -INT32_MAX;
 8006114:	420d      	tst	r5, r1
 8006116:	4914      	ldr	r1, [pc, #80]	@ (8006168 <PI_Controller+0x7c>)
 8006118:	bf48      	it	mi
 800611a:	468e      	movmi	lr, r1
      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 800611c:	45a6      	cmp	lr, r4
 800611e:	dc02      	bgt.n	8006126 <PI_Controller+0x3a>
      {
        pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
      }
      else if (wIntegral_sum_temp < pHandle->wLowerIntegralLimit)
 8006120:	691c      	ldr	r4, [r3, #16]
 8006122:	4574      	cmp	r4, lr
 8006124:	dd1d      	ble.n	8006162 <PI_Controller+0x76>
    /* WARNING: the below instruction is not MISRA compliant, user should verify
               that Cortex-M3 assembly instruction ASR (arithmetic shift right)
               is used by the compiler to perform the shifts (instead of LSR
               logical shift right)*/
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    wOutput_32 = (wProportional_Term >> pHandle->hKpDivisorPOW2) + (pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2);
 8006126:	8b99      	ldrh	r1, [r3, #28]
 8006128:	410a      	asrs	r2, r1
 800612a:	8bd9      	ldrh	r1, [r3, #30]
 800612c:	fa44 f101 	asr.w	r1, r4, r1
 8006130:	440a      	add	r2, r1
#else
    wOutput_32 = (wProportional_Term / (int32_t)pHandle->hKpDivisor)
              + (pHandle->wIntegralTerm / (int32_t)pHandle->hKiDivisor);
#endif

    if (wOutput_32 > hUpperOutputLimit)
 8006132:	4290      	cmp	r0, r2
 8006134:	da03      	bge.n	800613e <PI_Controller+0x52>
    {
      wDischarge = hUpperOutputLimit - wOutput_32;
 8006136:	1a82      	subs	r2, r0, r2
    else
    {
      /* Nothing to do here */
    }

    pHandle->wIntegralTerm += wDischarge;
 8006138:	4414      	add	r4, r2
 800613a:	609c      	str	r4, [r3, #8]
    returnValue = (int16_t)wOutput_32;
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return (returnValue);
}
 800613c:	bd30      	pop	{r4, r5, pc}
    else if (wOutput_32 < hLowerOutputLimit)
 800613e:	4594      	cmp	ip, r2
      wDischarge = hLowerOutputLimit - wOutput_32;
 8006140:	bfc5      	ittet	gt
 8006142:	ebac 0202 	subgt.w	r2, ip, r2
    pHandle->wIntegralTerm += wDischarge;
 8006146:	18a4      	addgt	r4, r4, r2
    returnValue = (int16_t)wOutput_32;
 8006148:	b210      	sxthle	r0, r2
      wOutput_32 = hLowerOutputLimit;
 800614a:	4660      	movgt	r0, ip
    pHandle->wIntegralTerm += wDischarge;
 800614c:	609c      	str	r4, [r3, #8]
}
 800614e:	bd30      	pop	{r4, r5, pc}
        if (pHandle->wIntegralTerm > 0)
 8006150:	2d00      	cmp	r5, #0
 8006152:	dde3      	ble.n	800611c <PI_Controller+0x30>
          if (wIntegral_Term > 0)
 8006154:	2900      	cmp	r1, #0
 8006156:	dde1      	ble.n	800611c <PI_Controller+0x30>
      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 8006158:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800615c:	428c      	cmp	r4, r1
 800615e:	d1e2      	bne.n	8006126 <PI_Controller+0x3a>
 8006160:	46a6      	mov	lr, r4
        pHandle->wIntegralTerm = wIntegral_sum_temp;
 8006162:	4674      	mov	r4, lr
 8006164:	e7df      	b.n	8006126 <PI_Controller+0x3a>
 8006166:	bf00      	nop
 8006168:	80000001 	.word	0x80000001

0800616c <PQD_CalcElMotorPower>:
  }
  else
  {
#endif
    int32_t wAux;
    qd_t Iqd = pHandle->pFOCVars->Iqd;
 800616c:	6882      	ldr	r2, [r0, #8]
{
 800616e:	b500      	push	{lr}
    qd_t Vqd = pHandle->pFOCVars->Vqd;

    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 8006170:	89d1      	ldrh	r1, [r2, #14]
 8006172:	f8b2 e018 	ldrh.w	lr, [r2, #24]
    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
 8006176:	8993      	ldrh	r3, [r2, #12]
 8006178:	f8b2 c016 	ldrh.w	ip, [r2, #22]
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 800617c:	fb11 f20e 	smulbb	r2, r1, lr
    wAux /= 65536;
 8006180:	fb13 230c 	smlabb	r3, r3, ip, r2
 8006184:	2b00      	cmp	r3, #0

    /* pHandle->hAvrgElMotorPower += (wAux - pHandle->hAvrgElMotorPower) >> 4 */
    pHandle->hAvrgElMotorPower += (int16_t)((wAux - (int32_t)pHandle->hAvrgElMotorPower) / 16);
 8006186:	f9b0 2000 	ldrsh.w	r2, [r0]
    wAux /= 65536;
 800618a:	bfbc      	itt	lt
 800618c:	f503 437f 	addlt.w	r3, r3, #65280	@ 0xff00
 8006190:	33ff      	addlt	r3, #255	@ 0xff
    pHandle->hAvrgElMotorPower += (int16_t)((wAux - (int32_t)pHandle->hAvrgElMotorPower) / 16);
 8006192:	ebd2 4323 	rsbs	r3, r2, r3, asr #16
 8006196:	bf48      	it	mi
 8006198:	330f      	addmi	r3, #15
 800619a:	eb02 1223 	add.w	r2, r2, r3, asr #4
 800619e:	8002      	strh	r2, [r0, #0]

#ifdef NULL_PTR_CHECK_PQD_MOT_POW_MEAS
  }
#endif
}
 80061a0:	f85d fb04 	ldr.w	pc, [sp], #4

080061a4 <PQD_Clear>:
    /* nothing to do */
  }
  else
  {
#endif
    pHandle->hAvrgElMotorPower = 0;
 80061a4:	2300      	movs	r3, #0
 80061a6:	8003      	strh	r3, [r0, #0]
#ifdef NULL_PTR_CHECK_MOT_POW_MES
  }
#endif
}
 80061a8:	4770      	bx	lr
 80061aa:	bf00      	nop

080061ac <PQD_GetAvrgElMotorPowerW>:
  * 
  * @param pHandle pointer on the related component instance.
  * @retval float_t The average measured motor power expressed in Watts.
  */
__weak float_t PQD_GetAvrgElMotorPowerW(const PQD_MotorPowMeas_Handle_t *pHandle)
{
 80061ac:	b510      	push	{r4, lr}
  else
  {
#endif

  /* First perform an integer multiplication, then a float one. */
  PowerW = ((float_t)pHandle->hAvrgElMotorPower * (float_t)VBS_GetAvBusVoltage_V(pHandle->pVBS)) * pHandle->ConvFact;
 80061ae:	f9b0 3000 	ldrsh.w	r3, [r0]
 80061b2:	ee07 3a90 	vmov	s15, r3
{
 80061b6:	ed2d 8b02 	vpush	{d8}
 80061ba:	4604      	mov	r4, r0
  PowerW = ((float_t)pHandle->hAvrgElMotorPower * (float_t)VBS_GetAvBusVoltage_V(pHandle->pVBS)) * pHandle->ConvFact;
 80061bc:	68c0      	ldr	r0, [r0, #12]
 80061be:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80061c2:	f7ff fd8d 	bl	8005ce0 <VBS_GetAvBusVoltage_V>
 80061c6:	edd4 7a01 	vldr	s15, [r4, #4]
 80061ca:	ee68 7a27 	vmul.f32	s15, s16, s15

#ifdef NULL_PTR_CHECK_PQD_MOT_POW_MEAS
  }
#endif
  return (PowerW);
}
 80061ce:	ecbd 8b02 	vpop	{d8}
  PowerW = ((float_t)pHandle->hAvrgElMotorPower * (float_t)VBS_GetAvBusVoltage_V(pHandle->pVBS)) * pHandle->ConvFact;
 80061d2:	ee00 0a10 	vmov	s0, r0
 80061d6:	eeb8 0a40 	vcvt.f32.u32	s0, s0
}
 80061da:	ee27 0a80 	vmul.f32	s0, s15, s0
 80061de:	bd10      	pop	{r4, pc}

080061e0 <startTimers>:
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
*/
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return (READ_BIT(RCC->APB1ENR, Periphs) == Periphs);
 80061e0:	4b17      	ldr	r3, [pc, #92]	@ (8006240 <startTimers+0x60>)
 80061e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
  uint32_t isTIM2ClockOn;
  uint32_t trigOut;

  isTIM2ClockOn = LL_APB1_GRP1_IsEnabledClock(LL_APB1_GRP1_PERIPH_TIM2);
  if ((uint32_t)0 == isTIM2ClockOn)
 80061e4:	07d2      	lsls	r2, r2, #31
 80061e6:	d415      	bmi.n	8006214 <startTimers+0x34>
  SET_BIT(RCC->APB1ENR, Periphs);
 80061e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80061ea:	f042 0201 	orr.w	r2, r2, #1
 80061ee:	641a      	str	r2, [r3, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80061f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 80061f2:	b082      	sub	sp, #8
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80061f4:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80061f8:	f002 0201 	and.w	r2, r2, #1
 80061fc:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 80061fe:	9a01      	ldr	r2, [sp, #4]
 8006200:	694a      	ldr	r2, [r1, #20]
 8006202:	f042 0201 	orr.w	r2, r2, #1
 8006206:	614a      	str	r2, [r1, #20]
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 8006208:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800620a:	f022 0201 	bic.w	r2, r2, #1
 800620e:	641a      	str	r2, [r3, #64]	@ 0x40
    trigOut = LL_TIM_ReadReg(TIM2, CR2) & TIM_CR2_MMS;
    LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_UPDATE);
    LL_TIM_GenerateEvent_UPDATE(TIM2);
    LL_TIM_SetTriggerOutput(TIM2, trigOut);
  }
}
 8006210:	b002      	add	sp, #8
 8006212:	4770      	bx	lr
    trigOut = LL_TIM_ReadReg(TIM2, CR2) & TIM_CR2_MMS;
 8006214:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006218:	685a      	ldr	r2, [r3, #4]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800621a:	6859      	ldr	r1, [r3, #4]
 800621c:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8006220:	f041 0120 	orr.w	r1, r1, #32
 8006224:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8006226:	6959      	ldr	r1, [r3, #20]
 8006228:	f041 0101 	orr.w	r1, r1, #1
 800622c:	6159      	str	r1, [r3, #20]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800622e:	6859      	ldr	r1, [r3, #4]
 8006230:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8006234:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8006238:	430a      	orrs	r2, r1
 800623a:	605a      	str	r2, [r3, #4]
 800623c:	4770      	bx	lr
 800623e:	bf00      	nop
 8006240:	40023800 	.word	0x40023800

08006244 <waitForPolarizationEnd>:
  {
#endif
    uint16_t hCalibrationPeriodCounter;
    uint16_t hMaxPeriodsNumber;

    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 8006244:	3201      	adds	r2, #1
{
 8006246:	b570      	push	{r4, r5, r6, lr}
    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 8006248:	0852      	lsrs	r2, r2, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 800624a:	f06f 0602 	mvn.w	r6, #2
 800624e:	0155      	lsls	r5, r2, #5
 8006250:	6106      	str	r6, [r0, #16]

    /* Wait for NB_CONVERSIONS to be executed */
    LL_TIM_ClearFlag_CC1(TIMx);
    hCalibrationPeriodCounter = 0u;
 8006252:	2200      	movs	r2, #0
    while (*cnt < NB_CONVERSIONS)
 8006254:	f893 c000 	ldrb.w	ip, [r3]
 8006258:	f1bc 0f0f 	cmp.w	ip, #15
    {
      if ((uint32_t)ERROR == LL_TIM_IsActiveFlag_CC1(TIMx))
      {
        LL_TIM_ClearFlag_CC1(TIMx);
        hCalibrationPeriodCounter++;
 800625c:	f102 0e01 	add.w	lr, r2, #1
    while (*cnt < NB_CONVERSIONS)
 8006260:	d80c      	bhi.n	800627c <waitForPolarizationEnd+0x38>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8006262:	6904      	ldr	r4, [r0, #16]
 8006264:	07a4      	lsls	r4, r4, #30
 8006266:	d5f5      	bpl.n	8006254 <waitForPolarizationEnd+0x10>
        hCalibrationPeriodCounter++;
 8006268:	fa1f f28e 	uxth.w	r2, lr
        if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 800626c:	4295      	cmp	r5, r2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 800626e:	6106      	str	r6, [r0, #16]
 8006270:	d8f0      	bhi.n	8006254 <waitForPolarizationEnd+0x10>
        {
          if (*cnt < NB_CONVERSIONS)
 8006272:	781c      	ldrb	r4, [r3, #0]
 8006274:	2c0f      	cmp	r4, #15
 8006276:	d8ed      	bhi.n	8006254 <waitForPolarizationEnd+0x10>
          {
            *SWerror = 1u;
 8006278:	2301      	movs	r3, #1
 800627a:	800b      	strh	r3, [r1, #0]
      }
    }
#ifdef NULL_PTR_CHECK_POW_COM
  }
#endif
  }
 800627c:	bd70      	pop	{r4, r5, r6, pc}
 800627e:	bf00      	nop

08006280 <R3_1_GetPhaseCurrents>:
  *
  */
__weak void R3_1_GetPhaseCurrents(PWMC_Handle_t *pHdl, ab_t* pStator_Currents)
{
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006280:	f8d0 30a0 	ldr.w	r3, [r0, #160]	@ 0xa0
{
 8006284:	b470      	push	{r4, r5, r6}
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 8006286:	e9d3 2400 	ldrd	r2, r4, [r3]
  CLEAR_BIT(TIMx->CCER, Channels);
 800628a:	6a23      	ldr	r3, [r4, #32]
 800628c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006290:	6223      	str	r3, [r4, #32]
  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);

  bSector = ( uint8_t )( pHandle->_Super.Sector );

  hReg1 =  (ADCx->JDR1)*2;
 8006292:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
  hReg2 =  (ADCx->JDR2)*2;
 8006294:	6c12      	ldr	r2, [r2, #64]	@ 0x40

  switch ( bSector )
 8006296:	f890 407c 	ldrb.w	r4, [r0, #124]	@ 0x7c
  hReg1 =  (ADCx->JDR1)*2;
 800629a:	005b      	lsls	r3, r3, #1
  hReg2 =  (ADCx->JDR2)*2;
 800629c:	0052      	lsls	r2, r2, #1
  hReg1 =  (ADCx->JDR1)*2;
 800629e:	b29b      	uxth	r3, r3
  hReg2 =  (ADCx->JDR2)*2;
 80062a0:	b292      	uxth	r2, r2
  switch ( bSector )
 80062a2:	2c05      	cmp	r4, #5
 80062a4:	f200 809b 	bhi.w	80063de <R3_1_GetPhaseCurrents+0x15e>
 80062a8:	e8df f004 	tbb	[pc, r4]
 80062ac:	0323233f 	.word	0x0323233f
 80062b0:	3f03      	.short	0x3f03
    case SECTOR_4:
    case SECTOR_5:
    {
      /* Current on Phase C is not accessible     */
      /* Ia = PhaseAOffset - ADC converted value) */
      wAux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( hReg1 );
 80062b2:	f8d0 4088 	ldr.w	r4, [r0, #136]	@ 0x88
 80062b6:	1ae4      	subs	r4, r4, r3
      /* Saturation of Ia */
      if ( wAux < -INT16_MAX )
 80062b8:	4b4d      	ldr	r3, [pc, #308]	@ (80063f0 <R3_1_GetPhaseCurrents+0x170>)
 80062ba:	429c      	cmp	r4, r3
 80062bc:	da64      	bge.n	8006388 <R3_1_GetPhaseCurrents+0x108>
      {
        pStator_Currents->a = ( int16_t )wAux;
      }

      /* Ib = PhaseBOffset - ADC converted value) */
        wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg2 );
 80062be:	f8d0 408c 	ldr.w	r4, [r0, #140]	@ 0x8c
 80062c2:	eba4 0c02 	sub.w	ip, r4, r2

      /* Saturation of Ib */
      if ( wAux < -INT16_MAX )
 80062c6:	4c4a      	ldr	r4, [pc, #296]	@ (80063f0 <R3_1_GetPhaseCurrents+0x170>)
 80062c8:	45a4      	cmp	ip, r4
    default:
    {
    }
    break;
  }
  pStator_Currents->a = -pStator_Currents->a;
 80062ca:	b29b      	uxth	r3, r3
      if ( wAux < -INT16_MAX )
 80062cc:	db49      	blt.n	8006362 <R3_1_GetPhaseCurrents+0xe2>
      else  if ( wAux > INT16_MAX )
 80062ce:	f5bc 4f00 	cmp.w	ip, #32768	@ 0x8000
 80062d2:	db77      	blt.n	80063c4 <R3_1_GetPhaseCurrents+0x144>
  pStator_Currents->a = -pStator_Currents->a;
 80062d4:	425d      	negs	r5, r3
 80062d6:	b22d      	sxth	r5, r5
 80062d8:	f647 7cff 	movw	ip, #32767	@ 0x7fff
  pStator_Currents->b = -pStator_Currents->b;
  pHandle->_Super.Ia = pStator_Currents->a;
  pHandle->_Super.Ib = pStator_Currents->b;
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 80062dc:	4463      	add	r3, ip
  pStator_Currents->a = -pStator_Currents->a;
 80062de:	800d      	strh	r5, [r1, #0]
  pStator_Currents->b = -pStator_Currents->b;
 80062e0:	804c      	strh	r4, [r1, #2]
  pHandle->_Super.Ia = pStator_Currents->a;
 80062e2:	f8a0 5062 	strh.w	r5, [r0, #98]	@ 0x62
  pHandle->_Super.Ib = pStator_Currents->b;
 80062e6:	f8a0 4064 	strh.w	r4, [r0, #100]	@ 0x64
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 80062ea:	f8a0 3066 	strh.w	r3, [r0, #102]	@ 0x66
}
 80062ee:	bc70      	pop	{r4, r5, r6}
 80062f0:	4770      	bx	lr
      wAux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( hReg1 );
 80062f2:	f8d0 4088 	ldr.w	r4, [r0, #136]	@ 0x88
      if ( wAux < -INT16_MAX )
 80062f6:	4e3e      	ldr	r6, [pc, #248]	@ (80063f0 <R3_1_GetPhaseCurrents+0x170>)
      wAux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( hReg1 );
 80062f8:	1ae4      	subs	r4, r4, r3
      if ( wAux < -INT16_MAX )
 80062fa:	42b4      	cmp	r4, r6
 80062fc:	db3e      	blt.n	800637c <R3_1_GetPhaseCurrents+0xfc>
      else  if ( wAux > INT16_MAX )
 80062fe:	f5b4 4f00 	cmp.w	r4, #32768	@ 0x8000
 8006302:	da55      	bge.n	80063b0 <R3_1_GetPhaseCurrents+0x130>
  pStator_Currents->a = -pStator_Currents->a;
 8006304:	b2a3      	uxth	r3, r4
 8006306:	425d      	negs	r5, r3
 8006308:	b22d      	sxth	r5, r5
      wAux = -wAux -  ( int32_t )pStator_Currents->a;
 800630a:	f8d0 6090 	ldr.w	r6, [r0, #144]	@ 0x90
 800630e:	1b92      	subs	r2, r2, r6
 8006310:	1b12      	subs	r2, r2, r4
      if ( wAux > INT16_MAX )
 8006312:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8006316:	da3e      	bge.n	8006396 <R3_1_GetPhaseCurrents+0x116>
      else  if ( wAux < -INT16_MAX )
 8006318:	f512 4f00 	cmn.w	r2, #32768	@ 0x8000
 800631c:	dd43      	ble.n	80063a6 <R3_1_GetPhaseCurrents+0x126>
  pStator_Currents->b = -pStator_Currents->b;
 800631e:	fa1f fc82 	uxth.w	ip, r2
 8006322:	f1cc 0400 	rsb	r4, ip, #0
 8006326:	b224      	sxth	r4, r4
 8006328:	e7d8      	b.n	80062dc <R3_1_GetPhaseCurrents+0x5c>
      wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg1 );
 800632a:	f8d0 508c 	ldr.w	r5, [r0, #140]	@ 0x8c
 800632e:	1aed      	subs	r5, r5, r3
      if ( wAux < -INT16_MAX )
 8006330:	4b2f      	ldr	r3, [pc, #188]	@ (80063f0 <R3_1_GetPhaseCurrents+0x170>)
 8006332:	429d      	cmp	r5, r3
 8006334:	db1c      	blt.n	8006370 <R3_1_GetPhaseCurrents+0xf0>
      else  if ( wAux > INT16_MAX )
 8006336:	f5b5 4f00 	cmp.w	r5, #32768	@ 0x8000
 800633a:	da3e      	bge.n	80063ba <R3_1_GetPhaseCurrents+0x13a>
  pStator_Currents->b = -pStator_Currents->b;
 800633c:	fa1f fc85 	uxth.w	ip, r5
 8006340:	f1cc 0400 	rsb	r4, ip, #0
 8006344:	b224      	sxth	r4, r4
      wAux = -wAux - ( int32_t )pStator_Currents->b;
 8006346:	f8d0 3090 	ldr.w	r3, [r0, #144]	@ 0x90
 800634a:	1ad3      	subs	r3, r2, r3
 800634c:	1b5b      	subs	r3, r3, r5
      if ( wAux > INT16_MAX )
 800634e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006352:	da24      	bge.n	800639e <R3_1_GetPhaseCurrents+0x11e>
      else  if ( wAux < -INT16_MAX )
 8006354:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8006358:	dd3c      	ble.n	80063d4 <R3_1_GetPhaseCurrents+0x154>
  pStator_Currents->a = -pStator_Currents->a;
 800635a:	b29b      	uxth	r3, r3
 800635c:	425d      	negs	r5, r3
 800635e:	b22d      	sxth	r5, r5
 8006360:	e7bc      	b.n	80062dc <R3_1_GetPhaseCurrents+0x5c>
 8006362:	425d      	negs	r5, r3
 8006364:	b22d      	sxth	r5, r5
 8006366:	f647 74ff 	movw	r4, #32767	@ 0x7fff
 800636a:	f248 0c01 	movw	ip, #32769	@ 0x8001
 800636e:	e7b5      	b.n	80062dc <R3_1_GetPhaseCurrents+0x5c>
 8006370:	f647 74ff 	movw	r4, #32767	@ 0x7fff
 8006374:	461d      	mov	r5, r3
 8006376:	f248 0c01 	movw	ip, #32769	@ 0x8001
 800637a:	e7e4      	b.n	8006346 <R3_1_GetPhaseCurrents+0xc6>
 800637c:	f647 75ff 	movw	r5, #32767	@ 0x7fff
 8006380:	4634      	mov	r4, r6
 8006382:	f248 0301 	movw	r3, #32769	@ 0x8001
 8006386:	e7c0      	b.n	800630a <R3_1_GetPhaseCurrents+0x8a>
      else  if ( wAux > INT16_MAX )
 8006388:	f5b4 4f00 	cmp.w	r4, #32768	@ 0x8000
        pStator_Currents->a = ( int16_t )wAux;
 800638c:	bfb4      	ite	lt
 800638e:	b223      	sxthlt	r3, r4
 8006390:	f647 73ff 	movwge	r3, #32767	@ 0x7fff
 8006394:	e793      	b.n	80062be <R3_1_GetPhaseCurrents+0x3e>
 8006396:	4c16      	ldr	r4, [pc, #88]	@ (80063f0 <R3_1_GetPhaseCurrents+0x170>)
 8006398:	f647 7cff 	movw	ip, #32767	@ 0x7fff
 800639c:	e79e      	b.n	80062dc <R3_1_GetPhaseCurrents+0x5c>
 800639e:	4d14      	ldr	r5, [pc, #80]	@ (80063f0 <R3_1_GetPhaseCurrents+0x170>)
 80063a0:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 80063a4:	e79a      	b.n	80062dc <R3_1_GetPhaseCurrents+0x5c>
 80063a6:	f647 74ff 	movw	r4, #32767	@ 0x7fff
 80063aa:	f248 0c01 	movw	ip, #32769	@ 0x8001
 80063ae:	e795      	b.n	80062dc <R3_1_GetPhaseCurrents+0x5c>
 80063b0:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 80063b4:	4635      	mov	r5, r6
 80063b6:	461c      	mov	r4, r3
 80063b8:	e7a7      	b.n	800630a <R3_1_GetPhaseCurrents+0x8a>
 80063ba:	f647 7cff 	movw	ip, #32767	@ 0x7fff
 80063be:	461c      	mov	r4, r3
 80063c0:	4665      	mov	r5, ip
 80063c2:	e7c0      	b.n	8006346 <R3_1_GetPhaseCurrents+0xc6>
  pStator_Currents->b = -pStator_Currents->b;
 80063c4:	fa1f fc8c 	uxth.w	ip, ip
  pStator_Currents->a = -pStator_Currents->a;
 80063c8:	425d      	negs	r5, r3
  pStator_Currents->b = -pStator_Currents->b;
 80063ca:	f1cc 0400 	rsb	r4, ip, #0
  pStator_Currents->a = -pStator_Currents->a;
 80063ce:	b22d      	sxth	r5, r5
  pStator_Currents->b = -pStator_Currents->b;
 80063d0:	b224      	sxth	r4, r4
 80063d2:	e783      	b.n	80062dc <R3_1_GetPhaseCurrents+0x5c>
 80063d4:	f647 75ff 	movw	r5, #32767	@ 0x7fff
 80063d8:	f248 0301 	movw	r3, #32769	@ 0x8001
 80063dc:	e77e      	b.n	80062dc <R3_1_GetPhaseCurrents+0x5c>
  pStator_Currents->a = -pStator_Currents->a;
 80063de:	880b      	ldrh	r3, [r1, #0]
  pStator_Currents->b = -pStator_Currents->b;
 80063e0:	f8b1 c002 	ldrh.w	ip, [r1, #2]
  pStator_Currents->a = -pStator_Currents->a;
 80063e4:	425d      	negs	r5, r3
  pStator_Currents->b = -pStator_Currents->b;
 80063e6:	f1cc 0400 	rsb	r4, ip, #0
  pStator_Currents->a = -pStator_Currents->a;
 80063ea:	b22d      	sxth	r5, r5
  pStator_Currents->b = -pStator_Currents->b;
 80063ec:	b224      	sxth	r4, r4
 80063ee:	e775      	b.n	80062dc <R3_1_GetPhaseCurrents+0x5c>
 80063f0:	ffff8001 	.word	0xffff8001

080063f4 <R3_1_HFCurrentsCalibrationAB>:
  *         of phase A and B in ab_t format.
  */
__weak void R3_1_HFCurrentsCalibrationAB( PWMC_Handle_t * pHdl, ab_t * pStator_Currents )
{
  PWMC_R3_1_Handle_t * pHandle = (PWMC_R3_1_Handle_t *) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80063f4:	f8d0 30a0 	ldr.w	r3, [r0, #160]	@ 0xa0
{
 80063f8:	b430      	push	{r4, r5}
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 80063fa:	e9d3 4200 	ldrd	r4, r2, [r3]
 80063fe:	6a13      	ldr	r3, [r2, #32]
 8006400:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006404:	6213      	str	r3, [r2, #32]
  
  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 8006406:	f890 309f 	ldrb.w	r3, [r0, #159]	@ 0x9f
 800640a:	2b0f      	cmp	r3, #15
 800640c:	d80f      	bhi.n	800642e <R3_1_HFCurrentsCalibrationAB+0x3a>
  {
    pHandle->PhaseAOffset += ADCx->JDR1;
 800640e:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8006410:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
    pHandle->PhaseBOffset += ADCx->JDR2;
 8006414:	6c25      	ldr	r5, [r4, #64]	@ 0x40
    pHandle->PhaseAOffset += ADCx->JDR1;
 8006416:	189c      	adds	r4, r3, r2
    pHandle->PhaseBOffset += ADCx->JDR2;
 8006418:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
    pHandle->PolarizationCounter++;
 800641c:	f890 309f 	ldrb.w	r3, [r0, #159]	@ 0x9f
    pHandle->PhaseBOffset += ADCx->JDR2;
 8006420:	442a      	add	r2, r5
    pHandle->PolarizationCounter++;
 8006422:	3301      	adds	r3, #1
    pHandle->PhaseBOffset += ADCx->JDR2;
 8006424:	e9c0 4222 	strd	r4, r2, [r0, #136]	@ 0x88
    pHandle->PolarizationCounter++;
 8006428:	b2db      	uxtb	r3, r3
 800642a:	f880 309f 	strb.w	r3, [r0, #159]	@ 0x9f
  }

  /* during offset calibration no current is flowing in the phases */
  pStator_Currents->a = 0;
 800642e:	2300      	movs	r3, #0
  pStator_Currents->b = 0;
}
 8006430:	bc30      	pop	{r4, r5}
  pStator_Currents->a = 0;
 8006432:	600b      	str	r3, [r1, #0]
}
 8006434:	4770      	bx	lr
 8006436:	bf00      	nop

08006438 <R3_1_HFCurrentsCalibrationC>:
  *         of phase A and B in ab_t format.
  */
__weak void R3_1_HFCurrentsCalibrationC(PWMC_Handle_t *pHdl, ab_t* pStator_Currents)
{
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006438:	f8d0 30a0 	ldr.w	r3, [r0, #160]	@ 0xa0
{
 800643c:	b410      	push	{r4}
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 800643e:	e9d3 4200 	ldrd	r4, r2, [r3]
 8006442:	6a13      	ldr	r3, [r2, #32]
 8006444:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006448:	6213      	str	r3, [r2, #32]

  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 800644a:	f890 309f 	ldrb.w	r3, [r0, #159]	@ 0x9f
 800644e:	2b0f      	cmp	r3, #15
 8006450:	d80b      	bhi.n	800646a <R3_1_HFCurrentsCalibrationC+0x32>
  {
    pHandle->PhaseCOffset += ADCx->JDR2;
 8006452:	6c24      	ldr	r4, [r4, #64]	@ 0x40
    pHandle->PolarizationCounter++;
 8006454:	f890 309f 	ldrb.w	r3, [r0, #159]	@ 0x9f
    pHandle->PhaseCOffset += ADCx->JDR2;
 8006458:	f8d0 2090 	ldr.w	r2, [r0, #144]	@ 0x90
    pHandle->PolarizationCounter++;
 800645c:	3301      	adds	r3, #1
    pHandle->PhaseCOffset += ADCx->JDR2;
 800645e:	4422      	add	r2, r4
    pHandle->PolarizationCounter++;
 8006460:	b2db      	uxtb	r3, r3
    pHandle->PhaseCOffset += ADCx->JDR2;
 8006462:	f8c0 2090 	str.w	r2, [r0, #144]	@ 0x90
    pHandle->PolarizationCounter++;
 8006466:	f880 309f 	strb.w	r3, [r0, #159]	@ 0x9f
  }

  /* during offset calibration no current is flowing in the phases */
  pStator_Currents->a = 0;
 800646a:	2300      	movs	r3, #0
  pStator_Currents->b = 0;
}
 800646c:	f85d 4b04 	ldr.w	r4, [sp], #4
  pStator_Currents->a = 0;
 8006470:	600b      	str	r3, [r1, #0]
}
 8006472:	4770      	bx	lr

08006474 <R3_1_SwitchOnPWM>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  */
__weak void R3_1_SwitchOnPWM(PWMC_Handle_t *pHdl)
{  
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8006474:	f8d0 30a0 	ldr.w	r3, [r0, #160]	@ 0xa0

  pHandle->_Super.TurnOnLowSidesAction = false;
  
  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
 8006478:	f8b0 209c 	ldrh.w	r2, [r0, #156]	@ 0x9c
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 800647c:	685b      	ldr	r3, [r3, #4]
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
 800647e:	0851      	lsrs	r1, r2, #1
  pHandle->_Super.TurnOnLowSidesAction = false;
 8006480:	f04f 0c00 	mov.w	ip, #0
{  
 8006484:	b5f0      	push	{r4, r5, r6, r7, lr}
  pHandle->_Super.TurnOnLowSidesAction = false;
 8006486:	f880 c07e 	strb.w	ip, [r0, #126]	@ 0x7e
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
  LL_TIM_OC_SetCompareCH4(TIMx, (uint32_t)(pHandle->Half_PWMPeriod - 5u));
 800648a:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR1, CompareValue);
 800648c:	6359      	str	r1, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800648e:	6399      	str	r1, [r3, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8006490:	63d9      	str	r1, [r3, #60]	@ 0x3c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006492:	f06f 0101 	mvn.w	r1, #1
  WRITE_REG(TIMx->CCR4, CompareValue);
 8006496:	641a      	str	r2, [r3, #64]	@ 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006498:	6119      	str	r1, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800649a:	691a      	ldr	r2, [r3, #16]
 800649c:	07d2      	lsls	r2, r2, #31
 800649e:	d5fc      	bpl.n	800649a <R3_1_SwitchOnPWM+0x26>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80064a0:	f06f 0201 	mvn.w	r2, #1
 80064a4:	611a      	str	r2, [r3, #16]
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE(TIMx);

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 80064a6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80064a8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80064ac:	645a      	str	r2, [r3, #68]	@ 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80064ae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80064b0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80064b4:	645a      	str	r2, [r3, #68]	@ 0x44
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->_Super.LowSideOutputs ) == ES_GPIO )
 80064b6:	f890 207d 	ldrb.w	r2, [r0, #125]	@ 0x7d
 80064ba:	2a02      	cmp	r2, #2
 80064bc:	d007      	beq.n	80064ce <R3_1_SwitchOnPWM+0x5a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80064be:	f06f 0201 	mvn.w	r2, #1
 80064c2:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80064c4:	68da      	ldr	r2, [r3, #12]
 80064c6:	f042 0201 	orr.w	r2, r2, #1
 80064ca:	60da      	str	r2, [r3, #12]
  LL_TIM_ClearFlag_UPDATE( TIMx );
  /* Enable Update IRQ */
  LL_TIM_EnableIT_UPDATE( TIMx );

  return; 
}
 80064cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0u)
 80064ce:	6a1d      	ldr	r5, [r3, #32]
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 80064d0:	f8d0 e03c 	ldr.w	lr, [r0, #60]	@ 0x3c
 80064d4:	f8b0 4048 	ldrh.w	r4, [r0, #72]	@ 0x48
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 80064d8:	6c07      	ldr	r7, [r0, #64]	@ 0x40
 80064da:	f8b0 104a 	ldrh.w	r1, [r0, #74]	@ 0x4a
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 80064de:	6c46      	ldr	r6, [r0, #68]	@ 0x44
 80064e0:	f8b0 204c 	ldrh.w	r2, [r0, #76]	@ 0x4c
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0u)
 80064e4:	f240 5c55 	movw	ip, #1365	@ 0x555
 80064e8:	ea15 0f0c 	tst.w	r5, ip
 80064ec:	d004      	beq.n	80064f8 <R3_1_SwitchOnPWM+0x84>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 80064ee:	f8ce 4018 	str.w	r4, [lr, #24]
 80064f2:	61b9      	str	r1, [r7, #24]
 80064f4:	61b2      	str	r2, [r6, #24]
}
 80064f6:	e7e2      	b.n	80064be <R3_1_SwitchOnPWM+0x4a>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80064f8:	0424      	lsls	r4, r4, #16
 80064fa:	0409      	lsls	r1, r1, #16
 80064fc:	0412      	lsls	r2, r2, #16
 80064fe:	f8ce 4018 	str.w	r4, [lr, #24]
 8006502:	61b9      	str	r1, [r7, #24]
 8006504:	61b2      	str	r2, [r6, #24]
}
 8006506:	e7da      	b.n	80064be <R3_1_SwitchOnPWM+0x4a>

08006508 <R3_1_SwitchOffPWM>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  */
__weak void R3_1_SwitchOffPWM(PWMC_Handle_t *pHdl)
{
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8006508:	f8d0 30a0 	ldr.w	r3, [r0, #160]	@ 0xa0

  pHandle->_Super.TurnOnLowSidesAction = false;

  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs(TIMx);
  if (pHandle->_Super.BrakeActionLock == true)
 800650c:	f890 1085 	ldrb.w	r1, [r0, #133]	@ 0x85
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8006510:	685a      	ldr	r2, [r3, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8006512:	68d3      	ldr	r3, [r2, #12]
 8006514:	f023 0301 	bic.w	r3, r3, #1
 8006518:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800651a:	6c53      	ldr	r3, [r2, #68]	@ 0x44
  pHandle->_Super.TurnOnLowSidesAction = false;
 800651c:	f04f 0c00 	mov.w	ip, #0
 8006520:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006524:	f880 c07e 	strb.w	ip, [r0, #126]	@ 0x7e
 8006528:	6453      	str	r3, [r2, #68]	@ 0x44
  if (pHandle->_Super.BrakeActionLock == true)
 800652a:	b919      	cbnz	r1, 8006534 <R3_1_SwitchOffPWM+0x2c>
  {
  }
  else
  {
    if ( ( pHandle->_Super.LowSideOutputs ) == ES_GPIO )
 800652c:	f890 307d 	ldrb.w	r3, [r0, #125]	@ 0x7d
 8006530:	2b02      	cmp	r3, #2
 8006532:	d009      	beq.n	8006548 <R3_1_SwitchOffPWM+0x40>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006534:	f06f 0301 	mvn.w	r3, #1
 8006538:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800653a:	6913      	ldr	r3, [r2, #16]
 800653c:	07db      	lsls	r3, r3, #31
 800653e:	d5fc      	bpl.n	800653a <R3_1_SwitchOffPWM+0x32>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006540:	f06f 0301 	mvn.w	r3, #1
 8006544:	6113      	str	r3, [r2, #16]
 8006546:	4770      	bx	lr
{
 8006548:	b430      	push	{r4, r5}
    {
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 800654a:	f8b0 4048 	ldrh.w	r4, [r0, #72]	@ 0x48
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800654e:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 8006550:	f8b0 104a 	ldrh.w	r1, [r0, #74]	@ 0x4a
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8006554:	f8b0 304c 	ldrh.w	r3, [r0, #76]	@ 0x4c
 8006558:	0424      	lsls	r4, r4, #16
 800655a:	61ac      	str	r4, [r5, #24]
 800655c:	e9d0 4010 	ldrd	r4, r0, [r0, #64]	@ 0x40
 8006560:	041b      	lsls	r3, r3, #16
 8006562:	0409      	lsls	r1, r1, #16
 8006564:	61a1      	str	r1, [r4, #24]
 8006566:	6183      	str	r3, [r0, #24]
 8006568:	f06f 0301 	mvn.w	r3, #1
 800656c:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800656e:	6913      	ldr	r3, [r2, #16]
 8006570:	07d9      	lsls	r1, r3, #31
 8006572:	d5fc      	bpl.n	800656e <R3_1_SwitchOffPWM+0x66>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006574:	f06f 0301 	mvn.w	r3, #1
  while (LL_TIM_IsActiveFlag_UPDATE(TIMx) == 0)
  {}
  LL_TIM_ClearFlag_UPDATE(TIMx);

  return;
}
 8006578:	bc30      	pop	{r4, r5}
 800657a:	6113      	str	r3, [r2, #16]
 800657c:	4770      	bx	lr
 800657e:	bf00      	nop

08006580 <R3_1_RLGetPhaseCurrents>:
  */
void R3_1_RLGetPhaseCurrents(PWMC_Handle_t *pHdl,ab_t* pStator_Currents)
{

  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006580:	f8d0 20a0 	ldr.w	r2, [r0, #160]	@ 0xa0
  int32_t wAux;
  
  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);
  
  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t)((ADCx->JDR2)*2u);
 8006584:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
{
 8006588:	b410      	push	{r4}
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 800658a:	e9d2 4000 	ldrd	r4, r0, [r2]
  CLEAR_BIT(TIMx->CCER, Channels);
 800658e:	6a02      	ldr	r2, [r0, #32]
 8006590:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006594:	6202      	str	r2, [r0, #32]
  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t)((ADCx->JDR2)*2u);
 8006596:	6c20      	ldr	r0, [r4, #64]	@ 0x40
  
  /* Check saturation */
  if (wAux > -INT16_MAX)
 8006598:	4a0a      	ldr	r2, [pc, #40]	@ (80065c4 <R3_1_RLGetPhaseCurrents+0x44>)
  /* First value read of Phase B*/
  wAux = -wAux;
  pStator_Currents->a = ( int16_t )( wAux );
  pStator_Currents->b = ( int16_t )( wAux );

}
 800659a:	f85d 4b04 	ldr.w	r4, [sp], #4
  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t)((ADCx->JDR2)*2u);
 800659e:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
    if (wAux < INT16_MAX)
 80065a2:	f647 70ff 	movw	r0, #32767	@ 0x7fff
 80065a6:	4283      	cmp	r3, r0
 80065a8:	bfa8      	it	ge
 80065aa:	4603      	movge	r3, r0
 80065ac:	4293      	cmp	r3, r2
 80065ae:	bfb8      	it	lt
 80065b0:	4613      	movlt	r3, r2
  wAux = -wAux;
 80065b2:	425b      	negs	r3, r3
  pStator_Currents->a = ( int16_t )( wAux );
 80065b4:	b21b      	sxth	r3, r3
 80065b6:	2200      	movs	r2, #0
 80065b8:	f363 020f 	bfi	r2, r3, #0, #16
 80065bc:	f363 421f 	bfi	r2, r3, #16, #16
 80065c0:	600a      	str	r2, [r1, #0]
}
 80065c2:	4770      	bx	lr
 80065c4:	ffff8001 	.word	0xffff8001

080065c8 <R3_1_RLSwitchOnPWM>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  */
void R3_1_RLSwitchOnPWM(PWMC_Handle_t *pHdl)
{
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 80065c8:	f8d0 20a0 	ldr.w	r2, [r0, #160]	@ 0xa0
{
 80065cc:	b5f0      	push	{r4, r5, r6, r7, lr}
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
  
  pHandle->_Super.TurnOnLowSidesAction = false;
 80065ce:	2400      	movs	r4, #0
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 80065d0:	e9d2 1300 	ldrd	r1, r3, [r2]
  pHandle->_Super.TurnOnLowSidesAction = false;
 80065d4:	f880 407e 	strb.w	r4, [r0, #126]	@ 0x7e
  /* The following while cycles ensure the identification of the nergative counting mode of TIM1
   * for correct modification of Repetition Counter value of TIM1.*/

  /* Wait the change of Counter Direction of TIM1 from Down-Direction to Up-Direction*/

  while ( ( TIMx->CR1 & DIR_MASK ) == DIR_MASK )
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	06d5      	lsls	r5, r2, #27
 80065dc:	d4fc      	bmi.n	80065d8 <R3_1_RLSwitchOnPWM+0x10>
  {
  }
  /* Wait the change of Counter Direction of TIM1 from Up-Direction to Down-Direction*/
  while ( ( TIMx->CR1 & DIR_MASK ) == 0u )
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	06d4      	lsls	r4, r2, #27
 80065e2:	d5fc      	bpl.n	80065de <R3_1_RLSwitchOnPWM+0x16>
  /* Set channel 1 Compare/Capture register to 1 */
  LL_TIM_OC_SetCompareCH1(TIMx, 1u);

  /* Set channel 4 Compare/Capture register to trig ADC in the middle 
     of the PWM period */
  LL_TIM_OC_SetCompareCH4(TIMx,(( uint32_t )( pHandle->Half_PWMPeriod ) - 5u));
 80065e4:	f8b0 209c 	ldrh.w	r2, [r0, #156]	@ 0x9c
  WRITE_REG(TIMx->CCR1, CompareValue);
 80065e8:	2401      	movs	r4, #1
 80065ea:	3a05      	subs	r2, #5
 80065ec:	635c      	str	r4, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR4, CompareValue);
 80065ee:	641a      	str	r2, [r3, #64]	@ 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80065f0:	f06f 0201 	mvn.w	r2, #1
 80065f4:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80065f6:	691a      	ldr	r2, [r3, #16]
 80065f8:	07d2      	lsls	r2, r2, #31
 80065fa:	d5fc      	bpl.n	80065f6 <R3_1_RLSwitchOnPWM+0x2e>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80065fc:	f06f 0201 	mvn.w	r2, #1
 8006600:	611a      	str	r2, [r3, #16]
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
  {}
  LL_TIM_ClearFlag_UPDATE( TIMx );
  
  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8006602:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006604:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006608:	645a      	str	r2, [r3, #68]	@ 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800660a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800660c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006610:	645a      	str	r2, [r3, #68]	@ 0x44
  LL_TIM_EnableAllOutputs(TIMx);

  if ( ( pHandle->_Super.LowSideOutputs ) == ES_GPIO )
 8006612:	f890 207d 	ldrb.w	r2, [r0, #125]	@ 0x7d
 8006616:	2a02      	cmp	r2, #2
 8006618:	d119      	bne.n	800664e <R3_1_RLSwitchOnPWM+0x86>
  {
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0u)
 800661a:	6a1e      	ldr	r6, [r3, #32]
    {
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800661c:	f8b0 204c 	ldrh.w	r2, [r0, #76]	@ 0x4c
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 8006620:	f8b0 5048 	ldrh.w	r5, [r0, #72]	@ 0x48
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 8006624:	f8b0 404a 	ldrh.w	r4, [r0, #74]	@ 0x4a
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 8006628:	f8d0 e03c 	ldr.w	lr, [r0, #60]	@ 0x3c
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800662c:	6c07      	ldr	r7, [r0, #64]	@ 0x40
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800662e:	6c40      	ldr	r0, [r0, #68]	@ 0x44
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0u)
 8006630:	f240 5c55 	movw	ip, #1365	@ 0x555
 8006634:	ea16 0f0c 	tst.w	r6, ip
 8006638:	ea4f 4202 	mov.w	r2, r2, lsl #16
 800663c:	bf05      	ittet	eq
 800663e:	042d      	lsleq	r5, r5, #16
 8006640:	0424      	lsleq	r4, r4, #16
  WRITE_REG(GPIOx->BSRR, PinMask);
 8006642:	f8ce 5018 	strne.w	r5, [lr, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8006646:	f8ce 5018 	streq.w	r5, [lr, #24]
 800664a:	61bc      	str	r4, [r7, #24]
 800664c:	6182      	str	r2, [r0, #24]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800664e:	f06f 0201 	mvn.w	r2, #1
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8006652:	f06f 0004 	mvn.w	r0, #4
 8006656:	6008      	str	r0, [r1, #0]
 8006658:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800665a:	68da      	ldr	r2, [r3, #12]
 800665c:	f042 0201 	orr.w	r2, r2, #1
 8006660:	60da      	str	r2, [r3, #12]

  /* enable TIMx update interrupt*/
  LL_TIM_EnableIT_UPDATE( TIMx );

  return; 
}
 8006662:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006664 <R3_1_TurnOnLowSides>:
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8006664:	f8d0 20a0 	ldr.w	r2, [r0, #160]	@ 0xa0
 8006668:	6852      	ldr	r2, [r2, #4]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800666a:	2300      	movs	r3, #0
  pHandle->_Super.TurnOnLowSidesAction = true;
 800666c:	f04f 0c01 	mov.w	ip, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006670:	f06f 0101 	mvn.w	r1, #1
 8006674:	f880 c07e 	strb.w	ip, [r0, #126]	@ 0x7e
 8006678:	6111      	str	r1, [r2, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800667a:	6353      	str	r3, [r2, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800667c:	6393      	str	r3, [r2, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800667e:	63d3      	str	r3, [r2, #60]	@ 0x3c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8006680:	6913      	ldr	r3, [r2, #16]
 8006682:	07db      	lsls	r3, r3, #31
 8006684:	d5fc      	bpl.n	8006680 <R3_1_TurnOnLowSides+0x1c>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006686:	f06f 0301 	mvn.w	r3, #1
 800668a:	6113      	str	r3, [r2, #16]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800668c:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 800668e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006692:	6453      	str	r3, [r2, #68]	@ 0x44
  if ((pHandle->_Super.LowSideOutputs)== ES_GPIO)
 8006694:	f890 307d 	ldrb.w	r3, [r0, #125]	@ 0x7d
 8006698:	2b02      	cmp	r3, #2
 800669a:	d000      	beq.n	800669e <R3_1_TurnOnLowSides+0x3a>
 800669c:	4770      	bx	lr
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800669e:	e9d0 210f 	ldrd	r2, r1, [r0, #60]	@ 0x3c
{
 80066a2:	b410      	push	{r4}
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 80066a4:	6c43      	ldr	r3, [r0, #68]	@ 0x44
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 80066a6:	f8b0 4048 	ldrh.w	r4, [r0, #72]	@ 0x48
  WRITE_REG(GPIOx->BSRR, PinMask);
 80066aa:	6194      	str	r4, [r2, #24]
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 80066ac:	f8b0 404a 	ldrh.w	r4, [r0, #74]	@ 0x4a
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 80066b0:	f8b0 204c 	ldrh.w	r2, [r0, #76]	@ 0x4c
 80066b4:	618c      	str	r4, [r1, #24]
}
 80066b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80066ba:	619a      	str	r2, [r3, #24]
 80066bc:	4770      	bx	lr
 80066be:	bf00      	nop

080066c0 <R3_1_RLTurnOnLowSides>:
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 80066c0:	f8d0 20a0 	ldr.w	r2, [r0, #160]	@ 0xa0
 80066c4:	6852      	ldr	r2, [r2, #4]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80066c6:	2100      	movs	r1, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80066c8:	f06f 0301 	mvn.w	r3, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 80066cc:	6351      	str	r1, [r2, #52]	@ 0x34
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80066ce:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80066d0:	6913      	ldr	r3, [r2, #16]
 80066d2:	07db      	lsls	r3, r3, #31
 80066d4:	d5fc      	bpl.n	80066d0 <R3_1_RLTurnOnLowSides+0x10>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80066d6:	f06f 0301 	mvn.w	r3, #1
 80066da:	6113      	str	r3, [r2, #16]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80066dc:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 80066de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066e2:	6453      	str	r3, [r2, #68]	@ 0x44
  if ( ( pHandle->_Super.LowSideOutputs ) == ES_GPIO )
 80066e4:	f890 307d 	ldrb.w	r3, [r0, #125]	@ 0x7d
 80066e8:	2b02      	cmp	r3, #2
 80066ea:	d000      	beq.n	80066ee <R3_1_RLTurnOnLowSides+0x2e>
 80066ec:	4770      	bx	lr
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 80066ee:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
    LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 80066f0:	f8b0 204a 	ldrh.w	r2, [r0, #74]	@ 0x4a
    LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 80066f4:	f8b0 304c 	ldrh.w	r3, [r0, #76]	@ 0x4c
{  
 80066f8:	b410      	push	{r4}
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 80066fa:	f8b0 4048 	ldrh.w	r4, [r0, #72]	@ 0x48
 80066fe:	618c      	str	r4, [r1, #24]
    LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8006700:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8006704:	0412      	lsls	r2, r2, #16
 8006706:	041b      	lsls	r3, r3, #16
 8006708:	61a2      	str	r2, [r4, #24]
}
 800670a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800670e:	618b      	str	r3, [r1, #24]
 8006710:	4770      	bx	lr
 8006712:	bf00      	nop

08006714 <R3_1_Init>:
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8006714:	f8d0 20a0 	ldr.w	r2, [r0, #160]	@ 0xa0
  ADC_TypeDef* ADCx  = pHandle->pParams_str->ADCx;
 8006718:	6813      	ldr	r3, [r2, #0]
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 800671a:	6852      	ldr	r2, [r2, #4]
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 800671c:	6859      	ldr	r1, [r3, #4]
{
 800671e:	b430      	push	{r4, r5}
 8006720:	f021 0120 	bic.w	r1, r1, #32
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 8006724:	f06f 0402 	mvn.w	r4, #2
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 8006728:	6059      	str	r1, [r3, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 800672a:	601c      	str	r4, [r3, #0]
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 800672c:	6859      	ldr	r1, [r3, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 800672e:	f06f 0404 	mvn.w	r4, #4
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8006732:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8006736:	6059      	str	r1, [r3, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8006738:	601c      	str	r4, [r3, #0]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 800673a:	6811      	ldr	r1, [r2, #0]
    if ( TIMx == TIM1 )
 800673c:	4c1e      	ldr	r4, [pc, #120]	@ (80067b8 <R3_1_Init+0xa4>)
 800673e:	f021 0101 	bic.w	r1, r1, #1
 8006742:	42a2      	cmp	r2, r4
 8006744:	6011      	str	r1, [r2, #0]
 8006746:	d031      	beq.n	80067ac <R3_1_Init+0x98>
    else if ( TIMx == TIM8 )
 8006748:	491c      	ldr	r1, [pc, #112]	@ (80067bc <R3_1_Init+0xa8>)
 800674a:	428a      	cmp	r2, r1
 800674c:	d028      	beq.n	80067a0 <R3_1_Init+0x8c>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 800674e:	f06f 0180 	mvn.w	r1, #128	@ 0x80
 8006752:	6111      	str	r1, [r2, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 8006754:	68d1      	ldr	r1, [r2, #12]
 8006756:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 800675a:	60d1      	str	r1, [r2, #12]
  SET_BIT(TIMx->CCER, Channels);
 800675c:	6a11      	ldr	r1, [r2, #32]
 800675e:	f441 61aa 	orr.w	r1, r1, #1360	@ 0x550
 8006762:	f041 0105 	orr.w	r1, r1, #5
 8006766:	6211      	str	r1, [r2, #32]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8006768:	689a      	ldr	r2, [r3, #8]
 800676a:	f042 0201 	orr.w	r2, r2, #1
 800676e:	609a      	str	r2, [r3, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8006770:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8006772:	f06f 0504 	mvn.w	r5, #4
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8006776:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800677a:	62da      	str	r2, [r3, #44]	@ 0x2c
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 800677c:	601d      	str	r5, [r3, #0]
  SET_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 800677e:	685a      	ldr	r2, [r3, #4]
 8006780:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006784:	605a      	str	r2, [r3, #4]
  MODIFY_REG(ADCx->JSQR, ADC_JSQR_JL, SequencerNbRanks);
 8006786:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
    pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 8006788:	f44f 1480 	mov.w	r4, #1048576	@ 0x100000
    pHandle->_Super.DTTest = 0u;
 800678c:	2100      	movs	r1, #0
 800678e:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
    pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 8006792:	f8c0 4098 	str.w	r4, [r0, #152]	@ 0x98
 8006796:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8006798:	bc30      	pop	{r4, r5}
    pHandle->_Super.DTTest = 0u;
 800679a:	f8a0 1070 	strh.w	r1, [r0, #112]	@ 0x70
}
 800679e:	4770      	bx	lr
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 80067a0:	4c07      	ldr	r4, [pc, #28]	@ (80067c0 <R3_1_Init+0xac>)
 80067a2:	68e1      	ldr	r1, [r4, #12]
 80067a4:	f041 0102 	orr.w	r1, r1, #2
 80067a8:	60e1      	str	r1, [r4, #12]
}
 80067aa:	e7d0      	b.n	800674e <R3_1_Init+0x3a>
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 80067ac:	4c04      	ldr	r4, [pc, #16]	@ (80067c0 <R3_1_Init+0xac>)
 80067ae:	68e1      	ldr	r1, [r4, #12]
 80067b0:	f041 0101 	orr.w	r1, r1, #1
 80067b4:	60e1      	str	r1, [r4, #12]
}
 80067b6:	e7ca      	b.n	800674e <R3_1_Init+0x3a>
 80067b8:	40010000 	.word	0x40010000
 80067bc:	40010400 	.word	0x40010400
 80067c0:	e0042000 	.word	0xe0042000

080067c4 <R3_1_SetOffsetCalib>:
{
 80067c4:	b410      	push	{r4}
  pHandle->PhaseAOffset = offsets->phaseAOffset;
 80067c6:	e9d1 4201 	ldrd	r4, r2, [r1, #4]
 80067ca:	680b      	ldr	r3, [r1, #0]
 80067cc:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  pHdl->offsetCalibStatus = true;
 80067d0:	2301      	movs	r3, #1
  pHandle->PhaseAOffset = offsets->phaseAOffset;
 80067d2:	e9c0 4223 	strd	r4, r2, [r0, #140]	@ 0x8c
  pHdl->offsetCalibStatus = true;
 80067d6:	f880 3081 	strb.w	r3, [r0, #129]	@ 0x81
}
 80067da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80067de:	4770      	bx	lr

080067e0 <R3_1_GetOffsetCalib>:
  offsets->phaseAOffset = pHandle->PhaseAOffset;
 80067e0:	e9d0 2323 	ldrd	r2, r3, [r0, #140]	@ 0x8c
 80067e4:	f8d0 0088 	ldr.w	r0, [r0, #136]	@ 0x88
 80067e8:	608b      	str	r3, [r1, #8]
 80067ea:	e9c1 0200 	strd	r0, r2, [r1]
}
 80067ee:	4770      	bx	lr

080067f0 <R3_1_CurrentReadingCalibration>:
{
 80067f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 80067f4:	f8d0 30a0 	ldr.w	r3, [r0, #160]	@ 0xa0
  if (false == pHandle->_Super.offsetCalibStatus)
 80067f8:	f890 6081 	ldrb.w	r6, [r0, #129]	@ 0x81
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 80067fc:	685c      	ldr	r4, [r3, #4]
{
 80067fe:	b082      	sub	sp, #8
 8006800:	4605      	mov	r5, r0
  if (false == pHandle->_Super.offsetCalibStatus)
 8006802:	b35e      	cbz	r6, 800685c <R3_1_CurrentReadingCalibration+0x6c>
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8006804:	69a2      	ldr	r2, [r4, #24]
  LL_TIM_OC_SetCompareCH1 (TIMx,pHandle->Half_PWMPeriod);
 8006806:	f8b5 309c 	ldrh.w	r3, [r5, #156]	@ 0x9c
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800680a:	f022 0208 	bic.w	r2, r2, #8
 800680e:	61a2      	str	r2, [r4, #24]
 8006810:	69a2      	ldr	r2, [r4, #24]
 8006812:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006816:	61a2      	str	r2, [r4, #24]
 8006818:	69e2      	ldr	r2, [r4, #28]
 800681a:	f022 0208 	bic.w	r2, r2, #8
 800681e:	61e2      	str	r2, [r4, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006820:	6363      	str	r3, [r4, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006822:	63a3      	str	r3, [r4, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8006824:	63e3      	str	r3, [r4, #60]	@ 0x3c
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8006826:	69a3      	ldr	r3, [r4, #24]
 8006828:	f043 0308 	orr.w	r3, r3, #8
 800682c:	61a3      	str	r3, [r4, #24]
 800682e:	69a3      	ldr	r3, [r4, #24]
 8006830:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8006834:	61a3      	str	r3, [r4, #24]
 8006836:	69e3      	ldr	r3, [r4, #28]
 8006838:	f043 0308 	orr.w	r3, r3, #8
 800683c:	61e3      	str	r3, [r4, #28]
  SET_BIT(TIMx->CCER, Channels);
 800683e:	6a23      	ldr	r3, [r4, #32]
 8006840:	f443 63aa 	orr.w	r3, r3, #1360	@ 0x550
  pHandle->_Super.Sector = SECTOR_5;
 8006844:	2104      	movs	r1, #4
  pHandle->_Super.BrakeActionLock = false;
 8006846:	2200      	movs	r2, #0
 8006848:	f043 0305 	orr.w	r3, r3, #5
 800684c:	6223      	str	r3, [r4, #32]
  pHandle->_Super.Sector = SECTOR_5;
 800684e:	f885 107c 	strb.w	r1, [r5, #124]	@ 0x7c
  pHandle->_Super.BrakeActionLock = false;
 8006852:	f885 2085 	strb.w	r2, [r5, #133]	@ 0x85
}
 8006856:	b002      	add	sp, #8
 8006858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    GetPhaseCurrCbSave = pHandle->_Super.pFctGetPhaseCurrents;
 800685c:	6803      	ldr	r3, [r0, #0]
 800685e:	9300      	str	r3, [sp, #0]
    pHandle->PhaseAOffset = 0u;
 8006860:	e9c0 6622 	strd	r6, r6, [r0, #136]	@ 0x88
    SetSampPointSectXCbSave = pHandle->_Super.pFctSetADCSampPointSectX;
 8006864:	6943      	ldr	r3, [r0, #20]
 8006866:	9301      	str	r3, [sp, #4]
    pHandle->PolarizationCounter = 0u;
 8006868:	f880 609f 	strb.w	r6, [r0, #159]	@ 0x9f
  CLEAR_BIT(TIMx->CCER, Channels);
 800686c:	6a23      	ldr	r3, [r4, #32]
    pHandle->PhaseCOffset = 0u;
 800686e:	f8c0 6090 	str.w	r6, [r0, #144]	@ 0x90
 8006872:	f423 63aa 	bic.w	r3, r3, #1360	@ 0x550
 8006876:	f023 0305 	bic.w	r3, r3, #5
 800687a:	6223      	str	r3, [r4, #32]
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsCalibrationAB;
 800687c:	4b23      	ldr	r3, [pc, #140]	@ (800690c <R3_1_CurrentReadingCalibration+0x11c>)
 800687e:	6003      	str	r3, [r0, #0]
    pHandle->_Super.pFctSetADCSampPointSectX = &R3_1_SetADCSampPointCalibration;
 8006880:	4b23      	ldr	r3, [pc, #140]	@ (8006910 <R3_1_CurrentReadingCalibration+0x120>)
 8006882:	6143      	str	r3, [r0, #20]
    pHandle->CalibSector = SECTOR_5;
 8006884:	2304      	movs	r3, #4
 8006886:	f880 309e 	strb.w	r3, [r0, #158]	@ 0x9e
    pHandle->_Super.Sector = SECTOR_5;
 800688a:	f880 307c 	strb.w	r3, [r0, #124]	@ 0x7c
    R3_1_SwitchOnPWM( &pHandle->_Super );
 800688e:	f7ff fdf1 	bl	8006474 <R3_1_SwitchOnPWM>
                            pHandle->pParams_str->RepetitionCounter,
 8006892:	f8d5 30a0 	ldr.w	r3, [r5, #160]	@ 0xa0
    waitForPolarizationEnd( TIMx,
 8006896:	f105 0756 	add.w	r7, r5, #86	@ 0x56
 800689a:	f105 089f 	add.w	r8, r5, #159	@ 0x9f
 800689e:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 80068a2:	4639      	mov	r1, r7
 80068a4:	4643      	mov	r3, r8
 80068a6:	4620      	mov	r0, r4
 80068a8:	f7ff fccc 	bl	8006244 <waitForPolarizationEnd>
    R3_1_SwitchOffPWM( &pHandle->_Super );
 80068ac:	4628      	mov	r0, r5
 80068ae:	f7ff fe2b 	bl	8006508 <R3_1_SwitchOffPWM>
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsCalibrationC;
 80068b2:	4b18      	ldr	r3, [pc, #96]	@ (8006914 <R3_1_CurrentReadingCalibration+0x124>)
 80068b4:	602b      	str	r3, [r5, #0]
    R3_1_SwitchOnPWM( &pHandle->_Super );
 80068b6:	4628      	mov	r0, r5
    pHandle->PolarizationCounter = 0u;
 80068b8:	f885 609f 	strb.w	r6, [r5, #159]	@ 0x9f
    pHandle->CalibSector = SECTOR_1;
 80068bc:	f885 609e 	strb.w	r6, [r5, #158]	@ 0x9e
    pHandle->_Super.Sector = SECTOR_1;
 80068c0:	f885 607c 	strb.w	r6, [r5, #124]	@ 0x7c
    R3_1_SwitchOnPWM( &pHandle->_Super );
 80068c4:	f7ff fdd6 	bl	8006474 <R3_1_SwitchOnPWM>
                            pHandle->pParams_str->RepetitionCounter,
 80068c8:	f8d5 20a0 	ldr.w	r2, [r5, #160]	@ 0xa0
    waitForPolarizationEnd( TIMx,
 80068cc:	4643      	mov	r3, r8
 80068ce:	f892 202a 	ldrb.w	r2, [r2, #42]	@ 0x2a
 80068d2:	4639      	mov	r1, r7
 80068d4:	4620      	mov	r0, r4
 80068d6:	f7ff fcb5 	bl	8006244 <waitForPolarizationEnd>
    R3_1_SwitchOffPWM( &pHandle->_Super );
 80068da:	4628      	mov	r0, r5
 80068dc:	f7ff fe14 	bl	8006508 <R3_1_SwitchOffPWM>
    pHandle->PhaseBOffset >>= 3;
 80068e0:	e9d5 1222 	ldrd	r1, r2, [r5, #136]	@ 0x88
    pHandle->PhaseCOffset >>= 3;
 80068e4:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
    pHandle->PhaseBOffset >>= 3;
 80068e8:	08d2      	lsrs	r2, r2, #3
    pHandle->PhaseAOffset >>= 3;
 80068ea:	08c9      	lsrs	r1, r1, #3
    pHandle->PhaseBOffset >>= 3;
 80068ec:	e9c5 1222 	strd	r1, r2, [r5, #136]	@ 0x88
    if (0U == pHandle->_Super.SWerror)
 80068f0:	f8b5 2056 	ldrh.w	r2, [r5, #86]	@ 0x56
    pHandle->PhaseCOffset >>= 3;
 80068f4:	08db      	lsrs	r3, r3, #3
 80068f6:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
    if (0U == pHandle->_Super.SWerror)
 80068fa:	b912      	cbnz	r2, 8006902 <R3_1_CurrentReadingCalibration+0x112>
      pHandle->_Super.offsetCalibStatus = true;
 80068fc:	2301      	movs	r3, #1
 80068fe:	f885 3081 	strb.w	r3, [r5, #129]	@ 0x81
    pHandle->_Super.pFctGetPhaseCurrents = GetPhaseCurrCbSave;
 8006902:	9a00      	ldr	r2, [sp, #0]
    pHandle->_Super.pFctSetADCSampPointSectX = SetSampPointSectXCbSave;
 8006904:	9b01      	ldr	r3, [sp, #4]
    pHandle->_Super.pFctGetPhaseCurrents = GetPhaseCurrCbSave;
 8006906:	602a      	str	r2, [r5, #0]
    pHandle->_Super.pFctSetADCSampPointSectX = SetSampPointSectXCbSave;
 8006908:	616b      	str	r3, [r5, #20]
 800690a:	e77b      	b.n	8006804 <R3_1_CurrentReadingCalibration+0x14>
 800690c:	080063f5 	.word	0x080063f5
 8006910:	08006951 	.word	0x08006951
 8006914:	08006439 	.word	0x08006439

08006918 <R3_1_WriteTIMRegisters>:
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8006918:	f8d0 20a0 	ldr.w	r2, [r0, #160]	@ 0xa0
{
 800691c:	4603      	mov	r3, r0
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 800691e:	6852      	ldr	r2, [r2, #4]
{
 8006920:	b410      	push	{r4}
  LL_TIM_OC_SetCompareCH1 (TIMx,pHandle->_Super.CntPhA);
 8006922:	f8b0 4050 	ldrh.w	r4, [r0, #80]	@ 0x50
  LL_TIM_OC_SetCompareCH2 (TIMx,pHandle->_Super.CntPhB);
 8006926:	f8b0 0052 	ldrh.w	r0, [r0, #82]	@ 0x52
  WRITE_REG(TIMx->CCR1, CompareValue);
 800692a:	6354      	str	r4, [r2, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800692c:	6390      	str	r0, [r2, #56]	@ 0x38
  LL_TIM_OC_SetCompareCH3 (TIMx,pHandle->_Super.CntPhC);
 800692e:	f8b3 4054 	ldrh.w	r4, [r3, #84]	@ 0x54
  if ( pHandle->_Super.SWerror == 1u )
 8006932:	f8b3 0056 	ldrh.w	r0, [r3, #86]	@ 0x56
  WRITE_REG(TIMx->CCR3, CompareValue);
 8006936:	63d4      	str	r4, [r2, #60]	@ 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 8006938:	6411      	str	r1, [r2, #64]	@ 0x40
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 800693a:	6a12      	ldr	r2, [r2, #32]
}
 800693c:	f85d 4b04 	ldr.w	r4, [sp], #4
  if ( pHandle->_Super.SWerror == 1u )
 8006940:	2801      	cmp	r0, #1
    pHandle->_Super.SWerror = 0u;
 8006942:	bf0a      	itet	eq
 8006944:	2200      	moveq	r2, #0
 8006946:	f3c2 3000 	ubfxne	r0, r2, #12, #1
 800694a:	f8a3 2056 	strheq.w	r2, [r3, #86]	@ 0x56
}
 800694e:	4770      	bx	lr

08006950 <R3_1_SetADCSampPointCalibration>:
{
 8006950:	b510      	push	{r4, lr}
  return R3_1_WriteTIMRegisters(&pHandle->_Super, (uint16_t)(pHandle->Half_PWMPeriod) - 1u);
 8006952:	f8b0 109c 	ldrh.w	r1, [r0, #156]	@ 0x9c
  pHandle->_Super.Sector = pHandle->CalibSector;
 8006956:	f890 209e 	ldrb.w	r2, [r0, #158]	@ 0x9e
 800695a:	f880 207c 	strb.w	r2, [r0, #124]	@ 0x7c
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 800695e:	f44f 1480 	mov.w	r4, #1048576	@ 0x100000
  return R3_1_WriteTIMRegisters(&pHandle->_Super, (uint16_t)(pHandle->Half_PWMPeriod) - 1u);
 8006962:	3901      	subs	r1, #1
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 8006964:	f8c0 4098 	str.w	r4, [r0, #152]	@ 0x98
  return R3_1_WriteTIMRegisters(&pHandle->_Super, (uint16_t)(pHandle->Half_PWMPeriod) - 1u);
 8006968:	b289      	uxth	r1, r1
 800696a:	f7ff ffd5 	bl	8006918 <R3_1_WriteTIMRegisters>
}
 800696e:	bd10      	pop	{r4, pc}

08006970 <R3_1_SetADCSampPointSectX>:
{
 8006970:	b510      	push	{r4, lr}
  register uint16_t lowDuty = pHdl->lowDuty;
 8006972:	f8b0 2058 	ldrh.w	r2, [r0, #88]	@ 0x58
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) > pHandle->pParams_str->hTafter )
 8006976:	f8b0 e09c 	ldrh.w	lr, [r0, #156]	@ 0x9c
 800697a:	f8d0 40a0 	ldr.w	r4, [r0, #160]	@ 0xa0
  register uint16_t midDuty = pHdl->midDuty;
 800697e:	f8b0 c05a 	ldrh.w	ip, [r0, #90]	@ 0x5a
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) > pHandle->pParams_str->hTafter )
 8006982:	8c21      	ldrh	r1, [r4, #32]
 8006984:	ebae 0302 	sub.w	r3, lr, r2
 8006988:	b29b      	uxth	r3, r3
 800698a:	428b      	cmp	r3, r1
 800698c:	d908      	bls.n	80069a0 <R3_1_SetADCSampPointSectX+0x30>
    pHandle->_Super.Sector = SECTOR_5;
 800698e:	2304      	movs	r3, #4
    hCntSmp = ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u;
 8006990:	f10e 31ff 	add.w	r1, lr, #4294967295
    pHandle->_Super.Sector = SECTOR_5;
 8006994:	f880 307c 	strb.w	r3, [r0, #124]	@ 0x7c
    hCntSmp = ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u;
 8006998:	b289      	uxth	r1, r1
  return R3_1_WriteTIMRegisters( &pHandle->_Super, hCntSmp);
 800699a:	f7ff ffbd 	bl	8006918 <R3_1_WriteTIMRegisters>
}
 800699e:	bd10      	pop	{r4, pc}
    hDeltaDuty = ( uint16_t )( lowDuty - midDuty );
 80069a0:	eba2 0c0c 	sub.w	ip, r2, ip
    if ( hDeltaDuty > ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) * 2u )
 80069a4:	fa1f fc8c 	uxth.w	ip, ip
 80069a8:	ebbc 0f43 	cmp.w	ip, r3, lsl #1
 80069ac:	d905      	bls.n	80069ba <R3_1_SetADCSampPointSectX+0x4a>
      hCntSmp = lowDuty - pHandle->pParams_str->hTbefore;
 80069ae:	8c63      	ldrh	r3, [r4, #34]	@ 0x22
 80069b0:	1ad2      	subs	r2, r2, r3
 80069b2:	b291      	uxth	r1, r2
  return R3_1_WriteTIMRegisters( &pHandle->_Super, hCntSmp);
 80069b4:	f7ff ffb0 	bl	8006918 <R3_1_WriteTIMRegisters>
}
 80069b8:	bd10      	pop	{r4, pc}
      hCntSmp = lowDuty + pHandle->pParams_str->hTafter;
 80069ba:	4411      	add	r1, r2
 80069bc:	b289      	uxth	r1, r1
      if ( hCntSmp >= pHandle->Half_PWMPeriod )
 80069be:	458e      	cmp	lr, r1
 80069c0:	d8eb      	bhi.n	800699a <R3_1_SetADCSampPointSectX+0x2a>
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 80069c2:	43c9      	mvns	r1, r1
        pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_FALLING;
 80069c4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 80069c8:	eb01 014e 	add.w	r1, r1, lr, lsl #1
        pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_FALLING;
 80069cc:	f8c0 3098 	str.w	r3, [r0, #152]	@ 0x98
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 80069d0:	b289      	uxth	r1, r1
  return R3_1_WriteTIMRegisters( &pHandle->_Super, hCntSmp);
 80069d2:	f7ff ffa1 	bl	8006918 <R3_1_WriteTIMRegisters>
}
 80069d6:	bd10      	pop	{r4, pc}

080069d8 <R3_1_TIMx_UP_IRQHandler>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80069d8:	f8d0 10a0 	ldr.w	r1, [r0, #160]	@ 0xa0
{
 80069dc:	b410      	push	{r4}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80069de:	e9d1 2400 	ldrd	r2, r4, [r1]
{
 80069e2:	4603      	mov	r3, r0
  CLEAR_BIT(ADCx->CR2, ADC_CR2_JEXTEN);
 80069e4:	6890      	ldr	r0, [r2, #8]
 80069e6:	f420 1040 	bic.w	r0, r0, #3145728	@ 0x300000
 80069ea:	6090      	str	r0, [r2, #8]
  ADCx->JSQR = pHandle->pParams_str->ADCConfig[pHandle->_Super.Sector];
 80069ec:	f893 007c 	ldrb.w	r0, [r3, #124]	@ 0x7c
 80069f0:	3002      	adds	r0, #2
 80069f2:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80069f6:	6391      	str	r1, [r2, #56]	@ 0x38
  SET_BIT(TIMx->CCER, Channels);
 80069f8:	6a21      	ldr	r1, [r4, #32]
  SET_BIT(ADCx->CR2, ExternalTriggerEdge);
 80069fa:	f8d3 0098 	ldr.w	r0, [r3, #152]	@ 0x98
 80069fe:	f441 5180 	orr.w	r1, r1, #4096	@ 0x1000
 8006a02:	6221      	str	r1, [r4, #32]
 8006a04:	6891      	ldr	r1, [r2, #8]
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 8006a06:	f44f 1480 	mov.w	r4, #1048576	@ 0x100000
 8006a0a:	4301      	orrs	r1, r0
 8006a0c:	6091      	str	r1, [r2, #8]
}
 8006a0e:	f103 007a 	add.w	r0, r3, #122	@ 0x7a
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 8006a12:	f8c3 4098 	str.w	r4, [r3, #152]	@ 0x98
}
 8006a16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a1a:	4770      	bx	lr

08006a1c <R3_1_RLDetectionModeEnable>:
  if (pHandle->_Super.RLDetectionMode == false)
 8006a1c:	f890 1080 	ldrb.w	r1, [r0, #128]	@ 0x80
{
 8006a20:	b410      	push	{r4}
  if (pHandle->_Super.RLDetectionMode == false)
 8006a22:	2900      	cmp	r1, #0
 8006a24:	d135      	bne.n	8006a92 <R3_1_RLDetectionModeEnable+0x76>
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8006a26:	f8d0 30a0 	ldr.w	r3, [r0, #160]	@ 0xa0
 8006a2a:	685b      	ldr	r3, [r3, #4]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8006a2c:	699a      	ldr	r2, [r3, #24]
 8006a2e:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 8006a32:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8006a36:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8006a38:	6a1a      	ldr	r2, [r3, #32]
 8006a3a:	f042 0201 	orr.w	r2, r2, #1
 8006a3e:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8006a40:	6a1a      	ldr	r2, [r3, #32]
 8006a42:	f022 0204 	bic.w	r2, r2, #4
 8006a46:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006a48:	6359      	str	r1, [r3, #52]	@ 0x34
    if ((pHandle->_Super.LowSideOutputs)== LS_PWM_TIMER)
 8006a4a:	f890 207d 	ldrb.w	r2, [r0, #125]	@ 0x7d
 8006a4e:	2a01      	cmp	r2, #1
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8006a50:	f103 0418 	add.w	r4, r3, #24
 8006a54:	d02b      	beq.n	8006aae <R3_1_RLDetectionModeEnable+0x92>
    else if ((pHandle->_Super.LowSideOutputs)== ES_GPIO)
 8006a56:	2a02      	cmp	r2, #2
 8006a58:	d10d      	bne.n	8006a76 <R3_1_RLDetectionModeEnable+0x5a>
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8006a5a:	699a      	ldr	r2, [r3, #24]
 8006a5c:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
 8006a60:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006a64:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8006a66:	6a1a      	ldr	r2, [r3, #32]
 8006a68:	f042 0210 	orr.w	r2, r2, #16
 8006a6c:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8006a6e:	6a1a      	ldr	r2, [r3, #32]
 8006a70:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006a74:	621a      	str	r2, [r3, #32]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8006a76:	6862      	ldr	r2, [r4, #4]
 8006a78:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 8006a7c:	f042 0270 	orr.w	r2, r2, #112	@ 0x70
 8006a80:	6062      	str	r2, [r4, #4]
  CLEAR_BIT(TIMx->CCER, Channels);
 8006a82:	6a1a      	ldr	r2, [r3, #32]
 8006a84:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006a88:	621a      	str	r2, [r3, #32]
 8006a8a:	6a1a      	ldr	r2, [r3, #32]
 8006a8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a90:	621a      	str	r2, [r3, #32]
  pHandle->_Super.pFctTurnOnLowSides = &R3_1_RLTurnOnLowSides;
 8006a92:	4b0e      	ldr	r3, [pc, #56]	@ (8006acc <R3_1_RLDetectionModeEnable+0xb0>)
  pHandle->_Super.pFctSwitchOnPwm = &R3_1_RLSwitchOnPWM;
 8006a94:	490e      	ldr	r1, [pc, #56]	@ (8006ad0 <R3_1_RLDetectionModeEnable+0xb4>)
  pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 8006a96:	4a0f      	ldr	r2, [pc, #60]	@ (8006ad4 <R3_1_RLDetectionModeEnable+0xb8>)
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_RLGetPhaseCurrents;
 8006a98:	4c0f      	ldr	r4, [pc, #60]	@ (8006ad8 <R3_1_RLDetectionModeEnable+0xbc>)
  pHandle->_Super.pFctTurnOnLowSides = &R3_1_RLTurnOnLowSides;
 8006a9a:	6103      	str	r3, [r0, #16]
  pHandle->_Super.RLDetectionMode = true;
 8006a9c:	2301      	movs	r3, #1
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_RLGetPhaseCurrents;
 8006a9e:	6004      	str	r4, [r0, #0]
  pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 8006aa0:	e9c0 2101 	strd	r2, r1, [r0, #4]
}
 8006aa4:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->_Super.RLDetectionMode = true;
 8006aa8:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
}
 8006aac:	4770      	bx	lr
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8006aae:	699a      	ldr	r2, [r3, #24]
 8006ab0:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
 8006ab4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006ab8:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(TIMx->CCER, Channels);
 8006aba:	6a1a      	ldr	r2, [r3, #32]
 8006abc:	f022 0210 	bic.w	r2, r2, #16
 8006ac0:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CCER, Channels);
 8006ac2:	6a1a      	ldr	r2, [r3, #32]
 8006ac4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006ac8:	621a      	str	r2, [r3, #32]
}
 8006aca:	e7d4      	b.n	8006a76 <R3_1_RLDetectionModeEnable+0x5a>
 8006acc:	080066c1 	.word	0x080066c1
 8006ad0:	080065c9 	.word	0x080065c9
 8006ad4:	08006509 	.word	0x08006509
 8006ad8:	08006581 	.word	0x08006581

08006adc <R3_1_RLDetectionModeDisable>:
  if (pHandle->_Super.RLDetectionMode == true)
 8006adc:	f890 3080 	ldrb.w	r3, [r0, #128]	@ 0x80
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d04a      	beq.n	8006b7a <R3_1_RLDetectionModeDisable+0x9e>
{
 8006ae4:	b410      	push	{r4}
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8006ae6:	f8d0 10a0 	ldr.w	r1, [r0, #160]	@ 0xa0
 8006aea:	684b      	ldr	r3, [r1, #4]
    while ((TIMx->CR1 & DIR_MASK) == 0u)
 8006aec:	681a      	ldr	r2, [r3, #0]
 8006aee:	06d4      	lsls	r4, r2, #27
 8006af0:	d5fc      	bpl.n	8006aec <R3_1_RLDetectionModeDisable+0x10>
    while ((TIMx->CR1 & DIR_MASK) == DIR_MASK)
 8006af2:	681a      	ldr	r2, [r3, #0]
 8006af4:	06d2      	lsls	r2, r2, #27
 8006af6:	d4fc      	bmi.n	8006af2 <R3_1_RLDetectionModeDisable+0x16>
    TIMx->RCR = pHandle->pParams_str->RepetitionCounter;
 8006af8:	f891 202a 	ldrb.w	r2, [r1, #42]	@ 0x2a
 8006afc:	631a      	str	r2, [r3, #48]	@ 0x30
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8006afe:	699a      	ldr	r2, [r3, #24]
    LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod) >> 1);
 8006b00:	f8b0 c09c 	ldrh.w	ip, [r0, #156]	@ 0x9c
 8006b04:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 8006b08:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8006b0c:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8006b0e:	6a1c      	ldr	r4, [r3, #32]
 8006b10:	f044 0401 	orr.w	r4, r4, #1
 8006b14:	621c      	str	r4, [r3, #32]
    if ((pHandle->_Super.LowSideOutputs)== LS_PWM_TIMER)
 8006b16:	f890 407d 	ldrb.w	r4, [r0, #125]	@ 0x7d
 8006b1a:	2c01      	cmp	r4, #1
    LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod) >> 1);
 8006b1c:	ea4f 025c 	mov.w	r2, ip, lsr #1
    if ((pHandle->_Super.LowSideOutputs)== LS_PWM_TIMER)
 8006b20:	d02c      	beq.n	8006b7c <R3_1_RLDetectionModeDisable+0xa0>
    else if ((pHandle->_Super.LowSideOutputs)== ES_GPIO)
 8006b22:	2c02      	cmp	r4, #2
 8006b24:	d04d      	beq.n	8006bc2 <R3_1_RLDetectionModeDisable+0xe6>
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006b26:	635a      	str	r2, [r3, #52]	@ 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8006b28:	699c      	ldr	r4, [r3, #24]
 8006b2a:	f424 44e6 	bic.w	r4, r4, #29440	@ 0x7300
 8006b2e:	f444 44c0 	orr.w	r4, r4, #24576	@ 0x6000
 8006b32:	619c      	str	r4, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8006b34:	6a1c      	ldr	r4, [r3, #32]
 8006b36:	f044 0410 	orr.w	r4, r4, #16
 8006b3a:	621c      	str	r4, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006b3c:	639a      	str	r2, [r3, #56]	@ 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8006b3e:	69dc      	ldr	r4, [r3, #28]
 8006b40:	f024 0473 	bic.w	r4, r4, #115	@ 0x73
 8006b44:	f044 0460 	orr.w	r4, r4, #96	@ 0x60
 8006b48:	61dc      	str	r4, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8006b4a:	6a1c      	ldr	r4, [r3, #32]
 8006b4c:	f444 7480 	orr.w	r4, r4, #256	@ 0x100
 8006b50:	621c      	str	r4, [r3, #32]
    LL_ADC_INJ_SetSequencerDiscont(pHandle->pParams_str->ADCx,
 8006b52:	6809      	ldr	r1, [r1, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8006b54:	63da      	str	r2, [r3, #60]	@ 0x3c
  MODIFY_REG(ADCx->CR1, ADC_CR1_JDISCEN, SeqDiscont);
 8006b56:	684b      	ldr	r3, [r1, #4]
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_GetPhaseCurrents;
 8006b58:	4a2b      	ldr	r2, [pc, #172]	@ (8006c08 <R3_1_RLDetectionModeDisable+0x12c>)
    pHandle->_Super.pFctTurnOnLowSides = &R3_1_TurnOnLowSides;
 8006b5a:	4c2c      	ldr	r4, [pc, #176]	@ (8006c0c <R3_1_RLDetectionModeDisable+0x130>)
 8006b5c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006b60:	604b      	str	r3, [r1, #4]
    pHandle->_Super.pFctSwitchOnPwm = &R3_1_SwitchOnPWM;
 8006b62:	492b      	ldr	r1, [pc, #172]	@ (8006c10 <R3_1_RLDetectionModeDisable+0x134>)
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_GetPhaseCurrents;
 8006b64:	6002      	str	r2, [r0, #0]
    pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 8006b66:	4a2b      	ldr	r2, [pc, #172]	@ (8006c14 <R3_1_RLDetectionModeDisable+0x138>)
    pHandle->_Super.pFctTurnOnLowSides = &R3_1_TurnOnLowSides;
 8006b68:	6104      	str	r4, [r0, #16]
    pHandle->_Super.RLDetectionMode = false;
 8006b6a:	2300      	movs	r3, #0
    pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 8006b6c:	e9c0 2101 	strd	r2, r1, [r0, #4]
}
 8006b70:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->_Super.RLDetectionMode = false;
 8006b74:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
}
 8006b78:	4770      	bx	lr
 8006b7a:	4770      	bx	lr
  SET_BIT(TIMx->CCER, Channels);
 8006b7c:	6a1c      	ldr	r4, [r3, #32]
 8006b7e:	f044 0404 	orr.w	r4, r4, #4
 8006b82:	621c      	str	r4, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006b84:	635a      	str	r2, [r3, #52]	@ 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8006b86:	699c      	ldr	r4, [r3, #24]
 8006b88:	f424 44e6 	bic.w	r4, r4, #29440	@ 0x7300
 8006b8c:	f444 44c0 	orr.w	r4, r4, #24576	@ 0x6000
 8006b90:	619c      	str	r4, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8006b92:	6a1c      	ldr	r4, [r3, #32]
 8006b94:	f044 0410 	orr.w	r4, r4, #16
 8006b98:	621c      	str	r4, [r3, #32]
 8006b9a:	6a1c      	ldr	r4, [r3, #32]
 8006b9c:	f044 0440 	orr.w	r4, r4, #64	@ 0x40
 8006ba0:	621c      	str	r4, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006ba2:	639a      	str	r2, [r3, #56]	@ 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8006ba4:	69dc      	ldr	r4, [r3, #28]
 8006ba6:	f024 0473 	bic.w	r4, r4, #115	@ 0x73
 8006baa:	f044 0460 	orr.w	r4, r4, #96	@ 0x60
 8006bae:	61dc      	str	r4, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8006bb0:	6a1c      	ldr	r4, [r3, #32]
 8006bb2:	f444 7480 	orr.w	r4, r4, #256	@ 0x100
 8006bb6:	621c      	str	r4, [r3, #32]
 8006bb8:	6a1c      	ldr	r4, [r3, #32]
 8006bba:	f444 6480 	orr.w	r4, r4, #1024	@ 0x400
 8006bbe:	621c      	str	r4, [r3, #32]
}
 8006bc0:	e7c7      	b.n	8006b52 <R3_1_RLDetectionModeDisable+0x76>
  CLEAR_BIT(TIMx->CCER, Channels);
 8006bc2:	6a1c      	ldr	r4, [r3, #32]
 8006bc4:	f024 0404 	bic.w	r4, r4, #4
 8006bc8:	621c      	str	r4, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006bca:	635a      	str	r2, [r3, #52]	@ 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8006bcc:	699c      	ldr	r4, [r3, #24]
 8006bce:	f424 44e6 	bic.w	r4, r4, #29440	@ 0x7300
 8006bd2:	f444 44c0 	orr.w	r4, r4, #24576	@ 0x6000
 8006bd6:	619c      	str	r4, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8006bd8:	6a1c      	ldr	r4, [r3, #32]
 8006bda:	f044 0410 	orr.w	r4, r4, #16
 8006bde:	621c      	str	r4, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8006be0:	6a1c      	ldr	r4, [r3, #32]
 8006be2:	f024 0440 	bic.w	r4, r4, #64	@ 0x40
 8006be6:	621c      	str	r4, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006be8:	639a      	str	r2, [r3, #56]	@ 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8006bea:	69dc      	ldr	r4, [r3, #28]
 8006bec:	f024 0473 	bic.w	r4, r4, #115	@ 0x73
 8006bf0:	f044 0460 	orr.w	r4, r4, #96	@ 0x60
 8006bf4:	61dc      	str	r4, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8006bf6:	6a1c      	ldr	r4, [r3, #32]
 8006bf8:	f444 7480 	orr.w	r4, r4, #256	@ 0x100
 8006bfc:	621c      	str	r4, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8006bfe:	6a1c      	ldr	r4, [r3, #32]
 8006c00:	f424 6480 	bic.w	r4, r4, #1024	@ 0x400
 8006c04:	621c      	str	r4, [r3, #32]
}
 8006c06:	e7a4      	b.n	8006b52 <R3_1_RLDetectionModeDisable+0x76>
 8006c08:	08006281 	.word	0x08006281
 8006c0c:	08006665 	.word	0x08006665
 8006c10:	08006475 	.word	0x08006475
 8006c14:	08006509 	.word	0x08006509

08006c18 <R3_1_RLDetectionModeSetDuty>:
{
 8006c18:	4603      	mov	r3, r0
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006c1a:	f8d0 00a0 	ldr.w	r0, [r0, #160]	@ 0xa0
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8006c1e:	f8b3 209c 	ldrh.w	r2, [r3, #156]	@ 0x9c
{
 8006c22:	b410      	push	{r4}
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8006c24:	fb02 f101 	mul.w	r1, r2, r1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006c28:	6844      	ldr	r4, [r0, #4]
  if (pHandle->_Super.SWerror == 1u)
 8006c2a:	f8b3 0056 	ldrh.w	r0, [r3, #86]	@ 0x56
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8006c2e:	0c09      	lsrs	r1, r1, #16
  pHandle->_Super.Sector = SECTOR_4;
 8006c30:	2203      	movs	r2, #3
 8006c32:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
  pHandle->_Super.CntPhA = ( uint16_t )( val );
 8006c36:	f8a3 1050 	strh.w	r1, [r3, #80]	@ 0x50
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006c3a:	6361      	str	r1, [r4, #52]	@ 0x34
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 8006c3c:	6a22      	ldr	r2, [r4, #32]
}
 8006c3e:	f85d 4b04 	ldr.w	r4, [sp], #4
  if (pHandle->_Super.SWerror == 1u)
 8006c42:	2801      	cmp	r0, #1
    pHandle->_Super.SWerror = 0u;
 8006c44:	bf0a      	itet	eq
 8006c46:	2200      	moveq	r2, #0
 8006c48:	f3c2 3000 	ubfxne	r0, r2, #12, #1
 8006c4c:	f8a3 2056 	strheq.w	r2, [r3, #86]	@ 0x56
}
 8006c50:	4770      	bx	lr
 8006c52:	bf00      	nop

08006c54 <R3_1_RLTurnOnLowSidesAndStart>:
 * @param  pHdl: Handler of the current instance of the PWM component.
 */
void R3_1_RLTurnOnLowSidesAndStart( PWMC_Handle_t * pHdl )
{
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006c54:	f8d0 20a0 	ldr.w	r2, [r0, #160]	@ 0xa0
{
 8006c58:	b430      	push	{r4, r5}
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 8006c5a:	e9d2 4300 	ldrd	r4, r3, [r2]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006c5e:	f06f 0101 	mvn.w	r1, #1
 8006c62:	6119      	str	r1, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8006c64:	691a      	ldr	r2, [r3, #16]
 8006c66:	07d1      	lsls	r1, r2, #31
 8006c68:	d5fc      	bpl.n	8006c64 <R3_1_RLTurnOnLowSidesAndStart+0x10>

  LL_TIM_OC_SetCompareCH1 ( TIMx, 0x0u );
  LL_TIM_OC_SetCompareCH2 ( TIMx, 0x0u );
  LL_TIM_OC_SetCompareCH3 ( TIMx, 0x0u );

  LL_TIM_OC_SetCompareCH4( TIMx, ( pHandle->Half_PWMPeriod - 5u));
 8006c6a:	f8b0 209c 	ldrh.w	r2, [r0, #156]	@ 0x9c
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006c6e:	2100      	movs	r1, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006c70:	f06f 0501 	mvn.w	r5, #1
 8006c74:	3a05      	subs	r2, #5
 8006c76:	611d      	str	r5, [r3, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006c78:	6359      	str	r1, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006c7a:	6399      	str	r1, [r3, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8006c7c:	63d9      	str	r1, [r3, #60]	@ 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 8006c7e:	641a      	str	r2, [r3, #64]	@ 0x40
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8006c80:	691a      	ldr	r2, [r3, #16]
 8006c82:	07d2      	lsls	r2, r2, #31
 8006c84:	d5fc      	bpl.n	8006c80 <R3_1_RLTurnOnLowSidesAndStart+0x2c>

  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
  {}

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE ;
 8006c86:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006c88:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006c8c:	645a      	str	r2, [r3, #68]	@ 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8006c8e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006c90:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006c94:	645a      	str	r2, [r3, #68]	@ 0x44
  LL_TIM_EnableAllOutputs ( TIMx );

  if ( ( pHandle->_Super.LowSideOutputs ) == ES_GPIO )
 8006c96:	f890 307d 	ldrb.w	r3, [r0, #125]	@ 0x7d
 8006c9a:	2b02      	cmp	r3, #2
 8006c9c:	d10b      	bne.n	8006cb6 <R3_1_RLTurnOnLowSidesAndStart+0x62>
  {
      /* It is executed during calibration phase the EN signal shall stay off */
      LL_GPIO_SetOutputPin( pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin );
      LL_GPIO_SetOutputPin( pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin );
 8006c9e:	e9d0 210f 	ldrd	r2, r1, [r0, #60]	@ 0x3c
      LL_GPIO_SetOutputPin( pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin );
 8006ca2:	f8b0 5048 	ldrh.w	r5, [r0, #72]	@ 0x48
      LL_GPIO_SetOutputPin( pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin );
 8006ca6:	6c43      	ldr	r3, [r0, #68]	@ 0x44
  WRITE_REG(GPIOx->BSRR, PinMask);
 8006ca8:	6195      	str	r5, [r2, #24]
      LL_GPIO_SetOutputPin( pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin );
 8006caa:	f8b0 504a 	ldrh.w	r5, [r0, #74]	@ 0x4a
      LL_GPIO_SetOutputPin( pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin );
 8006cae:	f8b0 204c 	ldrh.w	r2, [r0, #76]	@ 0x4c
 8006cb2:	618d      	str	r5, [r1, #24]
 8006cb4:	619a      	str	r2, [r3, #24]
  SET_BIT(ADCx->CR2, ExternalTriggerEdge);
 8006cb6:	68a3      	ldr	r3, [r4, #8]
 8006cb8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006cbc:	60a3      	str	r3, [r4, #8]

//  ADCx->JSQR = pHandle->wADC_JSQR_phAB;
  LL_ADC_INJ_StartConversionExtTrig(ADCx,LL_ADC_INJ_TRIG_EXT_RISING);

  return;
}
 8006cbe:	bc30      	pop	{r4, r5}
 8006cc0:	4770      	bx	lr
 8006cc2:	bf00      	nop

08006cc4 <RVBS_Clear>:
  {
#endif
    uint16_t aux;
    uint16_t index;

    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 8006cc4:	f8b0 c00c 	ldrh.w	ip, [r0, #12]
 8006cc8:	8a42      	ldrh	r2, [r0, #18]
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8006cca:	8943      	ldrh	r3, [r0, #10]
    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 8006ccc:	4494      	add	ip, r2
 8006cce:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
{
 8006cd2:	b430      	push	{r4, r5}
 8006cd4:	2500      	movs	r5, #0
 8006cd6:	f36c 050f 	bfi	r5, ip, #0, #16
 8006cda:	f36c 451f 	bfi	r5, ip, #16, #16
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8006cde:	b14b      	cbz	r3, 8006cf4 <RVBS_Clear+0x30>
    {
      pHandle->aBuffer[index] = aux;
 8006ce0:	6944      	ldr	r4, [r0, #20]
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	b29a      	uxth	r2, r3
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8006ce6:	3301      	adds	r3, #1
      pHandle->aBuffer[index] = aux;
 8006ce8:	f824 c012 	strh.w	ip, [r4, r2, lsl #1]
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8006cec:	8941      	ldrh	r1, [r0, #10]
 8006cee:	b29a      	uxth	r2, r3
 8006cf0:	4291      	cmp	r1, r2
 8006cf2:	d8f7      	bhi.n	8006ce4 <RVBS_Clear+0x20>
    }
    pHandle->_Super.LatestConv = aux;
    pHandle->_Super.AvBusVoltage_d = aux;
    pHandle->index = 0U;
 8006cf4:	2300      	movs	r3, #0
    pHandle->_Super.LatestConv = aux;
 8006cf6:	6045      	str	r5, [r0, #4]
    pHandle->index = 0U;
 8006cf8:	7643      	strb	r3, [r0, #25]
#ifdef NULL_PTR_CHECK_RDIV_BUS_VLT_SNS
  }
#endif
}
 8006cfa:	bc30      	pop	{r4, r5}
 8006cfc:	4770      	bx	lr
 8006cfe:	bf00      	nop

08006d00 <RVBS_Init>:
{
 8006d00:	b508      	push	{r3, lr}
    RVBS_Clear(pHandle);
 8006d02:	f7ff ffdf 	bl	8006cc4 <RVBS_Clear>
}
 8006d06:	bd08      	pop	{r3, pc}

08006d08 <RVBS_CheckFaultState>:
  }
  else
  {
#endif
	/* If both thresholds are equal, single threshold feature is used */
	if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 8006d08:	8982      	ldrh	r2, [r0, #12]
 8006d0a:	89c1      	ldrh	r1, [r0, #14]
	{
      if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 8006d0c:	88c3      	ldrh	r3, [r0, #6]
	if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 8006d0e:	428a      	cmp	r2, r1
 8006d10:	d010      	beq.n	8006d34 <RVBS_CheckFaultState+0x2c>
      }
	}
    else
    {
      /* If both thresholds are different, hysteresis feature is used (Brake mode) */
      if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 8006d12:	f8b0 c012 	ldrh.w	ip, [r0, #18]
 8006d16:	459c      	cmp	ip, r3
 8006d18:	d80a      	bhi.n	8006d30 <RVBS_CheckFaultState+0x28>
{
 8006d1a:	b410      	push	{r4}
      {
        fault = MC_UNDER_VOLT;
      }
      else if ( false == pHandle->OverVoltageHysteresisUpDir )
 8006d1c:	7c04      	ldrb	r4, [r0, #16]
 8006d1e:	b994      	cbnz	r4, 8006d46 <RVBS_CheckFaultState+0x3e>
      {
        if (pHandle->_Super.AvBusVoltage_d < pHandle->OverVoltageThresholdLow)
 8006d20:	4299      	cmp	r1, r3
 8006d22:	d914      	bls.n	8006d4e <RVBS_CheckFaultState+0x46>
        {
          pHandle->OverVoltageHysteresisUpDir = true;
 8006d24:	2301      	movs	r3, #1
 8006d26:	7403      	strb	r3, [r0, #16]
        {
          pHandle->OverVoltageHysteresisUpDir = false;
          fault = MC_OVER_VOLT;
        }
        else{
          fault = MC_NO_ERROR;
 8006d28:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_RDIV_BUS_VLT_SNS
  }
#endif
  return (fault);
}
 8006d2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d2e:	4770      	bx	lr
        fault = MC_UNDER_VOLT;
 8006d30:	2004      	movs	r0, #4
 8006d32:	4770      	bx	lr
      if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 8006d34:	429a      	cmp	r2, r3
 8006d36:	d30c      	bcc.n	8006d52 <RVBS_CheckFaultState+0x4a>
      else if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 8006d38:	8a40      	ldrh	r0, [r0, #18]
 8006d3a:	4298      	cmp	r0, r3
 8006d3c:	bf94      	ite	ls
 8006d3e:	2000      	movls	r0, #0
 8006d40:	2001      	movhi	r0, #1
 8006d42:	0080      	lsls	r0, r0, #2
 8006d44:	4770      	bx	lr
        if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 8006d46:	429a      	cmp	r2, r3
 8006d48:	d2ee      	bcs.n	8006d28 <RVBS_CheckFaultState+0x20>
          pHandle->OverVoltageHysteresisUpDir = false;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	7403      	strb	r3, [r0, #16]
          fault = MC_OVER_VOLT;
 8006d4e:	2002      	movs	r0, #2
 8006d50:	e7eb      	b.n	8006d2a <RVBS_CheckFaultState+0x22>
 8006d52:	2002      	movs	r0, #2
}
 8006d54:	4770      	bx	lr
 8006d56:	bf00      	nop

08006d58 <RVBS_CalcAvVbus>:
{
 8006d58:	b538      	push	{r3, r4, r5, lr}
    if (0xFFFFU == hAux)
 8006d5a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006d5e:	4299      	cmp	r1, r3
{
 8006d60:	4604      	mov	r4, r0
    if (0xFFFFU == hAux)
 8006d62:	d021      	beq.n	8006da8 <RVBS_CalcAvVbus+0x50>
      pHandle->aBuffer[pHandle->index] = hAux;
 8006d64:	6943      	ldr	r3, [r0, #20]
 8006d66:	7e45      	ldrb	r5, [r0, #25]
 8006d68:	f823 1015 	strh.w	r1, [r3, r5, lsl #1]
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 8006d6c:	f8b0 e00a 	ldrh.w	lr, [r0, #10]
 8006d70:	f01e 02ff 	ands.w	r2, lr, #255	@ 0xff
 8006d74:	d00d      	beq.n	8006d92 <RVBS_CalcAvVbus+0x3a>
 8006d76:	3a01      	subs	r2, #1
 8006d78:	b2d2      	uxtb	r2, r2
 8006d7a:	eb03 0042 	add.w	r0, r3, r2, lsl #1
 8006d7e:	3b02      	subs	r3, #2
      wtemp = 0u;
 8006d80:	2200      	movs	r2, #0
        wtemp += pHandle->aBuffer[i];
 8006d82:	f833 cf02 	ldrh.w	ip, [r3, #2]!
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 8006d86:	4298      	cmp	r0, r3
        wtemp += pHandle->aBuffer[i];
 8006d88:	4462      	add	r2, ip
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 8006d8a:	d1fa      	bne.n	8006d82 <RVBS_CalcAvVbus+0x2a>
      wtemp /= pHandle->LowPassFilterBW;
 8006d8c:	fbb2 f2fe 	udiv	r2, r2, lr
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 8006d90:	b292      	uxth	r2, r2
      if ((uint16_t)pHandle->index < (pHandle->LowPassFilterBW - 1U))
 8006d92:	f10e 3eff 	add.w	lr, lr, #4294967295
 8006d96:	4575      	cmp	r5, lr
        pHandle->index++;
 8006d98:	bf34      	ite	cc
 8006d9a:	3501      	addcc	r5, #1
        pHandle->index = 0U;
 8006d9c:	2300      	movcs	r3, #0
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 8006d9e:	80e2      	strh	r2, [r4, #6]
      pHandle->_Super.LatestConv = hAux;
 8006da0:	80a1      	strh	r1, [r4, #4]
        pHandle->index++;
 8006da2:	bf34      	ite	cc
 8006da4:	7665      	strbcc	r5, [r4, #25]
        pHandle->index = 0U;
 8006da6:	7663      	strbcs	r3, [r4, #25]
    pHandle->_Super.FaultState = RVBS_CheckFaultState(pHandle);
 8006da8:	4620      	mov	r0, r4
 8006daa:	f7ff ffad 	bl	8006d08 <RVBS_CheckFaultState>
 8006dae:	8120      	strh	r0, [r4, #8]
}
 8006db0:	bd38      	pop	{r3, r4, r5, pc}
 8006db2:	bf00      	nop

08006db4 <REMNG_Init>:
  }
  else
  {
#endif
    pHandle->Ext = 0;
    pHandle->TargetFinal = 0;
 8006db4:	2300      	movs	r3, #0
    pHandle->RampRemainingStep = 0U;
    pHandle->IncDecAmount = 0;
    pHandle->ScalingFactor = 1U;
 8006db6:	2201      	movs	r2, #1
    pHandle->TargetFinal = 0;
 8006db8:	e9c0 3301 	strd	r3, r3, [r0, #4]
    pHandle->IncDecAmount = 0;
 8006dbc:	e9c0 3303 	strd	r3, r3, [r0, #12]
    pHandle->ScalingFactor = 1U;
 8006dc0:	6142      	str	r2, [r0, #20]
#ifdef NULL_PTR_CHECK_RMP_EXT_MNG
  }
#endif
}
 8006dc2:	4770      	bx	lr

08006dc4 <REMNG_Calc>:
  else
  {
#endif
    int32_t current_ref;

    current_ref = pHandle->Ext;
 8006dc4:	e9d0 2102 	ldrd	r2, r1, [r0, #8]

    /* Update the variable and terminates the ramp if needed */
    if (pHandle->RampRemainingStep > 1U)
 8006dc8:	2901      	cmp	r1, #1
{
 8006dca:	b410      	push	{r4}
 8006dcc:	4603      	mov	r3, r0
      pHandle->RampRemainingStep --;
    }
    else if (1U == pHandle->RampRemainingStep)
    {
      /* Set the backup value of TargetFinal */
      current_ref = pHandle->TargetFinal * ((int32_t)pHandle->ScalingFactor);
 8006dce:	6944      	ldr	r4, [r0, #20]
    if (pHandle->RampRemainingStep > 1U)
 8006dd0:	d909      	bls.n	8006de6 <REMNG_Calc+0x22>
      current_ref += pHandle->IncDecAmount;
 8006dd2:	6900      	ldr	r0, [r0, #16]
      pHandle->RampRemainingStep --;
 8006dd4:	3901      	subs	r1, #1
      current_ref += pHandle->IncDecAmount;
 8006dd6:	4402      	add	r2, r0
      pHandle->RampRemainingStep --;
 8006dd8:	60d9      	str	r1, [r3, #12]
    {
      /* Do nothing */
    }

    pHandle->Ext = current_ref;
    ret_val = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 8006dda:	fb92 f0f4 	sdiv	r0, r2, r4
    pHandle->Ext = current_ref;
 8006dde:	609a      	str	r2, [r3, #8]
#ifdef NULL_PTR_CHECK_RMP_EXT_MNG
  }
#endif
  return (ret_val);
}
 8006de0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006de4:	4770      	bx	lr
    else if (1U == pHandle->RampRemainingStep)
 8006de6:	d005      	beq.n	8006df4 <REMNG_Calc+0x30>
    ret_val = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 8006de8:	fb92 f0f4 	sdiv	r0, r2, r4
}
 8006dec:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->Ext = current_ref;
 8006df0:	609a      	str	r2, [r3, #8]
}
 8006df2:	4770      	bx	lr
      current_ref = pHandle->TargetFinal * ((int32_t)pHandle->ScalingFactor);
 8006df4:	6840      	ldr	r0, [r0, #4]
 8006df6:	fb04 f200 	mul.w	r2, r4, r0
      pHandle->RampRemainingStep = 0U;
 8006dfa:	2100      	movs	r1, #0
}
 8006dfc:	f85d 4b04 	ldr.w	r4, [sp], #4
      pHandle->RampRemainingStep = 0U;
 8006e00:	60d9      	str	r1, [r3, #12]
    pHandle->Ext = current_ref;
 8006e02:	609a      	str	r2, [r3, #8]
}
 8006e04:	4770      	bx	lr
 8006e06:	bf00      	nop

08006e08 <REMNG_RampCompleted>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (0U == pHandle->RampRemainingStep)
 8006e08:	68c0      	ldr	r0, [r0, #12]
#ifdef NULL_PTR_CHECK_RMP_EXT_MNG
  }
#endif
  return (retVal);

}
 8006e0a:	fab0 f080 	clz	r0, r0
 8006e0e:	0940      	lsrs	r0, r0, #5
 8006e10:	4770      	bx	lr
 8006e12:	bf00      	nop

08006e14 <getScalingFactor>:
  int32_t aux;
  uint8_t i;

  if (Target < 0)
  {
    aux = -Target;
 8006e14:	2800      	cmp	r0, #0
 8006e16:	bfb8      	it	lt
 8006e18:	4240      	neglt	r0, r0
    TargetAbs = (uint32_t)Target;
  }
  for (i = 1U; i < 32U; i++)
  {
    uint32_t limit = (((uint32_t)1) << (31U - i));
    if (TargetAbs >= limit)
 8006e1a:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8006e1e:	d213      	bcs.n	8006e48 <getScalingFactor+0x34>
 8006e20:	2302      	movs	r3, #2
    uint32_t limit = (((uint32_t)1) << (31U - i));
 8006e22:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8006e26:	e001      	b.n	8006e2c <getScalingFactor+0x18>
  for (i = 1U; i < 32U; i++)
 8006e28:	2b20      	cmp	r3, #32
 8006e2a:	d00a      	beq.n	8006e42 <getScalingFactor+0x2e>
    uint32_t limit = (((uint32_t)1) << (31U - i));
 8006e2c:	fa2c f203 	lsr.w	r2, ip, r3
    if (TargetAbs >= limit)
 8006e30:	4290      	cmp	r0, r2
 8006e32:	4619      	mov	r1, r3
 8006e34:	f103 0301 	add.w	r3, r3, #1
 8006e38:	d3f6      	bcc.n	8006e28 <getScalingFactor+0x14>
    else
    {
      /* Nothing to do */
    }
  }
  return (((uint32_t)1) << (i - 1U));
 8006e3a:	3901      	subs	r1, #1
 8006e3c:	2001      	movs	r0, #1
 8006e3e:	4088      	lsls	r0, r1
 8006e40:	4770      	bx	lr
 8006e42:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8006e46:	4770      	bx	lr
    if (TargetAbs >= limit)
 8006e48:	2001      	movs	r0, #1
}
 8006e4a:	4770      	bx	lr

08006e4c <REMNG_ExecRamp>:
{
 8006e4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e50:	4604      	mov	r4, r0
 8006e52:	460e      	mov	r6, r1
    current_ref = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 8006e54:	6880      	ldr	r0, [r0, #8]
 8006e56:	6963      	ldr	r3, [r4, #20]
    if (0U == Durationms)
 8006e58:	4615      	mov	r5, r2
 8006e5a:	b962      	cbnz	r2, 8006e76 <REMNG_ExecRamp+0x2a>
      pHandle->ScalingFactor = getScalingFactor(TargetFinal);
 8006e5c:	4608      	mov	r0, r1
 8006e5e:	f7ff ffd9 	bl	8006e14 <getScalingFactor>
      pHandle->Ext = TargetFinal * ((int32_t)pHandle->ScalingFactor);
 8006e62:	fb00 f606 	mul.w	r6, r0, r6
      pHandle->ScalingFactor = getScalingFactor(TargetFinal);
 8006e66:	6160      	str	r0, [r4, #20]
      pHandle->Ext = TargetFinal * ((int32_t)pHandle->ScalingFactor);
 8006e68:	4628      	mov	r0, r5
      pHandle->IncDecAmount = 0;
 8006e6a:	e9c4 5003 	strd	r5, r0, [r4, #12]
      pHandle->Ext = TargetFinal * ((int32_t)pHandle->ScalingFactor);
 8006e6e:	60a6      	str	r6, [r4, #8]
}
 8006e70:	2001      	movs	r0, #1
 8006e72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    current_ref = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 8006e76:	fb90 f8f3 	sdiv	r8, r0, r3
      uint32_t wScalingFactor = getScalingFactor(TargetFinal - current_ref);
 8006e7a:	eba1 0708 	sub.w	r7, r1, r8
 8006e7e:	4638      	mov	r0, r7
 8006e80:	f7ff ffc8 	bl	8006e14 <getScalingFactor>
 8006e84:	4682      	mov	sl, r0
      uint32_t wScalingFactor2 = getScalingFactor(current_ref);
 8006e86:	4640      	mov	r0, r8
 8006e88:	f7ff ffc4 	bl	8006e14 <getScalingFactor>
 8006e8c:	4681      	mov	r9, r0
      uint32_t wScalingFactor3 = getScalingFactor(TargetFinal);
 8006e8e:	4630      	mov	r0, r6
 8006e90:	f7ff ffc0 	bl	8006e14 <getScalingFactor>
      if (wScalingFactor <  wScalingFactor2)
 8006e94:	45ca      	cmp	sl, r9
 8006e96:	d318      	bcc.n	8006eca <REMNG_ExecRamp+0x7e>
        if (wScalingFactor2 < wScalingFactor3)
 8006e98:	4548      	cmp	r0, r9
 8006e9a:	bf28      	it	cs
 8006e9c:	4648      	movcs	r0, r9
      pHandle->Ext = current_ref * ((int32_t)pHandle->ScalingFactor);
 8006e9e:	fb08 f300 	mul.w	r3, r8, r0
 8006ea2:	60a3      	str	r3, [r4, #8]
      aux = Durationms * ((uint32_t)pHandle->FrequencyHz); /* Check for overflow and use prescaler */
 8006ea4:	6823      	ldr	r3, [r4, #0]
      aux /= 1000U;
 8006ea6:	4a0b      	ldr	r2, [pc, #44]	@ (8006ed4 <REMNG_ExecRamp+0x88>)
      pHandle->ScalingFactor = wScalingFactorMin;
 8006ea8:	6160      	str	r0, [r4, #20]
      aux = Durationms * ((uint32_t)pHandle->FrequencyHz); /* Check for overflow and use prescaler */
 8006eaa:	fb05 f303 	mul.w	r3, r5, r3
      aux /= 1000U;
 8006eae:	fba2 2303 	umull	r2, r3, r2, r3
 8006eb2:	099b      	lsrs	r3, r3, #6
      pHandle->RampRemainingStep++;
 8006eb4:	1c5d      	adds	r5, r3, #1
      aux1 = (TargetFinal - current_ref) * ((int32_t)pHandle->ScalingFactor);
 8006eb6:	fb07 f000 	mul.w	r0, r7, r0
      pHandle->TargetFinal = TargetFinal;
 8006eba:	6066      	str	r6, [r4, #4]
      aux1 /= ((int32_t)pHandle->RampRemainingStep);
 8006ebc:	fb90 f0f5 	sdiv	r0, r0, r5
      pHandle->IncDecAmount = 0;
 8006ec0:	e9c4 5003 	strd	r5, r0, [r4, #12]
}
 8006ec4:	2001      	movs	r0, #1
 8006ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (wScalingFactor < wScalingFactor3)
 8006eca:	4550      	cmp	r0, sl
 8006ecc:	bf28      	it	cs
 8006ece:	4650      	movcs	r0, sl
 8006ed0:	e7e5      	b.n	8006e9e <REMNG_ExecRamp+0x52>
 8006ed2:	bf00      	nop
 8006ed4:	10624dd3 	.word	0x10624dd3

08006ed8 <RUC_Init>:
__weak void RUC_Init(RevUpCtrl_Handle_t *pHandle,
                     SpeednTorqCtrl_Handle_t *pSTC,
                     VirtualSpeedSensor_Handle_t *pVSS,
                     STO_Handle_t *pSNSL,
                     PWMC_Handle_t *pPWM)
{
 8006ed8:	b500      	push	{lr}
  {
#endif
    RevUpCtrl_PhaseParams_t *pRUCPhaseParams = &pHandle->ParamsData[0];
    uint8_t bPhase = 0U;

    pHandle->pSTC = pSTC;
 8006eda:	6681      	str	r1, [r0, #104]	@ 0x68
    pHandle->EnteredZone1 = false;

    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
    {
      /* Dump HF data for now HF data are forced to 16 bits */
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 8006edc:	6941      	ldr	r1, [r0, #20]
    pHandle->pSNSL = pSNSL;
 8006ede:	e9c0 231b 	strd	r2, r3, [r0, #108]	@ 0x6c
    pHandle->OTFSCLowside = false;
 8006ee2:	f04f 0c00 	mov.w	ip, #0
    pHandle->pPWM = pPWM;
 8006ee6:	9b01      	ldr	r3, [sp, #4]
    pHandle->OTFSCLowside = false;
 8006ee8:	f8a0 c054 	strh.w	ip, [r0, #84]	@ 0x54
    pHandle->pPWM = pPWM;
 8006eec:	6743      	str	r3, [r0, #116]	@ 0x74
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 8006eee:	b309      	cbz	r1, 8006f34 <RUC_Init+0x5c>
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 8006ef0:	688b      	ldr	r3, [r1, #8]
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 8006ef2:	b323      	cbz	r3, 8006f3e <RUC_Init+0x66>
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 8006ef4:	689b      	ldr	r3, [r3, #8]
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 8006ef6:	b32b      	cbz	r3, 8006f44 <RUC_Init+0x6c>
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 8006ef8:	689b      	ldr	r3, [r3, #8]
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 8006efa:	b333      	cbz	r3, 8006f4a <RUC_Init+0x72>
 8006efc:	689b      	ldr	r3, [r3, #8]
      bPhase++;
 8006efe:	f04f 0c05 	mov.w	ip, #5
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 8006f02:	b1cb      	cbz	r3, 8006f38 <RUC_Init+0x60>
 8006f04:	2204      	movs	r2, #4
 8006f06:	f04f 0c05 	mov.w	ip, #5
    {
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;

      pHandle->bPhaseNbr = bPhase;

      pHandle->bResetPLLTh = (uint8_t)((RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz) / 1000U);
 8006f0a:	8803      	ldrh	r3, [r0, #0]
 8006f0c:	4910      	ldr	r1, [pc, #64]	@ (8006f50 <RUC_Init+0x78>)
 8006f0e:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 8006f12:	fb0e f303 	mul.w	r3, lr, r3
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8006f16:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      pHandle->bResetPLLTh = (uint8_t)((RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz) / 1000U);
 8006f1a:	fba1 1303 	umull	r1, r3, r1, r3
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8006f1e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8006f22:	2100      	movs	r1, #0
      pHandle->bResetPLLTh = (uint8_t)((RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz) / 1000U);
 8006f24:	099b      	lsrs	r3, r3, #6
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8006f26:	6151      	str	r1, [r2, #20]
      pHandle->bPhaseNbr = bPhase;
 8006f28:	f880 c048 	strb.w	ip, [r0, #72]	@ 0x48
      pHandle->bResetPLLTh = (uint8_t)((RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz) / 1000U);
 8006f2c:	f880 3056 	strb.w	r3, [r0, #86]	@ 0x56
    }
#ifdef NULL_PTR_CHECK_REV_UP_CTL
  }
#endif
}
 8006f30:	f85d fb04 	ldr.w	pc, [sp], #4
      bPhase++;
 8006f34:	f04f 0c01 	mov.w	ip, #1
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8006f38:	f10c 32ff 	add.w	r2, ip, #4294967295
 8006f3c:	e7e5      	b.n	8006f0a <RUC_Init+0x32>
      bPhase++;
 8006f3e:	f04f 0c02 	mov.w	ip, #2
 8006f42:	e7f9      	b.n	8006f38 <RUC_Init+0x60>
 8006f44:	f04f 0c03 	mov.w	ip, #3
 8006f48:	e7f6      	b.n	8006f38 <RUC_Init+0x60>
 8006f4a:	f04f 0c04 	mov.w	ip, #4
 8006f4e:	e7f3      	b.n	8006f38 <RUC_Init+0x60>
 8006f50:	10624dd3 	.word	0x10624dd3

08006f54 <RUC_Clear>:
  * @param  pHandle: Pointer on Handle structure of RevUp controller.
  * @param  hMotorDirection: Rotor rotation direction.
  *         This parameter must be -1 or +1.
  */
__weak void RUC_Clear(RevUpCtrl_Handle_t *pHandle, int16_t hMotorDirection)
{
 8006f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    VirtualSpeedSensor_Handle_t *pVSS = pHandle->pVSS;
 8006f58:	6ec7      	ldr	r7, [r0, #108]	@ 0x6c
    SpeednTorqCtrl_Handle_t *pSTC = pHandle->pSTC;
 8006f5a:	f8d0 8068 	ldr.w	r8, [r0, #104]	@ 0x68
    RevUpCtrl_PhaseParams_t *pPhaseParams = pHandle->ParamsData;

    pHandle->hDirection = hMotorDirection;
 8006f5e:	80c1      	strh	r1, [r0, #6]
    pHandle->EnteredZone1 = false;

    /* Initializes the rev up stages counter */
    pHandle->bStageCnt = 0U;
 8006f60:	2600      	movs	r6, #0
{
 8006f62:	4604      	mov	r4, r0
    pHandle->bStageCnt = 0U;
 8006f64:	f880 6058 	strb.w	r6, [r0, #88]	@ 0x58
    pHandle->bOTFRelCounter = 0U;
 8006f68:	f880 6053 	strb.w	r6, [r0, #83]	@ 0x53
    pHandle->OTFSCLowside = false;
 8006f6c:	f8a0 6054 	strh.w	r6, [r0, #84]	@ 0x54

    /* Calls the clear method of VSS */
    VSS_Clear(pVSS);
 8006f70:	4638      	mov	r0, r7

    /* Sets the STC in torque mode */
    STC_SetControlMode(pSTC, MCM_TORQUE_MODE);

    /* Sets the mechanical starting angle of VSS */
    VSS_SetMecAngle(pVSS, pHandle->hStartingMecAngle * hMotorDirection);
 8006f72:	b28d      	uxth	r5, r1
    VSS_Clear(pVSS);
 8006f74:	f000 fc78 	bl	8007868 <VSS_Clear>
    STC_SetControlMode(pSTC, MCM_TORQUE_MODE);
 8006f78:	2104      	movs	r1, #4
 8006f7a:	4640      	mov	r0, r8
 8006f7c:	f000 f906 	bl	800718c <STC_SetControlMode>
    VSS_SetMecAngle(pVSS, pHandle->hStartingMecAngle * hMotorDirection);
 8006f80:	8861      	ldrh	r1, [r4, #2]
 8006f82:	fb11 f105 	smulbb	r1, r1, r5
 8006f86:	b209      	sxth	r1, r1
 8006f88:	4638      	mov	r0, r7
 8006f8a:	f000 fd23 	bl	80079d4 <VSS_SetMecAngle>

    /* Sets to zero the starting torque of STC */
    (void)STC_ExecRamp(pSTC, 0, 0U);
 8006f8e:	4632      	mov	r2, r6
 8006f90:	4631      	mov	r1, r6
 8006f92:	4640      	mov	r0, r8
 8006f94:	f000 f8fe 	bl	8007194 <STC_ExecRamp>

    /* Gives the first command to STC and VSS */
    (void)STC_ExecRamp(pSTC, pPhaseParams->hFinalTorque * hMotorDirection, (uint32_t)(pPhaseParams->hDurationms));
 8006f98:	8a21      	ldrh	r1, [r4, #16]
 8006f9a:	89a2      	ldrh	r2, [r4, #12]
 8006f9c:	fb11 f105 	smulbb	r1, r1, r5
 8006fa0:	b209      	sxth	r1, r1
 8006fa2:	4640      	mov	r0, r8
 8006fa4:	f000 f8f6 	bl	8007194 <STC_ExecRamp>

    VSS_SetMecAcceleration(pVSS, pPhaseParams->hFinalMecSpeedUnit * hMotorDirection, pPhaseParams->hDurationms);
 8006fa8:	89e1      	ldrh	r1, [r4, #14]
 8006faa:	89a2      	ldrh	r2, [r4, #12]
 8006fac:	fb11 f105 	smulbb	r1, r1, r5
 8006fb0:	b209      	sxth	r1, r1
 8006fb2:	4638      	mov	r0, r7
 8006fb4:	f000 fd16 	bl	80079e4 <VSS_SetMecAcceleration>

    /* Compute hPhaseRemainingTicks */
    pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pPhaseParams->hDurationms)
 8006fb8:	89a3      	ldrh	r3, [r4, #12]
                                              * ((uint32_t)pHandle->hRUCFrequencyHz))
 8006fba:	8821      	ldrh	r1, [r4, #0]
                                              / 1000U );
 8006fbc:	4a06      	ldr	r2, [pc, #24]	@ (8006fd8 <RUC_Clear+0x84>)

    /* Set the next phases parameter pointer */
    pHandle->pCurrentPhaseParams = (RevUpCtrl_PhaseParams_t *)pPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5

    /* Timeout counter for PLL reset during OTF */
    pHandle->bResetPLLCnt = 0U;
 8006fbe:	f884 6057 	strb.w	r6, [r4, #87]	@ 0x57
                                              * ((uint32_t)pHandle->hRUCFrequencyHz))
 8006fc2:	fb01 f303 	mul.w	r3, r1, r3
                                              / 1000U );
 8006fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8006fca:	099b      	lsrs	r3, r3, #6
    pHandle->pCurrentPhaseParams = (RevUpCtrl_PhaseParams_t *)pPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 8006fcc:	6962      	ldr	r2, [r4, #20]
 8006fce:	60a2      	str	r2, [r4, #8]
    pHandle->hPhaseRemainingTicks++;
 8006fd0:	3301      	adds	r3, #1
 8006fd2:	80a3      	strh	r3, [r4, #4]
#ifdef NULL_PTR_CHECK_REV_UP_CTL
  }
#endif
}
 8006fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fd8:	10624dd3 	.word	0x10624dd3

08006fdc <RUC_Exec>:
    retVal = false;
  }
  else
  {
#endif
    if (pHandle->hPhaseRemainingTicks > 0U)
 8006fdc:	8883      	ldrh	r3, [r0, #4]
{
 8006fde:	b510      	push	{r4, lr}
 8006fe0:	4604      	mov	r4, r0
    if (pHandle->hPhaseRemainingTicks > 0U)
 8006fe2:	bb43      	cbnz	r3, 8007036 <RUC_Exec+0x5a>
      /* Nothing to do */
    }

    if (0U == pHandle->hPhaseRemainingTicks)
    {
      if (pHandle->pCurrentPhaseParams != MC_NULL)
 8006fe4:	68a0      	ldr	r0, [r4, #8]
 8006fe6:	b328      	cbz	r0, 8007034 <RUC_Exec+0x58>
      {
        /* If it becomes zero the current phase has been completed */
        /* Gives the next command to STC and VSS */
        (void)STC_ExecRamp(pHandle->pSTC, pHandle->pCurrentPhaseParams->hFinalTorque * pHandle->hDirection,
 8006fe8:	8881      	ldrh	r1, [r0, #4]
 8006fea:	88e3      	ldrh	r3, [r4, #6]
 8006fec:	8802      	ldrh	r2, [r0, #0]
 8006fee:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 8006ff0:	fb11 f103 	smulbb	r1, r1, r3
 8006ff4:	b209      	sxth	r1, r1
 8006ff6:	f000 f8cd 	bl	8007194 <STC_ExecRamp>
                           (uint32_t)(pHandle->pCurrentPhaseParams->hDurationms));

        VSS_SetMecAcceleration(pHandle->pVSS,
                               pHandle->pCurrentPhaseParams->hFinalMecSpeedUnit * pHandle->hDirection,
 8006ffa:	68a3      	ldr	r3, [r4, #8]
 8006ffc:	88e0      	ldrh	r0, [r4, #6]
 8006ffe:	8859      	ldrh	r1, [r3, #2]
        VSS_SetMecAcceleration(pHandle->pVSS,
 8007000:	881a      	ldrh	r2, [r3, #0]
                               pHandle->pCurrentPhaseParams->hFinalMecSpeedUnit * pHandle->hDirection,
 8007002:	fb11 f100 	smulbb	r1, r1, r0
        VSS_SetMecAcceleration(pHandle->pVSS,
 8007006:	b209      	sxth	r1, r1
 8007008:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 800700a:	f000 fceb 	bl	80079e4 <VSS_SetMecAcceleration>
                               pHandle->pCurrentPhaseParams->hDurationms);

        /* Compute hPhaseRemainingTicks */
        pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pHandle->pCurrentPhaseParams->hDurationms)
 800700e:	68a1      	ldr	r1, [r4, #8]
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 8007010:	8820      	ldrh	r0, [r4, #0]
        pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pHandle->pCurrentPhaseParams->hDurationms)
 8007012:	880b      	ldrh	r3, [r1, #0]
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 8007014:	4a0b      	ldr	r2, [pc, #44]	@ (8007044 <RUC_Exec+0x68>)
        pHandle->hPhaseRemainingTicks++;

        /* Set the next phases parameter pointer */
        pHandle->pCurrentPhaseParams = pHandle->pCurrentPhaseParams->pNext; //cstat !MISRAC2012-Rule-11.5
 8007016:	6889      	ldr	r1, [r1, #8]
 8007018:	60a1      	str	r1, [r4, #8]
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 800701a:	fb00 f303 	mul.w	r3, r0, r3
 800701e:	fba2 2303 	umull	r2, r3, r2, r3

        /* Increases the rev up stages counter */
        pHandle->bStageCnt++;
 8007022:	f894 2058 	ldrb.w	r2, [r4, #88]	@ 0x58
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 8007026:	099b      	lsrs	r3, r3, #6
        pHandle->hPhaseRemainingTicks++;
 8007028:	3301      	adds	r3, #1
        pHandle->bStageCnt++;
 800702a:	3201      	adds	r2, #1
        pHandle->hPhaseRemainingTicks++;
 800702c:	80a3      	strh	r3, [r4, #4]
        pHandle->bStageCnt++;
 800702e:	f884 2058 	strb.w	r2, [r4, #88]	@ 0x58
  bool retVal = true;
 8007032:	2001      	movs	r0, #1
    }
#ifdef NULL_PTR_CHECK_REV_UP_CTL
  }
#endif
  return (retVal);
}
 8007034:	bd10      	pop	{r4, pc}
      pHandle->hPhaseRemainingTicks--;
 8007036:	3b01      	subs	r3, #1
 8007038:	b29b      	uxth	r3, r3
 800703a:	8083      	strh	r3, [r0, #4]
    if (0U == pHandle->hPhaseRemainingTicks)
 800703c:	2b00      	cmp	r3, #0
 800703e:	d0d1      	beq.n	8006fe4 <RUC_Exec+0x8>
  bool retVal = true;
 8007040:	2001      	movs	r0, #1
}
 8007042:	bd10      	pop	{r4, pc}
 8007044:	10624dd3 	.word	0x10624dd3

08007048 <RUC_FirstAccelerationStageReached>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (pHandle->bStageCnt >= pHandle->bFirstAccelerationStage)
 8007048:	f890 2058 	ldrb.w	r2, [r0, #88]	@ 0x58
 800704c:	f890 0049 	ldrb.w	r0, [r0, #73]	@ 0x49
    }
#ifdef NULL_PTR_CHECK_REV_UP_CTL
  }
#endif
  return (retVal);
}
 8007050:	4282      	cmp	r2, r0
 8007052:	bf34      	ite	cc
 8007054:	2000      	movcc	r0, #0
 8007056:	2001      	movcs	r0, #1
 8007058:	4770      	bx	lr
 800705a:	bf00      	nop

0800705c <RUC_SetPhase>:
  }
  else
  {
#endif
    pHandle->ParamsData[phaseNumber].hFinalTorque = phaseData->hFinalTorque;
    pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit = phaseData->hFinalMecSpeedUnit;
 800705c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8007060:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8007064:	f8d2 c002 	ldr.w	ip, [r2, #2]
 8007068:	f8c3 c00e 	str.w	ip, [r3, #14]
    pHandle->ParamsData[phaseNumber].hDurationms = phaseData->hDurationms;
 800706c:	4618      	mov	r0, r3
 800706e:	8813      	ldrh	r3, [r2, #0]
 8007070:	8183      	strh	r3, [r0, #12]
#ifdef NULL_PTR_CHECK_REV_UP_CTL
  }
#endif
  return (retValue);
}
 8007072:	2001      	movs	r0, #1
 8007074:	4770      	bx	lr
 8007076:	bf00      	nop

08007078 <RUC_GetNumberOfPhases>:
#ifdef NULL_PTR_CHECK_REV_UP_CTL
  return ((MC_NULL == pHandle) ? 0U : (uint8_t)pHandle->bPhaseNbr);
#else
  return ((uint8_t)pHandle->bPhaseNbr);
#endif
}
 8007078:	f890 0048 	ldrb.w	r0, [r0, #72]	@ 0x48
 800707c:	4770      	bx	lr
 800707e:	bf00      	nop

08007080 <RUC_GetPhase>:
  }
  else
  {
#endif
    phaseData->hFinalTorque = (int16_t)pHandle->ParamsData[phaseNumber].hFinalTorque;
    phaseData->hFinalMecSpeedUnit = (int16_t)pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit;
 8007080:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8007084:	0089      	lsls	r1, r1, #2
 8007086:	f101 0308 	add.w	r3, r1, #8
 800708a:	4403      	add	r3, r0
    phaseData->hDurationms = (uint16_t)pHandle->ParamsData[phaseNumber].hDurationms;
 800708c:	4408      	add	r0, r1
    phaseData->hFinalMecSpeedUnit = (int16_t)pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit;
 800708e:	f8d3 3006 	ldr.w	r3, [r3, #6]
 8007092:	f8c2 3002 	str.w	r3, [r2, #2]
    phaseData->hDurationms = (uint16_t)pHandle->ParamsData[phaseNumber].hDurationms;
 8007096:	8983      	ldrh	r3, [r0, #12]
 8007098:	8013      	strh	r3, [r2, #0]
#ifdef NULL_PTR_CHECK_REV_UP_CTL
  }
#endif
  return (retValue);
}
 800709a:	2001      	movs	r0, #1
 800709c:	4770      	bx	lr
 800709e:	bf00      	nop

080070a0 <SPD_GetElAngle>:
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hElAngle);
#else
  return (pHandle->hElAngle);
#endif
}
 80070a0:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 80070a4:	4770      	bx	lr
 80070a6:	bf00      	nop

080070a8 <SPD_GetAvrgMecSpeedUnit>:
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hAvrMecSpeedUnit);
#else
  return (pHandle->hAvrMecSpeedUnit);
#endif
}
 80070a8:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 80070ac:	4770      	bx	lr
 80070ae:	bf00      	nop

080070b0 <SPD_GetInstElSpeedDpp>:
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->InstantaneousElSpeedDpp);
#else
  return (pHandle->InstantaneousElSpeedDpp);
#endif
}
 80070b0:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 80070b4:	4770      	bx	lr
 80070b6:	bf00      	nop

080070b8 <SPD_IsMecSpeedReliable>:
    bool SpeedError = false;

    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

    /* Compute absoulte value of mechanical speed */
    if (*pMecSpeedUnit < 0)
 80070b8:	f9b1 c000 	ldrsh.w	ip, [r1]
{
 80070bc:	4603      	mov	r3, r0
 80070be:	b510      	push	{r4, lr}
    {
      hAux = -(*pMecSpeedUnit);
 80070c0:	fa1f f18c 	uxth.w	r1, ip
    if (*pMecSpeedUnit < 0)
 80070c4:	f1bc 0f00 	cmp.w	ip, #0
      hAux = -(*pMecSpeedUnit);
 80070c8:	bfb8      	it	lt
 80070ca:	4249      	neglt	r1, r1
    else
    {
      /* Nothing to do */
    }

    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 80070cc:	f8b3 e016 	ldrh.w	lr, [r3, #22]
    uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 80070d0:	78c0      	ldrb	r0, [r0, #3]
    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 80070d2:	781a      	ldrb	r2, [r3, #0]
    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
 80070d4:	8a9c      	ldrh	r4, [r3, #20]
    {
      /* Nothing to do */
    }

    /* Compute absoulte value of mechanical acceleration */
    if (pHandle->hMecAccelUnitP < 0)
 80070d6:	f9b3 c012 	ldrsh.w	ip, [r3, #18]
      hAux = -(*pMecSpeedUnit);
 80070da:	bfb8      	it	lt
 80070dc:	b289      	uxthlt	r1, r1
    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 80070de:	458e      	cmp	lr, r1
 80070e0:	d816      	bhi.n	8007110 <SPD_IsMecSpeedReliable+0x58>
    {
      hAux = -(pHandle->hMecAccelUnitP);
 80070e2:	fa1f fe8c 	uxth.w	lr, ip
    if (pHandle->hMecAccelUnitP < 0)
 80070e6:	f1bc 0f00 	cmp.w	ip, #0
      hAux = -(pHandle->hMecAccelUnitP);
 80070ea:	bfb8      	it	lt
 80070ec:	f1ce 0e00 	rsblt	lr, lr, #0
    else
    {
      hAbsMecAccelUnitP = (uint16_t)pHandle->hMecAccelUnitP;
    }

    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 80070f0:	f8b3 c018 	ldrh.w	ip, [r3, #24]
      hAux = -(pHandle->hMecAccelUnitP);
 80070f4:	bfb8      	it	lt
 80070f6:	fa1f fe8e 	uxthlt.w	lr, lr
    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 80070fa:	45f4      	cmp	ip, lr
 80070fc:	d308      	bcc.n	8007110 <SPD_IsMecSpeedReliable+0x58>
    else
    {
      /* Nothing to do */
    }

    if (true == SpeedError)
 80070fe:	428c      	cmp	r4, r1
 8007100:	d306      	bcc.n	8007110 <SPD_IsMecSpeedReliable+0x58>
        /* Nothing to do */
      }
    }
    else
    {
      if (bSpeedErrorNumber < bMaximumSpeedErrorsNumber)
 8007102:	4290      	cmp	r0, r2
 8007104:	d809      	bhi.n	800711a <SPD_IsMecSpeedReliable+0x62>
      {
        /* Nothing to do */
      }
    }

    if (bSpeedErrorNumber == bMaximumSpeedErrorsNumber)
 8007106:	1a10      	subs	r0, r2, r0
    else
    {
      /* Nothing to do */
    }

    pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 8007108:	701a      	strb	r2, [r3, #0]
    if (bSpeedErrorNumber == bMaximumSpeedErrorsNumber)
 800710a:	bf18      	it	ne
 800710c:	2001      	movne	r0, #1
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  }
#endif
  return (SpeedSensorReliability);
}
 800710e:	bd10      	pop	{r4, pc}
      if (bSpeedErrorNumber < bMaximumSpeedErrorsNumber)
 8007110:	4290      	cmp	r0, r2
 8007112:	d9f8      	bls.n	8007106 <SPD_IsMecSpeedReliable+0x4e>
        bSpeedErrorNumber++;
 8007114:	3201      	adds	r2, #1
 8007116:	b2d2      	uxtb	r2, r2
 8007118:	e7f5      	b.n	8007106 <SPD_IsMecSpeedReliable+0x4e>
        bSpeedErrorNumber = 0u;
 800711a:	2200      	movs	r2, #0
    pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 800711c:	701a      	strb	r2, [r3, #0]
  bool SpeedSensorReliability = true;
 800711e:	2001      	movs	r0, #1
}
 8007120:	bd10      	pop	{r4, pc}
 8007122:	bf00      	nop

08007124 <SPD_GetS16Speed>:
  }
  else
  {
#endif
    int32_t wAux = (int32_t)pHandle->hAvrMecSpeedUnit;
    wAux *= INT16_MAX;
 8007124:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
    wAux /= (int16_t)pHandle->hMaxReliableMecSpeedUnit;
 8007128:	f9b0 2014 	ldrsh.w	r2, [r0, #20]
    wAux *= INT16_MAX;
 800712c:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
    wAux /= (int16_t)pHandle->hMaxReliableMecSpeedUnit;
 8007130:	fb93 f0f2 	sdiv	r0, r3, r2
    tempValue = (int16_t)wAux;
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  }
#endif
  return (tempValue);
}
 8007134:	b200      	sxth	r0, r0
 8007136:	4770      	bx	lr

08007138 <STC_Init>:
  {
#endif
    pHandle->PISpeed = pPI;
    pHandle->SPD = SPD_Handle;
    pHandle->Mode = pHandle->ModeDefault;
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 8007138:	f9b0 c02c 	ldrsh.w	ip, [r0, #44]	@ 0x2c
    pHandle->PISpeed = pPI;
 800713c:	6101      	str	r1, [r0, #16]
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 800713e:	f9b0 102e 	ldrsh.w	r1, [r0, #46]	@ 0x2e
    pHandle->SPD = SPD_Handle;
 8007142:	6142      	str	r2, [r0, #20]
{
 8007144:	b410      	push	{r4}
    pHandle->Mode = pHandle->ModeDefault;
 8007146:	f890 402a 	ldrb.w	r4, [r0, #42]	@ 0x2a
 800714a:	7004      	strb	r4, [r0, #0]
    pHandle->TargetFinal = 0;
 800714c:	2300      	movs	r3, #0
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 800714e:	ea4f 440c 	mov.w	r4, ip, lsl #16
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 8007152:	0409      	lsls	r1, r1, #16
 8007154:	e9c0 4101 	strd	r4, r1, [r0, #4]
    pHandle->TargetFinal = 0;
 8007158:	8043      	strh	r3, [r0, #2]
    pHandle->RampRemainingStep = 0U;
    pHandle->IncDecAmount = 0;
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 800715a:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->RampRemainingStep = 0U;
 800715e:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 8007160:	6183      	str	r3, [r0, #24]
}
 8007162:	4770      	bx	lr

08007164 <STC_SetSpeedSensor>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SPD = SPD_Handle;
 8007164:	6141      	str	r1, [r0, #20]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 8007166:	4770      	bx	lr

08007168 <STC_GetSpeedSensor>:
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  return ((MC_NULL ==  pHandle) ? MC_NULL : pHandle->SPD);
#else
  return (pHandle->SPD);
#endif
}
 8007168:	6940      	ldr	r0, [r0, #20]
 800716a:	4770      	bx	lr

0800716c <STC_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (MCM_SPEED_MODE == pHandle->Mode)
 800716c:	7803      	ldrb	r3, [r0, #0]
 800716e:	2b03      	cmp	r3, #3
 8007170:	d000      	beq.n	8007174 <STC_Clear+0x8>
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 8007172:	4770      	bx	lr
      PID_SetIntegralTerm(pHandle->PISpeed, 0);
 8007174:	6900      	ldr	r0, [r0, #16]
 8007176:	2100      	movs	r1, #0
 8007178:	f7fe bf84 	b.w	8006084 <PID_SetIntegralTerm>

0800717c <STC_GetMecSpeedRefUnit>:
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->SpeedRefUnitExt / 65536));
#else
  return ((int16_t)(pHandle->SpeedRefUnitExt / 65536));
#endif
#endif
}
 800717c:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8007180:	4770      	bx	lr
 8007182:	bf00      	nop

08007184 <STC_GetTorqueRef>:
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->TorqueRef / 65536));
#else
  return ((int16_t)(pHandle->TorqueRef / 65536));
#endif
#endif
}
 8007184:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
 8007188:	4770      	bx	lr
 800718a:	bf00      	nop

0800718c <STC_SetControlMode>:
  }
  else
  {
#endif
    pHandle->Mode = bMode;
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp */
 800718c:	2300      	movs	r3, #0
    pHandle->Mode = bMode;
 800718e:	7001      	strb	r1, [r0, #0]
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp */
 8007190:	60c3      	str	r3, [r0, #12]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 8007192:	4770      	bx	lr

08007194 <STC_ExecRamp>:
  * @ref EncAlignCtrl "Encoder Alignment Control",
  * @ref PositionControl "Position Control" loop or
  * speed regulation with @ref SpeedRegulatorPotentiometer Speed potentiometer.
  */
__weak bool STC_ExecRamp(SpeednTorqCtrl_Handle_t *pHandle, int16_t hTargetFinal, uint32_t hDurationms)
{
 8007194:	b570      	push	{r4, r5, r6, lr}
    uint32_t wAux;
    int32_t wAux1;
    int16_t hCurrentReference;

    /* Check if the hTargetFinal is out of the bound of application */
    if (MCM_TORQUE_MODE == pHandle->Mode)
 8007196:	7803      	ldrb	r3, [r0, #0]
 8007198:	2b04      	cmp	r3, #4
{
 800719a:	4604      	mov	r4, r0
 800719c:	460d      	mov	r5, r1
 800719e:	4616      	mov	r6, r2
    if (MCM_TORQUE_MODE == pHandle->Mode)
 80071a0:	d01d      	beq.n	80071de <STC_ExecRamp+0x4a>
#else
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt / 65536);
#endif

#ifdef CHECK_BOUNDARY
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxAppPositiveMecSpeedUnit)
 80071a2:	8bc3      	ldrh	r3, [r0, #30]
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt >> 16);
 80071a4:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxAppPositiveMecSpeedUnit)
 80071a8:	4299      	cmp	r1, r3
 80071aa:	dd01      	ble.n	80071b0 <STC_ExecRamp+0x1c>
 80071ac:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (allowedRange);
}
 80071ae:	bd70      	pop	{r4, r5, r6, pc}
      else if (hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit)
 80071b0:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	@ 0x24
 80071b4:	428b      	cmp	r3, r1
 80071b6:	dcf9      	bgt.n	80071ac <STC_ExecRamp+0x18>
      else if ((int32_t)hTargetFinal < (int32_t)pHandle->MinAppPositiveMecSpeedUnit)
 80071b8:	8c23      	ldrh	r3, [r4, #32]
 80071ba:	4299      	cmp	r1, r3
 80071bc:	da03      	bge.n	80071c6 <STC_ExecRamp+0x32>
        if (hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit)
 80071be:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	@ 0x22
 80071c2:	428b      	cmp	r3, r1
 80071c4:	dbf2      	blt.n	80071ac <STC_ExecRamp+0x18>
      if (0U == hDurationms)
 80071c6:	b9a6      	cbnz	r6, 80071f2 <STC_ExecRamp+0x5e>
        if (MCM_SPEED_MODE == pHandle->Mode)
 80071c8:	7823      	ldrb	r3, [r4, #0]
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 80071ca:	042d      	lsls	r5, r5, #16
        if (MCM_SPEED_MODE == pHandle->Mode)
 80071cc:	2b03      	cmp	r3, #3
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 80071ce:	bf0c      	ite	eq
 80071d0:	6065      	streq	r5, [r4, #4]
          pHandle->TorqueRef = ((int32_t)hTargetFinal) * 65536;
 80071d2:	60a5      	strne	r5, [r4, #8]
        pHandle->IncDecAmount = 0;
 80071d4:	2000      	movs	r0, #0
        pHandle->IncDecAmount = wAux1;
 80071d6:	61a0      	str	r0, [r4, #24]
        pHandle->RampRemainingStep++;
 80071d8:	60e6      	str	r6, [r4, #12]
        pHandle->IncDecAmount = wAux1;
 80071da:	2001      	movs	r0, #1
}
 80071dc:	bd70      	pop	{r4, r5, r6, pc}
      hCurrentReference = STC_GetTorqueRef(pHandle);
 80071de:	f7ff ffd1 	bl	8007184 <STC_GetTorqueRef>
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxPositiveTorque)
 80071e2:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 80071e4:	42ab      	cmp	r3, r5
 80071e6:	dbe1      	blt.n	80071ac <STC_ExecRamp+0x18>
      if ((int32_t)hTargetFinal < (int32_t)pHandle->MinNegativeTorque)
 80071e8:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	@ 0x28
 80071ec:	42ab      	cmp	r3, r5
 80071ee:	dcdd      	bgt.n	80071ac <STC_ExecRamp+0x18>
 80071f0:	e7e9      	b.n	80071c6 <STC_ExecRamp+0x32>
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 80071f2:	8ba3      	ldrh	r3, [r4, #28]
        wAux /= 1000U;
 80071f4:	4a06      	ldr	r2, [pc, #24]	@ (8007210 <STC_ExecRamp+0x7c>)
        pHandle->TargetFinal = hTargetFinal;
 80071f6:	8065      	strh	r5, [r4, #2]
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 80071f8:	fb06 f303 	mul.w	r3, r6, r3
        wAux /= 1000U;
 80071fc:	fba2 2303 	umull	r2, r3, r2, r3
        wAux1 = (((int32_t)hTargetFinal) - ((int32_t)hCurrentReference)) * 65536;
 8007200:	1a28      	subs	r0, r5, r0
        wAux /= 1000U;
 8007202:	099b      	lsrs	r3, r3, #6
        pHandle->RampRemainingStep++;
 8007204:	1c5e      	adds	r6, r3, #1
        wAux1 = (((int32_t)hTargetFinal) - ((int32_t)hCurrentReference)) * 65536;
 8007206:	0400      	lsls	r0, r0, #16
        wAux1 /= ((int32_t)pHandle->RampRemainingStep);
 8007208:	fb90 f0f6 	sdiv	r0, r0, r6
        pHandle->IncDecAmount = wAux1;
 800720c:	e7e3      	b.n	80071d6 <STC_ExecRamp+0x42>
 800720e:	bf00      	nop
 8007210:	10624dd3 	.word	0x10624dd3

08007214 <STC_StopRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->RampRemainingStep = 0U;
 8007214:	2300      	movs	r3, #0
 8007216:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 8007218:	6183      	str	r3, [r0, #24]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 800721a:	4770      	bx	lr

0800721c <STC_CalcTorqueReference>:
  * - Must be called at fixed time equal to hSTCFrequencyHz. It is called
  * passing as parameter the speed sensor used to perform the speed regulation.
  * - Called during START and ALIGNEMENT states of the MC state machine into MediumFrequencyTask.
  */
__weak int16_t STC_CalcTorqueReference(SpeednTorqCtrl_Handle_t *pHandle)
{
 800721c:	b538      	push	{r3, r4, r5, lr}
    int32_t wCurrentReference;
    int16_t hMeasuredSpeed;
    int16_t hTargetSpeed;
    int16_t hError;

    if (MCM_TORQUE_MODE == pHandle->Mode)
 800721e:	7802      	ldrb	r2, [r0, #0]
      wCurrentReference = pHandle->SpeedRefUnitExt;
    }

    /* Update the speed reference or the torque reference according to the mode
       and terminates the ramp if needed */
    if (pHandle->RampRemainingStep > 1U)
 8007220:	68c3      	ldr	r3, [r0, #12]
    if (MCM_TORQUE_MODE == pHandle->Mode)
 8007222:	2a04      	cmp	r2, #4
{
 8007224:	4604      	mov	r4, r0
    if (MCM_TORQUE_MODE == pHandle->Mode)
 8007226:	d012      	beq.n	800724e <STC_CalcTorqueReference+0x32>
    if (pHandle->RampRemainingStep > 1U)
 8007228:	2b01      	cmp	r3, #1
      wCurrentReference = pHandle->SpeedRefUnitExt;
 800722a:	6845      	ldr	r5, [r0, #4]
    if (pHandle->RampRemainingStep > 1U)
 800722c:	d908      	bls.n	8007240 <STC_CalcTorqueReference+0x24>
    {
      /* Increment/decrement the reference value */
      wCurrentReference += pHandle->IncDecAmount;
 800722e:	6981      	ldr	r1, [r0, #24]

      /* Decrement the number of remaining steps */
      pHandle->RampRemainingStep--;
 8007230:	3b01      	subs	r3, #1
      wCurrentReference += pHandle->IncDecAmount;
 8007232:	440d      	add	r5, r1
      pHandle->RampRemainingStep--;
 8007234:	60c3      	str	r3, [r0, #12]
    else
    {
      /* Do nothing */
    }

    if (MCM_SPEED_MODE == pHandle->Mode)
 8007236:	2a03      	cmp	r2, #3
 8007238:	d011      	beq.n	800725e <STC_CalcTorqueReference+0x42>
    else
    {
      pHandle->TorqueRef = wCurrentReference;
#ifndef FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hTorqueReference = (int16_t)(wCurrentReference >> 16);
 800723a:	1428      	asrs	r0, r5, #16
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
 800723c:	60a5      	str	r5, [r4, #8]
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (hTorqueReference);
}
 800723e:	bd38      	pop	{r3, r4, r5, pc}
    else if (1U == pHandle->RampRemainingStep)
 8007240:	d1f9      	bne.n	8007236 <STC_CalcTorqueReference+0x1a>
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 8007242:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
      pHandle->RampRemainingStep = 0U;
 8007246:	2300      	movs	r3, #0
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 8007248:	042d      	lsls	r5, r5, #16
      pHandle->RampRemainingStep = 0U;
 800724a:	60c3      	str	r3, [r0, #12]
 800724c:	e7f3      	b.n	8007236 <STC_CalcTorqueReference+0x1a>
    if (pHandle->RampRemainingStep > 1U)
 800724e:	2b01      	cmp	r3, #1
      wCurrentReference = pHandle->TorqueRef;
 8007250:	6885      	ldr	r5, [r0, #8]
    if (pHandle->RampRemainingStep > 1U)
 8007252:	d911      	bls.n	8007278 <STC_CalcTorqueReference+0x5c>
      wCurrentReference += pHandle->IncDecAmount;
 8007254:	6982      	ldr	r2, [r0, #24]
      pHandle->RampRemainingStep--;
 8007256:	3b01      	subs	r3, #1
      wCurrentReference += pHandle->IncDecAmount;
 8007258:	4415      	add	r5, r2
      pHandle->RampRemainingStep--;
 800725a:	60c3      	str	r3, [r0, #12]
    if (MCM_SPEED_MODE == pHandle->Mode)
 800725c:	e7ed      	b.n	800723a <STC_CalcTorqueReference+0x1e>
      hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit(pHandle->SPD);
 800725e:	6960      	ldr	r0, [r4, #20]
 8007260:	f7ff ff22 	bl	80070a8 <SPD_GetAvrgMecSpeedUnit>
      hError = hTargetSpeed - hMeasuredSpeed;
 8007264:	ebc0 4125 	rsb	r1, r0, r5, asr #16
      hTorqueReference = PI_Controller(pHandle->PISpeed, (int32_t)hError);
 8007268:	b209      	sxth	r1, r1
 800726a:	6920      	ldr	r0, [r4, #16]
 800726c:	f7fe ff3e 	bl	80060ec <PI_Controller>
      pHandle->SpeedRefUnitExt = wCurrentReference;
 8007270:	6065      	str	r5, [r4, #4]
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
 8007272:	0405      	lsls	r5, r0, #16
 8007274:	60a5      	str	r5, [r4, #8]
}
 8007276:	bd38      	pop	{r3, r4, r5, pc}
    else if (1U == pHandle->RampRemainingStep)
 8007278:	d1df      	bne.n	800723a <STC_CalcTorqueReference+0x1e>
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 800727a:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
      pHandle->RampRemainingStep = 0U;
 800727e:	2300      	movs	r3, #0
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 8007280:	042d      	lsls	r5, r5, #16
      pHandle->RampRemainingStep = 0U;
 8007282:	60c3      	str	r3, [r0, #12]
    if (MCM_SPEED_MODE == pHandle->Mode)
 8007284:	e7d9      	b.n	800723a <STC_CalcTorqueReference+0x1e>
 8007286:	bf00      	nop

08007288 <STC_GetMecSpeedRefUnitDefault>:
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  return ((MC_NULL == pHandle) ? 0 : pHandle->MecSpeedRefUnitDefault);
#else
  return (pHandle->MecSpeedRefUnitDefault);
#endif
}
 8007288:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	@ 0x2c
 800728c:	4770      	bx	lr
 800728e:	bf00      	nop

08007290 <STC_GetDefaultIqdref>:
    IqdRefDefault.d = 0;
  }
  else
  {
#endif
    IqdRefDefault.q = pHandle->TorqueRefDefault;
 8007290:	f8d0 302e 	ldr.w	r3, [r0, #46]	@ 0x2e
    IqdRefDefault.d = pHandle->IdrefDefault;
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (IqdRefDefault);
 8007294:	2200      	movs	r2, #0
 8007296:	b299      	uxth	r1, r3
 8007298:	f361 020f 	bfi	r2, r1, #0, #16
 800729c:	0c1b      	lsrs	r3, r3, #16
 800729e:	f363 421f 	bfi	r2, r3, #16, #16
{
 80072a2:	b082      	sub	sp, #8
}
 80072a4:	4610      	mov	r0, r2
 80072a6:	b002      	add	sp, #8
 80072a8:	4770      	bx	lr
 80072aa:	bf00      	nop

080072ac <STC_ForceSpeedReferenceToCurrentSpeed>:
  *
  * - Called during the CHARGE_BOOT_CAP, SWITCH_OVER and WAIT_STOP_MOTOR states of the MC state machine
  * into MediumFrequencyTask to initialize the speed reference.
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed(SpeednTorqCtrl_Handle_t *pHandle)
{
 80072ac:	b510      	push	{r4, lr}
 80072ae:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SpeedRefUnitExt = ((int32_t)SPD_GetAvrgMecSpeedUnit(pHandle->SPD)) * (int32_t)65536;
 80072b0:	6940      	ldr	r0, [r0, #20]
 80072b2:	f7ff fef9 	bl	80070a8 <SPD_GetAvrgMecSpeedUnit>
 80072b6:	0400      	lsls	r0, r0, #16
 80072b8:	6060      	str	r0, [r4, #4]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 80072ba:	bd10      	pop	{r4, pc}

080072bc <STO_PLL_CalcElAngle>:
  * @param  pInput: Pointer to the observer inputs structure.
  * @retval int16_t Rotor electrical angle (s16Degrees).
  */
//cstat !MISRAC2012-Rule-8.13
__weak int16_t STO_PLL_CalcElAngle(STO_PLL_Handle_t *pHandle, Observer_Inputs_t *pInputs)
{
 80072bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int16_t retValue;

  if ((MC_NULL == pHandle) || (MC_NULL == pInputs))
 80072c0:	4604      	mov	r4, r0
{
 80072c2:	b089      	sub	sp, #36	@ 0x24
  if ((MC_NULL == pHandle) || (MC_NULL == pInputs))
 80072c4:	2800      	cmp	r0, #0
 80072c6:	f000 80cf 	beq.w	8007468 <STO_PLL_CalcElAngle+0x1ac>
 80072ca:	2900      	cmp	r1, #0
 80072cc:	f000 80cf 	beq.w	800746e <STO_PLL_CalcElAngle+0x1b2>
    int16_t hIbeta_err;
    int16_t hRotor_Speed;
    int16_t hValfa;
    int16_t hVbeta;

    if (pHandle->wBemf_alfa_est > (((int32_t)pHandle->hF2) * INT16_MAX))
 80072d0:	f9b0 302e 	ldrsh.w	r3, [r0, #46]	@ 0x2e
 80072d4:	6e87      	ldr	r7, [r0, #104]	@ 0x68
 80072d6:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
 80072da:	429f      	cmp	r7, r3
 80072dc:	f340 80d1 	ble.w	8007482 <STO_PLL_CalcElAngle+0x1c6>
    {
      pHandle->wBemf_alfa_est = INT16_MAX * ((int32_t)pHandle->hF2);
 80072e0:	6683      	str	r3, [r0, #104]	@ 0x68
 80072e2:	461f      	mov	r7, r3
    {
      /* Nothing to do */
    }
#ifndef FULL_MISRA_C_COMPLIANCY_STO_PLL
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est >> pHandle->F2LOG);
 80072e4:	f8b4 511e 	ldrh.w	r5, [r4, #286]	@ 0x11e
#else
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est / pHandle->hF2);
#endif

    if (pHandle->wBemf_beta_est > (INT16_MAX * ((int32_t)pHandle->hF2)))
 80072e8:	6ee6      	ldr	r6, [r4, #108]	@ 0x6c
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est >> pHandle->F2LOG);
 80072ea:	fa47 f205 	asr.w	r2, r7, r5
    if (pHandle->wBemf_beta_est > (INT16_MAX * ((int32_t)pHandle->hF2)))
 80072ee:	42b3      	cmp	r3, r6
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est >> pHandle->F2LOG);
 80072f0:	9201      	str	r2, [sp, #4]
 80072f2:	fa0f fe82 	sxth.w	lr, r2
    if (pHandle->wBemf_beta_est > (INT16_MAX * ((int32_t)pHandle->hF2)))
 80072f6:	f2c0 80c1 	blt.w	800747c <STO_PLL_CalcElAngle+0x1c0>
    {
      pHandle->wBemf_beta_est = INT16_MAX * ((int32_t)pHandle->hF2);
    }
    else if (pHandle->wBemf_beta_est <= (-INT16_MAX * ((int32_t)pHandle->hF2)))
 80072fa:	425b      	negs	r3, r3
 80072fc:	429e      	cmp	r6, r3
 80072fe:	f340 80bd 	ble.w	800747c <STO_PLL_CalcElAngle+0x1c0>
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est >> pHandle->F2LOG);
#else
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est / pHandle->hF2);
#endif

    if (pHandle->Ialfa_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 8007302:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	@ 0x2c
 8007306:	f8d4 9060 	ldr.w	r9, [r4, #96]	@ 0x60
 800730a:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est >> pHandle->F2LOG);
 800730e:	fa46 f505 	asr.w	r5, r6, r5
    if (pHandle->Ialfa_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 8007312:	4599      	cmp	r9, r3
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est >> pHandle->F2LOG);
 8007314:	fa0f fc85 	sxth.w	ip, r5
    if (pHandle->Ialfa_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 8007318:	f340 80b9 	ble.w	800748e <STO_PLL_CalcElAngle+0x1d2>
    {
      pHandle->Ialfa_est = INT16_MAX * ((int32_t)pHandle->hF1);
 800731c:	6623      	str	r3, [r4, #96]	@ 0x60
 800731e:	4699      	mov	r9, r3
    else
    {
      /* Nothing to do */
    }

    if (pHandle->Ibeta_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 8007320:	f8d4 8064 	ldr.w	r8, [r4, #100]	@ 0x64
 8007324:	4543      	cmp	r3, r8
 8007326:	f2c0 80a6 	blt.w	8007476 <STO_PLL_CalcElAngle+0x1ba>
    {
      pHandle->Ibeta_est = INT16_MAX * ((int32_t)pHandle->hF1);
    }
    else if (pHandle->Ibeta_est <= (-INT16_MAX * ((int32_t)pHandle->hF1)))
 800732a:	425b      	negs	r3, r3
 800732c:	4598      	cmp	r8, r3
 800732e:	f340 80a2 	ble.w	8007476 <STO_PLL_CalcElAngle+0x1ba>
    hIbeta_err = (int16_t)(pHandle->Ibeta_est >> pHandle->F1LOG);
#else
    hIbeta_err = (int16_t)(pHandle->Ibeta_est / pHandle->hF1);
#endif

    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 8007332:	88c8      	ldrh	r0, [r1, #6]

    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.alpha;
 8007334:	f8b1 a008 	ldrh.w	sl, [r1, #8]
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 8007338:	888b      	ldrh	r3, [r1, #4]
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 800733a:	f8ad 0014 	strh.w	r0, [sp, #20]
    hValfa = (int16_t)(wAux >> 16); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
#else
    hValfa = (int16_t)(wAux / 65536);
#endif

    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.beta;
 800733e:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 8007342:	f8ad 3010 	strh.w	r3, [sp, #16]
    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.alpha;
 8007346:	f9b1 3000 	ldrsh.w	r3, [r1]
    hIalfa_err = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 800734a:	f8b4 211c 	ldrh.w	r2, [r4, #284]	@ 0x11c
    hAux = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
#else
    hAux = (int16_t)(pHandle->Ialfa_est / pHandle->hF1);
#endif

    wAux = ((int32_t)pHandle->hC1) * hAux;
 800734e:	f9b4 b020 	ldrsh.w	fp, [r4, #32]
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 8007352:	9904      	ldr	r1, [sp, #16]
    wAux = wAux * pHandle->hC6;
    wAux = pHandle->_Super.hElSpeedDpp * wAux;
    wBemf_beta_est_Next -= wAux;

    /* Calls the PLL blockset */
    pHandle->hBemf_alfa_est = hAux_Alfa;
 8007354:	f8a4 e070 	strh.w	lr, [r4, #112]	@ 0x70
    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.beta;
 8007358:	fb0a f000 	mul.w	r0, sl, r0
    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.alpha;
 800735c:	fb0a f303 	mul.w	r3, sl, r3
    hVbeta = ( int16_t ) ( wAux >> 16 ); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8007360:	1400      	asrs	r0, r0, #16
    hValfa = (int16_t)(wAux >> 16); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8007362:	141b      	asrs	r3, r3, #16
    hVbeta = ( int16_t ) ( wAux >> 16 ); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8007364:	9003      	str	r0, [sp, #12]
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 8007366:	9805      	ldr	r0, [sp, #20]
    hValfa = (int16_t)(wAux >> 16); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8007368:	9302      	str	r3, [sp, #8]
    hIalfa_err = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 800736a:	fa49 f302 	asr.w	r3, r9, r2
    hIbeta_err = (int16_t)(pHandle->Ibeta_est >> pHandle->F1LOG);
 800736e:	fa48 f202 	asr.w	r2, r8, r2
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 8007372:	eba2 0a00 	sub.w	sl, r2, r0
    wAux = ((int32_t)pHandle->hC1) * hAux;
 8007376:	fb12 f20b 	smulbb	r2, r2, fp
    wIbeta_est_Next = pHandle->Ibeta_est - wAux;
 800737a:	eba8 0202 	sub.w	r2, r8, r2
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 800737e:	1a59      	subs	r1, r3, r1
    wAux = ((int32_t)pHandle->hC2) * hIalfa_err;
 8007380:	f9b4 8022 	ldrsh.w	r8, [r4, #34]	@ 0x22
    wIalfa_est_Next += wAux;
 8007384:	9802      	ldr	r0, [sp, #8]
    pHandle->hBemf_beta_est = hAux_Beta;
 8007386:	f8a4 c072 	strh.w	ip, [r4, #114]	@ 0x72
    wAux = ((int32_t)pHandle->hC1) * hAux;
 800738a:	fb13 f30b 	smulbb	r3, r3, fp
    wIalfa_est_Next = pHandle->Ialfa_est - wAux;
 800738e:	eba9 0303 	sub.w	r3, r9, r3
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 8007392:	b209      	sxth	r1, r1
    wAux = ((int32_t)pHandle->hC5) * hValfa;
 8007394:	f9b4 9028 	ldrsh.w	r9, [r4, #40]	@ 0x28
    wIalfa_est_Next += wAux;
 8007398:	fb08 3301 	mla	r3, r8, r1, r3
    wIalfa_est_Next += wAux;
 800739c:	fb09 3300 	mla	r3, r9, r0, r3
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 80073a0:	fa0f fa8a 	sxth.w	sl, sl
    wIbeta_est_Next += wAux;
 80073a4:	9803      	ldr	r0, [sp, #12]
    wIbeta_est_Next += wAux;
 80073a6:	fb08 280a 	mla	r8, r8, sl, r2
    wIbeta_est_Next += wAux;
 80073aa:	fb09 8800 	mla	r8, r9, r0, r8
    wAux = ((int32_t)pHandle->hC4) * hIalfa_err;
 80073ae:	f9b4 0026 	ldrsh.w	r0, [r4, #38]	@ 0x26
    wAux = (int32_t)hAux_Beta >> pHandle->F3POW2; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 80073b2:	8e62      	ldrh	r2, [r4, #50]	@ 0x32
    wAux = wAux * pHandle->hC6;
 80073b4:	f9b4 902a 	ldrsh.w	r9, [r4, #42]	@ 0x2a
    wBemf_alfa_est_Next = pHandle->wBemf_alfa_est + wAux;
 80073b8:	fb01 7100 	mla	r1, r1, r0, r7
    wBemf_beta_est_Next = pHandle->wBemf_beta_est + wAux;
 80073bc:	fb00 600a 	mla	r0, r0, sl, r6
    wAux = ((int32_t)pHandle->hC3) * hAux_Alfa;
 80073c0:	f9b4 6024 	ldrsh.w	r6, [r4, #36]	@ 0x24
    wIalfa_est_Next -= wAux;
 80073c4:	fb06 371e 	mls	r7, r6, lr, r3
    wIbeta_est_Next -= wAux;
 80073c8:	fb06 861c 	mls	r6, r6, ip, r8
    wAux = (int32_t)hAux_Alfa >> pHandle->F3POW2; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 80073cc:	fa4e fe02 	asr.w	lr, lr, r2
    wAux = (int32_t)hAux_Beta >> pHandle->F3POW2; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 80073d0:	fa4c fc02 	asr.w	ip, ip, r2
    wAux = pHandle->_Super.hElSpeedDpp * wAux;
 80073d4:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
    wAux = wAux * pHandle->hC6;
 80073d8:	fb0e f309 	mul.w	r3, lr, r9
    wBemf_beta_est_Next -= wAux;
 80073dc:	fb03 0812 	mls	r8, r3, r2, r0

    if (0 == pHandle->hForcedDirection)
 80073e0:	f994 3124 	ldrsb.w	r3, [r4, #292]	@ 0x124
    wAux = wAux * pHandle->hC6;
 80073e4:	fb0c fc09 	mul.w	ip, ip, r9
    wBemf_alfa_est_Next += wAux;
 80073e8:	fb0c 1902 	mla	r9, ip, r2, r1
    if (0 == pHandle->hForcedDirection)
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d154      	bne.n	800749a <STO_PLL_CalcElAngle+0x1de>
    {
      /* We are in auxiliary mode, then rely on the speed detected */
      if(pHandle->_Super.hElSpeedDpp >= 0)
 80073f0:	2a00      	cmp	r2, #0
 80073f2:	f64f 7aff 	movw	sl, #65535	@ 0xffff
 80073f6:	bfa8      	it	ge
 80073f8:	f04f 0a01 	movge.w	sl, #1
  int16_t hAux1;
  int16_t hAux2;
  int16_t hOutput;
  Trig_Components Local_Components;

  Local_Components = MCM_Trig_Functions(pHandle->_Super.hElAngle);
 80073fc:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8007400:	f7f9 ffe0 	bl	80013c4 <MCM_Trig_Functions>
    hAux_Alfa = (int16_t)(hAux_Alfa * wDirection);
 8007404:	9b01      	ldr	r3, [sp, #4]
    hAux_Beta = (int16_t)(hAux_Beta * wDirection);
 8007406:	fb15 f50a 	smulbb	r5, r5, sl
    hAux_Alfa = (int16_t)(hAux_Alfa * wDirection);
 800740a:	fb13 f30a 	smulbb	r3, r3, sl
    hRotor_Speed = STO_ExecutePLL(pHandle, hAux_Alfa, -hAux_Beta);
 800740e:	426d      	negs	r5, r5

  /* Alfa & Beta BEMF multiplied by Cos & Sin */
  wAlfa_Sin_tmp = ((int32_t )hBemf_alfa_est) * ((int32_t )Local_Components.hSin);
  wBeta_Cos_tmp = ((int32_t )hBemf_beta_est) * ((int32_t )Local_Components.hCos);
 8007410:	fb10 f505 	smulbb	r5, r0, r5
  wAlfa_Sin_tmp = ((int32_t )hBemf_alfa_est) * ((int32_t )Local_Components.hSin);
 8007414:	fb10 f023 	smultb	r0, r0, r3
#else
  hAux2 = (int16_t)(wAlfa_Sin_tmp / 32768);
#endif

  /* Speed PI regulator */
  hOutput = PI_Controller(& pHandle->PIRegulator, (int32_t)(hAux1 ) - hAux2);
 8007418:	f340 31cf 	sbfx	r1, r0, #15, #16
 800741c:	f345 35cf 	sbfx	r5, r5, #15, #16
 8007420:	1a69      	subs	r1, r5, r1
 8007422:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 8007426:	f7fe fe61 	bl	80060ec <PI_Controller>
  uint8_t bBuffer_index = pHandle->Speed_Buffer_Index;
 800742a:	f894 30f4 	ldrb.w	r3, [r4, #244]	@ 0xf4
  if (bBuffer_index == pHandle->SpeedBufferSizeUnit)
 800742e:	f894 210e 	ldrb.w	r2, [r4, #270]	@ 0x10e
    pHandle->_Super.InstantaneousElSpeedDpp = hRotor_Speed;
 8007432:	8220      	strh	r0, [r4, #16]
  bBuffer_index++;
 8007434:	3301      	adds	r3, #1
 8007436:	b2db      	uxtb	r3, r3
  if (bBuffer_index == pHandle->SpeedBufferSizeUnit)
 8007438:	429a      	cmp	r2, r3
  pHandle->SpeedBufferOldestEl = pHandle->Speed_Buffer[bBuffer_index];
 800743a:	bf12      	itee	ne
 800743c:	461a      	movne	r2, r3
 800743e:	2200      	moveq	r2, #0
    bBuffer_index = 0U;
 8007440:	4613      	moveq	r3, r2
  pHandle->SpeedBufferOldestEl = pHandle->Speed_Buffer[bBuffer_index];
 8007442:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8007446:	f9b2 1074 	ldrsh.w	r1, [r2, #116]	@ 0x74
 800744a:	f8a4 110c 	strh.w	r1, [r4, #268]	@ 0x10c
  pHandle->Speed_Buffer[bBuffer_index] = hRotor_Speed;
 800744e:	f8a2 0074 	strh.w	r0, [r2, #116]	@ 0x74
  pHandle->Speed_Buffer_Index = bBuffer_index;
 8007452:	f884 30f4 	strb.w	r3, [r4, #244]	@ 0xf4
    pHandle->_Super.hElAngle += hRotor_Speed;
 8007456:	88a3      	ldrh	r3, [r4, #4]
    pHandle->Ialfa_est = wIalfa_est_Next;
 8007458:	6627      	str	r7, [r4, #96]	@ 0x60
    pHandle->_Super.hElAngle += hRotor_Speed;
 800745a:	4418      	add	r0, r3
    pHandle->Ibeta_est = wIbeta_est_Next;
 800745c:	e9c4 6919 	strd	r6, r9, [r4, #100]	@ 0x64
    pHandle->_Super.hElAngle += hRotor_Speed;
 8007460:	b200      	sxth	r0, r0
    pHandle->wBemf_beta_est = wBemf_beta_est_Next;
 8007462:	f8c4 806c 	str.w	r8, [r4, #108]	@ 0x6c
    pHandle->_Super.hElAngle += hRotor_Speed;
 8007466:	80a0      	strh	r0, [r4, #4]
}
 8007468:	b009      	add	sp, #36	@ 0x24
 800746a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    retValue = 0;
 800746e:	4608      	mov	r0, r1
}
 8007470:	b009      	add	sp, #36	@ 0x24
 8007472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pHandle->Ibeta_est = -INT16_MAX * ((int32_t)pHandle->hF1);
 8007476:	6663      	str	r3, [r4, #100]	@ 0x64
 8007478:	4698      	mov	r8, r3
 800747a:	e75a      	b.n	8007332 <STO_PLL_CalcElAngle+0x76>
      pHandle->wBemf_beta_est = (-INT16_MAX * ((int32_t)pHandle->hF2));
 800747c:	66e3      	str	r3, [r4, #108]	@ 0x6c
 800747e:	461e      	mov	r6, r3
 8007480:	e73f      	b.n	8007302 <STO_PLL_CalcElAngle+0x46>
    else if (pHandle->wBemf_alfa_est <= (-INT16_MAX * ((int32_t)pHandle->hF2)))
 8007482:	425a      	negs	r2, r3
 8007484:	4297      	cmp	r7, r2
      pHandle->wBemf_alfa_est = -INT16_MAX * ((int32_t)pHandle->hF2);
 8007486:	bfdc      	itt	le
 8007488:	6682      	strle	r2, [r0, #104]	@ 0x68
 800748a:	4617      	movle	r7, r2
 800748c:	e72a      	b.n	80072e4 <STO_PLL_CalcElAngle+0x28>
    else if (pHandle->Ialfa_est <= (-INT16_MAX * ((int32_t)pHandle->hF1)))
 800748e:	425a      	negs	r2, r3
 8007490:	4591      	cmp	r9, r2
      pHandle->Ialfa_est = -INT16_MAX * ((int32_t)pHandle->hF1);
 8007492:	bfdc      	itt	le
 8007494:	6622      	strle	r2, [r4, #96]	@ 0x60
 8007496:	4691      	movle	r9, r2
 8007498:	e742      	b.n	8007320 <STO_PLL_CalcElAngle+0x64>
    hAux_Alfa = (int16_t)(hAux_Alfa * wDirection);
 800749a:	fa1f fa83 	uxth.w	sl, r3
 800749e:	e7ad      	b.n	80073fc <STO_PLL_CalcElAngle+0x140>

080074a0 <STO_PLL_CalcAvrgMecSpeedUnit>:
{
 80074a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t i, bSpeedBufferSizeUnit = pHandle->SpeedBufferSizeUnit;
 80074a2:	f890 510e 	ldrb.w	r5, [r0, #270]	@ 0x10e
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 80074a6:	2d00      	cmp	r5, #0
 80074a8:	f000 8096 	beq.w	80075d8 <STO_PLL_CalcAvrgMecSpeedUnit+0x138>
 80074ac:	f100 0272 	add.w	r2, r0, #114	@ 0x72
 80074b0:	eb02 0445 	add.w	r4, r2, r5, lsl #1
 80074b4:	4613      	mov	r3, r2
    int32_t wAvrSpeed_dpp = (int32_t)0;
 80074b6:	f04f 0c00 	mov.w	ip, #0
      wAvrSpeed_dpp += (int32_t)(pHandle->Speed_Buffer[i]);
 80074ba:	f933 ef02 	ldrsh.w	lr, [r3, #2]!
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 80074be:	42a3      	cmp	r3, r4
      wAvrSpeed_dpp += (int32_t)(pHandle->Speed_Buffer[i]);
 80074c0:	44f4      	add	ip, lr
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 80074c2:	d1fa      	bne.n	80074ba <STO_PLL_CalcAvrgMecSpeedUnit+0x1a>
      wAvrSpeed_dpp = wAvrSpeed_dpp / ((int16_t)bSpeedBufferSizeUnit);
 80074c4:	fb9c fef5 	sdiv	lr, ip, r5
    int32_t wAvrQuadraticError = 0;
 80074c8:	f04f 0c00 	mov.w	ip, #0
      wError = ((int32_t)pHandle->Speed_Buffer[i]) - wAvrSpeed_dpp;
 80074cc:	f932 3f02 	ldrsh.w	r3, [r2, #2]!
 80074d0:	eba3 030e 	sub.w	r3, r3, lr
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 80074d4:	42a2      	cmp	r2, r4
      wAvrQuadraticError += wError;
 80074d6:	fb03 cc03 	mla	ip, r3, r3, ip
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 80074da:	d1f7      	bne.n	80074cc <STO_PLL_CalcAvrgMecSpeedUnit+0x2c>
    wAvrQuadraticError = wAvrQuadraticError / ((int16_t)bSpeedBufferSizeUnit);
 80074dc:	fbbc f4f5 	udiv	r4, ip, r5
    wAvrSquareSpeed = wAvrSpeed_dpp * wAvrSpeed_dpp;
 80074e0:	fb0e f30e 	mul.w	r3, lr, lr
    int64_t lAvrSquareSpeed = (int64_t)(wAvrSquareSpeed) * (int64_t)pHandle->VariancePercentage;
 80074e4:	17de      	asrs	r6, r3, #31
 80074e6:	f8b0 c110 	ldrh.w	ip, [r0, #272]	@ 0x110
    wAux = wAvrSpeed_dpp * ((int32_t)pHandle->_Super.hMeasurementFrequency);
 80074ea:	8b45      	ldrh	r5, [r0, #26]
    if (true == pHandle->EnableDualCheck) /* Do algorithm if it's enabled */
 80074ec:	f890 7104 	ldrb.w	r7, [r0, #260]	@ 0x104
    int64_t lAvrSquareSpeed = (int64_t)(wAvrSquareSpeed) * (int64_t)pHandle->VariancePercentage;
 80074f0:	fbac 2303 	umull	r2, r3, ip, r3
 80074f4:	fb0c 3306 	mla	r3, ip, r6, r3
    wAvrSquareSpeed = (int32_t)(lAvrSquareSpeed / (int64_t)128);
 80074f8:	09d2      	lsrs	r2, r2, #7
 80074fa:	ea42 6243 	orr.w	r2, r2, r3, lsl #25
    wAux = wAux * ((int32_t)pHandle->_Super.SpeedUnit);
 80074fe:	7883      	ldrb	r3, [r0, #2]
    wAux = wAvrSpeed_dpp * ((int32_t)pHandle->_Super.hMeasurementFrequency);
 8007500:	fb0e f505 	mul.w	r5, lr, r5
    if (wAvrQuadraticError < wAvrSquareSpeed)
 8007504:	42a2      	cmp	r2, r4
    wAux = wAux * ((int32_t)pHandle->_Super.SpeedUnit);
 8007506:	fb05 f303 	mul.w	r3, r5, r3
    if (wAvrQuadraticError < wAvrSquareSpeed)
 800750a:	bfd8      	it	le
 800750c:	2600      	movle	r6, #0
    wAux = wAux / ((int32_t)pHandle->_Super.DPPConvFactor);
 800750e:	69c5      	ldr	r5, [r0, #28]
 8007510:	fb93 f3f5 	sdiv	r3, r3, r5
    if (wAvrQuadraticError < wAvrSquareSpeed)
 8007514:	bfc8      	it	gt
 8007516:	2601      	movgt	r6, #1
    wAux = wAux / ((int16_t)pHandle->_Super.bElToMecRatio);
 8007518:	7845      	ldrb	r5, [r0, #1]
 800751a:	fb93 f3f5 	sdiv	r3, r3, r5
    *pMecSpeedUnit = (int16_t)wAux;
 800751e:	b21d      	sxth	r5, r3
 8007520:	800d      	strh	r5, [r1, #0]
    if (wAvrQuadraticError < wAvrSquareSpeed)
 8007522:	f880 60f5 	strb.w	r6, [r0, #245]	@ 0xf5
    pHandle->_Super.hAvrMecSpeedUnit = (int16_t)wAux;
 8007526:	8185      	strh	r5, [r0, #12]
    if (false == pHandle->IsAlgorithmConverged)
 8007528:	f890 60f8 	ldrb.w	r6, [r0, #248]	@ 0xf8
    if (true == pHandle->EnableDualCheck) /* Do algorithm if it's enabled */
 800752c:	b99f      	cbnz	r7, 8007556 <STO_PLL_CalcAvrgMecSpeedUnit+0xb6>
    if (false == pHandle->IsAlgorithmConverged)
 800752e:	b346      	cbz	r6, 8007582 <STO_PLL_CalcAvrgMecSpeedUnit+0xe2>
      if ((false == pHandle->IsSpeedReliable) || (false == bIs_Bemf_Consistent))
 8007530:	42a2      	cmp	r2, r4
 8007532:	dc23      	bgt.n	800757c <STO_PLL_CalcAvrgMecSpeedUnit+0xdc>
        pHandle->ReliabilityCounter++;
 8007534:	f890 30f7 	ldrb.w	r3, [r0, #247]	@ 0xf7
        if (pHandle->ReliabilityCounter >= pHandle->Reliability_hysteresys)
 8007538:	f890 2117 	ldrb.w	r2, [r0, #279]	@ 0x117
        pHandle->ReliabilityCounter++;
 800753c:	3301      	adds	r3, #1
 800753e:	b2db      	uxtb	r3, r3
        if (pHandle->ReliabilityCounter >= pHandle->Reliability_hysteresys)
 8007540:	429a      	cmp	r2, r3
        pHandle->ReliabilityCounter++;
 8007542:	f880 30f7 	strb.w	r3, [r0, #247]	@ 0xf7
        if (pHandle->ReliabilityCounter >= pHandle->Reliability_hysteresys)
 8007546:	d81c      	bhi.n	8007582 <STO_PLL_CalcAvrgMecSpeedUnit+0xe2>
          pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 8007548:	78c2      	ldrb	r2, [r0, #3]
 800754a:	7002      	strb	r2, [r0, #0]
          pHandle->ReliabilityCounter = 0U;
 800754c:	2300      	movs	r3, #0
 800754e:	f880 30f7 	strb.w	r3, [r0, #247]	@ 0xf7
}
 8007552:	4618      	mov	r0, r3
 8007554:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wAux = ((wAux < 0) ? (-wAux) : (wAux));
 8007556:	2b00      	cmp	r3, #0
      if (wAux < (int32_t)(pHandle->MaxAppPositiveMecSpeedUnit))
 8007558:	f8b0 511a 	ldrh.w	r5, [r0, #282]	@ 0x11a
      wAux = ((wAux < 0) ? (-wAux) : (wAux));
 800755c:	bfb8      	it	lt
 800755e:	425b      	neglt	r3, r3
      if (wAux < (int32_t)(pHandle->MaxAppPositiveMecSpeedUnit))
 8007560:	429d      	cmp	r5, r3
 8007562:	dc12      	bgt.n	800758a <STO_PLL_CalcAvrgMecSpeedUnit+0xea>
    bool bIs_Bemf_Consistent = false;
 8007564:	2500      	movs	r5, #0
    int32_t wEstBemfSq = 0;
 8007566:	462b      	mov	r3, r5
    int32_t wObsBemfSq = 0;
 8007568:	462f      	mov	r7, r5
      pHandle->Est_Bemf_Level = wEstBemfSq;
 800756a:	e9c0 733f 	strd	r7, r3, [r0, #252]	@ 0xfc
      pHandle->IsBemfConsistent = bIs_Bemf_Consistent;
 800756e:	f880 50f9 	strb.w	r5, [r0, #249]	@ 0xf9
    if (false == pHandle->IsAlgorithmConverged)
 8007572:	b136      	cbz	r6, 8007582 <STO_PLL_CalcAvrgMecSpeedUnit+0xe2>
      if ((false == pHandle->IsSpeedReliable) || (false == bIs_Bemf_Consistent))
 8007574:	42a2      	cmp	r2, r4
 8007576:	dddd      	ble.n	8007534 <STO_PLL_CalcAvrgMecSpeedUnit+0x94>
 8007578:	2d00      	cmp	r5, #0
 800757a:	d0db      	beq.n	8007534 <STO_PLL_CalcAvrgMecSpeedUnit+0x94>
        pHandle->ReliabilityCounter = 0U;
 800757c:	2300      	movs	r3, #0
 800757e:	f880 30f7 	strb.w	r3, [r0, #247]	@ 0xf7
}
 8007582:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        bAux = SPD_IsMecSpeedReliable (&pHandle->_Super, pMecSpeedUnit);
 8007586:	f7ff bd97 	b.w	80070b8 <SPD_IsMecSpeedReliable>
        wObsBemf = (int32_t)pHandle->hBemf_alfa_est;
 800758a:	f9b0 5070 	ldrsh.w	r5, [r0, #112]	@ 0x70
        wObsBemf = (int32_t)pHandle->hBemf_beta_est;
 800758e:	f9b0 7072 	ldrsh.w	r7, [r0, #114]	@ 0x72
        wObsBemfSq = wObsBemf * wObsBemf;
 8007592:	fb05 fc05 	mul.w	ip, r5, r5
        wEstBemfSq = (wEstBemf * ((int32_t)pHandle->BemfConsistencyGain)) / 64;
 8007596:	f890 5119 	ldrb.w	r5, [r0, #281]	@ 0x119
        wObsBemfSq += wObsBemf * wObsBemf;
 800759a:	fb07 c707 	mla	r7, r7, r7, ip
        wEstBemf = (wAux * 32767) / ((int16_t)pHandle->_Super.hMaxReliableMecSpeedUnit);
 800759e:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
 80075a2:	f9b0 c014 	ldrsh.w	ip, [r0, #20]
 80075a6:	fb93 f3fc 	sdiv	r3, r3, ip
        wEstBemfSq = (wEstBemf * ((int32_t)pHandle->BemfConsistencyGain)) / 64;
 80075aa:	fb03 f505 	mul.w	r5, r3, r5
 80075ae:	2d00      	cmp	r5, #0
 80075b0:	bfb8      	it	lt
 80075b2:	353f      	addlt	r5, #63	@ 0x3f
 80075b4:	11ad      	asrs	r5, r5, #6
        wEstBemfSq *= wEstBemf;
 80075b6:	fb05 f303 	mul.w	r3, r5, r3
        wEstBemfSqLo = wEstBemfSq - ((wEstBemfSq / 64) * ((int32_t)pHandle->BemfConsistencyCheck));
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	461d      	mov	r5, r3
 80075be:	f890 c118 	ldrb.w	ip, [r0, #280]	@ 0x118
 80075c2:	bfb8      	it	lt
 80075c4:	f103 053f 	addlt.w	r5, r3, #63	@ 0x3f
 80075c8:	11ad      	asrs	r5, r5, #6
 80075ca:	fb0c 3515 	mls	r5, ip, r5, r3
        if (wObsBemfSq > wEstBemfSqLo)
 80075ce:	42af      	cmp	r7, r5
 80075d0:	bfd4      	ite	le
 80075d2:	2500      	movle	r5, #0
 80075d4:	2501      	movgt	r5, #1
 80075d6:	e7c8      	b.n	800756a <STO_PLL_CalcAvrgMecSpeedUnit+0xca>
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 80075d8:	462c      	mov	r4, r5
 80075da:	462b      	mov	r3, r5
 80075dc:	462e      	mov	r6, r5
    int32_t wAvrSpeed_dpp = (int32_t)0;
 80075de:	46ae      	mov	lr, r5
 80075e0:	e781      	b.n	80074e6 <STO_PLL_CalcAvrgMecSpeedUnit+0x46>
 80075e2:	bf00      	nop

080075e4 <STO_PLL_CalcAvrgElSpeedDpp>:
    int16_t hIndexNew = (int16_t)pHandle->Speed_Buffer_Index;
 80075e4:	f890 20f4 	ldrb.w	r2, [r0, #244]	@ 0xf4
    int16_t hSpeedBufferSizeUnit = (int16_t)pHandle->SpeedBufferSizeUnit;
 80075e8:	f890 c10e 	ldrb.w	ip, [r0, #270]	@ 0x10e
    hBufferSizeDiff = hSpeedBufferSizeUnit - hSpeedBufferSizedpp;
 80075ec:	f890 110f 	ldrb.w	r1, [r0, #271]	@ 0x10f
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->SpeedBufferOldestEl;
 80075f0:	eb00 0342 	add.w	r3, r0, r2, lsl #1
{
 80075f4:	b410      	push	{r4}
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->SpeedBufferOldestEl;
 80075f6:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	@ 0x74
 80075fa:	f8d0 4108 	ldr.w	r4, [r0, #264]	@ 0x108
    hBufferSizeDiff = hSpeedBufferSizeUnit - hSpeedBufferSizedpp;
 80075fe:	ebac 0101 	sub.w	r1, ip, r1
 8007602:	b289      	uxth	r1, r1
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->SpeedBufferOldestEl;
 8007604:	4423      	add	r3, r4
    if (0 == hBufferSizeDiff)
 8007606:	b959      	cbnz	r1, 8007620 <STO_PLL_CalcAvrgElSpeedDpp+0x3c>
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->SpeedBufferOldestEl;
 8007608:	f9b0 210c 	ldrsh.w	r2, [r0, #268]	@ 0x10c
 800760c:	1a9b      	subs	r3, r3, r2
  wAvrSpeed_dpp = wSum >> pHandle->SpeedBufferSizeDppLOG;
 800760e:	f8b0 2120 	ldrh.w	r2, [r0, #288]	@ 0x120
    pHandle->DppBufferSum = wSum;
 8007612:	f8c0 3108 	str.w	r3, [r0, #264]	@ 0x108
  wAvrSpeed_dpp = wSum >> pHandle->SpeedBufferSizeDppLOG;
 8007616:	4113      	asrs	r3, r2
}
 8007618:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->_Super.hElSpeedDpp = (int16_t)wAvrSpeed_dpp;
 800761c:	81c3      	strh	r3, [r0, #14]
}
 800761e:	4770      	bx	lr
      hIndexOldTemp = hIndexNew + hBufferSizeDiff;
 8007620:	440a      	add	r2, r1
 8007622:	b291      	uxth	r1, r2
 8007624:	b212      	sxth	r2, r2
      if (hIndexOldTemp >= hSpeedBufferSizeUnit)
 8007626:	4594      	cmp	ip, r2
        hIndexOld = hIndexOldTemp - hSpeedBufferSizeUnit;
 8007628:	bfdc      	itt	le
 800762a:	eba1 010c 	suble.w	r1, r1, ip
 800762e:	b20a      	sxthle	r2, r1
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->Speed_Buffer[hIndexOld];
 8007630:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8007634:	f9b2 2074 	ldrsh.w	r2, [r2, #116]	@ 0x74
 8007638:	1a9b      	subs	r3, r3, r2
 800763a:	e7e8      	b.n	800760e <STO_PLL_CalcAvrgElSpeedDpp+0x2a>

0800763c <STO_PLL_Clear>:
{
 800763c:	b510      	push	{r4, lr}
  *
  */
static void STO_InitSpeedBuffer(STO_PLL_Handle_t * pHandle)
{
  uint8_t b_i;
  uint8_t bSpeedBufferSize = pHandle->SpeedBufferSizeUnit;
 800763e:	f890 210e 	ldrb.w	r2, [r0, #270]	@ 0x10e
    pHandle->Ialfa_est = (int32_t)0;
 8007642:	2100      	movs	r1, #0
    pHandle->Ibeta_est = (int32_t)0;
 8007644:	e9c0 1118 	strd	r1, r1, [r0, #96]	@ 0x60
    pHandle->wBemf_beta_est = (int32_t)0;
 8007648:	e9c0 111a 	strd	r1, r1, [r0, #104]	@ 0x68
    pHandle->Est_Bemf_Level = (int32_t)0;
 800764c:	e9c0 113f 	strd	r1, r1, [r0, #252]	@ 0xfc
{
 8007650:	4604      	mov	r4, r0
    pHandle->_Super.hElAngle = (int16_t)0;
 8007652:	8081      	strh	r1, [r0, #4]
    pHandle->_Super.hElSpeedDpp = (int16_t)0;
 8007654:	81c1      	strh	r1, [r0, #14]
    pHandle->ConsistencyCounter = 0u;
 8007656:	f8a0 10f6 	strh.w	r1, [r0, #246]	@ 0xf6
    pHandle->IsAlgorithmConverged = false;
 800765a:	f8a0 10f8 	strh.w	r1, [r0, #248]	@ 0xf8
    pHandle->DppBufferSum = (int32_t)0;
 800765e:	f8c0 1108 	str.w	r1, [r0, #264]	@ 0x108
    pHandle->ForceConvergency = false;
 8007662:	f8a0 1122 	strh.w	r1, [r0, #290]	@ 0x122

  /* Init speed buffer */
  for (b_i = 0U; b_i < bSpeedBufferSize; b_i++)
 8007666:	b11a      	cbz	r2, 8007670 <STO_PLL_Clear+0x34>
  {
    pHandle->Speed_Buffer[b_i] = (int16_t)0;
 8007668:	0052      	lsls	r2, r2, #1
 800766a:	3074      	adds	r0, #116	@ 0x74
 800766c:	f000 fb93 	bl	8007d96 <memset>
  }
  pHandle->Speed_Buffer_Index = 0U;
 8007670:	2100      	movs	r1, #0
 8007672:	f884 10f4 	strb.w	r1, [r4, #244]	@ 0xf4
  pHandle->SpeedBufferOldestEl = (int16_t)0;
 8007676:	f8a4 110c 	strh.w	r1, [r4, #268]	@ 0x10c
    PID_SetIntegralTerm(& pHandle->PIRegulator, (int32_t)0);
 800767a:	f104 0034 	add.w	r0, r4, #52	@ 0x34
}
 800767e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    PID_SetIntegralTerm(& pHandle->PIRegulator, (int32_t)0);
 8007682:	f7fe bcff 	b.w	8006084 <PID_SetIntegralTerm>
 8007686:	bf00      	nop

08007688 <STO_PLL_Init>:
{
 8007688:	b510      	push	{r4, lr}
    pHandle->ConsistencyCounter = pHandle->StartUpConsistThreshold;
 800768a:	f890 1116 	ldrb.w	r1, [r0, #278]	@ 0x116
    htempk = (int16_t)(C6_COMP_CONST1 / pHandle->hF2);
 800768e:	4b19      	ldr	r3, [pc, #100]	@ (80076f4 <STO_PLL_Init+0x6c>)
 8007690:	f9b0 e02e 	ldrsh.w	lr, [r0, #46]	@ 0x2e
    pHandle->ConsistencyCounter = pHandle->StartUpConsistThreshold;
 8007694:	f880 10f6 	strb.w	r1, [r0, #246]	@ 0xf6
    pHandle->EnableDualCheck = true;
 8007698:	2201      	movs	r2, #1
    pHandle->F3POW2 = 0U;
 800769a:	2100      	movs	r1, #0
    htempk = (int16_t)(C6_COMP_CONST1 / pHandle->hF2);
 800769c:	fb93 f3fe 	sdiv	r3, r3, lr
 80076a0:	b21b      	sxth	r3, r3
{
 80076a2:	4604      	mov	r4, r0
    pHandle->EnableDualCheck = true;
 80076a4:	f880 2104 	strb.w	r2, [r0, #260]	@ 0x104
    pHandle->F3POW2 = 0U;
 80076a8:	8641      	strh	r1, [r0, #50]	@ 0x32
    while (htempk != 0)
 80076aa:	b30b      	cbz	r3, 80076f0 <STO_PLL_Init+0x68>
    wAux = ((int32_t)1);
 80076ac:	4611      	mov	r1, r2
      htempk /= ((int16_t)2);
 80076ae:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    while (htempk != 0)
 80076b2:	f102 0c01 	add.w	ip, r2, #1
 80076b6:	105b      	asrs	r3, r3, #1
 80076b8:	4610      	mov	r0, r2
      wAux *= ((int32_t)2);
 80076ba:	ea4f 0141 	mov.w	r1, r1, lsl #1
    while (htempk != 0)
 80076be:	fa1f f28c 	uxth.w	r2, ip
 80076c2:	d1f4      	bne.n	80076ae <STO_PLL_Init+0x26>
    pHandle->hF3 = (int16_t)wAux;
 80076c4:	b20a      	sxth	r2, r1
 80076c6:	8660      	strh	r0, [r4, #50]	@ 0x32
    wAux = ((int32_t)(pHandle->hF2)) * pHandle->hF3;
 80076c8:	fb0e f102 	mul.w	r1, lr, r2
    pHandle->hC6 = (int16_t)(wAux / C6_COMP_CONST2);
 80076cc:	480a      	ldr	r0, [pc, #40]	@ (80076f8 <STO_PLL_Init+0x70>)
    pHandle->hF3 = (int16_t)wAux;
 80076ce:	8622      	strh	r2, [r4, #48]	@ 0x30
    pHandle->hC6 = (int16_t)(wAux / C6_COMP_CONST2);
 80076d0:	17cb      	asrs	r3, r1, #31
 80076d2:	fb80 0101 	smull	r0, r1, r0, r1
 80076d6:	ebc3 2321 	rsb	r3, r3, r1, asr #8
 80076da:	8563      	strh	r3, [r4, #42]	@ 0x2a
    STO_PLL_Clear(pHandle);
 80076dc:	4620      	mov	r0, r4
 80076de:	f7ff ffad 	bl	800763c <STO_PLL_Clear>
    PID_HandleInit(&pHandle->PIRegulator);
 80076e2:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 80076e6:	f7fe fcb9 	bl	800605c <PID_HandleInit>
    pHandle->_Super.hMecAccelUnitP = 0;
 80076ea:	2300      	movs	r3, #0
 80076ec:	8263      	strh	r3, [r4, #18]
}
 80076ee:	bd10      	pop	{r4, pc}
 80076f0:	4671      	mov	r1, lr
 80076f2:	e7eb      	b.n	80076cc <STO_PLL_Init+0x44>
 80076f4:	000fea5e 	.word	0x000fea5e
 80076f8:	06488dc5 	.word	0x06488dc5

080076fc <STO_PLL_IsObserverConverged>:
    int32_t wtemp;
    int16_t hEstimatedSpeedUnit;
    int16_t hUpperThreshold;
    int16_t hLowerThreshold;

    if (true == pHandle->ForceConvergency2)
 80076fc:	f890 2123 	ldrb.w	r2, [r0, #291]	@ 0x123
{
 8007700:	4603      	mov	r3, r0
    if (true == pHandle->ForceConvergency2)
 8007702:	b112      	cbz	r2, 800770a <STO_PLL_IsObserverConverged+0xe>
    {
      *phForcedMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 8007704:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
 8007708:	800a      	strh	r2, [r1, #0]
    else
    {
      /* Nothing to do */
    }

    if (true == pHandle->ForceConvergency)
 800770a:	f893 0122 	ldrb.w	r0, [r3, #290]	@ 0x122
 800770e:	b128      	cbz	r0, 800771c <STO_PLL_IsObserverConverged+0x20>
    {
      bAux = true;
      pHandle->IsAlgorithmConverged = true;
 8007710:	2001      	movs	r0, #1
      pHandle->_Super.bSpeedErrorNumber = 0U;
 8007712:	2200      	movs	r2, #0
      pHandle->IsAlgorithmConverged = true;
 8007714:	f883 00f8 	strb.w	r0, [r3, #248]	@ 0xf8
      pHandle->_Super.bSpeedErrorNumber = 0U;
 8007718:	701a      	strb	r2, [r3, #0]
    }
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
  return (bAux);
}
 800771a:	4770      	bx	lr
      wtemp = ((int32_t)hEstimatedSpeedUnit) * ((int32_t)*phForcedMecSpeedUnit);
 800771c:	f9b1 2000 	ldrsh.w	r2, [r1]
      hEstimatedSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 8007720:	f9b3 c00c 	ldrsh.w	ip, [r3, #12]
{
 8007724:	b530      	push	{r4, r5, lr}
      wtemp = ((int32_t)hEstimatedSpeedUnit) * ((int32_t)*phForcedMecSpeedUnit);
 8007726:	fb0c fe02 	mul.w	lr, ip, r2
      if (wtemp > 0)
 800772a:	f1be 0f00 	cmp.w	lr, #0
      wtemp = ((int32_t)hEstimatedSpeedUnit) * ((int32_t)*phForcedMecSpeedUnit);
 800772e:	4614      	mov	r4, r2
      if (wtemp > 0)
 8007730:	dd38      	ble.n	80077a4 <STO_PLL_IsObserverConverged+0xa8>
        if (hEstimatedSpeedUnit < 0)
 8007732:	f1bc 0f00 	cmp.w	ip, #0
          hEstimatedSpeedUnit = -hEstimatedSpeedUnit;
 8007736:	bfbc      	itt	lt
 8007738:	f1cc 0c00 	rsblt	ip, ip, #0
 800773c:	fa0f fc8c 	sxthlt.w	ip, ip
        if (*phForcedMecSpeedUnit < 0)
 8007740:	2a00      	cmp	r2, #0
 8007742:	db34      	blt.n	80077ae <STO_PLL_IsObserverConverged+0xb2>
        if (true == pHandle->IsSpeedReliable)
 8007744:	f893 10f5 	ldrb.w	r1, [r3, #245]	@ 0xf5
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_H);
 8007748:	f893 e112 	ldrb.w	lr, [r3, #274]	@ 0x112
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_L);
 800774c:	f893 2113 	ldrb.w	r2, [r3, #275]	@ 0x113
        if (true == pHandle->IsSpeedReliable)
 8007750:	b349      	cbz	r1, 80077a6 <STO_PLL_IsObserverConverged+0xaa>
          if ((uint16_t)hEstimatedSpeedUnit > pHandle->MinStartUpValidSpeed)
 8007752:	f8b3 5114 	ldrh.w	r5, [r3, #276]	@ 0x114
 8007756:	fa1f f18c 	uxth.w	r1, ip
 800775a:	428d      	cmp	r5, r1
 800775c:	d223      	bcs.n	80077a6 <STO_PLL_IsObserverConverged+0xaa>
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_L);
 800775e:	fb04 f202 	mul.w	r2, r4, r2
        hLowerThreshold = (int16_t)(wAux / ((int32_t)16));
 8007762:	2a00      	cmp	r2, #0
 8007764:	bfb8      	it	lt
 8007766:	320f      	addlt	r2, #15
            if (hEstimatedSpeedUnit >= hLowerThreshold)
 8007768:	f342 120f 	sbfx	r2, r2, #4, #16
 800776c:	4594      	cmp	ip, r2
 800776e:	db1a      	blt.n	80077a6 <STO_PLL_IsObserverConverged+0xaa>
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_H);
 8007770:	fb04 fe0e 	mul.w	lr, r4, lr
        hUpperThreshold = (int16_t)(wAux / ((int32_t)16));
 8007774:	f1be 0f00 	cmp.w	lr, #0
 8007778:	bfb8      	it	lt
 800777a:	f10e 0e0f 	addlt.w	lr, lr, #15
              if (hEstimatedSpeedUnit <= hUpperThreshold)
 800777e:	f34e 1e0f 	sbfx	lr, lr, #4, #16
 8007782:	45f4      	cmp	ip, lr
 8007784:	dc0f      	bgt.n	80077a6 <STO_PLL_IsObserverConverged+0xaa>
                pHandle->ConsistencyCounter++;
 8007786:	f893 20f6 	ldrb.w	r2, [r3, #246]	@ 0xf6
                if (pHandle->ConsistencyCounter >= pHandle->StartUpConsistThreshold)
 800778a:	f893 1116 	ldrb.w	r1, [r3, #278]	@ 0x116
                pHandle->ConsistencyCounter++;
 800778e:	3201      	adds	r2, #1
 8007790:	b2d2      	uxtb	r2, r2
                if (pHandle->ConsistencyCounter >= pHandle->StartUpConsistThreshold)
 8007792:	4291      	cmp	r1, r2
                pHandle->ConsistencyCounter++;
 8007794:	f883 20f6 	strb.w	r2, [r3, #246]	@ 0xf6
                if (pHandle->ConsistencyCounter >= pHandle->StartUpConsistThreshold)
 8007798:	d804      	bhi.n	80077a4 <STO_PLL_IsObserverConverged+0xa8>
      pHandle->IsAlgorithmConverged = true;
 800779a:	2001      	movs	r0, #1
      pHandle->_Super.bSpeedErrorNumber = 0U;
 800779c:	2200      	movs	r2, #0
      pHandle->IsAlgorithmConverged = true;
 800779e:	f883 00f8 	strb.w	r0, [r3, #248]	@ 0xf8
      pHandle->_Super.bSpeedErrorNumber = 0U;
 80077a2:	701a      	strb	r2, [r3, #0]
}
 80077a4:	bd30      	pop	{r4, r5, pc}
                pHandle->ConsistencyCounter = 0U;
 80077a6:	2200      	movs	r2, #0
 80077a8:	f883 20f6 	strb.w	r2, [r3, #246]	@ 0xf6
}
 80077ac:	bd30      	pop	{r4, r5, pc}
          *phForcedMecSpeedUnit = -*phForcedMecSpeedUnit;
 80077ae:	4252      	negs	r2, r2
 80077b0:	b212      	sxth	r2, r2
 80077b2:	800a      	strh	r2, [r1, #0]
        if (true == pHandle->IsSpeedReliable)
 80077b4:	f893 10f5 	ldrb.w	r1, [r3, #245]	@ 0xf5
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_H);
 80077b8:	f893 e112 	ldrb.w	lr, [r3, #274]	@ 0x112
 80077bc:	4614      	mov	r4, r2
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_L);
 80077be:	f893 2113 	ldrb.w	r2, [r3, #275]	@ 0x113
        if (true == pHandle->IsSpeedReliable)
 80077c2:	2900      	cmp	r1, #0
 80077c4:	d0ef      	beq.n	80077a6 <STO_PLL_IsObserverConverged+0xaa>
 80077c6:	e7c4      	b.n	8007752 <STO_PLL_IsObserverConverged+0x56>

080077c8 <STO_PLL_GetEstimatedBemf>:
    vaux.alpha = pHandle->hBemf_alfa_est;
    vaux.beta = pHandle->hBemf_beta_est;
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
  return (vaux);
 80077c8:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 80077ca:	2200      	movs	r2, #0
 80077cc:	b299      	uxth	r1, r3
 80077ce:	f361 020f 	bfi	r2, r1, #0, #16
 80077d2:	0c1b      	lsrs	r3, r3, #16
 80077d4:	f363 421f 	bfi	r2, r3, #16, #16
{
 80077d8:	b082      	sub	sp, #8
}
 80077da:	4610      	mov	r0, r2
 80077dc:	b002      	add	sp, #8
 80077de:	4770      	bx	lr

080077e0 <STO_PLL_GetEstimatedCurrent>:
  * 
  * @retval alphabeta_t State observer estimated stator current Ialpha-beta.
  */
//cstat !MISRAC2012-Rule-8.13
__weak alphabeta_t STO_PLL_GetEstimatedCurrent(STO_PLL_Handle_t *pHandle)
{
 80077e0:	4603      	mov	r3, r0
  iaux.beta = (int16_t)(pHandle->Ibeta_est / pHandle->hF1);
#endif
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
  return (iaux);
 80077e2:	2000      	movs	r0, #0
  iaux.alpha = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 80077e4:	f8b3 111c 	ldrh.w	r1, [r3, #284]	@ 0x11c
  iaux.beta = (int16_t)(pHandle->Ibeta_est >> pHandle->F1LOG);
 80077e8:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
  iaux.alpha = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 80077ec:	410a      	asrs	r2, r1
  return (iaux);
 80077ee:	410b      	asrs	r3, r1
 80077f0:	b292      	uxth	r2, r2
 80077f2:	f362 000f 	bfi	r0, r2, #0, #16
 80077f6:	b29b      	uxth	r3, r3
{
 80077f8:	b082      	sub	sp, #8
  return (iaux);
 80077fa:	f363 401f 	bfi	r0, r3, #16, #16
}
 80077fe:	b002      	add	sp, #8
 8007800:	4770      	bx	lr
 8007802:	bf00      	nop

08007804 <STO_PLL_GetObserverGains>:
    /* Nothing to do */
  }
  else
  {
#endif
    *phC2 = pHandle->hC2;
 8007804:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 8007808:	800b      	strh	r3, [r1, #0]
    *phC4 = pHandle->hC4;
 800780a:	f9b0 3026 	ldrsh.w	r3, [r0, #38]	@ 0x26
 800780e:	8013      	strh	r3, [r2, #0]
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
}
 8007810:	4770      	bx	lr
 8007812:	bf00      	nop

08007814 <STO_PLL_SetObserverGains>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hC2 = hhC1;
 8007814:	8441      	strh	r1, [r0, #34]	@ 0x22
    pHandle->hC4 = hhC2;
 8007816:	84c2      	strh	r2, [r0, #38]	@ 0x26
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
}
 8007818:	4770      	bx	lr
 800781a:	bf00      	nop

0800781c <STO_OTF_ResetPLL>:
  }
  else
  {
#endif
    STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    PID_SetIntegralTerm(&pHdl->PIRegulator, (int32_t)0);
 800781c:	6800      	ldr	r0, [r0, #0]
 800781e:	2100      	movs	r1, #0
 8007820:	3034      	adds	r0, #52	@ 0x34
 8007822:	f7fe bc2f 	b.w	8006084 <PID_SetIntegralTerm>
 8007826:	bf00      	nop

08007828 <STO_ResetPLL>:
    /* Nothing to do */
  }
  else
  {
#endif
    PID_SetIntegralTerm(&pHandle->PIRegulator, (int32_t)0);
 8007828:	2100      	movs	r1, #0
 800782a:	3034      	adds	r0, #52	@ 0x34
 800782c:	f7fe bc2a 	b.w	8006084 <PID_SetIntegralTerm>

08007830 <STO_PLL_GetEstimatedBemfLevel>:
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  return ((MC_NULL == pHandle) ? 0 : pHandle->Est_Bemf_Level);
#else
  return (pHandle->Est_Bemf_Level);
#endif
}
 8007830:	f8d0 0100 	ldr.w	r0, [r0, #256]	@ 0x100
 8007834:	4770      	bx	lr
 8007836:	bf00      	nop

08007838 <STO_PLL_GetObservedBemfLevel>:
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  return ((MC_NULL == pHandle) ? 0 : pHandle->Obs_Bemf_Level);
#else
  return (pHandle->Obs_Bemf_Level);
#endif
}
 8007838:	f8d0 00fc 	ldr.w	r0, [r0, #252]	@ 0xfc
 800783c:	4770      	bx	lr
 800783e:	bf00      	nop

08007840 <STO_PLL_IsVarianceTight>:
  }
  else
  {
#endif
    const STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    tempStatus = pHdl->IsSpeedReliable;
 8007840:	6803      	ldr	r3, [r0, #0]
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
  return (tempStatus);
}
 8007842:	f893 00f5 	ldrb.w	r0, [r3, #245]	@ 0xf5
 8007846:	4770      	bx	lr

08007848 <STO_PLL_ForceConvergency1>:
  }
  else
  {
#endif
    STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    pHdl->ForceConvergency = true;
 8007848:	6803      	ldr	r3, [r0, #0]
 800784a:	2201      	movs	r2, #1
 800784c:	f883 2122 	strb.w	r2, [r3, #290]	@ 0x122
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
}
 8007850:	4770      	bx	lr
 8007852:	bf00      	nop

08007854 <STO_PLL_ForceConvergency2>:
  }
  else
  {
#endif
    STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    pHdl->ForceConvergency2 = true;
 8007854:	6803      	ldr	r3, [r0, #0]
 8007856:	2201      	movs	r2, #1
 8007858:	f883 2123 	strb.w	r2, [r3, #291]	@ 0x123
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
}
 800785c:	4770      	bx	lr
 800785e:	bf00      	nop

08007860 <STO_SetDirection>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hForcedDirection = direction;
 8007860:	f880 1124 	strb.w	r1, [r0, #292]	@ 0x124
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
}
 8007864:	4770      	bx	lr
 8007866:	bf00      	nop

08007868 <VSS_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->_Super.bSpeedErrorNumber = 0U;
 8007868:	2300      	movs	r3, #0
    pHandle->hRemainingStep = 0U;
    pHandle->hElAngleAccu = 0;

    pHandle->bTransitionStarted = false;
    pHandle->bTransitionEnded = false;
    pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 800786a:	8ec2      	ldrh	r2, [r0, #54]	@ 0x36
    pHandle->_Super.bSpeedErrorNumber = 0U;
 800786c:	7003      	strb	r3, [r0, #0]
    pHandle->wElSpeedDpp32 = 0;
 800786e:	e9c0 3308 	strd	r3, r3, [r0, #32]
    pHandle->_Super.hElAngle = 0;
 8007872:	6043      	str	r3, [r0, #4]
    pHandle->_Super.hAvrMecSpeedUnit = 0;
 8007874:	60c3      	str	r3, [r0, #12]
    pHandle->_Super.hMecAccelUnitP = 0;
 8007876:	8243      	strh	r3, [r0, #18]
    pHandle->hRemainingStep = 0U;
 8007878:	8503      	strh	r3, [r0, #40]	@ 0x28
    pHandle->bTransitionStarted = false;
 800787a:	8583      	strh	r3, [r0, #44]	@ 0x2c
    pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 800787c:	85c2      	strh	r2, [r0, #46]	@ 0x2e
    pHandle->hElAngleAccu = 0;
 800787e:	6303      	str	r3, [r0, #48]	@ 0x30

    pHandle->bCopyObserver = false;
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
}
 8007880:	4770      	bx	lr
 8007882:	bf00      	nop

08007884 <VSS_Init>:
{
 8007884:	b508      	push	{r3, lr}
  VSS_Clear(pHandle);
 8007886:	f7ff ffef 	bl	8007868 <VSS_Clear>
}
 800788a:	bd08      	pop	{r3, pc}

0800788c <VSS_CalcElAngle>:
    int16_t hAngleDiff;
    int32_t wAux;
    int16_t hAngleCorr;
    int16_t hSignCorr = 1;

    if (true == pHandle->bCopyObserver)
 800788c:	f890 2033 	ldrb.w	r2, [r0, #51]	@ 0x33
{
 8007890:	4603      	mov	r3, r0
    if (true == pHandle->bCopyObserver)
 8007892:	b11a      	cbz	r2, 800789c <VSS_CalcElAngle+0x10>
    {
      hRetAngle = *(int16_t *)pInputVars_str;
 8007894:	f9b1 0000 	ldrsh.w	r0, [r1]
      {
        hRetAngle = pHandle->hElAngleAccu;
      }
    }

    pHandle->_Super.hElAngle = hRetAngle;
 8007898:	8098      	strh	r0, [r3, #4]
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
  return (hRetAngle);
}
 800789a:	4770      	bx	lr
{
 800789c:	b530      	push	{r4, r5, lr}
      pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 800789e:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 80078a2:	8e00      	ldrh	r0, [r0, #48]	@ 0x30
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 80078a4:	88dd      	ldrh	r5, [r3, #6]
      if (true == pHandle->bTransitionStarted)
 80078a6:	f893 402c 	ldrb.w	r4, [r3, #44]	@ 0x2c
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 80078aa:	785a      	ldrb	r2, [r3, #1]
 80078ac:	fb9c f2f2 	sdiv	r2, ip, r2
      pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 80078b0:	4460      	add	r0, ip
 80078b2:	fa1f fe80 	uxth.w	lr, r0
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 80078b6:	442a      	add	r2, r5
      pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 80078b8:	b200      	sxth	r0, r0
 80078ba:	8618      	strh	r0, [r3, #48]	@ 0x30
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 80078bc:	80da      	strh	r2, [r3, #6]
      if (true == pHandle->bTransitionStarted)
 80078be:	b1fc      	cbz	r4, 8007900 <VSS_CalcElAngle+0x74>
        if (0 == pHandle->hTransitionRemainingSteps)
 80078c0:	f9b3 202e 	ldrsh.w	r2, [r3, #46]	@ 0x2e
 80078c4:	b1f2      	cbz	r2, 8007904 <VSS_CalcElAngle+0x78>
          pHandle->hTransitionRemainingSteps--;
 80078c6:	3a01      	subs	r2, #1
 80078c8:	b212      	sxth	r2, r2
 80078ca:	85da      	strh	r2, [r3, #46]	@ 0x2e
          if (pHandle->_Super.hElSpeedDpp >= 0)
 80078cc:	f1bc 0f00 	cmp.w	ip, #0
            hAngleDiff = *(int16_t *)pInputVars_str - pHandle->hElAngleAccu;
 80078d0:	8809      	ldrh	r1, [r1, #0]
          if (pHandle->_Super.hElSpeedDpp >= 0)
 80078d2:	db26      	blt.n	8007922 <VSS_CalcElAngle+0x96>
            hAngleDiff = *(int16_t *)pInputVars_str - pHandle->hElAngleAccu;
 80078d4:	eba1 0e0e 	sub.w	lr, r1, lr
 80078d8:	fa0f fe8e 	sxth.w	lr, lr
 80078dc:	2501      	movs	r5, #1
          hAngleCorr = (int16_t)(wAux / pHandle->hTransitionSteps);
 80078de:	f9b3 4036 	ldrsh.w	r4, [r3, #54]	@ 0x36
          wAux = (int32_t)hAngleDiff * pHandle->hTransitionRemainingSteps;
 80078e2:	fb0e f202 	mul.w	r2, lr, r2
          if (hAngleDiff >= 0)
 80078e6:	f1be 0f00 	cmp.w	lr, #0
          hAngleCorr = (int16_t)(wAux / pHandle->hTransitionSteps);
 80078ea:	fb92 f2f4 	sdiv	r2, r2, r4
          hAngleCorr *= hSignCorr;
 80078ee:	fb12 f205 	smulbb	r2, r2, r5
 80078f2:	b292      	uxth	r2, r2
          if (hAngleDiff >= 0)
 80078f4:	db0e      	blt.n	8007914 <VSS_CalcElAngle+0x88>
            pHandle->bTransitionLocked = true;
 80078f6:	2001      	movs	r0, #1
            hRetAngle = *(int16_t *)pInputVars_str - hAngleCorr;
 80078f8:	1a8a      	subs	r2, r1, r2
            pHandle->bTransitionLocked = true;
 80078fa:	f883 0032 	strb.w	r0, [r3, #50]	@ 0x32
            hRetAngle = *(int16_t *)pInputVars_str - hAngleCorr;
 80078fe:	b210      	sxth	r0, r2
    pHandle->_Super.hElAngle = hRetAngle;
 8007900:	8098      	strh	r0, [r3, #4]
}
 8007902:	bd30      	pop	{r4, r5, pc}
          hRetAngle = *(int16_t *)pInputVars_str;
 8007904:	f9b1 0000 	ldrsh.w	r0, [r1]
          pHandle->_Super.bSpeedErrorNumber = 0U;
 8007908:	701a      	strb	r2, [r3, #0]
          pHandle->bTransitionEnded = true;
 800790a:	2401      	movs	r4, #1
 800790c:	f883 402d 	strb.w	r4, [r3, #45]	@ 0x2d
    pHandle->_Super.hElAngle = hRetAngle;
 8007910:	8098      	strh	r0, [r3, #4]
}
 8007912:	bd30      	pop	{r4, r5, pc}
            if (false == pHandle->bTransitionLocked)
 8007914:	f893 4032 	ldrb.w	r4, [r3, #50]	@ 0x32
 8007918:	2c00      	cmp	r4, #0
 800791a:	d0f1      	beq.n	8007900 <VSS_CalcElAngle+0x74>
              hRetAngle = *(int16_t *)pInputVars_str + hAngleCorr;
 800791c:	440a      	add	r2, r1
 800791e:	b210      	sxth	r0, r2
 8007920:	e7ee      	b.n	8007900 <VSS_CalcElAngle+0x74>
            hAngleDiff = pHandle->hElAngleAccu - *(int16_t *)pInputVars_str;
 8007922:	ebae 0e01 	sub.w	lr, lr, r1
 8007926:	fa0f fe8e 	sxth.w	lr, lr
 800792a:	f64f 75ff 	movw	r5, #65535	@ 0xffff
 800792e:	e7d6      	b.n	80078de <VSS_CalcElAngle+0x52>

08007930 <VSS_CalcAvrgMecSpeedUnit>:
    SpeedSensorReliability = false;
  }
  else
  {
#endif
    if (pHandle->hRemainingStep > 1u)
 8007930:	8d02      	ldrh	r2, [r0, #40]	@ 0x28
 8007932:	2a01      	cmp	r2, #1
{
 8007934:	4603      	mov	r3, r0
    if (pHandle->hRemainingStep > 1u)
 8007936:	d922      	bls.n	800797e <VSS_CalcAvrgMecSpeedUnit+0x4e>
{
 8007938:	b410      	push	{r4}
    {
      pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 800793a:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 800793c:	6a1c      	ldr	r4, [r3, #32]
      pHandle->_Super.hElSpeedDpp = (int16_t)(pHandle->wElSpeedDpp32 / 65536);
#endif

      /* Convert dpp into MecUnit */
      *hMecSpeedUnit = (int16_t)((((int32_t)pHandle->_Super.hElSpeedDpp)
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 800793e:	8b5a      	ldrh	r2, [r3, #26]
      pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 8007940:	4420      	add	r0, r4
      pHandle->_Super.hElSpeedDpp = (int16_t)(pHandle->wElSpeedDpp32 >> 16);
 8007942:	ea4f 4c20 	mov.w	ip, r0, asr #16
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 8007946:	69dc      	ldr	r4, [r3, #28]
      pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 8007948:	6258      	str	r0, [r3, #36]	@ 0x24
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 800794a:	fb0c f202 	mul.w	r2, ip, r2
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 800794e:	7858      	ldrb	r0, [r3, #1]
      pHandle->_Super.hElSpeedDpp = (int16_t)(pHandle->wElSpeedDpp32 >> 16);
 8007950:	f8a3 c00e 	strh.w	ip, [r3, #14]
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 8007954:	eb02 0282 	add.w	r2, r2, r2, lsl #2
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 8007958:	fb04 f000 	mul.w	r0, r4, r0
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 800795c:	0052      	lsls	r2, r2, #1
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 800795e:	fb92 f2f0 	sdiv	r2, r2, r0
      *hMecSpeedUnit = (int16_t)((((int32_t)pHandle->_Super.hElSpeedDpp)
 8007962:	b212      	sxth	r2, r2
 8007964:	800a      	strh	r2, [r1, #0]
      pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
      pHandle->hRemainingStep--;
 8007966:	8d18      	ldrh	r0, [r3, #40]	@ 0x28
      pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 8007968:	819a      	strh	r2, [r3, #12]
      pHandle->hRemainingStep--;
 800796a:	1e42      	subs	r2, r0, #1
    else
    {
      *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
    }
    /* If the transition is not done yet, we already know that speed is not reliable */
    if (false == pHandle->bTransitionEnded)
 800796c:	f893 002d 	ldrb.w	r0, [r3, #45]	@ 0x2d
      pHandle->hRemainingStep--;
 8007970:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (false == pHandle->bTransitionEnded)
 8007972:	b970      	cbnz	r0, 8007992 <VSS_CalcAvrgMecSpeedUnit+0x62>
    {
      pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 8007974:	78da      	ldrb	r2, [r3, #3]
 8007976:	701a      	strb	r2, [r3, #0]
    }
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
  return (SpeedSensorReliability);
}
 8007978:	f85d 4b04 	ldr.w	r4, [sp], #4
 800797c:	4770      	bx	lr
    else if (1U == pHandle->hRemainingStep)
 800797e:	d00d      	beq.n	800799c <VSS_CalcAvrgMecSpeedUnit+0x6c>
      *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 8007980:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
    if (false == pHandle->bTransitionEnded)
 8007984:	f893 002d 	ldrb.w	r0, [r3, #45]	@ 0x2d
      *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 8007988:	800a      	strh	r2, [r1, #0]
    if (false == pHandle->bTransitionEnded)
 800798a:	bb00      	cbnz	r0, 80079ce <VSS_CalcAvrgMecSpeedUnit+0x9e>
      pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 800798c:	78da      	ldrb	r2, [r3, #3]
 800798e:	701a      	strb	r2, [r3, #0]
}
 8007990:	4770      	bx	lr
 8007992:	f85d 4b04 	ldr.w	r4, [sp], #4
      SpeedSensorReliability = SPD_IsMecSpeedReliable(&pHandle->_Super, hMecSpeedUnit);
 8007996:	4618      	mov	r0, r3
 8007998:	f7ff bb8e 	b.w	80070b8 <SPD_IsMecSpeedReliable>
      *hMecSpeedUnit = pHandle->hFinalMecSpeedUnit;
 800799c:	f9b0 c02a 	ldrsh.w	ip, [r0, #42]	@ 0x2a
 80079a0:	f8a1 c000 	strh.w	ip, [r1]
                                          / (((int32_t)SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 80079a4:	8b42      	ldrh	r2, [r0, #26]
      pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)*hMecSpeedUnit) * ((int32_t)pHandle->_Super.DPPConvFactor))
 80079a6:	69c0      	ldr	r0, [r0, #28]
      pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 80079a8:	f8a3 c00c 	strh.w	ip, [r3, #12]
                                          / (((int32_t)SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 80079ac:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80079b0:	0052      	lsls	r2, r2, #1
      pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)*hMecSpeedUnit) * ((int32_t)pHandle->_Super.DPPConvFactor))
 80079b2:	fb00 f00c 	mul.w	r0, r0, ip
                                          / (((int32_t)SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 80079b6:	fb90 f0f2 	sdiv	r0, r0, r2
      pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 80079ba:	785a      	ldrb	r2, [r3, #1]
 80079bc:	fb12 f200 	smulbb	r2, r2, r0
      pHandle->hRemainingStep = 0U;
 80079c0:	2000      	movs	r0, #0
 80079c2:	8518      	strh	r0, [r3, #40]	@ 0x28
    if (false == pHandle->bTransitionEnded)
 80079c4:	f893 002d 	ldrb.w	r0, [r3, #45]	@ 0x2d
      pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 80079c8:	81da      	strh	r2, [r3, #14]
    if (false == pHandle->bTransitionEnded)
 80079ca:	2800      	cmp	r0, #0
 80079cc:	d0de      	beq.n	800798c <VSS_CalcAvrgMecSpeedUnit+0x5c>
      SpeedSensorReliability = SPD_IsMecSpeedReliable(&pHandle->_Super, hMecSpeedUnit);
 80079ce:	4618      	mov	r0, r3
 80079d0:	f7ff bb72 	b.w	80070b8 <SPD_IsMecSpeedReliable>

080079d4 <VSS_SetMecAngle>:
  }
  else
  {
#endif
    pHandle->hElAngleAccu = hMecAngle;
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 80079d4:	7843      	ldrb	r3, [r0, #1]
    pHandle->hElAngleAccu = hMecAngle;
 80079d6:	8601      	strh	r1, [r0, #48]	@ 0x30
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 80079d8:	fb91 f3f3 	sdiv	r3, r1, r3
    pHandle->_Super.hElAngle = hMecAngle;
 80079dc:	8081      	strh	r1, [r0, #4]
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 80079de:	80c3      	strh	r3, [r0, #6]
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
}
 80079e0:	4770      	bx	lr
 80079e2:	bf00      	nop

080079e4 <VSS_SetMecAcceleration>:
    int32_t wMecAccDppP32;
    uint16_t hNbrStep;
    int16_t hCurrentMecSpeedDpp;
    int16_t hFinalMecSpeedDpp;

    if (false == pHandle->bTransitionStarted)
 80079e4:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 80079e8:	b9a3      	cbnz	r3, 8007a14 <VSS_SetMecAcceleration+0x30>
        pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;

        pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)hFinalMecSpeedUnit)
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
                                              / (((int32_t)SPEED_UNIT)
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 80079ea:	8b43      	ldrh	r3, [r0, #26]
{
 80079ec:	b510      	push	{r4, lr}
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
 80079ee:	69c4      	ldr	r4, [r0, #28]

        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 80079f0:	f890 e001 	ldrb.w	lr, [r0, #1]
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 80079f4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
 80079f8:	fb04 fc01 	mul.w	ip, r4, r1
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 80079fc:	005b      	lsls	r3, r3, #1
                                              / (((int32_t)SPEED_UNIT)
 80079fe:	fb9c fcf3 	sdiv	ip, ip, r3
      if (0U == hDurationms)
 8007a02:	b942      	cbnz	r2, 8007a16 <VSS_SetMecAcceleration+0x32>
        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 8007a04:	fb1c fc0e 	smulbb	ip, ip, lr
        pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;
 8007a08:	8181      	strh	r1, [r0, #12]
        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 8007a0a:	f8a0 c00e 	strh.w	ip, [r0, #14]

        pHandle->hRemainingStep = 0U;
 8007a0e:	8502      	strh	r2, [r0, #40]	@ 0x28

        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8007a10:	8541      	strh	r1, [r0, #42]	@ 0x2a
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
}
 8007a12:	bd10      	pop	{r4, pc}
 8007a14:	4770      	bx	lr
        hNbrStep = (uint16_t)((((uint32_t)hDurationms) * ((uint32_t)pHandle->hSpeedSamplingFreqHz)) / 1000U);
 8007a16:	8e83      	ldrh	r3, [r0, #52]	@ 0x34
 8007a18:	fb02 f303 	mul.w	r3, r2, r3
 8007a1c:	4a0e      	ldr	r2, [pc, #56]	@ (8007a58 <VSS_SetMecAcceleration+0x74>)
 8007a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8007a22:	f3c3 138f 	ubfx	r3, r3, #6, #16
        hNbrStep++;
 8007a26:	3301      	adds	r3, #1
 8007a28:	b29b      	uxth	r3, r3
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 8007a2a:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
        pHandle->hRemainingStep = hNbrStep;
 8007a2e:	8503      	strh	r3, [r0, #40]	@ 0x28
        if (0U == hNbrStep)
 8007a30:	b91b      	cbnz	r3, 8007a3a <VSS_SetMecAcceleration+0x56>
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 8007a32:	0412      	lsls	r2, r2, #16
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8007a34:	8541      	strh	r1, [r0, #42]	@ 0x2a
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 8007a36:	6242      	str	r2, [r0, #36]	@ 0x24
}
 8007a38:	bd10      	pop	{r4, pc}
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 8007a3a:	fb92 f4fe 	sdiv	r4, r2, lr
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 8007a3e:	ebac 0c04 	sub.w	ip, ip, r4
                         * ((int32_t)65536)) / ((int32_t )hNbrStep);
 8007a42:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 8007a46:	0412      	lsls	r2, r2, #16
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 8007a48:	fb9c f3f3 	sdiv	r3, ip, r3
          pHandle->wElAccDppP32 = wMecAccDppP32 * ((int16_t)pHandle->_Super.bElToMecRatio);
 8007a4c:	fb0e f303 	mul.w	r3, lr, r3
 8007a50:	6203      	str	r3, [r0, #32]
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8007a52:	8541      	strh	r1, [r0, #42]	@ 0x2a
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 8007a54:	6242      	str	r2, [r0, #36]	@ 0x24
    }
 8007a56:	e7ef      	b.n	8007a38 <VSS_SetMecAcceleration+0x54>
 8007a58:	10624dd3 	.word	0x10624dd3

08007a5c <VSS_SetStartTransition>:
    /* nothing to do */
  }
  else
  {
#endif
    if (true == bCommand)
 8007a5c:	b151      	cbz	r1, 8007a74 <VSS_SetStartTransition+0x18>
    {
      pHandle->bTransitionStarted = true;

      if (0 == pHandle->hTransitionSteps)
 8007a5e:	f9b0 3036 	ldrsh.w	r3, [r0, #54]	@ 0x36
      pHandle->bTransitionStarted = true;
 8007a62:	2201      	movs	r2, #1
 8007a64:	f880 202c 	strb.w	r2, [r0, #44]	@ 0x2c
      if (0 == pHandle->hTransitionSteps)
 8007a68:	b923      	cbnz	r3, 8007a74 <VSS_SetStartTransition+0x18>
      {
        pHandle->bTransitionEnded = true;
 8007a6a:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d
        pHandle->_Super.bSpeedErrorNumber = 0U;
 8007a6e:	7003      	strb	r3, [r0, #0]
        bAux = false;
 8007a70:	4618      	mov	r0, r3
    }
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
  return (bAux);
}
 8007a72:	4770      	bx	lr
  bool bAux = true;
 8007a74:	2001      	movs	r0, #1
 8007a76:	4770      	bx	lr

08007a78 <VSS_TransitionEnded>:
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  return ((MC_NULL == pHandle) ? false : pHandle->bTransitionEnded);
#else
  return (pHandle->bTransitionEnded);
#endif
}
 8007a78:	f890 002d 	ldrb.w	r0, [r0, #45]	@ 0x2d
 8007a7c:	4770      	bx	lr
 8007a7e:	bf00      	nop

08007a80 <Set_CSA_Gain>:
#include "spi.h"

uint8_t Set_CSA_Gain(CSA_GAIN_t gain)
{
    // Ensure the gain value is valid (0 to 3)
    if (gain > CSA_GAIN_40_VV)
 8007a80:	2803      	cmp	r0, #3
 8007a82:	d901      	bls.n	8007a88 <Set_CSA_Gain+0x8>
        return 1; // Invalid gain value
 8007a84:	2001      	movs	r0, #1
    {
    	return 1; // Failure
    }
//	return 0;

}
 8007a86:	4770      	bx	lr
{
 8007a88:	b570      	push	{r4, r5, r6, lr}
 8007a8a:	b084      	sub	sp, #16
 8007a8c:	4605      	mov	r5, r0
    HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&spiData.value, (uint8_t*)&receivedWord, 1, 1000);
 8007a8e:	f44f 767a 	mov.w	r6, #1000	@ 0x3e8
    spiData.bits.payload = 0;  // We are readings sooo.... 0s?
 8007a92:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);   // CS Enable
 8007a96:	4831      	ldr	r0, [pc, #196]	@ (8007b5c <Set_CSA_Gain+0xdc>)
    spiData.bits.payload = 0;  // We are readings sooo.... 0s?
 8007a98:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);   // CS Enable
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	2110      	movs	r1, #16
 8007aa0:	f7fc ffbe 	bl	8004a20 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&spiData.value, (uint8_t*)&receivedWord, 1, 1000);
 8007aa4:	f10d 020e 	add.w	r2, sp, #14
 8007aa8:	a903      	add	r1, sp, #12
 8007aaa:	2301      	movs	r3, #1
 8007aac:	9600      	str	r6, [sp, #0]
 8007aae:	482c      	ldr	r0, [pc, #176]	@ (8007b60 <Set_CSA_Gain+0xe0>)
 8007ab0:	f7fd fc2e 	bl	8005310 <HAL_SPI_TransmitReceive>
    csaData.value = receivedWord;
 8007ab4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8007ab8:	4828      	ldr	r0, [pc, #160]	@ (8007b5c <Set_CSA_Gain+0xdc>)
 8007aba:	2201      	movs	r2, #1
 8007abc:	2110      	movs	r1, #16
    csaData.value = receivedWord;
 8007abe:	f04f 0400 	mov.w	r4, #0
 8007ac2:	f363 040a 	bfi	r4, r3, #0, #11
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8007ac6:	f7fc ffab 	bl	8004a20 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8007aca:	2001      	movs	r0, #1
 8007acc:	f7fc fb3e 	bl	800414c <HAL_Delay>
    spiData.bits.payload = csaData.value;
 8007ad0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8007ad4:	4821      	ldr	r0, [pc, #132]	@ (8007b5c <Set_CSA_Gain+0xdc>)
    csaData.bits.CSA_GAIN = gain; // change gain settings
 8007ad6:	f365 1487 	bfi	r4, r5, #6, #2
    spiData.bits.payload = csaData.value;
 8007ada:	f3c4 020a 	ubfx	r2, r4, #0, #11
 8007ade:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
 8007ae2:	4313      	orrs	r3, r2
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8007ae4:	2110      	movs	r1, #16
 8007ae6:	2200      	movs	r2, #0
    spiData.bits.payload = csaData.value;
 8007ae8:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8007aec:	f7fc ff98 	bl	8004a20 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&spiData.value, (uint8_t*)&receivedWord, 1, 1000);
 8007af0:	2301      	movs	r3, #1
 8007af2:	f10d 020e 	add.w	r2, sp, #14
 8007af6:	a903      	add	r1, sp, #12
 8007af8:	9600      	str	r6, [sp, #0]
 8007afa:	4819      	ldr	r0, [pc, #100]	@ (8007b60 <Set_CSA_Gain+0xe0>)
 8007afc:	f7fd fc08 	bl	8005310 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8007b00:	2201      	movs	r2, #1
 8007b02:	2110      	movs	r1, #16
 8007b04:	4815      	ldr	r0, [pc, #84]	@ (8007b5c <Set_CSA_Gain+0xdc>)
 8007b06:	f7fc ff8b 	bl	8004a20 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8007b0a:	2001      	movs	r0, #1
 8007b0c:	f7fc fb1e 	bl	800414c <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
 8007b10:	4814      	ldr	r0, [pc, #80]	@ (8007b64 <Set_CSA_Gain+0xe4>)
 8007b12:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007b16:	f7fc ff87 	bl	8004a28 <HAL_GPIO_TogglePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);   // CS Enable?
 8007b1a:	4810      	ldr	r0, [pc, #64]	@ (8007b5c <Set_CSA_Gain+0xdc>)
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	2110      	movs	r1, #16
 8007b20:	f7fc ff7e 	bl	8004a20 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&spiData.value, (uint8_t*)&receivedWord, 1, 1000);
 8007b24:	f10d 020e 	add.w	r2, sp, #14
 8007b28:	a903      	add	r1, sp, #12
 8007b2a:	9600      	str	r6, [sp, #0]
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	480c      	ldr	r0, [pc, #48]	@ (8007b60 <Set_CSA_Gain+0xe0>)
 8007b30:	f7fd fbee 	bl	8005310 <HAL_SPI_TransmitReceive>
    csaData.value = receivedWord;
 8007b34:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8007b38:	4808      	ldr	r0, [pc, #32]	@ (8007b5c <Set_CSA_Gain+0xdc>)
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	2110      	movs	r1, #16
    csaData.value = receivedWord;
 8007b3e:	f363 040a 	bfi	r4, r3, #0, #11
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8007b42:	f7fc ff6d 	bl	8004a20 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8007b46:	2001      	movs	r0, #1
 8007b48:	f7fc fb00 	bl	800414c <HAL_Delay>
    if(csaData.bits.CSA_GAIN == gain)
 8007b4c:	f3c4 1481 	ubfx	r4, r4, #6, #2
 8007b50:	1b60      	subs	r0, r4, r5
 8007b52:	bf18      	it	ne
 8007b54:	2001      	movne	r0, #1
}
 8007b56:	b004      	add	sp, #16
 8007b58:	bd70      	pop	{r4, r5, r6, pc}
 8007b5a:	bf00      	nop
 8007b5c:	40020000 	.word	0x40020000
 8007b60:	200017c8 	.word	0x200017c8
 8007b64:	40020800 	.word	0x40020800

08007b68 <std>:
 8007b68:	2300      	movs	r3, #0
 8007b6a:	b510      	push	{r4, lr}
 8007b6c:	4604      	mov	r4, r0
 8007b6e:	e9c0 3300 	strd	r3, r3, [r0]
 8007b72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007b76:	6083      	str	r3, [r0, #8]
 8007b78:	8181      	strh	r1, [r0, #12]
 8007b7a:	6643      	str	r3, [r0, #100]	@ 0x64
 8007b7c:	81c2      	strh	r2, [r0, #14]
 8007b7e:	6183      	str	r3, [r0, #24]
 8007b80:	4619      	mov	r1, r3
 8007b82:	2208      	movs	r2, #8
 8007b84:	305c      	adds	r0, #92	@ 0x5c
 8007b86:	f000 f906 	bl	8007d96 <memset>
 8007b8a:	4b0d      	ldr	r3, [pc, #52]	@ (8007bc0 <std+0x58>)
 8007b8c:	6263      	str	r3, [r4, #36]	@ 0x24
 8007b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8007bc4 <std+0x5c>)
 8007b90:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007b92:	4b0d      	ldr	r3, [pc, #52]	@ (8007bc8 <std+0x60>)
 8007b94:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007b96:	4b0d      	ldr	r3, [pc, #52]	@ (8007bcc <std+0x64>)
 8007b98:	6323      	str	r3, [r4, #48]	@ 0x30
 8007b9a:	4b0d      	ldr	r3, [pc, #52]	@ (8007bd0 <std+0x68>)
 8007b9c:	6224      	str	r4, [r4, #32]
 8007b9e:	429c      	cmp	r4, r3
 8007ba0:	d006      	beq.n	8007bb0 <std+0x48>
 8007ba2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007ba6:	4294      	cmp	r4, r2
 8007ba8:	d002      	beq.n	8007bb0 <std+0x48>
 8007baa:	33d0      	adds	r3, #208	@ 0xd0
 8007bac:	429c      	cmp	r4, r3
 8007bae:	d105      	bne.n	8007bbc <std+0x54>
 8007bb0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007bb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bb8:	f000 b966 	b.w	8007e88 <__retarget_lock_init_recursive>
 8007bbc:	bd10      	pop	{r4, pc}
 8007bbe:	bf00      	nop
 8007bc0:	08007d11 	.word	0x08007d11
 8007bc4:	08007d33 	.word	0x08007d33
 8007bc8:	08007d6b 	.word	0x08007d6b
 8007bcc:	08007d8f 	.word	0x08007d8f
 8007bd0:	20001980 	.word	0x20001980

08007bd4 <stdio_exit_handler>:
 8007bd4:	4a02      	ldr	r2, [pc, #8]	@ (8007be0 <stdio_exit_handler+0xc>)
 8007bd6:	4903      	ldr	r1, [pc, #12]	@ (8007be4 <stdio_exit_handler+0x10>)
 8007bd8:	4803      	ldr	r0, [pc, #12]	@ (8007be8 <stdio_exit_handler+0x14>)
 8007bda:	f000 b869 	b.w	8007cb0 <_fwalk_sglue>
 8007bde:	bf00      	nop
 8007be0:	200004c0 	.word	0x200004c0
 8007be4:	08008745 	.word	0x08008745
 8007be8:	200004d0 	.word	0x200004d0

08007bec <cleanup_stdio>:
 8007bec:	6841      	ldr	r1, [r0, #4]
 8007bee:	4b0c      	ldr	r3, [pc, #48]	@ (8007c20 <cleanup_stdio+0x34>)
 8007bf0:	4299      	cmp	r1, r3
 8007bf2:	b510      	push	{r4, lr}
 8007bf4:	4604      	mov	r4, r0
 8007bf6:	d001      	beq.n	8007bfc <cleanup_stdio+0x10>
 8007bf8:	f000 fda4 	bl	8008744 <_fflush_r>
 8007bfc:	68a1      	ldr	r1, [r4, #8]
 8007bfe:	4b09      	ldr	r3, [pc, #36]	@ (8007c24 <cleanup_stdio+0x38>)
 8007c00:	4299      	cmp	r1, r3
 8007c02:	d002      	beq.n	8007c0a <cleanup_stdio+0x1e>
 8007c04:	4620      	mov	r0, r4
 8007c06:	f000 fd9d 	bl	8008744 <_fflush_r>
 8007c0a:	68e1      	ldr	r1, [r4, #12]
 8007c0c:	4b06      	ldr	r3, [pc, #24]	@ (8007c28 <cleanup_stdio+0x3c>)
 8007c0e:	4299      	cmp	r1, r3
 8007c10:	d004      	beq.n	8007c1c <cleanup_stdio+0x30>
 8007c12:	4620      	mov	r0, r4
 8007c14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c18:	f000 bd94 	b.w	8008744 <_fflush_r>
 8007c1c:	bd10      	pop	{r4, pc}
 8007c1e:	bf00      	nop
 8007c20:	20001980 	.word	0x20001980
 8007c24:	200019e8 	.word	0x200019e8
 8007c28:	20001a50 	.word	0x20001a50

08007c2c <global_stdio_init.part.0>:
 8007c2c:	b510      	push	{r4, lr}
 8007c2e:	4b0b      	ldr	r3, [pc, #44]	@ (8007c5c <global_stdio_init.part.0+0x30>)
 8007c30:	4c0b      	ldr	r4, [pc, #44]	@ (8007c60 <global_stdio_init.part.0+0x34>)
 8007c32:	4a0c      	ldr	r2, [pc, #48]	@ (8007c64 <global_stdio_init.part.0+0x38>)
 8007c34:	601a      	str	r2, [r3, #0]
 8007c36:	4620      	mov	r0, r4
 8007c38:	2200      	movs	r2, #0
 8007c3a:	2104      	movs	r1, #4
 8007c3c:	f7ff ff94 	bl	8007b68 <std>
 8007c40:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007c44:	2201      	movs	r2, #1
 8007c46:	2109      	movs	r1, #9
 8007c48:	f7ff ff8e 	bl	8007b68 <std>
 8007c4c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007c50:	2202      	movs	r2, #2
 8007c52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c56:	2112      	movs	r1, #18
 8007c58:	f7ff bf86 	b.w	8007b68 <std>
 8007c5c:	20001ab8 	.word	0x20001ab8
 8007c60:	20001980 	.word	0x20001980
 8007c64:	08007bd5 	.word	0x08007bd5

08007c68 <__sfp_lock_acquire>:
 8007c68:	4801      	ldr	r0, [pc, #4]	@ (8007c70 <__sfp_lock_acquire+0x8>)
 8007c6a:	f000 b90e 	b.w	8007e8a <__retarget_lock_acquire_recursive>
 8007c6e:	bf00      	nop
 8007c70:	20001ac1 	.word	0x20001ac1

08007c74 <__sfp_lock_release>:
 8007c74:	4801      	ldr	r0, [pc, #4]	@ (8007c7c <__sfp_lock_release+0x8>)
 8007c76:	f000 b909 	b.w	8007e8c <__retarget_lock_release_recursive>
 8007c7a:	bf00      	nop
 8007c7c:	20001ac1 	.word	0x20001ac1

08007c80 <__sinit>:
 8007c80:	b510      	push	{r4, lr}
 8007c82:	4604      	mov	r4, r0
 8007c84:	f7ff fff0 	bl	8007c68 <__sfp_lock_acquire>
 8007c88:	6a23      	ldr	r3, [r4, #32]
 8007c8a:	b11b      	cbz	r3, 8007c94 <__sinit+0x14>
 8007c8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c90:	f7ff bff0 	b.w	8007c74 <__sfp_lock_release>
 8007c94:	4b04      	ldr	r3, [pc, #16]	@ (8007ca8 <__sinit+0x28>)
 8007c96:	6223      	str	r3, [r4, #32]
 8007c98:	4b04      	ldr	r3, [pc, #16]	@ (8007cac <__sinit+0x2c>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d1f5      	bne.n	8007c8c <__sinit+0xc>
 8007ca0:	f7ff ffc4 	bl	8007c2c <global_stdio_init.part.0>
 8007ca4:	e7f2      	b.n	8007c8c <__sinit+0xc>
 8007ca6:	bf00      	nop
 8007ca8:	08007bed 	.word	0x08007bed
 8007cac:	20001ab8 	.word	0x20001ab8

08007cb0 <_fwalk_sglue>:
 8007cb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cb4:	4607      	mov	r7, r0
 8007cb6:	4688      	mov	r8, r1
 8007cb8:	4614      	mov	r4, r2
 8007cba:	2600      	movs	r6, #0
 8007cbc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007cc0:	f1b9 0901 	subs.w	r9, r9, #1
 8007cc4:	d505      	bpl.n	8007cd2 <_fwalk_sglue+0x22>
 8007cc6:	6824      	ldr	r4, [r4, #0]
 8007cc8:	2c00      	cmp	r4, #0
 8007cca:	d1f7      	bne.n	8007cbc <_fwalk_sglue+0xc>
 8007ccc:	4630      	mov	r0, r6
 8007cce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007cd2:	89ab      	ldrh	r3, [r5, #12]
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d907      	bls.n	8007ce8 <_fwalk_sglue+0x38>
 8007cd8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007cdc:	3301      	adds	r3, #1
 8007cde:	d003      	beq.n	8007ce8 <_fwalk_sglue+0x38>
 8007ce0:	4629      	mov	r1, r5
 8007ce2:	4638      	mov	r0, r7
 8007ce4:	47c0      	blx	r8
 8007ce6:	4306      	orrs	r6, r0
 8007ce8:	3568      	adds	r5, #104	@ 0x68
 8007cea:	e7e9      	b.n	8007cc0 <_fwalk_sglue+0x10>

08007cec <iprintf>:
 8007cec:	b40f      	push	{r0, r1, r2, r3}
 8007cee:	b507      	push	{r0, r1, r2, lr}
 8007cf0:	4906      	ldr	r1, [pc, #24]	@ (8007d0c <iprintf+0x20>)
 8007cf2:	ab04      	add	r3, sp, #16
 8007cf4:	6808      	ldr	r0, [r1, #0]
 8007cf6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cfa:	6881      	ldr	r1, [r0, #8]
 8007cfc:	9301      	str	r3, [sp, #4]
 8007cfe:	f000 f9f7 	bl	80080f0 <_vfiprintf_r>
 8007d02:	b003      	add	sp, #12
 8007d04:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d08:	b004      	add	sp, #16
 8007d0a:	4770      	bx	lr
 8007d0c:	200004cc 	.word	0x200004cc

08007d10 <__sread>:
 8007d10:	b510      	push	{r4, lr}
 8007d12:	460c      	mov	r4, r1
 8007d14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d18:	f000 f868 	bl	8007dec <_read_r>
 8007d1c:	2800      	cmp	r0, #0
 8007d1e:	bfab      	itete	ge
 8007d20:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007d22:	89a3      	ldrhlt	r3, [r4, #12]
 8007d24:	181b      	addge	r3, r3, r0
 8007d26:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007d2a:	bfac      	ite	ge
 8007d2c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007d2e:	81a3      	strhlt	r3, [r4, #12]
 8007d30:	bd10      	pop	{r4, pc}

08007d32 <__swrite>:
 8007d32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d36:	461f      	mov	r7, r3
 8007d38:	898b      	ldrh	r3, [r1, #12]
 8007d3a:	05db      	lsls	r3, r3, #23
 8007d3c:	4605      	mov	r5, r0
 8007d3e:	460c      	mov	r4, r1
 8007d40:	4616      	mov	r6, r2
 8007d42:	d505      	bpl.n	8007d50 <__swrite+0x1e>
 8007d44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d48:	2302      	movs	r3, #2
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	f000 f83c 	bl	8007dc8 <_lseek_r>
 8007d50:	89a3      	ldrh	r3, [r4, #12]
 8007d52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d56:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007d5a:	81a3      	strh	r3, [r4, #12]
 8007d5c:	4632      	mov	r2, r6
 8007d5e:	463b      	mov	r3, r7
 8007d60:	4628      	mov	r0, r5
 8007d62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d66:	f000 b853 	b.w	8007e10 <_write_r>

08007d6a <__sseek>:
 8007d6a:	b510      	push	{r4, lr}
 8007d6c:	460c      	mov	r4, r1
 8007d6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d72:	f000 f829 	bl	8007dc8 <_lseek_r>
 8007d76:	1c43      	adds	r3, r0, #1
 8007d78:	89a3      	ldrh	r3, [r4, #12]
 8007d7a:	bf15      	itete	ne
 8007d7c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007d7e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007d82:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007d86:	81a3      	strheq	r3, [r4, #12]
 8007d88:	bf18      	it	ne
 8007d8a:	81a3      	strhne	r3, [r4, #12]
 8007d8c:	bd10      	pop	{r4, pc}

08007d8e <__sclose>:
 8007d8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d92:	f000 b809 	b.w	8007da8 <_close_r>

08007d96 <memset>:
 8007d96:	4402      	add	r2, r0
 8007d98:	4603      	mov	r3, r0
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d100      	bne.n	8007da0 <memset+0xa>
 8007d9e:	4770      	bx	lr
 8007da0:	f803 1b01 	strb.w	r1, [r3], #1
 8007da4:	e7f9      	b.n	8007d9a <memset+0x4>
	...

08007da8 <_close_r>:
 8007da8:	b538      	push	{r3, r4, r5, lr}
 8007daa:	4d06      	ldr	r5, [pc, #24]	@ (8007dc4 <_close_r+0x1c>)
 8007dac:	2300      	movs	r3, #0
 8007dae:	4604      	mov	r4, r0
 8007db0:	4608      	mov	r0, r1
 8007db2:	602b      	str	r3, [r5, #0]
 8007db4:	f7fb fef4 	bl	8003ba0 <_close>
 8007db8:	1c43      	adds	r3, r0, #1
 8007dba:	d102      	bne.n	8007dc2 <_close_r+0x1a>
 8007dbc:	682b      	ldr	r3, [r5, #0]
 8007dbe:	b103      	cbz	r3, 8007dc2 <_close_r+0x1a>
 8007dc0:	6023      	str	r3, [r4, #0]
 8007dc2:	bd38      	pop	{r3, r4, r5, pc}
 8007dc4:	20001abc 	.word	0x20001abc

08007dc8 <_lseek_r>:
 8007dc8:	b538      	push	{r3, r4, r5, lr}
 8007dca:	4d07      	ldr	r5, [pc, #28]	@ (8007de8 <_lseek_r+0x20>)
 8007dcc:	4604      	mov	r4, r0
 8007dce:	4608      	mov	r0, r1
 8007dd0:	4611      	mov	r1, r2
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	602a      	str	r2, [r5, #0]
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	f7fb feee 	bl	8003bb8 <_lseek>
 8007ddc:	1c43      	adds	r3, r0, #1
 8007dde:	d102      	bne.n	8007de6 <_lseek_r+0x1e>
 8007de0:	682b      	ldr	r3, [r5, #0]
 8007de2:	b103      	cbz	r3, 8007de6 <_lseek_r+0x1e>
 8007de4:	6023      	str	r3, [r4, #0]
 8007de6:	bd38      	pop	{r3, r4, r5, pc}
 8007de8:	20001abc 	.word	0x20001abc

08007dec <_read_r>:
 8007dec:	b538      	push	{r3, r4, r5, lr}
 8007dee:	4d07      	ldr	r5, [pc, #28]	@ (8007e0c <_read_r+0x20>)
 8007df0:	4604      	mov	r4, r0
 8007df2:	4608      	mov	r0, r1
 8007df4:	4611      	mov	r1, r2
 8007df6:	2200      	movs	r2, #0
 8007df8:	602a      	str	r2, [r5, #0]
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	f7fb feb4 	bl	8003b68 <_read>
 8007e00:	1c43      	adds	r3, r0, #1
 8007e02:	d102      	bne.n	8007e0a <_read_r+0x1e>
 8007e04:	682b      	ldr	r3, [r5, #0]
 8007e06:	b103      	cbz	r3, 8007e0a <_read_r+0x1e>
 8007e08:	6023      	str	r3, [r4, #0]
 8007e0a:	bd38      	pop	{r3, r4, r5, pc}
 8007e0c:	20001abc 	.word	0x20001abc

08007e10 <_write_r>:
 8007e10:	b538      	push	{r3, r4, r5, lr}
 8007e12:	4d07      	ldr	r5, [pc, #28]	@ (8007e30 <_write_r+0x20>)
 8007e14:	4604      	mov	r4, r0
 8007e16:	4608      	mov	r0, r1
 8007e18:	4611      	mov	r1, r2
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	602a      	str	r2, [r5, #0]
 8007e1e:	461a      	mov	r2, r3
 8007e20:	f7fb feb0 	bl	8003b84 <_write>
 8007e24:	1c43      	adds	r3, r0, #1
 8007e26:	d102      	bne.n	8007e2e <_write_r+0x1e>
 8007e28:	682b      	ldr	r3, [r5, #0]
 8007e2a:	b103      	cbz	r3, 8007e2e <_write_r+0x1e>
 8007e2c:	6023      	str	r3, [r4, #0]
 8007e2e:	bd38      	pop	{r3, r4, r5, pc}
 8007e30:	20001abc 	.word	0x20001abc

08007e34 <__errno>:
 8007e34:	4b01      	ldr	r3, [pc, #4]	@ (8007e3c <__errno+0x8>)
 8007e36:	6818      	ldr	r0, [r3, #0]
 8007e38:	4770      	bx	lr
 8007e3a:	bf00      	nop
 8007e3c:	200004cc 	.word	0x200004cc

08007e40 <__libc_init_array>:
 8007e40:	b570      	push	{r4, r5, r6, lr}
 8007e42:	4d0d      	ldr	r5, [pc, #52]	@ (8007e78 <__libc_init_array+0x38>)
 8007e44:	4c0d      	ldr	r4, [pc, #52]	@ (8007e7c <__libc_init_array+0x3c>)
 8007e46:	1b64      	subs	r4, r4, r5
 8007e48:	10a4      	asrs	r4, r4, #2
 8007e4a:	2600      	movs	r6, #0
 8007e4c:	42a6      	cmp	r6, r4
 8007e4e:	d109      	bne.n	8007e64 <__libc_init_array+0x24>
 8007e50:	4d0b      	ldr	r5, [pc, #44]	@ (8007e80 <__libc_init_array+0x40>)
 8007e52:	4c0c      	ldr	r4, [pc, #48]	@ (8007e84 <__libc_init_array+0x44>)
 8007e54:	f000 fdc6 	bl	80089e4 <_init>
 8007e58:	1b64      	subs	r4, r4, r5
 8007e5a:	10a4      	asrs	r4, r4, #2
 8007e5c:	2600      	movs	r6, #0
 8007e5e:	42a6      	cmp	r6, r4
 8007e60:	d105      	bne.n	8007e6e <__libc_init_array+0x2e>
 8007e62:	bd70      	pop	{r4, r5, r6, pc}
 8007e64:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e68:	4798      	blx	r3
 8007e6a:	3601      	adds	r6, #1
 8007e6c:	e7ee      	b.n	8007e4c <__libc_init_array+0xc>
 8007e6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e72:	4798      	blx	r3
 8007e74:	3601      	adds	r6, #1
 8007e76:	e7f2      	b.n	8007e5e <__libc_init_array+0x1e>
 8007e78:	08008e54 	.word	0x08008e54
 8007e7c:	08008e54 	.word	0x08008e54
 8007e80:	08008e54 	.word	0x08008e54
 8007e84:	08008e58 	.word	0x08008e58

08007e88 <__retarget_lock_init_recursive>:
 8007e88:	4770      	bx	lr

08007e8a <__retarget_lock_acquire_recursive>:
 8007e8a:	4770      	bx	lr

08007e8c <__retarget_lock_release_recursive>:
 8007e8c:	4770      	bx	lr

08007e8e <memcpy>:
 8007e8e:	440a      	add	r2, r1
 8007e90:	4291      	cmp	r1, r2
 8007e92:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e96:	d100      	bne.n	8007e9a <memcpy+0xc>
 8007e98:	4770      	bx	lr
 8007e9a:	b510      	push	{r4, lr}
 8007e9c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ea0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ea4:	4291      	cmp	r1, r2
 8007ea6:	d1f9      	bne.n	8007e9c <memcpy+0xe>
 8007ea8:	bd10      	pop	{r4, pc}
	...

08007eac <_free_r>:
 8007eac:	b538      	push	{r3, r4, r5, lr}
 8007eae:	4605      	mov	r5, r0
 8007eb0:	2900      	cmp	r1, #0
 8007eb2:	d041      	beq.n	8007f38 <_free_r+0x8c>
 8007eb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007eb8:	1f0c      	subs	r4, r1, #4
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	bfb8      	it	lt
 8007ebe:	18e4      	addlt	r4, r4, r3
 8007ec0:	f000 f8e0 	bl	8008084 <__malloc_lock>
 8007ec4:	4a1d      	ldr	r2, [pc, #116]	@ (8007f3c <_free_r+0x90>)
 8007ec6:	6813      	ldr	r3, [r2, #0]
 8007ec8:	b933      	cbnz	r3, 8007ed8 <_free_r+0x2c>
 8007eca:	6063      	str	r3, [r4, #4]
 8007ecc:	6014      	str	r4, [r2, #0]
 8007ece:	4628      	mov	r0, r5
 8007ed0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ed4:	f000 b8dc 	b.w	8008090 <__malloc_unlock>
 8007ed8:	42a3      	cmp	r3, r4
 8007eda:	d908      	bls.n	8007eee <_free_r+0x42>
 8007edc:	6820      	ldr	r0, [r4, #0]
 8007ede:	1821      	adds	r1, r4, r0
 8007ee0:	428b      	cmp	r3, r1
 8007ee2:	bf01      	itttt	eq
 8007ee4:	6819      	ldreq	r1, [r3, #0]
 8007ee6:	685b      	ldreq	r3, [r3, #4]
 8007ee8:	1809      	addeq	r1, r1, r0
 8007eea:	6021      	streq	r1, [r4, #0]
 8007eec:	e7ed      	b.n	8007eca <_free_r+0x1e>
 8007eee:	461a      	mov	r2, r3
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	b10b      	cbz	r3, 8007ef8 <_free_r+0x4c>
 8007ef4:	42a3      	cmp	r3, r4
 8007ef6:	d9fa      	bls.n	8007eee <_free_r+0x42>
 8007ef8:	6811      	ldr	r1, [r2, #0]
 8007efa:	1850      	adds	r0, r2, r1
 8007efc:	42a0      	cmp	r0, r4
 8007efe:	d10b      	bne.n	8007f18 <_free_r+0x6c>
 8007f00:	6820      	ldr	r0, [r4, #0]
 8007f02:	4401      	add	r1, r0
 8007f04:	1850      	adds	r0, r2, r1
 8007f06:	4283      	cmp	r3, r0
 8007f08:	6011      	str	r1, [r2, #0]
 8007f0a:	d1e0      	bne.n	8007ece <_free_r+0x22>
 8007f0c:	6818      	ldr	r0, [r3, #0]
 8007f0e:	685b      	ldr	r3, [r3, #4]
 8007f10:	6053      	str	r3, [r2, #4]
 8007f12:	4408      	add	r0, r1
 8007f14:	6010      	str	r0, [r2, #0]
 8007f16:	e7da      	b.n	8007ece <_free_r+0x22>
 8007f18:	d902      	bls.n	8007f20 <_free_r+0x74>
 8007f1a:	230c      	movs	r3, #12
 8007f1c:	602b      	str	r3, [r5, #0]
 8007f1e:	e7d6      	b.n	8007ece <_free_r+0x22>
 8007f20:	6820      	ldr	r0, [r4, #0]
 8007f22:	1821      	adds	r1, r4, r0
 8007f24:	428b      	cmp	r3, r1
 8007f26:	bf04      	itt	eq
 8007f28:	6819      	ldreq	r1, [r3, #0]
 8007f2a:	685b      	ldreq	r3, [r3, #4]
 8007f2c:	6063      	str	r3, [r4, #4]
 8007f2e:	bf04      	itt	eq
 8007f30:	1809      	addeq	r1, r1, r0
 8007f32:	6021      	streq	r1, [r4, #0]
 8007f34:	6054      	str	r4, [r2, #4]
 8007f36:	e7ca      	b.n	8007ece <_free_r+0x22>
 8007f38:	bd38      	pop	{r3, r4, r5, pc}
 8007f3a:	bf00      	nop
 8007f3c:	20001ac8 	.word	0x20001ac8

08007f40 <sbrk_aligned>:
 8007f40:	b570      	push	{r4, r5, r6, lr}
 8007f42:	4e0f      	ldr	r6, [pc, #60]	@ (8007f80 <sbrk_aligned+0x40>)
 8007f44:	460c      	mov	r4, r1
 8007f46:	6831      	ldr	r1, [r6, #0]
 8007f48:	4605      	mov	r5, r0
 8007f4a:	b911      	cbnz	r1, 8007f52 <sbrk_aligned+0x12>
 8007f4c:	f000 fcb6 	bl	80088bc <_sbrk_r>
 8007f50:	6030      	str	r0, [r6, #0]
 8007f52:	4621      	mov	r1, r4
 8007f54:	4628      	mov	r0, r5
 8007f56:	f000 fcb1 	bl	80088bc <_sbrk_r>
 8007f5a:	1c43      	adds	r3, r0, #1
 8007f5c:	d103      	bne.n	8007f66 <sbrk_aligned+0x26>
 8007f5e:	f04f 34ff 	mov.w	r4, #4294967295
 8007f62:	4620      	mov	r0, r4
 8007f64:	bd70      	pop	{r4, r5, r6, pc}
 8007f66:	1cc4      	adds	r4, r0, #3
 8007f68:	f024 0403 	bic.w	r4, r4, #3
 8007f6c:	42a0      	cmp	r0, r4
 8007f6e:	d0f8      	beq.n	8007f62 <sbrk_aligned+0x22>
 8007f70:	1a21      	subs	r1, r4, r0
 8007f72:	4628      	mov	r0, r5
 8007f74:	f000 fca2 	bl	80088bc <_sbrk_r>
 8007f78:	3001      	adds	r0, #1
 8007f7a:	d1f2      	bne.n	8007f62 <sbrk_aligned+0x22>
 8007f7c:	e7ef      	b.n	8007f5e <sbrk_aligned+0x1e>
 8007f7e:	bf00      	nop
 8007f80:	20001ac4 	.word	0x20001ac4

08007f84 <_malloc_r>:
 8007f84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f88:	1ccd      	adds	r5, r1, #3
 8007f8a:	f025 0503 	bic.w	r5, r5, #3
 8007f8e:	3508      	adds	r5, #8
 8007f90:	2d0c      	cmp	r5, #12
 8007f92:	bf38      	it	cc
 8007f94:	250c      	movcc	r5, #12
 8007f96:	2d00      	cmp	r5, #0
 8007f98:	4606      	mov	r6, r0
 8007f9a:	db01      	blt.n	8007fa0 <_malloc_r+0x1c>
 8007f9c:	42a9      	cmp	r1, r5
 8007f9e:	d904      	bls.n	8007faa <_malloc_r+0x26>
 8007fa0:	230c      	movs	r3, #12
 8007fa2:	6033      	str	r3, [r6, #0]
 8007fa4:	2000      	movs	r0, #0
 8007fa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007faa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008080 <_malloc_r+0xfc>
 8007fae:	f000 f869 	bl	8008084 <__malloc_lock>
 8007fb2:	f8d8 3000 	ldr.w	r3, [r8]
 8007fb6:	461c      	mov	r4, r3
 8007fb8:	bb44      	cbnz	r4, 800800c <_malloc_r+0x88>
 8007fba:	4629      	mov	r1, r5
 8007fbc:	4630      	mov	r0, r6
 8007fbe:	f7ff ffbf 	bl	8007f40 <sbrk_aligned>
 8007fc2:	1c43      	adds	r3, r0, #1
 8007fc4:	4604      	mov	r4, r0
 8007fc6:	d158      	bne.n	800807a <_malloc_r+0xf6>
 8007fc8:	f8d8 4000 	ldr.w	r4, [r8]
 8007fcc:	4627      	mov	r7, r4
 8007fce:	2f00      	cmp	r7, #0
 8007fd0:	d143      	bne.n	800805a <_malloc_r+0xd6>
 8007fd2:	2c00      	cmp	r4, #0
 8007fd4:	d04b      	beq.n	800806e <_malloc_r+0xea>
 8007fd6:	6823      	ldr	r3, [r4, #0]
 8007fd8:	4639      	mov	r1, r7
 8007fda:	4630      	mov	r0, r6
 8007fdc:	eb04 0903 	add.w	r9, r4, r3
 8007fe0:	f000 fc6c 	bl	80088bc <_sbrk_r>
 8007fe4:	4581      	cmp	r9, r0
 8007fe6:	d142      	bne.n	800806e <_malloc_r+0xea>
 8007fe8:	6821      	ldr	r1, [r4, #0]
 8007fea:	1a6d      	subs	r5, r5, r1
 8007fec:	4629      	mov	r1, r5
 8007fee:	4630      	mov	r0, r6
 8007ff0:	f7ff ffa6 	bl	8007f40 <sbrk_aligned>
 8007ff4:	3001      	adds	r0, #1
 8007ff6:	d03a      	beq.n	800806e <_malloc_r+0xea>
 8007ff8:	6823      	ldr	r3, [r4, #0]
 8007ffa:	442b      	add	r3, r5
 8007ffc:	6023      	str	r3, [r4, #0]
 8007ffe:	f8d8 3000 	ldr.w	r3, [r8]
 8008002:	685a      	ldr	r2, [r3, #4]
 8008004:	bb62      	cbnz	r2, 8008060 <_malloc_r+0xdc>
 8008006:	f8c8 7000 	str.w	r7, [r8]
 800800a:	e00f      	b.n	800802c <_malloc_r+0xa8>
 800800c:	6822      	ldr	r2, [r4, #0]
 800800e:	1b52      	subs	r2, r2, r5
 8008010:	d420      	bmi.n	8008054 <_malloc_r+0xd0>
 8008012:	2a0b      	cmp	r2, #11
 8008014:	d917      	bls.n	8008046 <_malloc_r+0xc2>
 8008016:	1961      	adds	r1, r4, r5
 8008018:	42a3      	cmp	r3, r4
 800801a:	6025      	str	r5, [r4, #0]
 800801c:	bf18      	it	ne
 800801e:	6059      	strne	r1, [r3, #4]
 8008020:	6863      	ldr	r3, [r4, #4]
 8008022:	bf08      	it	eq
 8008024:	f8c8 1000 	streq.w	r1, [r8]
 8008028:	5162      	str	r2, [r4, r5]
 800802a:	604b      	str	r3, [r1, #4]
 800802c:	4630      	mov	r0, r6
 800802e:	f000 f82f 	bl	8008090 <__malloc_unlock>
 8008032:	f104 000b 	add.w	r0, r4, #11
 8008036:	1d23      	adds	r3, r4, #4
 8008038:	f020 0007 	bic.w	r0, r0, #7
 800803c:	1ac2      	subs	r2, r0, r3
 800803e:	bf1c      	itt	ne
 8008040:	1a1b      	subne	r3, r3, r0
 8008042:	50a3      	strne	r3, [r4, r2]
 8008044:	e7af      	b.n	8007fa6 <_malloc_r+0x22>
 8008046:	6862      	ldr	r2, [r4, #4]
 8008048:	42a3      	cmp	r3, r4
 800804a:	bf0c      	ite	eq
 800804c:	f8c8 2000 	streq.w	r2, [r8]
 8008050:	605a      	strne	r2, [r3, #4]
 8008052:	e7eb      	b.n	800802c <_malloc_r+0xa8>
 8008054:	4623      	mov	r3, r4
 8008056:	6864      	ldr	r4, [r4, #4]
 8008058:	e7ae      	b.n	8007fb8 <_malloc_r+0x34>
 800805a:	463c      	mov	r4, r7
 800805c:	687f      	ldr	r7, [r7, #4]
 800805e:	e7b6      	b.n	8007fce <_malloc_r+0x4a>
 8008060:	461a      	mov	r2, r3
 8008062:	685b      	ldr	r3, [r3, #4]
 8008064:	42a3      	cmp	r3, r4
 8008066:	d1fb      	bne.n	8008060 <_malloc_r+0xdc>
 8008068:	2300      	movs	r3, #0
 800806a:	6053      	str	r3, [r2, #4]
 800806c:	e7de      	b.n	800802c <_malloc_r+0xa8>
 800806e:	230c      	movs	r3, #12
 8008070:	6033      	str	r3, [r6, #0]
 8008072:	4630      	mov	r0, r6
 8008074:	f000 f80c 	bl	8008090 <__malloc_unlock>
 8008078:	e794      	b.n	8007fa4 <_malloc_r+0x20>
 800807a:	6005      	str	r5, [r0, #0]
 800807c:	e7d6      	b.n	800802c <_malloc_r+0xa8>
 800807e:	bf00      	nop
 8008080:	20001ac8 	.word	0x20001ac8

08008084 <__malloc_lock>:
 8008084:	4801      	ldr	r0, [pc, #4]	@ (800808c <__malloc_lock+0x8>)
 8008086:	f7ff bf00 	b.w	8007e8a <__retarget_lock_acquire_recursive>
 800808a:	bf00      	nop
 800808c:	20001ac0 	.word	0x20001ac0

08008090 <__malloc_unlock>:
 8008090:	4801      	ldr	r0, [pc, #4]	@ (8008098 <__malloc_unlock+0x8>)
 8008092:	f7ff befb 	b.w	8007e8c <__retarget_lock_release_recursive>
 8008096:	bf00      	nop
 8008098:	20001ac0 	.word	0x20001ac0

0800809c <__sfputc_r>:
 800809c:	6893      	ldr	r3, [r2, #8]
 800809e:	3b01      	subs	r3, #1
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	b410      	push	{r4}
 80080a4:	6093      	str	r3, [r2, #8]
 80080a6:	da08      	bge.n	80080ba <__sfputc_r+0x1e>
 80080a8:	6994      	ldr	r4, [r2, #24]
 80080aa:	42a3      	cmp	r3, r4
 80080ac:	db01      	blt.n	80080b2 <__sfputc_r+0x16>
 80080ae:	290a      	cmp	r1, #10
 80080b0:	d103      	bne.n	80080ba <__sfputc_r+0x1e>
 80080b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80080b6:	f000 bb6d 	b.w	8008794 <__swbuf_r>
 80080ba:	6813      	ldr	r3, [r2, #0]
 80080bc:	1c58      	adds	r0, r3, #1
 80080be:	6010      	str	r0, [r2, #0]
 80080c0:	7019      	strb	r1, [r3, #0]
 80080c2:	4608      	mov	r0, r1
 80080c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80080c8:	4770      	bx	lr

080080ca <__sfputs_r>:
 80080ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080cc:	4606      	mov	r6, r0
 80080ce:	460f      	mov	r7, r1
 80080d0:	4614      	mov	r4, r2
 80080d2:	18d5      	adds	r5, r2, r3
 80080d4:	42ac      	cmp	r4, r5
 80080d6:	d101      	bne.n	80080dc <__sfputs_r+0x12>
 80080d8:	2000      	movs	r0, #0
 80080da:	e007      	b.n	80080ec <__sfputs_r+0x22>
 80080dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080e0:	463a      	mov	r2, r7
 80080e2:	4630      	mov	r0, r6
 80080e4:	f7ff ffda 	bl	800809c <__sfputc_r>
 80080e8:	1c43      	adds	r3, r0, #1
 80080ea:	d1f3      	bne.n	80080d4 <__sfputs_r+0xa>
 80080ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080080f0 <_vfiprintf_r>:
 80080f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080f4:	460d      	mov	r5, r1
 80080f6:	b09d      	sub	sp, #116	@ 0x74
 80080f8:	4614      	mov	r4, r2
 80080fa:	4698      	mov	r8, r3
 80080fc:	4606      	mov	r6, r0
 80080fe:	b118      	cbz	r0, 8008108 <_vfiprintf_r+0x18>
 8008100:	6a03      	ldr	r3, [r0, #32]
 8008102:	b90b      	cbnz	r3, 8008108 <_vfiprintf_r+0x18>
 8008104:	f7ff fdbc 	bl	8007c80 <__sinit>
 8008108:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800810a:	07d9      	lsls	r1, r3, #31
 800810c:	d405      	bmi.n	800811a <_vfiprintf_r+0x2a>
 800810e:	89ab      	ldrh	r3, [r5, #12]
 8008110:	059a      	lsls	r2, r3, #22
 8008112:	d402      	bmi.n	800811a <_vfiprintf_r+0x2a>
 8008114:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008116:	f7ff feb8 	bl	8007e8a <__retarget_lock_acquire_recursive>
 800811a:	89ab      	ldrh	r3, [r5, #12]
 800811c:	071b      	lsls	r3, r3, #28
 800811e:	d501      	bpl.n	8008124 <_vfiprintf_r+0x34>
 8008120:	692b      	ldr	r3, [r5, #16]
 8008122:	b99b      	cbnz	r3, 800814c <_vfiprintf_r+0x5c>
 8008124:	4629      	mov	r1, r5
 8008126:	4630      	mov	r0, r6
 8008128:	f000 fb72 	bl	8008810 <__swsetup_r>
 800812c:	b170      	cbz	r0, 800814c <_vfiprintf_r+0x5c>
 800812e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008130:	07dc      	lsls	r4, r3, #31
 8008132:	d504      	bpl.n	800813e <_vfiprintf_r+0x4e>
 8008134:	f04f 30ff 	mov.w	r0, #4294967295
 8008138:	b01d      	add	sp, #116	@ 0x74
 800813a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800813e:	89ab      	ldrh	r3, [r5, #12]
 8008140:	0598      	lsls	r0, r3, #22
 8008142:	d4f7      	bmi.n	8008134 <_vfiprintf_r+0x44>
 8008144:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008146:	f7ff fea1 	bl	8007e8c <__retarget_lock_release_recursive>
 800814a:	e7f3      	b.n	8008134 <_vfiprintf_r+0x44>
 800814c:	2300      	movs	r3, #0
 800814e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008150:	2320      	movs	r3, #32
 8008152:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008156:	f8cd 800c 	str.w	r8, [sp, #12]
 800815a:	2330      	movs	r3, #48	@ 0x30
 800815c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800830c <_vfiprintf_r+0x21c>
 8008160:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008164:	f04f 0901 	mov.w	r9, #1
 8008168:	4623      	mov	r3, r4
 800816a:	469a      	mov	sl, r3
 800816c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008170:	b10a      	cbz	r2, 8008176 <_vfiprintf_r+0x86>
 8008172:	2a25      	cmp	r2, #37	@ 0x25
 8008174:	d1f9      	bne.n	800816a <_vfiprintf_r+0x7a>
 8008176:	ebba 0b04 	subs.w	fp, sl, r4
 800817a:	d00b      	beq.n	8008194 <_vfiprintf_r+0xa4>
 800817c:	465b      	mov	r3, fp
 800817e:	4622      	mov	r2, r4
 8008180:	4629      	mov	r1, r5
 8008182:	4630      	mov	r0, r6
 8008184:	f7ff ffa1 	bl	80080ca <__sfputs_r>
 8008188:	3001      	adds	r0, #1
 800818a:	f000 80a7 	beq.w	80082dc <_vfiprintf_r+0x1ec>
 800818e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008190:	445a      	add	r2, fp
 8008192:	9209      	str	r2, [sp, #36]	@ 0x24
 8008194:	f89a 3000 	ldrb.w	r3, [sl]
 8008198:	2b00      	cmp	r3, #0
 800819a:	f000 809f 	beq.w	80082dc <_vfiprintf_r+0x1ec>
 800819e:	2300      	movs	r3, #0
 80081a0:	f04f 32ff 	mov.w	r2, #4294967295
 80081a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80081a8:	f10a 0a01 	add.w	sl, sl, #1
 80081ac:	9304      	str	r3, [sp, #16]
 80081ae:	9307      	str	r3, [sp, #28]
 80081b0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80081b4:	931a      	str	r3, [sp, #104]	@ 0x68
 80081b6:	4654      	mov	r4, sl
 80081b8:	2205      	movs	r2, #5
 80081ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081be:	4853      	ldr	r0, [pc, #332]	@ (800830c <_vfiprintf_r+0x21c>)
 80081c0:	f7f8 f826 	bl	8000210 <memchr>
 80081c4:	9a04      	ldr	r2, [sp, #16]
 80081c6:	b9d8      	cbnz	r0, 8008200 <_vfiprintf_r+0x110>
 80081c8:	06d1      	lsls	r1, r2, #27
 80081ca:	bf44      	itt	mi
 80081cc:	2320      	movmi	r3, #32
 80081ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80081d2:	0713      	lsls	r3, r2, #28
 80081d4:	bf44      	itt	mi
 80081d6:	232b      	movmi	r3, #43	@ 0x2b
 80081d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80081dc:	f89a 3000 	ldrb.w	r3, [sl]
 80081e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80081e2:	d015      	beq.n	8008210 <_vfiprintf_r+0x120>
 80081e4:	9a07      	ldr	r2, [sp, #28]
 80081e6:	4654      	mov	r4, sl
 80081e8:	2000      	movs	r0, #0
 80081ea:	f04f 0c0a 	mov.w	ip, #10
 80081ee:	4621      	mov	r1, r4
 80081f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081f4:	3b30      	subs	r3, #48	@ 0x30
 80081f6:	2b09      	cmp	r3, #9
 80081f8:	d94b      	bls.n	8008292 <_vfiprintf_r+0x1a2>
 80081fa:	b1b0      	cbz	r0, 800822a <_vfiprintf_r+0x13a>
 80081fc:	9207      	str	r2, [sp, #28]
 80081fe:	e014      	b.n	800822a <_vfiprintf_r+0x13a>
 8008200:	eba0 0308 	sub.w	r3, r0, r8
 8008204:	fa09 f303 	lsl.w	r3, r9, r3
 8008208:	4313      	orrs	r3, r2
 800820a:	9304      	str	r3, [sp, #16]
 800820c:	46a2      	mov	sl, r4
 800820e:	e7d2      	b.n	80081b6 <_vfiprintf_r+0xc6>
 8008210:	9b03      	ldr	r3, [sp, #12]
 8008212:	1d19      	adds	r1, r3, #4
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	9103      	str	r1, [sp, #12]
 8008218:	2b00      	cmp	r3, #0
 800821a:	bfbb      	ittet	lt
 800821c:	425b      	neglt	r3, r3
 800821e:	f042 0202 	orrlt.w	r2, r2, #2
 8008222:	9307      	strge	r3, [sp, #28]
 8008224:	9307      	strlt	r3, [sp, #28]
 8008226:	bfb8      	it	lt
 8008228:	9204      	strlt	r2, [sp, #16]
 800822a:	7823      	ldrb	r3, [r4, #0]
 800822c:	2b2e      	cmp	r3, #46	@ 0x2e
 800822e:	d10a      	bne.n	8008246 <_vfiprintf_r+0x156>
 8008230:	7863      	ldrb	r3, [r4, #1]
 8008232:	2b2a      	cmp	r3, #42	@ 0x2a
 8008234:	d132      	bne.n	800829c <_vfiprintf_r+0x1ac>
 8008236:	9b03      	ldr	r3, [sp, #12]
 8008238:	1d1a      	adds	r2, r3, #4
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	9203      	str	r2, [sp, #12]
 800823e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008242:	3402      	adds	r4, #2
 8008244:	9305      	str	r3, [sp, #20]
 8008246:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800831c <_vfiprintf_r+0x22c>
 800824a:	7821      	ldrb	r1, [r4, #0]
 800824c:	2203      	movs	r2, #3
 800824e:	4650      	mov	r0, sl
 8008250:	f7f7 ffde 	bl	8000210 <memchr>
 8008254:	b138      	cbz	r0, 8008266 <_vfiprintf_r+0x176>
 8008256:	9b04      	ldr	r3, [sp, #16]
 8008258:	eba0 000a 	sub.w	r0, r0, sl
 800825c:	2240      	movs	r2, #64	@ 0x40
 800825e:	4082      	lsls	r2, r0
 8008260:	4313      	orrs	r3, r2
 8008262:	3401      	adds	r4, #1
 8008264:	9304      	str	r3, [sp, #16]
 8008266:	f814 1b01 	ldrb.w	r1, [r4], #1
 800826a:	4829      	ldr	r0, [pc, #164]	@ (8008310 <_vfiprintf_r+0x220>)
 800826c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008270:	2206      	movs	r2, #6
 8008272:	f7f7 ffcd 	bl	8000210 <memchr>
 8008276:	2800      	cmp	r0, #0
 8008278:	d03f      	beq.n	80082fa <_vfiprintf_r+0x20a>
 800827a:	4b26      	ldr	r3, [pc, #152]	@ (8008314 <_vfiprintf_r+0x224>)
 800827c:	bb1b      	cbnz	r3, 80082c6 <_vfiprintf_r+0x1d6>
 800827e:	9b03      	ldr	r3, [sp, #12]
 8008280:	3307      	adds	r3, #7
 8008282:	f023 0307 	bic.w	r3, r3, #7
 8008286:	3308      	adds	r3, #8
 8008288:	9303      	str	r3, [sp, #12]
 800828a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800828c:	443b      	add	r3, r7
 800828e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008290:	e76a      	b.n	8008168 <_vfiprintf_r+0x78>
 8008292:	fb0c 3202 	mla	r2, ip, r2, r3
 8008296:	460c      	mov	r4, r1
 8008298:	2001      	movs	r0, #1
 800829a:	e7a8      	b.n	80081ee <_vfiprintf_r+0xfe>
 800829c:	2300      	movs	r3, #0
 800829e:	3401      	adds	r4, #1
 80082a0:	9305      	str	r3, [sp, #20]
 80082a2:	4619      	mov	r1, r3
 80082a4:	f04f 0c0a 	mov.w	ip, #10
 80082a8:	4620      	mov	r0, r4
 80082aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082ae:	3a30      	subs	r2, #48	@ 0x30
 80082b0:	2a09      	cmp	r2, #9
 80082b2:	d903      	bls.n	80082bc <_vfiprintf_r+0x1cc>
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d0c6      	beq.n	8008246 <_vfiprintf_r+0x156>
 80082b8:	9105      	str	r1, [sp, #20]
 80082ba:	e7c4      	b.n	8008246 <_vfiprintf_r+0x156>
 80082bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80082c0:	4604      	mov	r4, r0
 80082c2:	2301      	movs	r3, #1
 80082c4:	e7f0      	b.n	80082a8 <_vfiprintf_r+0x1b8>
 80082c6:	ab03      	add	r3, sp, #12
 80082c8:	9300      	str	r3, [sp, #0]
 80082ca:	462a      	mov	r2, r5
 80082cc:	4b12      	ldr	r3, [pc, #72]	@ (8008318 <_vfiprintf_r+0x228>)
 80082ce:	a904      	add	r1, sp, #16
 80082d0:	4630      	mov	r0, r6
 80082d2:	f3af 8000 	nop.w
 80082d6:	4607      	mov	r7, r0
 80082d8:	1c78      	adds	r0, r7, #1
 80082da:	d1d6      	bne.n	800828a <_vfiprintf_r+0x19a>
 80082dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80082de:	07d9      	lsls	r1, r3, #31
 80082e0:	d405      	bmi.n	80082ee <_vfiprintf_r+0x1fe>
 80082e2:	89ab      	ldrh	r3, [r5, #12]
 80082e4:	059a      	lsls	r2, r3, #22
 80082e6:	d402      	bmi.n	80082ee <_vfiprintf_r+0x1fe>
 80082e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80082ea:	f7ff fdcf 	bl	8007e8c <__retarget_lock_release_recursive>
 80082ee:	89ab      	ldrh	r3, [r5, #12]
 80082f0:	065b      	lsls	r3, r3, #25
 80082f2:	f53f af1f 	bmi.w	8008134 <_vfiprintf_r+0x44>
 80082f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80082f8:	e71e      	b.n	8008138 <_vfiprintf_r+0x48>
 80082fa:	ab03      	add	r3, sp, #12
 80082fc:	9300      	str	r3, [sp, #0]
 80082fe:	462a      	mov	r2, r5
 8008300:	4b05      	ldr	r3, [pc, #20]	@ (8008318 <_vfiprintf_r+0x228>)
 8008302:	a904      	add	r1, sp, #16
 8008304:	4630      	mov	r0, r6
 8008306:	f000 f879 	bl	80083fc <_printf_i>
 800830a:	e7e4      	b.n	80082d6 <_vfiprintf_r+0x1e6>
 800830c:	08008e18 	.word	0x08008e18
 8008310:	08008e22 	.word	0x08008e22
 8008314:	00000000 	.word	0x00000000
 8008318:	080080cb 	.word	0x080080cb
 800831c:	08008e1e 	.word	0x08008e1e

08008320 <_printf_common>:
 8008320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008324:	4616      	mov	r6, r2
 8008326:	4698      	mov	r8, r3
 8008328:	688a      	ldr	r2, [r1, #8]
 800832a:	690b      	ldr	r3, [r1, #16]
 800832c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008330:	4293      	cmp	r3, r2
 8008332:	bfb8      	it	lt
 8008334:	4613      	movlt	r3, r2
 8008336:	6033      	str	r3, [r6, #0]
 8008338:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800833c:	4607      	mov	r7, r0
 800833e:	460c      	mov	r4, r1
 8008340:	b10a      	cbz	r2, 8008346 <_printf_common+0x26>
 8008342:	3301      	adds	r3, #1
 8008344:	6033      	str	r3, [r6, #0]
 8008346:	6823      	ldr	r3, [r4, #0]
 8008348:	0699      	lsls	r1, r3, #26
 800834a:	bf42      	ittt	mi
 800834c:	6833      	ldrmi	r3, [r6, #0]
 800834e:	3302      	addmi	r3, #2
 8008350:	6033      	strmi	r3, [r6, #0]
 8008352:	6825      	ldr	r5, [r4, #0]
 8008354:	f015 0506 	ands.w	r5, r5, #6
 8008358:	d106      	bne.n	8008368 <_printf_common+0x48>
 800835a:	f104 0a19 	add.w	sl, r4, #25
 800835e:	68e3      	ldr	r3, [r4, #12]
 8008360:	6832      	ldr	r2, [r6, #0]
 8008362:	1a9b      	subs	r3, r3, r2
 8008364:	42ab      	cmp	r3, r5
 8008366:	dc26      	bgt.n	80083b6 <_printf_common+0x96>
 8008368:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800836c:	6822      	ldr	r2, [r4, #0]
 800836e:	3b00      	subs	r3, #0
 8008370:	bf18      	it	ne
 8008372:	2301      	movne	r3, #1
 8008374:	0692      	lsls	r2, r2, #26
 8008376:	d42b      	bmi.n	80083d0 <_printf_common+0xb0>
 8008378:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800837c:	4641      	mov	r1, r8
 800837e:	4638      	mov	r0, r7
 8008380:	47c8      	blx	r9
 8008382:	3001      	adds	r0, #1
 8008384:	d01e      	beq.n	80083c4 <_printf_common+0xa4>
 8008386:	6823      	ldr	r3, [r4, #0]
 8008388:	6922      	ldr	r2, [r4, #16]
 800838a:	f003 0306 	and.w	r3, r3, #6
 800838e:	2b04      	cmp	r3, #4
 8008390:	bf02      	ittt	eq
 8008392:	68e5      	ldreq	r5, [r4, #12]
 8008394:	6833      	ldreq	r3, [r6, #0]
 8008396:	1aed      	subeq	r5, r5, r3
 8008398:	68a3      	ldr	r3, [r4, #8]
 800839a:	bf0c      	ite	eq
 800839c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80083a0:	2500      	movne	r5, #0
 80083a2:	4293      	cmp	r3, r2
 80083a4:	bfc4      	itt	gt
 80083a6:	1a9b      	subgt	r3, r3, r2
 80083a8:	18ed      	addgt	r5, r5, r3
 80083aa:	2600      	movs	r6, #0
 80083ac:	341a      	adds	r4, #26
 80083ae:	42b5      	cmp	r5, r6
 80083b0:	d11a      	bne.n	80083e8 <_printf_common+0xc8>
 80083b2:	2000      	movs	r0, #0
 80083b4:	e008      	b.n	80083c8 <_printf_common+0xa8>
 80083b6:	2301      	movs	r3, #1
 80083b8:	4652      	mov	r2, sl
 80083ba:	4641      	mov	r1, r8
 80083bc:	4638      	mov	r0, r7
 80083be:	47c8      	blx	r9
 80083c0:	3001      	adds	r0, #1
 80083c2:	d103      	bne.n	80083cc <_printf_common+0xac>
 80083c4:	f04f 30ff 	mov.w	r0, #4294967295
 80083c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083cc:	3501      	adds	r5, #1
 80083ce:	e7c6      	b.n	800835e <_printf_common+0x3e>
 80083d0:	18e1      	adds	r1, r4, r3
 80083d2:	1c5a      	adds	r2, r3, #1
 80083d4:	2030      	movs	r0, #48	@ 0x30
 80083d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80083da:	4422      	add	r2, r4
 80083dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80083e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80083e4:	3302      	adds	r3, #2
 80083e6:	e7c7      	b.n	8008378 <_printf_common+0x58>
 80083e8:	2301      	movs	r3, #1
 80083ea:	4622      	mov	r2, r4
 80083ec:	4641      	mov	r1, r8
 80083ee:	4638      	mov	r0, r7
 80083f0:	47c8      	blx	r9
 80083f2:	3001      	adds	r0, #1
 80083f4:	d0e6      	beq.n	80083c4 <_printf_common+0xa4>
 80083f6:	3601      	adds	r6, #1
 80083f8:	e7d9      	b.n	80083ae <_printf_common+0x8e>
	...

080083fc <_printf_i>:
 80083fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008400:	7e0f      	ldrb	r7, [r1, #24]
 8008402:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008404:	2f78      	cmp	r7, #120	@ 0x78
 8008406:	4691      	mov	r9, r2
 8008408:	4680      	mov	r8, r0
 800840a:	460c      	mov	r4, r1
 800840c:	469a      	mov	sl, r3
 800840e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008412:	d807      	bhi.n	8008424 <_printf_i+0x28>
 8008414:	2f62      	cmp	r7, #98	@ 0x62
 8008416:	d80a      	bhi.n	800842e <_printf_i+0x32>
 8008418:	2f00      	cmp	r7, #0
 800841a:	f000 80d2 	beq.w	80085c2 <_printf_i+0x1c6>
 800841e:	2f58      	cmp	r7, #88	@ 0x58
 8008420:	f000 80b9 	beq.w	8008596 <_printf_i+0x19a>
 8008424:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008428:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800842c:	e03a      	b.n	80084a4 <_printf_i+0xa8>
 800842e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008432:	2b15      	cmp	r3, #21
 8008434:	d8f6      	bhi.n	8008424 <_printf_i+0x28>
 8008436:	a101      	add	r1, pc, #4	@ (adr r1, 800843c <_printf_i+0x40>)
 8008438:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800843c:	08008495 	.word	0x08008495
 8008440:	080084a9 	.word	0x080084a9
 8008444:	08008425 	.word	0x08008425
 8008448:	08008425 	.word	0x08008425
 800844c:	08008425 	.word	0x08008425
 8008450:	08008425 	.word	0x08008425
 8008454:	080084a9 	.word	0x080084a9
 8008458:	08008425 	.word	0x08008425
 800845c:	08008425 	.word	0x08008425
 8008460:	08008425 	.word	0x08008425
 8008464:	08008425 	.word	0x08008425
 8008468:	080085a9 	.word	0x080085a9
 800846c:	080084d3 	.word	0x080084d3
 8008470:	08008563 	.word	0x08008563
 8008474:	08008425 	.word	0x08008425
 8008478:	08008425 	.word	0x08008425
 800847c:	080085cb 	.word	0x080085cb
 8008480:	08008425 	.word	0x08008425
 8008484:	080084d3 	.word	0x080084d3
 8008488:	08008425 	.word	0x08008425
 800848c:	08008425 	.word	0x08008425
 8008490:	0800856b 	.word	0x0800856b
 8008494:	6833      	ldr	r3, [r6, #0]
 8008496:	1d1a      	adds	r2, r3, #4
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	6032      	str	r2, [r6, #0]
 800849c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80084a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80084a4:	2301      	movs	r3, #1
 80084a6:	e09d      	b.n	80085e4 <_printf_i+0x1e8>
 80084a8:	6833      	ldr	r3, [r6, #0]
 80084aa:	6820      	ldr	r0, [r4, #0]
 80084ac:	1d19      	adds	r1, r3, #4
 80084ae:	6031      	str	r1, [r6, #0]
 80084b0:	0606      	lsls	r6, r0, #24
 80084b2:	d501      	bpl.n	80084b8 <_printf_i+0xbc>
 80084b4:	681d      	ldr	r5, [r3, #0]
 80084b6:	e003      	b.n	80084c0 <_printf_i+0xc4>
 80084b8:	0645      	lsls	r5, r0, #25
 80084ba:	d5fb      	bpl.n	80084b4 <_printf_i+0xb8>
 80084bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80084c0:	2d00      	cmp	r5, #0
 80084c2:	da03      	bge.n	80084cc <_printf_i+0xd0>
 80084c4:	232d      	movs	r3, #45	@ 0x2d
 80084c6:	426d      	negs	r5, r5
 80084c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80084cc:	4859      	ldr	r0, [pc, #356]	@ (8008634 <_printf_i+0x238>)
 80084ce:	230a      	movs	r3, #10
 80084d0:	e011      	b.n	80084f6 <_printf_i+0xfa>
 80084d2:	6821      	ldr	r1, [r4, #0]
 80084d4:	6833      	ldr	r3, [r6, #0]
 80084d6:	0608      	lsls	r0, r1, #24
 80084d8:	f853 5b04 	ldr.w	r5, [r3], #4
 80084dc:	d402      	bmi.n	80084e4 <_printf_i+0xe8>
 80084de:	0649      	lsls	r1, r1, #25
 80084e0:	bf48      	it	mi
 80084e2:	b2ad      	uxthmi	r5, r5
 80084e4:	2f6f      	cmp	r7, #111	@ 0x6f
 80084e6:	4853      	ldr	r0, [pc, #332]	@ (8008634 <_printf_i+0x238>)
 80084e8:	6033      	str	r3, [r6, #0]
 80084ea:	bf14      	ite	ne
 80084ec:	230a      	movne	r3, #10
 80084ee:	2308      	moveq	r3, #8
 80084f0:	2100      	movs	r1, #0
 80084f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80084f6:	6866      	ldr	r6, [r4, #4]
 80084f8:	60a6      	str	r6, [r4, #8]
 80084fa:	2e00      	cmp	r6, #0
 80084fc:	bfa2      	ittt	ge
 80084fe:	6821      	ldrge	r1, [r4, #0]
 8008500:	f021 0104 	bicge.w	r1, r1, #4
 8008504:	6021      	strge	r1, [r4, #0]
 8008506:	b90d      	cbnz	r5, 800850c <_printf_i+0x110>
 8008508:	2e00      	cmp	r6, #0
 800850a:	d04b      	beq.n	80085a4 <_printf_i+0x1a8>
 800850c:	4616      	mov	r6, r2
 800850e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008512:	fb03 5711 	mls	r7, r3, r1, r5
 8008516:	5dc7      	ldrb	r7, [r0, r7]
 8008518:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800851c:	462f      	mov	r7, r5
 800851e:	42bb      	cmp	r3, r7
 8008520:	460d      	mov	r5, r1
 8008522:	d9f4      	bls.n	800850e <_printf_i+0x112>
 8008524:	2b08      	cmp	r3, #8
 8008526:	d10b      	bne.n	8008540 <_printf_i+0x144>
 8008528:	6823      	ldr	r3, [r4, #0]
 800852a:	07df      	lsls	r7, r3, #31
 800852c:	d508      	bpl.n	8008540 <_printf_i+0x144>
 800852e:	6923      	ldr	r3, [r4, #16]
 8008530:	6861      	ldr	r1, [r4, #4]
 8008532:	4299      	cmp	r1, r3
 8008534:	bfde      	ittt	le
 8008536:	2330      	movle	r3, #48	@ 0x30
 8008538:	f806 3c01 	strble.w	r3, [r6, #-1]
 800853c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008540:	1b92      	subs	r2, r2, r6
 8008542:	6122      	str	r2, [r4, #16]
 8008544:	f8cd a000 	str.w	sl, [sp]
 8008548:	464b      	mov	r3, r9
 800854a:	aa03      	add	r2, sp, #12
 800854c:	4621      	mov	r1, r4
 800854e:	4640      	mov	r0, r8
 8008550:	f7ff fee6 	bl	8008320 <_printf_common>
 8008554:	3001      	adds	r0, #1
 8008556:	d14a      	bne.n	80085ee <_printf_i+0x1f2>
 8008558:	f04f 30ff 	mov.w	r0, #4294967295
 800855c:	b004      	add	sp, #16
 800855e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008562:	6823      	ldr	r3, [r4, #0]
 8008564:	f043 0320 	orr.w	r3, r3, #32
 8008568:	6023      	str	r3, [r4, #0]
 800856a:	4833      	ldr	r0, [pc, #204]	@ (8008638 <_printf_i+0x23c>)
 800856c:	2778      	movs	r7, #120	@ 0x78
 800856e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008572:	6823      	ldr	r3, [r4, #0]
 8008574:	6831      	ldr	r1, [r6, #0]
 8008576:	061f      	lsls	r7, r3, #24
 8008578:	f851 5b04 	ldr.w	r5, [r1], #4
 800857c:	d402      	bmi.n	8008584 <_printf_i+0x188>
 800857e:	065f      	lsls	r7, r3, #25
 8008580:	bf48      	it	mi
 8008582:	b2ad      	uxthmi	r5, r5
 8008584:	6031      	str	r1, [r6, #0]
 8008586:	07d9      	lsls	r1, r3, #31
 8008588:	bf44      	itt	mi
 800858a:	f043 0320 	orrmi.w	r3, r3, #32
 800858e:	6023      	strmi	r3, [r4, #0]
 8008590:	b11d      	cbz	r5, 800859a <_printf_i+0x19e>
 8008592:	2310      	movs	r3, #16
 8008594:	e7ac      	b.n	80084f0 <_printf_i+0xf4>
 8008596:	4827      	ldr	r0, [pc, #156]	@ (8008634 <_printf_i+0x238>)
 8008598:	e7e9      	b.n	800856e <_printf_i+0x172>
 800859a:	6823      	ldr	r3, [r4, #0]
 800859c:	f023 0320 	bic.w	r3, r3, #32
 80085a0:	6023      	str	r3, [r4, #0]
 80085a2:	e7f6      	b.n	8008592 <_printf_i+0x196>
 80085a4:	4616      	mov	r6, r2
 80085a6:	e7bd      	b.n	8008524 <_printf_i+0x128>
 80085a8:	6833      	ldr	r3, [r6, #0]
 80085aa:	6825      	ldr	r5, [r4, #0]
 80085ac:	6961      	ldr	r1, [r4, #20]
 80085ae:	1d18      	adds	r0, r3, #4
 80085b0:	6030      	str	r0, [r6, #0]
 80085b2:	062e      	lsls	r6, r5, #24
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	d501      	bpl.n	80085bc <_printf_i+0x1c0>
 80085b8:	6019      	str	r1, [r3, #0]
 80085ba:	e002      	b.n	80085c2 <_printf_i+0x1c6>
 80085bc:	0668      	lsls	r0, r5, #25
 80085be:	d5fb      	bpl.n	80085b8 <_printf_i+0x1bc>
 80085c0:	8019      	strh	r1, [r3, #0]
 80085c2:	2300      	movs	r3, #0
 80085c4:	6123      	str	r3, [r4, #16]
 80085c6:	4616      	mov	r6, r2
 80085c8:	e7bc      	b.n	8008544 <_printf_i+0x148>
 80085ca:	6833      	ldr	r3, [r6, #0]
 80085cc:	1d1a      	adds	r2, r3, #4
 80085ce:	6032      	str	r2, [r6, #0]
 80085d0:	681e      	ldr	r6, [r3, #0]
 80085d2:	6862      	ldr	r2, [r4, #4]
 80085d4:	2100      	movs	r1, #0
 80085d6:	4630      	mov	r0, r6
 80085d8:	f7f7 fe1a 	bl	8000210 <memchr>
 80085dc:	b108      	cbz	r0, 80085e2 <_printf_i+0x1e6>
 80085de:	1b80      	subs	r0, r0, r6
 80085e0:	6060      	str	r0, [r4, #4]
 80085e2:	6863      	ldr	r3, [r4, #4]
 80085e4:	6123      	str	r3, [r4, #16]
 80085e6:	2300      	movs	r3, #0
 80085e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80085ec:	e7aa      	b.n	8008544 <_printf_i+0x148>
 80085ee:	6923      	ldr	r3, [r4, #16]
 80085f0:	4632      	mov	r2, r6
 80085f2:	4649      	mov	r1, r9
 80085f4:	4640      	mov	r0, r8
 80085f6:	47d0      	blx	sl
 80085f8:	3001      	adds	r0, #1
 80085fa:	d0ad      	beq.n	8008558 <_printf_i+0x15c>
 80085fc:	6823      	ldr	r3, [r4, #0]
 80085fe:	079b      	lsls	r3, r3, #30
 8008600:	d413      	bmi.n	800862a <_printf_i+0x22e>
 8008602:	68e0      	ldr	r0, [r4, #12]
 8008604:	9b03      	ldr	r3, [sp, #12]
 8008606:	4298      	cmp	r0, r3
 8008608:	bfb8      	it	lt
 800860a:	4618      	movlt	r0, r3
 800860c:	e7a6      	b.n	800855c <_printf_i+0x160>
 800860e:	2301      	movs	r3, #1
 8008610:	4632      	mov	r2, r6
 8008612:	4649      	mov	r1, r9
 8008614:	4640      	mov	r0, r8
 8008616:	47d0      	blx	sl
 8008618:	3001      	adds	r0, #1
 800861a:	d09d      	beq.n	8008558 <_printf_i+0x15c>
 800861c:	3501      	adds	r5, #1
 800861e:	68e3      	ldr	r3, [r4, #12]
 8008620:	9903      	ldr	r1, [sp, #12]
 8008622:	1a5b      	subs	r3, r3, r1
 8008624:	42ab      	cmp	r3, r5
 8008626:	dcf2      	bgt.n	800860e <_printf_i+0x212>
 8008628:	e7eb      	b.n	8008602 <_printf_i+0x206>
 800862a:	2500      	movs	r5, #0
 800862c:	f104 0619 	add.w	r6, r4, #25
 8008630:	e7f5      	b.n	800861e <_printf_i+0x222>
 8008632:	bf00      	nop
 8008634:	08008e29 	.word	0x08008e29
 8008638:	08008e3a 	.word	0x08008e3a

0800863c <__sflush_r>:
 800863c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008644:	0716      	lsls	r6, r2, #28
 8008646:	4605      	mov	r5, r0
 8008648:	460c      	mov	r4, r1
 800864a:	d454      	bmi.n	80086f6 <__sflush_r+0xba>
 800864c:	684b      	ldr	r3, [r1, #4]
 800864e:	2b00      	cmp	r3, #0
 8008650:	dc02      	bgt.n	8008658 <__sflush_r+0x1c>
 8008652:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008654:	2b00      	cmp	r3, #0
 8008656:	dd48      	ble.n	80086ea <__sflush_r+0xae>
 8008658:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800865a:	2e00      	cmp	r6, #0
 800865c:	d045      	beq.n	80086ea <__sflush_r+0xae>
 800865e:	2300      	movs	r3, #0
 8008660:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008664:	682f      	ldr	r7, [r5, #0]
 8008666:	6a21      	ldr	r1, [r4, #32]
 8008668:	602b      	str	r3, [r5, #0]
 800866a:	d030      	beq.n	80086ce <__sflush_r+0x92>
 800866c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800866e:	89a3      	ldrh	r3, [r4, #12]
 8008670:	0759      	lsls	r1, r3, #29
 8008672:	d505      	bpl.n	8008680 <__sflush_r+0x44>
 8008674:	6863      	ldr	r3, [r4, #4]
 8008676:	1ad2      	subs	r2, r2, r3
 8008678:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800867a:	b10b      	cbz	r3, 8008680 <__sflush_r+0x44>
 800867c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800867e:	1ad2      	subs	r2, r2, r3
 8008680:	2300      	movs	r3, #0
 8008682:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008684:	6a21      	ldr	r1, [r4, #32]
 8008686:	4628      	mov	r0, r5
 8008688:	47b0      	blx	r6
 800868a:	1c43      	adds	r3, r0, #1
 800868c:	89a3      	ldrh	r3, [r4, #12]
 800868e:	d106      	bne.n	800869e <__sflush_r+0x62>
 8008690:	6829      	ldr	r1, [r5, #0]
 8008692:	291d      	cmp	r1, #29
 8008694:	d82b      	bhi.n	80086ee <__sflush_r+0xb2>
 8008696:	4a2a      	ldr	r2, [pc, #168]	@ (8008740 <__sflush_r+0x104>)
 8008698:	410a      	asrs	r2, r1
 800869a:	07d6      	lsls	r6, r2, #31
 800869c:	d427      	bmi.n	80086ee <__sflush_r+0xb2>
 800869e:	2200      	movs	r2, #0
 80086a0:	6062      	str	r2, [r4, #4]
 80086a2:	04d9      	lsls	r1, r3, #19
 80086a4:	6922      	ldr	r2, [r4, #16]
 80086a6:	6022      	str	r2, [r4, #0]
 80086a8:	d504      	bpl.n	80086b4 <__sflush_r+0x78>
 80086aa:	1c42      	adds	r2, r0, #1
 80086ac:	d101      	bne.n	80086b2 <__sflush_r+0x76>
 80086ae:	682b      	ldr	r3, [r5, #0]
 80086b0:	b903      	cbnz	r3, 80086b4 <__sflush_r+0x78>
 80086b2:	6560      	str	r0, [r4, #84]	@ 0x54
 80086b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80086b6:	602f      	str	r7, [r5, #0]
 80086b8:	b1b9      	cbz	r1, 80086ea <__sflush_r+0xae>
 80086ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80086be:	4299      	cmp	r1, r3
 80086c0:	d002      	beq.n	80086c8 <__sflush_r+0x8c>
 80086c2:	4628      	mov	r0, r5
 80086c4:	f7ff fbf2 	bl	8007eac <_free_r>
 80086c8:	2300      	movs	r3, #0
 80086ca:	6363      	str	r3, [r4, #52]	@ 0x34
 80086cc:	e00d      	b.n	80086ea <__sflush_r+0xae>
 80086ce:	2301      	movs	r3, #1
 80086d0:	4628      	mov	r0, r5
 80086d2:	47b0      	blx	r6
 80086d4:	4602      	mov	r2, r0
 80086d6:	1c50      	adds	r0, r2, #1
 80086d8:	d1c9      	bne.n	800866e <__sflush_r+0x32>
 80086da:	682b      	ldr	r3, [r5, #0]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d0c6      	beq.n	800866e <__sflush_r+0x32>
 80086e0:	2b1d      	cmp	r3, #29
 80086e2:	d001      	beq.n	80086e8 <__sflush_r+0xac>
 80086e4:	2b16      	cmp	r3, #22
 80086e6:	d11e      	bne.n	8008726 <__sflush_r+0xea>
 80086e8:	602f      	str	r7, [r5, #0]
 80086ea:	2000      	movs	r0, #0
 80086ec:	e022      	b.n	8008734 <__sflush_r+0xf8>
 80086ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80086f2:	b21b      	sxth	r3, r3
 80086f4:	e01b      	b.n	800872e <__sflush_r+0xf2>
 80086f6:	690f      	ldr	r7, [r1, #16]
 80086f8:	2f00      	cmp	r7, #0
 80086fa:	d0f6      	beq.n	80086ea <__sflush_r+0xae>
 80086fc:	0793      	lsls	r3, r2, #30
 80086fe:	680e      	ldr	r6, [r1, #0]
 8008700:	bf08      	it	eq
 8008702:	694b      	ldreq	r3, [r1, #20]
 8008704:	600f      	str	r7, [r1, #0]
 8008706:	bf18      	it	ne
 8008708:	2300      	movne	r3, #0
 800870a:	eba6 0807 	sub.w	r8, r6, r7
 800870e:	608b      	str	r3, [r1, #8]
 8008710:	f1b8 0f00 	cmp.w	r8, #0
 8008714:	dde9      	ble.n	80086ea <__sflush_r+0xae>
 8008716:	6a21      	ldr	r1, [r4, #32]
 8008718:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800871a:	4643      	mov	r3, r8
 800871c:	463a      	mov	r2, r7
 800871e:	4628      	mov	r0, r5
 8008720:	47b0      	blx	r6
 8008722:	2800      	cmp	r0, #0
 8008724:	dc08      	bgt.n	8008738 <__sflush_r+0xfc>
 8008726:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800872a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800872e:	81a3      	strh	r3, [r4, #12]
 8008730:	f04f 30ff 	mov.w	r0, #4294967295
 8008734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008738:	4407      	add	r7, r0
 800873a:	eba8 0800 	sub.w	r8, r8, r0
 800873e:	e7e7      	b.n	8008710 <__sflush_r+0xd4>
 8008740:	dfbffffe 	.word	0xdfbffffe

08008744 <_fflush_r>:
 8008744:	b538      	push	{r3, r4, r5, lr}
 8008746:	690b      	ldr	r3, [r1, #16]
 8008748:	4605      	mov	r5, r0
 800874a:	460c      	mov	r4, r1
 800874c:	b913      	cbnz	r3, 8008754 <_fflush_r+0x10>
 800874e:	2500      	movs	r5, #0
 8008750:	4628      	mov	r0, r5
 8008752:	bd38      	pop	{r3, r4, r5, pc}
 8008754:	b118      	cbz	r0, 800875e <_fflush_r+0x1a>
 8008756:	6a03      	ldr	r3, [r0, #32]
 8008758:	b90b      	cbnz	r3, 800875e <_fflush_r+0x1a>
 800875a:	f7ff fa91 	bl	8007c80 <__sinit>
 800875e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d0f3      	beq.n	800874e <_fflush_r+0xa>
 8008766:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008768:	07d0      	lsls	r0, r2, #31
 800876a:	d404      	bmi.n	8008776 <_fflush_r+0x32>
 800876c:	0599      	lsls	r1, r3, #22
 800876e:	d402      	bmi.n	8008776 <_fflush_r+0x32>
 8008770:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008772:	f7ff fb8a 	bl	8007e8a <__retarget_lock_acquire_recursive>
 8008776:	4628      	mov	r0, r5
 8008778:	4621      	mov	r1, r4
 800877a:	f7ff ff5f 	bl	800863c <__sflush_r>
 800877e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008780:	07da      	lsls	r2, r3, #31
 8008782:	4605      	mov	r5, r0
 8008784:	d4e4      	bmi.n	8008750 <_fflush_r+0xc>
 8008786:	89a3      	ldrh	r3, [r4, #12]
 8008788:	059b      	lsls	r3, r3, #22
 800878a:	d4e1      	bmi.n	8008750 <_fflush_r+0xc>
 800878c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800878e:	f7ff fb7d 	bl	8007e8c <__retarget_lock_release_recursive>
 8008792:	e7dd      	b.n	8008750 <_fflush_r+0xc>

08008794 <__swbuf_r>:
 8008794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008796:	460e      	mov	r6, r1
 8008798:	4614      	mov	r4, r2
 800879a:	4605      	mov	r5, r0
 800879c:	b118      	cbz	r0, 80087a6 <__swbuf_r+0x12>
 800879e:	6a03      	ldr	r3, [r0, #32]
 80087a0:	b90b      	cbnz	r3, 80087a6 <__swbuf_r+0x12>
 80087a2:	f7ff fa6d 	bl	8007c80 <__sinit>
 80087a6:	69a3      	ldr	r3, [r4, #24]
 80087a8:	60a3      	str	r3, [r4, #8]
 80087aa:	89a3      	ldrh	r3, [r4, #12]
 80087ac:	071a      	lsls	r2, r3, #28
 80087ae:	d501      	bpl.n	80087b4 <__swbuf_r+0x20>
 80087b0:	6923      	ldr	r3, [r4, #16]
 80087b2:	b943      	cbnz	r3, 80087c6 <__swbuf_r+0x32>
 80087b4:	4621      	mov	r1, r4
 80087b6:	4628      	mov	r0, r5
 80087b8:	f000 f82a 	bl	8008810 <__swsetup_r>
 80087bc:	b118      	cbz	r0, 80087c6 <__swbuf_r+0x32>
 80087be:	f04f 37ff 	mov.w	r7, #4294967295
 80087c2:	4638      	mov	r0, r7
 80087c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087c6:	6823      	ldr	r3, [r4, #0]
 80087c8:	6922      	ldr	r2, [r4, #16]
 80087ca:	1a98      	subs	r0, r3, r2
 80087cc:	6963      	ldr	r3, [r4, #20]
 80087ce:	b2f6      	uxtb	r6, r6
 80087d0:	4283      	cmp	r3, r0
 80087d2:	4637      	mov	r7, r6
 80087d4:	dc05      	bgt.n	80087e2 <__swbuf_r+0x4e>
 80087d6:	4621      	mov	r1, r4
 80087d8:	4628      	mov	r0, r5
 80087da:	f7ff ffb3 	bl	8008744 <_fflush_r>
 80087de:	2800      	cmp	r0, #0
 80087e0:	d1ed      	bne.n	80087be <__swbuf_r+0x2a>
 80087e2:	68a3      	ldr	r3, [r4, #8]
 80087e4:	3b01      	subs	r3, #1
 80087e6:	60a3      	str	r3, [r4, #8]
 80087e8:	6823      	ldr	r3, [r4, #0]
 80087ea:	1c5a      	adds	r2, r3, #1
 80087ec:	6022      	str	r2, [r4, #0]
 80087ee:	701e      	strb	r6, [r3, #0]
 80087f0:	6962      	ldr	r2, [r4, #20]
 80087f2:	1c43      	adds	r3, r0, #1
 80087f4:	429a      	cmp	r2, r3
 80087f6:	d004      	beq.n	8008802 <__swbuf_r+0x6e>
 80087f8:	89a3      	ldrh	r3, [r4, #12]
 80087fa:	07db      	lsls	r3, r3, #31
 80087fc:	d5e1      	bpl.n	80087c2 <__swbuf_r+0x2e>
 80087fe:	2e0a      	cmp	r6, #10
 8008800:	d1df      	bne.n	80087c2 <__swbuf_r+0x2e>
 8008802:	4621      	mov	r1, r4
 8008804:	4628      	mov	r0, r5
 8008806:	f7ff ff9d 	bl	8008744 <_fflush_r>
 800880a:	2800      	cmp	r0, #0
 800880c:	d0d9      	beq.n	80087c2 <__swbuf_r+0x2e>
 800880e:	e7d6      	b.n	80087be <__swbuf_r+0x2a>

08008810 <__swsetup_r>:
 8008810:	b538      	push	{r3, r4, r5, lr}
 8008812:	4b29      	ldr	r3, [pc, #164]	@ (80088b8 <__swsetup_r+0xa8>)
 8008814:	4605      	mov	r5, r0
 8008816:	6818      	ldr	r0, [r3, #0]
 8008818:	460c      	mov	r4, r1
 800881a:	b118      	cbz	r0, 8008824 <__swsetup_r+0x14>
 800881c:	6a03      	ldr	r3, [r0, #32]
 800881e:	b90b      	cbnz	r3, 8008824 <__swsetup_r+0x14>
 8008820:	f7ff fa2e 	bl	8007c80 <__sinit>
 8008824:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008828:	0719      	lsls	r1, r3, #28
 800882a:	d422      	bmi.n	8008872 <__swsetup_r+0x62>
 800882c:	06da      	lsls	r2, r3, #27
 800882e:	d407      	bmi.n	8008840 <__swsetup_r+0x30>
 8008830:	2209      	movs	r2, #9
 8008832:	602a      	str	r2, [r5, #0]
 8008834:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008838:	81a3      	strh	r3, [r4, #12]
 800883a:	f04f 30ff 	mov.w	r0, #4294967295
 800883e:	e033      	b.n	80088a8 <__swsetup_r+0x98>
 8008840:	0758      	lsls	r0, r3, #29
 8008842:	d512      	bpl.n	800886a <__swsetup_r+0x5a>
 8008844:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008846:	b141      	cbz	r1, 800885a <__swsetup_r+0x4a>
 8008848:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800884c:	4299      	cmp	r1, r3
 800884e:	d002      	beq.n	8008856 <__swsetup_r+0x46>
 8008850:	4628      	mov	r0, r5
 8008852:	f7ff fb2b 	bl	8007eac <_free_r>
 8008856:	2300      	movs	r3, #0
 8008858:	6363      	str	r3, [r4, #52]	@ 0x34
 800885a:	89a3      	ldrh	r3, [r4, #12]
 800885c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008860:	81a3      	strh	r3, [r4, #12]
 8008862:	2300      	movs	r3, #0
 8008864:	6063      	str	r3, [r4, #4]
 8008866:	6923      	ldr	r3, [r4, #16]
 8008868:	6023      	str	r3, [r4, #0]
 800886a:	89a3      	ldrh	r3, [r4, #12]
 800886c:	f043 0308 	orr.w	r3, r3, #8
 8008870:	81a3      	strh	r3, [r4, #12]
 8008872:	6923      	ldr	r3, [r4, #16]
 8008874:	b94b      	cbnz	r3, 800888a <__swsetup_r+0x7a>
 8008876:	89a3      	ldrh	r3, [r4, #12]
 8008878:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800887c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008880:	d003      	beq.n	800888a <__swsetup_r+0x7a>
 8008882:	4621      	mov	r1, r4
 8008884:	4628      	mov	r0, r5
 8008886:	f000 f84f 	bl	8008928 <__smakebuf_r>
 800888a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800888e:	f013 0201 	ands.w	r2, r3, #1
 8008892:	d00a      	beq.n	80088aa <__swsetup_r+0x9a>
 8008894:	2200      	movs	r2, #0
 8008896:	60a2      	str	r2, [r4, #8]
 8008898:	6962      	ldr	r2, [r4, #20]
 800889a:	4252      	negs	r2, r2
 800889c:	61a2      	str	r2, [r4, #24]
 800889e:	6922      	ldr	r2, [r4, #16]
 80088a0:	b942      	cbnz	r2, 80088b4 <__swsetup_r+0xa4>
 80088a2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80088a6:	d1c5      	bne.n	8008834 <__swsetup_r+0x24>
 80088a8:	bd38      	pop	{r3, r4, r5, pc}
 80088aa:	0799      	lsls	r1, r3, #30
 80088ac:	bf58      	it	pl
 80088ae:	6962      	ldrpl	r2, [r4, #20]
 80088b0:	60a2      	str	r2, [r4, #8]
 80088b2:	e7f4      	b.n	800889e <__swsetup_r+0x8e>
 80088b4:	2000      	movs	r0, #0
 80088b6:	e7f7      	b.n	80088a8 <__swsetup_r+0x98>
 80088b8:	200004cc 	.word	0x200004cc

080088bc <_sbrk_r>:
 80088bc:	b538      	push	{r3, r4, r5, lr}
 80088be:	4d06      	ldr	r5, [pc, #24]	@ (80088d8 <_sbrk_r+0x1c>)
 80088c0:	2300      	movs	r3, #0
 80088c2:	4604      	mov	r4, r0
 80088c4:	4608      	mov	r0, r1
 80088c6:	602b      	str	r3, [r5, #0]
 80088c8:	f7fb f978 	bl	8003bbc <_sbrk>
 80088cc:	1c43      	adds	r3, r0, #1
 80088ce:	d102      	bne.n	80088d6 <_sbrk_r+0x1a>
 80088d0:	682b      	ldr	r3, [r5, #0]
 80088d2:	b103      	cbz	r3, 80088d6 <_sbrk_r+0x1a>
 80088d4:	6023      	str	r3, [r4, #0]
 80088d6:	bd38      	pop	{r3, r4, r5, pc}
 80088d8:	20001abc 	.word	0x20001abc

080088dc <__swhatbuf_r>:
 80088dc:	b570      	push	{r4, r5, r6, lr}
 80088de:	460c      	mov	r4, r1
 80088e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088e4:	2900      	cmp	r1, #0
 80088e6:	b096      	sub	sp, #88	@ 0x58
 80088e8:	4615      	mov	r5, r2
 80088ea:	461e      	mov	r6, r3
 80088ec:	da0d      	bge.n	800890a <__swhatbuf_r+0x2e>
 80088ee:	89a3      	ldrh	r3, [r4, #12]
 80088f0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80088f4:	f04f 0100 	mov.w	r1, #0
 80088f8:	bf14      	ite	ne
 80088fa:	2340      	movne	r3, #64	@ 0x40
 80088fc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008900:	2000      	movs	r0, #0
 8008902:	6031      	str	r1, [r6, #0]
 8008904:	602b      	str	r3, [r5, #0]
 8008906:	b016      	add	sp, #88	@ 0x58
 8008908:	bd70      	pop	{r4, r5, r6, pc}
 800890a:	466a      	mov	r2, sp
 800890c:	f000 f848 	bl	80089a0 <_fstat_r>
 8008910:	2800      	cmp	r0, #0
 8008912:	dbec      	blt.n	80088ee <__swhatbuf_r+0x12>
 8008914:	9901      	ldr	r1, [sp, #4]
 8008916:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800891a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800891e:	4259      	negs	r1, r3
 8008920:	4159      	adcs	r1, r3
 8008922:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008926:	e7eb      	b.n	8008900 <__swhatbuf_r+0x24>

08008928 <__smakebuf_r>:
 8008928:	898b      	ldrh	r3, [r1, #12]
 800892a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800892c:	079d      	lsls	r5, r3, #30
 800892e:	4606      	mov	r6, r0
 8008930:	460c      	mov	r4, r1
 8008932:	d507      	bpl.n	8008944 <__smakebuf_r+0x1c>
 8008934:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008938:	6023      	str	r3, [r4, #0]
 800893a:	6123      	str	r3, [r4, #16]
 800893c:	2301      	movs	r3, #1
 800893e:	6163      	str	r3, [r4, #20]
 8008940:	b003      	add	sp, #12
 8008942:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008944:	ab01      	add	r3, sp, #4
 8008946:	466a      	mov	r2, sp
 8008948:	f7ff ffc8 	bl	80088dc <__swhatbuf_r>
 800894c:	9f00      	ldr	r7, [sp, #0]
 800894e:	4605      	mov	r5, r0
 8008950:	4639      	mov	r1, r7
 8008952:	4630      	mov	r0, r6
 8008954:	f7ff fb16 	bl	8007f84 <_malloc_r>
 8008958:	b948      	cbnz	r0, 800896e <__smakebuf_r+0x46>
 800895a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800895e:	059a      	lsls	r2, r3, #22
 8008960:	d4ee      	bmi.n	8008940 <__smakebuf_r+0x18>
 8008962:	f023 0303 	bic.w	r3, r3, #3
 8008966:	f043 0302 	orr.w	r3, r3, #2
 800896a:	81a3      	strh	r3, [r4, #12]
 800896c:	e7e2      	b.n	8008934 <__smakebuf_r+0xc>
 800896e:	89a3      	ldrh	r3, [r4, #12]
 8008970:	6020      	str	r0, [r4, #0]
 8008972:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008976:	81a3      	strh	r3, [r4, #12]
 8008978:	9b01      	ldr	r3, [sp, #4]
 800897a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800897e:	b15b      	cbz	r3, 8008998 <__smakebuf_r+0x70>
 8008980:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008984:	4630      	mov	r0, r6
 8008986:	f000 f81d 	bl	80089c4 <_isatty_r>
 800898a:	b128      	cbz	r0, 8008998 <__smakebuf_r+0x70>
 800898c:	89a3      	ldrh	r3, [r4, #12]
 800898e:	f023 0303 	bic.w	r3, r3, #3
 8008992:	f043 0301 	orr.w	r3, r3, #1
 8008996:	81a3      	strh	r3, [r4, #12]
 8008998:	89a3      	ldrh	r3, [r4, #12]
 800899a:	431d      	orrs	r5, r3
 800899c:	81a5      	strh	r5, [r4, #12]
 800899e:	e7cf      	b.n	8008940 <__smakebuf_r+0x18>

080089a0 <_fstat_r>:
 80089a0:	b538      	push	{r3, r4, r5, lr}
 80089a2:	4d07      	ldr	r5, [pc, #28]	@ (80089c0 <_fstat_r+0x20>)
 80089a4:	2300      	movs	r3, #0
 80089a6:	4604      	mov	r4, r0
 80089a8:	4608      	mov	r0, r1
 80089aa:	4611      	mov	r1, r2
 80089ac:	602b      	str	r3, [r5, #0]
 80089ae:	f7fb f8fb 	bl	8003ba8 <_fstat>
 80089b2:	1c43      	adds	r3, r0, #1
 80089b4:	d102      	bne.n	80089bc <_fstat_r+0x1c>
 80089b6:	682b      	ldr	r3, [r5, #0]
 80089b8:	b103      	cbz	r3, 80089bc <_fstat_r+0x1c>
 80089ba:	6023      	str	r3, [r4, #0]
 80089bc:	bd38      	pop	{r3, r4, r5, pc}
 80089be:	bf00      	nop
 80089c0:	20001abc 	.word	0x20001abc

080089c4 <_isatty_r>:
 80089c4:	b538      	push	{r3, r4, r5, lr}
 80089c6:	4d06      	ldr	r5, [pc, #24]	@ (80089e0 <_isatty_r+0x1c>)
 80089c8:	2300      	movs	r3, #0
 80089ca:	4604      	mov	r4, r0
 80089cc:	4608      	mov	r0, r1
 80089ce:	602b      	str	r3, [r5, #0]
 80089d0:	f7fb f8f0 	bl	8003bb4 <_isatty>
 80089d4:	1c43      	adds	r3, r0, #1
 80089d6:	d102      	bne.n	80089de <_isatty_r+0x1a>
 80089d8:	682b      	ldr	r3, [r5, #0]
 80089da:	b103      	cbz	r3, 80089de <_isatty_r+0x1a>
 80089dc:	6023      	str	r3, [r4, #0]
 80089de:	bd38      	pop	{r3, r4, r5, pc}
 80089e0:	20001abc 	.word	0x20001abc

080089e4 <_init>:
 80089e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089e6:	bf00      	nop
 80089e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089ea:	bc08      	pop	{r3}
 80089ec:	469e      	mov	lr, r3
 80089ee:	4770      	bx	lr

080089f0 <_fini>:
 80089f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089f2:	bf00      	nop
 80089f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089f6:	bc08      	pop	{r3}
 80089f8:	469e      	mov	lr, r3
 80089fa:	4770      	bx	lr
