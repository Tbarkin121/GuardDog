
F4_SpeedMode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080cc  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000418  08008294  08008294  00009294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086ac  080086ac  0000a680  2**0
                  CONTENTS
  4 .ARM          00000008  080086ac  080086ac  000096ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080086b4  080086b4  0000a680  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086b4  080086b4  000096b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080086b8  080086b8  000096b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000680  20000000  080086bc  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001428  20000680  08008d3c  0000a680  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001aa8  08008d3c  0000aaa8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a680  2**0
                  CONTENTS, READONLY
 12 .debug_line   0003c35b  00000000  00000000  0000a6b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 00000087  00000000  00000000  00046a0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   000395da  00000000  00000000  00046a92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00007f45  00000000  00000000  0008006c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001cc0  00000000  00000000  00087fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000f676b  00000000  00000000  00089c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000027c6  00000000  00000000  001803e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loclists 00018a28  00000000  00000000  00182ba9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002c54d  00000000  00000000  0019b5d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001c7b1e  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00004ac8  00000000  00000000  001c7b64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000680 	.word	0x20000680
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800827c 	.word	0x0800827c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000684 	.word	0x20000684
 8000204:	0800827c 	.word	0x0800827c

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b96a 	b.w	80004f4 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	460c      	mov	r4, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14e      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000244:	4694      	mov	ip, r2
 8000246:	458c      	cmp	ip, r1
 8000248:	4686      	mov	lr, r0
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	d962      	bls.n	8000316 <__udivmoddi4+0xde>
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0320 	rsb	r3, r2, #32
 8000256:	4091      	lsls	r1, r2
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000260:	4319      	orrs	r1, r3
 8000262:	fa00 fe02 	lsl.w	lr, r0, r2
 8000266:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800026a:	fa1f f68c 	uxth.w	r6, ip
 800026e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000272:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000276:	fb07 1114 	mls	r1, r7, r4, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb04 f106 	mul.w	r1, r4, r6
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f104 30ff 	add.w	r0, r4, #4294967295
 800028e:	f080 8112 	bcs.w	80004b6 <__udivmoddi4+0x27e>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 810f 	bls.w	80004b6 <__udivmoddi4+0x27e>
 8000298:	3c02      	subs	r4, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a59      	subs	r1, r3, r1
 800029e:	fa1f f38e 	uxth.w	r3, lr
 80002a2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a6:	fb07 1110 	mls	r1, r7, r0, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb00 f606 	mul.w	r6, r0, r6
 80002b2:	429e      	cmp	r6, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x94>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f100 31ff 	add.w	r1, r0, #4294967295
 80002be:	f080 80fc 	bcs.w	80004ba <__udivmoddi4+0x282>
 80002c2:	429e      	cmp	r6, r3
 80002c4:	f240 80f9 	bls.w	80004ba <__udivmoddi4+0x282>
 80002c8:	4463      	add	r3, ip
 80002ca:	3802      	subs	r0, #2
 80002cc:	1b9b      	subs	r3, r3, r6
 80002ce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002d2:	2100      	movs	r1, #0
 80002d4:	b11d      	cbz	r5, 80002de <__udivmoddi4+0xa6>
 80002d6:	40d3      	lsrs	r3, r2
 80002d8:	2200      	movs	r2, #0
 80002da:	e9c5 3200 	strd	r3, r2, [r5]
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d905      	bls.n	80002f2 <__udivmoddi4+0xba>
 80002e6:	b10d      	cbz	r5, 80002ec <__udivmoddi4+0xb4>
 80002e8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ec:	2100      	movs	r1, #0
 80002ee:	4608      	mov	r0, r1
 80002f0:	e7f5      	b.n	80002de <__udivmoddi4+0xa6>
 80002f2:	fab3 f183 	clz	r1, r3
 80002f6:	2900      	cmp	r1, #0
 80002f8:	d146      	bne.n	8000388 <__udivmoddi4+0x150>
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xcc>
 80002fe:	4290      	cmp	r0, r2
 8000300:	f0c0 80f0 	bcc.w	80004e4 <__udivmoddi4+0x2ac>
 8000304:	1a86      	subs	r6, r0, r2
 8000306:	eb64 0303 	sbc.w	r3, r4, r3
 800030a:	2001      	movs	r0, #1
 800030c:	2d00      	cmp	r5, #0
 800030e:	d0e6      	beq.n	80002de <__udivmoddi4+0xa6>
 8000310:	e9c5 6300 	strd	r6, r3, [r5]
 8000314:	e7e3      	b.n	80002de <__udivmoddi4+0xa6>
 8000316:	2a00      	cmp	r2, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x204>
 800031c:	eba1 040c 	sub.w	r4, r1, ip
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	fa1f f78c 	uxth.w	r7, ip
 8000328:	2101      	movs	r1, #1
 800032a:	fbb4 f6f8 	udiv	r6, r4, r8
 800032e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000332:	fb08 4416 	mls	r4, r8, r6, r4
 8000336:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033a:	fb07 f006 	mul.w	r0, r7, r6
 800033e:	4298      	cmp	r0, r3
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x11c>
 8000342:	eb1c 0303 	adds.w	r3, ip, r3
 8000346:	f106 34ff 	add.w	r4, r6, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x11a>
 800034c:	4298      	cmp	r0, r3
 800034e:	f200 80cd 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 8000352:	4626      	mov	r6, r4
 8000354:	1a1c      	subs	r4, r3, r0
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb4 f0f8 	udiv	r0, r4, r8
 800035e:	fb08 4410 	mls	r4, r8, r0, r4
 8000362:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000366:	fb00 f707 	mul.w	r7, r0, r7
 800036a:	429f      	cmp	r7, r3
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x148>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 34ff 	add.w	r4, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x146>
 8000378:	429f      	cmp	r7, r3
 800037a:	f200 80b0 	bhi.w	80004de <__udivmoddi4+0x2a6>
 800037e:	4620      	mov	r0, r4
 8000380:	1bdb      	subs	r3, r3, r7
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0x9c>
 8000388:	f1c1 0620 	rsb	r6, r1, #32
 800038c:	408b      	lsls	r3, r1
 800038e:	fa22 f706 	lsr.w	r7, r2, r6
 8000392:	431f      	orrs	r7, r3
 8000394:	fa20 fc06 	lsr.w	ip, r0, r6
 8000398:	fa04 f301 	lsl.w	r3, r4, r1
 800039c:	ea43 030c 	orr.w	r3, r3, ip
 80003a0:	40f4      	lsrs	r4, r6
 80003a2:	fa00 f801 	lsl.w	r8, r0, r1
 80003a6:	0c38      	lsrs	r0, r7, #16
 80003a8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003ac:	fbb4 fef0 	udiv	lr, r4, r0
 80003b0:	fa1f fc87 	uxth.w	ip, r7
 80003b4:	fb00 441e 	mls	r4, r0, lr, r4
 80003b8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003bc:	fb0e f90c 	mul.w	r9, lr, ip
 80003c0:	45a1      	cmp	r9, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	d90a      	bls.n	80003de <__udivmoddi4+0x1a6>
 80003c8:	193c      	adds	r4, r7, r4
 80003ca:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ce:	f080 8084 	bcs.w	80004da <__udivmoddi4+0x2a2>
 80003d2:	45a1      	cmp	r9, r4
 80003d4:	f240 8081 	bls.w	80004da <__udivmoddi4+0x2a2>
 80003d8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003dc:	443c      	add	r4, r7
 80003de:	eba4 0409 	sub.w	r4, r4, r9
 80003e2:	fa1f f983 	uxth.w	r9, r3
 80003e6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ea:	fb00 4413 	mls	r4, r0, r3, r4
 80003ee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003f2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d907      	bls.n	800040a <__udivmoddi4+0x1d2>
 80003fa:	193c      	adds	r4, r7, r4
 80003fc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000400:	d267      	bcs.n	80004d2 <__udivmoddi4+0x29a>
 8000402:	45a4      	cmp	ip, r4
 8000404:	d965      	bls.n	80004d2 <__udivmoddi4+0x29a>
 8000406:	3b02      	subs	r3, #2
 8000408:	443c      	add	r4, r7
 800040a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040e:	fba0 9302 	umull	r9, r3, r0, r2
 8000412:	eba4 040c 	sub.w	r4, r4, ip
 8000416:	429c      	cmp	r4, r3
 8000418:	46ce      	mov	lr, r9
 800041a:	469c      	mov	ip, r3
 800041c:	d351      	bcc.n	80004c2 <__udivmoddi4+0x28a>
 800041e:	d04e      	beq.n	80004be <__udivmoddi4+0x286>
 8000420:	b155      	cbz	r5, 8000438 <__udivmoddi4+0x200>
 8000422:	ebb8 030e 	subs.w	r3, r8, lr
 8000426:	eb64 040c 	sbc.w	r4, r4, ip
 800042a:	fa04 f606 	lsl.w	r6, r4, r6
 800042e:	40cb      	lsrs	r3, r1
 8000430:	431e      	orrs	r6, r3
 8000432:	40cc      	lsrs	r4, r1
 8000434:	e9c5 6400 	strd	r6, r4, [r5]
 8000438:	2100      	movs	r1, #0
 800043a:	e750      	b.n	80002de <__udivmoddi4+0xa6>
 800043c:	f1c2 0320 	rsb	r3, r2, #32
 8000440:	fa20 f103 	lsr.w	r1, r0, r3
 8000444:	fa0c fc02 	lsl.w	ip, ip, r2
 8000448:	fa24 f303 	lsr.w	r3, r4, r3
 800044c:	4094      	lsls	r4, r2
 800044e:	430c      	orrs	r4, r1
 8000450:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000454:	fa00 fe02 	lsl.w	lr, r0, r2
 8000458:	fa1f f78c 	uxth.w	r7, ip
 800045c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000460:	fb08 3110 	mls	r1, r8, r0, r3
 8000464:	0c23      	lsrs	r3, r4, #16
 8000466:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046a:	fb00 f107 	mul.w	r1, r0, r7
 800046e:	4299      	cmp	r1, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x24c>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 36ff 	add.w	r6, r0, #4294967295
 800047a:	d22c      	bcs.n	80004d6 <__udivmoddi4+0x29e>
 800047c:	4299      	cmp	r1, r3
 800047e:	d92a      	bls.n	80004d6 <__udivmoddi4+0x29e>
 8000480:	3802      	subs	r0, #2
 8000482:	4463      	add	r3, ip
 8000484:	1a5b      	subs	r3, r3, r1
 8000486:	b2a4      	uxth	r4, r4
 8000488:	fbb3 f1f8 	udiv	r1, r3, r8
 800048c:	fb08 3311 	mls	r3, r8, r1, r3
 8000490:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000494:	fb01 f307 	mul.w	r3, r1, r7
 8000498:	42a3      	cmp	r3, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x276>
 800049c:	eb1c 0404 	adds.w	r4, ip, r4
 80004a0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a4:	d213      	bcs.n	80004ce <__udivmoddi4+0x296>
 80004a6:	42a3      	cmp	r3, r4
 80004a8:	d911      	bls.n	80004ce <__udivmoddi4+0x296>
 80004aa:	3902      	subs	r1, #2
 80004ac:	4464      	add	r4, ip
 80004ae:	1ae4      	subs	r4, r4, r3
 80004b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b4:	e739      	b.n	800032a <__udivmoddi4+0xf2>
 80004b6:	4604      	mov	r4, r0
 80004b8:	e6f0      	b.n	800029c <__udivmoddi4+0x64>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e706      	b.n	80002cc <__udivmoddi4+0x94>
 80004be:	45c8      	cmp	r8, r9
 80004c0:	d2ae      	bcs.n	8000420 <__udivmoddi4+0x1e8>
 80004c2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ca:	3801      	subs	r0, #1
 80004cc:	e7a8      	b.n	8000420 <__udivmoddi4+0x1e8>
 80004ce:	4631      	mov	r1, r6
 80004d0:	e7ed      	b.n	80004ae <__udivmoddi4+0x276>
 80004d2:	4603      	mov	r3, r0
 80004d4:	e799      	b.n	800040a <__udivmoddi4+0x1d2>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e7d4      	b.n	8000484 <__udivmoddi4+0x24c>
 80004da:	46d6      	mov	lr, sl
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1a6>
 80004de:	4463      	add	r3, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e74d      	b.n	8000380 <__udivmoddi4+0x148>
 80004e4:	4606      	mov	r6, r0
 80004e6:	4623      	mov	r3, r4
 80004e8:	4608      	mov	r0, r1
 80004ea:	e70f      	b.n	800030c <__udivmoddi4+0xd4>
 80004ec:	3e02      	subs	r6, #2
 80004ee:	4463      	add	r3, ip
 80004f0:	e730      	b.n	8000354 <__udivmoddi4+0x11c>
 80004f2:	bf00      	nop

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80004f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000530 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80004fc:	480d      	ldr	r0, [pc, #52]	@ (8000534 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80004fe:	490e      	ldr	r1, [pc, #56]	@ (8000538 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000500:	4a0e      	ldr	r2, [pc, #56]	@ (800053c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000502:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000504:	e002      	b.n	800050c <LoopCopyDataInit>

08000506 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000506:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000508:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800050a:	3304      	adds	r3, #4

0800050c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800050c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800050e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000510:	d3f9      	bcc.n	8000506 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000512:	4a0b      	ldr	r2, [pc, #44]	@ (8000540 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000514:	4c0b      	ldr	r4, [pc, #44]	@ (8000544 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000516:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000518:	e001      	b.n	800051e <LoopFillZerobss>

0800051a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800051a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800051c:	3204      	adds	r2, #4

0800051e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800051e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000520:	d3fb      	bcc.n	800051a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000522:	f003 ff91 	bl	8004448 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000526:	f007 fe77 	bl	8008218 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800052a:	f000 fbcd 	bl	8000cc8 <main>
  bx  lr    
 800052e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000530:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000534:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000538:	20000680 	.word	0x20000680
  ldr r2, =_sidata
 800053c:	080086bc 	.word	0x080086bc
  ldr r2, =_sbss
 8000540:	20000680 	.word	0x20000680
  ldr r4, =_ebss
 8000544:	20001aa8 	.word	0x20001aa8

08000548 <BusFault_Handler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000548:	e7fe      	b.n	8000548 <BusFault_Handler>
	...

0800054c <ASPEP_start>:
  * @brief  Starts ASPEP communication by configuring UART.
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_start(ASPEP_Handle_t *pHandle)
{
 800054c:	b570      	push	{r4, r5, r6, lr}
 800054e:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->fASPEP_HWInit(pHandle->HWIp);
 8000550:	6940      	ldr	r0, [r0, #20]
 8000552:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8000554:	4798      	blx	r3
    pHandle->ASPEP_State = ASPEP_IDLE;
 8000556:	2300      	movs	r3, #0
    pHandle->ASPEP_TL_State = WAITING_PACKET;
    pHandle->syncPacketCount = 0; /* Sync packet counter is reset only at startup*/

    /* Configure UART to receive first packet*/
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000558:	6d65      	ldr	r5, [r4, #84]	@ 0x54
    pHandle->ASPEP_State = ASPEP_IDLE;
 800055a:	f8a4 3064 	strh.w	r3, [r4, #100]	@ 0x64
    pHandle->syncPacketCount = 0; /* Sync packet counter is reset only at startup*/
 800055e:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000562:	6960      	ldr	r0, [r4, #20]
 8000564:	f104 011c 	add.w	r1, r4, #28
 8000568:	462b      	mov	r3, r5
 800056a:	2204      	movs	r2, #4
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 800056c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000570:	4718      	bx	r3
 8000572:	bf00      	nop

08000574 <ASPEP_sendBeacon>:
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  * @param  *capabilities Matched capabilities between controller and performer
  */
void ASPEP_sendBeacon(ASPEP_Handle_t *pHandle, ASPEP_Capabilities_def *capabilities)
{
 8000574:	b410      	push	{r4}
  {
#endif
    uint32_t *packet = (uint32_t *)pHandle->ctrlBuffer.buffer; //cstat !MISRAC2012-Rule-11.3
    *packet = (BEACON
             | (((uint32_t)capabilities->version) << 4U)
             | (((uint32_t)capabilities->DATA_CRC) << 7U)
 8000576:	780b      	ldrb	r3, [r1, #0]
             | (((uint32_t)capabilities->version) << 4U)
 8000578:	790a      	ldrb	r2, [r1, #4]
             | (((uint32_t)capabilities->RX_maxSize) << 8U)
             | (((uint32_t)capabilities->TXS_maxSize) << 14U)
 800057a:	f891 c002 	ldrb.w	ip, [r1, #2]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 800057e:	4c1e      	ldr	r4, [pc, #120]	@ (80005f8 <ASPEP_sendBeacon+0x84>)
             | (((uint32_t)capabilities->DATA_CRC) << 7U)
 8000580:	01db      	lsls	r3, r3, #7
 8000582:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
             | (((uint32_t)capabilities->RX_maxSize) << 8U)
 8000586:	784a      	ldrb	r2, [r1, #1]
 8000588:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
             | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 800058c:	78ca      	ldrb	r2, [r1, #3]
             | (((uint32_t)capabilities->TXS_maxSize) << 14U)
 800058e:	ea43 338c 	orr.w	r3, r3, ip, lsl #14
             | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 8000592:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000596:	b2da      	uxtb	r2, r3
 8000598:	f042 0205 	orr.w	r2, r2, #5
  header &= 0x0fffffffU;
 800059c:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 80005a0:	5ca2      	ldrb	r2, [r4, r2]
 80005a2:	ea82 2211 	eor.w	r2, r2, r1, lsr #8
 80005a6:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 80005a8:	5ca2      	ldrb	r2, [r4, r2]
 80005aa:	ea82 4211 	eor.w	r2, r2, r1, lsr #16
 80005ae:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 80005b0:	5ca2      	ldrb	r2, [r4, r2]
 80005b2:	4c12      	ldr	r4, [pc, #72]	@ (80005fc <ASPEP_sendBeacon+0x88>)
 80005b4:	ea82 6211 	eor.w	r2, r2, r1, lsr #24
  *headerPtr |= (uint32_t)crc << 28;
 80005b8:	5ca2      	ldrb	r2, [r4, r2]
 80005ba:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80005be:	f043 0305 	orr.w	r3, r3, #5
 80005c2:	6203      	str	r3, [r0, #32]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005c4:	b672      	cpsid	i
  {
#endif
    /* Insert CRC header in the packet to send */
    ASPEP_ComputeHeaderCRC((uint32_t *)txBuffer); //cstat !MISRAC2012-Rule-11.5
    __disable_irq(); /*TODO: Disable High frequency task is enough */
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 80005c6:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 80005c8:	b14b      	cbz	r3, 80005de <ASPEP_sendBeacon+0x6a>
  __ASM volatile ("cpsie i" : : : "memory");
 80005ca:	b662      	cpsie	i
          pHandle->syncBuffer.length = bufferLength;
        }
      }
      else if(ASPEP_CTRL == dataType)
      {
        if (pHandle->ctrlBuffer.state != available)
 80005cc:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 80005d0:	b913      	cbnz	r3, 80005d8 <ASPEP_sendBeacon+0x64>
        {
          result = ASPEP_BUFFER_ERROR;
        }
        else
        {
          pHandle->ctrlBuffer.state = pending;
 80005d2:	2302      	movs	r3, #2
 80005d4:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
}
 80005d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80005dc:	4770      	bx	lr
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 80005de:	f100 0120 	add.w	r1, r0, #32
        pHandle->ctrlBuffer.state = readLock;
 80005e2:	2303      	movs	r3, #3
 80005e4:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 80005e8:	6481      	str	r1, [r0, #72]	@ 0x48
 80005ea:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 80005ec:	2204      	movs	r2, #4
 80005ee:	6d83      	ldr	r3, [r0, #88]	@ 0x58
}
 80005f0:	f85d 4b04 	ldr.w	r4, [sp], #4
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 80005f4:	6940      	ldr	r0, [r0, #20]
 80005f6:	4718      	bx	r3
 80005f8:	080082a4 	.word	0x080082a4
 80005fc:	08008294 	.word	0x08008294

08000600 <ASPEP_sendPing>:
{
 8000600:	b430      	push	{r4, r5}
                   | (uint32_t)((uint32_t)cBit << 5U)
 8000602:	014b      	lsls	r3, r1, #5
    uint8_t Nbit = pHandle->syncPacketCount & 0x1U; /* Keep only LSB */
 8000604:	f890 c060 	ldrb.w	ip, [r0, #96]	@ 0x60
    uint8_t ipID = pHandle->liid & 0xFU;
 8000608:	f890 4063 	ldrb.w	r4, [r0, #99]	@ 0x63
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 800060c:	4d1d      	ldr	r5, [pc, #116]	@ (8000684 <ASPEP_sendPing+0x84>)
                   | (uint32_t)((uint32_t)cBit << 5U)
 800060e:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000612:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
                   | (uint32_t)((uint32_t)Nbit << 6U)
 8000616:	f00c 0101 	and.w	r1, ip, #1
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 800061a:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800061e:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
                   | (uint32_t)((uint32_t)ipID << 8U)
 8000622:	f004 040f 	and.w	r4, r4, #15
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000626:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 800062a:	b2da      	uxtb	r2, r3
 800062c:	4c16      	ldr	r4, [pc, #88]	@ (8000688 <ASPEP_sendPing+0x88>)
 800062e:	f042 0206 	orr.w	r2, r2, #6
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000632:	f043 0106 	orr.w	r1, r3, #6
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000636:	5ca2      	ldrb	r2, [r4, r2]
 8000638:	ea82 2213 	eor.w	r2, r2, r3, lsr #8
 800063c:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 800063e:	5ca2      	ldrb	r2, [r4, r2]
 8000640:	ea82 4213 	eor.w	r2, r2, r3, lsr #16
 8000644:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000646:	5ca2      	ldrb	r2, [r4, r2]
 8000648:	ea82 6313 	eor.w	r3, r2, r3, lsr #24
  *headerPtr |= (uint32_t)crc << 28;
 800064c:	5ceb      	ldrb	r3, [r5, r3]
 800064e:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
 8000652:	6203      	str	r3, [r0, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8000654:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8000656:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8000658:	b143      	cbz	r3, 800066c <ASPEP_sendPing+0x6c>
  __ASM volatile ("cpsie i" : : : "memory");
 800065a:	b662      	cpsie	i
        if (pHandle->ctrlBuffer.state != available)
 800065c:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8000660:	b913      	cbnz	r3, 8000668 <ASPEP_sendPing+0x68>
          pHandle->ctrlBuffer.state = pending;
 8000662:	2302      	movs	r3, #2
 8000664:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
}
 8000668:	bc30      	pop	{r4, r5}
 800066a:	4770      	bx	lr
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 800066c:	f100 0120 	add.w	r1, r0, #32
        pHandle->ctrlBuffer.state = readLock;
 8000670:	2303      	movs	r3, #3
 8000672:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8000676:	6481      	str	r1, [r0, #72]	@ 0x48
 8000678:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 800067a:	2204      	movs	r2, #4
 800067c:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 800067e:	6940      	ldr	r0, [r0, #20]
}
 8000680:	bc30      	pop	{r4, r5}
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8000682:	4718      	bx	r3
 8000684:	08008294 	.word	0x08008294
 8000688:	080082a4 	.word	0x080082a4

0800068c <ASPEP_getBuffer>:
    if (MCTL_SYNC == syncAsync)
 800068c:	2a0a      	cmp	r2, #10
 800068e:	d009      	beq.n	80006a4 <ASPEP_getBuffer+0x18>
      if ((pHandle->asyncBufferA.state > writeLock) && (pHandle->asyncBufferB.state > writeLock))
 8000690:	f890 3036 	ldrb.w	r3, [r0, #54]	@ 0x36
 8000694:	2b01      	cmp	r3, #1
 8000696:	d91d      	bls.n	80006d4 <ASPEP_getBuffer+0x48>
 8000698:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 800069c:	2b01      	cmp	r3, #1
 800069e:	d90d      	bls.n	80006bc <ASPEP_getBuffer+0x30>
        result = false;
 80006a0:	2000      	movs	r0, #0
}
 80006a2:	4770      	bx	lr
      if (pHandle->syncBuffer.state <= writeLock) /* Possible values are free or writeLock*/
 80006a4:	f890 302e 	ldrb.w	r3, [r0, #46]	@ 0x2e
 80006a8:	2b01      	cmp	r3, #1
 80006aa:	d8f9      	bhi.n	80006a0 <ASPEP_getBuffer+0x14>
        *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 80006ac:	6a83      	ldr	r3, [r0, #40]	@ 0x28
        pHandle->syncBuffer.state = writeLock;
 80006ae:	2201      	movs	r2, #1
        *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 80006b0:	3304      	adds	r3, #4
 80006b2:	600b      	str	r3, [r1, #0]
        pHandle->syncBuffer.state = writeLock;
 80006b4:	f880 202e 	strb.w	r2, [r0, #46]	@ 0x2e
  bool result = true;
 80006b8:	2001      	movs	r0, #1
 80006ba:	4770      	bx	lr
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 80006bc:	6b83      	ldr	r3, [r0, #56]	@ 0x38
          pHandle->asyncBufferB.state = writeLock;
 80006be:	f04f 0c01 	mov.w	ip, #1
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferB;
 80006c2:	f100 0238 	add.w	r2, r0, #56	@ 0x38
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 80006c6:	3304      	adds	r3, #4
          pHandle->asyncBufferB.state = writeLock;
 80006c8:	f880 c03e 	strb.w	ip, [r0, #62]	@ 0x3e
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferB;
 80006cc:	6402      	str	r2, [r0, #64]	@ 0x40
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 80006ce:	600b      	str	r3, [r1, #0]
  bool result = true;
 80006d0:	2001      	movs	r0, #1
 80006d2:	4770      	bx	lr
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 80006d4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
          pHandle->asyncBufferA.state = writeLock;
 80006d6:	f04f 0c01 	mov.w	ip, #1
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferA;
 80006da:	f100 0230 	add.w	r2, r0, #48	@ 0x30
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 80006de:	3304      	adds	r3, #4
          pHandle->asyncBufferA.state = writeLock;
 80006e0:	f880 c036 	strb.w	ip, [r0, #54]	@ 0x36
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferA;
 80006e4:	6402      	str	r2, [r0, #64]	@ 0x40
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 80006e6:	600b      	str	r3, [r1, #0]
 80006e8:	e7f2      	b.n	80006d0 <ASPEP_getBuffer+0x44>
 80006ea:	bf00      	nop

080006ec <ASPEP_sendPacket>:
{
 80006ec:	4684      	mov	ip, r0
    if (ASPEP_CONNECTED == pHandle-> ASPEP_State)
 80006ee:	f890 0064 	ldrb.w	r0, [r0, #100]	@ 0x64
 80006f2:	2802      	cmp	r0, #2
 80006f4:	d001      	beq.n	80006fa <ASPEP_sendPacket+0xe>
      result = ASPEP_NOT_CONNECTED;
 80006f6:	2002      	movs	r0, #2
 80006f8:	4770      	bx	lr
      tmpHeader = ((uint32_t)((uint32_t)txDataLengthTemp << (uint32_t)4) | (uint32_t)syncAsync);
 80006fa:	ea43 1002 	orr.w	r0, r3, r2, lsl #4
      *header = tmpHeader;
 80006fe:	f841 0c04 	str.w	r0, [r1, #-4]
      if (1U == pHandle->Capabilities.DATA_CRC)
 8000702:	f89c 006c 	ldrb.w	r0, [ip, #108]	@ 0x6c
 8000706:	2801      	cmp	r0, #1
 8000708:	d104      	bne.n	8000714 <ASPEP_sendPacket+0x28>
        packet[txDataLengthTemp] = (uint8_t)0xCA; /* Dummy CRC */
 800070a:	f64f 60ca 	movw	r0, #65226	@ 0xfeca
 800070e:	5288      	strh	r0, [r1, r2]
        txDataLengthTemp += (uint16_t)ASPEP_DATACRC_SIZE;
 8000710:	3202      	adds	r2, #2
 8000712:	b292      	uxth	r2, r2
      if (MCTL_SYNC == syncAsync)
 8000714:	2b0a      	cmp	r3, #10
 8000716:	d105      	bne.n	8000724 <ASPEP_sendPacket+0x38>
        if (pSupHandle->MCP_PacketAvailable)
 8000718:	f89c 0010 	ldrb.w	r0, [ip, #16]
 800071c:	b348      	cbz	r0, 8000772 <ASPEP_sendPacket+0x86>
          pSupHandle->MCP_PacketAvailable = false; /* CMD from controller is processed*/
 800071e:	2000      	movs	r0, #0
 8000720:	f88c 0010 	strb.w	r0, [ip, #16]
  uint32_t header = *headerPtr;
 8000724:	f851 0c04 	ldr.w	r0, [r1, #-4]
{
 8000728:	b570      	push	{r4, r5, r6, lr}
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 800072a:	4d34      	ldr	r5, [pc, #208]	@ (80007fc <ASPEP_sendPacket+0x110>)
 800072c:	b2c4      	uxtb	r4, r0
        result = ASPEP_TXframeProcess(pHandle, syncAsync, header, txDataLengthTemp + (uint16_t)ASPEP_HEADER_SIZE);
 800072e:	3204      	adds	r2, #4
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000730:	5d2e      	ldrb	r6, [r5, r4]
 8000732:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8000736:	4074      	eors	r4, r6
      header--; /* Header ues 4*8 bits on top of txBuffer*/
 8000738:	f1a1 0e04 	sub.w	lr, r1, #4
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 800073c:	5d2e      	ldrb	r6, [r5, r4]
 800073e:	f3c0 4407 	ubfx	r4, r0, #16, #8
 8000742:	4074      	eors	r4, r6
        result = ASPEP_TXframeProcess(pHandle, syncAsync, header, txDataLengthTemp + (uint16_t)ASPEP_HEADER_SIZE);
 8000744:	b292      	uxth	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000746:	5d2c      	ldrb	r4, [r5, r4]
 8000748:	f3c0 6503 	ubfx	r5, r0, #24, #4
 800074c:	406c      	eors	r4, r5
 800074e:	4d2c      	ldr	r5, [pc, #176]	@ (8000800 <ASPEP_sendPacket+0x114>)
  *headerPtr |= (uint32_t)crc << 28;
 8000750:	5d2c      	ldrb	r4, [r5, r4]
 8000752:	ea40 7004 	orr.w	r0, r0, r4, lsl #28
 8000756:	f841 0c04 	str.w	r0, [r1, #-4]
  __ASM volatile ("cpsid i" : : : "memory");
 800075a:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 800075c:	f8dc 1048 	ldr.w	r1, [ip, #72]	@ 0x48
 8000760:	b1b9      	cbz	r1, 8000792 <ASPEP_sendPacket+0xa6>
  __ASM volatile ("cpsie i" : : : "memory");
 8000762:	b662      	cpsie	i
      if (MCTL_ASYNC == dataType)
 8000764:	2b09      	cmp	r3, #9
 8000766:	d006      	beq.n	8000776 <ASPEP_sendPacket+0x8a>
      else if (MCTL_SYNC == dataType)
 8000768:	2b0a      	cmp	r3, #10
 800076a:	d02a      	beq.n	80007c2 <ASPEP_sendPacket+0xd6>
      else if(ASPEP_CTRL == dataType)
 800076c:	b37b      	cbz	r3, 80007ce <ASPEP_sendPacket+0xe2>
  uint8_t result = ASPEP_OK;
 800076e:	2000      	movs	r0, #0
}
 8000770:	bd70      	pop	{r4, r5, r6, pc}
          result = MCTL_SYNC_NOT_EXPECTED;
 8000772:	2001      	movs	r0, #1
}
 8000774:	4770      	bx	lr
        if (txBuffer != (uint8_t *)pHandle->lastRequestedAsyncBuff->buffer)
 8000776:	f8dc 3040 	ldr.w	r3, [ip, #64]	@ 0x40
 800077a:	6819      	ldr	r1, [r3, #0]
  uint8_t result = ASPEP_OK;
 800077c:	458e      	cmp	lr, r1
 800077e:	bf14      	ite	ne
 8000780:	2003      	movne	r0, #3
 8000782:	2000      	moveq	r0, #0
        if (NULL == pHandle->asyncNextBuffer)
 8000784:	f8dc 1044 	ldr.w	r1, [ip, #68]	@ 0x44
 8000788:	b3a1      	cbz	r1, 80007f4 <ASPEP_sendPacket+0x108>
        pHandle->lastRequestedAsyncBuff->state = pending;
 800078a:	2102      	movs	r1, #2
 800078c:	7199      	strb	r1, [r3, #6]
        pHandle->lastRequestedAsyncBuff->length = bufferLength;
 800078e:	809a      	strh	r2, [r3, #4]
}
 8000790:	bd70      	pop	{r4, r5, r6, pc}
      if (MCTL_ASYNC == dataType)
 8000792:	2b09      	cmp	r3, #9
 8000794:	d029      	beq.n	80007ea <ASPEP_sendPacket+0xfe>
      else if (MCTL_SYNC == dataType)
 8000796:	2b0a      	cmp	r3, #10
        pHandle->syncBuffer.state = readLock;
 8000798:	f04f 0303 	mov.w	r3, #3
 800079c:	bf0b      	itete	eq
 800079e:	f88c 302e 	strbeq.w	r3, [ip, #46]	@ 0x2e
        pHandle->ctrlBuffer.state = readLock;
 80007a2:	f88c 3024 	strbne.w	r3, [ip, #36]	@ 0x24
        pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 80007a6:	f10c 0328 	addeq.w	r3, ip, #40	@ 0x28
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 80007aa:	f10c 0320 	addne.w	r3, ip, #32
        pHandle->lockBuffer = (void *)pHandle->lastRequestedAsyncBuff;
 80007ae:	f8cc 3048 	str.w	r3, [ip, #72]	@ 0x48
 80007b2:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 80007b4:	f8dc 3058 	ldr.w	r3, [ip, #88]	@ 0x58
 80007b8:	f8dc 0014 	ldr.w	r0, [ip, #20]
 80007bc:	4671      	mov	r1, lr
 80007be:	4798      	blx	r3
 80007c0:	e7d5      	b.n	800076e <ASPEP_sendPacket+0x82>
        if (pHandle -> syncBuffer.state != writeLock)
 80007c2:	f89c 302e 	ldrb.w	r3, [ip, #46]	@ 0x2e
 80007c6:	2b01      	cmp	r3, #1
 80007c8:	d009      	beq.n	80007de <ASPEP_sendPacket+0xf2>
          result = ASPEP_BUFFER_ERROR;
 80007ca:	2003      	movs	r0, #3
}
 80007cc:	bd70      	pop	{r4, r5, r6, pc}
        if (pHandle->ctrlBuffer.state != available)
 80007ce:	f89c 3024 	ldrb.w	r3, [ip, #36]	@ 0x24
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d1f9      	bne.n	80007ca <ASPEP_sendPacket+0xde>
          pHandle->ctrlBuffer.state = pending;
 80007d6:	2302      	movs	r3, #2
 80007d8:	f88c 3024 	strb.w	r3, [ip, #36]	@ 0x24
 80007dc:	e7c7      	b.n	800076e <ASPEP_sendPacket+0x82>
          pHandle->syncBuffer.state = pending;
 80007de:	2302      	movs	r3, #2
 80007e0:	f88c 302e 	strb.w	r3, [ip, #46]	@ 0x2e
          pHandle->syncBuffer.length = bufferLength;
 80007e4:	f8ac 202c 	strh.w	r2, [ip, #44]	@ 0x2c
 80007e8:	e7c1      	b.n	800076e <ASPEP_sendPacket+0x82>
        pHandle->lastRequestedAsyncBuff->state = readLock;
 80007ea:	f8dc 3040 	ldr.w	r3, [ip, #64]	@ 0x40
 80007ee:	2103      	movs	r1, #3
 80007f0:	7199      	strb	r1, [r3, #6]
        pHandle->lockBuffer = (void *)pHandle->lastRequestedAsyncBuff;
 80007f2:	e7dc      	b.n	80007ae <ASPEP_sendPacket+0xc2>
          pHandle->asyncNextBuffer = pHandle->lastRequestedAsyncBuff;
 80007f4:	f8cc 3044 	str.w	r3, [ip, #68]	@ 0x44
 80007f8:	e7c7      	b.n	800078a <ASPEP_sendPacket+0x9e>
 80007fa:	bf00      	nop
 80007fc:	080082a4 	.word	0x080082a4
 8000800:	08008294 	.word	0x08008294

08000804 <ASPEP_HWDataTransmittedIT>:
  * Therefore, there is no need to protect this ISR against another higher priority ISR (HF Task).
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_HWDataTransmittedIT(ASPEP_Handle_t *pHandle)
{
 8000804:	b510      	push	{r4, lr}
  }
  else
  {
#endif
    /* First free previous readLock buffer */
    if (pHandle->ctrlBuffer.state == readLock)
 8000806:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800080a:	2b03      	cmp	r3, #3
{
 800080c:	4604      	mov	r4, r0
    if (pHandle->ctrlBuffer.state == readLock)
 800080e:	d013      	beq.n	8000838 <ASPEP_HWDataTransmittedIT+0x34>
      pHandle->ctrlBuffer.state = available;
    }
    else /* if previous buffer was not ASPEP_CTRL, then the buffer locked is a MCTL_Buff_t */
    {
      MCTL_Buff_t *tempBuff = (MCTL_Buff_t *)pHandle->lockBuffer; //cstat !MISRAC2012-Rule-11.5
      tempBuff->state = available;
 8000810:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 8000812:	2100      	movs	r1, #0
 8000814:	7191      	strb	r1, [r2, #6]
    }
    if (pHandle->syncBuffer.state == pending)
 8000816:	f890 202e 	ldrb.w	r2, [r0, #46]	@ 0x2e
 800081a:	2a02      	cmp	r2, #2
 800081c:	d013      	beq.n	8000846 <ASPEP_HWDataTransmittedIT+0x42>
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
      pHandle->fASPEP_send(pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
      pHandle->syncBuffer.state = readLock;
    }
    /* Second prepare transfer of pending buffer */
    else if (pHandle->ctrlBuffer.state == pending)
 800081e:	2b02      	cmp	r3, #2
 8000820:	d11d      	bne.n	800085e <ASPEP_HWDataTransmittedIT+0x5a>
    {
      pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 8000822:	f100 0120 	add.w	r1, r0, #32
      pHandle->fASPEP_send(pHandle ->HWIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 8000826:	6d83      	ldr	r3, [r0, #88]	@ 0x58
      pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 8000828:	6481      	str	r1, [r0, #72]	@ 0x48
      pHandle->fASPEP_send(pHandle ->HWIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 800082a:	2204      	movs	r2, #4
 800082c:	6940      	ldr	r0, [r0, #20]
 800082e:	4798      	blx	r3
      pHandle->ctrlBuffer.state = readLock;
 8000830:	2303      	movs	r3, #3
 8000832:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
      __enable_irq();
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 8000836:	bd10      	pop	{r4, pc}
    if (pHandle->syncBuffer.state == pending)
 8000838:	f890 302e 	ldrb.w	r3, [r0, #46]	@ 0x2e
      pHandle->ctrlBuffer.state = available;
 800083c:	2200      	movs	r2, #0
    if (pHandle->syncBuffer.state == pending)
 800083e:	2b02      	cmp	r3, #2
      pHandle->ctrlBuffer.state = available;
 8000840:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
    if (pHandle->syncBuffer.state == pending)
 8000844:	d10b      	bne.n	800085e <ASPEP_HWDataTransmittedIT+0x5a>
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 8000846:	f104 0028 	add.w	r0, r4, #40	@ 0x28
      pHandle->fASPEP_send(pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 800084a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 800084c:	64a0      	str	r0, [r4, #72]	@ 0x48
      pHandle->fASPEP_send(pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 800084e:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8000850:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8000852:	6960      	ldr	r0, [r4, #20]
 8000854:	4798      	blx	r3
      pHandle->syncBuffer.state = readLock;
 8000856:	2303      	movs	r3, #3
 8000858:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
}
 800085c:	bd10      	pop	{r4, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 800085e:	b672      	cpsid	i
      if (pHandle->asyncNextBuffer != NULL)
 8000860:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8000862:	b1cb      	cbz	r3, 8000898 <ASPEP_HWDataTransmittedIT+0x94>
        pHandle->asyncNextBuffer->state = readLock;
 8000864:	2203      	movs	r2, #3
        pHandle->lockBuffer = (void *)pHandle->asyncNextBuffer;
 8000866:	64a3      	str	r3, [r4, #72]	@ 0x48
        pHandle->asyncNextBuffer->state = readLock;
 8000868:	719a      	strb	r2, [r3, #6]
        pHandle->fASPEP_send(pHandle ->HWIp, pHandle->asyncNextBuffer->buffer, pHandle->asyncNextBuffer->length);
 800086a:	6819      	ldr	r1, [r3, #0]
 800086c:	889a      	ldrh	r2, [r3, #4]
 800086e:	6960      	ldr	r0, [r4, #20]
 8000870:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8000872:	4798      	blx	r3
        if ((pHandle->asyncBufferA.state == pending) || (pHandle->asyncBufferB.state == pending))
 8000874:	f894 3036 	ldrb.w	r3, [r4, #54]	@ 0x36
 8000878:	2b02      	cmp	r3, #2
 800087a:	d007      	beq.n	800088c <ASPEP_HWDataTransmittedIT+0x88>
 800087c:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8000880:	2b02      	cmp	r3, #2
 8000882:	d003      	beq.n	800088c <ASPEP_HWDataTransmittedIT+0x88>
          pHandle->asyncNextBuffer = NULL;
 8000884:	2300      	movs	r3, #0
 8000886:	6463      	str	r3, [r4, #68]	@ 0x44
  __ASM volatile ("cpsie i" : : : "memory");
 8000888:	b662      	cpsie	i
}
 800088a:	bd10      	pop	{r4, pc}
          uint32_t temp = (uint32_t)&pHandle->asyncBufferA + (uint32_t)&pHandle->asyncBufferB
 800088c:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800088e:	0063      	lsls	r3, r4, #1
 8000890:	3368      	adds	r3, #104	@ 0x68
 8000892:	1a9b      	subs	r3, r3, r2
          pHandle->asyncNextBuffer = (MCTL_Buff_t *) temp; //cstat !MISRAC2012-Rule-11.4
 8000894:	6463      	str	r3, [r4, #68]	@ 0x44
        {
 8000896:	e7f7      	b.n	8000888 <ASPEP_HWDataTransmittedIT+0x84>
        pHandle->lockBuffer = NULL;
 8000898:	64a3      	str	r3, [r4, #72]	@ 0x48
 800089a:	e7f5      	b.n	8000888 <ASPEP_HWDataTransmittedIT+0x84>

0800089c <ASPEP_RXframeProcess>:
    uint16_t packetNumber;
#if VALID_CRC_DATA
    bool validCRCData = true;
#endif
    *packetLength = 0;
    if (pHandle->NewPacketAvailable)
 800089c:	f890 3061 	ldrb.w	r3, [r0, #97]	@ 0x61
    uint32_t packetHeader = *((uint32_t *)pHandle->rxHeader); //cstat !MISRAC2012-Rule-11.3
 80008a0:	69c2      	ldr	r2, [r0, #28]
    *packetLength = 0;
 80008a2:	f04f 0c00 	mov.w	ip, #0
{
 80008a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008aa:	4604      	mov	r4, r0
    *packetLength = 0;
 80008ac:	f8a1 c000 	strh.w	ip, [r1]
    if (pHandle->NewPacketAvailable)
 80008b0:	b1cb      	cbz	r3, 80008e6 <ASPEP_RXframeProcess+0x4a>
    {
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
      switch (pHandle->ASPEP_State)
 80008b2:	f890 3064 	ldrb.w	r3, [r0, #100]	@ 0x64
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
 80008b6:	f880 c061 	strb.w	ip, [r0, #97]	@ 0x61
      switch (pHandle->ASPEP_State)
 80008ba:	2b01      	cmp	r3, #1
 80008bc:	d055      	beq.n	800096a <ASPEP_RXframeProcess+0xce>
 80008be:	2b02      	cmp	r3, #2
 80008c0:	d018      	beq.n	80008f4 <ASPEP_RXframeProcess+0x58>
 80008c2:	b933      	cbnz	r3, 80008d2 <ASPEP_RXframeProcess+0x36>
      {
        case ASPEP_IDLE:
        {
          if (BEACON == pHandle->rxPacketType)
 80008c4:	6e81      	ldr	r1, [r0, #104]	@ 0x68
 80008c6:	2905      	cmp	r1, #5
 80008c8:	f000 80e3 	beq.w	8000a92 <ASPEP_RXframeProcess+0x1f6>
              /* Nothing to do, controller has to send back new beacon with matching capabilities */
            }
            /* Beacon Packet must be answered*/
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
          }
          else if (PING == pHandle->rxPacketType)
 80008cc:	2906      	cmp	r1, #6
 80008ce:	f000 8129 	beq.w	8000b24 <ASPEP_RXframeProcess+0x288>
  uint8_t *result = NULL; //cstat !MISRAC2012-Rule-8.13
 80008d2:	2500      	movs	r5, #0

        default:
          break;
      }
      /* The valid received packet is now safely consumes, we are ready to receive a new packet */
      pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 80008d4:	6960      	ldr	r0, [r4, #20]
 80008d6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80008d8:	2204      	movs	r2, #4
 80008da:	f104 011c 	add.w	r1, r4, #28
 80008de:	4798      	blx	r3
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
  return (result);
}
 80008e0:	4628      	mov	r0, r5
 80008e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if (pHandle->badPacketFlag > ASPEP_OK)
 80008e6:	f890 3062 	ldrb.w	r3, [r0, #98]	@ 0x62
 80008ea:	b9bb      	cbnz	r3, 800091c <ASPEP_RXframeProcess+0x80>
  uint8_t *result = NULL; //cstat !MISRAC2012-Rule-8.13
 80008ec:	2500      	movs	r5, #0
}
 80008ee:	4628      	mov	r0, r5
 80008f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if (BEACON == pHandle->rxPacketType)
 80008f4:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 80008f6:	2b05      	cmp	r3, #5
 80008f8:	d045      	beq.n	8000986 <ASPEP_RXframeProcess+0xea>
          else if (PING == pHandle->rxPacketType)
 80008fa:	2b06      	cmp	r3, #6
 80008fc:	f000 8118 	beq.w	8000b30 <ASPEP_RXframeProcess+0x294>
          else if (DATA_PACKET == pHandle->rxPacketType)
 8000900:	2b09      	cmp	r3, #9
 8000902:	d1e6      	bne.n	80008d2 <ASPEP_RXframeProcess+0x36>
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from controller */
 8000904:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
              *packetLength = pHandle->rxLength;
 8000908:	f8b0 205c 	ldrh.w	r2, [r0, #92]	@ 0x5c
              result = pHandle->rxBuffer;
 800090c:	69a5      	ldr	r5, [r4, #24]
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from controller */
 800090e:	3301      	adds	r3, #1
              pSupHandle->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 8000910:	2001      	movs	r0, #1
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from controller */
 8000912:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
              pSupHandle->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 8000916:	7420      	strb	r0, [r4, #16]
              *packetLength = pHandle->rxLength;
 8000918:	800a      	strh	r2, [r1, #0]
              result = pHandle->rxBuffer;
 800091a:	e7db      	b.n	80008d4 <ASPEP_RXframeProcess+0x38>
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 800091c:	eb03 2303 	add.w	r3, r3, r3, lsl #8
 8000920:	021b      	lsls	r3, r3, #8
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000922:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8000926:	488b      	ldr	r0, [pc, #556]	@ (8000b54 <ASPEP_RXframeProcess+0x2b8>)
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000928:	4d8b      	ldr	r5, [pc, #556]	@ (8000b58 <ASPEP_RXframeProcess+0x2bc>)
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 800092a:	f082 0209 	eor.w	r2, r2, #9
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 800092e:	f043 010f 	orr.w	r1, r3, #15
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000932:	5c82      	ldrb	r2, [r0, r2]
 8000934:	ea82 4313 	eor.w	r3, r2, r3, lsr #16
 8000938:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 800093a:	5cc3      	ldrb	r3, [r0, r3]
  *headerPtr |= (uint32_t)crc << 28;
 800093c:	5ceb      	ldrb	r3, [r5, r3]
 800093e:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
 8000942:	6223      	str	r3, [r4, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8000944:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8000946:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8000948:	2b00      	cmp	r3, #0
 800094a:	f000 80f6 	beq.w	8000b3a <ASPEP_RXframeProcess+0x29e>
  __ASM volatile ("cpsie i" : : : "memory");
 800094e:	b662      	cpsie	i
        if (pHandle->ctrlBuffer.state != available)
 8000950:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 8000954:	b913      	cbnz	r3, 800095c <ASPEP_RXframeProcess+0xc0>
          pHandle->ctrlBuffer.state = pending;
 8000956:	2302      	movs	r3, #2
 8000958:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
      pHandle->badPacketFlag = ASPEP_OK;
 800095c:	2200      	movs	r2, #0
      pHandle->fASPEP_HWSync(pHandle->HWIp);
 800095e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8000960:	6960      	ldr	r0, [r4, #20]
      pHandle->badPacketFlag = ASPEP_OK;
 8000962:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
      pHandle->fASPEP_HWSync(pHandle->HWIp);
 8000966:	4798      	blx	r3
 8000968:	e7c0      	b.n	80008ec <ASPEP_RXframeProcess+0x50>
          if (BEACON == pHandle->rxPacketType)
 800096a:	6e81      	ldr	r1, [r0, #104]	@ 0x68
 800096c:	2905      	cmp	r1, #5
 800096e:	d04f      	beq.n	8000a10 <ASPEP_RXframeProcess+0x174>
          else if (PING == pHandle->rxPacketType)
 8000970:	2906      	cmp	r1, #6
 8000972:	d1ae      	bne.n	80008d2 <ASPEP_RXframeProcess+0x36>
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 8000974:	4619      	mov	r1, r3
 8000976:	f3c2 320f 	ubfx	r2, r2, #12, #16
 800097a:	f7ff fe41 	bl	8000600 <ASPEP_sendPing>
            pHandle->ASPEP_State = ASPEP_CONNECTED;
 800097e:	2302      	movs	r3, #2
 8000980:	f884 3064 	strb.w	r3, [r4, #100]	@ 0x64
 8000984:	e7a5      	b.n	80008d2 <ASPEP_RXframeProcess+0x36>
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000986:	f894 e01d 	ldrb.w	lr, [r4, #29]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 800098a:	f894 506d 	ldrb.w	r5, [r4, #109]	@ 0x6d
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 800098e:	7f00      	ldrb	r0, [r0, #28]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000990:	f894 606c 	ldrb.w	r6, [r4, #108]	@ 0x6c
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000994:	f894 706e 	ldrb.w	r7, [r4, #110]	@ 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000998:	f894 906f 	ldrb.w	r9, [r4, #111]	@ 0x6f
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 800099c:	f00e 0e3f 	and.w	lr, lr, #63	@ 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 80009a0:	09c0      	lsrs	r0, r0, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 80009a2:	4575      	cmp	r5, lr
 80009a4:	bf28      	it	cs
 80009a6:	4675      	movcs	r5, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80009a8:	42b0      	cmp	r0, r6
 80009aa:	4601      	mov	r1, r0
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 80009ac:	f3c2 3886 	ubfx	r8, r2, #14, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80009b0:	bf28      	it	cs
 80009b2:	4631      	movcs	r1, r6
 80009b4:	4663      	mov	r3, ip
 80009b6:	f361 0307 	bfi	r3, r1, #0, #8
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 80009ba:	f3c2 5a46 	ubfx	sl, r2, #21, #7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80009be:	45b8      	cmp	r8, r7
 80009c0:	4641      	mov	r1, r8
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80009c2:	f365 230f 	bfi	r3, r5, #8, #8
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80009c6:	bf28      	it	cs
 80009c8:	4639      	movcs	r1, r7
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80009ca:	45ca      	cmp	sl, r9
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80009cc:	f361 4317 	bfi	r3, r1, #16, #8
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80009d0:	4651      	mov	r1, sl
 80009d2:	bf28      	it	cs
 80009d4:	4649      	movcs	r1, r9
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80009d6:	f361 631f 	bfi	r3, r1, #24, #8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 80009da:	42b0      	cmp	r0, r6
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80009dc:	66e3      	str	r3, [r4, #108]	@ 0x6c
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 80009de:	f104 016c 	add.w	r1, r4, #108	@ 0x6c
 80009e2:	d80f      	bhi.n	8000a04 <ASPEP_RXframeProcess+0x168>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 80009e4:	45ae      	cmp	lr, r5
 80009e6:	d80d      	bhi.n	8000a04 <ASPEP_RXframeProcess+0x168>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 80009e8:	45b8      	cmp	r8, r7
 80009ea:	d80b      	bhi.n	8000a04 <ASPEP_RXframeProcess+0x168>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 80009ec:	45ca      	cmp	sl, r9
 80009ee:	d809      	bhi.n	8000a04 <ASPEP_RXframeProcess+0x168>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 80009f0:	f894 c070 	ldrb.w	ip, [r4, #112]	@ 0x70
 80009f4:	f3c2 1202 	ubfx	r2, r2, #4, #3
 80009f8:	ebac 0c02 	sub.w	ip, ip, r2
 80009fc:	fabc fc8c 	clz	ip, ip
 8000a00:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8000a04:	f884 c064 	strb.w	ip, [r4, #100]	@ 0x64
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
 8000a08:	4620      	mov	r0, r4
 8000a0a:	f7ff fdb3 	bl	8000574 <ASPEP_sendBeacon>
 8000a0e:	e760      	b.n	80008d2 <ASPEP_RXframeProcess+0x36>
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000a10:	7f45      	ldrb	r5, [r0, #29]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a12:	f890 606c 	ldrb.w	r6, [r0, #108]	@ 0x6c
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8000a16:	7f01      	ldrb	r1, [r0, #28]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000a18:	f890 006d 	ldrb.w	r0, [r0, #109]	@ 0x6d
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a1c:	f894 706e 	ldrb.w	r7, [r4, #110]	@ 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a20:	f894 e06f 	ldrb.w	lr, [r4, #111]	@ 0x6f
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000a24:	f005 053f 	and.w	r5, r5, #63	@ 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8000a28:	09c9      	lsrs	r1, r1, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000a2a:	42a8      	cmp	r0, r5
 8000a2c:	bf28      	it	cs
 8000a2e:	4628      	movcs	r0, r5
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a30:	42b1      	cmp	r1, r6
 8000a32:	4663      	mov	r3, ip
 8000a34:	468c      	mov	ip, r1
 8000a36:	bf28      	it	cs
 8000a38:	46b4      	movcs	ip, r6
 8000a3a:	f36c 0307 	bfi	r3, ip, #0, #8
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000a3e:	f3c2 3c86 	ubfx	ip, r2, #14, #7
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 8000a42:	f3c2 5846 	ubfx	r8, r2, #21, #7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a46:	45bc      	cmp	ip, r7
 8000a48:	46e1      	mov	r9, ip
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a4a:	f360 230f 	bfi	r3, r0, #8, #8
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a4e:	bf28      	it	cs
 8000a50:	46b9      	movcs	r9, r7
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a52:	45f0      	cmp	r8, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a54:	f369 4317 	bfi	r3, r9, #16, #8
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a58:	46c1      	mov	r9, r8
 8000a5a:	bf28      	it	cs
 8000a5c:	46f1      	movcs	r9, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a5e:	f369 631f 	bfi	r3, r9, #24, #8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000a62:	42b1      	cmp	r1, r6
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a64:	66e3      	str	r3, [r4, #108]	@ 0x6c
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000a66:	d80b      	bhi.n	8000a80 <ASPEP_RXframeProcess+0x1e4>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8000a68:	4285      	cmp	r5, r0
 8000a6a:	d809      	bhi.n	8000a80 <ASPEP_RXframeProcess+0x1e4>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8000a6c:	45bc      	cmp	ip, r7
 8000a6e:	d807      	bhi.n	8000a80 <ASPEP_RXframeProcess+0x1e4>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8000a70:	45f0      	cmp	r8, lr
 8000a72:	d805      	bhi.n	8000a80 <ASPEP_RXframeProcess+0x1e4>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000a74:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 8000a78:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	d002      	beq.n	8000a86 <ASPEP_RXframeProcess+0x1ea>
              pHandle->ASPEP_State = ASPEP_IDLE;
 8000a80:	2300      	movs	r3, #0
 8000a82:	f884 3064 	strb.w	r3, [r4, #100]	@ 0x64
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
 8000a86:	f104 016c 	add.w	r1, r4, #108	@ 0x6c
 8000a8a:	4620      	mov	r0, r4
 8000a8c:	f7ff fd72 	bl	8000574 <ASPEP_sendBeacon>
 8000a90:	e71f      	b.n	80008d2 <ASPEP_RXframeProcess+0x36>
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000a92:	f890 c01d 	ldrb.w	ip, [r0, #29]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000a96:	f890 106d 	ldrb.w	r1, [r0, #109]	@ 0x6d
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8000a9a:	7f05      	ldrb	r5, [r0, #28]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a9c:	f890 606c 	ldrb.w	r6, [r0, #108]	@ 0x6c
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000aa0:	f890 706e 	ldrb.w	r7, [r0, #110]	@ 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000aa4:	f894 906f 	ldrb.w	r9, [r4, #111]	@ 0x6f
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000aa8:	f00c 0c3f 	and.w	ip, ip, #63	@ 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8000aac:	09ed      	lsrs	r5, r5, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000aae:	4561      	cmp	r1, ip
 8000ab0:	bf28      	it	cs
 8000ab2:	4661      	movcs	r1, ip
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000ab4:	42b5      	cmp	r5, r6
 8000ab6:	4628      	mov	r0, r5
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000ab8:	f3c2 3886 	ubfx	r8, r2, #14, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000abc:	bf28      	it	cs
 8000abe:	4630      	movcs	r0, r6
 8000ac0:	f360 0307 	bfi	r3, r0, #0, #8
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 8000ac4:	f3c2 5a46 	ubfx	sl, r2, #21, #7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000ac8:	45b8      	cmp	r8, r7
 8000aca:	4640      	mov	r0, r8
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000acc:	f361 230f 	bfi	r3, r1, #8, #8
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000ad0:	bf28      	it	cs
 8000ad2:	4638      	movcs	r0, r7
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000ad4:	45ca      	cmp	sl, r9
 8000ad6:	46d6      	mov	lr, sl
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000ad8:	f360 4317 	bfi	r3, r0, #16, #8
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000adc:	bf28      	it	cs
 8000ade:	46ce      	movcs	lr, r9
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000ae0:	f36e 631f 	bfi	r3, lr, #24, #8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000ae4:	42b5      	cmp	r5, r6
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000ae6:	66e3      	str	r3, [r4, #108]	@ 0x6c
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000ae8:	d8cd      	bhi.n	8000a86 <ASPEP_RXframeProcess+0x1ea>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8000aea:	458c      	cmp	ip, r1
 8000aec:	d8cb      	bhi.n	8000a86 <ASPEP_RXframeProcess+0x1ea>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8000aee:	45b8      	cmp	r8, r7
 8000af0:	d8c9      	bhi.n	8000a86 <ASPEP_RXframeProcess+0x1ea>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8000af2:	45ca      	cmp	sl, r9
 8000af4:	d8c7      	bhi.n	8000a86 <ASPEP_RXframeProcess+0x1ea>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000af6:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 8000afa:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d1c1      	bne.n	8000a86 <ASPEP_RXframeProcess+0x1ea>
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000b02:	1c4b      	adds	r3, r1, #1
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000b04:	1c42      	adds	r2, r0, #1
 8000b06:	b2d2      	uxtb	r2, r2
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000b08:	b2db      	uxtb	r3, r3
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000b0a:	0152      	lsls	r2, r2, #5
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
 8000b0c:	ea4f 1e8e 	mov.w	lr, lr, lsl #6
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000b10:	015b      	lsls	r3, r3, #5
              pHandle->ASPEP_State = ASPEP_CONFIGURED;
 8000b12:	2101      	movs	r1, #1
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000b14:	81a2      	strh	r2, [r4, #12]
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
 8000b16:	f8a4 e00e 	strh.w	lr, [r4, #14]
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000b1a:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
              pHandle->ASPEP_State = ASPEP_CONFIGURED;
 8000b1e:	f884 1064 	strb.w	r1, [r4, #100]	@ 0x64
 8000b22:	e7b0      	b.n	8000a86 <ASPEP_RXframeProcess+0x1ea>
            ASPEP_sendPing(pHandle, ASPEP_PING_RESET, packetNumber);
 8000b24:	f3c2 320f 	ubfx	r2, r2, #12, #16
 8000b28:	4619      	mov	r1, r3
 8000b2a:	f7ff fd69 	bl	8000600 <ASPEP_sendPing>
 8000b2e:	e6d0      	b.n	80008d2 <ASPEP_RXframeProcess+0x36>
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 8000b30:	7f42      	ldrb	r2, [r0, #29]
 8000b32:	2101      	movs	r1, #1
 8000b34:	f7ff fd64 	bl	8000600 <ASPEP_sendPing>
 8000b38:	e6cb      	b.n	80008d2 <ASPEP_RXframeProcess+0x36>
  (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8000b3a:	f104 0120 	add.w	r1, r4, #32
        pHandle->ctrlBuffer.state = readLock;
 8000b3e:	2303      	movs	r3, #3
 8000b40:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8000b44:	64a1      	str	r1, [r4, #72]	@ 0x48
 8000b46:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8000b48:	2204      	movs	r2, #4
 8000b4a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8000b4c:	6960      	ldr	r0, [r4, #20]
 8000b4e:	4798      	blx	r3
 8000b50:	e704      	b.n	800095c <ASPEP_RXframeProcess+0xc0>
 8000b52:	bf00      	nop
 8000b54:	080082a4 	.word	0x080082a4
 8000b58:	08008294 	.word	0x08008294

08000b5c <ASPEP_HWDataReceivedIT>:
  * If the packet received contains an error in the header, the HW IP will be re-synchronised first, and DMA will be configured after.
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_HWDataReceivedIT(ASPEP_Handle_t *pHandle)
{
 8000b5c:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    switch (pHandle->ASPEP_TL_State)
 8000b5e:	f890 3065 	ldrb.w	r3, [r0, #101]	@ 0x65
{
 8000b62:	4604      	mov	r4, r0
    switch (pHandle->ASPEP_TL_State)
 8000b64:	b13b      	cbz	r3, 8000b76 <ASPEP_HWDataReceivedIT+0x1a>
 8000b66:	2b01      	cmp	r3, #1
 8000b68:	d104      	bne.n	8000b74 <ASPEP_HWDataReceivedIT+0x18>
        break;
      }

      case WAITING_PAYLOAD:
      {
        pHandle->ASPEP_TL_State = WAITING_PACKET;
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	f880 2065 	strb.w	r2, [r0, #101]	@ 0x65
        /* Payload received, */
        pHandle->NewPacketAvailable = true;
 8000b70:	f880 3061 	strb.w	r3, [r0, #97]	@ 0x61
        break;
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 8000b74:	bd10      	pop	{r4, pc}
        if (ASPEP_CheckHeaderCRC(*(uint32_t *)pHandle->rxHeader) == true) //cstat !MISRAC2012-Rule-11.3
 8000b76:	69c1      	ldr	r1, [r0, #28]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000b78:	4a1e      	ldr	r2, [pc, #120]	@ (8000bf4 <ASPEP_HWDataReceivedIT+0x98>)
 8000b7a:	b2cb      	uxtb	r3, r1
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000b7c:	5cd3      	ldrb	r3, [r2, r3]
 8000b7e:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 8000b82:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000b84:	5cd3      	ldrb	r3, [r2, r3]
 8000b86:	ea83 4311 	eor.w	r3, r3, r1, lsr #16
 8000b8a:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 24U) & 0xffU)];
 8000b8c:	5cd3      	ldrb	r3, [r2, r3]
 8000b8e:	ea83 6311 	eor.w	r3, r3, r1, lsr #24
        if (ASPEP_CheckHeaderCRC(*(uint32_t *)pHandle->rxHeader) == true) //cstat !MISRAC2012-Rule-11.3
 8000b92:	5cd3      	ldrb	r3, [r2, r3]
 8000b94:	b95b      	cbnz	r3, 8000bae <ASPEP_HWDataReceivedIT+0x52>
          pHandle->rxPacketType = (ASPEP_packetType)(((uint32_t)pHandle->rxHeader[0]) & ID_MASK);
 8000b96:	7f03      	ldrb	r3, [r0, #28]
 8000b98:	f003 030f 	and.w	r3, r3, #15
 8000b9c:	2b06      	cmp	r3, #6
 8000b9e:	6683      	str	r3, [r0, #104]	@ 0x68
          switch (pHandle->rxPacketType)
 8000ba0:	d809      	bhi.n	8000bb6 <ASPEP_HWDataReceivedIT+0x5a>
 8000ba2:	2b04      	cmp	r3, #4
 8000ba4:	d81e      	bhi.n	8000be4 <ASPEP_HWDataReceivedIT+0x88>
              pHandle->badPacketFlag = ASPEP_BAD_PACKET_TYPE;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
}
 8000bac:	bd10      	pop	{r4, pc}
          pHandle->badPacketFlag = ASPEP_BAD_CRC_HEADER;
 8000bae:	2304      	movs	r3, #4
 8000bb0:	f880 3062 	strb.w	r3, [r0, #98]	@ 0x62
}
 8000bb4:	bd10      	pop	{r4, pc}
 8000bb6:	2b09      	cmp	r3, #9
 8000bb8:	d1f5      	bne.n	8000ba6 <ASPEP_HWDataReceivedIT+0x4a>
              pHandle->rxLength = (uint16_t)((*((uint16_t *)pHandle->rxHeader) & 0x1FFF0U) >> (uint16_t)4);
 8000bba:	8b83      	ldrh	r3, [r0, #28]
 8000bbc:	091b      	lsrs	r3, r3, #4
 8000bbe:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
              if (0U == pHandle->rxLength) /* data packet with length 0 is a valid packet */
 8000bc2:	b17b      	cbz	r3, 8000be4 <ASPEP_HWDataReceivedIT+0x88>
              else if (pHandle->rxLength <= pHandle->maxRXPayload)
 8000bc4:	f8b0 205e 	ldrh.w	r2, [r0, #94]	@ 0x5e
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	d30f      	bcc.n	8000bec <ASPEP_HWDataReceivedIT+0x90>
                pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxBuffer,  /* need to read + 2 bytes CRC*/
 8000bcc:	f890 206c 	ldrb.w	r2, [r0, #108]	@ 0x6c
 8000bd0:	6981      	ldr	r1, [r0, #24]
 8000bd2:	6940      	ldr	r0, [r0, #20]
 8000bd4:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8000bd8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8000bda:	4798      	blx	r3
                pHandle->ASPEP_TL_State = WAITING_PAYLOAD;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	f884 3065 	strb.w	r3, [r4, #101]	@ 0x65
}
 8000be2:	bd10      	pop	{r4, pc}
              pHandle->NewPacketAvailable = true;
 8000be4:	2301      	movs	r3, #1
 8000be6:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
}
 8000bea:	bd10      	pop	{r4, pc}
                pHandle->badPacketFlag = ASPEP_BAD_PACKET_SIZE;
 8000bec:	2302      	movs	r3, #2
 8000bee:	f880 3062 	strb.w	r3, [r0, #98]	@ 0x62
}
 8000bf2:	bd10      	pop	{r4, pc}
 8000bf4:	080082a4 	.word	0x080082a4

08000bf8 <ASPEP_HWDMAReset>:
  * @brief  Resets DMA after debugger has stopped the MCU.
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_HWDMAReset(ASPEP_Handle_t *pHandle)
{
 8000bf8:	4601      	mov	r1, r0
  {
#endif
    /* We must reset the RX state machine to be sure to not be in Waiting packet state */
    /* Otherwise the arrival of a new packet will trigger a NewPacketAvailable despite */
    /* the fact that bytes have been lost because of overrun (debugger paused for instance) */
    pHandle->ASPEP_TL_State = WAITING_PACKET;
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	f880 2065 	strb.w	r2, [r0, #101]	@ 0x65
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000c00:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8000c02:	6940      	ldr	r0, [r0, #20]
 8000c04:	2204      	movs	r2, #4
 8000c06:	311c      	adds	r1, #28
 8000c08:	4718      	bx	r3
 8000c0a:	bf00      	nop
 8000c0c:	0000      	movs	r0, r0
	...

08000c10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c10:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c12:	2300      	movs	r3, #0
{
 8000c14:	b097      	sub	sp, #92	@ 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c16:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
 8000c1a:	e9cd 330c 	strd	r3, r3, [sp, #48]	@ 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c1e:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8000c22:	e9cd 3305 	strd	r3, r3, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c26:	4926      	ldr	r1, [pc, #152]	@ (8000cc0 <SystemClock_Config+0xb0>)
 8000c28:	9301      	str	r3, [sp, #4]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c2a:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c2c:	6c08      	ldr	r0, [r1, #64]	@ 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c2e:	4a25      	ldr	r2, [pc, #148]	@ (8000cc4 <SystemClock_Config+0xb4>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c30:	f040 5080 	orr.w	r0, r0, #268435456	@ 0x10000000
 8000c34:	6408      	str	r0, [r1, #64]	@ 0x40
 8000c36:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8000c38:	f001 5180 	and.w	r1, r1, #268435456	@ 0x10000000
 8000c3c:	9101      	str	r1, [sp, #4]
 8000c3e:	9901      	ldr	r1, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c40:	9302      	str	r3, [sp, #8]
 8000c42:	6813      	ldr	r3, [r2, #0]
 8000c44:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000c48:	6013      	str	r3, [r2, #0]
 8000c4a:	6813      	ldr	r3, [r2, #0]
 8000c4c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c50:	2402      	movs	r4, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c52:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c54:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c58:	ed9f 7b17 	vldr	d7, [pc, #92]	@ 8000cb8 <SystemClock_Config+0xa8>
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c5c:	e9cd 410e 	strd	r4, r1, [sp, #56]	@ 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c60:	9802      	ldr	r0, [sp, #8]
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 180;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c62:	9414      	str	r4, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c64:	2002      	movs	r0, #2
 8000c66:	2102      	movs	r1, #2
 8000c68:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c6c:	2204      	movs	r2, #4
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000c6e:	23b4      	movs	r3, #180	@ 0xb4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c70:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c72:	ed8d 7b08 	vstr	d7, [sp, #32]
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c76:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000c78:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c7a:	f004 f9f1 	bl	8005060 <HAL_RCC_OscConfig>
 8000c7e:	b108      	cbz	r0, 8000c84 <SystemClock_Config+0x74>
  __ASM volatile ("cpsid i" : : : "memory");
 8000c80:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c82:	e7fe      	b.n	8000c82 <SystemClock_Config+0x72>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000c84:	f004 f896 	bl	8004db4 <HAL_PWREx_EnableOverDrive>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	b108      	cbz	r0, 8000c90 <SystemClock_Config+0x80>
 8000c8c:	b672      	cpsid	i
  while (1)
 8000c8e:	e7fe      	b.n	8000c8e <SystemClock_Config+0x7e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c90:	220f      	movs	r2, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c92:	e9cd 2403 	strd	r2, r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c96:	f44f 55a0 	mov.w	r5, #5120	@ 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c9a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c9e:	a803      	add	r0, sp, #12
 8000ca0:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ca2:	e9cd 3505 	strd	r3, r5, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ca6:	9207      	str	r2, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ca8:	f004 f8c0 	bl	8004e2c <HAL_RCC_ClockConfig>
 8000cac:	b108      	cbz	r0, 8000cb2 <SystemClock_Config+0xa2>
 8000cae:	b672      	cpsid	i
  while (1)
 8000cb0:	e7fe      	b.n	8000cb0 <SystemClock_Config+0xa0>
}
 8000cb2:	b017      	add	sp, #92	@ 0x5c
 8000cb4:	bd30      	pop	{r4, r5, pc}
 8000cb6:	bf00      	nop
 8000cb8:	00000001 	.word	0x00000001
 8000cbc:	00010000 	.word	0x00010000
 8000cc0:	40023800 	.word	0x40023800
 8000cc4:	40007000 	.word	0x40007000

08000cc8 <main>:
{
 8000cc8:	b580      	push	{r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cca:	2400      	movs	r4, #0
{
 8000ccc:	b09c      	sub	sp, #112	@ 0x70
  HAL_Init();
 8000cce:	f003 fbe9 	bl	80044a4 <HAL_Init>
  SystemClock_Config();
 8000cd2:	f7ff ff9d 	bl	8000c10 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd6:	e9cd 4414 	strd	r4, r4, [sp, #80]	@ 0x50
 8000cda:	e9cd 4416 	strd	r4, r4, [sp, #88]	@ 0x58
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cde:	4d9c      	ldr	r5, [pc, #624]	@ (8000f50 <main+0x288>)
 8000ce0:	9402      	str	r4, [sp, #8]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce2:	9418      	str	r4, [sp, #96]	@ 0x60
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ce4:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 8000ce6:	489b      	ldr	r0, [pc, #620]	@ (8000f54 <main+0x28c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ce8:	f043 0304 	orr.w	r3, r3, #4
 8000cec:	632b      	str	r3, [r5, #48]	@ 0x30
 8000cee:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8000cf0:	f003 0304 	and.w	r3, r3, #4
 8000cf4:	9302      	str	r3, [sp, #8]
 8000cf6:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cf8:	9403      	str	r4, [sp, #12]
 8000cfa:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8000cfc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d00:	632b      	str	r3, [r5, #48]	@ 0x30
 8000d02:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8000d04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d08:	9303      	str	r3, [sp, #12]
 8000d0a:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0c:	9404      	str	r4, [sp, #16]
 8000d0e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8000d10:	f043 0301 	orr.w	r3, r3, #1
 8000d14:	632b      	str	r3, [r5, #48]	@ 0x30
 8000d16:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8000d18:	f003 0301 	and.w	r3, r3, #1
 8000d1c:	9304      	str	r3, [sp, #16]
 8000d1e:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d20:	9405      	str	r4, [sp, #20]
 8000d22:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8000d24:	f043 0302 	orr.w	r3, r3, #2
 8000d28:	632b      	str	r3, [r5, #48]	@ 0x30
 8000d2a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8000d2c:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 8000d30:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d32:	9305      	str	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 8000d34:	f244 11c0 	movw	r1, #16832	@ 0x41c0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d38:	2601      	movs	r6, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3a:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 8000d3c:	f004 f836 	bl	8004dac <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8000d40:	f244 13c0 	movw	r3, #16832	@ 0x41c0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d44:	4883      	ldr	r0, [pc, #524]	@ (8000f54 <main+0x28c>)
 8000d46:	a914      	add	r1, sp, #80	@ 0x50
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d48:	e9cd 3614 	strd	r3, r6, [sp, #80]	@ 0x50
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4c:	e9cd 4416 	strd	r4, r4, [sp, #88]	@ 0x58
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d50:	f003 ff1c 	bl	8004b8c <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d54:	9401      	str	r4, [sp, #4]
 8000d56:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8000d58:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d5c:	632b      	str	r3, [r5, #48]	@ 0x30
 8000d5e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
  hadc1.Instance = ADC1;
 8000d60:	4d7d      	ldr	r5, [pc, #500]	@ (8000f58 <main+0x290>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d62:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000d66:	2720      	movs	r7, #32
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d68:	9301      	str	r3, [sp, #4]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000d6a:	463a      	mov	r2, r7
 8000d6c:	4621      	mov	r1, r4
 8000d6e:	a814      	add	r0, sp, #80	@ 0x50
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d70:	9b01      	ldr	r3, [sp, #4]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000d72:	f007 fa49 	bl	8008208 <memset>
  hadc1.Instance = ADC1;
 8000d76:	4b79      	ldr	r3, [pc, #484]	@ (8000f5c <main+0x294>)
 8000d78:	602b      	str	r3, [r5, #0]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d7a:	4b79      	ldr	r3, [pc, #484]	@ (8000f60 <main+0x298>)
 8000d7c:	62ab      	str	r3, [r5, #40]	@ 0x28
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d7e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d82:	606b      	str	r3, [r5, #4]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d84:	4628      	mov	r0, r5
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000d86:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d8a:	e9cd 440d 	strd	r4, r4, [sp, #52]	@ 0x34
 8000d8e:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d92:	60ac      	str	r4, [r5, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000d94:	612e      	str	r6, [r5, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d96:	762c      	strb	r4, [r5, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d98:	f885 4020 	strb.w	r4, [r5, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d9c:	62ec      	str	r4, [r5, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d9e:	f885 4030 	strb.w	r4, [r5, #48]	@ 0x30
  hadc1.Init.NbrOfConversion = 1;
 8000da2:	61ee      	str	r6, [r5, #28]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000da4:	616e      	str	r6, [r5, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000da6:	60eb      	str	r3, [r5, #12]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000da8:	f003 fba8 	bl	80044fc <HAL_ADC_Init>
 8000dac:	b108      	cbz	r0, 8000db2 <main+0xea>
 8000dae:	b672      	cpsid	i
  while (1)
 8000db0:	e7fe      	b.n	8000db0 <main+0xe8>
  sConfigInjected.InjectedRank = 1;
 8000db2:	e9cd 0614 	strd	r0, r6, [sp, #80]	@ 0x50
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 8000db6:	901a      	str	r0, [sp, #104]	@ 0x68
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000db8:	f8ad 0064 	strh.w	r0, [sp, #100]	@ 0x64
  sConfigInjected.InjectedOffset = 0;
 8000dbc:	9017      	str	r0, [sp, #92]	@ 0x5c
  sConfigInjected.InjectedNbrOfConversion = 3;
 8000dbe:	2403      	movs	r4, #3
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_RISING;
 8000dc0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000dc4:	a914      	add	r1, sp, #80	@ 0x50
 8000dc6:	4628      	mov	r0, r5
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000dc8:	9616      	str	r6, [sp, #88]	@ 0x58
  sConfigInjected.InjectedNbrOfConversion = 3;
 8000dca:	9418      	str	r4, [sp, #96]	@ 0x60
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_RISING;
 8000dcc:	931b      	str	r3, [sp, #108]	@ 0x6c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000dce:	f003 fcf7 	bl	80047c0 <HAL_ADCEx_InjectedConfigChannel>
 8000dd2:	b108      	cbz	r0, 8000dd8 <main+0x110>
 8000dd4:	b672      	cpsid	i
  while (1)
 8000dd6:	e7fe      	b.n	8000dd6 <main+0x10e>
  sConfigInjected.InjectedRank = 2;
 8000dd8:	230b      	movs	r3, #11
 8000dda:	f04f 0802 	mov.w	r8, #2
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000dde:	a914      	add	r1, sp, #80	@ 0x50
 8000de0:	4628      	mov	r0, r5
  sConfigInjected.InjectedRank = 2;
 8000de2:	e9cd 3814 	strd	r3, r8, [sp, #80]	@ 0x50
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000de6:	f003 fceb 	bl	80047c0 <HAL_ADCEx_InjectedConfigChannel>
 8000dea:	b108      	cbz	r0, 8000df0 <main+0x128>
 8000dec:	b672      	cpsid	i
  while (1)
 8000dee:	e7fe      	b.n	8000dee <main+0x126>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_10;
 8000df0:	230a      	movs	r3, #10
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000df2:	a914      	add	r1, sp, #80	@ 0x50
 8000df4:	4628      	mov	r0, r5
  sConfigInjected.InjectedRank = 3;
 8000df6:	9415      	str	r4, [sp, #84]	@ 0x54
  sConfigInjected.InjectedChannel = ADC_CHANNEL_10;
 8000df8:	9314      	str	r3, [sp, #80]	@ 0x50
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000dfa:	f003 fce1 	bl	80047c0 <HAL_ADCEx_InjectedConfigChannel>
 8000dfe:	b108      	cbz	r0, 8000e04 <main+0x13c>
 8000e00:	b672      	cpsid	i
  while (1)
 8000e02:	e7fe      	b.n	8000e02 <main+0x13a>
  sConfig.Offset = 0;
 8000e04:	e9cd 800f 	strd	r8, r0, [sp, #60]	@ 0x3c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e08:	a90d      	add	r1, sp, #52	@ 0x34
 8000e0a:	4628      	mov	r0, r5
  sConfig.Rank = 1;
 8000e0c:	e9cd 660d 	strd	r6, r6, [sp, #52]	@ 0x34
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e10:	f003 fc20 	bl	8004654 <HAL_ADC_ConfigChannel>
 8000e14:	4604      	mov	r4, r0
 8000e16:	b108      	cbz	r0, 8000e1c <main+0x154>
 8000e18:	b672      	cpsid	i
  while (1)
 8000e1a:	e7fe      	b.n	8000e1a <main+0x152>
  htim1.Instance = TIM1;
 8000e1c:	4d51      	ldr	r5, [pc, #324]	@ (8000f64 <main+0x29c>)
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000e1e:	9008      	str	r0, [sp, #32]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e20:	e9cd 000d 	strd	r0, r0, [sp, #52]	@ 0x34
 8000e24:	e9cd 000f 	strd	r0, r0, [sp, #60]	@ 0x3c
 8000e28:	e9cd 0011 	strd	r0, r0, [sp, #68]	@ 0x44
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000e2c:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8000e30:	e9cd 000b 	strd	r0, r0, [sp, #44]	@ 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e34:	9006      	str	r0, [sp, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e36:	9013      	str	r0, [sp, #76]	@ 0x4c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e38:	9007      	str	r0, [sp, #28]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e3a:	4601      	mov	r1, r0
 8000e3c:	463a      	mov	r2, r7
 8000e3e:	a814      	add	r0, sp, #80	@ 0x50
 8000e40:	f007 f9e2 	bl	8008208 <memset>
  htim1.Instance = TIM1;
 8000e44:	4b48      	ldr	r3, [pc, #288]	@ (8000f68 <main+0x2a0>)
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 8000e46:	606c      	str	r4, [r5, #4]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e48:	61ac      	str	r4, [r5, #24]
  htim1.Instance = TIM1;
 8000e4a:	602b      	str	r3, [r5, #0]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000e4c:	f640 04ca 	movw	r4, #2250	@ 0x8ca
 8000e50:	f44f 7380 	mov.w	r3, #256	@ 0x100
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e54:	4628      	mov	r0, r5
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000e56:	e9c5 4303 	strd	r4, r3, [r5, #12]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000e5a:	60af      	str	r7, [r5, #8]
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 8000e5c:	616e      	str	r6, [r5, #20]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e5e:	f004 fb03 	bl	8005468 <HAL_TIM_Base_Init>
 8000e62:	b108      	cbz	r0, 8000e68 <main+0x1a0>
 8000e64:	b672      	cpsid	i
  while (1)
 8000e66:	e7fe      	b.n	8000e66 <main+0x19e>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e68:	4628      	mov	r0, r5
 8000e6a:	f004 fb97 	bl	800559c <HAL_TIM_PWM_Init>
 8000e6e:	b108      	cbz	r0, 8000e74 <main+0x1ac>
 8000e70:	b672      	cpsid	i
  while (1)
 8000e72:	e7fe      	b.n	8000e72 <main+0x1aa>
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8000e74:	2206      	movs	r2, #6
 8000e76:	2310      	movs	r3, #16
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000e78:	a908      	add	r1, sp, #32
 8000e7a:	4628      	mov	r0, r5
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8000e7c:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000e80:	f004 fd28 	bl	80058d4 <HAL_TIM_SlaveConfigSynchro>
 8000e84:	b108      	cbz	r0, 8000e8a <main+0x1c2>
 8000e86:	b672      	cpsid	i
  while (1)
 8000e88:	e7fe      	b.n	8000e88 <main+0x1c0>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e8a:	e9cd 0006 	strd	r0, r0, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e8e:	a906      	add	r1, sp, #24
 8000e90:	4628      	mov	r0, r5
 8000e92:	f004 fdab 	bl	80059ec <HAL_TIMEx_MasterConfigSynchronization>
 8000e96:	4602      	mov	r2, r0
 8000e98:	b108      	cbz	r0, 8000e9e <main+0x1d6>
 8000e9a:	b672      	cpsid	i
  while (1)
 8000e9c:	e7fe      	b.n	8000e9c <main+0x1d4>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e9e:	2360      	movs	r3, #96	@ 0x60
 8000ea0:	930d      	str	r3, [sp, #52]	@ 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ea2:	4628      	mov	r0, r5
  sConfigOC.Pulse = ((PWM_PERIOD_CYCLES) / 4);
 8000ea4:	f240 4365 	movw	r3, #1125	@ 0x465
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ea8:	a90d      	add	r1, sp, #52	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000eaa:	e9cd 320e 	strd	r3, r2, [sp, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000eae:	e9cd 2210 	strd	r2, r2, [sp, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000eb2:	e9cd 2212 	strd	r2, r2, [sp, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000eb6:	f004 fc09 	bl	80056cc <HAL_TIM_PWM_ConfigChannel>
 8000eba:	b108      	cbz	r0, 8000ec0 <main+0x1f8>
 8000ebc:	b672      	cpsid	i
  while (1)
 8000ebe:	e7fe      	b.n	8000ebe <main+0x1f6>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ec0:	4828      	ldr	r0, [pc, #160]	@ (8000f64 <main+0x29c>)
 8000ec2:	2204      	movs	r2, #4
 8000ec4:	a90d      	add	r1, sp, #52	@ 0x34
 8000ec6:	f004 fc01 	bl	80056cc <HAL_TIM_PWM_ConfigChannel>
 8000eca:	b108      	cbz	r0, 8000ed0 <main+0x208>
 8000ecc:	b672      	cpsid	i
  while (1)
 8000ece:	e7fe      	b.n	8000ece <main+0x206>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ed0:	4824      	ldr	r0, [pc, #144]	@ (8000f64 <main+0x29c>)
 8000ed2:	2208      	movs	r2, #8
 8000ed4:	a90d      	add	r1, sp, #52	@ 0x34
 8000ed6:	f004 fbf9 	bl	80056cc <HAL_TIM_PWM_ConfigChannel>
 8000eda:	b108      	cbz	r0, 8000ee0 <main+0x218>
 8000edc:	b672      	cpsid	i
  while (1)
 8000ede:	e7fe      	b.n	8000ede <main+0x216>
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 8000ee0:	f640 03c9 	movw	r3, #2249	@ 0x8c9
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000ee4:	2270      	movs	r2, #112	@ 0x70
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 8000ee6:	e9cd 230d 	strd	r2, r3, [sp, #52]	@ 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000eea:	481e      	ldr	r0, [pc, #120]	@ (8000f64 <main+0x29c>)
 8000eec:	a90d      	add	r1, sp, #52	@ 0x34
 8000eee:	220c      	movs	r2, #12
 8000ef0:	f004 fbec 	bl	80056cc <HAL_TIM_PWM_ConfigChannel>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	b108      	cbz	r0, 8000efc <main+0x234>
 8000ef8:	b672      	cpsid	i
  while (1)
 8000efa:	e7fe      	b.n	8000efa <main+0x232>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000efc:	f44f 6400 	mov.w	r4, #2048	@ 0x800
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8000f00:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f04:	e9cd 4214 	strd	r4, r2, [sp, #80]	@ 0x50
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f08:	4816      	ldr	r0, [pc, #88]	@ (8000f64 <main+0x29c>)
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f0a:	931b      	str	r3, [sp, #108]	@ 0x6c
  sBreakDeadTimeConfig.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 8000f0c:	224c      	movs	r2, #76	@ 0x4c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f0e:	a914      	add	r1, sp, #80	@ 0x50
  sBreakDeadTimeConfig.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 8000f10:	e9cd 3216 	strd	r3, r2, [sp, #88]	@ 0x58
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW;
 8000f14:	e9cd 3318 	strd	r3, r3, [sp, #96]	@ 0x60
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f18:	f004 fda8 	bl	8005a6c <HAL_TIMEx_ConfigBreakDeadTime>
 8000f1c:	4604      	mov	r4, r0
 8000f1e:	b108      	cbz	r0, 8000f24 <main+0x25c>
 8000f20:	b672      	cpsid	i
  while (1)
 8000f22:	e7fe      	b.n	8000f22 <main+0x25a>
  HAL_TIM_MspPostInit(&htim1);
 8000f24:	480f      	ldr	r0, [pc, #60]	@ (8000f64 <main+0x29c>)
 8000f26:	f003 f821 	bl	8003f6c <HAL_TIM_MspPostInit>
  huart2.Instance = USART2;
 8000f2a:	4810      	ldr	r0, [pc, #64]	@ (8000f6c <main+0x2a4>)
 8000f2c:	4910      	ldr	r1, [pc, #64]	@ (8000f70 <main+0x2a8>)
  huart2.Init.BaudRate = 921600;
 8000f2e:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f32:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f34:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f38:	e9c0 4304 	strd	r4, r3, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f3c:	e9c0 4406 	strd	r4, r4, [r0, #24]
  huart2.Init.BaudRate = 921600;
 8000f40:	e9c0 1200 	strd	r1, r2, [r0]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f44:	f004 fdbc 	bl	8005ac0 <HAL_UART_Init>
 8000f48:	4604      	mov	r4, r0
 8000f4a:	b198      	cbz	r0, 8000f74 <main+0x2ac>
 8000f4c:	b672      	cpsid	i
  while (1)
 8000f4e:	e7fe      	b.n	8000f4e <main+0x286>
 8000f50:	40023800 	.word	0x40023800
 8000f54:	40020800 	.word	0x40020800
 8000f58:	200007ec 	.word	0x200007ec
 8000f5c:	40012000 	.word	0x40012000
 8000f60:	0f000001 	.word	0x0f000001
 8000f64:	200007a4 	.word	0x200007a4
 8000f68:	40010000 	.word	0x40010000
 8000f6c:	2000075c 	.word	0x2000075c
 8000f70:	40004400 	.word	0x40004400
  MX_MotorControl_Init();
 8000f74:	f001 fa80 	bl	8002478 <MX_MotorControl_Init>
  HAL_NVIC_SetPriority(USART2_IRQn, 3, 1);
 8000f78:	2103      	movs	r1, #3
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	2026      	movs	r0, #38	@ 0x26
 8000f7e:	f003 fd05 	bl	800498c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f82:	2026      	movs	r0, #38	@ 0x26
 8000f84:	f003 fd3e 	bl	8004a04 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 3, 0);
 8000f88:	4622      	mov	r2, r4
 8000f8a:	2103      	movs	r1, #3
 8000f8c:	2010      	movs	r0, #16
 8000f8e:	f003 fcfd 	bl	800498c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000f92:	2010      	movs	r0, #16
 8000f94:	f003 fd36 	bl	8004a04 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(ADC_IRQn, 2, 0);
 8000f98:	4622      	mov	r2, r4
 8000f9a:	2102      	movs	r1, #2
 8000f9c:	2012      	movs	r0, #18
 8000f9e:	f003 fcf5 	bl	800498c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000fa2:	2012      	movs	r0, #18
 8000fa4:	f003 fd2e 	bl	8004a04 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000fa8:	4622      	mov	r2, r4
 8000faa:	4621      	mov	r1, r4
 8000fac:	2019      	movs	r0, #25
 8000fae:	f003 fced 	bl	800498c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000fb2:	2019      	movs	r0, #25
 8000fb4:	f003 fd26 	bl	8004a04 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 4, 1);
 8000fb8:	2104      	movs	r1, #4
 8000fba:	2201      	movs	r2, #1
 8000fbc:	2018      	movs	r0, #24
 8000fbe:	f003 fce5 	bl	800498c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000fc2:	2018      	movs	r0, #24
 8000fc4:	f003 fd1e 	bl	8004a04 <HAL_NVIC_EnableIRQ>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);   //B
 8000fc8:	480b      	ldr	r0, [pc, #44]	@ (8000ff8 <main+0x330>)
 8000fca:	4622      	mov	r2, r4
 8000fcc:	2140      	movs	r1, #64	@ 0x40
 8000fce:	f003 feed 	bl	8004dac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET); //G
 8000fd2:	4809      	ldr	r0, [pc, #36]	@ (8000ff8 <main+0x330>)
 8000fd4:	4622      	mov	r2, r4
 8000fd6:	2180      	movs	r1, #128	@ 0x80
 8000fd8:	f003 fee8 	bl	8004dac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);   //R
 8000fdc:	4806      	ldr	r0, [pc, #24]	@ (8000ff8 <main+0x330>)
 8000fde:	4622      	mov	r2, r4
 8000fe0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fe4:	f003 fee2 	bl	8004dac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);   // DRV Enable
 8000fe8:	4803      	ldr	r0, [pc, #12]	@ (8000ff8 <main+0x330>)
 8000fea:	2201      	movs	r2, #1
 8000fec:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ff0:	f003 fedc 	bl	8004dac <HAL_GPIO_WritePin>
  while (1)
 8000ff4:	e7fe      	b.n	8000ff4 <main+0x32c>
 8000ff6:	bf00      	nop
 8000ff8:	40020800 	.word	0x40020800

08000ffc <Error_Handler>:
 8000ffc:	b672      	cpsid	i
  while (1)
 8000ffe:	e7fe      	b.n	8000ffe <Error_Handler+0x2>

08001000 <MC_ProfilerCommand>:
 * @brief Not implemented MC_Profiler function.
 *  */ //cstat !MISRAC2012-Rule-2.7 !RED-unused-param  !MISRAC2012-Rule-2.7  !MISRAC2012-Rule-8.13
__weak uint8_t MC_ProfilerCommand(uint16_t rxLength, uint8_t *rxBuffer, int16_t txSyncFreeSpace, uint16_t *txLength, uint8_t *txBuffer)
{
  return (MCP_CMD_UNKNOWN);
}
 8001000:	2002      	movs	r0, #2
 8001002:	4770      	bx	lr

08001004 <MC_APP_BootHook>:
   */

/* USER CODE BEGIN BootHook */

/* USER CODE END BootHook */
}
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <MC_APP_PostMediumFrequencyHook_M1>:
 * @brief Hook function called right after the Medium Frequency Task for Motor 1.
 *
 *
 *
 */
__weak void MC_APP_PostMediumFrequencyHook_M1(void)
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <MCI_Init>:
  *         (only present if position control is enabled)
  * @param  pPWMHandle pointer to the PWM & current feedback component to be used by the MCI.
  */
__weak void MCI_Init(MCI_Handle_t *pHandle, SpeednTorqCtrl_Handle_t *pSTC, pFOCVars_t pFOCVars,
                     PWMC_Handle_t *pPWMHandle )
{
 800100c:	b410      	push	{r4}
    pHandle->pSTC = pSTC;
    pHandle->pFOCVars = pFOCVars;
    pHandle->pPWM = pPWMHandle;

    /* Buffer related initialization */
    pHandle->lastCommand = MCI_NOCOMMANDSYET;
 800100e:	2400      	movs	r4, #0
    pHandle->hFinalTorque = 0;
    pHandle->hDurationms = 0;
    pHandle->CommandState = MCI_BUFFER_EMPTY;
    pHandle->DirectCommand = MCI_NO_COMMAND;
    pHandle->State = IDLE;
    pHandle->CurrentFaults = MC_NO_FAULTS;
 8001010:	e9c0 4408 	strd	r4, r4, [r0, #32]
    pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8001014:	7404      	strb	r4, [r0, #16]
    pHandle->hFinalSpeed = 0;
 8001016:	f8c0 4012 	str.w	r4, [r0, #18]
    pHandle->CommandState = MCI_BUFFER_EMPTY;
 800101a:	f880 4028 	strb.w	r4, [r0, #40]	@ 0x28
    pHandle->pFOCVars = pFOCVars;
 800101e:	e9c0 1200 	strd	r1, r2, [r0]
    pHandle->PastFaults = MC_NO_FAULTS;
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8001022:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->pPWM = pPWMHandle;
 8001026:	6083      	str	r3, [r0, #8]
}
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop

0800102c <MCI_ExecSpeedRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
 800102c:	f04f 0c01 	mov.w	ip, #1
    pHandle->hFinalSpeed = hFinalSpeed;
    pHandle->hDurationms = hDurationms;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001030:	f240 3301 	movw	r3, #769	@ 0x301
    pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
 8001034:	f880 c010 	strb.w	ip, [r0, #16]
    pHandle->hFinalSpeed = hFinalSpeed;
 8001038:	8241      	strh	r1, [r0, #18]
    pHandle->hDurationms = hDurationms;
 800103a:	8402      	strh	r2, [r0, #32]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800103c:	8503      	strh	r3, [r0, #40]	@ 0x28
    pHandle->LastModalitySetByUser = MCM_SPEED_MODE;

#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 800103e:	4770      	bx	lr

08001040 <MCI_ExecTorqueRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->lastCommand = MCI_CMD_EXECTORQUERAMP;
 8001040:	f04f 0c02 	mov.w	ip, #2
    pHandle->hFinalTorque = hFinalTorque;
    pHandle->hDurationms = hDurationms;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001044:	f240 4301 	movw	r3, #1025	@ 0x401
    pHandle->lastCommand = MCI_CMD_EXECTORQUERAMP;
 8001048:	f880 c010 	strb.w	ip, [r0, #16]
    pHandle->hFinalTorque = hFinalTorque;
 800104c:	8281      	strh	r1, [r0, #20]
    pHandle->hDurationms = hDurationms;
 800104e:	8402      	strh	r2, [r0, #32]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001050:	8503      	strh	r3, [r0, #40]	@ 0x28
    pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8001052:	4770      	bx	lr

08001054 <MCI_SetCurrentReferences>:
  * function.

  @sa MCI_SetCurrentReferences_F
  */
__weak void MCI_SetCurrentReferences(MCI_Handle_t *pHandle, qd_t Iqdref)
{
 8001054:	b082      	sub	sp, #8
  }
  else
  {
#endif

    pHandle->lastCommand = MCI_CMD_SETCURRENTREFERENCES;
 8001056:	2203      	movs	r2, #3
    pHandle->Iqdref.q = Iqdref.q;
    pHandle->Iqdref.d = Iqdref.d;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001058:	f240 4301 	movw	r3, #1025	@ 0x401
    pHandle->lastCommand = MCI_CMD_SETCURRENTREFERENCES;
 800105c:	7402      	strb	r2, [r0, #16]
    pHandle->Iqdref.q = Iqdref.q;
 800105e:	f8c0 1016 	str.w	r1, [r0, #22]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001062:	8503      	strh	r3, [r0, #40]	@ 0x28
    pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8001064:	b002      	add	sp, #8
 8001066:	4770      	bx	lr

08001068 <MCI_FaultProcessing>:
  }
  else
  {
#endif
    /* Set current errors */
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 8001068:	8c83      	ldrh	r3, [r0, #36]	@ 0x24
    pHandle->PastFaults |= hSetErrors;
 800106a:	f8b0 c026 	ldrh.w	ip, [r0, #38]	@ 0x26
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 800106e:	430b      	orrs	r3, r1
 8001070:	ea23 0302 	bic.w	r3, r3, r2
    pHandle->PastFaults |= hSetErrors;
 8001074:	ea41 010c 	orr.w	r1, r1, ip
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 8001078:	8483      	strh	r3, [r0, #36]	@ 0x24
    pHandle->PastFaults |= hSetErrors;
 800107a:	84c1      	strh	r1, [r0, #38]	@ 0x26
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop

08001080 <MCI_ExecBufferedCommands>:
    /* Nothing to do */
  }
  else
  {
#endif
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8001080:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
 8001084:	2b01      	cmp	r3, #1
 8001086:	d000      	beq.n	800108a <MCI_ExecBufferedCommands+0xa>
 8001088:	4770      	bx	lr
{
 800108a:	b510      	push	{r4, lr}
    {
      bool commandHasBeenExecuted = false;
      switch (pHandle->lastCommand)
 800108c:	7c02      	ldrb	r2, [r0, #16]
 800108e:	2a02      	cmp	r2, #2
 8001090:	4604      	mov	r4, r0
 8001092:	d007      	beq.n	80010a4 <MCI_ExecBufferedCommands+0x24>
 8001094:	2a03      	cmp	r2, #3
 8001096:	d028      	beq.n	80010ea <MCI_ExecBufferedCommands+0x6a>
 8001098:	2a01      	cmp	r2, #1
 800109a:	d017      	beq.n	80010cc <MCI_ExecBufferedCommands+0x4c>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESSFULLY;
      }
      else
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESSFULLY;
 800109c:	2303      	movs	r3, #3
 800109e:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
      }
    }
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 80010a2:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 80010a4:	6843      	ldr	r3, [r0, #4]
 80010a6:	2200      	movs	r2, #0
 80010a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 80010ac:	6800      	ldr	r0, [r0, #0]
 80010ae:	2104      	movs	r1, #4
 80010b0:	f006 f8c2 	bl	8007238 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms);
 80010b4:	8c22      	ldrh	r2, [r4, #32]
 80010b6:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 80010ba:	6820      	ldr	r0, [r4, #0]
 80010bc:	f006 f8c0 	bl	8007240 <STC_ExecRamp>
      if (commandHasBeenExecuted)
 80010c0:	2800      	cmp	r0, #0
 80010c2:	d0eb      	beq.n	800109c <MCI_ExecBufferedCommands+0x1c>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESSFULLY;
 80010c4:	2302      	movs	r3, #2
 80010c6:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
}
 80010ca:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 80010cc:	6843      	ldr	r3, [r0, #4]
 80010ce:	2200      	movs	r2, #0
 80010d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          STC_SetControlMode(pHandle->pSTC, MCM_SPEED_MODE);
 80010d4:	6800      	ldr	r0, [r0, #0]
 80010d6:	2103      	movs	r1, #3
 80010d8:	f006 f8ae 	bl	8007238 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms);
 80010dc:	8c22      	ldrh	r2, [r4, #32]
 80010de:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 80010e2:	6820      	ldr	r0, [r4, #0]
 80010e4:	f006 f8ac 	bl	8007240 <STC_ExecRamp>
          break;
 80010e8:	e7ea      	b.n	80010c0 <MCI_ExecBufferedCommands+0x40>
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 80010ea:	6842      	ldr	r2, [r0, #4]
 80010ec:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 80010f0:	f8d0 3016 	ldr.w	r3, [r0, #22]
 80010f4:	6113      	str	r3, [r2, #16]
      if (commandHasBeenExecuted)
 80010f6:	e7e5      	b.n	80010c4 <MCI_ExecBufferedCommands+0x44>

080010f8 <MCI_GetSTMState>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? FAULT_NOW : pHandle->State);
#else
  return (pHandle->State);
#endif
}
 80010f8:	f890 0023 	ldrb.w	r0, [r0, #35]	@ 0x23
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop

08001100 <MCI_GetOccurredFaults>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MC_SW_ERROR : (uint16_t)pHandle->PastFaults);
#else
  return ((uint16_t)pHandle->PastFaults);
#endif
}
 8001100:	8cc0      	ldrh	r0, [r0, #38]	@ 0x26
 8001102:	4770      	bx	lr

08001104 <MCI_GetCurrentFaults>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MC_SW_ERROR : (uint16_t)pHandle->CurrentFaults);
#else
  return ((uint16_t)pHandle->CurrentFaults);
#endif
}
 8001104:	8c80      	ldrh	r0, [r0, #36]	@ 0x24
 8001106:	4770      	bx	lr

08001108 <MCI_StartWithPolarizationMotor>:
{
 8001108:	b510      	push	{r4, lr}
 800110a:	4604      	mov	r4, r0
    if ((IDLE == MCI_GetSTMState(pHandle)) &&
 800110c:	f7ff fff4 	bl	80010f8 <MCI_GetSTMState>
 8001110:	b108      	cbz	r0, 8001116 <MCI_StartWithPolarizationMotor+0xe>
  bool retVal = true;
 8001112:	2001      	movs	r0, #1
}
 8001114:	bd10      	pop	{r4, pc}
        (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8001116:	4620      	mov	r0, r4
 8001118:	f7ff fff2 	bl	8001100 <MCI_GetOccurredFaults>
    if ((IDLE == MCI_GetSTMState(pHandle)) &&
 800111c:	2800      	cmp	r0, #0
 800111e:	d1f8      	bne.n	8001112 <MCI_StartWithPolarizationMotor+0xa>
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8001120:	4620      	mov	r0, r4
 8001122:	f7ff ffef 	bl	8001104 <MCI_GetCurrentFaults>
        (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8001126:	2800      	cmp	r0, #0
 8001128:	d1f3      	bne.n	8001112 <MCI_StartWithPolarizationMotor+0xa>
      pHandle->DirectCommand = MCI_START;
 800112a:	2201      	movs	r2, #1
      pHandle->pPWM->offsetCalibStatus = false;
 800112c:	68a1      	ldr	r1, [r4, #8]
      pHandle->DirectCommand = MCI_START;
 800112e:	f884 2022 	strb.w	r2, [r4, #34]	@ 0x22
      pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001132:	f884 2028 	strb.w	r2, [r4, #40]	@ 0x28
      pHandle->pPWM->offsetCalibStatus = false;
 8001136:	f881 0081 	strb.w	r0, [r1, #129]	@ 0x81
}
 800113a:	bd10      	pop	{r4, pc}

0800113c <MCI_StopMotor>:
{
 800113c:	b538      	push	{r3, r4, r5, lr}
 800113e:	4605      	mov	r5, r0
    State = MCI_GetSTMState(pHandle);
 8001140:	f7ff ffda 	bl	80010f8 <MCI_GetSTMState>
    if ((IDLE == State) || (ICLWAIT == State))
 8001144:	4604      	mov	r4, r0
 8001146:	b118      	cbz	r0, 8001150 <MCI_StopMotor+0x14>
 8001148:	f1b0 040c 	subs.w	r4, r0, #12
 800114c:	bf18      	it	ne
 800114e:	2401      	movne	r4, #1
    if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8001150:	4628      	mov	r0, r5
 8001152:	f7ff ffd5 	bl	8001100 <MCI_GetOccurredFaults>
 8001156:	b110      	cbz	r0, 800115e <MCI_StopMotor+0x22>
  bool retVal = false;
 8001158:	2400      	movs	r4, #0
}
 800115a:	4620      	mov	r0, r4
 800115c:	bd38      	pop	{r3, r4, r5, pc}
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 800115e:	4628      	mov	r0, r5
 8001160:	f7ff ffd0 	bl	8001104 <MCI_GetCurrentFaults>
    if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8001164:	2800      	cmp	r0, #0
 8001166:	d1f7      	bne.n	8001158 <MCI_StopMotor+0x1c>
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 8001168:	2c00      	cmp	r4, #0
 800116a:	d0f5      	beq.n	8001158 <MCI_StopMotor+0x1c>
      pHandle->DirectCommand = MCI_STOP;
 800116c:	2305      	movs	r3, #5
 800116e:	f885 3022 	strb.w	r3, [r5, #34]	@ 0x22
      retVal = true;
 8001172:	e7f2      	b.n	800115a <MCI_StopMotor+0x1e>

08001174 <MCI_FaultAcknowledged>:
{
 8001174:	b510      	push	{r4, lr}
 8001176:	4604      	mov	r4, r0
    if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8001178:	f7ff ffbe 	bl	80010f8 <MCI_GetSTMState>
 800117c:	280b      	cmp	r0, #11
 800117e:	d001      	beq.n	8001184 <MCI_FaultAcknowledged+0x10>
  bool reVal = false;
 8001180:	2000      	movs	r0, #0
}
 8001182:	bd10      	pop	{r4, pc}
    if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8001184:	4620      	mov	r0, r4
 8001186:	f7ff ffbd 	bl	8001104 <MCI_GetCurrentFaults>
 800118a:	2800      	cmp	r0, #0
 800118c:	d1f8      	bne.n	8001180 <MCI_FaultAcknowledged+0xc>
      pHandle->DirectCommand = MCI_ACK_FAULTS;
 800118e:	2302      	movs	r3, #2
 8001190:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
      pHandle->PastFaults = MC_NO_FAULTS;
 8001194:	84e0      	strh	r0, [r4, #38]	@ 0x26
      reVal = true;
 8001196:	2001      	movs	r0, #1
}
 8001198:	bd10      	pop	{r4, pc}
 800119a:	bf00      	nop

0800119c <MCI_GetFaultState>:
    LocalFaultState = MC_SW_ERROR | (MC_SW_ERROR << 16);
  }
  else
  {
#endif
    LocalFaultState = (uint32_t)(pHandle->PastFaults);
 800119c:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
    LocalFaultState |= (uint32_t)(pHandle->CurrentFaults) << 16;
 800119e:	8c80      	ldrh	r0, [r0, #36]	@ 0x24
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
  return (LocalFaultState);
}
 80011a0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop

080011a8 <MCI_GetControlMode>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MCM_TORQUE_MODE : pHandle->LastModalitySetByUser);
#else
  return (pHandle->LastModalitySetByUser);
#endif
}
 80011a8:	f890 0029 	ldrb.w	r0, [r0, #41]	@ 0x29
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop

080011b0 <MCI_GetImposedMotorDirection>:
    /* Nothing to do */
  }
  else
  {
#endif
    switch (pHandle->lastCommand)
 80011b0:	7c03      	ldrb	r3, [r0, #16]
 80011b2:	2b02      	cmp	r3, #2
 80011b4:	d005      	beq.n	80011c2 <MCI_GetImposedMotorDirection+0x12>
 80011b6:	2b03      	cmp	r3, #3
 80011b8:	d013      	beq.n	80011e2 <MCI_GetImposedMotorDirection+0x32>
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d009      	beq.n	80011d2 <MCI_GetImposedMotorDirection+0x22>
  int16_t retVal = 1;
 80011be:	2001      	movs	r0, #1
    }
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
  return (retVal);
}
 80011c0:	4770      	bx	lr
        if (pHandle->hFinalTorque < 0)
 80011c2:	f9b0 3014 	ldrsh.w	r3, [r0, #20]
          retVal = -1;
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	bfac      	ite	ge
 80011ca:	2001      	movge	r0, #1
 80011cc:	f04f 30ff 	movlt.w	r0, #4294967295
 80011d0:	4770      	bx	lr
        if (pHandle->hFinalSpeed < 0)
 80011d2:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
          retVal = -1;
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	bfac      	ite	ge
 80011da:	2001      	movge	r0, #1
 80011dc:	f04f 30ff 	movlt.w	r0, #4294967295
 80011e0:	4770      	bx	lr
        if (pHandle->Iqdref.q < 0)
 80011e2:	f9b0 3016 	ldrsh.w	r3, [r0, #22]
          retVal = -1;
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	bfac      	ite	ge
 80011ea:	2001      	movge	r0, #1
 80011ec:	f04f 30ff 	movlt.w	r0, #4294967295
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop

080011f4 <MCI_GetLastRampFinalSpeed>:
  }
  return (retVal);
#else
  return (pHandle->hFinalSpeed);
#endif
}
 80011f4:	f9b0 0012 	ldrsh.w	r0, [r0, #18]
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop

080011fc <MCI_GetLastRampFinalTorque>:
  }
  return (retVal);
#else
  return (pHandle->hFinalTorque);
#endif
}
 80011fc:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop

08001204 <MCI_GetLastRampFinalDuration>:
  }
  return (retVal);
#else
  return (pHandle->hDurationms);
#endif
}
 8001204:	8c00      	ldrh	r0, [r0, #32]
 8001206:	4770      	bx	lr

08001208 <MCI_StopRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    STC_StopRamp(pHandle->pSTC);
 8001208:	6800      	ldr	r0, [r0, #0]
 800120a:	f006 b859 	b.w	80072c0 <STC_StopRamp>
 800120e:	bf00      	nop

08001210 <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit(MCI_Handle_t *pHandle)
{
 8001210:	b508      	push	{r3, lr}
    temp_speed = 0;
  }
  else
  {
#endif
    SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor(pHandle->pSTC);
 8001212:	6800      	ldr	r0, [r0, #0]
 8001214:	f005 fffe 	bl	8007214 <STC_GetSpeedSensor>
    temp_speed = SPD_GetAvrgMecSpeedUnit(SpeedSensor);
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
  return (temp_speed);
}
 8001218:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    temp_speed = SPD_GetAvrgMecSpeedUnit(SpeedSensor);
 800121c:	f005 bf96 	b.w	800714c <SPD_GetAvrgMecSpeedUnit>

08001220 <MCI_GetMecSpeedRefUnit>:
__weak int16_t MCI_GetMecSpeedRefUnit(MCI_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? 0 : STC_GetMecSpeedRefUnit(pHandle->pSTC));
#else
  return (STC_GetMecSpeedRefUnit(pHandle->pSTC));
 8001220:	6800      	ldr	r0, [r0, #0]
 8001222:	f006 b801 	b.w	8007228 <STC_GetMecSpeedRefUnit>
 8001226:	bf00      	nop

08001228 <MCI_GetIab>:
  {
    tempVal = pHandle->pFOCVars->Iab;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iab);
 8001228:	6842      	ldr	r2, [r0, #4]
 800122a:	6810      	ldr	r0, [r2, #0]
 800122c:	2300      	movs	r3, #0
 800122e:	b282      	uxth	r2, r0
 8001230:	f362 030f 	bfi	r3, r2, #0, #16
 8001234:	0c00      	lsrs	r0, r0, #16
 8001236:	f360 431f 	bfi	r3, r0, #16, #16
{
 800123a:	b082      	sub	sp, #8
#endif
}
 800123c:	4618      	mov	r0, r3
 800123e:	b002      	add	sp, #8
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop

08001244 <MCI_GetIalphabeta>:
  {
    tempVal = pHandle->pFOCVars->Ialphabeta;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Ialphabeta);
 8001244:	6842      	ldr	r2, [r0, #4]
 8001246:	6850      	ldr	r0, [r2, #4]
 8001248:	2300      	movs	r3, #0
 800124a:	b282      	uxth	r2, r0
 800124c:	f362 030f 	bfi	r3, r2, #0, #16
 8001250:	0c00      	lsrs	r0, r0, #16
 8001252:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001256:	b082      	sub	sp, #8
#endif
}
 8001258:	4618      	mov	r0, r3
 800125a:	b002      	add	sp, #8
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop

08001260 <MCI_GetIqd>:
  {
    tempVal = pHandle->pFOCVars->Iqd;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iqd);
 8001260:	6842      	ldr	r2, [r0, #4]
 8001262:	68d0      	ldr	r0, [r2, #12]
 8001264:	2300      	movs	r3, #0
 8001266:	b282      	uxth	r2, r0
 8001268:	f362 030f 	bfi	r3, r2, #0, #16
 800126c:	0c00      	lsrs	r0, r0, #16
 800126e:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001272:	b082      	sub	sp, #8
#endif
}
 8001274:	4618      	mov	r0, r3
 8001276:	b002      	add	sp, #8
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop

0800127c <MCI_GetIqdref>:
  {
    tempVal = pHandle->pFOCVars->Iqdref;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iqdref);
 800127c:	6842      	ldr	r2, [r0, #4]
 800127e:	6910      	ldr	r0, [r2, #16]
 8001280:	2300      	movs	r3, #0
 8001282:	b282      	uxth	r2, r0
 8001284:	f362 030f 	bfi	r3, r2, #0, #16
 8001288:	0c00      	lsrs	r0, r0, #16
 800128a:	f360 431f 	bfi	r3, r0, #16, #16
{
 800128e:	b082      	sub	sp, #8
#endif
}
 8001290:	4618      	mov	r0, r3
 8001292:	b002      	add	sp, #8
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop

08001298 <MCI_GetVqd>:
  {
    tempVal = pHandle->pFOCVars->Vqd;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Vqd);
 8001298:	6842      	ldr	r2, [r0, #4]
 800129a:	f8d2 0016 	ldr.w	r0, [r2, #22]
 800129e:	2300      	movs	r3, #0
 80012a0:	b282      	uxth	r2, r0
 80012a2:	f362 030f 	bfi	r3, r2, #0, #16
 80012a6:	0c00      	lsrs	r0, r0, #16
 80012a8:	f360 431f 	bfi	r3, r0, #16, #16
{
 80012ac:	b082      	sub	sp, #8
#endif
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	b002      	add	sp, #8
 80012b2:	4770      	bx	lr

080012b4 <MCI_GetValphabeta>:
  {
    tempVal = pHandle->pFOCVars->Valphabeta;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Valphabeta);
 80012b4:	6842      	ldr	r2, [r0, #4]
 80012b6:	f8d2 001a 	ldr.w	r0, [r2, #26]
 80012ba:	2300      	movs	r3, #0
 80012bc:	b282      	uxth	r2, r0
 80012be:	f362 030f 	bfi	r3, r2, #0, #16
 80012c2:	0c00      	lsrs	r0, r0, #16
 80012c4:	f360 431f 	bfi	r3, r0, #16, #16
{
 80012c8:	b082      	sub	sp, #8
#endif
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	b002      	add	sp, #8
 80012ce:	4770      	bx	lr

080012d0 <MCI_GetTeref>:
__weak int16_t MCI_GetTeref(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? 0 : pHandle->pFOCVars->hTeref);
#else
  return (pHandle->pFOCVars->hTeref);
 80012d0:	6843      	ldr	r3, [r0, #4]
#endif
}
 80012d2:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 80012d6:	4770      	bx	lr

080012d8 <MCI_Clear_Iqdref>:
/**
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_Clear_Iqdref(MCI_Handle_t *pHandle)
{
 80012d8:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref(pHandle->pSTC);
 80012da:	e9d0 0400 	ldrd	r0, r4, [r0]
 80012de:	f006 f82d 	bl	800733c <STC_GetDefaultIqdref>
 80012e2:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80012e6:	8220      	strh	r0, [r4, #16]
 80012e8:	8263      	strh	r3, [r4, #18]
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 80012ea:	bd10      	pop	{r4, pc}

080012ec <MCI_Clear_PerfMeasure>:
    /* Nothing to do */
  }
  else
  {
#endif
    MC_Perf_Clear(pHandle->pPerfMeasure,bMotor);
 80012ec:	68c0      	ldr	r0, [r0, #12]
 80012ee:	f000 b931 	b.w	8001554 <MC_Perf_Clear>
 80012f2:	bf00      	nop

080012f4 <MCM_Clarke>:
  *                       beta = -(2*b+a)/sqrt(3)
  * @param  Input: stator values a and b in ab_t format.
  * @retval Stator values alpha and beta in alphabeta_t format.
  */
__weak alphabeta_t MCM_Clarke(ab_t Input)
{
 80012f4:	f3c0 430f 	ubfx	r3, r0, #16, #16
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.a);

  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 80012f8:	f644 11e6 	movw	r1, #18918	@ 0x49e6
#ifndef FULL_MISRA_C_COMPLIANCY_MC_MATH
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 80012fc:	f24b 621a 	movw	r2, #46618	@ 0xb61a
  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 8001300:	fb13 f301 	smulbb	r3, r3, r1
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 8001304:	fb10 f202 	smulbb	r2, r0, r2
 8001308:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
#else
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) / 32768;
#endif

  /* Check saturation of Ibeta */
  if (wbeta_tmp > INT16_MAX)
 800130c:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
{
 8001310:	b084      	sub	sp, #16
 8001312:	b203      	sxth	r3, r0
  if (wbeta_tmp > INT16_MAX)
 8001314:	da05      	bge.n	8001322 <MCM_Clarke+0x2e>
 8001316:	13d1      	asrs	r1, r2, #15
  {
    hbeta_tmp = INT16_MAX;
  }
  else if (wbeta_tmp < (-32768))
 8001318:	f511 4f00 	cmn.w	r1, #32768	@ 0x8000
 800131c:	da0c      	bge.n	8001338 <MCM_Clarke+0x44>
 800131e:	4a09      	ldr	r2, [pc, #36]	@ (8001344 <MCM_Clarke+0x50>)
 8001320:	e001      	b.n	8001326 <MCM_Clarke+0x32>
 8001322:	f647 72ff 	movw	r2, #32767	@ 0x7fff
  else
  {
    /* Nothing to do */
  }

  return (Output);
 8001326:	b29b      	uxth	r3, r3
 8001328:	2000      	movs	r0, #0
 800132a:	f363 000f 	bfi	r0, r3, #0, #16
 800132e:	b293      	uxth	r3, r2
 8001330:	f363 401f 	bfi	r0, r3, #16, #16
}
 8001334:	b004      	add	sp, #16
 8001336:	4770      	bx	lr
    hbeta_tmp = ((int16_t)wbeta_tmp);
 8001338:	4802      	ldr	r0, [pc, #8]	@ (8001344 <MCM_Clarke+0x50>)
 800133a:	b20a      	sxth	r2, r1
 800133c:	4282      	cmp	r2, r0
 800133e:	bfb8      	it	lt
 8001340:	4602      	movlt	r2, r0
 8001342:	e7f0      	b.n	8001326 <MCM_Clarke+0x32>
 8001344:	ffff8001 	.word	0xffff8001

08001348 <MCM_Trig_Functions>:
  uint16_t uhindex;

  Trig_Components Local_Components;

  /* 10 bit index computation  */
  shindex = (((int32_t)32768) + ((int32_t)hAngle));
 8001348:	f500 4000 	add.w	r0, r0, #32768	@ 0x8000
  uhindex = (uint16_t)shindex;
  uhindex /= ((uint16_t)64);
 800134c:	f3c0 1089 	ubfx	r0, r0, #6, #10

  switch (((uint16_t)uhindex) & SIN_MASK)
 8001350:	f400 7140 	and.w	r1, r0, #768	@ 0x300
 8001354:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
{
 8001358:	b082      	sub	sp, #8
  switch (((uint16_t)uhindex) & SIN_MASK)
 800135a:	d028      	beq.n	80013ae <MCM_Trig_Functions+0x66>
 800135c:	f04f 0300 	mov.w	r3, #0
 8001360:	461a      	mov	r2, r3
 8001362:	d816      	bhi.n	8001392 <MCM_Trig_Functions+0x4a>
 8001364:	b361      	cbz	r1, 80013c0 <MCM_Trig_Functions+0x78>
 8001366:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800136a:	d109      	bne.n	8001380 <MCM_Trig_Functions+0x38>
      break;
    }

    case U270_360:
    {
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800136c:	b2c0      	uxtb	r0, r0
 800136e:	43c2      	mvns	r2, r0
 8001370:	491a      	ldr	r1, [pc, #104]	@ (80013dc <MCM_Trig_Functions+0x94>)
 8001372:	b2d2      	uxtb	r2, r2
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
 8001374:	f931 3010 	ldrsh.w	r3, [r1, r0, lsl #1]
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001378:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800137c:	4252      	negs	r2, r2
 800137e:	b212      	sxth	r2, r2
    }

    default:
      break;
  }
  return (Local_Components);
 8001380:	b29b      	uxth	r3, r3
 8001382:	2000      	movs	r0, #0
 8001384:	f363 000f 	bfi	r0, r3, #0, #16
 8001388:	b292      	uxth	r2, r2
 800138a:	f362 401f 	bfi	r0, r2, #16, #16
}
 800138e:	b002      	add	sp, #8
 8001390:	4770      	bx	lr
  switch (((uint16_t)uhindex) & SIN_MASK)
 8001392:	f5b1 7f40 	cmp.w	r1, #768	@ 0x300
 8001396:	d1f3      	bne.n	8001380 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001398:	4910      	ldr	r1, [pc, #64]	@ (80013dc <MCM_Trig_Functions+0x94>)
 800139a:	b2c0      	uxtb	r0, r0
 800139c:	43c2      	mvns	r2, r0
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 800139e:	f831 3010 	ldrh.w	r3, [r1, r0, lsl #1]
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80013a2:	b2d2      	uxtb	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80013a4:	425b      	negs	r3, r3
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80013a6:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80013aa:	b21b      	sxth	r3, r3
      break;
 80013ac:	e7e8      	b.n	8001380 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 80013ae:	b2c0      	uxtb	r0, r0
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80013b0:	43c3      	mvns	r3, r0
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 80013b2:	490a      	ldr	r1, [pc, #40]	@ (80013dc <MCM_Trig_Functions+0x94>)
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80013b4:	b2db      	uxtb	r3, r3
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 80013b6:	f931 2010 	ldrsh.w	r2, [r1, r0, lsl #1]
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80013ba:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
      break;
 80013be:	e7df      	b.n	8001380 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80013c0:	b2c0      	uxtb	r0, r0
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80013c2:	43c3      	mvns	r3, r0
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80013c4:	4905      	ldr	r1, [pc, #20]	@ (80013dc <MCM_Trig_Functions+0x94>)
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80013c6:	b2db      	uxtb	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80013c8:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80013cc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80013d0:	4252      	negs	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80013d2:	425b      	negs	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80013d4:	b212      	sxth	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80013d6:	b21b      	sxth	r3, r3
      break;
 80013d8:	e7d2      	b.n	8001380 <MCM_Trig_Functions+0x38>
 80013da:	bf00      	nop
 80013dc:	08008444 	.word	0x08008444

080013e0 <MCM_Park>:
{
 80013e0:	b530      	push	{r4, r5, lr}
 80013e2:	4605      	mov	r5, r0
 80013e4:	4604      	mov	r4, r0
 80013e6:	b085      	sub	sp, #20
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 80013e8:	4608      	mov	r0, r1
 80013ea:	f7ff ffad 	bl	8001348 <MCM_Trig_Functions>
 80013ee:	b22d      	sxth	r5, r5
 80013f0:	b201      	sxth	r1, r0
 80013f2:	1424      	asrs	r4, r4, #16
 80013f4:	1400      	asrs	r0, r0, #16
  q_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hCos);
 80013f6:	fb05 f301 	mul.w	r3, r5, r1
  wqd_tmp = (q_tmp_1 - q_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 80013fa:	fb04 3310 	mls	r3, r4, r0, r3
  if (wqd_tmp > INT16_MAX)
 80013fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001402:	da05      	bge.n	8001410 <MCM_Park+0x30>
 8001404:	13da      	asrs	r2, r3, #15
  else if (wqd_tmp < (-32768))
 8001406:	f512 4f00 	cmn.w	r2, #32768	@ 0x8000
 800140a:	da22      	bge.n	8001452 <MCM_Park+0x72>
 800140c:	4a14      	ldr	r2, [pc, #80]	@ (8001460 <MCM_Park+0x80>)
 800140e:	e001      	b.n	8001414 <MCM_Park+0x34>
 8001410:	f647 72ff 	movw	r2, #32767	@ 0x7fff
  d_tmp_2 = Input.beta * ((int32_t )Local_Vector_Components.hCos);
 8001414:	fb01 f404 	mul.w	r4, r1, r4
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8001418:	fb05 4400 	mla	r4, r5, r0, r4
  if (wqd_tmp > INT16_MAX)
 800141c:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8001420:	ea4f 33e4 	mov.w	r3, r4, asr #15
  if (wqd_tmp > INT16_MAX)
 8001424:	da04      	bge.n	8001430 <MCM_Park+0x50>
  else if (wqd_tmp < (-32768))
 8001426:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800142a:	da0c      	bge.n	8001446 <MCM_Park+0x66>
 800142c:	4b0c      	ldr	r3, [pc, #48]	@ (8001460 <MCM_Park+0x80>)
 800142e:	e001      	b.n	8001434 <MCM_Park+0x54>
 8001430:	f647 73ff 	movw	r3, #32767	@ 0x7fff
  return (Output);
 8001434:	b292      	uxth	r2, r2
 8001436:	2000      	movs	r0, #0
 8001438:	f362 000f 	bfi	r0, r2, #0, #16
 800143c:	b29b      	uxth	r3, r3
 800143e:	f363 401f 	bfi	r0, r3, #16, #16
}
 8001442:	b005      	add	sp, #20
 8001444:	bd30      	pop	{r4, r5, pc}
    hqd_tmp = ((int16_t)wqd_tmp);
 8001446:	4906      	ldr	r1, [pc, #24]	@ (8001460 <MCM_Park+0x80>)
 8001448:	b21b      	sxth	r3, r3
 800144a:	428b      	cmp	r3, r1
 800144c:	bfb8      	it	lt
 800144e:	460b      	movlt	r3, r1
 8001450:	e7f0      	b.n	8001434 <MCM_Park+0x54>
    hqd_tmp = ((int16_t)wqd_tmp);
 8001452:	4b03      	ldr	r3, [pc, #12]	@ (8001460 <MCM_Park+0x80>)
 8001454:	b212      	sxth	r2, r2
 8001456:	429a      	cmp	r2, r3
 8001458:	bfb8      	it	lt
 800145a:	461a      	movlt	r2, r3
 800145c:	e7da      	b.n	8001414 <MCM_Park+0x34>
 800145e:	bf00      	nop
 8001460:	ffff8001 	.word	0xffff8001

08001464 <MCM_Rev_Park>:
{
 8001464:	b530      	push	{r4, r5, lr}
 8001466:	4605      	mov	r5, r0
 8001468:	b085      	sub	sp, #20
 800146a:	4604      	mov	r4, r0
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 800146c:	4608      	mov	r0, r1
 800146e:	f7ff ff6b 	bl	8001348 <MCM_Trig_Functions>
 8001472:	1424      	asrs	r4, r4, #16
 8001474:	1402      	asrs	r2, r0, #16
 8001476:	b22d      	sxth	r5, r5
 8001478:	b200      	sxth	r0, r0
  alpha_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hSin);
 800147a:	fb04 f302 	mul.w	r3, r4, r2
  Output.alpha = (int16_t)(((alpha_tmp1) + (alpha_tmp2)) >> 15);
 800147e:	fb05 3300 	mla	r3, r5, r0, r3
  beta_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hCos);
 8001482:	fb00 f404 	mul.w	r4, r0, r4
  Output.beta = (int16_t)((beta_tmp2 - beta_tmp1) >> 15);
 8001486:	fb05 4412 	mls	r4, r5, r2, r4
  return (Output);
 800148a:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 800148e:	2000      	movs	r0, #0
 8001490:	f363 000f 	bfi	r0, r3, #0, #16
 8001494:	f3c4 34cf 	ubfx	r4, r4, #15, #16
 8001498:	f364 401f 	bfi	r0, r4, #16, #16
}
 800149c:	b005      	add	sp, #20
 800149e:	bd30      	pop	{r4, r5, pc}

080014a0 <MCM_Sqrt>:
  */
__weak int32_t MCM_Sqrt(int32_t wInput)
{
  int32_t wtemprootnew;

  if (wInput > 0)
 80014a0:	1e03      	subs	r3, r0, #0
 80014a2:	dd32      	ble.n	800150a <MCM_Sqrt+0x6a>
    {
      wtemproot = ((int32_t)128);
    }
    else
    {
      wtemproot = ((int32_t)8192);
 80014a4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80014a8:	bfd4      	ite	le
 80014aa:	2180      	movle	r1, #128	@ 0x80
 80014ac:	f44f 5100 	movgt.w	r1, #8192	@ 0x2000
    }

    do
    {
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 80014b0:	fb93 f2f1 	sdiv	r2, r3, r1
 80014b4:	440a      	add	r2, r1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 80014b6:	ebb1 0f62 	cmp.w	r1, r2, asr #1
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 80014ba:	ea4f 0062 	mov.w	r0, r2, asr #1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 80014be:	d025      	beq.n	800150c <MCM_Sqrt+0x6c>
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 80014c0:	fb93 f2f0 	sdiv	r2, r3, r0
 80014c4:	4402      	add	r2, r0
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 80014c6:	ebb0 0f62 	cmp.w	r0, r2, asr #1
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 80014ca:	ea4f 0162 	mov.w	r1, r2, asr #1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 80014ce:	d01d      	beq.n	800150c <MCM_Sqrt+0x6c>
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 80014d0:	fb93 f2f1 	sdiv	r2, r3, r1
 80014d4:	440a      	add	r2, r1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 80014d6:	ebb1 0f62 	cmp.w	r1, r2, asr #1
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 80014da:	ea4f 0062 	mov.w	r0, r2, asr #1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 80014de:	d015      	beq.n	800150c <MCM_Sqrt+0x6c>
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 80014e0:	fb93 f2f0 	sdiv	r2, r3, r0
 80014e4:	4402      	add	r2, r0
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 80014e6:	ebb0 0f62 	cmp.w	r0, r2, asr #1
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 80014ea:	ea4f 0162 	mov.w	r1, r2, asr #1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 80014ee:	d00d      	beq.n	800150c <MCM_Sqrt+0x6c>
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 80014f0:	fb93 f2f1 	sdiv	r2, r3, r1
 80014f4:	440a      	add	r2, r1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 80014f6:	ebb1 0f62 	cmp.w	r1, r2, asr #1
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 80014fa:	ea4f 0062 	mov.w	r0, r2, asr #1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 80014fe:	d005      	beq.n	800150c <MCM_Sqrt+0x6c>
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 8001500:	fb93 f3f0 	sdiv	r3, r3, r0
 8001504:	4418      	add	r0, r3
 8001506:	1040      	asrs	r0, r0, #1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 8001508:	4770      	bx	lr
    while (biter < 6U);

  }
  else
  {
    wtemprootnew = (int32_t)0;
 800150a:	2000      	movs	r0, #0
  }

  return (wtemprootnew);
}
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop

08001510 <MC_Perf_Measure_Init>:
#endif
  uint8_t  i;
  Perf_Handle_t  *pHdl;

  /* Set Debug mod for DWT IP Enabling */
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001510:	490e      	ldr	r1, [pc, #56]	@ (800154c <MC_Perf_Measure_Init+0x3c>)

  if (DWT->CTRL != 0U)
 8001512:	4a0f      	ldr	r2, [pc, #60]	@ (8001550 <MC_Perf_Measure_Init+0x40>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001514:	f8d1 30fc 	ldr.w	r3, [r1, #252]	@ 0xfc
 8001518:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800151c:	f8c1 30fc 	str.w	r3, [r1, #252]	@ 0xfc
  if (DWT->CTRL != 0U)
 8001520:	6813      	ldr	r3, [r2, #0]
 8001522:	b12b      	cbz	r3, 8001530 <MC_Perf_Measure_Init+0x20>
  {                                        /* Check if DWT is present. */
    DWT->CYCCNT  = 0;
 8001524:	2300      	movs	r3, #0
 8001526:	6053      	str	r3, [r2, #4]
    DWT->CTRL   |= DWT_CTRL_CYCCNTENA_Msk; /* Enable Cycle Counter. */
 8001528:	6813      	ldr	r3, [r2, #0]
 800152a:	f043 0301 	orr.w	r3, r3, #1
 800152e:	6013      	str	r3, [r2, #0]
    {
      pHdl = &pHandle->MC_Perf_TraceLog[i];
      pHdl->StartMeasure = 0;
      pHdl->DeltaTimeInCycle = 0;
      pHdl->min = UINT32_MAX;
      pHdl->max = 0;
 8001530:	2300      	movs	r3, #0
    }
    pHandle->BG_Task_OnGoing = false;
    pHandle->AccHighFreqTasksCnt = 0;
 8001532:	f04f 32ff 	mov.w	r2, #4294967295
 8001536:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800153a:	e9c0 3203 	strd	r3, r2, [r0, #12]
 800153e:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8001542:	e9c0 3207 	strd	r3, r2, [r0, #28]
      pHdl->max = 0;
 8001546:	6243      	str	r3, [r0, #36]	@ 0x24
    pHandle->BG_Task_OnGoing = false;
 8001548:	7003      	strb	r3, [r0, #0]
#ifdef NULL_PTR_CHECK_MC_PERF
  }
#endif
}
 800154a:	4770      	bx	lr
 800154c:	e000ed00 	.word	0xe000ed00
 8001550:	e0001000 	.word	0xe0001000

08001554 <MC_Perf_Clear>:
    Perf_Handle_t  *pHdl;

    for (i = 0U; i < 2; i++)
    {
      pHdl = &pHandle->MC_Perf_TraceLog[2*bMotor+i];
      pHdl->DeltaTimeInCycle = 0;
 8001554:	014b      	lsls	r3, r1, #5
 8001556:	f103 0208 	add.w	r2, r3, #8
 800155a:	eb00 1141 	add.w	r1, r0, r1, lsl #5
{
 800155e:	b410      	push	{r4}
      pHdl->DeltaTimeInCycle = 0;
 8001560:	2300      	movs	r3, #0
 8001562:	f04f 34ff 	mov.w	r4, #4294967295
 8001566:	4402      	add	r2, r0
 8001568:	e9c2 3401 	strd	r3, r4, [r2, #4]
 800156c:	e9c1 3407 	strd	r3, r4, [r1, #28]
      pHdl->min = UINT32_MAX;
      pHdl->max = 0;
 8001570:	614b      	str	r3, [r1, #20]
    }
#ifdef NULL_PTR_CHECK_MC_PERF
  }
#endif
}
 8001572:	f85d 4b04 	ldr.w	r4, [sp], #4
      pHdl->max = 0;
 8001576:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop

0800157c <MC_Perf_Measure_Start>:
    /* Nothing to do */
  }
  else
  {
#endif
    uint32_t StartMeasure = DWT->CYCCNT;
 800157c:	4b02      	ldr	r3, [pc, #8]	@ (8001588 <MC_Perf_Measure_Start+0xc>)
    pHandle->MC_Perf_TraceLog[CodeSection].StartMeasure = StartMeasure;
 800157e:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    uint32_t StartMeasure = DWT->CYCCNT;
 8001582:	685b      	ldr	r3, [r3, #4]
    pHandle->MC_Perf_TraceLog[CodeSection].StartMeasure = StartMeasure;
 8001584:	6083      	str	r3, [r0, #8]
#ifdef NULL_PTR_CHECK_MC_PERF
  }
#endif
}
 8001586:	4770      	bx	lr
 8001588:	e0001000 	.word	0xe0001000

0800158c <MC_BG_Perf_Measure_Start>:
  }
  else
  {
#endif
    pHandle->BG_Task_OnGoing = true;
    pHandle->AccHighFreqTasksCnt = 0;
 800158c:	2200      	movs	r2, #0
    uint32_t StartMeasure = DWT->CYCCNT;
 800158e:	4b04      	ldr	r3, [pc, #16]	@ (80015a0 <MC_BG_Perf_Measure_Start+0x14>)
    pHandle->AccHighFreqTasksCnt = 0;
 8001590:	6042      	str	r2, [r0, #4]
    pHandle->MC_Perf_TraceLog[CodeSection].StartMeasure = StartMeasure;
 8001592:	eb00 1101 	add.w	r1, r0, r1, lsl #4
    uint32_t StartMeasure = DWT->CYCCNT;
 8001596:	685b      	ldr	r3, [r3, #4]
    pHandle->BG_Task_OnGoing = true;
 8001598:	2201      	movs	r2, #1
 800159a:	7002      	strb	r2, [r0, #0]
    pHandle->MC_Perf_TraceLog[CodeSection].StartMeasure = StartMeasure;
 800159c:	608b      	str	r3, [r1, #8]
#ifdef NULL_PTR_CHECK_MC_PERF
  }
#endif
}
 800159e:	4770      	bx	lr
 80015a0:	e0001000 	.word	0xe0001000

080015a4 <MC_Perf_Measure_Stop>:
  {
#endif
    uint32_t StopMeasure;
    Perf_Handle_t *pHdl;

    StopMeasure = DWT->CYCCNT;
 80015a4:	4a0f      	ldr	r2, [pc, #60]	@ (80015e4 <MC_Perf_Measure_Stop+0x40>)
    pHdl = &pHandle->MC_Perf_TraceLog[CodeSection];

    /* Check Overflow cases */
    if (StopMeasure < pHdl->StartMeasure)
 80015a6:	eb00 1301 	add.w	r3, r0, r1, lsl #4
{
 80015aa:	b410      	push	{r4}
    if (StopMeasure < pHdl->StartMeasure)
 80015ac:	689b      	ldr	r3, [r3, #8]
    StopMeasure = DWT->CYCCNT;
 80015ae:	6854      	ldr	r4, [r2, #4]
    if (StopMeasure < pHdl->StartMeasure)
 80015b0:	42a3      	cmp	r3, r4
    {
      pHdl->DeltaTimeInCycle = (UINT32_MAX - pHdl->StartMeasure) + StopMeasure;
 80015b2:	bf88      	it	hi
 80015b4:	f104 34ff 	addhi.w	r4, r4, #4294967295
    if (StopMeasure < pHdl->StartMeasure)
 80015b8:	010a      	lsls	r2, r1, #4
    }
    else
    {
      pHdl->DeltaTimeInCycle = StopMeasure - pHdl->StartMeasure;
 80015ba:	1ae3      	subs	r3, r4, r3
 80015bc:	4402      	add	r2, r0
    }

    if(pHandle->BG_Task_OnGoing)
 80015be:	7804      	ldrb	r4, [r0, #0]
 80015c0:	60d3      	str	r3, [r2, #12]
 80015c2:	b114      	cbz	r4, 80015ca <MC_Perf_Measure_Stop+0x26>
    {
      pHandle->AccHighFreqTasksCnt += pHdl->DeltaTimeInCycle;
 80015c4:	6842      	ldr	r2, [r0, #4]
 80015c6:	441a      	add	r2, r3
 80015c8:	6042      	str	r2, [r0, #4]
    else
    {
      /* Nothing to do */
    }

    if (pHdl->max < pHdl->DeltaTimeInCycle)
 80015ca:	eb00 1001 	add.w	r0, r0, r1, lsl #4
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_MC_PERF
  }
#endif
}
 80015ce:	f85d 4b04 	ldr.w	r4, [sp], #4
    if (pHdl->max < pHdl->DeltaTimeInCycle)
 80015d2:	6942      	ldr	r2, [r0, #20]
 80015d4:	429a      	cmp	r2, r3
    if (pHdl->min > pHdl->DeltaTimeInCycle)
 80015d6:	6902      	ldr	r2, [r0, #16]
      pHdl->max = pHdl->DeltaTimeInCycle;
 80015d8:	bf38      	it	cc
 80015da:	6143      	strcc	r3, [r0, #20]
    if (pHdl->min > pHdl->DeltaTimeInCycle)
 80015dc:	429a      	cmp	r2, r3
      pHdl->min = pHdl->DeltaTimeInCycle;
 80015de:	bf88      	it	hi
 80015e0:	6103      	strhi	r3, [r0, #16]
}
 80015e2:	4770      	bx	lr
 80015e4:	e0001000 	.word	0xe0001000

080015e8 <MC_BG_Perf_Measure_Stop>:
  }
  else
  {
#endif
    Perf_Handle_t *pHdl;
    uint32_t StopMeasure = DWT->CYCCNT;
 80015e8:	4a11      	ldr	r2, [pc, #68]	@ (8001630 <MC_BG_Perf_Measure_Stop+0x48>)
    pHandle->BG_Task_OnGoing = false;

    pHdl  = &pHandle->MC_Perf_TraceLog[CodeSection];

    /* Check Overflow cases */
    if (StopMeasure < pHdl->StartMeasure)
 80015ea:	eb00 1301 	add.w	r3, r0, r1, lsl #4
{
 80015ee:	b410      	push	{r4}
    if (StopMeasure < pHdl->StartMeasure)
 80015f0:	689b      	ldr	r3, [r3, #8]
    uint32_t StopMeasure = DWT->CYCCNT;
 80015f2:	6854      	ldr	r4, [r2, #4]
    pHandle->BG_Task_OnGoing = false;
 80015f4:	2200      	movs	r2, #0
 80015f6:	7002      	strb	r2, [r0, #0]
    if (StopMeasure < pHdl->StartMeasure)
 80015f8:	42a3      	cmp	r3, r4
 80015fa:	ea4f 1201 	mov.w	r2, r1, lsl #4
 80015fe:	4402      	add	r2, r0
    {
      pHdl->DeltaTimeInCycle = (UINT32_MAX - pHdl->StartMeasure) + StopMeasure;
 8001600:	bf88      	it	hi
 8001602:	f104 34ff 	addhi.w	r4, r4, #4294967295
    }
    else
    {
      pHdl->DeltaTimeInCycle = StopMeasure - pHdl->StartMeasure;
 8001606:	1ae3      	subs	r3, r4, r3
 8001608:	60d3      	str	r3, [r2, #12]
    }

    if (pHdl->DeltaTimeInCycle > pHandle->AccHighFreqTasksCnt)
 800160a:	6844      	ldr	r4, [r0, #4]
 800160c:	429c      	cmp	r4, r3
    {
      pHdl->DeltaTimeInCycle -= pHandle->AccHighFreqTasksCnt;
 800160e:	bf38      	it	cc
 8001610:	1b1b      	subcc	r3, r3, r4
 8001612:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 8001616:	bf38      	it	cc
 8001618:	60d3      	strcc	r3, [r2, #12]
    }
    else
    {
      /* Nothing to do */
    }
    if (pHdl->max < pHdl->DeltaTimeInCycle)
 800161a:	6942      	ldr	r2, [r0, #20]
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_MC_PERF
  }
#endif
}
 800161c:	f85d 4b04 	ldr.w	r4, [sp], #4
    if (pHdl->max < pHdl->DeltaTimeInCycle)
 8001620:	4293      	cmp	r3, r2
    if (pHdl->min > pHdl->DeltaTimeInCycle)
 8001622:	6902      	ldr	r2, [r0, #16]
      pHdl->max = pHdl->DeltaTimeInCycle;
 8001624:	bf88      	it	hi
 8001626:	6143      	strhi	r3, [r0, #20]
    if (pHdl->min > pHdl->DeltaTimeInCycle)
 8001628:	4293      	cmp	r3, r2
      pHdl->min = pHdl->DeltaTimeInCycle;
 800162a:	bf38      	it	cc
 800162c:	6103      	strcc	r3, [r0, #16]
}
 800162e:	4770      	bx	lr
 8001630:	e0001000 	.word	0xe0001000

08001634 <MC_Perf_GetCPU_Load>:
    float_t MFT_cpu_loadM1;
    float_t HFT_cpu_loadM1;

    MFT_cpu_loadM1 = (((float_t)pHandle->MC_Perf_TraceLog[MEASURE_TSK_MediumFrequencyTaskM1].DeltaTimeInCycle\
                   / (float_t)SYSCLK_FREQ ) * (float_t)MEDIUM_FREQUENCY_TASK_RATE);
    HFT_cpu_loadM1 = (((float_t)pHandle->MC_Perf_TraceLog[MEASURE_TSK_HighFrequencyTaskM1].DeltaTimeInCycle\
 8001634:	edd0 7a03 	vldr	s15, [r0, #12]
 8001638:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 8001670 <MC_Perf_GetCPU_Load+0x3c>
    MFT_cpu_loadM1 = (((float_t)pHandle->MC_Perf_TraceLog[MEASURE_TSK_MediumFrequencyTaskM1].DeltaTimeInCycle\
 800163c:	ed90 7a07 	vldr	s14, [r0, #28]
                   / (float_t)SYSCLK_FREQ ) * (float_t)(PWM_FREQUENCY/REGULATION_EXECUTION_RATE));

    cpuLoad = MFT_cpu_loadM1 + HFT_cpu_loadM1;
 8001640:	ed9f 6a0c 	vldr	s12, [pc, #48]	@ 8001674 <MC_Perf_GetCPU_Load+0x40>

    cpuLoad = (cpuLoad > 1.0f) ? 1.0f : cpuLoad;
    cpuLoad *= 100.0f;
 8001644:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8001678 <MC_Perf_GetCPU_Load+0x44>
    HFT_cpu_loadM1 = (((float_t)pHandle->MC_Perf_TraceLog[MEASURE_TSK_HighFrequencyTaskM1].DeltaTimeInCycle\
 8001648:	eef8 7a67 	vcvt.f32.u32	s15, s15
    MFT_cpu_loadM1 = (((float_t)pHandle->MC_Perf_TraceLog[MEASURE_TSK_MediumFrequencyTaskM1].DeltaTimeInCycle\
 800164c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    HFT_cpu_loadM1 = (((float_t)pHandle->MC_Perf_TraceLog[MEASURE_TSK_HighFrequencyTaskM1].DeltaTimeInCycle\
 8001650:	ee67 7aa6 	vmul.f32	s15, s15, s13
    cpuLoad = (cpuLoad > 1.0f) ? 1.0f : cpuLoad;
 8001654:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
    cpuLoad = MFT_cpu_loadM1 + HFT_cpu_loadM1;
 8001658:	eee7 7a06 	vfma.f32	s15, s14, s12
    cpuLoad = (cpuLoad > 1.0f) ? 1.0f : cpuLoad;
 800165c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8001660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001664:	bf88      	it	hi
 8001666:	eef0 7a66 	vmovhi.f32	s15, s13
#ifdef NULL_PTR_CHECK_MC_PERF
  }
#endif
  return (cpuLoad);
}
 800166a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800166e:	4770      	bx	lr
 8001670:	39690453 	.word	0x39690453
 8001674:	36ba69dc 	.word	0x36ba69dc
 8001678:	42c80000 	.word	0x42c80000

0800167c <MC_Perf_GetMaxCPU_Load>:
  else
  {
#endif
    cpuLoad += (((float_t)pHandle->MC_Perf_TraceLog[MEASURE_TSK_MediumFrequencyTaskM1].max / (float_t)SYSCLK_FREQ )\
                   * (float_t)MEDIUM_FREQUENCY_TASK_RATE);
    cpuLoad += (((float_t)pHandle->MC_Perf_TraceLog[MEASURE_TSK_HighFrequencyTaskM1].max / (float_t)SYSCLK_FREQ )\
 800167c:	edd0 7a05 	vldr	s15, [r0, #20]
                   * (float_t)(PWM_FREQUENCY/REGULATION_EXECUTION_RATE));
 8001680:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 80016b8 <MC_Perf_GetMaxCPU_Load+0x3c>
    cpuLoad += (((float_t)pHandle->MC_Perf_TraceLog[MEASURE_TSK_MediumFrequencyTaskM1].max / (float_t)SYSCLK_FREQ )\
 8001684:	ed90 7a09 	vldr	s14, [r0, #36]	@ 0x24
    cpuLoad += (((float_t)pHandle->MC_Perf_TraceLog[MEASURE_TSK_HighFrequencyTaskM1].max / (float_t)SYSCLK_FREQ )\
 8001688:	ed9f 6a0c 	vldr	s12, [pc, #48]	@ 80016bc <MC_Perf_GetMaxCPU_Load+0x40>

    cpuLoad = (cpuLoad > 1.0f) ? 1.0f : cpuLoad;
    cpuLoad *= 100.0f;
 800168c:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 80016c0 <MC_Perf_GetMaxCPU_Load+0x44>
    cpuLoad += (((float_t)pHandle->MC_Perf_TraceLog[MEASURE_TSK_HighFrequencyTaskM1].max / (float_t)SYSCLK_FREQ )\
 8001690:	eef8 7a67 	vcvt.f32.u32	s15, s15
    cpuLoad += (((float_t)pHandle->MC_Perf_TraceLog[MEASURE_TSK_MediumFrequencyTaskM1].max / (float_t)SYSCLK_FREQ )\
 8001694:	eeb8 7a47 	vcvt.f32.u32	s14, s14
                   * (float_t)(PWM_FREQUENCY/REGULATION_EXECUTION_RATE));
 8001698:	ee67 7aa6 	vmul.f32	s15, s15, s13
    cpuLoad = (cpuLoad > 1.0f) ? 1.0f : cpuLoad;
 800169c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
    cpuLoad += (((float_t)pHandle->MC_Perf_TraceLog[MEASURE_TSK_HighFrequencyTaskM1].max / (float_t)SYSCLK_FREQ )\
 80016a0:	eee7 7a06 	vfma.f32	s15, s14, s12
    cpuLoad = (cpuLoad > 1.0f) ? 1.0f : cpuLoad;
 80016a4:	eef4 7ae6 	vcmpe.f32	s15, s13
 80016a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ac:	bf88      	it	hi
 80016ae:	eef0 7a66 	vmovhi.f32	s15, s13
#ifdef NULL_PTR_CHECK_MC_PERF
  }
#endif
  return (cpuLoad);
}
 80016b2:	ee27 0a80 	vmul.f32	s0, s15, s0
 80016b6:	4770      	bx	lr
 80016b8:	39690453 	.word	0x39690453
 80016bc:	36ba69dc 	.word	0x36ba69dc
 80016c0:	42c80000 	.word	0x42c80000

080016c4 <MC_Perf_GetMinCPU_Load>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (pHandle->MC_Perf_TraceLog[MEASURE_TSK_MediumFrequencyTaskM1].min != UINT32_MAX)
 80016c4:	6a03      	ldr	r3, [r0, #32]
 80016c6:	1c59      	adds	r1, r3, #1
 80016c8:	d020      	beq.n	800170c <MC_Perf_GetMinCPU_Load+0x48>
    {
      cpu_load_acc += (((float_t)pHandle->MC_Perf_TraceLog[MEASURE_TSK_MediumFrequencyTaskM1].min / (float_t)SYSCLK_FREQ )\
 80016ca:	ee07 3a90 	vmov	s15, r3
                     * (float_t)MEDIUM_FREQUENCY_TASK_RATE);
 80016ce:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8001714 <MC_Perf_GetMinCPU_Load+0x50>
      cpu_load_acc += (((float_t)pHandle->MC_Perf_TraceLog[MEASURE_TSK_MediumFrequencyTaskM1].min / (float_t)SYSCLK_FREQ )\
 80016d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                     * (float_t)MEDIUM_FREQUENCY_TASK_RATE);
 80016d6:	ee67 7a87 	vmul.f32	s15, s15, s14
    }
    if (pHandle->MC_Perf_TraceLog[MEASURE_TSK_HighFrequencyTaskM1].min != UINT32_MAX)
 80016da:	6903      	ldr	r3, [r0, #16]
 80016dc:	1c5a      	adds	r2, r3, #1
 80016de:	d007      	beq.n	80016f0 <MC_Perf_GetMinCPU_Load+0x2c>
    {
      cpu_load_acc += (((float_t)pHandle->MC_Perf_TraceLog[MEASURE_TSK_HighFrequencyTaskM1].min / (float_t)SYSCLK_FREQ )\
 80016e0:	ee07 3a10 	vmov	s14, r3
 80016e4:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8001718 <MC_Perf_GetMinCPU_Load+0x54>
 80016e8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80016ec:	eee7 7a26 	vfma.f32	s15, s14, s13
                   * (float_t)(PWM_FREQUENCY/REGULATION_EXECUTION_RATE));
    }
    cpu_load_acc = (cpu_load_acc > 1.0f) ? 1.0f : cpu_load_acc;
 80016f0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80016f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    cpu_load_acc *= 100.0f;
 80016fc:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 800171c <MC_Perf_GetMinCPU_Load+0x58>
    cpu_load_acc = (cpu_load_acc > 1.0f) ? 1.0f : cpu_load_acc;
 8001700:	bf88      	it	hi
 8001702:	eef0 7a47 	vmovhi.f32	s15, s14
#ifdef NULL_PTR_CHECK_MC_PERF
  }
#endif
  return (cpu_load_acc);
}
 8001706:	ee27 0a80 	vmul.f32	s0, s15, s0
 800170a:	4770      	bx	lr
  float_t cpu_load_acc = 0.0f;
 800170c:	eddf 7a04 	vldr	s15, [pc, #16]	@ 8001720 <MC_Perf_GetMinCPU_Load+0x5c>
 8001710:	e7e3      	b.n	80016da <MC_Perf_GetMinCPU_Load+0x16>
 8001712:	bf00      	nop
 8001714:	36ba69dc 	.word	0x36ba69dc
 8001718:	39690453 	.word	0x39690453
 800171c:	42c80000 	.word	0x42c80000
 8001720:	00000000 	.word	0x00000000

08001724 <FOC_Clear>:
  *         controller. It must be called before each motor restart.
  *         It does not clear speed sensor.
  * @param  bMotor related motor it can be M1 or M2.
  */
__weak void FOC_Clear(uint8_t bMotor)
{
 8001724:	b538      	push	{r3, r4, r5, lr}
 8001726:	2326      	movs	r3, #38	@ 0x26
 8001728:	491b      	ldr	r1, [pc, #108]	@ (8001798 <FOC_Clear+0x74>)
 800172a:	fb00 f303 	mul.w	r3, r0, r3

  ab_t NULL_ab = {((int16_t)0), ((int16_t)0)};
  qd_t NULL_qd = {((int16_t)0), ((int16_t)0)};
  alphabeta_t NULL_alphabeta = {((int16_t)0), ((int16_t)0)};

  FOCVars[bMotor].Iab = NULL_ab;
 800172e:	2500      	movs	r5, #0
 8001730:	50cd      	str	r5, [r1, r3]
{
 8001732:	4604      	mov	r4, r0
 8001734:	f103 0208 	add.w	r2, r3, #8
 8001738:	1858      	adds	r0, r3, r1
 800173a:	3310      	adds	r3, #16
 800173c:	440a      	add	r2, r1
 800173e:	440b      	add	r3, r1
  FOCVars[bMotor].hTeref = (int16_t)0;
  FOCVars[bMotor].Vqd = NULL_qd;
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8001740:	4916      	ldr	r1, [pc, #88]	@ (800179c <FOC_Clear+0x78>)
  FOCVars[bMotor].Iab = NULL_ab;
 8001742:	6045      	str	r5, [r0, #4]
  FOCVars[bMotor].Iqd = NULL_qd;
 8001744:	6055      	str	r5, [r2, #4]
 8001746:	6095      	str	r5, [r2, #8]
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8001748:	f851 0024 	ldr.w	r0, [r1, r4, lsl #2]
  FOCVars[bMotor].Vqd = NULL_qd;
 800174c:	f8c3 5006 	str.w	r5, [r3, #6]
 8001750:	f8c3 500a 	str.w	r5, [r3, #10]
 8001754:	f8c3 500e 	str.w	r5, [r3, #14]
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8001758:	4629      	mov	r1, r5
 800175a:	f004 fce5 	bl	8006128 <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], ((int32_t)0));
 800175e:	4b10      	ldr	r3, [pc, #64]	@ (80017a0 <FOC_Clear+0x7c>)
 8001760:	4629      	mov	r1, r5
 8001762:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8001766:	f004 fcdf 	bl	8006128 <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 800176a:	4b0e      	ldr	r3, [pc, #56]	@ (80017a4 <FOC_Clear+0x80>)
 800176c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8001770:	f005 fd52 	bl	8007218 <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001774:	4b0c      	ldr	r3, [pc, #48]	@ (80017a8 <FOC_Clear+0x84>)
 8001776:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800177a:	f001 f817 	bl	80027ac <PWMC_SwitchOffPWM>

  if (NULL == pFF[bMotor])
 800177e:	4b0b      	ldr	r3, [pc, #44]	@ (80017ac <FOC_Clear+0x88>)
 8001780:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8001784:	b108      	cbz	r0, 800178a <FOC_Clear+0x66>
  {
    /* Nothing to do */
  }
  else
  {
    FF_Clear(pFF[bMotor]);
 8001786:	f004 fa71 	bl	8005c6c <FF_Clear>
  }

  MC_Perf_Clear(&PerfTraces,bMotor);
 800178a:	4621      	mov	r1, r4
 800178c:	4808      	ldr	r0, [pc, #32]	@ (80017b0 <FOC_Clear+0x8c>)
  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 800178e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  MC_Perf_Clear(&PerfTraces,bMotor);
 8001792:	f7ff bedf 	b.w	8001554 <MC_Perf_Clear>
 8001796:	bf00      	nop
 8001798:	200008ac 	.word	0x200008ac
 800179c:	2000000c 	.word	0x2000000c
 80017a0:	20000008 	.word	0x20000008
 80017a4:	20000010 	.word	0x20000010
 80017a8:	200008a8 	.word	0x200008a8
 80017ac:	20000000 	.word	0x20000000
 80017b0:	20000874 	.word	0x20000874

080017b4 <MCboot>:
  if (MC_NULL == pMCIList)
 80017b4:	2800      	cmp	r0, #0
 80017b6:	f000 8083 	beq.w	80018c0 <MCboot+0x10c>
{
 80017ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 80017be:	f8df b164 	ldr.w	fp, [pc, #356]	@ 8001924 <MCboot+0x170>
    bMCBootCompleted = (uint8_t )0;
 80017c2:	f8df 9164 	ldr.w	r9, [pc, #356]	@ 8001928 <MCboot+0x174>
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &STO_PLL_M1._Super);
 80017c6:	4d3f      	ldr	r5, [pc, #252]	@ (80018c4 <MCboot+0x110>)
    RVBS_Init(&BusVoltageSensor_M1);
 80017c8:	4e3f      	ldr	r6, [pc, #252]	@ (80018c8 <MCboot+0x114>)
    pMPM[M1]->pFOCVars = &FOCVars[M1];
 80017ca:	4f40      	ldr	r7, [pc, #256]	@ (80018cc <MCboot+0x118>)
{
 80017cc:	b085      	sub	sp, #20
    bMCBootCompleted = (uint8_t )0;
 80017ce:	f04f 0800 	mov.w	r8, #0
 80017d2:	4604      	mov	r4, r0
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 80017d4:	483e      	ldr	r0, [pc, #248]	@ (80018d0 <MCboot+0x11c>)
 80017d6:	f8cb 0000 	str.w	r0, [fp]
    bMCBootCompleted = (uint8_t )0;
 80017da:	f889 8000 	strb.w	r8, [r9]
    R3_1_Init(&PWM_Handle_M1);
 80017de:	f004 ffeb 	bl	80067b8 <R3_1_Init>
    ASPEP_start(&aspepOverUartA);
 80017e2:	483c      	ldr	r0, [pc, #240]	@ (80018d4 <MCboot+0x120>)
 80017e4:	f7fe feb2 	bl	800054c <ASPEP_start>
    startTimers();
 80017e8:	f004 fd4c 	bl	8006284 <startTimers>
    PID_HandleInit(&PIDSpeedHandle_M1);
 80017ec:	483a      	ldr	r0, [pc, #232]	@ (80018d8 <MCboot+0x124>)
 80017ee:	f004 fc87 	bl	8006100 <PID_HandleInit>
    STO_PLL_Init (&STO_PLL_M1);
 80017f2:	483a      	ldr	r0, [pc, #232]	@ (80018dc <MCboot+0x128>)
 80017f4:	f006 fb0c 	bl	8007e10 <STO_PLL_Init>
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &STO_PLL_M1._Super);
 80017f8:	4a38      	ldr	r2, [pc, #224]	@ (80018dc <MCboot+0x128>)
 80017fa:	4937      	ldr	r1, [pc, #220]	@ (80018d8 <MCboot+0x124>)
 80017fc:	6828      	ldr	r0, [r5, #0]
 80017fe:	f005 fcf1 	bl	80071e4 <STC_Init>
    STO_CR_Init (&STO_CR_M1);
 8001802:	4837      	ldr	r0, [pc, #220]	@ (80018e0 <MCboot+0x12c>)
 8001804:	f006 f878 	bl	80078f8 <STO_CR_Init>
    VSS_Init(&VirtualSpeedSensorM1);
 8001808:	4836      	ldr	r0, [pc, #216]	@ (80018e4 <MCboot+0x130>)
 800180a:	f006 fbff 	bl	800800c <VSS_Init>
    RUC_Init(&RevUpControlM1, pSTC[M1], &VirtualSpeedSensorM1, &STO_M1, pwmcHandle[M1]);
 800180e:	f8db 3000 	ldr.w	r3, [fp]
 8001812:	9300      	str	r3, [sp, #0]
 8001814:	6829      	ldr	r1, [r5, #0]
 8001816:	4a33      	ldr	r2, [pc, #204]	@ (80018e4 <MCboot+0x130>)
 8001818:	4b33      	ldr	r3, [pc, #204]	@ (80018e8 <MCboot+0x134>)
 800181a:	4834      	ldr	r0, [pc, #208]	@ (80018ec <MCboot+0x138>)
 800181c:	f005 fbae 	bl	8006f7c <RUC_Init>
    PID_HandleInit(&PIDIqHandle_M1);
 8001820:	4833      	ldr	r0, [pc, #204]	@ (80018f0 <MCboot+0x13c>)
 8001822:	f004 fc6d 	bl	8006100 <PID_HandleInit>
    PID_HandleInit(&PIDIdHandle_M1);
 8001826:	4833      	ldr	r0, [pc, #204]	@ (80018f4 <MCboot+0x140>)
 8001828:	f004 fc6a 	bl	8006100 <PID_HandleInit>
    (void)RCM_RegisterRegConv(&VbusRegConv_M1);
 800182c:	4832      	ldr	r0, [pc, #200]	@ (80018f8 <MCboot+0x144>)
 800182e:	f002 f9df 	bl	8003bf0 <RCM_RegisterRegConv>
    RVBS_Init(&BusVoltageSensor_M1);
 8001832:	4630      	mov	r0, r6
 8001834:	f005 fab6 	bl	8006da4 <RVBS_Init>
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 8001838:	4b30      	ldr	r3, [pc, #192]	@ (80018fc <MCboot+0x148>)
    NTC_Init(&TempSensor_M1);
 800183a:	4831      	ldr	r0, [pc, #196]	@ (8001900 <MCboot+0x14c>)
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	60de      	str	r6, [r3, #12]
    pMPM[M1]->pFOCVars = &FOCVars[M1];
 8001840:	609f      	str	r7, [r3, #8]
    NTC_Init(&TempSensor_M1);
 8001842:	f004 fc3f 	bl	80060c4 <NTC_Init>
    FF_Init(pFF[M1],&(BusVoltageSensor_M1._Super),pPIDId[M1],pPIDIq[M1]);
 8001846:	4b2f      	ldr	r3, [pc, #188]	@ (8001904 <MCboot+0x150>)
 8001848:	4a2f      	ldr	r2, [pc, #188]	@ (8001908 <MCboot+0x154>)
 800184a:	4830      	ldr	r0, [pc, #192]	@ (800190c <MCboot+0x158>)
 800184c:	6812      	ldr	r2, [r2, #0]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	6800      	ldr	r0, [r0, #0]
 8001852:	4631      	mov	r1, r6
 8001854:	f004 f9fc 	bl	8005c50 <FF_Init>
    pREMNG[M1] = &RampExtMngrHFParamsM1;
 8001858:	4b2d      	ldr	r3, [pc, #180]	@ (8001910 <MCboot+0x15c>)
 800185a:	482e      	ldr	r0, [pc, #184]	@ (8001914 <MCboot+0x160>)
 800185c:	6018      	str	r0, [r3, #0]
    REMNG_Init(pREMNG[M1]);
 800185e:	f005 fafb 	bl	8006e58 <REMNG_Init>
    FOC_Clear(M1);
 8001862:	4640      	mov	r0, r8
 8001864:	f7ff ff5e 	bl	8001724 <FOC_Clear>
    FOCVars[M1].bDriveInput = EXTERNAL;
 8001868:	f04f 0a01 	mov.w	sl, #1
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 800186c:	6828      	ldr	r0, [r5, #0]
    FOCVars[M1].bDriveInput = EXTERNAL;
 800186e:	f887 a024 	strb.w	sl, [r7, #36]	@ 0x24
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8001872:	f005 fd63 	bl	800733c <STC_GetDefaultIqdref>
 8001876:	6138      	str	r0, [r7, #16]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8001878:	6828      	ldr	r0, [r5, #0]
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 800187a:	4e27      	ldr	r6, [pc, #156]	@ (8001918 <MCboot+0x164>)
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 800187c:	f005 fd5e 	bl	800733c <STC_GetDefaultIqdref>
 8001880:	f3c0 400f 	ubfx	r0, r0, #16, #16
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 8001884:	6829      	ldr	r1, [r5, #0]
 8001886:	f8db 3000 	ldr.w	r3, [fp]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 800188a:	82b8      	strh	r0, [r7, #20]
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 800188c:	463a      	mov	r2, r7
 800188e:	4630      	mov	r0, r6
 8001890:	f7ff fbbc 	bl	800100c <MCI_Init>
   Mci[M1].pScale = &scaleParams_M1;
 8001894:	4b21      	ldr	r3, [pc, #132]	@ (800191c <MCboot+0x168>)
    MCI_ExecSpeedRamp(&Mci[M1],
 8001896:	6828      	ldr	r0, [r5, #0]
   Mci[M1].pScale = &scaleParams_M1;
 8001898:	61f3      	str	r3, [r6, #28]
    MCI_ExecSpeedRamp(&Mci[M1],
 800189a:	f005 fd4b 	bl	8007334 <STC_GetMecSpeedRefUnitDefault>
 800189e:	4642      	mov	r2, r8
 80018a0:	4601      	mov	r1, r0
 80018a2:	4630      	mov	r0, r6
 80018a4:	f7ff fbc2 	bl	800102c <MCI_ExecSpeedRamp>
    Mci[M1].pPerfMeasure = &PerfTraces;
 80018a8:	481d      	ldr	r0, [pc, #116]	@ (8001920 <MCboot+0x16c>)
 80018aa:	60f0      	str	r0, [r6, #12]
    MC_Perf_Measure_Init(&PerfTraces);
 80018ac:	f7ff fe30 	bl	8001510 <MC_Perf_Measure_Init>
    pMCIList[M1] = &Mci[M1];
 80018b0:	6026      	str	r6, [r4, #0]
    MC_APP_BootHook();
 80018b2:	f7ff fba7 	bl	8001004 <MC_APP_BootHook>
    bMCBootCompleted = 1U;
 80018b6:	f889 a000 	strb.w	sl, [r9]
}
 80018ba:	b005      	add	sp, #20
 80018bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	20000010 	.word	0x20000010
 80018c8:	20000030 	.word	0x20000030
 80018cc:	200008ac 	.word	0x200008ac
 80018d0:	20000370 	.word	0x20000370
 80018d4:	200005e8 	.word	0x200005e8
 80018d8:	20000550 	.word	0x20000550
 80018dc:	20000210 	.word	0x20000210
 80018e0:	20000078 	.word	0x20000078
 80018e4:	20000338 	.word	0x20000338
 80018e8:	200001fc 	.word	0x200001fc
 80018ec:	20000414 	.word	0x20000414
 80018f0:	20000524 	.word	0x20000524
 80018f4:	200004f8 	.word	0x200004f8
 80018f8:	2000004c 	.word	0x2000004c
 80018fc:	20000004 	.word	0x20000004
 8001900:	2000005c 	.word	0x2000005c
 8001904:	2000000c 	.word	0x2000000c
 8001908:	20000008 	.word	0x20000008
 800190c:	20000000 	.word	0x20000000
 8001910:	200008a4 	.word	0x200008a4
 8001914:	20000018 	.word	0x20000018
 8001918:	20000834 	.word	0x20000834
 800191c:	2000059c 	.word	0x2000059c
 8001920:	20000874 	.word	0x20000874
 8001924:	200008a8 	.word	0x200008a8
 8001928:	2000089c 	.word	0x2000089c

0800192c <FOC_InitAdditionalMethods>:
  *         START_TO_RUN state.
  * @param  bMotor related motor it can be M1 or M2.
  */
__weak void FOC_InitAdditionalMethods(uint8_t bMotor) //cstat !RED-func-no-effect
{
    if (M_NONE == bMotor)
 800192c:	28ff      	cmp	r0, #255	@ 0xff
 800192e:	d005      	beq.n	800193c <FOC_InitAdditionalMethods+0x10>
    {
      /* Nothing to do */
    }
    else
    {
      if (NULL == pFF[bMotor])
 8001930:	4b03      	ldr	r3, [pc, #12]	@ (8001940 <FOC_InitAdditionalMethods+0x14>)
 8001932:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001936:	b108      	cbz	r0, 800193c <FOC_InitAdditionalMethods+0x10>
      {
        /* Nothing to do */
      }
      else
      {
        FF_InitFOCAdditionalMethods(pFF[bMotor]);
 8001938:	f004 ba32 	b.w	8005da0 <FF_InitFOCAdditionalMethods>
      }
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
    }
}
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	20000000 	.word	0x20000000

08001944 <FOC_CalcCurrRef>:
  *         MTPA algorithm(s). It must be called with the periodicity specified
  *         in oTSC parameters.
  * @param  bMotor related motor it can be M1 or M2.
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 8001944:	b570      	push	{r4, r5, r6, lr}

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if (INTERNAL == FOCVars[bMotor].bDriveInput)
 8001946:	4c0e      	ldr	r4, [pc, #56]	@ (8001980 <FOC_CalcCurrRef+0x3c>)
 8001948:	2326      	movs	r3, #38	@ 0x26
 800194a:	fb03 4400 	mla	r4, r3, r0, r4
 800194e:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 8001952:	b103      	cbz	r3, 8001956 <FOC_CalcCurrRef+0x12>
    /* Nothing to do */
  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 8001954:	bd70      	pop	{r4, r5, r6, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 8001956:	4e0b      	ldr	r6, [pc, #44]	@ (8001984 <FOC_CalcCurrRef+0x40>)
 8001958:	4605      	mov	r5, r0
 800195a:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 800195e:	f005 fcb3 	bl	80072c8 <STC_CalcTorqueReference>
    if (NULL == pFF[bMotor])
 8001962:	4a09      	ldr	r2, [pc, #36]	@ (8001988 <FOC_CalcCurrRef+0x44>)
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 8001964:	4603      	mov	r3, r0
    if (NULL == pFF[bMotor])
 8001966:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 800196a:	83e3      	strh	r3, [r4, #30]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 800196c:	8223      	strh	r3, [r4, #16]
    if (NULL == pFF[bMotor])
 800196e:	2800      	cmp	r0, #0
 8001970:	d0f0      	beq.n	8001954 <FOC_CalcCurrRef+0x10>
      FF_VqdffComputation(pFF[bMotor], FOCVars[bMotor].Iqdref, pSTC[bMotor]);
 8001972:	f856 2025 	ldr.w	r2, [r6, r5, lsl #2]
 8001976:	6921      	ldr	r1, [r4, #16]
}
 8001978:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      FF_VqdffComputation(pFF[bMotor], FOCVars[bMotor].Iqdref, pSTC[bMotor]);
 800197c:	f004 b97a 	b.w	8005c74 <FF_VqdffComputation>
 8001980:	200008ac 	.word	0x200008ac
 8001984:	20000010 	.word	0x20000010
 8001988:	20000000 	.word	0x20000000

0800198c <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted.
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 800198c:	4b01      	ldr	r3, [pc, #4]	@ (8001994 <TSK_SetChargeBootCapDelayM1+0x8>)
 800198e:	8018      	strh	r0, [r3, #0]
}
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	200008a0 	.word	0x200008a0

08001998 <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise.
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hBootCapDelayCounterM1)
 8001998:	4b03      	ldr	r3, [pc, #12]	@ (80019a8 <TSK_ChargeBootCapDelayHasElapsedM1+0x10>)
 800199a:	8818      	ldrh	r0, [r3, #0]
 800199c:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 800199e:	fab0 f080 	clz	r0, r0
 80019a2:	0940      	lsrs	r0, r0, #5
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	200008a0 	.word	0x200008a0

080019ac <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted.
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 80019ac:	4b01      	ldr	r3, [pc, #4]	@ (80019b4 <TSK_SetStopPermanencyTimeM1+0x8>)
 80019ae:	8018      	strh	r0, [r3, #0]
}
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	2000089e 	.word	0x2000089e

080019b8 <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise.
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hStopPermanencyCounterM1)
 80019b8:	4b03      	ldr	r3, [pc, #12]	@ (80019c8 <TSK_StopPermanencyTimeHasElapsedM1+0x10>)
 80019ba:	8818      	ldrh	r0, [r3, #0]
 80019bc:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 80019be:	fab0 f080 	clz	r0, r0
 80019c2:	0940      	lsrs	r0, r0, #5
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	2000089e 	.word	0x2000089e

080019cc <TSK_MediumFrequencyTaskM1>:
{
 80019cc:	b570      	push	{r4, r5, r6, lr}
  MC_BG_Perf_Measure_Start(&PerfTraces, MEASURE_TSK_MediumFrequencyTaskM1);
 80019ce:	48ad      	ldr	r0, [pc, #692]	@ (8001c84 <TSK_MediumFrequencyTaskM1+0x2b8>)
  PQD_CalcElMotorPower(pMPM[M1]);
 80019d0:	4ead      	ldr	r6, [pc, #692]	@ (8001c88 <TSK_MediumFrequencyTaskM1+0x2bc>)
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 80019d2:	4cae      	ldr	r4, [pc, #696]	@ (8001c8c <TSK_MediumFrequencyTaskM1+0x2c0>)
{
 80019d4:	b082      	sub	sp, #8
  MC_BG_Perf_Measure_Start(&PerfTraces, MEASURE_TSK_MediumFrequencyTaskM1);
 80019d6:	2101      	movs	r1, #1
 80019d8:	f7ff fdd8 	bl	800158c <MC_BG_Perf_Measure_Start>
  int16_t wAux = 0;
 80019dc:	2300      	movs	r3, #0
  (void)STO_CR_CalcAvrgMecSpeedUnit(&STO_CR_M1, &wAux);
 80019de:	4669      	mov	r1, sp
 80019e0:	48ab      	ldr	r0, [pc, #684]	@ (8001c90 <TSK_MediumFrequencyTaskM1+0x2c4>)
  int16_t wAux = 0;
 80019e2:	f8ad 3000 	strh.w	r3, [sp]
  (void)STO_CR_CalcAvrgMecSpeedUnit(&STO_CR_M1, &wAux);
 80019e6:	f005 feb9 	bl	800775c <STO_CR_CalcAvrgMecSpeedUnit>
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit(&STO_PLL_M1, &wAux);
 80019ea:	4669      	mov	r1, sp
 80019ec:	48a9      	ldr	r0, [pc, #676]	@ (8001c94 <TSK_MediumFrequencyTaskM1+0x2c8>)
 80019ee:	f006 f91b 	bl	8007c28 <STO_PLL_CalcAvrgMecSpeedUnit>
 80019f2:	4605      	mov	r5, r0
  PQD_CalcElMotorPower(pMPM[M1]);
 80019f4:	6830      	ldr	r0, [r6, #0]
 80019f6:	f004 fc0b 	bl	8006210 <PQD_CalcElMotorPower>
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 80019fa:	4620      	mov	r0, r4
 80019fc:	f7ff fb82 	bl	8001104 <MCI_GetCurrentFaults>
 8001a00:	b140      	cbz	r0, 8001a14 <TSK_MediumFrequencyTaskM1+0x48>
    Mci[M1].State = FAULT_NOW;
 8001a02:	230a      	movs	r3, #10
 8001a04:	f884 3023 	strb.w	r3, [r4, #35]	@ 0x23
  MC_BG_Perf_Measure_Stop(&PerfTraces, MEASURE_TSK_MediumFrequencyTaskM1);
 8001a08:	489e      	ldr	r0, [pc, #632]	@ (8001c84 <TSK_MediumFrequencyTaskM1+0x2b8>)
 8001a0a:	2101      	movs	r1, #1
 8001a0c:	f7ff fdec 	bl	80015e8 <MC_BG_Perf_Measure_Stop>
}
 8001a10:	b002      	add	sp, #8
 8001a12:	bd70      	pop	{r4, r5, r6, pc}
    if (MCI_GetOccurredFaults(&Mci[M1]) == MC_NO_FAULTS)
 8001a14:	4620      	mov	r0, r4
 8001a16:	f7ff fb73 	bl	8001100 <MCI_GetOccurredFaults>
 8001a1a:	bb78      	cbnz	r0, 8001a7c <TSK_MediumFrequencyTaskM1+0xb0>
      switch (Mci[M1].State)
 8001a1c:	f894 3023 	ldrb.w	r3, [r4, #35]	@ 0x23
 8001a20:	2b13      	cmp	r3, #19
 8001a22:	d8f1      	bhi.n	8001a08 <TSK_MediumFrequencyTaskM1+0x3c>
 8001a24:	a201      	add	r2, pc, #4	@ (adr r2, 8001a2c <TSK_MediumFrequencyTaskM1+0x60>)
 8001a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a2a:	bf00      	nop
 8001a2c:	08001c17 	.word	0x08001c17
 8001a30:	08001a09 	.word	0x08001a09
 8001a34:	08001a09 	.word	0x08001a09
 8001a38:	08001a09 	.word	0x08001a09
 8001a3c:	08001b81 	.word	0x08001b81
 8001a40:	08001a09 	.word	0x08001a09
 8001a44:	08001b5b 	.word	0x08001b5b
 8001a48:	08001a09 	.word	0x08001a09
 8001a4c:	08001b3b 	.word	0x08001b3b
 8001a50:	08001a09 	.word	0x08001a09
 8001a54:	08001a7d 	.word	0x08001a7d
 8001a58:	08001b2b 	.word	0x08001b2b
 8001a5c:	08001a09 	.word	0x08001a09
 8001a60:	08001a09 	.word	0x08001a09
 8001a64:	08001a09 	.word	0x08001a09
 8001a68:	08001a09 	.word	0x08001a09
 8001a6c:	08001adf 	.word	0x08001adf
 8001a70:	08001aa7 	.word	0x08001aa7
 8001a74:	08001a09 	.word	0x08001a09
 8001a78:	08001a85 	.word	0x08001a85
      Mci[M1].State = FAULT_OVER;
 8001a7c:	230b      	movs	r3, #11
 8001a7e:	f884 3023 	strb.w	r3, [r4, #35]	@ 0x23
 8001a82:	e7c1      	b.n	8001a08 <TSK_MediumFrequencyTaskM1+0x3c>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001a84:	f894 3022 	ldrb.w	r3, [r4, #34]	@ 0x22
 8001a88:	2b05      	cmp	r3, #5
 8001a8a:	f000 80de 	beq.w	8001c4a <TSK_MediumFrequencyTaskM1+0x27e>
            if (! RUC_Exec(&RevUpControlM1))
 8001a8e:	4882      	ldr	r0, [pc, #520]	@ (8001c98 <TSK_MediumFrequencyTaskM1+0x2cc>)
 8001a90:	f005 faf6 	bl	8007080 <RUC_Exec>
 8001a94:	4602      	mov	r2, r0
 8001a96:	2800      	cmp	r0, #0
 8001a98:	f040 810a 	bne.w	8001cb0 <TSK_MediumFrequencyTaskM1+0x2e4>
              MCI_FaultProcessing(&Mci[M1], MC_START_UP, 0);
 8001a9c:	487b      	ldr	r0, [pc, #492]	@ (8001c8c <TSK_MediumFrequencyTaskM1+0x2c0>)
 8001a9e:	2110      	movs	r1, #16
 8001aa0:	f7ff fae2 	bl	8001068 <MCI_FaultProcessing>
 8001aa4:	e7b0      	b.n	8001a08 <TSK_MediumFrequencyTaskM1+0x3c>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001aa6:	f894 3022 	ldrb.w	r3, [r4, #34]	@ 0x22
    R3_1_SwitchOffPWM(pwmcHandle[motor]);
 8001aaa:	4d7c      	ldr	r5, [pc, #496]	@ (8001c9c <TSK_MediumFrequencyTaskM1+0x2d0>)
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001aac:	2b05      	cmp	r3, #5
    R3_1_SwitchOffPWM(pwmcHandle[motor]);
 8001aae:	6828      	ldr	r0, [r5, #0]
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001ab0:	f000 80cd 	beq.w	8001c4e <TSK_MediumFrequencyTaskM1+0x282>
            if (PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC))
 8001ab4:	2101      	movs	r1, #1
 8001ab6:	f000 fe7d 	bl	80027b4 <PWMC_CurrentReadingCalibr>
 8001aba:	2800      	cmp	r0, #0
 8001abc:	d0a4      	beq.n	8001a08 <TSK_MediumFrequencyTaskM1+0x3c>
              if (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand)
 8001abe:	f894 3022 	ldrb.w	r3, [r4, #34]	@ 0x22
 8001ac2:	2b03      	cmp	r3, #3
 8001ac4:	f000 8128 	beq.w	8001d18 <TSK_MediumFrequencyTaskM1+0x34c>
                R3_1_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 8001ac8:	6828      	ldr	r0, [r5, #0]
 8001aca:	2100      	movs	r1, #0
 8001acc:	f004 fe1c 	bl	8006708 <R3_1_TurnOnLowSides>
                TSK_SetChargeBootCapDelayM1(M1_CHARGE_BOOT_CAP_TICKS);
 8001ad0:	2014      	movs	r0, #20
 8001ad2:	f7ff ff5b 	bl	800198c <TSK_SetChargeBootCapDelayM1>
                Mci[M1].State = CHARGE_BOOT_CAP;
 8001ad6:	2310      	movs	r3, #16
 8001ad8:	f884 3023 	strb.w	r3, [r4, #35]	@ 0x23
 8001adc:	e794      	b.n	8001a08 <TSK_MediumFrequencyTaskM1+0x3c>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001ade:	f894 3022 	ldrb.w	r3, [r4, #34]	@ 0x22
 8001ae2:	2b05      	cmp	r3, #5
 8001ae4:	f000 80b1 	beq.w	8001c4a <TSK_MediumFrequencyTaskM1+0x27e>
            if (TSK_ChargeBootCapDelayHasElapsedM1())
 8001ae8:	f7ff ff56 	bl	8001998 <TSK_ChargeBootCapDelayHasElapsedM1>
 8001aec:	2800      	cmp	r0, #0
 8001aee:	d08b      	beq.n	8001a08 <TSK_MediumFrequencyTaskM1+0x3c>
              R3_1_SwitchOffPWM(pwmcHandle[M1]);
 8001af0:	4d6a      	ldr	r5, [pc, #424]	@ (8001c9c <TSK_MediumFrequencyTaskM1+0x2d0>)
 8001af2:	6828      	ldr	r0, [r5, #0]
 8001af4:	f004 fd5a 	bl	80065ac <R3_1_SwitchOffPWM>
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8001af8:	4a69      	ldr	r2, [pc, #420]	@ (8001ca0 <TSK_MediumFrequencyTaskM1+0x2d4>)
              FOCVars[M1].bDriveInput = EXTERNAL;
 8001afa:	4b6a      	ldr	r3, [pc, #424]	@ (8001ca4 <TSK_MediumFrequencyTaskM1+0x2d8>)
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8001afc:	496a      	ldr	r1, [pc, #424]	@ (8001ca8 <TSK_MediumFrequencyTaskM1+0x2dc>)
 8001afe:	6810      	ldr	r0, [r2, #0]
              FOCVars[M1].bDriveInput = EXTERNAL;
 8001b00:	2201      	movs	r2, #1
 8001b02:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8001b06:	f005 fb83 	bl	8007210 <STC_SetSpeedSensor>
              STO_PLL_Clear(&STO_PLL_M1);
 8001b0a:	4862      	ldr	r0, [pc, #392]	@ (8001c94 <TSK_MediumFrequencyTaskM1+0x2c8>)
 8001b0c:	f006 f95a 	bl	8007dc4 <STO_PLL_Clear>
              STO_CR_Clear(&STO_CR_M1);
 8001b10:	485f      	ldr	r0, [pc, #380]	@ (8001c90 <TSK_MediumFrequencyTaskM1+0x2c4>)
 8001b12:	f005 fec5 	bl	80078a0 <STO_CR_Clear>
              FOC_Clear( M1 );
 8001b16:	2000      	movs	r0, #0
 8001b18:	f7ff fe04 	bl	8001724 <FOC_Clear>
                Mci[M1].State = START;
 8001b1c:	2304      	movs	r3, #4
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 8001b1e:	6828      	ldr	r0, [r5, #0]
                Mci[M1].State = START;
 8001b20:	f884 3023 	strb.w	r3, [r4, #35]	@ 0x23
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 8001b24:	f000 fe44 	bl	80027b0 <PWMC_SwitchOnPWM>
 8001b28:	e76e      	b.n	8001a08 <TSK_MediumFrequencyTaskM1+0x3c>
          if (MCI_ACK_FAULTS == Mci[M1].DirectCommand)
 8001b2a:	f894 3022 	ldrb.w	r3, [r4, #34]	@ 0x22
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	f47f af6a 	bne.w	8001a08 <TSK_MediumFrequencyTaskM1+0x3c>
            Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8001b34:	2300      	movs	r3, #0
 8001b36:	8463      	strh	r3, [r4, #34]	@ 0x22
 8001b38:	e766      	b.n	8001a08 <TSK_MediumFrequencyTaskM1+0x3c>
          if (TSK_StopPermanencyTimeHasElapsedM1())
 8001b3a:	f7ff ff3d 	bl	80019b8 <TSK_StopPermanencyTimeHasElapsedM1>
 8001b3e:	2800      	cmp	r0, #0
 8001b40:	f43f af62 	beq.w	8001a08 <TSK_MediumFrequencyTaskM1+0x3c>
            STC_SetSpeedSensor(pSTC[M1], &VirtualSpeedSensorM1._Super);    /* Sensor-less */
 8001b44:	4b56      	ldr	r3, [pc, #344]	@ (8001ca0 <TSK_MediumFrequencyTaskM1+0x2d4>)
 8001b46:	4958      	ldr	r1, [pc, #352]	@ (8001ca8 <TSK_MediumFrequencyTaskM1+0x2dc>)
 8001b48:	6818      	ldr	r0, [r3, #0]
 8001b4a:	f005 fb61 	bl	8007210 <STC_SetSpeedSensor>
            VSS_Clear(&VirtualSpeedSensorM1); /* Reset measured speed in IDLE */
 8001b4e:	4856      	ldr	r0, [pc, #344]	@ (8001ca8 <TSK_MediumFrequencyTaskM1+0x2dc>)
 8001b50:	f006 fa4e 	bl	8007ff0 <VSS_Clear>
            Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8001b54:	2300      	movs	r3, #0
 8001b56:	8463      	strh	r3, [r4, #34]	@ 0x22
 8001b58:	e756      	b.n	8001a08 <TSK_MediumFrequencyTaskM1+0x3c>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001b5a:	f894 3022 	ldrb.w	r3, [r4, #34]	@ 0x22
 8001b5e:	2b05      	cmp	r3, #5
 8001b60:	d073      	beq.n	8001c4a <TSK_MediumFrequencyTaskM1+0x27e>
            MCI_ExecBufferedCommands(&Mci[M1]);
 8001b62:	484a      	ldr	r0, [pc, #296]	@ (8001c8c <TSK_MediumFrequencyTaskM1+0x2c0>)
 8001b64:	f7ff fa8c 	bl	8001080 <MCI_ExecBufferedCommands>
              FOC_CalcCurrRef(M1);
 8001b68:	2000      	movs	r0, #0
 8001b6a:	f7ff feeb 	bl	8001944 <FOC_CalcCurrRef>
              if(!IsSpeedReliable)
 8001b6e:	2d00      	cmp	r5, #0
 8001b70:	f47f af4a 	bne.w	8001a08 <TSK_MediumFrequencyTaskM1+0x3c>
                MCI_FaultProcessing(&Mci[M1], MC_SPEED_FDBK, 0);
 8001b74:	4845      	ldr	r0, [pc, #276]	@ (8001c8c <TSK_MediumFrequencyTaskM1+0x2c0>)
 8001b76:	462a      	mov	r2, r5
 8001b78:	2120      	movs	r1, #32
 8001b7a:	f7ff fa75 	bl	8001068 <MCI_FaultProcessing>
 8001b7e:	e743      	b.n	8001a08 <TSK_MediumFrequencyTaskM1+0x3c>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001b80:	f894 3022 	ldrb.w	r3, [r4, #34]	@ 0x22
 8001b84:	2b05      	cmp	r3, #5
 8001b86:	d060      	beq.n	8001c4a <TSK_MediumFrequencyTaskM1+0x27e>
            if(! RUC_Exec(&RevUpControlM1))
 8001b88:	4843      	ldr	r0, [pc, #268]	@ (8001c98 <TSK_MediumFrequencyTaskM1+0x2cc>)
 8001b8a:	f005 fa79 	bl	8007080 <RUC_Exec>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	2800      	cmp	r0, #0
 8001b92:	d16c      	bne.n	8001c6e <TSK_MediumFrequencyTaskM1+0x2a2>
              MCI_FaultProcessing(&Mci[M1], MC_START_UP, 0);
 8001b94:	483d      	ldr	r0, [pc, #244]	@ (8001c8c <TSK_MediumFrequencyTaskM1+0x2c0>)
 8001b96:	2110      	movs	r1, #16
 8001b98:	f7ff fa66 	bl	8001068 <MCI_FaultProcessing>
            (void)VSS_CalcAvrgMecSpeedUnit(&VirtualSpeedSensorM1, &hForcedMecSpeedUnit);
 8001b9c:	4842      	ldr	r0, [pc, #264]	@ (8001ca8 <TSK_MediumFrequencyTaskM1+0x2dc>)
 8001b9e:	f10d 0102 	add.w	r1, sp, #2
 8001ba2:	f006 fa89 	bl	80080b8 <VSS_CalcAvrgMecSpeedUnit>
            if (true == RUC_FirstAccelerationStageReached(&RevUpControlM1))
 8001ba6:	483c      	ldr	r0, [pc, #240]	@ (8001c98 <TSK_MediumFrequencyTaskM1+0x2cc>)
 8001ba8:	f005 faa0 	bl	80070ec <RUC_FirstAccelerationStageReached>
 8001bac:	2800      	cmp	r0, #0
 8001bae:	f43f af2b 	beq.w	8001a08 <TSK_MediumFrequencyTaskM1+0x3c>
              ObserverConverged = STO_PLL_IsObserverConverged(&STO_PLL_M1, &hForcedMecSpeedUnit);
 8001bb2:	f10d 0102 	add.w	r1, sp, #2
 8001bb6:	4837      	ldr	r0, [pc, #220]	@ (8001c94 <TSK_MediumFrequencyTaskM1+0x2c8>)
 8001bb8:	f006 f964 	bl	8007e84 <STO_PLL_IsObserverConverged>
 8001bbc:	4605      	mov	r5, r0
              STO_SetDirection(&STO_PLL_M1, (int8_t)MCI_GetImposedMotorDirection(&Mci[M1]));
 8001bbe:	4833      	ldr	r0, [pc, #204]	@ (8001c8c <TSK_MediumFrequencyTaskM1+0x2c0>)
 8001bc0:	f7ff faf6 	bl	80011b0 <MCI_GetImposedMotorDirection>
 8001bc4:	b241      	sxtb	r1, r0
 8001bc6:	4833      	ldr	r0, [pc, #204]	@ (8001c94 <TSK_MediumFrequencyTaskM1+0x2c8>)
 8001bc8:	f006 fa0e 	bl	8007fe8 <STO_SetDirection>
              (void)VSS_SetStartTransition(&VirtualSpeedSensorM1, ObserverConverged);
 8001bcc:	4836      	ldr	r0, [pc, #216]	@ (8001ca8 <TSK_MediumFrequencyTaskM1+0x2dc>)
 8001bce:	4629      	mov	r1, r5
 8001bd0:	f006 fb08 	bl	80081e4 <VSS_SetStartTransition>
            if (ObserverConverged)
 8001bd4:	2d00      	cmp	r5, #0
 8001bd6:	f43f af17 	beq.w	8001a08 <TSK_MediumFrequencyTaskM1+0x3c>
              qd_t StatorCurrent = MCM_Park(FOCVars[M1].Ialphabeta, SPD_GetElAngle(&STO_PLL_M1._Super));
 8001bda:	482e      	ldr	r0, [pc, #184]	@ (8001c94 <TSK_MediumFrequencyTaskM1+0x2c8>)
 8001bdc:	4e31      	ldr	r6, [pc, #196]	@ (8001ca4 <TSK_MediumFrequencyTaskM1+0x2d8>)
              REMNG_Init(pREMNG[M1]);
 8001bde:	4d33      	ldr	r5, [pc, #204]	@ (8001cac <TSK_MediumFrequencyTaskM1+0x2e0>)
              qd_t StatorCurrent = MCM_Park(FOCVars[M1].Ialphabeta, SPD_GetElAngle(&STO_PLL_M1._Super));
 8001be0:	f005 fab0 	bl	8007144 <SPD_GetElAngle>
 8001be4:	4601      	mov	r1, r0
 8001be6:	6870      	ldr	r0, [r6, #4]
 8001be8:	f7ff fbfa 	bl	80013e0 <MCM_Park>
 8001bec:	4603      	mov	r3, r0
              REMNG_Init(pREMNG[M1]);
 8001bee:	6828      	ldr	r0, [r5, #0]
              qd_t StatorCurrent = MCM_Park(FOCVars[M1].Ialphabeta, SPD_GetElAngle(&STO_PLL_M1._Super));
 8001bf0:	9301      	str	r3, [sp, #4]
              REMNG_Init(pREMNG[M1]);
 8001bf2:	f005 f931 	bl	8006e58 <REMNG_Init>
              (void)REMNG_ExecRamp(pREMNG[M1], FOCVars[M1].Iqdref.q, 0);
 8001bf6:	f9b6 1010 	ldrsh.w	r1, [r6, #16]
 8001bfa:	6828      	ldr	r0, [r5, #0]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f005 f977 	bl	8006ef0 <REMNG_ExecRamp>
              (void)REMNG_ExecRamp(pREMNG[M1], StatorCurrent.q, TRANSITION_DURATION);
 8001c02:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 8001c06:	6828      	ldr	r0, [r5, #0]
 8001c08:	2219      	movs	r2, #25
 8001c0a:	f005 f971 	bl	8006ef0 <REMNG_ExecRamp>
              Mci[M1].State = SWITCH_OVER;
 8001c0e:	2313      	movs	r3, #19
 8001c10:	f884 3023 	strb.w	r3, [r4, #35]	@ 0x23
 8001c14:	e6f8      	b.n	8001a08 <TSK_MediumFrequencyTaskM1+0x3c>
          if ((MCI_START == Mci[M1].DirectCommand) || (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand))
 8001c16:	f894 5022 	ldrb.w	r5, [r4, #34]	@ 0x22
 8001c1a:	f005 05fd 	and.w	r5, r5, #253	@ 0xfd
 8001c1e:	2d01      	cmp	r5, #1
 8001c20:	f47f aef2 	bne.w	8001a08 <TSK_MediumFrequencyTaskM1+0x3c>
              RUC_Clear(&RevUpControlM1, MCI_GetImposedMotorDirection(&Mci[M1]));
 8001c24:	4819      	ldr	r0, [pc, #100]	@ (8001c8c <TSK_MediumFrequencyTaskM1+0x2c0>)
            if (pwmcHandle[M1]->offsetCalibStatus == false)
 8001c26:	4e1d      	ldr	r6, [pc, #116]	@ (8001c9c <TSK_MediumFrequencyTaskM1+0x2d0>)
              RUC_Clear(&RevUpControlM1, MCI_GetImposedMotorDirection(&Mci[M1]));
 8001c28:	f7ff fac2 	bl	80011b0 <MCI_GetImposedMotorDirection>
 8001c2c:	4601      	mov	r1, r0
 8001c2e:	481a      	ldr	r0, [pc, #104]	@ (8001c98 <TSK_MediumFrequencyTaskM1+0x2cc>)
 8001c30:	f005 f9e2 	bl	8006ff8 <RUC_Clear>
            if (pwmcHandle[M1]->offsetCalibStatus == false)
 8001c34:	6830      	ldr	r0, [r6, #0]
 8001c36:	f890 1081 	ldrb.w	r1, [r0, #129]	@ 0x81
 8001c3a:	2900      	cmp	r1, #0
 8001c3c:	d165      	bne.n	8001d0a <TSK_MediumFrequencyTaskM1+0x33e>
              (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_START);
 8001c3e:	f000 fdb9 	bl	80027b4 <PWMC_CurrentReadingCalibr>
              Mci[M1].State = OFFSET_CALIB;
 8001c42:	2311      	movs	r3, #17
 8001c44:	f884 3023 	strb.w	r3, [r4, #35]	@ 0x23
 8001c48:	e6de      	b.n	8001a08 <TSK_MediumFrequencyTaskM1+0x3c>
    R3_1_SwitchOffPWM(pwmcHandle[motor]);
 8001c4a:	4b14      	ldr	r3, [pc, #80]	@ (8001c9c <TSK_MediumFrequencyTaskM1+0x2d0>)
 8001c4c:	6818      	ldr	r0, [r3, #0]
 8001c4e:	f004 fcad 	bl	80065ac <R3_1_SwitchOffPWM>
  FOC_Clear(motor);
 8001c52:	2000      	movs	r0, #0
 8001c54:	f7ff fd66 	bl	8001724 <FOC_Clear>
  PQD_Clear(pMPM[motor]);
 8001c58:	6830      	ldr	r0, [r6, #0]
 8001c5a:	f004 faf5 	bl	8006248 <PQD_Clear>
  TSK_SetStopPermanencyTimeM1(STOPPERMANENCY_TICKS);
 8001c5e:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001c62:	f7ff fea3 	bl	80019ac <TSK_SetStopPermanencyTimeM1>
  Mci[motor].State = STOP;
 8001c66:	2308      	movs	r3, #8
 8001c68:	f884 3023 	strb.w	r3, [r4, #35]	@ 0x23
}
 8001c6c:	e6cc      	b.n	8001a08 <TSK_MediumFrequencyTaskM1+0x3c>
              IqdRef.q = STC_CalcTorqueReference(pSTC[M1]);
 8001c6e:	4b0c      	ldr	r3, [pc, #48]	@ (8001ca0 <TSK_MediumFrequencyTaskM1+0x2d4>)
 8001c70:	6818      	ldr	r0, [r3, #0]
 8001c72:	f005 fb29 	bl	80072c8 <STC_CalcTorqueReference>
              IqdRef.d = FOCVars[M1].UserIdref;
 8001c76:	4b0b      	ldr	r3, [pc, #44]	@ (8001ca4 <TSK_MediumFrequencyTaskM1+0x2d8>)
 8001c78:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
              FOCVars[M1].Iqdref = IqdRef;
 8001c7c:	8218      	strh	r0, [r3, #16]
 8001c7e:	825a      	strh	r2, [r3, #18]
 8001c80:	e78c      	b.n	8001b9c <TSK_MediumFrequencyTaskM1+0x1d0>
 8001c82:	bf00      	nop
 8001c84:	20000874 	.word	0x20000874
 8001c88:	20000004 	.word	0x20000004
 8001c8c:	20000834 	.word	0x20000834
 8001c90:	20000078 	.word	0x20000078
 8001c94:	20000210 	.word	0x20000210
 8001c98:	20000414 	.word	0x20000414
 8001c9c:	200008a8 	.word	0x200008a8
 8001ca0:	20000010 	.word	0x20000010
 8001ca4:	200008ac 	.word	0x200008ac
 8001ca8:	20000338 	.word	0x20000338
 8001cac:	200008a4 	.word	0x200008a4
              LoopClosed = VSS_CalcAvrgMecSpeedUnit(&VirtualSpeedSensorM1, &hForcedMecSpeedUnit);
 8001cb0:	481e      	ldr	r0, [pc, #120]	@ (8001d2c <TSK_MediumFrequencyTaskM1+0x360>)
 8001cb2:	a901      	add	r1, sp, #4
 8001cb4:	f006 fa00 	bl	80080b8 <VSS_CalcAvrgMecSpeedUnit>
 8001cb8:	4605      	mov	r5, r0
              tempBool = VSS_TransitionEnded(&VirtualSpeedSensorM1);
 8001cba:	481c      	ldr	r0, [pc, #112]	@ (8001d2c <TSK_MediumFrequencyTaskM1+0x360>)
 8001cbc:	f006 faa0 	bl	8008200 <VSS_TransitionEnded>
              LoopClosed = LoopClosed || tempBool;
 8001cc0:	b915      	cbnz	r5, 8001cc8 <TSK_MediumFrequencyTaskM1+0x2fc>
 8001cc2:	2800      	cmp	r0, #0
 8001cc4:	f43f aea0 	beq.w	8001a08 <TSK_MediumFrequencyTaskM1+0x3c>
                                    (((int32_t)FOCVars[M1].Iqdref.q * (int16_t)PID_GetKIDivisor(&PIDSpeedHandle_M1))
 8001cc8:	4b19      	ldr	r3, [pc, #100]	@ (8001d30 <TSK_MediumFrequencyTaskM1+0x364>)
 8001cca:	481a      	ldr	r0, [pc, #104]	@ (8001d34 <TSK_MediumFrequencyTaskM1+0x368>)
 8001ccc:	f9b3 6010 	ldrsh.w	r6, [r3, #16]
                STC_SetSpeedSensor(pSTC[M1], &STO_PLL_M1._Super); /* Observer has converged */
 8001cd0:	4d19      	ldr	r5, [pc, #100]	@ (8001d38 <TSK_MediumFrequencyTaskM1+0x36c>)
                                    (((int32_t)FOCVars[M1].Iqdref.q * (int16_t)PID_GetKIDivisor(&PIDSpeedHandle_M1))
 8001cd2:	f004 fa33 	bl	800613c <PID_GetKIDivisor>
                PID_SetIntegralTerm(&PIDSpeedHandle_M1,
 8001cd6:	b201      	sxth	r1, r0
 8001cd8:	fb06 f101 	mul.w	r1, r6, r1
 8001cdc:	4815      	ldr	r0, [pc, #84]	@ (8001d34 <TSK_MediumFrequencyTaskM1+0x368>)
 8001cde:	f004 fa23 	bl	8006128 <PID_SetIntegralTerm>
                STC_SetSpeedSensor(pSTC[M1], &STO_PLL_M1._Super); /* Observer has converged */
 8001ce2:	4916      	ldr	r1, [pc, #88]	@ (8001d3c <TSK_MediumFrequencyTaskM1+0x370>)
 8001ce4:	6828      	ldr	r0, [r5, #0]
 8001ce6:	f005 fa93 	bl	8007210 <STC_SetSpeedSensor>
                FOC_InitAdditionalMethods(M1);
 8001cea:	2000      	movs	r0, #0
 8001cec:	f7ff fe1e 	bl	800192c <FOC_InitAdditionalMethods>
                FOC_CalcCurrRef(M1);
 8001cf0:	2000      	movs	r0, #0
 8001cf2:	f7ff fe27 	bl	8001944 <FOC_CalcCurrRef>
                STC_ForceSpeedReferenceToCurrentSpeed(pSTC[M1]); /* Init the reference speed to current speed */
 8001cf6:	6828      	ldr	r0, [r5, #0]
 8001cf8:	f005 fb2e 	bl	8007358 <STC_ForceSpeedReferenceToCurrentSpeed>
                MCI_ExecBufferedCommands(&Mci[M1]); /* Exec the speed ramp after changing of the speed sensor */
 8001cfc:	4810      	ldr	r0, [pc, #64]	@ (8001d40 <TSK_MediumFrequencyTaskM1+0x374>)
 8001cfe:	f7ff f9bf 	bl	8001080 <MCI_ExecBufferedCommands>
                Mci[M1].State = RUN;
 8001d02:	2306      	movs	r3, #6
 8001d04:	f884 3023 	strb.w	r3, [r4, #35]	@ 0x23
 8001d08:	e67e      	b.n	8001a08 <TSK_MediumFrequencyTaskM1+0x3c>
              (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 8001d0a:	4629      	mov	r1, r5
              pwmcHandle[M1]->OffCalibrWaitTimeCounter = 1u;
 8001d0c:	f8a0 5060 	strh.w	r5, [r0, #96]	@ 0x60
              (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 8001d10:	f000 fd50 	bl	80027b4 <PWMC_CurrentReadingCalibr>
              R3_1_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 8001d14:	6830      	ldr	r0, [r6, #0]
 8001d16:	e6d8      	b.n	8001aca <TSK_MediumFrequencyTaskM1+0xfe>
                FOC_Clear(M1);
 8001d18:	2000      	movs	r0, #0
 8001d1a:	f7ff fd03 	bl	8001724 <FOC_Clear>
                PQD_Clear(pMPM[M1]);
 8001d1e:	6830      	ldr	r0, [r6, #0]
 8001d20:	f004 fa92 	bl	8006248 <PQD_Clear>
                Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8001d24:	2300      	movs	r3, #0
 8001d26:	8463      	strh	r3, [r4, #34]	@ 0x22
 8001d28:	e66e      	b.n	8001a08 <TSK_MediumFrequencyTaskM1+0x3c>
 8001d2a:	bf00      	nop
 8001d2c:	20000338 	.word	0x20000338
 8001d30:	200008ac 	.word	0x200008ac
 8001d34:	20000550 	.word	0x20000550
 8001d38:	20000010 	.word	0x20000010
 8001d3c:	20000210 	.word	0x20000210
 8001d40:	20000834 	.word	0x20000834

08001d44 <MC_Scheduler>:
  if (((uint8_t)1) == bMCBootCompleted)
 8001d44:	4b1d      	ldr	r3, [pc, #116]	@ (8001dbc <MC_Scheduler+0x78>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d000      	beq.n	8001d4e <MC_Scheduler+0xa>
 8001d4c:	4770      	bx	lr
{
 8001d4e:	b570      	push	{r4, r5, r6, lr}
    if(hMFTaskCounterM1 > 0u)
 8001d50:	4c1b      	ldr	r4, [pc, #108]	@ (8001dc0 <MC_Scheduler+0x7c>)
 8001d52:	8823      	ldrh	r3, [r4, #0]
 8001d54:	b19b      	cbz	r3, 8001d7e <MC_Scheduler+0x3a>
      hMFTaskCounterM1--;
 8001d56:	3b01      	subs	r3, #1
 8001d58:	b29b      	uxth	r3, r3
    if(hBootCapDelayCounterM1 > 0U)
 8001d5a:	4a1a      	ldr	r2, [pc, #104]	@ (8001dc4 <MC_Scheduler+0x80>)
      hMFTaskCounterM1--;
 8001d5c:	8023      	strh	r3, [r4, #0]
    if(hBootCapDelayCounterM1 > 0U)
 8001d5e:	8813      	ldrh	r3, [r2, #0]
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	b11b      	cbz	r3, 8001d6c <MC_Scheduler+0x28>
      hBootCapDelayCounterM1--;
 8001d64:	8813      	ldrh	r3, [r2, #0]
 8001d66:	3b01      	subs	r3, #1
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	8013      	strh	r3, [r2, #0]
    if(hStopPermanencyCounterM1 > 0U)
 8001d6c:	4a16      	ldr	r2, [pc, #88]	@ (8001dc8 <MC_Scheduler+0x84>)
 8001d6e:	8813      	ldrh	r3, [r2, #0]
 8001d70:	b29b      	uxth	r3, r3
 8001d72:	b11b      	cbz	r3, 8001d7c <MC_Scheduler+0x38>
      hStopPermanencyCounterM1--;
 8001d74:	8813      	ldrh	r3, [r2, #0]
 8001d76:	3b01      	subs	r3, #1
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	8013      	strh	r3, [r2, #0]
}
 8001d7c:	bd70      	pop	{r4, r5, r6, pc}
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess(MCP_Over_UartA.pTransportLayer,
 8001d7e:	4d13      	ldr	r5, [pc, #76]	@ (8001dcc <MC_Scheduler+0x88>)
      TSK_MediumFrequencyTaskM1();
 8001d80:	f7ff fe24 	bl	80019cc <TSK_MediumFrequencyTaskM1>
      MC_APP_PostMediumFrequencyHook_M1();
 8001d84:	f7ff f940 	bl	8001008 <MC_APP_PostMediumFrequencyHook_M1>
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess(MCP_Over_UartA.pTransportLayer,
 8001d88:	4629      	mov	r1, r5
 8001d8a:	f851 0b0c 	ldr.w	r0, [r1], #12
 8001d8e:	6883      	ldr	r3, [r0, #8]
 8001d90:	4798      	blx	r3
 8001d92:	6068      	str	r0, [r5, #4]
      if ( 0U == MCP_Over_UartA.rxBuffer)
 8001d94:	b130      	cbz	r0, 8001da4 <MC_Scheduler+0x60>
        if (0U == MCP_Over_UartA.pTransportLayer->fGetBuffer(MCP_Over_UartA.pTransportLayer,
 8001d96:	4629      	mov	r1, r5
 8001d98:	220a      	movs	r2, #10
 8001d9a:	f851 0b08 	ldr.w	r0, [r1], #8
 8001d9e:	6803      	ldr	r3, [r0, #0]
 8001da0:	4798      	blx	r3
 8001da2:	b908      	cbnz	r0, 8001da8 <MC_Scheduler+0x64>
{
 8001da4:	2301      	movs	r3, #1
 8001da6:	e7d8      	b.n	8001d5a <MC_Scheduler+0x16>
          MCP_ReceivedPacket(&MCP_Over_UartA);
 8001da8:	4628      	mov	r0, r5
 8001daa:	f000 fa97 	bl	80022dc <MCP_ReceivedPacket>
          MCP_Over_UartA.pTransportLayer->fSendPacket(MCP_Over_UartA.pTransportLayer, MCP_Over_UartA.txBuffer,
 8001dae:	6828      	ldr	r0, [r5, #0]
 8001db0:	89ea      	ldrh	r2, [r5, #14]
 8001db2:	6846      	ldr	r6, [r0, #4]
 8001db4:	68a9      	ldr	r1, [r5, #8]
 8001db6:	230a      	movs	r3, #10
 8001db8:	47b0      	blx	r6
 8001dba:	e7f3      	b.n	8001da4 <MC_Scheduler+0x60>
 8001dbc:	2000089c 	.word	0x2000089c
 8001dc0:	200008a2 	.word	0x200008a2
 8001dc4:	200008a0 	.word	0x200008a0
 8001dc8:	2000089e 	.word	0x2000089e
 8001dcc:	200005d8 	.word	0x200005d8

08001dd0 <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 8001dd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  Observer_Inputs_t STO_Inputs; /* Only if sensorless main */
  Observer_Inputs_t STO_aux_Inputs; /* Only if sensorless aux */
  STO_aux_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* Only if sensorless */

  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* Only if sensorless */
  if (SWITCH_OVER == Mci[M1].State)
 8001dd4:	f8df 81cc 	ldr.w	r8, [pc, #460]	@ 8001fa4 <TSK_HighFrequencyTask+0x1d4>
  MC_Perf_Measure_Start(&PerfTraces, MEASURE_TSK_HighFrequencyTaskM1);
 8001dd8:	4865      	ldr	r0, [pc, #404]	@ (8001f70 <TSK_HighFrequencyTask+0x1a0>)
  STO_aux_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* Only if sensorless */
 8001dda:	4c66      	ldr	r4, [pc, #408]	@ (8001f74 <TSK_HighFrequencyTask+0x1a4>)
{
 8001ddc:	b08c      	sub	sp, #48	@ 0x30
  MC_Perf_Measure_Start(&PerfTraces, MEASURE_TSK_HighFrequencyTaskM1);
 8001dde:	2100      	movs	r1, #0
 8001de0:	f7ff fbcc 	bl	800157c <MC_Perf_Measure_Start>
  if (SWITCH_OVER == Mci[M1].State)
 8001de4:	f898 3023 	ldrb.w	r3, [r8, #35]	@ 0x23
  STO_aux_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* Only if sensorless */
 8001de8:	f8d4 001a 	ldr.w	r0, [r4, #26]
 8001dec:	9009      	str	r0, [sp, #36]	@ 0x24
  if (SWITCH_OVER == Mci[M1].State)
 8001dee:	2b13      	cmp	r3, #19
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* Only if sensorless */
 8001df0:	9006      	str	r0, [sp, #24]
  if (SWITCH_OVER == Mci[M1].State)
 8001df2:	f000 80b0 	beq.w	8001f56 <TSK_HighFrequencyTask+0x186>
  ab_t Iab;
  alphabeta_t Ialphabeta, Valphabeta;
  int16_t hElAngle;
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8001df6:	4b60      	ldr	r3, [pc, #384]	@ (8001f78 <TSK_HighFrequencyTask+0x1a8>)
  hElAngle = SPD_GetElAngle(speedHandle);
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*PARK_ANGLE_COMPENSATION_FACTOR;
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8001df8:	f8df 91b0 	ldr.w	r9, [pc, #432]	@ 8001fac <TSK_HighFrequencyTask+0x1dc>
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8001dfc:	6818      	ldr	r0, [r3, #0]
  Ialphabeta = MCM_Clarke(Iab);
  Iqd = MCM_Park(Ialphabeta, hElAngle);
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
  Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
  Vqd = FF_VqdConditioning(pFF[M1],Vqd);
 8001dfe:	f8df a1b0 	ldr.w	sl, [pc, #432]	@ 8001fb0 <TSK_HighFrequencyTask+0x1e0>
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8001e02:	f005 fa07 	bl	8007214 <STC_GetSpeedSensor>
 8001e06:	4607      	mov	r7, r0
  hElAngle = SPD_GetElAngle(speedHandle);
 8001e08:	f005 f99c 	bl	8007144 <SPD_GetElAngle>
 8001e0c:	4605      	mov	r5, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*PARK_ANGLE_COMPENSATION_FACTOR;
 8001e0e:	4638      	mov	r0, r7
 8001e10:	f005 f9a4 	bl	800715c <SPD_GetInstElSpeedDpp>
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8001e14:	a903      	add	r1, sp, #12
 8001e16:	f8d9 0000 	ldr.w	r0, [r9]
 8001e1a:	f000 fb4b 	bl	80024b4 <PWMC_GetPhaseCurrents>
  Ialphabeta = MCM_Clarke(Iab);
 8001e1e:	9803      	ldr	r0, [sp, #12]
 8001e20:	f7ff fa68 	bl	80012f4 <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001e24:	4629      	mov	r1, r5
  Ialphabeta = MCM_Clarke(Iab);
 8001e26:	9004      	str	r0, [sp, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001e28:	f7ff fada 	bl	80013e0 <MCM_Park>
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001e2c:	4b53      	ldr	r3, [pc, #332]	@ (8001f7c <TSK_HighFrequencyTask+0x1ac>)
 8001e2e:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001e32:	9001      	str	r0, [sp, #4]
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001e34:	b200      	sxth	r0, r0
 8001e36:	1a09      	subs	r1, r1, r0
 8001e38:	6818      	ldr	r0, [r3, #0]
 8001e3a:	f004 f9a9 	bl	8006190 <PI_Controller>
  Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8001e3e:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8001e42:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 8001e46:	1ac9      	subs	r1, r1, r3
 8001e48:	4b4d      	ldr	r3, [pc, #308]	@ (8001f80 <TSK_HighFrequencyTask+0x1b0>)
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001e4a:	4606      	mov	r6, r0
  Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8001e4c:	6818      	ldr	r0, [r3, #0]
 8001e4e:	f004 f99f 	bl	8006190 <PI_Controller>
  Vqd = FF_VqdConditioning(pFF[M1],Vqd);
 8001e52:	f8ad 6008 	strh.w	r6, [sp, #8]
 8001e56:	f8ad 000a 	strh.w	r0, [sp, #10]
 8001e5a:	9902      	ldr	r1, [sp, #8]
 8001e5c:	f8da 0000 	ldr.w	r0, [sl]
 8001e60:	f003 ff60 	bl	8005d24 <FF_VqdConditioning>
 8001e64:	4601      	mov	r1, r0
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 8001e66:	4847      	ldr	r0, [pc, #284]	@ (8001f84 <TSK_HighFrequencyTask+0x1b4>)
 8001e68:	f003 fec4 	bl	8005bf4 <Circle_Limitation>
 8001e6c:	4606      	mov	r6, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8001e6e:	4638      	mov	r0, r7
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 8001e70:	9602      	str	r6, [sp, #8]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8001e72:	f005 f973 	bl	800715c <SPD_GetInstElSpeedDpp>
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8001e76:	4629      	mov	r1, r5
 8001e78:	9802      	ldr	r0, [sp, #8]
 8001e7a:	f7ff faf3 	bl	8001464 <MCM_Rev_Park>
 8001e7e:	4601      	mov	r1, r0
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8001e80:	f8d9 0000 	ldr.w	r0, [r9]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8001e84:	9105      	str	r1, [sp, #20]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8001e86:	f000 fb17 	bl	80024b8 <PWMC_SetPhaseVoltage>

  FOCVars[M1].Vqd = Vqd;
  FOCVars[M1].Iab = Iab;
 8001e8a:	9b03      	ldr	r3, [sp, #12]
  FOCVars[M1].Ialphabeta = Ialphabeta;
  FOCVars[M1].Iqd = Iqd;
  FOCVars[M1].Valphabeta = Valphabeta;
  FOCVars[M1].hElAngle = hElAngle;
 8001e8c:	8425      	strh	r5, [r4, #32]
  FOCVars[M1].Iab = Iab;
 8001e8e:	6023      	str	r3, [r4, #0]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8001e90:	4605      	mov	r5, r0
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8001e92:	9b04      	ldr	r3, [sp, #16]
  FOCVars[M1].Valphabeta = Valphabeta;
 8001e94:	9805      	ldr	r0, [sp, #20]
 8001e96:	f8c4 001a 	str.w	r0, [r4, #26]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8001e9a:	6063      	str	r3, [r4, #4]

  FF_DataProcess(pFF[M1]);
 8001e9c:	f8da 0000 	ldr.w	r0, [sl]
  FOCVars[M1].Iqd = Iqd;
 8001ea0:	9b01      	ldr	r3, [sp, #4]
  FOCVars[M1].Vqd = Vqd;
 8001ea2:	f8c4 6016 	str.w	r6, [r4, #22]
  FOCVars[M1].Iqd = Iqd;
 8001ea6:	60e3      	str	r3, [r4, #12]
  FF_DataProcess(pFF[M1]);
 8001ea8:	f003 ff64 	bl	8005d74 <FF_DataProcess>
  if(hFOCreturn == MC_DURATION)
 8001eac:	2d01      	cmp	r5, #1
 8001eae:	d049      	beq.n	8001f44 <TSK_HighFrequencyTask+0x174>
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 8001eb0:	4835      	ldr	r0, [pc, #212]	@ (8001f88 <TSK_HighFrequencyTask+0x1b8>)
 8001eb2:	f005 f91b 	bl	80070ec <RUC_FirstAccelerationStageReached>
    STO_Inputs.Ialfa_beta = FOCVars[M1].Ialphabeta; /* Only if sensorless */
 8001eb6:	6863      	ldr	r3, [r4, #4]
 8001eb8:	9307      	str	r3, [sp, #28]
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 8001eba:	4605      	mov	r5, r0
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /* Only for sensorless */
 8001ebc:	4833      	ldr	r0, [pc, #204]	@ (8001f8c <TSK_HighFrequencyTask+0x1bc>)
 8001ebe:	f003 fe91 	bl	8005be4 <VBS_GetAvBusVoltage_d>
    (void)( void )STO_PLL_CalcElAngle(&STO_PLL_M1, &STO_Inputs);
 8001ec2:	a906      	add	r1, sp, #24
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /* Only for sensorless */
 8001ec4:	f8ad 0020 	strh.w	r0, [sp, #32]
    (void)( void )STO_PLL_CalcElAngle(&STO_PLL_M1, &STO_Inputs);
 8001ec8:	4831      	ldr	r0, [pc, #196]	@ (8001f90 <TSK_HighFrequencyTask+0x1c0>)
 8001eca:	f005 fdbb 	bl	8007a44 <STO_PLL_CalcElAngle>
    STO_PLL_CalcAvrgElSpeedDpp(&STO_PLL_M1); /* Only in case of Sensor-less */
 8001ece:	4830      	ldr	r0, [pc, #192]	@ (8001f90 <TSK_HighFrequencyTask+0x1c0>)
 8001ed0:	f005 ff4c 	bl	8007d6c <STO_PLL_CalcAvrgElSpeedDpp>
    if (false == IsAccelerationStageReached)
 8001ed4:	b325      	cbz	r5, 8001f20 <TSK_HighFrequencyTask+0x150>
    if((START == Mci[M1].State) || (SWITCH_OVER == Mci[M1].State))
 8001ed6:	f898 3023 	ldrb.w	r3, [r8, #35]	@ 0x23
 8001eda:	2b04      	cmp	r3, #4
 8001edc:	d027      	beq.n	8001f2e <TSK_HighFrequencyTask+0x15e>
 8001ede:	2b13      	cmp	r3, #19
 8001ee0:	d025      	beq.n	8001f2e <TSK_HighFrequencyTask+0x15e>
    STO_aux_Inputs.Ialfa_beta = FOCVars[M1].Ialphabeta; /* Only if sensorless */
 8001ee2:	6863      	ldr	r3, [r4, #4]
    STO_aux_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /* Only for sensorless */
 8001ee4:	4829      	ldr	r0, [pc, #164]	@ (8001f8c <TSK_HighFrequencyTask+0x1bc>)
    STO_aux_Inputs.Ialfa_beta = FOCVars[M1].Ialphabeta; /* Only if sensorless */
 8001ee6:	930a      	str	r3, [sp, #40]	@ 0x28
    STO_aux_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /* Only for sensorless */
 8001ee8:	f003 fe7c 	bl	8005be4 <VBS_GetAvBusVoltage_d>
    (void)STO_CR_CalcElAngle (&STO_CR_M1, &STO_aux_Inputs);
 8001eec:	a909      	add	r1, sp, #36	@ 0x24
    STO_aux_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /* Only for sensorless */
 8001eee:	4603      	mov	r3, r0
    (void)STO_CR_CalcElAngle (&STO_CR_M1, &STO_aux_Inputs);
 8001ef0:	4828      	ldr	r0, [pc, #160]	@ (8001f94 <TSK_HighFrequencyTask+0x1c4>)
    STO_aux_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /* Only for sensorless */
 8001ef2:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
    (void)STO_CR_CalcElAngle (&STO_CR_M1, &STO_aux_Inputs);
 8001ef6:	f005 fa37 	bl	8007368 <STO_CR_CalcElAngle>
    STO_CR_CalcAvrgElSpeedDpp (&STO_CR_M1);
 8001efa:	4826      	ldr	r0, [pc, #152]	@ (8001f94 <TSK_HighFrequencyTask+0x1c4>)
 8001efc:	f005 fd5c 	bl	80079b8 <STO_CR_CalcAvrgElSpeedDpp>
  GLOBAL_TIMESTAMP++;
 8001f00:	4a25      	ldr	r2, [pc, #148]	@ (8001f98 <TSK_HighFrequencyTask+0x1c8>)
  if (0U == MCPA_UART_A.Mark)
 8001f02:	4826      	ldr	r0, [pc, #152]	@ (8001f9c <TSK_HighFrequencyTask+0x1cc>)
  GLOBAL_TIMESTAMP++;
 8001f04:	6813      	ldr	r3, [r2, #0]
  if (0U == MCPA_UART_A.Mark)
 8001f06:	f890 1029 	ldrb.w	r1, [r0, #41]	@ 0x29
  GLOBAL_TIMESTAMP++;
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	6013      	str	r3, [r2, #0]
  if (0U == MCPA_UART_A.Mark)
 8001f0e:	b9f9      	cbnz	r1, 8001f50 <TSK_HighFrequencyTask+0x180>
  MC_Perf_Measure_Stop(&PerfTraces, MEASURE_TSK_HighFrequencyTaskM1);
 8001f10:	4817      	ldr	r0, [pc, #92]	@ (8001f70 <TSK_HighFrequencyTask+0x1a0>)
 8001f12:	2100      	movs	r1, #0
 8001f14:	f7ff fb46 	bl	80015a4 <MC_Perf_Measure_Stop>
}
 8001f18:	2000      	movs	r0, #0
 8001f1a:	b00c      	add	sp, #48	@ 0x30
 8001f1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      STO_ResetPLL(&STO_PLL_M1);
 8001f20:	481b      	ldr	r0, [pc, #108]	@ (8001f90 <TSK_HighFrequencyTask+0x1c0>)
 8001f22:	f006 f845 	bl	8007fb0 <STO_ResetPLL>
    if((START == Mci[M1].State) || (SWITCH_OVER == Mci[M1].State))
 8001f26:	f898 3023 	ldrb.w	r3, [r8, #35]	@ 0x23
 8001f2a:	2b04      	cmp	r3, #4
 8001f2c:	d1d7      	bne.n	8001ede <TSK_HighFrequencyTask+0x10e>
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 8001f2e:	4818      	ldr	r0, [pc, #96]	@ (8001f90 <TSK_HighFrequencyTask+0x1c0>)
 8001f30:	f005 f908 	bl	8007144 <SPD_GetElAngle>
      (void)VSS_CalcElAngle(&VirtualSpeedSensorM1, &hObsAngle);
 8001f34:	a905      	add	r1, sp, #20
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 8001f36:	4603      	mov	r3, r0
      (void)VSS_CalcElAngle(&VirtualSpeedSensorM1, &hObsAngle);
 8001f38:	4819      	ldr	r0, [pc, #100]	@ (8001fa0 <TSK_HighFrequencyTask+0x1d0>)
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 8001f3a:	f8ad 3014 	strh.w	r3, [sp, #20]
      (void)VSS_CalcElAngle(&VirtualSpeedSensorM1, &hObsAngle);
 8001f3e:	f006 f869 	bl	8008014 <VSS_CalcElAngle>
 8001f42:	e7ce      	b.n	8001ee2 <TSK_HighFrequencyTask+0x112>
    MCI_FaultProcessing(&Mci[M1], MC_DURATION, 0);
 8001f44:	4817      	ldr	r0, [pc, #92]	@ (8001fa4 <TSK_HighFrequencyTask+0x1d4>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	4629      	mov	r1, r5
 8001f4a:	f7ff f88d 	bl	8001068 <MCI_FaultProcessing>
 8001f4e:	e7d7      	b.n	8001f00 <TSK_HighFrequencyTask+0x130>
    MCPA_dataLog (&MCPA_UART_A);
 8001f50:	f003 ff4c 	bl	8005dec <MCPA_dataLog>
 8001f54:	e7dc      	b.n	8001f10 <TSK_HighFrequencyTask+0x140>
    if (!REMNG_RampCompleted(pREMNG[M1]))
 8001f56:	4d14      	ldr	r5, [pc, #80]	@ (8001fa8 <TSK_HighFrequencyTask+0x1d8>)
 8001f58:	6828      	ldr	r0, [r5, #0]
 8001f5a:	f004 ffa7 	bl	8006eac <REMNG_RampCompleted>
 8001f5e:	2800      	cmp	r0, #0
 8001f60:	f47f af49 	bne.w	8001df6 <TSK_HighFrequencyTask+0x26>
      FOCVars[M1].Iqdref.q = (int16_t)REMNG_Calc(pREMNG[M1]);
 8001f64:	6828      	ldr	r0, [r5, #0]
 8001f66:	f004 ff7f 	bl	8006e68 <REMNG_Calc>
 8001f6a:	8220      	strh	r0, [r4, #16]
 8001f6c:	e743      	b.n	8001df6 <TSK_HighFrequencyTask+0x26>
 8001f6e:	bf00      	nop
 8001f70:	20000874 	.word	0x20000874
 8001f74:	200008ac 	.word	0x200008ac
 8001f78:	20000010 	.word	0x20000010
 8001f7c:	2000000c 	.word	0x2000000c
 8001f80:	20000008 	.word	0x20000008
 8001f84:	20000014 	.word	0x20000014
 8001f88:	20000414 	.word	0x20000414
 8001f8c:	20000030 	.word	0x20000030
 8001f90:	20000210 	.word	0x20000210
 8001f94:	20000078 	.word	0x20000078
 8001f98:	20001aa4 	.word	0x20001aa4
 8001f9c:	200005ac 	.word	0x200005ac
 8001fa0:	20000338 	.word	0x20000338
 8001fa4:	20000834 	.word	0x20000834
 8001fa8:	200008a4 	.word	0x200008a4
 8001fac:	200008a8 	.word	0x200008a8
 8001fb0:	20000000 	.word	0x20000000

08001fb4 <TSK_SafetyTask_PWMOFF>:
  * @brief  Safety task implementation if  MC.M1_ON_OVER_VOLTAGE == TURN_OFF_PWM.
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink.
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 8001fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */
  uint16_t CodeReturn = MC_NO_ERROR;
  const uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};
  /* Check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
  CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[bMotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 8001fb6:	4f1d      	ldr	r7, [pc, #116]	@ (800202c <TSK_SafetyTask_PWMOFF+0x78>)
{
 8001fb8:	4604      	mov	r4, r0
  CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[bMotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 8001fba:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 8001fbe:	f000 fc21 	bl	8002804 <PWMC_IsFaultOccurred>
 8001fc2:	4605      	mov	r5, r0
                                                    (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  if (M1 == bMotor)
 8001fc4:	b18c      	cbz	r4, 8001fea <TSK_SafetyTask_PWMOFF+0x36>
  }
  else
  {
    /* Nothing to do */
  }
  MCI_FaultProcessing(&Mci[bMotor], CodeReturn, ~CodeReturn); /* Process faults */
 8001fc6:	4e1a      	ldr	r6, [pc, #104]	@ (8002030 <TSK_SafetyTask_PWMOFF+0x7c>)
 8001fc8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8001fcc:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8001fd0:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 8001fd4:	43ea      	mvns	r2, r5
 8001fd6:	4630      	mov	r0, r6
 8001fd8:	b292      	uxth	r2, r2
 8001fda:	4629      	mov	r1, r5
 8001fdc:	f7ff f844 	bl	8001068 <MCI_FaultProcessing>

  if (MCI_GetFaultState(&Mci[bMotor]) != (uint32_t)MC_NO_FAULTS)
 8001fe0:	4630      	mov	r0, r6
 8001fe2:	f7ff f8db 	bl	800119c <MCI_GetFaultState>
 8001fe6:	b960      	cbnz	r0, 8002002 <TSK_SafetyTask_PWMOFF+0x4e>
    /* No errors */
  }
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 8001fe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    uint16_t rawValueM1 =  RCM_ExecRegularConv(&VbusRegConv_M1);
 8001fea:	4812      	ldr	r0, [pc, #72]	@ (8002034 <TSK_SafetyTask_PWMOFF+0x80>)
 8001fec:	f001 fede 	bl	8003dac <RCM_ExecRegularConv>
 8001ff0:	4601      	mov	r1, r0
    CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(&BusVoltageSensor_M1, rawValueM1);
 8001ff2:	4811      	ldr	r0, [pc, #68]	@ (8002038 <TSK_SafetyTask_PWMOFF+0x84>)
 8001ff4:	f004 ff02 	bl	8006dfc <RVBS_CalcAvVbus>
 8001ff8:	f020 0008 	bic.w	r0, r0, #8
 8001ffc:	4328      	orrs	r0, r5
 8001ffe:	b285      	uxth	r5, r0
 8002000:	e7e1      	b.n	8001fc6 <TSK_SafetyTask_PWMOFF+0x12>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8002002:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
 8002006:	f000 fbd1 	bl	80027ac <PWMC_SwitchOffPWM>
    if (MCPA_UART_A.Mark != 0U)
 800200a:	480c      	ldr	r0, [pc, #48]	@ (800203c <TSK_SafetyTask_PWMOFF+0x88>)
 800200c:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
 8002010:	b94b      	cbnz	r3, 8002026 <TSK_SafetyTask_PWMOFF+0x72>
    FOC_Clear(bMotor);
 8002012:	4620      	mov	r0, r4
 8002014:	f7ff fb86 	bl	8001724 <FOC_Clear>
    PQD_Clear(pMPM[bMotor]); //cstat !MISRAC2012-Rule-11.3
 8002018:	4b09      	ldr	r3, [pc, #36]	@ (8002040 <TSK_SafetyTask_PWMOFF+0x8c>)
 800201a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
 800201e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    PQD_Clear(pMPM[bMotor]); //cstat !MISRAC2012-Rule-11.3
 8002022:	f004 b911 	b.w	8006248 <PQD_Clear>
      MCPA_flushDataLog (&MCPA_UART_A);
 8002026:	f003 ffa1 	bl	8005f6c <MCPA_flushDataLog>
 800202a:	e7f2      	b.n	8002012 <TSK_SafetyTask_PWMOFF+0x5e>
 800202c:	200008a8 	.word	0x200008a8
 8002030:	20000834 	.word	0x20000834
 8002034:	2000004c 	.word	0x2000004c
 8002038:	20000030 	.word	0x20000030
 800203c:	200005ac 	.word	0x200005ac
 8002040:	20000004 	.word	0x20000004

08002044 <TSK_SafetyTask>:
{
 8002044:	b508      	push	{r3, lr}
  if (1U == bMCBootCompleted)
 8002046:	4b06      	ldr	r3, [pc, #24]	@ (8002060 <TSK_SafetyTask+0x1c>)
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d000      	beq.n	8002050 <TSK_SafetyTask+0xc>
}
 800204e:	bd08      	pop	{r3, pc}
    TSK_SafetyTask_PWMOFF(M1);
 8002050:	2000      	movs	r0, #0
 8002052:	f7ff ffaf 	bl	8001fb4 <TSK_SafetyTask_PWMOFF>
}
 8002056:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCM_ExecUserConv();
 800205a:	f001 bedf 	b.w	8003e1c <RCM_ExecUserConv>
 800205e:	bf00      	nop
 8002060:	2000089c 	.word	0x2000089c

08002064 <MC_RunMotorControlTasks>:
{
 8002064:	b508      	push	{r3, lr}
  if (0U == bMCBootCompleted)
 8002066:	4b04      	ldr	r3, [pc, #16]	@ (8002078 <MC_RunMotorControlTasks+0x14>)
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	b903      	cbnz	r3, 800206e <MC_RunMotorControlTasks+0xa>
}
 800206c:	bd08      	pop	{r3, pc}
    MC_Scheduler();
 800206e:	f7ff fe69 	bl	8001d44 <MC_Scheduler>
    TSK_SafetyTask();
 8002072:	f7ff ffe7 	bl	8002044 <TSK_SafetyTask>
}
 8002076:	bd08      	pop	{r3, pc}
 8002078:	2000089c 	.word	0x2000089c

0800207c <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 800207c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */
  R3_1_SwitchOffPWM(pwmcHandle[M1]);
 800207e:	4b05      	ldr	r3, [pc, #20]	@ (8002094 <TSK_HardwareFaultTask+0x18>)
 8002080:	6818      	ldr	r0, [r3, #0]
 8002082:	f004 fa93 	bl	80065ac <R3_1_SwitchOffPWM>
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);

  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 8002086:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);
 800208a:	4803      	ldr	r0, [pc, #12]	@ (8002098 <TSK_HardwareFaultTask+0x1c>)
 800208c:	2200      	movs	r2, #0
 800208e:	2180      	movs	r1, #128	@ 0x80
 8002090:	f7fe bfea 	b.w	8001068 <MCI_FaultProcessing>
 8002094:	200008a8 	.word	0x200008a8
 8002098:	20000834 	.word	0x20000834

0800209c <mc_lock_pins>:

 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration.
  */
__weak void mc_lock_pins (void)
{
 800209c:	b430      	push	{r4, r5}
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800209e:	4b31      	ldr	r3, [pc, #196]	@ (8002164 <mc_lock_pins+0xc8>)
 80020a0:	4a31      	ldr	r2, [pc, #196]	@ (8002168 <mc_lock_pins+0xcc>)
 80020a2:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80020a4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80020a8:	61d9      	str	r1, [r3, #28]
 80020aa:	b08a      	sub	sp, #40	@ 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80020ac:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80020ae:	69da      	ldr	r2, [r3, #28]
 80020b0:	9209      	str	r2, [sp, #36]	@ 0x24
  WRITE_REG(GPIOx->LCKR, PinMask);
 80020b2:	f44f 7100 	mov.w	r1, #512	@ 0x200
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80020b6:	f44f 3281 	mov.w	r2, #66048	@ 0x10200
  (void) temp;
 80020ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80020bc:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80020be:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80020c0:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80020c2:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
  temp = READ_REG(GPIOx->LCKR);
 80020c6:	69d9      	ldr	r1, [r3, #28]
 80020c8:	9108      	str	r1, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80020ca:	f502 3281 	add.w	r2, r2, #66048	@ 0x10200
 80020ce:	f44f 31a0 	mov.w	r1, #81920	@ 0x14000
  WRITE_REG(GPIOx->LCKR, PinMask);
 80020d2:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
  (void) temp;
 80020d6:	9c08      	ldr	r4, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80020d8:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80020da:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80020dc:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80020de:	69d1      	ldr	r1, [r2, #28]
 80020e0:	9107      	str	r1, [sp, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80020e2:	f44f 6080 	mov.w	r0, #1024	@ 0x400
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80020e6:	f44f 3182 	mov.w	r1, #66560	@ 0x10400
  (void) temp;
 80020ea:	9c07      	ldr	r4, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80020ec:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80020ee:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80020f0:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80020f2:	69d9      	ldr	r1, [r3, #28]
 80020f4:	9106      	str	r1, [sp, #24]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80020f6:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80020fa:	f44f 31c0 	mov.w	r1, #98304	@ 0x18000
  (void) temp;
 80020fe:	9c06      	ldr	r4, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002100:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002102:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002104:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002106:	69d1      	ldr	r1, [r2, #28]
 8002108:	9105      	str	r1, [sp, #20]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800210a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800210e:	f44f 3190 	mov.w	r1, #73728	@ 0x12000
  (void) temp;
 8002112:	9c05      	ldr	r4, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002114:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002116:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002118:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 800211a:	69d2      	ldr	r2, [r2, #28]
 800211c:	9204      	str	r2, [sp, #16]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800211e:	2001      	movs	r0, #1
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002120:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
  (void) temp;
 8002124:	9904      	ldr	r1, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002126:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002128:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800212a:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800212c:	69d9      	ldr	r1, [r3, #28]
 800212e:	9103      	str	r1, [sp, #12]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002130:	2402      	movs	r4, #2
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002132:	490e      	ldr	r1, [pc, #56]	@ (800216c <mc_lock_pins+0xd0>)
  (void) temp;
 8002134:	9d03      	ldr	r5, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002136:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002138:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800213a:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800213c:	69db      	ldr	r3, [r3, #28]
 800213e:	9302      	str	r3, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002140:	4b0b      	ldr	r3, [pc, #44]	@ (8002170 <mc_lock_pins+0xd4>)
  (void) temp;
 8002142:	9d02      	ldr	r5, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002144:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002146:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002148:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800214a:	69d9      	ldr	r1, [r3, #28]
 800214c:	9101      	str	r1, [sp, #4]
  (void) temp;
 800214e:	9901      	ldr	r1, [sp, #4]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002150:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002152:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002154:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002156:	69db      	ldr	r3, [r3, #28]
 8002158:	9300      	str	r3, [sp, #0]
  (void) temp;
 800215a:	9b00      	ldr	r3, [sp, #0]
LL_GPIO_LockPin(M1_PWM_UL_GPIO_Port, M1_PWM_UL_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_U_GPIO_Port, M1_CURR_AMPL_U_Pin);
LL_GPIO_LockPin(M1_BUS_VOLTAGE_GPIO_Port, M1_BUS_VOLTAGE_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_V_GPIO_Port, M1_CURR_AMPL_V_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_W_GPIO_Port, M1_CURR_AMPL_W_Pin);
}
 800215c:	b00a      	add	sp, #40	@ 0x28
 800215e:	bc30      	pop	{r4, r5}
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	40020000 	.word	0x40020000
 8002168:	00010100 	.word	0x00010100
 800216c:	00010002 	.word	0x00010002
 8002170:	40020800 	.word	0x40020800

08002174 <RI_SetRegCommandParser>:
  * @param  txSyncFreeSpace Space available for synchronous transmission
  *
  * @retval Returns #MCP_CMD_OK if the command is acknowledged and #MCP_CMD_NOK if not.
  */
uint8_t RI_SetRegCommandParser (MCP_Handle_t * pHandle, uint16_t txSyncFreeSpace)
{
 8002174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  {
#endif
    uint16_t * dataElementID;
    uint8_t * rxData = pHandle->rxBuffer;
    uint8_t * txData = pHandle->txBuffer;
    int16_t rxLength = pHandle->rxLength;
 8002178:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
    uint8_t accessResult;

    uint16_t regID;
    uint8_t typeID;
    uint8_t motorID;
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 800217c:	4b31      	ldr	r3, [pc, #196]	@ (8002244 <RI_SetRegCommandParser+0xd0>)
{
 800217e:	b089      	sub	sp, #36	@ 0x24
    uint16_t size = 0U;
 8002180:	f04f 0900 	mov.w	r9, #0
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 8002184:	9306      	str	r3, [sp, #24]
    uint8_t number_of_item =0;
    pHandle->txLength = 0;

    while (rxLength > 0)
 8002186:	454c      	cmp	r4, r9
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 8002188:	4b2f      	ldr	r3, [pc, #188]	@ (8002248 <RI_SetRegCommandParser+0xd4>)
    uint16_t size = 0U;
 800218a:	f8ad 9016 	strh.w	r9, [sp, #22]
    uint8_t * txData = pHandle->txBuffer;
 800218e:	e9d0 c601 	ldrd	ip, r6, [r0, #4]
{
 8002192:	4607      	mov	r7, r0
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 8002194:	9307      	str	r3, [sp, #28]
    pHandle->txLength = 0;
 8002196:	f8a0 900e 	strh.w	r9, [r0, #14]
    while (rxLength > 0)
 800219a:	dd47      	ble.n	800222c <RI_SetRegCommandParser+0xb8>
 800219c:	eb06 0801 	add.w	r8, r6, r1
  uint8_t retVal = MCP_CMD_OK;
 80021a0:	f8cd 900c 	str.w	r9, [sp, #12]
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
        /* Prepare next data*/
        rxLength = (int16_t) (rxLength - size);
        rxData = rxData+size;
        /* If there is only one CMD in the buffer, we do not store the result */
        if ((1U == number_of_item) && (0 == rxLength))
 80021a4:	f1c6 0a01 	rsb	sl, r6, #1
      rxData = rxData+MCP_ID_SIZE; // Shift buffer to the next data
 80021a8:	f10c 0502 	add.w	r5, ip, #2
      regID = *dataElementID & REG_MASK;
 80021ac:	f8bc c000 	ldrh.w	ip, [ip]
      typeID = (uint8_t)*dataElementID & TYPE_MASK;
 80021b0:	fa5f f18c 	uxtb.w	r1, ip
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 80021b4:	3c02      	subs	r4, #2
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 80021b6:	f001 0b07 	and.w	fp, r1, #7
 80021ba:	f10d 0920 	add.w	r9, sp, #32
      if (motorID > NBR_OF_MOTORS)
 80021be:	f01c 0f06 	tst.w	ip, #6
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 80021c2:	fa0f fe84 	sxth.w	lr, r4
 80021c6:	f10d 0316 	add.w	r3, sp, #22
 80021ca:	462a      	mov	r2, r5
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 80021cc:	b2a4      	uxth	r4, r4
      regID = *dataElementID & REG_MASK;
 80021ce:	f02c 0007 	bic.w	r0, ip, #7
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 80021d2:	eb09 0b8b 	add.w	fp, r9, fp, lsl #2
 80021d6:	f001 0138 	and.w	r1, r1, #56	@ 0x38
      if (motorID > NBR_OF_MOTORS)
 80021da:	d11b      	bne.n	8002214 <RI_SetRegCommandParser+0xa0>
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 80021dc:	f8cd e000 	str.w	lr, [sp]
 80021e0:	f85b bc08 	ldr.w	fp, [fp, #-8]
 80021e4:	47d8      	blx	fp
        rxLength = (int16_t) (rxLength - size);
 80021e6:	f8bd 2016 	ldrh.w	r2, [sp, #22]
        if ((1U == number_of_item) && (0 == rxLength))
 80021ea:	eb06 030a 	add.w	r3, r6, sl
 80021ee:	b2db      	uxtb	r3, r3
        rxLength = (int16_t) (rxLength - size);
 80021f0:	1aa4      	subs	r4, r4, r2
        if ((1U == number_of_item) && (0 == rxLength))
 80021f2:	2b01      	cmp	r3, #1
        rxLength = (int16_t) (rxLength - size);
 80021f4:	b224      	sxth	r4, r4
        rxData = rxData+size;
 80021f6:	eb05 0c02 	add.w	ip, r5, r2
        if ((1U == number_of_item) && (0 == rxLength))
 80021fa:	d013      	beq.n	8002224 <RI_SetRegCommandParser+0xb0>
        {
          retVal = accessResult;
        }
        else
        {/* Store the result for each access to be able to report failing access */
          if (txSyncFreeSpace !=0 )
 80021fc:	4546      	cmp	r6, r8
 80021fe:	d00d      	beq.n	800221c <RI_SetRegCommandParser+0xa8>
          {
            *txData = accessResult;
 8002200:	f806 0b01 	strb.w	r0, [r6], #1
            txData = txData+1;
            pHandle->txLength++;
 8002204:	89fb      	ldrh	r3, [r7, #14]
 8002206:	3301      	adds	r3, #1
 8002208:	81fb      	strh	r3, [r7, #14]
            txSyncFreeSpace--; /* decrement one by one no wraparound possible */
            retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 800220a:	b1a0      	cbz	r0, 8002236 <RI_SetRegCommandParser+0xc2>
            if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FORMAT))
 800220c:	2807      	cmp	r0, #7
 800220e:	d001      	beq.n	8002214 <RI_SetRegCommandParser+0xa0>
 8002210:	280a      	cmp	r0, #10
 8002212:	d10e      	bne.n	8002232 <RI_SetRegCommandParser+0xbe>
        retVal = MCP_CMD_NOK;
 8002214:	2001      	movs	r0, #1
    }
  #ifdef NULL_PTR_CHECK_REG_INT
  }
#endif
  return (retVal);
}
 8002216:	b009      	add	sp, #36	@ 0x24
 8002218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 800221c:	2008      	movs	r0, #8
}
 800221e:	b009      	add	sp, #36	@ 0x24
 8002220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((1U == number_of_item) && (0 == rxLength))
 8002224:	2c00      	cmp	r4, #0
 8002226:	d1e9      	bne.n	80021fc <RI_SetRegCommandParser+0x88>
    if (MCP_CMD_OK == retVal)
 8002228:	2800      	cmp	r0, #0
 800222a:	d1f4      	bne.n	8002216 <RI_SetRegCommandParser+0xa2>
      pHandle->txLength = 0;
 800222c:	2000      	movs	r0, #0
 800222e:	81f8      	strh	r0, [r7, #14]
 8002230:	e7f1      	b.n	8002216 <RI_SetRegCommandParser+0xa2>
            retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 8002232:	2301      	movs	r3, #1
 8002234:	9303      	str	r3, [sp, #12]
    while (rxLength > 0)
 8002236:	2c00      	cmp	r4, #0
 8002238:	dcb6      	bgt.n	80021a8 <RI_SetRegCommandParser+0x34>
 800223a:	9803      	ldr	r0, [sp, #12]
    if (MCP_CMD_OK == retVal)
 800223c:	2800      	cmp	r0, #0
 800223e:	d0f5      	beq.n	800222c <RI_SetRegCommandParser+0xb8>
 8002240:	e7e9      	b.n	8002216 <RI_SetRegCommandParser+0xa2>
 8002242:	bf00      	nop
 8002244:	0800283d 	.word	0x0800283d
 8002248:	08002941 	.word	0x08002941

0800224c <RI_GetRegCommandParser>:
  * @param  txSyncFreeSpace Space available for synchronous transmission
  *
  * @retval Returns #MCP_CMD_OK if the command is acknowledged and #MCP_CMD_NOK if not.
  */
uint8_t RI_GetRegCommandParser (MCP_Handle_t * pHandle, uint16_t txSyncFreeSpace)
{
 800224c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002250:	b086      	sub	sp, #24
  {
#endif
    uint16_t * dataElementID;
    uint8_t * rxData = pHandle->rxBuffer;
    uint8_t * txData = pHandle->txBuffer;
    uint16_t size = 0U;
 8002252:	2300      	movs	r3, #0
 8002254:	f8ad 300e 	strh.w	r3, [sp, #14]

    uint16_t regID;
    uint8_t typeID;
    uint8_t motorID;
    uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_GetRegisterGlobal, &RI_GetRegisterMotor1};
    pHandle->txLength = 0;
 8002258:	81c3      	strh	r3, [r0, #14]
    uint16_t rxLength = pHandle->rxLength;
 800225a:	f8b0 800c 	ldrh.w	r8, [r0, #12]
    uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_GetRegisterGlobal, &RI_GetRegisterMotor1};
 800225e:	4b1d      	ldr	r3, [pc, #116]	@ (80022d4 <RI_GetRegCommandParser+0x88>)
 8002260:	9304      	str	r3, [sp, #16]
 8002262:	4b1d      	ldr	r3, [pc, #116]	@ (80022d8 <RI_GetRegCommandParser+0x8c>)
    uint8_t * rxData = pHandle->rxBuffer;
 8002264:	f8d0 9004 	ldr.w	r9, [r0, #4]
    uint8_t * txData = pHandle->txBuffer;
 8002268:	6886      	ldr	r6, [r0, #8]
    uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_GetRegisterGlobal, &RI_GetRegisterMotor1};
 800226a:	9305      	str	r3, [sp, #20]
    while (rxLength > 0U)
 800226c:	f1b8 0f00 	cmp.w	r8, #0
 8002270:	d016      	beq.n	80022a0 <RI_GetRegCommandParser+0x54>
 8002272:	4607      	mov	r7, r0
 8002274:	b20d      	sxth	r5, r1
    uint8_t * rxData = pHandle->rxBuffer;
 8002276:	464c      	mov	r4, r9
    {
      dataElementID = (uint16_t *) rxData;
      rxLength = rxLength - MCP_ID_SIZE;
      rxData = rxData + MCP_ID_SIZE; // Shift buffer to the next MCP_ID

      regID = *dataElementID & REG_MASK;
 8002278:	f834 cb02 	ldrh.w	ip, [r4], #2
      typeID = (uint8_t)*dataElementID & TYPE_MASK;
 800227c:	fa5f f18c 	uxtb.w	r1, ip
        retVal = MCP_CMD_NOK;
        rxLength = 0;
      }
      else
      {
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 8002280:	f001 0e07 	and.w	lr, r1, #7
 8002284:	f10d 0a18 	add.w	sl, sp, #24
      if (motorID > NBR_OF_MOTORS)
 8002288:	f01c 0f06 	tst.w	ip, #6
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 800228c:	4632      	mov	r2, r6
      regID = *dataElementID & REG_MASK;
 800228e:	f02c 0007 	bic.w	r0, ip, #7
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 8002292:	f10d 030e 	add.w	r3, sp, #14
 8002296:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 800229a:	f001 0138 	and.w	r1, r1, #56	@ 0x38
      if (motorID > NBR_OF_MOTORS)
 800229e:	d003      	beq.n	80022a8 <RI_GetRegCommandParser+0x5c>
        retVal = MCP_CMD_NOK;
 80022a0:	2001      	movs	r0, #1
    }
#ifdef NULL_PTR_CHECK_REG_INT
  }
#endif
  return (retVal);
}
 80022a2:	b006      	add	sp, #24
 80022a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 80022a8:	9500      	str	r5, [sp, #0]
 80022aa:	f85e ac08 	ldr.w	sl, [lr, #-8]
 80022ae:	47d0      	blx	sl
        if (retVal == MCP_CMD_OK )
 80022b0:	eba8 0304 	sub.w	r3, r8, r4
    while (rxLength > 0U)
 80022b4:	fa19 f383 	uxtah	r3, r9, r3
 80022b8:	b29b      	uxth	r3, r3
        if (retVal == MCP_CMD_OK )
 80022ba:	2800      	cmp	r0, #0
 80022bc:	d1f1      	bne.n	80022a2 <RI_GetRegCommandParser+0x56>
          txData = txData+size;
 80022be:	f8bd 100e 	ldrh.w	r1, [sp, #14]
          pHandle->txLength += size;
 80022c2:	89fa      	ldrh	r2, [r7, #14]
          freeSpaceS16 = freeSpaceS16-size;
 80022c4:	1a6d      	subs	r5, r5, r1
          pHandle->txLength += size;
 80022c6:	440a      	add	r2, r1
          txData = txData+size;
 80022c8:	440e      	add	r6, r1
          pHandle->txLength += size;
 80022ca:	81fa      	strh	r2, [r7, #14]
          freeSpaceS16 = freeSpaceS16-size;
 80022cc:	b22d      	sxth	r5, r5
    while (rxLength > 0U)
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1d2      	bne.n	8002278 <RI_GetRegCommandParser+0x2c>
 80022d2:	e7e6      	b.n	80022a2 <RI_GetRegCommandParser+0x56>
 80022d4:	08002fcd 	.word	0x08002fcd
 80022d8:	08003161 	.word	0x08003161

080022dc <MCP_ReceivedPacket>:
  * @brief  Parses the header from the received packet and call the required function depending on the command sent by the controller device.
  *
  * @param  pHandle Handler of the current instance of the MCP component
  */
void MCP_ReceivedPacket(MCP_Handle_t *pHandle)
{
 80022dc:	b570      	push	{r4, r5, r6, lr}
 80022de:	4604      	mov	r4, r0
  }
  else /* Length is 0, this is a request to send back the last packet */
  {
#endif
    packetHeader = (uint16_t *)pHandle->rxBuffer; //cstat !MISRAC2012-Rule-11.3
    command = (uint16_t)(*packetHeader & CMD_MASK);
 80022e0:	6846      	ldr	r6, [r0, #4]
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;

    /* Commands requiering payload response must be aware of space available for the payload */
    /* Last byte is reserved for MCP response*/
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 80022e2:	6822      	ldr	r2, [r4, #0]
    command = (uint16_t)(*packetHeader & CMD_MASK);
 80022e4:	f836 3b02 	ldrh.w	r3, [r6], #2
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 80022e8:	8980      	ldrh	r0, [r0, #12]
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 80022ea:	8992      	ldrh	r2, [r2, #12]
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 80022ec:	f403 457f 	and.w	r5, r3, #65280	@ 0xff00
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 80022f0:	3a01      	subs	r2, #1
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 80022f2:	3802      	subs	r0, #2
    command = (uint16_t)(*packetHeader & CMD_MASK);
 80022f4:	f023 0c07 	bic.w	ip, r3, #7
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 80022f8:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 80022fc:	b291      	uxth	r1, r2
{
 80022fe:	b082      	sub	sp, #8
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8002300:	b280      	uxth	r0, r0
    command = (uint16_t)(*packetHeader & CMD_MASK);
 8002302:	fa1f fc8c 	uxth.w	ip, ip
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8002306:	b212      	sxth	r2, r2
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 8002308:	d050      	beq.n	80023ac <MCP_ReceivedPacket+0xd0>
    motorID = (uint8_t)((*packetHeader - 1U) & MOTOR_MASK);
 800230a:	3b01      	subs	r3, #1
    MCI_Handle_t *pMCI = &Mci[motorID];
 800230c:	f003 0307 	and.w	r3, r3, #7
 8002310:	4d57      	ldr	r5, [pc, #348]	@ (8002470 <MCP_ReceivedPacket+0x194>)
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8002312:	81a0      	strh	r0, [r4, #12]
    MCI_Handle_t *pMCI = &Mci[motorID];
 8002314:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 8002318:	eb03 034e 	add.w	r3, r3, lr, lsl #1
 800231c:	eb05 0583 	add.w	r5, r5, r3, lsl #2

    /* Initialization of the tx length, command which send back data has to increment the txLength
     * (case of Read register) */
    pHandle->txLength = 0U;

    switch (command)
 8002320:	f1bc 0f48 	cmp.w	ip, #72	@ 0x48
    pHandle->txLength = 0U;
 8002324:	f04f 0300 	mov.w	r3, #0
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 8002328:	6066      	str	r6, [r4, #4]
    pHandle->txLength = 0U;
 800232a:	81e3      	strh	r3, [r4, #14]
    switch (command)
 800232c:	d832      	bhi.n	8002394 <MCP_ReceivedPacket+0xb8>
 800232e:	f1bc 0f48 	cmp.w	ip, #72	@ 0x48
 8002332:	d826      	bhi.n	8002382 <MCP_ReceivedPacket+0xa6>
 8002334:	e8df f00c 	tbb	[pc, ip]
 8002338:	25252568 	.word	0x25252568
 800233c:	25252525 	.word	0x25252525
 8002340:	25252570 	.word	0x25252570
 8002344:	25252525 	.word	0x25252525
 8002348:	25252575 	.word	0x25252575
 800234c:	25252525 	.word	0x25252525
 8002350:	2525257a 	.word	0x2525257a
 8002354:	25252525 	.word	0x25252525
 8002358:	25252549 	.word	0x25252549
 800235c:	25252525 	.word	0x25252525
 8002360:	2525254f 	.word	0x2525254f
 8002364:	25252525 	.word	0x25252525
 8002368:	25252545 	.word	0x25252545
 800236c:	25252525 	.word	0x25252525
 8002370:	25252557 	.word	0x25252557
 8002374:	25252525 	.word	0x25252525
 8002378:	2525255d 	.word	0x2525255d
 800237c:	25252525 	.word	0x25252525
 8002380:	64          	.byte	0x64
 8002381:	00          	.byte	0x00
 8002382:	2300      	movs	r3, #0
 8002384:	2002      	movs	r0, #2
      {
        MCPResponse = MCP_CMD_UNKNOWN;
        break;
      }
    }
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8002386:	68a2      	ldr	r2, [r4, #8]
 8002388:	54d0      	strb	r0, [r2, r3]
    pHandle->txLength++;
 800238a:	89e3      	ldrh	r3, [r4, #14]
 800238c:	3301      	adds	r3, #1
 800238e:	81e3      	strh	r3, [r4, #14]
#ifdef NULL_PTR_CHECK_MCP
  }
#endif
}
 8002390:	b002      	add	sp, #8
 8002392:	bd70      	pop	{r4, r5, r6, pc}
    switch (command)
 8002394:	f1bc 0f68 	cmp.w	ip, #104	@ 0x68
 8002398:	d1f4      	bne.n	8002384 <MCP_ReceivedPacket+0xa8>
        MCPResponse = MC_ProfilerCommand(pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace, &pHandle->txLength,
 800239a:	68a3      	ldr	r3, [r4, #8]
 800239c:	9300      	str	r3, [sp, #0]
 800239e:	4631      	mov	r1, r6
 80023a0:	f104 030e 	add.w	r3, r4, #14
 80023a4:	f7fe fe2c 	bl	8001000 <MC_ProfilerCommand>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80023a8:	89e3      	ldrh	r3, [r4, #14]
        break;
 80023aa:	e7ec      	b.n	8002386 <MCP_ReceivedPacket+0xaa>
      userCommand = ((uint8_t)(command & 0xF8U) >> 3U);
 80023ac:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
    pHandle->txLength = 0U;
 80023b0:	2300      	movs	r3, #0
        if ((userCommand < MCP_USER_CALLBACK_MAX) && (MCP_UserCallBack[userCommand] != NULL))
 80023b2:	f1bc 0f01 	cmp.w	ip, #1
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 80023b6:	81a0      	strh	r0, [r4, #12]
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 80023b8:	6066      	str	r6, [r4, #4]
    pHandle->txLength = 0U;
 80023ba:	81e3      	strh	r3, [r4, #14]
        if ((userCommand < MCP_USER_CALLBACK_MAX) && (MCP_UserCallBack[userCommand] != NULL))
 80023bc:	d943      	bls.n	8002446 <MCP_ReceivedPacket+0x16a>
          MCPResponse = MCP_ERROR_CALLBACK_NOT_REGISTRED;
 80023be:	200d      	movs	r0, #13
 80023c0:	e7e1      	b.n	8002386 <MCP_ReceivedPacket+0xaa>
        if (IDLE == MCI_GetSTMState(pMCI))
 80023c2:	4628      	mov	r0, r5
 80023c4:	f7fe fe98 	bl	80010f8 <MCI_GetSTMState>
 80023c8:	b3a8      	cbz	r0, 8002436 <MCP_ReceivedPacket+0x15a>
          (void)MCI_StopMotor(pMCI);
 80023ca:	4628      	mov	r0, r5
 80023cc:	f7fe feb6 	bl	800113c <MCI_StopMotor>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80023d0:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 80023d2:	2000      	movs	r0, #0
 80023d4:	e7d7      	b.n	8002386 <MCP_ReceivedPacket+0xaa>
        if (RUN == MCI_GetSTMState(pMCI))
 80023d6:	4628      	mov	r0, r5
 80023d8:	f7fe fe8e 	bl	80010f8 <MCI_GetSTMState>
 80023dc:	2806      	cmp	r0, #6
 80023de:	d03e      	beq.n	800245e <MCP_ReceivedPacket+0x182>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80023e0:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 80023e2:	2000      	movs	r0, #0
        break;
 80023e4:	e7cf      	b.n	8002386 <MCP_ReceivedPacket+0xaa>
        (void)MCI_FaultAcknowledged(pMCI);
 80023e6:	4628      	mov	r0, r5
 80023e8:	f7fe fec4 	bl	8001174 <MCI_FaultAcknowledged>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80023ec:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 80023ee:	2000      	movs	r0, #0
        break;
 80023f0:	e7c9      	b.n	8002386 <MCP_ReceivedPacket+0xaa>
        MCI_Clear_PerfMeasure(pMCI,M1);
 80023f2:	4628      	mov	r0, r5
 80023f4:	2100      	movs	r1, #0
 80023f6:	f7fe ff79 	bl	80012ec <MCI_Clear_PerfMeasure>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80023fa:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 80023fc:	2000      	movs	r0, #0
        break;
 80023fe:	e7c2      	b.n	8002386 <MCP_ReceivedPacket+0xaa>
        MCI_Clear_Iqdref(pMCI);
 8002400:	4628      	mov	r0, r5
 8002402:	f7fe ff69 	bl	80012d8 <MCI_Clear_Iqdref>
 8002406:	e7eb      	b.n	80023e0 <MCP_ReceivedPacket+0x104>
        *pHandle->txBuffer = MCP_VERSION;
 8002408:	68a3      	ldr	r3, [r4, #8]
        pHandle->txLength = 4U;
 800240a:	2104      	movs	r1, #4
        *pHandle->txBuffer = MCP_VERSION;
 800240c:	2201      	movs	r2, #1
        pHandle->txLength = 4U;
 800240e:	81e1      	strh	r1, [r4, #14]
        *pHandle->txBuffer = MCP_VERSION;
 8002410:	701a      	strb	r2, [r3, #0]
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8002412:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8002414:	2000      	movs	r0, #0
        break;
 8002416:	e7b6      	b.n	8002386 <MCP_ReceivedPacket+0xaa>
        MCPResponse = RI_SetRegCommandParser(pHandle, (uint16_t)txSyncFreeSpace);
 8002418:	4620      	mov	r0, r4
 800241a:	f7ff feab 	bl	8002174 <RI_SetRegCommandParser>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 800241e:	89e3      	ldrh	r3, [r4, #14]
        break;
 8002420:	e7b1      	b.n	8002386 <MCP_ReceivedPacket+0xaa>
        MCPResponse = RI_GetRegCommandParser(pHandle, (uint16_t)txSyncFreeSpace);
 8002422:	4620      	mov	r0, r4
 8002424:	f7ff ff12 	bl	800224c <RI_GetRegCommandParser>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8002428:	89e3      	ldrh	r3, [r4, #14]
        break;
 800242a:	e7ac      	b.n	8002386 <MCP_ReceivedPacket+0xaa>
        MCPResponse = (MCI_StartWithPolarizationMotor(pMCI) == false) ? MCP_CMD_OK : MCP_CMD_NOK;
 800242c:	4628      	mov	r0, r5
 800242e:	f7fe fe6b 	bl	8001108 <MCI_StartWithPolarizationMotor>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8002432:	89e3      	ldrh	r3, [r4, #14]
 8002434:	e7a7      	b.n	8002386 <MCP_ReceivedPacket+0xaa>
          MCPResponse = (MCI_StartWithPolarizationMotor(pMCI) == true) ? MCP_CMD_OK : MCP_CMD_NOK;
 8002436:	4628      	mov	r0, r5
 8002438:	f7fe fe66 	bl	8001108 <MCI_StartWithPolarizationMotor>
 800243c:	f080 0001 	eor.w	r0, r0, #1
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8002440:	89e3      	ldrh	r3, [r4, #14]
          MCPResponse = (MCI_StartWithPolarizationMotor(pMCI) == true) ? MCP_CMD_OK : MCP_CMD_NOK;
 8002442:	b2c0      	uxtb	r0, r0
 8002444:	e79f      	b.n	8002386 <MCP_ReceivedPacket+0xaa>
        if ((userCommand < MCP_USER_CALLBACK_MAX) && (MCP_UserCallBack[userCommand] != NULL))
 8002446:	4b0b      	ldr	r3, [pc, #44]	@ (8002474 <MCP_ReceivedPacket+0x198>)
 8002448:	f853 502c 	ldr.w	r5, [r3, ip, lsl #2]
 800244c:	b16d      	cbz	r5, 800246a <MCP_ReceivedPacket+0x18e>
          MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace,
 800244e:	68a3      	ldr	r3, [r4, #8]
 8002450:	9300      	str	r3, [sp, #0]
 8002452:	4631      	mov	r1, r6
 8002454:	f104 030e 	add.w	r3, r4, #14
 8002458:	47a8      	blx	r5
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 800245a:	89e3      	ldrh	r3, [r4, #14]
          MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace,
 800245c:	e793      	b.n	8002386 <MCP_ReceivedPacket+0xaa>
          MCI_StopRamp(pMCI);
 800245e:	4628      	mov	r0, r5
 8002460:	f7fe fed2 	bl	8001208 <MCI_StopRamp>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8002464:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8002466:	2000      	movs	r0, #0
 8002468:	e78d      	b.n	8002386 <MCP_ReceivedPacket+0xaa>
 800246a:	462b      	mov	r3, r5
 800246c:	e7a7      	b.n	80023be <MCP_ReceivedPacket+0xe2>
 800246e:	bf00      	nop
 8002470:	20000834 	.word	0x20000834
 8002474:	200008d4 	.word	0x200008d4

08002478 <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 8002478:	b508      	push	{r3, lr}
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  (void)HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / SYS_TICK_FREQUENCY);
 800247a:	f002 fd75 	bl	8004f68 <HAL_RCC_GetHCLKFreq>
 800247e:	4b0a      	ldr	r3, [pc, #40]	@ (80024a8 <MX_MotorControl_Init+0x30>)
 8002480:	fba3 3000 	umull	r3, r0, r3, r0
 8002484:	09c0      	lsrs	r0, r0, #7
 8002486:	f002 facb 	bl	8004a20 <HAL_SYSTICK_Config>
  HAL_NVIC_SetPriority(SysTick_IRQn, uwTickPrio, 0U);
 800248a:	4b08      	ldr	r3, [pc, #32]	@ (80024ac <MX_MotorControl_Init+0x34>)
 800248c:	2200      	movs	r2, #0
 800248e:	6819      	ldr	r1, [r3, #0]
 8002490:	f04f 30ff 	mov.w	r0, #4294967295
 8002494:	f002 fa7a 	bl	800498c <HAL_NVIC_SetPriority>

  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI);
 8002498:	4805      	ldr	r0, [pc, #20]	@ (80024b0 <MX_MotorControl_Init+0x38>)
 800249a:	f7ff f98b 	bl	80017b4 <MCboot>
  mc_lock_pins();
}
 800249e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  mc_lock_pins();
 80024a2:	f7ff bdfb 	b.w	800209c <mc_lock_pins>
 80024a6:	bf00      	nop
 80024a8:	10624dd3 	.word	0x10624dd3
 80024ac:	2000067c 	.word	0x2000067c
 80024b0:	20001a60 	.word	0x20001a60

080024b4 <PWMC_GetPhaseCurrents>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctGetPhaseCurrents(pHandle, Iab);
 80024b4:	6803      	ldr	r3, [r0, #0]
 80024b6:	4718      	bx	r3

080024b8 <PWMC_SetPhaseVoltage>:
  * @param  Valfa_beta: Voltage Components expressed in the @f$(\alpha, \beta)@f$ reference frame.
  * @retval #MC_NO_ERROR if no error occurred or #MC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage(PWMC_Handle_t *pHandle, alphabeta_t Valfa_beta)
{
 80024b8:	b530      	push	{r4, r5, lr}
    int32_t wTimePhA;
    int32_t wTimePhB;
    int32_t wTimePhC;

    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 80024ba:	f8b0 4072 	ldrh.w	r4, [r0, #114]	@ 0x72
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 80024be:	f8b0 204e 	ldrh.w	r2, [r0, #78]	@ 0x4e
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 80024c2:	ea4f 4c21 	mov.w	ip, r1, asr #16
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 80024c6:	b20b      	sxth	r3, r1
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 80024c8:	fb04 fc0c 	mul.w	ip, r4, ip
 80024cc:	ebcc 7ccc 	rsb	ip, ip, ip, lsl #31
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 80024d0:	fb02 f303 	mul.w	r3, r2, r3

    wX = wUBeta;
    wY = (wUBeta + wUAlpha) / 2;
 80024d4:	eb03 024c 	add.w	r2, r3, ip, lsl #1
    wZ = (wUBeta - wUAlpha) / 2;
 80024d8:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
    wY = (wUBeta + wUAlpha) / 2;
 80024dc:	eb02 71d2 	add.w	r1, r2, r2, lsr #31
    wZ = (wUBeta - wUAlpha) / 2;
 80024e0:	eb03 7ed3 	add.w	lr, r3, r3, lsr #31

    /* Sector calculation from wX, wY, wZ */
    if (wY < 0)
 80024e4:	1c55      	adds	r5, r2, #1
{
 80024e6:	b083      	sub	sp, #12
    {
      if (wZ < 0)
      {
        pHandle->Sector = SECTOR_5;
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 80024e8:	ea4f 0494 	mov.w	r4, r4, lsr #2
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 80024ec:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    wY = (wUBeta + wUAlpha) / 2;
 80024f0:	ea4f 0161 	mov.w	r1, r1, asr #1
    wZ = (wUBeta - wUAlpha) / 2;
 80024f4:	ea4f 0e6e 	mov.w	lr, lr, asr #1
    if (wY < 0)
 80024f8:	f2c0 8094 	blt.w	8002624 <PWMC_SetPhaseVoltage+0x16c>
        }
        }
    }
    else /* wY > 0 */
    {
      if (wZ >= 0)
 80024fc:	1c5d      	adds	r5, r3, #1
 80024fe:	db64      	blt.n	80025ca <PWMC_SetPhaseVoltage+0x112>
      {
        pHandle->Sector = SECTOR_2;
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8002500:	ebb1 010e 	subs.w	r1, r1, lr
 8002504:	bf44      	itt	mi
 8002506:	f501 317f 	addmi.w	r1, r1, #261120	@ 0x3fc00
 800250a:	f201 31ff 	addwmi	r1, r1, #1023	@ 0x3ff
        wTimePhB = wTimePhA + (wZ / 131072);
 800250e:	2b00      	cmp	r3, #0
 8002510:	bfbc      	itt	lt
 8002512:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
 8002516:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
        wTimePhC = wTimePhA - (wY / 131072);
 800251a:	2a00      	cmp	r2, #0
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 800251c:	eb04 41a1 	add.w	r1, r4, r1, asr #18
        wTimePhC = wTimePhA - (wY / 131072);
 8002520:	bfb8      	it	lt
 8002522:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00

        if(true == pHandle->SingleShuntTopology)
 8002526:	f890 4087 	ldrb.w	r4, [r0, #135]	@ 0x87
        pHandle->Sector = SECTOR_2;
 800252a:	f04f 0501 	mov.w	r5, #1
        wTimePhC = wTimePhA - (wY / 131072);
 800252e:	bfb8      	it	lt
 8002530:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
        pHandle->Sector = SECTOR_2;
 8002534:	f880 507c 	strb.w	r5, [r0, #124]	@ 0x7c
        wTimePhB = wTimePhA + (wZ / 131072);
 8002538:	eb01 43a3 	add.w	r3, r1, r3, asr #18
        wTimePhC = wTimePhA - (wY / 131072);
 800253c:	eba1 42a2 	sub.w	r2, r1, r2, asr #18
        if(true == pHandle->SingleShuntTopology)
 8002540:	2c00      	cmp	r4, #0
 8002542:	f040 8097 	bne.w	8002674 <PWMC_SetPhaseVoltage+0x1bc>
          pHandle->midDuty = 0U;
          pHandle->highDuty = 1U;
        }
        else
        {
        pHandle->lowDuty = (uint16_t)wTimePhB;
 8002546:	fa1f fe83 	uxth.w	lr, r3
        pHandle->midDuty = (uint16_t)wTimePhA;
 800254a:	fa1f fc81 	uxth.w	ip, r1
        pHandle->highDuty = (uint16_t)wTimePhC;
 800254e:	b294      	uxth	r4, r2
            pHandle->highDuty = 2U;
 8002550:	f8a0 405c 	strh.w	r4, [r0, #92]	@ 0x5c

    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));

    if (1U == pHandle->DTTest)
 8002554:	f8b0 4070 	ldrh.w	r4, [r0, #112]	@ 0x70
            pHandle->lowDuty = 0U;
 8002558:	f8a0 e058 	strh.w	lr, [r0, #88]	@ 0x58
    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
 800255c:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 8002560:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));
 8002564:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8002568:	b289      	uxth	r1, r1
 800256a:	b29b      	uxth	r3, r3
 800256c:	b292      	uxth	r2, r2
    if (1U == pHandle->DTTest)
 800256e:	2c01      	cmp	r4, #1
            pHandle->midDuty = 1U;
 8002570:	f8a0 c05a 	strh.w	ip, [r0, #90]	@ 0x5a
    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
 8002574:	f8a0 1050 	strh.w	r1, [r0, #80]	@ 0x50
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 8002578:	f8a0 3052 	strh.w	r3, [r0, #82]	@ 0x52
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));
 800257c:	f8a0 2054 	strh.w	r2, [r0, #84]	@ 0x54
    if (1U == pHandle->DTTest)
 8002580:	d11e      	bne.n	80025c0 <PWMC_SetPhaseVoltage+0x108>
    {
      /* Dead time compensation */
      if (pHandle->Ia > 0)
 8002582:	f9b0 5062 	ldrsh.w	r5, [r0, #98]	@ 0x62
      {
        pHandle->CntPhA += pHandle->DTCompCnt;
 8002586:	f8b0 4074 	ldrh.w	r4, [r0, #116]	@ 0x74
      if (pHandle->Ia > 0)
 800258a:	2d00      	cmp	r5, #0
        pHandle->CntPhA += pHandle->DTCompCnt;
 800258c:	bfcc      	ite	gt
 800258e:	1909      	addgt	r1, r1, r4
      }
      else
      {
        pHandle->CntPhA -= pHandle->DTCompCnt;
 8002590:	1b09      	suble	r1, r1, r4
 8002592:	b289      	uxth	r1, r1
 8002594:	f8a0 1050 	strh.w	r1, [r0, #80]	@ 0x50
      }

      if (pHandle->Ib > 0)
 8002598:	f9b0 1064 	ldrsh.w	r1, [r0, #100]	@ 0x64
 800259c:	2900      	cmp	r1, #0
      else
      {
        pHandle->CntPhB -= pHandle->DTCompCnt;
      }

      if (pHandle->Ic > 0)
 800259e:	f9b0 1066 	ldrsh.w	r1, [r0, #102]	@ 0x66
        pHandle->CntPhB += pHandle->DTCompCnt;
 80025a2:	bfcc      	ite	gt
 80025a4:	191b      	addgt	r3, r3, r4
        pHandle->CntPhB -= pHandle->DTCompCnt;
 80025a6:	1b1b      	suble	r3, r3, r4
      if (pHandle->Ic > 0)
 80025a8:	2900      	cmp	r1, #0
        pHandle->CntPhB -= pHandle->DTCompCnt;
 80025aa:	b29b      	uxth	r3, r3
      {
        pHandle->CntPhC += pHandle->DTCompCnt;
 80025ac:	bfcc      	ite	gt
 80025ae:	18a4      	addgt	r4, r4, r2
      }
      else
      {
        pHandle->CntPhC -= pHandle->DTCompCnt;
 80025b0:	1b12      	suble	r2, r2, r4
 80025b2:	f8a0 3052 	strh.w	r3, [r0, #82]	@ 0x52
        pHandle->CntPhC += pHandle->DTCompCnt;
 80025b6:	bfcc      	ite	gt
 80025b8:	f8a0 4054 	strhgt.w	r4, [r0, #84]	@ 0x54
        pHandle->CntPhC -= pHandle->DTCompCnt;
 80025bc:	f8a0 2054 	strhle.w	r2, [r0, #84]	@ 0x54
      }
    }
    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 80025c0:	6943      	ldr	r3, [r0, #20]
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (returnValue);
}
 80025c2:	b003      	add	sp, #12
 80025c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 80025c8:	4718      	bx	r3
        if ( wX <= 0 )
 80025ca:	f1bc 0f00 	cmp.w	ip, #0
 80025ce:	dd7f      	ble.n	80026d0 <PWMC_SetPhaseVoltage+0x218>
          wTimePhB = wTimePhA + (wZ / 131072);
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	bfb8      	it	lt
 80025d4:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 80025d8:	ebac 0e0e 	sub.w	lr, ip, lr
          wTimePhB = wTimePhA + (wZ / 131072);
 80025dc:	bfb8      	it	lt
 80025de:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
          wTimePhC = wTimePhB - (wX / 131072);
 80025e2:	f1bc 0f00 	cmp.w	ip, #0
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 80025e6:	eb04 41ae 	add.w	r1, r4, lr, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 80025ea:	bfb8      	it	lt
 80025ec:	f50c 3cff 	addlt.w	ip, ip, #130560	@ 0x1fe00
          if((pHandle->DPWM_Mode == true) || (pHandle->SingleShuntTopology == true))
 80025f0:	f890 407f 	ldrb.w	r4, [r0, #127]	@ 0x7f
          pHandle->Sector = SECTOR_1;
 80025f4:	f04f 0200 	mov.w	r2, #0
          wTimePhB = wTimePhA + (wZ / 131072);
 80025f8:	eb01 43a3 	add.w	r3, r1, r3, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 80025fc:	bfb8      	it	lt
 80025fe:	f20c 1cff 	addwlt	ip, ip, #511	@ 0x1ff
          pHandle->Sector = SECTOR_1;
 8002602:	f880 207c 	strb.w	r2, [r0, #124]	@ 0x7c
          wTimePhC = wTimePhB - (wX / 131072);
 8002606:	eba3 426c 	sub.w	r2, r3, ip, asr #17
          if((pHandle->DPWM_Mode == true) || (pHandle->SingleShuntTopology == true))
 800260a:	2c00      	cmp	r4, #0
 800260c:	f040 80b5 	bne.w	800277a <PWMC_SetPhaseVoltage+0x2c2>
 8002610:	f890 5087 	ldrb.w	r5, [r0, #135]	@ 0x87
 8002614:	2d00      	cmp	r5, #0
 8002616:	f000 80c2 	beq.w	800279e <PWMC_SetPhaseVoltage+0x2e6>
 800261a:	f04f 0e02 	mov.w	lr, #2
 800261e:	f04f 0c01 	mov.w	ip, #1
 8002622:	e795      	b.n	8002550 <PWMC_SetPhaseVoltage+0x98>
      if (wZ < 0)
 8002624:	f1b3 3fff 	cmp.w	r3, #4294967295
        if(true == pHandle->SingleShuntTopology)
 8002628:	f890 5087 	ldrb.w	r5, [r0, #135]	@ 0x87
      if (wZ < 0)
 800262c:	db74      	blt.n	8002718 <PWMC_SetPhaseVoltage+0x260>
        if (wX <= 0)
 800262e:	f1bc 0f00 	cmp.w	ip, #0
 8002632:	dd25      	ble.n	8002680 <PWMC_SetPhaseVoltage+0x1c8>
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 8002634:	ebb1 010c 	subs.w	r1, r1, ip
 8002638:	bf44      	itt	mi
 800263a:	f501 317f 	addmi.w	r1, r1, #261120	@ 0x3fc00
 800263e:	f201 31ff 	addwmi	r1, r1, #1023	@ 0x3ff
          wTimePhC = wTimePhA - (wY / 131072);
 8002642:	2a00      	cmp	r2, #0
 8002644:	bfb8      	it	lt
 8002646:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 800264a:	eb04 41a1 	add.w	r1, r4, r1, asr #18
          wTimePhC = wTimePhA - (wY / 131072);
 800264e:	bfb8      	it	lt
 8002650:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
          pHandle->Sector = SECTOR_3;
 8002654:	2302      	movs	r3, #2
          wTimePhC = wTimePhA - (wY / 131072);
 8002656:	eba1 42a2 	sub.w	r2, r1, r2, asr #18
          pHandle->Sector = SECTOR_3;
 800265a:	f880 307c 	strb.w	r3, [r0, #124]	@ 0x7c
          wTimePhB = wTimePhC + (wX / 131072);
 800265e:	eb02 436c 	add.w	r3, r2, ip, asr #17
          if(true == pHandle->SingleShuntTopology)
 8002662:	2d00      	cmp	r5, #0
 8002664:	f040 8083 	bne.w	800276e <PWMC_SetPhaseVoltage+0x2b6>
          pHandle->lowDuty = (uint16_t)wTimePhB;
 8002668:	fa1f fe83 	uxth.w	lr, r3
          pHandle->midDuty = (uint16_t)wTimePhC;
 800266c:	fa1f fc82 	uxth.w	ip, r2
          pHandle->highDuty = (uint16_t)wTimePhA;
 8002670:	b28c      	uxth	r4, r1
 8002672:	e76d      	b.n	8002550 <PWMC_SetPhaseVoltage+0x98>
 8002674:	f04f 0e02 	mov.w	lr, #2
 8002678:	f04f 0c00 	mov.w	ip, #0
 800267c:	2401      	movs	r4, #1
 800267e:	e767      	b.n	8002550 <PWMC_SetPhaseVoltage+0x98>
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 8002680:	ebbc 0e0e 	subs.w	lr, ip, lr
 8002684:	bf44      	itt	mi
 8002686:	f50e 3e7f 	addmi.w	lr, lr, #261120	@ 0x3fc00
 800268a:	f20e 3eff 	addwmi	lr, lr, #1023	@ 0x3ff
          wTimePhB = wTimePhA + (wZ / 131072);
 800268e:	2b00      	cmp	r3, #0
 8002690:	bfb8      	it	lt
 8002692:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
          pHandle->Sector = SECTOR_4;
 8002696:	f04f 0203 	mov.w	r2, #3
          wTimePhB = wTimePhA + (wZ / 131072);
 800269a:	bfb8      	it	lt
 800269c:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
          pHandle->Sector = SECTOR_4;
 80026a0:	f880 207c 	strb.w	r2, [r0, #124]	@ 0x7c
          wTimePhC = wTimePhB - (wX / 131072);
 80026a4:	f1bc 0200 	subs.w	r2, ip, #0
 80026a8:	bfb8      	it	lt
 80026aa:	f502 32ff 	addlt.w	r2, r2, #130560	@ 0x1fe00
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 80026ae:	eb04 41ae 	add.w	r1, r4, lr, asr #18
          wTimePhB = wTimePhA + (wZ / 131072);
 80026b2:	eb01 43a3 	add.w	r3, r1, r3, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 80026b6:	bfb8      	it	lt
 80026b8:	f202 12ff 	addwlt	r2, r2, #511	@ 0x1ff
 80026bc:	eba3 4262 	sub.w	r2, r3, r2, asr #17
          if(true == pHandle->SingleShuntTopology)
 80026c0:	2d00      	cmp	r5, #0
 80026c2:	d066      	beq.n	8002792 <PWMC_SetPhaseVoltage+0x2da>
 80026c4:	f04f 0e00 	mov.w	lr, #0
 80026c8:	f04f 0c01 	mov.w	ip, #1
 80026cc:	2402      	movs	r4, #2
 80026ce:	e73f      	b.n	8002550 <PWMC_SetPhaseVoltage+0x98>
          wTimePhC = wTimePhA - (wY / 131072);
 80026d0:	2a00      	cmp	r2, #0
 80026d2:	bfb8      	it	lt
 80026d4:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00
          pHandle->Sector = SECTOR_6;
 80026d8:	f04f 0305 	mov.w	r3, #5
          wTimePhC = wTimePhA - (wY / 131072);
 80026dc:	bfb8      	it	lt
 80026de:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 80026e2:	eba1 010c 	sub.w	r1, r1, ip
          pHandle->Sector = SECTOR_6;
 80026e6:	f880 307c 	strb.w	r3, [r0, #124]	@ 0x7c
          wTimePhB = wTimePhC + (wX / 131072);
 80026ea:	f1bc 0300 	subs.w	r3, ip, #0
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 80026ee:	eb04 41a1 	add.w	r1, r4, r1, asr #18
          wTimePhB = wTimePhC + (wX / 131072);
 80026f2:	bfb8      	it	lt
 80026f4:	f503 33ff 	addlt.w	r3, r3, #130560	@ 0x1fe00
          if(true == pHandle->SingleShuntTopology)
 80026f8:	f890 4087 	ldrb.w	r4, [r0, #135]	@ 0x87
          wTimePhC = wTimePhA - (wY / 131072);
 80026fc:	eba1 42a2 	sub.w	r2, r1, r2, asr #18
          wTimePhB = wTimePhC + (wX / 131072);
 8002700:	bfb8      	it	lt
 8002702:	f203 13ff 	addwlt	r3, r3, #511	@ 0x1ff
 8002706:	eb02 4363 	add.w	r3, r2, r3, asr #17
          if(true == pHandle->SingleShuntTopology)
 800270a:	b3e4      	cbz	r4, 8002786 <PWMC_SetPhaseVoltage+0x2ce>
 800270c:	f04f 0e01 	mov.w	lr, #1
 8002710:	f04f 0c02 	mov.w	ip, #2
 8002714:	2400      	movs	r4, #0
 8002716:	e71b      	b.n	8002550 <PWMC_SetPhaseVoltage+0x98>
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8002718:	ebb1 010e 	subs.w	r1, r1, lr
 800271c:	bf44      	itt	mi
 800271e:	f501 317f 	addmi.w	r1, r1, #261120	@ 0x3fc00
 8002722:	f201 31ff 	addwmi	r1, r1, #1023	@ 0x3ff
        wTimePhB = wTimePhA + (wZ / 131072);
 8002726:	2b00      	cmp	r3, #0
 8002728:	bfbc      	itt	lt
 800272a:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
 800272e:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
        wTimePhC = wTimePhA - (wY / 131072) ;
 8002732:	2a00      	cmp	r2, #0
 8002734:	bfb8      	it	lt
 8002736:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 800273a:	eb04 41a1 	add.w	r1, r4, r1, asr #18
        pHandle->Sector = SECTOR_5;
 800273e:	f04f 0c04 	mov.w	ip, #4
        wTimePhC = wTimePhA - (wY / 131072) ;
 8002742:	bfb8      	it	lt
 8002744:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
        pHandle->Sector = SECTOR_5;
 8002748:	f880 c07c 	strb.w	ip, [r0, #124]	@ 0x7c
        wTimePhB = wTimePhA + (wZ / 131072);
 800274c:	eb01 43a3 	add.w	r3, r1, r3, asr #18
        wTimePhC = wTimePhA - (wY / 131072) ;
 8002750:	eba1 42a2 	sub.w	r2, r1, r2, asr #18
        if(true == pHandle->SingleShuntTopology)
 8002754:	b92d      	cbnz	r5, 8002762 <PWMC_SetPhaseVoltage+0x2aa>
          pHandle->lowDuty = (uint16_t)wTimePhC;
 8002756:	fa1f fe82 	uxth.w	lr, r2
          pHandle->midDuty = (uint16_t)wTimePhA;
 800275a:	fa1f fc81 	uxth.w	ip, r1
          pHandle->highDuty = (uint16_t)wTimePhB;
 800275e:	b29c      	uxth	r4, r3
 8002760:	e6f6      	b.n	8002550 <PWMC_SetPhaseVoltage+0x98>
 8002762:	f04f 0e01 	mov.w	lr, #1
 8002766:	f04f 0c00 	mov.w	ip, #0
 800276a:	2402      	movs	r4, #2
 800276c:	e6f0      	b.n	8002550 <PWMC_SetPhaseVoltage+0x98>
 800276e:	f04f 0e00 	mov.w	lr, #0
 8002772:	f04f 0c02 	mov.w	ip, #2
 8002776:	2401      	movs	r4, #1
 8002778:	e6ea      	b.n	8002550 <PWMC_SetPhaseVoltage+0x98>
 800277a:	f04f 0e02 	mov.w	lr, #2
 800277e:	f04f 0c01 	mov.w	ip, #1
 8002782:	2400      	movs	r4, #0
 8002784:	e6e4      	b.n	8002550 <PWMC_SetPhaseVoltage+0x98>
            pHandle->lowDuty = (uint16_t)wTimePhA;
 8002786:	fa1f fe81 	uxth.w	lr, r1
            pHandle->midDuty = (uint16_t)wTimePhC;
 800278a:	fa1f fc82 	uxth.w	ip, r2
            pHandle->highDuty = (uint16_t)wTimePhB;
 800278e:	b29c      	uxth	r4, r3
 8002790:	e6de      	b.n	8002550 <PWMC_SetPhaseVoltage+0x98>
          pHandle->lowDuty = (uint16_t)wTimePhC;
 8002792:	fa1f fe82 	uxth.w	lr, r2
          pHandle->midDuty = (uint16_t)wTimePhB;
 8002796:	fa1f fc83 	uxth.w	ip, r3
          pHandle->highDuty = (uint16_t)wTimePhA;
 800279a:	b28c      	uxth	r4, r1
 800279c:	e6d8      	b.n	8002550 <PWMC_SetPhaseVoltage+0x98>
            pHandle->lowDuty = (uint16_t)wTimePhA;
 800279e:	fa1f fe81 	uxth.w	lr, r1
            pHandle->midDuty = (uint16_t)wTimePhB;
 80027a2:	fa1f fc83 	uxth.w	ip, r3
            pHandle->highDuty = (uint16_t)wTimePhC;
 80027a6:	b294      	uxth	r4, r2
 80027a8:	e6d2      	b.n	8002550 <PWMC_SetPhaseVoltage+0x98>
 80027aa:	bf00      	nop

080027ac <PWMC_SwitchOffPWM>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOffPwm(pHandle);
 80027ac:	6843      	ldr	r3, [r0, #4]
 80027ae:	4718      	bx	r3

080027b0 <PWMC_SwitchOnPWM>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOnPwm(pHandle);
 80027b0:	6883      	ldr	r3, [r0, #8]
 80027b2:	4718      	bx	r3

080027b4 <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, **false** if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr(PWMC_Handle_t *pHandle, CRCAction_t action)
{
 80027b4:	b510      	push	{r4, lr}
 80027b6:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    if (CRC_START == action)
 80027b8:	b179      	cbz	r1, 80027da <PWMC_CurrentReadingCalibr+0x26>
    {
      PWMC_SwitchOffPWM(pHandle);
      pHandle->pFctCurrReadingCalib(pHandle);
      retVal = true;
    }
    else if (CRC_EXEC == action)
 80027ba:	2901      	cmp	r1, #1
 80027bc:	d001      	beq.n	80027c2 <PWMC_CurrentReadingCalibr+0xe>
  bool retVal = false;
 80027be:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (retVal);
}
 80027c0:	bd10      	pop	{r4, pc}
      if (pHandle->OffCalibrWaitTimeCounter > 0u)
 80027c2:	f8b0 3060 	ldrh.w	r3, [r0, #96]	@ 0x60
 80027c6:	b16b      	cbz	r3, 80027e4 <PWMC_CurrentReadingCalibr+0x30>
        pHandle->OffCalibrWaitTimeCounter--;
 80027c8:	3b01      	subs	r3, #1
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
        if (0U == pHandle->OffCalibrWaitTimeCounter)
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d1f4      	bne.n	80027be <PWMC_CurrentReadingCalibr+0xa>
          pHandle->pFctCurrReadingCalib(pHandle);
 80027d4:	68c3      	ldr	r3, [r0, #12]
 80027d6:	4798      	blx	r3
          retVal = true;
 80027d8:	e004      	b.n	80027e4 <PWMC_CurrentReadingCalibr+0x30>
      PWMC_SwitchOffPWM(pHandle);
 80027da:	f7ff ffe7 	bl	80027ac <PWMC_SwitchOffPWM>
      pHandle->pFctCurrReadingCalib(pHandle);
 80027de:	68e3      	ldr	r3, [r4, #12]
 80027e0:	4620      	mov	r0, r4
 80027e2:	4798      	blx	r3
      retVal = true;
 80027e4:	2001      	movs	r0, #1
}
 80027e6:	bd10      	pop	{r4, pc}

080027e8 <PWMC_OVP_Handler>:
    tempPointer = MC_NULL;
  }
  else
  {
#endif
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 80027e8:	6c4a      	ldr	r2, [r1, #68]	@ 0x44
{
 80027ea:	4603      	mov	r3, r0
    pHandle->OverVoltageFlag = true;
 80027ec:	f04f 0c01 	mov.w	ip, #1
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 80027f0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80027f4:	644a      	str	r2, [r1, #68]	@ 0x44
    tempPointer = &(pHandle->Motor);
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (tempPointer);
}
 80027f6:	307a      	adds	r0, #122	@ 0x7a
    pHandle->OverVoltageFlag = true;
 80027f8:	f883 c083 	strb.w	ip, [r3, #131]	@ 0x83
    pHandle->BrakeActionLock = true;
 80027fc:	f883 c085 	strb.w	ip, [r3, #133]	@ 0x85
}
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop

08002804 <PWMC_IsFaultOccurred>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  * @retval uint16_t Returns #MC_OVER_CURR if an overcurrent has been
  *                  detected since last method call, #MC_NO_FAULTS otherwise.
  */
__weak uint16_t PWMC_IsFaultOccurred(PWMC_Handle_t *pHandle)
{
 8002804:	4603      	mov	r3, r0
  uint16_t retVal = MC_NO_FAULTS;

  if (true == pHandle->OverVoltageFlag)
 8002806:	f890 0083 	ldrb.w	r0, [r0, #131]	@ 0x83
 800280a:	b1a8      	cbz	r0, 8002838 <PWMC_IsFaultOccurred+0x34>
  {
    retVal = MC_OVER_VOLT;
    pHandle->OverVoltageFlag = false;
 800280c:	2200      	movs	r2, #0
 800280e:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
 8002812:	2142      	movs	r1, #66	@ 0x42
    retVal = MC_OVER_VOLT;
 8002814:	2002      	movs	r0, #2
  else
  {
    /* Nothing to do */
  }

  if (true == pHandle->OverCurrentFlag)
 8002816:	f893 2082 	ldrb.w	r2, [r3, #130]	@ 0x82
 800281a:	b11a      	cbz	r2, 8002824 <PWMC_IsFaultOccurred+0x20>
  {
    retVal |= MC_OVER_CURR;
    pHandle->OverCurrentFlag = false;
 800281c:	2200      	movs	r2, #0
 800281e:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
    retVal |= MC_OVER_CURR;
 8002822:	4608      	mov	r0, r1
  else
  {
    /* Nothing to do */
  }

  if (true == pHandle->driverProtectionFlag)
 8002824:	f893 2084 	ldrb.w	r2, [r3, #132]	@ 0x84
 8002828:	b12a      	cbz	r2, 8002836 <PWMC_IsFaultOccurred+0x32>
  {
    retVal |= MC_DP_FAULT;
 800282a:	f440 6080 	orr.w	r0, r0, #1024	@ 0x400
    pHandle->driverProtectionFlag = false;
 800282e:	2200      	movs	r2, #0
    retVal |= MC_DP_FAULT;
 8002830:	b280      	uxth	r0, r0
    pHandle->driverProtectionFlag = false;
 8002832:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
  {
    /* Nothing to do */
  }

  return (retVal);
}
 8002836:	4770      	bx	lr
 8002838:	2140      	movs	r1, #64	@ 0x40
 800283a:	e7ec      	b.n	8002816 <PWMC_IsFaultOccurred+0x12>

0800283c <RI_SetRegisterGlobal>:
#include "mcp_config.h"
#include "mcpa.h"
#include "mc_configuration_registers.h"

uint8_t RI_SetRegisterGlobal(uint16_t regID, uint8_t typeID, uint8_t *data, uint16_t *size, int16_t dataAvailable)
{
 800283c:	b410      	push	{r4}
  uint8_t retVal = MCP_CMD_OK;
  switch(typeID)
 800283e:	3908      	subs	r1, #8
{
 8002840:	f9bd c004 	ldrsh.w	ip, [sp, #4]
  switch(typeID)
 8002844:	2920      	cmp	r1, #32
 8002846:	d812      	bhi.n	800286e <RI_SetRegisterGlobal+0x32>
 8002848:	e8df f001 	tbb	[pc, r1]
 800284c:	11111117 	.word	0x11111117
 8002850:	11111111 	.word	0x11111111
 8002854:	11111121 	.word	0x11111121
 8002858:	11111111 	.word	0x11111111
 800285c:	11111133 	.word	0x11111133
 8002860:	11111111 	.word	0x11111111
 8002864:	1111113d 	.word	0x1111113d
 8002868:	11111111 	.word	0x11111111
 800286c:	51          	.byte	0x51
 800286d:	00          	.byte	0x00
    }

    default:
    {
      retVal = MCP_ERROR_BAD_DATA_TYPE;
      *size =0; /* From this point we are not able anymore to decode the RX buffer */
 800286e:	2200      	movs	r2, #0
 8002870:	801a      	strh	r2, [r3, #0]
      retVal = MCP_ERROR_BAD_DATA_TYPE;
 8002872:	2007      	movs	r0, #7
      break;
    }
  }
  return (retVal);
}
 8002874:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002878:	4770      	bx	lr
          retVal = MCP_ERROR_RO_REG;
 800287a:	2848      	cmp	r0, #72	@ 0x48
      *size = 1;
 800287c:	f04f 0201 	mov.w	r2, #1
          retVal = MCP_ERROR_RO_REG;
 8002880:	bf14      	ite	ne
 8002882:	2005      	movne	r0, #5
 8002884:	2004      	moveq	r0, #4
}
 8002886:	f85d 4b04 	ldr.w	r4, [sp], #4
      *size = 1;
 800288a:	801a      	strh	r2, [r3, #0]
}
 800288c:	4770      	bx	lr
      switch (regID)
 800288e:	f5b0 6f65 	cmp.w	r0, #3664	@ 0xe50
 8002892:	d04e      	beq.n	8002932 <RI_SetRegisterGlobal+0xf6>
 8002894:	d93e      	bls.n	8002914 <RI_SetRegisterGlobal+0xd8>
 8002896:	f5b0 6f69 	cmp.w	r0, #3728	@ 0xe90
 800289a:	d04a      	beq.n	8002932 <RI_SetRegisterGlobal+0xf6>
 800289c:	f641 3258 	movw	r2, #7000	@ 0x1b58
          retVal = MCP_ERROR_UNKNOWN_REG;
 80028a0:	4290      	cmp	r0, r2
 80028a2:	bf0c      	ite	eq
 80028a4:	2004      	moveq	r0, #4
 80028a6:	2005      	movne	r0, #5
      *size = 2;
 80028a8:	2202      	movs	r2, #2
}
 80028aa:	f85d 4b04 	ldr.w	r4, [sp], #4
      *size = 2;
 80028ae:	801a      	strh	r2, [r3, #0]
}
 80028b0:	4770      	bx	lr
          retVal = MCP_ERROR_RO_REG;
 80028b2:	2818      	cmp	r0, #24
      *size = 4;
 80028b4:	f04f 0204 	mov.w	r2, #4
          retVal = MCP_ERROR_RO_REG;
 80028b8:	bf14      	ite	ne
 80028ba:	2005      	movne	r0, #5
 80028bc:	4610      	moveq	r0, r2
}
 80028be:	f85d 4b04 	ldr.w	r4, [sp], #4
      *size = 4;
 80028c2:	801a      	strh	r2, [r3, #0]
}
 80028c4:	4770      	bx	lr
uint8_t RI_MovString(const char_t *srcString, char_t *destString, uint16_t *size, int16_t maxSize)
{
  uint8_t retVal = MCP_CMD_OK;
  const char_t *tempsrcString = srcString;
  char_t *tempdestString = destString;
  *size= 1U ; /* /0 is the min String size */
 80028c6:	2101      	movs	r1, #1
 80028c8:	8019      	strh	r1, [r3, #0]

  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80028ca:	f992 0000 	ldrsb.w	r0, [r2]
 80028ce:	b348      	cbz	r0, 8002924 <RI_SetRegisterGlobal+0xe8>
 80028d0:	fa1f f08c 	uxth.w	r0, ip
 80028d4:	e003      	b.n	80028de <RI_SetRegisterGlobal+0xa2>
  {
    *tempdestString = *tempsrcString;
    tempdestString++;
    tempsrcString++;
    *size = *size + 1U;
 80028d6:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80028d8:	f912 4f01 	ldrsb.w	r4, [r2, #1]!
 80028dc:	b314      	cbz	r4, 8002924 <RI_SetRegisterGlobal+0xe8>
    *size = *size + 1U;
 80028de:	f101 0c01 	add.w	ip, r1, #1
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80028e2:	4281      	cmp	r1, r0
    *size = *size + 1U;
 80028e4:	fa1f f18c 	uxth.w	r1, ip
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80028e8:	d3f5      	bcc.n	80028d6 <RI_SetRegisterGlobal+0x9a>
      retVal = MCP_ERROR_RO_REG;
 80028ea:	2004      	movs	r0, #4
 80028ec:	e7c2      	b.n	8002874 <RI_SetRegisterGlobal+0x38>
      *size = rawSize + 2U;
 80028ee:	8812      	ldrh	r2, [r2, #0]
 80028f0:	3202      	adds	r2, #2
 80028f2:	b292      	uxth	r2, r2
      if (*size > (uint16_t)dataAvailable)
 80028f4:	fa1f fc8c 	uxth.w	ip, ip
 80028f8:	4562      	cmp	r2, ip
      *size = rawSize + 2U;
 80028fa:	801a      	strh	r2, [r3, #0]
      if (*size > (uint16_t)dataAvailable)
 80028fc:	d81b      	bhi.n	8002936 <RI_SetRegisterGlobal+0xfa>
        switch (regID)
 80028fe:	28a8      	cmp	r0, #168	@ 0xa8
 8002900:	d0f3      	beq.n	80028ea <RI_SetRegisterGlobal+0xae>
 8002902:	d813      	bhi.n	800292c <RI_SetRegisterGlobal+0xf0>
 8002904:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 8002908:	2828      	cmp	r0, #40	@ 0x28
 800290a:	d0ee      	beq.n	80028ea <RI_SetRegisterGlobal+0xae>
 800290c:	2005      	movs	r0, #5
}
 800290e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002912:	4770      	bx	lr
 8002914:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
          retVal = MCP_ERROR_UNKNOWN_REG;
 8002918:	f5b0 6fb2 	cmp.w	r0, #1424	@ 0x590
 800291c:	bf0c      	ite	eq
 800291e:	2004      	moveq	r0, #4
 8002920:	2005      	movne	r0, #5
 8002922:	e7c1      	b.n	80028a8 <RI_SetRegisterGlobal+0x6c>
  { /* Last string char must be 0 */
    retVal = MCP_ERROR_STRING_FORMAT;
  }
  else
  {
    *tempdestString = (int8_t)0;
 8002924:	2300      	movs	r3, #0
 8002926:	7013      	strb	r3, [r2, #0]
      retVal = MCP_ERROR_RO_REG;
 8002928:	2004      	movs	r0, #4
 800292a:	e7a3      	b.n	8002874 <RI_SetRegisterGlobal+0x38>
 800292c:	28e8      	cmp	r0, #232	@ 0xe8
 800292e:	d1ed      	bne.n	800290c <RI_SetRegisterGlobal+0xd0>
 8002930:	e7db      	b.n	80028ea <RI_SetRegisterGlobal+0xae>
  uint8_t retVal = MCP_CMD_OK;
 8002932:	2000      	movs	r0, #0
 8002934:	e7b8      	b.n	80028a8 <RI_SetRegisterGlobal+0x6c>
        *size = 0;
 8002936:	2200      	movs	r2, #0
 8002938:	801a      	strh	r2, [r3, #0]
        retVal = MCP_ERROR_BAD_RAW_FORMAT; /* This error stop the parsing of the CMD buffer */
 800293a:	200a      	movs	r0, #10
 800293c:	e79a      	b.n	8002874 <RI_SetRegisterGlobal+0x38>
 800293e:	bf00      	nop

08002940 <RI_SetRegisterMotor1>:
{
 8002940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002944:	b084      	sub	sp, #16
  switch(typeID)
 8002946:	3908      	subs	r1, #8
{
 8002948:	f9bd c028 	ldrsh.w	ip, [sp, #40]	@ 0x28
 800294c:	4615      	mov	r5, r2
 800294e:	461c      	mov	r4, r3
  switch(typeID)
 8002950:	2920      	cmp	r1, #32
 8002952:	d812      	bhi.n	800297a <RI_SetRegisterMotor1+0x3a>
 8002954:	e8df f001 	tbb	[pc, r1]
 8002958:	11111117 	.word	0x11111117
 800295c:	11111111 	.word	0x11111111
 8002960:	11111125 	.word	0x11111125
 8002964:	11111111 	.word	0x11111111
 8002968:	1111115f 	.word	0x1111115f
 800296c:	11111111 	.word	0x11111111
 8002970:	11111148 	.word	0x11111148
 8002974:	11111111 	.word	0x11111111
 8002978:	7a          	.byte	0x7a
 8002979:	00          	.byte	0x00
      *size =0; /* From this point we are not able anymore to decode the RX buffer */
 800297a:	2300      	movs	r3, #0
 800297c:	8023      	strh	r3, [r4, #0]
      retVal = MCP_ERROR_BAD_DATA_TYPE;
 800297e:	2007      	movs	r0, #7
}
 8002980:	b004      	add	sp, #16
 8002982:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      switch (regID)
 8002986:	2888      	cmp	r0, #136	@ 0x88
 8002988:	f000 8243 	beq.w	8002e12 <RI_SetRegisterMotor1+0x4d2>
 800298c:	f020 0080 	bic.w	r0, r0, #128	@ 0x80
 8002990:	2848      	cmp	r0, #72	@ 0x48
 8002992:	bf0c      	ite	eq
 8002994:	2004      	moveq	r0, #4
 8002996:	2005      	movne	r0, #5
      *size = 1;
 8002998:	2301      	movs	r3, #1
 800299a:	8023      	strh	r3, [r4, #0]
}
 800299c:	b004      	add	sp, #16
 800299e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      uint16_t regdata16 = *(uint16_t *)data; //cstat !MISRAC2012-Rule-11.3
 80029a2:	f5b0 6fb2 	cmp.w	r0, #1424	@ 0x590
 80029a6:	8815      	ldrh	r5, [r2, #0]
      switch (regID)
 80029a8:	d071      	beq.n	8002a8e <RI_SetRegisterMotor1+0x14e>
 80029aa:	d87d      	bhi.n	8002aa8 <RI_SetRegisterMotor1+0x168>
 80029ac:	f5b0 7f34 	cmp.w	r0, #720	@ 0x2d0
 80029b0:	f000 8297 	beq.w	8002ee2 <RI_SetRegisterMotor1+0x5a2>
 80029b4:	f240 80a8 	bls.w	8002b08 <RI_SetRegisterMotor1+0x1c8>
 80029b8:	f5b0 7f74 	cmp.w	r0, #976	@ 0x3d0
 80029bc:	f000 82c6 	beq.w	8002f4c <RI_SetRegisterMotor1+0x60c>
 80029c0:	f240 808e 	bls.w	8002ae0 <RI_SetRegisterMotor1+0x1a0>
 80029c4:	f5b0 6f8a 	cmp.w	r0, #1104	@ 0x450
 80029c8:	f000 82e9 	beq.w	8002f9e <RI_SetRegisterMotor1+0x65e>
 80029cc:	f5b0 6f92 	cmp.w	r0, #1168	@ 0x490
 80029d0:	f040 81d5 	bne.w	8002d7e <RI_SetRegisterMotor1+0x43e>
          PID_SetKP (&(&STO_PLL_M1)->PIRegulator, (int16_t)regdata16);
 80029d4:	48a5      	ldr	r0, [pc, #660]	@ (8002c6c <RI_SetRegisterMotor1+0x32c>)
 80029d6:	b229      	sxth	r1, r5
 80029d8:	f003 fb9a 	bl	8006110 <PID_SetKP>
  uint8_t retVal = MCP_CMD_OK;
 80029dc:	2000      	movs	r0, #0
      *size = 2;
 80029de:	2302      	movs	r3, #2
 80029e0:	8023      	strh	r3, [r4, #0]
}
 80029e2:	b004      	add	sp, #16
 80029e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  *size= 1U ; /* /0 is the min String size */
 80029e8:	2001      	movs	r0, #1
 80029ea:	8020      	strh	r0, [r4, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80029ec:	f992 3000 	ldrsb.w	r3, [r2]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	f000 81f1 	beq.w	8002dd8 <RI_SetRegisterMotor1+0x498>
 80029f6:	fa1f f38c 	uxth.w	r3, ip
 80029fa:	e005      	b.n	8002a08 <RI_SetRegisterMotor1+0xc8>
    *size = *size + 1U;
 80029fc:	8020      	strh	r0, [r4, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80029fe:	f915 1f01 	ldrsb.w	r1, [r5, #1]!
 8002a02:	2900      	cmp	r1, #0
 8002a04:	f000 81e8 	beq.w	8002dd8 <RI_SetRegisterMotor1+0x498>
    *size = *size + 1U;
 8002a08:	f100 0c01 	add.w	ip, r0, #1
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002a0c:	4283      	cmp	r3, r0
    *size = *size + 1U;
 8002a0e:	fa1f f08c 	uxth.w	r0, ip
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002a12:	d8f3      	bhi.n	80029fc <RI_SetRegisterMotor1+0xbc>
 8002a14:	e1e2      	b.n	8002ddc <RI_SetRegisterMotor1+0x49c>
      uint32_t regdata32 = *(uint32_t *)data; //cstat !MISRAC2012-Rule-11.3
 8002a16:	f5b0 7fec 	cmp.w	r0, #472	@ 0x1d8
 8002a1a:	6813      	ldr	r3, [r2, #0]
      switch (regID)
 8002a1c:	f000 8218 	beq.w	8002e50 <RI_SetRegisterMotor1+0x510>
 8002a20:	f200 81c5 	bhi.w	8002dae <RI_SetRegisterMotor1+0x46e>
 8002a24:	2898      	cmp	r0, #152	@ 0x98
 8002a26:	f000 8204 	beq.w	8002e32 <RI_SetRegisterMotor1+0x4f2>
 8002a2a:	f240 81b9 	bls.w	8002da0 <RI_SetRegisterMotor1+0x460>
 8002a2e:	f5b0 7fac 	cmp.w	r0, #344	@ 0x158
 8002a32:	f000 81e8 	beq.w	8002e06 <RI_SetRegisterMotor1+0x4c6>
 8002a36:	d92e      	bls.n	8002a96 <RI_SetRegisterMotor1+0x156>
 8002a38:	f5b0 7fcc 	cmp.w	r0, #408	@ 0x198
 8002a3c:	bf0c      	ite	eq
 8002a3e:	2004      	moveq	r0, #4
 8002a40:	2005      	movne	r0, #5
      *size = 4;
 8002a42:	2304      	movs	r3, #4
 8002a44:	8023      	strh	r3, [r4, #0]
}
 8002a46:	b004      	add	sp, #16
 8002a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      uint16_t rawSize = *(uint16_t *)data; //cstat !MISRAC2012-Rule-11.3
 8002a4c:	8811      	ldrh	r1, [r2, #0]
      *size = rawSize + 2U;
 8002a4e:	1c8a      	adds	r2, r1, #2
 8002a50:	b292      	uxth	r2, r2
      if (*size > (uint16_t)dataAvailable)
 8002a52:	fa1f f38c 	uxth.w	r3, ip
 8002a56:	429a      	cmp	r2, r3
      *size = rawSize + 2U;
 8002a58:	8022      	strh	r2, [r4, #0]
      if (*size > (uint16_t)dataAvailable)
 8002a5a:	f200 81d6 	bhi.w	8002e0a <RI_SetRegisterMotor1+0x4ca>
        switch (regID)
 8002a5e:	f5b0 7f0a 	cmp.w	r0, #552	@ 0x228
 8002a62:	f000 81f8 	beq.w	8002e56 <RI_SetRegisterMotor1+0x516>
 8002a66:	f200 81bb 	bhi.w	8002de0 <RI_SetRegisterMotor1+0x4a0>
 8002a6a:	f5b0 7fd4 	cmp.w	r0, #424	@ 0x1a8
 8002a6e:	f000 8219 	beq.w	8002ea4 <RI_SetRegisterMotor1+0x564>
 8002a72:	f240 81c2 	bls.w	8002dfa <RI_SetRegisterMotor1+0x4ba>
 8002a76:	f5b0 7ff4 	cmp.w	r0, #488	@ 0x1e8
 8002a7a:	f040 81a9 	bne.w	8002dd0 <RI_SetRegisterMotor1+0x490>
            MCI_ExecTorqueRamp(pMCIN, (int16_t)torque, duration);
 8002a7e:	88ea      	ldrh	r2, [r5, #6]
 8002a80:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8002a84:	487a      	ldr	r0, [pc, #488]	@ (8002c70 <RI_SetRegisterMotor1+0x330>)
 8002a86:	f7fe fadb 	bl	8001040 <MCI_ExecTorqueRamp>
  uint8_t retVal = MCP_CMD_OK;
 8002a8a:	2000      	movs	r0, #0
 8002a8c:	e778      	b.n	8002980 <RI_SetRegisterMotor1+0x40>
      *size = 2;
 8002a8e:	2302      	movs	r3, #2
 8002a90:	2004      	movs	r0, #4
 8002a92:	8023      	strh	r3, [r4, #0]
      break;
 8002a94:	e7a5      	b.n	80029e2 <RI_SetRegisterMotor1+0xa2>
 8002a96:	28d8      	cmp	r0, #216	@ 0xd8
 8002a98:	f000 81b5 	beq.w	8002e06 <RI_SetRegisterMotor1+0x4c6>
 8002a9c:	f5b0 7f8c 	cmp.w	r0, #280	@ 0x118
 8002aa0:	bf0c      	ite	eq
 8002aa2:	2004      	moveq	r0, #4
 8002aa4:	2005      	movne	r0, #5
 8002aa6:	e7cc      	b.n	8002a42 <RI_SetRegisterMotor1+0x102>
 8002aa8:	f241 5310 	movw	r3, #5392	@ 0x1510
 8002aac:	4298      	cmp	r0, r3
 8002aae:	f000 8271 	beq.w	8002f94 <RI_SetRegisterMotor1+0x654>
 8002ab2:	f240 8094 	bls.w	8002bde <RI_SetRegisterMotor1+0x29e>
 8002ab6:	f241 6310 	movw	r3, #5648	@ 0x1610
 8002aba:	4298      	cmp	r0, r3
 8002abc:	f000 8241 	beq.w	8002f42 <RI_SetRegisterMotor1+0x602>
 8002ac0:	d97f      	bls.n	8002bc2 <RI_SetRegisterMotor1+0x282>
 8002ac2:	f641 03d0 	movw	r3, #6352	@ 0x18d0
 8002ac6:	4298      	cmp	r0, r3
 8002ac8:	f000 822c 	beq.w	8002f24 <RI_SetRegisterMotor1+0x5e4>
 8002acc:	d970      	bls.n	8002bb0 <RI_SetRegisterMotor1+0x270>
 8002ace:	f641 1310 	movw	r3, #6416	@ 0x1910
 8002ad2:	4298      	cmp	r0, r3
 8002ad4:	d129      	bne.n	8002b2a <RI_SetRegisterMotor1+0x1ea>
          PID_SetKPDivisorPOW2 (&(&STO_PLL_M1)->PIRegulator,regdata16);
 8002ad6:	4865      	ldr	r0, [pc, #404]	@ (8002c6c <RI_SetRegisterMotor1+0x32c>)
 8002ad8:	4629      	mov	r1, r5
 8002ada:	f003 fb29 	bl	8006130 <PID_SetKPDivisorPOW2>
          break;
 8002ade:	e77d      	b.n	80029dc <RI_SetRegisterMotor1+0x9c>
 8002ae0:	f5b0 7f54 	cmp.w	r0, #848	@ 0x350
 8002ae4:	f000 8202 	beq.w	8002eec <RI_SetRegisterMotor1+0x5ac>
 8002ae8:	f5b0 7f64 	cmp.w	r0, #912	@ 0x390
 8002aec:	d151      	bne.n	8002b92 <RI_SetRegisterMotor1+0x252>
          STO_PLL_GetObserverGains(&STO_PLL_M1, &hC1, &hC2);
 8002aee:	aa01      	add	r2, sp, #4
 8002af0:	f10d 0102 	add.w	r1, sp, #2
 8002af4:	485f      	ldr	r0, [pc, #380]	@ (8002c74 <RI_SetRegisterMotor1+0x334>)
 8002af6:	f005 fa49 	bl	8007f8c <STO_PLL_GetObserverGains>
          STO_PLL_SetObserverGains(&STO_PLL_M1, hC1, (int16_t)regdata16);
 8002afa:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 8002afe:	485d      	ldr	r0, [pc, #372]	@ (8002c74 <RI_SetRegisterMotor1+0x334>)
 8002b00:	b22a      	sxth	r2, r5
 8002b02:	f005 fa4b 	bl	8007f9c <STO_PLL_SetObserverGains>
          break;
 8002b06:	e769      	b.n	80029dc <RI_SetRegisterMotor1+0x9c>
 8002b08:	f5b0 7fc8 	cmp.w	r0, #400	@ 0x190
 8002b0c:	f000 8214 	beq.w	8002f38 <RI_SetRegisterMotor1+0x5f8>
 8002b10:	d934      	bls.n	8002b7c <RI_SetRegisterMotor1+0x23c>
 8002b12:	f5b0 7f04 	cmp.w	r0, #528	@ 0x210
 8002b16:	f000 81f6 	beq.w	8002f06 <RI_SetRegisterMotor1+0x5c6>
 8002b1a:	f5b0 7f24 	cmp.w	r0, #656	@ 0x290
 8002b1e:	d118      	bne.n	8002b52 <RI_SetRegisterMotor1+0x212>
          PID_SetKP(&PIDIdHandle_M1, (int16_t)regdata16);
 8002b20:	4855      	ldr	r0, [pc, #340]	@ (8002c78 <RI_SetRegisterMotor1+0x338>)
 8002b22:	b229      	sxth	r1, r5
 8002b24:	f003 faf4 	bl	8006110 <PID_SetKP>
          break;
 8002b28:	e758      	b.n	80029dc <RI_SetRegisterMotor1+0x9c>
 8002b2a:	f641 130f 	movw	r3, #6415	@ 0x190f
 8002b2e:	4298      	cmp	r0, r3
 8002b30:	d90d      	bls.n	8002b4e <RI_SetRegisterMotor1+0x20e>
 8002b32:	f641 3358 	movw	r3, #7000	@ 0x1b58
 8002b36:	4298      	cmp	r0, r3
 8002b38:	d0a9      	beq.n	8002a8e <RI_SetRegisterMotor1+0x14e>
 8002b3a:	d912      	bls.n	8002b62 <RI_SetRegisterMotor1+0x222>
 8002b3c:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 8002b40:	f641 3390 	movw	r3, #7056	@ 0x1b90
          retVal = MCP_ERROR_UNKNOWN_REG;
 8002b44:	4298      	cmp	r0, r3
 8002b46:	bf0c      	ite	eq
 8002b48:	2004      	moveq	r0, #4
 8002b4a:	2005      	movne	r0, #5
 8002b4c:	e747      	b.n	80029de <RI_SetRegisterMotor1+0x9e>
 8002b4e:	2005      	movs	r0, #5
 8002b50:	e745      	b.n	80029de <RI_SetRegisterMotor1+0x9e>
 8002b52:	f5b0 7fe8 	cmp.w	r0, #464	@ 0x1d0
 8002b56:	d1fa      	bne.n	8002b4e <RI_SetRegisterMotor1+0x20e>
          PID_SetKI(&PIDIqHandle_M1, (int16_t)regdata16);
 8002b58:	4848      	ldr	r0, [pc, #288]	@ (8002c7c <RI_SetRegisterMotor1+0x33c>)
 8002b5a:	b229      	sxth	r1, r5
 8002b5c:	f003 fada 	bl	8006114 <PID_SetKI>
          break;
 8002b60:	e73c      	b.n	80029dc <RI_SetRegisterMotor1+0x9c>
 8002b62:	f020 0340 	bic.w	r3, r0, #64	@ 0x40
 8002b66:	f641 3210 	movw	r2, #6928	@ 0x1b10
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d08f      	beq.n	8002a8e <RI_SetRegisterMotor1+0x14e>
 8002b6e:	f641 2390 	movw	r3, #6800	@ 0x1a90
          retVal = MCP_ERROR_UNKNOWN_REG;
 8002b72:	4298      	cmp	r0, r3
 8002b74:	bf0c      	ite	eq
 8002b76:	2004      	moveq	r0, #4
 8002b78:	2005      	movne	r0, #5
 8002b7a:	e730      	b.n	80029de <RI_SetRegisterMotor1+0x9e>
 8002b7c:	28d0      	cmp	r0, #208	@ 0xd0
 8002b7e:	f000 81d6 	beq.w	8002f2e <RI_SetRegisterMotor1+0x5ee>
 8002b82:	f5b0 7f88 	cmp.w	r0, #272	@ 0x110
 8002b86:	d10c      	bne.n	8002ba2 <RI_SetRegisterMotor1+0x262>
          PID_SetKD(&PIDSpeedHandle_M1, (int16_t)regdata16);
 8002b88:	483d      	ldr	r0, [pc, #244]	@ (8002c80 <RI_SetRegisterMotor1+0x340>)
 8002b8a:	b229      	sxth	r1, r5
 8002b8c:	f003 faf2 	bl	8006174 <PID_SetKD>
          break;
 8002b90:	e724      	b.n	80029dc <RI_SetRegisterMotor1+0x9c>
 8002b92:	f5b0 7f44 	cmp.w	r0, #784	@ 0x310
 8002b96:	d1da      	bne.n	8002b4e <RI_SetRegisterMotor1+0x20e>
          PID_SetKD(&PIDIdHandle_M1, (int16_t)regdata16);
 8002b98:	4837      	ldr	r0, [pc, #220]	@ (8002c78 <RI_SetRegisterMotor1+0x338>)
 8002b9a:	b229      	sxth	r1, r5
 8002b9c:	f003 faea 	bl	8006174 <PID_SetKD>
          break;
 8002ba0:	e71c      	b.n	80029dc <RI_SetRegisterMotor1+0x9c>
 8002ba2:	2890      	cmp	r0, #144	@ 0x90
 8002ba4:	d1d3      	bne.n	8002b4e <RI_SetRegisterMotor1+0x20e>
          PID_SetKP(&PIDSpeedHandle_M1, (int16_t)regdata16);
 8002ba6:	4836      	ldr	r0, [pc, #216]	@ (8002c80 <RI_SetRegisterMotor1+0x340>)
 8002ba8:	b229      	sxth	r1, r5
 8002baa:	f003 fab1 	bl	8006110 <PID_SetKP>
          break;
 8002bae:	e715      	b.n	80029dc <RI_SetRegisterMotor1+0x9c>
 8002bb0:	f241 6350 	movw	r3, #5712	@ 0x1650
 8002bb4:	4298      	cmp	r0, r3
 8002bb6:	d1ca      	bne.n	8002b4e <RI_SetRegisterMotor1+0x20e>
          PID_SetKDDivisorPOW2(&PIDIqHandle_M1, regdata16);
 8002bb8:	4830      	ldr	r0, [pc, #192]	@ (8002c7c <RI_SetRegisterMotor1+0x33c>)
 8002bba:	4629      	mov	r1, r5
 8002bbc:	f003 fae2 	bl	8006184 <PID_SetKDDivisorPOW2>
          break;
 8002bc0:	e70c      	b.n	80029dc <RI_SetRegisterMotor1+0x9c>
 8002bc2:	f241 5390 	movw	r3, #5520	@ 0x1590
 8002bc6:	4298      	cmp	r0, r3
 8002bc8:	f000 81a7 	beq.w	8002f1a <RI_SetRegisterMotor1+0x5da>
 8002bcc:	f241 53d0 	movw	r3, #5584	@ 0x15d0
 8002bd0:	4298      	cmp	r0, r3
 8002bd2:	d118      	bne.n	8002c06 <RI_SetRegisterMotor1+0x2c6>
          PID_SetKPDivisorPOW2(&PIDIqHandle_M1, regdata16);
 8002bd4:	4829      	ldr	r0, [pc, #164]	@ (8002c7c <RI_SetRegisterMotor1+0x33c>)
 8002bd6:	4629      	mov	r1, r5
 8002bd8:	f003 faaa 	bl	8006130 <PID_SetKPDivisorPOW2>
          break;
 8002bdc:	e6fe      	b.n	80029dc <RI_SetRegisterMotor1+0x9c>
 8002bde:	f5b0 6f69 	cmp.w	r0, #3728	@ 0xe90
 8002be2:	f43f aefb 	beq.w	80029dc <RI_SetRegisterMotor1+0x9c>
 8002be6:	d920      	bls.n	8002c2a <RI_SetRegisterMotor1+0x2ea>
 8002be8:	f241 4390 	movw	r3, #5264	@ 0x1490
 8002bec:	4298      	cmp	r0, r3
 8002bee:	f000 818f 	beq.w	8002f10 <RI_SetRegisterMotor1+0x5d0>
 8002bf2:	d911      	bls.n	8002c18 <RI_SetRegisterMotor1+0x2d8>
 8002bf4:	f241 43d0 	movw	r3, #5328	@ 0x14d0
 8002bf8:	4298      	cmp	r0, r3
 8002bfa:	d1a8      	bne.n	8002b4e <RI_SetRegisterMotor1+0x20e>
          PID_SetKDDivisorPOW2(&PIDSpeedHandle_M1, regdata16);
 8002bfc:	4820      	ldr	r0, [pc, #128]	@ (8002c80 <RI_SetRegisterMotor1+0x340>)
 8002bfe:	4629      	mov	r1, r5
 8002c00:	f003 fac0 	bl	8006184 <PID_SetKDDivisorPOW2>
          break;
 8002c04:	e6ea      	b.n	80029dc <RI_SetRegisterMotor1+0x9c>
 8002c06:	f241 5350 	movw	r3, #5456	@ 0x1550
 8002c0a:	4298      	cmp	r0, r3
 8002c0c:	d19f      	bne.n	8002b4e <RI_SetRegisterMotor1+0x20e>
          PID_SetKIDivisorPOW2(&PIDIdHandle_M1, regdata16);
 8002c0e:	481a      	ldr	r0, [pc, #104]	@ (8002c78 <RI_SetRegisterMotor1+0x338>)
 8002c10:	4629      	mov	r1, r5
 8002c12:	f003 fa9b 	bl	800614c <PID_SetKIDivisorPOW2>
          break;
 8002c16:	e6e1      	b.n	80029dc <RI_SetRegisterMotor1+0x9c>
 8002c18:	f241 4350 	movw	r3, #5200	@ 0x1450
 8002c1c:	4298      	cmp	r0, r3
 8002c1e:	d131      	bne.n	8002c84 <RI_SetRegisterMotor1+0x344>
          PID_SetKPDivisorPOW2(&PIDSpeedHandle_M1, regdata16);
 8002c20:	4817      	ldr	r0, [pc, #92]	@ (8002c80 <RI_SetRegisterMotor1+0x340>)
 8002c22:	4629      	mov	r1, r5
 8002c24:	f003 fa84 	bl	8006130 <PID_SetKPDivisorPOW2>
          break;
 8002c28:	e6d8      	b.n	80029dc <RI_SetRegisterMotor1+0x9c>
 8002c2a:	f5b0 6f19 	cmp.w	r0, #2448	@ 0x990
 8002c2e:	f000 81bb 	beq.w	8002fa8 <RI_SetRegisterMotor1+0x668>
 8002c32:	d940      	bls.n	8002cb6 <RI_SetRegisterMotor1+0x376>
 8002c34:	f5b0 6f65 	cmp.w	r0, #3664	@ 0xe50
 8002c38:	f43f aed0 	beq.w	80029dc <RI_SetRegisterMotor1+0x9c>
 8002c3c:	d887      	bhi.n	8002b4e <RI_SetRegisterMotor1+0x20e>
 8002c3e:	f5b0 6f45 	cmp.w	r0, #3152	@ 0xc50
 8002c42:	f43f af24 	beq.w	8002a8e <RI_SetRegisterMotor1+0x14e>
 8002c46:	d944      	bls.n	8002cd2 <RI_SetRegisterMotor1+0x392>
 8002c48:	f5b0 6f55 	cmp.w	r0, #3408	@ 0xd50
 8002c4c:	f43f af1f 	beq.w	8002a8e <RI_SetRegisterMotor1+0x14e>
 8002c50:	f020 0340 	bic.w	r3, r0, #64	@ 0x40
 8002c54:	d925      	bls.n	8002ca2 <RI_SetRegisterMotor1+0x362>
 8002c56:	f5b3 6f59 	cmp.w	r3, #3472	@ 0xd90
 8002c5a:	f43f af18 	beq.w	8002a8e <RI_SetRegisterMotor1+0x14e>
          retVal = MCP_ERROR_UNKNOWN_REG;
 8002c5e:	f5b0 6f61 	cmp.w	r0, #3600	@ 0xe10
 8002c62:	bf0c      	ite	eq
 8002c64:	2004      	moveq	r0, #4
 8002c66:	2005      	movne	r0, #5
 8002c68:	e6b9      	b.n	80029de <RI_SetRegisterMotor1+0x9e>
 8002c6a:	bf00      	nop
 8002c6c:	20000244 	.word	0x20000244
 8002c70:	20000834 	.word	0x20000834
 8002c74:	20000210 	.word	0x20000210
 8002c78:	200004f8 	.word	0x200004f8
 8002c7c:	20000524 	.word	0x20000524
 8002c80:	20000550 	.word	0x20000550
 8002c84:	f63f af63 	bhi.w	8002b4e <RI_SetRegisterMotor1+0x20e>
 8002c88:	f241 0310 	movw	r3, #4112	@ 0x1010
 8002c8c:	4298      	cmp	r0, r3
 8002c8e:	f43f aefe 	beq.w	8002a8e <RI_SetRegisterMotor1+0x14e>
 8002c92:	d92f      	bls.n	8002cf4 <RI_SetRegisterMotor1+0x3b4>
 8002c94:	f241 0350 	movw	r3, #4176	@ 0x1050
 8002c98:	4298      	cmp	r0, r3
 8002c9a:	bf0c      	ite	eq
 8002c9c:	2004      	moveq	r0, #4
 8002c9e:	2005      	movne	r0, #5
 8002ca0:	e69d      	b.n	80029de <RI_SetRegisterMotor1+0x9e>
 8002ca2:	f5b3 6f49 	cmp.w	r3, #3216	@ 0xc90
 8002ca6:	f43f aef2 	beq.w	8002a8e <RI_SetRegisterMotor1+0x14e>
 8002caa:	f5b0 6f51 	cmp.w	r0, #3344	@ 0xd10
 8002cae:	bf0c      	ite	eq
 8002cb0:	2004      	moveq	r0, #4
 8002cb2:	2005      	movne	r0, #5
 8002cb4:	e693      	b.n	80029de <RI_SetRegisterMotor1+0x9e>
 8002cb6:	f5b0 6f15 	cmp.w	r0, #2384	@ 0x950
 8002cba:	d123      	bne.n	8002d04 <RI_SetRegisterMotor1+0x3c4>
          currComp = MCI_GetIqdref(pMCIN);
 8002cbc:	48aa      	ldr	r0, [pc, #680]	@ (8002f68 <RI_SetRegisterMotor1+0x628>)
 8002cbe:	f7fe fadd 	bl	800127c <MCI_GetIqdref>
 8002cc2:	9001      	str	r0, [sp, #4]
          currComp.q = (int16_t)regdata16;
 8002cc4:	f8ad 5004 	strh.w	r5, [sp, #4]
          MCI_SetCurrentReferences(pMCIN,currComp);
 8002cc8:	9901      	ldr	r1, [sp, #4]
 8002cca:	48a7      	ldr	r0, [pc, #668]	@ (8002f68 <RI_SetRegisterMotor1+0x628>)
 8002ccc:	f7fe f9c2 	bl	8001054 <MCI_SetCurrentReferences>
          break;
 8002cd0:	e684      	b.n	80029dc <RI_SetRegisterMotor1+0x9c>
 8002cd2:	f5b0 6f35 	cmp.w	r0, #2896	@ 0xb50
 8002cd6:	f43f aeda 	beq.w	8002a8e <RI_SetRegisterMotor1+0x14e>
 8002cda:	d926      	bls.n	8002d2a <RI_SetRegisterMotor1+0x3ea>
 8002cdc:	f020 0340 	bic.w	r3, r0, #64	@ 0x40
 8002ce0:	f5b3 6f39 	cmp.w	r3, #2960	@ 0xb90
 8002ce4:	f43f aed3 	beq.w	8002a8e <RI_SetRegisterMotor1+0x14e>
          retVal = MCP_ERROR_UNKNOWN_REG;
 8002ce8:	f5b0 6f41 	cmp.w	r0, #3088	@ 0xc10
 8002cec:	bf0c      	ite	eq
 8002cee:	2004      	moveq	r0, #4
 8002cf0:	2005      	movne	r0, #5
 8002cf2:	e674      	b.n	80029de <RI_SetRegisterMotor1+0x9e>
 8002cf4:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 8002cf8:	f5b0 6f79 	cmp.w	r0, #3984	@ 0xf90
 8002cfc:	bf0c      	ite	eq
 8002cfe:	2004      	moveq	r0, #4
 8002d00:	2005      	movne	r0, #5
 8002d02:	e66c      	b.n	80029de <RI_SetRegisterMotor1+0x9e>
 8002d04:	f63f af23 	bhi.w	8002b4e <RI_SetRegisterMotor1+0x20e>
 8002d08:	f5b0 6f05 	cmp.w	r0, #2128	@ 0x850
 8002d0c:	f43f aebf 	beq.w	8002a8e <RI_SetRegisterMotor1+0x14e>
 8002d10:	d916      	bls.n	8002d40 <RI_SetRegisterMotor1+0x400>
 8002d12:	f020 0340 	bic.w	r3, r0, #64	@ 0x40
 8002d16:	f5b3 6f09 	cmp.w	r3, #2192	@ 0x890
 8002d1a:	f43f aeb8 	beq.w	8002a8e <RI_SetRegisterMotor1+0x14e>
 8002d1e:	f5b0 6f11 	cmp.w	r0, #2320	@ 0x910
 8002d22:	bf0c      	ite	eq
 8002d24:	2004      	moveq	r0, #4
 8002d26:	2005      	movne	r0, #5
 8002d28:	e659      	b.n	80029de <RI_SetRegisterMotor1+0x9e>
 8002d2a:	f5b0 6f25 	cmp.w	r0, #2640	@ 0xa50
 8002d2e:	f43f aeae 	beq.w	8002a8e <RI_SetRegisterMotor1+0x14e>
 8002d32:	d910      	bls.n	8002d56 <RI_SetRegisterMotor1+0x416>
 8002d34:	f5b0 6f29 	cmp.w	r0, #2704	@ 0xa90
 8002d38:	bf0c      	ite	eq
 8002d3a:	2004      	moveq	r0, #4
 8002d3c:	2005      	movne	r0, #5
 8002d3e:	e64e      	b.n	80029de <RI_SetRegisterMotor1+0x9e>
 8002d40:	f5b0 6ffa 	cmp.w	r0, #2000	@ 0x7d0
 8002d44:	f43f aea3 	beq.w	8002a8e <RI_SetRegisterMotor1+0x14e>
 8002d48:	d90f      	bls.n	8002d6a <RI_SetRegisterMotor1+0x42a>
 8002d4a:	f5b0 6f01 	cmp.w	r0, #2064	@ 0x810
 8002d4e:	bf0c      	ite	eq
 8002d50:	2004      	moveq	r0, #4
 8002d52:	2005      	movne	r0, #5
 8002d54:	e643      	b.n	80029de <RI_SetRegisterMotor1+0x9e>
 8002d56:	f5b0 6f1d 	cmp.w	r0, #2512	@ 0x9d0
 8002d5a:	f43f ae98 	beq.w	8002a8e <RI_SetRegisterMotor1+0x14e>
 8002d5e:	f5b0 6f21 	cmp.w	r0, #2576	@ 0xa10
 8002d62:	bf0c      	ite	eq
 8002d64:	2004      	moveq	r0, #4
 8002d66:	2005      	movne	r0, #5
 8002d68:	e639      	b.n	80029de <RI_SetRegisterMotor1+0x9e>
 8002d6a:	f5b0 6fba 	cmp.w	r0, #1488	@ 0x5d0
 8002d6e:	f43f ae8e 	beq.w	8002a8e <RI_SetRegisterMotor1+0x14e>
 8002d72:	f5b0 6ff2 	cmp.w	r0, #1936	@ 0x790
 8002d76:	bf0c      	ite	eq
 8002d78:	2004      	moveq	r0, #4
 8002d7a:	2005      	movne	r0, #5
 8002d7c:	e62f      	b.n	80029de <RI_SetRegisterMotor1+0x9e>
 8002d7e:	f5b0 6f82 	cmp.w	r0, #1040	@ 0x410
 8002d82:	f47f aee4 	bne.w	8002b4e <RI_SetRegisterMotor1+0x20e>
          STO_CR_GetObserverGains(&STO_CR_M1, &hC1, &hC2);
 8002d86:	aa01      	add	r2, sp, #4
 8002d88:	f10d 0102 	add.w	r1, sp, #2
 8002d8c:	4877      	ldr	r0, [pc, #476]	@ (8002f6c <RI_SetRegisterMotor1+0x62c>)
 8002d8e:	f004 fe07 	bl	80079a0 <STO_CR_GetObserverGains>
          STO_CR_SetObserverGains(&STO_CR_M1, hC1, (int16_t)regdata16);
 8002d92:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 8002d96:	4875      	ldr	r0, [pc, #468]	@ (8002f6c <RI_SetRegisterMotor1+0x62c>)
 8002d98:	b22a      	sxth	r2, r5
 8002d9a:	f004 fe09 	bl	80079b0 <STO_CR_SetObserverGains>
          break;
 8002d9e:	e61d      	b.n	80029dc <RI_SetRegisterMotor1+0x9c>
 8002da0:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 8002da4:	2818      	cmp	r0, #24
 8002da6:	bf0c      	ite	eq
 8002da8:	2004      	moveq	r0, #4
 8002daa:	2005      	movne	r0, #5
 8002dac:	e649      	b.n	8002a42 <RI_SetRegisterMotor1+0x102>
 8002dae:	f5b0 7f06 	cmp.w	r0, #536	@ 0x218
 8002db2:	d04a      	beq.n	8002e4a <RI_SetRegisterMotor1+0x50a>
 8002db4:	f5b0 7f16 	cmp.w	r0, #600	@ 0x258
 8002db8:	bf18      	it	ne
 8002dba:	2005      	movne	r0, #5
 8002dbc:	f47f ae41 	bne.w	8002a42 <RI_SetRegisterMotor1+0x102>
          FF_M1.wConstant_2 = (int32_t)regdata32;
 8002dc0:	4a6b      	ldr	r2, [pc, #428]	@ (8002f70 <RI_SetRegisterMotor1+0x630>)
 8002dc2:	6153      	str	r3, [r2, #20]
  uint8_t retVal = MCP_CMD_OK;
 8002dc4:	2000      	movs	r0, #0
 8002dc6:	e63c      	b.n	8002a42 <RI_SetRegisterMotor1+0x102>
 8002dc8:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 8002dcc:	2828      	cmp	r0, #40	@ 0x28
 8002dce:	d005      	beq.n	8002ddc <RI_SetRegisterMotor1+0x49c>
 8002dd0:	2005      	movs	r0, #5
}
 8002dd2:	b004      	add	sp, #16
 8002dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *tempdestString = (int8_t)0;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	702b      	strb	r3, [r5, #0]
      retVal = MCP_ERROR_RO_REG;
 8002ddc:	2004      	movs	r0, #4
 8002dde:	e5cf      	b.n	8002980 <RI_SetRegisterMotor1+0x40>
 8002de0:	f5b0 7f5a 	cmp.w	r0, #872	@ 0x368
 8002de4:	d06b      	beq.n	8002ebe <RI_SetRegisterMotor1+0x57e>
 8002de6:	f5b0 6fa5 	cmp.w	r0, #1320	@ 0x528
 8002dea:	d1f1      	bne.n	8002dd0 <RI_SetRegisterMotor1+0x490>
            retVal =  MCPA_cfgLog (&MCPA_UART_A, rawData);
 8002dec:	4861      	ldr	r0, [pc, #388]	@ (8002f74 <RI_SetRegisterMotor1+0x634>)
 8002dee:	1ca9      	adds	r1, r5, #2
}
 8002df0:	b004      	add	sp, #16
 8002df2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            retVal =  MCPA_cfgLog (&MCPA_UART_A, rawData);
 8002df6:	f003 b8e7 	b.w	8005fc8 <MCPA_cfgLog>
 8002dfa:	28a8      	cmp	r0, #168	@ 0xa8
 8002dfc:	d0ee      	beq.n	8002ddc <RI_SetRegisterMotor1+0x49c>
 8002dfe:	d9e3      	bls.n	8002dc8 <RI_SetRegisterMotor1+0x488>
 8002e00:	28e8      	cmp	r0, #232	@ 0xe8
 8002e02:	d0eb      	beq.n	8002ddc <RI_SetRegisterMotor1+0x49c>
 8002e04:	e7e4      	b.n	8002dd0 <RI_SetRegisterMotor1+0x490>
          retVal = MCP_ERROR_RO_REG;
 8002e06:	2004      	movs	r0, #4
 8002e08:	e61b      	b.n	8002a42 <RI_SetRegisterMotor1+0x102>
        *size = 0;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	8023      	strh	r3, [r4, #0]
        retVal = MCP_ERROR_BAD_RAW_FORMAT; /* This error stop the parsing of the CMD buffer */
 8002e0e:	200a      	movs	r0, #10
 8002e10:	e5b6      	b.n	8002980 <RI_SetRegisterMotor1+0x40>
          uint8_t regdata8 = *data;
 8002e12:	7813      	ldrb	r3, [r2, #0]
          if ((uint8_t)MCM_TORQUE_MODE == regdata8)
 8002e14:	2b04      	cmp	r3, #4
 8002e16:	d003      	beq.n	8002e20 <RI_SetRegisterMotor1+0x4e0>
          if ((uint8_t)MCM_SPEED_MODE == regdata8)
 8002e18:	2b03      	cmp	r3, #3
 8002e1a:	d059      	beq.n	8002ed0 <RI_SetRegisterMotor1+0x590>
  uint8_t retVal = MCP_CMD_OK;
 8002e1c:	2000      	movs	r0, #0
 8002e1e:	e5bb      	b.n	8002998 <RI_SetRegisterMotor1+0x58>
            MCI_ExecTorqueRamp(pMCIN, MCI_GetTeref(pMCIN), 0);
 8002e20:	4851      	ldr	r0, [pc, #324]	@ (8002f68 <RI_SetRegisterMotor1+0x628>)
 8002e22:	f7fe fa55 	bl	80012d0 <MCI_GetTeref>
 8002e26:	2200      	movs	r2, #0
 8002e28:	4601      	mov	r1, r0
 8002e2a:	484f      	ldr	r0, [pc, #316]	@ (8002f68 <RI_SetRegisterMotor1+0x628>)
 8002e2c:	f7fe f908 	bl	8001040 <MCI_ExecTorqueRamp>
          if ((uint8_t)MCM_SPEED_MODE == regdata8)
 8002e30:	e7f4      	b.n	8002e1c <RI_SetRegisterMotor1+0x4dc>
          MCI_ExecSpeedRamp(pMCIN,((((int16_t)regdata32) * ((int16_t)SPEED_UNIT)) / (int16_t)U_RPM), 0);
 8002e32:	4951      	ldr	r1, [pc, #324]	@ (8002f78 <RI_SetRegisterMotor1+0x638>)
 8002e34:	484c      	ldr	r0, [pc, #304]	@ (8002f68 <RI_SetRegisterMotor1+0x628>)
 8002e36:	b21b      	sxth	r3, r3
 8002e38:	fb81 2103 	smull	r2, r1, r1, r3
 8002e3c:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8002e40:	2200      	movs	r2, #0
 8002e42:	b209      	sxth	r1, r1
 8002e44:	f7fe f8f2 	bl	800102c <MCI_ExecSpeedRamp>
          break;
 8002e48:	e7bc      	b.n	8002dc4 <RI_SetRegisterMotor1+0x484>
          FF_M1.wConstant_1D = (int32_t)regdata32;
 8002e4a:	4a49      	ldr	r2, [pc, #292]	@ (8002f70 <RI_SetRegisterMotor1+0x630>)
 8002e4c:	60d3      	str	r3, [r2, #12]
          break;
 8002e4e:	e7b9      	b.n	8002dc4 <RI_SetRegisterMotor1+0x484>
          FF_M1.wConstant_1Q = (int32_t)regdata32;
 8002e50:	4a47      	ldr	r2, [pc, #284]	@ (8002f70 <RI_SetRegisterMotor1+0x630>)
 8002e52:	6113      	str	r3, [r2, #16]
          break;
 8002e54:	e7b6      	b.n	8002dc4 <RI_SetRegisterMotor1+0x484>
            if (((0U != ((rawSize) % 8U))) || ((nbrOfPhase > RUC_MAX_PHASE_NUMBER) != 0))
 8002e56:	f011 0607 	ands.w	r6, r1, #7
 8002e5a:	d137      	bne.n	8002ecc <RI_SetRegisterMotor1+0x58c>
            uint8_t nbrOfPhase = (((uint8_t)rawSize) / 8U);
 8002e5c:	b2c9      	uxtb	r1, r1
            if (((0U != ((rawSize) % 8U))) || ((nbrOfPhase > RUC_MAX_PHASE_NUMBER) != 0))
 8002e5e:	292f      	cmp	r1, #47	@ 0x2f
 8002e60:	d834      	bhi.n	8002ecc <RI_SetRegisterMotor1+0x58c>
              for (i = 0; i <nbrOfPhase; i++)
 8002e62:	08c9      	lsrs	r1, r1, #3
 8002e64:	f43f ae11 	beq.w	8002a8a <RI_SetRegisterMotor1+0x14a>
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8002e68:	f8df 810c 	ldr.w	r8, [pc, #268]	@ 8002f78 <RI_SetRegisterMotor1+0x638>
              (void)RUC_SetPhase(&RevUpControlM1, i, &revUpPhase);
 8002e6c:	4f43      	ldr	r7, [pc, #268]	@ (8002f7c <RI_SetRegisterMotor1+0x63c>)
 8002e6e:	eb05 04c1 	add.w	r4, r5, r1, lsl #3
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8002e72:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
              revUpPhase.hFinalTorque = *((int16_t *) &rawData[4U + (i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 8002e76:	88eb      	ldrh	r3, [r5, #6]
 8002e78:	f8ad 3008 	strh.w	r3, [sp, #8]
              revUpPhase.hDurationms  = *((uint16_t *) &rawData[6U +(i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 8002e7c:	f835 3f08 	ldrh.w	r3, [r5, #8]!
 8002e80:	f8ad 3004 	strh.w	r3, [sp, #4]
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8002e84:	fb88 1302 	smull	r1, r3, r8, r2
 8002e88:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
              (void)RUC_SetPhase(&RevUpControlM1, i, &revUpPhase);
 8002e8c:	b2f1      	uxtb	r1, r6
 8002e8e:	aa01      	add	r2, sp, #4
 8002e90:	4638      	mov	r0, r7
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8002e92:	f8ad 3006 	strh.w	r3, [sp, #6]
              (void)RUC_SetPhase(&RevUpControlM1, i, &revUpPhase);
 8002e96:	f004 f933 	bl	8007100 <RUC_SetPhase>
              for (i = 0; i <nbrOfPhase; i++)
 8002e9a:	42a5      	cmp	r5, r4
 8002e9c:	f106 0601 	add.w	r6, r6, #1
 8002ea0:	d1e7      	bne.n	8002e72 <RI_SetRegisterMotor1+0x532>
 8002ea2:	e5f2      	b.n	8002a8a <RI_SetRegisterMotor1+0x14a>
            MCI_ExecSpeedRamp(pMCIN, (int16_t)((rpm * SPEED_UNIT) / U_RPM), duration);
 8002ea4:	f8d5 1002 	ldr.w	r1, [r5, #2]
 8002ea8:	4b33      	ldr	r3, [pc, #204]	@ (8002f78 <RI_SetRegisterMotor1+0x638>)
 8002eaa:	88ea      	ldrh	r2, [r5, #6]
 8002eac:	fb83 0301 	smull	r0, r3, r3, r1
 8002eb0:	eba3 71e1 	sub.w	r1, r3, r1, asr #31
 8002eb4:	482c      	ldr	r0, [pc, #176]	@ (8002f68 <RI_SetRegisterMotor1+0x628>)
 8002eb6:	b209      	sxth	r1, r1
 8002eb8:	f7fe f8b8 	bl	800102c <MCI_ExecSpeedRamp>
            break;
 8002ebc:	e5e5      	b.n	8002a8a <RI_SetRegisterMotor1+0x14a>
            currComp.q = *((int16_t *) rawData); //cstat !MISRAC2012-Rule-11.3
 8002ebe:	f8d5 1002 	ldr.w	r1, [r5, #2]
            MCI_SetCurrentReferences(pMCIN, currComp);
 8002ec2:	4829      	ldr	r0, [pc, #164]	@ (8002f68 <RI_SetRegisterMotor1+0x628>)
            currComp.q = *((int16_t *) rawData); //cstat !MISRAC2012-Rule-11.3
 8002ec4:	9101      	str	r1, [sp, #4]
            MCI_SetCurrentReferences(pMCIN, currComp);
 8002ec6:	f7fe f8c5 	bl	8001054 <MCI_SetCurrentReferences>
            break;
 8002eca:	e5de      	b.n	8002a8a <RI_SetRegisterMotor1+0x14a>
              retVal = MCP_ERROR_BAD_RAW_FORMAT;
 8002ecc:	200a      	movs	r0, #10
            break;
 8002ece:	e557      	b.n	8002980 <RI_SetRegisterMotor1+0x40>
            MCI_ExecSpeedRamp(pMCIN, MCI_GetMecSpeedRefUnit(pMCIN), 0);
 8002ed0:	4825      	ldr	r0, [pc, #148]	@ (8002f68 <RI_SetRegisterMotor1+0x628>)
 8002ed2:	f7fe f9a5 	bl	8001220 <MCI_GetMecSpeedRefUnit>
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	4601      	mov	r1, r0
 8002eda:	4823      	ldr	r0, [pc, #140]	@ (8002f68 <RI_SetRegisterMotor1+0x628>)
 8002edc:	f7fe f8a6 	bl	800102c <MCI_ExecSpeedRamp>
 8002ee0:	e79c      	b.n	8002e1c <RI_SetRegisterMotor1+0x4dc>
          PID_SetKI(&PIDIdHandle_M1, (int16_t)regdata16);
 8002ee2:	4827      	ldr	r0, [pc, #156]	@ (8002f80 <RI_SetRegisterMotor1+0x640>)
 8002ee4:	b229      	sxth	r1, r5
 8002ee6:	f003 f915 	bl	8006114 <PID_SetKI>
          break;
 8002eea:	e577      	b.n	80029dc <RI_SetRegisterMotor1+0x9c>
          STO_PLL_GetObserverGains(&STO_PLL_M1, &hC1, &hC2);
 8002eec:	aa01      	add	r2, sp, #4
 8002eee:	f10d 0102 	add.w	r1, sp, #2
 8002ef2:	4824      	ldr	r0, [pc, #144]	@ (8002f84 <RI_SetRegisterMotor1+0x644>)
 8002ef4:	f005 f84a 	bl	8007f8c <STO_PLL_GetObserverGains>
          STO_PLL_SetObserverGains(&STO_PLL_M1, (int16_t)regdata16, hC2);
 8002ef8:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8002efc:	4821      	ldr	r0, [pc, #132]	@ (8002f84 <RI_SetRegisterMotor1+0x644>)
 8002efe:	b229      	sxth	r1, r5
 8002f00:	f005 f84c 	bl	8007f9c <STO_PLL_SetObserverGains>
          break;
 8002f04:	e56a      	b.n	80029dc <RI_SetRegisterMotor1+0x9c>
          PID_SetKD(&PIDIqHandle_M1, (int16_t)regdata16);
 8002f06:	4820      	ldr	r0, [pc, #128]	@ (8002f88 <RI_SetRegisterMotor1+0x648>)
 8002f08:	b229      	sxth	r1, r5
 8002f0a:	f003 f933 	bl	8006174 <PID_SetKD>
          break;
 8002f0e:	e565      	b.n	80029dc <RI_SetRegisterMotor1+0x9c>
          PID_SetKIDivisorPOW2(&PIDSpeedHandle_M1, regdata16);
 8002f10:	481e      	ldr	r0, [pc, #120]	@ (8002f8c <RI_SetRegisterMotor1+0x64c>)
 8002f12:	4629      	mov	r1, r5
 8002f14:	f003 f91a 	bl	800614c <PID_SetKIDivisorPOW2>
          break;
 8002f18:	e560      	b.n	80029dc <RI_SetRegisterMotor1+0x9c>
          PID_SetKDDivisorPOW2(&PIDIdHandle_M1, regdata16);
 8002f1a:	4819      	ldr	r0, [pc, #100]	@ (8002f80 <RI_SetRegisterMotor1+0x640>)
 8002f1c:	4629      	mov	r1, r5
 8002f1e:	f003 f931 	bl	8006184 <PID_SetKDDivisorPOW2>
          break;
 8002f22:	e55b      	b.n	80029dc <RI_SetRegisterMotor1+0x9c>
          PID_SetKIDivisorPOW2 (&(&STO_PLL_M1)->PIRegulator,regdata16);
 8002f24:	481a      	ldr	r0, [pc, #104]	@ (8002f90 <RI_SetRegisterMotor1+0x650>)
 8002f26:	4629      	mov	r1, r5
 8002f28:	f003 f910 	bl	800614c <PID_SetKIDivisorPOW2>
          break;
 8002f2c:	e556      	b.n	80029dc <RI_SetRegisterMotor1+0x9c>
          PID_SetKI(&PIDSpeedHandle_M1, (int16_t)regdata16);
 8002f2e:	4817      	ldr	r0, [pc, #92]	@ (8002f8c <RI_SetRegisterMotor1+0x64c>)
 8002f30:	b229      	sxth	r1, r5
 8002f32:	f003 f8ef 	bl	8006114 <PID_SetKI>
          break;
 8002f36:	e551      	b.n	80029dc <RI_SetRegisterMotor1+0x9c>
          PID_SetKP(&PIDIqHandle_M1, (int16_t)regdata16);
 8002f38:	4813      	ldr	r0, [pc, #76]	@ (8002f88 <RI_SetRegisterMotor1+0x648>)
 8002f3a:	b229      	sxth	r1, r5
 8002f3c:	f003 f8e8 	bl	8006110 <PID_SetKP>
          break;
 8002f40:	e54c      	b.n	80029dc <RI_SetRegisterMotor1+0x9c>
          PID_SetKIDivisorPOW2(&PIDIqHandle_M1, regdata16);
 8002f42:	4811      	ldr	r0, [pc, #68]	@ (8002f88 <RI_SetRegisterMotor1+0x648>)
 8002f44:	4629      	mov	r1, r5
 8002f46:	f003 f901 	bl	800614c <PID_SetKIDivisorPOW2>
          break;
 8002f4a:	e547      	b.n	80029dc <RI_SetRegisterMotor1+0x9c>
          STO_CR_GetObserverGains(&STO_CR_M1, &hC1,&hC2);
 8002f4c:	aa01      	add	r2, sp, #4
 8002f4e:	f10d 0102 	add.w	r1, sp, #2
 8002f52:	4806      	ldr	r0, [pc, #24]	@ (8002f6c <RI_SetRegisterMotor1+0x62c>)
 8002f54:	f004 fd24 	bl	80079a0 <STO_CR_GetObserverGains>
          STO_CR_SetObserverGains(&STO_CR_M1, (int16_t)regdata16, hC2);
 8002f58:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8002f5c:	4803      	ldr	r0, [pc, #12]	@ (8002f6c <RI_SetRegisterMotor1+0x62c>)
 8002f5e:	b229      	sxth	r1, r5
 8002f60:	f004 fd26 	bl	80079b0 <STO_CR_SetObserverGains>
           break;
 8002f64:	e53a      	b.n	80029dc <RI_SetRegisterMotor1+0x9c>
 8002f66:	bf00      	nop
 8002f68:	20000834 	.word	0x20000834
 8002f6c:	20000078 	.word	0x20000078
 8002f70:	200004c0 	.word	0x200004c0
 8002f74:	200005ac 	.word	0x200005ac
 8002f78:	2aaaaaab 	.word	0x2aaaaaab
 8002f7c:	20000414 	.word	0x20000414
 8002f80:	200004f8 	.word	0x200004f8
 8002f84:	20000210 	.word	0x20000210
 8002f88:	20000524 	.word	0x20000524
 8002f8c:	20000550 	.word	0x20000550
 8002f90:	20000244 	.word	0x20000244
          PID_SetKPDivisorPOW2(&PIDIdHandle_M1, regdata16);
 8002f94:	480a      	ldr	r0, [pc, #40]	@ (8002fc0 <RI_SetRegisterMotor1+0x680>)
 8002f96:	4629      	mov	r1, r5
 8002f98:	f003 f8ca 	bl	8006130 <PID_SetKPDivisorPOW2>
          break;
 8002f9c:	e51e      	b.n	80029dc <RI_SetRegisterMotor1+0x9c>
          PID_SetKI (&(&STO_PLL_M1)->PIRegulator, (int16_t)regdata16);
 8002f9e:	4809      	ldr	r0, [pc, #36]	@ (8002fc4 <RI_SetRegisterMotor1+0x684>)
 8002fa0:	b229      	sxth	r1, r5
 8002fa2:	f003 f8b7 	bl	8006114 <PID_SetKI>
          break;
 8002fa6:	e519      	b.n	80029dc <RI_SetRegisterMotor1+0x9c>
          currComp = MCI_GetIqdref(pMCIN);
 8002fa8:	4807      	ldr	r0, [pc, #28]	@ (8002fc8 <RI_SetRegisterMotor1+0x688>)
 8002faa:	f7fe f967 	bl	800127c <MCI_GetIqdref>
 8002fae:	9001      	str	r0, [sp, #4]
          currComp.d = (int16_t)regdata16;
 8002fb0:	f8ad 5006 	strh.w	r5, [sp, #6]
          MCI_SetCurrentReferences(pMCIN,currComp);
 8002fb4:	9901      	ldr	r1, [sp, #4]
 8002fb6:	4804      	ldr	r0, [pc, #16]	@ (8002fc8 <RI_SetRegisterMotor1+0x688>)
 8002fb8:	f7fe f84c 	bl	8001054 <MCI_SetCurrentReferences>
          break;
 8002fbc:	e50e      	b.n	80029dc <RI_SetRegisterMotor1+0x9c>
 8002fbe:	bf00      	nop
 8002fc0:	200004f8 	.word	0x200004f8
 8002fc4:	20000244 	.word	0x20000244
 8002fc8:	20000834 	.word	0x20000834

08002fcc <RI_GetRegisterGlobal>:
uint8_t RI_GetRegisterGlobal(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace){
 8002fcc:	b530      	push	{r4, r5, lr}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	461c      	mov	r4, r3
    switch (typeID)
 8002fd2:	f1a1 0308 	sub.w	r3, r1, #8
uint8_t RI_GetRegisterGlobal(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace){
 8002fd6:	f9bd c018 	ldrsh.w	ip, [sp, #24]
 8002fda:	4615      	mov	r5, r2
    switch (typeID)
 8002fdc:	2b20      	cmp	r3, #32
 8002fde:	d812      	bhi.n	8003006 <RI_GetRegisterGlobal+0x3a>
 8002fe0:	e8df f003 	tbb	[pc, r3]
 8002fe4:	1111111d 	.word	0x1111111d
 8002fe8:	11111111 	.word	0x11111111
 8002fec:	11111139 	.word	0x11111139
 8002ff0:	11111111 	.word	0x11111111
 8002ff4:	11111124 	.word	0x11111124
 8002ff8:	11111111 	.word	0x11111111
 8002ffc:	11111148 	.word	0x11111148
 8003000:	11111111 	.word	0x11111111
 8003004:	14          	.byte	0x14
 8003005:	00          	.byte	0x00
 8003006:	2007      	movs	r0, #7
}
 8003008:	b003      	add	sp, #12
 800300a:	bd30      	pop	{r4, r5, pc}
        switch (regID)
 800300c:	2828      	cmp	r0, #40	@ 0x28
 800300e:	d056      	beq.n	80030be <RI_GetRegisterGlobal+0xf2>
        *size = (*rawSize) + 2U;
 8003010:	882b      	ldrh	r3, [r5, #0]
 8003012:	3302      	adds	r3, #2
            retVal = MCP_ERROR_UNKNOWN_REG;
 8003014:	2005      	movs	r0, #5
        *size = (*rawSize) + 2U;
 8003016:	b29b      	uxth	r3, r3
 8003018:	8023      	strh	r3, [r4, #0]
}
 800301a:	b003      	add	sp, #12
 800301c:	bd30      	pop	{r4, r5, pc}
        if (freeSpace > 0)
 800301e:	f1bc 0f00 	cmp.w	ip, #0
 8003022:	dd4a      	ble.n	80030ba <RI_GetRegisterGlobal+0xee>
 8003024:	2301      	movs	r3, #1
          *size = 1;
 8003026:	8023      	strh	r3, [r4, #0]
              retVal = MCP_ERROR_UNKNOWN_REG;
 8003028:	2005      	movs	r0, #5
 800302a:	e7ed      	b.n	8003008 <RI_GetRegisterGlobal+0x3c>
        if (freeSpace >= 4)
 800302c:	f1bc 0f03 	cmp.w	ip, #3
 8003030:	dd3a      	ble.n	80030a8 <RI_GetRegisterGlobal+0xdc>
          switch (regID)
 8003032:	f241 6358 	movw	r3, #5720	@ 0x1658
 8003036:	4298      	cmp	r0, r3
 8003038:	f000 8082 	beq.w	8003140 <RI_GetRegisterGlobal+0x174>
 800303c:	f241 6398 	movw	r3, #5784	@ 0x1698
 8003040:	4298      	cmp	r0, r3
 8003042:	d075      	beq.n	8003130 <RI_GetRegisterGlobal+0x164>
 8003044:	f241 6318 	movw	r3, #5656	@ 0x1618
 8003048:	4298      	cmp	r0, r3
 800304a:	d067      	beq.n	800311c <RI_GetRegisterGlobal+0x150>
 800304c:	2005      	movs	r0, #5
          *size = 4;
 800304e:	2304      	movs	r3, #4
 8003050:	8023      	strh	r3, [r4, #0]
}
 8003052:	b003      	add	sp, #12
 8003054:	bd30      	pop	{r4, r5, pc}
        if (freeSpace >= 2)
 8003056:	f1bc 0f01 	cmp.w	ip, #1
 800305a:	dd25      	ble.n	80030a8 <RI_GetRegisterGlobal+0xdc>
          switch (regID)
 800305c:	f5b0 6f65 	cmp.w	r0, #3664	@ 0xe50
 8003060:	d05a      	beq.n	8003118 <RI_GetRegisterGlobal+0x14c>
 8003062:	f5b0 6f69 	cmp.w	r0, #3728	@ 0xe90
 8003066:	bf0c      	ite	eq
 8003068:	2000      	moveq	r0, #0
 800306a:	2005      	movne	r0, #5
          *size = 2;
 800306c:	2302      	movs	r3, #2
 800306e:	8023      	strh	r3, [r4, #0]
}
 8003070:	b003      	add	sp, #12
 8003072:	bd30      	pop	{r4, r5, pc}
        switch (regID)
 8003074:	2820      	cmp	r0, #32
 8003076:	d02c      	beq.n	80030d2 <RI_GetRegisterGlobal+0x106>
 8003078:	2860      	cmp	r0, #96	@ 0x60
 800307a:	d118      	bne.n	80030ae <RI_GetRegisterGlobal+0xe2>
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 800307c:	4934      	ldr	r1, [pc, #208]	@ (8003150 <RI_GetRegisterGlobal+0x184>)
 800307e:	f991 2000 	ldrsb.w	r2, [r1]
  *size= 1U ; /* /0 is the min String size */
 8003082:	2301      	movs	r3, #1
 8003084:	8023      	strh	r3, [r4, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8003086:	b1a2      	cbz	r2, 80030b2 <RI_GetRegisterGlobal+0xe6>
 8003088:	fa1f fc8c 	uxth.w	ip, ip
 800308c:	e008      	b.n	80030a0 <RI_GetRegisterGlobal+0xd4>
    *tempdestString = *tempsrcString;
 800308e:	f805 2b01 	strb.w	r2, [r5], #1
    *size = *size + 1U;
 8003092:	8823      	ldrh	r3, [r4, #0]
 8003094:	3301      	adds	r3, #1
 8003096:	b29b      	uxth	r3, r3
 8003098:	8023      	strh	r3, [r4, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 800309a:	f911 2f01 	ldrsb.w	r2, [r1, #1]!
 800309e:	b142      	cbz	r2, 80030b2 <RI_GetRegisterGlobal+0xe6>
 80030a0:	4563      	cmp	r3, ip
 80030a2:	d3f4      	bcc.n	800308e <RI_GetRegisterGlobal+0xc2>
    retVal = MCP_ERROR_STRING_FORMAT;
 80030a4:	2006      	movs	r0, #6
 80030a6:	e7af      	b.n	8003008 <RI_GetRegisterGlobal+0x3c>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 80030a8:	2008      	movs	r0, #8
}
 80030aa:	b003      	add	sp, #12
 80030ac:	bd30      	pop	{r4, r5, pc}
 80030ae:	2300      	movs	r3, #0
 80030b0:	e7b9      	b.n	8003026 <RI_GetRegisterGlobal+0x5a>
    *tempdestString = (int8_t)0;
 80030b2:	2300      	movs	r3, #0
 80030b4:	702b      	strb	r3, [r5, #0]
  uint8_t retVal = MCP_CMD_OK;
 80030b6:	2000      	movs	r0, #0
 80030b8:	e7a6      	b.n	8003008 <RI_GetRegisterGlobal+0x3c>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 80030ba:	4608      	mov	r0, r1
 80030bc:	e7a4      	b.n	8003008 <RI_GetRegisterGlobal+0x3c>
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 80030be:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = (uint16_t)sizeof(GlobalConfig_reg_t);
 80030c2:	230a      	movs	r3, #10
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 80030c4:	f1bc 0f0b 	cmp.w	ip, #11
            *rawSize = (uint16_t)sizeof(GlobalConfig_reg_t);
 80030c8:	802b      	strh	r3, [r5, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 80030ca:	d819      	bhi.n	8003100 <RI_GetRegisterGlobal+0x134>
 80030cc:	230c      	movs	r3, #12
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 80030ce:	2008      	movs	r0, #8
 80030d0:	e7a2      	b.n	8003018 <RI_GetRegisterGlobal+0x4c>
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80030d2:	4920      	ldr	r1, [pc, #128]	@ (8003154 <RI_GetRegisterGlobal+0x188>)
 80030d4:	f991 2000 	ldrsb.w	r2, [r1]
  *size= 1U ; /* /0 is the min String size */
 80030d8:	2301      	movs	r3, #1
 80030da:	8023      	strh	r3, [r4, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80030dc:	2a00      	cmp	r2, #0
 80030de:	d0e8      	beq.n	80030b2 <RI_GetRegisterGlobal+0xe6>
 80030e0:	fa1f fc8c 	uxth.w	ip, ip
 80030e4:	e009      	b.n	80030fa <RI_GetRegisterGlobal+0x12e>
    *tempdestString = *tempsrcString;
 80030e6:	f805 2b01 	strb.w	r2, [r5], #1
    *size = *size + 1U;
 80030ea:	8823      	ldrh	r3, [r4, #0]
 80030ec:	3301      	adds	r3, #1
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	8023      	strh	r3, [r4, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80030f2:	f911 2f01 	ldrsb.w	r2, [r1, #1]!
 80030f6:	2a00      	cmp	r2, #0
 80030f8:	d0db      	beq.n	80030b2 <RI_GetRegisterGlobal+0xe6>
 80030fa:	459c      	cmp	ip, r3
 80030fc:	d8f3      	bhi.n	80030e6 <RI_GetRegisterGlobal+0x11a>
 80030fe:	e7d1      	b.n	80030a4 <RI_GetRegisterGlobal+0xd8>
              (void)memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t));
 8003100:	4b15      	ldr	r3, [pc, #84]	@ (8003158 <RI_GetRegisterGlobal+0x18c>)
 8003102:	6819      	ldr	r1, [r3, #0]
 8003104:	685a      	ldr	r2, [r3, #4]
 8003106:	891b      	ldrh	r3, [r3, #8]
 8003108:	816b      	strh	r3, [r5, #10]
 800310a:	f8c5 1002 	str.w	r1, [r5, #2]
 800310e:	f8c5 2006 	str.w	r2, [r5, #6]
 8003112:	230c      	movs	r3, #12
    uint8_t retVal = MCP_CMD_OK;
 8003114:	2000      	movs	r0, #0
 8003116:	e77f      	b.n	8003018 <RI_GetRegisterGlobal+0x4c>
 8003118:	2000      	movs	r0, #0
 800311a:	e7a7      	b.n	800306c <RI_GetRegisterGlobal+0xa0>
              ReadVal.Float_Val = MC_Perf_GetCPU_Load(pMCIN->pPerfMeasure);
 800311c:	4b0f      	ldr	r3, [pc, #60]	@ (800315c <RI_GetRegisterGlobal+0x190>)
 800311e:	68d8      	ldr	r0, [r3, #12]
 8003120:	f7fe fa88 	bl	8001634 <MC_Perf_GetCPU_Load>
 8003124:	ed8d 0a01 	vstr	s0, [sp, #4]
 8003128:	9b01      	ldr	r3, [sp, #4]
              *regdataU32 = ReadVal.U32_Val;
 800312a:	602b      	str	r3, [r5, #0]
    uint8_t retVal = MCP_CMD_OK;
 800312c:	2000      	movs	r0, #0
 800312e:	e78e      	b.n	800304e <RI_GetRegisterGlobal+0x82>
              ReadVal.Float_Val = MC_Perf_GetMaxCPU_Load(pMCIN->pPerfMeasure);
 8003130:	4b0a      	ldr	r3, [pc, #40]	@ (800315c <RI_GetRegisterGlobal+0x190>)
 8003132:	68d8      	ldr	r0, [r3, #12]
 8003134:	f7fe faa2 	bl	800167c <MC_Perf_GetMaxCPU_Load>
 8003138:	ed8d 0a01 	vstr	s0, [sp, #4]
 800313c:	9b01      	ldr	r3, [sp, #4]
              break;
 800313e:	e7f4      	b.n	800312a <RI_GetRegisterGlobal+0x15e>
              ReadVal.Float_Val = MC_Perf_GetMinCPU_Load(pMCIN->pPerfMeasure);
 8003140:	4b06      	ldr	r3, [pc, #24]	@ (800315c <RI_GetRegisterGlobal+0x190>)
 8003142:	68d8      	ldr	r0, [r3, #12]
 8003144:	f7fe fabe 	bl	80016c4 <MC_Perf_GetMinCPU_Load>
 8003148:	ed8d 0a01 	vstr	s0, [sp, #4]
 800314c:	9b01      	ldr	r3, [sp, #4]
              break;
 800314e:	e7ec      	b.n	800312a <RI_GetRegisterGlobal+0x15e>
 8003150:	08008434 	.word	0x08008434
 8003154:	0800840c 	.word	0x0800840c
 8003158:	08008400 	.word	0x08008400
 800315c:	20000834 	.word	0x20000834

08003160 <RI_GetRegisterMotor1>:
  uint8_t RI_GetRegisterMotor1(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace) {
 8003160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003164:	b09e      	sub	sp, #120	@ 0x78
 8003166:	461d      	mov	r5, r3
    switch (typeID)
 8003168:	f1a1 0308 	sub.w	r3, r1, #8
  uint8_t RI_GetRegisterMotor1(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace) {
 800316c:	f9bd c090 	ldrsh.w	ip, [sp, #144]	@ 0x90
 8003170:	4614      	mov	r4, r2
    switch (typeID)
 8003172:	2b20      	cmp	r3, #32
 8003174:	d812      	bhi.n	800319c <RI_GetRegisterMotor1+0x3c>
 8003176:	e8df f003 	tbb	[pc, r3]
 800317a:	1135      	.short	0x1135
 800317c:	11111111 	.word	0x11111111
 8003180:	11721111 	.word	0x11721111
 8003184:	11111111 	.word	0x11111111
 8003188:	11481111 	.word	0x11481111
 800318c:	11111111 	.word	0x11111111
 8003190:	11681111 	.word	0x11681111
 8003194:	11111111 	.word	0x11111111
 8003198:	1111      	.short	0x1111
 800319a:	15          	.byte	0x15
 800319b:	00          	.byte	0x00
 800319c:	2007      	movs	r0, #7
  }
 800319e:	b01e      	add	sp, #120	@ 0x78
 80031a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rawData++;
 80031a4:	f5b0 7fd4 	cmp.w	r0, #424	@ 0x1a8
 80031a8:	f104 0302 	add.w	r3, r4, #2
        switch (regID)
 80031ac:	f000 8348 	beq.w	8003840 <RI_GetRegisterMotor1+0x6e0>
 80031b0:	f200 808a 	bhi.w	80032c8 <RI_GetRegisterMotor1+0x168>
 80031b4:	28e8      	cmp	r0, #232	@ 0xe8
 80031b6:	f000 82f5 	beq.w	80037a4 <RI_GetRegisterMotor1+0x644>
 80031ba:	d876      	bhi.n	80032aa <RI_GetRegisterMotor1+0x14a>
 80031bc:	2868      	cmp	r0, #104	@ 0x68
 80031be:	f000 82e6 	beq.w	800378e <RI_GetRegisterMotor1+0x62e>
 80031c2:	28a8      	cmp	r0, #168	@ 0xa8
 80031c4:	f040 82de 	bne.w	8003784 <RI_GetRegisterMotor1+0x624>
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 80031c8:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = (uint16_t)sizeof(ApplicationConfig_reg_t);
 80031cc:	2210      	movs	r2, #16
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 80031ce:	f1bc 0f11 	cmp.w	ip, #17
            *rawSize = (uint16_t)sizeof(ApplicationConfig_reg_t);
 80031d2:	8022      	strh	r2, [r4, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 80031d4:	f200 82b9 	bhi.w	800374a <RI_GetRegisterMotor1+0x5ea>
 80031d8:	2312      	movs	r3, #18
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 80031da:	2008      	movs	r0, #8
        *size = (*rawSize) + 2U;
 80031dc:	802b      	strh	r3, [r5, #0]
  }
 80031de:	b01e      	add	sp, #120	@ 0x78
 80031e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (freeSpace > 0)
 80031e4:	f1bc 0f00 	cmp.w	ip, #0
 80031e8:	f340 82bc 	ble.w	8003764 <RI_GetRegisterMotor1+0x604>
          switch (regID)
 80031ec:	2888      	cmp	r0, #136	@ 0x88
 80031ee:	f000 82c1 	beq.w	8003774 <RI_GetRegisterMotor1+0x614>
 80031f2:	28c8      	cmp	r0, #200	@ 0xc8
 80031f4:	f000 82b8 	beq.w	8003768 <RI_GetRegisterMotor1+0x608>
 80031f8:	2848      	cmp	r0, #72	@ 0x48
 80031fa:	f000 82bf 	beq.w	800377c <RI_GetRegisterMotor1+0x61c>
 80031fe:	2005      	movs	r0, #5
          *size = 1;
 8003200:	2301      	movs	r3, #1
 8003202:	802b      	strh	r3, [r5, #0]
  }
 8003204:	b01e      	add	sp, #120	@ 0x78
 8003206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (freeSpace >= 4)
 800320a:	f1bc 0f03 	cmp.w	ip, #3
 800320e:	f340 8257 	ble.w	80036c0 <RI_GetRegisterMotor1+0x560>
          switch (regID)
 8003212:	f5b0 7fac 	cmp.w	r0, #344	@ 0x158
 8003216:	f000 8334 	beq.w	8003882 <RI_GetRegisterMotor1+0x722>
 800321a:	f200 8220 	bhi.w	800365e <RI_GetRegisterMotor1+0x4fe>
 800321e:	2898      	cmp	r0, #152	@ 0x98
 8003220:	f000 8327 	beq.w	8003872 <RI_GetRegisterMotor1+0x712>
 8003224:	f240 8232 	bls.w	800368c <RI_GetRegisterMotor1+0x52c>
 8003228:	28d8      	cmp	r0, #216	@ 0xd8
 800322a:	f000 831d 	beq.w	8003868 <RI_GetRegisterMotor1+0x708>
 800322e:	f5b0 7f8c 	cmp.w	r0, #280	@ 0x118
 8003232:	f040 83f1 	bne.w	8003a18 <RI_GetRegisterMotor1+0x8b8>
              *regdata32 = STO_PLL_GetObservedBemfLevel(&STO_PLL_M1);
 8003236:	48ad      	ldr	r0, [pc, #692]	@ (80034ec <RI_GetRegisterMotor1+0x38c>)
 8003238:	f004 fec2 	bl	8007fc0 <STO_PLL_GetObservedBemfLevel>
 800323c:	6020      	str	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 800323e:	2000      	movs	r0, #0
          *size = 4;
 8003240:	2304      	movs	r3, #4
 8003242:	802b      	strh	r3, [r5, #0]
  }
 8003244:	b01e      	add	sp, #120	@ 0x78
 8003246:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        switch (regID)
 800324a:	28a0      	cmp	r0, #160	@ 0xa0
 800324c:	f000 8259 	beq.w	8003702 <RI_GetRegisterMotor1+0x5a2>
 8003250:	28e0      	cmp	r0, #224	@ 0xe0
 8003252:	f000 8239 	beq.w	80036c8 <RI_GetRegisterMotor1+0x568>
            *size= 0 ; /* */
 8003256:	2300      	movs	r3, #0
 8003258:	802b      	strh	r3, [r5, #0]
            retVal = MCP_ERROR_UNKNOWN_REG;
 800325a:	2005      	movs	r0, #5
            break;
 800325c:	e79f      	b.n	800319e <RI_GetRegisterMotor1+0x3e>
        if (freeSpace >= 2)
 800325e:	f1bc 0f01 	cmp.w	ip, #1
 8003262:	f340 822d 	ble.w	80036c0 <RI_GetRegisterMotor1+0x560>
          switch (regID)
 8003266:	f5b0 6f29 	cmp.w	r0, #2704	@ 0xa90
 800326a:	f000 8360 	beq.w	800392e <RI_GetRegisterMotor1+0x7ce>
 800326e:	f200 80b3 	bhi.w	80033d8 <RI_GetRegisterMotor1+0x278>
 8003272:	f5b0 6f92 	cmp.w	r0, #1168	@ 0x490
 8003276:	f000 8355 	beq.w	8003924 <RI_GetRegisterMotor1+0x7c4>
 800327a:	f200 8099 	bhi.w	80033b0 <RI_GetRegisterMotor1+0x250>
 800327e:	f5b0 7f34 	cmp.w	r0, #720	@ 0x2d0
 8003282:	f000 834a 	beq.w	800391a <RI_GetRegisterMotor1+0x7ba>
 8003286:	d965      	bls.n	8003354 <RI_GetRegisterMotor1+0x1f4>
 8003288:	f5b0 7f74 	cmp.w	r0, #976	@ 0x3d0
 800328c:	f000 833c 	beq.w	8003908 <RI_GetRegisterMotor1+0x7a8>
 8003290:	d950      	bls.n	8003334 <RI_GetRegisterMotor1+0x1d4>
 8003292:	f5b0 6f82 	cmp.w	r0, #1040	@ 0x410
 8003296:	d144      	bne.n	8003322 <RI_GetRegisterMotor1+0x1c2>
              STO_CR_GetObserverGains(&STO_CR_M1, &hC1, &hC2);
 8003298:	4895      	ldr	r0, [pc, #596]	@ (80034f0 <RI_GetRegisterMotor1+0x390>)
 800329a:	aa1b      	add	r2, sp, #108	@ 0x6c
 800329c:	a91a      	add	r1, sp, #104	@ 0x68
 800329e:	f004 fb7f 	bl	80079a0 <STO_CR_GetObserverGains>
              *regdata16 = hC2;
 80032a2:	f8bd 306c 	ldrh.w	r3, [sp, #108]	@ 0x6c
 80032a6:	8023      	strh	r3, [r4, #0]
              break;
 80032a8:	e13e      	b.n	8003528 <RI_GetRegisterMotor1+0x3c8>
 80032aa:	f5b0 7f94 	cmp.w	r0, #296	@ 0x128
 80032ae:	f040 8269 	bne.w	8003784 <RI_GetRegisterMotor1+0x624>
            if ((*rawSize) +2U > (uint16_t)freeSpace)
 80032b2:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = 12;
 80032b6:	220c      	movs	r2, #12
            if ((*rawSize) +2U > (uint16_t)freeSpace)
 80032b8:	f1bc 0f0d 	cmp.w	ip, #13
            *rawSize = 12;
 80032bc:	8022      	strh	r2, [r4, #0]
            if ((*rawSize) +2U > (uint16_t)freeSpace)
 80032be:	f200 8238 	bhi.w	8003732 <RI_GetRegisterMotor1+0x5d2>
 80032c2:	230e      	movs	r3, #14
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 80032c4:	2008      	movs	r0, #8
 80032c6:	e789      	b.n	80031dc <RI_GetRegisterMotor1+0x7c>
 80032c8:	f5b0 7f0a 	cmp.w	r0, #552	@ 0x228
 80032cc:	f000 8275 	beq.w	80037ba <RI_GetRegisterMotor1+0x65a>
 80032d0:	f5b0 7f5a 	cmp.w	r0, #872	@ 0x368
 80032d4:	d112      	bne.n	80032fc <RI_GetRegisterMotor1+0x19c>
            *rawSize = 4;
 80032d6:	2304      	movs	r3, #4
 80032d8:	8023      	strh	r3, [r4, #0]
            *iqref = (uint16_t)MCI_GetIqdref(pMCIN).q;
 80032da:	4886      	ldr	r0, [pc, #536]	@ (80034f4 <RI_GetRegisterMotor1+0x394>)
 80032dc:	f7fd ffce 	bl	800127c <MCI_GetIqdref>
 80032e0:	4603      	mov	r3, r0
 80032e2:	8063      	strh	r3, [r4, #2]
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 80032e4:	4883      	ldr	r0, [pc, #524]	@ (80034f4 <RI_GetRegisterMotor1+0x394>)
            *iqref = (uint16_t)MCI_GetIqdref(pMCIN).q;
 80032e6:	931a      	str	r3, [sp, #104]	@ 0x68
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 80032e8:	f7fd ffc8 	bl	800127c <MCI_GetIqdref>
        *size = (*rawSize) + 2U;
 80032ec:	8823      	ldrh	r3, [r4, #0]
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 80032ee:	f3c0 400f 	ubfx	r0, r0, #16, #16
        *size = (*rawSize) + 2U;
 80032f2:	3302      	adds	r3, #2
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 80032f4:	80a0      	strh	r0, [r4, #4]
        *size = (*rawSize) + 2U;
 80032f6:	b29b      	uxth	r3, r3
    uint8_t retVal = MCP_CMD_OK;
 80032f8:	2000      	movs	r0, #0
            break;
 80032fa:	e76f      	b.n	80031dc <RI_GetRegisterMotor1+0x7c>
 80032fc:	f5b0 7ff4 	cmp.w	r0, #488	@ 0x1e8
 8003300:	f040 8240 	bne.w	8003784 <RI_GetRegisterMotor1+0x624>
            *rawSize = 4;
 8003304:	2304      	movs	r3, #4
 8003306:	8023      	strh	r3, [r4, #0]
            *torque = MCI_GetLastRampFinalTorque(pMCIN);
 8003308:	487a      	ldr	r0, [pc, #488]	@ (80034f4 <RI_GetRegisterMotor1+0x394>)
 800330a:	f7fd ff77 	bl	80011fc <MCI_GetLastRampFinalTorque>
 800330e:	8060      	strh	r0, [r4, #2]
            *duration = MCI_GetLastRampFinalDuration(pMCIN) ;
 8003310:	4878      	ldr	r0, [pc, #480]	@ (80034f4 <RI_GetRegisterMotor1+0x394>)
 8003312:	f7fd ff77 	bl	8001204 <MCI_GetLastRampFinalDuration>
        *size = (*rawSize) + 2U;
 8003316:	8823      	ldrh	r3, [r4, #0]
            *duration = MCI_GetLastRampFinalDuration(pMCIN) ;
 8003318:	80a0      	strh	r0, [r4, #4]
        *size = (*rawSize) + 2U;
 800331a:	3302      	adds	r3, #2
 800331c:	b29b      	uxth	r3, r3
    uint8_t retVal = MCP_CMD_OK;
 800331e:	2000      	movs	r0, #0
            break;
 8003320:	e75c      	b.n	80031dc <RI_GetRegisterMotor1+0x7c>
 8003322:	f5b0 6f8a 	cmp.w	r0, #1104	@ 0x450
 8003326:	f040 8375 	bne.w	8003a14 <RI_GetRegisterMotor1+0x8b4>
              *regdata16 = PID_GetKI (&(&STO_PLL_M1)->PIRegulator);
 800332a:	4873      	ldr	r0, [pc, #460]	@ (80034f8 <RI_GetRegisterMotor1+0x398>)
 800332c:	f002 fef8 	bl	8006120 <PID_GetKI>
 8003330:	8020      	strh	r0, [r4, #0]
              break;
 8003332:	e0f9      	b.n	8003528 <RI_GetRegisterMotor1+0x3c8>
 8003334:	f5b0 7f54 	cmp.w	r0, #848	@ 0x350
 8003338:	f000 8339 	beq.w	80039ae <RI_GetRegisterMotor1+0x84e>
 800333c:	f5b0 7f64 	cmp.w	r0, #912	@ 0x390
 8003340:	d119      	bne.n	8003376 <RI_GetRegisterMotor1+0x216>
              STO_PLL_GetObserverGains(&STO_PLL_M1, &hC1, &hC2);
 8003342:	486a      	ldr	r0, [pc, #424]	@ (80034ec <RI_GetRegisterMotor1+0x38c>)
 8003344:	aa1b      	add	r2, sp, #108	@ 0x6c
 8003346:	a91a      	add	r1, sp, #104	@ 0x68
 8003348:	f004 fe20 	bl	8007f8c <STO_PLL_GetObserverGains>
              *regdata16 = hC2;
 800334c:	f8bd 306c 	ldrh.w	r3, [sp, #108]	@ 0x6c
 8003350:	8023      	strh	r3, [r4, #0]
              break;
 8003352:	e0e9      	b.n	8003528 <RI_GetRegisterMotor1+0x3c8>
 8003354:	f5b0 7fc8 	cmp.w	r0, #400	@ 0x190
 8003358:	f000 8324 	beq.w	80039a4 <RI_GetRegisterMotor1+0x844>
 800335c:	d91d      	bls.n	800339a <RI_GetRegisterMotor1+0x23a>
 800335e:	f5b0 7f04 	cmp.w	r0, #528	@ 0x210
 8003362:	f000 831a 	beq.w	800399a <RI_GetRegisterMotor1+0x83a>
 8003366:	f5b0 7f24 	cmp.w	r0, #656	@ 0x290
 800336a:	d10d      	bne.n	8003388 <RI_GetRegisterMotor1+0x228>
              *regdata16 = PID_GetKP(&PIDIdHandle_M1);
 800336c:	4863      	ldr	r0, [pc, #396]	@ (80034fc <RI_GetRegisterMotor1+0x39c>)
 800336e:	f002 fed3 	bl	8006118 <PID_GetKP>
 8003372:	8020      	strh	r0, [r4, #0]
              break;
 8003374:	e0d8      	b.n	8003528 <RI_GetRegisterMotor1+0x3c8>
 8003376:	f5b0 7f44 	cmp.w	r0, #784	@ 0x310
 800337a:	f040 834b 	bne.w	8003a14 <RI_GetRegisterMotor1+0x8b4>
              *regdata16 = PID_GetKD(&PIDIdHandle_M1);
 800337e:	485f      	ldr	r0, [pc, #380]	@ (80034fc <RI_GetRegisterMotor1+0x39c>)
 8003380:	f002 fefa 	bl	8006178 <PID_GetKD>
 8003384:	8020      	strh	r0, [r4, #0]
              break;
 8003386:	e0cf      	b.n	8003528 <RI_GetRegisterMotor1+0x3c8>
 8003388:	f5b0 7fe8 	cmp.w	r0, #464	@ 0x1d0
 800338c:	f040 8342 	bne.w	8003a14 <RI_GetRegisterMotor1+0x8b4>
              *regdata16 = PID_GetKI(&PIDIqHandle_M1);
 8003390:	485b      	ldr	r0, [pc, #364]	@ (8003500 <RI_GetRegisterMotor1+0x3a0>)
 8003392:	f002 fec5 	bl	8006120 <PID_GetKI>
 8003396:	8020      	strh	r0, [r4, #0]
              break;
 8003398:	e0c6      	b.n	8003528 <RI_GetRegisterMotor1+0x3c8>
 800339a:	28d0      	cmp	r0, #208	@ 0xd0
 800339c:	f000 82f8 	beq.w	8003990 <RI_GetRegisterMotor1+0x830>
 80033a0:	f5b0 7f88 	cmp.w	r0, #272	@ 0x110
 80033a4:	d134      	bne.n	8003410 <RI_GetRegisterMotor1+0x2b0>
              *regdata16 = PID_GetKD(&PIDSpeedHandle_M1);
 80033a6:	4857      	ldr	r0, [pc, #348]	@ (8003504 <RI_GetRegisterMotor1+0x3a4>)
 80033a8:	f002 fee6 	bl	8006178 <PID_GetKD>
 80033ac:	8020      	strh	r0, [r4, #0]
              break;
 80033ae:	e0bb      	b.n	8003528 <RI_GetRegisterMotor1+0x3c8>
 80033b0:	f5b0 6f0d 	cmp.w	r0, #2256	@ 0x8d0
 80033b4:	f000 8329 	beq.w	8003a0a <RI_GetRegisterMotor1+0x8aa>
 80033b8:	d949      	bls.n	800344e <RI_GetRegisterMotor1+0x2ee>
 80033ba:	f5b0 6f1d 	cmp.w	r0, #2512	@ 0x9d0
 80033be:	f000 831f 	beq.w	8003a00 <RI_GetRegisterMotor1+0x8a0>
 80033c2:	d936      	bls.n	8003432 <RI_GetRegisterMotor1+0x2d2>
 80033c4:	f5b0 6f21 	cmp.w	r0, #2576	@ 0xa10
 80033c8:	d12a      	bne.n	8003420 <RI_GetRegisterMotor1+0x2c0>
              *regdata16 = MCI_GetVqd(pMCIN).d;
 80033ca:	484a      	ldr	r0, [pc, #296]	@ (80034f4 <RI_GetRegisterMotor1+0x394>)
 80033cc:	f7fd ff64 	bl	8001298 <MCI_GetVqd>
 80033d0:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80033d4:	8023      	strh	r3, [r4, #0]
              break;
 80033d6:	e0a7      	b.n	8003528 <RI_GetRegisterMotor1+0x3c8>
 80033d8:	f5b0 6f79 	cmp.w	r0, #3984	@ 0xf90
 80033dc:	f000 830b 	beq.w	80039f6 <RI_GetRegisterMotor1+0x896>
 80033e0:	f240 8092 	bls.w	8003508 <RI_GetRegisterMotor1+0x3a8>
 80033e4:	f241 5350 	movw	r3, #5456	@ 0x1550
 80033e8:	4298      	cmp	r0, r3
 80033ea:	f000 82ff 	beq.w	80039ec <RI_GetRegisterMotor1+0x88c>
 80033ee:	d968      	bls.n	80034c2 <RI_GetRegisterMotor1+0x362>
 80033f0:	f241 6350 	movw	r3, #5712	@ 0x1650
 80033f4:	4298      	cmp	r0, r3
 80033f6:	f000 82f4 	beq.w	80039e2 <RI_GetRegisterMotor1+0x882>
 80033fa:	f240 810f 	bls.w	800361c <RI_GetRegisterMotor1+0x4bc>
 80033fe:	f641 03d0 	movw	r3, #6352	@ 0x18d0
 8003402:	4298      	cmp	r0, r3
 8003404:	d153      	bne.n	80034ae <RI_GetRegisterMotor1+0x34e>
              *regdataU16 = PID_GetKIDivisorPOW2(&(&STO_PLL_M1)->PIRegulator);
 8003406:	483c      	ldr	r0, [pc, #240]	@ (80034f8 <RI_GetRegisterMotor1+0x398>)
 8003408:	f002 fe9a 	bl	8006140 <PID_GetKIDivisorPOW2>
 800340c:	8020      	strh	r0, [r4, #0]
              break;
 800340e:	e08b      	b.n	8003528 <RI_GetRegisterMotor1+0x3c8>
 8003410:	2890      	cmp	r0, #144	@ 0x90
 8003412:	f040 82ff 	bne.w	8003a14 <RI_GetRegisterMotor1+0x8b4>
              *regdata16 = PID_GetKP(&PIDSpeedHandle_M1);
 8003416:	483b      	ldr	r0, [pc, #236]	@ (8003504 <RI_GetRegisterMotor1+0x3a4>)
 8003418:	f002 fe7e 	bl	8006118 <PID_GetKP>
 800341c:	8020      	strh	r0, [r4, #0]
              break;
 800341e:	e083      	b.n	8003528 <RI_GetRegisterMotor1+0x3c8>
 8003420:	f5b0 6f25 	cmp.w	r0, #2640	@ 0xa50
 8003424:	f040 82f6 	bne.w	8003a14 <RI_GetRegisterMotor1+0x8b4>
              *regdata16 = MCI_GetValphabeta(pMCIN).alpha;
 8003428:	4832      	ldr	r0, [pc, #200]	@ (80034f4 <RI_GetRegisterMotor1+0x394>)
 800342a:	f7fd ff43 	bl	80012b4 <MCI_GetValphabeta>
 800342e:	8020      	strh	r0, [r4, #0]
              break;
 8003430:	e07a      	b.n	8003528 <RI_GetRegisterMotor1+0x3c8>
 8003432:	f5b0 6f15 	cmp.w	r0, #2384	@ 0x950
 8003436:	f000 82cf 	beq.w	80039d8 <RI_GetRegisterMotor1+0x878>
 800343a:	f5b0 6f19 	cmp.w	r0, #2448	@ 0x990
 800343e:	d113      	bne.n	8003468 <RI_GetRegisterMotor1+0x308>
              *regdata16 = MCI_GetIqdref(pMCIN).d;
 8003440:	482c      	ldr	r0, [pc, #176]	@ (80034f4 <RI_GetRegisterMotor1+0x394>)
 8003442:	f7fd ff1b 	bl	800127c <MCI_GetIqdref>
 8003446:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800344a:	8023      	strh	r3, [r4, #0]
              break;
 800344c:	e06c      	b.n	8003528 <RI_GetRegisterMotor1+0x3c8>
 800344e:	f5b0 6f01 	cmp.w	r0, #2064	@ 0x810
 8003452:	f000 82ba 	beq.w	80039ca <RI_GetRegisterMotor1+0x86a>
 8003456:	d91d      	bls.n	8003494 <RI_GetRegisterMotor1+0x334>
 8003458:	f5b0 6f05 	cmp.w	r0, #2128	@ 0x850
 800345c:	d10f      	bne.n	800347e <RI_GetRegisterMotor1+0x31e>
              *regdata16 = MCI_GetIalphabeta(pMCIN).alpha;
 800345e:	4825      	ldr	r0, [pc, #148]	@ (80034f4 <RI_GetRegisterMotor1+0x394>)
 8003460:	f7fd fef0 	bl	8001244 <MCI_GetIalphabeta>
 8003464:	8020      	strh	r0, [r4, #0]
              break;
 8003466:	e05f      	b.n	8003528 <RI_GetRegisterMotor1+0x3c8>
 8003468:	f5b0 6f11 	cmp.w	r0, #2320	@ 0x910
 800346c:	f040 82d2 	bne.w	8003a14 <RI_GetRegisterMotor1+0x8b4>
              *regdata16 = MCI_GetIqd(pMCIN).d;
 8003470:	4820      	ldr	r0, [pc, #128]	@ (80034f4 <RI_GetRegisterMotor1+0x394>)
 8003472:	f7fd fef5 	bl	8001260 <MCI_GetIqd>
 8003476:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800347a:	8023      	strh	r3, [r4, #0]
              break;
 800347c:	e054      	b.n	8003528 <RI_GetRegisterMotor1+0x3c8>
 800347e:	f5b0 6f09 	cmp.w	r0, #2192	@ 0x890
 8003482:	f040 82c7 	bne.w	8003a14 <RI_GetRegisterMotor1+0x8b4>
              *regdata16 = MCI_GetIalphabeta(pMCIN).beta;
 8003486:	481b      	ldr	r0, [pc, #108]	@ (80034f4 <RI_GetRegisterMotor1+0x394>)
 8003488:	f7fd fedc 	bl	8001244 <MCI_GetIalphabeta>
 800348c:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8003490:	8023      	strh	r3, [r4, #0]
              break;
 8003492:	e049      	b.n	8003528 <RI_GetRegisterMotor1+0x3c8>
 8003494:	f5b0 6fba 	cmp.w	r0, #1488	@ 0x5d0
 8003498:	f000 8292 	beq.w	80039c0 <RI_GetRegisterMotor1+0x860>
 800349c:	f5b0 6ffa 	cmp.w	r0, #2000	@ 0x7d0
 80034a0:	f040 80ca 	bne.w	8003638 <RI_GetRegisterMotor1+0x4d8>
              *regdata16 = MCI_GetIab(pMCIN).a;
 80034a4:	4813      	ldr	r0, [pc, #76]	@ (80034f4 <RI_GetRegisterMotor1+0x394>)
 80034a6:	f7fd febf 	bl	8001228 <MCI_GetIab>
 80034aa:	8020      	strh	r0, [r4, #0]
              break;
 80034ac:	e03c      	b.n	8003528 <RI_GetRegisterMotor1+0x3c8>
 80034ae:	f641 1310 	movw	r3, #6416	@ 0x1910
 80034b2:	4298      	cmp	r0, r3
 80034b4:	f040 82ae 	bne.w	8003a14 <RI_GetRegisterMotor1+0x8b4>
              *regdataU16 = PID_GetKPDivisorPOW2(&(&STO_PLL_M1)->PIRegulator);
 80034b8:	480f      	ldr	r0, [pc, #60]	@ (80034f8 <RI_GetRegisterMotor1+0x398>)
 80034ba:	f002 fe37 	bl	800612c <PID_GetKPDivisorPOW2>
 80034be:	8020      	strh	r0, [r4, #0]
              break;
 80034c0:	e032      	b.n	8003528 <RI_GetRegisterMotor1+0x3c8>
 80034c2:	f241 4350 	movw	r3, #5200	@ 0x1450
 80034c6:	4298      	cmp	r0, r3
 80034c8:	f000 8247 	beq.w	800395a <RI_GetRegisterMotor1+0x7fa>
 80034cc:	f240 8082 	bls.w	80035d4 <RI_GetRegisterMotor1+0x474>
 80034d0:	f241 43d0 	movw	r3, #5328	@ 0x14d0
 80034d4:	4298      	cmp	r0, r3
 80034d6:	f000 823b 	beq.w	8003950 <RI_GetRegisterMotor1+0x7f0>
 80034da:	f241 5310 	movw	r3, #5392	@ 0x1510
 80034de:	4298      	cmp	r0, r3
 80034e0:	d16e      	bne.n	80035c0 <RI_GetRegisterMotor1+0x460>
              *regdataU16 = PID_GetKPDivisorPOW2(&PIDIdHandle_M1);
 80034e2:	4806      	ldr	r0, [pc, #24]	@ (80034fc <RI_GetRegisterMotor1+0x39c>)
 80034e4:	f002 fe22 	bl	800612c <PID_GetKPDivisorPOW2>
 80034e8:	8020      	strh	r0, [r4, #0]
              break;
 80034ea:	e01d      	b.n	8003528 <RI_GetRegisterMotor1+0x3c8>
 80034ec:	20000210 	.word	0x20000210
 80034f0:	20000078 	.word	0x20000078
 80034f4:	20000834 	.word	0x20000834
 80034f8:	20000244 	.word	0x20000244
 80034fc:	200004f8 	.word	0x200004f8
 8003500:	20000524 	.word	0x20000524
 8003504:	20000550 	.word	0x20000550
 8003508:	f5b0 6f4d 	cmp.w	r0, #3280	@ 0xcd0
 800350c:	f000 821b 	beq.w	8003946 <RI_GetRegisterMotor1+0x7e6>
 8003510:	d929      	bls.n	8003566 <RI_GetRegisterMotor1+0x406>
 8003512:	f5b0 6f5d 	cmp.w	r0, #3536	@ 0xdd0
 8003516:	f000 8211 	beq.w	800393c <RI_GetRegisterMotor1+0x7dc>
 800351a:	d916      	bls.n	800354a <RI_GetRegisterMotor1+0x3ea>
 800351c:	f5b0 6f65 	cmp.w	r0, #3664	@ 0xe50
 8003520:	d002      	beq.n	8003528 <RI_GetRegisterMotor1+0x3c8>
 8003522:	f5b0 6f69 	cmp.w	r0, #3728	@ 0xe90
 8003526:	d105      	bne.n	8003534 <RI_GetRegisterMotor1+0x3d4>
    uint8_t retVal = MCP_CMD_OK;
 8003528:	2000      	movs	r0, #0
          *size = 2;
 800352a:	2302      	movs	r3, #2
 800352c:	802b      	strh	r3, [r5, #0]
  }
 800352e:	b01e      	add	sp, #120	@ 0x78
 8003530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003534:	f5b0 6f61 	cmp.w	r0, #3600	@ 0xe10
 8003538:	f040 826c 	bne.w	8003a14 <RI_GetRegisterMotor1+0x8b4>
              *regdata16 = STO_CR_GetEstimatedBemf(&STO_CR_M1).beta;
 800353c:	48b2      	ldr	r0, [pc, #712]	@ (8003808 <RI_GetRegisterMotor1+0x6a8>)
 800353e:	f004 fa11 	bl	8007964 <STO_CR_GetEstimatedBemf>
 8003542:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8003546:	8023      	strh	r3, [r4, #0]
              break;
 8003548:	e7ee      	b.n	8003528 <RI_GetRegisterMotor1+0x3c8>
 800354a:	f5b0 6f55 	cmp.w	r0, #3408	@ 0xd50
 800354e:	f000 81d6 	beq.w	80038fe <RI_GetRegisterMotor1+0x79e>
 8003552:	f5b0 6f59 	cmp.w	r0, #3472	@ 0xd90
 8003556:	d113      	bne.n	8003580 <RI_GetRegisterMotor1+0x420>
              *regdata16 = STO_CR_GetEstimatedCurrent(&STO_CR_M1).beta;
 8003558:	48ab      	ldr	r0, [pc, #684]	@ (8003808 <RI_GetRegisterMotor1+0x6a8>)
 800355a:	f004 fa0f 	bl	800797c <STO_CR_GetEstimatedCurrent>
 800355e:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8003562:	8023      	strh	r3, [r4, #0]
              break;
 8003564:	e7e0      	b.n	8003528 <RI_GetRegisterMotor1+0x3c8>
 8003566:	f5b0 6f41 	cmp.w	r0, #3088	@ 0xc10
 800356a:	f000 820a 	beq.w	8003982 <RI_GetRegisterMotor1+0x822>
 800356e:	d91b      	bls.n	80035a8 <RI_GetRegisterMotor1+0x448>
 8003570:	f5b0 6f45 	cmp.w	r0, #3152	@ 0xc50
 8003574:	d10d      	bne.n	8003592 <RI_GetRegisterMotor1+0x432>
              *regdata16 = STO_PLL_GetEstimatedBemf(&STO_PLL_M1).alpha;
 8003576:	48a5      	ldr	r0, [pc, #660]	@ (800380c <RI_GetRegisterMotor1+0x6ac>)
 8003578:	f004 fcea 	bl	8007f50 <STO_PLL_GetEstimatedBemf>
 800357c:	8020      	strh	r0, [r4, #0]
              break;
 800357e:	e7d3      	b.n	8003528 <RI_GetRegisterMotor1+0x3c8>
 8003580:	f5b0 6f51 	cmp.w	r0, #3344	@ 0xd10
 8003584:	f040 8246 	bne.w	8003a14 <RI_GetRegisterMotor1+0x8b4>
              *regdata16 = SPD_GetS16Speed((SpeednPosFdbk_Handle_t*) &STO_CR_M1);
 8003588:	489f      	ldr	r0, [pc, #636]	@ (8003808 <RI_GetRegisterMotor1+0x6a8>)
 800358a:	f003 fe21 	bl	80071d0 <SPD_GetS16Speed>
 800358e:	8020      	strh	r0, [r4, #0]
              break;
 8003590:	e7ca      	b.n	8003528 <RI_GetRegisterMotor1+0x3c8>
 8003592:	f5b0 6f49 	cmp.w	r0, #3216	@ 0xc90
 8003596:	f040 823d 	bne.w	8003a14 <RI_GetRegisterMotor1+0x8b4>
              *regdata16 = STO_PLL_GetEstimatedBemf(&STO_PLL_M1).beta;
 800359a:	489c      	ldr	r0, [pc, #624]	@ (800380c <RI_GetRegisterMotor1+0x6ac>)
 800359c:	f004 fcd8 	bl	8007f50 <STO_PLL_GetEstimatedBemf>
 80035a0:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80035a4:	8023      	strh	r3, [r4, #0]
              break;
 80035a6:	e7bf      	b.n	8003528 <RI_GetRegisterMotor1+0x3c8>
 80035a8:	f5b0 6f39 	cmp.w	r0, #2960	@ 0xb90
 80035ac:	f000 81e4 	beq.w	8003978 <RI_GetRegisterMotor1+0x818>
 80035b0:	f5b0 6f3d 	cmp.w	r0, #3024	@ 0xbd0
 80035b4:	d11e      	bne.n	80035f4 <RI_GetRegisterMotor1+0x494>
              *regdata16 = STO_PLL_GetEstimatedCurrent(&STO_PLL_M1).alpha;
 80035b6:	4895      	ldr	r0, [pc, #596]	@ (800380c <RI_GetRegisterMotor1+0x6ac>)
 80035b8:	f004 fcd6 	bl	8007f68 <STO_PLL_GetEstimatedCurrent>
 80035bc:	8020      	strh	r0, [r4, #0]
              break;
 80035be:	e7b3      	b.n	8003528 <RI_GetRegisterMotor1+0x3c8>
 80035c0:	f241 4390 	movw	r3, #5264	@ 0x1490
 80035c4:	4298      	cmp	r0, r3
 80035c6:	f040 8225 	bne.w	8003a14 <RI_GetRegisterMotor1+0x8b4>
              *regdataU16 = (uint16_t)PID_GetKIDivisorPOW2(&PIDSpeedHandle_M1);
 80035ca:	4891      	ldr	r0, [pc, #580]	@ (8003810 <RI_GetRegisterMotor1+0x6b0>)
 80035cc:	f002 fdb8 	bl	8006140 <PID_GetKIDivisorPOW2>
 80035d0:	8020      	strh	r0, [r4, #0]
              break;
 80035d2:	e7a9      	b.n	8003528 <RI_GetRegisterMotor1+0x3c8>
 80035d4:	f241 0310 	movw	r3, #4112	@ 0x1010
 80035d8:	4298      	cmp	r0, r3
 80035da:	f000 81c8 	beq.w	800396e <RI_GetRegisterMotor1+0x80e>
 80035de:	f241 0350 	movw	r3, #4176	@ 0x1050
 80035e2:	4298      	cmp	r0, r3
 80035e4:	d10f      	bne.n	8003606 <RI_GetRegisterMotor1+0x4a6>
              *regdata16 = FF_GetVqdAvPIout(&FF_M1).d;
 80035e6:	488b      	ldr	r0, [pc, #556]	@ (8003814 <RI_GetRegisterMotor1+0x6b4>)
 80035e8:	f002 fbf4 	bl	8005dd4 <FF_GetVqdAvPIout>
 80035ec:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80035f0:	8023      	strh	r3, [r4, #0]
              break;
 80035f2:	e799      	b.n	8003528 <RI_GetRegisterMotor1+0x3c8>
 80035f4:	f5b0 6f35 	cmp.w	r0, #2896	@ 0xb50
 80035f8:	f040 820c 	bne.w	8003a14 <RI_GetRegisterMotor1+0x8b4>
              *regdata16 = SPD_GetElAngle((SpeednPosFdbk_Handle_t *)&STO_PLL_M1);
 80035fc:	4883      	ldr	r0, [pc, #524]	@ (800380c <RI_GetRegisterMotor1+0x6ac>)
 80035fe:	f003 fda1 	bl	8007144 <SPD_GetElAngle>
 8003602:	8020      	strh	r0, [r4, #0]
              break;
 8003604:	e790      	b.n	8003528 <RI_GetRegisterMotor1+0x3c8>
 8003606:	f5b0 6f7d 	cmp.w	r0, #4048	@ 0xfd0
 800360a:	f040 8203 	bne.w	8003a14 <RI_GetRegisterMotor1+0x8b4>
              *regdata16 = FF_GetVqdff(&FF_M1).d;
 800360e:	4881      	ldr	r0, [pc, #516]	@ (8003814 <RI_GetRegisterMotor1+0x6b4>)
 8003610:	f002 fbd4 	bl	8005dbc <FF_GetVqdff>
 8003614:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8003618:	8023      	strh	r3, [r4, #0]
              break;
 800361a:	e785      	b.n	8003528 <RI_GetRegisterMotor1+0x3c8>
 800361c:	f241 53d0 	movw	r3, #5584	@ 0x15d0
 8003620:	4298      	cmp	r0, r3
 8003622:	f000 819f 	beq.w	8003964 <RI_GetRegisterMotor1+0x804>
 8003626:	f241 6310 	movw	r3, #5648	@ 0x1610
 800362a:	4298      	cmp	r0, r3
 800362c:	d10d      	bne.n	800364a <RI_GetRegisterMotor1+0x4ea>
              *regdataU16 = PID_GetKIDivisorPOW2(&PIDIqHandle_M1);
 800362e:	487a      	ldr	r0, [pc, #488]	@ (8003818 <RI_GetRegisterMotor1+0x6b8>)
 8003630:	f002 fd86 	bl	8006140 <PID_GetKIDivisorPOW2>
 8003634:	8020      	strh	r0, [r4, #0]
              break;
 8003636:	e777      	b.n	8003528 <RI_GetRegisterMotor1+0x3c8>
 8003638:	f5b0 6fb2 	cmp.w	r0, #1424	@ 0x590
 800363c:	f040 81ea 	bne.w	8003a14 <RI_GetRegisterMotor1+0x8b4>
              *regdataU16 = VBS_GetAvBusVoltage_V(BusVoltageSensor);
 8003640:	4876      	ldr	r0, [pc, #472]	@ (800381c <RI_GetRegisterMotor1+0x6bc>)
 8003642:	f002 fad1 	bl	8005be8 <VBS_GetAvBusVoltage_V>
 8003646:	8020      	strh	r0, [r4, #0]
              break;
 8003648:	e76e      	b.n	8003528 <RI_GetRegisterMotor1+0x3c8>
 800364a:	f241 5390 	movw	r3, #5520	@ 0x1590
 800364e:	4298      	cmp	r0, r3
 8003650:	f040 81e0 	bne.w	8003a14 <RI_GetRegisterMotor1+0x8b4>
              *regdataU16 = PID_GetKDDivisorPOW2(&PIDIdHandle_M1);
 8003654:	4872      	ldr	r0, [pc, #456]	@ (8003820 <RI_GetRegisterMotor1+0x6c0>)
 8003656:	f002 fd93 	bl	8006180 <PID_GetKDDivisorPOW2>
 800365a:	8020      	strh	r0, [r4, #0]
              break;
 800365c:	e764      	b.n	8003528 <RI_GetRegisterMotor1+0x3c8>
 800365e:	f5b0 7f06 	cmp.w	r0, #536	@ 0x218
 8003662:	f000 8121 	beq.w	80038a8 <RI_GetRegisterMotor1+0x748>
 8003666:	d91f      	bls.n	80036a8 <RI_GetRegisterMotor1+0x548>
 8003668:	f5b0 7f16 	cmp.w	r0, #600	@ 0x258
 800366c:	f000 8118 	beq.w	80038a0 <RI_GetRegisterMotor1+0x740>
 8003670:	f641 3358 	movw	r3, #7000	@ 0x1b58
 8003674:	4298      	cmp	r0, r3
 8003676:	f040 81cf 	bne.w	8003a18 <RI_GetRegisterMotor1+0x8b8>
              ReadVal.Float_Val = PQD_GetAvrgElMotorPowerW(pMPM[M1]);
 800367a:	4b6a      	ldr	r3, [pc, #424]	@ (8003824 <RI_GetRegisterMotor1+0x6c4>)
 800367c:	6818      	ldr	r0, [r3, #0]
 800367e:	f002 fde7 	bl	8006250 <PQD_GetAvrgElMotorPowerW>
 8003682:	ed8d 0a01 	vstr	s0, [sp, #4]
              *regdataU32 = ReadVal.U32_Val; //cstat !UNION-type-punning
 8003686:	9b01      	ldr	r3, [sp, #4]
 8003688:	6023      	str	r3, [r4, #0]
              break;
 800368a:	e5d8      	b.n	800323e <RI_GetRegisterMotor1+0xde>
 800368c:	2818      	cmp	r0, #24
 800368e:	f000 8102 	beq.w	8003896 <RI_GetRegisterMotor1+0x736>
 8003692:	2858      	cmp	r0, #88	@ 0x58
 8003694:	f040 81c0 	bne.w	8003a18 <RI_GetRegisterMotor1+0x8b8>
              *regdata32 = (((int32_t)MCI_GetAvrgMecSpeedUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 8003698:	4863      	ldr	r0, [pc, #396]	@ (8003828 <RI_GetRegisterMotor1+0x6c8>)
 800369a:	f7fd fdb9 	bl	8001210 <MCI_GetAvrgMecSpeedUnit>
 800369e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80036a2:	0040      	lsls	r0, r0, #1
 80036a4:	6020      	str	r0, [r4, #0]
              break;
 80036a6:	e5ca      	b.n	800323e <RI_GetRegisterMotor1+0xde>
 80036a8:	f5b0 7fcc 	cmp.w	r0, #408	@ 0x198
 80036ac:	f000 80ee 	beq.w	800388c <RI_GetRegisterMotor1+0x72c>
 80036b0:	f5b0 7fec 	cmp.w	r0, #472	@ 0x1d8
 80036b4:	f040 81b0 	bne.w	8003a18 <RI_GetRegisterMotor1+0x8b8>
              *regdata32 = FF_M1.wConstant_1Q;
 80036b8:	4b56      	ldr	r3, [pc, #344]	@ (8003814 <RI_GetRegisterMotor1+0x6b4>)
 80036ba:	691b      	ldr	r3, [r3, #16]
 80036bc:	6023      	str	r3, [r4, #0]
              break;
 80036be:	e5be      	b.n	800323e <RI_GetRegisterMotor1+0xde>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 80036c0:	2008      	movs	r0, #8
  }
 80036c2:	b01e      	add	sp, #120	@ 0x78
 80036c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            retVal = RI_MovString (MotorConfig_reg[motorID]->name ,charData, size, freeSpace);
 80036c8:	4b58      	ldr	r3, [pc, #352]	@ (800382c <RI_GetRegisterMotor1+0x6cc>)
 80036ca:	681a      	ldr	r2, [r3, #0]
  *size= 1U ; /* /0 is the min String size */
 80036cc:	2301      	movs	r3, #1
 80036ce:	802b      	strh	r3, [r5, #0]
            retVal = RI_MovString (MotorConfig_reg[motorID]->name ,charData, size, freeSpace);
 80036d0:	f102 0124 	add.w	r1, r2, #36	@ 0x24
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80036d4:	f992 2024 	ldrsb.w	r2, [r2, #36]	@ 0x24
 80036d8:	b17a      	cbz	r2, 80036fa <RI_GetRegisterMotor1+0x59a>
 80036da:	fa1f fc8c 	uxth.w	ip, ip
 80036de:	e008      	b.n	80036f2 <RI_GetRegisterMotor1+0x592>
    *tempdestString = *tempsrcString;
 80036e0:	f804 2b01 	strb.w	r2, [r4], #1
    *size = *size + 1U;
 80036e4:	882b      	ldrh	r3, [r5, #0]
 80036e6:	3301      	adds	r3, #1
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	802b      	strh	r3, [r5, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80036ec:	f911 2f01 	ldrsb.w	r2, [r1, #1]!
 80036f0:	b11a      	cbz	r2, 80036fa <RI_GetRegisterMotor1+0x59a>
 80036f2:	459c      	cmp	ip, r3
 80036f4:	d8f4      	bhi.n	80036e0 <RI_GetRegisterMotor1+0x580>
    retVal = MCP_ERROR_STRING_FORMAT;
 80036f6:	2006      	movs	r0, #6
 80036f8:	e551      	b.n	800319e <RI_GetRegisterMotor1+0x3e>
    *tempdestString = (int8_t)0;
 80036fa:	2300      	movs	r3, #0
 80036fc:	7023      	strb	r3, [r4, #0]
  uint8_t retVal = MCP_CMD_OK;
 80036fe:	2000      	movs	r0, #0
 8003700:	e54d      	b.n	800319e <RI_GetRegisterMotor1+0x3e>
            retVal = RI_MovString (PWR_BOARD_NAME[motorID], charData, size, freeSpace);
 8003702:	4a4b      	ldr	r2, [pc, #300]	@ (8003830 <RI_GetRegisterMotor1+0x6d0>)
  *size= 1U ; /* /0 is the min String size */
 8003704:	2301      	movs	r3, #1
            retVal = RI_MovString (PWR_BOARD_NAME[motorID], charData, size, freeSpace);
 8003706:	6811      	ldr	r1, [r2, #0]
  *size= 1U ; /* /0 is the min String size */
 8003708:	802b      	strh	r3, [r5, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 800370a:	f991 2000 	ldrsb.w	r2, [r1]
 800370e:	2a00      	cmp	r2, #0
 8003710:	d0f3      	beq.n	80036fa <RI_GetRegisterMotor1+0x59a>
 8003712:	fa1f fc8c 	uxth.w	ip, ip
 8003716:	e009      	b.n	800372c <RI_GetRegisterMotor1+0x5cc>
    *tempdestString = *tempsrcString;
 8003718:	f804 2b01 	strb.w	r2, [r4], #1
    *size = *size + 1U;
 800371c:	882b      	ldrh	r3, [r5, #0]
 800371e:	3301      	adds	r3, #1
 8003720:	b29b      	uxth	r3, r3
 8003722:	802b      	strh	r3, [r5, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8003724:	f911 2f01 	ldrsb.w	r2, [r1, #1]!
 8003728:	2a00      	cmp	r2, #0
 800372a:	d0e6      	beq.n	80036fa <RI_GetRegisterMotor1+0x59a>
 800372c:	459c      	cmp	ip, r3
 800372e:	d8f3      	bhi.n	8003718 <RI_GetRegisterMotor1+0x5b8>
 8003730:	e7e1      	b.n	80036f6 <RI_GetRegisterMotor1+0x596>
              memcpy(rawData, &scaleParams_M1, sizeof(ScaleParams_t) );
 8003732:	4a40      	ldr	r2, [pc, #256]	@ (8003834 <RI_GetRegisterMotor1+0x6d4>)
 8003734:	6850      	ldr	r0, [r2, #4]
 8003736:	6814      	ldr	r4, [r2, #0]
 8003738:	6891      	ldr	r1, [r2, #8]
 800373a:	68d2      	ldr	r2, [r2, #12]
 800373c:	60da      	str	r2, [r3, #12]
 800373e:	6058      	str	r0, [r3, #4]
 8003740:	601c      	str	r4, [r3, #0]
 8003742:	6099      	str	r1, [r3, #8]
    uint8_t retVal = MCP_CMD_OK;
 8003744:	2000      	movs	r0, #0
              memcpy(rawData, &scaleParams_M1, sizeof(ScaleParams_t) );
 8003746:	230e      	movs	r3, #14
 8003748:	e548      	b.n	80031dc <RI_GetRegisterMotor1+0x7c>
              ApplicationConfig_reg_t const *pApplicationConfig_reg = ApplicationConfig_reg[motorID];
 800374a:	4a3b      	ldr	r2, [pc, #236]	@ (8003838 <RI_GetRegisterMotor1+0x6d8>)
              (void)memcpy(rawData, (const uint8_t *)pApplicationConfig_reg, sizeof(ApplicationConfig_reg_t));
 800374c:	6812      	ldr	r2, [r2, #0]
 800374e:	6850      	ldr	r0, [r2, #4]
 8003750:	6814      	ldr	r4, [r2, #0]
 8003752:	6891      	ldr	r1, [r2, #8]
 8003754:	68d2      	ldr	r2, [r2, #12]
 8003756:	60da      	str	r2, [r3, #12]
 8003758:	6058      	str	r0, [r3, #4]
 800375a:	601c      	str	r4, [r3, #0]
 800375c:	6099      	str	r1, [r3, #8]
    uint8_t retVal = MCP_CMD_OK;
 800375e:	2000      	movs	r0, #0
              (void)memcpy(rawData, (const uint8_t *)pApplicationConfig_reg, sizeof(ApplicationConfig_reg_t));
 8003760:	2312      	movs	r3, #18
 8003762:	e53b      	b.n	80031dc <RI_GetRegisterMotor1+0x7c>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8003764:	4608      	mov	r0, r1
 8003766:	e51a      	b.n	800319e <RI_GetRegisterMotor1+0x3e>
              *data = (uint8_t)RUC_GetNumberOfPhases(&RevUpControlM1);
 8003768:	4834      	ldr	r0, [pc, #208]	@ (800383c <RI_GetRegisterMotor1+0x6dc>)
 800376a:	f003 fcd7 	bl	800711c <RUC_GetNumberOfPhases>
              *data = (uint8_t)MCI_GetControlMode(pMCIN);
 800376e:	7020      	strb	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8003770:	2000      	movs	r0, #0
 8003772:	e545      	b.n	8003200 <RI_GetRegisterMotor1+0xa0>
              *data = (uint8_t)MCI_GetControlMode(pMCIN);
 8003774:	482c      	ldr	r0, [pc, #176]	@ (8003828 <RI_GetRegisterMotor1+0x6c8>)
 8003776:	f7fd fd17 	bl	80011a8 <MCI_GetControlMode>
              break;
 800377a:	e7f8      	b.n	800376e <RI_GetRegisterMotor1+0x60e>
              *data = (uint8_t)MCI_GetSTMState(pMCIN);
 800377c:	482a      	ldr	r0, [pc, #168]	@ (8003828 <RI_GetRegisterMotor1+0x6c8>)
 800377e:	f7fd fcbb 	bl	80010f8 <MCI_GetSTMState>
              break;
 8003782:	e7f4      	b.n	800376e <RI_GetRegisterMotor1+0x60e>
        *size = (*rawSize) + 2U;
 8003784:	8823      	ldrh	r3, [r4, #0]
 8003786:	3302      	adds	r3, #2
            retVal = MCP_ERROR_UNKNOWN_REG;
 8003788:	2005      	movs	r0, #5
        *size = (*rawSize) + 2U;
 800378a:	b29b      	uxth	r3, r3
 800378c:	e526      	b.n	80031dc <RI_GetRegisterMotor1+0x7c>
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 800378e:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = (uint16_t)sizeof(MotorConfig_reg_t);
 8003792:	223c      	movs	r2, #60	@ 0x3c
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8003794:	f1bc 0f3d 	cmp.w	ip, #61	@ 0x3d
            *rawSize = (uint16_t)sizeof(MotorConfig_reg_t);
 8003798:	8022      	strh	r2, [r4, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 800379a:	f200 8089 	bhi.w	80038b0 <RI_GetRegisterMotor1+0x750>
 800379e:	233e      	movs	r3, #62	@ 0x3e
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 80037a0:	2008      	movs	r0, #8
 80037a2:	e51b      	b.n	80031dc <RI_GetRegisterMotor1+0x7c>
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 80037a4:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = (uint16_t)sizeof(FOCFwConfig_reg_t);
 80037a8:	220e      	movs	r2, #14
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 80037aa:	f1bc 0f0f 	cmp.w	ip, #15
            *rawSize = (uint16_t)sizeof(FOCFwConfig_reg_t);
 80037ae:	8022      	strh	r2, [r4, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 80037b0:	f200 8098 	bhi.w	80038e4 <RI_GetRegisterMotor1+0x784>
 80037b4:	2310      	movs	r3, #16
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 80037b6:	2008      	movs	r0, #8
 80037b8:	e510      	b.n	80031dc <RI_GetRegisterMotor1+0x7c>
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 80037ba:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = (uint16_t)RUC_MAX_PHASE_NUMBER*8U;
 80037be:	2328      	movs	r3, #40	@ 0x28
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 80037c0:	f1bc 0f29 	cmp.w	ip, #41	@ 0x29
            *rawSize = (uint16_t)RUC_MAX_PHASE_NUMBER*8U;
 80037c4:	8023      	strh	r3, [r4, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 80037c6:	d94c      	bls.n	8003862 <RI_GetRegisterMotor1+0x702>
                (void)RUC_GetPhase( &RevUpControlM1 ,i, &revUpPhase);
 80037c8:	f8df 8070 	ldr.w	r8, [pc, #112]	@ 800383c <RI_GetRegisterMotor1+0x6dc>
 80037cc:	4627      	mov	r7, r4
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 80037ce:	2600      	movs	r6, #0
                (void)RUC_GetPhase( &RevUpControlM1 ,i, &revUpPhase);
 80037d0:	b2f1      	uxtb	r1, r6
 80037d2:	aa1b      	add	r2, sp, #108	@ 0x6c
 80037d4:	4640      	mov	r0, r8
 80037d6:	f003 fca5 	bl	8007124 <RUC_GetPhase>
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 80037da:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	@ 0x6e
 80037de:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80037e2:	005b      	lsls	r3, r3, #1
 80037e4:	f8c7 3002 	str.w	r3, [r7, #2]
              for (i = 0; i <RUC_MAX_PHASE_NUMBER; i++)
 80037e8:	3601      	adds	r6, #1
                *finalTorque = (uint16_t)revUpPhase.hFinalTorque; //cstat !MISRAC2012-Rule-11.3
 80037ea:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 80037ee:	80fb      	strh	r3, [r7, #6]
              for (i = 0; i <RUC_MAX_PHASE_NUMBER; i++)
 80037f0:	2e05      	cmp	r6, #5
                *durationms  = revUpPhase.hDurationms;
 80037f2:	f8bd 306c 	ldrh.w	r3, [sp, #108]	@ 0x6c
 80037f6:	f827 3f08 	strh.w	r3, [r7, #8]!
              for (i = 0; i <RUC_MAX_PHASE_NUMBER; i++)
 80037fa:	d1e9      	bne.n	80037d0 <RI_GetRegisterMotor1+0x670>
        *size = (*rawSize) + 2U;
 80037fc:	8823      	ldrh	r3, [r4, #0]
 80037fe:	3302      	adds	r3, #2
    uint8_t retVal = MCP_CMD_OK;
 8003800:	2000      	movs	r0, #0
        *size = (*rawSize) + 2U;
 8003802:	b29b      	uxth	r3, r3
 8003804:	e4ea      	b.n	80031dc <RI_GetRegisterMotor1+0x7c>
 8003806:	bf00      	nop
 8003808:	20000078 	.word	0x20000078
 800380c:	20000210 	.word	0x20000210
 8003810:	20000550 	.word	0x20000550
 8003814:	200004c0 	.word	0x200004c0
 8003818:	20000524 	.word	0x20000524
 800381c:	20000030 	.word	0x20000030
 8003820:	200004f8 	.word	0x200004f8
 8003824:	20000004 	.word	0x20000004
 8003828:	20000834 	.word	0x20000834
 800382c:	20000590 	.word	0x20000590
 8003830:	20000598 	.word	0x20000598
 8003834:	2000059c 	.word	0x2000059c
 8003838:	2000058c 	.word	0x2000058c
 800383c:	20000414 	.word	0x20000414
            *rpm = (((int32_t)MCI_GetLastRampFinalSpeed(pMCIN) * U_RPM) / (int32_t)SPEED_UNIT);
 8003840:	4876      	ldr	r0, [pc, #472]	@ (8003a1c <RI_GetRegisterMotor1+0x8bc>)
 8003842:	f7fd fcd7 	bl	80011f4 <MCI_GetLastRampFinalSpeed>
 8003846:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800384a:	0043      	lsls	r3, r0, #1
 800384c:	f8c4 3002 	str.w	r3, [r4, #2]
            *duration = MCI_GetLastRampFinalDuration(pMCIN);
 8003850:	4872      	ldr	r0, [pc, #456]	@ (8003a1c <RI_GetRegisterMotor1+0x8bc>)
 8003852:	f7fd fcd7 	bl	8001204 <MCI_GetLastRampFinalDuration>
            *rawSize = 6;
 8003856:	2306      	movs	r3, #6
            *duration = MCI_GetLastRampFinalDuration(pMCIN);
 8003858:	80e0      	strh	r0, [r4, #6]
            *rawSize = 6;
 800385a:	8023      	strh	r3, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 800385c:	2000      	movs	r0, #0
            break;
 800385e:	2308      	movs	r3, #8
 8003860:	e4bc      	b.n	80031dc <RI_GetRegisterMotor1+0x7c>
 8003862:	232a      	movs	r3, #42	@ 0x2a
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8003864:	2008      	movs	r0, #8
            break;
 8003866:	e4b9      	b.n	80031dc <RI_GetRegisterMotor1+0x7c>
              *regdata32 = STO_PLL_GetEstimatedBemfLevel(&STO_PLL_M1);
 8003868:	486d      	ldr	r0, [pc, #436]	@ (8003a20 <RI_GetRegisterMotor1+0x8c0>)
 800386a:	f004 fba5 	bl	8007fb8 <STO_PLL_GetEstimatedBemfLevel>
 800386e:	6020      	str	r0, [r4, #0]
              break;
 8003870:	e4e5      	b.n	800323e <RI_GetRegisterMotor1+0xde>
              *regdata32 = (((int32_t)MCI_GetMecSpeedRefUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 8003872:	486a      	ldr	r0, [pc, #424]	@ (8003a1c <RI_GetRegisterMotor1+0x8bc>)
 8003874:	f7fd fcd4 	bl	8001220 <MCI_GetMecSpeedRefUnit>
 8003878:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800387c:	0040      	lsls	r0, r0, #1
 800387e:	6020      	str	r0, [r4, #0]
              break;
 8003880:	e4dd      	b.n	800323e <RI_GetRegisterMotor1+0xde>
              *regdata32 = STO_CR_GetEstimatedBemfLevel(&STO_CR_M1);
 8003882:	4868      	ldr	r0, [pc, #416]	@ (8003a24 <RI_GetRegisterMotor1+0x8c4>)
 8003884:	f004 f8d6 	bl	8007a34 <STO_CR_GetEstimatedBemfLevel>
 8003888:	6020      	str	r0, [r4, #0]
              break;
 800388a:	e4d8      	b.n	800323e <RI_GetRegisterMotor1+0xde>
              *regdata32 = STO_CR_GetObservedBemfLevel(&STO_CR_M1);
 800388c:	4865      	ldr	r0, [pc, #404]	@ (8003a24 <RI_GetRegisterMotor1+0x8c4>)
 800388e:	f004 f8d5 	bl	8007a3c <STO_CR_GetObservedBemfLevel>
 8003892:	6020      	str	r0, [r4, #0]
              break;
 8003894:	e4d3      	b.n	800323e <RI_GetRegisterMotor1+0xde>
              *regdataU32 = MCI_GetFaultState(pMCIN);
 8003896:	4861      	ldr	r0, [pc, #388]	@ (8003a1c <RI_GetRegisterMotor1+0x8bc>)
 8003898:	f7fd fc80 	bl	800119c <MCI_GetFaultState>
 800389c:	6020      	str	r0, [r4, #0]
              break;
 800389e:	e4ce      	b.n	800323e <RI_GetRegisterMotor1+0xde>
              *regdata32 = FF_M1.wConstant_2;
 80038a0:	4b61      	ldr	r3, [pc, #388]	@ (8003a28 <RI_GetRegisterMotor1+0x8c8>)
 80038a2:	695b      	ldr	r3, [r3, #20]
 80038a4:	6023      	str	r3, [r4, #0]
              break;
 80038a6:	e4ca      	b.n	800323e <RI_GetRegisterMotor1+0xde>
              *regdata32 = FF_M1.wConstant_1D;
 80038a8:	4b5f      	ldr	r3, [pc, #380]	@ (8003a28 <RI_GetRegisterMotor1+0x8c8>)
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	6023      	str	r3, [r4, #0]
              break;
 80038ae:	e4c6      	b.n	800323e <RI_GetRegisterMotor1+0xde>
              MotorConfig_reg_t const *pMotorConfig_reg = MotorConfig_reg[motorID];
 80038b0:	4a5e      	ldr	r2, [pc, #376]	@ (8003a2c <RI_GetRegisterMotor1+0x8cc>)
              (void)memcpy(rawData, (const uint8_t *)pMotorConfig_reg, sizeof(MotorConfig_reg_t));
 80038b2:	6812      	ldr	r2, [r2, #0]
 80038b4:	f102 0730 	add.w	r7, r2, #48	@ 0x30
 80038b8:	6814      	ldr	r4, [r2, #0]
 80038ba:	6850      	ldr	r0, [r2, #4]
 80038bc:	6891      	ldr	r1, [r2, #8]
 80038be:	68d6      	ldr	r6, [r2, #12]
 80038c0:	60de      	str	r6, [r3, #12]
 80038c2:	3210      	adds	r2, #16
 80038c4:	42ba      	cmp	r2, r7
 80038c6:	601c      	str	r4, [r3, #0]
 80038c8:	6058      	str	r0, [r3, #4]
 80038ca:	6099      	str	r1, [r3, #8]
 80038cc:	f103 0310 	add.w	r3, r3, #16
 80038d0:	d1f2      	bne.n	80038b8 <RI_GetRegisterMotor1+0x758>
 80038d2:	6810      	ldr	r0, [r2, #0]
 80038d4:	6851      	ldr	r1, [r2, #4]
 80038d6:	6892      	ldr	r2, [r2, #8]
 80038d8:	609a      	str	r2, [r3, #8]
 80038da:	6018      	str	r0, [r3, #0]
 80038dc:	6059      	str	r1, [r3, #4]
    uint8_t retVal = MCP_CMD_OK;
 80038de:	2000      	movs	r0, #0
              (void)memcpy(rawData, (const uint8_t *)pMotorConfig_reg, sizeof(MotorConfig_reg_t));
 80038e0:	233e      	movs	r3, #62	@ 0x3e
 80038e2:	e47b      	b.n	80031dc <RI_GetRegisterMotor1+0x7c>
              FOCFwConfig_reg_t const *pFOCConfig_reg = FOCConfig_reg[motorID];
 80038e4:	4a52      	ldr	r2, [pc, #328]	@ (8003a30 <RI_GetRegisterMotor1+0x8d0>)
              (void)memcpy(rawData, (const uint8_t *)pFOCConfig_reg, sizeof(FOCFwConfig_reg_t));
 80038e6:	6812      	ldr	r2, [r2, #0]
 80038e8:	6810      	ldr	r0, [r2, #0]
 80038ea:	6851      	ldr	r1, [r2, #4]
 80038ec:	6894      	ldr	r4, [r2, #8]
 80038ee:	609c      	str	r4, [r3, #8]
 80038f0:	6018      	str	r0, [r3, #0]
 80038f2:	6059      	str	r1, [r3, #4]
 80038f4:	8992      	ldrh	r2, [r2, #12]
 80038f6:	819a      	strh	r2, [r3, #12]
    uint8_t retVal = MCP_CMD_OK;
 80038f8:	2000      	movs	r0, #0
              (void)memcpy(rawData, (const uint8_t *)pFOCConfig_reg, sizeof(FOCFwConfig_reg_t));
 80038fa:	2310      	movs	r3, #16
 80038fc:	e46e      	b.n	80031dc <RI_GetRegisterMotor1+0x7c>
              *regdata16 = STO_CR_GetEstimatedCurrent(&STO_CR_M1).alpha;
 80038fe:	4849      	ldr	r0, [pc, #292]	@ (8003a24 <RI_GetRegisterMotor1+0x8c4>)
 8003900:	f004 f83c 	bl	800797c <STO_CR_GetEstimatedCurrent>
 8003904:	8020      	strh	r0, [r4, #0]
              break;
 8003906:	e60f      	b.n	8003528 <RI_GetRegisterMotor1+0x3c8>
              STO_CR_GetObserverGains(&STO_CR_M1, &hC1, &hC2);
 8003908:	4846      	ldr	r0, [pc, #280]	@ (8003a24 <RI_GetRegisterMotor1+0x8c4>)
 800390a:	aa1b      	add	r2, sp, #108	@ 0x6c
 800390c:	a91a      	add	r1, sp, #104	@ 0x68
 800390e:	f004 f847 	bl	80079a0 <STO_CR_GetObserverGains>
              *regdata16 = hC1;
 8003912:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 8003916:	8023      	strh	r3, [r4, #0]
              break;
 8003918:	e606      	b.n	8003528 <RI_GetRegisterMotor1+0x3c8>
              *regdata16 = PID_GetKI(&PIDIdHandle_M1);
 800391a:	4846      	ldr	r0, [pc, #280]	@ (8003a34 <RI_GetRegisterMotor1+0x8d4>)
 800391c:	f002 fc00 	bl	8006120 <PID_GetKI>
 8003920:	8020      	strh	r0, [r4, #0]
              break;
 8003922:	e601      	b.n	8003528 <RI_GetRegisterMotor1+0x3c8>
              *regdata16 = PID_GetKP (&(&STO_PLL_M1)->PIRegulator);
 8003924:	4844      	ldr	r0, [pc, #272]	@ (8003a38 <RI_GetRegisterMotor1+0x8d8>)
 8003926:	f002 fbf7 	bl	8006118 <PID_GetKP>
 800392a:	8020      	strh	r0, [r4, #0]
              break;
 800392c:	e5fc      	b.n	8003528 <RI_GetRegisterMotor1+0x3c8>
              *regdata16 = MCI_GetValphabeta(pMCIN).beta;
 800392e:	483b      	ldr	r0, [pc, #236]	@ (8003a1c <RI_GetRegisterMotor1+0x8bc>)
 8003930:	f7fd fcc0 	bl	80012b4 <MCI_GetValphabeta>
 8003934:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8003938:	8023      	strh	r3, [r4, #0]
              break;
 800393a:	e5f5      	b.n	8003528 <RI_GetRegisterMotor1+0x3c8>
              *regdata16 = STO_CR_GetEstimatedBemf(&STO_CR_M1).alpha;
 800393c:	4839      	ldr	r0, [pc, #228]	@ (8003a24 <RI_GetRegisterMotor1+0x8c4>)
 800393e:	f004 f811 	bl	8007964 <STO_CR_GetEstimatedBemf>
 8003942:	8020      	strh	r0, [r4, #0]
              break;
 8003944:	e5f0      	b.n	8003528 <RI_GetRegisterMotor1+0x3c8>
              *regdata16 = SPD_GetElAngle((SpeednPosFdbk_Handle_t *)&STO_CR_M1);
 8003946:	4837      	ldr	r0, [pc, #220]	@ (8003a24 <RI_GetRegisterMotor1+0x8c4>)
 8003948:	f003 fbfc 	bl	8007144 <SPD_GetElAngle>
 800394c:	8020      	strh	r0, [r4, #0]
              break;
 800394e:	e5eb      	b.n	8003528 <RI_GetRegisterMotor1+0x3c8>
              *regdataU16 = PID_GetKDDivisorPOW2(&PIDSpeedHandle_M1);
 8003950:	483a      	ldr	r0, [pc, #232]	@ (8003a3c <RI_GetRegisterMotor1+0x8dc>)
 8003952:	f002 fc15 	bl	8006180 <PID_GetKDDivisorPOW2>
 8003956:	8020      	strh	r0, [r4, #0]
              break;
 8003958:	e5e6      	b.n	8003528 <RI_GetRegisterMotor1+0x3c8>
              *regdataU16 = (uint16_t)PID_GetKPDivisorPOW2(&PIDSpeedHandle_M1);
 800395a:	4838      	ldr	r0, [pc, #224]	@ (8003a3c <RI_GetRegisterMotor1+0x8dc>)
 800395c:	f002 fbe6 	bl	800612c <PID_GetKPDivisorPOW2>
 8003960:	8020      	strh	r0, [r4, #0]
              break;
 8003962:	e5e1      	b.n	8003528 <RI_GetRegisterMotor1+0x3c8>
              *regdataU16 = PID_GetKPDivisorPOW2(&PIDIqHandle_M1);
 8003964:	4836      	ldr	r0, [pc, #216]	@ (8003a40 <RI_GetRegisterMotor1+0x8e0>)
 8003966:	f002 fbe1 	bl	800612c <PID_GetKPDivisorPOW2>
 800396a:	8020      	strh	r0, [r4, #0]
              break;
 800396c:	e5dc      	b.n	8003528 <RI_GetRegisterMotor1+0x3c8>
              *regdata16 = FF_GetVqdAvPIout(&FF_M1).q;
 800396e:	482e      	ldr	r0, [pc, #184]	@ (8003a28 <RI_GetRegisterMotor1+0x8c8>)
 8003970:	f002 fa30 	bl	8005dd4 <FF_GetVqdAvPIout>
 8003974:	8020      	strh	r0, [r4, #0]
              break;
 8003976:	e5d7      	b.n	8003528 <RI_GetRegisterMotor1+0x3c8>
              *regdata16 = SPD_GetS16Speed((SpeednPosFdbk_Handle_t *)&STO_PLL_M1);
 8003978:	4829      	ldr	r0, [pc, #164]	@ (8003a20 <RI_GetRegisterMotor1+0x8c0>)
 800397a:	f003 fc29 	bl	80071d0 <SPD_GetS16Speed>
 800397e:	8020      	strh	r0, [r4, #0]
              break;
 8003980:	e5d2      	b.n	8003528 <RI_GetRegisterMotor1+0x3c8>
              *regdata16 = STO_PLL_GetEstimatedCurrent(&STO_PLL_M1).beta;
 8003982:	4827      	ldr	r0, [pc, #156]	@ (8003a20 <RI_GetRegisterMotor1+0x8c0>)
 8003984:	f004 faf0 	bl	8007f68 <STO_PLL_GetEstimatedCurrent>
 8003988:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800398c:	8023      	strh	r3, [r4, #0]
              break;
 800398e:	e5cb      	b.n	8003528 <RI_GetRegisterMotor1+0x3c8>
              *regdata16 = PID_GetKI(&PIDSpeedHandle_M1);
 8003990:	482a      	ldr	r0, [pc, #168]	@ (8003a3c <RI_GetRegisterMotor1+0x8dc>)
 8003992:	f002 fbc5 	bl	8006120 <PID_GetKI>
 8003996:	8020      	strh	r0, [r4, #0]
              break;
 8003998:	e5c6      	b.n	8003528 <RI_GetRegisterMotor1+0x3c8>
              *regdata16 = PID_GetKD(&PIDIqHandle_M1);
 800399a:	4829      	ldr	r0, [pc, #164]	@ (8003a40 <RI_GetRegisterMotor1+0x8e0>)
 800399c:	f002 fbec 	bl	8006178 <PID_GetKD>
 80039a0:	8020      	strh	r0, [r4, #0]
              break;
 80039a2:	e5c1      	b.n	8003528 <RI_GetRegisterMotor1+0x3c8>
              *regdata16 = PID_GetKP(&PIDIqHandle_M1);
 80039a4:	4826      	ldr	r0, [pc, #152]	@ (8003a40 <RI_GetRegisterMotor1+0x8e0>)
 80039a6:	f002 fbb7 	bl	8006118 <PID_GetKP>
 80039aa:	8020      	strh	r0, [r4, #0]
              break;
 80039ac:	e5bc      	b.n	8003528 <RI_GetRegisterMotor1+0x3c8>
              STO_PLL_GetObserverGains(&STO_PLL_M1, &hC1, &hC2);
 80039ae:	481c      	ldr	r0, [pc, #112]	@ (8003a20 <RI_GetRegisterMotor1+0x8c0>)
 80039b0:	aa1b      	add	r2, sp, #108	@ 0x6c
 80039b2:	a91a      	add	r1, sp, #104	@ 0x68
 80039b4:	f004 faea 	bl	8007f8c <STO_PLL_GetObserverGains>
              *regdata16 = hC1;
 80039b8:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 80039bc:	8023      	strh	r3, [r4, #0]
              break;
 80039be:	e5b3      	b.n	8003528 <RI_GetRegisterMotor1+0x3c8>
              *regdata16 = NTC_GetAvTemp_C(&TempSensor_M1);
 80039c0:	4820      	ldr	r0, [pc, #128]	@ (8003a44 <RI_GetRegisterMotor1+0x8e4>)
 80039c2:	f002 fb8b 	bl	80060dc <NTC_GetAvTemp_C>
 80039c6:	8020      	strh	r0, [r4, #0]
              break;
 80039c8:	e5ae      	b.n	8003528 <RI_GetRegisterMotor1+0x3c8>
              *regdata16 = MCI_GetIab(pMCIN).b;
 80039ca:	4814      	ldr	r0, [pc, #80]	@ (8003a1c <RI_GetRegisterMotor1+0x8bc>)
 80039cc:	f7fd fc2c 	bl	8001228 <MCI_GetIab>
 80039d0:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80039d4:	8023      	strh	r3, [r4, #0]
              break;
 80039d6:	e5a7      	b.n	8003528 <RI_GetRegisterMotor1+0x3c8>
              *regdata16 = MCI_GetIqdref(pMCIN).q;
 80039d8:	4810      	ldr	r0, [pc, #64]	@ (8003a1c <RI_GetRegisterMotor1+0x8bc>)
 80039da:	f7fd fc4f 	bl	800127c <MCI_GetIqdref>
 80039de:	8020      	strh	r0, [r4, #0]
              break;
 80039e0:	e5a2      	b.n	8003528 <RI_GetRegisterMotor1+0x3c8>
              *regdataU16 = PID_GetKDDivisorPOW2(&PIDIqHandle_M1);
 80039e2:	4817      	ldr	r0, [pc, #92]	@ (8003a40 <RI_GetRegisterMotor1+0x8e0>)
 80039e4:	f002 fbcc 	bl	8006180 <PID_GetKDDivisorPOW2>
 80039e8:	8020      	strh	r0, [r4, #0]
              break;
 80039ea:	e59d      	b.n	8003528 <RI_GetRegisterMotor1+0x3c8>
              *regdataU16 = PID_GetKIDivisorPOW2(&PIDIdHandle_M1);
 80039ec:	4811      	ldr	r0, [pc, #68]	@ (8003a34 <RI_GetRegisterMotor1+0x8d4>)
 80039ee:	f002 fba7 	bl	8006140 <PID_GetKIDivisorPOW2>
 80039f2:	8020      	strh	r0, [r4, #0]
              break;
 80039f4:	e598      	b.n	8003528 <RI_GetRegisterMotor1+0x3c8>
              *regdata16 = FF_GetVqdff(&FF_M1).q;
 80039f6:	480c      	ldr	r0, [pc, #48]	@ (8003a28 <RI_GetRegisterMotor1+0x8c8>)
 80039f8:	f002 f9e0 	bl	8005dbc <FF_GetVqdff>
 80039fc:	8020      	strh	r0, [r4, #0]
              break;
 80039fe:	e593      	b.n	8003528 <RI_GetRegisterMotor1+0x3c8>
              *regdata16 = MCI_GetVqd(pMCIN).q;
 8003a00:	4806      	ldr	r0, [pc, #24]	@ (8003a1c <RI_GetRegisterMotor1+0x8bc>)
 8003a02:	f7fd fc49 	bl	8001298 <MCI_GetVqd>
 8003a06:	8020      	strh	r0, [r4, #0]
              break;
 8003a08:	e58e      	b.n	8003528 <RI_GetRegisterMotor1+0x3c8>
              *regdata16 = MCI_GetIqd(pMCIN).q;
 8003a0a:	4804      	ldr	r0, [pc, #16]	@ (8003a1c <RI_GetRegisterMotor1+0x8bc>)
 8003a0c:	f7fd fc28 	bl	8001260 <MCI_GetIqd>
 8003a10:	8020      	strh	r0, [r4, #0]
              break;
 8003a12:	e589      	b.n	8003528 <RI_GetRegisterMotor1+0x3c8>
 8003a14:	2005      	movs	r0, #5
 8003a16:	e588      	b.n	800352a <RI_GetRegisterMotor1+0x3ca>
 8003a18:	2005      	movs	r0, #5
 8003a1a:	e411      	b.n	8003240 <RI_GetRegisterMotor1+0xe0>
 8003a1c:	20000834 	.word	0x20000834
 8003a20:	20000210 	.word	0x20000210
 8003a24:	20000078 	.word	0x20000078
 8003a28:	200004c0 	.word	0x200004c0
 8003a2c:	20000590 	.word	0x20000590
 8003a30:	20000594 	.word	0x20000594
 8003a34:	200004f8 	.word	0x200004f8
 8003a38:	20000244 	.word	0x20000244
 8003a3c:	20000550 	.word	0x20000550
 8003a40:	20000524 	.word	0x20000524
 8003a44:	2000005c 	.word	0x2000005c

08003a48 <RI_GetIDSize>:
  return (retVal);
}

uint8_t RI_GetIDSize(uint16_t dataID)
{
  uint8_t typeID = ((uint8_t)dataID) & TYPE_MASK;
 8003a48:	f000 0038 	and.w	r0, r0, #56	@ 0x38
 8003a4c:	3808      	subs	r0, #8
 8003a4e:	b2c0      	uxtb	r0, r0
 8003a50:	2810      	cmp	r0, #16
 8003a52:	bf9a      	itte	ls
 8003a54:	4b01      	ldrls	r3, [pc, #4]	@ (8003a5c <RI_GetIDSize+0x14>)
 8003a56:	5c18      	ldrbls	r0, [r3, r0]
 8003a58:	2000      	movhi	r0, #0
      break;
    }
  }

  return (result);
}
 8003a5a:	4770      	bx	lr
 8003a5c:	08008670 	.word	0x08008670

08003a60 <RI_GetPtrReg>:

    MCI_Handle_t *pMCIN = &Mci[0];
    uint16_t regID = dataID & REG_MASK;
    uint8_t typeID = ((uint8_t)dataID) & TYPE_MASK;

    switch (typeID)
 8003a60:	f000 0338 	and.w	r3, r0, #56	@ 0x38
 8003a64:	2b10      	cmp	r3, #16
 8003a66:	d003      	beq.n	8003a70 <RI_GetPtrReg+0x10>
 8003a68:	4a57      	ldr	r2, [pc, #348]	@ (8003bc8 <RI_GetPtrReg+0x168>)
      }

      default:
      {
        *dataPtr = &nullData16;
        retVal = MCP_ERROR_UNKNOWN_REG;
 8003a6a:	2005      	movs	r0, #5
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 8003a6c:	600a      	str	r2, [r1, #0]
    }
#ifdef NULL_PTR_CHECK_REG_INT
  }
#endif
  return (retVal);
}
 8003a6e:	4770      	bx	lr
    uint16_t regID = dataID & REG_MASK;
 8003a70:	f020 0007 	bic.w	r0, r0, #7
 8003a74:	f5b0 6f25 	cmp.w	r0, #2640	@ 0xa50
 8003a78:	b283      	uxth	r3, r0
 8003a7a:	f000 808d 	beq.w	8003b98 <RI_GetPtrReg+0x138>
 8003a7e:	d815      	bhi.n	8003aac <RI_GetPtrReg+0x4c>
 8003a80:	f5b3 6f11 	cmp.w	r3, #2320	@ 0x910
 8003a84:	f000 808d 	beq.w	8003ba2 <RI_GetPtrReg+0x142>
 8003a88:	d82d      	bhi.n	8003ae6 <RI_GetPtrReg+0x86>
 8003a8a:	f5b3 6f05 	cmp.w	r3, #2128	@ 0x850
 8003a8e:	f000 8096 	beq.w	8003bbe <RI_GetPtrReg+0x15e>
 8003a92:	d91d      	bls.n	8003ad0 <RI_GetPtrReg+0x70>
 8003a94:	f5b3 6f09 	cmp.w	r3, #2192	@ 0x890
 8003a98:	f000 8088 	beq.w	8003bac <RI_GetPtrReg+0x14c>
 8003a9c:	f5b3 6f0d 	cmp.w	r3, #2256	@ 0x8d0
 8003aa0:	d1e2      	bne.n	8003a68 <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Iqd.q);
 8003aa2:	4b4a      	ldr	r3, [pc, #296]	@ (8003bcc <RI_GetPtrReg+0x16c>)
 8003aa4:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8003aa6:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqd.q);
 8003aa8:	320c      	adds	r2, #12
            break;
 8003aaa:	e7df      	b.n	8003a6c <RI_GetPtrReg+0xc>
 8003aac:	f5b3 6f49 	cmp.w	r3, #3216	@ 0xc90
 8003ab0:	d060      	beq.n	8003b74 <RI_GetPtrReg+0x114>
 8003ab2:	d931      	bls.n	8003b18 <RI_GetPtrReg+0xb8>
 8003ab4:	f5b3 6f5d 	cmp.w	r3, #3536	@ 0xdd0
 8003ab8:	d056      	beq.n	8003b68 <RI_GetPtrReg+0x108>
 8003aba:	d920      	bls.n	8003afe <RI_GetPtrReg+0x9e>
 8003abc:	4842      	ldr	r0, [pc, #264]	@ (8003bc8 <RI_GetPtrReg+0x168>)
 8003abe:	4a44      	ldr	r2, [pc, #272]	@ (8003bd0 <RI_GetPtrReg+0x170>)
 8003ac0:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 8003ac4:	bf16      	itet	ne
 8003ac6:	4602      	movne	r2, r0
 8003ac8:	2000      	moveq	r0, #0
 8003aca:	2005      	movne	r0, #5
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 8003acc:	600a      	str	r2, [r1, #0]
}
 8003ace:	4770      	bx	lr
 8003ad0:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003ad4:	d06f      	beq.n	8003bb6 <RI_GetPtrReg+0x156>
 8003ad6:	f5b3 6f01 	cmp.w	r3, #2064	@ 0x810
 8003ada:	d1c5      	bne.n	8003a68 <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Iab.b);
 8003adc:	4b3b      	ldr	r3, [pc, #236]	@ (8003bcc <RI_GetPtrReg+0x16c>)
 8003ade:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8003ae0:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iab.b);
 8003ae2:	3202      	adds	r2, #2
            break;
 8003ae4:	e7c2      	b.n	8003a6c <RI_GetPtrReg+0xc>
 8003ae6:	f5b3 6f1d 	cmp.w	r3, #2512	@ 0x9d0
 8003aea:	d046      	beq.n	8003b7a <RI_GetPtrReg+0x11a>
 8003aec:	d922      	bls.n	8003b34 <RI_GetPtrReg+0xd4>
 8003aee:	f5b3 6f21 	cmp.w	r3, #2576	@ 0xa10
 8003af2:	d1b9      	bne.n	8003a68 <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Vqd.d);
 8003af4:	4b35      	ldr	r3, [pc, #212]	@ (8003bcc <RI_GetPtrReg+0x16c>)
 8003af6:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8003af8:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Vqd.d);
 8003afa:	3218      	adds	r2, #24
            break;
 8003afc:	e7b6      	b.n	8003a6c <RI_GetPtrReg+0xc>
 8003afe:	f5b3 6f4d 	cmp.w	r3, #3280	@ 0xcd0
 8003b02:	d02e      	beq.n	8003b62 <RI_GetPtrReg+0x102>
 8003b04:	4830      	ldr	r0, [pc, #192]	@ (8003bc8 <RI_GetPtrReg+0x168>)
 8003b06:	4a33      	ldr	r2, [pc, #204]	@ (8003bd4 <RI_GetPtrReg+0x174>)
 8003b08:	f5b3 6f51 	cmp.w	r3, #3344	@ 0xd10
 8003b0c:	bf16      	itet	ne
 8003b0e:	4602      	movne	r2, r0
 8003b10:	2000      	moveq	r0, #0
 8003b12:	2005      	movne	r0, #5
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 8003b14:	600a      	str	r2, [r1, #0]
}
 8003b16:	4770      	bx	lr
 8003b18:	f5b3 6f39 	cmp.w	r3, #2960	@ 0xb90
 8003b1c:	d027      	beq.n	8003b6e <RI_GetPtrReg+0x10e>
 8003b1e:	d914      	bls.n	8003b4a <RI_GetPtrReg+0xea>
 8003b20:	4829      	ldr	r0, [pc, #164]	@ (8003bc8 <RI_GetPtrReg+0x168>)
 8003b22:	4a2d      	ldr	r2, [pc, #180]	@ (8003bd8 <RI_GetPtrReg+0x178>)
 8003b24:	f5b3 6f45 	cmp.w	r3, #3152	@ 0xc50
 8003b28:	bf16      	itet	ne
 8003b2a:	4602      	movne	r2, r0
 8003b2c:	2000      	moveq	r0, #0
 8003b2e:	2005      	movne	r0, #5
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 8003b30:	600a      	str	r2, [r1, #0]
}
 8003b32:	4770      	bx	lr
 8003b34:	f5b3 6f15 	cmp.w	r3, #2384	@ 0x950
 8003b38:	d024      	beq.n	8003b84 <RI_GetPtrReg+0x124>
 8003b3a:	f5b3 6f19 	cmp.w	r3, #2448	@ 0x990
 8003b3e:	d193      	bne.n	8003a68 <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.d);
 8003b40:	4b22      	ldr	r3, [pc, #136]	@ (8003bcc <RI_GetPtrReg+0x16c>)
 8003b42:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8003b44:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.d);
 8003b46:	3212      	adds	r2, #18
            break;
 8003b48:	e790      	b.n	8003a6c <RI_GetPtrReg+0xc>
 8003b4a:	f5b3 6f29 	cmp.w	r3, #2704	@ 0xa90
 8003b4e:	d01e      	beq.n	8003b8e <RI_GetPtrReg+0x12e>
 8003b50:	481d      	ldr	r0, [pc, #116]	@ (8003bc8 <RI_GetPtrReg+0x168>)
 8003b52:	4a22      	ldr	r2, [pc, #136]	@ (8003bdc <RI_GetPtrReg+0x17c>)
 8003b54:	f5b3 6f35 	cmp.w	r3, #2896	@ 0xb50
 8003b58:	bf16      	itet	ne
 8003b5a:	4602      	movne	r2, r0
 8003b5c:	2000      	moveq	r0, #0
 8003b5e:	2005      	movne	r0, #5
 8003b60:	e784      	b.n	8003a6c <RI_GetPtrReg+0xc>
 8003b62:	4a1f      	ldr	r2, [pc, #124]	@ (8003be0 <RI_GetPtrReg+0x180>)
  uint8_t retVal = MCP_CMD_OK;
 8003b64:	2000      	movs	r0, #0
 8003b66:	e781      	b.n	8003a6c <RI_GetPtrReg+0xc>
 8003b68:	4a1e      	ldr	r2, [pc, #120]	@ (8003be4 <RI_GetPtrReg+0x184>)
 8003b6a:	2000      	movs	r0, #0
 8003b6c:	e77e      	b.n	8003a6c <RI_GetPtrReg+0xc>
 8003b6e:	4a1e      	ldr	r2, [pc, #120]	@ (8003be8 <RI_GetPtrReg+0x188>)
 8003b70:	2000      	movs	r0, #0
 8003b72:	e77b      	b.n	8003a6c <RI_GetPtrReg+0xc>
 8003b74:	4a1d      	ldr	r2, [pc, #116]	@ (8003bec <RI_GetPtrReg+0x18c>)
 8003b76:	2000      	movs	r0, #0
 8003b78:	e778      	b.n	8003a6c <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Vqd.q);
 8003b7a:	4b14      	ldr	r3, [pc, #80]	@ (8003bcc <RI_GetPtrReg+0x16c>)
 8003b7c:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8003b7e:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Vqd.q);
 8003b80:	3216      	adds	r2, #22
            break;
 8003b82:	e773      	b.n	8003a6c <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.q);
 8003b84:	4b11      	ldr	r3, [pc, #68]	@ (8003bcc <RI_GetPtrReg+0x16c>)
 8003b86:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8003b88:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.q);
 8003b8a:	3210      	adds	r2, #16
            break;
 8003b8c:	e76e      	b.n	8003a6c <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.beta);
 8003b8e:	4b0f      	ldr	r3, [pc, #60]	@ (8003bcc <RI_GetPtrReg+0x16c>)
 8003b90:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8003b92:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.beta);
 8003b94:	321c      	adds	r2, #28
            break;
 8003b96:	e769      	b.n	8003a6c <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.alpha);
 8003b98:	4b0c      	ldr	r3, [pc, #48]	@ (8003bcc <RI_GetPtrReg+0x16c>)
 8003b9a:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8003b9c:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.alpha);
 8003b9e:	321a      	adds	r2, #26
            break;
 8003ba0:	e764      	b.n	8003a6c <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Iqd.d);
 8003ba2:	4b0a      	ldr	r3, [pc, #40]	@ (8003bcc <RI_GetPtrReg+0x16c>)
 8003ba4:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8003ba6:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqd.d);
 8003ba8:	320e      	adds	r2, #14
            break;
 8003baa:	e75f      	b.n	8003a6c <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.beta);
 8003bac:	4b07      	ldr	r3, [pc, #28]	@ (8003bcc <RI_GetPtrReg+0x16c>)
 8003bae:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8003bb0:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.beta);
 8003bb2:	3206      	adds	r2, #6
            break;
 8003bb4:	e75a      	b.n	8003a6c <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 8003bb6:	4b05      	ldr	r3, [pc, #20]	@ (8003bcc <RI_GetPtrReg+0x16c>)
  uint8_t retVal = MCP_CMD_OK;
 8003bb8:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 8003bba:	685a      	ldr	r2, [r3, #4]
             break;
 8003bbc:	e756      	b.n	8003a6c <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.alpha);
 8003bbe:	4b03      	ldr	r3, [pc, #12]	@ (8003bcc <RI_GetPtrReg+0x16c>)
 8003bc0:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8003bc2:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.alpha);
 8003bc4:	3204      	adds	r2, #4
            break;
 8003bc6:	e751      	b.n	8003a6c <RI_GetPtrReg+0xc>
 8003bc8:	20001a64 	.word	0x20001a64
 8003bcc:	20000834 	.word	0x20000834
 8003bd0:	200000be 	.word	0x200000be
 8003bd4:	20000084 	.word	0x20000084
 8003bd8:	20000280 	.word	0x20000280
 8003bdc:	20000214 	.word	0x20000214
 8003be0:	2000007c 	.word	0x2000007c
 8003be4:	200000bc 	.word	0x200000bc
 8003be8:	2000021c 	.word	0x2000021c
 8003bec:	20000282 	.word	0x20000282

08003bf0 <RCM_RegisterRegConv>:

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003bf0:	4a6c      	ldr	r2, [pc, #432]	@ (8003da4 <RCM_RegisterRegConv+0x1b4>)
 8003bf2:	6813      	ldr	r3, [r2, #0]
{
 8003bf4:	b530      	push	{r4, r5, lr}
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d036      	beq.n	8003c68 <RCM_RegisterRegConv+0x78>
        /* Nothing to do */
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault */
      if (RCM_handle_array [i] != 0)
      {
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003bfa:	f890 c004 	ldrb.w	ip, [r0, #4]
 8003bfe:	7919      	ldrb	r1, [r3, #4]
 8003c00:	458c      	cmp	ip, r1
 8003c02:	d01e      	beq.n	8003c42 <RCM_RegisterRegConv+0x52>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003c04:	6854      	ldr	r4, [r2, #4]
 8003c06:	2c00      	cmp	r4, #0
 8003c08:	f000 80ab 	beq.w	8003d62 <RCM_RegisterRegConv+0x172>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003c0c:	7921      	ldrb	r1, [r4, #4]
 8003c0e:	458c      	cmp	ip, r1
  uint8_t handle = 255U;
 8003c10:	f04f 03ff 	mov.w	r3, #255	@ 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003c14:	d031      	beq.n	8003c7a <RCM_RegisterRegConv+0x8a>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003c16:	6895      	ldr	r5, [r2, #8]
 8003c18:	2d00      	cmp	r5, #0
 8003c1a:	f000 808f 	beq.w	8003d3c <RCM_RegisterRegConv+0x14c>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003c1e:	7929      	ldrb	r1, [r5, #4]
 8003c20:	4561      	cmp	r1, ip
 8003c22:	d030      	beq.n	8003c86 <RCM_RegisterRegConv+0x96>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003c24:	68d4      	ldr	r4, [r2, #12]
 8003c26:	2c00      	cmp	r4, #0
 8003c28:	f000 8096 	beq.w	8003d58 <RCM_RegisterRegConv+0x168>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003c2c:	7921      	ldrb	r1, [r4, #4]
 8003c2e:	4561      	cmp	r1, ip
 8003c30:	f000 80a3 	beq.w	8003d7a <RCM_RegisterRegConv+0x18a>
      {
        /* Nothing to do */
      }
      i++;
    }
    if (handle < RCM_MAX_CONV)
 8003c34:	2b03      	cmp	r3, #3
 8003c36:	bf88      	it	hi
 8003c38:	23ff      	movhi	r3, #255	@ 0xff
 8003c3a:	f240 80aa 	bls.w	8003d92 <RCM_RegisterRegConv+0x1a2>
      /* Nothing to do handle is already set to error value : 255 */
    }
#ifdef NULL_PTR_CHECK_REG_CON_MNG
  }
#endif
  regConv->convHandle = handle;
 8003c3e:	7303      	strb	r3, [r0, #12]
}
 8003c40:	bd30      	pop	{r4, r5, pc}
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8003c42:	6801      	ldr	r1, [r0, #0]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4299      	cmp	r1, r3
 8003c48:	d023      	beq.n	8003c92 <RCM_RegisterRegConv+0xa2>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003c4a:	6854      	ldr	r4, [r2, #4]
 8003c4c:	2c00      	cmp	r4, #0
 8003c4e:	d1dd      	bne.n	8003c0c <RCM_RegisterRegConv+0x1c>
 8003c50:	6895      	ldr	r5, [r2, #8]
      i++;
 8003c52:	2301      	movs	r3, #1
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003c54:	2d00      	cmp	r5, #0
 8003c56:	d1e2      	bne.n	8003c1e <RCM_RegisterRegConv+0x2e>
 8003c58:	68d4      	ldr	r4, [r2, #12]
 8003c5a:	b1dc      	cbz	r4, 8003c94 <RCM_RegisterRegConv+0xa4>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003c5c:	f894 c004 	ldrb.w	ip, [r4, #4]
 8003c60:	7905      	ldrb	r5, [r0, #4]
 8003c62:	45ac      	cmp	ip, r5
 8003c64:	d116      	bne.n	8003c94 <RCM_RegisterRegConv+0xa4>
 8003c66:	e089      	b.n	8003d7c <RCM_RegisterRegConv+0x18c>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003c68:	6854      	ldr	r4, [r2, #4]
 8003c6a:	2c00      	cmp	r4, #0
 8003c6c:	f000 808b 	beq.w	8003d86 <RCM_RegisterRegConv+0x196>
 8003c70:	f890 c004 	ldrb.w	ip, [r0, #4]
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003c74:	7921      	ldrb	r1, [r4, #4]
 8003c76:	458c      	cmp	ip, r1
 8003c78:	d1cd      	bne.n	8003c16 <RCM_RegisterRegConv+0x26>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8003c7a:	6824      	ldr	r4, [r4, #0]
 8003c7c:	6801      	ldr	r1, [r0, #0]
 8003c7e:	42a1      	cmp	r1, r4
 8003c80:	d1c9      	bne.n	8003c16 <RCM_RegisterRegConv+0x26>
      i++;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e006      	b.n	8003c94 <RCM_RegisterRegConv+0xa4>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8003c86:	682c      	ldr	r4, [r5, #0]
 8003c88:	6801      	ldr	r1, [r0, #0]
 8003c8a:	428c      	cmp	r4, r1
 8003c8c:	d1ca      	bne.n	8003c24 <RCM_RegisterRegConv+0x34>
      i++;
 8003c8e:	2302      	movs	r3, #2
 8003c90:	e000      	b.n	8003c94 <RCM_RegisterRegConv+0xa4>
    uint8_t i = 0;
 8003c92:	2300      	movs	r3, #0
      RCM_handle_array [handle] = regConv;
 8003c94:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8003c98:	688a      	ldr	r2, [r1, #8]
      RCM_CB_array [handle].cb = NULL; /* If a previous callback was attached, it is cleared */
 8003c9a:	4c43      	ldr	r4, [pc, #268]	@ (8003da8 <RCM_RegisterRegConv+0x1b8>)
 8003c9c:	2500      	movs	r5, #0
      if (0U == LL_ADC_IsEnabled(regConv->regADC))
 8003c9e:	07d2      	lsls	r2, r2, #31
      RCM_CB_array [handle].cb = NULL; /* If a previous callback was attached, it is cleared */
 8003ca0:	f844 5033 	str.w	r5, [r4, r3, lsl #3]
      if (0U == LL_ADC_IsEnabled(regConv->regADC))
 8003ca4:	d411      	bmi.n	8003cca <RCM_RegisterRegConv+0xda>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOCS(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 8003ca6:	684a      	ldr	r2, [r1, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 8003ca8:	f06f 0402 	mvn.w	r4, #2
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 8003cac:	f022 0220 	bic.w	r2, r2, #32
 8003cb0:	604a      	str	r2, [r1, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 8003cb2:	600c      	str	r4, [r1, #0]
{
  /* Note: on this STM32 series, there is no flag ADC group injected          */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "JEOC" is corresponding to flag "JEOS"               */
  /*       in other STM32 families).                                          */
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8003cb4:	684a      	ldr	r2, [r1, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8003cb6:	f06f 0404 	mvn.w	r4, #4
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8003cba:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003cbe:	604a      	str	r2, [r1, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8003cc0:	600c      	str	r4, [r1, #0]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8003cc2:	688a      	ldr	r2, [r1, #8]
 8003cc4:	f042 0201 	orr.w	r2, r2, #1
 8003cc8:	608a      	str	r2, [r1, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8003cca:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8003ccc:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003cd0:	62ca      	str	r2, [r1, #44]	@ 0x2c
      LL_ADC_SetChannelSamplingTime (regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 8003cd2:	7902      	ldrb	r2, [r0, #4]
 8003cd4:	2a09      	cmp	r2, #9
 8003cd6:	eb02 0442 	add.w	r4, r2, r2, lsl #1
 8003cda:	d829      	bhi.n	8003d30 <RCM_RegisterRegConv+0x140>
 8003cdc:	ea42 5204 	orr.w	r2, r2, r4, lsl #20
 8003ce0:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8003ce4:	f04f 7400 	mov.w	r4, #33554432	@ 0x2000000
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ce8:	f04f 7c00 	mov.w	ip, #33554432	@ 0x2000000
 8003cec:	fa9c fcac 	rbit	ip, ip
 8003cf0:	fabc fc8c 	clz	ip, ip
  MODIFY_REG(*preg,
 8003cf4:	6885      	ldr	r5, [r0, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8003cf6:	fa24 f40c 	lsr.w	r4, r4, ip
 8003cfa:	310c      	adds	r1, #12
  MODIFY_REG(*preg,
 8003cfc:	f002 72f8 	and.w	r2, r2, #32505856	@ 0x1f00000
 8003d00:	f04f 7cf8 	mov.w	ip, #32505856	@ 0x1f00000
 8003d04:	fa9c fcac 	rbit	ip, ip
  return result;
 8003d08:	fabc fc8c 	clz	ip, ip
 8003d0c:	fa22 f20c 	lsr.w	r2, r2, ip
 8003d10:	fa05 fc02 	lsl.w	ip, r5, r2
 8003d14:	f04f 0e07 	mov.w	lr, #7
 8003d18:	f851 5024 	ldr.w	r5, [r1, r4, lsl #2]
 8003d1c:	fa0e f202 	lsl.w	r2, lr, r2
 8003d20:	ea25 0202 	bic.w	r2, r5, r2
 8003d24:	ea4c 0202 	orr.w	r2, ip, r2
 8003d28:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
  regConv->convHandle = handle;
 8003d2c:	7303      	strb	r3, [r0, #12]
}
 8003d2e:	bd30      	pop	{r4, r5, pc}
      LL_ADC_SetChannelSamplingTime (regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 8003d30:	3c1e      	subs	r4, #30
 8003d32:	ea42 5204 	orr.w	r2, r2, r4, lsl #20
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8003d36:	f002 7400 	and.w	r4, r2, #33554432	@ 0x2000000
 8003d3a:	e7d5      	b.n	8003ce8 <RCM_RegisterRegConv+0xf8>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003d3c:	2b04      	cmp	r3, #4
 8003d3e:	d92a      	bls.n	8003d96 <RCM_RegisterRegConv+0x1a6>
 8003d40:	68d3      	ldr	r3, [r2, #12]
 8003d42:	b353      	cbz	r3, 8003d9a <RCM_RegisterRegConv+0x1aa>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003d44:	7919      	ldrb	r1, [r3, #4]
 8003d46:	4561      	cmp	r1, ip
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8003d48:	6801      	ldr	r1, [r0, #0]
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003d4a:	d1a0      	bne.n	8003c8e <RCM_RegisterRegConv+0x9e>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8003d4c:	681b      	ldr	r3, [r3, #0]
      i++;
 8003d4e:	4299      	cmp	r1, r3
 8003d50:	bf0c      	ite	eq
 8003d52:	2303      	moveq	r3, #3
 8003d54:	2302      	movne	r3, #2
 8003d56:	e79d      	b.n	8003c94 <RCM_RegisterRegConv+0xa4>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003d58:	2b04      	cmp	r3, #4
 8003d5a:	6801      	ldr	r1, [r0, #0]
 8003d5c:	d99a      	bls.n	8003c94 <RCM_RegisterRegConv+0xa4>
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e798      	b.n	8003c94 <RCM_RegisterRegConv+0xa4>
 8003d62:	6895      	ldr	r5, [r2, #8]
      i++;
 8003d64:	2301      	movs	r3, #1
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003d66:	2d00      	cmp	r5, #0
 8003d68:	f47f af59 	bne.w	8003c1e <RCM_RegisterRegConv+0x2e>
 8003d6c:	68d4      	ldr	r4, [r2, #12]
 8003d6e:	b184      	cbz	r4, 8003d92 <RCM_RegisterRegConv+0x1a2>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003d70:	7921      	ldrb	r1, [r4, #4]
 8003d72:	4561      	cmp	r1, ip
 8003d74:	6801      	ldr	r1, [r0, #0]
 8003d76:	d18d      	bne.n	8003c94 <RCM_RegisterRegConv+0xa4>
 8003d78:	e000      	b.n	8003d7c <RCM_RegisterRegConv+0x18c>
 8003d7a:	6801      	ldr	r1, [r0, #0]
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8003d7c:	6824      	ldr	r4, [r4, #0]
 8003d7e:	428c      	cmp	r4, r1
 8003d80:	f47f af58 	bne.w	8003c34 <RCM_RegisterRegConv+0x44>
 8003d84:	e7eb      	b.n	8003d5e <RCM_RegisterRegConv+0x16e>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003d86:	6895      	ldr	r5, [r2, #8]
 8003d88:	b14d      	cbz	r5, 8003d9e <RCM_RegisterRegConv+0x1ae>
 8003d8a:	f890 c004 	ldrb.w	ip, [r0, #4]
    uint8_t i = 0;
 8003d8e:	4623      	mov	r3, r4
 8003d90:	e745      	b.n	8003c1e <RCM_RegisterRegConv+0x2e>
 8003d92:	6801      	ldr	r1, [r0, #0]
 8003d94:	e77e      	b.n	8003c94 <RCM_RegisterRegConv+0xa4>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003d96:	462b      	mov	r3, r5
 8003d98:	e7e8      	b.n	8003d6c <RCM_RegisterRegConv+0x17c>
 8003d9a:	6801      	ldr	r1, [r0, #0]
 8003d9c:	e777      	b.n	8003c8e <RCM_RegisterRegConv+0x9e>
 8003d9e:	6801      	ldr	r1, [r0, #0]
    uint8_t i = 0;
 8003da0:	462b      	mov	r3, r5
 8003da2:	e759      	b.n	8003c58 <RCM_RegisterRegConv+0x68>
 8003da4:	20001a90 	.word	0x20001a90
 8003da8:	20001a70 	.word	0x20001a70

08003dac <RCM_ExecRegularConv>:
 */
uint16_t RCM_ExecRegularConv (RegConv_t *regConv)
{
  uint16_t retVal;
  uint8_t handle = regConv->convHandle;
  LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8003dac:	4b1a      	ldr	r3, [pc, #104]	@ (8003e18 <RCM_ExecRegularConv+0x6c>)
 8003dae:	7b02      	ldrb	r2, [r0, #12]
 8003db0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
                               LL_ADC_REG_RANK_1,
                               __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 8003db4:	7913      	ldrb	r3, [r2, #4]
  LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8003db6:	6812      	ldr	r2, [r2, #0]
                               __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 8003db8:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8003dbc:	2b09      	cmp	r3, #9
                               __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 8003dbe:	bf93      	iteet	ls
 8003dc0:	ea43 5301 	orrls.w	r3, r3, r1, lsl #20
 8003dc4:	391e      	subhi	r1, #30
  LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8003dc6:	ea43 5301 	orrhi.w	r3, r3, r1, lsl #20
 8003dca:	f043 7300 	orrls.w	r3, r3, #33554432	@ 0x2000000
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dce:	f44f 7140 	mov.w	r1, #768	@ 0x300
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8003dd2:	f102 0c2c 	add.w	ip, r2, #44	@ 0x2c
 8003dd6:	fa91 f1a1 	rbit	r1, r1
  if (value == 0U)
 8003dda:	b139      	cbz	r1, 8003dec <RCM_ExecRegularConv+0x40>
  return __builtin_clz(value);
 8003ddc:	fab1 f181 	clz	r1, r1
 8003de0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8003de4:	fa20 f101 	lsr.w	r1, r0, r1
 8003de8:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
  MODIFY_REG(*preg,
 8003dec:	f8dc 0000 	ldr.w	r0, [ip]

  (void)LL_ADC_REG_ReadConversionData12(RCM_handle_array[handle]->regADC);

  /* Bit banding access equivalent to LL_ADC_REG_StartConversionSWStart */
  BB_REG_BIT_SET(&RCM_handle_array[handle]->regADC->CR2, ADC_CR2_SWSTART_Pos);
 8003df0:	0151      	lsls	r1, r2, #5
 8003df2:	f020 001f 	bic.w	r0, r0, #31
 8003df6:	f003 031f 	and.w	r3, r3, #31
 8003dfa:	4303      	orrs	r3, r0
 8003dfc:	f101 4184 	add.w	r1, r1, #1107296256	@ 0x42000000
 8003e00:	f8cc 3000 	str.w	r3, [ip]
 8003e04:	2301      	movs	r3, #1
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8003e06:	6cd0      	ldr	r0, [r2, #76]	@ 0x4c
 8003e08:	f8c1 3178 	str.w	r3, [r1, #376]	@ 0x178
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_EOCS) == (LL_ADC_FLAG_EOCS));
 8003e0c:	6813      	ldr	r3, [r2, #0]
  /* Wait until end of regular conversion */
  while (LL_ADC_IsActiveFlag_EOCS(RCM_handle_array[handle]->regADC) == 0u)
 8003e0e:	079b      	lsls	r3, r3, #30
 8003e10:	d5fc      	bpl.n	8003e0c <RCM_ExecRegularConv+0x60>
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8003e12:	6cd0      	ldr	r0, [r2, #76]	@ 0x4c
  {
    /* Nothing to do */
  }
  retVal = LL_ADC_REG_ReadConversionData12(RCM_handle_array[handle]->regADC);
  return (retVal);
}
 8003e14:	b280      	uxth	r0, r0
 8003e16:	4770      	bx	lr
 8003e18:	20001a90 	.word	0x20001a90

08003e1c <RCM_ExecUserConv>:
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv()
{
  uint8_t handle;
  if (RCM_UserConvHandle != NULL)
 8003e1c:	4b11      	ldr	r3, [pc, #68]	@ (8003e64 <RCM_ExecUserConv+0x48>)
{
 8003e1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (RCM_UserConvHandle != NULL)
 8003e22:	681c      	ldr	r4, [r3, #0]
 8003e24:	b124      	cbz	r4, 8003e30 <RCM_ExecUserConv+0x14>
  {
    handle = RCM_UserConvHandle->convHandle;
    if (RCM_USERCONV_REQUESTED == RCM_UserConvState)
 8003e26:	4d10      	ldr	r5, [pc, #64]	@ (8003e68 <RCM_ExecUserConv+0x4c>)
    handle = RCM_UserConvHandle->convHandle;
 8003e28:	7b26      	ldrb	r6, [r4, #12]
    if (RCM_USERCONV_REQUESTED == RCM_UserConvState)
 8003e2a:	782b      	ldrb	r3, [r5, #0]
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d001      	beq.n	8003e34 <RCM_ExecUserConv+0x18>
  }
  else
  {
     /* Nothing to do */
  }
}
 8003e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8003e34:	4620      	mov	r0, r4
 8003e36:	f7ff ffb9 	bl	8003dac <RCM_ExecRegularConv>
 8003e3a:	4b0c      	ldr	r3, [pc, #48]	@ (8003e6c <RCM_ExecUserConv+0x50>)
 8003e3c:	8018      	strh	r0, [r3, #0]
      RCM_UserConvState = RCM_USERCONV_EOC;
 8003e3e:	2302      	movs	r3, #2
 8003e40:	702b      	strb	r3, [r5, #0]
      if (RCM_CB_array[handle].cb != NULL)
 8003e42:	4b0b      	ldr	r3, [pc, #44]	@ (8003e70 <RCM_ExecUserConv+0x54>)
 8003e44:	f853 7036 	ldr.w	r7, [r3, r6, lsl #3]
      RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8003e48:	4601      	mov	r1, r0
      if (RCM_CB_array[handle].cb != NULL)
 8003e4a:	2f00      	cmp	r7, #0
 8003e4c:	d0f0      	beq.n	8003e30 <RCM_ExecUserConv+0x14>
        RCM_CB_array[handle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 8003e4e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003e52:	4620      	mov	r0, r4
 8003e54:	685a      	ldr	r2, [r3, #4]
        RCM_UserConvState = RCM_USERCONV_IDLE;
 8003e56:	2300      	movs	r3, #0
 8003e58:	702b      	strb	r3, [r5, #0]
        RCM_CB_array[handle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 8003e5a:	463b      	mov	r3, r7
}
 8003e5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        RCM_CB_array[handle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 8003e60:	4718      	bx	r3
 8003e62:	bf00      	nop
 8003e64:	20001a68 	.word	0x20001a68
 8003e68:	20001a6c 	.word	0x20001a6c
 8003e6c:	20001a6e 	.word	0x20001a6e
 8003e70:	20001a70 	.word	0x20001a70

08003e74 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e74:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e76:	4b0d      	ldr	r3, [pc, #52]	@ (8003eac <HAL_MspInit+0x38>)
 8003e78:	2100      	movs	r1, #0
 8003e7a:	9100      	str	r1, [sp, #0]
 8003e7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e7e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003e82:	645a      	str	r2, [r3, #68]	@ 0x44
 8003e84:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e86:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8003e8a:	9200      	str	r2, [sp, #0]
 8003e8c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e8e:	9101      	str	r1, [sp, #4]
 8003e90:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e92:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003e96:	641a      	str	r2, [r3, #64]	@ 0x40
 8003e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e9e:	9301      	str	r3, [sp, #4]
 8003ea0:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8003ea2:	2004      	movs	r0, #4
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ea4:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8003ea6:	f000 bd5f 	b.w	8004968 <HAL_NVIC_SetPriorityGrouping>
 8003eaa:	bf00      	nop
 8003eac:	40023800 	.word	0x40023800

08003eb0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003eb0:	b5d0      	push	{r4, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8003eb2:	4b1f      	ldr	r3, [pc, #124]	@ (8003f30 <HAL_ADC_MspInit+0x80>)
 8003eb4:	6802      	ldr	r2, [r0, #0]
{
 8003eb6:	b08a      	sub	sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003eb8:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 8003eba:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ebc:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8003ec0:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8003ec4:	9408      	str	r4, [sp, #32]
  if(hadc->Instance==ADC1)
 8003ec6:	d001      	beq.n	8003ecc <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003ec8:	b00a      	add	sp, #40	@ 0x28
 8003eca:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003ecc:	f503 338c 	add.w	r3, r3, #71680	@ 0x11800
 8003ed0:	9401      	str	r4, [sp, #4]
 8003ed2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ed4:	4817      	ldr	r0, [pc, #92]	@ (8003f34 <HAL_ADC_MspInit+0x84>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003ed6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003eda:	645a      	str	r2, [r3, #68]	@ 0x44
 8003edc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003ede:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8003ee2:	9201      	str	r2, [sp, #4]
 8003ee4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ee6:	9402      	str	r4, [sp, #8]
 8003ee8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003eea:	f042 0204 	orr.w	r2, r2, #4
 8003eee:	631a      	str	r2, [r3, #48]	@ 0x30
 8003ef0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ef2:	f002 0204 	and.w	r2, r2, #4
 8003ef6:	9202      	str	r2, [sp, #8]
 8003ef8:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003efa:	9403      	str	r4, [sp, #12]
 8003efc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003efe:	f042 0201 	orr.w	r2, r2, #1
 8003f02:	631a      	str	r2, [r3, #48]	@ 0x30
 8003f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f06:	f003 0301 	and.w	r3, r3, #1
 8003f0a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin|M1_CURR_AMPL_V_Pin;
 8003f0c:	2603      	movs	r6, #3
 8003f0e:	2703      	movs	r7, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f10:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f12:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin|M1_CURR_AMPL_V_Pin;
 8003f14:	e9cd 6704 	strd	r6, r7, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f18:	f000 fe38 	bl	8004b8c <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f1c:	4806      	ldr	r0, [pc, #24]	@ (8003f38 <HAL_ADC_MspInit+0x88>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f1e:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f20:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin|M1_BUS_VOLTAGE_Pin;
 8003f22:	e9cd 6704 	strd	r6, r7, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f26:	f000 fe31 	bl	8004b8c <HAL_GPIO_Init>
}
 8003f2a:	b00a      	add	sp, #40	@ 0x28
 8003f2c:	bdd0      	pop	{r4, r6, r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	40012000 	.word	0x40012000
 8003f34:	40020800 	.word	0x40020800
 8003f38:	40020000 	.word	0x40020000

08003f3c <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 8003f3c:	4b0a      	ldr	r3, [pc, #40]	@ (8003f68 <HAL_TIM_Base_MspInit+0x2c>)
 8003f3e:	6802      	ldr	r2, [r0, #0]
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d000      	beq.n	8003f46 <HAL_TIM_Base_MspInit+0xa>
 8003f44:	4770      	bx	lr
{
 8003f46:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003f48:	f503 339c 	add.w	r3, r3, #79872	@ 0x13800
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	9201      	str	r2, [sp, #4]
 8003f50:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f52:	f042 0201 	orr.w	r2, r2, #1
 8003f56:	645a      	str	r2, [r3, #68]	@ 0x44
 8003f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f5a:	f003 0301 	and.w	r3, r3, #1
 8003f5e:	9301      	str	r3, [sp, #4]
 8003f60:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003f62:	b002      	add	sp, #8
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop
 8003f68:	40010000 	.word	0x40010000

08003f6c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003f6c:	b5d0      	push	{r4, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 8003f6e:	4a1f      	ldr	r2, [pc, #124]	@ (8003fec <HAL_TIM_MspPostInit+0x80>)
 8003f70:	6801      	ldr	r1, [r0, #0]
{
 8003f72:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f74:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 8003f76:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f78:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003f7c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003f80:	9306      	str	r3, [sp, #24]
  if(htim->Instance==TIM1)
 8003f82:	d001      	beq.n	8003f88 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003f84:	b008      	add	sp, #32
 8003f86:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f88:	f502 329c 	add.w	r2, r2, #79872	@ 0x13800
 8003f8c:	9300      	str	r3, [sp, #0]
 8003f8e:	6b11      	ldr	r1, [r2, #48]	@ 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f90:	4817      	ldr	r0, [pc, #92]	@ (8003ff0 <HAL_TIM_MspPostInit+0x84>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f92:	f041 0102 	orr.w	r1, r1, #2
 8003f96:	6311      	str	r1, [r2, #48]	@ 0x30
 8003f98:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8003f9a:	f001 0102 	and.w	r1, r1, #2
 8003f9e:	9100      	str	r1, [sp, #0]
 8003fa0:	9900      	ldr	r1, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fa2:	9301      	str	r3, [sp, #4]
 8003fa4:	6b13      	ldr	r3, [r2, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003fa6:	2401      	movs	r4, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fa8:	4323      	orrs	r3, r4
 8003faa:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fac:	6b13      	ldr	r3, [r2, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003fae:	9406      	str	r4, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fb0:	4023      	ands	r3, r4
 8003fb2:	9301      	str	r3, [sp, #4]
 8003fb4:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fb6:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8003fb8:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 8003fbc:	2302      	movs	r3, #2
 8003fbe:	2602      	movs	r6, #2
 8003fc0:	2702      	movs	r7, #2
 8003fc2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003fc6:	e9cd 6704 	strd	r6, r7, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fca:	f000 fddf 	bl	8004b8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8003fce:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003fd2:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fd4:	4807      	ldr	r0, [pc, #28]	@ (8003ff4 <HAL_TIM_MspPostInit+0x88>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003fd6:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fd8:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8003fda:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003fde:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fe2:	f000 fdd3 	bl	8004b8c <HAL_GPIO_Init>
}
 8003fe6:	b008      	add	sp, #32
 8003fe8:	bdd0      	pop	{r4, r6, r7, pc}
 8003fea:	bf00      	nop
 8003fec:	40010000 	.word	0x40010000
 8003ff0:	40020400 	.word	0x40020400
 8003ff4:	40020000 	.word	0x40020000

08003ff8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003ff8:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART2)
 8003ffa:	4b32      	ldr	r3, [pc, #200]	@ (80040c4 <HAL_UART_MspInit+0xcc>)
 8003ffc:	6802      	ldr	r2, [r0, #0]
{
 8003ffe:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004000:	2400      	movs	r4, #0
  if(huart->Instance==USART2)
 8004002:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004004:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8004008:	e9cd 4404 	strd	r4, r4, [sp, #16]
 800400c:	9406      	str	r4, [sp, #24]
  if(huart->Instance==USART2)
 800400e:	d001      	beq.n	8004014 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004010:	b008      	add	sp, #32
 8004012:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8004014:	f503 33fa 	add.w	r3, r3, #128000	@ 0x1f400
 8004018:	9400      	str	r4, [sp, #0]
 800401a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800401c:	4e2a      	ldr	r6, [pc, #168]	@ (80040c8 <HAL_UART_MspInit+0xd0>)
    __HAL_RCC_USART2_CLK_ENABLE();
 800401e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8004022:	641a      	str	r2, [r3, #64]	@ 0x40
 8004024:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004026:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 800402a:	9200      	str	r2, [sp, #0]
 800402c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800402e:	9401      	str	r4, [sp, #4]
 8004030:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004032:	f042 0201 	orr.w	r2, r2, #1
 8004036:	631a      	str	r2, [r3, #48]	@ 0x30
 8004038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800403a:	f003 0301 	and.w	r3, r3, #1
 800403e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8004040:	220c      	movs	r2, #12
 8004042:	2302      	movs	r3, #2
 8004044:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004048:	4605      	mov	r5, r0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800404a:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800404c:	481f      	ldr	r0, [pc, #124]	@ (80040cc <HAL_UART_MspInit+0xd4>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800404e:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004050:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004052:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004054:	f000 fd9a 	bl	8004b8c <HAL_GPIO_Init>
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8004058:	4a1d      	ldr	r2, [pc, #116]	@ (80040d0 <HAL_UART_MspInit+0xd8>)
 800405a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800405e:	e9c6 2300 	strd	r2, r3, [r6]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004062:	4630      	mov	r0, r6
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004064:	f44f 6380 	mov.w	r3, #1024	@ 0x400
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004068:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800406c:	e9c6 3404 	strd	r3, r4, [r6, #16]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8004070:	e9c6 4406 	strd	r4, r4, [r6, #24]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004074:	e9c6 4408 	strd	r4, r4, [r6, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004078:	f000 fcf2 	bl	8004a60 <HAL_DMA_Init>
 800407c:	b9d8      	cbnz	r0, 80040b6 <HAL_UART_MspInit+0xbe>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800407e:	4c15      	ldr	r4, [pc, #84]	@ (80040d4 <HAL_UART_MspInit+0xdc>)
 8004080:	4915      	ldr	r1, [pc, #84]	@ (80040d8 <HAL_UART_MspInit+0xe0>)
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004082:	63ee      	str	r6, [r5, #60]	@ 0x3c
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8004084:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004088:	2300      	movs	r3, #0
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800408a:	e9c4 1200 	strd	r1, r2, [r4]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800408e:	4620      	mov	r0, r4
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004090:	2140      	movs	r1, #64	@ 0x40
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004092:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004096:	e9c4 1302 	strd	r1, r3, [r4, #8]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800409a:	e9c4 3305 	strd	r3, r3, [r4, #20]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800409e:	e9c4 3307 	strd	r3, r3, [r4, #28]
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80040a2:	63b5      	str	r5, [r6, #56]	@ 0x38
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80040a4:	6122      	str	r2, [r4, #16]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80040a6:	6263      	str	r3, [r4, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80040a8:	f000 fcda 	bl	8004a60 <HAL_DMA_Init>
 80040ac:	b930      	cbnz	r0, 80040bc <HAL_UART_MspInit+0xc4>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80040ae:	63ac      	str	r4, [r5, #56]	@ 0x38
 80040b0:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 80040b2:	b008      	add	sp, #32
 80040b4:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 80040b6:	f7fc ffa1 	bl	8000ffc <Error_Handler>
 80040ba:	e7e0      	b.n	800407e <HAL_UART_MspInit+0x86>
      Error_Handler();
 80040bc:	f7fc ff9e 	bl	8000ffc <Error_Handler>
 80040c0:	e7f5      	b.n	80040ae <HAL_UART_MspInit+0xb6>
 80040c2:	bf00      	nop
 80040c4:	40004400 	.word	0x40004400
 80040c8:	200006fc 	.word	0x200006fc
 80040cc:	40020000 	.word	0x40020000
 80040d0:	40026088 	.word	0x40026088
 80040d4:	2000069c 	.word	0x2000069c
 80040d8:	400260a0 	.word	0x400260a0

080040dc <ADC_IRQHandler>:
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_JEOS) == (LL_ADC_FLAG_JEOS));
 80040dc:	4b05      	ldr	r3, [pc, #20]	@ (80040f4 <ADC_IRQHandler+0x18>)
 80040de:	681a      	ldr	r2, [r3, #0]
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  if(LL_ADC_IsActiveFlag_JEOS(ADC1))
 80040e0:	0752      	lsls	r2, r2, #29
 80040e2:	d400      	bmi.n	80040e6 <ADC_IRQHandler+0xa>
    TSK_HighFrequencyTask();          /*GUI, this section is present only if DAC is disabled*/
  }
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80040e4:	4770      	bx	lr
    ADC1->SR &= ~(uint32_t)(LL_ADC_FLAG_JEOS | LL_ADC_FLAG_JSTRT);
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	f022 020c 	bic.w	r2, r2, #12
 80040ec:	601a      	str	r2, [r3, #0]
    TSK_HighFrequencyTask();          /*GUI, this section is present only if DAC is disabled*/
 80040ee:	f7fd be6f 	b.w	8001dd0 <TSK_HighFrequencyTask>
 80040f2:	bf00      	nop
 80040f4:	40012000 	.word	0x40012000

080040f8 <TIM1_UP_TIM10_IRQHandler>:
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80040f8:	4b03      	ldr	r3, [pc, #12]	@ (8004108 <TIM1_UP_TIM10_IRQHandler+0x10>)
  /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

  /* USER CODE END TIMx_UP_M1_IRQn 0 */

  LL_TIM_ClearFlag_UPDATE(TIM1);
  R3_1_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 80040fa:	4804      	ldr	r0, [pc, #16]	@ (800410c <TIM1_UP_TIM10_IRQHandler+0x14>)
 80040fc:	f06f 0201 	mvn.w	r2, #1
 8004100:	611a      	str	r2, [r3, #16]
 8004102:	f002 bcbb 	b.w	8006a7c <R3_1_TIMx_UP_IRQHandler>
 8004106:	bf00      	nop
 8004108:	40010000 	.word	0x40010000
 800410c:	20000370 	.word	0x20000370

08004110 <TIM1_BRK_TIM9_IRQHandler>:
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK(const TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 8004110:	4907      	ldr	r1, [pc, #28]	@ (8004130 <TIM1_BRK_TIM9_IRQHandler+0x20>)
/**
  * @brief  This function handles first motor BRK interrupt.
  * @param  None
  */
void TIMx_BRK_M1_IRQHandler(void)
{
 8004112:	b508      	push	{r3, lr}
 8004114:	690b      	ldr	r3, [r1, #16]
 8004116:	061b      	lsls	r3, r3, #24
 8004118:	d505      	bpl.n	8004126 <TIM1_BRK_TIM9_IRQHandler+0x16>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 800411a:	f06f 0380 	mvn.w	r3, #128	@ 0x80

  /* USER CODE END TIMx_BRK_M1_IRQn 0 */
  if (LL_TIM_IsActiveFlag_BRK(TIM1))
  {
    LL_TIM_ClearFlag_BRK(TIM1);
    PWMC_OVP_Handler(&PWM_Handle_M1._Super, TIM1);
 800411e:	4805      	ldr	r0, [pc, #20]	@ (8004134 <TIM1_BRK_TIM9_IRQHandler+0x24>)
 8004120:	610b      	str	r3, [r1, #16]
 8004122:	f7fe fb61 	bl	80027e8 <PWMC_OVP_Handler>
  MC_Scheduler();

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 8004126:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_Scheduler();
 800412a:	f7fd be0b 	b.w	8001d44 <MC_Scheduler>
 800412e:	bf00      	nop
 8004130:	40010000 	.word	0x40010000
 8004134:	20000370 	.word	0x20000370

08004138 <DMA1_Stream5_IRQHandler>:
    retVal = 0;
  }
  else
  {
    register __IO uint32_t *preg = __DMA_PTR_REG_OFFSET(DMAx->LISR,(Stream<=3)?0:1);
    retVal = ((READ_BIT(*preg, 1 << __LL_DMA_IT_TC_BIT(Stream)) == (1 << __LL_DMA_IT_TC_BIT(Stream))) ? 1UL : 0UL);
 8004138:	4b05      	ldr	r3, [pc, #20]	@ (8004150 <DMA1_Stream5_IRQHandler+0x18>)
 800413a:	685a      	ldr	r2, [r3, #4]
 800413c:	0512      	lsls	r2, r2, #20
 800413e:	d400      	bmi.n	8004142 <DMA1_Stream5_IRQHandler+0xa>
  }
  /* USER CODE BEGIN DMA1_Stream5_IRQHandler 1 */

  /* USER CODE BEGIN DMA1_Stream5_IRQHandler 1 */

}
 8004140:	4770      	bx	lr
    WRITE_REG (*preg, 1 << __LL_DMA_IT_TC_BIT(Stream));
 8004142:	f44f 6200 	mov.w	r2, #2048	@ 0x800
    ASPEP_HWDataReceivedIT (&aspepOverUartA);
 8004146:	4803      	ldr	r0, [pc, #12]	@ (8004154 <DMA1_Stream5_IRQHandler+0x1c>)
 8004148:	60da      	str	r2, [r3, #12]
 800414a:	f7fc bd07 	b.w	8000b5c <ASPEP_HWDataReceivedIT>
 800414e:	bf00      	nop
 8004150:	40026000 	.word	0x40026000
 8004154:	200005e8 	.word	0x200005e8

08004158 <USART2_IRQHandler>:
/**
  * @brief  This function handles USART interrupt request.
  * @param  None
  */
void USART2_IRQHandler(void)
{
 8004158:	b510      	push	{r4, lr}
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 800415a:	4b51      	ldr	r3, [pc, #324]	@ (80042a0 <USART2_IRQHandler+0x148>)
 800415c:	681a      	ldr	r2, [r3, #0]
  /* USER CODE BEGIN USART2_IRQHandler 0 */

  /* USER CODE END UUSART2_IRQHandler 0 */

  if ( LL_USART_IsActiveFlag_TC (USARTA) )
 800415e:	0651      	lsls	r1, r2, #25
{
 8004160:	b084      	sub	sp, #16
  if ( LL_USART_IsActiveFlag_TC (USARTA) )
 8004162:	f100 808e 	bmi.w	8004282 <USART2_IRQHandler+0x12a>
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8004166:	4b4e      	ldr	r3, [pc, #312]	@ (80042a0 <USART2_IRQHandler+0x148>)
 8004168:	681a      	ldr	r2, [r3, #0]
    LL_USART_ClearFlag_TC (USARTA);
    /* Data Sent by UART*/
    /* Need to free the buffer, and to check pending transfer*/
    ASPEP_HWDataTransmittedIT (&aspepOverUartA);
  }
  if ( (LL_USART_IsActiveFlag_ORE (USARTA) || LL_USART_IsActiveFlag_FE (USARTA) || LL_USART_IsActiveFlag_NE (USARTA))
 800416a:	0712      	lsls	r2, r2, #28
 800416c:	d402      	bmi.n	8004174 <USART2_IRQHandler+0x1c>
  return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	0794      	lsls	r4, r2, #30
 8004172:	d57e      	bpl.n	8004272 <USART2_IRQHandler+0x11a>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_ERROR(const USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE));
 8004174:	4b4a      	ldr	r3, [pc, #296]	@ (80042a0 <USART2_IRQHandler+0x148>)
 8004176:	695a      	ldr	r2, [r3, #20]
        && LL_USART_IsEnabledIT_ERROR (USARTA) )
 8004178:	07d1      	lsls	r1, r2, #31
 800417a:	d52d      	bpl.n	80041d8 <USART2_IRQHandler+0x80>
  tmpreg = USARTx->SR;
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	9203      	str	r2, [sp, #12]
  (void) tmpreg;
 8004180:	9a03      	ldr	r2, [sp, #12]
  tmpreg = USARTx->DR;
 8004182:	685a      	ldr	r2, [r3, #4]
 8004184:	9203      	str	r2, [sp, #12]
  (void) tmpreg;
 8004186:	9a03      	ldr	r2, [sp, #12]
  tmpreg = USARTx->SR;
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	9202      	str	r2, [sp, #8]
  (void) tmpreg;
 800418c:	9a02      	ldr	r2, [sp, #8]
  tmpreg = USARTx->DR;
 800418e:	685a      	ldr	r2, [r3, #4]
 8004190:	9202      	str	r2, [sp, #8]
  (void) tmpreg;
 8004192:	9a02      	ldr	r2, [sp, #8]
  tmpreg = USARTx->SR;
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 8004198:	9a01      	ldr	r2, [sp, #4]
  tmpreg = USARTx->DR;
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 800419e:	9b01      	ldr	r3, [sp, #4]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a0:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80041a4:	f202 4314 	addw	r3, r2, #1044	@ 0x414
 80041a8:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
 80041ac:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b0:	f202 4014 	addw	r0, r2, #1044	@ 0x414
 80041b4:	e840 3100 	strex	r1, r3, [r0]
 80041b8:	2900      	cmp	r1, #0
 80041ba:	d1f3      	bne.n	80041a4 <USART2_IRQHandler+0x4c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041bc:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80041c0:	f202 430c 	addw	r3, r2, #1036	@ 0x40c
 80041c4:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 80041c8:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041cc:	f202 400c 	addw	r0, r2, #1036	@ 0x40c
 80041d0:	e840 3100 	strex	r1, r3, [r0]
 80041d4:	2900      	cmp	r1, #0
 80041d6:	d1f3      	bne.n	80041c0 <USART2_IRQHandler+0x68>
  return (READ_BIT(USARTx->SR, USART_SR_IDLE) == (USART_SR_IDLE));
 80041d8:	4b31      	ldr	r3, [pc, #196]	@ (80042a0 <USART2_IRQHandler+0x148>)
 80041da:	681a      	ldr	r2, [r3, #0]
    LL_USART_ClearFlag_NE(USARTA);
    /* We disable ERROR interrupt to avoid to trig one Overrun IT per additional byte recevied*/
    LL_USART_DisableIT_ERROR (USARTA);
    LL_USART_EnableIT_IDLE (USARTA);
  }
  if ( LL_USART_IsActiveFlag_IDLE (USARTA) && LL_USART_IsEnabledIT_IDLE (USARTA) )
 80041dc:	06d2      	lsls	r2, r2, #27
 80041de:	d546      	bpl.n	800426e <USART2_IRQHandler+0x116>
  return (READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE));
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	06db      	lsls	r3, r3, #27
 80041e4:	d543      	bpl.n	800426e <USART2_IRQHandler+0x116>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e6:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80041ea:	f202 430c 	addw	r3, r2, #1036	@ 0x40c
 80041ee:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 80041f2:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f6:	f202 400c 	addw	r0, r2, #1036	@ 0x40c
 80041fa:	e840 3100 	strex	r1, r3, [r0]
 80041fe:	2900      	cmp	r1, #0
 8004200:	d1f3      	bne.n	80041ea <USART2_IRQHandler+0x92>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004202:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8004206:	f202 4314 	addw	r3, r2, #1044	@ 0x414
 800420a:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 800420e:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004212:	f202 4014 	addw	r0, r2, #1044	@ 0x414
 8004216:	e840 3100 	strex	r1, r3, [r0]
 800421a:	2900      	cmp	r1, #0
 800421c:	d1f3      	bne.n	8004206 <USART2_IRQHandler+0xae>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800421e:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8004222:	f202 4314 	addw	r3, r2, #1044	@ 0x414
 8004226:	e853 3f00 	ldrex	r3, [r3]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableDMAReq_RX(USART_TypeDef *USARTx)
{
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_DMAR);
 800422a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800422e:	f202 4014 	addw	r0, r2, #1044	@ 0x414
 8004232:	e840 3100 	strex	r1, r3, [r0]
 8004236:	2900      	cmp	r1, #0
 8004238:	d1f3      	bne.n	8004222 <USART2_IRQHandler+0xca>
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 800423a:	4b19      	ldr	r3, [pc, #100]	@ (80042a0 <USART2_IRQHandler+0x148>)
 800423c:	685b      	ldr	r3, [r3, #4]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800423e:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8004242:	f202 4314 	addw	r3, r2, #1044	@ 0x414
 8004246:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 800424a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800424e:	f202 4014 	addw	r0, r2, #1044	@ 0x414
 8004252:	e840 3100 	strex	r1, r3, [r0]
 8004256:	2900      	cmp	r1, #0
 8004258:	d1f3      	bne.n	8004242 <USART2_IRQHandler+0xea>
    WRITE_REG (*preg, 1 << __LL_DMA_IT_TE_BIT(Stream));
 800425a:	4b12      	ldr	r3, [pc, #72]	@ (80042a4 <USART2_IRQHandler+0x14c>)
    /* We disable the DMA request, Read the dummy data, endable back the DMA request */
    LL_USART_DisableDMAReq_RX (USARTA);
    LL_USART_ReceiveData8(USARTA);
    LL_USART_EnableDMAReq_RX (USARTA);
    LL_DMA_ClearFlag_TE (DMA_RX_A, DMACH_RX_A );
    ASPEP_HWDMAReset (&aspepOverUartA);
 800425c:	4812      	ldr	r0, [pc, #72]	@ (80042a8 <USART2_IRQHandler+0x150>)
 800425e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004262:	60da      	str	r2, [r3, #12]
  }

  /* USER CODE BEGIN USART2_IRQHandler 1 */

  /* USER CODE END USART2_IRQHandler 1 */
}
 8004264:	b004      	add	sp, #16
 8004266:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ASPEP_HWDMAReset (&aspepOverUartA);
 800426a:	f7fc bcc5 	b.w	8000bf8 <ASPEP_HWDMAReset>
}
 800426e:	b004      	add	sp, #16
 8004270:	bd10      	pop	{r4, pc}
  return (READ_BIT(USARTx->SR, USART_SR_NE) == (USART_SR_NE));
 8004272:	681b      	ldr	r3, [r3, #0]
  if ( (LL_USART_IsActiveFlag_ORE (USARTA) || LL_USART_IsActiveFlag_FE (USARTA) || LL_USART_IsActiveFlag_NE (USARTA))
 8004274:	0758      	lsls	r0, r3, #29
 8004276:	d5af      	bpl.n	80041d8 <USART2_IRQHandler+0x80>
  return (READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE));
 8004278:	4b09      	ldr	r3, [pc, #36]	@ (80042a0 <USART2_IRQHandler+0x148>)
 800427a:	695a      	ldr	r2, [r3, #20]
        && LL_USART_IsEnabledIT_ERROR (USARTA) )
 800427c:	07d1      	lsls	r1, r2, #31
 800427e:	d5ab      	bpl.n	80041d8 <USART2_IRQHandler+0x80>
 8004280:	e77c      	b.n	800417c <USART2_IRQHandler+0x24>
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8004282:	4908      	ldr	r1, [pc, #32]	@ (80042a4 <USART2_IRQHandler+0x14c>)
    ASPEP_HWDataTransmittedIT (&aspepOverUartA);
 8004284:	4808      	ldr	r0, [pc, #32]	@ (80042a8 <USART2_IRQHandler+0x150>)
 8004286:	f8d1 20a0 	ldr.w	r2, [r1, #160]	@ 0xa0
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 800428a:	f06f 0440 	mvn.w	r4, #64	@ 0x40
 800428e:	f022 0201 	bic.w	r2, r2, #1
 8004292:	f8c1 20a0 	str.w	r2, [r1, #160]	@ 0xa0
 8004296:	601c      	str	r4, [r3, #0]
 8004298:	f7fc fab4 	bl	8000804 <ASPEP_HWDataTransmittedIT>
 800429c:	e763      	b.n	8004166 <USART2_IRQHandler+0xe>
 800429e:	bf00      	nop
 80042a0:	40004400 	.word	0x40004400
 80042a4:	40026000 	.word	0x40026000
 80042a8:	200005e8 	.word	0x200005e8

080042ac <HardFault_Handler>:
/**
  * @brief  This function handles Hard Fault exception.
  * @param  None
  */
void HardFault_Handler(void)
{
 80042ac:	b508      	push	{r3, lr}
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 80042ae:	f7fd fee5 	bl	800207c <TSK_HardwareFaultTask>

  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80042b2:	e7fe      	b.n	80042b2 <HardFault_Handler+0x6>

080042b4 <SysTick_Handler>:
 /* USER CODE END HardFault_IRQn 1 */

}

void SysTick_Handler(void)
{
 80042b4:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 80042b6:	4c0a      	ldr	r4, [pc, #40]	@ (80042e0 <SysTick_Handler+0x2c>)
 80042b8:	7823      	ldrb	r3, [r4, #0]
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	d006      	beq.n	80042cc <SysTick_Handler+0x18>
  {
    HAL_IncTick();
    HAL_SYSTICK_IRQHandler();
    SystickDividerCounter = 0;
  }
  SystickDividerCounter ++;
 80042be:	3301      	adds	r3, #1
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	7023      	strb	r3, [r4, #0]
  /* USER CODE END SysTick_IRQn 1 */
    MC_RunMotorControlTasks();

  /* USER CODE BEGIN SysTick_IRQn 2 */
  /* USER CODE END SysTick_IRQn 2 */
}
 80042c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 80042c8:	f7fd becc 	b.w	8002064 <MC_RunMotorControlTasks>
    HAL_IncTick();
 80042cc:	f000 f904 	bl	80044d8 <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 80042d0:	f000 fbc2 	bl	8004a58 <HAL_SYSTICK_IRQHandler>
 80042d4:	2301      	movs	r3, #1
  SystickDividerCounter ++;
 80042d6:	7023      	strb	r3, [r4, #0]
}
 80042d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 80042dc:	f7fd bec2 	b.w	8002064 <MC_RunMotorControlTasks>
 80042e0:	20000670 	.word	0x20000670

080042e4 <UASPEP_INIT>:
  }
  else
  {
#endif
    /* Enable DMA UART */
    LL_USART_ClearFlag_TC(pHandle->USARTx);
 80042e4:	6802      	ldr	r2, [r0, #0]
 80042e6:	4611      	mov	r1, r2
 80042e8:	f06f 0340 	mvn.w	r3, #64	@ 0x40
{
 80042ec:	b470      	push	{r4, r5, r6}
 80042ee:	f841 3b0c 	str.w	r3, [r1], #12
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f2:	e851 3f00 	ldrex	r3, [r1]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 80042f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042fa:	e841 3400 	strex	r4, r3, [r1]
 80042fe:	2c00      	cmp	r4, #0
 8004300:	d1f7      	bne.n	80042f2 <UASPEP_INIT+0xe>
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8004302:	f102 0114 	add.w	r1, r2, #20
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004306:	e851 3f00 	ldrex	r3, [r1]
 800430a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800430e:	e841 3400 	strex	r4, r3, [r1]
 8004312:	2c00      	cmp	r4, #0
 8004314:	d1f7      	bne.n	8004306 <UASPEP_INIT+0x22>
  * @param  PeriphAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t PeriphAddress)
{
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 8004316:	6901      	ldr	r1, [r0, #16]
 8004318:	4e16      	ldr	r6, [pc, #88]	@ (8004374 <UASPEP_INIT+0x90>)
 800431a:	6883      	ldr	r3, [r0, #8]
 800431c:	5c74      	ldrb	r4, [r6, r1]
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 800431e:	6845      	ldr	r5, [r0, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 8004320:	4423      	add	r3, r4
    LL_USART_EnableDMAReq_TX(pHandle->USARTx);

    /* Write the USART_TDR register address in the DMA control register to configure it as
     * the destination of the transfer */
    //cstat !MISRAC2012-Rule-11.4
    LL_DMA_SetPeriphAddress(pHandle->txDMA, pHandle->txChannel, (uint32_t)&pHandle->USARTx->DR);
 8004322:	1d11      	adds	r1, r2, #4
 8004324:	6099      	str	r1, [r3, #8]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 8004326:	68c3      	ldr	r3, [r0, #12]
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 8004328:	4611      	mov	r1, r2
 800432a:	f06f 0440 	mvn.w	r4, #64	@ 0x40
 800432e:	f841 4b14 	str.w	r4, [r1], #20
 8004332:	5cf4      	ldrb	r4, [r6, r3]
 8004334:	592b      	ldr	r3, [r5, r4]
 8004336:	f043 0310 	orr.w	r3, r3, #16
 800433a:	512b      	str	r3, [r5, r4]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800433c:	e851 3f00 	ldrex	r3, [r1]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8004340:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004344:	e841 3400 	strex	r4, r3, [r1]
 8004348:	2c00      	cmp	r4, #0
 800434a:	d1f7      	bne.n	800433c <UASPEP_INIT+0x58>
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 800434c:	68c3      	ldr	r3, [r0, #12]
 800434e:	5cf3      	ldrb	r3, [r6, r3]
 8004350:	441d      	add	r5, r3
    LL_USART_EnableIT_ERROR(pHandle->USARTx);

    /* Write the USART_RDR register address in the DMA control register to configure it as
     * the source of the transfer */
    //cstat !MISRAC2012-Rule-11.4
    LL_DMA_SetPeriphAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)&pHandle->USARTx->DR);
 8004352:	1d11      	adds	r1, r2, #4
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 8004354:	f06f 0340 	mvn.w	r3, #64	@ 0x40
 8004358:	60a9      	str	r1, [r5, #8]
 800435a:	f842 3b14 	str.w	r3, [r2], #20
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800435e:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8004362:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004366:	e842 3100 	strex	r1, r3, [r2]
 800436a:	2900      	cmp	r1, #0
 800436c:	d1f7      	bne.n	800435e <UASPEP_INIT+0x7a>
}
 800436e:	bc70      	pop	{r4, r5, r6}
 8004370:	4770      	bx	lr
 8004372:	bf00      	nop
 8004374:	08008684 	.word	0x08008684

08004378 <UASPEP_SEND_PACKET>:
  * @param  pHWHandle Hardware components chosen for communication
  * @param  data Data to be transmitted to controller
  * @param  length Length of the data to be transmitted
  */
bool UASPEP_SEND_PACKET(void *pHWHandle, void *data, uint16_t length)
{
 8004378:	b4f0      	push	{r4, r5, r6, r7}
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *)pHWHandle; //cstat !MISRAC2012-Rule-11.5
  bool result;
  if (0U == LL_DMA_IsEnabledStream(pHandle->txDMA, pHandle->txChannel))
 800437a:	6905      	ldr	r5, [r0, #16]
  return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN) == (DMA_SxCR_EN));
 800437c:	4e1b      	ldr	r6, [pc, #108]	@ (80043ec <UASPEP_SEND_PACKET+0x74>)
 800437e:	6884      	ldr	r4, [r0, #8]
 8004380:	5d73      	ldrb	r3, [r6, r5]
 8004382:	58e7      	ldr	r7, [r4, r3]
 8004384:	07ff      	lsls	r7, r7, #31
 8004386:	4423      	add	r3, r4
 8004388:	d422      	bmi.n	80043d0 <UASPEP_SEND_PACKET+0x58>
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 800438a:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 800438c:	6859      	ldr	r1, [r3, #4]
 800438e:	0c09      	lsrs	r1, r1, #16
 8004390:	0409      	lsls	r1, r1, #16
 8004392:	430a      	orrs	r2, r1
 8004394:	605a      	str	r2, [r3, #4]
  if (NULL == DMAx)
 8004396:	b1ac      	cbz	r4, 80043c4 <UASPEP_SEND_PACKET+0x4c>
    register __IO uint32_t *preg = __DMA_PTR_REG_OFFSET(DMAx->LIFCR,(Stream<=3)?0:1);
 8004398:	2d03      	cmp	r5, #3
 800439a:	bf94      	ite	ls
 800439c:	2200      	movls	r2, #0
 800439e:	2201      	movhi	r2, #1
    WRITE_REG (*preg, 1 << __LL_DMA_IT_TC_BIT(Stream));
 80043a0:	f015 0503 	ands.w	r5, r5, #3
    register __IO uint32_t *preg = __DMA_PTR_REG_OFFSET(DMAx->LIFCR,(Stream<=3)?0:1);
 80043a4:	f104 0308 	add.w	r3, r4, #8
    WRITE_REG (*preg, 1 << __LL_DMA_IT_TC_BIT(Stream));
 80043a8:	d015      	beq.n	80043d6 <UASPEP_SEND_PACKET+0x5e>
 80043aa:	2d01      	cmp	r5, #1
 80043ac:	d01a      	beq.n	80043e4 <UASPEP_SEND_PACKET+0x6c>
 80043ae:	2d02      	cmp	r5, #2
 80043b0:	bf14      	ite	ne
 80043b2:	f04f 6100 	movne.w	r1, #134217728	@ 0x8000000
 80043b6:	f44f 1100 	moveq.w	r1, #2097152	@ 0x200000
 80043ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 80043be:	6903      	ldr	r3, [r0, #16]
 80043c0:	5cf3      	ldrb	r3, [r6, r3]
 80043c2:	4423      	add	r3, r4
 80043c4:	681a      	ldr	r2, [r3, #0]
    //cstat !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6
    LL_DMA_SetMemoryAddress(pHandle->txDMA, pHandle->txChannel, (uint32_t)data);
    LL_DMA_SetDataLength(pHandle->txDMA, pHandle->txChannel, length);
    LL_DMA_ClearFlag_TC(pHandle->txDMA, pHandle->txChannel);
    LL_DMA_EnableStream(pHandle->txDMA, pHandle->txChannel);
    result = true;
 80043c6:	2001      	movs	r0, #1
 80043c8:	4302      	orrs	r2, r0
  else
  {
    result = false;
  }
  return (result);
}
 80043ca:	bcf0      	pop	{r4, r5, r6, r7}
 80043cc:	601a      	str	r2, [r3, #0]
 80043ce:	4770      	bx	lr
    result = false;
 80043d0:	2000      	movs	r0, #0
}
 80043d2:	bcf0      	pop	{r4, r5, r6, r7}
 80043d4:	4770      	bx	lr
 80043d6:	2120      	movs	r1, #32
 80043d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80043dc:	6903      	ldr	r3, [r0, #16]
 80043de:	5cf3      	ldrb	r3, [r6, r3]
 80043e0:	4423      	add	r3, r4
 80043e2:	e7ef      	b.n	80043c4 <UASPEP_SEND_PACKET+0x4c>
 80043e4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80043e8:	e7f6      	b.n	80043d8 <UASPEP_SEND_PACKET+0x60>
 80043ea:	bf00      	nop
 80043ec:	08008684 	.word	0x08008684

080043f0 <UASPEP_RECEIVE_BUFFER>:
  * @param  pHWHandle Hardware components chosen for communication
  * @param  buffer Buffer which will receive the communicated data
  * @param  length Length of the received data
  */
void UASPEP_RECEIVE_BUFFER(void *pHWHandle, void* buffer, uint16_t length)
{
 80043f0:	b430      	push	{r4, r5}
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 80043f2:	68c3      	ldr	r3, [r0, #12]
 80043f4:	4d09      	ldr	r5, [pc, #36]	@ (800441c <UASPEP_RECEIVE_BUFFER+0x2c>)
 80043f6:	6844      	ldr	r4, [r0, #4]
 80043f8:	5ce8      	ldrb	r0, [r5, r3]
 80043fa:	eb04 0c00 	add.w	ip, r4, r0
 80043fe:	f8cc 100c 	str.w	r1, [ip, #12]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 8004402:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8004406:	0c1b      	lsrs	r3, r3, #16
 8004408:	041b      	lsls	r3, r3, #16
 800440a:	4313      	orrs	r3, r2
 800440c:	f8cc 3004 	str.w	r3, [ip, #4]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8004410:	5823      	ldr	r3, [r4, r0]
 8004412:	f043 0301 	orr.w	r3, r3, #1
 8004416:	5023      	str	r3, [r4, r0]
  //cstat !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6
  LL_DMA_SetMemoryAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)buffer);
  LL_DMA_SetDataLength(pHandle->rxDMA, pHandle->rxChannel, length);

  LL_DMA_EnableStream(pHandle->rxDMA, pHandle->rxChannel);
}
 8004418:	bc30      	pop	{r4, r5}
 800441a:	4770      	bx	lr
 800441c:	08008684 	.word	0x08008684

08004420 <UASPEP_IDLE_ENABLE>:
  * @param  pHandle Handler of the current instance of the UASPEP component
  */
void UASPEP_IDLE_ENABLE(void *pHWHandle)
{
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *)pHWHandle; //cstat !MISRAC2012-Rule-11.5
  LL_USART_ClearFlag_IDLE(pHandle->USARTx);
 8004420:	6802      	ldr	r2, [r0, #0]
{
 8004422:	b082      	sub	sp, #8
  tmpreg = USARTx->SR;
 8004424:	6813      	ldr	r3, [r2, #0]
 8004426:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8004428:	9b01      	ldr	r3, [sp, #4]
  tmpreg = USARTx->DR;
 800442a:	6853      	ldr	r3, [r2, #4]
 800442c:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 800442e:	9b01      	ldr	r3, [sp, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8004430:	320c      	adds	r2, #12
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004432:	e852 3f00 	ldrex	r3, [r2]
 8004436:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800443a:	e842 3100 	strex	r1, r3, [r2]
 800443e:	2900      	cmp	r1, #0
 8004440:	d1f7      	bne.n	8004432 <UASPEP_IDLE_ENABLE+0x12>
  LL_USART_EnableIT_IDLE(pHandle->USARTx);
}
 8004442:	b002      	add	sp, #8
 8004444:	4770      	bx	lr
 8004446:	bf00      	nop

08004448 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004448:	4a03      	ldr	r2, [pc, #12]	@ (8004458 <SystemInit+0x10>)
 800444a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800444e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004452:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004456:	4770      	bx	lr
 8004458:	e000ed00 	.word	0xe000ed00

0800445c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800445c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800445e:	4a0e      	ldr	r2, [pc, #56]	@ (8004498 <HAL_InitTick+0x3c>)
 8004460:	4b0e      	ldr	r3, [pc, #56]	@ (800449c <HAL_InitTick+0x40>)
 8004462:	7812      	ldrb	r2, [r2, #0]
 8004464:	681b      	ldr	r3, [r3, #0]
{
 8004466:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004468:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800446c:	fbb0 f0f2 	udiv	r0, r0, r2
 8004470:	fbb3 f0f0 	udiv	r0, r3, r0
 8004474:	f000 fad4 	bl	8004a20 <HAL_SYSTICK_Config>
 8004478:	b908      	cbnz	r0, 800447e <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800447a:	2d0f      	cmp	r5, #15
 800447c:	d901      	bls.n	8004482 <HAL_InitTick+0x26>
    return HAL_ERROR;
 800447e:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8004480:	bd38      	pop	{r3, r4, r5, pc}
 8004482:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004484:	4602      	mov	r2, r0
 8004486:	4629      	mov	r1, r5
 8004488:	f04f 30ff 	mov.w	r0, #4294967295
 800448c:	f000 fa7e 	bl	800498c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004490:	4b03      	ldr	r3, [pc, #12]	@ (80044a0 <HAL_InitTick+0x44>)
 8004492:	4620      	mov	r0, r4
 8004494:	601d      	str	r5, [r3, #0]
}
 8004496:	bd38      	pop	{r3, r4, r5, pc}
 8004498:	20000678 	.word	0x20000678
 800449c:	20000674 	.word	0x20000674
 80044a0:	2000067c 	.word	0x2000067c

080044a4 <HAL_Init>:
{
 80044a4:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80044a6:	4b0b      	ldr	r3, [pc, #44]	@ (80044d4 <HAL_Init+0x30>)
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044ae:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80044b6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80044be:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80044c0:	2003      	movs	r0, #3
 80044c2:	f000 fa51 	bl	8004968 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80044c6:	2004      	movs	r0, #4
 80044c8:	f7ff ffc8 	bl	800445c <HAL_InitTick>
  HAL_MspInit();
 80044cc:	f7ff fcd2 	bl	8003e74 <HAL_MspInit>
}
 80044d0:	2000      	movs	r0, #0
 80044d2:	bd08      	pop	{r3, pc}
 80044d4:	40023c00 	.word	0x40023c00

080044d8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80044d8:	4a03      	ldr	r2, [pc, #12]	@ (80044e8 <HAL_IncTick+0x10>)
 80044da:	4b04      	ldr	r3, [pc, #16]	@ (80044ec <HAL_IncTick+0x14>)
 80044dc:	6811      	ldr	r1, [r2, #0]
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	440b      	add	r3, r1
 80044e2:	6013      	str	r3, [r2, #0]
}
 80044e4:	4770      	bx	lr
 80044e6:	bf00      	nop
 80044e8:	20001aa0 	.word	0x20001aa0
 80044ec:	20000678 	.word	0x20000678

080044f0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80044f0:	4b01      	ldr	r3, [pc, #4]	@ (80044f8 <HAL_GetTick+0x8>)
 80044f2:	6818      	ldr	r0, [r3, #0]
}
 80044f4:	4770      	bx	lr
 80044f6:	bf00      	nop
 80044f8:	20001aa0 	.word	0x20001aa0

080044fc <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;

  /* Check ADC handle */
  if (hadc == NULL)
 80044fc:	2800      	cmp	r0, #0
 80044fe:	f000 809e 	beq.w	800463e <HAL_ADC_Init+0x142>
{
 8004502:	b538      	push	{r3, r4, r5, lr}
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8004504:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 8004506:	4604      	mov	r4, r0
 8004508:	b13d      	cbz	r5, 800451a <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800450a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800450c:	06db      	lsls	r3, r3, #27
 800450e:	d50c      	bpl.n	800452a <HAL_ADC_Init+0x2e>
  {
    tmp_hal_status = HAL_ERROR;
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004510:	2300      	movs	r3, #0
 8004512:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    tmp_hal_status = HAL_ERROR;
 8004516:	2001      	movs	r0, #1

  /* Return function status */
  return tmp_hal_status;
}
 8004518:	bd38      	pop	{r3, r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 800451a:	f7ff fcc9 	bl	8003eb0 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800451e:	6465      	str	r5, [r4, #68]	@ 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004520:	6c23      	ldr	r3, [r4, #64]	@ 0x40
    hadc->Lock = HAL_UNLOCKED;
 8004522:	f884 503c 	strb.w	r5, [r4, #60]	@ 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004526:	06db      	lsls	r3, r3, #27
 8004528:	d4f2      	bmi.n	8004510 <HAL_ADC_Init+0x14>
    ADC_STATE_CLR_SET(hadc->State,
 800452a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800452c:	4a47      	ldr	r2, [pc, #284]	@ (800464c <HAL_ADC_Init+0x150>)
    ADC_STATE_CLR_SET(hadc->State,
 800452e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004532:	f023 0302 	bic.w	r3, r3, #2
 8004536:	f043 0302 	orr.w	r3, r3, #2
 800453a:	6423      	str	r3, [r4, #64]	@ 0x40
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800453c:	6851      	ldr	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800453e:	6823      	ldr	r3, [r4, #0]
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004540:	f421 3140 	bic.w	r1, r1, #196608	@ 0x30000
 8004544:	6051      	str	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004546:	6851      	ldr	r1, [r2, #4]
 8004548:	6860      	ldr	r0, [r4, #4]
 800454a:	4301      	orrs	r1, r0
 800454c:	6051      	str	r1, [r2, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800454e:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004550:	6920      	ldr	r0, [r4, #16]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004552:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004554:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004558:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800455a:	685a      	ldr	r2, [r3, #4]
 800455c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8004560:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004562:	685a      	ldr	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004564:	68e0      	ldr	r0, [r4, #12]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004566:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800456a:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800456c:	685a      	ldr	r2, [r3, #4]
 800456e:	430a      	orrs	r2, r1
 8004570:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004572:	689a      	ldr	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004574:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004576:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800457a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800457c:	689a      	ldr	r2, [r3, #8]
 800457e:	4302      	orrs	r2, r0
 8004580:	609a      	str	r2, [r3, #8]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004582:	4a33      	ldr	r2, [pc, #204]	@ (8004650 <HAL_ADC_Init+0x154>)
 8004584:	4291      	cmp	r1, r2
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004586:	689a      	ldr	r2, [r3, #8]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004588:	d051      	beq.n	800462e <HAL_ADC_Init+0x132>
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800458a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800458e:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004590:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004592:	689a      	ldr	r2, [r3, #8]
 8004594:	4311      	orrs	r1, r2
 8004596:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004598:	689a      	ldr	r2, [r3, #8]
 800459a:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800459e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80045a0:	689a      	ldr	r2, [r3, #8]
 80045a2:	4302      	orrs	r2, r0
 80045a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80045a6:	689a      	ldr	r2, [r3, #8]
 80045a8:	f022 0202 	bic.w	r2, r2, #2
 80045ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80045ae:	689a      	ldr	r2, [r3, #8]
 80045b0:	7e21      	ldrb	r1, [r4, #24]
 80045b2:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80045b6:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80045b8:	f894 2020 	ldrb.w	r2, [r4, #32]
 80045bc:	2a00      	cmp	r2, #0
 80045be:	d040      	beq.n	8004642 <HAL_ADC_Init+0x146>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80045c0:	685a      	ldr	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80045c2:	6a61      	ldr	r1, [r4, #36]	@ 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80045c4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80045c8:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80045ca:	685a      	ldr	r2, [r3, #4]
 80045cc:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80045d0:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80045d2:	685a      	ldr	r2, [r3, #4]
 80045d4:	3901      	subs	r1, #1
 80045d6:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80045da:	605a      	str	r2, [r3, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80045dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80045de:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80045e0:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80045e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80045e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045e8:	3901      	subs	r1, #1
 80045ea:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 80045ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80045f0:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80045f2:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80045f4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80045f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80045fa:	689a      	ldr	r2, [r3, #8]
 80045fc:	f894 0030 	ldrb.w	r0, [r4, #48]	@ 0x30
 8004600:	ea42 2240 	orr.w	r2, r2, r0, lsl #9
 8004604:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004606:	689a      	ldr	r2, [r3, #8]
 8004608:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800460c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800460e:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8004610:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004612:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8004616:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8004618:	6460      	str	r0, [r4, #68]	@ 0x44
    ADC_STATE_CLR_SET(hadc->State,
 800461a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800461c:	f023 0303 	bic.w	r3, r3, #3
 8004620:	f043 0301 	orr.w	r3, r3, #1
 8004624:	6423      	str	r3, [r4, #64]	@ 0x40
  __HAL_UNLOCK(hadc);
 8004626:	2300      	movs	r3, #0
 8004628:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 800462c:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800462e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004632:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004634:	689a      	ldr	r2, [r3, #8]
 8004636:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800463a:	609a      	str	r2, [r3, #8]
 800463c:	e7b3      	b.n	80045a6 <HAL_ADC_Init+0xaa>
    return HAL_ERROR;
 800463e:	2001      	movs	r0, #1
}
 8004640:	4770      	bx	lr
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004642:	685a      	ldr	r2, [r3, #4]
 8004644:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004648:	605a      	str	r2, [r3, #4]
 800464a:	e7c7      	b.n	80045dc <HAL_ADC_Init+0xe0>
 800464c:	40012300 	.word	0x40012300
 8004650:	0f000001 	.word	0x0f000001

08004654 <HAL_ADC_ConfigChannel>:
{
 8004654:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 8004656:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 800465a:	b082      	sub	sp, #8
 800465c:	4602      	mov	r2, r0
  __HAL_LOCK(hadc);
 800465e:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 8004660:	f04f 0000 	mov.w	r0, #0
 8004664:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8004666:	f000 809e 	beq.w	80047a6 <HAL_ADC_ConfigChannel+0x152>
 800466a:	2301      	movs	r3, #1
 800466c:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004670:	680d      	ldr	r5, [r1, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004672:	6813      	ldr	r3, [r2, #0]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004674:	688c      	ldr	r4, [r1, #8]
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004676:	2d09      	cmp	r5, #9
 8004678:	b2a8      	uxth	r0, r5
 800467a:	d828      	bhi.n	80046ce <HAL_ADC_ConfigChannel+0x7a>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800467c:	691e      	ldr	r6, [r3, #16]
 800467e:	eb05 0e45 	add.w	lr, r5, r5, lsl #1
 8004682:	f04f 0c07 	mov.w	ip, #7
 8004686:	fa0c fc0e 	lsl.w	ip, ip, lr
 800468a:	ea26 060c 	bic.w	r6, r6, ip
 800468e:	611e      	str	r6, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004690:	691e      	ldr	r6, [r3, #16]
 8004692:	fa04 f40e 	lsl.w	r4, r4, lr
 8004696:	4334      	orrs	r4, r6
 8004698:	611c      	str	r4, [r3, #16]
  if (sConfig->Rank < 7U)
 800469a:	684c      	ldr	r4, [r1, #4]
 800469c:	2c06      	cmp	r4, #6
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800469e:	eb04 0184 	add.w	r1, r4, r4, lsl #2
  if (sConfig->Rank < 7U)
 80046a2:	d82a      	bhi.n	80046fa <HAL_ADC_ConfigChannel+0xa6>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80046a4:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 80046a6:	3905      	subs	r1, #5
 80046a8:	f04f 0c1f 	mov.w	ip, #31
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80046ac:	4088      	lsls	r0, r1
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80046ae:	fa0c f101 	lsl.w	r1, ip, r1
 80046b2:	ea24 0101 	bic.w	r1, r4, r1
 80046b6:	6359      	str	r1, [r3, #52]	@ 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80046b8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80046ba:	4308      	orrs	r0, r1
 80046bc:	6358      	str	r0, [r3, #52]	@ 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80046be:	493b      	ldr	r1, [pc, #236]	@ (80047ac <HAL_ADC_ConfigChannel+0x158>)
 80046c0:	428b      	cmp	r3, r1
 80046c2:	d02b      	beq.n	800471c <HAL_ADC_ConfigChannel+0xc8>
  __HAL_UNLOCK(hadc);
 80046c4:	2000      	movs	r0, #0
 80046c6:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c
}
 80046ca:	b002      	add	sp, #8
 80046cc:	bd70      	pop	{r4, r5, r6, pc}
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80046ce:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
 80046d2:	68de      	ldr	r6, [r3, #12]
 80046d4:	f1ac 0c1e 	sub.w	ip, ip, #30
 80046d8:	f04f 0e07 	mov.w	lr, #7
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80046dc:	fa04 f40c 	lsl.w	r4, r4, ip
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80046e0:	fa0e fc0c 	lsl.w	ip, lr, ip
 80046e4:	ea26 060c 	bic.w	r6, r6, ip
 80046e8:	60de      	str	r6, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80046ea:	68de      	ldr	r6, [r3, #12]
 80046ec:	4334      	orrs	r4, r6
 80046ee:	60dc      	str	r4, [r3, #12]
  if (sConfig->Rank < 7U)
 80046f0:	684c      	ldr	r4, [r1, #4]
 80046f2:	2c06      	cmp	r4, #6
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80046f4:	eb04 0184 	add.w	r1, r4, r4, lsl #2
  if (sConfig->Rank < 7U)
 80046f8:	d9d4      	bls.n	80046a4 <HAL_ADC_ConfigChannel+0x50>
  else if (sConfig->Rank < 13U)
 80046fa:	2c0c      	cmp	r4, #12
 80046fc:	d81f      	bhi.n	800473e <HAL_ADC_ConfigChannel+0xea>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80046fe:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 8004700:	3923      	subs	r1, #35	@ 0x23
 8004702:	261f      	movs	r6, #31
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004704:	4088      	lsls	r0, r1
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004706:	fa06 f101 	lsl.w	r1, r6, r1
 800470a:	ea24 0101 	bic.w	r1, r4, r1
 800470e:	6319      	str	r1, [r3, #48]	@ 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004710:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004712:	4308      	orrs	r0, r1
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004714:	4925      	ldr	r1, [pc, #148]	@ (80047ac <HAL_ADC_ConfigChannel+0x158>)
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004716:	6318      	str	r0, [r3, #48]	@ 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004718:	428b      	cmp	r3, r1
 800471a:	d1d3      	bne.n	80046c4 <HAL_ADC_ConfigChannel+0x70>
 800471c:	2d12      	cmp	r5, #18
 800471e:	d01b      	beq.n	8004758 <HAL_ADC_ConfigChannel+0x104>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004720:	4b23      	ldr	r3, [pc, #140]	@ (80047b0 <HAL_ADC_ConfigChannel+0x15c>)
 8004722:	429d      	cmp	r5, r3
 8004724:	d022      	beq.n	800476c <HAL_ADC_ConfigChannel+0x118>
 8004726:	2d11      	cmp	r5, #17
 8004728:	d1cc      	bne.n	80046c4 <HAL_ADC_ConfigChannel+0x70>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800472a:	4b22      	ldr	r3, [pc, #136]	@ (80047b4 <HAL_ADC_ConfigChannel+0x160>)
 800472c:	6859      	ldr	r1, [r3, #4]
 800472e:	f421 0180 	bic.w	r1, r1, #4194304	@ 0x400000
 8004732:	6059      	str	r1, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004734:	6859      	ldr	r1, [r3, #4]
 8004736:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800473a:	6059      	str	r1, [r3, #4]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800473c:	e7c2      	b.n	80046c4 <HAL_ADC_ConfigChannel+0x70>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800473e:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8004740:	3941      	subs	r1, #65	@ 0x41
 8004742:	261f      	movs	r6, #31
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004744:	4088      	lsls	r0, r1
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004746:	fa06 f101 	lsl.w	r1, r6, r1
 800474a:	ea24 0101 	bic.w	r1, r4, r1
 800474e:	62d9      	str	r1, [r3, #44]	@ 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004750:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004752:	4308      	orrs	r0, r1
 8004754:	62d8      	str	r0, [r3, #44]	@ 0x2c
 8004756:	e7b2      	b.n	80046be <HAL_ADC_ConfigChannel+0x6a>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004758:	4b16      	ldr	r3, [pc, #88]	@ (80047b4 <HAL_ADC_ConfigChannel+0x160>)
 800475a:	6859      	ldr	r1, [r3, #4]
 800475c:	f421 0100 	bic.w	r1, r1, #8388608	@ 0x800000
 8004760:	6059      	str	r1, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004762:	6859      	ldr	r1, [r3, #4]
 8004764:	f441 0180 	orr.w	r1, r1, #4194304	@ 0x400000
 8004768:	6059      	str	r1, [r3, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800476a:	e7ab      	b.n	80046c4 <HAL_ADC_ConfigChannel+0x70>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800476c:	4b11      	ldr	r3, [pc, #68]	@ (80047b4 <HAL_ADC_ConfigChannel+0x160>)
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800476e:	4c12      	ldr	r4, [pc, #72]	@ (80047b8 <HAL_ADC_ConfigChannel+0x164>)
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004770:	6859      	ldr	r1, [r3, #4]
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004772:	4812      	ldr	r0, [pc, #72]	@ (80047bc <HAL_ADC_ConfigChannel+0x168>)
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004774:	f421 0180 	bic.w	r1, r1, #4194304	@ 0x400000
 8004778:	6059      	str	r1, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800477a:	6859      	ldr	r1, [r3, #4]
 800477c:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8004780:	6059      	str	r1, [r3, #4]
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004782:	6823      	ldr	r3, [r4, #0]
 8004784:	fba0 0303 	umull	r0, r3, r0, r3
 8004788:	0c9b      	lsrs	r3, r3, #18
 800478a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800478e:	005b      	lsls	r3, r3, #1
 8004790:	9301      	str	r3, [sp, #4]
      while (counter != 0U)
 8004792:	9b01      	ldr	r3, [sp, #4]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d095      	beq.n	80046c4 <HAL_ADC_ConfigChannel+0x70>
        counter--;
 8004798:	9b01      	ldr	r3, [sp, #4]
 800479a:	3b01      	subs	r3, #1
 800479c:	9301      	str	r3, [sp, #4]
      while (counter != 0U)
 800479e:	9b01      	ldr	r3, [sp, #4]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d1f9      	bne.n	8004798 <HAL_ADC_ConfigChannel+0x144>
 80047a4:	e78e      	b.n	80046c4 <HAL_ADC_ConfigChannel+0x70>
  __HAL_LOCK(hadc);
 80047a6:	2002      	movs	r0, #2
}
 80047a8:	b002      	add	sp, #8
 80047aa:	bd70      	pop	{r4, r5, r6, pc}
 80047ac:	40012000 	.word	0x40012000
 80047b0:	10000012 	.word	0x10000012
 80047b4:	40012300 	.word	0x40012300
 80047b8:	20000674 	.word	0x20000674
 80047bc:	431bde83 	.word	0x431bde83

080047c0 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 80047c0:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80047c2:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
  if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80047c6:	698d      	ldr	r5, [r1, #24]
  __HAL_LOCK(hadc);
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	f000 80c2 	beq.w	8004952 <HAL_ADCEx_InjectedConfigChannel+0x192>
 80047ce:	2301      	movs	r3, #1
 80047d0:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 80047d4:	680c      	ldr	r4, [r1, #0]
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 80047d6:	6803      	ldr	r3, [r0, #0]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 80047d8:	688a      	ldr	r2, [r1, #8]
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 80047da:	2c09      	cmp	r4, #9
 80047dc:	4684      	mov	ip, r0
 80047de:	b2a0      	uxth	r0, r4
 80047e0:	d861      	bhi.n	80048a6 <HAL_ADCEx_InjectedConfigChannel+0xe6>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 80047e2:	691e      	ldr	r6, [r3, #16]
 80047e4:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 80047e8:	2707      	movs	r7, #7
 80047ea:	fa07 f70e 	lsl.w	r7, r7, lr
 80047ee:	ea26 0607 	bic.w	r6, r6, r7
 80047f2:	611e      	str	r6, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 80047f4:	691e      	ldr	r6, [r3, #16]
 80047f6:	fa02 f20e 	lsl.w	r2, r2, lr
 80047fa:	4332      	orrs	r2, r6
 80047fc:	611a      	str	r2, [r3, #16]
  }

  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 80047fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8004800:	690f      	ldr	r7, [r1, #16]

  /* Rank configuration */

  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 8004802:	684e      	ldr	r6, [r1, #4]
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8004804:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8004808:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 800480a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800480c:	f107 3eff 	add.w	lr, r7, #4294967295
 8004810:	ea42 520e 	orr.w	r2, r2, lr, lsl #20
 8004814:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 8004816:	1cf2      	adds	r2, r6, #3
 8004818:	1bd2      	subs	r2, r2, r7
 800481a:	b2d2      	uxtb	r2, r2
 800481c:	6b9f      	ldr	r7, [r3, #56]	@ 0x38
 800481e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004822:	f04f 0e1f 	mov.w	lr, #31

  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 8004826:	4090      	lsls	r0, r2
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 8004828:	fa0e f202 	lsl.w	r2, lr, r2
 800482c:	ea27 0202 	bic.w	r2, r7, r2
 8004830:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 8004832:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004834:	4310      	orrs	r0, r2
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004836:	4a48      	ldr	r2, [pc, #288]	@ (8004958 <HAL_ADCEx_InjectedConfigChannel+0x198>)
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 8004838:	6398      	str	r0, [r3, #56]	@ 0x38
  if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800483a:	4295      	cmp	r5, r2
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 800483c:	689a      	ldr	r2, [r3, #8]
 800483e:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
 8004842:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8004844:	689a      	ldr	r2, [r3, #8]
  if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004846:	d065      	beq.n	8004914 <HAL_ADCEx_InjectedConfigChannel+0x154>
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8004848:	4315      	orrs	r5, r2
 800484a:	609d      	str	r5, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 800484c:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 800484e:	69c8      	ldr	r0, [r1, #28]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8004850:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8004854:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8004856:	689a      	ldr	r2, [r3, #8]
 8004858:	4302      	orrs	r2, r0
 800485a:	609a      	str	r2, [r3, #8]
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
  }

  if (sConfigInjected->AutoInjectedConv != DISABLE)
 800485c:	7d4a      	ldrb	r2, [r1, #21]
 800485e:	2a00      	cmp	r2, #0
 8004860:	d031      	beq.n	80048c6 <HAL_ADCEx_InjectedConfigChannel+0x106>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8004862:	685a      	ldr	r2, [r3, #4]
 8004864:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004868:	605a      	str	r2, [r3, #4]
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
  }

  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 800486a:	7d0a      	ldrb	r2, [r1, #20]
 800486c:	2a00      	cmp	r2, #0
 800486e:	d031      	beq.n	80048d4 <HAL_ADCEx_InjectedConfigChannel+0x114>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8004870:	685a      	ldr	r2, [r3, #4]
 8004872:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004876:	605a      	str	r2, [r3, #4]
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
  }

  switch (sConfigInjected->InjectedRank)
 8004878:	2e02      	cmp	r6, #2
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 800487a:	68ca      	ldr	r2, [r1, #12]
  switch (sConfigInjected->InjectedRank)
 800487c:	d031      	beq.n	80048e2 <HAL_ADCEx_InjectedConfigChannel+0x122>
 800487e:	2e03      	cmp	r6, #3
 8004880:	d056      	beq.n	8004930 <HAL_ADCEx_InjectedConfigChannel+0x170>
 8004882:	2e01      	cmp	r6, #1
 8004884:	d04a      	beq.n	800491c <HAL_ADCEx_InjectedConfigChannel+0x15c>
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
      break;
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8004886:	6a19      	ldr	r1, [r3, #32]
 8004888:	f421 617f 	bic.w	r1, r1, #4080	@ 0xff0
 800488c:	f021 010f 	bic.w	r1, r1, #15
 8004890:	6219      	str	r1, [r3, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8004892:	6a19      	ldr	r1, [r3, #32]
 8004894:	430a      	orrs	r2, r1
 8004896:	621a      	str	r2, [r3, #32]
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8004898:	4a30      	ldr	r2, [pc, #192]	@ (800495c <HAL_ADCEx_InjectedConfigChannel+0x19c>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d02d      	beq.n	80048fa <HAL_ADCEx_InjectedConfigChannel+0x13a>
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800489e:	2000      	movs	r0, #0
 80048a0:	f88c 003c 	strb.w	r0, [ip, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
}
 80048a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 80048a6:	eb00 0640 	add.w	r6, r0, r0, lsl #1
 80048aa:	68df      	ldr	r7, [r3, #12]
 80048ac:	3e1e      	subs	r6, #30
 80048ae:	f04f 0e07 	mov.w	lr, #7
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 80048b2:	40b2      	lsls	r2, r6
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 80048b4:	fa0e f606 	lsl.w	r6, lr, r6
 80048b8:	ea27 0606 	bic.w	r6, r7, r6
 80048bc:	60de      	str	r6, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 80048be:	68de      	ldr	r6, [r3, #12]
 80048c0:	4332      	orrs	r2, r6
 80048c2:	60da      	str	r2, [r3, #12]
 80048c4:	e79b      	b.n	80047fe <HAL_ADCEx_InjectedConfigChannel+0x3e>
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 80048c6:	685a      	ldr	r2, [r3, #4]
 80048c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048cc:	605a      	str	r2, [r3, #4]
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 80048ce:	7d0a      	ldrb	r2, [r1, #20]
 80048d0:	2a00      	cmp	r2, #0
 80048d2:	d1cd      	bne.n	8004870 <HAL_ADCEx_InjectedConfigChannel+0xb0>
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 80048d4:	685a      	ldr	r2, [r3, #4]
 80048d6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80048da:	605a      	str	r2, [r3, #4]
  switch (sConfigInjected->InjectedRank)
 80048dc:	2e02      	cmp	r6, #2
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 80048de:	68ca      	ldr	r2, [r1, #12]
  switch (sConfigInjected->InjectedRank)
 80048e0:	d1cd      	bne.n	800487e <HAL_ADCEx_InjectedConfigChannel+0xbe>
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 80048e2:	6999      	ldr	r1, [r3, #24]
 80048e4:	f421 617f 	bic.w	r1, r1, #4080	@ 0xff0
 80048e8:	f021 010f 	bic.w	r1, r1, #15
 80048ec:	6199      	str	r1, [r3, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 80048ee:	6999      	ldr	r1, [r3, #24]
 80048f0:	430a      	orrs	r2, r1
 80048f2:	619a      	str	r2, [r3, #24]
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 80048f4:	4a19      	ldr	r2, [pc, #100]	@ (800495c <HAL_ADCEx_InjectedConfigChannel+0x19c>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d1d1      	bne.n	800489e <HAL_ADCEx_InjectedConfigChannel+0xde>
 80048fa:	2c12      	cmp	r4, #18
 80048fc:	d022      	beq.n	8004944 <HAL_ADCEx_InjectedConfigChannel+0x184>
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 80048fe:	4b18      	ldr	r3, [pc, #96]	@ (8004960 <HAL_ADCEx_InjectedConfigChannel+0x1a0>)
 8004900:	429c      	cmp	r4, r3
 8004902:	d001      	beq.n	8004908 <HAL_ADCEx_InjectedConfigChannel+0x148>
 8004904:	2c11      	cmp	r4, #17
 8004906:	d1ca      	bne.n	800489e <HAL_ADCEx_InjectedConfigChannel+0xde>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004908:	4a16      	ldr	r2, [pc, #88]	@ (8004964 <HAL_ADCEx_InjectedConfigChannel+0x1a4>)
 800490a:	6853      	ldr	r3, [r2, #4]
 800490c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004910:	6053      	str	r3, [r2, #4]
 8004912:	e7c4      	b.n	800489e <HAL_ADCEx_InjectedConfigChannel+0xde>
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8004914:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8004918:	609a      	str	r2, [r3, #8]
 800491a:	e79f      	b.n	800485c <HAL_ADCEx_InjectedConfigChannel+0x9c>
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 800491c:	6959      	ldr	r1, [r3, #20]
 800491e:	f421 617f 	bic.w	r1, r1, #4080	@ 0xff0
 8004922:	f021 010f 	bic.w	r1, r1, #15
 8004926:	6159      	str	r1, [r3, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8004928:	6959      	ldr	r1, [r3, #20]
 800492a:	430a      	orrs	r2, r1
 800492c:	615a      	str	r2, [r3, #20]
      break;
 800492e:	e7b3      	b.n	8004898 <HAL_ADCEx_InjectedConfigChannel+0xd8>
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8004930:	69d9      	ldr	r1, [r3, #28]
 8004932:	f421 617f 	bic.w	r1, r1, #4080	@ 0xff0
 8004936:	f021 010f 	bic.w	r1, r1, #15
 800493a:	61d9      	str	r1, [r3, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 800493c:	69d9      	ldr	r1, [r3, #28]
 800493e:	430a      	orrs	r2, r1
 8004940:	61da      	str	r2, [r3, #28]
      break;
 8004942:	e7a9      	b.n	8004898 <HAL_ADCEx_InjectedConfigChannel+0xd8>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004944:	f8d2 3304 	ldr.w	r3, [r2, #772]	@ 0x304
 8004948:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800494c:	f8c2 3304 	str.w	r3, [r2, #772]	@ 0x304
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8004950:	e7a5      	b.n	800489e <HAL_ADCEx_InjectedConfigChannel+0xde>
  __HAL_LOCK(hadc);
 8004952:	2002      	movs	r0, #2
}
 8004954:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004956:	bf00      	nop
 8004958:	000f0001 	.word	0x000f0001
 800495c:	40012000 	.word	0x40012000
 8004960:	10000012 	.word	0x10000012
 8004964:	40012300 	.word	0x40012300

08004968 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004968:	4907      	ldr	r1, [pc, #28]	@ (8004988 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800496a:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800496c:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800496e:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004972:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004976:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004978:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800497a:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800497e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8004982:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop
 8004988:	e000ed00 	.word	0xe000ed00

0800498c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800498c:	4b1b      	ldr	r3, [pc, #108]	@ (80049fc <HAL_NVIC_SetPriority+0x70>)
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004994:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004996:	f1c3 0e07 	rsb	lr, r3, #7
 800499a:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800499e:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80049a2:	bf28      	it	cs
 80049a4:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049a8:	f1bc 0f06 	cmp.w	ip, #6
 80049ac:	d91c      	bls.n	80049e8 <HAL_NVIC_SetPriority+0x5c>
 80049ae:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80049b2:	f04f 33ff 	mov.w	r3, #4294967295
 80049b6:	fa03 f30c 	lsl.w	r3, r3, ip
 80049ba:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049be:	f04f 33ff 	mov.w	r3, #4294967295
 80049c2:	fa03 f30e 	lsl.w	r3, r3, lr
 80049c6:	ea21 0303 	bic.w	r3, r1, r3
 80049ca:	fa03 f30c 	lsl.w	r3, r3, ip
 80049ce:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049d0:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 80049d2:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049d4:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 80049d6:	db0a      	blt.n	80049ee <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049d8:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 80049dc:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 80049e0:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80049e4:	f85d fb04 	ldr.w	pc, [sp], #4
 80049e8:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049ea:	4694      	mov	ip, r2
 80049ec:	e7e7      	b.n	80049be <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049ee:	4a04      	ldr	r2, [pc, #16]	@ (8004a00 <HAL_NVIC_SetPriority+0x74>)
 80049f0:	f000 000f 	and.w	r0, r0, #15
 80049f4:	4402      	add	r2, r0
 80049f6:	7613      	strb	r3, [r2, #24]
 80049f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80049fc:	e000ed00 	.word	0xe000ed00
 8004a00:	e000ecfc 	.word	0xe000ecfc

08004a04 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004a04:	2800      	cmp	r0, #0
 8004a06:	db07      	blt.n	8004a18 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a08:	4a04      	ldr	r2, [pc, #16]	@ (8004a1c <HAL_NVIC_EnableIRQ+0x18>)
 8004a0a:	0941      	lsrs	r1, r0, #5
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	f000 001f 	and.w	r0, r0, #31
 8004a12:	4083      	lsls	r3, r0
 8004a14:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	e000e100 	.word	0xe000e100

08004a20 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a20:	3801      	subs	r0, #1
 8004a22:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8004a26:	d301      	bcc.n	8004a2c <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a28:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8004a2a:	4770      	bx	lr
{
 8004a2c:	b410      	push	{r4}
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a2e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a32:	4c07      	ldr	r4, [pc, #28]	@ (8004a50 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a34:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a36:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 8004a3a:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a3e:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a40:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a42:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a44:	619a      	str	r2, [r3, #24]
}
 8004a46:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a4a:	6119      	str	r1, [r3, #16]
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop
 8004a50:	e000ed00 	.word	0xe000ed00

08004a54 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop

08004a58 <HAL_SYSTICK_IRQHandler>:
{
 8004a58:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8004a5a:	f7ff fffb 	bl	8004a54 <HAL_SYSTICK_Callback>
}
 8004a5e:	bd08      	pop	{r3, pc}

08004a60 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004a60:	b538      	push	{r3, r4, r5, lr}
 8004a62:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8004a64:	f7ff fd44 	bl	80044f0 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004a68:	2c00      	cmp	r4, #0
 8004a6a:	d06f      	beq.n	8004b4c <HAL_DMA_Init+0xec>

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004a6c:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 8004a6e:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_BUSY;
 8004a70:	2102      	movs	r1, #2
 8004a72:	f884 1035 	strb.w	r1, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 8004a76:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	f022 0201 	bic.w	r2, r2, #1
 8004a80:	4605      	mov	r5, r0
 8004a82:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a84:	e005      	b.n	8004a92 <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004a86:	f7ff fd33 	bl	80044f0 <HAL_GetTick>
 8004a8a:	1b43      	subs	r3, r0, r5
 8004a8c:	2b05      	cmp	r3, #5
 8004a8e:	d839      	bhi.n	8004b04 <HAL_DMA_Init+0xa4>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a90:	6823      	ldr	r3, [r4, #0]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	07d1      	lsls	r1, r2, #31
 8004a96:	d4f6      	bmi.n	8004a86 <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a98:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8004a9c:	68e1      	ldr	r1, [r4, #12]
 8004a9e:	4302      	orrs	r2, r0
 8004aa0:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004aa2:	e9d4 5104 	ldrd	r5, r1, [r4, #16]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004aa6:	69a0      	ldr	r0, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004aa8:	432a      	orrs	r2, r5
 8004aaa:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004aac:	69e1      	ldr	r1, [r4, #28]
  tmp = hdma->Instance->CR;
 8004aae:	681d      	ldr	r5, [r3, #0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ab0:	4302      	orrs	r2, r0
 8004ab2:	430a      	orrs	r2, r1
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004ab4:	4932      	ldr	r1, [pc, #200]	@ (8004b80 <HAL_DMA_Init+0x120>)
 8004ab6:	4029      	ands	r1, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ab8:	6a25      	ldr	r5, [r4, #32]
 8004aba:	432a      	orrs	r2, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004abc:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004abe:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8004ac0:	2904      	cmp	r1, #4
 8004ac2:	d026      	beq.n	8004b12 <HAL_DMA_Init+0xb2>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004ac4:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004ac6:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004ac8:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004acc:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004ace:	b2d8      	uxtb	r0, r3
 8004ad0:	4a2c      	ldr	r2, [pc, #176]	@ (8004b84 <HAL_DMA_Init+0x124>)
  hdma->Instance->FCR = tmp;
 8004ad2:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004ad4:	3810      	subs	r0, #16
 8004ad6:	fba2 5200 	umull	r5, r2, r2, r0
 8004ada:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004adc:	492a      	ldr	r1, [pc, #168]	@ (8004b88 <HAL_DMA_Init+0x128>)
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004ade:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004ae2:	5c89      	ldrb	r1, [r1, r2]
 8004ae4:	65e1      	str	r1, [r4, #92]	@ 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004ae6:	f023 0303 	bic.w	r3, r3, #3
  if (stream_number > 3U)
 8004aea:	285f      	cmp	r0, #95	@ 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004aec:	bf88      	it	hi
 8004aee:	3304      	addhi	r3, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004af0:	223f      	movs	r2, #63	@ 0x3f
 8004af2:	408a      	lsls	r2, r1
 8004af4:	65a3      	str	r3, [r4, #88]	@ 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004af6:	2000      	movs	r0, #0
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004af8:	609a      	str	r2, [r3, #8]
  hdma->State = HAL_DMA_STATE_READY;
 8004afa:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004afc:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8004afe:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
}
 8004b02:	bd38      	pop	{r3, r4, r5, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004b04:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004b06:	2220      	movs	r2, #32
 8004b08:	6562      	str	r2, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004b0a:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      return HAL_TIMEOUT;
 8004b0e:	4618      	mov	r0, r3
}
 8004b10:	bd38      	pop	{r3, r4, r5, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004b12:	e9d4 510b 	ldrd	r5, r1, [r4, #44]	@ 0x2c
 8004b16:	4329      	orrs	r1, r5
 8004b18:	4311      	orrs	r1, r2
  hdma->Instance->CR = tmp;  
 8004b1a:	6019      	str	r1, [r3, #0]
  tmp = hdma->Instance->FCR;
 8004b1c:	6959      	ldr	r1, [r3, #20]
    tmp |= hdma->Init.FIFOThreshold;
 8004b1e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004b20:	f021 0107 	bic.w	r1, r1, #7
 8004b24:	4311      	orrs	r1, r2
    tmp |= hdma->Init.FIFOThreshold;
 8004b26:	f041 0104 	orr.w	r1, r1, #4
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004b2a:	2d00      	cmp	r5, #0
 8004b2c:	d0cf      	beq.n	8004ace <HAL_DMA_Init+0x6e>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004b2e:	b178      	cbz	r0, 8004b50 <HAL_DMA_Init+0xf0>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004b30:	f5b0 5f00 	cmp.w	r0, #8192	@ 0x2000
 8004b34:	d016      	beq.n	8004b64 <HAL_DMA_Init+0x104>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004b36:	2a02      	cmp	r2, #2
 8004b38:	d903      	bls.n	8004b42 <HAL_DMA_Init+0xe2>
 8004b3a:	2a03      	cmp	r2, #3
 8004b3c:	d1c7      	bne.n	8004ace <HAL_DMA_Init+0x6e>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b3e:	01ea      	lsls	r2, r5, #7
 8004b40:	d5c5      	bpl.n	8004ace <HAL_DMA_Init+0x6e>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004b42:	2240      	movs	r2, #64	@ 0x40
        hdma->State = HAL_DMA_STATE_READY;
 8004b44:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004b46:	6562      	str	r2, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8004b48:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    return HAL_ERROR;
 8004b4c:	2001      	movs	r0, #1
}
 8004b4e:	bd38      	pop	{r3, r4, r5, pc}
    switch (tmp)
 8004b50:	2a01      	cmp	r2, #1
 8004b52:	d003      	beq.n	8004b5c <HAL_DMA_Init+0xfc>
 8004b54:	f032 0202 	bics.w	r2, r2, #2
 8004b58:	d1b9      	bne.n	8004ace <HAL_DMA_Init+0x6e>
 8004b5a:	e7f0      	b.n	8004b3e <HAL_DMA_Init+0xde>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b5c:	f1b5 7fc0 	cmp.w	r5, #25165824	@ 0x1800000
 8004b60:	d1b5      	bne.n	8004ace <HAL_DMA_Init+0x6e>
 8004b62:	e7ee      	b.n	8004b42 <HAL_DMA_Init+0xe2>
    switch (tmp)
 8004b64:	2a03      	cmp	r2, #3
 8004b66:	d8b2      	bhi.n	8004ace <HAL_DMA_Init+0x6e>
 8004b68:	a001      	add	r0, pc, #4	@ (adr r0, 8004b70 <HAL_DMA_Init+0x110>)
 8004b6a:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8004b6e:	bf00      	nop
 8004b70:	08004b43 	.word	0x08004b43
 8004b74:	08004b3f 	.word	0x08004b3f
 8004b78:	08004b43 	.word	0x08004b43
 8004b7c:	08004b5d 	.word	0x08004b5d
 8004b80:	f010803f 	.word	0xf010803f
 8004b84:	aaaaaaab 	.word	0xaaaaaaab
 8004b88:	080086a4 	.word	0x080086a4

08004b8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b90:	2300      	movs	r3, #0
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004b92:	680c      	ldr	r4, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b94:	f8df a200 	ldr.w	sl, [pc, #512]	@ 8004d98 <HAL_GPIO_Init+0x20c>
{
 8004b98:	b085      	sub	sp, #20
    ioposition = 0x01U << position;
 8004b9a:	f04f 0b01 	mov.w	fp, #1

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004b9e:	4689      	mov	r9, r1
 8004ba0:	e003      	b.n	8004baa <HAL_GPIO_Init+0x1e>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ba2:	3301      	adds	r3, #1
 8004ba4:	2b10      	cmp	r3, #16
 8004ba6:	f000 808c 	beq.w	8004cc2 <HAL_GPIO_Init+0x136>
    ioposition = 0x01U << position;
 8004baa:	fa0b f203 	lsl.w	r2, fp, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004bae:	ea02 0804 	and.w	r8, r2, r4
    if(iocurrent == ioposition)
 8004bb2:	43a2      	bics	r2, r4
 8004bb4:	d1f5      	bne.n	8004ba2 <HAL_GPIO_Init+0x16>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004bb6:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8004bba:	f001 0203 	and.w	r2, r1, #3
 8004bbe:	ea4f 0c43 	mov.w	ip, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004bc2:	2503      	movs	r5, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004bc4:	1e57      	subs	r7, r2, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004bc6:	fa05 f50c 	lsl.w	r5, r5, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004bca:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004bcc:	ea6f 0505 	mvn.w	r5, r5
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004bd0:	d97a      	bls.n	8004cc8 <HAL_GPIO_Init+0x13c>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004bd2:	2a03      	cmp	r2, #3
 8004bd4:	f040 80b1 	bne.w	8004d3a <HAL_GPIO_Init+0x1ae>
      temp = GPIOx->MODER;
 8004bd8:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004bda:	fa02 f20c 	lsl.w	r2, r2, ip
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004bde:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004be0:	432a      	orrs	r2, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004be2:	f411 3f40 	tst.w	r1, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8004be6:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004be8:	d0db      	beq.n	8004ba2 <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004bea:	2200      	movs	r2, #0
 8004bec:	9203      	str	r2, [sp, #12]
 8004bee:	f8da 2044 	ldr.w	r2, [sl, #68]	@ 0x44
 8004bf2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004bf6:	f8ca 2044 	str.w	r2, [sl, #68]	@ 0x44
 8004bfa:	f8da 2044 	ldr.w	r2, [sl, #68]	@ 0x44
 8004bfe:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8004c02:	9203      	str	r2, [sp, #12]
 8004c04:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8004c06:	f023 0203 	bic.w	r2, r3, #3
 8004c0a:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004c0e:	f003 0703 	and.w	r7, r3, #3
 8004c12:	260f      	movs	r6, #15
 8004c14:	f502 329c 	add.w	r2, r2, #79872	@ 0x13800
 8004c18:	00bf      	lsls	r7, r7, #2
 8004c1a:	fa06 fc07 	lsl.w	ip, r6, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004c1e:	4e5b      	ldr	r6, [pc, #364]	@ (8004d8c <HAL_GPIO_Init+0x200>)
        temp = SYSCFG->EXTICR[position >> 2U];
 8004c20:	6895      	ldr	r5, [r2, #8]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004c22:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004c24:	ea25 050c 	bic.w	r5, r5, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004c28:	d022      	beq.n	8004c70 <HAL_GPIO_Init+0xe4>
 8004c2a:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8004c2e:	42b0      	cmp	r0, r6
 8004c30:	f000 808e 	beq.w	8004d50 <HAL_GPIO_Init+0x1c4>
 8004c34:	4e56      	ldr	r6, [pc, #344]	@ (8004d90 <HAL_GPIO_Init+0x204>)
 8004c36:	42b0      	cmp	r0, r6
 8004c38:	f000 8090 	beq.w	8004d5c <HAL_GPIO_Init+0x1d0>
 8004c3c:	f8df c15c 	ldr.w	ip, [pc, #348]	@ 8004d9c <HAL_GPIO_Init+0x210>
 8004c40:	4560      	cmp	r0, ip
 8004c42:	f000 8091 	beq.w	8004d68 <HAL_GPIO_Init+0x1dc>
 8004c46:	f8df c158 	ldr.w	ip, [pc, #344]	@ 8004da0 <HAL_GPIO_Init+0x214>
 8004c4a:	4560      	cmp	r0, ip
 8004c4c:	f000 8092 	beq.w	8004d74 <HAL_GPIO_Init+0x1e8>
 8004c50:	f8df c150 	ldr.w	ip, [pc, #336]	@ 8004da4 <HAL_GPIO_Init+0x218>
 8004c54:	4560      	cmp	r0, ip
 8004c56:	f000 8093 	beq.w	8004d80 <HAL_GPIO_Init+0x1f4>
 8004c5a:	f8df c14c 	ldr.w	ip, [pc, #332]	@ 8004da8 <HAL_GPIO_Init+0x21c>
 8004c5e:	4560      	cmp	r0, ip
 8004c60:	bf0c      	ite	eq
 8004c62:	f04f 0c06 	moveq.w	ip, #6
 8004c66:	f04f 0c07 	movne.w	ip, #7
 8004c6a:	fa0c f707 	lsl.w	r7, ip, r7
 8004c6e:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004c70:	6095      	str	r5, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004c72:	4a48      	ldr	r2, [pc, #288]	@ (8004d94 <HAL_GPIO_Init+0x208>)
 8004c74:	6892      	ldr	r2, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004c76:	02ce      	lsls	r6, r1, #11
        temp &= ~((uint32_t)iocurrent);
 8004c78:	ea6f 0508 	mvn.w	r5, r8
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8004c7c:	4e45      	ldr	r6, [pc, #276]	@ (8004d94 <HAL_GPIO_Init+0x208>)
        temp &= ~((uint32_t)iocurrent);
 8004c7e:	bf54      	ite	pl
 8004c80:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8004c82:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->RTSR = temp;
 8004c86:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR;
 8004c88:	68f2      	ldr	r2, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 8004c8a:	4e42      	ldr	r6, [pc, #264]	@ (8004d94 <HAL_GPIO_Init+0x208>)
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004c8c:	028f      	lsls	r7, r1, #10
        temp &= ~((uint32_t)iocurrent);
 8004c8e:	bf54      	ite	pl
 8004c90:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8004c92:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->FTSR = temp;
 8004c96:	60f2      	str	r2, [r6, #12]

        temp = EXTI->EMR;
 8004c98:	6872      	ldr	r2, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004c9a:	038e      	lsls	r6, r1, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8004c9c:	4e3d      	ldr	r6, [pc, #244]	@ (8004d94 <HAL_GPIO_Init+0x208>)
        temp &= ~((uint32_t)iocurrent);
 8004c9e:	bf54      	ite	pl
 8004ca0:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8004ca2:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->EMR = temp;
 8004ca6:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004ca8:	6832      	ldr	r2, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004caa:	03c9      	lsls	r1, r1, #15
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004cac:	f103 0301 	add.w	r3, r3, #1
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8004cb0:	4938      	ldr	r1, [pc, #224]	@ (8004d94 <HAL_GPIO_Init+0x208>)
        temp &= ~((uint32_t)iocurrent);
 8004cb2:	bf54      	ite	pl
 8004cb4:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8004cb6:	ea48 0202 	orrmi.w	r2, r8, r2
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004cba:	2b10      	cmp	r3, #16
        EXTI->IMR = temp;
 8004cbc:	600a      	str	r2, [r1, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004cbe:	f47f af74 	bne.w	8004baa <HAL_GPIO_Init+0x1e>
      }
    }
  }
}
 8004cc2:	b005      	add	sp, #20
 8004cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 8004cc8:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004cca:	ea07 0e05 	and.w	lr, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004cce:	f8d9 700c 	ldr.w	r7, [r9, #12]
 8004cd2:	fa07 f70c 	lsl.w	r7, r7, ip
 8004cd6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8004cda:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8004cdc:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004cde:	ea27 0e08 	bic.w	lr, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004ce2:	f3c1 1700 	ubfx	r7, r1, #4, #1
 8004ce6:	409f      	lsls	r7, r3
 8004ce8:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8004cec:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8004cee:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004cf0:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004cf4:	f8d9 7008 	ldr.w	r7, [r9, #8]
 8004cf8:	fa07 f70c 	lsl.w	r7, r7, ip
 8004cfc:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d00:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8004d02:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d04:	f47f af68 	bne.w	8004bd8 <HAL_GPIO_Init+0x4c>
        temp = GPIOx->AFR[position >> 3U];
 8004d08:	08df      	lsrs	r7, r3, #3
 8004d0a:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8004d0e:	9701      	str	r7, [sp, #4]
 8004d10:	6a3e      	ldr	r6, [r7, #32]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004d12:	f8d9 7010 	ldr.w	r7, [r9, #16]
        temp = GPIOx->AFR[position >> 3U];
 8004d16:	9600      	str	r6, [sp, #0]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004d18:	f003 0e07 	and.w	lr, r3, #7
 8004d1c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8004d20:	260f      	movs	r6, #15
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004d22:	fa07 f70e 	lsl.w	r7, r7, lr
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004d26:	fa06 fe0e 	lsl.w	lr, r6, lr
 8004d2a:	9e00      	ldr	r6, [sp, #0]
 8004d2c:	ea26 0e0e 	bic.w	lr, r6, lr
        GPIOx->AFR[position >> 3U] = temp;
 8004d30:	9e01      	ldr	r6, [sp, #4]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004d32:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8004d36:	6237      	str	r7, [r6, #32]
 8004d38:	e74e      	b.n	8004bd8 <HAL_GPIO_Init+0x4c>
        temp = GPIOx->PUPDR;
 8004d3a:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004d3c:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d40:	f8d9 7008 	ldr.w	r7, [r9, #8]
 8004d44:	fa07 f70c 	lsl.w	r7, r7, ip
 8004d48:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 8004d4c:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d4e:	e743      	b.n	8004bd8 <HAL_GPIO_Init+0x4c>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004d50:	f04f 0c01 	mov.w	ip, #1
 8004d54:	fa0c f707 	lsl.w	r7, ip, r7
 8004d58:	433d      	orrs	r5, r7
 8004d5a:	e789      	b.n	8004c70 <HAL_GPIO_Init+0xe4>
 8004d5c:	f04f 0c02 	mov.w	ip, #2
 8004d60:	fa0c f707 	lsl.w	r7, ip, r7
 8004d64:	433d      	orrs	r5, r7
 8004d66:	e783      	b.n	8004c70 <HAL_GPIO_Init+0xe4>
 8004d68:	f04f 0c03 	mov.w	ip, #3
 8004d6c:	fa0c f707 	lsl.w	r7, ip, r7
 8004d70:	433d      	orrs	r5, r7
 8004d72:	e77d      	b.n	8004c70 <HAL_GPIO_Init+0xe4>
 8004d74:	f04f 0c04 	mov.w	ip, #4
 8004d78:	fa0c f707 	lsl.w	r7, ip, r7
 8004d7c:	433d      	orrs	r5, r7
 8004d7e:	e777      	b.n	8004c70 <HAL_GPIO_Init+0xe4>
 8004d80:	f04f 0c05 	mov.w	ip, #5
 8004d84:	fa0c f707 	lsl.w	r7, ip, r7
 8004d88:	433d      	orrs	r5, r7
 8004d8a:	e771      	b.n	8004c70 <HAL_GPIO_Init+0xe4>
 8004d8c:	40020000 	.word	0x40020000
 8004d90:	40020800 	.word	0x40020800
 8004d94:	40013c00 	.word	0x40013c00
 8004d98:	40023800 	.word	0x40023800
 8004d9c:	40020c00 	.word	0x40020c00
 8004da0:	40021000 	.word	0x40021000
 8004da4:	40021400 	.word	0x40021400
 8004da8:	40021800 	.word	0x40021800

08004dac <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004dac:	b902      	cbnz	r2, 8004db0 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004dae:	0409      	lsls	r1, r1, #16
 8004db0:	6181      	str	r1, [r0, #24]
  }
}
 8004db2:	4770      	bx	lr

08004db4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004db4:	b530      	push	{r4, r5, lr}
 8004db6:	b083      	sub	sp, #12
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 8004db8:	4b19      	ldr	r3, [pc, #100]	@ (8004e20 <HAL_PWREx_EnableOverDrive+0x6c>)
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004dba:	491a      	ldr	r1, [pc, #104]	@ (8004e24 <HAL_PWREx_EnableOverDrive+0x70>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004dbc:	4d1a      	ldr	r5, [pc, #104]	@ (8004e28 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	9201      	str	r2, [sp, #4]
 8004dc2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004dc4:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8004dc8:	641a      	str	r2, [r3, #64]	@ 0x40
 8004dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dcc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dd0:	9301      	str	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004dd2:	2201      	movs	r2, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8004dd4:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004dd6:	640a      	str	r2, [r1, #64]	@ 0x40
  tickstart = HAL_GetTick();
 8004dd8:	f7ff fb8a 	bl	80044f0 <HAL_GetTick>
 8004ddc:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004dde:	e005      	b.n	8004dec <HAL_PWREx_EnableOverDrive+0x38>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004de0:	f7ff fb86 	bl	80044f0 <HAL_GetTick>
 8004de4:	1b00      	subs	r0, r0, r4
 8004de6:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8004dea:	d816      	bhi.n	8004e1a <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004dec:	686b      	ldr	r3, [r5, #4]
 8004dee:	03da      	lsls	r2, r3, #15
 8004df0:	d5f6      	bpl.n	8004de0 <HAL_PWREx_EnableOverDrive+0x2c>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004df2:	4b0c      	ldr	r3, [pc, #48]	@ (8004e24 <HAL_PWREx_EnableOverDrive+0x70>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004df4:	4d0c      	ldr	r5, [pc, #48]	@ (8004e28 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004df6:	2201      	movs	r2, #1
 8004df8:	645a      	str	r2, [r3, #68]	@ 0x44
  tickstart = HAL_GetTick();
 8004dfa:	f7ff fb79 	bl	80044f0 <HAL_GetTick>
 8004dfe:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004e00:	e005      	b.n	8004e0e <HAL_PWREx_EnableOverDrive+0x5a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004e02:	f7ff fb75 	bl	80044f0 <HAL_GetTick>
 8004e06:	1b00      	subs	r0, r0, r4
 8004e08:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8004e0c:	d805      	bhi.n	8004e1a <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004e0e:	686b      	ldr	r3, [r5, #4]
 8004e10:	039b      	lsls	r3, r3, #14
 8004e12:	d5f6      	bpl.n	8004e02 <HAL_PWREx_EnableOverDrive+0x4e>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8004e14:	2000      	movs	r0, #0
}
 8004e16:	b003      	add	sp, #12
 8004e18:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 8004e1a:	2003      	movs	r0, #3
}
 8004e1c:	b003      	add	sp, #12
 8004e1e:	bd30      	pop	{r4, r5, pc}
 8004e20:	40023800 	.word	0x40023800
 8004e24:	420e0000 	.word	0x420e0000
 8004e28:	40007000 	.word	0x40007000

08004e2c <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e2c:	2800      	cmp	r0, #0
 8004e2e:	f000 8087 	beq.w	8004f40 <HAL_RCC_ClockConfig+0x114>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e32:	4a48      	ldr	r2, [pc, #288]	@ (8004f54 <HAL_RCC_ClockConfig+0x128>)
 8004e34:	6813      	ldr	r3, [r2, #0]
 8004e36:	f003 030f 	and.w	r3, r3, #15
 8004e3a:	428b      	cmp	r3, r1
{
 8004e3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e40:	460d      	mov	r5, r1
 8004e42:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e44:	d209      	bcs.n	8004e5a <HAL_RCC_ClockConfig+0x2e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e46:	b2cb      	uxtb	r3, r1
 8004e48:	7013      	strb	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e4a:	6813      	ldr	r3, [r2, #0]
 8004e4c:	f003 030f 	and.w	r3, r3, #15
 8004e50:	428b      	cmp	r3, r1
 8004e52:	d002      	beq.n	8004e5a <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8004e54:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);

  return HAL_OK;
}
 8004e56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e5a:	6823      	ldr	r3, [r4, #0]
 8004e5c:	0798      	lsls	r0, r3, #30
 8004e5e:	d514      	bpl.n	8004e8a <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e60:	0759      	lsls	r1, r3, #29
 8004e62:	d504      	bpl.n	8004e6e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e64:	493c      	ldr	r1, [pc, #240]	@ (8004f58 <HAL_RCC_ClockConfig+0x12c>)
 8004e66:	688a      	ldr	r2, [r1, #8]
 8004e68:	f442 52e0 	orr.w	r2, r2, #7168	@ 0x1c00
 8004e6c:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e6e:	071a      	lsls	r2, r3, #28
 8004e70:	d504      	bpl.n	8004e7c <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e72:	4939      	ldr	r1, [pc, #228]	@ (8004f58 <HAL_RCC_ClockConfig+0x12c>)
 8004e74:	688a      	ldr	r2, [r1, #8]
 8004e76:	f442 4260 	orr.w	r2, r2, #57344	@ 0xe000
 8004e7a:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e7c:	4936      	ldr	r1, [pc, #216]	@ (8004f58 <HAL_RCC_ClockConfig+0x12c>)
 8004e7e:	68a0      	ldr	r0, [r4, #8]
 8004e80:	688a      	ldr	r2, [r1, #8]
 8004e82:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8004e86:	4302      	orrs	r2, r0
 8004e88:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e8a:	07df      	lsls	r7, r3, #31
 8004e8c:	d521      	bpl.n	8004ed2 <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e8e:	6862      	ldr	r2, [r4, #4]
 8004e90:	2a01      	cmp	r2, #1
 8004e92:	d057      	beq.n	8004f44 <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e94:	1e93      	subs	r3, r2, #2
 8004e96:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e98:	4b2f      	ldr	r3, [pc, #188]	@ (8004f58 <HAL_RCC_ClockConfig+0x12c>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e9c:	d94d      	bls.n	8004f3a <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e9e:	0799      	lsls	r1, r3, #30
 8004ea0:	d5d8      	bpl.n	8004e54 <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ea2:	4e2d      	ldr	r6, [pc, #180]	@ (8004f58 <HAL_RCC_ClockConfig+0x12c>)
 8004ea4:	68b3      	ldr	r3, [r6, #8]
 8004ea6:	f023 0303 	bic.w	r3, r3, #3
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8004eae:	f7ff fb1f 	bl	80044f0 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004eb2:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8004eb6:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eb8:	e004      	b.n	8004ec4 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004eba:	f7ff fb19 	bl	80044f0 <HAL_GetTick>
 8004ebe:	1bc0      	subs	r0, r0, r7
 8004ec0:	4540      	cmp	r0, r8
 8004ec2:	d844      	bhi.n	8004f4e <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ec4:	68b3      	ldr	r3, [r6, #8]
 8004ec6:	6862      	ldr	r2, [r4, #4]
 8004ec8:	f003 030c 	and.w	r3, r3, #12
 8004ecc:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004ed0:	d1f3      	bne.n	8004eba <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ed2:	4a20      	ldr	r2, [pc, #128]	@ (8004f54 <HAL_RCC_ClockConfig+0x128>)
 8004ed4:	6813      	ldr	r3, [r2, #0]
 8004ed6:	f003 030f 	and.w	r3, r3, #15
 8004eda:	42ab      	cmp	r3, r5
 8004edc:	d906      	bls.n	8004eec <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ede:	b2eb      	uxtb	r3, r5
 8004ee0:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ee2:	6813      	ldr	r3, [r2, #0]
 8004ee4:	f003 030f 	and.w	r3, r3, #15
 8004ee8:	42ab      	cmp	r3, r5
 8004eea:	d1b3      	bne.n	8004e54 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004eec:	6823      	ldr	r3, [r4, #0]
 8004eee:	075a      	lsls	r2, r3, #29
 8004ef0:	d506      	bpl.n	8004f00 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ef2:	4919      	ldr	r1, [pc, #100]	@ (8004f58 <HAL_RCC_ClockConfig+0x12c>)
 8004ef4:	68e0      	ldr	r0, [r4, #12]
 8004ef6:	688a      	ldr	r2, [r1, #8]
 8004ef8:	f422 52e0 	bic.w	r2, r2, #7168	@ 0x1c00
 8004efc:	4302      	orrs	r2, r0
 8004efe:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f00:	071b      	lsls	r3, r3, #28
 8004f02:	d507      	bpl.n	8004f14 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f04:	4a14      	ldr	r2, [pc, #80]	@ (8004f58 <HAL_RCC_ClockConfig+0x12c>)
 8004f06:	6921      	ldr	r1, [r4, #16]
 8004f08:	6893      	ldr	r3, [r2, #8]
 8004f0a:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8004f0e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004f12:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f14:	f000 f84e 	bl	8004fb4 <HAL_RCC_GetSysClockFreq>
 8004f18:	4a0f      	ldr	r2, [pc, #60]	@ (8004f58 <HAL_RCC_ClockConfig+0x12c>)
 8004f1a:	4c10      	ldr	r4, [pc, #64]	@ (8004f5c <HAL_RCC_ClockConfig+0x130>)
 8004f1c:	6892      	ldr	r2, [r2, #8]
 8004f1e:	4910      	ldr	r1, [pc, #64]	@ (8004f60 <HAL_RCC_ClockConfig+0x134>)
 8004f20:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8004f24:	4603      	mov	r3, r0
 8004f26:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 8004f28:	480e      	ldr	r0, [pc, #56]	@ (8004f64 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f2a:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 8004f2c:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f2e:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 8004f30:	f7ff fa94 	bl	800445c <HAL_InitTick>
  return HAL_OK;
 8004f34:	2000      	movs	r0, #0
}
 8004f36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f3a:	0198      	lsls	r0, r3, #6
 8004f3c:	d4b1      	bmi.n	8004ea2 <HAL_RCC_ClockConfig+0x76>
 8004f3e:	e789      	b.n	8004e54 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8004f40:	2001      	movs	r0, #1
}
 8004f42:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f44:	4b04      	ldr	r3, [pc, #16]	@ (8004f58 <HAL_RCC_ClockConfig+0x12c>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	039e      	lsls	r6, r3, #14
 8004f4a:	d4aa      	bmi.n	8004ea2 <HAL_RCC_ClockConfig+0x76>
 8004f4c:	e782      	b.n	8004e54 <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 8004f4e:	2003      	movs	r0, #3
 8004f50:	e781      	b.n	8004e56 <HAL_RCC_ClockConfig+0x2a>
 8004f52:	bf00      	nop
 8004f54:	40023c00 	.word	0x40023c00
 8004f58:	40023800 	.word	0x40023800
 8004f5c:	08008694 	.word	0x08008694
 8004f60:	20000674 	.word	0x20000674
 8004f64:	2000067c 	.word	0x2000067c

08004f68 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8004f68:	4b01      	ldr	r3, [pc, #4]	@ (8004f70 <HAL_RCC_GetHCLKFreq+0x8>)
}
 8004f6a:	6818      	ldr	r0, [r3, #0]
 8004f6c:	4770      	bx	lr
 8004f6e:	bf00      	nop
 8004f70:	20000674 	.word	0x20000674

08004f74 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004f74:	4b04      	ldr	r3, [pc, #16]	@ (8004f88 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8004f76:	4905      	ldr	r1, [pc, #20]	@ (8004f8c <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	4a05      	ldr	r2, [pc, #20]	@ (8004f90 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004f7c:	6808      	ldr	r0, [r1, #0]
 8004f7e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8004f82:	5cd3      	ldrb	r3, [r2, r3]
}
 8004f84:	40d8      	lsrs	r0, r3
 8004f86:	4770      	bx	lr
 8004f88:	40023800 	.word	0x40023800
 8004f8c:	20000674 	.word	0x20000674
 8004f90:	0800868c 	.word	0x0800868c

08004f94 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004f94:	4b04      	ldr	r3, [pc, #16]	@ (8004fa8 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 8004f96:	4905      	ldr	r1, [pc, #20]	@ (8004fac <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	4a05      	ldr	r2, [pc, #20]	@ (8004fb0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004f9c:	6808      	ldr	r0, [r1, #0]
 8004f9e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8004fa2:	5cd3      	ldrb	r3, [r2, r3]
}
 8004fa4:	40d8      	lsrs	r0, r3
 8004fa6:	4770      	bx	lr
 8004fa8:	40023800 	.word	0x40023800
 8004fac:	20000674 	.word	0x20000674
 8004fb0:	0800868c 	.word	0x0800868c

08004fb4 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004fb4:	4927      	ldr	r1, [pc, #156]	@ (8005054 <HAL_RCC_GetSysClockFreq+0xa0>)
{
 8004fb6:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004fb8:	688b      	ldr	r3, [r1, #8]
 8004fba:	f003 030c 	and.w	r3, r3, #12
 8004fbe:	2b08      	cmp	r3, #8
 8004fc0:	d007      	beq.n	8004fd2 <HAL_RCC_GetSysClockFreq+0x1e>
 8004fc2:	2b0c      	cmp	r3, #12
 8004fc4:	d01d      	beq.n	8005002 <HAL_RCC_GetSysClockFreq+0x4e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004fc6:	4a24      	ldr	r2, [pc, #144]	@ (8005058 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004fc8:	4824      	ldr	r0, [pc, #144]	@ (800505c <HAL_RCC_GetSysClockFreq+0xa8>)
 8004fca:	2b04      	cmp	r3, #4
 8004fcc:	bf18      	it	ne
 8004fce:	4610      	movne	r0, r2
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8004fd0:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004fd2:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004fd4:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fd6:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004fd8:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004fdc:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004fe0:	d12e      	bne.n	8005040 <HAL_RCC_GetSysClockFreq+0x8c>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fe2:	481d      	ldr	r0, [pc, #116]	@ (8005058 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004fe4:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8004fe8:	fba1 0100 	umull	r0, r1, r1, r0
 8004fec:	f7fb f90c 	bl	8000208 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ff0:	4b18      	ldr	r3, [pc, #96]	@ (8005054 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8004ff8:	3301      	adds	r3, #1
 8004ffa:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8004ffc:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8005000:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005002:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005004:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005006:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005008:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800500c:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005010:	d10d      	bne.n	800502e <HAL_RCC_GetSysClockFreq+0x7a>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005012:	4811      	ldr	r0, [pc, #68]	@ (8005058 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005014:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8005018:	fba1 0100 	umull	r0, r1, r1, r0
 800501c:	f7fb f8f4 	bl	8000208 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005020:	4b0c      	ldr	r3, [pc, #48]	@ (8005054 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	f3c3 7302 	ubfx	r3, r3, #28, #3
      sysclockfreq = pllvco/pllr;
 8005028:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800502c:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800502e:	480b      	ldr	r0, [pc, #44]	@ (800505c <HAL_RCC_GetSysClockFreq+0xa8>)
 8005030:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8005034:	2300      	movs	r3, #0
 8005036:	fba1 0100 	umull	r0, r1, r1, r0
 800503a:	f7fb f8e5 	bl	8000208 <__aeabi_uldivmod>
 800503e:	e7ef      	b.n	8005020 <HAL_RCC_GetSysClockFreq+0x6c>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005040:	4806      	ldr	r0, [pc, #24]	@ (800505c <HAL_RCC_GetSysClockFreq+0xa8>)
 8005042:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8005046:	2300      	movs	r3, #0
 8005048:	fba1 0100 	umull	r0, r1, r1, r0
 800504c:	f7fb f8dc 	bl	8000208 <__aeabi_uldivmod>
 8005050:	e7ce      	b.n	8004ff0 <HAL_RCC_GetSysClockFreq+0x3c>
 8005052:	bf00      	nop
 8005054:	40023800 	.word	0x40023800
 8005058:	00f42400 	.word	0x00f42400
 800505c:	007a1200 	.word	0x007a1200

08005060 <HAL_RCC_OscConfig>:
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005060:	2800      	cmp	r0, #0
 8005062:	f000 81fb 	beq.w	800545c <HAL_RCC_OscConfig+0x3fc>
{
 8005066:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800506a:	6803      	ldr	r3, [r0, #0]
 800506c:	07de      	lsls	r6, r3, #31
{
 800506e:	b082      	sub	sp, #8
 8005070:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005072:	d536      	bpl.n	80050e2 <HAL_RCC_OscConfig+0x82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005074:	49a1      	ldr	r1, [pc, #644]	@ (80052fc <HAL_RCC_OscConfig+0x29c>)
 8005076:	688a      	ldr	r2, [r1, #8]
 8005078:	f002 020c 	and.w	r2, r2, #12
 800507c:	2a04      	cmp	r2, #4
 800507e:	f000 80de 	beq.w	800523e <HAL_RCC_OscConfig+0x1de>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005082:	688a      	ldr	r2, [r1, #8]
 8005084:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005088:	2a08      	cmp	r2, #8
 800508a:	f000 80d4 	beq.w	8005236 <HAL_RCC_OscConfig+0x1d6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800508e:	499b      	ldr	r1, [pc, #620]	@ (80052fc <HAL_RCC_OscConfig+0x29c>)
 8005090:	688a      	ldr	r2, [r1, #8]
 8005092:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005096:	2a0c      	cmp	r2, #12
 8005098:	f000 8104 	beq.w	80052a4 <HAL_RCC_OscConfig+0x244>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800509c:	6863      	ldr	r3, [r4, #4]
 800509e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050a2:	f000 8118 	beq.w	80052d6 <HAL_RCC_OscConfig+0x276>
 80050a6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80050aa:	f000 8192 	beq.w	80053d2 <HAL_RCC_OscConfig+0x372>
 80050ae:	4d93      	ldr	r5, [pc, #588]	@ (80052fc <HAL_RCC_OscConfig+0x29c>)
 80050b0:	682a      	ldr	r2, [r5, #0]
 80050b2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80050b6:	602a      	str	r2, [r5, #0]
 80050b8:	682a      	ldr	r2, [r5, #0]
 80050ba:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80050be:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	f040 810d 	bne.w	80052e0 <HAL_RCC_OscConfig+0x280>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050c6:	f7ff fa13 	bl	80044f0 <HAL_GetTick>
 80050ca:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050cc:	e005      	b.n	80050da <HAL_RCC_OscConfig+0x7a>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050ce:	f7ff fa0f 	bl	80044f0 <HAL_GetTick>
 80050d2:	1b80      	subs	r0, r0, r6
 80050d4:	2864      	cmp	r0, #100	@ 0x64
 80050d6:	f200 80fa 	bhi.w	80052ce <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050da:	682b      	ldr	r3, [r5, #0]
 80050dc:	039f      	lsls	r7, r3, #14
 80050de:	d4f6      	bmi.n	80050ce <HAL_RCC_OscConfig+0x6e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050e0:	6823      	ldr	r3, [r4, #0]
 80050e2:	079d      	lsls	r5, r3, #30
 80050e4:	d52f      	bpl.n	8005146 <HAL_RCC_OscConfig+0xe6>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80050e6:	4a85      	ldr	r2, [pc, #532]	@ (80052fc <HAL_RCC_OscConfig+0x29c>)
 80050e8:	6891      	ldr	r1, [r2, #8]
 80050ea:	f011 0f0c 	tst.w	r1, #12
 80050ee:	f000 8099 	beq.w	8005224 <HAL_RCC_OscConfig+0x1c4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80050f2:	6891      	ldr	r1, [r2, #8]
 80050f4:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80050f8:	2908      	cmp	r1, #8
 80050fa:	f000 808f 	beq.w	800521c <HAL_RCC_OscConfig+0x1bc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050fe:	497f      	ldr	r1, [pc, #508]	@ (80052fc <HAL_RCC_OscConfig+0x29c>)
 8005100:	688a      	ldr	r2, [r1, #8]
 8005102:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005106:	2a0c      	cmp	r2, #12
 8005108:	f000 815e 	beq.w	80053c8 <HAL_RCC_OscConfig+0x368>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800510c:	68e3      	ldr	r3, [r4, #12]
 800510e:	2b00      	cmp	r3, #0
 8005110:	f000 8112 	beq.w	8005338 <HAL_RCC_OscConfig+0x2d8>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005114:	4b7a      	ldr	r3, [pc, #488]	@ (8005300 <HAL_RCC_OscConfig+0x2a0>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005116:	4e79      	ldr	r6, [pc, #484]	@ (80052fc <HAL_RCC_OscConfig+0x29c>)
        __HAL_RCC_HSI_ENABLE();
 8005118:	2201      	movs	r2, #1
 800511a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800511c:	f7ff f9e8 	bl	80044f0 <HAL_GetTick>
 8005120:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005122:	e005      	b.n	8005130 <HAL_RCC_OscConfig+0xd0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005124:	f7ff f9e4 	bl	80044f0 <HAL_GetTick>
 8005128:	1b40      	subs	r0, r0, r5
 800512a:	2802      	cmp	r0, #2
 800512c:	f200 80cf 	bhi.w	80052ce <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005130:	6833      	ldr	r3, [r6, #0]
 8005132:	079f      	lsls	r7, r3, #30
 8005134:	d5f6      	bpl.n	8005124 <HAL_RCC_OscConfig+0xc4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005136:	6833      	ldr	r3, [r6, #0]
 8005138:	6922      	ldr	r2, [r4, #16]
 800513a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800513e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8005142:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005144:	6823      	ldr	r3, [r4, #0]
 8005146:	071a      	lsls	r2, r3, #28
 8005148:	d452      	bmi.n	80051f0 <HAL_RCC_OscConfig+0x190>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800514a:	075d      	lsls	r5, r3, #29
 800514c:	d530      	bpl.n	80051b0 <HAL_RCC_OscConfig+0x150>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800514e:	4a6b      	ldr	r2, [pc, #428]	@ (80052fc <HAL_RCC_OscConfig+0x29c>)
 8005150:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8005152:	f013 5380 	ands.w	r3, r3, #268435456	@ 0x10000000
 8005156:	f000 8099 	beq.w	800528c <HAL_RCC_OscConfig+0x22c>
    FlagStatus       pwrclkchanged = RESET;
 800515a:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800515c:	4e69      	ldr	r6, [pc, #420]	@ (8005304 <HAL_RCC_OscConfig+0x2a4>)
 800515e:	6833      	ldr	r3, [r6, #0]
 8005160:	05d8      	lsls	r0, r3, #23
 8005162:	f140 80a4 	bpl.w	80052ae <HAL_RCC_OscConfig+0x24e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005166:	68a3      	ldr	r3, [r4, #8]
 8005168:	2b01      	cmp	r3, #1
 800516a:	f000 80cd 	beq.w	8005308 <HAL_RCC_OscConfig+0x2a8>
 800516e:	2b05      	cmp	r3, #5
 8005170:	f000 8139 	beq.w	80053e6 <HAL_RCC_OscConfig+0x386>
 8005174:	4e61      	ldr	r6, [pc, #388]	@ (80052fc <HAL_RCC_OscConfig+0x29c>)
 8005176:	6f32      	ldr	r2, [r6, #112]	@ 0x70
 8005178:	f022 0201 	bic.w	r2, r2, #1
 800517c:	6732      	str	r2, [r6, #112]	@ 0x70
 800517e:	6f32      	ldr	r2, [r6, #112]	@ 0x70
 8005180:	f022 0204 	bic.w	r2, r2, #4
 8005184:	6732      	str	r2, [r6, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005186:	2b00      	cmp	r3, #0
 8005188:	f040 80c3 	bne.w	8005312 <HAL_RCC_OscConfig+0x2b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800518c:	f7ff f9b0 	bl	80044f0 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005190:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8005194:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005196:	e005      	b.n	80051a4 <HAL_RCC_OscConfig+0x144>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005198:	f7ff f9aa 	bl	80044f0 <HAL_GetTick>
 800519c:	1bc0      	subs	r0, r0, r7
 800519e:	4540      	cmp	r0, r8
 80051a0:	f200 8095 	bhi.w	80052ce <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051a4:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 80051a6:	079b      	lsls	r3, r3, #30
 80051a8:	d4f6      	bmi.n	8005198 <HAL_RCC_OscConfig+0x138>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051aa:	2d00      	cmp	r5, #0
 80051ac:	f040 8106 	bne.w	80053bc <HAL_RCC_OscConfig+0x35c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051b0:	69a3      	ldr	r3, [r4, #24]
 80051b2:	b1cb      	cbz	r3, 80051e8 <HAL_RCC_OscConfig+0x188>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80051b4:	4d51      	ldr	r5, [pc, #324]	@ (80052fc <HAL_RCC_OscConfig+0x29c>)
 80051b6:	68aa      	ldr	r2, [r5, #8]
 80051b8:	f002 020c 	and.w	r2, r2, #12
 80051bc:	2a08      	cmp	r2, #8
 80051be:	f000 80cc 	beq.w	800535a <HAL_RCC_OscConfig+0x2fa>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051c2:	2b02      	cmp	r3, #2
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051c4:	4b4e      	ldr	r3, [pc, #312]	@ (8005300 <HAL_RCC_OscConfig+0x2a0>)
 80051c6:	f04f 0200 	mov.w	r2, #0
 80051ca:	661a      	str	r2, [r3, #96]	@ 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051cc:	f000 8115 	beq.w	80053fa <HAL_RCC_OscConfig+0x39a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051d0:	f7ff f98e 	bl	80044f0 <HAL_GetTick>
 80051d4:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051d6:	e004      	b.n	80051e2 <HAL_RCC_OscConfig+0x182>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051d8:	f7ff f98a 	bl	80044f0 <HAL_GetTick>
 80051dc:	1b00      	subs	r0, r0, r4
 80051de:	2802      	cmp	r0, #2
 80051e0:	d875      	bhi.n	80052ce <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051e2:	682b      	ldr	r3, [r5, #0]
 80051e4:	019b      	lsls	r3, r3, #6
 80051e6:	d4f7      	bmi.n	80051d8 <HAL_RCC_OscConfig+0x178>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80051e8:	2000      	movs	r0, #0
}
 80051ea:	b002      	add	sp, #8
 80051ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80051f0:	6963      	ldr	r3, [r4, #20]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d02d      	beq.n	8005252 <HAL_RCC_OscConfig+0x1f2>
      __HAL_RCC_LSI_ENABLE();
 80051f6:	4b42      	ldr	r3, [pc, #264]	@ (8005300 <HAL_RCC_OscConfig+0x2a0>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051f8:	4e40      	ldr	r6, [pc, #256]	@ (80052fc <HAL_RCC_OscConfig+0x29c>)
      __HAL_RCC_LSI_ENABLE();
 80051fa:	2201      	movs	r2, #1
 80051fc:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 8005200:	f7ff f976 	bl	80044f0 <HAL_GetTick>
 8005204:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005206:	e004      	b.n	8005212 <HAL_RCC_OscConfig+0x1b2>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005208:	f7ff f972 	bl	80044f0 <HAL_GetTick>
 800520c:	1b40      	subs	r0, r0, r5
 800520e:	2802      	cmp	r0, #2
 8005210:	d85d      	bhi.n	80052ce <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005212:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8005214:	079b      	lsls	r3, r3, #30
 8005216:	d5f7      	bpl.n	8005208 <HAL_RCC_OscConfig+0x1a8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005218:	6823      	ldr	r3, [r4, #0]
 800521a:	e796      	b.n	800514a <HAL_RCC_OscConfig+0xea>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800521c:	6852      	ldr	r2, [r2, #4]
 800521e:	0250      	lsls	r0, r2, #9
 8005220:	f53f af6d 	bmi.w	80050fe <HAL_RCC_OscConfig+0x9e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005224:	4a35      	ldr	r2, [pc, #212]	@ (80052fc <HAL_RCC_OscConfig+0x29c>)
 8005226:	6812      	ldr	r2, [r2, #0]
 8005228:	0792      	lsls	r2, r2, #30
 800522a:	d523      	bpl.n	8005274 <HAL_RCC_OscConfig+0x214>
 800522c:	68e2      	ldr	r2, [r4, #12]
 800522e:	2a01      	cmp	r2, #1
 8005230:	d020      	beq.n	8005274 <HAL_RCC_OscConfig+0x214>
    return HAL_ERROR;
 8005232:	2001      	movs	r0, #1
 8005234:	e7d9      	b.n	80051ea <HAL_RCC_OscConfig+0x18a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005236:	684a      	ldr	r2, [r1, #4]
 8005238:	0255      	lsls	r5, r2, #9
 800523a:	f57f af28 	bpl.w	800508e <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800523e:	4a2f      	ldr	r2, [pc, #188]	@ (80052fc <HAL_RCC_OscConfig+0x29c>)
 8005240:	6812      	ldr	r2, [r2, #0]
 8005242:	0392      	lsls	r2, r2, #14
 8005244:	f57f af4d 	bpl.w	80050e2 <HAL_RCC_OscConfig+0x82>
 8005248:	6862      	ldr	r2, [r4, #4]
 800524a:	2a00      	cmp	r2, #0
 800524c:	f47f af49 	bne.w	80050e2 <HAL_RCC_OscConfig+0x82>
 8005250:	e7ef      	b.n	8005232 <HAL_RCC_OscConfig+0x1d2>
      __HAL_RCC_LSI_DISABLE();
 8005252:	4a2b      	ldr	r2, [pc, #172]	@ (8005300 <HAL_RCC_OscConfig+0x2a0>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005254:	4e29      	ldr	r6, [pc, #164]	@ (80052fc <HAL_RCC_OscConfig+0x29c>)
      __HAL_RCC_LSI_DISABLE();
 8005256:	f8c2 3e80 	str.w	r3, [r2, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 800525a:	f7ff f949 	bl	80044f0 <HAL_GetTick>
 800525e:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005260:	e004      	b.n	800526c <HAL_RCC_OscConfig+0x20c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005262:	f7ff f945 	bl	80044f0 <HAL_GetTick>
 8005266:	1b40      	subs	r0, r0, r5
 8005268:	2802      	cmp	r0, #2
 800526a:	d830      	bhi.n	80052ce <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800526c:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 800526e:	079f      	lsls	r7, r3, #30
 8005270:	d4f7      	bmi.n	8005262 <HAL_RCC_OscConfig+0x202>
 8005272:	e7d1      	b.n	8005218 <HAL_RCC_OscConfig+0x1b8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005274:	4921      	ldr	r1, [pc, #132]	@ (80052fc <HAL_RCC_OscConfig+0x29c>)
 8005276:	6920      	ldr	r0, [r4, #16]
 8005278:	680a      	ldr	r2, [r1, #0]
 800527a:	f022 02f8 	bic.w	r2, r2, #248	@ 0xf8
 800527e:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8005282:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005284:	071a      	lsls	r2, r3, #28
 8005286:	f57f af60 	bpl.w	800514a <HAL_RCC_OscConfig+0xea>
 800528a:	e7b1      	b.n	80051f0 <HAL_RCC_OscConfig+0x190>
      __HAL_RCC_PWR_CLK_ENABLE();
 800528c:	9301      	str	r3, [sp, #4]
 800528e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8005290:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005294:	6413      	str	r3, [r2, #64]	@ 0x40
 8005296:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8005298:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800529c:	9301      	str	r3, [sp, #4]
 800529e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80052a0:	2501      	movs	r5, #1
 80052a2:	e75b      	b.n	800515c <HAL_RCC_OscConfig+0xfc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052a4:	684a      	ldr	r2, [r1, #4]
 80052a6:	0251      	lsls	r1, r2, #9
 80052a8:	f57f aef8 	bpl.w	800509c <HAL_RCC_OscConfig+0x3c>
 80052ac:	e7c7      	b.n	800523e <HAL_RCC_OscConfig+0x1de>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052ae:	6833      	ldr	r3, [r6, #0]
 80052b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052b4:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80052b6:	f7ff f91b 	bl	80044f0 <HAL_GetTick>
 80052ba:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052bc:	6833      	ldr	r3, [r6, #0]
 80052be:	05d9      	lsls	r1, r3, #23
 80052c0:	f53f af51 	bmi.w	8005166 <HAL_RCC_OscConfig+0x106>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052c4:	f7ff f914 	bl	80044f0 <HAL_GetTick>
 80052c8:	1bc0      	subs	r0, r0, r7
 80052ca:	2802      	cmp	r0, #2
 80052cc:	d9f6      	bls.n	80052bc <HAL_RCC_OscConfig+0x25c>
            return HAL_TIMEOUT;
 80052ce:	2003      	movs	r0, #3
}
 80052d0:	b002      	add	sp, #8
 80052d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052d6:	4a09      	ldr	r2, [pc, #36]	@ (80052fc <HAL_RCC_OscConfig+0x29c>)
 80052d8:	6813      	ldr	r3, [r2, #0]
 80052da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052de:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80052e0:	f7ff f906 	bl	80044f0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052e4:	4e05      	ldr	r6, [pc, #20]	@ (80052fc <HAL_RCC_OscConfig+0x29c>)
        tickstart = HAL_GetTick();
 80052e6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052e8:	e004      	b.n	80052f4 <HAL_RCC_OscConfig+0x294>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052ea:	f7ff f901 	bl	80044f0 <HAL_GetTick>
 80052ee:	1b40      	subs	r0, r0, r5
 80052f0:	2864      	cmp	r0, #100	@ 0x64
 80052f2:	d8ec      	bhi.n	80052ce <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052f4:	6833      	ldr	r3, [r6, #0]
 80052f6:	039b      	lsls	r3, r3, #14
 80052f8:	d5f7      	bpl.n	80052ea <HAL_RCC_OscConfig+0x28a>
 80052fa:	e6f1      	b.n	80050e0 <HAL_RCC_OscConfig+0x80>
 80052fc:	40023800 	.word	0x40023800
 8005300:	42470000 	.word	0x42470000
 8005304:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005308:	4a55      	ldr	r2, [pc, #340]	@ (8005460 <HAL_RCC_OscConfig+0x400>)
 800530a:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 800530c:	f043 0301 	orr.w	r3, r3, #1
 8005310:	6713      	str	r3, [r2, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8005312:	f7ff f8ed 	bl	80044f0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005316:	4f52      	ldr	r7, [pc, #328]	@ (8005460 <HAL_RCC_OscConfig+0x400>)
      tickstart = HAL_GetTick();
 8005318:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800531a:	f241 3888 	movw	r8, #5000	@ 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800531e:	e004      	b.n	800532a <HAL_RCC_OscConfig+0x2ca>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005320:	f7ff f8e6 	bl	80044f0 <HAL_GetTick>
 8005324:	1b80      	subs	r0, r0, r6
 8005326:	4540      	cmp	r0, r8
 8005328:	d8d1      	bhi.n	80052ce <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800532a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800532c:	079a      	lsls	r2, r3, #30
 800532e:	d5f7      	bpl.n	8005320 <HAL_RCC_OscConfig+0x2c0>
    if(pwrclkchanged == SET)
 8005330:	2d00      	cmp	r5, #0
 8005332:	f43f af3d 	beq.w	80051b0 <HAL_RCC_OscConfig+0x150>
 8005336:	e041      	b.n	80053bc <HAL_RCC_OscConfig+0x35c>
        __HAL_RCC_HSI_DISABLE();
 8005338:	4a4a      	ldr	r2, [pc, #296]	@ (8005464 <HAL_RCC_OscConfig+0x404>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800533a:	4e49      	ldr	r6, [pc, #292]	@ (8005460 <HAL_RCC_OscConfig+0x400>)
        __HAL_RCC_HSI_DISABLE();
 800533c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800533e:	f7ff f8d7 	bl	80044f0 <HAL_GetTick>
 8005342:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005344:	e004      	b.n	8005350 <HAL_RCC_OscConfig+0x2f0>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005346:	f7ff f8d3 	bl	80044f0 <HAL_GetTick>
 800534a:	1b40      	subs	r0, r0, r5
 800534c:	2802      	cmp	r0, #2
 800534e:	d8be      	bhi.n	80052ce <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005350:	6833      	ldr	r3, [r6, #0]
 8005352:	0799      	lsls	r1, r3, #30
 8005354:	d4f7      	bmi.n	8005346 <HAL_RCC_OscConfig+0x2e6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005356:	6823      	ldr	r3, [r4, #0]
 8005358:	e6f5      	b.n	8005146 <HAL_RCC_OscConfig+0xe6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800535a:	2b01      	cmp	r3, #1
 800535c:	f43f af69 	beq.w	8005232 <HAL_RCC_OscConfig+0x1d2>
        pll_config = RCC->PLLCFGR;
 8005360:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005362:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005364:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005368:	4291      	cmp	r1, r2
 800536a:	f47f af62 	bne.w	8005232 <HAL_RCC_OscConfig+0x1d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800536e:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005370:	f003 013f 	and.w	r1, r3, #63	@ 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005374:	4291      	cmp	r1, r2
 8005376:	f47f af5c 	bne.w	8005232 <HAL_RCC_OscConfig+0x1d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800537a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800537c:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8005380:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005382:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8005386:	f47f af54 	bne.w	8005232 <HAL_RCC_OscConfig+0x1d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800538a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800538c:	0852      	lsrs	r2, r2, #1
 800538e:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8005392:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005394:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8005398:	f47f af4b 	bne.w	8005232 <HAL_RCC_OscConfig+0x1d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800539c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800539e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80053a2:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 80053a6:	f47f af44 	bne.w	8005232 <HAL_RCC_OscConfig+0x1d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80053aa:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80053ac:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80053b0:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 80053b4:	bf14      	ite	ne
 80053b6:	2001      	movne	r0, #1
 80053b8:	2000      	moveq	r0, #0
 80053ba:	e716      	b.n	80051ea <HAL_RCC_OscConfig+0x18a>
      __HAL_RCC_PWR_CLK_DISABLE();
 80053bc:	4a28      	ldr	r2, [pc, #160]	@ (8005460 <HAL_RCC_OscConfig+0x400>)
 80053be:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80053c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80053c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80053c6:	e6f3      	b.n	80051b0 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053c8:	684a      	ldr	r2, [r1, #4]
 80053ca:	0251      	lsls	r1, r2, #9
 80053cc:	f53f ae9e 	bmi.w	800510c <HAL_RCC_OscConfig+0xac>
 80053d0:	e728      	b.n	8005224 <HAL_RCC_OscConfig+0x1c4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053d2:	4b23      	ldr	r3, [pc, #140]	@ (8005460 <HAL_RCC_OscConfig+0x400>)
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80053da:	601a      	str	r2, [r3, #0]
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80053e2:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80053e4:	e77c      	b.n	80052e0 <HAL_RCC_OscConfig+0x280>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053e6:	4b1e      	ldr	r3, [pc, #120]	@ (8005460 <HAL_RCC_OscConfig+0x400>)
 80053e8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80053ea:	f042 0204 	orr.w	r2, r2, #4
 80053ee:	671a      	str	r2, [r3, #112]	@ 0x70
 80053f0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80053f2:	f042 0201 	orr.w	r2, r2, #1
 80053f6:	671a      	str	r2, [r3, #112]	@ 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80053f8:	e78b      	b.n	8005312 <HAL_RCC_OscConfig+0x2b2>
        tickstart = HAL_GetTick();
 80053fa:	f7ff f879 	bl	80044f0 <HAL_GetTick>
 80053fe:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005400:	e005      	b.n	800540e <HAL_RCC_OscConfig+0x3ae>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005402:	f7ff f875 	bl	80044f0 <HAL_GetTick>
 8005406:	1b80      	subs	r0, r0, r6
 8005408:	2802      	cmp	r0, #2
 800540a:	f63f af60 	bhi.w	80052ce <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800540e:	682b      	ldr	r3, [r5, #0]
 8005410:	0199      	lsls	r1, r3, #6
 8005412:	d4f6      	bmi.n	8005402 <HAL_RCC_OscConfig+0x3a2>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005414:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8005418:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800541a:	430b      	orrs	r3, r1
 800541c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8005420:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	@ 0x28
 8005424:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005426:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800542a:	0852      	lsrs	r2, r2, #1
 800542c:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8005430:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8005432:	490c      	ldr	r1, [pc, #48]	@ (8005464 <HAL_RCC_OscConfig+0x404>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005434:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8005438:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800543a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800543c:	660a      	str	r2, [r1, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800543e:	f7ff f857 	bl	80044f0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005442:	4d07      	ldr	r5, [pc, #28]	@ (8005460 <HAL_RCC_OscConfig+0x400>)
        tickstart = HAL_GetTick();
 8005444:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005446:	e005      	b.n	8005454 <HAL_RCC_OscConfig+0x3f4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005448:	f7ff f852 	bl	80044f0 <HAL_GetTick>
 800544c:	1b00      	subs	r0, r0, r4
 800544e:	2802      	cmp	r0, #2
 8005450:	f63f af3d 	bhi.w	80052ce <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005454:	682b      	ldr	r3, [r5, #0]
 8005456:	019a      	lsls	r2, r3, #6
 8005458:	d5f6      	bpl.n	8005448 <HAL_RCC_OscConfig+0x3e8>
 800545a:	e6c5      	b.n	80051e8 <HAL_RCC_OscConfig+0x188>
    return HAL_ERROR;
 800545c:	2001      	movs	r0, #1
}
 800545e:	4770      	bx	lr
 8005460:	40023800 	.word	0x40023800
 8005464:	42470000 	.word	0x42470000

08005468 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005468:	2800      	cmp	r0, #0
 800546a:	f000 808f 	beq.w	800558c <HAL_TIM_Base_Init+0x124>
{
 800546e:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005470:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8005474:	4604      	mov	r4, r0
 8005476:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800547a:	2b00      	cmp	r3, #0
 800547c:	f000 8081 	beq.w	8005582 <HAL_TIM_Base_Init+0x11a>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005480:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005482:	4943      	ldr	r1, [pc, #268]	@ (8005590 <HAL_TIM_Base_Init+0x128>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005484:	2302      	movs	r3, #2
 8005486:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800548a:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 800548c:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800548e:	d064      	beq.n	800555a <HAL_TIM_Base_Init+0xf2>
 8005490:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8005494:	d030      	beq.n	80054f8 <HAL_TIM_Base_Init+0x90>
 8005496:	f5a1 417c 	sub.w	r1, r1, #64512	@ 0xfc00
 800549a:	428a      	cmp	r2, r1
 800549c:	d02c      	beq.n	80054f8 <HAL_TIM_Base_Init+0x90>
 800549e:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80054a2:	428a      	cmp	r2, r1
 80054a4:	d028      	beq.n	80054f8 <HAL_TIM_Base_Init+0x90>
 80054a6:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80054aa:	428a      	cmp	r2, r1
 80054ac:	d024      	beq.n	80054f8 <HAL_TIM_Base_Init+0x90>
 80054ae:	f501 4178 	add.w	r1, r1, #63488	@ 0xf800
 80054b2:	428a      	cmp	r2, r1
 80054b4:	d051      	beq.n	800555a <HAL_TIM_Base_Init+0xf2>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054b6:	f501 5170 	add.w	r1, r1, #15360	@ 0x3c00
 80054ba:	428a      	cmp	r2, r1
 80054bc:	d020      	beq.n	8005500 <HAL_TIM_Base_Init+0x98>
 80054be:	4935      	ldr	r1, [pc, #212]	@ (8005594 <HAL_TIM_Base_Init+0x12c>)
 80054c0:	428a      	cmp	r2, r1
 80054c2:	d01d      	beq.n	8005500 <HAL_TIM_Base_Init+0x98>
 80054c4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80054c8:	428a      	cmp	r2, r1
 80054ca:	d019      	beq.n	8005500 <HAL_TIM_Base_Init+0x98>
 80054cc:	f5a1 3198 	sub.w	r1, r1, #77824	@ 0x13000
 80054d0:	428a      	cmp	r2, r1
 80054d2:	d015      	beq.n	8005500 <HAL_TIM_Base_Init+0x98>
 80054d4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80054d8:	428a      	cmp	r2, r1
 80054da:	d011      	beq.n	8005500 <HAL_TIM_Base_Init+0x98>
 80054dc:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80054e0:	428a      	cmp	r2, r1
 80054e2:	d00d      	beq.n	8005500 <HAL_TIM_Base_Init+0x98>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054e4:	69a5      	ldr	r5, [r4, #24]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054e6:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054e8:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054ee:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80054f0:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054f2:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80054f4:	6291      	str	r1, [r2, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054f6:	e010      	b.n	800551a <HAL_TIM_Base_Init+0xb2>
    tmpcr1 |= Structure->CounterMode;
 80054f8:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80054fe:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005500:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005502:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005504:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005508:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800550a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 800550e:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005510:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8005512:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8005514:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005516:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005518:	6291      	str	r1, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800551a:	2301      	movs	r3, #1
 800551c:	6153      	str	r3, [r2, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800551e:	6913      	ldr	r3, [r2, #16]
 8005520:	07db      	lsls	r3, r3, #31
 8005522:	d503      	bpl.n	800552c <HAL_TIM_Base_Init+0xc4>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005524:	6913      	ldr	r3, [r2, #16]
 8005526:	f023 0301 	bic.w	r3, r3, #1
 800552a:	6113      	str	r3, [r2, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800552c:	2301      	movs	r3, #1
 800552e:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005532:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8005536:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800553a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800553e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005542:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005546:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800554a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800554e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8005552:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8005556:	2000      	movs	r0, #0
}
 8005558:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 800555a:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800555c:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800555e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8005562:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8005564:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005568:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800556a:	69a1      	ldr	r1, [r4, #24]
 800556c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005570:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8005572:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005574:	68e3      	ldr	r3, [r4, #12]
 8005576:	62d3      	str	r3, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005578:	6863      	ldr	r3, [r4, #4]
 800557a:	6293      	str	r3, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800557c:	6963      	ldr	r3, [r4, #20]
 800557e:	6313      	str	r3, [r2, #48]	@ 0x30
 8005580:	e7cb      	b.n	800551a <HAL_TIM_Base_Init+0xb2>
    htim->Lock = HAL_UNLOCKED;
 8005582:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005586:	f7fe fcd9 	bl	8003f3c <HAL_TIM_Base_MspInit>
 800558a:	e779      	b.n	8005480 <HAL_TIM_Base_Init+0x18>
    return HAL_ERROR;
 800558c:	2001      	movs	r0, #1
}
 800558e:	4770      	bx	lr
 8005590:	40010000 	.word	0x40010000
 8005594:	40014400 	.word	0x40014400

08005598 <HAL_TIM_PWM_MspInit>:
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
 8005598:	4770      	bx	lr
 800559a:	bf00      	nop

0800559c <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 800559c:	2800      	cmp	r0, #0
 800559e:	f000 808f 	beq.w	80056c0 <HAL_TIM_PWM_Init+0x124>
{
 80055a2:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80055a4:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80055a8:	4604      	mov	r4, r0
 80055aa:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	f000 8081 	beq.w	80056b6 <HAL_TIM_PWM_Init+0x11a>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055b4:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055b6:	4943      	ldr	r1, [pc, #268]	@ (80056c4 <HAL_TIM_PWM_Init+0x128>)
  htim->State = HAL_TIM_STATE_BUSY;
 80055b8:	2302      	movs	r3, #2
 80055ba:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055be:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 80055c0:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055c2:	d064      	beq.n	800568e <HAL_TIM_PWM_Init+0xf2>
 80055c4:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80055c8:	d030      	beq.n	800562c <HAL_TIM_PWM_Init+0x90>
 80055ca:	f5a1 417c 	sub.w	r1, r1, #64512	@ 0xfc00
 80055ce:	428a      	cmp	r2, r1
 80055d0:	d02c      	beq.n	800562c <HAL_TIM_PWM_Init+0x90>
 80055d2:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80055d6:	428a      	cmp	r2, r1
 80055d8:	d028      	beq.n	800562c <HAL_TIM_PWM_Init+0x90>
 80055da:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80055de:	428a      	cmp	r2, r1
 80055e0:	d024      	beq.n	800562c <HAL_TIM_PWM_Init+0x90>
 80055e2:	f501 4178 	add.w	r1, r1, #63488	@ 0xf800
 80055e6:	428a      	cmp	r2, r1
 80055e8:	d051      	beq.n	800568e <HAL_TIM_PWM_Init+0xf2>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055ea:	f501 5170 	add.w	r1, r1, #15360	@ 0x3c00
 80055ee:	428a      	cmp	r2, r1
 80055f0:	d020      	beq.n	8005634 <HAL_TIM_PWM_Init+0x98>
 80055f2:	4935      	ldr	r1, [pc, #212]	@ (80056c8 <HAL_TIM_PWM_Init+0x12c>)
 80055f4:	428a      	cmp	r2, r1
 80055f6:	d01d      	beq.n	8005634 <HAL_TIM_PWM_Init+0x98>
 80055f8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80055fc:	428a      	cmp	r2, r1
 80055fe:	d019      	beq.n	8005634 <HAL_TIM_PWM_Init+0x98>
 8005600:	f5a1 3198 	sub.w	r1, r1, #77824	@ 0x13000
 8005604:	428a      	cmp	r2, r1
 8005606:	d015      	beq.n	8005634 <HAL_TIM_PWM_Init+0x98>
 8005608:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800560c:	428a      	cmp	r2, r1
 800560e:	d011      	beq.n	8005634 <HAL_TIM_PWM_Init+0x98>
 8005610:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005614:	428a      	cmp	r2, r1
 8005616:	d00d      	beq.n	8005634 <HAL_TIM_PWM_Init+0x98>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005618:	69a5      	ldr	r5, [r4, #24]
  TIMx->PSC = Structure->Prescaler;
 800561a:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800561c:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800561e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005622:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8005624:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005626:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005628:	6291      	str	r1, [r2, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800562a:	e010      	b.n	800564e <HAL_TIM_PWM_Init+0xb2>
    tmpcr1 |= Structure->CounterMode;
 800562c:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800562e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8005632:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005634:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005636:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005638:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800563c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800563e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005642:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005644:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8005646:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8005648:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800564a:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800564c:	6291      	str	r1, [r2, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 800564e:	2301      	movs	r3, #1
 8005650:	6153      	str	r3, [r2, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005652:	6913      	ldr	r3, [r2, #16]
 8005654:	07db      	lsls	r3, r3, #31
 8005656:	d503      	bpl.n	8005660 <HAL_TIM_PWM_Init+0xc4>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005658:	6913      	ldr	r3, [r2, #16]
 800565a:	f023 0301 	bic.w	r3, r3, #1
 800565e:	6113      	str	r3, [r2, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005660:	2301      	movs	r3, #1
 8005662:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005666:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800566a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800566e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8005672:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005676:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800567a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800567e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8005682:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8005686:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800568a:	2000      	movs	r0, #0
}
 800568c:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 800568e:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005690:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005692:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8005696:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8005698:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800569c:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800569e:	69a1      	ldr	r1, [r4, #24]
 80056a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80056a4:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 80056a6:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056a8:	68e3      	ldr	r3, [r4, #12]
 80056aa:	62d3      	str	r3, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80056ac:	6863      	ldr	r3, [r4, #4]
 80056ae:	6293      	str	r3, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80056b0:	6963      	ldr	r3, [r4, #20]
 80056b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80056b4:	e7cb      	b.n	800564e <HAL_TIM_PWM_Init+0xb2>
    htim->Lock = HAL_UNLOCKED;
 80056b6:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80056ba:	f7ff ff6d 	bl	8005598 <HAL_TIM_PWM_MspInit>
 80056be:	e779      	b.n	80055b4 <HAL_TIM_PWM_Init+0x18>
    return HAL_ERROR;
 80056c0:	2001      	movs	r0, #1
}
 80056c2:	4770      	bx	lr
 80056c4:	40010000 	.word	0x40010000
 80056c8:	40014400 	.word	0x40014400

080056cc <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 80056cc:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	f000 80c6 	beq.w	8005862 <HAL_TIM_PWM_ConfigChannel+0x196>
 80056d6:	2301      	movs	r3, #1
{
 80056d8:	b570      	push	{r4, r5, r6, lr}
 80056da:	4684      	mov	ip, r0
  __HAL_LOCK(htim);
 80056dc:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 80056e0:	2a0c      	cmp	r2, #12
 80056e2:	d808      	bhi.n	80056f6 <HAL_TIM_PWM_ConfigChannel+0x2a>
 80056e4:	e8df f002 	tbb	[pc, r2]
 80056e8:	0707073e 	.word	0x0707073e
 80056ec:	07070767 	.word	0x07070767
 80056f0:	07070793 	.word	0x07070793
 80056f4:	0c          	.byte	0x0c
 80056f5:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 80056f6:	2300      	movs	r3, #0
 80056f8:	f88c 303c 	strb.w	r3, [ip, #60]	@ 0x3c
  switch (Channel)
 80056fc:	2001      	movs	r0, #1
}
 80056fe:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005700:	6803      	ldr	r3, [r0, #0]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005702:	680d      	ldr	r5, [r1, #0]
  tmpccer = TIMx->CCER;
 8005704:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005706:	6a18      	ldr	r0, [r3, #32]
 8005708:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 800570c:	6218      	str	r0, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800570e:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8005710:	69d8      	ldr	r0, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005712:	f420 40e6 	bic.w	r0, r0, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005716:	ea40 2005 	orr.w	r0, r0, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800571a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 800571c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005720:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005724:	4d6a      	ldr	r5, [pc, #424]	@ (80058d0 <HAL_TIM_PWM_ConfigChannel+0x204>)
 8005726:	42ab      	cmp	r3, r5
 8005728:	f000 80bc 	beq.w	80058a4 <HAL_TIM_PWM_ConfigChannel+0x1d8>
 800572c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8005730:	42ab      	cmp	r3, r5
 8005732:	f000 80b7 	beq.w	80058a4 <HAL_TIM_PWM_ConfigChannel+0x1d8>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005736:	605c      	str	r4, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005738:	61d8      	str	r0, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800573a:	6848      	ldr	r0, [r1, #4]
 800573c:	6418      	str	r0, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800573e:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005740:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005742:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005744:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005748:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800574a:	69da      	ldr	r2, [r3, #28]
 800574c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005750:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005752:	69da      	ldr	r2, [r3, #28]
 8005754:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005758:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 800575a:	2300      	movs	r3, #0
 800575c:	f88c 303c 	strb.w	r3, [ip, #60]	@ 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8005760:	2000      	movs	r0, #0
}
 8005762:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005764:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8005766:	680d      	ldr	r5, [r1, #0]
  tmpccer = TIMx->CCER;
 8005768:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800576a:	6a18      	ldr	r0, [r3, #32]
 800576c:	f020 0001 	bic.w	r0, r0, #1
 8005770:	6218      	str	r0, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005772:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8005774:	6998      	ldr	r0, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005776:	f020 0073 	bic.w	r0, r0, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 800577a:	4328      	orrs	r0, r5
  tmpccer |= OC_Config->OCPolarity;
 800577c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 800577e:	f022 0202 	bic.w	r2, r2, #2
  tmpccer |= OC_Config->OCPolarity;
 8005782:	432a      	orrs	r2, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005784:	4d52      	ldr	r5, [pc, #328]	@ (80058d0 <HAL_TIM_PWM_ConfigChannel+0x204>)
 8005786:	42ab      	cmp	r3, r5
 8005788:	d06d      	beq.n	8005866 <HAL_TIM_PWM_ConfigChannel+0x19a>
 800578a:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800578e:	42ab      	cmp	r3, r5
 8005790:	d069      	beq.n	8005866 <HAL_TIM_PWM_ConfigChannel+0x19a>
  TIMx->CR2 = tmpcr2;
 8005792:	605c      	str	r4, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005794:	6198      	str	r0, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8005796:	6848      	ldr	r0, [r1, #4]
 8005798:	6358      	str	r0, [r3, #52]	@ 0x34
  TIMx->CCER = tmpccer;
 800579a:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800579c:	699a      	ldr	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800579e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80057a0:	f042 0208 	orr.w	r2, r2, #8
 80057a4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80057a6:	699a      	ldr	r2, [r3, #24]
 80057a8:	f022 0204 	bic.w	r2, r2, #4
 80057ac:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80057ae:	699a      	ldr	r2, [r3, #24]
 80057b0:	430a      	orrs	r2, r1
 80057b2:	619a      	str	r2, [r3, #24]
      break;
 80057b4:	e7d1      	b.n	800575a <HAL_TIM_PWM_ConfigChannel+0x8e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80057b6:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057b8:	680d      	ldr	r5, [r1, #0]
  tmpccer = TIMx->CCER;
 80057ba:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057bc:	6a18      	ldr	r0, [r3, #32]
 80057be:	f020 0010 	bic.w	r0, r0, #16
 80057c2:	6218      	str	r0, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80057c4:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 80057c6:	6998      	ldr	r0, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80057c8:	f420 40e6 	bic.w	r0, r0, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057cc:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80057d0:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80057d2:	f022 0220 	bic.w	r2, r2, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80057d6:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80057da:	4d3d      	ldr	r5, [pc, #244]	@ (80058d0 <HAL_TIM_PWM_ConfigChannel+0x204>)
 80057dc:	42ab      	cmp	r3, r5
 80057de:	d051      	beq.n	8005884 <HAL_TIM_PWM_ConfigChannel+0x1b8>
 80057e0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80057e4:	42ab      	cmp	r3, r5
 80057e6:	d04d      	beq.n	8005884 <HAL_TIM_PWM_ConfigChannel+0x1b8>
  TIMx->CR2 = tmpcr2;
 80057e8:	605c      	str	r4, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 80057ea:	6198      	str	r0, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80057ec:	6848      	ldr	r0, [r1, #4]
 80057ee:	6398      	str	r0, [r3, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 80057f0:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80057f2:	699a      	ldr	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80057f4:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80057f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80057fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80057fc:	699a      	ldr	r2, [r3, #24]
 80057fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005802:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005804:	699a      	ldr	r2, [r3, #24]
 8005806:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800580a:	619a      	str	r2, [r3, #24]
      break;
 800580c:	e7a5      	b.n	800575a <HAL_TIM_PWM_ConfigChannel+0x8e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800580e:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8005810:	680d      	ldr	r5, [r1, #0]
  tmpccer = TIMx->CCER;
 8005812:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005814:	6a18      	ldr	r0, [r3, #32]
 8005816:	f420 7080 	bic.w	r0, r0, #256	@ 0x100
 800581a:	6218      	str	r0, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800581c:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 800581e:	69d8      	ldr	r0, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005820:	f020 0073 	bic.w	r0, r0, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 8005824:	4328      	orrs	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005826:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8005828:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800582c:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005830:	4d27      	ldr	r5, [pc, #156]	@ (80058d0 <HAL_TIM_PWM_ConfigChannel+0x204>)
 8005832:	42ab      	cmp	r3, r5
 8005834:	d03c      	beq.n	80058b0 <HAL_TIM_PWM_ConfigChannel+0x1e4>
 8005836:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800583a:	42ab      	cmp	r3, r5
 800583c:	d038      	beq.n	80058b0 <HAL_TIM_PWM_ConfigChannel+0x1e4>
  TIMx->CR2 = tmpcr2;
 800583e:	605c      	str	r4, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8005840:	61d8      	str	r0, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8005842:	6848      	ldr	r0, [r1, #4]
 8005844:	63d8      	str	r0, [r3, #60]	@ 0x3c
  TIMx->CCER = tmpccer;
 8005846:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005848:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800584a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800584c:	f042 0208 	orr.w	r2, r2, #8
 8005850:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005852:	69da      	ldr	r2, [r3, #28]
 8005854:	f022 0204 	bic.w	r2, r2, #4
 8005858:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800585a:	69da      	ldr	r2, [r3, #28]
 800585c:	430a      	orrs	r2, r1
 800585e:	61da      	str	r2, [r3, #28]
      break;
 8005860:	e77b      	b.n	800575a <HAL_TIM_PWM_ConfigChannel+0x8e>
  __HAL_LOCK(htim);
 8005862:	2002      	movs	r0, #2
}
 8005864:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 8005866:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8005868:	f022 0208 	bic.w	r2, r2, #8
    tmpccer |= OC_Config->OCNPolarity;
 800586c:	432a      	orrs	r2, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 800586e:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005872:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8005876:	ea46 0e05 	orr.w	lr, r6, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 800587a:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 800587e:	ea4e 0404 	orr.w	r4, lr, r4
 8005882:	e786      	b.n	8005792 <HAL_TIM_PWM_ConfigChannel+0xc6>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005884:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8005886:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800588a:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800588e:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005892:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005896:	ea46 0e05 	orr.w	lr, r6, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 800589a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800589e:	ea44 048e 	orr.w	r4, r4, lr, lsl #2
 80058a2:	e7a1      	b.n	80057e8 <HAL_TIM_PWM_ConfigChannel+0x11c>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80058a4:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80058a6:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80058aa:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 80058ae:	e742      	b.n	8005736 <HAL_TIM_PWM_ConfigChannel+0x6a>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80058b0:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80058b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80058b6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80058ba:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80058be:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80058c2:	ea46 0e05 	orr.w	lr, r6, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 80058c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80058ca:	ea44 140e 	orr.w	r4, r4, lr, lsl #4
 80058ce:	e7b6      	b.n	800583e <HAL_TIM_PWM_ConfigChannel+0x172>
 80058d0:	40010000 	.word	0x40010000

080058d4 <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 80058d4:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 80058d8:	2a01      	cmp	r2, #1
 80058da:	d050      	beq.n	800597e <HAL_TIM_SlaveConfigSynchro+0xaa>
 80058dc:	4603      	mov	r3, r0
{
 80058de:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 80058e0:	2202      	movs	r2, #2
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058e2:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80058e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  __HAL_LOCK(htim);
 80058e8:	2001      	movs	r0, #1
 80058ea:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80058ee:	68a2      	ldr	r2, [r4, #8]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80058f0:	6848      	ldr	r0, [r1, #4]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80058f2:	680d      	ldr	r5, [r1, #0]
  tmpsmcr &= ~TIM_SMCR_TS;
 80058f4:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80058f8:	4302      	orrs	r2, r0
  tmpsmcr &= ~TIM_SMCR_SMS;
 80058fa:	f022 0207 	bic.w	r2, r2, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80058fe:	432a      	orrs	r2, r5

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005900:	2850      	cmp	r0, #80	@ 0x50
  htim->Instance->SMCR = tmpsmcr;
 8005902:	60a2      	str	r2, [r4, #8]
  switch (sSlaveConfig->InputTrigger)
 8005904:	d060      	beq.n	80059c8 <HAL_TIM_SlaveConfigSynchro+0xf4>
 8005906:	d90f      	bls.n	8005928 <HAL_TIM_SlaveConfigSynchro+0x54>
 8005908:	2860      	cmp	r0, #96	@ 0x60
 800590a:	d03a      	beq.n	8005982 <HAL_TIM_SlaveConfigSynchro+0xae>
 800590c:	2870      	cmp	r0, #112	@ 0x70
 800590e:	d10e      	bne.n	800592e <HAL_TIM_SlaveConfigSynchro+0x5a>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005910:	e9d1 5202 	ldrd	r5, r2, [r1, #8]
  tmpsmcr = TIMx->SMCR;
 8005914:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005916:	432a      	orrs	r2, r5
 8005918:	690d      	ldr	r5, [r1, #16]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800591a:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800591e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8005922:	430a      	orrs	r2, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005924:	60a2      	str	r2, [r4, #8]
 8005926:	e00f      	b.n	8005948 <HAL_TIM_SlaveConfigSynchro+0x74>
  switch (sSlaveConfig->InputTrigger)
 8005928:	2840      	cmp	r0, #64	@ 0x40
 800592a:	d03d      	beq.n	80059a8 <HAL_TIM_SlaveConfigSynchro+0xd4>
 800592c:	d907      	bls.n	800593e <HAL_TIM_SlaveConfigSynchro+0x6a>
    htim->State = HAL_TIM_STATE_READY;
 800592e:	2001      	movs	r0, #1
    __HAL_UNLOCK(htim);
 8005930:	2200      	movs	r2, #0
    htim->State = HAL_TIM_STATE_READY;
 8005932:	f883 003d 	strb.w	r0, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8005936:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800593a:	bc30      	pop	{r4, r5}
 800593c:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 800593e:	2820      	cmp	r0, #32
 8005940:	d002      	beq.n	8005948 <HAL_TIM_SlaveConfigSynchro+0x74>
 8005942:	d912      	bls.n	800596a <HAL_TIM_SlaveConfigSynchro+0x96>
 8005944:	2830      	cmp	r0, #48	@ 0x30
 8005946:	d1f2      	bne.n	800592e <HAL_TIM_SlaveConfigSynchro+0x5a>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005948:	68e2      	ldr	r2, [r4, #12]
 800594a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800594e:	60e2      	str	r2, [r4, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005950:	68e2      	ldr	r2, [r4, #12]
  __HAL_UNLOCK(htim);
 8005952:	2100      	movs	r1, #0
  htim->State = HAL_TIM_STATE_READY;
 8005954:	2501      	movs	r5, #1
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005956:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800595a:	60e2      	str	r2, [r4, #12]
  htim->State = HAL_TIM_STATE_READY;
 800595c:	f883 503d 	strb.w	r5, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8005960:	f883 103c 	strb.w	r1, [r3, #60]	@ 0x3c
  return HAL_OK;
 8005964:	4608      	mov	r0, r1
}
 8005966:	bc30      	pop	{r4, r5}
 8005968:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 800596a:	f030 0210 	bics.w	r2, r0, #16
 800596e:	d0eb      	beq.n	8005948 <HAL_TIM_SlaveConfigSynchro+0x74>
    htim->State = HAL_TIM_STATE_READY;
 8005970:	2001      	movs	r0, #1
    __HAL_UNLOCK(htim);
 8005972:	2200      	movs	r2, #0
    htim->State = HAL_TIM_STATE_READY;
 8005974:	f883 003d 	strb.w	r0, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8005978:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800597c:	e7dd      	b.n	800593a <HAL_TIM_SlaveConfigSynchro+0x66>
  __HAL_LOCK(htim);
 800597e:	2002      	movs	r0, #2
}
 8005980:	4770      	bx	lr
  tmpccer = TIMx->CCER;
 8005982:	6a22      	ldr	r2, [r4, #32]
                               sSlaveConfig->TriggerPolarity,
 8005984:	688d      	ldr	r5, [r1, #8]
                               sSlaveConfig->TriggerFilter);
 8005986:	6908      	ldr	r0, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005988:	6a21      	ldr	r1, [r4, #32]
 800598a:	f021 0110 	bic.w	r1, r1, #16
 800598e:	6221      	str	r1, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005990:	69a1      	ldr	r1, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005992:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005996:	f421 4170 	bic.w	r1, r1, #61440	@ 0xf000
  tmpccer |= (TIM_ICPolarity << 4U);
 800599a:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800599e:	ea41 3100 	orr.w	r1, r1, r0, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80059a2:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 80059a4:	6222      	str	r2, [r4, #32]
 80059a6:	e7cf      	b.n	8005948 <HAL_TIM_SlaveConfigSynchro+0x74>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80059a8:	2d05      	cmp	r5, #5
 80059aa:	d0c0      	beq.n	800592e <HAL_TIM_SlaveConfigSynchro+0x5a>
      tmpccer = htim->Instance->CCER;
 80059ac:	6a20      	ldr	r0, [r4, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80059ae:	6a22      	ldr	r2, [r4, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80059b0:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80059b2:	f022 0201 	bic.w	r2, r2, #1
 80059b6:	6222      	str	r2, [r4, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80059b8:	69a2      	ldr	r2, [r4, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059ba:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80059be:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 80059c2:	61a2      	str	r2, [r4, #24]
      htim->Instance->CCER = tmpccer;
 80059c4:	6220      	str	r0, [r4, #32]
      break;
 80059c6:	e7bf      	b.n	8005948 <HAL_TIM_SlaveConfigSynchro+0x74>
                               sSlaveConfig->TriggerPolarity,
 80059c8:	688a      	ldr	r2, [r1, #8]
                               sSlaveConfig->TriggerFilter);
 80059ca:	6908      	ldr	r0, [r1, #16]
  tmpccer = TIMx->CCER;
 80059cc:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80059ce:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 80059d2:	4311      	orrs	r1, r2
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059d4:	6a22      	ldr	r2, [r4, #32]
 80059d6:	f022 0201 	bic.w	r2, r2, #1
 80059da:	6222      	str	r2, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059dc:	69a2      	ldr	r2, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059de:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80059e2:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80059e6:	61a2      	str	r2, [r4, #24]
  TIMx->CCER = tmpccer;
 80059e8:	6221      	str	r1, [r4, #32]
 80059ea:	e7ad      	b.n	8005948 <HAL_TIM_SlaveConfigSynchro+0x74>

080059ec <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059ec:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 80059f0:	2a01      	cmp	r2, #1
 80059f2:	d037      	beq.n	8005a64 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 80059f4:	4603      	mov	r3, r0

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059f6:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80059f8:	2002      	movs	r0, #2
{
 80059fa:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 80059fc:	f883 003d 	strb.w	r0, [r3, #61]	@ 0x3d
  tmpcr2 = htim->Instance->CR2;
 8005a00:	6850      	ldr	r0, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a02:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 8005a04:	6894      	ldr	r4, [r2, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a06:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a0a:	4328      	orrs	r0, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a0c:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a0e:	4816      	ldr	r0, [pc, #88]	@ (8005a68 <HAL_TIMEx_MasterConfigSynchronization+0x7c>)
 8005a10:	4282      	cmp	r2, r0
 8005a12:	d01a      	beq.n	8005a4a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8005a14:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8005a18:	d017      	beq.n	8005a4a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8005a1a:	f5a0 407c 	sub.w	r0, r0, #64512	@ 0xfc00
 8005a1e:	4282      	cmp	r2, r0
 8005a20:	d013      	beq.n	8005a4a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8005a22:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8005a26:	4282      	cmp	r2, r0
 8005a28:	d00f      	beq.n	8005a4a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8005a2a:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8005a2e:	4282      	cmp	r2, r0
 8005a30:	d00b      	beq.n	8005a4a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8005a32:	f500 4078 	add.w	r0, r0, #63488	@ 0xf800
 8005a36:	4282      	cmp	r2, r0
 8005a38:	d007      	beq.n	8005a4a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8005a3a:	f500 5070 	add.w	r0, r0, #15360	@ 0x3c00
 8005a3e:	4282      	cmp	r2, r0
 8005a40:	d003      	beq.n	8005a4a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8005a42:	f5a0 3094 	sub.w	r0, r0, #75776	@ 0x12800
 8005a46:	4282      	cmp	r2, r0
 8005a48:	d104      	bne.n	8005a54 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a4a:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a4c:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a50:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a52:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8005a54:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8005a5c:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8005a60:	bc30      	pop	{r4, r5}
 8005a62:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005a64:	2002      	movs	r0, #2
}
 8005a66:	4770      	bx	lr
 8005a68:	40010000 	.word	0x40010000

08005a6c <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a6c:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d023      	beq.n	8005abc <HAL_TIMEx_ConfigBreakDeadTime+0x50>
{
 8005a74:	b410      	push	{r4}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005a76:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 8005a7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a7e:	4602      	mov	r2, r0
 8005a80:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005a82:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005a84:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005a86:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005a8a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005a8c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005a90:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005a92:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005a94:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005a98:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005a9a:	6948      	ldr	r0, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005a9c:	69cc      	ldr	r4, [r1, #28]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005a9e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005aa2:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005aa4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005aa8:	6810      	ldr	r0, [r2, #0]

  __HAL_UNLOCK(htim);
 8005aaa:	2100      	movs	r1, #0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005aac:	4323      	orrs	r3, r4
  htim->Instance->BDTR = tmpbdtr;
 8005aae:	6443      	str	r3, [r0, #68]	@ 0x44
  __HAL_UNLOCK(htim);
 8005ab0:	f882 103c 	strb.w	r1, [r2, #60]	@ 0x3c

  return HAL_OK;
 8005ab4:	4608      	mov	r0, r1
}
 8005ab6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005aba:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005abc:	2002      	movs	r0, #2
}
 8005abe:	4770      	bx	lr

08005ac0 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ac0:	2800      	cmp	r0, #0
 8005ac2:	f000 8087 	beq.w	8005bd4 <HAL_UART_Init+0x114>
{
 8005ac6:	b538      	push	{r3, r4, r5, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ac8:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8005acc:	4604      	mov	r4, r0
 8005ace:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d079      	beq.n	8005bca <HAL_UART_Init+0x10a>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ad6:	6823      	ldr	r3, [r4, #0]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ad8:	68e0      	ldr	r0, [r4, #12]
  huart->gState = HAL_UART_STATE_BUSY;
 8005ada:	2224      	movs	r2, #36	@ 0x24
 8005adc:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8005ae0:	68da      	ldr	r2, [r3, #12]
 8005ae2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005ae6:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ae8:	6919      	ldr	r1, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005aea:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005aec:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 8005af0:	4301      	orrs	r1, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005af2:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005af4:	6119      	str	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005af6:	4302      	orrs	r2, r0
 8005af8:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8005afa:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005afc:	4302      	orrs	r2, r0
 8005afe:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 8005b00:	f421 4116 	bic.w	r1, r1, #38400	@ 0x9600
 8005b04:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005b08:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8005b0a:	430a      	orrs	r2, r1
 8005b0c:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b0e:	695a      	ldr	r2, [r3, #20]
 8005b10:	69a0      	ldr	r0, [r4, #24]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b12:	4931      	ldr	r1, [pc, #196]	@ (8005bd8 <HAL_UART_Init+0x118>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b14:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005b18:	4302      	orrs	r2, r0
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b1a:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b1c:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b1e:	d036      	beq.n	8005b8e <HAL_UART_Init+0xce>
 8005b20:	4a2e      	ldr	r2, [pc, #184]	@ (8005bdc <HAL_UART_Init+0x11c>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d033      	beq.n	8005b8e <HAL_UART_Init+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b26:	f7ff fa25 	bl	8004f74 <HAL_RCC_GetPCLK1Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b2a:	69e2      	ldr	r2, [r4, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005b2c:	2119      	movs	r1, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b2e:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005b32:	e9d4 5300 	ldrd	r5, r3, [r4]
 8005b36:	fba0 0101 	umull	r0, r1, r0, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b3a:	d02b      	beq.n	8005b94 <HAL_UART_Init+0xd4>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b3c:	009a      	lsls	r2, r3, #2
 8005b3e:	0f9b      	lsrs	r3, r3, #30
 8005b40:	f7fa fb62 	bl	8000208 <__aeabi_uldivmod>
 8005b44:	4a26      	ldr	r2, [pc, #152]	@ (8005be0 <HAL_UART_Init+0x120>)
 8005b46:	fba2 1300 	umull	r1, r3, r2, r0
 8005b4a:	095b      	lsrs	r3, r3, #5
 8005b4c:	2164      	movs	r1, #100	@ 0x64
 8005b4e:	fb01 0013 	mls	r0, r1, r3, r0
 8005b52:	0100      	lsls	r0, r0, #4
 8005b54:	3032      	adds	r0, #50	@ 0x32
 8005b56:	fba2 2000 	umull	r2, r0, r2, r0
 8005b5a:	011b      	lsls	r3, r3, #4
 8005b5c:	eb03 1350 	add.w	r3, r3, r0, lsr #5
 8005b60:	60ab      	str	r3, [r5, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b62:	692a      	ldr	r2, [r5, #16]
 8005b64:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005b68:	612a      	str	r2, [r5, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b6a:	696a      	ldr	r2, [r5, #20]
 8005b6c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005b70:	616a      	str	r2, [r5, #20]
  __HAL_UART_ENABLE(huart);
 8005b72:	68ea      	ldr	r2, [r5, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b74:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8005b76:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 8005b78:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005b7c:	60ea      	str	r2, [r5, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b7e:	6463      	str	r3, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005b80:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005b84:	f884 1042 	strb.w	r1, [r4, #66]	@ 0x42
  return HAL_OK;
 8005b88:	4618      	mov	r0, r3
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b8a:	6363      	str	r3, [r4, #52]	@ 0x34
}
 8005b8c:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b8e:	f7ff fa01 	bl	8004f94 <HAL_RCC_GetPCLK2Freq>
 8005b92:	e7ca      	b.n	8005b2a <HAL_UART_Init+0x6a>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005b94:	18da      	adds	r2, r3, r3
 8005b96:	f04f 0300 	mov.w	r3, #0
 8005b9a:	415b      	adcs	r3, r3
 8005b9c:	f7fa fb34 	bl	8000208 <__aeabi_uldivmod>
 8005ba0:	4a0f      	ldr	r2, [pc, #60]	@ (8005be0 <HAL_UART_Init+0x120>)
 8005ba2:	fba2 3100 	umull	r3, r1, r2, r0
 8005ba6:	0949      	lsrs	r1, r1, #5
 8005ba8:	2364      	movs	r3, #100	@ 0x64
 8005baa:	fb03 0311 	mls	r3, r3, r1, r0
 8005bae:	00db      	lsls	r3, r3, #3
 8005bb0:	3332      	adds	r3, #50	@ 0x32
 8005bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8005bb6:	f3c3 1242 	ubfx	r2, r3, #5, #3
 8005bba:	091b      	lsrs	r3, r3, #4
 8005bbc:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8005bc0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005bc4:	4413      	add	r3, r2
 8005bc6:	60ab      	str	r3, [r5, #8]
 8005bc8:	e7cb      	b.n	8005b62 <HAL_UART_Init+0xa2>
    huart->Lock = HAL_UNLOCKED;
 8005bca:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8005bce:	f7fe fa13 	bl	8003ff8 <HAL_UART_MspInit>
 8005bd2:	e780      	b.n	8005ad6 <HAL_UART_Init+0x16>
    return HAL_ERROR;
 8005bd4:	2001      	movs	r0, #1
}
 8005bd6:	4770      	bx	lr
 8005bd8:	40011000 	.word	0x40011000
 8005bdc:	40011400 	.word	0x40011400
 8005be0:	51eb851f 	.word	0x51eb851f

08005be4 <VBS_GetAvBusVoltage_d>:
  }
  return (temp_avBusVoltage_d);
#else
  return (pHandle->AvBusVoltage_d);
#endif
}
 8005be4:	88c0      	ldrh	r0, [r0, #6]
 8005be6:	4770      	bx	lr

08005be8 <VBS_GetAvBusVoltage_V>:
    temp = 0U;
  }
  else
  {
#endif
    temp = (uint32_t)(pHandle->AvBusVoltage_d);
 8005be8:	88c3      	ldrh	r3, [r0, #6]
    temp *= pHandle->ConversionFactor;
 8005bea:	8840      	ldrh	r0, [r0, #2]
 8005bec:	fb03 f000 	mul.w	r0, r3, r0
    temp /= 65536U;
#ifdef NULL_PTR_CHECK_BUS_VOLT
  }
#endif
  return ((uint16_t)temp);
}
 8005bf0:	0c00      	lsrs	r0, r0, #16
 8005bf2:	4770      	bx	lr

08005bf4 <Circle_Limitation>:
  *  @f$v_q = \sqrt(MaxModule^2-v_d^2\ ) @f$

  *
  */
__weak qd_t Circle_Limitation(const CircleLimitation_Handle_t *pHandle, qd_t Vqd)
{
 8005bf4:	b570      	push	{r4, r5, r6, lr}
    int32_t square_limit;
    int32_t vd_square_limit;
    int32_t new_q;
    int32_t new_d;

    maxModule = (int32_t)pHandle->MaxModule;
 8005bf6:	8803      	ldrh	r3, [r0, #0]
 8005bf8:	140d      	asrs	r5, r1, #16
 8005bfa:	b20c      	sxth	r4, r1

    square_q = ((int32_t)(Vqd.q)) * Vqd.q;
    square_d = ((int32_t)(Vqd.d)) * Vqd.d;
 8005bfc:	fb05 f205 	mul.w	r2, r5, r5
    square_limit = maxModule * maxModule;
 8005c00:	fb03 f303 	mul.w	r3, r3, r3
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
    square_sum = square_q + square_d;
 8005c04:	fb04 2104 	mla	r1, r4, r4, r2

    if (square_sum > square_limit)
 8005c08:	428b      	cmp	r3, r1
{
 8005c0a:	b084      	sub	sp, #16
    if (square_sum > square_limit)
 8005c0c:	da0f      	bge.n	8005c2e <Circle_Limitation+0x3a>
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
 8005c0e:	8846      	ldrh	r6, [r0, #2]
 8005c10:	fb06 f006 	mul.w	r0, r6, r6
    {
      if (square_d <= vd_square_limit)
 8005c14:	4282      	cmp	r2, r0
 8005c16:	dd13      	ble.n	8005c40 <Circle_Limitation+0x4c>
        new_d = Vqd.d;
      }
      else
      {
        new_d = (int32_t)pHandle->MaxVd;
        if (Vqd.d < 0)
 8005c18:	2d00      	cmp	r5, #0
#if defined CIRCLE_LIMITATION_SQRT_M0
        square_temp = (square_limit - vd_square_limit) / 1048576;
        new_q = SqrtTable[square_temp];
#else
        square_temp = square_limit - vd_square_limit;
        new_q = MCM_Sqrt(square_temp);
 8005c1a:	eba3 0000 	sub.w	r0, r3, r0
          new_d = -new_d;
 8005c1e:	bfb8      	it	lt
 8005c20:	4276      	neglt	r6, r6
        new_q = MCM_Sqrt(square_temp);
 8005c22:	f7fb fc3d 	bl	80014a0 <MCM_Sqrt>
#endif
        if (Vqd.q < 0)
 8005c26:	2c00      	cmp	r4, #0
        {
          /* Nothing to do */
        }
      }
      local_vqd.q = (int16_t)new_q;
      local_vqd.d = (int16_t)new_d;
 8005c28:	b235      	sxth	r5, r6
        if (Vqd.q < 0)
 8005c2a:	db0e      	blt.n	8005c4a <Circle_Limitation+0x56>
      local_vqd.q = (int16_t)new_q;
 8005c2c:	b204      	sxth	r4, r0
    }
#ifdef NULL_PTR_CHECK_CRC_LIM
  }
#endif
  return (local_vqd);
 8005c2e:	b2a4      	uxth	r4, r4
 8005c30:	2000      	movs	r0, #0
 8005c32:	f364 000f 	bfi	r0, r4, #0, #16
 8005c36:	b2ad      	uxth	r5, r5
 8005c38:	f365 401f 	bfi	r0, r5, #16, #16
}
 8005c3c:	b004      	add	sp, #16
 8005c3e:	bd70      	pop	{r4, r5, r6, pc}
        new_q = MCM_Sqrt(square_temp);
 8005c40:	1a98      	subs	r0, r3, r2
 8005c42:	f7fb fc2d 	bl	80014a0 <MCM_Sqrt>
        if (Vqd.q < 0)
 8005c46:	2c00      	cmp	r4, #0
 8005c48:	daf0      	bge.n	8005c2c <Circle_Limitation+0x38>
          new_q = - new_q;
 8005c4a:	4240      	negs	r0, r0
      local_vqd.q = (int16_t)new_q;
 8005c4c:	b204      	sxth	r4, r0
      local_vqd.d = (int16_t)new_d;
 8005c4e:	e7ee      	b.n	8005c2e <Circle_Limitation+0x3a>

08005c50 <FF_Init>:
#endif
    pHandle->wConstant_1D = pHandle->wDefConstant_1D;
    pHandle->wConstant_1Q = pHandle->wDefConstant_1Q;
    pHandle->wConstant_2  = pHandle->wDefConstant_2;

    pHandle->pBus_Sensor = pBusSensor;
 8005c50:	6181      	str	r1, [r0, #24]
    pHandle->wConstant_1D = pHandle->wDefConstant_1D;
 8005c52:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8005c54:	6101      	str	r1, [r0, #16]
{
 8005c56:	b410      	push	{r4}
    pHandle->wConstant_1D = pHandle->wDefConstant_1D;
 8005c58:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8005c5a:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8005c5c:	60c4      	str	r4, [r0, #12]

    pHandle->pPID_d = pPIDId;

    pHandle->pPID_q = pPIDIq;
 8005c5e:	e9c0 3207 	strd	r3, r2, [r0, #28]
#ifdef NULL_PTR_CHECK_FEED_FWD_CTRL
  }
#endif
}
 8005c62:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->wConstant_1D = pHandle->wDefConstant_1D;
 8005c66:	6141      	str	r1, [r0, #20]
}
 8005c68:	4770      	bx	lr
 8005c6a:	bf00      	nop

08005c6c <FF_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->Vqdff.q = (int16_t)0;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	6003      	str	r3, [r0, #0]
    pHandle->Vqdff.d = (int16_t)0;
#ifdef NULL_PTR_CHECK_FEED_FWD_CTRL
  }
#endif
}
 8005c70:	4770      	bx	lr
 8005c72:	bf00      	nop

08005c74 <FF_VqdffComputation>:
  * @param  Iqdref Iqd reference components used to calculate the Feed-forward
  *         action.
  * @param  pSTC Pointer on speed and torque controller structure.
  */
__weak void FF_VqdffComputation(FF_Handle_t *pHandle, qd_t Iqdref, SpeednTorqCtrl_Handle_t *pSTC)
{
 8005c74:	b530      	push	{r4, r5, lr}
 8005c76:	b083      	sub	sp, #12
 8005c78:	4604      	mov	r4, r0
    int32_t wtemp1, wtemp2;
    int16_t hSpeed_dpp;
    uint16_t hAvBusVoltage_d;
    SpeednPosFdbk_Handle_t *SpeedSensor;

    SpeedSensor = STC_GetSpeedSensor(pSTC);
 8005c7a:	4610      	mov	r0, r2
{
 8005c7c:	9101      	str	r1, [sp, #4]
    SpeedSensor = STC_GetSpeedSensor(pSTC);
 8005c7e:	f001 fac9 	bl	8007214 <STC_GetSpeedSensor>
    hSpeed_dpp = SPD_GetElSpeedDpp(SpeedSensor);
 8005c82:	f001 fa67 	bl	8007154 <SPD_GetElSpeedDpp>
 8005c86:	4605      	mov	r5, r0
    hAvBusVoltage_d = VBS_GetAvBusVoltage_d(pHandle->pBus_Sensor) / 2U;
 8005c88:	69a0      	ldr	r0, [r4, #24]
 8005c8a:	f7ff ffab 	bl	8005be4 <VBS_GetAvBusVoltage_d>

    if (hAvBusVoltage_d != (uint16_t)0)
 8005c8e:	2801      	cmp	r0, #1
 8005c90:	d940      	bls.n	8005d14 <FF_VqdffComputation+0xa0>
    {
      /*q-axes ff voltage calculation */
      wtemp1 = (((int32_t)(hSpeed_dpp) * Iqdref.d) / (int32_t)32768);
 8005c92:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8005c96:	fb13 f305 	smulbb	r3, r3, r5
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	bfbc      	itt	lt
 8005c9e:	f503 43ff 	addlt.w	r3, r3, #32640	@ 0x7f80
 8005ca2:	337f      	addlt	r3, #127	@ 0x7f
 8005ca4:	13da      	asrs	r2, r3, #15
      wtemp2 = (wtemp1 * pHandle->wConstant_1D) / (int32_t)(hAvBusVoltage_d);
      wtemp2 *= (int32_t)2;

      wtemp1 = ((pHandle->wConstant_2 * hSpeed_dpp) / (int32_t)hAvBusVoltage_d) * (int32_t)16;
 8005ca6:	6963      	ldr	r3, [r4, #20]
      wtemp2 = (wtemp1 * pHandle->wConstant_1D) / (int32_t)(hAvBusVoltage_d);
 8005ca8:	f3c0 014f 	ubfx	r1, r0, #1, #16
 8005cac:	68e0      	ldr	r0, [r4, #12]
      wtemp1 = ((pHandle->wConstant_2 * hSpeed_dpp) / (int32_t)hAvBusVoltage_d) * (int32_t)16;
 8005cae:	fb05 f303 	mul.w	r3, r5, r3
 8005cb2:	fb93 f3f1 	sdiv	r3, r3, r1
 8005cb6:	011b      	lsls	r3, r3, #4
      wtemp2 = (wtemp1 * pHandle->wConstant_1D) / (int32_t)(hAvBusVoltage_d);
 8005cb8:	fb00 f202 	mul.w	r2, r0, r2
 8005cbc:	fb92 f2f1 	sdiv	r2, r2, r1

      wtemp2 = wtemp1 + wtemp2;
 8005cc0:	eb03 0342 	add.w	r3, r3, r2, lsl #1

      SATURATION_TO_S16(wtemp2)
 8005cc4:	4a16      	ldr	r2, [pc, #88]	@ (8005d20 <FF_VqdffComputation+0xac>)
 8005cc6:	4293      	cmp	r3, r2

      pHandle->Vqdff.q = (int16_t)(wtemp2);
 8005cc8:	f647 70ff 	movw	r0, #32767	@ 0x7fff
      SATURATION_TO_S16(wtemp2)
 8005ccc:	bfb8      	it	lt
 8005cce:	4613      	movlt	r3, r2
      pHandle->Vqdff.q = (int16_t)(wtemp2);
 8005cd0:	4283      	cmp	r3, r0
 8005cd2:	bfa8      	it	ge
 8005cd4:	4603      	movge	r3, r0
 8005cd6:	b21a      	sxth	r2, r3

      /* d-axes ff voltage calculation */
      wtemp1 = (((int32_t)(hSpeed_dpp) * Iqdref.q) / (int32_t)32768);
 8005cd8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8005cdc:	8022      	strh	r2, [r4, #0]
 8005cde:	fb13 f305 	smulbb	r3, r3, r5
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	bfb8      	it	lt
 8005ce6:	181b      	addlt	r3, r3, r0
      wtemp2 = (wtemp1 * pHandle->wConstant_1Q) / (int32_t)(hAvBusVoltage_d);
 8005ce8:	6920      	ldr	r0, [r4, #16]
      wtemp1 = (((int32_t)(hSpeed_dpp) * Iqdref.q) / (int32_t)32768);
 8005cea:	13db      	asrs	r3, r3, #15
      wtemp2 = (wtemp1 * pHandle->wConstant_1Q) / (int32_t)(hAvBusVoltage_d);
 8005cec:	fb00 f303 	mul.w	r3, r0, r3
      wtemp2 *= (int32_t)(-2);

      SATURATION_TO_S16(wtemp2)
 8005cf0:	480b      	ldr	r0, [pc, #44]	@ (8005d20 <FF_VqdffComputation+0xac>)
      wtemp2 = (wtemp1 * pHandle->wConstant_1Q) / (int32_t)(hAvBusVoltage_d);
 8005cf2:	fb93 f3f1 	sdiv	r3, r3, r1
      wtemp2 *= (int32_t)(-2);
 8005cf6:	ebc3 73c3 	rsb	r3, r3, r3, lsl #31
 8005cfa:	005b      	lsls	r3, r3, #1
      SATURATION_TO_S16(wtemp2)
 8005cfc:	4283      	cmp	r3, r0
 8005cfe:	bfb8      	it	lt
 8005d00:	4603      	movlt	r3, r0

      pHandle->Vqdff.d = (int16_t)(wtemp2);
 8005d02:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8005d06:	428b      	cmp	r3, r1
 8005d08:	bfa8      	it	ge
 8005d0a:	460b      	movge	r3, r1
 8005d0c:	b21b      	sxth	r3, r3
 8005d0e:	8063      	strh	r3, [r4, #2]
      pHandle->Vqdff.d = (int16_t)0;
    }
#ifdef NULL_PTR_CHECK_FEED_FWD_CTRL
  }
#endif
}
 8005d10:	b003      	add	sp, #12
 8005d12:	bd30      	pop	{r4, r5, pc}
      pHandle->Vqdff.d = (int16_t)0;
 8005d14:	2300      	movs	r3, #0
      pHandle->Vqdff.q = (int16_t)0;
 8005d16:	461a      	mov	r2, r3
 8005d18:	8063      	strh	r3, [r4, #2]
 8005d1a:	8022      	strh	r2, [r4, #0]
}
 8005d1c:	b003      	add	sp, #12
 8005d1e:	bd30      	pop	{r4, r5, pc}
 8005d20:	ffff8001 	.word	0xffff8001

08005d24 <FF_VqdConditioning>:

    SATURATION_TO_S16(wtemp)

    lVqd.q = (int16_t)wtemp;

    wtemp = (int32_t)(Vqd.d) + pHandle->Vqdff.d;
 8005d24:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
{
 8005d28:	b410      	push	{r4}
    wtemp = (int32_t)(Vqd.d) + pHandle->Vqdff.d;
 8005d2a:	eb03 4321 	add.w	r3, r3, r1, asr #16

    SATURATION_TO_S16(wtemp)
 8005d2e:	4c10      	ldr	r4, [pc, #64]	@ (8005d70 <FF_VqdConditioning+0x4c>)
    pHandle->VqdPIout = Vqd;
 8005d30:	6041      	str	r1, [r0, #4]
{
 8005d32:	460a      	mov	r2, r1
    wtemp = (int32_t)(Vqd.q) + pHandle->Vqdff.q;
 8005d34:	f9b0 1000 	ldrsh.w	r1, [r0]
    SATURATION_TO_S16(wtemp)
 8005d38:	42a3      	cmp	r3, r4
    wtemp = (int32_t)(Vqd.q) + pHandle->Vqdff.q;
 8005d3a:	fa01 f182 	sxtah	r1, r1, r2
    SATURATION_TO_S16(wtemp)
 8005d3e:	bfb8      	it	lt
 8005d40:	4623      	movlt	r3, r4
    SATURATION_TO_S16(wtemp)
 8005d42:	42a1      	cmp	r1, r4

    lVqd.d = (int16_t)wtemp;
 8005d44:	f647 72ff 	movw	r2, #32767	@ 0x7fff
    SATURATION_TO_S16(wtemp)
 8005d48:	bfb8      	it	lt
 8005d4a:	4621      	movlt	r1, r4
    lVqd.q = (int16_t)wtemp;
 8005d4c:	4291      	cmp	r1, r2
 8005d4e:	bfa8      	it	ge
 8005d50:	4611      	movge	r1, r2
#ifdef NULL_PTR_CHECK_FEED_FWD_CTRL
  }
#endif
  return (lVqd);
 8005d52:	4293      	cmp	r3, r2
 8005d54:	bfa8      	it	ge
 8005d56:	4613      	movge	r3, r2
 8005d58:	b289      	uxth	r1, r1
 8005d5a:	2000      	movs	r0, #0
 8005d5c:	f361 000f 	bfi	r0, r1, #0, #16
 8005d60:	b29b      	uxth	r3, r3
{
 8005d62:	b085      	sub	sp, #20
  return (lVqd);
 8005d64:	f363 401f 	bfi	r0, r3, #16, #16
}
 8005d68:	b005      	add	sp, #20
 8005d6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d6e:	4770      	bx	lr
 8005d70:	ffff8001 	.word	0xffff8001

08005d74 <FF_DataProcess>:
  }
  else
  {
#endif
    int32_t wAux;
    int32_t lowPassFilterBW = (int32_t) pHandle->hVqdLowPassFilterBW - (int32_t)1;
 8005d74:	8c82      	ldrh	r2, [r0, #36]	@ 0x24

#ifndef FULL_MISRA_C_COMPLIANCY_FWD_FDB
    /* Computation of average Vqd as output by PI(D) current controllers, used by
       Feed-forward controller algorithm */
    wAux = (int32_t)(pHandle->VqdAvPIout.q) * lowPassFilterBW;
    wAux += pHandle->VqdPIout.q;
 8005d76:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    pHandle->VqdAvPIout.q = (int16_t)(wAux >> pHandle->hVqdLowPassFilterBWLOG);
 8005d7a:	8e81      	ldrh	r1, [r0, #52]	@ 0x34

    wAux = (int32_t)(pHandle->VqdAvPIout.d) * lowPassFilterBW;
 8005d7c:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
{
 8005d80:	b500      	push	{lr}
    wAux = (int32_t)(pHandle->VqdAvPIout.q) * lowPassFilterBW;
 8005d82:	f9b0 e008 	ldrsh.w	lr, [r0, #8]
    int32_t lowPassFilterBW = (int32_t) pHandle->hVqdLowPassFilterBW - (int32_t)1;
 8005d86:	3a01      	subs	r2, #1
    wAux += pHandle->VqdPIout.q;
 8005d88:	fb02 330e 	mla	r3, r2, lr, r3
    pHandle->VqdAvPIout.q = (int16_t)(wAux >> pHandle->hVqdLowPassFilterBWLOG);
 8005d8c:	410b      	asrs	r3, r1
 8005d8e:	8103      	strh	r3, [r0, #8]
    wAux += pHandle->VqdPIout.d;
 8005d90:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8005d94:	fb02 330c 	mla	r3, r2, ip, r3
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    pHandle->VqdAvPIout.d = (int16_t)(wAux >> pHandle->hVqdLowPassFilterBWLOG);
 8005d98:	410b      	asrs	r3, r1
 8005d9a:	8143      	strh	r3, [r0, #10]
    pHandle->VqdAvPIout.d = (int16_t)(wAux / (int32_t)(pHandle->hVqdLowPassFilterBW));
#endif
#ifdef NULL_PTR_CHECK_FEED_FWD_CTRL
  }
#endif
}
 8005d9c:	f85d fb04 	ldr.w	pc, [sp], #4

08005da0 <FF_InitFOCAdditionalMethods>:
/**
  * @brief  Use this method to initialize FF variables in START_TO_RUN state.
  * @param  pHandle Feed-forward structure.
  */
__weak void FF_InitFOCAdditionalMethods(FF_Handle_t *pHandle)
{
 8005da0:	b538      	push	{r3, r4, r5, lr}
 8005da2:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->VqdAvPIout.q = 0;
 8005da4:	2500      	movs	r5, #0
    pHandle->VqdAvPIout.d = 0;
    PID_SetIntegralTerm(pHandle->pPID_q, 0);
 8005da6:	69c0      	ldr	r0, [r0, #28]
    pHandle->VqdAvPIout.q = 0;
 8005da8:	60a5      	str	r5, [r4, #8]
    PID_SetIntegralTerm(pHandle->pPID_q, 0);
 8005daa:	4629      	mov	r1, r5
 8005dac:	f000 f9bc 	bl	8006128 <PID_SetIntegralTerm>
    PID_SetIntegralTerm(pHandle->pPID_d, 0);
 8005db0:	6a20      	ldr	r0, [r4, #32]
 8005db2:	4629      	mov	r1, r5
#ifdef NULL_PTR_CHECK_FEED_FWD_CTRL
  }
#endif
}
 8005db4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    PID_SetIntegralTerm(pHandle->pPID_d, 0);
 8005db8:	f000 b9b6 	b.w	8006128 <PID_SetIntegralTerm>

08005dbc <FF_GetVqdff>:
  {
    retqt = pHandle->Vqdff;
  }
  return (retqt);
#else
  return (pHandle->Vqdff);
 8005dbc:	6803      	ldr	r3, [r0, #0]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	b299      	uxth	r1, r3
 8005dc2:	f361 020f 	bfi	r2, r1, #0, #16
 8005dc6:	0c1b      	lsrs	r3, r3, #16
 8005dc8:	f363 421f 	bfi	r2, r3, #16, #16
{
 8005dcc:	b082      	sub	sp, #8
#endif
}
 8005dce:	4610      	mov	r0, r2
 8005dd0:	b002      	add	sp, #8
 8005dd2:	4770      	bx	lr

08005dd4 <FF_GetVqdAvPIout>:
  {
    retqt = pHandle->VqdAvPIout;
  }
  return (retqt);
#else
  return (pHandle->VqdAvPIout);
 8005dd4:	6883      	ldr	r3, [r0, #8]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	b299      	uxth	r1, r3
 8005dda:	f361 020f 	bfi	r2, r1, #0, #16
 8005dde:	0c1b      	lsrs	r3, r3, #16
 8005de0:	f363 421f 	bfi	r2, r3, #16, #16
{
 8005de4:	b082      	sub	sp, #8
#endif
}
 8005de6:	4610      	mov	r0, r2
 8005de8:	b002      	add	sp, #8
 8005dea:	4770      	bx	lr

08005dec <MCPA_dataLog>:
  * @brief  Allocates and fills buffer with asynchronous data to be sent to controller
  *
  * @param  *pHandle Pointer to the MCPA Handle
  */
void MCPA_dataLog(MCPA_Handle_t *pHandle)
{
 8005dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif
    uint32_t *logValue;
    uint16_t *logValue16;
    uint8_t i;

    if (pHandle->HFIndex == pHandle->HFRateBuff) /*  */
 8005dee:	7fc3      	ldrb	r3, [r0, #31]
 8005df0:	f890 2022 	ldrb.w	r2, [r0, #34]	@ 0x22
 8005df4:	429a      	cmp	r2, r3
{
 8005df6:	4604      	mov	r4, r0
    if (pHandle->HFIndex == pHandle->HFRateBuff) /*  */
 8005df8:	d002      	beq.n	8005e00 <MCPA_dataLog+0x14>
      }
    }
    else
    {
      /* Nothing to log just waiting next call to MCPA_datalog */
      pHandle->HFIndex++;
 8005dfa:	3301      	adds	r3, #1
 8005dfc:	77c3      	strb	r3, [r0, #31]
    }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
}
 8005dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (0U == pHandle->bufferIndex)
 8005e00:	8b05      	ldrh	r5, [r0, #24]
      pHandle->HFIndex = 0U;
 8005e02:	2300      	movs	r3, #0
 8005e04:	77c3      	strb	r3, [r0, #31]
      if (0U == pHandle->bufferIndex)
 8005e06:	b1a5      	cbz	r5, 8005e32 <MCPA_dataLog+0x46>
 8005e08:	6961      	ldr	r1, [r4, #20]
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 8005e0a:	8ba2      	ldrh	r2, [r4, #28]
 8005e0c:	42aa      	cmp	r2, r5
 8005e0e:	d24e      	bcs.n	8005eae <MCPA_dataLog+0xc2>
 8005e10:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
        if (pHandle->MFRateBuff == 254U) /* MFRateBuff = 254 means we dump MF data once per buffer */
 8005e14:	2bfe      	cmp	r3, #254	@ 0xfe
 8005e16:	d066      	beq.n	8005ee6 <MCPA_dataLog+0xfa>
        *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after
 8005e18:	f894 302a 	ldrb.w	r3, [r4, #42]	@ 0x2a
 8005e1c:	534b      	strh	r3, [r1, r5]
        pHandle->pTransportLayer->fSendPacket(pHandle->pTransportLayer, pHandle->currentBuffer,
 8005e1e:	8b22      	ldrh	r2, [r4, #24]
 8005e20:	6820      	ldr	r0, [r4, #0]
 8005e22:	3202      	adds	r2, #2
 8005e24:	2309      	movs	r3, #9
 8005e26:	6845      	ldr	r5, [r0, #4]
 8005e28:	b292      	uxth	r2, r2
 8005e2a:	47a8      	blx	r5
        pHandle->bufferIndex = 0U;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	8323      	strh	r3, [r4, #24]
}
 8005e30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (0U == pHandle->pTransportLayer->fGetBuffer (pHandle->pTransportLayer,
 8005e32:	4601      	mov	r1, r0
 8005e34:	2209      	movs	r2, #9
 8005e36:	f851 0b14 	ldr.w	r0, [r1], #20
 8005e3a:	6803      	ldr	r3, [r0, #0]
 8005e3c:	4798      	blx	r3
 8005e3e:	b390      	cbz	r0, 8005ea6 <MCPA_dataLog+0xba>
          *logValue = GLOBAL_TIMESTAMP; /* 32 first bits is used to store Timestamp */
 8005e40:	4b49      	ldr	r3, [pc, #292]	@ (8005f68 <MCPA_dataLog+0x17c>)
 8005e42:	6961      	ldr	r1, [r4, #20]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	600b      	str	r3, [r1, #0]
          if (pHandle->Mark == pHandle->MarkBuff)
 8005e48:	f894 0029 	ldrb.w	r0, [r4, #41]	@ 0x29
 8005e4c:	f894 202a 	ldrb.w	r2, [r4, #42]	@ 0x2a
          pHandle->MFIndex = 0U; /* Restart the motif from scratch at each buffer */
 8005e50:	f884 5020 	strb.w	r5, [r4, #32]
          pHandle->bufferIndex = 4U;
 8005e54:	2304      	movs	r3, #4
          if (pHandle->Mark == pHandle->MarkBuff)
 8005e56:	4282      	cmp	r2, r0
          pHandle->bufferIndex = 4U;
 8005e58:	8323      	strh	r3, [r4, #24]
          if (pHandle->Mark == pHandle->MarkBuff)
 8005e5a:	d101      	bne.n	8005e60 <MCPA_dataLog+0x74>
 8005e5c:	461d      	mov	r5, r3
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 8005e5e:	e7d4      	b.n	8005e0a <MCPA_dataLog+0x1e>
            pHandle->MFNumBuff           = pHandle->MFNum;
 8005e60:	f894 3027 	ldrb.w	r3, [r4, #39]	@ 0x27
            pHandle->HFNumBuff           = pHandle->HFNum;
 8005e64:	f894 2023 	ldrb.w	r2, [r4, #35]	@ 0x23
            pHandle->MFRateBuff          = pHandle->MFRate;
 8005e68:	f894 1025 	ldrb.w	r1, [r4, #37]	@ 0x25
            pHandle->HFRateBuff          = pHandle->HFRate;
 8005e6c:	f894 5021 	ldrb.w	r5, [r4, #33]	@ 0x21
            pHandle->HFNumBuff           = pHandle->HFNum;
 8005e70:	f884 2024 	strb.w	r2, [r4, #36]	@ 0x24
            pHandle->MFNumBuff           = pHandle->MFNum;
 8005e74:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
                         ((uint32_t)pHandle->HFNum + (uint32_t)pHandle->MFNum) * 4U); /* We store pointer here,
 8005e78:	441a      	add	r2, r3
            pHandle->bufferTxTriggerBuff = pHandle->bufferTxTrigger;
 8005e7a:	8b63      	ldrh	r3, [r4, #26]
            pHandle->MarkBuff            = pHandle->Mark;
 8005e7c:	f884 002a 	strb.w	r0, [r4, #42]	@ 0x2a
            (void)memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable,
 8005e80:	0092      	lsls	r2, r2, #2
            pHandle->MFRateBuff          = pHandle->MFRate;
 8005e82:	f884 1026 	strb.w	r1, [r4, #38]	@ 0x26
            pHandle->bufferTxTriggerBuff = pHandle->bufferTxTrigger;
 8005e86:	83a3      	strh	r3, [r4, #28]
            (void)memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable,
 8005e88:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
            pHandle->HFRateBuff          = pHandle->HFRate;
 8005e8c:	f884 5022 	strb.w	r5, [r4, #34]	@ 0x22
            (void)memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable,
 8005e90:	f002 f9e6 	bl	8008260 <memcpy>
                         (uint32_t)pHandle->HFNum + (uint32_t)pHandle->MFNum); /* 1 size byte per ID */
 8005e94:	f894 2023 	ldrb.w	r2, [r4, #35]	@ 0x23
 8005e98:	f894 3027 	ldrb.w	r3, [r4, #39]	@ 0x27
            (void)memcpy(pHandle->dataSizeTableBuff, pHandle->dataSizeTable,
 8005e9c:	e9d4 1003 	ldrd	r1, r0, [r4, #12]
 8005ea0:	441a      	add	r2, r3
 8005ea2:	f002 f9dd 	bl	8008260 <memcpy>
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 8005ea6:	8b25      	ldrh	r5, [r4, #24]
 8005ea8:	2d00      	cmp	r5, #0
 8005eaa:	d1ad      	bne.n	8005e08 <MCPA_dataLog+0x1c>
}
 8005eac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8005eae:	f894 6024 	ldrb.w	r6, [r4, #36]	@ 0x24
        logValue16 = (uint16_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 8005eb2:	194b      	adds	r3, r1, r5
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8005eb4:	b36e      	cbz	r6, 8005f12 <MCPA_dataLog+0x126>
 8005eb6:	68a2      	ldr	r2, [r4, #8]
 8005eb8:	eb03 0c46 	add.w	ip, r3, r6, lsl #1
 8005ebc:	3a04      	subs	r2, #4
          *logValue16 = *((uint16_t *) pHandle->dataPtrTableBuff[i]) ; //cstat !MISRAC2012-Rule-11.5
 8005ebe:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8005ec2:	8800      	ldrh	r0, [r0, #0]
 8005ec4:	f823 0b02 	strh.w	r0, [r3], #2
          pHandle->bufferIndex = pHandle->bufferIndex + 2U;
 8005ec8:	8b25      	ldrh	r5, [r4, #24]
 8005eca:	3502      	adds	r5, #2
 8005ecc:	b2ad      	uxth	r5, r5
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8005ece:	459c      	cmp	ip, r3
          pHandle->bufferIndex = pHandle->bufferIndex + 2U;
 8005ed0:	8325      	strh	r5, [r4, #24]
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8005ed2:	d1f4      	bne.n	8005ebe <MCPA_dataLog+0xd2>
        if (pHandle->MFRateBuff < 254U)
 8005ed4:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8005ed8:	8ba2      	ldrh	r2, [r4, #28]
        if (pHandle->MFRateBuff < 254U)
 8005eda:	2bfd      	cmp	r3, #253	@ 0xfd
 8005edc:	4618      	mov	r0, r3
 8005ede:	d91d      	bls.n	8005f1c <MCPA_dataLog+0x130>
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8005ee0:	4295      	cmp	r5, r2
 8005ee2:	d897      	bhi.n	8005e14 <MCPA_dataLog+0x28>
}
 8005ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8005ee6:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 8005eea:	f894 0028 	ldrb.w	r0, [r4, #40]	@ 0x28
 8005eee:	4418      	add	r0, r3
 8005ef0:	4298      	cmp	r0, r3
 8005ef2:	dd91      	ble.n	8005e18 <MCPA_dataLog+0x2c>
            *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8005ef4:	68a7      	ldr	r7, [r4, #8]
            pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 8005ef6:	6926      	ldr	r6, [r4, #16]
            *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8005ef8:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
 8005efc:	6812      	ldr	r2, [r2, #0]
 8005efe:	514a      	str	r2, [r1, r5]
          for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8005f00:	1c5a      	adds	r2, r3, #1
            pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 8005f02:	5cf3      	ldrb	r3, [r6, r3]
 8005f04:	442b      	add	r3, r5
 8005f06:	b29d      	uxth	r5, r3
          for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8005f08:	b2d3      	uxtb	r3, r2
 8005f0a:	4283      	cmp	r3, r0
            pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 8005f0c:	8325      	strh	r5, [r4, #24]
          for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8005f0e:	dbf3      	blt.n	8005ef8 <MCPA_dataLog+0x10c>
 8005f10:	e782      	b.n	8005e18 <MCPA_dataLog+0x2c>
        if (pHandle->MFRateBuff < 254U)
 8005f12:	f894 0026 	ldrb.w	r0, [r4, #38]	@ 0x26
 8005f16:	28fd      	cmp	r0, #253	@ 0xfd
 8005f18:	f63f af71 	bhi.w	8005dfe <MCPA_dataLog+0x12>
          if (pHandle->MFIndex == pHandle->MFRateBuff)
 8005f1c:	f894 3020 	ldrb.w	r3, [r4, #32]
 8005f20:	4283      	cmp	r3, r0
 8005f22:	d006      	beq.n	8005f32 <MCPA_dataLog+0x146>
            pHandle->MFIndex ++;
 8005f24:	3301      	adds	r3, #1
 8005f26:	f884 3020 	strb.w	r3, [r4, #32]
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8005f2a:	4295      	cmp	r5, r2
 8005f2c:	f63f af74 	bhi.w	8005e18 <MCPA_dataLog+0x2c>
}
 8005f30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8005f32:	f894 7028 	ldrb.w	r7, [r4, #40]	@ 0x28
 8005f36:	4437      	add	r7, r6
            pHandle->MFIndex = 0U;
 8005f38:	2300      	movs	r3, #0
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8005f3a:	42b7      	cmp	r7, r6
            pHandle->MFIndex = 0U;
 8005f3c:	f884 3020 	strb.w	r3, [r4, #32]
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8005f40:	ddf3      	ble.n	8005f2a <MCPA_dataLog+0x13e>
              *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8005f42:	f8d4 e008 	ldr.w	lr, [r4, #8]
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8005f46:	f8d4 c010 	ldr.w	ip, [r4, #16]
              *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8005f4a:	f85e 3026 	ldr.w	r3, [lr, r6, lsl #2]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	514b      	str	r3, [r1, r5]
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8005f52:	f81c 3006 	ldrb.w	r3, [ip, r6]
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8005f56:	1c70      	adds	r0, r6, #1
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8005f58:	442b      	add	r3, r5
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8005f5a:	b2c6      	uxtb	r6, r0
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8005f5c:	b29d      	uxth	r5, r3
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8005f5e:	42be      	cmp	r6, r7
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8005f60:	8325      	strh	r5, [r4, #24]
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8005f62:	dbf2      	blt.n	8005f4a <MCPA_dataLog+0x15e>
 8005f64:	e7e1      	b.n	8005f2a <MCPA_dataLog+0x13e>
 8005f66:	bf00      	nop
 8005f68:	20001aa4 	.word	0x20001aa4

08005f6c <MCPA_flushDataLog>:
#endif
    uint32_t *logValue;
    uint16_t *logValue16;
    uint8_t i;

    if (pHandle->bufferIndex > 0U)
 8005f6c:	8b03      	ldrh	r3, [r0, #24]
 8005f6e:	b19b      	cbz	r3, 8005f98 <MCPA_flushDataLog+0x2c>
{
 8005f70:	b570      	push	{r4, r5, r6, lr}
    {  /* If buffer is allocated, we must send it */
      if (pHandle->MFRateBuff == 254U) /* In case of flush, we must respect the packet format to allow
 8005f72:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
                                          proper decoding */
      {
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
        {
         logValue = (uint32_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 8005f76:	6941      	ldr	r1, [r0, #20]
      if (pHandle->MFRateBuff == 254U) /* In case of flush, we must respect the packet format to allow
 8005f78:	2afe      	cmp	r2, #254	@ 0xfe
 8005f7a:	4604      	mov	r4, r0
 8005f7c:	d00d      	beq.n	8005f9a <MCPA_flushDataLog+0x2e>
      else
      {
        /* Nothing to do */
      }
      logValue16 = (uint16_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
      *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after
 8005f7e:	f894 202a 	ldrb.w	r2, [r4, #42]	@ 0x2a
 8005f82:	52ca      	strh	r2, [r1, r3]
                                          the MARK */
      pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer,
 8005f84:	8b22      	ldrh	r2, [r4, #24]
 8005f86:	6820      	ldr	r0, [r4, #0]
 8005f88:	3202      	adds	r2, #2
 8005f8a:	2309      	movs	r3, #9
 8005f8c:	6845      	ldr	r5, [r0, #4]
 8005f8e:	b292      	uxth	r2, r2
 8005f90:	47a8      	blx	r5
                                             pHandle->bufferIndex + 2U, MCTL_ASYNC);
      pHandle->bufferIndex = 0U;
 8005f92:	2300      	movs	r3, #0
 8005f94:	8323      	strh	r3, [r4, #24]
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
}
 8005f96:	bd70      	pop	{r4, r5, r6, pc}
 8005f98:	4770      	bx	lr
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8005f9a:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 8005f9e:	f890 c028 	ldrb.w	ip, [r0, #40]	@ 0x28
 8005fa2:	4494      	add	ip, r2
 8005fa4:	4562      	cmp	r2, ip
 8005fa6:	daea      	bge.n	8005f7e <MCPA_flushDataLog+0x12>
         *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8005fa8:	6886      	ldr	r6, [r0, #8]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8005faa:	6905      	ldr	r5, [r0, #16]
         *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8005fac:	f856 0022 	ldr.w	r0, [r6, r2, lsl #2]
 8005fb0:	6800      	ldr	r0, [r0, #0]
 8005fb2:	50c8      	str	r0, [r1, r3]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8005fb4:	5ca8      	ldrb	r0, [r5, r2]
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8005fb6:	3201      	adds	r2, #1
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8005fb8:	4403      	add	r3, r0
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8005fba:	b2d2      	uxtb	r2, r2
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8005fbc:	b29b      	uxth	r3, r3
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8005fbe:	4562      	cmp	r2, ip
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8005fc0:	8323      	strh	r3, [r4, #24]
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8005fc2:	dbf3      	blt.n	8005fac <MCPA_flushDataLog+0x40>
 8005fc4:	e7db      	b.n	8005f7e <MCPA_flushDataLog+0x12>
 8005fc6:	bf00      	nop

08005fc8 <MCPA_cfgLog>:
  *
  * @param  *pHandle Pointer to the MCPA Handle
  * @param  *cfgdata Configuration of the Async communication
  */
uint8_t MCPA_cfgLog(MCPA_Handle_t *pHandle, uint8_t *cfgdata)
{
 8005fc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint8_t i;
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF) */
    uint16_t newID, buffSize;
    uint8_t *pCfgData = cfgdata;

    buffSize = *((uint16_t *)pCfgData); //cstat !MISRAC2012-Rule-11.3
 8005fcc:	880f      	ldrh	r7, [r1, #0]
{
 8005fce:	4604      	mov	r4, r0

    if (buffSize == 0U)
 8005fd0:	2f00      	cmp	r7, #0
 8005fd2:	d046      	beq.n	8006062 <MCPA_cfgLog+0x9a>
    { 
      /* Switch Off condition */
      MCPA_stopDataLog(pHandle);
    }
    else if (buffSize > pHandle->pTransportLayer->txAsyncMaxPayload)
 8005fd4:	6803      	ldr	r3, [r0, #0]
 8005fd6:	89db      	ldrh	r3, [r3, #14]
 8005fd8:	42bb      	cmp	r3, r7
 8005fda:	d33f      	bcc.n	800605c <MCPA_cfgLog+0x94>
    {
      result = MCP_ERROR_NO_TXASYNC_SPACE;
    }
    else
    {
      pHandle->HFRate = *((uint8_t *)&pCfgData[2]);
 8005fdc:	788b      	ldrb	r3, [r1, #2]
 8005fde:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
      pHandle->HFNum  = *((uint8_t *)&pCfgData[3]);
 8005fe2:	f891 8003 	ldrb.w	r8, [r1, #3]
 8005fe6:	f880 8023 	strb.w	r8, [r0, #35]	@ 0x23
      pHandle->MFRate = *((uint8_t *)&pCfgData[4]);
 8005fea:	790b      	ldrb	r3, [r1, #4]
 8005fec:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
      pHandle->MFNum  = *((uint8_t *)&pCfgData[5]);
 8005ff0:	794b      	ldrb	r3, [r1, #5]
      pCfgData = &pCfgData[6]; /* Start of the HF IDs */

      if ((pHandle->HFNum + pHandle->MFNum) <= pHandle->nbrOfDataLog)
 8005ff2:	7f82      	ldrb	r2, [r0, #30]
      pHandle->MFNum  = *((uint8_t *)&pCfgData[5]);
 8005ff4:	f880 3027 	strb.w	r3, [r0, #39]	@ 0x27
      if ((pHandle->HFNum + pHandle->MFNum) <= pHandle->nbrOfDataLog)
 8005ff8:	4443      	add	r3, r8
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	dc57      	bgt.n	80060ae <MCPA_cfgLog+0xe6>
      pCfgData = &pCfgData[6]; /* Start of the HF IDs */
 8005ffe:	1d8e      	adds	r6, r1, #6
      {
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8006000:	2b00      	cmp	r3, #0
 8006002:	d057      	beq.n	80060b4 <MCPA_cfgLog+0xec>
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF) */
 8006004:	f04f 0800 	mov.w	r8, #0
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8006008:	4645      	mov	r5, r8
 800600a:	e011      	b.n	8006030 <MCPA_cfgLog+0x68>
        {
          newID = *((uint16_t *)pCfgData); //cstat !MISRAC2012-Rule-11.3
          (void)RI_GetPtrReg(newID, &pHandle->dataPtrTable[i]);
          /* HF Data are fixed to 2 bytes */
          pHandle->dataSizeTable[i] = (i < pHandle->HFNum ) ? 2U : RI_GetIDSize(newID);
 800600c:	68e3      	ldr	r3, [r4, #12]
 800600e:	5558      	strb	r0, [r3, r5]
          pCfgData++; /* Point to the next UID */
          pCfgData++;
          logSize = logSize+pHandle->dataSizeTable[i];
 8006010:	68e2      	ldr	r2, [r4, #12]
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8006012:	f894 3023 	ldrb.w	r3, [r4, #35]	@ 0x23
 8006016:	f894 1027 	ldrb.w	r1, [r4, #39]	@ 0x27
          logSize = logSize+pHandle->dataSizeTable[i];
 800601a:	5d52      	ldrb	r2, [r2, r5]
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 800601c:	f105 0c01 	add.w	ip, r5, #1
 8006020:	fa5f f58c 	uxtb.w	r5, ip
 8006024:	440b      	add	r3, r1
          logSize = logSize+pHandle->dataSizeTable[i];
 8006026:	4442      	add	r2, r8
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8006028:	429d      	cmp	r5, r3
          logSize = logSize+pHandle->dataSizeTable[i];
 800602a:	fa1f f882 	uxth.w	r8, r2
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 800602e:	da11      	bge.n	8006054 <MCPA_cfgLog+0x8c>
          newID = *((uint16_t *)pCfgData); //cstat !MISRAC2012-Rule-11.3
 8006030:	f836 9b02 	ldrh.w	r9, [r6], #2
          (void)RI_GetPtrReg(newID, &pHandle->dataPtrTable[i]);
 8006034:	6861      	ldr	r1, [r4, #4]
 8006036:	4648      	mov	r0, r9
 8006038:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800603c:	f7fd fd10 	bl	8003a60 <RI_GetPtrReg>
          pHandle->dataSizeTable[i] = (i < pHandle->HFNum ) ? 2U : RI_GetIDSize(newID);
 8006040:	f894 3023 	ldrb.w	r3, [r4, #35]	@ 0x23
 8006044:	42ab      	cmp	r3, r5
 8006046:	f04f 0002 	mov.w	r0, #2
 800604a:	d8df      	bhi.n	800600c <MCPA_cfgLog+0x44>
 800604c:	4648      	mov	r0, r9
 800604e:	f7fd fcfb 	bl	8003a48 <RI_GetIDSize>
 8006052:	e7db      	b.n	800600c <MCPA_cfgLog+0x44>
        }

        /* Smallest packet must be able to contain logSize Markbyte AsyncID and TimeStamp */
        if (buffSize < (logSize + 2U + 4U))
 8006054:	f108 0206 	add.w	r2, r8, #6
 8006058:	4297      	cmp	r7, r2
 800605a:	d210      	bcs.n	800607e <MCPA_cfgLog+0xb6>
      result = MCP_ERROR_NO_TXASYNC_SPACE;
 800605c:	2009      	movs	r0, #9
    }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
  return (result);
}
 800605e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (pHandle->bufferIndex > 0U)
 8006062:	8b03      	ldrh	r3, [r0, #24]
  pHandle->Mark = 0U;
 8006064:	f880 7029 	strb.w	r7, [r0, #41]	@ 0x29
  if (pHandle->bufferIndex > 0U)
 8006068:	b9ab      	cbnz	r3, 8006096 <MCPA_cfgLog+0xce>
  pHandle->bufferIndex = 0U;
 800606a:	2300      	movs	r3, #0
 800606c:	8323      	strh	r3, [r4, #24]
  pHandle->MarkBuff    = 0U;
 800606e:	f884 302a 	strb.w	r3, [r4, #42]	@ 0x2a
  pHandle->HFIndex     = 0U;
 8006072:	77e3      	strb	r3, [r4, #31]
  pHandle->HFRateBuff  = 0U; /* We do not want to miss any sample at the restart */
 8006074:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
  uint8_t result = MCP_CMD_OK;
 8006078:	2000      	movs	r0, #0
}
 800607a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          pHandle->bufferTxTrigger = buffSize-logSize - 2U; /* 2 is required to add the last Mark byte and NUL
 800607e:	3f02      	subs	r7, #2
 8006080:	eba7 0708 	sub.w	r7, r7, r8
 8006084:	8367      	strh	r7, [r4, #26]
          pHandle->Mark = *((uint8_t *)pCfgData);
 8006086:	7833      	ldrb	r3, [r6, #0]
 8006088:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
          if (0U == pHandle->Mark)
 800608c:	2b00      	cmp	r3, #0
 800608e:	d1f3      	bne.n	8006078 <MCPA_cfgLog+0xb0>
  if (pHandle->bufferIndex > 0U)
 8006090:	8b23      	ldrh	r3, [r4, #24]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d0e9      	beq.n	800606a <MCPA_cfgLog+0xa2>
    logValue16 = (uint16_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 8006096:	6961      	ldr	r1, [r4, #20]
    *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after
 8006098:	f894 202a 	ldrb.w	r2, [r4, #42]	@ 0x2a
 800609c:	52ca      	strh	r2, [r1, r3]
    pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer,
 800609e:	8b22      	ldrh	r2, [r4, #24]
 80060a0:	6820      	ldr	r0, [r4, #0]
 80060a2:	3202      	adds	r2, #2
 80060a4:	6845      	ldr	r5, [r0, #4]
 80060a6:	b292      	uxth	r2, r2
 80060a8:	2309      	movs	r3, #9
 80060aa:	47a8      	blx	r5
 80060ac:	e7dd      	b.n	800606a <MCPA_cfgLog+0xa2>
        result = MCP_ERROR_BAD_RAW_FORMAT;
 80060ae:	200a      	movs	r0, #10
}
 80060b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 80060b4:	2206      	movs	r2, #6
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF) */
 80060b6:	4698      	mov	r8, r3
 80060b8:	e7ce      	b.n	8006058 <MCPA_cfgLog+0x90>
 80060ba:	bf00      	nop

080060bc <NTC_Clear>:
    /* nothing to do */
  }
  else
  {
#endif
    pHandle->hAvTemp_d = 0U;
 80060bc:	2300      	movs	r3, #0
 80060be:	8043      	strh	r3, [r0, #2]
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
}
 80060c0:	4770      	bx	lr
 80060c2:	bf00      	nop

080060c4 <NTC_Init>:
    if (REAL_SENSOR == pHandle->bSensorType)
 80060c4:	7802      	ldrb	r2, [r0, #0]
{
 80060c6:	b508      	push	{r3, lr}
    if (REAL_SENSOR == pHandle->bSensorType)
 80060c8:	b122      	cbz	r2, 80060d4 <NTC_Init+0x10>
      pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 80060ca:	8882      	ldrh	r2, [r0, #4]
 80060cc:	8042      	strh	r2, [r0, #2]
      pHandle->hFaultState = MC_NO_ERROR;
 80060ce:	2100      	movs	r1, #0
 80060d0:	8101      	strh	r1, [r0, #8]
}
 80060d2:	bd08      	pop	{r3, pc}
      NTC_Clear(pHandle);
 80060d4:	f7ff fff2 	bl	80060bc <NTC_Clear>
}
 80060d8:	bd08      	pop	{r3, pc}
 80060da:	bf00      	nop

080060dc <NTC_GetAvTemp_C>:
  else
  {
#endif
    int32_t wTemp;

    if (REAL_SENSOR == pHandle->bSensorType)
 80060dc:	7803      	ldrb	r3, [r0, #0]
 80060de:	b95b      	cbnz	r3, 80060f8 <NTC_GetAvTemp_C+0x1c>
    {
      wTemp = (int32_t)pHandle->hAvTemp_d;
 80060e0:	8842      	ldrh	r2, [r0, #2]
      wTemp -= ((int32_t)pHandle->wV0);
 80060e2:	6941      	ldr	r1, [r0, #20]
      wTemp *= pHandle->hSensitivity;
 80060e4:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
#ifndef FULL_MISRA_C_COMPLIANCY_NTC_TEMP
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      wTemp = (wTemp >> 16) + (int32_t)pHandle->hT0;
 80060e8:	8b00      	ldrh	r0, [r0, #24]
      wTemp -= ((int32_t)pHandle->wV0);
 80060ea:	1a52      	subs	r2, r2, r1
      wTemp *= pHandle->hSensitivity;
 80060ec:	fb02 f303 	mul.w	r3, r2, r3
      wTemp = (wTemp >> 16) + (int32_t)pHandle->hT0;
 80060f0:	eb00 4023 	add.w	r0, r0, r3, asr #16
    returnValue = (int16_t)wTemp;
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (returnValue);
}
 80060f4:	b200      	sxth	r0, r0
 80060f6:	4770      	bx	lr
      wTemp = (int32_t)pHandle->hExpectedTemp_C;
 80060f8:	88c0      	ldrh	r0, [r0, #6]
}
 80060fa:	b200      	sxth	r0, r0
 80060fc:	4770      	bx	lr
 80060fe:	bf00      	nop

08006100 <PID_HandleInit>:
  {
#endif
    pHandle->hKpGain =  pHandle->hDefKpGain;
    pHandle->hKiGain =  pHandle->hDefKiGain;
    pHandle->hKdGain =  pHandle->hDefKdGain;
    pHandle->wIntegralTerm = 0;
 8006100:	2300      	movs	r3, #0
    pHandle->hKpGain =  pHandle->hDefKpGain;
 8006102:	6801      	ldr	r1, [r0, #0]
    pHandle->hKdGain =  pHandle->hDefKdGain;
 8006104:	8c02      	ldrh	r2, [r0, #32]
    pHandle->hKpGain =  pHandle->hDefKpGain;
 8006106:	6041      	str	r1, [r0, #4]
    pHandle->hKdGain =  pHandle->hDefKdGain;
 8006108:	8442      	strh	r2, [r0, #34]	@ 0x22
    pHandle->wIntegralTerm = 0;
 800610a:	6083      	str	r3, [r0, #8]
    pHandle->wPrevProcessVarError = 0;
 800610c:	6283      	str	r3, [r0, #40]	@ 0x28
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 800610e:	4770      	bx	lr

08006110 <PID_SetKP>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKpGain = hKpGain;
 8006110:	8081      	strh	r1, [r0, #4]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8006112:	4770      	bx	lr

08006114 <PID_SetKI>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKiGain = hKiGain;
 8006114:	80c1      	strh	r1, [r0, #6]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8006116:	4770      	bx	lr

08006118 <PID_GetKP>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKpGain);
#else
  return (pHandle->hKpGain);
#endif
}
 8006118:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 800611c:	4770      	bx	lr
 800611e:	bf00      	nop

08006120 <PID_GetKI>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKiGain);
#else
  return (pHandle->hKiGain);
#endif
}
 8006120:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8006124:	4770      	bx	lr
 8006126:	bf00      	nop

08006128 <PID_SetIntegralTerm>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wIntegralTerm = wIntegralTermValue;
 8006128:	6081      	str	r1, [r0, #8]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return;
}
 800612a:	4770      	bx	lr

0800612c <PID_GetKPDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKpDivisorPOW2);
#else
  return (pHandle->hKpDivisorPOW2);
#endif
}
 800612c:	8b80      	ldrh	r0, [r0, #28]
 800612e:	4770      	bx	lr

08006130 <PID_SetKPDivisorPOW2>:
  }
  else
  {
#endif
    pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
    pHandle->hKpDivisor = (((uint16_t)1) << hKpDivisorPOW2);
 8006130:	2301      	movs	r3, #1
 8006132:	408b      	lsls	r3, r1
    pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
 8006134:	8381      	strh	r1, [r0, #28]
    pHandle->hKpDivisor = (((uint16_t)1) << hKpDivisorPOW2);
 8006136:	8303      	strh	r3, [r0, #24]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8006138:	4770      	bx	lr
 800613a:	bf00      	nop

0800613c <PID_GetKIDivisor>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKiDivisor);
#else
  return (pHandle->hKiDivisor);
#endif
}
 800613c:	8b40      	ldrh	r0, [r0, #26]
 800613e:	4770      	bx	lr

08006140 <PID_GetKIDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKiDivisorPOW2);
#else
  return (pHandle->hKiDivisorPOW2);
#endif
}
 8006140:	8bc0      	ldrh	r0, [r0, #30]
 8006142:	4770      	bx	lr

08006144 <PID_SetLowerIntegralTermLimit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wLowerIntegralLimit = wLowerLimit;
 8006144:	6101      	str	r1, [r0, #16]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8006146:	4770      	bx	lr

08006148 <PID_SetUpperIntegralTermLimit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wUpperIntegralLimit = wUpperLimit;
 8006148:	60c1      	str	r1, [r0, #12]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 800614a:	4770      	bx	lr

0800614c <PID_SetKIDivisorPOW2>:
{
 800614c:	b538      	push	{r3, r4, r5, lr}
    uint32_t wKiDiv = (((uint32_t)1) << hKiDivisorPOW2);
 800614e:	2301      	movs	r3, #1
{
 8006150:	460c      	mov	r4, r1
    uint32_t wKiDiv = (((uint32_t)1) << hKiDivisorPOW2);
 8006152:	408b      	lsls	r3, r1
    PID_SetUpperIntegralTermLimit(pHandle, (int32_t)INT16_MAX * (int32_t)wKiDiv);
 8006154:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8006158:	40a1      	lsls	r1, r4
    pHandle->hKiDivisorPOW2 = hKiDivisorPOW2;
 800615a:	83c4      	strh	r4, [r0, #30]
    pHandle->hKiDivisor = (uint16_t)wKiDiv;
 800615c:	8343      	strh	r3, [r0, #26]
{
 800615e:	4605      	mov	r5, r0
    PID_SetUpperIntegralTermLimit(pHandle, (int32_t)INT16_MAX * (int32_t)wKiDiv);
 8006160:	f7ff fff2 	bl	8006148 <PID_SetUpperIntegralTermLimit>
    PID_SetLowerIntegralTermLimit(pHandle, (int32_t)(-INT16_MAX) * (int32_t)wKiDiv);
 8006164:	4902      	ldr	r1, [pc, #8]	@ (8006170 <PID_SetKIDivisorPOW2+0x24>)
 8006166:	4628      	mov	r0, r5
 8006168:	40a1      	lsls	r1, r4
 800616a:	f7ff ffeb 	bl	8006144 <PID_SetLowerIntegralTermLimit>
}
 800616e:	bd38      	pop	{r3, r4, r5, pc}
 8006170:	ffff8001 	.word	0xffff8001

08006174 <PID_SetKD>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKdGain = hKdGain;
 8006174:	8441      	strh	r1, [r0, #34]	@ 0x22
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8006176:	4770      	bx	lr

08006178 <PID_GetKD>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKdGain);
#else
  return (pHandle->hKdGain);
#endif
}
 8006178:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	@ 0x22
 800617c:	4770      	bx	lr
 800617e:	bf00      	nop

08006180 <PID_GetKDDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKdDivisorPOW2);
#else
  return (pHandle->hKdDivisorPOW2);
#endif
}
 8006180:	8cc0      	ldrh	r0, [r0, #38]	@ 0x26
 8006182:	4770      	bx	lr

08006184 <PID_SetKDDivisorPOW2>:
  }
  else
  {
#endif
    pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
    pHandle->hKdDivisor = (((uint16_t)1) << hKdDivisorPOW2);
 8006184:	2301      	movs	r3, #1
 8006186:	408b      	lsls	r3, r1
    pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
 8006188:	84c1      	strh	r1, [r0, #38]	@ 0x26
    pHandle->hKdDivisor = (((uint16_t)1) << hKdDivisorPOW2);
 800618a:	8483      	strh	r3, [r0, #36]	@ 0x24
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 800618c:	4770      	bx	lr
 800618e:	bf00      	nop

08006190 <PI_Controller>:
    int32_t wDischarge = 0;
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

    /* Proportional term computation*/
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8006190:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
{
 8006194:	4603      	mov	r3, r0
 8006196:	b530      	push	{r4, r5, lr}

    /* Integral term computation */
    if (0 == pHandle->hKiGain)
 8006198:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 800619c:	f9b3 c016 	ldrsh.w	ip, [r3, #22]
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 80061a0:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 80061a4:	fb01 f202 	mul.w	r2, r1, r2
    if (0 == pHandle->hKiGain)
 80061a8:	b17c      	cbz	r4, 80061ca <PI_Controller+0x3a>
    {
      pHandle->wIntegralTerm = 0;
    }
    else
    {
      wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 80061aa:	fb04 f101 	mul.w	r1, r4, r1
        {
          /* Nothing to do */
        }
      }

      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 80061ae:	e9d3 5402 	ldrd	r5, r4, [r3, #8]
      if (wIntegral_sum_temp < 0)
 80061b2:	eb15 0e01 	adds.w	lr, r5, r1
 80061b6:	d41d      	bmi.n	80061f4 <PI_Controller+0x64>
            wIntegral_sum_temp = -INT32_MAX;
 80061b8:	420d      	tst	r5, r1
 80061ba:	4914      	ldr	r1, [pc, #80]	@ (800620c <PI_Controller+0x7c>)
 80061bc:	bf48      	it	mi
 80061be:	468e      	movmi	lr, r1
      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 80061c0:	45a6      	cmp	lr, r4
 80061c2:	dc02      	bgt.n	80061ca <PI_Controller+0x3a>
      {
        pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
      }
      else if (wIntegral_sum_temp < pHandle->wLowerIntegralLimit)
 80061c4:	691c      	ldr	r4, [r3, #16]
 80061c6:	4574      	cmp	r4, lr
 80061c8:	dd1d      	ble.n	8006206 <PI_Controller+0x76>
    /* WARNING: the below instruction is not MISRA compliant, user should verify
               that Cortex-M3 assembly instruction ASR (arithmetic shift right)
               is used by the compiler to perform the shifts (instead of LSR
               logical shift right)*/
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    wOutput_32 = (wProportional_Term >> pHandle->hKpDivisorPOW2) + (pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2);
 80061ca:	8b99      	ldrh	r1, [r3, #28]
 80061cc:	410a      	asrs	r2, r1
 80061ce:	8bd9      	ldrh	r1, [r3, #30]
 80061d0:	fa44 f101 	asr.w	r1, r4, r1
 80061d4:	440a      	add	r2, r1
#else
    wOutput_32 = (wProportional_Term / (int32_t)pHandle->hKpDivisor)
              + (pHandle->wIntegralTerm / (int32_t)pHandle->hKiDivisor);
#endif

    if (wOutput_32 > hUpperOutputLimit)
 80061d6:	4290      	cmp	r0, r2
 80061d8:	da03      	bge.n	80061e2 <PI_Controller+0x52>
    {
      wDischarge = hUpperOutputLimit - wOutput_32;
 80061da:	1a82      	subs	r2, r0, r2
    else
    {
      /* Nothing to do here */
    }

    pHandle->wIntegralTerm += wDischarge;
 80061dc:	4414      	add	r4, r2
 80061de:	609c      	str	r4, [r3, #8]
    returnValue = (int16_t)wOutput_32;
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return (returnValue);
}
 80061e0:	bd30      	pop	{r4, r5, pc}
    else if (wOutput_32 < hLowerOutputLimit)
 80061e2:	4594      	cmp	ip, r2
      wDischarge = hLowerOutputLimit - wOutput_32;
 80061e4:	bfc5      	ittet	gt
 80061e6:	ebac 0202 	subgt.w	r2, ip, r2
    pHandle->wIntegralTerm += wDischarge;
 80061ea:	18a4      	addgt	r4, r4, r2
    returnValue = (int16_t)wOutput_32;
 80061ec:	b210      	sxthle	r0, r2
      wOutput_32 = hLowerOutputLimit;
 80061ee:	4660      	movgt	r0, ip
    pHandle->wIntegralTerm += wDischarge;
 80061f0:	609c      	str	r4, [r3, #8]
}
 80061f2:	bd30      	pop	{r4, r5, pc}
        if (pHandle->wIntegralTerm > 0)
 80061f4:	2d00      	cmp	r5, #0
 80061f6:	dde3      	ble.n	80061c0 <PI_Controller+0x30>
          if (wIntegral_Term > 0)
 80061f8:	2900      	cmp	r1, #0
 80061fa:	dde1      	ble.n	80061c0 <PI_Controller+0x30>
      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 80061fc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006200:	428c      	cmp	r4, r1
 8006202:	d1e2      	bne.n	80061ca <PI_Controller+0x3a>
 8006204:	46a6      	mov	lr, r4
        pHandle->wIntegralTerm = wIntegral_sum_temp;
 8006206:	4674      	mov	r4, lr
 8006208:	e7df      	b.n	80061ca <PI_Controller+0x3a>
 800620a:	bf00      	nop
 800620c:	80000001 	.word	0x80000001

08006210 <PQD_CalcElMotorPower>:
  }
  else
  {
#endif
    int32_t wAux;
    qd_t Iqd = pHandle->pFOCVars->Iqd;
 8006210:	6882      	ldr	r2, [r0, #8]
{
 8006212:	b500      	push	{lr}
    qd_t Vqd = pHandle->pFOCVars->Vqd;

    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 8006214:	89d1      	ldrh	r1, [r2, #14]
 8006216:	f8b2 e018 	ldrh.w	lr, [r2, #24]
    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
 800621a:	8993      	ldrh	r3, [r2, #12]
 800621c:	f8b2 c016 	ldrh.w	ip, [r2, #22]
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 8006220:	fb11 f20e 	smulbb	r2, r1, lr
    wAux /= 65536;
 8006224:	fb13 230c 	smlabb	r3, r3, ip, r2
 8006228:	2b00      	cmp	r3, #0

    /* pHandle->hAvrgElMotorPower += (wAux - pHandle->hAvrgElMotorPower) >> 4 */
    pHandle->hAvrgElMotorPower += (int16_t)((wAux - (int32_t)pHandle->hAvrgElMotorPower) / 16);
 800622a:	f9b0 2000 	ldrsh.w	r2, [r0]
    wAux /= 65536;
 800622e:	bfbc      	itt	lt
 8006230:	f503 437f 	addlt.w	r3, r3, #65280	@ 0xff00
 8006234:	33ff      	addlt	r3, #255	@ 0xff
    pHandle->hAvrgElMotorPower += (int16_t)((wAux - (int32_t)pHandle->hAvrgElMotorPower) / 16);
 8006236:	ebd2 4323 	rsbs	r3, r2, r3, asr #16
 800623a:	bf48      	it	mi
 800623c:	330f      	addmi	r3, #15
 800623e:	eb02 1223 	add.w	r2, r2, r3, asr #4
 8006242:	8002      	strh	r2, [r0, #0]

#ifdef NULL_PTR_CHECK_PQD_MOT_POW_MEAS
  }
#endif
}
 8006244:	f85d fb04 	ldr.w	pc, [sp], #4

08006248 <PQD_Clear>:
    /* nothing to do */
  }
  else
  {
#endif
    pHandle->hAvrgElMotorPower = 0;
 8006248:	2300      	movs	r3, #0
 800624a:	8003      	strh	r3, [r0, #0]
#ifdef NULL_PTR_CHECK_MOT_POW_MES
  }
#endif
}
 800624c:	4770      	bx	lr
 800624e:	bf00      	nop

08006250 <PQD_GetAvrgElMotorPowerW>:
  * 
  * @param pHandle pointer on the related component instance.
  * @retval float_t The average measured motor power expressed in Watts.
  */
__weak float_t PQD_GetAvrgElMotorPowerW(const PQD_MotorPowMeas_Handle_t *pHandle)
{
 8006250:	b510      	push	{r4, lr}
  else
  {
#endif

  /* First perform an integer multiplication, then a float one. */
  PowerW = ((float_t)pHandle->hAvrgElMotorPower * (float_t)VBS_GetAvBusVoltage_V(pHandle->pVBS)) * pHandle->ConvFact;
 8006252:	f9b0 3000 	ldrsh.w	r3, [r0]
 8006256:	ee07 3a90 	vmov	s15, r3
{
 800625a:	ed2d 8b02 	vpush	{d8}
 800625e:	4604      	mov	r4, r0
  PowerW = ((float_t)pHandle->hAvrgElMotorPower * (float_t)VBS_GetAvBusVoltage_V(pHandle->pVBS)) * pHandle->ConvFact;
 8006260:	68c0      	ldr	r0, [r0, #12]
 8006262:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8006266:	f7ff fcbf 	bl	8005be8 <VBS_GetAvBusVoltage_V>
 800626a:	edd4 7a01 	vldr	s15, [r4, #4]
 800626e:	ee68 7a27 	vmul.f32	s15, s16, s15

#ifdef NULL_PTR_CHECK_PQD_MOT_POW_MEAS
  }
#endif
  return (PowerW);
}
 8006272:	ecbd 8b02 	vpop	{d8}
  PowerW = ((float_t)pHandle->hAvrgElMotorPower * (float_t)VBS_GetAvBusVoltage_V(pHandle->pVBS)) * pHandle->ConvFact;
 8006276:	ee00 0a10 	vmov	s0, r0
 800627a:	eeb8 0a40 	vcvt.f32.u32	s0, s0
}
 800627e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8006282:	bd10      	pop	{r4, pc}

08006284 <startTimers>:
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
*/
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return (READ_BIT(RCC->APB1ENR, Periphs) == Periphs);
 8006284:	4b17      	ldr	r3, [pc, #92]	@ (80062e4 <startTimers+0x60>)
 8006286:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
  uint32_t isTIM2ClockOn;
  uint32_t trigOut;

  isTIM2ClockOn = LL_APB1_GRP1_IsEnabledClock(LL_APB1_GRP1_PERIPH_TIM2);
  if ((uint32_t)0 == isTIM2ClockOn)
 8006288:	07d2      	lsls	r2, r2, #31
 800628a:	d415      	bmi.n	80062b8 <startTimers+0x34>
  SET_BIT(RCC->APB1ENR, Periphs);
 800628c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800628e:	f042 0201 	orr.w	r2, r2, #1
 8006292:	641a      	str	r2, [r3, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8006294:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 8006296:	b082      	sub	sp, #8
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8006298:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800629c:	f002 0201 	and.w	r2, r2, #1
 80062a0:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 80062a2:	9a01      	ldr	r2, [sp, #4]
 80062a4:	694a      	ldr	r2, [r1, #20]
 80062a6:	f042 0201 	orr.w	r2, r2, #1
 80062aa:	614a      	str	r2, [r1, #20]
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 80062ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80062ae:	f022 0201 	bic.w	r2, r2, #1
 80062b2:	641a      	str	r2, [r3, #64]	@ 0x40
    trigOut = LL_TIM_ReadReg(TIM2, CR2) & TIM_CR2_MMS;
    LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_UPDATE);
    LL_TIM_GenerateEvent_UPDATE(TIM2);
    LL_TIM_SetTriggerOutput(TIM2, trigOut);
  }
}
 80062b4:	b002      	add	sp, #8
 80062b6:	4770      	bx	lr
    trigOut = LL_TIM_ReadReg(TIM2, CR2) & TIM_CR2_MMS;
 80062b8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80062bc:	685a      	ldr	r2, [r3, #4]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80062be:	6859      	ldr	r1, [r3, #4]
 80062c0:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 80062c4:	f041 0120 	orr.w	r1, r1, #32
 80062c8:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80062ca:	6959      	ldr	r1, [r3, #20]
 80062cc:	f041 0101 	orr.w	r1, r1, #1
 80062d0:	6159      	str	r1, [r3, #20]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80062d2:	6859      	ldr	r1, [r3, #4]
 80062d4:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 80062d8:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 80062dc:	430a      	orrs	r2, r1
 80062de:	605a      	str	r2, [r3, #4]
 80062e0:	4770      	bx	lr
 80062e2:	bf00      	nop
 80062e4:	40023800 	.word	0x40023800

080062e8 <waitForPolarizationEnd>:
  {
#endif
    uint16_t hCalibrationPeriodCounter;
    uint16_t hMaxPeriodsNumber;

    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 80062e8:	3201      	adds	r2, #1
{
 80062ea:	b570      	push	{r4, r5, r6, lr}
    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 80062ec:	0852      	lsrs	r2, r2, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 80062ee:	f06f 0602 	mvn.w	r6, #2
 80062f2:	0155      	lsls	r5, r2, #5
 80062f4:	6106      	str	r6, [r0, #16]

    /* Wait for NB_CONVERSIONS to be executed */
    LL_TIM_ClearFlag_CC1(TIMx);
    hCalibrationPeriodCounter = 0u;
 80062f6:	2200      	movs	r2, #0
    while (*cnt < NB_CONVERSIONS)
 80062f8:	f893 c000 	ldrb.w	ip, [r3]
 80062fc:	f1bc 0f0f 	cmp.w	ip, #15
    {
      if ((uint32_t)ERROR == LL_TIM_IsActiveFlag_CC1(TIMx))
      {
        LL_TIM_ClearFlag_CC1(TIMx);
        hCalibrationPeriodCounter++;
 8006300:	f102 0e01 	add.w	lr, r2, #1
    while (*cnt < NB_CONVERSIONS)
 8006304:	d80c      	bhi.n	8006320 <waitForPolarizationEnd+0x38>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8006306:	6904      	ldr	r4, [r0, #16]
 8006308:	07a4      	lsls	r4, r4, #30
 800630a:	d5f5      	bpl.n	80062f8 <waitForPolarizationEnd+0x10>
        hCalibrationPeriodCounter++;
 800630c:	fa1f f28e 	uxth.w	r2, lr
        if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 8006310:	4295      	cmp	r5, r2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8006312:	6106      	str	r6, [r0, #16]
 8006314:	d8f0      	bhi.n	80062f8 <waitForPolarizationEnd+0x10>
        {
          if (*cnt < NB_CONVERSIONS)
 8006316:	781c      	ldrb	r4, [r3, #0]
 8006318:	2c0f      	cmp	r4, #15
 800631a:	d8ed      	bhi.n	80062f8 <waitForPolarizationEnd+0x10>
          {
            *SWerror = 1u;
 800631c:	2301      	movs	r3, #1
 800631e:	800b      	strh	r3, [r1, #0]
      }
    }
#ifdef NULL_PTR_CHECK_POW_COM
  }
#endif
  }
 8006320:	bd70      	pop	{r4, r5, r6, pc}
 8006322:	bf00      	nop

08006324 <R3_1_GetPhaseCurrents>:
  *
  */
__weak void R3_1_GetPhaseCurrents(PWMC_Handle_t *pHdl, ab_t* pStator_Currents)
{
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006324:	f8d0 30a0 	ldr.w	r3, [r0, #160]	@ 0xa0
{
 8006328:	b470      	push	{r4, r5, r6}
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 800632a:	e9d3 2400 	ldrd	r2, r4, [r3]
  CLEAR_BIT(TIMx->CCER, Channels);
 800632e:	6a23      	ldr	r3, [r4, #32]
 8006330:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006334:	6223      	str	r3, [r4, #32]
  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);

  bSector = ( uint8_t )( pHandle->_Super.Sector );

  hReg1 =  (ADCx->JDR1)*2;
 8006336:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
  hReg2 =  (ADCx->JDR2)*2;
 8006338:	6c12      	ldr	r2, [r2, #64]	@ 0x40

  switch ( bSector )
 800633a:	f890 407c 	ldrb.w	r4, [r0, #124]	@ 0x7c
  hReg1 =  (ADCx->JDR1)*2;
 800633e:	005b      	lsls	r3, r3, #1
  hReg2 =  (ADCx->JDR2)*2;
 8006340:	0052      	lsls	r2, r2, #1
  hReg1 =  (ADCx->JDR1)*2;
 8006342:	b29b      	uxth	r3, r3
  hReg2 =  (ADCx->JDR2)*2;
 8006344:	b292      	uxth	r2, r2
  switch ( bSector )
 8006346:	2c05      	cmp	r4, #5
 8006348:	f200 809b 	bhi.w	8006482 <R3_1_GetPhaseCurrents+0x15e>
 800634c:	e8df f004 	tbb	[pc, r4]
 8006350:	0323233f 	.word	0x0323233f
 8006354:	3f03      	.short	0x3f03
    case SECTOR_4:
    case SECTOR_5:
    {
      /* Current on Phase C is not accessible     */
      /* Ia = PhaseAOffset - ADC converted value) */
      wAux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( hReg1 );
 8006356:	f8d0 4088 	ldr.w	r4, [r0, #136]	@ 0x88
 800635a:	1ae4      	subs	r4, r4, r3
      /* Saturation of Ia */
      if ( wAux < -INT16_MAX )
 800635c:	4b4d      	ldr	r3, [pc, #308]	@ (8006494 <R3_1_GetPhaseCurrents+0x170>)
 800635e:	429c      	cmp	r4, r3
 8006360:	da64      	bge.n	800642c <R3_1_GetPhaseCurrents+0x108>
      {
        pStator_Currents->a = ( int16_t )wAux;
      }

      /* Ib = PhaseBOffset - ADC converted value) */
        wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg2 );
 8006362:	f8d0 408c 	ldr.w	r4, [r0, #140]	@ 0x8c
 8006366:	eba4 0c02 	sub.w	ip, r4, r2

      /* Saturation of Ib */
      if ( wAux < -INT16_MAX )
 800636a:	4c4a      	ldr	r4, [pc, #296]	@ (8006494 <R3_1_GetPhaseCurrents+0x170>)
 800636c:	45a4      	cmp	ip, r4
    default:
    {
    }
    break;
  }
  pStator_Currents->a = -pStator_Currents->a;
 800636e:	b29b      	uxth	r3, r3
      if ( wAux < -INT16_MAX )
 8006370:	db49      	blt.n	8006406 <R3_1_GetPhaseCurrents+0xe2>
      else  if ( wAux > INT16_MAX )
 8006372:	f5bc 4f00 	cmp.w	ip, #32768	@ 0x8000
 8006376:	db77      	blt.n	8006468 <R3_1_GetPhaseCurrents+0x144>
  pStator_Currents->a = -pStator_Currents->a;
 8006378:	425d      	negs	r5, r3
 800637a:	b22d      	sxth	r5, r5
 800637c:	f647 7cff 	movw	ip, #32767	@ 0x7fff
  pStator_Currents->b = -pStator_Currents->b;
  pHandle->_Super.Ia = pStator_Currents->a;
  pHandle->_Super.Ib = pStator_Currents->b;
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8006380:	4463      	add	r3, ip
  pStator_Currents->a = -pStator_Currents->a;
 8006382:	800d      	strh	r5, [r1, #0]
  pStator_Currents->b = -pStator_Currents->b;
 8006384:	804c      	strh	r4, [r1, #2]
  pHandle->_Super.Ia = pStator_Currents->a;
 8006386:	f8a0 5062 	strh.w	r5, [r0, #98]	@ 0x62
  pHandle->_Super.Ib = pStator_Currents->b;
 800638a:	f8a0 4064 	strh.w	r4, [r0, #100]	@ 0x64
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 800638e:	f8a0 3066 	strh.w	r3, [r0, #102]	@ 0x66
}
 8006392:	bc70      	pop	{r4, r5, r6}
 8006394:	4770      	bx	lr
      wAux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( hReg1 );
 8006396:	f8d0 4088 	ldr.w	r4, [r0, #136]	@ 0x88
      if ( wAux < -INT16_MAX )
 800639a:	4e3e      	ldr	r6, [pc, #248]	@ (8006494 <R3_1_GetPhaseCurrents+0x170>)
      wAux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( hReg1 );
 800639c:	1ae4      	subs	r4, r4, r3
      if ( wAux < -INT16_MAX )
 800639e:	42b4      	cmp	r4, r6
 80063a0:	db3e      	blt.n	8006420 <R3_1_GetPhaseCurrents+0xfc>
      else  if ( wAux > INT16_MAX )
 80063a2:	f5b4 4f00 	cmp.w	r4, #32768	@ 0x8000
 80063a6:	da55      	bge.n	8006454 <R3_1_GetPhaseCurrents+0x130>
  pStator_Currents->a = -pStator_Currents->a;
 80063a8:	b2a3      	uxth	r3, r4
 80063aa:	425d      	negs	r5, r3
 80063ac:	b22d      	sxth	r5, r5
      wAux = -wAux -  ( int32_t )pStator_Currents->a;
 80063ae:	f8d0 6090 	ldr.w	r6, [r0, #144]	@ 0x90
 80063b2:	1b92      	subs	r2, r2, r6
 80063b4:	1b12      	subs	r2, r2, r4
      if ( wAux > INT16_MAX )
 80063b6:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 80063ba:	da3e      	bge.n	800643a <R3_1_GetPhaseCurrents+0x116>
      else  if ( wAux < -INT16_MAX )
 80063bc:	f512 4f00 	cmn.w	r2, #32768	@ 0x8000
 80063c0:	dd43      	ble.n	800644a <R3_1_GetPhaseCurrents+0x126>
  pStator_Currents->b = -pStator_Currents->b;
 80063c2:	fa1f fc82 	uxth.w	ip, r2
 80063c6:	f1cc 0400 	rsb	r4, ip, #0
 80063ca:	b224      	sxth	r4, r4
 80063cc:	e7d8      	b.n	8006380 <R3_1_GetPhaseCurrents+0x5c>
      wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg1 );
 80063ce:	f8d0 508c 	ldr.w	r5, [r0, #140]	@ 0x8c
 80063d2:	1aed      	subs	r5, r5, r3
      if ( wAux < -INT16_MAX )
 80063d4:	4b2f      	ldr	r3, [pc, #188]	@ (8006494 <R3_1_GetPhaseCurrents+0x170>)
 80063d6:	429d      	cmp	r5, r3
 80063d8:	db1c      	blt.n	8006414 <R3_1_GetPhaseCurrents+0xf0>
      else  if ( wAux > INT16_MAX )
 80063da:	f5b5 4f00 	cmp.w	r5, #32768	@ 0x8000
 80063de:	da3e      	bge.n	800645e <R3_1_GetPhaseCurrents+0x13a>
  pStator_Currents->b = -pStator_Currents->b;
 80063e0:	fa1f fc85 	uxth.w	ip, r5
 80063e4:	f1cc 0400 	rsb	r4, ip, #0
 80063e8:	b224      	sxth	r4, r4
      wAux = -wAux - ( int32_t )pStator_Currents->b;
 80063ea:	f8d0 3090 	ldr.w	r3, [r0, #144]	@ 0x90
 80063ee:	1ad3      	subs	r3, r2, r3
 80063f0:	1b5b      	subs	r3, r3, r5
      if ( wAux > INT16_MAX )
 80063f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063f6:	da24      	bge.n	8006442 <R3_1_GetPhaseCurrents+0x11e>
      else  if ( wAux < -INT16_MAX )
 80063f8:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 80063fc:	dd3c      	ble.n	8006478 <R3_1_GetPhaseCurrents+0x154>
  pStator_Currents->a = -pStator_Currents->a;
 80063fe:	b29b      	uxth	r3, r3
 8006400:	425d      	negs	r5, r3
 8006402:	b22d      	sxth	r5, r5
 8006404:	e7bc      	b.n	8006380 <R3_1_GetPhaseCurrents+0x5c>
 8006406:	425d      	negs	r5, r3
 8006408:	b22d      	sxth	r5, r5
 800640a:	f647 74ff 	movw	r4, #32767	@ 0x7fff
 800640e:	f248 0c01 	movw	ip, #32769	@ 0x8001
 8006412:	e7b5      	b.n	8006380 <R3_1_GetPhaseCurrents+0x5c>
 8006414:	f647 74ff 	movw	r4, #32767	@ 0x7fff
 8006418:	461d      	mov	r5, r3
 800641a:	f248 0c01 	movw	ip, #32769	@ 0x8001
 800641e:	e7e4      	b.n	80063ea <R3_1_GetPhaseCurrents+0xc6>
 8006420:	f647 75ff 	movw	r5, #32767	@ 0x7fff
 8006424:	4634      	mov	r4, r6
 8006426:	f248 0301 	movw	r3, #32769	@ 0x8001
 800642a:	e7c0      	b.n	80063ae <R3_1_GetPhaseCurrents+0x8a>
      else  if ( wAux > INT16_MAX )
 800642c:	f5b4 4f00 	cmp.w	r4, #32768	@ 0x8000
        pStator_Currents->a = ( int16_t )wAux;
 8006430:	bfb4      	ite	lt
 8006432:	b223      	sxthlt	r3, r4
 8006434:	f647 73ff 	movwge	r3, #32767	@ 0x7fff
 8006438:	e793      	b.n	8006362 <R3_1_GetPhaseCurrents+0x3e>
 800643a:	4c16      	ldr	r4, [pc, #88]	@ (8006494 <R3_1_GetPhaseCurrents+0x170>)
 800643c:	f647 7cff 	movw	ip, #32767	@ 0x7fff
 8006440:	e79e      	b.n	8006380 <R3_1_GetPhaseCurrents+0x5c>
 8006442:	4d14      	ldr	r5, [pc, #80]	@ (8006494 <R3_1_GetPhaseCurrents+0x170>)
 8006444:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8006448:	e79a      	b.n	8006380 <R3_1_GetPhaseCurrents+0x5c>
 800644a:	f647 74ff 	movw	r4, #32767	@ 0x7fff
 800644e:	f248 0c01 	movw	ip, #32769	@ 0x8001
 8006452:	e795      	b.n	8006380 <R3_1_GetPhaseCurrents+0x5c>
 8006454:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8006458:	4635      	mov	r5, r6
 800645a:	461c      	mov	r4, r3
 800645c:	e7a7      	b.n	80063ae <R3_1_GetPhaseCurrents+0x8a>
 800645e:	f647 7cff 	movw	ip, #32767	@ 0x7fff
 8006462:	461c      	mov	r4, r3
 8006464:	4665      	mov	r5, ip
 8006466:	e7c0      	b.n	80063ea <R3_1_GetPhaseCurrents+0xc6>
  pStator_Currents->b = -pStator_Currents->b;
 8006468:	fa1f fc8c 	uxth.w	ip, ip
  pStator_Currents->a = -pStator_Currents->a;
 800646c:	425d      	negs	r5, r3
  pStator_Currents->b = -pStator_Currents->b;
 800646e:	f1cc 0400 	rsb	r4, ip, #0
  pStator_Currents->a = -pStator_Currents->a;
 8006472:	b22d      	sxth	r5, r5
  pStator_Currents->b = -pStator_Currents->b;
 8006474:	b224      	sxth	r4, r4
 8006476:	e783      	b.n	8006380 <R3_1_GetPhaseCurrents+0x5c>
 8006478:	f647 75ff 	movw	r5, #32767	@ 0x7fff
 800647c:	f248 0301 	movw	r3, #32769	@ 0x8001
 8006480:	e77e      	b.n	8006380 <R3_1_GetPhaseCurrents+0x5c>
  pStator_Currents->a = -pStator_Currents->a;
 8006482:	880b      	ldrh	r3, [r1, #0]
  pStator_Currents->b = -pStator_Currents->b;
 8006484:	f8b1 c002 	ldrh.w	ip, [r1, #2]
  pStator_Currents->a = -pStator_Currents->a;
 8006488:	425d      	negs	r5, r3
  pStator_Currents->b = -pStator_Currents->b;
 800648a:	f1cc 0400 	rsb	r4, ip, #0
  pStator_Currents->a = -pStator_Currents->a;
 800648e:	b22d      	sxth	r5, r5
  pStator_Currents->b = -pStator_Currents->b;
 8006490:	b224      	sxth	r4, r4
 8006492:	e775      	b.n	8006380 <R3_1_GetPhaseCurrents+0x5c>
 8006494:	ffff8001 	.word	0xffff8001

08006498 <R3_1_HFCurrentsCalibrationAB>:
  *         of phase A and B in ab_t format.
  */
__weak void R3_1_HFCurrentsCalibrationAB( PWMC_Handle_t * pHdl, ab_t * pStator_Currents )
{
  PWMC_R3_1_Handle_t * pHandle = (PWMC_R3_1_Handle_t *) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006498:	f8d0 30a0 	ldr.w	r3, [r0, #160]	@ 0xa0
{
 800649c:	b430      	push	{r4, r5}
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 800649e:	e9d3 4200 	ldrd	r4, r2, [r3]
 80064a2:	6a13      	ldr	r3, [r2, #32]
 80064a4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80064a8:	6213      	str	r3, [r2, #32]
  
  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 80064aa:	f890 309f 	ldrb.w	r3, [r0, #159]	@ 0x9f
 80064ae:	2b0f      	cmp	r3, #15
 80064b0:	d80f      	bhi.n	80064d2 <R3_1_HFCurrentsCalibrationAB+0x3a>
  {
    pHandle->PhaseAOffset += ADCx->JDR1;
 80064b2:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80064b4:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
    pHandle->PhaseBOffset += ADCx->JDR2;
 80064b8:	6c25      	ldr	r5, [r4, #64]	@ 0x40
    pHandle->PhaseAOffset += ADCx->JDR1;
 80064ba:	189c      	adds	r4, r3, r2
    pHandle->PhaseBOffset += ADCx->JDR2;
 80064bc:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
    pHandle->PolarizationCounter++;
 80064c0:	f890 309f 	ldrb.w	r3, [r0, #159]	@ 0x9f
    pHandle->PhaseBOffset += ADCx->JDR2;
 80064c4:	442a      	add	r2, r5
    pHandle->PolarizationCounter++;
 80064c6:	3301      	adds	r3, #1
    pHandle->PhaseBOffset += ADCx->JDR2;
 80064c8:	e9c0 4222 	strd	r4, r2, [r0, #136]	@ 0x88
    pHandle->PolarizationCounter++;
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	f880 309f 	strb.w	r3, [r0, #159]	@ 0x9f
  }

  /* during offset calibration no current is flowing in the phases */
  pStator_Currents->a = 0;
 80064d2:	2300      	movs	r3, #0
  pStator_Currents->b = 0;
}
 80064d4:	bc30      	pop	{r4, r5}
  pStator_Currents->a = 0;
 80064d6:	600b      	str	r3, [r1, #0]
}
 80064d8:	4770      	bx	lr
 80064da:	bf00      	nop

080064dc <R3_1_HFCurrentsCalibrationC>:
  *         of phase A and B in ab_t format.
  */
__weak void R3_1_HFCurrentsCalibrationC(PWMC_Handle_t *pHdl, ab_t* pStator_Currents)
{
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80064dc:	f8d0 30a0 	ldr.w	r3, [r0, #160]	@ 0xa0
{
 80064e0:	b410      	push	{r4}
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 80064e2:	e9d3 4200 	ldrd	r4, r2, [r3]
 80064e6:	6a13      	ldr	r3, [r2, #32]
 80064e8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80064ec:	6213      	str	r3, [r2, #32]

  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 80064ee:	f890 309f 	ldrb.w	r3, [r0, #159]	@ 0x9f
 80064f2:	2b0f      	cmp	r3, #15
 80064f4:	d80b      	bhi.n	800650e <R3_1_HFCurrentsCalibrationC+0x32>
  {
    pHandle->PhaseCOffset += ADCx->JDR2;
 80064f6:	6c24      	ldr	r4, [r4, #64]	@ 0x40
    pHandle->PolarizationCounter++;
 80064f8:	f890 309f 	ldrb.w	r3, [r0, #159]	@ 0x9f
    pHandle->PhaseCOffset += ADCx->JDR2;
 80064fc:	f8d0 2090 	ldr.w	r2, [r0, #144]	@ 0x90
    pHandle->PolarizationCounter++;
 8006500:	3301      	adds	r3, #1
    pHandle->PhaseCOffset += ADCx->JDR2;
 8006502:	4422      	add	r2, r4
    pHandle->PolarizationCounter++;
 8006504:	b2db      	uxtb	r3, r3
    pHandle->PhaseCOffset += ADCx->JDR2;
 8006506:	f8c0 2090 	str.w	r2, [r0, #144]	@ 0x90
    pHandle->PolarizationCounter++;
 800650a:	f880 309f 	strb.w	r3, [r0, #159]	@ 0x9f
  }

  /* during offset calibration no current is flowing in the phases */
  pStator_Currents->a = 0;
 800650e:	2300      	movs	r3, #0
  pStator_Currents->b = 0;
}
 8006510:	f85d 4b04 	ldr.w	r4, [sp], #4
  pStator_Currents->a = 0;
 8006514:	600b      	str	r3, [r1, #0]
}
 8006516:	4770      	bx	lr

08006518 <R3_1_SwitchOnPWM>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  */
__weak void R3_1_SwitchOnPWM(PWMC_Handle_t *pHdl)
{  
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8006518:	f8d0 30a0 	ldr.w	r3, [r0, #160]	@ 0xa0

  pHandle->_Super.TurnOnLowSidesAction = false;
  
  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
 800651c:	f8b0 209c 	ldrh.w	r2, [r0, #156]	@ 0x9c
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8006520:	685b      	ldr	r3, [r3, #4]
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
 8006522:	0851      	lsrs	r1, r2, #1
  pHandle->_Super.TurnOnLowSidesAction = false;
 8006524:	f04f 0c00 	mov.w	ip, #0
{  
 8006528:	b5f0      	push	{r4, r5, r6, r7, lr}
  pHandle->_Super.TurnOnLowSidesAction = false;
 800652a:	f880 c07e 	strb.w	ip, [r0, #126]	@ 0x7e
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
  LL_TIM_OC_SetCompareCH4(TIMx, (uint32_t)(pHandle->Half_PWMPeriod - 5u));
 800652e:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006530:	6359      	str	r1, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006532:	6399      	str	r1, [r3, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8006534:	63d9      	str	r1, [r3, #60]	@ 0x3c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006536:	f06f 0101 	mvn.w	r1, #1
  WRITE_REG(TIMx->CCR4, CompareValue);
 800653a:	641a      	str	r2, [r3, #64]	@ 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800653c:	6119      	str	r1, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800653e:	691a      	ldr	r2, [r3, #16]
 8006540:	07d2      	lsls	r2, r2, #31
 8006542:	d5fc      	bpl.n	800653e <R3_1_SwitchOnPWM+0x26>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006544:	f06f 0201 	mvn.w	r2, #1
 8006548:	611a      	str	r2, [r3, #16]
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE(TIMx);

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 800654a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800654c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006550:	645a      	str	r2, [r3, #68]	@ 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8006552:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006554:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006558:	645a      	str	r2, [r3, #68]	@ 0x44
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->_Super.LowSideOutputs ) == ES_GPIO )
 800655a:	f890 207d 	ldrb.w	r2, [r0, #125]	@ 0x7d
 800655e:	2a02      	cmp	r2, #2
 8006560:	d007      	beq.n	8006572 <R3_1_SwitchOnPWM+0x5a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006562:	f06f 0201 	mvn.w	r2, #1
 8006566:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8006568:	68da      	ldr	r2, [r3, #12]
 800656a:	f042 0201 	orr.w	r2, r2, #1
 800656e:	60da      	str	r2, [r3, #12]
  LL_TIM_ClearFlag_UPDATE( TIMx );
  /* Enable Update IRQ */
  LL_TIM_EnableIT_UPDATE( TIMx );

  return; 
}
 8006570:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0u)
 8006572:	6a1d      	ldr	r5, [r3, #32]
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 8006574:	f8d0 e03c 	ldr.w	lr, [r0, #60]	@ 0x3c
 8006578:	f8b0 4048 	ldrh.w	r4, [r0, #72]	@ 0x48
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800657c:	6c07      	ldr	r7, [r0, #64]	@ 0x40
 800657e:	f8b0 104a 	ldrh.w	r1, [r0, #74]	@ 0x4a
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8006582:	6c46      	ldr	r6, [r0, #68]	@ 0x44
 8006584:	f8b0 204c 	ldrh.w	r2, [r0, #76]	@ 0x4c
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0u)
 8006588:	f240 5c55 	movw	ip, #1365	@ 0x555
 800658c:	ea15 0f0c 	tst.w	r5, ip
 8006590:	d004      	beq.n	800659c <R3_1_SwitchOnPWM+0x84>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 8006592:	f8ce 4018 	str.w	r4, [lr, #24]
 8006596:	61b9      	str	r1, [r7, #24]
 8006598:	61b2      	str	r2, [r6, #24]
}
 800659a:	e7e2      	b.n	8006562 <R3_1_SwitchOnPWM+0x4a>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800659c:	0424      	lsls	r4, r4, #16
 800659e:	0409      	lsls	r1, r1, #16
 80065a0:	0412      	lsls	r2, r2, #16
 80065a2:	f8ce 4018 	str.w	r4, [lr, #24]
 80065a6:	61b9      	str	r1, [r7, #24]
 80065a8:	61b2      	str	r2, [r6, #24]
}
 80065aa:	e7da      	b.n	8006562 <R3_1_SwitchOnPWM+0x4a>

080065ac <R3_1_SwitchOffPWM>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  */
__weak void R3_1_SwitchOffPWM(PWMC_Handle_t *pHdl)
{
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 80065ac:	f8d0 30a0 	ldr.w	r3, [r0, #160]	@ 0xa0

  pHandle->_Super.TurnOnLowSidesAction = false;

  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs(TIMx);
  if (pHandle->_Super.BrakeActionLock == true)
 80065b0:	f890 1085 	ldrb.w	r1, [r0, #133]	@ 0x85
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 80065b4:	685a      	ldr	r2, [r3, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 80065b6:	68d3      	ldr	r3, [r2, #12]
 80065b8:	f023 0301 	bic.w	r3, r3, #1
 80065bc:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80065be:	6c53      	ldr	r3, [r2, #68]	@ 0x44
  pHandle->_Super.TurnOnLowSidesAction = false;
 80065c0:	f04f 0c00 	mov.w	ip, #0
 80065c4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80065c8:	f880 c07e 	strb.w	ip, [r0, #126]	@ 0x7e
 80065cc:	6453      	str	r3, [r2, #68]	@ 0x44
  if (pHandle->_Super.BrakeActionLock == true)
 80065ce:	b919      	cbnz	r1, 80065d8 <R3_1_SwitchOffPWM+0x2c>
  {
  }
  else
  {
    if ( ( pHandle->_Super.LowSideOutputs ) == ES_GPIO )
 80065d0:	f890 307d 	ldrb.w	r3, [r0, #125]	@ 0x7d
 80065d4:	2b02      	cmp	r3, #2
 80065d6:	d009      	beq.n	80065ec <R3_1_SwitchOffPWM+0x40>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80065d8:	f06f 0301 	mvn.w	r3, #1
 80065dc:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80065de:	6913      	ldr	r3, [r2, #16]
 80065e0:	07db      	lsls	r3, r3, #31
 80065e2:	d5fc      	bpl.n	80065de <R3_1_SwitchOffPWM+0x32>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80065e4:	f06f 0301 	mvn.w	r3, #1
 80065e8:	6113      	str	r3, [r2, #16]
 80065ea:	4770      	bx	lr
{
 80065ec:	b430      	push	{r4, r5}
    {
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 80065ee:	f8b0 4048 	ldrh.w	r4, [r0, #72]	@ 0x48
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80065f2:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 80065f4:	f8b0 104a 	ldrh.w	r1, [r0, #74]	@ 0x4a
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 80065f8:	f8b0 304c 	ldrh.w	r3, [r0, #76]	@ 0x4c
 80065fc:	0424      	lsls	r4, r4, #16
 80065fe:	61ac      	str	r4, [r5, #24]
 8006600:	e9d0 4010 	ldrd	r4, r0, [r0, #64]	@ 0x40
 8006604:	041b      	lsls	r3, r3, #16
 8006606:	0409      	lsls	r1, r1, #16
 8006608:	61a1      	str	r1, [r4, #24]
 800660a:	6183      	str	r3, [r0, #24]
 800660c:	f06f 0301 	mvn.w	r3, #1
 8006610:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8006612:	6913      	ldr	r3, [r2, #16]
 8006614:	07d9      	lsls	r1, r3, #31
 8006616:	d5fc      	bpl.n	8006612 <R3_1_SwitchOffPWM+0x66>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006618:	f06f 0301 	mvn.w	r3, #1
  while (LL_TIM_IsActiveFlag_UPDATE(TIMx) == 0)
  {}
  LL_TIM_ClearFlag_UPDATE(TIMx);

  return;
}
 800661c:	bc30      	pop	{r4, r5}
 800661e:	6113      	str	r3, [r2, #16]
 8006620:	4770      	bx	lr
 8006622:	bf00      	nop

08006624 <R3_1_RLGetPhaseCurrents>:
  */
void R3_1_RLGetPhaseCurrents(PWMC_Handle_t *pHdl,ab_t* pStator_Currents)
{

  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006624:	f8d0 20a0 	ldr.w	r2, [r0, #160]	@ 0xa0
  int32_t wAux;
  
  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);
  
  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t)((ADCx->JDR2)*2u);
 8006628:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
{
 800662c:	b410      	push	{r4}
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 800662e:	e9d2 4000 	ldrd	r4, r0, [r2]
  CLEAR_BIT(TIMx->CCER, Channels);
 8006632:	6a02      	ldr	r2, [r0, #32]
 8006634:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006638:	6202      	str	r2, [r0, #32]
  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t)((ADCx->JDR2)*2u);
 800663a:	6c20      	ldr	r0, [r4, #64]	@ 0x40
  
  /* Check saturation */
  if (wAux > -INT16_MAX)
 800663c:	4a0a      	ldr	r2, [pc, #40]	@ (8006668 <R3_1_RLGetPhaseCurrents+0x44>)
  /* First value read of Phase B*/
  wAux = -wAux;
  pStator_Currents->a = ( int16_t )( wAux );
  pStator_Currents->b = ( int16_t )( wAux );

}
 800663e:	f85d 4b04 	ldr.w	r4, [sp], #4
  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t)((ADCx->JDR2)*2u);
 8006642:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
    if (wAux < INT16_MAX)
 8006646:	f647 70ff 	movw	r0, #32767	@ 0x7fff
 800664a:	4283      	cmp	r3, r0
 800664c:	bfa8      	it	ge
 800664e:	4603      	movge	r3, r0
 8006650:	4293      	cmp	r3, r2
 8006652:	bfb8      	it	lt
 8006654:	4613      	movlt	r3, r2
  wAux = -wAux;
 8006656:	425b      	negs	r3, r3
  pStator_Currents->a = ( int16_t )( wAux );
 8006658:	b21b      	sxth	r3, r3
 800665a:	2200      	movs	r2, #0
 800665c:	f363 020f 	bfi	r2, r3, #0, #16
 8006660:	f363 421f 	bfi	r2, r3, #16, #16
 8006664:	600a      	str	r2, [r1, #0]
}
 8006666:	4770      	bx	lr
 8006668:	ffff8001 	.word	0xffff8001

0800666c <R3_1_RLSwitchOnPWM>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  */
void R3_1_RLSwitchOnPWM(PWMC_Handle_t *pHdl)
{
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 800666c:	f8d0 20a0 	ldr.w	r2, [r0, #160]	@ 0xa0
{
 8006670:	b5f0      	push	{r4, r5, r6, r7, lr}
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
  
  pHandle->_Super.TurnOnLowSidesAction = false;
 8006672:	2400      	movs	r4, #0
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 8006674:	e9d2 1300 	ldrd	r1, r3, [r2]
  pHandle->_Super.TurnOnLowSidesAction = false;
 8006678:	f880 407e 	strb.w	r4, [r0, #126]	@ 0x7e
  /* The following while cycles ensure the identification of the nergative counting mode of TIM1
   * for correct modification of Repetition Counter value of TIM1.*/

  /* Wait the change of Counter Direction of TIM1 from Down-Direction to Up-Direction*/

  while ( ( TIMx->CR1 & DIR_MASK ) == DIR_MASK )
 800667c:	681a      	ldr	r2, [r3, #0]
 800667e:	06d5      	lsls	r5, r2, #27
 8006680:	d4fc      	bmi.n	800667c <R3_1_RLSwitchOnPWM+0x10>
  {
  }
  /* Wait the change of Counter Direction of TIM1 from Up-Direction to Down-Direction*/
  while ( ( TIMx->CR1 & DIR_MASK ) == 0u )
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	06d4      	lsls	r4, r2, #27
 8006686:	d5fc      	bpl.n	8006682 <R3_1_RLSwitchOnPWM+0x16>
  /* Set channel 1 Compare/Capture register to 1 */
  LL_TIM_OC_SetCompareCH1(TIMx, 1u);

  /* Set channel 4 Compare/Capture register to trig ADC in the middle 
     of the PWM period */
  LL_TIM_OC_SetCompareCH4(TIMx,(( uint32_t )( pHandle->Half_PWMPeriod ) - 5u));
 8006688:	f8b0 209c 	ldrh.w	r2, [r0, #156]	@ 0x9c
  WRITE_REG(TIMx->CCR1, CompareValue);
 800668c:	2401      	movs	r4, #1
 800668e:	3a05      	subs	r2, #5
 8006690:	635c      	str	r4, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR4, CompareValue);
 8006692:	641a      	str	r2, [r3, #64]	@ 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006694:	f06f 0201 	mvn.w	r2, #1
 8006698:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800669a:	691a      	ldr	r2, [r3, #16]
 800669c:	07d2      	lsls	r2, r2, #31
 800669e:	d5fc      	bpl.n	800669a <R3_1_RLSwitchOnPWM+0x2e>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80066a0:	f06f 0201 	mvn.w	r2, #1
 80066a4:	611a      	str	r2, [r3, #16]
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
  {}
  LL_TIM_ClearFlag_UPDATE( TIMx );
  
  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 80066a6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80066a8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80066ac:	645a      	str	r2, [r3, #68]	@ 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80066ae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80066b0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80066b4:	645a      	str	r2, [r3, #68]	@ 0x44
  LL_TIM_EnableAllOutputs(TIMx);

  if ( ( pHandle->_Super.LowSideOutputs ) == ES_GPIO )
 80066b6:	f890 207d 	ldrb.w	r2, [r0, #125]	@ 0x7d
 80066ba:	2a02      	cmp	r2, #2
 80066bc:	d119      	bne.n	80066f2 <R3_1_RLSwitchOnPWM+0x86>
  {
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0u)
 80066be:	6a1e      	ldr	r6, [r3, #32]
    {
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 80066c0:	f8b0 204c 	ldrh.w	r2, [r0, #76]	@ 0x4c
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 80066c4:	f8b0 5048 	ldrh.w	r5, [r0, #72]	@ 0x48
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 80066c8:	f8b0 404a 	ldrh.w	r4, [r0, #74]	@ 0x4a
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 80066cc:	f8d0 e03c 	ldr.w	lr, [r0, #60]	@ 0x3c
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 80066d0:	6c07      	ldr	r7, [r0, #64]	@ 0x40
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 80066d2:	6c40      	ldr	r0, [r0, #68]	@ 0x44
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0u)
 80066d4:	f240 5c55 	movw	ip, #1365	@ 0x555
 80066d8:	ea16 0f0c 	tst.w	r6, ip
 80066dc:	ea4f 4202 	mov.w	r2, r2, lsl #16
 80066e0:	bf05      	ittet	eq
 80066e2:	042d      	lsleq	r5, r5, #16
 80066e4:	0424      	lsleq	r4, r4, #16
  WRITE_REG(GPIOx->BSRR, PinMask);
 80066e6:	f8ce 5018 	strne.w	r5, [lr, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80066ea:	f8ce 5018 	streq.w	r5, [lr, #24]
 80066ee:	61bc      	str	r4, [r7, #24]
 80066f0:	6182      	str	r2, [r0, #24]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80066f2:	f06f 0201 	mvn.w	r2, #1
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 80066f6:	f06f 0004 	mvn.w	r0, #4
 80066fa:	6008      	str	r0, [r1, #0]
 80066fc:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80066fe:	68da      	ldr	r2, [r3, #12]
 8006700:	f042 0201 	orr.w	r2, r2, #1
 8006704:	60da      	str	r2, [r3, #12]

  /* enable TIMx update interrupt*/
  LL_TIM_EnableIT_UPDATE( TIMx );

  return; 
}
 8006706:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006708 <R3_1_TurnOnLowSides>:
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8006708:	f8d0 20a0 	ldr.w	r2, [r0, #160]	@ 0xa0
 800670c:	6852      	ldr	r2, [r2, #4]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800670e:	2300      	movs	r3, #0
  pHandle->_Super.TurnOnLowSidesAction = true;
 8006710:	f04f 0c01 	mov.w	ip, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006714:	f06f 0101 	mvn.w	r1, #1
 8006718:	f880 c07e 	strb.w	ip, [r0, #126]	@ 0x7e
 800671c:	6111      	str	r1, [r2, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800671e:	6353      	str	r3, [r2, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006720:	6393      	str	r3, [r2, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8006722:	63d3      	str	r3, [r2, #60]	@ 0x3c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8006724:	6913      	ldr	r3, [r2, #16]
 8006726:	07db      	lsls	r3, r3, #31
 8006728:	d5fc      	bpl.n	8006724 <R3_1_TurnOnLowSides+0x1c>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800672a:	f06f 0301 	mvn.w	r3, #1
 800672e:	6113      	str	r3, [r2, #16]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8006730:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 8006732:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006736:	6453      	str	r3, [r2, #68]	@ 0x44
  if ((pHandle->_Super.LowSideOutputs)== ES_GPIO)
 8006738:	f890 307d 	ldrb.w	r3, [r0, #125]	@ 0x7d
 800673c:	2b02      	cmp	r3, #2
 800673e:	d000      	beq.n	8006742 <R3_1_TurnOnLowSides+0x3a>
 8006740:	4770      	bx	lr
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 8006742:	e9d0 210f 	ldrd	r2, r1, [r0, #60]	@ 0x3c
{
 8006746:	b410      	push	{r4}
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8006748:	6c43      	ldr	r3, [r0, #68]	@ 0x44
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 800674a:	f8b0 4048 	ldrh.w	r4, [r0, #72]	@ 0x48
  WRITE_REG(GPIOx->BSRR, PinMask);
 800674e:	6194      	str	r4, [r2, #24]
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 8006750:	f8b0 404a 	ldrh.w	r4, [r0, #74]	@ 0x4a
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8006754:	f8b0 204c 	ldrh.w	r2, [r0, #76]	@ 0x4c
 8006758:	618c      	str	r4, [r1, #24]
}
 800675a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800675e:	619a      	str	r2, [r3, #24]
 8006760:	4770      	bx	lr
 8006762:	bf00      	nop

08006764 <R3_1_RLTurnOnLowSides>:
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8006764:	f8d0 20a0 	ldr.w	r2, [r0, #160]	@ 0xa0
 8006768:	6852      	ldr	r2, [r2, #4]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800676a:	2100      	movs	r1, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800676c:	f06f 0301 	mvn.w	r3, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006770:	6351      	str	r1, [r2, #52]	@ 0x34
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006772:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8006774:	6913      	ldr	r3, [r2, #16]
 8006776:	07db      	lsls	r3, r3, #31
 8006778:	d5fc      	bpl.n	8006774 <R3_1_RLTurnOnLowSides+0x10>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800677a:	f06f 0301 	mvn.w	r3, #1
 800677e:	6113      	str	r3, [r2, #16]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8006780:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 8006782:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006786:	6453      	str	r3, [r2, #68]	@ 0x44
  if ( ( pHandle->_Super.LowSideOutputs ) == ES_GPIO )
 8006788:	f890 307d 	ldrb.w	r3, [r0, #125]	@ 0x7d
 800678c:	2b02      	cmp	r3, #2
 800678e:	d000      	beq.n	8006792 <R3_1_RLTurnOnLowSides+0x2e>
 8006790:	4770      	bx	lr
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 8006792:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
    LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 8006794:	f8b0 204a 	ldrh.w	r2, [r0, #74]	@ 0x4a
    LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8006798:	f8b0 304c 	ldrh.w	r3, [r0, #76]	@ 0x4c
{  
 800679c:	b410      	push	{r4}
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 800679e:	f8b0 4048 	ldrh.w	r4, [r0, #72]	@ 0x48
 80067a2:	618c      	str	r4, [r1, #24]
    LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 80067a4:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80067a8:	0412      	lsls	r2, r2, #16
 80067aa:	041b      	lsls	r3, r3, #16
 80067ac:	61a2      	str	r2, [r4, #24]
}
 80067ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80067b2:	618b      	str	r3, [r1, #24]
 80067b4:	4770      	bx	lr
 80067b6:	bf00      	nop

080067b8 <R3_1_Init>:
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 80067b8:	f8d0 20a0 	ldr.w	r2, [r0, #160]	@ 0xa0
  ADC_TypeDef* ADCx  = pHandle->pParams_str->ADCx;
 80067bc:	6813      	ldr	r3, [r2, #0]
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 80067be:	6852      	ldr	r2, [r2, #4]
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 80067c0:	6859      	ldr	r1, [r3, #4]
{
 80067c2:	b430      	push	{r4, r5}
 80067c4:	f021 0120 	bic.w	r1, r1, #32
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 80067c8:	f06f 0402 	mvn.w	r4, #2
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 80067cc:	6059      	str	r1, [r3, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 80067ce:	601c      	str	r4, [r3, #0]
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 80067d0:	6859      	ldr	r1, [r3, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 80067d2:	f06f 0404 	mvn.w	r4, #4
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 80067d6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80067da:	6059      	str	r1, [r3, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 80067dc:	601c      	str	r4, [r3, #0]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 80067de:	6811      	ldr	r1, [r2, #0]
    if ( TIMx == TIM1 )
 80067e0:	4c1e      	ldr	r4, [pc, #120]	@ (800685c <R3_1_Init+0xa4>)
 80067e2:	f021 0101 	bic.w	r1, r1, #1
 80067e6:	42a2      	cmp	r2, r4
 80067e8:	6011      	str	r1, [r2, #0]
 80067ea:	d031      	beq.n	8006850 <R3_1_Init+0x98>
    else if ( TIMx == TIM8 )
 80067ec:	491c      	ldr	r1, [pc, #112]	@ (8006860 <R3_1_Init+0xa8>)
 80067ee:	428a      	cmp	r2, r1
 80067f0:	d028      	beq.n	8006844 <R3_1_Init+0x8c>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 80067f2:	f06f 0180 	mvn.w	r1, #128	@ 0x80
 80067f6:	6111      	str	r1, [r2, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 80067f8:	68d1      	ldr	r1, [r2, #12]
 80067fa:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 80067fe:	60d1      	str	r1, [r2, #12]
  SET_BIT(TIMx->CCER, Channels);
 8006800:	6a11      	ldr	r1, [r2, #32]
 8006802:	f441 61aa 	orr.w	r1, r1, #1360	@ 0x550
 8006806:	f041 0105 	orr.w	r1, r1, #5
 800680a:	6211      	str	r1, [r2, #32]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 800680c:	689a      	ldr	r2, [r3, #8]
 800680e:	f042 0201 	orr.w	r2, r2, #1
 8006812:	609a      	str	r2, [r3, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8006814:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8006816:	f06f 0504 	mvn.w	r5, #4
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 800681a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800681e:	62da      	str	r2, [r3, #44]	@ 0x2c
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8006820:	601d      	str	r5, [r3, #0]
  SET_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8006822:	685a      	ldr	r2, [r3, #4]
 8006824:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006828:	605a      	str	r2, [r3, #4]
  MODIFY_REG(ADCx->JSQR, ADC_JSQR_JL, SequencerNbRanks);
 800682a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
    pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 800682c:	f44f 1480 	mov.w	r4, #1048576	@ 0x100000
    pHandle->_Super.DTTest = 0u;
 8006830:	2100      	movs	r1, #0
 8006832:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
    pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 8006836:	f8c0 4098 	str.w	r4, [r0, #152]	@ 0x98
 800683a:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800683c:	bc30      	pop	{r4, r5}
    pHandle->_Super.DTTest = 0u;
 800683e:	f8a0 1070 	strh.w	r1, [r0, #112]	@ 0x70
}
 8006842:	4770      	bx	lr
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 8006844:	4c07      	ldr	r4, [pc, #28]	@ (8006864 <R3_1_Init+0xac>)
 8006846:	68e1      	ldr	r1, [r4, #12]
 8006848:	f041 0102 	orr.w	r1, r1, #2
 800684c:	60e1      	str	r1, [r4, #12]
}
 800684e:	e7d0      	b.n	80067f2 <R3_1_Init+0x3a>
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 8006850:	4c04      	ldr	r4, [pc, #16]	@ (8006864 <R3_1_Init+0xac>)
 8006852:	68e1      	ldr	r1, [r4, #12]
 8006854:	f041 0101 	orr.w	r1, r1, #1
 8006858:	60e1      	str	r1, [r4, #12]
}
 800685a:	e7ca      	b.n	80067f2 <R3_1_Init+0x3a>
 800685c:	40010000 	.word	0x40010000
 8006860:	40010400 	.word	0x40010400
 8006864:	e0042000 	.word	0xe0042000

08006868 <R3_1_SetOffsetCalib>:
{
 8006868:	b410      	push	{r4}
  pHandle->PhaseAOffset = offsets->phaseAOffset;
 800686a:	e9d1 4201 	ldrd	r4, r2, [r1, #4]
 800686e:	680b      	ldr	r3, [r1, #0]
 8006870:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  pHdl->offsetCalibStatus = true;
 8006874:	2301      	movs	r3, #1
  pHandle->PhaseAOffset = offsets->phaseAOffset;
 8006876:	e9c0 4223 	strd	r4, r2, [r0, #140]	@ 0x8c
  pHdl->offsetCalibStatus = true;
 800687a:	f880 3081 	strb.w	r3, [r0, #129]	@ 0x81
}
 800687e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006882:	4770      	bx	lr

08006884 <R3_1_GetOffsetCalib>:
  offsets->phaseAOffset = pHandle->PhaseAOffset;
 8006884:	e9d0 2323 	ldrd	r2, r3, [r0, #140]	@ 0x8c
 8006888:	f8d0 0088 	ldr.w	r0, [r0, #136]	@ 0x88
 800688c:	608b      	str	r3, [r1, #8]
 800688e:	e9c1 0200 	strd	r0, r2, [r1]
}
 8006892:	4770      	bx	lr

08006894 <R3_1_CurrentReadingCalibration>:
{
 8006894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8006898:	f8d0 30a0 	ldr.w	r3, [r0, #160]	@ 0xa0
  if (false == pHandle->_Super.offsetCalibStatus)
 800689c:	f890 6081 	ldrb.w	r6, [r0, #129]	@ 0x81
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 80068a0:	685c      	ldr	r4, [r3, #4]
{
 80068a2:	b082      	sub	sp, #8
 80068a4:	4605      	mov	r5, r0
  if (false == pHandle->_Super.offsetCalibStatus)
 80068a6:	b35e      	cbz	r6, 8006900 <R3_1_CurrentReadingCalibration+0x6c>
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80068a8:	69a2      	ldr	r2, [r4, #24]
  LL_TIM_OC_SetCompareCH1 (TIMx,pHandle->Half_PWMPeriod);
 80068aa:	f8b5 309c 	ldrh.w	r3, [r5, #156]	@ 0x9c
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80068ae:	f022 0208 	bic.w	r2, r2, #8
 80068b2:	61a2      	str	r2, [r4, #24]
 80068b4:	69a2      	ldr	r2, [r4, #24]
 80068b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80068ba:	61a2      	str	r2, [r4, #24]
 80068bc:	69e2      	ldr	r2, [r4, #28]
 80068be:	f022 0208 	bic.w	r2, r2, #8
 80068c2:	61e2      	str	r2, [r4, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80068c4:	6363      	str	r3, [r4, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 80068c6:	63a3      	str	r3, [r4, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80068c8:	63e3      	str	r3, [r4, #60]	@ 0x3c
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80068ca:	69a3      	ldr	r3, [r4, #24]
 80068cc:	f043 0308 	orr.w	r3, r3, #8
 80068d0:	61a3      	str	r3, [r4, #24]
 80068d2:	69a3      	ldr	r3, [r4, #24]
 80068d4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80068d8:	61a3      	str	r3, [r4, #24]
 80068da:	69e3      	ldr	r3, [r4, #28]
 80068dc:	f043 0308 	orr.w	r3, r3, #8
 80068e0:	61e3      	str	r3, [r4, #28]
  SET_BIT(TIMx->CCER, Channels);
 80068e2:	6a23      	ldr	r3, [r4, #32]
 80068e4:	f443 63aa 	orr.w	r3, r3, #1360	@ 0x550
  pHandle->_Super.Sector = SECTOR_5;
 80068e8:	2104      	movs	r1, #4
  pHandle->_Super.BrakeActionLock = false;
 80068ea:	2200      	movs	r2, #0
 80068ec:	f043 0305 	orr.w	r3, r3, #5
 80068f0:	6223      	str	r3, [r4, #32]
  pHandle->_Super.Sector = SECTOR_5;
 80068f2:	f885 107c 	strb.w	r1, [r5, #124]	@ 0x7c
  pHandle->_Super.BrakeActionLock = false;
 80068f6:	f885 2085 	strb.w	r2, [r5, #133]	@ 0x85
}
 80068fa:	b002      	add	sp, #8
 80068fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    GetPhaseCurrCbSave = pHandle->_Super.pFctGetPhaseCurrents;
 8006900:	6803      	ldr	r3, [r0, #0]
 8006902:	9300      	str	r3, [sp, #0]
    pHandle->PhaseAOffset = 0u;
 8006904:	e9c0 6622 	strd	r6, r6, [r0, #136]	@ 0x88
    SetSampPointSectXCbSave = pHandle->_Super.pFctSetADCSampPointSectX;
 8006908:	6943      	ldr	r3, [r0, #20]
 800690a:	9301      	str	r3, [sp, #4]
    pHandle->PolarizationCounter = 0u;
 800690c:	f880 609f 	strb.w	r6, [r0, #159]	@ 0x9f
  CLEAR_BIT(TIMx->CCER, Channels);
 8006910:	6a23      	ldr	r3, [r4, #32]
    pHandle->PhaseCOffset = 0u;
 8006912:	f8c0 6090 	str.w	r6, [r0, #144]	@ 0x90
 8006916:	f423 63aa 	bic.w	r3, r3, #1360	@ 0x550
 800691a:	f023 0305 	bic.w	r3, r3, #5
 800691e:	6223      	str	r3, [r4, #32]
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsCalibrationAB;
 8006920:	4b23      	ldr	r3, [pc, #140]	@ (80069b0 <R3_1_CurrentReadingCalibration+0x11c>)
 8006922:	6003      	str	r3, [r0, #0]
    pHandle->_Super.pFctSetADCSampPointSectX = &R3_1_SetADCSampPointCalibration;
 8006924:	4b23      	ldr	r3, [pc, #140]	@ (80069b4 <R3_1_CurrentReadingCalibration+0x120>)
 8006926:	6143      	str	r3, [r0, #20]
    pHandle->CalibSector = SECTOR_5;
 8006928:	2304      	movs	r3, #4
 800692a:	f880 309e 	strb.w	r3, [r0, #158]	@ 0x9e
    pHandle->_Super.Sector = SECTOR_5;
 800692e:	f880 307c 	strb.w	r3, [r0, #124]	@ 0x7c
    R3_1_SwitchOnPWM( &pHandle->_Super );
 8006932:	f7ff fdf1 	bl	8006518 <R3_1_SwitchOnPWM>
                            pHandle->pParams_str->RepetitionCounter,
 8006936:	f8d5 30a0 	ldr.w	r3, [r5, #160]	@ 0xa0
    waitForPolarizationEnd( TIMx,
 800693a:	f105 0756 	add.w	r7, r5, #86	@ 0x56
 800693e:	f105 089f 	add.w	r8, r5, #159	@ 0x9f
 8006942:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 8006946:	4639      	mov	r1, r7
 8006948:	4643      	mov	r3, r8
 800694a:	4620      	mov	r0, r4
 800694c:	f7ff fccc 	bl	80062e8 <waitForPolarizationEnd>
    R3_1_SwitchOffPWM( &pHandle->_Super );
 8006950:	4628      	mov	r0, r5
 8006952:	f7ff fe2b 	bl	80065ac <R3_1_SwitchOffPWM>
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsCalibrationC;
 8006956:	4b18      	ldr	r3, [pc, #96]	@ (80069b8 <R3_1_CurrentReadingCalibration+0x124>)
 8006958:	602b      	str	r3, [r5, #0]
    R3_1_SwitchOnPWM( &pHandle->_Super );
 800695a:	4628      	mov	r0, r5
    pHandle->PolarizationCounter = 0u;
 800695c:	f885 609f 	strb.w	r6, [r5, #159]	@ 0x9f
    pHandle->CalibSector = SECTOR_1;
 8006960:	f885 609e 	strb.w	r6, [r5, #158]	@ 0x9e
    pHandle->_Super.Sector = SECTOR_1;
 8006964:	f885 607c 	strb.w	r6, [r5, #124]	@ 0x7c
    R3_1_SwitchOnPWM( &pHandle->_Super );
 8006968:	f7ff fdd6 	bl	8006518 <R3_1_SwitchOnPWM>
                            pHandle->pParams_str->RepetitionCounter,
 800696c:	f8d5 20a0 	ldr.w	r2, [r5, #160]	@ 0xa0
    waitForPolarizationEnd( TIMx,
 8006970:	4643      	mov	r3, r8
 8006972:	f892 202a 	ldrb.w	r2, [r2, #42]	@ 0x2a
 8006976:	4639      	mov	r1, r7
 8006978:	4620      	mov	r0, r4
 800697a:	f7ff fcb5 	bl	80062e8 <waitForPolarizationEnd>
    R3_1_SwitchOffPWM( &pHandle->_Super );
 800697e:	4628      	mov	r0, r5
 8006980:	f7ff fe14 	bl	80065ac <R3_1_SwitchOffPWM>
    pHandle->PhaseBOffset >>= 3;
 8006984:	e9d5 1222 	ldrd	r1, r2, [r5, #136]	@ 0x88
    pHandle->PhaseCOffset >>= 3;
 8006988:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
    pHandle->PhaseBOffset >>= 3;
 800698c:	08d2      	lsrs	r2, r2, #3
    pHandle->PhaseAOffset >>= 3;
 800698e:	08c9      	lsrs	r1, r1, #3
    pHandle->PhaseBOffset >>= 3;
 8006990:	e9c5 1222 	strd	r1, r2, [r5, #136]	@ 0x88
    if (0U == pHandle->_Super.SWerror)
 8006994:	f8b5 2056 	ldrh.w	r2, [r5, #86]	@ 0x56
    pHandle->PhaseCOffset >>= 3;
 8006998:	08db      	lsrs	r3, r3, #3
 800699a:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
    if (0U == pHandle->_Super.SWerror)
 800699e:	b912      	cbnz	r2, 80069a6 <R3_1_CurrentReadingCalibration+0x112>
      pHandle->_Super.offsetCalibStatus = true;
 80069a0:	2301      	movs	r3, #1
 80069a2:	f885 3081 	strb.w	r3, [r5, #129]	@ 0x81
    pHandle->_Super.pFctGetPhaseCurrents = GetPhaseCurrCbSave;
 80069a6:	9a00      	ldr	r2, [sp, #0]
    pHandle->_Super.pFctSetADCSampPointSectX = SetSampPointSectXCbSave;
 80069a8:	9b01      	ldr	r3, [sp, #4]
    pHandle->_Super.pFctGetPhaseCurrents = GetPhaseCurrCbSave;
 80069aa:	602a      	str	r2, [r5, #0]
    pHandle->_Super.pFctSetADCSampPointSectX = SetSampPointSectXCbSave;
 80069ac:	616b      	str	r3, [r5, #20]
 80069ae:	e77b      	b.n	80068a8 <R3_1_CurrentReadingCalibration+0x14>
 80069b0:	08006499 	.word	0x08006499
 80069b4:	080069f5 	.word	0x080069f5
 80069b8:	080064dd 	.word	0x080064dd

080069bc <R3_1_WriteTIMRegisters>:
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 80069bc:	f8d0 20a0 	ldr.w	r2, [r0, #160]	@ 0xa0
{
 80069c0:	4603      	mov	r3, r0
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 80069c2:	6852      	ldr	r2, [r2, #4]
{
 80069c4:	b410      	push	{r4}
  LL_TIM_OC_SetCompareCH1 (TIMx,pHandle->_Super.CntPhA);
 80069c6:	f8b0 4050 	ldrh.w	r4, [r0, #80]	@ 0x50
  LL_TIM_OC_SetCompareCH2 (TIMx,pHandle->_Super.CntPhB);
 80069ca:	f8b0 0052 	ldrh.w	r0, [r0, #82]	@ 0x52
  WRITE_REG(TIMx->CCR1, CompareValue);
 80069ce:	6354      	str	r4, [r2, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 80069d0:	6390      	str	r0, [r2, #56]	@ 0x38
  LL_TIM_OC_SetCompareCH3 (TIMx,pHandle->_Super.CntPhC);
 80069d2:	f8b3 4054 	ldrh.w	r4, [r3, #84]	@ 0x54
  if ( pHandle->_Super.SWerror == 1u )
 80069d6:	f8b3 0056 	ldrh.w	r0, [r3, #86]	@ 0x56
  WRITE_REG(TIMx->CCR3, CompareValue);
 80069da:	63d4      	str	r4, [r2, #60]	@ 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 80069dc:	6411      	str	r1, [r2, #64]	@ 0x40
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 80069de:	6a12      	ldr	r2, [r2, #32]
}
 80069e0:	f85d 4b04 	ldr.w	r4, [sp], #4
  if ( pHandle->_Super.SWerror == 1u )
 80069e4:	2801      	cmp	r0, #1
    pHandle->_Super.SWerror = 0u;
 80069e6:	bf0a      	itet	eq
 80069e8:	2200      	moveq	r2, #0
 80069ea:	f3c2 3000 	ubfxne	r0, r2, #12, #1
 80069ee:	f8a3 2056 	strheq.w	r2, [r3, #86]	@ 0x56
}
 80069f2:	4770      	bx	lr

080069f4 <R3_1_SetADCSampPointCalibration>:
{
 80069f4:	b510      	push	{r4, lr}
  return R3_1_WriteTIMRegisters(&pHandle->_Super, (uint16_t)(pHandle->Half_PWMPeriod) - 1u);
 80069f6:	f8b0 109c 	ldrh.w	r1, [r0, #156]	@ 0x9c
  pHandle->_Super.Sector = pHandle->CalibSector;
 80069fa:	f890 209e 	ldrb.w	r2, [r0, #158]	@ 0x9e
 80069fe:	f880 207c 	strb.w	r2, [r0, #124]	@ 0x7c
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 8006a02:	f44f 1480 	mov.w	r4, #1048576	@ 0x100000
  return R3_1_WriteTIMRegisters(&pHandle->_Super, (uint16_t)(pHandle->Half_PWMPeriod) - 1u);
 8006a06:	3901      	subs	r1, #1
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 8006a08:	f8c0 4098 	str.w	r4, [r0, #152]	@ 0x98
  return R3_1_WriteTIMRegisters(&pHandle->_Super, (uint16_t)(pHandle->Half_PWMPeriod) - 1u);
 8006a0c:	b289      	uxth	r1, r1
 8006a0e:	f7ff ffd5 	bl	80069bc <R3_1_WriteTIMRegisters>
}
 8006a12:	bd10      	pop	{r4, pc}

08006a14 <R3_1_SetADCSampPointSectX>:
{
 8006a14:	b510      	push	{r4, lr}
  register uint16_t lowDuty = pHdl->lowDuty;
 8006a16:	f8b0 2058 	ldrh.w	r2, [r0, #88]	@ 0x58
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) > pHandle->pParams_str->hTafter )
 8006a1a:	f8b0 e09c 	ldrh.w	lr, [r0, #156]	@ 0x9c
 8006a1e:	f8d0 40a0 	ldr.w	r4, [r0, #160]	@ 0xa0
  register uint16_t midDuty = pHdl->midDuty;
 8006a22:	f8b0 c05a 	ldrh.w	ip, [r0, #90]	@ 0x5a
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) > pHandle->pParams_str->hTafter )
 8006a26:	8c21      	ldrh	r1, [r4, #32]
 8006a28:	ebae 0302 	sub.w	r3, lr, r2
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	428b      	cmp	r3, r1
 8006a30:	d908      	bls.n	8006a44 <R3_1_SetADCSampPointSectX+0x30>
    pHandle->_Super.Sector = SECTOR_5;
 8006a32:	2304      	movs	r3, #4
    hCntSmp = ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u;
 8006a34:	f10e 31ff 	add.w	r1, lr, #4294967295
    pHandle->_Super.Sector = SECTOR_5;
 8006a38:	f880 307c 	strb.w	r3, [r0, #124]	@ 0x7c
    hCntSmp = ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u;
 8006a3c:	b289      	uxth	r1, r1
  return R3_1_WriteTIMRegisters( &pHandle->_Super, hCntSmp);
 8006a3e:	f7ff ffbd 	bl	80069bc <R3_1_WriteTIMRegisters>
}
 8006a42:	bd10      	pop	{r4, pc}
    hDeltaDuty = ( uint16_t )( lowDuty - midDuty );
 8006a44:	eba2 0c0c 	sub.w	ip, r2, ip
    if ( hDeltaDuty > ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) * 2u )
 8006a48:	fa1f fc8c 	uxth.w	ip, ip
 8006a4c:	ebbc 0f43 	cmp.w	ip, r3, lsl #1
 8006a50:	d905      	bls.n	8006a5e <R3_1_SetADCSampPointSectX+0x4a>
      hCntSmp = lowDuty - pHandle->pParams_str->hTbefore;
 8006a52:	8c63      	ldrh	r3, [r4, #34]	@ 0x22
 8006a54:	1ad2      	subs	r2, r2, r3
 8006a56:	b291      	uxth	r1, r2
  return R3_1_WriteTIMRegisters( &pHandle->_Super, hCntSmp);
 8006a58:	f7ff ffb0 	bl	80069bc <R3_1_WriteTIMRegisters>
}
 8006a5c:	bd10      	pop	{r4, pc}
      hCntSmp = lowDuty + pHandle->pParams_str->hTafter;
 8006a5e:	4411      	add	r1, r2
 8006a60:	b289      	uxth	r1, r1
      if ( hCntSmp >= pHandle->Half_PWMPeriod )
 8006a62:	458e      	cmp	lr, r1
 8006a64:	d8eb      	bhi.n	8006a3e <R3_1_SetADCSampPointSectX+0x2a>
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 8006a66:	43c9      	mvns	r1, r1
        pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_FALLING;
 8006a68:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 8006a6c:	eb01 014e 	add.w	r1, r1, lr, lsl #1
        pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_FALLING;
 8006a70:	f8c0 3098 	str.w	r3, [r0, #152]	@ 0x98
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 8006a74:	b289      	uxth	r1, r1
  return R3_1_WriteTIMRegisters( &pHandle->_Super, hCntSmp);
 8006a76:	f7ff ffa1 	bl	80069bc <R3_1_WriteTIMRegisters>
}
 8006a7a:	bd10      	pop	{r4, pc}

08006a7c <R3_1_TIMx_UP_IRQHandler>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006a7c:	f8d0 10a0 	ldr.w	r1, [r0, #160]	@ 0xa0
{
 8006a80:	b410      	push	{r4}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006a82:	e9d1 2400 	ldrd	r2, r4, [r1]
{
 8006a86:	4603      	mov	r3, r0
  CLEAR_BIT(ADCx->CR2, ADC_CR2_JEXTEN);
 8006a88:	6890      	ldr	r0, [r2, #8]
 8006a8a:	f420 1040 	bic.w	r0, r0, #3145728	@ 0x300000
 8006a8e:	6090      	str	r0, [r2, #8]
  ADCx->JSQR = pHandle->pParams_str->ADCConfig[pHandle->_Super.Sector];
 8006a90:	f893 007c 	ldrb.w	r0, [r3, #124]	@ 0x7c
 8006a94:	3002      	adds	r0, #2
 8006a96:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8006a9a:	6391      	str	r1, [r2, #56]	@ 0x38
  SET_BIT(TIMx->CCER, Channels);
 8006a9c:	6a21      	ldr	r1, [r4, #32]
  SET_BIT(ADCx->CR2, ExternalTriggerEdge);
 8006a9e:	f8d3 0098 	ldr.w	r0, [r3, #152]	@ 0x98
 8006aa2:	f441 5180 	orr.w	r1, r1, #4096	@ 0x1000
 8006aa6:	6221      	str	r1, [r4, #32]
 8006aa8:	6891      	ldr	r1, [r2, #8]
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 8006aaa:	f44f 1480 	mov.w	r4, #1048576	@ 0x100000
 8006aae:	4301      	orrs	r1, r0
 8006ab0:	6091      	str	r1, [r2, #8]
}
 8006ab2:	f103 007a 	add.w	r0, r3, #122	@ 0x7a
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 8006ab6:	f8c3 4098 	str.w	r4, [r3, #152]	@ 0x98
}
 8006aba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006abe:	4770      	bx	lr

08006ac0 <R3_1_RLDetectionModeEnable>:
  if (pHandle->_Super.RLDetectionMode == false)
 8006ac0:	f890 1080 	ldrb.w	r1, [r0, #128]	@ 0x80
{
 8006ac4:	b410      	push	{r4}
  if (pHandle->_Super.RLDetectionMode == false)
 8006ac6:	2900      	cmp	r1, #0
 8006ac8:	d135      	bne.n	8006b36 <R3_1_RLDetectionModeEnable+0x76>
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8006aca:	f8d0 30a0 	ldr.w	r3, [r0, #160]	@ 0xa0
 8006ace:	685b      	ldr	r3, [r3, #4]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8006ad0:	699a      	ldr	r2, [r3, #24]
 8006ad2:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 8006ad6:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8006ada:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8006adc:	6a1a      	ldr	r2, [r3, #32]
 8006ade:	f042 0201 	orr.w	r2, r2, #1
 8006ae2:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8006ae4:	6a1a      	ldr	r2, [r3, #32]
 8006ae6:	f022 0204 	bic.w	r2, r2, #4
 8006aea:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006aec:	6359      	str	r1, [r3, #52]	@ 0x34
    if ((pHandle->_Super.LowSideOutputs)== LS_PWM_TIMER)
 8006aee:	f890 207d 	ldrb.w	r2, [r0, #125]	@ 0x7d
 8006af2:	2a01      	cmp	r2, #1
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8006af4:	f103 0418 	add.w	r4, r3, #24
 8006af8:	d02b      	beq.n	8006b52 <R3_1_RLDetectionModeEnable+0x92>
    else if ((pHandle->_Super.LowSideOutputs)== ES_GPIO)
 8006afa:	2a02      	cmp	r2, #2
 8006afc:	d10d      	bne.n	8006b1a <R3_1_RLDetectionModeEnable+0x5a>
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8006afe:	699a      	ldr	r2, [r3, #24]
 8006b00:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
 8006b04:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006b08:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8006b0a:	6a1a      	ldr	r2, [r3, #32]
 8006b0c:	f042 0210 	orr.w	r2, r2, #16
 8006b10:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8006b12:	6a1a      	ldr	r2, [r3, #32]
 8006b14:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006b18:	621a      	str	r2, [r3, #32]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8006b1a:	6862      	ldr	r2, [r4, #4]
 8006b1c:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 8006b20:	f042 0270 	orr.w	r2, r2, #112	@ 0x70
 8006b24:	6062      	str	r2, [r4, #4]
  CLEAR_BIT(TIMx->CCER, Channels);
 8006b26:	6a1a      	ldr	r2, [r3, #32]
 8006b28:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006b2c:	621a      	str	r2, [r3, #32]
 8006b2e:	6a1a      	ldr	r2, [r3, #32]
 8006b30:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b34:	621a      	str	r2, [r3, #32]
  pHandle->_Super.pFctTurnOnLowSides = &R3_1_RLTurnOnLowSides;
 8006b36:	4b0e      	ldr	r3, [pc, #56]	@ (8006b70 <R3_1_RLDetectionModeEnable+0xb0>)
  pHandle->_Super.pFctSwitchOnPwm = &R3_1_RLSwitchOnPWM;
 8006b38:	490e      	ldr	r1, [pc, #56]	@ (8006b74 <R3_1_RLDetectionModeEnable+0xb4>)
  pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 8006b3a:	4a0f      	ldr	r2, [pc, #60]	@ (8006b78 <R3_1_RLDetectionModeEnable+0xb8>)
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_RLGetPhaseCurrents;
 8006b3c:	4c0f      	ldr	r4, [pc, #60]	@ (8006b7c <R3_1_RLDetectionModeEnable+0xbc>)
  pHandle->_Super.pFctTurnOnLowSides = &R3_1_RLTurnOnLowSides;
 8006b3e:	6103      	str	r3, [r0, #16]
  pHandle->_Super.RLDetectionMode = true;
 8006b40:	2301      	movs	r3, #1
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_RLGetPhaseCurrents;
 8006b42:	6004      	str	r4, [r0, #0]
  pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 8006b44:	e9c0 2101 	strd	r2, r1, [r0, #4]
}
 8006b48:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->_Super.RLDetectionMode = true;
 8006b4c:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
}
 8006b50:	4770      	bx	lr
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8006b52:	699a      	ldr	r2, [r3, #24]
 8006b54:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
 8006b58:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006b5c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(TIMx->CCER, Channels);
 8006b5e:	6a1a      	ldr	r2, [r3, #32]
 8006b60:	f022 0210 	bic.w	r2, r2, #16
 8006b64:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CCER, Channels);
 8006b66:	6a1a      	ldr	r2, [r3, #32]
 8006b68:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006b6c:	621a      	str	r2, [r3, #32]
}
 8006b6e:	e7d4      	b.n	8006b1a <R3_1_RLDetectionModeEnable+0x5a>
 8006b70:	08006765 	.word	0x08006765
 8006b74:	0800666d 	.word	0x0800666d
 8006b78:	080065ad 	.word	0x080065ad
 8006b7c:	08006625 	.word	0x08006625

08006b80 <R3_1_RLDetectionModeDisable>:
  if (pHandle->_Super.RLDetectionMode == true)
 8006b80:	f890 3080 	ldrb.w	r3, [r0, #128]	@ 0x80
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d04a      	beq.n	8006c1e <R3_1_RLDetectionModeDisable+0x9e>
{
 8006b88:	b410      	push	{r4}
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8006b8a:	f8d0 10a0 	ldr.w	r1, [r0, #160]	@ 0xa0
 8006b8e:	684b      	ldr	r3, [r1, #4]
    while ((TIMx->CR1 & DIR_MASK) == 0u)
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	06d4      	lsls	r4, r2, #27
 8006b94:	d5fc      	bpl.n	8006b90 <R3_1_RLDetectionModeDisable+0x10>
    while ((TIMx->CR1 & DIR_MASK) == DIR_MASK)
 8006b96:	681a      	ldr	r2, [r3, #0]
 8006b98:	06d2      	lsls	r2, r2, #27
 8006b9a:	d4fc      	bmi.n	8006b96 <R3_1_RLDetectionModeDisable+0x16>
    TIMx->RCR = pHandle->pParams_str->RepetitionCounter;
 8006b9c:	f891 202a 	ldrb.w	r2, [r1, #42]	@ 0x2a
 8006ba0:	631a      	str	r2, [r3, #48]	@ 0x30
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8006ba2:	699a      	ldr	r2, [r3, #24]
    LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod) >> 1);
 8006ba4:	f8b0 c09c 	ldrh.w	ip, [r0, #156]	@ 0x9c
 8006ba8:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 8006bac:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8006bb0:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8006bb2:	6a1c      	ldr	r4, [r3, #32]
 8006bb4:	f044 0401 	orr.w	r4, r4, #1
 8006bb8:	621c      	str	r4, [r3, #32]
    if ((pHandle->_Super.LowSideOutputs)== LS_PWM_TIMER)
 8006bba:	f890 407d 	ldrb.w	r4, [r0, #125]	@ 0x7d
 8006bbe:	2c01      	cmp	r4, #1
    LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod) >> 1);
 8006bc0:	ea4f 025c 	mov.w	r2, ip, lsr #1
    if ((pHandle->_Super.LowSideOutputs)== LS_PWM_TIMER)
 8006bc4:	d02c      	beq.n	8006c20 <R3_1_RLDetectionModeDisable+0xa0>
    else if ((pHandle->_Super.LowSideOutputs)== ES_GPIO)
 8006bc6:	2c02      	cmp	r4, #2
 8006bc8:	d04d      	beq.n	8006c66 <R3_1_RLDetectionModeDisable+0xe6>
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006bca:	635a      	str	r2, [r3, #52]	@ 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8006bcc:	699c      	ldr	r4, [r3, #24]
 8006bce:	f424 44e6 	bic.w	r4, r4, #29440	@ 0x7300
 8006bd2:	f444 44c0 	orr.w	r4, r4, #24576	@ 0x6000
 8006bd6:	619c      	str	r4, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8006bd8:	6a1c      	ldr	r4, [r3, #32]
 8006bda:	f044 0410 	orr.w	r4, r4, #16
 8006bde:	621c      	str	r4, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006be0:	639a      	str	r2, [r3, #56]	@ 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8006be2:	69dc      	ldr	r4, [r3, #28]
 8006be4:	f024 0473 	bic.w	r4, r4, #115	@ 0x73
 8006be8:	f044 0460 	orr.w	r4, r4, #96	@ 0x60
 8006bec:	61dc      	str	r4, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8006bee:	6a1c      	ldr	r4, [r3, #32]
 8006bf0:	f444 7480 	orr.w	r4, r4, #256	@ 0x100
 8006bf4:	621c      	str	r4, [r3, #32]
    LL_ADC_INJ_SetSequencerDiscont(pHandle->pParams_str->ADCx,
 8006bf6:	6809      	ldr	r1, [r1, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8006bf8:	63da      	str	r2, [r3, #60]	@ 0x3c
  MODIFY_REG(ADCx->CR1, ADC_CR1_JDISCEN, SeqDiscont);
 8006bfa:	684b      	ldr	r3, [r1, #4]
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_GetPhaseCurrents;
 8006bfc:	4a2b      	ldr	r2, [pc, #172]	@ (8006cac <R3_1_RLDetectionModeDisable+0x12c>)
    pHandle->_Super.pFctTurnOnLowSides = &R3_1_TurnOnLowSides;
 8006bfe:	4c2c      	ldr	r4, [pc, #176]	@ (8006cb0 <R3_1_RLDetectionModeDisable+0x130>)
 8006c00:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006c04:	604b      	str	r3, [r1, #4]
    pHandle->_Super.pFctSwitchOnPwm = &R3_1_SwitchOnPWM;
 8006c06:	492b      	ldr	r1, [pc, #172]	@ (8006cb4 <R3_1_RLDetectionModeDisable+0x134>)
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_GetPhaseCurrents;
 8006c08:	6002      	str	r2, [r0, #0]
    pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 8006c0a:	4a2b      	ldr	r2, [pc, #172]	@ (8006cb8 <R3_1_RLDetectionModeDisable+0x138>)
    pHandle->_Super.pFctTurnOnLowSides = &R3_1_TurnOnLowSides;
 8006c0c:	6104      	str	r4, [r0, #16]
    pHandle->_Super.RLDetectionMode = false;
 8006c0e:	2300      	movs	r3, #0
    pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 8006c10:	e9c0 2101 	strd	r2, r1, [r0, #4]
}
 8006c14:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->_Super.RLDetectionMode = false;
 8006c18:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
}
 8006c1c:	4770      	bx	lr
 8006c1e:	4770      	bx	lr
  SET_BIT(TIMx->CCER, Channels);
 8006c20:	6a1c      	ldr	r4, [r3, #32]
 8006c22:	f044 0404 	orr.w	r4, r4, #4
 8006c26:	621c      	str	r4, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006c28:	635a      	str	r2, [r3, #52]	@ 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8006c2a:	699c      	ldr	r4, [r3, #24]
 8006c2c:	f424 44e6 	bic.w	r4, r4, #29440	@ 0x7300
 8006c30:	f444 44c0 	orr.w	r4, r4, #24576	@ 0x6000
 8006c34:	619c      	str	r4, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8006c36:	6a1c      	ldr	r4, [r3, #32]
 8006c38:	f044 0410 	orr.w	r4, r4, #16
 8006c3c:	621c      	str	r4, [r3, #32]
 8006c3e:	6a1c      	ldr	r4, [r3, #32]
 8006c40:	f044 0440 	orr.w	r4, r4, #64	@ 0x40
 8006c44:	621c      	str	r4, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006c46:	639a      	str	r2, [r3, #56]	@ 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8006c48:	69dc      	ldr	r4, [r3, #28]
 8006c4a:	f024 0473 	bic.w	r4, r4, #115	@ 0x73
 8006c4e:	f044 0460 	orr.w	r4, r4, #96	@ 0x60
 8006c52:	61dc      	str	r4, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8006c54:	6a1c      	ldr	r4, [r3, #32]
 8006c56:	f444 7480 	orr.w	r4, r4, #256	@ 0x100
 8006c5a:	621c      	str	r4, [r3, #32]
 8006c5c:	6a1c      	ldr	r4, [r3, #32]
 8006c5e:	f444 6480 	orr.w	r4, r4, #1024	@ 0x400
 8006c62:	621c      	str	r4, [r3, #32]
}
 8006c64:	e7c7      	b.n	8006bf6 <R3_1_RLDetectionModeDisable+0x76>
  CLEAR_BIT(TIMx->CCER, Channels);
 8006c66:	6a1c      	ldr	r4, [r3, #32]
 8006c68:	f024 0404 	bic.w	r4, r4, #4
 8006c6c:	621c      	str	r4, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006c6e:	635a      	str	r2, [r3, #52]	@ 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8006c70:	699c      	ldr	r4, [r3, #24]
 8006c72:	f424 44e6 	bic.w	r4, r4, #29440	@ 0x7300
 8006c76:	f444 44c0 	orr.w	r4, r4, #24576	@ 0x6000
 8006c7a:	619c      	str	r4, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8006c7c:	6a1c      	ldr	r4, [r3, #32]
 8006c7e:	f044 0410 	orr.w	r4, r4, #16
 8006c82:	621c      	str	r4, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8006c84:	6a1c      	ldr	r4, [r3, #32]
 8006c86:	f024 0440 	bic.w	r4, r4, #64	@ 0x40
 8006c8a:	621c      	str	r4, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006c8c:	639a      	str	r2, [r3, #56]	@ 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8006c8e:	69dc      	ldr	r4, [r3, #28]
 8006c90:	f024 0473 	bic.w	r4, r4, #115	@ 0x73
 8006c94:	f044 0460 	orr.w	r4, r4, #96	@ 0x60
 8006c98:	61dc      	str	r4, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8006c9a:	6a1c      	ldr	r4, [r3, #32]
 8006c9c:	f444 7480 	orr.w	r4, r4, #256	@ 0x100
 8006ca0:	621c      	str	r4, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8006ca2:	6a1c      	ldr	r4, [r3, #32]
 8006ca4:	f424 6480 	bic.w	r4, r4, #1024	@ 0x400
 8006ca8:	621c      	str	r4, [r3, #32]
}
 8006caa:	e7a4      	b.n	8006bf6 <R3_1_RLDetectionModeDisable+0x76>
 8006cac:	08006325 	.word	0x08006325
 8006cb0:	08006709 	.word	0x08006709
 8006cb4:	08006519 	.word	0x08006519
 8006cb8:	080065ad 	.word	0x080065ad

08006cbc <R3_1_RLDetectionModeSetDuty>:
{
 8006cbc:	4603      	mov	r3, r0
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006cbe:	f8d0 00a0 	ldr.w	r0, [r0, #160]	@ 0xa0
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8006cc2:	f8b3 209c 	ldrh.w	r2, [r3, #156]	@ 0x9c
{
 8006cc6:	b410      	push	{r4}
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8006cc8:	fb02 f101 	mul.w	r1, r2, r1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006ccc:	6844      	ldr	r4, [r0, #4]
  if (pHandle->_Super.SWerror == 1u)
 8006cce:	f8b3 0056 	ldrh.w	r0, [r3, #86]	@ 0x56
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8006cd2:	0c09      	lsrs	r1, r1, #16
  pHandle->_Super.Sector = SECTOR_4;
 8006cd4:	2203      	movs	r2, #3
 8006cd6:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
  pHandle->_Super.CntPhA = ( uint16_t )( val );
 8006cda:	f8a3 1050 	strh.w	r1, [r3, #80]	@ 0x50
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006cde:	6361      	str	r1, [r4, #52]	@ 0x34
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 8006ce0:	6a22      	ldr	r2, [r4, #32]
}
 8006ce2:	f85d 4b04 	ldr.w	r4, [sp], #4
  if (pHandle->_Super.SWerror == 1u)
 8006ce6:	2801      	cmp	r0, #1
    pHandle->_Super.SWerror = 0u;
 8006ce8:	bf0a      	itet	eq
 8006cea:	2200      	moveq	r2, #0
 8006cec:	f3c2 3000 	ubfxne	r0, r2, #12, #1
 8006cf0:	f8a3 2056 	strheq.w	r2, [r3, #86]	@ 0x56
}
 8006cf4:	4770      	bx	lr
 8006cf6:	bf00      	nop

08006cf8 <R3_1_RLTurnOnLowSidesAndStart>:
 * @param  pHdl: Handler of the current instance of the PWM component.
 */
void R3_1_RLTurnOnLowSidesAndStart( PWMC_Handle_t * pHdl )
{
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006cf8:	f8d0 20a0 	ldr.w	r2, [r0, #160]	@ 0xa0
{
 8006cfc:	b430      	push	{r4, r5}
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 8006cfe:	e9d2 4300 	ldrd	r4, r3, [r2]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006d02:	f06f 0101 	mvn.w	r1, #1
 8006d06:	6119      	str	r1, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8006d08:	691a      	ldr	r2, [r3, #16]
 8006d0a:	07d1      	lsls	r1, r2, #31
 8006d0c:	d5fc      	bpl.n	8006d08 <R3_1_RLTurnOnLowSidesAndStart+0x10>

  LL_TIM_OC_SetCompareCH1 ( TIMx, 0x0u );
  LL_TIM_OC_SetCompareCH2 ( TIMx, 0x0u );
  LL_TIM_OC_SetCompareCH3 ( TIMx, 0x0u );

  LL_TIM_OC_SetCompareCH4( TIMx, ( pHandle->Half_PWMPeriod - 5u));
 8006d0e:	f8b0 209c 	ldrh.w	r2, [r0, #156]	@ 0x9c
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006d12:	2100      	movs	r1, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006d14:	f06f 0501 	mvn.w	r5, #1
 8006d18:	3a05      	subs	r2, #5
 8006d1a:	611d      	str	r5, [r3, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006d1c:	6359      	str	r1, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006d1e:	6399      	str	r1, [r3, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8006d20:	63d9      	str	r1, [r3, #60]	@ 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 8006d22:	641a      	str	r2, [r3, #64]	@ 0x40
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8006d24:	691a      	ldr	r2, [r3, #16]
 8006d26:	07d2      	lsls	r2, r2, #31
 8006d28:	d5fc      	bpl.n	8006d24 <R3_1_RLTurnOnLowSidesAndStart+0x2c>

  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
  {}

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE ;
 8006d2a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006d2c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006d30:	645a      	str	r2, [r3, #68]	@ 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8006d32:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006d34:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006d38:	645a      	str	r2, [r3, #68]	@ 0x44
  LL_TIM_EnableAllOutputs ( TIMx );

  if ( ( pHandle->_Super.LowSideOutputs ) == ES_GPIO )
 8006d3a:	f890 307d 	ldrb.w	r3, [r0, #125]	@ 0x7d
 8006d3e:	2b02      	cmp	r3, #2
 8006d40:	d10b      	bne.n	8006d5a <R3_1_RLTurnOnLowSidesAndStart+0x62>
  {
      /* It is executed during calibration phase the EN signal shall stay off */
      LL_GPIO_SetOutputPin( pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin );
      LL_GPIO_SetOutputPin( pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin );
 8006d42:	e9d0 210f 	ldrd	r2, r1, [r0, #60]	@ 0x3c
      LL_GPIO_SetOutputPin( pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin );
 8006d46:	f8b0 5048 	ldrh.w	r5, [r0, #72]	@ 0x48
      LL_GPIO_SetOutputPin( pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin );
 8006d4a:	6c43      	ldr	r3, [r0, #68]	@ 0x44
  WRITE_REG(GPIOx->BSRR, PinMask);
 8006d4c:	6195      	str	r5, [r2, #24]
      LL_GPIO_SetOutputPin( pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin );
 8006d4e:	f8b0 504a 	ldrh.w	r5, [r0, #74]	@ 0x4a
      LL_GPIO_SetOutputPin( pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin );
 8006d52:	f8b0 204c 	ldrh.w	r2, [r0, #76]	@ 0x4c
 8006d56:	618d      	str	r5, [r1, #24]
 8006d58:	619a      	str	r2, [r3, #24]
  SET_BIT(ADCx->CR2, ExternalTriggerEdge);
 8006d5a:	68a3      	ldr	r3, [r4, #8]
 8006d5c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006d60:	60a3      	str	r3, [r4, #8]

//  ADCx->JSQR = pHandle->wADC_JSQR_phAB;
  LL_ADC_INJ_StartConversionExtTrig(ADCx,LL_ADC_INJ_TRIG_EXT_RISING);

  return;
}
 8006d62:	bc30      	pop	{r4, r5}
 8006d64:	4770      	bx	lr
 8006d66:	bf00      	nop

08006d68 <RVBS_Clear>:
  {
#endif
    uint16_t aux;
    uint16_t index;

    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 8006d68:	f8b0 c00c 	ldrh.w	ip, [r0, #12]
 8006d6c:	8a42      	ldrh	r2, [r0, #18]
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8006d6e:	8943      	ldrh	r3, [r0, #10]
    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 8006d70:	4494      	add	ip, r2
 8006d72:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
{
 8006d76:	b430      	push	{r4, r5}
 8006d78:	2500      	movs	r5, #0
 8006d7a:	f36c 050f 	bfi	r5, ip, #0, #16
 8006d7e:	f36c 451f 	bfi	r5, ip, #16, #16
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8006d82:	b14b      	cbz	r3, 8006d98 <RVBS_Clear+0x30>
    {
      pHandle->aBuffer[index] = aux;
 8006d84:	6944      	ldr	r4, [r0, #20]
 8006d86:	2300      	movs	r3, #0
 8006d88:	b29a      	uxth	r2, r3
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8006d8a:	3301      	adds	r3, #1
      pHandle->aBuffer[index] = aux;
 8006d8c:	f824 c012 	strh.w	ip, [r4, r2, lsl #1]
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8006d90:	8941      	ldrh	r1, [r0, #10]
 8006d92:	b29a      	uxth	r2, r3
 8006d94:	4291      	cmp	r1, r2
 8006d96:	d8f7      	bhi.n	8006d88 <RVBS_Clear+0x20>
    }
    pHandle->_Super.LatestConv = aux;
    pHandle->_Super.AvBusVoltage_d = aux;
    pHandle->index = 0U;
 8006d98:	2300      	movs	r3, #0
    pHandle->_Super.LatestConv = aux;
 8006d9a:	6045      	str	r5, [r0, #4]
    pHandle->index = 0U;
 8006d9c:	7643      	strb	r3, [r0, #25]
#ifdef NULL_PTR_CHECK_RDIV_BUS_VLT_SNS
  }
#endif
}
 8006d9e:	bc30      	pop	{r4, r5}
 8006da0:	4770      	bx	lr
 8006da2:	bf00      	nop

08006da4 <RVBS_Init>:
{
 8006da4:	b508      	push	{r3, lr}
    RVBS_Clear(pHandle);
 8006da6:	f7ff ffdf 	bl	8006d68 <RVBS_Clear>
}
 8006daa:	bd08      	pop	{r3, pc}

08006dac <RVBS_CheckFaultState>:
  }
  else
  {
#endif
	/* If both thresholds are equal, single threshold feature is used */
	if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 8006dac:	8982      	ldrh	r2, [r0, #12]
 8006dae:	89c1      	ldrh	r1, [r0, #14]
	{
      if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 8006db0:	88c3      	ldrh	r3, [r0, #6]
	if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 8006db2:	428a      	cmp	r2, r1
 8006db4:	d010      	beq.n	8006dd8 <RVBS_CheckFaultState+0x2c>
      }
	}
    else
    {
      /* If both thresholds are different, hysteresis feature is used (Brake mode) */
      if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 8006db6:	f8b0 c012 	ldrh.w	ip, [r0, #18]
 8006dba:	459c      	cmp	ip, r3
 8006dbc:	d80a      	bhi.n	8006dd4 <RVBS_CheckFaultState+0x28>
{
 8006dbe:	b410      	push	{r4}
      {
        fault = MC_UNDER_VOLT;
      }
      else if ( false == pHandle->OverVoltageHysteresisUpDir )
 8006dc0:	7c04      	ldrb	r4, [r0, #16]
 8006dc2:	b994      	cbnz	r4, 8006dea <RVBS_CheckFaultState+0x3e>
      {
        if (pHandle->_Super.AvBusVoltage_d < pHandle->OverVoltageThresholdLow)
 8006dc4:	4299      	cmp	r1, r3
 8006dc6:	d914      	bls.n	8006df2 <RVBS_CheckFaultState+0x46>
        {
          pHandle->OverVoltageHysteresisUpDir = true;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	7403      	strb	r3, [r0, #16]
        {
          pHandle->OverVoltageHysteresisUpDir = false;
          fault = MC_OVER_VOLT;
        }
        else{
          fault = MC_NO_ERROR;
 8006dcc:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_RDIV_BUS_VLT_SNS
  }
#endif
  return (fault);
}
 8006dce:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006dd2:	4770      	bx	lr
        fault = MC_UNDER_VOLT;
 8006dd4:	2004      	movs	r0, #4
 8006dd6:	4770      	bx	lr
      if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d30c      	bcc.n	8006df6 <RVBS_CheckFaultState+0x4a>
      else if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 8006ddc:	8a40      	ldrh	r0, [r0, #18]
 8006dde:	4298      	cmp	r0, r3
 8006de0:	bf94      	ite	ls
 8006de2:	2000      	movls	r0, #0
 8006de4:	2001      	movhi	r0, #1
 8006de6:	0080      	lsls	r0, r0, #2
 8006de8:	4770      	bx	lr
        if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d2ee      	bcs.n	8006dcc <RVBS_CheckFaultState+0x20>
          pHandle->OverVoltageHysteresisUpDir = false;
 8006dee:	2300      	movs	r3, #0
 8006df0:	7403      	strb	r3, [r0, #16]
          fault = MC_OVER_VOLT;
 8006df2:	2002      	movs	r0, #2
 8006df4:	e7eb      	b.n	8006dce <RVBS_CheckFaultState+0x22>
 8006df6:	2002      	movs	r0, #2
}
 8006df8:	4770      	bx	lr
 8006dfa:	bf00      	nop

08006dfc <RVBS_CalcAvVbus>:
{
 8006dfc:	b538      	push	{r3, r4, r5, lr}
    if (0xFFFFU == hAux)
 8006dfe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006e02:	4299      	cmp	r1, r3
{
 8006e04:	4604      	mov	r4, r0
    if (0xFFFFU == hAux)
 8006e06:	d021      	beq.n	8006e4c <RVBS_CalcAvVbus+0x50>
      pHandle->aBuffer[pHandle->index] = hAux;
 8006e08:	6943      	ldr	r3, [r0, #20]
 8006e0a:	7e45      	ldrb	r5, [r0, #25]
 8006e0c:	f823 1015 	strh.w	r1, [r3, r5, lsl #1]
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 8006e10:	f8b0 e00a 	ldrh.w	lr, [r0, #10]
 8006e14:	f01e 02ff 	ands.w	r2, lr, #255	@ 0xff
 8006e18:	d00d      	beq.n	8006e36 <RVBS_CalcAvVbus+0x3a>
 8006e1a:	3a01      	subs	r2, #1
 8006e1c:	b2d2      	uxtb	r2, r2
 8006e1e:	eb03 0042 	add.w	r0, r3, r2, lsl #1
 8006e22:	3b02      	subs	r3, #2
      wtemp = 0u;
 8006e24:	2200      	movs	r2, #0
        wtemp += pHandle->aBuffer[i];
 8006e26:	f833 cf02 	ldrh.w	ip, [r3, #2]!
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 8006e2a:	4298      	cmp	r0, r3
        wtemp += pHandle->aBuffer[i];
 8006e2c:	4462      	add	r2, ip
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 8006e2e:	d1fa      	bne.n	8006e26 <RVBS_CalcAvVbus+0x2a>
      wtemp /= pHandle->LowPassFilterBW;
 8006e30:	fbb2 f2fe 	udiv	r2, r2, lr
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 8006e34:	b292      	uxth	r2, r2
      if ((uint16_t)pHandle->index < (pHandle->LowPassFilterBW - 1U))
 8006e36:	f10e 3eff 	add.w	lr, lr, #4294967295
 8006e3a:	4575      	cmp	r5, lr
        pHandle->index++;
 8006e3c:	bf34      	ite	cc
 8006e3e:	3501      	addcc	r5, #1
        pHandle->index = 0U;
 8006e40:	2300      	movcs	r3, #0
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 8006e42:	80e2      	strh	r2, [r4, #6]
      pHandle->_Super.LatestConv = hAux;
 8006e44:	80a1      	strh	r1, [r4, #4]
        pHandle->index++;
 8006e46:	bf34      	ite	cc
 8006e48:	7665      	strbcc	r5, [r4, #25]
        pHandle->index = 0U;
 8006e4a:	7663      	strbcs	r3, [r4, #25]
    pHandle->_Super.FaultState = RVBS_CheckFaultState(pHandle);
 8006e4c:	4620      	mov	r0, r4
 8006e4e:	f7ff ffad 	bl	8006dac <RVBS_CheckFaultState>
 8006e52:	8120      	strh	r0, [r4, #8]
}
 8006e54:	bd38      	pop	{r3, r4, r5, pc}
 8006e56:	bf00      	nop

08006e58 <REMNG_Init>:
  }
  else
  {
#endif
    pHandle->Ext = 0;
    pHandle->TargetFinal = 0;
 8006e58:	2300      	movs	r3, #0
    pHandle->RampRemainingStep = 0U;
    pHandle->IncDecAmount = 0;
    pHandle->ScalingFactor = 1U;
 8006e5a:	2201      	movs	r2, #1
    pHandle->TargetFinal = 0;
 8006e5c:	e9c0 3301 	strd	r3, r3, [r0, #4]
    pHandle->IncDecAmount = 0;
 8006e60:	e9c0 3303 	strd	r3, r3, [r0, #12]
    pHandle->ScalingFactor = 1U;
 8006e64:	6142      	str	r2, [r0, #20]
#ifdef NULL_PTR_CHECK_RMP_EXT_MNG
  }
#endif
}
 8006e66:	4770      	bx	lr

08006e68 <REMNG_Calc>:
  else
  {
#endif
    int32_t current_ref;

    current_ref = pHandle->Ext;
 8006e68:	e9d0 2102 	ldrd	r2, r1, [r0, #8]

    /* Update the variable and terminates the ramp if needed */
    if (pHandle->RampRemainingStep > 1U)
 8006e6c:	2901      	cmp	r1, #1
{
 8006e6e:	b410      	push	{r4}
 8006e70:	4603      	mov	r3, r0
      pHandle->RampRemainingStep --;
    }
    else if (1U == pHandle->RampRemainingStep)
    {
      /* Set the backup value of TargetFinal */
      current_ref = pHandle->TargetFinal * ((int32_t)pHandle->ScalingFactor);
 8006e72:	6944      	ldr	r4, [r0, #20]
    if (pHandle->RampRemainingStep > 1U)
 8006e74:	d909      	bls.n	8006e8a <REMNG_Calc+0x22>
      current_ref += pHandle->IncDecAmount;
 8006e76:	6900      	ldr	r0, [r0, #16]
      pHandle->RampRemainingStep --;
 8006e78:	3901      	subs	r1, #1
      current_ref += pHandle->IncDecAmount;
 8006e7a:	4402      	add	r2, r0
      pHandle->RampRemainingStep --;
 8006e7c:	60d9      	str	r1, [r3, #12]
    {
      /* Do nothing */
    }

    pHandle->Ext = current_ref;
    ret_val = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 8006e7e:	fb92 f0f4 	sdiv	r0, r2, r4
    pHandle->Ext = current_ref;
 8006e82:	609a      	str	r2, [r3, #8]
#ifdef NULL_PTR_CHECK_RMP_EXT_MNG
  }
#endif
  return (ret_val);
}
 8006e84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e88:	4770      	bx	lr
    else if (1U == pHandle->RampRemainingStep)
 8006e8a:	d005      	beq.n	8006e98 <REMNG_Calc+0x30>
    ret_val = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 8006e8c:	fb92 f0f4 	sdiv	r0, r2, r4
}
 8006e90:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->Ext = current_ref;
 8006e94:	609a      	str	r2, [r3, #8]
}
 8006e96:	4770      	bx	lr
      current_ref = pHandle->TargetFinal * ((int32_t)pHandle->ScalingFactor);
 8006e98:	6840      	ldr	r0, [r0, #4]
 8006e9a:	fb04 f200 	mul.w	r2, r4, r0
      pHandle->RampRemainingStep = 0U;
 8006e9e:	2100      	movs	r1, #0
}
 8006ea0:	f85d 4b04 	ldr.w	r4, [sp], #4
      pHandle->RampRemainingStep = 0U;
 8006ea4:	60d9      	str	r1, [r3, #12]
    pHandle->Ext = current_ref;
 8006ea6:	609a      	str	r2, [r3, #8]
}
 8006ea8:	4770      	bx	lr
 8006eaa:	bf00      	nop

08006eac <REMNG_RampCompleted>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (0U == pHandle->RampRemainingStep)
 8006eac:	68c0      	ldr	r0, [r0, #12]
#ifdef NULL_PTR_CHECK_RMP_EXT_MNG
  }
#endif
  return (retVal);

}
 8006eae:	fab0 f080 	clz	r0, r0
 8006eb2:	0940      	lsrs	r0, r0, #5
 8006eb4:	4770      	bx	lr
 8006eb6:	bf00      	nop

08006eb8 <getScalingFactor>:
  int32_t aux;
  uint8_t i;

  if (Target < 0)
  {
    aux = -Target;
 8006eb8:	2800      	cmp	r0, #0
 8006eba:	bfb8      	it	lt
 8006ebc:	4240      	neglt	r0, r0
    TargetAbs = (uint32_t)Target;
  }
  for (i = 1U; i < 32U; i++)
  {
    uint32_t limit = (((uint32_t)1) << (31U - i));
    if (TargetAbs >= limit)
 8006ebe:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8006ec2:	d213      	bcs.n	8006eec <getScalingFactor+0x34>
 8006ec4:	2302      	movs	r3, #2
    uint32_t limit = (((uint32_t)1) << (31U - i));
 8006ec6:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8006eca:	e001      	b.n	8006ed0 <getScalingFactor+0x18>
  for (i = 1U; i < 32U; i++)
 8006ecc:	2b20      	cmp	r3, #32
 8006ece:	d00a      	beq.n	8006ee6 <getScalingFactor+0x2e>
    uint32_t limit = (((uint32_t)1) << (31U - i));
 8006ed0:	fa2c f203 	lsr.w	r2, ip, r3
    if (TargetAbs >= limit)
 8006ed4:	4290      	cmp	r0, r2
 8006ed6:	4619      	mov	r1, r3
 8006ed8:	f103 0301 	add.w	r3, r3, #1
 8006edc:	d3f6      	bcc.n	8006ecc <getScalingFactor+0x14>
    else
    {
      /* Nothing to do */
    }
  }
  return (((uint32_t)1) << (i - 1U));
 8006ede:	3901      	subs	r1, #1
 8006ee0:	2001      	movs	r0, #1
 8006ee2:	4088      	lsls	r0, r1
 8006ee4:	4770      	bx	lr
 8006ee6:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8006eea:	4770      	bx	lr
    if (TargetAbs >= limit)
 8006eec:	2001      	movs	r0, #1
}
 8006eee:	4770      	bx	lr

08006ef0 <REMNG_ExecRamp>:
{
 8006ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ef4:	4604      	mov	r4, r0
 8006ef6:	460e      	mov	r6, r1
    current_ref = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 8006ef8:	6880      	ldr	r0, [r0, #8]
 8006efa:	6963      	ldr	r3, [r4, #20]
    if (0U == Durationms)
 8006efc:	4615      	mov	r5, r2
 8006efe:	b962      	cbnz	r2, 8006f1a <REMNG_ExecRamp+0x2a>
      pHandle->ScalingFactor = getScalingFactor(TargetFinal);
 8006f00:	4608      	mov	r0, r1
 8006f02:	f7ff ffd9 	bl	8006eb8 <getScalingFactor>
      pHandle->Ext = TargetFinal * ((int32_t)pHandle->ScalingFactor);
 8006f06:	fb00 f606 	mul.w	r6, r0, r6
      pHandle->ScalingFactor = getScalingFactor(TargetFinal);
 8006f0a:	6160      	str	r0, [r4, #20]
      pHandle->Ext = TargetFinal * ((int32_t)pHandle->ScalingFactor);
 8006f0c:	4628      	mov	r0, r5
      pHandle->IncDecAmount = 0;
 8006f0e:	e9c4 5003 	strd	r5, r0, [r4, #12]
      pHandle->Ext = TargetFinal * ((int32_t)pHandle->ScalingFactor);
 8006f12:	60a6      	str	r6, [r4, #8]
}
 8006f14:	2001      	movs	r0, #1
 8006f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    current_ref = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 8006f1a:	fb90 f8f3 	sdiv	r8, r0, r3
      uint32_t wScalingFactor = getScalingFactor(TargetFinal - current_ref);
 8006f1e:	eba1 0708 	sub.w	r7, r1, r8
 8006f22:	4638      	mov	r0, r7
 8006f24:	f7ff ffc8 	bl	8006eb8 <getScalingFactor>
 8006f28:	4682      	mov	sl, r0
      uint32_t wScalingFactor2 = getScalingFactor(current_ref);
 8006f2a:	4640      	mov	r0, r8
 8006f2c:	f7ff ffc4 	bl	8006eb8 <getScalingFactor>
 8006f30:	4681      	mov	r9, r0
      uint32_t wScalingFactor3 = getScalingFactor(TargetFinal);
 8006f32:	4630      	mov	r0, r6
 8006f34:	f7ff ffc0 	bl	8006eb8 <getScalingFactor>
      if (wScalingFactor <  wScalingFactor2)
 8006f38:	45ca      	cmp	sl, r9
 8006f3a:	d318      	bcc.n	8006f6e <REMNG_ExecRamp+0x7e>
        if (wScalingFactor2 < wScalingFactor3)
 8006f3c:	4548      	cmp	r0, r9
 8006f3e:	bf28      	it	cs
 8006f40:	4648      	movcs	r0, r9
      pHandle->Ext = current_ref * ((int32_t)pHandle->ScalingFactor);
 8006f42:	fb08 f300 	mul.w	r3, r8, r0
 8006f46:	60a3      	str	r3, [r4, #8]
      aux = Durationms * ((uint32_t)pHandle->FrequencyHz); /* Check for overflow and use prescaler */
 8006f48:	6823      	ldr	r3, [r4, #0]
      aux /= 1000U;
 8006f4a:	4a0b      	ldr	r2, [pc, #44]	@ (8006f78 <REMNG_ExecRamp+0x88>)
      pHandle->ScalingFactor = wScalingFactorMin;
 8006f4c:	6160      	str	r0, [r4, #20]
      aux = Durationms * ((uint32_t)pHandle->FrequencyHz); /* Check for overflow and use prescaler */
 8006f4e:	fb05 f303 	mul.w	r3, r5, r3
      aux /= 1000U;
 8006f52:	fba2 2303 	umull	r2, r3, r2, r3
 8006f56:	099b      	lsrs	r3, r3, #6
      pHandle->RampRemainingStep++;
 8006f58:	1c5d      	adds	r5, r3, #1
      aux1 = (TargetFinal - current_ref) * ((int32_t)pHandle->ScalingFactor);
 8006f5a:	fb07 f000 	mul.w	r0, r7, r0
      pHandle->TargetFinal = TargetFinal;
 8006f5e:	6066      	str	r6, [r4, #4]
      aux1 /= ((int32_t)pHandle->RampRemainingStep);
 8006f60:	fb90 f0f5 	sdiv	r0, r0, r5
      pHandle->IncDecAmount = 0;
 8006f64:	e9c4 5003 	strd	r5, r0, [r4, #12]
}
 8006f68:	2001      	movs	r0, #1
 8006f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (wScalingFactor < wScalingFactor3)
 8006f6e:	4550      	cmp	r0, sl
 8006f70:	bf28      	it	cs
 8006f72:	4650      	movcs	r0, sl
 8006f74:	e7e5      	b.n	8006f42 <REMNG_ExecRamp+0x52>
 8006f76:	bf00      	nop
 8006f78:	10624dd3 	.word	0x10624dd3

08006f7c <RUC_Init>:
__weak void RUC_Init(RevUpCtrl_Handle_t *pHandle,
                     SpeednTorqCtrl_Handle_t *pSTC,
                     VirtualSpeedSensor_Handle_t *pVSS,
                     STO_Handle_t *pSNSL,
                     PWMC_Handle_t *pPWM)
{
 8006f7c:	b500      	push	{lr}
  {
#endif
    RevUpCtrl_PhaseParams_t *pRUCPhaseParams = &pHandle->ParamsData[0];
    uint8_t bPhase = 0U;

    pHandle->pSTC = pSTC;
 8006f7e:	6681      	str	r1, [r0, #104]	@ 0x68
    pHandle->EnteredZone1 = false;

    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
    {
      /* Dump HF data for now HF data are forced to 16 bits */
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 8006f80:	6941      	ldr	r1, [r0, #20]
    pHandle->pSNSL = pSNSL;
 8006f82:	e9c0 231b 	strd	r2, r3, [r0, #108]	@ 0x6c
    pHandle->OTFSCLowside = false;
 8006f86:	f04f 0c00 	mov.w	ip, #0
    pHandle->pPWM = pPWM;
 8006f8a:	9b01      	ldr	r3, [sp, #4]
    pHandle->OTFSCLowside = false;
 8006f8c:	f8a0 c054 	strh.w	ip, [r0, #84]	@ 0x54
    pHandle->pPWM = pPWM;
 8006f90:	6743      	str	r3, [r0, #116]	@ 0x74
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 8006f92:	b309      	cbz	r1, 8006fd8 <RUC_Init+0x5c>
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 8006f94:	688b      	ldr	r3, [r1, #8]
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 8006f96:	b323      	cbz	r3, 8006fe2 <RUC_Init+0x66>
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 8006f98:	689b      	ldr	r3, [r3, #8]
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 8006f9a:	b32b      	cbz	r3, 8006fe8 <RUC_Init+0x6c>
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 8006f9c:	689b      	ldr	r3, [r3, #8]
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 8006f9e:	b333      	cbz	r3, 8006fee <RUC_Init+0x72>
 8006fa0:	689b      	ldr	r3, [r3, #8]
      bPhase++;
 8006fa2:	f04f 0c05 	mov.w	ip, #5
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 8006fa6:	b1cb      	cbz	r3, 8006fdc <RUC_Init+0x60>
 8006fa8:	2204      	movs	r2, #4
 8006faa:	f04f 0c05 	mov.w	ip, #5
    {
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;

      pHandle->bPhaseNbr = bPhase;

      pHandle->bResetPLLTh = (uint8_t)((RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz) / 1000U);
 8006fae:	8803      	ldrh	r3, [r0, #0]
 8006fb0:	4910      	ldr	r1, [pc, #64]	@ (8006ff4 <RUC_Init+0x78>)
 8006fb2:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 8006fb6:	fb0e f303 	mul.w	r3, lr, r3
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8006fba:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      pHandle->bResetPLLTh = (uint8_t)((RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz) / 1000U);
 8006fbe:	fba1 1303 	umull	r1, r3, r1, r3
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8006fc2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8006fc6:	2100      	movs	r1, #0
      pHandle->bResetPLLTh = (uint8_t)((RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz) / 1000U);
 8006fc8:	099b      	lsrs	r3, r3, #6
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8006fca:	6151      	str	r1, [r2, #20]
      pHandle->bPhaseNbr = bPhase;
 8006fcc:	f880 c048 	strb.w	ip, [r0, #72]	@ 0x48
      pHandle->bResetPLLTh = (uint8_t)((RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz) / 1000U);
 8006fd0:	f880 3056 	strb.w	r3, [r0, #86]	@ 0x56
    }
#ifdef NULL_PTR_CHECK_REV_UP_CTL
  }
#endif
}
 8006fd4:	f85d fb04 	ldr.w	pc, [sp], #4
      bPhase++;
 8006fd8:	f04f 0c01 	mov.w	ip, #1
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8006fdc:	f10c 32ff 	add.w	r2, ip, #4294967295
 8006fe0:	e7e5      	b.n	8006fae <RUC_Init+0x32>
      bPhase++;
 8006fe2:	f04f 0c02 	mov.w	ip, #2
 8006fe6:	e7f9      	b.n	8006fdc <RUC_Init+0x60>
 8006fe8:	f04f 0c03 	mov.w	ip, #3
 8006fec:	e7f6      	b.n	8006fdc <RUC_Init+0x60>
 8006fee:	f04f 0c04 	mov.w	ip, #4
 8006ff2:	e7f3      	b.n	8006fdc <RUC_Init+0x60>
 8006ff4:	10624dd3 	.word	0x10624dd3

08006ff8 <RUC_Clear>:
  * @param  pHandle: Pointer on Handle structure of RevUp controller.
  * @param  hMotorDirection: Rotor rotation direction.
  *         This parameter must be -1 or +1.
  */
__weak void RUC_Clear(RevUpCtrl_Handle_t *pHandle, int16_t hMotorDirection)
{
 8006ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    VirtualSpeedSensor_Handle_t *pVSS = pHandle->pVSS;
 8006ffc:	6ec7      	ldr	r7, [r0, #108]	@ 0x6c
    SpeednTorqCtrl_Handle_t *pSTC = pHandle->pSTC;
 8006ffe:	f8d0 8068 	ldr.w	r8, [r0, #104]	@ 0x68
    RevUpCtrl_PhaseParams_t *pPhaseParams = pHandle->ParamsData;

    pHandle->hDirection = hMotorDirection;
 8007002:	80c1      	strh	r1, [r0, #6]
    pHandle->EnteredZone1 = false;

    /* Initializes the rev up stages counter */
    pHandle->bStageCnt = 0U;
 8007004:	2600      	movs	r6, #0
{
 8007006:	4604      	mov	r4, r0
    pHandle->bStageCnt = 0U;
 8007008:	f880 6058 	strb.w	r6, [r0, #88]	@ 0x58
    pHandle->bOTFRelCounter = 0U;
 800700c:	f880 6053 	strb.w	r6, [r0, #83]	@ 0x53
    pHandle->OTFSCLowside = false;
 8007010:	f8a0 6054 	strh.w	r6, [r0, #84]	@ 0x54

    /* Calls the clear method of VSS */
    VSS_Clear(pVSS);
 8007014:	4638      	mov	r0, r7

    /* Sets the STC in torque mode */
    STC_SetControlMode(pSTC, MCM_TORQUE_MODE);

    /* Sets the mechanical starting angle of VSS */
    VSS_SetMecAngle(pVSS, pHandle->hStartingMecAngle * hMotorDirection);
 8007016:	b28d      	uxth	r5, r1
    VSS_Clear(pVSS);
 8007018:	f000 ffea 	bl	8007ff0 <VSS_Clear>
    STC_SetControlMode(pSTC, MCM_TORQUE_MODE);
 800701c:	2104      	movs	r1, #4
 800701e:	4640      	mov	r0, r8
 8007020:	f000 f90a 	bl	8007238 <STC_SetControlMode>
    VSS_SetMecAngle(pVSS, pHandle->hStartingMecAngle * hMotorDirection);
 8007024:	8861      	ldrh	r1, [r4, #2]
 8007026:	fb11 f105 	smulbb	r1, r1, r5
 800702a:	b209      	sxth	r1, r1
 800702c:	4638      	mov	r0, r7
 800702e:	f001 f895 	bl	800815c <VSS_SetMecAngle>

    /* Sets to zero the starting torque of STC */
    (void)STC_ExecRamp(pSTC, 0, 0U);
 8007032:	4632      	mov	r2, r6
 8007034:	4631      	mov	r1, r6
 8007036:	4640      	mov	r0, r8
 8007038:	f000 f902 	bl	8007240 <STC_ExecRamp>

    /* Gives the first command to STC and VSS */
    (void)STC_ExecRamp(pSTC, pPhaseParams->hFinalTorque * hMotorDirection, (uint32_t)(pPhaseParams->hDurationms));
 800703c:	8a21      	ldrh	r1, [r4, #16]
 800703e:	89a2      	ldrh	r2, [r4, #12]
 8007040:	fb11 f105 	smulbb	r1, r1, r5
 8007044:	b209      	sxth	r1, r1
 8007046:	4640      	mov	r0, r8
 8007048:	f000 f8fa 	bl	8007240 <STC_ExecRamp>

    VSS_SetMecAcceleration(pVSS, pPhaseParams->hFinalMecSpeedUnit * hMotorDirection, pPhaseParams->hDurationms);
 800704c:	89e1      	ldrh	r1, [r4, #14]
 800704e:	89a2      	ldrh	r2, [r4, #12]
 8007050:	fb11 f105 	smulbb	r1, r1, r5
 8007054:	b209      	sxth	r1, r1
 8007056:	4638      	mov	r0, r7
 8007058:	f001 f888 	bl	800816c <VSS_SetMecAcceleration>

    /* Compute hPhaseRemainingTicks */
    pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pPhaseParams->hDurationms)
 800705c:	89a3      	ldrh	r3, [r4, #12]
                                              * ((uint32_t)pHandle->hRUCFrequencyHz))
 800705e:	8821      	ldrh	r1, [r4, #0]
                                              / 1000U );
 8007060:	4a06      	ldr	r2, [pc, #24]	@ (800707c <RUC_Clear+0x84>)

    /* Set the next phases parameter pointer */
    pHandle->pCurrentPhaseParams = (RevUpCtrl_PhaseParams_t *)pPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5

    /* Timeout counter for PLL reset during OTF */
    pHandle->bResetPLLCnt = 0U;
 8007062:	f884 6057 	strb.w	r6, [r4, #87]	@ 0x57
                                              * ((uint32_t)pHandle->hRUCFrequencyHz))
 8007066:	fb01 f303 	mul.w	r3, r1, r3
                                              / 1000U );
 800706a:	fba2 2303 	umull	r2, r3, r2, r3
 800706e:	099b      	lsrs	r3, r3, #6
    pHandle->pCurrentPhaseParams = (RevUpCtrl_PhaseParams_t *)pPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 8007070:	6962      	ldr	r2, [r4, #20]
 8007072:	60a2      	str	r2, [r4, #8]
    pHandle->hPhaseRemainingTicks++;
 8007074:	3301      	adds	r3, #1
 8007076:	80a3      	strh	r3, [r4, #4]
#ifdef NULL_PTR_CHECK_REV_UP_CTL
  }
#endif
}
 8007078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800707c:	10624dd3 	.word	0x10624dd3

08007080 <RUC_Exec>:
    retVal = false;
  }
  else
  {
#endif
    if (pHandle->hPhaseRemainingTicks > 0U)
 8007080:	8883      	ldrh	r3, [r0, #4]
{
 8007082:	b510      	push	{r4, lr}
 8007084:	4604      	mov	r4, r0
    if (pHandle->hPhaseRemainingTicks > 0U)
 8007086:	bb43      	cbnz	r3, 80070da <RUC_Exec+0x5a>
      /* Nothing to do */
    }

    if (0U == pHandle->hPhaseRemainingTicks)
    {
      if (pHandle->pCurrentPhaseParams != MC_NULL)
 8007088:	68a0      	ldr	r0, [r4, #8]
 800708a:	b328      	cbz	r0, 80070d8 <RUC_Exec+0x58>
      {
        /* If it becomes zero the current phase has been completed */
        /* Gives the next command to STC and VSS */
        (void)STC_ExecRamp(pHandle->pSTC, pHandle->pCurrentPhaseParams->hFinalTorque * pHandle->hDirection,
 800708c:	8881      	ldrh	r1, [r0, #4]
 800708e:	88e3      	ldrh	r3, [r4, #6]
 8007090:	8802      	ldrh	r2, [r0, #0]
 8007092:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 8007094:	fb11 f103 	smulbb	r1, r1, r3
 8007098:	b209      	sxth	r1, r1
 800709a:	f000 f8d1 	bl	8007240 <STC_ExecRamp>
                           (uint32_t)(pHandle->pCurrentPhaseParams->hDurationms));

        VSS_SetMecAcceleration(pHandle->pVSS,
                               pHandle->pCurrentPhaseParams->hFinalMecSpeedUnit * pHandle->hDirection,
 800709e:	68a3      	ldr	r3, [r4, #8]
 80070a0:	88e0      	ldrh	r0, [r4, #6]
 80070a2:	8859      	ldrh	r1, [r3, #2]
        VSS_SetMecAcceleration(pHandle->pVSS,
 80070a4:	881a      	ldrh	r2, [r3, #0]
                               pHandle->pCurrentPhaseParams->hFinalMecSpeedUnit * pHandle->hDirection,
 80070a6:	fb11 f100 	smulbb	r1, r1, r0
        VSS_SetMecAcceleration(pHandle->pVSS,
 80070aa:	b209      	sxth	r1, r1
 80070ac:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 80070ae:	f001 f85d 	bl	800816c <VSS_SetMecAcceleration>
                               pHandle->pCurrentPhaseParams->hDurationms);

        /* Compute hPhaseRemainingTicks */
        pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pHandle->pCurrentPhaseParams->hDurationms)
 80070b2:	68a1      	ldr	r1, [r4, #8]
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 80070b4:	8820      	ldrh	r0, [r4, #0]
        pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pHandle->pCurrentPhaseParams->hDurationms)
 80070b6:	880b      	ldrh	r3, [r1, #0]
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 80070b8:	4a0b      	ldr	r2, [pc, #44]	@ (80070e8 <RUC_Exec+0x68>)
        pHandle->hPhaseRemainingTicks++;

        /* Set the next phases parameter pointer */
        pHandle->pCurrentPhaseParams = pHandle->pCurrentPhaseParams->pNext; //cstat !MISRAC2012-Rule-11.5
 80070ba:	6889      	ldr	r1, [r1, #8]
 80070bc:	60a1      	str	r1, [r4, #8]
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 80070be:	fb00 f303 	mul.w	r3, r0, r3
 80070c2:	fba2 2303 	umull	r2, r3, r2, r3

        /* Increases the rev up stages counter */
        pHandle->bStageCnt++;
 80070c6:	f894 2058 	ldrb.w	r2, [r4, #88]	@ 0x58
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 80070ca:	099b      	lsrs	r3, r3, #6
        pHandle->hPhaseRemainingTicks++;
 80070cc:	3301      	adds	r3, #1
        pHandle->bStageCnt++;
 80070ce:	3201      	adds	r2, #1
        pHandle->hPhaseRemainingTicks++;
 80070d0:	80a3      	strh	r3, [r4, #4]
        pHandle->bStageCnt++;
 80070d2:	f884 2058 	strb.w	r2, [r4, #88]	@ 0x58
  bool retVal = true;
 80070d6:	2001      	movs	r0, #1
    }
#ifdef NULL_PTR_CHECK_REV_UP_CTL
  }
#endif
  return (retVal);
}
 80070d8:	bd10      	pop	{r4, pc}
      pHandle->hPhaseRemainingTicks--;
 80070da:	3b01      	subs	r3, #1
 80070dc:	b29b      	uxth	r3, r3
 80070de:	8083      	strh	r3, [r0, #4]
    if (0U == pHandle->hPhaseRemainingTicks)
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d0d1      	beq.n	8007088 <RUC_Exec+0x8>
  bool retVal = true;
 80070e4:	2001      	movs	r0, #1
}
 80070e6:	bd10      	pop	{r4, pc}
 80070e8:	10624dd3 	.word	0x10624dd3

080070ec <RUC_FirstAccelerationStageReached>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (pHandle->bStageCnt >= pHandle->bFirstAccelerationStage)
 80070ec:	f890 2058 	ldrb.w	r2, [r0, #88]	@ 0x58
 80070f0:	f890 0049 	ldrb.w	r0, [r0, #73]	@ 0x49
    }
#ifdef NULL_PTR_CHECK_REV_UP_CTL
  }
#endif
  return (retVal);
}
 80070f4:	4282      	cmp	r2, r0
 80070f6:	bf34      	ite	cc
 80070f8:	2000      	movcc	r0, #0
 80070fa:	2001      	movcs	r0, #1
 80070fc:	4770      	bx	lr
 80070fe:	bf00      	nop

08007100 <RUC_SetPhase>:
  }
  else
  {
#endif
    pHandle->ParamsData[phaseNumber].hFinalTorque = phaseData->hFinalTorque;
    pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit = phaseData->hFinalMecSpeedUnit;
 8007100:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8007104:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8007108:	f8d2 c002 	ldr.w	ip, [r2, #2]
 800710c:	f8c3 c00e 	str.w	ip, [r3, #14]
    pHandle->ParamsData[phaseNumber].hDurationms = phaseData->hDurationms;
 8007110:	4618      	mov	r0, r3
 8007112:	8813      	ldrh	r3, [r2, #0]
 8007114:	8183      	strh	r3, [r0, #12]
#ifdef NULL_PTR_CHECK_REV_UP_CTL
  }
#endif
  return (retValue);
}
 8007116:	2001      	movs	r0, #1
 8007118:	4770      	bx	lr
 800711a:	bf00      	nop

0800711c <RUC_GetNumberOfPhases>:
#ifdef NULL_PTR_CHECK_REV_UP_CTL
  return ((MC_NULL == pHandle) ? 0U : (uint8_t)pHandle->bPhaseNbr);
#else
  return ((uint8_t)pHandle->bPhaseNbr);
#endif
}
 800711c:	f890 0048 	ldrb.w	r0, [r0, #72]	@ 0x48
 8007120:	4770      	bx	lr
 8007122:	bf00      	nop

08007124 <RUC_GetPhase>:
  }
  else
  {
#endif
    phaseData->hFinalTorque = (int16_t)pHandle->ParamsData[phaseNumber].hFinalTorque;
    phaseData->hFinalMecSpeedUnit = (int16_t)pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit;
 8007124:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8007128:	0089      	lsls	r1, r1, #2
 800712a:	f101 0308 	add.w	r3, r1, #8
 800712e:	4403      	add	r3, r0
    phaseData->hDurationms = (uint16_t)pHandle->ParamsData[phaseNumber].hDurationms;
 8007130:	4408      	add	r0, r1
    phaseData->hFinalMecSpeedUnit = (int16_t)pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit;
 8007132:	f8d3 3006 	ldr.w	r3, [r3, #6]
 8007136:	f8c2 3002 	str.w	r3, [r2, #2]
    phaseData->hDurationms = (uint16_t)pHandle->ParamsData[phaseNumber].hDurationms;
 800713a:	8983      	ldrh	r3, [r0, #12]
 800713c:	8013      	strh	r3, [r2, #0]
#ifdef NULL_PTR_CHECK_REV_UP_CTL
  }
#endif
  return (retValue);
}
 800713e:	2001      	movs	r0, #1
 8007140:	4770      	bx	lr
 8007142:	bf00      	nop

08007144 <SPD_GetElAngle>:
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hElAngle);
#else
  return (pHandle->hElAngle);
#endif
}
 8007144:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8007148:	4770      	bx	lr
 800714a:	bf00      	nop

0800714c <SPD_GetAvrgMecSpeedUnit>:
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hAvrMecSpeedUnit);
#else
  return (pHandle->hAvrMecSpeedUnit);
#endif
}
 800714c:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 8007150:	4770      	bx	lr
 8007152:	bf00      	nop

08007154 <SPD_GetElSpeedDpp>:
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hElSpeedDpp);
#else
  return (pHandle->hElSpeedDpp);
#endif
}
 8007154:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
 8007158:	4770      	bx	lr
 800715a:	bf00      	nop

0800715c <SPD_GetInstElSpeedDpp>:
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->InstantaneousElSpeedDpp);
#else
  return (pHandle->InstantaneousElSpeedDpp);
#endif
}
 800715c:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 8007160:	4770      	bx	lr
 8007162:	bf00      	nop

08007164 <SPD_IsMecSpeedReliable>:
    bool SpeedError = false;

    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

    /* Compute absoulte value of mechanical speed */
    if (*pMecSpeedUnit < 0)
 8007164:	f9b1 c000 	ldrsh.w	ip, [r1]
{
 8007168:	4603      	mov	r3, r0
 800716a:	b510      	push	{r4, lr}
    {
      hAux = -(*pMecSpeedUnit);
 800716c:	fa1f f18c 	uxth.w	r1, ip
    if (*pMecSpeedUnit < 0)
 8007170:	f1bc 0f00 	cmp.w	ip, #0
      hAux = -(*pMecSpeedUnit);
 8007174:	bfb8      	it	lt
 8007176:	4249      	neglt	r1, r1
    else
    {
      /* Nothing to do */
    }

    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 8007178:	f8b3 e016 	ldrh.w	lr, [r3, #22]
    uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 800717c:	78c0      	ldrb	r0, [r0, #3]
    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 800717e:	781a      	ldrb	r2, [r3, #0]
    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
 8007180:	8a9c      	ldrh	r4, [r3, #20]
    {
      /* Nothing to do */
    }

    /* Compute absoulte value of mechanical acceleration */
    if (pHandle->hMecAccelUnitP < 0)
 8007182:	f9b3 c012 	ldrsh.w	ip, [r3, #18]
      hAux = -(*pMecSpeedUnit);
 8007186:	bfb8      	it	lt
 8007188:	b289      	uxthlt	r1, r1
    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 800718a:	458e      	cmp	lr, r1
 800718c:	d816      	bhi.n	80071bc <SPD_IsMecSpeedReliable+0x58>
    {
      hAux = -(pHandle->hMecAccelUnitP);
 800718e:	fa1f fe8c 	uxth.w	lr, ip
    if (pHandle->hMecAccelUnitP < 0)
 8007192:	f1bc 0f00 	cmp.w	ip, #0
      hAux = -(pHandle->hMecAccelUnitP);
 8007196:	bfb8      	it	lt
 8007198:	f1ce 0e00 	rsblt	lr, lr, #0
    else
    {
      hAbsMecAccelUnitP = (uint16_t)pHandle->hMecAccelUnitP;
    }

    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 800719c:	f8b3 c018 	ldrh.w	ip, [r3, #24]
      hAux = -(pHandle->hMecAccelUnitP);
 80071a0:	bfb8      	it	lt
 80071a2:	fa1f fe8e 	uxthlt.w	lr, lr
    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 80071a6:	45f4      	cmp	ip, lr
 80071a8:	d308      	bcc.n	80071bc <SPD_IsMecSpeedReliable+0x58>
    else
    {
      /* Nothing to do */
    }

    if (true == SpeedError)
 80071aa:	428c      	cmp	r4, r1
 80071ac:	d306      	bcc.n	80071bc <SPD_IsMecSpeedReliable+0x58>
        /* Nothing to do */
      }
    }
    else
    {
      if (bSpeedErrorNumber < bMaximumSpeedErrorsNumber)
 80071ae:	4290      	cmp	r0, r2
 80071b0:	d809      	bhi.n	80071c6 <SPD_IsMecSpeedReliable+0x62>
      {
        /* Nothing to do */
      }
    }

    if (bSpeedErrorNumber == bMaximumSpeedErrorsNumber)
 80071b2:	1a10      	subs	r0, r2, r0
    else
    {
      /* Nothing to do */
    }

    pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 80071b4:	701a      	strb	r2, [r3, #0]
    if (bSpeedErrorNumber == bMaximumSpeedErrorsNumber)
 80071b6:	bf18      	it	ne
 80071b8:	2001      	movne	r0, #1
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  }
#endif
  return (SpeedSensorReliability);
}
 80071ba:	bd10      	pop	{r4, pc}
      if (bSpeedErrorNumber < bMaximumSpeedErrorsNumber)
 80071bc:	4290      	cmp	r0, r2
 80071be:	d9f8      	bls.n	80071b2 <SPD_IsMecSpeedReliable+0x4e>
        bSpeedErrorNumber++;
 80071c0:	3201      	adds	r2, #1
 80071c2:	b2d2      	uxtb	r2, r2
 80071c4:	e7f5      	b.n	80071b2 <SPD_IsMecSpeedReliable+0x4e>
        bSpeedErrorNumber = 0u;
 80071c6:	2200      	movs	r2, #0
    pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 80071c8:	701a      	strb	r2, [r3, #0]
  bool SpeedSensorReliability = true;
 80071ca:	2001      	movs	r0, #1
}
 80071cc:	bd10      	pop	{r4, pc}
 80071ce:	bf00      	nop

080071d0 <SPD_GetS16Speed>:
  }
  else
  {
#endif
    int32_t wAux = (int32_t)pHandle->hAvrMecSpeedUnit;
    wAux *= INT16_MAX;
 80071d0:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
    wAux /= (int16_t)pHandle->hMaxReliableMecSpeedUnit;
 80071d4:	f9b0 2014 	ldrsh.w	r2, [r0, #20]
    wAux *= INT16_MAX;
 80071d8:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
    wAux /= (int16_t)pHandle->hMaxReliableMecSpeedUnit;
 80071dc:	fb93 f0f2 	sdiv	r0, r3, r2
    tempValue = (int16_t)wAux;
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  }
#endif
  return (tempValue);
}
 80071e0:	b200      	sxth	r0, r0
 80071e2:	4770      	bx	lr

080071e4 <STC_Init>:
  {
#endif
    pHandle->PISpeed = pPI;
    pHandle->SPD = SPD_Handle;
    pHandle->Mode = pHandle->ModeDefault;
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 80071e4:	f9b0 c02c 	ldrsh.w	ip, [r0, #44]	@ 0x2c
    pHandle->PISpeed = pPI;
 80071e8:	6101      	str	r1, [r0, #16]
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 80071ea:	f9b0 102e 	ldrsh.w	r1, [r0, #46]	@ 0x2e
    pHandle->SPD = SPD_Handle;
 80071ee:	6142      	str	r2, [r0, #20]
{
 80071f0:	b410      	push	{r4}
    pHandle->Mode = pHandle->ModeDefault;
 80071f2:	f890 402a 	ldrb.w	r4, [r0, #42]	@ 0x2a
 80071f6:	7004      	strb	r4, [r0, #0]
    pHandle->TargetFinal = 0;
 80071f8:	2300      	movs	r3, #0
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 80071fa:	ea4f 440c 	mov.w	r4, ip, lsl #16
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 80071fe:	0409      	lsls	r1, r1, #16
 8007200:	e9c0 4101 	strd	r4, r1, [r0, #4]
    pHandle->TargetFinal = 0;
 8007204:	8043      	strh	r3, [r0, #2]
    pHandle->RampRemainingStep = 0U;
    pHandle->IncDecAmount = 0;
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 8007206:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->RampRemainingStep = 0U;
 800720a:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 800720c:	6183      	str	r3, [r0, #24]
}
 800720e:	4770      	bx	lr

08007210 <STC_SetSpeedSensor>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SPD = SPD_Handle;
 8007210:	6141      	str	r1, [r0, #20]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 8007212:	4770      	bx	lr

08007214 <STC_GetSpeedSensor>:
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  return ((MC_NULL ==  pHandle) ? MC_NULL : pHandle->SPD);
#else
  return (pHandle->SPD);
#endif
}
 8007214:	6940      	ldr	r0, [r0, #20]
 8007216:	4770      	bx	lr

08007218 <STC_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (MCM_SPEED_MODE == pHandle->Mode)
 8007218:	7803      	ldrb	r3, [r0, #0]
 800721a:	2b03      	cmp	r3, #3
 800721c:	d000      	beq.n	8007220 <STC_Clear+0x8>
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 800721e:	4770      	bx	lr
      PID_SetIntegralTerm(pHandle->PISpeed, 0);
 8007220:	6900      	ldr	r0, [r0, #16]
 8007222:	2100      	movs	r1, #0
 8007224:	f7fe bf80 	b.w	8006128 <PID_SetIntegralTerm>

08007228 <STC_GetMecSpeedRefUnit>:
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->SpeedRefUnitExt / 65536));
#else
  return ((int16_t)(pHandle->SpeedRefUnitExt / 65536));
#endif
#endif
}
 8007228:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800722c:	4770      	bx	lr
 800722e:	bf00      	nop

08007230 <STC_GetTorqueRef>:
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->TorqueRef / 65536));
#else
  return ((int16_t)(pHandle->TorqueRef / 65536));
#endif
#endif
}
 8007230:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
 8007234:	4770      	bx	lr
 8007236:	bf00      	nop

08007238 <STC_SetControlMode>:
  }
  else
  {
#endif
    pHandle->Mode = bMode;
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp */
 8007238:	2300      	movs	r3, #0
    pHandle->Mode = bMode;
 800723a:	7001      	strb	r1, [r0, #0]
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp */
 800723c:	60c3      	str	r3, [r0, #12]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 800723e:	4770      	bx	lr

08007240 <STC_ExecRamp>:
  * @ref EncAlignCtrl "Encoder Alignment Control",
  * @ref PositionControl "Position Control" loop or
  * speed regulation with @ref SpeedRegulatorPotentiometer Speed potentiometer.
  */
__weak bool STC_ExecRamp(SpeednTorqCtrl_Handle_t *pHandle, int16_t hTargetFinal, uint32_t hDurationms)
{
 8007240:	b570      	push	{r4, r5, r6, lr}
    uint32_t wAux;
    int32_t wAux1;
    int16_t hCurrentReference;

    /* Check if the hTargetFinal is out of the bound of application */
    if (MCM_TORQUE_MODE == pHandle->Mode)
 8007242:	7803      	ldrb	r3, [r0, #0]
 8007244:	2b04      	cmp	r3, #4
{
 8007246:	4604      	mov	r4, r0
 8007248:	460d      	mov	r5, r1
 800724a:	4616      	mov	r6, r2
    if (MCM_TORQUE_MODE == pHandle->Mode)
 800724c:	d01d      	beq.n	800728a <STC_ExecRamp+0x4a>
#else
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt / 65536);
#endif

#ifdef CHECK_BOUNDARY
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxAppPositiveMecSpeedUnit)
 800724e:	8bc3      	ldrh	r3, [r0, #30]
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt >> 16);
 8007250:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxAppPositiveMecSpeedUnit)
 8007254:	4299      	cmp	r1, r3
 8007256:	dd01      	ble.n	800725c <STC_ExecRamp+0x1c>
 8007258:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (allowedRange);
}
 800725a:	bd70      	pop	{r4, r5, r6, pc}
      else if (hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit)
 800725c:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	@ 0x24
 8007260:	428b      	cmp	r3, r1
 8007262:	dcf9      	bgt.n	8007258 <STC_ExecRamp+0x18>
      else if ((int32_t)hTargetFinal < (int32_t)pHandle->MinAppPositiveMecSpeedUnit)
 8007264:	8c23      	ldrh	r3, [r4, #32]
 8007266:	4299      	cmp	r1, r3
 8007268:	da03      	bge.n	8007272 <STC_ExecRamp+0x32>
        if (hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit)
 800726a:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	@ 0x22
 800726e:	428b      	cmp	r3, r1
 8007270:	dbf2      	blt.n	8007258 <STC_ExecRamp+0x18>
      if (0U == hDurationms)
 8007272:	b9a6      	cbnz	r6, 800729e <STC_ExecRamp+0x5e>
        if (MCM_SPEED_MODE == pHandle->Mode)
 8007274:	7823      	ldrb	r3, [r4, #0]
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 8007276:	042d      	lsls	r5, r5, #16
        if (MCM_SPEED_MODE == pHandle->Mode)
 8007278:	2b03      	cmp	r3, #3
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 800727a:	bf0c      	ite	eq
 800727c:	6065      	streq	r5, [r4, #4]
          pHandle->TorqueRef = ((int32_t)hTargetFinal) * 65536;
 800727e:	60a5      	strne	r5, [r4, #8]
        pHandle->IncDecAmount = 0;
 8007280:	2000      	movs	r0, #0
        pHandle->IncDecAmount = wAux1;
 8007282:	61a0      	str	r0, [r4, #24]
        pHandle->RampRemainingStep++;
 8007284:	60e6      	str	r6, [r4, #12]
        pHandle->IncDecAmount = wAux1;
 8007286:	2001      	movs	r0, #1
}
 8007288:	bd70      	pop	{r4, r5, r6, pc}
      hCurrentReference = STC_GetTorqueRef(pHandle);
 800728a:	f7ff ffd1 	bl	8007230 <STC_GetTorqueRef>
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxPositiveTorque)
 800728e:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8007290:	42ab      	cmp	r3, r5
 8007292:	dbe1      	blt.n	8007258 <STC_ExecRamp+0x18>
      if ((int32_t)hTargetFinal < (int32_t)pHandle->MinNegativeTorque)
 8007294:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	@ 0x28
 8007298:	42ab      	cmp	r3, r5
 800729a:	dcdd      	bgt.n	8007258 <STC_ExecRamp+0x18>
 800729c:	e7e9      	b.n	8007272 <STC_ExecRamp+0x32>
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 800729e:	8ba3      	ldrh	r3, [r4, #28]
        wAux /= 1000U;
 80072a0:	4a06      	ldr	r2, [pc, #24]	@ (80072bc <STC_ExecRamp+0x7c>)
        pHandle->TargetFinal = hTargetFinal;
 80072a2:	8065      	strh	r5, [r4, #2]
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 80072a4:	fb06 f303 	mul.w	r3, r6, r3
        wAux /= 1000U;
 80072a8:	fba2 2303 	umull	r2, r3, r2, r3
        wAux1 = (((int32_t)hTargetFinal) - ((int32_t)hCurrentReference)) * 65536;
 80072ac:	1a28      	subs	r0, r5, r0
        wAux /= 1000U;
 80072ae:	099b      	lsrs	r3, r3, #6
        pHandle->RampRemainingStep++;
 80072b0:	1c5e      	adds	r6, r3, #1
        wAux1 = (((int32_t)hTargetFinal) - ((int32_t)hCurrentReference)) * 65536;
 80072b2:	0400      	lsls	r0, r0, #16
        wAux1 /= ((int32_t)pHandle->RampRemainingStep);
 80072b4:	fb90 f0f6 	sdiv	r0, r0, r6
        pHandle->IncDecAmount = wAux1;
 80072b8:	e7e3      	b.n	8007282 <STC_ExecRamp+0x42>
 80072ba:	bf00      	nop
 80072bc:	10624dd3 	.word	0x10624dd3

080072c0 <STC_StopRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->RampRemainingStep = 0U;
 80072c0:	2300      	movs	r3, #0
 80072c2:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 80072c4:	6183      	str	r3, [r0, #24]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 80072c6:	4770      	bx	lr

080072c8 <STC_CalcTorqueReference>:
  * - Must be called at fixed time equal to hSTCFrequencyHz. It is called
  * passing as parameter the speed sensor used to perform the speed regulation.
  * - Called during START and ALIGNEMENT states of the MC state machine into MediumFrequencyTask.
  */
__weak int16_t STC_CalcTorqueReference(SpeednTorqCtrl_Handle_t *pHandle)
{
 80072c8:	b538      	push	{r3, r4, r5, lr}
    int32_t wCurrentReference;
    int16_t hMeasuredSpeed;
    int16_t hTargetSpeed;
    int16_t hError;

    if (MCM_TORQUE_MODE == pHandle->Mode)
 80072ca:	7802      	ldrb	r2, [r0, #0]
      wCurrentReference = pHandle->SpeedRefUnitExt;
    }

    /* Update the speed reference or the torque reference according to the mode
       and terminates the ramp if needed */
    if (pHandle->RampRemainingStep > 1U)
 80072cc:	68c3      	ldr	r3, [r0, #12]
    if (MCM_TORQUE_MODE == pHandle->Mode)
 80072ce:	2a04      	cmp	r2, #4
{
 80072d0:	4604      	mov	r4, r0
    if (MCM_TORQUE_MODE == pHandle->Mode)
 80072d2:	d012      	beq.n	80072fa <STC_CalcTorqueReference+0x32>
    if (pHandle->RampRemainingStep > 1U)
 80072d4:	2b01      	cmp	r3, #1
      wCurrentReference = pHandle->SpeedRefUnitExt;
 80072d6:	6845      	ldr	r5, [r0, #4]
    if (pHandle->RampRemainingStep > 1U)
 80072d8:	d908      	bls.n	80072ec <STC_CalcTorqueReference+0x24>
    {
      /* Increment/decrement the reference value */
      wCurrentReference += pHandle->IncDecAmount;
 80072da:	6981      	ldr	r1, [r0, #24]

      /* Decrement the number of remaining steps */
      pHandle->RampRemainingStep--;
 80072dc:	3b01      	subs	r3, #1
      wCurrentReference += pHandle->IncDecAmount;
 80072de:	440d      	add	r5, r1
      pHandle->RampRemainingStep--;
 80072e0:	60c3      	str	r3, [r0, #12]
    else
    {
      /* Do nothing */
    }

    if (MCM_SPEED_MODE == pHandle->Mode)
 80072e2:	2a03      	cmp	r2, #3
 80072e4:	d011      	beq.n	800730a <STC_CalcTorqueReference+0x42>
    else
    {
      pHandle->TorqueRef = wCurrentReference;
#ifndef FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hTorqueReference = (int16_t)(wCurrentReference >> 16);
 80072e6:	1428      	asrs	r0, r5, #16
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
 80072e8:	60a5      	str	r5, [r4, #8]
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (hTorqueReference);
}
 80072ea:	bd38      	pop	{r3, r4, r5, pc}
    else if (1U == pHandle->RampRemainingStep)
 80072ec:	d1f9      	bne.n	80072e2 <STC_CalcTorqueReference+0x1a>
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 80072ee:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
      pHandle->RampRemainingStep = 0U;
 80072f2:	2300      	movs	r3, #0
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 80072f4:	042d      	lsls	r5, r5, #16
      pHandle->RampRemainingStep = 0U;
 80072f6:	60c3      	str	r3, [r0, #12]
 80072f8:	e7f3      	b.n	80072e2 <STC_CalcTorqueReference+0x1a>
    if (pHandle->RampRemainingStep > 1U)
 80072fa:	2b01      	cmp	r3, #1
      wCurrentReference = pHandle->TorqueRef;
 80072fc:	6885      	ldr	r5, [r0, #8]
    if (pHandle->RampRemainingStep > 1U)
 80072fe:	d911      	bls.n	8007324 <STC_CalcTorqueReference+0x5c>
      wCurrentReference += pHandle->IncDecAmount;
 8007300:	6982      	ldr	r2, [r0, #24]
      pHandle->RampRemainingStep--;
 8007302:	3b01      	subs	r3, #1
      wCurrentReference += pHandle->IncDecAmount;
 8007304:	4415      	add	r5, r2
      pHandle->RampRemainingStep--;
 8007306:	60c3      	str	r3, [r0, #12]
    if (MCM_SPEED_MODE == pHandle->Mode)
 8007308:	e7ed      	b.n	80072e6 <STC_CalcTorqueReference+0x1e>
      hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit(pHandle->SPD);
 800730a:	6960      	ldr	r0, [r4, #20]
 800730c:	f7ff ff1e 	bl	800714c <SPD_GetAvrgMecSpeedUnit>
      hError = hTargetSpeed - hMeasuredSpeed;
 8007310:	ebc0 4125 	rsb	r1, r0, r5, asr #16
      hTorqueReference = PI_Controller(pHandle->PISpeed, (int32_t)hError);
 8007314:	b209      	sxth	r1, r1
 8007316:	6920      	ldr	r0, [r4, #16]
 8007318:	f7fe ff3a 	bl	8006190 <PI_Controller>
      pHandle->SpeedRefUnitExt = wCurrentReference;
 800731c:	6065      	str	r5, [r4, #4]
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
 800731e:	0405      	lsls	r5, r0, #16
 8007320:	60a5      	str	r5, [r4, #8]
}
 8007322:	bd38      	pop	{r3, r4, r5, pc}
    else if (1U == pHandle->RampRemainingStep)
 8007324:	d1df      	bne.n	80072e6 <STC_CalcTorqueReference+0x1e>
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 8007326:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
      pHandle->RampRemainingStep = 0U;
 800732a:	2300      	movs	r3, #0
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 800732c:	042d      	lsls	r5, r5, #16
      pHandle->RampRemainingStep = 0U;
 800732e:	60c3      	str	r3, [r0, #12]
    if (MCM_SPEED_MODE == pHandle->Mode)
 8007330:	e7d9      	b.n	80072e6 <STC_CalcTorqueReference+0x1e>
 8007332:	bf00      	nop

08007334 <STC_GetMecSpeedRefUnitDefault>:
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  return ((MC_NULL == pHandle) ? 0 : pHandle->MecSpeedRefUnitDefault);
#else
  return (pHandle->MecSpeedRefUnitDefault);
#endif
}
 8007334:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	@ 0x2c
 8007338:	4770      	bx	lr
 800733a:	bf00      	nop

0800733c <STC_GetDefaultIqdref>:
    IqdRefDefault.d = 0;
  }
  else
  {
#endif
    IqdRefDefault.q = pHandle->TorqueRefDefault;
 800733c:	f8d0 302e 	ldr.w	r3, [r0, #46]	@ 0x2e
    IqdRefDefault.d = pHandle->IdrefDefault;
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (IqdRefDefault);
 8007340:	2200      	movs	r2, #0
 8007342:	b299      	uxth	r1, r3
 8007344:	f361 020f 	bfi	r2, r1, #0, #16
 8007348:	0c1b      	lsrs	r3, r3, #16
 800734a:	f363 421f 	bfi	r2, r3, #16, #16
{
 800734e:	b082      	sub	sp, #8
}
 8007350:	4610      	mov	r0, r2
 8007352:	b002      	add	sp, #8
 8007354:	4770      	bx	lr
 8007356:	bf00      	nop

08007358 <STC_ForceSpeedReferenceToCurrentSpeed>:
  *
  * - Called during the CHARGE_BOOT_CAP, SWITCH_OVER and WAIT_STOP_MOTOR states of the MC state machine
  * into MediumFrequencyTask to initialize the speed reference.
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed(SpeednTorqCtrl_Handle_t *pHandle)
{
 8007358:	b510      	push	{r4, lr}
 800735a:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SpeedRefUnitExt = ((int32_t)SPD_GetAvrgMecSpeedUnit(pHandle->SPD)) * (int32_t)65536;
 800735c:	6940      	ldr	r0, [r0, #20]
 800735e:	f7ff fef5 	bl	800714c <SPD_GetAvrgMecSpeedUnit>
 8007362:	0400      	lsls	r0, r0, #16
 8007364:	6060      	str	r0, [r4, #4]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 8007366:	bd10      	pop	{r4, pc}

08007368 <STO_CR_CalcElAngle>:
  *         pInputs pointer to the observer inputs structure.
  * @retval int16_t rotor electrical angle (s16Degrees)
  */
//cstat !MISRAC2012-Rule-8.13
__weak int16_t STO_CR_CalcElAngle(STO_CR_Handle_t *pHandle, Observer_Inputs_t *pInputs)
{
 8007368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800736c:	b085      	sub	sp, #20
    int16_t hRotor_Acceleration;
    int16_t hRotor_Angle;
    int16_t hValfa;
    int16_t hVbeta;

    int16_t hPrev_Rotor_Angle = pHandle->_Super.hElAngle;
 800736e:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8007372:	9200      	str	r2, [sp, #0]
    int16_t hPrev_Rotor_Speed = pHandle->_Super.hElSpeedDpp;
    int16_t hMax_Instant_Accel = pHandle->MaxInstantElAcceleration;
 8007374:	f9b0 2176 	ldrsh.w	r2, [r0, #374]	@ 0x176
 8007378:	9201      	str	r2, [sp, #4]

    if (pHandle->wBemf_alfa_est > ((int32_t)pHandle->hF2 * INT16_MAX))
 800737a:	f9b0 202e 	ldrsh.w	r2, [r0, #46]	@ 0x2e
    int16_t hPrev_Rotor_Speed = pHandle->_Super.hElSpeedDpp;
 800737e:	f9b0 b00e 	ldrsh.w	fp, [r0, #14]
{
 8007382:	4603      	mov	r3, r0
    if (pHandle->wBemf_alfa_est > ((int32_t)pHandle->hF2 * INT16_MAX))
 8007384:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 8007386:	ebc2 32c2 	rsb	r2, r2, r2, lsl #15
 800738a:	4290      	cmp	r0, r2
 800738c:	f340 81ab 	ble.w	80076e6 <STO_CR_CalcElAngle+0x37e>
    {
      pHandle->wBemf_alfa_est = INT16_MAX * (int32_t)(pHandle->hF2);
 8007390:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007392:	4610      	mov	r0, r2
    {
      /* Nothing to do */
    }
#ifndef FULL_MISRA_C_COMPLIANCY_STO_CORDIC
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est >> pHandle->F2LOG);
 8007394:	f8b3 e17e 	ldrh.w	lr, [r3, #382]	@ 0x17e
#else
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est / pHandle->hF2);
#endif

    if (pHandle->wBemf_beta_est > (INT16_MAX * (int32_t)(pHandle->hF2)))
 8007398:	6c1d      	ldr	r5, [r3, #64]	@ 0x40
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est >> pHandle->F2LOG);
 800739a:	fa40 f70e 	asr.w	r7, r0, lr
    if (pHandle->wBemf_beta_est > (INT16_MAX * (int32_t)(pHandle->hF2)))
 800739e:	42aa      	cmp	r2, r5
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est >> pHandle->F2LOG);
 80073a0:	b23f      	sxth	r7, r7
    if (pHandle->wBemf_beta_est > (INT16_MAX * (int32_t)(pHandle->hF2)))
 80073a2:	f2c0 817c 	blt.w	800769e <STO_CR_CalcElAngle+0x336>
    {
      pHandle->wBemf_beta_est = INT16_MAX * (int32_t)(pHandle->hF2);
    }
    else if (pHandle->wBemf_beta_est <= (-INT16_MAX * (int32_t)(pHandle->hF2)))
 80073a6:	4252      	negs	r2, r2
 80073a8:	4295      	cmp	r5, r2
 80073aa:	f340 8178 	ble.w	800769e <STO_CR_CalcElAngle+0x336>
      hAux_Beta = (int16_t)(pHandle->wBemf_beta_est >> pHandle->F2LOG);
#else
      hAux_Beta = (int16_t)(pHandle->wBemf_beta_est / pHandle->hF2);
#endif

    if (pHandle->Ialfa_est > (INT16_MAX * (int32_t)(pHandle->hF1)))
 80073ae:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	@ 0x2c
 80073b2:	f8d3 9034 	ldr.w	r9, [r3, #52]	@ 0x34
 80073b6:	ebc2 32c2 	rsb	r2, r2, r2, lsl #15
      hAux_Beta = (int16_t)(pHandle->wBemf_beta_est >> pHandle->F2LOG);
 80073ba:	fa45 fe0e 	asr.w	lr, r5, lr
    if (pHandle->Ialfa_est > (INT16_MAX * (int32_t)(pHandle->hF1)))
 80073be:	4591      	cmp	r9, r2
      hAux_Beta = (int16_t)(pHandle->wBemf_beta_est >> pHandle->F2LOG);
 80073c0:	fa0f fe8e 	sxth.w	lr, lr
    if (pHandle->Ialfa_est > (INT16_MAX * (int32_t)(pHandle->hF1)))
 80073c4:	f340 8195 	ble.w	80076f2 <STO_CR_CalcElAngle+0x38a>
    {
      pHandle->Ialfa_est = INT16_MAX * (int32_t)(pHandle->hF1);
 80073c8:	635a      	str	r2, [r3, #52]	@ 0x34
 80073ca:	4691      	mov	r9, r2
    else
    {
      /* Nothing to do */
    }

    if (pHandle->Ibeta_est > (INT16_MAX * (int32_t)(pHandle->hF1)))
 80073cc:	f8d3 8038 	ldr.w	r8, [r3, #56]	@ 0x38
 80073d0:	4542      	cmp	r2, r8
 80073d2:	f2c0 8161 	blt.w	8007698 <STO_CR_CalcElAngle+0x330>
    {
      pHandle->Ibeta_est = INT16_MAX * (int32_t)(pHandle->hF1);
    }
    else if (pHandle->Ibeta_est <= (-INT16_MAX * (int32_t)(pHandle->hF1)))
 80073d6:	4252      	negs	r2, r2
 80073d8:	4590      	cmp	r8, r2
 80073da:	f340 815d 	ble.w	8007698 <STO_CR_CalcElAngle+0x330>
      /* Nothing to do */
    }

#ifndef FULL_MISRA_C_COMPLIANCY_STO_CORDIC
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    hIalfa_err = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 80073de:	f8b3 c17c 	ldrh.w	ip, [r3, #380]	@ 0x17c
#else
    hIalfa_err = (int16_t)(pHandle->Ialfa_est / pHandle->hF1);
#endif

    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 80073e2:	888c      	ldrh	r4, [r1, #4]
    hAux = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
#else
    hAux = (int16_t)(pHandle->Ialfa_est / pHandle->hF1);
#endif

    wAux = (int32_t)(pHandle->hC1) * hAux;
 80073e4:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 80073e8:	9202      	str	r2, [sp, #8]
    hIalfa_err = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 80073ea:	fa49 f20c 	asr.w	r2, r9, ip
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 80073ee:	1b14      	subs	r4, r2, r4
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 80073f0:	88ce      	ldrh	r6, [r1, #6]
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 80073f2:	9403      	str	r4, [sp, #12]
    wAux = (int32_t)(pHandle->hC1) * hAux;
 80073f4:	9c02      	ldr	r4, [sp, #8]
    wAux = (int32_t)(pInputs->Vbus) * pInputs->Valfa_beta.alpha;
 80073f6:	f8b1 a008 	ldrh.w	sl, [r1, #8]
    hIbeta_err = (int16_t)(pHandle->Ibeta_est >> pHandle->F1LOG);
 80073fa:	fa48 fc0c 	asr.w	ip, r8, ip
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 80073fe:	ebac 0606 	sub.w	r6, ip, r6
    wAux = (int32_t)(pHandle->hC1) * hAux;
 8007402:	fb12 f204 	smulbb	r2, r2, r4
    hAux = (int16_t)(pHandle->Ibeta_est >> pHandle->F1LOG);
#else
    hAux = (int16_t)(pHandle->Ibeta_est / pHandle->hF1);
#endif

    wAux = (int32_t)(pHandle->hC1) * hAux;
 8007406:	fb1c fc04 	smulbb	ip, ip, r4
    wIalfa_est_Next = pHandle->Ialfa_est - wAux;
 800740a:	eba9 0202 	sub.w	r2, r9, r2
    wIbeta_est_Next = pHandle->Ibeta_est - wAux;
 800740e:	eba8 0c0c 	sub.w	ip, r8, ip
    wAux = (int32_t)(pInputs->Vbus) * pInputs->Valfa_beta.alpha;
 8007412:	f9b1 9000 	ldrsh.w	r9, [r1]
    wAux = (int32_t)(pInputs->Vbus) * pInputs->Valfa_beta.beta;
 8007416:	f9b1 8002 	ldrsh.w	r8, [r1, #2]
    wAux = (int32_t)(pHandle->hC2) * hIalfa_err;
 800741a:	f9b3 1022 	ldrsh.w	r1, [r3, #34]	@ 0x22
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 800741e:	f9bd 400c 	ldrsh.w	r4, [sp, #12]
    {
      wDirection = -1;
    }

    /* Stores observed b-emfs */
    pHandle->hBemf_alfa_est = hAux_Alfa;
 8007422:	f8a3 7044 	strh.w	r7, [r3, #68]	@ 0x44
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 8007426:	b236      	sxth	r6, r6
    wAux = (int32_t)(pInputs->Vbus) * pInputs->Valfa_beta.alpha;
 8007428:	fb0a f909 	mul.w	r9, sl, r9
    wAux = (int32_t)(pInputs->Vbus) * pInputs->Valfa_beta.beta;
 800742c:	fb0a f808 	mul.w	r8, sl, r8
    wAux = (int32_t)(pHandle->hC5) * hValfa;
 8007430:	f9b3 a028 	ldrsh.w	sl, [r3, #40]	@ 0x28
    pHandle->hBemf_beta_est = hAux_Beta;
 8007434:	f8a3 e046 	strh.w	lr, [r3, #70]	@ 0x46
    wIbeta_est_Next += wAux;
 8007438:	fb01 cc06 	mla	ip, r1, r6, ip
    hVbeta = (int16_t)(wAux >> 16); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800743c:	ea4f 4828 	mov.w	r8, r8, asr #16
    wIbeta_est_Next += wAux;
 8007440:	fb0a cc08 	mla	ip, sl, r8, ip
    wAux = (int32_t)(pHandle->hC4) * hIalfa_err;
 8007444:	f9b3 8026 	ldrsh.w	r8, [r3, #38]	@ 0x26
    wIalfa_est_Next += wAux;
 8007448:	fb01 2204 	mla	r2, r1, r4, r2
    hValfa = (int16_t)(wAux >> 16); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800744c:	ea4f 4929 	mov.w	r9, r9, asr #16
    wBemf_alfa_est_Next = pHandle->wBemf_alfa_est + wAux;
 8007450:	fb04 0408 	mla	r4, r4, r8, r0
    wAux = (int32_t) hAux_Beta >> pHandle->F3POW2;
 8007454:	8e59      	ldrh	r1, [r3, #50]	@ 0x32
    wBemf_beta_est_Next = pHandle->wBemf_beta_est + wAux;
 8007456:	fb08 5806 	mla	r8, r8, r6, r5
    wAux = (int32_t)(pHandle->hC3) * hAux_Alfa;
 800745a:	f9b3 6024 	ldrsh.w	r6, [r3, #36]	@ 0x24
    wIalfa_est_Next += wAux;
 800745e:	fb0a 2209 	mla	r2, sl, r9, r2
    wAux = wAux * pHandle->hC6;
 8007462:	f9b3 902a 	ldrsh.w	r9, [r3, #42]	@ 0x2a
    wIalfa_est_Next -= wAux;
 8007466:	fb06 2a17 	mls	sl, r6, r7, r2
    wIbeta_est_Next -= wAux;
 800746a:	fb06 c61e 	mls	r6, r6, lr, ip
    wAux = (int32_t) hAux_Beta >> pHandle->F3POW2;
 800746e:	fa4e fc01 	asr.w	ip, lr, r1
    wAux = wAux * pHandle->hC6;
 8007472:	fb0c fc09 	mul.w	ip, ip, r9
    wBemf_alfa_est_Next += wAux;
 8007476:	fb0c 440b 	mla	r4, ip, fp, r4
    if (pHandle->Orig_ElSpeedDpp >= 0)
 800747a:	f9b3 c14e 	ldrsh.w	ip, [r3, #334]	@ 0x14e
 800747e:	f1bc 0f00 	cmp.w	ip, #0
    wAux = (int32_t) hAux_Alfa >> pHandle->F3POW2;
 8007482:	fa47 f101 	asr.w	r1, r7, r1
    wAux = wAux * pHandle->hC6;
 8007486:	bfbc      	itt	lt
 8007488:	4240      	neglt	r0, r0
 800748a:	426d      	neglt	r5, r5
 800748c:	fb01 f109 	mul.w	r1, r1, r9
      wDirection = -1;
 8007490:	bfb4      	ite	lt
 8007492:	f04f 3cff 	movlt.w	ip, #4294967295
      wDirection = 1;
 8007496:	f04f 0c01 	movge.w	ip, #1

  int16_t hAngle;
  int32_t wXi, wYi, wXold;

  /*Determining quadrant*/
  if (wBemf_alfa_est < 0)
 800749a:	2800      	cmp	r0, #0
    wBemf_beta_est_Next -= wAux;
 800749c:	fb01 811b 	mls	r1, r1, fp, r8

    /* Calls the CORDIC blockset */
    wAux_Alpha = pHandle->wBemf_alfa_est * wDirection;
    wAux_Beta = pHandle->wBemf_beta_est * wDirection;

    hRotor_Angle = MCM_PhaseComputation(wAux_Alpha, -wAux_Beta);
 80074a0:	f1c5 0700 	rsb	r7, r5, #0
 80074a4:	db4d      	blt.n	8007542 <STO_CR_CalcElAngle+0x1da>
  else
  {
    /* Quadrant I or IV */
    hAngle = 0;
    wXi = wBemf_alfa_est / 2;
    wYi = wBemf_beta_est / 2;
 80074a6:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 80074aa:	107d      	asrs	r5, r7, #1
    wXi = wBemf_alfa_est / 2;
 80074ac:	1040      	asrs	r0, r0, #1
    wYi = wBemf_beta_est / 2;
 80074ae:	f44f 4760 	mov.w	r7, #57344	@ 0xe000
 80074b2:	f44f 5e00 	mov.w	lr, #8192	@ 0x2000
  }
  wXold = wXi;

  /* Begin the successive approximation process */
  /* Iteration 0 */
  if (wYi < 0)
 80074b6:	2d00      	cmp	r5, #0
 80074b8:	da4d      	bge.n	8007556 <STO_CR_CalcElAngle+0x1ee>
 80074ba:	4677      	mov	r7, lr
  {
    /* Vector is in Quadrant IV */
    hAngle += ATAN1DIV1;
    wXi = wXi - wYi;
    wYi = wXold + wYi;
 80074bc:	eb05 0e00 	add.w	lr, r5, r0
    wYi = -wXold + wYi;
  }
  wXold = wXi;

  /* Iteration 1 */
  if (wYi < 0)
 80074c0:	f1be 0f00 	cmp.w	lr, #0
    wXi = wXi - wYi;
 80074c4:	eba0 0805 	sub.w	r8, r0, r5
  if (wYi < 0)
 80074c8:	da4c      	bge.n	8007564 <STO_CR_CalcElAngle+0x1fc>
  {
    /* Vector is in Quadrant IV */
    hAngle += ATAN1DIV2;
 80074ca:	f507 5797 	add.w	r7, r7, #4832	@ 0x12e0
    wXi = wXi - (wYi / 2);
    wYi = (wXold / 2) + wYi;
 80074ce:	eb0e 0568 	add.w	r5, lr, r8, asr #1
    hAngle += ATAN1DIV2;
 80074d2:	3704      	adds	r7, #4
    wXi = wXi - (wYi / 2);
 80074d4:	eb0e 79de 	add.w	r9, lr, lr, lsr #31
    wYi = (-wXold / 2) + wYi;
  }
  wXold = wXi;

  /* Iteration 2 */
  if (wYi < 0)
 80074d8:	2d00      	cmp	r5, #0
    hAngle += ATAN1DIV2;
 80074da:	b2bf      	uxth	r7, r7
    wXi = wXi - (wYi / 2);
 80074dc:	eba8 0969 	sub.w	r9, r8, r9, asr #1
  if (wYi < 0)
 80074e0:	da4e      	bge.n	8007580 <STO_CR_CalcElAngle+0x218>
  {
    /* Vector is in Quadrant IV */
    hAngle += ATAN1DIV4;
    wXi = wXi - (wYi / 4);
 80074e2:	f105 0e03 	add.w	lr, r5, #3
    wYi = (wXold / 4) + wYi;
 80074e6:	eb05 05a9 	add.w	r5, r5, r9, asr #2
    hAngle += ATAN1DIV4;
 80074ea:	f607 17fb 	addw	r7, r7, #2555	@ 0x9fb
    wYi = (-wXold / 4) + wYi;
  }
  wXold = wXi;

  /* Iteration 3 */
  if (wYi < 0)
 80074ee:	2d00      	cmp	r5, #0
    hAngle += ATAN1DIV4;
 80074f0:	b2b8      	uxth	r0, r7
    wXi = wXi - (wYi / 4);
 80074f2:	eba9 0eae 	sub.w	lr, r9, lr, asr #2
  if (wYi < 0)
 80074f6:	da51      	bge.n	800759c <STO_CR_CalcElAngle+0x234>
  {
    /* Vector is in Quadrant IV */
    hAngle += ATAN1DIV8;
    wXi = wXi - (wYi / 8);
 80074f8:	1def      	adds	r7, r5, #7
    wYi = (wXold / 8) + wYi;
 80074fa:	eb05 05ee 	add.w	r5, r5, lr, asr #3
    hAngle += ATAN1DIV8;
 80074fe:	f200 5011 	addw	r0, r0, #1297	@ 0x511
    wYi = (-wXold / 8) + wYi;
  }
  wXold = wXi;

  /* Iteration4 */
  if (wYi < 0)
 8007502:	2d00      	cmp	r5, #0
    hAngle += ATAN1DIV8;
 8007504:	b280      	uxth	r0, r0
    wXi = wXi - (wYi / 8);
 8007506:	ebae 07e7 	sub.w	r7, lr, r7, asr #3
  if (wYi < 0)
 800750a:	da58      	bge.n	80075be <STO_CR_CalcElAngle+0x256>
  {
    /* Vector is in Quadrant IV */
    hAngle += ATAN1DIV16;
    wXi = wXi - (wYi / 16);
 800750c:	f105 0e0f 	add.w	lr, r5, #15
    wYi = (wXold / 16) + wYi;
 8007510:	eb05 1527 	add.w	r5, r5, r7, asr #4
    hAngle += ATAN1DIV16;
 8007514:	f200 208b 	addw	r0, r0, #651	@ 0x28b
    wYi = (-wXold / 16) + wYi;
  }
  wXold = wXi;

  /* Iteration 5 */
  if (wYi < 0)
 8007518:	2d00      	cmp	r5, #0
    hAngle += ATAN1DIV16;
 800751a:	b280      	uxth	r0, r0
    wXi = wXi - (wYi / 16);
 800751c:	eba7 1e2e 	sub.w	lr, r7, lr, asr #4
  if (wYi < 0)
 8007520:	da5d      	bge.n	80075de <STO_CR_CalcElAngle+0x276>
  {
    /* Vector is in Quadrant IV */
    hAngle += ATAN1DIV32;
    wXi = wXi - (wYi / 32);
 8007522:	f105 071f 	add.w	r7, r5, #31
    wYi = (wXold / 32) + wYi;
 8007526:	eb05 156e 	add.w	r5, r5, lr, asr #5
    hAngle += ATAN1DIV32;
 800752a:	f500 70a3 	add.w	r0, r0, #326	@ 0x146
    wYi = (-wXold / 32) + wYi;
  }
  wXold = wXi;

  /* Iteration 6 */
  if (wYi < 0)
 800752e:	2d00      	cmp	r5, #0
    hAngle += ATAN1DIV32;
 8007530:	b280      	uxth	r0, r0
    wXi = wXi - (wYi / 32);
 8007532:	ebae 1767 	sub.w	r7, lr, r7, asr #5
  if (wYi < 0)
 8007536:	da62      	bge.n	80075fe <STO_CR_CalcElAngle+0x296>
  {
    /* Vector is in Quadrant IV */
    hAngle += ATAN1DIV64;
 8007538:	30a3      	adds	r0, #163	@ 0xa3
    wXi = wXi - (wYi / 64);
    wYi = (wXold / 64) + wYi;
 800753a:	eb05 15a7 	add.w	r5, r5, r7, asr #6
    hAngle += ATAN1DIV64;
 800753e:	b280      	uxth	r0, r0
    wYi = (wXold / 64) + wYi;
 8007540:	e066      	b.n	8007610 <STO_CR_CalcElAngle+0x2a8>
    if (wBemf_beta_est < 0)
 8007542:	2d00      	cmp	r5, #0
 8007544:	f300 80f9 	bgt.w	800773a <STO_CR_CalcElAngle+0x3d2>
      wYi = - (wBemf_alfa_est / 2);
 8007548:	eb00 75d0 	add.w	r5, r0, r0, lsr #31
 800754c:	106d      	asrs	r5, r5, #1
      wXi = wBemf_beta_est / 2;
 800754e:	1078      	asrs	r0, r7, #1
      wYi = - (wBemf_alfa_est / 2);
 8007550:	426d      	negs	r5, r5
 8007552:	f44f 4720 	mov.w	r7, #40960	@ 0xa000
    wYi = -wXold + wYi;
 8007556:	eba5 0e00 	sub.w	lr, r5, r0
  if (wYi < 0)
 800755a:	f1be 0f00 	cmp.w	lr, #0
    wXi = wXi + wYi;
 800755e:	eb05 0800 	add.w	r8, r5, r0
  if (wYi < 0)
 8007562:	dbb2      	blt.n	80074ca <STO_CR_CalcElAngle+0x162>
    wYi = (-wXold / 2) + wYi;
 8007564:	f1c8 0500 	rsb	r5, r8, #0
 8007568:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
    hAngle -= ATAN1DIV2;
 800756c:	f5a7 5797 	sub.w	r7, r7, #4832	@ 0x12e0
    wYi = (-wXold / 2) + wYi;
 8007570:	eb0e 0565 	add.w	r5, lr, r5, asr #1
    hAngle -= ATAN1DIV2;
 8007574:	3f04      	subs	r7, #4
  if (wYi < 0)
 8007576:	2d00      	cmp	r5, #0
    hAngle -= ATAN1DIV2;
 8007578:	b2bf      	uxth	r7, r7
    wXi = wXi + (wYi / 2);
 800757a:	eb08 096e 	add.w	r9, r8, lr, asr #1
  if (wYi < 0)
 800757e:	dbb0      	blt.n	80074e2 <STO_CR_CalcElAngle+0x17a>
    hAngle -= ATAN1DIV4;
 8007580:	f6a7 17fb 	subw	r7, r7, #2555	@ 0x9fb
 8007584:	b2b8      	uxth	r0, r7
    wYi = (-wXold / 4) + wYi;
 8007586:	f1c9 0700 	rsb	r7, r9, #0
 800758a:	2f00      	cmp	r7, #0
 800758c:	bfb8      	it	lt
 800758e:	3703      	addlt	r7, #3
    wXi = wXi + (wYi / 4);
 8007590:	eb09 0ea5 	add.w	lr, r9, r5, asr #2
    wYi = (-wXold / 4) + wYi;
 8007594:	eb05 05a7 	add.w	r5, r5, r7, asr #2
  if (wYi < 0)
 8007598:	2d00      	cmp	r5, #0
 800759a:	dbad      	blt.n	80074f8 <STO_CR_CalcElAngle+0x190>
    wYi = (-wXold / 8) + wYi;
 800759c:	f1ce 0800 	rsb	r8, lr, #0
 80075a0:	f1b8 0f00 	cmp.w	r8, #0
 80075a4:	bfb8      	it	lt
 80075a6:	f108 0807 	addlt.w	r8, r8, #7
    hAngle -= ATAN1DIV8;
 80075aa:	f46f 62a2 	mvn.w	r2, #1296	@ 0x510
    wXi = wXi + (wYi / 8);
 80075ae:	eb0e 07e5 	add.w	r7, lr, r5, asr #3
    wYi = (-wXold / 8) + wYi;
 80075b2:	eb05 05e8 	add.w	r5, r5, r8, asr #3
    hAngle -= ATAN1DIV8;
 80075b6:	4410      	add	r0, r2
  if (wYi < 0)
 80075b8:	2d00      	cmp	r5, #0
    hAngle -= ATAN1DIV8;
 80075ba:	b280      	uxth	r0, r0
  if (wYi < 0)
 80075bc:	dba6      	blt.n	800750c <STO_CR_CalcElAngle+0x1a4>
    wYi = (-wXold / 16) + wYi;
 80075be:	f1c7 0800 	rsb	r8, r7, #0
 80075c2:	f1b8 0f00 	cmp.w	r8, #0
 80075c6:	bfb8      	it	lt
 80075c8:	f108 080f 	addlt.w	r8, r8, #15
    wXi = wXi + (wYi / 16);
 80075cc:	eb07 1e25 	add.w	lr, r7, r5, asr #4
    wYi = (-wXold / 16) + wYi;
 80075d0:	eb05 1528 	add.w	r5, r5, r8, asr #4
    hAngle -= ATAN1DIV16;
 80075d4:	f2a0 208b 	subw	r0, r0, #651	@ 0x28b
  if (wYi < 0)
 80075d8:	2d00      	cmp	r5, #0
    hAngle -= ATAN1DIV16;
 80075da:	b280      	uxth	r0, r0
  if (wYi < 0)
 80075dc:	dba1      	blt.n	8007522 <STO_CR_CalcElAngle+0x1ba>
    wYi = (-wXold / 32) + wYi;
 80075de:	f1ce 0800 	rsb	r8, lr, #0
 80075e2:	f1b8 0f00 	cmp.w	r8, #0
 80075e6:	bfb8      	it	lt
 80075e8:	f108 081f 	addlt.w	r8, r8, #31
    wXi = wXi + (wYi / 32);
 80075ec:	eb0e 1765 	add.w	r7, lr, r5, asr #5
    wYi = (-wXold / 32) + wYi;
 80075f0:	eb05 1568 	add.w	r5, r5, r8, asr #5
    hAngle -= ATAN1DIV32;
 80075f4:	f5a0 70a3 	sub.w	r0, r0, #326	@ 0x146
  if (wYi < 0)
 80075f8:	2d00      	cmp	r5, #0
    hAngle -= ATAN1DIV32;
 80075fa:	b280      	uxth	r0, r0
  if (wYi < 0)
 80075fc:	db9c      	blt.n	8007538 <STO_CR_CalcElAngle+0x1d0>
  else
  {
    /* Vector is in Quadrant I */
    hAngle -= ATAN1DIV64;
    wXi = wXi + (wYi / 64);
    wYi = (-wXold / 64) + wYi;
 80075fe:	427f      	negs	r7, r7
 8007600:	2f00      	cmp	r7, #0
    hAngle -= ATAN1DIV64;
 8007602:	f1a0 00a3 	sub.w	r0, r0, #163	@ 0xa3
    wYi = (-wXold / 64) + wYi;
 8007606:	bfb8      	it	lt
 8007608:	373f      	addlt	r7, #63	@ 0x3f
    hAngle -= ATAN1DIV64;
 800760a:	b280      	uxth	r0, r0
    wYi = (-wXold / 64) + wYi;
 800760c:	eb05 15a7 	add.w	r5, r5, r7, asr #6
  }
  wXold = wXi;

  /* Iteration 7 */
  if (wYi < 0)
 8007610:	2d00      	cmp	r5, #0
  {
    /* Vector is in Quadrant IV */
    hAngle += ATAN1DIV128;
 8007612:	bfb4      	ite	lt
 8007614:	3051      	addlt	r0, #81	@ 0x51
    wYi = (wXold / 128) + wYi;
  }
  else
  {
    /* Vector is in Quadrant I */
    hAngle -= ATAN1DIV128;
 8007616:	3851      	subge	r0, #81	@ 0x51

    hOrRotor_Speed = (int16_t)(hRotor_Angle - hPrev_Rotor_Angle);
 8007618:	f8bd 8000 	ldrh.w	r8, [sp]
 800761c:	b280      	uxth	r0, r0
    wXi = wXi + (wYi / 128);
    wYi = (-wXold / 128) + wYi;
  }

  return (-hAngle);
 800761e:	4240      	negs	r0, r0
 8007620:	eba0 0e08 	sub.w	lr, r0, r8
    hRotor_Acceleration = hOrRotor_Speed - hPrev_Rotor_Speed;
 8007624:	fa1f f78b 	uxth.w	r7, fp
 8007628:	ebae 0507 	sub.w	r5, lr, r7

    hRotor_Speed = hOrRotor_Speed;

    if (wDirection == 1)
 800762c:	f1bc 0f01 	cmp.w	ip, #1
 8007630:	b200      	sxth	r0, r0
    hOrRotor_Speed = (int16_t)(hRotor_Angle - hPrev_Rotor_Angle);
 8007632:	fa0f fe8e 	sxth.w	lr, lr
    hRotor_Acceleration = hOrRotor_Speed - hPrev_Rotor_Speed;
 8007636:	b22d      	sxth	r5, r5
    if (wDirection == 1)
 8007638:	d061      	beq.n	80076fe <STO_CR_CalcElAngle+0x396>
        }
      }
    }
    else
    {
      if (hRotor_Speed > 0)
 800763a:	f1be 0f00 	cmp.w	lr, #0
 800763e:	dd31      	ble.n	80076a4 <STO_CR_CalcElAngle+0x33c>
        }
      }
    }


    if (hRotor_Acceleration > hMax_Instant_Accel)
 8007640:	9801      	ldr	r0, [sp, #4]
 8007642:	42a8      	cmp	r0, r5
 8007644:	da45      	bge.n	80076d2 <STO_CR_CalcElAngle+0x36a>
    {
      hOrRotor_Speed = hPrev_Rotor_Speed + hMax_Instant_Accel;
 8007646:	4407      	add	r7, r0
 8007648:	fa0f fe87 	sxth.w	lr, r7
 800764c:	f04f 0c00 	mov.w	ip, #0
  * @param  pHandle: handler of the current instance of the STO CORDIC component
  * @retval none
  */
inline static void STO_CR_Store_Rotor_Speed(STO_CR_Handle_t *pHandle, int16_t hRotor_Speed, int16_t hOrRotor_Speed)
{
  uint8_t bBuffer_index = pHandle->Speed_Buffer_Index;
 8007650:	f893 70c8 	ldrb.w	r7, [r3, #200]	@ 0xc8

  bBuffer_index++;
  if (bBuffer_index == pHandle->SpeedBufferSizeUnit)
 8007654:	f893 016c 	ldrb.w	r0, [r3, #364]	@ 0x16c
  bBuffer_index++;
 8007658:	3701      	adds	r7, #1
 800765a:	b2ff      	uxtb	r7, r7
  if (bBuffer_index == pHandle->SpeedBufferSizeUnit)
 800765c:	42b8      	cmp	r0, r7
 800765e:	bf0a      	itet	eq
 8007660:	2500      	moveq	r5, #0
  else
  {
    /* Nothing too do */
  }

  pHandle->SpeedBufferOldestEl = pHandle->Speed_Buffer[bBuffer_index];
 8007662:	463d      	movne	r5, r7
    bBuffer_index = 0U;
 8007664:	462f      	moveq	r7, r5
  pHandle->SpeedBufferOldestEl = pHandle->Speed_Buffer[bBuffer_index];
 8007666:	eb03 0545 	add.w	r5, r3, r5, lsl #1
}
 800766a:	9800      	ldr	r0, [sp, #0]
  pHandle->SpeedBufferOldestEl = pHandle->Speed_Buffer[bBuffer_index];
 800766c:	f9b5 8048 	ldrsh.w	r8, [r5, #72]	@ 0x48
 8007670:	f8a3 8168 	strh.w	r8, [r3, #360]	@ 0x168
  pHandle->OrigSpeedBufferOldestEl = pHandle->Orig_Speed_Buffer[bBuffer_index];
 8007674:	f9b5 80ce 	ldrsh.w	r8, [r5, #206]	@ 0xce
 8007678:	f8a3 816a 	strh.w	r8, [r3, #362]	@ 0x16a

  pHandle->Speed_Buffer[bBuffer_index] = hRotor_Speed;
 800767c:	f8a5 c048 	strh.w	ip, [r5, #72]	@ 0x48
  pHandle->Orig_Speed_Buffer[bBuffer_index] = hOrRotor_Speed;
 8007680:	f8a5 e0ce 	strh.w	lr, [r5, #206]	@ 0xce
    pHandle->Ibeta_est = wIbeta_est_Next;
 8007684:	e9c3 640e 	strd	r6, r4, [r3, #56]	@ 0x38
  pHandle->Speed_Buffer_Index = bBuffer_index;
 8007688:	f883 70c8 	strb.w	r7, [r3, #200]	@ 0xc8
    pHandle->Ialfa_est = wIalfa_est_Next;
 800768c:	f8c3 a034 	str.w	sl, [r3, #52]	@ 0x34
    pHandle->wBemf_beta_est = wBemf_beta_est_Next;
 8007690:	6419      	str	r1, [r3, #64]	@ 0x40
}
 8007692:	b005      	add	sp, #20
 8007694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pHandle->Ibeta_est = -INT16_MAX * (int32_t)(pHandle->hF1);
 8007698:	639a      	str	r2, [r3, #56]	@ 0x38
 800769a:	4690      	mov	r8, r2
 800769c:	e69f      	b.n	80073de <STO_CR_CalcElAngle+0x76>
      pHandle->wBemf_beta_est = -INT16_MAX * (int32_t)(pHandle->hF2);
 800769e:	641a      	str	r2, [r3, #64]	@ 0x40
 80076a0:	4615      	mov	r5, r2
 80076a2:	e684      	b.n	80073ae <STO_CR_CalcElAngle+0x46>
        if (hRotor_Acceleration < (-hMax_Instant_Accel))
 80076a4:	9a01      	ldr	r2, [sp, #4]
 80076a6:	f1c2 0c00 	rsb	ip, r2, #0
 80076aa:	4565      	cmp	r5, ip
 80076ac:	da38      	bge.n	8007720 <STO_CR_CalcElAngle+0x3b8>
          hRotor_Speed = hPrev_Rotor_Speed - hMax_Instant_Accel;
 80076ae:	fa1f fe82 	uxth.w	lr, r2
 80076b2:	eba7 0c0e 	sub.w	ip, r7, lr
          pHandle->_Super.hElAngle = hPrev_Rotor_Angle + hRotor_Speed;
 80076b6:	fa18 f88c 	uxtah	r8, r8, ip
 80076ba:	fa0f f088 	sxth.w	r0, r8
    if (hRotor_Acceleration > hMax_Instant_Accel)
 80076be:	42aa      	cmp	r2, r5
          pHandle->_Super.hElAngle = hPrev_Rotor_Angle + hRotor_Speed;
 80076c0:	9000      	str	r0, [sp, #0]
 80076c2:	8098      	strh	r0, [r3, #4]
          hRotor_Speed = hPrev_Rotor_Speed - hMax_Instant_Accel;
 80076c4:	fa0f fc8c 	sxth.w	ip, ip
    if (hRotor_Acceleration > hMax_Instant_Accel)
 80076c8:	da46      	bge.n	8007758 <STO_CR_CalcElAngle+0x3f0>
      hOrRotor_Speed = hPrev_Rotor_Speed + hMax_Instant_Accel;
 80076ca:	44be      	add	lr, r7
 80076cc:	fa0f fe8e 	sxth.w	lr, lr
 80076d0:	e7be      	b.n	8007650 <STO_CR_CalcElAngle+0x2e8>
 80076d2:	f04f 0c00 	mov.w	ip, #0
 80076d6:	4602      	mov	r2, r0
    else if (hRotor_Acceleration < (-hMax_Instant_Accel))
 80076d8:	4250      	negs	r0, r2
 80076da:	4285      	cmp	r5, r0
 80076dc:	dab8      	bge.n	8007650 <STO_CR_CalcElAngle+0x2e8>
      hOrRotor_Speed = hPrev_Rotor_Speed - hMax_Instant_Accel;
 80076de:	1abf      	subs	r7, r7, r2
 80076e0:	fa0f fe87 	sxth.w	lr, r7
 80076e4:	e7b4      	b.n	8007650 <STO_CR_CalcElAngle+0x2e8>
    else if (pHandle->wBemf_alfa_est <= (-INT16_MAX * (int32_t)(pHandle->hF2)))
 80076e6:	4254      	negs	r4, r2
 80076e8:	42a0      	cmp	r0, r4
      pHandle->wBemf_alfa_est = -INT16_MAX * (int32_t)(pHandle->hF2);
 80076ea:	bfdc      	itt	le
 80076ec:	63dc      	strle	r4, [r3, #60]	@ 0x3c
 80076ee:	4620      	movle	r0, r4
 80076f0:	e650      	b.n	8007394 <STO_CR_CalcElAngle+0x2c>
    else if (pHandle->Ialfa_est <= (-INT16_MAX * (int32_t)(pHandle->hF1)))
 80076f2:	4254      	negs	r4, r2
 80076f4:	45a1      	cmp	r9, r4
      pHandle->Ialfa_est = -INT16_MAX * (int32_t)(pHandle->hF1);
 80076f6:	bfdc      	itt	le
 80076f8:	635c      	strle	r4, [r3, #52]	@ 0x34
 80076fa:	46a1      	movle	r9, r4
 80076fc:	e666      	b.n	80073cc <STO_CR_CalcElAngle+0x64>
      if (hRotor_Speed < 0)
 80076fe:	f1be 0f00 	cmp.w	lr, #0
 8007702:	db9d      	blt.n	8007640 <STO_CR_CalcElAngle+0x2d8>
        if (hRotor_Acceleration > hMax_Instant_Accel)
 8007704:	9a01      	ldr	r2, [sp, #4]
 8007706:	42aa      	cmp	r2, r5
 8007708:	da13      	bge.n	8007732 <STO_CR_CalcElAngle+0x3ca>
          hRotor_Speed = hPrev_Rotor_Speed + hMax_Instant_Accel;
 800770a:	4417      	add	r7, r2
          pHandle->_Super.hElAngle = hPrev_Rotor_Angle + hRotor_Speed;
 800770c:	fa18 f887 	uxtah	r8, r8, r7
 8007710:	fa0f f288 	sxth.w	r2, r8
          hRotor_Speed = hPrev_Rotor_Speed + hMax_Instant_Accel;
 8007714:	fa0f fc87 	sxth.w	ip, r7
          pHandle->_Super.hElAngle = hPrev_Rotor_Angle + hRotor_Speed;
 8007718:	9200      	str	r2, [sp, #0]
 800771a:	809a      	strh	r2, [r3, #4]
 800771c:	46e6      	mov	lr, ip
 800771e:	e797      	b.n	8007650 <STO_CR_CalcElAngle+0x2e8>
    if (hRotor_Acceleration > hMax_Instant_Accel)
 8007720:	42aa      	cmp	r2, r5
          pHandle->_Super.hElAngle = hRotor_Angle;
 8007722:	8098      	strh	r0, [r3, #4]
    if (hRotor_Acceleration > hMax_Instant_Accel)
 8007724:	da15      	bge.n	8007752 <STO_CR_CalcElAngle+0x3ea>
      hOrRotor_Speed = hPrev_Rotor_Speed + hMax_Instant_Accel;
 8007726:	4417      	add	r7, r2
 8007728:	46f4      	mov	ip, lr
 800772a:	9000      	str	r0, [sp, #0]
 800772c:	fa0f fe87 	sxth.w	lr, r7
 8007730:	e78e      	b.n	8007650 <STO_CR_CalcElAngle+0x2e8>
          pHandle->_Super.hElAngle = hRotor_Angle;
 8007732:	8098      	strh	r0, [r3, #4]
 8007734:	9000      	str	r0, [sp, #0]
 8007736:	46f4      	mov	ip, lr
 8007738:	e7ce      	b.n	80076d8 <STO_CR_CalcElAngle+0x370>
      wXi = - (wBemf_beta_est / 2);
 800773a:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 800773e:	107f      	asrs	r7, r7, #1
      wYi = wBemf_alfa_est / 2;
 8007740:	eb00 75d0 	add.w	r5, r0, r0, lsr #31
 8007744:	106d      	asrs	r5, r5, #1
      wXi = - (wBemf_beta_est / 2);
 8007746:	4278      	negs	r0, r7
      wYi = wBemf_alfa_est / 2;
 8007748:	f44f 4ec0 	mov.w	lr, #24576	@ 0x6000
 800774c:	f44f 5700 	mov.w	r7, #8192	@ 0x2000
 8007750:	e6b1      	b.n	80074b6 <STO_CR_CalcElAngle+0x14e>
    if (hRotor_Acceleration > hMax_Instant_Accel)
 8007752:	9000      	str	r0, [sp, #0]
 8007754:	46f4      	mov	ip, lr
 8007756:	e77b      	b.n	8007650 <STO_CR_CalcElAngle+0x2e8>
 8007758:	46e6      	mov	lr, ip
      hOrRotor_Speed = hPrev_Rotor_Speed - hMax_Instant_Accel;
 800775a:	e779      	b.n	8007650 <STO_CR_CalcElAngle+0x2e8>

0800775c <STO_CR_CalcAvrgMecSpeedUnit>:
{
 800775c:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t bSpeedBufferSizeUnit = pHandle->SpeedBufferSizeUnit;
 800775e:	f890 516c 	ldrb.w	r5, [r0, #364]	@ 0x16c
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 8007762:	2d00      	cmp	r5, #0
 8007764:	f000 8096 	beq.w	8007894 <STO_CR_CalcAvrgMecSpeedUnit+0x138>
 8007768:	f100 0246 	add.w	r2, r0, #70	@ 0x46
 800776c:	eb02 0445 	add.w	r4, r2, r5, lsl #1
 8007770:	4613      	mov	r3, r2
    int32_t wAvrSpeed_dpp = (int32_t)0;
 8007772:	f04f 0c00 	mov.w	ip, #0
      wAvrSpeed_dpp += (int32_t)(pHandle->Speed_Buffer[i]);
 8007776:	f933 ef02 	ldrsh.w	lr, [r3, #2]!
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 800777a:	42a3      	cmp	r3, r4
      wAvrSpeed_dpp += (int32_t)(pHandle->Speed_Buffer[i]);
 800777c:	44f4      	add	ip, lr
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 800777e:	d1fa      	bne.n	8007776 <STO_CR_CalcAvrgMecSpeedUnit+0x1a>
      wAvrSpeed_dpp = wAvrSpeed_dpp / (int16_t)bSpeedBufferSizeUnit;
 8007780:	fb9c fef5 	sdiv	lr, ip, r5
    int32_t wAvrQuadraticError = 0;
 8007784:	f04f 0c00 	mov.w	ip, #0
      wError = (int32_t)(pHandle->Speed_Buffer[i]) - wAvrSpeed_dpp;
 8007788:	f932 3f02 	ldrsh.w	r3, [r2, #2]!
 800778c:	eba3 030e 	sub.w	r3, r3, lr
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 8007790:	42a2      	cmp	r2, r4
      wAvrQuadraticError += wError;
 8007792:	fb03 cc03 	mla	ip, r3, r3, ip
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 8007796:	d1f7      	bne.n	8007788 <STO_CR_CalcAvrgMecSpeedUnit+0x2c>
    wAvrQuadraticError = wAvrQuadraticError / (int16_t)bSpeedBufferSizeUnit;
 8007798:	fbbc f4f5 	udiv	r4, ip, r5
    wAvrSquareSpeed = wAvrSpeed_dpp * wAvrSpeed_dpp;
 800779c:	fb0e f30e 	mul.w	r3, lr, lr
    int64_t lAvrSquareSpeed = (int64_t)(wAvrSquareSpeed) * (int64_t)pHandle->VariancePercentage;
 80077a0:	17de      	asrs	r6, r3, #31
 80077a2:	f8b0 c16e 	ldrh.w	ip, [r0, #366]	@ 0x16e
    wAux = wAvrSpeed_dpp * (int32_t)(pHandle->_Super.hMeasurementFrequency);
 80077a6:	8b45      	ldrh	r5, [r0, #26]
    if (true == pHandle->EnableDualCheck) /*do algorithm if it's enabled*/
 80077a8:	f890 715c 	ldrb.w	r7, [r0, #348]	@ 0x15c
    int64_t lAvrSquareSpeed = (int64_t)(wAvrSquareSpeed) * (int64_t)pHandle->VariancePercentage;
 80077ac:	fbac 2303 	umull	r2, r3, ip, r3
 80077b0:	fb0c 3306 	mla	r3, ip, r6, r3
    wAvrSquareSpeed = (int32_t)(lAvrSquareSpeed / (int64_t)128);
 80077b4:	09d2      	lsrs	r2, r2, #7
 80077b6:	ea42 6243 	orr.w	r2, r2, r3, lsl #25
    wAux = wAux * (int32_t) (pHandle->_Super.SpeedUnit);
 80077ba:	7883      	ldrb	r3, [r0, #2]
    wAux = wAvrSpeed_dpp * (int32_t)(pHandle->_Super.hMeasurementFrequency);
 80077bc:	fb0e f505 	mul.w	r5, lr, r5
    if (wAvrQuadraticError < wAvrSquareSpeed)
 80077c0:	42a2      	cmp	r2, r4
    wAux = wAux * (int32_t) (pHandle->_Super.SpeedUnit);
 80077c2:	fb05 f303 	mul.w	r3, r5, r3
    if (wAvrQuadraticError < wAvrSquareSpeed)
 80077c6:	bfd8      	it	le
 80077c8:	2600      	movle	r6, #0
    wAux = wAux / (int32_t)(pHandle->_Super.DPPConvFactor);
 80077ca:	69c5      	ldr	r5, [r0, #28]
 80077cc:	fb93 f3f5 	sdiv	r3, r3, r5
    if (wAvrQuadraticError < wAvrSquareSpeed)
 80077d0:	bfc8      	it	gt
 80077d2:	2601      	movgt	r6, #1
    wAux = wAux / (int16_t)(pHandle->_Super.bElToMecRatio);
 80077d4:	7845      	ldrb	r5, [r0, #1]
 80077d6:	fb93 f3f5 	sdiv	r3, r3, r5
    *pMecSpeedUnit = (int16_t)wAux;
 80077da:	b21d      	sxth	r5, r3
 80077dc:	800d      	strh	r5, [r1, #0]
    if (wAvrQuadraticError < wAvrSquareSpeed)
 80077de:	f880 60c9 	strb.w	r6, [r0, #201]	@ 0xc9
    pHandle->_Super.hAvrMecSpeedUnit = (int16_t)wAux;
 80077e2:	8185      	strh	r5, [r0, #12]
    if (pHandle->IsAlgorithmConverged == false)
 80077e4:	f890 60cc 	ldrb.w	r6, [r0, #204]	@ 0xcc
    if (true == pHandle->EnableDualCheck) /*do algorithm if it's enabled*/
 80077e8:	b99f      	cbnz	r7, 8007812 <STO_CR_CalcAvrgMecSpeedUnit+0xb6>
    if (pHandle->IsAlgorithmConverged == false)
 80077ea:	b346      	cbz	r6, 800783e <STO_CR_CalcAvrgMecSpeedUnit+0xe2>
      if ((pHandle->IsSpeedReliable == false) || (bIs_Bemf_Consistent == false))
 80077ec:	42a2      	cmp	r2, r4
 80077ee:	dc23      	bgt.n	8007838 <STO_CR_CalcAvrgMecSpeedUnit+0xdc>
        pHandle->ReliabilityCounter++;
 80077f0:	f890 30cb 	ldrb.w	r3, [r0, #203]	@ 0xcb
        if (pHandle->ReliabilityCounter >= pHandle->Reliability_hysteresys)
 80077f4:	f890 2175 	ldrb.w	r2, [r0, #373]	@ 0x175
        pHandle->ReliabilityCounter++;
 80077f8:	3301      	adds	r3, #1
 80077fa:	b2db      	uxtb	r3, r3
        if (pHandle->ReliabilityCounter >= pHandle->Reliability_hysteresys)
 80077fc:	429a      	cmp	r2, r3
        pHandle->ReliabilityCounter++;
 80077fe:	f880 30cb 	strb.w	r3, [r0, #203]	@ 0xcb
        if (pHandle->ReliabilityCounter >= pHandle->Reliability_hysteresys)
 8007802:	d81c      	bhi.n	800783e <STO_CR_CalcAvrgMecSpeedUnit+0xe2>
          pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 8007804:	78c2      	ldrb	r2, [r0, #3]
 8007806:	7002      	strb	r2, [r0, #0]
          pHandle->ReliabilityCounter = 0U;
 8007808:	2300      	movs	r3, #0
 800780a:	f880 30cb 	strb.w	r3, [r0, #203]	@ 0xcb
}
 800780e:	4618      	mov	r0, r3
 8007810:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wAux = ((wAux < 0) ? (-wAux) : (wAux));  //cstat !MISRAC2012-Rule-14.3_b !RED-cond-never !RED-cmp-never
 8007812:	2b00      	cmp	r3, #0
      if (wAux < (int32_t)(pHandle->MaxAppPositiveMecSpeedUnit))
 8007814:	f8b0 517a 	ldrh.w	r5, [r0, #378]	@ 0x17a
      wAux = ((wAux < 0) ? (-wAux) : (wAux));  //cstat !MISRAC2012-Rule-14.3_b !RED-cond-never !RED-cmp-never
 8007818:	bfb8      	it	lt
 800781a:	425b      	neglt	r3, r3
      if (wAux < (int32_t)(pHandle->MaxAppPositiveMecSpeedUnit))
 800781c:	429d      	cmp	r5, r3
 800781e:	dc12      	bgt.n	8007846 <STO_CR_CalcAvrgMecSpeedUnit+0xea>
    bool bIs_Bemf_Consistent = false;
 8007820:	2500      	movs	r5, #0
    int32_t wEstBemfSq = 0;
 8007822:	462b      	mov	r3, r5
    int32_t wObsBemfSq = 0;
 8007824:	462f      	mov	r7, r5
      pHandle->Est_Bemf_Level = wEstBemfSq;
 8007826:	e9c0 7355 	strd	r7, r3, [r0, #340]	@ 0x154
      pHandle->IsBemfConsistent = bIs_Bemf_Consistent;
 800782a:	f880 5150 	strb.w	r5, [r0, #336]	@ 0x150
    if (pHandle->IsAlgorithmConverged == false)
 800782e:	b136      	cbz	r6, 800783e <STO_CR_CalcAvrgMecSpeedUnit+0xe2>
      if ((pHandle->IsSpeedReliable == false) || (bIs_Bemf_Consistent == false))
 8007830:	42a2      	cmp	r2, r4
 8007832:	dddd      	ble.n	80077f0 <STO_CR_CalcAvrgMecSpeedUnit+0x94>
 8007834:	2d00      	cmp	r5, #0
 8007836:	d0db      	beq.n	80077f0 <STO_CR_CalcAvrgMecSpeedUnit+0x94>
        pHandle->ReliabilityCounter = 0U;
 8007838:	2300      	movs	r3, #0
 800783a:	f880 30cb 	strb.w	r3, [r0, #203]	@ 0xcb
}
 800783e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        bAux = SPD_IsMecSpeedReliable (&pHandle->_Super, pMecSpeedUnit);
 8007842:	f7ff bc8f 	b.w	8007164 <SPD_IsMecSpeedReliable>
        wObsBemf = (int32_t)(pHandle->hBemf_alfa_est);
 8007846:	f9b0 5044 	ldrsh.w	r5, [r0, #68]	@ 0x44
        wObsBemf = (int32_t)(pHandle->hBemf_beta_est);
 800784a:	f9b0 7046 	ldrsh.w	r7, [r0, #70]	@ 0x46
        wObsBemfSq = wObsBemf * wObsBemf;
 800784e:	fb05 fc05 	mul.w	ip, r5, r5
        wEstBemfSq = (wEstBemf * (int32_t)(pHandle->BemfConsistencyGain)) / 64;
 8007852:	f890 5179 	ldrb.w	r5, [r0, #377]	@ 0x179
        wObsBemfSq += wObsBemf * wObsBemf;
 8007856:	fb07 c707 	mla	r7, r7, r7, ip
        wEstBemf = (wAux * 32767) / (int16_t)(pHandle->_Super.hMaxReliableMecSpeedUnit);
 800785a:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
 800785e:	f9b0 c014 	ldrsh.w	ip, [r0, #20]
 8007862:	fb93 f3fc 	sdiv	r3, r3, ip
        wEstBemfSq = (wEstBemf * (int32_t)(pHandle->BemfConsistencyGain)) / 64;
 8007866:	fb03 f505 	mul.w	r5, r3, r5
 800786a:	2d00      	cmp	r5, #0
 800786c:	bfb8      	it	lt
 800786e:	353f      	addlt	r5, #63	@ 0x3f
 8007870:	11ad      	asrs	r5, r5, #6
        wEstBemfSq *= wEstBemf;
 8007872:	fb05 f303 	mul.w	r3, r5, r3
        wEstBemfSqLo = wEstBemfSq - ((wEstBemfSq / 64) * (int32_t)(pHandle->BemfConsistencyCheck));
 8007876:	2b00      	cmp	r3, #0
 8007878:	461d      	mov	r5, r3
 800787a:	f890 c178 	ldrb.w	ip, [r0, #376]	@ 0x178
 800787e:	bfb8      	it	lt
 8007880:	f103 053f 	addlt.w	r5, r3, #63	@ 0x3f
 8007884:	11ad      	asrs	r5, r5, #6
 8007886:	fb0c 3515 	mls	r5, ip, r5, r3
        if (wObsBemfSq > wEstBemfSqLo)
 800788a:	42af      	cmp	r7, r5
 800788c:	bfd4      	ite	le
 800788e:	2500      	movle	r5, #0
 8007890:	2501      	movgt	r5, #1
 8007892:	e7c8      	b.n	8007826 <STO_CR_CalcAvrgMecSpeedUnit+0xca>
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 8007894:	462c      	mov	r4, r5
 8007896:	462b      	mov	r3, r5
 8007898:	462e      	mov	r6, r5
    int32_t wAvrSpeed_dpp = (int32_t)0;
 800789a:	46ae      	mov	lr, r5
 800789c:	e781      	b.n	80077a2 <STO_CR_CalcAvrgMecSpeedUnit+0x46>
 800789e:	bf00      	nop

080078a0 <STO_CR_Clear>:
{
 80078a0:	b570      	push	{r4, r5, r6, lr}
  * @retval none
  */
static void STO_CR_InitSpeedBuffer(STO_CR_Handle_t *pHandle)
{
  uint8_t b_i;
  uint8_t bSpeedBufferSizeUnit = pHandle->SpeedBufferSizeUnit;
 80078a2:	f890 616c 	ldrb.w	r6, [r0, #364]	@ 0x16c
    pHandle->Ialfa_est = (int32_t)0;
 80078a6:	2500      	movs	r5, #0
    pHandle->Ibeta_est = (int32_t)0;
 80078a8:	e9c0 550d 	strd	r5, r5, [r0, #52]	@ 0x34
    pHandle->wBemf_beta_est = (int32_t)0;
 80078ac:	e9c0 550f 	strd	r5, r5, [r0, #60]	@ 0x3c
    pHandle->Est_Bemf_Level = (int32_t)0;
 80078b0:	e9c0 5555 	strd	r5, r5, [r0, #340]	@ 0x154
    pHandle->DppOrigBufferSum = (int32_t)0;
 80078b4:	e9c0 5558 	strd	r5, r5, [r0, #352]	@ 0x160
{
 80078b8:	4604      	mov	r4, r0
    pHandle->_Super.hElAngle = (int16_t)0;
 80078ba:	8085      	strh	r5, [r0, #4]
    pHandle->_Super.hElSpeedDpp = (int16_t)0;
 80078bc:	81c5      	strh	r5, [r0, #14]
    pHandle->Orig_ElSpeedDpp = (int16_t)0;
 80078be:	f8a0 514e 	strh.w	r5, [r0, #334]	@ 0x14e
    pHandle->ConsistencyCounter = 0u;
 80078c2:	f8a0 50ca 	strh.w	r5, [r0, #202]	@ 0xca
    pHandle->IsAlgorithmConverged = false;
 80078c6:	f880 50cc 	strb.w	r5, [r0, #204]	@ 0xcc
    pHandle->IsBemfConsistent = false;
 80078ca:	f880 5150 	strb.w	r5, [r0, #336]	@ 0x150
    pHandle->ForceConvergency = false;
 80078ce:	f8a0 5182 	strh.w	r5, [r0, #386]	@ 0x182

  /*init speed buffer*/
  for (b_i = 0U; b_i < bSpeedBufferSizeUnit; b_i++)
 80078d2:	b15e      	cbz	r6, 80078ec <STO_CR_Clear+0x4c>
  {
    pHandle->Speed_Buffer[b_i] = (int16_t)0;
 80078d4:	0076      	lsls	r6, r6, #1
 80078d6:	4632      	mov	r2, r6
 80078d8:	4629      	mov	r1, r5
 80078da:	3048      	adds	r0, #72	@ 0x48
 80078dc:	f000 fc94 	bl	8008208 <memset>
    pHandle->Orig_Speed_Buffer[b_i] = (int16_t)0;
 80078e0:	4632      	mov	r2, r6
 80078e2:	4629      	mov	r1, r5
 80078e4:	f104 00ce 	add.w	r0, r4, #206	@ 0xce
 80078e8:	f000 fc8e 	bl	8008208 <memset>
  }

  pHandle->Speed_Buffer_Index = 0u;
 80078ec:	2300      	movs	r3, #0
 80078ee:	f884 30c8 	strb.w	r3, [r4, #200]	@ 0xc8
  pHandle->SpeedBufferOldestEl = (int16_t)0;
 80078f2:	f8c4 3168 	str.w	r3, [r4, #360]	@ 0x168
}
 80078f6:	bd70      	pop	{r4, r5, r6, pc}

080078f8 <STO_CR_Init>:
{
 80078f8:	b510      	push	{r4, lr}
    pHandle->ConsistencyCounter = pHandle->StartUpConsistThreshold;
 80078fa:	f890 1174 	ldrb.w	r1, [r0, #372]	@ 0x174
    htempk = (int16_t)(C6_COMP_CONST1 / (pHandle->hF2));
 80078fe:	4b17      	ldr	r3, [pc, #92]	@ (800795c <STO_CR_Init+0x64>)
 8007900:	f9b0 e02e 	ldrsh.w	lr, [r0, #46]	@ 0x2e
    pHandle->ConsistencyCounter = pHandle->StartUpConsistThreshold;
 8007904:	f880 10ca 	strb.w	r1, [r0, #202]	@ 0xca
    pHandle->EnableDualCheck = true;
 8007908:	2201      	movs	r2, #1
    pHandle->F3POW2 = 0u;
 800790a:	2100      	movs	r1, #0
    htempk = (int16_t)(C6_COMP_CONST1 / (pHandle->hF2));
 800790c:	fb93 f3fe 	sdiv	r3, r3, lr
 8007910:	b21b      	sxth	r3, r3
{
 8007912:	4604      	mov	r4, r0
    pHandle->EnableDualCheck = true;
 8007914:	f880 215c 	strb.w	r2, [r0, #348]	@ 0x15c
    pHandle->F3POW2 = 0u;
 8007918:	8641      	strh	r1, [r0, #50]	@ 0x32
    while (htempk != 0)
 800791a:	b1eb      	cbz	r3, 8007958 <STO_CR_Init+0x60>
    wAux = (int32_t)1;
 800791c:	4611      	mov	r1, r2
      htempk /= (int16_t)2;
 800791e:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    while (htempk != 0)
 8007922:	f102 0c01 	add.w	ip, r2, #1
 8007926:	105b      	asrs	r3, r3, #1
 8007928:	4610      	mov	r0, r2
      wAux *= (int32_t)2;
 800792a:	ea4f 0141 	mov.w	r1, r1, lsl #1
    while (htempk != 0)
 800792e:	fa1f f28c 	uxth.w	r2, ip
 8007932:	d1f4      	bne.n	800791e <STO_CR_Init+0x26>
    pHandle->hF3 = (int16_t)wAux;
 8007934:	b20a      	sxth	r2, r1
 8007936:	8660      	strh	r0, [r4, #50]	@ 0x32
    wAux = (int32_t)(pHandle->hF2) * pHandle->hF3;
 8007938:	fb0e f102 	mul.w	r1, lr, r2
    pHandle->hC6 = (int16_t)(wAux / C6_COMP_CONST2);
 800793c:	4808      	ldr	r0, [pc, #32]	@ (8007960 <STO_CR_Init+0x68>)
    pHandle->hF3 = (int16_t)wAux;
 800793e:	8622      	strh	r2, [r4, #48]	@ 0x30
    pHandle->hC6 = (int16_t)(wAux / C6_COMP_CONST2);
 8007940:	17cb      	asrs	r3, r1, #31
 8007942:	fb80 0101 	smull	r0, r1, r0, r1
 8007946:	ebc3 2321 	rsb	r3, r3, r1, asr #8
 800794a:	8563      	strh	r3, [r4, #42]	@ 0x2a
    STO_CR_Clear(pHandle);
 800794c:	4620      	mov	r0, r4
 800794e:	f7ff ffa7 	bl	80078a0 <STO_CR_Clear>
    pHandle->_Super.hMecAccelUnitP = 0;
 8007952:	2300      	movs	r3, #0
 8007954:	8263      	strh	r3, [r4, #18]
}
 8007956:	bd10      	pop	{r4, pc}
 8007958:	4671      	mov	r1, lr
 800795a:	e7ef      	b.n	800793c <STO_CR_Init+0x44>
 800795c:	000fea5e 	.word	0x000fea5e
 8007960:	06488dc5 	.word	0x06488dc5

08007964 <STO_CR_GetEstimatedBemf>:
    Vaux.alpha = pHandle->hBemf_alfa_est;
    Vaux.beta = pHandle->hBemf_beta_est;
#ifdef NULL_PTR_CHECK_STO_COR_SPD_POS_FDB
  }
#endif
  return (Vaux);
 8007964:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8007966:	2200      	movs	r2, #0
 8007968:	b299      	uxth	r1, r3
 800796a:	f361 020f 	bfi	r2, r1, #0, #16
 800796e:	0c1b      	lsrs	r3, r3, #16
 8007970:	f363 421f 	bfi	r2, r3, #16, #16
{
 8007974:	b082      	sub	sp, #8
}
 8007976:	4610      	mov	r0, r2
 8007978:	b002      	add	sp, #8
 800797a:	4770      	bx	lr

0800797c <STO_CR_GetEstimatedCurrent>:
  * @param  pHandle: handler of the current instance of the STO CORDIC component
  * @retval alphabeta_t State observer estimated stator current Ialpha-beta
  */
//cstat !MISRAC2012-Rule-8.13
__weak alphabeta_t STO_CR_GetEstimatedCurrent(STO_CR_Handle_t *pHandle)
{
 800797c:	4603      	mov	r3, r0
    Iaux.beta = (int16_t)(pHandle->Ibeta_est / (pHandle->hF1));
#endif
#ifdef NULL_PTR_CHECK_STO_COR_SPD_POS_FDB
  }
#endif
  return (Iaux);
 800797e:	2000      	movs	r0, #0
    Iaux.alpha = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 8007980:	f8b3 117c 	ldrh.w	r1, [r3, #380]	@ 0x17c
    Iaux.beta = (int16_t)(pHandle->Ibeta_est >> pHandle->F1LOG);
 8007984:	e9d3 230d 	ldrd	r2, r3, [r3, #52]	@ 0x34
    Iaux.alpha = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 8007988:	410a      	asrs	r2, r1
  return (Iaux);
 800798a:	410b      	asrs	r3, r1
 800798c:	b292      	uxth	r2, r2
 800798e:	f362 000f 	bfi	r0, r2, #0, #16
 8007992:	b29b      	uxth	r3, r3
{
 8007994:	b082      	sub	sp, #8
  return (Iaux);
 8007996:	f363 401f 	bfi	r0, r3, #16, #16
}
 800799a:	b002      	add	sp, #8
 800799c:	4770      	bx	lr
 800799e:	bf00      	nop

080079a0 <STO_CR_GetObserverGains>:
    /* Nothing to do */
  }
  else
  {
#endif
    *phC2 = pHandle->hC2;
 80079a0:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 80079a4:	800b      	strh	r3, [r1, #0]
    *phC4 = pHandle->hC4;
 80079a6:	f9b0 3026 	ldrsh.w	r3, [r0, #38]	@ 0x26
 80079aa:	8013      	strh	r3, [r2, #0]
#ifdef NULL_PTR_CHECK_STO_COR_SPD_POS_FDB
  }
#endif
}
 80079ac:	4770      	bx	lr
 80079ae:	bf00      	nop

080079b0 <STO_CR_SetObserverGains>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hC2 = hhC1;
 80079b0:	8441      	strh	r1, [r0, #34]	@ 0x22
    pHandle->hC4 = hhC2;
 80079b2:	84c2      	strh	r2, [r0, #38]	@ 0x26
#ifdef NULL_PTR_CHECK_STO_COR_SPD_POS_FDB
  }
#endif
}
 80079b4:	4770      	bx	lr
 80079b6:	bf00      	nop

080079b8 <STO_CR_CalcAvrgElSpeedDpp>:
    int32_t wSumOrig = pHandle->DppOrigBufferSum;
    int32_t wAvrSpeed_dpp;
    int16_t hSpeedBufferSizedpp = (int16_t)(pHandle->SpeedBufferSizedpp);
    int16_t hSpeedBufferSizeUnit = (int16_t)(pHandle->SpeedBufferSizeUnit);
    int16_t hBufferSizeDiff;
    int16_t hIndexNew = (int16_t)pHandle->Speed_Buffer_Index;
 80079b8:	f890 10c8 	ldrb.w	r1, [r0, #200]	@ 0xc8
    int16_t hIndexOld;
    int16_t hIndexOldTemp;

    hBufferSizeDiff = hSpeedBufferSizeUnit - hSpeedBufferSizedpp;
 80079bc:	f890 216d 	ldrb.w	r2, [r0, #365]	@ 0x16d
 80079c0:	eb00 0c41 	add.w	ip, r0, r1, lsl #1
{
 80079c4:	b510      	push	{r4, lr}

    if (0 == hBufferSizeDiff)
    {
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->SpeedBufferOldestEl;
 80079c6:	f9bc 3048 	ldrsh.w	r3, [ip, #72]	@ 0x48
 80079ca:	f8d0 4160 	ldr.w	r4, [r0, #352]	@ 0x160
    int16_t hSpeedBufferSizeUnit = (int16_t)(pHandle->SpeedBufferSizeUnit);
 80079ce:	f890 e16c 	ldrb.w	lr, [r0, #364]	@ 0x16c
      wSumOrig = wSumOrig + pHandle->Orig_Speed_Buffer[hIndexNew] - pHandle->OrigSpeedBufferOldestEl;
 80079d2:	f9bc c0ce 	ldrsh.w	ip, [ip, #206]	@ 0xce
    hBufferSizeDiff = hSpeedBufferSizeUnit - hSpeedBufferSizedpp;
 80079d6:	ebae 0202 	sub.w	r2, lr, r2
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->SpeedBufferOldestEl;
 80079da:	4423      	add	r3, r4
      wSumOrig = wSumOrig + pHandle->Orig_Speed_Buffer[hIndexNew] - pHandle->OrigSpeedBufferOldestEl;
 80079dc:	f8d0 4164 	ldr.w	r4, [r0, #356]	@ 0x164
    hBufferSizeDiff = hSpeedBufferSizeUnit - hSpeedBufferSizedpp;
 80079e0:	b292      	uxth	r2, r2
      wSumOrig = wSumOrig + pHandle->Orig_Speed_Buffer[hIndexNew] - pHandle->OrigSpeedBufferOldestEl;
 80079e2:	44a4      	add	ip, r4
    if (0 == hBufferSizeDiff)
 80079e4:	b99a      	cbnz	r2, 8007a0e <STO_CR_CalcAvrgElSpeedDpp+0x56>
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->SpeedBufferOldestEl;
 80079e6:	f9b0 1168 	ldrsh.w	r1, [r0, #360]	@ 0x168
      wSumOrig = wSumOrig + pHandle->Orig_Speed_Buffer[hIndexNew] - pHandle->OrigSpeedBufferOldestEl;
 80079ea:	f9b0 216a 	ldrsh.w	r2, [r0, #362]	@ 0x16a
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->SpeedBufferOldestEl;
 80079ee:	1a5b      	subs	r3, r3, r1
      wSumOrig = wSumOrig + pHandle->Orig_Speed_Buffer[hIndexNew] - pHandle->OrigSpeedBufferOldestEl;
 80079f0:	ebac 0202 	sub.w	r2, ip, r2
      wSumOrig = wSumOrig + pHandle->Orig_Speed_Buffer[hIndexNew] - pHandle->Orig_Speed_Buffer[hIndexOld];
    }

#ifndef FULL_MISRA_C_COMPLIANCY_STO_CORDIC
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    wAvrSpeed_dpp = (int32_t)(wSum >> pHandle->SpeedBufferSizedppLOG);
 80079f4:	f8b0 1180 	ldrh.w	r1, [r0, #384]	@ 0x180
    }
#endif

    pHandle->Orig_ElSpeedDpp = (int16_t)wAvrSpeed_dpp;

    pHandle->DppBufferSum = wSum;
 80079f8:	f8c0 3160 	str.w	r3, [r0, #352]	@ 0x160
    wAvrSpeed_dpp = (int32_t)(wSum >> pHandle->SpeedBufferSizedppLOG);
 80079fc:	410b      	asrs	r3, r1
    wAvrSpeed_dpp = (int32_t)(wSumOrig >> pHandle->SpeedBufferSizedppLOG);
 80079fe:	fa42 f101 	asr.w	r1, r2, r1
    pHandle->_Super.hElSpeedDpp = (int16_t)wAvrSpeed_dpp;
 8007a02:	81c3      	strh	r3, [r0, #14]
    pHandle->Orig_ElSpeedDpp = (int16_t)wAvrSpeed_dpp;
 8007a04:	f8a0 114e 	strh.w	r1, [r0, #334]	@ 0x14e

    pHandle->DppOrigBufferSum = wSumOrig;
 8007a08:	f8c0 2164 	str.w	r2, [r0, #356]	@ 0x164
#ifdef NULL_PTR_CHECK_STO_COR_SPD_POS_FDB
  }
#endif
}
 8007a0c:	bd10      	pop	{r4, pc}
      hIndexOldTemp = hIndexNew + hBufferSizeDiff;
 8007a0e:	4411      	add	r1, r2
 8007a10:	b20a      	sxth	r2, r1
      if (hIndexOldTemp >= hSpeedBufferSizeUnit)
 8007a12:	4596      	cmp	lr, r2
      hIndexOldTemp = hIndexNew + hBufferSizeDiff;
 8007a14:	b289      	uxth	r1, r1
        hIndexOld = hIndexOldTemp - hSpeedBufferSizeUnit;
 8007a16:	bfdc      	itt	le
 8007a18:	eba1 010e 	suble.w	r1, r1, lr
 8007a1c:	b20a      	sxthle	r2, r1
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->Speed_Buffer[hIndexOld];
 8007a1e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8007a22:	f9b2 1048 	ldrsh.w	r1, [r2, #72]	@ 0x48
      wSumOrig = wSumOrig + pHandle->Orig_Speed_Buffer[hIndexNew] - pHandle->Orig_Speed_Buffer[hIndexOld];
 8007a26:	f9b2 20ce 	ldrsh.w	r2, [r2, #206]	@ 0xce
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->Speed_Buffer[hIndexOld];
 8007a2a:	1a5b      	subs	r3, r3, r1
      wSumOrig = wSumOrig + pHandle->Orig_Speed_Buffer[hIndexNew] - pHandle->Orig_Speed_Buffer[hIndexOld];
 8007a2c:	ebac 0202 	sub.w	r2, ip, r2
 8007a30:	e7e0      	b.n	80079f4 <STO_CR_CalcAvrgElSpeedDpp+0x3c>
 8007a32:	bf00      	nop

08007a34 <STO_CR_GetEstimatedBemfLevel>:
#ifdef NULL_PTR_CHECK_STO_COR_SPD_POS_FDB
  return ((NULL == pHandle) ? 0 : pHandle->Est_Bemf_Level);
#else
  return (pHandle->Est_Bemf_Level);
#endif
}
 8007a34:	f8d0 0158 	ldr.w	r0, [r0, #344]	@ 0x158
 8007a38:	4770      	bx	lr
 8007a3a:	bf00      	nop

08007a3c <STO_CR_GetObservedBemfLevel>:
#ifdef NULL_PTR_CHECK_STO_COR_SPD_POS_FDB
  return ((NULL == pHandle) ? 0 : pHandle->Obs_Bemf_Level);
#else
  return (pHandle->Obs_Bemf_Level);
#endif
}
 8007a3c:	f8d0 0154 	ldr.w	r0, [r0, #340]	@ 0x154
 8007a40:	4770      	bx	lr
 8007a42:	bf00      	nop

08007a44 <STO_PLL_CalcElAngle>:
  * @param  pInput: Pointer to the observer inputs structure.
  * @retval int16_t Rotor electrical angle (s16Degrees).
  */
//cstat !MISRAC2012-Rule-8.13
__weak int16_t STO_PLL_CalcElAngle(STO_PLL_Handle_t *pHandle, Observer_Inputs_t *pInputs)
{
 8007a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int16_t retValue;

  if ((MC_NULL == pHandle) || (MC_NULL == pInputs))
 8007a48:	4604      	mov	r4, r0
{
 8007a4a:	b089      	sub	sp, #36	@ 0x24
  if ((MC_NULL == pHandle) || (MC_NULL == pInputs))
 8007a4c:	2800      	cmp	r0, #0
 8007a4e:	f000 80cf 	beq.w	8007bf0 <STO_PLL_CalcElAngle+0x1ac>
 8007a52:	2900      	cmp	r1, #0
 8007a54:	f000 80cf 	beq.w	8007bf6 <STO_PLL_CalcElAngle+0x1b2>
    int16_t hIbeta_err;
    int16_t hRotor_Speed;
    int16_t hValfa;
    int16_t hVbeta;

    if (pHandle->wBemf_alfa_est > (((int32_t)pHandle->hF2) * INT16_MAX))
 8007a58:	f9b0 302e 	ldrsh.w	r3, [r0, #46]	@ 0x2e
 8007a5c:	6e87      	ldr	r7, [r0, #104]	@ 0x68
 8007a5e:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
 8007a62:	429f      	cmp	r7, r3
 8007a64:	f340 80d1 	ble.w	8007c0a <STO_PLL_CalcElAngle+0x1c6>
    {
      pHandle->wBemf_alfa_est = INT16_MAX * ((int32_t)pHandle->hF2);
 8007a68:	6683      	str	r3, [r0, #104]	@ 0x68
 8007a6a:	461f      	mov	r7, r3
    {
      /* Nothing to do */
    }
#ifndef FULL_MISRA_C_COMPLIANCY_STO_PLL
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est >> pHandle->F2LOG);
 8007a6c:	f8b4 511e 	ldrh.w	r5, [r4, #286]	@ 0x11e
#else
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est / pHandle->hF2);
#endif

    if (pHandle->wBemf_beta_est > (INT16_MAX * ((int32_t)pHandle->hF2)))
 8007a70:	6ee6      	ldr	r6, [r4, #108]	@ 0x6c
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est >> pHandle->F2LOG);
 8007a72:	fa47 f205 	asr.w	r2, r7, r5
    if (pHandle->wBemf_beta_est > (INT16_MAX * ((int32_t)pHandle->hF2)))
 8007a76:	42b3      	cmp	r3, r6
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est >> pHandle->F2LOG);
 8007a78:	9201      	str	r2, [sp, #4]
 8007a7a:	fa0f fe82 	sxth.w	lr, r2
    if (pHandle->wBemf_beta_est > (INT16_MAX * ((int32_t)pHandle->hF2)))
 8007a7e:	f2c0 80c1 	blt.w	8007c04 <STO_PLL_CalcElAngle+0x1c0>
    {
      pHandle->wBemf_beta_est = INT16_MAX * ((int32_t)pHandle->hF2);
    }
    else if (pHandle->wBemf_beta_est <= (-INT16_MAX * ((int32_t)pHandle->hF2)))
 8007a82:	425b      	negs	r3, r3
 8007a84:	429e      	cmp	r6, r3
 8007a86:	f340 80bd 	ble.w	8007c04 <STO_PLL_CalcElAngle+0x1c0>
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est >> pHandle->F2LOG);
#else
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est / pHandle->hF2);
#endif

    if (pHandle->Ialfa_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 8007a8a:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	@ 0x2c
 8007a8e:	f8d4 9060 	ldr.w	r9, [r4, #96]	@ 0x60
 8007a92:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est >> pHandle->F2LOG);
 8007a96:	fa46 f505 	asr.w	r5, r6, r5
    if (pHandle->Ialfa_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 8007a9a:	4599      	cmp	r9, r3
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est >> pHandle->F2LOG);
 8007a9c:	fa0f fc85 	sxth.w	ip, r5
    if (pHandle->Ialfa_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 8007aa0:	f340 80b9 	ble.w	8007c16 <STO_PLL_CalcElAngle+0x1d2>
    {
      pHandle->Ialfa_est = INT16_MAX * ((int32_t)pHandle->hF1);
 8007aa4:	6623      	str	r3, [r4, #96]	@ 0x60
 8007aa6:	4699      	mov	r9, r3
    else
    {
      /* Nothing to do */
    }

    if (pHandle->Ibeta_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 8007aa8:	f8d4 8064 	ldr.w	r8, [r4, #100]	@ 0x64
 8007aac:	4543      	cmp	r3, r8
 8007aae:	f2c0 80a6 	blt.w	8007bfe <STO_PLL_CalcElAngle+0x1ba>
    {
      pHandle->Ibeta_est = INT16_MAX * ((int32_t)pHandle->hF1);
    }
    else if (pHandle->Ibeta_est <= (-INT16_MAX * ((int32_t)pHandle->hF1)))
 8007ab2:	425b      	negs	r3, r3
 8007ab4:	4598      	cmp	r8, r3
 8007ab6:	f340 80a2 	ble.w	8007bfe <STO_PLL_CalcElAngle+0x1ba>
    hIbeta_err = (int16_t)(pHandle->Ibeta_est >> pHandle->F1LOG);
#else
    hIbeta_err = (int16_t)(pHandle->Ibeta_est / pHandle->hF1);
#endif

    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 8007aba:	88c8      	ldrh	r0, [r1, #6]

    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.alpha;
 8007abc:	f8b1 a008 	ldrh.w	sl, [r1, #8]
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 8007ac0:	888b      	ldrh	r3, [r1, #4]
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 8007ac2:	f8ad 0014 	strh.w	r0, [sp, #20]
    hValfa = (int16_t)(wAux >> 16); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
#else
    hValfa = (int16_t)(wAux / 65536);
#endif

    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.beta;
 8007ac6:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 8007aca:	f8ad 3010 	strh.w	r3, [sp, #16]
    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.alpha;
 8007ace:	f9b1 3000 	ldrsh.w	r3, [r1]
    hIalfa_err = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 8007ad2:	f8b4 211c 	ldrh.w	r2, [r4, #284]	@ 0x11c
    hAux = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
#else
    hAux = (int16_t)(pHandle->Ialfa_est / pHandle->hF1);
#endif

    wAux = ((int32_t)pHandle->hC1) * hAux;
 8007ad6:	f9b4 b020 	ldrsh.w	fp, [r4, #32]
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 8007ada:	9904      	ldr	r1, [sp, #16]
    wAux = wAux * pHandle->hC6;
    wAux = pHandle->_Super.hElSpeedDpp * wAux;
    wBemf_beta_est_Next -= wAux;

    /* Calls the PLL blockset */
    pHandle->hBemf_alfa_est = hAux_Alfa;
 8007adc:	f8a4 e070 	strh.w	lr, [r4, #112]	@ 0x70
    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.beta;
 8007ae0:	fb0a f000 	mul.w	r0, sl, r0
    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.alpha;
 8007ae4:	fb0a f303 	mul.w	r3, sl, r3
    hVbeta = ( int16_t ) ( wAux >> 16 ); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8007ae8:	1400      	asrs	r0, r0, #16
    hValfa = (int16_t)(wAux >> 16); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8007aea:	141b      	asrs	r3, r3, #16
    hVbeta = ( int16_t ) ( wAux >> 16 ); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8007aec:	9003      	str	r0, [sp, #12]
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 8007aee:	9805      	ldr	r0, [sp, #20]
    hValfa = (int16_t)(wAux >> 16); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8007af0:	9302      	str	r3, [sp, #8]
    hIalfa_err = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 8007af2:	fa49 f302 	asr.w	r3, r9, r2
    hIbeta_err = (int16_t)(pHandle->Ibeta_est >> pHandle->F1LOG);
 8007af6:	fa48 f202 	asr.w	r2, r8, r2
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 8007afa:	eba2 0a00 	sub.w	sl, r2, r0
    wAux = ((int32_t)pHandle->hC1) * hAux;
 8007afe:	fb12 f20b 	smulbb	r2, r2, fp
    wIbeta_est_Next = pHandle->Ibeta_est - wAux;
 8007b02:	eba8 0202 	sub.w	r2, r8, r2
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 8007b06:	1a59      	subs	r1, r3, r1
    wAux = ((int32_t)pHandle->hC2) * hIalfa_err;
 8007b08:	f9b4 8022 	ldrsh.w	r8, [r4, #34]	@ 0x22
    wIalfa_est_Next += wAux;
 8007b0c:	9802      	ldr	r0, [sp, #8]
    pHandle->hBemf_beta_est = hAux_Beta;
 8007b0e:	f8a4 c072 	strh.w	ip, [r4, #114]	@ 0x72
    wAux = ((int32_t)pHandle->hC1) * hAux;
 8007b12:	fb13 f30b 	smulbb	r3, r3, fp
    wIalfa_est_Next = pHandle->Ialfa_est - wAux;
 8007b16:	eba9 0303 	sub.w	r3, r9, r3
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 8007b1a:	b209      	sxth	r1, r1
    wAux = ((int32_t)pHandle->hC5) * hValfa;
 8007b1c:	f9b4 9028 	ldrsh.w	r9, [r4, #40]	@ 0x28
    wIalfa_est_Next += wAux;
 8007b20:	fb08 3301 	mla	r3, r8, r1, r3
    wIalfa_est_Next += wAux;
 8007b24:	fb09 3300 	mla	r3, r9, r0, r3
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 8007b28:	fa0f fa8a 	sxth.w	sl, sl
    wIbeta_est_Next += wAux;
 8007b2c:	9803      	ldr	r0, [sp, #12]
    wIbeta_est_Next += wAux;
 8007b2e:	fb08 280a 	mla	r8, r8, sl, r2
    wIbeta_est_Next += wAux;
 8007b32:	fb09 8800 	mla	r8, r9, r0, r8
    wAux = ((int32_t)pHandle->hC4) * hIalfa_err;
 8007b36:	f9b4 0026 	ldrsh.w	r0, [r4, #38]	@ 0x26
    wAux = (int32_t)hAux_Beta >> pHandle->F3POW2; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8007b3a:	8e62      	ldrh	r2, [r4, #50]	@ 0x32
    wAux = wAux * pHandle->hC6;
 8007b3c:	f9b4 902a 	ldrsh.w	r9, [r4, #42]	@ 0x2a
    wBemf_alfa_est_Next = pHandle->wBemf_alfa_est + wAux;
 8007b40:	fb01 7100 	mla	r1, r1, r0, r7
    wBemf_beta_est_Next = pHandle->wBemf_beta_est + wAux;
 8007b44:	fb00 600a 	mla	r0, r0, sl, r6
    wAux = ((int32_t)pHandle->hC3) * hAux_Alfa;
 8007b48:	f9b4 6024 	ldrsh.w	r6, [r4, #36]	@ 0x24
    wIalfa_est_Next -= wAux;
 8007b4c:	fb06 371e 	mls	r7, r6, lr, r3
    wIbeta_est_Next -= wAux;
 8007b50:	fb06 861c 	mls	r6, r6, ip, r8
    wAux = (int32_t)hAux_Alfa >> pHandle->F3POW2; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8007b54:	fa4e fe02 	asr.w	lr, lr, r2
    wAux = (int32_t)hAux_Beta >> pHandle->F3POW2; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8007b58:	fa4c fc02 	asr.w	ip, ip, r2
    wAux = pHandle->_Super.hElSpeedDpp * wAux;
 8007b5c:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
    wAux = wAux * pHandle->hC6;
 8007b60:	fb0e f309 	mul.w	r3, lr, r9
    wBemf_beta_est_Next -= wAux;
 8007b64:	fb03 0812 	mls	r8, r3, r2, r0

    if (0 == pHandle->hForcedDirection)
 8007b68:	f994 3124 	ldrsb.w	r3, [r4, #292]	@ 0x124
    wAux = wAux * pHandle->hC6;
 8007b6c:	fb0c fc09 	mul.w	ip, ip, r9
    wBemf_alfa_est_Next += wAux;
 8007b70:	fb0c 1902 	mla	r9, ip, r2, r1
    if (0 == pHandle->hForcedDirection)
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d154      	bne.n	8007c22 <STO_PLL_CalcElAngle+0x1de>
    {
      /* We are in auxiliary mode, then rely on the speed detected */
      if(pHandle->_Super.hElSpeedDpp >= 0)
 8007b78:	2a00      	cmp	r2, #0
 8007b7a:	f64f 7aff 	movw	sl, #65535	@ 0xffff
 8007b7e:	bfa8      	it	ge
 8007b80:	f04f 0a01 	movge.w	sl, #1
  int16_t hAux1;
  int16_t hAux2;
  int16_t hOutput;
  Trig_Components Local_Components;

  Local_Components = MCM_Trig_Functions(pHandle->_Super.hElAngle);
 8007b84:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8007b88:	f7f9 fbde 	bl	8001348 <MCM_Trig_Functions>
    hAux_Alfa = (int16_t)(hAux_Alfa * wDirection);
 8007b8c:	9b01      	ldr	r3, [sp, #4]
    hAux_Beta = (int16_t)(hAux_Beta * wDirection);
 8007b8e:	fb15 f50a 	smulbb	r5, r5, sl
    hAux_Alfa = (int16_t)(hAux_Alfa * wDirection);
 8007b92:	fb13 f30a 	smulbb	r3, r3, sl
    hRotor_Speed = STO_ExecutePLL(pHandle, hAux_Alfa, -hAux_Beta);
 8007b96:	426d      	negs	r5, r5

  /* Alfa & Beta BEMF multiplied by Cos & Sin */
  wAlfa_Sin_tmp = ((int32_t )hBemf_alfa_est) * ((int32_t )Local_Components.hSin);
  wBeta_Cos_tmp = ((int32_t )hBemf_beta_est) * ((int32_t )Local_Components.hCos);
 8007b98:	fb10 f505 	smulbb	r5, r0, r5
  wAlfa_Sin_tmp = ((int32_t )hBemf_alfa_est) * ((int32_t )Local_Components.hSin);
 8007b9c:	fb10 f023 	smultb	r0, r0, r3
#else
  hAux2 = (int16_t)(wAlfa_Sin_tmp / 32768);
#endif

  /* Speed PI regulator */
  hOutput = PI_Controller(& pHandle->PIRegulator, (int32_t)(hAux1 ) - hAux2);
 8007ba0:	f340 31cf 	sbfx	r1, r0, #15, #16
 8007ba4:	f345 35cf 	sbfx	r5, r5, #15, #16
 8007ba8:	1a69      	subs	r1, r5, r1
 8007baa:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 8007bae:	f7fe faef 	bl	8006190 <PI_Controller>
  uint8_t bBuffer_index = pHandle->Speed_Buffer_Index;
 8007bb2:	f894 30f4 	ldrb.w	r3, [r4, #244]	@ 0xf4
  if (bBuffer_index == pHandle->SpeedBufferSizeUnit)
 8007bb6:	f894 210e 	ldrb.w	r2, [r4, #270]	@ 0x10e
    pHandle->_Super.InstantaneousElSpeedDpp = hRotor_Speed;
 8007bba:	8220      	strh	r0, [r4, #16]
  bBuffer_index++;
 8007bbc:	3301      	adds	r3, #1
 8007bbe:	b2db      	uxtb	r3, r3
  if (bBuffer_index == pHandle->SpeedBufferSizeUnit)
 8007bc0:	429a      	cmp	r2, r3
  pHandle->SpeedBufferOldestEl = pHandle->Speed_Buffer[bBuffer_index];
 8007bc2:	bf12      	itee	ne
 8007bc4:	461a      	movne	r2, r3
 8007bc6:	2200      	moveq	r2, #0
    bBuffer_index = 0U;
 8007bc8:	4613      	moveq	r3, r2
  pHandle->SpeedBufferOldestEl = pHandle->Speed_Buffer[bBuffer_index];
 8007bca:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8007bce:	f9b2 1074 	ldrsh.w	r1, [r2, #116]	@ 0x74
 8007bd2:	f8a4 110c 	strh.w	r1, [r4, #268]	@ 0x10c
  pHandle->Speed_Buffer[bBuffer_index] = hRotor_Speed;
 8007bd6:	f8a2 0074 	strh.w	r0, [r2, #116]	@ 0x74
  pHandle->Speed_Buffer_Index = bBuffer_index;
 8007bda:	f884 30f4 	strb.w	r3, [r4, #244]	@ 0xf4
    pHandle->_Super.hElAngle += hRotor_Speed;
 8007bde:	88a3      	ldrh	r3, [r4, #4]
    pHandle->Ialfa_est = wIalfa_est_Next;
 8007be0:	6627      	str	r7, [r4, #96]	@ 0x60
    pHandle->_Super.hElAngle += hRotor_Speed;
 8007be2:	4418      	add	r0, r3
    pHandle->Ibeta_est = wIbeta_est_Next;
 8007be4:	e9c4 6919 	strd	r6, r9, [r4, #100]	@ 0x64
    pHandle->_Super.hElAngle += hRotor_Speed;
 8007be8:	b200      	sxth	r0, r0
    pHandle->wBemf_beta_est = wBemf_beta_est_Next;
 8007bea:	f8c4 806c 	str.w	r8, [r4, #108]	@ 0x6c
    pHandle->_Super.hElAngle += hRotor_Speed;
 8007bee:	80a0      	strh	r0, [r4, #4]
}
 8007bf0:	b009      	add	sp, #36	@ 0x24
 8007bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    retValue = 0;
 8007bf6:	4608      	mov	r0, r1
}
 8007bf8:	b009      	add	sp, #36	@ 0x24
 8007bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pHandle->Ibeta_est = -INT16_MAX * ((int32_t)pHandle->hF1);
 8007bfe:	6663      	str	r3, [r4, #100]	@ 0x64
 8007c00:	4698      	mov	r8, r3
 8007c02:	e75a      	b.n	8007aba <STO_PLL_CalcElAngle+0x76>
      pHandle->wBemf_beta_est = (-INT16_MAX * ((int32_t)pHandle->hF2));
 8007c04:	66e3      	str	r3, [r4, #108]	@ 0x6c
 8007c06:	461e      	mov	r6, r3
 8007c08:	e73f      	b.n	8007a8a <STO_PLL_CalcElAngle+0x46>
    else if (pHandle->wBemf_alfa_est <= (-INT16_MAX * ((int32_t)pHandle->hF2)))
 8007c0a:	425a      	negs	r2, r3
 8007c0c:	4297      	cmp	r7, r2
      pHandle->wBemf_alfa_est = -INT16_MAX * ((int32_t)pHandle->hF2);
 8007c0e:	bfdc      	itt	le
 8007c10:	6682      	strle	r2, [r0, #104]	@ 0x68
 8007c12:	4617      	movle	r7, r2
 8007c14:	e72a      	b.n	8007a6c <STO_PLL_CalcElAngle+0x28>
    else if (pHandle->Ialfa_est <= (-INT16_MAX * ((int32_t)pHandle->hF1)))
 8007c16:	425a      	negs	r2, r3
 8007c18:	4591      	cmp	r9, r2
      pHandle->Ialfa_est = -INT16_MAX * ((int32_t)pHandle->hF1);
 8007c1a:	bfdc      	itt	le
 8007c1c:	6622      	strle	r2, [r4, #96]	@ 0x60
 8007c1e:	4691      	movle	r9, r2
 8007c20:	e742      	b.n	8007aa8 <STO_PLL_CalcElAngle+0x64>
    hAux_Alfa = (int16_t)(hAux_Alfa * wDirection);
 8007c22:	fa1f fa83 	uxth.w	sl, r3
 8007c26:	e7ad      	b.n	8007b84 <STO_PLL_CalcElAngle+0x140>

08007c28 <STO_PLL_CalcAvrgMecSpeedUnit>:
{
 8007c28:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t i, bSpeedBufferSizeUnit = pHandle->SpeedBufferSizeUnit;
 8007c2a:	f890 510e 	ldrb.w	r5, [r0, #270]	@ 0x10e
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 8007c2e:	2d00      	cmp	r5, #0
 8007c30:	f000 8096 	beq.w	8007d60 <STO_PLL_CalcAvrgMecSpeedUnit+0x138>
 8007c34:	f100 0272 	add.w	r2, r0, #114	@ 0x72
 8007c38:	eb02 0445 	add.w	r4, r2, r5, lsl #1
 8007c3c:	4613      	mov	r3, r2
    int32_t wAvrSpeed_dpp = (int32_t)0;
 8007c3e:	f04f 0c00 	mov.w	ip, #0
      wAvrSpeed_dpp += (int32_t)(pHandle->Speed_Buffer[i]);
 8007c42:	f933 ef02 	ldrsh.w	lr, [r3, #2]!
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 8007c46:	42a3      	cmp	r3, r4
      wAvrSpeed_dpp += (int32_t)(pHandle->Speed_Buffer[i]);
 8007c48:	44f4      	add	ip, lr
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 8007c4a:	d1fa      	bne.n	8007c42 <STO_PLL_CalcAvrgMecSpeedUnit+0x1a>
      wAvrSpeed_dpp = wAvrSpeed_dpp / ((int16_t)bSpeedBufferSizeUnit);
 8007c4c:	fb9c fef5 	sdiv	lr, ip, r5
    int32_t wAvrQuadraticError = 0;
 8007c50:	f04f 0c00 	mov.w	ip, #0
      wError = ((int32_t)pHandle->Speed_Buffer[i]) - wAvrSpeed_dpp;
 8007c54:	f932 3f02 	ldrsh.w	r3, [r2, #2]!
 8007c58:	eba3 030e 	sub.w	r3, r3, lr
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 8007c5c:	42a2      	cmp	r2, r4
      wAvrQuadraticError += wError;
 8007c5e:	fb03 cc03 	mla	ip, r3, r3, ip
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 8007c62:	d1f7      	bne.n	8007c54 <STO_PLL_CalcAvrgMecSpeedUnit+0x2c>
    wAvrQuadraticError = wAvrQuadraticError / ((int16_t)bSpeedBufferSizeUnit);
 8007c64:	fbbc f4f5 	udiv	r4, ip, r5
    wAvrSquareSpeed = wAvrSpeed_dpp * wAvrSpeed_dpp;
 8007c68:	fb0e f30e 	mul.w	r3, lr, lr
    int64_t lAvrSquareSpeed = (int64_t)(wAvrSquareSpeed) * (int64_t)pHandle->VariancePercentage;
 8007c6c:	17de      	asrs	r6, r3, #31
 8007c6e:	f8b0 c110 	ldrh.w	ip, [r0, #272]	@ 0x110
    wAux = wAvrSpeed_dpp * ((int32_t)pHandle->_Super.hMeasurementFrequency);
 8007c72:	8b45      	ldrh	r5, [r0, #26]
    if (true == pHandle->EnableDualCheck) /* Do algorithm if it's enabled */
 8007c74:	f890 7104 	ldrb.w	r7, [r0, #260]	@ 0x104
    int64_t lAvrSquareSpeed = (int64_t)(wAvrSquareSpeed) * (int64_t)pHandle->VariancePercentage;
 8007c78:	fbac 2303 	umull	r2, r3, ip, r3
 8007c7c:	fb0c 3306 	mla	r3, ip, r6, r3
    wAvrSquareSpeed = (int32_t)(lAvrSquareSpeed / (int64_t)128);
 8007c80:	09d2      	lsrs	r2, r2, #7
 8007c82:	ea42 6243 	orr.w	r2, r2, r3, lsl #25
    wAux = wAux * ((int32_t)pHandle->_Super.SpeedUnit);
 8007c86:	7883      	ldrb	r3, [r0, #2]
    wAux = wAvrSpeed_dpp * ((int32_t)pHandle->_Super.hMeasurementFrequency);
 8007c88:	fb0e f505 	mul.w	r5, lr, r5
    if (wAvrQuadraticError < wAvrSquareSpeed)
 8007c8c:	42a2      	cmp	r2, r4
    wAux = wAux * ((int32_t)pHandle->_Super.SpeedUnit);
 8007c8e:	fb05 f303 	mul.w	r3, r5, r3
    if (wAvrQuadraticError < wAvrSquareSpeed)
 8007c92:	bfd8      	it	le
 8007c94:	2600      	movle	r6, #0
    wAux = wAux / ((int32_t)pHandle->_Super.DPPConvFactor);
 8007c96:	69c5      	ldr	r5, [r0, #28]
 8007c98:	fb93 f3f5 	sdiv	r3, r3, r5
    if (wAvrQuadraticError < wAvrSquareSpeed)
 8007c9c:	bfc8      	it	gt
 8007c9e:	2601      	movgt	r6, #1
    wAux = wAux / ((int16_t)pHandle->_Super.bElToMecRatio);
 8007ca0:	7845      	ldrb	r5, [r0, #1]
 8007ca2:	fb93 f3f5 	sdiv	r3, r3, r5
    *pMecSpeedUnit = (int16_t)wAux;
 8007ca6:	b21d      	sxth	r5, r3
 8007ca8:	800d      	strh	r5, [r1, #0]
    if (wAvrQuadraticError < wAvrSquareSpeed)
 8007caa:	f880 60f5 	strb.w	r6, [r0, #245]	@ 0xf5
    pHandle->_Super.hAvrMecSpeedUnit = (int16_t)wAux;
 8007cae:	8185      	strh	r5, [r0, #12]
    if (false == pHandle->IsAlgorithmConverged)
 8007cb0:	f890 60f8 	ldrb.w	r6, [r0, #248]	@ 0xf8
    if (true == pHandle->EnableDualCheck) /* Do algorithm if it's enabled */
 8007cb4:	b99f      	cbnz	r7, 8007cde <STO_PLL_CalcAvrgMecSpeedUnit+0xb6>
    if (false == pHandle->IsAlgorithmConverged)
 8007cb6:	b346      	cbz	r6, 8007d0a <STO_PLL_CalcAvrgMecSpeedUnit+0xe2>
      if ((false == pHandle->IsSpeedReliable) || (false == bIs_Bemf_Consistent))
 8007cb8:	42a2      	cmp	r2, r4
 8007cba:	dc23      	bgt.n	8007d04 <STO_PLL_CalcAvrgMecSpeedUnit+0xdc>
        pHandle->ReliabilityCounter++;
 8007cbc:	f890 30f7 	ldrb.w	r3, [r0, #247]	@ 0xf7
        if (pHandle->ReliabilityCounter >= pHandle->Reliability_hysteresys)
 8007cc0:	f890 2117 	ldrb.w	r2, [r0, #279]	@ 0x117
        pHandle->ReliabilityCounter++;
 8007cc4:	3301      	adds	r3, #1
 8007cc6:	b2db      	uxtb	r3, r3
        if (pHandle->ReliabilityCounter >= pHandle->Reliability_hysteresys)
 8007cc8:	429a      	cmp	r2, r3
        pHandle->ReliabilityCounter++;
 8007cca:	f880 30f7 	strb.w	r3, [r0, #247]	@ 0xf7
        if (pHandle->ReliabilityCounter >= pHandle->Reliability_hysteresys)
 8007cce:	d81c      	bhi.n	8007d0a <STO_PLL_CalcAvrgMecSpeedUnit+0xe2>
          pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 8007cd0:	78c2      	ldrb	r2, [r0, #3]
 8007cd2:	7002      	strb	r2, [r0, #0]
          pHandle->ReliabilityCounter = 0U;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	f880 30f7 	strb.w	r3, [r0, #247]	@ 0xf7
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wAux = ((wAux < 0) ? (-wAux) : (wAux));
 8007cde:	2b00      	cmp	r3, #0
      if (wAux < (int32_t)(pHandle->MaxAppPositiveMecSpeedUnit))
 8007ce0:	f8b0 511a 	ldrh.w	r5, [r0, #282]	@ 0x11a
      wAux = ((wAux < 0) ? (-wAux) : (wAux));
 8007ce4:	bfb8      	it	lt
 8007ce6:	425b      	neglt	r3, r3
      if (wAux < (int32_t)(pHandle->MaxAppPositiveMecSpeedUnit))
 8007ce8:	429d      	cmp	r5, r3
 8007cea:	dc12      	bgt.n	8007d12 <STO_PLL_CalcAvrgMecSpeedUnit+0xea>
    bool bIs_Bemf_Consistent = false;
 8007cec:	2500      	movs	r5, #0
    int32_t wEstBemfSq = 0;
 8007cee:	462b      	mov	r3, r5
    int32_t wObsBemfSq = 0;
 8007cf0:	462f      	mov	r7, r5
      pHandle->Est_Bemf_Level = wEstBemfSq;
 8007cf2:	e9c0 733f 	strd	r7, r3, [r0, #252]	@ 0xfc
      pHandle->IsBemfConsistent = bIs_Bemf_Consistent;
 8007cf6:	f880 50f9 	strb.w	r5, [r0, #249]	@ 0xf9
    if (false == pHandle->IsAlgorithmConverged)
 8007cfa:	b136      	cbz	r6, 8007d0a <STO_PLL_CalcAvrgMecSpeedUnit+0xe2>
      if ((false == pHandle->IsSpeedReliable) || (false == bIs_Bemf_Consistent))
 8007cfc:	42a2      	cmp	r2, r4
 8007cfe:	dddd      	ble.n	8007cbc <STO_PLL_CalcAvrgMecSpeedUnit+0x94>
 8007d00:	2d00      	cmp	r5, #0
 8007d02:	d0db      	beq.n	8007cbc <STO_PLL_CalcAvrgMecSpeedUnit+0x94>
        pHandle->ReliabilityCounter = 0U;
 8007d04:	2300      	movs	r3, #0
 8007d06:	f880 30f7 	strb.w	r3, [r0, #247]	@ 0xf7
}
 8007d0a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        bAux = SPD_IsMecSpeedReliable (&pHandle->_Super, pMecSpeedUnit);
 8007d0e:	f7ff ba29 	b.w	8007164 <SPD_IsMecSpeedReliable>
        wObsBemf = (int32_t)pHandle->hBemf_alfa_est;
 8007d12:	f9b0 5070 	ldrsh.w	r5, [r0, #112]	@ 0x70
        wObsBemf = (int32_t)pHandle->hBemf_beta_est;
 8007d16:	f9b0 7072 	ldrsh.w	r7, [r0, #114]	@ 0x72
        wObsBemfSq = wObsBemf * wObsBemf;
 8007d1a:	fb05 fc05 	mul.w	ip, r5, r5
        wEstBemfSq = (wEstBemf * ((int32_t)pHandle->BemfConsistencyGain)) / 64;
 8007d1e:	f890 5119 	ldrb.w	r5, [r0, #281]	@ 0x119
        wObsBemfSq += wObsBemf * wObsBemf;
 8007d22:	fb07 c707 	mla	r7, r7, r7, ip
        wEstBemf = (wAux * 32767) / ((int16_t)pHandle->_Super.hMaxReliableMecSpeedUnit);
 8007d26:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
 8007d2a:	f9b0 c014 	ldrsh.w	ip, [r0, #20]
 8007d2e:	fb93 f3fc 	sdiv	r3, r3, ip
        wEstBemfSq = (wEstBemf * ((int32_t)pHandle->BemfConsistencyGain)) / 64;
 8007d32:	fb03 f505 	mul.w	r5, r3, r5
 8007d36:	2d00      	cmp	r5, #0
 8007d38:	bfb8      	it	lt
 8007d3a:	353f      	addlt	r5, #63	@ 0x3f
 8007d3c:	11ad      	asrs	r5, r5, #6
        wEstBemfSq *= wEstBemf;
 8007d3e:	fb05 f303 	mul.w	r3, r5, r3
        wEstBemfSqLo = wEstBemfSq - ((wEstBemfSq / 64) * ((int32_t)pHandle->BemfConsistencyCheck));
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	461d      	mov	r5, r3
 8007d46:	f890 c118 	ldrb.w	ip, [r0, #280]	@ 0x118
 8007d4a:	bfb8      	it	lt
 8007d4c:	f103 053f 	addlt.w	r5, r3, #63	@ 0x3f
 8007d50:	11ad      	asrs	r5, r5, #6
 8007d52:	fb0c 3515 	mls	r5, ip, r5, r3
        if (wObsBemfSq > wEstBemfSqLo)
 8007d56:	42af      	cmp	r7, r5
 8007d58:	bfd4      	ite	le
 8007d5a:	2500      	movle	r5, #0
 8007d5c:	2501      	movgt	r5, #1
 8007d5e:	e7c8      	b.n	8007cf2 <STO_PLL_CalcAvrgMecSpeedUnit+0xca>
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 8007d60:	462c      	mov	r4, r5
 8007d62:	462b      	mov	r3, r5
 8007d64:	462e      	mov	r6, r5
    int32_t wAvrSpeed_dpp = (int32_t)0;
 8007d66:	46ae      	mov	lr, r5
 8007d68:	e781      	b.n	8007c6e <STO_PLL_CalcAvrgMecSpeedUnit+0x46>
 8007d6a:	bf00      	nop

08007d6c <STO_PLL_CalcAvrgElSpeedDpp>:
    int16_t hIndexNew = (int16_t)pHandle->Speed_Buffer_Index;
 8007d6c:	f890 20f4 	ldrb.w	r2, [r0, #244]	@ 0xf4
    int16_t hSpeedBufferSizeUnit = (int16_t)pHandle->SpeedBufferSizeUnit;
 8007d70:	f890 c10e 	ldrb.w	ip, [r0, #270]	@ 0x10e
    hBufferSizeDiff = hSpeedBufferSizeUnit - hSpeedBufferSizedpp;
 8007d74:	f890 110f 	ldrb.w	r1, [r0, #271]	@ 0x10f
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->SpeedBufferOldestEl;
 8007d78:	eb00 0342 	add.w	r3, r0, r2, lsl #1
{
 8007d7c:	b410      	push	{r4}
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->SpeedBufferOldestEl;
 8007d7e:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	@ 0x74
 8007d82:	f8d0 4108 	ldr.w	r4, [r0, #264]	@ 0x108
    hBufferSizeDiff = hSpeedBufferSizeUnit - hSpeedBufferSizedpp;
 8007d86:	ebac 0101 	sub.w	r1, ip, r1
 8007d8a:	b289      	uxth	r1, r1
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->SpeedBufferOldestEl;
 8007d8c:	4423      	add	r3, r4
    if (0 == hBufferSizeDiff)
 8007d8e:	b959      	cbnz	r1, 8007da8 <STO_PLL_CalcAvrgElSpeedDpp+0x3c>
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->SpeedBufferOldestEl;
 8007d90:	f9b0 210c 	ldrsh.w	r2, [r0, #268]	@ 0x10c
 8007d94:	1a9b      	subs	r3, r3, r2
  wAvrSpeed_dpp = wSum >> pHandle->SpeedBufferSizeDppLOG;
 8007d96:	f8b0 2120 	ldrh.w	r2, [r0, #288]	@ 0x120
    pHandle->DppBufferSum = wSum;
 8007d9a:	f8c0 3108 	str.w	r3, [r0, #264]	@ 0x108
  wAvrSpeed_dpp = wSum >> pHandle->SpeedBufferSizeDppLOG;
 8007d9e:	4113      	asrs	r3, r2
}
 8007da0:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->_Super.hElSpeedDpp = (int16_t)wAvrSpeed_dpp;
 8007da4:	81c3      	strh	r3, [r0, #14]
}
 8007da6:	4770      	bx	lr
      hIndexOldTemp = hIndexNew + hBufferSizeDiff;
 8007da8:	440a      	add	r2, r1
 8007daa:	b291      	uxth	r1, r2
 8007dac:	b212      	sxth	r2, r2
      if (hIndexOldTemp >= hSpeedBufferSizeUnit)
 8007dae:	4594      	cmp	ip, r2
        hIndexOld = hIndexOldTemp - hSpeedBufferSizeUnit;
 8007db0:	bfdc      	itt	le
 8007db2:	eba1 010c 	suble.w	r1, r1, ip
 8007db6:	b20a      	sxthle	r2, r1
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->Speed_Buffer[hIndexOld];
 8007db8:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8007dbc:	f9b2 2074 	ldrsh.w	r2, [r2, #116]	@ 0x74
 8007dc0:	1a9b      	subs	r3, r3, r2
 8007dc2:	e7e8      	b.n	8007d96 <STO_PLL_CalcAvrgElSpeedDpp+0x2a>

08007dc4 <STO_PLL_Clear>:
{
 8007dc4:	b510      	push	{r4, lr}
  *
  */
static void STO_InitSpeedBuffer(STO_PLL_Handle_t * pHandle)
{
  uint8_t b_i;
  uint8_t bSpeedBufferSize = pHandle->SpeedBufferSizeUnit;
 8007dc6:	f890 210e 	ldrb.w	r2, [r0, #270]	@ 0x10e
    pHandle->Ialfa_est = (int32_t)0;
 8007dca:	2100      	movs	r1, #0
    pHandle->Ibeta_est = (int32_t)0;
 8007dcc:	e9c0 1118 	strd	r1, r1, [r0, #96]	@ 0x60
    pHandle->wBemf_beta_est = (int32_t)0;
 8007dd0:	e9c0 111a 	strd	r1, r1, [r0, #104]	@ 0x68
    pHandle->Est_Bemf_Level = (int32_t)0;
 8007dd4:	e9c0 113f 	strd	r1, r1, [r0, #252]	@ 0xfc
{
 8007dd8:	4604      	mov	r4, r0
    pHandle->_Super.hElAngle = (int16_t)0;
 8007dda:	8081      	strh	r1, [r0, #4]
    pHandle->_Super.hElSpeedDpp = (int16_t)0;
 8007ddc:	81c1      	strh	r1, [r0, #14]
    pHandle->ConsistencyCounter = 0u;
 8007dde:	f8a0 10f6 	strh.w	r1, [r0, #246]	@ 0xf6
    pHandle->IsAlgorithmConverged = false;
 8007de2:	f8a0 10f8 	strh.w	r1, [r0, #248]	@ 0xf8
    pHandle->DppBufferSum = (int32_t)0;
 8007de6:	f8c0 1108 	str.w	r1, [r0, #264]	@ 0x108
    pHandle->ForceConvergency = false;
 8007dea:	f8a0 1122 	strh.w	r1, [r0, #290]	@ 0x122

  /* Init speed buffer */
  for (b_i = 0U; b_i < bSpeedBufferSize; b_i++)
 8007dee:	b11a      	cbz	r2, 8007df8 <STO_PLL_Clear+0x34>
  {
    pHandle->Speed_Buffer[b_i] = (int16_t)0;
 8007df0:	0052      	lsls	r2, r2, #1
 8007df2:	3074      	adds	r0, #116	@ 0x74
 8007df4:	f000 fa08 	bl	8008208 <memset>
  }
  pHandle->Speed_Buffer_Index = 0U;
 8007df8:	2100      	movs	r1, #0
 8007dfa:	f884 10f4 	strb.w	r1, [r4, #244]	@ 0xf4
  pHandle->SpeedBufferOldestEl = (int16_t)0;
 8007dfe:	f8a4 110c 	strh.w	r1, [r4, #268]	@ 0x10c
    PID_SetIntegralTerm(& pHandle->PIRegulator, (int32_t)0);
 8007e02:	f104 0034 	add.w	r0, r4, #52	@ 0x34
}
 8007e06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    PID_SetIntegralTerm(& pHandle->PIRegulator, (int32_t)0);
 8007e0a:	f7fe b98d 	b.w	8006128 <PID_SetIntegralTerm>
 8007e0e:	bf00      	nop

08007e10 <STO_PLL_Init>:
{
 8007e10:	b510      	push	{r4, lr}
    pHandle->ConsistencyCounter = pHandle->StartUpConsistThreshold;
 8007e12:	f890 1116 	ldrb.w	r1, [r0, #278]	@ 0x116
    htempk = (int16_t)(C6_COMP_CONST1 / pHandle->hF2);
 8007e16:	4b19      	ldr	r3, [pc, #100]	@ (8007e7c <STO_PLL_Init+0x6c>)
 8007e18:	f9b0 e02e 	ldrsh.w	lr, [r0, #46]	@ 0x2e
    pHandle->ConsistencyCounter = pHandle->StartUpConsistThreshold;
 8007e1c:	f880 10f6 	strb.w	r1, [r0, #246]	@ 0xf6
    pHandle->EnableDualCheck = true;
 8007e20:	2201      	movs	r2, #1
    pHandle->F3POW2 = 0U;
 8007e22:	2100      	movs	r1, #0
    htempk = (int16_t)(C6_COMP_CONST1 / pHandle->hF2);
 8007e24:	fb93 f3fe 	sdiv	r3, r3, lr
 8007e28:	b21b      	sxth	r3, r3
{
 8007e2a:	4604      	mov	r4, r0
    pHandle->EnableDualCheck = true;
 8007e2c:	f880 2104 	strb.w	r2, [r0, #260]	@ 0x104
    pHandle->F3POW2 = 0U;
 8007e30:	8641      	strh	r1, [r0, #50]	@ 0x32
    while (htempk != 0)
 8007e32:	b30b      	cbz	r3, 8007e78 <STO_PLL_Init+0x68>
    wAux = ((int32_t)1);
 8007e34:	4611      	mov	r1, r2
      htempk /= ((int16_t)2);
 8007e36:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    while (htempk != 0)
 8007e3a:	f102 0c01 	add.w	ip, r2, #1
 8007e3e:	105b      	asrs	r3, r3, #1
 8007e40:	4610      	mov	r0, r2
      wAux *= ((int32_t)2);
 8007e42:	ea4f 0141 	mov.w	r1, r1, lsl #1
    while (htempk != 0)
 8007e46:	fa1f f28c 	uxth.w	r2, ip
 8007e4a:	d1f4      	bne.n	8007e36 <STO_PLL_Init+0x26>
    pHandle->hF3 = (int16_t)wAux;
 8007e4c:	b20a      	sxth	r2, r1
 8007e4e:	8660      	strh	r0, [r4, #50]	@ 0x32
    wAux = ((int32_t)(pHandle->hF2)) * pHandle->hF3;
 8007e50:	fb0e f102 	mul.w	r1, lr, r2
    pHandle->hC6 = (int16_t)(wAux / C6_COMP_CONST2);
 8007e54:	480a      	ldr	r0, [pc, #40]	@ (8007e80 <STO_PLL_Init+0x70>)
    pHandle->hF3 = (int16_t)wAux;
 8007e56:	8622      	strh	r2, [r4, #48]	@ 0x30
    pHandle->hC6 = (int16_t)(wAux / C6_COMP_CONST2);
 8007e58:	17cb      	asrs	r3, r1, #31
 8007e5a:	fb80 0101 	smull	r0, r1, r0, r1
 8007e5e:	ebc3 2321 	rsb	r3, r3, r1, asr #8
 8007e62:	8563      	strh	r3, [r4, #42]	@ 0x2a
    STO_PLL_Clear(pHandle);
 8007e64:	4620      	mov	r0, r4
 8007e66:	f7ff ffad 	bl	8007dc4 <STO_PLL_Clear>
    PID_HandleInit(&pHandle->PIRegulator);
 8007e6a:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 8007e6e:	f7fe f947 	bl	8006100 <PID_HandleInit>
    pHandle->_Super.hMecAccelUnitP = 0;
 8007e72:	2300      	movs	r3, #0
 8007e74:	8263      	strh	r3, [r4, #18]
}
 8007e76:	bd10      	pop	{r4, pc}
 8007e78:	4671      	mov	r1, lr
 8007e7a:	e7eb      	b.n	8007e54 <STO_PLL_Init+0x44>
 8007e7c:	000fea5e 	.word	0x000fea5e
 8007e80:	06488dc5 	.word	0x06488dc5

08007e84 <STO_PLL_IsObserverConverged>:
    int32_t wtemp;
    int16_t hEstimatedSpeedUnit;
    int16_t hUpperThreshold;
    int16_t hLowerThreshold;

    if (true == pHandle->ForceConvergency2)
 8007e84:	f890 2123 	ldrb.w	r2, [r0, #291]	@ 0x123
{
 8007e88:	4603      	mov	r3, r0
    if (true == pHandle->ForceConvergency2)
 8007e8a:	b112      	cbz	r2, 8007e92 <STO_PLL_IsObserverConverged+0xe>
    {
      *phForcedMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 8007e8c:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
 8007e90:	800a      	strh	r2, [r1, #0]
    else
    {
      /* Nothing to do */
    }

    if (true == pHandle->ForceConvergency)
 8007e92:	f893 0122 	ldrb.w	r0, [r3, #290]	@ 0x122
 8007e96:	b128      	cbz	r0, 8007ea4 <STO_PLL_IsObserverConverged+0x20>
    {
      bAux = true;
      pHandle->IsAlgorithmConverged = true;
 8007e98:	2001      	movs	r0, #1
      pHandle->_Super.bSpeedErrorNumber = 0U;
 8007e9a:	2200      	movs	r2, #0
      pHandle->IsAlgorithmConverged = true;
 8007e9c:	f883 00f8 	strb.w	r0, [r3, #248]	@ 0xf8
      pHandle->_Super.bSpeedErrorNumber = 0U;
 8007ea0:	701a      	strb	r2, [r3, #0]
    }
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
  return (bAux);
}
 8007ea2:	4770      	bx	lr
      wtemp = ((int32_t)hEstimatedSpeedUnit) * ((int32_t)*phForcedMecSpeedUnit);
 8007ea4:	f9b1 2000 	ldrsh.w	r2, [r1]
      hEstimatedSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 8007ea8:	f9b3 c00c 	ldrsh.w	ip, [r3, #12]
{
 8007eac:	b530      	push	{r4, r5, lr}
      wtemp = ((int32_t)hEstimatedSpeedUnit) * ((int32_t)*phForcedMecSpeedUnit);
 8007eae:	fb0c fe02 	mul.w	lr, ip, r2
      if (wtemp > 0)
 8007eb2:	f1be 0f00 	cmp.w	lr, #0
      wtemp = ((int32_t)hEstimatedSpeedUnit) * ((int32_t)*phForcedMecSpeedUnit);
 8007eb6:	4614      	mov	r4, r2
      if (wtemp > 0)
 8007eb8:	dd38      	ble.n	8007f2c <STO_PLL_IsObserverConverged+0xa8>
        if (hEstimatedSpeedUnit < 0)
 8007eba:	f1bc 0f00 	cmp.w	ip, #0
          hEstimatedSpeedUnit = -hEstimatedSpeedUnit;
 8007ebe:	bfbc      	itt	lt
 8007ec0:	f1cc 0c00 	rsblt	ip, ip, #0
 8007ec4:	fa0f fc8c 	sxthlt.w	ip, ip
        if (*phForcedMecSpeedUnit < 0)
 8007ec8:	2a00      	cmp	r2, #0
 8007eca:	db34      	blt.n	8007f36 <STO_PLL_IsObserverConverged+0xb2>
        if (true == pHandle->IsSpeedReliable)
 8007ecc:	f893 10f5 	ldrb.w	r1, [r3, #245]	@ 0xf5
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_H);
 8007ed0:	f893 e112 	ldrb.w	lr, [r3, #274]	@ 0x112
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_L);
 8007ed4:	f893 2113 	ldrb.w	r2, [r3, #275]	@ 0x113
        if (true == pHandle->IsSpeedReliable)
 8007ed8:	b349      	cbz	r1, 8007f2e <STO_PLL_IsObserverConverged+0xaa>
          if ((uint16_t)hEstimatedSpeedUnit > pHandle->MinStartUpValidSpeed)
 8007eda:	f8b3 5114 	ldrh.w	r5, [r3, #276]	@ 0x114
 8007ede:	fa1f f18c 	uxth.w	r1, ip
 8007ee2:	428d      	cmp	r5, r1
 8007ee4:	d223      	bcs.n	8007f2e <STO_PLL_IsObserverConverged+0xaa>
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_L);
 8007ee6:	fb04 f202 	mul.w	r2, r4, r2
        hLowerThreshold = (int16_t)(wAux / ((int32_t)16));
 8007eea:	2a00      	cmp	r2, #0
 8007eec:	bfb8      	it	lt
 8007eee:	320f      	addlt	r2, #15
            if (hEstimatedSpeedUnit >= hLowerThreshold)
 8007ef0:	f342 120f 	sbfx	r2, r2, #4, #16
 8007ef4:	4594      	cmp	ip, r2
 8007ef6:	db1a      	blt.n	8007f2e <STO_PLL_IsObserverConverged+0xaa>
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_H);
 8007ef8:	fb04 fe0e 	mul.w	lr, r4, lr
        hUpperThreshold = (int16_t)(wAux / ((int32_t)16));
 8007efc:	f1be 0f00 	cmp.w	lr, #0
 8007f00:	bfb8      	it	lt
 8007f02:	f10e 0e0f 	addlt.w	lr, lr, #15
              if (hEstimatedSpeedUnit <= hUpperThreshold)
 8007f06:	f34e 1e0f 	sbfx	lr, lr, #4, #16
 8007f0a:	45f4      	cmp	ip, lr
 8007f0c:	dc0f      	bgt.n	8007f2e <STO_PLL_IsObserverConverged+0xaa>
                pHandle->ConsistencyCounter++;
 8007f0e:	f893 20f6 	ldrb.w	r2, [r3, #246]	@ 0xf6
                if (pHandle->ConsistencyCounter >= pHandle->StartUpConsistThreshold)
 8007f12:	f893 1116 	ldrb.w	r1, [r3, #278]	@ 0x116
                pHandle->ConsistencyCounter++;
 8007f16:	3201      	adds	r2, #1
 8007f18:	b2d2      	uxtb	r2, r2
                if (pHandle->ConsistencyCounter >= pHandle->StartUpConsistThreshold)
 8007f1a:	4291      	cmp	r1, r2
                pHandle->ConsistencyCounter++;
 8007f1c:	f883 20f6 	strb.w	r2, [r3, #246]	@ 0xf6
                if (pHandle->ConsistencyCounter >= pHandle->StartUpConsistThreshold)
 8007f20:	d804      	bhi.n	8007f2c <STO_PLL_IsObserverConverged+0xa8>
      pHandle->IsAlgorithmConverged = true;
 8007f22:	2001      	movs	r0, #1
      pHandle->_Super.bSpeedErrorNumber = 0U;
 8007f24:	2200      	movs	r2, #0
      pHandle->IsAlgorithmConverged = true;
 8007f26:	f883 00f8 	strb.w	r0, [r3, #248]	@ 0xf8
      pHandle->_Super.bSpeedErrorNumber = 0U;
 8007f2a:	701a      	strb	r2, [r3, #0]
}
 8007f2c:	bd30      	pop	{r4, r5, pc}
                pHandle->ConsistencyCounter = 0U;
 8007f2e:	2200      	movs	r2, #0
 8007f30:	f883 20f6 	strb.w	r2, [r3, #246]	@ 0xf6
}
 8007f34:	bd30      	pop	{r4, r5, pc}
          *phForcedMecSpeedUnit = -*phForcedMecSpeedUnit;
 8007f36:	4252      	negs	r2, r2
 8007f38:	b212      	sxth	r2, r2
 8007f3a:	800a      	strh	r2, [r1, #0]
        if (true == pHandle->IsSpeedReliable)
 8007f3c:	f893 10f5 	ldrb.w	r1, [r3, #245]	@ 0xf5
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_H);
 8007f40:	f893 e112 	ldrb.w	lr, [r3, #274]	@ 0x112
 8007f44:	4614      	mov	r4, r2
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_L);
 8007f46:	f893 2113 	ldrb.w	r2, [r3, #275]	@ 0x113
        if (true == pHandle->IsSpeedReliable)
 8007f4a:	2900      	cmp	r1, #0
 8007f4c:	d0ef      	beq.n	8007f2e <STO_PLL_IsObserverConverged+0xaa>
 8007f4e:	e7c4      	b.n	8007eda <STO_PLL_IsObserverConverged+0x56>

08007f50 <STO_PLL_GetEstimatedBemf>:
    vaux.alpha = pHandle->hBemf_alfa_est;
    vaux.beta = pHandle->hBemf_beta_est;
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
  return (vaux);
 8007f50:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 8007f52:	2200      	movs	r2, #0
 8007f54:	b299      	uxth	r1, r3
 8007f56:	f361 020f 	bfi	r2, r1, #0, #16
 8007f5a:	0c1b      	lsrs	r3, r3, #16
 8007f5c:	f363 421f 	bfi	r2, r3, #16, #16
{
 8007f60:	b082      	sub	sp, #8
}
 8007f62:	4610      	mov	r0, r2
 8007f64:	b002      	add	sp, #8
 8007f66:	4770      	bx	lr

08007f68 <STO_PLL_GetEstimatedCurrent>:
  * 
  * @retval alphabeta_t State observer estimated stator current Ialpha-beta.
  */
//cstat !MISRAC2012-Rule-8.13
__weak alphabeta_t STO_PLL_GetEstimatedCurrent(STO_PLL_Handle_t *pHandle)
{
 8007f68:	4603      	mov	r3, r0
  iaux.beta = (int16_t)(pHandle->Ibeta_est / pHandle->hF1);
#endif
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
  return (iaux);
 8007f6a:	2000      	movs	r0, #0
  iaux.alpha = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 8007f6c:	f8b3 111c 	ldrh.w	r1, [r3, #284]	@ 0x11c
  iaux.beta = (int16_t)(pHandle->Ibeta_est >> pHandle->F1LOG);
 8007f70:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
  iaux.alpha = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 8007f74:	410a      	asrs	r2, r1
  return (iaux);
 8007f76:	410b      	asrs	r3, r1
 8007f78:	b292      	uxth	r2, r2
 8007f7a:	f362 000f 	bfi	r0, r2, #0, #16
 8007f7e:	b29b      	uxth	r3, r3
{
 8007f80:	b082      	sub	sp, #8
  return (iaux);
 8007f82:	f363 401f 	bfi	r0, r3, #16, #16
}
 8007f86:	b002      	add	sp, #8
 8007f88:	4770      	bx	lr
 8007f8a:	bf00      	nop

08007f8c <STO_PLL_GetObserverGains>:
    /* Nothing to do */
  }
  else
  {
#endif
    *phC2 = pHandle->hC2;
 8007f8c:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 8007f90:	800b      	strh	r3, [r1, #0]
    *phC4 = pHandle->hC4;
 8007f92:	f9b0 3026 	ldrsh.w	r3, [r0, #38]	@ 0x26
 8007f96:	8013      	strh	r3, [r2, #0]
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
}
 8007f98:	4770      	bx	lr
 8007f9a:	bf00      	nop

08007f9c <STO_PLL_SetObserverGains>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hC2 = hhC1;
 8007f9c:	8441      	strh	r1, [r0, #34]	@ 0x22
    pHandle->hC4 = hhC2;
 8007f9e:	84c2      	strh	r2, [r0, #38]	@ 0x26
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
}
 8007fa0:	4770      	bx	lr
 8007fa2:	bf00      	nop

08007fa4 <STO_OTF_ResetPLL>:
  }
  else
  {
#endif
    STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    PID_SetIntegralTerm(&pHdl->PIRegulator, (int32_t)0);
 8007fa4:	6800      	ldr	r0, [r0, #0]
 8007fa6:	2100      	movs	r1, #0
 8007fa8:	3034      	adds	r0, #52	@ 0x34
 8007faa:	f7fe b8bd 	b.w	8006128 <PID_SetIntegralTerm>
 8007fae:	bf00      	nop

08007fb0 <STO_ResetPLL>:
    /* Nothing to do */
  }
  else
  {
#endif
    PID_SetIntegralTerm(&pHandle->PIRegulator, (int32_t)0);
 8007fb0:	2100      	movs	r1, #0
 8007fb2:	3034      	adds	r0, #52	@ 0x34
 8007fb4:	f7fe b8b8 	b.w	8006128 <PID_SetIntegralTerm>

08007fb8 <STO_PLL_GetEstimatedBemfLevel>:
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  return ((MC_NULL == pHandle) ? 0 : pHandle->Est_Bemf_Level);
#else
  return (pHandle->Est_Bemf_Level);
#endif
}
 8007fb8:	f8d0 0100 	ldr.w	r0, [r0, #256]	@ 0x100
 8007fbc:	4770      	bx	lr
 8007fbe:	bf00      	nop

08007fc0 <STO_PLL_GetObservedBemfLevel>:
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  return ((MC_NULL == pHandle) ? 0 : pHandle->Obs_Bemf_Level);
#else
  return (pHandle->Obs_Bemf_Level);
#endif
}
 8007fc0:	f8d0 00fc 	ldr.w	r0, [r0, #252]	@ 0xfc
 8007fc4:	4770      	bx	lr
 8007fc6:	bf00      	nop

08007fc8 <STO_PLL_IsVarianceTight>:
  }
  else
  {
#endif
    const STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    tempStatus = pHdl->IsSpeedReliable;
 8007fc8:	6803      	ldr	r3, [r0, #0]
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
  return (tempStatus);
}
 8007fca:	f893 00f5 	ldrb.w	r0, [r3, #245]	@ 0xf5
 8007fce:	4770      	bx	lr

08007fd0 <STO_PLL_ForceConvergency1>:
  }
  else
  {
#endif
    STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    pHdl->ForceConvergency = true;
 8007fd0:	6803      	ldr	r3, [r0, #0]
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	f883 2122 	strb.w	r2, [r3, #290]	@ 0x122
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
}
 8007fd8:	4770      	bx	lr
 8007fda:	bf00      	nop

08007fdc <STO_PLL_ForceConvergency2>:
  }
  else
  {
#endif
    STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    pHdl->ForceConvergency2 = true;
 8007fdc:	6803      	ldr	r3, [r0, #0]
 8007fde:	2201      	movs	r2, #1
 8007fe0:	f883 2123 	strb.w	r2, [r3, #291]	@ 0x123
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
}
 8007fe4:	4770      	bx	lr
 8007fe6:	bf00      	nop

08007fe8 <STO_SetDirection>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hForcedDirection = direction;
 8007fe8:	f880 1124 	strb.w	r1, [r0, #292]	@ 0x124
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
}
 8007fec:	4770      	bx	lr
 8007fee:	bf00      	nop

08007ff0 <VSS_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->_Super.bSpeedErrorNumber = 0U;
 8007ff0:	2300      	movs	r3, #0
    pHandle->hRemainingStep = 0U;
    pHandle->hElAngleAccu = 0;

    pHandle->bTransitionStarted = false;
    pHandle->bTransitionEnded = false;
    pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 8007ff2:	8ec2      	ldrh	r2, [r0, #54]	@ 0x36
    pHandle->_Super.bSpeedErrorNumber = 0U;
 8007ff4:	7003      	strb	r3, [r0, #0]
    pHandle->wElSpeedDpp32 = 0;
 8007ff6:	e9c0 3308 	strd	r3, r3, [r0, #32]
    pHandle->_Super.hElAngle = 0;
 8007ffa:	6043      	str	r3, [r0, #4]
    pHandle->_Super.hAvrMecSpeedUnit = 0;
 8007ffc:	60c3      	str	r3, [r0, #12]
    pHandle->_Super.hMecAccelUnitP = 0;
 8007ffe:	8243      	strh	r3, [r0, #18]
    pHandle->hRemainingStep = 0U;
 8008000:	8503      	strh	r3, [r0, #40]	@ 0x28
    pHandle->bTransitionStarted = false;
 8008002:	8583      	strh	r3, [r0, #44]	@ 0x2c
    pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 8008004:	85c2      	strh	r2, [r0, #46]	@ 0x2e
    pHandle->hElAngleAccu = 0;
 8008006:	6303      	str	r3, [r0, #48]	@ 0x30

    pHandle->bCopyObserver = false;
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
}
 8008008:	4770      	bx	lr
 800800a:	bf00      	nop

0800800c <VSS_Init>:
{
 800800c:	b508      	push	{r3, lr}
  VSS_Clear(pHandle);
 800800e:	f7ff ffef 	bl	8007ff0 <VSS_Clear>
}
 8008012:	bd08      	pop	{r3, pc}

08008014 <VSS_CalcElAngle>:
    int16_t hAngleDiff;
    int32_t wAux;
    int16_t hAngleCorr;
    int16_t hSignCorr = 1;

    if (true == pHandle->bCopyObserver)
 8008014:	f890 2033 	ldrb.w	r2, [r0, #51]	@ 0x33
{
 8008018:	4603      	mov	r3, r0
    if (true == pHandle->bCopyObserver)
 800801a:	b11a      	cbz	r2, 8008024 <VSS_CalcElAngle+0x10>
    {
      hRetAngle = *(int16_t *)pInputVars_str;
 800801c:	f9b1 0000 	ldrsh.w	r0, [r1]
      {
        hRetAngle = pHandle->hElAngleAccu;
      }
    }

    pHandle->_Super.hElAngle = hRetAngle;
 8008020:	8098      	strh	r0, [r3, #4]
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
  return (hRetAngle);
}
 8008022:	4770      	bx	lr
{
 8008024:	b530      	push	{r4, r5, lr}
      pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 8008026:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 800802a:	8e00      	ldrh	r0, [r0, #48]	@ 0x30
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 800802c:	88dd      	ldrh	r5, [r3, #6]
      if (true == pHandle->bTransitionStarted)
 800802e:	f893 402c 	ldrb.w	r4, [r3, #44]	@ 0x2c
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 8008032:	785a      	ldrb	r2, [r3, #1]
 8008034:	fb9c f2f2 	sdiv	r2, ip, r2
      pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 8008038:	4460      	add	r0, ip
 800803a:	fa1f fe80 	uxth.w	lr, r0
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 800803e:	442a      	add	r2, r5
      pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 8008040:	b200      	sxth	r0, r0
 8008042:	8618      	strh	r0, [r3, #48]	@ 0x30
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 8008044:	80da      	strh	r2, [r3, #6]
      if (true == pHandle->bTransitionStarted)
 8008046:	b1fc      	cbz	r4, 8008088 <VSS_CalcElAngle+0x74>
        if (0 == pHandle->hTransitionRemainingSteps)
 8008048:	f9b3 202e 	ldrsh.w	r2, [r3, #46]	@ 0x2e
 800804c:	b1f2      	cbz	r2, 800808c <VSS_CalcElAngle+0x78>
          pHandle->hTransitionRemainingSteps--;
 800804e:	3a01      	subs	r2, #1
 8008050:	b212      	sxth	r2, r2
 8008052:	85da      	strh	r2, [r3, #46]	@ 0x2e
          if (pHandle->_Super.hElSpeedDpp >= 0)
 8008054:	f1bc 0f00 	cmp.w	ip, #0
            hAngleDiff = *(int16_t *)pInputVars_str - pHandle->hElAngleAccu;
 8008058:	8809      	ldrh	r1, [r1, #0]
          if (pHandle->_Super.hElSpeedDpp >= 0)
 800805a:	db26      	blt.n	80080aa <VSS_CalcElAngle+0x96>
            hAngleDiff = *(int16_t *)pInputVars_str - pHandle->hElAngleAccu;
 800805c:	eba1 0e0e 	sub.w	lr, r1, lr
 8008060:	fa0f fe8e 	sxth.w	lr, lr
 8008064:	2501      	movs	r5, #1
          hAngleCorr = (int16_t)(wAux / pHandle->hTransitionSteps);
 8008066:	f9b3 4036 	ldrsh.w	r4, [r3, #54]	@ 0x36
          wAux = (int32_t)hAngleDiff * pHandle->hTransitionRemainingSteps;
 800806a:	fb0e f202 	mul.w	r2, lr, r2
          if (hAngleDiff >= 0)
 800806e:	f1be 0f00 	cmp.w	lr, #0
          hAngleCorr = (int16_t)(wAux / pHandle->hTransitionSteps);
 8008072:	fb92 f2f4 	sdiv	r2, r2, r4
          hAngleCorr *= hSignCorr;
 8008076:	fb12 f205 	smulbb	r2, r2, r5
 800807a:	b292      	uxth	r2, r2
          if (hAngleDiff >= 0)
 800807c:	db0e      	blt.n	800809c <VSS_CalcElAngle+0x88>
            pHandle->bTransitionLocked = true;
 800807e:	2001      	movs	r0, #1
            hRetAngle = *(int16_t *)pInputVars_str - hAngleCorr;
 8008080:	1a8a      	subs	r2, r1, r2
            pHandle->bTransitionLocked = true;
 8008082:	f883 0032 	strb.w	r0, [r3, #50]	@ 0x32
            hRetAngle = *(int16_t *)pInputVars_str - hAngleCorr;
 8008086:	b210      	sxth	r0, r2
    pHandle->_Super.hElAngle = hRetAngle;
 8008088:	8098      	strh	r0, [r3, #4]
}
 800808a:	bd30      	pop	{r4, r5, pc}
          hRetAngle = *(int16_t *)pInputVars_str;
 800808c:	f9b1 0000 	ldrsh.w	r0, [r1]
          pHandle->_Super.bSpeedErrorNumber = 0U;
 8008090:	701a      	strb	r2, [r3, #0]
          pHandle->bTransitionEnded = true;
 8008092:	2401      	movs	r4, #1
 8008094:	f883 402d 	strb.w	r4, [r3, #45]	@ 0x2d
    pHandle->_Super.hElAngle = hRetAngle;
 8008098:	8098      	strh	r0, [r3, #4]
}
 800809a:	bd30      	pop	{r4, r5, pc}
            if (false == pHandle->bTransitionLocked)
 800809c:	f893 4032 	ldrb.w	r4, [r3, #50]	@ 0x32
 80080a0:	2c00      	cmp	r4, #0
 80080a2:	d0f1      	beq.n	8008088 <VSS_CalcElAngle+0x74>
              hRetAngle = *(int16_t *)pInputVars_str + hAngleCorr;
 80080a4:	440a      	add	r2, r1
 80080a6:	b210      	sxth	r0, r2
 80080a8:	e7ee      	b.n	8008088 <VSS_CalcElAngle+0x74>
            hAngleDiff = pHandle->hElAngleAccu - *(int16_t *)pInputVars_str;
 80080aa:	ebae 0e01 	sub.w	lr, lr, r1
 80080ae:	fa0f fe8e 	sxth.w	lr, lr
 80080b2:	f64f 75ff 	movw	r5, #65535	@ 0xffff
 80080b6:	e7d6      	b.n	8008066 <VSS_CalcElAngle+0x52>

080080b8 <VSS_CalcAvrgMecSpeedUnit>:
    SpeedSensorReliability = false;
  }
  else
  {
#endif
    if (pHandle->hRemainingStep > 1u)
 80080b8:	8d02      	ldrh	r2, [r0, #40]	@ 0x28
 80080ba:	2a01      	cmp	r2, #1
{
 80080bc:	4603      	mov	r3, r0
    if (pHandle->hRemainingStep > 1u)
 80080be:	d922      	bls.n	8008106 <VSS_CalcAvrgMecSpeedUnit+0x4e>
{
 80080c0:	b410      	push	{r4}
    {
      pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 80080c2:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 80080c4:	6a1c      	ldr	r4, [r3, #32]
      pHandle->_Super.hElSpeedDpp = (int16_t)(pHandle->wElSpeedDpp32 / 65536);
#endif

      /* Convert dpp into MecUnit */
      *hMecSpeedUnit = (int16_t)((((int32_t)pHandle->_Super.hElSpeedDpp)
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 80080c6:	8b5a      	ldrh	r2, [r3, #26]
      pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 80080c8:	4420      	add	r0, r4
      pHandle->_Super.hElSpeedDpp = (int16_t)(pHandle->wElSpeedDpp32 >> 16);
 80080ca:	ea4f 4c20 	mov.w	ip, r0, asr #16
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 80080ce:	69dc      	ldr	r4, [r3, #28]
      pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 80080d0:	6258      	str	r0, [r3, #36]	@ 0x24
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 80080d2:	fb0c f202 	mul.w	r2, ip, r2
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 80080d6:	7858      	ldrb	r0, [r3, #1]
      pHandle->_Super.hElSpeedDpp = (int16_t)(pHandle->wElSpeedDpp32 >> 16);
 80080d8:	f8a3 c00e 	strh.w	ip, [r3, #14]
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 80080dc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 80080e0:	fb04 f000 	mul.w	r0, r4, r0
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 80080e4:	0052      	lsls	r2, r2, #1
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 80080e6:	fb92 f2f0 	sdiv	r2, r2, r0
      *hMecSpeedUnit = (int16_t)((((int32_t)pHandle->_Super.hElSpeedDpp)
 80080ea:	b212      	sxth	r2, r2
 80080ec:	800a      	strh	r2, [r1, #0]
      pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
      pHandle->hRemainingStep--;
 80080ee:	8d18      	ldrh	r0, [r3, #40]	@ 0x28
      pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 80080f0:	819a      	strh	r2, [r3, #12]
      pHandle->hRemainingStep--;
 80080f2:	1e42      	subs	r2, r0, #1
    else
    {
      *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
    }
    /* If the transition is not done yet, we already know that speed is not reliable */
    if (false == pHandle->bTransitionEnded)
 80080f4:	f893 002d 	ldrb.w	r0, [r3, #45]	@ 0x2d
      pHandle->hRemainingStep--;
 80080f8:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (false == pHandle->bTransitionEnded)
 80080fa:	b970      	cbnz	r0, 800811a <VSS_CalcAvrgMecSpeedUnit+0x62>
    {
      pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 80080fc:	78da      	ldrb	r2, [r3, #3]
 80080fe:	701a      	strb	r2, [r3, #0]
    }
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
  return (SpeedSensorReliability);
}
 8008100:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008104:	4770      	bx	lr
    else if (1U == pHandle->hRemainingStep)
 8008106:	d00d      	beq.n	8008124 <VSS_CalcAvrgMecSpeedUnit+0x6c>
      *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 8008108:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
    if (false == pHandle->bTransitionEnded)
 800810c:	f893 002d 	ldrb.w	r0, [r3, #45]	@ 0x2d
      *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 8008110:	800a      	strh	r2, [r1, #0]
    if (false == pHandle->bTransitionEnded)
 8008112:	bb00      	cbnz	r0, 8008156 <VSS_CalcAvrgMecSpeedUnit+0x9e>
      pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 8008114:	78da      	ldrb	r2, [r3, #3]
 8008116:	701a      	strb	r2, [r3, #0]
}
 8008118:	4770      	bx	lr
 800811a:	f85d 4b04 	ldr.w	r4, [sp], #4
      SpeedSensorReliability = SPD_IsMecSpeedReliable(&pHandle->_Super, hMecSpeedUnit);
 800811e:	4618      	mov	r0, r3
 8008120:	f7ff b820 	b.w	8007164 <SPD_IsMecSpeedReliable>
      *hMecSpeedUnit = pHandle->hFinalMecSpeedUnit;
 8008124:	f9b0 c02a 	ldrsh.w	ip, [r0, #42]	@ 0x2a
 8008128:	f8a1 c000 	strh.w	ip, [r1]
                                          / (((int32_t)SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800812c:	8b42      	ldrh	r2, [r0, #26]
      pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)*hMecSpeedUnit) * ((int32_t)pHandle->_Super.DPPConvFactor))
 800812e:	69c0      	ldr	r0, [r0, #28]
      pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 8008130:	f8a3 c00c 	strh.w	ip, [r3, #12]
                                          / (((int32_t)SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 8008134:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8008138:	0052      	lsls	r2, r2, #1
      pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)*hMecSpeedUnit) * ((int32_t)pHandle->_Super.DPPConvFactor))
 800813a:	fb00 f00c 	mul.w	r0, r0, ip
                                          / (((int32_t)SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800813e:	fb90 f0f2 	sdiv	r0, r0, r2
      pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 8008142:	785a      	ldrb	r2, [r3, #1]
 8008144:	fb12 f200 	smulbb	r2, r2, r0
      pHandle->hRemainingStep = 0U;
 8008148:	2000      	movs	r0, #0
 800814a:	8518      	strh	r0, [r3, #40]	@ 0x28
    if (false == pHandle->bTransitionEnded)
 800814c:	f893 002d 	ldrb.w	r0, [r3, #45]	@ 0x2d
      pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 8008150:	81da      	strh	r2, [r3, #14]
    if (false == pHandle->bTransitionEnded)
 8008152:	2800      	cmp	r0, #0
 8008154:	d0de      	beq.n	8008114 <VSS_CalcAvrgMecSpeedUnit+0x5c>
      SpeedSensorReliability = SPD_IsMecSpeedReliable(&pHandle->_Super, hMecSpeedUnit);
 8008156:	4618      	mov	r0, r3
 8008158:	f7ff b804 	b.w	8007164 <SPD_IsMecSpeedReliable>

0800815c <VSS_SetMecAngle>:
  }
  else
  {
#endif
    pHandle->hElAngleAccu = hMecAngle;
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 800815c:	7843      	ldrb	r3, [r0, #1]
    pHandle->hElAngleAccu = hMecAngle;
 800815e:	8601      	strh	r1, [r0, #48]	@ 0x30
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 8008160:	fb91 f3f3 	sdiv	r3, r1, r3
    pHandle->_Super.hElAngle = hMecAngle;
 8008164:	8081      	strh	r1, [r0, #4]
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 8008166:	80c3      	strh	r3, [r0, #6]
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
}
 8008168:	4770      	bx	lr
 800816a:	bf00      	nop

0800816c <VSS_SetMecAcceleration>:
    int32_t wMecAccDppP32;
    uint16_t hNbrStep;
    int16_t hCurrentMecSpeedDpp;
    int16_t hFinalMecSpeedDpp;

    if (false == pHandle->bTransitionStarted)
 800816c:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8008170:	b9a3      	cbnz	r3, 800819c <VSS_SetMecAcceleration+0x30>
        pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;

        pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)hFinalMecSpeedUnit)
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
                                              / (((int32_t)SPEED_UNIT)
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 8008172:	8b43      	ldrh	r3, [r0, #26]
{
 8008174:	b510      	push	{r4, lr}
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
 8008176:	69c4      	ldr	r4, [r0, #28]

        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 8008178:	f890 e001 	ldrb.w	lr, [r0, #1]
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800817c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
 8008180:	fb04 fc01 	mul.w	ip, r4, r1
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 8008184:	005b      	lsls	r3, r3, #1
                                              / (((int32_t)SPEED_UNIT)
 8008186:	fb9c fcf3 	sdiv	ip, ip, r3
      if (0U == hDurationms)
 800818a:	b942      	cbnz	r2, 800819e <VSS_SetMecAcceleration+0x32>
        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 800818c:	fb1c fc0e 	smulbb	ip, ip, lr
        pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;
 8008190:	8181      	strh	r1, [r0, #12]
        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 8008192:	f8a0 c00e 	strh.w	ip, [r0, #14]

        pHandle->hRemainingStep = 0U;
 8008196:	8502      	strh	r2, [r0, #40]	@ 0x28

        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8008198:	8541      	strh	r1, [r0, #42]	@ 0x2a
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
}
 800819a:	bd10      	pop	{r4, pc}
 800819c:	4770      	bx	lr
        hNbrStep = (uint16_t)((((uint32_t)hDurationms) * ((uint32_t)pHandle->hSpeedSamplingFreqHz)) / 1000U);
 800819e:	8e83      	ldrh	r3, [r0, #52]	@ 0x34
 80081a0:	fb02 f303 	mul.w	r3, r2, r3
 80081a4:	4a0e      	ldr	r2, [pc, #56]	@ (80081e0 <VSS_SetMecAcceleration+0x74>)
 80081a6:	fba2 2303 	umull	r2, r3, r2, r3
 80081aa:	f3c3 138f 	ubfx	r3, r3, #6, #16
        hNbrStep++;
 80081ae:	3301      	adds	r3, #1
 80081b0:	b29b      	uxth	r3, r3
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 80081b2:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
        pHandle->hRemainingStep = hNbrStep;
 80081b6:	8503      	strh	r3, [r0, #40]	@ 0x28
        if (0U == hNbrStep)
 80081b8:	b91b      	cbnz	r3, 80081c2 <VSS_SetMecAcceleration+0x56>
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 80081ba:	0412      	lsls	r2, r2, #16
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 80081bc:	8541      	strh	r1, [r0, #42]	@ 0x2a
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 80081be:	6242      	str	r2, [r0, #36]	@ 0x24
}
 80081c0:	bd10      	pop	{r4, pc}
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 80081c2:	fb92 f4fe 	sdiv	r4, r2, lr
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 80081c6:	ebac 0c04 	sub.w	ip, ip, r4
                         * ((int32_t)65536)) / ((int32_t )hNbrStep);
 80081ca:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 80081ce:	0412      	lsls	r2, r2, #16
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 80081d0:	fb9c f3f3 	sdiv	r3, ip, r3
          pHandle->wElAccDppP32 = wMecAccDppP32 * ((int16_t)pHandle->_Super.bElToMecRatio);
 80081d4:	fb0e f303 	mul.w	r3, lr, r3
 80081d8:	6203      	str	r3, [r0, #32]
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 80081da:	8541      	strh	r1, [r0, #42]	@ 0x2a
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 80081dc:	6242      	str	r2, [r0, #36]	@ 0x24
    }
 80081de:	e7ef      	b.n	80081c0 <VSS_SetMecAcceleration+0x54>
 80081e0:	10624dd3 	.word	0x10624dd3

080081e4 <VSS_SetStartTransition>:
    /* nothing to do */
  }
  else
  {
#endif
    if (true == bCommand)
 80081e4:	b151      	cbz	r1, 80081fc <VSS_SetStartTransition+0x18>
    {
      pHandle->bTransitionStarted = true;

      if (0 == pHandle->hTransitionSteps)
 80081e6:	f9b0 3036 	ldrsh.w	r3, [r0, #54]	@ 0x36
      pHandle->bTransitionStarted = true;
 80081ea:	2201      	movs	r2, #1
 80081ec:	f880 202c 	strb.w	r2, [r0, #44]	@ 0x2c
      if (0 == pHandle->hTransitionSteps)
 80081f0:	b923      	cbnz	r3, 80081fc <VSS_SetStartTransition+0x18>
      {
        pHandle->bTransitionEnded = true;
 80081f2:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d
        pHandle->_Super.bSpeedErrorNumber = 0U;
 80081f6:	7003      	strb	r3, [r0, #0]
        bAux = false;
 80081f8:	4618      	mov	r0, r3
    }
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
  return (bAux);
}
 80081fa:	4770      	bx	lr
  bool bAux = true;
 80081fc:	2001      	movs	r0, #1
 80081fe:	4770      	bx	lr

08008200 <VSS_TransitionEnded>:
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  return ((MC_NULL == pHandle) ? false : pHandle->bTransitionEnded);
#else
  return (pHandle->bTransitionEnded);
#endif
}
 8008200:	f890 002d 	ldrb.w	r0, [r0, #45]	@ 0x2d
 8008204:	4770      	bx	lr
 8008206:	bf00      	nop

08008208 <memset>:
 8008208:	4402      	add	r2, r0
 800820a:	4603      	mov	r3, r0
 800820c:	4293      	cmp	r3, r2
 800820e:	d100      	bne.n	8008212 <memset+0xa>
 8008210:	4770      	bx	lr
 8008212:	f803 1b01 	strb.w	r1, [r3], #1
 8008216:	e7f9      	b.n	800820c <memset+0x4>

08008218 <__libc_init_array>:
 8008218:	b570      	push	{r4, r5, r6, lr}
 800821a:	4d0d      	ldr	r5, [pc, #52]	@ (8008250 <__libc_init_array+0x38>)
 800821c:	4c0d      	ldr	r4, [pc, #52]	@ (8008254 <__libc_init_array+0x3c>)
 800821e:	1b64      	subs	r4, r4, r5
 8008220:	10a4      	asrs	r4, r4, #2
 8008222:	2600      	movs	r6, #0
 8008224:	42a6      	cmp	r6, r4
 8008226:	d109      	bne.n	800823c <__libc_init_array+0x24>
 8008228:	4d0b      	ldr	r5, [pc, #44]	@ (8008258 <__libc_init_array+0x40>)
 800822a:	4c0c      	ldr	r4, [pc, #48]	@ (800825c <__libc_init_array+0x44>)
 800822c:	f000 f826 	bl	800827c <_init>
 8008230:	1b64      	subs	r4, r4, r5
 8008232:	10a4      	asrs	r4, r4, #2
 8008234:	2600      	movs	r6, #0
 8008236:	42a6      	cmp	r6, r4
 8008238:	d105      	bne.n	8008246 <__libc_init_array+0x2e>
 800823a:	bd70      	pop	{r4, r5, r6, pc}
 800823c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008240:	4798      	blx	r3
 8008242:	3601      	adds	r6, #1
 8008244:	e7ee      	b.n	8008224 <__libc_init_array+0xc>
 8008246:	f855 3b04 	ldr.w	r3, [r5], #4
 800824a:	4798      	blx	r3
 800824c:	3601      	adds	r6, #1
 800824e:	e7f2      	b.n	8008236 <__libc_init_array+0x1e>
 8008250:	080086b4 	.word	0x080086b4
 8008254:	080086b4 	.word	0x080086b4
 8008258:	080086b4 	.word	0x080086b4
 800825c:	080086b8 	.word	0x080086b8

08008260 <memcpy>:
 8008260:	440a      	add	r2, r1
 8008262:	4291      	cmp	r1, r2
 8008264:	f100 33ff 	add.w	r3, r0, #4294967295
 8008268:	d100      	bne.n	800826c <memcpy+0xc>
 800826a:	4770      	bx	lr
 800826c:	b510      	push	{r4, lr}
 800826e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008272:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008276:	4291      	cmp	r1, r2
 8008278:	d1f9      	bne.n	800826e <memcpy+0xe>
 800827a:	bd10      	pop	{r4, pc}

0800827c <_init>:
 800827c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800827e:	bf00      	nop
 8008280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008282:	bc08      	pop	{r3}
 8008284:	469e      	mov	lr, r3
 8008286:	4770      	bx	lr

08008288 <_fini>:
 8008288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800828a:	bf00      	nop
 800828c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800828e:	bc08      	pop	{r3}
 8008290:	469e      	mov	lr, r3
 8008292:	4770      	bx	lr
