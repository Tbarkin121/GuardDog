
PosCtrl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009378  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000028c  08009550  08009550  00019550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080097dc  080097dc  00020448  2**0
                  CONTENTS
  4 .ARM          00000008  080097dc  080097dc  000197dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080097e4  080097e4  00020448  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080097e4  080097e4  000197e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080097e8  080097e8  000197e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000448  20000000  080097ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014f8  20000448  08009c34  00020448  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001940  08009c34  00021940  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020448  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020478  2**0
                  CONTENTS, READONLY
 13 .debug_line   00045051  00000000  00000000  000204bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 00000063  00000000  00000000  0006550c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   00047d0b  00000000  00000000  0006556f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00008860  00000000  00000000  000ad27a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001d50  00000000  00000000  000b5ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0013a5da  00000000  00000000  000b7830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 0000345e  00000000  00000000  001f1e0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loclists 0001c685  00000000  00000000  001f5268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  00033e90  00000000  00000000  002118ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00005460  00000000  00000000  00245780  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000448 	.word	0x20000448
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009538 	.word	0x08009538

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000044c 	.word	0x2000044c
 8000214:	08009538 	.word	0x08009538

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000514:	480d      	ldr	r0, [pc, #52]	; (800054c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000516:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000518:	480d      	ldr	r0, [pc, #52]	; (8000550 <LoopForever+0x6>)
  ldr r1, =_edata
 800051a:	490e      	ldr	r1, [pc, #56]	; (8000554 <LoopForever+0xa>)
  ldr r2, =_sidata
 800051c:	4a0e      	ldr	r2, [pc, #56]	; (8000558 <LoopForever+0xe>)
  movs r3, #0
 800051e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000520:	e002      	b.n	8000528 <LoopCopyDataInit>

08000522 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000522:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000524:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000526:	3304      	adds	r3, #4

08000528 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000528:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800052a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800052c:	d3f9      	bcc.n	8000522 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800052e:	4a0b      	ldr	r2, [pc, #44]	; (800055c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000530:	4c0b      	ldr	r4, [pc, #44]	; (8000560 <LoopForever+0x16>)
  movs r3, #0
 8000532:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000534:	e001      	b.n	800053a <LoopFillZerobss>

08000536 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000536:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000538:	3204      	adds	r2, #4

0800053a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800053a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800053c:	d3fb      	bcc.n	8000536 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800053e:	f003 fdf9 	bl	8004134 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000542:	f008 ffc7 	bl	80094d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000546:	f000 fbb1 	bl	8000cac <main>

0800054a <LoopForever>:

LoopForever:
    b LoopForever
 800054a:	e7fe      	b.n	800054a <LoopForever>
  ldr   r0, =_estack
 800054c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000550:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000554:	20000448 	.word	0x20000448
  ldr r2, =_sidata
 8000558:	080097ec 	.word	0x080097ec
  ldr r2, =_sbss
 800055c:	20000448 	.word	0x20000448
  ldr r4, =_ebss
 8000560:	20001940 	.word	0x20001940

08000564 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000564:	e7fe      	b.n	8000564 <ADC3_IRQHandler>
	...

08000568 <ASPEP_start>:
  * @brief  Starts ASPEP communication by configuring UART.
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_start(ASPEP_Handle_t *pHandle)
{
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->fASPEP_HWInit(pHandle->HWIp);
 800056c:	6940      	ldr	r0, [r0, #20]
 800056e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000570:	4798      	blx	r3
    pHandle->ASPEP_State = ASPEP_IDLE;
 8000572:	2300      	movs	r3, #0
    pHandle->ASPEP_TL_State = WAITING_PACKET;
    pHandle->syncPacketCount = 0; /* Sync packet counter is reset only at startup*/

    /* Configure UART to receive first packet*/
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000574:	6d65      	ldr	r5, [r4, #84]	; 0x54
    pHandle->ASPEP_State = ASPEP_IDLE;
 8000576:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
    pHandle->syncPacketCount = 0; /* Sync packet counter is reset only at startup*/
 800057a:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 800057e:	6960      	ldr	r0, [r4, #20]
 8000580:	f104 011c 	add.w	r1, r4, #28
 8000584:	462b      	mov	r3, r5
 8000586:	2204      	movs	r2, #4
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 8000588:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 800058c:	4718      	bx	r3
 800058e:	bf00      	nop

08000590 <ASPEP_sendBeacon>:
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  * @param  *capabilities Matched capabilities between controller and performer
  */
void ASPEP_sendBeacon(ASPEP_Handle_t *pHandle, ASPEP_Capabilities_def *capabilities)
{
 8000590:	b410      	push	{r4}
  {
#endif
    uint32_t *packet = (uint32_t *)pHandle->ctrlBuffer.buffer; //cstat !MISRAC2012-Rule-11.3
    *packet = (BEACON
             | (((uint32_t)capabilities->version) << 4U)
             | (((uint32_t)capabilities->DATA_CRC) << 7U)
 8000592:	780b      	ldrb	r3, [r1, #0]
             | (((uint32_t)capabilities->version) << 4U)
 8000594:	790a      	ldrb	r2, [r1, #4]
             | (((uint32_t)capabilities->RX_maxSize) << 8U)
             | (((uint32_t)capabilities->TXS_maxSize) << 14U)
 8000596:	f891 c002 	ldrb.w	ip, [r1, #2]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 800059a:	4c1e      	ldr	r4, [pc, #120]	; (8000614 <ASPEP_sendBeacon+0x84>)
             | (((uint32_t)capabilities->DATA_CRC) << 7U)
 800059c:	01db      	lsls	r3, r3, #7
             | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 800059e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
             | (((uint32_t)capabilities->RX_maxSize) << 8U)
 80005a2:	784a      	ldrb	r2, [r1, #1]
             | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 80005a4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80005a8:	78ca      	ldrb	r2, [r1, #3]
 80005aa:	ea43 338c 	orr.w	r3, r3, ip, lsl #14
 80005ae:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 80005b2:	b2da      	uxtb	r2, r3
 80005b4:	f042 0205 	orr.w	r2, r2, #5
  header &= 0x0fffffffU;
 80005b8:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 80005bc:	5ca2      	ldrb	r2, [r4, r2]
 80005be:	ea82 2211 	eor.w	r2, r2, r1, lsr #8
 80005c2:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 80005c4:	5ca2      	ldrb	r2, [r4, r2]
 80005c6:	ea82 4211 	eor.w	r2, r2, r1, lsr #16
 80005ca:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 80005cc:	5ca2      	ldrb	r2, [r4, r2]
 80005ce:	4c12      	ldr	r4, [pc, #72]	; (8000618 <ASPEP_sendBeacon+0x88>)
 80005d0:	ea82 6211 	eor.w	r2, r2, r1, lsr #24
  *headerPtr |= (uint32_t)crc << 28;
 80005d4:	5ca2      	ldrb	r2, [r4, r2]
 80005d6:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80005da:	f043 0305 	orr.w	r3, r3, #5
 80005de:	6203      	str	r3, [r0, #32]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005e0:	b672      	cpsid	i
  {
#endif
    /* Insert CRC header in the packet to send */
    ASPEP_ComputeHeaderCRC((uint32_t *)txBuffer); //cstat !MISRAC2012-Rule-11.5
    __disable_irq(); /*TODO: Disable High frequency task is enough */
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 80005e2:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80005e4:	b14b      	cbz	r3, 80005fa <ASPEP_sendBeacon+0x6a>
  __ASM volatile ("cpsie i" : : : "memory");
 80005e6:	b662      	cpsie	i
          pHandle->syncBuffer.length = bufferLength;
        }
      }
      else if(ASPEP_CTRL == dataType)
      {
        if (pHandle->ctrlBuffer.state != available)
 80005e8:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80005ec:	b913      	cbnz	r3, 80005f4 <ASPEP_sendBeacon+0x64>
        {
          result = ASPEP_BUFFER_ERROR;
        }
        else
        {
          pHandle->ctrlBuffer.state = pending;
 80005ee:	2302      	movs	r3, #2
 80005f0:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
}
 80005f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80005f8:	4770      	bx	lr
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 80005fa:	f100 0120 	add.w	r1, r0, #32
        pHandle->ctrlBuffer.state = readLock;
 80005fe:	2303      	movs	r3, #3
 8000600:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8000604:	6481      	str	r1, [r0, #72]	; 0x48
 8000606:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8000608:	2204      	movs	r2, #4
 800060a:	6d83      	ldr	r3, [r0, #88]	; 0x58
}
 800060c:	f85d 4b04 	ldr.w	r4, [sp], #4
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8000610:	6940      	ldr	r0, [r0, #20]
 8000612:	4718      	bx	r3
 8000614:	08009560 	.word	0x08009560
 8000618:	08009550 	.word	0x08009550

0800061c <ASPEP_sendPing>:
{
 800061c:	b430      	push	{r4, r5}
                   | (uint32_t)((uint32_t)cBit << 5U)
 800061e:	014b      	lsls	r3, r1, #5
    uint8_t Nbit = pHandle->syncPacketCount & 0x1U; /* Keep only LSB */
 8000620:	f890 c060 	ldrb.w	ip, [r0, #96]	; 0x60
    uint8_t ipID = pHandle->liid & 0xFU;
 8000624:	f890 4063 	ldrb.w	r4, [r0, #99]	; 0x63
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000628:	4d1d      	ldr	r5, [pc, #116]	; (80006a0 <ASPEP_sendPing+0x84>)
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 800062a:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 800062e:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
                   | (uint32_t)((uint32_t)Nbit << 6U)
 8000632:	f00c 0101 	and.w	r1, ip, #1
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000636:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 800063a:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
                   | (uint32_t)((uint32_t)ipID << 8U)
 800063e:	f004 040f 	and.w	r4, r4, #15
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000642:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000646:	b2d3      	uxtb	r3, r2
 8000648:	4c16      	ldr	r4, [pc, #88]	; (80006a4 <ASPEP_sendPing+0x88>)
 800064a:	f043 0306 	orr.w	r3, r3, #6
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 800064e:	f042 0106 	orr.w	r1, r2, #6
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000652:	5ce3      	ldrb	r3, [r4, r3]
 8000654:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
 8000658:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 800065a:	5ce3      	ldrb	r3, [r4, r3]
 800065c:	ea83 4312 	eor.w	r3, r3, r2, lsr #16
 8000660:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000662:	5ce3      	ldrb	r3, [r4, r3]
 8000664:	ea83 6312 	eor.w	r3, r3, r2, lsr #24
  *headerPtr |= (uint32_t)crc << 28;
 8000668:	5ceb      	ldrb	r3, [r5, r3]
 800066a:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
 800066e:	6203      	str	r3, [r0, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8000670:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8000672:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8000674:	b143      	cbz	r3, 8000688 <ASPEP_sendPing+0x6c>
  __ASM volatile ("cpsie i" : : : "memory");
 8000676:	b662      	cpsie	i
        if (pHandle->ctrlBuffer.state != available)
 8000678:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800067c:	b913      	cbnz	r3, 8000684 <ASPEP_sendPing+0x68>
          pHandle->ctrlBuffer.state = pending;
 800067e:	2302      	movs	r3, #2
 8000680:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
}
 8000684:	bc30      	pop	{r4, r5}
 8000686:	4770      	bx	lr
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8000688:	f100 0120 	add.w	r1, r0, #32
        pHandle->ctrlBuffer.state = readLock;
 800068c:	2303      	movs	r3, #3
 800068e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8000692:	6481      	str	r1, [r0, #72]	; 0x48
 8000694:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8000696:	2204      	movs	r2, #4
 8000698:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800069a:	6940      	ldr	r0, [r0, #20]
}
 800069c:	bc30      	pop	{r4, r5}
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 800069e:	4718      	bx	r3
 80006a0:	08009550 	.word	0x08009550
 80006a4:	08009560 	.word	0x08009560

080006a8 <ASPEP_getBuffer>:
    if (MCTL_SYNC == syncAsync)
 80006a8:	2a0a      	cmp	r2, #10
{
 80006aa:	b410      	push	{r4}
 80006ac:	4603      	mov	r3, r0
    if (MCTL_SYNC == syncAsync)
 80006ae:	d00b      	beq.n	80006c8 <ASPEP_getBuffer+0x20>
      if ((pHandle->asyncBufferA.state > writeLock) && (pHandle->asyncBufferB.state > writeLock))
 80006b0:	f890 2036 	ldrb.w	r2, [r0, #54]	; 0x36
 80006b4:	2a01      	cmp	r2, #1
 80006b6:	d921      	bls.n	80006fc <ASPEP_getBuffer+0x54>
 80006b8:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 80006bc:	2a01      	cmp	r2, #1
 80006be:	d911      	bls.n	80006e4 <ASPEP_getBuffer+0x3c>
        result = false;
 80006c0:	2000      	movs	r0, #0
}
 80006c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80006c6:	4770      	bx	lr
      if (pHandle->syncBuffer.state <= writeLock) /* Possible values are free or writeLock*/
 80006c8:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
 80006cc:	2a01      	cmp	r2, #1
 80006ce:	d8f7      	bhi.n	80006c0 <ASPEP_getBuffer+0x18>
        *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 80006d0:	6a82      	ldr	r2, [r0, #40]	; 0x28
        pHandle->syncBuffer.state = writeLock;
 80006d2:	2401      	movs	r4, #1
        *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 80006d4:	3204      	adds	r2, #4
 80006d6:	600a      	str	r2, [r1, #0]
        pHandle->syncBuffer.state = writeLock;
 80006d8:	f883 402e 	strb.w	r4, [r3, #46]	; 0x2e
  bool result = true;
 80006dc:	4620      	mov	r0, r4
}
 80006de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80006e2:	4770      	bx	lr
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 80006e4:	6b82      	ldr	r2, [r0, #56]	; 0x38
          pHandle->asyncBufferB.state = writeLock;
 80006e6:	2001      	movs	r0, #1
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferB;
 80006e8:	f103 0438 	add.w	r4, r3, #56	; 0x38
          pHandle->asyncBufferB.state = writeLock;
 80006ec:	f883 003e 	strb.w	r0, [r3, #62]	; 0x3e
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 80006f0:	3204      	adds	r2, #4
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferB;
 80006f2:	641c      	str	r4, [r3, #64]	; 0x40
}
 80006f4:	f85d 4b04 	ldr.w	r4, [sp], #4
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 80006f8:	600a      	str	r2, [r1, #0]
}
 80006fa:	4770      	bx	lr
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 80006fc:	6b02      	ldr	r2, [r0, #48]	; 0x30
          pHandle->asyncBufferA.state = writeLock;
 80006fe:	2001      	movs	r0, #1
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferA;
 8000700:	f103 0430 	add.w	r4, r3, #48	; 0x30
          pHandle->asyncBufferA.state = writeLock;
 8000704:	f883 0036 	strb.w	r0, [r3, #54]	; 0x36
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 8000708:	3204      	adds	r2, #4
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferA;
 800070a:	641c      	str	r4, [r3, #64]	; 0x40
}
 800070c:	f85d 4b04 	ldr.w	r4, [sp], #4
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 8000710:	600a      	str	r2, [r1, #0]
}
 8000712:	4770      	bx	lr

08000714 <ASPEP_sendPacket>:
{
 8000714:	4684      	mov	ip, r0
    if (ASPEP_CONNECTED == pHandle-> ASPEP_State)
 8000716:	f890 0064 	ldrb.w	r0, [r0, #100]	; 0x64
 800071a:	2802      	cmp	r0, #2
 800071c:	d001      	beq.n	8000722 <ASPEP_sendPacket+0xe>
      result = ASPEP_NOT_CONNECTED;
 800071e:	2002      	movs	r0, #2
 8000720:	4770      	bx	lr
      tmpHeader = ((uint32_t)((uint32_t)txDataLengthTemp << (uint32_t)4) | (uint32_t)syncAsync);
 8000722:	ea43 1002 	orr.w	r0, r3, r2, lsl #4
      *header = tmpHeader;
 8000726:	f841 0c04 	str.w	r0, [r1, #-4]
      if (1U == pHandle->Capabilities.DATA_CRC)
 800072a:	f89c 006c 	ldrb.w	r0, [ip, #108]	; 0x6c
 800072e:	2801      	cmp	r0, #1
 8000730:	d104      	bne.n	800073c <ASPEP_sendPacket+0x28>
        packet[txDataLengthTemp] = (uint8_t)0xCA; /* Dummy CRC */
 8000732:	f64f 60ca 	movw	r0, #65226	; 0xfeca
 8000736:	5288      	strh	r0, [r1, r2]
        txDataLengthTemp += (uint16_t)ASPEP_DATACRC_SIZE;
 8000738:	3202      	adds	r2, #2
 800073a:	b292      	uxth	r2, r2
      if (MCTL_SYNC == syncAsync)
 800073c:	2b0a      	cmp	r3, #10
 800073e:	d105      	bne.n	800074c <ASPEP_sendPacket+0x38>
        if (pSupHandle->MCP_PacketAvailable)
 8000740:	f89c 0010 	ldrb.w	r0, [ip, #16]
 8000744:	b378      	cbz	r0, 80007a6 <ASPEP_sendPacket+0x92>
          pSupHandle->MCP_PacketAvailable = false; /* CMD from controller is processed*/
 8000746:	2000      	movs	r0, #0
 8000748:	f88c 0010 	strb.w	r0, [ip, #16]
  uint32_t header = *headerPtr;
 800074c:	f851 0c04 	ldr.w	r0, [r1, #-4]
{
 8000750:	b570      	push	{r4, r5, r6, lr}
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000752:	4d35      	ldr	r5, [pc, #212]	; (8000828 <ASPEP_sendPacket+0x114>)
 8000754:	b2c4      	uxtb	r4, r0
        result = ASPEP_TXframeProcess(pHandle, syncAsync, header, txDataLengthTemp + (uint16_t)ASPEP_HEADER_SIZE);
 8000756:	3204      	adds	r2, #4
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000758:	5d2e      	ldrb	r6, [r5, r4]
 800075a:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800075e:	4074      	eors	r4, r6
      header--; /* Header ues 4*8 bits on top of txBuffer*/
 8000760:	f1a1 0e04 	sub.w	lr, r1, #4
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000764:	5d2e      	ldrb	r6, [r5, r4]
 8000766:	f3c0 4407 	ubfx	r4, r0, #16, #8
 800076a:	4074      	eors	r4, r6
        result = ASPEP_TXframeProcess(pHandle, syncAsync, header, txDataLengthTemp + (uint16_t)ASPEP_HEADER_SIZE);
 800076c:	b292      	uxth	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 800076e:	5d2c      	ldrb	r4, [r5, r4]
 8000770:	f3c0 6503 	ubfx	r5, r0, #24, #4
 8000774:	406c      	eors	r4, r5
 8000776:	4d2d      	ldr	r5, [pc, #180]	; (800082c <ASPEP_sendPacket+0x118>)
  *headerPtr |= (uint32_t)crc << 28;
 8000778:	5d2c      	ldrb	r4, [r5, r4]
 800077a:	ea40 7004 	orr.w	r0, r0, r4, lsl #28
 800077e:	f841 0c04 	str.w	r0, [r1, #-4]
  __ASM volatile ("cpsid i" : : : "memory");
 8000782:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8000784:	f8dc 1048 	ldr.w	r1, [ip, #72]	; 0x48
 8000788:	b1e9      	cbz	r1, 80007c6 <ASPEP_sendPacket+0xb2>
  __ASM volatile ("cpsie i" : : : "memory");
 800078a:	b662      	cpsie	i
      if (MCTL_ASYNC == dataType)
 800078c:	2b09      	cmp	r3, #9
 800078e:	d00c      	beq.n	80007aa <ASPEP_sendPacket+0x96>
      else if (MCTL_SYNC == dataType)
 8000790:	2b0a      	cmp	r3, #10
 8000792:	d031      	beq.n	80007f8 <ASPEP_sendPacket+0xe4>
      else if(ASPEP_CTRL == dataType)
 8000794:	2b00      	cmp	r3, #0
 8000796:	d135      	bne.n	8000804 <ASPEP_sendPacket+0xf0>
        if (pHandle->ctrlBuffer.state != available)
 8000798:	f89c 0024 	ldrb.w	r0, [ip, #36]	; 0x24
 800079c:	bb80      	cbnz	r0, 8000800 <ASPEP_sendPacket+0xec>
          pHandle->ctrlBuffer.state = pending;
 800079e:	2302      	movs	r3, #2
 80007a0:	f88c 3024 	strb.w	r3, [ip, #36]	; 0x24
}
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
          result = MCTL_SYNC_NOT_EXPECTED;
 80007a6:	2001      	movs	r0, #1
}
 80007a8:	4770      	bx	lr
        if (txBuffer != (uint8_t *)pHandle->lastRequestedAsyncBuff->buffer)
 80007aa:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 80007ae:	6819      	ldr	r1, [r3, #0]
          result = ASPEP_BUFFER_ERROR;
 80007b0:	458e      	cmp	lr, r1
 80007b2:	bf14      	ite	ne
 80007b4:	2003      	movne	r0, #3
 80007b6:	2000      	moveq	r0, #0
        if (NULL == pHandle->asyncNextBuffer)
 80007b8:	f8dc 1044 	ldr.w	r1, [ip, #68]	; 0x44
 80007bc:	b381      	cbz	r1, 8000820 <ASPEP_sendPacket+0x10c>
        pHandle->lastRequestedAsyncBuff->state = pending;
 80007be:	2102      	movs	r1, #2
 80007c0:	7199      	strb	r1, [r3, #6]
        pHandle->lastRequestedAsyncBuff->length = bufferLength;
 80007c2:	809a      	strh	r2, [r3, #4]
}
 80007c4:	bd70      	pop	{r4, r5, r6, pc}
      if (MCTL_ASYNC == dataType)
 80007c6:	2b09      	cmp	r3, #9
 80007c8:	d025      	beq.n	8000816 <ASPEP_sendPacket+0x102>
      else if (MCTL_SYNC == dataType)
 80007ca:	2b0a      	cmp	r3, #10
        pHandle->syncBuffer.state = readLock;
 80007cc:	f04f 0303 	mov.w	r3, #3
 80007d0:	bf0b      	itete	eq
 80007d2:	f88c 302e 	strbeq.w	r3, [ip, #46]	; 0x2e
        pHandle->ctrlBuffer.state = readLock;
 80007d6:	f88c 3024 	strbne.w	r3, [ip, #36]	; 0x24
        pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 80007da:	f10c 0328 	addeq.w	r3, ip, #40	; 0x28
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 80007de:	f10c 0320 	addne.w	r3, ip, #32
        pHandle->lockBuffer = (void *)pHandle->lastRequestedAsyncBuff;
 80007e2:	f8cc 3048 	str.w	r3, [ip, #72]	; 0x48
 80007e6:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 80007e8:	f8dc 3058 	ldr.w	r3, [ip, #88]	; 0x58
 80007ec:	f8dc 0014 	ldr.w	r0, [ip, #20]
 80007f0:	4671      	mov	r1, lr
 80007f2:	4798      	blx	r3
 80007f4:	2000      	movs	r0, #0
}
 80007f6:	bd70      	pop	{r4, r5, r6, pc}
        if (pHandle -> syncBuffer.state != writeLock)
 80007f8:	f89c 302e 	ldrb.w	r3, [ip, #46]	; 0x2e
 80007fc:	2b01      	cmp	r3, #1
 80007fe:	d003      	beq.n	8000808 <ASPEP_sendPacket+0xf4>
          result = ASPEP_BUFFER_ERROR;
 8000800:	2003      	movs	r0, #3
}
 8000802:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t result = ASPEP_OK;
 8000804:	2000      	movs	r0, #0
}
 8000806:	bd70      	pop	{r4, r5, r6, pc}
          pHandle->syncBuffer.state = pending;
 8000808:	2302      	movs	r3, #2
 800080a:	f88c 302e 	strb.w	r3, [ip, #46]	; 0x2e
          pHandle->syncBuffer.length = bufferLength;
 800080e:	f8ac 202c 	strh.w	r2, [ip, #44]	; 0x2c
  uint8_t result = ASPEP_OK;
 8000812:	2000      	movs	r0, #0
}
 8000814:	bd70      	pop	{r4, r5, r6, pc}
        pHandle->lastRequestedAsyncBuff->state = readLock;
 8000816:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 800081a:	2103      	movs	r1, #3
 800081c:	7199      	strb	r1, [r3, #6]
        pHandle->lockBuffer = (void *)pHandle->lastRequestedAsyncBuff;
 800081e:	e7e0      	b.n	80007e2 <ASPEP_sendPacket+0xce>
          pHandle->asyncNextBuffer = pHandle->lastRequestedAsyncBuff;
 8000820:	f8cc 3044 	str.w	r3, [ip, #68]	; 0x44
 8000824:	e7cb      	b.n	80007be <ASPEP_sendPacket+0xaa>
 8000826:	bf00      	nop
 8000828:	08009560 	.word	0x08009560
 800082c:	08009550 	.word	0x08009550

08000830 <ASPEP_HWDataTransmittedIT>:
  * Therefore, there is no need to protect this ISR against another higher priority ISR (HF Task).
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_HWDataTransmittedIT(ASPEP_Handle_t *pHandle)
{
 8000830:	b510      	push	{r4, lr}
  }
  else
  {
#endif
    /* First free previous readLock buffer */
    if (pHandle->ctrlBuffer.state == readLock)
 8000832:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8000836:	2b03      	cmp	r3, #3
{
 8000838:	4604      	mov	r4, r0
    if (pHandle->ctrlBuffer.state == readLock)
 800083a:	d013      	beq.n	8000864 <ASPEP_HWDataTransmittedIT+0x34>
      pHandle->ctrlBuffer.state = available;
    }
    else /* if previous buffer was not ASPEP_CTRL, then the buffer locked is a MCTL_Buff_t */
    {
      MCTL_Buff_t *tempBuff = (MCTL_Buff_t *)pHandle->lockBuffer; //cstat !MISRAC2012-Rule-11.5
      tempBuff->state = available;
 800083c:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800083e:	2100      	movs	r1, #0
 8000840:	7191      	strb	r1, [r2, #6]
    }
    if (pHandle->syncBuffer.state == pending)
 8000842:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
 8000846:	2a02      	cmp	r2, #2
 8000848:	d013      	beq.n	8000872 <ASPEP_HWDataTransmittedIT+0x42>
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
      pHandle->fASPEP_send(pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
      pHandle->syncBuffer.state = readLock;
    }
    /* Second prepare transfer of pending buffer */
    else if (pHandle->ctrlBuffer.state == pending)
 800084a:	2b02      	cmp	r3, #2
 800084c:	d11d      	bne.n	800088a <ASPEP_HWDataTransmittedIT+0x5a>
    {
      pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 800084e:	f100 0120 	add.w	r1, r0, #32
      pHandle->fASPEP_send(pHandle ->HWIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 8000852:	6d83      	ldr	r3, [r0, #88]	; 0x58
      pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 8000854:	6481      	str	r1, [r0, #72]	; 0x48
      pHandle->fASPEP_send(pHandle ->HWIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 8000856:	2204      	movs	r2, #4
 8000858:	6940      	ldr	r0, [r0, #20]
 800085a:	4798      	blx	r3
      pHandle->ctrlBuffer.state = readLock;
 800085c:	2303      	movs	r3, #3
 800085e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      __enable_irq();
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 8000862:	bd10      	pop	{r4, pc}
    if (pHandle->syncBuffer.state == pending)
 8000864:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
      pHandle->ctrlBuffer.state = available;
 8000868:	2200      	movs	r2, #0
    if (pHandle->syncBuffer.state == pending)
 800086a:	2b02      	cmp	r3, #2
      pHandle->ctrlBuffer.state = available;
 800086c:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    if (pHandle->syncBuffer.state == pending)
 8000870:	d10b      	bne.n	800088a <ASPEP_HWDataTransmittedIT+0x5a>
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 8000872:	f104 0028 	add.w	r0, r4, #40	; 0x28
      pHandle->fASPEP_send(pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 8000876:	6da3      	ldr	r3, [r4, #88]	; 0x58
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 8000878:	64a0      	str	r0, [r4, #72]	; 0x48
      pHandle->fASPEP_send(pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 800087a:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 800087c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800087e:	6960      	ldr	r0, [r4, #20]
 8000880:	4798      	blx	r3
      pHandle->syncBuffer.state = readLock;
 8000882:	2303      	movs	r3, #3
 8000884:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
}
 8000888:	bd10      	pop	{r4, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 800088a:	b672      	cpsid	i
      if (pHandle->asyncNextBuffer != NULL)
 800088c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800088e:	b1cb      	cbz	r3, 80008c4 <ASPEP_HWDataTransmittedIT+0x94>
        pHandle->asyncNextBuffer->state = readLock;
 8000890:	2203      	movs	r2, #3
        pHandle->lockBuffer = (void *)pHandle->asyncNextBuffer;
 8000892:	64a3      	str	r3, [r4, #72]	; 0x48
        pHandle->asyncNextBuffer->state = readLock;
 8000894:	719a      	strb	r2, [r3, #6]
        pHandle->fASPEP_send(pHandle ->HWIp, pHandle->asyncNextBuffer->buffer, pHandle->asyncNextBuffer->length);
 8000896:	6819      	ldr	r1, [r3, #0]
 8000898:	889a      	ldrh	r2, [r3, #4]
 800089a:	6960      	ldr	r0, [r4, #20]
 800089c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800089e:	4798      	blx	r3
        if ((pHandle->asyncBufferA.state == pending) || (pHandle->asyncBufferB.state == pending))
 80008a0:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 80008a4:	2b02      	cmp	r3, #2
 80008a6:	d007      	beq.n	80008b8 <ASPEP_HWDataTransmittedIT+0x88>
 80008a8:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80008ac:	2b02      	cmp	r3, #2
 80008ae:	d003      	beq.n	80008b8 <ASPEP_HWDataTransmittedIT+0x88>
          pHandle->asyncNextBuffer = NULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	6463      	str	r3, [r4, #68]	; 0x44
  __ASM volatile ("cpsie i" : : : "memory");
 80008b4:	b662      	cpsie	i
}
 80008b6:	bd10      	pop	{r4, pc}
          uint32_t temp = (uint32_t)&pHandle->asyncBufferA + (uint32_t)&pHandle->asyncBufferB
 80008b8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80008ba:	0063      	lsls	r3, r4, #1
 80008bc:	3368      	adds	r3, #104	; 0x68
 80008be:	1a9b      	subs	r3, r3, r2
          pHandle->asyncNextBuffer = (MCTL_Buff_t *) temp; //cstat !MISRAC2012-Rule-11.4
 80008c0:	6463      	str	r3, [r4, #68]	; 0x44
        {
 80008c2:	e7f7      	b.n	80008b4 <ASPEP_HWDataTransmittedIT+0x84>
        pHandle->lockBuffer = NULL;
 80008c4:	64a3      	str	r3, [r4, #72]	; 0x48
 80008c6:	e7f5      	b.n	80008b4 <ASPEP_HWDataTransmittedIT+0x84>

080008c8 <ASPEP_RXframeProcess>:
    uint16_t packetNumber;
#if VALID_CRC_DATA
    bool validCRCData = true;
#endif
    *packetLength = 0;
    if (pHandle->NewPacketAvailable)
 80008c8:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
    uint32_t packetHeader = *((uint32_t *)pHandle->rxHeader); //cstat !MISRAC2012-Rule-11.3
 80008cc:	69c2      	ldr	r2, [r0, #28]
{
 80008ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    *packetLength = 0;
 80008d2:	2500      	movs	r5, #0
{
 80008d4:	4604      	mov	r4, r0
    *packetLength = 0;
 80008d6:	800d      	strh	r5, [r1, #0]
    if (pHandle->NewPacketAvailable)
 80008d8:	b193      	cbz	r3, 8000900 <ASPEP_RXframeProcess+0x38>
    {
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
      switch (pHandle->ASPEP_State)
 80008da:	f890 6064 	ldrb.w	r6, [r0, #100]	; 0x64
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
 80008de:	f880 5061 	strb.w	r5, [r0, #97]	; 0x61
      switch (pHandle->ASPEP_State)
 80008e2:	2e01      	cmp	r6, #1
 80008e4:	d054      	beq.n	8000990 <ASPEP_RXframeProcess+0xc8>
 80008e6:	2e02      	cmp	r6, #2
 80008e8:	d03e      	beq.n	8000968 <ASPEP_RXframeProcess+0xa0>
 80008ea:	2e00      	cmp	r6, #0
 80008ec:	d033      	beq.n	8000956 <ASPEP_RXframeProcess+0x8e>

        default:
          break;
      }
      /* The valid received packet is now safely consumes, we are ready to receive a new packet */
      pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 80008ee:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80008f0:	6960      	ldr	r0, [r4, #20]
 80008f2:	2204      	movs	r2, #4
 80008f4:	f104 011c 	add.w	r1, r4, #28
 80008f8:	4798      	blx	r3
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
  return (result);
}
 80008fa:	4628      	mov	r0, r5
 80008fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if (pHandle->badPacketFlag > ASPEP_OK)
 8000900:	f890 5062 	ldrb.w	r5, [r0, #98]	; 0x62
 8000904:	2d00      	cmp	r5, #0
 8000906:	d0f8      	beq.n	80008fa <ASPEP_RXframeProcess+0x32>
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 8000908:	042b      	lsls	r3, r5, #16
 800090a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 800090e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8000912:	489b      	ldr	r0, [pc, #620]	; (8000b80 <ASPEP_RXframeProcess+0x2b8>)
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000914:	4d9b      	ldr	r5, [pc, #620]	; (8000b84 <ASPEP_RXframeProcess+0x2bc>)
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000916:	f082 0209 	eor.w	r2, r2, #9
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 800091a:	5c81      	ldrb	r1, [r0, r2]
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 800091c:	f043 020f 	orr.w	r2, r3, #15
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000920:	ea81 4313 	eor.w	r3, r1, r3, lsr #16
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000924:	5cc3      	ldrb	r3, [r0, r3]
  *headerPtr |= (uint32_t)crc << 28;
 8000926:	5ceb      	ldrb	r3, [r5, r3]
 8000928:	ea42 7303 	orr.w	r3, r2, r3, lsl #28
 800092c:	6223      	str	r3, [r4, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800092e:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8000930:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000932:	2b00      	cmp	r3, #0
 8000934:	d03a      	beq.n	80009ac <ASPEP_RXframeProcess+0xe4>
  __ASM volatile ("cpsie i" : : : "memory");
 8000936:	b662      	cpsie	i
        if (pHandle->ctrlBuffer.state != available)
 8000938:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800093c:	b913      	cbnz	r3, 8000944 <ASPEP_RXframeProcess+0x7c>
          pHandle->ctrlBuffer.state = pending;
 800093e:	2302      	movs	r3, #2
 8000940:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      pHandle->badPacketFlag = ASPEP_OK;
 8000944:	2500      	movs	r5, #0
      pHandle->fASPEP_HWSync(pHandle->HWIp);
 8000946:	6960      	ldr	r0, [r4, #20]
 8000948:	6d23      	ldr	r3, [r4, #80]	; 0x50
      pHandle->badPacketFlag = ASPEP_OK;
 800094a:	f884 5062 	strb.w	r5, [r4, #98]	; 0x62
      pHandle->fASPEP_HWSync(pHandle->HWIp);
 800094e:	4798      	blx	r3
}
 8000950:	4628      	mov	r0, r5
 8000952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if (BEACON == pHandle->rxPacketType)
 8000956:	6e81      	ldr	r1, [r0, #104]	; 0x68
 8000958:	2905      	cmp	r1, #5
 800095a:	f000 809e 	beq.w	8000a9a <ASPEP_RXframeProcess+0x1d2>
          else if (PING == pHandle->rxPacketType)
 800095e:	2906      	cmp	r1, #6
 8000960:	f000 80e3 	beq.w	8000b2a <ASPEP_RXframeProcess+0x262>
  uint8_t *result = NULL; //cstat !MISRAC2012-Rule-8.13
 8000964:	4635      	mov	r5, r6
 8000966:	e7c2      	b.n	80008ee <ASPEP_RXframeProcess+0x26>
          if (BEACON == pHandle->rxPacketType)
 8000968:	6e86      	ldr	r6, [r0, #104]	; 0x68
 800096a:	2e05      	cmp	r6, #5
 800096c:	d060      	beq.n	8000a30 <ASPEP_RXframeProcess+0x168>
          else if (PING == pHandle->rxPacketType)
 800096e:	2e06      	cmp	r6, #6
 8000970:	f000 80e2 	beq.w	8000b38 <ASPEP_RXframeProcess+0x270>
          else if (DATA_PACKET == pHandle->rxPacketType)
 8000974:	2e09      	cmp	r6, #9
 8000976:	d1ba      	bne.n	80008ee <ASPEP_RXframeProcess+0x26>
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from controller */
 8000978:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
              *packetLength = pHandle->rxLength;
 800097c:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
              result = pHandle->rxBuffer;
 8000980:	69a5      	ldr	r5, [r4, #24]
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from controller */
 8000982:	3301      	adds	r3, #1
              pSupHandle->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 8000984:	2001      	movs	r0, #1
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from controller */
 8000986:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
              pSupHandle->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 800098a:	7420      	strb	r0, [r4, #16]
              *packetLength = pHandle->rxLength;
 800098c:	800a      	strh	r2, [r1, #0]
              result = pHandle->rxBuffer;
 800098e:	e7ae      	b.n	80008ee <ASPEP_RXframeProcess+0x26>
          if (BEACON == pHandle->rxPacketType)
 8000990:	6e81      	ldr	r1, [r0, #104]	; 0x68
 8000992:	2905      	cmp	r1, #5
 8000994:	d016      	beq.n	80009c4 <ASPEP_RXframeProcess+0xfc>
          else if (PING == pHandle->rxPacketType)
 8000996:	2906      	cmp	r1, #6
 8000998:	d1a9      	bne.n	80008ee <ASPEP_RXframeProcess+0x26>
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 800099a:	f3c2 320f 	ubfx	r2, r2, #12, #16
 800099e:	4631      	mov	r1, r6
 80009a0:	f7ff fe3c 	bl	800061c <ASPEP_sendPing>
            pHandle->ASPEP_State = ASPEP_CONNECTED;
 80009a4:	2302      	movs	r3, #2
 80009a6:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 80009aa:	e7a0      	b.n	80008ee <ASPEP_RXframeProcess+0x26>
  (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 80009ac:	f104 0120 	add.w	r1, r4, #32
        pHandle->ctrlBuffer.state = readLock;
 80009b0:	2303      	movs	r3, #3
 80009b2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 80009b6:	64a1      	str	r1, [r4, #72]	; 0x48
 80009b8:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 80009ba:	2204      	movs	r2, #4
 80009bc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80009be:	6960      	ldr	r0, [r4, #20]
 80009c0:	4798      	blx	r3
  return (result);
 80009c2:	e7bf      	b.n	8000944 <ASPEP_RXframeProcess+0x7c>
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 80009c4:	7f03      	ldrb	r3, [r0, #28]
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 80009c6:	7f40      	ldrb	r0, [r0, #29]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 80009c8:	f894 106d 	ldrb.w	r1, [r4, #109]	; 0x6d
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80009cc:	f894 606c 	ldrb.w	r6, [r4, #108]	; 0x6c
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80009d0:	f894 706e 	ldrb.w	r7, [r4, #110]	; 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80009d4:	f894 e06f 	ldrb.w	lr, [r4, #111]	; 0x6f
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 80009d8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 80009dc:	09db      	lsrs	r3, r3, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 80009de:	4281      	cmp	r1, r0
 80009e0:	bf28      	it	cs
 80009e2:	4601      	movcs	r1, r0
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80009e4:	42b3      	cmp	r3, r6
 80009e6:	469c      	mov	ip, r3
 80009e8:	bf28      	it	cs
 80009ea:	46b4      	movcs	ip, r6
 80009ec:	f36c 0507 	bfi	r5, ip, #0, #8
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 80009f0:	f3c2 3c86 	ubfx	ip, r2, #14, #7
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 80009f4:	f3c2 5846 	ubfx	r8, r2, #21, #7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80009f8:	45bc      	cmp	ip, r7
 80009fa:	46e1      	mov	r9, ip
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80009fc:	f361 250f 	bfi	r5, r1, #8, #8
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a00:	bf28      	it	cs
 8000a02:	46b9      	movcs	r9, r7
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a04:	45f0      	cmp	r8, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a06:	f369 4517 	bfi	r5, r9, #16, #8
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a0a:	46c1      	mov	r9, r8
 8000a0c:	bf28      	it	cs
 8000a0e:	46f1      	movcs	r9, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a10:	f369 651f 	bfi	r5, r9, #24, #8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000a14:	42b3      	cmp	r3, r6
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a16:	66e5      	str	r5, [r4, #108]	; 0x6c
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000a18:	f240 8093 	bls.w	8000b42 <ASPEP_RXframeProcess+0x27a>
              pHandle->ASPEP_State = ASPEP_IDLE;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
 8000a22:	f104 016c 	add.w	r1, r4, #108	; 0x6c
 8000a26:	4620      	mov	r0, r4
 8000a28:	f7ff fdb2 	bl	8000590 <ASPEP_sendBeacon>
  uint8_t *result = NULL; //cstat !MISRAC2012-Rule-8.13
 8000a2c:	2500      	movs	r5, #0
 8000a2e:	e75e      	b.n	80008ee <ASPEP_RXframeProcess+0x26>
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000a30:	7f46      	ldrb	r6, [r0, #29]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a32:	f890 c06c 	ldrb.w	ip, [r0, #108]	; 0x6c
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8000a36:	7f03      	ldrb	r3, [r0, #28]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000a38:	f890 006d 	ldrb.w	r0, [r0, #109]	; 0x6d
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a3c:	f894 e06e 	ldrb.w	lr, [r4, #110]	; 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a40:	f894 806f 	ldrb.w	r8, [r4, #111]	; 0x6f
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000a44:	f006 063f 	and.w	r6, r6, #63	; 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8000a48:	09db      	lsrs	r3, r3, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000a4a:	42b0      	cmp	r0, r6
 8000a4c:	bf28      	it	cs
 8000a4e:	4630      	movcs	r0, r6
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a50:	4563      	cmp	r3, ip
 8000a52:	461f      	mov	r7, r3
 8000a54:	4629      	mov	r1, r5
 8000a56:	bf28      	it	cs
 8000a58:	4667      	movcs	r7, ip
 8000a5a:	f367 0107 	bfi	r1, r7, #0, #8
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000a5e:	f3c2 3786 	ubfx	r7, r2, #14, #7
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 8000a62:	f3c2 5946 	ubfx	r9, r2, #21, #7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a66:	4577      	cmp	r7, lr
 8000a68:	46ba      	mov	sl, r7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a6a:	f360 210f 	bfi	r1, r0, #8, #8
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a6e:	bf28      	it	cs
 8000a70:	46f2      	movcs	sl, lr
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a72:	45c1      	cmp	r9, r8
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a74:	f36a 4117 	bfi	r1, sl, #16, #8
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a78:	46ca      	mov	sl, r9
 8000a7a:	bf28      	it	cs
 8000a7c:	46c2      	movcs	sl, r8
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a7e:	f36a 611f 	bfi	r1, sl, #24, #8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000a82:	4563      	cmp	r3, ip
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a84:	66e1      	str	r1, [r4, #108]	; 0x6c
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000a86:	f104 016c 	add.w	r1, r4, #108	; 0x6c
 8000a8a:	d96b      	bls.n	8000b64 <ASPEP_RXframeProcess+0x29c>
 8000a8c:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
 8000a90:	4620      	mov	r0, r4
 8000a92:	f7ff fd7d 	bl	8000590 <ASPEP_sendBeacon>
  uint8_t *result = NULL; //cstat !MISRAC2012-Rule-8.13
 8000a96:	2500      	movs	r5, #0
 8000a98:	e729      	b.n	80008ee <ASPEP_RXframeProcess+0x26>
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000a9a:	7f45      	ldrb	r5, [r0, #29]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000a9c:	f890 106d 	ldrb.w	r1, [r0, #109]	; 0x6d
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8000aa0:	7f03      	ldrb	r3, [r0, #28]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000aa2:	f890 e06c 	ldrb.w	lr, [r0, #108]	; 0x6c
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000aa6:	f890 706e 	ldrb.w	r7, [r0, #110]	; 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000aaa:	f894 906f 	ldrb.w	r9, [r4, #111]	; 0x6f
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000aae:	f005 053f 	and.w	r5, r5, #63	; 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8000ab2:	09db      	lsrs	r3, r3, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000ab4:	42a9      	cmp	r1, r5
 8000ab6:	bf28      	it	cs
 8000ab8:	4629      	movcs	r1, r5
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000aba:	4573      	cmp	r3, lr
 8000abc:	4618      	mov	r0, r3
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000abe:	f3c2 3886 	ubfx	r8, r2, #14, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000ac2:	bf28      	it	cs
 8000ac4:	4670      	movcs	r0, lr
 8000ac6:	f360 0607 	bfi	r6, r0, #0, #8
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 8000aca:	f3c2 5a46 	ubfx	sl, r2, #21, #7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000ace:	45b8      	cmp	r8, r7
 8000ad0:	4640      	mov	r0, r8
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000ad2:	f361 260f 	bfi	r6, r1, #8, #8
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000ad6:	bf28      	it	cs
 8000ad8:	4638      	movcs	r0, r7
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000ada:	45ca      	cmp	sl, r9
 8000adc:	46d4      	mov	ip, sl
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000ade:	f360 4617 	bfi	r6, r0, #16, #8
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000ae2:	bf28      	it	cs
 8000ae4:	46cc      	movcs	ip, r9
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000ae6:	f36c 661f 	bfi	r6, ip, #24, #8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000aea:	4573      	cmp	r3, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000aec:	66e6      	str	r6, [r4, #108]	; 0x6c
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000aee:	d898      	bhi.n	8000a22 <ASPEP_RXframeProcess+0x15a>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8000af0:	428d      	cmp	r5, r1
 8000af2:	d896      	bhi.n	8000a22 <ASPEP_RXframeProcess+0x15a>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8000af4:	45b8      	cmp	r8, r7
 8000af6:	d894      	bhi.n	8000a22 <ASPEP_RXframeProcess+0x15a>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8000af8:	45ca      	cmp	sl, r9
 8000afa:	d892      	bhi.n	8000a22 <ASPEP_RXframeProcess+0x15a>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000afc:	f3c2 1302 	ubfx	r3, r2, #4, #3
 8000b00:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d18c      	bne.n	8000a22 <ASPEP_RXframeProcess+0x15a>
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000b08:	1c4b      	adds	r3, r1, #1
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000b0a:	1c42      	adds	r2, r0, #1
 8000b0c:	b2d2      	uxtb	r2, r2
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000b0e:	b2db      	uxtb	r3, r3
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000b10:	0152      	lsls	r2, r2, #5
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
 8000b12:	ea4f 1c8c 	mov.w	ip, ip, lsl #6
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000b16:	015b      	lsls	r3, r3, #5
              pHandle->ASPEP_State = ASPEP_CONFIGURED;
 8000b18:	2101      	movs	r1, #1
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000b1a:	81a2      	strh	r2, [r4, #12]
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
 8000b1c:	f8a4 c00e 	strh.w	ip, [r4, #14]
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000b20:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
              pHandle->ASPEP_State = ASPEP_CONFIGURED;
 8000b24:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
 8000b28:	e77b      	b.n	8000a22 <ASPEP_RXframeProcess+0x15a>
            ASPEP_sendPing(pHandle, ASPEP_PING_RESET, packetNumber);
 8000b2a:	f3c2 320f 	ubfx	r2, r2, #12, #16
 8000b2e:	4631      	mov	r1, r6
 8000b30:	f7ff fd74 	bl	800061c <ASPEP_sendPing>
  uint8_t *result = NULL; //cstat !MISRAC2012-Rule-8.13
 8000b34:	4635      	mov	r5, r6
 8000b36:	e6da      	b.n	80008ee <ASPEP_RXframeProcess+0x26>
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 8000b38:	7f42      	ldrb	r2, [r0, #29]
 8000b3a:	2101      	movs	r1, #1
 8000b3c:	f7ff fd6e 	bl	800061c <ASPEP_sendPing>
 8000b40:	e6d5      	b.n	80008ee <ASPEP_RXframeProcess+0x26>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8000b42:	4288      	cmp	r0, r1
 8000b44:	f63f af6a 	bhi.w	8000a1c <ASPEP_RXframeProcess+0x154>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8000b48:	45bc      	cmp	ip, r7
 8000b4a:	f63f af67 	bhi.w	8000a1c <ASPEP_RXframeProcess+0x154>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8000b4e:	45f0      	cmp	r8, lr
 8000b50:	f63f af64 	bhi.w	8000a1c <ASPEP_RXframeProcess+0x154>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000b54:	f894 1070 	ldrb.w	r1, [r4, #112]	; 0x70
 8000b58:	f3c2 1302 	ubfx	r3, r2, #4, #3
 8000b5c:	4299      	cmp	r1, r3
 8000b5e:	f47f af5d 	bne.w	8000a1c <ASPEP_RXframeProcess+0x154>
 8000b62:	e75e      	b.n	8000a22 <ASPEP_RXframeProcess+0x15a>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8000b64:	4286      	cmp	r6, r0
 8000b66:	d891      	bhi.n	8000a8c <ASPEP_RXframeProcess+0x1c4>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8000b68:	4577      	cmp	r7, lr
 8000b6a:	d88f      	bhi.n	8000a8c <ASPEP_RXframeProcess+0x1c4>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8000b6c:	45c1      	cmp	r9, r8
 8000b6e:	d88d      	bhi.n	8000a8c <ASPEP_RXframeProcess+0x1c4>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000b70:	f894 5070 	ldrb.w	r5, [r4, #112]	; 0x70
 8000b74:	f3c2 1302 	ubfx	r3, r2, #4, #3
              pHandle->ASPEP_State = ASPEP_IDLE;
 8000b78:	1aeb      	subs	r3, r5, r3
 8000b7a:	425d      	negs	r5, r3
 8000b7c:	415d      	adcs	r5, r3
 8000b7e:	e785      	b.n	8000a8c <ASPEP_RXframeProcess+0x1c4>
 8000b80:	08009560 	.word	0x08009560
 8000b84:	08009550 	.word	0x08009550

08000b88 <ASPEP_HWDataReceivedIT>:
  * If the packet received contains an error in the header, the HW IP will be re-synchronised first, and DMA will be configured after.
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_HWDataReceivedIT(ASPEP_Handle_t *pHandle)
{
 8000b88:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    switch (pHandle->ASPEP_TL_State)
 8000b8a:	f890 3065 	ldrb.w	r3, [r0, #101]	; 0x65
{
 8000b8e:	4604      	mov	r4, r0
    switch (pHandle->ASPEP_TL_State)
 8000b90:	b13b      	cbz	r3, 8000ba2 <ASPEP_HWDataReceivedIT+0x1a>
 8000b92:	2b01      	cmp	r3, #1
 8000b94:	d104      	bne.n	8000ba0 <ASPEP_HWDataReceivedIT+0x18>
        break;
      }

      case WAITING_PAYLOAD:
      {
        pHandle->ASPEP_TL_State = WAITING_PACKET;
 8000b96:	2200      	movs	r2, #0
 8000b98:	f880 2065 	strb.w	r2, [r0, #101]	; 0x65
        /* Payload received, */
        pHandle->NewPacketAvailable = true;
 8000b9c:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61
        break;
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 8000ba0:	bd10      	pop	{r4, pc}
        if (ASPEP_CheckHeaderCRC(*(uint32_t *)pHandle->rxHeader) == true) //cstat !MISRAC2012-Rule-11.3
 8000ba2:	69c1      	ldr	r1, [r0, #28]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000ba4:	4a1e      	ldr	r2, [pc, #120]	; (8000c20 <ASPEP_HWDataReceivedIT+0x98>)
 8000ba6:	b2cb      	uxtb	r3, r1
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000ba8:	5cd3      	ldrb	r3, [r2, r3]
 8000baa:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 8000bae:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000bb0:	5cd3      	ldrb	r3, [r2, r3]
 8000bb2:	ea83 4311 	eor.w	r3, r3, r1, lsr #16
 8000bb6:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 24U) & 0xffU)];
 8000bb8:	5cd3      	ldrb	r3, [r2, r3]
 8000bba:	ea83 6311 	eor.w	r3, r3, r1, lsr #24
        if (ASPEP_CheckHeaderCRC(*(uint32_t *)pHandle->rxHeader) == true) //cstat !MISRAC2012-Rule-11.3
 8000bbe:	5cd3      	ldrb	r3, [r2, r3]
 8000bc0:	b95b      	cbnz	r3, 8000bda <ASPEP_HWDataReceivedIT+0x52>
          pHandle->rxPacketType = (ASPEP_packetType)(((uint32_t)pHandle->rxHeader[0]) & ID_MASK);
 8000bc2:	7f03      	ldrb	r3, [r0, #28]
 8000bc4:	f003 030f 	and.w	r3, r3, #15
 8000bc8:	2b06      	cmp	r3, #6
 8000bca:	6683      	str	r3, [r0, #104]	; 0x68
          switch (pHandle->rxPacketType)
 8000bcc:	d809      	bhi.n	8000be2 <ASPEP_HWDataReceivedIT+0x5a>
 8000bce:	2b04      	cmp	r3, #4
 8000bd0:	d81e      	bhi.n	8000c10 <ASPEP_HWDataReceivedIT+0x88>
              pHandle->badPacketFlag = ASPEP_BAD_PACKET_TYPE;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
}
 8000bd8:	bd10      	pop	{r4, pc}
          pHandle->badPacketFlag = ASPEP_BAD_CRC_HEADER;
 8000bda:	2304      	movs	r3, #4
 8000bdc:	f880 3062 	strb.w	r3, [r0, #98]	; 0x62
}
 8000be0:	bd10      	pop	{r4, pc}
 8000be2:	2b09      	cmp	r3, #9
 8000be4:	d1f5      	bne.n	8000bd2 <ASPEP_HWDataReceivedIT+0x4a>
              pHandle->rxLength = (uint16_t)((*((uint16_t *)pHandle->rxHeader) & 0x1FFF0U) >> (uint16_t)4);
 8000be6:	8b83      	ldrh	r3, [r0, #28]
 8000be8:	091b      	lsrs	r3, r3, #4
 8000bea:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
              if (0U == pHandle->rxLength) /* data packet with length 0 is a valid packet */
 8000bee:	b17b      	cbz	r3, 8000c10 <ASPEP_HWDataReceivedIT+0x88>
              else if (pHandle->rxLength <= pHandle->maxRXPayload)
 8000bf0:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d30f      	bcc.n	8000c18 <ASPEP_HWDataReceivedIT+0x90>
                pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxBuffer,  /* need to read + 2 bytes CRC*/
 8000bf8:	f890 206c 	ldrb.w	r2, [r0, #108]	; 0x6c
 8000bfc:	6981      	ldr	r1, [r0, #24]
 8000bfe:	6940      	ldr	r0, [r0, #20]
 8000c00:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8000c04:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000c06:	4798      	blx	r3
                pHandle->ASPEP_TL_State = WAITING_PAYLOAD;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
}
 8000c0e:	bd10      	pop	{r4, pc}
              pHandle->NewPacketAvailable = true;
 8000c10:	2301      	movs	r3, #1
 8000c12:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
}
 8000c16:	bd10      	pop	{r4, pc}
                pHandle->badPacketFlag = ASPEP_BAD_PACKET_SIZE;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	f880 3062 	strb.w	r3, [r0, #98]	; 0x62
}
 8000c1e:	bd10      	pop	{r4, pc}
 8000c20:	08009560 	.word	0x08009560

08000c24 <ASPEP_HWDMAReset>:
  * @brief  Resets DMA after debugger has stopped the MCU.
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_HWDMAReset(ASPEP_Handle_t *pHandle)
{
 8000c24:	4601      	mov	r1, r0
  {
#endif
    /* We must reset the RX state machine to be sure to not be in Waiting packet state */
    /* Otherwise the arrival of a new packet will trigger a NewPacketAvailable despite */
    /* the fact that bytes have been lost because of overrun (debugger paused for instance) */
    pHandle->ASPEP_TL_State = WAITING_PACKET;
 8000c26:	2200      	movs	r2, #0
 8000c28:	f880 2065 	strb.w	r2, [r0, #101]	; 0x65
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000c2c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8000c2e:	6940      	ldr	r0, [r0, #20]
 8000c30:	2204      	movs	r2, #4
 8000c32:	311c      	adds	r1, #28
 8000c34:	4718      	bx	r3
 8000c36:	bf00      	nop

08000c38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c38:	b510      	push	{r4, lr}
 8000c3a:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c3c:	2238      	movs	r2, #56	; 0x38
 8000c3e:	2100      	movs	r1, #0
 8000c40:	a806      	add	r0, sp, #24
 8000c42:	f008 fc3f 	bl	80094c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c46:	2000      	movs	r0, #0
 8000c48:	e9cd 0001 	strd	r0, r0, [sp, #4]
 8000c4c:	e9cd 0003 	strd	r0, r0, [sp, #12]
 8000c50:	9005      	str	r0, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000c52:	f004 fc81 	bl	8005558 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c56:	2001      	movs	r0, #1
 8000c58:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000c5c:	2206      	movs	r2, #6
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c5e:	e9cd 0106 	strd	r0, r1, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c62:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c64:	2403      	movs	r4, #3
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000c66:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 8000c68:	2155      	movs	r1, #85	; 0x55
 8000c6a:	2208      	movs	r2, #8
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c6c:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c6e:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 8000c72:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c76:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c7a:	f004 fceb 	bl	8005654 <HAL_RCC_OscConfig>
 8000c7e:	b108      	cbz	r0, 8000c84 <SystemClock_Config+0x4c>
  __ASM volatile ("cpsid i" : : : "memory");
 8000c80:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c82:	e7fe      	b.n	8000c82 <SystemClock_Config+0x4a>
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c84:	2104      	movs	r1, #4
 8000c86:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c88:	220f      	movs	r2, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c8a:	eb0d 0001 	add.w	r0, sp, r1
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c8e:	e9cd 2401 	strd	r2, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c92:	e9cd 3303 	strd	r3, r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c96:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c98:	f004 ff60 	bl	8005b5c <HAL_RCC_ClockConfig>
 8000c9c:	b108      	cbz	r0, 8000ca2 <SystemClock_Config+0x6a>
 8000c9e:	b672      	cpsid	i
  while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <SystemClock_Config+0x68>
  HAL_RCC_EnableCSS();
 8000ca2:	f005 f889 	bl	8005db8 <HAL_RCC_EnableCSS>
}
 8000ca6:	b014      	add	sp, #80	; 0x50
 8000ca8:	bd10      	pop	{r4, pc}
 8000caa:	bf00      	nop

08000cac <main>:
{
 8000cac:	b580      	push	{r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cae:	2400      	movs	r4, #0
{
 8000cb0:	b0a6      	sub	sp, #152	; 0x98
  HAL_Init();
 8000cb2:	f003 fa6f 	bl	8004194 <HAL_Init>
  SystemClock_Config();
 8000cb6:	f7ff ffbf 	bl	8000c38 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cba:	e9cd 4419 	strd	r4, r4, [sp, #100]	; 0x64
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cbe:	4da2      	ldr	r5, [pc, #648]	; (8000f48 <main+0x29c>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc0:	941b      	str	r4, [sp, #108]	; 0x6c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cc2:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8000cc4:	48a1      	ldr	r0, [pc, #644]	; (8000f4c <main+0x2a0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cc6:	f043 0304 	orr.w	r3, r3, #4
 8000cca:	64eb      	str	r3, [r5, #76]	; 0x4c
 8000ccc:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8000cce:	f003 0304 	and.w	r3, r3, #4
 8000cd2:	9303      	str	r3, [sp, #12]
 8000cd4:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cd6:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8000cd8:	f043 0320 	orr.w	r3, r3, #32
 8000cdc:	64eb      	str	r3, [r5, #76]	; 0x4c
 8000cde:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8000ce0:	f003 0320 	and.w	r3, r3, #32
 8000ce4:	9304      	str	r3, [sp, #16]
 8000ce6:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce8:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8000cea:	f043 0301 	orr.w	r3, r3, #1
 8000cee:	64eb      	str	r3, [r5, #76]	; 0x4c
 8000cf0:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8000cf2:	f003 0301 	and.w	r3, r3, #1
 8000cf6:	9305      	str	r3, [sp, #20]
 8000cf8:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfa:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8000cfc:	f043 0302 	orr.w	r3, r3, #2
 8000d00:	64eb      	str	r3, [r5, #76]	; 0x4c
 8000d02:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8000d04:	f003 0302 	and.w	r3, r3, #2
 8000d08:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 8000d0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8000d0e:	a917      	add	r1, sp, #92	; 0x5c
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 8000d10:	9317      	str	r3, [sp, #92]	; 0x5c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d12:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d16:	9a06      	ldr	r2, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d18:	9318      	str	r3, [sp, #96]	; 0x60
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8000d1a:	f004 fb23 	bl	8005364 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = M1_ENCODER_Z_Pin;
 8000d1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  HAL_GPIO_Init(M1_ENCODER_Z_GPIO_Port, &GPIO_InitStruct);
 8000d22:	488b      	ldr	r0, [pc, #556]	; (8000f50 <main+0x2a4>)
  GPIO_InitStruct.Pin = M1_ENCODER_Z_Pin;
 8000d24:	9317      	str	r3, [sp, #92]	; 0x5c
  HAL_GPIO_Init(M1_ENCODER_Z_GPIO_Port, &GPIO_InitStruct);
 8000d26:	a917      	add	r1, sp, #92	; 0x5c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d28:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	9419      	str	r4, [sp, #100]	; 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d2e:	9318      	str	r3, [sp, #96]	; 0x60
  HAL_GPIO_Init(M1_ENCODER_Z_GPIO_Port, &GPIO_InitStruct);
 8000d30:	f004 fb18 	bl	8005364 <HAL_GPIO_Init>
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000d34:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8000d36:	f043 0304 	orr.w	r3, r3, #4
 8000d3a:	64ab      	str	r3, [r5, #72]	; 0x48
 8000d3c:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8000d3e:	f003 0304 	and.w	r3, r3, #4
 8000d42:	9301      	str	r3, [sp, #4]
 8000d44:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d46:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8000d48:	f043 0301 	orr.w	r3, r3, #1
 8000d4c:	64ab      	str	r3, [r5, #72]	; 0x48
 8000d4e:	6cab      	ldr	r3, [r5, #72]	; 0x48
  hadc1.Instance = ADC1;
 8000d50:	4d80      	ldr	r5, [pc, #512]	; (8000f54 <main+0x2a8>)
  ADC_MultiModeTypeDef multimode = {0};
 8000d52:	940a      	str	r4, [sp, #40]	; 0x28
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d54:	f003 0301 	and.w	r3, r3, #1
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000d58:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d5a:	9302      	str	r3, [sp, #8]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000d5c:	223c      	movs	r2, #60	; 0x3c
 8000d5e:	a817      	add	r0, sp, #92	; 0x5c
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d60:	2720      	movs	r7, #32
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d62:	9b02      	ldr	r3, [sp, #8]
  ADC_MultiModeTypeDef multimode = {0};
 8000d64:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000d68:	f008 fbac 	bl	80094c4 <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d6c:	4621      	mov	r1, r4
 8000d6e:	463a      	mov	r2, r7
 8000d70:	a80f      	add	r0, sp, #60	; 0x3c
 8000d72:	f008 fba7 	bl	80094c4 <memset>
  hadc1.Instance = ADC1;
 8000d76:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d7a:	e9c5 4401 	strd	r4, r4, [r5, #4]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d7e:	e9c5 440b 	strd	r4, r4, [r5, #44]	; 0x2c
  hadc1.Init.GainCompensation = 0;
 8000d82:	612c      	str	r4, [r5, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d84:	83ac      	strh	r4, [r5, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d86:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d8a:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d8e:	63ec      	str	r4, [r5, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000d90:	f885 4040 	strb.w	r4, [r5, #64]	; 0x40
  hadc1.Instance = ADC1;
 8000d94:	602b      	str	r3, [r5, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000d96:	2401      	movs	r4, #1
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000d98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d9c:	2604      	movs	r6, #4
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d9e:	4628      	mov	r0, r5
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000da0:	616c      	str	r4, [r5, #20]
  hadc1.Init.NbrOfConversion = 1;
 8000da2:	622c      	str	r4, [r5, #32]
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000da4:	60eb      	str	r3, [r5, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000da6:	61ae      	str	r6, [r5, #24]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000da8:	f003 fa30 	bl	800420c <HAL_ADC_Init>
 8000dac:	b108      	cbz	r0, 8000db2 <main+0x106>
 8000dae:	b672      	cpsid	i
  while (1)
 8000db0:	e7fe      	b.n	8000db0 <main+0x104>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000db2:	900a      	str	r0, [sp, #40]	; 0x28
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000db4:	a90a      	add	r1, sp, #40	; 0x28
 8000db6:	4628      	mov	r0, r5
 8000db8:	f004 f8f6 	bl	8004fa8 <HAL_ADCEx_MultiModeConfigChannel>
 8000dbc:	b108      	cbz	r0, 8000dc2 <main+0x116>
 8000dbe:	b672      	cpsid	i
  while (1)
 8000dc0:	e7fe      	b.n	8000dc0 <main+0x114>
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000dc2:	4965      	ldr	r1, [pc, #404]	; (8000f58 <main+0x2ac>)
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000dc4:	f8ad 0080 	strh.w	r0, [sp, #128]	; 0x80
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 8000dc8:	2380      	movs	r3, #128	; 0x80
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000dca:	e9cd 3321 	strd	r3, r3, [sp, #132]	; 0x84
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000dce:	2309      	movs	r3, #9
 8000dd0:	e9cd 1317 	strd	r1, r3, [sp, #92]	; 0x5c
  sConfigInjected.InjectedOffset = 0;
 8000dd4:	e9cd 601b 	strd	r6, r0, [sp, #108]	; 0x6c
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000dd8:	f88d 0082 	strb.w	r0, [sp, #130]	; 0x82
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8000ddc:	f88d 008c 	strb.w	r0, [sp, #140]	; 0x8c
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000de0:	f04f 087f 	mov.w	r8, #127	; 0x7f
  sConfigInjected.InjectedNbrOfConversion = 3;
 8000de4:	2303      	movs	r3, #3
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000de6:	a917      	add	r1, sp, #92	; 0x5c
 8000de8:	4628      	mov	r0, r5
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8000dea:	9419      	str	r4, [sp, #100]	; 0x64
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000dec:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
  sConfigInjected.InjectedNbrOfConversion = 3;
 8000df0:	931f      	str	r3, [sp, #124]	; 0x7c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000df2:	f003 fdbd 	bl	8004970 <HAL_ADCEx_InjectedConfigChannel>
 8000df6:	b108      	cbz	r0, 8000dfc <main+0x150>
 8000df8:	b672      	cpsid	i
  while (1)
 8000dfa:	e7fe      	b.n	8000dfa <main+0x14e>
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000dfc:	4a57      	ldr	r2, [pc, #348]	; (8000f5c <main+0x2b0>)
 8000dfe:	f240 130f 	movw	r3, #271	; 0x10f
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000e02:	a917      	add	r1, sp, #92	; 0x5c
 8000e04:	4628      	mov	r0, r5
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000e06:	e9cd 2317 	strd	r2, r3, [sp, #92]	; 0x5c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000e0a:	f003 fdb1 	bl	8004970 <HAL_ADCEx_InjectedConfigChannel>
 8000e0e:	b108      	cbz	r0, 8000e14 <main+0x168>
 8000e10:	b672      	cpsid	i
  while (1)
 8000e12:	e7fe      	b.n	8000e12 <main+0x166>
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8000e14:	f8df e15c 	ldr.w	lr, [pc, #348]	; 8000f74 <main+0x2c8>
 8000e18:	f240 2315 	movw	r3, #533	; 0x215
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000e1c:	a917      	add	r1, sp, #92	; 0x5c
 8000e1e:	4628      	mov	r0, r5
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8000e20:	e9cd e317 	strd	lr, r3, [sp, #92]	; 0x5c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000e24:	f003 fda4 	bl	8004970 <HAL_ADCEx_InjectedConfigChannel>
 8000e28:	b108      	cbz	r0, 8000e2e <main+0x182>
 8000e2a:	b672      	cpsid	i
  while (1)
 8000e2c:	e7fe      	b.n	8000e2c <main+0x180>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e2e:	4b4c      	ldr	r3, [pc, #304]	; (8000f60 <main+0x2b4>)
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e30:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
  sConfig.Offset = 0;
 8000e34:	9014      	str	r0, [sp, #80]	; 0x50
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e36:	f04f 0806 	mov.w	r8, #6
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e3a:	4628      	mov	r0, r5
 8000e3c:	a90f      	add	r1, sp, #60	; 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e3e:	e9cd 380f 	strd	r3, r8, [sp, #60]	; 0x3c
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8000e42:	9611      	str	r6, [sp, #68]	; 0x44
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e44:	9613      	str	r6, [sp, #76]	; 0x4c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e46:	f003 fb07 	bl	8004458 <HAL_ADC_ConfigChannel>
 8000e4a:	b108      	cbz	r0, 8000e50 <main+0x1a4>
 8000e4c:	b672      	cpsid	i
  while (1)
 8000e4e:	e7fe      	b.n	8000e4e <main+0x1a2>
  hcordic.Instance = CORDIC;
 8000e50:	4844      	ldr	r0, [pc, #272]	; (8000f64 <main+0x2b8>)
 8000e52:	4b45      	ldr	r3, [pc, #276]	; (8000f68 <main+0x2bc>)
 8000e54:	6003      	str	r3, [r0, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8000e56:	f004 f957 	bl	8005108 <HAL_CORDIC_Init>
 8000e5a:	4605      	mov	r5, r0
 8000e5c:	b108      	cbz	r0, 8000e62 <main+0x1b6>
 8000e5e:	b672      	cpsid	i
  while (1)
 8000e60:	e7fe      	b.n	8000e60 <main+0x1b4>
  htim1.Instance = TIM1;
 8000e62:	4e42      	ldr	r6, [pc, #264]	; (8000f6c <main+0x2c0>)
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000e64:	900e      	str	r0, [sp, #56]	; 0x38
 8000e66:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 8000e6a:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e6e:	e9cd 000f 	strd	r0, r0, [sp, #60]	; 0x3c
 8000e72:	e9cd 0011 	strd	r0, r0, [sp, #68]	; 0x44
 8000e76:	e9cd 0013 	strd	r0, r0, [sp, #76]	; 0x4c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e7a:	e9cd 0008 	strd	r0, r0, [sp, #32]
 8000e7e:	9007      	str	r0, [sp, #28]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e80:	9015      	str	r0, [sp, #84]	; 0x54
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e82:	4601      	mov	r1, r0
 8000e84:	2234      	movs	r2, #52	; 0x34
 8000e86:	a817      	add	r0, sp, #92	; 0x5c
 8000e88:	f008 fb1c 	bl	80094c4 <memset>
  htim1.Instance = TIM1;
 8000e8c:	4b38      	ldr	r3, [pc, #224]	; (8000f70 <main+0x2c4>)
 8000e8e:	6033      	str	r3, [r6, #0]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000e90:	f44f 5ca6 	mov.w	ip, #5312	; 0x14c0
 8000e94:	f44f 7380 	mov.w	r3, #256	; 0x100
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e98:	4630      	mov	r0, r6
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000e9a:	e9c6 c303 	strd	ip, r3, [r6, #12]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000e9e:	60b7      	str	r7, [r6, #8]
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 8000ea0:	6174      	str	r4, [r6, #20]
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 8000ea2:	6075      	str	r5, [r6, #4]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ea4:	61b5      	str	r5, [r6, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ea6:	f005 f9f9 	bl	800629c <HAL_TIM_Base_Init>
 8000eaa:	b108      	cbz	r0, 8000eb0 <main+0x204>
 8000eac:	b672      	cpsid	i
  while (1)
 8000eae:	e7fe      	b.n	8000eae <main+0x202>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000eb0:	4630      	mov	r0, r6
 8000eb2:	f005 fa8f 	bl	80063d4 <HAL_TIM_PWM_Init>
 8000eb6:	b108      	cbz	r0, 8000ebc <main+0x210>
 8000eb8:	b672      	cpsid	i
  while (1)
 8000eba:	e7fe      	b.n	8000eba <main+0x20e>
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8000ebc:	2310      	movs	r3, #16
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000ebe:	a90a      	add	r1, sp, #40	; 0x28
 8000ec0:	4630      	mov	r0, r6
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000ec2:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8000ec6:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000ec8:	f005 fbce 	bl	8006668 <HAL_TIM_SlaveConfigSynchro>
 8000ecc:	b108      	cbz	r0, 8000ed2 <main+0x226>
 8000ece:	b672      	cpsid	i
  while (1)
 8000ed0:	e7fe      	b.n	8000ed0 <main+0x224>
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ed2:	2300      	movs	r3, #0
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8000ed4:	2470      	movs	r4, #112	; 0x70
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ed6:	4825      	ldr	r0, [pc, #148]	; (8000f6c <main+0x2c0>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ed8:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000eda:	a907      	add	r1, sp, #28
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000edc:	e9cd 4307 	strd	r4, r3, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ee0:	f005 fdc6 	bl	8006a70 <HAL_TIMEx_MasterConfigSynchronization>
 8000ee4:	b108      	cbz	r0, 8000eea <main+0x23e>
 8000ee6:	b672      	cpsid	i
  while (1)
 8000ee8:	e7fe      	b.n	8000ee8 <main+0x23c>
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000eea:	e9cd 0011 	strd	r0, r0, [sp, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000eee:	e9cd 0013 	strd	r0, r0, [sp, #76]	; 0x4c
  sConfigOC.Pulse = ((PWM_PERIOD_CYCLES) / 4);
 8000ef2:	2560      	movs	r5, #96	; 0x60
 8000ef4:	f44f 6326 	mov.w	r3, #2656	; 0xa60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ef8:	4602      	mov	r2, r0
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000efa:	9015      	str	r0, [sp, #84]	; 0x54
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000efc:	a90f      	add	r1, sp, #60	; 0x3c
 8000efe:	481b      	ldr	r0, [pc, #108]	; (8000f6c <main+0x2c0>)
  sConfigOC.Pulse = ((PWM_PERIOD_CYCLES) / 4);
 8000f00:	e9cd 530f 	strd	r5, r3, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f04:	f005 fcaa 	bl	800685c <HAL_TIM_PWM_ConfigChannel>
 8000f08:	b108      	cbz	r0, 8000f0e <main+0x262>
 8000f0a:	b672      	cpsid	i
  while (1)
 8000f0c:	e7fe      	b.n	8000f0c <main+0x260>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f0e:	4817      	ldr	r0, [pc, #92]	; (8000f6c <main+0x2c0>)
 8000f10:	2204      	movs	r2, #4
 8000f12:	a90f      	add	r1, sp, #60	; 0x3c
 8000f14:	f005 fca2 	bl	800685c <HAL_TIM_PWM_ConfigChannel>
 8000f18:	b108      	cbz	r0, 8000f1e <main+0x272>
 8000f1a:	b672      	cpsid	i
  while (1)
 8000f1c:	e7fe      	b.n	8000f1c <main+0x270>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f1e:	4813      	ldr	r0, [pc, #76]	; (8000f6c <main+0x2c0>)
 8000f20:	2208      	movs	r2, #8
 8000f22:	a90f      	add	r1, sp, #60	; 0x3c
 8000f24:	f005 fc9a 	bl	800685c <HAL_TIM_PWM_ConfigChannel>
 8000f28:	b108      	cbz	r0, 8000f2e <main+0x282>
 8000f2a:	b672      	cpsid	i
  while (1)
 8000f2c:	e7fe      	b.n	8000f2c <main+0x280>
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 8000f2e:	f241 43bf 	movw	r3, #5311	; 0x14bf
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f32:	480e      	ldr	r0, [pc, #56]	; (8000f6c <main+0x2c0>)
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000f34:	940f      	str	r4, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f36:	220c      	movs	r2, #12
 8000f38:	a90f      	add	r1, sp, #60	; 0x3c
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 8000f3a:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f3c:	f005 fc8e 	bl	800685c <HAL_TIM_PWM_ConfigChannel>
 8000f40:	b1d0      	cbz	r0, 8000f78 <main+0x2cc>
 8000f42:	b672      	cpsid	i
  while (1)
 8000f44:	e7fe      	b.n	8000f44 <main+0x298>
 8000f46:	bf00      	nop
 8000f48:	40021000 	.word	0x40021000
 8000f4c:	48000800 	.word	0x48000800
 8000f50:	48000400 	.word	0x48000400
 8000f54:	20000464 	.word	0x20000464
 8000f58:	04300002 	.word	0x04300002
 8000f5c:	1d500080 	.word	0x1d500080
 8000f60:	08600004 	.word	0x08600004
 8000f64:	200004d0 	.word	0x200004d0
 8000f68:	40020c00 	.word	0x40020c00
 8000f6c:	200005b8 	.word	0x200005b8
 8000f70:	40012c00 	.word	0x40012c00
 8000f74:	19200040 	.word	0x19200040
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8000f78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f80:	e9cd 2317 	strd	r2, r3, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f88:	e9cd 031b 	strd	r0, r3, [sp, #108]	; 0x6c
  sBreakDeadTimeConfig.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 8000f8c:	2248      	movs	r2, #72	; 0x48
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000f8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  sBreakDeadTimeConfig.Break2Filter = 3;
 8000f92:	2503      	movs	r5, #3
  sBreakDeadTimeConfig.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 8000f94:	e9cd 0219 	strd	r0, r2, [sp, #100]	; 0x64
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000f98:	e9cd 001d 	strd	r0, r0, [sp, #116]	; 0x74
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000f9c:	e9cd 031f 	strd	r0, r3, [sp, #124]	; 0x7c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000fa0:	e9cd 5021 	strd	r5, r0, [sp, #132]	; 0x84
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000fa4:	9023      	str	r0, [sp, #140]	; 0x8c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000fa6:	a917      	add	r1, sp, #92	; 0x5c
 8000fa8:	4854      	ldr	r0, [pc, #336]	; (80010fc <main+0x450>)
 8000faa:	f005 fdbd 	bl	8006b28 <HAL_TIMEx_ConfigBreakDeadTime>
 8000fae:	4604      	mov	r4, r0
 8000fb0:	b108      	cbz	r0, 8000fb6 <main+0x30a>
 8000fb2:	b672      	cpsid	i
  while (1)
 8000fb4:	e7fe      	b.n	8000fb4 <main+0x308>
  HAL_TIM_MspPostInit(&htim1);
 8000fb6:	4851      	ldr	r0, [pc, #324]	; (80010fc <main+0x450>)
 8000fb8:	f002 fe56 	bl	8003c68 <HAL_TIM_MspPostInit>
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000fbc:	2301      	movs	r3, #1
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000fbe:	9517      	str	r5, [sp, #92]	; 0x5c
  htim2.Instance = TIM2;
 8000fc0:	4d4f      	ldr	r5, [pc, #316]	; (8001100 <main+0x454>)
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000fc2:	9319      	str	r3, [sp, #100]	; 0x64
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000fc4:	931d      	str	r3, [sp, #116]	; 0x74
  htim2.Instance = TIM2;
 8000fc6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  sConfig.IC1Filter = M1_ENC_IC_FILTER;
 8000fca:	260c      	movs	r6, #12
  htim2.Instance = TIM2;
 8000fcc:	602b      	str	r3, [r5, #0]
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000fce:	a917      	add	r1, sp, #92	; 0x5c
  htim2.Init.Period = M1_PULSE_NBR;
 8000fd0:	f640 73ff 	movw	r3, #4095	; 0xfff
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000fd4:	4628      	mov	r0, r5
  htim2.Init.Period = M1_PULSE_NBR;
 8000fd6:	60eb      	str	r3, [r5, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fd8:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fdc:	e9c5 4401 	strd	r4, r4, [r5, #4]
  TIM_Encoder_InitTypeDef sConfig = {0};
 8000fe0:	9418      	str	r4, [sp, #96]	; 0x60
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fe2:	9411      	str	r4, [sp, #68]	; 0x44
  sConfig.IC1Filter = M1_ENC_IC_FILTER;
 8000fe4:	961b      	str	r6, [sp, #108]	; 0x6c
  sConfig.IC2Filter = M1_ENC_IC_FILTER;
 8000fe6:	961f      	str	r6, [sp, #124]	; 0x7c
  TIM_Encoder_InitTypeDef sConfig = {0};
 8000fe8:	941a      	str	r4, [sp, #104]	; 0x68
 8000fea:	941c      	str	r4, [sp, #112]	; 0x70
 8000fec:	941e      	str	r4, [sp, #120]	; 0x78
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fee:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ff0:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000ff2:	f005 fa89 	bl	8006508 <HAL_TIM_Encoder_Init>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	b108      	cbz	r0, 8000ffe <main+0x352>
 8000ffa:	b672      	cpsid	i
  while (1)
 8000ffc:	e7fe      	b.n	8000ffc <main+0x350>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ffe:	a90f      	add	r1, sp, #60	; 0x3c
 8001000:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001002:	930f      	str	r3, [sp, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001004:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001006:	f005 fd33 	bl	8006a70 <HAL_TIMEx_MasterConfigSynchronization>
 800100a:	4603      	mov	r3, r0
 800100c:	b108      	cbz	r0, 8001012 <main+0x366>
 800100e:	b672      	cpsid	i
  while (1)
 8001010:	e7fe      	b.n	8001010 <main+0x364>
  huart2.Instance = USART2;
 8001012:	4c3c      	ldr	r4, [pc, #240]	; (8001104 <main+0x458>)
  huart2.Init.BaudRate = 1843200;
 8001014:	493c      	ldr	r1, [pc, #240]	; (8001108 <main+0x45c>)
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001016:	62a3      	str	r3, [r4, #40]	; 0x28
  huart2.Init.BaudRate = 1843200;
 8001018:	f44f 12e1 	mov.w	r2, #1843200	; 0x1c2000
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800101c:	4620      	mov	r0, r4
  huart2.Init.BaudRate = 1843200;
 800101e:	e9c4 1200 	strd	r1, r2, [r4]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001022:	e9c4 3302 	strd	r3, r3, [r4, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001026:	e9c4 3604 	strd	r3, r6, [r4, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800102a:	e9c4 3306 	strd	r3, r3, [r4, #24]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800102e:	e9c4 3308 	strd	r3, r3, [r4, #32]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001032:	f006 f8eb 	bl	800720c <HAL_UART_Init>
 8001036:	4601      	mov	r1, r0
 8001038:	b108      	cbz	r0, 800103e <main+0x392>
 800103a:	b672      	cpsid	i
  while (1)
 800103c:	e7fe      	b.n	800103c <main+0x390>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800103e:	4620      	mov	r0, r4
 8001040:	f006 f96e 	bl	8007320 <HAL_UARTEx_SetTxFifoThreshold>
 8001044:	b108      	cbz	r0, 800104a <main+0x39e>
 8001046:	b672      	cpsid	i
  while (1)
 8001048:	e7fe      	b.n	8001048 <main+0x39c>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800104a:	482e      	ldr	r0, [pc, #184]	; (8001104 <main+0x458>)
 800104c:	2100      	movs	r1, #0
 800104e:	f006 f9a9 	bl	80073a4 <HAL_UARTEx_SetRxFifoThreshold>
 8001052:	b108      	cbz	r0, 8001058 <main+0x3ac>
 8001054:	b672      	cpsid	i
  while (1)
 8001056:	e7fe      	b.n	8001056 <main+0x3aa>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001058:	482a      	ldr	r0, [pc, #168]	; (8001104 <main+0x458>)
 800105a:	f006 f943 	bl	80072e4 <HAL_UARTEx_DisableFifoMode>
 800105e:	4604      	mov	r4, r0
 8001060:	b108      	cbz	r0, 8001066 <main+0x3ba>
 8001062:	b672      	cpsid	i
  while (1)
 8001064:	e7fe      	b.n	8001064 <main+0x3b8>
  MX_MotorControl_Init();
 8001066:	f001 f8a9 	bl	80021bc <MX_MotorControl_Init>
  HAL_NVIC_SetPriority(USART2_IRQn, 3, 1);
 800106a:	2103      	movs	r1, #3
 800106c:	2201      	movs	r2, #1
 800106e:	2026      	movs	r0, #38	; 0x26
 8001070:	f004 f876 	bl	8005160 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001074:	2026      	movs	r0, #38	; 0x26
 8001076:	f004 f8b1 	bl	80051dc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 800107a:	4622      	mov	r2, r4
 800107c:	2103      	movs	r1, #3
 800107e:	200b      	movs	r0, #11
 8001080:	f004 f86e 	bl	8005160 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001084:	200b      	movs	r0, #11
 8001086:	f004 f8a9 	bl	80051dc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 4, 1);
 800108a:	2201      	movs	r2, #1
 800108c:	2104      	movs	r1, #4
 800108e:	2018      	movs	r0, #24
 8001090:	f004 f866 	bl	8005160 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001094:	2018      	movs	r0, #24
 8001096:	f004 f8a1 	bl	80051dc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800109a:	4622      	mov	r2, r4
 800109c:	4621      	mov	r1, r4
 800109e:	2019      	movs	r0, #25
 80010a0:	f004 f85e 	bl	8005160 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80010a4:	2019      	movs	r0, #25
 80010a6:	f004 f899 	bl	80051dc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 80010aa:	4622      	mov	r2, r4
 80010ac:	2102      	movs	r1, #2
 80010ae:	2012      	movs	r0, #18
 80010b0:	f004 f856 	bl	8005160 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80010b4:	2012      	movs	r0, #18
 80010b6:	f004 f891 	bl	80051dc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 80010ba:	4622      	mov	r2, r4
 80010bc:	2103      	movs	r1, #3
 80010be:	201c      	movs	r0, #28
 80010c0:	f004 f84e 	bl	8005160 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80010c4:	201c      	movs	r0, #28
 80010c6:	f004 f889 	bl	80051dc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 80010ca:	4622      	mov	r2, r4
 80010cc:	2103      	movs	r1, #3
 80010ce:	2028      	movs	r0, #40	; 0x28
 80010d0:	f004 f846 	bl	8005160 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010d4:	2028      	movs	r0, #40	; 0x28
 80010d6:	f004 f881 	bl	80051dc <HAL_NVIC_EnableIRQ>
  MC_StartMotor1();
 80010da:	f000 f819 	bl	8001110 <MC_StartMotor1>
    HAL_UART_Transmit(&huart2, &pos, sizeof(pos), 100);
 80010de:	4c09      	ldr	r4, [pc, #36]	; (8001104 <main+0x458>)
    float pos = MC_GetCurrentPosition1();
 80010e0:	f000 f828 	bl	8001134 <MC_GetCurrentPosition1>
    HAL_UART_Transmit(&huart2, &pos, sizeof(pos), 100);
 80010e4:	2364      	movs	r3, #100	; 0x64
 80010e6:	2204      	movs	r2, #4
 80010e8:	a917      	add	r1, sp, #92	; 0x5c
 80010ea:	4620      	mov	r0, r4
    float pos = MC_GetCurrentPosition1();
 80010ec:	ed8d 0a17 	vstr	s0, [sp, #92]	; 0x5c
    HAL_UART_Transmit(&huart2, &pos, sizeof(pos), 100);
 80010f0:	f005 ffc6 	bl	8007080 <HAL_UART_Transmit>
    HAL_Delay(10);
 80010f4:	200a      	movs	r0, #10
 80010f6:	f003 f877 	bl	80041e8 <HAL_Delay>
  while (1)
 80010fa:	e7f1      	b.n	80010e0 <main+0x434>
 80010fc:	200005b8 	.word	0x200005b8
 8001100:	20000604 	.word	0x20000604
 8001104:	20000650 	.word	0x20000650
 8001108:	40004400 	.word	0x40004400

0800110c <Error_Handler>:
 800110c:	b672      	cpsid	i
  while (1)
 800110e:	e7fe      	b.n	800110e <Error_Handler+0x2>

08001110 <MC_StartMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StartMotor1(void)
{
  return (MCI_StartMotor(pMCI[M1]));
 8001110:	4b01      	ldr	r3, [pc, #4]	; (8001118 <MC_StartMotor1+0x8>)
 8001112:	6818      	ldr	r0, [r3, #0]
 8001114:	f000 b8d0 	b.w	80012b8 <MCI_StartMotor>
 8001118:	200018dc 	.word	0x200018dc

0800111c <MC_StopMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StopMotor1(void)
{
  return (MCI_StopMotor(pMCI[M1]));
 800111c:	4b01      	ldr	r3, [pc, #4]	; (8001124 <MC_StopMotor1+0x8>)
 800111e:	6818      	ldr	r0, [r3, #0]
 8001120:	f000 b8fc 	b.w	800131c <MCI_StopMotor>
 8001124:	200018dc 	.word	0x200018dc

08001128 <MC_GetSTMStateMotor1>:
/**
 * @brief returns the current state of Motor 1 state machine
 */
__weak MCI_State_t MC_GetSTMStateMotor1(void)
{
  return (MCI_GetSTMState(pMCI[M1]));
 8001128:	4b01      	ldr	r3, [pc, #4]	; (8001130 <MC_GetSTMStateMotor1+0x8>)
 800112a:	6818      	ldr	r0, [r3, #0]
 800112c:	f000 b8b8 	b.w	80012a0 <MCI_GetSTMState>
 8001130:	200018dc 	.word	0x200018dc

08001134 <MC_GetCurrentPosition1>:
/**
 * @brief returns the current position of Motor 1.
 *   */
__weak float_t MC_GetCurrentPosition1(void)
{
  return (MCI_GetCurrentPosition(pMCI[M1]));
 8001134:	4b01      	ldr	r3, [pc, #4]	; (800113c <MC_GetCurrentPosition1+0x8>)
 8001136:	6818      	ldr	r0, [r3, #0]
 8001138:	f000 b8b6 	b.w	80012a8 <MCI_GetCurrentPosition>
 800113c:	200018dc 	.word	0x200018dc

08001140 <MC_ProfilerCommand>:
 * @brief Not implemented MC_Profiler function.
 *  */ //cstat !MISRAC2012-Rule-2.7 !RED-unused-param  !MISRAC2012-Rule-2.7  !MISRAC2012-Rule-8.13
__weak uint8_t MC_ProfilerCommand(uint16_t rxLength, uint8_t *rxBuffer, int16_t txSyncFreeSpace, uint16_t *txLength, uint8_t *txBuffer)
{
  return (MCP_CMD_UNKNOWN);
}
 8001140:	2002      	movs	r0, #2
 8001142:	4770      	bx	lr

08001144 <MC_APP_BootHook>:
   */

/* USER CODE BEGIN BootHook */

/* USER CODE END BootHook */
}
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop

08001148 <MC_APP_PostMediumFrequencyHook_M1>:
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop

0800114c <MCI_Init>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pSTC = pSTC;
 800114c:	6001      	str	r1, [r0, #0]
    pHandle->pFOCVars = pFOCVars;
    pHandle->pPosCtrl = pPosCtrl;
 800114e:	60c3      	str	r3, [r0, #12]
    pHandle->pPWM = pPWMHandle;

    /* Buffer related initialization */
    pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8001150:	2100      	movs	r1, #0
    pHandle->pPWM = pPWMHandle;
 8001152:	9b00      	ldr	r3, [sp, #0]
    pHandle->pFOCVars = pFOCVars;
 8001154:	6042      	str	r2, [r0, #4]
    pHandle->hFinalTorque = 0;
    pHandle->hDurationms = 0;
    pHandle->CommandState = MCI_BUFFER_EMPTY;
    pHandle->DirectCommand = MCI_NO_COMMAND;
    pHandle->State = IDLE;
    pHandle->CurrentFaults = MC_NO_FAULTS;
 8001156:	e9c0 1108 	strd	r1, r1, [r0, #32]
    pHandle->pPWM = pPWMHandle;
 800115a:	6083      	str	r3, [r0, #8]
    pHandle->lastCommand = MCI_NOCOMMANDSYET;
 800115c:	7401      	strb	r1, [r0, #16]
    pHandle->hFinalSpeed = 0;
 800115e:	f8c0 1012 	str.w	r1, [r0, #18]
    pHandle->CommandState = MCI_BUFFER_EMPTY;
 8001162:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
    pHandle->PastFaults = MC_NO_FAULTS;
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8001166:	4770      	bx	lr

08001168 <MCI_ExecSpeedRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
 8001168:	f04f 0c01 	mov.w	ip, #1
    pHandle->hFinalSpeed = hFinalSpeed;
    pHandle->hDurationms = hDurationms;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800116c:	f240 3301 	movw	r3, #769	; 0x301
    pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
 8001170:	f880 c010 	strb.w	ip, [r0, #16]
    pHandle->hFinalSpeed = hFinalSpeed;
 8001174:	8241      	strh	r1, [r0, #18]
    pHandle->hDurationms = hDurationms;
 8001176:	8402      	strh	r2, [r0, #32]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001178:	8503      	strh	r3, [r0, #40]	; 0x28
    pHandle->LastModalitySetByUser = MCM_SPEED_MODE;

#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 800117a:	4770      	bx	lr

0800117c <MCI_ExecTorqueRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->lastCommand = MCI_CMD_EXECTORQUERAMP;
 800117c:	f04f 0c02 	mov.w	ip, #2
    pHandle->hFinalTorque = hFinalTorque;
    pHandle->hDurationms = hDurationms;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001180:	f240 4301 	movw	r3, #1025	; 0x401
    pHandle->lastCommand = MCI_CMD_EXECTORQUERAMP;
 8001184:	f880 c010 	strb.w	ip, [r0, #16]
    pHandle->hFinalTorque = hFinalTorque;
 8001188:	8281      	strh	r1, [r0, #20]
    pHandle->hDurationms = hDurationms;
 800118a:	8402      	strh	r2, [r0, #32]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800118c:	8503      	strh	r3, [r0, #40]	; 0x28
    pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 800118e:	4770      	bx	lr

08001190 <MCI_SetCurrentReferences>:
  * function.

  @sa MCI_SetCurrentReferences_F
  */
__weak void MCI_SetCurrentReferences(MCI_Handle_t *pHandle, qd_t Iqdref)
{
 8001190:	b082      	sub	sp, #8
  }
  else
  {
#endif

    pHandle->lastCommand = MCI_CMD_SETCURRENTREFERENCES;
 8001192:	2203      	movs	r2, #3
    pHandle->Iqdref.q = Iqdref.q;
    pHandle->Iqdref.d = Iqdref.d;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001194:	f240 4301 	movw	r3, #1025	; 0x401
    pHandle->lastCommand = MCI_CMD_SETCURRENTREFERENCES;
 8001198:	7402      	strb	r2, [r0, #16]
    pHandle->Iqdref.q = Iqdref.q;
 800119a:	f8c0 1016 	str.w	r1, [r0, #22]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800119e:	8503      	strh	r3, [r0, #40]	; 0x28
    pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 80011a0:	b002      	add	sp, #8
 80011a2:	4770      	bx	lr

080011a4 <MCI_ExecPositionCommand>:
  *
  * Users can check the status of the command by calling the MCI_IsCommandAcknowledged()
  * function.
  */
__weak void MCI_ExecPositionCommand(MCI_Handle_t *pHandle, float_t FinalPosition, float_t Duration)
{
 80011a4:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFOCVars->bDriveInput = INTERNAL;
 80011a6:	6843      	ldr	r3, [r0, #4]
{
 80011a8:	ed2d 8b02 	vpush	{d8}
    pHandle->pFOCVars->bDriveInput = INTERNAL;
 80011ac:	2200      	movs	r2, #0
 80011ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
{
 80011b2:	b082      	sub	sp, #8
 80011b4:	4604      	mov	r4, r0
    float_t currentPositionRad = (float_t)(SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC))) / RADTOS16;
 80011b6:	6800      	ldr	r0, [r0, #0]
{
 80011b8:	eeb0 8a60 	vmov.f32	s16, s1
 80011bc:	eef0 8a40 	vmov.f32	s17, s0
    float_t currentPositionRad = (float_t)(SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC))) / RADTOS16;
 80011c0:	f007 fde2 	bl	8008d88 <STC_GetSpeedSensor>
 80011c4:	f007 fd86 	bl	8008cd4 <SPD_GetMecAngle>
    if (Duration > 0)
 80011c8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80011cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float_t currentPositionRad = (float_t)(SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC))) / RADTOS16;
 80011d0:	9001      	str	r0, [sp, #4]
    if (Duration > 0)
 80011d2:	dd15      	ble.n	8001200 <MCI_ExecPositionCommand+0x5c>
    float_t currentPositionRad = (float_t)(SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC))) / RADTOS16;
 80011d4:	ee07 0a90 	vmov	s15, r0
 80011d8:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800120c <MCI_ExecPositionCommand+0x68>
    {
      TC_MoveCommand(pHandle->pPosCtrl, currentPositionRad, FinalPosition - currentPositionRad, Duration);
 80011dc:	68e0      	ldr	r0, [r4, #12]
    float_t currentPositionRad = (float_t)(SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC))) / RADTOS16;
 80011de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
      TC_MoveCommand(pHandle->pPosCtrl, currentPositionRad, FinalPosition - currentPositionRad, Duration);
 80011e2:	eeb0 1a48 	vmov.f32	s2, s16
    float_t currentPositionRad = (float_t)(SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC))) / RADTOS16;
 80011e6:	ee27 0a87 	vmul.f32	s0, s15, s14
      TC_MoveCommand(pHandle->pPosCtrl, currentPositionRad, FinalPosition - currentPositionRad, Duration);
 80011ea:	ee78 0ac0 	vsub.f32	s1, s17, s0
 80011ee:	f007 fe9d 	bl	8008f2c <TC_MoveCommand>
    else
    {
      TC_FollowCommand(pHandle->pPosCtrl, FinalPosition);
    }

    pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
 80011f2:	2304      	movs	r3, #4
 80011f4:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 80011f8:	b002      	add	sp, #8
 80011fa:	ecbd 8b02 	vpop	{d8}
 80011fe:	bd10      	pop	{r4, pc}
      TC_FollowCommand(pHandle->pPosCtrl, FinalPosition);
 8001200:	68e0      	ldr	r0, [r4, #12]
 8001202:	eeb0 0a68 	vmov.f32	s0, s17
 8001206:	f007 ff03 	bl	8009010 <TC_FollowCommand>
 800120a:	e7f2      	b.n	80011f2 <MCI_ExecPositionCommand+0x4e>
 800120c:	38c90fdb 	.word	0x38c90fdb

08001210 <MCI_FaultProcessing>:
  }
  else
  {
#endif
    /* Set current errors */
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 8001210:	8c83      	ldrh	r3, [r0, #36]	; 0x24
    pHandle->PastFaults |= hSetErrors;
 8001212:	f8b0 c026 	ldrh.w	ip, [r0, #38]	; 0x26
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 8001216:	430b      	orrs	r3, r1
 8001218:	ea23 0302 	bic.w	r3, r3, r2
    pHandle->PastFaults |= hSetErrors;
 800121c:	ea41 010c 	orr.w	r1, r1, ip
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 8001220:	8483      	strh	r3, [r0, #36]	; 0x24
    pHandle->PastFaults |= hSetErrors;
 8001222:	84c1      	strh	r1, [r0, #38]	; 0x26
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop

08001228 <MCI_ExecBufferedCommands>:
    /* Nothing to do */
  }
  else
  {
#endif
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8001228:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 800122c:	2b01      	cmp	r3, #1
 800122e:	d000      	beq.n	8001232 <MCI_ExecBufferedCommands+0xa>
 8001230:	4770      	bx	lr
{
 8001232:	b510      	push	{r4, lr}
    {
      bool commandHasBeenExecuted = false;
      switch (pHandle->lastCommand)
 8001234:	7c02      	ldrb	r2, [r0, #16]
 8001236:	2a02      	cmp	r2, #2
 8001238:	4604      	mov	r4, r0
 800123a:	d007      	beq.n	800124c <MCI_ExecBufferedCommands+0x24>
 800123c:	2a03      	cmp	r2, #3
 800123e:	d028      	beq.n	8001292 <MCI_ExecBufferedCommands+0x6a>
 8001240:	2a01      	cmp	r2, #1
 8001242:	d017      	beq.n	8001274 <MCI_ExecBufferedCommands+0x4c>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESSFULLY;
      }
      else
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESSFULLY;
 8001244:	2303      	movs	r3, #3
 8001246:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
      }
    }
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 800124a:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 800124c:	6843      	ldr	r3, [r0, #4]
 800124e:	2200      	movs	r2, #0
 8001250:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 8001254:	6800      	ldr	r0, [r0, #0]
 8001256:	2104      	movs	r1, #4
 8001258:	f007 fda8 	bl	8008dac <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms);
 800125c:	8c22      	ldrh	r2, [r4, #32]
 800125e:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8001262:	6820      	ldr	r0, [r4, #0]
 8001264:	f007 fda6 	bl	8008db4 <STC_ExecRamp>
      if (commandHasBeenExecuted)
 8001268:	2800      	cmp	r0, #0
 800126a:	d0eb      	beq.n	8001244 <MCI_ExecBufferedCommands+0x1c>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESSFULLY;
 800126c:	2302      	movs	r3, #2
 800126e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
 8001272:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8001274:	6843      	ldr	r3, [r0, #4]
 8001276:	2200      	movs	r2, #0
 8001278:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode(pHandle->pSTC, MCM_SPEED_MODE);
 800127c:	6800      	ldr	r0, [r0, #0]
 800127e:	2103      	movs	r1, #3
 8001280:	f007 fd94 	bl	8008dac <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms);
 8001284:	8c22      	ldrh	r2, [r4, #32]
 8001286:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 800128a:	6820      	ldr	r0, [r4, #0]
 800128c:	f007 fd92 	bl	8008db4 <STC_ExecRamp>
          break;
 8001290:	e7ea      	b.n	8001268 <MCI_ExecBufferedCommands+0x40>
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8001292:	6842      	ldr	r2, [r0, #4]
 8001294:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 8001298:	f8d0 3016 	ldr.w	r3, [r0, #22]
 800129c:	6113      	str	r3, [r2, #16]
      if (commandHasBeenExecuted)
 800129e:	e7e5      	b.n	800126c <MCI_ExecBufferedCommands+0x44>

080012a0 <MCI_GetSTMState>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? FAULT_NOW : pHandle->State);
#else
  return (pHandle->State);
#endif
}
 80012a0:	f890 0023 	ldrb.w	r0, [r0, #35]	; 0x23
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop

080012a8 <MCI_GetCurrentPosition>:
__weak float_t MCI_GetCurrentPosition(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? 0 : TC_GetCurrentPosition(pHandle->pPosCtrl));
#else
  return (TC_GetCurrentPosition(pHandle->pPosCtrl));
 80012a8:	68c0      	ldr	r0, [r0, #12]
 80012aa:	f008 b883 	b.w	80093b4 <TC_GetCurrentPosition>
 80012ae:	bf00      	nop

080012b0 <MCI_GetOccurredFaults>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MC_SW_ERROR : (uint16_t)pHandle->PastFaults);
#else
  return ((uint16_t)pHandle->PastFaults);
#endif
}
 80012b0:	8cc0      	ldrh	r0, [r0, #38]	; 0x26
 80012b2:	4770      	bx	lr

080012b4 <MCI_GetCurrentFaults>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MC_SW_ERROR : (uint16_t)pHandle->CurrentFaults);
#else
  return ((uint16_t)pHandle->CurrentFaults);
#endif
}
 80012b4:	8c80      	ldrh	r0, [r0, #36]	; 0x24
 80012b6:	4770      	bx	lr

080012b8 <MCI_StartMotor>:
{
 80012b8:	b510      	push	{r4, lr}
 80012ba:	4604      	mov	r4, r0
    if ((IDLE == MCI_GetSTMState(pHandle)) &&
 80012bc:	f7ff fff0 	bl	80012a0 <MCI_GetSTMState>
 80012c0:	b108      	cbz	r0, 80012c6 <MCI_StartMotor+0xe>
  bool retVal = false;
 80012c2:	2000      	movs	r0, #0
}
 80012c4:	bd10      	pop	{r4, pc}
        (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80012c6:	4620      	mov	r0, r4
 80012c8:	f7ff fff2 	bl	80012b0 <MCI_GetOccurredFaults>
    if ((IDLE == MCI_GetSTMState(pHandle)) &&
 80012cc:	2800      	cmp	r0, #0
 80012ce:	d1f8      	bne.n	80012c2 <MCI_StartMotor+0xa>
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 80012d0:	4620      	mov	r0, r4
 80012d2:	f7ff ffef 	bl	80012b4 <MCI_GetCurrentFaults>
        (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80012d6:	2800      	cmp	r0, #0
 80012d8:	d1f3      	bne.n	80012c2 <MCI_StartMotor+0xa>
      pHandle->DirectCommand = MCI_START;
 80012da:	2001      	movs	r0, #1
 80012dc:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
      pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80012e0:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
}
 80012e4:	bd10      	pop	{r4, pc}
 80012e6:	bf00      	nop

080012e8 <MCI_StartWithPolarizationMotor>:
{
 80012e8:	b510      	push	{r4, lr}
 80012ea:	4604      	mov	r4, r0
    if ((IDLE == MCI_GetSTMState(pHandle)) &&
 80012ec:	f7ff ffd8 	bl	80012a0 <MCI_GetSTMState>
 80012f0:	b108      	cbz	r0, 80012f6 <MCI_StartWithPolarizationMotor+0xe>
  bool retVal = true;
 80012f2:	2001      	movs	r0, #1
}
 80012f4:	bd10      	pop	{r4, pc}
        (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80012f6:	4620      	mov	r0, r4
 80012f8:	f7ff ffda 	bl	80012b0 <MCI_GetOccurredFaults>
    if ((IDLE == MCI_GetSTMState(pHandle)) &&
 80012fc:	2800      	cmp	r0, #0
 80012fe:	d1f8      	bne.n	80012f2 <MCI_StartWithPolarizationMotor+0xa>
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8001300:	4620      	mov	r0, r4
 8001302:	f7ff ffd7 	bl	80012b4 <MCI_GetCurrentFaults>
        (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8001306:	2800      	cmp	r0, #0
 8001308:	d1f3      	bne.n	80012f2 <MCI_StartWithPolarizationMotor+0xa>
      pHandle->DirectCommand = MCI_START;
 800130a:	2201      	movs	r2, #1
      pHandle->pPWM->offsetCalibStatus = false;
 800130c:	68a1      	ldr	r1, [r4, #8]
      pHandle->DirectCommand = MCI_START;
 800130e:	f884 2022 	strb.w	r2, [r4, #34]	; 0x22
      pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001312:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
      pHandle->pPWM->offsetCalibStatus = false;
 8001316:	f881 0081 	strb.w	r0, [r1, #129]	; 0x81
}
 800131a:	bd10      	pop	{r4, pc}

0800131c <MCI_StopMotor>:
{
 800131c:	b538      	push	{r3, r4, r5, lr}
 800131e:	4605      	mov	r5, r0
    State = MCI_GetSTMState(pHandle);
 8001320:	f7ff ffbe 	bl	80012a0 <MCI_GetSTMState>
    if ((IDLE == State) || (ICLWAIT == State))
 8001324:	b150      	cbz	r0, 800133c <MCI_StopMotor+0x20>
 8001326:	f1b0 040c 	subs.w	r4, r0, #12
    if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 800132a:	4628      	mov	r0, r5
    if ((IDLE == State) || (ICLWAIT == State))
 800132c:	bf18      	it	ne
 800132e:	2401      	movne	r4, #1
    if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8001330:	f7ff ffbe 	bl	80012b0 <MCI_GetOccurredFaults>
 8001334:	b140      	cbz	r0, 8001348 <MCI_StopMotor+0x2c>
  bool retVal = false;
 8001336:	2400      	movs	r4, #0
}
 8001338:	4620      	mov	r0, r4
 800133a:	bd38      	pop	{r3, r4, r5, pc}
      status = false;
 800133c:	4604      	mov	r4, r0
    if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 800133e:	4628      	mov	r0, r5
 8001340:	f7ff ffb6 	bl	80012b0 <MCI_GetOccurredFaults>
 8001344:	2800      	cmp	r0, #0
 8001346:	d1f6      	bne.n	8001336 <MCI_StopMotor+0x1a>
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 8001348:	4628      	mov	r0, r5
 800134a:	f7ff ffb3 	bl	80012b4 <MCI_GetCurrentFaults>
    if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 800134e:	2800      	cmp	r0, #0
 8001350:	d1f1      	bne.n	8001336 <MCI_StopMotor+0x1a>
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 8001352:	2c00      	cmp	r4, #0
 8001354:	d0ef      	beq.n	8001336 <MCI_StopMotor+0x1a>
      pHandle->DirectCommand = MCI_STOP;
 8001356:	2305      	movs	r3, #5
 8001358:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
      retVal = true;
 800135c:	e7ec      	b.n	8001338 <MCI_StopMotor+0x1c>
 800135e:	bf00      	nop

08001360 <MCI_FaultAcknowledged>:
{
 8001360:	b510      	push	{r4, lr}
 8001362:	4604      	mov	r4, r0
    if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8001364:	f7ff ff9c 	bl	80012a0 <MCI_GetSTMState>
 8001368:	280b      	cmp	r0, #11
 800136a:	d001      	beq.n	8001370 <MCI_FaultAcknowledged+0x10>
  bool reVal = false;
 800136c:	2000      	movs	r0, #0
}
 800136e:	bd10      	pop	{r4, pc}
    if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8001370:	4620      	mov	r0, r4
 8001372:	f7ff ff9f 	bl	80012b4 <MCI_GetCurrentFaults>
 8001376:	2800      	cmp	r0, #0
 8001378:	d1f8      	bne.n	800136c <MCI_FaultAcknowledged+0xc>
      pHandle->DirectCommand = MCI_ACK_FAULTS;
 800137a:	2302      	movs	r3, #2
 800137c:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
      pHandle->PastFaults = MC_NO_FAULTS;
 8001380:	84e0      	strh	r0, [r4, #38]	; 0x26
      reVal = true;
 8001382:	2001      	movs	r0, #1
}
 8001384:	bd10      	pop	{r4, pc}
 8001386:	bf00      	nop

08001388 <MCI_GetFaultState>:
    LocalFaultState = MC_SW_ERROR | (MC_SW_ERROR << 16);
  }
  else
  {
#endif
    LocalFaultState = (uint32_t)(pHandle->PastFaults);
 8001388:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
    LocalFaultState |= (uint32_t)(pHandle->CurrentFaults) << 16;
 800138a:	8c80      	ldrh	r0, [r0, #36]	; 0x24
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
  return (LocalFaultState);
}
 800138c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop

08001394 <MCI_GetControlMode>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MCM_TORQUE_MODE : pHandle->LastModalitySetByUser);
#else
  return (pHandle->LastModalitySetByUser);
#endif
}
 8001394:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop

0800139c <MCI_GetLastRampFinalSpeed>:
  }
  return (retVal);
#else
  return (pHandle->hFinalSpeed);
#endif
}
 800139c:	f9b0 0012 	ldrsh.w	r0, [r0, #18]
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop

080013a4 <MCI_GetLastRampFinalTorque>:
  }
  return (retVal);
#else
  return (pHandle->hFinalTorque);
#endif
}
 80013a4:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop

080013ac <MCI_GetLastRampFinalDuration>:
  }
  return (retVal);
#else
  return (pHandle->hDurationms);
#endif
}
 80013ac:	8c00      	ldrh	r0, [r0, #32]
 80013ae:	4770      	bx	lr

080013b0 <MCI_StopRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    STC_StopRamp(pHandle->pSTC);
 80013b0:	6800      	ldr	r0, [r0, #0]
 80013b2:	f007 bd43 	b.w	8008e3c <STC_StopRamp>
 80013b6:	bf00      	nop

080013b8 <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit(MCI_Handle_t *pHandle)
{
 80013b8:	b508      	push	{r3, lr}
    temp_speed = 0;
  }
  else
  {
#endif
    SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor(pHandle->pSTC);
 80013ba:	6800      	ldr	r0, [r0, #0]
 80013bc:	f007 fce4 	bl	8008d88 <STC_GetSpeedSensor>
    temp_speed = SPD_GetAvrgMecSpeedUnit(SpeedSensor);
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
  return (temp_speed);
}
 80013c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    temp_speed = SPD_GetAvrgMecSpeedUnit(SpeedSensor);
 80013c4:	f007 bc88 	b.w	8008cd8 <SPD_GetAvrgMecSpeedUnit>

080013c8 <MCI_GetMecSpeedRefUnit>:
__weak int16_t MCI_GetMecSpeedRefUnit(MCI_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? 0 : STC_GetMecSpeedRefUnit(pHandle->pSTC));
#else
  return (STC_GetMecSpeedRefUnit(pHandle->pSTC));
 80013c8:	6800      	ldr	r0, [r0, #0]
 80013ca:	f007 bce7 	b.w	8008d9c <STC_GetMecSpeedRefUnit>
 80013ce:	bf00      	nop

080013d0 <MCI_GetIab>:
  {
    tempVal = pHandle->pFOCVars->Iab;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iab);
 80013d0:	6842      	ldr	r2, [r0, #4]
 80013d2:	6810      	ldr	r0, [r2, #0]
 80013d4:	2300      	movs	r3, #0
 80013d6:	b282      	uxth	r2, r0
 80013d8:	f362 030f 	bfi	r3, r2, #0, #16
 80013dc:	0c00      	lsrs	r0, r0, #16
 80013de:	f360 431f 	bfi	r3, r0, #16, #16
{
 80013e2:	b082      	sub	sp, #8
#endif
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	b002      	add	sp, #8
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop

080013ec <MCI_GetIalphabeta>:
  {
    tempVal = pHandle->pFOCVars->Ialphabeta;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Ialphabeta);
 80013ec:	6842      	ldr	r2, [r0, #4]
 80013ee:	6850      	ldr	r0, [r2, #4]
 80013f0:	2300      	movs	r3, #0
 80013f2:	b282      	uxth	r2, r0
 80013f4:	f362 030f 	bfi	r3, r2, #0, #16
 80013f8:	0c00      	lsrs	r0, r0, #16
 80013fa:	f360 431f 	bfi	r3, r0, #16, #16
{
 80013fe:	b082      	sub	sp, #8
#endif
}
 8001400:	4618      	mov	r0, r3
 8001402:	b002      	add	sp, #8
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop

08001408 <MCI_GetIqd>:
  {
    tempVal = pHandle->pFOCVars->Iqd;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iqd);
 8001408:	6842      	ldr	r2, [r0, #4]
 800140a:	68d0      	ldr	r0, [r2, #12]
 800140c:	2300      	movs	r3, #0
 800140e:	b282      	uxth	r2, r0
 8001410:	f362 030f 	bfi	r3, r2, #0, #16
 8001414:	0c00      	lsrs	r0, r0, #16
 8001416:	f360 431f 	bfi	r3, r0, #16, #16
{
 800141a:	b082      	sub	sp, #8
#endif
}
 800141c:	4618      	mov	r0, r3
 800141e:	b002      	add	sp, #8
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop

08001424 <MCI_GetIqdref>:
  {
    tempVal = pHandle->pFOCVars->Iqdref;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iqdref);
 8001424:	6842      	ldr	r2, [r0, #4]
 8001426:	6910      	ldr	r0, [r2, #16]
 8001428:	2300      	movs	r3, #0
 800142a:	b282      	uxth	r2, r0
 800142c:	f362 030f 	bfi	r3, r2, #0, #16
 8001430:	0c00      	lsrs	r0, r0, #16
 8001432:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001436:	b082      	sub	sp, #8
#endif
}
 8001438:	4618      	mov	r0, r3
 800143a:	b002      	add	sp, #8
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop

08001440 <MCI_GetVqd>:
  {
    tempVal = pHandle->pFOCVars->Vqd;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Vqd);
 8001440:	6842      	ldr	r2, [r0, #4]
 8001442:	f8d2 0016 	ldr.w	r0, [r2, #22]
 8001446:	2300      	movs	r3, #0
 8001448:	b282      	uxth	r2, r0
 800144a:	f362 030f 	bfi	r3, r2, #0, #16
 800144e:	0c00      	lsrs	r0, r0, #16
 8001450:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001454:	b082      	sub	sp, #8
#endif
}
 8001456:	4618      	mov	r0, r3
 8001458:	b002      	add	sp, #8
 800145a:	4770      	bx	lr

0800145c <MCI_GetValphabeta>:
  {
    tempVal = pHandle->pFOCVars->Valphabeta;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Valphabeta);
 800145c:	6842      	ldr	r2, [r0, #4]
 800145e:	f8d2 001a 	ldr.w	r0, [r2, #26]
 8001462:	2300      	movs	r3, #0
 8001464:	b282      	uxth	r2, r0
 8001466:	f362 030f 	bfi	r3, r2, #0, #16
 800146a:	0c00      	lsrs	r0, r0, #16
 800146c:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001470:	b082      	sub	sp, #8
#endif
}
 8001472:	4618      	mov	r0, r3
 8001474:	b002      	add	sp, #8
 8001476:	4770      	bx	lr

08001478 <MCI_GetTeref>:
__weak int16_t MCI_GetTeref(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? 0 : pHandle->pFOCVars->hTeref);
#else
  return (pHandle->pFOCVars->hTeref);
 8001478:	6843      	ldr	r3, [r0, #4]
#endif
}
 800147a:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 800147e:	4770      	bx	lr

08001480 <MCI_Clear_Iqdref>:
/**
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_Clear_Iqdref(MCI_Handle_t *pHandle)
{
 8001480:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref(pHandle->pSTC);
 8001482:	e9d0 0400 	ldrd	r0, r4, [r0]
 8001486:	f007 fd0b 	bl	8008ea0 <STC_GetDefaultIqdref>
 800148a:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800148e:	8220      	strh	r0, [r4, #16]
 8001490:	8263      	strh	r3, [r4, #18]
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8001492:	bd10      	pop	{r4, pc}

08001494 <MCM_Clarke>:
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.a);

  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 8001494:	f644 11e6 	movw	r1, #18918	; 0x49e6
 8001498:	b203      	sxth	r3, r0
  a_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.a);
 800149a:	fb13 f201 	smulbb	r2, r3, r1
{
 800149e:	f3c0 400f 	ubfx	r0, r0, #16, #16
  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 80014a2:	fb10 f001 	smulbb	r0, r0, r1
#ifndef FULL_MISRA_C_COMPLIANCY_MC_MATH
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 80014a6:	4252      	negs	r2, r2
 80014a8:	eba2 0240 	sub.w	r2, r2, r0, lsl #1
#else
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) / 32768;
#endif

  /* Check saturation of Ibeta */
  if (wbeta_tmp > INT16_MAX)
 80014ac:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
{
 80014b0:	b084      	sub	sp, #16
  if (wbeta_tmp > INT16_MAX)
 80014b2:	da05      	bge.n	80014c0 <MCM_Clarke+0x2c>
 80014b4:	13d1      	asrs	r1, r2, #15
  {
    hbeta_tmp = INT16_MAX;
  }
  else if (wbeta_tmp < (-32768))
 80014b6:	f511 4f00 	cmn.w	r1, #32768	; 0x8000
 80014ba:	da0c      	bge.n	80014d6 <MCM_Clarke+0x42>
 80014bc:	4a09      	ldr	r2, [pc, #36]	; (80014e4 <MCM_Clarke+0x50>)
 80014be:	e001      	b.n	80014c4 <MCM_Clarke+0x30>
 80014c0:	f647 72ff 	movw	r2, #32767	; 0x7fff
  else
  {
    /* Nothing to do */
  }

  return (Output);
 80014c4:	b29b      	uxth	r3, r3
 80014c6:	2000      	movs	r0, #0
 80014c8:	f363 000f 	bfi	r0, r3, #0, #16
 80014cc:	b293      	uxth	r3, r2
 80014ce:	f363 401f 	bfi	r0, r3, #16, #16
}
 80014d2:	b004      	add	sp, #16
 80014d4:	4770      	bx	lr
    hbeta_tmp = ((int16_t)wbeta_tmp);
 80014d6:	4803      	ldr	r0, [pc, #12]	; (80014e4 <MCM_Clarke+0x50>)
 80014d8:	b20a      	sxth	r2, r1
 80014da:	4282      	cmp	r2, r0
 80014dc:	bfb8      	it	lt
 80014de:	4602      	movlt	r2, r0
 80014e0:	e7f0      	b.n	80014c4 <MCM_Clarke+0x30>
 80014e2:	bf00      	nop
 80014e4:	ffff8001 	.word	0xffff8001

080014e8 <MCM_Trig_Functions>:
  } CosSin;
  //cstat +MISRAC2012-Rule-19.2
  /* Configure CORDIC */
  /* Misra  violation Rule 11.4 A�Conversion�should�not�be�performed�between�a�
   * pointer�to�object and an integer type */
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 80014e8:	4b09      	ldr	r3, [pc, #36]	; (8001510 <MCM_Trig_Functions+0x28>)
  /* Misra  violation Rule�11.4 A�Conversion�should�not�be�performed�between�a
   * pointer�to�object and an integer type */
  LL_CORDIC_WriteData(CORDIC, ((uint32_t)0x7FFF0000) + ((uint32_t)hAngle));
 80014ea:	f100 40ff 	add.w	r0, r0, #2139095040	; 0x7f800000
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 80014ee:	f04f 1260 	mov.w	r2, #6291552	; 0x600060
  LL_CORDIC_WriteData(CORDIC, ((uint32_t)0x7FFF0000) + ((uint32_t)hAngle));
 80014f2:	f500 00fe 	add.w	r0, r0, #8323072	; 0x7f0000
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 80014f6:	601a      	str	r2, [r3, #0]
  * @param  InData 0 .. 0xFFFFFFFF : 32-bit value to be provided as input data for CORDIC processing.
  * @retval None
  */
__STATIC_INLINE void LL_CORDIC_WriteData(CORDIC_TypeDef *CORDICx, uint32_t InData)
{
  WRITE_REG(CORDICx->WDATA, InData);
 80014f8:	6058      	str	r0, [r3, #4]
  * @param  CORDICx CORDIC Instance
  * @retval 32-bit output data of CORDIC processing.
  */
__STATIC_INLINE uint32_t LL_CORDIC_ReadData(CORDIC_TypeDef *CORDICx)
{
  return (uint32_t)(READ_REG(CORDICx->RDATA));
 80014fa:	689b      	ldr	r3, [r3, #8]
  /* Read angle */
  /* Misra  violation Rule�11.4 A�Conversion�should�not�be�performed between�a
   * pointer�to object and an integer type */
  CosSin.CordicRdata = LL_CORDIC_ReadData(CORDIC);
  return (CosSin.Components); //cstat !UNION-type-punning
 80014fc:	2000      	movs	r0, #0
 80014fe:	b29a      	uxth	r2, r3
 8001500:	f362 000f 	bfi	r0, r2, #0, #16
 8001504:	0c1b      	lsrs	r3, r3, #16
{
 8001506:	b082      	sub	sp, #8
  return (CosSin.Components); //cstat !UNION-type-punning
 8001508:	f363 401f 	bfi	r0, r3, #16, #16
}
 800150c:	b002      	add	sp, #8
 800150e:	4770      	bx	lr
 8001510:	40020c00 	.word	0x40020c00

08001514 <MCM_Park>:
{
 8001514:	b530      	push	{r4, r5, lr}
 8001516:	b085      	sub	sp, #20
 8001518:	4604      	mov	r4, r0
 800151a:	4605      	mov	r5, r0
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 800151c:	4608      	mov	r0, r1
{
 800151e:	9401      	str	r4, [sp, #4]
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 8001520:	f7ff ffe2 	bl	80014e8 <MCM_Trig_Functions>
 8001524:	b22d      	sxth	r5, r5
 8001526:	b201      	sxth	r1, r0
 8001528:	1424      	asrs	r4, r4, #16
 800152a:	1400      	asrs	r0, r0, #16
  q_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hCos);
 800152c:	fb05 f301 	mul.w	r3, r5, r1
  wqd_tmp = (q_tmp_1 - q_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8001530:	fb04 3310 	mls	r3, r4, r0, r3
  if (wqd_tmp > INT16_MAX)
 8001534:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001538:	da05      	bge.n	8001546 <MCM_Park+0x32>
 800153a:	13da      	asrs	r2, r3, #15
  else if (wqd_tmp < (-32768))
 800153c:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
 8001540:	da22      	bge.n	8001588 <MCM_Park+0x74>
 8001542:	4a14      	ldr	r2, [pc, #80]	; (8001594 <MCM_Park+0x80>)
 8001544:	e001      	b.n	800154a <MCM_Park+0x36>
 8001546:	f647 72ff 	movw	r2, #32767	; 0x7fff
  d_tmp_2 = Input.beta * ((int32_t )Local_Vector_Components.hCos);
 800154a:	fb01 f404 	mul.w	r4, r1, r4
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800154e:	fb05 4400 	mla	r4, r5, r0, r4
  if (wqd_tmp > INT16_MAX)
 8001552:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8001556:	ea4f 33e4 	mov.w	r3, r4, asr #15
  if (wqd_tmp > INT16_MAX)
 800155a:	da04      	bge.n	8001566 <MCM_Park+0x52>
  else if (wqd_tmp < (-32768))
 800155c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8001560:	da0c      	bge.n	800157c <MCM_Park+0x68>
 8001562:	4b0c      	ldr	r3, [pc, #48]	; (8001594 <MCM_Park+0x80>)
 8001564:	e001      	b.n	800156a <MCM_Park+0x56>
 8001566:	f647 73ff 	movw	r3, #32767	; 0x7fff
  return (Output);
 800156a:	b292      	uxth	r2, r2
 800156c:	2000      	movs	r0, #0
 800156e:	f362 000f 	bfi	r0, r2, #0, #16
 8001572:	b29b      	uxth	r3, r3
 8001574:	f363 401f 	bfi	r0, r3, #16, #16
}
 8001578:	b005      	add	sp, #20
 800157a:	bd30      	pop	{r4, r5, pc}
    hqd_tmp = ((int16_t)wqd_tmp);
 800157c:	4905      	ldr	r1, [pc, #20]	; (8001594 <MCM_Park+0x80>)
 800157e:	b21b      	sxth	r3, r3
 8001580:	428b      	cmp	r3, r1
 8001582:	bfb8      	it	lt
 8001584:	460b      	movlt	r3, r1
 8001586:	e7f0      	b.n	800156a <MCM_Park+0x56>
    hqd_tmp = ((int16_t)wqd_tmp);
 8001588:	4b02      	ldr	r3, [pc, #8]	; (8001594 <MCM_Park+0x80>)
 800158a:	b212      	sxth	r2, r2
 800158c:	429a      	cmp	r2, r3
 800158e:	bfb8      	it	lt
 8001590:	461a      	movlt	r2, r3
 8001592:	e7da      	b.n	800154a <MCM_Park+0x36>
 8001594:	ffff8001 	.word	0xffff8001

08001598 <MCM_Rev_Park>:
{
 8001598:	b530      	push	{r4, r5, lr}
 800159a:	b085      	sub	sp, #20
 800159c:	4604      	mov	r4, r0
 800159e:	4605      	mov	r5, r0
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 80015a0:	4608      	mov	r0, r1
{
 80015a2:	9401      	str	r4, [sp, #4]
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 80015a4:	f7ff ffa0 	bl	80014e8 <MCM_Trig_Functions>
 80015a8:	1424      	asrs	r4, r4, #16
 80015aa:	1402      	asrs	r2, r0, #16
 80015ac:	b22d      	sxth	r5, r5
 80015ae:	b200      	sxth	r0, r0
  alpha_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hSin);
 80015b0:	fb04 f302 	mul.w	r3, r4, r2
  Output.alpha = (int16_t)(((alpha_tmp1) + (alpha_tmp2)) >> 15);
 80015b4:	fb05 3300 	mla	r3, r5, r0, r3
  beta_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hCos);
 80015b8:	fb00 f404 	mul.w	r4, r0, r4
  Output.beta = (int16_t)((beta_tmp2 - beta_tmp1) >> 15);
 80015bc:	fb05 4412 	mls	r4, r5, r2, r4
  return (Output);
 80015c0:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 80015c4:	2000      	movs	r0, #0
 80015c6:	f363 000f 	bfi	r0, r3, #0, #16
 80015ca:	f3c4 34cf 	ubfx	r4, r4, #15, #16
 80015ce:	f364 401f 	bfi	r0, r4, #16, #16
}
 80015d2:	b005      	add	sp, #20
 80015d4:	bd30      	pop	{r4, r5, pc}
 80015d6:	bf00      	nop

080015d8 <MCM_Sqrt>:
  */
__weak int32_t MCM_Sqrt(int32_t wInput)
{
  int32_t wtemprootnew;

  if (wInput > 0)
 80015d8:	2800      	cmp	r0, #0
 80015da:	dd09      	ble.n	80015f0 <MCM_Sqrt+0x18>
 80015dc:	b672      	cpsid	i
  {
    uint32_t retVal;
    /* Disable Irq as sqrt is used in MF and HF task */
    __disable_irq();
    /* Configure CORDIC */
    WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_SQRT);
 80015de:	4b05      	ldr	r3, [pc, #20]	; (80015f4 <MCM_Sqrt+0x1c>)
 80015e0:	f240 1269 	movw	r2, #361	; 0x169
 80015e4:	601a      	str	r2, [r3, #0]
  WRITE_REG(CORDICx->WDATA, InData);
 80015e6:	6058      	str	r0, [r3, #4]
  return (uint32_t)(READ_REG(CORDICx->RDATA));
 80015e8:	6898      	ldr	r0, [r3, #8]
    LL_CORDIC_WriteData(CORDIC, ((uint32_t)wInput));
    /* Read sqrt and return */
#ifndef FULL_MISRA_C_COMPLIANCY_MC_MATH
    retVal = (LL_CORDIC_ReadData(CORDIC)) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 80015ea:	0bc0      	lsrs	r0, r0, #15
  __ASM volatile ("cpsie i" : : : "memory");
 80015ec:	b662      	cpsie	i
}
 80015ee:	4770      	bx	lr
    __enable_irq();

  }
  else
  {
    wtemprootnew = (int32_t)0;
 80015f0:	2000      	movs	r0, #0
  }

  return (wtemprootnew);
}
 80015f2:	4770      	bx	lr
 80015f4:	40020c00 	.word	0x40020c00

080015f8 <FOC_Clear>:
  ab_t NULL_ab = {((int16_t)0), ((int16_t)0)};
  qd_t NULL_qd = {((int16_t)0), ((int16_t)0)};
  alphabeta_t NULL_alphabeta = {((int16_t)0), ((int16_t)0)};

  FOCVars[bMotor].Iab = NULL_ab;
  FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
 80015f8:	2226      	movs	r2, #38	; 0x26
{
 80015fa:	b538      	push	{r3, r4, r5, lr}
 80015fc:	fb00 f202 	mul.w	r2, r0, r2
 8001600:	4b15      	ldr	r3, [pc, #84]	; (8001658 <FOC_Clear+0x60>)
  FOCVars[bMotor].Iab = NULL_ab;
 8001602:	2400      	movs	r4, #0
 8001604:	509c      	str	r4, [r3, r2]
{
 8001606:	4605      	mov	r5, r0
 8001608:	f102 0108 	add.w	r1, r2, #8
 800160c:	1898      	adds	r0, r3, r2
 800160e:	3210      	adds	r2, #16
 8001610:	4419      	add	r1, r3
 8001612:	4413      	add	r3, r2
  FOCVars[bMotor].hTeref = (int16_t)0;
  FOCVars[bMotor].Vqd = NULL_qd;
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8001614:	4a11      	ldr	r2, [pc, #68]	; (800165c <FOC_Clear+0x64>)
  FOCVars[bMotor].Iab = NULL_ab;
 8001616:	6044      	str	r4, [r0, #4]
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8001618:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
  FOCVars[bMotor].Iqd = NULL_qd;
 800161c:	604c      	str	r4, [r1, #4]
 800161e:	608c      	str	r4, [r1, #8]
  FOCVars[bMotor].Vqd = NULL_qd;
 8001620:	f8c3 4006 	str.w	r4, [r3, #6]
 8001624:	f8c3 400a 	str.w	r4, [r3, #10]
 8001628:	f8c3 400e 	str.w	r4, [r3, #14]
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 800162c:	4621      	mov	r1, r4
 800162e:	f006 fa7b 	bl	8007b28 <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], ((int32_t)0));
 8001632:	4b0b      	ldr	r3, [pc, #44]	; (8001660 <FOC_Clear+0x68>)
 8001634:	4621      	mov	r1, r4
 8001636:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800163a:	f006 fa75 	bl	8007b28 <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 800163e:	4b09      	ldr	r3, [pc, #36]	; (8001664 <FOC_Clear+0x6c>)
 8001640:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8001644:	f007 fba2 	bl	8008d8c <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001648:	4b07      	ldr	r3, [pc, #28]	; (8001668 <FOC_Clear+0x70>)
 800164a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 800164e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001652:	f000 bf65 	b.w	8002520 <PWMC_SwitchOffPWM>
 8001656:	bf00      	nop
 8001658:	20000718 	.word	0x20000718
 800165c:	20000348 	.word	0x20000348
 8001660:	20000344 	.word	0x20000344
 8001664:	20000350 	.word	0x20000350
 8001668:	2000074c 	.word	0x2000074c

0800166c <MCboot>:
  if (MC_NULL == pMCIList)
 800166c:	2800      	cmp	r0, #0
 800166e:	d07b      	beq.n	8001768 <MCboot+0xfc>
{
 8001670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bMCBootCompleted = (uint8_t )0;
 8001674:	f8df 814c 	ldr.w	r8, [pc, #332]	; 80017c4 <MCboot+0x158>
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8001678:	f8df a14c 	ldr.w	sl, [pc, #332]	; 80017c8 <MCboot+0x15c>
    EAC_Init(&EncAlignCtrlM1,pSTC[M1],&VirtualSpeedSensorM1,&ENCODER_M1);
 800167c:	4d3b      	ldr	r5, [pc, #236]	; (800176c <MCboot+0x100>)
 800167e:	4e3c      	ldr	r6, [pc, #240]	; (8001770 <MCboot+0x104>)
{
 8001680:	b084      	sub	sp, #16
    bMCBootCompleted = (uint8_t )0;
 8001682:	2700      	movs	r7, #0
 8001684:	4604      	mov	r4, r0
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8001686:	483b      	ldr	r0, [pc, #236]	; (8001774 <MCboot+0x108>)
 8001688:	f8ca 0000 	str.w	r0, [sl]
    bMCBootCompleted = (uint8_t )0;
 800168c:	f888 7000 	strb.w	r7, [r8]
    R3_1_Init(&PWM_Handle_M1);
 8001690:	f006 fe40 	bl	8008314 <R3_1_Init>
    ASPEP_start(&aspepOverUartA);
 8001694:	4838      	ldr	r0, [pc, #224]	; (8001778 <MCboot+0x10c>)
 8001696:	f7fe ff67 	bl	8000568 <ASPEP_start>
    startTimers();
 800169a:	f006 fb15 	bl	8007cc8 <startTimers>
    PID_HandleInit(&PIDSpeedHandle_M1);
 800169e:	4837      	ldr	r0, [pc, #220]	; (800177c <MCboot+0x110>)
 80016a0:	f006 fa2e 	bl	8007b00 <PID_HandleInit>
    ENC_Init (&ENCODER_M1);
 80016a4:	4836      	ldr	r0, [pc, #216]	; (8001780 <MCboot+0x114>)
 80016a6:	f005 ff41 	bl	800752c <ENC_Init>
    EAC_Init(&EncAlignCtrlM1,pSTC[M1],&VirtualSpeedSensorM1,&ENCODER_M1);
 80016aa:	6829      	ldr	r1, [r5, #0]
 80016ac:	4a35      	ldr	r2, [pc, #212]	; (8001784 <MCboot+0x118>)
 80016ae:	4b34      	ldr	r3, [pc, #208]	; (8001780 <MCboot+0x114>)
 80016b0:	4630      	mov	r0, r6
 80016b2:	f005 feef 	bl	8007494 <EAC_Init>
    pEAC[M1] = &EncAlignCtrlM1;
 80016b6:	4b34      	ldr	r3, [pc, #208]	; (8001788 <MCboot+0x11c>)
    PID_HandleInit(&PID_PosParamsM1);
 80016b8:	4834      	ldr	r0, [pc, #208]	; (800178c <MCboot+0x120>)
    pEAC[M1] = &EncAlignCtrlM1;
 80016ba:	601e      	str	r6, [r3, #0]
    PID_HandleInit(&PID_PosParamsM1);
 80016bc:	f006 fa20 	bl	8007b00 <PID_HandleInit>
    TC_Init(&PosCtrlM1, &PID_PosParamsM1, &SpeednTorqCtrlM1, &ENCODER_M1);
 80016c0:	4b2f      	ldr	r3, [pc, #188]	; (8001780 <MCboot+0x114>)
 80016c2:	4a33      	ldr	r2, [pc, #204]	; (8001790 <MCboot+0x124>)
 80016c4:	4931      	ldr	r1, [pc, #196]	; (800178c <MCboot+0x120>)
 80016c6:	4833      	ldr	r0, [pc, #204]	; (8001794 <MCboot+0x128>)
    RVBS_Init(&BusVoltageSensor_M1);
 80016c8:	4e33      	ldr	r6, [pc, #204]	; (8001798 <MCboot+0x12c>)
    TC_Init(&PosCtrlM1, &PID_PosParamsM1, &SpeednTorqCtrlM1, &ENCODER_M1);
 80016ca:	f007 fbff 	bl	8008ecc <TC_Init>
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &ENCODER_M1._Super);
 80016ce:	4a2c      	ldr	r2, [pc, #176]	; (8001780 <MCboot+0x114>)
 80016d0:	492a      	ldr	r1, [pc, #168]	; (800177c <MCboot+0x110>)
 80016d2:	6828      	ldr	r0, [r5, #0]
 80016d4:	f007 fb40 	bl	8008d58 <STC_Init>
    VSS_Init(&VirtualSpeedSensorM1);
 80016d8:	482a      	ldr	r0, [pc, #168]	; (8001784 <MCboot+0x118>)
 80016da:	f007 fe9f 	bl	800941c <VSS_Init>
    PID_HandleInit(&PIDIqHandle_M1);
 80016de:	482f      	ldr	r0, [pc, #188]	; (800179c <MCboot+0x130>)
 80016e0:	f006 fa0e 	bl	8007b00 <PID_HandleInit>
    PID_HandleInit(&PIDIdHandle_M1);
 80016e4:	482e      	ldr	r0, [pc, #184]	; (80017a0 <MCboot+0x134>)
 80016e6:	f006 fa0b 	bl	8007b00 <PID_HandleInit>
    (void)RCM_RegisterRegConv(&VbusRegConv_M1);
 80016ea:	482e      	ldr	r0, [pc, #184]	; (80017a4 <MCboot+0x138>)
 80016ec:	f001 ff4c 	bl	8003588 <RCM_RegisterRegConv>
    RVBS_Init(&BusVoltageSensor_M1);
 80016f0:	4630      	mov	r0, r6
 80016f2:	f007 fa89 	bl	8008c08 <RVBS_Init>
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 80016f6:	4b2c      	ldr	r3, [pc, #176]	; (80017a8 <MCboot+0x13c>)
    NTC_Init(&TempSensor_M1);
 80016f8:	482c      	ldr	r0, [pc, #176]	; (80017ac <MCboot+0x140>)
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	60de      	str	r6, [r3, #12]
    pMPM[M1]->pFOCVars = &FOCVars[M1];
 80016fe:	4e2c      	ldr	r6, [pc, #176]	; (80017b0 <MCboot+0x144>)
 8001700:	609e      	str	r6, [r3, #8]
    NTC_Init(&TempSensor_M1);
 8001702:	f006 f9df 	bl	8007ac4 <NTC_Init>
    REMNG_Init(pREMNG[M1]);
 8001706:	482b      	ldr	r0, [pc, #172]	; (80017b4 <MCboot+0x148>)
 8001708:	f007 fad8 	bl	8008cbc <REMNG_Init>
    FOCVars[M1].bDriveInput = EXTERNAL;
 800170c:	f04f 0901 	mov.w	r9, #1
    FOC_Clear(M1);
 8001710:	4638      	mov	r0, r7
 8001712:	f7ff ff71 	bl	80015f8 <FOC_Clear>
    FOCVars[M1].bDriveInput = EXTERNAL;
 8001716:	f886 9024 	strb.w	r9, [r6, #36]	; 0x24
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 800171a:	6828      	ldr	r0, [r5, #0]
 800171c:	f007 fbc0 	bl	8008ea0 <STC_GetDefaultIqdref>
 8001720:	6130      	str	r0, [r6, #16]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8001722:	6828      	ldr	r0, [r5, #0]
 8001724:	f007 fbbc 	bl	8008ea0 <STC_GetDefaultIqdref>
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1], pPosCtrl[M1], pwmcHandle[M1]);
 8001728:	f8da 3000 	ldr.w	r3, [sl]
 800172c:	9300      	str	r3, [sp, #0]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 800172e:	f3c0 400f 	ubfx	r0, r0, #16, #16
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1], pPosCtrl[M1], pwmcHandle[M1]);
 8001732:	4632      	mov	r2, r6
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8001734:	82b0      	strh	r0, [r6, #20]
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1], pPosCtrl[M1], pwmcHandle[M1]);
 8001736:	4b20      	ldr	r3, [pc, #128]	; (80017b8 <MCboot+0x14c>)
 8001738:	4e20      	ldr	r6, [pc, #128]	; (80017bc <MCboot+0x150>)
 800173a:	6829      	ldr	r1, [r5, #0]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4630      	mov	r0, r6
 8001740:	f7ff fd04 	bl	800114c <MCI_Init>
   Mci[M1].pScale = &scaleParams_M1;
 8001744:	4b1e      	ldr	r3, [pc, #120]	; (80017c0 <MCboot+0x154>)
 8001746:	61f3      	str	r3, [r6, #28]
    MCI_ExecSpeedRamp(&Mci[M1],
 8001748:	6828      	ldr	r0, [r5, #0]
 800174a:	f007 fba5 	bl	8008e98 <STC_GetMecSpeedRefUnitDefault>
 800174e:	463a      	mov	r2, r7
 8001750:	4601      	mov	r1, r0
 8001752:	4630      	mov	r0, r6
 8001754:	f7ff fd08 	bl	8001168 <MCI_ExecSpeedRamp>
    pMCIList[M1] = &Mci[M1];
 8001758:	6026      	str	r6, [r4, #0]
    MC_APP_BootHook();
 800175a:	f7ff fcf3 	bl	8001144 <MC_APP_BootHook>
    bMCBootCompleted = 1U;
 800175e:	f888 9000 	strb.w	r9, [r8]
}
 8001762:	b004      	add	sp, #16
 8001764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	20000350 	.word	0x20000350
 8001770:	200000a0 	.word	0x200000a0
 8001774:	2000017c 	.word	0x2000017c
 8001778:	200003c4 	.word	0x200003c4
 800177c:	20000114 	.word	0x20000114
 8001780:	20000020 	.word	0x20000020
 8001784:	20000308 	.word	0x20000308
 8001788:	20000748 	.word	0x20000748
 800178c:	20000140 	.word	0x20000140
 8001790:	200002a8 	.word	0x200002a8
 8001794:	20000220 	.word	0x20000220
 8001798:	20000000 	.word	0x20000000
 800179c:	200000e8 	.word	0x200000e8
 80017a0:	200000bc 	.word	0x200000bc
 80017a4:	200002f8 	.word	0x200002f8
 80017a8:	20000340 	.word	0x20000340
 80017ac:	200002dc 	.word	0x200002dc
 80017b0:	20000718 	.word	0x20000718
 80017b4:	20000290 	.word	0x20000290
 80017b8:	2000034c 	.word	0x2000034c
 80017bc:	200006e0 	.word	0x200006e0
 80017c0:	20000364 	.word	0x20000364
 80017c4:	2000073e 	.word	0x2000073e
 80017c8:	2000074c 	.word	0x2000074c

080017cc <FOC_InitAdditionalMethods>:
    {
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
    }
}
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop

080017d0 <FOC_CalcCurrRef>:
  *         MTPA algorithm(s). It must be called with the periodicity specified
  *         in oTSC parameters.
  * @param  bMotor related motor it can be M1 or M2.
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 80017d0:	b510      	push	{r4, lr}

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if (INTERNAL == FOCVars[bMotor].bDriveInput)
 80017d2:	4c08      	ldr	r4, [pc, #32]	; (80017f4 <FOC_CalcCurrRef+0x24>)
 80017d4:	2326      	movs	r3, #38	; 0x26
 80017d6:	fb03 4400 	mla	r4, r3, r0, r4
 80017da:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80017de:	b103      	cbz	r3, 80017e2 <FOC_CalcCurrRef+0x12>
    /* Nothing to do */
  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 80017e0:	bd10      	pop	{r4, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 80017e2:	4b05      	ldr	r3, [pc, #20]	; (80017f8 <FOC_CalcCurrRef+0x28>)
 80017e4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80017e8:	f007 fb2c 	bl	8008e44 <STC_CalcTorqueReference>
 80017ec:	83e0      	strh	r0, [r4, #30]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 80017ee:	8220      	strh	r0, [r4, #16]
}
 80017f0:	bd10      	pop	{r4, pc}
 80017f2:	bf00      	nop
 80017f4:	20000718 	.word	0x20000718
 80017f8:	20000350 	.word	0x20000350

080017fc <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted.
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 80017fc:	4b01      	ldr	r3, [pc, #4]	; (8001804 <TSK_SetChargeBootCapDelayM1+0x8>)
 80017fe:	8018      	strh	r0, [r3, #0]
}
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	20000740 	.word	0x20000740

08001808 <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise.
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hBootCapDelayCounterM1)
 8001808:	4b03      	ldr	r3, [pc, #12]	; (8001818 <TSK_ChargeBootCapDelayHasElapsedM1+0x10>)
 800180a:	8818      	ldrh	r0, [r3, #0]
 800180c:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 800180e:	fab0 f080 	clz	r0, r0
 8001812:	0940      	lsrs	r0, r0, #5
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	20000740 	.word	0x20000740

0800181c <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted.
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 800181c:	4b01      	ldr	r3, [pc, #4]	; (8001824 <TSK_SetStopPermanencyTimeM1+0x8>)
 800181e:	8018      	strh	r0, [r3, #0]
}
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	20000744 	.word	0x20000744

08001828 <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise.
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hStopPermanencyCounterM1)
 8001828:	4b03      	ldr	r3, [pc, #12]	; (8001838 <TSK_StopPermanencyTimeHasElapsedM1+0x10>)
 800182a:	8818      	ldrh	r0, [r3, #0]
 800182c:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 800182e:	fab0 f080 	clz	r0, r0
 8001832:	0940      	lsrs	r0, r0, #5
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	20000744 	.word	0x20000744

0800183c <TSK_MediumFrequencyTaskM1>:
{
 800183c:	b570      	push	{r4, r5, r6, lr}
  PQD_CalcElMotorPower(pMPM[M1]);
 800183e:	4dad      	ldr	r5, [pc, #692]	; (8001af4 <TSK_MediumFrequencyTaskM1+0x2b8>)
  (void)ENC_CalcAvrgMecSpeedUnit(&ENCODER_M1, &wAux);
 8001840:	48ad      	ldr	r0, [pc, #692]	; (8001af8 <TSK_MediumFrequencyTaskM1+0x2bc>)
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 8001842:	4cae      	ldr	r4, [pc, #696]	; (8001afc <TSK_MediumFrequencyTaskM1+0x2c0>)
{
 8001844:	b082      	sub	sp, #8
  int16_t wAux = 0;
 8001846:	2300      	movs	r3, #0
  (void)ENC_CalcAvrgMecSpeedUnit(&ENCODER_M1, &wAux);
 8001848:	f10d 0106 	add.w	r1, sp, #6
  int16_t wAux = 0;
 800184c:	f8ad 3006 	strh.w	r3, [sp, #6]
  (void)ENC_CalcAvrgMecSpeedUnit(&ENCODER_M1, &wAux);
 8001850:	f005 fed0 	bl	80075f4 <ENC_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower(pMPM[M1]);
 8001854:	6828      	ldr	r0, [r5, #0]
 8001856:	f006 f9fd 	bl	8007c54 <PQD_CalcElMotorPower>
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 800185a:	4620      	mov	r0, r4
 800185c:	f7ff fd2a 	bl	80012b4 <MCI_GetCurrentFaults>
 8001860:	b120      	cbz	r0, 800186c <TSK_MediumFrequencyTaskM1+0x30>
    Mci[M1].State = FAULT_NOW;
 8001862:	230a      	movs	r3, #10
 8001864:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
}
 8001868:	b002      	add	sp, #8
 800186a:	bd70      	pop	{r4, r5, r6, pc}
    if (MCI_GetOccurredFaults(&Mci[M1]) == MC_NO_FAULTS)
 800186c:	4620      	mov	r0, r4
 800186e:	f7ff fd1f 	bl	80012b0 <MCI_GetOccurredFaults>
 8001872:	bb88      	cbnz	r0, 80018d8 <TSK_MediumFrequencyTaskM1+0x9c>
      switch (Mci[M1].State)
 8001874:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8001878:	2b14      	cmp	r3, #20
 800187a:	d8f5      	bhi.n	8001868 <TSK_MediumFrequencyTaskM1+0x2c>
 800187c:	a201      	add	r2, pc, #4	; (adr r2, 8001884 <TSK_MediumFrequencyTaskM1+0x48>)
 800187e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001882:	bf00      	nop
 8001884:	08001a4f 	.word	0x08001a4f
 8001888:	08001869 	.word	0x08001869
 800188c:	080019f9 	.word	0x080019f9
 8001890:	08001869 	.word	0x08001869
 8001894:	08001869 	.word	0x08001869
 8001898:	08001869 	.word	0x08001869
 800189c:	080019db 	.word	0x080019db
 80018a0:	08001869 	.word	0x08001869
 80018a4:	080019cf 	.word	0x080019cf
 80018a8:	08001869 	.word	0x08001869
 80018ac:	080018d9 	.word	0x080018d9
 80018b0:	080019bf 	.word	0x080019bf
 80018b4:	08001869 	.word	0x08001869
 80018b8:	08001869 	.word	0x08001869
 80018bc:	08001869 	.word	0x08001869
 80018c0:	08001869 	.word	0x08001869
 80018c4:	08001965 	.word	0x08001965
 80018c8:	0800192d 	.word	0x0800192d
 80018cc:	08001869 	.word	0x08001869
 80018d0:	08001869 	.word	0x08001869
 80018d4:	080018e3 	.word	0x080018e3
      Mci[M1].State = FAULT_OVER;
 80018d8:	230b      	movs	r3, #11
 80018da:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
}
 80018de:	b002      	add	sp, #8
 80018e0:	bd70      	pop	{r4, r5, r6, pc}
          if (MCI_STOP == Mci[M1].DirectCommand)
 80018e2:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80018e6:	2b05      	cmp	r3, #5
 80018e8:	f000 80c3 	beq.w	8001a72 <TSK_MediumFrequencyTaskM1+0x236>
            if (TSK_StopPermanencyTimeHasElapsedM1())
 80018ec:	f7ff ff9c 	bl	8001828 <TSK_StopPermanencyTimeHasElapsedM1>
 80018f0:	2800      	cmp	r0, #0
 80018f2:	d0b9      	beq.n	8001868 <TSK_MediumFrequencyTaskM1+0x2c>
              ENC_Clear(&ENCODER_M1);
 80018f4:	4880      	ldr	r0, [pc, #512]	; (8001af8 <TSK_MediumFrequencyTaskM1+0x2bc>)
 80018f6:	f005 fe55 	bl	80075a4 <ENC_Clear>
              R3_1_SwitchOnPWM(pwmcHandle[M1]);
 80018fa:	4b81      	ldr	r3, [pc, #516]	; (8001b00 <TSK_MediumFrequencyTaskM1+0x2c4>)
 80018fc:	6818      	ldr	r0, [r3, #0]
 80018fe:	f006 fb63 	bl	8007fc8 <R3_1_SwitchOnPWM>
              TC_EncAlignmentCommand(pPosCtrl[M1]);
 8001902:	4b80      	ldr	r3, [pc, #512]	; (8001b04 <TSK_MediumFrequencyTaskM1+0x2c8>)
 8001904:	6818      	ldr	r0, [r3, #0]
 8001906:	f007 fc99 	bl	800923c <TC_EncAlignmentCommand>
              FOC_InitAdditionalMethods(M1);
 800190a:	2000      	movs	r0, #0
 800190c:	f7ff ff5e 	bl	80017cc <FOC_InitAdditionalMethods>
              STC_ForceSpeedReferenceToCurrentSpeed(pSTC[M1]); /* Init the reference speed to current speed */
 8001910:	4b7d      	ldr	r3, [pc, #500]	; (8001b08 <TSK_MediumFrequencyTaskM1+0x2cc>)
 8001912:	6818      	ldr	r0, [r3, #0]
 8001914:	f007 fad2 	bl	8008ebc <STC_ForceSpeedReferenceToCurrentSpeed>
              MCI_ExecBufferedCommands(&Mci[M1]); /* Exec the speed ramp after changing of the speed sensor */
 8001918:	4878      	ldr	r0, [pc, #480]	; (8001afc <TSK_MediumFrequencyTaskM1+0x2c0>)
 800191a:	f7ff fc85 	bl	8001228 <MCI_ExecBufferedCommands>
              FOC_CalcCurrRef(M1);
 800191e:	2000      	movs	r0, #0
 8001920:	f7ff ff56 	bl	80017d0 <FOC_CalcCurrRef>
              Mci[M1].State = RUN;
 8001924:	2306      	movs	r3, #6
 8001926:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
 800192a:	e79d      	b.n	8001868 <TSK_MediumFrequencyTaskM1+0x2c>
          if (MCI_STOP == Mci[M1].DirectCommand)
 800192c:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8001930:	2b05      	cmp	r3, #5
 8001932:	f000 809e 	beq.w	8001a72 <TSK_MediumFrequencyTaskM1+0x236>
            if (PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC))
 8001936:	4e72      	ldr	r6, [pc, #456]	; (8001b00 <TSK_MediumFrequencyTaskM1+0x2c4>)
 8001938:	2101      	movs	r1, #1
 800193a:	6830      	ldr	r0, [r6, #0]
 800193c:	f000 fdf4 	bl	8002528 <PWMC_CurrentReadingCalibr>
 8001940:	2800      	cmp	r0, #0
 8001942:	d091      	beq.n	8001868 <TSK_MediumFrequencyTaskM1+0x2c>
              if (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand)
 8001944:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8001948:	2b03      	cmp	r3, #3
 800194a:	f000 80b3 	beq.w	8001ab4 <TSK_MediumFrequencyTaskM1+0x278>
                R3_1_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 800194e:	6830      	ldr	r0, [r6, #0]
 8001950:	2100      	movs	r1, #0
 8001952:	f006 fc41 	bl	80081d8 <R3_1_TurnOnLowSides>
                TSK_SetChargeBootCapDelayM1(M1_CHARGE_BOOT_CAP_TICKS);
 8001956:	2014      	movs	r0, #20
 8001958:	f7ff ff50 	bl	80017fc <TSK_SetChargeBootCapDelayM1>
                Mci[M1].State = CHARGE_BOOT_CAP;
 800195c:	2310      	movs	r3, #16
 800195e:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
 8001962:	e781      	b.n	8001868 <TSK_MediumFrequencyTaskM1+0x2c>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001964:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8001968:	2b05      	cmp	r3, #5
 800196a:	f000 8082 	beq.w	8001a72 <TSK_MediumFrequencyTaskM1+0x236>
            if (TSK_ChargeBootCapDelayHasElapsedM1())
 800196e:	f7ff ff4b 	bl	8001808 <TSK_ChargeBootCapDelayHasElapsedM1>
 8001972:	2800      	cmp	r0, #0
 8001974:	f43f af78 	beq.w	8001868 <TSK_MediumFrequencyTaskM1+0x2c>
              R3_1_SwitchOffPWM(pwmcHandle[M1]);
 8001978:	4d61      	ldr	r5, [pc, #388]	; (8001b00 <TSK_MediumFrequencyTaskM1+0x2c4>)
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 800197a:	4e63      	ldr	r6, [pc, #396]	; (8001b08 <TSK_MediumFrequencyTaskM1+0x2cc>)
              R3_1_SwitchOffPWM(pwmcHandle[M1]);
 800197c:	6828      	ldr	r0, [r5, #0]
 800197e:	f006 fb6f 	bl	8008060 <R3_1_SwitchOffPWM>
              FOCVars[M1].bDriveInput = EXTERNAL;
 8001982:	4b62      	ldr	r3, [pc, #392]	; (8001b0c <TSK_MediumFrequencyTaskM1+0x2d0>)
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8001984:	4962      	ldr	r1, [pc, #392]	; (8001b10 <TSK_MediumFrequencyTaskM1+0x2d4>)
 8001986:	6830      	ldr	r0, [r6, #0]
              FOCVars[M1].bDriveInput = EXTERNAL;
 8001988:	2201      	movs	r2, #1
 800198a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 800198e:	f007 f9f9 	bl	8008d84 <STC_SetSpeedSensor>
              ENC_Clear(&ENCODER_M1);
 8001992:	4859      	ldr	r0, [pc, #356]	; (8001af8 <TSK_MediumFrequencyTaskM1+0x2bc>)
 8001994:	f005 fe06 	bl	80075a4 <ENC_Clear>
              FOC_Clear( M1 );
 8001998:	2000      	movs	r0, #0
 800199a:	f7ff fe2d 	bl	80015f8 <FOC_Clear>
              if (EAC_IsAligned(&EncAlignCtrlM1) == false)
 800199e:	485d      	ldr	r0, [pc, #372]	; (8001b14 <TSK_MediumFrequencyTaskM1+0x2d8>)
 80019a0:	f005 fdc0 	bl	8007524 <EAC_IsAligned>
 80019a4:	2800      	cmp	r0, #0
 80019a6:	f040 808e 	bne.w	8001ac6 <TSK_MediumFrequencyTaskM1+0x28a>
                EAC_StartAlignment(&EncAlignCtrlM1);
 80019aa:	485a      	ldr	r0, [pc, #360]	; (8001b14 <TSK_MediumFrequencyTaskM1+0x2d8>)
 80019ac:	f005 fd7a 	bl	80074a4 <EAC_StartAlignment>
                Mci[M1].State = ALIGNMENT;
 80019b0:	2302      	movs	r3, #2
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 80019b2:	6828      	ldr	r0, [r5, #0]
                Mci[M1].State = ALIGNMENT;
 80019b4:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 80019b8:	f000 fdb4 	bl	8002524 <PWMC_SwitchOnPWM>
 80019bc:	e754      	b.n	8001868 <TSK_MediumFrequencyTaskM1+0x2c>
          if (MCI_ACK_FAULTS == Mci[M1].DirectCommand)
 80019be:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	f47f af50 	bne.w	8001868 <TSK_MediumFrequencyTaskM1+0x2c>
            Mci[M1].DirectCommand = MCI_NO_COMMAND;
 80019c8:	2300      	movs	r3, #0
 80019ca:	8463      	strh	r3, [r4, #34]	; 0x22
 80019cc:	e74c      	b.n	8001868 <TSK_MediumFrequencyTaskM1+0x2c>
          if (TSK_StopPermanencyTimeHasElapsedM1())
 80019ce:	f7ff ff2b 	bl	8001828 <TSK_StopPermanencyTimeHasElapsedM1>
 80019d2:	2800      	cmp	r0, #0
 80019d4:	f43f af48 	beq.w	8001868 <TSK_MediumFrequencyTaskM1+0x2c>
 80019d8:	e7f6      	b.n	80019c8 <TSK_MediumFrequencyTaskM1+0x18c>
          if (MCI_STOP == Mci[M1].DirectCommand)
 80019da:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80019de:	2b05      	cmp	r3, #5
 80019e0:	d047      	beq.n	8001a72 <TSK_MediumFrequencyTaskM1+0x236>
            TC_PositionRegulation(pPosCtrl[M1]);
 80019e2:	4b48      	ldr	r3, [pc, #288]	; (8001b04 <TSK_MediumFrequencyTaskM1+0x2c8>)
 80019e4:	6818      	ldr	r0, [r3, #0]
 80019e6:	f007 fbe7 	bl	80091b8 <TC_PositionRegulation>
            MCI_ExecBufferedCommands(&Mci[M1]);
 80019ea:	4844      	ldr	r0, [pc, #272]	; (8001afc <TSK_MediumFrequencyTaskM1+0x2c0>)
 80019ec:	f7ff fc1c 	bl	8001228 <MCI_ExecBufferedCommands>
              FOC_CalcCurrRef(M1);
 80019f0:	2000      	movs	r0, #0
 80019f2:	f7ff feed 	bl	80017d0 <FOC_CalcCurrRef>
 80019f6:	e737      	b.n	8001868 <TSK_MediumFrequencyTaskM1+0x2c>
          if (MCI_STOP == Mci[M1].DirectCommand)
 80019f8:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80019fc:	2b05      	cmp	r3, #5
 80019fe:	d038      	beq.n	8001a72 <TSK_MediumFrequencyTaskM1+0x236>
            bool isAligned = EAC_IsAligned(&EncAlignCtrlM1);
 8001a00:	4844      	ldr	r0, [pc, #272]	; (8001b14 <TSK_MediumFrequencyTaskM1+0x2d8>)
 8001a02:	f005 fd8f 	bl	8007524 <EAC_IsAligned>
 8001a06:	4605      	mov	r5, r0
            bool EACDone = EAC_Exec(&EncAlignCtrlM1);
 8001a08:	4842      	ldr	r0, [pc, #264]	; (8001b14 <TSK_MediumFrequencyTaskM1+0x2d8>)
 8001a0a:	f005 fd73 	bl	80074f4 <EAC_Exec>
 8001a0e:	4606      	mov	r6, r0
            if ((isAligned == false)  && (EACDone == false))
 8001a10:	b90d      	cbnz	r5, 8001a16 <TSK_MediumFrequencyTaskM1+0x1da>
 8001a12:	2800      	cmp	r0, #0
 8001a14:	d046      	beq.n	8001aa4 <TSK_MediumFrequencyTaskM1+0x268>
              R3_1_SwitchOffPWM( pwmcHandle[M1] );
 8001a16:	4d3a      	ldr	r5, [pc, #232]	; (8001b00 <TSK_MediumFrequencyTaskM1+0x2c4>)
              STC_SetControlMode(pSTC[M1], MCM_SPEED_MODE);
 8001a18:	4e3b      	ldr	r6, [pc, #236]	; (8001b08 <TSK_MediumFrequencyTaskM1+0x2cc>)
              R3_1_SwitchOffPWM( pwmcHandle[M1] );
 8001a1a:	6828      	ldr	r0, [r5, #0]
 8001a1c:	f006 fb20 	bl	8008060 <R3_1_SwitchOffPWM>
              STC_SetControlMode(pSTC[M1], MCM_SPEED_MODE);
 8001a20:	6830      	ldr	r0, [r6, #0]
 8001a22:	2103      	movs	r1, #3
 8001a24:	f007 f9c2 	bl	8008dac <STC_SetControlMode>
              STC_SetSpeedSensor(pSTC[M1], &ENCODER_M1._Super);
 8001a28:	4933      	ldr	r1, [pc, #204]	; (8001af8 <TSK_MediumFrequencyTaskM1+0x2bc>)
 8001a2a:	6830      	ldr	r0, [r6, #0]
 8001a2c:	f007 f9aa 	bl	8008d84 <STC_SetSpeedSensor>
              FOC_Clear(M1);
 8001a30:	2000      	movs	r0, #0
 8001a32:	f7ff fde1 	bl	80015f8 <FOC_Clear>
              R3_1_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 8001a36:	6828      	ldr	r0, [r5, #0]
 8001a38:	2100      	movs	r1, #0
 8001a3a:	f006 fbcd 	bl	80081d8 <R3_1_TurnOnLowSides>
              TSK_SetStopPermanencyTimeM1(STOPPERMANENCY_TICKS);
 8001a3e:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001a42:	f7ff feeb 	bl	800181c <TSK_SetStopPermanencyTimeM1>
              Mci[M1].State = WAIT_STOP_MOTOR;
 8001a46:	2314      	movs	r3, #20
 8001a48:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
 8001a4c:	e70c      	b.n	8001868 <TSK_MediumFrequencyTaskM1+0x2c>
          if ((MCI_START == Mci[M1].DirectCommand) || (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand))
 8001a4e:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8001a52:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	f47f af06 	bne.w	8001868 <TSK_MediumFrequencyTaskM1+0x2c>
            if (pwmcHandle[M1]->offsetCalibStatus == false)
 8001a5c:	4d28      	ldr	r5, [pc, #160]	; (8001b00 <TSK_MediumFrequencyTaskM1+0x2c4>)
 8001a5e:	6828      	ldr	r0, [r5, #0]
 8001a60:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
 8001a64:	b9b9      	cbnz	r1, 8001a96 <TSK_MediumFrequencyTaskM1+0x25a>
              (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_START);
 8001a66:	f000 fd5f 	bl	8002528 <PWMC_CurrentReadingCalibr>
              Mci[M1].State = OFFSET_CALIB;
 8001a6a:	2311      	movs	r3, #17
 8001a6c:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
 8001a70:	e6fa      	b.n	8001868 <TSK_MediumFrequencyTaskM1+0x2c>
    R3_1_SwitchOffPWM(pwmcHandle[motor]);
 8001a72:	4b23      	ldr	r3, [pc, #140]	; (8001b00 <TSK_MediumFrequencyTaskM1+0x2c4>)
 8001a74:	6818      	ldr	r0, [r3, #0]
 8001a76:	f006 faf3 	bl	8008060 <R3_1_SwitchOffPWM>
  FOC_Clear(motor);
 8001a7a:	2000      	movs	r0, #0
 8001a7c:	f7ff fdbc 	bl	80015f8 <FOC_Clear>
  PQD_Clear(pMPM[motor]);
 8001a80:	6828      	ldr	r0, [r5, #0]
 8001a82:	f006 f903 	bl	8007c8c <PQD_Clear>
  TSK_SetStopPermanencyTimeM1(STOPPERMANENCY_TICKS);
 8001a86:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001a8a:	f7ff fec7 	bl	800181c <TSK_SetStopPermanencyTimeM1>
  Mci[motor].State = STOP;
 8001a8e:	2308      	movs	r3, #8
 8001a90:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
}
 8001a94:	e6e8      	b.n	8001868 <TSK_MediumFrequencyTaskM1+0x2c>
              (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 8001a96:	4619      	mov	r1, r3
              pwmcHandle[M1]->OffCalibrWaitTimeCounter = 1u;
 8001a98:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
              (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 8001a9c:	f000 fd44 	bl	8002528 <PWMC_CurrentReadingCalibr>
              R3_1_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 8001aa0:	6828      	ldr	r0, [r5, #0]
 8001aa2:	e755      	b.n	8001950 <TSK_MediumFrequencyTaskM1+0x114>
              IqdRef.d = STC_CalcTorqueReference(pSTC[M1]);
 8001aa4:	4b18      	ldr	r3, [pc, #96]	; (8001b08 <TSK_MediumFrequencyTaskM1+0x2cc>)
 8001aa6:	6818      	ldr	r0, [r3, #0]
 8001aa8:	f007 f9cc 	bl	8008e44 <STC_CalcTorqueReference>
              FOCVars[M1].Iqdref = IqdRef;
 8001aac:	4b17      	ldr	r3, [pc, #92]	; (8001b0c <TSK_MediumFrequencyTaskM1+0x2d0>)
 8001aae:	821e      	strh	r6, [r3, #16]
 8001ab0:	8258      	strh	r0, [r3, #18]
            {
 8001ab2:	e6d9      	b.n	8001868 <TSK_MediumFrequencyTaskM1+0x2c>
                FOC_Clear(M1);
 8001ab4:	2000      	movs	r0, #0
 8001ab6:	f7ff fd9f 	bl	80015f8 <FOC_Clear>
                PQD_Clear(pMPM[M1]);
 8001aba:	6828      	ldr	r0, [r5, #0]
 8001abc:	f006 f8e6 	bl	8007c8c <PQD_Clear>
                Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	8463      	strh	r3, [r4, #34]	; 0x22
 8001ac4:	e6d0      	b.n	8001868 <TSK_MediumFrequencyTaskM1+0x2c>
                STC_SetControlMode(pSTC[M1], MCM_SPEED_MODE);
 8001ac6:	6830      	ldr	r0, [r6, #0]
 8001ac8:	2103      	movs	r1, #3
 8001aca:	f007 f96f 	bl	8008dac <STC_SetControlMode>
                STC_SetSpeedSensor(pSTC[M1], &ENCODER_M1._Super);
 8001ace:	490a      	ldr	r1, [pc, #40]	; (8001af8 <TSK_MediumFrequencyTaskM1+0x2bc>)
 8001ad0:	6830      	ldr	r0, [r6, #0]
 8001ad2:	f007 f957 	bl	8008d84 <STC_SetSpeedSensor>
                FOC_InitAdditionalMethods(M1);
 8001ad6:	2000      	movs	r0, #0
 8001ad8:	f7ff fe78 	bl	80017cc <FOC_InitAdditionalMethods>
                FOC_CalcCurrRef(M1);
 8001adc:	2000      	movs	r0, #0
 8001ade:	f7ff fe77 	bl	80017d0 <FOC_CalcCurrRef>
                STC_ForceSpeedReferenceToCurrentSpeed(pSTC[M1]); /* Init the reference speed to current speed */
 8001ae2:	6830      	ldr	r0, [r6, #0]
 8001ae4:	f007 f9ea 	bl	8008ebc <STC_ForceSpeedReferenceToCurrentSpeed>
                MCI_ExecBufferedCommands(&Mci[M1]); /* Exec the speed ramp after changing of the speed sensor */
 8001ae8:	4804      	ldr	r0, [pc, #16]	; (8001afc <TSK_MediumFrequencyTaskM1+0x2c0>)
 8001aea:	f7ff fb9d 	bl	8001228 <MCI_ExecBufferedCommands>
 8001aee:	2306      	movs	r3, #6
 8001af0:	e75f      	b.n	80019b2 <TSK_MediumFrequencyTaskM1+0x176>
 8001af2:	bf00      	nop
 8001af4:	20000340 	.word	0x20000340
 8001af8:	20000020 	.word	0x20000020
 8001afc:	200006e0 	.word	0x200006e0
 8001b00:	2000074c 	.word	0x2000074c
 8001b04:	2000034c 	.word	0x2000034c
 8001b08:	20000350 	.word	0x20000350
 8001b0c:	20000718 	.word	0x20000718
 8001b10:	20000308 	.word	0x20000308
 8001b14:	200000a0 	.word	0x200000a0

08001b18 <MC_Scheduler>:
  if (((uint8_t)1) == bMCBootCompleted)
 8001b18:	4b1d      	ldr	r3, [pc, #116]	; (8001b90 <MC_Scheduler+0x78>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d000      	beq.n	8001b22 <MC_Scheduler+0xa>
 8001b20:	4770      	bx	lr
{
 8001b22:	b570      	push	{r4, r5, r6, lr}
    if(hMFTaskCounterM1 > 0u)
 8001b24:	4c1b      	ldr	r4, [pc, #108]	; (8001b94 <MC_Scheduler+0x7c>)
 8001b26:	8823      	ldrh	r3, [r4, #0]
 8001b28:	b19b      	cbz	r3, 8001b52 <MC_Scheduler+0x3a>
      hMFTaskCounterM1--;
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	b29b      	uxth	r3, r3
    if(hBootCapDelayCounterM1 > 0U)
 8001b2e:	4a1a      	ldr	r2, [pc, #104]	; (8001b98 <MC_Scheduler+0x80>)
      hMFTaskCounterM1--;
 8001b30:	8023      	strh	r3, [r4, #0]
    if(hBootCapDelayCounterM1 > 0U)
 8001b32:	8813      	ldrh	r3, [r2, #0]
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	b11b      	cbz	r3, 8001b40 <MC_Scheduler+0x28>
      hBootCapDelayCounterM1--;
 8001b38:	8813      	ldrh	r3, [r2, #0]
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	b29b      	uxth	r3, r3
 8001b3e:	8013      	strh	r3, [r2, #0]
    if(hStopPermanencyCounterM1 > 0U)
 8001b40:	4a16      	ldr	r2, [pc, #88]	; (8001b9c <MC_Scheduler+0x84>)
 8001b42:	8813      	ldrh	r3, [r2, #0]
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	b11b      	cbz	r3, 8001b50 <MC_Scheduler+0x38>
      hStopPermanencyCounterM1--;
 8001b48:	8813      	ldrh	r3, [r2, #0]
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	8013      	strh	r3, [r2, #0]
}
 8001b50:	bd70      	pop	{r4, r5, r6, pc}
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess(MCP_Over_UartA.pTransportLayer,
 8001b52:	4d13      	ldr	r5, [pc, #76]	; (8001ba0 <MC_Scheduler+0x88>)
      TSK_MediumFrequencyTaskM1();
 8001b54:	f7ff fe72 	bl	800183c <TSK_MediumFrequencyTaskM1>
      MC_APP_PostMediumFrequencyHook_M1();
 8001b58:	f7ff faf6 	bl	8001148 <MC_APP_PostMediumFrequencyHook_M1>
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess(MCP_Over_UartA.pTransportLayer,
 8001b5c:	4629      	mov	r1, r5
 8001b5e:	f851 0b0c 	ldr.w	r0, [r1], #12
 8001b62:	6883      	ldr	r3, [r0, #8]
 8001b64:	4798      	blx	r3
 8001b66:	6068      	str	r0, [r5, #4]
      if ( 0U == MCP_Over_UartA.rxBuffer)
 8001b68:	b130      	cbz	r0, 8001b78 <MC_Scheduler+0x60>
        if (0U == MCP_Over_UartA.pTransportLayer->fGetBuffer(MCP_Over_UartA.pTransportLayer,
 8001b6a:	4629      	mov	r1, r5
 8001b6c:	220a      	movs	r2, #10
 8001b6e:	f851 0b08 	ldr.w	r0, [r1], #8
 8001b72:	6803      	ldr	r3, [r0, #0]
 8001b74:	4798      	blx	r3
 8001b76:	b908      	cbnz	r0, 8001b7c <MC_Scheduler+0x64>
{
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e7d8      	b.n	8001b2e <MC_Scheduler+0x16>
          MCP_ReceivedPacket(&MCP_Over_UartA);
 8001b7c:	4628      	mov	r0, r5
 8001b7e:	f000 fa4f 	bl	8002020 <MCP_ReceivedPacket>
          MCP_Over_UartA.pTransportLayer->fSendPacket(MCP_Over_UartA.pTransportLayer, MCP_Over_UartA.txBuffer,
 8001b82:	6828      	ldr	r0, [r5, #0]
 8001b84:	89ea      	ldrh	r2, [r5, #14]
 8001b86:	6846      	ldr	r6, [r0, #4]
 8001b88:	68a9      	ldr	r1, [r5, #8]
 8001b8a:	230a      	movs	r3, #10
 8001b8c:	47b0      	blx	r6
 8001b8e:	e7f3      	b.n	8001b78 <MC_Scheduler+0x60>
 8001b90:	2000073e 	.word	0x2000073e
 8001b94:	20000742 	.word	0x20000742
 8001b98:	20000740 	.word	0x20000740
 8001b9c:	20000744 	.word	0x20000744
 8001ba0:	200003a0 	.word	0x200003a0

08001ba4 <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 8001ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t bMotorNbr = 0;
  /* USER CODE BEGIN HighFrequencyTask 0 */

  /* USER CODE END HighFrequencyTask 0 */

  (void)ENC_CalcAngle(&ENCODER_M1);   /* If not sensorless then 2nd parameter is MC_NULL */
 8001ba8:	4835      	ldr	r0, [pc, #212]	; (8001c80 <TSK_HighFrequencyTask+0xdc>)
  int16_t hElAngle;
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
  hElAngle = SPD_GetElAngle(speedHandle);
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8001baa:	4f36      	ldr	r7, [pc, #216]	; (8001c84 <TSK_HighFrequencyTask+0xe0>)
  RCM_ReadOngoingConv();
  RCM_ExecNextConv();
  Ialphabeta = MCM_Clarke(Iab);
  Iqd = MCM_Park(Ialphabeta, hElAngle);
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001bac:	4c36      	ldr	r4, [pc, #216]	; (8001c88 <TSK_HighFrequencyTask+0xe4>)
{
 8001bae:	b086      	sub	sp, #24
  (void)ENC_CalcAngle(&ENCODER_M1);   /* If not sensorless then 2nd parameter is MC_NULL */
 8001bb0:	f005 fd06 	bl	80075c0 <ENC_CalcAngle>
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8001bb4:	4b35      	ldr	r3, [pc, #212]	; (8001c8c <TSK_HighFrequencyTask+0xe8>)
 8001bb6:	6818      	ldr	r0, [r3, #0]
 8001bb8:	f007 f8e6 	bl	8008d88 <STC_GetSpeedSensor>
 8001bbc:	4680      	mov	r8, r0
  hElAngle = SPD_GetElAngle(speedHandle);
 8001bbe:	f007 f885 	bl	8008ccc <SPD_GetElAngle>
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8001bc2:	a903      	add	r1, sp, #12
  hElAngle = SPD_GetElAngle(speedHandle);
 8001bc4:	4605      	mov	r5, r0
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8001bc6:	6838      	ldr	r0, [r7, #0]
 8001bc8:	f000 fb16 	bl	80021f8 <PWMC_GetPhaseCurrents>
  RCM_ReadOngoingConv();
 8001bcc:	f001 ff32 	bl	8003a34 <RCM_ReadOngoingConv>
  RCM_ExecNextConv();
 8001bd0:	f001 fee0 	bl	8003994 <RCM_ExecNextConv>
  Ialphabeta = MCM_Clarke(Iab);
 8001bd4:	9803      	ldr	r0, [sp, #12]
 8001bd6:	f7ff fc5d 	bl	8001494 <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001bda:	4629      	mov	r1, r5
  Ialphabeta = MCM_Clarke(Iab);
 8001bdc:	9004      	str	r0, [sp, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001bde:	f7ff fc99 	bl	8001514 <MCM_Park>
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001be2:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001be6:	9001      	str	r0, [sp, #4]
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001be8:	b203      	sxth	r3, r0
 8001bea:	1ac9      	subs	r1, r1, r3
 8001bec:	4b28      	ldr	r3, [pc, #160]	; (8001c90 <TSK_HighFrequencyTask+0xec>)
 8001bee:	6818      	ldr	r0, [r3, #0]
 8001bf0:	f005 ffcc 	bl	8007b8c <PI_Controller>
  Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8001bf4:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8001bf8:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 8001bfc:	1ac9      	subs	r1, r1, r3
 8001bfe:	4b25      	ldr	r3, [pc, #148]	; (8001c94 <TSK_HighFrequencyTask+0xf0>)
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001c00:	4606      	mov	r6, r0
  Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8001c02:	6818      	ldr	r0, [r3, #0]
 8001c04:	f005 ffc2 	bl	8007b8c <PI_Controller>
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 8001c08:	f8ad 6008 	strh.w	r6, [sp, #8]
 8001c0c:	f8ad 000a 	strh.w	r0, [sp, #10]
 8001c10:	9902      	ldr	r1, [sp, #8]
 8001c12:	4821      	ldr	r0, [pc, #132]	; (8001c98 <TSK_HighFrequencyTask+0xf4>)
 8001c14:	f005 fc0e 	bl	8007434 <Circle_Limitation>
 8001c18:	4606      	mov	r6, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8001c1a:	4640      	mov	r0, r8
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 8001c1c:	9602      	str	r6, [sp, #8]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8001c1e:	f007 f85f 	bl	8008ce0 <SPD_GetInstElSpeedDpp>
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8001c22:	4629      	mov	r1, r5
 8001c24:	9802      	ldr	r0, [sp, #8]
 8001c26:	f7ff fcb7 	bl	8001598 <MCM_Rev_Park>
 8001c2a:	4601      	mov	r1, r0
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8001c2c:	6838      	ldr	r0, [r7, #0]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8001c2e:	9105      	str	r1, [sp, #20]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8001c30:	f000 fae4 	bl	80021fc <PWMC_SetPhaseVoltage>

  FOCVars[M1].Vqd = Vqd;
  FOCVars[M1].Iab = Iab;
 8001c34:	9b03      	ldr	r3, [sp, #12]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8001c36:	9a04      	ldr	r2, [sp, #16]
  FOCVars[M1].Iab = Iab;
 8001c38:	6023      	str	r3, [r4, #0]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8001c3a:	4601      	mov	r1, r0
  FOCVars[M1].Iqd = Iqd;
 8001c3c:	9b01      	ldr	r3, [sp, #4]
  FOCVars[M1].Valphabeta = Valphabeta;
 8001c3e:	9805      	ldr	r0, [sp, #20]
  FOCVars[M1].Vqd = Vqd;
 8001c40:	f8c4 6016 	str.w	r6, [r4, #22]
  if(hFOCreturn == MC_DURATION)
 8001c44:	2901      	cmp	r1, #1
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8001c46:	6062      	str	r2, [r4, #4]
  FOCVars[M1].Iqd = Iqd;
 8001c48:	60e3      	str	r3, [r4, #12]
  FOCVars[M1].Valphabeta = Valphabeta;
 8001c4a:	f8c4 001a 	str.w	r0, [r4, #26]
  FOCVars[M1].hElAngle = hElAngle;
 8001c4e:	8425      	strh	r5, [r4, #32]
  if(hFOCreturn == MC_DURATION)
 8001c50:	d011      	beq.n	8001c76 <TSK_HighFrequencyTask+0xd2>
  GLOBAL_TIMESTAMP++;
 8001c52:	4a12      	ldr	r2, [pc, #72]	; (8001c9c <TSK_HighFrequencyTask+0xf8>)
  if (0U == MCPA_UART_A.Mark)
 8001c54:	4812      	ldr	r0, [pc, #72]	; (8001ca0 <TSK_HighFrequencyTask+0xfc>)
  GLOBAL_TIMESTAMP++;
 8001c56:	6813      	ldr	r3, [r2, #0]
  if (0U == MCPA_UART_A.Mark)
 8001c58:	f890 1029 	ldrb.w	r1, [r0, #41]	; 0x29
  GLOBAL_TIMESTAMP++;
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	6013      	str	r3, [r2, #0]
  if (0U == MCPA_UART_A.Mark)
 8001c60:	b919      	cbnz	r1, 8001c6a <TSK_HighFrequencyTask+0xc6>
}
 8001c62:	2000      	movs	r0, #0
 8001c64:	b006      	add	sp, #24
 8001c66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MCPA_dataLog (&MCPA_UART_A);
 8001c6a:	f005 fdbf 	bl	80077ec <MCPA_dataLog>
}
 8001c6e:	2000      	movs	r0, #0
 8001c70:	b006      	add	sp, #24
 8001c72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MCI_FaultProcessing(&Mci[M1], MC_DURATION, 0);
 8001c76:	480b      	ldr	r0, [pc, #44]	; (8001ca4 <TSK_HighFrequencyTask+0x100>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f7ff fac9 	bl	8001210 <MCI_FaultProcessing>
 8001c7e:	e7e8      	b.n	8001c52 <TSK_HighFrequencyTask+0xae>
 8001c80:	20000020 	.word	0x20000020
 8001c84:	2000074c 	.word	0x2000074c
 8001c88:	20000718 	.word	0x20000718
 8001c8c:	20000350 	.word	0x20000350
 8001c90:	20000348 	.word	0x20000348
 8001c94:	20000344 	.word	0x20000344
 8001c98:	2000001c 	.word	0x2000001c
 8001c9c:	2000193c 	.word	0x2000193c
 8001ca0:	20000374 	.word	0x20000374
 8001ca4:	200006e0 	.word	0x200006e0

08001ca8 <TSK_SafetyTask_PWMOFF>:
  * @brief  Safety task implementation if  MC.M1_ON_OVER_VOLTAGE == TURN_OFF_PWM.
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink.
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 8001ca8:	b570      	push	{r4, r5, r6, lr}

  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */
  uint16_t CodeReturn = MC_NO_ERROR;
  const uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};
  /* Check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
  CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[bMotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 8001caa:	4e22      	ldr	r6, [pc, #136]	; (8001d34 <TSK_SafetyTask_PWMOFF+0x8c>)
{
 8001cac:	b082      	sub	sp, #8
 8001cae:	4604      	mov	r4, r0
  CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[bMotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 8001cb0:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8001cb4:	f000 fc6a 	bl	800258c <PWMC_IsFaultOccurred>
 8001cb8:	4605      	mov	r5, r0
                                                    (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  if (M1 == bMotor)
 8001cba:	b364      	cbz	r4, 8001d16 <TSK_SafetyTask_PWMOFF+0x6e>
  }
  else
  {
    /* Nothing to do */
  }
  MCI_FaultProcessing(&Mci[bMotor], CodeReturn, ~CodeReturn); /* Process faults */
 8001cbc:	481e      	ldr	r0, [pc, #120]	; (8001d38 <TSK_SafetyTask_PWMOFF+0x90>)
 8001cbe:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8001cc2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8001cc6:	43ea      	mvns	r2, r5
 8001cc8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001ccc:	b292      	uxth	r2, r2
 8001cce:	4629      	mov	r1, r5
 8001cd0:	9001      	str	r0, [sp, #4]
 8001cd2:	f7ff fa9d 	bl	8001210 <MCI_FaultProcessing>

  if (MCI_GetFaultState(&Mci[bMotor]) != (uint32_t)MC_NO_FAULTS)
 8001cd6:	9801      	ldr	r0, [sp, #4]
 8001cd8:	f7ff fb56 	bl	8001388 <MCI_GetFaultState>
 8001cdc:	b1c8      	cbz	r0, 8001d12 <TSK_SafetyTask_PWMOFF+0x6a>
  {
    /* Reset Encoder state */
    if (pEAC[bMotor] != MC_NULL)
 8001cde:	4b17      	ldr	r3, [pc, #92]	; (8001d3c <TSK_SafetyTask_PWMOFF+0x94>)
 8001ce0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8001ce4:	b110      	cbz	r0, 8001cec <TSK_SafetyTask_PWMOFF+0x44>
    {
      EAC_SetRestartState(pEAC[bMotor], false);
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	f005 fc1e 	bl	8007528 <EAC_SetRestartState>
    }
    else
    {
      /* Nothing to do */
    }
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001cec:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8001cf0:	f000 fc16 	bl	8002520 <PWMC_SwitchOffPWM>
    if (MCPA_UART_A.Mark != 0U)
 8001cf4:	4812      	ldr	r0, [pc, #72]	; (8001d40 <TSK_SafetyTask_PWMOFF+0x98>)
 8001cf6:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8001cfa:	b9c3      	cbnz	r3, 8001d2e <TSK_SafetyTask_PWMOFF+0x86>
    }
    else
    {
      /* Nothing to do */
    }
    FOC_Clear(bMotor);
 8001cfc:	4620      	mov	r0, r4
 8001cfe:	f7ff fc7b 	bl	80015f8 <FOC_Clear>
    PQD_Clear(pMPM[bMotor]); //cstat !MISRAC2012-Rule-11.3
 8001d02:	4b10      	ldr	r3, [pc, #64]	; (8001d44 <TSK_SafetyTask_PWMOFF+0x9c>)
 8001d04:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    /* No errors */
  }
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 8001d08:	b002      	add	sp, #8
 8001d0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    PQD_Clear(pMPM[bMotor]); //cstat !MISRAC2012-Rule-11.3
 8001d0e:	f005 bfbd 	b.w	8007c8c <PQD_Clear>
}
 8001d12:	b002      	add	sp, #8
 8001d14:	bd70      	pop	{r4, r5, r6, pc}
    uint16_t rawValueM1 =  RCM_ExecRegularConv(&VbusRegConv_M1);
 8001d16:	480c      	ldr	r0, [pc, #48]	; (8001d48 <TSK_SafetyTask_PWMOFF+0xa0>)
 8001d18:	f001 fd40 	bl	800379c <RCM_ExecRegularConv>
 8001d1c:	4601      	mov	r1, r0
    CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(&BusVoltageSensor_M1, rawValueM1);
 8001d1e:	480b      	ldr	r0, [pc, #44]	; (8001d4c <TSK_SafetyTask_PWMOFF+0xa4>)
 8001d20:	f006 ff9e 	bl	8008c60 <RVBS_CalcAvVbus>
 8001d24:	f020 0008 	bic.w	r0, r0, #8
 8001d28:	4328      	orrs	r0, r5
 8001d2a:	b285      	uxth	r5, r0
 8001d2c:	e7c6      	b.n	8001cbc <TSK_SafetyTask_PWMOFF+0x14>
      MCPA_flushDataLog (&MCPA_UART_A);
 8001d2e:	f005 fe21 	bl	8007974 <MCPA_flushDataLog>
 8001d32:	e7e3      	b.n	8001cfc <TSK_SafetyTask_PWMOFF+0x54>
 8001d34:	2000074c 	.word	0x2000074c
 8001d38:	200006e0 	.word	0x200006e0
 8001d3c:	20000748 	.word	0x20000748
 8001d40:	20000374 	.word	0x20000374
 8001d44:	20000340 	.word	0x20000340
 8001d48:	200002f8 	.word	0x200002f8
 8001d4c:	20000000 	.word	0x20000000

08001d50 <TSK_SafetyTask>:
{
 8001d50:	b508      	push	{r3, lr}
  if (1U == bMCBootCompleted)
 8001d52:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <TSK_SafetyTask+0x1c>)
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d000      	beq.n	8001d5c <TSK_SafetyTask+0xc>
}
 8001d5a:	bd08      	pop	{r3, pc}
    TSK_SafetyTask_PWMOFF(M1);
 8001d5c:	2000      	movs	r0, #0
 8001d5e:	f7ff ffa3 	bl	8001ca8 <TSK_SafetyTask_PWMOFF>
}
 8001d62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCM_ExecUserConv();
 8001d66:	f001 bde1 	b.w	800392c <RCM_ExecUserConv>
 8001d6a:	bf00      	nop
 8001d6c:	2000073e 	.word	0x2000073e

08001d70 <MC_RunMotorControlTasks>:
{
 8001d70:	b508      	push	{r3, lr}
  if (0U == bMCBootCompleted)
 8001d72:	4b04      	ldr	r3, [pc, #16]	; (8001d84 <MC_RunMotorControlTasks+0x14>)
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	b903      	cbnz	r3, 8001d7a <MC_RunMotorControlTasks+0xa>
}
 8001d78:	bd08      	pop	{r3, pc}
    MC_Scheduler();
 8001d7a:	f7ff fecd 	bl	8001b18 <MC_Scheduler>
    TSK_SafetyTask();
 8001d7e:	f7ff ffe7 	bl	8001d50 <TSK_SafetyTask>
}
 8001d82:	bd08      	pop	{r3, pc}
 8001d84:	2000073e 	.word	0x2000073e

08001d88 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 8001d88:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */
  R3_1_SwitchOffPWM(pwmcHandle[M1]);
 8001d8a:	4b05      	ldr	r3, [pc, #20]	; (8001da0 <TSK_HardwareFaultTask+0x18>)
 8001d8c:	6818      	ldr	r0, [r3, #0]
 8001d8e:	f006 f967 	bl	8008060 <R3_1_SwitchOffPWM>
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);

  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 8001d92:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);
 8001d96:	4803      	ldr	r0, [pc, #12]	; (8001da4 <TSK_HardwareFaultTask+0x1c>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	2180      	movs	r1, #128	; 0x80
 8001d9c:	f7ff ba38 	b.w	8001210 <MCI_FaultProcessing>
 8001da0:	2000074c 	.word	0x2000074c
 8001da4:	200006e0 	.word	0x200006e0

08001da8 <UI_HandleStartStopButton_cb>:

__weak void UI_HandleStartStopButton_cb (void)
{
 8001da8:	b508      	push	{r3, lr}
/* USER CODE BEGIN START_STOP_BTN */
  if (IDLE == MC_GetSTMStateMotor1())
 8001daa:	f7ff f9bd 	bl	8001128 <MC_GetSTMStateMotor1>
 8001dae:	b918      	cbnz	r0, 8001db8 <UI_HandleStartStopButton_cb+0x10>
  else
  {
    (void)MC_StopMotor1();
  }
/* USER CODE END START_STOP_BTN */
}
 8001db0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    (void)MC_StartMotor1();
 8001db4:	f7ff b9ac 	b.w	8001110 <MC_StartMotor1>
}
 8001db8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    (void)MC_StopMotor1();
 8001dbc:	f7ff b9ae 	b.w	800111c <MC_StopMotor1>

08001dc0 <mc_lock_pins>:

 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration.
  */
__weak void mc_lock_pins (void)
{
 8001dc0:	b4f0      	push	{r4, r5, r6, r7}
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001dc2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001dc6:	f44f 32c0 	mov.w	r2, #98304	; 0x18000
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001dca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001dce:	61da      	str	r2, [r3, #28]
 8001dd0:	b08e      	sub	sp, #56	; 0x38
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001dd2:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001dd4:	61da      	str	r2, [r3, #28]
  /* Read LCKR register. This read is mandatory to complete key lock sequence */
  temp = READ_REG(GPIOx->LCKR);
 8001dd6:	69d9      	ldr	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001dd8:	4a33      	ldr	r2, [pc, #204]	; (8001ea8 <mc_lock_pins+0xe8>)
  temp = READ_REG(GPIOx->LCKR);
 8001dda:	910d      	str	r1, [sp, #52]	; 0x34
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001ddc:	2008      	movs	r0, #8
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001dde:	4933      	ldr	r1, [pc, #204]	; (8001eac <mc_lock_pins+0xec>)
  (void) temp;
 8001de0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001de2:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001de4:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001de6:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001de8:	69d1      	ldr	r1, [r2, #28]
 8001dea:	910c      	str	r1, [sp, #48]	; 0x30
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001dec:	f44f 7080 	mov.w	r0, #256	; 0x100
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001df0:	492f      	ldr	r1, [pc, #188]	; (8001eb0 <mc_lock_pins+0xf0>)
  (void) temp;
 8001df2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001df4:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001df6:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001df8:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001dfa:	69d9      	ldr	r1, [r3, #28]
 8001dfc:	910b      	str	r1, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001dfe:	f44f 7000 	mov.w	r0, #512	; 0x200
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e02:	f44f 3181 	mov.w	r1, #66048	; 0x10200
  (void) temp;
 8001e06:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e08:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e0a:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e0c:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001e0e:	69d9      	ldr	r1, [r3, #28]
 8001e10:	910a      	str	r1, [sp, #40]	; 0x28
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e12:	2401      	movs	r4, #1
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e14:	f04f 1101 	mov.w	r1, #65537	; 0x10001
  (void) temp;
 8001e18:	980a      	ldr	r0, [sp, #40]	; 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e1a:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e1c:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e1e:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001e20:	69d0      	ldr	r0, [r2, #28]
 8001e22:	9009      	str	r0, [sp, #36]	; 0x24
  (void) temp;
 8001e24:	9d09      	ldr	r5, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e26:	f44f 3082 	mov.w	r0, #66560	; 0x10400
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e2a:	f44f 6580 	mov.w	r5, #1024	; 0x400
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e2e:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e30:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e32:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001e34:	69d8      	ldr	r0, [r3, #28]
 8001e36:	9008      	str	r0, [sp, #32]
  (void) temp;
 8001e38:	9d08      	ldr	r5, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e3a:	481e      	ldr	r0, [pc, #120]	; (8001eb4 <mc_lock_pins+0xf4>)
 8001e3c:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e3e:	2502      	movs	r5, #2
 8001e40:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e42:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001e44:	69d6      	ldr	r6, [r2, #28]
 8001e46:	9607      	str	r6, [sp, #28]
  (void) temp;
 8001e48:	9e07      	ldr	r6, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e4a:	4e1b      	ldr	r6, [pc, #108]	; (8001eb8 <mc_lock_pins+0xf8>)
 8001e4c:	61de      	str	r6, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e4e:	2780      	movs	r7, #128	; 0x80
 8001e50:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e52:	61de      	str	r6, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001e54:	69de      	ldr	r6, [r3, #28]
 8001e56:	9606      	str	r6, [sp, #24]
  (void) temp;
 8001e58:	9e06      	ldr	r6, [sp, #24]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e5a:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e5e:	f44f 3688 	mov.w	r6, #69632	; 0x11000
 8001e62:	61d6      	str	r6, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e64:	61d7      	str	r7, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e66:	61d6      	str	r6, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001e68:	69d2      	ldr	r2, [r2, #28]
 8001e6a:	9205      	str	r2, [sp, #20]
  (void) temp;
 8001e6c:	9a05      	ldr	r2, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e6e:	4a13      	ldr	r2, [pc, #76]	; (8001ebc <mc_lock_pins+0xfc>)
 8001e70:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e72:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e74:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001e76:	69d6      	ldr	r6, [r2, #28]
 8001e78:	9604      	str	r6, [sp, #16]
  (void) temp;
 8001e7a:	9e04      	ldr	r6, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e7c:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e7e:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e80:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001e82:	69d2      	ldr	r2, [r2, #28]
 8001e84:	9203      	str	r2, [sp, #12]
  (void) temp;
 8001e86:	9a03      	ldr	r2, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e88:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e8a:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e8c:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001e8e:	69da      	ldr	r2, [r3, #28]
 8001e90:	9202      	str	r2, [sp, #8]
  (void) temp;
 8001e92:	9a02      	ldr	r2, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e94:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e96:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e98:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001e9a:	69db      	ldr	r3, [r3, #28]
 8001e9c:	9301      	str	r3, [sp, #4]
  (void) temp;
 8001e9e:	9b01      	ldr	r3, [sp, #4]
LL_GPIO_LockPin(M1_ENCODER_Z_GPIO_Port, M1_ENCODER_Z_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_V_GPIO_Port, M1_CURR_AMPL_V_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_W_GPIO_Port, M1_CURR_AMPL_W_Pin);
LL_GPIO_LockPin(M1_BUS_VOLTAGE_GPIO_Port, M1_BUS_VOLTAGE_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_U_GPIO_Port, M1_CURR_AMPL_U_Pin);
}
 8001ea0:	b00e      	add	sp, #56	; 0x38
 8001ea2:	bcf0      	pop	{r4, r5, r6, r7}
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	48000400 	.word	0x48000400
 8001eac:	00010008 	.word	0x00010008
 8001eb0:	00010100 	.word	0x00010100
 8001eb4:	00010002 	.word	0x00010002
 8001eb8:	00010080 	.word	0x00010080
 8001ebc:	48000800 	.word	0x48000800

08001ec0 <RI_SetRegCommandParser>:
  * @param  txSyncFreeSpace Space available for synchronous transmission
  *
  * @retval Returns #MCP_CMD_OK if the command is acknowledged and #MCP_CMD_NOK if not.
  */
uint8_t RI_SetRegCommandParser (MCP_Handle_t * pHandle, uint16_t txSyncFreeSpace)
{
 8001ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ec4:	b087      	sub	sp, #28
    uint8_t accessResult;

    uint16_t regID;
    uint8_t typeID;
    uint8_t motorID;
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 8001ec6:	4b2f      	ldr	r3, [pc, #188]	; (8001f84 <RI_SetRegCommandParser+0xc4>)
 8001ec8:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8001ecc:	9304      	str	r3, [sp, #16]
 8001ece:	4b2e      	ldr	r3, [pc, #184]	; (8001f88 <RI_SetRegCommandParser+0xc8>)
 8001ed0:	9305      	str	r3, [sp, #20]
    uint16_t size = 0U;
 8001ed2:	2600      	movs	r6, #0
    uint8_t * rxData = pHandle->rxBuffer;
 8001ed4:	f8d0 e004 	ldr.w	lr, [r0, #4]
    int16_t rxLength = pHandle->rxLength;
 8001ed8:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
    uint16_t size = 0U;
 8001edc:	f8ad 600e 	strh.w	r6, [sp, #14]
{
 8001ee0:	4607      	mov	r7, r0
    uint8_t number_of_item =0;
    pHandle->txLength = 0;
 8001ee2:	81c6      	strh	r6, [r0, #14]
 8001ee4:	eb08 0901 	add.w	r9, r8, r1
  uint8_t retVal = MCP_CMD_OK;
 8001ee8:	46b2      	mov	sl, r6

    while (rxLength > 0)
    {
      number_of_item ++;
 8001eea:	3601      	adds	r6, #1
    while (rxLength > 0)
 8001eec:	2b00      	cmp	r3, #0
      dataElementID = (uint16_t *) rxData;
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8001eee:	f1a3 0c02 	sub.w	ip, r3, #2
      number_of_item ++;
 8001ef2:	b2f6      	uxtb	r6, r6
    while (rxLength > 0)
 8001ef4:	dd43      	ble.n	8001f7e <RI_SetRegCommandParser+0xbe>
        retVal = MCP_CMD_NOK;
        rxLength = 0;
      }
      else
      {
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 8001ef6:	fa0f f18c 	sxth.w	r1, ip
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8001efa:	fa1f f48c 	uxth.w	r4, ip
      regID = *dataElementID & REG_MASK;
 8001efe:	f8be c000 	ldrh.w	ip, [lr]
      rxData = rxData+MCP_ID_SIZE; // Shift buffer to the next data
 8001f02:	f10e 0502 	add.w	r5, lr, #2
      if (motorID > NBR_OF_MOTORS)
 8001f06:	f01c 0f06 	tst.w	ip, #6
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 8001f0a:	f10d 030e 	add.w	r3, sp, #14
 8001f0e:	462a      	mov	r2, r5
      regID = *dataElementID & REG_MASK;
 8001f10:	f02c 0007 	bic.w	r0, ip, #7
      typeID = (uint8_t)*dataElementID & TYPE_MASK;
 8001f14:	fa5f fe8c 	uxtb.w	lr, ip
      if (motorID > NBR_OF_MOTORS)
 8001f18:	d11e      	bne.n	8001f58 <RI_SetRegCommandParser+0x98>
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 8001f1a:	9100      	str	r1, [sp, #0]
 8001f1c:	f00e 0c07 	and.w	ip, lr, #7
 8001f20:	a906      	add	r1, sp, #24
 8001f22:	eb01 0c8c 	add.w	ip, r1, ip, lsl #2
 8001f26:	f00e 0138 	and.w	r1, lr, #56	; 0x38
 8001f2a:	f85c bc08 	ldr.w	fp, [ip, #-8]
 8001f2e:	47d8      	blx	fp
        /* Prepare next data*/
        rxLength = (int16_t) (rxLength - size);
 8001f30:	f8bd e00e 	ldrh.w	lr, [sp, #14]
        rxData = rxData+size;
        /* If there is only one CMD in the buffer, we do not store the result */
        if ((1U == number_of_item) && (0 == rxLength))
 8001f34:	2e01      	cmp	r6, #1
        rxLength = (int16_t) (rxLength - size);
 8001f36:	eba4 0c0e 	sub.w	ip, r4, lr
 8001f3a:	fa0f f38c 	sxth.w	r3, ip
        if ((1U == number_of_item) && (0 == rxLength))
 8001f3e:	d013      	beq.n	8001f68 <RI_SetRegCommandParser+0xa8>
        {
          retVal = accessResult;
        }
        else
        {/* Store the result for each access to be able to report failing access */
          if (txSyncFreeSpace !=0 )
 8001f40:	45c1      	cmp	r9, r8
 8001f42:	d00d      	beq.n	8001f60 <RI_SetRegCommandParser+0xa0>
          {
            *txData = accessResult;
 8001f44:	f808 0b01 	strb.w	r0, [r8], #1
            txData = txData+1;
            pHandle->txLength++;
 8001f48:	89fa      	ldrh	r2, [r7, #14]
 8001f4a:	3201      	adds	r2, #1
        rxData = rxData+size;
 8001f4c:	44ae      	add	lr, r5
            pHandle->txLength++;
 8001f4e:	81fa      	strh	r2, [r7, #14]
            txSyncFreeSpace--; /* decrement one by one no wraparound possible */
            retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 8001f50:	2800      	cmp	r0, #0
 8001f52:	d0ca      	beq.n	8001eea <RI_SetRegCommandParser+0x2a>
            if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FORMAT))
 8001f54:	2807      	cmp	r0, #7
 8001f56:	d10d      	bne.n	8001f74 <RI_SetRegCommandParser+0xb4>
            retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 8001f58:	2001      	movs	r0, #1
    }
  #ifdef NULL_PTR_CHECK_REG_INT
  }
#endif
  return (retVal);
}
 8001f5a:	b007      	add	sp, #28
 8001f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8001f60:	2008      	movs	r0, #8
}
 8001f62:	b007      	add	sp, #28
 8001f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((1U == number_of_item) && (0 == rxLength))
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d1e9      	bne.n	8001f40 <RI_SetRegCommandParser+0x80>
    if (MCP_CMD_OK == retVal)
 8001f6c:	2800      	cmp	r0, #0
 8001f6e:	d1f4      	bne.n	8001f5a <RI_SetRegCommandParser+0x9a>
      pHandle->txLength = 0;
 8001f70:	81f8      	strh	r0, [r7, #14]
 8001f72:	e7f2      	b.n	8001f5a <RI_SetRegCommandParser+0x9a>
            if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FORMAT))
 8001f74:	280a      	cmp	r0, #10
 8001f76:	d0ef      	beq.n	8001f58 <RI_SetRegCommandParser+0x98>
            retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 8001f78:	f04f 0a01 	mov.w	sl, #1
 8001f7c:	e7b5      	b.n	8001eea <RI_SetRegCommandParser+0x2a>
 8001f7e:	4650      	mov	r0, sl
 8001f80:	e7f4      	b.n	8001f6c <RI_SetRegCommandParser+0xac>
 8001f82:	bf00      	nop
 8001f84:	080025c5 	.word	0x080025c5
 8001f88:	080026c1 	.word	0x080026c1

08001f8c <RI_GetRegCommandParser>:
  * @param  txSyncFreeSpace Space available for synchronous transmission
  *
  * @retval Returns #MCP_CMD_OK if the command is acknowledged and #MCP_CMD_NOK if not.
  */
uint8_t RI_GetRegCommandParser (MCP_Handle_t * pHandle, uint16_t txSyncFreeSpace)
{
 8001f8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f90:	b086      	sub	sp, #24
  {
#endif
    uint16_t * dataElementID;
    uint8_t * rxData = pHandle->rxBuffer;
    uint8_t * txData = pHandle->txBuffer;
    uint16_t size = 0U;
 8001f92:	2300      	movs	r3, #0
 8001f94:	f8ad 300e 	strh.w	r3, [sp, #14]

    uint16_t regID;
    uint8_t typeID;
    uint8_t motorID;
    uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_GetRegisterGlobal, &RI_GetRegisterMotor1};
    pHandle->txLength = 0;
 8001f98:	81c3      	strh	r3, [r0, #14]
    uint16_t rxLength = pHandle->rxLength;
 8001f9a:	f8b0 800c 	ldrh.w	r8, [r0, #12]
    uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_GetRegisterGlobal, &RI_GetRegisterMotor1};
 8001f9e:	4b1e      	ldr	r3, [pc, #120]	; (8002018 <RI_GetRegCommandParser+0x8c>)
 8001fa0:	9304      	str	r3, [sp, #16]
 8001fa2:	4b1e      	ldr	r3, [pc, #120]	; (800201c <RI_GetRegCommandParser+0x90>)
    uint8_t * rxData = pHandle->rxBuffer;
 8001fa4:	f8d0 9004 	ldr.w	r9, [r0, #4]
    uint8_t * txData = pHandle->txBuffer;
 8001fa8:	6886      	ldr	r6, [r0, #8]
    uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_GetRegisterGlobal, &RI_GetRegisterMotor1};
 8001faa:	9305      	str	r3, [sp, #20]
    while (rxLength > 0U)
 8001fac:	f1b8 0f00 	cmp.w	r8, #0
 8001fb0:	d023      	beq.n	8001ffa <RI_GetRegCommandParser+0x6e>
 8001fb2:	4607      	mov	r7, r0
 8001fb4:	b20d      	sxth	r5, r1
    uint8_t * rxData = pHandle->rxBuffer;
 8001fb6:	464c      	mov	r4, r9
    {
      dataElementID = (uint16_t *) rxData;
      rxLength = rxLength - MCP_ID_SIZE;
      rxData = rxData + MCP_ID_SIZE; // Shift buffer to the next MCP_ID

      regID = *dataElementID & REG_MASK;
 8001fb8:	f834 cb02 	ldrh.w	ip, [r4], #2
      typeID = (uint8_t)*dataElementID & TYPE_MASK;
 8001fbc:	fa5f f18c 	uxtb.w	r1, ip
        retVal = MCP_CMD_NOK;
        rxLength = 0;
      }
      else
      {
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 8001fc0:	f001 0e07 	and.w	lr, r1, #7
 8001fc4:	f10d 0a18 	add.w	sl, sp, #24
      if (motorID > NBR_OF_MOTORS)
 8001fc8:	f01c 0f06 	tst.w	ip, #6
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 8001fcc:	4632      	mov	r2, r6
      regID = *dataElementID & REG_MASK;
 8001fce:	f02c 0007 	bic.w	r0, ip, #7
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 8001fd2:	f10d 030e 	add.w	r3, sp, #14
 8001fd6:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 8001fda:	f001 0138 	and.w	r1, r1, #56	; 0x38
      if (motorID > NBR_OF_MOTORS)
 8001fde:	d10c      	bne.n	8001ffa <RI_GetRegCommandParser+0x6e>
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 8001fe0:	9500      	str	r5, [sp, #0]
 8001fe2:	f85e ac08 	ldr.w	sl, [lr, #-8]
 8001fe6:	47d0      	blx	sl
        if (retVal == MCP_CMD_OK )
 8001fe8:	eba8 0304 	sub.w	r3, r8, r4
    while (rxLength > 0U)
 8001fec:	fa19 f383 	uxtah	r3, r9, r3
 8001ff0:	b29b      	uxth	r3, r3
        if (retVal == MCP_CMD_OK )
 8001ff2:	b130      	cbz	r0, 8002002 <RI_GetRegCommandParser+0x76>
    }
#ifdef NULL_PTR_CHECK_REG_INT
  }
#endif
  return (retVal);
}
 8001ff4:	b006      	add	sp, #24
 8001ff6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  uint8_t retVal = MCP_CMD_NOK;
 8001ffa:	2001      	movs	r0, #1
}
 8001ffc:	b006      	add	sp, #24
 8001ffe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          txData = txData+size;
 8002002:	f8bd 100e 	ldrh.w	r1, [sp, #14]
          pHandle->txLength += size;
 8002006:	89fa      	ldrh	r2, [r7, #14]
          freeSpaceS16 = freeSpaceS16-size;
 8002008:	1a6d      	subs	r5, r5, r1
          pHandle->txLength += size;
 800200a:	440a      	add	r2, r1
          txData = txData+size;
 800200c:	440e      	add	r6, r1
          pHandle->txLength += size;
 800200e:	81fa      	strh	r2, [r7, #14]
          freeSpaceS16 = freeSpaceS16-size;
 8002010:	b22d      	sxth	r5, r5
    while (rxLength > 0U)
 8002012:	2b00      	cmp	r3, #0
 8002014:	d1d0      	bne.n	8001fb8 <RI_GetRegCommandParser+0x2c>
 8002016:	e7ed      	b.n	8001ff4 <RI_GetRegCommandParser+0x68>
 8002018:	08002bc9 	.word	0x08002bc9
 800201c:	08002d05 	.word	0x08002d05

08002020 <MCP_ReceivedPacket>:
  * @brief  Parses the header from the received packet and call the required function depending on the command sent by the controller device.
  *
  * @param  pHandle Handler of the current instance of the MCP component
  */
void MCP_ReceivedPacket(MCP_Handle_t *pHandle)
{
 8002020:	b5f0      	push	{r4, r5, r6, r7, lr}
    /* Nothing to do, txBuffer and txLength have not been modified */
  }
  else /* Length is 0, this is a request to send back the last packet */
  {
#endif
    packetHeader = (uint16_t *)pHandle->rxBuffer; //cstat !MISRAC2012-Rule-11.3
 8002022:	6845      	ldr	r5, [r0, #4]
    command = (uint16_t)(*packetHeader & CMD_MASK);
 8002024:	882b      	ldrh	r3, [r5, #0]

    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 8002026:	f403 427f 	and.w	r2, r3, #65280	; 0xff00
    command = (uint16_t)(*packetHeader & CMD_MASK);
 800202a:	f023 0c07 	bic.w	ip, r3, #7
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 800202e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
{
 8002032:	b083      	sub	sp, #12
 8002034:	4604      	mov	r4, r0
    command = (uint16_t)(*packetHeader & CMD_MASK);
 8002036:	fa1f fc8c 	uxth.w	ip, ip
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 800203a:	d053      	beq.n	80020e4 <MCP_ReceivedPacket+0xc4>
    else
    {
      /* Nothing to do */
    }

    motorID = (uint8_t)((*packetHeader - 1U) & MOTOR_MASK);
 800203c:	3b01      	subs	r3, #1
    MCI_Handle_t *pMCI = &Mci[motorID];
 800203e:	f003 0307 	and.w	r3, r3, #7
 8002042:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8002046:	4f5b      	ldr	r7, [pc, #364]	; (80021b4 <MCP_ReceivedPacket+0x194>)
 8002048:	eb03 0342 	add.w	r3, r3, r2, lsl #1

    /* Removing MCP Header from RxBuffer */
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 800204c:	3502      	adds	r5, #2
    MCI_Handle_t *pMCI = &Mci[motorID];
 800204e:	eb07 0783 	add.w	r7, r7, r3, lsl #2

    /* Commands requiering payload response must be aware of space available for the payload */
    /* Last byte is reserved for MCP response*/
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8002052:	6823      	ldr	r3, [r4, #0]
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 8002054:	6045      	str	r5, [r0, #4]
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8002056:	8980      	ldrh	r0, [r0, #12]
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8002058:	899a      	ldrh	r2, [r3, #12]
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 800205a:	3802      	subs	r0, #2
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 800205c:	3a01      	subs	r2, #1
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 800205e:	b280      	uxth	r0, r0

    /* Initialization of the tx length, command which send back data has to increment the txLength
     * (case of Read register) */
    pHandle->txLength = 0U;
 8002060:	2600      	movs	r6, #0

    switch (command)
 8002062:	f1bc 0f38 	cmp.w	ip, #56	; 0x38
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8002066:	b291      	uxth	r1, r2
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8002068:	81a0      	strh	r0, [r4, #12]
    pHandle->txLength = 0U;
 800206a:	81e6      	strh	r6, [r4, #14]
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 800206c:	b212      	sxth	r2, r2
    switch (command)
 800206e:	d82a      	bhi.n	80020c6 <MCP_ReceivedPacket+0xa6>
 8002070:	f1bc 0f38 	cmp.w	ip, #56	; 0x38
 8002074:	d81e      	bhi.n	80020b4 <MCP_ReceivedPacket+0x94>
 8002076:	e8df f00c 	tbb	[pc, ip]
 800207a:	1d63      	.short	0x1d63
 800207c:	1d1d1d1d 	.word	0x1d1d1d1d
 8002080:	1d6b1d1d 	.word	0x1d6b1d1d
 8002084:	1d1d1d1d 	.word	0x1d1d1d1d
 8002088:	1d701d1d 	.word	0x1d701d1d
 800208c:	1d1d1d1d 	.word	0x1d1d1d1d
 8002090:	1d751d1d 	.word	0x1d751d1d
 8002094:	1d1d1d1d 	.word	0x1d1d1d1d
 8002098:	1d4c1d1d 	.word	0x1d4c1d1d
 800209c:	1d1d1d1d 	.word	0x1d1d1d1d
 80020a0:	1d521d1d 	.word	0x1d521d1d
 80020a4:	1d1d1d1d 	.word	0x1d1d1d1d
 80020a8:	1d471d1d 	.word	0x1d471d1d
 80020ac:	1d1d1d1d 	.word	0x1d1d1d1d
 80020b0:	1d1d      	.short	0x1d1d
 80020b2:	5d          	.byte	0x5d
 80020b3:	00          	.byte	0x00
 80020b4:	2300      	movs	r3, #0
 80020b6:	2002      	movs	r0, #2
      {
        MCPResponse = MCP_CMD_UNKNOWN;
        break;
      }
    }
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80020b8:	68a2      	ldr	r2, [r4, #8]
 80020ba:	54d0      	strb	r0, [r2, r3]
    pHandle->txLength++;
 80020bc:	89e3      	ldrh	r3, [r4, #14]
 80020be:	3301      	adds	r3, #1
 80020c0:	81e3      	strh	r3, [r4, #14]
#ifdef NULL_PTR_CHECK_MCP
  }
#endif
}
 80020c2:	b003      	add	sp, #12
 80020c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch (command)
 80020c6:	f1bc 0f68 	cmp.w	ip, #104	; 0x68
 80020ca:	d05f      	beq.n	800218c <MCP_ReceivedPacket+0x16c>
 80020cc:	f5bc 7f80 	cmp.w	ip, #256	; 0x100
 80020d0:	d06d      	beq.n	80021ae <MCP_ReceivedPacket+0x18e>
 80020d2:	f1bc 0f48 	cmp.w	ip, #72	; 0x48
 80020d6:	d1ed      	bne.n	80020b4 <MCP_ReceivedPacket+0x94>
        MCI_Clear_Iqdref(pMCI);
 80020d8:	4638      	mov	r0, r7
 80020da:	f7ff f9d1 	bl	8001480 <MCI_Clear_Iqdref>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80020de:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 80020e0:	4630      	mov	r0, r6
        break;
 80020e2:	e7e9      	b.n	80020b8 <MCP_ReceivedPacket+0x98>
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 80020e4:	8980      	ldrh	r0, [r0, #12]
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 80020e6:	6823      	ldr	r3, [r4, #0]
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 80020e8:	3802      	subs	r0, #2
      userCommand = ((uint8_t)(command & 0xF8U) >> 3U);
 80020ea:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 80020ee:	899a      	ldrh	r2, [r3, #12]
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 80020f0:	b280      	uxth	r0, r0
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 80020f2:	3502      	adds	r5, #2
    pHandle->txLength = 0U;
 80020f4:	2300      	movs	r3, #0
        if ((userCommand < MCP_USER_CALLBACK_MAX) && (MCP_UserCallBack[userCommand] != NULL))
 80020f6:	f1bc 0f01 	cmp.w	ip, #1
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 80020fa:	81a0      	strh	r0, [r4, #12]
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 80020fc:	6065      	str	r5, [r4, #4]
    pHandle->txLength = 0U;
 80020fe:	81e3      	strh	r3, [r4, #14]
        if ((userCommand < MCP_USER_CALLBACK_MAX) && (MCP_UserCallBack[userCommand] != NULL))
 8002100:	d935      	bls.n	800216e <MCP_ReceivedPacket+0x14e>
        MCPResponse = MCP_CMD_OK;
 8002102:	2300      	movs	r3, #0
          MCPResponse = MCP_ERROR_CALLBACK_NOT_REGISTRED;
 8002104:	200d      	movs	r0, #13
 8002106:	e7d7      	b.n	80020b8 <MCP_ReceivedPacket+0x98>
        if (IDLE == MCI_GetSTMState(pMCI))
 8002108:	4638      	mov	r0, r7
 800210a:	f7ff f8c9 	bl	80012a0 <MCI_GetSTMState>
 800210e:	2800      	cmp	r0, #0
 8002110:	d045      	beq.n	800219e <MCP_ReceivedPacket+0x17e>
          (void)MCI_StopMotor(pMCI);
 8002112:	4638      	mov	r0, r7
 8002114:	f7ff f902 	bl	800131c <MCI_StopMotor>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8002118:	89e3      	ldrh	r3, [r4, #14]
          MCPResponse = MCP_CMD_OK;
 800211a:	2000      	movs	r0, #0
 800211c:	e7cc      	b.n	80020b8 <MCP_ReceivedPacket+0x98>
        if (RUN == MCI_GetSTMState(pMCI))
 800211e:	4638      	mov	r0, r7
 8002120:	f7ff f8be 	bl	80012a0 <MCI_GetSTMState>
 8002124:	2806      	cmp	r0, #6
 8002126:	d1f7      	bne.n	8002118 <MCP_ReceivedPacket+0xf8>
          MCI_StopRamp(pMCI);
 8002128:	4638      	mov	r0, r7
 800212a:	f7ff f941 	bl	80013b0 <MCI_StopRamp>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 800212e:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8002130:	2000      	movs	r0, #0
 8002132:	e7c1      	b.n	80020b8 <MCP_ReceivedPacket+0x98>
        (void)MCI_FaultAcknowledged(pMCI);
 8002134:	4638      	mov	r0, r7
 8002136:	f7ff f913 	bl	8001360 <MCI_FaultAcknowledged>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 800213a:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 800213c:	2000      	movs	r0, #0
        break;
 800213e:	e7bb      	b.n	80020b8 <MCP_ReceivedPacket+0x98>
        *pHandle->txBuffer = MCP_VERSION;
 8002140:	68a3      	ldr	r3, [r4, #8]
        pHandle->txLength = 4U;
 8002142:	2104      	movs	r1, #4
        *pHandle->txBuffer = MCP_VERSION;
 8002144:	2201      	movs	r2, #1
        pHandle->txLength = 4U;
 8002146:	81e1      	strh	r1, [r4, #14]
        *pHandle->txBuffer = MCP_VERSION;
 8002148:	701a      	strb	r2, [r3, #0]
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 800214a:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 800214c:	2000      	movs	r0, #0
        break;
 800214e:	e7b3      	b.n	80020b8 <MCP_ReceivedPacket+0x98>
        MCPResponse = RI_SetRegCommandParser(pHandle, (uint16_t)txSyncFreeSpace);
 8002150:	4620      	mov	r0, r4
 8002152:	f7ff feb5 	bl	8001ec0 <RI_SetRegCommandParser>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8002156:	89e3      	ldrh	r3, [r4, #14]
        break;
 8002158:	e7ae      	b.n	80020b8 <MCP_ReceivedPacket+0x98>
        MCPResponse = RI_GetRegCommandParser(pHandle, (uint16_t)txSyncFreeSpace);
 800215a:	4620      	mov	r0, r4
 800215c:	f7ff ff16 	bl	8001f8c <RI_GetRegCommandParser>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8002160:	89e3      	ldrh	r3, [r4, #14]
        break;
 8002162:	e7a9      	b.n	80020b8 <MCP_ReceivedPacket+0x98>
        MCPResponse = (MCI_StartWithPolarizationMotor(pMCI) == false) ? MCP_CMD_OK : MCP_CMD_NOK;
 8002164:	4638      	mov	r0, r7
 8002166:	f7ff f8bf 	bl	80012e8 <MCI_StartWithPolarizationMotor>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 800216a:	89e3      	ldrh	r3, [r4, #14]
 800216c:	e7a4      	b.n	80020b8 <MCP_ReceivedPacket+0x98>
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 800216e:	3a01      	subs	r2, #1
 8002170:	b212      	sxth	r2, r2
        if ((userCommand < MCP_USER_CALLBACK_MAX) && (MCP_UserCallBack[userCommand] != NULL))
 8002172:	4b11      	ldr	r3, [pc, #68]	; (80021b8 <MCP_ReceivedPacket+0x198>)
 8002174:	f853 602c 	ldr.w	r6, [r3, ip, lsl #2]
 8002178:	2e00      	cmp	r6, #0
 800217a:	d0c2      	beq.n	8002102 <MCP_ReceivedPacket+0xe2>
          MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace,
 800217c:	68a3      	ldr	r3, [r4, #8]
 800217e:	9300      	str	r3, [sp, #0]
 8002180:	4629      	mov	r1, r5
 8002182:	f104 030e 	add.w	r3, r4, #14
 8002186:	47b0      	blx	r6
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8002188:	89e3      	ldrh	r3, [r4, #14]
          MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace,
 800218a:	e795      	b.n	80020b8 <MCP_ReceivedPacket+0x98>
        MCPResponse = MC_ProfilerCommand(pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace, &pHandle->txLength,
 800218c:	68a3      	ldr	r3, [r4, #8]
 800218e:	9300      	str	r3, [sp, #0]
 8002190:	4629      	mov	r1, r5
 8002192:	f104 030e 	add.w	r3, r4, #14
 8002196:	f7fe ffd3 	bl	8001140 <MC_ProfilerCommand>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 800219a:	89e3      	ldrh	r3, [r4, #14]
        break;
 800219c:	e78c      	b.n	80020b8 <MCP_ReceivedPacket+0x98>
          MCPResponse = (MCI_StartWithPolarizationMotor(pMCI) == true) ? MCP_CMD_OK : MCP_CMD_NOK;
 800219e:	4638      	mov	r0, r7
 80021a0:	f7ff f8a2 	bl	80012e8 <MCI_StartWithPolarizationMotor>
 80021a4:	f080 0001 	eor.w	r0, r0, #1
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80021a8:	89e3      	ldrh	r3, [r4, #14]
          MCPResponse = (MCI_StartWithPolarizationMotor(pMCI) == true) ? MCP_CMD_OK : MCP_CMD_NOK;
 80021aa:	b2c0      	uxtb	r0, r0
 80021ac:	e784      	b.n	80020b8 <MCP_ReceivedPacket+0x98>
    switch (command)
 80021ae:	46b4      	mov	ip, r6
 80021b0:	e7df      	b.n	8002172 <MCP_ReceivedPacket+0x152>
 80021b2:	bf00      	nop
 80021b4:	200006e0 	.word	0x200006e0
 80021b8:	2000186c 	.word	0x2000186c

080021bc <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 80021bc:	b508      	push	{r3, lr}
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  (void)HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / SYS_TICK_FREQUENCY);
 80021be:	f003 fdd1 	bl	8005d64 <HAL_RCC_GetHCLKFreq>
 80021c2:	4b0a      	ldr	r3, [pc, #40]	; (80021ec <MX_MotorControl_Init+0x30>)
 80021c4:	fba3 3000 	umull	r3, r0, r3, r0
 80021c8:	09c0      	lsrs	r0, r0, #7
 80021ca:	f003 f815 	bl	80051f8 <HAL_SYSTICK_Config>
  HAL_NVIC_SetPriority(SysTick_IRQn, uwTickPrio, 0U);
 80021ce:	4b08      	ldr	r3, [pc, #32]	; (80021f0 <MX_MotorControl_Init+0x34>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	6819      	ldr	r1, [r3, #0]
 80021d4:	f04f 30ff 	mov.w	r0, #4294967295
 80021d8:	f002 ffc2 	bl	8005160 <HAL_NVIC_SetPriority>

  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI);
 80021dc:	4805      	ldr	r0, [pc, #20]	; (80021f4 <MX_MotorControl_Init+0x38>)
 80021de:	f7ff fa45 	bl	800166c <MCboot>
  mc_lock_pins();
}
 80021e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  mc_lock_pins();
 80021e6:	f7ff bdeb 	b.w	8001dc0 <mc_lock_pins>
 80021ea:	bf00      	nop
 80021ec:	10624dd3 	.word	0x10624dd3
 80021f0:	20000444 	.word	0x20000444
 80021f4:	200018dc 	.word	0x200018dc

080021f8 <PWMC_GetPhaseCurrents>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctGetPhaseCurrents(pHandle, Iab);
 80021f8:	6803      	ldr	r3, [r0, #0]
 80021fa:	4718      	bx	r3

080021fc <PWMC_SetPhaseVoltage>:
  * @param  Valfa_beta: Voltage Components expressed in the @f$(\alpha, \beta)@f$ reference frame.
  * @retval #MC_NO_ERROR if no error occurred or #MC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage(PWMC_Handle_t *pHandle, alphabeta_t Valfa_beta)
{
 80021fc:	b530      	push	{r4, r5, lr}
    int32_t wTimePhA;
    int32_t wTimePhB;
    int32_t wTimePhC;

    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 80021fe:	f8b0 e072 	ldrh.w	lr, [r0, #114]	; 0x72
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 8002202:	f8b0 204e 	ldrh.w	r2, [r0, #78]	; 0x4e
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8002206:	ea4f 4c21 	mov.w	ip, r1, asr #16
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 800220a:	b20b      	sxth	r3, r1
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 800220c:	fb0e fc0c 	mul.w	ip, lr, ip
 8002210:	ebcc 7ccc 	rsb	ip, ip, ip, lsl #31
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 8002214:	fb02 f303 	mul.w	r3, r2, r3
{
 8002218:	b083      	sub	sp, #12

    wX = wUBeta;
    wY = (wUBeta + wUAlpha) / 2;
 800221a:	eb03 024c 	add.w	r2, r3, ip, lsl #1
    wZ = (wUBeta - wUAlpha) / 2;
 800221e:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
{
 8002222:	9101      	str	r1, [sp, #4]
    wZ = (wUBeta - wUAlpha) / 2;
 8002224:	eb03 74d3 	add.w	r4, r3, r3, lsr #31
    wY = (wUBeta + wUAlpha) / 2;
 8002228:	eb02 71d2 	add.w	r1, r2, r2, lsr #31

    /* Sector calculation from wX, wY, wZ */
    if (wY < 0)
 800222c:	1c55      	adds	r5, r2, #1
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 800222e:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    wY = (wUBeta + wUAlpha) / 2;
 8002232:	ea4f 0161 	mov.w	r1, r1, asr #1
    wZ = (wUBeta - wUAlpha) / 2;
 8002236:	ea4f 0464 	mov.w	r4, r4, asr #1
    if (wY < 0)
 800223a:	f2c0 809c 	blt.w	8002376 <PWMC_SetPhaseVoltage+0x17a>
        }
        }
    }
    else /* wY > 0 */
    {
      if (wZ >= 0)
 800223e:	1c5d      	adds	r5, r3, #1
 8002240:	db65      	blt.n	800230e <PWMC_SetPhaseVoltage+0x112>
      {
        pHandle->Sector = SECTOR_2;
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8002242:	1b09      	subs	r1, r1, r4
 8002244:	bf44      	itt	mi
 8002246:	f501 317f 	addmi.w	r1, r1, #261120	; 0x3fc00
 800224a:	f201 31ff 	addwmi	r1, r1, #1023	; 0x3ff
        wTimePhB = wTimePhA + (wZ / 131072);
 800224e:	2b00      	cmp	r3, #0
 8002250:	bfbc      	itt	lt
 8002252:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
 8002256:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
        wTimePhC = wTimePhA - (wY / 131072);
 800225a:	2a00      	cmp	r2, #0
 800225c:	bfb8      	it	lt
 800225e:	f502 327f 	addlt.w	r2, r2, #261120	; 0x3fc00
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8002262:	ea4f 0e9e 	mov.w	lr, lr, lsr #2

        if(true == pHandle->SingleShuntTopology)
 8002266:	f890 4087 	ldrb.w	r4, [r0, #135]	; 0x87
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 800226a:	eb0e 41a1 	add.w	r1, lr, r1, asr #18
        pHandle->Sector = SECTOR_2;
 800226e:	f04f 0c01 	mov.w	ip, #1
        wTimePhC = wTimePhA - (wY / 131072);
 8002272:	bfb8      	it	lt
 8002274:	f202 32ff 	addwlt	r2, r2, #1023	; 0x3ff
        pHandle->Sector = SECTOR_2;
 8002278:	f880 c07c 	strb.w	ip, [r0, #124]	; 0x7c
        wTimePhB = wTimePhA + (wZ / 131072);
 800227c:	eb01 43a3 	add.w	r3, r1, r3, asr #18
        wTimePhC = wTimePhA - (wY / 131072);
 8002280:	eba1 42a2 	sub.w	r2, r1, r2, asr #18
        if(true == pHandle->SingleShuntTopology)
 8002284:	2c00      	cmp	r4, #0
 8002286:	f040 80a0 	bne.w	80023ca <PWMC_SetPhaseVoltage+0x1ce>
          pHandle->midDuty = 0U;
          pHandle->highDuty = 1U;
        }
        else
        {
        pHandle->lowDuty = (uint16_t)wTimePhB;
 800228a:	fa1f fe83 	uxth.w	lr, r3
        pHandle->midDuty = (uint16_t)wTimePhA;
 800228e:	fa1f fc81 	uxth.w	ip, r1
        pHandle->highDuty = (uint16_t)wTimePhC;
 8002292:	b294      	uxth	r4, r2
          pHandle->highDuty = (uint16_t)wTimePhA;
 8002294:	f8a0 405c 	strh.w	r4, [r0, #92]	; 0x5c

    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));

    if (1U == pHandle->DTTest)
 8002298:	f8b0 4070 	ldrh.w	r4, [r0, #112]	; 0x70
          pHandle->lowDuty = (uint16_t)wTimePhC;
 800229c:	f8a0 e058 	strh.w	lr, [r0, #88]	; 0x58
 80022a0:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 80022a4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80022a8:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 80022ac:	b289      	uxth	r1, r1
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	b292      	uxth	r2, r2
    if (1U == pHandle->DTTest)
 80022b2:	2c01      	cmp	r4, #1
          pHandle->midDuty = (uint16_t)wTimePhB;
 80022b4:	f8a0 c05a 	strh.w	ip, [r0, #90]	; 0x5a
    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
 80022b8:	f8a0 1050 	strh.w	r1, [r0, #80]	; 0x50
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 80022bc:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));
 80022c0:	f8a0 2054 	strh.w	r2, [r0, #84]	; 0x54
    if (1U == pHandle->DTTest)
 80022c4:	d11e      	bne.n	8002304 <PWMC_SetPhaseVoltage+0x108>
    {
      /* Dead time compensation */
      if (pHandle->Ia > 0)
 80022c6:	f9b0 4062 	ldrsh.w	r4, [r0, #98]	; 0x62
 80022ca:	2c00      	cmp	r4, #0
      {
        pHandle->CntPhA += pHandle->DTCompCnt;
 80022cc:	f8b0 4074 	ldrh.w	r4, [r0, #116]	; 0x74
 80022d0:	bfcc      	ite	gt
 80022d2:	1909      	addgt	r1, r1, r4
      }
      else
      {
        pHandle->CntPhA -= pHandle->DTCompCnt;
 80022d4:	1b09      	suble	r1, r1, r4
 80022d6:	b289      	uxth	r1, r1
 80022d8:	f8a0 1050 	strh.w	r1, [r0, #80]	; 0x50
      }

      if (pHandle->Ib > 0)
 80022dc:	f9b0 1064 	ldrsh.w	r1, [r0, #100]	; 0x64
 80022e0:	2900      	cmp	r1, #0
      else
      {
        pHandle->CntPhB -= pHandle->DTCompCnt;
      }

      if (pHandle->Ic > 0)
 80022e2:	f9b0 1066 	ldrsh.w	r1, [r0, #102]	; 0x66
        pHandle->CntPhB += pHandle->DTCompCnt;
 80022e6:	bfcc      	ite	gt
 80022e8:	191b      	addgt	r3, r3, r4
        pHandle->CntPhB -= pHandle->DTCompCnt;
 80022ea:	1b1b      	suble	r3, r3, r4
      if (pHandle->Ic > 0)
 80022ec:	2900      	cmp	r1, #0
        pHandle->CntPhB -= pHandle->DTCompCnt;
 80022ee:	b29b      	uxth	r3, r3
      {
        pHandle->CntPhC += pHandle->DTCompCnt;
 80022f0:	bfcc      	ite	gt
 80022f2:	18a4      	addgt	r4, r4, r2
      }
      else
      {
        pHandle->CntPhC -= pHandle->DTCompCnt;
 80022f4:	1b12      	suble	r2, r2, r4
 80022f6:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
        pHandle->CntPhC += pHandle->DTCompCnt;
 80022fa:	bfcc      	ite	gt
 80022fc:	f8a0 4054 	strhgt.w	r4, [r0, #84]	; 0x54
        pHandle->CntPhC -= pHandle->DTCompCnt;
 8002300:	f8a0 2054 	strhle.w	r2, [r0, #84]	; 0x54
      }
    }
    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 8002304:	6943      	ldr	r3, [r0, #20]
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (returnValue);
}
 8002306:	b003      	add	sp, #12
 8002308:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 800230c:	4718      	bx	r3
        if ( wX <= 0 )
 800230e:	f1bc 0f00 	cmp.w	ip, #0
 8002312:	f340 808c 	ble.w	800242e <PWMC_SetPhaseVoltage+0x232>
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 8002316:	ebbc 0404 	subs.w	r4, ip, r4
 800231a:	bf44      	itt	mi
 800231c:	f504 347f 	addmi.w	r4, r4, #261120	; 0x3fc00
 8002320:	f204 34ff 	addwmi	r4, r4, #1023	; 0x3ff
          wTimePhB = wTimePhA + (wZ / 131072);
 8002324:	2b00      	cmp	r3, #0
 8002326:	bfbc      	itt	lt
 8002328:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
 800232c:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 8002330:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
          wTimePhC = wTimePhB - (wX / 131072);
 8002334:	f1bc 0f00 	cmp.w	ip, #0
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 8002338:	eb0e 41a4 	add.w	r1, lr, r4, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 800233c:	bfb8      	it	lt
 800233e:	f50c 3cff 	addlt.w	ip, ip, #130560	; 0x1fe00
          if((pHandle->DPWM_Mode == true) || (pHandle->SingleShuntTopology == true))
 8002342:	f890 407f 	ldrb.w	r4, [r0, #127]	; 0x7f
          pHandle->Sector = SECTOR_1;
 8002346:	f04f 0200 	mov.w	r2, #0
          wTimePhB = wTimePhA + (wZ / 131072);
 800234a:	eb01 43a3 	add.w	r3, r1, r3, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 800234e:	bfb8      	it	lt
 8002350:	f20c 1cff 	addwlt	ip, ip, #511	; 0x1ff
          pHandle->Sector = SECTOR_1;
 8002354:	f880 207c 	strb.w	r2, [r0, #124]	; 0x7c
          wTimePhC = wTimePhB - (wX / 131072);
 8002358:	eba3 426c 	sub.w	r2, r3, ip, asr #17
          if((pHandle->DPWM_Mode == true) || (pHandle->SingleShuntTopology == true))
 800235c:	2c00      	cmp	r4, #0
 800235e:	f040 80c6 	bne.w	80024ee <PWMC_SetPhaseVoltage+0x2f2>
 8002362:	f890 5087 	ldrb.w	r5, [r0, #135]	; 0x87
 8002366:	2d00      	cmp	r5, #0
 8002368:	f000 80d3 	beq.w	8002512 <PWMC_SetPhaseVoltage+0x316>
 800236c:	f04f 0e02 	mov.w	lr, #2
 8002370:	f04f 0c01 	mov.w	ip, #1
 8002374:	e78e      	b.n	8002294 <PWMC_SetPhaseVoltage+0x98>
      if (wZ < 0)
 8002376:	1c5d      	adds	r5, r3, #1
 8002378:	f2c0 8085 	blt.w	8002486 <PWMC_SetPhaseVoltage+0x28a>
        if (wX <= 0)
 800237c:	f1bc 0f00 	cmp.w	ip, #0
 8002380:	dd29      	ble.n	80023d6 <PWMC_SetPhaseVoltage+0x1da>
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 8002382:	ebb1 010c 	subs.w	r1, r1, ip
 8002386:	bf44      	itt	mi
 8002388:	f501 317f 	addmi.w	r1, r1, #261120	; 0x3fc00
 800238c:	f201 31ff 	addwmi	r1, r1, #1023	; 0x3ff
          wTimePhC = wTimePhA - (wY / 131072);
 8002390:	2a00      	cmp	r2, #0
 8002392:	bfb8      	it	lt
 8002394:	f502 327f 	addlt.w	r2, r2, #261120	; 0x3fc00
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 8002398:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
 800239c:	eb0e 41a1 	add.w	r1, lr, r1, asr #18
          wTimePhC = wTimePhA - (wY / 131072);
 80023a0:	bfb8      	it	lt
 80023a2:	f202 32ff 	addwlt	r2, r2, #1023	; 0x3ff
          if(true == pHandle->SingleShuntTopology)
 80023a6:	f890 4087 	ldrb.w	r4, [r0, #135]	; 0x87
          pHandle->Sector = SECTOR_3;
 80023aa:	2302      	movs	r3, #2
          wTimePhC = wTimePhA - (wY / 131072);
 80023ac:	eba1 42a2 	sub.w	r2, r1, r2, asr #18
          pHandle->Sector = SECTOR_3;
 80023b0:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
          wTimePhB = wTimePhC + (wX / 131072);
 80023b4:	eb02 436c 	add.w	r3, r2, ip, asr #17
          if(true == pHandle->SingleShuntTopology)
 80023b8:	2c00      	cmp	r4, #0
 80023ba:	f040 8092 	bne.w	80024e2 <PWMC_SetPhaseVoltage+0x2e6>
          pHandle->lowDuty = (uint16_t)wTimePhB;
 80023be:	fa1f fe83 	uxth.w	lr, r3
          pHandle->midDuty = (uint16_t)wTimePhC;
 80023c2:	fa1f fc82 	uxth.w	ip, r2
          pHandle->highDuty = (uint16_t)wTimePhA;
 80023c6:	b28c      	uxth	r4, r1
 80023c8:	e764      	b.n	8002294 <PWMC_SetPhaseVoltage+0x98>
 80023ca:	f04f 0e02 	mov.w	lr, #2
 80023ce:	f04f 0c00 	mov.w	ip, #0
 80023d2:	2401      	movs	r4, #1
 80023d4:	e75e      	b.n	8002294 <PWMC_SetPhaseVoltage+0x98>
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 80023d6:	ebbc 0404 	subs.w	r4, ip, r4
 80023da:	bf44      	itt	mi
 80023dc:	f504 347f 	addmi.w	r4, r4, #261120	; 0x3fc00
 80023e0:	f204 34ff 	addwmi	r4, r4, #1023	; 0x3ff
          wTimePhB = wTimePhA + (wZ / 131072);
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	bfb8      	it	lt
 80023e8:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
          pHandle->Sector = SECTOR_4;
 80023ec:	f04f 0203 	mov.w	r2, #3
          wTimePhB = wTimePhA + (wZ / 131072);
 80023f0:	bfb8      	it	lt
 80023f2:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
          pHandle->Sector = SECTOR_4;
 80023f6:	f880 207c 	strb.w	r2, [r0, #124]	; 0x7c
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 80023fa:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
          wTimePhC = wTimePhB - (wX / 131072);
 80023fe:	f1bc 0200 	subs.w	r2, ip, #0
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 8002402:	eb0e 41a4 	add.w	r1, lr, r4, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 8002406:	bfb8      	it	lt
 8002408:	f502 32ff 	addlt.w	r2, r2, #130560	; 0x1fe00
          if(true == pHandle->SingleShuntTopology)
 800240c:	f890 4087 	ldrb.w	r4, [r0, #135]	; 0x87
          wTimePhB = wTimePhA + (wZ / 131072);
 8002410:	eb01 43a3 	add.w	r3, r1, r3, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 8002414:	bfb8      	it	lt
 8002416:	f202 12ff 	addwlt	r2, r2, #511	; 0x1ff
 800241a:	eba3 4262 	sub.w	r2, r3, r2, asr #17
          if(true == pHandle->SingleShuntTopology)
 800241e:	2c00      	cmp	r4, #0
 8002420:	d071      	beq.n	8002506 <PWMC_SetPhaseVoltage+0x30a>
 8002422:	f04f 0e00 	mov.w	lr, #0
 8002426:	f04f 0c01 	mov.w	ip, #1
 800242a:	2402      	movs	r4, #2
 800242c:	e732      	b.n	8002294 <PWMC_SetPhaseVoltage+0x98>
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 800242e:	ebb1 010c 	subs.w	r1, r1, ip
 8002432:	bf44      	itt	mi
 8002434:	f501 317f 	addmi.w	r1, r1, #261120	; 0x3fc00
 8002438:	f201 31ff 	addwmi	r1, r1, #1023	; 0x3ff
          wTimePhC = wTimePhA - (wY / 131072);
 800243c:	2a00      	cmp	r2, #0
 800243e:	bfb8      	it	lt
 8002440:	f502 327f 	addlt.w	r2, r2, #261120	; 0x3fc00
          pHandle->Sector = SECTOR_6;
 8002444:	f04f 0305 	mov.w	r3, #5
          wTimePhC = wTimePhA - (wY / 131072);
 8002448:	bfb8      	it	lt
 800244a:	f202 32ff 	addwlt	r2, r2, #1023	; 0x3ff
          pHandle->Sector = SECTOR_6;
 800244e:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 8002452:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
          wTimePhB = wTimePhC + (wX / 131072);
 8002456:	f1bc 0300 	subs.w	r3, ip, #0
 800245a:	bfb8      	it	lt
 800245c:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 8002460:	eb0e 41a1 	add.w	r1, lr, r1, asr #18
          if(true == pHandle->SingleShuntTopology)
 8002464:	f890 4087 	ldrb.w	r4, [r0, #135]	; 0x87
          wTimePhC = wTimePhA - (wY / 131072);
 8002468:	eba1 42a2 	sub.w	r2, r1, r2, asr #18
          wTimePhB = wTimePhC + (wX / 131072);
 800246c:	bfb8      	it	lt
 800246e:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 8002472:	eb02 4363 	add.w	r3, r2, r3, asr #17
          if(true == pHandle->SingleShuntTopology)
 8002476:	2c00      	cmp	r4, #0
 8002478:	d03f      	beq.n	80024fa <PWMC_SetPhaseVoltage+0x2fe>
 800247a:	f04f 0e01 	mov.w	lr, #1
 800247e:	f04f 0c02 	mov.w	ip, #2
 8002482:	2400      	movs	r4, #0
 8002484:	e706      	b.n	8002294 <PWMC_SetPhaseVoltage+0x98>
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8002486:	1b09      	subs	r1, r1, r4
 8002488:	bf44      	itt	mi
 800248a:	f501 317f 	addmi.w	r1, r1, #261120	; 0x3fc00
 800248e:	f201 31ff 	addwmi	r1, r1, #1023	; 0x3ff
        wTimePhB = wTimePhA + (wZ / 131072);
 8002492:	2b00      	cmp	r3, #0
 8002494:	bfbc      	itt	lt
 8002496:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
 800249a:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
        wTimePhC = wTimePhA - (wY / 131072) ;
 800249e:	2a00      	cmp	r2, #0
 80024a0:	bfb8      	it	lt
 80024a2:	f502 327f 	addlt.w	r2, r2, #261120	; 0x3fc00
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 80024a6:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
        if(true == pHandle->SingleShuntTopology)
 80024aa:	f890 4087 	ldrb.w	r4, [r0, #135]	; 0x87
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 80024ae:	eb0e 41a1 	add.w	r1, lr, r1, asr #18
        pHandle->Sector = SECTOR_5;
 80024b2:	f04f 0c04 	mov.w	ip, #4
        wTimePhC = wTimePhA - (wY / 131072) ;
 80024b6:	bfb8      	it	lt
 80024b8:	f202 32ff 	addwlt	r2, r2, #1023	; 0x3ff
        pHandle->Sector = SECTOR_5;
 80024bc:	f880 c07c 	strb.w	ip, [r0, #124]	; 0x7c
        wTimePhB = wTimePhA + (wZ / 131072);
 80024c0:	eb01 43a3 	add.w	r3, r1, r3, asr #18
        wTimePhC = wTimePhA - (wY / 131072) ;
 80024c4:	eba1 42a2 	sub.w	r2, r1, r2, asr #18
        if(true == pHandle->SingleShuntTopology)
 80024c8:	b92c      	cbnz	r4, 80024d6 <PWMC_SetPhaseVoltage+0x2da>
          pHandle->lowDuty = (uint16_t)wTimePhC;
 80024ca:	fa1f fe82 	uxth.w	lr, r2
          pHandle->midDuty = (uint16_t)wTimePhA;
 80024ce:	fa1f fc81 	uxth.w	ip, r1
          pHandle->highDuty = (uint16_t)wTimePhB;
 80024d2:	b29c      	uxth	r4, r3
 80024d4:	e6de      	b.n	8002294 <PWMC_SetPhaseVoltage+0x98>
 80024d6:	f04f 0e01 	mov.w	lr, #1
 80024da:	f04f 0c00 	mov.w	ip, #0
 80024de:	2402      	movs	r4, #2
 80024e0:	e6d8      	b.n	8002294 <PWMC_SetPhaseVoltage+0x98>
 80024e2:	f04f 0e00 	mov.w	lr, #0
 80024e6:	f04f 0c02 	mov.w	ip, #2
 80024ea:	2401      	movs	r4, #1
 80024ec:	e6d2      	b.n	8002294 <PWMC_SetPhaseVoltage+0x98>
 80024ee:	f04f 0e02 	mov.w	lr, #2
 80024f2:	f04f 0c01 	mov.w	ip, #1
 80024f6:	2400      	movs	r4, #0
 80024f8:	e6cc      	b.n	8002294 <PWMC_SetPhaseVoltage+0x98>
            pHandle->lowDuty = (uint16_t)wTimePhA;
 80024fa:	fa1f fe81 	uxth.w	lr, r1
            pHandle->midDuty = (uint16_t)wTimePhC;
 80024fe:	fa1f fc82 	uxth.w	ip, r2
            pHandle->highDuty = (uint16_t)wTimePhB;
 8002502:	b29c      	uxth	r4, r3
 8002504:	e6c6      	b.n	8002294 <PWMC_SetPhaseVoltage+0x98>
          pHandle->lowDuty = (uint16_t)wTimePhC;
 8002506:	fa1f fe82 	uxth.w	lr, r2
          pHandle->midDuty = (uint16_t)wTimePhB;
 800250a:	fa1f fc83 	uxth.w	ip, r3
          pHandle->highDuty = (uint16_t)wTimePhA;
 800250e:	b28c      	uxth	r4, r1
 8002510:	e6c0      	b.n	8002294 <PWMC_SetPhaseVoltage+0x98>
            pHandle->lowDuty = (uint16_t)wTimePhA;
 8002512:	fa1f fe81 	uxth.w	lr, r1
            pHandle->midDuty = (uint16_t)wTimePhB;
 8002516:	fa1f fc83 	uxth.w	ip, r3
            pHandle->highDuty = (uint16_t)wTimePhC;
 800251a:	b294      	uxth	r4, r2
 800251c:	e6ba      	b.n	8002294 <PWMC_SetPhaseVoltage+0x98>
 800251e:	bf00      	nop

08002520 <PWMC_SwitchOffPWM>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOffPwm(pHandle);
 8002520:	6843      	ldr	r3, [r0, #4]
 8002522:	4718      	bx	r3

08002524 <PWMC_SwitchOnPWM>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOnPwm(pHandle);
 8002524:	6883      	ldr	r3, [r0, #8]
 8002526:	4718      	bx	r3

08002528 <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, **false** if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr(PWMC_Handle_t *pHandle, CRCAction_t action)
{
 8002528:	b510      	push	{r4, lr}
 800252a:	4604      	mov	r4, r0
 800252c:	b082      	sub	sp, #8
    /* Nothing to do */
  }
  else
  {
#endif
    if (CRC_START == action)
 800252e:	b199      	cbz	r1, 8002558 <PWMC_CurrentReadingCalibr+0x30>
    {
      PWMC_SwitchOffPWM(pHandle);
      pHandle->pFctCurrReadingCalib(pHandle);
      retVal = true;
    }
    else if (CRC_EXEC == action)
 8002530:	2901      	cmp	r1, #1
 8002532:	d002      	beq.n	800253a <PWMC_CurrentReadingCalibr+0x12>
  bool retVal = false;
 8002534:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (retVal);
}
 8002536:	b002      	add	sp, #8
 8002538:	bd10      	pop	{r4, pc}
      if (pHandle->OffCalibrWaitTimeCounter > 0u)
 800253a:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 800253e:	b19b      	cbz	r3, 8002568 <PWMC_CurrentReadingCalibr+0x40>
        pHandle->OffCalibrWaitTimeCounter--;
 8002540:	3b01      	subs	r3, #1
 8002542:	b29b      	uxth	r3, r3
 8002544:	9101      	str	r1, [sp, #4]
 8002546:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
        if (0U == pHandle->OffCalibrWaitTimeCounter)
 800254a:	2b00      	cmp	r3, #0
 800254c:	d1f2      	bne.n	8002534 <PWMC_CurrentReadingCalibr+0xc>
          pHandle->pFctCurrReadingCalib(pHandle);
 800254e:	68c3      	ldr	r3, [r0, #12]
 8002550:	4798      	blx	r3
          retVal = true;
 8002552:	9901      	ldr	r1, [sp, #4]
 8002554:	4608      	mov	r0, r1
 8002556:	e7ee      	b.n	8002536 <PWMC_CurrentReadingCalibr+0xe>
      PWMC_SwitchOffPWM(pHandle);
 8002558:	f7ff ffe2 	bl	8002520 <PWMC_SwitchOffPWM>
      pHandle->pFctCurrReadingCalib(pHandle);
 800255c:	4620      	mov	r0, r4
 800255e:	68e3      	ldr	r3, [r4, #12]
 8002560:	4798      	blx	r3
      retVal = true;
 8002562:	2001      	movs	r0, #1
}
 8002564:	b002      	add	sp, #8
 8002566:	bd10      	pop	{r4, pc}
        retVal = true;
 8002568:	4608      	mov	r0, r1
}
 800256a:	b002      	add	sp, #8
 800256c:	bd10      	pop	{r4, pc}
 800256e:	bf00      	nop

08002570 <PWMC_OVP_Handler>:
    tempPointer = MC_NULL;
  }
  else
  {
#endif
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8002570:	6c4a      	ldr	r2, [r1, #68]	; 0x44
{
 8002572:	4603      	mov	r3, r0
    pHandle->OverVoltageFlag = true;
 8002574:	f04f 0c01 	mov.w	ip, #1
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8002578:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800257c:	644a      	str	r2, [r1, #68]	; 0x44
    tempPointer = &(pHandle->Motor);
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (tempPointer);
}
 800257e:	307a      	adds	r0, #122	; 0x7a
    pHandle->OverVoltageFlag = true;
 8002580:	f883 c083 	strb.w	ip, [r3, #131]	; 0x83
    pHandle->BrakeActionLock = true;
 8002584:	f883 c085 	strb.w	ip, [r3, #133]	; 0x85
}
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop

0800258c <PWMC_IsFaultOccurred>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  * @retval uint16_t Returns #MC_OVER_CURR if an overcurrent has been
  *                  detected since last method call, #MC_NO_FAULTS otherwise.
  */
__weak uint16_t PWMC_IsFaultOccurred(PWMC_Handle_t *pHandle)
{
 800258c:	4603      	mov	r3, r0
  uint16_t retVal = MC_NO_FAULTS;

  if (true == pHandle->OverVoltageFlag)
 800258e:	f890 0083 	ldrb.w	r0, [r0, #131]	; 0x83
 8002592:	b1a8      	cbz	r0, 80025c0 <PWMC_IsFaultOccurred+0x34>
  {
    retVal = MC_OVER_VOLT;
    pHandle->OverVoltageFlag = false;
 8002594:	2200      	movs	r2, #0
 8002596:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
 800259a:	2142      	movs	r1, #66	; 0x42
    retVal = MC_OVER_VOLT;
 800259c:	2002      	movs	r0, #2
  else
  {
    /* Nothing to do */
  }

  if (true == pHandle->OverCurrentFlag)
 800259e:	f893 2082 	ldrb.w	r2, [r3, #130]	; 0x82
 80025a2:	b11a      	cbz	r2, 80025ac <PWMC_IsFaultOccurred+0x20>
  {
    retVal |= MC_OVER_CURR;
    pHandle->OverCurrentFlag = false;
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
    retVal |= MC_OVER_CURR;
 80025aa:	4608      	mov	r0, r1
  else
  {
    /* Nothing to do */
  }

  if (true == pHandle->driverProtectionFlag)
 80025ac:	f893 2084 	ldrb.w	r2, [r3, #132]	; 0x84
 80025b0:	b12a      	cbz	r2, 80025be <PWMC_IsFaultOccurred+0x32>
  {
    retVal |= MC_DP_FAULT;
 80025b2:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    pHandle->driverProtectionFlag = false;
 80025b6:	2200      	movs	r2, #0
    retVal |= MC_DP_FAULT;
 80025b8:	b280      	uxth	r0, r0
    pHandle->driverProtectionFlag = false;
 80025ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
  {
    /* Nothing to do */
  }

  return (retVal);
}
 80025be:	4770      	bx	lr
 80025c0:	2140      	movs	r1, #64	; 0x40
 80025c2:	e7ec      	b.n	800259e <PWMC_IsFaultOccurred+0x12>

080025c4 <RI_SetRegisterGlobal>:
#include "mcp_config.h"
#include "mcpa.h"
#include "mc_configuration_registers.h"

uint8_t RI_SetRegisterGlobal(uint16_t regID, uint8_t typeID, uint8_t *data, uint16_t *size, int16_t dataAvailable)
{
 80025c4:	b510      	push	{r4, lr}
  uint8_t retVal = MCP_CMD_OK;
  switch(typeID)
 80025c6:	3908      	subs	r1, #8
{
 80025c8:	f9bd c008 	ldrsh.w	ip, [sp, #8]
  switch(typeID)
 80025cc:	2920      	cmp	r1, #32
 80025ce:	d812      	bhi.n	80025f6 <RI_SetRegisterGlobal+0x32>
 80025d0:	e8df f001 	tbb	[pc, r1]
 80025d4:	11111115 	.word	0x11111115
 80025d8:	11111111 	.word	0x11111111
 80025dc:	1111111d 	.word	0x1111111d
 80025e0:	11111111 	.word	0x11111111
 80025e4:	1111112d 	.word	0x1111112d
 80025e8:	11111111 	.word	0x11111111
 80025ec:	11111135 	.word	0x11111135
 80025f0:	11111111 	.word	0x11111111
 80025f4:	4c          	.byte	0x4c
 80025f5:	00          	.byte	0x00
    }

    default:
    {
      retVal = MCP_ERROR_BAD_DATA_TYPE;
      *size =0; /* From this point we are not able anymore to decode the RX buffer */
 80025f6:	2200      	movs	r2, #0
 80025f8:	801a      	strh	r2, [r3, #0]
      retVal = MCP_ERROR_BAD_DATA_TYPE;
 80025fa:	2007      	movs	r0, #7
      break;
    }
  }
  return (retVal);
}
 80025fc:	bd10      	pop	{r4, pc}
          retVal = MCP_ERROR_UNKNOWN_REG;
 80025fe:	2848      	cmp	r0, #72	; 0x48
      *size = 1;
 8002600:	f04f 0201 	mov.w	r2, #1
          retVal = MCP_ERROR_UNKNOWN_REG;
 8002604:	bf0c      	ite	eq
 8002606:	2004      	moveq	r0, #4
 8002608:	2005      	movne	r0, #5
      *size = 1;
 800260a:	801a      	strh	r2, [r3, #0]
}
 800260c:	bd10      	pop	{r4, pc}
      switch (regID)
 800260e:	f5b0 6f65 	cmp.w	r0, #3664	; 0xe50
 8002612:	d04e      	beq.n	80026b2 <RI_SetRegisterGlobal+0xee>
 8002614:	d93c      	bls.n	8002690 <RI_SetRegisterGlobal+0xcc>
 8002616:	f5b0 6f69 	cmp.w	r0, #3728	; 0xe90
 800261a:	d04a      	beq.n	80026b2 <RI_SetRegisterGlobal+0xee>
 800261c:	f641 3258 	movw	r2, #7000	; 0x1b58
 8002620:	4290      	cmp	r0, r2
 8002622:	bf14      	ite	ne
 8002624:	2005      	movne	r0, #5
 8002626:	2004      	moveq	r0, #4
      *size = 2;
 8002628:	2202      	movs	r2, #2
 800262a:	801a      	strh	r2, [r3, #0]
}
 800262c:	bd10      	pop	{r4, pc}
          retVal = MCP_ERROR_UNKNOWN_REG;
 800262e:	2818      	cmp	r0, #24
      *size = 4;
 8002630:	f04f 0204 	mov.w	r2, #4
          retVal = MCP_ERROR_UNKNOWN_REG;
 8002634:	bf0c      	ite	eq
 8002636:	4610      	moveq	r0, r2
 8002638:	2005      	movne	r0, #5
      *size = 4;
 800263a:	801a      	strh	r2, [r3, #0]
}
 800263c:	bd10      	pop	{r4, pc}
uint8_t RI_MovString(const char_t *srcString, char_t *destString, uint16_t *size, int16_t maxSize)
{
  uint8_t retVal = MCP_CMD_OK;
  const char_t *tempsrcString = srcString;
  char_t *tempdestString = destString;
  *size= 1U ; /* /0 is the min String size */
 800263e:	2101      	movs	r1, #1
 8002640:	8019      	strh	r1, [r3, #0]

  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002642:	f992 0000 	ldrsb.w	r0, [r2]
 8002646:	b358      	cbz	r0, 80026a0 <RI_SetRegisterGlobal+0xdc>
 8002648:	fa1f fc8c 	uxth.w	ip, ip
 800264c:	1850      	adds	r0, r2, r1
 800264e:	e004      	b.n	800265a <RI_SetRegisterGlobal+0x96>
  {
    *tempdestString = *tempsrcString;
    tempdestString++;
    tempsrcString++;
    *size = *size + 1U;
 8002650:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002652:	f992 4000 	ldrsb.w	r4, [r2]
 8002656:	3001      	adds	r0, #1
 8002658:	b314      	cbz	r4, 80026a0 <RI_SetRegisterGlobal+0xdc>
    *size = *size + 1U;
 800265a:	f101 0e01 	add.w	lr, r1, #1
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 800265e:	4561      	cmp	r1, ip
    tempdestString++;
 8002660:	4602      	mov	r2, r0
    *size = *size + 1U;
 8002662:	fa1f f18e 	uxth.w	r1, lr
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002666:	d3f3      	bcc.n	8002650 <RI_SetRegisterGlobal+0x8c>
      retVal = MCP_ERROR_RO_REG;
 8002668:	2004      	movs	r0, #4
}
 800266a:	bd10      	pop	{r4, pc}
      *size = rawSize + 2U;
 800266c:	8812      	ldrh	r2, [r2, #0]
 800266e:	3202      	adds	r2, #2
 8002670:	b292      	uxth	r2, r2
      if (*size > (uint16_t)dataAvailable)
 8002672:	fa1f fc8c 	uxth.w	ip, ip
 8002676:	4562      	cmp	r2, ip
      *size = rawSize + 2U;
 8002678:	801a      	strh	r2, [r3, #0]
      if (*size > (uint16_t)dataAvailable)
 800267a:	d81c      	bhi.n	80026b6 <RI_SetRegisterGlobal+0xf2>
        switch (regID)
 800267c:	28a8      	cmp	r0, #168	; 0xa8
 800267e:	d0f3      	beq.n	8002668 <RI_SetRegisterGlobal+0xa4>
 8002680:	d812      	bhi.n	80026a8 <RI_SetRegisterGlobal+0xe4>
 8002682:	f020 0040 	bic.w	r0, r0, #64	; 0x40
            retVal = MCP_ERROR_RO_REG;
 8002686:	2828      	cmp	r0, #40	; 0x28
 8002688:	bf14      	ite	ne
 800268a:	2005      	movne	r0, #5
 800268c:	2004      	moveq	r0, #4
}
 800268e:	bd10      	pop	{r4, pc}
 8002690:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8002694:	f5b0 6fb2 	cmp.w	r0, #1424	; 0x590
 8002698:	bf14      	ite	ne
 800269a:	2005      	movne	r0, #5
 800269c:	2004      	moveq	r0, #4
 800269e:	e7c3      	b.n	8002628 <RI_SetRegisterGlobal+0x64>
  { /* Last string char must be 0 */
    retVal = MCP_ERROR_STRING_FORMAT;
  }
  else
  {
    *tempdestString = (int8_t)0;
 80026a0:	2300      	movs	r3, #0
 80026a2:	7013      	strb	r3, [r2, #0]
      retVal = MCP_ERROR_RO_REG;
 80026a4:	2004      	movs	r0, #4
  return (retVal);
 80026a6:	e7e0      	b.n	800266a <RI_SetRegisterGlobal+0xa6>
            retVal = MCP_ERROR_RO_REG;
 80026a8:	28e8      	cmp	r0, #232	; 0xe8
 80026aa:	bf14      	ite	ne
 80026ac:	2005      	movne	r0, #5
 80026ae:	2004      	moveq	r0, #4
}
 80026b0:	bd10      	pop	{r4, pc}
  uint8_t retVal = MCP_CMD_OK;
 80026b2:	2000      	movs	r0, #0
 80026b4:	e7b8      	b.n	8002628 <RI_SetRegisterGlobal+0x64>
        *size = 0;
 80026b6:	2200      	movs	r2, #0
 80026b8:	801a      	strh	r2, [r3, #0]
        retVal = MCP_ERROR_BAD_RAW_FORMAT; /* This error stop the parsing of the CMD buffer */
 80026ba:	200a      	movs	r0, #10
}
 80026bc:	bd10      	pop	{r4, pc}
 80026be:	bf00      	nop

080026c0 <RI_SetRegisterMotor1>:
{
 80026c0:	b510      	push	{r4, lr}
 80026c2:	b084      	sub	sp, #16
  switch(typeID)
 80026c4:	3908      	subs	r1, #8
{
 80026c6:	f9bd e018 	ldrsh.w	lr, [sp, #24]
 80026ca:	4694      	mov	ip, r2
 80026cc:	461c      	mov	r4, r3
  switch(typeID)
 80026ce:	2920      	cmp	r1, #32
 80026d0:	d812      	bhi.n	80026f8 <RI_SetRegisterMotor1+0x38>
 80026d2:	e8df f001 	tbb	[pc, r1]
 80026d6:	1116      	.short	0x1116
 80026d8:	11111111 	.word	0x11111111
 80026dc:	11281111 	.word	0x11281111
 80026e0:	11111111 	.word	0x11111111
 80026e4:	114e1111 	.word	0x114e1111
 80026e8:	11111111 	.word	0x11111111
 80026ec:	115c1111 	.word	0x115c1111
 80026f0:	11111111 	.word	0x11111111
 80026f4:	1111      	.short	0x1111
 80026f6:	77          	.byte	0x77
 80026f7:	00          	.byte	0x00
      *size =0; /* From this point we are not able anymore to decode the RX buffer */
 80026f8:	2300      	movs	r3, #0
 80026fa:	8023      	strh	r3, [r4, #0]
      retVal = MCP_ERROR_BAD_DATA_TYPE;
 80026fc:	2007      	movs	r0, #7
}
 80026fe:	b004      	add	sp, #16
 8002700:	bd10      	pop	{r4, pc}
      switch (regID)
 8002702:	2888      	cmp	r0, #136	; 0x88
 8002704:	f000 81b1 	beq.w	8002a6a <RI_SetRegisterMotor1+0x3aa>
 8002708:	f240 808b 	bls.w	8002822 <RI_SetRegisterMotor1+0x162>
 800270c:	f5b0 6fa9 	cmp.w	r0, #1352	; 0x548
 8002710:	f000 81bc 	beq.w	8002a8c <RI_SetRegisterMotor1+0x3cc>
            retVal = MCP_ERROR_RO_REG;
 8002714:	f5b0 6fb1 	cmp.w	r0, #1416	; 0x588
 8002718:	bf14      	ite	ne
 800271a:	2005      	movne	r0, #5
 800271c:	2004      	moveq	r0, #4
      *size = 1;
 800271e:	2301      	movs	r3, #1
 8002720:	8023      	strh	r3, [r4, #0]
}
 8002722:	b004      	add	sp, #16
 8002724:	bd10      	pop	{r4, pc}
      uint16_t regdata16 = *(uint16_t *)data; //cstat !MISRAC2012-Rule-11.3
 8002726:	f241 3390 	movw	r3, #5008	; 0x1390
 800272a:	4298      	cmp	r0, r3
 800272c:	8811      	ldrh	r1, [r2, #0]
      switch (regID)
 800272e:	f000 81ee 	beq.w	8002b0e <RI_SetRegisterMotor1+0x44e>
 8002732:	f200 808e 	bhi.w	8002852 <RI_SetRegisterMotor1+0x192>
 8002736:	f5b0 7f34 	cmp.w	r0, #720	; 0x2d0
 800273a:	f000 8213 	beq.w	8002b64 <RI_SetRegisterMotor1+0x4a4>
 800273e:	d975      	bls.n	800282c <RI_SetRegisterMotor1+0x16c>
 8002740:	f5b0 6f15 	cmp.w	r0, #2384	; 0x950
 8002744:	f000 8200 	beq.w	8002b48 <RI_SetRegisterMotor1+0x488>
 8002748:	d95d      	bls.n	8002806 <RI_SetRegisterMotor1+0x146>
 800274a:	f5b0 6f29 	cmp.w	r0, #2704	; 0xa90
 800274e:	d066      	beq.n	800281e <RI_SetRegisterMotor1+0x15e>
 8002750:	f240 80b5 	bls.w	80028be <RI_SetRegisterMotor1+0x1fe>
 8002754:	f5b0 6f65 	cmp.w	r0, #3664	; 0xe50
 8002758:	f000 8177 	beq.w	8002a4a <RI_SetRegisterMotor1+0x38a>
 800275c:	f240 80a6 	bls.w	80028ac <RI_SetRegisterMotor1+0x1ec>
  uint8_t retVal = MCP_CMD_OK;
 8002760:	f5b0 6f69 	cmp.w	r0, #3728	; 0xe90
 8002764:	bf14      	ite	ne
 8002766:	2005      	movne	r0, #5
 8002768:	2000      	moveq	r0, #0
      *size = 2;
 800276a:	2302      	movs	r3, #2
 800276c:	8023      	strh	r3, [r4, #0]
}
 800276e:	b004      	add	sp, #16
 8002770:	bd10      	pop	{r4, pc}
      switch (regID)
 8002772:	2858      	cmp	r0, #88	; 0x58
 8002774:	f000 818c 	beq.w	8002a90 <RI_SetRegisterMotor1+0x3d0>
 8002778:	2898      	cmp	r0, #152	; 0x98
 800277a:	f000 8168 	beq.w	8002a4e <RI_SetRegisterMotor1+0x38e>
          retVal = MCP_ERROR_RO_REG;
 800277e:	2818      	cmp	r0, #24
 8002780:	bf14      	ite	ne
 8002782:	2005      	movne	r0, #5
 8002784:	2004      	moveq	r0, #4
      *size = 4;
 8002786:	2304      	movs	r3, #4
 8002788:	8023      	strh	r3, [r4, #0]
}
 800278a:	b004      	add	sp, #16
 800278c:	bd10      	pop	{r4, pc}
  *size= 1U ; /* /0 is the min String size */
 800278e:	2201      	movs	r2, #1
 8002790:	8022      	strh	r2, [r4, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002792:	f99c 3000 	ldrsb.w	r3, [ip]
 8002796:	2b00      	cmp	r3, #0
 8002798:	f000 8139 	beq.w	8002a0e <RI_SetRegisterMotor1+0x34e>
 800279c:	fa1f f18e 	uxth.w	r1, lr
 80027a0:	eb0c 0302 	add.w	r3, ip, r2
 80027a4:	e006      	b.n	80027b4 <RI_SetRegisterMotor1+0xf4>
    *size = *size + 1U;
 80027a6:	8022      	strh	r2, [r4, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80027a8:	f99c 0000 	ldrsb.w	r0, [ip]
 80027ac:	3301      	adds	r3, #1
 80027ae:	2800      	cmp	r0, #0
 80027b0:	f000 812d 	beq.w	8002a0e <RI_SetRegisterMotor1+0x34e>
    *size = *size + 1U;
 80027b4:	1c50      	adds	r0, r2, #1
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80027b6:	428a      	cmp	r2, r1
    tempdestString++;
 80027b8:	469c      	mov	ip, r3
    *size = *size + 1U;
 80027ba:	b282      	uxth	r2, r0
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80027bc:	d3f3      	bcc.n	80027a6 <RI_SetRegisterMotor1+0xe6>
      retVal = MCP_ERROR_RO_REG;
 80027be:	2004      	movs	r0, #4
}
 80027c0:	b004      	add	sp, #16
 80027c2:	bd10      	pop	{r4, pc}
      *size = rawSize + 2U;
 80027c4:	8813      	ldrh	r3, [r2, #0]
 80027c6:	3302      	adds	r3, #2
 80027c8:	b29b      	uxth	r3, r3
      if (*size > (uint16_t)dataAvailable)
 80027ca:	fa1f f18e 	uxth.w	r1, lr
 80027ce:	428b      	cmp	r3, r1
      *size = rawSize + 2U;
 80027d0:	8023      	strh	r3, [r4, #0]
      if (*size > (uint16_t)dataAvailable)
 80027d2:	f200 8136 	bhi.w	8002a42 <RI_SetRegisterMotor1+0x382>
        switch (regID)
 80027d6:	f5b0 7f5a 	cmp.w	r0, #872	; 0x368
 80027da:	f000 8179 	beq.w	8002ad0 <RI_SetRegisterMotor1+0x410>
 80027de:	f200 811b 	bhi.w	8002a18 <RI_SetRegisterMotor1+0x358>
 80027e2:	f5b0 7fd4 	cmp.w	r0, #424	; 0x1a8
 80027e6:	f000 8165 	beq.w	8002ab4 <RI_SetRegisterMotor1+0x3f4>
 80027ea:	f240 8106 	bls.w	80029fa <RI_SetRegisterMotor1+0x33a>
 80027ee:	f5b0 7ff4 	cmp.w	r0, #488	; 0x1e8
 80027f2:	f040 814f 	bne.w	8002a94 <RI_SetRegisterMotor1+0x3d4>
            MCI_ExecTorqueRamp(pMCIN, (int16_t)torque, duration);
 80027f6:	48a8      	ldr	r0, [pc, #672]	; (8002a98 <RI_SetRegisterMotor1+0x3d8>)
 80027f8:	88d2      	ldrh	r2, [r2, #6]
 80027fa:	f9bc 1002 	ldrsh.w	r1, [ip, #2]
 80027fe:	f7fe fcbd 	bl	800117c <MCI_ExecTorqueRamp>
  uint8_t retVal = MCP_CMD_OK;
 8002802:	2000      	movs	r0, #0
            break;
 8002804:	e77b      	b.n	80026fe <RI_SetRegisterMotor1+0x3e>
 8002806:	f5b0 6fba 	cmp.w	r0, #1488	; 0x5d0
 800280a:	d008      	beq.n	800281e <RI_SetRegisterMotor1+0x15e>
 800280c:	f240 8089 	bls.w	8002922 <RI_SetRegisterMotor1+0x262>
 8002810:	f5b0 6f05 	cmp.w	r0, #2128	; 0x850
 8002814:	d003      	beq.n	800281e <RI_SetRegisterMotor1+0x15e>
 8002816:	d979      	bls.n	800290c <RI_SetRegisterMotor1+0x24c>
 8002818:	f5b0 6f11 	cmp.w	r0, #2320	; 0x910
 800281c:	d16e      	bne.n	80028fc <RI_SetRegisterMotor1+0x23c>
 800281e:	2004      	movs	r0, #4
 8002820:	e7a3      	b.n	800276a <RI_SetRegisterMotor1+0xaa>
            retVal = MCP_ERROR_RO_REG;
 8002822:	2848      	cmp	r0, #72	; 0x48
 8002824:	bf14      	ite	ne
 8002826:	2005      	movne	r0, #5
 8002828:	2004      	moveq	r0, #4
 800282a:	e778      	b.n	800271e <RI_SetRegisterMotor1+0x5e>
 800282c:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
 8002830:	f000 8184 	beq.w	8002b3c <RI_SetRegisterMotor1+0x47c>
 8002834:	f240 8084 	bls.w	8002940 <RI_SetRegisterMotor1+0x280>
 8002838:	f5b0 7f04 	cmp.w	r0, #528	; 0x210
 800283c:	f000 8173 	beq.w	8002b26 <RI_SetRegisterMotor1+0x466>
 8002840:	f5b0 7f24 	cmp.w	r0, #656	; 0x290
 8002844:	d120      	bne.n	8002888 <RI_SetRegisterMotor1+0x1c8>
          PID_SetKP(&PIDIdHandle_M1, (int16_t)regdata16);
 8002846:	4895      	ldr	r0, [pc, #596]	; (8002a9c <RI_SetRegisterMotor1+0x3dc>)
 8002848:	b209      	sxth	r1, r1
 800284a:	f005 f961 	bl	8007b10 <PID_SetKP>
  uint8_t retVal = MCP_CMD_OK;
 800284e:	2000      	movs	r0, #0
          break;
 8002850:	e78b      	b.n	800276a <RI_SetRegisterMotor1+0xaa>
 8002852:	f241 5390 	movw	r3, #5520	; 0x1590
 8002856:	4298      	cmp	r0, r3
 8002858:	f000 816b 	beq.w	8002b32 <RI_SetRegisterMotor1+0x472>
 800285c:	f200 808a 	bhi.w	8002974 <RI_SetRegisterMotor1+0x2b4>
 8002860:	f241 4390 	movw	r3, #5264	; 0x1490
 8002864:	4298      	cmp	r0, r3
 8002866:	f000 8188 	beq.w	8002b7a <RI_SetRegisterMotor1+0x4ba>
 800286a:	d975      	bls.n	8002958 <RI_SetRegisterMotor1+0x298>
 800286c:	f241 5310 	movw	r3, #5392	; 0x1510
 8002870:	4298      	cmp	r0, r3
 8002872:	f000 8187 	beq.w	8002b84 <RI_SetRegisterMotor1+0x4c4>
 8002876:	f241 5350 	movw	r3, #5456	; 0x1550
 800287a:	4298      	cmp	r0, r3
 800287c:	d10d      	bne.n	800289a <RI_SetRegisterMotor1+0x1da>
          PID_SetKIDivisorPOW2(&PIDIdHandle_M1, regdata16);
 800287e:	4887      	ldr	r0, [pc, #540]	; (8002a9c <RI_SetRegisterMotor1+0x3dc>)
 8002880:	f005 f962 	bl	8007b48 <PID_SetKIDivisorPOW2>
  uint8_t retVal = MCP_CMD_OK;
 8002884:	2000      	movs	r0, #0
          break;
 8002886:	e770      	b.n	800276a <RI_SetRegisterMotor1+0xaa>
 8002888:	f5b0 7fe8 	cmp.w	r0, #464	; 0x1d0
 800288c:	d129      	bne.n	80028e2 <RI_SetRegisterMotor1+0x222>
          PID_SetKI(&PIDIqHandle_M1, (int16_t)regdata16);
 800288e:	4884      	ldr	r0, [pc, #528]	; (8002aa0 <RI_SetRegisterMotor1+0x3e0>)
 8002890:	b209      	sxth	r1, r1
 8002892:	f005 f93f 	bl	8007b14 <PID_SetKI>
  uint8_t retVal = MCP_CMD_OK;
 8002896:	2000      	movs	r0, #0
          break;
 8002898:	e767      	b.n	800276a <RI_SetRegisterMotor1+0xaa>
 800289a:	f241 43d0 	movw	r3, #5328	; 0x14d0
 800289e:	4298      	cmp	r0, r3
 80028a0:	d11f      	bne.n	80028e2 <RI_SetRegisterMotor1+0x222>
          PID_SetKDDivisorPOW2(&PIDSpeedHandle_M1, regdata16);
 80028a2:	4880      	ldr	r0, [pc, #512]	; (8002aa4 <RI_SetRegisterMotor1+0x3e4>)
 80028a4:	f005 f96c 	bl	8007b80 <PID_SetKDDivisorPOW2>
  uint8_t retVal = MCP_CMD_OK;
 80028a8:	2000      	movs	r0, #0
          break;
 80028aa:	e75e      	b.n	800276a <RI_SetRegisterMotor1+0xaa>
 80028ac:	f5b0 6f2d 	cmp.w	r0, #2768	; 0xad0
 80028b0:	d0b5      	beq.n	800281e <RI_SetRegisterMotor1+0x15e>
 80028b2:	f5b0 6f31 	cmp.w	r0, #2832	; 0xb10
 80028b6:	bf14      	ite	ne
 80028b8:	2005      	movne	r0, #5
 80028ba:	2004      	moveq	r0, #4
 80028bc:	e755      	b.n	800276a <RI_SetRegisterMotor1+0xaa>
 80028be:	f5b0 6f19 	cmp.w	r0, #2448	; 0x990
 80028c2:	d10d      	bne.n	80028e0 <RI_SetRegisterMotor1+0x220>
          currComp = MCI_GetIqdref(pMCIN);
 80028c4:	4874      	ldr	r0, [pc, #464]	; (8002a98 <RI_SetRegisterMotor1+0x3d8>)
 80028c6:	9101      	str	r1, [sp, #4]
 80028c8:	f7fe fdac 	bl	8001424 <MCI_GetIqdref>
          currComp.d = (int16_t)regdata16;
 80028cc:	9901      	ldr	r1, [sp, #4]
          currComp = MCI_GetIqdref(pMCIN);
 80028ce:	9003      	str	r0, [sp, #12]
          currComp.d = (int16_t)regdata16;
 80028d0:	f8ad 100e 	strh.w	r1, [sp, #14]
          MCI_SetCurrentReferences(pMCIN,currComp);
 80028d4:	4870      	ldr	r0, [pc, #448]	; (8002a98 <RI_SetRegisterMotor1+0x3d8>)
 80028d6:	9903      	ldr	r1, [sp, #12]
 80028d8:	f7fe fc5a 	bl	8001190 <MCI_SetCurrentReferences>
  uint8_t retVal = MCP_CMD_OK;
 80028dc:	2000      	movs	r0, #0
 80028de:	e744      	b.n	800276a <RI_SetRegisterMotor1+0xaa>
 80028e0:	d201      	bcs.n	80028e6 <RI_SetRegisterMotor1+0x226>
          retVal = MCP_ERROR_UNKNOWN_REG;
 80028e2:	2005      	movs	r0, #5
 80028e4:	e741      	b.n	800276a <RI_SetRegisterMotor1+0xaa>
 80028e6:	f020 0340 	bic.w	r3, r0, #64	; 0x40
 80028ea:	f5b3 6f21 	cmp.w	r3, #2576	; 0xa10
 80028ee:	d096      	beq.n	800281e <RI_SetRegisterMotor1+0x15e>
 80028f0:	f5b0 6f1d 	cmp.w	r0, #2512	; 0x9d0
 80028f4:	bf14      	ite	ne
 80028f6:	2005      	movne	r0, #5
 80028f8:	2004      	moveq	r0, #4
 80028fa:	e736      	b.n	800276a <RI_SetRegisterMotor1+0xaa>
 80028fc:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8002900:	f5b0 6f09 	cmp.w	r0, #2192	; 0x890
 8002904:	bf14      	ite	ne
 8002906:	2005      	movne	r0, #5
 8002908:	2004      	moveq	r0, #4
 800290a:	e72e      	b.n	800276a <RI_SetRegisterMotor1+0xaa>
 800290c:	f5b0 6f01 	cmp.w	r0, #2064	; 0x810
 8002910:	d085      	beq.n	800281e <RI_SetRegisterMotor1+0x15e>
 8002912:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8002916:	f5b0 6ff2 	cmp.w	r0, #1936	; 0x790
 800291a:	bf14      	ite	ne
 800291c:	2005      	movne	r0, #5
 800291e:	2004      	moveq	r0, #4
 8002920:	e723      	b.n	800276a <RI_SetRegisterMotor1+0xaa>
 8002922:	f5b0 7f44 	cmp.w	r0, #784	; 0x310
 8002926:	d105      	bne.n	8002934 <RI_SetRegisterMotor1+0x274>
          PID_SetKD(&PIDIdHandle_M1, (int16_t)regdata16);
 8002928:	485c      	ldr	r0, [pc, #368]	; (8002a9c <RI_SetRegisterMotor1+0x3dc>)
 800292a:	b209      	sxth	r1, r1
 800292c:	f005 f920 	bl	8007b70 <PID_SetKD>
  uint8_t retVal = MCP_CMD_OK;
 8002930:	2000      	movs	r0, #0
          break;
 8002932:	e71a      	b.n	800276a <RI_SetRegisterMotor1+0xaa>
 8002934:	f5b0 6fb2 	cmp.w	r0, #1424	; 0x590
 8002938:	bf14      	ite	ne
 800293a:	2005      	movne	r0, #5
 800293c:	2004      	moveq	r0, #4
 800293e:	e714      	b.n	800276a <RI_SetRegisterMotor1+0xaa>
 8002940:	28d0      	cmp	r0, #208	; 0xd0
 8002942:	f000 8129 	beq.w	8002b98 <RI_SetRegisterMotor1+0x4d8>
 8002946:	f5b0 7f88 	cmp.w	r0, #272	; 0x110
 800294a:	d144      	bne.n	80029d6 <RI_SetRegisterMotor1+0x316>
          PID_SetKD(&PIDSpeedHandle_M1, (int16_t)regdata16);
 800294c:	4855      	ldr	r0, [pc, #340]	; (8002aa4 <RI_SetRegisterMotor1+0x3e4>)
 800294e:	b209      	sxth	r1, r1
 8002950:	f005 f90e 	bl	8007b70 <PID_SetKD>
  uint8_t retVal = MCP_CMD_OK;
 8002954:	2000      	movs	r0, #0
          break;
 8002956:	e708      	b.n	800276a <RI_SetRegisterMotor1+0xaa>
 8002958:	f241 4310 	movw	r3, #5136	; 0x1410
 800295c:	4298      	cmp	r0, r3
 800295e:	f000 80dc 	beq.w	8002b1a <RI_SetRegisterMotor1+0x45a>
 8002962:	f241 4350 	movw	r3, #5200	; 0x1450
 8002966:	4298      	cmp	r0, r3
 8002968:	d11d      	bne.n	80029a6 <RI_SetRegisterMotor1+0x2e6>
          PID_SetKPDivisorPOW2(&PIDSpeedHandle_M1, regdata16);
 800296a:	484e      	ldr	r0, [pc, #312]	; (8002aa4 <RI_SetRegisterMotor1+0x3e4>)
 800296c:	f005 f8e0 	bl	8007b30 <PID_SetKPDivisorPOW2>
  uint8_t retVal = MCP_CMD_OK;
 8002970:	2000      	movs	r0, #0
          break;
 8002972:	e6fa      	b.n	800276a <RI_SetRegisterMotor1+0xaa>
 8002974:	f241 6390 	movw	r3, #5776	; 0x1690
 8002978:	4298      	cmp	r0, r3
 800297a:	f000 80f9 	beq.w	8002b70 <RI_SetRegisterMotor1+0x4b0>
 800297e:	d91c      	bls.n	80029ba <RI_SetRegisterMotor1+0x2fa>
 8002980:	f241 7310 	movw	r3, #5904	; 0x1710
 8002984:	4298      	cmp	r0, r3
 8002986:	f000 810d 	beq.w	8002ba4 <RI_SetRegisterMotor1+0x4e4>
 800298a:	f641 3358 	movw	r3, #7000	; 0x1b58
 800298e:	4298      	cmp	r0, r3
 8002990:	f43f af45 	beq.w	800281e <RI_SetRegisterMotor1+0x15e>
 8002994:	f241 63d0 	movw	r3, #5840	; 0x16d0
 8002998:	4298      	cmp	r0, r3
 800299a:	d1a2      	bne.n	80028e2 <RI_SetRegisterMotor1+0x222>
          PID_SetKIDivisorPOW2(&PID_PosParamsM1, regdata16);
 800299c:	4842      	ldr	r0, [pc, #264]	; (8002aa8 <RI_SetRegisterMotor1+0x3e8>)
 800299e:	f005 f8d3 	bl	8007b48 <PID_SetKIDivisorPOW2>
  uint8_t retVal = MCP_CMD_OK;
 80029a2:	2000      	movs	r0, #0
          break;
 80029a4:	e6e1      	b.n	800276a <RI_SetRegisterMotor1+0xaa>
 80029a6:	f241 33d0 	movw	r3, #5072	; 0x13d0
 80029aa:	4298      	cmp	r0, r3
 80029ac:	d199      	bne.n	80028e2 <RI_SetRegisterMotor1+0x222>
          PID_SetKI(&PID_PosParamsM1, regdata16);
 80029ae:	483e      	ldr	r0, [pc, #248]	; (8002aa8 <RI_SetRegisterMotor1+0x3e8>)
 80029b0:	b209      	sxth	r1, r1
 80029b2:	f005 f8af 	bl	8007b14 <PID_SetKI>
  uint8_t retVal = MCP_CMD_OK;
 80029b6:	2000      	movs	r0, #0
          break;
 80029b8:	e6d7      	b.n	800276a <RI_SetRegisterMotor1+0xaa>
 80029ba:	f241 6310 	movw	r3, #5648	; 0x1610
 80029be:	4298      	cmp	r0, r3
 80029c0:	f000 80e5 	beq.w	8002b8e <RI_SetRegisterMotor1+0x4ce>
 80029c4:	f241 6350 	movw	r3, #5712	; 0x1650
 80029c8:	4298      	cmp	r0, r3
 80029ca:	d10c      	bne.n	80029e6 <RI_SetRegisterMotor1+0x326>
          PID_SetKDDivisorPOW2(&PIDIqHandle_M1, regdata16);
 80029cc:	4834      	ldr	r0, [pc, #208]	; (8002aa0 <RI_SetRegisterMotor1+0x3e0>)
 80029ce:	f005 f8d7 	bl	8007b80 <PID_SetKDDivisorPOW2>
  uint8_t retVal = MCP_CMD_OK;
 80029d2:	2000      	movs	r0, #0
          break;
 80029d4:	e6c9      	b.n	800276a <RI_SetRegisterMotor1+0xaa>
 80029d6:	2890      	cmp	r0, #144	; 0x90
 80029d8:	d183      	bne.n	80028e2 <RI_SetRegisterMotor1+0x222>
          PID_SetKP(&PIDSpeedHandle_M1, (int16_t)regdata16);
 80029da:	4832      	ldr	r0, [pc, #200]	; (8002aa4 <RI_SetRegisterMotor1+0x3e4>)
 80029dc:	b209      	sxth	r1, r1
 80029de:	f005 f897 	bl	8007b10 <PID_SetKP>
  uint8_t retVal = MCP_CMD_OK;
 80029e2:	2000      	movs	r0, #0
          break;
 80029e4:	e6c1      	b.n	800276a <RI_SetRegisterMotor1+0xaa>
 80029e6:	f241 53d0 	movw	r3, #5584	; 0x15d0
 80029ea:	4298      	cmp	r0, r3
 80029ec:	f47f af79 	bne.w	80028e2 <RI_SetRegisterMotor1+0x222>
          PID_SetKPDivisorPOW2(&PIDIqHandle_M1, regdata16);
 80029f0:	482b      	ldr	r0, [pc, #172]	; (8002aa0 <RI_SetRegisterMotor1+0x3e0>)
 80029f2:	f005 f89d 	bl	8007b30 <PID_SetKPDivisorPOW2>
  uint8_t retVal = MCP_CMD_OK;
 80029f6:	2000      	movs	r0, #0
          break;
 80029f8:	e6b7      	b.n	800276a <RI_SetRegisterMotor1+0xaa>
 80029fa:	28a8      	cmp	r0, #168	; 0xa8
 80029fc:	f43f aedf 	beq.w	80027be <RI_SetRegisterMotor1+0xfe>
 8002a00:	d917      	bls.n	8002a32 <RI_SetRegisterMotor1+0x372>
            retVal = MCP_ERROR_RO_REG;
 8002a02:	28e8      	cmp	r0, #232	; 0xe8
 8002a04:	bf14      	ite	ne
 8002a06:	2005      	movne	r0, #5
 8002a08:	2004      	moveq	r0, #4
}
 8002a0a:	b004      	add	sp, #16
 8002a0c:	bd10      	pop	{r4, pc}
    *tempdestString = (int8_t)0;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	f88c 3000 	strb.w	r3, [ip]
      retVal = MCP_ERROR_RO_REG;
 8002a14:	2004      	movs	r0, #4
  return (retVal);
 8002a16:	e6d3      	b.n	80027c0 <RI_SetRegisterMotor1+0x100>
 8002a18:	f5b0 7f6a 	cmp.w	r0, #936	; 0x3a8
 8002a1c:	d060      	beq.n	8002ae0 <RI_SetRegisterMotor1+0x420>
 8002a1e:	f5b0 6fa5 	cmp.w	r0, #1320	; 0x528
 8002a22:	d137      	bne.n	8002a94 <RI_SetRegisterMotor1+0x3d4>
            retVal =  MCPA_cfgLog (&MCPA_UART_A, rawData);
 8002a24:	4821      	ldr	r0, [pc, #132]	; (8002aac <RI_SetRegisterMotor1+0x3ec>)
 8002a26:	1c91      	adds	r1, r2, #2
}
 8002a28:	b004      	add	sp, #16
 8002a2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            retVal =  MCPA_cfgLog (&MCPA_UART_A, rawData);
 8002a2e:	f004 bfcf 	b.w	80079d0 <MCPA_cfgLog>
 8002a32:	f020 0040 	bic.w	r0, r0, #64	; 0x40
            retVal = MCP_ERROR_RO_REG;
 8002a36:	2828      	cmp	r0, #40	; 0x28
 8002a38:	bf14      	ite	ne
 8002a3a:	2005      	movne	r0, #5
 8002a3c:	2004      	moveq	r0, #4
}
 8002a3e:	b004      	add	sp, #16
 8002a40:	bd10      	pop	{r4, pc}
        *size = 0;
 8002a42:	2300      	movs	r3, #0
 8002a44:	8023      	strh	r3, [r4, #0]
        retVal = MCP_ERROR_BAD_RAW_FORMAT; /* This error stop the parsing of the CMD buffer */
 8002a46:	200a      	movs	r0, #10
 8002a48:	e659      	b.n	80026fe <RI_SetRegisterMotor1+0x3e>
  uint8_t retVal = MCP_CMD_OK;
 8002a4a:	2000      	movs	r0, #0
 8002a4c:	e68d      	b.n	800276a <RI_SetRegisterMotor1+0xaa>
          MCI_ExecSpeedRamp(pMCIN,((((int16_t)regdata32) * ((int16_t)SPEED_UNIT)) / (int16_t)U_RPM), 0);
 8002a4e:	f9b2 3000 	ldrsh.w	r3, [r2]
 8002a52:	4917      	ldr	r1, [pc, #92]	; (8002ab0 <RI_SetRegisterMotor1+0x3f0>)
 8002a54:	4810      	ldr	r0, [pc, #64]	; (8002a98 <RI_SetRegisterMotor1+0x3d8>)
 8002a56:	fb81 2103 	smull	r2, r1, r1, r3
 8002a5a:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8002a5e:	2200      	movs	r2, #0
 8002a60:	b209      	sxth	r1, r1
 8002a62:	f7fe fb81 	bl	8001168 <MCI_ExecSpeedRamp>
  uint8_t retVal = MCP_CMD_OK;
 8002a66:	2000      	movs	r0, #0
          break;
 8002a68:	e68d      	b.n	8002786 <RI_SetRegisterMotor1+0xc6>
          uint8_t regdata8 = *data;
 8002a6a:	7813      	ldrb	r3, [r2, #0]
          if ((uint8_t)MCM_TORQUE_MODE == regdata8)
 8002a6c:	2b04      	cmp	r3, #4
 8002a6e:	d003      	beq.n	8002a78 <RI_SetRegisterMotor1+0x3b8>
          if ((uint8_t)MCM_SPEED_MODE == regdata8)
 8002a70:	2b03      	cmp	r3, #3
 8002a72:	d042      	beq.n	8002afa <RI_SetRegisterMotor1+0x43a>
  uint8_t retVal = MCP_CMD_OK;
 8002a74:	2000      	movs	r0, #0
 8002a76:	e652      	b.n	800271e <RI_SetRegisterMotor1+0x5e>
            MCI_ExecTorqueRamp(pMCIN, MCI_GetTeref(pMCIN), 0);
 8002a78:	4807      	ldr	r0, [pc, #28]	; (8002a98 <RI_SetRegisterMotor1+0x3d8>)
 8002a7a:	f7fe fcfd 	bl	8001478 <MCI_GetTeref>
 8002a7e:	2200      	movs	r2, #0
 8002a80:	4601      	mov	r1, r0
 8002a82:	4805      	ldr	r0, [pc, #20]	; (8002a98 <RI_SetRegisterMotor1+0x3d8>)
 8002a84:	f7fe fb7a 	bl	800117c <MCI_ExecTorqueRamp>
  uint8_t retVal = MCP_CMD_OK;
 8002a88:	2000      	movs	r0, #0
 8002a8a:	e648      	b.n	800271e <RI_SetRegisterMotor1+0x5e>
            retVal = MCP_ERROR_RO_REG;
 8002a8c:	2004      	movs	r0, #4
 8002a8e:	e646      	b.n	800271e <RI_SetRegisterMotor1+0x5e>
          retVal = MCP_ERROR_RO_REG;
 8002a90:	2004      	movs	r0, #4
 8002a92:	e678      	b.n	8002786 <RI_SetRegisterMotor1+0xc6>
 8002a94:	2005      	movs	r0, #5
 8002a96:	e632      	b.n	80026fe <RI_SetRegisterMotor1+0x3e>
 8002a98:	200006e0 	.word	0x200006e0
 8002a9c:	200000bc 	.word	0x200000bc
 8002aa0:	200000e8 	.word	0x200000e8
 8002aa4:	20000114 	.word	0x20000114
 8002aa8:	20000140 	.word	0x20000140
 8002aac:	20000374 	.word	0x20000374
 8002ab0:	2aaaaaab 	.word	0x2aaaaaab
            MCI_ExecSpeedRamp(pMCIN, (int16_t)((rpm * SPEED_UNIT) / U_RPM), duration);
 8002ab4:	f8d2 1002 	ldr.w	r1, [r2, #2]
 8002ab8:	4b3d      	ldr	r3, [pc, #244]	; (8002bb0 <RI_SetRegisterMotor1+0x4f0>)
 8002aba:	88d2      	ldrh	r2, [r2, #6]
 8002abc:	fb83 0301 	smull	r0, r3, r3, r1
 8002ac0:	eba3 71e1 	sub.w	r1, r3, r1, asr #31
 8002ac4:	483b      	ldr	r0, [pc, #236]	; (8002bb4 <RI_SetRegisterMotor1+0x4f4>)
 8002ac6:	b209      	sxth	r1, r1
 8002ac8:	f7fe fb4e 	bl	8001168 <MCI_ExecSpeedRamp>
  uint8_t retVal = MCP_CMD_OK;
 8002acc:	2000      	movs	r0, #0
            break;
 8002ace:	e616      	b.n	80026fe <RI_SetRegisterMotor1+0x3e>
            currComp.q = *((int16_t *) rawData); //cstat !MISRAC2012-Rule-11.3
 8002ad0:	f8d2 1002 	ldr.w	r1, [r2, #2]
            MCI_SetCurrentReferences(pMCIN, currComp);
 8002ad4:	4837      	ldr	r0, [pc, #220]	; (8002bb4 <RI_SetRegisterMotor1+0x4f4>)
            currComp.q = *((int16_t *) rawData); //cstat !MISRAC2012-Rule-11.3
 8002ad6:	9103      	str	r1, [sp, #12]
            MCI_SetCurrentReferences(pMCIN, currComp);
 8002ad8:	f7fe fb5a 	bl	8001190 <MCI_SetCurrentReferences>
  uint8_t retVal = MCP_CMD_OK;
 8002adc:	2000      	movs	r0, #0
 8002ade:	e60e      	b.n	80026fe <RI_SetRegisterMotor1+0x3e>
            MCI_ExecPositionCommand(pMCIN, Position.Float_Val, Duration.Float_Val);
 8002ae0:	f8d2 3006 	ldr.w	r3, [r2, #6]
 8002ae4:	4833      	ldr	r0, [pc, #204]	; (8002bb4 <RI_SetRegisterMotor1+0x4f4>)
 8002ae6:	ee00 3a90 	vmov	s1, r3
 8002aea:	f8d2 3002 	ldr.w	r3, [r2, #2]
 8002aee:	ee00 3a10 	vmov	s0, r3
 8002af2:	f7fe fb57 	bl	80011a4 <MCI_ExecPositionCommand>
  uint8_t retVal = MCP_CMD_OK;
 8002af6:	2000      	movs	r0, #0
 8002af8:	e601      	b.n	80026fe <RI_SetRegisterMotor1+0x3e>
            MCI_ExecSpeedRamp(pMCIN, MCI_GetMecSpeedRefUnit(pMCIN), 0);
 8002afa:	482e      	ldr	r0, [pc, #184]	; (8002bb4 <RI_SetRegisterMotor1+0x4f4>)
 8002afc:	f7fe fc64 	bl	80013c8 <MCI_GetMecSpeedRefUnit>
 8002b00:	2200      	movs	r2, #0
 8002b02:	4601      	mov	r1, r0
 8002b04:	482b      	ldr	r0, [pc, #172]	; (8002bb4 <RI_SetRegisterMotor1+0x4f4>)
 8002b06:	f7fe fb2f 	bl	8001168 <MCI_ExecSpeedRamp>
  uint8_t retVal = MCP_CMD_OK;
 8002b0a:	2000      	movs	r0, #0
 8002b0c:	e607      	b.n	800271e <RI_SetRegisterMotor1+0x5e>
          PID_SetKP(&PID_PosParamsM1, regdata16);
 8002b0e:	482a      	ldr	r0, [pc, #168]	; (8002bb8 <RI_SetRegisterMotor1+0x4f8>)
 8002b10:	b209      	sxth	r1, r1
 8002b12:	f004 fffd 	bl	8007b10 <PID_SetKP>
  uint8_t retVal = MCP_CMD_OK;
 8002b16:	2000      	movs	r0, #0
          break;
 8002b18:	e627      	b.n	800276a <RI_SetRegisterMotor1+0xaa>
          PID_SetKD(&PID_PosParamsM1, regdata16);
 8002b1a:	4827      	ldr	r0, [pc, #156]	; (8002bb8 <RI_SetRegisterMotor1+0x4f8>)
 8002b1c:	b209      	sxth	r1, r1
 8002b1e:	f005 f827 	bl	8007b70 <PID_SetKD>
  uint8_t retVal = MCP_CMD_OK;
 8002b22:	2000      	movs	r0, #0
          break;
 8002b24:	e621      	b.n	800276a <RI_SetRegisterMotor1+0xaa>
          PID_SetKD(&PIDIqHandle_M1, (int16_t)regdata16);
 8002b26:	4825      	ldr	r0, [pc, #148]	; (8002bbc <RI_SetRegisterMotor1+0x4fc>)
 8002b28:	b209      	sxth	r1, r1
 8002b2a:	f005 f821 	bl	8007b70 <PID_SetKD>
  uint8_t retVal = MCP_CMD_OK;
 8002b2e:	2000      	movs	r0, #0
          break;
 8002b30:	e61b      	b.n	800276a <RI_SetRegisterMotor1+0xaa>
          PID_SetKDDivisorPOW2(&PIDIdHandle_M1, regdata16);
 8002b32:	4823      	ldr	r0, [pc, #140]	; (8002bc0 <RI_SetRegisterMotor1+0x500>)
 8002b34:	f005 f824 	bl	8007b80 <PID_SetKDDivisorPOW2>
  uint8_t retVal = MCP_CMD_OK;
 8002b38:	2000      	movs	r0, #0
          break;
 8002b3a:	e616      	b.n	800276a <RI_SetRegisterMotor1+0xaa>
          PID_SetKP(&PIDIqHandle_M1, (int16_t)regdata16);
 8002b3c:	481f      	ldr	r0, [pc, #124]	; (8002bbc <RI_SetRegisterMotor1+0x4fc>)
 8002b3e:	b209      	sxth	r1, r1
 8002b40:	f004 ffe6 	bl	8007b10 <PID_SetKP>
  uint8_t retVal = MCP_CMD_OK;
 8002b44:	2000      	movs	r0, #0
          break;
 8002b46:	e610      	b.n	800276a <RI_SetRegisterMotor1+0xaa>
          currComp = MCI_GetIqdref(pMCIN);
 8002b48:	481a      	ldr	r0, [pc, #104]	; (8002bb4 <RI_SetRegisterMotor1+0x4f4>)
 8002b4a:	9101      	str	r1, [sp, #4]
 8002b4c:	f7fe fc6a 	bl	8001424 <MCI_GetIqdref>
          currComp.q = (int16_t)regdata16;
 8002b50:	9901      	ldr	r1, [sp, #4]
          currComp = MCI_GetIqdref(pMCIN);
 8002b52:	9003      	str	r0, [sp, #12]
          currComp.q = (int16_t)regdata16;
 8002b54:	f8ad 100c 	strh.w	r1, [sp, #12]
          MCI_SetCurrentReferences(pMCIN,currComp);
 8002b58:	4816      	ldr	r0, [pc, #88]	; (8002bb4 <RI_SetRegisterMotor1+0x4f4>)
 8002b5a:	9903      	ldr	r1, [sp, #12]
 8002b5c:	f7fe fb18 	bl	8001190 <MCI_SetCurrentReferences>
  uint8_t retVal = MCP_CMD_OK;
 8002b60:	2000      	movs	r0, #0
 8002b62:	e602      	b.n	800276a <RI_SetRegisterMotor1+0xaa>
          PID_SetKI(&PIDIdHandle_M1, (int16_t)regdata16);
 8002b64:	4816      	ldr	r0, [pc, #88]	; (8002bc0 <RI_SetRegisterMotor1+0x500>)
 8002b66:	b209      	sxth	r1, r1
 8002b68:	f004 ffd4 	bl	8007b14 <PID_SetKI>
  uint8_t retVal = MCP_CMD_OK;
 8002b6c:	2000      	movs	r0, #0
          break;
 8002b6e:	e5fc      	b.n	800276a <RI_SetRegisterMotor1+0xaa>
          PID_SetKPDivisorPOW2(&PID_PosParamsM1, regdata16);
 8002b70:	4811      	ldr	r0, [pc, #68]	; (8002bb8 <RI_SetRegisterMotor1+0x4f8>)
 8002b72:	f004 ffdd 	bl	8007b30 <PID_SetKPDivisorPOW2>
  uint8_t retVal = MCP_CMD_OK;
 8002b76:	2000      	movs	r0, #0
          break;
 8002b78:	e5f7      	b.n	800276a <RI_SetRegisterMotor1+0xaa>
          PID_SetKIDivisorPOW2(&PIDSpeedHandle_M1, regdata16);
 8002b7a:	4812      	ldr	r0, [pc, #72]	; (8002bc4 <RI_SetRegisterMotor1+0x504>)
 8002b7c:	f004 ffe4 	bl	8007b48 <PID_SetKIDivisorPOW2>
  uint8_t retVal = MCP_CMD_OK;
 8002b80:	2000      	movs	r0, #0
          break;
 8002b82:	e5f2      	b.n	800276a <RI_SetRegisterMotor1+0xaa>
          PID_SetKPDivisorPOW2(&PIDIdHandle_M1, regdata16);
 8002b84:	480e      	ldr	r0, [pc, #56]	; (8002bc0 <RI_SetRegisterMotor1+0x500>)
 8002b86:	f004 ffd3 	bl	8007b30 <PID_SetKPDivisorPOW2>
  uint8_t retVal = MCP_CMD_OK;
 8002b8a:	2000      	movs	r0, #0
          break;
 8002b8c:	e5ed      	b.n	800276a <RI_SetRegisterMotor1+0xaa>
          PID_SetKIDivisorPOW2(&PIDIqHandle_M1, regdata16);
 8002b8e:	480b      	ldr	r0, [pc, #44]	; (8002bbc <RI_SetRegisterMotor1+0x4fc>)
 8002b90:	f004 ffda 	bl	8007b48 <PID_SetKIDivisorPOW2>
  uint8_t retVal = MCP_CMD_OK;
 8002b94:	2000      	movs	r0, #0
          break;
 8002b96:	e5e8      	b.n	800276a <RI_SetRegisterMotor1+0xaa>
          PID_SetKI(&PIDSpeedHandle_M1, (int16_t)regdata16);
 8002b98:	480a      	ldr	r0, [pc, #40]	; (8002bc4 <RI_SetRegisterMotor1+0x504>)
 8002b9a:	b209      	sxth	r1, r1
 8002b9c:	f004 ffba 	bl	8007b14 <PID_SetKI>
  uint8_t retVal = MCP_CMD_OK;
 8002ba0:	2000      	movs	r0, #0
          break;
 8002ba2:	e5e2      	b.n	800276a <RI_SetRegisterMotor1+0xaa>
          PID_SetKDDivisorPOW2(&PID_PosParamsM1, regdata16);
 8002ba4:	4804      	ldr	r0, [pc, #16]	; (8002bb8 <RI_SetRegisterMotor1+0x4f8>)
 8002ba6:	f004 ffeb 	bl	8007b80 <PID_SetKDDivisorPOW2>
  uint8_t retVal = MCP_CMD_OK;
 8002baa:	2000      	movs	r0, #0
          break;
 8002bac:	e5dd      	b.n	800276a <RI_SetRegisterMotor1+0xaa>
 8002bae:	bf00      	nop
 8002bb0:	2aaaaaab 	.word	0x2aaaaaab
 8002bb4:	200006e0 	.word	0x200006e0
 8002bb8:	20000140 	.word	0x20000140
 8002bbc:	200000e8 	.word	0x200000e8
 8002bc0:	200000bc 	.word	0x200000bc
 8002bc4:	20000114 	.word	0x20000114

08002bc8 <RI_GetRegisterGlobal>:
uint8_t RI_GetRegisterGlobal(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace){
 8002bc8:	b510      	push	{r4, lr}
    switch (typeID)
 8002bca:	f1a1 0c08 	sub.w	ip, r1, #8
uint8_t RI_GetRegisterGlobal(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace){
 8002bce:	f9bd e008 	ldrsh.w	lr, [sp, #8]
    switch (typeID)
 8002bd2:	f1bc 0f20 	cmp.w	ip, #32
 8002bd6:	d812      	bhi.n	8002bfe <RI_GetRegisterGlobal+0x36>
 8002bd8:	e8df f00c 	tbb	[pc, ip]
 8002bdc:	1111111b 	.word	0x1111111b
 8002be0:	11111111 	.word	0x11111111
 8002be4:	11111129 	.word	0x11111129
 8002be8:	11111111 	.word	0x11111111
 8002bec:	11111122 	.word	0x11111122
 8002bf0:	11111111 	.word	0x11111111
 8002bf4:	11111137 	.word	0x11111137
 8002bf8:	11111111 	.word	0x11111111
 8002bfc:	13          	.byte	0x13
 8002bfd:	00          	.byte	0x00
 8002bfe:	2007      	movs	r0, #7
}
 8002c00:	bd10      	pop	{r4, pc}
        switch (regID)
 8002c02:	2828      	cmp	r0, #40	; 0x28
 8002c04:	d02d      	beq.n	8002c62 <RI_GetRegisterGlobal+0x9a>
        *size = (*rawSize) + 2U;
 8002c06:	8812      	ldrh	r2, [r2, #0]
 8002c08:	3202      	adds	r2, #2
            retVal = MCP_ERROR_UNKNOWN_REG;
 8002c0a:	2005      	movs	r0, #5
        *size = (*rawSize) + 2U;
 8002c0c:	b292      	uxth	r2, r2
 8002c0e:	801a      	strh	r2, [r3, #0]
}
 8002c10:	bd10      	pop	{r4, pc}
        if (freeSpace > 0)
 8002c12:	f1be 0f00 	cmp.w	lr, #0
 8002c16:	dd22      	ble.n	8002c5e <RI_GetRegisterGlobal+0x96>
          *size = 1;
 8002c18:	2201      	movs	r2, #1
 8002c1a:	801a      	strh	r2, [r3, #0]
              retVal = MCP_ERROR_UNKNOWN_REG;
 8002c1c:	2005      	movs	r0, #5
}
 8002c1e:	bd10      	pop	{r4, pc}
        if (freeSpace >= 4)
 8002c20:	f1be 0f03 	cmp.w	lr, #3
 8002c24:	dd19      	ble.n	8002c5a <RI_GetRegisterGlobal+0x92>
          *size = 4;
 8002c26:	2204      	movs	r2, #4
 8002c28:	801a      	strh	r2, [r3, #0]
              retVal = MCP_ERROR_UNKNOWN_REG;
 8002c2a:	2005      	movs	r0, #5
}
 8002c2c:	bd10      	pop	{r4, pc}
        if (freeSpace >= 2)
 8002c2e:	f1be 0f01 	cmp.w	lr, #1
 8002c32:	dd12      	ble.n	8002c5a <RI_GetRegisterGlobal+0x92>
          switch (regID)
 8002c34:	f5b0 6f65 	cmp.w	r0, #3664	; 0xe50
 8002c38:	d05b      	beq.n	8002cf2 <RI_GetRegisterGlobal+0x12a>
    uint8_t retVal = MCP_CMD_OK;
 8002c3a:	f5b0 6f69 	cmp.w	r0, #3728	; 0xe90
 8002c3e:	bf14      	ite	ne
 8002c40:	2005      	movne	r0, #5
 8002c42:	2000      	moveq	r0, #0
          *size = 2;
 8002c44:	2202      	movs	r2, #2
 8002c46:	801a      	strh	r2, [r3, #0]
}
 8002c48:	bd10      	pop	{r4, pc}
        switch (regID)
 8002c4a:	2820      	cmp	r0, #32
 8002c4c:	d02d      	beq.n	8002caa <RI_GetRegisterGlobal+0xe2>
 8002c4e:	2860      	cmp	r0, #96	; 0x60
 8002c50:	d011      	beq.n	8002c76 <RI_GetRegisterGlobal+0xae>
            *size= 0 ; /* */
 8002c52:	2200      	movs	r2, #0
 8002c54:	801a      	strh	r2, [r3, #0]
            retVal = MCP_ERROR_UNKNOWN_REG;
 8002c56:	2005      	movs	r0, #5
}
 8002c58:	bd10      	pop	{r4, pc}
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002c5a:	2008      	movs	r0, #8
}
 8002c5c:	bd10      	pop	{r4, pc}
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002c5e:	4608      	mov	r0, r1
}
 8002c60:	bd10      	pop	{r4, pc}
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002c62:	fa1f fe8e 	uxth.w	lr, lr
            *rawSize = (uint16_t)sizeof(GlobalConfig_reg_t);
 8002c66:	210a      	movs	r1, #10
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002c68:	f1be 0f0b 	cmp.w	lr, #11
            *rawSize = (uint16_t)sizeof(GlobalConfig_reg_t);
 8002c6c:	8011      	strh	r1, [r2, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002c6e:	d834      	bhi.n	8002cda <RI_GetRegisterGlobal+0x112>
 8002c70:	220c      	movs	r2, #12
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002c72:	2008      	movs	r0, #8
 8002c74:	e7cb      	b.n	8002c0e <RI_GetRegisterGlobal+0x46>
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002c76:	4c20      	ldr	r4, [pc, #128]	; (8002cf8 <RI_GetRegisterGlobal+0x130>)
 8002c78:	f994 0000 	ldrsb.w	r0, [r4]
  *size= 1U ; /* /0 is the min String size */
 8002c7c:	2101      	movs	r1, #1
 8002c7e:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002c80:	b180      	cbz	r0, 8002ca4 <RI_GetRegisterGlobal+0xdc>
 8002c82:	fa1f fe8e 	uxth.w	lr, lr
  const char_t *tempsrcString = srcString;
 8002c86:	46a4      	mov	ip, r4
 8002c88:	e008      	b.n	8002c9c <RI_GetRegisterGlobal+0xd4>
    *tempdestString = *tempsrcString;
 8002c8a:	f802 0b01 	strb.w	r0, [r2], #1
    *size = *size + 1U;
 8002c8e:	8819      	ldrh	r1, [r3, #0]
 8002c90:	3101      	adds	r1, #1
 8002c92:	b289      	uxth	r1, r1
 8002c94:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002c96:	f91c 0f01 	ldrsb.w	r0, [ip, #1]!
 8002c9a:	b118      	cbz	r0, 8002ca4 <RI_GetRegisterGlobal+0xdc>
 8002c9c:	458e      	cmp	lr, r1
 8002c9e:	d8f4      	bhi.n	8002c8a <RI_GetRegisterGlobal+0xc2>
    retVal = MCP_ERROR_STRING_FORMAT;
 8002ca0:	2006      	movs	r0, #6
}
 8002ca2:	bd10      	pop	{r4, pc}
    *tempdestString = (int8_t)0;
 8002ca4:	2000      	movs	r0, #0
 8002ca6:	7010      	strb	r0, [r2, #0]
}
 8002ca8:	bd10      	pop	{r4, pc}
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002caa:	4c14      	ldr	r4, [pc, #80]	; (8002cfc <RI_GetRegisterGlobal+0x134>)
 8002cac:	f994 0000 	ldrsb.w	r0, [r4]
  *size= 1U ; /* /0 is the min String size */
 8002cb0:	2101      	movs	r1, #1
 8002cb2:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002cb4:	2800      	cmp	r0, #0
 8002cb6:	d0f5      	beq.n	8002ca4 <RI_GetRegisterGlobal+0xdc>
 8002cb8:	fa1f fe8e 	uxth.w	lr, lr
  const char_t *tempsrcString = srcString;
 8002cbc:	46a4      	mov	ip, r4
 8002cbe:	e009      	b.n	8002cd4 <RI_GetRegisterGlobal+0x10c>
    *tempdestString = *tempsrcString;
 8002cc0:	f802 0b01 	strb.w	r0, [r2], #1
    *size = *size + 1U;
 8002cc4:	8819      	ldrh	r1, [r3, #0]
 8002cc6:	3101      	adds	r1, #1
 8002cc8:	b289      	uxth	r1, r1
 8002cca:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002ccc:	f91c 0f01 	ldrsb.w	r0, [ip, #1]!
 8002cd0:	2800      	cmp	r0, #0
 8002cd2:	d0e7      	beq.n	8002ca4 <RI_GetRegisterGlobal+0xdc>
 8002cd4:	458e      	cmp	lr, r1
 8002cd6:	d8f3      	bhi.n	8002cc0 <RI_GetRegisterGlobal+0xf8>
 8002cd8:	e7e2      	b.n	8002ca0 <RI_GetRegisterGlobal+0xd8>
              (void)memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t));
 8002cda:	4909      	ldr	r1, [pc, #36]	; (8002d00 <RI_GetRegisterGlobal+0x138>)
 8002cdc:	6848      	ldr	r0, [r1, #4]
 8002cde:	680c      	ldr	r4, [r1, #0]
 8002ce0:	8909      	ldrh	r1, [r1, #8]
 8002ce2:	f8c2 0006 	str.w	r0, [r2, #6]
 8002ce6:	f8c2 4002 	str.w	r4, [r2, #2]
 8002cea:	8151      	strh	r1, [r2, #10]
    uint8_t retVal = MCP_CMD_OK;
 8002cec:	2000      	movs	r0, #0
              (void)memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t));
 8002cee:	220c      	movs	r2, #12
 8002cf0:	e78d      	b.n	8002c0e <RI_GetRegisterGlobal+0x46>
    uint8_t retVal = MCP_CMD_OK;
 8002cf2:	2000      	movs	r0, #0
 8002cf4:	e7a6      	b.n	8002c44 <RI_GetRegisterGlobal+0x7c>
 8002cf6:	bf00      	nop
 8002cf8:	08009660 	.word	0x08009660
 8002cfc:	08009670 	.word	0x08009670
 8002d00:	080096f4 	.word	0x080096f4

08002d04 <RI_GetRegisterMotor1>:
  uint8_t RI_GetRegisterMotor1(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace) {
 8002d04:	b570      	push	{r4, r5, r6, lr}
 8002d06:	b090      	sub	sp, #64	; 0x40
 8002d08:	461d      	mov	r5, r3
    switch (typeID)
 8002d0a:	f1a1 0308 	sub.w	r3, r1, #8
  uint8_t RI_GetRegisterMotor1(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace) {
 8002d0e:	f9bd c050 	ldrsh.w	ip, [sp, #80]	; 0x50
 8002d12:	4614      	mov	r4, r2
    switch (typeID)
 8002d14:	2b20      	cmp	r3, #32
 8002d16:	d812      	bhi.n	8002d3e <RI_GetRegisterMotor1+0x3a>
 8002d18:	e8df f003 	tbb	[pc, r3]
 8002d1c:	11111133 	.word	0x11111133
 8002d20:	11111111 	.word	0x11111111
 8002d24:	11111171 	.word	0x11111171
 8002d28:	11111111 	.word	0x11111111
 8002d2c:	1111114c 	.word	0x1111114c
 8002d30:	11111111 	.word	0x11111111
 8002d34:	11111167 	.word	0x11111167
 8002d38:	11111111 	.word	0x11111111
 8002d3c:	14          	.byte	0x14
 8002d3d:	00          	.byte	0x00
 8002d3e:	2007      	movs	r0, #7
  }
 8002d40:	b010      	add	sp, #64	; 0x40
 8002d42:	bd70      	pop	{r4, r5, r6, pc}
        rawData++;
 8002d44:	f5b0 7fd4 	cmp.w	r0, #424	; 0x1a8
 8002d48:	f104 0302 	add.w	r3, r4, #2
        switch (regID)
 8002d4c:	f000 82a9 	beq.w	80032a2 <RI_GetRegisterMotor1+0x59e>
 8002d50:	f200 808a 	bhi.w	8002e68 <RI_GetRegisterMotor1+0x164>
 8002d54:	28e8      	cmp	r0, #232	; 0xe8
 8002d56:	f000 829a 	beq.w	800328e <RI_GetRegisterMotor1+0x58a>
 8002d5a:	d876      	bhi.n	8002e4a <RI_GetRegisterMotor1+0x146>
 8002d5c:	2868      	cmp	r0, #104	; 0x68
 8002d5e:	f000 82b1 	beq.w	80032c4 <RI_GetRegisterMotor1+0x5c0>
 8002d62:	28a8      	cmp	r0, #168	; 0xa8
 8002d64:	f040 828e 	bne.w	8003284 <RI_GetRegisterMotor1+0x580>
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002d68:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = (uint16_t)sizeof(ApplicationConfig_reg_t);
 8002d6c:	2210      	movs	r2, #16
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002d6e:	f1bc 0f11 	cmp.w	ip, #17
            *rawSize = (uint16_t)sizeof(ApplicationConfig_reg_t);
 8002d72:	8022      	strh	r2, [r4, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002d74:	f200 8256 	bhi.w	8003224 <RI_GetRegisterMotor1+0x520>
 8002d78:	2312      	movs	r3, #18
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002d7a:	2008      	movs	r0, #8
        *size = (*rawSize) + 2U;
 8002d7c:	802b      	strh	r3, [r5, #0]
  }
 8002d7e:	b010      	add	sp, #64	; 0x40
 8002d80:	bd70      	pop	{r4, r5, r6, pc}
        if (freeSpace > 0)
 8002d82:	f1bc 0f00 	cmp.w	ip, #0
 8002d86:	f340 825a 	ble.w	800323e <RI_GetRegisterMotor1+0x53a>
          switch (regID)
 8002d8a:	f5b0 6fa9 	cmp.w	r0, #1352	; 0x548
 8002d8e:	f000 8262 	beq.w	8003256 <RI_GetRegisterMotor1+0x552>
 8002d92:	f200 8098 	bhi.w	8002ec6 <RI_GetRegisterMotor1+0x1c2>
 8002d96:	2848      	cmp	r0, #72	; 0x48
 8002d98:	f000 8257 	beq.w	800324a <RI_GetRegisterMotor1+0x546>
 8002d9c:	2888      	cmp	r0, #136	; 0x88
 8002d9e:	f040 8252 	bne.w	8003246 <RI_GetRegisterMotor1+0x542>
              *data = (uint8_t)MCI_GetControlMode(pMCIN);
 8002da2:	48b3      	ldr	r0, [pc, #716]	; (8003070 <RI_GetRegisterMotor1+0x36c>)
 8002da4:	f7fe faf6 	bl	8001394 <MCI_GetControlMode>
 8002da8:	7020      	strb	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002daa:	2000      	movs	r0, #0
          *size = 1;
 8002dac:	2301      	movs	r3, #1
 8002dae:	802b      	strh	r3, [r5, #0]
  }
 8002db0:	b010      	add	sp, #64	; 0x40
 8002db2:	bd70      	pop	{r4, r5, r6, pc}
        if (freeSpace >= 4)
 8002db4:	f1bc 0f03 	cmp.w	ip, #3
 8002db8:	f340 81f1 	ble.w	800319e <RI_GetRegisterMotor1+0x49a>
          switch (regID)
 8002dbc:	2898      	cmp	r0, #152	; 0x98
 8002dbe:	f000 828b 	beq.w	80032d8 <RI_GetRegisterMotor1+0x5d4>
 8002dc2:	f200 81d8 	bhi.w	8003176 <RI_GetRegisterMotor1+0x472>
 8002dc6:	2818      	cmp	r0, #24
 8002dc8:	f000 8298 	beq.w	80032fc <RI_GetRegisterMotor1+0x5f8>
 8002dcc:	2858      	cmp	r0, #88	; 0x58
 8002dce:	f040 8339 	bne.w	8003444 <RI_GetRegisterMotor1+0x740>
              *regdata32 = (((int32_t)MCI_GetAvrgMecSpeedUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 8002dd2:	48a7      	ldr	r0, [pc, #668]	; (8003070 <RI_GetRegisterMotor1+0x36c>)
 8002dd4:	f7fe faf0 	bl	80013b8 <MCI_GetAvrgMecSpeedUnit>
 8002dd8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002ddc:	0040      	lsls	r0, r0, #1
 8002dde:	6020      	str	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002de0:	2000      	movs	r0, #0
          *size = 4;
 8002de2:	2304      	movs	r3, #4
 8002de4:	802b      	strh	r3, [r5, #0]
  }
 8002de6:	b010      	add	sp, #64	; 0x40
 8002de8:	bd70      	pop	{r4, r5, r6, pc}
        switch (regID)
 8002dea:	28a0      	cmp	r0, #160	; 0xa0
 8002dec:	f000 81f6 	beq.w	80031dc <RI_GetRegisterMotor1+0x4d8>
 8002df0:	28e0      	cmp	r0, #224	; 0xe0
 8002df2:	f000 81d7 	beq.w	80031a4 <RI_GetRegisterMotor1+0x4a0>
            *size= 0 ; /* */
 8002df6:	2300      	movs	r3, #0
 8002df8:	802b      	strh	r3, [r5, #0]
            retVal = MCP_ERROR_UNKNOWN_REG;
 8002dfa:	2005      	movs	r0, #5
            break;
 8002dfc:	e7a0      	b.n	8002d40 <RI_GetRegisterMotor1+0x3c>
        if (freeSpace >= 2)
 8002dfe:	f1bc 0f01 	cmp.w	ip, #1
 8002e02:	f340 81cc 	ble.w	800319e <RI_GetRegisterMotor1+0x49a>
          switch (regID)
 8002e06:	f5b0 6f21 	cmp.w	r0, #2576	; 0xa10
 8002e0a:	f000 82e1 	beq.w	80033d0 <RI_GetRegisterMotor1+0x6cc>
 8002e0e:	f200 8092 	bhi.w	8002f36 <RI_GetRegisterMotor1+0x232>
 8002e12:	f5b0 6fba 	cmp.w	r0, #1488	; 0x5d0
 8002e16:	f000 82d5 	beq.w	80033c4 <RI_GetRegisterMotor1+0x6c0>
 8002e1a:	d878      	bhi.n	8002f0e <RI_GetRegisterMotor1+0x20a>
 8002e1c:	f5b0 7f04 	cmp.w	r0, #528	; 0x210
 8002e20:	f000 82ca 	beq.w	80033b8 <RI_GetRegisterMotor1+0x6b4>
 8002e24:	d963      	bls.n	8002eee <RI_GetRegisterMotor1+0x1ea>
 8002e26:	f5b0 7f44 	cmp.w	r0, #784	; 0x310
 8002e2a:	f000 82bf 	beq.w	80033ac <RI_GetRegisterMotor1+0x6a8>
 8002e2e:	d954      	bls.n	8002eda <RI_GetRegisterMotor1+0x1d6>
 8002e30:	f5b0 6fb2 	cmp.w	r0, #1424	; 0x590
 8002e34:	f040 8205 	bne.w	8003242 <RI_GetRegisterMotor1+0x53e>
              *regdataU16 = VBS_GetAvBusVoltage_V(BusVoltageSensor);
 8002e38:	488e      	ldr	r0, [pc, #568]	; (8003074 <RI_GetRegisterMotor1+0x370>)
 8002e3a:	f004 faf5 	bl	8007428 <VBS_GetAvBusVoltage_V>
 8002e3e:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002e40:	2000      	movs	r0, #0
          *size = 2;
 8002e42:	2302      	movs	r3, #2
 8002e44:	802b      	strh	r3, [r5, #0]
  }
 8002e46:	b010      	add	sp, #64	; 0x40
 8002e48:	bd70      	pop	{r4, r5, r6, pc}
 8002e4a:	f5b0 7f94 	cmp.w	r0, #296	; 0x128
 8002e4e:	f040 8219 	bne.w	8003284 <RI_GetRegisterMotor1+0x580>
            if ((*rawSize) +2U > (uint16_t)freeSpace)
 8002e52:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = 12;
 8002e56:	220c      	movs	r2, #12
            if ((*rawSize) +2U > (uint16_t)freeSpace)
 8002e58:	f1bc 0f0d 	cmp.w	ip, #13
            *rawSize = 12;
 8002e5c:	8022      	strh	r2, [r4, #0]
            if ((*rawSize) +2U > (uint16_t)freeSpace)
 8002e5e:	f200 81d5 	bhi.w	800320c <RI_GetRegisterMotor1+0x508>
 8002e62:	230e      	movs	r3, #14
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002e64:	2008      	movs	r0, #8
 8002e66:	e789      	b.n	8002d7c <RI_GetRegisterMotor1+0x78>
 8002e68:	f5b0 7f5a 	cmp.w	r0, #872	; 0x368
 8002e6c:	f000 81f9 	beq.w	8003262 <RI_GetRegisterMotor1+0x55e>
 8002e70:	f5b0 7f6a 	cmp.w	r0, #936	; 0x3a8
 8002e74:	d114      	bne.n	8002ea0 <RI_GetRegisterMotor1+0x19c>
            *rawSize = 8;
 8002e76:	2308      	movs	r3, #8
 8002e78:	8023      	strh	r3, [r4, #0]
            Position = TC_GetMoveDuration(&PosCtrlM1);   /* Does this duration make sense ? */
 8002e7a:	487f      	ldr	r0, [pc, #508]	; (8003078 <RI_GetRegisterMotor1+0x374>)
 8002e7c:	f006 fab0 	bl	80093e0 <TC_GetMoveDuration>
            Duration = TC_GetTargetPosition(&PosCtrlM1);
 8002e80:	487d      	ldr	r0, [pc, #500]	; (8003078 <RI_GetRegisterMotor1+0x374>)
            Position = TC_GetMoveDuration(&PosCtrlM1);   /* Does this duration make sense ? */
 8002e82:	ee10 6a10 	vmov	r6, s0
            Duration = TC_GetTargetPosition(&PosCtrlM1);
 8002e86:	f006 faa7 	bl	80093d8 <TC_GetTargetPosition>
        *size = (*rawSize) + 2U;
 8002e8a:	8823      	ldrh	r3, [r4, #0]
            (void)memcpy(rawData, &Position, 4);
 8002e8c:	f8c4 6002 	str.w	r6, [r4, #2]
            (void)memcpy(&rawData[4], &Duration, 4);
 8002e90:	ee10 2a10 	vmov	r2, s0
        *size = (*rawSize) + 2U;
 8002e94:	3302      	adds	r3, #2
            (void)memcpy(&rawData[4], &Duration, 4);
 8002e96:	f8c4 2006 	str.w	r2, [r4, #6]
        *size = (*rawSize) + 2U;
 8002e9a:	b29b      	uxth	r3, r3
    uint8_t retVal = MCP_CMD_OK;
 8002e9c:	2000      	movs	r0, #0
 8002e9e:	e76d      	b.n	8002d7c <RI_GetRegisterMotor1+0x78>
 8002ea0:	f5b0 7ff4 	cmp.w	r0, #488	; 0x1e8
 8002ea4:	f040 81ee 	bne.w	8003284 <RI_GetRegisterMotor1+0x580>
            *rawSize = 4;
 8002ea8:	2304      	movs	r3, #4
 8002eaa:	8023      	strh	r3, [r4, #0]
            *torque = MCI_GetLastRampFinalTorque(pMCIN);
 8002eac:	4870      	ldr	r0, [pc, #448]	; (8003070 <RI_GetRegisterMotor1+0x36c>)
 8002eae:	f7fe fa79 	bl	80013a4 <MCI_GetLastRampFinalTorque>
 8002eb2:	8060      	strh	r0, [r4, #2]
            *duration = MCI_GetLastRampFinalDuration(pMCIN) ;
 8002eb4:	486e      	ldr	r0, [pc, #440]	; (8003070 <RI_GetRegisterMotor1+0x36c>)
 8002eb6:	f7fe fa79 	bl	80013ac <MCI_GetLastRampFinalDuration>
        *size = (*rawSize) + 2U;
 8002eba:	8823      	ldrh	r3, [r4, #0]
            *duration = MCI_GetLastRampFinalDuration(pMCIN) ;
 8002ebc:	80a0      	strh	r0, [r4, #4]
        *size = (*rawSize) + 2U;
 8002ebe:	3302      	adds	r3, #2
 8002ec0:	b29b      	uxth	r3, r3
    uint8_t retVal = MCP_CMD_OK;
 8002ec2:	2000      	movs	r0, #0
            break;
 8002ec4:	e75a      	b.n	8002d7c <RI_GetRegisterMotor1+0x78>
 8002ec6:	f5b0 6fb1 	cmp.w	r0, #1416	; 0x588
 8002eca:	f040 81bc 	bne.w	8003246 <RI_GetRegisterMotor1+0x542>
              *data = (uint8_t) TC_GetAlignmentStatus(&PosCtrlM1);
 8002ece:	486a      	ldr	r0, [pc, #424]	; (8003078 <RI_GetRegisterMotor1+0x374>)
 8002ed0:	f006 fa8e 	bl	80093f0 <TC_GetAlignmentStatus>
 8002ed4:	7020      	strb	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002ed6:	2000      	movs	r0, #0
              break;
 8002ed8:	e768      	b.n	8002dac <RI_GetRegisterMotor1+0xa8>
 8002eda:	f5b0 7f24 	cmp.w	r0, #656	; 0x290
 8002ede:	f040 811c 	bne.w	800311a <RI_GetRegisterMotor1+0x416>
              *regdata16 = PID_GetKP(&PIDIdHandle_M1);
 8002ee2:	4866      	ldr	r0, [pc, #408]	; (800307c <RI_GetRegisterMotor1+0x378>)
 8002ee4:	f004 fe18 	bl	8007b18 <PID_GetKP>
 8002ee8:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002eea:	2000      	movs	r0, #0
              break;
 8002eec:	e7a9      	b.n	8002e42 <RI_GetRegisterMotor1+0x13e>
 8002eee:	f5b0 7f88 	cmp.w	r0, #272	; 0x110
 8002ef2:	f000 82a1 	beq.w	8003438 <RI_GetRegisterMotor1+0x734>
 8002ef6:	f240 8124 	bls.w	8003142 <RI_GetRegisterMotor1+0x43e>
 8002efa:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
 8002efe:	f040 8116 	bne.w	800312e <RI_GetRegisterMotor1+0x42a>
              *regdata16 = PID_GetKP(&PIDIqHandle_M1);
 8002f02:	485f      	ldr	r0, [pc, #380]	; (8003080 <RI_GetRegisterMotor1+0x37c>)
 8002f04:	f004 fe08 	bl	8007b18 <PID_GetKP>
 8002f08:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002f0a:	2000      	movs	r0, #0
              break;
 8002f0c:	e799      	b.n	8002e42 <RI_GetRegisterMotor1+0x13e>
 8002f0e:	f5b0 6f0d 	cmp.w	r0, #2256	; 0x8d0
 8002f12:	f000 828b 	beq.w	800342c <RI_GetRegisterMotor1+0x728>
 8002f16:	d936      	bls.n	8002f86 <RI_GetRegisterMotor1+0x282>
 8002f18:	f5b0 6f19 	cmp.w	r0, #2448	; 0x990
 8002f1c:	f000 827e 	beq.w	800341c <RI_GetRegisterMotor1+0x718>
 8002f20:	d926      	bls.n	8002f70 <RI_GetRegisterMotor1+0x26c>
 8002f22:	f5b0 6f1d 	cmp.w	r0, #2512	; 0x9d0
 8002f26:	f040 818c 	bne.w	8003242 <RI_GetRegisterMotor1+0x53e>
              *regdata16 = MCI_GetVqd(pMCIN).q;
 8002f2a:	4851      	ldr	r0, [pc, #324]	; (8003070 <RI_GetRegisterMotor1+0x36c>)
 8002f2c:	f7fe fa88 	bl	8001440 <MCI_GetVqd>
 8002f30:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002f32:	2000      	movs	r0, #0
              break;
 8002f34:	e785      	b.n	8002e42 <RI_GetRegisterMotor1+0x13e>
 8002f36:	f241 43d0 	movw	r3, #5328	; 0x14d0
 8002f3a:	4298      	cmp	r0, r3
 8002f3c:	f000 8268 	beq.w	8003410 <RI_GetRegisterMotor1+0x70c>
 8002f40:	d87f      	bhi.n	8003042 <RI_GetRegisterMotor1+0x33e>
 8002f42:	f241 3390 	movw	r3, #5008	; 0x1390
 8002f46:	4298      	cmp	r0, r3
 8002f48:	f000 825c 	beq.w	8003404 <RI_GetRegisterMotor1+0x700>
 8002f4c:	d92c      	bls.n	8002fa8 <RI_GetRegisterMotor1+0x2a4>
 8002f4e:	f241 4350 	movw	r3, #5200	; 0x1450
 8002f52:	4298      	cmp	r0, r3
 8002f54:	f000 8250 	beq.w	80033f8 <RI_GetRegisterMotor1+0x6f4>
 8002f58:	d954      	bls.n	8003004 <RI_GetRegisterMotor1+0x300>
 8002f5a:	f241 4390 	movw	r3, #5264	; 0x1490
 8002f5e:	4298      	cmp	r0, r3
 8002f60:	f040 816f 	bne.w	8003242 <RI_GetRegisterMotor1+0x53e>
              *regdataU16 = (uint16_t)PID_GetKIDivisorPOW2(&PIDSpeedHandle_M1);
 8002f64:	4847      	ldr	r0, [pc, #284]	; (8003084 <RI_GetRegisterMotor1+0x380>)
 8002f66:	f004 fde9 	bl	8007b3c <PID_GetKIDivisorPOW2>
 8002f6a:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002f6c:	2000      	movs	r0, #0
              break;
 8002f6e:	e768      	b.n	8002e42 <RI_GetRegisterMotor1+0x13e>
 8002f70:	f5b0 6f11 	cmp.w	r0, #2320	; 0x910
 8002f74:	d150      	bne.n	8003018 <RI_GetRegisterMotor1+0x314>
              *regdata16 = MCI_GetIqd(pMCIN).d;
 8002f76:	483e      	ldr	r0, [pc, #248]	; (8003070 <RI_GetRegisterMotor1+0x36c>)
 8002f78:	f7fe fa46 	bl	8001408 <MCI_GetIqd>
 8002f7c:	f3c0 400f 	ubfx	r0, r0, #16, #16
 8002f80:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002f82:	2000      	movs	r0, #0
              break;
 8002f84:	e75d      	b.n	8002e42 <RI_GetRegisterMotor1+0x13e>
 8002f86:	f5b0 6f05 	cmp.w	r0, #2128	; 0x850
 8002f8a:	f000 822f 	beq.w	80033ec <RI_GetRegisterMotor1+0x6e8>
 8002f8e:	d97f      	bls.n	8003090 <RI_GetRegisterMotor1+0x38c>
 8002f90:	f5b0 6f09 	cmp.w	r0, #2192	; 0x890
 8002f94:	f040 8155 	bne.w	8003242 <RI_GetRegisterMotor1+0x53e>
              *regdata16 = MCI_GetIalphabeta(pMCIN).beta;
 8002f98:	4835      	ldr	r0, [pc, #212]	; (8003070 <RI_GetRegisterMotor1+0x36c>)
 8002f9a:	f7fe fa27 	bl	80013ec <MCI_GetIalphabeta>
 8002f9e:	f3c0 400f 	ubfx	r0, r0, #16, #16
 8002fa2:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002fa4:	2000      	movs	r0, #0
              break;
 8002fa6:	e74c      	b.n	8002e42 <RI_GetRegisterMotor1+0x13e>
 8002fa8:	f5b0 6f2d 	cmp.w	r0, #2768	; 0xad0
 8002fac:	f000 8218 	beq.w	80033e0 <RI_GetRegisterMotor1+0x6dc>
 8002fb0:	d909      	bls.n	8002fc6 <RI_GetRegisterMotor1+0x2c2>
 8002fb2:	f5b0 6f65 	cmp.w	r0, #3664	; 0xe50
 8002fb6:	d002      	beq.n	8002fbe <RI_GetRegisterMotor1+0x2ba>
 8002fb8:	f5b0 6f69 	cmp.w	r0, #3728	; 0xe90
 8002fbc:	d10c      	bne.n	8002fd8 <RI_GetRegisterMotor1+0x2d4>
          *size = 2;
 8002fbe:	2302      	movs	r3, #2
    uint8_t retVal = MCP_CMD_OK;
 8002fc0:	2000      	movs	r0, #0
          *size = 2;
 8002fc2:	802b      	strh	r3, [r5, #0]
 8002fc4:	e73f      	b.n	8002e46 <RI_GetRegisterMotor1+0x142>
 8002fc6:	f5b0 6f25 	cmp.w	r0, #2640	; 0xa50
 8002fca:	d10f      	bne.n	8002fec <RI_GetRegisterMotor1+0x2e8>
              *regdata16 = MCI_GetValphabeta(pMCIN).alpha;
 8002fcc:	4828      	ldr	r0, [pc, #160]	; (8003070 <RI_GetRegisterMotor1+0x36c>)
 8002fce:	f7fe fa45 	bl	800145c <MCI_GetValphabeta>
 8002fd2:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002fd4:	2000      	movs	r0, #0
              break;
 8002fd6:	e734      	b.n	8002e42 <RI_GetRegisterMotor1+0x13e>
 8002fd8:	f5b0 6f31 	cmp.w	r0, #2832	; 0xb10
 8002fdc:	f040 8131 	bne.w	8003242 <RI_GetRegisterMotor1+0x53e>
              *regdata16 = SPD_GetS16Speed ((SpeednPosFdbk_Handle_t*) &ENCODER_M1); //cstat !MISRAC2012-Rule-11.3
 8002fe0:	4829      	ldr	r0, [pc, #164]	; (8003088 <RI_GetRegisterMotor1+0x384>)
 8002fe2:	f005 feaf 	bl	8008d44 <SPD_GetS16Speed>
 8002fe6:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002fe8:	2000      	movs	r0, #0
              break;
 8002fea:	e72a      	b.n	8002e42 <RI_GetRegisterMotor1+0x13e>
 8002fec:	f5b0 6f29 	cmp.w	r0, #2704	; 0xa90
 8002ff0:	f040 8127 	bne.w	8003242 <RI_GetRegisterMotor1+0x53e>
              *regdata16 = MCI_GetValphabeta(pMCIN).beta;
 8002ff4:	481e      	ldr	r0, [pc, #120]	; (8003070 <RI_GetRegisterMotor1+0x36c>)
 8002ff6:	f7fe fa31 	bl	800145c <MCI_GetValphabeta>
 8002ffa:	f3c0 400f 	ubfx	r0, r0, #16, #16
 8002ffe:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8003000:	2000      	movs	r0, #0
              break;
 8003002:	e71e      	b.n	8002e42 <RI_GetRegisterMotor1+0x13e>
 8003004:	f241 33d0 	movw	r3, #5072	; 0x13d0
 8003008:	4298      	cmp	r0, r3
 800300a:	d10f      	bne.n	800302c <RI_GetRegisterMotor1+0x328>
              *regdata16 = PID_GetKI( &PID_PosParamsM1);
 800300c:	481f      	ldr	r0, [pc, #124]	; (800308c <RI_GetRegisterMotor1+0x388>)
 800300e:	f004 fd87 	bl	8007b20 <PID_GetKI>
 8003012:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8003014:	2000      	movs	r0, #0
              break;
 8003016:	e714      	b.n	8002e42 <RI_GetRegisterMotor1+0x13e>
 8003018:	f5b0 6f15 	cmp.w	r0, #2384	; 0x950
 800301c:	f040 8111 	bne.w	8003242 <RI_GetRegisterMotor1+0x53e>
              *regdata16 = MCI_GetIqdref(pMCIN).q;
 8003020:	4813      	ldr	r0, [pc, #76]	; (8003070 <RI_GetRegisterMotor1+0x36c>)
 8003022:	f7fe f9ff 	bl	8001424 <MCI_GetIqdref>
 8003026:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8003028:	2000      	movs	r0, #0
              break;
 800302a:	e70a      	b.n	8002e42 <RI_GetRegisterMotor1+0x13e>
 800302c:	f241 4310 	movw	r3, #5136	; 0x1410
 8003030:	4298      	cmp	r0, r3
 8003032:	f040 8106 	bne.w	8003242 <RI_GetRegisterMotor1+0x53e>
              *regdata16 = PID_GetKD( &PID_PosParamsM1);
 8003036:	4815      	ldr	r0, [pc, #84]	; (800308c <RI_GetRegisterMotor1+0x388>)
 8003038:	f004 fd9c 	bl	8007b74 <PID_GetKD>
 800303c:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 800303e:	2000      	movs	r0, #0
              break;
 8003040:	e6ff      	b.n	8002e42 <RI_GetRegisterMotor1+0x13e>
 8003042:	f241 6310 	movw	r3, #5648	; 0x1610
 8003046:	4298      	cmp	r0, r3
 8003048:	f000 81a4 	beq.w	8003394 <RI_GetRegisterMotor1+0x690>
 800304c:	d933      	bls.n	80030b6 <RI_GetRegisterMotor1+0x3b2>
 800304e:	f241 63d0 	movw	r3, #5840	; 0x16d0
 8003052:	4298      	cmp	r0, r3
 8003054:	f000 817f 	beq.w	8003356 <RI_GetRegisterMotor1+0x652>
 8003058:	d923      	bls.n	80030a2 <RI_GetRegisterMotor1+0x39e>
 800305a:	f241 7310 	movw	r3, #5904	; 0x1710
 800305e:	4298      	cmp	r0, r3
 8003060:	f040 80ef 	bne.w	8003242 <RI_GetRegisterMotor1+0x53e>
              *regdataU16 = PID_GetKDDivisorPOW2(&PID_PosParamsM1);
 8003064:	4809      	ldr	r0, [pc, #36]	; (800308c <RI_GetRegisterMotor1+0x388>)
 8003066:	f004 fd89 	bl	8007b7c <PID_GetKDDivisorPOW2>
 800306a:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 800306c:	2000      	movs	r0, #0
              break;
 800306e:	e6e8      	b.n	8002e42 <RI_GetRegisterMotor1+0x13e>
 8003070:	200006e0 	.word	0x200006e0
 8003074:	20000000 	.word	0x20000000
 8003078:	20000220 	.word	0x20000220
 800307c:	200000bc 	.word	0x200000bc
 8003080:	200000e8 	.word	0x200000e8
 8003084:	20000114 	.word	0x20000114
 8003088:	20000020 	.word	0x20000020
 800308c:	20000140 	.word	0x20000140
 8003090:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8003094:	d120      	bne.n	80030d8 <RI_GetRegisterMotor1+0x3d4>
              *regdata16 = MCI_GetIab(pMCIN).a;
 8003096:	48b3      	ldr	r0, [pc, #716]	; (8003364 <RI_GetRegisterMotor1+0x660>)
 8003098:	f7fe f99a 	bl	80013d0 <MCI_GetIab>
 800309c:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 800309e:	2000      	movs	r0, #0
              break;
 80030a0:	e6cf      	b.n	8002e42 <RI_GetRegisterMotor1+0x13e>
 80030a2:	f241 6350 	movw	r3, #5712	; 0x1650
 80030a6:	4298      	cmp	r0, r3
 80030a8:	d122      	bne.n	80030f0 <RI_GetRegisterMotor1+0x3ec>
              *regdataU16 = PID_GetKDDivisorPOW2(&PIDIqHandle_M1);
 80030aa:	48af      	ldr	r0, [pc, #700]	; (8003368 <RI_GetRegisterMotor1+0x664>)
 80030ac:	f004 fd66 	bl	8007b7c <PID_GetKDDivisorPOW2>
 80030b0:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 80030b2:	2000      	movs	r0, #0
              break;
 80030b4:	e6c5      	b.n	8002e42 <RI_GetRegisterMotor1+0x13e>
 80030b6:	f241 5390 	movw	r3, #5520	; 0x1590
 80030ba:	4298      	cmp	r0, r3
 80030bc:	f000 8170 	beq.w	80033a0 <RI_GetRegisterMotor1+0x69c>
 80030c0:	d921      	bls.n	8003106 <RI_GetRegisterMotor1+0x402>
 80030c2:	f241 53d0 	movw	r3, #5584	; 0x15d0
 80030c6:	4298      	cmp	r0, r3
 80030c8:	f040 80bb 	bne.w	8003242 <RI_GetRegisterMotor1+0x53e>
              *regdataU16 = PID_GetKPDivisorPOW2(&PIDIqHandle_M1);
 80030cc:	48a6      	ldr	r0, [pc, #664]	; (8003368 <RI_GetRegisterMotor1+0x664>)
 80030ce:	f004 fd2d 	bl	8007b2c <PID_GetKPDivisorPOW2>
 80030d2:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 80030d4:	2000      	movs	r0, #0
              break;
 80030d6:	e6b4      	b.n	8002e42 <RI_GetRegisterMotor1+0x13e>
 80030d8:	f5b0 6f01 	cmp.w	r0, #2064	; 0x810
 80030dc:	f040 80b1 	bne.w	8003242 <RI_GetRegisterMotor1+0x53e>
              *regdata16 = MCI_GetIab(pMCIN).b;
 80030e0:	48a0      	ldr	r0, [pc, #640]	; (8003364 <RI_GetRegisterMotor1+0x660>)
 80030e2:	f7fe f975 	bl	80013d0 <MCI_GetIab>
 80030e6:	f3c0 400f 	ubfx	r0, r0, #16, #16
 80030ea:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 80030ec:	2000      	movs	r0, #0
              break;
 80030ee:	e6a8      	b.n	8002e42 <RI_GetRegisterMotor1+0x13e>
 80030f0:	f241 6390 	movw	r3, #5776	; 0x1690
 80030f4:	4298      	cmp	r0, r3
 80030f6:	f040 80a4 	bne.w	8003242 <RI_GetRegisterMotor1+0x53e>
              *regdataU16 = PID_GetKPDivisorPOW2(&PID_PosParamsM1);
 80030fa:	489c      	ldr	r0, [pc, #624]	; (800336c <RI_GetRegisterMotor1+0x668>)
 80030fc:	f004 fd16 	bl	8007b2c <PID_GetKPDivisorPOW2>
 8003100:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8003102:	2000      	movs	r0, #0
              break;
 8003104:	e69d      	b.n	8002e42 <RI_GetRegisterMotor1+0x13e>
 8003106:	f241 5310 	movw	r3, #5392	; 0x1510
 800310a:	4298      	cmp	r0, r3
 800310c:	d121      	bne.n	8003152 <RI_GetRegisterMotor1+0x44e>
              *regdataU16 = PID_GetKPDivisorPOW2(&PIDIdHandle_M1);
 800310e:	4898      	ldr	r0, [pc, #608]	; (8003370 <RI_GetRegisterMotor1+0x66c>)
 8003110:	f004 fd0c 	bl	8007b2c <PID_GetKPDivisorPOW2>
 8003114:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8003116:	2000      	movs	r0, #0
              break;
 8003118:	e693      	b.n	8002e42 <RI_GetRegisterMotor1+0x13e>
 800311a:	f5b0 7f34 	cmp.w	r0, #720	; 0x2d0
 800311e:	f040 8090 	bne.w	8003242 <RI_GetRegisterMotor1+0x53e>
              *regdata16 = PID_GetKI(&PIDIdHandle_M1);
 8003122:	4893      	ldr	r0, [pc, #588]	; (8003370 <RI_GetRegisterMotor1+0x66c>)
 8003124:	f004 fcfc 	bl	8007b20 <PID_GetKI>
 8003128:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 800312a:	2000      	movs	r0, #0
              break;
 800312c:	e689      	b.n	8002e42 <RI_GetRegisterMotor1+0x13e>
 800312e:	f5b0 7fe8 	cmp.w	r0, #464	; 0x1d0
 8003132:	f040 8086 	bne.w	8003242 <RI_GetRegisterMotor1+0x53e>
              *regdata16 = PID_GetKI(&PIDIqHandle_M1);
 8003136:	488c      	ldr	r0, [pc, #560]	; (8003368 <RI_GetRegisterMotor1+0x664>)
 8003138:	f004 fcf2 	bl	8007b20 <PID_GetKI>
 800313c:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 800313e:	2000      	movs	r0, #0
              break;
 8003140:	e67f      	b.n	8002e42 <RI_GetRegisterMotor1+0x13e>
 8003142:	2890      	cmp	r0, #144	; 0x90
 8003144:	d10f      	bne.n	8003166 <RI_GetRegisterMotor1+0x462>
              *regdata16 = PID_GetKP(&PIDSpeedHandle_M1);
 8003146:	488b      	ldr	r0, [pc, #556]	; (8003374 <RI_GetRegisterMotor1+0x670>)
 8003148:	f004 fce6 	bl	8007b18 <PID_GetKP>
 800314c:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 800314e:	2000      	movs	r0, #0
              break;
 8003150:	e677      	b.n	8002e42 <RI_GetRegisterMotor1+0x13e>
 8003152:	f241 5350 	movw	r3, #5456	; 0x1550
 8003156:	4298      	cmp	r0, r3
 8003158:	d173      	bne.n	8003242 <RI_GetRegisterMotor1+0x53e>
              *regdataU16 = PID_GetKIDivisorPOW2(&PIDIdHandle_M1);
 800315a:	4885      	ldr	r0, [pc, #532]	; (8003370 <RI_GetRegisterMotor1+0x66c>)
 800315c:	f004 fcee 	bl	8007b3c <PID_GetKIDivisorPOW2>
 8003160:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8003162:	2000      	movs	r0, #0
              break;
 8003164:	e66d      	b.n	8002e42 <RI_GetRegisterMotor1+0x13e>
 8003166:	28d0      	cmp	r0, #208	; 0xd0
 8003168:	d16b      	bne.n	8003242 <RI_GetRegisterMotor1+0x53e>
              *regdata16 = PID_GetKI(&PIDSpeedHandle_M1);
 800316a:	4882      	ldr	r0, [pc, #520]	; (8003374 <RI_GetRegisterMotor1+0x670>)
 800316c:	f004 fcd8 	bl	8007b20 <PID_GetKI>
 8003170:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8003172:	2000      	movs	r0, #0
              break;
 8003174:	e665      	b.n	8002e42 <RI_GetRegisterMotor1+0x13e>
 8003176:	f640 2358 	movw	r3, #2648	; 0xa58
 800317a:	4298      	cmp	r0, r3
 800317c:	f000 80b5 	beq.w	80032ea <RI_GetRegisterMotor1+0x5e6>
 8003180:	f641 3358 	movw	r3, #7000	; 0x1b58
 8003184:	4298      	cmp	r0, r3
 8003186:	f040 815d 	bne.w	8003444 <RI_GetRegisterMotor1+0x740>
              ReadVal.Float_Val = PQD_GetAvrgElMotorPowerW(pMPM[M1]);
 800318a:	4b7b      	ldr	r3, [pc, #492]	; (8003378 <RI_GetRegisterMotor1+0x674>)
 800318c:	6818      	ldr	r0, [r3, #0]
 800318e:	f004 fd81 	bl	8007c94 <PQD_GetAvrgElMotorPowerW>
 8003192:	ed8d 0a01 	vstr	s0, [sp, #4]
              *regdataU32 = ReadVal.U32_Val; //cstat !UNION-type-punning
 8003196:	9b01      	ldr	r3, [sp, #4]
 8003198:	6023      	str	r3, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 800319a:	2000      	movs	r0, #0
 800319c:	e621      	b.n	8002de2 <RI_GetRegisterMotor1+0xde>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 800319e:	2008      	movs	r0, #8
  }
 80031a0:	b010      	add	sp, #64	; 0x40
 80031a2:	bd70      	pop	{r4, r5, r6, pc}
            retVal = RI_MovString (MotorConfig_reg[motorID]->name ,charData, size, freeSpace);
 80031a4:	4b75      	ldr	r3, [pc, #468]	; (800337c <RI_GetRegisterMotor1+0x678>)
 80031a6:	681a      	ldr	r2, [r3, #0]
  *size= 1U ; /* /0 is the min String size */
 80031a8:	2301      	movs	r3, #1
 80031aa:	802b      	strh	r3, [r5, #0]
            retVal = RI_MovString (MotorConfig_reg[motorID]->name ,charData, size, freeSpace);
 80031ac:	f102 0124 	add.w	r1, r2, #36	; 0x24
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80031b0:	f992 2024 	ldrsb.w	r2, [r2, #36]	; 0x24
 80031b4:	b17a      	cbz	r2, 80031d6 <RI_GetRegisterMotor1+0x4d2>
 80031b6:	fa1f fc8c 	uxth.w	ip, ip
 80031ba:	e008      	b.n	80031ce <RI_GetRegisterMotor1+0x4ca>
    *tempdestString = *tempsrcString;
 80031bc:	f804 2b01 	strb.w	r2, [r4], #1
    *size = *size + 1U;
 80031c0:	882b      	ldrh	r3, [r5, #0]
 80031c2:	3301      	adds	r3, #1
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	802b      	strh	r3, [r5, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80031c8:	f911 2f01 	ldrsb.w	r2, [r1, #1]!
 80031cc:	b11a      	cbz	r2, 80031d6 <RI_GetRegisterMotor1+0x4d2>
 80031ce:	4563      	cmp	r3, ip
 80031d0:	d3f4      	bcc.n	80031bc <RI_GetRegisterMotor1+0x4b8>
    retVal = MCP_ERROR_STRING_FORMAT;
 80031d2:	2006      	movs	r0, #6
 80031d4:	e5b4      	b.n	8002d40 <RI_GetRegisterMotor1+0x3c>
    *tempdestString = (int8_t)0;
 80031d6:	2000      	movs	r0, #0
 80031d8:	7020      	strb	r0, [r4, #0]
    return (retVal);
 80031da:	e5b1      	b.n	8002d40 <RI_GetRegisterMotor1+0x3c>
            retVal = RI_MovString (PWR_BOARD_NAME[motorID], charData, size, freeSpace);
 80031dc:	4a68      	ldr	r2, [pc, #416]	; (8003380 <RI_GetRegisterMotor1+0x67c>)
  *size= 1U ; /* /0 is the min String size */
 80031de:	2301      	movs	r3, #1
            retVal = RI_MovString (PWR_BOARD_NAME[motorID], charData, size, freeSpace);
 80031e0:	6811      	ldr	r1, [r2, #0]
  *size= 1U ; /* /0 is the min String size */
 80031e2:	802b      	strh	r3, [r5, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80031e4:	f991 2000 	ldrsb.w	r2, [r1]
 80031e8:	2a00      	cmp	r2, #0
 80031ea:	d0f4      	beq.n	80031d6 <RI_GetRegisterMotor1+0x4d2>
 80031ec:	fa1f fc8c 	uxth.w	ip, ip
 80031f0:	e009      	b.n	8003206 <RI_GetRegisterMotor1+0x502>
    *tempdestString = *tempsrcString;
 80031f2:	f804 2b01 	strb.w	r2, [r4], #1
    *size = *size + 1U;
 80031f6:	882b      	ldrh	r3, [r5, #0]
 80031f8:	3301      	adds	r3, #1
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	802b      	strh	r3, [r5, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80031fe:	f911 2f01 	ldrsb.w	r2, [r1, #1]!
 8003202:	2a00      	cmp	r2, #0
 8003204:	d0e7      	beq.n	80031d6 <RI_GetRegisterMotor1+0x4d2>
 8003206:	459c      	cmp	ip, r3
 8003208:	d8f3      	bhi.n	80031f2 <RI_GetRegisterMotor1+0x4ee>
 800320a:	e7e2      	b.n	80031d2 <RI_GetRegisterMotor1+0x4ce>
              memcpy(rawData, &scaleParams_M1, sizeof(ScaleParams_t) );
 800320c:	4a5d      	ldr	r2, [pc, #372]	; (8003384 <RI_GetRegisterMotor1+0x680>)
 800320e:	6850      	ldr	r0, [r2, #4]
 8003210:	6814      	ldr	r4, [r2, #0]
 8003212:	6891      	ldr	r1, [r2, #8]
 8003214:	68d2      	ldr	r2, [r2, #12]
 8003216:	60da      	str	r2, [r3, #12]
 8003218:	6058      	str	r0, [r3, #4]
 800321a:	601c      	str	r4, [r3, #0]
 800321c:	6099      	str	r1, [r3, #8]
    uint8_t retVal = MCP_CMD_OK;
 800321e:	2000      	movs	r0, #0
              memcpy(rawData, &scaleParams_M1, sizeof(ScaleParams_t) );
 8003220:	230e      	movs	r3, #14
 8003222:	e5ab      	b.n	8002d7c <RI_GetRegisterMotor1+0x78>
              ApplicationConfig_reg_t const *pApplicationConfig_reg = ApplicationConfig_reg[motorID];
 8003224:	4a58      	ldr	r2, [pc, #352]	; (8003388 <RI_GetRegisterMotor1+0x684>)
              (void)memcpy(rawData, (const uint8_t *)pApplicationConfig_reg, sizeof(ApplicationConfig_reg_t));
 8003226:	6812      	ldr	r2, [r2, #0]
 8003228:	6850      	ldr	r0, [r2, #4]
 800322a:	6814      	ldr	r4, [r2, #0]
 800322c:	6891      	ldr	r1, [r2, #8]
 800322e:	68d2      	ldr	r2, [r2, #12]
 8003230:	60da      	str	r2, [r3, #12]
 8003232:	6058      	str	r0, [r3, #4]
 8003234:	601c      	str	r4, [r3, #0]
 8003236:	6099      	str	r1, [r3, #8]
    uint8_t retVal = MCP_CMD_OK;
 8003238:	2000      	movs	r0, #0
              (void)memcpy(rawData, (const uint8_t *)pApplicationConfig_reg, sizeof(ApplicationConfig_reg_t));
 800323a:	2312      	movs	r3, #18
 800323c:	e59e      	b.n	8002d7c <RI_GetRegisterMotor1+0x78>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 800323e:	4608      	mov	r0, r1
 8003240:	e57e      	b.n	8002d40 <RI_GetRegisterMotor1+0x3c>
 8003242:	2005      	movs	r0, #5
 8003244:	e5fd      	b.n	8002e42 <RI_GetRegisterMotor1+0x13e>
 8003246:	2005      	movs	r0, #5
 8003248:	e5b0      	b.n	8002dac <RI_GetRegisterMotor1+0xa8>
              *data = (uint8_t)MCI_GetSTMState(pMCIN);
 800324a:	4846      	ldr	r0, [pc, #280]	; (8003364 <RI_GetRegisterMotor1+0x660>)
 800324c:	f7fe f828 	bl	80012a0 <MCI_GetSTMState>
 8003250:	7020      	strb	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8003252:	2000      	movs	r0, #0
              break;
 8003254:	e5aa      	b.n	8002dac <RI_GetRegisterMotor1+0xa8>
              *data = (uint8_t) TC_GetControlPositionStatus(&PosCtrlM1);
 8003256:	484d      	ldr	r0, [pc, #308]	; (800338c <RI_GetRegisterMotor1+0x688>)
 8003258:	f006 f8c6 	bl	80093e8 <TC_GetControlPositionStatus>
 800325c:	7020      	strb	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 800325e:	2000      	movs	r0, #0
              break;
 8003260:	e5a4      	b.n	8002dac <RI_GetRegisterMotor1+0xa8>
            *rawSize = 4;
 8003262:	2304      	movs	r3, #4
 8003264:	8023      	strh	r3, [r4, #0]
            *iqref = (uint16_t)MCI_GetIqdref(pMCIN).q;
 8003266:	483f      	ldr	r0, [pc, #252]	; (8003364 <RI_GetRegisterMotor1+0x660>)
 8003268:	f7fe f8dc 	bl	8001424 <MCI_GetIqdref>
 800326c:	8060      	strh	r0, [r4, #2]
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 800326e:	483d      	ldr	r0, [pc, #244]	; (8003364 <RI_GetRegisterMotor1+0x660>)
 8003270:	f7fe f8d8 	bl	8001424 <MCI_GetIqdref>
        *size = (*rawSize) + 2U;
 8003274:	8823      	ldrh	r3, [r4, #0]
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 8003276:	f3c0 400f 	ubfx	r0, r0, #16, #16
        *size = (*rawSize) + 2U;
 800327a:	3302      	adds	r3, #2
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 800327c:	80a0      	strh	r0, [r4, #4]
        *size = (*rawSize) + 2U;
 800327e:	b29b      	uxth	r3, r3
    uint8_t retVal = MCP_CMD_OK;
 8003280:	2000      	movs	r0, #0
            break;
 8003282:	e57b      	b.n	8002d7c <RI_GetRegisterMotor1+0x78>
        *size = (*rawSize) + 2U;
 8003284:	8823      	ldrh	r3, [r4, #0]
 8003286:	3302      	adds	r3, #2
            retVal = MCP_ERROR_UNKNOWN_REG;
 8003288:	2005      	movs	r0, #5
        *size = (*rawSize) + 2U;
 800328a:	b29b      	uxth	r3, r3
 800328c:	e576      	b.n	8002d7c <RI_GetRegisterMotor1+0x78>
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 800328e:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = (uint16_t)sizeof(FOCFwConfig_reg_t);
 8003292:	220e      	movs	r2, #14
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8003294:	f1bc 0f0f 	cmp.w	ip, #15
            *rawSize = (uint16_t)sizeof(FOCFwConfig_reg_t);
 8003298:	8022      	strh	r2, [r4, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 800329a:	d835      	bhi.n	8003308 <RI_GetRegisterMotor1+0x604>
 800329c:	2310      	movs	r3, #16
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 800329e:	2008      	movs	r0, #8
 80032a0:	e56c      	b.n	8002d7c <RI_GetRegisterMotor1+0x78>
            *rpm = (((int32_t)MCI_GetLastRampFinalSpeed(pMCIN) * U_RPM) / (int32_t)SPEED_UNIT);
 80032a2:	4830      	ldr	r0, [pc, #192]	; (8003364 <RI_GetRegisterMotor1+0x660>)
 80032a4:	f7fe f87a 	bl	800139c <MCI_GetLastRampFinalSpeed>
 80032a8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80032ac:	0043      	lsls	r3, r0, #1
 80032ae:	f8c4 3002 	str.w	r3, [r4, #2]
            *duration = MCI_GetLastRampFinalDuration(pMCIN);
 80032b2:	482c      	ldr	r0, [pc, #176]	; (8003364 <RI_GetRegisterMotor1+0x660>)
 80032b4:	f7fe f87a 	bl	80013ac <MCI_GetLastRampFinalDuration>
            *rawSize = 6;
 80032b8:	2306      	movs	r3, #6
            *duration = MCI_GetLastRampFinalDuration(pMCIN);
 80032ba:	80e0      	strh	r0, [r4, #6]
            *rawSize = 6;
 80032bc:	8023      	strh	r3, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 80032be:	2000      	movs	r0, #0
            break;
 80032c0:	2308      	movs	r3, #8
 80032c2:	e55b      	b.n	8002d7c <RI_GetRegisterMotor1+0x78>
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 80032c4:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = (uint16_t)sizeof(MotorConfig_reg_t);
 80032c8:	223c      	movs	r2, #60	; 0x3c
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 80032ca:	f1bc 0f3d 	cmp.w	ip, #61	; 0x3d
            *rawSize = (uint16_t)sizeof(MotorConfig_reg_t);
 80032ce:	8022      	strh	r2, [r4, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 80032d0:	d827      	bhi.n	8003322 <RI_GetRegisterMotor1+0x61e>
 80032d2:	233e      	movs	r3, #62	; 0x3e
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 80032d4:	2008      	movs	r0, #8
 80032d6:	e551      	b.n	8002d7c <RI_GetRegisterMotor1+0x78>
              *regdata32 = (((int32_t)MCI_GetMecSpeedRefUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 80032d8:	4822      	ldr	r0, [pc, #136]	; (8003364 <RI_GetRegisterMotor1+0x660>)
 80032da:	f7fe f875 	bl	80013c8 <MCI_GetMecSpeedRefUnit>
 80032de:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80032e2:	0040      	lsls	r0, r0, #1
 80032e4:	6020      	str	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 80032e6:	2000      	movs	r0, #0
              break;
 80032e8:	e57b      	b.n	8002de2 <RI_GetRegisterMotor1+0xde>
              ReadVal.Float_Val = MCI_GetCurrentPosition(pMCIN);
 80032ea:	481e      	ldr	r0, [pc, #120]	; (8003364 <RI_GetRegisterMotor1+0x660>)
 80032ec:	f7fd ffdc 	bl	80012a8 <MCI_GetCurrentPosition>
 80032f0:	ed8d 0a01 	vstr	s0, [sp, #4]
              *regdataU32 = ReadVal.U32_Val;
 80032f4:	9b01      	ldr	r3, [sp, #4]
 80032f6:	6023      	str	r3, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 80032f8:	2000      	movs	r0, #0
 80032fa:	e572      	b.n	8002de2 <RI_GetRegisterMotor1+0xde>
              *regdataU32 = MCI_GetFaultState(pMCIN);
 80032fc:	4819      	ldr	r0, [pc, #100]	; (8003364 <RI_GetRegisterMotor1+0x660>)
 80032fe:	f7fe f843 	bl	8001388 <MCI_GetFaultState>
 8003302:	6020      	str	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8003304:	2000      	movs	r0, #0
              break;
 8003306:	e56c      	b.n	8002de2 <RI_GetRegisterMotor1+0xde>
              FOCFwConfig_reg_t const *pFOCConfig_reg = FOCConfig_reg[motorID];
 8003308:	4a21      	ldr	r2, [pc, #132]	; (8003390 <RI_GetRegisterMotor1+0x68c>)
              (void)memcpy(rawData, (const uint8_t *)pFOCConfig_reg, sizeof(FOCFwConfig_reg_t));
 800330a:	6812      	ldr	r2, [r2, #0]
 800330c:	6810      	ldr	r0, [r2, #0]
 800330e:	6851      	ldr	r1, [r2, #4]
 8003310:	6894      	ldr	r4, [r2, #8]
 8003312:	609c      	str	r4, [r3, #8]
 8003314:	6018      	str	r0, [r3, #0]
 8003316:	6059      	str	r1, [r3, #4]
 8003318:	8992      	ldrh	r2, [r2, #12]
 800331a:	819a      	strh	r2, [r3, #12]
    uint8_t retVal = MCP_CMD_OK;
 800331c:	2000      	movs	r0, #0
              (void)memcpy(rawData, (const uint8_t *)pFOCConfig_reg, sizeof(FOCFwConfig_reg_t));
 800331e:	2310      	movs	r3, #16
 8003320:	e52c      	b.n	8002d7c <RI_GetRegisterMotor1+0x78>
              MotorConfig_reg_t const *pMotorConfig_reg = MotorConfig_reg[motorID];
 8003322:	4a16      	ldr	r2, [pc, #88]	; (800337c <RI_GetRegisterMotor1+0x678>)
              (void)memcpy(rawData, (const uint8_t *)pMotorConfig_reg, sizeof(MotorConfig_reg_t));
 8003324:	6812      	ldr	r2, [r2, #0]
 8003326:	f102 0c30 	add.w	ip, r2, #48	; 0x30
 800332a:	6814      	ldr	r4, [r2, #0]
 800332c:	6850      	ldr	r0, [r2, #4]
 800332e:	6891      	ldr	r1, [r2, #8]
 8003330:	68d6      	ldr	r6, [r2, #12]
 8003332:	60de      	str	r6, [r3, #12]
 8003334:	3210      	adds	r2, #16
 8003336:	4562      	cmp	r2, ip
 8003338:	601c      	str	r4, [r3, #0]
 800333a:	6058      	str	r0, [r3, #4]
 800333c:	6099      	str	r1, [r3, #8]
 800333e:	f103 0310 	add.w	r3, r3, #16
 8003342:	d1f2      	bne.n	800332a <RI_GetRegisterMotor1+0x626>
 8003344:	6810      	ldr	r0, [r2, #0]
 8003346:	6851      	ldr	r1, [r2, #4]
 8003348:	6892      	ldr	r2, [r2, #8]
 800334a:	609a      	str	r2, [r3, #8]
 800334c:	6018      	str	r0, [r3, #0]
 800334e:	6059      	str	r1, [r3, #4]
    uint8_t retVal = MCP_CMD_OK;
 8003350:	2000      	movs	r0, #0
              (void)memcpy(rawData, (const uint8_t *)pMotorConfig_reg, sizeof(MotorConfig_reg_t));
 8003352:	233e      	movs	r3, #62	; 0x3e
 8003354:	e512      	b.n	8002d7c <RI_GetRegisterMotor1+0x78>
              *regdataU16 = PID_GetKIDivisorPOW2(&PID_PosParamsM1);
 8003356:	4805      	ldr	r0, [pc, #20]	; (800336c <RI_GetRegisterMotor1+0x668>)
 8003358:	f004 fbf0 	bl	8007b3c <PID_GetKIDivisorPOW2>
 800335c:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 800335e:	2000      	movs	r0, #0
              break;
 8003360:	e56f      	b.n	8002e42 <RI_GetRegisterMotor1+0x13e>
 8003362:	bf00      	nop
 8003364:	200006e0 	.word	0x200006e0
 8003368:	200000e8 	.word	0x200000e8
 800336c:	20000140 	.word	0x20000140
 8003370:	200000bc 	.word	0x200000bc
 8003374:	20000114 	.word	0x20000114
 8003378:	20000340 	.word	0x20000340
 800337c:	2000035c 	.word	0x2000035c
 8003380:	20000360 	.word	0x20000360
 8003384:	20000364 	.word	0x20000364
 8003388:	20000354 	.word	0x20000354
 800338c:	20000220 	.word	0x20000220
 8003390:	20000358 	.word	0x20000358
              *regdataU16 = PID_GetKIDivisorPOW2(&PIDIqHandle_M1);
 8003394:	482c      	ldr	r0, [pc, #176]	; (8003448 <RI_GetRegisterMotor1+0x744>)
 8003396:	f004 fbd1 	bl	8007b3c <PID_GetKIDivisorPOW2>
 800339a:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 800339c:	2000      	movs	r0, #0
              break;
 800339e:	e550      	b.n	8002e42 <RI_GetRegisterMotor1+0x13e>
              *regdataU16 = PID_GetKDDivisorPOW2(&PIDIdHandle_M1);
 80033a0:	482a      	ldr	r0, [pc, #168]	; (800344c <RI_GetRegisterMotor1+0x748>)
 80033a2:	f004 fbeb 	bl	8007b7c <PID_GetKDDivisorPOW2>
 80033a6:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 80033a8:	2000      	movs	r0, #0
              break;
 80033aa:	e54a      	b.n	8002e42 <RI_GetRegisterMotor1+0x13e>
              *regdata16 = PID_GetKD(&PIDIdHandle_M1);
 80033ac:	4827      	ldr	r0, [pc, #156]	; (800344c <RI_GetRegisterMotor1+0x748>)
 80033ae:	f004 fbe1 	bl	8007b74 <PID_GetKD>
 80033b2:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 80033b4:	2000      	movs	r0, #0
              break;
 80033b6:	e544      	b.n	8002e42 <RI_GetRegisterMotor1+0x13e>
              *regdata16 = PID_GetKD(&PIDIqHandle_M1);
 80033b8:	4823      	ldr	r0, [pc, #140]	; (8003448 <RI_GetRegisterMotor1+0x744>)
 80033ba:	f004 fbdb 	bl	8007b74 <PID_GetKD>
 80033be:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 80033c0:	2000      	movs	r0, #0
              break;
 80033c2:	e53e      	b.n	8002e42 <RI_GetRegisterMotor1+0x13e>
              *regdata16 = NTC_GetAvTemp_C(&TempSensor_M1);
 80033c4:	4822      	ldr	r0, [pc, #136]	; (8003450 <RI_GetRegisterMotor1+0x74c>)
 80033c6:	f004 fb89 	bl	8007adc <NTC_GetAvTemp_C>
 80033ca:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 80033cc:	2000      	movs	r0, #0
              break;
 80033ce:	e538      	b.n	8002e42 <RI_GetRegisterMotor1+0x13e>
              *regdata16 = MCI_GetVqd(pMCIN).d;
 80033d0:	4820      	ldr	r0, [pc, #128]	; (8003454 <RI_GetRegisterMotor1+0x750>)
 80033d2:	f7fe f835 	bl	8001440 <MCI_GetVqd>
 80033d6:	f3c0 400f 	ubfx	r0, r0, #16, #16
 80033da:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 80033dc:	2000      	movs	r0, #0
              break;
 80033de:	e530      	b.n	8002e42 <RI_GetRegisterMotor1+0x13e>
              *regdata16 = SPD_GetElAngle ((SpeednPosFdbk_Handle_t*) &ENCODER_M1); //cstat !MISRAC2012-Rule-11.3
 80033e0:	481d      	ldr	r0, [pc, #116]	; (8003458 <RI_GetRegisterMotor1+0x754>)
 80033e2:	f005 fc73 	bl	8008ccc <SPD_GetElAngle>
 80033e6:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 80033e8:	2000      	movs	r0, #0
              break;
 80033ea:	e52a      	b.n	8002e42 <RI_GetRegisterMotor1+0x13e>
              *regdata16 = MCI_GetIalphabeta(pMCIN).alpha;
 80033ec:	4819      	ldr	r0, [pc, #100]	; (8003454 <RI_GetRegisterMotor1+0x750>)
 80033ee:	f7fd fffd 	bl	80013ec <MCI_GetIalphabeta>
 80033f2:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 80033f4:	2000      	movs	r0, #0
              break;
 80033f6:	e524      	b.n	8002e42 <RI_GetRegisterMotor1+0x13e>
              *regdataU16 = (uint16_t)PID_GetKPDivisorPOW2(&PIDSpeedHandle_M1);
 80033f8:	4818      	ldr	r0, [pc, #96]	; (800345c <RI_GetRegisterMotor1+0x758>)
 80033fa:	f004 fb97 	bl	8007b2c <PID_GetKPDivisorPOW2>
 80033fe:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8003400:	2000      	movs	r0, #0
              break;
 8003402:	e51e      	b.n	8002e42 <RI_GetRegisterMotor1+0x13e>
              *regdata16 = PID_GetKP( &PID_PosParamsM1);
 8003404:	4816      	ldr	r0, [pc, #88]	; (8003460 <RI_GetRegisterMotor1+0x75c>)
 8003406:	f004 fb87 	bl	8007b18 <PID_GetKP>
 800340a:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 800340c:	2000      	movs	r0, #0
              break;
 800340e:	e518      	b.n	8002e42 <RI_GetRegisterMotor1+0x13e>
              *regdataU16 = PID_GetKDDivisorPOW2(&PIDSpeedHandle_M1);
 8003410:	4812      	ldr	r0, [pc, #72]	; (800345c <RI_GetRegisterMotor1+0x758>)
 8003412:	f004 fbb3 	bl	8007b7c <PID_GetKDDivisorPOW2>
 8003416:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8003418:	2000      	movs	r0, #0
              break;
 800341a:	e512      	b.n	8002e42 <RI_GetRegisterMotor1+0x13e>
              *regdata16 = MCI_GetIqdref(pMCIN).d;
 800341c:	480d      	ldr	r0, [pc, #52]	; (8003454 <RI_GetRegisterMotor1+0x750>)
 800341e:	f7fe f801 	bl	8001424 <MCI_GetIqdref>
 8003422:	f3c0 400f 	ubfx	r0, r0, #16, #16
 8003426:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8003428:	2000      	movs	r0, #0
              break;
 800342a:	e50a      	b.n	8002e42 <RI_GetRegisterMotor1+0x13e>
              *regdata16 = MCI_GetIqd(pMCIN).q;
 800342c:	4809      	ldr	r0, [pc, #36]	; (8003454 <RI_GetRegisterMotor1+0x750>)
 800342e:	f7fd ffeb 	bl	8001408 <MCI_GetIqd>
 8003432:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8003434:	2000      	movs	r0, #0
              break;
 8003436:	e504      	b.n	8002e42 <RI_GetRegisterMotor1+0x13e>
              *regdata16 = PID_GetKD(&PIDSpeedHandle_M1);
 8003438:	4808      	ldr	r0, [pc, #32]	; (800345c <RI_GetRegisterMotor1+0x758>)
 800343a:	f004 fb9b 	bl	8007b74 <PID_GetKD>
 800343e:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8003440:	2000      	movs	r0, #0
              break;
 8003442:	e4fe      	b.n	8002e42 <RI_GetRegisterMotor1+0x13e>
 8003444:	2005      	movs	r0, #5
 8003446:	e4cc      	b.n	8002de2 <RI_GetRegisterMotor1+0xde>
 8003448:	200000e8 	.word	0x200000e8
 800344c:	200000bc 	.word	0x200000bc
 8003450:	200002dc 	.word	0x200002dc
 8003454:	200006e0 	.word	0x200006e0
 8003458:	20000020 	.word	0x20000020
 800345c:	20000114 	.word	0x20000114
 8003460:	20000140 	.word	0x20000140

08003464 <RI_GetIDSize>:
  return (retVal);
}

uint8_t RI_GetIDSize(uint16_t dataID)
{
  uint8_t typeID = ((uint8_t)dataID) & TYPE_MASK;
 8003464:	f000 0038 	and.w	r0, r0, #56	; 0x38
 8003468:	3808      	subs	r0, #8
 800346a:	b2c0      	uxtb	r0, r0
 800346c:	2810      	cmp	r0, #16
 800346e:	bf9a      	itte	ls
 8003470:	4b01      	ldrls	r3, [pc, #4]	; (8003478 <RI_GetIDSize+0x14>)
 8003472:	5c18      	ldrbls	r0, [r3, r0]
 8003474:	2000      	movhi	r0, #0
      break;
    }
  }

  return (result);
}
 8003476:	4770      	bx	lr
 8003478:	0800976c 	.word	0x0800976c

0800347c <RI_GetPtrReg>:

    MCI_Handle_t *pMCIN = &Mci[0];
    uint16_t regID = dataID & REG_MASK;
    uint8_t typeID = ((uint8_t)dataID) & TYPE_MASK;

    switch (typeID)
 800347c:	f000 0338 	and.w	r3, r0, #56	; 0x38
 8003480:	2b10      	cmp	r3, #16
 8003482:	d003      	beq.n	800348c <RI_GetPtrReg+0x10>
 8003484:	4a3c      	ldr	r2, [pc, #240]	; (8003578 <RI_GetPtrReg+0xfc>)
          }

          default:
          {
            *dataPtr = &nullData16;
            retVal = MCP_ERROR_UNKNOWN_REG;
 8003486:	2005      	movs	r0, #5
            *dataPtr = &(pMCIN->pFOCVars->Iab.b);
 8003488:	600a      	str	r2, [r1, #0]
    }
#ifdef NULL_PTR_CHECK_REG_INT
  }
#endif
  return (retVal);
}
 800348a:	4770      	bx	lr
    uint16_t regID = dataID & REG_MASK;
 800348c:	f020 0007 	bic.w	r0, r0, #7
 8003490:	f5b0 6f19 	cmp.w	r0, #2448	; 0x990
 8003494:	b283      	uxth	r3, r0
 8003496:	d051      	beq.n	800353c <RI_GetPtrReg+0xc0>
 8003498:	d80e      	bhi.n	80034b8 <RI_GetPtrReg+0x3c>
 800349a:	f5b3 6f09 	cmp.w	r3, #2192	; 0x890
 800349e:	d052      	beq.n	8003546 <RI_GetPtrReg+0xca>
 80034a0:	d923      	bls.n	80034ea <RI_GetPtrReg+0x6e>
 80034a2:	f5b3 6f11 	cmp.w	r3, #2320	; 0x910
 80034a6:	d053      	beq.n	8003550 <RI_GetPtrReg+0xd4>
 80034a8:	f5b3 6f15 	cmp.w	r3, #2384	; 0x950
 80034ac:	d115      	bne.n	80034da <RI_GetPtrReg+0x5e>
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.q);
 80034ae:	4b33      	ldr	r3, [pc, #204]	; (800357c <RI_GetPtrReg+0x100>)
 80034b0:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 80034b2:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.q);
 80034b4:	3210      	adds	r2, #16
            break;
 80034b6:	e7e7      	b.n	8003488 <RI_GetPtrReg+0xc>
 80034b8:	f5b3 6f29 	cmp.w	r3, #2704	; 0xa90
 80034bc:	d04d      	beq.n	800355a <RI_GetPtrReg+0xde>
 80034be:	d91f      	bls.n	8003500 <RI_GetPtrReg+0x84>
 80034c0:	f5b3 6f2d 	cmp.w	r3, #2768	; 0xad0
 80034c4:	d036      	beq.n	8003534 <RI_GetPtrReg+0xb8>
 80034c6:	482e      	ldr	r0, [pc, #184]	; (8003580 <RI_GetPtrReg+0x104>)
 80034c8:	4a2b      	ldr	r2, [pc, #172]	; (8003578 <RI_GetPtrReg+0xfc>)
 80034ca:	f5b3 6f31 	cmp.w	r3, #2832	; 0xb10
 80034ce:	bf0a      	itet	eq
 80034d0:	4602      	moveq	r2, r0
 80034d2:	2005      	movne	r0, #5
 80034d4:	2000      	moveq	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iab.b);
 80034d6:	600a      	str	r2, [r1, #0]
}
 80034d8:	4770      	bx	lr
 80034da:	f5b3 6f0d 	cmp.w	r3, #2256	; 0x8d0
 80034de:	d1d1      	bne.n	8003484 <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Iqd.q);
 80034e0:	4b26      	ldr	r3, [pc, #152]	; (800357c <RI_GetPtrReg+0x100>)
 80034e2:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 80034e4:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqd.q);
 80034e6:	320c      	adds	r2, #12
            break;
 80034e8:	e7ce      	b.n	8003488 <RI_GetPtrReg+0xc>
 80034ea:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 80034ee:	d039      	beq.n	8003564 <RI_GetPtrReg+0xe8>
 80034f0:	f5b3 6f05 	cmp.w	r3, #2128	; 0x850
 80034f4:	d10f      	bne.n	8003516 <RI_GetPtrReg+0x9a>
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.alpha);
 80034f6:	4b21      	ldr	r3, [pc, #132]	; (800357c <RI_GetPtrReg+0x100>)
 80034f8:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 80034fa:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.alpha);
 80034fc:	3204      	adds	r2, #4
            break;
 80034fe:	e7c3      	b.n	8003488 <RI_GetPtrReg+0xc>
 8003500:	f5b3 6f21 	cmp.w	r3, #2576	; 0xa10
 8003504:	d033      	beq.n	800356e <RI_GetPtrReg+0xf2>
 8003506:	f5b3 6f25 	cmp.w	r3, #2640	; 0xa50
 800350a:	d10b      	bne.n	8003524 <RI_GetPtrReg+0xa8>
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.alpha);
 800350c:	4b1b      	ldr	r3, [pc, #108]	; (800357c <RI_GetPtrReg+0x100>)
 800350e:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8003510:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.alpha);
 8003512:	321a      	adds	r2, #26
            break;
 8003514:	e7b8      	b.n	8003488 <RI_GetPtrReg+0xc>
 8003516:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800351a:	d1b3      	bne.n	8003484 <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 800351c:	4b17      	ldr	r3, [pc, #92]	; (800357c <RI_GetPtrReg+0x100>)
  uint8_t retVal = MCP_CMD_OK;
 800351e:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 8003520:	685a      	ldr	r2, [r3, #4]
             break;
 8003522:	e7b1      	b.n	8003488 <RI_GetPtrReg+0xc>
 8003524:	f5b3 6f1d 	cmp.w	r3, #2512	; 0x9d0
 8003528:	d1ac      	bne.n	8003484 <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Vqd.q);
 800352a:	4b14      	ldr	r3, [pc, #80]	; (800357c <RI_GetPtrReg+0x100>)
 800352c:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 800352e:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Vqd.q);
 8003530:	3216      	adds	r2, #22
            break;
 8003532:	e7a9      	b.n	8003488 <RI_GetPtrReg+0xc>
 8003534:	4a13      	ldr	r2, [pc, #76]	; (8003584 <RI_GetPtrReg+0x108>)
            *dataPtr = &(pMCIN->pFOCVars->Iab.b);
 8003536:	600a      	str	r2, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 8003538:	2000      	movs	r0, #0
}
 800353a:	4770      	bx	lr
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.d);
 800353c:	4b0f      	ldr	r3, [pc, #60]	; (800357c <RI_GetPtrReg+0x100>)
 800353e:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8003540:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.d);
 8003542:	3212      	adds	r2, #18
            break;
 8003544:	e7a0      	b.n	8003488 <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.beta);
 8003546:	4b0d      	ldr	r3, [pc, #52]	; (800357c <RI_GetPtrReg+0x100>)
 8003548:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 800354a:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.beta);
 800354c:	3206      	adds	r2, #6
            break;
 800354e:	e79b      	b.n	8003488 <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Iqd.d);
 8003550:	4b0a      	ldr	r3, [pc, #40]	; (800357c <RI_GetPtrReg+0x100>)
 8003552:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8003554:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqd.d);
 8003556:	320e      	adds	r2, #14
            break;
 8003558:	e796      	b.n	8003488 <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.beta);
 800355a:	4b08      	ldr	r3, [pc, #32]	; (800357c <RI_GetPtrReg+0x100>)
 800355c:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 800355e:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.beta);
 8003560:	321c      	adds	r2, #28
            break;
 8003562:	e791      	b.n	8003488 <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Iab.b);
 8003564:	4b05      	ldr	r3, [pc, #20]	; (800357c <RI_GetPtrReg+0x100>)
 8003566:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8003568:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iab.b);
 800356a:	3202      	adds	r2, #2
            break;
 800356c:	e78c      	b.n	8003488 <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Vqd.d);
 800356e:	4b03      	ldr	r3, [pc, #12]	; (800357c <RI_GetPtrReg+0x100>)
 8003570:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8003572:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Vqd.d);
 8003574:	3218      	adds	r2, #24
            break;
 8003576:	e787      	b.n	8003488 <RI_GetPtrReg+0xc>
 8003578:	200018e0 	.word	0x200018e0
 800357c:	200006e0 	.word	0x200006e0
 8003580:	2000002c 	.word	0x2000002c
 8003584:	20000024 	.word	0x20000024

08003588 <RCM_RegisterRegConv>:

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003588:	4980      	ldr	r1, [pc, #512]	; (800378c <RCM_RegisterRegConv+0x204>)
 800358a:	680b      	ldr	r3, [r1, #0]
{
 800358c:	b570      	push	{r4, r5, r6, lr}
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800358e:	2b00      	cmp	r3, #0
 8003590:	f000 8094 	beq.w	80036bc <RCM_RegisterRegConv+0x134>
        /* Nothing to do */
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault */
      if (RCM_handle_array [i] != 0)
      {
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003594:	f890 c004 	ldrb.w	ip, [r0, #4]
 8003598:	791a      	ldrb	r2, [r3, #4]
 800359a:	4594      	cmp	ip, r2
 800359c:	d027      	beq.n	80035ee <RCM_RegisterRegConv+0x66>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800359e:	684a      	ldr	r2, [r1, #4]
 80035a0:	2a00      	cmp	r2, #0
 80035a2:	f000 80a6 	beq.w	80036f2 <RCM_RegisterRegConv+0x16a>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80035a6:	7914      	ldrb	r4, [r2, #4]
 80035a8:	4564      	cmp	r4, ip
  uint8_t handle = 255U;
 80035aa:	f04f 03ff 	mov.w	r3, #255	; 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80035ae:	f000 808e 	beq.w	80036ce <RCM_RegisterRegConv+0x146>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80035b2:	688c      	ldr	r4, [r1, #8]
 80035b4:	2c00      	cmp	r4, #0
 80035b6:	f000 80c0 	beq.w	800373a <RCM_RegisterRegConv+0x1b2>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80035ba:	7922      	ldrb	r2, [r4, #4]
 80035bc:	4562      	cmp	r2, ip
 80035be:	f000 808f 	beq.w	80036e0 <RCM_RegisterRegConv+0x158>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80035c2:	68ca      	ldr	r2, [r1, #12]
 80035c4:	2a00      	cmp	r2, #0
 80035c6:	f000 80c1 	beq.w	800374c <RCM_RegisterRegConv+0x1c4>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80035ca:	7914      	ldrb	r4, [r2, #4]
 80035cc:	4564      	cmp	r4, ip
 80035ce:	f000 809c 	beq.w	800370a <RCM_RegisterRegConv+0x182>
    while (i < RCM_MAX_CONV)
 80035d2:	f04f 0200 	mov.w	r2, #0
 80035d6:	f363 0207 	bfi	r2, r3, #0, #8
 80035da:	f363 220f 	bfi	r2, r3, #8, #8
      {
        /* Nothing to do */
      }
      i++;
    }
    if (handle < RCM_MAX_CONV)
 80035de:	2b03      	cmp	r3, #3
 80035e0:	4614      	mov	r4, r2
 80035e2:	bf88      	it	hi
 80035e4:	23ff      	movhi	r3, #255	; 0xff
 80035e6:	f240 80ce 	bls.w	8003786 <RCM_RegisterRegConv+0x1fe>
      /* Nothing to do handle is already set to error value : 255 */
    }
#ifdef NULL_PTR_CHECK_REG_CON_MNG
  }
#endif
  regConv->convHandle = handle;
 80035ea:	7303      	strb	r3, [r0, #12]
}
 80035ec:	bd70      	pop	{r4, r5, r6, pc}
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 80035ee:	6802      	ldr	r2, [r0, #0]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d1d3      	bne.n	800359e <RCM_RegisterRegConv+0x16>
    uint8_t i = 0;
 80035f6:	2300      	movs	r3, #0
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 80035f8:	461c      	mov	r4, r3
      RCM_handle_array [handle] = regConv;
 80035fa:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
      RCM_CB_array [handle].cb = NULL; /* If a previous callback was attached, it is cleared */
 80035fe:	4d64      	ldr	r5, [pc, #400]	; (8003790 <RCM_RegisterRegConv+0x208>)
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003600:	6891      	ldr	r1, [r2, #8]
 8003602:	2600      	movs	r6, #0
 8003604:	f845 6033 	str.w	r6, [r5, r3, lsl #3]
 8003608:	07ce      	lsls	r6, r1, #31
 800360a:	d422      	bmi.n	8003652 <RCM_RegisterRegConv+0xca>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 800360c:	6851      	ldr	r1, [r2, #4]
 800360e:	f021 0104 	bic.w	r1, r1, #4
 8003612:	6051      	str	r1, [r2, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8003614:	2104      	movs	r1, #4
 8003616:	6011      	str	r1, [r2, #0]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_JEOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8003618:	6851      	ldr	r1, [r2, #4]
 800361a:	f021 0120 	bic.w	r1, r1, #32
 800361e:	6051      	str	r1, [r2, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8003620:	2120      	movs	r1, #32
 8003622:	6011      	str	r1, [r2, #0]
  MODIFY_REG(ADCx->CR,
 8003624:	6891      	ldr	r1, [r2, #8]
 8003626:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 800362a:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 800362e:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8003632:	6091      	str	r1, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003634:	6891      	ldr	r1, [r2, #8]
 8003636:	2900      	cmp	r1, #0
 8003638:	dbfc      	blt.n	8003634 <RCM_RegisterRegConv+0xac>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 800363a:	6811      	ldr	r1, [r2, #0]
 800363c:	07cd      	lsls	r5, r1, #31
 800363e:	d408      	bmi.n	8003652 <RCM_RegisterRegConv+0xca>
  MODIFY_REG(ADCx->CR,
 8003640:	4d54      	ldr	r5, [pc, #336]	; (8003794 <RCM_RegisterRegConv+0x20c>)
 8003642:	6891      	ldr	r1, [r2, #8]
 8003644:	4029      	ands	r1, r5
 8003646:	f041 0101 	orr.w	r1, r1, #1
 800364a:	6091      	str	r1, [r2, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 800364c:	6811      	ldr	r1, [r2, #0]
 800364e:	07c9      	lsls	r1, r1, #31
 8003650:	d5f7      	bpl.n	8003642 <RCM_RegisterRegConv+0xba>
      RCM_NoInj_array[handle].enable = false;
 8003652:	4d51      	ldr	r5, [pc, #324]	; (8003798 <RCM_RegisterRegConv+0x210>)
 8003654:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8003658:	0049      	lsls	r1, r1, #1
      RCM_NoInj_array[handle].prev = handle;
 800365a:	eb05 0c01 	add.w	ip, r5, r1
      RCM_NoInj_array[handle].enable = false;
 800365e:	f04f 0e00 	mov.w	lr, #0
 8003662:	f805 e001 	strb.w	lr, [r5, r1]
      RCM_NoInj_array[handle].prev = handle;
 8003666:	f8ac 4004 	strh.w	r4, [ip, #4]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 800366a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800366c:	f021 010f 	bic.w	r1, r1, #15
 8003670:	6311      	str	r1, [r2, #48]	; 0x30
      LL_ADC_SetChannelSamplingTime(regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 8003672:	f890 c004 	ldrb.w	ip, [r0, #4]
 8003676:	f1bc 0f09 	cmp.w	ip, #9
 800367a:	d84f      	bhi.n	800371c <RCM_RegisterRegConv+0x194>
 800367c:	eb0c 044c 	add.w	r4, ip, ip, lsl #1
 8003680:	ea4f 618c 	mov.w	r1, ip, lsl #26
 8003684:	ea41 5104 	orr.w	r1, r1, r4, lsl #20
 8003688:	2401      	movs	r4, #1
 800368a:	fa04 f40c 	lsl.w	r4, r4, ip
 800368e:	4321      	orrs	r1, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003690:	0dcc      	lsrs	r4, r1, #23
 8003692:	f004 0404 	and.w	r4, r4, #4
 8003696:	f102 0514 	add.w	r5, r2, #20
  MODIFY_REG(*preg,
 800369a:	6886      	ldr	r6, [r0, #8]
 800369c:	592a      	ldr	r2, [r5, r4]
 800369e:	f3c1 5104 	ubfx	r1, r1, #20, #5
 80036a2:	f04f 0e07 	mov.w	lr, #7
 80036a6:	fa06 fc01 	lsl.w	ip, r6, r1
 80036aa:	fa0e f101 	lsl.w	r1, lr, r1
 80036ae:	ea22 0101 	bic.w	r1, r2, r1
 80036b2:	ea41 010c 	orr.w	r1, r1, ip
 80036b6:	5129      	str	r1, [r5, r4]
  regConv->convHandle = handle;
 80036b8:	7303      	strb	r3, [r0, #12]
}
 80036ba:	bd70      	pop	{r4, r5, r6, pc}
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80036bc:	684a      	ldr	r2, [r1, #4]
 80036be:	2a00      	cmp	r2, #0
 80036c0:	d04b      	beq.n	800375a <RCM_RegisterRegConv+0x1d2>
 80036c2:	f890 c004 	ldrb.w	ip, [r0, #4]
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80036c6:	7914      	ldrb	r4, [r2, #4]
 80036c8:	4564      	cmp	r4, ip
 80036ca:	f47f af72 	bne.w	80035b2 <RCM_RegisterRegConv+0x2a>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 80036ce:	6814      	ldr	r4, [r2, #0]
 80036d0:	6802      	ldr	r2, [r0, #0]
 80036d2:	4294      	cmp	r4, r2
 80036d4:	f47f af6d 	bne.w	80035b2 <RCM_RegisterRegConv+0x2a>
      i++;
 80036d8:	2301      	movs	r3, #1
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 80036da:	f240 1401 	movw	r4, #257	; 0x101
 80036de:	e78c      	b.n	80035fa <RCM_RegisterRegConv+0x72>
 80036e0:	6824      	ldr	r4, [r4, #0]
 80036e2:	6802      	ldr	r2, [r0, #0]
 80036e4:	4294      	cmp	r4, r2
 80036e6:	f47f af6c 	bne.w	80035c2 <RCM_RegisterRegConv+0x3a>
      i++;
 80036ea:	2302      	movs	r3, #2
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80036ec:	f240 2402 	movw	r4, #514	; 0x202
 80036f0:	e783      	b.n	80035fa <RCM_RegisterRegConv+0x72>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80036f2:	688c      	ldr	r4, [r1, #8]
      i++;
 80036f4:	2301      	movs	r3, #1
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80036f6:	2c00      	cmp	r4, #0
 80036f8:	f47f af5f 	bne.w	80035ba <RCM_RegisterRegConv+0x32>
 80036fc:	68ca      	ldr	r2, [r1, #12]
 80036fe:	2a00      	cmp	r2, #0
 8003700:	d03b      	beq.n	800377a <RCM_RegisterRegConv+0x1f2>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003702:	7915      	ldrb	r5, [r2, #4]
 8003704:	7904      	ldrb	r4, [r0, #4]
 8003706:	42a5      	cmp	r5, r4
 8003708:	d137      	bne.n	800377a <RCM_RegisterRegConv+0x1f2>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 800370a:	6814      	ldr	r4, [r2, #0]
 800370c:	6802      	ldr	r2, [r0, #0]
 800370e:	4294      	cmp	r4, r2
 8003710:	f47f af5f 	bne.w	80035d2 <RCM_RegisterRegConv+0x4a>
      i++;
 8003714:	2303      	movs	r3, #3
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8003716:	f240 3403 	movw	r4, #771	; 0x303
 800371a:	e76e      	b.n	80035fa <RCM_RegisterRegConv+0x72>
      LL_ADC_SetChannelSamplingTime(regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 800371c:	f06f 011d 	mvn.w	r1, #29
 8003720:	2403      	movs	r4, #3
 8003722:	fb14 140c 	smlabb	r4, r4, ip, r1
 8003726:	2101      	movs	r1, #1
 8003728:	fa01 f10c 	lsl.w	r1, r1, ip
 800372c:	ea41 5104 	orr.w	r1, r1, r4, lsl #20
 8003730:	ea41 618c 	orr.w	r1, r1, ip, lsl #26
 8003734:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8003738:	e7aa      	b.n	8003690 <RCM_RegisterRegConv+0x108>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800373a:	2b04      	cmp	r3, #4
 800373c:	d913      	bls.n	8003766 <RCM_RegisterRegConv+0x1de>
 800373e:	68cb      	ldr	r3, [r1, #12]
 8003740:	b113      	cbz	r3, 8003748 <RCM_RegisterRegConv+0x1c0>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003742:	791a      	ldrb	r2, [r3, #4]
 8003744:	4562      	cmp	r2, ip
 8003746:	d010      	beq.n	800376a <RCM_RegisterRegConv+0x1e2>
 8003748:	6802      	ldr	r2, [r0, #0]
 800374a:	e7ce      	b.n	80036ea <RCM_RegisterRegConv+0x162>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800374c:	2b04      	cmp	r3, #4
 800374e:	d914      	bls.n	800377a <RCM_RegisterRegConv+0x1f2>
 8003750:	6802      	ldr	r2, [r0, #0]
      i++;
 8003752:	2303      	movs	r3, #3
 8003754:	f240 3403 	movw	r4, #771	; 0x303
 8003758:	e74f      	b.n	80035fa <RCM_RegisterRegConv+0x72>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800375a:	688c      	ldr	r4, [r1, #8]
 800375c:	b11c      	cbz	r4, 8003766 <RCM_RegisterRegConv+0x1de>
 800375e:	f890 c004 	ldrb.w	ip, [r0, #4]
    uint8_t i = 0;
 8003762:	4613      	mov	r3, r2
 8003764:	e729      	b.n	80035ba <RCM_RegisterRegConv+0x32>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003766:	4623      	mov	r3, r4
 8003768:	e7c8      	b.n	80036fc <RCM_RegisterRegConv+0x174>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	6802      	ldr	r2, [r0, #0]
 800376e:	4293      	cmp	r3, r2
 8003770:	d0d0      	beq.n	8003714 <RCM_RegisterRegConv+0x18c>
 8003772:	f240 2402 	movw	r4, #514	; 0x202
      i++;
 8003776:	2302      	movs	r3, #2
 8003778:	e73f      	b.n	80035fa <RCM_RegisterRegConv+0x72>
    while (i < RCM_MAX_CONV)
 800377a:	f04f 0400 	mov.w	r4, #0
 800377e:	f363 0407 	bfi	r4, r3, #0, #8
 8003782:	f363 240f 	bfi	r4, r3, #8, #8
 8003786:	6802      	ldr	r2, [r0, #0]
    if (handle < RCM_MAX_CONV)
 8003788:	e737      	b.n	80035fa <RCM_RegisterRegConv+0x72>
 800378a:	bf00      	nop
 800378c:	20001928 	.word	0x20001928
 8003790:	200018e4 	.word	0x200018e4
 8003794:	7fffffc0 	.word	0x7fffffc0
 8003798:	20001904 	.word	0x20001904

0800379c <RCM_ExecRegularConv>:
 * Otherwise, the latest stored conversion result will be returned.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
uint16_t RCM_ExecRegularConv (RegConv_t *regConv)
{
 800379c:	b510      	push	{r4, lr}
  uint16_t retVal;
  uint8_t handle = regConv->convHandle;
 800379e:	7b03      	ldrb	r3, [r0, #12]
  uint8_t formerNext;
  uint8_t i=0;
  uint8_t LastEnable = RCM_MAX_CONV;

  if (false == RCM_NoInj_array [handle].enable)
 80037a0:	4a5e      	ldr	r2, [pc, #376]	; (800391c <RCM_ExecRegularConv+0x180>)
 80037a2:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 80037a6:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80037aa:	f812 1011 	ldrb.w	r1, [r2, r1, lsl #1]
 80037ae:	2900      	cmp	r1, #0
 80037b0:	d13c      	bne.n	800382c <RCM_ExecRegularConv+0x90>
  {
    /* Find position in the list */
    while (i < RCM_MAX_CONV)
    {
      if (true == RCM_NoInj_array [i].enable)
 80037b2:	7810      	ldrb	r0, [r2, #0]
 80037b4:	b9a8      	cbnz	r0, 80037e2 <RCM_ExecRegularConv+0x46>
  uint8_t LastEnable = RCM_MAX_CONV;
 80037b6:	2104      	movs	r1, #4
      if (true == RCM_NoInj_array [i].enable)
 80037b8:	7990      	ldrb	r0, [r2, #6]
 80037ba:	2800      	cmp	r0, #0
 80037bc:	d07f      	beq.n	80038be <RCM_ExecRegularConv+0x122>
      {
        if (RCM_NoInj_array[i].next > handle)
 80037be:	7ad0      	ldrb	r0, [r2, #11]
 80037c0:	4283      	cmp	r3, r0
 80037c2:	f0c0 809b 	bcc.w	80038fc <RCM_ExecRegularConv+0x160>
      if (true == RCM_NoInj_array [i].enable)
 80037c6:	7b11      	ldrb	r1, [r2, #12]
 80037c8:	2900      	cmp	r1, #0
 80037ca:	f000 809a 	beq.w	8003902 <RCM_ExecRegularConv+0x166>
        if (RCM_NoInj_array[i].next > handle)
 80037ce:	7c50      	ldrb	r0, [r2, #17]
 80037d0:	4283      	cmp	r3, r0
 80037d2:	f0c0 80a0 	bcc.w	8003916 <RCM_ExecRegularConv+0x17a>
      if (true == RCM_NoInj_array [i].enable)
 80037d6:	7c91      	ldrb	r1, [r2, #18]
 80037d8:	2900      	cmp	r1, #0
 80037da:	f040 8096 	bne.w	800390a <RCM_ExecRegularConv+0x16e>
      }
      else
      {
        /* Nothing to do */
      }
      i++;
 80037de:	2102      	movs	r1, #2
 80037e0:	e074      	b.n	80038cc <RCM_ExecRegularConv+0x130>
        if (RCM_NoInj_array[i].next > handle)
 80037e2:	7950      	ldrb	r0, [r2, #5]
 80037e4:	4298      	cmp	r0, r3
 80037e6:	d9e7      	bls.n	80037b8 <RCM_ExecRegularConv+0x1c>
      if (true == RCM_NoInj_array [i].enable)
 80037e8:	468e      	mov	lr, r1
          RCM_NoInj_array[handle].next = formerNext;
 80037ea:	eb0c 0403 	add.w	r4, ip, r3
 80037ee:	eb02 0444 	add.w	r4, r2, r4, lsl #1
          RCM_NoInj_array[i].next = handle;
 80037f2:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
          RCM_NoInj_array[handle].prev = i;
 80037f6:	7121      	strb	r1, [r4, #4]
          RCM_NoInj_array[handle].next = formerNext;
 80037f8:	7160      	strb	r0, [r4, #5]
      }
    }
    /* The handle is now linked with others, we can set the enable flag */
    RCM_NoInj_array[handle].enable = true;
    RCM_NoInj_array[handle].status = notvalid;
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 80037fa:	4c49      	ldr	r4, [pc, #292]	; (8003920 <RCM_ExecRegularConv+0x184>)
          RCM_NoInj_array[formerNext].prev = handle;
 80037fc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
          RCM_NoInj_array[i].next = handle;
 8003800:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
          RCM_NoInj_array[formerNext].prev = handle;
 8003804:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8003808:	7821      	ldrb	r1, [r4, #0]
          RCM_NoInj_array[i].next = handle;
 800380a:	f88e 3005 	strb.w	r3, [lr, #5]
          RCM_NoInj_array[formerNext].prev = handle;
 800380e:	7103      	strb	r3, [r0, #4]
    RCM_NoInj_array[handle].enable = true;
 8003810:	eb0c 0003 	add.w	r0, ip, r3
 8003814:	f04f 0e01 	mov.w	lr, #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8003818:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    RCM_NoInj_array[handle].enable = true;
 800381c:	f822 e010 	strh.w	lr, [r2, r0, lsl #1]
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8003820:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8003824:	7849      	ldrb	r1, [r1, #1]
 8003826:	4571      	cmp	r1, lr
    {/* Select the new conversion to be the next scheduled only if a conversion is not ongoing */
      RCM_currentHandle = handle;
 8003828:	bf18      	it	ne
 800382a:	7023      	strbne	r3, [r4, #0]
  }
  else
  {
    /* Nothing to do the current handle is already scheduled */
  }
  if (false == PWM_Handle_M1.ADCRegularLocked)
 800382c:	493d      	ldr	r1, [pc, #244]	; (8003924 <RCM_ExecRegularConv+0x188>)
 800382e:	f891 10a0 	ldrb.w	r1, [r1, #160]	; 0xa0
 8003832:	2900      	cmp	r1, #0
 8003834:	d133      	bne.n	800389e <RCM_ExecRegularConv+0x102>
  /* The ADC is free to be used asynchronously */
  {
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8003836:	493c      	ldr	r1, [pc, #240]	; (8003928 <RCM_ExecRegularConv+0x18c>)
 8003838:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
                                 LL_ADC_REG_RANK_1,
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 800383c:	790c      	ldrb	r4, [r1, #4]
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 800383e:	6808      	ldr	r0, [r1, #0]
 8003840:	2c09      	cmp	r4, #9
 8003842:	d931      	bls.n	80038a8 <RCM_ExecRegularConv+0x10c>
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 8003844:	f06f 011d 	mvn.w	r1, #29
 8003848:	f04f 0e03 	mov.w	lr, #3
 800384c:	fb1e 1e04 	smlabb	lr, lr, r4, r1
 8003850:	2101      	movs	r1, #1
 8003852:	40a1      	lsls	r1, r4
 8003854:	ea41 510e 	orr.w	r1, r1, lr, lsl #20
 8003858:	ea41 6184 	orr.w	r1, r1, r4, lsl #26
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 800385c:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
  MODIFY_REG(*preg,
 8003860:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8003862:	0d09      	lsrs	r1, r1, #20
 8003864:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
 8003868:	f424 64f8 	bic.w	r4, r4, #1984	; 0x7c0
 800386c:	4321      	orrs	r1, r4
 800386e:	6301      	str	r1, [r0, #48]	; 0x30
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8003870:	6c01      	ldr	r1, [r0, #64]	; 0x40
  MODIFY_REG(ADCx->CR,
 8003872:	6881      	ldr	r1, [r0, #8]
 8003874:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003878:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 800387c:	f041 0104 	orr.w	r1, r1, #4
 8003880:	6081      	str	r1, [r0, #8]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 8003882:	6801      	ldr	r1, [r0, #0]
 8003884:	0749      	lsls	r1, r1, #29
 8003886:	d5fc      	bpl.n	8003882 <RCM_ExecRegularConv+0xe6>
    {
      /* Nothing to do */
    }

    /* Read the "Regular" conversion (Not related to current sampling) */
    RCM_NoInj_array[handle].value = LL_ADC_REG_ReadConversionData12(RCM_handle_array[handle]->regADC);
 8003888:	eb0c 0103 	add.w	r1, ip, r3
 800388c:	eb02 0141 	add.w	r1, r2, r1, lsl #1
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8003890:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8003892:	8048      	strh	r0, [r1, #2]
    RCM_currentHandle = RCM_NoInj_array[handle].next;
 8003894:	4822      	ldr	r0, [pc, #136]	; (8003920 <RCM_ExecRegularConv+0x184>)
 8003896:	794c      	ldrb	r4, [r1, #5]
 8003898:	7004      	strb	r4, [r0, #0]
    RCM_NoInj_array[handle].status = valid;
 800389a:	2002      	movs	r0, #2
 800389c:	7048      	strb	r0, [r1, #1]
  }
  else
  {
    /* Nothing to do */
  }
  retVal = RCM_NoInj_array[handle].value;
 800389e:	449c      	add	ip, r3
 80038a0:	eb02 024c 	add.w	r2, r2, ip, lsl #1
  return (retVal);
}
 80038a4:	8850      	ldrh	r0, [r2, #2]
 80038a6:	bd10      	pop	{r4, pc}
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 80038a8:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 80038ac:	06a1      	lsls	r1, r4, #26
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 80038ae:	ea41 510e 	orr.w	r1, r1, lr, lsl #20
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 80038b2:	f04f 0e01 	mov.w	lr, #1
 80038b6:	fa0e f404 	lsl.w	r4, lr, r4
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 80038ba:	4321      	orrs	r1, r4
 80038bc:	e7d0      	b.n	8003860 <RCM_ExecRegularConv+0xc4>
      if (true == RCM_NoInj_array [i].enable)
 80038be:	7b10      	ldrb	r0, [r2, #12]
 80038c0:	2800      	cmp	r0, #0
 80038c2:	d184      	bne.n	80037ce <RCM_ExecRegularConv+0x32>
 80038c4:	7c90      	ldrb	r0, [r2, #18]
 80038c6:	bb00      	cbnz	r0, 800390a <RCM_ExecRegularConv+0x16e>
       if (LastEnable != RCM_MAX_CONV )
 80038c8:	2904      	cmp	r1, #4
 80038ca:	d013      	beq.n	80038f4 <RCM_ExecRegularConv+0x158>
         formerNext = RCM_NoInj_array[LastEnable].next;
 80038cc:	eb01 0041 	add.w	r0, r1, r1, lsl #1
         RCM_NoInj_array[handle].next = formerNext;
 80038d0:	eb0c 0403 	add.w	r4, ip, r3
 80038d4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
         formerNext = RCM_NoInj_array[LastEnable].next;
 80038d8:	eb02 0040 	add.w	r0, r2, r0, lsl #1
         RCM_NoInj_array[handle].prev = LastEnable;
 80038dc:	7121      	strb	r1, [r4, #4]
         formerNext = RCM_NoInj_array[LastEnable].next;
 80038de:	7941      	ldrb	r1, [r0, #5]
         RCM_NoInj_array[handle].next = formerNext;
 80038e0:	7161      	strb	r1, [r4, #5]
         RCM_NoInj_array[formerNext].prev = handle;
 80038e2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80038e6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 80038ea:	4c0d      	ldr	r4, [pc, #52]	; (8003920 <RCM_ExecRegularConv+0x184>)
         RCM_NoInj_array[formerNext].prev = handle;
 80038ec:	710b      	strb	r3, [r1, #4]
         RCM_NoInj_array[LastEnable].next = handle;
 80038ee:	7143      	strb	r3, [r0, #5]
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 80038f0:	7821      	ldrb	r1, [r4, #0]
 80038f2:	e78d      	b.n	8003810 <RCM_ExecRegularConv+0x74>
         RCM_currentHandle = handle;
 80038f4:	4c0a      	ldr	r4, [pc, #40]	; (8003920 <RCM_ExecRegularConv+0x184>)
 80038f6:	4619      	mov	r1, r3
 80038f8:	7023      	strb	r3, [r4, #0]
    while (i < RCM_MAX_CONV)
 80038fa:	e789      	b.n	8003810 <RCM_ExecRegularConv+0x74>
      i++;
 80038fc:	2101      	movs	r1, #1
      if (true == RCM_NoInj_array [i].enable)
 80038fe:	468e      	mov	lr, r1
 8003900:	e773      	b.n	80037ea <RCM_ExecRegularConv+0x4e>
 8003902:	7c91      	ldrb	r1, [r2, #18]
 8003904:	b909      	cbnz	r1, 800390a <RCM_ExecRegularConv+0x16e>
      i++;
 8003906:	2101      	movs	r1, #1
 8003908:	e7e0      	b.n	80038cc <RCM_ExecRegularConv+0x130>
        if (RCM_NoInj_array[i].next > handle)
 800390a:	7dd0      	ldrb	r0, [r2, #23]
 800390c:	4298      	cmp	r0, r3
      i++;
 800390e:	f04f 0103 	mov.w	r1, #3
        if (RCM_NoInj_array[i].next > handle)
 8003912:	d9db      	bls.n	80038cc <RCM_ExecRegularConv+0x130>
 8003914:	e768      	b.n	80037e8 <RCM_ExecRegularConv+0x4c>
      i++;
 8003916:	2102      	movs	r1, #2
 8003918:	e766      	b.n	80037e8 <RCM_ExecRegularConv+0x4c>
 800391a:	bf00      	nop
 800391c:	20001904 	.word	0x20001904
 8003920:	20001924 	.word	0x20001924
 8003924:	2000017c 	.word	0x2000017c
 8003928:	20001928 	.word	0x20001928

0800392c <RCM_ExecUserConv>:
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv()
{
  uint8_t handle;
  if (RCM_UserConvHandle != NULL)
 800392c:	4b14      	ldr	r3, [pc, #80]	; (8003980 <RCM_ExecUserConv+0x54>)
{
 800392e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (RCM_UserConvHandle != NULL)
 8003932:	681c      	ldr	r4, [r3, #0]
 8003934:	b124      	cbz	r4, 8003940 <RCM_ExecUserConv+0x14>
  {
    handle = RCM_UserConvHandle->convHandle;
    if (RCM_USERCONV_REQUESTED == RCM_UserConvState)
 8003936:	4d13      	ldr	r5, [pc, #76]	; (8003984 <RCM_ExecUserConv+0x58>)
    handle = RCM_UserConvHandle->convHandle;
 8003938:	7b26      	ldrb	r6, [r4, #12]
    if (RCM_USERCONV_REQUESTED == RCM_UserConvState)
 800393a:	782b      	ldrb	r3, [r5, #0]
 800393c:	2b01      	cmp	r3, #1
 800393e:	d001      	beq.n	8003944 <RCM_ExecUserConv+0x18>
  }
  else
  {
     /* Nothing to do */
  }
}
 8003940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8003944:	4620      	mov	r0, r4
 8003946:	f7ff ff29 	bl	800379c <RCM_ExecRegularConv>
 800394a:	4b0f      	ldr	r3, [pc, #60]	; (8003988 <RCM_ExecUserConv+0x5c>)
 800394c:	8018      	strh	r0, [r3, #0]
      if (RCM_NoInj_array [handle].status != notvalid)
 800394e:	4b0f      	ldr	r3, [pc, #60]	; (800398c <RCM_ExecUserConv+0x60>)
 8003950:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 8003954:	eb03 0342 	add.w	r3, r3, r2, lsl #1
      RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8003958:	4601      	mov	r1, r0
      if (RCM_NoInj_array [handle].status != notvalid)
 800395a:	785b      	ldrb	r3, [r3, #1]
 800395c:	b10b      	cbz	r3, 8003962 <RCM_ExecUserConv+0x36>
        RCM_UserConvState = RCM_USERCONV_EOC;
 800395e:	2302      	movs	r3, #2
 8003960:	702b      	strb	r3, [r5, #0]
      if (RCM_CB_array[handle].cb != NULL)
 8003962:	4b0b      	ldr	r3, [pc, #44]	; (8003990 <RCM_ExecUserConv+0x64>)
 8003964:	f853 7036 	ldr.w	r7, [r3, r6, lsl #3]
 8003968:	2f00      	cmp	r7, #0
 800396a:	d0e9      	beq.n	8003940 <RCM_ExecUserConv+0x14>
        RCM_CB_array[handle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 800396c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003970:	4620      	mov	r0, r4
 8003972:	685a      	ldr	r2, [r3, #4]
        RCM_UserConvState = RCM_USERCONV_IDLE;
 8003974:	2300      	movs	r3, #0
 8003976:	702b      	strb	r3, [r5, #0]
        RCM_CB_array[handle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 8003978:	463b      	mov	r3, r7
}
 800397a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        RCM_CB_array[handle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 800397e:	4718      	bx	r3
 8003980:	2000191c 	.word	0x2000191c
 8003984:	20001920 	.word	0x20001920
 8003988:	20001922 	.word	0x20001922
 800398c:	20001904 	.word	0x20001904
 8003990:	200018e4 	.word	0x200018e4

08003994 <RCM_ExecNextConv>:
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecNextConv(void)
{
  if (true == RCM_NoInj_array [RCM_currentHandle].enable)
 8003994:	4b24      	ldr	r3, [pc, #144]	; (8003a28 <RCM_ExecNextConv+0x94>)
 8003996:	4825      	ldr	r0, [pc, #148]	; (8003a2c <RCM_ExecNextConv+0x98>)
 8003998:	781a      	ldrb	r2, [r3, #0]
 800399a:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800399e:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 80039a2:	b3a3      	cbz	r3, 8003a0e <RCM_ExecNextConv+0x7a>
    /* When this function is called, the ADC conversions triggered by External
       event for current reading has been completed.
       ADC is therefore ready to be started because already stopped */

    /* Clear EOC */
    LL_ADC_ClearFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 80039a4:	4b22      	ldr	r3, [pc, #136]	; (8003a30 <RCM_ExecNextConv+0x9c>)
{
 80039a6:	b510      	push	{r4, lr}
    LL_ADC_ClearFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 80039a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039ac:	6819      	ldr	r1, [r3, #0]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80039ae:	2404      	movs	r4, #4
 80039b0:	600c      	str	r4, [r1, #0]
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
                                 LL_ADC_REG_RANK_1,
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel));
 80039b2:	f893 c004 	ldrb.w	ip, [r3, #4]
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
 80039b6:	f1bc 0f09 	cmp.w	ip, #9
 80039ba:	ea4f 0e42 	mov.w	lr, r2, lsl #1
 80039be:	d927      	bls.n	8003a10 <RCM_ExecNextConv+0x7c>
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel));
 80039c0:	f06f 031d 	mvn.w	r3, #29
 80039c4:	2403      	movs	r4, #3
 80039c6:	fb14 340c 	smlabb	r4, r4, ip, r3
 80039ca:	2301      	movs	r3, #1
 80039cc:	fa03 f30c 	lsl.w	r3, r3, ip
 80039d0:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
 80039d4:	ea43 638c 	orr.w	r3, r3, ip, lsl #26
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
 80039d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000

    (void)LL_ADC_REG_ReadConversionData12(RCM_handle_array[RCM_currentHandle]->regADC);

    /* Start ADC for regular conversion */
    LL_ADC_REG_StartConversion(RCM_handle_array[RCM_currentHandle]->regADC);
    RCM_NoInj_array[RCM_currentHandle].status = ongoing;
 80039dc:	4496      	add	lr, r2
  MODIFY_REG(*preg,
 80039de:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80039e0:	0d1b      	lsrs	r3, r3, #20
 80039e2:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80039e6:	f422 62f8 	bic.w	r2, r2, #1984	; 0x7c0
 80039ea:	4313      	orrs	r3, r2
 80039ec:	630b      	str	r3, [r1, #48]	; 0x30
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 80039ee:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  MODIFY_REG(ADCx->CR,
 80039f0:	688b      	ldr	r3, [r1, #8]
 80039f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80039f6:	eb00 004e 	add.w	r0, r0, lr, lsl #1
 80039fa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80039fe:	f04f 0c01 	mov.w	ip, #1
 8003a02:	f043 0304 	orr.w	r3, r3, #4
 8003a06:	608b      	str	r3, [r1, #8]
 8003a08:	f880 c001 	strb.w	ip, [r0, #1]
  }
  else
  {
    /* Nothing to do, conversion not enabled have already notvalid status */
  }
}
 8003a0c:	bd10      	pop	{r4, pc}
 8003a0e:	4770      	bx	lr
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel));
 8003a10:	eb0c 044c 	add.w	r4, ip, ip, lsl #1
 8003a14:	ea4f 638c 	mov.w	r3, ip, lsl #26
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
 8003a18:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel));
 8003a1c:	2401      	movs	r4, #1
 8003a1e:	fa04 f40c 	lsl.w	r4, r4, ip
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
 8003a22:	4323      	orrs	r3, r4
 8003a24:	e7da      	b.n	80039dc <RCM_ExecNextConv+0x48>
 8003a26:	bf00      	nop
 8003a28:	20001924 	.word	0x20001924
 8003a2c:	20001904 	.word	0x20001904
 8003a30:	20001928 	.word	0x20001928

08003a34 <RCM_ReadOngoingConv>:
 * and user conversion.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ReadOngoingConv(void)
{
 8003a34:	b510      	push	{r4, lr}
  uint32_t result;
  RCM_status_t status;

  status = RCM_NoInj_array[RCM_currentHandle].status;
 8003a36:	4814      	ldr	r0, [pc, #80]	; (8003a88 <RCM_ReadOngoingConv+0x54>)
  result = LL_ADC_IsActiveFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8003a38:	4a14      	ldr	r2, [pc, #80]	; (8003a8c <RCM_ReadOngoingConv+0x58>)
  status = RCM_NoInj_array[RCM_currentHandle].status;
 8003a3a:	7803      	ldrb	r3, [r0, #0]
  result = LL_ADC_IsActiveFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8003a3c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003a40:	6814      	ldr	r4, [r2, #0]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 8003a42:	6822      	ldr	r2, [r4, #0]
 8003a44:	f012 0f04 	tst.w	r2, #4
  status = RCM_NoInj_array[RCM_currentHandle].status;
 8003a48:	ea4f 0143 	mov.w	r1, r3, lsl #1
 8003a4c:	4a10      	ldr	r2, [pc, #64]	; (8003a90 <RCM_ReadOngoingConv+0x5c>)
 8003a4e:	d008      	beq.n	8003a62 <RCM_ReadOngoingConv+0x2e>
 8003a50:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 8003a54:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
  if (( valid == status ) || ( notvalid == status ) || ( 0U == result ))
 8003a58:	f89c e001 	ldrb.w	lr, [ip, #1]
 8003a5c:	f01e 0ffd 	tst.w	lr, #253	; 0xfd
 8003a60:	d105      	bne.n	8003a6e <RCM_ReadOngoingConv+0x3a>
    RCM_NoInj_array[RCM_currentHandle].status = valid;
    /* Restore back DMA configuration */
  }

  /* Prepare next conversion */
  RCM_currentHandle = RCM_NoInj_array [RCM_currentHandle].next;
 8003a62:	440b      	add	r3, r1
 8003a64:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8003a68:	7953      	ldrb	r3, [r2, #5]
 8003a6a:	7003      	strb	r3, [r0, #0]
}
 8003a6c:	bd10      	pop	{r4, pc}
  RCM_currentHandle = RCM_NoInj_array [RCM_currentHandle].next;
 8003a6e:	440b      	add	r3, r1
 8003a70:	eb02 0243 	add.w	r2, r2, r3, lsl #1
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8003a74:	6c24      	ldr	r4, [r4, #64]	; 0x40
 8003a76:	7953      	ldrb	r3, [r2, #5]
 8003a78:	f8ac 4002 	strh.w	r4, [ip, #2]
    RCM_NoInj_array[RCM_currentHandle].status = valid;
 8003a7c:	2402      	movs	r4, #2
 8003a7e:	f88c 4001 	strb.w	r4, [ip, #1]
  RCM_currentHandle = RCM_NoInj_array [RCM_currentHandle].next;
 8003a82:	7003      	strb	r3, [r0, #0]
}
 8003a84:	bd10      	pop	{r4, pc}
 8003a86:	bf00      	nop
 8003a88:	20001924 	.word	0x20001924
 8003a8c:	20001928 	.word	0x20001928
 8003a90:	20001904 	.word	0x20001904

08003a94 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a94:	4b0e      	ldr	r3, [pc, #56]	; (8003ad0 <HAL_MspInit+0x3c>)
{
 8003a96:	b500      	push	{lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a98:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003a9a:	f042 0201 	orr.w	r2, r2, #1
 8003a9e:	661a      	str	r2, [r3, #96]	; 0x60
 8003aa0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8003aa2:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003aa4:	f002 0201 	and.w	r2, r2, #1
 8003aa8:	9200      	str	r2, [sp, #0]
 8003aaa:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003aac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003aae:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003ab2:	659a      	str	r2, [r3, #88]	; 0x58
 8003ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aba:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8003abc:	2004      	movs	r0, #4
  __HAL_RCC_PWR_CLK_ENABLE();
 8003abe:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8003ac0:	f001 fb3c 	bl	800513c <HAL_NVIC_SetPriorityGrouping>
  HAL_PWREx_DisableUCPDDeadBattery();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ac4:	b003      	add	sp, #12
 8003ac6:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_PWREx_DisableUCPDDeadBattery();
 8003aca:	f001 bdbb 	b.w	8005644 <HAL_PWREx_DisableUCPDDeadBattery>
 8003ace:	bf00      	nop
 8003ad0:	40021000 	.word	0x40021000

08003ad4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003ad4:	b5d0      	push	{r4, r6, r7, lr}
 8003ad6:	4604      	mov	r4, r0
 8003ad8:	b09e      	sub	sp, #120	; 0x78
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ada:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003adc:	2254      	movs	r2, #84	; 0x54
 8003ade:	a809      	add	r0, sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ae0:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8003ae4:	e9cd 1106 	strd	r1, r1, [sp, #24]
 8003ae8:	9108      	str	r1, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003aea:	f005 fceb 	bl	80094c4 <memset>
  if(hadc->Instance==ADC1)
 8003aee:	6823      	ldr	r3, [r4, #0]
 8003af0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003af4:	d001      	beq.n	8003afa <HAL_ADC_MspInit+0x26>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003af6:	b01e      	add	sp, #120	; 0x78
 8003af8:	bdd0      	pop	{r4, r6, r7, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003afa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8003afe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003b02:	a809      	add	r0, sp, #36	; 0x24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003b04:	9209      	str	r2, [sp, #36]	; 0x24
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8003b06:	931a      	str	r3, [sp, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003b08:	f002 f95e 	bl	8005dc8 <HAL_RCCEx_PeriphCLKConfig>
 8003b0c:	2800      	cmp	r0, #0
 8003b0e:	d12f      	bne.n	8003b70 <HAL_ADC_MspInit+0x9c>
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003b10:	4b19      	ldr	r3, [pc, #100]	; (8003b78 <HAL_ADC_MspInit+0xa4>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b12:	481a      	ldr	r0, [pc, #104]	; (8003b7c <HAL_ADC_MspInit+0xa8>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003b14:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b16:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b1a:	64da      	str	r2, [r3, #76]	; 0x4c
 8003b1c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b1e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003b22:	9201      	str	r2, [sp, #4]
 8003b24:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b28:	f042 0204 	orr.w	r2, r2, #4
 8003b2c:	64da      	str	r2, [r3, #76]	; 0x4c
 8003b2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b30:	f002 0204 	and.w	r2, r2, #4
 8003b34:	9202      	str	r2, [sp, #8]
 8003b36:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b38:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b3a:	f042 0201 	orr.w	r2, r2, #1
 8003b3e:	64da      	str	r2, [r3, #76]	; 0x4c
 8003b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b42:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin|M1_CURR_AMPL_V_Pin;
 8003b46:	2603      	movs	r6, #3
 8003b48:	2703      	movs	r7, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b4a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b4c:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b4e:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b50:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b52:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin|M1_CURR_AMPL_V_Pin;
 8003b54:	e9cd 6704 	strd	r6, r7, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b58:	f001 fc04 	bl	8005364 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b5c:	a904      	add	r1, sp, #16
 8003b5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin|M1_BUS_VOLTAGE_Pin;
 8003b62:	e9cd 6704 	strd	r6, r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b66:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b68:	f001 fbfc 	bl	8005364 <HAL_GPIO_Init>
}
 8003b6c:	b01e      	add	sp, #120	; 0x78
 8003b6e:	bdd0      	pop	{r4, r6, r7, pc}
      Error_Handler();
 8003b70:	f7fd facc 	bl	800110c <Error_Handler>
 8003b74:	e7cc      	b.n	8003b10 <HAL_ADC_MspInit+0x3c>
 8003b76:	bf00      	nop
 8003b78:	40021000 	.word	0x40021000
 8003b7c:	48000800 	.word	0x48000800

08003b80 <HAL_CORDIC_MspInit>:
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
  if(hcordic->Instance==CORDIC)
 8003b80:	4b0a      	ldr	r3, [pc, #40]	; (8003bac <HAL_CORDIC_MspInit+0x2c>)
 8003b82:	6802      	ldr	r2, [r0, #0]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d000      	beq.n	8003b8a <HAL_CORDIC_MspInit+0xa>
 8003b88:	4770      	bx	lr
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8003b8a:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
 8003b8e:	f042 0208 	orr.w	r2, r2, #8
 8003b92:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
 8003b96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
{
 8003b9a:	b082      	sub	sp, #8
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8003b9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b9e:	f003 0308 	and.w	r3, r3, #8
 8003ba2:	9301      	str	r3, [sp, #4]
 8003ba4:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }

}
 8003ba6:	b002      	add	sp, #8
 8003ba8:	4770      	bx	lr
 8003baa:	bf00      	nop
 8003bac:	40020c00 	.word	0x40020c00

08003bb0 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 8003bb0:	4b09      	ldr	r3, [pc, #36]	; (8003bd8 <HAL_TIM_Base_MspInit+0x28>)
 8003bb2:	6802      	ldr	r2, [r0, #0]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d000      	beq.n	8003bba <HAL_TIM_Base_MspInit+0xa>
 8003bb8:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003bba:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
{
 8003bbe:	b082      	sub	sp, #8
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003bc0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003bc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bc6:	661a      	str	r2, [r3, #96]	; 0x60
 8003bc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bce:	9301      	str	r3, [sp, #4]
 8003bd0:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003bd2:	b002      	add	sp, #8
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop
 8003bd8:	40012c00 	.word	0x40012c00

08003bdc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003bdc:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_encoder->Instance==TIM2)
 8003bde:	6803      	ldr	r3, [r0, #0]
{
 8003be0:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003be2:	2400      	movs	r4, #0
  if(htim_encoder->Instance==TIM2)
 8003be4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003be8:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8003bec:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8003bf0:	9408      	str	r4, [sp, #32]
  if(htim_encoder->Instance==TIM2)
 8003bf2:	d001      	beq.n	8003bf8 <HAL_TIM_Encoder_MspInit+0x1c>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003bf4:	b00b      	add	sp, #44	; 0x2c
 8003bf6:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003bf8:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003bfc:	2501      	movs	r5, #1
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003bfe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003c00:	f042 0201 	orr.w	r2, r2, #1
 8003c04:	659a      	str	r2, [r3, #88]	; 0x58
 8003c06:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003c08:	f002 0201 	and.w	r2, r2, #1
 8003c0c:	9201      	str	r2, [sp, #4]
 8003c0e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c10:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c12:	f042 0201 	orr.w	r2, r2, #1
 8003c16:	64da      	str	r2, [r3, #76]	; 0x4c
 8003c18:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c1a:	f002 0201 	and.w	r2, r2, #1
 8003c1e:	9202      	str	r2, [sp, #8]
 8003c20:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c24:	f042 0202 	orr.w	r2, r2, #2
 8003c28:	64da      	str	r2, [r3, #76]	; 0x4c
 8003c2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003c2c:	9508      	str	r5, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c2e:	f003 0302 	and.w	r3, r3, #2
 8003c32:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(M1_ENCODER_A_GPIO_Port, &GPIO_InitStruct);
 8003c34:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_ENCODER_A_Pin;
 8003c36:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    HAL_GPIO_Init(M1_ENCODER_A_GPIO_Port, &GPIO_InitStruct);
 8003c3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_ENCODER_A_Pin;
 8003c3e:	2302      	movs	r3, #2
 8003c40:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c44:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(M1_ENCODER_A_GPIO_Port, &GPIO_InitStruct);
 8003c46:	f001 fb8d 	bl	8005364 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_ENCODER_B_Pin;
 8003c4a:	2208      	movs	r2, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c4c:	2302      	movs	r3, #2
    HAL_GPIO_Init(M1_ENCODER_B_GPIO_Port, &GPIO_InitStruct);
 8003c4e:	4805      	ldr	r0, [pc, #20]	; (8003c64 <HAL_TIM_Encoder_MspInit+0x88>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003c50:	9508      	str	r5, [sp, #32]
    HAL_GPIO_Init(M1_ENCODER_B_GPIO_Port, &GPIO_InitStruct);
 8003c52:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c54:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c58:	e9cd 4406 	strd	r4, r4, [sp, #24]
    HAL_GPIO_Init(M1_ENCODER_B_GPIO_Port, &GPIO_InitStruct);
 8003c5c:	f001 fb82 	bl	8005364 <HAL_GPIO_Init>
}
 8003c60:	b00b      	add	sp, #44	; 0x2c
 8003c62:	bd30      	pop	{r4, r5, pc}
 8003c64:	48000400 	.word	0x48000400

08003c68 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003c68:	b5d0      	push	{r4, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 8003c6a:	4a20      	ldr	r2, [pc, #128]	; (8003cec <HAL_TIM_MspPostInit+0x84>)
 8003c6c:	6801      	ldr	r1, [r0, #0]
{
 8003c6e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c70:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 8003c72:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c74:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003c78:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003c7c:	9306      	str	r3, [sp, #24]
  if(htim->Instance==TIM1)
 8003c7e:	d001      	beq.n	8003c84 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003c80:	b008      	add	sp, #32
 8003c82:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c84:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003c88:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003c8c:	2406      	movs	r4, #6
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c90:	f042 0201 	orr.w	r2, r2, #1
 8003c94:	64da      	str	r2, [r3, #76]	; 0x4c
 8003c96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c98:	f002 0201 	and.w	r2, r2, #1
 8003c9c:	9200      	str	r2, [sp, #0]
 8003c9e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ca0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ca2:	f042 0202 	orr.w	r2, r2, #2
 8003ca6:	64da      	str	r2, [r3, #76]	; 0x4c
 8003ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003caa:	9406      	str	r4, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cac:	f003 0302 	and.w	r3, r3, #2
 8003cb0:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cb2:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8003cb4:	f44f 62f0 	mov.w	r2, #1920	; 0x780
 8003cb8:	2602      	movs	r6, #2
 8003cba:	2702      	movs	r7, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8003cc0:	2302      	movs	r3, #2
 8003cc2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003cc6:	e9cd 6704 	strd	r6, r7, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cca:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ccc:	f001 fb4a 	bl	8005364 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8003cd0:	2203      	movs	r2, #3
 8003cd2:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cd4:	4806      	ldr	r0, [pc, #24]	; (8003cf0 <HAL_TIM_MspPostInit+0x88>)
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003cd6:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cd8:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8003cda:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003cde:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ce2:	f001 fb3f 	bl	8005364 <HAL_GPIO_Init>
}
 8003ce6:	b008      	add	sp, #32
 8003ce8:	bdd0      	pop	{r4, r6, r7, pc}
 8003cea:	bf00      	nop
 8003cec:	40012c00 	.word	0x40012c00
 8003cf0:	48000400 	.word	0x48000400

08003cf4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003cf4:	b570      	push	{r4, r5, r6, lr}
 8003cf6:	4604      	mov	r4, r0
 8003cf8:	b09c      	sub	sp, #112	; 0x70
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cfa:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003cfc:	2254      	movs	r2, #84	; 0x54
 8003cfe:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d00:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8003d04:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8003d08:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003d0a:	f005 fbdb 	bl	80094c4 <memset>
  if(huart->Instance==USART2)
 8003d0e:	4b31      	ldr	r3, [pc, #196]	; (8003dd4 <HAL_UART_MspInit+0xe0>)
 8003d10:	6822      	ldr	r2, [r4, #0]
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d001      	beq.n	8003d1a <HAL_UART_MspInit+0x26>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003d16:	b01c      	add	sp, #112	; 0x70
 8003d18:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003d1a:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003d1c:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003d1e:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003d20:	f002 f852 	bl	8005dc8 <HAL_RCCEx_PeriphCLKConfig>
 8003d24:	2800      	cmp	r0, #0
 8003d26:	d14c      	bne.n	8003dc2 <HAL_UART_MspInit+0xce>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003d28:	4b2b      	ldr	r3, [pc, #172]	; (8003dd8 <HAL_UART_MspInit+0xe4>)
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8003d2a:	4e2c      	ldr	r6, [pc, #176]	; (8003ddc <HAL_UART_MspInit+0xe8>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8003d2c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003d2e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003d32:	659a      	str	r2, [r3, #88]	; 0x58
 8003d34:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003d36:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8003d3a:	9200      	str	r2, [sp, #0]
 8003d3c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d40:	f042 0201 	orr.w	r2, r2, #1
 8003d44:	64da      	str	r2, [r3, #76]	; 0x4c
 8003d46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d48:	f003 0301 	and.w	r3, r3, #1
 8003d4c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8003d4e:	220c      	movs	r2, #12
 8003d50:	2302      	movs	r3, #2
 8003d52:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003d56:	2200      	movs	r2, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d58:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d60:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003d62:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003d68:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d6a:	f001 fafb 	bl	8005364 <HAL_GPIO_Init>
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8003d6e:	491c      	ldr	r1, [pc, #112]	; (8003de0 <HAL_UART_MspInit+0xec>)
 8003d70:	221a      	movs	r2, #26
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d72:	2300      	movs	r3, #0
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8003d74:	e9c6 1200 	strd	r1, r2, [r6]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003d78:	4630      	mov	r0, r6
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003d7a:	2280      	movs	r2, #128	; 0x80
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d7c:	e9c6 3302 	strd	r3, r3, [r6, #8]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003d80:	e9c6 2304 	strd	r2, r3, [r6, #16]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003d84:	e9c6 3306 	strd	r3, r3, [r6, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003d88:	6233      	str	r3, [r6, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003d8a:	f001 fa55 	bl	8005238 <HAL_DMA_Init>
 8003d8e:	b9f0      	cbnz	r0, 8003dce <HAL_UART_MspInit+0xda>
    hdma_usart2_tx.Instance = DMA1_Channel2;
 8003d90:	4d14      	ldr	r5, [pc, #80]	; (8003de4 <HAL_UART_MspInit+0xf0>)
 8003d92:	4915      	ldr	r1, [pc, #84]	; (8003de8 <HAL_UART_MspInit+0xf4>)
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003d94:	67e6      	str	r6, [r4, #124]	; 0x7c
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8003d96:	221b      	movs	r2, #27
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d98:	2300      	movs	r3, #0
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8003d9a:	e9c5 1200 	strd	r1, r2, [r5]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003d9e:	4628      	mov	r0, r5
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003da0:	2110      	movs	r1, #16
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003da2:	2280      	movs	r2, #128	; 0x80
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003da4:	e9c5 1302 	strd	r1, r3, [r5, #8]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003da8:	e9c5 3305 	strd	r3, r3, [r5, #20]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003dac:	e9c5 3307 	strd	r3, r3, [r5, #28]
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003db0:	62b4      	str	r4, [r6, #40]	; 0x28
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003db2:	612a      	str	r2, [r5, #16]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003db4:	f001 fa40 	bl	8005238 <HAL_DMA_Init>
 8003db8:	b930      	cbnz	r0, 8003dc8 <HAL_UART_MspInit+0xd4>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003dba:	67a5      	str	r5, [r4, #120]	; 0x78
 8003dbc:	62ac      	str	r4, [r5, #40]	; 0x28
}
 8003dbe:	b01c      	add	sp, #112	; 0x70
 8003dc0:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8003dc2:	f7fd f9a3 	bl	800110c <Error_Handler>
 8003dc6:	e7af      	b.n	8003d28 <HAL_UART_MspInit+0x34>
      Error_Handler();
 8003dc8:	f7fd f9a0 	bl	800110c <Error_Handler>
 8003dcc:	e7f5      	b.n	8003dba <HAL_UART_MspInit+0xc6>
      Error_Handler();
 8003dce:	f7fd f99d 	bl	800110c <Error_Handler>
 8003dd2:	e7dd      	b.n	8003d90 <HAL_UART_MspInit+0x9c>
 8003dd4:	40004400 	.word	0x40004400
 8003dd8:	40021000 	.word	0x40021000
 8003ddc:	200004f8 	.word	0x200004f8
 8003de0:	40020008 	.word	0x40020008
 8003de4:	20000558 	.word	0x20000558
 8003de8:	4002001c 	.word	0x4002001c

08003dec <ADC1_2_IRQHandler>:
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 8003dec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003df0:	2240      	movs	r2, #64	; 0x40
 8003df2:	601a      	str	r2, [r3, #0]
  /* USER CODE END ADC1_2_IRQn 0 */

    /* Clear Flags M1 */
    LL_ADC_ClearFlag_JEOS(ADC1);

  (void)TSK_HighFrequencyTask();
 8003df4:	f7fd bed6 	b.w	8001ba4 <TSK_HighFrequencyTask>

08003df8 <TIM1_UP_TIM16_IRQHandler>:
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8003df8:	4b03      	ldr	r3, [pc, #12]	; (8003e08 <TIM1_UP_TIM16_IRQHandler+0x10>)
 /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

 /* USER CODE END  TIMx_UP_M1_IRQn 0 */

  LL_TIM_ClearFlag_UPDATE(TIM1);
  (void)R3_1_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 8003dfa:	4804      	ldr	r0, [pc, #16]	; (8003e0c <TIM1_UP_TIM16_IRQHandler+0x14>)
 8003dfc:	f06f 0201 	mvn.w	r2, #1
 8003e00:	611a      	str	r2, [r3, #16]
 8003e02:	f004 bd1b 	b.w	800883c <R3_1_TIMx_UP_IRQHandler>
 8003e06:	bf00      	nop
 8003e08:	40012c00 	.word	0x40012c00
 8003e0c:	2000017c 	.word	0x2000017c

08003e10 <TIM1_BRK_TIM15_IRQHandler>:
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 8003e10:	490c      	ldr	r1, [pc, #48]	; (8003e44 <TIM1_BRK_TIM15_IRQHandler+0x34>)

 /* USER CODE END  TIMx_UP_M1_IRQn 1 */
}

void TIMx_BRK_M1_IRQHandler(void)
{
 8003e12:	b508      	push	{r3, lr}
 8003e14:	690b      	ldr	r3, [r1, #16]
 8003e16:	061a      	lsls	r2, r3, #24
 8003e18:	d505      	bpl.n	8003e26 <TIM1_BRK_TIM15_IRQHandler+0x16>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8003e1a:	f06f 0380 	mvn.w	r3, #128	; 0x80
    /* Nothing to do */
  }
  else
  {
    LL_TIM_ClearFlag_BRK(TIM1);
    PWMC_OVP_Handler(&PWM_Handle_M1._Super, TIM1);
 8003e1e:	480a      	ldr	r0, [pc, #40]	; (8003e48 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 8003e20:	610b      	str	r3, [r1, #16]
 8003e22:	f7fe fba5 	bl	8002570 <PWMC_OVP_Handler>
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK2(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 8003e26:	4907      	ldr	r1, [pc, #28]	; (8003e44 <TIM1_BRK_TIM15_IRQHandler+0x34>)
 8003e28:	690b      	ldr	r3, [r1, #16]
 8003e2a:	05db      	lsls	r3, r3, #23
 8003e2c:	d505      	bpl.n	8003e3a <TIM1_BRK_TIM15_IRQHandler+0x2a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 8003e2e:	f46f 7380 	mvn.w	r3, #256	; 0x100
    /* Nothing to do */
  }
  else
  {
    LL_TIM_ClearFlag_BRK2(TIM1);
    PWMC_OVP_Handler(&PWM_Handle_M1._Super, TIM1);
 8003e32:	4805      	ldr	r0, [pc, #20]	; (8003e48 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 8003e34:	610b      	str	r3, [r1, #16]
 8003e36:	f7fe fb9b 	bl	8002570 <PWMC_OVP_Handler>
  MC_Scheduler();

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 8003e3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_Scheduler();
 8003e3e:	f7fd be6b 	b.w	8001b18 <MC_Scheduler>
 8003e42:	bf00      	nop
 8003e44:	40012c00 	.word	0x40012c00
 8003e48:	2000017c 	.word	0x2000017c

08003e4c <TIM2_IRQHandler>:
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 0 */

  /* USER CODE END SPD_TIM_M1_IRQn 0 */

 /* Encoder Timer UPDATE IT is dynamicaly enabled/disabled, checking enable state is required */
  if (LL_TIM_IsEnabledIT_UPDATE (ENCODER_M1.TIMx) != 0U)
 8003e4c:	4806      	ldr	r0, [pc, #24]	; (8003e68 <TIM2_IRQHandler+0x1c>)
 8003e4e:	6a03      	ldr	r3, [r0, #32]
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsEnabledIT_UPDATE(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->DIER, TIM_DIER_UIE) == (TIM_DIER_UIE)) ? 1UL : 0UL);
 8003e50:	68da      	ldr	r2, [r3, #12]
 8003e52:	07d1      	lsls	r1, r2, #31
 8003e54:	d507      	bpl.n	8003e66 <TIM2_IRQHandler+0x1a>
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8003e56:	691a      	ldr	r2, [r3, #16]
 8003e58:	07d2      	lsls	r2, r2, #31
 8003e5a:	d504      	bpl.n	8003e66 <TIM2_IRQHandler+0x1a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8003e5c:	f06f 0201 	mvn.w	r2, #1
 8003e60:	611a      	str	r2, [r3, #16]
  {
    if (LL_TIM_IsActiveFlag_UPDATE (ENCODER_M1.TIMx) != 0U)
    {
      LL_TIM_ClearFlag_UPDATE(ENCODER_M1.TIMx);
      (void)ENC_IRQHandler(&ENCODER_M1);
 8003e62:	f003 bcb9 	b.w	80077d8 <ENC_IRQHandler>
    /* No other IT to manage for encoder config */
  }
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 1 */

  /* USER CODE END SPD_TIM_M1_IRQn 1 */
}
 8003e66:	4770      	bx	lr
 8003e68:	20000020 	.word	0x20000020

08003e6c <DMA1_Channel1_IRQHandler>:
}

//cstat !MISRAC2012-Rule-8.13
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
  return ((NULL == DMAx) ? 0U : ((READ_BIT(DMAx->ISR,
 8003e6c:	4b04      	ldr	r3, [pc, #16]	; (8003e80 <DMA1_Channel1_IRQHandler+0x14>)
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	0792      	lsls	r2, r2, #30
 8003e72:	d400      	bmi.n	8003e76 <DMA1_Channel1_IRQHandler+0xa>
  }
  /* USER CODE BEGIN DMA1_Channel1_IRQHandler 1 */

  /* USER CODE BEGIN DMA1_Channel1_IRQHandler 1 */

}
 8003e74:	4770      	bx	lr
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 8003e76:	2202      	movs	r2, #2
    ASPEP_HWDataReceivedIT (&aspepOverUartA);
 8003e78:	4802      	ldr	r0, [pc, #8]	; (8003e84 <DMA1_Channel1_IRQHandler+0x18>)
 8003e7a:	605a      	str	r2, [r3, #4]
 8003e7c:	f7fc be84 	b.w	8000b88 <ASPEP_HWDataReceivedIT>
 8003e80:	40020000 	.word	0x40020000
 8003e84:	200003c4 	.word	0x200003c4

08003e88 <USART2_IRQHandler>:
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8003e88:	4b42      	ldr	r3, [pc, #264]	; (8003f94 <USART2_IRQHandler+0x10c>)
 8003e8a:	69da      	ldr	r2, [r3, #28]
 8003e8c:	0652      	lsls	r2, r2, #25
  * @brief  This function handles USART interrupt request.
  * @param  None
  */
//cstat !MISRAC2012-Rule-8.4
void USART2_IRQHandler(void)
{
 8003e8e:	b510      	push	{r4, lr}
 8003e90:	d509      	bpl.n	8003ea6 <USART2_IRQHandler+0x1e>
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 8003e92:	4941      	ldr	r1, [pc, #260]	; (8003f98 <USART2_IRQHandler+0x110>)
    /* Disable the DMA channel to prepare the next chunck of data */
    LL_DMA_DisableChannel(DMA_TX_A, DMACH_TX_A);
    LL_USART_ClearFlag_TC (USARTA);
    /* Data Sent by UART */
    /* Need to free the buffer, and to check pending transfer */
    ASPEP_HWDataTransmittedIT (&aspepOverUartA);
 8003e94:	4841      	ldr	r0, [pc, #260]	; (8003f9c <USART2_IRQHandler+0x114>)
 8003e96:	69ca      	ldr	r2, [r1, #28]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
{
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8003e98:	2440      	movs	r4, #64	; 0x40
 8003e9a:	f022 0201 	bic.w	r2, r2, #1
 8003e9e:	61ca      	str	r2, [r1, #28]
 8003ea0:	621c      	str	r4, [r3, #32]
 8003ea2:	f7fc fcc5 	bl	8000830 <ASPEP_HWDataTransmittedIT>
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8003ea6:	4b3b      	ldr	r3, [pc, #236]	; (8003f94 <USART2_IRQHandler+0x10c>)
 8003ea8:	69d8      	ldr	r0, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8003eaa:	69da      	ldr	r2, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 8003eac:	69d9      	ldr	r1, [r3, #28]
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_ERROR(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE)) ? 1UL : 0UL);
 8003eae:	689c      	ldr	r4, [r3, #8]
 8003eb0:	07e4      	lsls	r4, r4, #31
 8003eb2:	d526      	bpl.n	8003f02 <USART2_IRQHandler+0x7a>
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8003eb4:	f002 0202 	and.w	r2, r2, #2
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8003eb8:	f000 0008 	and.w	r0, r0, #8
  feFlag = LL_USART_IsActiveFlag_FE(USARTA);
  neFlag = LL_USART_IsActiveFlag_NE(USARTA);
  errorMask = LL_USART_IsEnabledIT_ERROR(USARTA);

  flags = ((oreFlag | feFlag | neFlag) & errorMask);
  if (0U == flags)
 8003ebc:	4302      	orrs	r2, r0
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 8003ebe:	f001 0104 	and.w	r1, r1, #4
 8003ec2:	430a      	orrs	r2, r1
 8003ec4:	d01d      	beq.n	8003f02 <USART2_IRQHandler+0x7a>
  {
    /* Nothing to do */
  }
  else
  { /* Stopping the debugger will generate an OverRun error */
    WRITE_REG(USARTA->ICR, USART_ICR_FECF|USART_ICR_ORECF|USART_ICR_NECF);
 8003ec6:	220e      	movs	r2, #14
 8003ec8:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eca:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003ece:	f502 6381 	add.w	r3, r2, #1032	; 0x408
 8003ed2:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
 8003ed6:	f023 0301 	bic.w	r3, r3, #1
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eda:	f502 6081 	add.w	r0, r2, #1032	; 0x408
 8003ede:	e840 3100 	strex	r1, r3, [r0]
 8003ee2:	2900      	cmp	r1, #0
 8003ee4:	d1f3      	bne.n	8003ece <USART2_IRQHandler+0x46>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee6:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003eea:	f502 6380 	add.w	r3, r2, #1024	; 0x400
 8003eee:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8003ef2:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef6:	f502 6080 	add.w	r0, r2, #1024	; 0x400
 8003efa:	e840 3100 	strex	r1, r3, [r0]
 8003efe:	2900      	cmp	r1, #0
 8003f00:	d1f3      	bne.n	8003eea <USART2_IRQHandler+0x62>
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 8003f02:	4b24      	ldr	r3, [pc, #144]	; (8003f94 <USART2_IRQHandler+0x10c>)
 8003f04:	69da      	ldr	r2, [r3, #28]
 8003f06:	06d2      	lsls	r2, r2, #27
 8003f08:	d541      	bpl.n	8003f8e <USART2_IRQHandler+0x106>
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	06db      	lsls	r3, r3, #27
 8003f0e:	d53f      	bpl.n	8003f90 <USART2_IRQHandler+0x108>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f10:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003f14:	f502 6380 	add.w	r3, r2, #1024	; 0x400
 8003f18:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8003f1c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f20:	f502 6080 	add.w	r0, r2, #1024	; 0x400
 8003f24:	e840 3100 	strex	r1, r3, [r0]
 8003f28:	2900      	cmp	r1, #0
 8003f2a:	d1f3      	bne.n	8003f14 <USART2_IRQHandler+0x8c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f2c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003f30:	f502 6381 	add.w	r3, r2, #1032	; 0x408
 8003f34:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8003f38:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f3c:	f502 6081 	add.w	r0, r2, #1032	; 0x408
 8003f40:	e840 3100 	strex	r1, r3, [r0]
 8003f44:	2900      	cmp	r1, #0
 8003f46:	d1f3      	bne.n	8003f30 <USART2_IRQHandler+0xa8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f48:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003f4c:	f502 6381 	add.w	r3, r2, #1032	; 0x408
 8003f50:	e853 3f00 	ldrex	r3, [r3]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableDMAReq_RX(USART_TypeDef *USARTx)
{
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_DMAR);
 8003f54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f58:	f502 6081 	add.w	r0, r2, #1032	; 0x408
 8003f5c:	e840 3100 	strex	r1, r3, [r0]
 8003f60:	2900      	cmp	r1, #0
 8003f62:	d1f3      	bne.n	8003f4c <USART2_IRQHandler+0xc4>
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8003f64:	4b0b      	ldr	r3, [pc, #44]	; (8003f94 <USART2_IRQHandler+0x10c>)
 8003f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f68:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003f6c:	f502 6381 	add.w	r3, r2, #1032	; 0x408
 8003f70:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8003f74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f78:	f502 6081 	add.w	r0, r2, #1032	; 0x408
 8003f7c:	e840 3100 	strex	r1, r3, [r0]
 8003f80:	2900      	cmp	r1, #0
 8003f82:	d1f3      	bne.n	8003f6c <USART2_IRQHandler+0xe4>
  }

  /* USER CODE BEGIN USART2_IRQHandler 1 */

  /* USER CODE END USART2_IRQHandler 1 */
}
 8003f84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ASPEP_HWDMAReset (&aspepOverUartA);
 8003f88:	4804      	ldr	r0, [pc, #16]	; (8003f9c <USART2_IRQHandler+0x114>)
 8003f8a:	f7fc be4b 	b.w	8000c24 <ASPEP_HWDMAReset>
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 8003f8e:	681b      	ldr	r3, [r3, #0]
}
 8003f90:	bd10      	pop	{r4, pc}
 8003f92:	bf00      	nop
 8003f94:	40004400 	.word	0x40004400
 8003f98:	40020000 	.word	0x40020000
 8003f9c:	200003c4 	.word	0x200003c4

08003fa0 <HardFault_Handler>:
/**
  * @brief  This function handles Hard Fault exception.
  * @param  None
  */
void HardFault_Handler(void)
{
 8003fa0:	b508      	push	{r3, lr}
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 8003fa2:	f7fd fef1 	bl	8001d88 <TSK_HardwareFaultTask>

  /* Go to infinite loop when Hard Fault exception occurs */
  while (true)
 8003fa6:	e7fe      	b.n	8003fa6 <HardFault_Handler+0x6>

08003fa8 <SysTick_Handler>:
 /* USER CODE END HardFault_IRQn 1 */

}

void SysTick_Handler(void)
{
 8003fa8:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 8003faa:	4c0a      	ldr	r4, [pc, #40]	; (8003fd4 <SysTick_Handler+0x2c>)
 8003fac:	7823      	ldrb	r3, [r4, #0]
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d009      	beq.n	8003fc6 <SysTick_Handler+0x1e>
  {
    HAL_IncTick();
    HAL_SYSTICK_IRQHandler();
    SystickDividerCounter = 0;
  }
  SystickDividerCounter ++;
 8003fb2:	3301      	adds	r3, #1
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	7023      	strb	r3, [r4, #0]
#endif /* MC_HAL_IS_USED */

  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */
    MC_RunMotorControlTasks();
 8003fb8:	f7fd feda 	bl	8001d70 <MC_RunMotorControlTasks>
    TC_IncTick(&PosCtrlM1);

  /* USER CODE BEGIN SysTick_IRQn 2 */
  /* USER CODE END SysTick_IRQn 2 */
}
 8003fbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    TC_IncTick(&PosCtrlM1);
 8003fc0:	4805      	ldr	r0, [pc, #20]	; (8003fd8 <SysTick_Handler+0x30>)
 8003fc2:	f005 ba19 	b.w	80093f8 <TC_IncTick>
    HAL_IncTick();
 8003fc6:	f000 f8fd 	bl	80041c4 <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 8003fca:	f001 f931 	bl	8005230 <HAL_SYSTICK_IRQHandler>
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e7f1      	b.n	8003fb6 <SysTick_Handler+0xe>
 8003fd2:	bf00      	nop
 8003fd4:	20000438 	.word	0x20000438
 8003fd8:	20000220 	.word	0x20000220

08003fdc <EXTI15_10_IRQHandler>:
/**
  * @brief  This function handles Button IRQ on PIN PC13.
  *                 and M1 Encoder Index IRQ on PIN PB12.
  */
void EXTI15_10_IRQHandler (void)
{
 8003fdc:	b508      	push	{r3, lr}
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
  return (uint32_t)(READ_BIT(EXTI->PR1, ExtiLine));
 8003fde:	4b0d      	ldr	r3, [pc, #52]	; (8004014 <EXTI15_10_IRQHandler+0x38>)
 8003fe0:	695a      	ldr	r2, [r3, #20]
  /* USER CODE BEGIN START_STOP_BTN */
  if (0U == LL_EXTI_ReadFlag_0_31(LL_EXTI_LINE_13))
 8003fe2:	0491      	lsls	r1, r2, #18
 8003fe4:	d404      	bmi.n	8003ff0 <EXTI15_10_IRQHandler+0x14>
 8003fe6:	4b0b      	ldr	r3, [pc, #44]	; (8004014 <EXTI15_10_IRQHandler+0x38>)
 8003fe8:	695a      	ldr	r2, [r3, #20]
    LL_EXTI_ClearFlag_0_31 (LL_EXTI_LINE_13);
    (void)UI_HandleStartStopButton_cb ();
  }

  /* USER CODE BEGIN ENCODER Z INDEX M1 */
  if (LL_EXTI_ReadFlag_0_31(LL_EXTI_LINE_12))
 8003fea:	04d2      	lsls	r2, r2, #19
 8003fec:	d409      	bmi.n	8004002 <EXTI15_10_IRQHandler+0x26>
  {
    LL_EXTI_ClearFlag_0_31 (LL_EXTI_LINE_12);
    TC_EncoderReset(&PosCtrlM1);
  }

}
 8003fee:	bd08      	pop	{r3, pc}
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 8003ff0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003ff4:	615a      	str	r2, [r3, #20]
    (void)UI_HandleStartStopButton_cb ();
 8003ff6:	f7fd fed7 	bl	8001da8 <UI_HandleStartStopButton_cb>
  return (uint32_t)(READ_BIT(EXTI->PR1, ExtiLine));
 8003ffa:	4b06      	ldr	r3, [pc, #24]	; (8004014 <EXTI15_10_IRQHandler+0x38>)
 8003ffc:	695a      	ldr	r2, [r3, #20]
  if (LL_EXTI_ReadFlag_0_31(LL_EXTI_LINE_12))
 8003ffe:	04d2      	lsls	r2, r2, #19
 8004000:	d5f5      	bpl.n	8003fee <EXTI15_10_IRQHandler+0x12>
  WRITE_REG(EXTI->PR1, ExtiLine);
 8004002:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004006:	615a      	str	r2, [r3, #20]
    TC_EncoderReset(&PosCtrlM1);
 8004008:	4803      	ldr	r0, [pc, #12]	; (8004018 <EXTI15_10_IRQHandler+0x3c>)
}
 800400a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    TC_EncoderReset(&PosCtrlM1);
 800400e:	f005 b9b3 	b.w	8009378 <TC_EncoderReset>
 8004012:	bf00      	nop
 8004014:	40010400 	.word	0x40010400
 8004018:	20000220 	.word	0x20000220

0800401c <UASPEP_INIT>:
  }
  else
  {
#endif
    /* Enable DMA UART */
    LL_USART_ClearFlag_TC(pHandle->USARTx);
 800401c:	6802      	ldr	r2, [r0, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 800401e:	2340      	movs	r3, #64	; 0x40
{
 8004020:	b470      	push	{r4, r5, r6}
 8004022:	6213      	str	r3, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004024:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 8004028:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800402c:	e842 3100 	strex	r1, r3, [r2]
 8004030:	2900      	cmp	r1, #0
 8004032:	d1f7      	bne.n	8004024 <UASPEP_INIT+0x8>
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8004034:	f102 0108 	add.w	r1, r2, #8
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004038:	e851 3f00 	ldrex	r3, [r1]
 800403c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004040:	e841 3400 	strex	r4, r3, [r1]
 8004044:	2c00      	cmp	r4, #0
 8004046:	d1f7      	bne.n	8004038 <UASPEP_INIT+0x1c>
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, PeriphAddress);
 8004048:	6901      	ldr	r1, [r0, #16]
 800404a:	4e17      	ldr	r6, [pc, #92]	; (80040a8 <UASPEP_INIT+0x8c>)
 800404c:	6883      	ldr	r3, [r0, #8]
 800404e:	5c74      	ldrb	r4, [r6, r1]
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_TCIE);
 8004050:	6845      	ldr	r5, [r0, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, PeriphAddress);
 8004052:	4423      	add	r3, r4
    LL_USART_EnableDMAReq_TX(pHandle->USARTx);

    /* Write the USART_TDR register address in the DMA control register to configure it as
     * the destination of the transfer */
    //cstat !MISRAC2012-Rule-11.4
    LL_DMA_SetPeriphAddress(pHandle->txDMA, pHandle->txChannel, (uint32_t)&pHandle->USARTx->TDR);
 8004054:	f102 0128 	add.w	r1, r2, #40	; 0x28
 8004058:	6099      	str	r1, [r3, #8]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_TCIE);
 800405a:	68c3      	ldr	r3, [r0, #12]
 800405c:	5cf1      	ldrb	r1, [r6, r3]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 800405e:	2340      	movs	r3, #64	; 0x40
 8004060:	6213      	str	r3, [r2, #32]
 8004062:	586b      	ldr	r3, [r5, r1]
 8004064:	f043 0302 	orr.w	r3, r3, #2
 8004068:	506b      	str	r3, [r5, r1]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 800406a:	f102 0108 	add.w	r1, r2, #8
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800406e:	e851 3f00 	ldrex	r3, [r1]
 8004072:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004076:	e841 3400 	strex	r4, r3, [r1]
 800407a:	2c00      	cmp	r4, #0
 800407c:	d1f7      	bne.n	800406e <UASPEP_INIT+0x52>
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, PeriphAddress);
 800407e:	68c3      	ldr	r3, [r0, #12]
 8004080:	5cf0      	ldrb	r0, [r6, r3]
 8004082:	4405      	add	r5, r0
    LL_USART_EnableIT_ERROR(pHandle->USARTx);

    /* Write the USART_RDR register address in the DMA control register to configure it as
     * the source of the transfer */
    //cstat !MISRAC2012-Rule-11.4
    LL_DMA_SetPeriphAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)&pHandle->USARTx->RDR);
 8004084:	f102 0124 	add.w	r1, r2, #36	; 0x24
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8004088:	2340      	movs	r3, #64	; 0x40
 800408a:	60a9      	str	r1, [r5, #8]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 800408c:	f102 0108 	add.w	r1, r2, #8
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8004090:	6213      	str	r3, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004092:	e851 3f00 	ldrex	r3, [r1]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8004096:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800409a:	e841 3200 	strex	r2, r3, [r1]
 800409e:	2a00      	cmp	r2, #0
 80040a0:	d1f7      	bne.n	8004092 <UASPEP_INIT+0x76>
}
 80040a2:	bc70      	pop	{r4, r5, r6}
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	08009780 	.word	0x08009780

080040ac <UASPEP_SEND_PACKET>:
  * @param  pHWHandle Hardware components chosen for communication
  * @param  data Data to be transmitted to controller
  * @param  length Length of the data to be transmitted
  */
bool UASPEP_SEND_PACKET(void *pHWHandle, void *data, uint16_t length)
{
 80040ac:	b430      	push	{r4, r5}
  return ((READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 80040ae:	6903      	ldr	r3, [r0, #16]
 80040b0:	4d0b      	ldr	r5, [pc, #44]	; (80040e0 <UASPEP_SEND_PACKET+0x34>)
 80040b2:	6884      	ldr	r4, [r0, #8]
 80040b4:	5ceb      	ldrb	r3, [r5, r3]
 80040b6:	58e5      	ldr	r5, [r4, r3]
                    DMA_CCR_EN) == (DMA_CCR_EN)) ? 1UL : 0UL);
 80040b8:	07ed      	lsls	r5, r5, #31
  return ((READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 80040ba:	eb04 0003 	add.w	r0, r4, r3
                    DMA_CCR_EN) == (DMA_CCR_EN)) ? 1UL : 0UL);
 80040be:	d40b      	bmi.n	80040d8 <UASPEP_SEND_PACKET+0x2c>
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, MemoryAddress);
 80040c0:	60c1      	str	r1, [r0, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 80040c2:	6841      	ldr	r1, [r0, #4]
 80040c4:	0c09      	lsrs	r1, r1, #16
 80040c6:	0409      	lsls	r1, r1, #16
 80040c8:	430a      	orrs	r2, r1
 80040ca:	6042      	str	r2, [r0, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 80040cc:	58e2      	ldr	r2, [r4, r3]
  {
    //cstat !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6
    LL_DMA_SetMemoryAddress(pHandle->txDMA, pHandle->txChannel, (uint32_t)data);
    LL_DMA_SetDataLength(pHandle->txDMA, pHandle->txChannel, length);
    LL_DMA_EnableChannel(pHandle->txDMA, pHandle->txChannel);
    result = true;
 80040ce:	2001      	movs	r0, #1
 80040d0:	4302      	orrs	r2, r0
 80040d2:	50e2      	str	r2, [r4, r3]
  else
  {
    result = false;
  }
  return (result);
}
 80040d4:	bc30      	pop	{r4, r5}
 80040d6:	4770      	bx	lr
    result = false;
 80040d8:	2000      	movs	r0, #0
}
 80040da:	bc30      	pop	{r4, r5}
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	08009780 	.word	0x08009780

080040e4 <UASPEP_RECEIVE_BUFFER>:
  * @param  pHWHandle Hardware components chosen for communication
  * @param  buffer Buffer which will receive the communicated data
  * @param  length Length of the received data
  */
void UASPEP_RECEIVE_BUFFER(void *pHWHandle, void* buffer, uint16_t length)
{
 80040e4:	b430      	push	{r4, r5}
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 80040e6:	68c3      	ldr	r3, [r0, #12]
 80040e8:	4d0b      	ldr	r5, [pc, #44]	; (8004118 <UASPEP_RECEIVE_BUFFER+0x34>)
 80040ea:	6844      	ldr	r4, [r0, #4]
 80040ec:	5ce8      	ldrb	r0, [r5, r3]
 80040ee:	5823      	ldr	r3, [r4, r0]
 80040f0:	eb04 0c00 	add.w	ip, r4, r0
 80040f4:	f023 0301 	bic.w	r3, r3, #1
 80040f8:	5023      	str	r3, [r4, r0]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, MemoryAddress);
 80040fa:	f8cc 100c 	str.w	r1, [ip, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 80040fe:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8004102:	0c1b      	lsrs	r3, r3, #16
 8004104:	041b      	lsls	r3, r3, #16
 8004106:	431a      	orrs	r2, r3
 8004108:	f8cc 2004 	str.w	r2, [ip, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 800410c:	5823      	ldr	r3, [r4, r0]
 800410e:	f043 0301 	orr.w	r3, r3, #1
 8004112:	5023      	str	r3, [r4, r0]
  //cstat !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6
  LL_DMA_SetMemoryAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)buffer);
  LL_DMA_SetDataLength(pHandle->rxDMA, pHandle->rxChannel, length);

  LL_DMA_EnableChannel(pHandle->rxDMA, pHandle->rxChannel);
}
 8004114:	bc30      	pop	{r4, r5}
 8004116:	4770      	bx	lr
 8004118:	08009780 	.word	0x08009780

0800411c <UASPEP_IDLE_ENABLE>:
  * @param  pHandle Handler of the current instance of the UASPEP component
  */
void UASPEP_IDLE_ENABLE(void *pHWHandle)
{
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *)pHWHandle; //cstat !MISRAC2012-Rule-11.5
  LL_USART_ClearFlag_IDLE(pHandle->USARTx);
 800411c:	6802      	ldr	r2, [r0, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 800411e:	2310      	movs	r3, #16
 8004120:	6213      	str	r3, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004122:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8004126:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800412a:	e842 3100 	strex	r1, r3, [r2]
 800412e:	2900      	cmp	r1, #0
 8004130:	d1f7      	bne.n	8004122 <UASPEP_IDLE_ENABLE+0x6>
  LL_USART_EnableIT_IDLE(pHandle->USARTx);
}
 8004132:	4770      	bx	lr

08004134 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004134:	4a03      	ldr	r2, [pc, #12]	; (8004144 <SystemInit+0x10>)
 8004136:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800413a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800413e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004142:	4770      	bx	lr
 8004144:	e000ed00 	.word	0xe000ed00

08004148 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004148:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 800414a:	4b0f      	ldr	r3, [pc, #60]	; (8004188 <HAL_InitTick+0x40>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	b90b      	cbnz	r3, 8004154 <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8004150:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8004152:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004154:	490d      	ldr	r1, [pc, #52]	; (800418c <HAL_InitTick+0x44>)
 8004156:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800415a:	4605      	mov	r5, r0
 800415c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004160:	6808      	ldr	r0, [r1, #0]
 8004162:	fbb0 f0f3 	udiv	r0, r0, r3
 8004166:	f001 f847 	bl	80051f8 <HAL_SYSTICK_Config>
 800416a:	4604      	mov	r4, r0
 800416c:	2800      	cmp	r0, #0
 800416e:	d1ef      	bne.n	8004150 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004170:	2d0f      	cmp	r5, #15
 8004172:	d8ed      	bhi.n	8004150 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004174:	4602      	mov	r2, r0
 8004176:	4629      	mov	r1, r5
 8004178:	f04f 30ff 	mov.w	r0, #4294967295
 800417c:	f000 fff0 	bl	8005160 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004180:	4b03      	ldr	r3, [pc, #12]	; (8004190 <HAL_InitTick+0x48>)
 8004182:	4620      	mov	r0, r4
 8004184:	601d      	str	r5, [r3, #0]
}
 8004186:	bd38      	pop	{r3, r4, r5, pc}
 8004188:	20000440 	.word	0x20000440
 800418c:	2000043c 	.word	0x2000043c
 8004190:	20000444 	.word	0x20000444

08004194 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004194:	4a0a      	ldr	r2, [pc, #40]	; (80041c0 <HAL_Init+0x2c>)
 8004196:	6813      	ldr	r3, [r2, #0]
 8004198:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 800419c:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800419e:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80041a0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80041a2:	f000 ffcb 	bl	800513c <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80041a6:	2004      	movs	r0, #4
 80041a8:	f7ff ffce 	bl	8004148 <HAL_InitTick>
 80041ac:	b110      	cbz	r0, 80041b4 <HAL_Init+0x20>
    status = HAL_ERROR;
 80041ae:	2401      	movs	r4, #1
}
 80041b0:	4620      	mov	r0, r4
 80041b2:	bd10      	pop	{r4, pc}
 80041b4:	4604      	mov	r4, r0
    HAL_MspInit();
 80041b6:	f7ff fc6d 	bl	8003a94 <HAL_MspInit>
}
 80041ba:	4620      	mov	r0, r4
 80041bc:	bd10      	pop	{r4, pc}
 80041be:	bf00      	nop
 80041c0:	40022000 	.word	0x40022000

080041c4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80041c4:	4a03      	ldr	r2, [pc, #12]	; (80041d4 <HAL_IncTick+0x10>)
 80041c6:	4904      	ldr	r1, [pc, #16]	; (80041d8 <HAL_IncTick+0x14>)
 80041c8:	6813      	ldr	r3, [r2, #0]
 80041ca:	6809      	ldr	r1, [r1, #0]
 80041cc:	440b      	add	r3, r1
 80041ce:	6013      	str	r3, [r2, #0]
}
 80041d0:	4770      	bx	lr
 80041d2:	bf00      	nop
 80041d4:	20001938 	.word	0x20001938
 80041d8:	20000440 	.word	0x20000440

080041dc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80041dc:	4b01      	ldr	r3, [pc, #4]	; (80041e4 <HAL_GetTick+0x8>)
 80041de:	6818      	ldr	r0, [r3, #0]
}
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	20001938 	.word	0x20001938

080041e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80041e8:	b538      	push	{r3, r4, r5, lr}
 80041ea:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80041ec:	f7ff fff6 	bl	80041dc <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80041f0:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80041f2:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 80041f4:	d002      	beq.n	80041fc <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80041f6:	4b04      	ldr	r3, [pc, #16]	; (8004208 <HAL_Delay+0x20>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80041fc:	f7ff ffee 	bl	80041dc <HAL_GetTick>
 8004200:	1b43      	subs	r3, r0, r5
 8004202:	42a3      	cmp	r3, r4
 8004204:	d3fa      	bcc.n	80041fc <HAL_Delay+0x14>
  {
  }
}
 8004206:	bd38      	pop	{r3, r4, r5, pc}
 8004208:	20000440 	.word	0x20000440

0800420c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800420c:	b530      	push	{r4, r5, lr}
 800420e:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004210:	2300      	movs	r3, #0
 8004212:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004214:	2800      	cmp	r0, #0
 8004216:	f000 80d4 	beq.w	80043c2 <HAL_ADC_Init+0x1b6>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800421a:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 800421c:	4604      	mov	r4, r0
 800421e:	2d00      	cmp	r5, #0
 8004220:	f000 809d 	beq.w	800435e <HAL_ADC_Init+0x152>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004224:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004226:	6893      	ldr	r3, [r2, #8]
 8004228:	009d      	lsls	r5, r3, #2
 800422a:	d505      	bpl.n	8004238 <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800422c:	6893      	ldr	r3, [r2, #8]
 800422e:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8004232:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004236:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004238:	6893      	ldr	r3, [r2, #8]
 800423a:	00d8      	lsls	r0, r3, #3
 800423c:	d419      	bmi.n	8004272 <HAL_ADC_Init+0x66>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800423e:	4b7e      	ldr	r3, [pc, #504]	; (8004438 <HAL_ADC_Init+0x22c>)
 8004240:	487e      	ldr	r0, [pc, #504]	; (800443c <HAL_ADC_Init+0x230>)
 8004242:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8004244:	6891      	ldr	r1, [r2, #8]
 8004246:	099b      	lsrs	r3, r3, #6
 8004248:	fba0 0303 	umull	r0, r3, r0, r3
 800424c:	f021 4110 	bic.w	r1, r1, #2415919104	; 0x90000000
 8004250:	099b      	lsrs	r3, r3, #6
 8004252:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8004256:	3301      	adds	r3, #1
 8004258:	005b      	lsls	r3, r3, #1
 800425a:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800425e:	6091      	str	r1, [r2, #8]
 8004260:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8004262:	9b01      	ldr	r3, [sp, #4]
 8004264:	b12b      	cbz	r3, 8004272 <HAL_ADC_Init+0x66>
    {
      wait_loop_index--;
 8004266:	9b01      	ldr	r3, [sp, #4]
 8004268:	3b01      	subs	r3, #1
 800426a:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800426c:	9b01      	ldr	r3, [sp, #4]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d1f9      	bne.n	8004266 <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004272:	6893      	ldr	r3, [r2, #8]
 8004274:	00d9      	lsls	r1, r3, #3
 8004276:	d464      	bmi.n	8004342 <HAL_ADC_Init+0x136>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004278:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800427a:	f043 0310 	orr.w	r3, r3, #16
 800427e:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004280:	6e23      	ldr	r3, [r4, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004282:	2001      	movs	r0, #1
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004284:	4303      	orrs	r3, r0
 8004286:	6623      	str	r3, [r4, #96]	; 0x60
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004288:	6893      	ldr	r3, [r2, #8]
 800428a:	f013 0f04 	tst.w	r3, #4
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800428e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004290:	d15e      	bne.n	8004350 <HAL_ADC_Init+0x144>
 8004292:	06db      	lsls	r3, r3, #27
 8004294:	d45c      	bmi.n	8004350 <HAL_ADC_Init+0x144>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004296:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004298:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800429c:	f043 0302 	orr.w	r3, r3, #2
 80042a0:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80042a2:	6893      	ldr	r3, [r2, #8]
 80042a4:	07dd      	lsls	r5, r3, #31
 80042a6:	d419      	bmi.n	80042dc <HAL_ADC_Init+0xd0>
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80042a8:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80042ac:	4b64      	ldr	r3, [pc, #400]	; (8004440 <HAL_ADC_Init+0x234>)
 80042ae:	f000 80a0 	beq.w	80043f2 <HAL_ADC_Init+0x1e6>
 80042b2:	429a      	cmp	r2, r3
 80042b4:	f000 80a5 	beq.w	8004402 <HAL_ADC_Init+0x1f6>
 80042b8:	4962      	ldr	r1, [pc, #392]	; (8004444 <HAL_ADC_Init+0x238>)
 80042ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80042be:	6889      	ldr	r1, [r1, #8]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	430b      	orrs	r3, r1
 80042c4:	4960      	ldr	r1, [pc, #384]	; (8004448 <HAL_ADC_Init+0x23c>)
 80042c6:	6889      	ldr	r1, [r1, #8]
 80042c8:	430b      	orrs	r3, r1
 80042ca:	07d9      	lsls	r1, r3, #31
 80042cc:	d406      	bmi.n	80042dc <HAL_ADC_Init+0xd0>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80042ce:	495f      	ldr	r1, [pc, #380]	; (800444c <HAL_ADC_Init+0x240>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80042d0:	688b      	ldr	r3, [r1, #8]
 80042d2:	6865      	ldr	r5, [r4, #4]
 80042d4:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80042d8:	432b      	orrs	r3, r5
 80042da:	608b      	str	r3, [r1, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 80042dc:	68e5      	ldr	r5, [r4, #12]
 80042de:	6be3      	ldr	r3, [r4, #60]	; 0x3c
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80042e0:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
                hadc->Init.DataAlign                                                   |
 80042e4:	432b      	orrs	r3, r5
 80042e6:	68a5      	ldr	r5, [r4, #8]
 80042e8:	432b      	orrs	r3, r5
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80042ea:	7f65      	ldrb	r5, [r4, #29]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80042ec:	2901      	cmp	r1, #1
                hadc->Init.DataAlign                                                   |
 80042ee:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80042f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80042f6:	d05f      	beq.n	80043b8 <HAL_ADC_Init+0x1ac>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80042f8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80042fa:	b121      	cbz	r1, 8004306 <HAL_ADC_Init+0xfa>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 80042fc:	6b25      	ldr	r5, [r4, #48]	; 0x30
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80042fe:	f401 7178 	and.w	r1, r1, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004302:	4329      	orrs	r1, r5
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004304:	430b      	orrs	r3, r1
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004306:	68d5      	ldr	r5, [r2, #12]
 8004308:	4951      	ldr	r1, [pc, #324]	; (8004450 <HAL_ADC_Init+0x244>)
 800430a:	4029      	ands	r1, r5
 800430c:	4319      	orrs	r1, r3
 800430e:	60d1      	str	r1, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004310:	6913      	ldr	r3, [r2, #16]
 8004312:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004314:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8004318:	430b      	orrs	r3, r1
 800431a:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800431c:	6893      	ldr	r3, [r2, #8]
 800431e:	075b      	lsls	r3, r3, #29
 8004320:	d523      	bpl.n	800436a <HAL_ADC_Init+0x15e>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004322:	6893      	ldr	r3, [r2, #8]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004324:	6963      	ldr	r3, [r4, #20]
 8004326:	2b01      	cmp	r3, #1
 8004328:	d04e      	beq.n	80043c8 <HAL_ADC_Init+0x1bc>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800432a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800432c:	f023 030f 	bic.w	r3, r3, #15
 8004330:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004332:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004334:	f023 0303 	bic.w	r3, r3, #3
 8004338:	f043 0301 	orr.w	r3, r3, #1
 800433c:	65e3      	str	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 800433e:	b003      	add	sp, #12
 8004340:	bd30      	pop	{r4, r5, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004342:	6893      	ldr	r3, [r2, #8]
 8004344:	f013 0f04 	tst.w	r3, #4
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004348:	f04f 0000 	mov.w	r0, #0
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800434c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800434e:	d0a0      	beq.n	8004292 <HAL_ADC_Init+0x86>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004350:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 8004352:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004354:	f043 0310 	orr.w	r3, r3, #16
 8004358:	65e3      	str	r3, [r4, #92]	; 0x5c
}
 800435a:	b003      	add	sp, #12
 800435c:	bd30      	pop	{r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 800435e:	f7ff fbb9 	bl	8003ad4 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8004362:	6625      	str	r5, [r4, #96]	; 0x60
    hadc->Lock = HAL_UNLOCKED;
 8004364:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 8004368:	e75c      	b.n	8004224 <HAL_ADC_Init+0x18>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800436a:	6893      	ldr	r3, [r2, #8]
 800436c:	071d      	lsls	r5, r3, #28
 800436e:	d4d9      	bmi.n	8004324 <HAL_ADC_Init+0x118>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004370:	68d1      	ldr	r1, [r2, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004372:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004376:	7f25      	ldrb	r5, [r4, #28]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004378:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800437c:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800437e:	f021 0102 	bic.w	r1, r1, #2
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004382:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004386:	430b      	orrs	r3, r1
      if (hadc->Init.GainCompensation != 0UL)
 8004388:	6921      	ldr	r1, [r4, #16]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800438a:	60d3      	str	r3, [r2, #12]
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800438c:	6913      	ldr	r3, [r2, #16]
      if (hadc->Init.GainCompensation != 0UL)
 800438e:	bb19      	cbnz	r1, 80043d8 <HAL_ADC_Init+0x1cc>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004390:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004394:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004396:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 800439a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800439e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80043a2:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      if (hadc->Init.OversamplingMode == ENABLE)
 80043a6:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d032      	beq.n	8004414 <HAL_ADC_Init+0x208>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80043ae:	6913      	ldr	r3, [r2, #16]
 80043b0:	f023 0301 	bic.w	r3, r3, #1
 80043b4:	6113      	str	r3, [r2, #16]
 80043b6:	e7b5      	b.n	8004324 <HAL_ADC_Init+0x118>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80043b8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80043ba:	3901      	subs	r1, #1
 80043bc:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 80043c0:	e79a      	b.n	80042f8 <HAL_ADC_Init+0xec>
    return HAL_ERROR;
 80043c2:	2001      	movs	r0, #1
}
 80043c4:	b003      	add	sp, #12
 80043c6:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80043c8:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80043ca:	6a23      	ldr	r3, [r4, #32]
 80043cc:	f021 010f 	bic.w	r1, r1, #15
 80043d0:	3b01      	subs	r3, #1
 80043d2:	430b      	orrs	r3, r1
 80043d4:	6313      	str	r3, [r2, #48]	; 0x30
 80043d6:	e7ac      	b.n	8004332 <HAL_ADC_Init+0x126>
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80043d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043dc:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80043de:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 80043e2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80043e6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80043ea:	430b      	orrs	r3, r1
 80043ec:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80043f0:	e7d9      	b.n	80043a6 <HAL_ADC_Init+0x19a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80043f2:	6891      	ldr	r1, [r2, #8]
 80043f4:	689b      	ldr	r3, [r3, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80043f6:	430b      	orrs	r3, r1
 80043f8:	07db      	lsls	r3, r3, #31
 80043fa:	f53f af6f 	bmi.w	80042dc <HAL_ADC_Init+0xd0>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80043fe:	4915      	ldr	r1, [pc, #84]	; (8004454 <HAL_ADC_Init+0x248>)
 8004400:	e766      	b.n	80042d0 <HAL_ADC_Init+0xc4>
 8004402:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	6891      	ldr	r1, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800440a:	430b      	orrs	r3, r1
 800440c:	07d9      	lsls	r1, r3, #31
 800440e:	f53f af65 	bmi.w	80042dc <HAL_ADC_Init+0xd0>
 8004412:	e7f4      	b.n	80043fe <HAL_ADC_Init+0x1f2>
        MODIFY_REG(hadc->Instance->CFGR2,
 8004414:	6911      	ldr	r1, [r2, #16]
 8004416:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004418:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 800441a:	f421 61ff 	bic.w	r1, r1, #2040	; 0x7f8
 800441e:	f021 0104 	bic.w	r1, r1, #4
 8004422:	432b      	orrs	r3, r5
 8004424:	430b      	orrs	r3, r1
 8004426:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8004428:	430b      	orrs	r3, r1
 800442a:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800442c:	430b      	orrs	r3, r1
 800442e:	f043 0301 	orr.w	r3, r3, #1
 8004432:	6113      	str	r3, [r2, #16]
 8004434:	e776      	b.n	8004324 <HAL_ADC_Init+0x118>
 8004436:	bf00      	nop
 8004438:	2000043c 	.word	0x2000043c
 800443c:	053e2d63 	.word	0x053e2d63
 8004440:	50000100 	.word	0x50000100
 8004444:	50000400 	.word	0x50000400
 8004448:	50000600 	.word	0x50000600
 800444c:	50000700 	.word	0x50000700
 8004450:	fff04007 	.word	0xfff04007
 8004454:	50000300 	.word	0x50000300

08004458 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004458:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800445a:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
{
 800445e:	b083      	sub	sp, #12
 8004460:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8004462:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 8004464:	f04f 0000 	mov.w	r0, #0
 8004468:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 800446a:	f000 8174 	beq.w	8004756 <HAL_ADC_ConfigChannel+0x2fe>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800446e:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 8004470:	2001      	movs	r0, #1
 8004472:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004476:	6894      	ldr	r4, [r2, #8]
 8004478:	0766      	lsls	r6, r4, #29
 800447a:	d45e      	bmi.n	800453a <HAL_ADC_ConfigChannel+0xe2>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800447c:	6848      	ldr	r0, [r1, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800447e:	ea4f 1e90 	mov.w	lr, r0, lsr #6
  MODIFY_REG(*preg,
 8004482:	f000 0c1f 	and.w	ip, r0, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004486:	f00e 0e0c 	and.w	lr, lr, #12
  MODIFY_REG(*preg,
 800448a:	6808      	ldr	r0, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800448c:	f102 0430 	add.w	r4, r2, #48	; 0x30
  MODIFY_REG(*preg,
 8004490:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8004494:	f854 500e 	ldr.w	r5, [r4, lr]
 8004498:	261f      	movs	r6, #31
 800449a:	fa00 f00c 	lsl.w	r0, r0, ip
 800449e:	fa06 fc0c 	lsl.w	ip, r6, ip
 80044a2:	ea25 0c0c 	bic.w	ip, r5, ip
 80044a6:	ea40 000c 	orr.w	r0, r0, ip
 80044aa:	f844 000e 	str.w	r0, [r4, lr]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80044ae:	6890      	ldr	r0, [r2, #8]
 80044b0:	0745      	lsls	r5, r0, #29
 80044b2:	d572      	bpl.n	800459a <HAL_ADC_ConfigChannel+0x142>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80044b4:	6890      	ldr	r0, [r2, #8]
 80044b6:	6808      	ldr	r0, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80044b8:	6894      	ldr	r4, [r2, #8]
 80044ba:	f014 0f01 	tst.w	r4, #1
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80044be:	4604      	mov	r4, r0
 80044c0:	d10c      	bne.n	80044dc <HAL_ADC_ConfigChannel+0x84>
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80044c2:	4dbd      	ldr	r5, [pc, #756]	; (80047b8 <HAL_ADC_ConfigChannel+0x360>)
 80044c4:	68ce      	ldr	r6, [r1, #12]
 80044c6:	42ae      	cmp	r6, r5
 80044c8:	f000 80eb 	beq.w	80046a2 <HAL_ADC_ConfigChannel+0x24a>
    CLEAR_BIT(ADCx->DIFSEL,
 80044cc:	f8d2 10b0 	ldr.w	r1, [r2, #176]	; 0xb0
 80044d0:	f3c0 0012 	ubfx	r0, r0, #0, #19
 80044d4:	ea21 0100 	bic.w	r1, r1, r0
 80044d8:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80044dc:	49b7      	ldr	r1, [pc, #732]	; (80047bc <HAL_ADC_ConfigChannel+0x364>)
 80044de:	420c      	tst	r4, r1
 80044e0:	d059      	beq.n	8004596 <HAL_ADC_ConfigChannel+0x13e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80044e2:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80044e6:	f000 8134 	beq.w	8004752 <HAL_ADC_ConfigChannel+0x2fa>
 80044ea:	4db5      	ldr	r5, [pc, #724]	; (80047c0 <HAL_ADC_ConfigChannel+0x368>)
 80044ec:	49b5      	ldr	r1, [pc, #724]	; (80047c4 <HAL_ADC_ConfigChannel+0x36c>)
 80044ee:	48b6      	ldr	r0, [pc, #728]	; (80047c8 <HAL_ADC_ConfigChannel+0x370>)
 80044f0:	42aa      	cmp	r2, r5
 80044f2:	bf18      	it	ne
 80044f4:	4601      	movne	r1, r0
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80044f6:	6888      	ldr	r0, [r1, #8]

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80044f8:	49b4      	ldr	r1, [pc, #720]	; (80047cc <HAL_ADC_ConfigChannel+0x374>)
 80044fa:	428c      	cmp	r4, r1
 80044fc:	f000 75e0 	and.w	r5, r0, #29360128	; 0x1c00000
 8004500:	d024      	beq.n	800454c <HAL_ADC_ConfigChannel+0xf4>
 8004502:	49b3      	ldr	r1, [pc, #716]	; (80047d0 <HAL_ADC_ConfigChannel+0x378>)
 8004504:	428c      	cmp	r4, r1
 8004506:	d021      	beq.n	800454c <HAL_ADC_ConfigChannel+0xf4>
          {
            wait_loop_index--;
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004508:	49b2      	ldr	r1, [pc, #712]	; (80047d4 <HAL_ADC_ConfigChannel+0x37c>)
 800450a:	428c      	cmp	r4, r1
 800450c:	f040 8139 	bne.w	8004782 <HAL_ADC_ConfigChannel+0x32a>
 8004510:	01c4      	lsls	r4, r0, #7
 8004512:	d440      	bmi.n	8004596 <HAL_ADC_ConfigChannel+0x13e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004514:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8004518:	f000 8215 	beq.w	8004946 <HAL_ADC_ConfigChannel+0x4ee>
 800451c:	4ca8      	ldr	r4, [pc, #672]	; (80047c0 <HAL_ADC_ConfigChannel+0x368>)
 800451e:	49a9      	ldr	r1, [pc, #676]	; (80047c4 <HAL_ADC_ConfigChannel+0x36c>)
 8004520:	48a9      	ldr	r0, [pc, #676]	; (80047c8 <HAL_ADC_ConfigChannel+0x370>)
 8004522:	42a2      	cmp	r2, r4
 8004524:	bf18      	it	ne
 8004526:	4601      	movne	r1, r0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004528:	688a      	ldr	r2, [r1, #8]
 800452a:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 800452e:	432a      	orrs	r2, r5
 8004530:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004534:	2000      	movs	r0, #0
 8004536:	608a      	str	r2, [r1, #8]
}
 8004538:	e003      	b.n	8004542 <HAL_ADC_ConfigChannel+0xea>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800453a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800453c:	f042 0220 	orr.w	r2, r2, #32
 8004540:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004542:	2200      	movs	r2, #0
 8004544:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8004548:	b003      	add	sp, #12
 800454a:	bdf0      	pop	{r4, r5, r6, r7, pc}
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800454c:	0201      	lsls	r1, r0, #8
 800454e:	d422      	bmi.n	8004596 <HAL_ADC_ConfigChannel+0x13e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004550:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8004554:	f000 8113 	beq.w	800477e <HAL_ADC_ConfigChannel+0x326>
 8004558:	499f      	ldr	r1, [pc, #636]	; (80047d8 <HAL_ADC_ConfigChannel+0x380>)
 800455a:	428a      	cmp	r2, r1
 800455c:	d11b      	bne.n	8004596 <HAL_ADC_ConfigChannel+0x13e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800455e:	489a      	ldr	r0, [pc, #616]	; (80047c8 <HAL_ADC_ConfigChannel+0x370>)
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004560:	4a9e      	ldr	r2, [pc, #632]	; (80047dc <HAL_ADC_ConfigChannel+0x384>)
 8004562:	4c9f      	ldr	r4, [pc, #636]	; (80047e0 <HAL_ADC_ConfigChannel+0x388>)
 8004564:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004566:	6881      	ldr	r1, [r0, #8]
 8004568:	0992      	lsrs	r2, r2, #6
 800456a:	fba4 4202 	umull	r4, r2, r4, r2
 800456e:	0992      	lsrs	r2, r2, #6
 8004570:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8004574:	3201      	adds	r2, #1
 8004576:	4329      	orrs	r1, r5
 8004578:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800457c:	0092      	lsls	r2, r2, #2
 800457e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8004582:	6081      	str	r1, [r0, #8]
 8004584:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8004586:	9a01      	ldr	r2, [sp, #4]
 8004588:	b12a      	cbz	r2, 8004596 <HAL_ADC_ConfigChannel+0x13e>
            wait_loop_index--;
 800458a:	9a01      	ldr	r2, [sp, #4]
 800458c:	3a01      	subs	r2, #1
 800458e:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8004590:	9a01      	ldr	r2, [sp, #4]
 8004592:	2a00      	cmp	r2, #0
 8004594:	d1f9      	bne.n	800458a <HAL_ADC_ConfigChannel+0x132>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004596:	2000      	movs	r0, #0
 8004598:	e7d3      	b.n	8004542 <HAL_ADC_ConfigChannel+0xea>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800459a:	6890      	ldr	r0, [r2, #8]
 800459c:	0700      	lsls	r0, r0, #28
 800459e:	d47e      	bmi.n	800469e <HAL_ADC_ConfigChannel+0x246>
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80045a0:	6888      	ldr	r0, [r1, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80045a2:	680d      	ldr	r5, [r1, #0]
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80045a4:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 80045a8:	f000 8120 	beq.w	80047ec <HAL_ADC_ConfigChannel+0x394>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80045ac:	0dee      	lsrs	r6, r5, #23
 80045ae:	f102 0c14 	add.w	ip, r2, #20
 80045b2:	f006 0604 	and.w	r6, r6, #4
  MODIFY_REG(*preg,
 80045b6:	f3c5 5504 	ubfx	r5, r5, #20, #5
 80045ba:	f85c 4006 	ldr.w	r4, [ip, r6]
 80045be:	2707      	movs	r7, #7
 80045c0:	40a8      	lsls	r0, r5
 80045c2:	fa07 f505 	lsl.w	r5, r7, r5
 80045c6:	ea24 0405 	bic.w	r4, r4, r5
 80045ca:	4320      	orrs	r0, r4
 80045cc:	f84c 0006 	str.w	r0, [ip, r6]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80045d0:	6950      	ldr	r0, [r2, #20]
 80045d2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80045d6:	6150      	str	r0, [r2, #20]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80045d8:	e9d1 5604 	ldrd	r5, r6, [r1, #16]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80045dc:	2d04      	cmp	r5, #4
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80045de:	68d0      	ldr	r0, [r2, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80045e0:	d02d      	beq.n	800463e <HAL_ADC_ConfigChannel+0x1e6>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80045e2:	f102 0460 	add.w	r4, r2, #96	; 0x60
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80045e6:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 80045ea:	0040      	lsls	r0, r0, #1
  MODIFY_REG(*preg,
 80045ec:	f854 c025 	ldr.w	ip, [r4, r5, lsl #2]
 80045f0:	4f7c      	ldr	r7, [pc, #496]	; (80047e4 <HAL_ADC_ConfigChannel+0x38c>)
 80045f2:	4086      	lsls	r6, r0
 80045f4:	6808      	ldr	r0, [r1, #0]
 80045f6:	ea0c 0707 	and.w	r7, ip, r7
 80045fa:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80045fe:	4338      	orrs	r0, r7
 8004600:	4330      	orrs	r0, r6
 8004602:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8004606:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800460a:	690d      	ldr	r5, [r1, #16]
  MODIFY_REG(*preg,
 800460c:	698e      	ldr	r6, [r1, #24]
 800460e:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 8004612:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
 8004616:	4330      	orrs	r0, r6
 8004618:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800461c:	690e      	ldr	r6, [r1, #16]
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800461e:	7f0d      	ldrb	r5, [r1, #28]
  MODIFY_REG(*preg,
 8004620:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 8004624:	f1a5 0501 	sub.w	r5, r5, #1
 8004628:	fab5 f585 	clz	r5, r5
 800462c:	096d      	lsrs	r5, r5, #5
 800462e:	f020 7000 	bic.w	r0, r0, #33554432	; 0x2000000
 8004632:	ea40 6045 	orr.w	r0, r0, r5, lsl #25
 8004636:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
 800463a:	6808      	ldr	r0, [r1, #0]
}
 800463c:	e73c      	b.n	80044b8 <HAL_ADC_ConfigChannel+0x60>
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800463e:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004640:	6e14      	ldr	r4, [r2, #96]	; 0x60
 8004642:	6e14      	ldr	r4, [r2, #96]	; 0x60
 8004644:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004648:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800464c:	2d00      	cmp	r5, #0
 800464e:	f040 80df 	bne.w	8004810 <HAL_ADC_ConfigChannel+0x3b8>
 8004652:	f3c0 6584 	ubfx	r5, r0, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004656:	42ac      	cmp	r4, r5
 8004658:	f000 813d 	beq.w	80048d6 <HAL_ADC_ConfigChannel+0x47e>
 800465c:	6e54      	ldr	r4, [r2, #100]	; 0x64
 800465e:	6e56      	ldr	r6, [r2, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004660:	f102 0460 	add.w	r4, r2, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004664:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8004668:	f102 0764 	add.w	r7, r2, #100	; 0x64
 800466c:	42ae      	cmp	r6, r5
 800466e:	f000 8158 	beq.w	8004922 <HAL_ADC_ConfigChannel+0x4ca>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004672:	68a6      	ldr	r6, [r4, #8]
 8004674:	68a6      	ldr	r6, [r4, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004676:	f104 0708 	add.w	r7, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800467a:	f3c6 6684 	ubfx	r6, r6, #26, #5
 800467e:	42ae      	cmp	r6, r5
 8004680:	f000 813d 	beq.w	80048fe <HAL_ADC_ConfigChannel+0x4a6>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004684:	68e6      	ldr	r6, [r4, #12]
 8004686:	68e6      	ldr	r6, [r4, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004688:	f104 070c 	add.w	r7, r4, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800468c:	f3c6 6484 	ubfx	r4, r6, #26, #5
 8004690:	42a5      	cmp	r5, r4
 8004692:	f47f af11 	bne.w	80044b8 <HAL_ADC_ConfigChannel+0x60>
  MODIFY_REG(*preg,
 8004696:	6838      	ldr	r0, [r7, #0]
 8004698:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800469c:	6038      	str	r0, [r7, #0]
 800469e:	6808      	ldr	r0, [r1, #0]
}
 80046a0:	e70a      	b.n	80044b8 <HAL_ADC_ConfigChannel+0x60>
    SET_BIT(ADCx->DIFSEL,
 80046a2:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 80046a6:	f3c0 0512 	ubfx	r5, r0, #0, #19
 80046aa:	432c      	orrs	r4, r5
 80046ac:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80046b0:	2d00      	cmp	r5, #0
 80046b2:	d053      	beq.n	800475c <HAL_ADC_ConfigChannel+0x304>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046b4:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 80046b8:	2c00      	cmp	r4, #0
 80046ba:	f000 80e8 	beq.w	800488e <HAL_ADC_ConfigChannel+0x436>
  return __builtin_clz(value);
 80046be:	fab4 f484 	clz	r4, r4
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80046c2:	3401      	adds	r4, #1
 80046c4:	f004 041f 	and.w	r4, r4, #31
 80046c8:	2c09      	cmp	r4, #9
 80046ca:	f240 80e0 	bls.w	800488e <HAL_ADC_ConfigChannel+0x436>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ce:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 80046d2:	2c00      	cmp	r4, #0
 80046d4:	f000 813d 	beq.w	8004952 <HAL_ADC_ConfigChannel+0x4fa>
  return __builtin_clz(value);
 80046d8:	fab4 f484 	clz	r4, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80046dc:	3401      	adds	r4, #1
 80046de:	06a4      	lsls	r4, r4, #26
 80046e0:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046e4:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 80046e8:	2d00      	cmp	r5, #0
 80046ea:	f000 8130 	beq.w	800494e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80046ee:	fab5 f585 	clz	r5, r5
 80046f2:	3501      	adds	r5, #1
 80046f4:	f005 051f 	and.w	r5, r5, #31
 80046f8:	2601      	movs	r6, #1
 80046fa:	fa06 f505 	lsl.w	r5, r6, r5
 80046fe:	432c      	orrs	r4, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004700:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8004704:	2800      	cmp	r0, #0
 8004706:	f000 8120 	beq.w	800494a <HAL_ADC_ConfigChannel+0x4f2>
  return __builtin_clz(value);
 800470a:	fab0 f080 	clz	r0, r0
 800470e:	1c45      	adds	r5, r0, #1
 8004710:	f005 051f 	and.w	r5, r5, #31
 8004714:	2003      	movs	r0, #3
 8004716:	f06f 061d 	mvn.w	r6, #29
 800471a:	fb10 6005 	smlabb	r0, r0, r5, r6
 800471e:	0500      	lsls	r0, r0, #20
 8004720:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004724:	4320      	orrs	r0, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004726:	0dc5      	lsrs	r5, r0, #23
  MODIFY_REG(*preg,
 8004728:	688c      	ldr	r4, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800472a:	f005 0504 	and.w	r5, r5, #4
 800472e:	f102 0614 	add.w	r6, r2, #20
  MODIFY_REG(*preg,
 8004732:	f3c0 5004 	ubfx	r0, r0, #20, #5
 8004736:	fa04 fc00 	lsl.w	ip, r4, r0
 800473a:	f04f 0e07 	mov.w	lr, #7
 800473e:	5974      	ldr	r4, [r6, r5]
 8004740:	fa0e f000 	lsl.w	r0, lr, r0
 8004744:	ea24 0000 	bic.w	r0, r4, r0
 8004748:	ea40 000c 	orr.w	r0, r0, ip
 800474c:	5170      	str	r0, [r6, r5]
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800474e:	680c      	ldr	r4, [r1, #0]
}
 8004750:	e6c4      	b.n	80044dc <HAL_ADC_ConfigChannel+0x84>
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004752:	491c      	ldr	r1, [pc, #112]	; (80047c4 <HAL_ADC_ConfigChannel+0x36c>)
 8004754:	e6cf      	b.n	80044f6 <HAL_ADC_ConfigChannel+0x9e>
  __HAL_LOCK(hadc);
 8004756:	2002      	movs	r0, #2
}
 8004758:	b003      	add	sp, #12
 800475a:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800475c:	0e80      	lsrs	r0, r0, #26
 800475e:	3001      	adds	r0, #1
 8004760:	f000 051f 	and.w	r5, r0, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004764:	2d09      	cmp	r5, #9
 8004766:	f200 8084 	bhi.w	8004872 <HAL_ADC_ConfigChannel+0x41a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800476a:	0684      	lsls	r4, r0, #26
 800476c:	2001      	movs	r0, #1
 800476e:	40a8      	lsls	r0, r5
 8004770:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8004774:	4304      	orrs	r4, r0
 8004776:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 800477a:	0500      	lsls	r0, r0, #20
 800477c:	e7d2      	b.n	8004724 <HAL_ADC_ConfigChannel+0x2cc>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800477e:	4811      	ldr	r0, [pc, #68]	; (80047c4 <HAL_ADC_ConfigChannel+0x36c>)
 8004780:	e6ee      	b.n	8004560 <HAL_ADC_ConfigChannel+0x108>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004782:	4919      	ldr	r1, [pc, #100]	; (80047e8 <HAL_ADC_ConfigChannel+0x390>)
 8004784:	428c      	cmp	r4, r1
 8004786:	f47f af06 	bne.w	8004596 <HAL_ADC_ConfigChannel+0x13e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800478a:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 800478e:	f47f af02 	bne.w	8004596 <HAL_ADC_ConfigChannel+0x13e>
        if (ADC_VREFINT_INSTANCE(hadc))
 8004792:	490b      	ldr	r1, [pc, #44]	; (80047c0 <HAL_ADC_ConfigChannel+0x368>)
 8004794:	428a      	cmp	r2, r1
 8004796:	f43f aefe 	beq.w	8004596 <HAL_ADC_ConfigChannel+0x13e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800479a:	4c0b      	ldr	r4, [pc, #44]	; (80047c8 <HAL_ADC_ConfigChannel+0x370>)
 800479c:	f501 7100 	add.w	r1, r1, #512	; 0x200
 80047a0:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80047a4:	bf18      	it	ne
 80047a6:	4621      	movne	r1, r4
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80047a8:	688a      	ldr	r2, [r1, #8]
 80047aa:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80047ae:	432a      	orrs	r2, r5
 80047b0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80047b4:	608a      	str	r2, [r1, #8]
}
 80047b6:	e6c4      	b.n	8004542 <HAL_ADC_ConfigChannel+0xea>
 80047b8:	407f0000 	.word	0x407f0000
 80047bc:	80080000 	.word	0x80080000
 80047c0:	50000100 	.word	0x50000100
 80047c4:	50000300 	.word	0x50000300
 80047c8:	50000700 	.word	0x50000700
 80047cc:	c3210000 	.word	0xc3210000
 80047d0:	90c00010 	.word	0x90c00010
 80047d4:	c7520000 	.word	0xc7520000
 80047d8:	50000600 	.word	0x50000600
 80047dc:	2000043c 	.word	0x2000043c
 80047e0:	053e2d63 	.word	0x053e2d63
 80047e4:	03fff000 	.word	0x03fff000
 80047e8:	cb840000 	.word	0xcb840000
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80047ec:	0de8      	lsrs	r0, r5, #23
 80047ee:	f000 0004 	and.w	r0, r0, #4
 80047f2:	f102 0414 	add.w	r4, r2, #20
  MODIFY_REG(*preg,
 80047f6:	f3c5 5504 	ubfx	r5, r5, #20, #5
 80047fa:	2607      	movs	r6, #7
 80047fc:	40ae      	lsls	r6, r5
 80047fe:	5825      	ldr	r5, [r4, r0]
 8004800:	ea25 0506 	bic.w	r5, r5, r6
 8004804:	5025      	str	r5, [r4, r0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004806:	6950      	ldr	r0, [r2, #20]
 8004808:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800480c:	6150      	str	r0, [r2, #20]
}
 800480e:	e6e3      	b.n	80045d8 <HAL_ADC_ConfigChannel+0x180>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004810:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8004814:	b11d      	cbz	r5, 800481e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8004816:	fab5 f585 	clz	r5, r5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800481a:	42ac      	cmp	r4, r5
 800481c:	d05b      	beq.n	80048d6 <HAL_ADC_ConfigChannel+0x47e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800481e:	6e54      	ldr	r4, [r2, #100]	; 0x64
 8004820:	6e56      	ldr	r6, [r2, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004822:	f102 0460 	add.w	r4, r2, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004826:	f3c6 6684 	ubfx	r6, r6, #26, #5
 800482a:	f102 0764 	add.w	r7, r2, #100	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800482e:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8004832:	b11d      	cbz	r5, 800483c <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 8004834:	fab5 f585 	clz	r5, r5
 8004838:	42ae      	cmp	r6, r5
 800483a:	d072      	beq.n	8004922 <HAL_ADC_ConfigChannel+0x4ca>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800483c:	68a5      	ldr	r5, [r4, #8]
 800483e:	68a6      	ldr	r6, [r4, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004840:	f104 0708 	add.w	r7, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004844:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004848:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 800484c:	b11d      	cbz	r5, 8004856 <HAL_ADC_ConfigChannel+0x3fe>
  return __builtin_clz(value);
 800484e:	fab5 f585 	clz	r5, r5
 8004852:	42ae      	cmp	r6, r5
 8004854:	d053      	beq.n	80048fe <HAL_ADC_ConfigChannel+0x4a6>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004856:	68e5      	ldr	r5, [r4, #12]
 8004858:	68e5      	ldr	r5, [r4, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800485a:	f104 070c 	add.w	r7, r4, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800485e:	f3c5 6484 	ubfx	r4, r5, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004862:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8004866:	2d00      	cmp	r5, #0
 8004868:	f43f ae26 	beq.w	80044b8 <HAL_ADC_ConfigChannel+0x60>
  return __builtin_clz(value);
 800486c:	fab5 f585 	clz	r5, r5
 8004870:	e70e      	b.n	8004690 <HAL_ADC_ConfigChannel+0x238>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004872:	0684      	lsls	r4, r0, #26
 8004874:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 8004878:	381e      	subs	r0, #30
 800487a:	2601      	movs	r6, #1
 800487c:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8004880:	0500      	lsls	r0, r0, #20
 8004882:	fa06 f505 	lsl.w	r5, r6, r5
 8004886:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 800488a:	432c      	orrs	r4, r5
 800488c:	e74a      	b.n	8004724 <HAL_ADC_ConfigChannel+0x2cc>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800488e:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8004892:	2c00      	cmp	r4, #0
 8004894:	d065      	beq.n	8004962 <HAL_ADC_ConfigChannel+0x50a>
  return __builtin_clz(value);
 8004896:	fab4 f484 	clz	r4, r4
 800489a:	3401      	adds	r4, #1
 800489c:	06a4      	lsls	r4, r4, #26
 800489e:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048a2:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 80048a6:	2d00      	cmp	r5, #0
 80048a8:	d059      	beq.n	800495e <HAL_ADC_ConfigChannel+0x506>
  return __builtin_clz(value);
 80048aa:	fab5 f585 	clz	r5, r5
 80048ae:	3501      	adds	r5, #1
 80048b0:	f005 051f 	and.w	r5, r5, #31
 80048b4:	2601      	movs	r6, #1
 80048b6:	fa06 f505 	lsl.w	r5, r6, r5
 80048ba:	432c      	orrs	r4, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048bc:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 80048c0:	2800      	cmp	r0, #0
 80048c2:	d049      	beq.n	8004958 <HAL_ADC_ConfigChannel+0x500>
  return __builtin_clz(value);
 80048c4:	fab0 f080 	clz	r0, r0
 80048c8:	3001      	adds	r0, #1
 80048ca:	f000 001f 	and.w	r0, r0, #31
 80048ce:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80048d2:	0500      	lsls	r0, r0, #20
 80048d4:	e726      	b.n	8004724 <HAL_ADC_ConfigChannel+0x2cc>
  MODIFY_REG(*preg,
 80048d6:	6e10      	ldr	r0, [r2, #96]	; 0x60
 80048d8:	4614      	mov	r4, r2
 80048da:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80048de:	f844 0f60 	str.w	r0, [r4, #96]!
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80048e2:	6e50      	ldr	r0, [r2, #100]	; 0x64
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80048e4:	6808      	ldr	r0, [r1, #0]
 80048e6:	6e56      	ldr	r6, [r2, #100]	; 0x64
 80048e8:	f3c0 0512 	ubfx	r5, r0, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80048ec:	f102 0764 	add.w	r7, r2, #100	; 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80048f0:	f3c6 6684 	ubfx	r6, r6, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80048f4:	2d00      	cmp	r5, #0
 80048f6:	d19a      	bne.n	800482e <HAL_ADC_ConfigChannel+0x3d6>
 80048f8:	f3c0 6584 	ubfx	r5, r0, #26, #5
 80048fc:	e6b6      	b.n	800466c <HAL_ADC_ConfigChannel+0x214>
  MODIFY_REG(*preg,
 80048fe:	6838      	ldr	r0, [r7, #0]
 8004900:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004904:	6038      	str	r0, [r7, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004906:	68e0      	ldr	r0, [r4, #12]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004908:	6808      	ldr	r0, [r1, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800490a:	f104 070c 	add.w	r7, r4, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800490e:	68e4      	ldr	r4, [r4, #12]
 8004910:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004914:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004918:	2d00      	cmp	r5, #0
 800491a:	d1a2      	bne.n	8004862 <HAL_ADC_ConfigChannel+0x40a>
 800491c:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8004920:	e6b6      	b.n	8004690 <HAL_ADC_ConfigChannel+0x238>
  MODIFY_REG(*preg,
 8004922:	6838      	ldr	r0, [r7, #0]
 8004924:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004928:	6038      	str	r0, [r7, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800492a:	68a0      	ldr	r0, [r4, #8]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800492c:	6808      	ldr	r0, [r1, #0]
 800492e:	68a6      	ldr	r6, [r4, #8]
 8004930:	f3c0 0512 	ubfx	r5, r0, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004934:	f104 0708 	add.w	r7, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004938:	f3c6 6684 	ubfx	r6, r6, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800493c:	2d00      	cmp	r5, #0
 800493e:	d183      	bne.n	8004848 <HAL_ADC_ConfigChannel+0x3f0>
 8004940:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8004944:	e69b      	b.n	800467e <HAL_ADC_ConfigChannel+0x226>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004946:	4908      	ldr	r1, [pc, #32]	; (8004968 <HAL_ADC_ConfigChannel+0x510>)
 8004948:	e5ee      	b.n	8004528 <HAL_ADC_ConfigChannel+0xd0>
 800494a:	4808      	ldr	r0, [pc, #32]	; (800496c <HAL_ADC_ConfigChannel+0x514>)
 800494c:	e6ea      	b.n	8004724 <HAL_ADC_ConfigChannel+0x2cc>
 800494e:	2502      	movs	r5, #2
 8004950:	e6d5      	b.n	80046fe <HAL_ADC_ConfigChannel+0x2a6>
 8004952:	f04f 6480 	mov.w	r4, #67108864	; 0x4000000
 8004956:	e6c5      	b.n	80046e4 <HAL_ADC_ConfigChannel+0x28c>
 8004958:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 800495c:	e6e2      	b.n	8004724 <HAL_ADC_ConfigChannel+0x2cc>
 800495e:	2502      	movs	r5, #2
 8004960:	e7ab      	b.n	80048ba <HAL_ADC_ConfigChannel+0x462>
 8004962:	f04f 6480 	mov.w	r4, #67108864	; 0x4000000
 8004966:	e79c      	b.n	80048a2 <HAL_ADC_ConfigChannel+0x44a>
 8004968:	50000300 	.word	0x50000300
 800496c:	fe500000 	.word	0xfe500000

08004970 <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8004970:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004972:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
{
 8004976:	4602      	mov	r2, r0
 8004978:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 800497a:	2000      	movs	r0, #0
  __HAL_LOCK(hadc);
 800497c:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0;
 800497e:	9001      	str	r0, [sp, #4]
  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004980:	6950      	ldr	r0, [r2, #20]
  __HAL_LOCK(hadc);
 8004982:	f000 8178 	beq.w	8004c76 <HAL_ADCEx_InjectedConfigChannel+0x306>
 8004986:	2301      	movs	r3, #1
 8004988:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 800498c:	b1e8      	cbz	r0, 80049ca <HAL_ADCEx_InjectedConfigChannel+0x5a>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 800498e:	6a0b      	ldr	r3, [r1, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8004990:	2b01      	cmp	r3, #1
 8004992:	d01a      	beq.n	80049ca <HAL_ADCEx_InjectedConfigChannel+0x5a>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8004994:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8004996:	2800      	cmp	r0, #0
 8004998:	f040 8129 	bne.w	8004bee <HAL_ADCEx_InjectedConfigChannel+0x27e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800499c:	6a88      	ldr	r0, [r1, #40]	; 0x28
 800499e:	2800      	cmp	r0, #0
 80049a0:	f000 823f 	beq.w	8004e22 <HAL_ADCEx_InjectedConfigChannel+0x4b2>
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 80049a4:	1e5e      	subs	r6, r3, #1
 80049a6:	6acc      	ldr	r4, [r1, #44]	; 0x2c
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 80049a8:	f000 007c 	and.w	r0, r0, #124	; 0x7c
 80049ac:	4330      	orrs	r0, r6
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 80049ae:	ea40 0304 	orr.w	r3, r0, r4
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 80049b2:	e9d1 4500 	ldrd	r4, r5, [r1]
 80049b6:	f005 051f 	and.w	r5, r5, #31
 80049ba:	f3c4 6084 	ubfx	r0, r4, #26, #5
 80049be:	40a8      	lsls	r0, r5
    hadc->InjectionConfig.ChannelCount--;

    /* 3. tmp_JSQR_ContextQueueBeingBuilt is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 80049c0:	4318      	orrs	r0, r3
    hadc->InjectionConfig.ChannelCount--;
 80049c2:	6696      	str	r6, [r2, #104]	; 0x68

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 80049c4:	6813      	ldr	r3, [r2, #0]
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 80049c6:	6650      	str	r0, [r2, #100]	; 0x64
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80049c8:	e005      	b.n	80049d6 <HAL_ADCEx_InjectedConfigChannel+0x66>
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80049ca:	684b      	ldr	r3, [r1, #4]
 80049cc:	2b09      	cmp	r3, #9
 80049ce:	f000 80fa 	beq.w	8004bc6 <HAL_ADCEx_InjectedConfigChannel+0x256>
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 80049d2:	680c      	ldr	r4, [r1, #0]
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 80049d4:	6813      	ldr	r3, [r2, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80049d6:	6898      	ldr	r0, [r3, #8]
 80049d8:	0707      	lsls	r7, r0, #28
 80049da:	d410      	bmi.n	80049fe <HAL_ADCEx_InjectedConfigChannel+0x8e>
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 80049dc:	f891 0025 	ldrb.w	r0, [r1, #37]	; 0x25
 80049e0:	2800      	cmp	r0, #0
 80049e2:	f040 80e7 	bne.w	8004bb4 <HAL_ADCEx_InjectedConfigChannel+0x244>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 80049e6:	f891 0024 	ldrb.w	r0, [r1, #36]	; 0x24
 80049ea:	68dd      	ldr	r5, [r3, #12]
 80049ec:	f891 6026 	ldrb.w	r6, [r1, #38]	; 0x26
 80049f0:	0500      	lsls	r0, r0, #20
 80049f2:	f425 1540 	bic.w	r5, r5, #3145728	; 0x300000
 80049f6:	ea40 5046 	orr.w	r0, r0, r6, lsl #21
 80049fa:	4328      	orrs	r0, r5
 80049fc:	60d8      	str	r0, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80049fe:	6898      	ldr	r0, [r3, #8]
 8004a00:	f010 0004 	ands.w	r0, r0, #4
 8004a04:	d06a      	beq.n	8004adc <HAL_ADCEx_InjectedConfigChannel+0x16c>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004a06:	6898      	ldr	r0, [r3, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a08:	2000      	movs	r0, #0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004a0a:	689d      	ldr	r5, [r3, #8]
 8004a0c:	07ee      	lsls	r6, r5, #31
 8004a0e:	d40c      	bmi.n	8004a2a <HAL_ADCEx_InjectedConfigChannel+0xba>
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8004a10:	4da9      	ldr	r5, [pc, #676]	; (8004cb8 <HAL_ADCEx_InjectedConfigChannel+0x348>)
 8004a12:	68ce      	ldr	r6, [r1, #12]
 8004a14:	42ae      	cmp	r6, r5
 8004a16:	f000 810f 	beq.w	8004c38 <HAL_ADCEx_InjectedConfigChannel+0x2c8>
    CLEAR_BIT(ADCx->DIFSEL,
 8004a1a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8004a1e:	f3c4 0512 	ubfx	r5, r4, #0, #19
 8004a22:	ea21 0105 	bic.w	r1, r1, r5
 8004a26:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 8004a2a:	49a4      	ldr	r1, [pc, #656]	; (8004cbc <HAL_ADCEx_InjectedConfigChannel+0x34c>)
 8004a2c:	420c      	tst	r4, r1
 8004a2e:	d029      	beq.n	8004a84 <HAL_ADCEx_InjectedConfigChannel+0x114>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004a30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a34:	f000 811d 	beq.w	8004c72 <HAL_ADCEx_InjectedConfigChannel+0x302>
 8004a38:	4ea1      	ldr	r6, [pc, #644]	; (8004cc0 <HAL_ADCEx_InjectedConfigChannel+0x350>)
 8004a3a:	49a2      	ldr	r1, [pc, #648]	; (8004cc4 <HAL_ADCEx_InjectedConfigChannel+0x354>)
 8004a3c:	4da2      	ldr	r5, [pc, #648]	; (8004cc8 <HAL_ADCEx_InjectedConfigChannel+0x358>)
 8004a3e:	42b3      	cmp	r3, r6
 8004a40:	bf18      	it	ne
 8004a42:	4629      	movne	r1, r5

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8004a44:	4da1      	ldr	r5, [pc, #644]	; (8004ccc <HAL_ADCEx_InjectedConfigChannel+0x35c>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004a46:	6889      	ldr	r1, [r1, #8]
 8004a48:	42ac      	cmp	r4, r5
 8004a4a:	f001 76e0 	and.w	r6, r1, #29360128	; 0x1c00000
 8004a4e:	d01e      	beq.n	8004a8e <HAL_ADCEx_InjectedConfigChannel+0x11e>
         || (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004a50:	4d9f      	ldr	r5, [pc, #636]	; (8004cd0 <HAL_ADCEx_InjectedConfigChannel+0x360>)
 8004a52:	42ac      	cmp	r4, r5
 8004a54:	d01b      	beq.n	8004a8e <HAL_ADCEx_InjectedConfigChannel+0x11e>
        {
          wait_loop_index--;
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8004a56:	4d9f      	ldr	r5, [pc, #636]	; (8004cd4 <HAL_ADCEx_InjectedConfigChannel+0x364>)
 8004a58:	42ac      	cmp	r4, r5
 8004a5a:	f040 8113 	bne.w	8004c84 <HAL_ADCEx_InjectedConfigChannel+0x314>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004a5e:	01cd      	lsls	r5, r1, #7
 8004a60:	d410      	bmi.n	8004a84 <HAL_ADCEx_InjectedConfigChannel+0x114>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a66:	f000 8249 	beq.w	8004efc <HAL_ADCEx_InjectedConfigChannel+0x58c>
 8004a6a:	4d95      	ldr	r5, [pc, #596]	; (8004cc0 <HAL_ADCEx_InjectedConfigChannel+0x350>)
 8004a6c:	4995      	ldr	r1, [pc, #596]	; (8004cc4 <HAL_ADCEx_InjectedConfigChannel+0x354>)
 8004a6e:	4c96      	ldr	r4, [pc, #600]	; (8004cc8 <HAL_ADCEx_InjectedConfigChannel+0x358>)
 8004a70:	42ab      	cmp	r3, r5
 8004a72:	bf18      	it	ne
 8004a74:	4621      	movne	r1, r4
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004a76:	688b      	ldr	r3, [r1, #8]
 8004a78:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8004a7c:	4333      	orrs	r3, r6
 8004a7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a82:	608b      	str	r3, [r1, #8]
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a84:	2300      	movs	r3, #0
 8004a86:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8004a8a:	b003      	add	sp, #12
 8004a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004a8e:	0209      	lsls	r1, r1, #8
 8004a90:	d4f8      	bmi.n	8004a84 <HAL_ADCEx_InjectedConfigChannel+0x114>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004a92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a96:	f000 8233 	beq.w	8004f00 <HAL_ADCEx_InjectedConfigChannel+0x590>
 8004a9a:	498f      	ldr	r1, [pc, #572]	; (8004cd8 <HAL_ADCEx_InjectedConfigChannel+0x368>)
 8004a9c:	428b      	cmp	r3, r1
 8004a9e:	d1f1      	bne.n	8004a84 <HAL_ADCEx_InjectedConfigChannel+0x114>
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004aa0:	4c89      	ldr	r4, [pc, #548]	; (8004cc8 <HAL_ADCEx_InjectedConfigChannel+0x358>)
 8004aa2:	68a1      	ldr	r1, [r4, #8]
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8004aa4:	4b8d      	ldr	r3, [pc, #564]	; (8004cdc <HAL_ADCEx_InjectedConfigChannel+0x36c>)
 8004aa6:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8004aaa:	4331      	orrs	r1, r6
 8004aac:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	60a1      	str	r1, [r4, #8]
 8004ab4:	498a      	ldr	r1, [pc, #552]	; (8004ce0 <HAL_ADCEx_InjectedConfigChannel+0x370>)
 8004ab6:	099b      	lsrs	r3, r3, #6
 8004ab8:	fba1 1303 	umull	r1, r3, r1, r3
 8004abc:	099b      	lsrs	r3, r3, #6
 8004abe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	3318      	adds	r3, #24
 8004ac6:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 8004ac8:	9b01      	ldr	r3, [sp, #4]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d0da      	beq.n	8004a84 <HAL_ADCEx_InjectedConfigChannel+0x114>
          wait_loop_index--;
 8004ace:	9b01      	ldr	r3, [sp, #4]
 8004ad0:	3b01      	subs	r3, #1
 8004ad2:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 8004ad4:	9b01      	ldr	r3, [sp, #4]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d1f9      	bne.n	8004ace <HAL_ADCEx_InjectedConfigChannel+0x15e>
 8004ada:	e7d3      	b.n	8004a84 <HAL_ADCEx_InjectedConfigChannel+0x114>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004adc:	689d      	ldr	r5, [r3, #8]
 8004ade:	f015 0508 	ands.w	r5, r5, #8
 8004ae2:	d192      	bne.n	8004a0a <HAL_ADCEx_InjectedConfigChannel+0x9a>
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8004ae4:	6a88      	ldr	r0, [r1, #40]	; 0x28
 8004ae6:	2800      	cmp	r0, #0
 8004ae8:	f040 8097 	bne.w	8004c1a <HAL_ADCEx_InjectedConfigChannel+0x2aa>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8004aec:	f891 0025 	ldrb.w	r0, [r1, #37]	; 0x25
 8004af0:	2801      	cmp	r0, #1
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004af2:	68d8      	ldr	r0, [r3, #12]
 8004af4:	bf0c      	ite	eq
 8004af6:	f040 7000 	orreq.w	r0, r0, #33554432	; 0x2000000
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004afa:	f020 7000 	bicne.w	r0, r0, #33554432	; 0x2000000
 8004afe:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b00:	2000      	movs	r0, #0
    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 8004b02:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 8004b06:	2d01      	cmp	r5, #1
 8004b08:	f000 8149 	beq.w	8004d9e <HAL_ADCEx_InjectedConfigChannel+0x42e>
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8004b0c:	691d      	ldr	r5, [r3, #16]
 8004b0e:	f025 0502 	bic.w	r5, r5, #2
 8004b12:	611d      	str	r5, [r3, #16]
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004b14:	688d      	ldr	r5, [r1, #8]
 8004b16:	f1b5 4f00 	cmp.w	r5, #2147483648	; 0x80000000
 8004b1a:	f000 812e 	beq.w	8004d7a <HAL_ADCEx_InjectedConfigChannel+0x40a>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004b1e:	0de6      	lsrs	r6, r4, #23
 8004b20:	f006 0604 	and.w	r6, r6, #4
 8004b24:	f103 0c14 	add.w	ip, r3, #20
  MODIFY_REG(*preg,
 8004b28:	f3c4 5404 	ubfx	r4, r4, #20, #5
 8004b2c:	2707      	movs	r7, #7
 8004b2e:	40a5      	lsls	r5, r4
 8004b30:	40a7      	lsls	r7, r4
 8004b32:	f85c 4006 	ldr.w	r4, [ip, r6]
 8004b36:	ea24 0407 	bic.w	r4, r4, r7
 8004b3a:	432c      	orrs	r4, r5
 8004b3c:	f84c 4006 	str.w	r4, [ip, r6]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004b40:	695c      	ldr	r4, [r3, #20]
 8004b42:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8004b46:	615c      	str	r4, [r3, #20]
    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8004b48:	e9d1 6504 	ldrd	r6, r5, [r1, #16]
 8004b4c:	2e04      	cmp	r6, #4
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8004b4e:	68dc      	ldr	r4, [r3, #12]
    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8004b50:	f000 80ce 	beq.w	8004cf0 <HAL_ADCEx_InjectedConfigChannel+0x380>
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8004b54:	f3c4 04c1 	ubfx	r4, r4, #3, #2
 8004b58:	0064      	lsls	r4, r4, #1
 8004b5a:	fa05 fc04 	lsl.w	ip, r5, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004b5e:	f103 0560 	add.w	r5, r3, #96	; 0x60
  MODIFY_REG(*preg,
 8004b62:	680c      	ldr	r4, [r1, #0]
 8004b64:	f855 e026 	ldr.w	lr, [r5, r6, lsl #2]
 8004b68:	4f5e      	ldr	r7, [pc, #376]	; (8004ce4 <HAL_ADCEx_InjectedConfigChannel+0x374>)
 8004b6a:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8004b6e:	ea0e 0707 	and.w	r7, lr, r7
 8004b72:	433c      	orrs	r4, r7
 8004b74:	ea44 040c 	orr.w	r4, r4, ip
 8004b78:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8004b7c:	f845 4026 	str.w	r4, [r5, r6, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004b80:	690f      	ldr	r7, [r1, #16]
  MODIFY_REG(*preg,
 8004b82:	698e      	ldr	r6, [r1, #24]
 8004b84:	f855 4027 	ldr.w	r4, [r5, r7, lsl #2]
 8004b88:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 8004b8c:	4334      	orrs	r4, r6
 8004b8e:	f845 4027 	str.w	r4, [r5, r7, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004b92:	690f      	ldr	r7, [r1, #16]
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 8004b94:	7f0e      	ldrb	r6, [r1, #28]
  MODIFY_REG(*preg,
 8004b96:	f855 4027 	ldr.w	r4, [r5, r7, lsl #2]
 8004b9a:	f1a6 0601 	sub.w	r6, r6, #1
 8004b9e:	fab6 f686 	clz	r6, r6
 8004ba2:	0976      	lsrs	r6, r6, #5
 8004ba4:	f024 7400 	bic.w	r4, r4, #33554432	; 0x2000000
 8004ba8:	ea44 6446 	orr.w	r4, r4, r6, lsl #25
 8004bac:	f845 4027 	str.w	r4, [r5, r7, lsl #2]
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 8004bb0:	680c      	ldr	r4, [r1, #0]
}
 8004bb2:	e72a      	b.n	8004a0a <HAL_ADCEx_InjectedConfigChannel+0x9a>
      MODIFY_REG(hadc->Instance->CFGR,
 8004bb4:	68d8      	ldr	r0, [r3, #12]
 8004bb6:	f891 5026 	ldrb.w	r5, [r1, #38]	; 0x26
 8004bba:	f420 1040 	bic.w	r0, r0, #3145728	; 0x300000
 8004bbe:	ea40 5045 	orr.w	r0, r0, r5, lsl #21
 8004bc2:	60d8      	str	r0, [r3, #12]
 8004bc4:	e71b      	b.n	80049fe <HAL_ADCEx_InjectedConfigChannel+0x8e>
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004bc6:	6a8b      	ldr	r3, [r1, #40]	; 0x28
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8004bc8:	680c      	ldr	r4, [r1, #0]
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d056      	beq.n	8004c7c <HAL_ADCEx_InjectedConfigChannel+0x30c>
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8004bce:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8004bd0:	f003 037c 	and.w	r3, r3, #124	; 0x7c
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8004bd4:	0c65      	lsrs	r5, r4, #17
 8004bd6:	f405 5578 	and.w	r5, r5, #15872	; 0x3e00
 8004bda:	4303      	orrs	r3, r0
 8004bdc:	431d      	orrs	r5, r3
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 8004bde:	6813      	ldr	r3, [r2, #0]
 8004be0:	4e41      	ldr	r6, [pc, #260]	; (8004ce8 <HAL_ADCEx_InjectedConfigChannel+0x378>)
 8004be2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004be4:	4030      	ands	r0, r6
 8004be6:	4328      	orrs	r0, r5
 8004be8:	64d8      	str	r0, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 8004bea:	6655      	str	r5, [r2, #100]	; 0x64
 8004bec:	e6f3      	b.n	80049d6 <HAL_ADCEx_InjectedConfigChannel+0x66>
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8004bee:	680c      	ldr	r4, [r1, #0]
 8004bf0:	684b      	ldr	r3, [r1, #4]
 8004bf2:	f3c4 6584 	ubfx	r5, r4, #26, #5
 8004bf6:	f003 031f 	and.w	r3, r3, #31
 8004bfa:	409d      	lsls	r5, r3
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8004bfc:	6e53      	ldr	r3, [r2, #100]	; 0x64
    hadc->InjectionConfig.ChannelCount--;
 8004bfe:	3801      	subs	r0, #1
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8004c00:	431d      	orrs	r5, r3
    hadc->InjectionConfig.ChannelCount--;
 8004c02:	6690      	str	r0, [r2, #104]	; 0x68
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8004c04:	6813      	ldr	r3, [r2, #0]
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8004c06:	6655      	str	r5, [r2, #100]	; 0x64
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8004c08:	2800      	cmp	r0, #0
 8004c0a:	f47f aee4 	bne.w	80049d6 <HAL_ADCEx_InjectedConfigChannel+0x66>
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8004c0e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004c10:	4e35      	ldr	r6, [pc, #212]	; (8004ce8 <HAL_ADCEx_InjectedConfigChannel+0x378>)
 8004c12:	4030      	ands	r0, r6
 8004c14:	4328      	orrs	r0, r5
 8004c16:	64d8      	str	r0, [r3, #76]	; 0x4c
 8004c18:	e6dd      	b.n	80049d6 <HAL_ADCEx_InjectedConfigChannel+0x66>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8004c1a:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
 8004c1c:	2800      	cmp	r0, #0
 8004c1e:	f43f af65 	beq.w	8004aec <HAL_ADCEx_InjectedConfigChannel+0x17c>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8004c22:	f891 0025 	ldrb.w	r0, [r1, #37]	; 0x25
 8004c26:	2801      	cmp	r0, #1
 8004c28:	f000 8163 	beq.w	8004ef2 <HAL_ADCEx_InjectedConfigChannel+0x582>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c2c:	4628      	mov	r0, r5
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004c2e:	68dd      	ldr	r5, [r3, #12]
 8004c30:	f025 7500 	bic.w	r5, r5, #33554432	; 0x2000000
 8004c34:	60dd      	str	r5, [r3, #12]
 8004c36:	e764      	b.n	8004b02 <HAL_ADCEx_InjectedConfigChannel+0x192>
    SET_BIT(ADCx->DIFSEL,
 8004c38:	f8d3 50b0 	ldr.w	r5, [r3, #176]	; 0xb0
 8004c3c:	f3c4 0612 	ubfx	r6, r4, #0, #19
 8004c40:	4335      	orrs	r5, r6
 8004c42:	f8c3 50b0 	str.w	r5, [r3, #176]	; 0xb0
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8004c46:	2e00      	cmp	r6, #0
 8004c48:	f040 80b4 	bne.w	8004db4 <HAL_ADCEx_InjectedConfigChannel+0x444>
 8004c4c:	0ea4      	lsrs	r4, r4, #26
 8004c4e:	3401      	adds	r4, #1
 8004c50:	f004 0c1f 	and.w	ip, r4, #31
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c54:	f1bc 0f09 	cmp.w	ip, #9
 8004c58:	f200 80e6 	bhi.w	8004e28 <HAL_ADCEx_InjectedConfigChannel+0x4b8>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8004c5c:	06a5      	lsls	r5, r4, #26
 8004c5e:	2401      	movs	r4, #1
 8004c60:	fa04 f40c 	lsl.w	r4, r4, ip
 8004c64:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8004c68:	4325      	orrs	r5, r4
 8004c6a:	eb0c 044c 	add.w	r4, ip, ip, lsl #1
 8004c6e:	0524      	lsls	r4, r4, #20
 8004c70:	e0e7      	b.n	8004e42 <HAL_ADCEx_InjectedConfigChannel+0x4d2>
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004c72:	4914      	ldr	r1, [pc, #80]	; (8004cc4 <HAL_ADCEx_InjectedConfigChannel+0x354>)
 8004c74:	e6e6      	b.n	8004a44 <HAL_ADCEx_InjectedConfigChannel+0xd4>
  __HAL_LOCK(hadc);
 8004c76:	2002      	movs	r0, #2
}
 8004c78:	b003      	add	sp, #12
 8004c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8004c7c:	0c65      	lsrs	r5, r4, #17
 8004c7e:	f405 5578 	and.w	r5, r5, #15872	; 0x3e00
 8004c82:	e7ac      	b.n	8004bde <HAL_ADCEx_InjectedConfigChannel+0x26e>
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8004c84:	4d19      	ldr	r5, [pc, #100]	; (8004cec <HAL_ADCEx_InjectedConfigChannel+0x37c>)
 8004c86:	42ac      	cmp	r4, r5
 8004c88:	f47f aefc 	bne.w	8004a84 <HAL_ADCEx_InjectedConfigChannel+0x114>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004c8c:	024c      	lsls	r4, r1, #9
 8004c8e:	f53f aef9 	bmi.w	8004a84 <HAL_ADCEx_InjectedConfigChannel+0x114>
      if (ADC_VREFINT_INSTANCE(hadc))
 8004c92:	490b      	ldr	r1, [pc, #44]	; (8004cc0 <HAL_ADCEx_InjectedConfigChannel+0x350>)
 8004c94:	428b      	cmp	r3, r1
 8004c96:	f43f aef5 	beq.w	8004a84 <HAL_ADCEx_InjectedConfigChannel+0x114>
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004c9a:	4c0b      	ldr	r4, [pc, #44]	; (8004cc8 <HAL_ADCEx_InjectedConfigChannel+0x358>)
 8004c9c:	f501 7100 	add.w	r1, r1, #512	; 0x200
 8004ca0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ca4:	bf18      	it	ne
 8004ca6:	4621      	movne	r1, r4
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004ca8:	688b      	ldr	r3, [r1, #8]
 8004caa:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8004cae:	4333      	orrs	r3, r6
 8004cb0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004cb4:	608b      	str	r3, [r1, #8]
}
 8004cb6:	e6e5      	b.n	8004a84 <HAL_ADCEx_InjectedConfigChannel+0x114>
 8004cb8:	407f0000 	.word	0x407f0000
 8004cbc:	80080000 	.word	0x80080000
 8004cc0:	50000100 	.word	0x50000100
 8004cc4:	50000300 	.word	0x50000300
 8004cc8:	50000700 	.word	0x50000700
 8004ccc:	c3210000 	.word	0xc3210000
 8004cd0:	90c00010 	.word	0x90c00010
 8004cd4:	c7520000 	.word	0xc7520000
 8004cd8:	50000600 	.word	0x50000600
 8004cdc:	2000043c 	.word	0x2000043c
 8004ce0:	053e2d63 	.word	0x053e2d63
 8004ce4:	03fff000 	.word	0x03fff000
 8004ce8:	04104000 	.word	0x04104000
 8004cec:	cb840000 	.word	0xcb840000
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004cf0:	6e1c      	ldr	r4, [r3, #96]	; 0x60
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004cf2:	680c      	ldr	r4, [r1, #0]
 8004cf4:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 8004cf6:	f3c4 0612 	ubfx	r6, r4, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004cfa:	f3c5 6584 	ubfx	r5, r5, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004cfe:	2e00      	cmp	r6, #0
 8004d00:	f000 80b7 	beq.w	8004e72 <HAL_ADCEx_InjectedConfigChannel+0x502>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d04:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 8004d08:	b126      	cbz	r6, 8004d14 <HAL_ADCEx_InjectedConfigChannel+0x3a4>
  return __builtin_clz(value);
 8004d0a:	fab6 f686 	clz	r6, r6
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004d0e:	42b5      	cmp	r5, r6
 8004d10:	f000 80f8 	beq.w	8004f04 <HAL_ADCEx_InjectedConfigChannel+0x594>
 8004d14:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 8004d16:	6e5f      	ldr	r7, [r3, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004d18:	f103 0560 	add.w	r5, r3, #96	; 0x60
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004d1c:	f3c7 6784 	ubfx	r7, r7, #26, #5
 8004d20:	f103 0c64 	add.w	ip, r3, #100	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d24:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 8004d28:	b126      	cbz	r6, 8004d34 <HAL_ADCEx_InjectedConfigChannel+0x3c4>
  return __builtin_clz(value);
 8004d2a:	fab6 f686 	clz	r6, r6
 8004d2e:	42b7      	cmp	r7, r6
 8004d30:	f000 80fd 	beq.w	8004f2e <HAL_ADCEx_InjectedConfigChannel+0x5be>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004d34:	68ae      	ldr	r6, [r5, #8]
 8004d36:	68af      	ldr	r7, [r5, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004d38:	f105 0c08 	add.w	ip, r5, #8
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004d3c:	f3c7 6784 	ubfx	r7, r7, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d40:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 8004d44:	b126      	cbz	r6, 8004d50 <HAL_ADCEx_InjectedConfigChannel+0x3e0>
  return __builtin_clz(value);
 8004d46:	fab6 f686 	clz	r6, r6
 8004d4a:	42b7      	cmp	r7, r6
 8004d4c:	f000 8104 	beq.w	8004f58 <HAL_ADCEx_InjectedConfigChannel+0x5e8>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004d50:	68ee      	ldr	r6, [r5, #12]
 8004d52:	68ef      	ldr	r7, [r5, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004d54:	350c      	adds	r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004d56:	f3c7 6784 	ubfx	r7, r7, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d5a:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 8004d5e:	2e00      	cmp	r6, #0
 8004d60:	f43f ae53 	beq.w	8004a0a <HAL_ADCEx_InjectedConfigChannel+0x9a>
  return __builtin_clz(value);
 8004d64:	fab6 f686 	clz	r6, r6
 8004d68:	42be      	cmp	r6, r7
 8004d6a:	f47f ae4e 	bne.w	8004a0a <HAL_ADCEx_InjectedConfigChannel+0x9a>
  MODIFY_REG(*preg,
 8004d6e:	682c      	ldr	r4, [r5, #0]
 8004d70:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8004d74:	602c      	str	r4, [r5, #0]
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 8004d76:	680c      	ldr	r4, [r1, #0]
}
 8004d78:	e647      	b.n	8004a0a <HAL_ADCEx_InjectedConfigChannel+0x9a>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004d7a:	0de5      	lsrs	r5, r4, #23
  MODIFY_REG(*preg,
 8004d7c:	f3c4 5604 	ubfx	r6, r4, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004d80:	f005 0504 	and.w	r5, r5, #4
 8004d84:	f103 0414 	add.w	r4, r3, #20
  MODIFY_REG(*preg,
 8004d88:	2707      	movs	r7, #7
 8004d8a:	40b7      	lsls	r7, r6
 8004d8c:	5966      	ldr	r6, [r4, r5]
 8004d8e:	ea26 0607 	bic.w	r6, r6, r7
 8004d92:	5166      	str	r6, [r4, r5]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004d94:	695c      	ldr	r4, [r3, #20]
 8004d96:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8004d9a:	615c      	str	r4, [r3, #20]
}
 8004d9c:	e6d4      	b.n	8004b48 <HAL_ADCEx_InjectedConfigChannel+0x1d8>
      MODIFY_REG(hadc->Instance->CFGR2,
 8004d9e:	e9d1 570d 	ldrd	r5, r7, [r1, #52]	; 0x34
 8004da2:	691e      	ldr	r6, [r3, #16]
 8004da4:	433d      	orrs	r5, r7
 8004da6:	f426 76ff 	bic.w	r6, r6, #510	; 0x1fe
 8004daa:	4335      	orrs	r5, r6
 8004dac:	f045 0502 	orr.w	r5, r5, #2
 8004db0:	611d      	str	r5, [r3, #16]
 8004db2:	e6af      	b.n	8004b14 <HAL_ADCEx_InjectedConfigChannel+0x1a4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004db4:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 8004db8:	2d00      	cmp	r5, #0
 8004dba:	d076      	beq.n	8004eaa <HAL_ADCEx_InjectedConfigChannel+0x53a>
  return __builtin_clz(value);
 8004dbc:	fab5 f585 	clz	r5, r5
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004dc0:	3501      	adds	r5, #1
 8004dc2:	f005 051f 	and.w	r5, r5, #31
 8004dc6:	2d09      	cmp	r5, #9
 8004dc8:	d96f      	bls.n	8004eaa <HAL_ADCEx_InjectedConfigChannel+0x53a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dca:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 8004dce:	2d00      	cmp	r5, #0
 8004dd0:	f000 80e2 	beq.w	8004f98 <HAL_ADCEx_InjectedConfigChannel+0x628>
  return __builtin_clz(value);
 8004dd4:	fab5 f585 	clz	r5, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8004dd8:	3501      	adds	r5, #1
 8004dda:	06ad      	lsls	r5, r5, #26
 8004ddc:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004de0:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 8004de4:	2e00      	cmp	r6, #0
 8004de6:	f000 80d5 	beq.w	8004f94 <HAL_ADCEx_InjectedConfigChannel+0x624>
  return __builtin_clz(value);
 8004dea:	fab6 f686 	clz	r6, r6
 8004dee:	3601      	adds	r6, #1
 8004df0:	f006 061f 	and.w	r6, r6, #31
 8004df4:	2701      	movs	r7, #1
 8004df6:	fa07 f606 	lsl.w	r6, r7, r6
 8004dfa:	4335      	orrs	r5, r6
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dfc:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 8004e00:	2c00      	cmp	r4, #0
 8004e02:	f000 80c5 	beq.w	8004f90 <HAL_ADCEx_InjectedConfigChannel+0x620>
  return __builtin_clz(value);
 8004e06:	fab4 f484 	clz	r4, r4
 8004e0a:	1c66      	adds	r6, r4, #1
 8004e0c:	f006 061f 	and.w	r6, r6, #31
 8004e10:	2403      	movs	r4, #3
 8004e12:	f06f 071d 	mvn.w	r7, #29
 8004e16:	fb14 7406 	smlabb	r4, r4, r6, r7
 8004e1a:	0524      	lsls	r4, r4, #20
 8004e1c:	f044 7400 	orr.w	r4, r4, #33554432	; 0x2000000
 8004e20:	e00f      	b.n	8004e42 <HAL_ADCEx_InjectedConfigChannel+0x4d2>
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 8004e22:	3b01      	subs	r3, #1
 8004e24:	461e      	mov	r6, r3
 8004e26:	e5c4      	b.n	80049b2 <HAL_ADCEx_InjectedConfigChannel+0x42>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8004e28:	06a5      	lsls	r5, r4, #26
 8004e2a:	eb0c 044c 	add.w	r4, ip, ip, lsl #1
 8004e2e:	3c1e      	subs	r4, #30
 8004e30:	2601      	movs	r6, #1
 8004e32:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8004e36:	0524      	lsls	r4, r4, #20
 8004e38:	fa06 f60c 	lsl.w	r6, r6, ip
 8004e3c:	f044 7400 	orr.w	r4, r4, #33554432	; 0x2000000
 8004e40:	4335      	orrs	r5, r6
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e42:	432c      	orrs	r4, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004e44:	ea4f 5cd4 	mov.w	ip, r4, lsr #23
  MODIFY_REG(*preg,
 8004e48:	688d      	ldr	r5, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004e4a:	f00c 0c04 	and.w	ip, ip, #4
 8004e4e:	f103 0e14 	add.w	lr, r3, #20
  MODIFY_REG(*preg,
 8004e52:	f3c4 5404 	ubfx	r4, r4, #20, #5
 8004e56:	fa05 f604 	lsl.w	r6, r5, r4
 8004e5a:	2707      	movs	r7, #7
 8004e5c:	f85e 500c 	ldr.w	r5, [lr, ip]
 8004e60:	fa07 f404 	lsl.w	r4, r7, r4
 8004e64:	ea25 0404 	bic.w	r4, r5, r4
 8004e68:	4334      	orrs	r4, r6
 8004e6a:	f84e 400c 	str.w	r4, [lr, ip]
  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 8004e6e:	680c      	ldr	r4, [r1, #0]
}
 8004e70:	e5db      	b.n	8004a2a <HAL_ADCEx_InjectedConfigChannel+0xba>
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004e72:	f3c4 6684 	ubfx	r6, r4, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004e76:	42b5      	cmp	r5, r6
 8004e78:	d044      	beq.n	8004f04 <HAL_ADCEx_InjectedConfigChannel+0x594>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004e7a:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 8004e7c:	6e5f      	ldr	r7, [r3, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004e7e:	f103 0560 	add.w	r5, r3, #96	; 0x60
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004e82:	f3c7 6784 	ubfx	r7, r7, #26, #5
 8004e86:	f103 0c64 	add.w	ip, r3, #100	; 0x64
 8004e8a:	42b7      	cmp	r7, r6
 8004e8c:	d04f      	beq.n	8004f2e <HAL_ADCEx_InjectedConfigChannel+0x5be>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004e8e:	68af      	ldr	r7, [r5, #8]
 8004e90:	68af      	ldr	r7, [r5, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004e92:	f105 0c08 	add.w	ip, r5, #8
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004e96:	f3c7 6784 	ubfx	r7, r7, #26, #5
 8004e9a:	42b7      	cmp	r7, r6
 8004e9c:	d05c      	beq.n	8004f58 <HAL_ADCEx_InjectedConfigChannel+0x5e8>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004e9e:	68ef      	ldr	r7, [r5, #12]
 8004ea0:	68ef      	ldr	r7, [r5, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004ea2:	350c      	adds	r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004ea4:	f3c7 6784 	ubfx	r7, r7, #26, #5
 8004ea8:	e75e      	b.n	8004d68 <HAL_ADCEx_InjectedConfigChannel+0x3f8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eaa:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 8004eae:	2d00      	cmp	r5, #0
 8004eb0:	d068      	beq.n	8004f84 <HAL_ADCEx_InjectedConfigChannel+0x614>
  return __builtin_clz(value);
 8004eb2:	fab5 f585 	clz	r5, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8004eb6:	3501      	adds	r5, #1
 8004eb8:	06ad      	lsls	r5, r5, #26
 8004eba:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ebe:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 8004ec2:	2e00      	cmp	r6, #0
 8004ec4:	d05c      	beq.n	8004f80 <HAL_ADCEx_InjectedConfigChannel+0x610>
  return __builtin_clz(value);
 8004ec6:	fab6 f686 	clz	r6, r6
 8004eca:	3601      	adds	r6, #1
 8004ecc:	f006 061f 	and.w	r6, r6, #31
 8004ed0:	2701      	movs	r7, #1
 8004ed2:	fa07 f606 	lsl.w	r6, r7, r6
 8004ed6:	4335      	orrs	r5, r6
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ed8:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 8004edc:	2c00      	cmp	r4, #0
 8004ede:	d054      	beq.n	8004f8a <HAL_ADCEx_InjectedConfigChannel+0x61a>
  return __builtin_clz(value);
 8004ee0:	fab4 f484 	clz	r4, r4
 8004ee4:	3401      	adds	r4, #1
 8004ee6:	f004 041f 	and.w	r4, r4, #31
 8004eea:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8004eee:	0524      	lsls	r4, r4, #20
 8004ef0:	e7a7      	b.n	8004e42 <HAL_ADCEx_InjectedConfigChannel+0x4d2>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ef2:	6dd5      	ldr	r5, [r2, #92]	; 0x5c
 8004ef4:	f045 0520 	orr.w	r5, r5, #32
 8004ef8:	65d5      	str	r5, [r2, #92]	; 0x5c
        tmp_hal_status = HAL_ERROR;
 8004efa:	e602      	b.n	8004b02 <HAL_ADCEx_InjectedConfigChannel+0x192>
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004efc:	4928      	ldr	r1, [pc, #160]	; (8004fa0 <HAL_ADCEx_InjectedConfigChannel+0x630>)
 8004efe:	e5ba      	b.n	8004a76 <HAL_ADCEx_InjectedConfigChannel+0x106>
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004f00:	4c27      	ldr	r4, [pc, #156]	; (8004fa0 <HAL_ADCEx_InjectedConfigChannel+0x630>)
 8004f02:	e5ce      	b.n	8004aa2 <HAL_ADCEx_InjectedConfigChannel+0x132>
  MODIFY_REG(*preg,
 8004f04:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8004f06:	461d      	mov	r5, r3
 8004f08:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8004f0c:	f845 4f60 	str.w	r4, [r5, #96]!
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004f10:	6e5c      	ldr	r4, [r3, #100]	; 0x64
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004f12:	680c      	ldr	r4, [r1, #0]
 8004f14:	6e5f      	ldr	r7, [r3, #100]	; 0x64
 8004f16:	f3c4 0612 	ubfx	r6, r4, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004f1a:	f3c7 6784 	ubfx	r7, r7, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004f1e:	f103 0c64 	add.w	ip, r3, #100	; 0x64
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004f22:	2e00      	cmp	r6, #0
 8004f24:	f47f aefe 	bne.w	8004d24 <HAL_ADCEx_InjectedConfigChannel+0x3b4>
 8004f28:	f3c4 6684 	ubfx	r6, r4, #26, #5
 8004f2c:	e7ad      	b.n	8004e8a <HAL_ADCEx_InjectedConfigChannel+0x51a>
  MODIFY_REG(*preg,
 8004f2e:	f8dc 4000 	ldr.w	r4, [ip]
 8004f32:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8004f36:	f8cc 4000 	str.w	r4, [ip]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004f3a:	68ac      	ldr	r4, [r5, #8]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004f3c:	680c      	ldr	r4, [r1, #0]
 8004f3e:	68af      	ldr	r7, [r5, #8]
 8004f40:	f3c4 0612 	ubfx	r6, r4, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004f44:	f3c7 6784 	ubfx	r7, r7, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004f48:	f105 0c08 	add.w	ip, r5, #8
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004f4c:	2e00      	cmp	r6, #0
 8004f4e:	f47f aef7 	bne.w	8004d40 <HAL_ADCEx_InjectedConfigChannel+0x3d0>
 8004f52:	f3c4 6684 	ubfx	r6, r4, #26, #5
 8004f56:	e7a0      	b.n	8004e9a <HAL_ADCEx_InjectedConfigChannel+0x52a>
  MODIFY_REG(*preg,
 8004f58:	f8dc 4000 	ldr.w	r4, [ip]
 8004f5c:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8004f60:	f8cc 4000 	str.w	r4, [ip]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004f64:	68ec      	ldr	r4, [r5, #12]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004f66:	680c      	ldr	r4, [r1, #0]
 8004f68:	68ef      	ldr	r7, [r5, #12]
 8004f6a:	f3c4 0612 	ubfx	r6, r4, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004f6e:	350c      	adds	r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004f70:	f3c7 6784 	ubfx	r7, r7, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004f74:	2e00      	cmp	r6, #0
 8004f76:	f47f aef0 	bne.w	8004d5a <HAL_ADCEx_InjectedConfigChannel+0x3ea>
 8004f7a:	f3c4 6684 	ubfx	r6, r4, #26, #5
 8004f7e:	e6f3      	b.n	8004d68 <HAL_ADCEx_InjectedConfigChannel+0x3f8>
 8004f80:	2602      	movs	r6, #2
 8004f82:	e7a8      	b.n	8004ed6 <HAL_ADCEx_InjectedConfigChannel+0x566>
 8004f84:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 8004f88:	e799      	b.n	8004ebe <HAL_ADCEx_InjectedConfigChannel+0x54e>
 8004f8a:	f44f 1440 	mov.w	r4, #3145728	; 0x300000
 8004f8e:	e758      	b.n	8004e42 <HAL_ADCEx_InjectedConfigChannel+0x4d2>
 8004f90:	4c04      	ldr	r4, [pc, #16]	; (8004fa4 <HAL_ADCEx_InjectedConfigChannel+0x634>)
 8004f92:	e756      	b.n	8004e42 <HAL_ADCEx_InjectedConfigChannel+0x4d2>
 8004f94:	2602      	movs	r6, #2
 8004f96:	e730      	b.n	8004dfa <HAL_ADCEx_InjectedConfigChannel+0x48a>
 8004f98:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 8004f9c:	e720      	b.n	8004de0 <HAL_ADCEx_InjectedConfigChannel+0x470>
 8004f9e:	bf00      	nop
 8004fa0:	50000300 	.word	0x50000300
 8004fa4:	fe500000 	.word	0xfe500000

08004fa8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004fa8:	b470      	push	{r4, r5, r6}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004faa:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004fae:	680e      	ldr	r6, [r1, #0]
  __HAL_LOCK(hadc);
 8004fb0:	2a01      	cmp	r2, #1
{
 8004fb2:	b09d      	sub	sp, #116	; 0x74
  __HAL_LOCK(hadc);
 8004fb4:	d056      	beq.n	8005064 <HAL_ADCEx_MultiModeConfigChannel+0xbc>

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004fb6:	6802      	ldr	r2, [r0, #0]
 8004fb8:	4603      	mov	r3, r0
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8004fba:	2400      	movs	r4, #0
  __HAL_LOCK(hadc);
 8004fbc:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004fbe:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8004fc2:	9418      	str	r4, [sp, #96]	; 0x60
  __HAL_LOCK(hadc);
 8004fc4:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8004fc8:	9419      	str	r4, [sp, #100]	; 0x64
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004fca:	d00b      	beq.n	8004fe4 <HAL_ADCEx_MultiModeConfigChannel+0x3c>
 8004fcc:	4d48      	ldr	r5, [pc, #288]	; (80050f0 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8004fce:	42aa      	cmp	r2, r5
 8004fd0:	d046      	beq.n	8005060 <HAL_ADCEx_MultiModeConfigChannel+0xb8>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004fd2:	6dda      	ldr	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004fd4:	f883 4058 	strb.w	r4, [r3, #88]	; 0x58
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004fd8:	f042 0220 	orr.w	r2, r2, #32
 8004fdc:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8004fde:	b01d      	add	sp, #116	; 0x74
 8004fe0:	bc70      	pop	{r4, r5, r6}
 8004fe2:	4770      	bx	lr
 8004fe4:	4843      	ldr	r0, [pc, #268]	; (80050f4 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004fe6:	6880      	ldr	r0, [r0, #8]
 8004fe8:	0740      	lsls	r0, r0, #29
 8004fea:	d50b      	bpl.n	8005004 <HAL_ADCEx_MultiModeConfigChannel+0x5c>
 8004fec:	6892      	ldr	r2, [r2, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004fee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004ff0:	f042 0220 	orr.w	r2, r2, #32
    tmp_hal_status = HAL_ERROR;
 8004ff4:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ff6:	65da      	str	r2, [r3, #92]	; 0x5c
  __HAL_UNLOCK(hadc);
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 8004ffe:	b01d      	add	sp, #116	; 0x74
 8005000:	bc70      	pop	{r4, r5, r6}
 8005002:	4770      	bx	lr
 8005004:	6890      	ldr	r0, [r2, #8]
 8005006:	0744      	lsls	r4, r0, #29
 8005008:	d4f1      	bmi.n	8004fee <HAL_ADCEx_MultiModeConfigChannel+0x46>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800500a:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 800500e:	d02d      	beq.n	800506c <HAL_ADCEx_MultiModeConfigChannel+0xc4>
 8005010:	4838      	ldr	r0, [pc, #224]	; (80050f4 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8005012:	4282      	cmp	r2, r0
 8005014:	d02a      	beq.n	800506c <HAL_ADCEx_MultiModeConfigChannel+0xc4>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005016:	2e00      	cmp	r6, #0
 8005018:	d058      	beq.n	80050cc <HAL_ADCEx_MultiModeConfigChannel+0x124>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800501a:	4837      	ldr	r0, [pc, #220]	; (80050f8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800501c:	684c      	ldr	r4, [r1, #4]
 800501e:	6882      	ldr	r2, [r0, #8]
 8005020:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005024:	4322      	orrs	r2, r4
 8005026:	f893 4038 	ldrb.w	r4, [r3, #56]	; 0x38
 800502a:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 800502e:	6082      	str	r2, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005030:	4a2f      	ldr	r2, [pc, #188]	; (80050f0 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8005032:	6894      	ldr	r4, [r2, #8]
 8005034:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8005038:	6892      	ldr	r2, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800503a:	4322      	orrs	r2, r4
 800503c:	4c2f      	ldr	r4, [pc, #188]	; (80050fc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800503e:	68a4      	ldr	r4, [r4, #8]
 8005040:	4322      	orrs	r2, r4
 8005042:	43d2      	mvns	r2, r2
 8005044:	f002 0201 	and.w	r2, r2, #1
 8005048:	b142      	cbz	r2, 800505c <HAL_ADCEx_MultiModeConfigChannel+0xb4>
        MODIFY_REG(tmpADC_Common->CCR,
 800504a:	6884      	ldr	r4, [r0, #8]
 800504c:	688a      	ldr	r2, [r1, #8]
 800504e:	f424 6171 	bic.w	r1, r4, #3856	; 0xf10
 8005052:	4332      	orrs	r2, r6
 8005054:	f021 010f 	bic.w	r1, r1, #15
 8005058:	430a      	orrs	r2, r1
 800505a:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800505c:	2000      	movs	r0, #0
 800505e:	e7cb      	b.n	8004ff8 <HAL_ADCEx_MultiModeConfigChannel+0x50>
 8005060:	4827      	ldr	r0, [pc, #156]	; (8005100 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8005062:	e7c0      	b.n	8004fe6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
  __HAL_LOCK(hadc);
 8005064:	2002      	movs	r0, #2
}
 8005066:	b01d      	add	sp, #116	; 0x74
 8005068:	bc70      	pop	{r4, r5, r6}
 800506a:	4770      	bx	lr
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800506c:	b1ae      	cbz	r6, 800509a <HAL_ADCEx_MultiModeConfigChannel+0xf2>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800506e:	4825      	ldr	r0, [pc, #148]	; (8005104 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8005070:	684c      	ldr	r4, [r1, #4]
 8005072:	6882      	ldr	r2, [r0, #8]
 8005074:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005078:	4322      	orrs	r2, r4
 800507a:	f893 4038 	ldrb.w	r4, [r3, #56]	; 0x38
 800507e:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 8005082:	6082      	str	r2, [r0, #8]
 8005084:	4a1b      	ldr	r2, [pc, #108]	; (80050f4 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8005086:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800508a:	6880      	ldr	r0, [r0, #8]
 800508c:	6892      	ldr	r2, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800508e:	4302      	orrs	r2, r0
 8005090:	43d2      	mvns	r2, r2
 8005092:	481c      	ldr	r0, [pc, #112]	; (8005104 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8005094:	f002 0201 	and.w	r2, r2, #1
 8005098:	e7d6      	b.n	8005048 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800509a:	491a      	ldr	r1, [pc, #104]	; (8005104 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800509c:	688a      	ldr	r2, [r1, #8]
 800509e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80050a2:	608a      	str	r2, [r1, #8]
 80050a4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80050a8:	4a12      	ldr	r2, [pc, #72]	; (80050f4 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80050aa:	6880      	ldr	r0, [r0, #8]
 80050ac:	6892      	ldr	r2, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80050ae:	4915      	ldr	r1, [pc, #84]	; (8005104 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80050b0:	4302      	orrs	r2, r0
 80050b2:	43d2      	mvns	r2, r2
 80050b4:	f002 0201 	and.w	r2, r2, #1
 80050b8:	2a00      	cmp	r2, #0
 80050ba:	d0cf      	beq.n	800505c <HAL_ADCEx_MultiModeConfigChannel+0xb4>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80050bc:	688a      	ldr	r2, [r1, #8]
 80050be:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 80050c2:	f022 020f 	bic.w	r2, r2, #15
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80050c6:	2000      	movs	r0, #0
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80050c8:	608a      	str	r2, [r1, #8]
 80050ca:	e795      	b.n	8004ff8 <HAL_ADCEx_MultiModeConfigChannel+0x50>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80050cc:	490a      	ldr	r1, [pc, #40]	; (80050f8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80050ce:	4808      	ldr	r0, [pc, #32]	; (80050f0 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80050d0:	688a      	ldr	r2, [r1, #8]
 80050d2:	4c0b      	ldr	r4, [pc, #44]	; (8005100 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80050d4:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80050d8:	608a      	str	r2, [r1, #8]
 80050da:	6880      	ldr	r0, [r0, #8]
 80050dc:	68a2      	ldr	r2, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80050de:	4302      	orrs	r2, r0
 80050e0:	4806      	ldr	r0, [pc, #24]	; (80050fc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80050e2:	6880      	ldr	r0, [r0, #8]
 80050e4:	4302      	orrs	r2, r0
 80050e6:	43d2      	mvns	r2, r2
 80050e8:	f002 0201 	and.w	r2, r2, #1
 80050ec:	e7e4      	b.n	80050b8 <HAL_ADCEx_MultiModeConfigChannel+0x110>
 80050ee:	bf00      	nop
 80050f0:	50000400 	.word	0x50000400
 80050f4:	50000100 	.word	0x50000100
 80050f8:	50000700 	.word	0x50000700
 80050fc:	50000600 	.word	0x50000600
 8005100:	50000500 	.word	0x50000500
 8005104:	50000300 	.word	0x50000300

08005108 <HAL_CORDIC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8005108:	b1b0      	cbz	r0, 8005138 <HAL_CORDIC_Init+0x30>
{
 800510a:	b510      	push	{r4, lr}

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 800510c:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8005110:	4604      	mov	r4, r0
 8005112:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005116:	b153      	cbz	r3, 800512e <HAL_CORDIC_Init+0x26>
    HAL_CORDIC_MspInit(hcordic);
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8005118:	2000      	movs	r0, #0

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 800511a:	2301      	movs	r3, #1
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 800511c:	6260      	str	r0, [r4, #36]	; 0x24
  hcordic->State = HAL_CORDIC_STATE_READY;
 800511e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  hcordic->pOutBuff = NULL;
 8005122:	e9c4 0001 	strd	r0, r0, [r4, #4]
  hcordic->NbCalcToGet = 0U;
 8005126:	e9c4 0003 	strd	r0, r0, [r4, #12]
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 800512a:	6160      	str	r0, [r4, #20]

  /* Return function status */
  return HAL_OK;
}
 800512c:	bd10      	pop	{r4, pc}
    hcordic->Lock = HAL_UNLOCKED;
 800512e:	f880 2020 	strb.w	r2, [r0, #32]
    HAL_CORDIC_MspInit(hcordic);
 8005132:	f7fe fd25 	bl	8003b80 <HAL_CORDIC_MspInit>
 8005136:	e7ef      	b.n	8005118 <HAL_CORDIC_Init+0x10>
    return HAL_ERROR;
 8005138:	2001      	movs	r0, #1
}
 800513a:	4770      	bx	lr

0800513c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800513c:	4907      	ldr	r1, [pc, #28]	; (800515c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800513e:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005140:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005142:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005146:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800514a:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800514c:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800514e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005152:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8005156:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8005158:	4770      	bx	lr
 800515a:	bf00      	nop
 800515c:	e000ed00 	.word	0xe000ed00

08005160 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005160:	4b1c      	ldr	r3, [pc, #112]	; (80051d4 <HAL_NVIC_SetPriority+0x74>)
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005168:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800516a:	f1c3 0e07 	rsb	lr, r3, #7
 800516e:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005172:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005176:	bf28      	it	cs
 8005178:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800517c:	f1bc 0f06 	cmp.w	ip, #6
 8005180:	d91b      	bls.n	80051ba <HAL_NVIC_SetPriority+0x5a>
 8005182:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005184:	f04f 3cff 	mov.w	ip, #4294967295
 8005188:	fa0c fc03 	lsl.w	ip, ip, r3
 800518c:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005190:	f04f 3cff 	mov.w	ip, #4294967295
 8005194:	fa0c fc0e 	lsl.w	ip, ip, lr
 8005198:	ea21 010c 	bic.w	r1, r1, ip
 800519c:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800519e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051a0:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80051a4:	db0c      	blt.n	80051c0 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051a6:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80051aa:	0109      	lsls	r1, r1, #4
 80051ac:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80051b0:	b2c9      	uxtb	r1, r1
 80051b2:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80051b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80051ba:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80051bc:	4613      	mov	r3, r2
 80051be:	e7e7      	b.n	8005190 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051c0:	4b05      	ldr	r3, [pc, #20]	; (80051d8 <HAL_NVIC_SetPriority+0x78>)
 80051c2:	f000 000f 	and.w	r0, r0, #15
 80051c6:	0109      	lsls	r1, r1, #4
 80051c8:	4403      	add	r3, r0
 80051ca:	b2c9      	uxtb	r1, r1
 80051cc:	7619      	strb	r1, [r3, #24]
 80051ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80051d2:	bf00      	nop
 80051d4:	e000ed00 	.word	0xe000ed00
 80051d8:	e000ecfc 	.word	0xe000ecfc

080051dc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80051dc:	2800      	cmp	r0, #0
 80051de:	db07      	blt.n	80051f0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80051e0:	4a04      	ldr	r2, [pc, #16]	; (80051f4 <HAL_NVIC_EnableIRQ+0x18>)
 80051e2:	0941      	lsrs	r1, r0, #5
 80051e4:	2301      	movs	r3, #1
 80051e6:	f000 001f 	and.w	r0, r0, #31
 80051ea:	4083      	lsls	r3, r0
 80051ec:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80051f0:	4770      	bx	lr
 80051f2:	bf00      	nop
 80051f4:	e000e100 	.word	0xe000e100

080051f8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80051f8:	3801      	subs	r0, #1
 80051fa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80051fe:	d210      	bcs.n	8005222 <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005200:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005202:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005206:	4c08      	ldr	r4, [pc, #32]	; (8005228 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005208:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800520a:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 800520e:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005212:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005214:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005216:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005218:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 800521a:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800521e:	6119      	str	r1, [r3, #16]
 8005220:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8005222:	2001      	movs	r0, #1
 8005224:	4770      	bx	lr
 8005226:	bf00      	nop
 8005228:	e000ed00 	.word	0xe000ed00

0800522c <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800522c:	4770      	bx	lr
 800522e:	bf00      	nop

08005230 <HAL_SYSTICK_IRQHandler>:
{
 8005230:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8005232:	f7ff fffb 	bl	800522c <HAL_SYSTICK_Callback>
}
 8005236:	bd08      	pop	{r3, pc}

08005238 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005238:	2800      	cmp	r0, #0
 800523a:	d078      	beq.n	800532e <HAL_DMA_Init+0xf6>
{
 800523c:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800523e:	4b3d      	ldr	r3, [pc, #244]	; (8005334 <HAL_DMA_Init+0xfc>)
 8005240:	6804      	ldr	r4, [r0, #0]
 8005242:	429c      	cmp	r4, r3
 8005244:	d95f      	bls.n	8005306 <HAL_DMA_Init+0xce>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005246:	4a3c      	ldr	r2, [pc, #240]	; (8005338 <HAL_DMA_Init+0x100>)
 8005248:	4b3c      	ldr	r3, [pc, #240]	; (800533c <HAL_DMA_Init+0x104>)
    hdma->DmaBaseAddress = DMA2;
 800524a:	493d      	ldr	r1, [pc, #244]	; (8005340 <HAL_DMA_Init+0x108>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800524c:	4422      	add	r2, r4
 800524e:	fba3 3202 	umull	r3, r2, r3, r2
 8005252:	0912      	lsrs	r2, r2, #4
 8005254:	0092      	lsls	r2, r2, #2
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005256:	2302      	movs	r3, #2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005258:	6885      	ldr	r5, [r0, #8]
  hdma->State = HAL_DMA_STATE_BUSY;
 800525a:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  tmp |=  hdma->Init.Direction        |
 800525e:	68c3      	ldr	r3, [r0, #12]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005260:	4e36      	ldr	r6, [pc, #216]	; (800533c <HAL_DMA_Init+0x104>)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005262:	4f34      	ldr	r7, [pc, #208]	; (8005334 <HAL_DMA_Init+0xfc>)
 8005264:	e9c0 1210 	strd	r1, r2, [r0, #64]	; 0x40
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005268:	6901      	ldr	r1, [r0, #16]
  tmp |=  hdma->Init.Direction        |
 800526a:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800526c:	430b      	orrs	r3, r1
 800526e:	6941      	ldr	r1, [r0, #20]
 8005270:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005272:	6981      	ldr	r1, [r0, #24]
 8005274:	430b      	orrs	r3, r1
  tmp = hdma->Instance->CCR;
 8005276:	6821      	ldr	r1, [r4, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005278:	f421 4cff 	bic.w	ip, r1, #32640	; 0x7f80
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800527c:	69c1      	ldr	r1, [r0, #28]
 800527e:	430b      	orrs	r3, r1
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005280:	b2e1      	uxtb	r1, r4
 8005282:	3908      	subs	r1, #8
 8005284:	fba6 6101 	umull	r6, r1, r6, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8005288:	6a06      	ldr	r6, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800528a:	f02c 0c70 	bic.w	ip, ip, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 800528e:	4333      	orrs	r3, r6
  tmp |=  hdma->Init.Direction        |
 8005290:	ea43 030c 	orr.w	r3, r3, ip
  hdma->Instance->CCR = tmp;
 8005294:	6023      	str	r3, [r4, #0]
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005296:	4e2b      	ldr	r6, [pc, #172]	; (8005344 <HAL_DMA_Init+0x10c>)
 8005298:	4b2b      	ldr	r3, [pc, #172]	; (8005348 <HAL_DMA_Init+0x110>)
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800529a:	f3c1 1104 	ubfx	r1, r1, #4, #5
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800529e:	42bc      	cmp	r4, r7
 80052a0:	bf98      	it	ls
 80052a2:	4633      	movls	r3, r6
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80052a4:	f04f 0c01 	mov.w	ip, #1
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80052a8:	4c28      	ldr	r4, [pc, #160]	; (800534c <HAL_DMA_Init+0x114>)
 80052aa:	64c4      	str	r4, [r0, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80052ac:	fa0c f101 	lsl.w	r1, ip, r1
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80052b0:	18d4      	adds	r4, r2, r3
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80052b2:	f5b5 4f80 	cmp.w	r5, #16384	; 0x4000
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80052b6:	6501      	str	r1, [r0, #80]	; 0x50
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80052b8:	6484      	str	r4, [r0, #72]	; 0x48
 80052ba:	ea4f 0292 	mov.w	r2, r2, lsr #2
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80052be:	d02b      	beq.n	8005318 <HAL_DMA_Init+0xe0>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80052c0:	6845      	ldr	r5, [r0, #4]
 80052c2:	b2ec      	uxtb	r4, r5
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80052c4:	3d01      	subs	r5, #1
 80052c6:	2d03      	cmp	r5, #3
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80052c8:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80052cc:	f8c6 1084 	str.w	r1, [r6, #132]	; 0x84
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80052d0:	d828      	bhi.n	8005324 <HAL_DMA_Init+0xec>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80052d2:	4b1f      	ldr	r3, [pc, #124]	; (8005350 <HAL_DMA_Init+0x118>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80052d4:	4d1f      	ldr	r5, [pc, #124]	; (8005354 <HAL_DMA_Init+0x11c>)
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80052d6:	4a20      	ldr	r2, [pc, #128]	; (8005358 <HAL_DMA_Init+0x120>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80052d8:	4423      	add	r3, r4

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80052da:	3c01      	subs	r4, #1
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80052dc:	009b      	lsls	r3, r3, #2
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80052de:	f004 041f 	and.w	r4, r4, #31
 80052e2:	fa0c f404 	lsl.w	r4, ip, r4
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80052e6:	2100      	movs	r1, #0
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80052e8:	e9c0 3515 	strd	r3, r5, [r0, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80052ec:	65c4      	str	r4, [r0, #92]	; 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80052ee:	6019      	str	r1, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80052f0:	6454      	str	r4, [r2, #68]	; 0x44
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052f2:	2300      	movs	r3, #0
  hdma->State  = HAL_DMA_STATE_READY;
 80052f4:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052f6:	63c3      	str	r3, [r0, #60]	; 0x3c
  hdma->Lock = HAL_UNLOCKED;
 80052f8:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 80052fc:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
}
 8005300:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8005302:	4618      	mov	r0, r3
}
 8005304:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005306:	4a15      	ldr	r2, [pc, #84]	; (800535c <HAL_DMA_Init+0x124>)
 8005308:	4b0c      	ldr	r3, [pc, #48]	; (800533c <HAL_DMA_Init+0x104>)
    hdma->DmaBaseAddress = DMA1;
 800530a:	4915      	ldr	r1, [pc, #84]	; (8005360 <HAL_DMA_Init+0x128>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800530c:	4422      	add	r2, r4
 800530e:	fba3 3202 	umull	r3, r2, r3, r2
 8005312:	0912      	lsrs	r2, r2, #4
 8005314:	0092      	lsls	r2, r2, #2
    hdma->DmaBaseAddress = DMA1;
 8005316:	e79e      	b.n	8005256 <HAL_DMA_Init+0x1e>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005318:	2400      	movs	r4, #0
 800531a:	6044      	str	r4, [r0, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800531c:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005320:	f8c6 1084 	str.w	r1, [r6, #132]	; 0x84
    hdma->DMAmuxRequestGen = 0U;
 8005324:	2300      	movs	r3, #0
    hdma->DMAmuxRequestGenStatus = 0U;
 8005326:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800532a:	65c3      	str	r3, [r0, #92]	; 0x5c
 800532c:	e7e1      	b.n	80052f2 <HAL_DMA_Init+0xba>
    return HAL_ERROR;
 800532e:	2001      	movs	r0, #1
}
 8005330:	4770      	bx	lr
 8005332:	bf00      	nop
 8005334:	40020407 	.word	0x40020407
 8005338:	bffdfbf8 	.word	0xbffdfbf8
 800533c:	cccccccd 	.word	0xcccccccd
 8005340:	40020400 	.word	0x40020400
 8005344:	40020800 	.word	0x40020800
 8005348:	40020820 	.word	0x40020820
 800534c:	40020880 	.word	0x40020880
 8005350:	1000823f 	.word	0x1000823f
 8005354:	40020940 	.word	0x40020940
 8005358:	40020900 	.word	0x40020900
 800535c:	bffdfff8 	.word	0xbffdfff8
 8005360:	40020000 	.word	0x40020000

08005364 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005368:	680c      	ldr	r4, [r1, #0]
{
 800536a:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0U)
 800536c:	2c00      	cmp	r4, #0
 800536e:	d07d      	beq.n	800546c <HAL_GPIO_Init+0x108>
 8005370:	f04f 0c00 	mov.w	ip, #0
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005374:	4e71      	ldr	r6, [pc, #452]	; (800553c <HAL_GPIO_Init+0x1d8>)
  uint32_t position = 0x00U;
 8005376:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005378:	f04f 0b01 	mov.w	fp, #1
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800537c:	468e      	mov	lr, r1
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800537e:	fa0b f703 	lsl.w	r7, fp, r3
    if (iocurrent != 0x00u)
 8005382:	ea17 0a04 	ands.w	sl, r7, r4
 8005386:	d06b      	beq.n	8005460 <HAL_GPIO_Init+0xfc>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005388:	f8de 1004 	ldr.w	r1, [lr, #4]
 800538c:	f001 0203 	and.w	r2, r1, #3
 8005390:	1e55      	subs	r5, r2, #1
 8005392:	2d01      	cmp	r5, #1
 8005394:	d96d      	bls.n	8005472 <HAL_GPIO_Init+0x10e>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005396:	2a03      	cmp	r2, #3
 8005398:	f040 80b1 	bne.w	80054fe <HAL_GPIO_Init+0x19a>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800539c:	fa02 f20c 	lsl.w	r2, r2, ip
 80053a0:	43d5      	mvns	r5, r2
      temp = GPIOx->MODER;
 80053a2:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80053a4:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80053a6:	432a      	orrs	r2, r5
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80053a8:	f411 3f40 	tst.w	r1, #196608	; 0x30000
      GPIOx->MODER = temp;
 80053ac:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80053ae:	d057      	beq.n	8005460 <HAL_GPIO_Init+0xfc>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80053b0:	4d63      	ldr	r5, [pc, #396]	; (8005540 <HAL_GPIO_Init+0x1dc>)
 80053b2:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 80053b4:	f042 0201 	orr.w	r2, r2, #1
 80053b8:	662a      	str	r2, [r5, #96]	; 0x60
 80053ba:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 80053bc:	f002 0201 	and.w	r2, r2, #1
 80053c0:	9203      	str	r2, [sp, #12]
 80053c2:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 80053c4:	f023 0203 	bic.w	r2, r3, #3
 80053c8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80053cc:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80053d0:	f003 0703 	and.w	r7, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80053d4:	6895      	ldr	r5, [r2, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80053d6:	00bf      	lsls	r7, r7, #2
 80053d8:	f04f 080f 	mov.w	r8, #15
 80053dc:	fa08 f807 	lsl.w	r8, r8, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80053e0:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80053e4:	ea25 0908 	bic.w	r9, r5, r8
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80053e8:	d01a      	beq.n	8005420 <HAL_GPIO_Init+0xbc>
 80053ea:	4d56      	ldr	r5, [pc, #344]	; (8005544 <HAL_GPIO_Init+0x1e0>)
 80053ec:	42a8      	cmp	r0, r5
 80053ee:	f000 8092 	beq.w	8005516 <HAL_GPIO_Init+0x1b2>
 80053f2:	4d55      	ldr	r5, [pc, #340]	; (8005548 <HAL_GPIO_Init+0x1e4>)
 80053f4:	42a8      	cmp	r0, r5
 80053f6:	f000 8093 	beq.w	8005520 <HAL_GPIO_Init+0x1bc>
 80053fa:	4d54      	ldr	r5, [pc, #336]	; (800554c <HAL_GPIO_Init+0x1e8>)
 80053fc:	42a8      	cmp	r0, r5
 80053fe:	f000 8083 	beq.w	8005508 <HAL_GPIO_Init+0x1a4>
 8005402:	4d53      	ldr	r5, [pc, #332]	; (8005550 <HAL_GPIO_Init+0x1ec>)
 8005404:	42a8      	cmp	r0, r5
 8005406:	f000 8092 	beq.w	800552e <HAL_GPIO_Init+0x1ca>
 800540a:	4d52      	ldr	r5, [pc, #328]	; (8005554 <HAL_GPIO_Init+0x1f0>)
 800540c:	42a8      	cmp	r0, r5
 800540e:	bf0c      	ite	eq
 8005410:	f04f 0805 	moveq.w	r8, #5
 8005414:	f04f 0806 	movne.w	r8, #6
 8005418:	fa08 f707 	lsl.w	r7, r8, r7
 800541c:	ea49 0907 	orr.w	r9, r9, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005420:	f8c2 9008 	str.w	r9, [r2, #8]
        temp = EXTI->RTSR1;
 8005424:	68b2      	ldr	r2, [r6, #8]
        temp &= ~(iocurrent);
 8005426:	ea6f 050a 	mvn.w	r5, sl
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800542a:	02cf      	lsls	r7, r1, #11
        temp &= ~(iocurrent);
 800542c:	bf54      	ite	pl
 800542e:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 8005430:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->RTSR1 = temp;
 8005434:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR1;
 8005436:	68f2      	ldr	r2, [r6, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005438:	028f      	lsls	r7, r1, #10
        temp &= ~(iocurrent);
 800543a:	bf54      	ite	pl
 800543c:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 800543e:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->FTSR1 = temp;
 8005442:	60f2      	str	r2, [r6, #12]

        temp = EXTI->EMR1;
 8005444:	6872      	ldr	r2, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005446:	038f      	lsls	r7, r1, #14
        temp &= ~(iocurrent);
 8005448:	bf54      	ite	pl
 800544a:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 800544c:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->EMR1 = temp;
 8005450:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005452:	6832      	ldr	r2, [r6, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005454:	03c9      	lsls	r1, r1, #15
        temp &= ~(iocurrent);
 8005456:	bf54      	ite	pl
 8005458:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 800545a:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->IMR1 = temp;
 800545e:	6032      	str	r2, [r6, #0]
      }
    }

    position++;
 8005460:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005462:	fa34 f203 	lsrs.w	r2, r4, r3
 8005466:	f10c 0c02 	add.w	ip, ip, #2
 800546a:	d188      	bne.n	800537e <HAL_GPIO_Init+0x1a>
  }
}
 800546c:	b005      	add	sp, #20
 800546e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8005472:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005476:	f8de 500c 	ldr.w	r5, [lr, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800547a:	f04f 0803 	mov.w	r8, #3
 800547e:	fa08 f80c 	lsl.w	r8, r8, ip
 8005482:	ea29 0908 	bic.w	r9, r9, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005486:	fa05 f50c 	lsl.w	r5, r5, ip
 800548a:	ea45 0509 	orr.w	r5, r5, r9
        GPIOx->OSPEEDR = temp;
 800548e:	6085      	str	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005490:	ea6f 0508 	mvn.w	r5, r8
        temp = GPIOx->OTYPER;
 8005494:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005498:	ea28 0807 	bic.w	r8, r8, r7
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800549c:	f3c1 1700 	ubfx	r7, r1, #4, #1
 80054a0:	409f      	lsls	r7, r3
 80054a2:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 80054a6:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 80054a8:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80054aa:	ea07 0805 	and.w	r8, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80054ae:	f8de 7008 	ldr.w	r7, [lr, #8]
 80054b2:	fa07 f70c 	lsl.w	r7, r7, ip
 80054b6:	ea47 0708 	orr.w	r7, r7, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80054ba:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 80054bc:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80054be:	fa02 f20c 	lsl.w	r2, r2, ip
 80054c2:	f47f af6e 	bne.w	80053a2 <HAL_GPIO_Init+0x3e>
        temp = GPIOx->AFR[position >> 3U];
 80054c6:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 80054ca:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80054ce:	f003 0807 	and.w	r8, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80054d2:	f8d9 7020 	ldr.w	r7, [r9, #32]
 80054d6:	9700      	str	r7, [sp, #0]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80054d8:	f8de 7010 	ldr.w	r7, [lr, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80054dc:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80054e0:	fa07 f708 	lsl.w	r7, r7, r8
 80054e4:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80054e6:	270f      	movs	r7, #15
 80054e8:	fa07 f808 	lsl.w	r8, r7, r8
 80054ec:	9f00      	ldr	r7, [sp, #0]
 80054ee:	ea27 0808 	bic.w	r8, r7, r8
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80054f2:	9f01      	ldr	r7, [sp, #4]
 80054f4:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->AFR[position >> 3U] = temp;
 80054f8:	f8c9 7020 	str.w	r7, [r9, #32]
 80054fc:	e751      	b.n	80053a2 <HAL_GPIO_Init+0x3e>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80054fe:	2503      	movs	r5, #3
 8005500:	fa05 f50c 	lsl.w	r5, r5, ip
 8005504:	43ed      	mvns	r5, r5
 8005506:	e7cf      	b.n	80054a8 <HAL_GPIO_Init+0x144>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005508:	f04f 0803 	mov.w	r8, #3
 800550c:	fa08 f707 	lsl.w	r7, r8, r7
 8005510:	ea49 0907 	orr.w	r9, r9, r7
 8005514:	e784      	b.n	8005420 <HAL_GPIO_Init+0xbc>
 8005516:	fa0b f707 	lsl.w	r7, fp, r7
 800551a:	ea49 0907 	orr.w	r9, r9, r7
 800551e:	e77f      	b.n	8005420 <HAL_GPIO_Init+0xbc>
 8005520:	f04f 0802 	mov.w	r8, #2
 8005524:	fa08 f707 	lsl.w	r7, r8, r7
 8005528:	ea49 0907 	orr.w	r9, r9, r7
 800552c:	e778      	b.n	8005420 <HAL_GPIO_Init+0xbc>
 800552e:	f04f 0804 	mov.w	r8, #4
 8005532:	fa08 f707 	lsl.w	r7, r8, r7
 8005536:	ea49 0907 	orr.w	r9, r9, r7
 800553a:	e771      	b.n	8005420 <HAL_GPIO_Init+0xbc>
 800553c:	40010400 	.word	0x40010400
 8005540:	40021000 	.word	0x40021000
 8005544:	48000400 	.word	0x48000400
 8005548:	48000800 	.word	0x48000800
 800554c:	48000c00 	.word	0x48000c00
 8005550:	48001000 	.word	0x48001000
 8005554:	48001400 	.word	0x48001400

08005558 <HAL_PWREx_ControlVoltageScaling>:
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005558:	4a37      	ldr	r2, [pc, #220]	; (8005638 <HAL_PWREx_ControlVoltageScaling+0xe0>)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800555a:	b960      	cbnz	r0, 8005576 <HAL_PWREx_ControlVoltageScaling+0x1e>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800555c:	6813      	ldr	r3, [r2, #0]
 800555e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005562:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005566:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800556a:	d01d      	beq.n	80055a8 <HAL_PWREx_ControlVoltageScaling+0x50>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800556c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005570:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005574:	4770      	bx	lr
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005576:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800557a:	d007      	beq.n	800558c <HAL_PWREx_ControlVoltageScaling+0x34>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800557c:	6813      	ldr	r3, [r2, #0]
 800557e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005582:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005586:	2000      	movs	r0, #0
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005588:	6013      	str	r3, [r2, #0]
}
 800558a:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800558c:	6813      	ldr	r3, [r2, #0]
 800558e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005592:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005596:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800559a:	d02b      	beq.n	80055f4 <HAL_PWREx_ControlVoltageScaling+0x9c>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800559c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  return HAL_OK;
 80055a0:	2000      	movs	r0, #0
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80055a2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80055a6:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80055a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80055b0:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80055b2:	4822      	ldr	r0, [pc, #136]	; (800563c <HAL_PWREx_ControlVoltageScaling+0xe4>)
 80055b4:	4922      	ldr	r1, [pc, #136]	; (8005640 <HAL_PWREx_ControlVoltageScaling+0xe8>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80055b6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80055ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80055be:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80055c0:	6803      	ldr	r3, [r0, #0]
 80055c2:	2032      	movs	r0, #50	; 0x32
 80055c4:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80055c8:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80055ca:	fba1 1303 	umull	r1, r3, r1, r3
 80055ce:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80055d0:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80055d2:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80055d6:	d506      	bpl.n	80055e6 <HAL_PWREx_ControlVoltageScaling+0x8e>
 80055d8:	e000      	b.n	80055dc <HAL_PWREx_ControlVoltageScaling+0x84>
 80055da:	b123      	cbz	r3, 80055e6 <HAL_PWREx_ControlVoltageScaling+0x8e>
 80055dc:	6951      	ldr	r1, [r2, #20]
 80055de:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 80055e0:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80055e4:	d4f9      	bmi.n	80055da <HAL_PWREx_ControlVoltageScaling+0x82>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80055e6:	4b14      	ldr	r3, [pc, #80]	; (8005638 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 80055e8:	695b      	ldr	r3, [r3, #20]
 80055ea:	055b      	lsls	r3, r3, #21
  return HAL_OK;
 80055ec:	bf54      	ite	pl
 80055ee:	2000      	movpl	r0, #0
        return HAL_TIMEOUT;
 80055f0:	2003      	movmi	r0, #3
 80055f2:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80055f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80055fc:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80055fe:	480f      	ldr	r0, [pc, #60]	; (800563c <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8005600:	490f      	ldr	r1, [pc, #60]	; (8005640 <HAL_PWREx_ControlVoltageScaling+0xe8>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005602:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005606:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800560a:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800560c:	6803      	ldr	r3, [r0, #0]
 800560e:	2032      	movs	r0, #50	; 0x32
 8005610:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005614:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005616:	fba1 1303 	umull	r1, r3, r1, r3
 800561a:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800561c:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800561e:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005622:	d5e0      	bpl.n	80055e6 <HAL_PWREx_ControlVoltageScaling+0x8e>
 8005624:	e001      	b.n	800562a <HAL_PWREx_ControlVoltageScaling+0xd2>
 8005626:	2b00      	cmp	r3, #0
 8005628:	d0dd      	beq.n	80055e6 <HAL_PWREx_ControlVoltageScaling+0x8e>
 800562a:	6951      	ldr	r1, [r2, #20]
 800562c:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 800562e:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005632:	d5d8      	bpl.n	80055e6 <HAL_PWREx_ControlVoltageScaling+0x8e>
 8005634:	e7f7      	b.n	8005626 <HAL_PWREx_ControlVoltageScaling+0xce>
 8005636:	bf00      	nop
 8005638:	40007000 	.word	0x40007000
 800563c:	2000043c 	.word	0x2000043c
 8005640:	431bde83 	.word	0x431bde83

08005644 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005644:	4a02      	ldr	r2, [pc, #8]	; (8005650 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 8005646:	6893      	ldr	r3, [r2, #8]
 8005648:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800564c:	6093      	str	r3, [r2, #8]
}
 800564e:	4770      	bx	lr
 8005650:	40007000 	.word	0x40007000

08005654 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005654:	2800      	cmp	r0, #0
 8005656:	f000 81c3 	beq.w	80059e0 <HAL_RCC_OscConfig+0x38c>
{
 800565a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800565e:	6803      	ldr	r3, [r0, #0]
 8005660:	07d9      	lsls	r1, r3, #31
{
 8005662:	b082      	sub	sp, #8
 8005664:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005666:	d52d      	bpl.n	80056c4 <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005668:	49a6      	ldr	r1, [pc, #664]	; (8005904 <HAL_RCC_OscConfig+0x2b0>)
 800566a:	688a      	ldr	r2, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800566c:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800566e:	f002 020c 	and.w	r2, r2, #12

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005672:	2a0c      	cmp	r2, #12
 8005674:	f000 810a 	beq.w	800588c <HAL_RCC_OscConfig+0x238>
 8005678:	2a08      	cmp	r2, #8
 800567a:	f000 810c 	beq.w	8005896 <HAL_RCC_OscConfig+0x242>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800567e:	6863      	ldr	r3, [r4, #4]
 8005680:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005684:	f000 8133 	beq.w	80058ee <HAL_RCC_OscConfig+0x29a>
 8005688:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800568c:	f000 819b 	beq.w	80059c6 <HAL_RCC_OscConfig+0x372>
 8005690:	4d9c      	ldr	r5, [pc, #624]	; (8005904 <HAL_RCC_OscConfig+0x2b0>)
 8005692:	682a      	ldr	r2, [r5, #0]
 8005694:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005698:	602a      	str	r2, [r5, #0]
 800569a:	682a      	ldr	r2, [r5, #0]
 800569c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80056a0:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	f040 8128 	bne.w	80058f8 <HAL_RCC_OscConfig+0x2a4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056a8:	f7fe fd98 	bl	80041dc <HAL_GetTick>
 80056ac:	4606      	mov	r6, r0

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80056ae:	e005      	b.n	80056bc <HAL_RCC_OscConfig+0x68>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056b0:	f7fe fd94 	bl	80041dc <HAL_GetTick>
 80056b4:	1b80      	subs	r0, r0, r6
 80056b6:	2864      	cmp	r0, #100	; 0x64
 80056b8:	f200 8142 	bhi.w	8005940 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80056bc:	682b      	ldr	r3, [r5, #0]
 80056be:	039f      	lsls	r7, r3, #14
 80056c0:	d4f6      	bmi.n	80056b0 <HAL_RCC_OscConfig+0x5c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056c2:	6823      	ldr	r3, [r4, #0]
 80056c4:	079e      	lsls	r6, r3, #30
 80056c6:	d528      	bpl.n	800571a <HAL_RCC_OscConfig+0xc6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80056c8:	4a8e      	ldr	r2, [pc, #568]	; (8005904 <HAL_RCC_OscConfig+0x2b0>)
 80056ca:	6893      	ldr	r3, [r2, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80056cc:	68d2      	ldr	r2, [r2, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80056ce:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80056d2:	2b0c      	cmp	r3, #12
 80056d4:	f000 80ec 	beq.w	80058b0 <HAL_RCC_OscConfig+0x25c>
 80056d8:	2b04      	cmp	r3, #4
 80056da:	f000 80ee 	beq.w	80058ba <HAL_RCC_OscConfig+0x266>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80056de:	68e3      	ldr	r3, [r4, #12]
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80056e0:	4d88      	ldr	r5, [pc, #544]	; (8005904 <HAL_RCC_OscConfig+0x2b0>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	f000 811d 	beq.w	8005922 <HAL_RCC_OscConfig+0x2ce>
        __HAL_RCC_HSI_ENABLE();
 80056e8:	682b      	ldr	r3, [r5, #0]
 80056ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056ee:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056f0:	f7fe fd74 	bl	80041dc <HAL_GetTick>
 80056f4:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80056f6:	e005      	b.n	8005704 <HAL_RCC_OscConfig+0xb0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056f8:	f7fe fd70 	bl	80041dc <HAL_GetTick>
 80056fc:	1b80      	subs	r0, r0, r6
 80056fe:	2802      	cmp	r0, #2
 8005700:	f200 811e 	bhi.w	8005940 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005704:	682b      	ldr	r3, [r5, #0]
 8005706:	0558      	lsls	r0, r3, #21
 8005708:	d5f6      	bpl.n	80056f8 <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800570a:	686b      	ldr	r3, [r5, #4]
 800570c:	6922      	ldr	r2, [r4, #16]
 800570e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005712:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005716:	606b      	str	r3, [r5, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005718:	6823      	ldr	r3, [r4, #0]
 800571a:	071a      	lsls	r2, r3, #28
 800571c:	d519      	bpl.n	8005752 <HAL_RCC_OscConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800571e:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005720:	4d78      	ldr	r5, [pc, #480]	; (8005904 <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005722:	2b00      	cmp	r3, #0
 8005724:	f000 809e 	beq.w	8005864 <HAL_RCC_OscConfig+0x210>
      __HAL_RCC_LSI_ENABLE();
 8005728:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800572c:	f043 0301 	orr.w	r3, r3, #1
 8005730:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005734:	f7fe fd52 	bl	80041dc <HAL_GetTick>
 8005738:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800573a:	e005      	b.n	8005748 <HAL_RCC_OscConfig+0xf4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800573c:	f7fe fd4e 	bl	80041dc <HAL_GetTick>
 8005740:	1b80      	subs	r0, r0, r6
 8005742:	2802      	cmp	r0, #2
 8005744:	f200 80fc 	bhi.w	8005940 <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005748:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800574c:	079f      	lsls	r7, r3, #30
 800574e:	d5f5      	bpl.n	800573c <HAL_RCC_OscConfig+0xe8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005750:	6823      	ldr	r3, [r4, #0]
 8005752:	0759      	lsls	r1, r3, #29
 8005754:	d541      	bpl.n	80057da <HAL_RCC_OscConfig+0x186>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005756:	4b6b      	ldr	r3, [pc, #428]	; (8005904 <HAL_RCC_OscConfig+0x2b0>)
 8005758:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800575a:	00d2      	lsls	r2, r2, #3
 800575c:	f100 80f4 	bmi.w	8005948 <HAL_RCC_OscConfig+0x2f4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005760:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005762:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005766:	659a      	str	r2, [r3, #88]	; 0x58
 8005768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800576a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800576e:	9301      	str	r3, [sp, #4]
 8005770:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005772:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005774:	4e64      	ldr	r6, [pc, #400]	; (8005908 <HAL_RCC_OscConfig+0x2b4>)
 8005776:	6833      	ldr	r3, [r6, #0]
 8005778:	05df      	lsls	r7, r3, #23
 800577a:	f140 8113 	bpl.w	80059a4 <HAL_RCC_OscConfig+0x350>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800577e:	68a3      	ldr	r3, [r4, #8]
 8005780:	2b01      	cmp	r3, #1
 8005782:	f000 80e3 	beq.w	800594c <HAL_RCC_OscConfig+0x2f8>
 8005786:	2b05      	cmp	r3, #5
 8005788:	f000 8169 	beq.w	8005a5e <HAL_RCC_OscConfig+0x40a>
 800578c:	4e5d      	ldr	r6, [pc, #372]	; (8005904 <HAL_RCC_OscConfig+0x2b0>)
 800578e:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8005792:	f022 0201 	bic.w	r2, r2, #1
 8005796:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
 800579a:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 800579e:	f022 0204 	bic.w	r2, r2, #4
 80057a2:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	f040 80d7 	bne.w	800595a <HAL_RCC_OscConfig+0x306>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057ac:	f7fe fd16 	bl	80041dc <HAL_GetTick>

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057b0:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80057b4:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80057b6:	e005      	b.n	80057c4 <HAL_RCC_OscConfig+0x170>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057b8:	f7fe fd10 	bl	80041dc <HAL_GetTick>
 80057bc:	1bc0      	subs	r0, r0, r7
 80057be:	4540      	cmp	r0, r8
 80057c0:	f200 80be 	bhi.w	8005940 <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80057c4:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 80057c8:	079a      	lsls	r2, r3, #30
 80057ca:	d4f5      	bmi.n	80057b8 <HAL_RCC_OscConfig+0x164>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80057cc:	b125      	cbz	r5, 80057d8 <HAL_RCC_OscConfig+0x184>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057ce:	4a4d      	ldr	r2, [pc, #308]	; (8005904 <HAL_RCC_OscConfig+0x2b0>)
 80057d0:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80057d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057d6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80057d8:	6823      	ldr	r3, [r4, #0]
 80057da:	069b      	lsls	r3, r3, #26
 80057dc:	d518      	bpl.n	8005810 <HAL_RCC_OscConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80057de:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80057e0:	4d48      	ldr	r5, [pc, #288]	; (8005904 <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	f000 80ca 	beq.w	800597c <HAL_RCC_OscConfig+0x328>
      __HAL_RCC_HSI48_ENABLE();
 80057e8:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80057ec:	f043 0301 	orr.w	r3, r3, #1
 80057f0:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057f4:	f7fe fcf2 	bl	80041dc <HAL_GetTick>
 80057f8:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80057fa:	e005      	b.n	8005808 <HAL_RCC_OscConfig+0x1b4>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80057fc:	f7fe fcee 	bl	80041dc <HAL_GetTick>
 8005800:	1b80      	subs	r0, r0, r6
 8005802:	2802      	cmp	r0, #2
 8005804:	f200 809c 	bhi.w	8005940 <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005808:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800580c:	079f      	lsls	r7, r3, #30
 800580e:	d5f5      	bpl.n	80057fc <HAL_RCC_OscConfig+0x1a8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005810:	69e0      	ldr	r0, [r4, #28]
 8005812:	b318      	cbz	r0, 800585c <HAL_RCC_OscConfig+0x208>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005814:	4d3b      	ldr	r5, [pc, #236]	; (8005904 <HAL_RCC_OscConfig+0x2b0>)
 8005816:	68ab      	ldr	r3, [r5, #8]
 8005818:	f003 030c 	and.w	r3, r3, #12
 800581c:	2b0c      	cmp	r3, #12
 800581e:	f000 812c 	beq.w	8005a7a <HAL_RCC_OscConfig+0x426>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005822:	682b      	ldr	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005824:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8005826:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800582a:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800582c:	f000 80da 	beq.w	80059e4 <HAL_RCC_OscConfig+0x390>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005830:	68eb      	ldr	r3, [r5, #12]
 8005832:	f023 0303 	bic.w	r3, r3, #3
 8005836:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005838:	68eb      	ldr	r3, [r5, #12]
 800583a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800583e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005842:	60eb      	str	r3, [r5, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005844:	f7fe fcca 	bl	80041dc <HAL_GetTick>
 8005848:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800584a:	e004      	b.n	8005856 <HAL_RCC_OscConfig+0x202>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800584c:	f7fe fcc6 	bl	80041dc <HAL_GetTick>
 8005850:	1b00      	subs	r0, r0, r4
 8005852:	2802      	cmp	r0, #2
 8005854:	d874      	bhi.n	8005940 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005856:	682b      	ldr	r3, [r5, #0]
 8005858:	019b      	lsls	r3, r3, #6
 800585a:	d4f7      	bmi.n	800584c <HAL_RCC_OscConfig+0x1f8>
      }
    }
  }
  }

  return HAL_OK;
 800585c:	2000      	movs	r0, #0
}
 800585e:	b002      	add	sp, #8
 8005860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8005864:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8005868:	f023 0301 	bic.w	r3, r3, #1
 800586c:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 8005870:	f7fe fcb4 	bl	80041dc <HAL_GetTick>
 8005874:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005876:	e004      	b.n	8005882 <HAL_RCC_OscConfig+0x22e>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005878:	f7fe fcb0 	bl	80041dc <HAL_GetTick>
 800587c:	1b80      	subs	r0, r0, r6
 800587e:	2802      	cmp	r0, #2
 8005880:	d85e      	bhi.n	8005940 <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005882:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8005886:	0798      	lsls	r0, r3, #30
 8005888:	d4f6      	bmi.n	8005878 <HAL_RCC_OscConfig+0x224>
 800588a:	e761      	b.n	8005750 <HAL_RCC_OscConfig+0xfc>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800588c:	f001 0103 	and.w	r1, r1, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005890:	2903      	cmp	r1, #3
 8005892:	f47f aef4 	bne.w	800567e <HAL_RCC_OscConfig+0x2a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005896:	4a1b      	ldr	r2, [pc, #108]	; (8005904 <HAL_RCC_OscConfig+0x2b0>)
 8005898:	6812      	ldr	r2, [r2, #0]
 800589a:	0392      	lsls	r2, r2, #14
 800589c:	f57f af12 	bpl.w	80056c4 <HAL_RCC_OscConfig+0x70>
 80058a0:	6862      	ldr	r2, [r4, #4]
 80058a2:	2a00      	cmp	r2, #0
 80058a4:	f47f af0e 	bne.w	80056c4 <HAL_RCC_OscConfig+0x70>
        return HAL_ERROR;
 80058a8:	2001      	movs	r0, #1
}
 80058aa:	b002      	add	sp, #8
 80058ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80058b0:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80058b4:	2a02      	cmp	r2, #2
 80058b6:	f47f af12 	bne.w	80056de <HAL_RCC_OscConfig+0x8a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80058ba:	4b12      	ldr	r3, [pc, #72]	; (8005904 <HAL_RCC_OscConfig+0x2b0>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	055d      	lsls	r5, r3, #21
 80058c0:	d502      	bpl.n	80058c8 <HAL_RCC_OscConfig+0x274>
 80058c2:	68e3      	ldr	r3, [r4, #12]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d0ef      	beq.n	80058a8 <HAL_RCC_OscConfig+0x254>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058c8:	4a0e      	ldr	r2, [pc, #56]	; (8005904 <HAL_RCC_OscConfig+0x2b0>)
 80058ca:	6920      	ldr	r0, [r4, #16]
 80058cc:	6853      	ldr	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80058ce:	490f      	ldr	r1, [pc, #60]	; (800590c <HAL_RCC_OscConfig+0x2b8>)
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058d0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80058d4:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80058d8:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80058da:	6808      	ldr	r0, [r1, #0]
 80058dc:	f7fe fc34 	bl	8004148 <HAL_InitTick>
 80058e0:	2800      	cmp	r0, #0
 80058e2:	d1e1      	bne.n	80058a8 <HAL_RCC_OscConfig+0x254>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058e4:	6823      	ldr	r3, [r4, #0]
 80058e6:	071a      	lsls	r2, r3, #28
 80058e8:	f57f af33 	bpl.w	8005752 <HAL_RCC_OscConfig+0xfe>
 80058ec:	e717      	b.n	800571e <HAL_RCC_OscConfig+0xca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80058ee:	4a05      	ldr	r2, [pc, #20]	; (8005904 <HAL_RCC_OscConfig+0x2b0>)
 80058f0:	6813      	ldr	r3, [r2, #0]
 80058f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058f6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80058f8:	f7fe fc70 	bl	80041dc <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80058fc:	4e01      	ldr	r6, [pc, #4]	; (8005904 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 80058fe:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005900:	e00b      	b.n	800591a <HAL_RCC_OscConfig+0x2c6>
 8005902:	bf00      	nop
 8005904:	40021000 	.word	0x40021000
 8005908:	40007000 	.word	0x40007000
 800590c:	20000444 	.word	0x20000444
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005910:	f7fe fc64 	bl	80041dc <HAL_GetTick>
 8005914:	1b40      	subs	r0, r0, r5
 8005916:	2864      	cmp	r0, #100	; 0x64
 8005918:	d812      	bhi.n	8005940 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800591a:	6833      	ldr	r3, [r6, #0]
 800591c:	039b      	lsls	r3, r3, #14
 800591e:	d5f7      	bpl.n	8005910 <HAL_RCC_OscConfig+0x2bc>
 8005920:	e6cf      	b.n	80056c2 <HAL_RCC_OscConfig+0x6e>
        __HAL_RCC_HSI_DISABLE();
 8005922:	682b      	ldr	r3, [r5, #0]
 8005924:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005928:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800592a:	f7fe fc57 	bl	80041dc <HAL_GetTick>
 800592e:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005930:	682b      	ldr	r3, [r5, #0]
 8005932:	0559      	lsls	r1, r3, #21
 8005934:	d5d6      	bpl.n	80058e4 <HAL_RCC_OscConfig+0x290>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005936:	f7fe fc51 	bl	80041dc <HAL_GetTick>
 800593a:	1b80      	subs	r0, r0, r6
 800593c:	2802      	cmp	r0, #2
 800593e:	d9f7      	bls.n	8005930 <HAL_RCC_OscConfig+0x2dc>
            return HAL_TIMEOUT;
 8005940:	2003      	movs	r0, #3
}
 8005942:	b002      	add	sp, #8
 8005944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FlagStatus       pwrclkchanged = RESET;
 8005948:	2500      	movs	r5, #0
 800594a:	e713      	b.n	8005774 <HAL_RCC_OscConfig+0x120>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800594c:	4a65      	ldr	r2, [pc, #404]	; (8005ae4 <HAL_RCC_OscConfig+0x490>)
 800594e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005952:	f043 0301 	orr.w	r3, r3, #1
 8005956:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 800595a:	f7fe fc3f 	bl	80041dc <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800595e:	4f61      	ldr	r7, [pc, #388]	; (8005ae4 <HAL_RCC_OscConfig+0x490>)
      tickstart = HAL_GetTick();
 8005960:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005962:	f241 3888 	movw	r8, #5000	; 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005966:	e004      	b.n	8005972 <HAL_RCC_OscConfig+0x31e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005968:	f7fe fc38 	bl	80041dc <HAL_GetTick>
 800596c:	1b80      	subs	r0, r0, r6
 800596e:	4540      	cmp	r0, r8
 8005970:	d8e6      	bhi.n	8005940 <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005972:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005976:	0799      	lsls	r1, r3, #30
 8005978:	d5f6      	bpl.n	8005968 <HAL_RCC_OscConfig+0x314>
 800597a:	e727      	b.n	80057cc <HAL_RCC_OscConfig+0x178>
      __HAL_RCC_HSI48_DISABLE();
 800597c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8005980:	f023 0301 	bic.w	r3, r3, #1
 8005984:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8005988:	f7fe fc28 	bl	80041dc <HAL_GetTick>
 800598c:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800598e:	e004      	b.n	800599a <HAL_RCC_OscConfig+0x346>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005990:	f7fe fc24 	bl	80041dc <HAL_GetTick>
 8005994:	1b80      	subs	r0, r0, r6
 8005996:	2802      	cmp	r0, #2
 8005998:	d8d2      	bhi.n	8005940 <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800599a:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800599e:	0798      	lsls	r0, r3, #30
 80059a0:	d4f6      	bmi.n	8005990 <HAL_RCC_OscConfig+0x33c>
 80059a2:	e735      	b.n	8005810 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80059a4:	6833      	ldr	r3, [r6, #0]
 80059a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059aa:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80059ac:	f7fe fc16 	bl	80041dc <HAL_GetTick>
 80059b0:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80059b2:	6833      	ldr	r3, [r6, #0]
 80059b4:	05d8      	lsls	r0, r3, #23
 80059b6:	f53f aee2 	bmi.w	800577e <HAL_RCC_OscConfig+0x12a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059ba:	f7fe fc0f 	bl	80041dc <HAL_GetTick>
 80059be:	1bc0      	subs	r0, r0, r7
 80059c0:	2802      	cmp	r0, #2
 80059c2:	d9f6      	bls.n	80059b2 <HAL_RCC_OscConfig+0x35e>
 80059c4:	e7bc      	b.n	8005940 <HAL_RCC_OscConfig+0x2ec>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059c6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80059ca:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80059d4:	601a      	str	r2, [r3, #0]
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80059dc:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80059de:	e78b      	b.n	80058f8 <HAL_RCC_OscConfig+0x2a4>
    return HAL_ERROR;
 80059e0:	2001      	movs	r0, #1
}
 80059e2:	4770      	bx	lr
        tickstart = HAL_GetTick();
 80059e4:	f7fe fbfa 	bl	80041dc <HAL_GetTick>
 80059e8:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059ea:	e004      	b.n	80059f6 <HAL_RCC_OscConfig+0x3a2>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059ec:	f7fe fbf6 	bl	80041dc <HAL_GetTick>
 80059f0:	1b80      	subs	r0, r0, r6
 80059f2:	2802      	cmp	r0, #2
 80059f4:	d8a4      	bhi.n	8005940 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059f6:	682b      	ldr	r3, [r5, #0]
 80059f8:	0199      	lsls	r1, r3, #6
 80059fa:	d4f7      	bmi.n	80059ec <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80059fc:	68e9      	ldr	r1, [r5, #12]
 80059fe:	4b3a      	ldr	r3, [pc, #232]	; (8005ae8 <HAL_RCC_OscConfig+0x494>)
 8005a00:	6a22      	ldr	r2, [r4, #32]
 8005a02:	6a60      	ldr	r0, [r4, #36]	; 0x24
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a04:	4e37      	ldr	r6, [pc, #220]	; (8005ae4 <HAL_RCC_OscConfig+0x490>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a06:	400b      	ands	r3, r1
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	e9d4 120a 	ldrd	r1, r2, [r4, #40]	; 0x28
 8005a0e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005a12:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 8005a16:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
 8005a1a:	3801      	subs	r0, #1
 8005a1c:	0849      	lsrs	r1, r1, #1
 8005a1e:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8005a22:	3901      	subs	r1, #1
 8005a24:	0852      	lsrs	r2, r2, #1
 8005a26:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8005a2a:	3a01      	subs	r2, #1
 8005a2c:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8005a30:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8005a32:	682b      	ldr	r3, [r5, #0]
 8005a34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a38:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005a3a:	68eb      	ldr	r3, [r5, #12]
 8005a3c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a40:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8005a42:	f7fe fbcb 	bl	80041dc <HAL_GetTick>
 8005a46:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a48:	e005      	b.n	8005a56 <HAL_RCC_OscConfig+0x402>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a4a:	f7fe fbc7 	bl	80041dc <HAL_GetTick>
 8005a4e:	1b00      	subs	r0, r0, r4
 8005a50:	2802      	cmp	r0, #2
 8005a52:	f63f af75 	bhi.w	8005940 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a56:	6833      	ldr	r3, [r6, #0]
 8005a58:	019a      	lsls	r2, r3, #6
 8005a5a:	d5f6      	bpl.n	8005a4a <HAL_RCC_OscConfig+0x3f6>
 8005a5c:	e6fe      	b.n	800585c <HAL_RCC_OscConfig+0x208>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a5e:	4b21      	ldr	r3, [pc, #132]	; (8005ae4 <HAL_RCC_OscConfig+0x490>)
 8005a60:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005a64:	f042 0204 	orr.w	r2, r2, #4
 8005a68:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8005a6c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005a70:	f042 0201 	orr.w	r2, r2, #1
 8005a74:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005a78:	e76f      	b.n	800595a <HAL_RCC_OscConfig+0x306>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a7a:	2801      	cmp	r0, #1
 8005a7c:	f43f aeef 	beq.w	800585e <HAL_RCC_OscConfig+0x20a>
      temp_pllckcfg = RCC->PLLCFGR;
 8005a80:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a82:	6a22      	ldr	r2, [r4, #32]
 8005a84:	f003 0103 	and.w	r1, r3, #3
 8005a88:	4291      	cmp	r1, r2
 8005a8a:	f47f af0d 	bne.w	80058a8 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005a8e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005a90:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005a94:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a96:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8005a9a:	f47f af05 	bne.w	80058a8 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a9e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005aa0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005aa4:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8005aa8:	f47f aefe 	bne.w	80058a8 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005aac:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005aae:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005ab2:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8005ab6:	f47f aef7 	bne.w	80058a8 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005aba:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005abc:	0852      	lsrs	r2, r2, #1
 8005abe:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8005ac2:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005ac4:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8005ac8:	f47f aeee 	bne.w	80058a8 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005acc:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8005ace:	0852      	lsrs	r2, r2, #1
 8005ad0:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8005ad4:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ad6:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
    return HAL_ERROR;
 8005ada:	bf14      	ite	ne
 8005adc:	2001      	movne	r0, #1
 8005ade:	2000      	moveq	r0, #0
 8005ae0:	e6bd      	b.n	800585e <HAL_RCC_OscConfig+0x20a>
 8005ae2:	bf00      	nop
 8005ae4:	40021000 	.word	0x40021000
 8005ae8:	019f800c 	.word	0x019f800c

08005aec <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005aec:	4b18      	ldr	r3, [pc, #96]	; (8005b50 <HAL_RCC_GetSysClockFreq+0x64>)
 8005aee:	689a      	ldr	r2, [r3, #8]
 8005af0:	f002 020c 	and.w	r2, r2, #12
 8005af4:	2a04      	cmp	r2, #4
 8005af6:	d026      	beq.n	8005b46 <HAL_RCC_GetSysClockFreq+0x5a>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005af8:	689a      	ldr	r2, [r3, #8]
 8005afa:	f002 020c 	and.w	r2, r2, #12
 8005afe:	2a08      	cmp	r2, #8
 8005b00:	d023      	beq.n	8005b4a <HAL_RCC_GetSysClockFreq+0x5e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005b02:	689a      	ldr	r2, [r3, #8]
 8005b04:	f002 020c 	and.w	r2, r2, #12
 8005b08:	2a0c      	cmp	r2, #12
 8005b0a:	d001      	beq.n	8005b10 <HAL_RCC_GetSysClockFreq+0x24>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 8005b0c:	2000      	movs	r0, #0
  }

  return sysclockfreq;
}
 8005b0e:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005b10:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005b12:	68da      	ldr	r2, [r3, #12]
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b14:	68d8      	ldr	r0, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005b16:	f001 0103 	and.w	r1, r1, #3
    switch (pllsource)
 8005b1a:	2903      	cmp	r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005b1c:	f3c2 1203 	ubfx	r2, r2, #4, #4
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b20:	f3c0 2006 	ubfx	r0, r0, #8, #7
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b24:	bf0c      	ite	eq
 8005b26:	4b0b      	ldreq	r3, [pc, #44]	; (8005b54 <HAL_RCC_GetSysClockFreq+0x68>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b28:	4b0b      	ldrne	r3, [pc, #44]	; (8005b58 <HAL_RCC_GetSysClockFreq+0x6c>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005b2a:	3201      	adds	r2, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b30:	fb03 f000 	mul.w	r0, r3, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005b34:	4b06      	ldr	r3, [pc, #24]	; (8005b50 <HAL_RCC_GetSysClockFreq+0x64>)
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8005b3c:	3301      	adds	r3, #1
 8005b3e:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8005b40:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8005b44:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8005b46:	4804      	ldr	r0, [pc, #16]	; (8005b58 <HAL_RCC_GetSysClockFreq+0x6c>)
 8005b48:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8005b4a:	4802      	ldr	r0, [pc, #8]	; (8005b54 <HAL_RCC_GetSysClockFreq+0x68>)
 8005b4c:	4770      	bx	lr
 8005b4e:	bf00      	nop
 8005b50:	40021000 	.word	0x40021000
 8005b54:	016e3600 	.word	0x016e3600
 8005b58:	00f42400 	.word	0x00f42400

08005b5c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8005b5c:	2800      	cmp	r0, #0
 8005b5e:	f000 80ee 	beq.w	8005d3e <HAL_RCC_ClockConfig+0x1e2>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b62:	4a78      	ldr	r2, [pc, #480]	; (8005d44 <HAL_RCC_ClockConfig+0x1e8>)
{
 8005b64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b68:	6813      	ldr	r3, [r2, #0]
 8005b6a:	f003 030f 	and.w	r3, r3, #15
 8005b6e:	428b      	cmp	r3, r1
 8005b70:	460d      	mov	r5, r1
 8005b72:	4604      	mov	r4, r0
 8005b74:	d20c      	bcs.n	8005b90 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b76:	6813      	ldr	r3, [r2, #0]
 8005b78:	f023 030f 	bic.w	r3, r3, #15
 8005b7c:	430b      	orrs	r3, r1
 8005b7e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b80:	6813      	ldr	r3, [r2, #0]
 8005b82:	f003 030f 	and.w	r3, r3, #15
 8005b86:	428b      	cmp	r3, r1
 8005b88:	d002      	beq.n	8005b90 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8005b8a:	2001      	movs	r0, #1
}
 8005b8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b90:	6823      	ldr	r3, [r4, #0]
 8005b92:	07df      	lsls	r7, r3, #31
 8005b94:	d569      	bpl.n	8005c6a <HAL_RCC_ClockConfig+0x10e>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b96:	6867      	ldr	r7, [r4, #4]
 8005b98:	2f03      	cmp	r7, #3
 8005b9a:	f000 80a0 	beq.w	8005cde <HAL_RCC_ClockConfig+0x182>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b9e:	4b6a      	ldr	r3, [pc, #424]	; (8005d48 <HAL_RCC_ClockConfig+0x1ec>)
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ba0:	2f02      	cmp	r7, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005ba2:	681b      	ldr	r3, [r3, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ba4:	f000 8097 	beq.w	8005cd6 <HAL_RCC_ClockConfig+0x17a>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ba8:	055b      	lsls	r3, r3, #21
 8005baa:	d5ee      	bpl.n	8005b8a <HAL_RCC_ClockConfig+0x2e>
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005bac:	f7ff ff9e 	bl	8005aec <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 8005bb0:	4b66      	ldr	r3, [pc, #408]	; (8005d4c <HAL_RCC_ClockConfig+0x1f0>)
 8005bb2:	4298      	cmp	r0, r3
 8005bb4:	f240 80c0 	bls.w	8005d38 <HAL_RCC_ClockConfig+0x1dc>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005bb8:	4a63      	ldr	r2, [pc, #396]	; (8005d48 <HAL_RCC_ClockConfig+0x1ec>)
 8005bba:	6893      	ldr	r3, [r2, #8]
 8005bbc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005bc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bc4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005bc6:	f04f 0980 	mov.w	r9, #128	; 0x80
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005bca:	4e5f      	ldr	r6, [pc, #380]	; (8005d48 <HAL_RCC_ClockConfig+0x1ec>)
 8005bcc:	68b3      	ldr	r3, [r6, #8]
 8005bce:	f023 0303 	bic.w	r3, r3, #3
 8005bd2:	433b      	orrs	r3, r7
 8005bd4:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8005bd6:	f7fe fb01 	bl	80041dc <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bda:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8005bde:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005be0:	e004      	b.n	8005bec <HAL_RCC_ClockConfig+0x90>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005be2:	f7fe fafb 	bl	80041dc <HAL_GetTick>
 8005be6:	1bc0      	subs	r0, r0, r7
 8005be8:	4540      	cmp	r0, r8
 8005bea:	d871      	bhi.n	8005cd0 <HAL_RCC_ClockConfig+0x174>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bec:	68b3      	ldr	r3, [r6, #8]
 8005bee:	6862      	ldr	r2, [r4, #4]
 8005bf0:	f003 030c 	and.w	r3, r3, #12
 8005bf4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8005bf8:	d1f3      	bne.n	8005be2 <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bfa:	6823      	ldr	r3, [r4, #0]
 8005bfc:	079f      	lsls	r7, r3, #30
 8005bfe:	d436      	bmi.n	8005c6e <HAL_RCC_ClockConfig+0x112>
    if(hpre == RCC_SYSCLK_DIV2)
 8005c00:	f1b9 0f00 	cmp.w	r9, #0
 8005c04:	d003      	beq.n	8005c0e <HAL_RCC_ClockConfig+0xb2>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005c06:	68b3      	ldr	r3, [r6, #8]
 8005c08:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c0c:	60b3      	str	r3, [r6, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005c0e:	4e4d      	ldr	r6, [pc, #308]	; (8005d44 <HAL_RCC_ClockConfig+0x1e8>)
 8005c10:	6833      	ldr	r3, [r6, #0]
 8005c12:	f003 030f 	and.w	r3, r3, #15
 8005c16:	42ab      	cmp	r3, r5
 8005c18:	d846      	bhi.n	8005ca8 <HAL_RCC_ClockConfig+0x14c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c1a:	6823      	ldr	r3, [r4, #0]
 8005c1c:	075a      	lsls	r2, r3, #29
 8005c1e:	d506      	bpl.n	8005c2e <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c20:	4949      	ldr	r1, [pc, #292]	; (8005d48 <HAL_RCC_ClockConfig+0x1ec>)
 8005c22:	68e0      	ldr	r0, [r4, #12]
 8005c24:	688a      	ldr	r2, [r1, #8]
 8005c26:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005c2a:	4302      	orrs	r2, r0
 8005c2c:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c2e:	071b      	lsls	r3, r3, #28
 8005c30:	d507      	bpl.n	8005c42 <HAL_RCC_ClockConfig+0xe6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c32:	4a45      	ldr	r2, [pc, #276]	; (8005d48 <HAL_RCC_ClockConfig+0x1ec>)
 8005c34:	6921      	ldr	r1, [r4, #16]
 8005c36:	6893      	ldr	r3, [r2, #8]
 8005c38:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8005c3c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005c40:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005c42:	f7ff ff53 	bl	8005aec <HAL_RCC_GetSysClockFreq>
 8005c46:	4a40      	ldr	r2, [pc, #256]	; (8005d48 <HAL_RCC_ClockConfig+0x1ec>)
 8005c48:	4c41      	ldr	r4, [pc, #260]	; (8005d50 <HAL_RCC_ClockConfig+0x1f4>)
 8005c4a:	6892      	ldr	r2, [r2, #8]
 8005c4c:	4941      	ldr	r1, [pc, #260]	; (8005d54 <HAL_RCC_ClockConfig+0x1f8>)
 8005c4e:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8005c52:	4603      	mov	r3, r0
 8005c54:	5ca2      	ldrb	r2, [r4, r2]
  return HAL_InitTick(uwTickPrio);
 8005c56:	4840      	ldr	r0, [pc, #256]	; (8005d58 <HAL_RCC_ClockConfig+0x1fc>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005c58:	f002 021f 	and.w	r2, r2, #31
 8005c5c:	40d3      	lsrs	r3, r2
 8005c5e:	600b      	str	r3, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 8005c60:	6800      	ldr	r0, [r0, #0]
}
 8005c62:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 8005c66:	f7fe ba6f 	b.w	8004148 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c6a:	079e      	lsls	r6, r3, #30
 8005c6c:	d5cf      	bpl.n	8005c0e <HAL_RCC_ClockConfig+0xb2>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c6e:	0758      	lsls	r0, r3, #29
 8005c70:	d504      	bpl.n	8005c7c <HAL_RCC_ClockConfig+0x120>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c72:	4935      	ldr	r1, [pc, #212]	; (8005d48 <HAL_RCC_ClockConfig+0x1ec>)
 8005c74:	688a      	ldr	r2, [r1, #8]
 8005c76:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8005c7a:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c7c:	0719      	lsls	r1, r3, #28
 8005c7e:	d506      	bpl.n	8005c8e <HAL_RCC_ClockConfig+0x132>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005c80:	4a31      	ldr	r2, [pc, #196]	; (8005d48 <HAL_RCC_ClockConfig+0x1ec>)
 8005c82:	6893      	ldr	r3, [r2, #8]
 8005c84:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005c88:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005c8c:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c8e:	4a2e      	ldr	r2, [pc, #184]	; (8005d48 <HAL_RCC_ClockConfig+0x1ec>)
 8005c90:	68a1      	ldr	r1, [r4, #8]
 8005c92:	6893      	ldr	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005c94:	4e2b      	ldr	r6, [pc, #172]	; (8005d44 <HAL_RCC_ClockConfig+0x1e8>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c9a:	430b      	orrs	r3, r1
 8005c9c:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005c9e:	6833      	ldr	r3, [r6, #0]
 8005ca0:	f003 030f 	and.w	r3, r3, #15
 8005ca4:	42ab      	cmp	r3, r5
 8005ca6:	d9b8      	bls.n	8005c1a <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ca8:	6833      	ldr	r3, [r6, #0]
 8005caa:	f023 030f 	bic.w	r3, r3, #15
 8005cae:	432b      	orrs	r3, r5
 8005cb0:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8005cb2:	f7fe fa93 	bl	80041dc <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cb6:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8005cba:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cbc:	6833      	ldr	r3, [r6, #0]
 8005cbe:	f003 030f 	and.w	r3, r3, #15
 8005cc2:	42ab      	cmp	r3, r5
 8005cc4:	d0a9      	beq.n	8005c1a <HAL_RCC_ClockConfig+0xbe>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cc6:	f7fe fa89 	bl	80041dc <HAL_GetTick>
 8005cca:	1bc0      	subs	r0, r0, r7
 8005ccc:	4540      	cmp	r0, r8
 8005cce:	d9f5      	bls.n	8005cbc <HAL_RCC_ClockConfig+0x160>
        return HAL_TIMEOUT;
 8005cd0:	2003      	movs	r0, #3
}
 8005cd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005cd6:	039a      	lsls	r2, r3, #14
 8005cd8:	f53f af68 	bmi.w	8005bac <HAL_RCC_ClockConfig+0x50>
 8005cdc:	e755      	b.n	8005b8a <HAL_RCC_ClockConfig+0x2e>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005cde:	4a1a      	ldr	r2, [pc, #104]	; (8005d48 <HAL_RCC_ClockConfig+0x1ec>)
 8005ce0:	6811      	ldr	r1, [r2, #0]
 8005ce2:	0188      	lsls	r0, r1, #6
 8005ce4:	f57f af51 	bpl.w	8005b8a <HAL_RCC_ClockConfig+0x2e>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005ce8:	68d0      	ldr	r0, [r2, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005cea:	68d1      	ldr	r1, [r2, #12]
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005cec:	68d2      	ldr	r2, [r2, #12]
      if(pllfreq > 80000000U)
 8005cee:	4e17      	ldr	r6, [pc, #92]	; (8005d4c <HAL_RCC_ClockConfig+0x1f0>)
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005cf0:	f000 0003 	and.w	r0, r0, #3
  switch (pllsource)
 8005cf4:	2803      	cmp	r0, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005cf6:	f3c1 1103 	ubfx	r1, r1, #4, #4
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005cfa:	bf0c      	ite	eq
 8005cfc:	4817      	ldreq	r0, [pc, #92]	; (8005d5c <HAL_RCC_ClockConfig+0x200>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005cfe:	4818      	ldrne	r0, [pc, #96]	; (8005d60 <HAL_RCC_ClockConfig+0x204>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005d00:	3101      	adds	r1, #1
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005d02:	fbb0 f1f1 	udiv	r1, r0, r1
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005d06:	4810      	ldr	r0, [pc, #64]	; (8005d48 <HAL_RCC_ClockConfig+0x1ec>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005d08:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8005d0c:	fb01 f202 	mul.w	r2, r1, r2
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005d10:	68c1      	ldr	r1, [r0, #12]
 8005d12:	f3c1 6141 	ubfx	r1, r1, #25, #2
 8005d16:	3101      	adds	r1, #1
 8005d18:	0049      	lsls	r1, r1, #1
  sysclockfreq = pllvco/pllr;
 8005d1a:	fbb2 f2f1 	udiv	r2, r2, r1
      if(pllfreq > 80000000U)
 8005d1e:	42b2      	cmp	r2, r6
 8005d20:	d90a      	bls.n	8005d38 <HAL_RCC_ClockConfig+0x1dc>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005d22:	6882      	ldr	r2, [r0, #8]
 8005d24:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 8005d28:	f43f af46 	beq.w	8005bb8 <HAL_RCC_ClockConfig+0x5c>
 8005d2c:	0799      	lsls	r1, r3, #30
 8005d2e:	d503      	bpl.n	8005d38 <HAL_RCC_ClockConfig+0x1dc>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005d30:	68a3      	ldr	r3, [r4, #8]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	f43f af40 	beq.w	8005bb8 <HAL_RCC_ClockConfig+0x5c>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005d38:	f04f 0900 	mov.w	r9, #0
 8005d3c:	e745      	b.n	8005bca <HAL_RCC_ClockConfig+0x6e>
    return HAL_ERROR;
 8005d3e:	2001      	movs	r0, #1
}
 8005d40:	4770      	bx	lr
 8005d42:	bf00      	nop
 8005d44:	40022000 	.word	0x40022000
 8005d48:	40021000 	.word	0x40021000
 8005d4c:	04c4b400 	.word	0x04c4b400
 8005d50:	08009788 	.word	0x08009788
 8005d54:	2000043c 	.word	0x2000043c
 8005d58:	20000444 	.word	0x20000444
 8005d5c:	016e3600 	.word	0x016e3600
 8005d60:	00f42400 	.word	0x00f42400

08005d64 <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 8005d64:	4b01      	ldr	r3, [pc, #4]	; (8005d6c <HAL_RCC_GetHCLKFreq+0x8>)
}
 8005d66:	6818      	ldr	r0, [r3, #0]
 8005d68:	4770      	bx	lr
 8005d6a:	bf00      	nop
 8005d6c:	2000043c 	.word	0x2000043c

08005d70 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005d70:	4b05      	ldr	r3, [pc, #20]	; (8005d88 <HAL_RCC_GetPCLK1Freq+0x18>)
 8005d72:	4a06      	ldr	r2, [pc, #24]	; (8005d8c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005d74:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8005d76:	4906      	ldr	r1, [pc, #24]	; (8005d90 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005d78:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8005d7c:	6808      	ldr	r0, [r1, #0]
 8005d7e:	5cd3      	ldrb	r3, [r2, r3]
 8005d80:	f003 031f 	and.w	r3, r3, #31
}
 8005d84:	40d8      	lsrs	r0, r3
 8005d86:	4770      	bx	lr
 8005d88:	40021000 	.word	0x40021000
 8005d8c:	08009798 	.word	0x08009798
 8005d90:	2000043c 	.word	0x2000043c

08005d94 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005d94:	4b05      	ldr	r3, [pc, #20]	; (8005dac <HAL_RCC_GetPCLK2Freq+0x18>)
 8005d96:	4a06      	ldr	r2, [pc, #24]	; (8005db0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8005d98:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8005d9a:	4906      	ldr	r1, [pc, #24]	; (8005db4 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005d9c:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8005da0:	6808      	ldr	r0, [r1, #0]
 8005da2:	5cd3      	ldrb	r3, [r2, r3]
 8005da4:	f003 031f 	and.w	r3, r3, #31
}
 8005da8:	40d8      	lsrs	r0, r3
 8005daa:	4770      	bx	lr
 8005dac:	40021000 	.word	0x40021000
 8005db0:	08009798 	.word	0x08009798
 8005db4:	2000043c 	.word	0x2000043c

08005db8 <HAL_RCC_EnableCSS>:
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8005db8:	4a02      	ldr	r2, [pc, #8]	; (8005dc4 <HAL_RCC_EnableCSS+0xc>)
 8005dba:	6813      	ldr	r3, [r2, #0]
 8005dbc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005dc0:	6013      	str	r3, [r2, #0]
}
 8005dc2:	4770      	bx	lr
 8005dc4:	40021000 	.word	0x40021000

08005dc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005dcc:	6803      	ldr	r3, [r0, #0]
{
 8005dce:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005dd0:	f413 2000 	ands.w	r0, r3, #524288	; 0x80000
{
 8005dd4:	b082      	sub	sp, #8
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005dd6:	d056      	beq.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0xbe>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005dd8:	4bac      	ldr	r3, [pc, #688]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005dda:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005ddc:	00d5      	lsls	r5, r2, #3
 8005dde:	f140 813e 	bpl.w	800605e <HAL_RCCEx_PeriphCLKConfig+0x296>
    FlagStatus       pwrclkchanged = RESET;
 8005de2:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005de4:	4daa      	ldr	r5, [pc, #680]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8005de6:	682b      	ldr	r3, [r5, #0]
 8005de8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dec:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005dee:	f7fe f9f5 	bl	80041dc <HAL_GetTick>
 8005df2:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005df4:	e005      	b.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005df6:	f7fe f9f1 	bl	80041dc <HAL_GetTick>
 8005dfa:	1b83      	subs	r3, r0, r6
 8005dfc:	2b02      	cmp	r3, #2
 8005dfe:	f200 8139 	bhi.w	8006074 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e02:	682b      	ldr	r3, [r5, #0]
 8005e04:	05d8      	lsls	r0, r3, #23
 8005e06:	d5f6      	bpl.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005e08:	4da0      	ldr	r5, [pc, #640]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005e0a:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005e0e:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8005e12:	d027      	beq.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8005e14:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d025      	beq.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005e1a:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005e1e:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8005e22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e26:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005e2a:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8005e2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e32:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005e36:	f421 7340 	bic.w	r3, r1, #768	; 0x300
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005e3a:	07c9      	lsls	r1, r1, #31
        RCC->BDCR = tmpregister;
 8005e3c:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005e40:	f140 8148 	bpl.w	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e44:	f7fe f9ca 	bl	80041dc <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e48:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8005e4c:	4606      	mov	r6, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e4e:	e005      	b.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x94>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e50:	f7fe f9c4 	bl	80041dc <HAL_GetTick>
 8005e54:	1b80      	subs	r0, r0, r6
 8005e56:	4540      	cmp	r0, r8
 8005e58:	f200 810c 	bhi.w	8006074 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e5c:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8005e60:	079b      	lsls	r3, r3, #30
 8005e62:	d5f5      	bpl.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x88>
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005e64:	6d23      	ldr	r3, [r4, #80]	; 0x50
      }
      
      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e66:	4989      	ldr	r1, [pc, #548]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005e68:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005e6c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005e70:	4313      	orrs	r3, r2
 8005e72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005e76:	2000      	movs	r0, #0
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005e78:	b127      	cbz	r7, 8005e84 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e7a:	4a84      	ldr	r2, [pc, #528]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005e7c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005e7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e82:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005e84:	6823      	ldr	r3, [r4, #0]
 8005e86:	07dd      	lsls	r5, r3, #31
 8005e88:	d508      	bpl.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005e8a:	4980      	ldr	r1, [pc, #512]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005e8c:	6865      	ldr	r5, [r4, #4]
 8005e8e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005e92:	f022 0203 	bic.w	r2, r2, #3
 8005e96:	432a      	orrs	r2, r5
 8005e98:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005e9c:	0799      	lsls	r1, r3, #30
 8005e9e:	d508      	bpl.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005ea0:	497a      	ldr	r1, [pc, #488]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005ea2:	68a5      	ldr	r5, [r4, #8]
 8005ea4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005ea8:	f022 020c 	bic.w	r2, r2, #12
 8005eac:	432a      	orrs	r2, r5
 8005eae:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005eb2:	075a      	lsls	r2, r3, #29
 8005eb4:	d508      	bpl.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005eb6:	4975      	ldr	r1, [pc, #468]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005eb8:	68e5      	ldr	r5, [r4, #12]
 8005eba:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005ebe:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8005ec2:	432a      	orrs	r2, r5
 8005ec4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005ec8:	071f      	lsls	r7, r3, #28
 8005eca:	d508      	bpl.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x116>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005ecc:	496f      	ldr	r1, [pc, #444]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005ece:	6925      	ldr	r5, [r4, #16]
 8005ed0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005ed4:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005ed8:	432a      	orrs	r2, r5
 8005eda:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005ede:	06de      	lsls	r6, r3, #27
 8005ee0:	d508      	bpl.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005ee2:	496a      	ldr	r1, [pc, #424]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005ee4:	6965      	ldr	r5, [r4, #20]
 8005ee6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005eea:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005eee:	432a      	orrs	r2, r5
 8005ef0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005ef4:	069d      	lsls	r5, r3, #26
 8005ef6:	d508      	bpl.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005ef8:	4964      	ldr	r1, [pc, #400]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005efa:	69a5      	ldr	r5, [r4, #24]
 8005efc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005f00:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005f04:	432a      	orrs	r2, r5
 8005f06:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005f0a:	0659      	lsls	r1, r3, #25
 8005f0c:	d508      	bpl.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005f0e:	495f      	ldr	r1, [pc, #380]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005f10:	69e5      	ldr	r5, [r4, #28]
 8005f12:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005f16:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8005f1a:	432a      	orrs	r2, r5
 8005f1c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005f20:	061a      	lsls	r2, r3, #24
 8005f22:	d508      	bpl.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005f24:	4959      	ldr	r1, [pc, #356]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005f26:	6a25      	ldr	r5, [r4, #32]
 8005f28:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005f2c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8005f30:	432a      	orrs	r2, r5
 8005f32:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005f36:	05df      	lsls	r7, r3, #23
 8005f38:	d508      	bpl.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005f3a:	4954      	ldr	r1, [pc, #336]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005f3c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005f3e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005f42:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8005f46:	432a      	orrs	r2, r5
 8005f48:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005f4c:	039e      	lsls	r6, r3, #14
 8005f4e:	d508      	bpl.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005f50:	494e      	ldr	r1, [pc, #312]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005f52:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8005f54:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 8005f58:	f022 0203 	bic.w	r2, r2, #3
 8005f5c:	432a      	orrs	r2, r5
 8005f5e:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005f62:	059d      	lsls	r5, r3, #22
 8005f64:	d508      	bpl.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005f66:	4949      	ldr	r1, [pc, #292]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005f68:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8005f6a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005f6e:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8005f72:	432a      	orrs	r2, r5
 8005f74:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005f78:	0559      	lsls	r1, r3, #21
 8005f7a:	d50b      	bpl.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005f7c:	4943      	ldr	r1, [pc, #268]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005f7e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8005f80:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005f84:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8005f88:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005f8a:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005f8e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005f92:	d071      	beq.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005f94:	051a      	lsls	r2, r3, #20
 8005f96:	d50b      	bpl.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005f98:	493c      	ldr	r1, [pc, #240]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005f9a:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8005f9c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005fa0:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8005fa4:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005fa6:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005faa:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005fae:	d068      	beq.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005fb0:	04df      	lsls	r7, r3, #19
 8005fb2:	d50b      	bpl.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005fb4:	4935      	ldr	r1, [pc, #212]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005fb6:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8005fb8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005fbc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005fc0:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005fc2:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005fc6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005fca:	d063      	beq.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005fcc:	049e      	lsls	r6, r3, #18
 8005fce:	d50b      	bpl.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x220>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005fd0:	492e      	ldr	r1, [pc, #184]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005fd2:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8005fd4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005fd8:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8005fdc:	432a      	orrs	r2, r5

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005fde:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005fe2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005fe6:	d05a      	beq.n	800609e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005fe8:	045d      	lsls	r5, r3, #17
 8005fea:	d50b      	bpl.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005fec:	4927      	ldr	r1, [pc, #156]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005fee:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8005ff0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005ff4:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8005ff8:	432a      	orrs	r2, r5

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005ffa:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005ffe:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006002:	d051      	beq.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006004:	0419      	lsls	r1, r3, #16
 8006006:	d50b      	bpl.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006008:	4920      	ldr	r1, [pc, #128]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800600a:	6c65      	ldr	r5, [r4, #68]	; 0x44
 800600c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006010:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006014:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006016:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800601a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800601e:	d048      	beq.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006020:	03da      	lsls	r2, r3, #15
 8006022:	d50b      	bpl.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006024:	4919      	ldr	r1, [pc, #100]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006026:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8006028:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800602c:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8006030:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006032:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006036:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800603a:	d03f      	beq.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800603c:	035b      	lsls	r3, r3, #13
 800603e:	d50b      	bpl.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006040:	4a12      	ldr	r2, [pc, #72]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006042:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006044:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8006048:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800604c:	430b      	orrs	r3, r1

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800604e:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006052:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006056:	d036      	beq.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  }

#endif /* QUADSPI */

  return status;
}
 8006058:	b002      	add	sp, #8
 800605a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 800605e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006060:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006064:	659a      	str	r2, [r3, #88]	; 0x58
 8006066:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006068:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800606c:	9301      	str	r3, [sp, #4]
 800606e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8006070:	2701      	movs	r7, #1
 8006072:	e6b7      	b.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x1c>
      status = ret;
 8006074:	2003      	movs	r0, #3
 8006076:	e6ff      	b.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006078:	68ca      	ldr	r2, [r1, #12]
 800607a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800607e:	60ca      	str	r2, [r1, #12]
 8006080:	e788      	b.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006082:	68ca      	ldr	r2, [r1, #12]
 8006084:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006088:	60ca      	str	r2, [r1, #12]
 800608a:	e791      	b.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800608c:	40021000 	.word	0x40021000
 8006090:	40007000 	.word	0x40007000
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006094:	68ca      	ldr	r2, [r1, #12]
 8006096:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800609a:	60ca      	str	r2, [r1, #12]
 800609c:	e796      	b.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x204>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800609e:	68ca      	ldr	r2, [r1, #12]
 80060a0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80060a4:	60ca      	str	r2, [r1, #12]
 80060a6:	e79f      	b.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x220>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80060a8:	68ca      	ldr	r2, [r1, #12]
 80060aa:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80060ae:	60ca      	str	r2, [r1, #12]
 80060b0:	e7a8      	b.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x23c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80060b2:	68ca      	ldr	r2, [r1, #12]
 80060b4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80060b8:	60ca      	str	r2, [r1, #12]
 80060ba:	e7b1      	b.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x258>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80060bc:	68ca      	ldr	r2, [r1, #12]
 80060be:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80060c2:	60ca      	str	r2, [r1, #12]
 80060c4:	e7ba      	b.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x274>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80060c6:	68d3      	ldr	r3, [r2, #12]
 80060c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80060cc:	60d3      	str	r3, [r2, #12]
}
 80060ce:	b002      	add	sp, #8
 80060d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060d4:	4613      	mov	r3, r2
 80060d6:	e6c6      	b.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x9e>

080060d8 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060d8:	6a03      	ldr	r3, [r0, #32]
 80060da:	f023 0301 	bic.w	r3, r3, #1
 80060de:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060e0:	6a03      	ldr	r3, [r0, #32]
{
 80060e2:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060e4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060e6:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060e8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80060ea:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80060ee:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80060f2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80060f4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80060f6:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80060fa:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80060fc:	4d15      	ldr	r5, [pc, #84]	; (8006154 <TIM_OC1_SetConfig+0x7c>)
 80060fe:	42a8      	cmp	r0, r5
 8006100:	d013      	beq.n	800612a <TIM_OC1_SetConfig+0x52>
 8006102:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8006106:	42a8      	cmp	r0, r5
 8006108:	d00f      	beq.n	800612a <TIM_OC1_SetConfig+0x52>
 800610a:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800610e:	42a8      	cmp	r0, r5
 8006110:	d00b      	beq.n	800612a <TIM_OC1_SetConfig+0x52>
 8006112:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006116:	42a8      	cmp	r0, r5
 8006118:	d007      	beq.n	800612a <TIM_OC1_SetConfig+0x52>
 800611a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800611e:	42a8      	cmp	r0, r5
 8006120:	d003      	beq.n	800612a <TIM_OC1_SetConfig+0x52>
 8006122:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8006126:	42a8      	cmp	r0, r5
 8006128:	d10d      	bne.n	8006146 <TIM_OC1_SetConfig+0x6e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800612a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800612c:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8006130:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006132:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006136:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 800613a:	ea46 0c05 	orr.w	ip, r6, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 800613e:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8006142:	ea4c 0404 	orr.w	r4, ip, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006146:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8006148:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800614a:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 800614c:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR1 = OC_Config->Pulse;
 800614e:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8006150:	6203      	str	r3, [r0, #32]
}
 8006152:	4770      	bx	lr
 8006154:	40012c00 	.word	0x40012c00

08006158 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006158:	6a03      	ldr	r3, [r0, #32]
 800615a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800615e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006160:	6a03      	ldr	r3, [r0, #32]
{
 8006162:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006164:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006166:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006168:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800616a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800616e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8006172:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006174:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8006176:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800617a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800617e:	4d1c      	ldr	r5, [pc, #112]	; (80061f0 <TIM_OC3_SetConfig+0x98>)
 8006180:	42a8      	cmp	r0, r5
 8006182:	d017      	beq.n	80061b4 <TIM_OC3_SetConfig+0x5c>
 8006184:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8006188:	42a8      	cmp	r0, r5
 800618a:	d013      	beq.n	80061b4 <TIM_OC3_SetConfig+0x5c>
 800618c:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8006190:	42a8      	cmp	r0, r5
 8006192:	d025      	beq.n	80061e0 <TIM_OC3_SetConfig+0x88>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006194:	4d17      	ldr	r5, [pc, #92]	; (80061f4 <TIM_OC3_SetConfig+0x9c>)
 8006196:	42a8      	cmp	r0, r5
 8006198:	d013      	beq.n	80061c2 <TIM_OC3_SetConfig+0x6a>
 800619a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800619e:	42a8      	cmp	r0, r5
 80061a0:	d00f      	beq.n	80061c2 <TIM_OC3_SetConfig+0x6a>
 80061a2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80061a6:	42a8      	cmp	r0, r5
 80061a8:	d00b      	beq.n	80061c2 <TIM_OC3_SetConfig+0x6a>
 80061aa:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80061ae:	42a8      	cmp	r0, r5
 80061b0:	d10f      	bne.n	80061d2 <TIM_OC3_SetConfig+0x7a>
 80061b2:	e006      	b.n	80061c2 <TIM_OC3_SetConfig+0x6a>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80061b4:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80061b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80061ba:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 80061be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80061c2:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80061c6:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80061ca:	ea46 0c05 	orr.w	ip, r6, r5
 80061ce:	ea44 140c 	orr.w	r4, r4, ip, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80061d2:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80061d4:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 80061d6:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80061d8:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR3 = OC_Config->Pulse;
 80061da:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 80061dc:	6203      	str	r3, [r0, #32]
}
 80061de:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80061e0:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80061e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80061e6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 80061ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061ee:	e7d1      	b.n	8006194 <TIM_OC3_SetConfig+0x3c>
 80061f0:	40012c00 	.word	0x40012c00
 80061f4:	40014000 	.word	0x40014000

080061f8 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80061f8:	6a03      	ldr	r3, [r0, #32]
 80061fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80061fe:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006200:	6a03      	ldr	r3, [r0, #32]
{
 8006202:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006204:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006206:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006208:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800620a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800620e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006212:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006216:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8006218:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800621c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006220:	4d1c      	ldr	r5, [pc, #112]	; (8006294 <TIM_OC4_SetConfig+0x9c>)
 8006222:	42a8      	cmp	r0, r5
 8006224:	d017      	beq.n	8006256 <TIM_OC4_SetConfig+0x5e>
 8006226:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800622a:	42a8      	cmp	r0, r5
 800622c:	d013      	beq.n	8006256 <TIM_OC4_SetConfig+0x5e>
 800622e:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8006232:	42a8      	cmp	r0, r5
 8006234:	d025      	beq.n	8006282 <TIM_OC4_SetConfig+0x8a>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006236:	4d18      	ldr	r5, [pc, #96]	; (8006298 <TIM_OC4_SetConfig+0xa0>)
 8006238:	42a8      	cmp	r0, r5
 800623a:	d013      	beq.n	8006264 <TIM_OC4_SetConfig+0x6c>
 800623c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006240:	42a8      	cmp	r0, r5
 8006242:	d00f      	beq.n	8006264 <TIM_OC4_SetConfig+0x6c>
 8006244:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006248:	42a8      	cmp	r0, r5
 800624a:	d00b      	beq.n	8006264 <TIM_OC4_SetConfig+0x6c>
 800624c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8006250:	42a8      	cmp	r0, r5
 8006252:	d10f      	bne.n	8006274 <TIM_OC4_SetConfig+0x7c>
 8006254:	e006      	b.n	8006264 <TIM_OC4_SetConfig+0x6c>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006256:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 8006258:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800625c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 8006260:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 &= ~TIM_CR2_OIS4N;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006264:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006268:	f424 4440 	bic.w	r4, r4, #49152	; 0xc000
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800626c:	ea46 0c05 	orr.w	ip, r6, r5
 8006270:	ea44 148c 	orr.w	r4, r4, ip, lsl #6

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006274:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8006276:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8006278:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 800627a:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR4 = OC_Config->Pulse;
 800627c:	6401      	str	r1, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 800627e:	6203      	str	r3, [r0, #32]
}
 8006280:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006282:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 8006284:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006288:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 800628c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006290:	e7d1      	b.n	8006236 <TIM_OC4_SetConfig+0x3e>
 8006292:	bf00      	nop
 8006294:	40012c00 	.word	0x40012c00
 8006298:	40014000 	.word	0x40014000

0800629c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800629c:	2800      	cmp	r0, #0
 800629e:	f000 808c 	beq.w	80063ba <HAL_TIM_Base_Init+0x11e>
{
 80062a2:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80062a4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80062a8:	4604      	mov	r4, r0
 80062aa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d078      	beq.n	80063a4 <HAL_TIM_Base_Init+0x108>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062b2:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062b4:	4944      	ldr	r1, [pc, #272]	; (80063c8 <HAL_TIM_Base_Init+0x12c>)
  htim->State = HAL_TIM_STATE_BUSY;
 80062b6:	2302      	movs	r3, #2
 80062b8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062bc:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 80062be:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062c0:	d05c      	beq.n	800637c <HAL_TIM_Base_Init+0xe0>
 80062c2:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80062c6:	d02c      	beq.n	8006322 <HAL_TIM_Base_Init+0x86>
 80062c8:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 80062cc:	428a      	cmp	r2, r1
 80062ce:	d028      	beq.n	8006322 <HAL_TIM_Base_Init+0x86>
 80062d0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80062d4:	428a      	cmp	r2, r1
 80062d6:	d024      	beq.n	8006322 <HAL_TIM_Base_Init+0x86>
 80062d8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80062dc:	428a      	cmp	r2, r1
 80062de:	d020      	beq.n	8006322 <HAL_TIM_Base_Init+0x86>
 80062e0:	f501 3194 	add.w	r1, r1, #75776	; 0x12800
 80062e4:	428a      	cmp	r2, r1
 80062e6:	d049      	beq.n	800637c <HAL_TIM_Base_Init+0xe0>
 80062e8:	f501 51e0 	add.w	r1, r1, #7168	; 0x1c00
 80062ec:	428a      	cmp	r2, r1
 80062ee:	d066      	beq.n	80063be <HAL_TIM_Base_Init+0x122>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062f0:	4936      	ldr	r1, [pc, #216]	; (80063cc <HAL_TIM_Base_Init+0x130>)
 80062f2:	428a      	cmp	r2, r1
 80062f4:	d05b      	beq.n	80063ae <HAL_TIM_Base_Init+0x112>
 80062f6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80062fa:	428a      	cmp	r2, r1
 80062fc:	d057      	beq.n	80063ae <HAL_TIM_Base_Init+0x112>
 80062fe:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006302:	428a      	cmp	r2, r1
 8006304:	d053      	beq.n	80063ae <HAL_TIM_Base_Init+0x112>
 8006306:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800630a:	428a      	cmp	r2, r1
 800630c:	d04f      	beq.n	80063ae <HAL_TIM_Base_Init+0x112>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800630e:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006310:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006312:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006316:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8006318:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 800631a:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800631c:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800631e:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006320:	e010      	b.n	8006344 <HAL_TIM_Base_Init+0xa8>
    tmpcr1 |= Structure->CounterMode;
 8006322:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006324:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800632a:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 800632c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006330:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006332:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006334:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006338:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800633a:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 800633c:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800633e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006340:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006342:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8006344:	2301      	movs	r3, #1
 8006346:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006348:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800634c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8006350:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8006354:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8006358:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800635c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006360:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006364:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8006368:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800636c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8006370:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8006374:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8006378:	2000      	movs	r0, #0
}
 800637a:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 800637c:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800637e:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006380:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006384:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8006386:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800638a:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800638c:	69a1      	ldr	r1, [r4, #24]
 800638e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006392:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8006394:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006396:	68e3      	ldr	r3, [r4, #12]
 8006398:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800639a:	6863      	ldr	r3, [r4, #4]
 800639c:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800639e:	6963      	ldr	r3, [r4, #20]
 80063a0:	6313      	str	r3, [r2, #48]	; 0x30
 80063a2:	e7cf      	b.n	8006344 <HAL_TIM_Base_Init+0xa8>
    htim->Lock = HAL_UNLOCKED;
 80063a4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80063a8:	f7fd fc02 	bl	8003bb0 <HAL_TIM_Base_MspInit>
 80063ac:	e781      	b.n	80062b2 <HAL_TIM_Base_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063ae:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063b0:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 80063b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063b6:	4303      	orrs	r3, r0
 80063b8:	e7e9      	b.n	800638e <HAL_TIM_Base_Init+0xf2>
    return HAL_ERROR;
 80063ba:	2001      	movs	r0, #1
}
 80063bc:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 80063be:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80063c4:	430b      	orrs	r3, r1
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063c6:	e793      	b.n	80062f0 <HAL_TIM_Base_Init+0x54>
 80063c8:	40012c00 	.word	0x40012c00
 80063cc:	40014000 	.word	0x40014000

080063d0 <HAL_TIM_PWM_MspInit>:
 80063d0:	4770      	bx	lr
 80063d2:	bf00      	nop

080063d4 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80063d4:	2800      	cmp	r0, #0
 80063d6:	f000 808c 	beq.w	80064f2 <HAL_TIM_PWM_Init+0x11e>
{
 80063da:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80063dc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80063e0:	4604      	mov	r4, r0
 80063e2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d078      	beq.n	80064dc <HAL_TIM_PWM_Init+0x108>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063ea:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063ec:	4944      	ldr	r1, [pc, #272]	; (8006500 <HAL_TIM_PWM_Init+0x12c>)
  htim->State = HAL_TIM_STATE_BUSY;
 80063ee:	2302      	movs	r3, #2
 80063f0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063f4:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 80063f6:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063f8:	d05c      	beq.n	80064b4 <HAL_TIM_PWM_Init+0xe0>
 80063fa:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80063fe:	d02c      	beq.n	800645a <HAL_TIM_PWM_Init+0x86>
 8006400:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8006404:	428a      	cmp	r2, r1
 8006406:	d028      	beq.n	800645a <HAL_TIM_PWM_Init+0x86>
 8006408:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800640c:	428a      	cmp	r2, r1
 800640e:	d024      	beq.n	800645a <HAL_TIM_PWM_Init+0x86>
 8006410:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006414:	428a      	cmp	r2, r1
 8006416:	d020      	beq.n	800645a <HAL_TIM_PWM_Init+0x86>
 8006418:	f501 3194 	add.w	r1, r1, #75776	; 0x12800
 800641c:	428a      	cmp	r2, r1
 800641e:	d049      	beq.n	80064b4 <HAL_TIM_PWM_Init+0xe0>
 8006420:	f501 51e0 	add.w	r1, r1, #7168	; 0x1c00
 8006424:	428a      	cmp	r2, r1
 8006426:	d066      	beq.n	80064f6 <HAL_TIM_PWM_Init+0x122>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006428:	4936      	ldr	r1, [pc, #216]	; (8006504 <HAL_TIM_PWM_Init+0x130>)
 800642a:	428a      	cmp	r2, r1
 800642c:	d05b      	beq.n	80064e6 <HAL_TIM_PWM_Init+0x112>
 800642e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006432:	428a      	cmp	r2, r1
 8006434:	d057      	beq.n	80064e6 <HAL_TIM_PWM_Init+0x112>
 8006436:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800643a:	428a      	cmp	r2, r1
 800643c:	d053      	beq.n	80064e6 <HAL_TIM_PWM_Init+0x112>
 800643e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006442:	428a      	cmp	r2, r1
 8006444:	d04f      	beq.n	80064e6 <HAL_TIM_PWM_Init+0x112>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006446:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006448:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800644a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800644e:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8006450:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 8006452:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006454:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006456:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006458:	e010      	b.n	800647c <HAL_TIM_PWM_Init+0xa8>
    tmpcr1 |= Structure->CounterMode;
 800645a:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800645c:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800645e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006462:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8006464:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006468:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800646a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800646c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006470:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006472:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8006474:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8006476:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006478:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800647a:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 800647c:	2301      	movs	r3, #1
 800647e:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006480:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006484:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8006488:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800648c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8006490:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8006494:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006498:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800649c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80064a0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80064a4:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80064a8:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80064ac:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80064b0:	2000      	movs	r0, #0
}
 80064b2:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 80064b4:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80064b6:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80064b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80064bc:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 80064be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80064c2:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064c4:	69a1      	ldr	r1, [r4, #24]
 80064c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064ca:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 80064cc:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064ce:	68e3      	ldr	r3, [r4, #12]
 80064d0:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80064d2:	6863      	ldr	r3, [r4, #4]
 80064d4:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80064d6:	6963      	ldr	r3, [r4, #20]
 80064d8:	6313      	str	r3, [r2, #48]	; 0x30
 80064da:	e7cf      	b.n	800647c <HAL_TIM_PWM_Init+0xa8>
    htim->Lock = HAL_UNLOCKED;
 80064dc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80064e0:	f7ff ff76 	bl	80063d0 <HAL_TIM_PWM_MspInit>
 80064e4:	e781      	b.n	80063ea <HAL_TIM_PWM_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80064e6:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064e8:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 80064ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80064ee:	4303      	orrs	r3, r0
 80064f0:	e7e9      	b.n	80064c6 <HAL_TIM_PWM_Init+0xf2>
    return HAL_ERROR;
 80064f2:	2001      	movs	r0, #1
}
 80064f4:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 80064f6:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80064f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80064fc:	430b      	orrs	r3, r1
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80064fe:	e793      	b.n	8006428 <HAL_TIM_PWM_Init+0x54>
 8006500:	40012c00 	.word	0x40012c00
 8006504:	40014000 	.word	0x40014000

08006508 <HAL_TIM_Encoder_Init>:
  if (htim == NULL)
 8006508:	2800      	cmp	r0, #0
 800650a:	f000 80a1 	beq.w	8006650 <HAL_TIM_Encoder_Init+0x148>
{
 800650e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8006510:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006514:	460d      	mov	r5, r1
 8006516:	4604      	mov	r4, r0
 8006518:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800651c:	2b00      	cmp	r3, #0
 800651e:	f000 8092 	beq.w	8006646 <HAL_TIM_Encoder_Init+0x13e>
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006522:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006524:	494e      	ldr	r1, [pc, #312]	; (8006660 <HAL_TIM_Encoder_Init+0x158>)
  htim->State = HAL_TIM_STATE_BUSY;
 8006526:	2202      	movs	r2, #2
 8006528:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800652c:	689a      	ldr	r2, [r3, #8]
 800652e:	f422 32a0 	bic.w	r2, r2, #81920	; 0x14000
 8006532:	f022 0207 	bic.w	r2, r2, #7
 8006536:	609a      	str	r2, [r3, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006538:	428b      	cmp	r3, r1
  tmpcr1 = TIMx->CR1;
 800653a:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800653c:	d06f      	beq.n	800661e <HAL_TIM_Encoder_Init+0x116>
 800653e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006542:	d023      	beq.n	800658c <HAL_TIM_Encoder_Init+0x84>
 8006544:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8006548:	428b      	cmp	r3, r1
 800654a:	d01f      	beq.n	800658c <HAL_TIM_Encoder_Init+0x84>
 800654c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006550:	428b      	cmp	r3, r1
 8006552:	d01b      	beq.n	800658c <HAL_TIM_Encoder_Init+0x84>
 8006554:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006558:	428b      	cmp	r3, r1
 800655a:	d017      	beq.n	800658c <HAL_TIM_Encoder_Init+0x84>
 800655c:	f501 3194 	add.w	r1, r1, #75776	; 0x12800
 8006560:	428b      	cmp	r3, r1
 8006562:	d05c      	beq.n	800661e <HAL_TIM_Encoder_Init+0x116>
 8006564:	f501 51e0 	add.w	r1, r1, #7168	; 0x1c00
 8006568:	428b      	cmp	r3, r1
 800656a:	d073      	beq.n	8006654 <HAL_TIM_Encoder_Init+0x14c>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800656c:	493d      	ldr	r1, [pc, #244]	; (8006664 <HAL_TIM_Encoder_Init+0x15c>)
 800656e:	428b      	cmp	r3, r1
 8006570:	d059      	beq.n	8006626 <HAL_TIM_Encoder_Init+0x11e>
 8006572:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006576:	428b      	cmp	r3, r1
 8006578:	d055      	beq.n	8006626 <HAL_TIM_Encoder_Init+0x11e>
 800657a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800657e:	428b      	cmp	r3, r1
 8006580:	d051      	beq.n	8006626 <HAL_TIM_Encoder_Init+0x11e>
 8006582:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006586:	428b      	cmp	r3, r1
 8006588:	d108      	bne.n	800659c <HAL_TIM_Encoder_Init+0x94>
 800658a:	e04c      	b.n	8006626 <HAL_TIM_Encoder_Init+0x11e>
    tmpcr1 |= Structure->CounterMode;
 800658c:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800658e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006592:	430a      	orrs	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006594:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8006596:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800659a:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800659c:	69a1      	ldr	r1, [r4, #24]
 800659e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80065a2:	430a      	orrs	r2, r1
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065a4:	68e1      	ldr	r1, [r4, #12]
  TIMx->CR1 = tmpcr1;
 80065a6:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065a8:	62d9      	str	r1, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80065aa:	6862      	ldr	r2, [r4, #4]
 80065ac:	629a      	str	r2, [r3, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 80065ae:	2601      	movs	r6, #1
 80065b0:	615e      	str	r6, [r3, #20]
  tmpsmcr = htim->Instance->SMCR;
 80065b2:	6898      	ldr	r0, [r3, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 80065b4:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80065b6:	69af      	ldr	r7, [r5, #24]
 80065b8:	68a9      	ldr	r1, [r5, #8]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80065ba:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80065be:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80065c2:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 80065c6:	4311      	orrs	r1, r2
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80065c8:	692a      	ldr	r2, [r5, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80065ca:	69ef      	ldr	r7, [r5, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80065cc:	0112      	lsls	r2, r2, #4
 80065ce:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 80065d2:	68ef      	ldr	r7, [r5, #12]
 80065d4:	433a      	orrs	r2, r7
  tmpccer = htim->Instance->CCER;
 80065d6:	6a1f      	ldr	r7, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80065d8:	f027 0caa 	bic.w	ip, r7, #170	; 0xaa
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80065dc:	6a2f      	ldr	r7, [r5, #32]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80065de:	f421 417c 	bic.w	r1, r1, #64512	; 0xfc00
 80065e2:	f021 01fc 	bic.w	r1, r1, #252	; 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80065e6:	ea42 3207 	orr.w	r2, r2, r7, lsl #12
 80065ea:	430a      	orrs	r2, r1
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80065ec:	696f      	ldr	r7, [r5, #20]
 80065ee:	6869      	ldr	r1, [r5, #4]
  tmpsmcr |= sConfig->EncoderMode;
 80065f0:	682d      	ldr	r5, [r5, #0]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80065f2:	ea41 1107 	orr.w	r1, r1, r7, lsl #4
  tmpsmcr |= sConfig->EncoderMode;
 80065f6:	4328      	orrs	r0, r5
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80065f8:	ea41 010c 	orr.w	r1, r1, ip
  htim->Instance->SMCR = tmpsmcr;
 80065fc:	6098      	str	r0, [r3, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 80065fe:	619a      	str	r2, [r3, #24]
  htim->Instance->CCER = tmpccer;
 8006600:	6219      	str	r1, [r3, #32]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006602:	f884 6048 	strb.w	r6, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006606:	f884 603e 	strb.w	r6, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800660a:	f884 603f 	strb.w	r6, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800660e:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006612:	f884 6045 	strb.w	r6, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8006616:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
  return HAL_OK;
 800661a:	2000      	movs	r0, #0
}
 800661c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 |= Structure->CounterMode;
 800661e:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006620:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006624:	430a      	orrs	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006626:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8006628:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800662c:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800662e:	69a1      	ldr	r1, [r4, #24]
 8006630:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006634:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8006636:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006638:	68e2      	ldr	r2, [r4, #12]
 800663a:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800663c:	6862      	ldr	r2, [r4, #4]
 800663e:	629a      	str	r2, [r3, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8006640:	6962      	ldr	r2, [r4, #20]
 8006642:	631a      	str	r2, [r3, #48]	; 0x30
 8006644:	e7b3      	b.n	80065ae <HAL_TIM_Encoder_Init+0xa6>
    htim->Lock = HAL_UNLOCKED;
 8006646:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 800664a:	f7fd fac7 	bl	8003bdc <HAL_TIM_Encoder_MspInit>
 800664e:	e768      	b.n	8006522 <HAL_TIM_Encoder_Init+0x1a>
    return HAL_ERROR;
 8006650:	2001      	movs	r0, #1
}
 8006652:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8006654:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006656:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800665a:	430a      	orrs	r2, r1
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800665c:	e786      	b.n	800656c <HAL_TIM_Encoder_Init+0x64>
 800665e:	bf00      	nop
 8006660:	40012c00 	.word	0x40012c00
 8006664:	40014000 	.word	0x40014000

08006668 <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 8006668:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800666c:	2b01      	cmp	r3, #1
 800666e:	d072      	beq.n	8006756 <HAL_TIM_SlaveConfigSynchro+0xee>
 8006670:	4684      	mov	ip, r0
 8006672:	2201      	movs	r2, #1
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006674:	6800      	ldr	r0, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8006676:	2302      	movs	r3, #2
{
 8006678:	b410      	push	{r4}
  __HAL_LOCK(htim);
 800667a:	f88c 203c 	strb.w	r2, [ip, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800667e:	f88c 303d 	strb.w	r3, [ip, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8006682:	6882      	ldr	r2, [r0, #8]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006684:	684b      	ldr	r3, [r1, #4]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006686:	680c      	ldr	r4, [r1, #0]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006688:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800668c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006690:	431a      	orrs	r2, r3
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006692:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006696:	f022 0207 	bic.w	r2, r2, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800669a:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800669c:	2b60      	cmp	r3, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 800669e:	6082      	str	r2, [r0, #8]
  switch (sSlaveConfig->InputTrigger)
 80066a0:	d067      	beq.n	8006772 <HAL_TIM_SlaveConfigSynchro+0x10a>
 80066a2:	d816      	bhi.n	80066d2 <HAL_TIM_SlaveConfigSynchro+0x6a>
 80066a4:	2b40      	cmp	r3, #64	; 0x40
 80066a6:	d077      	beq.n	8006798 <HAL_TIM_SlaveConfigSynchro+0x130>
 80066a8:	d935      	bls.n	8006716 <HAL_TIM_SlaveConfigSynchro+0xae>
 80066aa:	2b50      	cmp	r3, #80	; 0x50
 80066ac:	d144      	bne.n	8006738 <HAL_TIM_SlaveConfigSynchro+0xd0>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80066ae:	6a03      	ldr	r3, [r0, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80066b0:	688a      	ldr	r2, [r1, #8]
 80066b2:	6909      	ldr	r1, [r1, #16]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80066b4:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 80066b8:	431a      	orrs	r2, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066ba:	6a03      	ldr	r3, [r0, #32]
 80066bc:	f023 0301 	bic.w	r3, r3, #1
 80066c0:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066c2:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80066c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80066c8:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80066cc:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80066ce:	6202      	str	r2, [r0, #32]
 80066d0:	e00f      	b.n	80066f2 <HAL_TIM_SlaveConfigSynchro+0x8a>
  switch (sSlaveConfig->InputTrigger)
 80066d2:	2b70      	cmp	r3, #112	; 0x70
 80066d4:	d041      	beq.n	800675a <HAL_TIM_SlaveConfigSynchro+0xf2>
 80066d6:	2b6f      	cmp	r3, #111	; 0x6f
 80066d8:	d92e      	bls.n	8006738 <HAL_TIM_SlaveConfigSynchro+0xd0>
 80066da:	4a34      	ldr	r2, [pc, #208]	; (80067ac <HAL_TIM_SlaveConfigSynchro+0x144>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d008      	beq.n	80066f2 <HAL_TIM_SlaveConfigSynchro+0x8a>
 80066e0:	d91f      	bls.n	8006722 <HAL_TIM_SlaveConfigSynchro+0xba>
 80066e2:	4a33      	ldr	r2, [pc, #204]	; (80067b0 <HAL_TIM_SlaveConfigSynchro+0x148>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d004      	beq.n	80066f2 <HAL_TIM_SlaveConfigSynchro+0x8a>
 80066e8:	3a10      	subs	r2, #16
 80066ea:	f023 0320 	bic.w	r3, r3, #32
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d122      	bne.n	8006738 <HAL_TIM_SlaveConfigSynchro+0xd0>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80066f2:	68c3      	ldr	r3, [r0, #12]
 80066f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066f8:	60c3      	str	r3, [r0, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80066fa:	68c3      	ldr	r3, [r0, #12]
  __HAL_UNLOCK(htim);
 80066fc:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 80066fe:	2101      	movs	r1, #1
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006700:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006704:	60c3      	str	r3, [r0, #12]
  htim->State = HAL_TIM_STATE_READY;
 8006706:	f88c 103d 	strb.w	r1, [ip, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800670a:	f88c 203c 	strb.w	r2, [ip, #60]	; 0x3c
  return HAL_OK;
 800670e:	4610      	mov	r0, r2
}
 8006710:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006714:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 8006716:	2b20      	cmp	r3, #32
 8006718:	d0eb      	beq.n	80066f2 <HAL_TIM_SlaveConfigSynchro+0x8a>
 800671a:	d90a      	bls.n	8006732 <HAL_TIM_SlaveConfigSynchro+0xca>
 800671c:	2b30      	cmp	r3, #48	; 0x30
 800671e:	d10b      	bne.n	8006738 <HAL_TIM_SlaveConfigSynchro+0xd0>
 8006720:	e7e7      	b.n	80066f2 <HAL_TIM_SlaveConfigSynchro+0x8a>
 8006722:	3a20      	subs	r2, #32
 8006724:	4293      	cmp	r3, r2
 8006726:	d0e4      	beq.n	80066f2 <HAL_TIM_SlaveConfigSynchro+0x8a>
 8006728:	d90f      	bls.n	800674a <HAL_TIM_SlaveConfigSynchro+0xe2>
 800672a:	4a22      	ldr	r2, [pc, #136]	; (80067b4 <HAL_TIM_SlaveConfigSynchro+0x14c>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d0e0      	beq.n	80066f2 <HAL_TIM_SlaveConfigSynchro+0x8a>
 8006730:	e002      	b.n	8006738 <HAL_TIM_SlaveConfigSynchro+0xd0>
 8006732:	f033 0310 	bics.w	r3, r3, #16
 8006736:	d0dc      	beq.n	80066f2 <HAL_TIM_SlaveConfigSynchro+0x8a>
    htim->State = HAL_TIM_STATE_READY;
 8006738:	2001      	movs	r0, #1
    __HAL_UNLOCK(htim);
 800673a:	2300      	movs	r3, #0
    htim->State = HAL_TIM_STATE_READY;
 800673c:	f88c 003d 	strb.w	r0, [ip, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8006740:	f88c 303c 	strb.w	r3, [ip, #60]	; 0x3c
}
 8006744:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006748:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 800674a:	f023 0310 	bic.w	r3, r3, #16
 800674e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006752:	d1f1      	bne.n	8006738 <HAL_TIM_SlaveConfigSynchro+0xd0>
 8006754:	e7cd      	b.n	80066f2 <HAL_TIM_SlaveConfigSynchro+0x8a>
  __HAL_LOCK(htim);
 8006756:	2002      	movs	r0, #2
}
 8006758:	4770      	bx	lr

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800675a:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
  tmpsmcr = TIMx->SMCR;
 800675e:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006760:	6909      	ldr	r1, [r1, #16]
 8006762:	4323      	orrs	r3, r4
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006764:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006768:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800676c:	4313      	orrs	r3, r2

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800676e:	6083      	str	r3, [r0, #8]
 8006770:	e7bf      	b.n	80066f2 <HAL_TIM_SlaveConfigSynchro+0x8a>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006772:	6a03      	ldr	r3, [r0, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006774:	688c      	ldr	r4, [r1, #8]
 8006776:	6909      	ldr	r1, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006778:	f023 0310 	bic.w	r3, r3, #16
 800677c:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800677e:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8006780:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006782:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006786:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800678a:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 800678e:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8006792:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8006794:	6203      	str	r3, [r0, #32]
 8006796:	e7ac      	b.n	80066f2 <HAL_TIM_SlaveConfigSynchro+0x8a>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8006798:	2c05      	cmp	r4, #5
 800679a:	d0cd      	beq.n	8006738 <HAL_TIM_SlaveConfigSynchro+0xd0>
 800679c:	f1b4 1f01 	cmp.w	r4, #65537	; 0x10001
 80067a0:	d0ca      	beq.n	8006738 <HAL_TIM_SlaveConfigSynchro+0xd0>
      tmpccer = htim->Instance->CCER;
 80067a2:	6a02      	ldr	r2, [r0, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80067a4:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80067a6:	6a03      	ldr	r3, [r0, #32]
 80067a8:	e788      	b.n	80066bc <HAL_TIM_SlaveConfigSynchro+0x54>
 80067aa:	bf00      	nop
 80067ac:	00100040 	.word	0x00100040
 80067b0:	00100060 	.word	0x00100060
 80067b4:	00100030 	.word	0x00100030

080067b8 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067b8:	6a03      	ldr	r3, [r0, #32]
 80067ba:	f023 0310 	bic.w	r3, r3, #16
 80067be:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80067c0:	6a03      	ldr	r3, [r0, #32]
{
 80067c2:	b470      	push	{r4, r5, r6}
  tmpcr2 =  TIMx->CR2;
 80067c4:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80067c6:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067c8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80067ca:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80067ce:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067d2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80067d6:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80067d8:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80067dc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80067e0:	4d1c      	ldr	r5, [pc, #112]	; (8006854 <TIM_OC2_SetConfig+0x9c>)
 80067e2:	42a8      	cmp	r0, r5
 80067e4:	d017      	beq.n	8006816 <TIM_OC2_SetConfig+0x5e>
 80067e6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80067ea:	42a8      	cmp	r0, r5
 80067ec:	d013      	beq.n	8006816 <TIM_OC2_SetConfig+0x5e>
 80067ee:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 80067f2:	42a8      	cmp	r0, r5
 80067f4:	d025      	beq.n	8006842 <TIM_OC2_SetConfig+0x8a>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067f6:	4d18      	ldr	r5, [pc, #96]	; (8006858 <TIM_OC2_SetConfig+0xa0>)
 80067f8:	42a8      	cmp	r0, r5
 80067fa:	d013      	beq.n	8006824 <TIM_OC2_SetConfig+0x6c>
 80067fc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006800:	42a8      	cmp	r0, r5
 8006802:	d00f      	beq.n	8006824 <TIM_OC2_SetConfig+0x6c>
 8006804:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006808:	42a8      	cmp	r0, r5
 800680a:	d00b      	beq.n	8006824 <TIM_OC2_SetConfig+0x6c>
 800680c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8006810:	42a8      	cmp	r0, r5
 8006812:	d10f      	bne.n	8006834 <TIM_OC2_SetConfig+0x7c>
 8006814:	e006      	b.n	8006824 <TIM_OC2_SetConfig+0x6c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006816:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8006818:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800681c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8006820:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006824:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006828:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800682c:	ea46 0c05 	orr.w	ip, r6, r5
 8006830:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 8006834:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8006836:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8006838:	6182      	str	r2, [r0, #24]
}
 800683a:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR2 = OC_Config->Pulse;
 800683c:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800683e:	6203      	str	r3, [r0, #32]
}
 8006840:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006842:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8006844:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006848:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 800684c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006850:	e7d1      	b.n	80067f6 <TIM_OC2_SetConfig+0x3e>
 8006852:	bf00      	nop
 8006854:	40012c00 	.word	0x40012c00
 8006858:	40014000 	.word	0x40014000

0800685c <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 800685c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006860:	2b01      	cmp	r3, #1
 8006862:	f000 80ff 	beq.w	8006a64 <HAL_TIM_PWM_ConfigChannel+0x208>
 8006866:	2301      	movs	r3, #1
{
 8006868:	b570      	push	{r4, r5, r6, lr}
 800686a:	4604      	mov	r4, r0
 800686c:	460d      	mov	r5, r1
  __HAL_LOCK(htim);
 800686e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8006872:	2a14      	cmp	r2, #20
 8006874:	d80c      	bhi.n	8006890 <HAL_TIM_PWM_ConfigChannel+0x34>
 8006876:	e8df f002 	tbb	[pc, r2]
 800687a:	0b59      	.short	0x0b59
 800687c:	0b6e0b0b 	.word	0x0b6e0b0b
 8006880:	0b840b0b 	.word	0x0b840b0b
 8006884:	0b990b0b 	.word	0x0b990b0b
 8006888:	0baf0b0b 	.word	0x0baf0b0b
 800688c:	0b0b      	.short	0x0b0b
 800688e:	11          	.byte	0x11
 800688f:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 8006890:	2300      	movs	r3, #0
  switch (Channel)
 8006892:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 8006894:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8006898:	4610      	mov	r0, r2
 800689a:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800689c:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800689e:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80068a0:	6a1a      	ldr	r2, [r3, #32]
 80068a2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80068a6:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 80068a8:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80068aa:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 80068ac:	6d19      	ldr	r1, [r3, #80]	; 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80068ae:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 80068b2:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068b6:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80068ba:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80068bc:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80068c0:	ea42 5206 	orr.w	r2, r2, r6, lsl #20
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068c4:	4e69      	ldr	r6, [pc, #420]	; (8006a6c <HAL_TIM_PWM_ConfigChannel+0x210>)
 80068c6:	42b3      	cmp	r3, r6
 80068c8:	d013      	beq.n	80068f2 <HAL_TIM_PWM_ConfigChannel+0x96>
 80068ca:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80068ce:	42b3      	cmp	r3, r6
 80068d0:	d00f      	beq.n	80068f2 <HAL_TIM_PWM_ConfigChannel+0x96>
 80068d2:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 80068d6:	42b3      	cmp	r3, r6
 80068d8:	d00b      	beq.n	80068f2 <HAL_TIM_PWM_ConfigChannel+0x96>
 80068da:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80068de:	42b3      	cmp	r3, r6
 80068e0:	d007      	beq.n	80068f2 <HAL_TIM_PWM_ConfigChannel+0x96>
 80068e2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80068e6:	42b3      	cmp	r3, r6
 80068e8:	d003      	beq.n	80068f2 <HAL_TIM_PWM_ConfigChannel+0x96>
 80068ea:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80068ee:	42b3      	cmp	r3, r6
 80068f0:	d104      	bne.n	80068fc <HAL_TIM_PWM_ConfigChannel+0xa0>
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80068f2:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 80068f4:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80068f8:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
  TIMx->CR2 = tmpcr2;
 80068fc:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 80068fe:	6519      	str	r1, [r3, #80]	; 0x50
  TIMx->CCR6 = OC_Config->Pulse;
 8006900:	6869      	ldr	r1, [r5, #4]
 8006902:	64d9      	str	r1, [r3, #76]	; 0x4c
  TIMx->CCER = tmpccer;
 8006904:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006906:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006908:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800690a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800690e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006910:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006912:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8006916:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006918:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800691a:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 800691e:	6519      	str	r1, [r3, #80]	; 0x50
  __HAL_UNLOCK(htim);
 8006920:	2300      	movs	r3, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006922:	2200      	movs	r2, #0
  __HAL_UNLOCK(htim);
 8006924:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8006928:	4610      	mov	r0, r2
 800692a:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800692c:	6800      	ldr	r0, [r0, #0]
 800692e:	f7ff fbd3 	bl	80060d8 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006932:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006934:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006936:	f043 0308 	orr.w	r3, r3, #8
 800693a:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800693c:	6983      	ldr	r3, [r0, #24]
 800693e:	f023 0304 	bic.w	r3, r3, #4
 8006942:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006944:	6983      	ldr	r3, [r0, #24]
 8006946:	430b      	orrs	r3, r1
 8006948:	6183      	str	r3, [r0, #24]
  __HAL_UNLOCK(htim);
 800694a:	2300      	movs	r3, #0
  HAL_StatusTypeDef status = HAL_OK;
 800694c:	2200      	movs	r2, #0
  __HAL_UNLOCK(htim);
 800694e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8006952:	4610      	mov	r0, r2
 8006954:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006956:	6800      	ldr	r0, [r0, #0]
 8006958:	f7ff ff2e 	bl	80067b8 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800695c:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800695e:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006960:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006964:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006966:	6983      	ldr	r3, [r0, #24]
 8006968:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800696c:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800696e:	6983      	ldr	r3, [r0, #24]
 8006970:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006974:	6183      	str	r3, [r0, #24]
  __HAL_UNLOCK(htim);
 8006976:	2300      	movs	r3, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006978:	2200      	movs	r2, #0
  __HAL_UNLOCK(htim);
 800697a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800697e:	4610      	mov	r0, r2
 8006980:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006982:	6800      	ldr	r0, [r0, #0]
 8006984:	f7ff fbe8 	bl	8006158 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006988:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800698a:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800698c:	f043 0308 	orr.w	r3, r3, #8
 8006990:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006992:	69c3      	ldr	r3, [r0, #28]
 8006994:	f023 0304 	bic.w	r3, r3, #4
 8006998:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800699a:	69c3      	ldr	r3, [r0, #28]
 800699c:	430b      	orrs	r3, r1
 800699e:	61c3      	str	r3, [r0, #28]
  __HAL_UNLOCK(htim);
 80069a0:	2300      	movs	r3, #0
  HAL_StatusTypeDef status = HAL_OK;
 80069a2:	2200      	movs	r2, #0
  __HAL_UNLOCK(htim);
 80069a4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80069a8:	4610      	mov	r0, r2
 80069aa:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80069ac:	6800      	ldr	r0, [r0, #0]
 80069ae:	f7ff fc23 	bl	80061f8 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80069b2:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80069b4:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80069b6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80069ba:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80069bc:	69c3      	ldr	r3, [r0, #28]
 80069be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80069c2:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80069c4:	69c3      	ldr	r3, [r0, #28]
 80069c6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80069ca:	61c3      	str	r3, [r0, #28]
  __HAL_UNLOCK(htim);
 80069cc:	2300      	movs	r3, #0
  HAL_StatusTypeDef status = HAL_OK;
 80069ce:	2200      	movs	r2, #0
  __HAL_UNLOCK(htim);
 80069d0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80069d4:	4610      	mov	r0, r2
 80069d6:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80069d8:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 80069da:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80069dc:	6a1a      	ldr	r2, [r3, #32]
 80069de:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80069e2:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 80069e4:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80069e6:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 80069e8:	6d19      	ldr	r1, [r3, #80]	; 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80069ea:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80069ee:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 80069f2:	4331      	orrs	r1, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80069f4:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 80069f6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80069fa:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069fe:	4e1b      	ldr	r6, [pc, #108]	; (8006a6c <HAL_TIM_PWM_ConfigChannel+0x210>)
 8006a00:	42b3      	cmp	r3, r6
 8006a02:	d013      	beq.n	8006a2c <HAL_TIM_PWM_ConfigChannel+0x1d0>
 8006a04:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8006a08:	42b3      	cmp	r3, r6
 8006a0a:	d00f      	beq.n	8006a2c <HAL_TIM_PWM_ConfigChannel+0x1d0>
 8006a0c:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8006a10:	42b3      	cmp	r3, r6
 8006a12:	d00b      	beq.n	8006a2c <HAL_TIM_PWM_ConfigChannel+0x1d0>
 8006a14:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006a18:	42b3      	cmp	r3, r6
 8006a1a:	d007      	beq.n	8006a2c <HAL_TIM_PWM_ConfigChannel+0x1d0>
 8006a1c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006a20:	42b3      	cmp	r3, r6
 8006a22:	d003      	beq.n	8006a2c <HAL_TIM_PWM_ConfigChannel+0x1d0>
 8006a24:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8006a28:	42b3      	cmp	r3, r6
 8006a2a:	d104      	bne.n	8006a36 <HAL_TIM_PWM_ConfigChannel+0x1da>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006a2c:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006a2e:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006a32:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  TIMx->CR2 = tmpcr2;
 8006a36:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8006a38:	6519      	str	r1, [r3, #80]	; 0x50
  TIMx->CCR5 = OC_Config->Pulse;
 8006a3a:	6869      	ldr	r1, [r5, #4]
 8006a3c:	6499      	str	r1, [r3, #72]	; 0x48
  TIMx->CCER = tmpccer;
 8006a3e:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006a40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006a42:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006a44:	f042 0208 	orr.w	r2, r2, #8
 8006a48:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006a4a:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006a4c:	f021 0104 	bic.w	r1, r1, #4
 8006a50:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006a52:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006a54:	4301      	orrs	r1, r0
 8006a56:	6519      	str	r1, [r3, #80]	; 0x50
  __HAL_UNLOCK(htim);
 8006a58:	2300      	movs	r3, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006a5a:	2200      	movs	r2, #0
  __HAL_UNLOCK(htim);
 8006a5c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8006a60:	4610      	mov	r0, r2
 8006a62:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 8006a64:	2202      	movs	r2, #2
}
 8006a66:	4610      	mov	r0, r2
 8006a68:	4770      	bx	lr
 8006a6a:	bf00      	nop
 8006a6c:	40012c00 	.word	0x40012c00

08006a70 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a70:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d051      	beq.n	8006b1c <HAL_TIMEx_MasterConfigSynchronization+0xac>
{
 8006a78:	b430      	push	{r4, r5}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a7a:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006a7c:	4d28      	ldr	r5, [pc, #160]	; (8006b20 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
  htim->State = HAL_TIM_STATE_BUSY;
 8006a7e:	2302      	movs	r3, #2
 8006a80:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006a84:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 8006a86:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8006a88:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006a8a:	d03b      	beq.n	8006b04 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8006a8c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8006a90:	42aa      	cmp	r2, r5
 8006a92:	d032      	beq.n	8006afa <HAL_TIMEx_MasterConfigSynchronization+0x8a>
 8006a94:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8006a98:	42aa      	cmp	r2, r5
 8006a9a:	d02e      	beq.n	8006afa <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a9c:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a9e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006aa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006aa6:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006aa8:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->Instance->CR2 = tmpcr2;
 8006aac:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006aae:	d016      	beq.n	8006ade <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8006ab0:	4b1c      	ldr	r3, [pc, #112]	; (8006b24 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	d013      	beq.n	8006ade <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8006ab6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d00f      	beq.n	8006ade <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8006abe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d00b      	beq.n	8006ade <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8006ac6:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d007      	beq.n	8006ade <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8006ace:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	d003      	beq.n	8006ade <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8006ad6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ada:	429a      	cmp	r2, r3
 8006adc:	d104      	bne.n	8006ae8 <HAL_TIMEx_MasterConfigSynchronization+0x78>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ade:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ae0:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ae4:	431c      	orrs	r4, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ae6:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8006ae8:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8006aea:	2201      	movs	r2, #1
 8006aec:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8006af0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8006af4:	bc30      	pop	{r4, r5}
  return HAL_OK;
 8006af6:	4618      	mov	r0, r3
}
 8006af8:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006afa:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006afc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006b00:	432b      	orrs	r3, r5
 8006b02:	e7cb      	b.n	8006a9c <HAL_TIMEx_MasterConfigSynchronization+0x2c>
 8006b04:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006b06:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006b0a:	432b      	orrs	r3, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b0c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b10:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b16:	432b      	orrs	r3, r5
  htim->Instance->CR2 = tmpcr2;
 8006b18:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b1a:	e7e0      	b.n	8006ade <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  __HAL_LOCK(htim);
 8006b1c:	2002      	movs	r0, #2
}
 8006b1e:	4770      	bx	lr
 8006b20:	40012c00 	.word	0x40012c00
 8006b24:	40000400 	.word	0x40000400

08006b28 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b28:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d048      	beq.n	8006bc2 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
{
 8006b30:	b410      	push	{r4}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006b32:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 8006b36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b3a:	4602      	mov	r2, r0
 8006b3c:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006b3e:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006b40:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006b42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b46:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006b48:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006b4c:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006b4e:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006b50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006b54:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006b56:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006b58:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006b5c:	6b08      	ldr	r0, [r1, #48]	; 0x30
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006b5e:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006b60:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006b64:	698c      	ldr	r4, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006b66:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006b68:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006b6c:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006b6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006b72:	4c15      	ldr	r4, [pc, #84]	; (8006bc8 <HAL_TIMEx_ConfigBreakDeadTime+0xa0>)
 8006b74:	42a0      	cmp	r0, r4
 8006b76:	d007      	beq.n	8006b88 <HAL_TIMEx_ConfigBreakDeadTime+0x60>
 8006b78:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8006b7c:	42a0      	cmp	r0, r4
 8006b7e:	d003      	beq.n	8006b88 <HAL_TIMEx_ConfigBreakDeadTime+0x60>
 8006b80:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 8006b84:	42a0      	cmp	r0, r4
 8006b86:	d114      	bne.n	8006bb2 <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006b88:	69cc      	ldr	r4, [r1, #28]
 8006b8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b8e:	4323      	orrs	r3, r4
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006b90:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8006b92:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006b96:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006b9a:	6a0c      	ldr	r4, [r1, #32]
 8006b9c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006ba0:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006ba2:	6a4c      	ldr	r4, [r1, #36]	; 0x24
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006ba4:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006ba6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006baa:	4323      	orrs	r3, r4
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006bac:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006bb0:	430b      	orrs	r3, r1
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 8006bb2:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 8006bb4:	6443      	str	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8006bb6:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c

  return HAL_OK;
 8006bba:	4608      	mov	r0, r1
}
 8006bbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006bc0:	4770      	bx	lr
  __HAL_LOCK(htim);
 8006bc2:	2002      	movs	r0, #2
}
 8006bc4:	4770      	bx	lr
 8006bc6:	bf00      	nop
 8006bc8:	40012c00 	.word	0x40012c00

08006bcc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006bcc:	b538      	push	{r3, r4, r5, lr}
 8006bce:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8006bd0:	6803      	ldr	r3, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006bd2:	6882      	ldr	r2, [r0, #8]
 8006bd4:	6900      	ldr	r0, [r0, #16]
 8006bd6:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006bd8:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006bda:	4302      	orrs	r2, r0
 8006bdc:	430a      	orrs	r2, r1
 8006bde:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006be0:	49b2      	ldr	r1, [pc, #712]	; (8006eac <UART_SetConfig+0x2e0>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006be2:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006be4:	4029      	ands	r1, r5
 8006be6:	430a      	orrs	r2, r1
 8006be8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bea:	685a      	ldr	r2, [r3, #4]
 8006bec:	68e1      	ldr	r1, [r4, #12]
 8006bee:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8006bf2:	430a      	orrs	r2, r1
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006bf4:	49ae      	ldr	r1, [pc, #696]	; (8006eb0 <UART_SetConfig+0x2e4>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bf6:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006bf8:	428b      	cmp	r3, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006bfa:	69a2      	ldr	r2, [r4, #24]
  {
    tmpreg |= huart->Init.OneBitSampling;
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006bfc:	6899      	ldr	r1, [r3, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006bfe:	f000 8081 	beq.w	8006d04 <UART_SetConfig+0x138>
    tmpreg |= huart->Init.OneBitSampling;
 8006c02:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c04:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 8006c08:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 8006c0c:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c0e:	430a      	orrs	r2, r1
 8006c10:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c14:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006c16:	f022 020f 	bic.w	r2, r2, #15
 8006c1a:	430a      	orrs	r2, r1
 8006c1c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c1e:	4aa5      	ldr	r2, [pc, #660]	; (8006eb4 <UART_SetConfig+0x2e8>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d027      	beq.n	8006c74 <UART_SetConfig+0xa8>
 8006c24:	4aa4      	ldr	r2, [pc, #656]	; (8006eb8 <UART_SetConfig+0x2ec>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d04b      	beq.n	8006cc2 <UART_SetConfig+0xf6>
 8006c2a:	4aa4      	ldr	r2, [pc, #656]	; (8006ebc <UART_SetConfig+0x2f0>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	f000 8111 	beq.w	8006e54 <UART_SetConfig+0x288>
 8006c32:	4aa3      	ldr	r2, [pc, #652]	; (8006ec0 <UART_SetConfig+0x2f4>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	f000 80b9 	beq.w	8006dac <UART_SetConfig+0x1e0>
 8006c3a:	4aa2      	ldr	r2, [pc, #648]	; (8006ec4 <UART_SetConfig+0x2f8>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d111      	bne.n	8006c64 <UART_SetConfig+0x98>
 8006c40:	4ba1      	ldr	r3, [pc, #644]	; (8006ec8 <UART_SetConfig+0x2fc>)
 8006c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c4e:	f000 8126 	beq.w	8006e9e <UART_SetConfig+0x2d2>
 8006c52:	f200 80d5 	bhi.w	8006e00 <UART_SetConfig+0x234>
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	f000 80d9 	beq.w	8006e0e <UART_SetConfig+0x242>
 8006c5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c60:	f000 80b0 	beq.w	8006dc4 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
        break;
      default:
        pclk = 0U;
        ret = HAL_ERROR;
 8006c64:	2001      	movs	r0, #1
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006c66:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 8006c68:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->TxISR = NULL;
 8006c6c:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 8006c70:	66a2      	str	r2, [r4, #104]	; 0x68

  return ret;
}
 8006c72:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c74:	4b94      	ldr	r3, [pc, #592]	; (8006ec8 <UART_SetConfig+0x2fc>)
 8006c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c7a:	f003 0303 	and.w	r3, r3, #3
 8006c7e:	3b01      	subs	r3, #1
 8006c80:	2b02      	cmp	r3, #2
 8006c82:	f240 808d 	bls.w	8006da0 <UART_SetConfig+0x1d4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c86:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8006c8a:	f000 8103 	beq.w	8006e94 <UART_SetConfig+0x2c8>
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c8e:	f7ff f881 	bl	8005d94 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8006c92:	2800      	cmp	r0, #0
 8006c94:	f000 80dc 	beq.w	8006e50 <UART_SetConfig+0x284>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c98:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006c9a:	6862      	ldr	r2, [r4, #4]
 8006c9c:	4b8b      	ldr	r3, [pc, #556]	; (8006ecc <UART_SetConfig+0x300>)
 8006c9e:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8006ca2:	fbb0 f3f3 	udiv	r3, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ca6:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006caa:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8006cae:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006cb2:	f1a3 0210 	sub.w	r2, r3, #16
 8006cb6:	428a      	cmp	r2, r1
 8006cb8:	d8d4      	bhi.n	8006c64 <UART_SetConfig+0x98>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006cba:	6822      	ldr	r2, [r4, #0]
 8006cbc:	2000      	movs	r0, #0
 8006cbe:	60d3      	str	r3, [r2, #12]
 8006cc0:	e7d1      	b.n	8006c66 <UART_SetConfig+0x9a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006cc2:	4b81      	ldr	r3, [pc, #516]	; (8006ec8 <UART_SetConfig+0x2fc>)
 8006cc4:	4a82      	ldr	r2, [pc, #520]	; (8006ed0 <UART_SetConfig+0x304>)
 8006cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cca:	f003 030c 	and.w	r3, r3, #12
 8006cce:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006cd0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8006cd4:	d07c      	beq.n	8006dd0 <UART_SetConfig+0x204>
    switch (clocksource)
 8006cd6:	2b08      	cmp	r3, #8
 8006cd8:	d8c4      	bhi.n	8006c64 <UART_SetConfig+0x98>
 8006cda:	a201      	add	r2, pc, #4	; (adr r2, 8006ce0 <UART_SetConfig+0x114>)
 8006cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ce0:	08006e09 	.word	0x08006e09
 8006ce4:	08006c8f 	.word	0x08006c8f
 8006ce8:	08006e8b 	.word	0x08006e8b
 8006cec:	08006c65 	.word	0x08006c65
 8006cf0:	08006dcb 	.word	0x08006dcb
 8006cf4:	08006c65 	.word	0x08006c65
 8006cf8:	08006c65 	.word	0x08006c65
 8006cfc:	08006c65 	.word	0x08006c65
 8006d00:	08006e7b 	.word	0x08006e7b
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d04:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 8006d08:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8006d0c:	4311      	orrs	r1, r2
 8006d0e:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006d10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d12:	6a61      	ldr	r1, [r4, #36]	; 0x24
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d14:	486c      	ldr	r0, [pc, #432]	; (8006ec8 <UART_SetConfig+0x2fc>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006d16:	f022 020f 	bic.w	r2, r2, #15
 8006d1a:	430a      	orrs	r2, r1
 8006d1c:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d1e:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8006d22:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006d26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d2a:	f000 80ac 	beq.w	8006e86 <UART_SetConfig+0x2ba>
 8006d2e:	d80b      	bhi.n	8006d48 <UART_SetConfig+0x17c>
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d038      	beq.n	8006da6 <UART_SetConfig+0x1da>
 8006d34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d38:	d194      	bne.n	8006c64 <UART_SetConfig+0x98>
        pclk = HAL_RCC_GetSysClockFreq();
 8006d3a:	f7fe fed7 	bl	8005aec <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8006d3e:	2800      	cmp	r0, #0
 8006d40:	f000 8086 	beq.w	8006e50 <UART_SetConfig+0x284>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006d44:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006d46:	e004      	b.n	8006d52 <UART_SetConfig+0x186>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d48:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d4c:	d18a      	bne.n	8006c64 <UART_SetConfig+0x98>
        pclk = (uint32_t) LSE_VALUE;
 8006d4e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006d52:	4b5e      	ldr	r3, [pc, #376]	; (8006ecc <UART_SetConfig+0x300>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d54:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006d56:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 8006d5a:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d5e:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8006d62:	4299      	cmp	r1, r3
 8006d64:	f63f af7e 	bhi.w	8006c64 <UART_SetConfig+0x98>
 8006d68:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8006d6c:	f63f af7a 	bhi.w	8006c64 <UART_SetConfig+0x98>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d70:	2300      	movs	r3, #0
 8006d72:	4619      	mov	r1, r3
 8006d74:	f7f9 fa50 	bl	8000218 <__aeabi_uldivmod>
 8006d78:	086a      	lsrs	r2, r5, #1
 8006d7a:	0203      	lsls	r3, r0, #8
 8006d7c:	0209      	lsls	r1, r1, #8
 8006d7e:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8006d82:	1898      	adds	r0, r3, r2
 8006d84:	f141 0100 	adc.w	r1, r1, #0
 8006d88:	462a      	mov	r2, r5
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	f7f9 fa44 	bl	8000218 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006d90:	4a50      	ldr	r2, [pc, #320]	; (8006ed4 <UART_SetConfig+0x308>)
 8006d92:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8006d96:	4291      	cmp	r1, r2
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d98:	4603      	mov	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006d9a:	f63f af63 	bhi.w	8006c64 <UART_SetConfig+0x98>
 8006d9e:	e78c      	b.n	8006cba <UART_SetConfig+0xee>
 8006da0:	4a4d      	ldr	r2, [pc, #308]	; (8006ed8 <UART_SetConfig+0x30c>)
 8006da2:	5cd3      	ldrb	r3, [r2, r3]
  if (UART_INSTANCE_LOWPOWER(huart))
 8006da4:	e794      	b.n	8006cd0 <UART_SetConfig+0x104>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006da6:	f7fe ffe3 	bl	8005d70 <HAL_RCC_GetPCLK1Freq>
        break;
 8006daa:	e7c8      	b.n	8006d3e <UART_SetConfig+0x172>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006dac:	4b46      	ldr	r3, [pc, #280]	; (8006ec8 <UART_SetConfig+0x2fc>)
 8006dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006db2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006db6:	2b80      	cmp	r3, #128	; 0x80
 8006db8:	d071      	beq.n	8006e9e <UART_SetConfig+0x2d2>
 8006dba:	d861      	bhi.n	8006e80 <UART_SetConfig+0x2b4>
 8006dbc:	b33b      	cbz	r3, 8006e0e <UART_SetConfig+0x242>
 8006dbe:	2b40      	cmp	r3, #64	; 0x40
 8006dc0:	f47f af50 	bne.w	8006c64 <UART_SetConfig+0x98>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006dc4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8006dc8:	d061      	beq.n	8006e8e <UART_SetConfig+0x2c2>
        pclk = HAL_RCC_GetSysClockFreq();
 8006dca:	f7fe fe8f 	bl	8005aec <HAL_RCC_GetSysClockFreq>
        break;
 8006dce:	e760      	b.n	8006c92 <UART_SetConfig+0xc6>
    switch (clocksource)
 8006dd0:	2b08      	cmp	r3, #8
 8006dd2:	f63f af47 	bhi.w	8006c64 <UART_SetConfig+0x98>
 8006dd6:	a201      	add	r2, pc, #4	; (adr r2, 8006ddc <UART_SetConfig+0x210>)
 8006dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ddc:	08006e15 	.word	0x08006e15
 8006de0:	08006e95 	.word	0x08006e95
 8006de4:	08006e9b 	.word	0x08006e9b
 8006de8:	08006c65 	.word	0x08006c65
 8006dec:	08006e8f 	.word	0x08006e8f
 8006df0:	08006c65 	.word	0x08006c65
 8006df4:	08006c65 	.word	0x08006c65
 8006df8:	08006c65 	.word	0x08006c65
 8006dfc:	08006e1d 	.word	0x08006e1d
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e04:	d036      	beq.n	8006e74 <UART_SetConfig+0x2a8>
 8006e06:	e72d      	b.n	8006c64 <UART_SetConfig+0x98>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e08:	f7fe ffb2 	bl	8005d70 <HAL_RCC_GetPCLK1Freq>
        break;
 8006e0c:	e741      	b.n	8006c92 <UART_SetConfig+0xc6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e0e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8006e12:	d1f9      	bne.n	8006e08 <UART_SetConfig+0x23c>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e14:	f7fe ffac 	bl	8005d70 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006e18:	b1d0      	cbz	r0, 8006e50 <UART_SetConfig+0x284>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e1a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006e1c:	6862      	ldr	r2, [r4, #4]
 8006e1e:	4b2b      	ldr	r3, [pc, #172]	; (8006ecc <UART_SetConfig+0x300>)
 8006e20:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 8006e24:	fbb0 f0f1 	udiv	r0, r0, r1
 8006e28:	0853      	lsrs	r3, r2, #1
 8006e2a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e2e:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e32:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e36:	f1a3 0210 	sub.w	r2, r3, #16
 8006e3a:	428a      	cmp	r2, r1
 8006e3c:	f63f af12 	bhi.w	8006c64 <UART_SetConfig+0x98>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e40:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 8006e44:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e46:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e48:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	60cb      	str	r3, [r1, #12]
 8006e50:	2000      	movs	r0, #0
 8006e52:	e708      	b.n	8006c66 <UART_SetConfig+0x9a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e54:	4b1c      	ldr	r3, [pc, #112]	; (8006ec8 <UART_SetConfig+0x2fc>)
 8006e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e5a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006e5e:	2b20      	cmp	r3, #32
 8006e60:	d01d      	beq.n	8006e9e <UART_SetConfig+0x2d2>
 8006e62:	d804      	bhi.n	8006e6e <UART_SetConfig+0x2a2>
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d0d2      	beq.n	8006e0e <UART_SetConfig+0x242>
 8006e68:	2b10      	cmp	r3, #16
 8006e6a:	d0ab      	beq.n	8006dc4 <UART_SetConfig+0x1f8>
 8006e6c:	e6fa      	b.n	8006c64 <UART_SetConfig+0x98>
 8006e6e:	2b30      	cmp	r3, #48	; 0x30
 8006e70:	f47f aef8 	bne.w	8006c64 <UART_SetConfig+0x98>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e74:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8006e78:	d0d0      	beq.n	8006e1c <UART_SetConfig+0x250>
    switch (clocksource)
 8006e7a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006e7e:	e70c      	b.n	8006c9a <UART_SetConfig+0xce>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e80:	2bc0      	cmp	r3, #192	; 0xc0
 8006e82:	d0f7      	beq.n	8006e74 <UART_SetConfig+0x2a8>
 8006e84:	e6ee      	b.n	8006c64 <UART_SetConfig+0x98>
 8006e86:	4815      	ldr	r0, [pc, #84]	; (8006edc <UART_SetConfig+0x310>)
 8006e88:	e763      	b.n	8006d52 <UART_SetConfig+0x186>
        pclk = (uint32_t) HSI_VALUE;
 8006e8a:	4814      	ldr	r0, [pc, #80]	; (8006edc <UART_SetConfig+0x310>)
 8006e8c:	e705      	b.n	8006c9a <UART_SetConfig+0xce>
        pclk = HAL_RCC_GetSysClockFreq();
 8006e8e:	f7fe fe2d 	bl	8005aec <HAL_RCC_GetSysClockFreq>
        break;
 8006e92:	e7c1      	b.n	8006e18 <UART_SetConfig+0x24c>
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e94:	f7fe ff7e 	bl	8005d94 <HAL_RCC_GetPCLK2Freq>
        break;
 8006e98:	e7be      	b.n	8006e18 <UART_SetConfig+0x24c>
        pclk = (uint32_t) HSI_VALUE;
 8006e9a:	4810      	ldr	r0, [pc, #64]	; (8006edc <UART_SetConfig+0x310>)
 8006e9c:	e7be      	b.n	8006e1c <UART_SetConfig+0x250>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e9e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
        pclk = (uint32_t) HSI_VALUE;
 8006ea2:	480e      	ldr	r0, [pc, #56]	; (8006edc <UART_SetConfig+0x310>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ea4:	f47f aef9 	bne.w	8006c9a <UART_SetConfig+0xce>
 8006ea8:	e7b8      	b.n	8006e1c <UART_SetConfig+0x250>
 8006eaa:	bf00      	nop
 8006eac:	cfff69f3 	.word	0xcfff69f3
 8006eb0:	40008000 	.word	0x40008000
 8006eb4:	40013800 	.word	0x40013800
 8006eb8:	40004400 	.word	0x40004400
 8006ebc:	40004800 	.word	0x40004800
 8006ec0:	40004c00 	.word	0x40004c00
 8006ec4:	40005000 	.word	0x40005000
 8006ec8:	40021000 	.word	0x40021000
 8006ecc:	080097b4 	.word	0x080097b4
 8006ed0:	080097a4 	.word	0x080097a4
 8006ed4:	000ffcff 	.word	0x000ffcff
 8006ed8:	080097a0 	.word	0x080097a0
 8006edc:	00f42400 	.word	0x00f42400

08006ee0 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006ee0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006ee2:	07da      	lsls	r2, r3, #31
{
 8006ee4:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006ee6:	d506      	bpl.n	8006ef6 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ee8:	6801      	ldr	r1, [r0, #0]
 8006eea:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8006eec:	684a      	ldr	r2, [r1, #4]
 8006eee:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8006ef2:	4322      	orrs	r2, r4
 8006ef4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006ef6:	079c      	lsls	r4, r3, #30
 8006ef8:	d506      	bpl.n	8006f08 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006efa:	6801      	ldr	r1, [r0, #0]
 8006efc:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8006efe:	684a      	ldr	r2, [r1, #4]
 8006f00:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006f04:	4322      	orrs	r2, r4
 8006f06:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006f08:	0759      	lsls	r1, r3, #29
 8006f0a:	d506      	bpl.n	8006f1a <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006f0c:	6801      	ldr	r1, [r0, #0]
 8006f0e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8006f10:	684a      	ldr	r2, [r1, #4]
 8006f12:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006f16:	4322      	orrs	r2, r4
 8006f18:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006f1a:	071a      	lsls	r2, r3, #28
 8006f1c:	d506      	bpl.n	8006f2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006f1e:	6801      	ldr	r1, [r0, #0]
 8006f20:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8006f22:	684a      	ldr	r2, [r1, #4]
 8006f24:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006f28:	4322      	orrs	r2, r4
 8006f2a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006f2c:	06dc      	lsls	r4, r3, #27
 8006f2e:	d506      	bpl.n	8006f3e <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006f30:	6801      	ldr	r1, [r0, #0]
 8006f32:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8006f34:	688a      	ldr	r2, [r1, #8]
 8006f36:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006f3a:	4322      	orrs	r2, r4
 8006f3c:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006f3e:	0699      	lsls	r1, r3, #26
 8006f40:	d506      	bpl.n	8006f50 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006f42:	6801      	ldr	r1, [r0, #0]
 8006f44:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8006f46:	688a      	ldr	r2, [r1, #8]
 8006f48:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f4c:	4322      	orrs	r2, r4
 8006f4e:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f50:	065a      	lsls	r2, r3, #25
 8006f52:	d509      	bpl.n	8006f68 <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f54:	6801      	ldr	r1, [r0, #0]
 8006f56:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8006f58:	684a      	ldr	r2, [r1, #4]
 8006f5a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8006f5e:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f60:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f64:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f66:	d00b      	beq.n	8006f80 <UART_AdvFeatureConfig+0xa0>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f68:	061b      	lsls	r3, r3, #24
 8006f6a:	d506      	bpl.n	8006f7a <UART_AdvFeatureConfig+0x9a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f6c:	6802      	ldr	r2, [r0, #0]
 8006f6e:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8006f70:	6853      	ldr	r3, [r2, #4]
 8006f72:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8006f76:	430b      	orrs	r3, r1
 8006f78:	6053      	str	r3, [r2, #4]
  }
}
 8006f7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f7e:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f80:	684a      	ldr	r2, [r1, #4]
 8006f82:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8006f84:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8006f88:	4322      	orrs	r2, r4
 8006f8a:	604a      	str	r2, [r1, #4]
 8006f8c:	e7ec      	b.n	8006f68 <UART_AdvFeatureConfig+0x88>
 8006f8e:	bf00      	nop

08006f90 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f94:	f8dd 8020 	ldr.w	r8, [sp, #32]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f98:	6804      	ldr	r4, [r0, #0]
{
 8006f9a:	4607      	mov	r7, r0
 8006f9c:	460e      	mov	r6, r1
 8006f9e:	4615      	mov	r5, r2
 8006fa0:	4699      	mov	r9, r3
 8006fa2:	f1b8 3fff 	cmp.w	r8, #4294967295
 8006fa6:	d10a      	bne.n	8006fbe <UART_WaitOnFlagUntilTimeout+0x2e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fa8:	69e3      	ldr	r3, [r4, #28]
 8006faa:	ea36 0303 	bics.w	r3, r6, r3
 8006fae:	bf0c      	ite	eq
 8006fb0:	2301      	moveq	r3, #1
 8006fb2:	2300      	movne	r3, #0
 8006fb4:	429d      	cmp	r5, r3
 8006fb6:	d0f7      	beq.n	8006fa8 <UART_WaitOnFlagUntilTimeout+0x18>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8006fb8:	2000      	movs	r0, #0
}
 8006fba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fbe:	69e2      	ldr	r2, [r4, #28]
 8006fc0:	ea36 0202 	bics.w	r2, r6, r2
 8006fc4:	bf0c      	ite	eq
 8006fc6:	2301      	moveq	r3, #1
 8006fc8:	2300      	movne	r3, #0
 8006fca:	42ab      	cmp	r3, r5
 8006fcc:	d1f4      	bne.n	8006fb8 <UART_WaitOnFlagUntilTimeout+0x28>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fce:	f7fd f905 	bl	80041dc <HAL_GetTick>
 8006fd2:	eba0 0009 	sub.w	r0, r0, r9
 8006fd6:	4540      	cmp	r0, r8
 8006fd8:	d833      	bhi.n	8007042 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006fda:	f1b8 0f00 	cmp.w	r8, #0
 8006fde:	d030      	beq.n	8007042 <UART_WaitOnFlagUntilTimeout+0xb2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006fe0:	683c      	ldr	r4, [r7, #0]
 8006fe2:	6823      	ldr	r3, [r4, #0]
 8006fe4:	0758      	lsls	r0, r3, #29
 8006fe6:	4622      	mov	r2, r4
 8006fe8:	d5db      	bpl.n	8006fa2 <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006fea:	69e3      	ldr	r3, [r4, #28]
 8006fec:	0519      	lsls	r1, r3, #20
 8006fee:	d5d8      	bpl.n	8006fa2 <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ff0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006ff4:	6223      	str	r3, [r4, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff6:	e854 3f00 	ldrex	r3, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006ffa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ffe:	e844 3100 	strex	r1, r3, [r4]
 8007002:	b139      	cbz	r1, 8007014 <UART_WaitOnFlagUntilTimeout+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007004:	e852 3f00 	ldrex	r3, [r2]
 8007008:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800700c:	e842 3100 	strex	r1, r3, [r2]
 8007010:	2900      	cmp	r1, #0
 8007012:	d1f7      	bne.n	8007004 <UART_WaitOnFlagUntilTimeout+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007014:	f102 0308 	add.w	r3, r2, #8
 8007018:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800701c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007020:	f102 0008 	add.w	r0, r2, #8
 8007024:	e840 3100 	strex	r1, r3, [r0]
 8007028:	2900      	cmp	r1, #0
 800702a:	d1f3      	bne.n	8007014 <UART_WaitOnFlagUntilTimeout+0x84>
          huart->gState = HAL_UART_STATE_READY;
 800702c:	2320      	movs	r3, #32
 800702e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
          __HAL_UNLOCK(huart);
 8007032:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8007036:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
          return HAL_TIMEOUT;
 800703a:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800703c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          return HAL_TIMEOUT;
 8007040:	e7bb      	b.n	8006fba <UART_WaitOnFlagUntilTimeout+0x2a>
 8007042:	683a      	ldr	r2, [r7, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007044:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007048:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800704c:	e842 3100 	strex	r1, r3, [r2]
 8007050:	2900      	cmp	r1, #0
 8007052:	d1f7      	bne.n	8007044 <UART_WaitOnFlagUntilTimeout+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007054:	f102 0308 	add.w	r3, r2, #8
 8007058:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800705c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007060:	f102 0008 	add.w	r0, r2, #8
 8007064:	e840 3100 	strex	r1, r3, [r0]
 8007068:	2900      	cmp	r1, #0
 800706a:	d1f3      	bne.n	8007054 <UART_WaitOnFlagUntilTimeout+0xc4>
        huart->gState = HAL_UART_STATE_READY;
 800706c:	2320      	movs	r3, #32
 800706e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        __HAL_UNLOCK(huart);
 8007072:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8007076:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        return HAL_TIMEOUT;
 800707a:	2003      	movs	r0, #3
 800707c:	e79d      	b.n	8006fba <UART_WaitOnFlagUntilTimeout+0x2a>
 800707e:	bf00      	nop

08007080 <HAL_UART_Transmit>:
{
 8007080:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007084:	4605      	mov	r5, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8007086:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
 800708a:	2820      	cmp	r0, #32
{
 800708c:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 800708e:	f040 8090 	bne.w	80071b2 <HAL_UART_Transmit+0x132>
    if ((pData == NULL) || (Size == 0U))
 8007092:	4689      	mov	r9, r1
 8007094:	2900      	cmp	r1, #0
 8007096:	d048      	beq.n	800712a <HAL_UART_Transmit+0xaa>
 8007098:	4614      	mov	r4, r2
 800709a:	2a00      	cmp	r2, #0
 800709c:	d045      	beq.n	800712a <HAL_UART_Transmit+0xaa>
 800709e:	461e      	mov	r6, r3
    __HAL_LOCK(huart);
 80070a0:	f895 3080 	ldrb.w	r3, [r5, #128]	; 0x80
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	f000 8084 	beq.w	80071b2 <HAL_UART_Transmit+0x132>
 80070aa:	2301      	movs	r3, #1
 80070ac:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070b0:	f04f 0800 	mov.w	r8, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80070b4:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070b6:	f8c5 808c 	str.w	r8, [r5, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80070ba:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    tickstart = HAL_GetTick();
 80070be:	f7fd f88d 	bl	80041dc <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070c2:	68ab      	ldr	r3, [r5, #8]
    huart->TxXferSize  = Size;
 80070c4:	f8a5 4054 	strh.w	r4, [r5, #84]	; 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 80070cc:	f8a5 4056 	strh.w	r4, [r5, #86]	; 0x56
    tickstart = HAL_GetTick();
 80070d0:	4607      	mov	r7, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070d2:	d072      	beq.n	80071ba <HAL_UART_Transmit+0x13a>
    while (huart->TxXferCount > 0U)
 80070d4:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
    __HAL_UNLOCK(huart);
 80070d8:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 80070da:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 80070dc:	f885 2080 	strb.w	r2, [r5, #128]	; 0x80
    while (huart->TxXferCount > 0U)
 80070e0:	b1b3      	cbz	r3, 8007110 <HAL_UART_Transmit+0x90>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070e2:	682c      	ldr	r4, [r5, #0]
 80070e4:	1c71      	adds	r1, r6, #1
 80070e6:	d124      	bne.n	8007132 <HAL_UART_Transmit+0xb2>
 80070e8:	69e2      	ldr	r2, [r4, #28]
 80070ea:	0612      	lsls	r2, r2, #24
 80070ec:	d5fc      	bpl.n	80070e8 <HAL_UART_Transmit+0x68>
      if (pdata8bits == NULL)
 80070ee:	f1b9 0f00 	cmp.w	r9, #0
 80070f2:	d059      	beq.n	80071a8 <HAL_UART_Transmit+0x128>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80070f4:	f819 3b01 	ldrb.w	r3, [r9], #1
 80070f8:	62a3      	str	r3, [r4, #40]	; 0x28
      huart->TxXferCount--;
 80070fa:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
 80070fe:	3b01      	subs	r3, #1
 8007100:	b29b      	uxth	r3, r3
 8007102:	f8a5 3056 	strh.w	r3, [r5, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007106:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
 800710a:	b29b      	uxth	r3, r3
 800710c:	2b00      	cmp	r3, #0
 800710e:	d1e9      	bne.n	80070e4 <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007110:	9600      	str	r6, [sp, #0]
 8007112:	463b      	mov	r3, r7
 8007114:	2200      	movs	r2, #0
 8007116:	2140      	movs	r1, #64	; 0x40
 8007118:	4628      	mov	r0, r5
 800711a:	f7ff ff39 	bl	8006f90 <UART_WaitOnFlagUntilTimeout>
 800711e:	2800      	cmp	r0, #0
 8007120:	d171      	bne.n	8007206 <HAL_UART_Transmit+0x186>
    huart->gState = HAL_UART_STATE_READY;
 8007122:	2320      	movs	r3, #32
 8007124:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    return HAL_OK;
 8007128:	e000      	b.n	800712c <HAL_UART_Transmit+0xac>
      return  HAL_ERROR;
 800712a:	2001      	movs	r0, #1
}
 800712c:	b003      	add	sp, #12
 800712e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007132:	69e3      	ldr	r3, [r4, #28]
 8007134:	061b      	lsls	r3, r3, #24
 8007136:	d4da      	bmi.n	80070ee <HAL_UART_Transmit+0x6e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007138:	f7fd f850 	bl	80041dc <HAL_GetTick>
 800713c:	1bc0      	subs	r0, r0, r7
 800713e:	4286      	cmp	r6, r0
 8007140:	d341      	bcc.n	80071c6 <HAL_UART_Transmit+0x146>
 8007142:	2e00      	cmp	r6, #0
 8007144:	d03f      	beq.n	80071c6 <HAL_UART_Transmit+0x146>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007146:	682c      	ldr	r4, [r5, #0]
 8007148:	6822      	ldr	r2, [r4, #0]
 800714a:	0752      	lsls	r2, r2, #29
 800714c:	4623      	mov	r3, r4
 800714e:	d5c9      	bpl.n	80070e4 <HAL_UART_Transmit+0x64>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007150:	69e2      	ldr	r2, [r4, #28]
 8007152:	0510      	lsls	r0, r2, #20
 8007154:	d5c6      	bpl.n	80070e4 <HAL_UART_Transmit+0x64>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007156:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800715a:	6222      	str	r2, [r4, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800715c:	e854 2f00 	ldrex	r2, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007160:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007164:	e844 2100 	strex	r1, r2, [r4]
 8007168:	b139      	cbz	r1, 800717a <HAL_UART_Transmit+0xfa>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800716a:	e853 2f00 	ldrex	r2, [r3]
 800716e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007172:	e843 2100 	strex	r1, r2, [r3]
 8007176:	2900      	cmp	r1, #0
 8007178:	d1f7      	bne.n	800716a <HAL_UART_Transmit+0xea>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800717a:	f103 0208 	add.w	r2, r3, #8
 800717e:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007182:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007186:	f103 0008 	add.w	r0, r3, #8
 800718a:	e840 2100 	strex	r1, r2, [r0]
 800718e:	2900      	cmp	r1, #0
 8007190:	d1f3      	bne.n	800717a <HAL_UART_Transmit+0xfa>
          huart->gState = HAL_UART_STATE_READY;
 8007192:	2320      	movs	r3, #32
 8007194:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          __HAL_UNLOCK(huart);
 8007198:	f885 1080 	strb.w	r1, [r5, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800719c:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        return HAL_TIMEOUT;
 80071a0:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80071a2:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
          return HAL_TIMEOUT;
 80071a6:	e7c1      	b.n	800712c <HAL_UART_Transmit+0xac>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80071a8:	f838 3b02 	ldrh.w	r3, [r8], #2
 80071ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071b0:	e7a2      	b.n	80070f8 <HAL_UART_Transmit+0x78>
    return HAL_BUSY;
 80071b2:	2002      	movs	r0, #2
}
 80071b4:	b003      	add	sp, #12
 80071b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071ba:	692b      	ldr	r3, [r5, #16]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d189      	bne.n	80070d4 <HAL_UART_Transmit+0x54>
 80071c0:	46c8      	mov	r8, r9
      pdata8bits  = NULL;
 80071c2:	4699      	mov	r9, r3
 80071c4:	e786      	b.n	80070d4 <HAL_UART_Transmit+0x54>
 80071c6:	682b      	ldr	r3, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071c8:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80071cc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d0:	e843 2100 	strex	r1, r2, [r3]
 80071d4:	2900      	cmp	r1, #0
 80071d6:	d1f7      	bne.n	80071c8 <HAL_UART_Transmit+0x148>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071d8:	f103 0208 	add.w	r2, r3, #8
 80071dc:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071e0:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e4:	f103 0008 	add.w	r0, r3, #8
 80071e8:	e840 2100 	strex	r1, r2, [r0]
 80071ec:	2900      	cmp	r1, #0
 80071ee:	d1f3      	bne.n	80071d8 <HAL_UART_Transmit+0x158>
        huart->gState = HAL_UART_STATE_READY;
 80071f0:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 80071f2:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
 80071f4:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        __HAL_UNLOCK(huart);
 80071f8:	f885 1080 	strb.w	r1, [r5, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80071fc:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
}
 8007200:	b003      	add	sp, #12
 8007202:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return HAL_TIMEOUT;
 8007206:	2003      	movs	r0, #3
 8007208:	e790      	b.n	800712c <HAL_UART_Transmit+0xac>
 800720a:	bf00      	nop

0800720c <HAL_UART_Init>:
  if (huart == NULL)
 800720c:	2800      	cmp	r0, #0
 800720e:	d066      	beq.n	80072de <HAL_UART_Init+0xd2>
{
 8007210:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 8007212:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 8007216:	b082      	sub	sp, #8
 8007218:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800721a:	2b00      	cmp	r3, #0
 800721c:	d04c      	beq.n	80072b8 <HAL_UART_Init+0xac>
  __HAL_UART_DISABLE(huart);
 800721e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8007220:	2324      	movs	r3, #36	; 0x24
 8007222:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8007226:	6813      	ldr	r3, [r2, #0]
 8007228:	f023 0301 	bic.w	r3, r3, #1
  if (UART_SetConfig(huart) == HAL_ERROR)
 800722c:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 800722e:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007230:	f7ff fccc 	bl	8006bcc <UART_SetConfig>
 8007234:	2801      	cmp	r0, #1
 8007236:	d03c      	beq.n	80072b2 <HAL_UART_Init+0xa6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007238:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800723a:	2b00      	cmp	r3, #0
 800723c:	d135      	bne.n	80072aa <HAL_UART_Init+0x9e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800723e:	6823      	ldr	r3, [r4, #0]
 8007240:	6859      	ldr	r1, [r3, #4]
 8007242:	f421 4190 	bic.w	r1, r1, #18432	; 0x4800
 8007246:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007248:	6899      	ldr	r1, [r3, #8]
 800724a:	f021 012a 	bic.w	r1, r1, #42	; 0x2a
 800724e:	6099      	str	r1, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8007250:	6819      	ldr	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007252:	2500      	movs	r5, #0
  __HAL_UART_ENABLE(huart);
 8007254:	f041 0101 	orr.w	r1, r1, #1
 8007258:	6019      	str	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800725a:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
  tickstart = HAL_GetTick();
 800725e:	f7fc ffbd 	bl	80041dc <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007262:	6823      	ldr	r3, [r4, #0]
 8007264:	681a      	ldr	r2, [r3, #0]
 8007266:	0712      	lsls	r2, r2, #28
  tickstart = HAL_GetTick();
 8007268:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800726a:	d40e      	bmi.n	800728a <HAL_UART_Init+0x7e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	075b      	lsls	r3, r3, #29
 8007270:	d427      	bmi.n	80072c2 <HAL_UART_Init+0xb6>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007272:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8007274:	2220      	movs	r2, #32
 8007276:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800727a:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800727e:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  return HAL_OK;
 8007282:	4618      	mov	r0, r3
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007284:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 8007286:	b002      	add	sp, #8
 8007288:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800728a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800728e:	9300      	str	r3, [sp, #0]
 8007290:	462a      	mov	r2, r5
 8007292:	4603      	mov	r3, r0
 8007294:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007298:	4620      	mov	r0, r4
 800729a:	f7ff fe79 	bl	8006f90 <UART_WaitOnFlagUntilTimeout>
 800729e:	b9e0      	cbnz	r0, 80072da <HAL_UART_Init+0xce>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80072a0:	6823      	ldr	r3, [r4, #0]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	075b      	lsls	r3, r3, #29
 80072a6:	d40c      	bmi.n	80072c2 <HAL_UART_Init+0xb6>
 80072a8:	e7e3      	b.n	8007272 <HAL_UART_Init+0x66>
    UART_AdvFeatureConfig(huart);
 80072aa:	4620      	mov	r0, r4
 80072ac:	f7ff fe18 	bl	8006ee0 <UART_AdvFeatureConfig>
 80072b0:	e7c5      	b.n	800723e <HAL_UART_Init+0x32>
    return HAL_ERROR;
 80072b2:	2001      	movs	r0, #1
}
 80072b4:	b002      	add	sp, #8
 80072b6:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 80072b8:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 80072bc:	f7fc fd1a 	bl	8003cf4 <HAL_UART_MspInit>
 80072c0:	e7ad      	b.n	800721e <HAL_UART_Init+0x12>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072c2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80072c6:	9300      	str	r3, [sp, #0]
 80072c8:	2200      	movs	r2, #0
 80072ca:	4633      	mov	r3, r6
 80072cc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80072d0:	4620      	mov	r0, r4
 80072d2:	f7ff fe5d 	bl	8006f90 <UART_WaitOnFlagUntilTimeout>
 80072d6:	2800      	cmp	r0, #0
 80072d8:	d0cb      	beq.n	8007272 <HAL_UART_Init+0x66>
      return HAL_TIMEOUT;
 80072da:	2003      	movs	r0, #3
 80072dc:	e7d3      	b.n	8007286 <HAL_UART_Init+0x7a>
    return HAL_ERROR;
 80072de:	2001      	movs	r0, #1
}
 80072e0:	4770      	bx	lr
 80072e2:	bf00      	nop

080072e4 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80072e4:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	d017      	beq.n	800731c <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80072ec:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80072ee:	2324      	movs	r3, #36	; 0x24
{
 80072f0:	b410      	push	{r4}
  huart->gState = HAL_UART_STATE_BUSY;
 80072f2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80072f6:	6811      	ldr	r1, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80072f8:	6814      	ldr	r4, [r2, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80072fa:	2300      	movs	r3, #0
  __HAL_UART_DISABLE(huart);
 80072fc:	f024 0401 	bic.w	r4, r4, #1
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007300:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 8007304:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007306:	6643      	str	r3, [r0, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007308:	6011      	str	r1, [r2, #0]

  huart->gState = HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800730a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 800730e:	2220      	movs	r2, #32
 8007310:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84

  return HAL_OK;
}
 8007314:	f85d 4b04 	ldr.w	r4, [sp], #4
  return HAL_OK;
 8007318:	4618      	mov	r0, r3
}
 800731a:	4770      	bx	lr
  __HAL_LOCK(huart);
 800731c:	2002      	movs	r0, #2
}
 800731e:	4770      	bx	lr

08007320 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007320:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 8007324:	2a01      	cmp	r2, #1
 8007326:	d037      	beq.n	8007398 <HAL_UARTEx_SetTxFifoThreshold+0x78>

  huart->gState = HAL_UART_STATE_BUSY;
 8007328:	4603      	mov	r3, r0

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800732a:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800732c:	2024      	movs	r0, #36	; 0x24
{
 800732e:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8007330:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007334:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007336:	6810      	ldr	r0, [r2, #0]
 8007338:	f020 0001 	bic.w	r0, r0, #1
 800733c:	6010      	str	r0, [r2, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800733e:	6890      	ldr	r0, [r2, #8]
 8007340:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 8007344:	4301      	orrs	r1, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007346:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007348:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800734a:	b310      	cbz	r0, 8007392 <HAL_UARTEx_SetTxFifoThreshold+0x72>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800734c:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800734e:	6890      	ldr	r0, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
 8007350:	4d12      	ldr	r5, [pc, #72]	; (800739c <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007352:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007356:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800735a:	4911      	ldr	r1, [pc, #68]	; (80073a0 <HAL_UARTEx_SetTxFifoThreshold+0x80>)
 800735c:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007360:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 8007364:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 8007368:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800736c:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800736e:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007370:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007374:	fbb1 f1f5 	udiv	r1, r1, r5
 8007378:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 800737c:	2100      	movs	r1, #0
 800737e:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  huart->gState = HAL_UART_STATE_READY;
 8007382:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007384:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 8007386:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 800738a:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800738c:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 8007390:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 8007392:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8007394:	4608      	mov	r0, r1
 8007396:	e7ef      	b.n	8007378 <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 8007398:	2002      	movs	r0, #2
}
 800739a:	4770      	bx	lr
 800739c:	080097cc 	.word	0x080097cc
 80073a0:	080097d4 	.word	0x080097d4

080073a4 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 80073a4:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 80073a8:	2a01      	cmp	r2, #1
 80073aa:	d037      	beq.n	800741c <HAL_UARTEx_SetRxFifoThreshold+0x78>
  huart->gState = HAL_UART_STATE_BUSY;
 80073ac:	4603      	mov	r3, r0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80073ae:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80073b0:	2024      	movs	r0, #36	; 0x24
{
 80073b2:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 80073b4:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80073b8:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 80073ba:	6810      	ldr	r0, [r2, #0]
 80073bc:	f020 0001 	bic.w	r0, r0, #1
 80073c0:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80073c2:	6890      	ldr	r0, [r2, #8]
 80073c4:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
 80073c8:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80073ca:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80073cc:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80073ce:	b310      	cbz	r0, 8007416 <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80073d0:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80073d2:	6890      	ldr	r0, [r2, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 80073d4:	4d12      	ldr	r5, [pc, #72]	; (8007420 <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80073d6:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80073da:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80073de:	4911      	ldr	r1, [pc, #68]	; (8007424 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80073e0:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80073e4:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 80073e8:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 80073ec:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80073f0:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80073f2:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80073f4:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80073f8:	fbb1 f1f5 	udiv	r1, r1, r5
 80073fc:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 8007400:	2100      	movs	r1, #0
 8007402:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  huart->gState = HAL_UART_STATE_READY;
 8007406:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007408:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 800740a:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 800740e:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8007410:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 8007414:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 8007416:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8007418:	4608      	mov	r0, r1
 800741a:	e7ef      	b.n	80073fc <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 800741c:	2002      	movs	r0, #2
}
 800741e:	4770      	bx	lr
 8007420:	080097cc 	.word	0x080097cc
 8007424:	080097d4 	.word	0x080097d4

08007428 <VBS_GetAvBusVoltage_V>:
    temp = 0U;
  }
  else
  {
#endif
    temp = (uint32_t)(pHandle->AvBusVoltage_d);
 8007428:	88c3      	ldrh	r3, [r0, #6]
    temp *= pHandle->ConversionFactor;
 800742a:	8840      	ldrh	r0, [r0, #2]
 800742c:	fb03 f000 	mul.w	r0, r3, r0
    temp /= 65536U;
#ifdef NULL_PTR_CHECK_BUS_VOLT
  }
#endif
  return ((uint16_t)temp);
}
 8007430:	0c00      	lsrs	r0, r0, #16
 8007432:	4770      	bx	lr

08007434 <Circle_Limitation>:
  *  @f$v_q = \sqrt(MaxModule^2-v_d^2\ ) @f$

  *
  */
__weak qd_t Circle_Limitation(const CircleLimitation_Handle_t *pHandle, qd_t Vqd)
{
 8007434:	b570      	push	{r4, r5, r6, lr}
    int32_t square_limit;
    int32_t vd_square_limit;
    int32_t new_q;
    int32_t new_d;

    maxModule = (int32_t)pHandle->MaxModule;
 8007436:	8803      	ldrh	r3, [r0, #0]
 8007438:	140d      	asrs	r5, r1, #16
{
 800743a:	b084      	sub	sp, #16
 800743c:	b20c      	sxth	r4, r1

    square_q = ((int32_t)(Vqd.q)) * Vqd.q;
    square_d = ((int32_t)(Vqd.d)) * Vqd.d;
 800743e:	fb05 f205 	mul.w	r2, r5, r5
    square_limit = maxModule * maxModule;
 8007442:	fb03 f303 	mul.w	r3, r3, r3
{
 8007446:	9101      	str	r1, [sp, #4]
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
    square_sum = square_q + square_d;
 8007448:	fb04 2104 	mla	r1, r4, r4, r2

    if (square_sum > square_limit)
 800744c:	428b      	cmp	r3, r1
 800744e:	da10      	bge.n	8007472 <Circle_Limitation+0x3e>
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
 8007450:	8846      	ldrh	r6, [r0, #2]
 8007452:	fb06 f006 	mul.w	r0, r6, r6
    {
      if (square_d <= vd_square_limit)
 8007456:	4282      	cmp	r2, r0
 8007458:	dd14      	ble.n	8007484 <Circle_Limitation+0x50>
        new_d = Vqd.d;
      }
      else
      {
        new_d = (int32_t)pHandle->MaxVd;
        if (Vqd.d < 0)
 800745a:	2d00      	cmp	r5, #0
#if defined CIRCLE_LIMITATION_SQRT_M0
        square_temp = (square_limit - vd_square_limit) / 1048576;
        new_q = SqrtTable[square_temp];
#else
        square_temp = square_limit - vd_square_limit;
        new_q = MCM_Sqrt(square_temp);
 800745c:	eba3 0000 	sub.w	r0, r3, r0
          new_d = -new_d;
 8007460:	bfb8      	it	lt
 8007462:	4276      	neglt	r6, r6
        new_q = MCM_Sqrt(square_temp);
 8007464:	f7fa f8b8 	bl	80015d8 <MCM_Sqrt>
#endif
        if (Vqd.q < 0)
 8007468:	2c00      	cmp	r4, #0
        {
          new_q = - new_q;
 800746a:	bfb8      	it	lt
 800746c:	4240      	neglt	r0, r0
        {
          /* Nothing to do */
        }
      }
      local_vqd.q = (int16_t)new_q;
      local_vqd.d = (int16_t)new_d;
 800746e:	b235      	sxth	r5, r6
      local_vqd.q = (int16_t)new_q;
 8007470:	b204      	sxth	r4, r0
    }
#ifdef NULL_PTR_CHECK_CRC_LIM
  }
#endif
  return (local_vqd);
 8007472:	b2a4      	uxth	r4, r4
 8007474:	2000      	movs	r0, #0
 8007476:	f364 000f 	bfi	r0, r4, #0, #16
 800747a:	b2ad      	uxth	r5, r5
 800747c:	f365 401f 	bfi	r0, r5, #16, #16
}
 8007480:	b004      	add	sp, #16
 8007482:	bd70      	pop	{r4, r5, r6, pc}
        new_q = MCM_Sqrt(square_temp);
 8007484:	1a98      	subs	r0, r3, r2
 8007486:	f7fa f8a7 	bl	80015d8 <MCM_Sqrt>
        if (Vqd.q < 0)
 800748a:	2c00      	cmp	r4, #0
 800748c:	daf0      	bge.n	8007470 <Circle_Limitation+0x3c>
          new_q = -new_q;
 800748e:	4240      	negs	r0, r0
 8007490:	e7ee      	b.n	8007470 <Circle_Limitation+0x3c>
 8007492:	bf00      	nop

08007494 <EAC_Init>:
  {
#endif
    pHandle->pSTC = pSTC;
    pHandle->pVSS = pVSS;
    pHandle->pENC = pENC;
    pHandle->EncAligned = false;
 8007494:	f04f 0c00 	mov.w	ip, #0
    pHandle->pVSS = pVSS;
 8007498:	e9c0 1200 	strd	r1, r2, [r0]
    pHandle->pENC = pENC;
 800749c:	6083      	str	r3, [r0, #8]
    pHandle->EncAligned = false;
 800749e:	f8a0 c00e 	strh.w	ip, [r0, #14]
    pHandle->EncRestart = false;
#ifdef NULL_PTR_CHECK_ENC_ALI_CTRL
  }
#endif
}
 80074a2:	4770      	bx	lr

080074a4 <EAC_StartAlignment>:
  * It configures the VSS (Virtual Speed Sensor) with the required angle and sets the
  * STC (Speed and Torque Controller) to execute the required torque ramp.
  * @param  pHandle: handler of the current instance of the EncAlignCtrl component.
  */
__weak void EAC_StartAlignment(EncAlign_Handle_t *pHandle)
{
 80074a4:	b510      	push	{r4, lr}
  {
#endif
    uint32_t wAux;

    /* Set pVSS mechanical speed to zero */
    VSS_SetMecAcceleration(pHandle->pVSS, 0, 0U);
 80074a6:	2200      	movs	r2, #0
{
 80074a8:	4604      	mov	r4, r0
    VSS_SetMecAcceleration(pHandle->pVSS, 0, 0U);
 80074aa:	4611      	mov	r1, r2
 80074ac:	6840      	ldr	r0, [r0, #4]
 80074ae:	f001 ffc1 	bl	8009434 <VSS_SetMecAcceleration>

    /* Set pVSS mechanical angle */
    VSS_SetMecAngle(pHandle->pVSS, pHandle->hElAngle);
 80074b2:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 80074b6:	6860      	ldr	r0, [r4, #4]
 80074b8:	f001 ffb4 	bl	8009424 <VSS_SetMecAngle>

    /* Set pSTC in MCM_TORQUE_MODE */
    STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 80074bc:	6820      	ldr	r0, [r4, #0]
 80074be:	2104      	movs	r1, #4
 80074c0:	f001 fc74 	bl	8008dac <STC_SetControlMode>

    /* Set starting torque to Zero */
    (void)STC_ExecRamp(pHandle->pSTC, 0, 0U);
 80074c4:	2200      	movs	r2, #0
 80074c6:	4611      	mov	r1, r2
 80074c8:	6820      	ldr	r0, [r4, #0]
 80074ca:	f001 fc73 	bl	8008db4 <STC_ExecRamp>

    /* Execute the torque ramp */
    (void)STC_ExecRamp(pHandle->pSTC, pHandle->hFinalTorque, (uint32_t)pHandle->hDurationms);
 80074ce:	8ae2      	ldrh	r2, [r4, #22]
 80074d0:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 80074d4:	6820      	ldr	r0, [r4, #0]
 80074d6:	f001 fc6d 	bl	8008db4 <STC_ExecRamp>
    /* Compute hRemainingTicks, the number of thick of alignment phase */
    wAux = ((uint32_t)pHandle->hDurationms) * ((uint32_t)pHandle->hEACFrequencyHz);
 80074da:	8ae3      	ldrh	r3, [r4, #22]
 80074dc:	8a21      	ldrh	r1, [r4, #16]
    wAux /= 1000U;
 80074de:	4a04      	ldr	r2, [pc, #16]	; (80074f0 <EAC_StartAlignment+0x4c>)
    wAux = ((uint32_t)pHandle->hDurationms) * ((uint32_t)pHandle->hEACFrequencyHz);
 80074e0:	fb01 f303 	mul.w	r3, r1, r3
    wAux /= 1000U;
 80074e4:	fba2 2303 	umull	r2, r3, r2, r3
 80074e8:	099b      	lsrs	r3, r3, #6
    pHandle->hRemainingTicks = (uint16_t)wAux;
    pHandle->hRemainingTicks++;
 80074ea:	3301      	adds	r3, #1
 80074ec:	81a3      	strh	r3, [r4, #12]
#ifdef NULL_PTR_CHECK_ENC_ALI_CTRL
  }
#endif
}
 80074ee:	bd10      	pop	{r4, pc}
 80074f0:	10624dd3 	.word	0x10624dd3

080074f4 <EAC_Exec>:
    retVal = false;
  }
  else
  {
#endif
    if (pHandle->hRemainingTicks > 0U)
 80074f4:	8983      	ldrh	r3, [r0, #12]
 80074f6:	b13b      	cbz	r3, 8007508 <EAC_Exec+0x14>
    {
      pHandle->hRemainingTicks--;
 80074f8:	3b01      	subs	r3, #1
 80074fa:	b29b      	uxth	r3, r3
{
 80074fc:	b510      	push	{r4, lr}
 80074fe:	4604      	mov	r4, r0
      pHandle->hRemainingTicks--;
 8007500:	8183      	strh	r3, [r0, #12]

      if (0U == pHandle->hRemainingTicks)
 8007502:	b11b      	cbz	r3, 800750c <EAC_Exec+0x18>
        pHandle->EncAligned = true;
        retVal = true;
      }
      else
      {
        retVal = false;
 8007504:	2000      	movs	r0, #0
#ifdef NULL_PTR_CHECK_ENC_ALI_CTRL
  }
#endif

  return (retVal);
}
 8007506:	bd10      	pop	{r4, pc}
  bool retVal = true;
 8007508:	2001      	movs	r0, #1
}
 800750a:	4770      	bx	lr
        ENC_SetMecAngle(pHandle->pENC, pHandle->hElAngle / ((int16_t)pHandle->bElToMecRatio));
 800750c:	7e03      	ldrb	r3, [r0, #24]
 800750e:	f9b0 1014 	ldrsh.w	r1, [r0, #20]
 8007512:	6880      	ldr	r0, [r0, #8]
 8007514:	fb91 f1f3 	sdiv	r1, r1, r3
 8007518:	f000 f942 	bl	80077a0 <ENC_SetMecAngle>
        pHandle->EncAligned = true;
 800751c:	2001      	movs	r0, #1
 800751e:	73a0      	strb	r0, [r4, #14]
}
 8007520:	bd10      	pop	{r4, pc}
 8007522:	bf00      	nop

08007524 <EAC_IsAligned>:
#ifdef NULL_PTR_CHECK_ENC_ALI_CTRL
  return ((NULL == pHandle) ? false : pHandle->EncAligned);
#else
  return (pHandle->EncAligned);
#endif
}
 8007524:	7b80      	ldrb	r0, [r0, #14]
 8007526:	4770      	bx	lr

08007528 <EAC_SetRestartState>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->EncRestart = restart;
 8007528:	73c1      	strb	r1, [r0, #15]
#ifdef NULL_PTR_CHECK_ENC_ALI_CTRL
  }
#endif
}
 800752a:	4770      	bx	lr

0800752c <ENC_Init>:
    /* Nothing to do */
  }
  else
  {
#endif
    TIM_TypeDef *TIMx = pHandle->TIMx;
 800752c:	6a03      	ldr	r3, [r0, #32]
#endif
    /* Reset counter */
    LL_TIM_SetCounter(TIMx, 0);

    /*Calculations of convenience*/
    pHandle->U32MAXdivPulseNumber = UINT32_MAX / ((uint32_t) pHandle->PulseNumber);
 800752e:	f8b0 c06e 	ldrh.w	ip, [r0, #110]	; 0x6e
  SET_BIT(TIMx->CR1, TIM_CR1_UIFREMAP);
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
{
 8007538:	b410      	push	{r4}
 800753a:	601a      	str	r2, [r3, #0]
    pHandle->SpeedSamplingFreqUnit = ((uint32_t)pHandle->SpeedSamplingFreqHz * (uint32_t)SPEED_UNIT);
 800753c:	f8b0 206c 	ldrh.w	r2, [r0, #108]	; 0x6c
 8007540:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8007544:	0052      	lsls	r2, r2, #1
  WRITE_REG(TIMx->CNT, Counter);
 8007546:	2100      	movs	r1, #0
 8007548:	6259      	str	r1, [r3, #36]	; 0x24
    pHandle->U32MAXdivPulseNumber = UINT32_MAX / ((uint32_t) pHandle->PulseNumber);
 800754a:	f04f 34ff 	mov.w	r4, #4294967295
    pHandle->SpeedSamplingFreqUnit = ((uint32_t)pHandle->SpeedSamplingFreqHz * (uint32_t)SPEED_UNIT);
 800754e:	6242      	str	r2, [r0, #36]	; 0x24
    pHandle->U32MAXdivPulseNumber = UINT32_MAX / ((uint32_t) pHandle->PulseNumber);
 8007550:	fbb4 f4fc 	udiv	r4, r4, ip
 8007554:	6684      	str	r4, [r0, #104]	; 0x68
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8007556:	699c      	ldr	r4, [r3, #24]
 8007558:	f8b0 207a 	ldrh.w	r2, [r0, #122]	; 0x7a
 800755c:	f024 0cf0 	bic.w	ip, r4, #240	; 0xf0
 8007560:	ea42 020c 	orr.w	r2, r2, ip
 8007564:	619a      	str	r2, [r3, #24]
 8007566:	699a      	ldr	r2, [r3, #24]
 8007568:	f8b0 407a 	ldrh.w	r4, [r0, #122]	; 0x7a
 800756c:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 8007570:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007574:	f06f 0401 	mvn.w	r4, #1
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8007578:	619a      	str	r2, [r3, #24]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800757a:	611c      	str	r4, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800757c:	68da      	ldr	r2, [r3, #12]
 800757e:	f042 0201 	orr.w	r2, r2, #1
 8007582:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8007584:	681a      	ldr	r2, [r3, #0]
 8007586:	f042 0201 	orr.w	r2, r2, #1
 800758a:	601a      	str	r2, [r3, #0]

    /* Enable the counting timer */
    LL_TIM_EnableCounter(TIMx);

    /* Erase speed buffer */
    bufferSize = pHandle->SpeedBufferSize;
 800758c:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74

    for (index = 0U; index < bufferSize; index++)
 8007590:	b12a      	cbz	r2, 800759e <ENC_Init+0x72>
      pHandle->DeltaCapturesBuffer[index] = 0;
    }
#ifdef NULL_PTR_CHECK_ENC_SPD_POS_FDB
  }
#endif
}
 8007592:	f85d 4b04 	ldr.w	r4, [sp], #4
      pHandle->DeltaCapturesBuffer[index] = 0;
 8007596:	0092      	lsls	r2, r2, #2
 8007598:	3028      	adds	r0, #40	; 0x28
 800759a:	f001 bf93 	b.w	80094c4 <memset>
}
 800759e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075a2:	4770      	bx	lr

080075a4 <ENC_Clear>:
  *         This function must be called before starting the motor to initialize
  *         the speed measurement process.
  * @param  pHandle: handler of the current instance of the encoder component
  */
__weak void ENC_Clear(ENCODER_Handle_t *pHandle)
{
 80075a4:	b510      	push	{r4, lr}
  else
  {
#endif
    uint8_t index;

    for (index = 0u; index < pHandle->SpeedBufferSize; index++)
 80075a6:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
{
 80075aa:	4604      	mov	r4, r0
    for (index = 0u; index < pHandle->SpeedBufferSize; index++)
 80075ac:	b122      	cbz	r2, 80075b8 <ENC_Clear+0x14>
    {
      pHandle->DeltaCapturesBuffer[index] = 0;
 80075ae:	0092      	lsls	r2, r2, #2
 80075b0:	2100      	movs	r1, #0
 80075b2:	3028      	adds	r0, #40	; 0x28
 80075b4:	f001 ff86 	bl	80094c4 <memset>
    }
    pHandle->SensorIsReliable = true;
 80075b8:	2301      	movs	r3, #1
 80075ba:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
#ifdef NULL_PTR_CHECK_ENC_SPD_POS_FDB
  }
#endif
}
 80075be:	bd10      	pop	{r4, pc}

080075c0 <ENC_CalcAngle>:
  *         of the instantaneous value of the timer counter.
  * @param  pHandle: handler of the current instance of the encoder component
  * @retval Measured electrical angle in [s16degree](measurement_units.md) format.
  */
__weak int16_t ENC_CalcAngle(ENCODER_Handle_t *pHandle)
{
 80075c0:	b410      	push	{r4}
    int16_t mecAngle; /* s16degree format */
    uint32_t uwtemp1;
    int32_t wtemp1;
    /* PR 52926 We need to keep only the 16 LSB, bit 31 could be at 1
     if the overflow occurs just after the entry in the High frequency task */
    uwtemp1 = (LL_TIM_GetCounter(pHandle->TIMx) & 0xffffU) * (pHandle->U32MAXdivPulseNumber);
 80075c2:	6a03      	ldr	r3, [r0, #32]
 80075c4:	6e84      	ldr	r4, [r0, #104]	; 0x68
  return (uint32_t)(READ_REG(TIMx->CNT));
 80075c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    wtemp1 = (int32_t)uwtemp1 / 65536;
#endif
    /* Computes and stores the rotor mechanical angle */
    mecAngle = (int16_t)wtemp1;

    int16_t hMecAnglePrev = pHandle->_Super.hMecAngle;
 80075c8:	f9b0 1006 	ldrsh.w	r1, [r0, #6]

    pHandle->_Super.hMecAngle = mecAngle;

    /* Computes and stores the rotor electrical angle */
    elAngle = mecAngle * (int16_t)(pHandle->_Super.bElToMecRatio);
 80075cc:	7842      	ldrb	r2, [r0, #1]
    uwtemp1 = (LL_TIM_GetCounter(pHandle->TIMx) & 0xffffU) * (pHandle->U32MAXdivPulseNumber);
 80075ce:	b29b      	uxth	r3, r3
 80075d0:	fb04 f303 	mul.w	r3, r4, r3
    wtemp1 = (int32_t)uwtemp1 >> 16U;  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 80075d4:	141b      	asrs	r3, r3, #16
    elAngle = mecAngle * (int16_t)(pHandle->_Super.bElToMecRatio);
 80075d6:	fb03 f202 	mul.w	r2, r3, r2

    pHandle->_Super.hElAngle = elAngle;

    int16_t hMecSpeedDpp = mecAngle - hMecAnglePrev;
 80075da:	1a59      	subs	r1, r3, r1
    mecAngle = (int16_t)wtemp1;
 80075dc:	80c3      	strh	r3, [r0, #6]
    pHandle->_Super.wMecAngle += ((int32_t)hMecSpeedDpp);
 80075de:	6883      	ldr	r3, [r0, #8]
#ifdef NULL_PTR_CHECK_ENC_SPD_POS_FDB
  }
#endif
  /*Returns rotor electrical angle*/
  return (elAngle);
}
 80075e0:	f85d 4b04 	ldr.w	r4, [sp], #4
    elAngle = mecAngle * (int16_t)(pHandle->_Super.bElToMecRatio);
 80075e4:	b212      	sxth	r2, r2
    pHandle->_Super.wMecAngle += ((int32_t)hMecSpeedDpp);
 80075e6:	fa03 f381 	sxtah	r3, r3, r1
    pHandle->_Super.hElAngle = elAngle;
 80075ea:	8082      	strh	r2, [r0, #4]
    pHandle->_Super.wMecAngle += ((int32_t)hMecSpeedDpp);
 80075ec:	6083      	str	r3, [r0, #8]
}
 80075ee:	4610      	mov	r0, r2
 80075f0:	4770      	bx	lr
 80075f2:	bf00      	nop

080075f4 <ENC_CalcAvrgMecSpeedUnit>:
  * @param  pMecSpeedUnit pointer used to return the rotor average mechanical speed
  *         expressed in the unit defined by #SPEED_UNIT
  * @retval true = sensor information is reliable. false = sensor information is not reliable
  */
__weak bool ENC_CalcAvrgMecSpeedUnit(ENCODER_Handle_t *pHandle, int16_t *pMecSpeedUnit)
{
 80075f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    int32_t wtemp2;
    uint32_t OverflowCntSample;
    uint32_t CntCapture;
    uint32_t directionSample;
    int32_t wOverallAngleVariation = 0;
    TIM_TypeDef *TIMx = pHandle->TIMx;
 80075f6:	6a03      	ldr	r3, [r0, #32]
    uint8_t bBufferSize = pHandle->SpeedBufferSize;
 80075f8:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 80075fc:	68dc      	ldr	r4, [r3, #12]
 80075fe:	f024 0401 	bic.w	r4, r4, #1
 8007602:	60dc      	str	r4, [r3, #12]
  return (uint32_t)(READ_REG(TIMx->CNT));
 8007604:	6a5c      	ldr	r4, [r3, #36]	; 0x24
#ifdef TIM_CNT_UIFCPY
    /* disable Interrupt generation */
    LL_TIM_DisableIT_UPDATE(TIMx);
#endif
    CntCapture = LL_TIM_GetCounter(TIMx);
    OverflowCntSample = pHandle->TimerOverflowNb;
 8007606:	f8b0 c070 	ldrh.w	ip, [r0, #112]	; 0x70
    pHandle->TimerOverflowNb = 0;
 800760a:	2500      	movs	r5, #0
 800760c:	f8a0 5070 	strh.w	r5, [r0, #112]	; 0x70
    directionSample = LL_TIM_GetDirection(TIMx);
#ifdef TIM_CNT_UIFCPY
    OFbit = __LL_TIM_GETFLAG_UIFCPY(CntCapture);
    if (0U == OFbit)
 8007610:	0fe5      	lsrs	r5, r4, #31
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007612:	bf18      	it	ne
 8007614:	f06f 0701 	mvnne.w	r7, #1
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 8007618:	681e      	ldr	r6, [r3, #0]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800761a:	bf18      	it	ne
 800761c:	611f      	strne	r7, [r3, #16]
    OverflowCntSample = pHandle->TimerOverflowNb;
 800761e:	fa1f fc8c 	uxth.w	ip, ip

    /* If UIFCPY is not present, OverflowCntSample can not be used safely for
    speed computation, but we still use it to check that we do not exceed one overflow
    (sample frequency not less than mechanical motor speed */

    if ((OverflowCntSample + OFbit) > ENC_MAX_OVERFLOW_NB)
 8007622:	4465      	add	r5, ip
    CLEAR_BIT(CntCapture, TIM_CNT_UIFCPY);
 8007624:	f024 4c00 	bic.w	ip, r4, #2147483648	; 0x80000000
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8007628:	68dc      	ldr	r4, [r3, #12]
    if ((OverflowCntSample + OFbit) > ENC_MAX_OVERFLOW_NB)
 800762a:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800762e:	f044 0401 	orr.w	r4, r4, #1
 8007632:	60dc      	str	r4, [r3, #12]
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 8007634:	f006 0610 	and.w	r6, r6, #16
    {
      pHandle->TimerOverflowError = true;
 8007638:	bf8a      	itet	hi
 800763a:	2401      	movhi	r4, #1
    {
      /* Nothing to do */
    }

    /* Checks the reliability status, then stores and returns it */
    if (pHandle->TimerOverflowError)
 800763c:	f890 407d 	ldrbls.w	r4, [r0, #125]	; 0x7d
      pHandle->TimerOverflowError = true;
 8007640:	f880 407d 	strbhi.w	r4, [r0, #125]	; 0x7d
    if (LL_TIM_COUNTERDIRECTION_DOWN == directionSample)
 8007644:	2e00      	cmp	r6, #0
 8007646:	f000 8093 	beq.w	8007770 <ENC_CalcAvrgMecSpeedUnit+0x17c>
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 800764a:	f890 607c 	ldrb.w	r6, [r0, #124]	; 0x7c
        ((int32_t)CntCapture) - ((int32_t)pHandle->PreviousCapture)
 800764e:	f8b0 3072 	ldrh.w	r3, [r0, #114]	; 0x72
        - ((((int32_t)OverflowCntSample) + (int32_t)OFbit) * ((int32_t)pHandle->PulseNumber));
 8007652:	f8b0 e06e 	ldrh.w	lr, [r0, #110]	; 0x6e
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8007656:	360a      	adds	r6, #10
        ((int32_t)CntCapture) - ((int32_t)pHandle->PreviousCapture)
 8007658:	ebac 0303 	sub.w	r3, ip, r3
        - ((((int32_t)OverflowCntSample) + (int32_t)OFbit) * ((int32_t)pHandle->PulseNumber));
 800765c:	fb0e 3315 	mls	r3, lr, r5, r3
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8007660:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8007664:	2a00      	cmp	r2, #0
 8007666:	f000 8093 	beq.w	8007790 <ENC_CalcAvrgMecSpeedUnit+0x19c>
 800766a:	2a01      	cmp	r2, #1
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800766c:	6a83      	ldr	r3, [r0, #40]	; 0x28
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 800766e:	d039      	beq.n	80076e4 <ENC_CalcAvrgMecSpeedUnit+0xf0>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007670:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8007672:	2a02      	cmp	r2, #2
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007674:	442b      	add	r3, r5
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8007676:	d035      	beq.n	80076e4 <ENC_CalcAvrgMecSpeedUnit+0xf0>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007678:	6b05      	ldr	r5, [r0, #48]	; 0x30
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 800767a:	2a03      	cmp	r2, #3
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800767c:	442b      	add	r3, r5
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 800767e:	d031      	beq.n	80076e4 <ENC_CalcAvrgMecSpeedUnit+0xf0>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007680:	6b45      	ldr	r5, [r0, #52]	; 0x34
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8007682:	2a04      	cmp	r2, #4
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007684:	442b      	add	r3, r5
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8007686:	d02d      	beq.n	80076e4 <ENC_CalcAvrgMecSpeedUnit+0xf0>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007688:	6b85      	ldr	r5, [r0, #56]	; 0x38
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 800768a:	2a05      	cmp	r2, #5
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800768c:	442b      	add	r3, r5
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 800768e:	d029      	beq.n	80076e4 <ENC_CalcAvrgMecSpeedUnit+0xf0>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007690:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8007692:	2a06      	cmp	r2, #6
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007694:	442b      	add	r3, r5
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8007696:	d025      	beq.n	80076e4 <ENC_CalcAvrgMecSpeedUnit+0xf0>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007698:	6c05      	ldr	r5, [r0, #64]	; 0x40
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 800769a:	2a07      	cmp	r2, #7
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800769c:	442b      	add	r3, r5
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 800769e:	d021      	beq.n	80076e4 <ENC_CalcAvrgMecSpeedUnit+0xf0>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80076a0:	6c45      	ldr	r5, [r0, #68]	; 0x44
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80076a2:	2a08      	cmp	r2, #8
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80076a4:	442b      	add	r3, r5
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80076a6:	d01d      	beq.n	80076e4 <ENC_CalcAvrgMecSpeedUnit+0xf0>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80076a8:	6c85      	ldr	r5, [r0, #72]	; 0x48
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80076aa:	2a09      	cmp	r2, #9
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80076ac:	442b      	add	r3, r5
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80076ae:	d019      	beq.n	80076e4 <ENC_CalcAvrgMecSpeedUnit+0xf0>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80076b0:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80076b2:	2a0a      	cmp	r2, #10
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80076b4:	442b      	add	r3, r5
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80076b6:	d015      	beq.n	80076e4 <ENC_CalcAvrgMecSpeedUnit+0xf0>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80076b8:	6d05      	ldr	r5, [r0, #80]	; 0x50
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80076ba:	2a0b      	cmp	r2, #11
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80076bc:	442b      	add	r3, r5
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80076be:	d011      	beq.n	80076e4 <ENC_CalcAvrgMecSpeedUnit+0xf0>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80076c0:	6d45      	ldr	r5, [r0, #84]	; 0x54
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80076c2:	2a0c      	cmp	r2, #12
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80076c4:	442b      	add	r3, r5
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80076c6:	d00d      	beq.n	80076e4 <ENC_CalcAvrgMecSpeedUnit+0xf0>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80076c8:	6d85      	ldr	r5, [r0, #88]	; 0x58
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80076ca:	2a0d      	cmp	r2, #13
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80076cc:	442b      	add	r3, r5
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80076ce:	d009      	beq.n	80076e4 <ENC_CalcAvrgMecSpeedUnit+0xf0>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80076d0:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80076d2:	2a0e      	cmp	r2, #14
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80076d4:	442b      	add	r3, r5
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80076d6:	d005      	beq.n	80076e4 <ENC_CalcAvrgMecSpeedUnit+0xf0>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80076d8:	6e05      	ldr	r5, [r0, #96]	; 0x60
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80076da:	2a0f      	cmp	r2, #15
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80076dc:	442b      	add	r3, r5
 80076de:	bf1c      	itt	ne
 80076e0:	6e45      	ldrne	r5, [r0, #100]	; 0x64
 80076e2:	195b      	addne	r3, r3, r5
    wtemp1 = wOverallAngleVariation * ((int32_t)pHandle->SpeedSamplingFreqUnit);
 80076e4:	6a46      	ldr	r6, [r0, #36]	; 0x24
    wtemp2 = ((int32_t)pHandle->PulseNumber) * ((int32_t)pHandle->SpeedBufferSize);
 80076e6:	fb0e f502 	mul.w	r5, lr, r2
    wtemp1 = wOverallAngleVariation * ((int32_t)pHandle->SpeedSamplingFreqUnit);
 80076ea:	fb06 f303 	mul.w	r3, r6, r3
    wtemp1 = ((0 == wtemp2) ? wtemp1 : (wtemp1 / wtemp2));
 80076ee:	b10d      	cbz	r5, 80076f4 <ENC_CalcAvrgMecSpeedUnit+0x100>
 80076f0:	fb93 f3f5 	sdiv	r3, r3, r5
    *pMecSpeedUnit = (int16_t)wtemp1;
 80076f4:	b21e      	sxth	r6, r3
    pHandle->_Super.hMecAccelUnitP = (int16_t)(wtemp1 - pHandle->_Super.hAvrMecSpeedUnit);
 80076f6:	b29b      	uxth	r3, r3
    *pMecSpeedUnit = (int16_t)wtemp1;
 80076f8:	800e      	strh	r6, [r1, #0]
    wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] * ((int32_t)pHandle->SpeedSamplingFreqHz)
 80076fa:	f890 507c 	ldrb.w	r5, [r0, #124]	; 0x7c
    pHandle->_Super.hMecAccelUnitP = (int16_t)(wtemp1 - pHandle->_Super.hAvrMecSpeedUnit);
 80076fe:	8987      	ldrh	r7, [r0, #12]
    pHandle->DeltaCapturesIndex++;
 8007700:	f890 e07c 	ldrb.w	lr, [r0, #124]	; 0x7c
    wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] * ((int32_t)pHandle->SpeedSamplingFreqHz)
 8007704:	350a      	adds	r5, #10
    pHandle->_Super.hMecAccelUnitP = (int16_t)(wtemp1 - pHandle->_Super.hAvrMecSpeedUnit);
 8007706:	1bdb      	subs	r3, r3, r7
    wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] * ((int32_t)pHandle->SpeedSamplingFreqHz)
 8007708:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
    pHandle->_Super.hMecAccelUnitP = (int16_t)(wtemp1 - pHandle->_Super.hAvrMecSpeedUnit);
 800770c:	8243      	strh	r3, [r0, #18]
    pHandle->DeltaCapturesIndex++;
 800770e:	f10e 0e01 	add.w	lr, lr, #1
    wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] * ((int32_t)pHandle->SpeedSamplingFreqHz)
 8007712:	f8b0 306c 	ldrh.w	r3, [r0, #108]	; 0x6c
    pHandle->_Super.hAvrMecSpeedUnit = (int16_t)wtemp1;
 8007716:	8186      	strh	r6, [r0, #12]
    pHandle->DeltaCapturesIndex++;
 8007718:	fa5f fe8e 	uxtb.w	lr, lr
 800771c:	f880 e07c 	strb.w	lr, [r0, #124]	; 0x7c
    wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] * ((int32_t)pHandle->SpeedSamplingFreqHz)
 8007720:	fb05 f303 	mul.w	r3, r5, r3
             * ((int32_t)pHandle->_Super.bElToMecRatio);
 8007724:	7845      	ldrb	r5, [r0, #1]
    if (pHandle->DeltaCapturesIndex >= pHandle->SpeedBufferSize)
 8007726:	f890 607c 	ldrb.w	r6, [r0, #124]	; 0x7c
    wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] * ((int32_t)pHandle->SpeedSamplingFreqHz)
 800772a:	fb05 f303 	mul.w	r3, r5, r3
    pHandle->PreviousCapture = (CntCapture >= (uint32_t)65535) ? 65535U : (uint16_t)CntCapture;
 800772e:	f64f 77fe 	movw	r7, #65534	; 0xfffe
    wtemp1 *= ((int32_t)pHandle->_Super.DPPConvFactor);
 8007732:	69c5      	ldr	r5, [r0, #28]
    pHandle->PreviousCapture = (CntCapture >= (uint32_t)65535) ? 65535U : (uint16_t)CntCapture;
 8007734:	f64f 7eff 	movw	lr, #65535	; 0xffff
 8007738:	45bc      	cmp	ip, r7
 800773a:	bf88      	it	hi
 800773c:	46f4      	movhi	ip, lr
    if (pHandle->DeltaCapturesIndex >= pHandle->SpeedBufferSize)
 800773e:	4296      	cmp	r6, r2
    pHandle->PreviousCapture = (CntCapture >= (uint32_t)65535) ? 65535U : (uint16_t)CntCapture;
 8007740:	f8a0 c072 	strh.w	ip, [r0, #114]	; 0x72
    wtemp1 /= ((int32_t)pHandle->PulseNumber);
 8007744:	f8b0 c06e 	ldrh.w	ip, [r0, #110]	; 0x6e
 8007748:	fb93 f3fc 	sdiv	r3, r3, ip
    wtemp1 *= ((int32_t)pHandle->_Super.DPPConvFactor);
 800774c:	fb05 f303 	mul.w	r3, r5, r3
    wtemp1 /= ((int32_t)pHandle->_Super.hMeasurementFrequency);
 8007750:	8b45      	ldrh	r5, [r0, #26]
 8007752:	fb93 f3f5 	sdiv	r3, r3, r5
    pHandle->_Super.hElSpeedDpp = (int16_t)wtemp1;
 8007756:	81c3      	strh	r3, [r0, #14]
      pHandle->DeltaCapturesIndex = 0U;
 8007758:	bf24      	itt	cs
 800775a:	2300      	movcs	r3, #0
 800775c:	f880 307c 	strbcs.w	r3, [r0, #124]	; 0x7c
    if (pHandle->TimerOverflowError)
 8007760:	b1cc      	cbz	r4, 8007796 <ENC_CalcAvrgMecSpeedUnit+0x1a2>
    {
      bReliability = false;
      pHandle->SensorIsReliable = false;
      pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 8007762:	78c2      	ldrb	r2, [r0, #3]
 8007764:	7002      	strb	r2, [r0, #0]
      pHandle->SensorIsReliable = false;
 8007766:	2300      	movs	r3, #0
 8007768:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    }
#ifdef NULL_PTR_CHECK_ENC_SPD_POS_FDB
  }
#endif
  return (bReliability);
}
 800776c:	4618      	mov	r0, r3
 800776e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8007770:	f890 607c 	ldrb.w	r6, [r0, #124]	; 0x7c
        ((int32_t)CntCapture) - ((int32_t)pHandle->PreviousCapture)
 8007774:	f8b0 3072 	ldrh.w	r3, [r0, #114]	; 0x72
        + ((((int32_t)OverflowCntSample) + (int32_t)OFbit) * ((int32_t)pHandle->PulseNumber));
 8007778:	f8b0 e06e 	ldrh.w	lr, [r0, #110]	; 0x6e
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 800777c:	360a      	adds	r6, #10
        ((int32_t)CntCapture) - ((int32_t)pHandle->PreviousCapture)
 800777e:	ebac 0303 	sub.w	r3, ip, r3
        + ((((int32_t)OverflowCntSample) + (int32_t)OFbit) * ((int32_t)pHandle->PulseNumber));
 8007782:	fb0e 3305 	mla	r3, lr, r5, r3
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8007786:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 800778a:	2a00      	cmp	r2, #0
 800778c:	f47f af6d 	bne.w	800766a <ENC_CalcAvrgMecSpeedUnit+0x76>
 8007790:	4613      	mov	r3, r2
 8007792:	4616      	mov	r6, r2
 8007794:	e7b0      	b.n	80076f8 <ENC_CalcAvrgMecSpeedUnit+0x104>
}
 8007796:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      bReliability = SPD_IsMecSpeedReliable(&pHandle->_Super, pMecSpeedUnit);
 800779a:	f001 baa5 	b.w	8008ce8 <SPD_IsMecSpeedReliable>
 800779e:	bf00      	nop

080077a0 <ENC_SetMecAngle>:
    uint16_t hAngleCounts;
    uint16_t hMecAngleuint;
    int16_t localhMecAngle = hMecAngle;

    pHandle->_Super.hMecAngle = localhMecAngle;
    pHandle->_Super.hElAngle = localhMecAngle * (int16_t)pHandle->_Super.bElToMecRatio;
 80077a0:	7843      	ldrb	r3, [r0, #1]
    pHandle->_Super.hMecAngle = localhMecAngle;
 80077a2:	80c1      	strh	r1, [r0, #6]
    pHandle->_Super.hElAngle = localhMecAngle * (int16_t)pHandle->_Super.bElToMecRatio;
 80077a4:	b28a      	uxth	r2, r1
 80077a6:	fb01 f303 	mul.w	r3, r1, r3
    if (localhMecAngle < 0)
 80077aa:	2900      	cmp	r1, #0
    pHandle->_Super.hElAngle = localhMecAngle * (int16_t)pHandle->_Super.bElToMecRatio;
 80077ac:	8083      	strh	r3, [r0, #4]
 80077ae:	bfb8      	it	lt
 80077b0:	f102 32ff 	addlt.w	r2, r2, #4294967295
    else
    {
      hMecAngleuint = (uint16_t)localhMecAngle;
    }

    hAngleCounts = (uint16_t)((((uint32_t)hMecAngleuint) * ((uint32_t)pHandle->PulseNumber)) / 65535U);
 80077b4:	f8b0 306e 	ldrh.w	r3, [r0, #110]	; 0x6e
 80077b8:	4906      	ldr	r1, [pc, #24]	; (80077d4 <ENC_SetMecAngle+0x34>)
 80077ba:	bfb8      	it	lt
 80077bc:	b292      	uxthlt	r2, r2
 80077be:	fb02 f303 	mul.w	r3, r2, r3
{
 80077c2:	b410      	push	{r4}
    hAngleCounts = (uint16_t)((((uint32_t)hMecAngleuint) * ((uint32_t)pHandle->PulseNumber)) / 65535U);
 80077c4:	fba1 1303 	umull	r1, r3, r1, r3
    TIM_TypeDef *TIMx = pHandle->TIMx;
 80077c8:	6a04      	ldr	r4, [r0, #32]
    hAngleCounts = (uint16_t)((((uint32_t)hMecAngleuint) * ((uint32_t)pHandle->PulseNumber)) / 65535U);
 80077ca:	0bdb      	lsrs	r3, r3, #15

    TIMx->CNT = (uint16_t)hAngleCounts;
 80077cc:	6263      	str	r3, [r4, #36]	; 0x24
#ifdef NULL_PTR_CHECK_ENC_SPD_POS_FDB
  }
#endif
}
 80077ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80077d2:	4770      	bx	lr
 80077d4:	80008001 	.word	0x80008001

080077d8 <ENC_IRQHandler>:
/**
  * @brief  TIMER ENCODER Overflow interrupt counter update
  * @param  pHandleVoid: handler of the current instance of the encoder component
  */
__weak void *ENC_IRQHandler(void *pHandleVoid)
{
 80077d8:	4602      	mov	r2, r0
  /* Updates the number of overflows occurred */
  /* The handling of overflow error is done in ENC_CalcAvrgMecSpeedUnit */
  pHandle->TimerOverflowNb += 1U;

  return (MC_NULL);
}
 80077da:	2000      	movs	r0, #0
  pHandle->TimerOverflowNb += 1U;
 80077dc:	f8b2 3070 	ldrh.w	r3, [r2, #112]	; 0x70
 80077e0:	3301      	adds	r3, #1
 80077e2:	b29b      	uxth	r3, r3
 80077e4:	f8a2 3070 	strh.w	r3, [r2, #112]	; 0x70
}
 80077e8:	4770      	bx	lr
 80077ea:	bf00      	nop

080077ec <MCPA_dataLog>:
  * @brief  Allocates and fills buffer with asynchronous data to be sent to controller
  *
  * @param  *pHandle Pointer to the MCPA Handle
  */
void MCPA_dataLog(MCPA_Handle_t *pHandle)
{
 80077ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif
    uint32_t *logValue;
    uint16_t *logValue16;
    uint8_t i;

    if (pHandle->HFIndex == pHandle->HFRateBuff) /*  */
 80077ee:	7fc3      	ldrb	r3, [r0, #31]
 80077f0:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
 80077f4:	429a      	cmp	r2, r3
{
 80077f6:	4604      	mov	r4, r0
    if (pHandle->HFIndex == pHandle->HFRateBuff) /*  */
 80077f8:	d002      	beq.n	8007800 <MCPA_dataLog+0x14>
      }
    }
    else
    {
      /* Nothing to log just waiting next call to MCPA_datalog */
      pHandle->HFIndex++;
 80077fa:	3301      	adds	r3, #1
 80077fc:	77c3      	strb	r3, [r0, #31]
    }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
}
 80077fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (0U == pHandle->bufferIndex)
 8007800:	8b05      	ldrh	r5, [r0, #24]
      pHandle->HFIndex = 0U;
 8007802:	2300      	movs	r3, #0
 8007804:	77c3      	strb	r3, [r0, #31]
      if (0U == pHandle->bufferIndex)
 8007806:	b1a5      	cbz	r5, 8007832 <MCPA_dataLog+0x46>
 8007808:	6961      	ldr	r1, [r4, #20]
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 800780a:	8ba2      	ldrh	r2, [r4, #28]
 800780c:	42aa      	cmp	r2, r5
 800780e:	d24e      	bcs.n	80078ae <MCPA_dataLog+0xc2>
 8007810:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
        if (pHandle->MFRateBuff == 254U) /* MFRateBuff = 254 means we dump MF data once per buffer */
 8007814:	2bfe      	cmp	r3, #254	; 0xfe
 8007816:	d066      	beq.n	80078e6 <MCPA_dataLog+0xfa>
        *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after
 8007818:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 800781c:	534b      	strh	r3, [r1, r5]
        pHandle->pTransportLayer->fSendPacket(pHandle->pTransportLayer, pHandle->currentBuffer,
 800781e:	8b22      	ldrh	r2, [r4, #24]
 8007820:	6820      	ldr	r0, [r4, #0]
 8007822:	3202      	adds	r2, #2
 8007824:	2309      	movs	r3, #9
 8007826:	6845      	ldr	r5, [r0, #4]
 8007828:	b292      	uxth	r2, r2
 800782a:	47a8      	blx	r5
        pHandle->bufferIndex = 0U;
 800782c:	2300      	movs	r3, #0
 800782e:	8323      	strh	r3, [r4, #24]
}
 8007830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (0U == pHandle->pTransportLayer->fGetBuffer (pHandle->pTransportLayer,
 8007832:	4601      	mov	r1, r0
 8007834:	2209      	movs	r2, #9
 8007836:	f851 0b14 	ldr.w	r0, [r1], #20
 800783a:	6803      	ldr	r3, [r0, #0]
 800783c:	4798      	blx	r3
 800783e:	b390      	cbz	r0, 80078a6 <MCPA_dataLog+0xba>
          *logValue = GLOBAL_TIMESTAMP; /* 32 first bits is used to store Timestamp */
 8007840:	4b4b      	ldr	r3, [pc, #300]	; (8007970 <MCPA_dataLog+0x184>)
 8007842:	6961      	ldr	r1, [r4, #20]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	600b      	str	r3, [r1, #0]
          if (pHandle->Mark == pHandle->MarkBuff)
 8007848:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
 800784c:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
          pHandle->MFIndex = 0U; /* Restart the motif from scratch at each buffer */
 8007850:	f884 5020 	strb.w	r5, [r4, #32]
          pHandle->bufferIndex = 4U;
 8007854:	2304      	movs	r3, #4
          if (pHandle->Mark == pHandle->MarkBuff)
 8007856:	4282      	cmp	r2, r0
          pHandle->bufferIndex = 4U;
 8007858:	8323      	strh	r3, [r4, #24]
          if (pHandle->Mark == pHandle->MarkBuff)
 800785a:	d101      	bne.n	8007860 <MCPA_dataLog+0x74>
 800785c:	461d      	mov	r5, r3
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 800785e:	e7d4      	b.n	800780a <MCPA_dataLog+0x1e>
            pHandle->MFNumBuff           = pHandle->MFNum;
 8007860:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
            pHandle->HFNumBuff           = pHandle->HFNum;
 8007864:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
            pHandle->MFRateBuff          = pHandle->MFRate;
 8007868:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
            pHandle->HFRateBuff          = pHandle->HFRate;
 800786c:	f894 5021 	ldrb.w	r5, [r4, #33]	; 0x21
            pHandle->HFNumBuff           = pHandle->HFNum;
 8007870:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
            pHandle->MFNumBuff           = pHandle->MFNum;
 8007874:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
                         ((uint32_t)pHandle->HFNum + (uint32_t)pHandle->MFNum) * 4U); /* We store pointer here,
 8007878:	441a      	add	r2, r3
            pHandle->bufferTxTriggerBuff = pHandle->bufferTxTrigger;
 800787a:	8b63      	ldrh	r3, [r4, #26]
            pHandle->MarkBuff            = pHandle->Mark;
 800787c:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
            (void)memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable,
 8007880:	0092      	lsls	r2, r2, #2
            pHandle->MFRateBuff          = pHandle->MFRate;
 8007882:	f884 1026 	strb.w	r1, [r4, #38]	; 0x26
            pHandle->bufferTxTriggerBuff = pHandle->bufferTxTrigger;
 8007886:	83a3      	strh	r3, [r4, #28]
            (void)memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable,
 8007888:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
            pHandle->HFRateBuff          = pHandle->HFRate;
 800788c:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
            (void)memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable,
 8007890:	f001 fe44 	bl	800951c <memcpy>
                         (uint32_t)pHandle->HFNum + (uint32_t)pHandle->MFNum); /* 1 size byte per ID */
 8007894:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 8007898:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
            (void)memcpy(pHandle->dataSizeTableBuff, pHandle->dataSizeTable,
 800789c:	e9d4 1003 	ldrd	r1, r0, [r4, #12]
 80078a0:	441a      	add	r2, r3
 80078a2:	f001 fe3b 	bl	800951c <memcpy>
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 80078a6:	8b25      	ldrh	r5, [r4, #24]
 80078a8:	2d00      	cmp	r5, #0
 80078aa:	d1ad      	bne.n	8007808 <MCPA_dataLog+0x1c>
}
 80078ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 80078ae:	f894 6024 	ldrb.w	r6, [r4, #36]	; 0x24
        logValue16 = (uint16_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 80078b2:	194b      	adds	r3, r1, r5
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 80078b4:	b36e      	cbz	r6, 8007912 <MCPA_dataLog+0x126>
 80078b6:	68a2      	ldr	r2, [r4, #8]
 80078b8:	eb03 0c46 	add.w	ip, r3, r6, lsl #1
 80078bc:	3a04      	subs	r2, #4
          *logValue16 = *((uint16_t *) pHandle->dataPtrTableBuff[i]) ; //cstat !MISRAC2012-Rule-11.5
 80078be:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80078c2:	8800      	ldrh	r0, [r0, #0]
 80078c4:	f823 0b02 	strh.w	r0, [r3], #2
          pHandle->bufferIndex = pHandle->bufferIndex + 2U;
 80078c8:	8b25      	ldrh	r5, [r4, #24]
 80078ca:	3502      	adds	r5, #2
 80078cc:	b2ad      	uxth	r5, r5
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 80078ce:	4563      	cmp	r3, ip
          pHandle->bufferIndex = pHandle->bufferIndex + 2U;
 80078d0:	8325      	strh	r5, [r4, #24]
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 80078d2:	d1f4      	bne.n	80078be <MCPA_dataLog+0xd2>
        if (pHandle->MFRateBuff < 254U)
 80078d4:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 80078d8:	8ba2      	ldrh	r2, [r4, #28]
        if (pHandle->MFRateBuff < 254U)
 80078da:	2bfd      	cmp	r3, #253	; 0xfd
 80078dc:	4618      	mov	r0, r3
 80078de:	d91d      	bls.n	800791c <MCPA_dataLog+0x130>
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 80078e0:	4295      	cmp	r5, r2
 80078e2:	d897      	bhi.n	8007814 <MCPA_dataLog+0x28>
}
 80078e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 80078e6:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80078ea:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
 80078ee:	4418      	add	r0, r3
 80078f0:	4298      	cmp	r0, r3
 80078f2:	dd91      	ble.n	8007818 <MCPA_dataLog+0x2c>
            *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 80078f4:	68a7      	ldr	r7, [r4, #8]
            pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 80078f6:	6926      	ldr	r6, [r4, #16]
            *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 80078f8:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
 80078fc:	6812      	ldr	r2, [r2, #0]
 80078fe:	514a      	str	r2, [r1, r5]
          for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8007900:	1c5a      	adds	r2, r3, #1
            pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 8007902:	5cf3      	ldrb	r3, [r6, r3]
 8007904:	442b      	add	r3, r5
 8007906:	b29d      	uxth	r5, r3
          for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8007908:	b2d3      	uxtb	r3, r2
 800790a:	4283      	cmp	r3, r0
            pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 800790c:	8325      	strh	r5, [r4, #24]
          for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 800790e:	dbf3      	blt.n	80078f8 <MCPA_dataLog+0x10c>
 8007910:	e782      	b.n	8007818 <MCPA_dataLog+0x2c>
        if (pHandle->MFRateBuff < 254U)
 8007912:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
 8007916:	28fd      	cmp	r0, #253	; 0xfd
 8007918:	f63f af71 	bhi.w	80077fe <MCPA_dataLog+0x12>
          if (pHandle->MFIndex == pHandle->MFRateBuff)
 800791c:	f894 3020 	ldrb.w	r3, [r4, #32]
 8007920:	4283      	cmp	r3, r0
 8007922:	d007      	beq.n	8007934 <MCPA_dataLog+0x148>
            pHandle->MFIndex ++;
 8007924:	3301      	adds	r3, #1
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8007926:	8b25      	ldrh	r5, [r4, #24]
            pHandle->MFIndex ++;
 8007928:	f884 3020 	strb.w	r3, [r4, #32]
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 800792c:	42aa      	cmp	r2, r5
 800792e:	f4ff af73 	bcc.w	8007818 <MCPA_dataLog+0x2c>
}
 8007932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8007934:	f894 7028 	ldrb.w	r7, [r4, #40]	; 0x28
 8007938:	4437      	add	r7, r6
            pHandle->MFIndex = 0U;
 800793a:	2300      	movs	r3, #0
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 800793c:	42b7      	cmp	r7, r6
            pHandle->MFIndex = 0U;
 800793e:	f884 3020 	strb.w	r3, [r4, #32]
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8007942:	dd12      	ble.n	800796a <MCPA_dataLog+0x17e>
              *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8007944:	f8d4 e008 	ldr.w	lr, [r4, #8]
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8007948:	f8d4 c010 	ldr.w	ip, [r4, #16]
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 800794c:	8b25      	ldrh	r5, [r4, #24]
              *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 800794e:	f85e 3026 	ldr.w	r3, [lr, r6, lsl #2]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	514b      	str	r3, [r1, r5]
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8007956:	f81c 3006 	ldrb.w	r3, [ip, r6]
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 800795a:	1c70      	adds	r0, r6, #1
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 800795c:	442b      	add	r3, r5
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 800795e:	b2c6      	uxtb	r6, r0
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8007960:	b29d      	uxth	r5, r3
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8007962:	42be      	cmp	r6, r7
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8007964:	8325      	strh	r5, [r4, #24]
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8007966:	dbf2      	blt.n	800794e <MCPA_dataLog+0x162>
 8007968:	e7e0      	b.n	800792c <MCPA_dataLog+0x140>
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 800796a:	8b25      	ldrh	r5, [r4, #24]
 800796c:	e7de      	b.n	800792c <MCPA_dataLog+0x140>
 800796e:	bf00      	nop
 8007970:	2000193c 	.word	0x2000193c

08007974 <MCPA_flushDataLog>:
#endif
    uint32_t *logValue;
    uint16_t *logValue16;
    uint8_t i;

    if (pHandle->bufferIndex > 0U)
 8007974:	8b03      	ldrh	r3, [r0, #24]
 8007976:	b19b      	cbz	r3, 80079a0 <MCPA_flushDataLog+0x2c>
{
 8007978:	b570      	push	{r4, r5, r6, lr}
    {  /* If buffer is allocated, we must send it */
      if (pHandle->MFRateBuff == 254U) /* In case of flush, we must respect the packet format to allow
 800797a:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 800797e:	2afe      	cmp	r2, #254	; 0xfe
 8007980:	4604      	mov	r4, r0
 8007982:	d00e      	beq.n	80079a2 <MCPA_flushDataLog+0x2e>
                                          proper decoding */
      {
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
        {
         logValue = (uint32_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 8007984:	6941      	ldr	r1, [r0, #20]
      else
      {
        /* Nothing to do */
      }
      logValue16 = (uint16_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
      *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after
 8007986:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 800798a:	52ca      	strh	r2, [r1, r3]
                                          the MARK */
      pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer,
 800798c:	8b22      	ldrh	r2, [r4, #24]
 800798e:	6820      	ldr	r0, [r4, #0]
 8007990:	3202      	adds	r2, #2
 8007992:	2309      	movs	r3, #9
 8007994:	6845      	ldr	r5, [r0, #4]
 8007996:	b292      	uxth	r2, r2
 8007998:	47a8      	blx	r5
                                             pHandle->bufferIndex + 2U, MCTL_ASYNC);
      pHandle->bufferIndex = 0U;
 800799a:	2300      	movs	r3, #0
 800799c:	8323      	strh	r3, [r4, #24]
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
}
 800799e:	bd70      	pop	{r4, r5, r6, pc}
 80079a0:	4770      	bx	lr
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 80079a2:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 80079a6:	f890 c028 	ldrb.w	ip, [r0, #40]	; 0x28
         logValue = (uint32_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 80079aa:	6941      	ldr	r1, [r0, #20]
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 80079ac:	4494      	add	ip, r2
 80079ae:	4562      	cmp	r2, ip
 80079b0:	dae9      	bge.n	8007986 <MCPA_flushDataLog+0x12>
         *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 80079b2:	6886      	ldr	r6, [r0, #8]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 80079b4:	6905      	ldr	r5, [r0, #16]
         *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 80079b6:	f856 0022 	ldr.w	r0, [r6, r2, lsl #2]
 80079ba:	6800      	ldr	r0, [r0, #0]
 80079bc:	50c8      	str	r0, [r1, r3]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 80079be:	5ca8      	ldrb	r0, [r5, r2]
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 80079c0:	3201      	adds	r2, #1
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 80079c2:	4403      	add	r3, r0
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 80079c4:	b2d2      	uxtb	r2, r2
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 80079c6:	b29b      	uxth	r3, r3
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 80079c8:	4562      	cmp	r2, ip
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 80079ca:	8323      	strh	r3, [r4, #24]
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 80079cc:	dbf3      	blt.n	80079b6 <MCPA_flushDataLog+0x42>
 80079ce:	e7da      	b.n	8007986 <MCPA_flushDataLog+0x12>

080079d0 <MCPA_cfgLog>:
  *
  * @param  *pHandle Pointer to the MCPA Handle
  * @param  *cfgdata Configuration of the Async communication
  */
uint8_t MCPA_cfgLog(MCPA_Handle_t *pHandle, uint8_t *cfgdata)
{
 80079d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint8_t i;
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF) */
    uint16_t newID, buffSize;
    uint8_t *pCfgData = cfgdata;

    buffSize = *((uint16_t *)pCfgData); //cstat !MISRAC2012-Rule-11.3
 80079d4:	880f      	ldrh	r7, [r1, #0]
{
 80079d6:	4604      	mov	r4, r0

    if (buffSize == 0U)
 80079d8:	2f00      	cmp	r7, #0
 80079da:	d044      	beq.n	8007a66 <MCPA_cfgLog+0x96>
    { 
      /* Switch Off condition */
      MCPA_stopDataLog(pHandle);
    }
    else if (buffSize > pHandle->pTransportLayer->txAsyncMaxPayload)
 80079dc:	6803      	ldr	r3, [r0, #0]
 80079de:	89db      	ldrh	r3, [r3, #14]
 80079e0:	42bb      	cmp	r3, r7
 80079e2:	d33d      	bcc.n	8007a60 <MCPA_cfgLog+0x90>
    {
      result = MCP_ERROR_NO_TXASYNC_SPACE;
    }
    else
    {
      pHandle->HFRate = *((uint8_t *)&pCfgData[2]);
 80079e4:	788b      	ldrb	r3, [r1, #2]
 80079e6:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
      pHandle->HFNum  = *((uint8_t *)&pCfgData[3]);
 80079ea:	78ce      	ldrb	r6, [r1, #3]
 80079ec:	f880 6023 	strb.w	r6, [r0, #35]	; 0x23
      pHandle->MFRate = *((uint8_t *)&pCfgData[4]);
 80079f0:	790b      	ldrb	r3, [r1, #4]
 80079f2:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
      pHandle->MFNum  = *((uint8_t *)&pCfgData[5]);
 80079f6:	794b      	ldrb	r3, [r1, #5]
 80079f8:	f880 3027 	strb.w	r3, [r0, #39]	; 0x27
      pCfgData = &pCfgData[6]; /* Start of the HF IDs */

      if ((pHandle->HFNum + pHandle->MFNum) <= pHandle->nbrOfDataLog)
 80079fc:	441e      	add	r6, r3
 80079fe:	7f83      	ldrb	r3, [r0, #30]
 8007a00:	429e      	cmp	r6, r3
 8007a02:	dc52      	bgt.n	8007aaa <MCPA_cfgLog+0xda>
      pCfgData = &pCfgData[6]; /* Start of the HF IDs */
 8007a04:	3106      	adds	r1, #6
      {
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8007a06:	2e00      	cmp	r6, #0
 8007a08:	d056      	beq.n	8007ab8 <MCPA_cfgLog+0xe8>
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF) */
 8007a0a:	2600      	movs	r6, #0
 8007a0c:	4688      	mov	r8, r1
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8007a0e:	4635      	mov	r5, r6
 8007a10:	e011      	b.n	8007a36 <MCPA_cfgLog+0x66>
        {
          newID = *((uint16_t *)pCfgData); //cstat !MISRAC2012-Rule-11.3
          (void)RI_GetPtrReg(newID, &pHandle->dataPtrTable[i]);
          /* HF Data are fixed to 2 bytes */
          pHandle->dataSizeTable[i] = (i < pHandle->HFNum ) ? 2U : RI_GetIDSize(newID);
 8007a12:	68e3      	ldr	r3, [r4, #12]
 8007a14:	5558      	strb	r0, [r3, r5]
          pCfgData++; /* Point to the next UID */
          pCfgData++;
          logSize = logSize+pHandle->dataSizeTable[i];
 8007a16:	68e2      	ldr	r2, [r4, #12]
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8007a18:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8007a1c:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
          logSize = logSize+pHandle->dataSizeTable[i];
 8007a20:	5d52      	ldrb	r2, [r2, r5]
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8007a22:	f105 0c01 	add.w	ip, r5, #1
 8007a26:	fa5f f58c 	uxtb.w	r5, ip
 8007a2a:	4403      	add	r3, r0
          logSize = logSize+pHandle->dataSizeTable[i];
 8007a2c:	4432      	add	r2, r6
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8007a2e:	429d      	cmp	r5, r3
          pCfgData++;
 8007a30:	4641      	mov	r1, r8
          logSize = logSize+pHandle->dataSizeTable[i];
 8007a32:	b296      	uxth	r6, r2
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8007a34:	da11      	bge.n	8007a5a <MCPA_cfgLog+0x8a>
          newID = *((uint16_t *)pCfgData); //cstat !MISRAC2012-Rule-11.3
 8007a36:	f838 9b02 	ldrh.w	r9, [r8], #2
          (void)RI_GetPtrReg(newID, &pHandle->dataPtrTable[i]);
 8007a3a:	6861      	ldr	r1, [r4, #4]
 8007a3c:	4648      	mov	r0, r9
 8007a3e:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8007a42:	f7fb fd1b 	bl	800347c <RI_GetPtrReg>
          pHandle->dataSizeTable[i] = (i < pHandle->HFNum ) ? 2U : RI_GetIDSize(newID);
 8007a46:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8007a4a:	42ab      	cmp	r3, r5
 8007a4c:	f04f 0002 	mov.w	r0, #2
 8007a50:	d8df      	bhi.n	8007a12 <MCPA_cfgLog+0x42>
 8007a52:	4648      	mov	r0, r9
 8007a54:	f7fb fd06 	bl	8003464 <RI_GetIDSize>
 8007a58:	e7db      	b.n	8007a12 <MCPA_cfgLog+0x42>
        }

        /* Smallest packet must be able to contain logSize Markbyte AsyncID and TimeStamp */
        if (buffSize < (logSize + 2U + 4U))
 8007a5a:	1db3      	adds	r3, r6, #6
 8007a5c:	429f      	cmp	r7, r3
 8007a5e:	d21a      	bcs.n	8007a96 <MCPA_cfgLog+0xc6>
      result = MCP_ERROR_NO_TXASYNC_SPACE;
 8007a60:	2009      	movs	r0, #9
    }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
  return (result);
}
 8007a62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (pHandle->bufferIndex > 0U)
 8007a66:	8b03      	ldrh	r3, [r0, #24]
  pHandle->Mark = 0U;
 8007a68:	f880 7029 	strb.w	r7, [r0, #41]	; 0x29
  if (pHandle->bufferIndex > 0U)
 8007a6c:	b153      	cbz	r3, 8007a84 <MCPA_cfgLog+0xb4>
    logValue16 = (uint16_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 8007a6e:	6961      	ldr	r1, [r4, #20]
    *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after
 8007a70:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 8007a74:	52ca      	strh	r2, [r1, r3]
    pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer,
 8007a76:	8b22      	ldrh	r2, [r4, #24]
 8007a78:	6820      	ldr	r0, [r4, #0]
 8007a7a:	3202      	adds	r2, #2
 8007a7c:	6845      	ldr	r5, [r0, #4]
 8007a7e:	b292      	uxth	r2, r2
 8007a80:	2309      	movs	r3, #9
 8007a82:	47a8      	blx	r5
  pHandle->bufferIndex = 0U;
 8007a84:	2000      	movs	r0, #0
  pHandle->MarkBuff    = 0U;
 8007a86:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
  pHandle->HFIndex     = 0U;
 8007a8a:	77e0      	strb	r0, [r4, #31]
  pHandle->HFRateBuff  = 0U; /* We do not want to miss any sample at the restart */
 8007a8c:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
  pHandle->bufferIndex = 0U;
 8007a90:	8320      	strh	r0, [r4, #24]
}
 8007a92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          pHandle->bufferTxTrigger = buffSize-logSize - 2U; /* 2 is required to add the last Mark byte and NUL
 8007a96:	3f02      	subs	r7, #2
 8007a98:	1bbf      	subs	r7, r7, r6
 8007a9a:	8367      	strh	r7, [r4, #26]
          pHandle->Mark = *((uint8_t *)pCfgData);
 8007a9c:	780b      	ldrb	r3, [r1, #0]
 8007a9e:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
          if (0U == pHandle->Mark)
 8007aa2:	b12b      	cbz	r3, 8007ab0 <MCPA_cfgLog+0xe0>
  uint8_t result = MCP_CMD_OK;
 8007aa4:	2000      	movs	r0, #0
}
 8007aa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        result = MCP_ERROR_BAD_RAW_FORMAT;
 8007aaa:	200a      	movs	r0, #10
}
 8007aac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (pHandle->bufferIndex > 0U)
 8007ab0:	8b23      	ldrh	r3, [r4, #24]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d0e6      	beq.n	8007a84 <MCPA_cfgLog+0xb4>
 8007ab6:	e7da      	b.n	8007a6e <MCPA_cfgLog+0x9e>
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8007ab8:	2306      	movs	r3, #6
 8007aba:	e7cf      	b.n	8007a5c <MCPA_cfgLog+0x8c>

08007abc <NTC_Clear>:
    /* nothing to do */
  }
  else
  {
#endif
    pHandle->hAvTemp_d = 0U;
 8007abc:	2300      	movs	r3, #0
 8007abe:	8043      	strh	r3, [r0, #2]
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
}
 8007ac0:	4770      	bx	lr
 8007ac2:	bf00      	nop

08007ac4 <NTC_Init>:
    if (REAL_SENSOR == pHandle->bSensorType)
 8007ac4:	7802      	ldrb	r2, [r0, #0]
{
 8007ac6:	b508      	push	{r3, lr}
    if (REAL_SENSOR == pHandle->bSensorType)
 8007ac8:	b122      	cbz	r2, 8007ad4 <NTC_Init+0x10>
      pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 8007aca:	8882      	ldrh	r2, [r0, #4]
 8007acc:	8042      	strh	r2, [r0, #2]
      pHandle->hFaultState = MC_NO_ERROR;
 8007ace:	2100      	movs	r1, #0
 8007ad0:	8101      	strh	r1, [r0, #8]
}
 8007ad2:	bd08      	pop	{r3, pc}
      NTC_Clear(pHandle);
 8007ad4:	f7ff fff2 	bl	8007abc <NTC_Clear>
}
 8007ad8:	bd08      	pop	{r3, pc}
 8007ada:	bf00      	nop

08007adc <NTC_GetAvTemp_C>:
  else
  {
#endif
    int32_t wTemp;

    if (REAL_SENSOR == pHandle->bSensorType)
 8007adc:	7803      	ldrb	r3, [r0, #0]
 8007ade:	b95b      	cbnz	r3, 8007af8 <NTC_GetAvTemp_C+0x1c>
    {
      wTemp = (int32_t)pHandle->hAvTemp_d;
 8007ae0:	8842      	ldrh	r2, [r0, #2]
      wTemp -= ((int32_t)pHandle->wV0);
 8007ae2:	6941      	ldr	r1, [r0, #20]
      wTemp *= pHandle->hSensitivity;
 8007ae4:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
#ifndef FULL_MISRA_C_COMPLIANCY_NTC_TEMP
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      wTemp = (wTemp >> 16) + (int32_t)pHandle->hT0;
 8007ae8:	8b00      	ldrh	r0, [r0, #24]
      wTemp -= ((int32_t)pHandle->wV0);
 8007aea:	1a52      	subs	r2, r2, r1
      wTemp *= pHandle->hSensitivity;
 8007aec:	fb02 f303 	mul.w	r3, r2, r3
      wTemp = (wTemp >> 16) + (int32_t)pHandle->hT0;
 8007af0:	eb00 4023 	add.w	r0, r0, r3, asr #16
    returnValue = (int16_t)wTemp;
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (returnValue);
}
 8007af4:	b200      	sxth	r0, r0
 8007af6:	4770      	bx	lr
      wTemp = (int32_t)pHandle->hExpectedTemp_C;
 8007af8:	88c0      	ldrh	r0, [r0, #6]
}
 8007afa:	b200      	sxth	r0, r0
 8007afc:	4770      	bx	lr
 8007afe:	bf00      	nop

08007b00 <PID_HandleInit>:
  {
#endif
    pHandle->hKpGain =  pHandle->hDefKpGain;
    pHandle->hKiGain =  pHandle->hDefKiGain;
    pHandle->hKdGain =  pHandle->hDefKdGain;
    pHandle->wIntegralTerm = 0;
 8007b00:	2300      	movs	r3, #0
    pHandle->hKpGain =  pHandle->hDefKpGain;
 8007b02:	6801      	ldr	r1, [r0, #0]
    pHandle->hKdGain =  pHandle->hDefKdGain;
 8007b04:	8c02      	ldrh	r2, [r0, #32]
    pHandle->hKpGain =  pHandle->hDefKpGain;
 8007b06:	6041      	str	r1, [r0, #4]
    pHandle->hKdGain =  pHandle->hDefKdGain;
 8007b08:	8442      	strh	r2, [r0, #34]	; 0x22
    pHandle->wIntegralTerm = 0;
 8007b0a:	6083      	str	r3, [r0, #8]
    pHandle->wPrevProcessVarError = 0;
 8007b0c:	6283      	str	r3, [r0, #40]	; 0x28
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8007b0e:	4770      	bx	lr

08007b10 <PID_SetKP>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKpGain = hKpGain;
 8007b10:	8081      	strh	r1, [r0, #4]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8007b12:	4770      	bx	lr

08007b14 <PID_SetKI>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKiGain = hKiGain;
 8007b14:	80c1      	strh	r1, [r0, #6]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8007b16:	4770      	bx	lr

08007b18 <PID_GetKP>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKpGain);
#else
  return (pHandle->hKpGain);
#endif
}
 8007b18:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8007b1c:	4770      	bx	lr
 8007b1e:	bf00      	nop

08007b20 <PID_GetKI>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKiGain);
#else
  return (pHandle->hKiGain);
#endif
}
 8007b20:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8007b24:	4770      	bx	lr
 8007b26:	bf00      	nop

08007b28 <PID_SetIntegralTerm>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wIntegralTerm = wIntegralTermValue;
 8007b28:	6081      	str	r1, [r0, #8]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return;
}
 8007b2a:	4770      	bx	lr

08007b2c <PID_GetKPDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKpDivisorPOW2);
#else
  return (pHandle->hKpDivisorPOW2);
#endif
}
 8007b2c:	8b80      	ldrh	r0, [r0, #28]
 8007b2e:	4770      	bx	lr

08007b30 <PID_SetKPDivisorPOW2>:
  }
  else
  {
#endif
    pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
    pHandle->hKpDivisor = (((uint16_t)1) << hKpDivisorPOW2);
 8007b30:	2301      	movs	r3, #1
 8007b32:	408b      	lsls	r3, r1
    pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
 8007b34:	8381      	strh	r1, [r0, #28]
    pHandle->hKpDivisor = (((uint16_t)1) << hKpDivisorPOW2);
 8007b36:	8303      	strh	r3, [r0, #24]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8007b38:	4770      	bx	lr
 8007b3a:	bf00      	nop

08007b3c <PID_GetKIDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKiDivisorPOW2);
#else
  return (pHandle->hKiDivisorPOW2);
#endif
}
 8007b3c:	8bc0      	ldrh	r0, [r0, #30]
 8007b3e:	4770      	bx	lr

08007b40 <PID_SetLowerIntegralTermLimit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wLowerIntegralLimit = wLowerLimit;
 8007b40:	6101      	str	r1, [r0, #16]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8007b42:	4770      	bx	lr

08007b44 <PID_SetUpperIntegralTermLimit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wUpperIntegralLimit = wUpperLimit;
 8007b44:	60c1      	str	r1, [r0, #12]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8007b46:	4770      	bx	lr

08007b48 <PID_SetKIDivisorPOW2>:
{
 8007b48:	b538      	push	{r3, r4, r5, lr}
    uint32_t wKiDiv = (((uint32_t)1) << hKiDivisorPOW2);
 8007b4a:	2301      	movs	r3, #1
{
 8007b4c:	460c      	mov	r4, r1
    uint32_t wKiDiv = (((uint32_t)1) << hKiDivisorPOW2);
 8007b4e:	408b      	lsls	r3, r1
    PID_SetUpperIntegralTermLimit(pHandle, (int32_t)INT16_MAX * (int32_t)wKiDiv);
 8007b50:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8007b54:	40a1      	lsls	r1, r4
    pHandle->hKiDivisorPOW2 = hKiDivisorPOW2;
 8007b56:	83c4      	strh	r4, [r0, #30]
    pHandle->hKiDivisor = (uint16_t)wKiDiv;
 8007b58:	8343      	strh	r3, [r0, #26]
{
 8007b5a:	4605      	mov	r5, r0
    PID_SetUpperIntegralTermLimit(pHandle, (int32_t)INT16_MAX * (int32_t)wKiDiv);
 8007b5c:	f7ff fff2 	bl	8007b44 <PID_SetUpperIntegralTermLimit>
    PID_SetLowerIntegralTermLimit(pHandle, (int32_t)(-INT16_MAX) * (int32_t)wKiDiv);
 8007b60:	4902      	ldr	r1, [pc, #8]	; (8007b6c <PID_SetKIDivisorPOW2+0x24>)
 8007b62:	4628      	mov	r0, r5
 8007b64:	40a1      	lsls	r1, r4
 8007b66:	f7ff ffeb 	bl	8007b40 <PID_SetLowerIntegralTermLimit>
}
 8007b6a:	bd38      	pop	{r3, r4, r5, pc}
 8007b6c:	ffff8001 	.word	0xffff8001

08007b70 <PID_SetKD>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKdGain = hKdGain;
 8007b70:	8441      	strh	r1, [r0, #34]	; 0x22
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8007b72:	4770      	bx	lr

08007b74 <PID_GetKD>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKdGain);
#else
  return (pHandle->hKdGain);
#endif
}
 8007b74:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	; 0x22
 8007b78:	4770      	bx	lr
 8007b7a:	bf00      	nop

08007b7c <PID_GetKDDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKdDivisorPOW2);
#else
  return (pHandle->hKdDivisorPOW2);
#endif
}
 8007b7c:	8cc0      	ldrh	r0, [r0, #38]	; 0x26
 8007b7e:	4770      	bx	lr

08007b80 <PID_SetKDDivisorPOW2>:
  }
  else
  {
#endif
    pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
    pHandle->hKdDivisor = (((uint16_t)1) << hKdDivisorPOW2);
 8007b80:	2301      	movs	r3, #1
 8007b82:	408b      	lsls	r3, r1
    pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
 8007b84:	84c1      	strh	r1, [r0, #38]	; 0x26
    pHandle->hKdDivisor = (((uint16_t)1) << hKdDivisorPOW2);
 8007b86:	8483      	strh	r3, [r0, #36]	; 0x24
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8007b88:	4770      	bx	lr
 8007b8a:	bf00      	nop

08007b8c <PI_Controller>:
    int32_t wDischarge = 0;
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

    /* Proportional term computation*/
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8007b8c:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
{
 8007b90:	4603      	mov	r3, r0
 8007b92:	b510      	push	{r4, lr}

    /* Integral term computation */
    if (0 == pHandle->hKiGain)
 8007b94:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 8007b98:	f9b3 c016 	ldrsh.w	ip, [r3, #22]
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 8007b9c:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8007ba0:	fb01 f202 	mul.w	r2, r1, r2
    if (0 == pHandle->hKiGain)
 8007ba4:	b18c      	cbz	r4, 8007bca <PI_Controller+0x3e>
    {
      pHandle->wIntegralTerm = 0;
    }
    else
    {
      wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 8007ba6:	fb04 f101 	mul.w	r1, r4, r1
      wIntegral_sum_temp = pHandle->wIntegralTerm + wIntegral_Term;
 8007baa:	689c      	ldr	r4, [r3, #8]

      if (wIntegral_sum_temp < 0)
 8007bac:	eb14 0e01 	adds.w	lr, r4, r1
 8007bb0:	d421      	bmi.n	8007bf6 <PI_Controller+0x6a>
      {
        if (pHandle->wIntegralTerm < 0)
        {
          if (wIntegral_Term < 0)
          {
            wIntegral_sum_temp = -INT32_MAX;
 8007bb2:	420c      	tst	r4, r1
 8007bb4:	4916      	ldr	r1, [pc, #88]	; (8007c10 <PI_Controller+0x84>)
 8007bb6:	bf48      	it	mi
 8007bb8:	468e      	movmi	lr, r1
        {
          /* Nothing to do */
        }
      }

      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 8007bba:	68d9      	ldr	r1, [r3, #12]
 8007bbc:	4571      	cmp	r1, lr
 8007bbe:	db05      	blt.n	8007bcc <PI_Controller+0x40>
      {
        pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
      }
      else if (wIntegral_sum_temp < pHandle->wLowerIntegralLimit)
 8007bc0:	6919      	ldr	r1, [r3, #16]
 8007bc2:	4571      	cmp	r1, lr
 8007bc4:	dc02      	bgt.n	8007bcc <PI_Controller+0x40>
      {
        pHandle->wIntegralTerm = pHandle->wLowerIntegralLimit;
      }
      else
      {
        pHandle->wIntegralTerm = wIntegral_sum_temp;
 8007bc6:	4671      	mov	r1, lr
 8007bc8:	e000      	b.n	8007bcc <PI_Controller+0x40>
 8007bca:	4621      	mov	r1, r4
    /* WARNING: the below instruction is not MISRA compliant, user should verify
               that Cortex-M3 assembly instruction ASR (arithmetic shift right)
               is used by the compiler to perform the shifts (instead of LSR
               logical shift right)*/
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    wOutput_32 = (wProportional_Term >> pHandle->hKpDivisorPOW2) + (pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2);
 8007bcc:	8b9c      	ldrh	r4, [r3, #28]
 8007bce:	4122      	asrs	r2, r4
 8007bd0:	8bdc      	ldrh	r4, [r3, #30]
 8007bd2:	fa41 f404 	asr.w	r4, r1, r4
 8007bd6:	4422      	add	r2, r4
#else
    wOutput_32 = (wProportional_Term / (int32_t)pHandle->hKpDivisor)
              + (pHandle->wIntegralTerm / (int32_t)pHandle->hKiDivisor);
#endif

    if (wOutput_32 > hUpperOutputLimit)
 8007bd8:	4290      	cmp	r0, r2
 8007bda:	da03      	bge.n	8007be4 <PI_Controller+0x58>
    {
      wDischarge = hUpperOutputLimit - wOutput_32;
 8007bdc:	1a82      	subs	r2, r0, r2
    else
    {
      /* Nothing to do here */
    }

    pHandle->wIntegralTerm += wDischarge;
 8007bde:	4411      	add	r1, r2
 8007be0:	6099      	str	r1, [r3, #8]
    returnValue = (int16_t)wOutput_32;
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return (returnValue);
}
 8007be2:	bd10      	pop	{r4, pc}
    else if (wOutput_32 < hLowerOutputLimit)
 8007be4:	4594      	cmp	ip, r2
      wDischarge = hLowerOutputLimit - wOutput_32;
 8007be6:	bfc5      	ittet	gt
 8007be8:	ebac 0202 	subgt.w	r2, ip, r2
    pHandle->wIntegralTerm += wDischarge;
 8007bec:	1889      	addgt	r1, r1, r2
    returnValue = (int16_t)wOutput_32;
 8007bee:	b210      	sxthle	r0, r2
      wOutput_32 = hLowerOutputLimit;
 8007bf0:	4660      	movgt	r0, ip
    pHandle->wIntegralTerm += wDischarge;
 8007bf2:	6099      	str	r1, [r3, #8]
}
 8007bf4:	bd10      	pop	{r4, pc}
        if (pHandle->wIntegralTerm > 0)
 8007bf6:	2c00      	cmp	r4, #0
 8007bf8:	dddf      	ble.n	8007bba <PI_Controller+0x2e>
          if (wIntegral_Term > 0)
 8007bfa:	2900      	cmp	r1, #0
 8007bfc:	dddd      	ble.n	8007bba <PI_Controller+0x2e>
      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 8007bfe:	68d9      	ldr	r1, [r3, #12]
 8007c00:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8007c04:	42a1      	cmp	r1, r4
 8007c06:	d1e1      	bne.n	8007bcc <PI_Controller+0x40>
            wIntegral_sum_temp = INT32_MAX;
 8007c08:	468e      	mov	lr, r1
        pHandle->wIntegralTerm = wIntegral_sum_temp;
 8007c0a:	4671      	mov	r1, lr
 8007c0c:	e7de      	b.n	8007bcc <PI_Controller+0x40>
 8007c0e:	bf00      	nop
 8007c10:	80000001 	.word	0x80000001

08007c14 <PID_Controller>:
#endif
    int32_t wDifferential_Term;
    int32_t wDeltaError;
    int32_t wTemp_output;

    if (0 == pHandle->hKdGain) /* derivative terms not used */
 8007c14:	f9b0 2022 	ldrsh.w	r2, [r0, #34]	; 0x22
{
 8007c18:	b538      	push	{r3, r4, r5, lr}
    if (0 == pHandle->hKdGain) /* derivative terms not used */
 8007c1a:	b922      	cbnz	r2, 8007c26 <PID_Controller+0x12>
    {
      wTemp_output = PI_Controller(pHandle, wProcessVarError);
 8007c1c:	f7ff ffb6 	bl	8007b8c <PI_Controller>
 8007c20:	4603      	mov	r3, r0
    returnValue = (int16_t) wTemp_output;
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return (returnValue);
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	bd38      	pop	{r3, r4, r5, pc}
      wDeltaError = wProcessVarError - pHandle->wPrevProcessVarError;
 8007c26:	6a84      	ldr	r4, [r0, #40]	; 0x28
      wDifferential_Term >>= pHandle->hKdDivisorPOW2;
 8007c28:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
      pHandle->wPrevProcessVarError = wProcessVarError;
 8007c2a:	6281      	str	r1, [r0, #40]	; 0x28
      wDeltaError = wProcessVarError - pHandle->wPrevProcessVarError;
 8007c2c:	1b0c      	subs	r4, r1, r4
      wDifferential_Term = pHandle->hKdGain * wDeltaError;
 8007c2e:	fb02 f404 	mul.w	r4, r2, r4
      wDifferential_Term >>= pHandle->hKdDivisorPOW2;
 8007c32:	411c      	asrs	r4, r3
      wTemp_output = PI_Controller(pHandle, wProcessVarError) + wDifferential_Term;
 8007c34:	4605      	mov	r5, r0
 8007c36:	f7ff ffa9 	bl	8007b8c <PI_Controller>
      if (wTemp_output > pHandle->hUpperOutputLimit)
 8007c3a:	f9b5 3014 	ldrsh.w	r3, [r5, #20]
      wTemp_output = PI_Controller(pHandle, wProcessVarError) + wDifferential_Term;
 8007c3e:	4420      	add	r0, r4
      if (wTemp_output > pHandle->hUpperOutputLimit)
 8007c40:	4283      	cmp	r3, r0
 8007c42:	dbee      	blt.n	8007c22 <PID_Controller+0xe>
      else if (wTemp_output < pHandle->hLowerOutputLimit)
 8007c44:	f9b5 3016 	ldrsh.w	r3, [r5, #22]
    returnValue = (int16_t) wTemp_output;
 8007c48:	4298      	cmp	r0, r3
 8007c4a:	bfb8      	it	lt
 8007c4c:	4618      	movlt	r0, r3
 8007c4e:	b203      	sxth	r3, r0
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	bd38      	pop	{r3, r4, r5, pc}

08007c54 <PQD_CalcElMotorPower>:
  }
  else
  {
#endif
    int32_t wAux;
    qd_t Iqd = pHandle->pFOCVars->Iqd;
 8007c54:	6882      	ldr	r2, [r0, #8]
{
 8007c56:	b500      	push	{lr}
    qd_t Vqd = pHandle->pFOCVars->Vqd;

    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 8007c58:	89d1      	ldrh	r1, [r2, #14]
 8007c5a:	f8b2 e018 	ldrh.w	lr, [r2, #24]
    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
 8007c5e:	8993      	ldrh	r3, [r2, #12]
 8007c60:	f8b2 c016 	ldrh.w	ip, [r2, #22]
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 8007c64:	fb11 f20e 	smulbb	r2, r1, lr
    wAux /= 65536;
 8007c68:	fb13 230c 	smlabb	r3, r3, ip, r2
 8007c6c:	2b00      	cmp	r3, #0

    /* pHandle->hAvrgElMotorPower += (wAux - pHandle->hAvrgElMotorPower) >> 4 */
    pHandle->hAvrgElMotorPower += (int16_t)((wAux - (int32_t)pHandle->hAvrgElMotorPower) / 16);
 8007c6e:	f9b0 2000 	ldrsh.w	r2, [r0]
    wAux /= 65536;
 8007c72:	bfbc      	itt	lt
 8007c74:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00
 8007c78:	33ff      	addlt	r3, #255	; 0xff
    pHandle->hAvrgElMotorPower += (int16_t)((wAux - (int32_t)pHandle->hAvrgElMotorPower) / 16);
 8007c7a:	ebd2 4323 	rsbs	r3, r2, r3, asr #16
 8007c7e:	bf48      	it	mi
 8007c80:	330f      	addmi	r3, #15
 8007c82:	eb02 1223 	add.w	r2, r2, r3, asr #4
 8007c86:	8002      	strh	r2, [r0, #0]

#ifdef NULL_PTR_CHECK_PQD_MOT_POW_MEAS
  }
#endif
}
 8007c88:	f85d fb04 	ldr.w	pc, [sp], #4

08007c8c <PQD_Clear>:
    /* nothing to do */
  }
  else
  {
#endif
    pHandle->hAvrgElMotorPower = 0;
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	8003      	strh	r3, [r0, #0]
#ifdef NULL_PTR_CHECK_MOT_POW_MES
  }
#endif
}
 8007c90:	4770      	bx	lr
 8007c92:	bf00      	nop

08007c94 <PQD_GetAvrgElMotorPowerW>:
  * 
  * @param pHandle pointer on the related component instance.
  * @retval float_t The average measured motor power expressed in Watts.
  */
__weak float_t PQD_GetAvrgElMotorPowerW(const PQD_MotorPowMeas_Handle_t *pHandle)
{
 8007c94:	b510      	push	{r4, lr}
  else
  {
#endif

  /* First perform an integer multiplication, then a float one. */
  PowerW = ((float_t)pHandle->hAvrgElMotorPower * (float_t)VBS_GetAvBusVoltage_V(pHandle->pVBS)) * pHandle->ConvFact;
 8007c96:	f9b0 3000 	ldrsh.w	r3, [r0]
{
 8007c9a:	ed2d 8b02 	vpush	{d8}
 8007c9e:	4604      	mov	r4, r0
  PowerW = ((float_t)pHandle->hAvrgElMotorPower * (float_t)VBS_GetAvBusVoltage_V(pHandle->pVBS)) * pHandle->ConvFact;
 8007ca0:	68c0      	ldr	r0, [r0, #12]
 8007ca2:	ee08 3a10 	vmov	s16, r3
 8007ca6:	f7ff fbbf 	bl	8007428 <VBS_GetAvBusVoltage_V>
 8007caa:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8007cae:	edd4 7a01 	vldr	s15, [r4, #4]
 8007cb2:	ee07 0a10 	vmov	s14, r0
 8007cb6:	ee28 8a27 	vmul.f32	s16, s16, s15
 8007cba:	eeb8 0a47 	vcvt.f32.u32	s0, s14

#ifdef NULL_PTR_CHECK_PQD_MOT_POW_MEAS
  }
#endif
  return (PowerW);
}
 8007cbe:	ee28 0a00 	vmul.f32	s0, s16, s0
 8007cc2:	ecbd 8b02 	vpop	{d8}
 8007cc6:	bd10      	pop	{r4, pc}

08007cc8 <startTimers>:
  * When this function is called, TIM1 and/or TIM8 must be in a frozen state
  * with CNT, ARR, REP RATE and trigger correctly set (these settings are
  * usually performed in the Init method accordingly with the configuration)
  */
__weak void startTimers(void)
{
 8007cc8:	b410      	push	{r4}
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
  */
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return ((READ_BIT(RCC->APB1ENR1, Periphs) == Periphs) ? 1UL : 0UL);
 8007cca:	4b19      	ldr	r3, [pc, #100]	; (8007d30 <startTimers+0x68>)
 8007ccc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007cce:	07d2      	lsls	r2, r2, #31
 8007cd0:	b083      	sub	sp, #12
 8007cd2:	d416      	bmi.n	8007d02 <startTimers+0x3a>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8007cd4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007cd6:	f042 0201 	orr.w	r2, r2, #1
 8007cda:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8007cdc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8007cde:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007ce2:	f002 0201 	and.w	r2, r2, #1
 8007ce6:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8007ce8:	9a01      	ldr	r2, [sp, #4]
 8007cea:	694a      	ldr	r2, [r1, #20]
 8007cec:	f042 0201 	orr.w	r2, r2, #1
 8007cf0:	614a      	str	r2, [r1, #20]
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8007cf2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007cf4:	f022 0201 	bic.w	r2, r2, #1
 8007cf8:	659a      	str	r2, [r3, #88]	; 0x58
    trigOut = LL_TIM_ReadReg(TIM2, CR2) & TIM_CR2_MMS;
    LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_UPDATE);
    LL_TIM_GenerateEvent_UPDATE(TIM2);
    LL_TIM_SetTriggerOutput(TIM2, trigOut);
  }
}
 8007cfa:	b003      	add	sp, #12
 8007cfc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d00:	4770      	bx	lr
    trigOut = LL_TIM_ReadReg(TIM2, CR2) & TIM_CR2_MMS;
 8007d02:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8007d06:	480b      	ldr	r0, [pc, #44]	; (8007d34 <startTimers+0x6c>)
 8007d08:	685a      	ldr	r2, [r3, #4]
 8007d0a:	6859      	ldr	r1, [r3, #4]
 8007d0c:	4c0a      	ldr	r4, [pc, #40]	; (8007d38 <startTimers+0x70>)
 8007d0e:	4001      	ands	r1, r0
 8007d10:	f041 0120 	orr.w	r1, r1, #32
 8007d14:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8007d16:	6959      	ldr	r1, [r3, #20]
 8007d18:	f041 0101 	orr.w	r1, r1, #1
 8007d1c:	6159      	str	r1, [r3, #20]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8007d1e:	6859      	ldr	r1, [r3, #4]
 8007d20:	4022      	ands	r2, r4
 8007d22:	4001      	ands	r1, r0
 8007d24:	430a      	orrs	r2, r1
 8007d26:	605a      	str	r2, [r3, #4]
}
 8007d28:	b003      	add	sp, #12
 8007d2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d2e:	4770      	bx	lr
 8007d30:	40021000 	.word	0x40021000
 8007d34:	fdffff8f 	.word	0xfdffff8f
 8007d38:	02000070 	.word	0x02000070

08007d3c <waitForPolarizationEnd>:
  {
#endif
    uint16_t hCalibrationPeriodCounter;
    uint16_t hMaxPeriodsNumber;

    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 8007d3c:	3201      	adds	r2, #1
{
 8007d3e:	b570      	push	{r4, r5, r6, lr}
    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 8007d40:	0852      	lsrs	r2, r2, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8007d42:	f06f 0602 	mvn.w	r6, #2
 8007d46:	0155      	lsls	r5, r2, #5
 8007d48:	6106      	str	r6, [r0, #16]

    /* Wait for NB_CONVERSIONS to be executed */
    LL_TIM_ClearFlag_CC1(TIMx);
    hCalibrationPeriodCounter = 0u;
 8007d4a:	2200      	movs	r2, #0
    while (*cnt < NB_CONVERSIONS)
 8007d4c:	f893 c000 	ldrb.w	ip, [r3]
 8007d50:	f1bc 0f0f 	cmp.w	ip, #15
    {
      if ((uint32_t)ERROR == LL_TIM_IsActiveFlag_CC1(TIMx))
      {
        LL_TIM_ClearFlag_CC1(TIMx);
        hCalibrationPeriodCounter++;
 8007d54:	f102 0e01 	add.w	lr, r2, #1
    while (*cnt < NB_CONVERSIONS)
 8007d58:	d80c      	bhi.n	8007d74 <waitForPolarizationEnd+0x38>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8007d5a:	6904      	ldr	r4, [r0, #16]
 8007d5c:	07a4      	lsls	r4, r4, #30
 8007d5e:	d5f5      	bpl.n	8007d4c <waitForPolarizationEnd+0x10>
        hCalibrationPeriodCounter++;
 8007d60:	fa1f f28e 	uxth.w	r2, lr
        if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 8007d64:	4295      	cmp	r5, r2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8007d66:	6106      	str	r6, [r0, #16]
 8007d68:	d8f0      	bhi.n	8007d4c <waitForPolarizationEnd+0x10>
        {
          if (*cnt < NB_CONVERSIONS)
 8007d6a:	781c      	ldrb	r4, [r3, #0]
 8007d6c:	2c0f      	cmp	r4, #15
 8007d6e:	d8ed      	bhi.n	8007d4c <waitForPolarizationEnd+0x10>
          {
            *SWerror = 1u;
 8007d70:	2301      	movs	r3, #1
 8007d72:	800b      	strh	r3, [r1, #0]
      }
    }
#ifdef NULL_PTR_CHECK_POW_COM
  }
#endif
  }
 8007d74:	bd70      	pop	{r4, r5, r6, pc}
 8007d76:	bf00      	nop

08007d78 <R3_1_GetPhaseCurrents>:
  * @brief  Computes and stores in the handler the latest converted motor phase currents in ab_t format.
  *
  */
__weak void R3_1_GetPhaseCurrents(PWMC_Handle_t *pHdl, ab_t *Iab)
{
  if (MC_NULL == Iab)
 8007d78:	b1c1      	cbz	r1, 8007dac <R3_1_GetPhaseCurrents+0x34>

    PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;  //cstat !MISRAC2012-Rule-11.3
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007d7a:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
{
 8007d7e:	b470      	push	{r4, r5, r6}
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007d80:	e9d2 3400 	ldrd	r3, r4, [r2]
    ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
    uint8_t Sector;

    Sector = (uint8_t)pHandle->_Super.Sector;
    ADCDataReg1 = ADCx->JDR1;
 8007d84:	f8d3 5080 	ldr.w	r5, [r3, #128]	; 0x80
    ADCDataReg2 = ADCx->JDR2;
 8007d88:	f8d3 6084 	ldr.w	r6, [r3, #132]	; 0x84
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8007d8c:	6863      	ldr	r3, [r4, #4]
    Sector = (uint8_t)pHandle->_Super.Sector;
 8007d8e:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
 8007d92:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d9a:	6063      	str	r3, [r4, #4]

    /* disable ADC trigger source */
    /* LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4) */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    switch (Sector)
 8007d9c:	2a05      	cmp	r2, #5
 8007d9e:	f200 809b 	bhi.w	8007ed8 <R3_1_GetPhaseCurrents+0x160>
 8007da2:	e8df f002 	tbb	[pc, r2]
 8007da6:	3729      	.short	0x3729
 8007da8:	29040437 	.word	0x29040437
 8007dac:	4770      	bx	lr
      case SECTOR_4:
      case SECTOR_5:
      {
        /* Current on Phase C is not accessible     */
        /* Ia = PhaseAOffset - ADC converted value) */
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 8007dae:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88

        /* Saturation of Ia */
        if (Aux < -INT16_MAX)
 8007db2:	4b4d      	ldr	r3, [pc, #308]	; (8007ee8 <R3_1_GetPhaseCurrents+0x170>)
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 8007db4:	1b52      	subs	r2, r2, r5
        if (Aux < -INT16_MAX)
 8007db6:	429a      	cmp	r2, r3
 8007db8:	db05      	blt.n	8007dc6 <R3_1_GetPhaseCurrents+0x4e>
        {
          Iab->a = -INT16_MAX;
        }
        else  if (Aux > INT16_MAX)
 8007dba:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
        {
          Iab->a = INT16_MAX;
        }
        else
        {
          Iab->a = (int16_t)Aux;
 8007dbe:	bfb4      	ite	lt
 8007dc0:	b213      	sxthlt	r3, r2
 8007dc2:	f647 73ff 	movwge	r3, #32767	; 0x7fff
        }

        /* Ib = PhaseBOffset - ADC converted value) */
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg2);
 8007dc6:	f8d0 508c 	ldr.w	r5, [r0, #140]	; 0x8c

        /* Saturation of Ib */
        if (Aux < -INT16_MAX)
 8007dca:	4a47      	ldr	r2, [pc, #284]	; (8007ee8 <R3_1_GetPhaseCurrents+0x170>)
          Iab->a = -INT16_MAX;
 8007dcc:	800b      	strh	r3, [r1, #0]
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg2);
 8007dce:	1bad      	subs	r5, r5, r6
        if (Aux < -INT16_MAX)
 8007dd0:	4295      	cmp	r5, r2
      }

      default:
        break;
    }
    Iab->a = -Iab->a;
 8007dd2:	b29b      	uxth	r3, r3
        if (Aux < -INT16_MAX)
 8007dd4:	da2c      	bge.n	8007e30 <R3_1_GetPhaseCurrents+0xb8>
    Iab->a = -Iab->a;
 8007dd6:	425c      	negs	r4, r3
 8007dd8:	b224      	sxth	r4, r4
 8007dda:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8007dde:	f248 0501 	movw	r5, #32769	; 0x8001
    Iab->b = -Iab->b;
    pHandle->_Super.Ia = Iab->a;
    pHandle->_Super.Ib = Iab->b;
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8007de2:	442b      	add	r3, r5
    Iab->a = -Iab->a;
 8007de4:	800c      	strh	r4, [r1, #0]
    Iab->b = -Iab->b;
 8007de6:	804a      	strh	r2, [r1, #2]
    pHandle->_Super.Ia = Iab->a;
 8007de8:	f8a0 4062 	strh.w	r4, [r0, #98]	; 0x62
    pHandle->_Super.Ib = Iab->b;
 8007dec:	f8a0 2064 	strh.w	r2, [r0, #100]	; 0x64
  }
}
 8007df0:	bc70      	pop	{r4, r5, r6}
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8007df2:	f8a0 3066 	strh.w	r3, [r0, #102]	; 0x66
}
 8007df6:	4770      	bx	lr
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg1);
 8007df8:	f8d0 408c 	ldr.w	r4, [r0, #140]	; 0x8c
        if (Aux < -INT16_MAX)
 8007dfc:	4a3a      	ldr	r2, [pc, #232]	; (8007ee8 <R3_1_GetPhaseCurrents+0x170>)
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg1);
 8007dfe:	1b64      	subs	r4, r4, r5
        if (Aux < -INT16_MAX)
 8007e00:	4294      	cmp	r4, r2
 8007e02:	db1d      	blt.n	8007e40 <R3_1_GetPhaseCurrents+0xc8>
        else  if (Aux > INT16_MAX)
 8007e04:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8007e08:	db61      	blt.n	8007ece <R3_1_GetPhaseCurrents+0x156>
 8007e0a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8007e0e:	461d      	mov	r5, r3
 8007e10:	461c      	mov	r4, r3
 8007e12:	e01b      	b.n	8007e4c <R3_1_GetPhaseCurrents+0xd4>
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 8007e14:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
        if (Aux < -INT16_MAX)
 8007e18:	4c33      	ldr	r4, [pc, #204]	; (8007ee8 <R3_1_GetPhaseCurrents+0x170>)
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 8007e1a:	1b5d      	subs	r5, r3, r5
        if (Aux < -INT16_MAX)
 8007e1c:	42a5      	cmp	r5, r4
 8007e1e:	db25      	blt.n	8007e6c <R3_1_GetPhaseCurrents+0xf4>
        else  if (Aux > INT16_MAX)
 8007e20:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 8007e24:	db4e      	blt.n	8007ec4 <R3_1_GetPhaseCurrents+0x14c>
 8007e26:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8007e2a:	4613      	mov	r3, r2
 8007e2c:	4615      	mov	r5, r2
 8007e2e:	e023      	b.n	8007e78 <R3_1_GetPhaseCurrents+0x100>
        else  if (Aux > INT16_MAX)
 8007e30:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 8007e34:	db40      	blt.n	8007eb8 <R3_1_GetPhaseCurrents+0x140>
    Iab->a = -Iab->a;
 8007e36:	425c      	negs	r4, r3
 8007e38:	b224      	sxth	r4, r4
 8007e3a:	f647 75ff 	movw	r5, #32767	; 0x7fff
 8007e3e:	e7d0      	b.n	8007de2 <R3_1_GetPhaseCurrents+0x6a>
 8007e40:	4613      	mov	r3, r2
 8007e42:	f248 0501 	movw	r5, #32769	; 0x8001
 8007e46:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8007e4a:	461c      	mov	r4, r3
          Iab->b = -INT16_MAX;
 8007e4c:	804b      	strh	r3, [r1, #2]
        Aux = (int32_t)(ADCDataReg2) - (int32_t)(pHandle->PhaseCOffset); /* -Ic */
 8007e4e:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
 8007e52:	1af3      	subs	r3, r6, r3
        Aux -= (int32_t)Iab->b;             /* Ia  */
 8007e54:	1b1b      	subs	r3, r3, r4
        if (Aux > INT16_MAX)
 8007e56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e5a:	da1d      	bge.n	8007e98 <R3_1_GetPhaseCurrents+0x120>
        else  if (Aux < -INT16_MAX)
 8007e5c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8007e60:	dc26      	bgt.n	8007eb0 <R3_1_GetPhaseCurrents+0x138>
 8007e62:	f647 74ff 	movw	r4, #32767	; 0x7fff
 8007e66:	f248 0301 	movw	r3, #32769	; 0x8001
 8007e6a:	e7ba      	b.n	8007de2 <R3_1_GetPhaseCurrents+0x6a>
 8007e6c:	4622      	mov	r2, r4
 8007e6e:	f248 0301 	movw	r3, #32769	; 0x8001
 8007e72:	f647 74ff 	movw	r4, #32767	; 0x7fff
 8007e76:	4615      	mov	r5, r2
          Iab->a = -INT16_MAX;
 8007e78:	800a      	strh	r2, [r1, #0]
        Aux = (int32_t)(ADCDataReg2) - (int32_t)(pHandle->PhaseCOffset); /* -Ic */
 8007e7a:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8007e7e:	1ab2      	subs	r2, r6, r2
        Aux -= (int32_t)Iab->a;             /* Ib */
 8007e80:	1b52      	subs	r2, r2, r5
        if (Aux > INT16_MAX)
 8007e82:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8007e86:	da0b      	bge.n	8007ea0 <R3_1_GetPhaseCurrents+0x128>
        else  if (Aux < -INT16_MAX)
 8007e88:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
 8007e8c:	dc0c      	bgt.n	8007ea8 <R3_1_GetPhaseCurrents+0x130>
 8007e8e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8007e92:	f248 0501 	movw	r5, #32769	; 0x8001
 8007e96:	e7a4      	b.n	8007de2 <R3_1_GetPhaseCurrents+0x6a>
 8007e98:	4c13      	ldr	r4, [pc, #76]	; (8007ee8 <R3_1_GetPhaseCurrents+0x170>)
 8007e9a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8007e9e:	e7a0      	b.n	8007de2 <R3_1_GetPhaseCurrents+0x6a>
 8007ea0:	4a11      	ldr	r2, [pc, #68]	; (8007ee8 <R3_1_GetPhaseCurrents+0x170>)
 8007ea2:	f647 75ff 	movw	r5, #32767	; 0x7fff
 8007ea6:	e79c      	b.n	8007de2 <R3_1_GetPhaseCurrents+0x6a>
    Iab->b = -Iab->b;
 8007ea8:	b295      	uxth	r5, r2
 8007eaa:	426a      	negs	r2, r5
 8007eac:	b212      	sxth	r2, r2
 8007eae:	e798      	b.n	8007de2 <R3_1_GetPhaseCurrents+0x6a>
    Iab->a = -Iab->a;
 8007eb0:	b29b      	uxth	r3, r3
 8007eb2:	425c      	negs	r4, r3
 8007eb4:	b224      	sxth	r4, r4
 8007eb6:	e794      	b.n	8007de2 <R3_1_GetPhaseCurrents+0x6a>
    Iab->b = -Iab->b;
 8007eb8:	b2ad      	uxth	r5, r5
    Iab->a = -Iab->a;
 8007eba:	425c      	negs	r4, r3
    Iab->b = -Iab->b;
 8007ebc:	426a      	negs	r2, r5
    Iab->a = -Iab->a;
 8007ebe:	b224      	sxth	r4, r4
    Iab->b = -Iab->b;
 8007ec0:	b212      	sxth	r2, r2
 8007ec2:	e78e      	b.n	8007de2 <R3_1_GetPhaseCurrents+0x6a>
    Iab->a = -Iab->a;
 8007ec4:	b2ab      	uxth	r3, r5
 8007ec6:	425c      	negs	r4, r3
          Iab->a = (int16_t)Aux;
 8007ec8:	b22a      	sxth	r2, r5
    Iab->a = -Iab->a;
 8007eca:	b224      	sxth	r4, r4
 8007ecc:	e7d4      	b.n	8007e78 <R3_1_GetPhaseCurrents+0x100>
    Iab->b = -Iab->b;
 8007ece:	b2a5      	uxth	r5, r4
 8007ed0:	426a      	negs	r2, r5
          Iab->b = (int16_t)Aux;
 8007ed2:	b223      	sxth	r3, r4
    Iab->b = -Iab->b;
 8007ed4:	b212      	sxth	r2, r2
 8007ed6:	e7b9      	b.n	8007e4c <R3_1_GetPhaseCurrents+0xd4>
    Iab->a = -Iab->a;
 8007ed8:	880b      	ldrh	r3, [r1, #0]
    Iab->b = -Iab->b;
 8007eda:	884d      	ldrh	r5, [r1, #2]
    Iab->a = -Iab->a;
 8007edc:	425c      	negs	r4, r3
    Iab->b = -Iab->b;
 8007ede:	426a      	negs	r2, r5
    Iab->a = -Iab->a;
 8007ee0:	b224      	sxth	r4, r4
    Iab->b = -Iab->b;
 8007ee2:	b212      	sxth	r2, r2
 8007ee4:	e77d      	b.n	8007de2 <R3_1_GetPhaseCurrents+0x6a>
 8007ee6:	bf00      	nop
 8007ee8:	ffff8001 	.word	0xffff8001

08007eec <R3_1_SetADCSampPointPolarization>:
  *
  * @param  pHdl: Handler of the current instance of the PWM component.
  * @retval uint16_t Returns the return value of R3_1_WriteTIMRegisters.
  */
uint16_t R3_1_SetADCSampPointPolarization(PWMC_Handle_t *pHdl)
{
 8007eec:	b410      	push	{r4}
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007eee:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
  pHandle->_Super.Sector = pHandle->PolarizationSector;
 8007ef2:	f890 4099 	ldrb.w	r4, [r0, #153]	; 0x99
 8007ef6:	f880 407c 	strb.w	r4, [r0, #124]	; 0x7c
  return R3_1_WriteTIMRegisters(&pHandle->_Super, (pHandle->Half_PWMPeriod - (uint16_t)1));
 8007efa:	f8b0 2094 	ldrh.w	r2, [r0, #148]	; 0x94
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007efe:	685b      	ldr	r3, [r3, #4]
  uint16_t Aux;


  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t) pHandle->_Super.CntPhA);
 8007f00:	f8b0 4050 	ldrh.w	r4, [r0, #80]	; 0x50
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007f04:	635c      	str	r4, [r3, #52]	; 0x34
  return R3_1_WriteTIMRegisters(&pHandle->_Super, (pHandle->Half_PWMPeriod - (uint16_t)1));
 8007f06:	3a01      	subs	r2, #1
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t) pHandle->_Super.CntPhB);
 8007f08:	f8b0 4052 	ldrh.w	r4, [r0, #82]	; 0x52
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t) pHandle->_Super.CntPhC);
 8007f0c:	f8b0 0054 	ldrh.w	r0, [r0, #84]	; 0x54
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007f10:	639c      	str	r4, [r3, #56]	; 0x38
  return R3_1_WriteTIMRegisters(&pHandle->_Super, (pHandle->Half_PWMPeriod - (uint16_t)1));
 8007f12:	b292      	uxth	r2, r2
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007f14:	63d8      	str	r0, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 8007f16:	641a      	str	r2, [r3, #64]	; 0x40
  LL_TIM_OC_SetCompareCH4(TIMx, (uint32_t) SamplingPoint);

  /* Limit for update event */

//  if ( LL_TIM_CC_IsEnabledChannel(TIMx, LL_TIM_CHANNEL_CH4) == 1u )
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 8007f18:	4904      	ldr	r1, [pc, #16]	; (8007f2c <R3_1_SetADCSampPointPolarization+0x40>)
 8007f1a:	685b      	ldr	r3, [r3, #4]
}
 8007f1c:	f85d 4b04 	ldr.w	r4, [sp], #4
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 8007f20:	420b      	tst	r3, r1
}
 8007f22:	bf14      	ite	ne
 8007f24:	2001      	movne	r0, #1
 8007f26:	2000      	moveq	r0, #0
 8007f28:	4770      	bx	lr
 8007f2a:	bf00      	nop
 8007f2c:	02000070 	.word	0x02000070

08007f30 <R3_1_HFCurrentsPolarizationAB>:
  * @param  Iab: Pointer to the structure that will receive motor current
  *         of phase A and B in ab_t format.
  */
static void R3_1_HFCurrentsPolarizationAB(PWMC_Handle_t *pHdl, ab_t *Iab)
{
  if (MC_NULL == Iab)
 8007f30:	b321      	cbz	r1, 8007f7c <R3_1_HFCurrentsPolarizationAB+0x4c>
#endif /* __ICCARM__ */
    PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007f32:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
 8007f36:	e9d2 3200 	ldrd	r3, r2, [r2]
{
 8007f3a:	b430      	push	{r4, r5}
    ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
    uint32_t ADCDataReg1 = ADCx->JDR1;
 8007f3c:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
    uint32_t ADCDataReg2 = ADCx->JDR2;
 8007f40:	f8d3 5084 	ldr.w	r5, [r3, #132]	; 0x84
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8007f44:	6853      	ldr	r3, [r2, #4]
 8007f46:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007f4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f4e:	6053      	str	r3, [r2, #4]

    /* disable ADC trigger source */
    /* LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4) */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    if (pHandle->PolarizationCounter < NB_CONVERSIONS)
 8007f50:	f890 3098 	ldrb.w	r3, [r0, #152]	; 0x98
 8007f54:	2b0f      	cmp	r3, #15
 8007f56:	d80d      	bhi.n	8007f74 <R3_1_HFCurrentsPolarizationAB+0x44>
    {
      pHandle-> PhaseAOffset += ADCDataReg1;
 8007f58:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
      pHandle-> PhaseBOffset += ADCDataReg2;
 8007f5c:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
      pHandle-> PhaseAOffset += ADCDataReg1;
 8007f60:	441c      	add	r4, r3
      pHandle->PolarizationCounter++;
 8007f62:	f890 3098 	ldrb.w	r3, [r0, #152]	; 0x98
      pHandle-> PhaseBOffset += ADCDataReg2;
 8007f66:	442a      	add	r2, r5
      pHandle->PolarizationCounter++;
 8007f68:	3301      	adds	r3, #1
      pHandle-> PhaseBOffset += ADCDataReg2;
 8007f6a:	e9c0 4222 	strd	r4, r2, [r0, #136]	; 0x88
      pHandle->PolarizationCounter++;
 8007f6e:	b2db      	uxtb	r3, r3
 8007f70:	f880 3098 	strb.w	r3, [r0, #152]	; 0x98
    {
      /* Nothing to do */
    }

    /* during offset calibration no current is flowing in the phases */
    Iab->a = 0;
 8007f74:	2300      	movs	r3, #0
    Iab->b = 0;
  }
}
 8007f76:	bc30      	pop	{r4, r5}
    Iab->a = 0;
 8007f78:	600b      	str	r3, [r1, #0]
}
 8007f7a:	4770      	bx	lr
 8007f7c:	4770      	bx	lr
 8007f7e:	bf00      	nop

08007f80 <R3_1_HFCurrentsPolarizationC>:
  *                Min value: 0 (low sides ON)
  *                Max value: PWM_PERIOD_CYCLES/2 (low sides OFF)
  */
static void R3_1_HFCurrentsPolarizationC(PWMC_Handle_t *pHdl, ab_t *Iab)
{
  if (MC_NULL == Iab)
 8007f80:	b301      	cbz	r1, 8007fc4 <R3_1_HFCurrentsPolarizationC+0x44>
#endif /* __ICCARM__ */
    PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007f82:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
    ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 8007f86:	e9d3 3200 	ldrd	r3, r2, [r3]
{
 8007f8a:	b410      	push	{r4}
    uint32_t ADCDataReg2 = ADCx->JDR2;
 8007f8c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007f90:	6853      	ldr	r3, [r2, #4]
 8007f92:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f9a:	6053      	str	r3, [r2, #4]

    /* disable ADC trigger source */
    /* LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4) */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    if (pHandle->PolarizationCounter < NB_CONVERSIONS)
 8007f9c:	f890 3098 	ldrb.w	r3, [r0, #152]	; 0x98
 8007fa0:	2b0f      	cmp	r3, #15
 8007fa2:	d80a      	bhi.n	8007fba <R3_1_HFCurrentsPolarizationC+0x3a>
    {
      /* Phase C is read from SECTOR_1, second value */
      pHandle-> PhaseCOffset += ADCDataReg2;
      pHandle->PolarizationCounter++;
 8007fa4:	f890 3098 	ldrb.w	r3, [r0, #152]	; 0x98
      pHandle-> PhaseCOffset += ADCDataReg2;
 8007fa8:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
      pHandle->PolarizationCounter++;
 8007fac:	3301      	adds	r3, #1
      pHandle-> PhaseCOffset += ADCDataReg2;
 8007fae:	4422      	add	r2, r4
      pHandle->PolarizationCounter++;
 8007fb0:	b2db      	uxtb	r3, r3
      pHandle-> PhaseCOffset += ADCDataReg2;
 8007fb2:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
      pHandle->PolarizationCounter++;
 8007fb6:	f880 3098 	strb.w	r3, [r0, #152]	; 0x98
    {
      /* Nothing to do */
    }

    /* during offset calibration no current is flowing in the phases */
    Iab->a = 0;
 8007fba:	2300      	movs	r3, #0
    Iab->b = 0;
  }
}
 8007fbc:	f85d 4b04 	ldr.w	r4, [sp], #4
    Iab->a = 0;
 8007fc0:	600b      	str	r3, [r1, #0]
}
 8007fc2:	4770      	bx	lr
 8007fc4:	4770      	bx	lr
 8007fc6:	bf00      	nop

08007fc8 <R3_1_SwitchOnPWM>:
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007fc8:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
  pHandle->ADCRegularLocked = true;

  pHandle->_Super.TurnOnLowSidesAction = false;

  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
 8007fcc:	f8b0 2094 	ldrh.w	r2, [r0, #148]	; 0x94
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007fd0:	685b      	ldr	r3, [r3, #4]
  pHandle->ADCRegularLocked = true;
 8007fd2:	f04f 0c01 	mov.w	ip, #1
{
 8007fd6:	b530      	push	{r4, r5, lr}
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
 8007fd8:	fa22 f10c 	lsr.w	r1, r2, ip
  pHandle->_Super.TurnOnLowSidesAction = false;
 8007fdc:	f04f 0e00 	mov.w	lr, #0
 8007fe0:	f880 e07e 	strb.w	lr, [r0, #126]	; 0x7e
  pHandle->ADCRegularLocked = true;
 8007fe4:	f880 c0a0 	strb.w	ip, [r0, #160]	; 0xa0
  LL_TIM_OC_SetCompareCH2(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
  LL_TIM_OC_SetCompareCH3(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
  LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t)pHandle->Half_PWMPeriod - (uint32_t)5));
 8007fe8:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007fea:	6359      	str	r1, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007fec:	6399      	str	r1, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007fee:	63d9      	str	r1, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007ff0:	f06f 0101 	mvn.w	r1, #1
  WRITE_REG(TIMx->CCR4, CompareValue);
 8007ff4:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007ff6:	6119      	str	r1, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8007ff8:	691a      	ldr	r2, [r3, #16]
 8007ffa:	07d2      	lsls	r2, r2, #31
 8007ffc:	d5fc      	bpl.n	8007ff8 <R3_1_SwitchOnPWM+0x30>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007ffe:	f06f 0201 	mvn.w	r2, #1
 8008002:	611a      	str	r2, [r3, #16]
    /* Nothing to do */
  }
  LL_TIM_ClearFlag_UPDATE(TIMx);

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8008004:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008006:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800800a:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800800c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800800e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008012:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs(TIMx);

  if ((ES_GPIO == pHandle->_Super.LowSideOutputs))
 8008014:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
 8008018:	2a02      	cmp	r2, #2
 800801a:	d007      	beq.n	800802c <R3_1_SwitchOnPWM+0x64>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800801c:	f06f 0201 	mvn.w	r2, #1
 8008020:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8008022:	68da      	ldr	r2, [r3, #12]
 8008024:	f042 0201 	orr.w	r2, r2, #1
 8008028:	60da      	str	r2, [r3, #12]
  }
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE(TIMx);
  /* Enable Update IRQ */
  LL_TIM_EnableIT_UPDATE(TIMx);
}
 800802a:	bd30      	pop	{r4, r5, pc}
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0U)
 800802c:	6a19      	ldr	r1, [r3, #32]
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 800802e:	f8b0 5048 	ldrh.w	r5, [r0, #72]	; 0x48
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0U)
 8008032:	f240 5255 	movw	r2, #1365	; 0x555
 8008036:	4211      	tst	r1, r2
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 8008038:	e9d0 140f 	ldrd	r1, r4, [r0, #60]	; 0x3c
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800803c:	6c42      	ldr	r2, [r0, #68]	; 0x44
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0U)
 800803e:	d007      	beq.n	8008050 <R3_1_SwitchOnPWM+0x88>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 8008040:	618d      	str	r5, [r1, #24]
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 8008042:	f8b0 504a 	ldrh.w	r5, [r0, #74]	; 0x4a
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8008046:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
 800804a:	61a5      	str	r5, [r4, #24]
 800804c:	6191      	str	r1, [r2, #24]
}
 800804e:	e7e5      	b.n	800801c <R3_1_SwitchOnPWM+0x54>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8008050:	628d      	str	r5, [r1, #40]	; 0x28
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 8008052:	f8b0 504a 	ldrh.w	r5, [r0, #74]	; 0x4a
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8008056:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
 800805a:	62a5      	str	r5, [r4, #40]	; 0x28
 800805c:	6291      	str	r1, [r2, #40]	; 0x28
}
 800805e:	e7dd      	b.n	800801c <R3_1_SwitchOnPWM+0x54>

08008060 <R3_1_SwitchOffPWM>:
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008060:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c

  pHandle->_Super.TurnOnLowSidesAction = false;

  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs(TIMx);
  if (true == pHandle->_Super.BrakeActionLock)
 8008064:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008068:	685b      	ldr	r3, [r3, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 800806a:	68da      	ldr	r2, [r3, #12]
 800806c:	f022 0201 	bic.w	r2, r2, #1
 8008070:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8008072:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  pHandle->_Super.TurnOnLowSidesAction = false;
 8008074:	f04f 0c00 	mov.w	ip, #0
 8008078:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800807c:	f880 c07e 	strb.w	ip, [r0, #126]	; 0x7e
 8008080:	645a      	str	r2, [r3, #68]	; 0x44
  if (true == pHandle->_Super.BrakeActionLock)
 8008082:	b919      	cbnz	r1, 800808c <R3_1_SwitchOffPWM+0x2c>
  {
    /* Nothing to do */
  }
  else
  {
    if (ES_GPIO == pHandle->_Super.LowSideOutputs)
 8008084:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
 8008088:	2a02      	cmp	r2, #2
 800808a:	d00c      	beq.n	80080a6 <R3_1_SwitchOffPWM+0x46>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800808c:	f06f 0201 	mvn.w	r2, #1
 8008090:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8008092:	691a      	ldr	r2, [r3, #16]
 8008094:	07d2      	lsls	r2, r2, #31
 8008096:	d5fc      	bpl.n	8008092 <R3_1_SwitchOffPWM+0x32>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008098:	f06f 0101 	mvn.w	r1, #1
    /* Nothing to do */
  }
  LL_TIM_ClearFlag_UPDATE(TIMx);

  /* We allow ADC usage for regular conversion on Systick*/
  pHandle->ADCRegularLocked = false;
 800809c:	2200      	movs	r2, #0
 800809e:	6119      	str	r1, [r3, #16]
 80080a0:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
 80080a4:	4770      	bx	lr
{
 80080a6:	b430      	push	{r4, r5}
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 80080a8:	e9d0 410f 	ldrd	r4, r1, [r0, #60]	; 0x3c
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 80080ac:	f8b0 5048 	ldrh.w	r5, [r0, #72]	; 0x48
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 80080b0:	6c42      	ldr	r2, [r0, #68]	; 0x44
  WRITE_REG(GPIOx->BRR, PinMask);
 80080b2:	62a5      	str	r5, [r4, #40]	; 0x28
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 80080b4:	f8b0 404a 	ldrh.w	r4, [r0, #74]	; 0x4a
 80080b8:	628c      	str	r4, [r1, #40]	; 0x28
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 80080ba:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
 80080be:	6291      	str	r1, [r2, #40]	; 0x28
 80080c0:	f06f 0201 	mvn.w	r2, #1
 80080c4:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80080c6:	691a      	ldr	r2, [r3, #16]
 80080c8:	07d1      	lsls	r1, r2, #31
 80080ca:	d5fc      	bpl.n	80080c6 <R3_1_SwitchOffPWM+0x66>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80080cc:	f06f 0101 	mvn.w	r1, #1
  pHandle->ADCRegularLocked = false;
 80080d0:	2200      	movs	r2, #0
 80080d2:	6119      	str	r1, [r3, #16]
}
 80080d4:	bc30      	pop	{r4, r5}
  pHandle->ADCRegularLocked = false;
 80080d6:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
}
 80080da:	4770      	bx	lr

080080dc <R3_1_RLGetPhaseCurrents>:
  }
  else
  {
#endif
    PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80080dc:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
    int32_t wAux;

    /* Disable ADC trigger source */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    wAux = ((int32_t)pHandle->PhaseBOffset)
 80080e0:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
{
 80080e4:	b410      	push	{r4}
    ADC_TypeDef *ADCx = pHandle->pParams_str->ADCx;
 80080e6:	e9d3 4200 	ldrd	r4, r2, [r3]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80080ea:	6853      	ldr	r3, [r2, #4]
 80080ec:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80080f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080f4:	6053      	str	r3, [r2, #4]
         - (int32_t)ADCx->JDR2;
 80080f6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84

    /* Check saturation */
    if (wAux > -INT16_MAX)
 80080fa:	4c0c      	ldr	r4, [pc, #48]	; (800812c <R3_1_RLGetPhaseCurrents+0x50>)
    wAux = ((int32_t)pHandle->PhaseBOffset)
 80080fc:	1ac2      	subs	r2, r0, r3
    if (wAux > -INT16_MAX)
 80080fe:	42a2      	cmp	r2, r4
 8008100:	db06      	blt.n	8008110 <R3_1_RLGetPhaseCurrents+0x34>
    {
      if (wAux < INT16_MAX)
 8008102:	f647 74fe 	movw	r4, #32766	; 0x7ffe
 8008106:	42a2      	cmp	r2, r4
 8008108:	dc0d      	bgt.n	8008126 <R3_1_RLGetPhaseCurrents+0x4a>
    }
    else
    {
      wAux = -INT16_MAX;
    }
    wAux = -wAux;
 800810a:	1a1b      	subs	r3, r3, r0
    pStator_Currents->a = (int16_t)wAux;
 800810c:	b21b      	sxth	r3, r3
 800810e:	e001      	b.n	8008114 <R3_1_RLGetPhaseCurrents+0x38>
 8008110:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8008114:	2200      	movs	r2, #0
 8008116:	f363 020f 	bfi	r2, r3, #0, #16
 800811a:	f363 421f 	bfi	r2, r3, #16, #16
    pStator_Currents->b = (int16_t)wAux;
#ifdef NULL_PTR_CHECK_R3_1_PWM_CURR_FDB
  }
#endif
}
 800811e:	f85d 4b04 	ldr.w	r4, [sp], #4
    pStator_Currents->a = (int16_t)wAux;
 8008122:	600a      	str	r2, [r1, #0]
}
 8008124:	4770      	bx	lr
 8008126:	4b02      	ldr	r3, [pc, #8]	; (8008130 <R3_1_RLGetPhaseCurrents+0x54>)
 8008128:	e7f4      	b.n	8008114 <R3_1_RLGetPhaseCurrents+0x38>
 800812a:	bf00      	nop
 800812c:	ffff8002 	.word	0xffff8002
 8008130:	ffff8001 	.word	0xffff8001

08008134 <R3_1_RLSwitchOnPWM>:
  }
  else
  {
#endif
    PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008134:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
    ADC_TypeDef *ADCx = pHandle->pParams_str->ADCx;
 8008138:	e9d2 1300 	ldrd	r1, r3, [r2]
{
 800813c:	b430      	push	{r4, r5}
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800813e:	f06f 0201 	mvn.w	r2, #1

    pHandle->ADCRegularLocked=true;
 8008142:	2401      	movs	r4, #1
 8008144:	f880 40a0 	strb.w	r4, [r0, #160]	; 0xa0
 8008148:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800814a:	691a      	ldr	r2, [r3, #16]
 800814c:	07d4      	lsls	r4, r2, #31
 800814e:	d5fc      	bpl.n	800814a <R3_1_RLSwitchOnPWM+0x16>
    }
    /* Clear Update Flag */
    LL_TIM_ClearFlag_UPDATE(TIMx);

    LL_TIM_OC_SetCompareCH1(TIMx, 1U);
    LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t )pHandle->Half_PWMPeriod) - 5U);
 8008150:	f8b0 2094 	ldrh.w	r2, [r0, #148]	; 0x94
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008154:	f06f 0401 	mvn.w	r4, #1
 8008158:	611c      	str	r4, [r3, #16]
 800815a:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR1, CompareValue);
 800815c:	2401      	movs	r4, #1
 800815e:	635c      	str	r4, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR4, CompareValue);
 8008160:	641a      	str	r2, [r3, #64]	; 0x40
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8008162:	691a      	ldr	r2, [r3, #16]
 8008164:	07d2      	lsls	r2, r2, #31
 8008166:	d5fc      	bpl.n	8008162 <R3_1_RLSwitchOnPWM+0x2e>
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8008168:	68da      	ldr	r2, [r3, #12]
 800816a:	f042 0201 	orr.w	r2, r2, #1
 800816e:	60da      	str	r2, [r3, #12]

    /* Enable TIMx update interrupt */
    LL_TIM_EnableIT_UPDATE(TIMx);

    /* Main PWM Output Enable */
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE ;
 8008170:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008172:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008176:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8008178:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800817a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800817e:	645a      	str	r2, [r3, #68]	; 0x44
    LL_TIM_EnableAllOutputs(TIMx);

    if (ES_GPIO ==  pHandle->_Super.LowSideOutputs)
 8008180:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
 8008184:	2a02      	cmp	r2, #2
 8008186:	d00c      	beq.n	80081a2 <R3_1_RLSwitchOnPWM+0x6e>
      /* Nothing to do */
    }

    /* Set the sector that correspond to Phase B and C sampling
     * B will be sampled by ADCx */
    pHdl->Sector = SECTOR_4;
 8008188:	2303      	movs	r3, #3
 800818a:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  MODIFY_REG(ADCx->CR,
 800818e:	688b      	ldr	r3, [r1, #8]
 8008190:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008194:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008198:	f043 0308 	orr.w	r3, r3, #8
    LL_ADC_INJ_StartConversion(ADCx);

#ifdef NULL_PTR_CHECK_R3_1_PWM_CURR_FDB
  }
#endif
}
 800819c:	bc30      	pop	{r4, r5}
 800819e:	608b      	str	r3, [r1, #8]
 80081a0:	4770      	bx	lr
      if ((TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0U)
 80081a2:	6a1a      	ldr	r2, [r3, #32]
        LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 80081a4:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80081a6:	f8b0 5048 	ldrh.w	r5, [r0, #72]	; 0x48
      if ((TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0U)
 80081aa:	f240 5355 	movw	r3, #1365	; 0x555
 80081ae:	421a      	tst	r2, r3
        LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 80081b0:	e9d0 2310 	ldrd	r2, r3, [r0, #64]	; 0x40
      if ((TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0U)
 80081b4:	d007      	beq.n	80081c6 <R3_1_RLSwitchOnPWM+0x92>
  WRITE_REG(GPIOx->BSRR, PinMask);
 80081b6:	61a5      	str	r5, [r4, #24]
        LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 80081b8:	f8b0 404a 	ldrh.w	r4, [r0, #74]	; 0x4a
 80081bc:	6194      	str	r4, [r2, #24]
        LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 80081be:	f8b0 204c 	ldrh.w	r2, [r0, #76]	; 0x4c
  WRITE_REG(GPIOx->BRR, PinMask);
 80081c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80081c4:	e7e0      	b.n	8008188 <R3_1_RLSwitchOnPWM+0x54>
  WRITE_REG(GPIOx->BRR, PinMask);
 80081c6:	62a5      	str	r5, [r4, #40]	; 0x28
        LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 80081c8:	f8b0 404a 	ldrh.w	r4, [r0, #74]	; 0x4a
 80081cc:	6294      	str	r4, [r2, #40]	; 0x28
        LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 80081ce:	f8b0 204c 	ldrh.w	r2, [r0, #76]	; 0x4c
 80081d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80081d4:	e7d8      	b.n	8008188 <R3_1_RLSwitchOnPWM+0x54>
 80081d6:	bf00      	nop

080081d8 <R3_1_TurnOnLowSides>:
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80081d8:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 80081dc:	685b      	ldr	r3, [r3, #4]
  pHandle->_Super.TurnOnLowSidesAction = true;
 80081de:	f04f 0c01 	mov.w	ip, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80081e2:	f06f 0201 	mvn.w	r2, #1
 80081e6:	f880 c07e 	strb.w	ip, [r0, #126]	; 0x7e
 80081ea:	611a      	str	r2, [r3, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80081ec:	6359      	str	r1, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 80081ee:	6399      	str	r1, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80081f0:	63d9      	str	r1, [r3, #60]	; 0x3c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80081f2:	691a      	ldr	r2, [r3, #16]
 80081f4:	07d2      	lsls	r2, r2, #31
 80081f6:	d5fc      	bpl.n	80081f2 <R3_1_TurnOnLowSides+0x1a>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80081f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80081fe:	645a      	str	r2, [r3, #68]	; 0x44
  if ((ES_GPIO == pHandle->_Super.LowSideOutputs))
 8008200:	f890 307d 	ldrb.w	r3, [r0, #125]	; 0x7d
 8008204:	2b02      	cmp	r3, #2
 8008206:	d000      	beq.n	800820a <R3_1_TurnOnLowSides+0x32>
 8008208:	4770      	bx	lr
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800820a:	e9d0 210f 	ldrd	r2, r1, [r0, #60]	; 0x3c
{
 800820e:	b410      	push	{r4}
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8008210:	6c43      	ldr	r3, [r0, #68]	; 0x44
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 8008212:	f8b0 4048 	ldrh.w	r4, [r0, #72]	; 0x48
  WRITE_REG(GPIOx->BSRR, PinMask);
 8008216:	6194      	str	r4, [r2, #24]
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 8008218:	f8b0 404a 	ldrh.w	r4, [r0, #74]	; 0x4a
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800821c:	f8b0 204c 	ldrh.w	r2, [r0, #76]	; 0x4c
 8008220:	618c      	str	r4, [r1, #24]
}
 8008222:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008226:	619a      	str	r2, [r3, #24]
 8008228:	4770      	bx	lr
 800822a:	bf00      	nop

0800822c <R3_1_SetAOReferenceVoltage>:
  * @param  Data Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_DAC_ConvertData12LeftAligned(DAC_TypeDef *DACx, uint32_t DAC_Channel, uint32_t Data)
{
  __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, (DAC_Channel >> DAC_REG_DHR12LX_REGOFFSET_BITOFFSET_POS)
 800822c:	ea4f 4c90 	mov.w	ip, r0, lsr #18
{
 8008230:	b510      	push	{r4, lr}
 8008232:	f00c 0c3c 	and.w	ip, ip, #60	; 0x3c
 8008236:	f101 0e08 	add.w	lr, r1, #8
 800823a:	b082      	sub	sp, #8
                                             & DAC_REG_DHR_REGOFFSET_MASK_POSBIT0);

  MODIFY_REG(*preg, DAC_DHR12L1_DACC1DHR, Data);
 800823c:	f85e 300c 	ldr.w	r3, [lr, ip]
 8008240:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008244:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008248:	431a      	orrs	r2, r3
 800824a:	f84e 200c 	str.w	r2, [lr, ip]
  SET_BIT(DACx->SWTRIGR,
 800824e:	684a      	ldr	r2, [r1, #4]
 8008250:	f000 0303 	and.w	r3, r0, #3
 8008254:	4313      	orrs	r3, r2
 8008256:	604b      	str	r3, [r1, #4]
  return ((READ_BIT(DACx->CR,
 8008258:	680a      	ldr	r2, [r1, #0]
 800825a:	f000 0010 	and.w	r0, r0, #16
 800825e:	2301      	movs	r3, #1
 8008260:	4083      	lsls	r3, r0
           == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK))) ? 1UL : 0UL);
 8008262:	ea33 0202 	bics.w	r2, r3, r2
 8008266:	d014      	beq.n	8008292 <R3_1_SetAOReferenceVoltage+0x66>
                                         * (SystemCoreClock / (1000000UL * 2UL)));
 8008268:	4a14      	ldr	r2, [pc, #80]	; (80082bc <R3_1_SetAOReferenceVoltage+0x90>)
 800826a:	4815      	ldr	r0, [pc, #84]	; (80082c0 <R3_1_SetAOReferenceVoltage+0x94>)
 800826c:	6812      	ldr	r2, [r2, #0]
  SET_BIT(DACx->CR,
 800826e:	680c      	ldr	r4, [r1, #0]
 8008270:	fba0 0202 	umull	r0, r2, r0, r2
 8008274:	0cd2      	lsrs	r2, r2, #19
 8008276:	4323      	orrs	r3, r4
 8008278:	00d2      	lsls	r2, r2, #3
 800827a:	600b      	str	r3, [r1, #0]
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_STARTUP_VOLTAGE_SETTLING_US)
 800827c:	9200      	str	r2, [sp, #0]
    while (wait_loop_index != 0UL)
 800827e:	9b00      	ldr	r3, [sp, #0]
 8008280:	b12b      	cbz	r3, 800828e <R3_1_SetAOReferenceVoltage+0x62>
      wait_loop_index--;
 8008282:	9b00      	ldr	r3, [sp, #0]
 8008284:	3b01      	subs	r3, #1
 8008286:	9300      	str	r3, [sp, #0]
    while (wait_loop_index != 0UL)
 8008288:	9b00      	ldr	r3, [sp, #0]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d1f9      	bne.n	8008282 <R3_1_SetAOReferenceVoltage+0x56>
}
 800828e:	b002      	add	sp, #8
 8008290:	bd10      	pop	{r4, pc}
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 8008292:	4b0a      	ldr	r3, [pc, #40]	; (80082bc <R3_1_SetAOReferenceVoltage+0x90>)
 8008294:	4a0a      	ldr	r2, [pc, #40]	; (80082c0 <R3_1_SetAOReferenceVoltage+0x94>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	fba2 2303 	umull	r2, r3, r2, r3
 800829c:	0cdb      	lsrs	r3, r3, #19
 800829e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80082a2:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80082a4:	9b01      	ldr	r3, [sp, #4]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d0f1      	beq.n	800828e <R3_1_SetAOReferenceVoltage+0x62>
      wait_loop_index--;
 80082aa:	9b01      	ldr	r3, [sp, #4]
 80082ac:	3b01      	subs	r3, #1
 80082ae:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80082b0:	9b01      	ldr	r3, [sp, #4]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d1f9      	bne.n	80082aa <R3_1_SetAOReferenceVoltage+0x7e>
}
 80082b6:	b002      	add	sp, #8
 80082b8:	bd10      	pop	{r4, pc}
 80082ba:	bf00      	nop
 80082bc:	2000043c 	.word	0x2000043c
 80082c0:	431bde83 	.word	0x431bde83

080082c4 <R3_1_RLTurnOnLowSides>:
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80082c4:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 80082c8:	685b      	ldr	r3, [r3, #4]
  pHandle->ADCRegularLocked = true;
 80082ca:	f04f 0c01 	mov.w	ip, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 80082ce:	2100      	movs	r1, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80082d0:	f06f 0201 	mvn.w	r2, #1
 80082d4:	f880 c0a0 	strb.w	ip, [r0, #160]	; 0xa0
  WRITE_REG(TIMx->CCR1, CompareValue);
 80082d8:	6359      	str	r1, [r3, #52]	; 0x34
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80082da:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80082dc:	691a      	ldr	r2, [r3, #16]
 80082de:	07d2      	lsls	r2, r2, #31
 80082e0:	d5fc      	bpl.n	80082dc <R3_1_RLTurnOnLowSides+0x18>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80082e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80082e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80082e8:	645a      	str	r2, [r3, #68]	; 0x44
  if (ES_GPIO == pHandle->_Super.LowSideOutputs)
 80082ea:	f890 307d 	ldrb.w	r3, [r0, #125]	; 0x7d
 80082ee:	2b02      	cmp	r3, #2
 80082f0:	d000      	beq.n	80082f4 <R3_1_RLTurnOnLowSides+0x30>
 80082f2:	4770      	bx	lr
    LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 80082f4:	e9d0 210f 	ldrd	r2, r1, [r0, #60]	; 0x3c
{
 80082f8:	b410      	push	{r4}
    LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 80082fa:	6c43      	ldr	r3, [r0, #68]	; 0x44
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 80082fc:	f8b0 4048 	ldrh.w	r4, [r0, #72]	; 0x48
 8008300:	6194      	str	r4, [r2, #24]
    LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 8008302:	f8b0 404a 	ldrh.w	r4, [r0, #74]	; 0x4a
    LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8008306:	f8b0 204c 	ldrh.w	r2, [r0, #76]	; 0x4c
  WRITE_REG(GPIOx->BRR, PinMask);
 800830a:	628c      	str	r4, [r1, #40]	; 0x28
}
 800830c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008310:	629a      	str	r2, [r3, #40]	; 0x28
 8008312:	4770      	bx	lr

08008314 <R3_1_Init>:
  if (MC_NULL == pHandle)
 8008314:	2800      	cmp	r0, #0
 8008316:	f000 8140 	beq.w	800859a <R3_1_Init+0x286>
{
 800831a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    R3_3_OPAMPParams_t *OPAMPParams = pHandle->pParams_str->OPAMPParams;
 800831e:	f8d0 509c 	ldr.w	r5, [r0, #156]	; 0x9c
    ADC_TypeDef *ADCx = pHandle->pParams_str->ADCx;
 8008322:	682e      	ldr	r6, [r5, #0]
    DAC_TypeDef *DAC_OCPCx = pHandle->pParams_str->DAC_OCP_CSelection;
 8008324:	6a6c      	ldr	r4, [r5, #36]	; 0x24
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8008326:	6872      	ldr	r2, [r6, #4]
    COMP_TypeDef *COMP_OCPBx = pHandle->pParams_str->CompOCPBSelection;
 8008328:	f8d5 a010 	ldr.w	sl, [r5, #16]
{
 800832c:	b087      	sub	sp, #28
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800832e:	f04f 0c04 	mov.w	ip, #4
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8008332:	f022 0204 	bic.w	r2, r2, #4
    DAC_TypeDef *DAC_OCPCx = pHandle->pParams_str->DAC_OCP_CSelection;
 8008336:	9401      	str	r4, [sp, #4]
    DAC_TypeDef *DAC_OVPx = pHandle->pParams_str->DAC_OVP_Selection;
 8008338:	6aac      	ldr	r4, [r5, #40]	; 0x28
 800833a:	9402      	str	r4, [sp, #8]
    COMP_TypeDef *COMP_OVPx = pHandle->pParams_str->CompOVPSelection;
 800833c:	e9d5 9805 	ldrd	r9, r8, [r5, #20]
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008340:	686c      	ldr	r4, [r5, #4]
    DAC_TypeDef *DAC_OCPBx = pHandle->pParams_str->DAC_OCP_BSelection;
 8008342:	e9d5 1b07 	ldrd	r1, fp, [r5, #28]
 8008346:	4607      	mov	r7, r0
    COMP_TypeDef *COMP_OCPAx = pHandle->pParams_str->CompOCPASelection;
 8008348:	e9d5 0302 	ldrd	r0, r3, [r5, #8]
 800834c:	6072      	str	r2, [r6, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800834e:	f8c6 c000 	str.w	ip, [r6]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8008352:	6872      	ldr	r2, [r6, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8008354:	f04f 0c20 	mov.w	ip, #32
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8008358:	f022 0220 	bic.w	r2, r2, #32
 800835c:	6072      	str	r2, [r6, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 800835e:	f8c6 c000 	str.w	ip, [r6]
      if (TIM1 ==  TIMx)
 8008362:	4aaa      	ldr	r2, [pc, #680]	; (800860c <R3_1_Init+0x2f8>)
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 8008364:	f8df c2b4 	ldr.w	ip, [pc, #692]	; 800861c <R3_1_Init+0x308>
 8008368:	4294      	cmp	r4, r2
 800836a:	f8dc 2010 	ldr.w	r2, [ip, #16]
 800836e:	bf0c      	ite	eq
 8008370:	f442 6200 	orreq.w	r2, r2, #2048	; 0x800
 8008374:	f442 5200 	orrne.w	r2, r2, #8192	; 0x2000
 8008378:	f8cc 2010 	str.w	r2, [ip, #16]
      if (OPAMPParams != NULL)
 800837c:	b190      	cbz	r0, 80083a4 <R3_1_Init+0x90>
        LL_OPAMP_Enable(OPAMPParams->OPAMPSelect_1[1]);
 800837e:	e9d0 2c00 	ldrd	r2, ip, [r0]
  * @param  OPAMPx OPAMP instance
  * @retval None
  */
__STATIC_INLINE void LL_OPAMP_Enable(OPAMP_TypeDef *OPAMPx)
{
  SET_BIT(OPAMPx->CSR, OPAMP_CSR_OPAMPxEN);
 8008382:	f8d2 e000 	ldr.w	lr, [r2]
        LL_OPAMP_Enable(OPAMPParams->OPAMPSelect_2[0]);
 8008386:	6980      	ldr	r0, [r0, #24]
 8008388:	f04e 0e01 	orr.w	lr, lr, #1
 800838c:	f8c2 e000 	str.w	lr, [r2]
 8008390:	f8dc 2000 	ldr.w	r2, [ip]
 8008394:	f042 0201 	orr.w	r2, r2, #1
 8008398:	f8cc 2000 	str.w	r2, [ip]
 800839c:	6802      	ldr	r2, [r0, #0]
 800839e:	f042 0201 	orr.w	r2, r2, #1
 80083a2:	6002      	str	r2, [r0, #0]
      if (COMP_OCPAx != NULL)
 80083a4:	b19b      	cbz	r3, 80083ce <R3_1_Init+0xba>
        if ((pHandle->pParams_str->CompOCPAInvInput_MODE != EXT_MODE) && (DAC_OCPAx != MC_NULL))
 80083a6:	f895 2063 	ldrb.w	r2, [r5, #99]	; 0x63
 80083aa:	2a01      	cmp	r2, #1
 80083ac:	d007      	beq.n	80083be <R3_1_Init+0xaa>
 80083ae:	b131      	cbz	r1, 80083be <R3_1_Init+0xaa>
          R3_1_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OCPA, DAC_OCPAx,
 80083b0:	f8b5 205e 	ldrh.w	r2, [r5, #94]	; 0x5e
 80083b4:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80083b6:	9303      	str	r3, [sp, #12]
 80083b8:	f7ff ff38 	bl	800822c <R3_1_SetAOReferenceVoltage>
 80083bc:	9b03      	ldr	r3, [sp, #12]
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Enable(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 80083be:	681a      	ldr	r2, [r3, #0]
 80083c0:	f042 0201 	orr.w	r2, r2, #1
 80083c4:	601a      	str	r2, [r3, #0]
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Lock(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 80083c6:	681a      	ldr	r2, [r3, #0]
 80083c8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80083cc:	601a      	str	r2, [r3, #0]
      if (COMP_OCPBx != NULL)
 80083ce:	f1ba 0f00 	cmp.w	sl, #0
 80083d2:	d018      	beq.n	8008406 <R3_1_Init+0xf2>
        if ((pHandle->pParams_str->CompOCPBInvInput_MODE != EXT_MODE) && (DAC_OCPBx != MC_NULL))
 80083d4:	f895 3064 	ldrb.w	r3, [r5, #100]	; 0x64
 80083d8:	2b01      	cmp	r3, #1
 80083da:	d008      	beq.n	80083ee <R3_1_Init+0xda>
 80083dc:	f1bb 0f00 	cmp.w	fp, #0
 80083e0:	d005      	beq.n	80083ee <R3_1_Init+0xda>
          R3_1_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OCPB, DAC_OCPBx,
 80083e2:	f8b5 205e 	ldrh.w	r2, [r5, #94]	; 0x5e
 80083e6:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80083e8:	4659      	mov	r1, fp
 80083ea:	f7ff ff1f 	bl	800822c <R3_1_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 80083ee:	f8da 3000 	ldr.w	r3, [sl]
 80083f2:	f043 0301 	orr.w	r3, r3, #1
 80083f6:	f8ca 3000 	str.w	r3, [sl]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 80083fa:	f8da 3000 	ldr.w	r3, [sl]
 80083fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008402:	f8ca 3000 	str.w	r3, [sl]
      if (COMP_OCPCx != NULL)
 8008406:	f1b9 0f00 	cmp.w	r9, #0
 800840a:	d017      	beq.n	800843c <R3_1_Init+0x128>
        if ((pHandle->pParams_str->CompOCPCInvInput_MODE != EXT_MODE)  && (DAC_OCPCx != MC_NULL))
 800840c:	f895 3065 	ldrb.w	r3, [r5, #101]	; 0x65
 8008410:	2b01      	cmp	r3, #1
 8008412:	d007      	beq.n	8008424 <R3_1_Init+0x110>
 8008414:	9b01      	ldr	r3, [sp, #4]
 8008416:	b12b      	cbz	r3, 8008424 <R3_1_Init+0x110>
          R3_1_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OCPC, DAC_OCPCx,
 8008418:	f8b5 205e 	ldrh.w	r2, [r5, #94]	; 0x5e
 800841c:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800841e:	4619      	mov	r1, r3
 8008420:	f7ff ff04 	bl	800822c <R3_1_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 8008424:	f8d9 3000 	ldr.w	r3, [r9]
 8008428:	f043 0301 	orr.w	r3, r3, #1
 800842c:	f8c9 3000 	str.w	r3, [r9]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 8008430:	f8d9 3000 	ldr.w	r3, [r9]
 8008434:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008438:	f8c9 3000 	str.w	r3, [r9]
      if (COMP_OVPx != NULL)
 800843c:	f1b8 0f00 	cmp.w	r8, #0
 8008440:	d017      	beq.n	8008472 <R3_1_Init+0x15e>
        if ((pHandle->pParams_str->CompOVPInvInput_MODE != EXT_MODE) && (DAC_OVPx != MC_NULL))
 8008442:	f895 3066 	ldrb.w	r3, [r5, #102]	; 0x66
 8008446:	2b01      	cmp	r3, #1
 8008448:	d007      	beq.n	800845a <R3_1_Init+0x146>
 800844a:	9b02      	ldr	r3, [sp, #8]
 800844c:	b12b      	cbz	r3, 800845a <R3_1_Init+0x146>
          R3_1_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OVP, DAC_OVPx,
 800844e:	f8b5 2060 	ldrh.w	r2, [r5, #96]	; 0x60
 8008452:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8008454:	4619      	mov	r1, r3
 8008456:	f7ff fee9 	bl	800822c <R3_1_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 800845a:	f8d8 3000 	ldr.w	r3, [r8]
 800845e:	f043 0301 	orr.w	r3, r3, #1
 8008462:	f8c8 3000 	str.w	r3, [r8]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 8008466:	f8d8 3000 	ldr.w	r3, [r8]
 800846a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800846e:	f8c8 3000 	str.w	r3, [r8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008472:	68b3      	ldr	r3, [r6, #8]
 8008474:	07da      	lsls	r2, r3, #31
 8008476:	d45a      	bmi.n	800852e <R3_1_Init+0x21a>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8008478:	68b3      	ldr	r3, [r6, #8]
 800847a:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800847e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008482:	60b3      	str	r3, [r6, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8008484:	68b3      	ldr	r3, [r6, #8]
 8008486:	00db      	lsls	r3, r3, #3
 8008488:	d418      	bmi.n	80084bc <R3_1_Init+0x1a8>
  MODIFY_REG(ADCx->CR,
 800848a:	68b3      	ldr	r3, [r6, #8]
                                         * (SystemCoreClock / (100000UL * 2UL)));
 800848c:	4a60      	ldr	r2, [pc, #384]	; (8008610 <R3_1_Init+0x2fc>)
 800848e:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8008492:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008496:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800849a:	60b3      	str	r3, [r6, #8]
 800849c:	4b5d      	ldr	r3, [pc, #372]	; (8008614 <R3_1_Init+0x300>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	099b      	lsrs	r3, r3, #6
 80084a2:	fba2 2303 	umull	r2, r3, r2, r3
 80084a6:	099b      	lsrs	r3, r3, #6
 80084a8:	005b      	lsls	r3, r3, #1
    volatile uint32_t wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)
 80084aa:	9304      	str	r3, [sp, #16]
    while (wait_loop_index != 0UL)
 80084ac:	9b04      	ldr	r3, [sp, #16]
 80084ae:	b12b      	cbz	r3, 80084bc <R3_1_Init+0x1a8>
      wait_loop_index--;
 80084b0:	9b04      	ldr	r3, [sp, #16]
 80084b2:	3b01      	subs	r3, #1
 80084b4:	9304      	str	r3, [sp, #16]
    while (wait_loop_index != 0UL)
 80084b6:	9b04      	ldr	r3, [sp, #16]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d1f9      	bne.n	80084b0 <R3_1_Init+0x19c>
  MODIFY_REG(ADCx->CR,
 80084bc:	68b3      	ldr	r3, [r6, #8]
 80084be:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80084c2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80084c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80084ca:	60b3      	str	r3, [r6, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80084cc:	68b3      	ldr	r3, [r6, #8]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	dbfc      	blt.n	80084cc <R3_1_Init+0x1b8>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 80084d2:	6833      	ldr	r3, [r6, #0]
 80084d4:	07d8      	lsls	r0, r3, #31
 80084d6:	d408      	bmi.n	80084ea <R3_1_Init+0x1d6>
  MODIFY_REG(ADCx->CR,
 80084d8:	4a4f      	ldr	r2, [pc, #316]	; (8008618 <R3_1_Init+0x304>)
 80084da:	68b3      	ldr	r3, [r6, #8]
 80084dc:	4013      	ands	r3, r2
 80084de:	f043 0301 	orr.w	r3, r3, #1
 80084e2:	60b3      	str	r3, [r6, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 80084e4:	6833      	ldr	r3, [r6, #0]
 80084e6:	07d9      	lsls	r1, r3, #31
 80084e8:	d5f7      	bpl.n	80084da <R3_1_Init+0x1c6>
  MODIFY_REG(ADCx->CR,
 80084ea:	68b3      	ldr	r3, [r6, #8]
 80084ec:	4a4a      	ldr	r2, [pc, #296]	; (8008618 <R3_1_Init+0x304>)
 80084ee:	4013      	ands	r3, r2
 80084f0:	f043 0308 	orr.w	r3, r3, #8
 80084f4:	60b3      	str	r3, [r6, #8]
  MODIFY_REG(ADCx->CR,
 80084f6:	68b3      	ldr	r3, [r6, #8]
 80084f8:	4013      	ands	r3, r2
 80084fa:	f043 0320 	orr.w	r3, r3, #32
 80084fe:	60b3      	str	r3, [r6, #8]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_JQM | ADC_CFGR_JQDIS, QueueMode);
 8008500:	68f3      	ldr	r3, [r6, #12]
 8008502:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008506:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800850a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800850e:	60f3      	str	r3, [r6, #12]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8008510:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8008512:	f023 030f 	bic.w	r3, r3, #15
 8008516:	6333      	str	r3, [r6, #48]	; 0x30
  MODIFY_REG(ADCx->CR,
 8008518:	68b3      	ldr	r3, [r6, #8]
 800851a:	4013      	ands	r3, r2
 800851c:	f043 0304 	orr.w	r3, r3, #4
 8008520:	60b3      	str	r3, [r6, #8]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 8008522:	2340      	movs	r3, #64	; 0x40
 8008524:	6033      	str	r3, [r6, #0]
  SET_BIT(ADCx->IER, LL_ADC_IT_JEOS);
 8008526:	6873      	ldr	r3, [r6, #4]
 8008528:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800852c:	6073      	str	r3, [r6, #4]
  volatile uint32_t Brk2Timeout = 1000;
 800852e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008532:	9305      	str	r3, [sp, #20]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8008534:	6823      	ldr	r3, [r4, #0]
 8008536:	f023 0301 	bic.w	r3, r3, #1
 800853a:	6023      	str	r3, [r4, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800853c:	6863      	ldr	r3, [r4, #4]
 800853e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8008542:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008546:	6063      	str	r3, [r4, #4]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8008548:	69a3      	ldr	r3, [r4, #24]
 800854a:	f043 0308 	orr.w	r3, r3, #8
 800854e:	61a3      	str	r3, [r4, #24]
 8008550:	69a3      	ldr	r3, [r4, #24]
 8008552:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008556:	61a3      	str	r3, [r4, #24]
 8008558:	69e3      	ldr	r3, [r4, #28]
 800855a:	f043 0308 	orr.w	r3, r3, #8
 800855e:	61e3      	str	r3, [r4, #28]
 8008560:	69e3      	ldr	r3, [r4, #28]
 8008562:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008566:	61e3      	str	r3, [r4, #28]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8008568:	6963      	ldr	r3, [r4, #20]
 800856a:	f043 0301 	orr.w	r3, r3, #1
 800856e:	6163      	str	r3, [r4, #20]
  if (2U == pHandle->pParams_str->FreqRatio)
 8008570:	f895 3067 	ldrb.w	r3, [r5, #103]	; 0x67
 8008574:	2b02      	cmp	r3, #2
 8008576:	d011      	beq.n	800859c <R3_1_Init+0x288>
    if (M1 == pHandle->_Super.Motor)
 8008578:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 800857c:	b9b3      	cbnz	r3, 80085ac <R3_1_Init+0x298>
      if (1U == pHandle->pParams_str->RepetitionCounter)
 800857e:	f895 3062 	ldrb.w	r3, [r5, #98]	; 0x62
 8008582:	2b01      	cmp	r3, #1
 8008584:	d00e      	beq.n	80085a4 <R3_1_Init+0x290>
      else if (3U == pHandle->pParams_str->RepetitionCounter)
 8008586:	2b03      	cmp	r3, #3
 8008588:	d110      	bne.n	80085ac <R3_1_Init+0x298>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800858a:	2201      	movs	r2, #1
 800858c:	6322      	str	r2, [r4, #48]	; 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800858e:	6962      	ldr	r2, [r4, #20]
 8008590:	f042 0201 	orr.w	r2, r2, #1
 8008594:	6162      	str	r2, [r4, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8008596:	6323      	str	r3, [r4, #48]	; 0x30
}
 8008598:	e008      	b.n	80085ac <R3_1_Init+0x298>
 800859a:	4770      	bx	lr
    if (HIGHER_FREQ == pHandle->pParams_str->IsHigherFreqTim)
 800859c:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
 80085a0:	2b01      	cmp	r3, #1
 80085a2:	d028      	beq.n	80085f6 <R3_1_Init+0x2e2>
        LL_TIM_SetCounter(TIMx, (uint32_t)(pHandle->Half_PWMPeriod) - 1U);
 80085a4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80085a8:	3b01      	subs	r3, #1
  WRITE_REG(TIMx->CNT, Counter);
 80085aa:	6263      	str	r3, [r4, #36]	; 0x24
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 80085ac:	f06f 0380 	mvn.w	r3, #128	; 0x80
 80085b0:	6123      	str	r3, [r4, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 80085b2:	6923      	ldr	r3, [r4, #16]
 80085b4:	05db      	lsls	r3, r3, #23
 80085b6:	d51c      	bpl.n	80085f2 <R3_1_Init+0x2de>
  while ((Brk2Timeout != 0u) && (1U == result))
 80085b8:	9b05      	ldr	r3, [sp, #20]
 80085ba:	b153      	cbz	r3, 80085d2 <R3_1_Init+0x2be>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 80085bc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80085c0:	6122      	str	r2, [r4, #16]
    Brk2Timeout--;
 80085c2:	9b05      	ldr	r3, [sp, #20]
 80085c4:	3b01      	subs	r3, #1
 80085c6:	9305      	str	r3, [sp, #20]
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 80085c8:	6923      	ldr	r3, [r4, #16]
 80085ca:	f413 7f80 	tst.w	r3, #256	; 0x100
  while ((Brk2Timeout != 0u) && (1U == result))
 80085ce:	9b05      	ldr	r3, [sp, #20]
 80085d0:	d10c      	bne.n	80085ec <R3_1_Init+0x2d8>
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 80085d2:	68e3      	ldr	r3, [r4, #12]
 80085d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085d8:	60e3      	str	r3, [r4, #12]
  SET_BIT(TIMx->CCER, Channels);
 80085da:	6a23      	ldr	r3, [r4, #32]
 80085dc:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 80085e0:	f043 0305 	orr.w	r3, r3, #5
 80085e4:	6223      	str	r3, [r4, #32]
}
 80085e6:	b007      	add	sp, #28
 80085e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while ((Brk2Timeout != 0u) && (1U == result))
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d1e7      	bne.n	80085c0 <R3_1_Init+0x2ac>
 80085f0:	e7ef      	b.n	80085d2 <R3_1_Init+0x2be>
 80085f2:	9b05      	ldr	r3, [sp, #20]
 80085f4:	e7ed      	b.n	80085d2 <R3_1_Init+0x2be>
      if (3U == pHandle->pParams_str->RepetitionCounter)
 80085f6:	f895 2062 	ldrb.w	r2, [r5, #98]	; 0x62
 80085fa:	2a03      	cmp	r2, #3
 80085fc:	d1d2      	bne.n	80085a4 <R3_1_Init+0x290>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80085fe:	6323      	str	r3, [r4, #48]	; 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8008600:	6963      	ldr	r3, [r4, #20]
 8008602:	f043 0301 	orr.w	r3, r3, #1
 8008606:	6163      	str	r3, [r4, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8008608:	6322      	str	r2, [r4, #48]	; 0x30
}
 800860a:	e7cb      	b.n	80085a4 <R3_1_Init+0x290>
 800860c:	40012c00 	.word	0x40012c00
 8008610:	053e2d63 	.word	0x053e2d63
 8008614:	2000043c 	.word	0x2000043c
 8008618:	7fffffc0 	.word	0x7fffffc0
 800861c:	e0042000 	.word	0xe0042000

08008620 <R3_1_SetOffsetCalib>:
{
 8008620:	b410      	push	{r4}
  pHandle->PhaseAOffset = offsets->phaseAOffset;
 8008622:	e9d1 4201 	ldrd	r4, r2, [r1, #4]
 8008626:	680b      	ldr	r3, [r1, #0]
 8008628:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  pHdl->offsetCalibStatus = true;
 800862c:	2301      	movs	r3, #1
  pHandle->PhaseAOffset = offsets->phaseAOffset;
 800862e:	e9c0 4223 	strd	r4, r2, [r0, #140]	; 0x8c
  pHdl->offsetCalibStatus = true;
 8008632:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
}
 8008636:	f85d 4b04 	ldr.w	r4, [sp], #4
 800863a:	4770      	bx	lr

0800863c <R3_1_GetOffsetCalib>:
  offsets->phaseAOffset = pHandle->PhaseAOffset;
 800863c:	e9d0 2323 	ldrd	r2, r3, [r0, #140]	; 0x8c
 8008640:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
 8008644:	608b      	str	r3, [r1, #8]
 8008646:	e9c1 0200 	strd	r0, r2, [r1]
}
 800864a:	4770      	bx	lr

0800864c <R3_1_CurrentReadingPolarization>:
{
 800864c:	b570      	push	{r4, r5, r6, lr}
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800864e:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
  ADC_TypeDef *ADCx = pHandle->pParams_str->ADCx;
 8008652:	e9d3 6500 	ldrd	r6, r5, [r3]
  if (true == pHandle->_Super.offsetCalibStatus)
 8008656:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
{
 800865a:	b084      	sub	sp, #16
 800865c:	4604      	mov	r4, r0
  if (true == pHandle->_Super.offsetCalibStatus)
 800865e:	b193      	cbz	r3, 8008686 <R3_1_CurrentReadingPolarization+0x3a>
  MODIFY_REG(ADCx->CR,
 8008660:	68b3      	ldr	r3, [r6, #8]
 8008662:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008666:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
    pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 800866a:	2280      	movs	r2, #128	; 0x80
 800866c:	f043 0308 	orr.w	r3, r3, #8
 8008670:	60b3      	str	r3, [r6, #8]
 8008672:	f8a0 2096 	strh.w	r2, [r0, #150]	; 0x96
  pHandle->_Super.Sector = SECTOR_5;
 8008676:	2204      	movs	r2, #4
  pHandle->_Super.BrakeActionLock = false;
 8008678:	2300      	movs	r3, #0
  pHandle->_Super.Sector = SECTOR_5;
 800867a:	f884 207c 	strb.w	r2, [r4, #124]	; 0x7c
  pHandle->_Super.BrakeActionLock = false;
 800867e:	f884 3085 	strb.w	r3, [r4, #133]	; 0x85
}
 8008682:	b004      	add	sp, #16
 8008684:	bd70      	pop	{r4, r5, r6, pc}
    GetPhaseCurrCbSave = pHandle->_Super.pFctGetPhaseCurrents;
 8008686:	6802      	ldr	r2, [r0, #0]
 8008688:	9202      	str	r2, [sp, #8]
    SetSampPointSectXCbSave = pHandle->_Super.pFctSetADCSampPointSectX;
 800868a:	6942      	ldr	r2, [r0, #20]
 800868c:	9203      	str	r2, [sp, #12]
    pHandle->PolarizationCounter = 0U;
 800868e:	f880 3098 	strb.w	r3, [r0, #152]	; 0x98
    pHandle->PhaseBOffset = 0U;
 8008692:	e9c0 3322 	strd	r3, r3, [r0, #136]	; 0x88
    pHandle->PhaseCOffset = 0U;
 8008696:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  CLEAR_BIT(TIMx->CCER, Channels);
 800869a:	6a2b      	ldr	r3, [r5, #32]
 800869c:	f423 63aa 	bic.w	r3, r3, #1360	; 0x550
 80086a0:	f023 0305 	bic.w	r3, r3, #5
 80086a4:	622b      	str	r3, [r5, #32]
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsPolarizationAB;
 80086a6:	4b3e      	ldr	r3, [pc, #248]	; (80087a0 <R3_1_CurrentReadingPolarization+0x154>)
 80086a8:	6003      	str	r3, [r0, #0]
    pHandle->_Super.pFctSetADCSampPointSectX = &R3_1_SetADCSampPointPolarization;
 80086aa:	4b3e      	ldr	r3, [pc, #248]	; (80087a4 <R3_1_CurrentReadingPolarization+0x158>)
 80086ac:	6143      	str	r3, [r0, #20]
    pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 80086ae:	2380      	movs	r3, #128	; 0x80
 80086b0:	f8a0 3096 	strh.w	r3, [r0, #150]	; 0x96
  pHandle->PolarizationSector=SECTOR_5;
 80086b4:	2304      	movs	r3, #4
 80086b6:	f880 3099 	strb.w	r3, [r0, #153]	; 0x99
  pHandle->_Super.Sector = SECTOR_5;   
 80086ba:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    R3_1_SwitchOnPWM(&pHandle->_Super);
 80086be:	f7ff fc83 	bl	8007fc8 <R3_1_SwitchOnPWM>
    while (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_OC4REF)
 80086c2:	4a39      	ldr	r2, [pc, #228]	; (80087a8 <R3_1_CurrentReadingPolarization+0x15c>)
 80086c4:	686b      	ldr	r3, [r5, #4]
 80086c6:	4013      	ands	r3, r2
 80086c8:	2b70      	cmp	r3, #112	; 0x70
 80086ca:	d1fb      	bne.n	80086c4 <R3_1_CurrentReadingPolarization+0x78>
 80086cc:	68b3      	ldr	r3, [r6, #8]
                           pHandle->pParams_str->RepetitionCounter,
 80086ce:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 80086d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80086d6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80086da:	f043 0308 	orr.w	r3, r3, #8
 80086de:	60b3      	str	r3, [r6, #8]
    waitForPolarizationEnd(TIMx,
 80086e0:	f104 0156 	add.w	r1, r4, #86	; 0x56
 80086e4:	f104 0398 	add.w	r3, r4, #152	; 0x98
 80086e8:	f892 2062 	ldrb.w	r2, [r2, #98]	; 0x62
 80086ec:	4628      	mov	r0, r5
 80086ee:	e9cd 1300 	strd	r1, r3, [sp]
 80086f2:	f7ff fb23 	bl	8007d3c <waitForPolarizationEnd>
    R3_1_SwitchOffPWM(&pHandle->_Super);
 80086f6:	4620      	mov	r0, r4
 80086f8:	f7ff fcb2 	bl	8008060 <R3_1_SwitchOffPWM>
    pHandle->PolarizationCounter = 0U;
 80086fc:	2200      	movs	r2, #0
 80086fe:	f884 2098 	strb.w	r2, [r4, #152]	; 0x98
  pHandle->PolarizationSector=SECTOR_1;
 8008702:	f884 2099 	strb.w	r2, [r4, #153]	; 0x99
  pHandle->_Super.Sector = SECTOR_1;   
 8008706:	f884 207c 	strb.w	r2, [r4, #124]	; 0x7c
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsPolarizationC;
 800870a:	4a28      	ldr	r2, [pc, #160]	; (80087ac <R3_1_CurrentReadingPolarization+0x160>)
 800870c:	6022      	str	r2, [r4, #0]
    R3_1_SwitchOnPWM(&pHandle->_Super);
 800870e:	4620      	mov	r0, r4
 8008710:	f7ff fc5a 	bl	8007fc8 <R3_1_SwitchOnPWM>
                           pHandle->pParams_str->RepetitionCounter,
 8008714:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
    waitForPolarizationEnd(TIMx,
 8008718:	9b01      	ldr	r3, [sp, #4]
 800871a:	f892 2062 	ldrb.w	r2, [r2, #98]	; 0x62
 800871e:	9900      	ldr	r1, [sp, #0]
 8008720:	4628      	mov	r0, r5
 8008722:	f7ff fb0b 	bl	8007d3c <waitForPolarizationEnd>
    R3_1_SwitchOffPWM(&pHandle->_Super);
 8008726:	4620      	mov	r0, r4
 8008728:	f7ff fc9a 	bl	8008060 <R3_1_SwitchOffPWM>
    pHandle->PhaseBOffset /= NB_CONVERSIONS;
 800872c:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
    pHandle->PhaseCOffset /= NB_CONVERSIONS;
 8008730:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    pHandle->PhaseBOffset /= NB_CONVERSIONS;
 8008734:	0912      	lsrs	r2, r2, #4
    pHandle->PhaseAOffset /= NB_CONVERSIONS;
 8008736:	0909      	lsrs	r1, r1, #4
    pHandle->PhaseBOffset /= NB_CONVERSIONS;
 8008738:	e9c4 1222 	strd	r1, r2, [r4, #136]	; 0x88
    if (0U == pHandle->_Super.SWerror)
 800873c:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
    pHandle->PhaseCOffset /= NB_CONVERSIONS;
 8008740:	091b      	lsrs	r3, r3, #4
 8008742:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    if (0U == pHandle->_Super.SWerror)
 8008746:	b912      	cbnz	r2, 800874e <R3_1_CurrentReadingPolarization+0x102>
      pHandle->_Super.offsetCalibStatus = true;
 8008748:	2301      	movs	r3, #1
 800874a:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    pHandle->_Super.pFctGetPhaseCurrents = GetPhaseCurrCbSave;
 800874e:	9902      	ldr	r1, [sp, #8]
    pHandle->_Super.pFctSetADCSampPointSectX = SetSampPointSectXCbSave;
 8008750:	9a03      	ldr	r2, [sp, #12]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8008752:	69ab      	ldr	r3, [r5, #24]
 8008754:	6162      	str	r2, [r4, #20]
 8008756:	f023 0308 	bic.w	r3, r3, #8
    pHandle->_Super.pFctGetPhaseCurrents = GetPhaseCurrCbSave;
 800875a:	6021      	str	r1, [r4, #0]
 800875c:	61ab      	str	r3, [r5, #24]
 800875e:	69aa      	ldr	r2, [r5, #24]
  LL_TIM_OC_SetCompareCH1 (TIMx, pHandle->Half_PWMPeriod);
 8008760:	f8b4 3094 	ldrh.w	r3, [r4, #148]	; 0x94
 8008764:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008768:	61aa      	str	r2, [r5, #24]
 800876a:	69ea      	ldr	r2, [r5, #28]
 800876c:	f022 0208 	bic.w	r2, r2, #8
 8008770:	61ea      	str	r2, [r5, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008772:	636b      	str	r3, [r5, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8008774:	63ab      	str	r3, [r5, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8008776:	63eb      	str	r3, [r5, #60]	; 0x3c
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8008778:	69ab      	ldr	r3, [r5, #24]
 800877a:	f043 0308 	orr.w	r3, r3, #8
 800877e:	61ab      	str	r3, [r5, #24]
 8008780:	69ab      	ldr	r3, [r5, #24]
 8008782:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008786:	61ab      	str	r3, [r5, #24]
 8008788:	69eb      	ldr	r3, [r5, #28]
 800878a:	f043 0308 	orr.w	r3, r3, #8
 800878e:	61eb      	str	r3, [r5, #28]
  SET_BIT(TIMx->CCER, Channels);
 8008790:	6a2b      	ldr	r3, [r5, #32]
 8008792:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 8008796:	f043 0305 	orr.w	r3, r3, #5
 800879a:	622b      	str	r3, [r5, #32]
}
 800879c:	e76b      	b.n	8008676 <R3_1_CurrentReadingPolarization+0x2a>
 800879e:	bf00      	nop
 80087a0:	08007f31 	.word	0x08007f31
 80087a4:	08007eed 	.word	0x08007eed
 80087a8:	02000070 	.word	0x02000070
 80087ac:	08007f81 	.word	0x08007f81

080087b0 <R3_1_SetADCSampPointSectX>:
  if (MC_NULL == pHdl)
 80087b0:	2800      	cmp	r0, #0
 80087b2:	d03b      	beq.n	800882c <R3_1_SetADCSampPointSectX+0x7c>
{
 80087b4:	b530      	push	{r4, r5, lr}
    if ((uint16_t)(pHandle->Half_PWMPeriod - pHdl->lowDuty) > pHandle->pParams_str->Tafter)
 80087b6:	f8b0 3058 	ldrh.w	r3, [r0, #88]	; 0x58
 80087ba:	f8b0 e094 	ldrh.w	lr, [r0, #148]	; 0x94
 80087be:	f8d0 109c 	ldr.w	r1, [r0, #156]	; 0x9c
 80087c2:	ebae 0203 	sub.w	r2, lr, r3
 80087c6:	f8b1 4054 	ldrh.w	r4, [r1, #84]	; 0x54
 80087ca:	b292      	uxth	r2, r2
 80087cc:	42a2      	cmp	r2, r4
 80087ce:	d917      	bls.n	8008800 <R3_1_SetADCSampPointSectX+0x50>
      pHandle->_Super.Sector = SECTOR_5;
 80087d0:	2204      	movs	r2, #4
      SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t)1;
 80087d2:	f10e 33ff 	add.w	r3, lr, #4294967295
      pHandle->_Super.Sector = SECTOR_5;
 80087d6:	f880 207c 	strb.w	r2, [r0, #124]	; 0x7c
      SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t)1;
 80087da:	b29b      	uxth	r3, r3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80087dc:	684a      	ldr	r2, [r1, #4]
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t) pHandle->_Super.CntPhA);
 80087de:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t) pHandle->_Super.CntPhB);
 80087e2:	f8b0 4052 	ldrh.w	r4, [r0, #82]	; 0x52
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t) pHandle->_Super.CntPhC);
 80087e6:	f8b0 1054 	ldrh.w	r1, [r0, #84]	; 0x54
  WRITE_REG(TIMx->CCR1, CompareValue);
 80087ea:	6355      	str	r5, [r2, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 80087ec:	6394      	str	r4, [r2, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80087ee:	63d1      	str	r1, [r2, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 80087f0:	6413      	str	r3, [r2, #64]	; 0x40
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 80087f2:	6852      	ldr	r2, [r2, #4]
 80087f4:	4b10      	ldr	r3, [pc, #64]	; (8008838 <R3_1_SetADCSampPointSectX+0x88>)
 80087f6:	421a      	tst	r2, r3
    returnValue = 0U;
 80087f8:	bf14      	ite	ne
 80087fa:	2001      	movne	r0, #1
 80087fc:	2000      	moveq	r0, #0
}
 80087fe:	bd30      	pop	{r4, r5, pc}
      DeltaDuty = (uint16_t)(pHdl->lowDuty - pHdl->midDuty);
 8008800:	f8b0 c05a 	ldrh.w	ip, [r0, #90]	; 0x5a
 8008804:	eba3 0c0c 	sub.w	ip, r3, ip
      if (DeltaDuty > ((uint16_t)(pHandle->Half_PWMPeriod - pHdl->lowDuty) * 2U))
 8008808:	fa1f fc8c 	uxth.w	ip, ip
 800880c:	ebbc 0f42 	cmp.w	ip, r2, lsl #1
 8008810:	d80d      	bhi.n	800882e <R3_1_SetADCSampPointSectX+0x7e>
        SamplingPoint = pHdl->lowDuty + pHandle->pParams_str->Tafter;
 8008812:	4423      	add	r3, r4
 8008814:	b29b      	uxth	r3, r3
        if (SamplingPoint >= pHandle->Half_PWMPeriod)
 8008816:	459e      	cmp	lr, r3
 8008818:	d8e0      	bhi.n	80087dc <R3_1_SetADCSampPointSectX+0x2c>
          SamplingPoint = (2U * pHandle->Half_PWMPeriod) - SamplingPoint - (uint16_t)1;
 800881a:	43db      	mvns	r3, r3
          pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_FALLING;
 800881c:	f44f 7280 	mov.w	r2, #256	; 0x100
          SamplingPoint = (2U * pHandle->Half_PWMPeriod) - SamplingPoint - (uint16_t)1;
 8008820:	eb03 034e 	add.w	r3, r3, lr, lsl #1
          pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_FALLING;
 8008824:	f8a0 2096 	strh.w	r2, [r0, #150]	; 0x96
          SamplingPoint = (2U * pHandle->Half_PWMPeriod) - SamplingPoint - (uint16_t)1;
 8008828:	b29b      	uxth	r3, r3
 800882a:	e7d7      	b.n	80087dc <R3_1_SetADCSampPointSectX+0x2c>
}
 800882c:	4770      	bx	lr
        SamplingPoint = pHdl->lowDuty - pHandle->pParams_str->Tbefore;
 800882e:	f8b1 2058 	ldrh.w	r2, [r1, #88]	; 0x58
 8008832:	1a9b      	subs	r3, r3, r2
 8008834:	b29b      	uxth	r3, r3
 8008836:	e7d1      	b.n	80087dc <R3_1_SetADCSampPointSectX+0x2c>
 8008838:	02000070 	.word	0x02000070

0800883c <R3_1_TIMx_UP_IRQHandler>:
  if (MC_NULL == pHandle)
 800883c:	4602      	mov	r2, r0
 800883e:	2800      	cmp	r0, #0
 8008840:	d03b      	beq.n	80088ba <R3_1_TIMx_UP_IRQHandler+0x7e>
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008842:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
{
 8008846:	b4f0      	push	{r4, r5, r6, r7}
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008848:	e9d0 5401 	ldrd	r5, r4, [r0, #4]
    ADC_TypeDef *ADCx = pHandle->pParams_str->ADCx;
 800884c:	6801      	ldr	r1, [r0, #0]
    if (OPAMPParams != NULL)
 800884e:	b38c      	cbz	r4, 80088b4 <R3_1_TIMx_UP_IRQHandler+0x78>
      while (ADCx->JSQR != 0x0u)
 8008850:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8008852:	2b00      	cmp	r3, #0
 8008854:	d1fc      	bne.n	8008850 <R3_1_TIMx_UP_IRQHandler+0x14>
      operationAmp = OPAMPParams->OPAMPSelect_1[pHandle->_Super.Sector];
 8008856:	f892 307c 	ldrb.w	r3, [r2, #124]	; 0x7c
 800885a:	f854 c023 	ldr.w	ip, [r4, r3, lsl #2]
      if (operationAmp != NULL)
 800885e:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8008862:	f1bc 0f00 	cmp.w	ip, #0
 8008866:	d007      	beq.n	8008878 <R3_1_TIMx_UP_IRQHandler+0x3c>
        MODIFY_REG(operationAmp->CSR, (OPAMP_CSR_OPAMPINTEN | OPAMP_CSR_VPSEL), OpampConfig);
 8008868:	f8dc 6000 	ldr.w	r6, [ip]
 800886c:	6b27      	ldr	r7, [r4, #48]	; 0x30
 800886e:	f426 7686 	bic.w	r6, r6, #268	; 0x10c
 8008872:	433e      	orrs	r6, r7
 8008874:	f8cc 6000 	str.w	r6, [ip]
      operationAmp = OPAMPParams->OPAMPSelect_2[pHandle->_Super.Sector];
 8008878:	69a6      	ldr	r6, [r4, #24]
      if (operationAmp != NULL)
 800887a:	b12e      	cbz	r6, 8008888 <R3_1_TIMx_UP_IRQHandler+0x4c>
        MODIFY_REG(operationAmp->CSR, (OPAMP_CSR_OPAMPINTEN | OPAMP_CSR_VPSEL), OpampConfig);
 800887c:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 800887e:	6834      	ldr	r4, [r6, #0]
 8008880:	f424 7486 	bic.w	r4, r4, #268	; 0x10c
 8008884:	433c      	orrs	r4, r7
 8008886:	6034      	str	r4, [r6, #0]
    ADCx->JSQR = pHandle->pParams_str->ADCConfig[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8008888:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800888c:	f8b2 3096 	ldrh.w	r3, [r2, #150]	; 0x96
 8008890:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8008892:	4303      	orrs	r3, r0
 8008894:	64cb      	str	r3, [r1, #76]	; 0x4c
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8008896:	686b      	ldr	r3, [r5, #4]
 8008898:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800889c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 80088a0:	2180      	movs	r1, #128	; 0x80
 80088a2:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80088a6:	606b      	str	r3, [r5, #4]
    tempPointer = &(pHandle->_Super.Motor);
 80088a8:	f102 007a 	add.w	r0, r2, #122	; 0x7a
}
 80088ac:	bcf0      	pop	{r4, r5, r6, r7}
    pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 80088ae:	f8a2 1096 	strh.w	r1, [r2, #150]	; 0x96
}
 80088b2:	4770      	bx	lr
    ADCx->JSQR = pHandle->pParams_str->ADCConfig[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 80088b4:	f892 307c 	ldrb.w	r3, [r2, #124]	; 0x7c
 80088b8:	e7e6      	b.n	8008888 <R3_1_TIMx_UP_IRQHandler+0x4c>
}
 80088ba:	4770      	bx	lr

080088bc <R3_1_RLDetectionModeEnable>:
  if (false == pHandle->_Super.RLDetectionMode)
 80088bc:	f890 1080 	ldrb.w	r1, [r0, #128]	; 0x80
{
 80088c0:	b410      	push	{r4}
  if (false == pHandle->_Super.RLDetectionMode)
 80088c2:	2900      	cmp	r1, #0
 80088c4:	d13f      	bne.n	8008946 <R3_1_RLDetectionModeEnable+0x8a>
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80088c6:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 80088ca:	685b      	ldr	r3, [r3, #4]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80088cc:	699a      	ldr	r2, [r3, #24]
 80088ce:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80088d2:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 80088d6:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80088da:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 80088dc:	6a1a      	ldr	r2, [r3, #32]
 80088de:	f042 0201 	orr.w	r2, r2, #1
 80088e2:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 80088e4:	6a1a      	ldr	r2, [r3, #32]
 80088e6:	f022 0204 	bic.w	r2, r2, #4
 80088ea:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80088ec:	6359      	str	r1, [r3, #52]	; 0x34
    if (LS_PWM_TIMER == pHandle->_Super.LowSideOutputs)
 80088ee:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
 80088f2:	2a01      	cmp	r2, #1
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80088f4:	f103 0418 	add.w	r4, r3, #24
 80088f8:	d033      	beq.n	8008962 <R3_1_RLDetectionModeEnable+0xa6>
    else if (ES_GPIO ==  pHandle->_Super.LowSideOutputs)
 80088fa:	2a02      	cmp	r2, #2
 80088fc:	d10f      	bne.n	800891e <R3_1_RLDetectionModeEnable+0x62>
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80088fe:	699a      	ldr	r2, [r3, #24]
 8008900:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8008904:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8008908:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800890c:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800890e:	6a1a      	ldr	r2, [r3, #32]
 8008910:	f042 0210 	orr.w	r2, r2, #16
 8008914:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8008916:	6a1a      	ldr	r2, [r3, #32]
 8008918:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800891c:	621a      	str	r2, [r3, #32]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800891e:	6862      	ldr	r2, [r4, #4]
 8008920:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008924:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8008928:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 800892c:	6062      	str	r2, [r4, #4]
  CLEAR_BIT(TIMx->CCER, Channels);
 800892e:	6a1a      	ldr	r2, [r3, #32]
    pHandle->PhaseAOffset = pHandle->PhaseBOffset; /* Use only the offset of phB */
 8008930:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
 8008934:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008938:	621a      	str	r2, [r3, #32]
 800893a:	6a1a      	ldr	r2, [r3, #32]
 800893c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008940:	621a      	str	r2, [r3, #32]
 8008942:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
  pHandle->_Super.pFctTurnOnLowSides = &R3_1_RLTurnOnLowSides;
 8008946:	4b0f      	ldr	r3, [pc, #60]	; (8008984 <R3_1_RLDetectionModeEnable+0xc8>)
  pHandle->_Super.pFctSwitchOnPwm = &R3_1_RLSwitchOnPWM;
 8008948:	490f      	ldr	r1, [pc, #60]	; (8008988 <R3_1_RLDetectionModeEnable+0xcc>)
  pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 800894a:	4a10      	ldr	r2, [pc, #64]	; (800898c <R3_1_RLDetectionModeEnable+0xd0>)
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_RLGetPhaseCurrents;
 800894c:	4c10      	ldr	r4, [pc, #64]	; (8008990 <R3_1_RLDetectionModeEnable+0xd4>)
  pHandle->_Super.pFctTurnOnLowSides = &R3_1_RLTurnOnLowSides;
 800894e:	6103      	str	r3, [r0, #16]
  pHandle->_Super.RLDetectionMode = true;
 8008950:	2301      	movs	r3, #1
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_RLGetPhaseCurrents;
 8008952:	6004      	str	r4, [r0, #0]
  pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 8008954:	e9c0 2101 	strd	r2, r1, [r0, #4]
}
 8008958:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->_Super.RLDetectionMode = true;
 800895c:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
}
 8008960:	4770      	bx	lr
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8008962:	699a      	ldr	r2, [r3, #24]
 8008964:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8008968:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 800896c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008970:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(TIMx->CCER, Channels);
 8008972:	6a1a      	ldr	r2, [r3, #32]
 8008974:	f022 0210 	bic.w	r2, r2, #16
 8008978:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CCER, Channels);
 800897a:	6a1a      	ldr	r2, [r3, #32]
 800897c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008980:	621a      	str	r2, [r3, #32]
}
 8008982:	e7cc      	b.n	800891e <R3_1_RLDetectionModeEnable+0x62>
 8008984:	080082c5 	.word	0x080082c5
 8008988:	08008135 	.word	0x08008135
 800898c:	08008061 	.word	0x08008061
 8008990:	080080dd 	.word	0x080080dd

08008994 <R3_1_RLDetectionModeDisable>:
  if (true ==  pHandle->_Super.RLDetectionMode)
 8008994:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8008998:	2b00      	cmp	r3, #0
 800899a:	d03c      	beq.n	8008a16 <R3_1_RLDetectionModeDisable+0x82>
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800899c:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 80089a0:	685b      	ldr	r3, [r3, #4]
{
 80089a2:	b410      	push	{r4}
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80089a4:	699a      	ldr	r2, [r3, #24]
 80089a6:	4c43      	ldr	r4, [pc, #268]	; (8008ab4 <R3_1_RLDetectionModeDisable+0x120>)
 80089a8:	4022      	ands	r2, r4
 80089aa:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80089ae:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 80089b0:	6a1a      	ldr	r2, [r3, #32]
 80089b2:	f042 0201 	orr.w	r2, r2, #1
 80089b6:	621a      	str	r2, [r3, #32]
    if (LS_PWM_TIMER == pHandle->_Super.LowSideOutputs)
 80089b8:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
 80089bc:	2a01      	cmp	r2, #1
 80089be:	d02b      	beq.n	8008a18 <R3_1_RLDetectionModeDisable+0x84>
    else if (ES_GPIO == pHandle->_Super.LowSideOutputs)
 80089c0:	2a02      	cmp	r2, #2
 80089c2:	d050      	beq.n	8008a66 <R3_1_RLDetectionModeDisable+0xd2>
    LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t)pHandle->Half_PWMPeriod) >> 1);
 80089c4:	f8b0 2094 	ldrh.w	r2, [r0, #148]	; 0x94
 80089c8:	0852      	lsrs	r2, r2, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 80089ca:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80089cc:	6999      	ldr	r1, [r3, #24]
 80089ce:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 80089d2:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 80089d6:	f441 41c0 	orr.w	r1, r1, #24576	; 0x6000
 80089da:	6199      	str	r1, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 80089dc:	6a19      	ldr	r1, [r3, #32]
 80089de:	f041 0110 	orr.w	r1, r1, #16
 80089e2:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80089e4:	639a      	str	r2, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80089e6:	69d9      	ldr	r1, [r3, #28]
 80089e8:	4021      	ands	r1, r4
 80089ea:	f041 0160 	orr.w	r1, r1, #96	; 0x60
 80089ee:	61d9      	str	r1, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 80089f0:	6a19      	ldr	r1, [r3, #32]
 80089f2:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80089f6:	6219      	str	r1, [r3, #32]
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_GetPhaseCurrents;
 80089f8:	492f      	ldr	r1, [pc, #188]	; (8008ab8 <R3_1_RLDetectionModeDisable+0x124>)
  WRITE_REG(TIMx->CCR3, CompareValue);
 80089fa:	63da      	str	r2, [r3, #60]	; 0x3c
    pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 80089fc:	4a2f      	ldr	r2, [pc, #188]	; (8008abc <R3_1_RLDetectionModeDisable+0x128>)
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_GetPhaseCurrents;
 80089fe:	6001      	str	r1, [r0, #0]
    pHandle->_Super.pFctSwitchOnPwm = &R3_1_SwitchOnPWM;
 8008a00:	492f      	ldr	r1, [pc, #188]	; (8008ac0 <R3_1_RLDetectionModeDisable+0x12c>)
    pHandle->_Super.pFctTurnOnLowSides = &R3_1_TurnOnLowSides;
 8008a02:	4c30      	ldr	r4, [pc, #192]	; (8008ac4 <R3_1_RLDetectionModeDisable+0x130>)
 8008a04:	6104      	str	r4, [r0, #16]
    pHandle->_Super.RLDetectionMode = false;
 8008a06:	2300      	movs	r3, #0
    pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 8008a08:	e9c0 2101 	strd	r2, r1, [r0, #4]
}
 8008a0c:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->_Super.RLDetectionMode = false;
 8008a10:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
}
 8008a14:	4770      	bx	lr
 8008a16:	4770      	bx	lr
  SET_BIT(TIMx->CCER, Channels);
 8008a18:	6a19      	ldr	r1, [r3, #32]
    LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t)pHandle->Half_PWMPeriod) >> 1);
 8008a1a:	f8b0 2094 	ldrh.w	r2, [r0, #148]	; 0x94
 8008a1e:	f041 0104 	orr.w	r1, r1, #4
 8008a22:	0852      	lsrs	r2, r2, #1
 8008a24:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008a26:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8008a28:	6999      	ldr	r1, [r3, #24]
 8008a2a:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8008a2e:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 8008a32:	f441 41c0 	orr.w	r1, r1, #24576	; 0x6000
 8008a36:	6199      	str	r1, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8008a38:	6a19      	ldr	r1, [r3, #32]
 8008a3a:	f041 0110 	orr.w	r1, r1, #16
 8008a3e:	6219      	str	r1, [r3, #32]
 8008a40:	6a19      	ldr	r1, [r3, #32]
 8008a42:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8008a46:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8008a48:	639a      	str	r2, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8008a4a:	69d9      	ldr	r1, [r3, #28]
 8008a4c:	4021      	ands	r1, r4
 8008a4e:	f041 0160 	orr.w	r1, r1, #96	; 0x60
 8008a52:	61d9      	str	r1, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8008a54:	6a19      	ldr	r1, [r3, #32]
 8008a56:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8008a5a:	6219      	str	r1, [r3, #32]
 8008a5c:	6a19      	ldr	r1, [r3, #32]
 8008a5e:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8008a62:	6219      	str	r1, [r3, #32]
}
 8008a64:	e7c8      	b.n	80089f8 <R3_1_RLDetectionModeDisable+0x64>
  CLEAR_BIT(TIMx->CCER, Channels);
 8008a66:	6a19      	ldr	r1, [r3, #32]
 8008a68:	f8b0 2094 	ldrh.w	r2, [r0, #148]	; 0x94
 8008a6c:	f021 0104 	bic.w	r1, r1, #4
 8008a70:	0852      	lsrs	r2, r2, #1
 8008a72:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008a74:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8008a76:	6999      	ldr	r1, [r3, #24]
 8008a78:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8008a7c:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 8008a80:	f441 41c0 	orr.w	r1, r1, #24576	; 0x6000
 8008a84:	6199      	str	r1, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8008a86:	6a19      	ldr	r1, [r3, #32]
 8008a88:	f041 0110 	orr.w	r1, r1, #16
 8008a8c:	6219      	str	r1, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8008a8e:	6a19      	ldr	r1, [r3, #32]
 8008a90:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8008a94:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8008a96:	639a      	str	r2, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8008a98:	69d9      	ldr	r1, [r3, #28]
 8008a9a:	4021      	ands	r1, r4
 8008a9c:	f041 0160 	orr.w	r1, r1, #96	; 0x60
 8008aa0:	61d9      	str	r1, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8008aa2:	6a19      	ldr	r1, [r3, #32]
 8008aa4:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8008aa8:	6219      	str	r1, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8008aaa:	6a19      	ldr	r1, [r3, #32]
 8008aac:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8008ab0:	6219      	str	r1, [r3, #32]
}
 8008ab2:	e7a1      	b.n	80089f8 <R3_1_RLDetectionModeDisable+0x64>
 8008ab4:	fffeff8c 	.word	0xfffeff8c
 8008ab8:	08007d79 	.word	0x08007d79
 8008abc:	08008061 	.word	0x08008061
 8008ac0:	08007fc9 	.word	0x08007fc9
 8008ac4:	080081d9 	.word	0x080081d9

08008ac8 <R3_1_RLDetectionModeSetDuty>:
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008ac8:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
    val = (((uint32_t)pHandle->Half_PWMPeriod) * ((uint32_t)hDuty)) >> 16;
 8008acc:	f8b0 c094 	ldrh.w	ip, [r0, #148]	; 0x94
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008ad0:	6852      	ldr	r2, [r2, #4]
{
 8008ad2:	4603      	mov	r3, r0
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8008ad4:	69d0      	ldr	r0, [r2, #28]
 8008ad6:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
    val = (((uint32_t)pHandle->Half_PWMPeriod) * ((uint32_t)hDuty)) >> 16;
 8008ada:	fb0c f101 	mul.w	r1, ip, r1
 8008ade:	f420 40e6 	bic.w	r0, r0, #29440	; 0x7300
{
 8008ae2:	b410      	push	{r4}
    val = (((uint32_t)pHandle->Half_PWMPeriod) * ((uint32_t)hDuty)) >> 16;
 8008ae4:	0c09      	lsrs	r1, r1, #16
    pHandle->ADCRegularLocked = true;
 8008ae6:	2401      	movs	r4, #1
 8008ae8:	f440 40e0 	orr.w	r0, r0, #28672	; 0x7000
 8008aec:	f883 40a0 	strb.w	r4, [r3, #160]	; 0xa0
    pHandle->_Super.CntPhA = (uint16_t)val;
 8008af0:	f8a3 1050 	strh.w	r1, [r3, #80]	; 0x50
 8008af4:	61d0      	str	r0, [r2, #28]
    LL_TIM_OC_SetCompareCH4(TIMx, (((uint32_t)pHandle->Half_PWMPeriod) - ((uint32_t)pHandle->_Super.Ton)));
 8008af6:	f8b3 0076 	ldrh.w	r0, [r3, #118]	; 0x76
    LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t)pHandle->_Super.Toff);
 8008afa:	f8b3 4078 	ldrh.w	r4, [r3, #120]	; 0x78
    LL_TIM_OC_SetCompareCH4(TIMx, (((uint32_t)pHandle->Half_PWMPeriod) - ((uint32_t)pHandle->_Super.Ton)));
 8008afe:	ebac 0000 	sub.w	r0, ip, r0
  WRITE_REG(TIMx->CCR4, CompareValue);
 8008b02:	6410      	str	r0, [r2, #64]	; 0x40
  WRITE_REG(TIMx->CCR3, CompareValue);
 8008b04:	63d4      	str	r4, [r2, #60]	; 0x3c
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008b06:	6351      	str	r1, [r2, #52]	; 0x34
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8008b08:	6851      	ldr	r1, [r2, #4]
    if (1U ==  pHandle->_Super.SWerror)
 8008b0a:	f8b3 0056 	ldrh.w	r0, [r3, #86]	; 0x56
 8008b0e:	f021 7100 	bic.w	r1, r1, #33554432	; 0x2000000
 8008b12:	f021 0170 	bic.w	r1, r1, #112	; 0x70
    pHdl->Sector = SECTOR_4;
 8008b16:	f04f 0c03 	mov.w	ip, #3
 8008b1a:	f041 0170 	orr.w	r1, r1, #112	; 0x70
 8008b1e:	6051      	str	r1, [r2, #4]
    if (1U ==  pHandle->_Super.SWerror)
 8008b20:	2801      	cmp	r0, #1
    pHdl->Sector = SECTOR_4;
 8008b22:	f883 c07c 	strb.w	ip, [r3, #124]	; 0x7c
    if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 8008b26:	6852      	ldr	r2, [r2, #4]
    if (1U ==  pHandle->_Super.SWerror)
 8008b28:	d007      	beq.n	8008b3a <R3_1_RLDetectionModeSetDuty+0x72>
    if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 8008b2a:	4b07      	ldr	r3, [pc, #28]	; (8008b48 <R3_1_RLDetectionModeSetDuty+0x80>)
}
 8008b2c:	f85d 4b04 	ldr.w	r4, [sp], #4
    if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 8008b30:	421a      	tst	r2, r3
      hAux = MC_DURATION;
 8008b32:	bf14      	ite	ne
 8008b34:	2001      	movne	r0, #1
 8008b36:	2000      	moveq	r0, #0
}
 8008b38:	4770      	bx	lr
      pHandle->_Super.SWerror = 0U;
 8008b3a:	2200      	movs	r2, #0
}
 8008b3c:	f85d 4b04 	ldr.w	r4, [sp], #4
      pHandle->_Super.SWerror = 0U;
 8008b40:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8008b44:	4770      	bx	lr
 8008b46:	bf00      	nop
 8008b48:	02000070 	.word	0x02000070

08008b4c <R3_1_RLTurnOnLowSidesAndStart>:
  }
  else
  {
#endif
    PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008b4c:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 8008b50:	685b      	ldr	r3, [r3, #4]

    pHandle->ADCRegularLocked=true;
 8008b52:	2101      	movs	r1, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008b54:	f06f 0201 	mvn.w	r2, #1
{
 8008b58:	b430      	push	{r4, r5}
    pHandle->ADCRegularLocked=true;
 8008b5a:	f880 10a0 	strb.w	r1, [r0, #160]	; 0xa0
 8008b5e:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8008b60:	691a      	ldr	r2, [r3, #16]
 8008b62:	07d1      	lsls	r1, r2, #31
 8008b64:	d5fc      	bpl.n	8008b60 <R3_1_RLTurnOnLowSidesAndStart+0x14>
    LL_TIM_ClearFlag_UPDATE(TIMx);

    LL_TIM_OC_SetCompareCH1(TIMx, 0x0U);
    LL_TIM_OC_SetCompareCH2(TIMx, 0x0U);
    LL_TIM_OC_SetCompareCH3(TIMx, 0x0U);
    LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t )pHandle->Half_PWMPeriod) - 5U);
 8008b66:	f8b0 2094 	ldrh.w	r2, [r0, #148]	; 0x94
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008b6a:	2100      	movs	r1, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008b6c:	f06f 0401 	mvn.w	r4, #1
 8008b70:	3a05      	subs	r2, #5
 8008b72:	611c      	str	r4, [r3, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008b74:	6359      	str	r1, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8008b76:	6399      	str	r1, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8008b78:	63d9      	str	r1, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 8008b7a:	641a      	str	r2, [r3, #64]	; 0x40
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8008b7c:	691a      	ldr	r2, [r3, #16]
 8008b7e:	07d2      	lsls	r2, r2, #31
 8008b80:	d5fc      	bpl.n	8008b7c <R3_1_RLTurnOnLowSidesAndStart+0x30>
    {
      /* Nothing to do */
    }

    /* Main PWM Output Enable */
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE ;
 8008b82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b84:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008b88:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8008b8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b8c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008b90:	645a      	str	r2, [r3, #68]	; 0x44
    LL_TIM_EnableAllOutputs (TIMx);

    if (ES_GPIO == pHandle->_Super.LowSideOutputs )
 8008b92:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
 8008b96:	2a02      	cmp	r2, #2
 8008b98:	d10b      	bne.n	8008bb2 <R3_1_RLTurnOnLowSidesAndStart+0x66>
    {
      /* It is executed during calibration phase the EN signal shall stay off */
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 8008b9a:	e9d0 410f 	ldrd	r4, r1, [r0, #60]	; 0x3c
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 8008b9e:	f8b0 5048 	ldrh.w	r5, [r0, #72]	; 0x48
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8008ba2:	6c42      	ldr	r2, [r0, #68]	; 0x44
  WRITE_REG(GPIOx->BSRR, PinMask);
 8008ba4:	61a5      	str	r5, [r4, #24]
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 8008ba6:	f8b0 404a 	ldrh.w	r4, [r0, #74]	; 0x4a
 8008baa:	618c      	str	r4, [r1, #24]
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8008bac:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
 8008bb0:	6191      	str	r1, [r2, #24]
    else
    {
      /* Nothing to do */
    }

    pHdl->Sector = SECTOR_4;
 8008bb2:	2203      	movs	r2, #3
 8008bb4:	f880 207c 	strb.w	r2, [r0, #124]	; 0x7c
  SET_BIT(TIMx->CCER, Channels);
 8008bb8:	6a1a      	ldr	r2, [r3, #32]
 8008bba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008bbe:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8008bc0:	68da      	ldr	r2, [r3, #12]
 8008bc2:	f042 0201 	orr.w	r2, r2, #1

    LL_TIM_EnableIT_UPDATE(TIMx);
#ifdef NULL_PTR_CHECK_R3_1_PWM_CURR_FDB
  }
#endif
}
 8008bc6:	bc30      	pop	{r4, r5}
 8008bc8:	60da      	str	r2, [r3, #12]
 8008bca:	4770      	bx	lr

08008bcc <RVBS_Clear>:
  {
#endif
    uint16_t aux;
    uint16_t index;

    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 8008bcc:	f8b0 c00c 	ldrh.w	ip, [r0, #12]
 8008bd0:	8a42      	ldrh	r2, [r0, #18]
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8008bd2:	8943      	ldrh	r3, [r0, #10]
    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 8008bd4:	4494      	add	ip, r2
 8008bd6:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
{
 8008bda:	b430      	push	{r4, r5}
 8008bdc:	2500      	movs	r5, #0
 8008bde:	f36c 050f 	bfi	r5, ip, #0, #16
 8008be2:	f36c 451f 	bfi	r5, ip, #16, #16
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8008be6:	b14b      	cbz	r3, 8008bfc <RVBS_Clear+0x30>
    {
      pHandle->aBuffer[index] = aux;
 8008be8:	6944      	ldr	r4, [r0, #20]
 8008bea:	2300      	movs	r3, #0
 8008bec:	b29a      	uxth	r2, r3
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8008bee:	3301      	adds	r3, #1
      pHandle->aBuffer[index] = aux;
 8008bf0:	f824 c012 	strh.w	ip, [r4, r2, lsl #1]
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8008bf4:	8941      	ldrh	r1, [r0, #10]
 8008bf6:	b29a      	uxth	r2, r3
 8008bf8:	4291      	cmp	r1, r2
 8008bfa:	d8f7      	bhi.n	8008bec <RVBS_Clear+0x20>
    }
    pHandle->_Super.LatestConv = aux;
    pHandle->_Super.AvBusVoltage_d = aux;
    pHandle->index = 0U;
 8008bfc:	2300      	movs	r3, #0
    pHandle->_Super.LatestConv = aux;
 8008bfe:	6045      	str	r5, [r0, #4]
    pHandle->index = 0U;
 8008c00:	7643      	strb	r3, [r0, #25]
#ifdef NULL_PTR_CHECK_RDIV_BUS_VLT_SNS
  }
#endif
}
 8008c02:	bc30      	pop	{r4, r5}
 8008c04:	4770      	bx	lr
 8008c06:	bf00      	nop

08008c08 <RVBS_Init>:
{
 8008c08:	b508      	push	{r3, lr}
    RVBS_Clear(pHandle);
 8008c0a:	f7ff ffdf 	bl	8008bcc <RVBS_Clear>
}
 8008c0e:	bd08      	pop	{r3, pc}

08008c10 <RVBS_CheckFaultState>:
  }
  else
  {
#endif
	/* If both thresholds are equal, single threshold feature is used */
	if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 8008c10:	8982      	ldrh	r2, [r0, #12]
 8008c12:	89c1      	ldrh	r1, [r0, #14]
 8008c14:	428a      	cmp	r2, r1
 8008c16:	d00e      	beq.n	8008c36 <RVBS_CheckFaultState+0x26>
      }
	}
    else
    {
      /* If both thresholds are different, hysteresis feature is used (Brake mode) */
      if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 8008c18:	f8b0 c006 	ldrh.w	ip, [r0, #6]
 8008c1c:	8a43      	ldrh	r3, [r0, #18]
 8008c1e:	4563      	cmp	r3, ip
 8008c20:	d807      	bhi.n	8008c32 <RVBS_CheckFaultState+0x22>
      {
        fault = MC_UNDER_VOLT;
      }
      else if ( false == pHandle->OverVoltageHysteresisUpDir )
 8008c22:	7c03      	ldrb	r3, [r0, #16]
 8008c24:	b98b      	cbnz	r3, 8008c4a <RVBS_CheckFaultState+0x3a>
      {
        if (pHandle->_Super.AvBusVoltage_d < pHandle->OverVoltageThresholdLow)
 8008c26:	4561      	cmp	r1, ip
 8008c28:	d913      	bls.n	8008c52 <RVBS_CheckFaultState+0x42>
        {
          pHandle->OverVoltageHysteresisUpDir = true;
 8008c2a:	2201      	movs	r2, #1
 8008c2c:	7402      	strb	r2, [r0, #16]
          fault = MC_NO_ERROR;
 8008c2e:	4618      	mov	r0, r3
 8008c30:	4770      	bx	lr
        fault = MC_UNDER_VOLT;
 8008c32:	2004      	movs	r0, #4
 8008c34:	4770      	bx	lr
      if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 8008c36:	88c3      	ldrh	r3, [r0, #6]
 8008c38:	429a      	cmp	r2, r3
 8008c3a:	d30a      	bcc.n	8008c52 <RVBS_CheckFaultState+0x42>
      else if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 8008c3c:	8a40      	ldrh	r0, [r0, #18]
 8008c3e:	4298      	cmp	r0, r3
 8008c40:	bf94      	ite	ls
 8008c42:	2000      	movls	r0, #0
 8008c44:	2001      	movhi	r0, #1
 8008c46:	0080      	lsls	r0, r0, #2
 8008c48:	4770      	bx	lr
          fault = MC_OVER_VOLT;
        }
      }
      else
      {
        if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 8008c4a:	4562      	cmp	r2, ip
 8008c4c:	d303      	bcc.n	8008c56 <RVBS_CheckFaultState+0x46>
        {
          pHandle->OverVoltageHysteresisUpDir = false;
          fault = MC_OVER_VOLT;
        }
        else{
          fault = MC_NO_ERROR;
 8008c4e:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_RDIV_BUS_VLT_SNS
  }
#endif
  return (fault);
}
 8008c50:	4770      	bx	lr
        fault = MC_OVER_VOLT;
 8008c52:	2002      	movs	r0, #2
 8008c54:	4770      	bx	lr
          pHandle->OverVoltageHysteresisUpDir = false;
 8008c56:	2300      	movs	r3, #0
 8008c58:	7403      	strb	r3, [r0, #16]
          fault = MC_OVER_VOLT;
 8008c5a:	2002      	movs	r0, #2
 8008c5c:	4770      	bx	lr
 8008c5e:	bf00      	nop

08008c60 <RVBS_CalcAvVbus>:
{
 8008c60:	b538      	push	{r3, r4, r5, lr}
    if (0xFFFFU == hAux)
 8008c62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008c66:	4299      	cmp	r1, r3
{
 8008c68:	4604      	mov	r4, r0
    if (0xFFFFU == hAux)
 8008c6a:	d021      	beq.n	8008cb0 <RVBS_CalcAvVbus+0x50>
      pHandle->aBuffer[pHandle->index] = hAux;
 8008c6c:	6943      	ldr	r3, [r0, #20]
 8008c6e:	7e45      	ldrb	r5, [r0, #25]
 8008c70:	f823 1015 	strh.w	r1, [r3, r5, lsl #1]
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 8008c74:	f8b0 e00a 	ldrh.w	lr, [r0, #10]
 8008c78:	f01e 02ff 	ands.w	r2, lr, #255	; 0xff
 8008c7c:	d00d      	beq.n	8008c9a <RVBS_CalcAvVbus+0x3a>
 8008c7e:	3a01      	subs	r2, #1
 8008c80:	b2d2      	uxtb	r2, r2
 8008c82:	eb03 0042 	add.w	r0, r3, r2, lsl #1
 8008c86:	3b02      	subs	r3, #2
      wtemp = 0u;
 8008c88:	2200      	movs	r2, #0
        wtemp += pHandle->aBuffer[i];
 8008c8a:	f833 cf02 	ldrh.w	ip, [r3, #2]!
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 8008c8e:	4298      	cmp	r0, r3
        wtemp += pHandle->aBuffer[i];
 8008c90:	4462      	add	r2, ip
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 8008c92:	d1fa      	bne.n	8008c8a <RVBS_CalcAvVbus+0x2a>
      wtemp /= pHandle->LowPassFilterBW;
 8008c94:	fbb2 f2fe 	udiv	r2, r2, lr
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 8008c98:	b292      	uxth	r2, r2
      if ((uint16_t)pHandle->index < (pHandle->LowPassFilterBW - 1U))
 8008c9a:	f10e 3eff 	add.w	lr, lr, #4294967295
 8008c9e:	4575      	cmp	r5, lr
        pHandle->index++;
 8008ca0:	bf34      	ite	cc
 8008ca2:	3501      	addcc	r5, #1
        pHandle->index = 0U;
 8008ca4:	2300      	movcs	r3, #0
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 8008ca6:	80e2      	strh	r2, [r4, #6]
      pHandle->_Super.LatestConv = hAux;
 8008ca8:	80a1      	strh	r1, [r4, #4]
        pHandle->index++;
 8008caa:	bf34      	ite	cc
 8008cac:	7665      	strbcc	r5, [r4, #25]
        pHandle->index = 0U;
 8008cae:	7663      	strbcs	r3, [r4, #25]
    pHandle->_Super.FaultState = RVBS_CheckFaultState(pHandle);
 8008cb0:	4620      	mov	r0, r4
 8008cb2:	f7ff ffad 	bl	8008c10 <RVBS_CheckFaultState>
 8008cb6:	8120      	strh	r0, [r4, #8]
}
 8008cb8:	bd38      	pop	{r3, r4, r5, pc}
 8008cba:	bf00      	nop

08008cbc <REMNG_Init>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->Ext = 0;
 8008cbc:	2300      	movs	r3, #0
    pHandle->TargetFinal = 0;
    pHandle->RampRemainingStep = 0U;
    pHandle->IncDecAmount = 0;
    pHandle->ScalingFactor = 1U;
 8008cbe:	2201      	movs	r2, #1
    pHandle->TargetFinal = 0;
 8008cc0:	e9c0 3301 	strd	r3, r3, [r0, #4]
    pHandle->IncDecAmount = 0;
 8008cc4:	e9c0 3303 	strd	r3, r3, [r0, #12]
    pHandle->ScalingFactor = 1U;
 8008cc8:	6142      	str	r2, [r0, #20]
#ifdef NULL_PTR_CHECK_RMP_EXT_MNG
  }
#endif
}
 8008cca:	4770      	bx	lr

08008ccc <SPD_GetElAngle>:
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hElAngle);
#else
  return (pHandle->hElAngle);
#endif
}
 8008ccc:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8008cd0:	4770      	bx	lr
 8008cd2:	bf00      	nop

08008cd4 <SPD_GetMecAngle>:
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->wMecAngle);
#else
  return (pHandle->wMecAngle);
#endif
}
 8008cd4:	6880      	ldr	r0, [r0, #8]
 8008cd6:	4770      	bx	lr

08008cd8 <SPD_GetAvrgMecSpeedUnit>:
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hAvrMecSpeedUnit);
#else
  return (pHandle->hAvrMecSpeedUnit);
#endif
}
 8008cd8:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 8008cdc:	4770      	bx	lr
 8008cde:	bf00      	nop

08008ce0 <SPD_GetInstElSpeedDpp>:
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->InstantaneousElSpeedDpp);
#else
  return (pHandle->InstantaneousElSpeedDpp);
#endif
}
 8008ce0:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 8008ce4:	4770      	bx	lr
 8008ce6:	bf00      	nop

08008ce8 <SPD_IsMecSpeedReliable>:
    bool SpeedError = false;

    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

    /* Compute absoulte value of mechanical speed */
    if (*pMecSpeedUnit < 0)
 8008ce8:	f9b1 3000 	ldrsh.w	r3, [r1]
    else
    {
      /* Nothing to do */
    }

    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 8008cec:	f8b0 c016 	ldrh.w	ip, [r0, #22]
{
 8008cf0:	b410      	push	{r4}
    if (*pMecSpeedUnit < 0)
 8008cf2:	2b00      	cmp	r3, #0
      hAux = -(*pMecSpeedUnit);
 8008cf4:	bfb8      	it	lt
 8008cf6:	425b      	neglt	r3, r3
      hAbsMecSpeedUnit = (uint16_t)(*pMecSpeedUnit);
 8008cf8:	b29b      	uxth	r3, r3
    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 8008cfa:	459c      	cmp	ip, r3
    uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 8008cfc:	78c1      	ldrb	r1, [r0, #3]
    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 8008cfe:	7802      	ldrb	r2, [r0, #0]
    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
 8008d00:	8a84      	ldrh	r4, [r0, #20]
    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 8008d02:	d819      	bhi.n	8008d38 <SPD_IsMecSpeedReliable+0x50>
    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
 8008d04:	429c      	cmp	r4, r3
 8008d06:	bf2c      	ite	cs
 8008d08:	2400      	movcs	r4, #0
 8008d0a:	2401      	movcc	r4, #1
    {
      /* Nothing to do */
    }

    /* Compute absoulte value of mechanical acceleration */
    if (pHandle->hMecAccelUnitP < 0)
 8008d0c:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
    else
    {
      hAbsMecAccelUnitP = (uint16_t)pHandle->hMecAccelUnitP;
    }

    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 8008d10:	f8b0 c018 	ldrh.w	ip, [r0, #24]
    if (pHandle->hMecAccelUnitP < 0)
 8008d14:	2b00      	cmp	r3, #0
      hAux = -(pHandle->hMecAccelUnitP);
 8008d16:	bfb8      	it	lt
 8008d18:	425b      	neglt	r3, r3
      hAbsMecAccelUnitP = (uint16_t)pHandle->hMecAccelUnitP;
 8008d1a:	b29b      	uxth	r3, r3
    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 8008d1c:	459c      	cmp	ip, r3
 8008d1e:	d300      	bcc.n	8008d22 <SPD_IsMecSpeedReliable+0x3a>
    else
    {
      /* Nothing to do */
    }

    if (true == SpeedError)
 8008d20:	b164      	cbz	r4, 8008d3c <SPD_IsMecSpeedReliable+0x54>
    {
      if (bSpeedErrorNumber < bMaximumSpeedErrorsNumber)
 8008d22:	4291      	cmp	r1, r2
 8008d24:	d901      	bls.n	8008d2a <SPD_IsMecSpeedReliable+0x42>
      {
        bSpeedErrorNumber++;
 8008d26:	3201      	adds	r2, #1
 8008d28:	b2d2      	uxtb	r2, r2
    else
    {
      /* Nothing to do */
    }

    pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 8008d2a:	7002      	strb	r2, [r0, #0]
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  }
#endif
  return (SpeedSensorReliability);
}
 8008d2c:	1a50      	subs	r0, r2, r1
 8008d2e:	bf18      	it	ne
 8008d30:	2001      	movne	r0, #1
 8008d32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d36:	4770      	bx	lr
      SpeedError = true;
 8008d38:	2401      	movs	r4, #1
 8008d3a:	e7e7      	b.n	8008d0c <SPD_IsMecSpeedReliable+0x24>
        bSpeedErrorNumber = 0u;
 8008d3c:	4291      	cmp	r1, r2
 8008d3e:	bf88      	it	hi
 8008d40:	2200      	movhi	r2, #0
 8008d42:	e7f2      	b.n	8008d2a <SPD_IsMecSpeedReliable+0x42>

08008d44 <SPD_GetS16Speed>:
  }
  else
  {
#endif
    int32_t wAux = (int32_t)pHandle->hAvrMecSpeedUnit;
    wAux *= INT16_MAX;
 8008d44:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
    wAux /= (int16_t)pHandle->hMaxReliableMecSpeedUnit;
 8008d48:	f9b0 2014 	ldrsh.w	r2, [r0, #20]
    wAux *= INT16_MAX;
 8008d4c:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
    wAux /= (int16_t)pHandle->hMaxReliableMecSpeedUnit;
 8008d50:	fb93 f0f2 	sdiv	r0, r3, r2
    tempValue = (int16_t)wAux;
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  }
#endif
  return (tempValue);
}
 8008d54:	b200      	sxth	r0, r0
 8008d56:	4770      	bx	lr

08008d58 <STC_Init>:
  {
#endif
    pHandle->PISpeed = pPI;
    pHandle->SPD = SPD_Handle;
    pHandle->Mode = pHandle->ModeDefault;
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 8008d58:	f9b0 c02c 	ldrsh.w	ip, [r0, #44]	; 0x2c
    pHandle->PISpeed = pPI;
 8008d5c:	6101      	str	r1, [r0, #16]
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 8008d5e:	f9b0 102e 	ldrsh.w	r1, [r0, #46]	; 0x2e
    pHandle->SPD = SPD_Handle;
 8008d62:	6142      	str	r2, [r0, #20]
{
 8008d64:	b410      	push	{r4}
    pHandle->Mode = pHandle->ModeDefault;
 8008d66:	f890 402a 	ldrb.w	r4, [r0, #42]	; 0x2a
 8008d6a:	7004      	strb	r4, [r0, #0]
    pHandle->TargetFinal = 0;
 8008d6c:	2300      	movs	r3, #0
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 8008d6e:	ea4f 440c 	mov.w	r4, ip, lsl #16
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 8008d72:	0409      	lsls	r1, r1, #16
 8008d74:	e9c0 4101 	strd	r4, r1, [r0, #4]
    pHandle->TargetFinal = 0;
 8008d78:	8043      	strh	r3, [r0, #2]
    pHandle->RampRemainingStep = 0U;
    pHandle->IncDecAmount = 0;
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 8008d7a:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->RampRemainingStep = 0U;
 8008d7e:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 8008d80:	6183      	str	r3, [r0, #24]
}
 8008d82:	4770      	bx	lr

08008d84 <STC_SetSpeedSensor>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SPD = SPD_Handle;
 8008d84:	6141      	str	r1, [r0, #20]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 8008d86:	4770      	bx	lr

08008d88 <STC_GetSpeedSensor>:
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  return ((MC_NULL ==  pHandle) ? MC_NULL : pHandle->SPD);
#else
  return (pHandle->SPD);
#endif
}
 8008d88:	6940      	ldr	r0, [r0, #20]
 8008d8a:	4770      	bx	lr

08008d8c <STC_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (MCM_SPEED_MODE == pHandle->Mode)
 8008d8c:	7803      	ldrb	r3, [r0, #0]
 8008d8e:	2b03      	cmp	r3, #3
 8008d90:	d000      	beq.n	8008d94 <STC_Clear+0x8>
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 8008d92:	4770      	bx	lr
      PID_SetIntegralTerm(pHandle->PISpeed, 0);
 8008d94:	6900      	ldr	r0, [r0, #16]
 8008d96:	2100      	movs	r1, #0
 8008d98:	f7fe bec6 	b.w	8007b28 <PID_SetIntegralTerm>

08008d9c <STC_GetMecSpeedRefUnit>:
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->SpeedRefUnitExt / 65536));
#else
  return ((int16_t)(pHandle->SpeedRefUnitExt / 65536));
#endif
#endif
}
 8008d9c:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8008da0:	4770      	bx	lr
 8008da2:	bf00      	nop

08008da4 <STC_GetTorqueRef>:
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->TorqueRef / 65536));
#else
  return ((int16_t)(pHandle->TorqueRef / 65536));
#endif
#endif
}
 8008da4:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
 8008da8:	4770      	bx	lr
 8008daa:	bf00      	nop

08008dac <STC_SetControlMode>:
  }
  else
  {
#endif
    pHandle->Mode = bMode;
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp */
 8008dac:	2300      	movs	r3, #0
    pHandle->Mode = bMode;
 8008dae:	7001      	strb	r1, [r0, #0]
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp */
 8008db0:	60c3      	str	r3, [r0, #12]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 8008db2:	4770      	bx	lr

08008db4 <STC_ExecRamp>:
  * @ref EncAlignCtrl "Encoder Alignment Control",
  * @ref PositionControl "Position Control" loop or
  * speed regulation with @ref SpeedRegulatorPotentiometer Speed potentiometer.
  */
__weak bool STC_ExecRamp(SpeednTorqCtrl_Handle_t *pHandle, int16_t hTargetFinal, uint32_t hDurationms)
{
 8008db4:	b570      	push	{r4, r5, r6, lr}
    uint32_t wAux;
    int32_t wAux1;
    int16_t hCurrentReference;

    /* Check if the hTargetFinal is out of the bound of application */
    if (MCM_TORQUE_MODE == pHandle->Mode)
 8008db6:	7803      	ldrb	r3, [r0, #0]
 8008db8:	2b04      	cmp	r3, #4
{
 8008dba:	4604      	mov	r4, r0
 8008dbc:	460d      	mov	r5, r1
 8008dbe:	4616      	mov	r6, r2
    if (MCM_TORQUE_MODE == pHandle->Mode)
 8008dc0:	d01e      	beq.n	8008e00 <STC_ExecRamp+0x4c>
#else
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt / 65536);
#endif

#ifdef CHECK_BOUNDARY
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxAppPositiveMecSpeedUnit)
 8008dc2:	8bc3      	ldrh	r3, [r0, #30]
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt >> 16);
 8008dc4:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxAppPositiveMecSpeedUnit)
 8008dc8:	4299      	cmp	r1, r3
 8008dca:	dd01      	ble.n	8008dd0 <STC_ExecRamp+0x1c>
        allowedRange = false;
 8008dcc:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (allowedRange);
}
 8008dce:	bd70      	pop	{r4, r5, r6, pc}
      else if (hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit)
 8008dd0:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	; 0x24
 8008dd4:	428b      	cmp	r3, r1
 8008dd6:	dcf9      	bgt.n	8008dcc <STC_ExecRamp+0x18>
      else if ((int32_t)hTargetFinal < (int32_t)pHandle->MinAppPositiveMecSpeedUnit)
 8008dd8:	8c23      	ldrh	r3, [r4, #32]
 8008dda:	4299      	cmp	r1, r3
 8008ddc:	da03      	bge.n	8008de6 <STC_ExecRamp+0x32>
        if (hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit)
 8008dde:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
 8008de2:	428b      	cmp	r3, r1
 8008de4:	dbf2      	blt.n	8008dcc <STC_ExecRamp+0x18>
      if (0U == hDurationms)
 8008de6:	b9ae      	cbnz	r6, 8008e14 <STC_ExecRamp+0x60>
        if (MCM_SPEED_MODE == pHandle->Mode)
 8008de8:	7823      	ldrb	r3, [r4, #0]
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 8008dea:	042d      	lsls	r5, r5, #16
        if (MCM_SPEED_MODE == pHandle->Mode)
 8008dec:	2b03      	cmp	r3, #3
        pHandle->RampRemainingStep = 0U;
 8008dee:	f04f 0300 	mov.w	r3, #0
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 8008df2:	bf0c      	ite	eq
 8008df4:	6065      	streq	r5, [r4, #4]
          pHandle->TorqueRef = ((int32_t)hTargetFinal) * 65536;
 8008df6:	60a5      	strne	r5, [r4, #8]
        pHandle->RampRemainingStep = 0U;
 8008df8:	60e3      	str	r3, [r4, #12]
        pHandle->IncDecAmount = 0;
 8008dfa:	61a3      	str	r3, [r4, #24]
 8008dfc:	2001      	movs	r0, #1
}
 8008dfe:	bd70      	pop	{r4, r5, r6, pc}
      hCurrentReference = STC_GetTorqueRef(pHandle);
 8008e00:	f7ff ffd0 	bl	8008da4 <STC_GetTorqueRef>
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxPositiveTorque)
 8008e04:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8008e06:	429d      	cmp	r5, r3
 8008e08:	dce0      	bgt.n	8008dcc <STC_ExecRamp+0x18>
      if ((int32_t)hTargetFinal < (int32_t)pHandle->MinNegativeTorque)
 8008e0a:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 8008e0e:	42ab      	cmp	r3, r5
 8008e10:	dcdc      	bgt.n	8008dcc <STC_ExecRamp+0x18>
 8008e12:	e7e8      	b.n	8008de6 <STC_ExecRamp+0x32>
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 8008e14:	8ba3      	ldrh	r3, [r4, #28]
        wAux /= 1000U;
 8008e16:	4a08      	ldr	r2, [pc, #32]	; (8008e38 <STC_ExecRamp+0x84>)
        pHandle->TargetFinal = hTargetFinal;
 8008e18:	8065      	strh	r5, [r4, #2]
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 8008e1a:	fb06 f303 	mul.w	r3, r6, r3
        wAux /= 1000U;
 8008e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8008e22:	099b      	lsrs	r3, r3, #6
        pHandle->RampRemainingStep++;
 8008e24:	3301      	adds	r3, #1
        wAux1 = (((int32_t)hTargetFinal) - ((int32_t)hCurrentReference)) * 65536;
 8008e26:	1a28      	subs	r0, r5, r0
 8008e28:	0400      	lsls	r0, r0, #16
        pHandle->RampRemainingStep++;
 8008e2a:	60e3      	str	r3, [r4, #12]
        wAux1 /= ((int32_t)pHandle->RampRemainingStep);
 8008e2c:	fb90 f0f3 	sdiv	r0, r0, r3
        pHandle->IncDecAmount = wAux1;
 8008e30:	61a0      	str	r0, [r4, #24]
 8008e32:	2001      	movs	r0, #1
}
 8008e34:	bd70      	pop	{r4, r5, r6, pc}
 8008e36:	bf00      	nop
 8008e38:	10624dd3 	.word	0x10624dd3

08008e3c <STC_StopRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->RampRemainingStep = 0U;
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 8008e40:	6183      	str	r3, [r0, #24]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 8008e42:	4770      	bx	lr

08008e44 <STC_CalcTorqueReference>:
  * - Must be called at fixed time equal to hSTCFrequencyHz. It is called
  * passing as parameter the speed sensor used to perform the speed regulation.
  * - Called during START and ALIGNEMENT states of the MC state machine into MediumFrequencyTask.
  */
__weak int16_t STC_CalcTorqueReference(SpeednTorqCtrl_Handle_t *pHandle)
{
 8008e44:	b538      	push	{r3, r4, r5, lr}
    int16_t hTargetSpeed;
    int16_t hError;

    if (MCM_TORQUE_MODE == pHandle->Mode)
    {
      wCurrentReference = pHandle->TorqueRef;
 8008e46:	e9d0 5101 	ldrd	r5, r1, [r0, #4]
    if (MCM_TORQUE_MODE == pHandle->Mode)
 8008e4a:	7802      	ldrb	r2, [r0, #0]
      wCurrentReference = pHandle->SpeedRefUnitExt;
    }

    /* Update the speed reference or the torque reference according to the mode
       and terminates the ramp if needed */
    if (pHandle->RampRemainingStep > 1U)
 8008e4c:	68c3      	ldr	r3, [r0, #12]
      wCurrentReference = pHandle->TorqueRef;
 8008e4e:	2a04      	cmp	r2, #4
 8008e50:	bf08      	it	eq
 8008e52:	460d      	moveq	r5, r1
    if (pHandle->RampRemainingStep > 1U)
 8008e54:	2b01      	cmp	r3, #1
{
 8008e56:	4604      	mov	r4, r0
    if (pHandle->RampRemainingStep > 1U)
 8008e58:	d908      	bls.n	8008e6c <STC_CalcTorqueReference+0x28>
    {
      /* Increment/decrement the reference value */
      wCurrentReference += pHandle->IncDecAmount;
 8008e5a:	6981      	ldr	r1, [r0, #24]

      /* Decrement the number of remaining steps */
      pHandle->RampRemainingStep--;
 8008e5c:	3b01      	subs	r3, #1
      wCurrentReference += pHandle->IncDecAmount;
 8008e5e:	440d      	add	r5, r1
      pHandle->RampRemainingStep--;
 8008e60:	60c3      	str	r3, [r0, #12]
    else
    {
      /* Do nothing */
    }

    if (MCM_SPEED_MODE == pHandle->Mode)
 8008e62:	2a03      	cmp	r2, #3
 8008e64:	d00b      	beq.n	8008e7e <STC_CalcTorqueReference+0x3a>
    else
    {
      pHandle->TorqueRef = wCurrentReference;
#ifndef FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hTorqueReference = (int16_t)(wCurrentReference >> 16);
 8008e66:	1428      	asrs	r0, r5, #16
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
 8008e68:	60a5      	str	r5, [r4, #8]
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (hTorqueReference);
}
 8008e6a:	bd38      	pop	{r3, r4, r5, pc}
    else if (1U == pHandle->RampRemainingStep)
 8008e6c:	d1f9      	bne.n	8008e62 <STC_CalcTorqueReference+0x1e>
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 8008e6e:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
      pHandle->RampRemainingStep = 0U;
 8008e72:	2300      	movs	r3, #0
    if (MCM_SPEED_MODE == pHandle->Mode)
 8008e74:	2a03      	cmp	r2, #3
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 8008e76:	ea4f 4505 	mov.w	r5, r5, lsl #16
      pHandle->RampRemainingStep = 0U;
 8008e7a:	60c3      	str	r3, [r0, #12]
    if (MCM_SPEED_MODE == pHandle->Mode)
 8008e7c:	d1f3      	bne.n	8008e66 <STC_CalcTorqueReference+0x22>
      hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit(pHandle->SPD);
 8008e7e:	6960      	ldr	r0, [r4, #20]
 8008e80:	f7ff ff2a 	bl	8008cd8 <SPD_GetAvrgMecSpeedUnit>
      hError = hTargetSpeed - hMeasuredSpeed;
 8008e84:	ebc0 4125 	rsb	r1, r0, r5, asr #16
      hTorqueReference = PI_Controller(pHandle->PISpeed, (int32_t)hError);
 8008e88:	b209      	sxth	r1, r1
 8008e8a:	6920      	ldr	r0, [r4, #16]
 8008e8c:	f7fe fe7e 	bl	8007b8c <PI_Controller>
      pHandle->SpeedRefUnitExt = wCurrentReference;
 8008e90:	6065      	str	r5, [r4, #4]
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
 8008e92:	0405      	lsls	r5, r0, #16
 8008e94:	60a5      	str	r5, [r4, #8]
}
 8008e96:	bd38      	pop	{r3, r4, r5, pc}

08008e98 <STC_GetMecSpeedRefUnitDefault>:
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  return ((MC_NULL == pHandle) ? 0 : pHandle->MecSpeedRefUnitDefault);
#else
  return (pHandle->MecSpeedRefUnitDefault);
#endif
}
 8008e98:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
 8008e9c:	4770      	bx	lr
 8008e9e:	bf00      	nop

08008ea0 <STC_GetDefaultIqdref>:
    IqdRefDefault.d = 0;
  }
  else
  {
#endif
    IqdRefDefault.q = pHandle->TorqueRefDefault;
 8008ea0:	f8d0 302e 	ldr.w	r3, [r0, #46]	; 0x2e
    IqdRefDefault.d = pHandle->IdrefDefault;
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (IqdRefDefault);
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	b299      	uxth	r1, r3
 8008ea8:	f361 020f 	bfi	r2, r1, #0, #16
 8008eac:	0c1b      	lsrs	r3, r3, #16
 8008eae:	f363 421f 	bfi	r2, r3, #16, #16
{
 8008eb2:	b082      	sub	sp, #8
}
 8008eb4:	4610      	mov	r0, r2
 8008eb6:	b002      	add	sp, #8
 8008eb8:	4770      	bx	lr
 8008eba:	bf00      	nop

08008ebc <STC_ForceSpeedReferenceToCurrentSpeed>:
  *
  * - Called during the CHARGE_BOOT_CAP, SWITCH_OVER and WAIT_STOP_MOTOR states of the MC state machine
  * into MediumFrequencyTask to initialize the speed reference.
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed(SpeednTorqCtrl_Handle_t *pHandle)
{
 8008ebc:	b510      	push	{r4, lr}
 8008ebe:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SpeedRefUnitExt = ((int32_t)SPD_GetAvrgMecSpeedUnit(pHandle->SPD)) * (int32_t)65536;
 8008ec0:	6940      	ldr	r0, [r0, #20]
 8008ec2:	f7ff ff09 	bl	8008cd8 <SPD_GetAvrgMecSpeedUnit>
 8008ec6:	0400      	lsls	r0, r0, #16
 8008ec8:	6060      	str	r0, [r4, #4]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 8008eca:	bd10      	pop	{r4, pc}

08008ecc <TC_Init>:
 
  */
void TC_Init(PosCtrl_Handle_t *pHandle, PID_Handle_t *pPIDPosReg, SpeednTorqCtrl_Handle_t *pSTC, ENCODER_Handle_t *pENC)
{

  pHandle->MovementDuration = 0.0f;
 8008ecc:	f04f 0c00 	mov.w	ip, #0
  pHandle->ElapseTime = 0.0f;

  pHandle->PositionControlRegulation = DISABLE;
  pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;

  pHandle->pENC = pENC;
 8008ed0:	6643      	str	r3, [r0, #100]	; 0x64
  pHandle->TcTick = 0;
 8008ed2:	2300      	movs	r3, #0
  pHandle->pSTC = pSTC;
 8008ed4:	e9c0 211a 	strd	r2, r1, [r0, #104]	; 0x68
  pHandle->MovementDuration = 0.0f;
 8008ed8:	f8c0 c000 	str.w	ip, [r0]
  pHandle->AngleStep = 0.0f;
 8008edc:	f8c0 c00c 	str.w	ip, [r0, #12]
  pHandle->SubStep[0] = 0.0f;
 8008ee0:	f8c0 c010 	str.w	ip, [r0, #16]
  pHandle->SubStep[1] = 0.0f;
 8008ee4:	f8c0 c014 	str.w	ip, [r0, #20]
  pHandle->SubStep[2] = 0.0f;
 8008ee8:	f8c0 c018 	str.w	ip, [r0, #24]
  pHandle->SubStep[3] = 0.0f;
 8008eec:	f8c0 c01c 	str.w	ip, [r0, #28]
  pHandle->SubStep[4] = 0.0f;
 8008ef0:	f8c0 c020 	str.w	ip, [r0, #32]
  pHandle->SubStep[5] = 0.0f;
 8008ef4:	f8c0 c024 	str.w	ip, [r0, #36]	; 0x24
  pHandle->SubStepDuration = 0;
 8008ef8:	f8c0 c028 	str.w	ip, [r0, #40]	; 0x28
  pHandle->ElapseTime = 0.0f;
 8008efc:	f8c0 c02c 	str.w	ip, [r0, #44]	; 0x2c
  pHandle->Jerk = 0.0f;
 8008f00:	f8c0 c034 	str.w	ip, [r0, #52]	; 0x34
  pHandle->CruiseSpeed = 0.0f;
 8008f04:	f8c0 c038 	str.w	ip, [r0, #56]	; 0x38
  pHandle->Acceleration = 0.0f;
 8008f08:	f8c0 c03c 	str.w	ip, [r0, #60]	; 0x3c
  pHandle->Omega = 0.0f;
 8008f0c:	f8c0 c040 	str.w	ip, [r0, #64]	; 0x40
  pHandle->OmegaPrev = 0.0f;
 8008f10:	f8c0 c044 	str.w	ip, [r0, #68]	; 0x44
  pHandle->Theta = 0.0f;
 8008f14:	f8c0 c048 	str.w	ip, [r0, #72]	; 0x48
  pHandle->ThetaPrev = 0.0f;
 8008f18:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
  pHandle->TcTick = 0;
 8008f1c:	6583      	str	r3, [r0, #88]	; 0x58
  pHandle->ReceivedTh = 0.0f;
 8008f1e:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
  pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;
 8008f22:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
  pHandle->PIDPosRegulator = pPIDPosReg;

  pHandle->MecAngleOffset = 0;
 8008f26:	f8a0 3054 	strh.w	r3, [r0, #84]	; 0x54
}
 8008f2a:	4770      	bx	lr

08008f2c <TC_MoveCommand>:
  * This function implements the Trajectory Control mode. When fDuration is different from 0,
  * the trajectory of the movement, and therefore its acceleration and speed, are computed. 
  * 
  */
bool TC_MoveCommand(PosCtrl_Handle_t *pHandle, float startingAngle, float angleStep, float movementDuration)
{
 8008f2c:	4603      	mov	r3, r0

  bool RetConfigStatus = false;
  float fMinimumStepDuration;

  if ((pHandle->PositionCtrlStatus == TC_FOLLOWING_ON_GOING) && (movementDuration > 0))
 8008f2e:	f890 0060 	ldrb.w	r0, [r0, #96]	; 0x60
 8008f32:	2803      	cmp	r0, #3
 8008f34:	d061      	beq.n	8008ffa <TC_MoveCommand+0xce>
  else
  {
    /* Nothing to do */
  }

  if ((pHandle->PositionCtrlStatus == TC_READY_FOR_COMMAND) && (movementDuration > 0))
 8008f36:	b108      	cbz	r0, 8008f3c <TC_MoveCommand+0x10>
  bool RetConfigStatus = false;
 8008f38:	2000      	movs	r0, #0
  else
  {
    /* Nothing to do */
  }
  return (RetConfigStatus);
}
 8008f3a:	4770      	bx	lr
  if ((pHandle->PositionCtrlStatus == TC_READY_FOR_COMMAND) && (movementDuration > 0))
 8008f3c:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 8008f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f44:	ddf9      	ble.n	8008f3a <TC_MoveCommand+0xe>
    fMinimumStepDuration = (9.0f * pHandle->SamplingTime);
 8008f46:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 8008f4a:	ed9f 4a2f 	vldr	s8, [pc, #188]	; 8009008 <TC_MoveCommand+0xdc>
    pHandle->StartingAngle = startingAngle;
 8008f4e:	ed83 0a01 	vstr	s0, [r3, #4]
    fMinimumStepDuration = (9.0f * pHandle->SamplingTime);
 8008f52:	eef2 7a02 	vmov.f32	s15, #34	; 0x41100000  9.0
 8008f56:	ee66 6aa7 	vmul.f32	s13, s13, s15
    pHandle->SubStepDuration = pHandle->MovementDuration / 9.0f;
 8008f5a:	eddf 7a2c 	vldr	s15, [pc, #176]	; 800900c <TC_MoveCommand+0xe0>
    pHandle->AngleStep = angleStep;
 8008f5e:	edc3 0a03 	vstr	s1, [r3, #12]
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 8008f62:	ee81 7a26 	vdiv.f32	s14, s2, s13
    pHandle->ElapseTime = 0.0f;
 8008f66:	2200      	movs	r2, #0
    pHandle->PositionControlRegulation = ENABLE;
 8008f68:	2001      	movs	r0, #1
 8008f6a:	f883 0051 	strb.w	r0, [r3, #81]	; 0x51
    pHandle->ElapseTime = 0.0f;
 8008f6e:	62da      	str	r2, [r3, #44]	; 0x2c
    pHandle->Omega = 0.0f;
 8008f70:	641a      	str	r2, [r3, #64]	; 0x40
    pHandle->Acceleration = 0.0f;
 8008f72:	63da      	str	r2, [r3, #60]	; 0x3c
    pHandle->PositionCtrlStatus = TC_MOVEMENT_ON_GOING;   /* new trajectory has been programmed */
 8008f74:	f883 0060 	strb.w	r0, [r3, #96]	; 0x60
    pHandle->FinalAngle = startingAngle + angleStep;
 8008f78:	ee70 3a20 	vadd.f32	s7, s0, s1
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 8008f7c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 8008f80:	ee20 4a84 	vmul.f32	s8, s1, s8
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 8008f84:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    pHandle->FinalAngle = startingAngle + angleStep;
 8008f88:	edc3 3a02 	vstr	s7, [r3, #8]
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 8008f8c:	ee27 7a26 	vmul.f32	s14, s14, s13
    pHandle->SubStep[5] = 8 * pHandle->SubStepDuration;   /* Sub-step 3 of deceleration phase */
 8008f90:	eeb2 6a00 	vmov.f32	s12, #32	; 0x41000000  8.0
    pHandle->SubStepDuration = pHandle->MovementDuration / 9.0f;
 8008f94:	ee67 7a27 	vmul.f32	s15, s14, s15
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 8008f98:	ed83 7a00 	vstr	s14, [r3]
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 8008f9c:	ee27 7aa7 	vmul.f32	s14, s15, s15
    pHandle->SubStep[2] = 3 * pHandle->SubStepDuration;   /* Sub-step 3 of acceleration phase */
 8008fa0:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 8008fa4:	ee67 6a27 	vmul.f32	s13, s14, s15
    pHandle->CruiseSpeed = 2 * pHandle->Jerk * pHandle->SubStepDuration * pHandle->SubStepDuration;
 8008fa8:	ee37 7a07 	vadd.f32	s14, s14, s14
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 8008fac:	eec4 3a26 	vdiv.f32	s7, s8, s13
    pHandle->SubStep[3] = 6 * pHandle->SubStepDuration;   /* Sub-step 1 of deceleration phase */
 8008fb0:	eeb1 5a08 	vmov.f32	s10, #24	; 0x40c00000  6.0
    pHandle->SubStep[4] = 7 * pHandle->SubStepDuration;   /* Sub-step 2 of deceleration phase */
 8008fb4:	eef1 5a0c 	vmov.f32	s11, #28	; 0x40e00000  7.0
    pHandle->SubStep[1] = 2 * pHandle->SubStepDuration;   /* Sub-step 2 of acceleration phase */
 8008fb8:	ee37 3aa7 	vadd.f32	s6, s15, s15
    pHandle->SubStep[2] = 3 * pHandle->SubStepDuration;   /* Sub-step 3 of acceleration phase */
 8008fbc:	ee67 4aa4 	vmul.f32	s9, s15, s9
    pHandle->SubStep[3] = 6 * pHandle->SubStepDuration;   /* Sub-step 1 of deceleration phase */
 8008fc0:	ee27 5a85 	vmul.f32	s10, s15, s10
    pHandle->SubStep[4] = 7 * pHandle->SubStepDuration;   /* Sub-step 2 of deceleration phase */
 8008fc4:	ee67 5aa5 	vmul.f32	s11, s15, s11
    pHandle->SubStep[5] = 8 * pHandle->SubStepDuration;   /* Sub-step 3 of deceleration phase */
 8008fc8:	ee67 6a86 	vmul.f32	s13, s15, s12
    pHandle->CruiseSpeed = 2 * pHandle->Jerk * pHandle->SubStepDuration * pHandle->SubStepDuration;
 8008fcc:	ee27 7a23 	vmul.f32	s14, s14, s7
    pHandle->Theta = startingAngle;
 8008fd0:	ed83 0a12 	vstr	s0, [r3, #72]	; 0x48
    pHandle->SubStepDuration = pHandle->MovementDuration / 9.0f;
 8008fd4:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    pHandle->SubStep[0] = 1 * pHandle->SubStepDuration;   /* Sub-step 1 of acceleration phase */
 8008fd8:	edc3 7a04 	vstr	s15, [r3, #16]
    pHandle->SubStep[1] = 2 * pHandle->SubStepDuration;   /* Sub-step 2 of acceleration phase */
 8008fdc:	ed83 3a05 	vstr	s6, [r3, #20]
    pHandle->SubStep[2] = 3 * pHandle->SubStepDuration;   /* Sub-step 3 of acceleration phase */
 8008fe0:	edc3 4a06 	vstr	s9, [r3, #24]
    pHandle->SubStep[3] = 6 * pHandle->SubStepDuration;   /* Sub-step 1 of deceleration phase */
 8008fe4:	ed83 5a07 	vstr	s10, [r3, #28]
    pHandle->SubStep[4] = 7 * pHandle->SubStepDuration;   /* Sub-step 2 of deceleration phase */
 8008fe8:	edc3 5a08 	vstr	s11, [r3, #32]
    pHandle->SubStep[5] = 8 * pHandle->SubStepDuration;   /* Sub-step 3 of deceleration phase */
 8008fec:	edc3 6a09 	vstr	s13, [r3, #36]	; 0x24
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 8008ff0:	edc3 3a0d 	vstr	s7, [r3, #52]	; 0x34
    pHandle->CruiseSpeed = 2 * pHandle->Jerk * pHandle->SubStepDuration * pHandle->SubStepDuration;
 8008ff4:	ed83 7a0e 	vstr	s14, [r3, #56]	; 0x38
  return (RetConfigStatus);
 8008ff8:	4770      	bx	lr
  if ((pHandle->PositionCtrlStatus == TC_FOLLOWING_ON_GOING) && (movementDuration > 0))
 8008ffa:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 8008ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009002:	dca0      	bgt.n	8008f46 <TC_MoveCommand+0x1a>
 8009004:	e798      	b.n	8008f38 <TC_MoveCommand+0xc>
 8009006:	bf00      	nop
 8009008:	3daaaaab 	.word	0x3daaaaab
 800900c:	3de38e39 	.word	0x3de38e39

08009010 <TC_FollowCommand>:
void TC_FollowCommand(PosCtrl_Handle_t *pHandle, float Angle)
{
  float omega = 0, acceleration = 0, dt = 0;

  /* Estimate speed */
  if (pHandle->ReceivedTh > 0)
 8009010:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8009014:	b9b3      	cbnz	r3, 8009044 <TC_FollowCommand+0x34>
  float omega = 0, acceleration = 0, dt = 0;
 8009016:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8009098 <TC_FollowCommand+0x88>
 800901a:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8009098 <TC_FollowCommand+0x88>
  {
    /* Nothing to do */
  }

  /* Update state variable */
  pHandle->ThetaPrev  = Angle;
 800901e:	ed80 0a13 	vstr	s0, [r0, #76]	; 0x4c
  pHandle->OmegaPrev = omega;
  if (pHandle->ReceivedTh < 2)
  {
    pHandle->ReceivedTh++;
 8009022:	3301      	adds	r3, #1
  pHandle->OmegaPrev = omega;
 8009024:	ed80 7a11 	vstr	s14, [r0, #68]	; 0x44
    pHandle->ReceivedTh++;
 8009028:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  pHandle->Acceleration = acceleration;
  pHandle->Omega = omega;
  pHandle->Theta = Angle;

  pHandle->PositionCtrlStatus = TC_FOLLOWING_ON_GOING;   /* follow mode has been programmed */
  pHandle->MovementDuration = 0;
 800902c:	2300      	movs	r3, #0
  pHandle->PositionCtrlStatus = TC_FOLLOWING_ON_GOING;   /* follow mode has been programmed */
 800902e:	2203      	movs	r2, #3
  pHandle->Acceleration = acceleration;
 8009030:	edc0 6a0f 	vstr	s13, [r0, #60]	; 0x3c
  pHandle->Omega = omega;
 8009034:	ed80 7a10 	vstr	s14, [r0, #64]	; 0x40
  pHandle->Theta = Angle;
 8009038:	ed80 0a12 	vstr	s0, [r0, #72]	; 0x48
  pHandle->PositionCtrlStatus = TC_FOLLOWING_ON_GOING;   /* follow mode has been programmed */
 800903c:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
  pHandle->MovementDuration = 0;
 8009040:	6003      	str	r3, [r0, #0]
}
 8009042:	4770      	bx	lr
    dt = pHandle->TcTick * pHandle->SysTickPeriod;
 8009044:	edd0 7a16 	vldr	s15, [r0, #88]	; 0x58
 8009048:	ed90 7a17 	vldr	s14, [r0, #92]	; 0x5c
 800904c:	eef8 7a67 	vcvt.f32.u32	s15, s15
    pHandle->TcTick = 0;
 8009050:	2200      	movs	r2, #0
    dt = pHandle->TcTick * pHandle->SysTickPeriod;
 8009052:	ee67 7a87 	vmul.f32	s15, s15, s14
    pHandle->TcTick = 0;
 8009056:	6582      	str	r2, [r0, #88]	; 0x58
    if (dt > 0)
 8009058:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800905c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009060:	dd12      	ble.n	8009088 <TC_FollowCommand+0x78>
      omega = (Angle - pHandle->ThetaPrev) / dt;
 8009062:	edd0 6a13 	vldr	s13, [r0, #76]	; 0x4c
 8009066:	ee70 6a66 	vsub.f32	s13, s0, s13
  if (pHandle->ReceivedTh > 1)
 800906a:	2b01      	cmp	r3, #1
      omega = (Angle - pHandle->ThetaPrev) / dt;
 800906c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
  if (pHandle->ReceivedTh > 1)
 8009070:	d0d3      	beq.n	800901a <TC_FollowCommand+0xa>
      acceleration = (omega - pHandle->OmegaPrev) / dt;
 8009072:	ed90 6a11 	vldr	s12, [r0, #68]	; 0x44
 8009076:	ee37 6a46 	vsub.f32	s12, s14, s12
 800907a:	eec6 6a27 	vdiv.f32	s13, s12, s15
  pHandle->ThetaPrev  = Angle;
 800907e:	ed80 0a13 	vstr	s0, [r0, #76]	; 0x4c
  pHandle->OmegaPrev = omega;
 8009082:	ed80 7a11 	vstr	s14, [r0, #68]	; 0x44
  if (pHandle->ReceivedTh < 2)
 8009086:	e7d1      	b.n	800902c <TC_FollowCommand+0x1c>
  if (pHandle->ReceivedTh > 1)
 8009088:	2b01      	cmp	r3, #1
 800908a:	d0c4      	beq.n	8009016 <TC_FollowCommand+0x6>
  float omega = 0, acceleration = 0, dt = 0;
 800908c:	ed9f 7a02 	vldr	s14, [pc, #8]	; 8009098 <TC_FollowCommand+0x88>
 8009090:	eef0 6a47 	vmov.f32	s13, s14
 8009094:	e7f3      	b.n	800907e <TC_FollowCommand+0x6e>
 8009096:	bf00      	nop
 8009098:	00000000 	.word	0x00000000

0800909c <TC_MoveExecution>:
void TC_MoveExecution(PosCtrl_Handle_t *pHandle)
{

  float jerkApplied = 0;

  if (pHandle->ElapseTime < pHandle->SubStep[0])            /* 1st Sub-Step interval time of acceleration phase */
 800909c:	edd0 7a0b 	vldr	s15, [r0, #44]	; 0x2c
 80090a0:	ed90 7a04 	vldr	s14, [r0, #16]
 80090a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80090a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090ac:	d535      	bpl.n	800911a <TC_MoveExecution+0x7e>
  {
    jerkApplied = pHandle->Jerk;
 80090ae:	ed90 5a0d 	vldr	s10, [r0, #52]	; 0x34
  }
  else if (pHandle->ElapseTime < pHandle->SubStep[5])       /* 2nd Sub-Step interval time of deceleration phase */
  {

  }
  else if (pHandle->ElapseTime < pHandle->MovementDuration) /* 3rd Sub-Step interval time of deceleration phase */
 80090b2:	edd0 6a00 	vldr	s13, [r0]
  {
    pHandle->Theta = pHandle->FinalAngle;
    pHandle->PositionCtrlStatus = TC_TARGET_POSITION_REACHED;
  }

  if (TC_MOVEMENT_ON_GOING == pHandle->PositionCtrlStatus)
 80090b6:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
  {
    pHandle->Acceleration += jerkApplied * pHandle->SamplingTime;
 80090ba:	ed90 7a0c 	vldr	s14, [r0, #48]	; 0x30
  if (TC_MOVEMENT_ON_GOING == pHandle->PositionCtrlStatus)
 80090be:	2b01      	cmp	r3, #1
 80090c0:	d113      	bne.n	80090ea <TC_MoveExecution+0x4e>
    pHandle->Acceleration += jerkApplied * pHandle->SamplingTime;
 80090c2:	edd0 5a0f 	vldr	s11, [r0, #60]	; 0x3c
    pHandle->Omega += pHandle->Acceleration * pHandle->SamplingTime;
 80090c6:	ed90 6a10 	vldr	s12, [r0, #64]	; 0x40
    pHandle->Acceleration += jerkApplied * pHandle->SamplingTime;
 80090ca:	eee7 5a05 	vfma.f32	s11, s14, s10
    pHandle->Theta += pHandle->Omega * pHandle->SamplingTime;
 80090ce:	ed90 5a12 	vldr	s10, [r0, #72]	; 0x48
    pHandle->Acceleration += jerkApplied * pHandle->SamplingTime;
 80090d2:	edc0 5a0f 	vstr	s11, [r0, #60]	; 0x3c
    pHandle->Omega += pHandle->Acceleration * pHandle->SamplingTime;
 80090d6:	eea7 6a25 	vfma.f32	s12, s14, s11
    pHandle->Theta += pHandle->Omega * pHandle->SamplingTime;
 80090da:	eef0 5a45 	vmov.f32	s11, s10
 80090de:	eee7 5a06 	vfma.f32	s11, s14, s12
    pHandle->Omega += pHandle->Acceleration * pHandle->SamplingTime;
 80090e2:	ed80 6a10 	vstr	s12, [r0, #64]	; 0x40
    pHandle->Theta += pHandle->Omega * pHandle->SamplingTime;
 80090e6:	edc0 5a12 	vstr	s11, [r0, #72]	; 0x48
  else
  {
    /* Nothing to do */
  }

  pHandle->ElapseTime += pHandle->SamplingTime;
 80090ea:	ee77 7a87 	vadd.f32	s15, s15, s14
bool TC_RampCompleted(PosCtrl_Handle_t *pHandle)
{
  bool retVal = false;

  /* Check that entire sequence (Acceleration - Cruise - Deceleration) is completed */
  if (pHandle->ElapseTime > pHandle->MovementDuration + pHandle->SamplingTime)
 80090ee:	ee76 6a87 	vadd.f32	s13, s13, s14
  pHandle->ElapseTime += pHandle->SamplingTime;
 80090f2:	edc0 7a0b 	vstr	s15, [r0, #44]	; 0x2c
  if (pHandle->ElapseTime > pHandle->MovementDuration + pHandle->SamplingTime)
 80090f6:	eef4 7ae6 	vcmpe.f32	s15, s13
 80090fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090fe:	dd0b      	ble.n	8009118 <TC_MoveExecution+0x7c>
    if (TC_ZERO_ALIGNMENT_START == pHandle->AlignmentStatus)
 8009100:	f890 3062 	ldrb.w	r3, [r0, #98]	; 0x62
 8009104:	2b01      	cmp	r3, #1
      pHandle->AlignmentStatus = TC_ALIGNMENT_ERROR;
 8009106:	bf04      	itt	eq
 8009108:	2305      	moveq	r3, #5
 800910a:	f880 3062 	strbeq.w	r3, [r0, #98]	; 0x62
    pHandle->ElapseTime = 0;
 800910e:	2200      	movs	r2, #0
    pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;
 8009110:	2300      	movs	r3, #0
    pHandle->ElapseTime = 0;
 8009112:	62c2      	str	r2, [r0, #44]	; 0x2c
    pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;
 8009114:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
}
 8009118:	4770      	bx	lr
  else if (pHandle->ElapseTime < pHandle->SubStep[1])       /* 2nd Sub-Step interval time of acceleration phase */
 800911a:	ed90 7a05 	vldr	s14, [r0, #20]
 800911e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009126:	d504      	bpl.n	8009132 <TC_MoveExecution+0x96>
  else if (pHandle->ElapseTime < pHandle->MovementDuration) /* 3rd Sub-Step interval time of deceleration phase */
 8009128:	edd0 6a00 	vldr	s13, [r0]
  float jerkApplied = 0;
 800912c:	ed9f 5a21 	vldr	s10, [pc, #132]	; 80091b4 <TC_MoveExecution+0x118>
 8009130:	e7c1      	b.n	80090b6 <TC_MoveExecution+0x1a>
  else if (pHandle->ElapseTime < pHandle->SubStep[2])       /* 3rd Sub-Step interval time of acceleration phase */
 8009132:	ed90 7a06 	vldr	s14, [r0, #24]
 8009136:	eef4 7ac7 	vcmpe.f32	s15, s14
 800913a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800913e:	d418      	bmi.n	8009172 <TC_MoveExecution+0xd6>
  else if (pHandle->ElapseTime < pHandle->SubStep[3])       /* Speed Cruise phase (after acceleration and before
 8009140:	ed90 7a07 	vldr	s14, [r0, #28]
 8009144:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800914c:	d50a      	bpl.n	8009164 <TC_MoveExecution+0xc8>
    pHandle->Acceleration = 0.0f;
 800914e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80091b4 <TC_MoveExecution+0x118>
    pHandle->Omega = pHandle->CruiseSpeed;
 8009152:	6b83      	ldr	r3, [r0, #56]	; 0x38
  else if (pHandle->ElapseTime < pHandle->MovementDuration) /* 3rd Sub-Step interval time of deceleration phase */
 8009154:	edd0 6a00 	vldr	s13, [r0]
    pHandle->Acceleration = 0.0f;
 8009158:	ed80 7a0f 	vstr	s14, [r0, #60]	; 0x3c
  float jerkApplied = 0;
 800915c:	eeb0 5a47 	vmov.f32	s10, s14
    pHandle->Omega = pHandle->CruiseSpeed;
 8009160:	6403      	str	r3, [r0, #64]	; 0x40
 8009162:	e7a8      	b.n	80090b6 <TC_MoveExecution+0x1a>
  else if (pHandle->ElapseTime < pHandle->SubStep[4])       /* 1st Sub-Step interval time of deceleration phase */
 8009164:	ed90 7a08 	vldr	s14, [r0, #32]
 8009168:	eef4 7ac7 	vcmpe.f32	s15, s14
 800916c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009170:	d506      	bpl.n	8009180 <TC_MoveExecution+0xe4>
    jerkApplied = -(pHandle->Jerk);
 8009172:	ed90 5a0d 	vldr	s10, [r0, #52]	; 0x34
  else if (pHandle->ElapseTime < pHandle->MovementDuration) /* 3rd Sub-Step interval time of deceleration phase */
 8009176:	edd0 6a00 	vldr	s13, [r0]
    jerkApplied = -(pHandle->Jerk);
 800917a:	eeb1 5a45 	vneg.f32	s10, s10
 800917e:	e79a      	b.n	80090b6 <TC_MoveExecution+0x1a>
  else if (pHandle->ElapseTime < pHandle->SubStep[5])       /* 2nd Sub-Step interval time of deceleration phase */
 8009180:	ed90 7a09 	vldr	s14, [r0, #36]	; 0x24
 8009184:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800918c:	d4cc      	bmi.n	8009128 <TC_MoveExecution+0x8c>
  else if (pHandle->ElapseTime < pHandle->MovementDuration) /* 3rd Sub-Step interval time of deceleration phase */
 800918e:	edd0 6a00 	vldr	s13, [r0]
 8009192:	eef4 7ae6 	vcmpe.f32	s15, s13
 8009196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800919a:	d502      	bpl.n	80091a2 <TC_MoveExecution+0x106>
    jerkApplied = pHandle->Jerk;
 800919c:	ed90 5a0d 	vldr	s10, [r0, #52]	; 0x34
 80091a0:	e789      	b.n	80090b6 <TC_MoveExecution+0x1a>
    pHandle->Theta = pHandle->FinalAngle;
 80091a2:	6882      	ldr	r2, [r0, #8]
    pHandle->Acceleration += jerkApplied * pHandle->SamplingTime;
 80091a4:	ed90 7a0c 	vldr	s14, [r0, #48]	; 0x30
    pHandle->Theta = pHandle->FinalAngle;
 80091a8:	6482      	str	r2, [r0, #72]	; 0x48
    pHandle->PositionCtrlStatus = TC_TARGET_POSITION_REACHED;
 80091aa:	2302      	movs	r3, #2
 80091ac:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
  if (TC_MOVEMENT_ON_GOING == pHandle->PositionCtrlStatus)
 80091b0:	e79b      	b.n	80090ea <TC_MoveExecution+0x4e>
 80091b2:	bf00      	nop
 80091b4:	00000000 	.word	0x00000000

080091b8 <TC_PositionRegulation>:
{
 80091b8:	b538      	push	{r3, r4, r5, lr}
  if (pHandle->PositionCtrlStatus == TC_MOVEMENT_ON_GOING)
 80091ba:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 80091be:	2b01      	cmp	r3, #1
{
 80091c0:	4604      	mov	r4, r0
  if (pHandle->PositionCtrlStatus == TC_MOVEMENT_ON_GOING)
 80091c2:	d034      	beq.n	800922e <TC_PositionRegulation+0x76>
  if (pHandle->PositionCtrlStatus == TC_FOLLOWING_ON_GOING)
 80091c4:	2b03      	cmp	r3, #3
 80091c6:	d10f      	bne.n	80091e8 <TC_PositionRegulation+0x30>
  pHandle->Omega += pHandle->Acceleration * pHandle->SamplingTime;
 80091c8:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 80091cc:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
 80091d0:	ed94 6a0f 	vldr	s12, [r4, #60]	; 0x3c
  pHandle->Theta += pHandle->Omega        * pHandle->SamplingTime;
 80091d4:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
  pHandle->Omega += pHandle->Acceleration * pHandle->SamplingTime;
 80091d8:	eee6 7a26 	vfma.f32	s15, s12, s13
  pHandle->Theta += pHandle->Omega        * pHandle->SamplingTime;
 80091dc:	eea6 7aa7 	vfma.f32	s14, s13, s15
  pHandle->Omega += pHandle->Acceleration * pHandle->SamplingTime;
 80091e0:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
  pHandle->Theta += pHandle->Omega        * pHandle->SamplingTime;
 80091e4:	ed84 7a12 	vstr	s14, [r4, #72]	; 0x48
  if (pHandle->PositionControlRegulation == ENABLE)
 80091e8:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80091ec:	b903      	cbnz	r3, 80091f0 <TC_PositionRegulation+0x38>
}
 80091ee:	bd38      	pop	{r3, r4, r5, pc}
    wMecAngleRef = (int32_t)(pHandle->Theta * RADTOS16);
 80091f0:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8009238 <TC_PositionRegulation+0x80>
 80091f4:	edd4 7a12 	vldr	s15, [r4, #72]	; 0x48
    wMecAngle = SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC));
 80091f8:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    wMecAngleRef = (int32_t)(pHandle->Theta * RADTOS16);
 80091fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80091fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009202:	ee17 5a90 	vmov	r5, s15
    wMecAngle = SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC));
 8009206:	f7ff fdbf 	bl	8008d88 <STC_GetSpeedSensor>
 800920a:	f7ff fd63 	bl	8008cd4 <SPD_GetMecAngle>
    hTorqueRef_Pos = PID_Controller(pHandle->PIDPosRegulator, wError);
 800920e:	1a29      	subs	r1, r5, r0
 8009210:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8009212:	f7fe fcff 	bl	8007c14 <PID_Controller>
    STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 8009216:	2104      	movs	r1, #4
    hTorqueRef_Pos = PID_Controller(pHandle->PIDPosRegulator, wError);
 8009218:	4605      	mov	r5, r0
    STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 800921a:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800921c:	f7ff fdc6 	bl	8008dac <STC_SetControlMode>
    STC_ExecRamp(pHandle->pSTC, hTorqueRef_Pos, 0);
 8009220:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8009222:	4629      	mov	r1, r5
 8009224:	2200      	movs	r2, #0
}
 8009226:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    STC_ExecRamp(pHandle->pSTC, hTorqueRef_Pos, 0);
 800922a:	f7ff bdc3 	b.w	8008db4 <STC_ExecRamp>
    TC_MoveExecution(pHandle);
 800922e:	f7ff ff35 	bl	800909c <TC_MoveExecution>
  if (pHandle->PositionCtrlStatus == TC_FOLLOWING_ON_GOING)
 8009232:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 8009236:	e7c5      	b.n	80091c4 <TC_PositionRegulation+0xc>
 8009238:	4622f983 	.word	0x4622f983

0800923c <TC_EncAlignmentCommand>:
{
 800923c:	b510      	push	{r4, lr}
  if (TC_ALIGNMENT_COMPLETED == pHandle->AlignmentStatus)
 800923e:	f890 3062 	ldrb.w	r3, [r0, #98]	; 0x62
 8009242:	2b02      	cmp	r3, #2
{
 8009244:	b082      	sub	sp, #8
 8009246:	4604      	mov	r4, r0
  if (TC_ALIGNMENT_COMPLETED == pHandle->AlignmentStatus)
 8009248:	d010      	beq.n	800926c <TC_EncAlignmentCommand+0x30>
    if (pHandle->AlignmentCfg == TC_ABSOLUTE_ALIGNMENT_SUPPORTED)
 800924a:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 800924e:	2b04      	cmp	r3, #4
 8009250:	d011      	beq.n	8009276 <TC_EncAlignmentCommand+0x3a>
      pHandle->pENC->_Super.wMecAngle = 0;
 8009252:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8009254:	2300      	movs	r3, #0
      pHandle->AlignmentStatus = TC_ALIGNMENT_COMPLETED;
 8009256:	2102      	movs	r1, #2
      pHandle->PositionControlRegulation = ENABLE;
 8009258:	2201      	movs	r2, #1
      pHandle->pENC->_Super.wMecAngle = 0;
 800925a:	6083      	str	r3, [r0, #8]
      pHandle->AlignmentStatus = TC_ALIGNMENT_COMPLETED;
 800925c:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
      pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;
 8009260:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      pHandle->PositionControlRegulation = ENABLE;
 8009264:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
}
 8009268:	b002      	add	sp, #8
 800926a:	bd10      	pop	{r4, pc}
    pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;
 800926c:	2300      	movs	r3, #0
 800926e:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
}
 8009272:	b002      	add	sp, #8
 8009274:	bd10      	pop	{r4, pc}
      pHandle->EncoderAbsoluteAligned = false;
 8009276:	2300      	movs	r3, #0
      wMecAngleRef = SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC));
 8009278:	6e80      	ldr	r0, [r0, #104]	; 0x68
      pHandle->EncoderAbsoluteAligned = false;
 800927a:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      wMecAngleRef = SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC));
 800927e:	f7ff fd83 	bl	8008d88 <STC_GetSpeedSensor>
 8009282:	f7ff fd27 	bl	8008cd4 <SPD_GetMecAngle>
  if ((pHandle->PositionCtrlStatus == TC_FOLLOWING_ON_GOING) && (movementDuration > 0))
 8009286:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
      wMecAngleRef = SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC));
 800928a:	9001      	str	r0, [sp, #4]
  if ((pHandle->PositionCtrlStatus == TC_FOLLOWING_ON_GOING) && (movementDuration > 0))
 800928c:	2b03      	cmp	r3, #3
 800928e:	d005      	beq.n	800929c <TC_EncAlignmentCommand+0x60>
  if ((pHandle->PositionCtrlStatus == TC_READY_FOR_COMMAND) && (movementDuration > 0))
 8009290:	b123      	cbz	r3, 800929c <TC_EncAlignmentCommand+0x60>
      pHandle->AlignmentStatus = TC_ZERO_ALIGNMENT_START;
 8009292:	2301      	movs	r3, #1
 8009294:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
}
 8009298:	b002      	add	sp, #8
 800929a:	bd10      	pop	{r4, pc}
    fMinimumStepDuration = (9.0f * pHandle->SamplingTime);
 800929c:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 80092a0:	ed9f 6a30 	vldr	s12, [pc, #192]	; 8009364 <TC_EncAlignmentCommand+0x128>
      TC_MoveCommand(pHandle, (float)(wMecAngleRef) / RADTOS16, Z_ALIGNMENT_NB_ROTATION, Z_ALIGNMENT_DURATION);
 80092a4:	eddf 5a30 	vldr	s11, [pc, #192]	; 8009368 <TC_EncAlignmentCommand+0x12c>
    pHandle->AngleStep = angleStep;
 80092a8:	eddf 3a30 	vldr	s7, [pc, #192]	; 800936c <TC_EncAlignmentCommand+0x130>
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 80092ac:	ed9f 2a30 	vldr	s4, [pc, #192]	; 8009370 <TC_EncAlignmentCommand+0x134>
    pHandle->AngleStep = angleStep;
 80092b0:	edc4 3a03 	vstr	s7, [r4, #12]
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 80092b4:	eec6 6a27 	vdiv.f32	s13, s12, s15
    pHandle->ElapseTime = 0.0f;
 80092b8:	2300      	movs	r3, #0
    pHandle->PositionControlRegulation = ENABLE;
 80092ba:	2201      	movs	r2, #1
 80092bc:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
    pHandle->ElapseTime = 0.0f;
 80092c0:	62e3      	str	r3, [r4, #44]	; 0x2c
    pHandle->Omega = 0.0f;
 80092c2:	6423      	str	r3, [r4, #64]	; 0x40
    pHandle->Acceleration = 0.0f;
 80092c4:	63e3      	str	r3, [r4, #60]	; 0x3c
    pHandle->PositionCtrlStatus = TC_MOVEMENT_ON_GOING;   /* new trajectory has been programmed */
 80092c6:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
    fMinimumStepDuration = (9.0f * pHandle->SamplingTime);
 80092ca:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 80092ce:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    fMinimumStepDuration = (9.0f * pHandle->SamplingTime);
 80092d2:	ee27 6a87 	vmul.f32	s12, s15, s14
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 80092d6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    pHandle->SubStepDuration = pHandle->MovementDuration / 9.0f;
 80092da:	eddf 7a26 	vldr	s15, [pc, #152]	; 8009374 <TC_EncAlignmentCommand+0x138>
      TC_MoveCommand(pHandle, (float)(wMecAngleRef) / RADTOS16, Z_ALIGNMENT_NB_ROTATION, Z_ALIGNMENT_DURATION);
 80092de:	ed9d 7a01 	vldr	s14, [sp, #4]
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 80092e2:	ee66 6a86 	vmul.f32	s13, s13, s12
      TC_MoveCommand(pHandle, (float)(wMecAngleRef) / RADTOS16, Z_ALIGNMENT_NB_ROTATION, Z_ALIGNMENT_DURATION);
 80092e6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    pHandle->SubStepDuration = pHandle->MovementDuration / 9.0f;
 80092ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 80092ee:	edc4 6a00 	vstr	s13, [r4]
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 80092f2:	ee67 6aa7 	vmul.f32	s13, s15, s15
      TC_MoveCommand(pHandle, (float)(wMecAngleRef) / RADTOS16, Z_ALIGNMENT_NB_ROTATION, Z_ALIGNMENT_DURATION);
 80092f6:	ee27 7a25 	vmul.f32	s14, s14, s11
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 80092fa:	ee26 6aa7 	vmul.f32	s12, s13, s15
    pHandle->FinalAngle = startingAngle + angleStep;
 80092fe:	ee77 2a23 	vadd.f32	s5, s14, s7
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 8009302:	eec2 3a06 	vdiv.f32	s7, s4, s12
    pHandle->CruiseSpeed = 2 * pHandle->Jerk * pHandle->SubStepDuration * pHandle->SubStepDuration;
 8009306:	ee76 6aa6 	vadd.f32	s13, s13, s13
    pHandle->SubStep[2] = 3 * pHandle->SubStepDuration;   /* Sub-step 3 of acceleration phase */
 800930a:	eeb0 4a08 	vmov.f32	s8, #8	; 0x40400000  3.0
    pHandle->SubStep[3] = 6 * pHandle->SubStepDuration;   /* Sub-step 1 of deceleration phase */
 800930e:	eef1 4a08 	vmov.f32	s9, #24	; 0x40c00000  6.0
    pHandle->SubStep[4] = 7 * pHandle->SubStepDuration;   /* Sub-step 2 of deceleration phase */
 8009312:	eeb1 5a0c 	vmov.f32	s10, #28	; 0x40e00000  7.0
    pHandle->SubStep[5] = 8 * pHandle->SubStepDuration;   /* Sub-step 3 of deceleration phase */
 8009316:	eef2 5a00 	vmov.f32	s11, #32	; 0x41000000  8.0
    pHandle->SubStep[1] = 2 * pHandle->SubStepDuration;   /* Sub-step 2 of acceleration phase */
 800931a:	ee37 3aa7 	vadd.f32	s6, s15, s15
    pHandle->SubStep[2] = 3 * pHandle->SubStepDuration;   /* Sub-step 3 of acceleration phase */
 800931e:	ee27 4a84 	vmul.f32	s8, s15, s8
    pHandle->SubStep[3] = 6 * pHandle->SubStepDuration;   /* Sub-step 1 of deceleration phase */
 8009322:	ee67 4aa4 	vmul.f32	s9, s15, s9
    pHandle->SubStep[4] = 7 * pHandle->SubStepDuration;   /* Sub-step 2 of deceleration phase */
 8009326:	ee27 5a85 	vmul.f32	s10, s15, s10
    pHandle->SubStep[5] = 8 * pHandle->SubStepDuration;   /* Sub-step 3 of deceleration phase */
 800932a:	ee27 6aa5 	vmul.f32	s12, s15, s11
    pHandle->CruiseSpeed = 2 * pHandle->Jerk * pHandle->SubStepDuration * pHandle->SubStepDuration;
 800932e:	ee66 6aa3 	vmul.f32	s13, s13, s7
    pHandle->StartingAngle = startingAngle;
 8009332:	ed84 7a01 	vstr	s14, [r4, #4]
    pHandle->FinalAngle = startingAngle + angleStep;
 8009336:	edc4 2a02 	vstr	s5, [r4, #8]
    pHandle->SubStepDuration = pHandle->MovementDuration / 9.0f;
 800933a:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
    pHandle->SubStep[0] = 1 * pHandle->SubStepDuration;   /* Sub-step 1 of acceleration phase */
 800933e:	edc4 7a04 	vstr	s15, [r4, #16]
    pHandle->SubStep[1] = 2 * pHandle->SubStepDuration;   /* Sub-step 2 of acceleration phase */
 8009342:	ed84 3a05 	vstr	s6, [r4, #20]
    pHandle->SubStep[2] = 3 * pHandle->SubStepDuration;   /* Sub-step 3 of acceleration phase */
 8009346:	ed84 4a06 	vstr	s8, [r4, #24]
    pHandle->SubStep[3] = 6 * pHandle->SubStepDuration;   /* Sub-step 1 of deceleration phase */
 800934a:	edc4 4a07 	vstr	s9, [r4, #28]
    pHandle->SubStep[4] = 7 * pHandle->SubStepDuration;   /* Sub-step 2 of deceleration phase */
 800934e:	ed84 5a08 	vstr	s10, [r4, #32]
    pHandle->SubStep[5] = 8 * pHandle->SubStepDuration;   /* Sub-step 3 of deceleration phase */
 8009352:	ed84 6a09 	vstr	s12, [r4, #36]	; 0x24
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 8009356:	edc4 3a0d 	vstr	s7, [r4, #52]	; 0x34
    pHandle->CruiseSpeed = 2 * pHandle->Jerk * pHandle->SubStepDuration * pHandle->SubStepDuration;
 800935a:	edc4 6a0e 	vstr	s13, [r4, #56]	; 0x38
    pHandle->Theta = startingAngle;
 800935e:	ed84 7a12 	vstr	s14, [r4, #72]	; 0x48
  return (RetConfigStatus);
 8009362:	e796      	b.n	8009292 <TC_EncAlignmentCommand+0x56>
 8009364:	3e638e39 	.word	0x3e638e39
 8009368:	38c90fdb 	.word	0x38c90fdb
 800936c:	40c90fdb 	.word	0x40c90fdb
 8009370:	3f060a92 	.word	0x3f060a92
 8009374:	3de38e39 	.word	0x3de38e39

08009378 <TC_EncoderReset>:
  * @brief  Set the absolute zero mechanical position.
  * @param  pHandle: handler of the current instance of the Position Control component.
  */
void TC_EncoderReset(PosCtrl_Handle_t *pHandle)
{
  if ((!pHandle->EncoderAbsoluteAligned) && (pHandle->AlignmentStatus == TC_ZERO_ALIGNMENT_START))
 8009378:	f890 2052 	ldrb.w	r2, [r0, #82]	; 0x52
{
 800937c:	4603      	mov	r3, r0
  if ((!pHandle->EncoderAbsoluteAligned) && (pHandle->AlignmentStatus == TC_ZERO_ALIGNMENT_START))
 800937e:	b922      	cbnz	r2, 800938a <TC_EncoderReset+0x12>
 8009380:	f890 c062 	ldrb.w	ip, [r0, #98]	; 0x62
 8009384:	f1bc 0f01 	cmp.w	ip, #1
 8009388:	d000      	beq.n	800938c <TC_EncoderReset+0x14>
  }
  else
  {
    /* Nothing to do */
  }
}
 800938a:	4770      	bx	lr
    pHandle->MecAngleOffset = pHandle->pENC->_Super.hMecAngle;
 800938c:	6e40      	ldr	r0, [r0, #100]	; 0x64
 800938e:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8009392:	f8a3 1054 	strh.w	r1, [r3, #84]	; 0x54
    pHandle->pENC->_Super.wMecAngle = 0;
 8009396:	6082      	str	r2, [r0, #8]
    pHandle->EncoderAbsoluteAligned = true;
 8009398:	f883 c052 	strb.w	ip, [r3, #82]	; 0x52
    pHandle->AlignmentStatus = TC_ALIGNMENT_COMPLETED;
 800939c:	f04f 0c02 	mov.w	ip, #2
 80093a0:	f883 c062 	strb.w	ip, [r3, #98]	; 0x62
    pHandle->Theta = 0.0f;
 80093a4:	f04f 0c00 	mov.w	ip, #0
    pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;
 80093a8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    pHandle->Theta = 0.0f;
 80093ac:	f8c3 c048 	str.w	ip, [r3, #72]	; 0x48
    ENC_SetMecAngle(pHandle->pENC, pHandle->MecAngleOffset);
 80093b0:	f7fe b9f6 	b.w	80077a0 <ENC_SetMecAngle>

080093b4 <TC_GetCurrentPosition>:
  * @brief  Returns the current rotor mechanical angle, expressed in radiant.
  * @param  pHandle: handler of the current instance of the Position Control component.
  * @retval current mechanical position
  */
float TC_GetCurrentPosition(PosCtrl_Handle_t *pHandle)
{
 80093b4:	b508      	push	{r3, lr}

  return ((float)((SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC))) / RADTOS16));
 80093b6:	6e80      	ldr	r0, [r0, #104]	; 0x68
 80093b8:	f7ff fce6 	bl	8008d88 <STC_GetSpeedSensor>
 80093bc:	f7ff fc8a 	bl	8008cd4 <SPD_GetMecAngle>
 80093c0:	ee07 0a90 	vmov	s15, r0
 80093c4:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80093c8:	eddf 7a02 	vldr	s15, [pc, #8]	; 80093d4 <TC_GetCurrentPosition+0x20>
}
 80093cc:	ee20 0a27 	vmul.f32	s0, s0, s15
 80093d0:	bd08      	pop	{r3, pc}
 80093d2:	bf00      	nop
 80093d4:	38c90fdb 	.word	0x38c90fdb

080093d8 <TC_GetTargetPosition>:
  * @retval Target mechanical position
  */
float TC_GetTargetPosition(PosCtrl_Handle_t *pHandle)
{
  return (pHandle->FinalAngle);
}
 80093d8:	ed90 0a02 	vldr	s0, [r0, #8]
 80093dc:	4770      	bx	lr
 80093de:	bf00      	nop

080093e0 <TC_GetMoveDuration>:
  * @retval Duration of programmed movement
  */
float TC_GetMoveDuration(PosCtrl_Handle_t *pHandle)
{
  return (pHandle->MovementDuration);
}
 80093e0:	ed90 0a00 	vldr	s0, [r0]
 80093e4:	4770      	bx	lr
 80093e6:	bf00      	nop

080093e8 <TC_GetControlPositionStatus>:
  * @retval Position Control Status
  */
PosCtrlStatus_t TC_GetControlPositionStatus(PosCtrl_Handle_t *pHandle)
{
  return (pHandle->PositionCtrlStatus);
}
 80093e8:	f890 0060 	ldrb.w	r0, [r0, #96]	; 0x60
 80093ec:	4770      	bx	lr
 80093ee:	bf00      	nop

080093f0 <TC_GetAlignmentStatus>:
  * @param  pHandle handler of the current instance of the Position Control component.
  */
AlignStatus_t TC_GetAlignmentStatus(PosCtrl_Handle_t *pHandle)
{
  return (pHandle->AlignmentStatus);
}
 80093f0:	f890 0062 	ldrb.w	r0, [r0, #98]	; 0x62
 80093f4:	4770      	bx	lr
 80093f6:	bf00      	nop

080093f8 <TC_IncTick>:
  * @brief  Increments Tick counter used in follow mode.
  * @param  pHandle handler of the current instance of the Position Control component.
  */
void TC_IncTick(PosCtrl_Handle_t *pHandle)
{
  pHandle->TcTick++;
 80093f8:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80093fa:	3301      	adds	r3, #1
 80093fc:	6583      	str	r3, [r0, #88]	; 0x58
}
 80093fe:	4770      	bx	lr

08009400 <VSS_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->_Super.bSpeedErrorNumber = 0U;
 8009400:	2300      	movs	r3, #0
    pHandle->hRemainingStep = 0U;
    pHandle->hElAngleAccu = 0;

    pHandle->bTransitionStarted = false;
    pHandle->bTransitionEnded = false;
    pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 8009402:	8ec2      	ldrh	r2, [r0, #54]	; 0x36
    pHandle->_Super.bSpeedErrorNumber = 0U;
 8009404:	7003      	strb	r3, [r0, #0]
    pHandle->wElSpeedDpp32 = 0;
 8009406:	e9c0 3308 	strd	r3, r3, [r0, #32]
    pHandle->_Super.hElAngle = 0;
 800940a:	6043      	str	r3, [r0, #4]
    pHandle->_Super.hAvrMecSpeedUnit = 0;
 800940c:	60c3      	str	r3, [r0, #12]
    pHandle->_Super.hMecAccelUnitP = 0;
 800940e:	8243      	strh	r3, [r0, #18]
    pHandle->hRemainingStep = 0U;
 8009410:	8503      	strh	r3, [r0, #40]	; 0x28
    pHandle->bTransitionStarted = false;
 8009412:	8583      	strh	r3, [r0, #44]	; 0x2c
    pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 8009414:	85c2      	strh	r2, [r0, #46]	; 0x2e
    pHandle->hElAngleAccu = 0;
 8009416:	6303      	str	r3, [r0, #48]	; 0x30

    pHandle->bCopyObserver = false;
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
}
 8009418:	4770      	bx	lr
 800941a:	bf00      	nop

0800941c <VSS_Init>:
{
 800941c:	b508      	push	{r3, lr}
  VSS_Clear(pHandle);
 800941e:	f7ff ffef 	bl	8009400 <VSS_Clear>
}
 8009422:	bd08      	pop	{r3, pc}

08009424 <VSS_SetMecAngle>:
  }
  else
  {
#endif
    pHandle->hElAngleAccu = hMecAngle;
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 8009424:	7843      	ldrb	r3, [r0, #1]
    pHandle->hElAngleAccu = hMecAngle;
 8009426:	8601      	strh	r1, [r0, #48]	; 0x30
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 8009428:	fb91 f3f3 	sdiv	r3, r1, r3
    pHandle->_Super.hElAngle = hMecAngle;
 800942c:	8081      	strh	r1, [r0, #4]
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 800942e:	80c3      	strh	r3, [r0, #6]
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
}
 8009430:	4770      	bx	lr
 8009432:	bf00      	nop

08009434 <VSS_SetMecAcceleration>:
    int32_t wMecAccDppP32;
    uint16_t hNbrStep;
    int16_t hCurrentMecSpeedDpp;
    int16_t hFinalMecSpeedDpp;

    if (false == pHandle->bTransitionStarted)
 8009434:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8009438:	b99b      	cbnz	r3, 8009462 <VSS_SetMecAcceleration+0x2e>
{
 800943a:	b510      	push	{r4, lr}
    {
      if (0U == hDurationms)
 800943c:	b992      	cbnz	r2, 8009464 <VSS_SetMecAcceleration+0x30>
        pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;

        pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)hFinalMecSpeedUnit)
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
                                              / (((int32_t)SPEED_UNIT)
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800943e:	8b43      	ldrh	r3, [r0, #26]
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
 8009440:	69c4      	ldr	r4, [r0, #28]
        pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;
 8009442:	8181      	strh	r1, [r0, #12]
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 8009444:	eb03 0383 	add.w	r3, r3, r3, lsl #2
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
 8009448:	fb04 fc01 	mul.w	ip, r4, r1
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800944c:	005b      	lsls	r3, r3, #1
                                              / (((int32_t)SPEED_UNIT)
 800944e:	fb9c f3f3 	sdiv	r3, ip, r3

        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 8009452:	f890 c001 	ldrb.w	ip, [r0, #1]

        pHandle->hRemainingStep = 0U;
 8009456:	8502      	strh	r2, [r0, #40]	; 0x28
        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 8009458:	fb1c f303 	smulbb	r3, ip, r3
 800945c:	81c3      	strh	r3, [r0, #14]

        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800945e:	8541      	strh	r1, [r0, #42]	; 0x2a
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
}
 8009460:	bd10      	pop	{r4, pc}
 8009462:	4770      	bx	lr
        hNbrStep = (uint16_t)((((uint32_t)hDurationms) * ((uint32_t)pHandle->hSpeedSamplingFreqHz)) / 1000U);
 8009464:	8e83      	ldrh	r3, [r0, #52]	; 0x34
 8009466:	4c16      	ldr	r4, [pc, #88]	; (80094c0 <VSS_SetMecAcceleration+0x8c>)
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 8009468:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
        hNbrStep = (uint16_t)((((uint32_t)hDurationms) * ((uint32_t)pHandle->hSpeedSamplingFreqHz)) / 1000U);
 800946c:	fb02 f303 	mul.w	r3, r2, r3
 8009470:	fba4 4303 	umull	r4, r3, r4, r3
 8009474:	f3c3 138f 	ubfx	r3, r3, #6, #16
        hNbrStep++;
 8009478:	3301      	adds	r3, #1
 800947a:	b29b      	uxth	r3, r3
        pHandle->hRemainingStep = hNbrStep;
 800947c:	8503      	strh	r3, [r0, #40]	; 0x28
        if (0U == hNbrStep)
 800947e:	b923      	cbnz	r3, 800948a <VSS_SetMecAcceleration+0x56>
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 8009480:	ea4f 430c 	mov.w	r3, ip, lsl #16
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8009484:	8541      	strh	r1, [r0, #42]	; 0x2a
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 8009486:	6243      	str	r3, [r0, #36]	; 0x24
}
 8009488:	bd10      	pop	{r4, pc}
                                    / (((int32_t )SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800948a:	8b42      	ldrh	r2, [r0, #26]
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 800948c:	7844      	ldrb	r4, [r0, #1]
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800948e:	8541      	strh	r1, [r0, #42]	; 0x2a
                                    / (((int32_t )SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 8009490:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8009494:	ea4f 0e42 	mov.w	lr, r2, lsl #1
        hFinalMecSpeedDpp = (int16_t)((((int32_t )hFinalMecSpeedUnit) * ((int32_t)pHandle->_Super.DPPConvFactor))
 8009498:	69c2      	ldr	r2, [r0, #28]
 800949a:	fb01 f202 	mul.w	r2, r1, r2
                                    / (((int32_t )SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800949e:	fb92 f2fe 	sdiv	r2, r2, lr
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 80094a2:	fb9c fef4 	sdiv	lr, ip, r4
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 80094a6:	eba2 020e 	sub.w	r2, r2, lr
                         * ((int32_t)65536)) / ((int32_t )hNbrStep);
 80094aa:	0412      	lsls	r2, r2, #16
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 80094ac:	fb92 f3f3 	sdiv	r3, r2, r3
          pHandle->wElAccDppP32 = wMecAccDppP32 * ((int16_t)pHandle->_Super.bElToMecRatio);
 80094b0:	fb04 f303 	mul.w	r3, r4, r3
 80094b4:	6203      	str	r3, [r0, #32]
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 80094b6:	ea4f 430c 	mov.w	r3, ip, lsl #16
 80094ba:	6243      	str	r3, [r0, #36]	; 0x24
    }
 80094bc:	e7e4      	b.n	8009488 <VSS_SetMecAcceleration+0x54>
 80094be:	bf00      	nop
 80094c0:	10624dd3 	.word	0x10624dd3

080094c4 <memset>:
 80094c4:	4402      	add	r2, r0
 80094c6:	4603      	mov	r3, r0
 80094c8:	4293      	cmp	r3, r2
 80094ca:	d100      	bne.n	80094ce <memset+0xa>
 80094cc:	4770      	bx	lr
 80094ce:	f803 1b01 	strb.w	r1, [r3], #1
 80094d2:	e7f9      	b.n	80094c8 <memset+0x4>

080094d4 <__libc_init_array>:
 80094d4:	b570      	push	{r4, r5, r6, lr}
 80094d6:	4d0d      	ldr	r5, [pc, #52]	; (800950c <__libc_init_array+0x38>)
 80094d8:	4c0d      	ldr	r4, [pc, #52]	; (8009510 <__libc_init_array+0x3c>)
 80094da:	1b64      	subs	r4, r4, r5
 80094dc:	10a4      	asrs	r4, r4, #2
 80094de:	2600      	movs	r6, #0
 80094e0:	42a6      	cmp	r6, r4
 80094e2:	d109      	bne.n	80094f8 <__libc_init_array+0x24>
 80094e4:	4d0b      	ldr	r5, [pc, #44]	; (8009514 <__libc_init_array+0x40>)
 80094e6:	4c0c      	ldr	r4, [pc, #48]	; (8009518 <__libc_init_array+0x44>)
 80094e8:	f000 f826 	bl	8009538 <_init>
 80094ec:	1b64      	subs	r4, r4, r5
 80094ee:	10a4      	asrs	r4, r4, #2
 80094f0:	2600      	movs	r6, #0
 80094f2:	42a6      	cmp	r6, r4
 80094f4:	d105      	bne.n	8009502 <__libc_init_array+0x2e>
 80094f6:	bd70      	pop	{r4, r5, r6, pc}
 80094f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80094fc:	4798      	blx	r3
 80094fe:	3601      	adds	r6, #1
 8009500:	e7ee      	b.n	80094e0 <__libc_init_array+0xc>
 8009502:	f855 3b04 	ldr.w	r3, [r5], #4
 8009506:	4798      	blx	r3
 8009508:	3601      	adds	r6, #1
 800950a:	e7f2      	b.n	80094f2 <__libc_init_array+0x1e>
 800950c:	080097e4 	.word	0x080097e4
 8009510:	080097e4 	.word	0x080097e4
 8009514:	080097e4 	.word	0x080097e4
 8009518:	080097e8 	.word	0x080097e8

0800951c <memcpy>:
 800951c:	440a      	add	r2, r1
 800951e:	4291      	cmp	r1, r2
 8009520:	f100 33ff 	add.w	r3, r0, #4294967295
 8009524:	d100      	bne.n	8009528 <memcpy+0xc>
 8009526:	4770      	bx	lr
 8009528:	b510      	push	{r4, lr}
 800952a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800952e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009532:	4291      	cmp	r1, r2
 8009534:	d1f9      	bne.n	800952a <memcpy+0xe>
 8009536:	bd10      	pop	{r4, pc}

08009538 <_init>:
 8009538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800953a:	bf00      	nop
 800953c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800953e:	bc08      	pop	{r3}
 8009540:	469e      	mov	lr, r3
 8009542:	4770      	bx	lr

08009544 <_fini>:
 8009544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009546:	bf00      	nop
 8009548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800954a:	bc08      	pop	{r3}
 800954c:	469e      	mov	lr, r3
 800954e:	4770      	bx	lr
